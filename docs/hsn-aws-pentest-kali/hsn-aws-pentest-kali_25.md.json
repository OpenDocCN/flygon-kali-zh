["```\ngit clone https://github.com/RhinoSecurityLabs/pacu.git \ncd pacu/ && bash install.sh \npython3 pacu.py \n```", "```\n   Pacu (ExampleSession:No Keys Set) > \n```", "```\n   search ec2 \n```", "```\n   search category PERSIST \n```", "```\n   search cat PERSIST \n```", "```\n run ec2__enum --instances --regions us-east-1 \n```", "```\n   ec2_data = copy.deepcopy(session.EC2) \n```", "```\n   session.update(pacu_main.database, EC2=ec2_data) \n```", "```\nif fetch_data(['EC2', 'SecurityGroups'], 'ec2__enum', '--security-groups') is False:\n        print('Pre-req module not run successfully. Exiting...')\n        return\n```", "```\nclient = boto3.client(\n    'ec2',\n    region_name='us-east-1',\n    aws_access_key_id='AKIAEXAMPLEKEY',\n    aws_secret_access_key='examplekeyexamplekeyexamplekey',\n    aws_session_token='examplesessiontokenexamplesessiontokenexamplesessiontokenexamplesessiontokenexamplesessiontokenexamplesessiontokenexamplesessiontoken',\n    config=botocore.config.Config(\n        proxies={'https': 'socks5://127.0.0.1:{}'.format(socks_port), 'http': 'socks5://127.0.0.1:{}'.format(socks_port)} if not proxy_settings.target_agent == [] else None,\n        user_agent=user_agent,\n        parameter_validation=parameter_validation\n    )\n)\n```", "```\nclient = pacu_main.get_boto3_client('ec2', 'us-east-1')\n```", "```\nimport boto3\nimport botocore\n\ntry:\n    client = boto3.client('s3')\n\n    buckets = client.list_buckets()['Buckets']\n\n    print(buckets)\nexcept botocore.exceptions.ClientError as error:\n    print('Failed to list S3 buckets: {}'.format(error))\n```", "```\n#!/usr/bin/env python3\nimport argparse\nfrom botocore.exceptions import ClientError\n\nmodule_info = {\n    'name': 's3__enum',\n    'author': 'Example author of Example company',\n    'category': 'ENUM',\n    'one_liner': 'Enumerates S3 buckets in the target account.',\n    'description': 'This module enumerates what S3 buckets exist in the target account and saves the information to the Pacu database.',\n    'services': ['S3'],\n    'prerequisite_modules': [],\n    'external_dependencies': [],\n    'arguments_to_autocomplete': [],\n}\n\nparser = argparse.ArgumentParser(add_help=False, description=module_info['description'])\n\ndef main(args, pacu_main):\n    session = pacu_main.get_active_session()\n    args = parser.parse_args(args)\n    print = pacu_main.print\n\n    return data\n\ndef summary(data, pacu_main):\n    return 'Found {} S3 bucket(s).'.format(len(data['buckets']))\n```", "```\ndata = {'Buckets': []}\n\ntry:\n    client = pacu_main.get_boto3_client('s3')\n\n     data['Buckets'] = client.list_buckets()['Buckets']\nexcept botocore.exceptions.ClientError as error:\n    print('Failed to list S3 buckets: {}'.format(error))\n```", "```\n    session.update(pacu_main.database, S3=data)\n```", "```\n#!/usr/bin/env python3\n\n# Import the necessary libraries\nimport argparse\nfrom botocore.exceptions import ClientError\n\n# Declare the required module info for the Pacu UI\nmodule_info = {\n    'name': 's3__enum',\n    'author': 'Example author of Example company',\n    'category': 'ENUM',\n    'one_liner': 'Enumerates S3 buckets in the target account.',\n    'description': 'This module enumerates what S3 buckets exist in the target account and saves the information to the Pacu database.',\n    'services': ['S3'],\n    'prerequisite_modules': [],\n    'external_dependencies': [],\n    'arguments_to_autocomplete': [],\n}\n\n# Define our argument parser, for if our module supported any arguments\nparser = argparse.ArgumentParser(add_help=False, description=module_info['description'])\n\n# Begin the main function, which is run when the module itself is run\ndef main(args, pacu_main):\n    # Setup our session, arguments, and override the print function\n    session = pacu_main.get_active_session()\n    args = parser.parse_args(args)\n    print = pacu_main.print\n\n    # Create a variable to store data in as we enumerate it\n    data = {'Buckets': []}\n\n    # Attempt to list the buckets in the target account, catching any potential errors\n    try:\n        client = pacu_main.get_boto3_client('s3')\n\n        data['Buckets'] = client.list_buckets()['Buckets']\n    except ClientError as error:\n        print('Failed to list S3 buckets: {}'.format(error))\n\n    # Update the Pacu database with the S3 data that we enumerated\n    session.update(pacu_main.database, S3=data)\n\n    return data\n\n# Define our summary function that outputs a short summary of the module execution after it is done\ndef summary(data, pacu_main):\n    return 'Found {} S3 bucket(s).'.format(len(data['Buckets']))\n```"]