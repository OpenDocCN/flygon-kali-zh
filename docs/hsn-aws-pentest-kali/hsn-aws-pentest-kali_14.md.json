["```\n pip3 install boto3 \n```", "```\n python3 -m pip install boto3 \n```", "```\n#!/usr/bin/env python3\n\nimport boto3\n\n```", "```\nsession = boto3.session.Session(profile_name='Test', region_name='us-west-2') \n```", "```\n   client = session.client('ec2')  \n```", "```\n   response = client.describe_instances() \n```", "```\n# First, create an empty list for the enumerated instances to be stored in\ninstances = []\n\n# Next, make our initial API call with MaxResults set to 1000, which is the max\n# This will ensure we are making as few API calls as possible\nresponse = client.describe_instances(MaxResults=1000)\n\n# The top level of the results will be \"Reservations\" so iterate through those\nfor reservation in response['Reservations']:\n    # Check if any instances are in this reservation\n    if reservation.get('Instances'):\n        # Merge the list of instances into the list we created earlier\n        instances.extend(reservation['Instances'])\n\n# response['NextToken'] will be a valid value if we don't have all the results yet\n# It will be \"None\" if we have completed enumeration of the instances\n# So we need check if it has a valid value, and because this could happen again, we will need to make it a loop\n\n# As long as NextToken has a valid value, do the following, otherwise skip it\nwhile response.get('NextToken'):\n    # Run the API call again while supplying the previous calls NextToken\n    # This will get us the next page of 1000 results\n    response = client.describe_instances(MaxResults=1000, NextToken=response['NextToken'])\n\n    # Iterate the reservations and add any instances found to our variable again\n    for reservation in response['Reservations']:\n        if reservation.get('Instances'):\n            instances.extend(reservation['Instances'])\n```", "```\n# Import the json library\nimport json\n\n# Open up the local file we are going to store our data in\nwith open('./ec2-instances.json', 'w+') as f:\n    # Use the json library to dump the contents to the newly opened file with some indentation to make it easier to read. Default=str to convert dates to strings prior to dumping, so there are no errors\n    json.dump(instances, f, indent=4, default=str)\n```", "```\n#!/usr/bin/env python3\n\nimport boto3\nimport json\n\nsession = boto3.session.Session(profile_name='Test', region_name='us-west-2')\nclient = session.client('ec2')\n\ninstances = []\n\nresponse = client.describe_instances(MaxResults=1000)\n\nfor reservation in response['Reservations']:\n    if reservation.get('Instances'):\n        instances.extend(reservation['Instances'])\n\nwhile response.get('NextToken'):\n    response = client.describe_instances(MaxResults=1000, NextToken=response['NextToken'])\n\n    for reservation in response['Reservations']:\n        if reservation.get('Instances'):\n            instances.extend(reservation['Instances'])\n\nwith open('./ec2-instances.json', 'w+') as f:\n    json.dump(instances, f, indent=4, default=str)\n```", "```\npython3 our_script.py \n```", "```\nclient = session.client('s3') \n```", "```\nresponse = client.list_buckets() \n```", "```\nbucket_names = []\n  for bucket in response['Buckets']:\n       bucket_names.append(bucket['Name'])\n```", "```\n# Create a dictionary to hold the lists of object (file) names\nbucket_objects = {}\n\n# Loop through each bucket we found\nfor bucket in bucket_names:\n    # Run our first API call to pull in the objects\n    response = client.list_objects_v2(Bucket=bucket, MaxKeys=1000)\n\n    # Check if there are any objects returned (none will return if no objects are in the bucket)\n    if response.get('Contents'):\n        # Store the fetched set of objects\n        bucket_objects[bucket] = response['Contents']\n    else:\n        # Set this bucket to an empty object and move to the next bucket\n        bucket_objects[bucket] = []\n        continue\n\n    # Check if we got all the results or not, loop until we have everything if so\n    while response['IsTruncated']:\n        response = client.list_objects_v2(Bucket=bucket, MaxKeys=1000, ContinuationToken=response['NextContinuationToken'])\n\n        # Store the newly fetched set of objects\n        bucket_objects[bucket].extend(response['Contents'])\n```", "```\n# We know bucket_objects has a key for each bucket so let's iterate that\nfor bucket in bucket_names:\n    # Open up a local file with the name of the bucket\n    with open('./{}.txt'.format(bucket), 'w+') as f:\n        # Iterate through each object in the bucket\n        for bucket_object in bucket_objects[bucket]:\n            # Write a line to our file with the object details we are interested in (file name and size)\n            f.write('{} ({} bytes)\\n'.format(bucket_object['Key'], bucket_object['Size']))\n```", "```\nclient = session.client('s3')\n\nbucket_names = []\n\nresponse = client.list_buckets()\nfor bucket in response['Buckets']:\n    bucket_names.append(bucket['Name'])\n\nbucket_objects = {}\n\nfor bucket in bucket_names:\n    response = client.list_objects_v2(Bucket=bucket, MaxKeys=1000)\n\n    bucket_objects[bucket] = response['Contents']\n\n    while response['IsTruncated']:\n        response = client.list_objects_v2(Bucket=bucket, MaxKeys=1000, ContinuationToken=response['NextContinuationToken'])\n\n        bucket_objects[bucket].extend(response['Contents'])\n\nfor bucket in bucket_names:\n    with open('./{}.txt'.format(bucket), 'w+') as f:\n        for bucket_object in bucket_objects[bucket]:\n            f.write('{} ({} bytes)\\n'.format(bucket_object['Key'], bucket_object['Size']))\n```", "```\npython3 our_script.py \n```", "```\n#!/usr/bin/env python3\n\nimport boto3\n\nsession = boto3.session.Session(profile_name='Test', region_name='us-west-2')\nclient = session.client('iam')\n```", "```\n# Declare the variables that will store the enumerated information\nuser_details = []\ngroup_details = []\nrole_details = []\npolicy_details = []\n\n# Make our first get_account_authorization_details API call\nresponse = client.get_account_authorization_details()\n\n# Store this first set of data\nif response.get('UserDetailList'):\n    user_details.extend(response['UserDetailList'])\nif response.get('GroupDetailList'):\n    group_details.extend(response['GroupDetailList'])\nif response.get('RoleDetailList'):\n    role_details.extend(response['RoleDetailList'])\nif response.get('Policies'):\n    policy_details.extend(response['Policies'])\n```", "```\n# Check to see if there is more data to grab\nwhile response['IsTruncated']:\n    # Make the request for the next page of details\n    response = client.get_account_authorization_details(Marker=response['Marker'])\n\n    # Store the data again\n    if response.get('UserDetailList'):\n        user_details.extend(response['UserDetailList'])\n    if response.get('GroupDetailList'):\n        group_details.extend(response['GroupDetailList'])\n    if response.get('RoleDetailList'):\n        role_details.extend(response['RoleDetailList'])\n    if response.get('Policies'):\n        policy_details.extend(response['Policies'])\n```", "```\n# Import the json library\nimport json\n\n# Open up each file and dump the respective JSON into them\nwith open('./users.json', 'w+') as f:\n    json.dump(user_details, f, indent=4, default=str)\nwith open('./groups.json', 'w+') as f:\n    json.dump(group_details, f, indent=4, default=str)\nwith open('./roles.json', 'w+') as f:\n    json.dump(role_details, f, indent=4, default=str)\nwith open('./policies.json', 'w+') as f:\n    json.dump(policy_details, f, indent=4, default=str)\n```", "```\n#!/usr/bin/env python3\n\nimport boto3\nimport json\n\nsession = boto3.session.Session(profile_name='Test', region_name='us-west-2')\nclient = session.client('iam')\n\nuser_details = []\ngroup_details = []\nrole_details = []\npolicy_details = []\n\nresponse = client.get_account_authorization_details()\n\nif response.get('UserDetailList'):\n    user_details.extend(response['UserDetailList'])\nif response.get('GroupDetailList'):\n    group_details.extend(response['GroupDetailList'])\nif response.get('RoleDetailList'):\n    role_details.extend(response['RoleDetailList'])\nif response.get('Policies'):\n    policy_details.extend(response['Policies'])\n\nwhile response['IsTruncated']:\n    response = client.get_account_authorization_details(Marker=response['Marker'])\n    if response.get('UserDetailList'):\n        user_details.extend(response['UserDetailList'])\n    if response.get('GroupDetailList'):\n        group_details.extend(response['GroupDetailList'])\n    if response.get('RoleDetailList'):\n        role_details.extend(response['RoleDetailList'])\n    if response.get('Policies'):\n        policy_details.extend(response['Policies'])\n\nwith open('./users.json', 'w+') as f:\n    json.dump(user_details, f, indent=4, default=str)\nwith open('./groups.json', 'w+') as f:\n    json.dump(group_details, f, indent=4, default=str)\nwith open('./roles.json', 'w+') as f:\n    json.dump(role_details, f, indent=4, default=str)\nwith open('./policies.json', 'w+') as f:\n    json.dump(policy_details, f, indent=4, default=str)\n```", "```\npython3 get_account_details.py \n```", "```\n   username = client.get_user()['User']['UserName'] \n```", "```\n# Define a variable that will hold our user\ncurrent_user = None\n\n# Iterate through the enumerated users\nfor user in user_details:\n    # See if this user is our user\n    if user['UserName'] == username:\n        # Set the current_user variable to our user\n        current_user = user\n\n        # We found the user, so we don't need to iterate through the rest of them\n        break\n```", "```\n# Create an empty list that will hold all the policies related to our user\nmy_policies = []\n\n# Check if any inline policies are attached to my user\nif current_user.get('UserPolicyList'):\n    # Iterate through the inline policies to pull their documents\n    for policy in current_user['UserPolicyList']:\n        # Add the policy to our list\n        my_policies.append(policy['PolicyDocument'])\n```", "```\n# Check if any managed policies are attached to my user\nif current_user.get('AttachedManagedPolicies'):\n    # Iterate through the list of managed policies\n    for managed_policy in user['AttachedManagedPolicies']:\n        # Note the policy ARN so we can find it in our other variable\n        policy_arn = managed_policy['PolicyArn']\n\n        # Iterate through the policies stored in policy_details to find this policy\n        for policy_detail in policy_details:\n            # Check if we found the policy yet\n            if policy_detail['Arn'] == policy_arn:\n                # Determine the default policy version, so we know which version to grab\n                default_version = policy_detail['DefaultVersionId']\n\n                # Iterate the available policy versions to find the one we want\n                for version in policy_detail['PolicyVersionList']:\n                    # Check if we found the default version yet\n                    if version['VersionId'] == default_version:\n                        # Add this policy document to our original variable\n                        my_policies.append(version['Document'])\n\n                        # We found the document, so exit this loop\n                        break\n                # We found the policy, so exit this loop\n                break\n```", "```\n# Check if we are in any groups\nif current_user.get('GroupList'):\n    # Iterate through the list of groups\n    for user_group in current_user['GroupList']:\n        # Iterate through all groups to find this one\n        for group in group_details:\n            # Check if we found this group yet\n            if group['GroupName'] == user_group:\n                # Check for any inline policies on this group\n                if group.get('GroupPolicyList'):\n                    # Iterate through each inline policy\n                    for inline_policy in group['GroupPolicyList']:\n                        # Add the policy document to our original variable\n                        my_policies.append(inline_policy['PolicyDocument'])\n\n                # Check for any managed policies on this group\n                if group.get('AttachedManagedPolicies'):\n                    # Iterate through each managed policy detail\n                    for managed_policy in group['AttachedManagedPolicies']:\n                        # Grab the policy ARN\n                        policy_arn = managed_policy['PolicyArn']\n\n                        # Find the policy in our list of policies\n                        for policy in policy_details:\n                            # Check and see if we found it yet\n                            if policy['Arn'] == policy_arn:\n                                # Get the default version\n                                default_version = policy['DefaultVersionId']\n\n                                # Find the document for the default version\n                                for version in policy['PolicyVersionList']:\n                                    # Check and see if we found it yet\n                                    if version['VersionId'] == default_version:\n                                        # Add the document to our original variable\n                                        my_policies.append(version['Document'])\n\n                                        # Found the version, so break out of this loop\n                                        break\n                                    # Found the policy, so break out of this loop\n                                    break\n```", "```\nwith open('./my-user-permissions.json', 'w+') as f:\n json.dump(my_policies, f, indent=4, default=str)\n```", "```\n python3 get_account_details.py\n```", "```\n{ \n    \"Version\": \"2012-10-17\", \n    \"Statement\": [ \n        { \n            \"Effect\": \"Allow\", \n            \"Action\": \"iam:PutUserPolicy\", \n            \"Resource\": \"*\" \n        } \n    ] \n} \n```", "```\n apt-get install git \n```", "```\n git clone https://github.com/RhinoSecurityLabs/pacu.git\n```", "```\n cd pacu && bash install.sh \n```", "```\n python3 pacu.py\n```", "```\n import_keys Test \n```", "```\nImported keys as \"imported-Test\"\n```", "```\n help iam__enum_permissions \n```", "```\n run iam__enum_permissions \n```", "```\nhelp iam__privesc_scan\n```", "```\nrun iam__privesc_scan\n```", "```\n{ \n    \"Version\": \"2012-10-17\", \n    \"Statement\": [ \n        { \n            \"Effect\": \"Allow\", \n            \"Action\": \"*\", \n            \"Resource\": \"*\" \n        } \n    ] \n} \n```", "```\n   aws guardduty list-detectors --profile Test --region us-west-2 \n```", "```\n run ec2__download_userdata \n```", "```\n echo \"test\" > /test.txt \n```"]