["```\nrequire 'msf/core' \nclass MetasploitModule < Msf::Auxiliary \n  def initialize(info = {}) \n    super(update_info(info, \n      'Name'           => 'Module name', \n      'Description'    => %q{ \n       Say something that the user might want to know. \n      }, \n      'Author'         => [ 'Name' ], \n      'License'        => MSF_LICENSE \n    )) \n  end \ndef run \n    # Main function \n  end \nend \n\n```", "```\n# This file is part of the Metasploit Framework and may be subject to \n# redistribution and commercial restrictions. Please see the Metasploit \n# website for more information on licensing and terms of use. \n# http://metasploit.com/ \nrequire 'rex/proto/http' \nrequire 'msf/core' \nclass Metasploit3 < Msf::Auxiliary \n\n```", "```\n# Exploit mixins should be called first\ninclude Msf::Exploit::Remote::HttpClient\ninclude Msf::Auxiliary::WmapScanServer\n# Scanner mixin should be near last\ninclude Msf::Auxiliary::Scanner\n\n```", "```\ndef initialize \n  super( \n    'Name'        => 'HTTP Version Detection', \n    'Description' => 'Display version information about each system', \n    'Author'      => 'hdm', \n    'License'     => MSF_LICENSE \n  ) \n\n  register_wmap_options({ \n    'OrderID' => 0, \n    'Require' => {}, \n  }) \nend \n\n```", "```\n  def run_host(ip) \n    begin \n      connect \n      res = send_request_raw({'uri' => '/', 'method' => 'GET' }) \n      return if not res \n      fp = http_fingerprint(:response => res) \n      print_status(\"#{ip}:#{rport} #{fp}\") if fp \n      rescue ::Timeout::Error, ::Errno::EPIPE \n    end \n  end \nend \n\n```"]