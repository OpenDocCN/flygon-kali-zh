["```\n        apt-get install gpsd\n\n```", "```\n        apt-get install gpsd-clients\n\n```", "```\n        lsusb\n\n```", "```\n    ifconfig\n\n```", "```\n        ls /dev/gps*\n\n```", "```\n    gpsd /dev/gps[x]\n\n```", "``` ) to access the Kismet menu at the top. Scroll right to the Windows menu, then select GPS Details:\n\n![](img/cb99f363-0ff7-44f8-86f6-9d316895561a.png)\n\nGPS details window\n\n9.  Provided that you are getting a good signal with your GPS you should see a window that shows something similar to the following screenshot:\n\n![](img/4461db74-2491-44d8-98bf-114da2d43ea0.png)\n\nGPS signal received in Kismet\n\nKeep in mind that, if you do not receive signals from multiple satellites, you will not be able to get reliable location information. In the event that you are unable to receive a decent signal from multiple satellites, you should try a different location by moving and waiting a few moments to see if you can reacquire a signal.\n\n5.  Our next step is to convert the `.netxml` files created during a session of Kismet to `csv` format. To do this, we will use an application called `giskismet`, which will allow us to convert the `netxml` to our intended `csv` format. Before we do anything, we need to install `giskismet`; to do this, we perform the following steps:\n\n1\\. `apt-get update`.\n\n2\\. `apt-get install giskismet`.\n\n3\\. Press *Enter*.\n\n```", "```\n\nOnce you have Kismet configured to use a GPS to determine the location of wireless access points and clients, you can also use it to detect rogue access points that are not under your control, but are attached to your network. To do this, you need to know the access points that are approved to attach to your network, then use Kismet to survey the area and locate those access points that you do not recognize and may be connected to your network.\n\nWith a KML file created from the original data, we can now do the real cool part and import this data into Google Earth:\n\n1.  Using your browser, open Google Earth.\n2.  On the left, click My Places.\n3.  Click Import KML file.\n4.  Choose the location of the file you want to upload.\n5.  Select and open the KML file. A preview of the list will open in Google Earth.\n6.  To keep these places in your list, click Save.\n7.  The locations will be saved to My Places.\n\n8.  The following screenshot shows information from a KML file displayed within Google Earth.\n\n![](img/dc045f01-062b-409f-afec-37b9ed6fbc9e.jpg)\n\nKML data merged into Google Earth\n\n# Creating a rogue access point\n\nAnother effective way to compromise or circumvent access control on a wireless network is to create what is known as a rogue access point. A rogue access point is simply a wireless access point that has been installed on a network without explicit permission or authorization from the owner or administrator of that network. In practice, a rogue access point can be put in place by a well-intentioned employee, or even a malicious party such as a disgruntled employee, or in an intruder.\n\nAn access point can come in one of two forms: it can be either a soft access point or some form of hard access point.\n\nA soft access point is an access point that is created through software such as the types we have in Kali as well as other third-party applications. It can even be argued that the software present on smartphones creates a soft access point out of the smartphone itself by sharing out the phone's internet access through a Wi-Fi connection.\n\nA hard access point is more straightforward, as it takes the form of a hardware device that can be purchased at a computer store or big-box retailer. In fact, this is the type of access point that most will think of when they think of setting up their own wireless network. These access points come from many different vendors, but they all tend to offer similar functions with various enhancements added on by each individual vendor.\n\n# Getting ready\n\nTo get things started, you will need to have the following items in place:\n\n*   A wireless card capable of entering monitor mode\n*   Kali Linux with Kismet installed (part of the default Kali installation)\n\nThe items listed here are basic requirements and you could easily use more (or different) components if so desired. If you want enhanced range, for example, you could use a USB-based wireless card that has connections for an external antenna that could get better reception.\n\n# How to do it...\n\nIn order to configure a rogue access point, we need to perform several steps. The goal of all these steps is to configure the wireless adapter on a system to mimic an access point and use a second adapter (preferably wired) to connect to the internet. The end result is traffic intercepted by the adapter mimicking the access point will direct traffic to the wired adapter and to the internet and send responses back to the requesting client back through the wireless adapter.\n\nFirst, let's configure an adapter to connect to the internet:\n\n1.  Open a Terminal window, and run the `ifconfig` command as covered in [Chapter 1](6c05e4f7-57a9-45fe-9d4a-b917c5056096.xhtml), *Kali Linux and Wireless Networking*.\n2.  Identify the wired or wireless adapter you wish to use to connect to the internet and the one you will use as an access point.\n\n3.  Take note of the adapter names (usually `wlan` for wireless and `eth` for wired) for reference and to keep track of which adapter is which. You will want to be certain which adapter will be connecting to the internet, and which will be the access point.\n4.  You can use the Kali GUI to connect one adapter to the internet (in this example, we will name this adapter `eth0`).\n\nThe next portion of our process is to bring up the wireless adapter and configure as the gateway for your access point. We can do this by performing the following. We will assume that the interface name is `wlan0` for this this example:\n\n1.  Configure the gateway for the `wlan0` using the `ifconfig` command by executing the following (in this example, we will set the gateway to `10.0.0.1/24`, but it could be set to any valid gateway provided it doesn't conflict with an existing address range or gateway):\n\n```", "```\n\n2.  Once we have the `wlan0` configured as our gateway we now want to configure both DHCP and DNS to issue IP addresses and perform name resolution for our clients. By configuring our rogue access point to issue IP addresses to requesting clients, it now becomes possible to provide them the addresses of both our gateway and DNS server. The DNS portion becomes very important when we wish to perform man-in-the-middle and sniffing attacks as it allows us to intercept name queries and redirect them as we see fit.\n3.  Our steps in this process is to configure and execute `dnsmasq`. This utility will allow us to perform both the roles of DHCP and DNS.\n4.  We start by first creating a file named `dnsmasq.conf`, which informs the `dnsmasq` application how to work. To do this, you will need to open a text editor such as `gedit` or anything that creates simple text files. In this file, you will enter information like the following:\n\n```", "```\n\n5.  Once completed, save this information to a file named `dnsmasq.conf`.\n\nWhat this file you just created does is the following:\n\n*   **Interface**: This states which interface to listen for requests and hand out addresses on.\n*   **Dhcp-range**: This provides the `dhcp` range as well as the number of hours to lease an IP for.\n*   **Dhcp-option**: These are the `dhcp` servers.\n*   **Server**: this is the address of the DNS server that you will be forwarding queries to. Keep in mind that with just this file in place the access point we are configuring will forward all requests to `8.8.8.8` to be resolved (in this case the address points to one of Google's free DNS servers). If we don't do anything else, this system will only act like any other access point without doing anything special.\n\nIf we wish to intercept requests we need to create an additional file known as `fakehosts.conf`, which allows us to inform `dnsmasq` which queries we want to intercept:\n\n1.  We start by first creating a file named `fakehosts.conf`, which informs the `dnsmasq` application which requests will be intercepted.\n2.  To do this, you will need to open a text editor such as gedit or anything that creates simple text files much like we did previously. In this file, you will enter information like the following:\n\n```", "```\n\n3.  This will cause the `dnsmasq` DNS server to respond with `10.0.0.9` to any request for either of these addresses. In an actual attack scenario, we would put in the IP address of a server we control, so that when a victim visited it they would provide information or get infected with malware, or something else we desire.\n4.  We then need to start `dnsmasq` up, as follows:\n\n```", "```\n\n5.  This tells `dnsmasq` to configure itself using `dnsmasq.conf` (`-C`) and refer to `fakehosts.conf` for the information on the spoofed hosts.\n\n6.  With the configuration and successful startup of `dnsmasq` (meaning no errors are returned) we can now bring up the access point itself. What this means is that we will be starting up a service that allows our wireless adapter to advertise itself as an access point to anyone willing to attach to it. To do this, we need to run a program known as `hostapd`.\n7.  In order to run `hostapd`, we first need to install it; this is done by running the following command:\n\n```", "```\n\n8.  Next, much like `dnsmasq`, we need to create a `conf` file that tells `hostapd.conf` how to function; we do this by performing the following steps:\n    1.  Open a text editor.\n    2.  Enter the following in the file:\n\n```", "```\n\n1.  3.  Save the file as `hostapd.conf`.\n    4.  What this file is providing us is vital configuration information; here is what each line provides:\n        *   **Interface**: This is the name of the interface to listen on.\n        *   **Driver**: This is the name of the driver to use. In this case, I have used the `nl80211`, which works with a broad range of wireless adapters, but you may need to research the driver for your device if this one doesn't function for you.\n        *   **Ssid**: This will be the name of the network to be advertised.\n        *   **Channel**: This is the channel that will be used to broadcast the wireless signal on. This value can be set to any value channel for your wireless environment.\n\n9.  Next, we need to bring up the access point; we do this by executing the following command:\n\n```", "```\n\n10.  This will bring up the access point. It is possible that you may see an error message about failing to update, but this is normal and generally has no ill effects.\n11.  Next, we need to perform some routing by directing traffic from `wlan0` to `eth0` essentially create a very simple NAT setup. To do this, issue the following commands:\n\n```", "```\n\nAt this stage, you should now be able to connect to free Wi-Fi, get an IP address, and start using the internet.\n\nOnce you have the rogue access point running, you have plenty of options as to how you can use it to cause grief for those attaching to it. For example, running a packet sniffer such as Wireshark on the access point itself will allow you to capture traffic as it moves across the access point. This means that victims attaching to the access point can have important data such as login credentials revealed if they aren't otherwise protected.\n\n# Evading MAC filtering with MAC spoofing\n\nDuring your explorations, one technique that may be deployed against you an effort to stop you is a technique known as MAC filtering. Simply put, MAC filtering is a countermeasure that involves either whitelisting the MAC addresses of devices approved to be on your network or blacklisting devices that you don't want on your network. While this technique is incredibly rare and often encountered on none but the smallest of networks it is still a countermeasure that frequently pops up as a recommended security mechanism. Here, we will explore how to evade MAC filtering and gain access to a network anyway.\n\nIn most consumer and commercial grade access points, it is not difficult to find an option for MAC filtering. Usually, this option goes by the name of MAC filtering or it may be under a group of settings for access control and may even be labeled as approved or blocked devices in some access points. No matter what name it goes by it still performs the same function which is that the administrator of the wireless network will choose to collect all the MAC addresses from the wireless devices they control and enter each manually into the access point, thereby whitelisting them. On the other hand, the administrator may choose to use blacklisting which is where they will detect rogue devices that have attached or are attempting to attach to the wireless network and then manually enter their MAC addresses blocking them. In either case, the process can be rather tedious and time-consuming and will get more so as the size of the network increases along with increased changes being made to the wireless network.\n\nAs you may guess from the name of this section, there is a way to evade MAC filtering and that is through a very easy and effective technique known as MAC spoofing:\n\n![](img/94bc6ac6-eb5e-416f-b3c2-c3fe13422aa4.jpg)\n\nMAC Filtering option in a wireless router\n\nMAC spoofing is a technique where we change the MAC address that is being reported by the network card or adapter. As a quick refresher, you should recall that the MAC address, sometimes called the physical address, is a hexadecimal value that is assigned to each and every network card as it's manufactured. Partially due to design and partially due to industry-standard, these addresses are intended to be unique, so that no two network cards should ever have the same MAC address. It is because of this very reason that MAC filtering is able to function as it does. However, by using MAC spoofing, we can change the address that is being reported and therefore put in whatever address we want to have reported from the network adapter. In practice, this means that by changing our MAC address to one of our choosing we can either evade blacklisting by changing our MAC address to something new or we can circumvent whitelisting by using the MAC address of an approved device.\n\nSo, let's take a look at how we do this.\n\n# Getting ready\n\nTo get things started, you will need to have the following items in place:\n\n*   A wireless card capable of entering monitor mode\n*   Kali Linux\n*   `airmon-ng`\n*   `airodump-ng`\n*   MAC changer\n\nThe items listed here are basic requirements and you could easily use more (or different) components if so desired. If you want enhanced range, for example, you could use a USB-based wireless card that has connections for an external antenna that could get better reception. In this recipe, we will also make use of two of the components of the `aircrack-ng` suite (which we will see more of throughout this book) to identify clients and their MAC addresses to attack.\n\n# How to do it...\n\nFollowing are the steps to carry out the attack:\n\n1.  The first step in carrying out this type of attack is to switch your Wi-Fi adapter into monitoring mode, so we can detect the information we need to detect traffic and their associated MAC addresses. To do this, we run the following commands:\n\n```", "```\n\n2.  In this case, the command sequence tells Kali to start the `airmon-ng` process on the `wlan0` interface. This application will start the interface in monitoring mode which is very important. Basically, monitor mode in Wi-Fi allows the card to observe all wireless traffic without having to associate to any access point first.\n3.  With this done we now wish to see all the connected clients to a specific access point. To do this, we simply use the following command sequence:\n\n```", "```\n\nNote that the name of the interface we are using is `**wlan0mon**` instead of `**wlan0**`. This is because when we executed `**airmon-ng**` it switched the card into monitor mode while adding a new interface `**wlan0mon**`. You can view these interface names through a simple run of the `**ifconfig**` command.\n\n4.  `airodump-ng` now shows us a list of all connected clients at the bottom of the Terminal. The second column lists the MAC addresses of the connected client, which we will be spoofing in order to authenticate with the wireless network. Of course, we are interested is something very specific. Take a look at the following graphic of the `airdump-ng` in action:\n\n![](img/822534c0-4601-4cef-b42a-f506b254ef40.png)\n\nairodump-ng in action.\n\n5.  Pay attention to the bottom three lines of the interface. When we look closely, we see the first of these three shows a client that is not associated to any access point, but the following two entries show clients that are associated. To determine which access point a station is associated with, we need only look at the first column of entries and match the MAC address of an access point on the bottom three lines with the MAC of an access point up top. We can even determine that name by looking to see the name of the network that corresponds to the MAC. Not too bad.\n\nNote that you may see more than one client attach to any one access point which is completely normal. Just make sure that when you choose the MAC address of a station connected to an access point that you have the correct access point and the MAC address of the station correct so you don't have to rerun the `airodump` multiple times.\n\n6.  Once we have selected a network and have noted the MAC address of a station associated with it, we now want to spoof that address on the system we want to be able to attach to the target. To do this is fairly simple to accomplish.\n7.  First, we shut down the `wlan0mon` interface in order to use the wireless card for the next steps.\u00a0To do this, we run the following command:\n\n```", "```\n\n8.  Now we need to shut down the wireless interface that we wish to change the MAC address on. To do this, we run the following command:\n\n```", "```\n\n9.  Now we can use the utility `macchanger` to alter the MAC address to the one we noted earlier. To do this, execute the following command:\n\n```", "```\n\n10.  Once the command successfully completes, we can bring the interface back up using `ifconfig`:\n\n```"]