["```\n// install minikube\n# brew cask install minikube\n==> Tapping caskroom/cask\n==> Linking Binary 'minikube-darwin-amd64' to '/usr/local/bin/minikube'.\n...\nminikube was successfully installed!\n```", "```\n// start the cluster\n# minikube start\nStarting local Kubernetes v1.6.4 cluster...\nStarting VM...\nMoving files into cluster...\nSetting up certs...\nStarting cluster components...\nConnecting to cluster...\nSetting up kubeconfig...\nKubectl is now configured to use the cluster.\n```", "```\napiVersion: v1\n\n# cluster and certificate information\nclusters:\n- cluster:\n certificate-authority-data: REDACTED\n server: https://35.186.182.157\n name: gke_devops_cluster\n- cluster:\n certificate-authority: /Users/chloelee/.minikube/ca.crt\n server: https://192.168.99.100:8443\n name: minikube\n\n# context is the combination of cluster, user and namespace\ncontexts:\n- context:\n cluster: gke_devops_cluster\n user: gke_devops_cluster\n name: gke_devops_cluster\n- context:\n cluster: minikube\n user: minikube\n name: minikube\ncurrent-context: minikube\nkind: Config\npreferences: {}\n\n# user information\nusers:\n- name: gke_devops_cluster\nuser:\n auth-provider:\n config:\n access-token: xxxx\n cmd-args: config config-helper --format=json\n cmd-path: /Users/chloelee/Downloads/google-cloud-sdk/bin/gcloud\n expiry: 2017-06-08T03:51:11Z\n expiry-key: '{.credential.token_expiry}'\n token-key: '{.credential.access_token}'\n name: gcp\n\n# namespace info\n- name: minikube\nuser:\n client-certificate: /Users/chloelee/.minikube/apiserver.crt\n client-key: /Users/chloelee/.minikube/apiserver.key\n```", "```\n// enable kube-dns addon\n# minikube addons enable kube-dns\nkube-dns was successfully enabled\n```", "```\n// check Kubernetes version\n# kubectl version\nClient Version: version.Info{Major:\"1\", Minor:\"6\", GitVersion:\"v1.6.2\", GitCommit:\"477efc3cbe6a7effca06bd1452fa356e2201e1ee\", GitTreeState:\"clean\", BuildDate:\"2017-04-19T20:33:11Z\", GoVersion:\"go1.7.5\", Compiler:\"gc\", Platform:\"darwin/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"6\", GitVersion:\"v1.6.4\", GitCommit:\"d6f433224538d4f9ca2f7ae19b252e6fcb66a3ae\", GitTreeState:\"clean\", BuildDate:\"2017-05-30T22:03:41Z\", GoVersion:\"go1.7.3\", Compiler:\"gc\", Platform:\"linux/amd64\"} \n```", "```\nkubectl [command] [type] [name] [flags] \n```", "```\n// show detailed info for logs command \nkubectl logs --help \nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is \noptional. \n\nAliases: \nlogs, log \n\nExamples: \n  # Return snapshot logs from pod nginx with only one container \n  kubectl logs nginx \n\n  # Return snapshot logs for the pods defined by label   \n  app=nginx \n  kubectl logs -lapp=nginx \n\n  # Return snapshot of previous terminated ruby container logs   \n  from pod web-1 \n  kubectl logs -p -c ruby web-1 \n... \n```", "```\napiVersion: Kubernetes API version \nkind: object type \nmetadata:  \n  spec metadata, i.e. namespace, name, labels and annotations \nspec: \n  the spec of Kubernetes object \n```", "```\nlabels: \n  $key1: $value1 \n  $key2: $value2 \n```", "```\nselector: \n  $key1: $value1 \n```", "```\nselector: \n  matchLabels:  \n    $key1: $value1 \n  matchExpressions: \n{key: $key2, operator: In, values: [$value1, $value2]} \n```", "```\nannotations: \n  $key1: $value1 \n  $key2: $value2 \n```", "```\n// get detailed info for `pods` \n# kubectl explain pods \nDESCRIPTION: \nPod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts. \n\nFIELDS: \n   metadata  <Object> \n     Standard object's metadata. More info: \n     http://releases.k8s.io/HEAD/docs/devel/api- \n     conventions.md#metadata \n\n   spec  <Object> \n     Specification of the desired behavior of the pod. \n     More info: \n     http://releases.k8s.io/HEAD/docs/devel/api-\n     conventions.md#spec-and-status \n\n   status  <Object> \n     Most recently observed status of the pod. This data \n     may not be up to date. \n     Populated by the system. Read-only. More info: \n     http://releases.k8s.io/HEAD/docs/devel/api-\n     conventions.md#spec-and-status \n\n   apiVersion  <string> \n     APIVersion defines the versioned schema of this \n     representation of an \n     object. Servers should convert recognized schemas to \n     the latest internal \n     value, and may reject unrecognized values. More info: \n     http://releases.k8s.io/HEAD/docs/devel/api-\n     conventions.md#resources \n\n   kind  <string> \n     Kind is a string value representing the REST resource  \n     this object represents. Servers may infer this from \n     the endpoint the client submits \n     requests to. Cannot be updated. In CamelCase. More \n         info: \n     http://releases.k8s.io/HEAD/docs/devel/api-\n     conventions.md#types-kinds \n```", "```\n// an example for creating co-located and co-scheduled container by pod\n# cat 3-2-1_pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: example\nspec:\n containers:\n - name: web\n image: nginx\n - name: centos\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do curl http://localhost:80/; sleep 10; done\"]\n```", "```\n// create the resource by `kubectl create` - Create a resource by filename or stdin\n# kubectl create -f 3-2-1_pod.yaml\npod \"example\" created  \n```", "```\n// get the current running pods \n# kubectl get pods\nNAME      READY     STATUS              RESTARTS   AGE\nexample   0/2       ContainerCreating   0          1s\n```", "```\n// get the current running pods\n# kubectl get pods\nNAME      READY     STATUS    RESTARTS   AGE\nexample   2/2       Running   0          3s  \n```", "```\n// get stdout for centos\n# kubectl logs example -c centos\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n```", "```\n// get detailed information for a pod\n# kubectl describe pods example\nName:    example\nNamespace:  default\nNode:    minikube/192.168.99.100\nStart Time:  Fri, 09 Jun 2017 07:08:59 -0400\nLabels:    <none>\nAnnotations:  <none>\nStatus:    Running\nIP:    172.17.0.4\nControllers:  <none>\nContainers:  \n```", "```\nweb:\n Container ID:    \n docker://a90e56187149155dcda23644c536c20f5e039df0c174444e 0a8c8  7e8666b102b\n   Image:    nginx\n   Image ID:    docker://sha256:958a7ae9e56979be256796dabd5845c704f784cd422734184999cf91f24c2547\n   Port:\n   State:    Running\n      Started:    Fri, 09 Jun 2017 07:09:00 -0400\n   Ready:    True\n   Restart Count:  0\n   Environment:  <none>\n   Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from \n      default-token-jd1dq (ro)\n     centos:\n     Container ID:  docker://778965ad71dd5f075f93c90f91fd176a8add4bd35230ae0fa6c73cd1c2158f0b\n     Image:    centos\n     Image ID:    docker://sha256:3bee3060bfc81c061ce7069df35ce090593bda584d4ef464bc0f38086c11371d\n     Port:\n     Command:\n       /bin/sh\n       -c\n       while : ;do curl http://localhost:80/; sleep 10; \n       done\n      State:    Running\n       Started:    Fri, 09 Jun 2017 07:09:01 -0400\n      Ready:    True\n      Restart Count:  0\n      Environment:  <none>\n      Mounts:\n          /var/run/secrets/kubernetes.io/serviceaccount from default-token-jd1dq (ro)\n```", "```\nConditions:\n Type    Status\n Initialized   True\n Ready   True\n PodScheduled   True\n```", "```\nVolumes:\n default-token-jd1dq:\n Type:  Secret (a volume populated by a Secret)\n SecretName:  default-token-jd1dq\n Optional:  false\n```", "```\nQoS Class:  BestEffort\nNode-Selectors:  <none>\nTolerations:  <none>\n```", "```\nEvents:\n FirstSeen  LastSeen  Count  From      SubObjectPath    Type     \n  Reason    Message\n  ---------  --------  -----  ----      -------------    ------ \n  --  ------    -------\n  19m    19m    1  default-scheduler        Normal    Scheduled  \n  Successfully assigned example to minikube\n  19m    19m    1  kubelet, minikube  spec.containers{web}  \n  Normal    Pulling    pulling image \"nginx\"\n  19m    19m    1  kubelet, minikube  spec.containers{web}  \n  Normal    Pulled    Successfully pulled image \"nginx\"\n  19m    19m    1  kubelet, minikube  spec.containers{web}  \n  Normal    Created    Created container with id \n  a90e56187149155dcda23644c536c20f5e039df0c174444e0a8c87e8666b102b\n  19m    19m    1  kubelet, minikube  spec.containers{web}   \n  Normal    Started    Started container with id  \n a90e56187149155dcda23644c536c20f5e039df0c174444e0a8c87e86 \n 66b102b\n  19m    19m    1  kubelet, minikube  spec.containers{centos}  \n  Normal    Pulling    pulling image \"centos\"\n  19m    19m    1  kubelet, minikube  spec.containers{centos}  \n  Normal    Pulled    Successfully pulled image \"centos\"\n  19m    19m    1  kubelet, minikube  spec.containers{centos}  \n  Normal    Created    Created container with id \n 778965ad71dd5f075f93c90f91fd176a8add4bd35230ae0fa6c73cd1c \n 2158f0b\n  19m    19m    1  kubelet, minikube  spec.containers{centos}  \n  Normal    Started    Started container with id \n 778965ad71dd5f075f93c90f91fd176a8add4bd35230ae0fa6c73cd1c \n 2158f0b \n```", "```\n// an example for rc spec\n# cat 3-2-2_rc.yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n name: nginx\nspec:\n replicas: 2\n selector:\n project: chapter3\n service: web\n version: \"0.1\"\n template:\n metadata:\n name: nginx\n labels:\n project: chapter3\n service: web\n version: \"0.1\"\n spec:\n containers:\n - name: nginx\n image: nginx\n ports:\n - containerPort: 80\n// create RC by above input file\n# kubectl create -f 3-2-2_rc.yaml\nreplicationcontroller \"nginx\" created  \n```", "```\n// get current RCs\n# kubectl get rc\nNAME      DESIRED   CURRENT   READY     AGE\nnginx     2         2         2         5s  \n```", "```\n// get current running pod\n# kubectl get pods\nNAME          READY     STATUS    RESTARTS   AGE\nnginx-r3bg6   1/1       Running   0          11s\nnginx-sj2f0   1/1       Running   0          11s  \n```", "```\n// manually create a pod with same labels\n# cat 3-2-2_rc_self_created_pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: our-nginx\n labels:\n project: chapter3\n service: web\n version: \"0.1\"\nspec:\n containers:\n - name: nginx\n image: nginx\n ports:\n - containerPort: 80\n// create a pod with same labels manually\n# kubectl create -f 3-2-2_rc_self_created_pod.yaml \npod \"our-nginx\" created  \n```", "```\n// get pod status\n# kubectl get pods\nNAME          READY     STATUS        RESTARTS   AGE\nnginx-r3bg6   1/1       Running       0          4m\nnginx-sj2f0   1/1       Running       0          4m\nour-nginx     0/1       Terminating   0          4s  \n```", "```\n// get pod status\n# kubectl get pods\nNAME          READY     STATUS    RESTARTS   AGE\nnginx-r3bg6   1/1       Running   0          5m\nnginx-sj2f0   1/1       Running   0          5m  \n```", "```\n// change replica count from 2 to 5, default system editor will pop out. Change `replicas` number\n# kubectl edit rc nginx\nreplicationcontroller \"nginx\" edited  \n```", "```\n// get rc information\n# kubectl get rc\nNAME      DESIRED   CURRENT   READY     AGE\nnginx     5         5         5         5m      \n```", "```\n// describe RC resource `nginx`\n# kubectl describe rc nginx\nName:    nginx\nNamespace:  default\nSelector:  project=chapter3,service=web,version=0.1\nLabels:    project=chapter3\n service=web\n version=0.1\nAnnotations:  <none>\nReplicas:  5 current / 5 desired\nPods Status:  5 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n Labels:  project=chapter3\n service=web\n version=0.1\n Containers:\n nginx:\n Image:    nginx\n Port:    80/TCP\n Environment:  <none>\n Mounts:    <none>\n Volumes:    <none>\nEvents:\n FirstSeen  LastSeen  Count  From      SubObjectPath  Type      \n  Reason      Message\n---------  --------  -----  ----      -------------  --------  ------      -------\n34s    34s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-r3bg6 \n34s    34s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-sj2f0 \n20s    20s    1  replication-controller      Normal    SuccessfulDelete  Deleted pod: our-nginx\n15s    15s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-nlx3v\n15s    15s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-rqt58\n15s    15s    1  replication-controller      Normal    SuccessfulCreate  Created pod: nginx-qb3mr  \n```", "```\n// delete a rc\n# kubectl delete rc nginx\nreplicationcontroller \"nginx\" deleted\n// get pod status\n# kubectl get pods\nNAME          READY     STATUS        RESTARTS   AGE\nnginx-r3bg6   0/1       Terminating   0          29m  \n```", "```\n// RS version of 3-2-2_rc.yaml \n# cat 3-2-2_rs.yaml\napiVersion: extensions/v1beta1\nkind: ReplicaSet\nmetadata:\n name: nginx\nspec:\n replicas: 2\n selector:\n matchLabels:\n project: chapter3\n matchExpressions:\n - {key: version, operator: In, values: [\"0.1\", \"0.2\"]}\n   template:\n     metadata:\n       name: nginx\n        labels:\n         project: chapter3\n         service: web\n         version: \"0.1\"\n     spec:\n       containers:\n        - name: nginx\n          image: nginx\n          ports:\n         - containerPort: 80\n```", "```\n// using kubectl run to launch the Pods\n# kubectl run nginx --image=nginx:1.12.0 --replicas=2 --port=80\ndeployment \"nginx\" created\n\n// check the deployment status\n# kubectl get deployments\nNAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nnginx     2         2         2            2           4h  \n```", "```\n// check if pods match our desired count\n# kubectl get pods\nNAME                     READY     STATUS        RESTARTS   AGE\nnginx-2371676037-2brn5   1/1       Running       0          4h\nnginx-2371676037-gjfhp   1/1       Running       0          4h  \n```", "```\n// list replica sets\n# kubectl get rs\nNAME               DESIRED   CURRENT   READY     AGE\nnginx-2371676037   2         2         2         4h      \n```", "```\n// expose port 80 to service port 80\n# kubectl expose deployment nginx --port=80 --target-port=80\nservice \"nginx\" exposed\n\n// list services\n# kubectl get services\nNAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nkubernetes   10.0.0.1     <none>        443/TCP   3d\nnginx        10.0.0.94    <none>        80/TCP    5s  \n```", "```\n// create deployments by spec\n# cat 3-2-3_deployments.yaml\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: nginx\nspec:\n replicas: 2\n template:\n metadata:\n labels:\n run: nginx\n spec:\n containers:\n - name: nginx\n image: nginx:1.12.0\n ports:\n - containerPort: 80\n---\nkind: Service\napiVersion: v1\nmetadata:\n name: nginx\n labels:\n run: nginx\nspec:\n selector:\n run: nginx\n ports:\n - protocol: TCP\n port: 80\n targetPort: 80\n name: http\n\n// create deployments and service\n# kubectl create -f 3-2-3_deployments.yaml\ndeployment \"nginx\" created\nservice \"nginx\" created  \n```", "```\n// add to Deployments.spec, save as 3-2-3_deployments_rollingupdate.yaml\nminReadySeconds: 3 \nstrategy:\n type: RollingUpdate\n rollingUpdate:\n maxSurge: 1\n maxUnavailable: 1  \n```", "```\n// check detailed rs information\n# kubectl describe rs nginx-2371676037 \nName:    nginx-2371676037 \nNamespace:  default\nSelector:  pod-template-hash=2371676037   ,run=nginx\nLabels:    pod-template-hash=2371676037 \n run=nginx\nAnnotations:  deployment.kubernetes.io/desired-replicas=2\n deployment.kubernetes.io/max-replicas=3\n deployment.kubernetes.io/revision=4\n deployment.kubernetes.io/revision-history=2\nReplicas:  2 current / 2 desired\nPods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n Labels:  pod-template-hash=2371676037 \n run=nginx\nContainers:\nnginx:\nImage:    nginx:1.13.1\nPort:    80/TCP\n...\nEvents:\nFirstSeen  LastSeen  Count  From      SubObjectPath  Type    Reason      Message\n---------  --------  -----  ----      -------------  --------  ------      -------\n3m    3m    1  replicaset-controller      Normal    SuccessfulCreate  Created pod: nginx-2371676037-f2ndj\n3m    3m    1  replicaset-controller      Normal    SuccessfulCreate  Created pod: nginx-2371676037-9lc8j\n3m    3m    1  replicaset-controller      Normal    SuccessfulDelete  Deleted pod: nginx-2371676037-f2ndj\n3m    3m    1  replicaset-controller      Normal    SuccessfulDelete  Deleted pod: nginx-2371676037-9lc8j\n```", "```\n// create RC 1 with nginx 1.12.0 version\n# cat 3-2-3_rc1.yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n name: nginx-1.12\nspec:\n replicas: 2\n selector:\n project: chapter3\n service: web\n version: \"0.1\"\ntemplate:\n metadata:\n name: nginx\n labels:\n project: chapter3\n service: web\n version: \"0.1\"\n spec:\n containers:\n - name: nginx\n image: nginx:1.12.0\n ports:\n - containerPort: 80\n// create RC 2 with nginx 1.13.1 version\n# cat 3-2-3_rc2.yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n name: nginx-1.13\nspec:\n replicas: 2\n selector:\n project: chapter3\n service: web\n version: \"0.2\"\n template:\n metadata:\n name: nginx\n labels:\n project: chapter3\n service: web\n version: \"0.2\"\nspec:\n containers:\n- name: nginx\n image: nginx:1.13.1\n ports:\n - containerPort: 80  \n```", "```\n// simple nginx service \n# cat 3-2-3_service.yaml\nkind: Service\napiVersion: v1\nmetadata:\n name: nginx-service\nspec:\n selector:\n project: chapter3\n service: web\n ports:\n - protocol: TCP\n port: 80\n targetPort: 80\n name: http\n\n// create the RCs \n# kubectl create -f 3-2-3_rc1.yaml\nreplicationcontroller \"nginx-1.12\" created \n# kubectl create -f 3-2-3_rc2.yaml\nreplicationcontroller \"nginx-1.13\" created\n\n// create the service\n# kubectl create -f 3-2-3_service.yaml\nservice \"nginx-service\" created  \n```", "```\n// check nginx-service information\n# kubectl describe service nginx-service\nName:      nginx-service\nNamespace:    default\nLabels:      <none>\nAnnotations:    <none>\nSelector:    project=chapter3,service=web\nType:      ClusterIP\nIP:      10.0.0.188\nPort:      http  80/TCP\nEndpoints:    172.17.0.5:80,172.17.0.6:80,172.17.0.7:80 + 1 more...\nSession Affinity:  None\nEvents:      <none>\n```", "```\n// list current endpoints. Nginx-service endpoints are created and pointing to the ip of our 4 nginx pods.\n# kubectl get endpoints\nNAME            ENDPOINTS                                               AGE\nkubernetes      10.0.2.15:8443                                          2d\nnginx-service   172.17.0.5:80,172.17.0.6:80,172.17.0.7:80 + 1 more...   10s  \n```", "```\n// access nginx service via ${NGINX_SERVICE_SERVICE_HOST}\n# cat 3-2-3_clusterip_chk.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: clusterip-chk\nspec:\n containers:\n - name: centos\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do curl    \nhttp://${NGINX_SERVICE_SERVICE_HOST}:80/; sleep 10; done\"]  \n```", "```\n// check stdout, see if we can access nginx pod successfully\n# kubectl logs -f clusterip-chk\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                     Dload  Upload   Total   Spent    Left  Speed\n100   612  100   612    0     0   156k      0 --:--:-- --:--:-- --:--:--  199k\n ...\n<title>Welcome to nginx!</title>\n    ...  \n```", "```\n// write a nodeport type service\n# cat 3-2-3_nodeport.yaml\nkind: Service\napiVersion: v1\nmetadata:\n name: nginx-nodeport\nspec:\n type: NodePort\n selector:\n project: chapter3\n service: web\n ports:\n - protocol: TCP\n port: 80\n targetPort: 80\n\n// create a nodeport service\n# kubectl create -f 3-2-3_nodeport.yaml\nservice \"nginx-nodeport\" created  \n```", "```\n// create a service without selectors\n# cat 3-2-3_service_wo_selector_srv.yaml\nkind: Service\napiVersion: v1\nmetadata:\n name: google-proxy\nspec:\n ports:\n - protocol: TCP\n port: 80\n targetPort: 80\n\n// create service without selectors\n# kubectl create -f 3-2-3_service_wo_selector_srv.yaml\nservice \"google-proxy\" created  \n```", "```\n// get an IP from google.com\n# nslookup www.google.com\nServer:    192.168.1.1\nAddress:  192.168.1.1#53\n\nNon-authoritative answer:\nName:  google.com\nAddress: 172.217.0.238\n\n// create endpoints for the ip from google.com\n# cat 3-2-3_service_wo_selector_endpoints.yaml\nkind: Endpoints\napiVersion: v1\nmetadata:\n name: google-proxy\nsubsets:\n - addresses:\n - ip: 172.217.0.238\n ports:\n - port: 80\n\n// create Endpoints\n# kubectl create -f 3-2-3_service_wo_selector_endpoints.yaml\nendpoints \"google-proxy\" created  \n```", "```\n// pod for accessing google proxy\n# cat 3-2-3_proxy-chk.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: proxy-chk\nspec:\n containers:\n - name: centos\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do curl -L http://${GOOGLE_PROXY_SERVICE_HOST}:80/; sleep 10; done\"]\n\n// create the pod\n# kubectl create -f 3-2-3_proxy-chk.yaml\npod \"proxy-chk\" created  \n```", "```\n// get logs from proxy-chk\n# kubectl logs proxy-chk\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                     Dload  Upload   Total   Spent    Left  Speed\n100   219  100   219    0     0   2596      0 --:--:-- --:--:-- --:--:--  2607\n100   258  100   258    0     0   1931      0 --:--:-- --:--:-- --:--:--  1931\n<!doctype html><html itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"en-CA\">\n ...  \n```", "```\n// create a secret by command line\n# kubectl create secret generic mypassword --from-file=./mypassword.txt\nsecret \"mypassword\" created  \n```", "```\n// get the detailed info of the secret\n# kubectl get secret mypassword -o yaml\napiVersion: v1\ndata:\n mypassword: bXlwYXNzd29yZA==\nkind: Secret\nmetadata:\n creationTimestamp: 2017-06-13T08:09:35Z\n name: mypassword\n namespace: default\n resourceVersion: \"256749\"\n selfLink: /api/v1/namespaces/default/secrets/mypassword\n uid: a33576b0-500f-11e7-9c45-080027cafd37\ntype: Opaque  \n```", "```\n# echo \"bXlwYXNzd29yZA==\" | base64 --decode\nmypassword  \n```", "```\n// example for how a Pod retrieve secret \n# cat 3-2-3_pod_vol_secret.yaml \napiVersion: v1 \nkind: Pod \nmetadata: \n  name: secret-access \nspec: \n  containers: \n  - name: centos \n    image: centos \n    command: [\"/bin/sh\", \"-c\", \"cat /secret/password-example; done\"] \n    volumeMounts: \n      - name: secret-vol \n        mountPath: /secret \n        readOnly: true \n  volumes: \n    - name: secret-vol \n      secret: \n        secretName: mypassword \n        # items are optional \n        items: \n        - key: mypassword  \n          path: password-example \n\n// create the pod \n# kubectl create -f 3-2-3_pod_vol_secret.yaml \npod \"secret-access\" created \n```", "```\n# kubectl describe pod secret-access\n...\nMounts:\n /secret from secret-vol (ro)\n /var/run/secrets/kubernetes.io/serviceaccount from default-token-jd1dq (ro)\n...  \n```", "```\n# kubectl describe pod secret-access\n...\nFailedMount  MountVolume.SetUp failed for volume \"kubernetes.io/secret/28889b1d-5015-11e7-9c45-080027cafd37-secret-vol\" (spec.Name: \"secret-vol\") pod \"28889b1d-5015-11e7-9c45-080027cafd37\" (UID: \"28889b1d-5015-11e7-9c45-080027cafd37\") with: secrets \"mypassword\" not found\n...  \n```", "```\n// secret example # cat 3-2-3_secret.yaml \napiVersion: v1 \nkind: Secret \nmetadata:  \n  name: mypassword \ntype: Opaque \ndata:  \n  mypassword: bXlwYXNzd29yZA==\n```", "```\n// example to use environment variable to retrieve the secret\n# cat 3-2-3_pod_ev_secret.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: secret-access-ev\nspec:\n containers:\n - name: centos\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do echo $MY_PASSWORD; sleep 10; done\"]\n env:\n - name: MY_PASSWORD\n valueFrom:\n secretKeyRef:\n name: mypassword\n key: mypassword\n\n// create the pod \n# kubectl create -f 3-2-3_pod_ev_secret.yaml\npod \"secret-access-ev\" created \n```", "```\n// create configmap\n# kubectl create configmap example --from-file=config/app.properties --from-file=config/database.properties\nconfigmap \"example\" created  \n```", "```\n// check out detailed information for configmap\n# kubectl describe configmap example\nName:    example\nNamespace:  default\nLabels:    <none>\nAnnotations:  <none>\n\nData\n====\napp.properties:\n----\nname=DevOps-with-Kubernetes\nport=4420\n\ndatabase.properties:\n----\nendpoint=k8s.us-east-1.rds.amazonaws.com\nport=1521  \n```", "```\ncat 3-2-3_pod_vol_configmap.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: configmap-vol\nspec:\n containers:\n - name: configmap\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do cat /src/app/config/database.properties; sleep 10; done\"]\n volumeMounts:\n - name: config-volume\n mountPath: /src/app/config\n volumes:\n - name: config-volume\n configMap:\n name: example\n\n// create configmap\n# kubectl create -f 3-2-3_pod_vol_configmap.yaml\npod \"configmap-vol\" created\n\n// check out the logs\n# kubectl logs -f configmap-vol\nendpoint=k8s.us-east-1.rds.amazonaws.com\nport=1521  \n```", "```\n# cat 3-2-3_pod_ev_configmap.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: config-ev\nspec:\n containers:\n - name: centos\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do echo $DATABASE_ENDPOINT; sleep 10;    \n   done\"]\n env:\n - name: MY_PASSWORD\n valueFrom:\n secretKeyRef:\n name: mypassword\n key: mypassword\n\n// create configmap\n# kubectl create -f 3-2-3_pod_ev_configmap.yaml\npod \"configmap-ev\" created\n\n// check out the logs\n# kubectl logs configmap-ev\nendpoint=k8s.us-east-1.rds.amazonaws.com port=1521  \n```", "```\n// generate base64 secret for MYSQL_PASSWORD and MYSQL_ROOT_PASSWORD\n# echo -n \"pass\" | base64\ncGFzcw==\n# echo -n \"mysqlpass\" | base64\nbXlzcWxwYXNz\n```", "```\n# cat secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n name: mysql-user\ntype: Opaque\ndata:\n password: cGFzcw==\n\n---\n# MYSQL_ROOT_PASSWORD\napiVersion: v1\nkind: Secret\nmetadata:\n name: mysql-root\ntype: Opaque\ndata:\n password: bXlzcWxwYXNz\n\n// create mysql secret\n# kubectl create -f secret.yaml --record\nsecret \"mysql-user\" created\nsecret \"mysql-root\" created\n```", "```\n# cat config.yaml\nkind: ConfigMap\napiVersion: v1\nmetadata:\n name: mysql-config\ndata:\n user: user\n database: db\n\n// create ConfigMap\n# kubectl create -f config.yaml --record\nconfigmap \"mysql-config\" created  \n```", "```\n// MySQL Deployment\n# cat mysql.yaml\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: lmysql\nspec:\n replicas: 1\n template:\n metadata:\n labels:\n tier: database\n version: \"5.7\"\n spec:\n containers:\n - name: lmysql\n image: mysql:5.7\n volumeMounts:\n - mountPath: /var/lib/mysql\n name: mysql-vol\n ports:\n - containerPort: 3306\n env:\n - name: MYSQL_ROOT_PASSWORD\n valueFrom:\n secretKeyRef:\n name: mysql-root\n key: password\n - name: MYSQL_DATABASE\n valueFrom:\n configMapKeyRef:\n name: mysql-config\n key: database\n - name: MYSQL_USER\n valueFrom:\n configMapKeyRef:\n name: mysql-config\n key: user\n - name: MYSQL_PASSWORD\n valueFrom:\n secretKeyRef:\n name: mysql-user\n key: password\n volumes:\n - name: mysql-vol\n hostPath:\n path: /mysql/data\n---\nkind: Service\napiVersion: v1\nmetadata:\n name: lmysql-service\nspec:\n selector:\n tier: database\n ports:\n - protocol: TCP\n port: 3306\n targetPort: 3306\n name: tcp3306  \n```", "```\n// create Redis deployment\n# cat redis.yaml\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: lcredis\nspec:\n replicas: 1\n template:\n metadata:\n labels:\n tier: cache\n version: \"3.0\"\n spec:\n containers:\n - name: lcredis\n image: redis:3.0\n ports:\n - containerPort: 6379\nminReadySeconds: 1\nstrategy:\n type: RollingUpdate\n rollingUpdate:\n maxSurge: 1\n maxUnavailable: 1\n---\nkind: Service\napiVersion: v1\nmetadata:\n name: lcredis-service\nspec:\n selector:\n tier: cache\n ports:\n - protocol: TCP\n port: 6379\n targetPort: 6379\n name: tcp6379\n\n// create redis deployements and service\n# kubectl create -f redis.yaml\ndeployment \"lcredis\" created\nservice \"lcredis-service\" created  \n```", "```\n# cat kiosk-example.yaml\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: kiosk-example\nspec:\n replicas: 5\n template:\n metadata:\n labels:\n tier: frontend\n version: \"3\"\n annotations:\n maintainer: cywu\n spec:\n containers:\n - name: kiosk-example\n image: devopswithkubernetes/kiosk-example\n ports:\n - containerPort: 5000\n env:\n - name: REDIS_HOST\n value: lcredis-service.default\n minReadySeconds: 5\n strategy:\n type: RollingUpdate\n rollingUpdate:\n maxSurge: 1\n maxUnavailable: 1\n---\nkind: Service\napiVersion: v1\nmetadata:\n name: kiosk-service\nspec:\n type: NodePort\n selector:\n tier: frontend\n ports:\n - protocol: TCP\n port: 80\n targetPort: 5000\n name: tcp5000\n\n// launch the spec\n# kubectl create -f kiosk-example.yaml\ndeployment \"kiosk-example\" created\nservice \"kiosk-service\" created    \n```", "```\n# cat recorder-example.yaml\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: recorder-example\nspec:\n replicas: 3\n template:\n metadata:\n labels:\n tier: backend\n version: \"3\"\n annotations:\n maintainer: cywu\n spec:\n containers:\n - name: recorder-example\n image: devopswithkubernetes/recorder-example\n env:\n - name: REDIS_HOST\n value: lcredis-service.default\n - name: MYSQL_HOST\n value: lmysql-service.default\n - name: MYSQL_USER\n value: root\n - name: MYSQL_ROOT_PASSWORD\n valueFrom:\n secretKeyRef:\n name: mysql-root\n key: password\nminReadySeconds: 3\nstrategy:\n type: RollingUpdate\n rollingUpdate:\n maxSurge: 1\n maxUnavailable: 1\n// create recorder deployment\n# kubectl create -f recorder-example.yaml\ndeployment \"recorder-example\" created  \n```", "```\n// check deployment details\n# kubectl get deployments\nNAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nkiosk-example      5         5         5            5           1h\nlcredis            1         1         1            1           1h\nlmysql             1         1         1            1           1h\nrecorder-example   3         3         3            3           1h  \n```", "```\n// post ticket\n# curl -XPOST -F 'value=100' http://192.168.99.100:30520/tickets\nSUCCESS\n\n// get ticket\n# curl -XGET http://192.168.99.100:30520/tickets\n100  \n```"]