["```py\n## Installing necessary libraries with pip \n!pip install plotly --user  \n!pip install cufflinks -user \n```", "```py\n## Necessary imports \nimport os \nimport sys \nimport numpy as np \nimport pandas \nimport matplotlib.pyplot as plt \n%matplotlib inline \nimport plotly.plotly as py \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot \nimport cufflinks as cf \nimport plotly.graph_objs as go \n\ninit_notebook_mode(connected=True) \nsys.path.append(\"\".join([os.environ[\"HOME\"]]))\n```", "```py\nfrom sklearn.datasets import load_iris \niris_data = load_iris() \n```", "```py\niris_data.feature_names \n\n['sepal length (cm)', \n 'sepal width (cm)', \n 'petal length (cm)', \n 'petal width (cm)'] \n```", "```py\nx = [v[0] for v in iris_data.data] \ny = [v[1] for v in iris_data.data]\n```", "```py\ntrace = go.Scatter( \n    x = x, \n    y = y, \n    mode = 'markers' \n) \n\nlayout= go.Layout( \n    title= 'Iris Dataset', \n    hovermode= 'closest', \n    xaxis= dict( \n        title= 'sepal length (cm)', \n        ticklen= 5, \n        zeroline= False, \n        gridwidth= 2, \n    ), \n    yaxis=dict( \n        title= 'sepal width (cm)', \n        ticklen= 5, \n        gridwidth= 2, \n    ), \n    showlegend= False \n)\n```", "```py\ndata = [trace] \n\nfig= go.Figure(data=data, layout=layout) \nplot(fig) \n```", "```py\nimport pandas as pd\ndf = pd.DataFrame(iris_data.data,\ncolumns=['sepal length (cm)',\n'sepal width (cm)',\n'petal length (cm)',\n'petal width (cm)'])\n\ndf['class'] = [iris_data.target_names[i] for i in iris_data.target] \n\ndf.head() \n```", "```py\nimport plotly.figure_factory as ff\n\nfig = ff.create_scatterplotmatrix(df, index='class', diag='histogram', size=10, height=800, width=800) \n\nplot(fig)\n```", "```py\n## Creating data for the plotly \ntrace1 = go.Scatter3d( \n    # Extracting data based on label \n    x=[x[0][0] for x in zip(iris_data.data, iris_data.target) if x[1] == 0], \n    y=[x[0][2] for x in zip(iris_data.data, iris_data.target) if x[1] == 0], \n    z=[x[0][3] for x in zip(iris_data.data, iris_data.target) if x[1] == 0], \n    mode='markers', \n    marker=dict( \n        size=12, \n        line=dict( \n            color='rgba(217, 217, 217, 0.14)', \n            width=0.5 \n        ), \n        opacity=0.8 \n    ) \n) \n\ntrace2 = go.Scatter3d( \n    # Extracting data based on label \n    x=[x[0][0] for x in zip(iris_data.data, iris_data.target) if x[1] == 1], \n    y=[x[0][2] for x in zip(iris_data.data, iris_data.target) if x[1] == 1], \n    z=[x[0][3] for x in zip(iris_data.data, iris_data.target) if x[1] == 1], \n    mode='markers', \n    marker=dict( \n        color='rgb(#3742fa)', \n        size=12, \n        symbol='circle', \n        line=dict( \n            color='rgb(204, 204, 204)', \n            width=1 \n        ), \n        opacity=0.9 \n    ) \n) \n\ntrace3 = go.Scatter3d( \n    # Extracting data based on label \n    x=[x[0][0] for x in zip(iris_data.data, iris_data.target) if x[1] == 2], \n    y=[x[0][2] for x in zip(iris_data.data, iris_data.target) if x[1] == 2], \n    z=[x[0][3] for x in zip(iris_data.data, iris_data.target) if x[1] == 2], \n    mode='markers', \n    marker=dict( \n        color='rgb(#ff4757)', \n        size=12, \n        symbol='circle', \n        line=dict( \n            color='rgb(104, 74, 114)', \n            width=1 \n        ), \n        opacity=0.9 \n    ) \n) \n\ndata = [trace1, trace2, trace3] \n\n## Layout settings \nlayout = go.Layout( \n    scene = dict( \n        xaxis = dict( \n            title= 'sepal length (cm)'), \n        yaxis = dict( \n            title= 'petal length (cm)'), \n        zaxis = dict( \n            title= 'petal width (cm)'),), \n) \n\nfig = go.Figure(data=data, layout=layout) \nplot(fig)\n```", "```py\nfrom sklearn.datasets.samples_generator import make_blobs \nX, y = make_blobs(n_samples=20, centers=3, n_features=3, random_state=42) \n\nk_means = KMeans(n_clusters=3) \ny_hat = k_means.fit_predict(X) \n```", "```py\ny_hat\n## array([0, 2, 1, 1, 1, 0, 2, 0, 0, 0, 2, 0, 1, 2, 1, 2, 2, 1, 0, 1],\ndtype=int32)\n\ny\n## array([0, 2, 1, 1, 1, 0, 2, 0, 0, 0, 2, 0, 1, 2, 1, 2, 2, 1, 0, 1])\n```", "```py\ndata = [1,2,3,2,1,3,9,8,11,12,10,11,14,25,26,24,30,22,24,27] \n\ntrace1 = go.Scatter( \n    x=data, \n    y=[0 for x in data], \n    mode='markers', \n    name='Data', \n    marker=dict( \n        size=12 \n    ) \n) \n\nlayout = go.Layout( \n```", "```py\ntitle='1D vector',\n)\n\ntraces = [trace1]\n\nfig = go.Figure(data=traces, layout=layout)\n\nplot(fig)\n```", "```py\nn_clusters = 3\n\nc_centers = np.random.choice(X, n_clusters)\n\nprint(c_centers)\n\n## [ 1 22 26]\n```", "```py\ndeltas = np.array([np.abs(point - c_centers) for point in X])\n\ndeltas\narray([[ 7, 26, 10],\n       [ 6, 25,  9],\n       [ 5, 24,  8],\n       [ 6, 25,  9],\n       [ 7, 26, 10],\n       [ 5, 24,  8],\n       [ 1, 18,  2],\n       [ 0, 19,  3],\n       [ 3, 16,  0],\n       [ 4, 15,  1],\n       [ 2, 17,  1],\n       [ 3, 16,  0],\n       [ 6, 13,  3],\n       [17,  2, 14],\n       [18,  1, 15],\n       [16,  3, 13],\n       [22,  3, 19],\n       [14,  5, 11],\n       [16,  3, 13],\n      [19,  0, 16]])\n```", "```py\ndeltas.argmin(1)\n## array([0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1])\n```", "```py\nc_centers = np.array([X[np.where(deltas.argmin(1) == i)[0]].mean() for i in range(3)])\n\nprint(c_centers)\n\n## [ 3.625      25.42857143 11.6       ]\n```", "```py\ndef Kmeans_1D(X, n_clusters, random_seed=442):\n\n  # Randomly choose random indexes as cluster centers\n  rng = np.random.RandomState(random_seed)\n  i = rng.permutation(X.shape[0])[:n_clusters]\n  c_centers = X[i]\n\n  # Calculate distances between each point and cluster centers\n  deltas = np.array([np.abs(point - c_centers) for point in X])\n\n  # Get labels for each point\n  labels = deltas.argmin(1)\n  while True:\n    # Calculate mean of each cluster\n    new_c_centers = np.array([X[np.where(deltas.argmin(1) == i)[0]].mean() for i in range(n_clusters)])\n\n    # Calculate distances again\n    deltas = np.array([np.abs(point - new_c_centers) for point in X])\n\n    # Get new labels for each point\n    labels = deltas.argmin(1)\n\n    # If there's no change in centers, exit\n    if np.all(c_centers == new_c_centers):\n      break\n    c_centers = new_c_centers\n\n  return c_centers, labels\n\nc_centers, labels = Kmeans_1D(X, 3)\n\nprint(c_centers, labels)\n\n## [11.16666667 25.42857143  2.85714286] [2 2 2 2 2 2 0 0 0 0 0 0 0 1 1 1 1 1 1 1]\n```", "```py\ntrace1 = go.Scatter(\n    x=X,\n    y=[0 for num in X],\n    mode='markers',\n    name='Data',\n    marker=dict(\n    size=12\n    )\n)\n\ntrace2 = go.Scatter(\n    x = c_centers,\n    y = [0 for num in X],\n    mode='markers',\n    name = 'Cluster centers',\n    marker = dict(\n    size=12,\n    color = ('rgb(122, 296, 167)')\n    )\n)\n\nlayout = go.Layout(\n    title='1D vector',\n)\n\ntraces = [trace1, trace2]\n\nfig = go.Figure(data=traces, layout=layout)\n\nplot(fig)\n```", "```py\nfrom numpy import genfromtxt\nwholesales_data = genfromtxt('Wholesale customers data.csv', delimiter=',', skip_header=1)\n```", "```py\nprint(wholesales_data[:5])\n[[2.0000e+00 3.0000e+00 1.2669e+04 9.6560e+03 7.5610e+03 2.1400e+02\n  2.6740e+03 1.3380e+03]\n [2.0000e+00 3.0000e+00 7.0570e+03 9.8100e+03 9.5680e+03 1.7620e+03\n  3.2930e+03 1.7760e+03]\n [2.0000e+00 3.0000e+00 6.3530e+03 8.8080e+03 7.6840e+03 2.4050e+03\n  3.5160e+03 7.8440e+03]\n [1.0000e+00 3.0000e+00 1.3265e+04 1.1960e+03 4.2210e+03 6.4040e+03\n  5.0700e+02 1.7880e+03]\n [2.0000e+00 3.0000e+00 2.2615e+04 5.4100e+03 7.1980e+03 3.9150e+03\n  1.7770e+03 5.1850e+03]]\n```", "```py\nwholesales_data.shape\n## (440, 8)\n```", "```py\nwholesales_data_norm = wholesales_data / np.linalg.norm(wholesales_data)\n\nprint(wholesales_data_norm[:5])\n[[ 1\\.          0\\.          0.30168043  1.06571214  0.32995207 -0.46657183\n   0.50678671  0.2638102 ]\n [ 1\\.          0\\.         -0.1048095   1.09293385  0.56599336  0.08392603\n   0.67567015  0.5740085 ]\n [ 1\\.          0\\.         -0.15580183  0.91581599  0.34441798  0.3125889\n   0.73651183  4.87145892]\n [ 0\\.          0\\.          0.34485007 -0.42971408 -0.06286202  1.73470839\n  -0.08444172  0.58250708]\n [ 1\\.          0\\.          1.02209184  0.3151708   0.28726     0.84957326\n   0.26205579  2.98831445]]\n```", "```py\nimport pandas as pd\n\ndf = pd.DataFrame(wholesales_data_norm,\ncolumns=['Channel',\n'Region',\n'Fresh',\n'Milk',\n'Grocery',\n'Frozen',\n'Detergents_Paper',\n'Delicatessen'])\n\ndf.head(10)\n```", "```py\nfig = ff.create_scatterplotmatrix(df, diag='histogram', size=7, height=1200, width=1200)\nplot(fig)\n```", "```py\ndf.corr()\n```", "```py\nimport seaborn as sns; sns.set()\nax = sns.heatmap(df.corr(), annot=True)\n```", "```py\n## Creating data for the plotly\ntrace1 = go.Scatter3d(\n  # Extracting data based on label\n  x=df['Grocery'],\n  y=df['Detergents_Paper'],\n  z=df['Milk'],\n  mode='markers',\n  marker=dict(\n    size=12,\n    line=dict(\n    color='rgba(217, 217, 217, 0.14)',\n    width=0.5\n    ),\n    opacity=0.8\n    )\n  )\n\n## Layout settings\nlayout = go.Layout(\n  scene = dict(\n    xaxis = dict(\n      title= 'Grocery'),\n    yaxis = dict(\n      title= 'Detergents_Paper'),\n    zaxis = dict(\n      title= 'Milk'),),\n)\n\ndata = [trace1]\n\nfig = dict(data=data, layout=layout)\n\nplot(fig)\n```", "```py\ndf = df[[col for col in df.columns if col not in ['Channel', 'Region']]]\ndf.head(10)\n```", "```py\ndef Kmeans_nD(X, n_clusters, random_seed=442):\n\n  # Randomly choose random indexes as cluster centers\n  rng = np.random.RandomState(random_seed)\n  i = rng.permutation(X.shape[0])[:n_clusters]\n  c_centers = X[i]\n\n  # Calculate distances between each point and cluster centers\n  deltas = np.array([[np.linalg.norm(i - c) for c in c_centers] for i in X])\n\n  # Get labels for each point\n  labels = deltas.argmin(1)\n\n  while True:\n    # Calculate mean of each cluster\n    new_c_centers = np.array([X[np.where(deltas.argmin(1) == i)[0]].mean(axis=0) for i in range(n_clusters)])\n\n    # Calculate distances again\n    deltas = np.array([[np.linalg.norm(i - c) for c in new_c_centers] for i in X])\n\n    # Get new labels for each point\n    labels = deltas.argmin(1)\n\n    # If there's no change in centers, exit\n    if np.array_equal(c_centers, new_c_centers):\n      break\n    c_centers = new_c_centers\n\n  return c_centers, labels\n```", "```py\ncenters, labels = Kmeans_nD(df[['Grocery', 'Detergents_Paper']].values, 3)\n```", "```py\ndf['labels'] = labels\n```", "```py\n## Creating data for the plotly\ntrace1 = go.Scatter(\n    # Extracting data based on label\n    x=df[df['labels'] == 0]['Grocery'],\n    y=df[df['labels'] == 0]['Detergents_Paper'],\n    mode='markers',\n    name='clust_1',\n    marker=dict(\n        size=12,\n        line=dict(\n        color='rgba(217, 217, 217, 0.14)',\n        width=0.5\n        ),\n        opacity=0.8\n    )\n)\n\ntrace2 = go.Scatter(\n    # Extracting data based on label\n    x=df[df['labels'] == 1]['Grocery'],\n    y=df[df['labels'] == 1]['Detergents_Paper'],\n    mode='markers',\n    name='clust_2',\n    marker=dict(\n        color='rgb(#3742fa)',\n        size=12,\n        symbol='circle',\n        line=dict(\n        color='rgb(204, 204, 204)',\n        width=1\n        ),\n        opacity=0.9\n    )\n)\n\ntrace3 = go.Scatter(\n    # Extracting data based on label\n    x=df[df['labels'] == 2]['Grocery'],\n    y=df[df['labels'] == 2]['Detergents_Paper'],\n    mode='markers',\n    name='clust_3',\n    marker=dict(\n        color='rgb(#ff4757)',\n        size=12,\n        symbol='circle',\n        line=dict(\n        color='rgb(104, 74, 114)',\n        width=1\n        ),\n        opacity=0.9\n    )\n)\n\ndata = [trace1, trace2, trace3]\n\n## Layout settings\nlayout = go.Layout(\n    scene = dict(\n    xaxis = dict(\n    title= 'Grocery'),\n    yaxis = dict(title= 'Detergents_Paper'),\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\n\nplot(fig)\n```", "```py\ndf.groupby('labels').mean()\n```"]