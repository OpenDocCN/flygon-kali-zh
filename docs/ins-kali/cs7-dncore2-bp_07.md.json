["```cs\n      using System.Net; \n      public static async Task<HttpResponseMessage> \n       Run(HttpRequestMessage req, TraceWriter log) \n      { \n        log.Info(\"C# HTTP trigger function processed a request.\"); \n\n        // parse query parameter \n        string name = req.GetQueryNameValuePairs() \n        .FirstOrDefault(q => string.Compare(q.Key, \"name\", true) == 0) \n        .Value; \n\n        if (name == null) \n        { \n          // Get request body \n          dynamic data = await req.Content.ReadAsAsync<object>(); \n          name = data?.name; \n        } \n\n        return name == null \n        ? req.CreateResponse(HttpStatusCode.BadRequest,\n        \"Please pass a name on the query string or in the request body\") \n          : req.CreateResponse(HttpStatusCode.OK, \"Hello \" + name); \n      }  \n```", "```cs\nhttps://core-mail-validation.azurewebsites.net/api/HttpTriggerCSharp1?code=/IS4OJ3T46quiRzUJTxaGFenTeIVXyyOdtBFGasW9dUZ0snmoQfWoQ== \n```", "```cs\nhttps://core-mail-validation.azurewebsites.net/api/HttpTriggerCSharp1?code=/IS4OJ3T46quiRzUJTxaGFenTeIVXyyOdtBFGasW9dUZ0snmoQfWoQ==&name=Dirk\n```", "```cs\n      return name == null \n        ? req.CreateResponse(HttpStatusCode.BadRequest,\n         \"Please pass a name on the query string or in the request \n          body\") \n        : req.CreateResponse(HttpStatusCode.OK, \"Hello \" + name); \n```", "```cs\n      if (email == null) \n      { \n        return req.CreateResponse(HttpStatusCode.BadRequest,\n         \"Please pass an email address on the query string or\n          in the request body\"); \n      } \n      else \n      { \n        bool blnValidEmail = false; \n        if (email.Length > 0) \n        { \n            blnValidEmail = true; \n        } \n\n        return req.CreateResponse(HttpStatusCode.OK,\n         \"Email status: \" + blnValidEmail); \n      } \n```", "```cs\n      using System.Net; \n\n      public static async Task<HttpResponseMessage>\n       Run(HttpRequestMessage req, TraceWriter log) \n      { \n        log.Info(\"C# HTTP trigger function processed a new email \n         validation request.\"); \n\n        // parse query parameter \n        string email = req.GetQueryNameValuePairs() \n          .FirstOrDefault(q => string.Compare(q.Key, \"email\", true) == \n          0) \n          .Value; \n\n        if (email == null) \n        { \n          // Get request body \n          dynamic data = await req.Content.ReadAsAsync<object>(); \n          email = data?.email; \n        } \n\n        if (email == null) \n        { \n          return req.CreateResponse(HttpStatusCode.BadRequest,\n           \"Please pass an email address on the query string or\n            in the request body\"); \n        } \n        else \n        { \n          bool blnValidEmail = false; \n          if (email.Length > 0) \n          { \n            blnValidEmail = true; \n          } \n\n          return req.CreateResponse(HttpStatusCode.OK,\n           \"Email status: \" + blnValidEmail); \n        }    \n\n      }\n```", "```cs\nhttps://core-mail-validation.azurewebsites.net/api/HttpTriggerCSharp1?code=/IS4OJ3T46quiRzUJTxaGFenTeIVXyyOdtBFGasW9dUZ0snmoQfWoQ==\n```", "```cs\nhttps://core-mail-validation.azurewebsites.net/api/HttpTriggerCSharp1?code=/IS4OJ3T46quiRzUJTxaGFenTeIVXyyOdtBFGasW9dUZ0snmoQfWoQ==&email=dirk@email.com\n```", "```cs\n      using System.Text.RegularExpressions; \n```", "```cs\nblnValidEmail = Regex.IsMatch(email, \n                @\"^(?(\"\")(\"\".+?(?<!\\)\"\"@)|(([0-9a-z]((.(?!.))|[-!#$%&'*+/=?^`{}|~w])*)(?<=[0-9a-z])@))\" + \n                @\"(?([)([(d{1,3}.){3}d{1,3}])|(([0-9a-z][-0-9a-z]*[0-9a-z]*.)+[a-z0-9][-a-z0-9]{0,22}[a-z0-9]))$\", \n                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)); \n```", "```cs\n      using System.Net; \n      using System.Text.RegularExpressions; \n\n      public static async Task<HttpResponseMessage>\n       Run(HttpRequestMessage req, TraceWriter log) \n      { \n        log.Info(\"C# HTTP trigger function processed a new email \n         validation request.\"); \n\n        // parse query parameter \n        string email = req.GetQueryNameValuePairs() \n          .FirstOrDefault(q => string.Compare(q.Key, \"email\", true) == \n           0) \n          .Value; \n\n        if (email == null) \n        { \n          // Get request body \n          dynamic data = await req.Content.ReadAsAsync<object>(); \n          email = data?.email; \n        } \n\n        if (email == null) \n        { \n          return req.CreateResponse(HttpStatusCode.BadRequest,\n          \"Please pass an email address on the query string or in\n           the request body\"); \n        } \n        else \n        { \n          bool blnValidEmail = false; \n\n          blnValidEmail = Regex.IsMatch(email, \n                @\"^(?(\"\")(\"\".+?(?<!\\)\"\"@)|(([0-9a-z]((.(?!.))|\n                [-!#$%&'*+/=?^`{}|~w])*)(?<=[0-9a-z])@))\" + \n                @\"(?([)([(d{1,3}.){3}d{1,3}])|(([0-9a-z][-0-9a-z]*\n                [0-9a-z]*.)+[a-z0-9][-a-z0-9]{0,22}[a-z0-9]))$\", \n                RegexOptions.IgnoreCase, \n                TimeSpan.FromMilliseconds(250)); \n\n          return req.CreateResponse(HttpStatusCode.OK,\n          \"Email status: \" + blnValidEmail); \n        }    \n\n      } \n```", "```cs\nhttps://core-mail-validation.azurewebsites.net/api/HttpTriggerCSharp1?code=/IS4OJ3T46quiRzUJTxaGFenTeIVXyyOdtBFGasW9dUZ0snmoQfWoQ==&email=dirk@email.com\n```", "```cs\nhttps://core-mail-validation.azurewebsites.net/api/HttpTriggerCSharp1?code=/IS4OJ3T46quiRzUJTxaGFenTeIVXyyOdtBFGasW9dUZ0snmoQfWoQ==&email=dirk@@email.com\n```", "```cs\n  return req.CreateResponse(HttpStatusCode.OK, blnValidEmail); \n```", "```cs\n@{ \n    ViewData[\"Title\"] = \"Login Page\";     \n} \n\n<div class=\"limiter\"> \n    <div class=\"container-login100\"> \n        <div class=\"wrap-login100\"> \n            <div class=\"login100-pic js-tilt\" data-tilt> \n                <img src=\"img/img-01.png\" alt=\"IMG\"> \n            </div> \n\n            <form class=\"login100-form validate-form\"> \n                <span class=\"login100-form-title\"> \n                    Member Login \n                </span> \n\n                <div class=\"wrap-input100 validate-input\" \n                 data-validate=\"Valid email is required: \n                  ex@abc.xyz\"> \n                    <input class=\"input100\" type=\"text\" \n                     name=\"email\" placeholder=\"Email\"> \n                    <span class=\"focus-input100\"></span> \n                    <span class=\"symbol-input100\"> \n                        <i class=\"fa fa-envelope\"\n                         aria-hidden=\"true\"></i> \n                    </span> \n                </div> \n\n                <div class=\"wrap-input100 validate-input\" \n                 data-validate=\"Password is required\"> \n                    <input class=\"input100\" type=\"password\" \n                     name=\"pass\" \n                     placeholder=\"Password\"> \n                    <span class=\"focus-input100\"></span> \n                    <span class=\"symbol-input100\"> \n                        <i class=\"fa fa-lock\"\n                         aria-hidden=\"true\"></i> \n                    </span> \n                </div> \n\n                <div class=\"container-login100-form-btn\"> \n                    <button class=\"login100-form-btn\"> \n                        Login \n                    </button> \n                </div> \n\n                <div class=\"text-center p-t-12\"> \n                    <span class=\"txt1\"> \n                        Forgot \n                    </span> \n                    <a class=\"txt2\" href=\"#\"> \n                        Username / Password? \n                    </a> \n                </div> \n\n                <div class=\"text-center p-t-136\"> \n                    <a class=\"txt2\" href=\"#\"> \n                        Create your Account \n                        <i class=\"fa fa-long-arrow-right m-l-5\" \n                         aria-hidden=\"true\"></i> \n                    </a> \n                </div> \n            </form> \n        </div> \n    </div> \n</div> \n```", "```cs\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>@ViewData[\"Title\"] - CoreMailValidation</title>\n    <link rel=\"icon\" type=\"image/png\" href=\"~/images/icons/favicon.ico\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"~/vendor/bootstrap/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"~/fonts/font-awesome-4.7.0/css/font-awesome.min.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"~/vendor/animate/animate.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"~/vendor/css-hamburgers/hamburgers.min.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"~/vendor/select2/select2.min.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"~/css/util.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"~/css/main.css\">\n</head>\n\n<body>\n    <div class=\"container body-content\">\n        @RenderBody()\n        <hr />\n        <footer>\n            <p>&copy; 2018 - CoreMailValidation</p>\n        </footer>\n    </div>\n    <script src=\"img/jquery-3.2.1.min.js\"></script>\n    <script src=\"img/popper.js\"></script>\n    <script src=\"img/bootstrap.min.js\"></script>\n    <script src=\"img/select2.min.js\"></script>\n    <script src=\"img/tilt.jquery.min.js\"></script>\n    <script>\n        $('.js-tilt').tilt({\n            scale: 1.1\n        })\n    </script>\n    <script src=\"img/main.js\"></script>\n    @RenderSection(\"Scripts\", required: false)\n</body>\n\n</html>\n```", "```cs\n      namespace CoreMailValidation.Models \n      { \n        public class LoginModel \n        { \n          public string Email { get; set; } \n          public string Password { get; set; } \n        } \n      }\n```", "```cs\n      @model CoreMailValidation.Models.LoginModel \n      @{ \n        ViewData[\"Title\"] = \"Login Page\"; \n      } \n```", "```cs\n      public IActionResult Index() \n      { \n        return View(); \n      } \n```", "```cs\n      private async Task<string> ValidateEmail(string emailToValidate) \n      { \n        string azureBaseUrl = \"https://core-mail-\n         validation.azurewebsites.net/api/HttpTriggerCSharp1\"; \n        string urlQueryStringParams = $\"?\n         code=/IS4OJ3T46quiRzUJTxaGFenTeIVXyyOdtBFGasW9dUZ0snmoQfWoQ\n          ==&email={emailToValidate}\"; \n\n        using (HttpClient client = new HttpClient()) \n        { \n          using (HttpResponseMessage res = await client.GetAsync(\n           $\"{azureBaseUrl}{urlQueryStringParams}\")) \n          { \n            using (HttpContent content = res.Content) \n            { \n              string data = await content.ReadAsStringAsync(); \n              if (data != null) \n              { \n                return data; \n              } \n              else \n                return \"\"; \n            } \n          } \n        } \n      }  \n```", "```cs\n      [HttpPost, ValidateAntiForgeryToken] \n      public async Task<IActionResult> ValidateLogin(LoginModel model) \n      { \n        if (ModelState.IsValid) \n        { \n          var email = model.Email; \n          string azFuncReturn = await ValidateEmail(model.Email); \n\n          if (azFuncReturn.Contains(\"false\")) \n          { \n            TempData[\"message\"] = \"The email address entered is \n             incorrect. Please enter again.\"; \n            return RedirectToAction(\"Index\", \"Home\"); \n          } \n          else \n          { \n            return Content(\"You are logged in now.\"); \n          }                 \n        } \n        else \n        { \n          return View(); \n        } \n\n      } \n```", "```cs\n<form class=\"login100-form validate-form\" asp-action=\"ValidateLogin\" asp-controller=\"Home\"> \n```", "```cs\n      <div class=\"container-login100-form-btn\"> \n        <button class=\"login100-form-btn\" type=\"submit\"> \n          Login \n        </button> \n      </div> \n```", "```cs\n<div id=\"myModal\" class=\"modal\" role=\"dialog\"> \n    <div class=\"modal-dialog\"> \n\n        <!-- Modal content--> \n        <div class=\"modal-content\"> \n            <div class=\"modal-header alert alert-danger\"> \n                <button type=\"button\" class=\"close\"\n                 data-dismiss=\"modal\">&times;</button> \n                <h4 class=\"modal-title\">Invalid Email</h4> \n            </div> \n            <div class=\"modal-body\"> \n                <p>@TempData[\"message\"].</p> \n            </div> \n            <div class=\"modal-footer\"> \n                <button type=\"button\" class=\"btn btn-default\"\n                 data-dismiss=\"modal\">Close</button> \n            </div> \n        </div> \n\n    </div> \n</div> \n\n@section Scripts \n    { \n    @if (TempData[\"message\"] != null) \n    { \n        <script> \n            $('#myModal').modal(); \n        </script> \n    } \n} \n```"]