- en: Chapter 9. Securing a Swarm Cluster and the Docker Software Supply Chain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。保护Swarm集群和Docker软件供应链
- en: 'This chapter is all about Swarm cluster security. In particular, we''ll take
    a look at the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论Swarm集群安全性。特别是，我们将讨论以下主题：
- en: The Software supply chain with Docker
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker的软件供应链
- en: Recommendations on how to secure a Swarm cluster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何保护Swarm集群的建议
- en: Use Docker Notary to secure the Software supply chain
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Notary来保护软件供应链
- en: Software Supply Chain
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件供应链
- en: '![Software Supply Chain](images/image_09_001.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![软件供应链](images/image_09_001.jpg)'
- en: Docker orchestration is only a component of the larger software supply chain.
    We basically start with *Source Code* as the raw material*.* Our source code is
    compiled and linked with *Library and Dependent packages*. We use *Build Service*
    to continuously integrate our Source Code and its Dependencies together and finally
    assemble them as a *Product*. We then ship the Product on the Internet, to store
    it somewhere else. We usually call this warehouse an *Application Repository*
    or simply a *repository*. Finally, we send the product to the customer's environment,
    for example a cloud or a physical data center.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Docker编排只是更大的软件供应链的一个组成部分。我们基本上从*源代码*作为原材料开始。我们的源代码与*库和依赖包*进行编译和链接。我们使用*构建服务*来持续集成我们的源代码和其依赖项，并最终将它们组装成一个*产品*。然后，我们将产品发布到互联网上，将其存储在其他地方。我们通常称这个仓库为*应用程序存储库*或简称*存储库*。最后，我们将产品发送到客户的环境中，例如云或物理数据中心。
- en: Docker is perfect for this workflow. Developers use Docker locally to compile
    and test applications, system administrators deploy these applications on the
    Build Servers using Docker, and Docker may also play an important role in the
    process of continuous integration.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Docker非常适合这种工作流程。开发人员在本地使用Docker来编译和测试应用程序，系统管理员使用Docker在构建服务器上部署这些应用程序，并且Docker在持续集成的过程中也可能发挥重要作用。
- en: Security kicks in here. We need a secure way to sign our products before pushing
    it to the Application Repository. In our Docker-centric world, we store ready
    products in a warehouse called *Docker Registry*. Then a signed product will be
    verified, each time, before it is deployed to the production system where we're
    running our Docker Swarm mode cluster.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性从这里开始。我们需要一种安全的方式在将产品推送到应用程序存储库之前对其进行签名。在我们以Docker为中心的世界中，我们将准备好的产品存储在一个称为*Docker
    Registry*的仓库中。然后，每次在将签名产品部署到我们运行Docker Swarm模式集群的生产系统之前，都会对其进行验证。
- en: 'In the remainder of the chapter, we will talk about the following two aspects
    of security:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将讨论安全的以下两个方面：
- en: How to secure a production Swarm cluster, which we achieve with best practices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过最佳实践来保护生产Swarm集群
- en: How to secure the software supply chain, which we achieve with Docker Notary
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过Docker Notary来保护软件供应链
- en: Securing Swarm cluster
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Swarm集群
- en: Recall the picture of a secured Swarm cluster from [Chapter 4](ch04.html "Chapter 4. Creating
    a Production-Grade Swarm"), *Creating a Production-Grade Swarm*; we'll explain
    the security aspects found in a Docker Swarm model cluster.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下来自[第4章](ch04.html "第4章。创建生产级别的Swarm")*创建生产级别的Swarm*的安全的Swarm集群图片；我们将解释Docker
    Swarm模型集群中发现的安全方面。
- en: '![Securing Swarm cluster](images/image_09_002.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![保护Swarm集群](images/image_09_002.jpg)'
- en: We have the Orchestrator as one of the main parts of a Docker Swarm manager.
    Diogo Monica, a member of the Docker Security team, mentioned in his Orchestration
    Least Privileged presentation, in Berlin 2016, that each component in the orchestration
    must have a limitation of what it can do.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 编排器是Docker Swarm管理器的主要部分之一。Docker安全团队成员Diogo Monica在2016年柏林的编排最低特权演示中提到，编排中的每个组件都必须有其能够做的限制。
- en: '**Node management**: A cluster operator may instruct an Orchestrator to perform
    actions for a set of nodes'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点管理：集群操作员可以指示编排器为一组节点执行操作
- en: '**Task assignment**: The Orchestrator is also responsible for assigning tasks
    to each node'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务分配：编排器还负责为每个节点分配任务
- en: '**Cluster state reconciliation**: The Orchestrator maintains the state of the
    cluster by reconciling each state to the desired state'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群状态协调：编排器通过将每个状态与期望状态协调来维护集群的状态
- en: '**Resource management**: The Orchestrator offers and revokes resources for
    submitted tasks'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源管理：编排器为提交的任务提供和撤销资源
- en: An Orchestrator with the least privilege will make the system secure and a least
    privilege Orchestrator is defined based on these functionalities. Following the
    principle of least privilege, a manager as well as the workers must be able to
    access *only the information and resource that are necessary to perform a given
    task*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 具有最小权限的编排器将使系统更安全，最小权限的编排器是基于这些功能定义的。遵循最小权限原则，管理者以及工作节点必须能够访问“执行给定任务所必需的信息和资源”。
- en: Also, Diogo presented the following list of five different attacking models
    that can be applied to Docker. They are listed from the lowest to the highest
    risk.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Diogo提出了可以应用于Docker的五种不同攻击模型的列表。它们从最低风险到最高风险列出。
- en: '**External attacker**: Outside of the firewall trying to compromise the cluster.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部攻击者：试图破坏集群的防火墙之外的人。
- en: '**Internal attacker**: Doesn''t own the switch but has access to the switch.
    It can send packets to communicate with nodes in the cluster.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部攻击者：不拥有交换机但可以访问交换机。它可以发送数据包与集群中的节点进行通信。
- en: '**Man-in-the-middle**: An attacker who can listen to everything going in the
    network and can conduct an active attack. With this model, there is a Swarm cluster
    and the communications of worker nodes to the manager nodes are intercepted.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间人攻击：可以监听网络中的所有内容并进行主动攻击的攻击者。在这种模型中，存在一个Swarm集群，并且拦截了工作节点与管理节点的通信。
- en: '**Malicious worker node**: The resources owned by the worker are effectively
    owned by the attacker.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意工作节点：工作节点拥有的资源实际上被攻击者拥有。
- en: '**Malicious manager node**: The manager is an attacker who can control the
    complete Orchestrator and gain access to all available resources. It is the worst
    case scenario. If we could implement the least privileges, the malicious manager
    node can only attack the workers associated to it.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意管理节点：管理者是一个攻击者，可以控制完整的编排器并访问所有可用资源。这是最糟糕的情况。如果我们能够实现最小权限，那么恶意管理节点只能攻击与其关联的工作节点。
- en: 'Securing a Swarm: Best practices'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Swarm：最佳实践
- en: We will now summarize the checklist for securing a Swarm cluster. The Swarm
    team is working hard to achieve the goals of preventing attacks on the full stack,
    but the following rules apply in any case.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将总结保护Swarm集群的检查表。Swarm团队正在努力实现防止对整个堆栈的攻击的目标，但无论如何，以下规则都适用。
- en: Certification Authorities
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证机构
- en: The first important step to guarantee security is deciding on how to use CA.
    When you form a cluster with the first node, it will automatically create a self-signed
    CA for the whole cluster. After spinning up, it creates CA, signs the certificate
    itself, adds the certificate for the manager, which is itself, and becomes the
    ready-to-operate 1-node cluster. When a new node joins, it gets the certificate
    by providing the correct token. Every node has its own identity which is cryptographically
    signed. Also, the system has a certificate for each rule, worker, or manager.
    The role is inside the identity information to tell who a node is. In the case
    that a manager leaks the root CA, the whole cluster is compromised. Docker Swarm
    mode supports external CAs to maintain the manager's identity. The manager can
    simply forward the CSR to the external CA so it does not need to maintain its
    own CA. Please note that the only protocol supported at this moment is`cfssl`.
    The following command is to init the cluster with the external CA.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安全性的第一个重要步骤是决定如何使用CA。当您使用第一个节点形成集群时，它将自动为整个集群创建一个自签名的CA。在启动后，它创建CA，签署自己的证书，为管理器添加证书，即自身，并成为准备运行的单节点集群。当新节点加入时，它通过提供正确的令牌来获取证书。每个节点都有自己的身份，经过加密签名。此外，系统为每个规则、工作节点或管理器都有一个证书。角色信息在身份信息中，以告知节点的身份。如果管理器泄露了根CA，整个集群就会受到威胁。Docker
    Swarm模式支持外部CA来维护管理器的身份。管理器可以简单地将CSR转发给外部CA，因此不需要维护自己的CA。请注意，目前仅支持`cfssl`协议。以下命令是使用外部CA初始化集群。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Certificates and Mutual TLS
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证书和双向TLS
- en: Every single endpoint communication on the network control plane must have a
    mutual TLS and is encrypted and authorized by default. This means that a worker
    cannot fake to be a manager and no external attacker can connect to an endpoint
    and successfully complete the TLS handshake because the attacker does not have
    the keys to mutually authenticate itself. This means that each node must provide
    a valid CA-signed certificate, which has the OU field that matches each rule of
    the cluster. If a worker connects to the manager endpoint, it will be denied access.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 网络控制平面上的每个端点通信必须具有双向TLS，并且默认情况下是加密和授权的。这意味着工作节点不能伪装成管理器，也没有外部攻击者可以连接到端点并成功完成TLS握手，因为攻击者没有密钥来进行相互认证。这意味着每个节点必须提供有效的CA签名证书，其中OU字段与集群的每个规则匹配。如果工作节点连接到管理器端点，将被拒绝访问。
- en: The Certificate rotation is done automatically by Swarm. You can have the certificate
    rotation as short as one hour in SwarmKit and also Docker Swarm mode. The following
    is the command to adjust the certificate expiry time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm会自动执行证书轮换。在SwarmKit和Docker Swarm模式中，证书轮换可以设置为短至一小时。以下是调整证书到期时间的命令。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The join token
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加入令牌
- en: 'Each token, used by nodes to join the cluster, has the following four components:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点用于加入集群的令牌具有以下四个组件：
- en: SWMTKN, the Swarm prefix that allows finding, or grepping, when tokens are leaked
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SWMTKN，Swarm前缀，用于在令牌泄露时查找或搜索
- en: The token version, which is currently 1
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 令牌版本，目前为1
- en: The cryptographically hashed value of the CA root certificate to allow bootstrap
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA根证书的加密哈希值，用于允许引导
- en: A randomly generated Secret
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个随机生成的秘密。
- en: 'The following is an example of token:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个令牌的示例：
- en: '`SWMTKN-1-11lo1xx5bau6nmv5jox26rc5mr7l1mj5wi7b84w27v774frtko-e82x3ti068m9eec9w7q2zp9fe`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`SWMTKN-1-11lo1xx5bau6nmv5jox26rc5mr7l1mj5wi7b84w27v774frtko-e82x3ti068m9eec9w7q2zp9fe`'
- en: To access the cluster, it is necessary to send a token as proof. It is like
    the cluster password.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问集群，需要发送一个令牌作为凭证。这就像集群密码。
- en: The good news is that in case of token compromising, the token can be *simply
    rotate*d using one of the following commands.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，如果令牌被 compromise，令牌可以使用以下命令之一*简单地旋转*。
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add TLS with Docker Machine
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Docker Machine添加TLS
- en: 'Another good practice is provisioning all manager nodes with Docker Machine
    to set up an extra layer of TLS, automatically, so that each manager can be accessed
    by remote Docker clients in a secure manner. This can simply be done using the
    following command, similar to how we did in the previous chapter:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个良好的实践是使用Docker Machine为所有管理节点提供额外的TLS层，自动设置，以便每个管理节点都可以以安全的方式被远程Docker客户端访问。这可以通过以下命令简单地完成，类似于我们在上一章中所做的方式：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Form a cluster on a private network
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在私有网络上形成一个集群
- en: If forming a hybrid cluster is not a requirement, one of the best practices
    is that we should form a cluster with all the nodes being on a local private network.
    With this, the data of overlay network will not need to be encrypted and the performance
    of cluster will be fast.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果形成混合集群不是一个要求，最佳实践之一是我们应该在本地私有网络上形成一个集群，所有节点都在本地私有网络上。这样，覆盖网络的数据就不需要加密，集群的性能会很快。
- en: When forming this kind of cluster, the Routing Mesh allows us to expose any
    worker, not necessarily a manager, to the public-network interface. The following
    figure shows the cluster configuration. You can see that with this configuration
    and a Docker service published port 80 on the Ingress network. The routing mesh
    forms a star-like mesh but we simplified it and showed only one-side from the
    Big W node connecting IPVS load-balancing to others. The Big W node has two network
    interfaces. Its public interface allows the node to act as a front-end node of
    the whole cluster. With this architecture, we can achieve a certain level of security
    by not exposing any manager node to the public network.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在形成这种类型的集群时，路由网格允许我们将任何工作节点（不一定是管理节点）暴露给公共网络接口。下图显示了集群配置。您可以看到，通过这种配置和Docker服务在入口网络上发布端口80。路由网格形成了一个星形网格，但我们简化了它，并只显示了从大W节点连接到其他节点的一侧。大W节点有两个网络接口。其公共接口允许节点充当整个集群的前端节点。通过这种架构，我们可以通过不暴露任何管理节点到公共网络来实现一定级别的安全性。
- en: '![Form a cluster on a private network](images/image_09_003.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: 在私有网络上形成一个集群
- en: Docker Notary
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Notary
- en: The Docker Content Trust mechanism is implemented using Docker Notary ([https://github.com/docker/notary](https://github.com/docker/notary)),
    which is on The Update Framework ([https://github.com/theupdateframework/tuf](https://github.com/theupdateframework/tuf)).
    TUF is a secure framework that allows us to delivery a collection of trusted content
    at a time. Notary allows a client and a server to form a trusted *collection*
    by making it easier to publish and verify contents. If we have a Docker image,
    we can sign it offline using a highly secure offline key. Then when we publish
    that image, we can push it to a Notary server that can be used to delivery trusted
    images. Notary is the way to enable *Secured Software Supply Chain* for the enterprise
    using Docker.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Content Trust 机制是使用 Docker Notary ([https://github.com/docker/notary](https://github.com/docker/notary))
    实现的，它位于 The Update Framework ([https://github.com/theupdateframework/tuf](https://github.com/theupdateframework/tuf))
    上。TUF 是一个安全的框架，允许我们一次交付一系列受信任的内容。Notary 通过使发布和验证内容变得更容易，允许客户端和服务器形成一个受信任的*集合*。如果我们有一个Docker镜像，我们可以使用高度安全的离线密钥对其进行离线签名。然后，当我们发布该镜像时，我们可以将其推送到一个可以用于交付受信任镜像的Notary服务器。Notary
    是使用Docker为企业启用*安全软件供应链*的方法。
- en: We demonstrate how to set up our own Notary server and use it to sign Docker
    image content before pushing to a Docker registry. The prerequisite is to have
    a recent version of Docker Compose installed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们演示了如何设置我们自己的Notary服务器，并在将Docker镜像内容推送到Docker注册表之前使用它进行签名。先决条件是安装了最新版本的Docker
    Compose。
- en: 'The first step is to clone Notary (in this example we fix its version at 0.4.2):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是克隆Notary（在这个例子中，我们将其版本固定为0.4.2）：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Open `docker-compose.yml` and add the image option to specify an image name
    and tag for both signer and server. In this example, I used Docker Hub to store
    the build images. So it's `chanwit/server:v042` and c`hanwit/signer:v042`. Change
    this to reflect your local configuration.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`并添加图像选项以指定签名者和服务器的图像名称和标签。在这个例子中，我使用Docker Hub来存储构建图像。所以是`chanwit/server:v042`和`chanwit/signer:v042`。根据您的本地配置进行更改。
- en: '![Docker Notary](images/image_09_004.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Notary](images/image_09_004.jpg)'
- en: Then start with
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后开始
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We now have a Notary server up and running at [https://127.0.0.1:4443](https://127.0.0.1:4443).
    To make it possible for the Docker client to do a handshake with Notary, we need
    to copy the Notary Server certificate as CA of this trusted address (`127.0.0.4443`).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在[https://127.0.0.1:4443](https://127.0.0.1:4443)上运行一个Notary服务器。为了使Docker客户端能够与Notary进行握手，我们需要将Notary服务器证书复制为这个受信任地址（`127.0.0.4443`）的CA。
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After that, we enable Docker Content Trust and point Docker Content Trust server
    to our own Notary at `https://127.0.0.1:4443`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们启用Docker内容信任，并将Docker内容信任服务器指向我们自己的Notary，地址为`https://127.0.0.1:4443`。
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then we tag the image as a new one and push the image while enabling Docker
    Content Trust:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将图像标记为新图像，并在启用Docker内容信任的同时推送图像：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If the setup finishes correctly, we'll see the Docker client asking for the
    new root key and the new repository key. Then it will confirm that `chanwit/busybox:signed`
    was successfully signed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置正确完成，我们将看到Docker客户端要求新的根密钥和新的存储库密钥。然后它将确认`chanwit/busybox:signed`已成功签名。
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we can try pulling the same image:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试拉取相同的镜像：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When we pull an unsigned image, and this time it will show that there is no
    trusted data:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们拉取一个未签名的镜像时，这时会显示没有受信任的数据：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Introducing Docker secrets
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Docker秘密
- en: Docker 1.13 includes in Swarm the new concept of secrets management.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 1.13在Swarm中包含了新的秘密管理概念。
- en: 'As we know, we need Swarm mode to use secrets. When we initialize a Swarm,
    Swarm generates some secrets for us:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，我们需要Swarm模式来使用秘密。当我们初始化一个Swarm时，Swarm会为我们生成一些秘密：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Docker 1.13 adds the secrets management with a new command, secret, with the
    purpose to handle them efficiently. Secret subcommands are created, ls, to inspect
    and rm.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 1.13添加了新的命令`secret`来管理秘密，目的是有效地处理它们。秘密子命令被创建，ls，用于检查和rm。
- en: 'Let''s create our first secret. The `secret create` sub-command takes a secret
    from the standard input. So, we need to type in our secret, and then press *Ctrl*+*D*
    to save the content. Be careful to not hit the *Enter* key. We need only `1234` not
    `1234\n` as our password, for example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个秘密。`secret create`子命令从标准输入中获取一个秘密。因此，我们需要输入我们的秘密，然后按*Ctrl*+*D*保存内容。小心不要按*Enter*键。例如，我们只需要`1234`而不是`1234\n`作为我们的密码：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then press *Ctrl*+*D* twice to close the standard input.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按两次*Ctrl*+*D*关闭标准输入。
- en: 'We can check if there is a secret called password:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查是否有一个名为password的秘密：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How does this work? The content of secret can be bound to a service by passing
    the secret option when we create a new service. The secret will be a file in the
    `/run/secrets/` directory. In our case, we'll have `/run/secrets/password` containing
    the string `1234`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何工作的？秘密的内容可以通过在创建新服务时传递秘密选项来绑定到服务。秘密将是`/run/secrets/`目录中的一个文件。在我们的情况下，我们将有`/run/secrets/password`包含字符串`1234`。
- en: Secrets are designed to replace the abuse of environment variables. For example,
    in the case of a MySQL or MariaDB container, its root password should be set as
    a secret instead of passing it as a plaintext via an environment variable.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密旨在取代环境变量的滥用。例如，在MySQL或MariaDB容器的情况下，其根密码应该设置为一个秘密，而不是通过环境变量以明文传递。
- en: 'We will show a small hack to make MariaDB support the new Swarm secrets, starting
    from the following `entrypoint.sh`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示一个小技巧，使MariaDB支持新的Swarm秘密，从以下的`entrypoint.sh`开始：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We put this line into this script, around line 56, before the check of `MYSQL_ROOT_PASSWORD`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这行放入这个脚本中，大约在第56行之前，然后检查`MYSQL_ROOT_PASSWORD`。
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code checks if there exists `/run/secrets/mysql-root-password`. If so,
    it assigns the secret to the environment variable `MYSQL_ROOT_PASSWORD`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码检查是否存在`/run/secrets/mysql-root-password`。如果是，则将密钥分配给环境变量`MYSQL_ROOT_PASSWORD`。
- en: After this we can prepare a Dockerfile to override the MariaDB's default `docker-entrypoint.sh`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以准备一个Dockerfile来覆盖MariaDB的默认`docker-entrypoint.sh`。
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We then build the new image.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们构建新的镜像。
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Recalled that we have a secret named password, we have an image which allows
    us to set the root password from the secret file `/run/secrets/mysql-root-password`.
    So, the image expects a different file name under `/run/secrets`. With this we
    can use the secret with full option (`source=password`, `target=mysql-root-password`)
    to make a Swarm service work. For example, we can now start a new `mysql` Swarm
    service from this MariaDB image:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，我们有一个名为password的秘密，我们有一个允许我们从秘密文件`/run/secrets/mysql-root-password`设置根密码的镜像。因此，该镜像期望在`/run/secrets`下有一个不同的文件名。有了这个，我们可以使用完整选项的秘密（`source=password`，`target=mysql-root-password`）来使Swarm服务工作。例如，我们现在可以从这个MariaDB镜像启动一个新的`mysql`
    Swarm服务：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To see if our secret works, we can start an instance of PHPMyAdmin on the same
    overlay network. Don't forget to link these services together by passing `-e PMA_HOST=mysql`
    to the `myadmin` service.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们的秘密是否有效，我们可以在相同的覆盖网络上启动一个PHPMyAdmin实例。不要忘记通过向`myadmin`服务传递`-e PMA_HOST=mysql`来将这些服务链接在一起。
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then you can open your browser to `http://127.0.0.1:8080` and log in to `PHPMyAdmin`
    as root with `1234` as the password, which we provided through a Docker secret.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在浏览器中打开`http://127.0.0.1:8080`，并使用我们通过Docker秘密提供的密码`1234`作为root登录`PHPMyAdmin`，这样我们就可以使用秘密。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we learned about securing Swarm Mode and the Docker Software
    Supply Chain. We talked about some best practices on how to secure a Docker Swarm
    cluster to use in production. We then proceeded to Notary, a secure delivery mechanism
    to allow Docker Content Trust. This chapter ended with an overview of a new feature
    in Docker 1.13: the Secrets management. We showed how we could use Docker Secret
    to securely deploy MySQL MariaDB server without passing the root password via
    the environment. In the next chapter, we''re going to discover how to deploy Swarm
    on some of the public cloud providers and on OpenStack.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何保护Swarm Mode和Docker软件供应链。我们谈到了一些在生产中如何保护Docker Swarm集群的最佳实践。然后我们继续介绍了Notary，这是一种安全的交付机制，允许Docker内容信任。本章以Docker
    1.13中的一个新功能概述结束：秘密管理。我们展示了如何使用Docker Secret来安全地部署MySQL MariaDB服务器，而不是通过环境传递根密码。在下一章中，我们将发现如何在一些公共云提供商和OpenStack上部署Swarm。
