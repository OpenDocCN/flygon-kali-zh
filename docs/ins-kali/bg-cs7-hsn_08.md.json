["```cs\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Show Results\" /><br />\n```", "```cs\nprivate void ShowSquare(double x) => sampLabel.Text += \"<br>\" + (x * x);\n```", "```cs\nusing System.Collections.Generic;\nusing System.Threading;\n```", "```cs\nList<double> vals = new List<double>(new double[] { 1, 2, 4, 5, 6, 8 });\n```", "```cs\nvals.ForEach(ShowSquare);\n```", "```cs\nvals.ForEach(delegate (double x)\n```", "```cs\n{\n    sampLabel.Text += \"<br>\" + Math.Pow(x, 3);\n});\n```", "```cs\nThread td = new Thread(delegate ())\n```", "```cs\n{\nList<double> arrs = new List<double>(new double[] { 1, 4, 5, 3, 53, 52 });arrs.Sort();arrs.ForEach(x => sampLabel.Text += $\"<br>{x}\");\n}); \n```", "```cs\ntd.Start();\n```", "```cs\ntd.Join();\n```", "```cs\nsampLabel.Text += \"<br>------------------------------------------------------\";\n```", "```cs\nsampLabel.Text += \"<br>-------------------------------------------------------\";\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    private void ShowSquare(double x) => \n    sampLabel.Text += \"<br>\" + (x * x);//expression bodied function\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        //make list of double values\n        List<double> vals = \n        new List<double>(new double[] { 1, 2, 4, 5, 6, 8 });\n        //call ShowSquare on each value inside the list\n        vals.ForEach(ShowSquare);\n        sampLabel.Text += \"<br>-----------------------------------\" ;\n        //lines 21-24 define an unnamed method, which is applied to each \n        //value in the list\n        vals.ForEach(delegate (double x)\n        {\n            sampLabel.Text += \"<br>\" + Math.Pow(x, 3);\n        });\n        sampLabel.Text += \"<br>-----------------------------------\" ;\n        //lines 28-35 create a thread object, and an unnamed method inside\n        //it that spawns\n        //a thread of processing separate from the \"main\" program\n        Thread td = new Thread(delegate ()\n        {\n            List<double> arrs = \n            new List<double>(new double[] { 1, 4, 5, 3, 53, 52 });\n            arrs.Sort();\n            arrs.ForEach(x => sampLabel.Text += $\"<br>{x}\");\n        });\n        //start the thread\n        td.Start();\n        td.Join(); //this is needed to ensure that the thread \n        //\"td\" runs, and then joins back to the\n        //current, main thread, so the program finishes running\n    }\n} \n```"]