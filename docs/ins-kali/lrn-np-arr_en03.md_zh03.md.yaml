- en: Chapter 3. Basic Data Analysis with NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章：使用 NumPy 的基本数据分析
- en: In this chapter, we will learn about basic data analysis through an example
    of historical weather data. We will learn about functions that make working with
    NumPy easier.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过历史天气数据示例学习基本数据分析。 我们将学习函数，这些函数使使用 NumPy 更加容易。
- en: 'In this chapter, we shall cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Functions working on arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组上的函数
- en: Loading arrays from files containing weather data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从包含天气数据的文件中加载数组
- en: Simple mathematical and statistical functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的数学和统计函数
- en: Introducing the dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集简介
- en: First, we will learn about file I/O with NumPy. Data is usually stored in files.
    You would not get far if you are not able to read from and write to files.
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将了解 NumPy 的文件 I/O。 数据通常存储在文件中。 如果您无法读取和写入文件，您将走不远。
- en: The **Royal Netherlands Meteorological Institute** (**KNMI**) offers daily weather
    data online (browse to [http://www.knmi.nl/climatology/daily_data/download.html](http://www.knmi.nl/climatology/daily_data/download.html)).
    KNMI is the Dutch meteorological service headquartered in De Bilt. Let's download
    one of the KNMI files from the De Bilt weather station. The file is roughly 10
    megabytes. It has some text with explanation about the data in Dutch and English.
    Below that is the data in comma-separated values format. I separated the metadata
    and the actual data into separate files. The separation is not necessary because
    you can skip rows when loading from NumPy. I wrote a simple script with NumPy
    to determine the maximum and minimum temperature for the dataset from a CSV file
    that was created in the separation process.
  prefs: []
  type: TYPE_NORMAL
  zh: '**荷兰皇家气象学院**（**KNMI**）在线提供每日天气数据（参考[`www.knmi.nl/climatology/daily_data/download.html`](http://www.knmi.nl/climatology/daily_data/download.html)）。
    KNMI 是荷兰气象局，总部位于德比尔特（De Bilt）。 让我们从德比尔特气象站下载其中一个 KNMI 文件。 该文件大约为 10 MB。 它有一些文本，用荷兰语和英语解释了这些数据。
    在此之下是逗号分隔值格式的数据。 我将元数据和实际数据分离到单独的文件中。 不需要分隔，因为从 NumPy 加载时可以跳过行。 我用 NumPy 编写了一个简单的脚本，以确定在分离过程中创建的
    CSV 文件中数据集的最高和最低温度。'
- en: 'The temperatures are given in tenths of a degree Celsius. There are three columns
    containing temperatures:'
  prefs: []
  type: TYPE_NORMAL
  zh: 温度以十分之一摄氏度为单位给出。 三列包含温度：
- en: An average temperature for a 24-hour period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 24 小时的平均温度
- en: The daily minimum temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每日最低温度
- en: The daily maximum temperature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每日最高温度
- en: 'We will ignore the average temperatures for now. Also notice that there were
    missing values, so let''s convert them to the **Not a Number** (**NaN)** value.
    NaN is a special value for floating point numbers in Python. In the end, we can
    come up with the following simple script (see the `intro.py` file in the `Chapter03`
    folder of this book''s code bundle):'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将忽略平均温度。 另请注意，缺少值，因此我们将它们转换为**非数字**（**NaN**）值。 NaN 是 Python 中浮点数的特殊值。 最后，我们可以提出以下简单脚本（请参见本书代码包包的`Chapter03`文件夹中的`intro.py`文件）：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This script prints the number of records and the minimum and maximum temperature:'
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本打印记录数以及最低和最高温度：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: We read a file with the `loadtxt` function. By default, `loadtxt` tries to convert
    all data into floats. The `loadtxt` function has a special parameter for this
    purpose. The parameter is called `converters` and is a dictionary that links columns
    with the so-called converter functions. We also specified comma as the delimiter
    for fields and columns to use. Please refer to [http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html)
    for more details. KNMI quotes the temperature values in tenths of a degree Celsius,
    so a simple multiplication was required. The `nanmin` and `nanmax` functions do
    the same as the NumPy `max` and `min` functions, but they also ignore NaNs.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`loadtxt`函数读取文件。 默认情况下，`loadtxt`尝试将所有数据转换为浮点数。 为此，`loadtxt`函数具有特殊的参数。 该参数称为`converters`，它是将列与所谓的转换器函数链接在一起的字典。
    我们还指定逗号作为要使用的字段和列的分隔符。 有关更多详细信息，请参考[`docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html)。
    KNMI 引用温度值的十分之一摄氏度，因此需要一个简单的乘法。 `nanmin`和`nanmax`函数与 NumPy `max`和`min`函数相同，但它们也忽略了
    NaN。
- en: Determining the daily temperature range
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定每日温度范围
- en: 'The daily temperature range, or diurnal temperature variation as it is called
    in meteorology, is not so big a deal on Earth. In desert areas on Earth or generally
    on different planets, the variation is greater. We will have a look at the daily
    temperature range for the data we downloaded in the previous example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在气象学中，每日温度范围或昼夜温度变化在地球上并不重要。 在地球上或通常在不同星球上的沙漠地区，变化更大。 我们将在上一个示例中下载的数据看一下在每日温度范围内的情况：
- en: 'To analyze temperature ranges, we will need to import the NumPy package and
    the NumPy masked arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要分析温度范围，我们将需要导入 NumPy 包和 NumPy 遮罩数组：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will load a bit more data than that loaded in the previous section: dates
    of measurements in the YYYYMMDD format and the average daily temperature. Dates
    require special conversion. Firstly date strings are converted to dates and then
    to numbers as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将加载比上一部分中加载的数据更多的数据：`YYYYMMDD`格式的测量日期和每日平均温度。 日期需要特殊转换。 首先将日期字符串转换为日期，然后转换为数字，如下所示：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s calculate the percentage of days that minimum and maximum temperatures
    are below zero degrees Celsius (freezing point):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们计算最低和最高温度低于零摄氏度（凝固点）的天数百分比：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The chance of the maximum daily temperature being below zero seems to be three
    percent. That's about 10 days per year. The minimum daily temperature is more
    likely to be below zero, with a likelihood of 18 percent. This comes to approximately
    two months a year. Not consecutive months obviously.
  prefs: []
  type: TYPE_NORMAL
  zh: 每日最高温度低于零的可能性似乎为 3%。 每年大约 10 天。 最低每日温度更可能低于零，可能性为 18%。 大约一年两个月。 显然不是连续几个月。
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Unfortunately, we still have the problem of missing values. One way to deal
    with this is to use masked arrays. Masked arrays are a special type of NumPy array
    that usually contain missing, invalid, or suspect values.
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们仍然存在缺失值的问题。 解决此问题的一种方法是使用遮罩数组。 遮罩数组是 NumPy 数组的一种特殊类型，通常包含缺失，无效或可疑值。
- en: 'Now, to solve the missing values problem, just give a masked array a mask created
    with the `isnan` function. We will calculate averages and standard deviations
    for temperatures and minimum and maximum for daily temperature ranges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要解决缺失值的问题，只需将一个由`isnan`函数创建的遮罩给带遮罩的数组一个即可。 我们将计算温度的平均值和标准差，以及每日温度范围的最小值和最大值：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Apparently, the average daily range is eight degrees, while the average minimum
    is around five degrees, and the average maximum is around 13 degrees. The following
    values were printed at the time the code was written; naturally, if you run the
    program with more recent data, the outcome can differ a bit:'
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，平均每日范围是 8 度，而平均最小值在 5 度左右，而最大值在 13 度左右。 在编写代码时打印了以下值； 自然，如果您使用更新的数据来运行程序，结果可能会有所不同：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can find the code for this example in the `daily_temperature_range.py` file
    in the `Chapter03` folder of this book's code bundle.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书代码包`Chapter03`文件夹中的`daily_temperature_range.py`文件中找到此示例的代码。
- en: Looking for evidence of global warming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找全球变暖的证据
- en: According to the global warming theory, the temperature on Earth has increased
    on average since the end of the 19th century. During the last century until now,
    the temperature supposedly has gained about 0.8 degrees. Apparently, most of this
    warming has happened in the last two or three decades. In the future, we can expect
    the temperature to rise even more, leading to droughts, heat waves, and other
    unpleasant phenomena. Obviously, some regions will be hit harder than others.
    Several solutions have been proposed, including reduction of greenhouse gas emissions
    and geo-engineering by spreading special gases in the atmosphere in order to reflect
    more sunlight.
  prefs: []
  type: TYPE_NORMAL
  zh: 根据全球变暖理论，自 19 世纪末以来，地球上的温度平均在上升。 在上个世纪直到现在，据称温度已经升高了约 0.8 度。 显然，这种变暖的大部分发生在最近的两三个十年中。
    将来，我们可以预期温度会进一步升高，从而导致干旱，热浪和其他不愉快的现象。 显然，某些地区将受到比其他地区更大的打击。 已经提出了几种解决方案，包括减少温室气体排放和通过在大气中扩散特殊气体以反射更多的阳光来进行地球工程。
- en: 'The data we downloaded from the Dutch Meteorological Institute, KNMI, is not
    sufficient to prove whether global warming is real or not, but we can certainly
    examine it further. For instance, we can check whether the temperature in De Bilt
    (that''s where the data was collected) in the first half of the dataset is lower
    than in the second half. Another thing we can do is plot yearly average temperatures.
    De Bilt by the way, as far as I know, is a small town in central Netherlands without
    heavy industry. We need to import NumPy and Matplotlib to create plots later on.
    Perform the following steps to calculate the yearly average temperature:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从荷兰气象研究所（KNMI）下载的数据不足以证明全球变暖是否真实，但我们当然可以进一步进行研究。 例如，我们可以检查数据集上半部分德比尔特（收集数据的地方）中的温度是否低于下半部分。
    我们可以做的另一件事是绘制年度平均温度。 据我所知，德比尔特是荷兰中部的一个没有重工业的小镇。 稍后我们需要导入 NumPy 和 Matplotlib
    来创建图。 执行以下步骤来计算年平均温度：
- en: 'We will load the average daily temperatures and the corresponding dates. Actually,
    we will convert the dates to years immediately to be able to calculate yearly
    average temperatures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将加载平均每日温度和相应的日期。 实际上，我们会立即将日期转换为年份，以便能够计算出年平均温度：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, some sanity checking occurs at the end of the snippet, which
    prints the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在代码段的末尾会进行一些检查，这会打印以下输出：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After dividing the average daily temperature values in two halves, we can calculate
    and compare the arithmetic means of both halves. Here, we are using the NumPy
    ndarray methods to compare the standard deviation as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将平均每日温度值分成两半后，我们可以计算和比较两半的算术平均值。 在这里，我们也使用 NumPy `ndarray`方法来比较标准差：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了以下输出：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It seems that the average temperature is slightly higher in the second half
    of the dataset.
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的后半部分似乎平均温度略高。
- en: 'Computing yearly average temperatures is simple. For each year, find the array
    indices using the `where` function corresponding to that year. With the indices,
    we then calculate the mean for each year and store it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算年平均温度很简单。 对于每一年，使用对应于该年的`where`函数查找数组索引。 利用这些指标，我们然后计算每年的平均值并将其存储：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We get the following plot as a result. For comparison, an average of all average
    temperatures is also drawn through the middle of the plot. Notice how the yearly
    average temperatures seem to be on the rise from 1980 onwards (refer to the `global_warming.py`
    file in the `Chapter03` folder of this book's code bundle).
  prefs: []
  type: TYPE_NORMAL
  zh: 结果得到以下图。 为了进行比较，还通过图的中间绘制了所有平均温度的平均值。 请注意，自 1980 年以来，年平均气温似乎在上升（请参阅本书代码包`Chapter03`文件夹中的`global_warming.py`文件）。
- en: '![Looking for evidence of global warming](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![寻找全球变暖的证据](img/00018.jpeg)'
- en: Comparing solar radiation versus temperature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较太阳辐射与温度
- en: The Sun is of course a very important factor when it comes to temperature. Unfortunately,
    the De Bilt dataset from the KNMI is missing a lot of data concerning the Sun's
    radiation. The data is given in Joule per square centimeter. There are also other
    variables in the file, which are derived from solar radiation, such as the sunshine
    duration in hours.
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及温度时，太阳当然是的一个非常重要的因素。 不幸的是，KNMI 的 De Bilt 数据集缺少许多有关太阳辐射的数据。 数据以焦耳每平方厘米为单位。
    文件中还有其他变量，这些变量是从太阳辐射得出的，例如以小时为单位的日照时间。
- en: We are going to analyze the radiation data a bit, draw a histogram, and compare
    it with the daily average temperatures. To compare, we will calculate the correlation
    coefficient between radiation and temperature and plot yearly relative changes
    in average temperature and radiation. Originally it seemed a good idea to have
    a scatter plot, but that didn't look right with thousands of data points, so instead,
    it was decided to compress the data as it were. Later, the author realized that
    radiation was present from around 1960 onwards, so it might have been better to
    plot the correlations coefficient for each year. This is left as an exercise for
    the reader.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对辐射数据进行一些分析，绘制直方图，并将其与每日平均温度进行比较。 为了进行比较，我们将计算辐射与温度之间的相关系数，并绘制平均温度和辐射的年度相对变化图。
    最初，有一个散点图似乎是一个好主意，但是对于成千上万的数据点来说看起来并不正确，因此，决定压缩数据。 后来，作者意识到从 1960 年左右开始存在辐射，因此绘制每年的相关系数可能会更好。
    这留给读者练习。
- en: 'We need to import NumPy, the NumPy masked array module, and Matplotlib. The
    steps to compare solar radiation versus temperature are presented as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要导入 NumPy，NumPy 遮罩数组模块和 Matplotlib。 比较太阳辐射与温度的步骤如下：
- en: 'We will load the dates and convert them to years, and then load the average
    temperature and radiation. The latter misses a lot of values, so we will convert
    the missing values to NaN and then create a masked array out of the radiation
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将加载日期并将其转换为年份，然后加载平均温度和辐射。 后者会遗漏很多值，因此我们将遗漏的值转换为 NaN，然后​​从辐射数据中创建一个遮罩数组：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will have a look at the minimum, maximum, mean, and standard deviation of
    radiation. Additionally, we will print the correlation coefficient of temperature
    and radiation with the `corrcoef` function. To compute the coefficient, we need
    to match the data properly by avoiding the NaN values. Also, we have to get one
    of the off-diagonal values of the correlation matrix that NumPy returns. The `compressed`
    method of masked arrays returns all the nonmasked data as a one-dimensional array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将看看辐射的最小，最大，平均值和标准差。 另外，我们将使用`corrcoef`函数打印温度和辐射的相关系数。 要计算系数，我们需要通过避免 NaN
    值来正确匹配数据。 同样，我们必须获得 NumPy 返回的相关矩阵的非对角线值之一。 遮罩数组的`compressed`方法将所有非遮罩数据作为一维数组返回：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The script prints the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本将输出以下输出：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, the correlation is not that strong.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，相关性并不强。
- en: 'We already did yearly averaging. Now we add radiation to be averaged yearly.
    Another thing that we want to do is calculate the relative change of the variables
    we are interested in as percentages. The `diff` function gives us by default the
    first order difference between neighboring array values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经进行了年度平均。 现在，我们将辐射量平均化。 我们要做的另一项是用百分比来计算我们感兴趣的变量的相对变化。 `diff`函数默认为我们提供相邻数组值之间的一阶差：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We will plot the radiation histogram and relative changes in yearly average
    temperature and radiation with Matplotlib. Matplotlib is an open source Python
    plotting library considered by many as part of the basic stack. For more information,
    please refer to *Matplotlib for Python Developers*, *Packt Publishing*. The second
    edition of this book was coauthored by the author of this book and should be published
    in 2014.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将用 Matplotlib 绘制辐射直方图以及年平均温度和辐射的相对变化。 Matplotlib 是一个开放源代码的 Python 绘图库，许多人认为它是基本栈的一部分。
    有关更多信息，请参阅《Python 开发人员的 Matplotlib》，*Packt 出版社*。 该书的第二版由该书的作者共同撰写，应于 2014
    年出版。
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The Matplotlib `subplot` function creates a tableau or grid from multiple plots.
    In this example, we used 211 to indicate that there will be two plots, and that
    we want this particular plot to be placed in the first row in the first column.
    Similarly, 212 means put the plot on second row in the first column. Refer to
    the following plots and the `solar_radiation.py` file in the `Chapter03` folder
    of this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib `subplot`函数从多个图创建表格或网格。 在此示例中，我们使用 211 表示将有两个图，并且我们希望将此特定图放置在第一列的第一行中。
    类似地，212 表示将图放在第一列的第二行上。 请参考以下图表以及本书代码包的`Chapter03`文件夹中的`solar_radiation.py`文件：
- en: '![Comparing solar radiation versus temperature](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![比较太阳辐射与温度](img/00019.jpeg)'
- en: Analyzing wind direction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析风向
- en: 'Wind is the movement of air due to the difference in atmospheric pressure.
    The KNMI De Bilt data file has a column for the vector mean wind direction in
    degrees (360 = north, 90 = east, 180 = south, 270 = west, 0 = calm/variable).
    We will plot a histogram of that data and compute the corresponding average temperature
    for each wind direction. It seems reasonable to expect that the direction from
    which the wind originates influences temperature. In other words, some locations
    tend to be warmer or colder, so air emanating from there will be warmer or colder,
    respectively. The Netherlands, as you may know, doesn''t have any mountains, so
    we don''t have to take that into account. We do have to remind ourselves of the
    proximity of the North Sea. The Netherlands has a moderate maritime climate with
    southwestern winds. We can study the wind direction information with the following
    procedure:'
  prefs: []
  type: TYPE_NORMAL
  zh: 风是由于大气压力的不同而使空气的运动。 KNMI 德比尔特数据文件具有一列以度为单位的向量平均风向（360 为北方，90 为东方，180
    为南方，270 为西方，0 为平静/可变）。 我们将绘制该数据的直方图，并计算每个风向的相应平均温度。 预期风的产生方向会影响温度似乎是合理的。
    换句话说，某些位置趋向于变暖或变冷，因此从那里散发出的空气将分别变暖或变冷。 您可能知道，荷兰没有任何山脉，因此我们不必考虑到这一点。 我们必须提醒自己北海的临近。
    荷兰的海洋气候温和，西南风。 我们可以按照以下过程来研究风向信息：
- en: 'We will load the wind direction and average temperatures into NumPy arrays.
    Wind direction has missing values, so some conversion is in order. We will create
    a masked array from the wind direction values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将风向和平均温度加载到 NumPy 数组中。 风向缺少值，因此需要进行一些转换。 我们将根据风向值创建一个遮罩数组：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can average wind directions the way we calculated the average of years by
    going over each of the possible wind directions, finding the corresponding temperature
    values, and averaging them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过遍历每个可能的风向，找到相应的温度值，然后将它们平均，可以按照计算年均值的方式对风向求平均：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we will plot the wind direction histogram and average temperatures per
    wind direction as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将绘制风向直方图和每个风向的平均温度，如下所示：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We get the following plots as a result. Notice the peak in the histogram that
    corresponds to a southwestern wind direction. The average temperature seems to
    be bottoming around 50 degrees.
  prefs: []
  type: TYPE_NORMAL
  zh: 结果得到以下图。 注意直方图中与西南风向相对应的峰值。 平均温度似乎在 50 度左右触底。
- en: '![Analyzing wind direction](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![分析风向](img/00020.jpeg)'
- en: Analyzing wind speed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析风速
- en: Wind speed is a very important value. The KNMI De Bilt data file has daily average
    wind speed data expressed in meters per second as well.
  prefs: []
  type: TYPE_NORMAL
  zh: 风速是非常重要的值。 KNMI 德比尔特数据文件还具有以米/秒表示的每日平均风速数据。
- en: 'We will load the wind direction, wind speed, and average temperature into NumPy
    arrays. Wind direction and speed have missing values, so some conversion is in
    order. We will create a masked array from the wind direction and speed values:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将将风向，风速和平均温度加载到 NumPy 数组中。 风向和风速缺少值，因此需要进行一些转换。 我们将根据风向和风速值创建一个遮罩数组：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: We will go through the usual statistics of wind speed—minimum, maximum, average,
    standard deviation, and correlation with average temperatures. Note that for the
    correlation computation, we need to match the average temperature values with
    the valid wind speed values. We do that by negating the mask of the wind speed
    array, giving us the indices of valid values.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看风速的常规统计信息-最小值，最大值，平均值，标准差以及与平均温度的相关性。 注意，为了进行相关计算，我们需要将平均温度值与有效风速值进行匹配。
    我们通过否定风速数组的遮罩来做到这一点，为我们提供有效值的索引。
- en: 'In the output, we see a weak negative correlation between wind speed and temperature
    as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们看到风速和温度之间的弱负相关性如下：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Analyzing precipitation and sunshine duration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析降水和日照时间
- en: 'The KNMI De Bilt data file has a column containing precipitation duration values
    in 0.1 hours. The sunshine duration also given in 0.1 hours is derived from global
    radiation values. Notice the use of the word *global* and not *solar*. Hence,
    there are other sources of radiation taken into account here, but details are
    not very important right now. We will plot a histogram of precipitation duration
    values. However, we will omit the days when no rain fell, because there are so
    many dry days that it skews the overall picture. We will also display the monthly
    average precipitation and sunshine durations. The following steps describe the
    rainfall and sunlight length study:'
  prefs: []
  type: TYPE_NORMAL
  zh: KNMI 德比尔特数据文件的列包含 0.1 小时内的降雨持续时间值。 日照时间（也以 0.1 小时给出）是根据全球辐射值得出的。 注意单词“全球”，而不是“太阳”。
    因此，这里考虑了其他辐射源，但是目前细节并不十分重要。 我们将绘制降水持续时间值的直方图。 但是，我们将忽略没有降雨的日子，因为干旱的日子太多了，它会使整体情况发生变化。
    我们还将显示每月平均降水量和日照时间。 以下步骤描述了降雨和日照长度的研究：
- en: 'We will load the dates converted into months, sunshine, and precipitation duration
    into NumPy arrays. Again, we convert missing values to NaN. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将转换为月份，日照和降水持续时间的日期加载到 NumPy 数组中。 同样，我们将缺失值转换为 NaN。 代码如下：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before calculating the basic statistics for the precipitation duration, we
    will create masked arrays for the sunshine and rain duration. There is a minor
    detail to take care of. Low values of sunshine duration are written down as -1
    for some reason. I decided to convert those values to 0\. It might have been better
    to completely ignore them. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计算降水持续时间的基本统计量之前，我们将为日照和降雨持续时间创建遮罩数组。 有一个小细节需要注意。 由于某种原因，低的日照时间值记为 -1。 我决定将这些值转换为
    0。 最好完全忽略它们。 代码如下：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This prints the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下输出：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As expected, the rain duration can be between 0 and 24 hours (or a full day).
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，降雨时间可以在 0 到 24 小时之间（或整天）。
- en: 'We can average the sunshine and precipitation duration values quite easily
    over months. First, we create a numerical range for months. Second, we find array
    indices corresponding to each month. Then, we use indices to select duration values.
    The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以轻松地对数月内的日照和降水持续时间值进行平均。 首先，我们创建一个数月的数值范围。 其次，我们找到对应于每个月的数组索引。 然后，我们使用索引来选择持续时间值。
    代码如下：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The number of dry days is quite high, so we will leave them out in the precipitation
    duration histogram. We will plot bar charts of the average monthly rain and sunshine
    durations. The `cal` module is used here to display abbreviated month names in
    the plot. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 干旱天的数量非常多，因此我们将在降水持续时间直方图中将其忽略。 我们将绘制平均每月降雨和日照时间的条形图。 这里使用`cal`模块来显示图中的月份缩写名称。
    代码如下：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This gives us the following exciting plots:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了以下令人兴奋的绘图：
- en: '![Analyzing precipitation and sunshine duration](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![分析降水和日照时间](img/00021.jpeg)'
- en: It seems that sunshine and precipitation duration are inversely correlated.
    So there must be an inverse correlation with temperatures based on the previous
    evidence in this series. We leave that as an exercise for readers to check. Obviously,
    the rain duration is limited between 0 and 24 hours, with lower values being much
    more likely. We can see clearly that in summer months the sun shines longer and
    it rains less (duration-wise). Similar conclusions can be drawn for other seasons.
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎日照与降水持续时间成反比。 因此，根据该系列中的先前证据，必须与温度成反比。 我们将其作为练习留给读者检查。 显然，降雨时间限制在 0 到 24 小时之间，较低的值更有可能出现。
    我们可以清楚地看到，在夏季的几个月中，太阳的照射时间更长，而雨量则更少（持续时间较长）。 对于其他季节也可以得出类似的结论。
- en: Analyzing monthly precipitation in De Bilt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析 De Bilt 的每月降水
- en: 'Let''s take a look at the De Bilt precipitation data in 0.1 mm from KNMI. They
    are using the convention again of -1 representing low values. We are again going
    to set those values to 0:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以来查看来自 KNMI 的德比尔特降水数据，单位为 0.1 毫米。 他们再次使用表示低值的 -1 约定。 我们将再次将这些值设置为 0：
- en: 'We will load the dates converted to months, rain amounts, and rain duration
    in hours into NumPy arrays. Again, missing values needed to be converted to NaNs.
    We then create masked arrays for NumPy arrays with missing values. The code is
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将将转换为月份，降雨数量和降雨持续时间（以小时为单位）的日期加载到 NumPy 数组中。 同样，缺少的值需要转换为 NaN。 然后，我们为缺少值的
    NumPy 数组创建遮罩数组。 代码如下：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can calculate some simple statistics, such as minimum, maximum, mean, standard
    deviation, and correlation with precipitation duration. The last part is a bit
    tricky, because we need to match valid values. The values for a certain date of
    both precipitation and precipitation duration have to be valid. Luckily, this
    is pretty easy if we define a Boolean condition for masks of the arrays. The code
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以计算一些简单的统计量，例如最小值，最大值，平均值，标准差以及与降水持续时间的相关性。 最后一部分有些棘手，因为我们需要匹配有效值。 降水和降水持续时间的某个日期的值必须有效。
    幸运的是，如果我们为数组的遮罩定义布尔条件，这将非常容易。 代码如下：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The previous code snippet prints the following values:'
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码段显示以下值：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The correlation of the precipitation quantity with the duration of rain is not
    very strong, but still, it is the strongest correlation we have seen in this series
    so far. The author is convinced that both variables have been measured independently
    unlike sunshine duration, which is derived from global radiation.
  prefs: []
  type: TYPE_NORMAL
  zh: 降水量与降雨持续时间的相关性不是很强，但仍然是迄今为止我们在该系列中看到的最强的相关性。 作者相信，这两个变量是独立测量的，与阳光持续时间不同，后者是从全球辐射得出的。
- en: Analyzing atmospheric pressure in De Bilt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析德比尔特的大气压
- en: 'Atmospheric pressure is the pressure exerted by air in the atmosphere. It is
    defined as force divided by area. The KNMI De Bilt data file has measurements
    in 0.1 hPa for average, minimum, and maximum daily pressures. We will plot a histogram
    of the average pressure and monthly minimums, maximums, and averages:'
  prefs: []
  type: TYPE_NORMAL
  zh: 大气压是大气中空气施加的压力。 定义为力除以面积。 KNMI 德比尔特数据文件具有 0.1 hPa 的测量值，用于平均，最小和最大日压力。 我们将绘制平均压力和每月最小值，最大值和平均值的直方图：
- en: 'We will load the dates converted to months, average, minimum, and maximum pressure
    into NumPy arrays. Again, missing values needed to be converted to NaNs. The code
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将转换为月，平均，最小和最大压力的日期加载到 NumPy 数组中。 同样，缺少的值需要转换为 NaN。 代码如下：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Values are missing from the pressure value columns, so we have to create masked
    arrays out of NumPy arrays. The following code snippet prints some simple statistics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 压力值列中缺少值，因此我们必须从 NumPy 数组中创建遮罩数组。 以下代码段显示一些简单的统计量：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This code snippet prints the following values:'
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码段输出以下值：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can compute monthly averages, minimums, and maximums with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下代码计算每月的平均值，最小值和最大值：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We will draw a histogram of the average daily pressures and the associated
    Gaussian curve. In addition, we will plot monthly aggregate values as prepared
    in the previous step. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将绘制平均每日压力和相关的高斯曲线的直方图。 此外，我们将绘制上一步中准备的每月汇总值。 代码如下：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following plots are produced:'
  prefs: []
  type: TYPE_NORMAL
  zh: 产生以下图：
- en: '![Analyzing atmospheric pressure in De Bilt](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![分析德比尔特的大气压](img/00022.jpeg)'
- en: As you can see, the bell curve fits the distribution of average daily pressures
    almost perfectly. The monthly average pressure seems to be constant.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，钟形曲线几乎完美地拟合了平均每日压力的分布。 的月平均压力似乎是恒定的。
- en: Analyzing atmospheric humidity in De Bilt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析德比尔特的大气湿度
- en: 'Relative atmospheric humidity is the percentage of partial water vapor pressure
    of the maximum pressure at the same temperature in the atmosphere. During the
    summer months, high humidity can lead to issues with getting rid of excess heat
    by sweating. Humidity is also related to rain, dew, and fog. The KNMI De Bilt
    data file provides data on daily relative average, minimum, and maximum humidity
    in percentages. We will draw a histogram of the daily relative average humidity
    and monthly chart:'
  prefs: []
  type: TYPE_NORMAL
  zh: 相对大气湿度是大气中相同温度下最大水蒸气分压的百分比。 在夏季，高湿度可能会导致出汗而消除多余的热量。 湿度还与降雨，露水和雾有关。 KNMI 德比尔特数据文件提供有关百分比的每日相对平均，最小和最大湿度的数据。 我们将绘制每日相对平均湿度和每月图表的直方图：
- en: 'We will load the dates converted to months, daily relative average humidity,
    and the minimum and maximum humidity into NumPy arrays. Again, missing values
    needed to be converted into NaNs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将转换为月的日期，每日相对平均湿度以及最小和最大湿度加载到 NumPy 数组中。 同样，缺少的值需要转换为 NaN：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Values are missing from the relative humidity value columns, so we have to
    create masked arrays out of NumPy arrays. The following code snippet prints some
    simple statistics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相对湿度值列中缺少值，因此我们必须从 NumPy 数组中创建遮罩数组。 以下代码段显示一些简单的统计量：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The statistics printed are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 打印的统计数据如下：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The maximum relative humidity is above 100, which is kind of odd. We will draw
    a histogram of the relative average daily humidity. In addition, we will plot
    monthly aggregate values (refer to the `atmospheric_humidity.py` file in the `Chapter03`
    folder of this book''s code bundle). We will get the following plots as a result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最大相对湿度在 100 以上，这很奇怪。 我们将绘制相对平均每日湿度的直方图。 此外，我们将绘制每月的汇总值（请参考本书代码包`Chapter03`文件夹中的`atmospheric_humidity.py`文件）。
    结果将得到以下图：
- en: '![Analyzing atmospheric humidity in De Bilt](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![分析德比尔特的大气压](img/00023.jpeg)'
- en: Something strange is going on with the maximum values. They seem to be above
    100 percent. Maybe the author misunderstood the definition of relative humidity.
    However, the relative average humidity values seem to be between 0 and 100 percent
    as expected.
  prefs: []
  type: TYPE_NORMAL
  zh: 最大值正在发生奇怪的事情。 他们似乎高于 100%。 也许作者误解了相对湿度的定义。 但是，相对平均湿度值似乎在 0-100% 之间。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter explained a great number of common NumPy functions. We explored
    the data from a KNMI weather station. The exploration is not exhaustive, so I
    encourage you to play with the data on your own. You should have realized by now
    how easy it is to do basic data analysis with NumPy and related Python libraries.
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了大量常见的 NumPy 函数。 我们探索了 KNMI 气象站的数据。 探索不是详尽无遗的，因此我鼓励您自己使用数据。 您应该已经意识到，使用
    NumPy 和相关的 Python 库进行基本数据分析是多么容易。
- en: In the next chapter, we will go a step further and try to predict temperature
    using the same data.
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更进一步，并尝试使用相同的数据预测温度。
