["```js\nvar second = function() {};\nconsole.log(second.name);\n// \"second\"\n\nvar myArray = new Array(3);\nmyArray[1] = function() {};\nconsole.log(myArray[1].name);\n// \"\"\n```", "```js\nvar myCounter = (function(initialValue = 0) {\n    let count = initialValue;\n return function() {\n        count++;\n return count;\n };\n})(77);\n\nmyCounter(); // 78\nmyCounter(); // 79\nmyCounter(); // 80\n```", "```js\nvar sum3 = new Function(\"x\", \"y\", \"z\", \"var t = x+y+z; return t;\");\nsum3(4, 6, 7); // 17\n```", "```js\nconst f1 = (x, y, z) => x + y + z;\n\nconst f2 = (x, y, z) => {\n    return x + y + z;\n};\n```", "```js\nfunction ShowItself1(identity) {\n this.identity = identity;\n setTimeout(function() {\n console.log(this.identity);\n }, 1000);\n}\n\nvar x = new ShowItself1(\"Functional\");\n// *after one second, **undefined** is displayed*\n```", "```js\nfunction ShowItself2(identity) {\n this.identity = identity;\n    let that = this;\n setTimeout(function() {\n console.log(that.identity);\n }, 1000);\n\n setTimeout(\n function() {\n console.log(this.identity);\n }.bind(this),\n 2000\n );\n\n setTimeout(() => {\n console.log(this.identity);\n }, 3000);\n}\n\nvar x = new ShowItself2(\"JavaScript\");\n// *after one second, \"JavaScript\"*\n// *after another second, the same*\n// *after yet another second, once again*\n```", "```js\nconst once = func => {\n let done = false;\n return (...args) => {\n if (!done) {\n done = true;\n func(...args);\n }\n };\n};\n```", "```js\nfunction somethingElse() {\n // *get arguments and do something*\n}\n\nfunction listArguments() {\n console.log(arguments);\n var myArray = Array.prototype.slice.call(arguments);\n console.log(myArray);\n somethingElse.apply(null, myArray);\n}\n\nlistArguments(22, 9, 60);\n// (3) [22, 9, 60, callee: function, Symbol(Symbol.iterator): function]\n// (3) [22, 9, 60]\n```", "```js\nfunction listArguments2(...args) {\n console.log(args);\n somethingElse(...args);\n}\n\nlistArguments2(12, 4, 56);\n// (3) [12, 4, 56]\n```", "```js\nconst altSum3 = x => y => z => x + y + z;\n```", "```js\naltSum3(1)(2)(3); // 6\n```", "```js\nlet fn1 = altSum3(1);\nlet fn2 = fn1(2);\nlet fn3 = fn2(3);\n```", "```js\nlet fn1 = y => z => 1 + y + z;\n```", "```js\nlet fn2 = z => 1 + 2 + z;\n```", "```js\nfunction xyzzy(...) { ... }\n```", "```js\nvar xyzzy = function(...) { ... }\n```", "```js\nfunction doAction(state = initialState, action) {\n let newState = {};\n switch (action.type) {\n case \"CREATE\":\n // *update state, generating newState,*\n // *depending on the action data*\n // *to create a new item*\n return newState;\n case \"DELETE\":\n // *update state, generating newState,*\n // *after deleting an item*\n return newState;\n case \"UPDATE\":\n // *update an item,*\n // *and generate an updated state*\n return newState;\n default:\n return state;\n }\n}\n```", "```js\nconst dispatchTable = {\n CREATE: (state, action) => {\n // *update state, generating newState,*\n // *depending on the action data*\n // *to create a new item*\n return newState;\n },\n DELETE: (state, action) => {\n // *update state, generating newState,*\n // *after deleting an item*\n return newState;\n },\n UPDATE: (state, action) => {\n // *update an item,*\n // *and generate an updated state*\n return newState;\n }\n};\n```", "```js\nfunction doAction2(state = initialState, action) {\n return dispatchTable[action.type]\n ? dispatchTable[action.type](state, action)\n : state;\n}\n```", "```js\nfetch(\"some/remote/url\").then(function(data) {\n processResult(data);\n});\n```", "```js\nfunction someFunction(someData) { \n return someOtherFunction(someData);\n}\n```", "```js\nfetch(\"some/remote/url\").then(processResult);\n```", "```js\nfetch(\"some/remote/url\").then(function(data) {\n myObject.store(data);\n});\n```", "```js\nfetch(\"some/remote/url\").then(myObject.store);\n```", "```js\nfetch(\"some/remote/url\").then(myObject.store.bind(myObject));\n```", "```js\nfunction doSomeMethod(someData) { \n return someObject.someMethod(someData);\n}\n```", "```js\nconst doSomeMethod = someObject.someMethod.bind(someObject);\n```", "```js\nvar colors = [\n \"violet\",\n \"indigo\",\n \"blue\",\n \"green\",\n \"yellow\",\n \"orange\",\n \"red\"\n];\ncolors.sort();\nconsole.log(colors);\n// *[\"blue\", \"green\", \"indigo\", \"orange\", \"red\", \"violet\", \"yellow\"]*\n```", "```js\nvar someNumbers = [3, 20, 100];\nsomeNumbers.sort();\nconsole.log(someNumbers);\n// ***[100, 20, 3]***\n```", "```js\nvar palabras = [\"\u00f1and\u00fa\", \"oasis\", \"mano\", \"natural\", \"m\u00edtico\", \"musical\"];\npalabras.sort();\nconsole.log(palabras);\n// *[\"mano\", \"musical\", \"m\u00edtico\", \"natural\", \"oasis\", \"\u00f1and\u00fa\"]* -- ***wrong result***!\n```", "```js\npalabras.sort((a, b) => a.localeCompare(b, \"es\"));\nconsole.log(palabras);\n// *[\"mano\", \"m\u00edtico\", \"musical\", \"natural\", \"\u00f1and\u00fa\", \"oasis\"]*\n```", "```js\nconst spanishComparison = (a, b) => a.localeCompare(b, \"es\");\n\npalabras.sort(spanishComparison);\n// *sorts the palabras array according to Spanish rules:*\n// *[\"mano\", \"m\u00edtico\", \"musical\", \"natural\", \"\u00f1and\u00fa\", \"oasis\"]*\n```", "```js\nconst fs = require(\"fs\");\nfs.readFile(\"someFile.txt\", (err, data) => {\n if (err) {\n console.error(err); // *or throw an error, or otherwise handle the problem*\n } else {\n console.log(data.toString());\n }\n});\n```", "```js\nfetch(\"some/remote/url\")\n    .then(data => {\n // *Do some work with the returned data*\n })\n    .catch(error => {\n // *Process all errors here*\n });\n```", "```js\nfunction doSomething(a, b, c, normalContinuation, errorContinuation) {\n let r = 0;\n // *... do some calculations involving a, b, and c,*\n // *and store the result in r*\n\n // *if an error happens, invoke:*\n // *errorContinuation(\"description of the error\")*\n\n // *otherwise, invoke:*\n // *normalContinuation(r)*\n}\n```", "```js\nfunction getAjax() {\n let ajax = null;\n    if (window.XMLHttpRequest) {\n // *modern browser? use XMLHttpRequest*\n ajax = new XMLHttpRequest();\n\n } else if (window.ActiveXObject) {\n // *otherwise, use ActiveX for IE5 and IE6*\n ajax = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n } else {\n throw new Error(\"No Ajax support!\");\n }\n\n return ajax;\n}\n```", "```js\n(function initializeGetAjax() {\n let myAjax = null;\n if (window.XMLHttpRequest) {\n // *modern browsers? use XMLHttpRequest*\n myAjax = function() {\n return new XMLHttpRequest();\n };\n\n } else if (window.ActiveXObject) {\n // *it's ActiveX for IE5 and IE6*\n myAjax = function() {\n new ActiveXObject(\"Microsoft.XMLHTTP\");\n };\n\n } else {\n myAjax = function() {\n throw new Error(\"No Ajax support!\");\n };\n }\n\n    window.getAjax = myAjax;\n})();\n```", "```js\nif (currentName.indexOf(\"Mr.\") !== -1) {\n // *it's a man*\n ...\n}\n```", "```js\nif (currentName.includes(\"Mr.\")) {\n // *it's a man*\n ...\n}\n```", "```js\nif (!String.prototype.includes) {\n    String.prototype.includes = function(search, start) {\n \"use strict\";\n if (typeof start !== \"number\") {\n start = 0;\n }\n if (start + search.length > this.length) {\n return false;\n } else {\n return this.indexOf(search, start) !== -1;\n }\n };\n}\n```", "```js\nlet myLog = someText => {\n    if (DEVELOPMENT) {\n console.log(someText); // *or some other way of logging*\n } else {\n // do nothing\n }\n}\n```", "```js\nlet myLog;\nif (DEVELOPMENT) {\n myLog = someText => console.log(someText);\n} else {\n myLog = someText => {};\n}\n```", "```js\nconst myLog = DEVELOPMENT\n ? someText => console.log(someText)\n : someText => {};\n```", "```js\n(function() {\n // *do something...*\n})();\n```", "```js\n(function(a, b) {\n // *do something, using the*\n // *received arguments for a and b...*\n})(some, values);\n```", "```js\nlet x = (function(a, b) {\n // *...return an object or function*\n})(some, values);\n```", "```js\nfunction ready() { ... }\nfunction set() { ... }\nfunction go() { ... }\n// *initialize things calling ready(),*\n// *set() and go() appropriately*\n```", "```js\nfunction ready() {\n console.log(\"ready\");\n}\nfunction set() {\n console.log(\"set\");\n}\nfunction go() {\n console.log(\"go\");\n}\nready();\nset();\ngo();\n\nfunction set() {\n console.log(\"UNEXPECTED...\");\n}\n// *\"ready\"*\n// *\"UNEXPECTED\"*\n// *\"go\"*\n```", "```js\n(function() {\n function ready() {\n console.log(\"ready\");\n }\n function set() {\n console.log(\"set\");\n }\n function go() {\n console.log(\"go\");\n }\n ready();\n set();\n go();\n})();\n\nfunction set() {\n console.log(\"UNEXPECTED...\");\n}\n// *\"ready\"*\n// *\"set\"*\n// *\"go\"*\n```", "```js\nconst myCounter = (function() {\n let count = 0;\n return function() {\n count++;\n return count;\n };\n})();\n```", "```js\n const simpleAction = t => {\n type: t;\n };\n\n console.log(simpleAction(\"INITIALIZE\"));\n // ***undefined***\n```", "```js\n const doAction3 = (state = initialState, action) =>\n (dispatchTable[action.type] && \n dispatchTable[action.type](state, action)) ||\n state;\n```"]