["```cs\nEnter Name:<asp:TextBoxID=\"TextBox1\" runat=\"server\"></asp:TextBox><br />\nEnter Date:<asp:TextBoxID=\"TextBox2\" runat=\"server\"></asp:TextBox><br />\n```", "```cs\nCREATE PROCEDURE[dbo].[AddName]\n```", "```cs\n@Name varchar(100), \n@DateAdded date\n```", "```cs\ninsert into People (NAME,DATEADDED) values (@Name,@DateAdded)\n```", "```cs\nusing System.Data.SqlClient;//commands and connections \n```", "```cs\nusing System.Data;\n```", "```cs\nsampLabel.Text = \"\";\n```", "```cs\nstring connString = @\"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=People;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\";\n```", "```cs\nusing (SqlConnection conn = new SqlConnection(connString))\n```", "```cs\ntry\n{\n\n}\ncatch (Exception ex) \n```", "```cs\nsampLabel.Text = $\"{ex.Message}\";\n```", "```cs\nSqlCommand cmd = new SqlCommand();\n```", "```cs\ncmd.CommandType = CommandType.StoredProcedure;\n```", "```cs\ncmd.CommandText = \"AddName\";\n```", "```cs\ncmd.Parameters.AddWithValue(\"@Name\", TextBox1.Text);\n```", "```cs\ncmd.Parameters.AddWithValue(\"@DateAdded\", DateTime.Parse(TextBox2.Text));\n```", "```cs\ncmd.Connection = conn;\n```", "```cs\nconn.Open();\n```", "```cs\ncmd.ExecuteNonQuery();\n```", "```cs\ncmd.CommandType = CommandType.Text;\n```", "```cs\ncmd.CommandText = \"select * from dbo.People\";\n```", "```cs\nusing (SqlDataReader reader = cmd.ExecuteReader())\n```", "```cs\nwhile(reader.Read())\n```", "```cs\nsampLabel.Text += $\"<br>{reader[0]}, {reader[1]}, {reader[2]}\";\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\nusing System.Data.SqlClient;//commands and connections\nusing System.Data;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        sampLabel.Text = \"\";\n        string connString = @\"Data Source=DESKTOP-4L6NSGO\\SQLEXPRESS;Initial Catalog=People;Integrated Security=True;Connect Timeout=15;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\";\n        //put conn in a using so it can be properly closed and disposed of\n        using (SqlConnection conn = new SqlConnection(connString))\n        {\n            try\n            {\n                //make sql command\n                SqlCommand cmd = new SqlCommand();\n                //specify type\n                cmd.CommandType = CommandType.StoredProcedure;\n                //write name of stored procedure inside SQL Server as  \n                //the name here\n                cmd.CommandText = \"AddName\";\n                //read the field box 1, and pass in through @Name\n                cmd.Parameters.AddWithValue(\"@Name\", TextBox1.Text);\n                //pass in date through @DateAdded\n                cmd.Parameters.AddWithValue(\"@DateAdded\", \n                DateTime.Parse(TextBox2.Text));\n                //set connection property of command object\n                cmd.Connection = conn;\n                //open connection\n                conn.Open();\n                //execute the stored procedure\n                cmd.ExecuteNonQuery();\n                //change command type to just plain text\n                cmd.CommandType = CommandType.Text;\n                //write a simple SQL select statement\n                cmd.CommandText = \"select * from dbo.People\";\n                //execute reader\n                using (SqlDataReader reader = cmd.ExecuteReader())\n                {\n                    //Read() returns true while it can read\n                    while(reader.Read())\n                    {\n                        //reader[0] means get first column, \n                        //reader uses an indexer to do this\n                        sampLabel.Text += $\"<br>{reader[0]}, {reader[1]}, {reader[2]}\";\n                    }\n                }\n            }\n            catch(Exception ex)\n            {\n                sampLabel.Text = $\"{ex.Message}\";\n            }\n        }\n    }\n}\n```"]