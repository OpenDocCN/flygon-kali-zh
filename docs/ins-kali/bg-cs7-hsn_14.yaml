- en: Summarizing Results with Grouping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用分组总结结果
- en: In this chapter, we will talk about using LINQ to group related results. Grouping
    is a fundamental thing that you do in databases to categorize results.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论使用LINQ对相关结果进行分组。分组是在数据库中对结果进行分类的基本操作。
- en: Adding a Show Results button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加一个显示结果按钮
- en: 'Bring up a project. First, we will put a button in the HTML that says Show
    Results; to do this, place a button below the line beginning with `<form id=....`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目。首先，我们将在HTML中放置一个按钮，上面写着“显示结果”；要做到这一点，在以“<form id=....”开头的行下面放置一个按钮。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, switch to the Design view and double-click on the Show Results button.
    This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The relevant
    portion of the starting code for this project should look like *Figure 14.9.1*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到设计视图，并双击“显示结果”按钮。这将带我们进入“Default.aspx.cs”。删除“Page_Load”块。这个项目的起始代码的相关部分应该看起来像*图14.9.1*：
- en: '![](img/6c6355aa-197a-459d-9444-35fa84767067.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c6355aa-197a-459d-9444-35fa84767067.png)'
- en: 'Figure 14.9.1: The starting code section for this project'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9.1：这个项目的起始代码部分
- en: Adding namespaces
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命名空间
- en: 'First, we need to add a couple of namespaces. To do this, enter the following
    under `using System` near the top of the file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加一些命名空间。要做到这一点，在文件顶部的“using System”下面输入以下内容：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the student class and defining fields
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建学生类并定义字段
- en: 'Next, we will make a class called `Student`. Above the line beginning with
    `public partial class _Default...`, enter the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个名为“Student”的类。在以“public partial class _Default...”开头的行之上输入以下内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, to define fields, enter the following between a set of curly braces below
    this line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要定义字段，在这一行下面的一对大括号之间输入以下内容：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, little properties here, and then let''s add one more. Enter the following
    below this line:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些属性，然后让我们再添加一个。在这一行下面输入以下内容：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `List<int>` is for the grades of the students, and let's name it `Grades`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，“List<int>”是学生的成绩，让我们称之为“Grades”。
- en: Making a list of students
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作学生名单
- en: 'Now, in the next stage, we will make a list of students. To do this, start
    by entering the following between the set of curly braces after the line that
    begins with `protected void Button1_Click...`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一个阶段，我们将制作一个学生名单。要做到这一点，首先在以“protected void Button1_Click...”开头的行之后的一对大括号之间输入以下内容：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, `students` is the name of the list. We then have a new list of students.
    Next, to initialize the list, we''ll place all of the new students between a set
    of curly braces below this line, starting as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，“students”是列表的名称。然后我们有一个新的学生列表。接下来，为了初始化列表，我们将把所有新学生放在这一行下面的一对大括号之间，开始如下：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding line, after `new Student`, you place all of the information
    for each student individually within a set of curly braces. First, you need to
    define the value of `Name`, so you set that equal to `Smith`, `John` for example,
    insert a comma and then put in `Grades` of John in a new list of integers, setting
    those values to `78`, `98`, `67`, and `87`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一行的“new Student”之后，你需要在一对大括号中分别放入每个学生的所有信息。首先，你需要定义“Name”的值，所以你将其设置为“Smith”，例如，“John”，插入一个逗号，然后在一个新的整数列表中放入John的“Grades”，将这些值设置为“78”，“98”，“67”和“87”。
- en: 'Next, we need to repeat this a couple of times for other the students; so,
    copy this line and paste it below. Edit the line to change the value of `Name`
    variable to `Adams`, `Amy`, and the grades to `91`,`99`,`89`, and `93`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为其他学生重复几次这个过程；所以，复制这一行，然后粘贴到下面。编辑这一行，将“Name”变量的值更改为“Adams”，“Amy”，然后将成绩更改为“91”，“99”，“89”和“93”：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This level of coding is very practical and realistic. Having done coding for
    five years, I can tell you that things are always far more interesting and more
    challenging.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种编码水平非常实用和现实。在编码了五年之后，我可以告诉你，事情总是更有趣和更具挑战性。
- en: 'Now, repeat this process one more time. Copy the preceding line and paste it
    below. Edit the line to change the value of `Name` variable to `Smith`, `Mary`,
    and the grades to `89`, `87`, `84`, and `88`. Be sure to insert a closed curly
    brace and a semicolon on the next line following the last `new Student` class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再重复一次这个过程。复制前面的行，然后粘贴到下面。编辑这一行，将“Name”变量的值更改为“Smith”，“Mary”，然后将成绩更改为“89”，“87”，“84”和“88”。确保在最后一个“new
    Student”类的下一行插入一个闭合的大括号和一个分号：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Grouping names
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分组名称
- en: Again, because we want to group, for example, by the last name and the first
    name, that's why I have used two identical last names. We will display the results
    nicely grouped by the last name; that is, by the first letter of the last name
    and then by the first name.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，因为我们想要按姓和名分组，所以我使用了两个相同的姓。我们将以姓的首字母和名字的顺序进行分组显示结果。
- en: 'Next, we will write our LINQ query to accomplish the grouping. Again, this
    could be done in a much more sophisticated way, but is a relatively easy example.
    So, below the closed curly brace and semicolon on the line following the last
    `new Student` class in the list, enter the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写LINQ查询来完成分组。同样，这可以以更复杂的方式完成，但这是一个相对简单的例子。所以，在列表中最后一个“new Student”类的下一行输入以下内容：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember, `groupsByFirstLetters` indicates the first letter of the last name.
    So, to write the query, you say `fromstudent` in `students`, and then on the next
    line you `group` students by `student.Name`. Because `Name` is a string, you can
    extract the first character by using square brackets and then getting the value
    at index `0` in the string. That's why you can write that. Otherwise, it would
    seem a little mysterious.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，“groupsByFirstLetters”表示姓的第一个字母。所以，要编写查询，你说“fromstudent”在“students”中，然后在下一行你“group”学生按“student.Name”分组。因为“Name”是一个字符串，你可以通过使用方括号提取第一个字符，然后在字符串中获取索引为“0”的值。这就是你可以写的原因。否则，它会显得有点神秘。
- en: Displaying the grouped results
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示分组结果
- en: 'Now, to display the results in a grouped fashion, you have to use nested `foreach`
    loops. So, enter the following next:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要以分组的方式显示结果，你必须使用嵌套的“foreach”循环。所以，接下来输入以下内容：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, it gets a little more interesting. If you hover your mouse over `var`
    momentarily, it tells you what `var` represents. It says, *it's a Grouping of
    characters and students. It represents a collection of objects that have a common
    key*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，情况变得更有趣。如果你将鼠标悬停在`var`上，它会告诉你`var`代表什么。它说，*它是一个字符和学生的分组。它代表具有共同键的对象集合*。
- en: 'Now, we can make use of it as follows. Enter the following between a set of
    curly braces underneath the preceding line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以按以下方式使用它。在前一行下面的一对大括号之间输入以下内容：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First we want to display the key, meaning the first letter of each last name,
    and then everything will be summarized under the first letter of that last name.
    So, we say `studentGroup.Key`. There's a property called `Key`, which is the key
    to the grouping, for each group. Remember that here we are grouping by the first
    letter of the last name. So, the key is that quantity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想显示键，也就是每个姓氏的第一个字母，然后所有内容将在该姓氏的第一个字母下进行总结。所以，我们说`studentGroup.Key`。这里有一个叫做`Key`的属性，它是每个组的分组键。请记住，这里我们是按姓氏的第一个字母进行分组。所以，键就是那个数量。
- en: 'Next, once you fix the first letter within that group, there are several students
    usually or several items, correct? So, now you have to display those items individually.
    Enter the following next:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，一旦你修复了该组内的第一个字母，通常会有几个学生或几个项目，对吧？所以，现在你需要逐个显示这些项目。在下面输入以下内容：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice something here about the nesting of the `foreach` loops. Do you see how
    in the `foreach (var studentGroup in groupsByFirstLetters)` line, the outer `for`
    loop gets the `studentGroup` variable, and then the key of that group is displayed
    by the `sampLabel.Text += $"<br>{studentGroup.Key}"` line? Well, next you'll go
    through the students inside of each of these groups. That's why in the next stage,
    if you hover your mouse over `var` in the preceding line, you see that it says,
    `student st` in `studentGroup`. So, that's the breakdown.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意一下关于`foreach`循环嵌套的情况。你看到了吗，在`foreach (var studentGroup in groupsByFirstLetters)`这一行中，外部的`for`循环获取了`studentGroup`变量，然后该组的键通过`sampLabel.Text
    += $"<br>{studentGroup.Key}"`这一行显示出来了？接下来，你将遍历每个组内的学生。这就是为什么在下一阶段，如果你将鼠标悬停在前一行的`var`上，你会看到它显示`student
    st`在`studentGroup`中。这就是细节。
- en: 'Next, to display it, enter the following within a set of curly braces under
    the preceding `foreach` line:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，为了显示它，输入以下内容在前面`foreach`行的大括号中： '
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is the heart of it. Now remember, we started with a class called `Student`.
    Then we have a list of students. Note that in the list of students, you can also
    use a syntax that says name of the property and then the value of property without
    the parentheses. You can just use curly braces to make the objects directly inside
    the definition of the list of students.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是核心。现在记住，我们从一个叫做`Student`的类开始。然后我们有一个学生列表。请注意，在学生列表中，你也可以使用一种语法，即属性的名称，然后是属性的值，不需要括号。你可以直接使用大括号在学生列表的定义中创建对象。
- en: The block beginning with `var groupsByFirstLetters...` groups things for us.
    Then we need that outer loop, `foreach (var studentGroup...`, to display the key
    to each group. Then the inner `foreach` loop, `foreach (var st in studentGroup)`,
    displays the students within that group. So, the two loops are needed, and they
    serve different purposes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以`var groupsByFirstLetters...`开头的代码块为我们分组。然后我们需要外部循环`foreach (var studentGroup...`来显示每个组的键。然后内部的`foreach`循环`foreach
    (var st in studentGroup)`显示该组内的学生。所以，这两个循环是必需的，它们有不同的作用。
- en: 'Now crank this up in your browser, and take a look at the results. Click on
    the Show Results button. As you can see, in *Figure 14.9.2*, you have the letter
    S, which is the key for the first group and within that group you have Smith,
    John and then Smith, Mary. Next, you have the letter A, which is the key for the
    second group, and within that you have Adams, Amy:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中运行一下，看看结果。点击“显示结果”按钮。如你所见，在*图14.9.2*中，你有字母S，这是第一组的键，组内有Smith, John和Smith,
    Mary。接下来，你有字母A，这是第二组的键，组内有Adams, Amy：
- en: '![](img/7292361c-c65f-4144-b6a9-04b4b65e14e3.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7292361c-c65f-4144-b6a9-04b4b65e14e3.png)'
- en: 'Figure 14.9.2: The results of running the program for this chapter'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9.2：运行本章程序的结果
- en: Of course, this can be sorted and all kinds of other things can be done. However,
    these are just the basics. So, you see what is doable here; many much more sophisticated
    things are possible.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些可以进行排序，还可以做各种其他操作。但这些只是基础知识。所以，你看到这里可以做什么；还有许多更复杂的事情是可能的。
- en: Chapter review
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释在内的本章`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we talked about using LINQ to group related results. You created
    a student class and defined fields, made a list of students, grouped names, and
    finally, displayed the grouped results.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了使用LINQ对相关结果进行分组。你创建了一个学生类并定义了字段，创建了一个学生列表，对名字进行了分组，最后显示了分组结果。
- en: In the next chapter, you will learn how to use LINQ to write queries that join
    different result sets or different data sets.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用LINQ编写查询，以连接不同的结果集或不同的数据集。
