["```js\n<!doctype html>\n<html>\n\n<head>\n  <title>My great page</title>\n</head>\n\n<body>\n  <button>Click here</button>\n</body>\n\n</html>\n```", "```js\ndocument.querySelector('html').addEventListener('click', logClick, true)\ndocument.querySelector('body').addEventListener('click', logClick)\ndocument.querySelector('button').addEventListener('click', logClick)\n```", "```js\ndocument.querySelector('button').addEventListener('mousemove', (e) => {\n  document.querySelector('#x').value = e.x\n  document.querySelector('#y').value = e.y\n})\n```", "```js\n01: const container = document.querySelector('.container') // set \n    .container to a variable so we don't need to find it every time \n     we click\n02: let noteCount = 1 // inital value\n03: const messageBox = document.querySelector('#messageBox')\n04: \n05: // access our button and assign a click handler\n06: document.querySelector('.box-creator-button').addEventListener(\n    'click', () => {\n07:   // create our DOM element\n08:   const stickyNote = document.createElement('div')\n09: \n10:   // set our class name\n11:   stickyNote.className = 'box'\n12: \n13:   // get our other DOM elements\n14:   const stickyMessage = document.querySelector('.box-color-note')\n15:   const stickyColor = document.querySelector('.box-color-input')\n16: \n17:   // get our variables\n18:   const message = stickyMessage.value\n19:   const color = stickyColor.style.backgroundColor\n20: \n21:   // blank out the input fields\n22:   stickyMessage.value = stickyColor.value = ''\n23:   stickyColor.style.backgroundColor = '#fff'\n24: \n25:   // define the attributes\n26:   stickyNote.innerHTML = `${noteCount++}. ${message}`\n27:   stickyNote.style.backgroundColor = color\n28: \n29:   stickyNote.addEventListener('click', (e) => {\n30:     document.querySelector('#color').innerHTML = \n        e.target.style.backgroundColor\n31:     document.querySelector('#message').innerHTML = e.target.innerHTML\n32: \n33:     messageBox.style.visibility = 'visible'\n34: \n35:     document.querySelector('#delete').addEventListener('click', (event) => {\n36:       messageBox.style.visibility = 'hidden'\n37:       e.target.remove()\n38:     })\n39:   })\n40: \n41:   // add the sticky\n42:   container.appendChild(stickyNote)\n43: })\n44: \n45: document.querySelector('#close').addEventListener('click', (e) => {\n46:   messageBox.style.visibility = 'hidden'\n47: })\n```", "```js\ncontainer.addEventListener('click', (e) => {\n if (e.target.className === 'box') {\n   document.querySelector('#color').innerHTML = \n    e.target.style.backgroundColor\n   document.querySelector('#message').innerHTML = e.target.innerHTML\n   messageBox.style.visibility = 'visible'\n   document.querySelector('#delete').addEventListener('click', (event) => {\n     messageBox.style.visibility = 'hidden'\n     e.target.remove()\n   })\n }\n})\n```", "```js\nlet target = {}\n\n...\n\ncontainer.addEventListener('click', (e) => {\n  if (e.target.className === 'box') {\n    document.querySelector('#color').innerHTML = \n     e.target.style.backgroundColor\n    document.querySelector('#message').innerHTML = e.target.innerHTML\n    messageBox.style.visibility = 'visible'\n    target = e.target\n  }\n})\n\ndocument.querySelector('#delete').addEventListener('click', (event) => {\n  messageBox.style.visibility = 'hidden'\n  target.remove()\n})\n```", "```js\nclass Poke {\n  ...\n}\n```", "```js\nconstructor() {\n    /**\n      * Use the constructor as you would in other languages: Set up your \n        instance variables and globals\n      */\n  }\n```", "```js\nchoosePokemon(url, parent) {\n\u2026\nconst moves = data.moves.filter((move) => {\n  const mymoves = move.version_group_details.filter((level) => {\n    return level.level_learned_at === 1\n  })\n  return mymoves.length > 0\n })\n}\n```", "```js\nset hp(event) {\n  ...\n  if (event.hp) {\n    this[event.player].hp = event.hp\n  }\n\n  if (event.damage) {\n    this[event.player].hp -= event.damage\n  }\n  const e = new CustomEvent(\"hp\", {\n    detail: {\n      player: event.player,\n      hp: this[event.player].hp\n    }\n  })\n  document.dispatchEvent(e)\n}\n```", "```js\ntoggleLoader() {\n  /**\n    * As this is visual logic, here's the complete code for this function\n    */\n  if (this.loader.style.visibility === 'visible' || \n  this.loader.style.visibility === '') {\n    this.loader.style.visibility = 'hidden'\n  } else {\n    this.loader.style.visibility = 'visible'\n  }\n}\n```", "```js\ngetPokemon() {\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=1000')\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        const pokeSelector = document.querySelector('.pokeSelector.main')\n\n        data.results.forEach((poke) => {\n          const option = document.createElement('option')\n          option.value = poke.url\n          option.innerHTML = poke.name\n          pokeSelector.appendChild(option)\n        })\n\n        const selector = pokeSelector.cloneNode(true)\n        document.querySelector('.pokeSelector.clone').replaceWith(selector)\n\n        this.toggleLoader()\n\n        document.querySelector('#Player1').style.visibility = 'visible'\n        document.querySelector('#Player2').style.visibility = 'visible'\n      })\n  }\n```", "```js\nfetch('/profile')\n  .then(data => {\n    if (data.status === 200) {\n      return data.json()\n    }\n    throw new Error(\"Unable to get Profile.\")\n  })\n  .then(json => {\n    console.log(json)\n  })\n  .catch(error => {\n    alert(error)\n  })\n```", "```js\nclass SWAPI {\n  constructor() {\n    this.loader = document.querySelector('#loader')\n    this.people = []\n\n    document.querySelector('.go').addEventListener('click', (e) => {\n      this.getPerson(document.querySelector('#peopleSelector').value)\n    })\n  }\n```", "```js\n  fetchThis(url, arr, resolve, reject) {\n    fetch(url)\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        arr = [...arr, ...data.results]\n```", "```js\n        if (data.next !== null) {\n          this.fetchThis(data.next, arr, resolve, reject)\n        } else {\n          resolve(arr)\n        }\n```", "```js\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n```", "```js\n  }\n\n  getPeople() {\n    new Promise((resolve, reject) => {\n        this.fetchThis('https://swapi.dev/api/people', this.people, \n        resolve, reject)\n      })\n      .then((response) => {\n        this.people = response\n        const peopleSelector = document.querySelector('#peopleSelector')\n\n        this.people.forEach((person) => {\n          const option = document.createElement('option')\n          option.value = person.url\n          option.innerHTML = person.name\n          peopleSelector.appendChild(option)\n        })\n        this.toggleLoader()\n        document.querySelector('#people').style.visibility = 'visible'\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n```", "```js\n  getPerson(url) {\n    this.toggleLoader()\n    fetch(url)\n      .then((response) => {\n        return response.json()\n      })\n      .then((json) => {\n        document.querySelector('#person').style.visibility = 'visible'\n        document.querySelector('#person h2').innerHTML = json.name\n        this.toggleLoader()\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n```", "```js\n  toggleLoader() {\n    if (this.loader.style.visibility === 'visible' ||\n    this.loader.style.visibility === '') {\n      this.loader.style.visibility = 'hidden'\n    } else {\n      this.loader.style.visibility = 'visible'\n    }\n  }\n}\n```", "```js\nconst s = new SWAPI().getPeople()\n```", "```js\ncontainer.addEventListener('click', (e) => {\n  if (e.target.className === 'box') {\n    document.querySelector('#color').innerHTML = \n     e.target.style.backgroundColor\n    document.querySelector('#message').innerHTML = e.target.innerHTML\n    messageBox.style.visibility = 'visible'\n    document.querySelector('#delete').addEventListener('click', (event) => {\n      messageBox.style.visibility = 'hidden'\n      e.target.remove()\n    })\n  }\n})\n```"]