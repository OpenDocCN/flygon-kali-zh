["```cs\nParallel.For(1, 1000, i =>\n       {\n           Thread.Sleep(100);\n           _counter++;\n       });\n       Console.WriteLine($\"Value for counter should be 999 and \n        is {_counter}\");\n```", "```cs\nParallel.For(1, 1000, i =>\n       {\n           Thread.Sleep(100);\n           Interlocked.Increment(ref _counter);\n       });\n       Console.WriteLine($\"Value for counter should be 999 and \n        is {_counter}\");\n```", "```cs\n //_counter becomes 1\nInterlocked.Increment(ref _counter);\n// _counter becomes 0\nInterlocked.Decrement(ref _counter);\n// Add: _counter becomes 2 \nInterlocked.Add(ref _counter, 2);\n//Subtract: _counter becomes 0\nInterlocked.Add(ref _counter, -2);\n// Reads 64 bit field \nConsole.WriteLine(Interlocked.Read(ref _counter)); \n// Swaps _counter value with 10 \nConsole.WriteLine(Interlocked.Exchange(ref _counter, 10));\n//Checks if _counter is 10 and if yes replace with 100 \nConsole.WriteLine(Interlocked.CompareExchange(ref _counter, 100, 10)); \n// _counter becomes 100\n```", "```cs\na=b;\n```", "```cs\nc=1;\n```", "```cs\na = b;\nc = 1;\n```", "```cs\nc = 1;\na = b;\n```", "```cs\nstatic int a = 1, b = 2, c = 0;\nprivate static void BarrierUsingTheadBarrier()\n{\n    b = c;\n    Thread.MemoryBarrier();\n    a = 1;\n}\n```", "```cs\nprivate static void BarrierUsingInterlockedBarrier()\n       {\n           b = c;\n           Interlocked.MemoryBarrier();\n           a = 1;\n       }\n```", "```cs\nprivate static void BarrierUsingInterlockedProcessWideBarrier()\n{\n    b = c;\n    Interlocked.MemoryBarrierProcessWide();\n    a = 1;\n}\n```", "```cs\nwhile(!done);\n```", "```cs\nvar range = Enumerable.Range(1, 1000);\nStopwatch watch = Stopwatch.StartNew();\n       for (int i = 0; i < range.Count(); i++)\n       {\n           Thread.Sleep(10);\n           File.AppendAllText(\"test.txt\", i.ToString());\n       }\n       watch.Stop();\n       Console.WriteLine($\"Total time to write file is \n        {watch.ElapsedMilliseconds}\");\n```", "```cs\nrange.AsParallel().AsOrdered().ForAll(i =>\n{\n    Thread.Sleep(10);\n    File.AppendAllText (\"test.txt\", i.ToString());\n});\n```", "```cs\nstatic object _locker = new object ();\n```", "```cs\nrange.AsParallel().AsOrdered().ForAll(i =>\n       {\n           lock (_locker)\n           {\n               Thread.Sleep(10);\n               File.WriteAllText(\"test.txt\", i.ToString());\n           }\n       });\n```", "```cs\nrange.AsParallel().AsOrdered().ForAll(i =>\n       {\n           Thread.Sleep(10);\n           lock (_locker)\n           {\n               File.WriteAllText(\"test.txt\", i.ToString());\n           }\n       });\n```", "```cs\nrange.AsParallel().AsOrdered().ForAll(i =>\n{\n    Thread.Sleep(10);\n    Monitor.Enter(_locker);\n    try\n    {\n        File.WriteAllText(\"test.txt\", i.ToString());\n    }\n    finally\n    {\n        Monitor.Exit(_locker);\n    }\n});\n```", "```cs\nprivate static Mutex mutex = new Mutex();\n```", "```cs\nrange.AsParallel().AsOrdered().ForAll(i =>\n       {\n           Thread.Sleep(10);\n           mutex.WaitOne();\n           File.AppendAllText(\"test.txt\", i.ToString());\n           mutex.ReleaseMutex(); \n       });\n```", "```cs\nprivate static Mutex namedMutex = new Mutex(false,\"ShaktiSinghTanwar\");\n```", "```cs\nnamedMutex.WaitOne(3000);\n```", "```cs\nprivate static void DummyService(int i)\n       {\n           Thread.Sleep(1000);\n       }\n```", "```cs\nSemaphore semaphore = new Semaphore(3,3);\n```", "```cs\n   range.AsParallel().AsOrdered().ForAll(i =>\n            {\n                semaphore.WaitOne();\n                Console.WriteLine($\"Index {i} making service call using \n                 Task {Task.CurrentId}\" );\n                //Simulate Http call\n                CallService(i);\n                Console.WriteLine($\"Index {i} releasing semaphore using \n                  Task {Task.CurrentId}\");\n                semaphore.Release();\n            });\n```", "```cs\nSemaphore semaphore = new Semaphore(1,10);\n```", "```cs\nSemaphore semaphore = new Semaphore(1,10,\u201dGlobalsemaphore\u201d);\n```", "```cs\nint result = 0;\nThread childThread = new Thread(() =>\n{\n    Thread.Sleep(5000);\n    result = 10;\n});\nchildThread.Start();\nConsole.WriteLine($\"Result is {result}\");\n```", "```cs\nint result = 0;\nThread childThread = new Thread(() =>\n{\n    Thread.Sleep(5000);\n    result = 10;\n});\nchildThread.Start();\nchildThread.Join();\nConsole.WriteLine($\"Result is {result}\");\n```", "```cs\nAutoResetEvent autoResetEvent = new AutoResetEvent(false);\n```", "```cs\nTask signallingTask = Task.Factory.StartNew(() => {\n    for (int i = 0; i < 10; i++)\n    {\n        Thread.Sleep(1000);\n        autoResetEvent.Set();\n    }\n});\n```", "```cs\nint sum = 0;\n```", "```cs\n Parallel.For(1, 10, (i) => {\n     Console.WriteLine($\"Task with id {Task.CurrentId} waiting for \n      signal to enter\");\n     autoResetEvent.WaitOne();\n     Console.WriteLine($\"Task with id {Task.CurrentId} received \n      signal to enter\");\n     sum += i;\n });\n```", "```cs\nManualResetEvent manualResetEvent = new ManualResetEvent(false);\n```", "```cs\nTask signalOffTask = Task.Factory.StartNew(() => {\n           while (true)\n           {\n               Thread.Sleep(2000);\n               Console.WriteLine(\"Network is down\");\n               manualResetEvent.Reset();\n           }\n       });\n       Task signalOnTask = Task.Factory.StartNew(() => {\n           while (true)\n           {\n               Thread.Sleep(5000);\n               Console.WriteLine(\"Network is Up\");\n               manualResetEvent.Set();\n           }\n       });\n```", "```cs\nfor (int i = 0; i < 3; i++)\n       {\n           Parallel.For(0, 5, (j) => {\n               Console.WriteLine($\"Task with id {Task.CurrentId} waiting \n                for network to be up\");\n               manualResetEvent.WaitOne();\n               Console.WriteLine($\"Task with id {Task.CurrentId} making \n                service call\");\n               DummyServiceCall();\n           });\n           Thread.Sleep(2000);\n       }\n```", "```cs\npublic static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);\n```", "```cs\nstatic int _dataFromService1 = 0;\nstatic int _dataFromService2 = 0;\nprivate static void WaitAll()\n{\n    List<WaitHandle> waitHandles = new List<WaitHandle>\n       {\n            new AutoResetEvent(false),\n            new AutoResetEvent(false)\n       };\n    ThreadPool.QueueUserWorkItem(new WaitCallback\n     (FetchDataFromService1), waitHandles.First());\n    ThreadPool.QueueUserWorkItem(new WaitCallback\n     (FetchDataFromService2), waitHandles.Last());\n    //Waits for all the threads (waitHandles) to call the .Set() \n    //method \n    //i.e. wait for data to be returned from both service\n    WaitHandle.WaitAll(waitHandles.ToArray());\n    Console.WriteLine($\"The Sum is \n     {_dataFromService1 + _dataFromService2}\");\n}\nprivate static void FetchDataFromService1(object state)\n{\n    Thread.Sleep(1000);\n    _dataFromService1 = 890;\n    var autoResetEvent = state as AutoResetEvent;\n    autoResetEvent.Set();\n}\nprivate static void FetchDataFromService2(object state)\n{\n    Thread.Sleep(1000);\n    _dataFromService2 = 3;\n    var autoResetEvent = state as AutoResetEvent;\n    autoResetEvent.Set();\n}\n```", "```cs\npublic static int WaitAny (System.Threading.WaitHandle[] waitHandles);\n```", "```cs\n static int findIndex = -1;\n static string winnerAlgo = string.Empty; \n private static void BinarySearch(object state)\n {\n     dynamic data = state;\n     int[] x = data.Range;\n     int valueToFind = data.ItemToFind;\n     AutoResetEvent autoResetEvent = data.WaitHandle \n      as AutoResetEvent;\n     //Search for item using .NET framework built in Binary Search\n     int foundIndex = Array.BinarySearch(x, valueToFind);\n     //store the result globally\n     Interlocked.CompareExchange(ref findIndex, foundIndex, -1);\n     Interlocked.CompareExchange(ref winnerAlgo, \"BinarySearch\", \n      string.Empty);\n     //Signal event\n     autoResetEvent.Set();\n }\n\n public static void LinearSearch( object state)\n {\n     dynamic data = state;\n     int[] x = data.Range;\n     int valueToFind = data.ItemToFind;\n     AutoResetEvent autoResetEvent = data.WaitHandle as AutoResetEvent;\n     int foundIndex = -1;\n     //Search for item linearly using for loop\n     for (int i = 0; i < x.Length; i++)\n     {\n         if (valueToFind == x[i])\n         {\n             foundIndex = i;\n         }\n     }\n     //store the result globally\n     Interlocked.CompareExchange(ref findIndex, foundIndex, -1); \n     Interlocked.CompareExchange(ref winnerAlgo, \"LinearSearch\", \n       string.Empty); \n     //Signal event\n     autoResetEvent.Set();\n }\n\n```", "```cs\n private static void AlgoSolverWaitAny()\n {\n     WaitHandle[] waitHandles = new WaitHandle[]\n     {\n     new AutoResetEvent(false),\n     new AutoResetEvent(false)\n     };\n     var itemToSearch = 15000;\n     var range = Enumerable.Range(1, 100000).ToArray(); \n     ThreadPool.QueueUserWorkItem(new WaitCallback    \n      (LinearSearch),new {Range = range,ItemToFind =           \n      itemToSearch, WaitHandle= waitHandles[0] });\n     ThreadPool.QueueUserWorkItem(new WaitCallback(BinarySearch), \n      new { Range = range, ItemToFind =         \n      itemToSearch, WaitHandle = waitHandles[1] });\n     WaitHandle.WaitAny(waitHandles);\n     Console.WriteLine($\"Item found at index {findIndex} and faster \n      algo is {winnerAlgo}\" );\n }\n```", "```cs\npublic static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);\n```", "```cs\nstatic ReaderWriterLockSlim _readerWriterLockSlim = new ReaderWriterLockSlim();\nstatic List<int> _list = new List<int>();\nprivate static void ReaderWriteLockSlim()\n{\n    Task writerTask = Task.Factory.StartNew( WriterTask);\n    for (int i = 0; i < 3; i++)\n    {\n        Task readerTask = Task.Factory.StartNew(ReaderTask);\n    }\n}\nstatic void WriterTask()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        try \n            {\n            _readerWriterLockSlim.EnterWriteLock();\n            Console.WriteLine($\"Entered WriteLock on Task {Task.CurrentId}\");\n            int random = new Random().Next(1, 10);\n            _list.Add(random);\n            Console.WriteLine($\"Added {random} to list on Task {Task.CurrentId}\");\n            Console.WriteLine($\"Exiting WriteLock on Task {Task.CurrentId}\");\n            }\n        finally\n            {\n             _readerWriterLockSlim.ExitWriteLock();\n            }\n\n        Thread.Sleep(1000);\n    }\n}\nstatic void ReaderTask()\n{\n    for (int i = 0; i < 2; i++)\n    {\n       _readerWriterLockSlim.EnterReadLock();\n       Console.WriteLine($\"Entered ReadLock on Task {Task.CurrentId}\"); \n       Console.WriteLine($\"Items: {_list.Select(j=>j.ToString ()).Aggregate((a, b) => \n       a + \",\" + b)} on Task {Task.CurrentId}\"); \n       Console.WriteLine($\"Exiting ReadLock on Task {Task.CurrentId}\"); \n        _readerWriterLockSlim.ExitReadLock();\n        Thread.Sleep(1000);\n    }\n}\n```", "```cs\n private static void ThrottlerUsingSemaphoreSlim()\n        {\n            var range = Enumerable.Range(1, 12);\n            SemaphoreSlim semaphore = new SemaphoreSlim(3, 3);\n            range.AsParallel().AsOrdered().ForAll(i =>\n            {\n                try\n                {\n                    semaphore.Wait();\n                    Console.WriteLine($\"Index {i} making service call using Task {Task.CurrentId}\");\n                    //Simulate Http call\n                    CallService(i);\n                    Console.WriteLine($\"Index {i} releasing semaphore using Task {Task.CurrentId}\");\n                }\n                finally\n                {\n                    semaphore.Release();\n                }\n            });\n        }\n        private static void CallService(int i)\n        {\n            Thread.Sleep(1000);\n        }\n```", "```cs\nManualResetEventSlim manualResetEvent = new ManualResetEventSlim(false);\n```", "```cs\nstatic Barrier serviceBarrier = new Barrier(5);\n```", "```cs\nstatic CountdownEvent serviceHost1CountdownEvent = new CountdownEvent(6);\nstatic CountdownEvent serviceHost2CountdownEvent = new CountdownEvent(6);\n```", "```cs\nstatic CountdownEvent finishCountdownEvent = new CountdownEvent(5);\n```", "```cs\n     Task serviceManager = Task.Factory.StartNew(() =>\n            {\n                //Block until service name is set by any of thread\n                while (string.IsNullOrEmpty(_serviceName))\n                    Thread.Sleep(1000);\n                string serviceName = _serviceName;\n                HostService(serviceName);\n                //Now signal other threads to proceed making calls to service1\n                serviceHost1CountdownEvent.Signal();\n                //Wait for worker tasks to finish service1 calls                                    \n                serviceHost1CountdownEvent.Wait();\n                //Block until service name is set by any of thread\n                while (_serviceName != \"Service2\")\n                    Thread.Sleep(1000);\n                Console.WriteLine($\"All tasks completed for service {serviceName}.\");\n                //Close current service and start the other service\n                CloseService(serviceName);\n                HostService(_serviceName);\n                //Now signal other threads to proceed making calls to service2\n                serviceHost2CountdownEvent.Signal();\n                serviceHost2CountdownEvent.Wait();\n                //Wait for worker tasks to finish service2 calls\n                finishCountdownEvent.Wait();\n                CloseService(_serviceName);\n                Console.WriteLine($\"All tasks completed for service {_serviceName}.\");\n            });\n```", "```cs\n        private static void GetDataFromService1And2(int j)\n        {\n            _serviceName = \"Service1\";\n            serviceHost1CountdownEvent.Signal();\n            Console.WriteLine($\"Task with id {Task.CurrentId} signalled countdown event and waiting for   \n            service to start\");\n            //Waiting for service to start\n            serviceHost1CountdownEvent.Wait();\n            Console.WriteLine($\"Task with id {Task.CurrentId} fetching data from service \");\n            serviceBarrier.SignalAndWait();\n            //change servicename\n            _serviceName = \"Service2\";\n            //Signal Countdown event\n            serviceHost2CountdownEvent.Signal();\n            Console.WriteLine($\"Task with id {Task.CurrentId} signalled countdown event and waiting for \n            service to start\");\n            serviceHost2CountdownEvent.Wait();\n            Console.WriteLine($\"Task with id {Task.CurrentId} fetching data from service \");\n            serviceBarrier.SignalAndWait();\n            //Signal Countdown event\n            finishCountdownEvent.Signal();\n        }\n    //Finally make worker tasks\n     for (int i = 0; i < 5; ++i)\n            {\n                int j = i;\n                tasks[j] = Task.Factory.StartNew(() =>\n                {\n                    GetDataFromService1And2(j);\n                });\n            }\n            Task.WaitAll(tasks);\n            Console.WriteLine(\"Fetch completed\");\n```", "```cs\nvar spin = new SpinWait();\n```", "```cs\nspin.SpinOnce();\n```", "```cs\n static SpinLock _spinLock = new SpinLock();\n```", "```cs\n static List<int> _itemsList = new List<int>();\n        private static void SpinLock(int number)\n        {\n            bool lockTaken = false;\n            try\n            {\n                Console.WriteLine($\"Task {Task.CurrentId} Waiting for lock\");                                \n _spinLock.Enter(ref lockTaken);                Console.WriteLine($\"Task {Task.CurrentId} Updating list\");\n                _itemsList.Add(number);\n            }\n            finally\n            {\n                if (lockTaken)\n                {\n                    Console.WriteLine($\"Task {Task.CurrentId} Exiting Update\");\n                    _spinLock.Exit(false);\n                }\n            }\n        }\n```", "```cs\nParallel.For(1, 5, (i) => SpinLock(i));\n```"]