- en: Documenting Your Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录您的代码
- en: Documentation has a bad reputation. It is hard to find the motivation to write
    it, it's a nuisance to maintain, and our exposure to it over the years has convinced
    us that it is one of the driest and dullest methods of knowledge transfer. It
    doesn't have to be this way, though!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 文档有一个不好的名声。很难找到动力来写它，维护它是一种麻烦，多年来我们对它的接触使我们相信它是最枯燥的知识传递方法之一。然而，它不必这样！
- en: 'If we choose to focus entirely on the users, then our documentation can be
    simple and pleasant. To do this, we must first consider who the users of our documentation
    are. What do they want? Every user, whether a GUI end user or a fellow programmer,
    begins the journey of using our software with a task in mind. It''s our duty,
    both within the software and through its documentation, to enable them to perform
    their task with as little pain and confusion as possible. With this in mind, in
    this chapter we''ll explore what it might mean for us to construct such pain-free documentation.
    We''ll specifically be covering the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择完全关注用户，那么我们的文档可以简单而愉快。为此，我们必须首先考虑我们文档的用户是谁。他们想要什么？每个用户，无论是GUI最终用户还是其他程序员，都以某项任务为目标开始使用我们的软件。在软件和文档中，我们的责任是使他们能够尽可能少地感到痛苦和困惑地完成任务。考虑到这一点，在本章中，我们将探讨为我们构建无痛文档可能意味着什么。我们将具体涵盖以下内容：
- en: Aspects of clean documentation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰文档的方面
- en: Documentation is everywhere
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档无处不在
- en: Writing for non-technical audiences
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为非技术受众编写
- en: Aspects of clean documentation
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清晰文档的方面
- en: 'The purpose of documentation is to communicate **what a piece of software does**
    and **how to use it**. We can split the characteristics of clean documentation
    into four aspects: a clean piece of documentation communicates the **concept**
    of the software, provides a **specification** of its behaviors, and contains **instructions**
    for how to perform specific actions. And it does all of this with a focus on **usability**.
    By the end of this section, we will hopefully understand the vital importance
    of *the user* in the craft of building *clean* documentation.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的目的是传达**软件的功能**和**如何使用它**。我们可以将清晰文档的特点分为四个方面：清晰的文档传达了软件的**概念**，提供了其行为的**规范**，并包含了执行特定操作的**说明**。而且它所有这些都是以**可用性**为重点。通过本节的学习，我们希望能够理解在构建*清晰*文档时*用户*的重要性。
- en: Documentation is something most people don't think about a lot. It's usually
    an afterthought. My task in this chapter is to convince you that it can be, and
    should be, so much more than this. As we step into these *aspects,* forget what
    you know about documentation – start with a fresh canvas and see if you come away
    with revelations of your own.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是大多数人不太关心的东西。它通常是一个事后想法。我在本章的任务是说服您，它可以是，也应该是，远不止如此。当我们进入这些*方面*时，忘记您对文档的了解-从一张白纸开始，看看您是否能得出自己的启示。
- en: Concept
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念
- en: 'A clean piece of documentation will communicate the underlying *concept* of
    the software. It''ll do this by explaining what the software''s purpose is in
    a way that allows potential users to see how they might make use of it. This can
    be considered the educational part of documentation: setting out the terminology
    and paradigms that will allow the reader to easily comprehend the other parts
    of the documentation and the software it describes.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 清晰的文档将传达软件的基本*概念*。它将通过解释软件的目的的方式来做到这一点，以便潜在用户可以看到他们如何使用它。这可以被认为是文档的教育部分：阐明术语和范例，使读者能够轻松理解文档的其他部分和所描述的软件。
- en: 'To properly express the concepts of a piece of software, it''s necessary to
    step inside the shoes of your users, seeing things from their perspective and
    communicating with them on their terms:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确表达软件的概念，有必要站在用户的角度，从他们的角度看事情，并用他们的术语与他们交流：
- en: '**Determine your audience**: Who are they and what''s their general technical
    proficiency?'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定您的受众**：他们是谁，他们的技术熟练程度如何？'
- en: '**Determine their understanding of the problem domain**: How much do they already
    know about this specific software project, API, or code base?'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定他们对问题领域的理解**：他们对这个特定软件项目、API或代码库已经了解多少？'
- en: '**Determine the right the level of abstraction and best analogies**: How can
    you communicate in a way that makes sense to them and integrates well with their
    current knowledge?'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定正确的抽象级别和最佳类比**：如何以一种对他们有意义并与他们当前的知识融合良好的方式进行交流？'
- en: 'Writing good documentation is a process of considering the user and then crafting
    the appropriate abstractions for them. You''ll hopefully notice how incredibly
    similar this is to the process of crafting clean code. There are, in fact, very
    few differences. When building documentation, we are crafting a tool that the
    user can use to accomplish a specific set of tasks. It is our responsibility to
    craft it in such a way that users can easily accomplish their end goals without
    being overwhelmed by the sheer volume and complexity of the software:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的文档编写是一个考虑用户然后为他们精心打造适当抽象的过程。您会希望注意到这与编写清晰代码的过程非常相似。实际上，两者之间几乎没有什么区别。在构建文档时，我们正在打造一个用户可以用来完成一组特定任务的工具。我们有责任以一种用户可以轻松完成最终目标而不会被软件的庞大和复杂所压倒的方式来打造它：
- en: '![](assets/31c38081-6e7f-44bc-80e4-5343f122755d.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/31c38081-6e7f-44bc-80e4-5343f122755d.png)'
- en: 'Consider a project that has taken several weeks to complete. It is a **JavaScript**
    (**JS**) library called `SuperCoolTypeAnimator` that other programmers can use
    to create typeface transitions. It allows them to display to the user a block
    of text that is animated from one typeface to another (for example, from Helvetica
    to Times New Roman). It''s a rather complex code base that calculates these transitions
    manually. The depth of its complexity has meant that you, the programmer, have
    discovered far more about ligatures, serifs, and path interpolation than you ever
    thought possible. After months of being immersed in this increasingly deep problem
    domain, it is understandably challenging for you to share the perspective of a
    user who has not had your level of exposure. Thus the first draft of your documentation
    might start in the following way:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个花了几周时间完成的项目。这是一个名为`SuperCoolTypeAnimator`的**JavaScript**（**JS**）库，其他程序员可以使用它来创建字体转换。它允许他们向用户显示一块从一种字体动画到另一种字体（例如从Helvetica到Times
    New Roman）的文本。这是一个相当复杂的代码库，可以手动计算这些转换。其复杂性的深度意味着您作为程序员已经发现了远远超出您所能想象的关于连字、衬线和路径插值的知识。在数月的沉浸在这个日益深入的问题领域之后，您很可能难以理解没有您这种程度接触的用户的观点。因此，您的文档的第一稿可能会以以下方式开始：
- en: '*SuperCoolTypeAnimator is an SVG glyph animation utility that allows the creation
    and frame-by-frame manipulation of transitions between source glyphs and their
    respective target glyphs, calculating appropriate transitional anchors on the
    fly.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*SuperCoolTypeAnimator是一种SVG字形动画实用程序，允许创建和逐帧操纵源字形和其相应目标字形之间的过渡，并在飞行中计算适当的过渡锚点。*'
- en: 'Let''s compare that to the following alternative intro:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其与以下替代介绍进行比较：
- en: '*SuperCoolTypeAnimator is a JS library that allows you to animate small pieces
    of text from one typeface to another typeface with ease.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*SuperCoolTypeAnimator是一个JS库，可以让您轻松地将文本的小部分从一种字体动画到另一种字体。*'
- en: 'As introductions, the latter is far more widely understandable and will allow
    even non-expert users to immediately understand what the library does. The former
    introduction, while informative, may result in current and potential users feeling
    confused or alienated. The entire purpose of the software we build is to abstract
    away complexity, wrapping it up in a neat and simplified way. Belaboring our users
    with complexity should be done with regret and consideration: it is usually the
    *last* resort.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为介绍，后者更广泛地可理解，并且即使是非专家用户也能立即理解库的功能。前者的介绍虽然信息丰富，但可能会导致当前和潜在用户感到困惑或疏远。我们构建的软件的整个目的是为了将复杂性抽象化，以简洁和简化的方式呈现出来。给用户带来复杂性应该是一种令人遗憾和考虑的行为：这通常是*最后*的选择。
- en: The *concept* that we are attempting to communicate in our documentation concerns,
    above all, how our software can *help* the user. For them to understand how it
    can help them, we need to describe it in a way that meshes with their current
    understanding.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在文档中试图传达的*概念*，首先是关于我们的软件如何*帮助*用户。为了让他们理解它如何帮助他们，我们需要以符合他们当前理解的方式来描述它。
- en: Another factor highlighted by the two introductions is their usage of special
    terminology (such as *glyph* and *anchor*). The usage of such domain-specific
    terminology is a balancing act. If your users have a good understanding of the
    *typeface/font* problem domain, terms such as *glyph* and *typeface* may be appropriate.
    There is, arguably, a high likelihood that users interested in your library are
    also aware of such concepts. But the use of more nuanced terms such as *transitional
    anchors* may be a step too far. This is likely a term that you have used within
    your abstraction to describe a highly complex area of implementation. It is a
    useful term to you, and perhaps to anyone wishing to make changes to the library,
    but it is perhaps less useful to users of the library. Therefore, it would be
    wise to avoid it in our documentation's introduction.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 两种介绍突出的另一个因素是它们对特殊术语的使用（如*字形*和*锚点*）。使用这种领域特定的术语是一种平衡行为。如果您的用户对*字体*问题领域有很好的理解，那么*字形*和*字体*等术语可能是合适的。可以说，对您的库感兴趣的用户很可能也了解这些概念。但是，使用*过渡锚点*等更微妙的术语可能有点过头。这可能是您在抽象中使用的术语，用来描述高度复杂的实现领域。这对您来说是一个有用的术语，也许对于希望对库进行更改的任何人来说也是有用的，但对库的用户来说可能不那么有用。因此，在我们的文档介绍中最好避免使用它。
- en: Specification
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规范
- en: As well as providing a concept for the software, good documentation will also
    provide a *specification*, detailing the specific characteristics and behaviors
    of the interfaces provided by your software. This part of the documentation details
    the contract that the user or programmer can expect to have when using the software.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 好的文档除了为软件提供概念外，还将提供*规范*，详细说明软件提供的接口的特定特征和行为。文档的这一部分详细说明了用户或程序员在使用软件时可以期望的合同。
- en: 'The *specification* should ideally be the simplest part of the documentation
    to write, for the following reasons:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*规范*理想情况下应该是撰写文档中最简单的部分，原因如下：'
- en: '**It''s literally in the code**: The specification of behavior is contained
    within the code and its tests, usually making it quite simple to manually write
    up this information as documentation. However, if it is difficult to write, then
    that indicates an underlying complexity in your code and its interfaces that perhaps
    should be fixed as a priority.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它就在代码中**：行为规范包含在代码及其测试中，通常很容易手动将此信息编写为文档。但是，如果编写起来很困难，那就表明您的代码及其接口中存在基本复杂性，可能应该作为优先事项进行修复。'
- en: '**It''s possible to automatically generate**: There exist many documentation
    generators that either rely on static-typing annotations or comment annotations
    (for example, *JSDoc*). These allow you to generate documentation for entire interfaces
    via a CLI or build tool.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它可以自动生成**：存在许多文档生成器，它们要么依赖于静态类型注释，要么依赖于注释注释（例如*JSDoc*）。这些允许您通过CLI或构建工具为整个接口生成文档。'
- en: '**It follows a fixed format**: A specification will follow a straightforward
    format that is simple to author. It usually contains headings for individual endpoints
    or method signatures, and a sentence explaining each argument.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它遵循固定格式**：规范将遵循一个简单易写的直接格式。它通常包含各个端点或方法签名的标题，以及解释每个参数的句子。'
- en: 'The overriding purpose of providing a specification is to answer specific questions
    that a user might have about the operation of your code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 提供规范的最主要目的是回答用户可能对您的代码操作有的具体问题。
- en: '![](assets/30afe4c1-743d-4d49-809a-599c0003e424.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30afe4c1-743d-4d49-809a-599c0003e424.png)'
- en: The following is an example of a specification for a function called `removeWords`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个名为`removeWords`的函数规范示例。
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This function will remove the specified words from the specified subject string,
    returning a new string to you. A word here is defined as a string of characters
    bound by word boundaries (`\b`). For example, specifying an `"I like apple juice"`
    subjectString  and `["app", "juice"]` for `wordsToRemove` would remove only `"juice"`,
    as `"app"` exists in the subject but is not bound by a word boundary. The following
    are the arguments:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将从指定的主题字符串中删除指定的单词，并将一个新字符串返回给您。这里的单词被定义为由单词边界（`\b`）限定的字符串。例如，对于`"I like
    apple juice"`主题字符串和`["app", "juice"]`的`wordsToRemove`，只会删除`"juice"`，因为`"app"`存在于主题中，但没有被单词边界限定。以下是参数：
- en: '`subjectString` (`String`): This is the string that the specified words will
    be removed from.  If you do not pass a `String` type, then the value you pass
    will be cast to a `String`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subjectString` (`String`): 这是指定单词将从中移除的字符串。如果您没有传递`String`类型，那么您传递的值将被转换为`String`。'
- en: '`wordsToRemove` (`Array`): This is an array containing words that you wish
    to remove. A null or empty array will cause no words to be removed.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wordsToRemove` (`Array`): 这是一个包含您希望移除的单词的数组。空数组或null将导致没有单词被移除。'
- en: 'As you can hopefully tell, this specification is a purely technical explanation
    of a function''s behavior. It tells the user exactly what arguments they must
    provide and what output they''ll receive. When writing the specification portion
    of your documentation, the most important qualities to abide by are clarity and
    correctness. Be wary of the following traps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您能看出，这个规范纯粹是对函数行为的技术解释。它准确告诉用户他们必须提供什么参数以及他们将收到什么输出。在撰写文档规范部分时，最重要的品质是清晰和正确。要注意以下陷阱：
- en: '**Not enough information to allow usage**: It''s important to provide enough
    information about your implementation so that another programmer, with no knowledge
    of your software, can begin to make use of it. It''s insufficient to only specify
    types of arguments, for example. Provide extra information if the knowledge domain
    is especially obscure.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有足够的信息允许使用**：提供关于您的实现的足够信息非常重要，这样另一个程序员，即使对您的软件一无所知，也可以开始使用它。仅仅指定参数类型是不够的。如果知识领域特别晦涩，还需要提供额外的信息。'
- en: '**Incorrect or out-of-date information**: Documentation can easily fall out
    of date or be incorrect. This is why it''s quite common to generate documentation
    automatically from annotated code. That way, the chances of information being
    incorrect or out of date are lessened considerably.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不正确或过时的信息**：文档很容易过时或不正确。这就是为什么从带注释的代码自动生成文档非常常见的原因。这样，信息不正确或过时的几率会大大降低。'
- en: '**Lack of examples**: It''s common to only list modules, methods, and argument
    signatures, without providing any examples. If doing this, the chance of confusion
    and pain is far higher, so it''s always worth providing sensible examples or linking
    readers to more tutorial-like documentation.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏示例**：通常只列出模块、方法和参数签名，而没有提供任何示例。如果这样做，混乱和困难的几率会更高，因此提供合理的示例或将读者链接到更像教程的文档总是值得的。'
- en: The specification is arguably the most important part of your documentation,
    as it explains, in clear terms, the behavior of every part of your software's
    relevant APIs. Ensure that you take the same care and diligence when documenting
    your code as you would when writing it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 规范可以说是文档中最重要的部分，因为它清晰地解释了软件相关API的每个部分的行为。确保在撰写文档时像编写代码一样仔细和勤奋。
- en: Instruction
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指令
- en: In addition to *concept* and *specification*, a clean piece of documentation
    will *instruct* a user in how to accomplish common tasks. These are commonly termed
    *walkthroughs*, *tutorials,* *how-tos*, or *recipes. *
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了*概念*和*规范*，一份干净的文档还将*指导*用户如何完成常见任务。这些通常被称为*步骤*、*教程*、*操作指南*或*食谱*。
- en: 'Primarily, a user, regardless of whether they are a programmer or end user,
    is concerned with how to get from where they are to where they want to be. They
    are interested in knowing what steps to take. Without instructions for common
    use cases, they''ll be left desperately piecing together what they know about
    your software from intuitions or other pieces of documentation. Consider a book
    about cookery that only details the ingredients and their behaviors when cooked,
    but doesn''t contain any specific recipes that combine ingredients in a specific
    order. That''d be a challenging cooking book to make use of. While it may provide
    a highly detailed set of culinary information, it doesn''t help users answer their
    actual questions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 主要是用户，无论是程序员还是最终用户，都关心如何从现在所在的位置到达他们想要的位置。他们想知道应该采取哪些步骤。如果没有常见用例的说明，他们将绝望地从直觉或其他文档片段中拼凑出对您的软件的了解。想象一本只详细说明了食材及其烹饪方式的烹饪书，但没有包含任何将食材按特定顺序组合的具体食谱。这将是一本难以使用的烹饪书。虽然它可能提供了高度详细的烹饪信息，但它并没有帮助用户回答他们实际的问题：
- en: '![](assets/ab3aba5c-f0ae-4878-b52f-21e9efbb2823.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab3aba5c-f0ae-4878-b52f-21e9efbb2823.png)'
- en: 'When composing instructions, whether they''re in the form or video tutorials
    or written walk-throughs, it is important to consider what use cases are most
    prevalent or challenging for your users. As with many things in life, you can
    only reasonably cater for the bulk of prospects, not all of them. It is unreasonable
    to create tutorials for every single possible use case. And likewise, it is unreasonable,
    from a user''s perspective, for you to only provide a singular tutorial for the
    most common use case. It is wise to strike a compromise and have a small collection
    of tutorials that each express:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写说明时，无论是视频教程还是书面步骤说明，都要考虑对用户来说最常见或最具挑战性的使用情况。与生活中的许多事情一样，您只能合理地满足大多数用户的需求，而不是所有用户。为每种可能的使用情况创建教程是不合理的。同样，从用户的角度来看，仅为最常见的使用情况提供单一教程也是不合理的。明智的做法是取得折衷，拥有一小部分教程，每个教程都表达：
- en: '**Upfront expectations and prerequisites**: A set of instructions should specify
    what expectations the author has about the reader''s hardware, software environment,
    and capabilities. It should also say if there is anything the reader should prepare
    before beginning the following steps.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提前期望和先决条件**：一组说明应该指明作者对读者的硬件、软件环境和能力有什么期望。它还应该说明读者在开始以下步骤之前是否需要做好任何准备。'
- en: '**Specific steps that a reader can emulate**: Instructions should have a number
    of specific steps that users can follow to reach their desired goal. The user
    should not have to use too much (or any) initiative when following these steps;
    the steps should clearly and exhaustively outline exactly what the user needs
    to do, with code examples if possible. It should also be obvious to the user that
    they have successfully completed each step (for example, *you should now receive
    X output*).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读者可以模仿的具体步骤**：说明应该包括一些具体步骤，用户可以按照这些步骤达到他们期望的目标。用户在遵循这些步骤时不应该需要太多（或任何）主动性；这些步骤应该清楚而详尽地概述用户需要做什么，如果可能的话，附上代码示例。用户应该明显地知道他们已成功完成每个步骤（例如，“您现在应该收到X输出”）。'
- en: '**An achievable and observable goal**: Instructions should work toward a goal
    that can be observed by the user. It would be upsetting for the last step of a
    tutorial to say *this won''t currently work, due to X or Y, but you would usually
    expect to see Z.* Ensure that your software is operating in such a way that the
    tutorial can be completed to its very end and the user can come away having gotten
    closer to whatever their overarching goal is.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可实现和可观察的目标**：说明应该朝着用户可以观察到的目标努力。如果教程的最后一步说“由于X或Y的原因，目前无法正常工作，但通常您会期望看到Z”，这将令人沮丧。确保您的软件以这样的方式运行，以便教程可以完成到最后，用户可以更接近他们的总体目标。'
- en: '**Don''t just tell a user what to do**. Tell them what they''re accomplishing
    at each stage, and why it matters. That is, don''t just tell me to put salt in
    the dish, tell me why it needs salt!'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要只告诉用户该做什么**。告诉他们在每个阶段都完成了什么，以及为什么重要。也就是说，不要只告诉我在菜里放盐，告诉我为什么需要盐！'
- en: 'The instructional part of documentation is probably the most challenging. It
    requires us to take on the role of teacher and see things from another person''s
    position of relative ignorance. Maintaining focus on the person we''re teaching,
    the user, is absolutely vital. This feeds quite nicely into our final aspect of
    clean documentation: usability.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的教学部分可能是最具挑战性的。它要求我们扮演老师的角色，从另一个人的相对无知的位置看问题。保持专注于我们正在教授的人，也就是用户，是绝对至关重要的。这非常好地契合了我们清晰文档的最后一个方面：可用性。
- en: Usability
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用性
- en: 'Usability is the final component in clean documentation. Just like our software,
    our documentation must be concerned with users and their specific needs. The previous
    three aspects (*concept*, *specification*, *instruction*) have focused on content,
    while *usability* is purely about the way in which we express that content. It''s
    vitally important not to overwhelm or confuse user when they learn about your
    software:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性是清晰文档的最后一个组成部分。就像我们的软件一样，我们的文档必须关注用户及其特定需求。前面三个方面（*概念*、*规范*、*说明*）都关注内容，而*可用性*纯粹关乎我们表达内容的方式。当用户了解您的软件时，不要使其感到不知所措或困惑是非常重要的：
- en: '![](assets/4782ca49-4cf1-4819-82ae-fa269763cb0e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4782ca49-4cf1-4819-82ae-fa269763cb0e.png)'
- en: 'There are many ways we can confuse and overwhelm. Among them are these the
    following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方式可以使人困惑和不知所措。其中包括以下几种：
- en: '**Too much content**: This can overwhelm a user who may only want to perform
    some specific and narrow task. They may not see the point in crawling through
    reams of documentation just to implement their simple task.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容过多**：这可能会使只想执行某个具体而狭窄任务的用户感到不知所措。他们可能不明白为了实现简单任务而必须翻阅大量文档的意义。'
- en: '**Too little content**: If a user wishes to do something that is not documented
    sufficiently, then they are left with few options. They either have to hope that
    there is community-driven documentation somewhere or that the interfaces are understandable
    enough to decipher without help.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容过少**：如果用户希望做的事情没有得到充分的记录，那么他们的选择就很少。他们要么希望有社区驱动的文档，要么希望界面足够易懂，可以在没有帮助的情况下解释清楚。'
- en: '**Internal inconsistency**: This is common when there are different areas of
    documentation that have been updated at different times. A user is left wondering
    which document or example is correct and up to date.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部不一致**：当文档的不同部分在不同时间更新时，这种情况很常见。用户会疑惑哪个文档或示例是正确的和最新的。'
- en: '**Lacking structure**: Without structure, a user cannot easily navigate through
    or gain a conceptual understanding of, the entire software. They are left crawling
    through the details without able to get a clear *big picture*. Hierarchy is important
    in software, so it''s important to reflect this in our documentation.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏结构**：没有结构，用户无法轻松地浏览或获得对整个软件的概念理解。他们只能在细节中摸索，无法获得清晰的*整体图景*。在软件中，层次结构很重要，因此在我们的文档中反映这一点很重要。'
- en: '**Difficult to navigate content**: Without good UX/UI considerations, documentation
    can be very hard to navigate through. If it is not centralized, searchable, and
    accessible, then navigation suffers and users are left in a state of confusion
    and pain.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容难以导航**：没有良好的UX/UI考虑，文档可能非常难以导航。如果它不是集中的、可搜索的和可访问的，那么导航就会受到影响，用户会陷入困惑和痛苦之中。'
- en: '**Lacking presentation**: Alongside navigation, another crucial UX component
    within documentation is its aesthetic and typographic layout. A well laid-out
    document is a breeze to read through and learn from. It is entirely reasonable
    to *design* documentation. It should not be a dry *dumping ground* of endless
    prose, but a beautiful educational experience!'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**呈现不足**：除了导航之外，文档中另一个至关重要的UX组件是其美学和排版布局。一个布局良好的文档易于阅读和学习。设计文档是完全合理的。它不应该是无尽散文的枯燥*倾倒场所*，而是一个美丽的教育体验！'
- en: 'In [Chapter 2](fd19fa13-f04a-4e03-9bc3-ba318cacf731.xhtml), *The Tenets of
    Clean Code*, we went into great detail on what *usability* means. We discussed
    how it was not only about intuitive design and accessibility, but also about the
    consideration of *user stories—s*pecific tasks that users wish to carry out and
    how to accommodate these. Documentation is no different to any other interface
    that we provide; it must solve the user''s problems. Consider how you may design
    documentation to cater for these example user stories:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2章《清洁代码的原则》中，我们详细讨论了*可用性*的含义。我们讨论了它不仅仅是直观设计和可访问性，还涉及对*用户故事*的考虑——用户希望执行的具体任务以及如何满足这些任务。文档与我们提供的任何其他界面并无二致；它必须解决用户的问题。考虑如何设计文档以满足这些示例用户故事：
- en: '*As a user*, I wish to understand what this framework does and how I might
    apply it to my project'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为用户，我希望了解这个框架的功能以及如何将其应用到我的项目中
- en: '*As a user*, I wish to find out how I can install this framework into my Node.js
    project'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为用户，我希望找出如何将这个框架安装到我的Node.js项目中
- en: '*As a user*, I wish to understand the best practices when using this framework'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为用户，我希望了解在使用这个框架时的最佳实践
- en: '*As a user*, I wish to understand how to build a simple example app using this
    framework'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为用户，我希望了解如何使用这个框架构建一个简单的示例应用程序
- en: Every user is different. Some users will prefer to read through a long and technical
    document, others will prefer short self-contained tutorials. Consider the different
    learning styles that people have (visual, aural, social, solitary, and so on).
    Some learn by studying things at length; others learn by *doing*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都是不同的。一些用户更喜欢阅读长篇技术文档，而另一些用户更喜欢简短的独立教程。考虑人们的不同学习风格（视觉、听觉、社交、独立等）。有些人通过长时间学习来学习；其他人通过*实践*来学习。
- en: We may consider building different styles of documentation for the different
    types of information a user seeks. More specification-oriented information (for
    example, *how does this specific framework function work?*) may be best suited
    to a traditional long-form document format, while more instruction-oriented information
    (for example, *how can I build an app with this framework?*) may be best suited
    to rich media (for example, a video tutorial).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以考虑为用户寻求的不同类型信息构建不同风格的文档。更加具体的信息（例如，*这个特定框架的功能如何工作？*）可能更适合传统的长篇文档格式，而更加指导性的信息（例如，*如何使用这个框架构建一个应用程序？*）可能更适合丰富的媒体（例如，视频教程）。
- en: Due to the many types of information a user may seek, and all the different
    individual users we are catering for, it is absolutely worth dedicating significant
    time to planning, designing, and executing clean documentation. It should never
    be an afterthought.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户可能寻求的信息类型众多，以及我们正在为不同的个体用户提供服务，因此值得花费大量时间来规划、设计和执行清晰的文档。它不应该是事后的想法。
- en: 'Now that we''re explored our four aspects of clean documentation, let''s explore
    the incredible gamut of available mediums we can employ to express our documentation.
    We do not have to employ only a single dull, scrollable document: there are dozens
    of other ways we can inform and educate our users and colleagues.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了清晰文档的四个方面，让我们探索一下我们可以使用的各种媒介来表达我们的文档。我们不必只使用单一的沉闷、可滚动的文档：我们还有数十种其他方式可以向用户和同事提供信息和教育。
- en: Documentation is everywhere
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档无处不在
- en: 'If we generously define documentation as *a way of learning about a piece of
    software*, we can observe that there are dozens of different mediums of documentation
    that exist. Many of them are implicit or accidental; others are more intentionally
    crafted, either by the creator(s) of the software or the expert community that
    has gathered around it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们慷慨地将文档定义为*了解软件的一种方式*，我们可以观察到存在数十种不同的文档媒介。其中许多是隐性或偶然的；其他更多是有意识地制作的，无论是软件的创建者还是围绕它聚集的专家社区：
- en: Written documentation (*API specifications, conceptual explanations*)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书面文档（API规范、概念解释）
- en: Explanatory images and diagrams (for example* flowcharts*)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释性图片和图表（例如流程图）
- en: Written tutorials (*walk-throughs, recipes, how to do X*)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书面教程（步骤、食谱、如何做X）
- en: Rich media introductions and tutorials (*videos, podcasts, screencasts*)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富的媒体介绍和教程（视频、播客、屏幕录像）
- en: Public Q&As or issues (for example* GitHub issues that explain how to fix something*)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共问答或问题（例如解释如何修复某些问题的GitHub问题）
- en: Community-driven Q&As (for example* StackOverflow*)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区驱动的问答（例如StackOverflow）
- en: Independent communication between programmers (*online or offline*)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员之间的独立沟通（线上或线下）
- en: Meet-ups, conferences, and seminars (*owner or community-driven*)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚会、会议和研讨会（所有者或社区驱动）
- en: Official support (*paid support lines, emails, in-person sessions*)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方支持（付费支持电话、邮件、线下会议）
- en: Educational classes (*in-person or online,* for example *Coursera*)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教育课程（例如线下或在线的Coursera）
- en: Tests (*that explain concepts, flows, and expectations*)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试（解释概念、流程和期望）
- en: Good abstractions (*that help to explain concepts*)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的抽象（有助于解释概念）
- en: Readable and familiar code (*that can be easily understood*)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读且熟悉的代码（*易于理解*）
- en: Structure and delineations (*directory structure, project names,* and so on)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构和界定（*目录结构，项目名称*等）
- en: Intuitively designed interfaces (*educating usage via good design*)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直观设计的界面（*通过良好设计教育使用方式*）
- en: Error flows and messages (for example* X not working? Try Z instead.*)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误流和消息（例如* X不起作用？尝试Z代替*）。
- en: It's worth considering how all these mediums care catered for. When the official
    documentation does not help to solve a user's problem, what other pathways will
    they explore before abandoning your software altogether? How can we channel a
    user's difficulty or questions towards a solution as quickly and fluidly as possible?
    If a user is unlikely to read an entire specification document, then what other
    mediums can we create for them?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑所有这些媒介是如何被照顾的是值得的。当官方文档无法帮助解决用户的问题时，他们在放弃你的软件之前会探索哪些其他途径？我们如何能够尽快和流畅地将用户的困难或问题引导到解决方案？如果用户不太可能阅读整个规范文档，那么我们可以为他们创建哪些其他媒介？
- en: Writing for non-technical audiences
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为非技术受众撰写
- en: 'As we have seen, when writing documentation, there is a need to adapt the language
    used to the audience. To do this, we must have a good picture in our mind of who
    the audience is, what their current level of knowledge is, and what they''re trying
    to accomplish. A notorious challenge for programmers is communicating with less
    technical or non-technical people. This is a very common and crucial part of their
    role as a creator of software. Whether communicating with end users at specific
    points in a UX, or collaborating with non-technical stakeholders, there is a need
    to tailor our communication to the audience. To do this, we should do the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，撰写文档时，有必要将所用语言适应于受众。为此，我们必须清楚地了解受众是谁，他们目前的知识水平是什么，以及他们试图实现什么。对程序员来说，与不太技术化或非技术人员沟通是一个臭名昭著的挑战。这是作为软件创作者的一个非常常见且至关重要的部分。无论是在UX的特定点与最终用户沟通，还是与非技术利益相关者合作，都需要根据受众调整我们的沟通方式。为此，我们应该做到以下几点：
- en: '**Pick the right level of abstraction**: It''s crucial to find a level of abstraction
    that is fully understood by the audience. Use their roles and proficiencies to
    inform the analogies you use to explain things. For example, if you were talking
    to a patient about a piece of medical software, you might prefer to say *please
    add your medical information* instead of *please populate the medical profile
    fields*.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确的抽象层次：找到受众完全理解的抽象层次至关重要。使用他们的角色和能力来指导你用来解释事物的类比。例如，如果你在向患者谈论一款医疗软件，你可能更愿意说*请添加您的医疗信息*，而不是*请填写医疗档案字段*。
- en: '**Avoid overly-technical terminology**: Avoid words that mean nothing to the
    audience. Use regular language to explain detailed concepts. For example, you
    might talk about v*isual enhancements* instead of *CSS modifications*.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免过于技术化的术语：避免对听众毫无意义的词语。使用普通语言解释详细概念。例如，你可以谈论*视觉增强*，而不是*CSS修改*。
- en: '**Get constant feedback**: Ensure you are being understood by checking with
    your audience. Don''t assume that people understand you just because they don''t
    explicitly say otherwise. Consider user-oriented prompts in your documentation
    or software (for example, *was this message helpful? [YES] [NO]*)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不断获得反馈：确保通过与听众核对来确保自己被理解。不要假设人们理解你，只是因为他们没有明确表示不理解。在你的文档或软件中考虑面向用户的提示（例如，“这条消息有帮助吗？[是]
    [否]”）
- en: Communicating with non-technical individuals may appear to be a distinct challenge,
    but it is no different from communicating with anyone else. As we should be doing
    all the time, we just need to *meet the person where they're at* and communicate
    according to their current understanding of the problem domain.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与非技术人员沟通可能看起来是一个独特的挑战，但与任何其他人沟通并无二致。正如我们应该一直做的那样，我们只需要*以他们的理解水平为准*，并根据他们对问题领域的当前理解进行沟通。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have explored the difficult art of authoring clean documentation,
    breaking it down into the four vital aspects of clean documentation: *concept*,
    *specification*, *instruction*, and*usability*. We''ve discussed the challenge
    of correctly identifying our audience and how to craft our communications to suit
    them. This knowledge will not only be useful in crafting formal documentation,
    but also in our everyday communications with stakeholders and within our software
    when it needs to communicate with users.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了撰写清晰文档的艰难之处，将其分解为清晰文档的四个关键方面：*概念*，*规范*，*指导*和*可用性*。我们讨论了正确识别受众的挑战以及如何制定我们的沟通以适应他们。这种知识不仅在撰写正式文档时有用，也在我们与利益相关者以及软件与用户进行沟通时有用。
- en: In the next chapter, we move swiftly on to the unique challenge of dealing with
    other peoples' code. What happens when we, on the receiving end of potentially
    poor documentation or unintuitive code, need to be productive? We'll find out.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将迅速转向处理他人代码的独特挑战。当我们作为接收端需要高效工作时，如果文档可能不佳或代码不直观，会发生什么？我们将找出答案。
