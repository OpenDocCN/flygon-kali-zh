- en: Using Concurrent Collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用并发集合
- en: In the last chapter, we saw some parallel programming implementations in which
    resources needed to be protected from concurrent access by multiple threads. Synchronization
    primitives are tricky to implement. Often, a shared resource is a collection that
    needs to be read and written by multiple threads. Since a collection can be accessed
    in a variety of ways (such as by using `Enumerate`, `Read`, `Write`, `Sort`, or
    `Filter`), it becomes tricky to write a custom collection with managed synchronization
    using primitives. Because of this, there has always been a need for thread-safe
    collections.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了一些并行编程的实现，其中需要保护资源免受多个线程的并发访问。同步原语很难实现。通常，共享资源是一个需要多个线程读写的集合。由于集合可以以各种方式访问（例如使用`Enumerate`、`Read`、`Write`、`Sort`或`Filter`），因此使用原语编写具有受控同步的自定义集合变得棘手。因此，一直存在着对线程安全集合的需求。
- en: 'In this chapter, we will learn about various programming constructs available
    in C# that help in parallel development. The following are the high-level topics
    that will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习C#中可用的各种编程构造，这些构造有助于并行开发。以下是本章将涵盖的高级主题：
- en: An introduction to concurrent collections
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发集合简介
- en: A multiple producer/consumer scenario
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多生产者/消费者场景
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You should have a good understanding of TPL and C#. The source code for this
    chapter is available on GitHub at [https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter06).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该对TPL和C#有很好的理解。本章的源代码可在GitHub上找到：[https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter06)。
- en: An introduction to concurrent collections
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发集合简介
- en: 'From .NET Framework 4, a lot of thread-safe collections were added to the .NET
    repertoire. A new namespace, `System.Threading.Concurrent`, was also added. This
    included constructs like the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从.NET Framework 4开始，.NET中添加了许多线程安全的集合。还添加了一个新的命名空间`System.Threading.Concurrent`。其中包括以下构造：
- en: '`IProducerConsumerCollection<T>`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IProducerConsumerCollection<T>`'
- en: '`BlockingCollection<T>`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BlockingCollection<T>`'
- en: '`ConcurrentDictionary<TKey,TValue>`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConcurrentDictionary<TKey,TValue>`'
- en: When using the preceding structs, there is no need for any additional synchronization
    and both reading and updating can be done atomically.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用上述结构时，不需要任何额外的同步，读取和更新都可以原子地完成。
- en: Thread safety is not an entirely new concept in the case of collections. Even
    with older collections such as `ArrayList` and `Hashtable`, the `Synchronized`
    property was exposed, which made it possible to access these collections in a
    thread-safe manner. This, however, came with a performance hit, because to make
    the collection thread-safe, the entire collection was wrapped inside a lock with
    every read or update operation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在集合方面，线程安全并不是一个全新的概念。即使在旧的集合中，如`ArrayList`和`Hashtable`，也暴露了`Synchronized`属性，这使得可以以线程安全的方式访问这些集合。然而，这会带来性能损失，因为为了使集合线程安全，每次读取或更新操作都会将整个集合包装在锁内。
- en: Concurrent collections wrap lightweight, slim synchronization primitives such
    as `SpinLock`, `SpinWait`, `SemaphoreSlim`, and `CountDownEvent`, hence making
    them less heavy on cores. As we already know, spinning is much more efficient
    than blocking for smaller wait times. Also, with built-in algorithms in place,
    if wait times increase, the lighter locks are converted into kernel locks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 并发集合包装了轻量级、精简的同步原语，如`SpinLock`、`SpinWait`、`SemaphoreSlim`和`CountDownEvent`，因此使它们对核心的负担较轻。正如我们已经知道的，对于较短的等待时间，自旋比阻塞更有效。此外，如果等待时间增加，内置算法会将较轻的锁转换为内核锁。
- en: Introducing IProducerConsumerCollection<T>
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入IProducerConsumerCollection<T>
- en: 'The producer and consumer collections are the collections that provide efficient
    lock-free alternatives to their generic counterparts, such as `Stack<T>` and `Queue<T>`.
    Any producer or consumer collection must allow the user to add items and remove
    items. .NET Framework provides the `IProducerConsumerCollection<T>` interface
    that represents thread-safe stacks, queues, and bags. The following are the classes
    that implement the interface:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 生产者和消费者集合是提供了高效的无锁替代品的集合，例如`Stack<T>`和`Queue<T>`。任何生产者或消费者集合都必须允许用户添加和删除项目。.NET
    Framework提供了`IProducerConsumerCollection<T>`接口，表示线程安全的堆栈、队列和包。以下是实现该接口的类：
- en: '`ConcurrentQueue<T>`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConcurrentQueue<T>`'
- en: '`ConcurrentStack<T>`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConcurrentStack<T>`'
- en: '`ConcurrentBag<T>`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConcurrentBag<T>`'
- en: 'Two important methods are provided by the interface: `TryAdd` and `TryTake`.
    The syntax of `TryAdd` is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接口提供了两个重要的方法：`TryAdd`和`TryTake`。`TryAdd`的语法如下：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `TryAdd` method adds an item and returns `true`. If there is any problem
    with adding the item, it will return `false`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`TryAdd`方法添加一个项目并返回`true`。如果添加项目时出现任何问题，它将返回`false`。'
- en: 'The syntax of `TryTake` is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`TryTake`的语法如下：'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `TryTake` method removes an item and returns `true`. If there is any problem
    with removing the item, it will return `false`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`TryTake`方法移除一个项目并返回`true`。如果移除项目时出现任何问题，它将返回`false`。'
- en: Using ConcurrentQueue<T>
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ConcurrentQueue<T>
- en: 'Concurrent queues can be used to solve producer/consumer scenarios in application
    programming. In the producer/consumer programming pattern, one or more threads
    produce data and one or more threads consume data. This leads to race conditions
    among threads. We can solve this problem via the following approaches:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 并发队列可用于解决应用程序编程中的生产者/消费者场景。在生产者/消费者编程模式中，一个或多个线程生成数据，一个或多个线程消费数据。这会导致线程之间的竞争条件。我们可以通过以下方法解决这个问题：
- en: Using queues
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用队列
- en: Using `ConcurrentQueue<T>`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ConcurrentQueue<T>`
- en: 'Based on which thread (producer/consumer) has the responsibility to add/consume
    data, the producer-consumer pattern can be classified into the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 根据哪个线程（生产者/消费者）负责添加/消费数据，生产者-消费者模式可以分为以下几种：
- en: '**Pure producer-consumer**, where a thread can either only produce data or
    only consume data but cannot do both'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纯生产者-消费者**，一个线程只能生产数据或只能消费数据，但不能两者兼而有之'
- en: '**Mixed producer-consumer**, where any thread can produce or consume data at
    the same time'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合生产者-消费者**，任何线程都可以同时生产或消费数据'
- en: Let's try to solve a producer-consumer problem using queues first.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先尝试使用队列解决生产者-消费者问题。
- en: Using queues to solve a producer-consumer problem
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用队列解决生产者-消费者问题
- en: 'In this example, we will create a producer and consumer scenario using queues
    that are defined in the `System.Collections` namespace. There will be multiple
    tasks that will attempt to read or write to a queue and we need to ensure that
    the reads and writes are atomic:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用`System.Collections`命名空间中定义的队列来创建生产者和消费者场景。将有多个任务尝试读取或写入队列，我们需要确保读取和写入是原子的：
- en: 'Let''s first create `queue` and populate it with some data:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建`queue`并用一些数据填充它：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Declare a variable that will hold the final result:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个变量来保存最终结果：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will create a parallel loop that will read the item from the queue
    using multiple tasks and add the sum in a thread-safe manner to the sum variable
    declared previously:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个并行循环，使用多个任务从队列中读取项目，并以线程安全的方式将总和添加到之前声明的sum变量中：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we run the program, you will get the following output. As you can see, it''s
    not the expected output due to the race condition that occurred between the tasks
    while trying to read concurrently:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行程序，将得到以下输出。正如你所看到的，由于任务在尝试并发读取时发生了竞争条件，这不是预期的输出：
- en: '![](img/50f765c8-c081-4b67-a8cf-6bc432dc2dc2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50f765c8-c081-4b67-a8cf-6bc432dc2dc2.png)'
- en: 'To make the preceding program thread-safe, we can lock the critical section
    by modifying the parallel loop code as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使前面的程序线程安全，我们可以通过修改并行循环代码来锁定关键部分，如下所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Similarly, we need to synchronize all read/write points to the queue that is
    exposed to the parallel code in more complex scenarios. The following is the output
    if we run the preceding code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在更复杂的情况下，我们需要同步对并行代码中暴露给队列的所有读/写点。如果我们运行前面的代码，将得到以下输出：
- en: '![](img/d129a15a-2e1e-4b32-b3ca-acb5c8983295.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d129a15a-2e1e-4b32-b3ca-acb5c8983295.png)'
- en: As you can see, everything works as expected, although there is an additional
    synchronization overhead that can lead to deadlock in frequent read or write scenarios.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，一切都如预期的那样工作，尽管在频繁读取或写入的情况下，会有额外的同步开销，可能导致死锁。
- en: Solving problems using concurrent queues
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用并发队列解决问题
- en: 'We can solve the producer-consumer problem by making use of the  `System.Collections.Concurrent.ConcurrentQueue` class,
    which is a thread-safe version of a queue. Let''s modify the preceding code by
    using a concurrent queue, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`System.Collections.Concurrent.ConcurrentQueue`类来解决生产者-消费者问题，这是一个线程安全的队列版本。让我们通过使用并发队列修改前面的代码，如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, we have just replaced `Queue<int>` with `ConcurrentQueue<int>`
    in the code we wrote previously, which had synchronization overheads. With `ConcurrentQueue`,
    we don't have to worry about other synchronization primitives.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们刚刚在我们之前编写的代码中用`ConcurrentQueue<int>`替换了`Queue<int>`，这带来了同步开销。使用`ConcurrentQueue`，我们不必担心其他同步原语。
- en: 'Here is the output if we run the preceding code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的代码，将得到以下输出：
- en: '![](img/676c49ca-488e-48da-9016-96a9dd59dfc5.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/676c49ca-488e-48da-9016-96a9dd59dfc5.png)'
- en: Just like `Queue<T>`, `ConcurrentQueue<T>` also works in **First In, First Out**
    (**FIFO**) mode.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`Queue<T>`一样，`ConcurrentQueue<T>`也以**先进先出**（**FIFO**）模式工作。
- en: Performance consideration – Queue<T> versus ConcurrentQueue<T>
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能考虑 - Queue<T>与ConcurrentQueue<T>
- en: 'We should use `ConcurrentQueue` in the following scenarios, where it has slight
    or very big performance benefits over queues:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在以下情况下使用`ConcurrentQueue`，在这些情况下它比队列具有轻微或非常大的性能优势：
- en: In a pure producer-consumer scenario, where the processing time for each item
    is very low
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在纯生产者-消费者场景中，每个项目的处理时间非常低
- en: In a pure producer-consumer scenario, where there is only one dedicated producer
    thread and only one dedicated consumer thread
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在纯生产者-消费者场景中，只有一个专用生产者线程和一个专用消费者线程的情况
- en: In pure as well as mixed producer-consumer scenarios where the processing time
    is 500 **FLOPS** (short for **Floating-Point Operations Per Second**) or more
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在纯生产者-消费者场景以及混合生产者-消费者场景中，处理时间为500 **FLOPS**（**每秒浮点运算次数**）或更多
- en: We should use queues over concurrent queues in a mixed producer-consumer scenario
    where the processing time for each item is lower, to gain performance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在混合生产者-消费者场景中，每个项目的处理时间较低时，我们应该使用队列而不是并发队列，以获得更好的性能。
- en: Using ConcurrentStack<T>
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ConcurrentStack<T>
- en: '`ConcurrentStack<T>` is a concurrent version of `Stack<T>` and implements the `IProducerConsumerCollection<T>`
    interface. We can push or pop items from the stack, which works in the **Last
    In, First Out** (**LIFO**) format. It doesn''t involve kernel-level locking, rather
    it relies on spinning and compare-and-swap operations to remove any contention.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentStack<T>`是`Stack<T>`的并发版本，并实现了`IProducerConsumerCollection<T>`接口。我们可以从栈中推送或弹出项目，它以**后进先出**（**LIFO**）格式工作。它不涉及内核级锁定，而是依赖于自旋和比较和交换操作来消除任何争用。'
- en: 'The following are some important methods of the `ConcurrentStack<T>` class:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`ConcurrentStack<T>`类的一些重要方法：
- en: '`Clear`: Removes all elements from the collection'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Clear`：从集合中移除所有元素'
- en: '`Count`: Returns the number of elements in the collection'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Count`：返回集合中的元素数'
- en: '`IsEmpty`: Returns `true` if the collection is empty'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsEmpty`：如果集合为空，则返回`true`'
- en: '`Push (T item)`: Adds an element to the collection'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Push (T item)`：向集合中添加一个元素'
- en: '`TryPop (out T result)`: Removes an element from the collection, and returns
    `true` if the item is removed; otherwise, it returns `false`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TryPop (out T result)`:从集合中移除一个元素，并在移除项目时返回`true`；否则返回`false`'
- en: '`PushRange (T [] items)`:Adds a range of items to the collection; the operation
    is performed atomically'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PushRange (T [] items)`:原子性地向集合中添加一系列项目'
- en: '`TryPopRange (T [] items)`:Removes a range of items from the collection'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TryPopRange (T [] items)`:从集合中移除一系列项目'
- en: Let's see how to create a concurrent stack instance.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个并发堆栈实例。
- en: Creating a concurrent stack
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个并发堆栈
- en: 'We can create a concurrent stack instance and add items as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个并发堆栈实例，并按以下方式添加项目：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can get items from the stack as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式从堆栈中获取项目：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the complete code that creates a concurrent stack, adds items, and
    iterates on items in parallel:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建并发堆栈、添加项目并并行迭代项目的完整代码：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/d7564b63-881e-4bc9-bbea-ccd465825517.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7564b63-881e-4bc9-bbea-ccd465825517.png)'
- en: Using ConcurrentBag<T>
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ConcurrentBag<T>
- en: '`ConcurrentBag<T>` is an unordered collection, unlike `ConcurrentStack` and
    `ConcurrentQueues`, which orders the items while storing and retrieving them.
    `ConcurrentBag<T>` is optimized for scenarios in which the same threads work as
    a producer as well as a consumer. `ConcurrentBag` supports the work-stealing algorithm
    and maintains a local queue for each thread.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentBag<T>`是一个无序集合，不像`ConcurrentStack`和`ConcurrentQueues`，它在存储和检索项目时会对项目进行排序。`ConcurrentBag<T>`针对同一线程既作为生产者又作为消费者的场景进行了优化。`ConcurrentBag`支持工作窃取算法，并为每个线程维护一个本地队列。'
- en: 'The following code creates `ConcurrentBag` and adds or gets items from it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建`ConcurrentBag`并向其中添加或获取项目：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The complete code is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码如下：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/125e306d-f7dc-4872-a5b9-2029132f9595.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/125e306d-f7dc-4872-a5b9-2029132f9595.png)'
- en: As you are aware, every thread has a thread-local queue. Items 1, 2, and 3 are
    added to the local queue of `producerAndConsumerTask` and items 4, 5, and 6 are
    added to the local queue of `producerTask`. When `producerAndConsumerTask` has
    added items, we wait for `producerTask` to finish pushing its items. Once all
    the items are pushed, `producerAndConsumerTask` starts retrieving items. Since
    it has pushed 1, 2, and 3, which are in the local queue, it will process those
    first before moving to the local queue of `producerTask`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，每个线程都有一个线程本地队列。项目1、2和3被添加到`producerAndConsumerTask`的本地队列中，项目4、5和6被添加到`producerTask`的本地队列中。当`producerAndConsumerTask`添加了项目后，我们等待`producerTask`完成推送其项目。一旦所有项目都被推送，`producerAndConsumerTask`开始检索项目。由于它已经推送了1、2和3，这些项目在本地队列中，它将首先处理这些项目，然后再移动到`producerTask`的本地队列。
- en: Using BlockingCollection<T>
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BlockingCollection<T>
- en: 'The `BlockingCollection<T>` class is a thread-safe collection that implements
    the `IProduceConsumerCollection<T>` interface. We can add or remove items from
    the collection concurrently without worrying about synchronization, which is handled
    automatically. There will be two threads: the producer and the consumer. The producer
    thread will produce data and we can limit the maximum number of items that can
    be produced by the producer thread before it enters sleep mode and is then blocked.
    The consumer thread will consume data and will be blocked when the collection
    is emptied. The producer thread is unblocked and the consumer thread removes some
    items from the collection. The consumer thread is unblocked when the producer
    thread adds some data to the collection.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`BlockingCollection<T>`类是一个线程安全的集合，实现了`IProduceConsumerCollection<T>`接口。我们可以同时向集合中添加或移除项目，而不必担心同步问题，因为这些问题会被自动处理。会有两个线程：生产者和消费者。生产者线程将生成数据，我们可以限制生产者线程在进入休眠模式并被阻塞之前可以生产的最大项目数。消费者线程将消耗数据，并在集合为空时被阻塞。当生产者线程解除阻塞并消费者线程从集合中移除一些项目时，消费者线程将被解除阻塞。当生产者线程向集合中添加一些数据时，消费者线程将被解除阻塞。'
- en: 'There are two important aspects of blocking collections:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 阻塞集合有两个重要方面：
- en: '**Bounding**:This means we can bound the collection to a maximum value after
    which no new objects can be added and the producer thread enters sleep mode.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边界**：这意味着我们可以将集合限制为最大值，之后不再能添加新对象，生产者线程进入休眠模式。'
- en: '**Blocking**: This means we can block the consumer thread when the collection
    is empty.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻塞**：这意味着当集合为空时，我们可以阻塞消费者线程。'
- en: Let's see how to create blocking collections.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建阻塞集合。
- en: Creating BlockingCollection<T>
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建BlockingCollection<T>
- en: 'The following code creates a new `BlockingCollection` that creates up to 10
    items after which it goes to the blocked state before items are consumed by consumer
    threads:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建一个新的`BlockingCollection`，在创建10个项目后，它进入阻塞状态，然后由消费者线程消耗项目：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Items can be added to the collection as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式向集合中添加项目：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Items can be removed from the collection as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式从集合中移除项目：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The producer thread calls the `CompleteAdding()` method when there are no more
    items to add. This method, in turn, sets the `IsAddingComplete` property of the
    collection to `true`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有更多项目可添加时，生产者线程调用`CompleteAdding()`方法。这个方法会将集合的`IsAddingComplete`属性设置为`true`。
- en: The consumer thread uses the `IsCompleted` property when the collection is empty
    and `IsAddingComplete` is also `true`. This is an indication that all items have
    been processed and the producer will not add any more items.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当集合为空且`IsAddingComplete`也为`true`时，消费者线程使用`IsCompleted`属性。这表明所有项目都已被处理，生产者将不再添加任何项目。
- en: 'The complete code is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码如下：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/4f457b50-74d7-4398-b66c-af844ec7018e.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f457b50-74d7-4398-b66c-af844ec7018e.png)'
- en: Now, after introducing the concurrent collections, in the next section, we will
    try to take the producer-consumer scenario forward and learn about how to deal
    with multiple producers/consumers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在介绍了并发集合之后，在下一节中，我们将尝试将生产者-消费者场景推进，并了解如何处理多个生产者/消费者。
- en: A multiple producer-consumer scenario
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个生产者-消费者场景
- en: 'In this section, we will see how blocking collections work when there are multiple
    producer and consumer threads. For the sake of understanding, we will create two
    producers and one consumer. The producer threads will produce the items. Once
    all of the producer threads have called `CompleteAdding`, then the consumer will
    start reading items from the collection:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到当存在多个生产者和消费者线程时，阻塞集合是如何工作的。为了理解，我们将创建两个生产者和一个消费者。生产者线程将生产项目。一旦所有生产者线程都调用了`CompleteAdding`，消费者将开始从集合中读取项目：
- en: 'Let''s start by creating a blocking collection with multiple producers:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建一个带有多个生产者的阻塞集合开始：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we will create two producer tasks that will add items to the producers:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建两个生产者任务，它们将向生产者添加项目：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the end, we will write consumer logic that will try to consume items from
    both producer collections as soon as the items are available:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将编写消费者逻辑，尝试从两个生产者集合中消费项目，一旦项目可用即开始：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see from the preceding code method, `TryTakeFromAny` tries to read
    the item from multiple producers and return when the item is available.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码方法中可以看出，`TryTakeFromAny`尝试从多个生产者中读取项目，并在项目可用时返回。
- en: 'The output is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/4166e62b-2d21-485d-bfc2-406d81970ecb.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4166e62b-2d21-485d-bfc2-406d81970ecb.png)'
- en: In programming, we often come across a scenario where we need to store data
    concurrently as key-value pairs. For that purpose, the `ConcurrentDictionary`
    collection comes in handy, which we will introduce in the next section.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，我们经常遇到需要并发存储数据作为键值对的情况。为此，`ConcurrentDictionary`集合非常方便，我们将在下一节介绍它。
- en: Using ConcurrentDictionary<TKey,TValue>
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ConcurrentDictionary<TKey,TValue>
- en: '`ConcurrentDictionary<TKey,TValue>` represents a thread-safe dictionary. It
    is used to hold key-value pairs that can be read or written in a thread-safe manner.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentDictionary<TKey,TValue>`表示线程安全的字典。它用于以线程安全的方式保存可以读取或写入的键值对。'
- en: '`ConcurrentDictionary` can be created as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentDictionary`可以按以下方式创建：'
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Items can be added to the dictionary as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式向字典中添加项目：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Items can be removed from the dictionary as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式从字典中移除项目：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Items in the dictionary can be updated as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式更新字典中的项目：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the following code, we will create two producer threads that will add items
    to a dictionary. The producers will create some duplicate items and the dictionary
    will make sure they are added in a thread-safe manner without throwing duplicate
    key errors. Once the producer threads finish, the consumer will read all items
    using the `keys` or `values` property:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将创建两个生产者线程，它们将向字典中添加项目。生产者将创建一些重复的项目，字典将确保它们以线程安全的方式添加，而不会抛出重复键错误。生产者线程完成后，消费者将使用`keys`或`values`属性读取所有项目：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/1435d511-3d3f-4889-91a0-923a42be2541.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1435d511-3d3f-4889-91a0-923a42be2541.png)'
- en: In this section, we learned how concurrent collections can be very handy in
    producer-consumer scenarios. With concurrent collections, the onus is on getting
    code to behave correctly while dealing with multiple tasks without the need for
    custom synchronization overheads.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了并发集合在生产者-消费者场景中是非常方便的。使用并发集合，代码可以正确地处理多个任务，而无需自定义同步开销。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed thread-safe collections that are part of .NET
    Framework. Concurrent collections are available in the `System.Collection.Concurrent`
    namespace and there are collections for various use cases in programming. Some
    common use cases require collections that include dictionaries, lists, bags, and
    so on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了.NET Framework中的线程安全集合。并发集合位于`System.Collection.Concurrent`命名空间中，用于编程中的各种用例提供了各种集合。一些常见的用例需要包括字典、列表、包等的集合。
- en: We also discussed a producer and consumer scenario in which data is produced
    by some threads and consumed by other threads at the same time. Usually, in these
    scenarios, there are race conditions, but concurrent collections can deal with
    them effectively.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了生产者和消费者场景，其中一些线程生产数据，同时其他线程消费数据。通常，在这些场景中存在竞争条件，但并发集合可以有效地处理它们。
- en: In the next chapter, we will learn about improving the performance of parallel
    code via lazy initialization patterns.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习通过延迟初始化模式来提高并行代码的性能。
- en: Questions
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of these is not a concurrent collection?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是并发集合？
- en: '`ConcurrentQueue<T>`'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ConcurrentQueue<T>`'
- en: '`ConcurrentBag<T>`'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ConcurrentBag<T>`'
- en: '`ConcurrentStack<T>`'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ConcurrentStack<T>`'
- en: '`ConcurrentList<T>`'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ConcurrentList<T>`'
- en: When a thread can only produce data and another thread can only consume data
    but not both, what is this arrangement?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一个线程只能生产数据，另一个线程只能消费数据，而不能同时进行时，这种安排是什么？
- en: Pure producer-consumer
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 纯生产者-消费者
- en: Mixed producer-consumer
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 混合生产者-消费者
- en: A queue will perform best when the processing time for items is less in the
    case of a pure producer-consumer scenario.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在纯生产者-消费者场景中，如果项目的处理时间较短，队列的性能将最佳。
- en: 'True'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假
- en: Which is not a member of `ConcurrentStack`?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个不是`ConcurrentStack`的成员？
- en: '`Push`'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Push`'
- en: '`TryPop`'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TryPop`'
- en: '`TryPopRange`'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TryPopRange`'
- en: '`TryPush`'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TryPush`'
