["```kt\nContactsTable (Contact_ID,Name, Number, Email, Photo)\n```", "```kt\nColleagueTable (Colleague_ID, Contact_ID, Position, Fax)\n```", "```kt\npublic class ContactModel {\n  private int id;\n  private String name, contactNo, email;\n  private byte[] byteArray;\n\n  public byte[] getPhoto() {\n    return byteArray;\n  }\n  public void setPhoto(byte[] array) {\n    byteArray = array;\n  }\n  public int getId() {\n    return id;\n  }\n  public void setId(int id) {\n    this.id = id;\n  }\n  \u2026\u2026\u2026\u2026\u2026\n}\n```", "```kt\npublic class DatabaseManager {\n\n  private SQLiteDatabase db; \n  private static final String DB_NAME = \"contact\";\n\n  private static final int DB_VERSION = 1;\n  private static final String TABLE_NAME = \"contact_table\";\n  private static final String TABLE_ROW_ID = \"_id\";\n  private static final String TABLE_ROW_NAME = \"contact_name\";\n  private static final String TABLE_ROW_PHONENUM = \"contact_number\";\n  private static final String TABLE_ROW_EMAIL = \"contact_email\";\n  private static final String TABLE_ROW_PHOTOID = \"photo_id\";\n  .........\n}\n```", "```kt\npublic DatabaseManager(Context context) {\n   this.context = context;\n   CustomSQLiteOpenHelper helper = new CustomSQLiteOpenHelper(context);\n   this.db = helper.getWritableDatabase();\n  }\n```", "```kt\nprivate class CustomSQLiteOpenHelper extends SQLiteOpenHelper {\n  public CustomSQLiteOpenHelper(Context context) {\n    super(context, DB_NAME, null, DB_VERSION);\n  }\n  @Override\n  public void onCreate(SQLiteDatabase db) {\nString newTableQueryString = \"create table \"\n+ TABLE_NAME + \" (\"\n+ TABLE_ROW_ID \n+ \" integer primary key autoincrement not null,\"\n+ TABLE_ROW_NAME\n+ \" text not null,\" \n+ TABLE_ROW_PHONENUM \n+ \" text not null,\"\n+ TABLE_ROW_EMAIL\n+ \" text not null,\"\n+ TABLE_ROW_PHOTOID \n+ \" BLOB\" + \");\";\n    db.execSQL(newTableQueryString);\n  }\n\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, \nint newVersion) {\n\n    String DROP_TABLE = \"DROP TABLE IF EXISTS \" + \nTABLE_NAME;\n    db.execSQL(DROP_TABLE);\n    onCreate(db);\n  }\n}\n```", "```kt\n\"create table \" + TABLE_NAME + \" (\"\n+ TABLE_ROW_ID\n+ \" integer primary key autoincrement not null,\"\n\u2026.....\n+ TABLE_ROW_PHOTOID + \" BLOB\" + \");\";\n```", "```kt\nadb pull /data/data/your package name/databases  /file location\n\n```", "```kt\npublic void addRow(ContactModel contactObj) {\n  ContentValues values = prepareData(contactObj);\n  try {\n    db.insert(TABLE_NAME, null, values);\n  } catch (Exception e) {\n    Log.e(\"DB ERROR\", e.toString()); \n    e.printStackTrace();\n  }\n}\n```", "```kt\n.......................\nvalues.put(TABLE_ROW_NAME, contactObj.getName());\nvalues.put(TABLE_ROW_PHONENUM, contactObj.getContactNo());\n....................\n```", "```kt\npublic long insert (String table, String nullColumnHack, ContentValues values)\n```", "```kt\npublic void addRowAlternative(ContactModel contactObj) {\n\n  String insertStatment = \"INSERT INTO \" + TABLE_NAME \n      + \" (\"\n      + TABLE_ROW_NAME + \",\"\n      + TABLE_ROW_PHONENUM + \",\"\n      + TABLE_ROW_EMAIL + \",\"\n      + TABLE_ROW_PHOTOID\n      + \") \"\n      + \" VALUES \"\n      + \"(?,?,?,?)\";\n\n  SQLiteStatement s = db.compileStatement(insertStatment);\n  s.bindString(1, contactObj.getName());\n  s.bindString(2, contactObj.getContactNo());\n  s.bindString(3, contactObj.getEmail());\nif (contactObj.getPhoto() != null)\n   {s.bindBlob(4, contactObj.getPhoto());}\n  s.execute();\n}\n```", "```kt\npublic ContactModel getRowAsObject(int rowID) { \n  ContactModel rowContactObj = new ContactModel();\n  Cursor cursor;\n  try {\n    cursor = db.query(TABLE_NAME, new String[] {\nTABLE_ROW_ID, TABLE_ROW_NAME, TABLE_ROW_PHONENUM, TABLE_ROW_EMAIL, TABLE_ROW_PHOTOID },\n    TABLE_ROW_ID + \"=\" + rowID, null,\n    null, null, null, null);\n    cursor.moveToFirst();\n    if (!cursor.isAfterLast()) {\n      prepareSendObject(rowContactObj, cursor);    }\n  } catch (SQLException e) {\n      Log.e(\"DB ERROR\", e.toString());\n    e.printStackTrace();\n  }\n  return rowContactObj;\n}\n```", "```kt\npublic Cursor query (String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)\n```", "```kt\npublic ContactModel getRowAsObjectAlternative(int rowID) {\n\n  ContactModel rowContactObj = new ContactModel();\n  Cursor cursor;\n\n  try {\n    String queryStatement = \"SELECT * FROM \" \n       + TABLE_NAME  + \" WHERE \" + TABLE_ROW_ID + \"=?\";\n    cursor = db.rawQuery(queryStatement,\n      new String[]{String.valueOf(rowID)});\n    cursor.moveToFirst();\n\n    rowContactObj = new ContactModel();\n    rowContactObj.setId(cursor.getInt(0));\n    prepareSendObject(rowContactObj, cursor);\n\n  } catch (SQLException e) {\n    Log.e(\"DB ERROR\", e.toString());\n    e.printStackTrace();\n  }\n\n  return rowContactObj;\n}\n```", "```kt\nrowObj.setContactNo(cursor.getString(cursor.getColumnIndexOrThrow(TABLE_ROW_PHONENUM)));\nrowObj.setEmail(cursor.getString(cursor.getColumnIndexOrThrow(TABLE_ROW_EMAIL)));\n```", "```kt\ncursor.getstring(2);\n```", "```kt\npublic void deleteRow(int rowID) {\n  try {\n    db.delete(TABLE_NAME, TABLE_ROW_ID \n    + \"=\" + rowID, null);\n  } catch (Exception e) {\n    Log.e(\"DB ERROR\", e.toString());\n    e.printStackTrace();\n  }\n}\n```", "```kt\npublic int delete (String table, String whereClause, String[] whereArgs)\n```", "```kt\npublic void deleteRowAlternative(int rowId) {\n\n  String deleteStatement = \"DELETE FROM \" \n    + TABLE_NAME + \" WHERE \" \n    + TABLE_ROW_ID + \"=?\";\n  SQLiteStatement s = db.compileStatement(deleteStatement);\n  s.bindLong(1, rowId);\n  s.executeUpdateDelete();\n}\n```", "```kt\npublic void updateRow(int rowId, ContactModel contactObj) {\n\n  ContentValues values = prepareData(contactObj);\n\n  String whereClause = TABLE_ROW_ID + \"=?\";\n  String whereArgs[] = new String[] {String.valueOf(rowId)};\n\n  db.update(TABLE_NAME, values, whereClause, whereArgs);\n\n}\n```", "```kt\npublic int update (String table, ContentValues values, String whereClause, String[] whereArgs) \n```", "```kt\npublic void updateRowAlternative(int rowId, ContactModel contactObj) {\n  String updateStatement = \"UPDATE \" + TABLE_NAME + \" SET \"\n      + TABLE_ROW_NAME     + \"=?,\"\n      + TABLE_ROW_PHONENUM + \"=?,\"\n      + TABLE_ROW_EMAIL    + \"=?,\"\n      + TABLE_ROW_PHOTOID  + \"=?\"\n      + \" WHERE \" + TABLE_ROW_ID + \"=?\";\n\n  SQLiteStatement s = db.compileStatement(updateStatement);\n  s.bindString(1, contactObj.getName());\n  s.bindString(2, contactObj.getContactNo());\n  s.bindString(3, contactObj.getEmail());\n  if (contactObj.getPhoto() != null)\n   {s.bindBlob(4, contactObj.getPhoto());}\n  s.bindLong(5, rowId);\n\n  s.executeUpdateDelete();\n}\n```", "```kt\n    private void prepareSendData() {\n      if (TextUtils.isEmpty(contactName.getText().toString())\n          || TextUtils.isEmpty(\n          contactPhone.getText().toString())) {\n\n      .............\n\n       } else {\n        ContactModel contact = new ContactModel();\n        contact.setName(contactName.getText().toString());\n        ............\n\n        DatabaseManager dm = new DatabaseManager(this);\n        if(reqType == ContactsMainActivity\n    .CONTACT_UPDATE_REQ_CODE) {\n          dm.updateRowAlternative(rowId, contact);\n        } else {\n          dm.addRowAlternative(contact);\n        }\n\n        setResult(RESULT_OK);\n        finish();\n      }\n    }\n    ```", "```kt\n    private byte[] getBlob() {\n\n      ByteArrayOutputStream blob = new ByteArrayOutputStream();\n      imageBitmap.compress(Bitmap.CompressFormat.JPEG, 100, blob);\n      byte[] byteArray = blob.toByteArray();\n\n      return byteArray;\n    }\n    ```", "```kt\n    public boolean compress (Bitmap.CompressFormat format, int quality, OutputStream stream)\n    ```", "```kt\n    public CustomListAdapter(Context context) {\n\n       contactModelList = new ArrayList<ContactModel>();\n       _context = context;\n       inflater = (LayoutInflater)context.getSystemService( \n    Context.LAYOUT_INFLATER_SERVICE);\n          dm = new DatabaseManager(_context);\n       contactModelList = dm.getAllData();\n    }\n    ```", "```kt\n    convertView = inflater.inflate(R.layout.contact_list_row, null);\n    ```", "```kt\n    vHolder = (ViewHolder) convertView.getTag();\n    ```", "```kt\n    vHolder.contact_email.setText(contactObj.getEmail());\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu  >\n\n        <item\n            android:id=\"@+id/delete_item\"\n            android:title=\"Delete\"/>\n    <item\n            android:id=\"@+id/update_item\"\n         android:title=\"Update\"/>\n    </menu>\n    ```", "```kt\n    registerForContextMenu(listReminder) \n    ```", "```kt\n    @Override\n      public void onCreateContextMenu(ContextMenu menu, View v,\n          ContextMenuInfo menuInfo) {\n        super.onCreateContextMenu(menu, v, menuInfo);\n        MenuInflater m = getMenuInflater();\n        m.inflate(R.menu.del_menu, menu);\n      }\n    ```", "```kt\n      @Override\n      public boolean onContextItemSelected(MenuItem item) {\n    ..............\n        case R.id.delete_item:\n\n          cAdapter.delRow(info.position);\n          cAdapter.notifyDataSetChanged();\n          return true;\n        case R.id.update_item:\n\n          Intent intent = new Intent( \n    ContactsMainActivity.this, AddNewContactActivity.class);\n          ......................\n      }\n    ```", "```kt\n    public void delRow(int delPosition) {\n                      dm.deleteRowAlternative(contactModelList.get(delPosition).getId());\n           contactModelList.remove(delPosition);\n    ```", "```kt\nintent.putExtra(REQ_TYPE, CONTACT_UPDATE_REQ_CODE);\n```"]