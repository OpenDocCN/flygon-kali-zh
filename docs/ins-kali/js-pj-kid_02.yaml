- en: Chapter 2. Solving Problems Using JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用JavaScript解决问题
- en: You have learned how to print something using JavaScript on console in the previous
    chapter. Now, let's see the fundamentals behind JavaScript syntax, variables,
    arithmetic operators, and comments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你已经学会了如何使用JavaScript在控制台上打印东西。现在，让我们看看JavaScript语法、变量、算术运算符和注释背后的基本原理。
- en: In the computer world, there is nothing but data. You can read, modify, and
    create new data; however, anything that isn't data simply does not exist. In JavaScript,
    we need to handle data to develop a website.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机世界中，除了数据什么都没有。你可以读取、修改和创建新的数据；然而，任何不是数据的东西根本就不存在。在JavaScript中，我们需要处理数据来开发网站。
- en: To understand the basic syntax of JavaScript, first of all you need to know
    that JavaScript is *case sensitive*. You cannot interchange lower case and upper
    case letters in JavaScript. Therefore, when dealing with the JavaScript syntax,
    you need to remember that writing the code is not the only important task, you
    must also watch the syntax whether it's written correctly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解JavaScript的基本语法，首先你需要知道JavaScript是*区分大小写*的。你不能在JavaScript中交换大小写字母。因此，在处理JavaScript语法时，你需要记住写代码不是唯一重要的任务，你还必须注意语法是否写得正确。
- en: Let me show you an example. In the previous chapter, you have successfully printed
    **Hello World** on your browser using the `document.write();` syntax.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你举个例子。在上一章中，你已经成功地使用`document.write();`语法在浏览器上打印了**Hello World**。
- en: What would happen if you wrote `Document.write("Hello World");`? Yes! It won't
    run successfully. You will get an error message. This kind of errors is known
    as **Uncaught SyntaxError**.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你写了`Document.write("Hello World");`会发生什么？是的！它不会成功运行。你会得到一个错误消息。这种错误被称为**未捕获的语法错误**。
- en: A JavaScript statement is typically written on one line. You may finish your
    statement with a semicolon or not. It is not mandatory to end a statement with
    a semicolon. However, it is a good practice to add a semicolon after each statement.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript语句通常写在一行上。你可以用分号结束你的语句，也可以不用。结束语句不是强制性的。然而，每个语句后面加上分号是一个好习惯。
- en: 'Let''s consider the following example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Its output will be as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它的输出将如下所示：
- en: '![Solving Problems Using JavaScript](img/B04720_02_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用JavaScript解决问题](img/B04720_02_01.jpg)'
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript keywords (such as for, while, if, switch, case, and so on) are always
    in lowercase. The build-in objects (such as Date, Math, Number, and so on) start
    with uppercase.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript关键字（如for、while、if、switch、case等）始终是小写的。内置对象（如Date、Math、Number等）以大写字母开头。
- en: Variables
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: We already know that the computer world has nothing but data.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道计算机世界除了数据什么都没有。
- en: 'There are different types of data (we call them *data types*), as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的数据（我们称之为*数据类型*），如下所示：
- en: Your name is a kind of data
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的名字是一种数据
- en: Your age is data
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的年龄是数据
- en: Your grade is also data
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的成绩也是数据
- en: Yet, they all are different. What is the difference between them? Your name
    only contains a group of *characters* or, as some people also call it, **string**.
    Your age is an **integer** type data. Your grade is a **float** type data. The
    wonderful thing in JavaScript is that you do not have to specify the data type
    before writing a *variable's* name.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它们都是不同的。它们之间有什么区别？你的名字只包含一组*字符*，或者有些人也称之为**字符串**。你的年龄是一个**整数**类型的数据。你的成绩是一个**浮点数**类型的数据。JavaScript中的奇妙之处在于，在写一个*变量*的名字之前，你不必指定数据类型。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript allows working with three data types. Strings (for example, `"This
    is an example of string"`), numbers (for example, `2015`, `3.1415`, and so on),
    and Boolean (for example, `true` or `false`).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript允许使用三种数据类型。字符串（例如，`"这是一个字符串的例子"`），数字（例如，`2015`，`3.1415`等），和布尔值（例如，`true`或`false`）。
- en: Did we discuss *variables*? Well, you already know the data types. You will
    need *something* to store your data. This *something* is called *variable*. In
    JavaScript, we use `var` before the variable names. Remember that `var` starts
    with small letter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论过*变量*了吗？好吧，你已经知道了数据类型。你需要*某物*来存储你的数据。这个*某物*就叫做*变量*。在JavaScript中，我们在变量名之前使用`var`。记住，`var`以小写字母开头。
- en: 'Let''s consider the following example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s say that we have 14 apples and 6 oranges. To store them in variables
    we will use the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有14个苹果和6个橙子。为了把它们存储在变量中，我们将使用以下方法：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following example is not the same. Can you tell why?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子不一样。你能告诉为什么吗？
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Yes, JavaScript is case sensitive. All the variables are different here, though
    the values of the variables are the same.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，JavaScript是区分大小写的。所有的变量在这里都是不同的，尽管变量的值是相同的。
- en: Now, let's do some coding. Previously, on console, you printed your name as
    homework. I hope you did it without any trouble. How about we now print your name
    differently using a variable? Assume that your name is `Sherlock Holmes`. What
    kind of data is it?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们做一些编码。之前在控制台上，你打印了你的名字作业。我希望你能毫无困难地完成。现在我们用一个变量来以不同的方式打印你的名字，怎么样？假设你的名字是`夏洛克·福尔摩斯`。这是什么类型的数据？
- en: You are right, it is *string* type. Usually for string type data, we put the
    string between two quotes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你说得对，它是*字符串*类型。通常对于字符串类型的数据，我们把字符串放在两个引号之间。
- en: 'Let''s consider the following example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To print them using console, you need to type each statement and press *Enter*.
    Take a look at the following image:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在控制台上打印它们，你需要输入每个语句并按*Enter*。看一下下面的图片：
- en: '![Variables](img/B04720_02_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![变量](img/B04720_02_02.jpg)'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not copy and paste the codes on the console. You might get a syntax error.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在控制台上复制和粘贴代码。你可能会得到一个语法错误。
- en: You will see an extra line appearing after you hit *Enter*, stating `undefined`.
    Don't worry about this for now. It just returned a console log.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下*Enter*后，会出现一个额外的行，显示`undefined`。现在不用担心这个。这只是返回了一个控制台日志。
- en: You stored the `Sherlock Holmes` string on the `name` variable and you stored
    `Detective` on `occupation`. Every time you access `name` or `occupation`, you
    can access the stated strings.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您将`福尔摩斯`字符串存储在`name`变量中，将`侦探`存储在`occupation`中。每次访问`name`或`occupation`时，您都可以访问到这些字符串。
- en: 'Consider that you want to print **Sherlock Holmes** on your screen. Just type
    the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要在屏幕上打印**福尔摩斯**。只需输入以下内容：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After typing, hit *Enter*. You will see **Sherlock Holmes** is printed on the
    screen, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 输入后，按*Enter*。您将看到**福尔摩斯**被打印在屏幕上，如下所示：
- en: '![Variables](img/B04720_02_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![变量](img/B04720_02_03.jpg)'
- en: 'Type `document.write(occupation);` and hit *Enter*, as shown in the following
    screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`document.write(occupation);`并按*Enter*，如下截图所示：
- en: '![Variables](img/B04720_02_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![变量](img/B04720_02_04.jpg)'
- en: You may be wondering why is there no space between **Sherlock Holmes** and **Detective**.
    As, on the console, the history is not automatically removed from the web page
    on the left-hand side and after you hit *Enter* for your second output (`occupation`),
    the string places itself right after the previous string. This will always happen,
    unless you clear your console using the *Ctrl* + *L* keyboard shortcut and reload
    the web page pressing the key *F5*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道为什么**福尔摩斯**和**侦探**之间没有空格。因为在控制台上，左侧的网页历史不会自动从上一个字符串之后移除，并且在您为第二个输出（`occupation`）按*Enter*之后，字符串会直接放在前一个字符串的后面。这种情况将一直发生，除非您使用*Ctrl*
    + *L*键盘快捷键清除控制台，并按*F5*键重新加载网页。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Your stored variables will also be erased from the memory when you reload the
    web page. Don't worry, you will be taught how to use your variables storing on
    a file in the next chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当重新加载网页时，您存储的变量也将从内存中被擦除。不用担心，下一章节将教您如何在文件中使用存储的变量。
- en: 'If you want to join two (or multiple) variables, you add a plus sign (`+`)
    between the two variables, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要连接两个（或多个）变量，您需要在两个变量之间添加加号（`+`），如下所示：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Can you tell me what will be output of these commands?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您能告诉我这些命令的输出将是什么吗？
- en: 'Yes, you are right. The output will be as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，您是对的。输出将如下所示：
- en: '**Sherlock HolmesDetective**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**福尔摩斯侦探**'
- en: '**DetectiveSherlock Holmes**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**侦探福尔摩斯**'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Your output might be in one line on the web page. If you want to split the lines,
    add a `<br>` HTML tag. The simplest way to add this is to type `document.write("<br>");`
    and hit *Enter*. Your next output will be in a new line.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您的输出可能会在网页上显示为一行。如果您想要换行，可以添加`<br>`HTML标签。最简单的方法是输入`document.write("<br>");`并按*Enter*。您的下一个输出将在新的一行上。
- en: 'If you want to add any string (for example, a space) between the two strings
    other than any variables, just type the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在两个字符串之间添加任何字符串（例如空格），而不是任何变量，只需输入以下内容：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will be as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '**Sherlock Holmes Detective**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**福尔摩斯侦探**'
- en: What will happen when you type the following code and hit *Enter*?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入以下代码并按*Enter*时会发生什么？
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Yes! You are absolutely right. The output will be as shown in the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！您是绝对正确的。输出将如下所示：
- en: '**My name is Sherlock Holmes and I am a Detective**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的名字是福尔摩斯，我是一名侦探**'
- en: '![Variables](img/B04720_02_05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![变量](img/B04720_02_05.jpg)'
- en: Now, add another variable on the console. Consider that `Sherlock Holmes` is
    24 years old. Do you remember what kind of data age is?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在控制台上添加另一个变量。考虑`福尔摩斯`是24岁。您还记得年龄是什么类型的数据吗？
- en: 'Yes, it is an integer type of number. Therefore, type the following code and
    hit *Enter*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这是一个整数类型的数字。因此，输入以下代码并按*Enter*：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You have the following three variables now:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在有以下三个变量：
- en: Name
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 姓名
- en: Occupation
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 职业
- en: Age
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年龄
- en: 'Let''s print the following output on the web page:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在网页上打印以下输出：
- en: '**My name is Sherlock Holmes, I''m 24 years old and I am a Detective**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的名字是福尔摩斯，我今年24岁，我是一名侦探**'
- en: What will our code be on the console?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制台代码将是什么？
- en: 'The code is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output can be seen as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Variables](img/B04720_02_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![变量](img/B04720_02_06.jpg)'
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Printing quotations/inverted commas**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**打印引号/倒置逗号**'
- en: 'If you want to print **Shakespeare said, "To be, or not to be: that is the
    question!"** using the `document.write();` syntax, you will probably type the
    following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用`document.write();`语法打印**莎士比亚说：“生存还是毁灭，这是一个问题！”**，您可能会输入以下代码：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'However, this will give you an error known as **SyntaxError**. To get rid of
    this error, you need to use a backward slash (`\`) before the two inverted commas.
    The correct code will be as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这将导致一个名为**SyntaxError**的错误。为了摆脱这个错误，您需要在两个倒置逗号之前使用反斜杠（`\`）。正确的代码将如下所示：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be as shown in the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '**Shakespeare said, "To be, or not to be: that is the question!"**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**莎士比亚说：“生存还是毁灭，这是一个问题！”**'
- en: The same rule applies for single inverted comma (`'`).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 单引号（`'`）也适用相同的规则。
- en: 'Here is a quick exercise for you:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个快速练习给你：
- en: 'Suppose `Tom` has a cat (`Lucy`). The cat, `Lucy`, is `2.4` years old. Store
    the name, cat''s name, and its age on three different variables and print the
    following output using console:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设`汤姆`有一只猫（`露西`）。这只猫，`露西`，今年`2.4`岁。将姓名、猫的名字和年龄分别存储在三个不同的变量中，并使用控制台打印以下输出：
- en: '**Tom''s cat Lucy is 2.4 years old.**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**汤姆的猫露西今年2.4岁。**'
- en: 'Assume that you bought `4` pounds of apples. Each pound costs you `$1.2`. Store
    the price and quantity of apples on two different variables and print the following
    output using console:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您购买了`4`磅的苹果。每磅花费了您`$1.2`。将苹果的价格和数量分别存储在两个不同的变量中，并使用控制台打印以下输出：
- en: '**I bought 4 pounds of apples. I had to pay $1.2 for each pound.**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**我买了4磅的苹果。每磅我需要支付1.2美元。**'
- en: Comments
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: Suppose you have done a lot of coding and some logical operations, and used
    a number of variables on JavaScript, and you want me to help you with the code
    if any errors occur. When you send me the code, I will not know what you have
    typed unless I have a clear knowledge of JavaScript or you have commented on the
    important lines.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经做了很多编码和一些逻辑操作，并在JavaScript中使用了许多变量，如果出现任何错误，你希望我帮你处理代码。当你把代码发给我时，除非我对JavaScript有清楚的了解，或者你在重要的行上做了注释，否则我不会知道你输入了什么。
- en: A comment is basically a line of text or code that your browser ignores while
    running. You can compare comments to sticky notes or reminder.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注释基本上是浏览器在运行时忽略的一行文本或代码。你可以把注释比作便利贴或提醒。
- en: 'Let''s consider the following example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'How do you make multiline comments? You mention the comment in the following
    manner:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如何创建多行注释？你可以这样提到注释：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Your multiline comment should be between `/*` and `*/`, as shown in the following
    screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你的多行注释应该在`/*`和`*/`之间，如下截图所示：
- en: '![Comments](img/B04720_02_07.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![注释](img/B04720_02_07.jpg)'
- en: Arithmetic operators
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 算术运算符
- en: In JavaScript, like other programming languages, we can do some arithmetic operations.
    In your school, you might have already learned how to add two numbers, subtract
    one number from another number, multiply two numbers, and divide a number with
    another. You can do all these things in JavaScript with the help of a few lines
    of code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，就像其他编程语言一样，我们可以进行一些算术运算。在学校里，你可能已经学会了如何将两个数字相加，从一个数字中减去另一个数字，将两个数字相乘，并将一个数字除以另一个数字。你可以用几行代码在JavaScript中做所有这些事情。
- en: 'In JavaScript, we use the following arithmetic symbols for the operations:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们使用以下算术符号进行运算：
- en: '| Operator | Description |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| + | To add |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| + | 加法 |'
- en: '| - | To subtract |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| - | 减法 |'
- en: '| * | To multiply |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| * | 乘法 |'
- en: '| / | To divide |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| / | 除法 |'
- en: '| % | To find the reminder (called modulus operator) |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| % | 找到余数（称为取模运算符） |'
- en: Addition
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加法
- en: Suppose you have two variables, `x` and `y`, with the values `3` and `4`, respectively.
    What should we do on the console to store the values on the variables?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有两个变量`x`和`y`，它们的值分别是`3`和`4`。我们应该在控制台上做什么来存储变量的值？
- en: 'Yes, we do the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们做以下操作：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then, press *Enter*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按*Enter*。
- en: 'Take another variable that will hold the summation of `x` and `y`, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 再取另一个变量，它将保存`x`和`y`的总和，如下所示：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Can you tell me what will happen when we print `z`?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你能告诉我当我们打印`z`时会发生什么吗？
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Yes, you are correct, this will print **7**, as shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你是对的，这将打印**7**，如下截图所示：
- en: '![Addition](img/B04720_02_08.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![加法](img/B04720_02_08.jpg)'
- en: Subtraction
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减法
- en: To subtract a number from another, you need to put a minus sign (-) between
    them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要从一个数字中减去另一个数字，你需要在它们之间放一个减号（-）。
- en: 'Let''s consider the following example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of this code is **6**, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出是**6**，如下截图所示：
- en: '![Subtraction](img/B04720_02_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![减法](img/B04720_02_09.jpg)'
- en: Multiplication
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乘法
- en: To multiply two numbers or variables that have integer or float type of data
    stored on them, you just put an asterisk (`*`) between the variables or numbers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要对存储在两个整数或浮点类型数据的变量或数字进行乘法，只需在变量或数字之间放一个星号（`*`）。
- en: 'Let''s take a look at the following example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of this code is **12**, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出是**12**，如下截图所示：
- en: '![Multiplication](img/B04720_02_10.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![乘法](img/B04720_02_10.jpg)'
- en: Division
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 除法
- en: To divide a number with another, you need to put a forward slash (`/`) between
    the numbers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个数字除以另一个数字，你需要在数字之间放一个斜杠（`/`）。
- en: 'Let''s take a look at the following example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of this code is **7**, as shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出是**7**，如下截图所示：
- en: '![Division](img/B04720_02_11.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![除法](img/B04720_02_11.jpg)'
- en: Modulus
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 取模
- en: If you want to find the modulus of a number with another, you need to put a
    percentage sign (`%`) between the numbers.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想找到一个数字与另一个数字的模，你需要在数字之间放一个百分号（`%`）。
- en: 'Let''s consider the following example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下例子：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of this code is **1**, as shown in the following screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出是**1**，如下截图所示：
- en: '![Modulus](img/B04720_02_12.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![取模](img/B04720_02_12.jpg)'
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**What does modulus (%) operator do?**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**取模（%）运算符是做什么的？**'
- en: 'Well, from your math class, you have already learned how to divide one number
    with another. Say, you divide 10 by 2\. The result will be 5, which is an integer
    type of number. However, what will happen if you divide 10 by 3? The answer will
    not be an integer. The value is 3.333333333333\. You can also say that the answer
    is 3 and the remainder is 1\. Consider the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，从你的数学课上，你已经学会了如何将一个数字除以另一个。比如，你将10除以2。结果将是5，这是一个整数类型的数字。然而，如果你将10除以3会发生什么？答案不会是一个整数。值是3.333333333333。你也可以说答案是3，余数是1。考虑以下：
- en: '`10 = 9 + 1;`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`10 = 9 + 1;`'
- en: That is, `(9+1)/3`
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是，`(9+1)/3`
- en: '`= 9/3+1/3`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`= 9/3+1/3`'
- en: '`= 3 + 1/3;`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`= 3 + 1/3;`'
- en: Therefore, the remainder is 1\. What modulus does is that it finds out the remainder
    and returns it. Therefore, `10%3 = 1`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，余数是1。取模的作用是找出余数并返回它。因此，`10%3 = 1`。
- en: Now, let's summarize all the arithmetic operators that we learned so far in
    one single code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们总结我们迄今为止学到的所有算术运算符在一个单一的代码中。
- en: Can you tell me the output of the following lines?
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你能告诉我以下行的输出是什么吗？
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will get the following output:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '**The summation of x and y is 9**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**x和y的总和是9**'
- en: '**The subtraction of x and y is 1**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**x和y的减法是1**'
- en: '**The multiplication of x and y is 20**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**x和y的乘积是20**'
- en: '**The division of x and y is 1.25**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**x和y的除法是1.25**'
- en: '**The modulus of x and y is 1**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**x和y的模是1**'
- en: 'This output can be seen in the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出可以在以下截图中看到：
- en: '![Modulus](img/B04720_02_13.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![取模](img/B04720_02_13.jpg)'
- en: 'I guess you nailed it. Now, let''s explain them in the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜你做对了。现在，让我们在下面解释它们：
- en: We assigned `5` and `4` to `x` and `y`, respectively
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们分别给`x`和`y`分配了`5`和`4`
- en: We assigned the summation of `x` and `y` to the `sum` variable, the subtraction
    of `x` and `y` to the `sub` variable, the multiplication of `x` and `y` to the
    `mul` variable, the division of `x` and `y` to the `div` variable, and the modulus
    of `x` and `y` to the `mod` variable
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`x`和`y`的总和分配给`sum`变量，`x`和`y`的减法分配给`sub`变量，`x`和`y`的乘法分配给`mul`变量，`x`和`y`的除法分配给`div`变量，`x`和`y`的模数分配给`mod`变量
- en: Then, we printed them using the `document.write();` syntax
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用`document.write();`语法打印它们
- en: We used a `<br>` HTML tag to separate the output of each line
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`<br>`HTML标签来分隔每行的输出
- en: 'Consider the following example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: John has 56 pens. He wants to arrange them in seven rows. Each line will have
    an equal number of pens. Write a code that will print the number of pens in each
    row.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰有56支笔。他想把它们排成七行。每行将有相等数量的笔。编写一个代码，将打印出每行的笔数。
- en: '(Hint: take two variables for the number of pens and number of rows, divide
    the number of pens with the number of rows and store the value in a new variable.)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: （提示：为笔的数量和行数取两个变量，将笔的数量除以行数并将值存储在一个新变量中。）
- en: 'The sample output is as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出如下：
- en: '**John will have to place XX pens on each line. // XX is the number of pens**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**约翰将不得不在每行放置XX支笔。 // XX是笔的数量**'
- en: More operators and operations
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多的运算符和操作
- en: JavaScript has more operators other than those stated earlier. Let's go little
    bit deeper.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript有更多的运算符，除了前面提到的那些。让我们深入一点。
- en: Increment or decrement operators
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增量或减量运算符
- en: 'If you have an integer and you want to increment it by 1 or any number, you
    can type the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个整数，想要将其增加1或任何数字，您可以输入以下内容：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also increment your variable by 1, typing the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过输入以下内容将变量增加1：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'What will you do if you want to increment your variable by more than 1? Well,
    you can follow this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要将变量增加多于1，您会怎么做？好吧，您可以按照以下步骤：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can increment your variable by typing the following as well:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过输入以下内容来增加您的变量：
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Tip
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that you should not place a space between an operator (for example
    +, -, *, /, and so on ) and equal sign (=).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您不应该在运算符（例如+，-，*，/等）和等号（=）之间放置空格。
- en: 'The output will look similar to the following screenshot on the console:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将在控制台上看起来类似于以下截图：
- en: '![Increment or decrement operators](img/B04720_02_14.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![增量或减量运算符](img/B04720_02_14.jpg)'
- en: 'What about the decrement operator? Yes, you are absolutely right. Decrement
    operations are same as the increment operations. The only thing that changes is
    the sign. Your addition (`+`) operator will be replaced by the subtraction operator
    (`-`). Let''s take a look at an example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 那么减量运算符呢？是的，你完全正确。减量操作与增量操作相同。唯一改变的是符号。您的加法（`+`）运算符将被减法运算符（`-`）替换。让我们看一个例子：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can also decrement your variable by `1` typing the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过输入以下内容将变量减少`1`：
- en: '[PRE28]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'What will you do if you want to decrement your variable by more than `1`? Well,
    you can follow this:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要将变量减少多于`1`，您可以按照以下步骤：
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can also decrement your variable by typing the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过输入以下内容将变量减少：
- en: '[PRE30]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output of these codes can be seen in the following screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码的输出可以在以下截图中看到：
- en: '![Increment or decrement operators](img/B04720_02_15.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![增量或减量运算符](img/B04720_02_15.jpg)'
- en: These type of operations are very important for logical operations in JavaScript.
    You will learn about their uses in [Chapter 4](ch04.html "Chapter 4. Diving a
    Bit Deeper"), *Diving a Bit Deeper*.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的操作对于JavaScript中的逻辑操作非常重要。您将在[第4章](ch04.html "第4章。深入了解")*深入了解*中了解它们的用途。
- en: Assignment operators
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: An assignment operator assigns a value to an operator. I believe that you already
    know about assignment operators, don't you? Well, you use an equal sign (`=`)
    between a variable and its value. By doing this, you assigned the value to the
    variable.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值运算符将一个值分配给一个运算符。我相信你已经了解了赋值运算符，不是吗？好吧，你在一个变量和它的值之间使用一个等号(`=`)。通过这样做，您将值分配给变量。
- en: 'Let''s take a look at the following example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `Sherlock Holmes` string is assigned to the `name` variable. You have already
    learned about increment and decrement operators. Can you tell me what will the
    output of the following codes be?
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sherlock Holmes`字符串被分配给`name`变量。您已经学习了增量和减量运算符。你能告诉我以下代码的输出将是什么吗？'
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The output will be **6**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是**6**。
- en: Do you remember why this has happened?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您还记得为什么会发生这种情况吗？
- en: 'The `x *= 2;` equation is similar to `x = x * 2;` as `x` is equal to `3`, and
    later it is multiplied by `2`. The final number (`3 x 2 = 6`) is assigned to the
    same `x` variable. That''s why we got the following output:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`x *= 2;`等式类似于`x = x * 2;`，因为`x`等于`3`，然后乘以`2`。最终的数字（`3 x 2 = 6`）被分配给相同的`x`变量。这就是为什么我们得到以下输出的原因：'
- en: '![Assignment operators](img/B04720_02_16.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![赋值运算符](img/B04720_02_16.jpg)'
- en: 'Let''s perform the following exercise:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行以下练习：
- en: What is the output of the following code?
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码的输出是什么？
- en: '[PRE33]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We will get the following output:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '**w = 32, x = 12, y = 11, z = 5**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**w = 32, x = 12, y = 11, z = 5**'
- en: 'This output can be seen in the following screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出可以在以下截图中看到：
- en: '![Assignment operators](img/B04720_02_17.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![赋值运算符](img/B04720_02_17.jpg)'
- en: JavaScript comparison and logical operators
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript比较和逻辑运算符
- en: 'If you want to do something logical and compare two numbers or variables in
    JavaScript, you need to use a few logical operators. The following are a few examples
    of the comparison operators:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在JavaScript中做一些逻辑操作并比较两个数字或变量，您需要使用一些逻辑运算符。以下是一些比较运算符的示例：
- en: '| Operator | Description |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| == | Equal to |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| == | 等于 |'
- en: '| != | Not equal to |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| != | 不等于 |'
- en: '| > | Greater than |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| > | 大于 |'
- en: '| < | Less than |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| < | 小于 |'
- en: '| => | Equal to or greater than |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| => | 等于或大于 |'
- en: '| <= | Less than or equal to |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| <= | 小于或等于 |'
- en: 'The following are a few examples that use these operators:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用这些运算符的一些示例：
- en: '![JavaScript comparison and logical operators](img/B04720_02_18.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript比较和逻辑运算符](img/B04720_02_18.jpg)'
- en: You will learn more about the use of these operators in the following chapters.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在接下来的章节中了解更多关于这些运算符的用法。
- en: 'Let''s discuss a few bitwise logical operators and bitwise operators:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些位逻辑运算符和位运算符：
- en: '| Operators | Description |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| && | This means the AND operator. To check whether two or more statements
    are true, we use this. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| && | 这意味着AND运算符。我们使用它来检查两个或更多语句是否为真。 |'
- en: '| &#124;&#124; | This means the OR operator. To check whether any of the statement
    is true, we use this. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| &#124;&#124; | 这意味着OR运算符。我们使用它来检查任何语句是否为真。 |'
- en: '| ~ | This means the NOT operator. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| ~ | 这意味着NOT运算符。 |'
- en: '| ^ | This means the XOR operator. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| ^ | 这意味着XOR运算符。 |'
- en: '| >> | This means the Right Shift operator. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| >> | 这意味着右移运算符。 |'
- en: '| << | This means the Left Shift operator. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| << | 这意味着左移运算符。 |'
- en: They might be hard for you to learn right now. Don't worry, you don't have to
    use them now. We will use them in [Chapter 4](ch04.html "Chapter 4. Diving a Bit
    Deeper"), *Diving a Bit Deeper*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可能对您现在来说很难学。不用担心，您现在不必使用它们。我们将在[第4章](ch04.html "第4章。深入了解")，*深入了解*中使用它们。
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you learned about the JavaScript syntax. We discussed the
    JavaScript variables and how to assign a value to a variable. You learned how
    to comment on the code. You now know why commenting is important. You finally
    learned an important topic: operators and operations. JavaScript, without using
    operators and logical functions, will not be so rich nowadays. Therefore, learning
    about the logical operations is the key to gain good knowledge of JavaScript.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了JavaScript语法。我们讨论了JavaScript变量以及如何为变量赋值。您学会了如何对代码进行注释。您现在知道了为什么注释很重要。最后，您学会了一个重要的主题：运算符和操作。如今，JavaScript如果不使用运算符和逻辑函数，就不会那么丰富。因此，学习逻辑运算是获得JavaScript良好知识的关键。
- en: I would like to suggest you to practice all the code in this chapter at home.
    You just type them on the console, avoid copying and pasting the codes. This will
    hamper with your learning. As a programmer must have a good typing speed, copying
    and pasting the codes will not improve this skill. You may face problems in typing
    codes; however, you will learn.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您在家里练习本章中的所有代码。您只需在控制台上输入它们，避免复制和粘贴代码。这将妨碍您的学习。作为程序员必须有良好的打字速度，复制和粘贴代码不会提高这一技能。您可能在输入代码时遇到问题；然而，您会学到的。
- en: You can solve any arithmetic problem using JavaScript. You can also check whether
    your logic is true or false on console. If you can do this, we can move on to
    the next chapter, [Chapter 3](ch03.html "Chapter 3. Introducing HTML and CSS"),
    *Introducing HTML and CSS*, where you will learn about HTML, CSS, and so on.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用JavaScript解决任何算术问题。您还可以在控制台上检查您的逻辑是真还是假。如果您能做到这一点，我们可以继续下一章，[第3章](ch03.html
    "第3章。介绍HTML和CSS")，*介绍HTML和CSS*，在那里您将学习有关HTML、CSS等的知识。
