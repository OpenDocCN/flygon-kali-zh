- en: Chapter 9. Performance Benchmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：性能基准
- en: In this chapter, you are going to look at the performance statistics of different
    configurations that we covered in the previous chapter. Of course, the current
    setup does not provide you the most accurate environment because you have no control
    over EC2 instances, but it will give you an idea about the setup required in your
    own environment.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将研究上一章介绍的不同配置的性能统计信息。 当然，当前设置无法为您提供最准确的环境，因为您无法控制 EC2 实例，但是它将使您了解自己环境中所需的设置。
- en: 'We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Need for a benchmark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基准的重要性
- en: Performance with BLAS, LAPACK, OpenBLAS, ATLAS and Intel MKL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BLAS，LAPACK，OpenBLAS，ATLAS 和英特尔 MKL 的性能
- en: Final results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终结果
- en: Why do we need a benchmark?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们需要基准？
- en: As you advance with your programming skills, you will start to implement more
    efficient programs. You will search dozens of code repositories to see how others
    are solving similar problems, and you will find those rare gems that will amaze
    you.
  prefs: []
  type: TYPE_NORMAL
  zh: 随着编程技巧的提高，您将开始实现更高效的程序。 您将搜索数十个代码仓库，以了解其他人如何解决类似的问题，并且您会发现那些令您赞叹不已的稀有宝石。
- en: Throughout this progress of writing better software and implementing systems,
    you will need ways to measure and track the rate of improvement. You will generally
    consider your starting point as a baseline and see how the improvements you make
    will add up to performance metrics.
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写更好的软件和实现系统的整个过程中，您将需要测量和跟踪改进速度的方法。 通常，您将以起点为基准，并查看所做的改进将如何累加性能指标。
- en: Once you set the baseline, you will benchmark several different implementations
    and will have a chance to compare these in terms of the performance metrics you
    choose. You can choose various metrics and need to decide these in advance.
  prefs: []
  type: TYPE_NORMAL
  zh: 设置基准后，您将对几种不同的实现进行基准测试，并将有机会根据您选择的性能指标进行比较。 您可以选择各种指标，并且需要事先决定。
- en: 'Performance metrics for these benchmarks will be kept rather simple, and only
    the time spent metric will be used. You will perform the same operations many
    times with different configurations and calculate the mean time spent at first.
    The formula to calculate the mean is:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基准的性能指标将保持相当简单，并且仅使用所花费的时间指标。 您将使用不同的配置多次执行相同的操作，并首先计算平均花费的时间。 计算平均值的公式为：
- en: '![](img/c928d7f5-e3dd-4030-85f1-289acd24f6d5.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c928d7f5-e3dd-4030-85f1-289acd24f6d5.png)'
- en: 'This is a good old formula to calculate mean; in our example, the formula is
    explained as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个计算均值的好公式； 在我们的示例中，公式解释如下：
- en: '![](img/123d5f4e-e787-49e3-844f-23b6dbe90944.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/123d5f4e-e787-49e3-844f-23b6dbe90944.png)'
- en: 'The baseline will be created based on this formula. The first set of calculations
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 基线将基于此公式创建。 第一组计算如下：
- en: 'Addition and multiplication of:'
  prefs: []
  type: TYPE_NORMAL
  zh: 的加法和乘法：
- en: Vector-vector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量向量
- en: Vector-matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量矩阵
- en: Matrix-matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵矩阵
- en: You will usually run these calculations a given number of times and calculate
    the average.
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您将运行这些计算给定次数并计算平均值。
- en: The following code snippet shows you a custom function rather than common timers
    available in Python. The reason you will use a custom function is that you can
    extend it later with other statistical functions and have better view of details
    with proper logging. Function will outputs useful information before the calculation
    starts and also the results after iterations are finished.
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段向您展示了一个自定义函数，而不是 Python 中可用的通用计时器。 使用自定义函数的原因是，您以后可以将其与其他统计函数一起扩展，并通过适当的日志记录更好地查看详细信息。
    函数将在计算开始之前输出有用的信息，并在迭代完成之后输出结果。
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you have `Docstring` in this function, you can display it to see function
    arguments, what it returns, and an example usage:'
  prefs: []
  type: TYPE_NORMAL
  zh: 当此函数中包含`Docstring`时，可以显示它以查看函数参数，返回的内容以及用法示例：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s start measuring the average time spent for the dot product of 2 vectors.
    The following code block defines vectors and creates arguments to be fed into
    a timer function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始测量两个向量的点积所花费的平均时间。 以下代码块定义向量，并创建要输入到计时器函数中的参数：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can call the timer function now as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以按以下方式调用计时器函数：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our vector-vector product took 1 microsecond on average. Let''s see how we
    can improve this calculation by adding additional metrics. Another metric that
    you can easily add is standard deviation, which is shown in following formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的向量乘积平均需要 1 微秒。 让我们看看如何通过添加其他指标来改进此计算。 您可以轻松添加的另一个指标是标准差，如下公式所示：
- en: '![](img/ac8c49f8-3be4-4b3b-82bc-5bc2a6eacd0a.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac8c49f8-3be4-4b3b-82bc-5bc2a6eacd0a.png)'
- en: You are familiar with the formula terms from the previous illustration. Standard
    deviation simply informs you about the variability of reported metric, which is
    average time spent in our example.
  prefs: []
  type: TYPE_NORMAL
  zh: 您熟悉上图中的公式术语。 标准差只是告诉您所报告指标的可变性，这是在我们的示例中花费的平均时间。
- en: 'Extend the timer function by calculating `std_time_spent`, printing its value,
    and returning the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 通过计算`std_time_spent`，打印其值并返回以下内容来扩展计时器函数：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also update the `Docstring` as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以如下更新`Docstring`：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can redefine the time function and run the previous calculation again as
    follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以重新定义时间函数，然后再次运行先前的计算，如下所示：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will get the following output (just showing the last part for the sake
    of brevity) with additional information:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出（为简洁起见，仅显示最后一部分）以及其他信息：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Great! What other metrics you add? How about adding confidence intervals? That
    part will be left for you to exercise, but it should be fairly easy for you!
  prefs: []
  type: TYPE_NORMAL
  zh: 大！ 您还添加了哪些其他指标？ 如何添加置信区间？ 该部分将留给您锻炼，但是对您来说应该很容易！
- en: 'Let''s continue with the vector-matrix product:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续向量矩阵乘积：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供以下输出：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, matrix-matrix multiplication is given as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，矩阵矩阵乘法如下：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will give you an output similar to previous ones.
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供类似于先前输出的输出。
- en: Now, we have more or less an idea how challenging these tasks to perform for
    a computer. List of benchmark functions is complete with dot product added to
    matrix decomposition you saw in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们或多或少有了一个想法，即如何挑战如何在计算机上执行这些任务。 基准函数列表已完成，在上一章中您看到了将点积添加到矩阵分解中的信息。
- en: What you will do is create a Python script file that includes these calculations
    and statistics. Then, you will run this file in different configuration that you
    set up on AWS.
  prefs: []
  type: TYPE_NORMAL
  zh: 您将要做的是创建一个包含这些计算和统计信息的 Python 脚本文件。 然后，您将使用在 AWS 上设置的不同配置运行此文件。
- en: Let's have a look at `linalg_benchmark.py`, which you can find at [https://github.com/umitmertcakmak/Mastering_Numerical_Computing_with_NumPy/blob/master/Ch09/linalg_benchmark.py](https://github.com/umitmertcakmak/Mastering_Numerical_Computing_with_NumPy/blob/master/Ch09/linalg_benchmark.py).
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下`linalg_benchmark.py`，您可以在[`github.com/umitmertcakmak/Mastering_Numerical_Computing_with_NumPy/blob/master/Ch09/linalg_benchmark.py`](https://github.com/umitmertcakmak/Mastering_Numerical_Computing_with_NumPy/blob/master/Ch09/linalg_benchmark.py)
    中找到它。
- en: 'The following code block shows you the important part of `linalg_benchmark.py`
    script, which will be used to test different configurations that you have previously
    set up on AWS:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块向您展示了`linalg_benchmark.py`脚本的重要部分，该脚本将用于测试您先前在 AWS 上设置的不同配置：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There will be two separate runs:'
  prefs: []
  type: TYPE_NORMAL
  zh: 将有两个单独的运行：
- en: 1^(st) run with `dim = 100`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 <sup class="calibre32">st</sup> 与`dim = 100`一起运行
- en: 2^(nd) run with `dim = 500`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 <sup class="calibre32">和</sup>与`dim = 500`一起运行
- en: Let's have a look at the results.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下结果。
- en: Preparing for a performance benchmark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备性能基准
- en: 'For each instance and configuration, navigate to your `Home` directory and
    create a folder named `py_scripts`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个实例和配置，导航到您的`Home`目录并创建一个名为`py_scripts`的文件夹：
- en: '![](img/71b5bdc9-fabb-4070-9985-89ceab33443f.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71b5bdc9-fabb-4070-9985-89ceab33443f.png)'
- en: 'Create a file named `linalg_benchmark.py` with the following command and paste
    the contents:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建名为`linalg_benchmark.py`的文件并粘贴内容：
- en: '![](img/9aa9878f-ace1-4156-9c40-fb98f19ddb67.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aa9878f-ace1-4156-9c40-fb98f19ddb67.png)'
- en: 'After pasting the contents, type `:`, then type `wq!`, and *Enter* to save
    and quit:'
  prefs: []
  type: TYPE_NORMAL
  zh: 粘贴内容后，键入`:`，然后键入`wq!`和`Enter`保存并退出：
- en: '![](img/fef3b1d6-8f81-4b71-8f58-b915c9ffb4f7.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fef3b1d6-8f81-4b71-8f58-b915c9ffb4f7.png)'
- en: 'Now you can run this file with the following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下命令运行该文件：
- en: '![](img/aec20b2e-8717-429d-928b-2d3132bc3722.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aec20b2e-8717-429d-928b-2d3132bc3722.png)'
- en: 'For Anaconda distribution, you will run the script with the following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Anaconda 分发，您将使用以下命令运行脚本：
- en: '![](img/7ded6a60-0e2b-4702-9223-56f6258b6d60.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ded6a60-0e2b-4702-9223-56f6258b6d60.png)'
- en: Performance with BLAS and LAPACK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BLAS 和 LAPACK 的性能
- en: Here, you will run the `linalg_benchmark.py` script with BLAS and LAPACK. Connect
    to the **t2.micro** instance where you have this configuration, and run the script
    as shown in the previous section.
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将使用 BLAS 和 LAPACK 运行`linalg_benchmark.py`脚本。 连接到具有此配置的`t2.micro`实例，然后如上一节中所示运行脚本。
- en: '![](img/da9e67f5-f8b7-4d54-bc7e-c7c79c8cdee4.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da9e67f5-f8b7-4d54-bc7e-c7c79c8cdee4.png)'
- en: 'The following are the results of the run with `dim = 100`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 100`的运行结果：
- en: '![](img/da9e67f5-f8b7-4d54-bc7e-c7c79c8cdee4.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c368f9a-ec08-4b18-b19b-c624c86bcc8c.png)'
- en: 'The following are the results of the run with `dim = 500`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 500`的运行结果：
- en: '![](img/0c368f9a-ec08-4b18-b19b-c624c86bcc8c.png)'
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/0c368f9a-ec08-4b18-b19b-c624c86bcc8c.png)'
- en: Performance with OpenBLAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenBLAS 的性能
- en: Here, you will run `linalg_benchmark.py` script with OpenBLAS. Connect to **t2.micro**
    instance where you have this configuration, and run the script as shown in the
    previous section.
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将使用 OpenBLAS 运行`linalg_benchmark.py`脚本。 连接到具有此配置的`t2.micro`实例，然后运行上一节中显示的脚本。
- en: 'The following are the results of the run with `dim = 100`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 100`的运行结果：
- en: '![](img/90294475-3865-488a-ad81-774c87fda1ee.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90294475-3865-488a-ad81-774c87fda1ee.png)'
- en: 'The following are the results of the run with `dim = 500`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 500`的运行结果：
- en: '![](img/c09d200e-7fec-48f8-a80f-29c55be47084.png)'
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/c09d200e-7fec-48f8-a80f-29c55be47084.png)'
- en: Performance with ATLAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'ATLAS 的性能'
- en: Here, you will run the `linalg_benchmark.py` script with ATLAS. Connect to **t2.micro**
    instance where you have this configuration, run the script as shown in previous
    section.
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将使用 ATLAS 运行`linalg_benchmark.py`脚本。 连接到具有此配置的`t2.micro`实例，如上一节中所示运行脚本。
- en: 'The following are the results of the run with `dim = 100`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 100`的运行结果：
- en: '![](img/8e4ceff4-cabb-4c65-b790-c9b367d4d195.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e4ceff4-cabb-4c65-b790-c9b367d4d195.png)'
- en: 'The following are the results of the run with `dim = 500`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 500`的运行结果：
- en: '![](img/9097e7ac-a57d-4a27-b5e6-4650b9e84ad6.png)'
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/9097e7ac-a57d-4a27-b5e6-4650b9e84ad6.png)'
- en: Performance with Intel MKL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '英特尔 MKL 的性能'
- en: Here, you will run `linalg_benchmark.py` script with Intel MKL. Connect to **t2.micro**
    instance where you have this configuration, and run the script as shown in the
    previous section.
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将使用英特尔 MKL 运行`linalg_benchmark.py`脚本。 连接到具有此配置的`t2.micro`实例，然后运行上一节中显示的脚本。
- en: 'The following are the results of the run with `dim = 100`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 100`的运行结果：
- en: '![](img/a372c4c3-7c0b-4cd8-98b5-a4891534fec2.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a372c4c3-7c0b-4cd8-98b5-a4891534fec2.png)'
- en: 'The following are the results of the run with `dim = 500`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`dim = 500`的运行结果：
- en: '![](img/a922450d-3125-4e60-8c76-fa64a1ac4986.png)'
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/a922450d-3125-4e60-8c76-fa64a1ac4986.png)'
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果
- en: Of course, the **t2.micro** instance is fairly weak and you should know more
    about how Amazon provides this computing power for EC2 instances. You can read
    more about them at [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/).
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`t2.micro`实例相当薄弱，您应该更多地了解 Amazon 如何为 EC2 实例提供这种计算能力。 您可以在[`aws.amazon.com/ec2/instance-types`](https://aws.amazon.com/ec2/instance-types/)
    上阅读有关它们的更多信息。
- en: If you use more powerful machines with a higher number of cores, the performance
    difference will be more visible between different configurations.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用功能更强大的计算机并具有更多的内核，则不同配置之间的性能差异将更加明显。
- en: When it comes to results, it's no surprise that the default installation of
    BLAS and LAPACK gave us the baseline performance and optimized versions, such
    as OpenBLAS, ATLAS, and Intel MKL, gave better performance.
  prefs: []
  type: TYPE_NORMAL
  zh: 说到结果，毫不奇怪，默认安装的 BLAS 和 LAPACK 为我们提供了基准性能，而经过优化的版本（如 OpenBLAS，ATLAS 和英特尔 MKL）提供了更好的性能。
- en: As you have noted, you haven't changed a single line of code in your Python
    script and by just linking your NumPy library against different accelerators,
    you had huge performance gains.
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经指出的那样，您没有在 Python 脚本中更改任何代码行，而仅通过将 NumPy 库与不同的加速器链接起来，便获得了巨大的性能提升。
- en: If you will dig deeper into these low-level libraries to understand what are
    the specific routines and functions are provided, you will have a better idea
    of which parts of your program will benefit from these implementations.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将更深入地研究这些低级库以了解提供了哪些特定的例程和函数，则将更好地了解程序的哪些部分将从这些实现中受益。
- en: Of course, there are many other details that you might not understand at first.
    It might be the case that the functions you're using are not using the low-level
    library or doesn't parallelize the operations. There might be some cases where
    multithreading will or will not help. Knowledge and experience ultimately depend
    on your experiments, and you will be more proficient with various applications
    as you will learn from your own experience.
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，起初您可能还不了解许多其他细节。 可能是您使用的函数未使用低级库或未并行化操作的情况。 在某些情况下，多线程会或不会有所帮助。 知识和经验最终取决于您的实验，并且您将从自己的经验中学到东西，因此您将更加精通各种应用。
- en: Many researchers published the design and results of their experiments. A quick
    Google search will give you a bunch of resources to read and understand how these
    libraries perform with different hardware and software configurations.
  prefs: []
  type: TYPE_NORMAL
  zh: '许多研究人员发表了实验的设计和结果。 Google 的快速搜索将为您提供大量资源，以阅读和了解这些库在不同硬件和软件配置下的性能。'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '总结'
- en: In this chapter, you explored the performance of different configurations when
    you perform compute-intensive linear algebra operations.
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，您探讨了执行计算密集型线性代数运算时不同配置的性能。'
- en: Benchmarking is a serious business, and you at least have the basic skills now
    to run benchmarks. The material you have studied in this chapter is nowhere near
    complete, but it gave you an idea where to start, and you can definitely improve
    on many things.
  prefs: []
  type: TYPE_NORMAL
  zh: '基准测试是一项严肃的工作，您至少现在已经具备运行基准测试的基本技能。 您在本章中学习的材料远未完成，但是它为您提供了从哪里开始的想法，并且您肯定可以在许多方面进行改进。'
- en: One thing you can look at is how performance metrics behave when you increase
    the size of vectors and matrices gradually. Ideally, you'll need more powerful
    hardware, but **t2.micro** instances are free in most cases or very cheap to provision.
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以看到的一件事是，逐渐增加向量和矩阵的大小时性能指标的行为。 理想情况下，您将需要功能更强大的硬件，但是`t2.micro`实例在大多数情况下是免费的，或者提供的价格非常便宜。'
- en: As you will need to handle more compute-intensive workloads, it's important
    to understand what your options are, and which one will give you the best performance.
    You can run these kinds of simple experiment to at least have an idea about the
    performance, and it will help you a lot and save time and money.
  prefs: []
  type: TYPE_NORMAL
  zh: '由于您将需要处理更多的计算密集型工作负载，因此重要的是要了解您的选择以及哪种选择将为您带来最佳性能。 您可以运行这些简单的实验，至少对性能有所了解，这将为您带来很多帮助，并节省时间和金钱。'
- en: If you have come this far, congratulations! We believe going through all the
    chapters and studying the materials advanced your skills when it comes to Python
    scientific stack.
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您走了这么远，恭喜！ 我们认为，遍历所有章节并学习相关材料可以提高您在 Python 科学堆栈方面的技能。'
- en: We hope you enjoyed reading this book, and we would like to thank you for your
    time.
  prefs: []
  type: TYPE_NORMAL
  zh: '我们希望您喜欢阅读这本书，并感谢您的宝贵时间。'
