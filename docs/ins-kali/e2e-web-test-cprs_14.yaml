- en: '*Chapter 11*: Exercise – Stubbing and Spying XHR Requests'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：练习-存根和监视XHR请求'
- en: Before we get started on this chapter, you need to understand why we need to
    stub or spy requests and methods, and to do this, you will need an understanding
    of Cypress requests and how to test individual methods. The previous chapters
    have presented extensive knowledge on how you can easily get started on Cypress,
    and we have covered concepts relating to network requests and functional testing.
    In this chapter, we will be building on the concepts that we have gained in the
    previous chapters with the focus being a hands-on approach by use of examples
    and exercises.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，您需要了解为什么需要存根或监视请求和方法，为此，您需要了解Cypress请求以及如何测试单个方法。之前的章节已经介绍了如何轻松开始使用Cypress，并且我们已经涵盖了与网络请求和功能测试相关的概念。在本章中，我们将在之前章节中获得的概念基础上进行构建，重点是通过示例和练习的实践方法。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下关键主题：
- en: Understanding XHR requests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解XHR请求
- en: Understanding how to stub requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何存根请求
- en: Understanding how to spy on methods in a test
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何在测试中监视方法
- en: Once you've worked through each of these topics, you will be ready to get started
    on visual testing with Cypress.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 完成每个主题后，您将准备好开始使用Cypress进行视觉测试。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, we recommend that you clone the repository that contains the
    source code and all the tests, exercises, and solutions that we will write in
    this chapter from GitHub.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们建议您从GitHub克隆包含源代码、所有测试、练习和解决方案的存储库，这些内容将在本章中编写。
- en: The GitHub repository for this chapter can be found at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
    The source code for this chapter can be found in the `chapter-11` directory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub存储库可以在[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)找到。本章的源代码可以在`chapter-11`目录中找到。
- en: Inside our GitHub repository, we have a finance test application that we will
    use for the different examples and exercises of this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的GitHub存储库中，我们有一个财务测试应用程序，我们将在本章的不同示例和练习中使用。
- en: 'Important note: running commands in Windows'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：在Windows中运行命令
- en: 'NB: The default Windows Command Prompt and PowerShell do not correctly resolve
    the directory locations.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：默认的Windows命令提示符和PowerShell无法正确解析目录位置。
- en: Kindly follow the Windows commands listed further that work exclusively on Windows
    operating systems suffixed with the word `*windows`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请遵循进一步列出的适用于Windows操作系统的Windows命令，并在末尾加上`*windows`。
- en: 'To make sure the test application is running on your machine, run the following
    commands from the root folder directory of the application in the terminal on
    your machine:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保测试应用程序在您的计算机上运行，请在终端中从应用程序的根文件夹目录运行以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We have our tests in the `chapter-11` directory and the test application located
    in the root directory of the repository. To properly run our tests, we have to
    run both our application and the Cypress tests, as the tests run on the live application
    that runs locally on our machines. It is important to also note that the application
    will require the use of port `3000` for the frontend application and port `3001`
    for the server application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试位于`chapter-11`目录中，测试应用程序位于存储库的根目录中。为了正确运行我们的测试，我们必须同时运行我们的应用程序和Cypress测试，因为测试是在我们本地计算机上运行的实时应用程序上运行的。还要注意，应用程序将需要使用端口`3000`用于前端应用程序和端口`3001`用于服务器应用程序。
- en: The first command will navigate to the `cypress-realworld-app` directory where
    our application is located. Then the `npm run cypress-init` command will install
    the dependencies that the application requires to run and the `npm run cypress-app`
    command will start the application. Optionally, you can reset the application
    state using the `npm run cypress-app-reset` command. Resetting the application
    removes any data that has been added that was not part of the application, taking
    the application state back to when you cloned the repository.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将导航到我们的应用程序所在的`cypress-realworld-app`目录。然后，`npm run cypress-init`命令将安装应用程序运行所需的依赖项，`npm
    run cypress-app`命令将启动应用程序。可选地，您可以使用`npm run cypress-app-reset`命令重置应用程序状态。重置应用程序会删除任何不属于应用程序的已添加数据，将应用程序状态恢复到克隆存储库时的状态。
- en: Understanding XHR requests
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解XHR请求
- en: '**XMLHttpRequest** (**XHR**) is an API that exists in all modern-day browsers
    and takes the form of an object whose methods are used to transfer data between
    a web browser sending the requests and the web server serving responses. The XHR
    API is unique as we can use it to update a browser page without reloading the
    page, request and receive server data after a page loads, and even send data to
    the server as a background task. In this section, we will cover the basics of
    XHR requests and their importance when it comes to the process of writing our
    Cypress tests.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**XMLHttpRequest**（**XHR**）是现代浏览器中存在的API，它以对象的形式存在，其方法用于在Web浏览器发送请求和Web服务器提供响应之间传输数据。XHR
    API是独特的，因为我们可以使用它在不重新加载页面的情况下更新浏览器页面，请求和接收页面加载后的服务器数据，甚至将数据作为后台任务发送到服务器。在本节中，我们将介绍XHR请求的基础知识以及在编写Cypress测试过程中的重要性。'
- en: Utilizing XHR requests in tests
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在测试中利用XHR请求
- en: XHR requests are a developer's dream as they allow you to *silently* send and
    receive data from the server without worrying about issues such as errors or waiting
    times when the client application needs to reload to perform an action. While
    XHR is a dream to developers, it is a nightmare for testers as it introduces uncertainties
    such as being unable to know when a request will finish processing and even when
    data has been returned from the server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: XHR请求是开发人员的梦想，因为它们允许您*悄悄地*发送和接收来自服务器的数据，而不必担心诸如错误或等待时间等问题，当客户端应用程序需要重新加载以执行操作时。虽然XHR对开发人员来说是一个梦想，但对测试人员来说却是一场噩梦，因为它引入了诸如无法知道请求何时完成处理，甚至无法知道数据何时从服务器返回等不确定性。
- en: To solve the issue of XHR uncertainties, Cypress introduced the `cy.intercept()`
    command, which we have looked at in depth in both [*Chapter 9*](B15616_09_Final_NM_ePUB.xhtml#_idTextAnchor196),
    *Advanced Uses of Cypress Test Runner,* and [*Chapter 10*](B15616_10_Final_NM_ePUB.xhtml#_idTextAnchor211),
    *Exercise – Navigation and Network Requests,* in the network requests section.
    The `cy.intercept()` command listens to XHR responses and knows when Cypress has
    returned a response for a specific XHR request. With the `cy.intercept()` command,
    we can instruct Cypress to wait until the response for a particular request has
    been received, which makes it more deterministic when we are writing tests that
    wait for responses from a server.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决XHR不确定性的问题，Cypress引入了`cy.intercept()`命令，我们在[*第9章*](B15616_09_Final_NM_ePUB.xhtml#_idTextAnchor196)和[*第10章*](B15616_10_Final_NM_ePUB.xhtml#_idTextAnchor211)中深入研究了这个命令，分别是*高级Cypress测试运行*和*练习-导航和网络请求*中的网络请求部分。`cy.intercept()`命令监听XHR响应，并知道Cypress何时返回特定XHR请求的响应。使用`cy.intercept()`命令，我们可以指示Cypress等待直到接收到特定请求的响应，这使得我们在编写等待来自服务器的响应的测试时更加确定。
- en: 'The following code block from the `xhr-requests/xhr.spec.js` file shows the
    code to log a user into our finance test application. When a user is logged in,
    the application sends requests to the server to load the notifications, bank accounts,
    and transaction details that the application requires. These details are returned
    as XHR responses from the API server:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`xhr-requests/xhr.spec.js`文件中的以下代码块显示了将用户登录到我们的财务测试应用程序的代码。当用户登录时，应用程序会向服务器发送请求，以加载应用程序所需的通知、银行账户和交易明细。这些详细信息作为XHR响应从API服务器返回：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code block, we are logging a user in and waiting for Cypress
    to return XHR responses to our transaction, notification, and bank account requests
    that are sent from the server. The responses are only sent when there is a successful
    user login attempt. We can visualize how Cypress handles XHR requests in a test
    in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块中，我们正在登录用户，并等待Cypress返回我们从服务器发送的交易、通知和银行账户请求的XHR响应。只有在成功的用户登录尝试时才会发送响应。我们可以通过以下截图来可视化Cypress如何在测试中处理XHR请求：
- en: '![Figure 11.1 – XHR requests and responses from the server'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1-XHR请求和来自服务器的响应'
- en: '](image/Figure_11.1_B15616.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_11.1_B15616.jpg)'
- en: Figure 11.1 – XHR requests and responses from the server
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1-XHR请求和来自服务器的响应
- en: This screenshot shows the application making XHR requests to our server for
    `/bankAccounts`, `/transactions`, and `/notifications`. For our test to be deterministic
    and for us to wait for a specified time to ensure a successful login, we use the
    `cy.intercept()` command to check when the responses from the XHR requests have
    been sent back by the server and whether they have been sent back with the correct
    status codes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图显示了应用程序向我们的服务器发送`/bankAccounts`、`/transactions`和`/notifications`的XHR请求。为了使我们的测试具有确定性，并且为了等待指定的时间以确保成功登录，我们使用`cy.intercept()`命令来检查XHR请求的响应何时被服务器发送回来，以及它们是否以正确的状态码发送回来。
- en: 'Waiting for XHR responses in tests gives us significant advantages over tests
    that do not have any *fail mechanisms* that handle waits or tests that have explicit
    time waits. The alternative to waiting for XHR responses is to explicitly wait
    for a specific amount of time, which is only an estimation and not the exact time
    that Cypress waits for a particular response. Some of the advantages of waiting
    for responses to routes while running our tests are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中等待XHR响应给我们带来了明显的优势，这些优势超过了没有处理等待的*失败机制*或者具有显式时间等待的测试。等待XHR响应的替代方法是显式等待特定的时间量，这只是一个估计值，并不是Cypress等待特定响应的确切时间。在运行我们的测试时等待路由响应的一些优势如下：
- en: Being able to assert the returned XHR response object from the route
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够断言从路由返回的XHR响应对象
- en: Creating tests that are robust, hence reducing flakiness
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建健壮的测试，从而减少不稳定性
- en: Having failure messages that can be understood due to their preciseness
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有精确性的失败消息
- en: Being able to stub responses and "fake" server responses
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够存根响应和“伪造”服务器响应
- en: With these advantages highlighted, usage of XHR requests assists us to deterministically
    know when the responses are received and when Cypress can continue executing our
    commands, having received all the required responses for the application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过突出这些优势，使用XHR请求帮助我们确定地知道何时收到响应，以及Cypress何时可以继续执行我们的命令，已经收到了应用程序所需的所有响应。
- en: Recap – utilizing XHR requests in tests
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-在测试中利用XHR请求
- en: In this section, we learned about XHR requests, what they are, and how Cypress
    utilizes them to send and fetch requests from the application server. We also
    learned how we can wait for XHR responses to reduce flaky tests by deterministically
    waiting for the responses from our server responses. We also learned how XHR can
    assist us, how we can have precise failure messages, and even how we can assert
    responses from our server responses. Finally, we went through how we can use the
    `cy.intercept()` command with XHR responses and the potential benefits of being
    able to control the execution of our tests by reducing test uncertainties. In
    the next section, we will look at using stubbing to control the XHR responses
    from the server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了XHR请求，它们是什么，以及Cypress如何利用它们向应用程序服务器发送和获取请求。我们还学习了如何等待XHR响应以减少不稳定的测试，通过确定性地等待来自我们服务器响应的响应。我们还学习了XHR如何帮助我们，我们如何拥有精确的失败消息，甚至如何断言来自我们服务器响应的响应。最后，我们将通过使用`cy.intercept()`命令与XHR响应以及能够通过减少测试不确定性来控制测试执行的潜在好处。在下一节中，我们将看看如何使用存根来控制来自服务器的XHR响应。
- en: Understanding how to stub requests
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解如何存根请求
- en: Now that we know what XHR requests are, it is important to know how we can help
    Cypress test XHR requests, and better still, how we can avoid actual responses
    from the server and instead create our own "fake" responses that our application
    will interpret as the actual responses that have been sent from the server. In
    this section, we will look at how we can stub XHR requests to the server, when
    to stub requests, and the impact of stubbing server requests in our tests.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了什么是XHR请求，重要的是要知道我们如何帮助Cypress测试XHR请求，更重要的是，我们如何避免来自服务器的实际响应，而是创建我们自己的“假”响应，我们的应用程序将解释为来自服务器发送的实际响应。在本节中，我们将看看如何存根XHR请求到服务器，何时存根请求以及存根服务器请求对我们的测试的影响。
- en: Stubbing XHR requests
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存根XHR请求
- en: Cypress gives the flexibility of allowing users to either have their requests
    reach the server, or instead have stubbed responses when the requests to the server
    endpoints are made by the application. With the flexibility of Cypress, we even
    have the ability to allow some requests to pass through to the server while denying
    other requests and stubbing them instead. Stubbing XHR responses adds a layer
    of control to our tests. With stubbing, we are in control of the data returned
    to the client and we have access to change the response of the **body**, **status**,
    and **headers**, or even introduce a delay if we want to simulate network latency
    in the server response.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress灵活地允许用户要么使他们的请求到达服务器，要么在应用程序发出对服务器端点的请求时，使用存根响应。有了Cypress的灵活性，我们甚至可以允许一些请求通过到服务器，同时拒绝其他请求并代替它们进行存根。存根XHR响应为我们的测试增加了一层控制。通过存根，我们可以控制返回给客户端的数据，并且可以访问更改**body**、**status**和**headers**的响应，甚至在需要模拟服务器响应中的网络延迟时引入延迟。
- en: Advantages of stubbing requests
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存根请求的优势
- en: 'Having stubbed requests gives us more control over the responses that are returned
    to the tests and also over the data that will be received by the client making
    the requests to the server. The following are the advantages of stubbing our requests:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 存根请求使我们对返回给测试的响应以及由应用程序向服务器发出请求时将收到的数据具有更多控制。以下是存根请求的优势：
- en: Having control over the body, headers, and status of the responses.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对响应的body、headers和status具有控制权。
- en: Quick response times of the responses.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应的快速响应时间。
- en: No required code changes to the server.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器不需要进行任何代码更改。
- en: Network delay simulations can be added to the request.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以向请求添加网络延迟模拟。
- en: Next, let's also look at some disadvantages.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们也看看一些缺点。
- en: Disadvantages of stubbing requests
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存根请求的缺点
- en: 'While stubbing is a good way of handling XHR responses to Cypress client applications
    under test, it also comes with some downsides to our testing process as highlighted
    here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然存根是处理Cypress客户端应用程序测试中的XHR响应的一种好方法，但它也有一些缺点，如下所示：
- en: The inability to have test coverage on some server endpoints
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法对某些服务器端点进行测试覆盖。
- en: No guarantee that the response data and stubbed data are a match
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法保证响应数据和存根数据匹配
- en: It is recommended to stub XHR responses in the majority of tests to reduce the
    amount of time it takes to execute tests and also to have a healthy mix of stubbed
    and actual API responses from the server. XHR stubbing in Cypress is also best
    suited when working with JSON APIs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在大多数测试中存根XHR响应，以减少执行测试所需的时间，并且还要在存根和实际API响应之间有一个健康的混合。在Cypress中，XHR存根也最适合与JSON
    API一起使用。
- en: 'In the following code block, in the `xhr-requests/xhr-stubbing.spec.js` file,
    we are going to stub the `bankAccounts` endpoint and avoid making the actual requests
    to the server when we are running our application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`xhr-requests/xhr-stubbing.spec.js`文件的以下代码块中，我们将对`bankAccounts`端点进行存根，并在运行应用程序时避免实际请求到服务器：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code block, we have stubbed the `/bankaccounts` server response
    and instead of waiting for a response, we provided a response ourselves that is
    almost identical to the response that the server would have sent back. The following
    screenshot shows the successful stubbed response and the "fake" stubbed bank account
    information that we provided to our client using the stubbed response:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块中，我们对`/bankaccounts`服务器响应进行了存根，并且我们提供了一个几乎与服务器将要发送的响应几乎相同的响应，而不是等待响应。以下截图显示了成功的存根响应以及我们使用存根响应向客户端提供的“假”存根银行账户信息：
- en: '![Figure 11.2 – Stubbed XHR response in the client application'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.2 - 客户端应用程序中的存根XHR响应'
- en: '](image/Figure_11.2_B15616.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_11.2_B15616.jpg)'
- en: Figure 11.2 – Stubbed XHR response in the client application
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 - 客户端应用程序中的存根XHR响应
- en: In *Figure 11.2*, we can see that it is almost impossible to tell whether our
    response was stubbed or we received it from our server. With Cypress, it is impossible
    for the client application to recognize whether a response was genuinely sent
    from the server or was stubbed, a quality that makes Cypress an effective tool
    for intercepting requests and sending responses that would otherwise have taken
    a long time to be sent from the server. We will learn more about stubbing XHR
    responses in the following exercise.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图11.2*中，我们可以看到几乎不可能判断我们的响应是存根化的还是从服务器接收的。使用Cypress，客户端应用程序无法识别响应是真正从服务器发送的还是存根化的，这使得Cypress成为拦截请求并发送响应的有效工具，否则这些响应将需要很长时间才能从服务器发送。我们将在以下练习中了解更多关于存根化XHR响应的知识。
- en: Exercise 1
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1
- en: 'Using the financial application provided in the GitHub repository and located
    in the `cypress-realworld-app` directory, carry out the following exercise to
    test your knowledge on stubbing XHR responses. The solutions to the exercise can
    be found in the `chapter-11/integration/xhr-requests-exercises` directory:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub存储库中提供的金融应用程序，位于`cypress-realworld-app`目录中，进行以下练习，以测试您对存根化XHR响应的了解。练习的解决方案可以在`chapter-11/integration/xhr-requests-exercises`目录中找到：
- en: Stub the login POST request of the application and instead of returning the
    name of the test user in the dashboard, change it to reflect your name and your
    username.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存根化应用程序的登录POST请求，而不是在仪表板中返回测试用户的名称，而是更改为反映您的名称和用户名。
- en: 'Assert that the response returned does indeed have your username and name information
    that was stubbed. The following screenshot shows the information on the page that
    should change:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 断言返回的响应确实包含您的用户名和名称信息，这些信息已经被存根化。以下屏幕截图显示了应更改的页面信息：
- en: '![Figure 11.3 – Change the name and username by stubbing the login response'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.3 - 通过存根化登录响应来更改名称和用户名'
- en: '](image/Figure_11.3_B15616.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_11.3_B15616.jpg)'
- en: Figure 11.3 – Change the name and username by stubbing the login response
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 - 通过存根化登录响应来更改名称和用户名
- en: Important note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To properly stub a response, you need to understand what the server sends as
    a response when the route is not stubbed. To do this, open the browser console
    on your browser, click the **Network** tab, and then select the **XHR filter**
    option. You can now see all the responses and requests sent to the server and
    received by your client. To get the specific request to a stub, you should click
    the exact request and copy the response from the **Response** tab of the browser
    console's **Network** window. The exact response (or a response that is similar
    in structure) is what we should use to stub our server responses so as to ensure
    the consistency of responses to our client. From the **Network** window, we can
    also obtain information such as the headers sent and received with the request,
    and the actual URL that is used to send the requests to the server.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要正确地存根化响应，您需要了解服务器在路由未存根化时发送的响应。为此，请在浏览器上打开浏览器控制台，单击**网络**选项卡，然后选择**XHR过滤器**选项。现在您可以看到所有发送到服务器并由客户端接收的响应和请求。要获取特定请求以进行存根化，您应单击确切的请求并从浏览器控制台的**网络**窗口的**响应**选项卡中复制响应。确切的响应（或结构类似的响应）是我们应该用来存根化我们的服务器响应，以确保对客户端的响应一致性。从**网络**窗口，我们还可以获取有关与请求一起发送和接收的标头以及用于将请求发送到服务器的实际URL的信息。
- en: 'The following screenshot shows an example of the **notifications** XHR response
    from the server:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了服务器返回的**通知**XHR响应的示例：
- en: '![Figure 11.4 – Server XHR response for notifications endpoint on the Chrome
    browser console'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.4 - Chrome浏览器控制台上通知端点的服务器XHR响应'
- en: '](image/Figure_11.4_B15616.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_11.4_B15616.jpg)'
- en: Figure 11.4 – Server XHR response for notifications endpoint on the Chrome browser
    console
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 - Chrome浏览器控制台上通知端点的服务器XHR响应
- en: After a successful login, select a random transaction from the `Everyone Dashboard`
    tab and modify the transaction amount to be $100.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功登录后，从`Everyone Dashboard`选项卡中选择一个随机交易，并将交易金额修改为$100。
- en: From this exercise, you not only learned how to stub XHR responses but also
    how the client handles the data that it has received from the server. By understanding
    the benefits of XHR response stubbing, you are now ready to tackle complex Cypress
    tests that involve stubbed responses.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，您不仅学会了如何存根化XHR响应，还学会了客户端如何处理从服务器接收到的数据。通过了解XHR响应存根化的好处，您现在已经准备好处理涉及存根化响应的复杂Cypress测试了。
- en: Recap – understanding how to stub requests
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 了解如何存根请求
- en: In this section, we learned how to use XHR server requests to receive requests
    and also to intercept the requests sent by using stubs. We also learned how with
    stubs, we can control the nature of the responses we send back to the client application,
    and also how we can assert our stubbed responses that look similar to the client
    responses that we receive from the server. Finally, we learned how we can use
    our browser to identify which responses to stub, and use the content of the responses
    that we are stubbing. In the next section, we will look at how spying works and
    how we can utilize it in our Cypress methods.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用XHR服务器请求来接收请求，还学习了如何通过存根来拦截发送的请求。我们还学习了如何使用存根来控制我们发送回客户端应用程序的响应的性质，以及如何断言我们的存根化响应看起来与我们从服务器接收到的客户端响应类似。最后，我们学习了如何使用浏览器来识别哪些响应需要存根，并使用我们正在存根的响应的内容。在下一节中，我们将看看间谍工作的原理以及如何在我们的Cypress方法中利用它。
- en: Understanding how to spy on methods in a test
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解如何在测试中对方法进行间谍
- en: Spies and stubs are closely related with the difference being that, unlike stubs,
    which can be used to modify data of a method or a request, spies only obtain the
    state of the method or request and do not have the ability to modify the method
    or the request. They work just like real-life spies who only track and report.
    Spies help us understand the execution of tests, what elements have been called,
    and what has been executed. In this section, we will learn about the concept of
    spying in Cypress, the advantages of spying on methods, and how we can utilize
    spying to write better Cypress tests.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍和存根密切相关，不同之处在于，与可以用于修改方法或请求的数据的存根不同，间谍仅获取方法或请求的状态，并且无法修改方法或请求。它们就像现实生活中的间谍一样，只跟踪和报告。间谍帮助我们了解测试的执行情况，哪些元素已被调用，以及已执行了什么。在本节中，我们将学习Cypress中间谍的概念，监视方法的优点以及如何利用监视编写更好的Cypress测试。
- en: Why spy?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要监视？
- en: We use spies in Cypress to record calls in a method along with the arguments
    of the method. By using spies, we can assert that a specific method was called
    a certain number of times and was called with the right arguments. We can even
    tell what the return values of a method were, or the execution context of the
    method at the time it was called. Spies are mostly used in the unit testing context
    but also have applications in the integration context, such as testing that two
    functions have proper integration with each other and that they work harmoniously
    when executed together. When executed, the `cy.spy()` command returns a value
    instead of a promise like almost all the other Cypress commands. The `cy.spy()`
    command does not have a timeout and cannot be chained further with other Cypress
    commands.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Cypress中使用间谍来记录方法的调用以及方法的参数。通过使用间谍，我们可以断言特定方法被调用了特定次数，并且使用了正确的参数进行了调用。我们甚至可以知道方法的返回值，或者在调用时方法的执行上下文。间谍主要用于单元测试环境，但也适用于集成环境，例如测试两个函数是否正确集成，并且在一起执行时能够和谐工作。执行`cy.spy()`命令时返回一个值，而不是像几乎所有其他Cypress命令一样返回一个promise。`cy.spy()`命令没有超时，并且不能进一步与其他Cypress命令链接。
- en: Advantages of spies
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 间谍的优点
- en: 'The following are some of the advantages of using spies in tests:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在测试中使用间谍的一些优点：
- en: Spies do not modify the requests or methods called.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间谍不会修改调用的请求或方法。
- en: Spies give you the ability to quickly verify whether methods have been called.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间谍使您能够快速验证方法是否已被调用。
- en: They offer an easy way to test functional integration.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提供了一种测试功能集成的简单方法。
- en: 'Spying is an interesting concept as it introduces a way to monitor methods
    without necessarily taking an action on the outcome. In the following code block,
    we have a test that consists of a simple function to sum two numbers:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 监视是一个有趣的概念，因为它引入了一种在不必对结果采取行动的情况下监视方法的方式。在下面的代码块中，我们有一个测试，其中包含一个简单的函数来求两个数字的和：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding method, we have set `cy.spy()` to monitor our `sum` method
    and trigger the spy when the method is called or when it is called with arguments.
    Whenever the method is called, our spy will record the number of times it was
    called, and we can also go ahead and check whether or not our method was called
    with any arguments. The `sum` function is inside a JavaScript object, and the
    trigger for the spy method is the `obj.sum(1, 2)` sum function call, which is
    called before our assertions are executed in the test. The following screenshot
    shows the spies, the number of calls, and the aliases of the test:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方法中，我们设置了`cy.spy()`来监视我们的`sum`方法，并在调用方法或使用参数调用方法时触发间谍。每当方法被调用时，我们的间谍将记录它被调用的次数，我们还可以继续检查我们的方法是否被调用了任何参数。`sum`函数位于JavaScript对象中，触发间谍方法的是`obj.sum(1,
    2)` sum函数调用，在我们的测试中的断言执行之前被调用。以下屏幕截图显示了间谍、调用次数和测试的别名：
- en: '![Figure 11.5 – Spying on a sum method'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.5 - 监视sum方法'
- en: '](image/Figure_11.5_B15616.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_11.5_B15616.jpg)'
- en: Figure 11.5 – Spying on a sum method
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 - 监视sum方法
- en: Looking at this method that uses the `cy.spy()` method on the `sum()` function,
    we can see that both the spies of the `sum` method and the `sum` method called
    with arguments were triggered once the `sum` method started executing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 查看使用`cy.spy()`方法在`sum()`函数上的方法，我们可以看到`sum`方法的间谍和使用参数调用的`sum`方法在`sum`方法开始执行时都被触发了一次。
- en: 'In the next example, we will explore a more complex scenario where we will
    try to spy on a method that returns all the transactions in our JSON database
    from the server. The following code block shows the spy of the method that will
    fetch all of our transactions:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将探索一个更复杂的场景，我们将尝试监视一个从服务器返回我们JSON数据库中所有交易的方法。以下代码块显示了将获取所有交易的方法的间谍：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this test, we are verifying that the request to fetch the transactions from
    the database takes place. With this test, we can monitor our method and check
    that the proper arguments are passed to our method when it is called.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们正在验证从数据库获取交易的请求是否发生。通过这个测试，我们可以监视我们的方法，并检查在调用方法时是否传递了正确的参数。
- en: It is clear that, with spies, we are able to identify which methods were called,
    how many times they were called, and what arguments were used when the method
    was called. We will learn more about spies in the following exercise.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，使用间谍，我们能够确定调用了哪些方法，它们被调用了多少次，以及在调用方法时使用了什么参数。我们将在下一个练习中了解更多关于间谍的知识。
- en: Exercise 2
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2
- en: 'Using the financial application provided in the GitHub repository and located
    in the `cypress-realworld-app` directory, carry out the following exercises to
    test your knowledge of stubbing XHR responses. The solutions to the exercise can
    be found in the `chapter-11/integration/spies-exercise` directory:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub存储库中提供的金融应用程序，位于`cypress-realworld-app`目录中，进行以下练习，以测试您对存根XHR响应的了解。练习的解决方案可以在`chapter-11/integration/spies-exercise`目录中找到：
- en: Create a method called `Area` that calculates the area of a triangle, spy on
    the `area` method, and call the method to assert that indeed the `area` method
    is called and spied by `cy.spy()`. Assert that the method was also called with
    the `base` and `height` arguments.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Area`的方法来计算三角形的面积，对`area`方法进行间谍活动，并调用该方法来断言确实使用了`cy.spy()`对`area`方法进行了间谍活动。断言该方法也是使用`base`和`height`参数进行调用的。
- en: Using our application, log in as a user and spy on the API request method to
    fetch all the bank accounts of that logged-in user. Assert that the method to
    make the API request to the server was called and that the arguments were passed
    as parameters to the method.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的应用程序，以用户身份登录并对API请求方法进行间谍活动，以获取该已登录用户的所有银行账户。断言已调用该方法向服务器发出API请求，并且参数作为方法的参数传递。
- en: This exercise will assist you in understanding how spies work in Cypress and
    the different methods that can be used with `cy.spy()` to find the contents of
    the methods that are being spied on. By spying on methods, we are also able to
    tell whether or not the method arguments are called and how they were called,
    together with the return values.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习将帮助你了解间谍在Cypress中是如何工作的，以及可以使用`cy.spy()`的不同方法来查找被监视的方法的内容。通过监视方法，我们还能够判断方法参数是否被调用以及它们是如何被调用的，还有返回值。
- en: Recap – understanding how to spy on methods in a test
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-了解如何在测试中对方法进行间谍活动
- en: In this section, we learned about spying, covering how important spying is and
    how different it is from stubbing, as we are not allowed to change the values
    of the method or the request being spied on. We also learned how we can use stubbing
    to identify the arguments of a method, the number of times a method was called,
    the execution context, and also the return values of the methods being spied on.
    Using the examples and the exercise, we also got to interact with the `cy.spy()`
    command, which helped us to understand the command and how it works in the context
    of methods.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了关于间谍活动的重要性以及它与存根活动的不同之处，因为我们不被允许改变被监视方法或请求的值。我们还学会了如何使用存根活动来识别方法的参数、方法被调用的次数、执行上下文，以及被监视方法的返回值。通过例子和练习，我们还学会了如何与`cy.spy()`命令进行交互，这帮助我们了解了该命令以及它在方法上下文中的工作方式。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter's focus was mainly on XHR requests and responses and how they interact
    with the client and the server. We started by first understanding what XHR requests
    and responses are and how important they are when we want to send requests from
    the client and also receive requests from the server. In this chapter, we also
    looked at how we can "fake" server responses by stubbing XHR responses using the
    Cypress stub functionality that is built into the `cy.intercept()` command. Finally,
    we explored the Cypress `cy.spy()` command, which further gave us an idea of how
    we can monitor methods in Cypress and get the ability to find out the number of
    times the methods were executed, how they were executed, their arguments, and
    even their return values. In the final section, we learned the importance of knowing
    that with spying, we can only "observe" how the execution takes place, and not
    necessarily have the ability to change the execution process of the request or
    the methods that are being tested.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章的重点主要是XHR请求和响应以及它们如何与客户端和服务器进行交互。我们首先了解了XHR请求和响应是什么，以及当我们想要从客户端发送请求并从服务器接收请求时它们是多么重要。在这一章中，我们还看到了如何通过使用内置在`cy.intercept()`命令中的Cypress存根功能来存根XHR响应来“伪造”服务器响应。最后，我们探讨了Cypress
    `cy.spy()`命令，这进一步让我们了解了如何在Cypress中监视方法，并获得找出方法被执行的次数、它们是如何被执行的、它们的参数，甚至它们的返回值的能力。在最后一节中，我们学会了知道通过间谍，我们只能“观察”执行的过程，而不一定有能力改变被测试的请求或方法的执行过程。
- en: I believe that through this chapter, you have gained the skills of knowing what
    XHR requests are, how they work, how to stub them, and how to spy on Cypress methods.
    In the next chapter, we will look at visual testing in Cypress.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信通过这一章，你已经掌握了XHR请求是什么，它们是如何工作的，如何对它们进行存根，以及如何在Cypress中进行间谍活动的技能。在下一章中，我们将看看Cypress中的视觉测试。
