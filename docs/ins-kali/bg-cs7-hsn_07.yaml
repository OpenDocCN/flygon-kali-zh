- en: Expression-Bodied Lambdas and Expression-Bodied Members
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式主体Lambda和表达式主体成员
- en: In this chapter, you will learn about expression-bodied members and then Lambda
    expressions that are defined by blocks of code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习关于表达式主体成员，然后是由代码块定义的Lambda表达式。
- en: Adding a box and a Find Max button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加一个框和一个Find Max按钮
- en: Bring up a project, and we will set up a box, read three values from this box,
    and then find the maximum value. We'll also do some other things such as learning
    how to convert from an array of one data type to another.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，我们将设置一个框，从该框中读取三个值，然后找到最大值。我们还将做一些其他事情，比如学习如何从一个数据类型的数组转换为另一个数据类型的数组。
- en: 'Let''s begin by typing `Enter Values:` under the line beginning with `<form
    id=...`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在以`<form id=...`开头的行下方输入`Enter Values:`开始：
- en: 'Then, go to Toolbox, grab a `Textbox` control, and put that after Enter Values:.
    You can delete the `<div>` lines as you don''t need them. Be sure to insert a
    `<br>` tag at the end of the line:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到工具箱，获取一个`Textbox`控件，并将其放在Enter Values:之后。您可以删除`<div>`行，因为您不需要它们。确保在行末插入`<br>`标签：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the next stage, you''ll insert a `Button` control; so get one from the Toolbox
    and drop it below this line. Change the text on the button to say Find Max. Again,
    end the line with a `<br>` tag:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，您将插入一个`Button`控件；所以从工具箱中获取一个并将其放在此行下方。将按钮上的文本更改为Find Max。再次以`<br>`标签结束该行：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Your HTML file for this project should look like *Figure 7.2.1*:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目的HTML文件应该像*图7.2.1*那样：
- en: '![](img/2b6d180a-8f91-4861-a83e-1442af457118.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b6d180a-8f91-4861-a83e-1442af457118.png)'
- en: 'Figure 7.2.1: The HTML file for this project'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2.1：该项目的HTML文件
- en: 'Now go to the Design view. All that we now have is a box and a button, as shown
    in *Figure 7.2.2*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到设计视图。我们现在只有一个框和一个按钮，如*图7.2.2*所示：
- en: '![](img/108d4d44-a08c-4f88-95ee-c5448e9bbc3b.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/108d4d44-a08c-4f88-95ee-c5448e9bbc3b.png)'
- en: 'Figure 7.2.2: Our simple interface in the Design view'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2.2：我们在设计视图中的简单界面
- en: Next, double-click on the Find Max button to go to the `Default.aspx.cs` file,
    and delete everything. The code in this chapter will be somewhat sophisticated
    and perhaps a little more challenging than that of previous chapters, but it's
    the best way to grow and move forward. I will go through the construction of the
    code line by line. By now, you should be able to see what it takes to begin to
    program well and how much you have to know.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，双击Find Max按钮转到`Default.aspx.cs`文件，并删除所有内容。本章中的代码可能会有些复杂，也许比以前的章节更具挑战性，但这是成长和前进的最佳方式。我将逐行讲解代码的构建过程。到目前为止，您应该能够看到开始良好编程所需的条件以及您需要了解的内容。
- en: Making the delegate
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建委托
- en: 'Enter `using System` as usual at the very top of the file. Next, to make a
    delegate, enter the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，在文件的顶部输入`using System`。接下来，要创建一个委托，请输入以下内容：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this line, you have a `delegate` class. It returns a `double` and accepts
    two `double` data types. So, it encapsulates functions that have that kind of
    signature.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，您有一个`delegate`类。它返回一个`double`并接受两个`double`数据类型。因此，它封装了具有这种签名的函数。
- en: 'In the next stage, you''ll enter the following within curly braces:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，您将在大括号内输入以下内容：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This line inherits from `Page` as usual.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行像往常一样继承自`Page`。
- en: Defining an expression-bodied member
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个表达式主体成员
- en: 'In the next stage, we will begin by defining an expression member, so enter
    the following between a set of curly braces:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，我们将开始定义一个表达式成员，因此在一对大括号之间输入以下内容：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This line shows a new way of creating functions. That's what this is essentially.
    Instead of putting curly braces within the line, you can now just put something
    such as a Lambda expression, `=>` in this case. Then the thing to be converted
    to a `double` data type will be the `s` string. It's also more streamlined; it
    looks a little more modern, like an expression-bodied member, like a function.
    Remember that functions are members of classes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行展示了创建函数的一种新方法。这本质上就是这样。现在，您可以不在行内放大括号，而是可以直接放一个Lambda表达式，例如在这种情况下是`=>`。然后要转换为`double`数据类型的是`s`字符串。它也更加简洁；看起来更现代化，像一个表达式主体成员，像一个函数。请记住，函数是类的成员。
- en: 'So, in the next stage, we''ll define the Button click event below this line.
    If you go back to the Design view and double-click the button, it''ll stick in
    the following line automatically:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在下一阶段，我们将在此行下方定义按钮点击事件。如果您返回到设计视图并双击按钮，它将自动插入以下行：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, enter the following between a set of curly braces beneath the preceding
    line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在上一行下方的大括号之间输入以下内容：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Converting an array of strings into an array of doubles
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将字符串数组转换为双精度数组
- en: 'Next, let''s convert that array of strings into an array of doubles using a
    different approach; to do this, enter the following below this line:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用不同的方法将字符串数组转换为双精度数组；为此，请在此行下面输入以下内容：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice the `ConvertAll` method. It's not so easy to use. You need to have an
    array on which you'll operate. So, in this case, the array is called `vals`, and
    then there needs to be something called a *converter object* (note that the popup
    shows `Converter<TInput, TOutput> converter>`). To make a converter, you enter
    `new Converter`, and then, in this case, you will transform an array of strings
    into an array of doubles. So, string is the one you're converting from, and double
    is the type to which you are converting. This new converter really just wraps
    a function call, so after that you enter `(FromStringToDouble)`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`ConvertAll`方法。它并不容易使用。您需要有一个要操作的数组。因此，在这种情况下，数组称为`vals`，然后需要有一个称为*转换器对象*的东西（请注意弹出窗口显示`Converter<TInput,
    TOutput> converter>`）。要创建一个转换器，您输入`new Converter`，然后在这种情况下，您将把一个字符串数组转换为双精度数组。因此，字符串是您要转换的内容，双精度是您要转换的类型。这个新的转换器实际上只是包装了一个函数调用，因此在那之后，您输入`(FromStringToDouble)`。
- en: The preceding line will accomplish the conversion of the array from one data
    type to another. Remember, ultimately, it'll grab each value and hit it with `Convert.ToDouble(s)`
    from the line near the top.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行将完成将数组从一种数据类型转换为另一种数据类型。记住，最终它会获取每个值并使用顶部附近的`Convert.ToDouble(s)`进行转换。
- en: 'Next, enter the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下内容：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, `CompareValues` is a delegate type—it's like a data type—and we'll name
    it `compareValues`, and then you define a new Lambda `(xin, yin)=>`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`CompareValues`是一个委托类型——就像一个数据类型——我们将其命名为`compareValues`，然后定义一个新的Lambda`(xin,
    yin)=>`。
- en: Creating an expression-bodied lambda
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个表达式体lambda
- en: 'Next, you''ll define the body of the Lambda. Because this lambda will do several
    things, you can enclose the body of it within a set of curly braces as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将定义Lambda的主体。因为这个Lambda将做几件事，你可以将它的主体放在一对大括号中，如下所示：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So, this line assigns the values from the parameters above.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这一行将分配上面参数的值。
- en: 'Next enter the following directly below this line:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来直接在这行下面输入以下内容：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, if `x` is greater than `y`, then return `x`; otherwise, return `y`. This
    is an expression-bodied Lambda, and you close it at the end with a semicolon after
    the closed curly brace, like this `};`. As you can see, this Lambda expression
    spans multiple lines. So, you can again inline code just as with the preceding
    line, using the `double FromStringToDouble(string s) => Convert.ToDouble(s);`
    function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果`x`大于`y`，则返回`x`；否则，返回`y`。这是一个表达式体Lambda，在结束时使用封闭的大括号后加上分号，就像这样`};`。正如你所看到的，这个Lambda表达式跨越了多行。因此，你可以像前一行一样再次内联代码，使用`double
    FromStringToDouble(string s) => Convert.ToDouble(s);`函数。
- en: Comparing values
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较值
- en: 'In the next stage of the process, we will compare values. To do this, enter
    the following after the closed curly brace/semicolon beneath the preceding line:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个阶段的过程中，我们将比较值。为此，在上一行的封闭大括号/分号之后输入以下内容：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `CompareValuesInList` is a function that you can create. Then you'll pass
    in `compareValues`. In other words, when this line says `compareValues`, the entire
    `CompareValues` block from above will be passed into the body of the function.
    You've never done this before. You're passing around entire blocks of code! Next,
    you enter `doubleVals[0]` to get the first value, and then you can copy (*Ctrl*
    + *C*) and repeat this for the other ones at index 1 as `doubleVals[1]` and at
    index 2 as `doubleVals[2]` because there are three of them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`CompareValuesInList`是一个你可以创建的函数。然后你将传入`compareValues`。换句话说，当这一行说`compareValues`时，整个上面的`CompareValues`块将被传递到函数的主体中。你以前从未这样做过。你正在传递整个代码块！接下来，你输入`doubleVals[0]`来获取第一个值，然后你可以复制（*Ctrl*
    + *C*）并重复这个操作，索引为1的值为`doubleVals[1]`，索引为2的值为`doubleVals[2]`，因为有三个值。
- en: Specifying the parameters
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定参数
- en: 'Now, in the next stage, enter the following underneath the closed curly brace
    after the preceding line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一个阶段，在上一行之后的封闭大括号下面，输入以下内容：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After `CompareValuesInList`, you'll specify the parameters. So, the first one
    will be `CompareValues`. This indicates that a delegate can also be used as a
    type for a parameter. We'll give it the name `compFirstTwo`. Then, you do the
    `double first`, `double second`, and `double third` parameter. So, there are the
    three values to be passed in.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CompareValuesInList`之后，你将指定参数。所以，第一个参数将是`CompareValues`。这表明委托也可以用作参数的类型。我们将其命名为`compFirstTwo`。然后，你做`double
    first`、`double second`和`double third`参数。所以，有三个值要传入。
- en: 'Next, enter the following within a set of curly braces beneath the preceding
    line:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在上一行之后的一对大括号中输入以下内容：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What this line is saying is that, if `third` is greater than the result of comparing
    the first two `compFirstTwo(first, second)` parameter—(remember, this expression
    will run first, and then will return a value comparing the first two—), then it
    returns the third; otherwise, it will run `compFirstTwo` again and return the
    bigger of those two.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行的意思是，如果`third`大于比较前两个`compFirstTwo(first, second)`参数的结果（记住，这个表达式会先运行，然后返回一个比较前两个的值），那么它返回`third`；否则，它会再次运行`compFirstTwo`并返回这两个中较大的一个。
- en: Running the program
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'What you have here is very sophisticated code. Now crank it up in your browser,
    and take a look at the results. Enter some values, say `1`,`5`, and `-3`, and
    click on the Find Max button. The result is 5, as you can see in *Figure 7.2.3*:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里看到的是非常复杂的代码。现在在浏览器中加速它，并查看结果。输入一些值，比如`1`、`5`和`-3`，然后单击“查找最大”按钮。结果是5，如*图7.2.3*所示：
- en: '![](img/840e5c4b-651f-436b-be02-a641e4e8e3aa.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/840e5c4b-651f-436b-be02-a641e4e8e3aa.png)'
- en: 'Figure 7.2.3: Preliminary results of running the program with pure integer
    values'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2.3：使用纯整数值运行程序的初步结果
- en: 'Next, enter something such as `1.01`, `1.02`, and `0.9999`, and click on the
    Find Max button. The result is 1.02, as you can see in *Figure 7.2.4*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入诸如`1.01`、`1.02`和`0.9999`之类的内容，然后单击“查找最大”按钮。结果是1.02，如*图7.2.4*所示：
- en: '![](img/380146ea-ff4a-4d24-9c54-5f3cc5151db4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/380146ea-ff4a-4d24-9c54-5f3cc5151db4.png)'
- en: 'Figure 7.2.4: Results of running the program with extended decimal values'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2.4：使用扩展小数值运行程序的结果
- en: So, the program is working as expected.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，程序正在按预期工作。
- en: 'Again, to review, because there''s a lot of code here, we did the following
    in this program:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 再次回顾一下，因为这里有很多代码，我们在这个程序中做了以下工作：
- en: First, we declared a delegate.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们声明了一个委托。
- en: Then we declared an expression-bodied member, which, in this context of this
    code, is a function that's defined essentially with a Lambda.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们声明了一个表达式体成员，在这段代码的上下文中，它是一个基本上用Lambda定义的函数。
- en: Next, we made an array of values.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一个值数组。
- en: Then we created a line to convert the values from a `string` type to a `double`
    type.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们创建了一行来将值从`string`类型转换为`double`类型。
- en: After that, we made an expression-bodied Lambda.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们创建了一个表达式体Lambda。
- en: Then we built a function called `CompareValuesInList` that takes that Lambda
    as an argument and then also looks at the other values.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们构建了一个名为`CompareValuesInList`的函数，它将Lambda作为参数，然后还会查看其他值。
- en: Finally, `CompareValuesInList` is where the magic really happens, because it
    says that, if the `third` value is bigger than either of the two first compared,
    then you return the `third` value. However, if it's not, then simply return the
    one that is the bigger of the first two.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`CompareValuesInList`是魔术真正发生的地方，因为它说，如果`third`值比前两个比较的值都大，那么你就返回`third`值。然而，如果不是，那么就简单地返回前两个中较大的那个。
- en: I know this doesn't seem like an easy thing to do. I know this because I've
    done this before. You must absolutely add this level of coding, however. Type
    it, run it, and process it; then you will develop your understanding quickly enough.
    These are the fundamentals of making some of this stuff useful.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这似乎不是一件容易的事情。我知道这是因为我以前做过这个。然而，你必须绝对添加这个编码水平。输入它，运行它，处理它；然后你会很快发展你的理解。这些是使一些东西有用的基础。
- en: Chapter review
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释在内的本章的`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about expression-bodied members and then Lambda
    expressions, which are defined by blocks of code. You made a delegate, defined
    an expression-bodied member, converted an array of strings into an array of doubles,
    created an expression-bodied lambda, and built the code to compare values and
    specified parameters.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了表达式主体成员，然后是Lambda表达式，它们由代码块定义。你创建了一个委托，定义了一个表达式主体成员，将字符串数组转换为双精度数组，创建了一个表达式主体的Lambda，并构建了比较值和指定参数的代码。
- en: In the next chapter, you will learn about anonymous functions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习有关匿名函数的知识。
