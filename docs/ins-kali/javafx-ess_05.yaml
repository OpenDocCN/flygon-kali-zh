- en: Chapter 5. Developing a JavaFX Application for iOS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。为iOS开发JavaFX应用程序
- en: Apple has a great market share in the mobile and PC/Laptop world, with many
    different devices, from mobile phones such as the iPhone to musical devices such
    as the iPod and tablets such as the iPad.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果在移动和PC /笔记本世界拥有很大的市场份额，拥有许多不同的设备，从iPhone等手机到iPod等音乐设备和iPad等平板电脑。
- en: It has a rapidly growing application market, called the Apple Store, serving
    its community, where the number of available apps increases daily. Mobile application
    developers should be ready for such a market.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 它拥有一个快速增长的应用市场，称为Apple Store，为其社区提供服务，可用应用程序的数量每天都在增加。移动应用程序开发人员应该为这样的市场做好准备。
- en: Mobile application developers targeting both iOS and Android face many challenges.
    By just comparing the native development environments of these two platforms,
    you will find that they differ substantially.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 同时针对iOS和Android的移动应用程序开发人员面临许多挑战。仅仅比较这两个平台的本机开发环境，就会发现它们存在实质性的差异。
- en: iOS development, according to Apple, is based on the **Xcode IDE (**[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)**)**
    and its programming languages. Traditionally, it was **Objetive-C** and, in June
    2014, Apple introduced **Swift** ([https://developer.apple.com/swift/](https://developer.apple.com/swift/));
    on the other hand, *Android* development, as defined by Google, is based on the
    Intellij IDEA IDE and the Java programming language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 根据苹果的说法，iOS开发基于Xcode IDE（[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)）及其编程语言。传统上是Objetive-C，2014年6月，苹果推出了Swift（[https://developer.apple.com/swift/](https://developer.apple.com/swift/)）；另一方面，根据谷歌的定义，Android开发基于Intellij
    IDEA IDE和Java编程语言。
- en: Not many developers are proficient in both environments. In addition, these
    differences rule out any code reuse between the platforms.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 没有多少开发人员精通两种环境。此外，这些差异排除了平台之间的任何代码重用。
- en: JavaFX 8 is filling the gap for reusable code between the platforms, as we will
    see in this chapter, by sharing the same application in both platforms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 8正在填补平台之间可重用代码的差距，正如我们将在本章中看到的，通过在两个平台上共享相同的应用程序。
- en: 'Here are some skills that you will have gained by the end of this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将掌握以下一些技能：
- en: Installing and configuring iOS environment tools and software
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置iOS环境工具和软件
- en: Creating iOS JavaFX 8 applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建iOS JavaFX 8应用程序
- en: Simulating and debugging JavaFX mobile applications
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟和调试JavaFX移动应用程序
- en: Packaging and deploying applications on iOS mobile devices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iOS移动设备上打包和部署应用程序
- en: Using RoboVM to run JavaFX on iOS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RoboVM在iOS上运行JavaFX
- en: '**RoboVM** is the bridge from Java to Objetive-C. Using this, it becomes easy
    to develop JavaFX 8 applications that are to be run on iOS-based devices, as the
    ultimate goal of the **RoboVM** project is to solve this problem without compromising
    on developer experience or app user experience.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: RoboVM是从Java到Objetive-C的桥梁。使用它，开发运行在基于iOS的设备上的JavaFX 8应用程序变得容易，因为RoboVM项目的最终目标是解决这个问题，而不会影响开发人员体验或应用程序用户体验。
- en: As we saw in the previous chapter about Android, using *JavaFXPorts* to generate
    APKs was a relatively easy task due to the fact that Android is based on Java
    and the **Dalvik VM**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一章关于Android中看到的，使用JavaFXPorts生成APK是一个相对容易的任务，因为Android是基于Java和Dalvik VM的。
- en: On the contrary, iOS doesn't have a VM for Java, and it doesn't allow dynamic
    loading of native libraries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，iOS没有为Java提供虚拟机，并且不允许动态加载本机库。
- en: Another approach is required. The RoboVM open source project tries to close
    the gap for Java developers by creating a bridge between Java and Objective-C
    using an *ahead-of-time* compiler that translates Java bytecode into native ARM
    or x86 machine code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 需要另一种方法。RoboVM开源项目试图通过创建一个桥梁来解决Java开发人员的差距，该桥梁使用一个“提前编译”编译器，将Java字节码转换为本机ARM或x86机器代码。
- en: Features
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特点
- en: 'Let''s go through the RoboVM features:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看RoboVM的特点：
- en: Brings Java and other JVM languages, such as Scala, Clojure, and Groovy, to
    iOS-based devices
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Java和其他JVM语言（如Scala、Clojure和Groovy）带到基于iOS的设备上
- en: Translates Java bytecode into machine code ahead of time for fast execution
    directly on the CPU without any overhead
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前将Java字节码转换为机器代码，以便在CPU上直接进行快速执行，而不会产生任何开销
- en: The main target is iOS and the ARM processor (32- and 64-bit), but there is
    also support for Mac OS X and Linux running on x86 CPUs (both 32- and 64-bit)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要目标是iOS和ARM处理器（32位和64位），但也支持在x86 CPU上运行的Mac OS X和Linux（32位和64位）
- en: Does not impose any restrictions on the Java platform features accessible to
    the developer, such as reflection or file I/O
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不对开发人员可访问的Java平台功能施加任何限制，如反射或文件I/O
- en: Supports standard JAR files that let the developer reuse the vast ecosystem
    of third-party Java libraries
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持标准的JAR文件，让开发人员重用第三方Java库的庞大生态系统
- en: Provides access to the full native iOS APIs through a Java-to-Objective-C bridge,
    enabling the development of apps with truly native UIs and with full hardware
    access
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Java到Objective-C桥接提供对完整本机iOS API的访问，实现具有真正本机UI和完整硬件访问的应用程序开发
- en: Integrates with the most popular tools such as NetBeans, Eclipse, Intellij IDEA,
    Maven, and Gradle
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与NetBeans、Eclipse、Intellij IDEA、Maven和Gradle等最流行的工具集成
- en: App Store ready, with hundreds of apps already in the store
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: App Store准备就绪，已有数百款应用程序在商店中
- en: Limitations
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制
- en: 'Mainly due to the restrictions of the iOS platform, there are a few limitations
    when using RoboVM:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 主要是由于iOS平台的限制，使用RoboVM时存在一些限制：
- en: Loading custom bytecode at runtime is not supported. All class files comprising
    the app have to be available at compile time on the developer machine.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持在运行时加载自定义字节码。应用程序的所有类文件都必须在开发者机器上的编译时可用。
- en: The Java Native Interface technology as used on the desktop or on servers usually
    loads native code from dynamic libraries, but Apple does not permit custom dynamic
    libraries to be shipped with an iOS app. RoboVM supports a variant of JNI based
    on static libraries.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java本机接口技术通常在桌面或服务器上使用，从动态库加载本机代码，但是苹果不允许将自定义动态库与iOS应用一起发布。RoboVM支持基于静态库的JNI变体。
- en: Another big limitation is that RoboVM is an alpha-state project under development
    and not yet recommended for production usage.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个重要限制是，RoboVM是一个处于开发中的Alpha状态项目，目前尚不建议用于生产。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: RoboVM has full support for reflection.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: RoboVM完全支持反射。
- en: How it works
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: As mentioned in [Chapter 4](ch04.html "Chapter 4. Developing a JavaFX Application
    for Android"), *Developing a JavaFX Application for Android*, since February 2015
    there has been an agreement between the companies behind RoboVM and JavaFXPorts,
    and now a single plugin called jfxmobile-plugin allows us to build applications
    for three platforms—desktop, Android, and iOS—from the same codebase.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")中所述，自2015年2月以来，RoboVM和JavaFXPorts背后的公司之间已经达成协议，现在一个名为jfxmobile-plugin的单一插件允许我们从相同的代码库构建三个平台的应用程序-桌面、Android和iOS。
- en: The JavaFXMobile plugin adds a number of tasks to your Java application that
    allow you to create .ipa packages that can be submitted to the Apple Store.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFXMobile插件为您的Java应用程序添加了许多任务，允许您创建可以提交到Apple Store的.ipa包。
- en: Android mostly uses Java as the main development language, so it is easy to
    merge your JavaFX 8 code with it. On iOS, the situation is internally totally
    different—but with similar Gradle commands.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Android主要使用Java作为主要开发语言，因此很容易将您的JavaFX 8代码与其合并。在iOS上，情况在内部完全不同，但使用类似的Gradle命令。
- en: The plugin will download and install the RoboVM compiler, and it will use RoboVM
    compiler commands to create an iOS application in `build/javafxports/ios`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件将下载并安装RoboVM编译器，并使用RoboVM编译器命令在`build/javafxports/ios`中创建iOS应用程序。
- en: Getting started
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: In this section, you will learn how to install the RoboVM compiler using the
    `JavaFXMobile` plugin, and make sure the tool chain works correctly by reusing
    the same application, Phone Dial version 1.0, we developed previously for the
    Android platform in [Chapter 4](ch04.html "Chapter 4. Developing a JavaFX Application
    for Android"), *Developing a JavaFX Application for Android*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用`JavaFXMobile`插件安装RoboVM编译器，并通过重用我们之前在[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")中开发的相同应用程序Phone
    Dial版本1.0，确保工具链正确工作，*为Android开发JavaFX应用程序*。
- en: Prerequisites
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'In order to use the RoboVM compiler to build iOS apps, the following tools
    are required:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用RoboVM编译器构建iOS应用程序，需要以下工具：
- en: Oracle's Java SE JDK 8 update 45\. Refer to [Chapter 1](ch01.html "Chapter 1. Getting
    Started with JavaFX 8"), *Getting Started with JavaFX 8*, The *Installing Java
    SE 8 JDK* section.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle的Java SE JDK 8更新45。参考[第1章](ch01.html "第1章。开始使用JavaFX 8")，*开始使用JavaFX 8*，*安装Java
    SE 8 JDK*部分。
- en: Gradle 2.4 or higher is required to build applications with the `jfxmobile`
    plugin. Refer to [Chapter 4](ch04.html "Chapter 4. Developing a JavaFX Application
    for Android"), *Developing a JavaFX Application for Android*, The Installing *Gradle
    2.4* section.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建应用程序需要Gradle 2.4或更高版本的`jfxmobile`插件。参考[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")，*为Android开发JavaFX应用程序*，*安装Gradle
    2.4*部分。
- en: A Mac running **Mac OS X** 10.9 or later.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行**Mac OS X** 10.9或更高版本的Mac。
- en: Xcode 6.x from the Mac App Store ([https://itunes.apple.com/us/app/xcode/id497799835?mt=12](https://itunes.apple.com/us/app/xcode/id497799835?mt=12)).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Mac App Store的Xcode 6.x（[https://itunes.apple.com/us/app/xcode/id497799835?mt=12](https://itunes.apple.com/us/app/xcode/id497799835?mt=12)）。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The first time you install **Xcode**, and every time you update to a new version,
    you have to open it once to agree to the Xcode terms.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次安装**Xcode**，以及每次更新到新版本时，都必须打开它一次以同意Xcode条款。
- en: Preparing a project for iOS
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为iOS准备项目
- en: We will reuse the project we developed before in [Chapter 4](ch04.html "Chapter 4. Developing
    a JavaFX Application for Android"), *Developing a JavaFX Application for Android*,
    for the Android platform, since there is no difference in code, project structure,
    or Gradle build script when targeting iOS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用我们之前在[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")中为Android平台开发的项目，因为在针对iOS时，代码、项目结构或Gradle构建脚本没有任何区别。
- en: They share the same properties and features, but with different Gradle commands
    that serve iOS development, and a minor change in the Gradle build script for
    the RoboVM compiler.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们共享相同的属性和特性，但使用针对iOS开发的不同Gradle命令，并对RoboVM编译器的Gradle构建脚本进行了微小更改。
- en: Therefore, we will see the power of **WORA** *Write Once, Run Everywhere* with
    the same application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将看到**WORA** *一次编写，到处运行*的强大功能，使用相同的应用程序。
- en: Project structure
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目结构
- en: 'Based on the same project structure from the Android example from [Chapter
    4](ch04.html "Chapter 4. Developing a JavaFX Application for Android"), *Developing
    a JavaFX Application for Android*, the project structure for our iOS app should
    be as shown in the following figure:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基于[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")中Android示例的相同项目结构，*为Android开发JavaFX应用程序*，我们的iOS应用程序的项目结构应如下图所示：
- en: '![Project structure](img/B03998_05_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![项目结构](img/B03998_05_01.jpg)'
- en: The application
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序
- en: 'We are going to reuse the same application from [Chapter 4](ch04.html "Chapter 4. Developing
    a JavaFX Application for Android"), *Developing a JavaFX Application for Android*:
    the Phone DialPad version 2.0 JavaFX 8 application:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")中开发的相同应用程序，*为Android开发JavaFX应用程序*：Phone
    DialPad版本2.0 JavaFX 8应用程序：
- en: '![The application](img/B03998_05_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序](img/B03998_05_02.jpg)'
- en: As you can see, reusing the same codebase is a very powerful and useful feature,
    especially when you are developing to target many mobile platforms such as iOS
    and Android at the same time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，重用相同的代码库是一个非常强大和有用的功能，特别是当您同时开发以针对许多移动平台，如iOS和Android。
- en: Interoperability with low-level iOS APIs
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与低级iOS API的互操作性
- en: 'To have the same functionality of natively calling the default iOS phone dialer
    from our application as we did with Android, we have to provide the native solution
    for iOS as the following `IosPlatform` implementation:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了具有与在Android中本机调用默认iOS电话拨号器相同的功能，我们必须提供iOS的本机解决方案，如以下`IosPlatform`实现：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Gradle build files
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gradle构建文件
- en: 'We will use the same Gradle build script file that was used in [Chapter 4](ch04.html
    "Chapter 4. Developing a JavaFX Application for Android"), *Developing a JavaFX
    Application for Android*, but with a minor change by adding the following lines
    to the end of the script:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")中使用的相同的Gradle构建脚本文件，*为Android开发JavaFX应用程序*，但通过在脚本末尾添加以下行进行微小更改：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All the work involved in installing and using `robovm` compilers is done by
    the `jfxmobile` plugin.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和使用`robovm`编译器的所有工作都由`jfxmobile`插件完成。
- en: The purpose of those lines is to give the RoboVM compiler the location of the
    main application class that has to be loaded at runtime is, as it is not visible
    by default to the compiler.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行的目的是为RoboVM编译器提供主应用程序类的位置，该类必须在运行时加载，因为默认情况下编译器看不到它。
- en: The `forceLinkClasses` property ensures that those classes are linked in during
    RoboVM compilation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`forceLinkClasses`属性确保在RoboVM编译期间链接这些类。'
- en: Building the application
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: 'After we have added the necessary configuration set to build the script for
    iOS, its time to build the application in order to deploy it to different iOS
    target devices. To do so, we have to run the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们已经添加了必要的配置集以构建iOS脚本之后，现在是时候构建应用程序以将其部署到不同的iOS目标设备。为此，我们必须运行以下命令：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We should have the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有以下输出：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have built our application successfully; next, we need to generate the .`ipa`
    and, in the case of production, you have to test it by deploying it to as many
    iOS versions as you can.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功构建了我们的应用程序；接下来，我们需要生成`.ipa`文件，并且在生产环境中，您需要通过将其部署到尽可能多的iOS版本来测试它。
- en: Generating the iOS .ipa package file
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成iOS .ipa软件包文件
- en: 'In order to generate the final .ipa iOS package for our JavaFX 8 application,
    which is necessary for the final distribution to any device or the AppStore, you
    have to run the following `gradle` command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为我们的JavaFX 8应用程序生成最终的.ipa iOS软件包，这对于最终分发到任何设备或AppStore是必要的，您必须运行以下`gradle`命令：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will generate the .`ipa` file in the directory `build/javafxports/ios`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在目录`build/javafxports/ios`中生成`.ipa`文件。
- en: Deploying the application
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: During development, we need to check our application GUI and final application
    prototype on iOS simulators and measure the application performance and functionality
    on different devices. These procedures are very useful, especially for testers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们需要在iOS模拟器上检查我们的应用程序GUI和最终应用程序原型，并在不同设备上测量应用程序的性能和功能。这些程序非常有用，特别是对于测试人员。
- en: Let's see how it is a very easy task to run our application on either simulators
    or on real devices.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在模拟器上运行我们的应用程序或在真实设备上运行是一个非常容易的任务。
- en: Deploying to a simulator
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 部署到模拟器
- en: 'On a simulator, you can simply run the following command to check if your application
    is running:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器上，您可以简单地运行以下命令来检查您的应用程序是否正在运行：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command will package and launch the application in an *iPhone simulator*
    as shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打包并在*iPhone模拟器*中启动应用程序，如下截图所示：
- en: '![Deploying to a simulator](img/B03998_05_03.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![部署到模拟器](img/B03998_05_03.jpg)'
- en: DialPad2 JavaFX 8 application running on the iOS 8.3/iPhone 4s simulator
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: DialPad2 JavaFX 8应用程序在iOS 8.3/iPhone 4s模拟器上运行
- en: 'This command will launch the application in an iPad simulator:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在iPad模拟器中启动应用程序：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Deploying to an Apple device
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 部署到苹果设备
- en: 'In order to package a JavaFX 8 application and deploy it to an Apple device,
    simply run the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打包JavaFX 8应用程序并将其部署到苹果设备，只需运行以下命令：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command will launch the JavaFX 8 application in the device that is connected
    to your desktop/laptop.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在连接到您的台式机/笔记本电脑的设备中启动JavaFX 8应用程序。
- en: Then, once the application is launched on your device, type in any number and
    then tap Call.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一旦应用程序在您的设备上启动，输入任何号码，然后点击呼叫。
- en: 'The iPhone will ask for permission to dial using the default mobile dialer;
    tap on **Ok**. The default mobile dialer will be launched and will the number
    as shown in the following figure:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: iPhone将请求使用默认移动拨号器拨号；点击**确定**。默认移动拨号器将启动，并显示号码，如下图所示：
- en: '![Deploying to an Apple device](img/B03998_05_04.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![部署到苹果设备](img/B03998_05_04.jpg)'
- en: Default mobile dialer
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认移动拨号器
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To be able to test and deploy your apps on your devices, you will need an active
    subscription with the Apple Developer Program. Visit the Apple Developer Portal,
    [https://developer.apple.com/register/index.action](https://developer.apple.com/register/index.action),
    to sign up. You will also need to provision your device for development. You can
    find information on device provisioning in the Apple Developer Portal, or follow
    this guide: [http://www.bignerdranch.com/we-teach/how-to-prepare/ios-device-provisioning/](http://www.bignerdranch.com/we-teach/how-to-prepare/ios-device-provisioning/).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够在您的设备上测试和部署您的应用程序，您需要与苹果开发者计划订阅。访问苹果开发者门户网站，[https://developer.apple.com/register/index.action](https://developer.apple.com/register/index.action)，进行注册。您还需要为开发配置您的设备。您可以在苹果开发者门户网站上找到有关设备配置的信息，或者按照此指南操作：[http://www.bignerdranch.com/we-teach/how-to-prepare/ios-device-provisioning/](http://www.bignerdranch.com/we-teach/how-to-prepare/ios-device-provisioning/)。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter gave us a very good understanding of how JavaFX-based applications
    can be developed and customized using RoboVM for **iOS** to make it possible to
    run your applications on Apple platforms.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使我们对如何使用RoboVM开发和定制基于JavaFX的应用程序以在苹果平台上运行应用程序有了很好的理解。
- en: You learned about RoboVM features and limitations, and how it works; you also
    gained skills that you can use for developing.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您了解了RoboVM的特点和限制，以及它的工作原理；您还获得了用于开发的技能。
- en: You then learned how to install the required software and tools for iOS development
    and how to enable Xcode along with the *RoboVM* compiler, to package and install
    the Phone Dial JavaFX-8-based application on OS simulators.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您学会了如何安装iOS开发所需的软件和工具，以及如何启用Xcode以及RoboVM编译器，以在OS模拟器上打包和安装基于JavaFX-8的Phone
    Dial应用程序。
- en: We have seen how we reused the same application we already developed in [Chapter
    4](ch04.html "Chapter 4. Developing a JavaFX Application for Android"), *Developing
    a JavaFX Application for Android*, proving that the Java WORA paradigm works.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何重复使用我们在[第4章](ch04.html "第4章。为Android开发JavaFX应用程序")中已经开发的相同应用程序，证明了Java
    WORA范式的有效性。
- en: Finally, we provided tips on how to run and deploy your application on real
    devices.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们提供了关于如何在真实设备上运行和部署应用程序的技巧。
- en: The next chapter will open a window on the IoT development world; we are going
    to see how to buy a RaspberryPi model 2, install and configure *raspbian-wheezy*
    OS for development, and how to install the Java SE for embedded devices. We will
    then develop a JavaFX 8 application that will run on our credit-card-sized microcomputer.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将为我们打开物联网开发世界的一扇窗户；我们将看到如何购买树莓派2型，安装和配置用于开发的raspbian-wheezy操作系统，以及如何安装用于嵌入式设备的Java
    SE。然后，我们将开发一个JavaFX 8应用程序，该应用程序将在我们的信用卡大小的微型计算机上运行。
