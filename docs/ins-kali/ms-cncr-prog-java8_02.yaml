- en: Prefer local thread variables over static and shared when possible
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在可能的情况下，优先使用本地线程变量而不是静态和共享变量
- en: Thread local variables are a special kind of variable. Every task will have
    an independent value for this variable, so you don't need any synchronization
    mechanism to protect access to this variable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 线程本地变量是一种特殊类型的变量。每个任务都将拥有该变量的独立值，因此您不需要任何同步机制来保护对该变量的访问。
- en: This can sound a little strange. Every object has its own copy of the attributes
    of the class, so why do we need the thread local variables? Consider this situation.
    You create a `Runnable` task, and you want to execute multiple instances of that
    task. You can create a `Runnable` object for each thread you want to execute,
    but another option is to create a `Runnable` object and use that object to create
    all the threads. In the last case, all the threads will have access to the same
    copy of the attributes of the class except if you use the `ThreadLocal` class.
    The `ThreadLocal` class guarantees you that every thread will access its own instance
    of the variable without the use of a Lock, a semaphore, or a similar class.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有点奇怪。每个对象都有类的属性的副本，那么为什么我们需要线程本地变量呢？考虑这种情况。您创建了一个`Runnable`任务，并且希望执行该任务的多个实例。您可以为要执行的每个线程创建一个`Runnable`对象，但另一种选择是创建一个`Runnable`对象，并使用该对象创建所有线程。在最后一种情况下，除非您使用`ThreadLocal`类，否则所有线程将可以访问类属性的相同副本。`ThreadLocal`类保证每个线程将访问其自己的变量实例，而无需使用锁、信号量或类似的类。
- en: Another situation when you can take advantage of Thread local variables is with
    static attributes. All instances of a class share the static attributes, but you
    declare them with the `ThreadLocal` class. In this case, every thread will have
    access to its own copy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种情况可以利用线程本地变量的是静态属性。类的所有实例共享静态属性，但您可以使用`ThreadLocal`类来声明它们。在这种情况下，每个线程将可以访问其自己的副本。
- en: 'Another option you have is to use something like `ConcurrentHashMap<Thread,
    MyType>` and use it like `var.get(Thread.currentThread())` or `var.put(Thread.currentThread(),
    newValue)`. Usually, this approach is significantly slower than `ThreadLocal`
    because of possible contention (`ThreadLocal` has no contention at all). It has
    an advantage though: you can clear the map completely and the value will disappear
    for every thread; thus, sometimes it''s useful to use such an approach.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择使用类似`ConcurrentHashMap<Thread, MyType>`的东西，并像`var.get(Thread.currentThread())`或`var.put(Thread.currentThread(),
    newValue)`这样使用它。通常，这种方法比`ThreadLocal`慢得多，因为可能会有争用（`ThreadLocal`根本没有争用）。不过它也有一个优点：您可以完全清除映射，值将对每个线程消失；因此，有时使用这种方法是有用的。
- en: Find the more easily parallelizable version of the algorithm
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到算法更容易并行化的版本
- en: We can define an algorithm as a sequence of steps to solve a problem. There
    are different ways to solve the same problem. Some are faster, some use fewer
    resources, and others fit better with special characteristics of the input data.
    For example, if you want to order a set of numbers, you can use one of the multiple
    sorting algorithms that have been implemented.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将算法定义为解决问题的一系列步骤。解决同一个问题有不同的方法。有些更快，有些使用更少的资源，还有些更适合输入数据的特殊特征。例如，如果您想对一组数字进行排序，您可以使用已实现的多种排序算法之一。
- en: 'In a previous section of this chapter, we recommended you use a sequential
    algorithm as the starting point to implement a concurrent algorithm. There are
    two main advantages to this approach:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前一节中，我们建议您使用顺序算法作为实现并发算法的起点。这种方法有两个主要优点：
- en: You can easily test the correctness of the results of your parallel algorithm
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以轻松测试并行算法的结果的正确性
- en: You can measure the improvement in performance obtained with the use of concurrency
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过使用并发来衡量性能的改进。
- en: But not every algorithm can be parallelized, at least not so easily. You might
    think that the best starting point could be the sequential algorithm with the
    best performance solving the problem you want to parallelize, but this can be
    a wrong assumption. You should look for an algorithm than can be easily parallelized.
    Then, you can compare the concurrent algorithm with the sequential one with the
    best performance to see which offers the best throughput.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但并非每个算法都可以并行化，至少不那么容易。您可能认为最佳起点是具有解决您想要并行化的问题的最佳性能的顺序算法，但这可能是一个错误的假设。您应该寻找一个可以轻松并行化的算法。然后，您可以将并发算法与具有最佳性能的顺序算法进行比较，以查看哪个提供了最佳吞吐量。
- en: Using immutable objects when possible
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在可能的情况下使用不可变对象
- en: One of the main problems you can have in a concurrent application is a data
    race condition. As we explained before, this happens when two or more tasks modify
    the data stored in a shared variable and access to that variable is not implemented
    inside a critical section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在并发应用程序中，你可能会遇到的一个主要问题是数据竞争条件。正如我们之前解释过的，当两个或更多任务修改共享变量中存储的数据，并且对该变量的访问没有在关键部分内实现时，就会发生这种情况。
- en: For example, when you work with an object-oriented language such as Java, you
    implement your application as a collection of objects. Each object has a number
    of attributes and some methods to read and change the values of the attributes.
    If some tasks share an object and call to a method to change a value of an attribute
    of that object and that method is not protected by a synchronization mechanism,
    you probably will have data inconsistency problems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当您使用Java等面向对象的语言时，您将应用程序实现为一组对象。每个对象都有一些属性和一些方法来读取和更改属性的值。如果一些任务共享一个对象并调用一个方法来更改该对象的属性的值，并且该方法没有受到同步机制的保护，那么您可能会遇到数据不一致的问题。
- en: There are special kinds of object named immutable objects. Their main characteristic
    is that you can't modify any attributes after initialization. If you want to modify
    the value of an attribute, you must create another object. The `String` class
    in Java is the best example of immutable objects. When you use an operator (for
    example, `=` or +`=`) that we might think changes the value of a String, you are
    really creating a new object.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种特殊类型的对象称为不可变对象。它们的主要特征是初始化后无法修改任何属性。如果要修改属性的值，必须创建另一个对象。Java中的`String`类是不可变对象的最佳示例。当您使用运算符（例如`=`或`+`）来改变String的值时，实际上是创建了一个新对象。
- en: 'The use of immutable objects in a concurrent application has two very important
    advantages:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在并发应用中使用不可变对象有两个非常重要的优点：
- en: You don't need any synchronization mechanism to protect the methods of these
    classes. If two tasks want to modify the same object, they will create new objects,
    so it will never occur that two tasks modify the same object at a time.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不需要任何同步机制来保护这些类的方法。如果两个任务想要修改相同的对象，它们将创建新对象，因此永远不会发生两个任务同时修改同一个对象的情况。
- en: You won't have any data inconsistency problems, as a conclusion of the first
    point.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于第一点的结论，您不会遇到任何数据不一致的问题。
- en: There is a drawback with immutable objects. If you create too many objects,
    this may affect the throughput and memory use of the application. If you have
    a simple object without internal data structures, it's usually not a problem to
    make it immutable. However, making immutable complex objects that incorporate
    collections of other objects usually leads to serious performance problems.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变对象也有一个缺点。如果创建了太多对象，这可能会影响应用程序的吞吐量和内存使用。如果有一个简单的对象没有内部数据结构，通常将其设置为不可变是没有问题的。然而，使不可变的复杂对象，其中包含其他对象的集合，通常会导致严重的性能问题。
- en: Avoiding deadlocks by ordering the locks
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过对锁进行排序来避免死锁
- en: One of the best mechanisms to avoid a deadlock situation in a concurrent application
    is to force tasks to get shared resources always in the same order. An easy way
    to do this is to assign a number to every resource. When a task needs more than
    one resource, it has to request them in order.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在并发应用程序中避免死锁情况的最佳机制之一是强制任务始终以相同的顺序获取共享资源。一个简单的方法是为每个资源分配一个编号。当任务需要多个资源时，必须按顺序请求它们。
- en: For example, if you have two tasks, T1 and T2, and both need two resources,
    R1 and R2, you can force both to request first the R1 resource and then the R2
    resource. You will never have a deadlock.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果有两个任务T1和T2，两者都需要两个资源R1和R2，您可以强制两者首先请求R1资源，然后请求R2资源。您永远不会发生死锁。
- en: On the other hand, if T1 first requests R1 and then R2 and T2 first requests
    R2 and then R1, you can have a deadlock.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果T1首先请求R1，然后请求R2，T2首先请求R2，然后请求R1，就可能发生死锁。
- en: 'For example, a bad use of this tip is as follows. You have two tasks that need
    to get two `Lock` objects. They try to get the locks in different order:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个提示的不良使用如下。您有两个需要获取两个`Lock`对象的任务。它们尝试以不同的顺序获取锁：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It's possible that `operation1()` executes its first sentence and `operation2()`
    its first sentence too, so they will be waiting for the other `Lock` and you will
    have a deadlock.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`operation1()`执行其第一句和`operation2()`也执行其第一句，因此它们将等待另一个`Lock`，从而导致死锁。'
- en: 'You can avoid this simply by getting the locks in the same order. If you change
    `operation2()`, you will never have a deadlock as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以相同的顺序获取锁来避免这种情况。如果更改`operation2()`，则永远不会发生死锁，如下所示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using atomic variables instead of synchronization
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用原子变量而不是同步
- en: When you have to share data between two or more tasks, you have to use a synchronization
    mechanism to protect the access to that data and avoid any data inconsistency
    problems.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要在两个或多个任务之间共享数据时，必须使用同步机制来保护对该数据的访问，并避免任何数据不一致的问题。
- en: Under some circumstances, you can use the `volatile` keyword and not use a synchronization
    mechanism. If only one of the tasks modifies the data and the rest of the tasks
    read it, you can use the volatile keyword without any synchronization or data
    inconsistency problem. In other scenarios, you need to use a lock, the synchronized
    keyword, or any other synchronization method.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可以使用`volatile`关键字而不使用同步机制。如果只有一个任务修改数据，其余任务读取数据，您可以使用`volatile`关键字而不会出现任何同步或数据不一致的问题。在其他情况下，您需要使用锁、`synchronized`关键字或任何其他同步方法。
- en: In Java 5, the concurrency API included a new kind of variable called atomic
    variables. These variables are classes that support atomic operations on single
    variables. They include a method, denominated by `compareAndSet(oldValue, newValue)`,
    that includes a mechanism to detect if assigning to the new value to the variable
    is done in one step. If the value of the variable is equal to `oldValue`, it changes
    it to `newValue` and returns true. Otherwise, it returns `false`. There are more
    methods that work in a similar way, such as `getAndIncrement()` or `getAndDecrement()`.
    These methods are also atomic.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 5中，并发API包括一种称为原子变量的新类型变量。这些变量是支持单个变量上的原子操作的类。它们包括一个方法，称为`compareAndSet(oldValue,
    newValue)`，其中包括一种机制来检测是否在一步中将新值分配给变量。如果变量的值等于`oldValue`，则将其更改为`newValue`并返回true。否则，返回`false`。还有更多类似方式工作的方法，例如`getAndIncrement()`或`getAndDecrement()`。这些方法也是原子的。
- en: This solution is lock-free; that is to say, it doesn't use locks or any synchronization
    mechanism, so its performance is better than any synchronized solution.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种解决方案是无锁的；也就是说，它不使用锁或任何同步机制，因此其性能比任何同步解决方案都要好。
- en: 'The most important atomic variables that you can use in Java are:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Java中使用的最重要的原子变量是：
- en: '`AtomicInteger`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AtomicInteger`'
- en: '`AtomicLong`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AtomicLong`'
- en: '`AtomicReference`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AtomicReference`'
- en: '`AtomicBoolean`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AtomicBoolean`'
- en: '`LongAdder`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LongAdder`'
- en: '`DoubleAdder`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DoubleAdder`'
- en: Holding locks for as short a time as possible
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尽可能短地持有锁
- en: Locks, as with any other synchronization mechanism, allow you to define a critical
    section that only one task can execute at a time. While a task is executing the
    critical section, the other tasks that want to execute it are blocked and have
    to wait for the liberation of the critical section. The application is working
    in a sequential way.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 锁，就像任何其他同步机制一样，允许您定义一个只有一个任务可以执行的关键部分。当一个任务执行关键部分时，想要执行它的其他任务被阻塞，并且必须等待关键部分的释放。应用程序是以顺序方式工作的。
- en: You have to pay special attention to the instructions you include in your critical
    sections because you can degrade the performance of your application without realizing
    it. You must make your critical section as small as possible, and it must include
    only the instructions that work on shared data with other tasks, so the time that
    the application is executing in a sequential way will be minimal.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须特别注意您在关键部分中包含的指令，因为您可能会降低应用程序的性能而没有意识到。您必须尽可能地使关键部分尽可能小，并且它必须只包含与其他任务共享数据的指令，这样应用程序以顺序方式执行的时间将最小化。
- en: Avoid executing inside the critical section the code you don't control. For
    example, you are writing a library that accepts a user-defined `Callable`, which
    you need to launch sometimes. You don't know what exactly will be in that `Callable`.
    Maybe it blocks input/output, acquires some locks, calls other methods of your
    library, or just works for a very long time. Thus, whenever possible, try to execute
    it when your library does not hold any locks. If it's impossible for your algorithm,
    specify this behavior in your library documentation and possibly specify the limitations
    to the user-supplied code (for example, it should not take any locks). A good
    example of such documentation can be found in the `compute()` method of the `ConcurrentHashMap`
    class.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在关键部分内执行您无法控制的代码。例如，您正在编写一个接受用户定义的`Callable`的库，有时需要启动它。您不知道`Callable`中确切的内容。也许它会阻塞输入/输出，获取一些锁，调用库的其他方法，或者工作时间很长。因此，尽可能在您的库不持有任何锁时执行它。如果对您的算法来说这是不可能的，那么请在您的库文档中指定这种行为，并可能指定用户提供的代码的限制（例如，它不应该获取任何锁）。`ConcurrentHashMap`类的`compute()`方法中可以找到这种文档的一个很好的例子。
- en: Taking precautions using lazy initialization
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采取懒惰初始化的预防措施
- en: Lazy initialization is a mechanism that delays object creation until the object
    is used in the application for the first time. Its main advantage is it minimizes
    the use of memory because you only create the objects that are really needed,
    but it can be a problem in concurrent applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 懒惰初始化是一种延迟对象创建的机制，直到对象在应用程序中首次使用。它的主要优点是最小化内存使用，因为您只创建真正需要的对象，但在并发应用程序中可能会出现问题。
- en: If you have a method that initializes an object and this method is called by
    two different tasks at once, you can initialize two different objects. This, for
    example, can be a problem with singleton classes because you only want to create
    one object of these classes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个初始化对象的方法，并且这个方法同时被两个不同的任务调用，那么您可以初始化两个不同的对象。例如，这可能是单例类的问题，因为您只想创建这些类的一个对象。
- en: A elegant solution to this problem has been implemented, as the Initialization-on-demand
    holder idiom ([https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的一个优雅的解决方案已经实现，就像延迟初始化持有者习惯（https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom）。
- en: Avoiding the use of blocking operations inside a critical section
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免在关键部分内部使用阻塞操作
- en: '**Blocking operations** are those operations that block the task that calls
    them until an event occurs. For example, when you read data from a file or write
    data to the console, the task that calls these operations must wait until they
    finish.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**阻塞操作**是那些阻塞调用它们的任务直到事件发生的操作。例如，当您从文件中读取数据或向控制台写入数据时，调用这些操作的任务必须等待它们完成。'
- en: If you include one of these operations into a critical section, you are degrading
    the performance of your application because none of the tasks that want to execute
    that critical section can execute it. The one that is inside the critical section
    is waiting for the finalization of an I/O operation, and the others are waiting
    for the critical section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将这些操作之一包含在关键部分中，那么您会降低应用程序的性能，因为想要执行该关键部分的任务都无法执行它。在关键部分内部的任务正在等待I/O操作的完成，而其他任务则在等待关键部分。
- en: Unless it is imperative, don't include blocking operations inside a critical
    section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除非必须，不要在关键部分内包含阻塞操作。
- en: Summary
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Concurrent programming includes all the necessary tools and techniques to have
    multiple tasks or process running at the same time in a computer, communicating
    and synchronizing between them without data loss or inconsistency.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 并发编程包括所有必要的工具和技术，使多个任务或进程可以在计算机中同时运行，彼此通信和同步，而不会丢失数据或不一致。
- en: We started this chapter by introducing the basic concepts of concurrency. You
    must know and understand terms such as concurrency, parallelism, and synchronization
    to fully understand the examples of this book. However, concurrency can generate
    some problems, such as data race conditions, deadlocks, livelocks, and others.
    You must also know the potential problems of a concurrent application. It will
    help you identify and solve these problems.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过介绍并发的基本概念开始了本章。您必须了解并理解并发、并行和同步等术语，才能充分理解本书的示例。然而，并发可能会产生一些问题，如数据竞争条件、死锁、活锁等。您还必须了解并发应用程序的潜在问题。这将帮助您识别和解决这些问题。
- en: We also explained a simple methodology of five steps introduced by Intel to
    convert a sequential algorithm into a concurrent one and showed you some concurrency
    design patterns implemented in the Java language and some tips to take into account
    when you implement a concurrent application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还解释了英特尔引入的将顺序算法转换为并发算法的简单五步方法，并向您展示了一些在Java语言中实现的并发设计模式以及在实现并发应用程序时需要考虑的一些提示。
- en: Finally, we explained briefly the components of the Java concurrency API. It's
    a very rich API with low- and very high-level mechanisms that allow you to implement
    powerful concurrency applications easily. We also described the Java memory model,
    which determines how concurrent applications manage the memory and the execution
    order of the instructions internally.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们简要解释了Java并发API的组件。这是一个非常丰富的API，具有低级和非常高级的机制，可以让您轻松实现强大的并发应用程序。我们还描述了Java内存模型，它决定了并发应用程序如何管理内存和内部指令的执行顺序。
- en: In the next chapter, you will learn how to implement applications that use a
    lot of threads using the executor framework. This allows you to execute a big
    number of threads by controlling the resources you use and reducing the overhead
    introduced by thread creation (it reuses `Thread` objects to execute different
    tasks).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用执行器框架实现使用大量线程的应用程序。这允许您通过控制您使用的资源并减少线程创建引入的开销（它重用`Thread`对象来执行不同的任务）来执行大量线程。
