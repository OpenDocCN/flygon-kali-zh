["```js\nSeries.fillna({value, inplace})\n```", "```js\nsdata = new dfd.Series([NaN, 1, 2, 33, 4, NaN, 5, 6, 7, 8])\nsdata.print() //use print to show series in browser or node environment \ntable(sdata) //use table to show series in Dnotebook environment\n```", "```js\nsdata_new = sdata.fillna({ value: -999})\ntable(sdata_new) \n```", "```js\nsdata.fillna({ value: -999, inplace: true})\ntable(sdata)\n```", "```js\nDataFrame.fillna({columns, value, inplace})\n```", "```js\ndata = {\"Name\":[\"Apples\", \"Mango\", \"Banana\", undefined],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Count\": [NaN, 5, NaN, 10], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Price\": [200, 300, 40, 250]}\n\ndf = new dfd.DataFrame(data)\ntable(df)\n```", "```js\ndf_filled = df.fillna({ values: [-99]})\ntable(df_filled)\n```", "```js\ndata = {\"Name\":[\"Apples\", \"Mango\", \"Banana\", undefined],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Count\": [NaN, 5, NaN, 10], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Price\": [200, 300, 40, 250]}\n\ndf = new dfd.DataFrame(data)\ndf_filled = df.fillna({columns: [\"Name\", \"Count\"], values: [\"Apples\", -99]})\ntable(df_filled)\n```", "```js\ndata = [10, 45, 56, 10, 23, 20, 10, 10]\nsf = new dfd.Series(data)\ntable(sf)\n```", "```js\nSeries.drop_duplicates({inplace, keep)\n```", "```js\ndata1 = [10, 45, 56, 10, 23, 20, 10, 10, 20, 20]\nsf = new dfd.Series(data1)\nsf_drop = sf.drop_duplicates({keep: \"first\"})\ntable(sf_drop)\n```", "```js\nsf_drop = sf.drop_duplicates({keep: \"last\"})\ntable(sf_drop)\n```", "```js\ndf = new dfd.DataFrame({'item': ['salt', 'sugar', 'rice', 'apple', 'corn', 'bread'],\n'grams': [400, 200, 120, 300, 70.5, 250]})\ntable(df)\n```", "```js\n    function convertToKg(gram){\n    \u00a0\u00a0return gram / 1000\n    }\n    ```", "```js\n    kilograms = df['grams'].map(convertToKg)\n    ```", "```js\n    df.addColumn({ \"column\": \"kilograms\", \"value\": kilograms\u00a0\u00a0});\n    ```", "```js\n    df = new dfd.DataFrame({'item': ['salt', 'sugar', 'rice', 'apple', 'corn', 'bread'],\n    'grams': [400, 200, 120, 300, 70.5, 250]})\n    function convertToKg(gram){\n    \u00a0\u00a0return gram / 1000\n    } \n    kilograms\u00a0\u00a0= df['grams'].map(convertToKg)\n    df.addColumn({ \"column\": \"kilograms\", \"value\": kilograms\u00a0\u00a0});\n    table(df)\n    ```", "```js\nsf = new dfd.Series([1, 2, 3, 4, 4, 4])\n```", "```js\nmapper = { 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\" }\nsf = sf.map(mapper)\ntable(sf)\n```", "```js\ndata = [[1, 2, 3], [4, 5, 6], [20, 30, 40], [39, 89, 78]]\ncols = [\"A\", \"B\", \"C\"]\ndf = new dfd.DataFrame(data, { columns: cols })\ntable(df)\n```", "```js\nfunction sum_vals(x) {\n\u00a0\u00a0\u00a0\u00a0return x.softmax()\n}\nlet df_new = df.apply({axis: 0, callable: sum_vals })\ntable(df_new)\n```", "```js\ndata = [[1, 2, 3], [4, 5, 6], [20, 30, 40], [39, 89, 78]] \ncols = [\"A\", \"B\", \"C\"] \ndf = new dfd.DataFrame(data, { columns: cols })\nfunction sum_vals(x) { \n\u00a0\u00a0\u00a0\u00a0return x.sum() \n} \ndf_new = df.apply({axis: 0, callable: sum_vals }) \ntable(df_new)\n```", "```js\ndf_new = df.apply({axis: 1, callable: sum_vals }) \ntable(df_new)\n```", "```js\ndata = [{ short_name: [\"NG\", \"GH\", \"EGY\", \"SA\"] },\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ long_name: [\"Nigeria\", \"Ghana\", \"Eqypt\", \"South Africa\"] }]\ndf = new dfd.DataFrame(data)\nfunction lower(x) {\n\u00a0\u00a0\u00a0\u00a0return '${x}'.toLowerCase()\n}\ndf_new = df.apply({ callable: lower })\ntable(df_new)\n```", "```js\ndata = {\"A\": [30, 1, 2, 3],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [34, 4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [20, 20, 30, 40]}\ncols = [\"A\", \"B\", \"C\"]\ndf = new dfd.DataFrame(data, { columns: cols })\ntable(df)\n```", "```js\ndf_filtered = df.query({ column: \"B\", is: \">\", to: 5})\ntable(df_filtered)\n```", "```js\ndata = {\"A\": [\"Ng\", \"Yu\", \"Mo\", \"Ng\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [34, 4, 5, 6], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [20, 20, 30, 40]}\n\ndf = new dfd.DataFrame(data)\ntable(df)\n```", "```js\nquery_df = df.query({ column: \"A\", is: \"==\", to: \"Ng\"})\ntable(query_df)\n```", "```js\ndata = {\"A\": [30, 1, 2, 3],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [34, 4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [20, 20, 30, 40]}\n\ncols = [\"A\", \"B\", \"C\"]\ndf = new dfd.DataFrame(data, { columns: cols })\ndf.query({ column: \"B\", is: \"==\", to: 5, inplace: true })\ntable(df)\n```", "```js\ndata = [[1, 2, 3], [4, 5, 6], [20, 30, 40], [39, 89, 78]] \ncols = [\"A\", \"B\", \"C\"] \ndf = new dfd.DataFrame(data, { columns: cols }) \ntable(df)\n```", "```js\nasync function load_data() {\n\u00a0\u00a0let data = {\n\u00a0\u00a0\u00a0\u00a0Name: [\"Apples\", \"Mango\", \"Banana\", \"Pear\"],\n\u00a0\u00a0\u00a0\u00a0Count: [21, 5, 30, 10],\n\u00a0\u00a0\u00a0\u00a0Price: [200, 300, 40, 250],\n\u00a0\u00a0};\n\n\u00a0\u00a0let df = new dfd.DataFrame(data);\n\u00a0\u00a0let s_df = await df.sample(2);\n\u00a0\u00a0s_df.print();\n\n}\nload_data()\n```", "```js\nvar sample;\nasync function load_data() {\n\u00a0\u00a0let data = {\n\u00a0\u00a0\u00a0\u00a0Name: [\"Apples\", \"Mango\", \"Banana\", \"Pear\"],\n\u00a0\u00a0\u00a0\u00a0Count: [21, 5, 30, 10],\n\u00a0\u00a0\u00a0\u00a0Price: [200, 300, 40, 250],\n\u00a0\u00a0};\n\n\u00a0\u00a0let df = new dfd.DataFrame(data);\n\u00a0\u00a0let s_df = await df.sample(2);\n\u00a0\u00a0sample = s_df\n\n}\nload_data()\n```", "```js\ntable(sample)\n```", "```js\ndata = { fruits: ['pear', 'mango', \"pawpaw\", \"mango\", \"bean\"] ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Count: [20, 30, 89, 12, 30],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Country: [\"NG\", \"NG\", \"GH\", \"RU\", \"RU\"]}\ndf = new dfd.DataFrame(data)\ntable(df)\n```", "```js\nencode = new dfd.LabelEncoder() \nencode.fit(df['fruits']) \n```", "```js\nsf_enc = encode.transform(df['fruits']) \ntable(sf_enc)\n```", "```js\nnew_sf = encode.transform([\"mango\",\"man\", \"car\", \"bean\"])\ntable(new_sf)\n```", "```js\nencode = new dfd.OneHotEncoder()\u00a0\u00a0\nencode.fit(df['country']) \nsf_enc = encode.transform(df['country']) \ntable(sf_enc)\n```", "```js\ndata = { fruits: ['pear', 'mango', \"pawpaw\", \"mango\", \"bean\"] ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count: [20, 30, 89, 12, 30],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0country: [\"NG\", \"NG\", \"GH\", \"RU\", \"RU\"]}\ndf = new dfd.DataFrame(data)\ntable(df)\n```", "```js\ndf_enc = dfd.get_dummies({data: df})\ntable(df_enc)\n```", "```js\ndanfo.merge({left, right, on, how}) \n```", "```js\ndata = [['K0', 'k0', 'A0', 'B0'], ['k0', 'K1', 'A1', 'B1'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['K1', 'K0', 'A2', 'B2'], ['K2', 'K2', 'A3', 'B3']]\ndata2 = [['K0', 'k0', 'C0', 'D0'], ['K1', 'K0', 'C1', 'D1'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['K1', 'K0', 'C2', 'D2'], ['K2', 'K0', 'C3', 'D3']]\ncolum1 = ['Key1', 'Key2', 'A', 'B']\ncolum2 = ['Key1', 'Key2', 'A', 'D']\n\ndf1 = new dfd.DataFrame(data, { columns: colum1 })\ndf2 = new dfd.DataFrame(data2, { columns: colum2 })\ntable(df1)\n```", "```js\ntable(df2)\n```", "```js\nmerge_df = dfd.merge({left: df1, right: df2, on: [\"Key1\"]})\ntable(merge_df)\n```", "```js\nmerge_mult_df = dfd.merge({left: df1, right: df2, on: [\"Key1\", \"Key2\"]})\ntable(merge_mult_df)\n```", "```js\nmerge_df = dfd.merge({ left: df1, right: df2, on: [\"Key1\"], how: \"outer\"})\ntable(merge_df)\n```", "```js\nmerge_df = dfd.merge({ left: df1, right: df2, on: [\"Key1\", \"Key2\"], how: \"outer\"})\ntable(merge_df)\n```", "```js\nmerge_df = dfd.merge({ left: df1, right: df2, on: [\"Key1\", \"Key2\"], how: \"right\"})\ntable(merge_df)\n```", "```js\nmerge_df = dfd.merge({ left: df1, right: df2, on: [\"Key1\", \"Key2\"], how: \"left\"})\ntable(merge_df)\n```", "```js\ndanfo.concat({df_list, axis}) \n```", "```js\ndf1 = new dfd.DataFrame( \n\u00a0\u00a0\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"A\": [\"A_0\", \"A_1\", \"A_2\", \"A_3\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [\"B_0\", \"B_1\", \"B_2\", \"B_3\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [\"C_0\", \"C_1\", \"C_2\", \"C_3\"] \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index=[0, 1, 2], \n\u00a0\u00a0) \ndf2 = new dfd.DataFrame( \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"A\": [\"A_4\", \"A_5\", \"A_6\", \"A_7\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [\"B_4\", \"B_5\", \"B_6\", \"B_7\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [\"C_4\", \"C_5\", \"C_6\", \"C_7\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index=[4, 5, 6], \n\u00a0\u00a0\u00a0\u00a0) \ndf3 = new dfd.DataFrame( \n\u00a0\u00a0\u00a0\u00a0{ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"A\": [\"A_8\", \"A_9\", \"A_10\", \"A_11\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"B\": [\"B_8\", \"B_9\", \"B_10\", \"B_11\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C\": [\"C_8\", \"C_9\", \"C_10\", \"C_11\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index=[8, 9, 10], \n\u00a0\u00a0\u00a0)\ntable(df1)\ntable(df2)\ntable(df3)\n```", "```js\ndf_frames = [df1, df2, df3]\ncombined_df = dfd.concat({df_list: df_frames, axis: 0})\ntable(combined_df)\n```", "```js\ncombined_df.reset_index(true)\ntable(combined_df)\n```", "```js\ndf_frames = [df1, df2, df3]\ncombined_df = dfd.concat({df_list: df_frames, axis: 1})\ntable(combined_df)\n```", "```js\nseries_list = [df1['A'], df2['B'], df3['D']]\n```", "```js\nseries_list = [df1['A'], df2['B'], df3['D']]\ncombined_series = dfd.concat({df_list: series_list, axis: 1})\ntable(combined_series)\n```", "```js\ndata = ['lower boy', 'capitals', 'sentence', 'swApCaSe']\nsf = new dfd.Series(data)\ntable(sf)\n```", "```js\nconsole.log(sf.dtype)\n```", "```js\nstring\n```", "```js\nmod_sf = sf.str.capitalize() \ntable(mod_sf)\n```", "```js\nmod_sf = sf.str.substring(0,3) //returns a substring by start and end index\ntable(mod_sf)\n```", "```js\nmod_sf = sf.str.replace(\"lower\", \"002\") //replaces a string with specified value\ntable(mod_sf)\n```", "```js\nmod_sf = sf.str.join(\"7777\", \"+\") // joins specified value to Series\ntable(mod_sf)\n```", "```js\nmod_sf = sf.str.indexOf(\"r\") //Returns the index where the value is found else -1\ntable(mod_sf)\n```", "```js\ntimeColumn = ['12/13/2016 15:00:20', '10/20/2019 18:30:00', '1/1/2020 12:00:00', '1/30/2020 16:20:00', '11/12/2019 22:00:30'] \nsf = new dfd.Series(timeColumn, {columns: [\"times\"]})\ntable(sf)\n```", "```js\ndateTime = sf['times'].dt\u00a0\u00a0\n```", "```js\n    dateTime = sf.dt \n    hours = dateTime.hour()\n    table(hours)\n    ```", "```js\n    dateTime = sf.dt \n    years = dateTime.year()\n    table(years)\n    ```", "```js\n    dateTime = sf.dt \n    month_name = dateTime.month_name()\n    table(month_name)\n    ```", "```js\n    dateTime = sf.dt\u00a0\u00a0\n    weekdays = dateTime.weekdays() \n    table(weekdays)\n    ```", "```js\nvar df //using var so df is available to all cells\nload_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\n.then((data)=>{\n\u00a0\u00a0df = data\n})\n```", "```js\ntable(df.head())\n```", "```js\ntable(df.describe())\n```", "```js\ndf_nums = df.select_dtypes(['float32', \"int32\"]) //select all numeric dtype columns\nconsole.log(df_nums.columns)\n[AAPL.Open,AAPL.High,AAPL.Low,AAPL.Close,AAPL.Volume,AAPL.Adjusted,dn,mavg,up]\n```", "```js\ncol_mean = df_nums.mean()\ntable(col_mean)\n```", "```js\ncol_mean = df_nums.mean().round(2)\ntable(col_mean)\n```", "```js\nrow_mean = df_nums.mean(axis=0)\ntable(row_mean)\n```"]