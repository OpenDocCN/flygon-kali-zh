["```kt\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0package=\"com.example.snazzyapp\">\n\u00a0\u00a0\u00a0\u00a0<uses-permission android:name=\"android.permission.SEND_SMS\"/>\n\u00a0\u00a0\u00a0\u00a0<application ...>\n...\n\u00a0\u00a0\u00a0\u00a0</application>\n</manifest>\n```", "```kt\nprivate const val PERMISSION_CODE_REQUEST_LOCATION = 1\nclass MainActivity : AppCompatActivity() {\n\u00a0\u00a0\u00a0\u00a0override fun onResume() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val hasLocationPermissions = getHasLocationPermission()\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0private fun getHasLocationPermission() = if (\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ContextCompat.checkSelfPermission(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this, Manifest.permission.ACCESS_FINE_LOCATION\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) == PackageManager.PERMISSION_GRANTED\n\u00a0\u00a0\u00a0\u00a0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ActivityCompat.shouldShowRequestPermissionRationale(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this, Manifest.permission.ACCESS_FINE_LOCATION\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showPermissionRationale { requestLocationPermission() }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requestLocationPermission()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0false\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0private fun showPermissionRationale(positiveAction: () -> Unit) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AlertDialog.Builder(this)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setTitle(\"Location permission\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setMessage(\"We need your permission to find               your current position\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setPositiveButton(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"OK\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) { _, _ -> positiveAction() }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.create()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.show()\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0private fun requestLocationPermission() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ActivityCompat.requestPermissions(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arrayOf(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Manifest.permission.ACCESS_FINE_LOCATION\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PERMISSION_CODE_REQUEST_LOCATION\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\noverride fun onRequestPermissionsResult(\n\u00a0\u00a0\u00a0\u00a0requestCode: Int,\n\u00a0\u00a0\u00a0\u00a0permissions: Array<out String>,\n\u00a0\u00a0\u00a0\u00a0grantResults: IntArray\n) {\n\u00a0\u00a0\u00a0\u00a0super.onRequestPermissionsResult(requestCode, permissions, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0grantResults)\n\u00a0\u00a0\u00a0\u00a0when (requestCode) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PERMISSION_CODE_REQUEST_LOCATION -> getLastLocation()\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \u00a0\u00a0\u00a0\u00a0package=\"com.example.catagentdeployer\">\n    \u00a0\u00a0\u00a0\u00a0ACCESS_FINE_LOCATION is the permission you will need to obtain the user's location based on GPS in addition to the less accurate Wi-Fi and mobile data-based location information you could obtain by using the ACCESS_COARSE_LOCATION permission.\n    ```", "```kt\n    class MapsActivity : AppCompatActivity(), OnMapReadyCallback {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0private fun getLastLocation() {\n     Log.d(\"MapsActivity\", \"getLastLocation() called.\")\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    ...\n    import com.google.android.gms.maps.model.MarkerOptions\n    private const val PERMISSION_CODE_REQUEST_LOCATION = 1\n    class MapsActivity : AppCompatActivity(), OnMapReadyCallback {\n    ```", "```kt\n    private fun requestLocationPermission() {\n    \u00a0\u00a0\u00a0\u00a0ActivityCompat.requestPermissions(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PERMISSION_CODE_REQUEST_LOCATION\n    \u00a0\u00a0\u00a0\u00a0)\n    }\n    private fun getLastLocation() {\n    \u00a0\u00a0\u00a0\u00a0...\n    }\n    ```", "```kt\n    override fun onRequestPermissionsResult(\n    \u00a0\u00a0\u00a0\u00a0requestCode: Int, permissions: Array<out String>,       grantResults: IntArray) {\n            super.onRequestPermissionsResult(requestCode,           permissions,grantResults)\n    \u00a0\u00a0\u00a0\u00a0when (requestCode) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PERMISSION_CODE_REQUEST_LOCATION -> if (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0grantResults[0] == PackageManager.PERMISSION_GRANTED\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getLastLocation()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    private fun showPermissionRationale(positiveAction: () -> Unit) {\n    \u00a0\u00a0\u00a0\u00a0AlertDialog.Builder(this)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setTitle(\"Location permission\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setMessage(\"This app will not work without knowing your           current location\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setPositiveButton(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"OK\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) { _, _ -> positiveAction() }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.create()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.show()\n    }\n    ```", "```kt\n    private fun requestPermissionWithRationaleIfNeeded() = if (\n    \u00a0\u00a0\u00a0\u00a0ActivityCompat.shouldShowRequestPermissionRationale(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this, Manifest.permission.ACCESS_FINE_LOCATION\n    \u00a0\u00a0\u00a0\u00a0)\n    ) {\n    \u00a0\u00a0\u00a0\u00a0showPermissionRationale {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requestLocationPermission()\n    \u00a0\u00a0\u00a0\u00a0}\n    } else {\n    \u00a0\u00a0\u00a0\u00a0requestLocationPermission()\n    }\n    ```", "```kt\n    private fun hasLocationPermission() =\n    \u00a0\u00a0\u00a0\u00a0ContextCompat.checkSelfPermission(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this, Manifest.permission.ACCESS_FINE_LOCATION\n    \u00a0\u00a0\u00a0\u00a0) == PackageManager.PERMISSION_GRANTED\n    ```", "```kt\n    override fun onMapReady(googleMap: GoogleMap) {\n    \u00a0\u00a0\u00a0\u00a0mMap = googleMap\n    \u00a0\u00a0\u00a0\u00a0if (hasLocationPermission()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getLastLocation()\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requestPermissionWithRationaleIfNeeded()\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    override fun onRequestPermissionsResult(\n    \u00a0\u00a0\u00a0\u00a0requestCode: Int,\n    \u00a0\u00a0\u00a0\u00a0permissions: Array<out String>,\n    \u00a0\u00a0\u00a0\u00a0grantResults: IntArray\n    ) {\n    \u00a0\u00a0\u00a0\u00a0super.onRequestPermissionsResult(requestCode, permissions, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0grantResults)\n    \u00a0\u00a0\u00a0\u00a0when (requestCode) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PERMISSION_CODE_REQUEST_LOCATION -> if (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0grantResults[0] == PackageManager.PERMISSION_GRANTED\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getLastLocation()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requestPermissionWithRationaleIfNeeded()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\nimplementation \"com.google.android.gms:play-services-location:17.1.0\"\n```", "```kt\n.addOnSuccessListener { location: Location? ->\n}\n```", "```kt\nmMap.moveCamera(CameraUpdateFactory.newLatLng(latLng))\n```", "```kt\nmMap.addMarker(MarkerOptions().position(latLng).title(\"Pin Label\"))\n```", "```kt\n    dependencies {\n    \u00a0\u00a0\u00a0\u00a0implementation \"com.google.android.gms:play-services-      location:17.1.0\"\n    \u00a0\u00a0\u00a0\u00a0implementation \"org.jetbrains.kotlin:kotlin-      stdlib:$kotlin_version\"\n    \u00a0\u00a0\u00a0\u00a0implementation 'androidx.core:core-ktx:1.3.2'\n    \u00a0\u00a0\u00a0\u00a0implementation 'androidx.appcompat:appcompat:1.2.0'\n    \u00a0\u00a0\u00a0\u00a0implementation 'com.google.android.material:material:1.2.1'\n    \u00a0\u00a0\u00a0\u00a0implementation 'com.google.android.gms:play-services-maps:17.0.0'\n    \u00a0\u00a0\u00a0\u00a0implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    \u00a0\u00a0\u00a0\u00a0testImplementation 'junit:junit:4.+'\n    \u00a0\u00a0\u00a0\u00a0androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    \u00a0\u00a0\u00a0\u00a0androidTestImplementation 'androidx.test       .espresso:espresso-core:3.3.0'\n    }\n    ```", "```kt\n    <string name=\"google_maps_key\" templateMergeStrategy=\"preserve\"   translatable=\"false\">YOUR_KEY_HERE</string>\n    ```", "```kt\n    class MapsActivity : AppCompatActivity(), OnMapReadyCallback {\n    \u00a0\u00a0\u00a0\u00a0fusedLocationProviderClient initialize lazily, you are making sure it is only initialized when needed, which essentially guarantees the Activity class will have been created before initialization.\n    ```", "```kt\n    private fun updateMapLocation(location: LatLng) {\n    \u00a0\u00a0\u00a0\u00a0mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(location, 7f))\n    }\n    private fun addMarkerAtLocation(location: LatLng, title: String) {\n    \u00a0\u00a0\u00a0\u00a0mMap.addMarker(MarkerOptions().title(title).position(location))\n    }\n    ```", "```kt\n    private fun getLastLocation() {\n    \u00a0\u00a0\u00a0\u00a0fusedLocationProviderClient.lastLocation\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.addOnSuccessListener { location: Location? ->\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0location?.let {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val userLocation = LatLng(location.latitude,                   location.longitude)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0updateMapLocation(userLocation)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addMarkerAtLocation(userLocation, \"You\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\noverride fun onMapReady(googleMap: GoogleMap) {\n\u00a0\u00a0\u00a0\u00a0mMap = googleMap.apply {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setOnMapClickListener { latLng ->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addMarkerAtLocation(latLng, \"Deploy here\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0...\n}\n```", "```kt\nprivate fun getBitmapDescriptorFromVector(@DrawableRes   vectorDrawableResourceId: Int): BitmapDescriptor? {\n\u00a0\u00a0\u00a0\u00a0val bitmap =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ContextCompat.getDrawable(this, vectorDrawableResourceId)?.let {           vectorDrawable ->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vectorDrawable\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setBounds(0, 0, vectorDrawable.intrinsicWidth,                   vectorDrawable.intrinsicHeight)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val drawableWithTint = DrawableCompat.wrap(vectorDrawable)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DrawableCompat.setTint(drawableWithTint, Color.RED)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val bitmap = Bitmap.createBitmap(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vectorDrawable.intrinsicWidth,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vectorDrawable.intrinsicHeight,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bitmap.Config.ARGB_8888\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val canvas = Canvas(bitmap)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0drawableWithTint.draw(canvas)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitmap\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return BitmapDescriptorFactory.fromBitmap(bitmap)      .also {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitmap?.recycle()\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\n    private lateinit var mMap: GoogleMap\n    private var marker: Marker? = null\n    ```", "```kt\n    private fun addMarkerAtLocation(\n    \u00a0\u00a0\u00a0\u00a0location: LatLng,\n    \u00a0\u00a0\u00a0\u00a0title: StringmarkerIcon provided is not null, the app sets it to MarkerOptions. The function now returns the marker it added to the map.\n    ```", "```kt\n    private fun getBitmapDescriptorFromVector(@DrawableRes   vectorDrawableResourceId: Int): BitmapDescriptor? {\n    \u00a0\u00a0\u00a0\u00a0val bitmap =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ContextCompat.getDrawable(this,           vectorDrawableResourceId)?.let { vectorDrawable ->\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vectorDrawable\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setBounds(0, 0, vectorDrawable.intrinsicWidth,                   vectorDrawable.intrinsicHeight)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val drawableWithTint = DrawableCompat               .wrap(vectorDrawable)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DrawableCompat.setTint(drawableWithTint, Color.RED)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val bitmap = Bitmap.createBitmap(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vectorDrawable.intrinsicWidth,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vectorDrawable.intrinsicHeight,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bitmap.Config.ARGB_8888\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val canvas = Canvas(bitmap)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0drawableWithTint.draw(canvas)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitmap\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return BitmapDescriptorFactory.fromBitmap(bitmap).also {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bitmap?.recycle()\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    private fun addOrMoveSelectedPositionMarker(latLng: LatLng) {\n    \u00a0\u00a0\u00a0\u00a0if (marker == null) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0marker = addMarkerAtLocation(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0latLng, \"Deploy here\",               getBitmapDescriptorFromVector(R.drawable.target_icon)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0marker?.apply {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0position = latLng\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    override fun onMapReady(googleMap: GoogleMap) {\n    \u00a0\u00a0\u00a0\u00a0mMap = googleMap.apply {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setOnMapClickListener { latLng ->\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addOrMoveSelectedPositionMarker(latLng)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if (hasLocationPermission()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getLastLocation()\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requestPermissionWithRationaleIfNeeded()\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    private fun saveLocation(latLng: LatLng) =\n    \u00a0\u00a0\u00a0\u00a0getPreferences(MODE_PRIVATE)?.edit()?.apply {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0putString(\"latitude\", latLng.latitude.toString())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0putString(\"longitude\", latLng.longitude.toString())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0apply()\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```kt\n    \u00a0\u00a0\u00a0\u00a0val latitude = sharedPreferences.getString(\"latitude\", null)      ?.toDoubleOrNull() ?: return null\n    \u00a0\u00a0\u00a0\u00a0val longitude = sharedPreferences.getString(\"longitude\",       null)?.toDoubleOrNull()       ?: return null\n    ```"]