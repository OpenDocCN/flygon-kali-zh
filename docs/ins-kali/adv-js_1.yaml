- en: '*Chapter 1*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*'
- en: Introducing ECMAScript 6
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍ECMAScript 6
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Define the different scopes in JavaScript and characterize variable declaration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义JavaScript中的不同作用域并表征变量声明
- en: Simplify JavaScript object definitions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化JavaScript对象定义
- en: Destructure objects and arrays, and build classes and modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解构对象和数组，并构建类和模块
- en: Transpile JavaScript for compatibility
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了兼容性转译JavaScript
- en: Compose iterators and generators
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合迭代器和生成器
- en: In this chapter, you'll be learning how to use the new syntax and concepts of
    ECMAScript.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用ECMAScript的新语法和概念。
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: '**JavaScript**, often abbreviated as JS, is a programming language designed
    to allow the programmer to build interactive web applications. JavaScript is one
    of the backbones of web development, along with HTML and CSS. Nearly every major website,
    including Google, Facebook, and Netflix, make heavy use of JavaScript. JS was
    first created for the Netscape web browser in 1995\. The first prototype of JavaScript
    was written by Brendan Eich in just a mere 10 days. Since its creation, JavaScript
    has become one of the most common programming languages in use today.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript，通常缩写为JS，是一种旨在允许程序员构建交互式Web应用程序的编程语言。JavaScript是Web开发的支柱之一，与HTML和CSS一起。几乎每个主要的网站，包括Google、Facebook和Netflix，都大量使用JavaScript。JS最初是为Netscape
    Web浏览器于1995年创建的。JavaScript的第一个原型是由Brendan Eich在短短的10天内编写的。自创建以来，JavaScript已成为当今最常用的编程语言之一。
- en: In this book, we will deepen your understanding of the core of JavaScript and
    its advanced functionality. We will cover the new features that have been introduced
    in the ECMAScript standard, JavaScript's asynchronous programming nature, DOM
    and HTML event interaction with JavaScript, JavaScript's functional programming
    paradigms, testing JavaScript code, and the JavaScript development environment.
    With the knowledge gained from this book, you will be ready to begin using JavaScript
    in a professional setting to build powerful web applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将加深您对JavaScript核心及其高级功能的理解。我们将涵盖ECMAScript标准中引入的新功能，JavaScript的异步编程特性，DOM和HTML事件与JavaScript的交互，JavaScript的函数式编程范式，测试JavaScript代码以及JavaScript开发环境。通过本书所获得的知识，您将准备好在专业环境中使用JavaScript构建强大的Web应用程序。
- en: Beginning with ECMAScript
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从ECMAScript开始
- en: '**ECMAScript** is a scripting language specification standardized by **ECMA
    International**. It was created to standardize JavaScript in an attempt to allow
    for independent and compatible implementations. **ECMAScript 6**, or **ES6**,
    was originally released in 2015 and has gone through several minor updates since
    then.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**ECMAScript**是由**ECMA International**标准化的脚本语言规范。它旨在标准化JavaScript，以允许独立和兼容的实现。**ECMAScript
    6**，或**ES6**，最初于2015年发布，并自那时以来经历了几次次要更新。'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: You may refer to the following link for more information about ECMA specification:[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下链接了解更多关于ECMA规范的信息：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources)。
- en: Understanding Scope
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解作用域
- en: 'In computer science, **scope** is the region of a computer program where the
    binding or association of a name to an entity, such as a variable or function,
    is valid. JavaScript has the following two distinct types of scope:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，**作用域**是计算机程序中名称与实体（如变量或函数）的绑定或关联有效的区域。JavaScript具有以下两种不同类型的作用域：
- en: '**Function scope**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数作用域**'
- en: '**Block scope**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**块作用域**'
- en: Until ES6, function scope was the only form of scope in JavaScript; all variable
    and function declarations followed function scope rules. Block scope was introduced
    in ES6 and is used only by the variables declared with the new variable declaration
    keywords `let` and `const`. These keywords are discussed in detail in the *Declaring
    Variables* section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6之前，函数作用域是JavaScript中唯一的作用域形式；所有变量和函数声明都遵循函数作用域规则。ES6引入了块作用域，仅由使用新的变量声明关键字`let`和`const`声明的变量使用。这些关键字在*声明变量*部分中有详细讨论。
- en: Function Scope
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数作用域
- en: '**Function scope** in JavaScript is created inside functions. When a function
    is declared, a new scope block is created inside the body of that function. Variables that
    are declared inside the new function scope cannot be accessed from the parent scope;
    however, the function scope has access to variables in the parent scope.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的**函数作用域**是在函数内部创建的。当声明一个函数时，在该函数的主体内部创建一个新的作用域块。在新函数作用域内声明的变量无法从父作用域访问；但是，函数作用域可以访问父作用域中的变量。
- en: 'To create a variable with function scope, we must declare the variable with
    the `var` keyword. For example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建具有函数作用域的变量，必须使用`var`关键字声明变量。例如：
- en: '`var example = 5;`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`var example = 5;`'
- en: 'The following snippet provides an example of function scope:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段提供了函数作用域的示例：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Snippet 1.1: Function Scope'
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 代码段1.1：函数作用域
- en: '**Parent scope** is simply the scope of the section of code that the function
    was defined in. This is usually the global scope; however, in some cases, it may
    be useful to define a function inside a function. In that case, the nested function''s
    parent scope would be the function in which it is defined. In the preceding snippet,
    the function scope is the scope that was created inside the function test. The
    parent scope is the global scope, that is, where the function is defined.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**父作用域**只是函数定义的代码段的作用域。这通常是全局作用域；但是，在某些情况下，在函数内部定义函数可能很有用。在这种情况下，嵌套函数的父作用域将是其定义的函数。在前面的代码段中，函数作用域是在函数test内创建的作用域。父作用域是全局作用域，即函数定义的地方。'
- en: Note
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Parent scope is the block of code, which the function is defined in. It is not
    the block of code in which the function is called.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 父作用域是定义函数的代码块。它不是调用函数的代码块。
- en: Function Scope Hoisting
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数作用域提升
- en: 'When a variable is created with function scope, it''s declaration automatically
    gets hoisted to the top of the scope. **Hoisting**means that the interpreter moves
    the instantiation of an entity to the top of the scope it was declared in, regardless
    of where in the scope block it is defined. Functions and variables declared using
    `var` are hoisted in JavaScript; that is, a function or a variable can be used
    before it has been declared. The following code demonstrates this, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用函数作用域创建变量时，其声明会自动提升到作用域的顶部。**提升**意味着解释器将实体的实例化移动到其声明的作用域顶部，而不管它在作用域块中的定义位置。在JavaScript中，使用`var`声明的函数和变量会被提升；也就是说，函数或变量可以在其声明之前使用。以下代码演示了这一点：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Snippet 1.2: Function Scope Hoisting'
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.2：函数作用域提升
- en: Note
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Since a hoisted variable that's been declared with `var` can be used before
    it is declared, we have to be careful to not use that variable before it has been
    assigned a value. If a variable is accessed before it has been assigned a value,
    it will return the value as `undefined`, which can cause problems, especially
    if variables are used in the global scope.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用`var`声明的提升变量可以在声明之前使用，因此我们必须小心在变量被赋值之前不要使用该变量。如果在变量被赋值之前访问变量，它将返回`undefined`，这可能会导致问题，特别是如果变量在全局作用域中使用。
- en: Block Scope
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 块作用域
- en: 'A new block scope in JavaScript is created with curly braces (`{}`). A pair
    of **curly braces** can be placed anywhere in the code to define a new scope block.
    If statements, loops, functions, and any other curly brace pairs will have their
    own block scope. This includes floating curly brace pairs not associated with
    a keyword (if, for, etc). The code in the following snippet is an example of the
    block scope rules:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，使用花括号（`{}`）创建一个新的块作用域。一对**花括号**可以放置在代码的任何位置以定义一个新的作用域块。if语句、循环、函数和任何其他花括号对都将有自己的块作用域。这包括与关键字（if、for等）无关的浮动花括号对。以下片段中的代码是块作用域规则的示例：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Snippet 1.3: Block Scope'
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.3：块作用域
- en: 'Variables declared with the keywords `let` and `const` have **block scope**.
    When a variable is declared with block scope, it does NOT have the same variable
    hoisting as variables that are created in function scope. Block scoped variables
    are not hoisted to the top of the scope and therefore cannot be accessed until
    they are declared. This means that variables that are created with block scope
    are subject to the **Temporal Dead Zone** (**TDZ**). The TDZ is the period between
    when a scope is entered and when a variable is declared. It ends when the variable
    is declared rather than assigned. The following example demonstrates the TDZ:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键字`let`和`const`声明的变量具有**块作用域**。当使用块作用域声明变量时，它不具有与在函数作用域中创建的变量相同的变量提升。块作用域变量不会被提升到作用域的顶部，因此在声明之前无法访问。这意味着使用块作用域创建的变量受到**暂时性死区**（**TDZ**）的影响。TDZ是指进入作用域和声明变量之间的时间段。它在变量被声明而不是赋值时结束。以下示例演示了TDZ：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Snippet 1.4: Temporal Dead Zone'
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.4：暂时性死区
- en: Note
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If a variable is accessed inside the Temporal Dead Zone, then a runtime error
    will be thrown. This is important because it allows our code to be built more
    robustly with fewer semantic errors arising from variable declaration.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在暂时性死区内访问变量，则会抛出运行时错误。这很重要，因为它可以使我们的代码更加健壮，减少由于变量声明而产生的语义错误。
- en: 'To get a better understanding of scope blocks, refer to the following table:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解作用域块，请参考以下表格：
- en: '![Figure 1.1: Function Scope versus Block Scope](image/Figure_1.1.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1：函数作用域与块作用域](image/Figure_1.1.jpg)'
- en: 'Figure 1.1: Function Scope versus Block Scope'
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.1：函数作用域与块作用域
- en: In summary, scope provides us with a way to separate variables and restrict
    access between blocks of code. Variable identifier names can be reused between
    blocks of scope. All new scope blocks that are created can access the parent scope,
    or the scope in which they were created or defined. JavaScript has two types of
    scope. A new function scope is created for each function defined. Variables can
    be added to function scope with the `var` keyword, and these variables are hoisted
    to the top of the scope. Block scope is a new ES6 feature. A new block scope is
    created for each set of curly braces. Variables are added to block scope with
    the `let` and `const` keywords. The variables that are added are not hoisted and
    are subject to the TDZ.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，作用域为我们提供了一种在代码块之间分离变量并限制访问的方式。变量标识符名称可以在作用域块之间重复使用。所有创建的新作用域块都可以访问父作用域，或者它们被创建或定义的作用域。JavaScript有两种作用域。为每个定义的函数创建一个新的函数作用域。变量可以使用`var`关键字添加到函数作用域，并且这些变量会被提升到作用域的顶部。块作用域是ES6的一个新特性。为每组花括号创建一个新的块作用域。使用`let`和`const`关键字将变量添加到块作用域。添加的变量不会被提升，并且受到TDZ的影响。
- en: 'Exercise 1: Implementing Block Scope'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习1：实现块作用域
- en: 'To implement block scope principles with variables, perform the following steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用变量实现块作用域原则，请执行以下步骤：
- en: Create a function called `fn1` as shown (`function fn1())`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fn1`的函数（`function fn1()`）。
- en: Log the string as `scope 1.`
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录字符串为`scope 1`。
- en: Create a variable called `scope` with the value of 5.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`scope`的变量，其值为5。
- en: Log the value of the variable called `scope`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录名为`scope`的变量的值。
- en: Create a new block scope inside of the function with curly braces (`{}`).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数内部使用花括号（`{}`）创建一个新的作用域块。
- en: Inside the new scope block, log the string called `scope 2.`
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的作用域块内，记录名为`scope 2`的字符串。
- en: Create a new variable called `scope`, inside the scope block and assign the
    value `different scope`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在作用域块内创建一个名为`scope`的新变量，并赋值为`different scope`。
- en: Log the value variable `scope` inside our block scope (scope 2).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录块作用域内变量`scope`的值（scope 2）。
- en: Outside of the block scope defined in step 5 (scope 2), create a new block scope
    (use curly braces).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在步骤5中定义的作用域块之外（scope 2），创建一个新的作用域块（使用花括号）。
- en: Log the string called `scope 3.`
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录名为`scope 3`的字符串。
- en: Create a variable inside the scope block (scope 3) with the same name as the
    variables (call it `scope`) and assign it the value `a third scope`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在作用域块（作用域3）内创建一个同名的变量（称为 `scope`）并将其赋值为 `第三个作用域`。
- en: Log the new variable's value.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录新变量的值。
- en: Call `fn1` and observe its output
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `fn1` 并观察其输出
- en: '**Code**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**'
- en: 'index.js:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: index.js：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[https://bit.ly/2RoOotW](https://bit.ly/2RoOotW)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/2RoOotW](https://bit.ly/2RoOotW)'
- en: 'Snippet 1.5: Block implementation output'
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 代码片段1.5：块实现输出
- en: '**Outcome**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: '![Figure 1.2: Scope outputs'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2：作用域输出'
- en: '](image/Figure_1.2.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_1.2.jpg)'
- en: 'Figure 1.2: Scope outputs'
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.2：作用域输出
- en: You have successfully implemented block scope in JavaScript.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功在JavaScript中实现了块作用域。
- en: In this section, we covered the two types of JavaScript scope, function and
    block scope, and the differences between them. We demonstrated how a new instance
    of function scope was created inside each function and how block scope was created
    inside each set of curly braces. We discussed the variable declaration keywords
    for each type of scope, `var` for function scope and `let/const` for block scope.
    Finally, we covered the basics of hoisting with both function and block scope.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了JavaScript作用域的两种类型，函数作用域和块作用域，以及它们之间的区别。我们演示了如何在每个函数内部创建一个新的函数作用域实例，以及如何在每组花括号内创建块作用域。我们讨论了每种作用域类型的变量声明关键字，`var`
    用于函数作用域，`let/const` 用于块作用域。最后，我们介绍了函数作用域和块作用域的变量提升的基础知识。
- en: Declaring Variables
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明变量
- en: Basic JavaScript uses the keyword `var` for **variable declaration**. ECMAScript
    6 introduced two new keywords to declare variables; they are `let` and `const`.
    In the world of Professional JavaScript variable declaration, `var` is now the
    weakest link. In this topic, we will go over the new keywords, `let` and `const`,
    and explain why they are better than `var`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 基本JavaScript使用关键字 `var` 进行**变量声明**。ECMAScript 6引入了两个新关键字来声明变量；它们是 `let` 和 `const`。在专业JavaScript变量声明的世界中，`var`
    现在是最薄弱的环节。在本主题中，我们将介绍新关键字 `let` 和 `const`，并解释它们为什么比 `var` 更好。
- en: 'The three ways to declare variables in JavaScript are by using `var`, `let`,
    and `const`. All function in slightly different ways. The key differences between
    the three variable declaration keywords are the way they handle variable reassignment,
    variable scope, and variable hoisting. These three features can be explained briefly
    as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中声明变量的三种方式是使用 `var`、`let` 和 `const`。它们的功能略有不同。这三种变量声明关键字之间的关键区别在于它们处理变量重新分配、变量作用域和变量提升的方式。这三个特性可以简要解释如下：
- en: '**Variable reassignment:** The ability to change or reassign the variable''s
    value at any time.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量重新赋值：** 在任何时候改变或重新分配变量的值的能力。'
- en: '**Variable scope:** The extent or area of the code from which the variable
    may be accessed.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量作用域：** 变量可以被访问的代码范围或区域。'
- en: '**Variable hoisting**: The variable instantiation and assignment time in relation
    to the variable''s declaration. Some variables can be used before they are declared.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量提升：** 变量实例化和赋值时间与变量声明的关系。有些变量可以在它们被声明之前使用。'
- en: 'The `var` keyword is the older variable declaration keyword that''s used to
    declare variables in JavaScript. All variables created with `var` can be reassigned,
    have function scope, and have variable hoisting. This means that variables created
    with `var` are hoisted to the top of the scope block, where they are defined and
    can be accessed before declaration. The following snippet demonstrates this, as
    follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`var` 关键字是在JavaScript中用于声明变量的较旧的关键字。所有使用 `var` 创建的变量都可以重新分配，具有函数作用域，并且具有变量提升。这意味着使用
    `var` 创建的变量被提升到作用域块的顶部，在那里它们被定义并且可以在声明之前访问。以下代码片段演示了这一点，如下所示：'
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Snippet 1.6: Variables created using var are hoisted'
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 代码片段1.6：使用var创建的变量被提升
- en: 'Since variables that are created with the keyword `var` are not constants,
    they can be created, assigned, and reassigned a value at will. The following code
    demonstrates this aspect of the functionality of `var`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由关键字 `var` 创建的变量不是常量，因此可以随意创建、分配和重新分配值。以下代码演示了 `var` 功能的这一方面：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Snippet 1.7: Variables created using var are not constant'
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 代码片段1.7：使用var创建的变量不是常量
- en: Variables created with `var` can be reassigned at any time and once the variable
    is created, it can be accessed from anywhere in the function, even before the
    original declaration point.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `var` 创建的变量可以在任何时候重新分配，并且一旦变量被创建，即可在函数中的任何地方访问，甚至是在原始声明点之前。
- en: 'The `let` keyword functions similar to the keyword `var`. As expected, the
    keyword let allows us to declare a variable that can be reassigned at any time.
    This is shown in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`let` 关键字与关键字 `var` 类似。如预期的那样，关键字 `let` 允许我们声明一个可以在任何时候重新分配的变量。以下代码中展示了这一点：'
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Snippet 1.8: Variables created with let are not constant'
  id: totrans-92
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 代码片段1.8：使用let创建的变量不是常量
- en: There are two significant differences between `let` and `var`. Where `let` and
    `var` differ is their scoping and variable hoisting properties. Variables declared
    with `let` are scoped at the block level; that is, they are only defined in the
    block of code contained within a matching pair of curly braces (`{}`).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`let` 和 `var` 之间有两个重要的区别。`let` 和 `var` 的区别在于它们的作用域和变量提升属性。使用 `let` 声明的变量的作用域是块级的；也就是说，它们只在匹配的一对花括号（`{}`）内的代码块中定义。'
- en: 'Variables declared with `let` are not subject to variable hoisting. This means
    that accessing a variable declared with `let` before the assignment will throw
    a runtime error. As discussed earlier, this is the Temporal Dead Zone. An example
    of this is shown in the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `let` 声明的变量不受变量提升的影响。这意味着在赋值之前访问使用 `let` 声明的变量将引发运行时错误。正如前面讨论的那样，这就是暂时性死区。以下代码示例说明了这一点：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Snippet 1.9: Variables created with let are not hoisted'
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 代码片段1.9：使用let创建的变量不会被提升
- en: 'The last variable declaration keyword is `const`. The `const` keyword has the
    same scoping and variable hoisting rules as the `let` keyword; variables declared
    with `const` have block scoping and do not get hoisted to the top of the scope.
    This is shown in the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个变量声明关键字是`const`。`const`关键字具有与`let`关键字相同的作用域和变量提升规则；使用`const`声明的变量具有块作用域，并且不会被提升到作用域的顶部。这在以下代码中显示：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Snippet 1.10: Variables created with const are not hoisted'
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.10：使用const创建的变量不会被提升
- en: The key difference between `const` and `let` is that `const` signifies that
    the identifier will not be reassigned. The `const` identifier signifies a read-only
    reference to a value. In other words, the value written in a `const` variable
    cannot be changed. If the value of a variable initialized with `const` is changed,
    a `TypeError` will be thrown.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`和`let`之间的关键区别在于`const`表示标识符不会被重新分配。`const`标识符表示对值的只读引用。换句话说，不能更改`const`变量中写入的值。如果更改了使用`const`初始化的变量的值，将抛出`TypeError`。'
- en: 'Even though variables created with `const` cannot be reassigned, this does
    not mean that they are immutable. If an array or object is stored in a variable
    declared with `const`, the value of the variable cannot be overwritten. However,
    the array content or object properties can be changed. The contents of an array
    can be modified with functions such as `push()`, `pop()`, or `map()` and object
    properties can be added, removed, or updated. This is shown in the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 即使使用`const`创建的变量不能被重新分配，这并不意味着它们是不可变的。如果数组或对象存储在使用`const`声明的变量中，则无法覆盖变量的值。但是，数组内容或对象属性可以更改。可以使用`push()`、`pop()`或`map()`等函数修改数组的内容，并且可以添加、删除或更新对象属性。这在以下代码中显示：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Snippet 1.11: Variables created with const are constant but not immutable'
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.11：使用const创建的变量是常量但不是不可变的
- en: 'To understand the different keywords in more detail, refer to the following
    table:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要更详细地了解不同的关键字，请参考以下表格：
- en: '![Figure 1.3: Differences between var, let, and const'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3：var、let和const之间的差异'
- en: '](image/Figure_1.3.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_1.3.jpg)'
- en: 'Figure 1.3: Differences between var, let, and const'
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.3：var、let和const之间的差异
- en: Now that we understand the nuances among `var`, `let`, and `const`, we can decide
    on which one to use. In the professional world, we should always use `let` and
    `const`, because they provide all the functionality of `var` and allow the programmer
    to be specific and restrictive with the variable scope and usage.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了`var`、`let`和`const`之间的细微差别，我们可以决定使用哪一个。在专业世界中，我们应该始终使用`let`和`const`，因为它们提供了`var`的所有功能，并允许程序员对变量的范围和用法进行具体和限制性的定义。
- en: In summary, `var`, `let`, and `const` all function similarly. The key differences
    are in the nature of `const`, the scope, and the hoisting. `Var` is function scoped,
    not constant, and hoisted to the top of the scope block. `let` and `const` are
    both block-scoped and not hoisted. `let` is not constant, while, `const` is constant
    but immutable.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`var`、`let`和`const`都有类似的功能。关键区别在于`const`的性质、作用域和提升。`var`是函数作用域的，不是常量，并且被提升到作用域块的顶部。`let`和`const`都是块作用域的，不会被提升。`let`不是常量，而`const`是常量但不可变的。
- en: 'Exercise 2: Utilizing Variables'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习2：利用变量
- en: 'To utilize the `var`, `const`, and `let` variable declaration keywords for
    variable hoisting and reassignment properties, perform the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用`var`、`const`和`let`变量声明关键字的变量提升和重新分配属性，执行以下步骤：
- en: Log the string `Hoisted before assignment:` and the value of the `hoisted` variable.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录字符串`赋值前提升：`和`hoisted`变量的值。
- en: Define a variable called `hoisted` with the keyword `var` and assign it the
    value `this got hoisted`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用关键字`var`定义一个名为`hoisted`的变量，并将其赋值为`this got hoisted`。
- en: Log the string `hoisted after assignment:` and the value of the `hoisted` variable.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录字符串`赋值后提升：`和`hoisted`变量的值。
- en: Create a try-catch block.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个try-catch块。
- en: Inside the `try` block, log the value of the variable called `notHoisted1`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`try`块内，记录名为`notHoisted1`的变量的值。
- en: Inside the `catch` block, give the catch block the `err` parameter, then log
    the string `Not hoisted1 with error:` and the value of `err.message`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`catch`块内，给catch块`err`参数，然后记录字符串`带错误的未提升1：`和`err.message`的值。
- en: After the try-catch block, create the `notHoisted1` variable with the `let`
    keyword and assign the value `5`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在try-catch块之后，使用关键字`let`创建`notHoisted1`变量，并赋值为`5`。
- en: Log the string `notHoisted1 after assignment` and the value of `notHoisted1`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录字符串`赋值后notHoisted1`和`notHoisted1`的值。
- en: Create another try-catch block.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个try-catch块。
- en: Inside the `try` block, log the value of the `notHoisted2` variable.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`try`块内，记录`notHoisted2`变量的值。
- en: Inside the catch block, give the catch block the `err` parameter, then log the
    string `Not hoisted2 with error:` and the value of `err.message`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在catch块内，给catch块`err`参数，然后记录字符串`带错误的未提升2：`和`err.message`的值。
- en: After the second try-catch block, create the `notHoisted2` variable with the
    keyword `const` and assign the value [`1`,`2`,`3`].
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个try-catch块之后，使用关键字`const`创建`notHoisted2`变量，并赋值[`1`,`2`,`3`]。
- en: Log the string `notHoisted2 after assignment` and the value of `notHoisted2`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录字符串`赋值后notHoisted2`和`notHoisted2`的值。
- en: Define a final try catch block.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个最终的try catch块。
- en: Inside the `try` block, reassign `notHoisted2` to the `new value` string.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`try`块内，将`notHoisted2`重新分配为`new value`字符串。
- en: Inside the catch block, give the catch block the `err` parameter, then log the
    string `Not hoisted 2 was not able to be changed`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在catch块内，给catch块`err`参数，然后记录字符串`未提升2无法更改`。
- en: After the try-catch block, push the value `5` onto the array in `notHoisted2`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在try-catch块之后，将值`5`推送到`notHoisted2`中的数组中。
- en: Log the string `notHoisted2 updated. Now is:` and the value of `notHoisted2`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录字符串`notHoisted2已更新。现在是：`和`notHoisted2`的值。
- en: '**Code**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**'
- en: 'index.js:'
  id: totrans-131
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 'index.js:'
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Snippet 1.12: Updating the contents of the object'
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.12：更新对象的内容
- en: '[https://bit.ly/2RDEynv](https://bit.ly/2RDEynv)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/2RDEynv](https://bit.ly/2RDEynv)'
- en: '**Outcome**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: '![Figure 1.4: Hoisting the variables'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4：提升变量'
- en: '](image/Figure_1.4.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_1.4.jpg)'
- en: 'Figure 1.4: Hoisting the variables'
  id: totrans-138
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.4：提升变量
- en: You have successfully utilized keywords to declare variables.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功地利用关键字声明变量。
- en: In this section, we discussed variable declaration in ES6 and the benefits of
    using the `let` and `const` variable declaration keywords over the `var` variable
    declaration keyword. We discussed each keywords variable reassignment properties,
    variable scoping, and variable hoisting properties. The keywords `let` and `const`
    are both `create` variables in the block scope where `var` creates a variable
    in the function scope. Variables created with `var` and `let` can be reassigned
    at will. However, variables created with `const` cannot be reassigned. Finally,
    variables created with the keyword `var` are hoisted to the top of the scope block
    in which they were defined. Variables created with `let` and `const` are not hoisted.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了ES6中的变量声明以及使用`let`和`const`变量声明关键字相对于`var`变量声明关键字的好处。我们讨论了每个关键字的变量重新赋值属性，变量作用域和变量提升属性。关键字`let`和`const`都在块作用域中`创建`变量，而`var`在函数作用域中创建变量。使用`var`和`let`创建的变量可以随意重新赋值。然而，使用`const`创建的变量不能被重新赋值。最后，使用关键字`var`创建的变量被提升到它们被定义的作用域块的顶部。使用`let`和`const`创建的变量不会被提升。
- en: Introducing Arrow Functions
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入箭头函数
- en: '**Arrow functions**, or **Fat arrow functions**, are a new way to create functions
    in ECMAScript 6\. Arrow functions simplify function syntax. They are called **fat
    arrow functions** because they are denoted with the characters =>, which, when
    put together look like a fat arrow. Arrow functions in JavaScript are frequently
    used in callback chains, promise chains, array methods, in any situation where
    unregistered functions would be useful.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**箭头函数**，或**Fat箭头函数**，是在ECMAScript 6中创建函数的新方法。箭头函数简化了函数语法。它们被称为**fat箭头函数**，因为它们用字符=>表示，这样放在一起看起来像一个粗箭头。JavaScript中的箭头函数经常在回调链，承诺链，数组方法中使用，在任何需要未注册函数的情况下都会很有用。'
- en: The key difference between arrow functions and normal functions in JavaScript
    is that arrow functions are **anonymous**. Arrow functions are not named and not
    bound to an identifier. This means that an arrow function is created dynamically
    and is not given a name like normal functions. Arrow functions can however be
    assigned to a variable to allow for reuse.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中箭头函数和普通函数之间的关键区别在于箭头函数是**匿名**的。箭头函数没有名称，也没有绑定到标识符。这意味着箭头函数是动态创建的，不像普通函数那样有名称。然而，箭头函数可以分配给一个变量以便重用。
- en: 'When creating an arrow function, all we need to do is remove the function keyword
    and place an arrow between the function arguments and function body. Arrow functions
    are denoted with the following syntax:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 创建箭头函数时，我们只需要删除函数关键字，并在函数参数和函数体之间放置一个箭头。箭头函数用以下语法表示：
- en: '[PRE12]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Snippet 1.13: Arrow function syntax'
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.13：箭头函数语法
- en: As you can see from the preceding syntax, arrow functions are a more concise
    way of writing functions in JavaScript. They can make our code more concise and
    easier to read.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的语法中可以看出，箭头函数是JavaScript中更简洁的编写函数的方式。它们可以使我们的代码更简洁，更易读。
- en: 'Arrow function syntax can also vary, depending on several factors. Syntax can
    vary slightly depending on the number of arguments passed in to the function,
    and the number of lines of code in the function body. The special syntax conditions
    are outlined briefly in the following list:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数语法也可能有所不同，取决于几个因素。语法可能会略有不同，具体取决于传递给函数的参数数量以及函数体中的代码行数。特殊的语法条件在以下列表中简要概述：
- en: Single input argument
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个输入参数
- en: No input arguments
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无输入参数
- en: Single line function body
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单行函数体
- en: Single expression broken over multiple lines
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个表达式跨多行
- en: Object literal return value
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象字面量返回值
- en: 'Exercise 3: Converting Arrow Functions'
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习3：转换箭头函数
- en: 'To demonstrate the simplified syntax by converting a standard function into
    an arrow function, perform the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示通过将标准函数转换为箭头函数来简化语法，执行以下步骤：
- en: Create a function that takes in parameters and returns the sum of the two parameters.
    Save the function into a variable called `fn1`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个接受参数并返回两个参数之和的函数。将函数保存到名为`fn1`的变量中。
- en: Convert the function you just created to an arrow function and save into another
    variable called `fn2`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将刚刚创建的函数转换为箭头函数，并保存到另一个名为`fn2`的变量中。
- en: To convert the function, remove the `function` keyword. Next, place an arrow
    between the function arguments and the function body.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换函数，删除`function`关键字。接下来，在函数参数和函数体之间放置一个箭头。
- en: Call both functions and compare the output.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用两个函数并比较输出。
- en: '**Code**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**'
- en: 'index.js:'
  id: totrans-161
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 'index.js:'
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Snippet 1.14: Calling the functions'
  id: totrans-163
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.14：调用函数
- en: '[https://bit.ly/2M6uKwN](https://bit.ly/2M6uKwN)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/2M6uKwN](https://bit.ly/2M6uKwN)'
- en: '**Outcome**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: '![Figure 1.5: Comparing the function''s output](image/Figure_1.5.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5：比较函数的输出](image/Figure_1.5.jpg)'
- en: 'Figure 1.5: Comparing the function''s output'
  id: totrans-167
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.5：比较函数的输出
- en: You have successfully converted normal functions into arrow functions.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将普通函数转换为箭头函数。
- en: Arrow Function Syntax
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 箭头函数语法
- en: If there are multiple arguments being passed in to the function, then we create
    the function with the parentheses around the arguments as normal. If we only have
    a single argument to pass to the function, we do not need to include the parentheses
    around the argument.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个参数传递给函数，那么我们使用括号来创建函数，括号包围参数就像平常一样。如果我们只有一个参数要传递给函数，我们就不需要在参数周围加括号。
- en: 'There is one exception to this rule, and that is if the parameter is anything
    other than a simple identifier. If we include a default value or perform operations
    in the function arguments, then we must include the parentheses. For example,
    if we include a default parameter, then we will need the parentheses around the
    arguments. These two rules are shown in the following code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则有一个例外，那就是参数不是简单的标识符。如果我们在函数参数中包含默认值或执行操作，那么我们必须包含括号。例如，如果我们包含默认参数，那么我们将需要在参数周围加上括号。这两条规则如下面的代码所示：
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Snippet 1.15: Single argument arrow function'
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.15：单参数箭头函数
- en: 'If we create an arrow function with no arguments, then we need to include the
    parentheses, but they will be empty. This is shown in the following code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建一个没有参数的箭头函数，那么我们需要包括括号，但括号将是空的。如下面的代码所示：
- en: '[PRE15]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Snippet 1.16: No argument'
  id: totrans-176
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.16：无参数
- en: 'Arrow functions can also have varied syntax, depending on the body of the function.
    As expected, if the body of the function is multiline, then we must surround it
    with curly braces. However, if the body of the function is a single line, then
    we do not need to include the curly braces around the body of the function. This
    is shown in the following code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数的语法也可以有所不同，取决于函数的主体。如预期的那样，如果函数的主体是多行的，那么我们必须用花括号括起来。但是，如果函数的主体是单行的，那么我们不需要在函数的主体周围包含花括号。这如下面的代码所示：
- en: '[PRE16]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Snippet 1.17: Single line body'
  id: totrans-179
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.17：单行体
- en: 'When using arrow functions, we may also exclude the return keyword if the function
    is a single line. The arrow function automatically returns the resolved value
    of the expression on that line. This syntax is shown in the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用箭头函数时，如果函数是单行的，我们也可以省略return关键字。箭头函数会自动返回该行表达式的解析值。这种语法如下面的代码所示：
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Snippet 1.18: Single line body when value is returned'
  id: totrans-182
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.18：返回值为单行体
- en: 'Since arrow functions with single expression bodies can be defined without
    the curly braces, we need special syntax to allow us to split the single expression
    over multiple lines. To do this, we can wrap the multi-line expression in parentheses.
    The JavaScript interpreter sees that the line are wrapped in parentheses and treats
    it as if it were a single line of code. This is shown in the following code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单行表达式体的箭头函数可以在没有花括号的情况下定义，我们需要特殊的语法来允许我们将单个表达式分成多行。为此，我们可以将多行表达式放在括号中。JavaScript解释器会看到括号中的行，并将其视为单行代码。这如下面的代码所示：
- en: '[PRE18]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Snippet 1.19: Single line expression broken into multiple lines'
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.19：将单行表达式分成多行
- en: 'If we have a single line arrow function returning an object literal, we will
    need special syntax. In ES6, scope blocks, function bodies, and object literals
    are all defined with curly braces. Since single line arrow functions do not need
    curly braces, we must use the special syntax to prevent the object literal''s
    curly braces from being interpreted as either function body curly braces or scope
    block curly braces. To do this, we surround the returned object literal with parentheses.
    This instructs the JavaScript engine to interpret curly braces inside the parentheses
    as an expression instead of a function body or scope block declaration. This is
    shown in the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个返回对象字面量的单行箭头函数，我们将需要特殊的语法。在ES6中，作用域块、函数主体和对象字面量都是用花括号定义的。由于单行箭头函数不需要花括号，我们必须使用特殊的语法来防止对象字面量的花括号被解释为函数主体花括号或作用域块花括号。为此，我们用括号括起返回的对象字面量。这指示JavaScript引擎将括号内的花括号解释为表达式，而不是函数主体或作用域块声明。这如下面的代码所示：
- en: '[PRE19]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Snippet 1.20: Object literal return value'
  id: totrans-188
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 片段1.20：对象字面量返回值
- en: When using arrow functions, we must be careful of the scope that these functions
    are called in. Arrow functions follow normal scoping rules in JavaScript, with
    the exception of the `this` scope. Recall that in basic JavaScript, each function
    is assigned a scope, that is, the `this` scope. Arrow functions are not assigned
    a `this` scope. They inherit their parent's `this` scope and cannot have a new
    `this` scope bound to them. This means that, as expected, arrow functions have
    access to the scope of the parent function, and subsequently, the variables in
    that scope, but the scope of `this` cannot be changed in an arrow function. Using
    the `.apply()`, `.call()`, or `.bind()` function modifiers will NOT change the
    scope of an arrow function's `this` property. If you are in a situation where
    you must bind `this` to another scope, then you must use a normal JavaScript function.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用箭头函数时，我们必须注意这些函数被调用的作用域。箭头函数遵循JavaScript中的正常作用域规则，但`this`作用域除外。回想一下，在基本的JavaScript中，每个函数都被分配一个作用域，即`this`作用域。箭头函数没有被分配一个`this`作用域。它们继承其父级的`this`作用域，并且不能将新的`this`作用域绑定到它们。这意味着，如预期的那样，箭头函数可以访问父函数的作用域，随后访问该作用域中的变量，但`this`的作用域不能在箭头函数中改变。使用`.apply()`、`.call()`或`.bind()`函数修改器都不会改变箭头函数的`this`属性的作用域。如果你处于必须将`this`绑定到另一个作用域的情况，那么你必须使用普通的JavaScript函数。
- en: In summary, arrow functions provide us with a way to simplify the syntax of
    anonymous functions. To write an arrow function, simply omit the function keyword
    and add an arrow between the arguments and function body.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，箭头函数为我们提供了简化匿名函数语法的方法。要编写箭头函数，只需省略function关键字，并在参数和函数体之间添加一个箭头。
- en: Special syntax can then be applied to the function arguments and body to simplify
    the arrow function even more. If the function has a single input argument, then
    we can omit the parentheses around it. If the function body has a single line,
    we can omit the `return` keyword and the curly braces around it. However, single-line
    functions that return an object literal must be surrounded with parentheses.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以应用特殊语法来简化箭头函数。如果函数有一个输入参数，那么我们可以省略括号。如果函数主体是单行的，我们可以省略`return`关键字和花括号。然而，返回对象字面量的单行函数必须用括号括起来。
- en: We can also use parentheses around the function body to break a single line
    body into multiple lines for readability.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在函数体周围使用括号，以便将单行函数体分成多行以提高可读性。
- en: 'Exercise 4: Upgrading Arrow Functions'
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4：升级箭头函数
- en: 'To utilize the ES6 arrow function syntax to write functions, perform the following
    steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用ES6箭头函数语法编写函数，请执行以下步骤：
- en: Refer to the `exercises/exercise4/exercise.js` file and perform the updates
    in this file.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考`exercises/exercise4/exercise.js`文件并在此文件中执行更新。
- en: Convert `fn1` with basic ES6 syntax.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用基本的ES6语法转换`fn1`。
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数参数之前删除函数关键字。在函数参数和函数体之间添加箭头。
- en: Convert `fn2` with single statement function body syntax.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用单语句函数体语法转换`fn2`。
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数参数之前删除函数关键字。在函数参数和函数体之间添加箭头。
- en: Remove the curly braces `({})` around the function body. Remove the return keyword.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 删除函数体周围的花括号`({})`。删除return关键字。
- en: Convert `fn3` with Single input argument syntax.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用单个输入参数语法转换`fn3`。
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数参数之前删除函数关键字。在函数参数和函数体之间添加箭头。
- en: Remove the parentheses around the function input argument.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 删除函数输入参数周围的括号。
- en: Convert `fn4` with no input argument syntax.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无输入参数语法转换`fn4`。
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数参数之前删除函数关键字。在函数参数和函数体之间添加箭头。
- en: Convert `fn5` with object literal syntax.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用对象文字语法转换`fn5`。
- en: Remove the function keyword before the function arguments. Add an arrow between
    the function arguments and function body.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数参数之前删除函数关键字。在函数参数和函数体之间添加箭头。
- en: Remove the curly braces `({})` around the function body. Remove the return keyword.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 删除函数体周围的花括号`({})`。删除return关键字。
- en: Surround the returned object with parentheses.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 用括号括起返回的对象。
- en: '**Code**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**'
- en: 'index.js:'
  id: totrans-211
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: index.js：
- en: '[PRE20]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Snippet 1.21: Arrow function conversion'
  id: totrans-213
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 代码段1.21：箭头函数转换
- en: '[https://bit.ly/2M6qSfg](https://bit.ly/2M6qSfg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/2M6qSfg](https://bit.ly/2M6qSfg)'
- en: '**Outcome**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: '![Figure 1.6: Converting the function''s output'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6：转换函数的输出'
- en: '](image/Figure_1.6.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_1.6.jpg)'
- en: 'Figure 1.6: Converting the function''s output'
  id: totrans-218
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.6：转换函数的输出
- en: You have successfully utilized the ES6 arrow function syntax to write functions.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功利用ES6箭头函数语法编写函数。
- en: 'In this section, we introduced arrow functions and demonstrated how they can
    be used to greatly simplify function declaration in JavaScript. First, we covered
    the basic syntax for arrow functions: `( arg1, arg2, argn ) => { /* function body
    */ }`. We proceeded to cover the five special syntax cases for advanced arrow
    functions, as outlined in the following list:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了箭头函数，并演示了它们如何在JavaScript中大大简化函数声明。首先，我们介绍了箭头函数的基本语法：`( arg1, arg2,
    argn ) => { /* function body */ }`。然后，我们继续介绍了高级箭头函数的五种特殊语法情况，如下列表所述：
- en: 'Single input argument: `arg1 => { /* function body */ }`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个输入参数：`arg1 => { /* function body */ }`
- en: 'No input arguments: `( ) => { /* function body */ }`'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无输入参数：`( ) => { /* function body */ }`
- en: 'Single line function body: `( arg1, arg2, argn ) => /* single line */`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单行函数体：`( arg1, arg2, argn ) => /* single line */`
- en: 'Single expression broken over multiple lines: `( arg1, arg2, argn ) => ( /*
    multi line single expression */ )`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个表达式分成多行：`( arg1, arg2, argn ) => ( /* multi line single expression */ )`
- en: 'Object literal return value: `( arg1, arg2, argn ) => ( { /* object literal
    */ } )`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象文字返回值：`( arg1, arg2, argn ) => ( { /* object literal */ } )`
- en: Learning Template Literals
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习模板文字
- en: '**Template literals** are a new form of string that was introduced in ECMAScript
    6\. They are enclosed by the **backtick** symbol ([PRE21]'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板文字**是ECMAScript 6中引入的一种新形式的字符串。它们由**反引号**符号([PRE21]'
- en: const example = "pretty";
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: const example = "pretty";
- en: console.log( `Template literals are ${ example } useful!!!` );
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( `模板文字非常 ${ example } 有用！！！` );
- en: '// Expected output: Template literals are pretty useful!!!'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: // 期望输出：模板文字非常有用！！！
- en: '[PRE22]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: // Using normal strings
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用普通字符串
- en: console.log( 'This is line 1\nThis is line 2' );
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( 'This is line 1\nThis is line 2' );
- en: '// Expected output: This is line 1'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: // 期望输出：这是第1行
- en: // This is line 2
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: // 这是第2行
- en: // Using template literals
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用模板文字
- en: console.log( `This is line 1
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( `This is line 1
- en: This is line 2` );
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第2行` );
- en: '// Expected output: This is line 1'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: // 期望输出：这是第1行
- en: // This is line 2
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: // 这是第2行
- en: '[PRE23]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: let a = 5, b = 10;
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: let a = 5, b = 10;
- en: console.log( a + ' + ' + b + ' is equal to ' + ( a + b ) );
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( a + ' + ' + b + ' is equal to ' + ( a + b ) );
- en: console.log( `${a} + ${b} is equal to ${a + b}` );
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( `${a} + ${b} is equal to ${a + b}` );
- en: '[PRE24]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: function javascriptOrCPlusPlus() { return 'JavaScript'; }
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: function javascriptOrCPlusPlus() { return 'JavaScript'; }
- en: const outputLiteral = `We are learning about ${ `Professional ${ javascriptOrCPlusPlus()
    }` }`
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: const outputLiteral = `我们正在学习关于 ${ `专业 ${ javascriptOrCPlusPlus() }` }`
- en: '[PRE25]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: // Define the tag function
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义标签函数
- en: function tagFunction( strings, numExp, fruitExp ) {
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: function tagFunction( strings, numExp, fruitExp ) {
- en: const str0 = strings[0]; // "We have"
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: const str0 = strings[0]; // "We have"
- en: const str1 = strings[1]; // " of "
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: const str1 = strings[1]; // " of "
- en: 'const quantity = numExp < 10 ? ''very few'' : ''a lot'';'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 'const quantity = numExp < 10 ? ''very few'' : ''a lot'';'
- en: return str0 + quantity + str1 + fruitExp + str2;
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: return str0 + quantity + str1 + fruitExp + str2;
- en: '}'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const fruit = 'apple', num = 8;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 定义水果为'apple'，数字为8。
- en: '// Note: lack of parenthesis or whitespace when calling tag function'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: // 注意：调用标签函数时缺少括号或空格
- en: const output = tagFunction`We have ${num} of ${fruit}. Exciting!`
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: const output = tagFunction`We have ${num} of ${fruit}. Exciting!`
- en: console.log( output )
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( output )
- en: '// Expected output: We have very few of apples. Exciting!!'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: // 期望输出：We have very few of apples. Exciting!!
- en: '[PRE26]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: function tagFunction( strings ){ console.log( strings.raw[0] ); }
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: function tagFunction( strings ){ console.log( strings.raw[0] ); }
- en: tagFunction`This is line 1\. \n This is line 2.`
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: tagFunction`This is line 1\. \n This is line 2.`
- en: '// Expected output: "This is line 1\. \n This is line 2." The characters //''\''
    and ''n'' are not parsed into a newline character'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: //预期输出：“这是第1行。 \n这是第2行。”字符//'\'和'n'不会解析为换行符
- en: '[PRE27]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '{'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'address: ''123 Main St, San Francisco CA, USA'','
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 地址：'123 Main St，San Francisco CA，USA'，
- en: 'floors: 2,'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 楼层：2，
- en: 'price: 5000000,'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 价格：5000000，
- en: 'owner: ''John Doe'''
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: owner：“John Doe”
- en: '}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: function parseHouse( property ) {
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: function parseHouse（property）{
- en: return `${property.owner} is selling the property at ${property.address} for
    ${property.price} USD`
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: return `${property.owner}正在以${property.address}的价格出售该物业${property.price}美元`
- en: '}'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const house = {
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: const house = {
- en: 'address: "123 Main St, San Francisco CA, USA",'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 地址：“123 Main St，San Francisco CA，USA”，
- en: 'floors: 2,'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: floors：2，
- en: 'price: 5000000,'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: price：5000000，
- en: 'owner: "John Doe"'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: owner：“John Doe”
- en: '};'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: console.log( parseHouse( house ) );
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（parseHouse（house））;
- en: '[PRE29]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: function getPersionES5( name, age, height ) {
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: function getPersionES5（name，age，height）{
- en: return {
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'name: name,'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: name：name，
- en: 'age: age,'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 年龄：年龄，
- en: 'height: height'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: height：height
- en: '};'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: getPersionES5( 'Zachary', 23, 195 )
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: getPersionES5（'Zachary'，23，195）
- en: '// Expected output: { name: ''Zachary'', age: 23, height: 195 }'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: //预期输出：{name：'Zachary'，age：23，height：195}
- en: '[PRE30]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: function getPersionES6( name, age, height ) {
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: function getPersionES6（name，age，height）{
- en: return {
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: name,
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: name，
- en: age,
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: age，
- en: height
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: height
- en: '};'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: getPersionES6( 'Zachary', 23, 195 )
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: getPersionES6（'Zachary'，23，195）
- en: '// Expected output: { name: ''Zachary'', age: 23, height: 195 }'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: //预期输出：{name：'Zachary'，age：23，height：195}
- en: '[PRE31]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: function getPersonES5( name, age, height ) {
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: function getPersonES5（name，age，height）{
- en: return {
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: 'name: name,'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: name：name，
- en: 'height: height,'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: height：height，
- en: 'getAge: function(){ return age; }'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: getAge：function（）{ return age; }
- en: '};'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: getPersonES5( 'Zachary', 23, 195 ).getAge()
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: getPersonES5（'Zachary'，23，195）.getAge（）
- en: '// Expected output: 23'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: //预期输出：23
- en: '[PRE32]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: function getPersionES6( name, age, height ) {
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: function getPersionES6（name，age，height）{
- en: return {
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: name,
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: name，
- en: height,
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: height，
- en: getAge(){ return age; }
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: getAge（）{ return age; }
- en: '};'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: getPersionES6( 'Zachary', 23, 195 ).getAge()
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: getPersionES6（'Zachary'，23，195）.getAge（）
- en: '// Expected output: 23'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: //预期输出：23
- en: '[PRE33]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: const varName = 'firstName';
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: const varName = 'firstName';
- en: const person = {
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: const person = {
- en: '[ varName ] = ''John'','
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[varName] = ''John''，'
- en: 'lastName: ''Smith'''
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: lastName：'Smith'
- en: '};'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: 'console.log( person.firstName ); // Expected output: John'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（person.firstName）; //预期输出：John
- en: '[PRE34]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: const varName = 'first';
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: const varName = 'first';
- en: function computeNameType( type ) {
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: function computeNameType（type）{
- en: return type + 'Name';
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: return type + 'Name';
- en: '}'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const person = {
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: const person = {
- en: '[ varName + ''Name'' ] = ''John'','
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[ varName + ''Name'' ] = ''John''，'
- en: '[ computeNameType( ''last'' ) ]: ''Smith'''
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[ computeNameType（''last''）]：''Smith'''
- en: '};'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: 'console.log( person.firstName ); // Expected output: John'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（person.firstName）; //预期输出：John
- en: 'console.log( person.lastName ); // Expected output: Smith'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（person.lastName）; //预期输出：Smith
- en: '[PRE35]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: const PI = 3.1415;
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: const PI = 3.1415;
- en: const INCHES_TO_FEET = 0.083333;
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: const INCHES_TO_FEET = 0.083333;
- en: const exportObject = {
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: const exportObject = {
- en: PI,
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: PI，
- en: INCHES_TO_FEET,
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: INCHES_TO_FEET，
- en: sum( n1, n2 ) {
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: sum（n1，n2）{
- en: return n1 + n2;
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: return n1 + n2;
- en: '},'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '}，'
- en: subtract( n1, n2 ) {
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: subtract（n1，n2）{
- en: return n1 - n2;
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: return n1 - n2;
- en: '}'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: console.log( exportObject );
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（exportObject）;
- en: '[PRE36]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: let names = [ 'John', 'Michael' ];
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: let names = ['John'，'Michael'];
- en: let [ name1, name2 ] = names;
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: let [ name1，name2 ] = names;
- en: 'console.log( name1 ); // Expected output: ''John'''
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name1）; //预期输出：'John'
- en: 'console.log( name2 ); // Expected output: ''Michael'''
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name2）; //预期输出：'Michael'
- en: '[PRE37]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: let names = [ 'John', 'Michael' ];
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: let names = ['John'，'Michael'];
- en: let [ name1 ] = names
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: let [ name1 ] = names
- en: let [ name2, name3, name4 ] = names;
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: let [name2，name3，name4] = names;
- en: 'console.log( name1 ); // Expected output: ''John'''
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name1）; //预期输出：'John'
- en: 'console.log( name2 ); // Expected output: ''John'''
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name2）; //预期输出：'John'
- en: 'console.log( name3 ); // Expected output: ''Michael'''
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name3）; //预期输出：'Michael'
- en: 'console.log( name4 ); // Expected output: undefined'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name4）; //预期输出：未定义
- en: '[PRE38]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: let names = [ 'John', 'Michael', 'Jessica', 'Susan' ];
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: let names = ['John'，'Michael'，'Jessica'，'Susan'];
- en: let [ name1,, name3 ] = names;
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: let [name1，，name3] = names;
- en: // Note the missing variable name for the second array item
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: //注意第二个数组项的缺少变量名
- en: let [ ,,, ] = names; // Ignores all items in the array
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: let [ ,,, ] = names; //忽略数组中的所有项目
- en: 'console.log( name1 ); // Expected output: ''John'''
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name1）; //预期输出：'John'
- en: 'console.log( name3 ); // Expected output: ''Jessica'''
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（name3）; //预期输出：'Jessica'
- en: '[PRE39]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: let [ a = 1, b = 2, c = 3 ] = [ 'cat', null ];
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: let [a = 1，b = 2，c = 3] = ['cat'，null];
- en: 'console.log( a ); // Expected output: ''cat'''
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（a）; //预期输出：'cat'
- en: 'console.log( b ); // Expected output: null'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（b）; //预期输出：null
- en: 'console.log( c ); // Expected output: 3'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（c）; //预期输出：3
- en: '[PRE40]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: let a = 10;
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: let a = 10;
- en: let b = 5;
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: let b = 5;
- en: '[ a, b ] = [ b, a ];'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[a，b] = [b，a];'
- en: 'console.log( a ); // Expected output: 5'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（a）; //预期输出：5
- en: 'console.log( b ); // Expected output: 10'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（b）; //预期输出：10
- en: '[PRE41]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: const data = [ 1, 2, 3 ];
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: const data = [1, 2, 3];
- en: const [ a, , b, c = 4 ] = data;
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: const [ a，，b，c = 4 ] = data;
- en: console.log( a, b, c );
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（a，b，c）;
- en: '[PRE42]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: function fn( num1, num2, ...args ) {
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: function fn（num1，num2，...args）{
- en: // Destructures an indefinite number of function parameters into the
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: //将不确定数量的函数参数解构为
- en: //array args, excluding the first two arguments passed in.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: //数组args，不包括传入的前两个参数。
- en: console.log( num1 );
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（num1）;
- en: console.log( num2 );
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（num2）;
- en: console.log( args );
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（args）;
- en: '}'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: fn( 1, 2, 3, 4, 5, 6 );
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: fn（1, 2, 3, 4, 5, 6）;
- en: // Expected output
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: //预期输出
- en: // 1
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: // 1
- en: // 2
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: // 2
- en: // [ 3, 4, 5, 6 ]
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: // [3, 4, 5, 6]
- en: '[PRE43]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: function fn( ...[ n1, n2, n3 ] ) {
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: function fn（...[n1，n2，n3]）{
- en: // Destructures an indefinite number of function parameters into the
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: //将不确定数量的函数参数解构为
- en: // array args, which is destructured into 3 variables
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: //数组args，解构为3个变量
- en: console.log( n1, n2, n3 );
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n1，n2，n3）;
- en: '}'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'fn( 1, 2 ); // Expected output: 1, 2, undefined'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: fn（1, 2）; //预期输出：1, 2, 未定义
- en: '[PRE44]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: function fn( n1, n2, n3 ) {
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: function fn（n1，n2，n3）{
- en: console.log( n1, n2, n3 );
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n1，n2，n3）;
- en: '}'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const values = [ 1, 2, 3 ];
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: const values = [1, 2, 3];
- en: 'fn( ...values ); // Expected output: 1, 2, 3'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: fn（...values）; //预期输出：1, 2, 3
- en: '[PRE45]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: const [ n1, n2, n3, ...remaining ] = [ 1, 2, 3, 4, 5, 6 ];
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: const [n1，n2，n3，...remaining] = [1, 2, 3, 4, 5, 6];
- en: 'console.log( n1 ); // Expected output: 1'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n1）; //预期输出：1
- en: 'console.log( n2 ); // Expected output: 2'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n2）; //预期输出：2
- en: 'console.log( n3 ); // Expected output: 3'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n3）; //预期输出：3
- en: 'console.log( remaining ); // Expected output: [ 4, 5, 6 ]'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（remaining）; //预期输出：[4, 5, 6]
- en: '[PRE46]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: const obj = {firstName：'Bob'，lastName：'Smith'};
- en: const { firstName, lastName } = obj;
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: const { firstName, lastName } = obj;
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( firstName ); // 期望输出：'Bob'
- en: 'console.log( lastName ); // Expected output: ''Smith'''
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( lastName ); // 期望输出：'Smith'
- en: '[PRE47]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
- en: const { firstName, middleName } = obj;
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: const { firstName, middleName } = obj;
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( firstName ); // 期望输出：'Bob'
- en: 'console.log( middleName ); // Expected output: undefined'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( middleName ); // 期望输出：未定义
- en: '[PRE48]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
- en: 'const { firstName: first, lastName } = obj;'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 'const { firstName: first, lastName } = obj;'
- en: 'console.log( first ); // Expected output: ''Bob'''
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( first ); // 期望输出：'Bob'
- en: 'console.log( lastName ); // Expected output: ''Smith'''
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( lastName ); // 期望输出：'Smith'
- en: '[PRE49]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
- en: const { firstName = 'Samantha', middleName = 'Chris' } = obj;
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: const { firstName = 'Samantha', middleName = 'Chris' } = obj;
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( firstName ); // 期望输出：'Bob'
- en: 'console.log( middleName ); // Expected output: ''Chris'''
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( middleName ); // 期望输出：'Chris'
- en: '[PRE50]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
- en: 'const { firstName: first = ''Samantha'', middleName: middle = ''Chris'' } =
    obj;'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 'const { firstName: first = ''Samantha'', middleName: middle = ''Chris'' } =
    obj;'
- en: 'console.log( first ); // Expected output: ''Bob'''
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( first ); // 期望输出：'Bob'
- en: 'console.log( middle); // Expected output: ''Chris'''
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( middle); // 期望输出：'Chris'
- en: '[PRE51]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'const data = { f1: ''v1'', f2: ''2'', f3: ''v3'' };'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 'const data = { f1: ''v1'', f2: ''2'', f3: ''v3'' };'
- en: 'const { f1, f2: field2, f4 = ''v4'' } = data;'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 'const { f1, f2: field2, f4 = ''v4'' } = data;'
- en: console.log( f1, field2, f4 );
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( f1, field2, f4 );
- en: '[PRE52]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 'const obj = { firstName: ''Bob'', lastName: ''Smith'' };'
- en: let firstName, lastName;
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: let firstName, lastName;
- en: '( { firstName: first, lastName } = obj );'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '（{ firstName: first, lastName } = obj）;'
- en: // Note parentheses around expression
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: // 注意表达式周围的括号
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( firstName ); // 期望输出：'Bob'
- en: 'console.log( lastName ); // Expected output: ''Smith'''
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( lastName ); // 期望输出：'Smith'
- en: '[PRE53]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'const obj = { firstName: ''Bob'', middleName: ''Chris'', lastName: ''Smith''
    };'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 'const obj = { firstName: ''Bob'', middleName: ''Chris'', lastName: ''Smith''
    };'
- en: const { firstName, ...otherNames } = obj;
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: const { firstName, ...otherNames } = obj;
- en: 'console.log( firstName ); // Expected output: ''Bob'''
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( firstName ); // 期望输出：'Bob'
- en: console.log( otherNames );
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( otherNames );
- en: '// Expected output: { middleName: ''Chris'', lastName: ''Smith'' }'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '// 期望输出：{ middleName: ''Chris'', lastName: ''Smith'' }'
- en: '[PRE54]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'const data = { arr: [ 1, 2, 3 ] };'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 'const data = { arr: [ 1, 2, 3 ] };'
- en: 'const { arr: [ , v2 ] } = data;'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 'const { arr: [ , v2 ] } = data;'
- en: console.log( v2 );
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( v2 );
- en: '[PRE55]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '['
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '['
- en: '{'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'title: ''Linear Algebra II'','
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 'title: ''Linear Algebra II'','
- en: 'description: ''Advanced linear algebra.'','
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: ''Advanced linear algebra.'','
- en: 'texts: [ {'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 'texts: [ {'
- en: 'author: ''James Smith'','
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 'author: ''James Smith'','
- en: 'price: 120,'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 'price: 120,'
- en: 'ISBN: ''912-6-44-578441-0'''
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'ISBN: ''912-6-44-578441-0'''
- en: '} ]'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '} ]'
- en: '},'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{ ... },'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '{ ... },'
- en: '{ ... }'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '{ ... }'
- en: ']'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[PRE56]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[ course ] = [ … ]'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[ course ] = [ … ]'
- en: '[PRE57]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[ { texts: textbooks} ] = [ … ]'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '[ { texts: textbooks} ] = [ … ]'
- en: '[PRE58]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[ { texts: [ textbook ] } ] = [ … ]'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[ { texts: [ textbook ] } ] = [ … ]'
- en: '[PRE59]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[ { texts: [ { ISBN } ] } ] = [ … ]'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[ { texts: [ { ISBN } ] } ] = [ … ]'
- en: '[PRE60]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: const courseCatalogMetadata = [
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: const courseCatalogMetadata = [
- en: '{'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'title: ''Linear Algebra II'','
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 'title: ''Linear Algebra II'','
- en: 'description: ''Advanced linear algebra.'','
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: ''Advanced linear algebra.'','
- en: 'texts: [ {'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 'texts: [ {'
- en: 'author: ''James Smith'','
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 'author: ''James Smith'','
- en: 'price: 120,'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 'price: 120,'
- en: 'ISBN: ''912-6-44-578441-0'''
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 'ISBN: ''912-6-44-578441-0'''
- en: '} ]'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '} ]'
- en: '}'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '];'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '];'
- en: const [ course ] = courseCatalogMetadata;
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: const [ course ] = courseCatalogMetadata;
- en: 'const [ { texts: textbooks } ] = courseCatalogMetadata;'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 'const [ { texts: textbooks } ] = courseCatalogMetadata;'
- en: 'const [ { texts: [ textbook ] } ] = courseCatalogMetadata;'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 'const [ { texts: [ textbook ] } ] = courseCatalogMetadata;'
- en: 'const [ { texts: [ { ISBN } ] } ] = courseCatalogMetadata;'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 'const [ { texts: [ { ISBN } ] } ] = courseCatalogMetadata;'
- en: console.log( course );
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( course );
- en: console.log( textbooks );
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( textbooks );
- en: console.log( textbook );
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( textbook );
- en: console.log( ISBN );
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( ISBN );
- en: '[PRE61]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: class name { /* class stuff goes here */ }
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: class name { /* class stuff goes here */ }
- en: '[PRE62]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: class House{
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: class House{
- en: constructor(address, floors = 1, garage = false) {
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(address, floors = 1, garage = false) {
- en: this.address = address;
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: this.address = address;
- en: this.floors = floors;
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: this.floors = floors;
- en: this.garage = garage;
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: this.garage = garage;
- en: '}'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE63]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: class Vehicle {
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: class Vehicle {
- en: constructor( wheels, topSpeed ) {
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: constructor( wheels, topSpeed ) {
- en: this.wheels = wheels;
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: this.wheels = wheels;
- en: this.topSpeed = topSpeed;
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: this.topSpeed = topSpeed;
- en: '}'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const tricycle = new Vehicle( 3, 20 );
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: const tricycle = new Vehicle( 3, 20 );
- en: console.log( tricycle.wheels, tricycle.topSpeed );
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( tricycle.wheels, tricycle.topSpeed );
- en: '[PRE64]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: class House{
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: class House{
- en: constructor(address, floors = 1) {
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(address, floors = 1) {
- en: this.address = address;
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: this.address = address;
- en: this.floors = floors;
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: this.floors = floors;
- en: '}'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Instantiate the class
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: // 实例化类
- en: let myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2, false );
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: let myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2, false );
- en: '[PRE65]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: class House{
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: class House{
- en: constructor( address, floors = 1) {
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: constructor( address, floors = 1) {
- en: this.address = address;
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: this.address = address;
- en: this.floors = floors;
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: this.floors = floors;
- en: '}'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: getFloors() {
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: getFloors() {
- en: return this.floors;
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: return this.floors;
- en: '}'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: let myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2 );
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: let myHouse = new House( '1100 Fake St., San Francisco CA, USA', 2 );
- en: 'console.log( myHouse.getFloors() ); // Expected output: 2'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( myHouse.getFloors() ); // 期望输出：2
- en: '[PRE66]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: class House {}
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: class House {}
- en: class Mansion extends House {}
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: class Mansion extends House {}
- en: '[PRE67]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: class House {
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: class House {
- en: constructor( address = 'somewhere' ) {
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: constructor( address = 'somewhere' ) {
- en: this.address = address;
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: this.address = address;
- en: '}'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: class Mansion extends House {
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: class Mansion extends House {
- en: constructor( address, floors ) {
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: constructor( address, floors ) {
- en: super( address );
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: super( address );
- en: this.floors = floors;
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: this.floors = floors;
- en: '}'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: let mansion = new Mansion( 'Hollywood CA, USA', 6, 'Brad Pitt' );
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: let mansion = new Mansion( 'Hollywood CA, USA', 6, 'Brad Pitt' );
- en: 'console.log( mansion.floors ); // Expected output: 6'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( mansion.floors ); // 期望输出：6
- en: '[PRE68]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: // math-module-1.js
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: // math-module-1.js
- en: export const PI = 3.1415;
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: export const PI = 3.1415;
- en: export const DEGREES_IN_CIRCLE = 360;
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: export const DEGREES_IN_CIRCLE = 360;
- en: export function convertDegToRad( degrees ) {
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: export function convertDegToRad( degrees ) {
- en: return degrees * PI / ( DEGREES_IN_CIRCLE /2 );
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: return degrees * PI / ( DEGREES_IN_CIRCLE /2 );
- en: '}'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // math-module-2.js
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: // math-module-2.js
- en: const PI = 3.1415;
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: const PI = 3.1415;
- en: const DEGREES_IN_CIRCLE = 360;
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: const DEGREES_IN_CIRCLE = 360;
- en: function convertDegToRad( degrees ) {
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: function convertDegToRad( degrees ) {
- en: return degrees * PI / ( DEGREES_IN_CIRCLE /2 );
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: return degrees * PI / ( DEGREES_IN_CIRCLE /2 );
- en: '}'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: export { PI, DEGREES_IN_CIRCLE, convertDegToRad };
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: export { PI, DEGREES_IN_CIRCLE, convertDegToRad };
- en: '[PRE69]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: // HouseClass.js
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: // HouseClass.js
- en: export default class() { /* Class body goes here */ }
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: export default class() { /* Class body goes here */ }
- en: // myFunction.js
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: // myFunction.js
- en: export default function() { /* Function body goes here */ }
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: export default function() { /* Function body goes here */ }
- en: '[PRE70]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: // math-module.js
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: // math-module.js
- en: export const PI = 3.1415;
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: export const PI = 3.1415;
- en: export const DEGREES_IN_CIRCLE = 360;
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: export const DEGREES_IN_CIRCLE = 360;
- en: // index1.js
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: // index1.js
- en: import { PI } from 'math-module.js'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: import { PI } from 'math-module.js'
- en: // index2.js
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: // index2.js
- en: import { PI, DEGREES_IN_CIRCLE } from 'math-module.js'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: import { PI, DEGREES_IN_CIRCLE } from 'math-module.js'
- en: // index3.js
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: // index3.js
- en: import { PI as pi, DEGREES_IN_CIRCLE as degInCircle } from 'math-module.js'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: import { PI as pi, DEGREES_IN_CIRCLE as degInCircle } from 'math-module.js'
- en: // index4.js
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: // index4.js
- en: import * as MathModule from 'math-module.js'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: import * as MathModule from 'math-module.js'
- en: '[PRE71]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: // email-callback-api.js
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: // email-callback-api.js
- en: export function authenticate( … ){ … }
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: export function authenticate( … ){ … }
- en: export function sendEmail( … ){ … }
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: export function sendEmail( … ){ … }
- en: export function listEmails( … ){ … }
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: export function listEmails( … ){ … }
- en: // app.js
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: // app.js
- en: import * as EmailAPI from 'email-callback-api.js';
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: import * as EmailAPI from 'email-callback-api.js';
- en: 'const credentials = { password: ''****'', user: ''Zach'' };'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 'const credentials = { password: ''****'', user: ''Zach'' };'
- en: EmailAPI.authenticate( credentials, () => {
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: EmailAPI.authenticate( credentials, () => {
- en: 'EmailAPI.send( { to: ''ceo@google.com'', subject: ''promotion'', body: ''Please
    promote me'' }, () => {} );'''
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 'EmailAPI.send( { to: ''ceo@google.com'', subject: ''promotion'', body: ''Please
    promote me'' }, () => {} );'''
- en: '} );'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '} );'
- en: '[PRE72]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: <script type="module" src="./path/to/module.js"></script>
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: <script type="module" src="./path/to/module.js"></script>
- en: '[PRE73]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: <script type="module">
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: <script type="module">
- en: import * as ModuleExample from './path/to/module.js';
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: import * as ModuleExample from './path/to/module.js';
- en: </script>
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: </script>
- en: '[PRE74]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: <script type="module" src="es6-module-supported.js"></script>
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: <script type="module" src="es6-module-supported.js"></script>
- en: <script nomodule src="es6-module-NOT-supported.js"></script>
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: <script nomodule src="es6-module-NOT-supported.js"></script>
- en: '[PRE75]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: class Car {
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: class Car {
- en: constructor( make, model, year, color ) {
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: constructor( make, model, year, color ) {
- en: this.make = make;
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: this.make = make;
- en: this.model = model;
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: this.model = model;
- en: this.year = year;
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: this.year = year;
- en: this.color = color;
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: this.color = color;
- en: '}'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: setColor( color ) {
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: setColor( color ) {
- en: this.color = color;
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: this.color = color;
- en: '}'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: let subaru = new Car( 'Subaru', 'Outback', 2005, 'Grey' );
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: let subaru = new Car( 'Subaru', 'Outback', 2005, 'Grey' );
- en: subaru.setColor( 'Red' );
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: subaru.setColor( 'Red' );
- en: '[PRE76]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '{'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"devDependencies": {'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '"devDependencies": {'
- en: '"babel-cli": "^6.26.0"'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '"babel-cli": "^6.26.0"'
- en: '}'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE77]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '"devDependencies": {'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '"devDependencies": {'
- en: '"babel-cli": "^6.26.0",'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '"babel-cli": "^6.26.0",'
- en: '"babel-preset-es2015": "^6.24.1"'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '"babel-preset-es2015": "^6.24.1"'
- en: '}'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE78]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '{'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"presets": ["es2015"]'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '"presets": ["es2015"]'
- en: '}'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE79]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: const sum5 = inputNumber  => inputNumber + 5;
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: const sum5 = inputNumber  => inputNumber + 5;
- en: console.log( `The sum of 5 and 5 is ${sum5(5)}!`);
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( `The sum of 5 and 5 is ${sum5(5)}!`);
- en: '[PRE80]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '"scripts": {'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '"scripts": {'
- en: '"transpile": "babel app.js --out-file app.transpiled.js --source-maps"'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '"transpile": "babel app.js --out-file app.transpiled.js --source-maps"'
- en: '}'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE81]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '// File 1: package.json'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '// File 1: package.json'
- en: '{'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"scripts": {'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '"scripts": {'
- en: '"transpile": "babel ./app.js --out-file app.transpiled.js --source-maps"'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '"transpile": "babel ./app.js --out-file app.transpiled.js --source-maps"'
- en: '},'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '"devDependencies": {'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '"devDependencies": {'
- en: '"babel-cli": "^6.26.0",'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '"babel-cli": "^6.26.0",'
- en: '"babel-preset-es2015": "^6.24.1"'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '"babel-preset-es2015": "^6.24.1"'
- en: '}'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE82]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '// File 2: .babelrc'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '// File 2: .babelrc'
- en: '{ "presets": ["es2015"] }'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "presets": ["es2015"] }'
- en: '[PRE83]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '// File 3: app.transpiled.js'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '// File 3: app.transpiled.js'
- en: var fn1 = function fn1(a, b) { … };
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: var fn1 = function fn1(a, b) { … };
- en: var fn2 = function fn2(a, b) { … };
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: var fn2 = function fn2(a, b) { … };
- en: var fn3 = function fn3(a) { … };
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: var fn3 = function fn3(a) { … };
- en: var fn4 = function fn4() { … };
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: var fn4 = function fn4() { … };
- en: var fn5 = function fn5(a) { … };
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: var fn5 = function fn5(a) { … };
- en: '[PRE84]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: function createIterator( array ){
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: function createIterator( array ){
- en: let currentIndex = 0;
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: let currentIndex = 0;
- en: return {
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: return {
- en: next(){
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: next(){
- en: return currentIndex < array.length ?
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: return currentIndex < array.length ?
- en: '{ value: array[ currentIndex++ ], done: false} :'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '{ value: array[ currentIndex++ ], done: false} :'
- en: '{ done: true };'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '{ done: true };'
- en: '}'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE85]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: // Using an iterator
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: // Using an iterator
- en: let it = createIterator( [ 'Hello', 'World' ] );
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: let it = createIterator( [ 'Hello', 'World' ] );
- en: console.log( it.next() );
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( it.next() );
- en: '// Expected output: { value: ''Hello'', done: false }'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '// Expected output: { value: ''Hello'', done: false }'
- en: console.log( it.next() );
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( it.next() );
- en: '// Expected output: { value: ''World'' , done: false }'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '// Expected output: { value: ''World'' , done: false }'
- en: console.log( it.next() );
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( it.next() );
- en: '// Expected output: { value: undefined, done: true }'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '// Expected output: { value: undefined, done: true }'
- en: '[PRE86]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: function *testGen( data ) { yield 0; }.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: function *testGen( data ) { yield 0; }.
- en: '[PRE87]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: function *gen() {
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: function *gen() {
- en: let i = 0;
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: let i = 0;
- en: while (true){
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: while (true){
- en: yield i++;
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: yield i++;
- en: '}'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE88]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: function *gen() {
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: function *gen() {
- en: let i = 1;
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: let i = 1;
- en: while (true){
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: while (true){
- en: yield i;
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: yield i;
- en: i = i * 2;
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: i = i * 2;
- en: '}'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const generator = gen();
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: const generator = gen();
- en: console.log( generator.next(), generator.next(), generator.next() );
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( generator.next(), generator.next(), generator.next() );
- en: '[PRE89]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: let sequence = gen();
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: let sequence = gen();
- en: console.log(sequence.next());
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(sequence.next());
- en: '//Expected output: { value: 0, done: false }'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '//Expected output: { value: 0, done: false }'
- en: console.log(sequence.next());
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(sequence.next());
- en: '//Expected output: { value: 1, done: false }'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '//Expected output: { value: 1, done: false }'
- en: console.log(sequence.next());
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(sequence.next());
- en: '//Expected output: { value: 2, done: false }'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '//Expected output: { value: 2, done: false }'
- en: '[PRE90]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: function *gen() {
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: function *gen() {
- en: let i = 0;
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: let i = 0;
- en: while (true){
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: while (true){
- en: let inData = yield i++;
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: let inData = yield i++;
- en: console.log( inData );
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: console.log( inData );
- en: '}'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: let sequence = gen();
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: let sequence = gen();
- en: sequence.next()
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.next()
- en: sequence.next( 'test1' )
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.next( 'test1' )
- en: sequence.next()
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.next()
- en: sequence.next( 'test2' )
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.next( 'test2' )
- en: '// Expected output:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '// Expected output:'
- en: // 'test1'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: // 'test1'
- en: // undefined
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: // undefined
- en: // 'test2'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: // 'test2'
- en: '```'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Snippet 1.86 Yield keyword
  id: totrans-740
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Snippet 1.86 Yield keyword
- en: In summary, generators are an iterative way of building a collection of data.
    They return values one at a time while tracking internal state. When the `yield`
    keyword is reached, internal execution is stopped and a value is returned. When
    the `next` function is called, execution resumes until a `yield` is reached. Data
    can be passed into a generator through the next function. Data that's passed in
    is returned through the `yield` expression. When a generator emits a value object
    with the `done` parameter set to true, calls to `generator.next()` should not
    yield any new values.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，生成器是构建数据集的迭代方式。它们一次返回一个值，同时跟踪内部状态。当达到`yield`关键字时，内部执行停止并返回一个值。当调用`next`函数时，执行恢复，直到达到`yield`。数据可以通过`next`函数传递给生成器。通过`yield`表达式返回传入的数据。当生成器发出一个值对象，并将`done`参数设置为true时，对`generator.next()`的调用不应产生任何新的值。
- en: In the final topic, Topic I, we introduced iterators and generators. Iterators
    traverse through data in a collection of data and return the value requested at
    each step. Once they have reached the end of the collection, a done flag is set
    to true and no new items will be iterated over. Generators are a way to generate
    a collection of data. At each step, the generator produces a new value based on
    its internal state. Iterators and generators both track their internal state as
    they progress through their life cycle.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个主题I中，我们介绍了迭代器和生成器。迭代器遍历数据集合中的数据，并在每一步返回请求的值。一旦它们到达集合的末尾，`done`标志将设置为true，并且不会再迭代新的项目。生成器是一种生成数据集合的方法。在每一步中，生成器根据其内部状态产生一个新值。迭代器和生成器都在它们的生命周期中跟踪它们的内部状态。
- en: 'Activity 1: Implementing Generators'
  id: totrans-743
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动1：实现生成器
- en: You have been tasked with building a simple app that generates numbers in the
    Fibonacci sequence upon request. The app generates the next number in the sequence
    for each request and resets the sequence it is given as input. Use a generator
    to generate the Fibonacci sequence. If a value is passed into the generator, reset
    the sequence.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 您被要求构建一个简单的应用程序，根据请求生成斐波那契数列中的数字。该应用程序为每个请求生成序列中的下一个数字，并在给定输入时重置序列。使用生成器生成斐波那契数列。如果将一个值传递给生成器，则重置序列。
- en: 'To build a complex iterative dataset using a generator, perform the following
    steps:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成器构建复杂的迭代数据集，执行以下步骤：
- en: Look up the Fibonacci sequence.
  id: totrans-746
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找斐波那契数列。
- en: Create a generator that provides the values in the Fibonacci sequence.
  id: totrans-747
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个生成器，提供斐波那契数列中的值。
- en: If the generator's `yield` statement returns a value, reset the sequence
  id: totrans-748
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果生成器的`yield`语句返回一个值，则重置序列。
- en: '**Outcome**'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '**结果**'
- en: '![Figure 1.18: Implementing generators output'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.18：实现生成器输出'
- en: '](image/Figure_1.18.jpg)'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_1.18.jpg)'
- en: 'Figure 1.18: Implementing generators output'
  id: totrans-752
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.18：实现生成器输出
- en: You have successfully created a generator that can be used to build an iterative
    dataset based on the Fibonacci sequence.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功创建了一个可以用来基于斐波那契数列构建迭代数据集的生成器。
- en: Note
  id: totrans-754
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 280.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在第280页找到。
- en: Summary
  id: totrans-756
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how ECMAScript is a scripting language specification
    for modern JavaScript. ECMAScript 6, or ES6, was released in 2015\. Through this
    chapter, we covered some of the various key points of ES6 and their differences
    from previous versions of JavaScript. We highlighted the rules of variable scoping,
    the keywords for declaring variables, fat arrow function syntax, template literals,
    enhanced object property notation, destructuring assignment, classes and modules,
    transpilation, and iterators and generators. You are ready to begin applying this
    knowledge to your professional JavaScript projects.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到ECMAScript是现代JavaScript的脚本语言规范。ECMAScript 6，或ES6，于2015年发布。通过本章，我们涵盖了ES6的一些关键点及其与以前版本JavaScript的区别。我们强调了变量作用域的规则，声明变量的关键字，箭头函数语法，模板文字，增强的对象属性表示法，解构赋值，类和模块，转译和迭代器和生成器。您已经准备好将这些知识应用于您的专业JavaScript项目。
- en: In the next chapter, we will learn what an asynchronous programming language
    is and how to write and understand asynchronous code.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习什么是异步编程语言，以及如何编写和理解异步代码。
