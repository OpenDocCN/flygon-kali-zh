- en: Chapter 5. Message Flow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。消息流
- en: 'We discussed message transformation in the last chapter. After transformation
    has been taken care of, there can be additional tasks before it can be delivered
    to the next in the chain. For example, messages might need some chunking, or they
    might be incomplete and need some temporary storage or sequencing. In this chapter,
    we will explore the out-of-the-box capabilities that the Spring Integration framework
    provides for a seamless flow of messages across heterogeneous components. We will
    cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章讨论了消息转换。在转换完成后，可能需要在传递到链中的下一个组件之前进行一些额外的任务。例如，消息可能需要一些分块，或者它们可能是不完整的，需要一些临时存储或排序。在本章中，我们将探讨Spring
    Integration框架提供的跨异构组件无缝消息流的开箱即用功能。本章将涵盖以下主题：
- en: Routers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器
- en: Filters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器
- en: Splitters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分裂器
- en: Aggregators
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合器
- en: Resequencers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序器
- en: Chaining handlers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接处理程序
- en: Routers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由器
- en: '**Routers** are components that pick messages from a channel and, depending
    on a set of pre-defined criteria, deliver them to different channels. Routers
    never change the message—they only route/reroute messages to the next destination.
    Spring Integration provides the following built-in routers:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**路由器**是从通道中提取消息并根据一组预定义的标准将它们传递到不同通道的组件。路由器永远不会更改消息-它们只会将消息路由/重新路由到下一个目的地。Spring
    Integration提供以下内置路由器：'
- en: Payload-type router
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载类型路由器
- en: Header value router
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头值路由器
- en: Recipient list router
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收件人列表路由器
- en: XPath router (part of the XML module)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XPath路由器（XML模块的一部分）
- en: Error message exception-type router
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误消息异常类型路由器
- en: Payload-type router
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载类型路由器
- en: 'As can be observed from the preceding code snippet, depending on the payload
    type, the message is routed to different channels. The `java.lang.String` class
    has been configured to be routed to `jmsChannel`, while `org.springframework.messaging.Message`
    has been configured to be routed to `mailChannel`. The following two elements
    have been used:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中可以看出，根据有效载荷类型，消息被路由到不同的通道。已配置`java.lang.String`类路由到`jmsChannel`，而已配置`org.springframework.messaging.Message`路由到`mailChannel`。使用了以下两个元素：
- en: '`int:payload-type-router`: This is used to provide a namespace for the payload-type
    router'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:payload-type-router`: 用于为payload-type路由器提供命名空间'
- en: '`int:mapping`: This is the tag used to provide mapping between the Java object
    and the channel'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:mapping`: 这是用于在Java对象和通道之间提供映射的标记'
- en: Header value router
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 头值路由器
- en: 'Instead of using the type of message payload, this router will try to read
    headers that have been set on the payload:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路由器将尝试读取在有效载荷上设置的标头，而不是使用消息有效载荷的类型：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Recipient list router
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收件人列表路由器
- en: 'Do not get confused with recipients who are users! Here, the recipient list
    refers to a list of channels, which can receive the message. It can be compared
    to the publish-subscribe channel use case, where a predefined set of channels
    are "subscribed" with the router:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不要与用户混淆收件人！这里，收件人列表指的是可以接收消息的通道列表。它可以与发布-订阅通道用例进行比较，其中预定义的一组通道与路由器“订阅”：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All the messages delivered on the feeds channel will be delivered both on `transformFeedChannel`
    and `auditFeedChannel`. The elements used are simple:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在feeds通道上传递的所有消息都将同时传递到`transformFeedChannel`和`auditFeedChannel`。使用的元素很简单：
- en: '`int:recipient-list-router`: This is used to provide a namespace for a recipientlist
    router'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:recipient-list-router`: 用于为收件人列表路由器提供命名空间'
- en: '`int:recipient`: This is used to provide the name of the channel, which should
    receive the message'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:recipient`: 用于提供应接收消息的通道的名称'
- en: XPath router
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath路由器
- en: 'In [Chapter 4](part0037_split_000.html#page "Chapter 4. Message Transformers"),
    *Message Transformers*, we discussed handling XML payloads in detail and we discussed
    an example of *XPath*-based transformers. XPath router is similar—instead of transforming
    a message based on the XPath value, it is routed to one of the channels:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0037_split_000.html#page "第4章。消息转换器") *消息转换器*中，我们详细讨论了处理XML有效载荷，并讨论了基于XPath的转换器的示例。XPath路由器类似-它不是基于XPath值转换消息，而是将其路由到其中一个通道：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This can send messages to a channel or a set of channels—the value of the expression
    will decide the channels to which messages should be routed. There is a way to
    route messages to specific channels based on the value of the expression:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以将消息发送到一个通道或一组通道-表达式的值将决定应将消息路由到哪些通道。有一种方法可以根据表达式的值将消息路由到特定的通道：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Error message exception-type router
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误消息异常类型路由器
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An explanation of the tags used in this code snippet is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段中使用的标记的解释如下：
- en: '`int:exception-type-router`: This provides the namespace for exception-type
    router.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:exception-type-router`: 这为异常类型路由器提供了命名空间。'
- en: '`default-output-channel`: This is used to specify the default channel where
    the message should be delivered if none of the mappings can resolve a channel
    for the message. This is defined later in detail.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default-output-channel`: 用于指定消息如果没有映射可以解析消息的通道，则应将其传递到的默认通道。稍后将详细定义。'
- en: '`int:mapping exception-type`: This is used to map an exception to a channel
    name.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:mapping exception-type`: 用于将异常映射到通道名称。'
- en: Default output channel
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认输出通道
- en: 'There can be cases where the router is unable to decide which channel a message
    should be delivered to—what to do in this case? The following two options are
    available:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在路由器无法决定将消息传递到哪个通道的情况-在这种情况下该怎么办？有以下两个选项：
- en: '**Throw an exception**: Depending on a use case, this can be an exception that
    has been mapped to a channel, or the exception can be thrown to be propagated
    above in the chain.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抛出异常**：根据用例，这可以是已映射到通道的异常，或者可以抛出异常以在链中传播。'
- en: '**Define a default output channel**: As the name suggests, this is the channel
    where all the messages for which channel delivery cannot be decided are delivered.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义默认输出通道**：顾名思义，这是无法确定通道传递的所有消息都会传递到的通道。'
- en: 'For example, in the preceding code snippet, the default channel has been specified
    as:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在前面的代码片段中，已经指定了默认通道为：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If the exception cannot be mapped to a defined list, a message will be put on
    the default channel.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果异常无法映射到已定义的列表，消息将被放在默认通道上。
- en: Using annotations
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用注解
- en: 'Spring''s power comes from converting simple Java classes to specific components
    without extending or implementing external classes. To define routers, we can
    leverage the framework''s `@Router` annotation. We can annotate any method with
    `@Router`, and can use its reference. Let''s take an example where we want to
    route our feed based on the author:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的强大之处在于将简单的Java类转换为特定组件，而无需扩展或实现外部类。要定义路由器，我们可以利用框架的`@Router`注解。我们可以用`@Router`对任何方法进行注解，并可以使用它的引用。让我们举一个例子，我们想要根据作者来路由我们的feed：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The return value is a string that is the author's name—a channel with the same
    name must be present. Alternatively, we can return `MessageChannel` or a list
    of `MessageChannel` references directly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是作者的名字 - 必须存在一个同名的通道。或者，我们可以直接返回`MessageChannel`或`MessageChannel`引用的列表。
- en: Filters
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: 'Message filters are Spring Integration components, which act as an interceptor
    and decide whether to pass on the message to the next channel/component or drop
    it. Unlike routers, which decide what should be the next channel for a message,
    filters only take a *boolean* decision—whether to pass or not. There are two ways
    to define a message filter in Spring Integration:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 消息过滤器是Spring Integration组件，充当拦截器，并决定是否将消息传递到下一个通道/组件或丢弃它。与路由器不同，路由器决定消息的下一个通道应该是什么，过滤器只做一个*布尔*决定
    - 是否传递或不传递。在Spring Integration中定义消息过滤器有两种方式：
- en: Write a simple Java class and designate its method that will take decisions
    whether to pass the message or not
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个简单的Java类，并指定它的方法来决定是否传递消息
- en: Configure it as a message endpoint that delegates to an implementation of the
    `MessageSelector` interface
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其配置为委托给`MessageSelector`接口的实现的消息端点
- en: This can be configured either in XML or annotations can be used.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在XML中配置，也可以使用注解。
- en: Using a Java class to act as a filter
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Java类作为过滤器
- en: 'Let''s take an example of using a simple Java class as a filter—this is part
    of our example about feeds. As feeds come in, we try to validate whether the payload
    is empty or not—then only pass it on for further processing:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以使用简单的Java类作为过滤器的示例来说明 - 这是关于feeds的示例的一部分。当feeds进来时，我们尝试验证负载是否为空，然后只有在验证通过后才将其传递给进一步处理：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The tags interpretation is as simple and intuitive as it can be:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 标签的解释就像它可以是那样简单和直观：
- en: '`int:filter`: This is used to specify the Spring framework namespace for filters'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:filter`：这用于指定过滤器的Spring框架命名空间'
- en: '`input-channel`: This is the channel from which messages will be picked'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input-channel`：这是将要提取消息的通道'
- en: '`output-channel`: This is the channel to which messages will be delivered if
    they pass the filtering criteria'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output-channel`：这是如果消息通过了过滤条件将要传递到的通道'
- en: '`ref`: This is used for the reference of the Java bean that is acting as a
    filter'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`：这是作为过滤器的Java bean的引用'
- en: '`method`: This is the method of the Java bean acting as a filter'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`：这是作为过滤器的Java bean的方法'
- en: 'Declaration for the bean acting as a filter is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 作为过滤器的bean的声明如下：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'An actual Java class that has method filtering for the messages, is shown in
    the following code snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真正的Java类，它有用于消息过滤的方法，如下代码片段所示：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also decide what to do if the payload fails the filtering criteria,
    for example, if the payload is empty. In such a case, we can do either of the
    following two options:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以决定如果负载未通过过滤条件，例如如果负载为空，我们可以做以下两种选项之一：
- en: An exception can be thrown
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常可能会被抛出
- en: It can be routed to a specific channel where action can be taken on it—say,
    just log the occurrence of a failure
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以被路由到一个特定的通道，在那里可以对其采取行动 - 比如，只是记录失败的发生
- en: 'To throw an exception, we can use the following code snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要抛出异常，我们可以使用以下代码片段：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To log the exception, we can use the following code snippet:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要记录异常，我们可以使用以下代码片段：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we used a filter on a direct channel and validated the payload. If validation
    was successful, we passed on the message; otherwise, we rejected the message either
    by throwing an exception or by logging its occurrence. Another use case for filters
    could be publish-subscribe channels—many endpoints can listen on a channel and
    filter out the messages of their interest.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在直接通道上使用了一个过滤器并验证了负载。如果验证成功，我们就传递消息；否则，我们通过抛出异常或记录其发生来拒绝消息。过滤器的另一个用例可能是发布-订阅通道
    - 许多端点可以监听通道并过滤出他们感兴趣的消息。
- en: 'We can also use *annotation* to define filters. Just using the `@Filter` annotation
    on a method of Java class and Spring Integration will convert it to a filter component—no
    need to extend or implement any additional reference:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用*注解*来定义过滤器。只需在Java类的方法上使用`@Filter`注解，Spring Integration就会将其转换为过滤器组件 -
    无需扩展或实现任何其他引用：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A filter declaration in XML needs to be changed, no need to use the `method`
    parameter:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在XML中声明过滤器需要更改，不需要使用`method`参数：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Configuring a filter as a message endpoint
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将过滤器配置为消息端点
- en: 'Another option to define a filter is to use frameworks (`MessageSelector`).
    The Java class needs to implement this interface and override the `accept` method.
    Whenever a payload is passed, the `accept` method is invoked and it returns a
    decision whether to pass on the message or drop it. The following code snippet
    modifies the previous example using `MessageSelector`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 定义过滤器的另一个选项是使用框架（`MessageSelector`）。Java类需要实现这个接口并重写`accept`方法。每当传递一个负载时，`accept`方法被调用并返回一个决定是否传递消息或丢弃消息的决定。以下代码片段修改了先前使用`MessageSelector`的示例：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After this definition, the filter can be declared and used as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个定义之后，过滤器可以被声明并如下使用：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Since bean class has been declared inline, there is no need for the reference
    tag.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于bean类已内联声明，因此不需要引用标签。
- en: Splitters
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分隔器
- en: Splitters, as the name suggests, are used to split messages in smaller chunks
    and then send such resulting chunks for independent processing. There can be several
    reasons for splitting—larger size of payload than that of what is acceptable by
    the next endpoint, or message load parts that can be processed in parallel or
    down the chain. There is an aggregator and it is necessary to do some processing
    before these can be aggregated. Spring Integration provides a `splitter` tag.
    As in the case of a filter, splitters can also be written either by extending
    the framework interface or by writing a custom POJO.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 分隔器，顾名思义，用于将消息分割成较小的块，然后将这些结果块发送到独立处理。分割的原因可能有几个——负载大小比下一个端点可接受的负载大小大，或者可以并行处理或传递到链下的消息负载部分。有一个聚合器，需要在这些消息被聚合之前进行一些处理。Spring
    Integration提供了一个`splitter`标签。与过滤器一样，分隔器也可以通过扩展框架接口或编写自定义POJO来编写。
- en: 'Let''s take the simpler one first, leveraging a simple Java class as a splitter:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从简单的一个开始，利用一个简单的Java类作为分隔器：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The elements are pretty self-explanatory:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素都相当不言自明：
- en: '`int:splitter`: This is used to specify the Spring framework namespace for
    filters'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:splitter`: 这用于指定过滤器的Spring框架命名空间。'
- en: '`ref`: This is used to provide a reference of bean acting as a splitter'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`: 这用于提供充当分隔器的bean的引用'
- en: '`method`: This is used to specify a method in bean having message splitting
    implementation'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`: 这用于指定bean中具有消息分割实现的方法'
- en: '`input-channel`: This is the channel from which messages will be read'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input-channel`: 这是将要读取消息的通道'
- en: '`output-channel`: This is the channel on which messages will be written'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output-channel`: 这是将要写入消息的通道'
- en: 'Java class acting as a splitter:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 充当分隔器的Java类：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Splitters must return a type of collection, and each item from that collection
    is then delivered one at a time to the next endpoint. If the returned value is
    not a message type, then each element will be wrapped in a message type before
    delivery. Let''s define a service activator for this splitter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 分隔器必须返回一种集合类型，然后该集合中的每个项目将逐个传递到下一个端点。如果返回的值不是消息类型，那么在传递之前，每个元素将被包装在消息类型中。让我们为这个分隔器定义一个服务激活器：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The method `printSplitMessage` is defined in the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`printSplitMessage`在以下代码片段中被定义：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can avoid using the `method` tag by using annotation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过注解来避免使用`method`标签：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As in the case of filters, we can also use framework support to write our splitters.
    Any Java class can extend `AbstractMessageSplitter` and override `splitMessage`.
    The previous example has been modified by extending the framework support in the
    following code snippet:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与过滤器一样，我们也可以使用框架支持来编写我们的分隔器。任何Java类都可以扩展`AbstractMessageSplitter`并重写`splitMessage`。前面的示例已经通过扩展框架支持进行了修改，如下代码片段所示：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Aggregators
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合器
- en: 'The aggregators are the opposite of splitters—they combine multiple messages
    and present them as a single message to the next endpoint. This is a very complex
    operation, so let''s start by a real life scenario. A news channel might have
    many correspondents who can upload articles and related images. It might happen
    that the text of the articles arrives much sooner than the associated images—but
    the article must be sent for publishing only when all relevant images have also
    arrived. This scenario throws up a lot of challenges; partial articles should
    be stored somewhere, there should be a way to correlate incoming components with
    existing ones, and also there should be a way to identify the completion of a
    message. Aggregators are there to handle all of these aspects—some of the relevant
    concepts that are used are `MessageStore`, `CorrelationStrategy`, and `ReleaseStrategy`.
    Let''s start with a code sample and then we will dive down to explore each of
    these concepts in detail:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合器是分隔器的相反——它们将多个消息组合在一起，并将它们作为单个消息呈现给下一个端点。这是一个非常复杂的操作，所以让我们从一个现实生活场景开始。新闻频道可能有许多记者可以上传文章和相关图片。可能会出现文章的文本比相关图片到达得更早的情况，但只有当所有相关图片也到达时，文章才能被发送进行发布。这种情况带来了许多挑战；部分文章应该被存储在某个地方，应该有一种方法将传入的组件与现有的组件进行关联，还应该有一种方法来识别消息的完成。聚合器就是用来处理所有这些方面的——一些相关的概念是`MessageStore`、`CorrelationStrategy`和`ReleaseStrategy`。让我们从一个代码示例开始，然后我们将深入探讨这些概念的每一个：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Hmm, a pretty big declaration! And why not—a lot of things combine together
    to act as an aggregator. Let''s quickly glance at all the tags used:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，一个相当庞大的声明！为什么不呢——许多东西结合在一起充当聚合器。让我们快速浏览一下使用的所有标签：
- en: '`int:aggregator`: This is used to specify the Spring framework''s namespace
    for the aggregator.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int:aggregator`: 这用于指定聚合器的Spring框架命名空间。'
- en: '`input-channel`: This is the channel from which messages will be consumed.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input-channel`: 这是将要消费消息的通道。'
- en: '`output-channel`: This is the channel to which messages will be dropped after
    aggregation.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output-channel`: 这是聚合后消息将被发送到的通道。'
- en: '`ref`: This is used to specify the bean having the method that is called on
    the release of messages.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`: 这用于指定在消息释放时调用的方法的bean。'
- en: '`method`: This is used to specify the method that is invoked when messages
    are released.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`: 这用于指定在释放消息时调用的方法。'
- en: '`release-strategy`: This is used to specify the bean having the method that
    decides whether aggregation is complete or not.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release-strategy`: 这用于指定决定聚合是否完成的方法的bean。'
- en: '`release-strategy-method`: This is the method having the logic to check for
    completeness of the message.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release-strategy-method`: 这是具有检查消息完整性逻辑的方法。'
- en: '`correlation-strategy`: This is used to specify the bean having the method
    to correlate the messages.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`correlation-strategy`: 这用于指定具有关联消息方法的bean。'
- en: '`correlation-strategy-method`: This is the method having the actual logic to
    correlate the messages.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`correlation-strategy-method`: 这是具有实际逻辑来关联消息的方法。'
- en: '`message-store`: This is used to specify the message store, where messages
    are temporarily stored until they have been correlated and are ready to release.
    This can be in memory (which is default) or can be a persistence store. If a persistence
    store is configured, message delivery will be resumed across a server crash.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message-store`：用于指定消息存储，消息在此临时存储，直到它们被关联并准备释放。这可以是内存（默认）或持久性存储。如果配置了持久性存储，消息传递将在服务器崩溃后恢复。'
- en: 'Java class can be defined as an aggregator and, as described in the previous
    bullet points, the `method` and `ref` parameters decide which method of bean (referred
    by `ref`) should be invoked when messages have been aggregated as per `CorrelationStrategy`
    and released after fulfilment of `ReleaseStrategy`. In the following example,
    we are just printing the messages before passing them on to the next consumer
    in the chain:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Java类可以被定义为聚合器，并且，如前面的要点所述，`method`和`ref`参数决定了在`CorrelationStrategy`按照聚合消息并在`ReleaseStrategy`满足后释放时应调用哪个bean的方法。在以下示例中，我们只是在将消息传递给链中的下一个消费者之前打印消息：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Let's get to the details of the three most important components that complete
    the aggregator.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解一下完成聚合器的三个最重要的组件。
- en: Correlation strategy
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关策略
- en: 'Aggregator needs to group the messages—but how will it decide the groups? In
    simple words, `CorrelationStrategy` decides how to correlate the messages. The
    default is based on a header named `CORRELATION_ID`. All messages having the same
    value for the `CORRELATION_ID` header will be put in one bracket. Alternatively,
    we can designate any Java class and its method to define a custom correlation
    strategy or can extend Spring Integration framework''s `CorrelationStrategy` interface
    to define it. If the `CorrelationStrategy` interface is implemented, then the
    `getCorrelationKey()` method should be implemented. Let''s see our correlation
    strategy in the feeds example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合器需要对消息进行分组——但它将如何决定分组呢？简单来说，`CorrelationStrategy`决定了如何关联消息。默认情况下，基于名为`CORRELATION_ID`的标头。所有具有相同`CORRELATION_ID`标头值的消息将被放在一个括号中。或者，我们可以指定任何Java类及其方法来定义自定义相关策略，或者可以扩展Spring
    Integration框架的`CorrelationStrategy`接口来定义它。如果实现了`CorrelationStrategy`接口，则应实现`getCorrelationKey()`方法。让我们看看我们在源示例中的相关策略：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: So how are we correlating our messages? We are correlating the feeds based on
    the category name. The method must return an object that can be used for correlating
    the messages. If a user-defined object is returned, it must satisfy the requirements
    for a key in a map such as defining `hashcode()` and `equals()`. The return value
    must not be null.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们是如何关联我们的消息的呢？我们是根据类别名称关联源进行关联的。该方法必须返回一个对象，该对象可用于关联消息。如果返回了用户定义的对象，则它必须满足作为映射键的要求，例如定义`hashcode()`和`equals()`。返回值不能为null。
- en: 'Alternatively, if we would have wanted to implement it by extending framework
    support, then it would have looked like this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们想要通过扩展框架支持来实现它，那么它会是这样的：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Release strategy
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布策略
- en: 'We have been grouping messages based on correlation strategy—but when will
    we release it for the next component? This is decided by the release strategy.
    Similar to the correlation strategy, any Java POJO can define the release strategy
    or we can extend framework support. Here is the example of using the Java POJO
    class:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在根据相关策略对消息进行分组，但是我们什么时候才会为下一个组件发布它呢？这由发布策略决定。与相关策略类似，任何Java POJO都可以定义发布策略，或者我们可以扩展框架支持。以下是使用Java
    POJO类的示例：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The argument of a message must be of type collection and it must return a Boolean
    indication whether to release the accumulated messages or not. For simplicity,
    we have just checked for the number of messages from the same category—if it's
    greater than two, we release the messages.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 消息的参数必须是集合类型，并且必须返回一个布尔值，指示是否释放累积的消息。为简单起见，我们只检查了相同类别的消息数量——如果大于两个，我们就释放消息。
- en: Message store
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息存储
- en: 'Until an aggregated message fulfils the release criteria, the aggregator needs
    to store them temporarily. This is where message stores come into the picture.
    Message stores can be of two types: in-memory and persistence store. Default is
    in memory, and if this is to be used, then there is no need to declare this attribute
    at all. If a persistent message store needs to be used, then it must be declared
    and its reference should be given to the `message-store` attribute. A mysql message
    store can be declared and referenced as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在聚合消息满足释放条件之前，聚合器需要将它们临时存储。这就是消息存储出现的地方。消息存储可以是两种类型：内存和持久性存储。默认是内存，如果要使用内存，则根本不需要声明此属性。如果需要使用持久消息存储，则必须声明它，并且其引用应该赋给`message-store`属性。可以声明mysql消息存储，并引用如下：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Data source is Spring framework's standard JDBC data source. The greatest advantage
    of using persistence store is recoverability—if the system recovers from a crash,
    all in-memory aggregated messages will not be lost. Another advantage is capacity—memory
    is limited, which can accommodate a limited number of messages for aggregation,
    but the database can have a much bigger space.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源是Spring框架的标准JDBC数据源。使用持久性存储的最大优势是可恢复性——如果系统从崩溃中恢复，所有内存中的聚合消息都不会丢失。另一个优势是容量——内存有限，可以容纳有限数量的聚合消息，但数据库可以有更大的空间。
- en: Resequencers
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新排序器
- en: 'A **resequencer** can be used to enforce an ordered delivery to the next subsystem.
    It will hold on to a message till all messages numbered before it have been delivered.
    For example, if messages have been numbered 1 to 10 and if the message numbered
    8 arrives sooner than the messages numbered 1 to 7, it will hold it in temporary
    storage and will be delivered only when the delivery of messages numbered 1 to
    7 is complete. The `SEQUENCE_NUMBER` header of the message is used by resequencer
    to track the sequences. It can be considered as a special case of aggregator,
    which holds on to the message based on a header value but does not do any processing
    on the messages:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**重新排序器**可用于强制按顺序传递到下一个子系统。它将保留消息，直到其之前编号的所有消息都已传递。例如，如果消息已编号为1到10，并且编号为8的消息比编号为1到7的消息更早到达，它将将其保存在临时存储中，并且只有在消息编号为1到7的传递完成后才会传递。消息的`SEQUENCE_NUMBER`头由重新排序器用于跟踪序列。它可以被视为聚合器的特殊情况，根据头值保留消息，但不对消息进行任何处理：'
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As we mentioned, resequencers can be considered as a special case of aggregators—almost
    all tags mean the same, except the namespace declaration.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，重新排序器可以被视为聚合器的特殊情况 - 几乎所有标签的含义都相同，除了命名空间声明。
- en: Chaining handlers
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理程序链
- en: 'We have discussed quite a lot of handlers provided by Spring Integration as
    filters, transformers, service activators, and so on, which can be independently
    applied on to the message—Spring Integration further provides a mechanism to chain
    these handlers. A special implementation of `MessageHandler` is `MessageHandlerChain`,
    can be configured as a single message endpoint. It is a chain of other handlers,
    and a message received simply delegates it to the configured handlers in a predefined
    sequence. Let''s take an example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了Spring Integration提供的许多处理程序，如过滤器、转换器、服务激活器等，它们可以独立应用于消息 - Spring Integration进一步提供了一种链式处理这些处理程序的机制。`MessageHandler`的一个特殊实现是`MessageHandlerChain`，可以配置为单个消息端点。它是其他处理程序的链，并且接收到的消息只是简单地按预定义的顺序委托给配置的处理程序。让我们举个例子：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Let's quickly create a chain and validate it. Start with a filter, which just
    passes all the messages, add a header in the next step, and finally print the
    headers in the service activator. If we can confirm the existence of added headers
    in the second step, then we are fine—chain executed!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速创建一个链并验证它。从一个过滤器开始，它只传递所有消息，然后在下一步中添加一个头，并最后在服务激活器中打印头。如果我们可以确认第二步中添加的头存在，那么我们就没问题了
    - 链执行成功！
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Let's take a deep breath… This has been a long chapter and we covered many out-of-the-box
    components provided by the Spring Integration framework such as routers, filters,
    and splitters. These all helped with message flow across different endpoints.
    In the next chapter, we will continue exploring Spring Integration framework's
    out-of-the-box capabilities, but the focus will be more on adapters to interact
    with external systems such as connecting to a database, fetching tweets from Twitter,
    writing to a JMS queue, interacting with an FTP server, and many more—a lot of
    interesting stuff, stay tuned!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深呼吸一下...这是一个很长的章节，我们涵盖了Spring Integration框架提供的许多开箱即用的组件，如路由器、过滤器和分隔器。所有这些都有助于消息在不同端点之间的流动。在下一章中，我们将继续探索Spring
    Integration框架的开箱即用功能，但重点将更多地放在与外部系统交互的适配器上，比如连接到数据库，从Twitter获取推文，写入JMS队列，与FTP服务器交互等等
    - 很多有趣的东西，敬请关注！
