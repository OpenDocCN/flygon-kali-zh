["```cs\nusing System;\n\nnamespace MeTracker.Models\n{\n    public class Location\n    {\n        public Location() {}\n\n        public Location(double latitude, double longitude)\n        {\n            Latitude = latitude;\n            Longitude = longitude;\n        }\n\n        public int Id { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n    }\n}\n```", "```cs\nusing MeTracker.Models;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace MeTracker.Repositories\n{\n    public interface ILocationRepository\n    {\n        Task Save(Location location);\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing MeTracker.Models;\n\nnamespace MeTracker.Repositories\n{\n    public class LocationRepository : ILocationRepository \n    {\n        public async Task Save(Location location)\n        {\n        }\n    }\n}\n```", "```cs\nprivate SQLiteAsyncConnection connection;\n\nprivate async Task CreateConnection()\n{\n    if (connection != null)\n    {\n        return;\n    }\n\n   var databasePath = \n   Path.Combine(Environment.GetFolderPath\n   (Environment.SpecialFolder .MyDocuments), \"Locations.db\");\n\n connection = new SQLiteAsyncConnection(databasePath);\n await connection.CreateTableAsync<Location>();\n} \n```", "```cs\npublic async Task Save(Location location)\n{\n    await CreateConnection();\n    await connection.InsertAsync(location);\n}\n```", "```cs\nprotected override void OnCreate(Bundle savedInstanceState)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n\n    base.OnCreate(savedInstanceState);\n\n    global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n    Xamarin.Essentials.Platform.Init(this, savedInstanceState);\n\n    LoadApplication(new App());\n}\n```", "```cs\n public interface ILocationTrackingService\n {\n      void StartTracking();\n } \n```", "```cs\npublic class LocationTrackingService : ILocationTrackingService\n{\n     public void StartTracking()\n     {\n     }\n}\n```", "```cs\n <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n              xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n              xmlns:map=\"clr- \n              namespace:Xamarin.Forms.Maps;assembly\n              =Xamarin.Forms.Maps\"\n              x:Class=\"MeTracker.Views.MainView\"> \n```", "```cs\n <ContentPage  \n\n              x:Class=\"MeTracker.Views.MainView\"> \n <map:Map x:Name=\"Map\" /> \n</ContentPage>\n```", "```cs\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n     global::Xamarin.Forms.Forms.Init();\n     global::Xamarin.FormsMaps.Init();\n\n     LoadApplication(new App());\n\n     return base.FinishedLaunching(app, options);\n} \n```", "```cs\nprotected override void OnCreate(Bundle savedInstanceState)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n\n     base.OnCreate(savedInstanceState);\n     global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n     global::Xamarin.FormsMaps.Init(this, savedInstanceState);\n\n     Xamarin.Essentials.Platform.Init(this, savedInstanceState); \n\n     LoadApplication(new App());\n} \n```", "```cs\npublic override void OnRequestPermissionsResult(int requestCode,                     \n                 string[] permissions, \n                 [GeneratedEnum] Android.Content.PM.Permission[]          \n                 grantResults)\n{     Xamarin.Essentials.Platform.OnRequestPermissionsResult(requestCode,   \n                 permissions, grantResults);\n                 base.OnRequestPermissionsResult(requestCode,   \n                 permissions, grantResults);\n}\n```", "```cs\n <application android:label=\"MeTracker.Android\">\n      <meta-data android:name=\"com.google.android.maps.v2.API_KEY\" \n      android:value=\"{YourKeyHere}\" />\n</application> \n```", "```cs\npublic MainView ()\n{\n    InitializeComponent ();\n\nMainThread.BeginInvokeOnMainThread(async() =>\n {\n var location = await Geolocation.GetLocationAsync();\n Map.MoveToRegion(MapSpan.FromCenterAndRadius(\n new Position(location.Latitude, location.Longitude), \n Distance.FromKilometers(5)));\n });\n}\n```", "```cs\npublic abstract class ViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public void RaisePropertyChanged(params string[] propertyNames)\n    {\n        foreach(var propertyName in propertyNames)\n        {\n            PropertyChanged?.Invoke(this, new  \n            PropertyChangedEventArgs(propertyName));\n        }\n    }\n} \n```", "```cs\npublic class MainViewModel : ViewModel\n{\n         private readonly ILocationRepository locationRepository;\n         private readonly ILocationTrackingService \n         locationTrackingService;\n\n         public MainViewModel(ILocationTrackingService \n         locationTrackingService,\n         ILocationRepository locationRepository)\n         {\n             this.locationTrackingService = \n             locationTrackingTrackingService;\n             this.locationRepository = locationRepository;\n         } \n}\n```", "```cs\npublic MainViewModel(ILocationTrackingService \n                     locationTrackingService, \n                     ILocationRepository locationRepository)\n{\n    this.locationTrackingService = locationTrackingTrackingService;\n    this.locationRepository = locationRepository;\n\n MainThread.BeginInvokeOnMainThread(async() =>\n {\n locationTrackingService.StartTracking();\n });\n}\n\n```", "```cs\npublic MainView(MainViewModel viewModel)\n{\n    InitializeComponent();\n\n BindingContext = viewModel; \n\n    MainThread.BeginInvokeOnMainThread(async () =>\n    {\n        var location = await \n        Geolocation.GetLastKnownLocationAsync();\n        Map.MoveToRegion(MapSpan.FromCenterAndRadius(\n        new Position(location.Latitude, location.Longitude), \n        Distance.FromKilometers(5)));\n    });\n}\n```", "```cs\nusing Autofac;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace MeTracker\n{\n    public class Resolver\n    {\n        private static IContainer container;\n\n        public static void Initialize(IContainer container)\n        {\n            Resolver.container = container;\n        }\n    }\n}\n```", "```cs\npublic static T Resolve<T>()\n{\n     return container.Resolve<T>();\n} \n```", "```cs\nusing Autofac;\nusing MeTracker.Repositories;\nusing MeTracker.ViewModels;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing Xamarin.Forms;\n\nnamespace MeTracker\n{\n    public class Bootstrapper\n    {\n        protected ContainerBuilder ContainerBuilder { get; private \n        set; }\n\n        public Bootstrapper()\n        {\n            Initialize();\n            FinishInitialization();\n        }\n\n        protected virtual void Initialize()\n        {\n            ContainerBuilder = new ContainerBuilder();\n\n            var currentAssembly = Assembly.GetExecutingAssembly();\n\n            foreach (var type in currentAssembly.DefinedTypes.\n                     Where(e => e.IsSubclassOf(typeof(Page))))\n            {\n                ContainerBuilder.RegisterType(type.AsType());\n            }\n\n            foreach (var type in currentAssembly.DefinedTypes.\n                     Where(e => e.IsSubclassOf(typeof(ViewModel))))\n            {\n                ContainerBuilder.RegisterType(type.AsType());\n            }\n\n            ContainerBuilder.RegisterType<LocationRepository>\n            ().As<ILocationRepository>();\n        }\n\n        private void FinishInitialization()\n        {\n            var container = ContainerBuilder.Build();\n            Resolver.Initialize(container);\n        }\n    }\n}\n```", "```cs\nusing Autofac;\nusing MeTracker.iOS.Services;\nusing MeTracker.Services;\n\nnamespace MeTracker.iOS\n{\n    public class Bootstrapper : MeTracker.Bootstrapper\n    {\n        public static void Execute()\n        {\n            var instance = new Bootstrapper();\n        }\n\n        protected override void Initialize()\n        {\n            base.Initialize();\n\n            ContainerBuilder.RegisterType<LocationTrackingService>()\n            .As<ILocationTrackingService>().SingleInstance();\n        }\n    }\n}\n```", "```cs\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n      global::Xamarin.Forms.Forms.Init();\n      global::Xamarin.FormsMaps.Init();\n      Bootstrapper.Init();\n\n      LoadApplication(new App());\n\n      return base.FinishedLaunching(app, options);\n} \n```", "```cs\nusing Autofac;\nusing MeTracker.Droid.Services;\nusing MeTracker.Services;\n\nnamespace MeTracker.Droid\n{ \n    public class Bootstrapper : MeTracker.Bootstrapper\n    {\n         public static void Init()\n         {\n             var instance = new Bootstrapper();\n         }\n\n         protected override void Initialize()\n         {\n             base.Initialize();\n\n             ContainerBuilder.RegisterType<LocationTrackingService()\n             .As<ILocationTrackingService>().SingleInstance();\n         }\n    }\n} \n```", "```cs\nprotected override void OnCreate(Bundle savedInstanceState)\n{\n     TabLayoutResource = Resource.Layout.Tabbar;\n     ToolbarResource = Resource.Layout.Toolbar;\n\n     base.OnCreate(savedInstanceState);\n     Xamarin.Essentials.Platform.Init(this, savedInstanceState);\n\n     global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n     global::Xamarin.FormsMaps.Init(this, savedInstanceState);\n\n Bootstrapper.Init();\n\n     LoadApplication(new App());\n} \n```", "```cs\npublic App()\n{\n     InitializeComponent();\n     MainPage = Resolver.Resolve<MainView>();\n} \n```", "```cs\n<key>UIBackgroundModes</key>\n<array>\n     <string>location</string>\n</array>\n```", "```cs\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>We will use your location to track you</string>\n<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n<string>We will use your location to track you</string>\n```", "```cs\npublic void StartTracking()\n{\n    locationManager = new CLLocationManager\n {\n PausesLocationUpdatesAutomatically = false,\n AllowsBackgroundLocationUpdates = true }; // Add code here\n}\n\n```", "```cs\npublic void StartTracking()\n{\n    locationManager = new CLLocationManager\n    {\n        PausesLocationUpdatesAutomatically = false,\n        AllowsBackgroundLocationUpdates = true\n    };\n\n    // Add code here\n locationManager.AuthorizationChanged += (s, args) =>\n { \n if (args.Status == CLAuthorizationStatus.Authorized)\n {\n            // Next section of code goes here\n }\n };\n\n    locationManager.RequestAlwaysAuthorization();\n}\n```", "```cs\n   locationManager.AuthorizationChanged += (s, args) =>\n    {\n        if (args.Status == CLAuthorizationStatus.Authorized)\n        {\n            // Next section of code goes here\n locationManager.DesiredAccuracy = \n            CLLocation.AccurracyBestForNavigation;\n            locationManager.LocationsUpdated += \n            async (object sender, CLLocationsUpdatedEventArgs e) =>\n                {\n                    // Final block of code goes here\n                };\n\n            locationManager.StartUpdatingLocation();\n        }\n    };\n\n```", "```cs\nlocationManager.LocationsUpdated += \n    async (object sender, CLLocationsUpdatedEventArgs e) =>\n    {\n var lastLocation = e.Locations.Last();\n var newLocation = new \n        Models.Location(lastLocation.Coordinate.Latitude,\n\n        lastLocation.Coordinate.Longitude);\n\n await locationRepository.Save(newLocation);\n    };\n\n```", "```cs\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /> \n```", "```cs\npublic class LocationJobService : JobService\n{ \n     public override bool OnStopJob(JobParameters @params)\n     {\n         return true;\n     }\n\n     public override bool OnStartJob(JobParameters @params)\n     {\n         return true;\n     } \n}\n```", "```cs\n [Service(Name = \"MeTracker.Droid.Services.LocationJobService\",\n Permission = \"android.permission.BIND_JOB_SERVICE\")]\n          public class LocationJobService : JobService\n\n```", "```cs\nusing Android.App;\nusing Android.App.Job;\nusing Android.Content;\nusing MeTracker.Services;\n\nnamespace MeTracker.Droid.Services\n{\n    public class LocationTrackingService : ILocationTrackingService\n    { \n        var javaClass = \n        Java.Lang.Class.FromType(typeof(LocationJobService));\n        var componentName = new ComponentName(Application.Context, \n        javaClass);\n        var jobBuilder = new JobInfo.Builder(1, componentName);\n\n        jobBuilder.SetOverrideDeadline(1000);\n        jobBuilder.SetPersisted(true);\n        jobBuilder.SetRequiresDeviceIdle(false);\n        jobBuilder.SetRequiresBatteryNotLow(true);\n\n        var jobInfo = jobBuilder.Build();\n    }\n}\n```", "```cs\nvar jobScheduler =    \n  (JobScheduler)Application.Context.GetSystemService\n  (Context.JobSchedulerService);\n  jobScheduler.Schedule(jobInfo); \n```", "```cs\nprivate ILocationRepository locationRepository;\npublic LocationJobService()\n{\n     locationRepository = Resolver.Resolve<ILocationRepository>();\n}\n```", "```cs\npublic void OnLocationChanged(Android.Locations.Location location)\n{\n    var newLocation = new Models.Location(location.Latitude, \n    location.Longitude);\n locationRepository.Save(newLocation);\n} \n```", "```cs\npublic override bool OnStartJob(JobParameters @params)\n{      \n     locationManager =  \n     (LocationManager)ApplicationContext.GetSystemService\n     (Context.LocationService);\n locationManager.RequestLocationUpdates\n     (LocationManager.GpsProvider, 1000L, 0.1f, this);\n\n     return true;\n}\n```", "```cs\n Task<List<Location>> GetAll() ;\n```", "```cs\npublic async Task<List<Location>> GetAll()\n{\n      await CreateConnection();\n\n      var locations = await connection.Table<Location>\n      ().ToListAsync();\n\n      return locations;\n}\n```", "```cs\nnamespace MeTracker.Models\n{ \n    public class Point\n    {\n         public Location Location { get; set; }\n         public int Count { get; set; } = 1;\n         public Xamarin.Forms.Color Heat { get; set; }\n    }\n} \n```", "```cs\nprivate List<Models.Point> points;\npublic List<Models.Point> Points\n{\n      get => points;\n      set\n      {\n           points = value;\n           RaisePropertyChanged(nameof(Points));\n      }\n}\n```", "```cs\npublic MainViewModel(ILocationTrackingService \n                     locationTrackingService, \n                     ILocationRepository locationRepository)\n{\n    this.locationTrackingService = locationTrackingService;\n    this.locationRepository = locationRepository;\n\n    MainThread.BeginInvokeOnMainThread(async() => \n    {\n         locationTrackingService.StartTracking();\n await LoadData();\n    });\n}\n```", "```cs\nprivate async Task LoadData()\n{ \n    var locations = await locationRepository.GetAll();\n var pointList = new List<Models.Point>();\n\n foreach (var location in locations)\n {\n //If no points exist, create a new one an continue to the next  \n        location in the list\n if (!pointList.Any())\n {\n pointList.Add(new Models.Point() { Location = location });\n continue;\n }\n\n var pointFound = false;\n\n //try to find a point for the current location\n foreach (var point in pointList)\n {\n var distance =   \n            Xamarin.Essentials.Location.CalculateDistance(\n new Xamarin.Essentials.Location(\n            point.Location.Latitude, point.Location.Longitude),\n new Xamarin.Essentials.Location(location.Latitude,                             \n            location.Longitude), DistanceUnits.Kilometers);\n\n if (distance < 0.2)\n {\n pointFound = true;\n point.Count++;\n break;\n }\n }\n\n //if no point is found, add a new Point to the list of points\n if (!pointFound)\n {\n pointList.Add(new Models.Point() { Location = location });\n }\n\n        // Next section of code goes here\n    }\n} \n```", "```cs\nprivate async Task LoadData()\n{ \n    // The rest of the method has been commented out for brevity\n\n    // Next section of code goes here\n if (pointList == null || !pointList.Any())\n {\n return;\n } \n var pointMax = pointList.Select(x => x.Count).Max();\n var pointMin = pointList.Select(x => x.Count).Min();\n var diff = (float)(pointMax - pointMin);\n\n    // Last section of code goes here\n}\n```", "```cs\nprivate async Task LoadData()\n{ \n    // The rest of the method has been commented out for brevity\n\n    // Next section of code goes here\n  if (pointList == null || !pointList.Any())\n    {\n        return;\n    }\n\n    var pointMax = pointList.Select(x => x.Count).Max();\n    var pointMin = pointList.Select(x => x.Count).Min();\n    var diff = (float)(pointMax - pointMin);\n\n // Last section of code goes here\n foreach (var point in pointList)\n {\n var heat = (2f / 3f) - ((float)point.Count / diff);\n point.Heat = Color.FromHsla(heat, 1, 0.5);\n }\n\n    Points = pointList;\n}\n```", "```cs\nusing System.Collections.Generic;\nusing Xamarin.Forms;\nusing Xamarin.Forms.Maps;\n\nnamespace MeTracker.Controls\n{\n    public class CustomMap : Map\n    {\n    }\n} \n```", "```cs\npublic static BindableProperty PointsProperty =   \n  BindableProperty.Create(nameof(Points), \n  typeof(List<Models.Point>), typeof(CustomMap), new   \n  List<Models.Point>());\n\npublic List<Models.Point> Points\n{\n      get => GetValue(PointsProperty) as List<Models.Point>;\n      set => SetValue(PointsProperty, value);\n} \n```", "```cs\n<ContentPage  \n\n              x:Class=\"MeTracker.Views.MainView\">\n         <ContentPage.Content>\n         **<map:CustomMap x:Name=\"Map\" Points=\"{Binding Points}\" />**\n         </ContentPage.Content>\n</ContentPage> \n```", "```cs\n using System.ComponentModel;\n using System.Linq;\n using MapKit;\n using MeTracker.Controls;\n using MeTracker.iOS.Renderers;\n using Xamarin.Forms;\n using Xamarin.Forms.Maps.iOS;\n using Xamarin.Forms.Platform.iOS; \n\n  [assembly:ExportRenderer(typeof(CustomMap),\n  typeof(CustomMapRenderer))]\n  namespace MeTracker.iOS.Renderers\n{\n     public class CustomMapRenderer : MapRenderer\n     { \n     }\n}\n```", "```cs\nprotected override void OnElementPropertyChanged(object sender, \n     PropertyChangedEventArgs e)\n{\n     base.OnElementPropertyChanged(sender, e);\n\n     if (e.PropertyName == CustomMap.PointsProperty.PropertyName)\n     { \n          //Add code here\n     }\n}\n```", "```cs\nprotected override void OnElementPropertyChanged(object sender,    \n    PropertyChangedEventArgs e)\n{\n    base.OnElementPropertyChanged(sender, e);\n\n    if (e.PropertyName == CustomMap.PointsProperty.PropertyName)\n    { \n        var mapView = (MKMapView)Control; \n var customMap = (CustomMap)Element;\n\n mapView.OverlayRenderer = (map, overlay) =>\n {\n var circle = overlay as MKCircle;\n\n if (circle != null)\n { \n var point = customMap.Points.Single\n (x => x.Location.Latitude == \n                circle.Coordinate.Latitude &&\n x.Location.Longitude == \n                circle.Coordinate.Longitude);\n\n var circleRenderer = new MKCircleRenderer(circle)\n {\n FillColor = point.Heat.ToUIColor(),\n Alpha = 1.0f\n };\n\n return circleRenderer;\n }\n\n return null;\n };\n\n        // Next section of code goes here\n    }\n}\n```", "```cs\n// Next section of code goes hereforeach (var point in customMap.Points)\n{\n        var overlay = MKCircle.Circle(\n        new CoreLocation.CLLocationCoordinate2D\n        (point.Location.Latitude, point.Location.Longitude), 100);\n\n    mapView.AddOverlay(overlay);\n}\n```", "```cs\nusing System.ComponentModel;\nusing Android.Content;\nusing Android.Gms.Maps;\nusing Android.Gms.Maps.Model;\nusing MeTracker.Controls;\nusing MeTracker.Droid.Renderers;\nusing Xamarin.Forms;\nusing Xamarin.Forms.Maps;\nusing Xamarin.Forms.Maps.Android;\nusing Xamarin.Forms.Platform.Android; \n\n[assembly: ExportRenderer(typeof(CustomMap), typeof(CustomMapRenderer))]\nnamespace MeTracker.Droid.Renderers\n{\n     public class CustomMapRenderer : MapRenderer\n     {\n         public CustomMapRenderer(Context context) : base(context)\n         {\n         } \n     }\n}\n```", "```cs\nprotected override void OnElementChanged\n                        (ElementChangedEventArgs<Map> e)\n{\n     base.OnElementChanged(e);\n\n     if (e.NewElement != null)\n     {\n          Control.GetMapAsync(this);\n     }\n} \n```", "```cs\nprotected override void OnMapReady(GoogleMap map)\n{\n     this.map = map;\n\n     base.OnMapReady(map);\n}\n```", "```cs\nprotected override void OnElementPropertyChanged(object sender,    \n     PropertyChangedEventArgs e)\n{\n     base.OnElementPropertyChanged(sender, e);\n\n     if(e.PropertyName == CustomMap.PointsProperty.PropertyName)\n     { \n\n     }\n}\n```", "```cs\nprotected override void OnElementPropertyChanged(object sender, \n     PropertyChangedEventArgs e)\n{\n     base.OnElementPropertyChanged(sender, e);\n\n     if(e.PropertyName == CustomMap.PointsProperty.PropertyName)\n     { \n    var element = (CustomMap)Element;\n\n        foreach (var point in element.Points)\n {\n var options = new CircleOptions();\n options.InvokeStrokeWidth(0);\n options.InvokeFillColor(point.Heat.ToAndroid());\n options.InvokeRadius(200);\n options.InvokeCenter(new \n            LatLng(point.Location.Latitude, \n            point.Location.Longitude));\n            map.AddCircle(options);\n }\n    }\n}\n```", "```cs\nprotected override void OnResume()\n{\n     MainPage = Resolver.Resolve<MainView>();\n} \n```"]