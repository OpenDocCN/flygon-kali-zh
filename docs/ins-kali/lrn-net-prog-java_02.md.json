["```java\n    try {\n        Enumeration<NetworkInterface> interfaceEnum = \n            NetworkInterface.getNetworkInterfaces();\n        System.out.printf(\"Name      Display name\\n\");\n        for(NetworkInterface element : \n                Collections.list(interfaceEnum)) {\n            System.out.printf(\"%-8s  %-32s\\n\",\n                    element.getName(), element.getDisplayName());\n    } catch (SocketException ex) {\n        // Handle exceptions\n    }\n```", "```java\n    Enumeration<NetworkInterface> interfaceEnumeration = \n        element.getSubInterfaces();\n```", "```java\n    Enumeration<NetworkInterface> interfaceEnum = \n        NetworkInterface.getNetworkInterfaces();\n    System.out.printf(\"Name      Display name\\n\");\n    for (NetworkInterface element : \n            Collections.list(interfaceEnum)) {\n        System.out.printf(\"%-8s  %-32s\\n\",\n                element.getName(), element.getDisplayName());\n        Enumeration<InetAddress> addresses = \n            element.getInetAddresses();\n        for (InetAddress inetAddress : \n                Collections.list(addresses)) {\n            System.out.printf(\"    InetAddress: %s\\n\", \n                inetAddress);\n        }\n```", "```java\n        addresses = element.getInetAddresses();\n        Collections\n                .list(addresses)\n                .stream()\n                .forEach((inetAddress) -> {\n                    System.out.printf(\"    InetAddress: %s\\n\", \n                        inetAddress);\n                });\n```", "```java\n    public String getMACIdentifier(NetworkInterface network) {\n        StringBuilder identifier = new StringBuilder();\n        try {\n            byte[] macBuffer = network.getHardwareAddress();\n            if (macBuffer != null) {\n                for (int i = 0; i < macBuffer.length; i++) {\n                       identifier.append(\n                       String.format(\"%02X%s\",macBuffer[i], \n                       (i < macBuffer.length - 1) ? \"-\" : \"\"));\n                }\n            } else {\n                return \"---\";\n            }\n        } catch (SocketException ex) {\n            ex.printStackTrace();\n        }\n        return identifier.toString();\n    }\n```", "```java\n    InetAddress address = InetAddress.getLocalHost();\n    System.out.println(\"IP address: \" + address.getHostAddress());\n    NetworkInterface network = \n        NetworkInterface.getByInetAddress(address);\n    System.out.println(\"MAC address: \" + \n        getMACIdentifier(network));\n```", "```java\n    Enumeration<NetworkInterface> interfaceEnum = \n        NetworkInterface.getNetworkInterfaces();\n    System.out.println(\"Name    MAC Address\");\n    for (NetworkInterface element : \n            Collections.list(interfaceEnum)) {\n        System.out.printf(\"%-6s  %s\\n\",\n            element.getName(), getMACIdentifier(element));\n```", "```java\n    interfaceEnum = NetworkInterface.getNetworkInterfaces();\n    Collections\n            .list(interfaceEnum)\n            .stream()\n            .forEach((inetAddress) -> {\n                System.out.printf(\"%-6s  %s\\n\",\n                    inetAddress.getName(), \n                    getMACIdentifier(inetAddress));\n            });\n```", "```java\n<?xml version='1.0'?>\n<SOAP:Envelope\n  xmlns:SOAP='urn:schemas-xmlsoap-org:soap.v1'>\n <SOAP:Body>\n  ...\n    xmlns:i='urn:gargantuan-com:IShop'>\n   ...\n </SOAP:Body>\n</SOAP:Envelope>\n```", "```java\n    URI uri = new \n        URI(\"https://www.packtpub.com/books/content/support\");\n```", "```java\n    uri = new URI(\"https://en.wikipedia.org/wiki/\"\n        + \"URL_normalization#Normalization_process\");\n```", "```java\n    uri = new \n        URI(\"https\",\"en.wikipedia.org\",\"/wiki/URL_normalization\",\n        \"Normalization_process\");\n```", "```java\n    private static void displayURI(URI uri) {\n        System.out.println(\"getAuthority: \" + uri.getAuthority());\n        System.out.println(\"getScheme: \" + uri.getScheme());\n        System.out.println(\"getSchemeSpecificPart: \" \n            + uri.getSchemeSpecificPart());\n        System.out.println(\"getHost: \" + uri.getHost());\n        System.out.println(\"getPath: \" + uri.getPath());\n        System.out.println(\"getQuery: \" + uri.getQuery());\n        System.out.println(\"getFragment: \" + uri.getFragment());\n        System.out.println(\"getUserInfo: \" + uri.getUserInfo());\n        System.out.println(\"normalize: \" + uri.normalize());\n    }\n```", "```java\n    try {\n        URI uri = new \n            URI(\"https://www.packtpub.com/books/content/support\");\n        displayURI(uri);\n    } catch (URISyntaxException ex) {\n        // Handle exceptions\n    }\n```", "```java\n    URL url = new URL(\"http://www.packtpub.com\");\n```", "```java\n    url = new URL(\"www.packtpub.com\"); \n```", "```java\n    url = new URL(\"http://pluto.jhuapl.edu/\");\n    url = new URL(\"http\", \"pluto.jhuapl.edu\", 80, \n        \"News-Center/index.php\");\n```", "```java\n    private static void displayURL(URL url) {\n        System.out.println(\"URL: \" + url);\n        System.out.printf(\"  Protocol: %-32s  Host: %-32s\\n\",\n            url.getProtocol(),url.getHost());\n        System.out.printf(\"      Port: %-32d  Path: %-32s\\n\", \n            url.getPort(),url.getPath());\n        System.out.printf(\" Reference: %-32s  File: %-32s\\n\",\n            url.getRef(),url.getFile());\n        System.out.printf(\" Authority: %-32s Query: %-32s\\n\", \n            url.getAuthority(),url.getQuery());\n        System.out.println(\" User Info: \" + url.getUserInfo());\n    }\n```", "```java\nURL: http://www.packpub.com\n  Protocol: http                              Host: www.packpub.com                 \n      Port: -1                                Path:                                 \n Reference: null                              File:                                 \n Authority: www.packpub.com                  Query: null                            \n User Info: null\n\nURL: http://pluto.jhuapl.edu/\n  Protocol: http                              Host: pluto.jhuapl.edu                \n      Port: -1                                Path: /                               \n Reference: null                              File: /                               \n Authority: pluto.jhuapl.edu                 Query: null                            \n User Info: null\n\nURL: http://pluto.jhuapl.edu:80News-Center/index.php\n  Protocol: http                              Host: pluto.jhuapl.edu                \n      Port: 80                                Path: News-Center/index.php           \n Reference: null                              File: News-Center/index.php           \n Authority: pluto.jhuapl.edu:80              Query: null                            \n User Info: null\n\nURL: https://en.wikipedia.org/wiki/Uniform_resource_locator#Syntax\n  Protocol: https                             Host: en.wikipedia.org                \n      Port: -1                                Path: /wiki/Uniform_resource_locator  \n Reference: Syntax                            File: /wiki/Uniform_resource_locator  \n Authority: en.wikipedia.org                 Query: null                            \n User Info: null\n\nURL: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=url+syntax\n  Protocol: https                             Host: www.google.com                  \n      Port: -1                                Path: /webhp                          \n Reference: q=url+syntax                      File: /webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8\n Authority: www.google.com                   Query: sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8\n User Info: null\n\nURL: https://www.packtpub.com/books/content/support\n  Protocol: https                             Host: www.packtpub.com                \n      Port: -1                                Path: /books/content/support          \n Reference: null                              File: /books/content/support          \n Authority: www.packtpub.com                 Query: null                            \n User Info: null\n\n```", "```java\n    url = new URL(\"http://www.packtpub.com\");\n    System.out.println(\"getContent: \" + url.getContent());\n```", "```java\n    InetAddress names[] = \n        InetAddress.getAllByName(\"www.google.com\");\n    for(InetAddress element : names) {\n        System.out.println(element);\n    }\n```", "```java\n    private static void displayInetAddressInformation(\n            InetAddress address) {\n        System.out.println(address);\n        System.out.println(\"CanonicalHostName: \" +\n            address.getCanonicalHostName());\n        System.out.println(\"HostName: \" + address.getHostName());\n        System.out.println(\"HostAddress: \" + \n            address.getHostAddress());\n    }\n```", "```java\n    InetAddress address = \n        InetAddress.getByName(\"www.packtpub.com\");\n    displayInetAddressInformation(address);\n```", "```java\n    String URLAddress = \"www. packtpub.com\";\n    InetAddress[] addresses = \n        InetAddress.getAllByName(URLAddress);\n    for (InetAddress inetAddress : addresses) {\n        try {\n            if (inetAddress.isReachable(10000)) {\n                System.out.println(inetAddress + \" is reachable\");\n            } else {\n                System.out.println(inetAddress + \n                    \" is not reachable\");\n            }\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n    }\n```", "```java\n    Inet4Address address;\n    address = (Inet4Address) \n       InetAddress.getByName(\"www.google.com\");\n    address = (Inet4Address) \n        Inet4Address.getByName(\"www.google.com\");\n```", "```java\n    address = (Inet4Address) Inet4Address.getByName(\"0.0.0.0\");\n    System.out.println(address.isAnyLocalAddress());\n```", "```java\n    address = (Inet4Address) Inet4Address.getByName(\"127.0.0.1\");\n    System.out.println(address.isLoopbackAddress());\n```", "```java\n    public static InetAddress getByName(String host)\n        throws UnknownHostException {\n        return InetAddress.getAllByName(host)[0];\n    }\n```", "```java\n    byte buffer[] = address.getAddress();\n    if(buffer.length <= 4) {\n        System.out.println(\"IPv4 Address\");\n    } else {\n        System.out.println(\"IPv6 Address\");\n    }\n    if(address instanceof Inet4Address) {\n        System.out.println(\"IPv4 Address\");\n    } else {\n        System.out.println(\"IPv6 Address\");\n    }\n```", "```java\n    address = InetAddress.getByName(\"74.125.21.105\");\n    address = InetAddress.getByName(\"::ffff:74.125.21.105\");\n    address = InetAddress.getByName(\"::ffff:4a7d:1569\");\n```", "```java\n    try {\n        InetAddress names[] = \n            InetAddress.getAllByName(\"www.google.com\");\n        for (InetAddress address : names) {\n            if ((address instanceof Inet6Address) && \n                       ((Inet6Address) address)\n                           .isIPv4CompatibleAddress()) {\n                System.out.println(address\n                        + \" is IPv4 Compatible Address\");\n            } else {\n                System.out.println(address\n                        + \" is not a IPv4 Compatible Address\");\n            }\n        }\n    } catch (UnknownHostException ex) {\n        // Handle exceptions\n    }\n```", "```java\n    names = InetAddress.getAllByName(\"www.google.com\");\n    Arrays.stream(names)\n            .map(address -> {\n                if ((address instanceof Inet6Address) && \n                        ((Inet6Address) address)\n                            .isIPv4CompatibleAddress()) {\n                    return address + \n                        \" is IPv4 Compatible Address\";\n                } else {\n                    return address + \n                        \" is not IPv4 Compatible Address\";\n                }\n            })\n            .forEach(result -> System.out.println(result));\n```", "```java\n-Djava.net.preferIPv4Stack=false\n```", "```java\n-Djava.net.preferIPv6Addresses=false\n```"]