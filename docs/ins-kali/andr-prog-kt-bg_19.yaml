- en: Chapter 19. Animations and Interpolations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章。动画和插值
- en: Here, we will see how we can use the `Animation` class to make our UI a little
    less static and a bit more interesting. As we have come to expect, the Android
    API will allow us to do some quite advanced things with relatively straightforward
    code, and the `Animation` class is no different.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看到如何使用`Animation`类使我们的UI不那么静态，更有趣。正如我们所期望的那样，Android API将允许我们用相对简单的代码做一些相当高级的事情，`Animation`类也不例外。
- en: 'This chapter can be approximately divided into these parts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章大致可分为以下几个部分：
- en: An introduction to how animations in Android work and are implemented
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了Android中动画的工作原理和实现方式
- en: An introduction to a UI widget that we haven't explored yet, the `SeekBar` class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了一个我们尚未探索的UI小部件`SeekBar`类
- en: A working animation app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的动画应用程序
- en: First, let's explore how animations work in Android.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们探索一下Android中的动画是如何工作的。
- en: Animations in Android
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android中的动画
- en: The normal way to create an animation in Android is through XML. We can write
    XML animations, and then load and play them through our Kotlin code on a specified
    UI widget. So, for example, we can write an animation that fades in and out five
    times over three seconds, then play that animation on an `ImageView` or any other
    widget. We can think of these XML animations as a script, as they define the type,
    order, and timing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中创建动画的常规方式是通过XML。我们可以编写XML动画，然后通过Kotlin代码在指定的UI小部件上加载和播放它们。因此，例如，我们可以编写一个动画，在三秒内淡入淡出五次，然后在`ImageView`或任何其他小部件上播放该动画。我们可以将这些XML动画看作脚本，因为它们定义了类型、顺序和时间。
- en: Let's explore some of the different properties we can assign to our animations,
    how to use them in our Kotlin code, and finally, we can make a neat animations
    app to try it all out.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些可以分配给我们的动画的不同属性，如何在我们的Kotlin代码中使用它们，最后，我们可以制作一个漂亮的动画应用程序来尝试一切。
- en: Designing cool animations in XML
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在XML中设计酷炫的动画
- en: We have learned that XML can be used to describe animations as well as UI layouts,
    but let's find out exactly how. We can state values for properties of an animation
    that describe the starting and ending appearance of a widget. The XML can then
    be loaded by our Kotlin code by referencing the name of the XML file that contains
    the animation and turning it into a usable Kotlin object, again, not unlike a
    UI layout.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解到XML不仅可以用来描述UI布局，还可以用来描述动画，但让我们确切地了解一下。我们可以为动画的属性值指定起始和结束外观的小部件。然后，我们的Kotlin代码可以通过引用包含动画的XML文件的名称来加载XML，将其转换为可用的Kotlin对象，再次，与UI布局类似。
- en: Many animation properties come in pairs. Here is a quick look at some of the
    animation property pairs we can use to create an animation. Straight after we
    have looked at some XML, we will see how to use it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 许多动画属性成对出现。以下是一些我们可以使用的动画属性对的快速查看。在查看了一些XML后，我们将看到如何使用它。
- en: Fading in and out
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 淡入淡出
- en: 'Alpha is the measure of transparency. So, by stating the starting `fromAlpha`
    and ending `toAlpha` values, we can fade items in and out. A value of `0.0` is
    invisible, and `1.0` is an object''s normal appearance. Steadily moving between
    the two makes a fading-in effect:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha是透明度的度量。因此，通过说明起始`fromAlpha`和结束`toAlpha`值，我们可以淡入淡出物品。值`0.0`是不可见的，`1.0`是对象的正常外观。在两者之间稳定移动会产生淡入效果：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Move it, move it
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动它，移动它
- en: We can move an object within our UI by using a similar technique; `fromXDelta`
    and `toXDelta` can have their values set as a percentage of the size of the object
    being animated.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类似的技术在UI中移动对象；`fromXDelta`和`toXDelta`的值可以设置为被动画化对象大小的百分比。
- en: 'The following code would move an object from left to right a distance equal
    to the width of the object itself:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使对象从左到右移动，距离等于对象本身的宽度：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition, there are the `fromYDelta` and `toYDelta` properties for animating
    upward and downward movement.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有用于上下移动动画的`fromYDelta`和`toYDelta`属性。
- en: Scaling or stretching
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩放或拉伸
- en: 'The `fromXScale` and `toXScale` properties will increase or decrease the scale
    of an object. As an example, the following code will change the object running
    the animation from normal size to invisible:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`fromXScale`和`toXScale`属性将增加或减少对象的比例。例如，以下代码将使运行动画的对象从正常大小变为不可见：'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As another example, we could shrink the object to a tenth of its usual size
    using `android:fromYScale = "0.1"`, or make it 10 times as big using `android:fromYScale
    = "10.0"`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个例子，我们可以使用`android:fromYScale = "0.1"`将对象缩小到通常大小的十分之一，或者使用`android:fromYScale
    = "10.0"`将其放大十倍。
- en: Controlling the duration
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制持续时间
- en: Of course, none of these animations would be especially interesting if they
    just instantly arrived at their conclusion. To make our animations more interesting,
    we can therefore set their duration in milliseconds. A millisecond is one thousandth
    of a second. We can also make timing easier, especially in relation to other animations,
    by setting the `startOffset` property, which is also in milliseconds.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果这些动画只是立即结束，那将不会特别有趣。因此，为了使我们的动画更有趣，我们可以设置它们的持续时间（以毫秒为单位）。毫秒是一秒的千分之一。我们还可以通过设置`startOffset`属性（也是以毫秒为单位）来使时间更容易，特别是与其他动画相关。
- en: 'The next code would begin an animation one third of a second after we started
    it (in code), and it would take two thirds of a second to complete:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码将在我们启动动画的1/3秒后开始（在代码中），并且需要2/3秒才能完成：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Rotate animations
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转动画
- en: 'If you want to spin something around, just use the `fromDegrees` and `toDegrees`
    properties. This next code, probably predictably, will spin a widget around in
    a complete circle because, of course, there are 360 degrees in a circle:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使某物旋转，只需使用`fromDegrees`和`toDegrees`属性。下一个代码，可能可以预测，将使小部件在一个完整的圆圈中旋转，因为当然，一个圆圈有360度：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Repeating animations
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重复动画
- en: Repetition might be important in some animations, perhaps a wobble or shake
    effect, so we can add a `repeatCount` property. In addition, we can specify how
    the animation is repeated by setting the `repeatMode` property.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些动画中，重复可能很重要，也许是摇摆或抖动效果，因此我们可以添加一个`repeatCount`属性。此外，我们可以通过设置`repeatMode`属性来指定动画的重复方式。
- en: 'The following code would repeat an animation 10 times, each time reversing
    the direction of the animation. The `repeatMode` property is relative to the current
    state of the animation. What this means is that if you rotated a button from 0
    to 360 degrees, for example, the second part of the animation (the first repeat)
    would rotate the other way, from 360 back to 0\. The third part of the animation
    (the second repeat) would, again, reverse and rotate from 0 to 360:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将重复一个动画10次，每次都会反转动画的方向。`repeatMode`属性是相对于动画的当前状态。这意味着，如果你将一个按钮从0度旋转到360度，例如，动画的第二部分（第一次重复）将以相反的方式旋转，从360度回到0度。动画的第三部分（第二次重复）将再次反转，并从0度旋转到360度：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Combining an animation's properties with sets
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将动画的属性与集合结合
- en: 'To combine groups of these effects, we need a `set` of properties. This code
    shows how we can combine all the previous code snippets we have just seen into
    an actual XML animation that will compile:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要组合这些效果的组，我们需要一组属性。这段代码展示了我们如何将我们刚刚看到的所有先前的代码片段组合成一个实际的XML动画，它将被编译：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We still haven't seen any Kotlin with which to bring these animations to life.
    Let's fix that now.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们还没有看到任何Kotlin来使这些动画生动起来。让我们现在来解决这个问题。
- en: Instantiating animations and controlling them with Kotlin code
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化动画并使用Kotlin代码控制它们
- en: 'This next snippet of code shows how we would declare an object of the `Animation`
    type, initialize it with an animation contained in an XML file named `fade_in.xml`,
    and start the animation on an `ImageView` widget. We will soon do this in a project
    and also see where we can put the XML animations:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了我们如何声明一个`Animation`类型的对象，用一个名为`fade_in.xml`的XML文件中包含的动画来初始化它，并在一个`ImageView`小部件上启动动画。我们很快将在一个项目中这样做，并且还会看到我们可以放置XML动画的地方：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We already have quite a powerful arsenal of animations and control features
    for things such as timing. But the Android API gives us a little bit more than
    this as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了相当强大的动画和控制特性，比如时间控制。但是Android API还给了我们更多的东西。
- en: More animation features
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多动画特性
- en: We can listen for the status of animations much like we can listen for clicks
    on a button. We can also use **interpolators** to make our animations more life-like
    and pleasing. Let's look at listeners first.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以监听动画的状态，就像我们可以监听按钮的点击一样。我们还可以使用**插值器**使我们的动画更加生动和愉悦。让我们先看看监听器。
- en: Listeners
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监听器
- en: If we implement the `AnimationListener` interface, we can indeed listen to the
    status of animations by overriding the three functions that tell us when something
    has occurred. We could then act based on these events.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们实现`AnimationListener`接口，我们确实可以通过覆盖告诉我们发生了什么的三个函数来监听动画的状态。然后我们可以根据这些事件来采取行动。
- en: '`OnAnimationEnd` announces the end of an animation, `onAnimationRepeat` is
    called each time an animation begins a repeat, and – perhaps predictably – `onAnimationStart`
    is called when an animation has started animating. This might not be the same
    time as when `startAnimation` is called if a `startOffset` is set in the animations
    XML:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnAnimationEnd`宣布动画结束，`onAnimationRepeat`在每次动画开始重复时调用，而-也许可以预料到-`onAnimationStart`在动画开始动画时调用。如果在动画XML中设置了`startOffset`，这可能不是调用`startAnimation`时的同一时间：'
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will see how `AnimationListener` works in the Animations demo app, and we'll
    also put another widget, `SeekBar`, into action.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Animations演示应用程序中看到`AnimationListener`的工作原理，并且我们还将把另一个小部件`SeekBar`投入使用。
- en: Animation interpolators
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画插值器
- en: If you can think back to high school, you might remember exciting lessons about
    calculating acceleration. If we animated something at a constant speed, at first
    glance, things might seem OK. If we then compared the animation to another that
    uses gradual acceleration, then the latter would almost certainly be more pleasing
    to watch.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能回想起高中时的情景，你可能会记得关于计算加速度的激动人心的课程。如果我们以恒定的速度对某物进行动画处理，乍一看，事情可能看起来还不错。如果我们将动画与另一个使用渐进加速的动画进行比较，那么后者几乎肯定会更令人愉悦地观看。
- en: It is possible that if we were not told the only difference between the two
    animations was that one used acceleration and the other didn't, we wouldn't be
    able to say *why* we preferred it. Our brains are more receptive to things that
    conform to the norms of the world around us. Therefore, adding a bit of real-world
    physics, such as acceleration and deceleration, improves our animations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能，如果我们没有被告知两个动画之间唯一的区别是一个使用了加速度，另一个没有，我们可能无法说出*为什么*我们更喜欢它。我们的大脑更容易接受符合我们周围世界规范的事物。因此，添加一点真实世界的物理，比如加速和减速，可以改善我们的动画。
- en: The last thing we want to do, however, is start doing a bunch of mathematical
    calculations just to slide a button onto the screen or spin some text in a circle.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们最不想做的事情是开始做一堆数学计算，只是为了将一个按钮滑动到屏幕上或者让一些文本在圆圈中旋转。
- en: This is where **interpolators** come in. They are animation modifiers that we
    can set in a single line of code within our XML.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**插值器**的用武之地。它们是我们可以在我们的XML中用一行代码设置的动画修改器。
- en: 'Some examples of interpolators are `accelerate_interpolator` and `cycle_interpolator`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插值器的例子是`accelerate_interpolator`和`cycle_interpolator`：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will put some interpolators, along with some XML animations and the related
    Kotlin code, into action next.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将投入使用一些插值器，以及一些XML动画和相关的Kotlin代码。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You can learn more about interpolators and the Android `Animation` class on
    the Android developer website here: [http://developer.android.com/guide/topics/resources/animation-resource.html](http://developer.android.com/guide/topics/resources/animation-resource.html).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Android开发者网站上了解有关插值器和Android `Animation`类的更多信息：[http://developer.android.com/guide/topics/resources/animation-resource.html](http://developer.android.com/guide/topics/resources/animation-resource.html)。
- en: Animations demo app – introducing SeekBar
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画演示应用程序-介绍SeekBar
- en: That's enough theory, especially with something that should be so visible. Let's
    build an animation demo app that explores everything we have just discussed, and
    a bit more as well.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这就足够的理论了，尤其是对于应该如此明显的东西。让我们构建一个动画演示应用程序，探索我们刚刚讨论过的一切，以及更多内容。
- en: This app involves small amounts of code in lots of different files. Therefore,
    I have tried to make it plain what code is in what file, so you can keep track
    of what is going on. This will make the Kotlin we write for this app more understandable
    as well.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序涉及许多不同文件中少量的代码。因此，我已经尽量清楚地说明了哪些代码在哪个文件中，这样您就可以跟踪发生了什么。这也将使我们为这个应用程序编写的Kotlin更容易理解。
- en: The app will demonstrate rotations, fades, translations, animation events, interpolations,
    and controlling duration with a `SeekBar` widget. The best way to explain what
    `SeekBar` does is to build it and then watch it in action.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将演示旋转、淡入淡出、平移、动画事件、插值和使用`SeekBar`小部件控制持续时间的功能。解释`SeekBar`的最佳方法是构建它，然后观察它的运行情况。
- en: Laying out the animation demo
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局动画演示
- en: Create a new project called `Animation Demo` using the **Empty Activity** template,
    leaving all the other settings at their usual settings. As usual, should you wish
    to speed things up by copying and pasting the layout, the code, or the animation
    XML, it can all be found in the `Chapter19` folder.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**空活动**模板创建一个名为`Animation Demo`的新项目，将所有其他设置保持为通常的设置。如果您希望通过复制和粘贴布局、代码或动画XML来加快速度，可以在`Chapter19`文件夹中找到所有内容。
- en: 'Use the following reference screenshot of the finished layout to help guide
    you through the next steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用完成布局的参考截图来帮助您完成接下来的步骤：
- en: '![Laying out the animation demo](img/B12806_19_10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![布局动画演示](img/B12806_19_10.jpg)'
- en: 'Here is how you can lay out the UI for this app:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可以为此应用程序布局UI的方法：
- en: Open `activity_main.xml` in the design view of the editor window.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器窗口的设计视图中打开`activity_main.xml`。
- en: Delete the default **Hello world!** `TextView`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除默认的**Hello world!** `TextView`。
- en: Add an **ImageView** to the top-center portion of the layout. Use the previous
    reference screenshot to guide you. Use the `@mipmap/ic_launcher` to show the Android
    robot in `ImageView` when prompted to do so by selecting **Project** | **ic_launcher**
    in the pop-up **Resources** window.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局的顶部中心部分添加一个**ImageView**。使用之前的参考截图来指导您。在弹出的**资源**窗口中选择**项目** | **ic_launcher**，使用`@mipmap/ic_launcher`来在`ImageView`中显示Android机器人。
- en: Set the `id` property of the `ImageView` to `imageView`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ImageView`的`id`属性设置为`imageView`。
- en: Directly below the `ImageView`, add a `TextView`. Set the `id` to `textStatus`.
    I made my `TextView` a little bigger by dragging its edges (not the constraint
    handles) and changed its `textSize` attribute to `40sp`. The layout so far should
    look something like this next screenshot:![Laying out the animation demo](img/B12806_19_01.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ImageView`的正下方，添加一个`TextView`。将`id`设置为`textStatus`。我通过拖动其边缘（而不是约束手柄）使我的`TextView`变大，并将其`textSize`属性更改为`40sp`。到目前为止，布局应该看起来像下一个截图：![布局动画演示](img/B12806_19_01.jpg)
- en: Now we will add a large selection of **Button** widgets to the layout. Exact
    positioning is not vital, but the exact `id` property values we add to them later
    in the tutorial will be. Follow this next screenshot to lay out 12 buttons in
    the layout. Alter the `text` attribute so that your buttons have the same text
    as those in the next screenshot. The `text` attributes are detailed specifically
    in the next step in case the screenshot isn't clear enough:![Laying out the animation
    demo](img/B12806_19_02.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在布局中添加大量的**Button**小部件。确切的定位并不重要，但稍后在教程中为它们添加的确切`id`属性值是重要的。按照下一个截图的指示，在布局中放置12个按钮。修改`text`属性，使您的按钮与下一个截图中的按钮具有相同的文本。如果截图不够清晰，`text`属性将在下一步中具体详细说明：![布局动画演示](img/B12806_19_02.jpg)
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To make the process of laying out the buttons quicker, lay them out just approximately
    at first, then add the `text` attributes from the next step, and then fine-tune
    the button positions to get a neat layout.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快布局按钮的过程，首先大致布局它们，然后从下一步中添加`text`属性，最后微调按钮位置以获得整洁的布局。
- en: 'Add the `text` values as they are in the screenshot; here are all the values
    from left to right and top to bottom: `FADE IN`, `FADE OUT`, `FADE IN OUT`, `ZOOM
    IN`, `ZOOM OUT`, `LEFT RIGHT`, `RIGHT LEFT`, `TOP BOT`, `BOUNCE`, `FLASH`, `ROTATE
    LEFT`, and `ROTATE RIGHT`.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照截图中的方式添加`text`值；从左到右，从上到下，这里是所有的值：`淡入`、`淡出`、`淡入淡出`、`放大`、`缩小`、`左右`、`右左`、`上下`、`弹跳`、`闪烁`、`向左旋转`和`向右旋转`。
- en: Add a `SeekBar` widget from the **Widgets** category of the palette, on the
    left, below the buttons. Set the `id` property to `seekBarSpeed` and the `max`
    property to `5000`. This means that `SeekBar` widget will hold a value between
    0 and 5,000 as it is dragged by the user from left to right. We will see how we
    can read and use this data soon.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧的调色板中的**小部件**类别中添加一个`SeekBar`小部件，将`id`属性设置为`seekBarSpeed`，将`max`属性设置为`5000`。这意味着`SeekBar`小部件将在用户从左向右拖动时保持一个值在0到5000之间。我们将看到如何读取和使用这些数据。
- en: We want to make the `SeekBar` widget much wider. To achieve this, you use the
    exact same technique as with any widget; just drag the edges of the widget. However,
    as the `SeekBar` widget is quite small, it is hard to increase its size without
    accidentally selecting the constraint handles. To overcome this problem, zoom
    into the design view by holding the *Ctrl* key and rolling the middle mouse wheel
    forward. You can then grab the edges of the `SeekBar` widget without touching
    the constraint handles. I have shown this in action in the next screenshot:![Laying
    out the animation demo](img/B12806_19_07.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要让`SeekBar`小部件变得更宽。为了实现这一点，您可以使用与任何小部件相同的技术；只需拖动小部件的边缘。然而，由于`SeekBar`小部件相当小，很难增加其大小而不小心选择约束手柄。为了克服这个问题，通过按住*Ctrl*键并向前滚动鼠标滚轮来放大设计视图。然后，您可以抓住`SeekBar`小部件的边缘，而不触摸约束手柄。我在下一个截图中展示了这一点：![布局动画演示](img/B12806_19_07.jpg)
- en: Now, add a `TextView` widget just to the right of the `SeekBar` widget and set
    its `id` property to `textSeekerSpeed`. This step, combined with the previous
    two, should look like this screenshot:![Laying out the animation demo](img/B12806_19_03.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`SeekBar`小部件的右侧添加一个`TextView`小部件，并将其`id`属性设置为`textSeekerSpeed`。这一步，结合前两步，应该看起来像这张截图：![布局动画演示](img/B12806_19_03.jpg)
- en: Tweak the positions to look like the reference screenshot at the start of these
    steps, and then click the **Infer Constraints** button to lock the positions.
    Of course, you can do this manually if you want the practice. Here is a screenshot
    with all the constraints in place:![Laying out the animation demo](img/B12806_19_08.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微调位置，使其看起来像这些步骤开始时的参考截图，然后单击**推断约束**按钮以锁定位置。当然，如果你想练习，你也可以手动完成。这是一个包含所有约束的截图：![布局动画演示](img/B12806_19_08.jpg)
- en: 'Next, add the following `id` properties to the buttons, as identified by the
    text property that you have already set. If you are asked whether you want to
    **Update usages…** as you enter these values, select **Yes**:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据你已经设置的文本属性，为按钮添加以下`id`属性。如果在输入这些值时询问是否要**更新用法…**，请选择**是**：
- en: '| **Existing text property** | **Value of id property to set** |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| **现有文本属性** | **要设置的id属性的值** |'
- en: '| Fade In | `btnFadeIn` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 淡入 | `btnFadeIn` |'
- en: '| Fade Out | `btnFadeOut` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 淡出 | `btnFadeOut` |'
- en: '| Fade In Out | `btnFadeInOut` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 淡入淡出 | `btnFadeInOut` |'
- en: '| Zoom In | `btnZoomIn` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 放大 | `btnZoomIn` |'
- en: '| Zoom Out | `btnZoomOut` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 缩小 | `btnZoomOut` |'
- en: '| Left Right | `btnLeftRight` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 左右 | `btnLeftRight` |'
- en: '| Right Left | `btnRightLeft` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 右左 | `btnRightLeft` |'
- en: '| Top Bot | `btnTopBottom` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 上下 | `btnTopBottom` |'
- en: '| Bounce | `btnBounce` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 弹跳 | `btnBounce` |'
- en: '| Flash | `btnFlash` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 闪烁 | `btnFlash` |'
- en: '| Rotate Left | `btnRotateLeft` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 旋转左侧 | `btnRotateLeft` |'
- en: '| Rotate Right | `btnRotateRight` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 旋转右侧 | `btnRotateRight` |'
- en: We will see how to use this newcomer to our UI (`SeekBar`) when we get to coding
    the `MainActivity` class in a few sections time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在几节时间内编写`MainActivity`类时，我们将看到如何使用这个新来的UI(`SeekBar`)。
- en: Coding the XML animations
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写XML动画
- en: Right-click on the **res** folder and select **New | Android resource directory**.
    Enter `anim` in the `Directory name:` field and left-click **OK**.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**res**文件夹，然后选择**新建 | Android资源目录**。在`目录名称：`字段中输入`anim`，然后左键单击**确定**。
- en: 'Now right-click on the new **anim** directory and select **New | Animation
    resource file**. In the **File name:** field, type `fade_in` and then left-click
    **OK**. Delete the contents and add this code to create the animation:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在右键单击新的**anim**目录，然后选择**新建 | 动画资源文件**。在**文件名：**字段中，键入`fade_in`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Right-click on the **anim** directory and select **New | Animation resource
    file**. In the `File name:` field, type `fade_out` and then left-click **OK**.
    Delete the contents and add this code to create the animation:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在`文件名：`字段中，键入`fade_out`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Right-click on the **anim** directory and select **New | Animation resource
    file**. In the `File name:` field, type `fade_in_out` and then left-click **OK**.
    Delete the contents and add this code to create the animation:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在`文件名：`字段中，键入`fade_in_out`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Right-click on the **anim** directory and select **New | Animation resource
    file**. In the `File name:` field, type `zoom_in` and then left-click **OK**.
    Delete the contents and add this code to create the animation:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在`文件名：`字段中，键入`zoom_in`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Right-click on the **anim** directory and select **New** | **Animation resource
    file**. In the `File name:` field, type `zoom_out` and then left-click **OK**.
    Delete the contents and add this code to create the animation:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在`文件名：`字段中，键入`zoom_out`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Right-click on the **anim** directory and select **New | Animation resource
    file**. In the `File name:` field, type `left_right` and then left-click **OK**.
    Delete the contents and add this code to create the animation:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在`文件名：`字段中，键入`left_right`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Again, right-click on the **anim** directory and select **New | Animation resource
    file**. In the **File name:** field, type `right_left` and then left-click **OK**.
    Delete the entire contents and add this code to create the animation:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 再次右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在**文件名：**字段中，键入`right_left`，然后左键单击**确定**。删除整个内容并添加以下代码来创建动画：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As before, right-click on the **anim** directory and select **New | Animation
    resource file**. In the **File name:** field, type `top_bot` and then left-click
    **OK**. Delete the entire contents and add this code to create the animation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在**文件名：**字段中，键入`top_bot`，然后左键单击**确定**。删除整个内容并添加以下代码来创建动画：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You guessed it; right-click on the **anim** directory and select **New | Animation
    resource file**. In the **File name:** field, type `flash` and then left-click
    **OK**. Delete the contents and add this code to create the animation:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你猜对了；右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在**文件名：**字段中，键入`flash`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Just a few more to go – right-click on the **anim** directory and select **New
    | Animation resource file**. In the **File name:** field, type `bounce` and then
    left-click **OK**. Delete the contents and add this code to create the animation:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些要做 - 右键单击**anim**目录，然后选择**新建 | 动画资源文件**。在**文件名：**字段中，键入`bounce`，然后左键单击**确定**。删除内容并添加以下代码来创建动画：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Right-click on the **anim** directory and select **New | Animation resource
    file**. In the **File name:** field, type `rotate_left` and then left-click **OK**.
    Delete the contents and add this code to create the animation. Here we see something
    new, `pivotX="50%"` and `pivotY="50%"`. This makes the rotate animation central
    on the widget that will be animated. We can think of this as setting the *pivot*
    point of the animation:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**anim**目录，然后选择**New | Animation resource file**。在**File name:**字段中，键入`rotate_left`，然后左键单击**OK**。删除内容并添加此代码以创建动画。在这里，我们看到了一些新东西，`pivotX="50%"`和`pivotY="50%"`。这使得旋转动画在将要被动画化的小部件上是中心的。我们可以将其视为设置动画的*中心*点：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Right-click on the **anim** directory and select **New | Animation resource
    file**. In the **File name:** field, type `rotate_right` and then left-click **OK**.
    Delete the contents and add this code to create the animation:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**anim**目录，然后选择**New | Animation resource file**。在**File name:**字段中，键入`rotate_right`，然后左键单击**OK**。删除内容并添加此代码以创建动画：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Phew! Now we can write the Kotlin code to add our animations to our UI.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！现在我们可以编写Kotlin代码将我们的动画添加到我们的UI中。
- en: Wiring up the Animation demo app in Kotlin
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Kotlin中连接动画演示应用程序
- en: 'Open the `MainActivity.kt` file. Now, following the class declaration, we can
    declare the following properties for animations:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity.kt`文件。现在，在类声明之后，我们可以声明以下动画属性：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You will need to add the following `import` statement at this point:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您需要添加以下`import`语句：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, we used the `lateinit` keyword when declaring the `Animation`
    instances. This will mean that Kotlin will check that each instance is initialized
    before it is used. This avoids us using `!!` (null checks) each time we use a
    function on one of these instances. For a refresher on the `!!` operator, refer
    to [Chapter 12](ch12.html "Chapter 12. Connecting Our Kotlin to the UI and Nullability"),
    *Connecting Our Kotlin to the UI and Nullability*.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们在声明`Animation`实例时使用了`lateinit`关键字。这意味着Kotlin将在使用每个实例之前检查它是否已初始化。这避免了我们在每次在这些实例中使用函数时使用`!!`（空检查）。有关`!!`运算符的复习，请参阅[第12章](ch12.html
    "第12章。将我们的Kotlin连接到UI和空值")*将我们的Kotlin连接到UI和空值*。
- en: We also added an `Int` property, `seekSpeedProgress`, which will be used to
    track the current value/position of `SeekBar`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个`Int`属性`seekSpeedProgress`，它将用于跟踪`SeekBar`的当前值/位置。
- en: 'Now, let''s call a new function from `onCreate` after the call to `setContentView`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`setContentView`调用之后，让我们从`onCreate`中调用一个新函数：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: At this point, the new line of code will have an error until we implement the
    new function.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，新的代码行在实现新函数之前将出现错误。
- en: Now we will implement the `loadAnimations` function. Although the code in this
    function is quite extensive, it is also very straightforward. All we are doing
    is using the `loadAnimation` function of the `AnimationUtils` class to initialize
    each of our `Animation` references with one of our XML animations. You will also
    notice that, for the `animFadeIn` `Animation`, we also call `setAnimationListener`
    on it. We will write the functions to listen for events shortly.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将实现`loadAnimations`函数。虽然这个函数中的代码相当庞大，但也非常直接。我们所做的就是使用`AnimationUtils`类的`loadAnimation`函数，用我们的XML动画初始化每个`Animation`引用之一。您还会注意到，对于`animFadeIn`
    `Animation`，我们还在其上调用`setAnimationListener`。我们将很快编写监听事件的函数。
- en: 'Add the `loadAnimations` function:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`loadAnimations`函数：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You will need to import one new class at this point:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您需要导入一个新的类：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, we will add a click-listener for each button. Add this code immediately
    before the closing curly brace of the `onCreate` function:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为每个按钮添加一个点击监听器。在`onCreate`函数的右大括号之前立即添加以下代码：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The code we just added creates errors in all the lines of code. We can ignore
    them for now, as we will fix them shortly and discuss what happened.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的代码在所有代码行中都创建了错误。我们现在可以忽略它们，因为我们很快就会修复它们并讨论发生了什么。
- en: 'Now, we can use a lambda to handle the `SeekBar` interactions. We will override
    three functions, as it is required by the interface when implementing `OnSeekBarChangeListener`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用lambda来处理`SeekBar`的交互。我们将重写三个函数，因为在实现`OnSeekBarChangeListener`时接口要求这样做：
- en: A function that detects a change in the position of the `SeekBar` widget, called
    `onProgressChanged`
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个检测`SeekBar`小部件位置变化的函数，称为`onProgressChanged`
- en: A function that detects the user starting to change the position, called `onStartTrackingTouch`
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个检测用户开始改变位置的函数，称为`onStartTrackingTouch`
- en: A function that detects when the user has finished using the `SeekBar` widget,
    called `onStopTrackingTouch`
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个检测用户完成使用`SeekBar`小部件的函数，称为`onStopTrackingTouch`
- en: To achieve our goals, we only need to add code to the `onProgressChanged` function,
    but we must still override them all.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的目标，我们只需要向`onProgressChanged`函数添加代码，但我们仍然必须重写它们全部。
- en: All we do in the `onProgressChanged` function is assign the current value of
    the `SeekBar` object to the `seekSpeedProgress` member variable, so it can be
    accessed from elsewhere. Then, we use this value along with the maximum possible
    value of the `SeekBar` object, obtained by using `seekBarSpeed.max`, and output
    a message to the `textSeekerSpeed` `TextView`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onProgressChanged`函数中，我们所做的就是将`SeekBar`对象的当前值分配给`seekSpeedProgress`成员变量，以便可以从其他地方访问。然后，我们使用这个值以及`SeekBar`对象的最大可能值，通过使用`seekBarSpeed.max`，并向`textSeekerSpeed`
    `TextView`输出一条消息。
- en: 'Add the code we have just discussed before the closing curly brace of the `onCreate`
    function:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreate`函数的右大括号之前添加我们刚刚讨论过的代码：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, we need to alter the `MainActivity` class declaration to implement two
    interfaces. In this app, we will be listening for clicks and for animation events,
    so the two interfaces we will be using are `View.OnClickListener` and `Animation.AnimationListener`.
    You will notice that to implement more than one interface, we simply separate
    the interfaces with a comma.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要修改`MainActivity`类声明以实现两个接口。在这个应用程序中，我们将监听点击和动画事件，所以我们将使用的两个接口是`View.OnClickListener`和`Animation.AnimationListener`。您会注意到，要实现多个接口，我们只需用逗号分隔接口。
- en: 'Alter the `MainActivity` class declaration by adding the highlighted code we
    have just discussed:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加我们刚讨论过的突出显示的代码来修改`MainActivity`类声明：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'At this stage, we can add and implement the required functions for those interfaces.
    First, the `AnimationListener` functions, `onAnimationEnd`, `onAnimationRepeat`,
    and `onAnimationStart`. We only need to add a little code to two of these functions.
    In `onAnimationEnd`, we set the `text` property of `textStatus` to `STOPPED`,
    and in `onAnimationStart`, we set it to `RUNNING`. This will demonstrate our animation
    listeners are indeed listening and working:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们可以添加并实现这些接口所需的函数。首先是`AnimationListener`函数，`onAnimationEnd`，`onAnimationRepeat`和`onAnimationStart`。我们只需要在这些函数中的两个中添加一点代码。在`onAnimationEnd`中，我们将`textStatus`的`text`属性设置为`STOPPED`，在`onAnimationStart`中，我们将其设置为`RUNNING`。这将演示我们的动画监听器确实在监听和工作：
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `onClick` function is quite long, but nothing complicated. Each option of
    the `when` block handles each button from the UI, sets the duration of an animation
    based on the current position of the `SeekBar` widget, sets up the animation so
    it can be listened to for events, and then starts the animation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`onClick`函数非常长，但并不复杂。`when`块的每个选项处理UI中的每个按钮，根据`SeekBar`小部件的当前位置设置动画的持续时间，设置动画以便监听事件，然后启动动画。'
- en: Tip
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'You will need to use your preferred technique to import the `View` class:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用您喜欢的技术来导入`View`类：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the `onClick` function we have just discussed, and we have then completed
    this mini app:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 添加我们刚讨论过的`onClick`函数，然后我们就完成了这个迷你应用程序：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, run the app and move the `SeekBar` widget to roughly the center so that
    the animations run for a reasonable amount of time:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，并将`SeekBar`小部件移动到大致中心，以便动画运行一段合理的时间：
- en: '![Wiring up the Animation demo app in Kotlin](img/B12806_19_04.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![在Kotlin中连接动画演示应用程序](img/B12806_19_04.jpg)'
- en: 'Click the **ZOOM IN** button:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**放大**按钮：
- en: '![Wiring up the Animation demo app in Kotlin](img/B12806_19_05.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![在Kotlin中连接动画演示应用程序](img/B12806_19_05.jpg)'
- en: 'Notice how the text on the Android robot changes from **RUNNING** to **STOPPED**
    at the appropriate time. Now, click one of the **ROTATE** buttons:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Android机器人上的文本在适当的时间从**RUNNING**更改为**STOPPED**。现在，点击其中一个**ROTATE**按钮：
- en: '![Wiring up the Animation demo app in Kotlin](img/B12806_19_06.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![在Kotlin中连接动画演示应用程序](img/B12806_19_06.jpg)'
- en: Most of the other animations don't do themselves justice in a screenshot, so
    be sure to try them all out for yourself.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数其他动画在截图中无法展现出自己的价值，所以一定要自己尝试它们。
- en: Frequently asked questions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经常问的问题
- en: Q.1) We know how to animate widgets now, but what about shapes or images that
    I create myself?
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Q.1) 我们现在知道如何为小部件添加动画，但是我自己创建的形状或图像呢？
- en: A) An `ImageView` widget can hold any image you like. Just add the image to
    the `drawable` folder and then set the appropriate `src` attribute on the `ImageView`
    widget. You can then animate whatever image is being shown in the `ImageView`
    widget.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: A) 一个`ImageView`小部件可以容纳任何您喜欢的图像。只需将图像添加到`drawable`文件夹，然后在`ImageView`小部件上设置适当的`src`属性。然后您可以对`ImageView`小部件中显示的任何图像进行动画处理。
- en: Q.2) But what if I want more flexibility than this, more like a drawing app
    or even a game?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Q.2) 但是如果我想要比这更灵活的功能，更像是一个绘画应用程序甚至是一个游戏呢？
- en: A) To implement this kind of functionality, we will need to learn about another
    general computing concept known as **threads**, as well as some more Android classes
    (such as `Paint`, `Canvas`, and `SurfaceView`). We will learn how to draw anything
    from a single pixel to shapes, and then move them around the screen, starting
    in the next chapter, [Chapter 20](ch20.html "Chapter 20. Drawing Graphics"), *Drawing
    Graphics*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: A) 要实现这种功能，我们需要学习另一个称为**线程**的通用计算概念，以及一些更多的Android类（如`Paint`，`Canvas`和`SurfaceView`）。我们将学习如何从单个像素到形状绘制任何东西，然后将它们移动到屏幕上，从下一章开始，[第20章](ch20.html
    "第20章。绘制图形") *绘制图形*。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now we have another app-enhancing trick up our sleeves. In this chapter, we
    saw that animations in Android are quite straightforward. We designed an animation
    in XML and added the file to the `anim` folder. Next, we got a reference to the
    animation in XML with an `Animation` object in our Kotlin code.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有另一个增强应用程序的技巧。在本章中，我们看到Android中的动画非常简单。我们在XML中设计了一个动画，并将文件添加到`anim`文件夹中。接下来，我们在Kotlin代码中使用`Animation`对象获取了XML中动画的引用。
- en: We then used a reference to a widget in our UI, set an animation to it using
    `setAnimation`, and passed in the `Animation` object. We commenced the animation
    by calling `startAnimation` on the reference to the widget.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在UI中使用小部件的引用，使用`setAnimation`为其设置动画，并传入`Animation`对象。通过在小部件的引用上调用`startAnimation`来启动动画。
- en: We also saw that we can control the timing of animations and listen for animation
    events.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到我们可以控制动画的时间并监听动画事件。
- en: In the next chapter, we will learn about drawing graphics in Android. This will
    be the start of several chapters on graphics, where we will build a kid's-style
    drawing app.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习在Android中绘制图形。这将是关于图形的几章中的开始，我们将构建一个儿童风格的绘画应用程序。
