["```\n# This is a comment\nDIRECTIVE argument\n```", "```\nFROM <image>:<tag> \n```", "```\nFROM ubuntu:20.04\n```", "```\nFROM scratch\n```", "```\nLABEL <key>=<value>\n```", "```\nLABEL maintainer=sathsara@mydomain.com\nLABEL version=1.0\nLABEL environment=dev\n```", "```\nLABEL maintainer=sathsara@mydomain.com version=1.0 environment=dev\n```", "```\n...\n...\n\"Labels\": {\n\u00a0\u00a0\u00a0\u00a0\"environment\": \"dev\",\n\u00a0\u00a0\u00a0\u00a0\"maintainer\": \"sathsara@mydomain.com\",\n\u00a0\u00a0\u00a0\u00a0\"version\": \"1.0\"\n}\n...\n...\n```", "```\nRUN <command>\n```", "```\nRUN apt-get update\nRUN apt-get install nginx -y\n```", "```\nRUN apt-get update && apt-get install nginx -y\n```", "```\nCMD [\"executable\",\"param1\",\"param2\",\"param3\", ...]\n```", "```\nCMD [\"echo\",\"Hello World\"]\n```", "```\n$ docker container run <image>\nHello World\n```", "```\n$ docker container run <image> echo \"Hello Docker !!!\"\n```", "```\nENTRYPOINT [\"executable\",\"param1\",\"param2\",\"param3\", ...]\n```", "```\nENTRYPOINT [\"echo\",\"Hello\"]\nCMD [\"World\"]\n```", "```\n$ docker container run <image>\nHello World\n```", "```\n$ docker container run <image> \"Docker\"\nHello Docker\n```", "```\n    $ mkdir custom-docker-image\n    ```", "```\n    $ cd custom-docker-image\n    ```", "```\n    $ touch Dockerfile\n    ```", "```\n    $ vim Dockerfile\n    ```", "```\n    # This is my first Docker image\n    FROM ubuntu \n    LABEL maintainer=sathsara@mydomain.com \n    RUN apt-get update\n    CMD [\"The Docker Workshop\"]\n    ENTRYPOINT [\"echo\", \"You are reading\"]\n    ```", "```\n$ docker image build <context>\n```", "```\n$ docker image build.\n```", "```\nFROM ubuntu:latest\nLABEL maintainer=sathsara@mydomain.com\nCMD [\"echo\",\"Hello World\"]\n```", "```\nSending build context to Docker daemon 2.048kB\nStep 1/3 : FROM ubuntu:latest\nlatest: Pulling from library/ubuntu\n2746a4a261c9: Pull complete \n4c1d20cdee96: Pull complete \n0d3160e1d0de: Pull complete \nc8e37668deea: Pull complete\nDigest: sha256:250cc6f3f3ffc5cdaa9d8f4946ac79821aafb4d3afc93928\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f0de9336eba21aa4\nStatus: Downloaded newer image for ubuntu:latest\n\u00a0---> 549b9b86cb8d\nStep 2/3 : LABEL maintainer=sathsara@mydomain.com\n\u00a0---> Running in a4a11e5e7c27\nRemoving intermediate container a4a11e5e7c27\n\u00a0---> e3add5272e35\nStep 3/3 : CMD [\"echo\",\"Hello World\"]\n\u00a0---> Running in aad8a56fcdc5\nRemoving intermediate container aad8a56fcdc5\n\u00a0---> dc3d4fd77861\nSuccessfully built dc3d4fd77861\n```", "```\n$ docker image list\n```", "```\nREPOSITORY   TAG       IMAGE ID        CREATED          SIZE\n<none>       <none>    dc3d4fd77861    3 minutes ago    64.2MB\nubuntu       latest    549b9b86cb8d    5 days ago       64.2MB\n```", "```\n$ docker image build\nSending build context to Docker daemon  2.048kB\nStep 1/3 : FROM ubuntu:latest\n\u00a0---> 549b9b86cb8d\nStep 2/3 : LABEL maintainer=sathsara@mydomain.com\n\u00a0---> Using cache\n\u00a0---> e3add5272e35\nStep 3/3 : CMD [\"echo\",\"Hello World\"]\n\u00a0---> Using cache\n\u00a0---> dc3d4fd77861\nSuccessfully built dc3d4fd77861\n```", "```\n$ docker image build\nSending build context to Docker daemon  2.048kB\nError response from daemon: Dockerfile parse error line 5: \nunknown instruction: INVALID\n```", "```\n$ docker image list\n```", "```\nREPOSITORY    TAG       IMAGE ID         CREATED          SIZE\n<none>        <none>    dc3d4fd77861     3 minutes ago    64.2MB\nubuntu        latest    549b9b86cb8d     5 days ago       64.2MB\n```", "```\n$ docker image tag dc3d4fd77861 my-tagged-image:v1.0\n```", "```\nREPOSITORY        TAG       IMAGE ID        CREATED         SIZE\nmy-tagged-image   v1.0      dc3d4fd77861    20 minutes ago  64.2MB\nubuntu            latest    549b9b86cb8d    5 days ago      64.2MB\n```", "```\n$ docker image build -t my-tagged-image:v2.0 .\n```", "```\nSending build context to Docker daemon  2.048kB\nStep 1/3 : FROM ubuntu:latest\n\u00a0---> 549b9b86cb8d\nStep 2/3 : LABEL maintainer=sathsara@mydomain.com\n\u00a0---> Using cache\n\u00a0---> e3add5272e35\nStep 3/3 : CMD [\"echo\",\"Hello World\"]\n\u00a0---> Using cache\n\u00a0---> dc3d4fd77861\nSuccessfully built dc3d4fd77861\nSuccessfully tagged my-tagged-image:v2.0\n```", "```\n    # This is my first Docker image\n    FROM ubuntu \n    LABEL maintainer=sathsara@mydomain.com \n    RUN apt-get update\n    CMD [\"The Docker Workshop\"]\n    ENTRYPOINT [\"echo\", \"You are reading\"]\n    ```", "```\n    $ docker image build -t welcome:1.0 .\n    ```", "```\n    $ docker image build -t welcome:2.0 .\n    ```", "```\n    $ docker image list\n    ```", "```\n    REPOSITORY   TAG      IMAGE ID        CREATED          SIZE\n    welcome      1.0      98f571a42e5c    23 minutes ago   91.9MB\n    welcome      2.0      98f571a42e5c    23 minutes ago   91.9MB\n    ubuntu       latest   549b9b86cb8d    2 weeks ago      64.2MB\n    ```", "```\n    $ docker container run welcome:1.0\n    ```", "```\n    You are reading The Docker Workshop\n    ```", "```\n    $ docker container run welcome:1.0 \"Docker Beginner's Guide\"\n    ```", "```\n    You are reading Docker Beginner's Guide\n    ```", "```\nENV <key> <value>\n```", "```\n$PATH:/usr/local/myapp/bin/\n```", "```\nENV PATH $PATH:/usr/local/myapp/bin/\n```", "```\nENV <key>=<value> <key>=<value> ...\n```", "```\nENV PATH=$PATH:/usr/local/myapp/bin/ VERSION=1.0.0\n```", "```\n$ docker image build -t <image>:<tag> --build-arg <varname>=<value> .\n```", "```\nARG <varname>\n```", "```\nARG USER\nARG VERSION\n```", "```\nARG USER=TestUser\nARG VERSION=1.0.0\n```", "```\n    mkdir env-arg-exercise\n    ```", "```\n    cd env-arg-exercise\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # ENV and ARG example\n    ARG TAG=latest\n    FROM ubuntu:$TAG\n    LABEL maintainer=sathsara@mydomain.com \n    ENV PUBLISHER=packt APP_DIR=/usr/local/app/bin\n    CMD [\"env\"]\n    ```", "```\n    $ docker image build -t env-arg --build-arg TAG=19.04 .\n    ```", "```\n    $ docker container run env-arg\n    ```", "```\nWORKDIR /path/to/workdir\n```", "```\nWORKDIR /one\nWORKDIR two\nWORKDIR three\nRUN pwd\n```", "```\nCOPY <source> <destination>\n```", "```\nCOPY index.html /var/www/html/index.html\n```", "```\nCOPY *.html /var/www/html/\n```", "```\nCOPY --chown=myuser:mygroup *.html /var/www/html/\n```", "```\nADD <source> <destination>\n```", "```\nADD http://sample.com/test.txt /tmp/test.txt\n```", "```\nADD html.tar.gz /var/www/html\n```", "```\n    mkdir workdir-copy-add-exercise\n    ```", "```\n    cd workdir-copy-add-exercise\n    ```", "```\n    touch index.html \n    ```", "```\n    vim index.html \n    ```", "```\n    <html>\n    \u00a0\u00a0<body>\n    \u00a0\u00a0\u00a0\u00a0<h1>Welcome to The Docker Workshop</h1>\n    \u00a0\u00a0\u00a0\u00a0<img src=\"logo.png\" height=\"350\" width=\"500\"/>\n    \u00a0\u00a0</body>\n    </html>\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # WORKDIR, COPY and ADD example\n    FROM ubuntu:latest \n    RUN apt-get update && apt-get install apache2 -y \n    WORKDIR /var/www/html/\n    COPY index.html .\n    ADD https://www.docker.com/sites/default/files/d8/2019-07/  Moby-logo.png ./logo.png\n    CMD [\"ls\"]\n    ```", "```\n    $ docker image build -t workdir-copy-add .\n    ```", "```\n    $ docker container run workdir-copy-add\n    ```", "```\n    index.html\n    logo.png\n    ```", "```\nUSER <user>\n```", "```\nUSER <user>:<group>\n```", "```\ndocker: Error response from daemon: unable to find user my_user: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0no matching entries in passwd file.\n```", "```\n    mkdir user-exercise\n    ```", "```\n    cd user-exercise\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # USER example\n    FROM ubuntu\n    RUN apt-get update && apt-get install apache2 -y \n    USER www-data\n    CMD [\"whoami\"]\n    ```", "```\n    $ docker image build -t user .\n    ```", "```\n    $ docker container run user\n    ```", "```\n    www-data\n    ```", "```\nVOLUME [\"/path/to/volume\"]\n```", "```\nVOLUME /path/to/volume1 /path/to/volume2\n```", "```\n\"Mounts\": [\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Type\": \"volume\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Name\": \"77db32d66407a554bd0dbdf3950671b658b6233c509ea\ned9f5c2a589fea268fe\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Source\": \"/var/lib/docker/volumes/77db32d66407a554bd0\ndbdf3950671b658b6233c509eaed9f5c2a589fea268fe/_data\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Destination\": \"/path/to/volume\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Driver\": \"local\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Mode\": \"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"RW\": true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Propagation\": \"\"\n\u00a0\u00a0\u00a0\u00a0}\n],\n```", "```\n[\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"CreatedAt\": \"2019-12-28T12:52:52+05:30\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Driver\": \"local\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Labels\": null,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Mountpoint\": \"/var/lib/docker/volumes/77db32d66407a554\nbd0dbdf3950671b658b6233c509eaed9f5c2a589fea268fe/_data\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Name\": \"77db32d66407a554bd0dbdf3950671b658b6233c509eae\nd9f5c2a589fea268fe\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Options\": null,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Scope\": \"local\"\n\u00a0\u00a0\u00a0\u00a0}\n]\n```", "```\n    mkdir volume-exercise\n    ```", "```\n    cd volume-exercise\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # VOLUME example\n    FROM ubuntu\n    RUN apt-get update && apt-get install apache2 -y\n    VOLUME [\"/var/log/apache2\"]\n    ```", "```\n    $ docker image build -t volume .\n    ```", "```\n    $ docker container run --interactive --tty --name volume-container volume /bin/bash\n    ```", "```\n    root@bc61d46de960: /#\n    ```", "```\n    # cd /var/log/apache2/\n    ```", "```\n    root@bc61d46de960: /var/log/apache2#\n    ```", "```\n    # ls -l\n    ```", "```\n    # exit\n    ```", "```\n    $ docker container inspect volume-container\n    ```", "```\n    $ docker volume inspect 354d188e0761d82e1e7d9f3d5c6ee644782b7150f51cead8f140556e5d334bd5\n    ```", "```\n    $ sudo ls -l /var/lib/docker/volumes/354d188e0761d82e1e7d9f3d5c6ee644782b7150f51cead8f14 0556e5d334bd5/_data\n    ```", "```\nEXPOSE <port>\n```", "```\ndocker container run -p <host_port>:<container_port> <image>\n```", "```\nHEALTHCHECK [OPTIONS] CMD command\n```", "```\nHEALTHCHECK CMD curl -f http://localhost/ || exit 1\n```", "```\nHEALTHCHECK --interval=1m --timeout=2s --start-period=2m --retries=3 \\    CMD curl -f http://localhost/ || exit 1\n```", "```\nCONTAINER ID  IMAGE     COMMAND                  CREATED\n\u00a0\u00a0STATUS                        PORTS                NAMES\nd4e627acf6ec  sample    \"apache2ctl -D FOREG\u2026\"   About a minute ago\n\u00a0\u00a0Up About a minute (healthy)   0.0.0.0:80->80/tcp   upbeat_banach\n```", "```\n    mkdir expose-healthcheck\n    ```", "```\n    cd expose-healthcheck\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # EXPOSE & HEALTHCHECK example\n    FROM ubuntu\n    RUN apt-get update && apt-get install apache2 curl -y \n    HEALTHCHECK CMD curl -f http://localhost/ || exit 1\n    EXPOSE 80\n    ENTRYPOINT [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\n    ```", "```\n    $ docker image build -t expose-healthcheck.\n    ```", "```\n    $ docker container run -p 80:80 --name expose-healthcheck-container -d expose-healthcheck\n    ```", "```\n    $ docker container list\n    ```", "```\n    $ docker container stop expose-healthcheck-container\n    ```", "```\n    $ docker container rm expose-healthcheck-container\n    ```", "```\nONBUILD <instruction>\n```", "```\nONBUILD ENTRYPOINT [\"echo\",\"Running ONBUILD directive\"]\n```", "```\n$ docker image inspect <parent-image>\n```", "```\n...\n\"OnBuild\": [\n\u00a0\u00a0\u00a0\u00a0\"CMD [\\\"echo\\\",\\\"Running ONBUILD directive\\\"]\"\n]\n...\n```", "```\n    mkdir onbuild-parent\n    ```", "```\n    cd onbuild-parent\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # ONBUILD example\n    FROM ubuntu\n    RUN apt-get update && apt-get install apache2 -y \n    ONBUILD COPY *.html /var/www/html\n    EXPOSE 80\n    ENTRYPOINT [\"apache2ctl\", \"-D\", \"FOREGROUND\"]\n    ```", "```\n    $ docker image build -t onbuild-parent .\n    ```", "```\n    $ docker container run -p 80:80 --name onbuild-parent-container -d onbuild-parent\n    ```", "```\n    $ docker container stop onbuild-parent-container\n    ```", "```\n    $ docker container rm onbuild-parent-container\n    ```", "```\n    cd ..\n    ```", "```\n    mkdir onbuild-child\n    ```", "```\n    cd onbuild-child\n    ```", "```\n    touch index.html \n    ```", "```\n    vim index.html \n    ```", "```\n    <html>\n    \u00a0\u00a0<body>\n    \u00a0\u00a0\u00a0\u00a0<h1>Learning Docker ONBUILD directive</h1>\n    \u00a0\u00a0</body>\n    </html>\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    # ONBUILD example\n    FROM onbuild-parent\n    ```", "```\n    $ docker image build -t onbuild-child .\n    ```", "```\n    $ docker container run -p 80:80 --name onbuild-child-container -d onbuild-child\n    ```", "```\n    $ docker container stop onbuild-child-container\n    ```", "```\n    $ docker container rm onbuild-child-container\n    ```", "```\n<?php\n$hourOfDay = date('H');\nif($hourOfDay < 12) {\n\u00a0\u00a0\u00a0\u00a0$message = \"Good Morning\";\n} elseif($hourOfDay > 11 && $hourOfDay < 18) {\n\u00a0\u00a0\u00a0\u00a0$message = \"Good Afternoon\";\n} elseif($hourOfDay > 17){\n\u00a0\u00a0\u00a0\u00a0$message = \"Good Evening\";\n}\necho $message;\n?>\n```"]