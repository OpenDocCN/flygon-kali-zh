["```cs\npublic class CarLoanCalculator : LoanCalculator\n{    \n    public CarLoanCalculator(RateParser rateParser)\n    {\n        base.rateParser=rateParser;\n    }\n\n    public override Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        Loan loan = new Loan();\n        loan.LoanType=loanDTO.LoanType;\n        loan.InterestRate=rateParser.GetRateByLoanType(loanDTO.LoanType, loanDTO.LocationType, loanDTO.JobType);\n        // do other processing\n        return loan    \n    }   \n}\n```", "```cs\npublic class CarLoanCalculatorTest\n{    \n    private CarLoanCalculator carLoanCalculator;\n\n    public CarLoanCalculatorTest()\n    {\n        RateParser rateParser= new RateParser();\n        this.carLoanCalculator=new CarLoanCalculator(rateParser);\n    }\n\n    [Fact]\n    public void Test_CalculateLoan_ShouldReturnLoan()\n    {\n        // first scenario\n        LoanDTO loanDTO1 = new LoanDTO();\n        loanDTO1.LoanType=LoanType.CarLoan;\n        loanDTO1.LocationType=LocationType.Location1;\n        loanDTO1.JobType=JobType.Professional\n        Loan loan1=carLoanCalculator.CalculateLoan(loanDTO1);\n\n        Assert.NotNull(loan1);\n        Assert.Equal(8,loan1.InterestRate);        \n\n        // second scenario\n        LoanDTO loanDTO2 = new LoanDTO();\n        loanDTO2.LoanType=LoanType.CarLoan;\n        loanDTO2.LocationType=LocationType.Location2;\n        loanDTO2.JobType=JobType.Professional;\n        Loan loan2=carLoanCalculator.CalculateLoan(loanDTO2);\n\n        Assert.NotNull(loan2);\n        Assert.Equal(10,loan2.InterestRate);\n    }   \n}\n```", "```cs\n[Theory]\npublic void Test_CalculateRates_ShouldReturnRate()\n{\n   // test not implemented yet\n}\n```", "```cs\n[Theory, InlineData(\"arguments\")]\n```", "```cs\npublic class TheoryTest\n{\n    [Theory,\n    InlineData(\"name\")]\n    public void TestCheckWordLength_ShouldReturnBoolean(string word)\n    {\n        Assert.Equal(4, word.Length);\n    }\n}\n```", "```cs\n[Theory, InlineData(\"argument1\"), InlineData(\"argument2\"), InlineData(\"argumentn\")]\n```", "```cs\npublic class TheoryTest\n{\n    [Theory,\n    InlineData(\"name\"),\n    InlineData(\"word\"),\n    InlineData(\"city\")\n    ]\n    public void TestCheckWordLength_ShouldReturnBoolean(string word)\n    {\n        Assert.Equal(4, word.Length);\n    }\n}\n```", "```cs\npublic class TheoryTest\n{\n    [Theory,\n    InlineData(\"word\",\"name\")]\n    public void TestCheckWordLength_ShouldReturnBoolean(string word)\n    {\n        Assert.Equal(4, word.Length);\n    }\n}\n```", "```cs\n [Theory,\n    InlineData(\"name\"),\n    InlineData(\"city\")]\n    public void TestCheckWordLength_ShouldReturnBoolean(string word)\n    {\n        Assert.Equal(4, word.Length);\n    }\n```", "```cs\n[Theory,InlineData(new LoanDTO{ LoanType =LoanType.CarLoan, JobType =JobType.Professional, LocationType=LocationType.Location1 })]\n public void Test_CalculateLoan_ShouldReturnCorrectRate(LoanDTO loanDTO)\n {\n     Loan loan = carLoanCalculator.CalculateLoan(loanDTO);\n     Assert.NotNull(loan);\n     Assert.Equal(8, loan.InterestRate);\n }\n```", "```cs\npublic static IEnumerable<object[]> GetLoanDTOs()\n{\n       yield return new object[]\n       {\n           new LoanDTO\n            {\n                LoanType = LoanType.CarLoan,\n                JobType = JobType.Professional,\n                 LocationType = LocationType.Location1\n             }\n        };\n\n       yield return new object[]\n       {\n            new LoanDTO\n            {\n                LoanType = LoanType.CarLoan,\n                JobType = JobType.Professional,\n                LocationType = LocationType.Location2\n            }\n        };\n  }\n```", "```cs\n [Theory, MemberData(\"GetLoanDTOs\")]\n public void Test_CalculateLoan_ShouldReturnCorrectRate(LoanDTO loanDTO)\n {\n     Loan loan = carLoanCalculator.CalculateLoan(loanDTO);\n     Assert.NotNull(loan);\n     Assert.InRange(loan.InterestRate, 8, 12);\n }\n```", "```cs\n [Theory, MemberData(nameof(GetLoanDTOs))]\n public void Test_CalculateLoan_ShouldReturnCorrectRate(LoanDTO loanDTO)\n {\n     Loan loan = carLoanCalculator.CalculateLoan(loanDTO);\n     Assert.NotNull(loan);\n     Assert.InRange(loan.InterestRate, 8, 12);\n }\n```", "```cs\n[Theory, MemberData(\"LoanDTOs\")]\n        public void Test_CalculateLoan_ShouldReturnCorrectRate(LoanDTO loanDTO)\n        {\n            Loan loan = carLoanCalculator.CalculateLoan(loanDTO);\n            Assert.NotNull(loan);\n            Assert.InRange(loan.InterestRate, 8, 12);\n        }\n```", "```cs\npublic static IEnumerable<object[]> LoanDTOs\n{\n            get\n            {\n                yield return new object[]\n                {\n                    new LoanDTO\n                    {\n                        LoanType = LoanType.CarLoan,\n                        JobType = JobType.Professional,\n                        LocationType = LocationType.Location1\n                    }\n                };\n\n                yield return new object[]\n                {\n                    new LoanDTO\n                    {\n                        LoanType = LoanType.CarLoan,\n                        JobType = JobType.Professional,\n                        LocationType = LocationType.Location2\n                    }\n                };\n }\n```", "```cs\npublic class DataClass\n{\n    public static IEnumerable<object[]> LoanDTOs\n    {\n            get\n             {\n                    yield return new object[]\n                    {\n                        new LoanDTO\n                        {\n                            LoanType = LoanType.CarLoan,\n                            JobType = JobType.Professional,\n                            LocationType = LocationType.Location1\n                        }\n                    };\n\n                yield return new object[]\n                 {\n                        new LoanDTO\n                        {\n                            LoanType = LoanType.CarLoan,\n                            JobType = JobType.Professional,\n                            LocationType = LocationType.Location2\n                        }\n                };\n           }\n     }\n}\n```", "```cs\n[Theory, MemberData(nameof(LoanDTOs), MemberType = typeof(DataClass))]\npublic void Test_CalculateLoan_ShouldReturnCorrectRate(LoanDTO loanDTO)\n{\n       Loan loan = carLoanCalculator.CalculateLoan(loanDTO);\n       Assert.NotNull(loan);\n       Assert.InRange(loan.InterestRate, 8, 12);\n}        \n```", "```cs\n[Theory, MemberData(nameof(GetLoanDTOs),  parameters: 1, MemberType = typeof(DataClass))]\npublic void Test_CalculateLoan_ShouldReturnCorrectRate3(LoanDTO loanDTO)\n{\n     Loan loan = carLoanCalculator.CalculateLoan(loanDTO);\n     Assert.NotNull(loan);\n     Assert.InRange(loan.InterestRate, 8, 12);\n}        \n```", "```cs\npublic class DataClass\n{\n    public static IEnumerable<object[]> GetLoanDTOs(int records)\n    {\n        var loanDTOs = new List<object[]>\n        {\n               new object[]\n               {\n                   new LoanDTO\n                   {\n                       LoanType = LoanType.CarLoan,\n                       JobType = JobType.Professional,\n                         LocationType = LocationType.Location1\n                    }\n               },\n               new object[]\n               {\n                    new LoanDTO\n                    {\n                        LoanType = LoanType.CarLoan,\n                        JobType = JobType.Professional,\n                        LocationType = LocationType.Location2\n                     }\n                 }\n         };\n        return loanDTOs.TakeLast(records);\n    }\n}\n```", "```cs\npublic class LoanDTOData : IEnumerable<object[]>\n{\n     private IEnumerable<object[]> data => new[]\n     {\n                new object[]\n                {\n                    new LoanDTO\n                    {\n                        LoanType = LoanType.CarLoan,\n                        JobType = JobType.Professional,\n                        LocationType = LocationType.Location1\n                    }\n                },\n                new object[]\n                {\n                    new LoanDTO\n                    {\n                        LoanType = LoanType.CarLoan,\n                        JobType = JobType.Professional,\n                        LocationType = LocationType.Location2\n                    }\n                }\n      };\n\n      IEnumerator IEnumerable.GetEnumerator()\n      {\n            return GetEnumerator();\n      }\n\n      public IEnumerator<object[]> GetEnumerator()\n      {\n            return data.GetEnumerator();\n      }\n}\n\n```", "```cs\n[Theory, ClassData(typeof(LoanDTOData))]\npublic void Test_CalculateLoan_ShouldReturnCorrectRate(LoanDTO loanDTO)\n{\n    Loan loan = carLoanCalculator.CalculateLoan(loanDTO);\n    Assert.NotNull(loan);\n    Assert.InRange(loan.InterestRate, 8, 12);\n}\n```", "```cs\nCREATE TABLE [dbo].[Palindrome](\n    [word] [varchar](50) NOT NULL\n) ;\n\nINSERT INTO [dbo].[Palindrome] ([word]) VALUES ('civic')\nGO\nINSERT INTO [dbo].[Palindrome] ([word]) VALUES ('dad')\nGO\nINSERT INTO [dbo].[Palindrome] ([word]) VALUES ('omo')\nGO\n```", "```cs\npublic class PalindromeChecker\n{\n    public bool IsWordPalindrome(string word)\n    {\n        return word.SequenceEqual(word.Reverse());\n    }\n}\n```", "```cs\npublic class PalindromeCheckerTest\n    {\n        [Theory, SqlServerData(@\".\\sqlexpress\", \"TheoryDb\", \"select word from Palindrome\")]\n        public void Test_IsWordPalindrome_ShouldReturnTrue(string word)\n        {\n            PalindromeChecker palindromeChecker = new PalindromeChecker();\n            Assert.True(palindromeChecker.IsWordPalindrome(word));\n        }\n    }\n```", "```cs\n[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)]\n    public class CsvDataAttribute : DataAttribute\n    {\n        private readonly string filePath;\n        private readonly bool hasHeaders;\n        public CsvDataAttribute(string filePath, bool hasHeaders)\n        {\n            this.filePath = filePath;\n            this.hasHeaders = hasHeaders;\n        }       \n        // To be followed by GetData implementation\n    }\n```", "```cs\npublic override IEnumerable<object[]> GetData(MethodInfo methodInfo)\n{\n    var methodParameters = methodInfo.GetParameters();\n    var parameterTypes = methodParameters.Select(x => x.ParameterType).ToArray();\n    using (var streamReader = new StreamReader(filePath))\n    {\n        if(hasHeaders)\n            streamReader.ReadLine();\n        string csvLine=string.Empty;\n        while ((csvLine = streamReader.ReadLine()) != null)\n        {\n            var csvRow = csvLine.Split(',');\n            yield return ConvertCsv((object[])csvRow, parameterTypes);\n        }\n    }\n}\n\n private static object[] ConvertCsv(IReadOnlyList<object> csvRow, IReadOnlyList<Type> parameterTypes)\n {\n    var convertedObject = new object[parameterTypes.Count];\n    //convert object if integer\n    for (int i = 0; i < parameterTypes.Count; i++)\n      convertedObject[i] = (parameterTypes[i] == typeof(int)) ? Convert.ToInt32(csvRow[i]) : csvRow[i]; \n    return convertedObject;\n }\n```", "```cs\n public class PalindromeCheckerTest\n {\n        [Theory, CsvData(@\"C:\\data.csv\", false)]\n        public void Test_IsWordPalindrome_ShouldReturnTrue(string word)\n        {\n            PalindromeChecker palindromeChecker = new PalindromeChecker();\n            Assert.True(palindromeChecker.IsWordPalindrome(word));\n        }\n }\n```", "```cs\n\npublic int GetGcd(int firstNumber, int secondNumber)\n{\n    if (secondNumber == 0)\n        return firstNumber;    \n    else\n        return GetGcd(secondNumber, firstNumber % secondNumber);    \n}\n```", "```cs\n[Theory, CsvData(@\"C:\\gcd.csv\", false)]\npublic void Test_GetGcd_ShouldRetunTrue(int firstNumber, int secondNumber, int gcd)\n{\n    int gcdValue=GetGcd(firstNumber,secondNumber);\n    Assert.Equal(gcd,gcdValue);\n}\n```"]