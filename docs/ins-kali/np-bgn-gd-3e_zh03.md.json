["```py\n    i2 = np.eye(2)\n    print(i2)\n    ```", "```py\n    [[ 1\\.  0.]\n    [ 0\\.  1.]]\n    ```", "```py\n    np.savetxt(\"eye.txt\", i2)\n    ```", "```py\nimport numpy as np\n\ni2 = np.eye(2)\nprint(i2)\n\nnp.savetxt(\"eye.txt\", i2))\n```", "```py\nAAPL,28-01-2011, ,344.17,344.4,333.53,336.1,21144800\n\n```", "```py\nc,v=np.loadtxt('data.csv', delimiter=',', usecols=(6,7), unpack=True)\n```", "```py\n    from __future__ import print_function\n    import numpy as np\n    c,v=np.loadtxt('data.csv', delimiter=',', usecols=(6,7), unpack=True)\n    vwap = np.average(c, weights=v)\n    print(\"VWAP =\", vwap)\n    ```", "```py\n    VWAP = 350.589549353\n\n    ```", "```py\nprint(\"mean =\", np.mean(c))\n```", "```py\nmean = 351.037666667\n\n```", "```py\nt = np.arange(len(c))\nprint(\"twap =\", np.average(c, weights=t))\n```", "```py\ntwap = 352.428321839\n\n```", "```py\n    h,l=np.loadtxt('data.csv', delimiter=',', usecols=(4,5), unpack=True)\n    ```", "```py\n    print(\"highest =\", np.max(h))\n    print(\"lowest =\", np.min(l))\n    ```", "```py\n    highest = 364.9\n    lowest = 333.53\n\n    ```", "```py\n    print(\"Spread high price\", np.ptp(h))\n    print(\"Spread low price\", np.ptp(l))\n    ```", "```py\n    Spread high price 24.86\n    Spread low price 26.97\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nh,l=np.loadtxt('data.csv', delimiter=',', usecols=(4,5), unpack=True)\nprint(\"highest =\", np.max(h))\nprint(\"lowest =\", np.min(l))\nprint((np.max(h) + np.min(l)) /2)\n\nprint(\"Spread high price\", np.ptp(h))\nprint(\"Spread low price\", np.ptp(l))\n\n```", "```py\n    c=np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\n    ```", "```py\n    print(\"median =\", np.median(c))\n    ```", "```py\n    median = 352.055\n\n    ```", "```py\n    sorted_close = np.msort(c)\n    print(\"sorted =\", sorted_close)\n    ```", "```py\n    N = len(c)\n    print \"middle =\", sorted[(N - 1)/2]\n    ```", "```py\n    middle = 351.99\n\n    ```", "```py\n    $ python\n     >>> import numpy as np\n    >>> help(np.median)\n\n    ```", "```py\n    print(\"average middle =\", (sorted[N /2] + sorted[(N - 1) / 2]) / 2)\n    ```", "```py\n    average middle = 352.055\n\n    ```", "```py\n    print(\"variance =\", np.var(c))\n    ```", "```py\n    variance = 50.1265178889\n\n    ```", "```py\n    print(\"variance from definition =\", np.mean((c - c.mean())**2))\n    ```", "```py\n    variance from definition = 50.1265178889\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nc=np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\nprint(\"median =\", np.median(c))\nsorted = np.msort(c)\nprint(\"sorted =\", sorted)\n\nN = len(c)\nprint(\"middle =\", sorted[(N - 1)/2])\nprint(\"average middle =\", (sorted[N /2] + sorted[(N - 1) / 2]) / 2)\n\nprint(\"variance =\", np.var(c))\nprint(\"variance from definition =\", np.mean((c - c.mean())**2))\n\n```", "```py\n    returns = np.diff( arr ) / arr[ : -1]\n    ```", "```py\n    print(\"Standard deviation =\", np.std(returns))\n    ```", "```py\n    Standard deviation = 0.0129221344368\n\n    ```", "```py\n    logreturns = np.diff(np.log(c))\n    ```", "```py\n    posretindices = np.where(returns > 0)\n    print(\"Indices with positive returns\", posretindices)\n    ```", "```py\n    Indices with positive returns (array([ 0,  1,  4,  5,  6,  7,  9, 10, 11, 12, 16, 17, 18, 19, 21, 22, 23, 25, 28]),)\n\n    ```", "```py\n    annual_volatility = np.std(logreturns)/np.mean(logreturns)\n    annual_volatility = annual_volatility / np.sqrt(1./252.)\n    print(annual_volatility)\n    ```", "```py\n    print(\"Monthly volatility\", annual_volatility * np.sqrt(1./12.))\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nc=np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\n\nreturns = np.diff( c ) / c[ : -1]\nprint(\"Standard deviation =\", np.std(returns))\n\nlogreturns = np.diff( np.log(c) )\n\nposretindices = np.where(returns > 0)\nprint(\"Indices with positive returns\", posretindices)\n\nannual_volatility = np.std(logreturns)/np.mean(logreturns)\nannual_volatility = annual_volatility / np.sqrt(1./252.)\nprint(\"Annual volatility\", annual_volatility)\n\nprint(\"Monthly volatility\", annual_volatility * np.sqrt(1./12.))\n```", "```py\ndates, close=np.loadtxt('data.csv', delimiter=',',\n  usecols=(1,6), unpack=True)\n```", "```py\nValueError: invalid literal for float(): 28-01-2011\n\n```", "```py\n    # Monday 0\n    # Tuesday 1\n    # Wednesday 2\n    # Thursday 3\n    # Friday 4\n    # Saturday 5\n    # Sunday 6\n    def datestr2num(s):\n       return datetime.datetime.strptime(s, \"%d-%m-%Y\").date().weekday()\n    ```", "```py\n    dates, close=np.loadtxt('data.csv', delimiter=',', usecols=(1,6), converters={1: datestr2num}, unpack=True)\n    print \"Dates =\", dates\n    ```", "```py\n    Dates = [ 4\\.  0\\.  1\\.  2\\.  3\\.  4\\.  0\\.  1\\.  2\\.  3\\.  4\\.  0\\.  1\\.  2\\.  3\\.  4\\.  1\\.  2\\.  4\\.  0\\.  1\\.  2\\.  3\\.  4\\.  0\\.  1\\.  2\\.  3\\.  4.]\n\n    ```", "```py\n    averages = np.zeros(5)\n    ```", "```py\n    for i in range(5):\n       indices = np.where(dates == i)\n       prices = np.take(close, indices)\n       avg = np.mean(prices)\n       print(\"Day\", i, \"prices\", prices, \"Average\", avg)\n       averages[i] = avg\n    ```", "```py\n    Day 0 prices [[ 339.32  351.88  359.18  353.21  355.36]] Average 351.79\n    Day 1 prices [[ 345.03  355.2   359.9   338.61  349.31  355.76]] Average 350.635\n    Day 2 prices [[ 344.32  358.16  363.13  342.62  352.12  352.47]] Average 352.136666667\n    Day 3 prices [[ 343.44  354.54  358.3   342.88  359.56  346.67]] Average 350.898333333\n    Day 4 prices [[ 336.1   346.5   356.85  350.56  348.16  360\\.    351.99]] Average 350.022857143\n\n    ```", "```py\n    top = np.max(averages)\n    print(\"Highest average\", top)\n    print(\"Top day of the week\",  np.argmax(averages))\n    bottom = np.min(averages)\n    print(\"Lowest average\", bottom)\n    print(\"Bottom day of the week\",  np.argmin(averages))\n    ```", "```py\n    Highest average 352.136666667\n    Top day of the week 2\n    Lowest average 350.022857143\n    Bottom day of the week 4\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nfrom datetime import datetime\n\n## Monday 0\n## Tuesday 1\n## Wednesday 2\n## Thursday 3\n## Friday 4\n## Saturday 5\n## Sunday 6\ndef datestr2num(s):\n   return datetime.strptime(s, \"%d-%m-%Y\").date().weekday()\n\ndates, close=np.loadtxt('data.csv', delimiter=',', usecols=(1,6), converters={1: datestr2num}, unpack=True)\nprint(\"Dates =\", dates)\n\naverages = np.zeros(5)\n\nfor i in range(5):\n   indices = np.where(dates == i)\n   prices = np.take(close, indices)\n   avg = np.mean(prices)\n   print(\"Day\", i, \"prices\", prices, \"Average\", avg)\n   averages[i] = avg\n\ntop = np.max(averages)\nprint(\"Highest average\", top)\nprint(\"Top day of the week\", np.argmax(averages))\n\nbottom = np.min(averages)\nprint(\"Lowest average\", bottom)\nprint(\"Bottom day of the week\", np.argmin(averages))\n\n```", "```py\n    $ python\n    >>> import numpy as np\n\n    ```", "```py\n    >>> np.datetime64('2015-04-22')\n    numpy.datetime64('2015-04-22')\n\n    ```", "```py\n    >>> np.datetime64('2015-04-22')\n    numpy.datetime64('2015-04-22')\n    >>> np.datetime64('2015-04')\n    numpy.datetime64('2015-04')\n\n    ```", "```py\n    >>> local = np.datetime64('1677-01-01T20:19')\n    >>> local\n    numpy.datetime64('1677-01-01T20:19Z')\n\n    ```", "```py\n    >>> with_offset = np.datetime64('1677-01-01T20:19-0900')\n    >>> with_offset\n    numpy.datetime64('1677-01-02T05:19Z')\n\n    ```", "```py\n    >>> local - with_offset\n    numpy.timedelta64(-540,'m')\n\n    ```", "```py\n    >>> np.arange('2015-04-22', '2015-05-22', 7, dtype='datetime64')\n    array(['2015-04-22', '2015-04-29', '2015-05-06', '2015-05-13', '2015-05-20'], dtype='datetime64[D]')\n\n    ```", "```py\n    close = close[:16]\n    dates = dates[:16]\n    ```", "```py\n    # get first Monday\n    first_monday = np.ravel(np.where(dates == 0))[0]\n    print(\"The first Monday index is\", first_monday)\n    ```", "```py\n    The first Monday index is 1\n\n    ```", "```py\n    # get last Friday\n    last_friday = np.ravel(np.where(dates == 4))[-2]\n    print(\"The last Friday index is\", last_friday)\n    ```", "```py\n    The last Friday index is 15\n\n    ```", "```py\n    weeks_indices = np.arange(first_monday, last_friday + 1)\n    print(\"Weeks indices initial\", weeks_indices)\n    ```", "```py\n    weeks_indices = np.split(weeks_indices, 3)\n    print(\"Weeks indices after split\", weeks_indices)\n    ```", "```py\n    Weeks indices after split [array([1, 2, 3, 4, 5]), array([ 6,  7,  8,  9, 10]), array([11, 12, 13, 14, 15])]\n\n    ```", "```py\n    weeksummary = np.apply_along_axis(summarize, 1, weeks_indices, open, high, low, close)\n    print(\"Week summary\", weeksummary)\n    ```", "```py\n    def summarize(a, o, h, l, c):\n        monday_open = o[a[0]]\n        week_high = np.max( np.take(h, a) )\n        week_low = np.min( np.take(l, a) )\n        friday_close = c[a[-1]]\n\n        return(\"APPL\", monday_open, week_high, week_low, friday_close)\n    ```", "```py\n    Week summary [['APPL' '335.8' '346.7' '334.3' '346.5']\n     ['APPL' '347.89' '360.0' '347.64' '356.85']\n     ['APPL' '356.79' '364.9' '349.52' '350.56']]\n\n    ```", "```py\n    np.savetxt(\"weeksummary.csv\", weeksummary, delimiter=\",\", fmt=\"%s\")\n    ```", "```py\n    $ cat weeksummary.csv\n    APPL,335.8,346.7,334.3,346.5\n    APPL,347.89,360.0,347.64,356.85\n    APPL,356.79,364.9,349.52,350.56\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nfrom datetime import datetime\n\n## Monday 0\n## Tuesday 1\n## Wednesday 2\n## Thursday 3\n## Friday 4\n## Saturday 5\n## Sunday 6\ndef datestr2num(s):\n   return datetime.strptime(s, \"%d-%m-%Y\").date().weekday()\n\ndates, open, high, low, close=np.loadtxt('data.csv', delimiter=',', usecols=(1, 3, 4, 5, 6), converters={1: datestr2num}, unpack=True)\nclose = close[:16]\ndates = dates[:16]\n\n## get first Monday\nfirst_monday = np.ravel(np.where(dates == 0))[0]\nprint(\"The first Monday index is\", first_monday)\n\n## get last Friday\nlast_friday = np.ravel(np.where(dates == 4))[-1]\nprint(\"The last Friday index is\", last_friday)\n\nweeks_indices = np.arange(first_monday, last_friday + 1)\nprint(\"Weeks indices initial\", weeks_indices)\n\nweeks_indices = np.split(weeks_indices, 3)\nprint(\"Weeks indices after split\", weeks_indices)\n\ndef summarize(a, o, h, l, c):\n    monday_open = o[a[0]]\n    week_high = np.max( np.take(h, a) )\n    week_low = np.min( np.take(l, a) )\n    friday_close = c[a[-1]]\n\n    return(\"APPL\", monday_open, week_high, week_low, friday_close)\n\nweeksummary = np.apply_along_axis(summarize, 1, weeks_indices, open, high, low, close)\nprint(\"Week summary\", weeksummary)\n\nnp.savetxt(\"weeksummary.csv\", weeksummary, delimiter=\",\", fmt=\"%s\")\n```", "```py\n    N = 5\n    h = h[-N:]\n    l = l[-N:]\n    ```", "```py\n    previousclose = c[-N -1: -1]\n    ```", "```py\n    h \u2013 l\n\n    ```", "```py\n    h \u2013 previousclose\n\n    ```", "```py\n    previousclose \u2013 l\n\n    ```", "```py\n    truerange = np.maximum(h - l, h - previousclose, previousclose - l)\n    ```", "```py\n    atr = np.zeros(N)\n    ```", "```py\n    atr[0] = np.mean(truerange)\n    ```", "```py\n    for i in range(1, N):\n       atr[i] = (N - 1) * atr[i - 1] + truerange[i]\n       atr[i] /= N\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nh, l, c = np.loadtxt('data.csv', delimiter=',', usecols=(4, 5, 6), unpack=True)\n\nN = 5\nh = h[-N:]\nl = l[-N:]\n\nprint(\"len(h)\", len(h), \"len(l)\", len(l))\nprint(\"Close\", c)\npreviousclose = c[-N -1: -1]\n\nprint(\"len(previousclose)\", len(previousclose))\nprint(\"Previous close\", previousclose)\ntruerange = np.maximum(h - l, h - previousclose, previousclose - l)\n\nprint(\"True range\", truerange)\n\natr = np.zeros(N)\n\natr[0] = np.mean(truerange)\n\nfor i in range(1, N):\n   atr[i] = (N - 1) * atr[i - 1] + truerange[i]\n   atr[i] /= N\n\nprint(\"ATR\", atr)\n```", "```py\n    N = 5\n    weights = np.ones(N) / N\n    print(\"Weights\", weights)\n    ```", "```py\n    Weights [ 0.2  0.2  0.2  0.2  0.2]\n\n    ```", "```py\n    c = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\n    sma = np.convolve(weights, c)[N-1:-N+1]\n    ```", "```py\n    c = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\n    sma = np.convolve(weights, c)[N-1:-N+1]\n    t = np.arange(N - 1, len(c))\n    plt.plot(t, c[N-1:], lw=1.0, label=\"Data\")\n    plt.plot(t, sma, '--', lw=2.0, label=\"Moving average\")\n    plt.title(\"5 Day Moving Average\")\n    plt.xlabel(\"Days\")\n    plt.ylabel(\"Price ($)\")\n    plt.grid()\n    plt.legend()\n    plt.show()\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 5\n\nweights = np.ones(N) / N\nprint(\"Weights\", weights)\n\nc = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\nsma = np.convolve(weights, c)[N-1:-N+1]\nt = np.arange(N - 1, len(c))\nplt.plot(t, c[N-1:], lw=1.0, label=\"Data\")\nplt.plot(t, sma, '--', lw=2.0, label=\"Moving average\")\nplt.title(\"5 Day Moving Average\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Price ($)\")\nplt.grid()\nplt.legend()\nplt.show()\n```", "```py\nx = np.arange(5)\nprint(\"Exp\", np.exp(x))\n```", "```py\nExp [  1\\.           2.71828183   7.3890561   20.08553692  54.59815003]\n\n```", "```py\nprint(\"Linspace\", np.linspace(-1, 0, 5))\n```", "```py\nLinspace [-1\\.   -0.75 -0.5  -0.25  0\\.  ]\n\n```", "```py\n    N = 5\n    weights = np.exp(np.linspace(-1., 0., N))\n    ```", "```py\n    weights /= weights.sum()\n    print(\"Weights\", weights)\n    ```", "```py\n    Weights [ 0.11405072  0.14644403  0.18803785  0.24144538  0.31002201]\n\n    ```", "```py\n    c = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\n    ema = np.convolve(weights, c)[N-1:-N+1]\n    t = np.arange(N - 1, len(c))\n    plt.plot(t, c[N-1:], lw=1.0, label='Data')\n    plt.plot(t, ema, '--', lw=2.0, label='Exponential Moving Average')\n    plt.title('5 Days Exponential Moving Average')\n    plt.xlabel('Days')\n    plt.ylabel('Price ($)')\n    plt.legend()\n    plt.grid()\n    plt.show()\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(5)\nprint(\"Exp\", np.exp(x))\nprint(\"Linspace\", np.linspace(-1, 0, 5))\n\n## Calculate weights\nN = 5\nweights = np.exp(np.linspace(-1., 0., N))\n\n## Normalize weights\nweights /= weights.sum()\nprint(\"Weights\", weights)\n\nc = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\nema = np.convolve(weights, c)[N-1:-N+1]\nt = np.arange(N - 1, len(c))\nplt.plot(t, c[N-1:], lw=1.0, label='Data')\nplt.plot(t, ema, '--', lw=2.0, label='Exponential Moving Average')\nplt.title('5 Days Exponential Moving Average')\nplt.xlabel('Days')\nplt.ylabel('Price ($)')\nplt.legend()\nplt.grid()\nplt.show()\n```", "```py\n    deviation = []\n    C = len(c)\n\n    for i in range(N - 1, C):\n       if i + N < C:\n          dev = c[i: i + N]\n       else:\n          dev = c[-N:]\n\n       averages = np.zeros(N)\n       averages.fill(sma[i - N - 1])\n       dev = dev - averages\n       dev = dev ** 2\n       dev = np.sqrt(np.mean(dev))\n       deviation.append(dev)\n\n    deviation = 2 * np.array(deviation)\n    print(len(deviation), len(sma))\n    upperBB = sma + deviation\n    lowerBB = sma - deviation\n    ```", "```py\n    t = np.arange(N - 1, C)\n    plt.plot(t, c_slice, lw=1.0, label='Data')\n    plt.plot(t, sma, '--', lw=2.0, label='Moving Average')\n    plt.plot(t, upperBB, '-.', lw=3.0, label='Upper Band')\n    plt.plot(t, lowerBB, ':', lw=4.0, label='Lower Band')\n    plt.title('Bollinger Bands')\n    plt.xlabel('Days')\n    plt.ylabel('Price ($)')\n    plt.grid()\n    plt.legend()\n    plt.show()\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 5\n\nweights = np.ones(N) / N\nprint(\"Weights\", weights)\n\nc = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\nsma = np.convolve(weights, c)[N-1:-N+1]\ndeviation = []\nC = len(c)\n\nfor i in range(N - 1, C):\n   if i + N < C:\n      dev = c[i: i + N]\n   else:\n      dev = c[-N:]\n\n   averages = np.zeros(N)\n averages.fill(sma[i - N - 1])\n   dev = dev - averages\n   dev = dev ** 2\n   dev = np.sqrt(np.mean(dev))\n   deviation.append(dev)\n\ndeviation = 2 * np.array(deviation)\nprint(len(deviation), len(sma))\nupperBB = sma + deviation\nlowerBB = sma - deviation\n\nc_slice = c[N-1:]\nbetween_bands = np.where((c_slice < upperBB) & (c_slice > lowerBB))\n\nprint(lowerBB[between_bands])\nprint(c[between_bands])\nprint(upperBB[between_bands])\nbetween_bands = len(np.ravel(between_bands))\nprint(\"Ratio between bands\", float(between_bands)/len(c_slice))\n\nt = np.arange(N - 1, C)\nplt.plot(t, c_slice, lw=1.0, label='Data')\nplt.plot(t, sma, '--', lw=2.0, label='Moving Average')\nplt.plot(t, upperBB, '-.', lw=3.0, label='Upper Band')\nplt.plot(t, lowerBB, ':', lw=4.0, label='Lower Band')\nplt.title('Bollinger Bands')\nplt.xlabel('Days')\nplt.ylabel('Price ($)')\nplt.grid()\nplt.legend()\nplt.show()\n```", "```py\n    b = c[-N:]\n    b = b[::-1]\n    print(\"b\", x)\n    ```", "```py\n    b [ 351.99  346.67  352.47  355.76  355.36]\n\n    ```", "```py\n    A = np.zeros((N, N), float)\n    Print(\"Zeros N by N\", A)\n    ```", "```py\n    Zeros N by N [[ 0\\.  0\\.  0\\.  0\\.  0.]\n     [ 0\\.  0\\.  0\\.  0\\.  0.]\n     [ 0\\.  0\\.  0\\.  0\\.  0.]\n     [ 0\\.  0\\.  0\\.  0\\.  0.]\n     [ 0\\.  0\\.  0\\.  0\\.  0.]]\n\n    ```", "```py\n    for i in range(N):\n       A[i, ] = c[-N - 1 - i: - 1 - i]\n\n       print(\"A\", A)\n    ```", "```py\n    A [[ 360\\.    355.36  355.76  352.47  346.67]\n     [ 359.56  360\\.    355.36  355.76  352.47]\n     [ 352.12  359.56  360\\.    355.36  355.76]\n     [ 349.31  352.12  359.56  360\\.    355.36]\n     [ 353.21  349.31  352.12  359.56  360\\.  ]]\n\n    ```", "```py\n    (x, residuals, rank, s) = np.linalg.lstsq(A, b)\n\n    print(x, residuals, rank, s)\n    ```", "```py\n    [ 0.78111069 -1.44411737  1.63563225 -0.89905126  0.92009049] [] 5 [  1.77736601e+03   1.49622969e+01   8.75528492e+00   5.15099261e+00   1.75199608e+00]\n\n    ```", "```py\n    print(np.dot(b, x))\n    ```", "```py\n    357.939161015\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nN = 5\n\nc = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\n\nb = c[-N:]\nb = b[::-1]\nprint(\"b\", b)\n\nA = np.zeros((N, N), float)\nprint(\"Zeros N by N\", A)\n\nfor i in range(N):\n   A[i, ] = c[-N - 1 - i: - 1 - i]\n\nprint(\"A\", A)\n\n(x, residuals, rank, s) = np.linalg.lstsq(A, b)\n\nprint(x, residuals, rank, s)\n\nprint(np.dot(b, x))\n\n```", "```py\n    h, l, c = np.loadtxt('data.csv', delimiter=',', usecols=(4, 5, 6), unpack=True)\n\n    pivots = (h + l + c) / 3\n    print(\"Pivots\", pivots)\n    ```", "```py\n    def fit_line(t, y):\n       A = np.vstack([t, np.ones_like(t)]).T\n       return np.linalg.lstsq(A, y)[0]\n    ```", "```py\n    t = np.arange(len(c))\n    sa, sb = fit_line(t, pivots - (h - l))\n    ra, rb = fit_line(t, pivots + (h - l))\n    support = sa * t + sb\n    resistance = ra * t + rb\n    ```", "```py\n    condition = (c > support) & (c < resistance)\n    print(\"Condition\", condition)\n    between_bands = np.where(condition)\n    ```", "```py\n    Condition [False False  True  True  True  True  True False False  True False False\n     False False False  True False False False  True  True  True  True False False  True  True  True False  True]\n\n    ```", "```py\n    print(support[between_bands])\n    print( c[between_bands])\n    print( resistance[between_bands])\n    ```", "```py\n    between_bands = len(np.ravel(between_bands))\n    print(\"Number points between bands\", between_bands)\n    print(\"Ratio between bands\", float(between_bands)/len(c))\n    ```", "```py\n    Number points between bands 15\n    Ratio between bands 0.5\n\n    ```", "```py\n    print(\"Tomorrows support\", sa * (t[-1] + 1) + sb)\n    print(\"Tomorrows resistance\", ra * (t[-1] + 1) + rb)\n    ```", "```py\n    Tomorrows support 349.389157088\n    Tomorrows resistance 360.749340996\n\n    ```", "```py\n    a1 = c[c > support]\n    a2 = c[c < resistance]\n    print(\"Number of points between bands 2nd approach\" ,len(np.intersect1d(a1, a2)))\n    ```", "```py\n    Number of points between bands 2nd approach 15\n\n    ```", "```py\n    plt.plot(t, c, label='Data')\n    plt.plot(t, support, '--', lw=2.0, label='Support')\n    plt.plot(t, resistance, '-.', lw=3.0, label='Resistance')\n    plt.title('Trend Lines')\n    plt.xlabel('Days')\n    plt.ylabel('Price ($)')\n    plt.grid()\n    plt.legend()\n    plt.show()\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef fit_line(t, y):\n   ''' Fits t to a line y = at + b '''\n   A = np.vstack([t, np.ones_like(t)]).T\n\n   return np.linalg.lstsq(A, y)[0]\n\n## Determine pivots\nh, l, c = np.loadtxt('data.csv', delimiter=',', usecols=(4, 5, 6), unpack=True)\n\npivots = (h + l + c) / 3\nprint(\"Pivots\", pivots)\n\n## Fit trend lines\nt = np.arange(len(c))\nsa, sb = fit_line(t, pivots - (h - l))\nra, rb = fit_line(t, pivots + (h - l))\n\nsupport = sa * t + sb\nresistance = ra * t + rb\ncondition = (c > support) & (c < resistance)\nprint(\"Condition\", condition)\nbetween_bands = np.where(condition)\nprint(support[between_bands])\nprint(c[between_bands])\nprint(resistance[between_bands])\nbetween_bands = len(np.ravel(between_bands))\nprint(\"Number points between bands\", between_bands)\nprint(\"Ratio between bands\", float(between_bands)/len(c))\n\nprint(\"Tomorrows support\", sa * (t[-1] + 1) + sb)\nprint(\"Tomorrows resistance\", ra * (t[-1] + 1) + rb)\n\na1 = c[c > support]\na2 = c[c < resistance]\nprint(\"Number of points between bands 2nd approach\" ,len(np.intersect1d(a1, a2)))\n\n## Plotting\nplt.plot(t, c, label='Data')\nplt.plot(t, support, '--', lw=2.0, label='Support')\nplt.plot(t, resistance, '-.', lw=3.0, label='Resistance')\nplt.title('Trend Lines')\nplt.xlabel('Days')\nplt.ylabel('Price ($)')\nplt.grid()\nplt.legend()\nplt.show()\n```", "```py\n    a = np.arange(5)\n    print(\"a =\", a)\n    print(\"Clipped\", a.clip(1, 2))\n    ```", "```py\n    a = [0 1 2 3 4]\n    Clipped [1 1 2 2 2]\n\n    ```", "```py\n    a = np.arange(4)\n    print(a)\n    print(\"Compressed\", a.compress(a > 2))\n    ```", "```py\n    [0 1 2 3]\n    Compressed [3]\n\n    ```", "```py\n    b = np.arange(1, 9)\n    print(\"b =\", b)\n    print(\"Factorial\", b.prod())\n    ```", "```py\n    b = [1 2 3 4 5 6 7 8]\n    Factorial 40320\n\n    ```", "```py\n    print(\"Factorials\", b.cumprod())\n    ```", "```py\n    Factorials [    1     2     6    24   120   720  5040 40320]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\na = np.arange(5)\nprint(\"a =\", a)\nprint(\"Clipped\", a.clip(1, 2))\n\na = np.arange(4)\nprint(a)\nprint(\"Compressed\", a.compress(a > 2))\n\nb = np.arange(1, 9)\nprint(\"b =\", b)\nprint(\"Factorial\", b.prod())\n\nprint(\"Factorials\", b.cumprod())\n\n```", "```py\n    estimates = np.zeros((len(c), 3))\n    ```", "```py\n    for i in xrange(len(c)):\n       a = c.copy()\n       a[i] = np.nan\n\n       estimates[i,] = [np.nanmean(a), np.nanvar(a), np.nanstd(a)]\n    ```", "```py\n    print(\"Estimates variance\", estimates.var(axis=0))\n    ```", "```py\n    Estimates variance [ 0.05960347  3.63062943  0.01868965]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nc = np.loadtxt('data.csv', delimiter=',', usecols=(6,), unpack=True)\n\n## Initialize estimates array\nestimates = np.zeros((len(c), 3))\n\nfor i in xrange(len(c)):\n   # Create a temporary copy and omit one value\n   a = c.copy()\n   a[i] = np.nan\n\n   # Compute estimates\n   estimates[i,] = [np.nanmean(a), np.nanvar(a), np.nanstd(a)]\n\nprint(\"Estimates variance\", estimates.var(axis=0))\n```"]