["```java\njdk.certpath.disabledAlgorithms=MD2\n\n```", "```java\njdk.tls.disabledAlgorithms=MD5, SHA1, RSA keySize < 2048\n\n```", "```java\njava -D jsse.enableSNIExtension=true ApplicationName\n\n```", "```java\nSystem.setProperty(\"jsse.enableSNIExtension\", \"true\");\n\n```", "```java\nCREATE TABLE COLLEAGUES (\n\"ID\" INTEGER not null primary key,\n\"FIRSTNAME\" VARCHAR(30),\n\"LASTNAME\" VARCHAR(30),\n\"TITLE\" VARCHAR(10),\n\"DEPARTMENT\" VARCHAR(20),\n\"EMAIL\" VARCHAR(60)\n);\nINSERT INTO COLLEAGUES VALUES (1,'Mike','Johnson','Manager','Engineering','mike.johnson@foo.com');\nINSERT INTO COLLEAGUES VALUES\n(2, 'James', 'Still', 'Engineer', 'Engineering', 'james.still@foo.com');\nINSERT INTO COLLEAGUES VALUES\n(3, 'Jerilyn', 'Stall', 'Manager', 'Marketing', 'jerilyn.stall@foo.com');\nINSERT INTO COLLEAGUES VALUES\n(4, 'Jonathan', 'Smith', 'Manager', 'Marketing', 'jonathan.smith@foo.com');\n\n```", "```java\n    String databaseUrl = \"jdbc:derby://localhost:1527/contact\";\n    String username = \"userName\";\n    String password = \"password\";\n    RowSetFactory rowSetFactory = null;\n    try {\n    rowSetFactory = RowSetProvider.newFactory(\"com.sun.rowset.RowSetFactoryImpl\", null);\n    }\n    catch (SQLException ex) {\n    ex.printStackTrace();\n    return;\n    }\n\n    ```", "```java\n    try (JdbcRowSet rowSet = rowSetFactory.createJdbcRowSet();) {\n    rowSet.setUrl(databaseUrl);\n    rowSet.setUsername(username);\n    rowSet.setPassword(password);\n    rowSet.setCommand(\"SELECT * FROM COLLEAGUES\");\n    rowSet.execute();\n    while (rowSet.next()) {\n    System.out.println(rowSet.getInt(\"ID\") + \" - \"\n    + rowSet.getString(\"FIRSTNAME\"));\n    }\n    }\n    catch (SQLException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\nrowSetFactory = RowSetProvider.newFactory(\"com.sun.rowset.RowSetFactoryImpl\", null);\n\n```", "```java\n    try {\n    Connection con = DriverManager.getConnection(\n    \"jdbc:derby://localhost:1527/contact\", \"userName\", \"password\");\n    System.out.println(\"Schema: \" + con.getSchema());\n    System.out.println(\"Auto Generated Keys: \" + metaData.generatedKeyAlwaysReturned());\n    }\n    catch (SQLException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\ntry {\nConnection con = DriverManager.getConnection(\n\"jdbc:derby://localhost:1527/contact\", \"userName\", \"password\");\nDatabaseMetaData metaData = con.getMetaData();\nResultSet resultSet = metaData.getPseudoColumns(\"\", \"schemaName\", \"tableName\", \"\");\nwhile (rs.next()) {\nSystem.out.println(\nresultSet.getString(\"TABLE_SCHEM \")+\" - \"+\nresultSet.getString(\"COLUMN_NAME \"));\n}\n}\ncatch (SQLException ex) {\nex.printStackTrace();\n}\n\n```", "```java\ntry {\nConnection conn = DriverManager.getConnection(\n\"...\", \"username\", \"password\");\nString query = \"{CALL GETDATE(?,?)}\";\nCallableStatement callableStatement = (CallableStatement) conn.prepareCall(query);\ncallableStatement.setInt(1,recordIdentifier);\ncallableStatement.registerOutParameter(1, Types.DATE);\ncallableStatement.executeQuery();\ndate = callableStatement.getObject(2,Date.class));\n}\ncatch (SQLException ex) {\nex.printStackTrace();\n}\n\n```", "```java\ntry {\nDriver driver = DriverManager.getDriver(\"jdbc:derby://localhost:1527\");\nSystem.out.println(\"Parent Logger\" + driver.getParentLogger());\n}\ncatch (SQLException ex) {\nex.printStackTrace();\n}\n\n```", "```java\n    public class SimpleConstraints implements AlgorithmConstraints {\n    public boolean permits(Set<CryptoPrimitive> primitives,\n    String algorithm, AlgorithmParameters parameters) {\n    return permits(primitives, algorithm, null, parameters);\n    }\n    public boolean permits(Set<CryptoPrimitive> primitives, Key key) {\n    return permits(primitives, null, key, null);\n    }\n    public boolean permits(Set<CryptoPrimitive> primitives,\n    String algorithm, Key key, AlgorithmParameters parameters) {\n    if (algorithm == null) algorithm = key.getAlgorithm();\n    if (algorithm.indexOf(\"RSA\") == -1) return false;\n    if (key != null) {\n    RSAKey rsaKey = (RSAKey)key;\n    int size = rsaKey.getModulus().bitLength();\n    if (size < 2048) return false;\n    }\n    return true;\n    }\n    }\n\n    ```", "```java\n    try {\n    SSLServerSocketFactory sslServerSocketFactory =\n    (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n    SSLServerSocket sslServerSocket =\n    (SSLServerSocket) sslServerSocketFactory.createServerSocket(9999);\n    System.out.println(\"Waiting for a client ...\");\n    SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n    }\n    catch (Exception exception) {\n    exception.printStackTrace();\n    }\n\n    ```", "```java\n    SSLParameters parameters = sslSocket.getSSLParameters();\n    parameters.setAlgorithmConstraints (new SimpleConstraints());\n    String endPoint = parameters.getEndpointIdentificationAlgorithm();\n    System.out.println(\"End Point: \" + endPoint);\n\n    ```", "```java\n    System.out.println(\"Local Supported Signature Algorithms\");\n    if (sslSocket.getSession() instanceof ExtendedSSLSession) {\n    ExtendedSSLSession extendedSSLSession =\n    (ExtendedSSLSession) sslSocket.getSession();\n    ExtendedSSLSession interfaceusingString algorithms[] =\n    extendedSSLSession.getLocalSupportedSignatureAlgorithms();\n    for (String algorithm : algorithms) {\n    System.out.println(\"Algorithm: \" + algorithm);\n    }\n    }\n\n    ```", "```java\n    System.out.println(\"Peer Supported Signature Algorithms\");\n    if (sslSocket.getSession() instanceof ExtendedSSLSession) {\n    String algorithms[] = ((ExtendedSSLSession) sslSocket.getSession()).getPeerSupportedSignatureAlgorithms();\n    for (String algorithm : algorithms) {\n    System.out.println(\"Algorithm: \" + algorithm);\n    }\n    }\n\n    ```", "```java\n    InputStream inputstream = sslSocket.getInputStream();\n    InputStreamReader inputstreamreader = new InputStreamReader(inputstream);\n    BufferedReader bufferedreader = new BufferedReader (inputstreamreader);\n\n    ```", "```java\n    String stringline = null;\n    while ((stringline = bufferedreader.readLine()) != null) {\n    System.out.println(string);\n    System.out.flush();\n    }\n\n    ```", "```java\n    keytool -genkey -keystore mySrvKeystore -keyalg RSA\n\n    ```", "```java\n    java -Djavax.net.ssl.keyStore=mySrvKeystore\n    Djavax.net.ssl.keyStorePassword=password package.EchoServer\n\n    ```", "```java\n    try {\n    SSLSocketFactory sslSocketFactory =\n    (SSLSocketFactory) SSLSocketFactory.getDefault();\n    SSLSocket sslSocket = (SSLSocket)\n    sslSocketFactory.createSocket(\"localhost\", 9999);\n    InputStreamReader inputStreamReader =\n    new InputStreamReader(System.in);\n    BufferedReader bufferedReader =\n    new BufferedReader(inputStreamReader);\n    OutputStream outputStream = sslSocket.getOutputStream();\n    OutputStreamWriter outputStreamWriter =\n    new OutputStreamWriter(outputStream);\n    BufferedWriter bufferedwriter =\n    new BufferedWriter(outputStreamWriter);\n    String line = null;\n    while ((line = bufferedReader.readLine()) != null) {\n    ExtendedSSLSession interfaceusingbufferedwriter.write(line + '\\n');\n    bufferedwriter.flush();\n    }\n    }\n    catch (Exception exception) {\n    exception.printStackTrace();\n    }\n\n    ```", "```java\n    java -Djavax.net.ssl.trustStore=mySrvKeystore\n    -Djavax.net.ssl.trustStorePassword=password package.EchoClient\n\n    ```", "```java\n    public static void main(String[] args) {\n    RuntimeMXBean mxBean = ManagementFactory.getPlatformMXBean(RuntimeMXBean.class);\n    System.out.println(\"JVM Name: \" + mxBean.getName());\n    System.out.println(\"JVM Specification Name: \" + mxBean.getSpecName());\n    System.out.println(\"JVM Specification Version: \" + mxBean.getSpecVersion());\n    System.out.println(\"JVM Implementation Name: \" + mxBean.getVmName());\n    System.out.println(\"JVM Implementation Vendor: \" + mxBean.getVmVendor());\n    System.out.println(\"JVM Implementation Version: \" + mxBean.getVmVersion());\n    }\n\n    ```", "```java\nList<OperatingSystemMXBean> list =\nManagementFactory.getPlatformMXBeans(OperatingSystemMXBean.class);\nfor (OperatingSystemMXBean bean : list) {\nSystem.out.println(\"Operating System Name: \" + bean.getName());\nSystem.out.println(\"Operating System Architecture: \" + bean.getArch());\nSystem.out.println(\"Operating System Version: \" + bean.getVersion());\n}\n\n```", "```java\n    File commands = new File(\"C:/Projects/ProcessCommands.txt\");\n    File output = new File(\"C:/Projects/ProcessLog.txt\");\n    File errors = new File(\"C:/Projects/ErrorLog.txt\");\n\n    ```", "```java\n    ProcessBuilder pb = new ProcessBuilder(\"cmd\");\n    System.out.println(pb.redirectInput());\n    System.out.println(pb.redirectOutput());\n    System.out.println(pb.redirectError());\n\n    ```", "```java\n    pb.redirectInput(commands);\n    pb.redirectError(errors);\n    pb.redirectOutput(output);\n    System.out.println(pb.redirectInput());\n    System.out.println(pb.redirectOutput());\n    System.out.println(pb.redirectError());\n\n    ```", "```java\n    pb.start();\n\n    ```", "```java\npb.redirectError(Redirect.appendTo(errors));\n\n```", "```java\npb.inheritIO()\n\n```", "```java\npb.redirectInput(Redirect.INHERIT)\npb.redirectOutput(Redirect.INHERIT)\npb.redirectError(Redirect.INHERIT)\n\n```", "```java\n    public class JNLPAppletExample extends Applet {\n    TextField subtotal = new TextField(10);\n    TextField taxRate = new TextField(10);\n    Button calculate = new Button(\"Calculate\");\n    TextArea grandTot = new TextArea(\"Total = $\", 2, 15, TextArea.SCROLLBARS_NONE);\n    @Override\n    public void init() {\n    this.setLayout(new GridLayout(3,2));\n    this.add(new Label(\"Subtotal = \"));\n    this.add(subtotal);\n    this.add(new Label(\"Tax Rate = \"));\n    this.add(taxRate);\n    this.add(calculate);\n    grandTot.setEditable(false);\n    this.add(grandTot);\n    calculate.addActionListener(new CalcListener());\n    }\n    class CalcListener implements ActionListener {\n    public void actionPerformed(ActionEvent event) {\n    JNLP fileembedding, in HTML pagedouble subTot;\n    double tax;\n    double grandTot;\n    subTot = validateSubTot(subtotal.getText());\n    tax = validateSubTot(taxRate.getText());\n    grandTot = calculateTotal(subTot, tax);\n    JNLPAppletExample.this.grandTot.setText(\"Total = $\" + grandTot);\n    }\n    }\n    double validateSubTot(String s) {\n    double answer;\n    Double d;\n    try {\n    d = new Double(s);\n    answer = d.doubleValue();\n    }\n    catch (NumberFormatException e) {\n    answer = Double.NaN;\n    }\n    return answer;\n    }\n    double calculateTotal(double subTot, double taxRate) {\n    double grandTotal;\n    taxRate = taxRate / 100;\n    grandTotal = (subTot * taxRate) + subTot;\n    return grandTotal;\n    }\n    }\n\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <jnlp href=\"http://JNLPExample.jnlp\">\n    <information>\n    <title>Embedded JNLP File</title>\n    <vendor>Sample Vendor</vendor>\n    </information>\n    <resources>\n    <j2se version=\"7\" />\n    <jar href=\"http://JNLPAppletExample.jar\"\n    main=\"true\" />\n    </resources>\n    <applet-desc\n    name=\"Embedded JNLP Example\"\n    main-class=\"packt.JNLPAppletExample\"\n    width=\"500\"\n    height=\"500\">\n    </applet-desc>\n    <update check=\"background\"/>\n    </jnlp>\n\n    ```", "```java\n    <HTML>\n    <HEAD>\n    <TITLE>Embedded JNLP File Example</TITLE>\n    </HEAD>\n    <BODY>\n    <H3>Embedded JNLP Applet</H3>\n    <script src=\"img/deployJava.js\"></script>\n    <script>\n    var jnlpFile = \"http://JNLPExample.jnlp\";\n    deployJava.createWebStartLaunchButtonEx(jnlpFile);\n    </script>\n    <script>\n    var attributes = {} ;\n    var parameters = {jnlp_href: 'JNLPExample.jnlp',\n    jnlp_embedded: 'PD94bWw...'};\n    deployJava.runApplet(attributes, parameters, '7');\n    </script>\n    </BODY>\n    </HTML>\n\n    ```", "```java\n<script src=\"img/deployJava.js\"></script>\n<a href=\"javascript:deployJava.launchWebStartApplication('JNLPExample.jnlp');\">Launch</a>\n</script>\n\n```"]