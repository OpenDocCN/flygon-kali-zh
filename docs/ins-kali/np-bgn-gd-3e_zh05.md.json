["```py\n    A = np.mat('1 2 3; 4 5 6; 7 8 9')\n    print(\"Creation from string\", A)\n    ```", "```py\n    Creation from string [[1 2 3]\n     [4 5 6]\n     [7 8 9]]\n\n    ```", "```py\n    print(\"transpose A\", A.T)\n    ```", "```py\n    transpose A [[1 4 7]\n     [2 5 8]\n     [3 6 9]]\n\n    ```", "```py\n    print(\"Inverse A\", A.I)\n    ```", "```py\n    Inverse A [[ -4.50359963e+15   9.00719925e+15  -4.50359963e+15]\n     [  9.00719925e+15  -1.80143985e+16   9.00719925e+15]\n     [ -4.50359963e+15   9.00719925e+15  -4.50359963e+15]]\n\n    ```", "```py\n    print(\"Creation from array\", np.mat(np.arange(9).reshape(3, 3)))\n    ```", "```py\n    Creation from array [[0 1 2]\n     [3 4 5]\n     [6 7 8]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.mat('1 2 3; 4 5 6; 7 8 9')\nprint(\"Creation from string\", A)\nprint(\"transpose A\", A.T)\nprint(\"Inverse A\", A.I)\nprint(\"Check Inverse\", A * A.I)\n\nprint(\"Creation from array\", np.mat(np.arange(9).reshape(3, 3)))\n```", "```py\n    A = np.eye(2)\n    print(\"A\", A)\n    ```", "```py\n    A [[ 1\\.  0.]\n     [ 0\\.  1.]]\n\n    ```", "```py\n    B = 2 * A\n    print(\"B\", B)\n    ```", "```py\n    B [[ 2\\.  0.]\n     [ 0\\.  2.]]\n\n    ```", "```py\n    print(\"Compound matrix\\n\", np.bmat(\"A B; A B\"))\n    ```", "```py\n    Compound matrix\n    [[ 1\\.  0\\.  2\\.  0.]\n     [ 0\\.  1\\.  0\\.  2.]\n     [ 1\\.  0\\.  2\\.  0.]\n     [ 0\\.  1\\.  0\\.  2.]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.eye(2)\nprint(\"A\", A)\nB = 2 * A\nprint(\"B\", B)\nprint(\"Compound matrix\\n\", np.bmat(\"A B; A B\"))\n```", "```py\n    def ultimate_answer(a):\n    ```", "```py\n    result = np.zeros_like(a)\n    ```", "```py\n    def ultimate_answer(a):\n       result = np.zeros_like(a)\n       result.flat = 42\n       return result\n    ```", "```py\n    ufunc = np.frompyfunc(ultimate_answer, 1, 1)\n    print(\"The answer\", ufunc(np.arange(4)))\n    ```", "```py\n    The answer [42 42 42 42]\n\n    ```", "```py\n    print(\"The answer\", ufunc(np.arange(4).reshape(2, 2)))\n    ```", "```py\n    The answer [[42 42]\n     [42 42]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\ndef ultimate_answer(a):\n   result = np.zeros_like(a)\n   result.flat = 42\n   return result\n\nufunc = np.frompyfunc(ultimate_answer, 1, 1)\nprint(\"The answer\", ufunc(np.arange(4)))\n\nprint(\"The answer\", ufunc(np.arange(4).reshape(2, 2)))\n```", "```py\n    a = np.arange(9)\n    print(\"Reduce\", np.add.reduce(a))\n    ```", "```py\n    Reduce 36\n\n    ```", "```py\n    print(\"Accumulate\", np.add.accumulate(a))\n    ```", "```py\n    Accumulate [ 0  1  3  6 10 15 21 28 36]\n\n    ```", "```py\n    print(\"Reduceat\", np.add.reduceat(a, [0, 5, 2, 7]))\n    ```", "```py\n    Reduceat [10  5 20 15]\n\n    ```", "```py\n    print(\"Reduceat step I\", np.add.reduce(a[0:5]))\n    ```", "```py\n    Reduceat step I 10\n\n    ```", "```py\n    print(\"Reduceat step II\", a[5])\n    ```", "```py\n    Reduceat step II 5\n\n    ```", "```py\n    print(\"Reduceat step III\", np.add.reduce(a[2:7]))\n    ```", "```py\n    Reduceat step III 20\n\n    ```", "```py\n    print(\"Reduceat step IV\", np.add.reduce(a[7:]))\n    ```", "```py\n    Reduceat step IV 15\n\n    ```", "```py\n    print(\"Outer\", np.add.outer(np.arange(3), a))\n    ```", "```py\n    Outer [[ 0  1  2  3  4  5  6  7  8]\n     [ 1  2  3  4  5  6  7  8  9]\n     [ 2  3  4  5  6  7  8  9 10]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\na = np.arange(9)\n\nprint(\"Reduce\", np.add.reduce(a))\nprint(\"Accumulate\", np.add.accumulate(a))\nprint(\"Reduceat\", np.add.reduceat(a, [0, 5, 2, 7]))\nprint(\"Reduceat step I\", np.add.reduce(a[0:5]))\nprint(\"Reduceat step II\", a[5])\nprint(\"Reduceat step III\", np.add.reduce(a[2:7]))\nprint(\"Reduceat step IV\", np.add.reduce(a[7:]))\nprint(\"Outer\", np.add.outer(np.arange(3), a))\n```", "```py\n    a = np.array([2, 6, 5])\n    b = np.array([1, 2, 3])\n    print(\"Divide\", np.divide(a, b), np.divide(b, a))\n    ```", "```py\n    Divide [2 3 1] [0 0 0]\n\n    ```", "```py\n    print(\"True Divide\", np.true_divide(a, b), np.true_divide(b, a))\n    ```", "```py\n    True Divide [ 2\\.          3\\.          1.66666667] [ 0.5         0.33333333  0.6       ]\n\n    ```", "```py\n    print(\"Floor Divide\", np.floor_divide(a, b), np.floor_divide(b, a))\n    c = 3.14 * b\n    print(\"Floor Divide 2\", np.floor_divide(c, b), np.floor_divide(b, c))\n    ```", "```py\n    Floor Divide [2 3 1] [0 0 0]\n    Floor Divide 2 [ 3\\.  3\\.  3.] [ 0\\.  0\\.  0.]\n\n    ```", "```py\n    from __future__ import division\n    ```", "```py\n    print(\"/ operator\", a/b, b/a)\n    ```", "```py\n    / operator [ 2\\.          3\\.          1.66666667] [ 0.5         0.33333333  0.6       ]\n\n    ```", "```py\n    print(\"// operator\", a//b, b//a)\n    print(\"// operator 2\", c//b, b//c)\n    ```", "```py\n    // operator [2 3 1] [0 0 0]\n    // operator 2 [ 3\\.  3\\.  3.] [ 0\\.  0\\.  0.]\n\n    ```", "```py\nfrom __future__ import print_function\nfrom __future__ import division\nimport numpy as np\n\na = np.array([2, 6, 5])\nb = np.array([1, 2, 3])\n\nprint(\"Divide\", np.divide(a, b), np.divide(b, a))\nprint(\"True Divide\", np.true_divide(a, b), np.true_divide(b, a))\nprint(\"Floor Divide\", np.floor_divide(a, b), np.floor_divide(b, a))\nc = 3.14 * b\nprint(\"Floor Divide 2\", np.floor_divide(c, b), np.floor_divide(b, c))\nprint(\"/ operator\", a/b, b/a)\nprint(\"// operator\", a//b, b//a)\nprint(\"// operator 2\", c//b, b//c)\n```", "```py\n    a = np.arange(-4, 4)\n    print(\"Remainder\", np.remainder(a, 2))\n    ```", "```py\n    Remainder [0 1 0 1 0 1 0 1]\n\n    ```", "```py\n    print(\"Mod\", np.mod(a, 2))\n    ```", "```py\n    Mod [0 1 0 1 0 1 0 1]\n\n    ```", "```py\n    print(\"% operator\", a % 2)\n    ```", "```py\n    % operator [0 1 0 1 0 1 0 1]\n\n    ```", "```py\n    print(\"Fmod\", np.fmod(a, 2))\n    ```", "```py\n    Fmod [ 0 -1  0 -1  0  1  0  1]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\na = np.arange(-4, 4)\n\nprint(\"Remainder\", np.remainder(a, 2))\nprint(\"Mod\", np.mod(a, 2))\nprint(\"% operator\", a % 2)\nprint(\"Fmod\", np.fmod(a, 2))\n```", "```py\n    F = np.matrix([[1, 1], [1, 0]])\n    print(\"F\", F)\n    ```", "```py\n    F [[1 1]\n     [1 0]]\n\n    ```", "```py\n    print(\"8th Fibonacci\", (F ** 7)[0, 0])\n    ```", "```py\n    8th Fibonacci 21\n\n    ```", "```py\n    n = np.arange(1, 9)\n    sqrt5 = np.sqrt(5)\n    phi = (1 + sqrt5)/2\n    fibonacci = np.rint((phi**n - (-1/phi)**n)/sqrt5)\n    print(\"Fibonacci\", fibonacci)\n    ```", "```py\n    Fibonacci [  1\\.   1\\.   2\\.   3\\.   5\\.   8\\.  13\\.  21.]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nF = np.matrix([[1, 1], [1, 0]])\nprint(\"F\", F)\nprint(\"8th Fibonacci\", (F ** 7)[0, 0])\nn = np.arange(1, 9)\n\nsqrt5 = np.sqrt(5)\nphi = (1 + sqrt5)/2\nfibonacci = np.rint((phi**n - (-1/phi)**n)/sqrt5)\nprint(\"Fibonacci\", fibonacci)\n```", "```py\nx = A sin(at + \u03c0/2)\ny = B sin(bt)\n```", "```py\n    a = 9\n    b = 8\n    t = np.linspace(-np.pi, np.pi, 201)\n    ```", "```py\n    x = np.sin(a * t + np.pi/2)\n    ```", "```py\n    y = np.sin(b * t)\n    ```", "```py\n    plt.plot(x, y)\n    plt.title('Lissajous curves')\n    plt.grid()\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na = 9\nb = 8\nt = np.linspace(-np.pi, np.pi, 201)\nx = np.sin(a * t + np.pi/2)\ny = np.sin(b * t)\nplt.plot(x, y)\nplt.title('Lissajous curves')\nplt.grid()\nplt.show()\n```", "```py\n    t = np.linspace(-np.pi, np.pi, 201)\n    k = np.arange(1, 99)\n    k = 2 * k - 1\n    f = np.zeros_like(t)\n    ```", "```py\n    for i, ti in enumerate(t):\n       f[i] = np.sum(np.sin(k * ti)/k)\n\n    f = (4 / np.pi) * f\n    ```", "```py\n    plt.plot(t, f)\n    plt.title('Square wave')\n    plt.grid()\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nt = np.linspace(-np.pi, np.pi, 201)\nk = np.arange(1, 99)\nk = 2 * k - 1\nf = np.zeros_like(t)\n\nfor i, ti in enumerate(t):\n   f[i] = np.sum(np.sin(k * ti)/k)\n\nf = (4 / np.pi) * f\n\nplt.plot(t, f)\nplt.title('Square wave')\nplt.grid()\nplt.show()\n```", "```py\n    t = np.linspace(-np.pi, np.pi, 201)\n    k = np.arange(1, 99)\n    f = np.zeros_like(t)\n    ```", "```py\n    for i, ti in enumerate(t):\n       f[i] = np.sum(np.sin(2 * np.pi * k * ti)/k)\n\n    f = (-2 / np.pi) * f\n    ```", "```py\n    plt.plot(t, f, lw=1.0, label='Sawtooth')\n    plt.plot(t, np.abs(f), '--', lw=2.0, label='Triangle')\n    plt.title('Triangle and sawtooth waves')\n    plt.grid()\n    plt.legend(loc='best')\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nt = np.linspace(-np.pi, np.pi, 201)\nk = np.arange(1, 99)\nf = np.zeros_like(t)\n\nfor i, ti in enumerate(t):\n   f[i] = np.sum(np.sin(2 * np.pi * k * ti)/k)\n\nf = (-2 / np.pi) * f\nplt.plot(t, f, lw=1.0, label='Sawtooth')\nplt.plot(t, np.abs(f), '--', lw=2.0, label='Triangle')\nplt.title('Triangle and sawtooth waves')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    x = np.arange(-9, 9)\n    y = -x\n    print(\"Sign different?\", (x ^ y) < 0)\n    print(\"Sign different?\", np.less(np.bitwise_xor(x, y), 0))\n    ```", "```py\n    Sign different? [ True  True  True  True  True  True  True  True  True False  True  True\n     True  True  True  True  True  True]\n    Sign different? [ True  True  True  True  True  True  True  True  True False  True  True\n     True  True  True  True  True  True]\n\n    ```", "```py\n    print(\"Power of 2?\\n\", x, \"\\n\", (x & (x - 1)) == 0)\n    print(\"Power of 2?\\n\", x, \"\\n\", np.equal(np.bitwise_and(x,  (x - 1)), 0))\n    ```", "```py\n    Power of 2?\n    **[-9 -8 -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8]** \n    [False False False False False False False False False  True  True  True\n     False  True False False False  True]\n    Power of 2?\n    **[-9 -8 -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8]** \n    [False False False False False False False False False  True  True  True\n     False  True False False False  True]\n\n    ```", "```py\n    print(\"Modulus 4\\n\", x, \"\\n\", x & ((1 << 2) - 1))\n    print(\"Modulus 4\\n\", x, \"\\n\", np.bitwise_and(x, np.left_shift(1, 2) - 1))\n    ```", "```py\n    Modulus 4\n    **[-9 -8 -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8]** \n    [3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0]\n    Modulus 4\n    **[-9 -8 -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8]** \n    [3 0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 3 0]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nx = np.arange(-9, 9)\ny = -x\nprint(\"Sign different?\", (x ^ y) < 0)\nprint(\"Sign different?\", np.less(np.bitwise_xor(x, y), 0))\nprint(\"Power of 2?\\n\", x, \"\\n\", (x & (x - 1)) == 0)\nprint(\"Power of 2?\\n\", x, \"\\n\", np.equal(np.bitwise_and(x,  (x - 1)), 0))\nprint(\"Modulus 4\\n\", x, \"\\n\", x & ((1 << 2) - 1))\nprint(\"Modulus 4\\n\", x, \"\\n\", np.bitwise_and(x, np.left_shift(1, 2) - 1))\n```", "```py\n    >>> a = np.random.random_integers(-3, 3, 7)\n    >>> a\n    array([ 1,  0, -1,  2,  1, -2,  0])\n\n    ```", "```py\n    >>> np.sign.at(a, [3, 5])\n    >>> a\n    array([ 1, 0, -1,  1,  1, -1,  0])\n\n    ```"]