- en: Smart Wearable
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能可穿戴设备
- en: In this chapter, we are going to look at a simple healthcare application that
    can be created using Raspberry Pi 3\. We are going to build a smart wearable with
    a 16x2 LCD that displays the location of the user, and also displays an accelerometer's
    values on the web/desktop/mobile interface. The target audience for this product
    would primarily be elderly people and the main use case being fall detection,
    which we are going to work with in [Chapter 7](part0120.html#3IE3G0-ce91715363d04669bca1c1545beb57ee),
    *Smart Wearable and IFTTT* .
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何使用树莓派3创建一个简单的医疗保健应用程序。我们将构建一个带有16x2液晶显示屏的智能可穿戴设备，显示用户的位置，并在Web/桌面/移动界面上显示加速度计的数值。这个产品的目标用户主要是年长者，主要用例是跌倒检测，我们将在[第7章](part0120.html#3IE3G0-ce91715363d04669bca1c1545beb57ee)中进行讨论，*智能可穿戴设备和IFTTT*。
- en: 'We are going to look at the following in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: IoT and healthcare
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网和医疗保健
- en: Set up the required hardware
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置所需的硬件
- en: Integrate the accelerometer and view live data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合加速度计并查看实时数据
- en: IoT and healthcare
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网和医疗保健
- en: Imagine a patient who successfully underwent a heart transplant surgery and
    is being sent home after post operational care in the hospital. The amount of
    attention on this patient would significantly reduce, as the facilities in the
    home would be minimal compared to a hospital. This is where IoT comes in with
    its real-time capability.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一位成功接受心脏移植手术并在医院术后护理后被送回家的患者。对这位患者的关注程度将显著降低，因为家庭设施与医院相比将是最低的。这就是物联网以其实时能力介入的地方。
- en: IoT and healthcare is a match made in heaven. The risks and rewards are equally
    high. Ability to monitor a patient's health in real time and get information about
    their pulse rate, body temperature, and other vital statistics, diagnose and act
    on it is quite precious. At the same time, if the connectivity was lost for two
    minutes, a life would be at stake.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网和医疗保健是天作之合。风险和回报同样巨大。能够实时监测患者的健康状况，并获取他们的脉搏、体温和其他重要统计数据的信息，并对其进行诊断和处理是非常宝贵的。与此同时，如果连接中断两分钟，就会有人的生命受到威胁。
- en: In my opinion, to realize the full potential of IoT in healthcare, we may need
    to wait for another 5 - 10 years, where the connectivity is absolutely seamless
    and packet loss is a word of ancient history.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，要实现物联网在医疗保健领域的全部潜力，我们可能需要再等待5-10年，那时的连接将是绝对无缝的，数据包丢失将成为历史。
- en: Smart wearable
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能可穿戴设备
- en: As mentioned in the preceding section, we are going to do one of the critical
    things in healthcare using IoT. The main purpose of the smart wearable we are
    going to build is to identify fall detection. Once fall detection is identified,
    we notify the cloud about it. This is a very precious feature when we have elderly
    or sick people around who collapse due to unexpected reasons. Identifying the
    fall immediately and taking an action on it can be life saving at times.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，我们将使用物联网在医疗保健领域做一些关键的事情。我们要构建的智能可穿戴设备的主要目的是识别跌倒。一旦识别到跌倒，我们就会通知云端。当我们周围有年长或患病的人因意外原因而倒下时，及时识别跌倒并采取行动有时可以挽救生命。
- en: 'To detect falls, we are going to use an accelerometer. Quoting from Wikipedia:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测跌倒，我们将使用加速度计。引用维基百科的话：
- en: '"An **accelerometer** is a device that measures proper acceleration. Proper
    acceleration, being the acceleration (or rate of change of velocity) of a body
    in its own instantaneous rest frame, is not the same as coordinate acceleration,
    being the acceleration in a fixed coordinate system. For example, an accelerometer
    at rest on the surface of the Earth will measure an acceleration due to Earth''s
    gravity, straight upwards (by definition) of g ≈ 9.81 m/s2\. By contrast, accelerometers
    in free fall (falling toward the centre of the Earth at a rate of about 9.81 m/s2)
    will measure zero."'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"**加速度计**是一种测量真实加速度的设备。真实加速度是指物体在其瞬时静止参考系中的加速度（或速度变化率），并不同于坐标加速度，即在固定坐标系中的加速度。例如，静止在地球表面的加速度计将测量由于地球重力而产生的加速度，垂直向上（根据定义）为g
    ≈ 9.81 m/s2。相比之下，自由下落的加速度计（以约9.81 m/s2的速率朝向地球中心下落）将测量为零。"'
- en: 'To know more about an accelerometer and how it works, refer to *How an accelerometer
    works* at: [https://www.youtube.com/watch?v=i2U49usFo10](https://www.youtube.com/watch?v=i2U49usFo10).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于加速度计及其工作原理的信息，请参阅*加速度计的工作原理*：[https://www.youtube.com/watch?v=i2U49usFo10](https://www.youtube.com/watch?v=i2U49usFo10)。
- en: In this chapter, we are going to implement the basic system that gathers the
    X, Y, and Z axis acceleration raw values and gets displayed on web, desktop, and
    mobile apps. In [Chapter 7](part0120.html#3IE3G0-ce91715363d04669bca1c1545beb57ee),
    *Smart Wearable and IFTTT*, we are going to implement fall detection using these
    values.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实现基本系统，收集X、Y和Z轴加速度原始值，并在Web、桌面和移动应用程序上显示。在[第7章](part0120.html#3IE3G0-ce91715363d04669bca1c1545beb57ee)中，*智能可穿戴设备和IFTTT*，我们将使用这些数值来实现跌倒检测。
- en: Along with gathering the accelerometer values in real time, we are going to
    use the 16x2 LCD display to show the current time and the geolocation of the user.
    If needed, we can add other texts to this display as well. 16x2 is a simple interface
    to display content. This can be extended with Nokia 5110 LCD ([http://www.amazon.in/inch-Nokia-5110-KG075-KitsGuru/dp/B01CXNSJOA](http://www.amazon.in/inch-Nokia-5110-KG075-KitsGuru/dp/B01CXNSJOA))
    to have a more advanced display with graphics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实时收集加速度计数值外，我们还将使用16x2液晶显示屏显示当前时间和用户的地理位置。如果需要，我们也可以在显示屏上添加其他文本。16x2是一个简单的界面来显示内容。这可以通过诺基亚5110液晶屏（[http://www.amazon.in/inch-Nokia-5110-KG075-KitsGuru/dp/B01CXNSJOA](http://www.amazon.in/inch-Nokia-5110-KG075-KitsGuru/dp/B01CXNSJOA)）进行扩展，以获得具有图形的更高级显示。
- en: In the next section, we are going to put together the required hardware and
    then update the Raspberry Pi code. After that we are going to start working on
    the API engine and the UI templates.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将组装所需的硬件，然后更新树莓派代码。之后，我们将开始处理API引擎和UI模板。
- en: Setting up smart wearable
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置智能可穿戴设备
- en: The first thing to note about the hardware setup is that it is big and bulky.
    This is only a POC and is not even a remotely close production setup. The hardware
    setup would consist of an accelerometer connected to Raspberry Pi 3 and a 16X2
    LCD.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于硬件设置的第一件事是它又大又笨重。这只是一个POC，甚至不是一个接近生产设置的远程。硬件设置将包括连接到树莓派3和16X2 LCD的加速度计。
- en: The accelerometer ADXL345 gives the acceleration of X, Y, and Z axis over I2C
    protocol.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计ADXL345通过I2C协议提供X、Y和Z轴的加速度。
- en: 'Connect the hardware as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式连接硬件：
- en: '![](../images/00093.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00093.jpeg)'
- en: 'As you can see in the preceding schematic, we have made the following connections:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的原理图中所看到的，我们已经建立了以下连接：
- en: 'Raspberry Pi and LCD:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派和LCD：
- en: '| **Raspberry Pi number - Pin name** | **16x2 LCD Pi name** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **树莓派编号 - 引脚名称** | **16x2 LCD Pi名称** |'
- en: '| 6 - GND - Breadboard rail 1 | 1 - GND |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 6 - GND - 面包板导轨1 | 1 - GND |'
- en: '| 2 - 5V - Breadboard rail 2 | 2 - VCC |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 2 - 5V - 面包板导轨2 | 2 - VCC |'
- en: '| 1 k Ohm potentiometer | 3 - VEE |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 1 k Ohm电位计 | 3 - VEE |'
- en: '| 32 - GPIO 12 | 4 - RS |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 32 - GPIO 12 | 4 - RS |'
- en: '| 6 - GND - Breadboard rail 1 | 5 -R/W |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 6 - GND - 面包板导轨1 | 5 -R/W |'
- en: '| 40 - GPIO 21 | 6 - EN |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 40 - GPIO 21 | 6 - EN |'
- en: '| NC | 7 - DB0 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| NC | 7 - DB0 |'
- en: '| NC | 8 - DB1 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| NC | 8 - DB1 |'
- en: '| NC | 9 - DB2 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| NC | 9 - DB2 |'
- en: '| NC | 10 - DB3 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| NC | 10 - DB3 |'
- en: '| 29 - GPIO 5 | 11 - DB4 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 29 - GPIO 5 | 11 - DB4 |'
- en: '| 31 - GPIO 6 | 12 - DB5 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 31 - GPIO 6 | 12 - DB5 |'
- en: '| 11 - GPIO 17 | 13 - DB6 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 11 - GPIO 17 | 13 - DB6 |'
- en: '| 12 - GPIO 18 | 14 - DB7 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 12 - GPIO 18 | 14 - DB7 |'
- en: '| 2 - 5V - Breadboard rail 2 | 15 - LED+ |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 2 - 5V - 面包板导轨2 | 15 - LED+ |'
- en: '| 6 - GND - Breadboard rail 1 | 16 - LED- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 6 - GND - 面包板导轨1 | 16 - LED- |'
- en: 'Raspberry Pi and ADXL345:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派和ADXL345：
- en: '| **Raspberry Pi number - Pin name** | **ADXL345 pin number - Pin name** |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **树莓派编号 - 引脚名称** | **ADXL345引脚编号 - 引脚名称** |'
- en: '| 1 - 3.3V | VCC |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 1 - 3.3V | VCC |'
- en: '| 6 - GND - Breadboard rail 1 | GND |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 6 - GND - 面包板导轨1 | GND |'
- en: '| 5 - GPIO3/SCL1 | SCL |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 5 - GPIO3/SCL1 | SCL |'
- en: '| 3 - GPIO2/SDA1 | SDA |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 3 - GPIO2/SDA1 | SDA |'
- en: '| 6 - GND - Breadboard rail 1 | SDO |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 6 - GND - 面包板导轨1 | SDO |'
- en: 'We will add the required code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加所需的代码：
- en: First create a folder named `chapter6` and then copy the contents of `chapter4`
    into it. We will update this code as we go along
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个名为`chapter6`的文件夹，然后将`chapter4`的内容复制到其中。我们将随着进展更新此代码
- en: 'Now, we will start with the `pi-client`. On the Raspberry Pi, open `pi-client/index.js`
    and update it as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将开始使用`pi-client`。在树莓派上，打开`pi-client/index.js`并按照以下方式更新它：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see from the preceding code, we are displaying the location, using
    `displayLocation()`, every one hour, as we are assuming that the location would
    not change frequently. We are using the [http://ipinfo.io/](http://ipinfo.io/)
    service to get the user's location.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中可以看出，我们使用`displayLocation()`每小时显示一次位置，因为我们假设位置不会经常改变。我们使用[http://ipinfo.io/](http://ipinfo.io/)服务来获取用户的位置。
- en: Finally, using `readSensorValues()` we get the value of `accelerometer` every
    `3` seconds and publish this data to a topic named `accelerometer`
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`readSensorValues()`我们每`3`秒获取一次`加速度计`的值，并将这些数据发布到名为`accelerometer`的主题中。
- en: 'Now, we will install the required dependencies. From inside the `pi-client`
    folder, run the following command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将安装所需的依赖项。从`pi-client`文件夹内部运行以下命令：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Save all the files and start the mosca broker on the server or our desktop
    machine by running:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有文件并通过运行在服务器或我们的桌面机器上启动mosca broker来启动：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, run the code on Raspberry Pi:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在树莓派上运行代码：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will start the `pi-client` and will start collecting the accelerometer
    and display the location on the LCD display as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动`pi-client`并开始收集加速度计数据，并在LCD显示器上显示位置如下：
- en: '![](../images/00094.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00094.jpeg)'
- en: 'My setup is shown as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我的设置如下所示：
- en: '![](../images/00095.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00095.jpeg)'
- en: Next, we will work with the API engine.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将与API引擎一起工作。
- en: Updating the API engine
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新API引擎
- en: 'Now that we have the smart wearable running and sending the three axis data,
    we will now implement the required logic needed to accept that data in the API
    engine and send the data to the web/desktop/mobile app:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让智能可穿戴设备运行并发送了三轴数据，我们现在将实现API引擎中接受该数据所需的逻辑，并将数据发送到Web/桌面/移动应用程序中：
- en: 'Open `api-engine/server/mqtt/index.js` and update it as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`api-engine/server/mqtt/index.js`并按照以下方式更新它：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we are subscribing to a topic named `accelerometer` and listening for
    changes on it. Next, we update `api-engine/server/api/data/data.controller.js`
    as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们订阅名为`accelerometer`的主题，并监听其变化。接下来，我们将按照以下方式更新`api-engine/server/api/data/data.controller.js`：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code is used to save the data to database and fetch the data from
    database when requested from web, desktop, and mobile apps.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码用于将数据保存到数据库，并在从Web、桌面和移动应用程序请求时从数据库中获取数据。
- en: 'Save all the files and run the API engine:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并运行API引擎：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will start the API engine, if needed we can restart the smart wearable
    and we should see the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动API引擎，如果需要，我们可以重新启动智能可穿戴设备，我们应该看到以下内容：
- en: '![](../images/00096.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00096.jpeg)'
- en: In the next section, we will work on the web app to display the data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将在Web应用程序中显示数据。
- en: Updating the web app
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Web应用程序
- en: 'Now that we are done with the API engine, we will update the template in the
    web app to display the three axis data. Open `web-app/src/app/device/device.component.html`
    and update it as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了API引擎，我们将更新Web应用程序中的模板以显示三轴数据。打开`web-app/src/app/device/device.component.html`并按照以下方式更新它：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The required logic will be inside `device.component.ts`. Open `web-app/src/app/device/device.component.ts`
    and update it as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的逻辑将在`device.component.ts`中。打开`web-app/src/app/device/device.component.ts`并按照以下方式更新它：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Save all the files and run the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并运行以下命令：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Navigate to `http://localhost:4200` and view the device and we should see the
    following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:4200`并查看设备，我们应该看到以下内容：
- en: '![](../images/00097.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00097.jpeg)'
- en: With this, we are done with the web app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了Web应用程序。
- en: Updating a desktop app
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新桌面应用程序
- en: Now that the web app is done, we are going to build the same and deploy it inside
    our desktop app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Web应用程序已经完成，我们将构建相同的应用程序并将其部署到我们的桌面应用程序中。
- en: 'To get started, head back to the terminal/prompt of the `web-app` folder and
    run:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请返回到`web-app`文件夹的终端/提示符，并运行：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And this will create a new folder inside the `web-app` folder named `dist`.
    The contents of the `dist` folder should be similar to the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`web-app`文件夹内创建一个名为`dist`的新文件夹。`dist`文件夹的内容应该类似于以下内容：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All the code we have written is finally bundled into the preceding files. We
    will grab all the files (not the `dist` folder) present inside the `dist` folder
    and then paste it inside the `desktop-app/app` folder. The final structure of
    the desktop app after the preceding changes will be as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的所有代码最终都打包到了前面的文件中。我们将获取`dist`文件夹中的所有文件（而不是`dist`文件夹），然后将其粘贴到`desktop-app/app`文件夹中。在进行前述更改后，桌面应用程序的最终结构将如下所示：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To test drive, run the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行测试，请运行以下命令：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then when we navigate to the VIEW DEVICE page, we should see the following
    screen:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当我们导航到VIEW DEVICE页面时，我们应该看到以下屏幕：
- en: '![](../images/00098.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00098.jpeg)'
- en: With this we are done with the development of the desktop app. In the next section,
    we will update the mobile app.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了桌面应用程序的开发。在下一节中，我们将更新移动应用程序。
- en: Updating the mobile app template
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新移动应用程序模板
- en: In the last section, we have updated the desktop app. In this section, we are
    going to update the mobile app template to display the three axis data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经更新了桌面应用程序。在本节中，我们将更新移动应用程序模板以显示三轴数据。
- en: 'First we are going to update the view-device template. Update `mobile-app/src/pages/view-device/view-device.html`
    as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要更新view-device模板。按照以下步骤更新`mobile-app/src/pages/view-device/view-device.html`：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we update `mobile-app/src/pages/view-device/view-device.ts` as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，按照以下步骤更新`mobile-app/src/pages/view-device/view-device.ts`：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save all the files and run the mobile app either by using `ionic serve` or `ionic
    cordova run android`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件，并通过`ionic serve`或`ionic cordova run android`来运行移动应用程序。
- en: 'And we should see the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该看到以下内容：
- en: '![](../images/00099.gif)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00099.gif)'
- en: With this we are done with displaying the data from the smart wearable on the
    mobile app.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了在移动应用程序上显示智能可穿戴设备数据的工作。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how to build a simple smart wearable using Raspberry
    Pi 3\. We have set up a LCD and a three-axis accelerometer and we displayed the
    location information on the display. We have posted the accelerometer data in
    real time to the cloud and displayed it on the web, desktop, and mobile apps.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到如何使用Raspberry Pi 3构建一个简单的智能可穿戴设备。我们设置了一个液晶显示屏和一个三轴加速度计，并在显示屏上显示了位置信息。我们实时将加速度计数据发布到云端，并在Web、桌面和移动应用程序上显示出来。
- en: In [Chapter 7](part0120.html#3IE3G0-ce91715363d04669bca1c1545beb57ee), *Smart
    Wearable and IFTTT*, we are going to take the smart wearable to the next level
    by implementing IFTTT rules on top of it. We are going to perform actions such
    as making a phone call or sending an SMS to the patience emergency contact so
    that immediate care can be given.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0120.html#3IE3G0-ce91715363d04669bca1c1545beb57ee)，*智能可穿戴设备和IFTTT*中，我们将通过在其上实施IFTTT规则，将智能可穿戴设备提升到一个新的水平。我们将执行诸如打电话或向急救联系人发送短信等操作，以便及时提供护理。
