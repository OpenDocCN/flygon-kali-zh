- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Are you trying to start a career in Android programming, but haven't found the
    right way in? Do you have a great idea for an app, but don't know how to make
    it a reality? Or maybe you're just frustrated that to learn Android, you must
    already know Kotlin. If so, then this book is for you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否正在尝试开始Android编程的职业生涯，但还没有找到合适的方法？您是否有一个很棒的应用程序想法，但不知道如何将其变成现实？或者您只是对学习Android必须已经了解Kotlin感到沮丧。如果是这样，那么这本书就是为您准备的。
- en: '*Android Programming with Kotlin for Beginners* will be your guide to creating
    Android applications from scratch. We will introduce you to all the fundamental
    concepts of programming in an Android context, from the basics of Kotlin to working
    with the Android API. All examples are created within Android Studio, the official
    Android development environment, which helps supercharge your application development
    process. After this crash course, we''ll dive deeper into Android programming,
    and you''ll learn how to create applications with a professional-standard UI through
    fragments and store your user''s data with SQLite. In addition, you''ll see how
    to make your apps multilingual, draw on the screen with a finger, and work with
    graphics, sound, and animations too.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*面向初学者的Kotlin Android编程*将成为您创建Android应用程序的指南。我们将向您介绍在Android环境中编程的所有基本概念，从Kotlin的基础知识到使用Android
    API。所有示例都是在官方的Android开发环境Android Studio中创建的，这有助于加速应用程序开发过程。在这个速成课程之后，我们将深入研究Android编程，您将学会如何通过片段创建具有专业标准UI的应用程序，并使用SQLite存储用户数据。此外，您还将了解如何使您的应用程序支持多语言，如何用手指在屏幕上绘图，以及如何处理图形、声音和动画。'
- en: By the end of this book, you'll be ready to start building your own custom applications
    in Android and Kotlin.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本书，您将准备好开始在Android和Kotlin中构建自己的定制应用程序。
- en: Who this book is for
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书是为谁准备的
- en: This book is for you if you are completely new to Kotlin, Android, or programming
    and want to make Android applications. This book also acts as a refresher for
    those who already have some basic experience of using Kotlin on Android to advance
    their knowledge and make fast progress through the early projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您完全不了解Kotlin、Android或编程，并且想制作Android应用程序，那么这本书就是为您准备的。这本书也可以作为那些已经有一些基本使用Kotlin在Android上经验的人的复习，以提高他们的知识，并通过早期项目快速进步。
- en: What this book covers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖内容
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started with Android and Kotlin"),
    *Getting Started with Android and Kotlin*, welcomes you to *the exciting world
    of Android and Kotlin*. In this first chapter, we won''t waste any time before
    getting started developing Android apps. We will look at what is so great about
    Android, what Android and Kotlin are, how they work and complement each other,
    and what that means to us as future developers. Moving on, we will set up the
    required software so that we can build and deploy a simple first app.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. 开始使用Android和Kotlin") *开始使用Android和Kotlin*，欢迎您来到*令人兴奋的Android和Kotlin世界*。在这一章中，我们将立即开始开发Android应用程序。我们将探讨Android的优势，Android和Kotlin是什么，它们如何工作和相互补充，以及作为未来开发人员对我们意味着什么。接下来，我们将设置所需的软件，以便我们可以构建和部署一个简单的第一个应用程序。'
- en: '[Chapter 2](ch02.html "Chapter 2. Kotlin, XML, and the UI Designer"), *Kotlin,
    XML, and the UI Designer*, discusses how, at this stage, we have a working Android
    development environment and we have built and deployed our first app. It is obvious,
    however, that code autogenerated by Android Studio is not going to make the next
    top-selling app on Google Play. We need to explore this autogenerated code so
    that we can begin to understand Android and then learn how to build on this useful
    template.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. Kotlin、XML和UI设计师") *Kotlin、XML和UI设计师*，讨论了在这个阶段，我们已经拥有了一个可用的Android开发环境，并且已经构建和部署了我们的第一个应用程序。然而，显然，由Android
    Studio自动生成的代码不会成为下一个在Google Play上畅销的应用程序。我们需要探索这些自动生成的代码，以便我们可以开始了解Android，然后学习如何在这个有用的模板上构建。'
- en: '[Chapter 3](ch03.html "Chapter 3. Exploring Android Studio and the Project
    Structure"), *Exploring Android Studio and the Project Structure*, takes us through
    creating and running two more Android projects. The purpose of these exercises
    is to explore Android Studio and the structure of Android projects more deeply.
    When we build our apps ready for deployment, the code and the resource files need
    to be packed away in the APK file – just as they are. Therefore, all the layout
    files and other resources, which we will be looking at soon, need to be in the
    correct structures. Fortunately, Android Studio handles this for us when we create
    a project from a template. However, we still need to know how to find and amend
    these files, how to add our own and sometimes remove the files created by Android
    Studio, and how the resource files are interlinked – sometimes with each other
    and sometimes with the Kotlin code (that is, the autogenerated Kotlin code as
    well as our own). Along with understanding the composition of our projects, it
    will also be beneficial to make sure that we get the most from the emulator.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章. 探索Android Studio和项目结构") *探索Android Studio和项目结构*，带领我们创建和运行另外两个Android项目。这些练习的目的是更深入地探索Android
    Studio和Android项目的结构。当我们为部署构建我们的应用程序时，代码和资源文件需要被打包到APK文件中 - 就像它们现在的样子。因此，所有布局文件和其他资源，我们很快就会看到，需要以正确的结构存在。幸运的是，当我们从模板创建项目时，Android
    Studio会为我们处理这些。然而，我们仍然需要知道如何找到和修改这些文件，如何添加我们自己的文件，有时删除Android Studio创建的文件，以及资源文件如何相互关联
    - 有时与彼此关联，有时与Kotlin代码关联（即自动生成的Kotlin代码以及我们自己的代码）。除了了解我们项目的组成，确保我们充分利用模拟器也是有益的。'
- en: '[Chapter 4](ch04.html "Chapter 4. Getting Started with Layouts and Material
    Design"), *Getting Started with Layouts and Material Design*, builds on what we
    have already seen; that is, the Android Studio UI designer and a little bit more
    Kotlin in action. In this hands-on chapter, we will build three more layouts –
    still quite simple, yet a step up from what we have done so far. Before we get
    to the hands-on part, we will have a quick introduction to the concept of **material
    design**. We will look at another type of layout called `LinearLayout` and walk
    through it, using it to create a usable UI. We will take things a step further
    using `ConstraintLayout` both to understand constraints and design more complex
    and precise UI designs. Finally, we will use `TableLayout` to lay data out in
    an easily readable table. We will also write some Kotlin code to switch between
    our different layouts within one app/project. This is the first major app that
    links together multiple topics into one neat parcel. The app is called *Exploring
    Layouts*.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章《使用布局和Material Design入门》建立在我们已经看到的基础上；也就是说，Android Studio UI设计师和更多Kotlin的实际操作。在这个实践性的章节中，我们将构建三个更多的布局
    - 仍然相当简单，但比我们到目前为止所做的更上一层楼。在我们开始实际操作之前，我们将快速介绍**material design**的概念。我们将看看另一种称为`LinearLayout`的布局类型，并通过它来创建可用的UI。我们将进一步使用`ConstraintLayout`来理解约束并设计更复杂和精确的UI设计。最后，我们将使用`TableLayout`来将数据布置在一个易读的表格中。我们还将编写一些Kotlin代码，以在一个应用/项目中在不同的布局之间切换。这是第一个将多个主题链接在一起的重要应用程序。这个应用程序被称为*探索布局*。
- en: '[Chapter 5](ch05.html "Chapter 5. Beautiful Layouts with CardView and ScrollView"),
    *Beautiful Layouts with CardView and ScrollView*, is the last chapter on layouts
    before we spend some time focusing on Kotlin and object-oriented programming.
    We will formalize our learning on some of the different attributes we have already
    seen, and we will also introduce two more cool layouts, `ScrollView` and `CardView`.
    To finish the chapter off, we will run the `CardView` project on a tablet emulator.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章《使用CardView和ScrollView创建美丽的布局》是在我们花一些时间专注于Kotlin和面向对象编程之前的最后一个布局章节。我们将对我们已经看到的一些不同属性进行正式学习，并且还将介绍两个更酷的布局，`ScrollView`和`CardView`。最后，我们将在平板模拟器上运行`CardView`项目。
- en: '[Chapter 6](ch06.html "Chapter 6. The Android Lifecycle"), *The Android Lifecycle*,
    will familiarize us with the lifecycle of an Android app. The idea that a computer
    program has a lifecycle might sound strange at first, but it will soon make sense.
    The lifecycle is the way that all Android apps interact with the Android OS. In
    the same way that the lifecycle of humans enables them to interact with the world
    around them, we have no choice but to interact with the Android lifecycle, and
    we must be prepared to handle numerous unpredictable events if we want our apps
    to survive. We will explore the phases of the lifecycle that an app goes through,
    from creation to destruction, and how this helps us know *where* to put our Kotlin
    code, depending on what we are trying to achieve.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章《Android生命周期》将使我们熟悉Android应用程序的生命周期。一开始，计算机程序有生命周期这个概念可能听起来很奇怪，但很快就会变得合理。生命周期是所有Android应用程序与Android操作系统交互的方式。就像人类的生命周期使他们能够与周围的世界互动一样，我们别无选择，只能与Android生命周期互动，并且必须准备处理许多不可预测的事件，如果我们希望我们的应用程序能够生存下来。我们将探索应用程序经历的生命周期阶段，从创建到销毁，以及这如何帮助我们知道根据我们想要实现的目标在*何处*放置我们的Kotlin代码。
- en: '[Chapter 7](ch07.html "Chapter 7. Kotlin Variables, Operators, and Expressions"),
    *Kotlin Variables, Operators, and Expressions*, along with the following chapter,
    explains the core fundamentals of Kotlin. In fact, we will explore the topics
    that are the main principles of programming in general. In this chapter, we will
    focus on the creation and understanding of the data itself, and in the next chapter,
    we will explore how to manipulate and respond to it.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章《Kotlin变量、运算符和表达式》，以及接下来的一章，解释了Kotlin的核心基础。实际上，我们将探索编程的主要原则。在这一章中，我们将专注于数据本身的创建和理解，在下一章中，我们将探讨如何操作和响应数据。
- en: '[Chapter 8](ch08.html "Chapter 8. Kotlin Decisions and Loops"), *Kotlin Decisions
    and Loops*, moves on from variables, and we now understand how to change the values
    that they hold with expressions, but how can we take a course of action that is
    dependent upon the value of a variable? We can certainly add the number of new
    messages to the number of previously unread messages, but how can we, for example,
    trigger an action within our app when the user has read all their messages? The
    first problem is that we need a way to test the value of a variable, and then
    respond when the value falls within a range of values or is equal to a specific
    value. Another problem that is common in programming is that we need sections
    of our code to be executed a certain number of times (more than once, or sometimes
    not at all) depending on the value of variables. To solve the first problem, we
    will look at making decisions in Kotlin with `if`, `else`, and `when`. To solve
    the latter, we will look at loops in Kotlin with `while`, `do` – `while`, `for`,
    `continue`, and `break`. Furthermore, we will learn that, in Kotlin, decisions
    are also expressions that produce a value.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章《Kotlin决策和循环》从变量中移开，我们现在了解如何使用表达式更改它们所持有的值，但是当一个变量的值取决于一个变量时，我们如何采取行动呢？我们当然可以将新消息的数量添加到先前未读消息的数量中，但是例如，当用户已经阅读了所有消息时，我们如何触发应用程序中的操作呢？第一个问题是我们需要一种测试变量值的方法，然后在值落在一系列值范围内或等于特定值时做出响应。编程中常见的另一个问题是，我们需要根据变量的值执行代码的某些部分一定次数（多次，或者有时根本不执行）。为了解决第一个问题，我们将学习如何在Kotlin中使用`if`、`else`和`when`做出决策。为了解决后者，我们将学习Kotlin中的循环，包括`while`、`do`-`while`、`for`、`continue`和`break`。此外，我们将了解在Kotlin中，决策也是产生值的表达式。
- en: '[Chapter 9](ch09.html "Chapter 9. Kotlin Functions"), *Kotlin Functions*, explains
    that functions are the building blocks of our apps. We write functions that do
    specific tasks, and then call them when we need to execute that specific task.
    As the tasks we need to perform in our apps will be quite varied, our functions
    need to cater to this and be very flexible. Kotlin functions are very flexible,
    more so than the functions of other Android-related languages. We therefore need
    to spend a whole chapter learning about them. Functions are intimately related
    to object-oriented programming, and once we understand the basics of functions,
    we will be in a good position to take on the wider learning of object-oriented
    programming.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章，“Kotlin函数”，解释了函数是我们应用程序的构建块。我们编写执行特定任务的函数，然后在需要执行该特定任务时调用它们。由于我们在应用程序中需要执行的任务将是相当多样化的，我们的函数需要满足这一点并且非常灵活。Kotlin函数非常灵活，比其他与Android相关的语言的函数更灵活。因此，我们需要花费整整一章的时间来学习它们。函数与面向对象编程密切相关，一旦我们理解了函数的基础知识，我们就能够很好地掌握更广泛的面向对象编程的学习。
- en: '[Chapter 10](ch10.html "Chapter 10. Object-Oriented Programming"), *Object-Oriented
    Programming*, explains that, in Kotlin, classes are fundamental to just about
    everything and, in fact, just about everything is a class. We have already talked
    about reusing other people''s code, specifically the Android API, but in this
    chapter, we will really get to grips with how this works and learn about object-oriented
    programming (OOP) and how to use it.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章，“面向对象编程”，解释了在Kotlin中，类对几乎所有事情都是基本的，事实上，几乎所有事情都是一个类。我们已经谈到了重用其他人的代码，特别是Android
    API，但在本章中，我们将真正掌握这是如何工作的，并学习面向对象编程（OOP）以及如何使用它。
- en: '[Chapter 11](ch11.html "Chapter 11. Inheritance in Kotlin"), *Inheritance in
    Kotlin*, shows inheritance in action. In fact, we have already seen it, but now
    we will examine it more closely, discuss the benefits, and write classes that
    we inherit from. Throughout the chapter, I will show you several practical examples
    of inheritance, and at the end of the chapter we will improve our naval battle
    simulation from the previous chapter and show how we could have saved lots of
    typing and future debugging by using inheritance.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章，“Kotlin中的继承”，展示了继承的实际应用。事实上，我们已经看到了，但现在我们将更仔细地研究它，讨论其好处，并编写我们从中继承的类。在整个章节中，我将向您展示几个继承的实际例子，在本章结束时，我们将改进上一章的海战模拟，并展示如何通过使用继承来节省大量的输入和未来的调试工作。
- en: '[Chapter 12](ch12.html "Chapter 12. Connecting Our Kotlin to the UI and Nullability"),
    *Connecting Our Kotlin to the UI and Nullability*, fully reveals, by the end of
    the chapter, the missing link between our Kotlin code and our XML layouts, leaving
    us with the power to add all kinds of widgets and UI features to our layouts as
    we have done before, but this time we will be able to control them through our
    code. In this chapter, we will take control of some simple UI elements, such as
    `Button` and `TextView`, and, in the next chapter, we will take things further
    and manipulate a whole range of UI elements. To enable us to understand what is
    happening, we need to find out a bit more about the memory in an app, and two
    areas of it in particular – the **Stack** and the **Heap**.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章，“将我们的Kotlin连接到UI和空值”，在本章结束时，完全揭示了我们的Kotlin代码和我们的XML布局之间的缺失链接，使我们能够像以前一样向我们的布局添加各种小部件和UI功能，但这一次我们将能够通过我们的代码来控制它们。在本章中，我们将控制一些简单的UI元素，如`Button`和`TextView`，在下一章中，我们将进一步操作一系列UI元素。为了使我们能够理解发生了什么，我们需要更多地了解应用程序中的内存，特别是其中的两个领域
    - **堆栈**和**堆**。
- en: '[Chapter 13](ch13.html "Chapter 13. Bringing Android Widgets to Life"), *Bringing
    Android Widgets to Life*, discusses that since we now have a good overview of
    both the layout and coding of an Android app, as well as our newly acquired insight
    into object-oriented programming (OOP) and how we can manipulate the UI from our
    Kotlin code, we are ready to experiment with more widgets from the Android Studio
    palette. At times, OOP is a tricky thing, and this chapter introduces some topics
    that can be awkward for beginners. However, by gradually learning these new concepts
    and practicing them repeatedly, they will, over time, become our friend. In this
    chapter, we will diversify a lot by going back to the Android Studio palette and
    looking at half a dozen widgets that we have either not seen at all or have not
    used fully yet. Once we have done so, we will put them all into a layout and practice
    manipulating them with our Kotlin code.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第13章，“将Android小部件带到生活中”，讨论了由于我们现在对Android应用程序的布局和编码以及我们新获得的面向对象编程（OOP）的洞察力，以及如何从我们的Kotlin代码中操纵UI有了很好的概述，我们现在可以尝试使用Android
    Studio调色板中的更多小部件。有时，OOP是一件棘手的事情，这一章介绍了一些对初学者来说可能尴尬的主题。然而，通过逐渐学习这些新概念并反复练习，它们将随着时间的推移成为我们的朋友。在本章中，我们将通过回到Android
    Studio调色板并查看半打我们要么根本没有看到过要么尚未完全使用过的小部件来进行多样化。一旦我们这样做了，我们将把它们都放入布局中，并练习用我们的Kotlin代码操纵它们。
- en: '[Chapter 14](ch14.html "Chapter 14. Android Dialog Windows"), *Android Dialog
    Windows*, explains how to present the user with a pop-up dialog window. We can
    then put all that we know into the first phase of our first multi-chapter app,
    *Note to self*. We will then learn about new Android and Kotlin features in this
    chapter and the four following chapters (up to [Chapter 18](ch18.html "Chapter 18. Localization"),
    *Localization*), and then use our newly-acquired knowledge to enhance the Note
    to self app.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第14章，“Android对话框窗口”，解释了如何向用户呈现弹出式对话框窗口。然后，我们可以将我们所知道的一切放入我们的第一个多章节应用程序“Note
    to self”的第一阶段。然后，我们将在本章和接下来的四章（直到第18章，“本地化”）中学习有关Android和Kotlin的新功能，然后利用我们新获得的知识来增强“Note
    to self”应用程序。
- en: '[Chapter 15](ch15.html "Chapter 15. Handling Data and Generating Random Numbers"),
    *Handling Data and Generating Random Numbers*, shows that we are making good progress.
    We have a rounded knowledge of both the Android UI options and the basics of Kotlin.
    In the previous few chapters, we started bringing these two areas together and
    we have manipulated the UI, including some new widgets, using Kotlin code. However,
    while building the Note to self app, we have stumbled upon a couple of gaps in
    our knowledge. In this chapter, we will fill in the first of these blanks, and
    then, in the next chapter, we will use this new information to progress with the
    app. We currently have no way of managing large amounts of related data. Aside
    from declaring, initializing, and managing dozens, hundreds, or even thousands
    of properties or instances, how will we let the users of our app have more than
    one note? We will also take a quick diversion to learn about random numbers.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第15章，“处理数据和生成随机数”，显示我们正在取得良好的进展。我们对Android UI选项和Kotlin的基础知识有了一个全面的了解。在前几章中，我们开始将这两个领域结合起来，并使用Kotlin代码操作UI，包括一些新的小部件。然而，在构建Note
    to self应用程序时，我们遇到了一些知识上的空白。在本章中，我们将填补这些空白中的第一个，然后在下一章中，我们将使用这些新信息来继续应用程序。我们目前没有办法管理大量相关数据。除了声明，初始化和管理数十，数百甚至数千个属性或实例之外，我们如何让我们的应用程序用户拥有多个笔记？我们还将快速了解随机数。
- en: '[Chapter 16](ch16.html "Chapter 16. Adapters and Recyclers"), *Adapters and
    Recyclers*, first takes us through the theory of adapters and lists. We will then
    look at how we can use a `RecyclerAdapter` instance in Kotlin code and add a `RecyclerView`
    widget to the layout, which acts as a list for our UI, and then, through the apparent
    magic of the Android API, bind them together so that the `RecyclerView` instance
    displays the contents of the `RecyclerAdapter` instance and allows the user to
    scroll through the contents of an `ArrayList` instance full of `Note` instances.
    You have probably guessed that we will be using this technique to display our
    list of notes in the Note to self app.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第16章，“适配器和回收器”，首先带我们了解适配器和列表的理论。然后，我们将看看如何在Kotlin代码中使用`RecyclerAdapter`实例，并将`RecyclerView`小部件添加到布局中，该小部件充当我们的UI的列表，然后通过Android
    API的明显魔力将它们绑定在一起，以便`RecyclerView`实例显示`RecyclerAdapter`实例的内容，并允许用户滚动查看充满`Note`实例的`ArrayList`实例的内容。您可能已经猜到，我们将使用这种技术来显示Note
    to self应用程序中的笔记列表。
- en: '[Chapter 17](ch17.html "Chapter 17. Data Persistence and Sharing"), *Data Persistence
    and Sharing*, goes through a couple of different ways to save data to an Android
    device''s permanent storage. Also, for the first time, we will add a second `Activity`
    instance to our app. It often makes sense when implementing a separate "screen",
    such as a "Settings" screen, in our app to do so in a new `Activity` instance.
    We could go to the trouble of hiding the original UI and then showing the new
    UI in the same `Activity`, as we did in [Chapter 4](ch04.html "Chapter 4. Getting
    Started with Layouts and Material Design"), *Getting Started with Layouts and
    Material Design*, but this would quickly lead to confusing and error-prone code.
    So, we will see how to add another `Activity` instance and navigate the user between
    them.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第17章，“数据持久性和共享”，介绍了将数据保存到Android设备的永久存储的几种不同方法。此外，我们将首次向我们的应用程序添加第二个`Activity`实例。在我们的应用程序中实现一个单独的“屏幕”，例如“设置”屏幕时，将新的`Activity`实例添加到其中通常是有意义的。我们可以费力地隐藏原始UI，然后在同一个`Activity`中显示新的UI，就像我们在第4章，“使用布局和Material
    Design入门”中所做的那样，但这很快会导致令人困惑和容易出错的代码。因此，我们将看到如何添加另一个`Activity`实例并在它们之间引导用户。
- en: '[Chapter 18](ch18.html "Chapter 18. Localization"), *Localization*, is quick
    and simple, but what we will learn to do can make your app accessible to millions
    of potential users. We will see how to add additional languages, and we will see
    why adding text the correct way via String resources benefits us when it comes
    to adding multiple languages.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第18章，“本地化”，快速简单，但我们将学习的内容可以使您的应用程序可供数百万潜在用户使用。我们将看到如何添加其他语言，以及为什么通过字符串资源以正确的方式添加文本在添加多种语言时对我们有益。
- en: '[Chapter 19](ch19.html "Chapter 19. Animations and Interpolations"), *Animations
    and Interpolations*, explores how we can use the `Animation` class to make our
    UI a little less static and a bit more interesting. As we have come to expect,
    the Android API will allow us to do some quite advanced things with relatively
    straightforward code, and the `Animation` class is no different.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第19章，“动画和插值”，探讨了如何使用`Animation`类使我们的UI不那么静态，更有趣。正如我们所期望的那样，Android API将允许我们用相对简单的代码做一些相当高级的事情，`Animation`类也不例外。
- en: '[Chapter 20](ch20.html "Chapter 20. Drawing Graphics"), *Drawing Graphics*,
    is about the Android `Canvas` class and some related classes, such as `Paint`,
    `Color`, and `Bitmap`. When combined, these classes have great power when it comes
    to drawing on the screen. Sometimes, the default UI provided by the Android API
    isn''t what we need. If we want to make a drawing app, draw graphs, or perhaps
    make a game, we need to take control of every pixel that the Android device has
    to offer.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第20章，“绘图图形”，涉及Android的`Canvas`类和一些相关类，如`Paint`，`Color`和`Bitmap`。当这些类结合在一起时，在屏幕上绘图具有很大的能力。有时，Android
    API提供的默认UI并不是我们所需要的。如果我们想制作绘图应用程序，绘制图表，或者可能制作游戏，我们需要控制Android设备提供的每个像素。
- en: '[Chapter 21](ch21.html "Chapter 21. Threads and Starting the Live Drawing App"),
    *Threads and Starting the Live Drawing App*, gets us started on our next app.
    This app will be a kid''s-style drawing app where the user can draw on the screen
    using their finger. The drawing app that we create will be slightly different,
    however. The lines that the user draws will be comprised of particle systems that
    explode into thousands of pieces. We will call the project Live Drawing.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第21章，“线程和启动实时绘图应用程序”，让我们开始我们的下一个应用程序。这个应用程序将是一个儿童风格的绘画应用程序，用户可以用手指在屏幕上绘画。然而，我们创建的绘画应用程序将略有不同。用户绘制的线条将由粒子系统组成，这些粒子系统会爆炸成成千上万的碎片。我们将称这个项目为实时绘图。
- en: '[Chapter 22](ch22.html "Chapter 22. Particle Systems and Handling Screen Touches"),
    *Particle Systems and Handling Screen Touches*, builds on our real-time system
    that we implemented in the previous chapter using a thread. In this chapter, we
    will create the entities that will exist and evolve in this real-time system as
    if they have a mind of their own and form the appearance of the drawings that
    the user can create. We will also see how the user implements these entities by
    learning how to respond to interaction with the screen. This is different to interacting
    with a widget in a UI layout.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第22章，“粒子系统和处理屏幕触摸”，在上一章中使用线程实现了我们的实时系统。在本章中，我们将创建实体，它们将存在并在这个实时系统中演变，就好像它们有自己的思想，并形成用户可以创建的绘画外观。我们还将看到用户如何通过学习如何响应与屏幕的交互来实现这些实体。这与在UI布局中与小部件交互是不同的。
- en: '[Chapter 23](ch23.html "Chapter 23. Android Sound Effects and the Spinner Widget"),
    *Android Sound Effects and the Spinner Widget*, explores the SoundPool class and
    the different ways we use it depending on whether we just want to play sounds
    or go further and keep track of the sounds we are playing. At this point, we can
    then put everything we have learned into producing a cool sound demo app, which
    will also introduce us to a new UI widget; the Spinner.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第23章，“Android音效和Spinner小部件”，探讨了SoundPool类以及我们根据是否只想播放声音或进一步跟踪我们正在播放的声音而使用它的不同方式。在这一点上，我们可以将我们学到的一切都投入到制作一个很酷的声音演示应用中，这也将向我们介绍一个新的UI小部件；Spinner。
- en: '[Chapter 24](ch24.html "Chapter 24. Design Patterns, Multiple Layouts, and
    Fragments"), *Design Patterns, Multiple Layouts, and Fragments*, shows just how
    far we have come the start, when we were just setting up Android Studio. Back
    then, we went through everything step by step, but as we have proceeded, we have
    tried to show not just how to add x to y, or feature a to app b, but to enable
    you to use what you have learned in your own way in order to bring your own ideas
    to life. This chapter is more about your future apps than anything in the book
    so far. We will look at a few aspects of Kotlin and Android that you can use as
    a framework or template for making ever more exciting and complex apps at the
    same time as keeping the code manageable.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第24章，“设计模式、多个布局和片段”，展示了我们从一开始就设置Android Studio以来所走过的路程。当时，我们一步一步地进行了所有操作，但随着我们的进行，我们试图不仅仅是展示如何将x添加到y，或者将特性a添加到应用程序b，而是让您能够以自己的方式使用所学知识，以实现自己的想法。这一章更多地涉及您未来应用程序的内容，而不是书中迄今为止的任何内容。我们将看一些Kotlin和Android的方面，您可以将其用作框架或模板，以制作更加令人兴奋和复杂的应用程序，同时保持代码的可管理性。
- en: '[Chapter 25](ch25.html "Chapter 25. Advanced UI with Paging and Swiping"),
    *Advanced UI with Paging and Swiping*, explains that **paging** is the act of
    moving from page to page, and, on Android, we do this by swiping a finger across
    the screen. The current page then transitions in a direction and speed to match
    the finger movement. It is a useful and practical way to navigate around an app,
    but perhaps even more than this, it is an extremely satisfying visual effect for
    the user. Also, as with `RecyclerView`, we can selectively load just the data
    required for the current page and perhaps the data for the previous and next pages
    in anticipation. The Android API, as you would have come to expect, has a few
    solutions for achieving paging in a quite simple manner.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第25章，“具有分页和滑动的高级UI”，解释了**分页**是从一页到另一页的移动的行为，在Android上，我们通过在屏幕上滑动手指来实现这一点。当前页面会根据手指的移动方向和速度进行过渡。这是一个在应用程序中导航的有用和实用的方式，但也许更重要的是，对用户来说，这是一种极其令人满意的视觉效果。此外，与`RecyclerView`一样，我们可以选择性地仅加载当前页面所需的数据，也许是先前和下一页的数据。正如您所期望的那样，Android
    API有一些解决方案可以以相当简单的方式实现分页。
- en: '[Chapter 26](ch26.html "Chapter 26. Advanced UI with Navigation Drawer and
    Fragment"), *Advanced UI with Navigation Drawer and Fragment*, explores what is
    (arguably) the most advanced UI. `NavigationView`, or the navigation drawer (because
    of the way it slides out its content), can be created simply by choosing it as
    a template when you create a new project. We will do just that, and then we will
    examine the auto-generated code and learn how to interact with it. We will then
    use everything we know about the `Fragment` class to populate each of the "drawers"
    with different behaviors and views. Then, in the next chapter, we will learn about
    databases to add some new functionality to each `Fragment`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第26章，“带有导航抽屉和片段的高级UI”，探讨了（可以说是）最高级的UI。`NavigationView`，或者导航抽屉（因为它滑出内容的方式），可以通过在创建新项目时选择它作为模板来简单创建。我们将这样做，然后我们将检查自动生成的代码，并学习如何与其交互。然后，我们将使用我们对`Fragment`类的所有了解来填充每个“抽屉”具有不同行为和视图。然后，在下一章中，我们将学习关于数据库，以为每个`Fragment`添加一些新功能。
- en: '[Chapter 27](ch27.html "Chapter 27. Android Databases"), *Android Databases*,
    explains that if we are going to make apps that offer our users significant features,
    then almost certainly we are going to need a way to manage, store, and filter
    significant amounts of data. It is possible to efficiently store very large amounts
    of data with JSON, but when we need to use that data selectively rather than simply
    restricting ourselves to the options of "save everything" and "load everything,"
    we need to think about which other options are available. As so often, it makes
    sense to use the solutions provided in the Android API. As we have seen, `JSON`
    and `SharedPreferences` classes have their place but at some point, we need to
    move on to using real databases for real-world solutions. Android uses the SQLite
    database management system and, as you would expect, there is an API to make it
    as easy as possible.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[第27章](ch27.html "第27章。Android数据库") *Android数据库*，解释了如果我们要制作提供给用户重要功能的应用程序，那么几乎肯定我们需要一种管理、存储和过滤大量数据的方法。使用JSON可以高效地存储大量数据，但当我们需要有选择地使用这些数据而不仅仅限制在“保存所有”和“加载所有”的选项时，我们需要考虑还有哪些其他选项可用。像往常一样，使用Android
    API中提供的解决方案是有意义的。正如我们所见，`JSON`和`SharedPreferences`类有其用武之地，但在某个时候，我们需要转而使用真正的数据库来解决现实世界的问题。Android使用SQLite数据库管理系统，正如您所期望的那样，有一个API可以尽可能地简化它。'
- en: '[Chapter 28](ch28.html "Chapter 28. A Quick Chat Before You Go"), *A Quick
    Chat Before You Go*, contains a few ideas and pointers that you might like to
    look at before rushing off and making your own apps.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[第28章](ch28.html "第28章。告别前的快速交谈") *告别前的快速交谈*，包含了一些想法和指针，您可能在匆忙离开并制作自己的应用程序之前想要看看。'
- en: To get the most out of this book
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用本书
- en: To succeed with this book, you don't need any experience whatsoever. If you
    are confident with your operating system of choice (Windows, Mac, or Linux), you
    can learn to make Android apps while learning the Kotlin programming language.
    Learning to develop professional quality apps is a journey that anybody can embark
    upon and stay on for as long as they want.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功阅读本书，您不需要任何经验。如果您对自己选择的操作系统（Windows、Mac或Linux）有信心，您可以学习使用Kotlin编程语言制作Android应用程序。学习开发专业质量的应用程序是任何人都可以开始并坚持下去的旅程。
- en: If you do have previous programming (Kotlin, Java, or any other language), Android,
    or other development experience, then you will make faster progress with the earlier
    chapters.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您具有以前的编程（Kotlin、Java或任何其他语言）、Android或其他开发经验，那么您将在前几章中取得更快的进展。
- en: Download the example code files
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: 'You can download the code files by following these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register at [http://www.packtpub.com](http://www.packtpub.com).
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[http://www.packtpub.com](http://www.packtpub.com)上登录或注册。
- en: Select the **SUPPORT** tab.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**SUPPORT**选项卡。
- en: Click on **Code Downloads & Errata**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Code Downloads & Errata**。
- en: Enter the name of the book in the **Search** box and follow the on-screen instructions.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入书名，并按照屏幕上的说明操作。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，请确保使用最新版本的解压缩或提取文件夹：
- en: WinRAR / 7-Zip for Windows
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinRAR / 7-Zip for Windows
- en: Zipeg / iZip / UnRarX for Mac
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipeg / iZip / UnRarX for Mac
- en: 7-Zip / PeaZip for Linux
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7-Zip / PeaZip for Linux
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Android-Programming-with-Kotlin-for-Beginners](https://github.com/PacktPublishing/Android-Programming-with-Kotlin-for-Beginners).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/Android-Programming-with-Kotlin-for-Beginners](https://github.com/PacktPublishing/Android-Programming-with-Kotlin-for-Beginners)。如果代码有更新，将在现有的GitHub存储库上进行更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有来自我们丰富书籍和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)上找到。去看看吧！
- en: Download the color images
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载彩色图像
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781789615401_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781789615401_ColorImages.pdf).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个PDF文件，其中包含本书中使用的屏幕截图/图表的彩色图像。您可以在这里下载：[https://www.packtpub.com/sites/default/files/downloads/9781789615401_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781789615401_ColorImages.pdf)。
- en: Conventions used
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了许多文本约定。
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    For example; "Mount the downloaded `WebStorm-10*.dmg` disk image file as another
    disk in your system."'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeInText`：指示文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄。例如：“将下载的`WebStorm-10*.dmg`磁盘映像文件挂载为系统中的另一个磁盘。”'
- en: 'A block of code is set as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关的行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    the screen, for example, in menus or dialog boxes, also appear in the text like
    this. For example: "If not, click on the **Logcat** tab"'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示一个新术语，一个重要的词，或者你在屏幕上看到的词，例如在菜单或对话框中，也会在文本中出现。例如：“如果没有，请点击**Logcat**选项卡”'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear like this.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会出现在这样。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会出现在这样。
- en: Get in touch
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系我们
- en: Feedback from our readers is always welcome.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的读者的反馈总是受欢迎的。
- en: '**General feedback**: Email `feedback@packtpub.com`, and mention the book''s
    title in the subject of your message. If you have questions about any aspect of
    this book, please email us at `questions@packtpub.com`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般反馈**：发送电子邮件至`feedback@packtpub.com`，并在主题中提及书名。如果您对本书的任何方面有疑问，请发送电子邮件至`questions@packtpub.com`与我们联系。'
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book we would
    be grateful if you would report this to us. Please visit, [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**勘误**：尽管我们已经尽一切努力确保内容的准确性，但错误确实会发生。如果您在这本书中发现了错误，我们将不胜感激，如果您能向我们报告。请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的书，点击勘误提交表格链接，并输入详细信息。'
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packtpub.com` with a
    link to the material.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**盗版**：如果您在互联网上发现我们作品的任何形式的非法副本，我们将不胜感激，如果您能向我们提供位置地址或网站名称。请通过`copyright@packtpub.com`与我们联系，并附上材料的链接。'
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [http://authors.packtpub.com](http://authors.packtpub.com).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您有兴趣成为作者**：如果有您在某个专题上有专业知识，并且有兴趣撰写或为一本书做出贡献，请访问[http://authors.packtpub.com](http://authors.packtpub.com)。'
- en: Reviews
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评论
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请留下评论。一旦您阅读并使用了这本书，为什么不在购买它的网站上留下评论呢？潜在的读者可以看到并使用您的公正意见来做出购买决定，我们在Packt可以了解您对我们产品的看法，我们的作者可以看到您对他们的书的反馈。谢谢！
- en: For more information about Packt, please visit [packtpub.com](http://packtpub.com).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Packt的更多信息，请访问[packtpub.com](http://packtpub.com)。
