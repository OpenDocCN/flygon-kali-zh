["```cs\npublic class LoanRepository\n{\n    private DbContext dbContext;\n\n    public LoanRepository(DbContext dbContext)\n    {\n        this.dbContext=dbContext;\n    }\n\n    public List<CarLoan> GetCarLoans()\n    {\n        return dbContext.CarLoan;\n    }\n}\n```", "```cs\npublic class LoanRepository\n{\n    private DbContext dbContext;\n\n    public LoanRepository(DbContext dbContext)\n    {\n        this.dbContext=dbContext;\n    }\n}\n```", "```cs\npublic class LoanService\n{    \n    public List<Loan> GetBadCarLoans(List<Loan> carLoans)\n    {\n        List<Loan> badLoans= new List<Loan>();\n        //do business logic computations on the loans\n        return badLoans;\n    }\n}\n```", "```cs\n[Fact]\n public void Test_GetBadCarLoans_ShouldReturnLoans()\n {\n    List<Loan> loans= new List<Loan>();\n    loans.Add(new Loan{Amount=120000, Rate=12.5, ServiceYear=5, HasDefaulted=false});\n    loans.Add(new Loan{Amount=150000, Rate=12.5, ServiceYear=4, HasDefaulted=true});\n    loans.Add(new Loan{Amount=200000, Rate=12.5, ServiceYear=5, HasDefaulted=false});\n\n    LoanService loanService= new LoanService();\n    List<Loan> badLoans = loanService.GetBadCarLoans(loanDTO);\n    Assert.NotNull(badLoans);\n }\n```", "```cs\npublic class LoanService\n{\n    private ILoanRepository loanRepository;\n\n    public LoanService(ILoanRepository loanRepository)\n    {\n        this.loanRepository=loanRepository;\n    }\n\n    public List<Loan> GetBadCarLoans()\n    {\n        List<Loan> badLoans= new List<Loan>();\n        var carLoans=loanRepository.GetCarLoans();\n        //do business logic computations on the loans\n        return badLoans;\n    }\n}\n```", "```cs\n public class LoanServiceTest\n {\n        private Mock<ILoanRepository> loanRepository;\n        private LoanService loanService;\n        public LoanServiceTest()\n        {\n            loanRepository= new Mock<ILoanRepository>();\n            List<Loan> loans = new List<Loan>\n            {\n                new Loan{Amount = 120000, Rate = 12.5, ServiceYear = 5, HasDefaulted = false },\n                new Loan {Amount = 150000, Rate = 12.5, ServiceYear = 4, HasDefaulted = true },\n                new Loan { Amount = 200000, Rate = 12.5, ServiceYear = 5, HasDefaulted = false }\n            };\n            loanRepository.Setup(x => x.GetCarLoans()).Returns(loans);\n            loanService= new LoanService(loanRepository.Object);\n        }\n\n        [Fact]\n        public void Test_GetBadCarLoans_ShouldReturnLoans()\n        {\n            List<Loan> badLoans = loanService.GetBadCarLoans();\n            Assert.NotNull(badLoans);\n        }\n    }\n```", "```cs\npublic class LoanRepositoryMock : ILoanRepository\n{\n    public List<Loan> GetCarLoans()\n    {\n        List<Loan> loans = new List<Loan>\n        {\n            new Loan{Amount = 120000, Rate = 12.5, ServiceYear = 5, HasDefaulted = false },\n            new Loan {Amount = 150000, Rate = 12.5, ServiceYear = 4, HasDefaulted = true },\n            new Loan { Amount = 200000, Rate = 12.5, ServiceYear = 5, HasDefaulted = false }\n        };\n        return loans;\n    }\n}\n```", "```cs\npublic class LoanServiceTest\n{\n    private ILoanRepository loanRepository;\n    private LoanService loanService;\n\n    public LoanServiceTest()\n    {\n        loanRepository= new LoanRepositoryMock();\n        loanService= new LoanService(loanRepository);\n    }\n\n    [Fact]\n    public void Test_GetBadCarLoans_ShouldReturnLoans()\n    {\n        List<Loan> badLoans = loanService.GetBadCarLoans();\n        Assert.NotNull(badLoans);\n    }\n}\n```", "```cs\nInstall-Package Moq\n```", "```cs\npublic interface ILoanRepository\n{\n   List<LoanType> GetLoanTypes();\n   List<Loan> GetCarLoans();\n}\n```", "```cs\npublic class LoanRepository :ILoanRepository\n{\n    public List<LoanType> GetLoanTypes()\n    {\n        List<LoanType> loanTypes= new List<LoanType>();\n        using (LoanContext context = new LoanContext())\n        {\n            loanTypes=context.LoanType.ToList();\n        }\n        return loanTypes;\n    }\n\n    public List<Loan> GetCarLoans()\n    {\n        List<Loan> loans = new List<Loan>();\n        using (LoanContext context = new LoanContext())\n        {\n            loans = context.Loan.ToList();\n        }\n        return loans;\n    }\n}\n```", "```cs\nMock<ILoanRepository> loanRepository = new Mock<ILoanRepository>();\n```", "```cs\nList<Loan> loans = new List<Loan>\n{\n    new Loan{Amount = 120000, Rate = 12.5, ServiceYear = 5, HasDefaulted = false },\n    new Loan {Amount = 150000, Rate = 12.5, ServiceYear = 4, HasDefaulted = true },\n    new Loan { Amount = 200000, Rate = 12.5, ServiceYear = 5, HasDefaulted = false }\n};\n```", "```cs\nMock<ILoanRepository> loanRepository = new Mock<ILoanRepository>();\nloanRepository.Setup(x => x.GetCarLoans()).Returns(loans);\n```", "```cs\nloanRepository.Setup(x => x.GetCarLoans()).Returns(() => loans);\n```", "```cs\nloanRepository.Setup(x => x.GetCarLoans(It.IsAny<string>())).Returns(loans);\n```", "```cs\nRandom random = new Random();\nloanRepository.Setup(x => x.GetCarLoans()).Returns(loans).Callback(() => loans.GetRange(0,random.Next(1, 3));\n```", "```cs\nloanRepository.Setup(x => x.GetCarLoans()).Throws<InvalidOperationException>();\n```", "```cs\npublic interface ILoanRepository\n{\n   LoanType LoanType{get;set;}\n   float Rate {get;set;}\n\n   List<LoanType> GetLoanTypes();\n   List<Loan> GetCarLoans();\n}\n```", "```cs\nMock<ILoanRepository> loanRepository = new Mock<ILoanRepository>();\nloanRepository.Setup(x => x.LoanType, LoanType.CarLoan);\nloanRepository.Setup(x => x.Rate, 12.5);\n```", "```cs\nloanRepository.SetupSet(x => x.Rate = 12.5F);\n```", "```cs\nloanRepository.SetupGet(x => x.Rate);\n```", "```cs\nloanRepository.SetupSet(x => x.CarLoan.Person.Age= 40);\n```", "```cs\n loanRepository.SetupAllProperties();\n```", "```cs\npublic List<Person> GetCarLoanDefaulters(int year)\n{\n    List<Person> defaulters = new List<Person>();\n    using (LoanContext context = new LoanContext())\n    {\n        defaulters = context.Loan.Where(c => c.HasDefaulted \n                     && c.ServiceYear == year).Select(c => c.Person).ToList();\n    }\n    return defaulters;\n}\n```", "```cs\nList<Person> people = new List<Person>\n{\n    new Person { FirstName = \"Donald\", LastName = \"Duke\", Age =30},\n    new Person { FirstName = \"Ayobami\", LastName = \"Adewole\", Age =20}\n};\n\nMock<ILoanRepository> loanRepository = new Mock<ILoanRepository>();\nloanRepository.Setup(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 5, Range.Inclusive))).Returns(people);\n```", "```cs\npublic int IsOutOfRange() \n{ \n  return Match.Create<int>(x => x > 12);\n}\n```", "```cs\nloanRepository.Setup(x => x.GetCarLoanDefaulters(IsOutOfRange())).Throws<ArgumentException>();\n```", "```cs\nMock<ILoanRepository> loanRepository = new Mock<ILoanRepository>();\nloanRepository.Raise(x => x.LoanDefaulterNotification+=null, EventArgs.Empty);\n```", "```cs\nloanRepository.Setup(x => x.GetCarLoans()).Raises(x=> x.LoanDefaulterNotification+=null, new LoanDefualterEventArgs{OK=true});\n```", "```cs\nList<Person> people = new List<Person>\n{\n    new Person { FirstName = \"Donald\", LastName = \"Duke\", Age =30},\n    new Person { FirstName = \"Ayobami\", LastName = \"Adewole\", Age =20}\n};\n\nMock<ILoanRepository> loanRepository = new Mock<ILoanRepository>();\n\nloanRepository.Setup(x => x.GetCarLoanDefaulters())\n.Callback(() => CarLoanDefaultersCallbackAfter ())\n.Returns(() => people)\n.Callback(() => CarLoanDefaultersCallbackAfter());\n```", "```cs\npublic void CarLoanDefaultersCallback()\n{\n    people.Add(new Person { FirstName = \"John\", LastName = \"Doe\", Age =40});\n}\n\npublic void CarLoanDefaultersCallbackAfter()\n{\n    people.RemoveAt(0);\n}\n```", "```cs\nloanRepository= new Mock<ILoanRepository>(MockBehavior.Loose);\n```", "```cs\nloanRepository= new Mock<ILoanRepository>(MockBehavior.Strict);\n```", "```cs\nloanRepository= new Mock<ILoanRepository>{CallBase=true};\n```", "```cs\nvar mockRepository = new MockRepository(MockBehavior.Strict) { DefaultValue = DefaultValue.Mock };\nvar loanRepository = repository.Create<ILoanRepository>(MockBehavior.Loose);\nvar userRepository = repository.Create<IUserRepository>();\nmockRepository.Verify();\n```", "```cs\nvar loanRepository = new Mock<ILoanRepository>();\nloanRepository.Setup(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 5, Range.Inclusive))).Returns(people);\n\nloanRepository.As<IDisposable>().Setup(disposable => disposable.Dispose());\n```", "```cs\npublic class LoanService\n{\n    private ILoanRepository loanRepository;\n    public LoanService(ILoanRepository loanRepository)\n    {\n        this.loanRepository = loanRepository;\n    }\n\n    public List<Person> GetOlderCarLoanDefaulters(int year)\n    {\n        List<Person> defaulters = loanRepository.GetCarLoanDefaulters(year);\n        var filteredDefaulters = defaulters.Where(x => x.Age > 20).ToList();\n        return filteredDefaulters;\n    }\n}\n```", "```cs\npublic class LoanServiceTest\n{\n    private Mock<ILoanRepository> loanRepository;\n    private LoanService loanService;\n    public  LoanServiceTest()\n    {\n        loanRepository= new Mock<ILoanRepository>();\n        List<Person> people = new List<Person>\n        {\n            new Person { FirstName = \"Donald\", LastName = \"Duke\", Age =30},\n            new Person { FirstName = \"Ayobami\", LastName = \"Adewole\", Age =20}\n        };\n        loanRepository.Setup(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1,12,Range.Inclusive))).Returns(() => people);\n        loanService = new LoanService(loanRepository.Object);\n   }\n}\n```", "```cs\n[Fact]\npublic void Test_GetOlderCarLoanDefaulters_ShouldReturnList()\n{\n    List<Person> defaulters = loanService.GetOlderCarLoanDefaulters(12);\n    Assert.NotNull(defaulters);\n    Assert.All(defaulters, x => Assert.Contains(\"Donald\", x.FirstName));\n    loanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.Once());\n}\n```", "```cs\n[Fact]\npublic void Test_GetOlderCarLoanDefaulters_ShouldReturnList()\n{\n    List<Person> defaulters = loanService.GetOlderCarLoanDefaulters(12);\n    Assert.NotNull(defaulters);\n    Assert.All(defaulters, x => Assert.Contains(\"Donald\", x.FirstName));\n    loanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.AtLeast(2));\n}\n```", "```cs\n[Fact]\npublic void Test_GetOlderCarLoanDefaulters_ShouldReturnList()\n{\n    List<Person> defaulters = loanService.GetOlderCarLoanDefaulters(12);\n    Assert.NotNull(defaulters);\n    Assert.All(defaulters, x => Assert.Contains(\"Donald\", x.FirstName));\n    loanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.AtLeastOnce);\n}\n```", "```cs\nloanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.AtMost(1));\n```", "```cs\nloanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.AtMostOnce);\n```", "```cs\nloanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.Between(1,2,Range.Inclusive));\n```", "```cs\n[Fact]\npublic void Test_GetOlderCarLoanDefaulters_ShouldReturnList()\n{\n    List<Person> defaulters = loanService.GetOlderCarLoanDefaulters(12);\n    Assert.NotNull(defaulters);\n    Assert.All(defaulters, x => Assert.Contains(\"Donald\", x.FirstName));\n    loanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.Exactly(2));\n}\n```", "```cs\nloanRepository.Verify(x => x.GetCarLoanDefaulters(It.IsInRange<int>(1, 12, Range.Inclusive)), Times.Never);\n```", "```cs\nloanRepository.VerifyGet(x => x.Rate);\n```", "```cs\nloanRepository.VerifySet(x => x.Rate);\n```", "```cs\nloanRepository.VerifySet(x => x.Rate = 12.5);\n```", "```cs\n var loanRepository = Mock.Of<ILoanRepository>\n                    (x => x.Rate==12.5F &&\n                         x.LoanType.Name==\"CarLoan\"&& LoanType.Id==3 );\n```", "```cs\npublic class TestDefaultValueProvider : LookupOrFallbackDefaultValueProvider\n{\n    public TestDefaultValueProvider()\n    {\n        base.Register(typeof(string), (type, mock) => string.empty);\n        base.Register(typeof(List<>), (type, mock) => Activator.CreateInstance(type));\n    }\n}\n```", "```cs\nvar loanRepository = new Mock<ILoanRepository> { DefaultValueProvider = new TestDefaultValueProvider()};\nvar objectName = loanRepository.Object.Name;\n```", "```cs\n[assembly:InternalsVisibleTo(\"LoanApplication.Tests.Unit\")\n```"]