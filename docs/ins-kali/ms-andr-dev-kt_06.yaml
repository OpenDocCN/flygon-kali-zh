- en: Permissions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限
- en: Hello again! Can you believe that one important part of this book is already
    behind us? We are finished with the user interface, and, now, we are heading into
    a more complex part of the book--the system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你好！你能相信这本书的一个重要部分已经在我们身后了吗？我们已经完成了用户界面，现在，我们正在进入这本书更复杂的部分——系统。
- en: In this chapter, and the ones following, we will dig deep into the structure
    of the Android system. You will learn about permissions, database handling, preferences,
    concurrency, services, messaging, the backend, APIs, and high performances.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章以及接下来的章节中，我们将深入了解 Android 系统的结构。您将学习有关权限、数据库处理、首选项、并发、服务、消息传递、后端、API 和高性能的知识。
- en: However, you shouldn't let yourself be fooled; this book and its content does
    not cover the entire framework. That is simply impossible; Android is such a vast
    framework that it can take you years to completely master it. Here, we are merely
    penetrating into the world of Android and Kotlin.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不要被愚弄；这本书及其内容并未涵盖整个框架。那是不可能的；Android 是一个如此庞大的框架，完全掌握它可能需要数年时间。在这里，我们只是深入了解
    Android 和 Kotlin 的世界。
- en: However, don't be discouraged! In this book, we will give you knowledge and
    skills needed for mastering both Kotlin and Android. In this chapter, precisely,
    we will discuss permissions in Android. You will learn what are permissions, what
    are they used for, and, most importantly, why we need (with strong emphasis on
    need) to use them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不要灰心！在这本书中，我们将为您提供掌握 Kotlin 和 Android 所需的知识和技能。在本章中，我们将讨论 Android 中的权限。您将学习权限是什么，它们用于什么，最重要的是，为什么我们需要（强调需要）使用它们。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Permissions from Android Manifest
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Android 清单的权限
- en: Requesting permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求权限
- en: Permission handling in the Kotlin way
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 Kotlin 方式处理权限
- en: Permissions from Android Manifest
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自 Android 清单的权限
- en: Android applications operate in their own process and are separated from the
    rest of the operating system. Because of this, in order to perform some system
    specific operations, it's required to request them. An example of such permission
    requests are requests to use Bluetooth, retrieve the current GPS location, send
    SMS messages, or read from or write to file system. Permissions grant access to
    various device features. There are several ways to deal with permissions. We will
    start with a very base using manifest.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android 应用在它们自己的进程中运行，并且与操作系统的其余部分分离。因此，为了执行一些特定于系统的操作，需要请求它们。这样的权限请求的一个例子是请求使用蓝牙、检索当前
    GPS 位置、发送短信，或者读取或写入文件系统。权限授予对各种设备功能的访问。处理权限有几种方法。我们将从使用清单开始。
- en: First of all, we must determine what permissions are needed. It can happen that
    during the installation procedure, a user decides not to install an application
    because there are too many permissions. For example, a user can ask himself why
    an application requires the send SMS functionality when an application itself
    is just a simple image gallery application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须确定需要哪些权限。在安装过程中，用户可能决定不安装应用程序，因为权限太多。例如，用户可能会问为什么一个应用程序需要发送短信功能，当应用程序本身只是一个简单的图库应用程序。
- en: 'For Journaler, the application we are developing in this book, we will need
    the following permissions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们在本书中开发的 Journaler 应用程序，我们将需要以下权限：
- en: Read the GPS coordinates because we want each note we create to have coordinates
    associated if we want to
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取 GPS 坐标，因为我们希望我们创建的每个笔记都有相关联的坐标
- en: We will need access to the internet, so we can later execute API calls
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要访问互联网，这样我们就可以稍后执行 API 调用
- en: Boot complete event, we will need it so the application service can do synchronization
    with the backend each time we reboot our phone
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动完成事件，我们需要它，这样应用程序服务可以在每次重新启动手机时与后端进行同步
- en: Reading and writing external storage so we can read the data or store it
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和写入外部存储，以便我们可以读取数据或存储数据
- en: Access network state so we know if there is a connection to the internet available
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问网络状态，以便我们知道是否有可用的互联网连接
- en: Use vibration so we can vibrate when we received something from the backend
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用振动，这样我们就可以在从后端接收到东西时振动
- en: 'Open the `AndroidManifest.xml` file and update it with the following permissions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `AndroidManifest.xml` 文件，并使用以下权限进行更新：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Names for permissions we just requested are pretty much self-explanatory and
    they are covering all the points we mentioned. Besides these permissions, you
    can request some others as well. Take a look at the following names for each.
    You will be surprised what you can actually request:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚请求的权限的名称基本上是不言自明的，并且它们涵盖了我们提到的所有要点。除了这些权限，您还可以请求一些其他权限。看一下每个权限的名称，您会惊讶于您实际上可以请求到什么：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Requesting permissions
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求权限
- en: 'After the Android SDK version, 23 permissions are required to be requested
    at runtime (not for all of them). This means that we need to request them from
    the code as well. We will demonstrate how to do that from our application. We
    will request required permissions for the GPS location obtaining as a user opens
    the application. The user will get a dialog to approve permission if there is
    not any approved. Open your `BaseActivity` class and extend it as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android SDK 版本 23 之后，需要在运行时请求权限（并非所有权限）。这意味着我们也需要从代码中请求它们。我们将演示如何从我们的应用程序中执行此操作。我们将在用户打开应用程序时请求获取
    GPS 位置所需的权限。如果没有获得批准，用户将收到一个对话框以批准权限。打开您的 `BaseActivity` 类，并将其扩展如下：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So what exactly is going on in this code? We will explain all lines from top
    to bottom.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这段代码到底是在做什么呢？我们将从上到下解释所有行。
- en: In the `companion` object, we defined the ID for our request. We will wait for
    the result for that ID. In the `onCreate()` method, we called the `requestGpsPermissions()`
    method that actually makes the permission request under the ID we defined. The
    result of the permission request will be available in the `onRequestPermissionsResult()`
    overrode method. As you can see, we are logging permission request results. The
    application can now retrieve the GPS data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`companion`对象中，我们定义了我们请求的ID。我们将等待该ID的结果。在`onCreate()`方法中，我们调用了`requestGpsPermissions()`方法，实际上是在我们定义的ID下进行权限请求。权限请求的结果将在`onRequestPermissionsResult()`重写方法中可用。如你所见，我们正在记录权限请求的结果。应用现在可以检索GPS数据。
- en: 'The principle is the same for all other Android permissions. Build your application
    and run it. You will be asked about permissions as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有其他安卓权限，原则是相同的。构建你的应用并运行它。将会询问你权限，如下截图所示：
- en: '![](img/ae6af33a-4ea1-4a16-ab34-4801233b8808.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae6af33a-4ea1-4a16-ab34-4801233b8808.png)'
- en: Doing it the Kotlin way
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用Kotlin的方式来做
- en: What happens if our application requires a lot of permissions that must be handled
    through the code? It happens that we have a lot of code handling different permission
    requests. This means that we have a lot of boilerplate code! Luckily for us, we
    are using Kotlin. Kotlin will be our tool to make things simpler!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序需要通过代码处理很多权限，会发生什么？这意味着我们有很多处理不同权限请求的代码。幸运的是，我们正在使用Kotlin。Kotlin将是我们简化事情的工具！
- en: 'Create a new package called `permission`. Then create two new Kotlin files
    as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`permission`的新包。然后创建两个新的Kotlin文件如下：
- en: '`PermissionCompatActivity` and `PermissionRequestCallback`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`PermissionCompatActivity`和`PermissionRequestCallback`。'
- en: 'Let''s define the permission request callback as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义权限请求回调如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will be the `callback` that will be fired when permissions are resolved.
    Then, define our permission `compat` activity:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是在解决权限时触发的`callback`。然后，定义我们的权限`compat`活动：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The idea behind this class is the following--we exposed end-user to the `requestPermissions()`
    method that accepts a variable number of arguments representing permissions we
    are interested in. We can pass the `callback` (the interface we just defined)
    that is optional. If we do not pass our own `callback`, the default one will be
    used. After permissions are resolved, we fire `callback`s. We consider permissions
    resolving successful, only if all permissions are granted.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类的理念是--我们向终端用户公开了`requestPermissions()`方法，该方法接受表示我们感兴趣的权限的可变数量的参数。我们可以传递（我们刚刚定义的）可选的`callback`（接口）。如果我们不传递自己的`callback`，将使用默认的`callback`。在权限解决后，我们触发`callback`。只有当所有权限都被授予时，我们才认为权限解决成功。
- en: 'Let''s update our `BaseActivity` class as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的`BaseActivity`类如下：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we removed all previous permissions-related code from the `BaseActivity`
    class and replaced it with a single `requestPermission()` call.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们从`BaseActivity`类中删除了所有先前与权限相关的代码，并用一个`requestPermission()`调用替换了它。
- en: Summary
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was maybe short, but the information that you learned was extremely
    valuable. Permissions are needed for every Android application. They are there
    to protect both the users and the developers. And, as you have seen, there are
    quite a lot different permissions that you can use depending on your needs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本章可能很短，但你学到的信息非常宝贵。每个安卓应用都需要权限。它们存在是为了保护用户和开发者。正如你所见，根据你的需求，有很多不同的权限可以使用。
- en: In the next chapter, we will continue with the system part, and you will learn
    about database handling.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续讲解系统部分，你将学习数据库处理。
