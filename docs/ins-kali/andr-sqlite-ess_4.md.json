["```kt\n    public class ContactsMainActivity extends Activity implements OnClickListener, LoaderManager.LoaderCallbacks<Cursor> {\u2026}\n    ```", "```kt\n    getLoaderManager().initLoader(CUR_LOADER, null, this);\n    ```", "```kt\n    @Override\n    public Loader<Cursor> onCreateLoader(int loaderID, \n    Bundle bundle)\n    {\n      switch (loaderID) {\n      case CUR_LOADER:\n        return new CursorLoader(this, PersonalContactContract.CONTENT_URI,\n          PersonalContactContract.PROJECTION_ALL, null, null, null );\n        default: return null;\n       }\n    }\n    ```", "```kt\n    public CursorLoader (Context context, Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)\n    ```", "```kt\n    @Override\n    public void onLoadFinished(Loader<Cursor> loader, Cursor data)\n    {\n      this.mAdapter.changeCursor(data);\n    }\n    ```", "```kt\n    public class CustomCursorAdapter extends CursorAdapter\n    {\n       ...\n      public void bindView(View view, Context arg1, Cursor cursor)\n      {\n        finalImageView contact_photo = (ImageView) view\n          .findViewById(R.id.contact_photo);\n      ...\n      ...\n      contact_email.setText(cursor.getString(cursor\n           .getColumnIndexOrThrow(DatabaseConstants.TABLE_ROW_EMAIL)));\n      setImage(cursor.getBlob(cursor\n           .getColumnIndex(DatabaseConstants.TABLE_ROW_PHOTOID)),\n          contact_photo);\n       }\n\n       @Override\n      public View newView(Context arg0, Cursor arg1, ViewGroup arg2)\n      {\n        final View view = LayoutInflater.from(context).inflate(\n          R.layout.contact_list_row, null, false);\n        return view;\n       }\n    ...\n    }\n    ```", "```kt\n    @Override\n    public void onLoaderReset(Loader<Cursor> loader) \n    {\n      this.mAdapter.changeCursor(null);\n\n        }\n    ```", "```kt\n    cr.setNotificationUri(getContext().getContentResolver(),uri);\n    ```", "```kt\n    getContext().getContentResolver().notifyChange(ur,null);\n    ```", "```kt\n    resolver.insert(PersonalContactContract.CONTENT_URI, prepareData(contact));\n    ```", "```kt\n    <provider\n    android:name=\"com.personalcontactmanager.provider.PersonalContactProvider\"\n    android:authorities=\"com.personalcontactmanager.provider\"\n    android:readPermission=\"com.personalcontactmanager.provider.read\"\n    android:exported=\"true\"\n    android:grantUriPermissions=\"true\"\n    >\n    ```", "```kt\n    <permission\n    android:name=\"com.personalcontactmanager.provider.read\"\n    android:icon=\"@drawable/ic_launcher\"\n    android:label=\"Contact Manager\"\n    android:protectionLevel=\"normal\" >\n    </permission>  \n    ```", "```kt\n    <uses-permission android:name=\"com.personalcontactmanager.provider.read\" />\n    ```", "```kt\n    public class MainActivity extends Activity\n    {\n      TextView showResult;\n\n       @Override\n       protected void onCreate(Bundle savedInstanceState)\n       {  \n    super.onCreate(savedInstanceState);\n      setContentView(R.layout.activity_main);\n      showResult = (TextView) findViewById(R.id.showResult);\n      InitializeSQLCipher();\n       }\n\n       private void InitializeSQLCipher()\n       {\n    SQLiteDatabase.loadLibs(this);\n      File databaseFile = getDatabasePath(\"test.db\");\n      databaseFile.mkdirs();\n      databaseFile.delete();\n      SQLiteDatabase database = SQLiteDatabase\n          .openOrCreateDatabase(databaseFile, \"test123\", null);\n      database.execSQL(\"create table t1(a, b)\");\n      database.execSQL(\"insert into t1(a, b) values(?, ?)\",\n            new Object[] {\"I am \", \"Encrypted\" });\n       }\n\n       public void runQuery(View v)\n       {\n      File databaseFile = getDatabasePath(\"test.db\");\n      SQLiteDatabase database = SQLiteDatabase.openOrCreateDatabase(\n          databaseFile, \"test123\", null);\n      String selection = \"select * from t1\";\n      Cursor c = database.rawQuery(selection, null);\n      c.moveToFirst();\n      showResult.setText(c.getString(c.getColumnIndex(\"a\")) + \n    c.getString(c.getColumnIndex(\"b\")));\n        }\n    }\n    ```", "```kt\n    import android.database.Cursor;\n    import android.database.sqlite.SQLiteDatabase;\n    ```", "```kt\n    import net.sqlcipher.Cursor;\n    import net.sqlcipher.database.SQLiteDatabase;\n    ```", "```kt\npublic void onUpgrade(SQLiteDatabase db, int oldVersion,int newVersion)\n{\n  String DROP_TABLE = \"DROP TABLE IF EXISTS \" + TABLE_NAME;\n  db.execSQL(DROP_TABLE);\n  onCreate(db);\n}\n```", "```kt\nprivate static final int DB_VERSION = 1;\n```", "```kt\nprivate static final int DB_VERSION = 3;\n```", "```kt\n\npublic CustomSQLiteOpenHelper(Context context) \n{\n  super(context, DB_NAME, null, DB_VERSION);\n}  \n```", "```kt\npublic void onUpgrade(SQLiteDatabase db, int oldVersion,int newVersion)\n{\nswitch(oldVersion) {\n   case 1: db.execSQL(DATABASE_CREATE_MAIN_TABLE);\n   case 2: db.execSQL(DATABASE_CREATE_MAIN_TABLE);\n   case 3: db.execSQL(DATABASE_CREATE_DEL_TABLE);\n   }\n}\n```", "```kt\nif (oldVersion<2) {db.execSQL(DATABASE_CREATE_MORE_TABLE); } \nif (oldVersion<3) {db.execSQL(DATABASE_CREATE_DEL_TABLE); }\n```", "```kt\n    public class MyApplication extends com.activeandroid.app.Application \n    {\n       @Override\n    public void onCreate()\n    {\n         super.onCreate();\n         ActiveAndroid.initialize(this);\n        }\n\n       @Override\n    public void onTerminate()\n    {\n         super.onTerminate();\n         ActiveAndroid.dispose();\n       }\n\n    }\n    ```", "```kt\n    <application\n      android:name=\"com.active.android.MyApplication\">\n      <meta-data\n         android:name=\"AA_DB_NAME\"\n         android:value=\"test.db\" />\n      <meta-data\n         android:name=\"AA_DB_VERSION\"\n         android:value=\"1\" />\n    \u2026\u2026\u2026..\n    </application>\n    ```", "```kt\n    // Category class\n\n    @Table(name = \"Categories\")\n    public class Category extends Model\n    {\n    @Column(name = \"Name\")\n    public String name;\n    }\n\n    // Item class\n\n    @Table(name = \"Items\")\n    public class Item extends Model \n    {\n       // If name is omitted, then the field name is used.\n    @Column(name = \"Name\")\n    public String name;\n\n    @Column(name = \"Category\")\n    public Category category;\n\n    public Item() \n    {\n         super();\n       }\n\n       public Item(String name, Category category)\n       {\n         super();\n         this.name = name;\n         this.category = category;   \n       }\n       }\n    ```", "```kt\n    public void insert(View v) \n    {\n      Item testItem = new Item();\n      testItem.category = testCategory;\n      testItem.name = editTextItem.getText().toString();\n      testItem.save();\n    }\n    ```", "```kt\n      List<Item>getall = new Select().from(Item.class)\n           .where(\"Category = ?\", testCategory.getId())\n           .orderBy(\"Name ASC\").execute();\n    ```", "```kt\n    CREATE TABLE \"android_metadata\"(\"locale\" TEXT DEFAULT 'en_US')\n    ```", "```kt\n    INSERT INTO \"android_metadata\" VALUES ('en_US')\n    ```", "```kt\n    CREATE TABLE \"contact_table\" (\"_id\" integer primary key autoincrement not null,\"contact_name\" text not null,\"contact_number\" text not null,\"contact_email\" text not null,\"photo_id\" BLOB )\n    ```", "```kt\n    Private Boolean checkDataBase()\n    {\n      SQLiteDatabase checkDB = null;\n      try {\n         String myPath = DB_PATH + DB_NAME;\n         checkDB = SQLiteDatabase.openDatabase(myPath, null,\n             SQLiteDatabase.OPEN_READONLY);\n      } catch (SQLiteException e) {\n         // database doesn't exist yet.\n      }\n      if (checkDB != null) {\n         checkDB.close();\n      }\n      return checkDB != null ? true : false;\n    }\n    ```", "```kt\n    private void copyDataBase() throws IOException\n    {\n      InputStream myInput = myContext.getAssets().open(DB_NAME);\n      String outFileName = DB_PATH + DB_NAME;\n      OutputStream myOutput = new FileOutputStream(outFileName);\n      byte[] buffer = new byte[1024];\n      int length;\n      while ((length = myInput.read(buffer)) > 0) {\n         myOutput.write(buffer, 0, length);\n      }\n\n      myOutput.flush();\n      myOutput.close();\n      myInput.close();\n    }\n    ```"]