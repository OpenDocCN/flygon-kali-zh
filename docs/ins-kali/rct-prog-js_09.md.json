["```js\n  var Pragmatometer = React.createClass(\n    {\n    render: function()\n      {\n      return (\n        <div className=\"Pragmatometer\">\n        <Calendar />\n        <Todo />\n        <Scratch />\n        {/* <YouPick /> */}\n        </div>\n      );\n    }\n  }\n);\n```", "```js\n//cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.min.js\n```", "```js\n//cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react-with-addons.min.js\n```", "```js\n  var Todo = React.createClass(\n    {\n      mixins: [React.addons.LinkedStateMixin],\n```", "```js\n      getInitialState: function()\n      {\n        return {\n          'items': [],\n          'text': ''\n        };\n      },\n```", "```js\n      onChange: function(event)\n      {\n        this.setState({text: event.target.value});\n      },\n```", "```js\n      handleSubmit: function(event)\n      {\n        event.preventDefault();\n        var new_item = get_todo_item();\n        new_item.description = this.state.text;\n        this.state.items.push(new_item);\n        var next_text = '';\n        this.setState({text: next_text});\n      },\n```", "```js\n      render: function()\n      {\n        var that = this;\n        var table_rows = [];\n```", "```js\n        var handle_change = function(event)\n        {\n          var address = event.target.id.split('.', 2);\n          (that.state.items[parseInt(address[0])][address[1]] = !that.state.items[parseInt(address[0])][address[1]]);\n        };\n```", "```js\n      var display_item_details = function(label, item)\n          {\n          var html_id = item.id + '.' + label;\n        return ( <td className={label} title={label}>\n            <input onChange={handle_change} \n              id={html_id} className={label} type=\"checkbox\" checked={item[label]} />\n          </td>\n        );\n      };\n```", "```js\n      var display_item = function(item)\n      {\n        var rendered_nodes = [];\n        for(var index = 0; index < todo_item_names.length;\n        index += 1) {\n          rendered_nodes.push(\n            display_item_details(todo_item_names[index], item)\n          );\n        }\n        return ( <tr>\n          {rendered_nodes}\n          <td dangerouslySetInnerHTML={{__html:\n          converter.makeHtml(item.description)}} />\n        </tr>\n        );\n      };\n```", "```js\n      table_rows.push(\n      <tr>{this.state.items.map(display_item)}</tr>);\n```", "```js\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <table>\n            <thead>\n              <tr>\n                <th>To do</th>\n              </tr>\n            </thead>\n            <tbody>\n              {table_rows}\n            </tbody>\n            <tfoot>\n              <textarea onChange={this.onChange}\n              value={this.state.text}></textarea><br />\n              <button>{'Add activity'}</button>\n            </tfoot>\n          </table>\n        </form>\n      );\n    }\n  }\n);\n```", "```js\nvar update = function()\n{\n  React.render(<Pragmatometer />,\n  document.getElementById('main'));\n};\nupdate();\nvar update_interval = setInterval(update, 100);\n```", "```js\n      td.Completed {\n        border-left: 3px solid black;\n        background-color: white;\n      }\n      td.Delete {\n        background-color: gray;\n      }\n      td.Invisible\n      {\n        background-color: black;\n      }\n      td.Background\n      {\n        background-color: #604000;\n      }\n      td.You.Decide\n      {\n        background-color: blue;\n      }\n      td.In.Progress\n      {\n        background-color: #00ff00;\n      }\n      td.Important\n      {\n        background-color: yellow;\n      }\n      td.In.Question\n      {\n        background-color: darkorange;\n      }\n      td.Problems\n      {\n        background-color: red;\n      }\n```"]