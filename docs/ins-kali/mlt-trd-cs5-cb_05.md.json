["```cs\nasync Task<string> GetStringAsync()\n{\n  await Task.Delay(TimeSpan.FromSeconds(2));\n  return \"Hello, World!\";\n}\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static Task AsynchronyWithTPL()\n    {\n      Task<string> t = GetInfoAsync(\"Task 1\");\n      Task t2 = t.ContinueWith(task => Console.WriteLine(t.Result), TaskContinuationOptions.NotOnFaulted);\n      Task t3 = t.ContinueWith(task => Console.WriteLine(t.Exception.InnerException), TaskContinuationOptions.OnlyOnFaulted);\n\n      return Task.WhenAny(t2, t3);\n    }\n\n    async static Task AsynchronyWithAwait()\n    {\n      try\n      {\n        string result = await GetInfoAsync(\"Task 2\");\n        Console.WriteLine(result);\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(ex);\n      }\n    }\n\n    async static Task<string> GetInfoAsync(string name)\n    {\n      await Task.Delay(TimeSpan.FromSeconds(2));\n      //throw new Exception(\"Boom!\");\n\n      return string.Format(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n    }\n    ```", "```cs\n    Task t = AsynchronyWithTPL();\n    t.Wait();\n\n    t = AsynchronyWithAwait();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    async static Task AsynchronousProcessing()\n    {\n      Func<string, Task<string>> asyncLambda = async name => {\n        await Task.Delay(TimeSpan.FromSeconds(2));\n        return string.Format(\"Task {0} is running on a threadid {1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      };\n\n      string result = await asyncLambda(\"async lambda\");\n\n      Console.WriteLine(result);\n    }\n    ```", "```cs\n    Task t = AsynchronousProcessing();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static Task AsynchronyWithTPL()\n    {\n      var containerTask = new Task(() => { \n        Task<string> t = GetInfoAsync(\"TPL 1\");\n        t.ContinueWith(task => {\n          Console.WriteLine(t.Result);\n          Task<string> t2 = GetInfoAsync(\"TPL 2\");\n          t2.ContinueWith(innerTask =>Console.WriteLine(innerTask.Result),TaskContinuationOptions.NotOnFaulted |TaskContinuationOptions.AttachedToParent);\n          t2.ContinueWith(innerTask =>Console.WriteLine(innerTask.Exception.InnerException),TaskContinuationOptions.OnlyOnFaulted |TaskContinuationOptions.AttachedToParent);\n          },\n          TaskContinuationOptions.NotOnFaulted |TaskContinuationOptions.AttachedToParent);\n\n        t.ContinueWith(task =>Console.WriteLine(t.Exception.InnerException),TaskContinuationOptions.OnlyOnFaulted |TaskContinuationOptions.AttachedToParent);\n      });\n\n      containerTask.Start();\n      return containerTask;\n    }\n\n    async static Task AsynchronyWithAwait()\n    {\n      try\n      {\n        string result = await GetInfoAsync(\"Async 1\");\n        Console.WriteLine(result);\n        result = await GetInfoAsync(\"Async 2\");\n        Console.WriteLine(result);\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(ex);\n      }\n    }\n\n    async static Task<string> GetInfoAsync(string name)\n    {\n      Console.WriteLine(\"Task {0} started!\", name);\n      await Task.Delay(TimeSpan.FromSeconds(2));\n      if(name == \"TPL 2\")\n        throw new Exception(\"Boom!\");\n      return string.Format(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\",name, Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n    }\n    ```", "```cs\n    Task t = AsynchronyWithTPL();\n    t.Wait();\n\n    t = AsynchronyWithAwait();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    async static Task AsynchronousProcessing()\n    {\n      Task<string> t1 = GetInfoAsync(\"Task 1\", 3);\n      Task<string> t2 = GetInfoAsync(\"Task 2\", 5);\n\n      string[] results = await Task.WhenAll(t1, t2);\n      foreach (string result in results)\n      {\n        Console.WriteLine(result);\n      }\n    }\n\n    async static Task<string> GetInfoAsync(string name, int seconds)\n    {\n      await Task.Delay(TimeSpan.FromSeconds(seconds));\n      /*await Task.Run(() =>Thread.Sleep(TimeSpan.FromSeconds(seconds)));*/\n      return string.Format(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n    }\n    ```", "```cs\n    Task t = AsynchronousProcessing();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    async static Task AsynchronousProcessing()\n    {\n      Console.WriteLine(\"1\\. Single exception\");\n\n      try\n      {\n        string result = await GetInfoAsync(\"Task 1\", 2);\n        Console.WriteLine(result);\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(\"Exception details: {0}\", ex);\n      }\n\n      Console.WriteLine();\n      Console.WriteLine(\"2\\. Multiple exceptions\");\n\n      Task<string> t1 = GetInfoAsync(\"Task 1\", 3);\n      Task<string> t2 = GetInfoAsync(\"Task 2\", 2);\n      try\n      {\n        string[] results = await Task.WhenAll(t1, t2);\n        Console.WriteLine(results.Length);\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(\"Exception details: {0}\", ex);\n      }\n\n      Console.WriteLine();\n      Console.WriteLine(\"2\\. Multiple exceptions with AggregateException\");\n\n      t1 = GetInfoAsync(\"Task 1\", 3);\n      t2 = GetInfoAsync(\"Task 2\", 2);\n      Task<string[]> t3 = Task.WhenAll(t1, t2);\n      try\n      {\n        string[] results = await t3;\n        Console.WriteLine(results.Length);\n      }\n      catch\n      {\n        var ae = t3.Exception.Flatten();\n        var exceptions = ae.InnerExceptions;\n        Console.WriteLine(\"Exceptions caught: {0}\", exceptions.Count);\n        foreach (var e in exceptions)\n        {\n          Console.WriteLine(\"Exception details: {0}\", e);\n          Console.WriteLine();\n        }\n      }\n    }\n\n    async static Task<string> GetInfoAsync(string name, int seconds)\n    {\n      await Task.Delay(TimeSpan.FromSeconds(seconds));\n      throw new Exception(string.Format(\"Boom from {0}!\", name));\n    }\n    ```", "```cs\n    Task t = AsynchronousProcessing();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Windows;\n    using System.Windows.Controls;\n    ```", "```cs\n    private static Label _label;\n\n    async static void Click(object sender, EventArgs e)\n    {\n      _label.Content = new TextBlock {Text = \"Calculating...\"};\n      TimeSpan resultWithContext = await Test();\n      TimeSpan resultNoContext = await TestNoContext();\n      /*TimeSpan resultNoContext = awaitTestNoContext().ConfigureAwait(false);*/\n      var sb = new StringBuilder();\n      sb.AppendLine(string.Format(\"With the context: {0}\",resultWithContext));\n      sb.AppendLine(string.Format(\"Without the context: {0}\",resultNoContext));\n      sb.AppendLine(string.Format(\"Ratio: {0:0.00}\",resultWithContext.TotalMilliseconds/resultNoContext.TotalMilliseconds));\n      _label.Content = new TextBlock {Text = sb.ToString()};\n    }\n\n    async static Task<TimeSpan> Test()\n    {\n      const int iterationsNumber = 100000;\n      var sw = new Stopwatch();\n      sw.Start();\n      for (int i = 0; i < iterationsNumber; i++)\n      {\n        var t = Task.Run(() => { });\n        await t;\n      }\n      sw.Stop();\n      return sw.Elapsed;\n    }\n\n    async static Task<TimeSpan> TestNoContext()\n    {\n      const int iterationsNumber = 100000;\n      var sw = new Stopwatch();\n      sw.Start();\n      for (int i = 0; i < iterationsNumber; i++)\n      {\n        var t = Task.Run(() => { });\n        await t.ConfigureAwait(continueOnCapturedContext: false);\n      }\n      sw.Stop();\n      return sw.Elapsed;\n    }\n    ```", "```cs\n    [STAThread]\n    static void Main(string[] args)\n    {\n      var app = new Application();\n      var win = new Window();\n      var panel = new StackPanel();\n      var button = new Button();\n      _label = new Label();\n      _label.FontSize = 32;\n      _label.Height = 200;\n      button.Height = 100;\n      button.FontSize = 32;\n      button.Content = new TextBlock {Text = \"Start asynchronous operations\"};\n      button.Click += Click;\n      panel.Children.Add(_label);\n      panel.Children.Add(button);\n      win.Content = panel;\n      app.Run(win);\n\n      Console.ReadLine();\n    }\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    async static Task AsyncTaskWithErrors()\n    {\n      string result = await GetInfoAsync(\"AsyncTaskException\",2);\n      Console.WriteLine(result);\n    }\n\n    async static void AsyncVoidWithErrors()\n    {\n      string result = await GetInfoAsync(\"AsyncVoidException\",2);\n      Console.WriteLine(result);\n    }\n\n    async static Task AsyncTask()\n    {\n      string result = await GetInfoAsync(\"AsyncTask\", 2);\n      Console.WriteLine(result);\n    }\n\n    private static async void AsyncVoid()\n    {\n      string result = await GetInfoAsync(\"AsyncVoid\", 2);\n      Console.WriteLine(result);\n    }\n\n    async static Task<string> GetInfoAsync(string name,int seconds)\n    {\n      await Task.Delay(TimeSpan.FromSeconds(seconds));\n      if(name.Contains(\"Exception\"))\n        throw new Exception(string.Format(\"Boom from {0}!\",name));\n      return string.Format(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n    }\n    ```", "```cs\n    Task t = AsyncTask();\n    t.Wait();\n\n    AsyncVoid();\n    Thread.Sleep(TimeSpan.FromSeconds(3));\n\n    t = AsyncTaskWithErrors();\n    while(!t.IsFaulted)\n    {\n      Thread.Sleep(TimeSpan.FromSeconds(1));\n    }\n    Console.WriteLine(t.Exception);\n\n    //try\n    //{\n    //  AsyncVoidWithErrors();\n    //  Thread.Sleep(TimeSpan.FromSeconds(3));\n    //}\n    //catch (Exception ex)\n    //{\n    //  Console.WriteLine(ex);\n    //}\n\n    //int[] numbers = new[] {1, 2, 3, 4, 5};\n    //Array.ForEach(numbers, async number => {\n    //  await Task.Delay(TimeSpan.FromSeconds(1));\n    //  if (number == 3) throw new Exception(\"Boom!\");\n    //  Console.WriteLine(number);\n    //});\n\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.Runtime.CompilerServices;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    async static Task AsynchronousProcessing()\n    {\n      var sync = new CustomAwaitable(true);\n      string result = await sync;\n      Console.WriteLine(result);\n\n      var async = new CustomAwaitable(false);\n      result = await async;\n\n      Console.WriteLine(result);\n    }\n\n    class CustomAwaitable\n    {\n      public CustomAwaitable(bool completeSynchronously)\n      {\n        _completeSynchronously = completeSynchronously;\n      }\n\n      public CustomAwaiter GetAwaiter()\n      {\n        return new CustomAwaiter(_completeSynchronously);\n      }\n\n      private readonly bool _completeSynchronously;\n    }\n\n    class CustomAwaiter : INotifyCompletion\n    {\n      private string _result = \"Completed synchronously\";\n      private readonly bool _completeSynchronously;\n\n      public bool IsCompleted { get {return _completeSynchronously; } }\n\n      public CustomAwaiter(bool completeSynchronously)\n      {\n        _completeSynchronously = completeSynchronously;\n      }\n\n      public string GetResult()\n      {\n        return _result;\n      }\n\n      public void OnCompleted(Action continuation)\n      {\n        ThreadPool.QueueUserWorkItem( state => {\n          Thread.Sleep(TimeSpan.FromSeconds(1));\n          _result = GetInfo();\n          if(continuation != null) continuation();\n        });\n      }\n\n      private string GetInfo()\n      {\n        return string.Format(\"Task is running on a thread id{0}. Is thread pool thread: {1}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      }\n    }\n    ```", "```cs\n    Task t = AsynchronousProcessing();\n    t.Wait();\n    ```", "```cs\n    using System;\n    using System.Dynamic;\n    using System.Runtime.CompilerServices;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using ImpromptuInterface;\n    ```", "```cs\n    async static Task AsynchronousProcessing()\n    {\n      string result = await GetDynamicAwaitableObject(true);\n      Console.WriteLine(result);\n\n      result = await GetDynamicAwaitableObject(false);\n      Console.WriteLine(result);\n    }\n\n    static dynamic GetDynamicAwaitableObject(bool completeSynchronously)\n    {\n      dynamic result = new ExpandoObject();\n      dynamic awaiter = new ExpandoObject();\n\n      awaiter.Message = \"Completed synchronously\";\n      awaiter.IsCompleted = completeSynchronously;\n      awaiter.GetResult = (Func<string>)(() => awaiter.Message);\n\n      awaiter.OnCompleted = (Action<Action>) ( callback => \n        ThreadPool.QueueUserWorkItem(state => {\n          Thread.Sleep(TimeSpan.FromSeconds(1));\n          awaiter.Message = GetInfo();\n          if (callback != null) callback();\n        })\n      );\n\n      IAwaiter<string> proxy = Impromptu.ActLike(awaiter);\n\n      result.GetAwaiter = (Func<dynamic>) ( () => proxy );\n\n      return result;\n    }\n\n    static string GetInfo()\n    {\n      return string.Format(\"Task is running on a thread id {0}. Is thread pool thread: {1}\",\n          Thread.CurrentThread.ManagedThreadId, Thread.CurrentThread.IsThreadPoolThread);\n    }\n\n    public interface IAwaiter<T> : INotifyCompletion\n    {\n    bool IsCompleted { get; }\n\n    T GetResult();\n    }\n    ```", "```cs\n    Task t = AsynchronousProcessing();\n    t.Wait();\n    ```"]