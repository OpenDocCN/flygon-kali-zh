- en: Getting Started with Docker on Windows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上使用Docker入门
- en: Docker is an application platform. It's a new way of running applications in
    isolated, lightweight units called **containers**. Containers are a very efficient
    way of running apps – much more efficient than **virtual machines** (**VMs**)
    or bare-metal servers. Containers start in seconds, and they don't add any overhead
    to the memory and compute requirements of an app. Docker is completely agnostic
    to the type of apps it can run. You can run a brand new .NET Core app in one container
    and a 10-year old ASP.NET 2.0 WebForms app in another container on the same server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个应用平台。这是一种在隔离的轻量级单元中运行应用程序的新方法，称为**容器**。容器是运行应用程序的一种非常高效的方式 - 比**虚拟机**（**VMs**）或裸机服务器要高效得多。容器在几秒钟内启动，并且不会增加应用程序的内存和计算需求。Docker对其可以运行的应用程序类型完全不可知。您可以在一个容器中运行全新的.NET
    Core应用程序，在另一个容器中运行10年前的ASP.NET 2.0 WebForms应用程序，这两个容器可以在同一台服务器上。
- en: Containers are isolated units, but they can integrate with other components.
    Your WebForms container can access a REST API hosted in your .NET Core container.
    Your .NET Core container can access a SQL Server database running in a container,
    or a SQL Server instance running on a separate machine. You can even set up a
    cluster with a mixture of Linux and Windows machines all running Docker, and have
    Windows containers transparently communicate with Linux containers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是隔离的单元，但它们可以与其他组件集成。您的WebForms容器可以访问托管在.NET Core容器中的REST API。您的.NET Core容器可以访问在容器中运行的SQL
    Server数据库，或者在单独的机器上运行的SQL Server实例。您甚至可以设置一个混合Linux和Windows机器的集群，所有这些机器都运行Docker，并且Windows容器可以透明地与Linux容器通信。
- en: Companies big and small are moving to Docker to take advantage of this flexibility
    and efficiency. Case studies from Docker, Inc. – the company behind the Docker
    platform – show that you can reduce your hardware requirements by 50% by moving
    to Docker and reduce time to release by 90%  while still maintaining your applications'
    high availability. This significant reduction applies equally to on-premises data
    centers and to the cloud.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论大小，公司都在转向Docker以利用这种灵活性和效率。Docker，Inc. - Docker平台背后的公司 - 的案例研究显示，通过转向Docker，您可以减少50%的硬件需求，并将发布时间缩短90%，同时仍然保持应用程序的高可用性。这种显著的减少同样适用于本地数据中心和云。
- en: Efficiency isn't the only gain. When you package your application to run in
    Docker, you get portability. You can run your app in a Docker container on your
    laptop and it will behave in exactly the same way on a server in your data center
    and on a VM in any cloud. This means your deployment process is simple and risk-free,
    because you're deploying the exact same artifacts that you've tested, and you're
    also free to choose between hardware vendors and cloud providers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 效率并不是唯一的收获。当您将应用程序打包到Docker中运行时，您会获得可移植性。您可以在笔记本电脑上的Docker容器中运行应用程序，并且它将在数据中心的服务器和任何云中的VM上表现完全相同。这意味着您的部署过程简单且无风险，因为您正在部署您已经测试过的完全相同的构件，并且您还可以自由选择硬件供应商和云提供商。
- en: The other big motivator is security. Containers add secure isolation between
    applications, so you can be confident that if one application is compromised,
    the attacker can't move on to compromise other apps on the same host. There are
    wider security benefits to the platform too. Docker can scan the contents of packaged
    applications and alert you to security vulnerabilities in your application stack.
    You can also digitally sign container images and configure Docker to run containers
    only from image authors that you trust.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的动机是安全性。容器在应用程序之间提供了安全隔离，因此您可以放心，如果一个应用程序受到攻击，攻击者无法继续攻击同一主机上的其他应用程序。平台还有更广泛的安全性好处。Docker可以扫描打包应用程序的内容，并提醒您应用程序堆栈中的安全漏洞。您还可以对容器映像进行数字签名，并配置Docker仅从您信任的映像作者运行容器。
- en: Docker is built from open source components, and is shipped as **Docker Community
    Edition** (**Docker CE**) and **Docker Enterprise**. Docker CE is free to use
    and has monthly releases. Docker Enterprise is a paid subscription; it comes with
    extended features and support, and has quarterly releases. Docker CE and Docker
    Enterprise are available on Windows, and both versions use the same underlying
    platform, so you can run your apps in containers on Docker CE and Docker Enterprise
    in the same way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是由开源组件构建的，并作为**Docker社区版**（**Docker CE**）和**Docker企业版**提供。Docker CE是免费使用的，并且每月发布。Docker企业版是付费订阅；它具有扩展功能和支持，并且每季度发布。Docker
    CE和Docker企业版都可在Windows上使用，并且两个版本使用相同的基础平台，因此您可以以相同的方式在Docker CE和Docker企业版上运行应用程序容器。
- en: 'This chapter gets you up-and-running with Docker containers. It covers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章让您快速上手Docker容器。它涵盖了：
- en: Docker and Windows containers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker和Windows容器
- en: Understanding the key Docker concepts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解关键的Docker概念
- en: Running Docker on Windows
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上运行Docker
- en: Learning about Docker with this book
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过本书了解Docker
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can follow along with the code samples from this book using the GitHub repository
    [https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch01](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch01).
    You'll learn how to install Docker in this chapter - the only pre-requisite is
    Windows 10 with the 1809 Microsoft update, or Windows Server 2019.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用GitHub存储库[https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch01](https://github.com/sixeyed/docker-on-windows/tree/second-edition/ch01)中的代码示例来跟随本书。您将在本章中学习如何安装Docker
    - 唯一的先决条件是Windows 10并安装了1809微软更新，或者Windows Server 2019。
- en: Docker and Windows containers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker和Windows容器
- en: Docker was originally developed on Linux, taking advantage of core Linux features,
    but making it simple and efficient to use containers for application workloads.
    Microsoft saw the potential and worked closely with the Docker engineering team
    to bring the same functionality to Windows.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Docker最初是在Linux上开发的，利用了核心Linux功能，但使得在应用工作负载中使用容器变得简单高效。微软看到了潜力，并与Docker工程团队密切合作，将相同的功能带到了Windows上。
- en: Windows Server 2016 was the first version of Windows built to run Docker containers;
    Windows Server 2019 continues the innovation with significantly improved features
    and performance for Windows containers. You can run the same Docker containers
    on Windows 10 for development and testing that you run on Windows Server in production.
    Right now, you can only run Windows applications in containers on Windows, but
    Microsoft is adding support for Linux application containers to run on Windows
    too.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Server 2016是第一个可以运行Docker容器的Windows版本；Windows Server 2019通过显著改进的功能和性能继续创新Windows容器。您可以在Windows
    10上运行相同的Docker容器进行开发和测试，就像在生产环境中在Windows Server上运行一样。目前，您只能在Windows上运行Windows应用程序容器，但微软正在增加对在Windows上运行Linux应用程序容器的支持。
- en: The first thing you need to know is that there is no integration between containers
    and the Windows UI. Containers are only for server-side application workloads,
    like websites, APIs, databases, message queues, message handlers, and console
    applications. You can't use Docker to run a client app, like a .NET WinForms or
    WPF application, but you could use Docker to package and distribute the application,
    which would give you a consistent build and release process for all your apps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要知道的是容器与Windows UI之间没有集成。容器仅用于服务器端应用工作负载，如网站、API、数据库、消息队列、消息处理程序和控制台应用程序。您不能使用Docker来运行客户端应用程序，比如.NET
    WinForms或WPF应用程序，但您可以使用Docker来打包和分发应用程序，这将为您所有的应用程序提供一致的构建和发布流程。
- en: There's also a distinction between how containers run on Windows Server 2019
    and Windows 10\. The user experience for working with Docker is the same, but
    the way containers are hosted is different. On Windows Server the process that
    serves your application actually runs on the server, and there's no layer between
    the container and the host. In the container you may see `w3wp.exe` running to
    serve a website, but that process is actually running on the server – if you had
    10 web containers running, you would see 10 instances of `w3wp.exe` in Task Manager
    on the server.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows Server 2019和Windows 10上运行容器的方式也有所不同。使用Docker的用户体验是相同的，但容器托管的方式不同。在Windows
    Server上，服务应用程序的进程实际上在服务器上运行，并且容器和主机之间没有层。在容器中，您可能会看到`w3wp.exe`运行以提供网站服务，但该进程实际上在服务器上运行
    - 如果您运行了10个Web容器，您将在服务器的任务管理器中看到10个`w3wp.exe`实例。
- en: Windows 10 doesn't have the same operating system kernel as Windows Server 2019,
    so in order to provide containers with the Windows Server kernel, Windows 10 runs
    each container in a very light VM. These are called **Hyper-V containers**, and
    if you run a web app in a container on Windows 10, you won't see `w3wp.exe` running
    on the host – it actually runs inside a dedicated Windows Server kernel in the
    Hyper-V container.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10与Windows Server 2019没有相同的操作系统内核，因此为了为容器提供Windows Server内核，Windows
    10在一个非常轻量的虚拟机中运行每个容器。这些被称为**Hyper-V容器**，如果您在Windows 10上的容器中运行Web应用程序，您将看不到`w3wp.exe`在主机上运行
    - 它实际上在Hyper-V容器中的专用Windows Server内核中运行。
- en: This is the default behavior, but in the latest versions of Windows and Docker
    you can run Windows Server containers in Windows 10, so you can skip the extra
    overhead of running a VM for each container.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认行为，但在最新版本的Windows和Docker中，您可以在Windows 10上运行Windows Server容器，因此您可以跳过为每个容器运行VM的额外开销。
- en: It's good to understand the distinction between Windows Server containers and
    Hyper-V containers. You use the same Docker artifacts and the same Docker commands
    for both, so the procedures are the same, but there is a slight performance hit
    in using Hyper-V containers. Later in this chapter, I'll show you the options
    for running Docker on Windows, and you can choose the best approach for you.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Windows Server容器和Hyper-V容器之间的区别是很重要的。您可以为两者使用相同的Docker工件和相同的Docker命令，因此流程是相同的，但使用Hyper-V容器会有轻微的性能损失。在本章的后面，我将向您展示在Windows上运行Docker的选项，您可以选择最适合您的方法。
- en: Windows versions
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows版本
- en: Applications in Windows Server containers run processes directly on the host,
    and the version of Windows on your server needs to match the version of Windows
    inside the container. All of the examples in this book are based on containers
    that use Windows Server 2019, which means you need a Windows Server 2019 machine
    to run them – or Windows 10 with the 1809 update (the `winver` command will tell
    you which update version you have).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Server容器中的应用程序直接在主机上运行进程，并且服务器上的Windows版本需要与容器内的Windows版本匹配。本书中的所有示例都基于使用Windows
    Server 2019的容器，这意味着您需要一台Windows Server 2019机器来运行它们，或者使用安装了1809更新的Windows 10（`winver`命令将告诉您您的更新版本）。
- en: You can run containers built for a different version of Windows if you run them
    as Hyper-V containers. This gives you backward-compatibility, so you can run a
    container that was built for Windows Server 2016 on a machine running Windows
    Server 2019.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将为不同版本的Windows构建的容器作为Hyper-V容器运行。这样可以实现向后兼容性，因此您可以在运行Windows Server 2019的计算机上运行为Windows
    Server 2016构建的容器。
- en: Windows licensing
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows许可
- en: Windows containers don't have the same licensing requirements as servers or
    VMs running Windows. Windows is licensed at the host level, not the container
    level. If you have 100 Windows containers running on one server, you only need
    one license for the server. There are considerable savings to be had if you currently
    use VMs to isolate application workloads. Removing the VM layer and running apps
    in containers directly on the server removes the licensing requirement for all
    of the VMs, and the management overhead for all those machines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Windows容器与运行Windows的服务器或虚拟机没有相同的许可要求。Windows的许可是在主机级别而不是容器级别。如果在一台服务器上运行了100个Windows容器，您只需要为服务器购买一个许可证。如果您目前使用虚拟机来隔离应用程序工作负载，那么可以节省相当多的费用。去除虚拟机层并直接在服务器上运行应用程序容器可以消除所有虚拟机的许可要求，并减少所有这些机器的管理开销。
- en: Hyper-V containers have separate licensing. On Windows 10 you can run multiple
    containers, but not for production deployments. On Windows Server, you can also
    run containers in Hyper-V mode to increase isolation. This can be useful in multi-tenant
    scenarios, where you need to expect and mitigate for hostile workloads. Hyper-V
    containers are separately licensed, and in a high-volume environment, you need
    a Windows Server Datacenter license to run Hyper-V containers without individual
    licenses.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Hyper-V容器有单独的许可。在Windows 10上，您可以运行多个容器，但不能用于生产部署。在Windows Server上，您还可以以Hyper-V模式运行容器以增加隔离性。这在多租户场景中很有用，其中您需要预期和减轻敌对工作负载。Hyper-V容器是单独许可的，在高容量环境中，您需要Windows
    Server数据中心许可证才能运行Hyper-V容器而不需要单独的许可证。
- en: Microsoft and Docker, Inc. have partnered to provide Docker Enterprise at no
    cost with Windows Server 2016 and Windows Server 2019\. The price of the Windows
    Server license includes the Docker Enterprise Engine, which gives you support
    to run applications in containers. If you have problems with a container or with
    the Docker service you can raise it with Microsoft, and they can go on to escalate
    it to Docker's engineers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 微软和Docker公司合作，为Windows Server 2016和Windows Server 2019提供免费的Docker Enterprise。Windows
    Server许可证的价格包括Docker Enterprise Engine，这使您可以获得在容器中运行应用程序的支持。如果您在容器或Docker服务方面遇到问题，可以向微软提出，并且他们可以将问题升级给Docker的工程师。
- en: Understanding the key Docker concepts
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解关键的Docker概念
- en: Docker is a very powerful but very simple application platform. You can get
    started with running your existing apps in Docker in just a few days, and be ready
    to move to production in another few days. This book will take you through lots
    of examples of .NET Framework and .NET Core applications running in Docker. You'll
    learn how to build, ship, and run applications in Docker and move on to advanced
    topics such as solution design, security, administration, instrumentation, and
    **continuous integration and continuous delivery** (**CI/CD**).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个非常强大但非常简单的应用程序平台。你可以在短短几天内开始在Docker中运行你现有的应用程序，并在另外几天内准备好投入生产。本书将带你通过许多.NET
    Framework和.NET Core应用程序在Docker中运行的示例。你将学习如何在Docker中构建、部署和运行应用程序，并进入高级主题，如解决方案设计、安全性、管理、仪表板和持续集成和持续交付（CI/CD）。
- en: 'To start with, you need to understand the core Docker concepts: images, registries,
    containers, and orchestrators – and understand how Docker actually runs.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要了解核心的Docker概念：镜像、注册表、容器和编排器 - 以及了解Docker的实际运行方式。
- en: The Docker Engine and Docker command-line
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker引擎和Docker命令行
- en: Docker runs as a background Windows service. This service manages every running
    container – it's called the Docker Engine. The engine exposes a REST API for consumers
    to work with containers and other Docker resources. The main consumer of this
    API is the Docker **command-line tool** (**CLI**), which is what I use for most
    of the code samples in this book.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Docker作为后台Windows服务运行。这个服务管理每个正在运行的容器 - 它被称为Docker引擎。引擎为消费者提供了一个REST API，用于处理容器和其他Docker资源。这个API的主要消费者是Docker命令行工具（CLI），这是我在本书中大部分代码示例中使用的工具。
- en: The Docker REST API is public, and there are alternative management tools that
    are powered by the API, including web UIs like  Portainer (which is open source),
    and Docker **Universal Control Plane** (**UCP**) (which is a commercial product).
    The Docker CLI is very simple to use - you use commands like `docker container
    run` to run an application in a container and `docker container rm` to remove
    a container.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Docker REST API是公开的，有一些由API驱动的替代管理工具，包括像Portainer（开源）和Docker Universal Control
    Plane（UCP）（商业产品）这样的Web UI。Docker CLI非常简单易用 - 你可以使用像`docker container run`这样的命令来在容器中运行应用程序，使用`docker
    container rm`来删除容器。
- en: You can also configure the Docker API to be remotely accessible and configure
    your Docker CLI to connect to a remote service. This means you can manage a Docker
    host running in the cloud using Docker commands on your laptop. The setup to allow
    remote access can also include encryption, so your connection is secure – and
    in this chapter, I will show you an easy way to configure this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以配置Docker API以实现远程访问，并配置你的Docker CLI以连接到远程服务。这意味着你可以使用笔记本电脑上的Docker命令管理在云中运行的Docker主机。允许远程访问的设置也可以包括加密，因此你的连接是安全的
    - 在本章中，我将向你展示一种简单的配置方法。
- en: Once you have Docker running, you'll start by running containers from images.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行了Docker，你将开始从镜像中运行容器。
- en: Docker images
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker镜像
- en: 'A Docker image is a complete application package. It contains one application
    and all of its dependencies: the language runtime, the application host, and the
    underlying operating system. Logically the image is a single file, and it''s a
    portable unit – you can share your application by pushing your image to a Docker
    registry. Anyone who has access can pull the image themselves and run your application
    in a container; it will behave in exactly the same way for them as it does for
    you.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像是一个完整的应用程序包。它包含一个应用程序及其所有的依赖项：语言运行时、应用程序主机和底层操作系统。从逻辑上讲，镜像是一个单一的文件，它是一个可移植的单元
    - 你可以通过将你的镜像推送到Docker注册表来分享你的应用程序。任何有权限的人都可以拉取镜像并在容器中运行你的应用程序；它对他们来说的行为方式与对你来说完全一样。
- en: Here's a concrete example. An ASP.NET WebForms app is going to run on **Internet
    Information Services** (**IIS**) in Windows Server. To package the application
    in Docker, you build an image that is based on Windows Server Core, add IIS, then
    add ASP.NET, copy your application, and configure it as a website in IIS. You
    describe all these steps in a simple script called a **Dockerfile**, and you can
    use PowerShell or batch files for each step you need to perform.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个具体的例子。一个ASP.NET WebForms应用程序将在Windows Server上的**Internet Information Services**（**IIS**）上运行。为了将应用程序打包到Docker中，您构建一个基于Windows
    Server Core的镜像，添加IIS，然后添加ASP.NET，复制您的应用程序，并在IIS中配置它作为一个网站。您可以在一个称为**Dockerfile**的简单脚本中描述所有这些步骤，并且您可以使用PowerShell或批处理文件来执行每个步骤。
- en: You build the image by running `docker image build`. The input is the Dockerfile
    and any resources that need to be packaged into the image (like the web application
    content). The output is a Docker image. In this case, the image will have a logical
    size of about 5 GB, but 4 GB of this will be the Windows Server Core image you're
    using as a base, and the image can be shared as the base across many other images.
    (I will cover image layers and caching more in [Chapter 4](cba48cea-1666-4d9a-a268-ee2a104f5565.xhtml),
    *Sharing Images with Docker* *Registries*.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`docker image build`来构建镜像。输入是Dockerfile和需要打包到镜像中的任何资源（如Web应用程序内容）。输出是一个Docker镜像。在这种情况下，镜像的逻辑大小约为5GB，但其中4GB将是您用作基础的Windows
    Server Core镜像，并且该镜像可以作为基础共享给许多其他镜像。（我将在[第4章](cba48cea-1666-4d9a-a268-ee2a104f5565.xhtml)中更详细地介绍镜像层和缓存，*使用Docker注册表共享镜像*。）
- en: A Docker image is like a snapshot of the filesystem for one version of your
    application. Images are static, and you distribute them using an image registry.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像就像是您的应用程序一个版本的文件系统快照。镜像是静态的，并且您可以使用镜像注册表来分发它们。
- en: Image registries
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像注册表
- en: A registry is a storage server for Docker images. Registries can be public or
    private, and there are free public registries and commercial registry servers
    which allow fine-grained access control for images. Images are stored with a unique
    name within the registry. Anyone with access can upload an image by running `docker
    image push`, and download an image by running `docker image pull`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表是Docker镜像的存储服务器。注册表可以是公共的或私有的，有免费的公共注册表和商业注册表服务器，可以对镜像进行细粒度的访问控制。镜像以唯一的名称存储在注册表中。任何有权限的人都可以通过运行`docker
    image push`来上传镜像，并通过运行`docker image pull`来下载镜像。
- en: 'The most popular registry is **Docker Hub**, which is the public registry hosted
    by Docker, but other companies also host their own registries to distribute their
    own software:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的注册表是**Docker Hub**，这是由Docker托管的公共注册表，但其他公司也托管自己的注册表来分发他们自己的软件：
- en: Docker Hub is the default registry, and it has become hugely popular for open
    source projects, for commercial software, and for teams working on private projects.
    There are hundreds of thousands of images stored on Docker Hub, which serves billions
    of pull requests every year. You can configure Docker Hub images to be public
    or private. It's suitable for internal products, for which you can limit access
    to images. You can set up Docker Hub to automatically build images from Dockerfiles
    stored in GitHub – currently, this is supported only for Linux-based images, but
    Windows support should be coming soon.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub是默认的注册表，它已经变得非常受欢迎，用于开源项目、商业软件以及团队开发的私有项目。在Docker Hub上存储了数十万个镜像，每年提供数十亿次的拉取请求。您可以将Docker
    Hub镜像配置为公共或私有。它适用于内部产品，您可以限制对镜像的访问。您可以设置Docker Hub自动从存储在GitHub中的Dockerfile构建镜像-目前，这仅支持基于Linux的镜像，但Windows支持应该很快就会到来。
- en: '**Microsoft Container Registry** (**MCR**) is where Microsoft host their own
    Docker images for Windows Server Core and Nano Server, along with images preconfigured
    with the .NET Framework. Microsoft''s Docker images are free to download and use.
    They only run on Windows machines, which is where the Windows  licensing is applied.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft容器注册表**（**MCR**）是微软托管其自己的Windows Server Core和Nano Server的Docker图像的地方，以及预先配置了.NET
    Framework的图像。微软的Docker图像可以免费下载和使用。它们只能在Windows机器上运行，这是Windows许可证适用的地方。'
- en: In a typical workflow you might build images as part of a CI pipeline and push
    them to a registry if all the tests pass. You could use Docker Hub, or you could
    run your own private registry. The image is then available for other users to
    run your application in a container.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的工作流程中，您可能会在CI管道的一部分构建图像，并在所有测试通过时将它们推送到注册表。您可以使用Docker Hub，也可以运行自己的私有注册表。然后，该图像可供其他用户在容器中运行您的应用程序。
- en: Docker containers
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker容器
- en: A container is an instance of an application created from an image. The image
    contains the whole application stack, and it also specifies the process to start
    the application, so Docker knows what to do when you run a container. You can
    run multiple containers from the same image, and you can run containers in different
    ways. (I'll describe them all in the next chapter.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是从图像创建的应用程序实例。图像包含整个应用程序堆栈，并且还指定了启动应用程序的进程，因此Docker知道在运行容器时该做什么。您可以从同一图像运行多个容器，并且可以以不同的方式运行容器。（我将在下一章中描述它们。）
- en: You start your application with `docker container run`, specifying the name
    of the image and your configuration options. Distribution is built into the Docker
    platform, so if you don't have a copy of the image on the host where you're trying
    to run the container, Docker will pull the image first. Then it starts the specified
    process, and your app is running in a container.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`docker container run`启动应用程序，指定图像的名称和配置选项。分发内置到Docker平台中，因此如果您在尝试运行容器的主机上没有图像的副本，Docker将首先拉取图像。然后它启动指定的进程，您的应用程序就在容器中运行了。
- en: Containers don't need a fixed allocation of CPU or memory, and the processes
    for your application can use as much of the host's compute power as they need.
    You can run dozens of containers on modest hardware, and unless the applications
    all try to use a lot of CPU at the same time, they will happily run concurrently.
    You can also start containers with resource limits to restrict how much CPU and
    memory they have access to.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 容器不需要固定的CPU或内存分配，应用程序的进程可以使用主机的计算能力。您可以在一台普通硬件上运行数十个容器，除非所有应用程序都尝试同时使用大量CPU，它们将愉快地并发运行。您还可以启动具有资源限制的容器，以限制它们可以访问多少CPU和内存。
- en: Docker provides the container runtime, as well as image packaging and distribution.
    In a small environment and in development, you will manage individual containers
    on a single Docker host, which could be your laptop or a test server. When you
    move to production, you'll need high availability and the option to scale, and
    that comes with an orchestrator like  Docker Swarm.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Docker提供容器运行时，以及图像打包和分发。在小型环境和开发中，您将在单个Docker主机上管理单个容器，这可以是您的笔记本电脑或测试服务器。当您转移到生产环境时，您将需要高可用性和扩展选项，这需要像Docker
    Swarm这样的编排器。
- en: Docker Swarm
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Docker has the ability to run on a single machine or as one node in a cluster
    of machines all running Docker. This cluster is called a **Swarm**, and you don't
    need to install anything extra to run in swarm mode. You install Docker on a set
    of machines –  on the first, you run `docker swarm init` to initialize the swarm,
    and on the others you run `docker swarm join` to join the swarm.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Docker有能力在单台机器上运行，也可以作为运行Docker的一组机器中的一个节点。这个集群被称为**Swarm**，你不需要安装任何额外的东西来在swarm模式下运行。你在一组机器上安装Docker
    - 在第一台机器上，你运行`docker swarm init`来初始化swarm，在其他机器上，你运行`docker swarm join`来加入swarm。
- en: I will cover swarm mode in depth in [Chapter 7](bf6a5e90-bbba-435b-b0a0-734611e0e834.xhtml),
    *Orchestrating Distributed Solutions with Docker Swarm,* but it's important to
    know before you get much further that the Docker platform has high availability,
    security, scale and resilience built in. Your Docker journey will hopefully lead
    you to production, where you'll benefit from all of these attributes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在[第7章](bf6a5e90-bbba-435b-b0a0-734611e0e834.xhtml)中深入介绍swarm模式，*使用Docker Swarm编排分布式解决方案*，但在你继续深入之前，重要的是要知道Docker平台具有高可用性、安全性、规模和弹性。希望你的Docker之旅最终会让你受益于所有这些特性。
- en: In swarm mode Docker uses exactly the same artifacts, so you can run your app
    across 50 containers in a 20-node swarm and the functionality will be the same
    as when you run it in a single container on your laptop. On the swarm, your app
    is more performant and tolerant of failure, and you'll be able to perform automated
    rolling updates to new versions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在swarm模式下，Docker使用完全相同的构件，因此你可以在一个20节点的swarm中运行50个容器的应用，其功能与在笔记本上的单个容器中运行时相同。在swarm中，你的应用性能更高，更容忍故障，并且你将能够对新版本执行自动滚动更新。
- en: Nodes in a swarm use secure encryption for all communication, using trusted
    certificates for each node. You can store application secrets as encrypted data
    in the swarm too, so database connection strings and API keys can be saved securely,
    and the swarm will deliver them only to the containers that need them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在swarm中，节点使用安全加密进行所有通信，为每个节点使用受信任的证书。你也可以将应用程序秘密作为加密数据存储在swarm中，因此数据库连接字符串和API密钥可以被安全保存，并且swarm只会将它们传递给需要它们的容器。
- en: Docker is an established platform. It was new to Windows Server in 2016, but
    it arrived on Windows after four years of releases on Linux. Docker is written
    in Go, which is a cross-platform language, and only a minority of code is specific
    to Windows. When you run Docker on Windows, you're running an application platform
    that has had years of successful production use.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个成熟的平台。它在2016年才新加入Windows Server，但在Linux上发布了四年后才进入Windows。Docker是用Go语言编写的，这是一种跨平台语言，只有少部分代码是特定于Windows的。当你在Windows上运行Docker时，你正在运行一个经过多年成功生产使用的应用平台。
- en: A note on Kubernetes
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Kubernetes的说明
- en: Docker Swarm is a very popular container orchestrator, but it isn't the only
    one. Kubernetes is one alternative that has seen huge growth, with most public
    clouds now offering a managed Kubernetes service. At the time of writing this
    book, Kubernetes is a Linux-only orchestrator, with Windows support still in beta.
    You are likely to hear a lot about Kubernetes on your container journey, so it's
    worth understanding how it compares to Docker Swarm.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm是一个非常流行的容器编排器，但并不是唯一的选择。Kubernetes是另一个选择，它已经取得了巨大的增长，大多数公共云现在都提供托管的Kubernetes服务。在撰写本书时，Kubernetes是一个仅限于Linux的编排器，Windows支持仍处于测试阶段。在你的容器之旅中，你可能会听到很多关于Kubernetes的内容，因此了解它与Docker
    Swarm的比较是值得的。
- en: First, the similarities – they are both container orchestrators, which means
    they are clusters of machines that take care of running containers in production
    at scale. They both run Docker containers, and you can use the same Docker images
    with Docker Swarm and Kubernetes. They are both built on open source projects
    and conform to the **Open Container Initiative** (**OCI**), so there's no concern
    about vendor lock-in. You can start with Docker Swarm and then move to Kubernetes,
    and vice versa, without changing your apps.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，相似之处 - 它们都是容器编排器，这意味着它们都是负责在生产环境中以规模运行容器的机器集群。它们都可以运行Docker容器，并且您可以在Docker
    Swarm和Kubernetes中使用相同的Docker镜像。它们都是基于开源项目构建的，并符合**Open Container Initiative**（**OCI**）的标准，因此不必担心供应商锁定问题。您可以从Docker
    Swarm开始，然后转移到Kubernetes，反之亦然，而无需更改您的应用程序。
- en: Now, the differences. Docker Swarm is very simple; you can describe a distributed
    application to run in containers on swarm in just a few lines of markup. To run
    the same app on Kubernetes, your application description would be four times as
    much markup, or even more. Kubernetes has many more abstractions and configuration
    options than swarm, so there are some things you can do with Kubernetes that you
    can't do with swarm. The cost of that flexibility is complexity, and the learning
    curve for Kubernetes is very much steeper than for swarm.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不同之处。Docker Swarm非常简单；您只需几行标记就可以描述要在swarm中以容器运行的分布式应用程序。要在Kubernetes上运行相同的应用程序，您的应用程序描述将是四倍甚至更多的标记。Kubernetes比swarm具有更多的抽象和配置选项，因此有一些您可以在Kubernetes中做但在swarm中做不了的事情。这种灵活性的代价是复杂性，而且学习Kubernetes的学习曲线比学习swarm要陡峭得多。
- en: Kubernetes will support Windows soon, but it's not likely to offer full feature
    compatibility between Linux servers and Windows servers for some time. Until then,
    it's fine to use Docker Swarm – Docker has hundreds of enterprise customers running
    their production clusters on Docker Swarm. And if you do find Kubernetes has some
    extra features that you need, it will be much easier to learn Kubernetes once
    you have a good understanding of swarm.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes很快将支持Windows，但在一段时间内不太可能在Linux服务器和Windows服务器之间提供完全的功能兼容性。在那之前，使用Docker
    Swarm是可以的 - Docker有数百家企业客户在Docker Swarm上运行他们的生产集群。如果您发现Kubernetes具有一些额外的功能，那么一旦您对swarm有了很好的理解，学习Kubernetes将会更容易。
- en: Running Docker on Windows
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上运行Docker
- en: It's easy to install Docker on Windows 10, using *Docker Desktop* – a Windows
    package that sets up all the prerequisites, deploys the latest version of the
    Docker Community Engine, and gives you a UI with some useful options to manage
    image repositories and remote clusters.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10上安装Docker很容易，使用*Docker Desktop* - 这是一个设置所有先决条件、部署最新版本的Docker Community
    Engine并为您提供一些有用选项来管理镜像存储库和远程集群的Windows软件包。
- en: In production, you should ideally use Windows Server 2019 Core, the installation
    with no UI. This reduces the attack surface and the amount of Windows updates
    your server will need. If you move all your apps to Docker, you won't need any
    other Windows features installed; you'll just have Docker Engine running as a
    Windows service.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，您应该理想地使用Windows Server 2019 Core，即没有UI的安装版本。这样可以减少攻击面和服务器所需的Windows更新数量。如果将所有应用程序迁移到Docker，您将不需要安装任何其他Windows功能；您只需将Docker
    Engine作为Windows服务运行。
- en: I'll walk through both of these installation options and show you a third option
    using a VM in Azure, which is useful if you want to try Docker but don't have
    access to Windows 10 or Windows Server 2019.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我将介绍这两种安装选项，并向您展示第三种选项，即在Azure中使用VM，如果您想尝试Docker但无法访问Windows 10或Windows Server
    2019，则这种选项非常有用。
- en: There is a fantastic online Docker playground called Play with Docker at [https://dockr.ly/play-with-docker](https://dockr.ly/play-with-docker).
    Windows support is expected soon, and it's a great way to try Docker without having
    to make any investment – you just browse the site and get started.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为Play with Docker的在线Docker游乐场，网址是[https://dockr.ly/play-with-docker](https://dockr.ly/play-with-docker)。Windows支持预计很快就会到来，这是一个很好的尝试Docker的方式，而不需要进行任何投资
    - 你只需浏览该网站并开始使用。
- en: Docker Desktop
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Desktop
- en: Docker Desktop is available from Docker Hub – you can find it by navigating
    to [https://dockr.ly/docker-for-windows](https://dockr.ly/docker-for-windows).
    You can choose between the **Stable channel** and the **Edge channel**. Both channels
    give you the community Docker Engine, but the Edge channel follows the monthly
    release cycle, and you will get experimental features. The Stable channel tracks
    the Docker Engine release cycle, with quarterly updates.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop可以从Docker Hub获取 - 你可以通过导航到[https://dockr.ly/docker-for-windows](https://dockr.ly/docker-for-windows)找到它。你可以在**稳定通道**和**Edge通道**之间进行选择。两个通道都提供社区Docker
    Engine，但Edge通道遵循每月发布周期，并且你将获得实验性功能。稳定通道跟踪Docker Engine的发布周期，每季度更新一次。
- en: You should use the Edge channel in development if you want to work with the
    latest features. In test and production, you will use Docker Enterprise, so you
    need to be careful that you don't use features in development, which are not yet
    available in Enterprise. Docker recently announced **Docker Desktop Enterprise**,
    which lets developers run the exact same engine locally as their organization
    is running in production.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用最新功能进行开发，应该使用Edge通道。在测试和生产中，你将使用Docker Enterprise，因此需要小心，不要使用开发中尚未在Enterprise中可用的功能。Docker最近宣布了**Docker
    Desktop Enterprise**，让开发人员可以在本地运行与其组织在生产中运行的完全相同的引擎。
- en: 'You need to download and run the installer. The installer will verify that
    you can run Docker in your setup and will configure the Windows features needed
    to support Docker. When Docker is running, you will see a whale icon in the notification
    bar, which you can right-click on for options:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要下载并运行安装程序。安装程序将验证你的设置是否可以运行Docker，并配置支持Docker所需的Windows功能。当Docker运行时，你会在通知栏看到一个鲸鱼图标，你可以右键单击以获取选项：
- en: '![](Images/3b868f4a-752c-4445-94c1-93403f042d4a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3b868f4a-752c-4445-94c1-93403f042d4a.png)'
- en: You need to select Switch to Windows containers... before you do anything else.
    Docker Desktop on Windows can run Linux containers by running Docker inside a
    Linux VM on your machine. This is great for testing out Linux apps to see how
    they run in containers, but this book is all about Windows containers – so switch
    over, and Docker will remember this setting in future.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何其他操作之前，你需要选择切换到Windows容器...。Windows上的Docker Desktop可以通过在你的机器上运行Linux VM中的Docker来运行Linux容器。这对于测试Linux应用程序以查看它们在容器中的运行方式非常有用，但本书关注的是Windows容器
    - 所以切换过去，Docker将在未来记住这个设置。
- en: 'While Docker for Windows is running, you can open Command Prompt or a PowerShell
    session and start working with containers. First, verify that everything is working
    as expected by running `docker version`. You should see an output similar to this
    code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上运行Docker时，你可以打开命令提示符或PowerShell会话并开始使用容器。首先，通过运行`docker version`来验证一切是否按预期工作。你应该看到类似于这段代码片段的输出：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output tells you the version of the command-line client and the Docker Engine.
    The operating system field should read *Windows* for both; if not, then you may
    still be in Linux mode, and you'll need to switch to Windows containers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出会告诉你命令行客户端和Docker Engine的版本。操作系统字段应该都是*Windows*；如果不是，那么你可能仍然处于Linux模式，需要切换到Windows容器。
- en: 'Now run a simple container with the Docker CLI:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用Docker CLI运行一个简单的容器：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This uses a public image on Docker Hub – one of the sample images for this book,
    which Docker will pull the first time you use it. If you don't have any other
    images, this will take a few minutes, as it will also download the Microsoft Nano
    Server image, which my image uses as a base. When the container runs, it shows
    some ASCII art and then exits. Run the same command again, and you will see that
    it executes much more quickly as the images are now cached locally.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了 Docker Hub 上的公共镜像 - 本书的示例镜像之一，Docker 在您第一次使用时会拉取。如果您没有其他镜像，这将需要几分钟，因为它还会下载我镜像所使用的
    Microsoft Nano Server 镜像。当容器运行时，它会显示一些 ASCII 艺术然后退出。再次运行相同的命令，您会发现它执行得更快，因为镜像现在已经在本地缓存中。
- en: 'Docker Desktop checks for updates when it starts and will prompt you to download
    a new version when it''s ready. You can keep your Docker tools up to date just
    by installing new versions when they''re released. You can check the current versions
    you have installed by selecting **About Docker Desktop** from the taskbar menu:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop 在启动时会检查更新，并在准备好时提示您下载新版本。只需在发布新版本时安装新版本，即可使您的 Docker 工具保持最新。您可以通过从任务栏菜单中选择
    **关于 Docker Desktop** 来检查您已安装的当前版本：
- en: '![](Images/fdd0cd57-b688-4ead-9e85-e97216e4d720.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fdd0cd57-b688-4ead-9e85-e97216e4d720.png)'
- en: That's all the setup you need. Docker Desktop also contains the Docker Compose
    tool I'll be using later in the book, so you're all set to follow along with the
    code samples.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您需要的所有设置。Docker Desktop 还包含了我将在本书中稍后使用的 Docker Compose 工具，因此您已准备好跟着代码示例进行操作。
- en: Docker Engine
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 引擎
- en: Docker Desktop is great for developing with containers on Windows 10\. For production
    environments where you have a headless server with no UI, you install Docker Engine
    to run as a background Windows Service using a PowerShell module.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop 在 Windows 10 上使用容器进行开发非常方便。对于没有 UI 的生产环境中，您可以安装 Docker 引擎以作为后台
    Windows 服务运行，使用 PowerShell 模块进行安装。
- en: 'On a new installation of Windows Server 2019 Core, use the `sconfig` tool to
    install all the latest Windows updates, and then run these PowerShell commands
    to install the Docker Engine and Docker CLI:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在新安装的 Windows Server 2019 Core 上，使用 `sconfig` 工具安装所有最新的 Windows 更新，然后运行这些 PowerShell
    命令来安装 Docker 引擎和 Docker CLI：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will configure the server with the necessary Windows features, install
    Docker, and set it up to run as a Windows service. Depending on how many Windows
    updates were installed, you may need to reboot the server:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将配置服务器所需的 Windows 功能，安装 Docker，并设置其作为 Windows 服务运行。根据安装了多少 Windows 更新，您可能需要重新启动服务器：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When the server is online, confirm that Docker is running with `docker version`,
    and then run a container from the sample image for this chapter:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器在线时，请确认 Docker 是否正在运行 `docker version`，然后从本章的示例镜像中运行一个容器：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can update your server when a new version of Docker Engine is released
    by repeating the `Install` command, and adding the `-Update` flag:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当发布新版本的 Docker Engine 时，您可以通过重复 `Install` 命令并添加 `-Update` 标志来更新服务器：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I use this configuration for some of my environments – running Windows Server
    2019 Core in a lightweight VM that only has Docker installed. You can use Docker
    on the server by connecting with Remote Desktop, or you can configure the Docker
    Engine to allow remote connections, which lets you manage Docker containers on
    your server using `docker` commands on your laptop. This is a more advanced setup,
    but it does give you secure remote access.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一些环境中使用这个配置 - 在轻量级虚拟机中运行 Windows Server 2019 Core，只安装了 Docker。您可以通过远程桌面连接在服务器上使用
    Docker，或者您可以配置 Docker 引擎以允许远程连接，这样您就可以使用笔记本电脑上的 `docker` 命令管理服务器上的 Docker 容器。这是一个更高级的设置，但它确实为您提供了安全的远程访问。
- en: 'It''s best to set up the Docker Engine so that communication with the client
    is secured using TLS, the same encryption technique used by HTTPS. Clients can
    only connect if they have the right TLS certificates to authenticate with the
    service. You can set this up by running these PowerShell commands inside the VM,
    supplying the VM''s external IP address:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最好设置Docker引擎，以便使用TLS对客户端进行安全通信，这与HTTPS使用的加密技术相同。只有具有正确TLS证书的客户端才能连接到服务。您可以通过在VM内运行以下PowerShell命令来设置这一点，提供VM的外部IP地址：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Don't worry too much about what this command is doing. Over the next few chapters,
    you'll get a good understanding of all these Docker options. I'm using a Docker
    image based on one from Stefan Scherer, who is a Microsoft MVP and Docker Captain.
    The image has a script that secures the Docker Engine with TLS certificates. You
    can read more details on Stefan's blog at [https://stefanscherer.github.io](https://stefanscherer.github.io).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不要太担心这个命令在做什么。在接下来的几章中，您将对所有这些Docker选项有一个很好的理解。我正在使用一个基于Stefan Scherer的Docker镜像，他是微软MVP和Docker
    Captain。该镜像有一个脚本，用TLS证书保护Docker引擎。您可以在Stefan的博客上阅读更多详细信息[https://stefanscherer.github.io](https://stefanscherer.github.io)。
- en: When this command completes, it will have configured the Docker Engine API to
    allow only secure remote connections and will also have created the certificates
    that the client needs to use to connect. Copy these certificates from `C:\certs\client`
    on the VM onto the machine where you want to use the Docker client.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个命令完成时，它将配置Docker引擎API，只允许安全的远程连接，并且还将创建客户端需要使用的证书。从VM上的`C:\certs\client`目录中复制这些证书到您想要使用Docker客户端的机器上。
- en: 'On the client machine, you can set environment variables to point the Docker
    client to use a remote Docker service. These commands will set up a remote connection
    to the VM (assuming you have used the same path for the certificate files on the
    client), as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端机器上，您可以设置环境变量，指向Docker客户端使用远程Docker服务。这些命令将建立与VM的远程连接（假设您在客户端上使用了相同的证书文件路径），如下所示：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can use this approach to securely connect to any remote Docker Engine. If
    you don't have access to Windows 10 or Windows Server 2019, you can create a VM
    on the cloud and connect to it using the same commands.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这种方法安全地连接到任何远程Docker引擎。如果您没有Windows 10或Windows Server 2019的访问权限，您可以在云上创建一个VM，并使用相同的命令连接到它。
- en: Docker in an Azure VM
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure VM中的Docker
- en: Microsoft makes it easy to run Docker in Azure. They provide a VM image with
    Docker installed and configured and with the base Windows images already pulled
    so you can get started quickly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 微软让在Azure中运行Docker变得很容易。他们提供了一个带有Docker安装和配置的VM映像，并且已经拉取了基本的Windows映像，这样您就可以快速开始使用。
- en: For testing and exploring, I always use DevTest labs in Azure. It's a great
    feature for non-production environments. By default, any VMs you create in a DevTest
    lab will be turned off every evening, so you don't end up with a big Azure bill
    from a VM you have used for a few hours and forgotten to turn off.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试和探索，我总是在Azure中使用DevTest实验室。这是一个非生产环境的很棒的功能。默认情况下，在DevTest实验室中创建的任何虚拟机每天晚上都会被关闭，这样你就不会因为使用了几个小时并忘记关闭的虚拟机而产生大量的Azure账单。
- en: 'You can create a DevTest Lab through the Azure portal, and then create a VM
    from Microsoft''s VM image **Windows Server 2019 Datacenter with Containers**.
    As an alternative to the Azure portal, you can use the `az` command line to manage
    the DevTest lab. I''ve packaged `az` in a Docker image, which you can run in a
    Windows container:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过Azure门户创建一个DevTest实验室，然后从Microsoft的VM映像**Windows Server 2019 Datacenter
    with Containers**创建一个VM。作为Azure门户的替代方案，您可以使用`az`命令行来管理DevTest实验室。我已经将`az`打包到一个Docker镜像中，您可以在Windows容器中运行它：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This runs an interactive Docker container that has the `az` command packaged
    and ready to use. Run `az login`, and you''ll need to open a browser and authenticate
    the Azure CLI. Then, you can run this in the container to create a VM:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行一个交互式的Docker容器，其中包含打包好并准备好使用的`az`命令。运行`az login`，然后你需要打开浏览器并对Azure CLI进行身份验证。然后，你可以在容器中运行以下命令来创建一个VM：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The VM uses the full Windows Server 2019 installation with the UI, so you can
    connect to the machine with Remote Desktop, open a PowerShell session, and start
    using Docker right away. Just as with the other options, you can check whether
    Docker is running with `docker version` and then run a container from the sample
    image for this chapter:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 该VM使用带有UI的完整Windows Server 2019安装，因此你可以使用远程桌面连接到该机器，打开PowerShell会话，并立即开始使用Docker。与其他选项一样，你可以使用`docker
    version`检查Docker是否正在运行，然后从本章的示例镜像中运行一个容器：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If an Azure VM is your preferred option, you can follow the steps from the previous
    section to secure the Docker API for remote access. This way you can run the Docker
    command line on your laptop to manage containers on the cloud. The Azure VM deploys
    Docker using PowerShell, so you can update the Docker Engine on your VM using
    the `InstallPackage ... -Update` command from the previous section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Azure VM是你首选的选项，你可以按照上一节的步骤来保护远程访问的Docker API。这样你就可以在笔记本电脑上运行Docker命令行来管理云上的容器。Azure
    VM使用PowerShell部署Docker，因此你可以使用上一节中的`InstallPackage ... -Update`命令来更新VM上的Docker
    Engine。
- en: All these options – Windows 10, Windows Server 2019, and the Azure VM – can
    run the exact same Docker images with the same result. The sample application
    in the Docker image, `dockeronwindows/ch01-whale:2e`, behaves in the same way
    on every environment.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些选项 - Windows 10、Windows Server 2019和Azure VM - 都可以运行相同的Docker镜像，并产生相同的结果。Docker镜像中的示例应用程序`dockeronwindows/ch01-whale:2e`在每个环境中的行为都是相同的。
- en: Learning about Docker with this book
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过本书学习Docker
- en: Every code listing in this book is accompanied by a full code sample on my GitHub
    repository at [https://github.com/sixeyed/docker-on-windows](https://github.com/sixeyed/docker-on-windows).
    There's a branch for this edition of the book, called `second-edition`. The source
    tree is organized into a folder for each chapter, and for each chapter there's
    a folder for each code sample. In this chapter, I've used three samples to create
    Docker images, which you'll find in `ch01\ch01-whale`, `ch01\ch01-az`, and `ch01\ch01-dockertls`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的每个代码清单都附有我GitHub存储库中的完整代码示例，网址为[https://github.com/sixeyed/docker-on-windows](https://github.com/sixeyed/docker-on-windows)。书中有一个名为`second-edition`的分支。源代码树按章节组织，每个章节都有一个用于每个代码示例的文件夹。在本章中，我使用了三个示例来创建Docker镜像，你可以在`ch01\ch01-whale`、`ch01\ch01-az`和`ch01\ch01-dockertls`中找到它们。
- en: The code listings in this book may be condensed, but the full code can always
    be found in the GitHub repository.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码清单可能会被压缩，但完整的代码始终可以在GitHub存储库中找到。
- en: I prefer to follow along with code samples when I'm learning a new technology,
    but if you want to use working versions of the demo applications, every sample
    is also available as a public Docker image on Docker Hub. Wherever you see a `docker
    container run` command, the image already exists on Docker Hub, so you can use
    mine rather than building your own if you wish. All the images in the `dockeronwindows`
    organization, like this chapter's `dockeronwindows/ch01-whale:2e`, were built
    from the relevant Dockerfile in the GitHub repository.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我在学习新技术时更喜欢跟着代码示例走，但如果你想使用演示应用程序的工作版本，每个示例也可以作为公共Docker镜像在Docker Hub上找到。无论何时看到`docker
    container run`命令，该镜像已经存在于Docker Hub上，因此如果愿意，你可以使用我的镜像而不是构建自己的。`dockeronwindows`组织中的所有镜像，比如本章的`dockeronwindows/ch01-whale:2e`，都是从GitHub存储库中相关的Dockerfile构建的。
- en: My own development environment is split between Windows 10, where I use Docker
    Desktop, and Windows Server 2019, where I run Docker Enterprise Engine. My test
    environment is based on Windows Server 2019 Core, where I also run Docker Enterprise
    Engine. I've verified all the code samples in this book on all of these environments.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我的开发环境分为Windows 10和Windows Server 2019，我在Windows 10上使用Docker Desktop，在Windows
    Server 2019上运行Docker Enterprise Engine。我的测试环境基于Windows Server 2019 Core，我也在那里运行Docker
    Enterprise Engine。我已在所有这些环境中验证了本书中的所有代码示例。
- en: I'm using version 18.09 of Docker, which is the latest release at the time of
    writing. Docker has always been backward-compatible, so if you're using a version
    later than 18.09 with Windows 10 or Windows Server 2019, then the sample Dockerfiles
    and images should work in the same way.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用Docker的18.09版本，这是我写作时的最新版本。Docker一直向后兼容，所以如果你在Windows 10或Windows Server
    2019上使用的版本晚于18.09，那么示例Dockerfiles和镜像应该以相同的方式工作。
- en: My goal is for this to be the definitive book about Docker on Windows, so I've
    covered everything from a 101 on containers, through modernizing .NET apps with
    Docker and the security implications of containers, to CI/CD and administration
    in production. The book ends with a guide to moving forward with Docker in your
    own projects.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我的目标是让这本书成为关于Windows上Docker的权威之作，所以我涵盖了从容器的基础知识，到使用Docker现代化.NET应用程序以及容器的安全性影响，再到CI/CD和生产管理的所有内容。这本书以指导如何在自己的项目中继续使用Docker结束。
- en: If you want to discuss the book or your own Docker journey with me, feel free
    to ping me on Twitter at `@EltonStoneman`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想讨论这本书或者你自己的Docker之旅，欢迎在Twitter上@EltonStoneman找我。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter I introduced Docker, an application platform which can run
    new and old apps in lightweight units of compute called containers. Companies
    are moving to Docker for efficiency, security, and portability. I covered the
    following topics:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我介绍了Docker，这是一个可以在轻量级计算单元容器中运行新旧应用程序的应用平台。公司正在转向Docker以提高效率、安全性和可移植性。我涵盖了以下主题：
- en: How Docker works on Windows and how containers are licensed.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker在Windows上的工作原理以及容器的许可。
- en: 'The key Docker concepts: images, registries, containers, and orchestrators.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker的关键概念：镜像、注册表、容器和编排器。
- en: The options to run Docker on Windows 10, Windows Server 2019, or Azure.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows 10、Windows Server 2019或Azure上运行Docker的选项。
- en: If you're planning to work along with the code samples in the rest of the book,
    you should have a working Docker environment by now. In [Chapter 2](5b6871d5-15a7-4dc2-9b7e-29a802491f24.xhtml),
    *Packaging and Running Applications as Docker Containers,* I'll move onto packaging
    more complex apps as Docker images and show how to manage states in containers
    with Docker volumes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算在本书的其余部分跟着代码示例一起工作，那么你现在应该有一个可用的Docker环境了。在[第2章](5b6871d5-15a7-4dc2-9b7e-29a802491f24.xhtml)中，*将应用程序打包并作为Docker容器运行*，我将继续讨论如何将更复杂的应用程序打包为Docker镜像，并展示如何使用Docker卷在容器中管理状态。
