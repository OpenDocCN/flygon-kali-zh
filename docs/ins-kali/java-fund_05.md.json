["```java\npublic interface PersonBehavior {\n   void breathe();\n   void sleep();\n   void walk(int speed);\n}\n```", "```java\npublic class Doctor implements PersonBehavior {\n}\n```", "```java\npublic class Doctor implements PersonBehavior {\n   @Override\n   public void breathe() {\n\n   }\n   @Override\n   public void sleep() {\n   }\n   @Override\n   public void walk(int speed) {\n   }\n```", "```java\npublic class Engineer implements PersonBehavior {\n   @Override\n   public void breathe() {\n\n   }\n   @Override\n   public void sleep() {\n   }\n   @Override\n   public void walk(int speed) {\n   }\n}\n```", "```java\npublic class ClassName implements  InterfaceA, InterfaceB, InterfaceC {\n\n}\n```", "```java\n    public interface PersonListener {\n       void onPersonWalking();\n       void onPersonSleeping();\n    }\n    ```", "```java\n    public class Doctor implements PersonBehavior, PersonListener {\n    ```", "```java\n    @Override\n    public void breathe() {\n    }\n    @Override\n    public void sleep() {\n        //TODO: Do other operations here\n        // then raise event\n        this.onPersonSleeping();\n    }\n    @Override\n    public void walk(int speed) {\n        //TODO: Do other operations here\n        // then raise event\n        this.onPersonWalking();\n    }\n    @Override\n    public void onPersonWalking() {\n        System.out.println(\"Event: onPersonWalking\");\n    }\n    @Override\n    public void onPersonSleeping() {\n        System.out.println(\"Event: onPersonSleeping\");\n    } \n    ```", "```java\n    public static void main(String[] args){\n       Doctor myDoctor = new Doctor();\n       myDoctor.walk(20);\n       myDoctor.sleep();\n    }\n    ```", "```java\npublic class Doctor implements PersonBehavior, PersonListener {\n\n   public static void main(String[] args){\n       Doctor myDoctor = new Doctor();\n       myDoctor.walk(20);\n       myDoctor.sleep();\n   }\n   @Override\n   public void breathe() {\n   }\n   @Override\n   public void sleep() {\n       //TODO: Do other operations here\n       // then raise event\n       this.onPersonSleeping();\n   }\n   @Override\n   public void walk(int speed) {\n       //TODO: Do other operations here\n       // then raise event\n       this.onPersonWalking();\n   }\n   @Override\n   public void onPersonWalking() {\n       System.out.println(\"Event: onPersonWalking\");\n   }\n   @Override\n   public void onPersonSleeping() {\n       System.out.println(\"Event: onPersonSleeping\");\n   }\n}\n```", "```java\nAnimal moved: Walking\nSound made: Move\n```", "```java\nStudent student = new Student();\nPerson person = (Person)student;\n```", "```java\nStudent student = new Student();\nPerson person = (Person)student;\nStudent newStudent = (Student)person;\n```", "```java\nStudent student = new Student();\nPerson person = (Person)student;\nLecturer lecturer = (Lecturer) person;\n```", "```java\nif (person instanceof  Lecturer) {\n  Lecturer lecturer() = (Lecturer) person;\n}\n```", "```java\nObject object = (Object)person;\nObject object1 = (Object)student;\n```", "```java\nPerson newPerson = (Person)object;\nStudent newStudent  = (Student)object1;\n```", "```java\nInteger a = new Integer(1);\n```", "```java\nInteger a = 1;\n```", "```java\nInteger a = 1;\nint b = a;\n```", "```java\npublic abstract class AbstractPerson {\n     //this class is abstract and cannot be instantiated\n}\n```", "```java\npublic class SubClass extends  AbstractPerson {\n       //TODO: implement all methods in AbstractPerson\n}\n```", "```java\n    public abstract class Patient {\n    }\n    ```", "```java\n    public abstract String getPersonType();\n    ```", "```java\n    public class Doctor extends Patient {\n    }\n    ```", "```java\n    @Override\n    public String getPersonType() {\n       return \"Arzt\";\n    }\n    ```", "```java\n    public class People extends Patient{\n       @Override\n       public String getPersonType() {\n           return \"Kranke\";\n       }\n    }\n    ```", "```java\n    public class HospitalTest {\n       public static void main(String[] args){\n\n       }\n    }\n    ```", "```java\n    Doctor doctor = new Doctor();\n    People people = new People();\n    ```", "```java\n    String str = doctor.getPersonType();\n    String str1 = patient.getPersonType();\n    System.out.println(str);\n    System.out.println(str1);\n    ```"]