["```kt\ngit clone git@github.com:MarcinMoskala/MarvelGallery.git\n\n```", "```kt\ngit checkout Character_search\n\n```", "```kt\nimplementation \"com.android.support:recyclerview-v7:$android_support_version\" \n```", "```kt\nimplementation \"com.android.support:appcompat-  \n\n    v7:$android_support_version\" \nimplementation \"com.android.support:design:$android_support_version\" \nimplementation \"com.android.support:support-\n\n    v4:$android_support_version\" \nimplementation \"com.android.support:recyclerview-\n\n    v7:$android_support_version\" \n```", "```kt\next.kotlin_version = '1.1.4-2' \next.android_support_version = \"26.0.1\" \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<RelativeLayout  \n\n   android:id=\"@+id/charactersView\" \n   android:layout_width=\"match_parent\" \n   android:layout_height=\"match_parent\" \n   android:background=\"@android:color/white\" \n   android:fitsSystemWindows=\"true\"> \n\n   <android.support.v4.widget.SwipeRefreshLayout  \n\n       android:id=\"@+id/swipeRefreshView\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\"> \n\n       <android.support.v7.widget.RecyclerView \n           android:id=\"@+id/recyclerView\" \n           android:layout_width=\"match_parent\" \n           android:layout_height=\"match_parent\" \n           android:scrollbars=\"vertical\" /> \n\n   </android.support.v4.widget.SwipeRefreshLayout> \n\n   <TextView \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"wrap_content\" \n       android:layout_alignParentBottom=\"true\" \n       android:background=\"@android:color/white\" \n       android:gravity=\"center\" \n       android:text=\"@string/marvel_copyright_notice\" /> \n</RelativeLayout> \n```", "```kt\n<string name=\"marvel_copyright_notice\">\n\n    Data provided by Marvel. \u00a9 2017 MARVEL\n\n</string> \n```", "```kt\npackage com.sample.marvelgallery.view.views \n\nimport android.util.AttributeSet \nimport android.widget.FrameLayout \nimport android.content.Context \n\nclass SquareFrameLayout @JvmOverloads constructor( // 1 \n       context: Context, \n       attrs: AttributeSet? = null, \n       defStyleAttr: Int = 0 \n) : FrameLayout(context, attrs, defStyleAttr) { \n\n   override fun onMeasure(widthMeasureSpec: Int, \n\n   heightMeasureSpec: Int) { \n       super.onMeasure(widthMeasureSpec, widthMeasureSpec) // 2 \n   } \n} \n```", "```kt\n// ./res/layout/item_character.xml \n\n<com.sample.marvelgallery.view.views.SquareFrameLayout  \n\n   android:layout_width=\"match_parent\" \n   android:layout_height=\"wrap_content\" \n   android:gravity=\"center_horizontal\" \n   android:orientation=\"horizontal\" \n   android:padding=\"@dimen/element_padding\"> \n\n   <ImageView \n       android:id=\"@+id/imageView\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\"/> \n\n   <TextView \n       android:id=\"@+id/textView\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\" \n       android:gravity=\"center\" \n       android:paddingLeft=\"10dp\" \n       android:paddingRight=\"10dp\" \n       android:shadowColor=\"#111\" \n       android:shadowDx=\"5\" \n       android:shadowDy=\"5\" \n       android:shadowRadius=\"0.01\" \n       android:textColor=\"@android:color/white\" \n       android:textSize=\"@dimen/standard_text_size\" \n       tools:text=\"Some name\" /> \n</com.sample.marvelgallery.view.views.SquareFrameLayout> \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<resources> \n   <dimen name=\"character_header_height\">240dp</dimen> \n   <dimen name=\"standard_text_size\">20sp</dimen> \n   <dimen name=\"character_description_padding\">10dp</dimen> \n   <dimen name=\"element_padding\">10dp</dimen> \n</resources> \n```", "```kt\npackage com.sample.marvelgallery.model \n\ndata class MarvelCharacter( \n       val name: String, \n       val imageUrl: String \n) \n```", "```kt\npackage com.sample.marvelgallery.view.common \n\nimport android.support.v7.widget.RecyclerView \nimport android.support.annotation.LayoutRes \nimport android.view.View \n\nabstract class ItemAdapter<T : RecyclerView.ViewHolder>\n\n(@LayoutRes open val layoutId: Int) { // 1 \n\n   abstract fun onCreateViewHolder(itemView: View): T // 2 \n\n   @Suppress(\"UNCHECKED_CAST\") // 1 \n   fun bindViewHolder(holder: RecyclerView.ViewHolder) { \n       (holder as T).onBindViewHolder() // 1 \n   } \n\n   abstract fun T.onBindViewHolder() // 1, 3 \n} \n```", "```kt\npackage com.sample.marvelgallery.view.common \n\nimport android.support.v7.widget.RecyclerView \nimport android.view.LayoutInflater \nimport android.view.ViewGroup \n\nopen class RecyclerListAdapter( // 1 \n       var items List<AnyItemAdapter> = listOf() \n) : RecyclerView.Adapter<RecyclerView.ViewHolder>() { \n\n   override final fun getItemCount() = items.size // 4 \n\n   override final fun getItemViewType(position: Int) = \n\n       items[position].layoutId // 3, 4 \n\n   override final fun onCreateViewHolder(parent: ViewGroup, \n\n       layoutId: Int): RecyclerView.ViewHolder { // 4 \n\n   val itemView = LayoutInflater.from(parent.context)\n\n       .inflate(layoutId, parent, false) \n       return items.first \n\n       { it.layoutId == layoutId }.onCreateViewHolder(itemView) // 3 \n   } \n\n   override final fun onBindViewHolder\n\n   (holder: RecyclerView.ViewHolder, position: Int) { // 4 \n       items[position].bindViewHolder(holder) \n   } \n} \n\ntypealias AnyItemAdapter = ItemAdapter \n\n    <out RecyclerView.ViewHolder> // 5 \n```", "```kt\npackage com.sample.marvelgallery.view.main \n\nimport com.sample.marvelgallery.view.common.AnyItemAdapter \nimport com.sample.marvelgallery.view.common.RecyclerListAdapter \n\nclass MainListAdapter(items: List<AnyItemAdapter>) : RecyclerListAdapter(items) \n```", "```kt\nclass MainListAdapter(items: List<AnyItemAdapter>) : RecyclerListAdapter(items) { \n\n   fun add(itemAdapter: AnyItemAdapter) { \n       items += itemAdapter) \n       val index = items.indexOf(itemAdapter) \n       if (index == -1) return \n       notifyItemInserted(index) \n   } \n\n   fun delete(itemAdapter: AnyItemAdapter) { \n       val index = items.indexOf(itemAdapter) \n       if (index == -1) return \n       items -= itemAdapter \n       notifyItemRemoved(index) \n   } \n }    \n```", "```kt\npackage com.sample.marvelgallery.view.main \n\nimport android.support.v7.widget.RecyclerView \nimport android.view.View \nimport android.widget.ImageView \nimport android.widget.TextView \nimport com.sample.marvelgallery.R \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.view.common.ItemAdapter \nimport com.sample.marvelgallery.view.common.bindView \nimport com.sample.marvelgallery.view.common.loadImage \n\nclass CharacterItemAdapter( \n       val character: MarvelCharacter // 1 \n) : ItemAdapter<CharacterItemAdapter.ViewHolder>(R.layout.item_character) { \n\n   override fun onCreateViewHolder(itemView: View) = ViewHolder(itemView) \n\n   override fun ViewHolder.onBindViewHolder() { // 2 \n       textView.text = character.name \n       imageView.loadImage(character.imageUrl) // 3 \n   } \n\n   class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)  \n\n   { \n       val textView by bindView<TextView>(R.id.textView) // 4 \n       val imageView by bindView<ImageView>(R.id.imageView) // 4 \n   } \n} \n```", "```kt\n// ViewExt.kt \npackage com.sample.marvelgallery.view.common \n\nimport android.support.v7.widget.RecyclerView \nimport android.view.View \n\nfun <T : View> RecyclerView.ViewHolder.bindView(viewId: Int)  \n      = lazy { itemView.findViewById<T>(viewId) } \n```", "```kt\nimplementation \"com.android.support:recyclerview-\n\nv7:$android_support_version\" \nimplementation \"com.github.bumptech.glide:glide:$glide_version\" \n```", "```kt\next.android_support_version = \"26.0.0\" \next.glide_version = \"3.8.0\" \n```", "```kt\n<manifest  \n   package=\"com.sample.marvelgallery\"> \n   <uses-permission android:name=\"android.permission.INTERNET\" /> \n   <application \n... \n```", "```kt\n// ViewExt.kt \npackage com.sample.marvelgallery.view.common \n\nimport android.support.v7.widget.RecyclerView \nimport android.view.View \nimport android.widget.ImageView \nimport com.bumptech.glide.Glide \n\nfun <T : View> RecyclerView.ViewHolder.bindView(viewId: Int)  \n       = lazy { itemView.findViewById<T>(viewId) } \n\nfun ImageView.loadImage(photoUrl: String) { \n   Glide.with(context) \n           .load(photoUrl) \n           .into(this) \n} \n```", "```kt\napply plugin: 'com.android.application' \napply plugin: 'kotlin-android' \napply plugin: 'kotlin-android-extensions' \n\nAnd we have some view defined in layout: \n\n<TextView \n   android:id=\"@+id/nameView\" \n   android:layout_width=\"wrap_content\" \n   android:layout_height=\"wrap_content\" /> \n```", "```kt\nimport kotlinx.android.synthetic.main.activity_main.* \n```", "```kt\nnameView.text = \"Some name\" \n```", "```kt\npackage com.sample.marvelgallery.view.main \n\nimport android.os.Bundle \nimport android.support.v7.app.AppCompatActivity \nimport android.support.v7.widget.GridLayoutManager \nimport android.view.Window \nimport com.sample.marvelgallery.R \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport kotlinx.android.synthetic.main.activity_main.* \n\nclass MainActivity : AppCompatActivity() { \n\n   private val characters = listOf( // 1 \n       MarvelCharacter(name = \"3-D Man\", imageUrl = \"http://i.annihil.us/u/prod/marvel/i/mg/c/e0/535fecbbb9784.jpg\"), \n       MarvelCharacter(name = \"Abomination (Emil Blonsky)\", imageUrl = \"http://i.annihil.us/u/prod/marvel/i/mg/9/50/4ce18691cbf04.jpg\") \n   ) \n\n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       requestWindowFeature(Window.FEATURE_NO_TITLE) // 2 \n       setContentView(R.layout.activity_main) \n       recyclerView.layoutManager = GridLayoutManager(this, 2) // 3 \n       val categoryItemAdapters = characters\n\n       .map(::CharacterItemAdapter) // 4 \n       recyclerView.adapter = MainListAdapter(categoryItemAdapters) \n   } \n} \n```", "```kt\ndependencies { \n   implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:\n\n   $kotlin_version\" \n   implementation \"com.android.support:appcompat-v7:\n\n   $android_support_version\" \n   implementation \"com.android.support:recyclerview-v7:\n\n   $android_support_version\" \n   implementation \"com.github.bumptech.glide:glide:$glide_version\" \n\n   // RxJava \n   implementation \"io.reactivex.rxjava2:rxjava:$rxjava_version\" \n\n   // RxAndroid \n   implementation \"io.reactivex.rxjava2:rxandroid:$rxandroid_version\" \n\n   // Retrofit \n   implementation([\"com.squareup.retrofit2:retrofit:$retrofit_version\", \n                   \"com.squareup.retrofit2:adapter- \n\n                    rxjava2:$retrofit_version\", \n                   \"com.squareup.retrofit2:converter-\n\n                    gson:$retrofit_version\", \n                   \"com.squareup.okhttp3:okhttp:$okhttp_version\", \n                   \"com.squareup.okhttp3:logging-\n\n                   interceptor:$okhttp_version\"]) \n\n  testImplementation 'junit:junit:4.12' \n  androidTestImplementation \n\n  'com.android.support.test:runner:1.0.0' \n  androidTestImplementation   \n\n  'com.android.support.test.espresso:espresso-core:3.0.0' \n} \n```", "```kt\next.kotlin_version = '1.1.3-2' \next.android_support_version = \"26.0.0\" \next.glide_version = \"3.8.0\" \next.retrofit_version = '2.2.0' \next.okhttp_version = '3.6.0' \next.rxjava_version = \"2.1.2\" \next.rxandroid_version = '2.0.1' \n```", "```kt\nval retrofit by lazy { makeRetrofit() } // 1 \n\nprivate fun makeRetrofit(): Retrofit = Retrofit.Builder() \n       .baseUrl(\"http://gateway.marvel.com/v1/public/\") // 2 \n       .build() \n```", "```kt\n// Retrofit.kt \npackage com.sample.marvelgallery.data.network.provider \n\nimport com.google.gson.Gson \nimport okhttp3.OkHttpClient \nimport retrofit2.Retrofit \nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory \nimport retrofit2.converter.gson.GsonConverterFactory \nimport java.util.concurrent.TimeUnit \n\nval retrofit by lazy { makeRetrofit() } \n\nprivate fun makeRetrofit(): Retrofit = Retrofit.Builder() \n       .baseUrl(\"http://gateway.marvel.com/v1/public/\") \n       .client(makeHttpClient()) \n       .addConverterFactory(GsonConverterFactory.create(Gson())) // 1 \n       .addCallAdapterFactory(RxJava2CallAdapterFactory.create()) // 2 \n       .build() \n\nprivate fun makeHttpClient() = OkHttpClient.Builder() \n       .connectTimeout(60, TimeUnit.SECONDS) // 3 \n       .readTimeout(60, TimeUnit.SECONDS) // 4 \n       .addInterceptor(makeHeadersInterceptor()) // 5 \n       .addInterceptor(makeAddSecurityQueryInterceptor()) // 6 \n       .addInterceptor(makeLoggingInterceptor()) // 7 \n       .build() \n```", "```kt\n// HeadersInterceptor.kt \npackage com.sample.marvelgallery.data.network.provider \n\nimport okhttp3.Interceptor \n\nfun makeHeadersInterceptor() = Interceptor { chain -> // 1 \n   chain.proceed(chain.request().newBuilder() \n           .addHeader(\"Accept\", \"application/json\") \n           .addHeader(\"Accept-Language\", \"en\") \n           .addHeader(\"Content-Type\", \"application/json\") \n           .build()) \n}\n```", "```kt\n// LoggingInterceptor.kt \npackage com.sample.marvelgallery.data.network.provider \n\nimport com.sample.marvelgallery.BuildConfig \nimport okhttp3.logging.HttpLoggingInterceptor \n\nfun makeLoggingInterceptor() = HttpLoggingInterceptor().apply { \n   level = if (BuildConfig.DEBUG) HttpLoggingInterceptor.Level.BODY \n\n           else HttpLoggingInterceptor.Level.NONE \n} \n```", "```kt\norg.gradle.jvmargs=-Xmx1536m \nmarvelPublicKey=REPLEACE_WITH_YOUR_PUBLIC_MARVEL_KEY \nmarvelPrivateKey=REPLEACE_WITH_YOUR_PRIVATE_MARVEL_KEY \n```", "```kt\ndefaultConfig { \n   applicationId \"com.sample.marvelgallery\" \n   minSdkVersion 16 \n   targetSdkVersion 26 \n   versionCode 1 \n   versionName \"1.0\" \n   testInstrumentationRunner \n\n   \"android.support.test.runner.AndroidJUnitRunner\" \n   buildConfigField(\"String\", \"PUBLIC_KEY\", \"\\\"${marvelPublicKey}\\\"\") \n   buildConfigField(\"String\", \"PRIVATE_KEY\", \"\\\"${marvelPrivateKey}\\\"\") \n} \n```", "```kt\n// QueryInterceptor.kt \npackage com.sample.marvelgallery.data.network.provider \n\nimport com.sample.marvelgallery.BuildConfig \nimport okhttp3.Interceptor \n\nfun makeAddSecurityQueryInterceptor() = Interceptor { chain -> \n   val originalRequest = chain.request() \n   val timeStamp = System.currentTimeMillis() \n\n   // Url customization: add query parameters \n   val url = originalRequest.url().newBuilder() \n           .addQueryParameter(\"apikey\", BuildConfig.PUBLIC_KEY) // 1 \n           .addQueryParameter(\"ts\", \"$timeStamp\") // 1 \n           .addQueryParameter(\"hash\", calculatedMd5(timeStamp.toString() + BuildConfig.PRIVATE_KEY + BuildConfig.PUBLIC_KEY)) // 1 \n           .build() \n\n   // Request customization: set custom url \n   val request = originalRequest \n           .newBuilder() \n           .url(url) \n           .build() \n\n   chain.proceed(request) \n} \n```", "```kt\n// MD5.kt \npackage com.sample.marvelgallery.data.network.provider \n\nimport java.math.BigInteger \nimport java.security.MessageDigest \n\n/** \n* Calculate MD5 hash for text \n* @param timeStamp Current timeStamp \n* @return MD5 hash string \n*/ \nfun calculatedMd5(text: String): String { \n   val messageDigest = getMd5Digest(text) \n   val md5 = BigInteger(1, messageDigest).toString(16) \n   return \"0\" * (32 - md5.length) + md5 // 1 \n} \n\nprivate fun getMd5Digest(str: String): ByteArray = MessageDigest.getInstance(\"MD5\").digest(str.toByteArray()) \n\nprivate operator fun String.times(i: Int) = (1..i).fold(\"\") { acc, _ -> acc + this } \n```", "```kt\npackage com.sample.marvelgallery.data.network.dto \n\nclass DataContainer<T> { \n   var results: T? = null \n} \n\npackage com.sample.marvelgallery.data.network.dto \n\nclass DataWrapper<T> { \n   var data: DataContainer<T>? = null \n} \n\npackage com.sample.marvelgallery.data.network.dto \n\nclass ImageDto { \n\n   lateinit var path: String // 1 \n   lateinit var extension: String // 1 \n\n   val completeImagePath: String \n       get() = \"$path.$extension\" \n} \n\npackage com.sample.marvelgallery.data.network.dto \n\nclass CharacterMarvelDto { \n   lateinit var name: String // 1 \n   lateinit var thumbnail: ImageDto // 1 \n\n   val imageUrl: String \n       get() = thumbnail.completeImagePath \n} \n```", "```kt\npackage com.sample.marvelgallery.data.network \n\nimport com.sample.marvelgallery.data.network.dto.CharacterMarvelDto \nimport com.sample.marvelgallery.data.network.dto.DataWrapper \nimport io.reactivex.Single \nimport retrofit2.http.GET \nimport retrofit2.http.Query \n\ninterface MarvelApi { \n\n   @GET(\"characters\") \n   fun getCharacters( \n           @Query(\"offset\") offset: Int?, \n           @Query(\"limit\") limit: Int? \n   ): Single<DataWrapper<List<CharacterMarvelDto>>> \n}  \n```", "```kt\nretrofit.create(MarvelApi::class.java) // 1 \n\n    .getCharacters(0, 100) // 2\n\n    .subscribe({ /* code */ }) // 3 \n```", "```kt\npackage com.sample.marvelgallery.data \n\nimport com.sample.marvelgallery.model.MarvelCharacter \nimport io.reactivex.Single \n\ninterface MarvelRepository { \n\n   fun getAllCharacters(): Single<List<MarvelCharacter>> \n} \n\nAnd here is the implementation of MarvelRepository: \n\npackage com.sample.marvelgallery.data \n\nimport com.sample.marvelgallery.data.network.MarvelApi \nimport com.sample.marvelgallery.data.network.provider.retrofit \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport io.reactivex.Single \n\nclass MarvelRepositoryImpl : MarvelRepository { \n\n   val api = retrofit.create(MarvelApi::class.java) \n\n   override fun getAllCharacters(): Single<List<MarvelCharacter>> = api.getCharacters( \n           offset = 0, \n           limit = elementsOnListLimit \n   ).map { \n       it.data?.results.orEmpty().map(::MarvelCharacter) // 1 \n   } \n\n   companion object { \n       const val elementsOnListLimit = 50 \n   } \n} \n```", "```kt\npackage com.sample.marvelgallery.model \n\nimport com.sample.marvelgallery.data.network.dto.CharacterMarvelDto \n\nclass MarvelCharacter( \n       val name: String, \n       val imageUrl: String \n) { \n\n   constructor(dto: CharacterMarvelDto) : this( \n           name = dto.name, \n           imageUrl = dto.imageUrl \n   ) \n} \n```", "```kt\npackage com.sample.marvelgallery.data \n\nabstract class Provider<T> { \n\n   abstract fun creator(): T \n\n   private val instance: T by lazy { creator() } \n   var testingInstance: T? = null \n\n   fun get(): T = testingInstance ?: instance \n} \n```", "```kt\npackage com.sample.marvelgallery.data \n\nimport com.sample.marvelgallery.model.MarvelCharacter \nimport io.reactivex.Single \n\ninterface MarvelRepository { \n\n   fun getAllCharacters(): Single<List<MarvelCharacter>> \n\n   companion object : Provider<MarvelRepository>() { \n       override fun creator() = MarvelRepositoryImpl() \n   } \n} \n```", "```kt\nval marvelRepository = MarvelRepository.get()  \n```", "```kt\nMarvelRepository.get() // Returns instance of MarvelRepositoryImpl \n\nMarvelRepository.testingInstance= object: MarvelRepository { \n   override fun getAllCharacters(): Single<List<MarvelCharacter>>  \n         = Single.just(emptyList()) \n} \n\nMarvelRepository.get() // returns an instance of an anonymous class in which the returned list is always empty. \n```", "```kt\npackage com.sample.marvelgallery.presenter \n\nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.view.main.MainView \n\nclass MainPresenter(val view: MainView, val repository: MarvelRepository) { \n\n   fun onViewCreated() { \n   } \n\n   fun onRefresh() { \n   } \n} \n```", "```kt\npackage com.sample.marvelgallery.view.main.main \n\nimport com.sample.marvelgallery.model.MarvelCharacter \n\ninterface MainView { \n   var refresh: Boolean \n   fun show(items: List<MarvelCharacter>) \n   fun showError(error: Throwable) \n} \n```", "```kt\n// test source set \npackage com.sample.marvelgallery \n\nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport com.sample.marvelgallery.view.main.MainView \nimport io.reactivex.Single \nimport org.junit.Assert.assertEquals \nimport org.junit.Assert.fail \nimport org.junit.Test \n\n@Suppress(\"IllegalIdentifier\") // 1 \nclass MainPresenterTest { \n\n   @Test \n   fun `After view was created, list of characters is loaded and displayed`() { \n       assertOnAction { onViewCreated() }.thereIsSameListDisplayed() \n   } \n\n   @Test \n   fun `New list is shown after view was refreshed`() { \n       assertOnAction { onRefresh() }.thereIsSameListDisplayed() \n   } \n\n   private fun assertOnAction(action: MainPresenter.() -> Unit) \n           = PresenterActionAssertion(action) \n\n   private class PresenterActionAssertion\n\n   (val actionOnPresenter: MainPresenter.() -> Unit) { \n\n       fun thereIsSameListDisplayed() { \n           // Given \n           val exampleCharacterList = listOf(// 2 \n                   MarvelCharacter(\"ExampleName\", \"ExampleImageUrl\"), \n                   MarvelCharacter(\"Name1\", \"ImageUrl1\"), \n                   MarvelCharacter(\"Name2\", \"ImageUrl2\") \n           ) \n\n           var displayedList: List<MarvelCharacter>? = null \n\n           val view = object : MainView { //3 \n               override var refresh: Boolean = false \n\n               override fun show(items: List<MarvelCharacter>) { \n                   displayedList = items // 4 \n               } \n\n               override fun showError(error: Throwable) { \n                   fail() //5 \n               } \n           } \n           val marvelRepository = object : MarvelRepository { // 3 \n               override fun getAllCharacters(): \n\n                Single<List<MarvelCharacter>> \n                  = Single.just(exampleCharacterList) // 6 \n           } \n\n           val mainPresenter = MainPresenter(view, marvelRepository) \n\n           // 3 \n\n           // When \n           mainPresenter.actionOnPresenter() // 7 \n\n           // Then \n           assertEquals(exampleCharacterList, displayedList) // 8 \n       } \n   } \n} \n```", "```kt\n// test source set \npackage com.sample.marvelgallery.helpers \n\nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport io.reactivex.Single \n\nclass BaseMarvelRepository( \n       val onGetCharacters: () -> Single<List<MarvelCharacter>> \n) : MarvelRepository { \n\n   override fun getAllCharacters() = onGetCharacters() \n} \n\n// test source set \npackage com.sample.marvelgallery.helpers \n\nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.view.main.MainView \n\nclass BaseMainView( \n       var onShow: (items: List<MarvelCharacter>) -> Unit = {}, \n       val onShowError: (error: Throwable) -> Unit = {}, \n       override var refresh: Boolean = false \n) : MainView { \n\n   override fun show(items: List<MarvelCharacter>) { \n       onShow(items) \n   } \n\n   override fun showError(error: Throwable) { \n       onShowError(error) \n   } \n} \n\n// test source set \npackage com.sample.marvelgallery.helpers \n\nimport com.sample.marvelgallery.model.MarvelCharacter \n\nobject Example { \n   val exampleCharacter = MarvelCharacter\n\n   (\"ExampleName\", \"ExampleImageUrl\") \n   val exampleCharacterList = listOf( \n           exampleCharacter, \n           MarvelCharacter(\"Name1\", \"ImageUrl1\"), \n           MarvelCharacter(\"Name2\", \"ImageUrl2\") \n   ) \n} \n```", "```kt\npackage com.sample.marvelgallery \n\nimport com.sample.marvelgallery.helpers.BaseMainView \nimport com.sample.marvelgallery.helpers.BaseMarvelRepository \nimport com.sample.marvelgallery.helpers.Example \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport io.reactivex.Single \nimport org.junit.Assert.assertEquals \nimport org.junit.Assert.fail \nimport org.junit.Test \n\n@Suppress(\"IllegalIdentifier\") \n\nclass MainPresenterTest { \n\n   @Test \n   fun `After view was created, list of characters is loaded and displayed`() { \n       assertOnAction { onViewCreated() }.thereIsSameListDisplayed() \n   } \n\n   @Test \n   fun `New list is shown after view was refreshed`() { \n       assertOnAction { onRefresh() }.thereIsSameListDisplayed() \n   } \n\n   private fun assertOnAction(action: MainPresenter.() -> Unit) \n           = PresenterActionAssertion(action) \n\n   private class PresenterActionAssertion\n\n   (val actionOnPresenter: MainPresenter.() -> Unit) { \n\n       fun thereIsSameListDisplayed() { \n           // Given \n           var displayedList: List<MarvelCharacter>? = null \n\n           val view = BaseMainView( \n                   onShow = { items -> displayedList = items }, \n                   onShowError = { fail() } \n           ) \n           val marvelRepository = BaseMarvelRepository( \n                 onGetCharacters = \n\n           { Single.just(Example.exampleCharacterList) } \n           ) \n\n           val mainPresenter = MainPresenter(view, marvelRepository) \n\n           // When \n           mainPresenter.actionOnPresenter() \n\n           // Then \n           assertEquals(Example.exampleCharacterList, displayedList) \n       } \n   } \n} \n```", "```kt\npackage com.sample.marvelgallery.presenter \n\nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.view.main.MainView \n\nclass MainPresenter(val view: MainView, val repository: MarvelRepository) { \n\n   fun onViewCreated() { \n       loadCharacters() \n   } \n\n   fun onRefresh() { \n       loadCharacters() \n   } \n\n   private fun loadCharacters() { \n       repository.getAllCharacters() \n               .subscribe({ items -> \n                   view.show(items) \n               }) \n   } \n} \n```", "```kt\nrepository.getAllCharacters() \n       .subscribeOn(Schedulers.io()) // 1 \n       .observeOn(AndroidSchedulers.mainThread()) // 2 \n       .subscribe({ items -> view.show(items) }) \n```", "```kt\n// RxExt.kt \npackage com.sample.marvelgallery.data \n\nimport io.reactivex.Single \nimport io.reactivex.android.schedulers.AndroidSchedulers \nimport io.reactivex.schedulers.Schedulers \n\nfun <T> Single<T>.applySchedulers(): Single<T> = this \n       .subscribeOn(Schedulers.io()) \n       .observeOn(AndroidSchedulers.mainThread()) \n\nAnd use it in MainPresenter: \n\nrepository.getAllCharacters() \n       .applySchedulers() \n       .subscribe({ items -> view.show(items) }) \n```", "```kt\npackage com.sample.marvelgallery \n\nimport com.sample.marvelgallery.helpers.BaseMainView \nimport com.sample.marvelgallery.helpers.BaseMarvelRepository \nimport com.sample.marvelgallery.helpers.Example \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport io.reactivex.Single \nimport io.reactivex.android.plugins.RxAndroidPlugins \nimport io.reactivex.plugins.RxJavaPlugins \nimport io.reactivex.schedulers.Schedulers \nimport org.junit.Assert.assertEquals \nimport org.junit.Assert.fail \nimport org.junit.Before \nimport org.junit.Test \n\n@Suppress(\"IllegalIdentifier\") \n\nclass MainPresenterTest { \n\n   @Before \n   fun setUp() { \n       RxAndroidPlugins.setInitMainThreadSchedulerHandler { \n\n           Schedulers.trampoline() } \n       RxJavaPlugins.setIoSchedulerHandler { Schedulers.trampoline() } \n       RxJavaPlugins.setComputationSchedulerHandler { \n\n           Schedulers.trampoline() } \n       RxJavaPlugins.setNewThreadSchedulerHandler { \n\n           Schedulers.trampoline() } \n   } \n\n   @Test \n   fun `After view was created, list of characters is loaded and \n\n        displayed`() { \n       assertOnAction { onViewCreated() }.thereIsSameListDisplayed() \n   } \n\n   @Test \n   fun `New list is shown after view was refreshed`() { \n       assertOnAction { onRefresh() }.thereIsSameListDisplayed() \n   } \n```", "```kt\nprivate var subscriptions = CompositeDisposable() \n\nfun onViewDestroyed() { \n   subscriptions.dispose() \n} \n```", "```kt\npackage com.sample.marvelgallery.presenter \n\ninterface Presenter { \n   fun onViewDestroyed() \n} \n```", "```kt\npackage com.sample.marvelgallery.presenter \n\nimport io.reactivex.disposables.CompositeDisposable \n\nabstract class BasePresenter : Presenter { \n\n   protected var subscriptions = CompositeDisposable() \n\n   override fun onViewDestroyed() { \n       subscriptions.dispose() \n   } \n} \n```", "```kt\npackage com.sample.marvelgallery.view.common \n\nimport android.support.v7.app.AppCompatActivity \nimport com.sample.marvelgallery.presenter.Presenter \n\nabstract class BaseActivityWithPresenter : AppCompatActivity() { \n\n   abstract val presenter: Presenter \n\n   override fun onDestroy() { \n       super.onDestroy() \n       presenter.onViewDestroyed() \n   } \n} \n```", "```kt\n// RxExt.ext \npackage com.sample.marvelgallery.data \n\nimport io.reactivex.Single \nimport io.reactivex.android.schedulers.AndroidSchedulers \nimport io.reactivex.disposables.CompositeDisposable \nimport io.reactivex.disposables.Disposable \nimport io.reactivex.schedulers.Schedulers \n\nfun <T> Single<T>.applySchedulers(): Single<T> = this \n       .subscribeOn(Schedulers.io()) \n       .observeOn(AndroidSchedulers.mainThread()) \n\noperator fun CompositeDisposable.plusAssign(disposable: Disposable) { \n   add(disposable) \n} \n```", "```kt\npackage com.sample.marvelgallery.presenter \n\nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.data.applySchedulers \nimport com.sample.marvelgallery.data.plusAssign \nimport com.sample.marvelgallery.view.main.MainView \n\nclass MainPresenter( \n       val view: MainView, \n       val repository: MarvelRepository \n) : BasePresenter() { \n\n   fun onViewCreated() { \n       loadCharacters() \n   } \n\n   fun onRefresh() { \n       loadCharacters() \n   } \n\n   private fun loadCharacters() { \n       subscriptions += repository.getAllCharacters() \n               .applySchedulers() \n               .subscribe({ items -> \n                   view.show(items) \n               }) \n   } \n} \n```", "```kt\n@Test \nfun `New list is shown after view was refreshed`() { \n   assertOnAction { onRefresh() }.thereIsSameListDisplayed() \n} \n\n@Test \nfun `When API returns error, it is displayed on view`() { \n   // Given \n   val someError = Error() \n   var errorDisplayed: Throwable? = null \n   val view = BaseMainView( \n           onShow = { _ -> fail() }, \n           onShowError = { errorDisplayed = it } \n   ) \n   val marvelRepository = BaseMarvelRepository \n\n   { Single.error(someError) } \n   val mainPresenter = MainPresenter(view, marvelRepository) \n   // When \n   mainPresenter.onViewCreated() \n   // Then \n   assertEquals(someError, errorDisplayed) \n} \n\nprivate fun assertOnAction(action: MainPresenter.() -> Unit) \n       = PresenterActionAssertion(action) \n```", "```kt\nsubscriptions += repository.getAllCharacters() \n       .applySchedulers() \n       .subscribe({ items -> // onNext \n           view.show(items) \n       }, { // onError \n           view.showError(it) \n       }) \n```", "```kt\n// Ext.kt\n\nfun <T> Single<T>.applySchedulers(): Single<T> = this\n\n       .subscribeOn(Schedulers.io())\n\n       .observeOn(AndroidSchedulers.mainThread())\n\nfun <T> Single<T>.subscribeBy(\n\n       onError: ((Throwable) -> Unit)? = null,\n\n       onSuccess: (T) -> Unit\n\n): Disposable = subscribe(onSuccess, { onError?.invoke(it) })\n```", "```kt\nsubscriptions += repository.getAllCharacters()\n\n       .applySchedulers()\n\n       .subscribeBy(\n\n               onSuccess = view::show,\n\n               onError = view::showError\n\n      )\n```", "```kt\nsubscriptions += repository.getAllCharacters()\n\n       .applySchedulers()\n\n       .doOnSubscribe { view.refresh = true },}\n\n               onSuccess = view::show,\n\n       .doFinally { view.refresh = false }\n\n       .subscribeBy(\n\n                     onSuccess = view::show,\n\n                     onError = view::showError,\n\n                onFinish = { view.refresh = false }\n\n       )\n```", "```kt\npackage com.sample.marvelgallery \n\nimport com.sample.marvelgallery.helpers.BaseMainView \nimport com.sample.marvelgallery.helpers.BaseMarvelRepository \nimport com.sample.marvelgallery.helpers.Example \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport io.reactivex.Single \nimport io.reactivex.android.plugins.RxAndroidPlugins \nimport io.reactivex.plugins.RxJavaPlugins \nimport io.reactivex.schedulers.Schedulers \nimport org.junit.Assert.* \nimport org.junit.Before \nimport org.junit.Test \n\n@Suppress(\"IllegalIdentifier\") \n\nclass MainPresenterTest { \n\n   @Test \n   fun `When presenter is waiting for response, refresh is displayed`()  \n\n   { \n       // Given \n       val view = BaseMainView(refresh = false) \n       val marvelRepository = BaseMarvelRepository( \n               onGetCharacters = { \n                   Single.fromCallable { \n                       // Then \n                       assertTrue(view.refresh) // 1 \n                       Example.exampleCharacterList \n                   } \n               } \n       ) \n       val mainPresenter = MainPresenter(view, marvelRepository) \n       view.onShow = { _ -> \n           // Then \n           assertTrue(view.refresh) // 1 \n       } \n       // When \n       mainPresenter.onViewCreated() \n       // Then \n       assertFalse(view.refresh) // 1 \n   } \n } \n```", "```kt\nsubscriptions += repository.getAllCharacters()\n\n       .applySchedulers()\n\n       .doOnSubscribe { view.refresh = true }\n\n       .doFinally { view.refresh = false }\n\n       .subscribeBy(\n\n                     onSuccess = view::show,\n\n                     onError = view::showError\n\n        )\n```", "```kt\npackage com.sample.marvelgallery.view.main \n\nimport android.os.Bundle \nimport android.support.v7.widget.GridLayoutManager \nimport android.view.Window \nimport com.sample.marvelgallery.R \nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport com.sample.marvelgallery.view.common.BaseActivityWithPresenter \nimport com.sample.marvelgallery.view.common.bindToSwipeRefresh \nimport com.sample.marvelgallery.view.common.toast \nimport kotlinx.android.synthetic.main.activity_main.* \n\nclass MainActivity : BaseActivityWithPresenter(), MainView { // 1 \n\n   override var refresh by bindToSwipeRefresh(R.id.swipeRefreshView) \n\n   // 2 \n   override val presenter by lazy \n\n   { MainPresenter(this, MarvelRepository.get()) } // 3 \n\n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       requestWindowFeature(Window.FEATURE_NO_TITLE) \n       setContentView(R.layout.activity_main) \n       recyclerView.layoutManager = GridLayoutManager(this, 2) \n       swipeRefreshView.setOnRefreshListener \n\n       { presenter.onRefresh() } // 4 \n       presenter.onViewCreated() // 4 \n   } \n\n   override fun show(items: List<MarvelCharacter>) { \n       val categoryItemAdapters = items.map(::CharacterItemAdapter) \n       recyclerView.adapter = MainListAdapter(categoryItemAdapters) \n   } \n\n   override fun showError(error: Throwable) { \n       toast(\"Error: ${error.message}\") // 2 \n       error.printStackTrace() \n   } \n} \n```", "```kt\n// ViewExt.kt \npackage com.sample.marvelgallery.view.common \n\nimport android.app.Activity \nimport android.content.Context \nimport android.support.annotation.IdRes \nimport android.support.v4.widget.SwipeRefreshLayout \nimport android.support.v7.widget.RecyclerView \nimport android.view.View \nimport android.widget.ImageView \nimport android.widget.Toast \nimport com.bumptech.glide.Glide \nimport kotlin.properties.ReadWriteProperty \nimport kotlin.reflect.KProperty \n\nfun <T : View> RecyclerView.ViewHolder.bindView(viewId: Int) \n       = lazy { itemView.findViewById<T>(viewId) } \n\nfun ImageView.loadImage(photoUrl: String) { \n   Glide.with(context) \n           .load(photoUrl) \n           .into(this) \n} \n\nfun Context.toast(text: String, length: Int = Toast.LENGTH_LONG) { \n   Toast.makeText(this, text, length).show() \n} \n\nfun Activity.bindToSwipeRefresh(@IdRes swipeRefreshLayoutId: Int): ReadWriteProperty<Any?, Boolean> \n       = SwipeRefreshBinding(lazy { findViewById<SwipeRefreshLayout>(swipeRefreshLayoutId) }) \n\nprivate class SwipeRefreshBinding(lazyViewProvider: Lazy<SwipeRefreshLayout>) : ReadWriteProperty<Any?, Boolean> { \n\n   val view by lazyViewProvider \n\n   override fun getValue(thisRef: Any?, \n\n   property: KProperty<*>): Boolean { \n       return view.isRefreshing \n   } \n\n   override fun setValue(thisRef: Any?, \n\n   property: KProperty<*>, value: Boolean) { \n       view.isRefreshing = value \n   } \n} \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<RelativeLayout  \n\n   android:id=\"@+id/charactersView\" \n   android:layout_width=\"match_parent\" \n   android:layout_height=\"match_parent\" \n   android:background=\"@android:color/white\" \n   android:fitsSystemWindows=\"true\"> \n\n<!-- Dummy item to prevent EditText from receiving \n\n     focus on initial load --> \n   <LinearLayout \n       android:layout_width=\"0px\" \n       android:layout_height=\"0px\" \n       android:focusable=\"true\" \n       android:focusableInTouchMode=\"true\" \n       tools:ignore=\"UselessLeaf\" /> \n\n  <android.support.design.widget.TextInputLayout \n     android:id=\"@+id/searchViewLayout\" \n     android:layout_width=\"match_parent\" \n     android:layout_height=\"wrap_content\" \n     android:layout_margin=\"@dimen/element_padding\"> \n\n     <EditText \n         android:id=\"@+id/searchView\" \n         android:layout_width=\"match_parent\" \n         android:layout_height=\"wrap_content\" \n         android:layout_centerHorizontal=\"true\" \n         android:hint=\"@string/search_hint\" /> \n\n  </android.support.design.widget.TextInputLayout> \n\n   <android.support.v4.widget.SwipeRefreshLayout  \n       android:id=\"@+id/swipeRefreshView\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\" \n       android:layout_below=\"@+id/searchViewLayout\" \n       app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"> \n\n       <android.support.v7.widget.RecyclerView \n           android:id=\"@+id/recyclerView\" \n           android:layout_width=\"match_parent\" \n           android:layout_height=\"match_parent\" \n           android:scrollbars=\"vertical\" /> \n\n   </android.support.v4.widget.SwipeRefreshLayout> \n\n   <TextView \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"wrap_content\" \n       android:layout_alignParentBottom=\"true\" \n       android:background=\"@android:color/white\" \n       android:gravity=\"center\" \n       android:text=\"@string/marvel_copyright_notice\" /> \n</RelativeLayout> \n```", "```kt\nimplementation \"com.android.support:appcompat-v7:$android_support_version\" \nimplementation \"com.android.support:design:$android_support_version\" \nimplementation \"com.android.support:recyclerview-v7:$android_support_version\" \n```", "```kt\n<resources> \n   <string name=\"app_name\">MarvelGallery</string> \n   <string name=\"search_hint\">Search for character</string> \n   <string name=\"marvel_copyright_notice\">\n\n      Data provided by Marvel. \u00a9 2017 MARVEL\n\n   </string> \n</resources> \n```", "```kt\n<activity \n   android:name=\"com.sample.marvelgallery.view.main.MainActivity\" \n   android:windowSoftInputMode=\"adjustResize\"> \n   <intent-filter> \n       <action android:name=\"android.intent.action.MAIN\" /> \n       <category android:name=\"android.intent.category.LAUNCHER\" /> \n   </intent-filter> \n</activity> \n```", "```kt\nfun onRefresh() { \n   loadCharacters() \n} \n\nfun onSearchChanged(text: String) { \n   // TODO \n}\n\nprivate fun loadCharacters() {\n\n   subscriptions += repository.getAllCharacters()\n\n           .applySchedulers()\n\n           .doOnSubscribe { view.refresh = true }\n\n           .doFinally { view.refresh = false }\n\n           .subscribeBy(\n\n               onSuccess = view::show,\n\n               onError = view::showError\n\n         )\n\n   }\n\n}\n```", "```kt\ninterface MarvelRepository { \n\n   fun getAllCharacters(searchQuery: String?): \n\n   Single<List<MarvelCharacter>> \n\n   companion object : Provider<MarvelRepository>() { \n       override fun creator() = MarvelRepositoryImpl() \n   } \n} \n```", "```kt\nclass MarvelRepositoryImpl : MarvelRepository { \n\n   val api = retrofit.create(MarvelApi::class.java) \n\n   override fun getAllCharacters(searchQuery: String?): \n\n   Single<List<MarvelCharacter>> = api.getCharacters( \n           offset = 0, \n           searchQuery = searchQuery, \n           limit = elementsOnListLimit \n   ).map { it.data?.results.orEmpty().map(::MarvelCharacter) ?: \n\n    emptyList() } \n\n   companion object { \n       const val elementsOnListLimit = 50 \n   } \n} \n```", "```kt\ninterface MarvelApi { \n\n   @GET(\"characters\") \n   fun getCharacters( \n           @Query(\"offset\") offset: Int?, \n           @Query(\"nameStartsWith\") searchQuery: String?, \n           @Query(\"limit\") limit: Int? \n   ): Single<DataWrapper<List<CharacterMarvelDto>>> \n} \n```", "```kt\nprivate fun loadCharacters() {\n\n   subscriptions += repository.getAllCharacters(null)\n\n           .applySchedulers()\n\n           .doOnSubscribe { view.refresh = true }\n\n           .doFinally { view.refresh = false }\n\n           .subscribeBy(\n\n                       onSuccess = view::show,\n\n                       onError = view::showError\n\n         )\n\n   }\n\n}\n```", "```kt\npackage com.sample.marvelgallery.helpers \n\nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport io.reactivex.Single \n\nclass BaseMarvelRepository( \n       val onGetCharacters: (String?) -> Single<List<MarvelCharacter>> \n) : MarvelRepository { \n\n   override fun getAllCharacters(searchQuery: String?) \n           = onGetCharacters(searchQuery) \n} \n```", "```kt\n@file:Suppress(\"IllegalIdentifier\") \n\npackage com.sample.marvelgallery \n\nimport com.sample.marvelgallery.helpers.BaseMainView \nimport com.sample.marvelgallery.helpers.BaseMarvelRepository \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport io.reactivex.Single \nimport org.junit.Assert.* \nimport org.junit.Test \n\nclass MainPresenterSearchTest { \n\n   @Test \n   fun `When view is created, then search query is null`() { \n       assertOnAction { onViewCreated() } searchQueryIsEqualTo null \n   } \n\n   @Test \n   fun `When text is changed, then we are searching for new query`() { \n       for (text in listOf(\"KKO\", \"HJ HJ\", \"And so what?\")) \n           assertOnAction { onSearchChanged(text) } \n\n           searchQueryIsEqualTo text \n   } \n\n   private fun assertOnAction(action: MainPresenter.() -> Unit)  \n         = PresenterActionAssertion(action) \n\n   private class PresenterActionAssertion(val actionOnPresenter: \n\n       MainPresenter.() -> Unit) { \n\n       infix fun searchQueryIsEqualTo(expectedQuery: String?) { \n           var checkApplied = false \n           val view = BaseMainView(onShowError = { fail() }) \n           val marvelRepository = BaseMarvelRepository { searchQuery -> \n               assertEquals(expectedQuery, searchQuery) \n               checkApplied = true \n               Single.never() \n           } \n           val mainPresenter = MainPresenter(view, marvelRepository) \n           mainPresenter.actionOnPresenter() \n           assertTrue(checkApplied) \n       } \n   } \n} \n```", "```kt\nfun onSearchChanged(text: String) { \n   loadCharacters(text) \n} \n\nprivate fun loadCharacters(searchQuery: String? = null) {\n\n   subscriptions += repository.getAllCharacters(searchQuery)\n\n           .applySchedulers()\n\n           .doOnSubscribe { view.refresh = true }\n\n           .doFinally { view.refresh = false }\n\n           .subscribeBy(\n\n                       onSuccess = view::show,\n\n                       onError = view::showError\n\n         )\n\n   }\n\n}\n```", "```kt\n@Test \nfun `When text is changed, then we are searching for new query`() { \n   for (text in listOf(\"KKO\", \"HJ HJ\", \"And so what?\")) \n       assertOnAction { onSearchChanged(text) } \n\n       searchQueryIsEqualTo text \n} \n\n@Test \nfun `For blank text, there is request with null query`() { \n   for (emptyText in listOf(\"\", \"   \", \"       \")) \n       assertOnAction { onSearchChanged(emptyText) } \n\n       searchQueryIsEqualTo null \n} \n\nprivate fun assertOnAction(action: MainPresenter.() -> Unit)  \n      = PresenterActionAssertion(action) \n\nWe can implement a security mechanism in the loadCharacters method: \n\nprivate fun loadCharacters(searchQuery: String? = null) { \n   val qualifiedSearchQuery = if (searchQuery.isNullOrBlank()) null \n\n                              else searchQuery \n   subscriptions += repository \n           .getAllCharacters(qualifiedSearchQuery) \n           .applySchedulers() \n           .smartSubscribe( \n                   onStart = { view.refresh = true }, \n                   onSuccess = view::show, \n                   onError = view::showError, \n                   onFinish = { view.refresh = false } \n           ) \n} \n```", "```kt\n// TextChangedListener.kt \npackage com.sample.marvelgallery.view.common \n\nimport android.text.Editable \nimport android.text.TextWatcher \nimport android.widget.TextView \n\nfun TextView.addOnTextChangedListener(config: TextWatcherConfiguration.() -> Unit) { \n   addTextChangedListener(TextWatcherConfiguration().apply { config() }\n   addTextChangedListener(textWatcher) \n} \n\nclass TextWatcherConfiguration : TextWatcher { \n\n   private var beforeTextChangedCallback: \n\n   (BeforeTextChangedFunction)? = null \n   private var onTextChangedCallback: \n\n   (OnTextChangedFunction)? = null \n   private var afterTextChangedCallback: \n\n   (AfterTextChangedFunction)? = null \n\n   fun beforeTextChanged(callback: BeforeTextChangedFunction) { \n       beforeTextChangedCallback = callback \n   } \n\n   fun onTextChanged(callback: OnTextChangedFunction) { \n       onTextChangedCallback = callback \n   } \n\n   fun afterTextChanged(callback: AfterTextChangedFunction) { \n       afterTextChangedCallback = callback \n   } \n\n   override fun beforeTextChanged(s: CharSequence, \n\n   start: Int, count: Int, after: Int) { \n       beforeTextChangedCallback?.invoke(s.toString(), \n\n       start, count, after) \n   } \n\n   override fun onTextChanged(s: CharSequence, start: Int, \n\n   before: Int, count: Int) { \n       onTextChangedCallback?.invoke(s.toString(), \n\n       start, before, count) \n   } \n\n   override fun afterTextChanged(s: Editable) { \n       afterTextChangedCallback?.invoke(s) \n   } \n} \n\nprivate typealias BeforeTextChangedFunction = \n\n  (text: String, start: Int, count: Int, after: Int) -> Unit \nprivate typealias OnTextChangedFunction = \n\n  (text: String, start: Int, before: Int, count: Int) -> Unit \nprivate typealias AfterTextChangedFunction = \n\n  (s: Editable) -> Unit \n```", "```kt\npackage com.sample.marvelgallery.view.main \n\nimport android.os.Bundle \nimport android.support.v7.widget.GridLayoutManager \nimport android.view.Window \nimport com.sample.marvelgallery.R \nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport com.sample.marvelgallery.view.common.BaseActivityWithPresenter \nimport com.sample.marvelgallery.view.common.addOnTextChangedListener \nimport com.sample.marvelgallery.view.common.bindToSwipeRefresh \nimport com.sample.marvelgallery.view.common.toast \nimport kotlinx.android.synthetic.main.activity_main.* \n\nclass MainActivity : BaseActivityWithPresenter(), MainView { \n\n   override var refresh by bindToSwipeRefresh(R.id.swipeRefreshView) \n   override val presenter by lazy \n\n     { MainPresenter(this, MarvelRepository.get()) } \n\n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       requestWindowFeature(Window.FEATURE_NO_TITLE) \n       setContentView(R.layout.activity_main) \n       recyclerView.layoutManager = GridLayoutManager(this, 2) \n       swipeRefreshView.setOnRefreshListener { presenter.onRefresh() } \n       searchView.addOnTextChangedListener { \n           onTextChanged { text, _, _, _ -> \n               presenter.onSearchChanged(text) \n           } \n       } \n       presenter.onViewCreated() \n   } \n\n   override fun show(items: List<MarvelCharacter>) { \n       val categoryItemAdapters = items.map(::CharacterItemAdapter) \n       recyclerView.adapter = MainListAdapter(categoryItemAdapters) \n   } \n\n   override fun showError(error: Throwable) { \n       toast(\"Error: ${error.message}\") \n       error.printStackTrace() \n   } \n} \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<android.support.design.widget.CoordinatorLayout  \n\n   android:id=\"@+id/character_detail_layout\" \n   android:layout_width=\"match_parent\" \n   android:layout_height=\"match_parent\" \n   android:background=\"@android:color/white\"> \n\n   <android.support.design.widget.AppBarLayout \n       android:id=\"@+id/appBarLayout\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"wrap_content\" \n       android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"> \n\n       <android.support.design.widget.CollapsingToolbarLayout \n           android:id=\"@+id/toolbarLayout\" \n           android:layout_width=\"match_parent\" \n           android:layout_height=\"match_parent\" \n           app:contentScrim=\"?attr/colorPrimary\" \n           app:expandedTitleTextAppearance=\"@style/ItemTitleName\" \n           app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"> \n\n           <android.support.v7.widget.AppCompatImageView \n               android:id=\"@+id/headerView\" \n               android:layout_width=\"match_parent\" \n               android:layout_height=\"@dimen/character_header_height\" \n               android:background=\"@color/colorPrimaryDark\" \n               app:layout_collapseMode=\"parallax\" /> \n\n           <android.support.v7.widget.Toolbar \n               android:id=\"@+id/toolbar\" \n               android:layout_width=\"match_parent\" \n               android:layout_height=\"?attr/actionBarSize\" \n               android:background=\"@android:color/transparent\" \n               app:layout_collapseMode=\"pin\" \n               app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /> \n\n       </android.support.design.widget.CollapsingToolbarLayout> \n   </android.support.design.widget.AppBarLayout> \n\n   <android.support.v4.widget.NestedScrollView \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\" \n       android:overScrollMode=\"never\" \n       app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"> \n\n       <LinearLayout \n           android:id=\"@+id/details_content_frame\" \n           android:layout_width=\"match_parent\" \n           android:layout_height=\"match_parent\" \n           android:focusableInTouchMode=\"true\" \n           android:orientation=\"vertical\"> \n\n           <TextView \n               android:id=\"@+id/descriptionView\" \n               android:layout_width=\"match_parent\" \n               android:layout_height=\"wrap_content\" \n               android:gravity=\"center\" \n               android:padding=\"@dimen/character_description_padding\" \n               android:textSize=\"@dimen/standard_text_size\" \n               tools:text=\"This is some long text that will be visible as an character description.\" /> \n\n           <TextView \n               android:id=\"@+id/occurrencesView\" \n               android:layout_width=\"match_parent\" \n               android:layout_height=\"wrap_content\" \n               android:padding=\"@dimen/character_description_padding\" \n               android:textSize=\"@dimen/standard_text_size\" \n               tools:text=\"He was in following comics:\\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \\n* KOKOKO \" /> \n       </LinearLayout> \n\n   </android.support.v4.widget.NestedScrollView> \n\n   <TextView \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"wrap_content\" \n       android:layout_gravity=\"bottom\" \n       android:background=\"@android:color/white\" \n       android:gravity=\"bottom|center\" \n       android:text=\"@string/marvel_copyright_notice\" /> \n\n   <ProgressBar \n       android:id=\"@+id/progressView\" \n       style=\"?android:attr/progressBarStyleLarge\" \n       android:layout_width=\"wrap_content\" \n       android:layout_height=\"wrap_content\" \n       android:layout_gravity=\"center\" \n       android:visibility=\"gone\" /> \n\n</android.support.design.widget.CoordinatorLayout> \n```", "```kt\n<resources> \n\n   <!-- Base application theme. --> \n   <style name=\"AppTheme\" \n\n          parent=\"Theme.AppCompat.Light.DarkActionBar\"> \n       <!-- Customize your theme here. --> \n       <item name=\"colorPrimary\">@color/colorPrimary</item> \n       <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item> \n       <item name=\"colorAccent\">@color/colorAccent</item> \n   </style> \n   <style name=\"AppFullScreenTheme\" \n\n          parent=\"Theme.AppCompat.Light.NoActionBar\"> \n       <item name=\"android:windowNoTitle\">true</item> \n       <item name=\"android:windowActionBar\">false</item> \n       <item name=\"android:windowFullscreen\">true</item> \n       <item name=\"android:windowContentOverlay\">@null</item> \n   </style> \n\n   <style name=\"ItemTitleName\" \n\n          parent=\"TextAppearance.AppCompat.Headline\"> \n       <item name=\"android:textColor\">@android:color/white</item> \n       <item name=\"android:shadowColor\">@color/colorPrimaryDark</item> \n       <item name=\"android:shadowRadius\">3.0</item> \n   </style> \n\n   <style name=\"ItemDetailTitle\" \n\n          parent=\"@style/TextAppearance.AppCompat.Small\"> \n       <item name=\"android:textColor\">@color/colorAccent</item> \n   </style> \n\n</resources> \n```", "```kt\n<activity android:name=\".view.CharacterProfileActivity\" \n   android:theme=\"@style/AppFullScreenTheme\" /> \n```", "```kt\npackage com.sample.marvelgallery.view.main \n\nimport android.support.v7.widget.RecyclerView \nimport android.view.View \nimport android.widget.ImageView \nimport android.widget.TextView \nimport com.sample.marvelgallery.R \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.view.common.ItemAdapter \nimport com.sample.marvelgallery.view.common.bindView \nimport com.sample.marvelgallery.view.common.loadImage \n\nclass CharacterItemAdapter( \n       val character: MarvelCharacter, \n       val clicked: (MarvelCharacter) -> Unit \n) : ItemAdapter<CharacterItemAdapter.ViewHolder>(R.layout.item_character) { \n\n   override fun onCreateViewHolder(itemView: View) = \n\n   ViewHolder(itemView) \n\n   override fun ViewHolder.onBindViewHolder() { \n       textView.text = character.name \n       imageView.loadImage(character.imageUrl) \n       itemView.setOnClickListener { clicked(character) } \n   } \n\n   class ViewHolder(itemView: View) : \n\n   RecyclerView.ViewHolder(itemView) { \n       val textView by bindView<TextView>(R.id.textView) \n       val imageView by bindView<ImageView>(R.id.imageView) \n   } \n} \n```", "```kt\npackage com.sample.marvelgallery.view.main \n\nimport android.os.Bundle \nimport android.support.v7.widget.GridLayoutManager \nimport android.view.Window \nimport com.sample.marvelgallery.R \nimport com.sample.marvelgallery.data.MarvelRepository \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.presenter.MainPresenter \nimport com.sample.marvelgallery.view.character.CharacterProfileActivity \nimport com.sample.marvelgallery.view.common.BaseActivityWithPresenter \nimport com.sample.marvelgallery.view.common.addOnTextChangedListener \nimport com.sample.marvelgallery.view.common.bindToSwipeRefresh \nimport com.sample.marvelgallery.view.common.toast \nimport kotlinx.android.synthetic.main.activity_main.* \n\nclass MainActivity : BaseActivityWithPresenter(), MainView { \n\n   override var refresh by bindToSwipeRefresh(R.id.swipeRefreshView) \n   override val presenter by lazy\n\n   { MainPresenter(this, MarvelRepository.get()) } \n\n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       requestWindowFeature(Window.FEATURE_NO_TITLE) \n       setContentView(R.layout.activity_main) \n       recyclerView.layoutManager = GridLayoutManager(this, 2) \n       swipeRefreshView.setOnRefreshListener { presenter.onRefresh() } \n       searchView.addOnTextChangedListener { \n           onTextChanged { text, _, _, _ -> \n               presenter.onSearchChanged(text) \n           } \n       } \n       presenter.onViewCreated() \n   } \n\n   override fun show(items: List<MarvelCharacter>) { \n       val categoryItemAdapters = \n\n       items.map(this::createCategoryItemAdapter) \n       recyclerView.adapter = MainListAdapter(categoryItemAdapters) \n   } \n\n   override fun showError(error: Throwable) { \n       toast(\"Error: ${error.message}\") \n       error.printStackTrace() \n   } \n\n   private fun createCategoryItemAdapter(character: MarvelCharacter) \n           = CharacterItemAdapter(character, \n\n             { showHeroProfile(character) }) \n\n   private fun showHeroProfile(character: MarvelCharacter) { \n       CharacterProfileActivity.start(this, character) \n   } \n} \n```", "```kt\nandroidExtensions {\n\n   experimental = true\n\n}\n```", "```kt\npackage com.sample.marvelgallery.model \n\nimport android.annotation.SuppressLint \nimport android.os.Parcelable \nimport com.sample.marvelgallery.data.network.dto.CharacterMarvelDto \n\nimport kotlinx.android.parcel.Parcelize\n\n@SuppressLint(\"ParcelCreator\")\n\n@Parcelize\n\n   constructor(dto: CharacterMarvelDto) : this( \n           name = dto.name, \n           imageUrl = dto.imageUrl \n   )\n} \n```", "```kt\npackage com.sample.marvelgallery.view.character \n\nimport android.content.Context \nimport android.support.v7.app.AppCompatActivity \nimport android.os.Bundle \nimport android.view.MenuItem \nimport com.sample.marvelgallery.R \nimport com.sample.marvelgallery.model.MarvelCharacter \nimport com.sample.marvelgallery.view.common.extra \nimport com.sample.marvelgallery.view.common.getIntent \nimport com.sample.marvelgallery.view.common.loadImage \nimport kotlinx.android.synthetic.main.activity_character_profile.* \n\nclass CharacterProfileActivity : AppCompatActivity() { \n\n   val character: MarvelCharacter by extra(CHARACTER_ARG) // 1 \n\n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       setContentView(R.layout.activity_character_profile) \n       setUpToolbar() \n       supportActionBar?.title = character.name \n       headerView.loadImage(character.imageUrl, centerCropped = true) // 1 \n   } \n\n   override fun onOptionsItemSelected(item: MenuItem): Boolean = when { \n       item.itemId == android.R.id.home -> onBackPressed().let { true } \n       else -> super.onOptionsItemSelected(item) \n   } \n\n   private fun setUpToolbar() { \n       setSupportActionBar(toolbar) \n       supportActionBar?.setDisplayHomeAsUpEnabled(true) \n   } \n\n   companion object { \n\n       private const val CHARACTER_ARG = \"com.sample.marvelgallery.view.character.CharacterProfileActivity.CharacterArgKey\" \n\n       fun start(context: Context, character: MarvelCharacter) { \n           val intent = context \n                   .getIntent<CharacterProfileActivity>() // 1 \n                   .apply { putExtra(CHARACTER_ARG, character) } \n           context.startActivity(intent) \n       } \n   } \n} \n```", "```kt\n// ViewExt.kt \npackage com.sample.marvelgallery.view.common \n\nimport android.app.Activity \nimport android.content.Context \nimport android.content.Intent \nimport android.os.Parcelable \nimport android.support.annotation.IdRes \nimport android.support.v4.widget.SwipeRefreshLayout \nimport android.widget.ImageView \nimport android.widget.Toast \nimport com.bumptech.glide.Glide \nimport kotlin.properties.ReadWriteProperty \nimport kotlin.reflect.KProperty \nimport android.support.v7.widget.RecyclerView \nimport android.view.View \n\nfun <T : View> RecyclerView.ViewHolder.bindView(viewId: Int)  \n      = lazy { itemView.findViewById<T>(viewId) } \n\nfun ImageView.loadImage(photoUrl: String, centerCropped: Boolean = false) { \n   Glide.with(context) \n           .load(photoUrl) \n           .apply { if (centerCropped) centerCrop() } \n           .into(this) \n} \n\nfun <T : Parcelable> Activity.extra(key: String, default: T? = null): Lazy<T>  \n      = lazy { intent?.extras?.getParcelable<T>(key) ?: default ?: throw Error(\"No value $key in extras\") } \n\ninline fun <reified T : Activity> Context.getIntent() = Intent(this, T::class.java) \n\n// ...\n```", "```kt\nclass CharacterProfileActivity : AppCompatActivity() { \n\n   @get:Arg val character: MarvelCharacter by argExtra() \n\n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       setContentView(R.layout.activity_character_profile) \n       setUpToolbar() \n       supportActionBar?.title = character.name \n       headerView.loadImage(character.imageUrl, centerCropped = true) // 1 \n   } \n\n   override fun onOptionsItemSelected(item: MenuItem): Boolean = when { \n       item.itemId == android.R.id.home -> onBackPressed().let { true } \n       else -> super.onOptionsItemSelected(item) \n   } \n\n   private fun setUpToolbar() { \n       setSupportActionBar(toolbar) \n       supportActionBar?.setDisplayHomeAsUpEnabled(true) \n   } \n} \n```", "```kt\nCharacterProfileActivityStarter.start(context, character) \nval intent = CharacterProfileActivityStarter.getIntent(context, character) \n```", "```kt\napply plugin: 'kotlin-kapt' \n```", "```kt\nimplementation 'com.github.marcinmoskala.activitystarter:activitystarter:1.00' \nimplementation 'com.github.marcinmoskala.activitystarter:activitystarter-kotlin:1.00' \nkapt 'com.github.marcinmoskala.activitystarter:activitystarter-compiler:1.00' \n```", "```kt\npackage com.sample.marvelgallery.data.network.dto \n\nclass ListWrapper<T> { \n   var items: List<T> = listOf() \n} \n```", "```kt\npackage com.sample.marvelgallery.data.network.dto \n\nclass ComicDto { \n   lateinit var name: String \n} \n```", "```kt\npackage com.sample.marvelgallery.data.network.dto \n\nclass CharacterMarvelDto { \n\n   lateinit var name: String \n   lateinit var description: String \n   lateinit var thumbnail: ImageDto \n   var comics: ListWrapper<ComicDto> = ListWrapper() \n   var series: ListWrapper<ComicDto> = ListWrapper() \n   var stories: ListWrapper<ComicDto> = ListWrapper() \n   var events: ListWrapper<ComicDto> = ListWrapper() \n\n   val imageUrl: String \n       get() = thumbnail.completeImagePath \n} \n```", "```kt\n@SuppressLint(\"ParcelCreator\")\n\n@Parcelize\n\nclass MarvelCharacter( \n       val name: String, \n       val imageUrl: String, \n       val description: String, \n       val comics: List<String>, \n       val series: List<String>, \n       val stories: List<String>, \n       val events: List<String> \n) : Parcelable { \n\n   constructor(dto: CharacterMarvelDto) : this( \n           name = dto.name, \n           imageUrl = dto.imageUrl, \n           description = dto.description, \n           comics = dto.comics.items.map { it.name }, \n           series = dto.series.items.map { it.name }, \n           stories = dto.stories.items.map { it.name }, \n           events = dto.events.items.map { it.name } \n   ) \n} \n```", "```kt\nclass CharacterProfileActivity : AppCompatActivity() { \n\n   val character: MarvelCharacter by extra(CHARACTER_ARG) \n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       setContentView(R.layout.activity_character_profile) \n       setUpToolbar() \n       supportActionBar?.title = character.name \n       descriptionView.text = character.description \n       occurrencesView.text = makeOccurrencesText() // 1 \n       headerView.loadImage(character.imageUrl, centerCropped = true) \n   } \n\n   override fun onOptionsItemSelected(item: MenuItem): Boolean = when { \n       item.itemId == android.R.id.home -> onBackPressed().let { true } \n       else -> super.onOptionsItemSelected(item) \n   } \n\n   private fun setUpToolbar() { \n       setSupportActionBar(toolbar) \n       supportActionBar?.setDisplayHomeAsUpEnabled(true) \n   } \n\n   private fun makeOccurrencesText(): String = \"\" // 1, 2 \n           .addList(R.string.occurrences_comics_list_introduction, character.comics) \n           .addList(R.string.occurrences_series_list_introduction, character.series) \n           .addList(R.string.occurrences_stories_list_introduction, character.stories) \n           .addList(R.string.occurrences_events_list_introduction, character.events) \n\n   private fun String.addList(introductionTextId: Int, list: List<String>): String { // 3 \n       if (list.isEmpty()) return this \n       val introductionText = getString(introductionTextId) \n       val listText = list.joinToString(transform = \n\n           { \" $bullet $it\" }, separator = \"\\n\") \n       return this + \"$introductionText\\n$listText\\n\\n\" \n   } \n\n   companion object { \n       private const val bullet = '\\u2022' // 4 \n       private const val CHARACTER_ARG = \"com.naxtlevelofandroiddevelopment.marvelgallery.presentation.heroprofile.CharacterArgKey\" \n\n       fun start(context: Context, character: MarvelCharacter) { \n           val intent = context \n                   .getIntent<CharacterProfileActivity>() \n                   .apply { putExtra(CHARACTER_ARG, character) } \n           context.startActivity(intent) \n       } \n   } \n}\n```", "```kt\n<resources> \n   <string name=\"app_name\">Marvel Gallery</string> \n   <string name=\"marvel_copyright_notice\">\n\n       Data provided by Marvel. \u00a9 2017 MARVEL</string> \n   <string name=\"search_hint\">Search for character</string> \n   <string name=\"occurrences_comics_list_introduction\">Comics:</string> \n   <string name=\"occurrences_series_list_introduction\">Series:</string> \n   <string name=\"occurrences_stories_list_introduction\">Stories:</string> \n   <string name=\"occurrences_events_list_introduction\">Events:</string> \n</resources> \n```"]