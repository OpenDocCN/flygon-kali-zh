- en: OpenStack Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack架构
- en: 'This chapter will start with an introduction to OpenStack. Then this chapter
    will explain the architecture of OpenStack and further explain each core project
    in OpenStack. Finally, the chapter will demonstrate DevStack installation and
    use it for doing some operations with OpenStack. This chapter will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将从介绍OpenStack开始。然后本章将解释OpenStack的架构，并进一步解释OpenStack中的每个核心项目。最后，本章将演示DevStack安装并使用它来执行一些OpenStack操作。本章将涵盖以下内容：
- en: Introduction to OpenStack
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack介绍
- en: OpenStack architecture
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack架构
- en: Introduction to KeyStone, the OpenStack identity service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: KeyStone介绍，OpenStack身份服务
- en: Introduction to Nova, the OpenStack compute service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nova介绍，OpenStack计算服务
- en: Introduction to Neutron, the OpenStack network service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neutron介绍，OpenStack网络服务
- en: Introduction to Cinder, the OpenStack block storage service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cinder介绍，OpenStack块存储服务
- en: Introduction to Glance, the OpenStack image service
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Glance介绍，OpenStack镜像服务
- en: Introduction to Swift, the OpenStack object service
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift介绍，OpenStack对象服务
- en: DevStack installation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevStack安装
- en: Introduction to OpenStack
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack介绍
- en: OpenStack is a free and open source software for creating private and public
    clouds. It provides interrelated sets of components to manage and access large
    pools of compute, networking and storage resources spanned across a datacenter.
    Users can manage it either using web-based user interfaces and command lines or
    REST APIs. OpenStack was open sourced in 2010 by Rackspace and NASA. Currently,
    it is managed by The OpenStack Foundation, a non-profit entity.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack是一个用于创建私有和公共云的免费开源软件。它提供一系列相关的组件来管理和访问跨数据中心的大型计算、网络和存储资源池。用户可以使用基于Web的用户界面和命令行或REST
    API来管理它。OpenStack于2010年由Rackspace和NASA开源。目前，它由非营利实体OpenStack Foundation管理。
- en: OpenStack architecture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack架构
- en: 'The following figure (from: [https://docs.openstack.org/arch-design/design.html](https://docs.openstack.org/arch-design/design.html))
    represents the logical architecture of OpenStack and how users can connect to
    various services. OpenStack has multiple components for different purposes such
    as Nova for managing compute resources, Glance for managing OS images, and so
    on. We will learn about each component in detail in the upcoming sections.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图（来自：[https://docs.openstack.org/arch-design/design.html](https://docs.openstack.org/arch-design/design.html)）代表了OpenStack的逻辑架构以及用户如何连接到各种服务。OpenStack有多个组件用于不同的目的，比如用于管理计算资源的Nova，用于管理操作系统镜像的Glance等等。我们将在接下来的章节中详细了解每个组件。
- en: 'In very simple terms, if a user requests to provision a VM using CLI or the
    APIs, the request is handled by Nova. Nova then talks to KeyStone to authenticate
    the request, Glance for the OS image, and Neutron for setting up the network resources.
    Then, after receiving responses from each component, it boots the VM and returns
    a response to the user:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，如果用户请求使用CLI或API来提供VM，请求将由Nova处理。Nova然后与KeyStone进行通信以验证请求，与Glance进行OS镜像通信，并与Neutron进行网络资源设置。然后，在从每个组件接收到响应后，启动VM并向用户返回响应：
- en: '![](../images/00013.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00013.jpeg)'
- en: Introduction to KeyStone, the OpenStack identity service
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KeyStone介绍，OpenStack身份服务
- en: 'KeyStone is an OpenStack identity service which provides the following capabilities:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: KeyStone是一个OpenStack身份服务，提供以下功能：
- en: '**Identity provider**: In OpenStack, identity is represented as a user in the
    form of a name and password. In simple setups, KeyStone stores the identity of
    a user in its database. But it is recommended you use third-party identity providers
    such as LDAP in production.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份提供者**：在OpenStack中，身份以用户名和密码的形式表示为用户。在简单的设置中，KeyStone将用户的身份存储在其数据库中。但建议在生产中使用LDAP等第三方身份提供者。'
- en: '**API client authentication**: Authentication is validating a user''s identity.
    KeyStone can do it by using many third-party backends such as LDAP and AD. Once
    authenticated, the user gets a token which he/she can use to access other OpenStack
    service APIs.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API客户端身份验证**：身份验证是验证用户身份的过程。KeyStone可以通过使用诸如LDAP和AD等许多第三方后端来进行身份验证。一旦经过身份验证，用户将获得一个令牌，可以用来访问其他OpenStack服务的API。'
- en: '**Multitenant authorization**: KeyStone provides the authorization to access
    a particular resource by adding a role to every user in every tenant. When a user
    access any OpenStack service, the service verifies the role of the user and whether
    he/she can access the resource.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多租户授权**：KeyStone通过为每个租户的每个用户添加角色来提供访问特定资源的授权。当用户访问任何OpenStack服务时，服务会验证用户的角色以及他/她是否可以访问资源。'
- en: '**Service discovery**: KeyStone manages a service catalog in which other services
    can register their endpoints. Whenever any other service wants to interact to
    any particular service, it can refer to the service catalog and can get the address
    of that service.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务发现**：KeyStone管理一个服务目录，其他服务可以在其中注册它们的端点。每当其他服务想要与任何特定服务进行交互时，它可以参考服务目录并获取该服务的地址。'
- en: 'KeyStone contains the following components:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: KeyStone包含以下组件：
- en: '**KeyStone****API**: KeyStone API is a WSGI application which handles all the
    incoming requests'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KeyStone API**：KeyStone API是一个WSGI应用程序，用于处理所有传入请求'
- en: '**Services**: KeyStone is comprised of many internal services exposed over
    an API endpoint. These services are consumed by a frontend API in a combined fashion'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：KeyStone由许多通过API端点公开的内部服务组成。这些服务以一种组合的方式被前端API所使用'
- en: '**Identity**: The identity service handles requests related to user credential
    validation and CRUD operations associated with users and group data. In production
    environments, third-party entities such as LDAP can be used as an identity service
    backend'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份**：身份服务处理与用户凭据验证和与用户和组数据相关的CRUD操作的请求。在生产环境中，可以使用诸如LDAP之类的第三方实体作为身份服务后端'
- en: '**Resource**: The resource service is responsible for managing data related
    to projects and domains'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：资源服务负责管理与项目和域相关的数据'
- en: '**Assignment**: The assignment service is responsible for roles and assigning
    roles to users'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分配**：分配服务负责角色和将角色分配给用户'
- en: '**Token**: The token service is responsible for managing and validating tokens'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**令牌**：令牌服务负责管理和验证令牌'
- en: '**Catalog**: The catalog service is responsible for managing service endpoints
    and providing discovery services'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目录**：目录服务负责管理服务端点并提供发现服务'
- en: '**Policy**: The policy service is responsible for providing rule-based authorization'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略**：策略服务负责提供基于规则的授权'
- en: 'The following figure represents the architecture of KeyStone:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表示了KeyStone的架构：
- en: '![](../images/00014.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00014.jpeg)'
- en: Introduction to Nova, the OpenStack compute service
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Nova，OpenStack计算服务
- en: 'Nova is a compute service for OpenStack which provides a way to provision compute
    instances, also known as virtual machines. Nova has capabilities to create and
    manage the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Nova是OpenStack的计算服务，提供了一种创建和管理计算实例（也称为虚拟机）的方式。Nova具有创建和管理以下功能：
- en: Virtual machines
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机
- en: Bare metal servers
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 裸金属服务器
- en: System containers
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统容器
- en: Nova contains multiple services, each performing different functions. They internally
    communicate via RPC message-passing mechanisms.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Nova包含多个服务，每个服务执行不同的功能。它们通过RPC消息传递机制进行内部通信。
- en: 'Nova consists of the following components:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Nova包含以下组件：
- en: '**Nova API**: The Nova API service processes incoming REST requests to create
    and manage virtual servers. The API service mainly deals with database reads and
    writes, and communicates over RPC with other services to generate responses to
    the REST requests.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nova API：Nova API服务处理传入的REST请求，以创建和管理虚拟服务器。API服务主要处理数据库读写，并通过RPC与其他服务通信，生成对REST请求的响应。
- en: '**Placement API**: Nova Placement API service was introduced in 14.0.0 Newton
    release. This service tracks the resource provider inventories and usages of each
    provider. A resource provider can be a shared storage pool, compute node and so
    on.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置API：Nova放置API服务在14.0.0牛顿版本中引入。该服务跟踪每个提供程序的资源提供程序库存和使用情况。资源提供程序可以是共享存储池、计算节点等。
- en: '**Scheduler**: The scheduler service decides which compute host gets instances.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度程序：调度程序服务决定哪个计算主机获得实例。
- en: '**Compute**: The compute service is responsible for communicating with hypervisors
    and virtual machines. It runs on each compute node.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算：计算服务负责与hypervisors和虚拟机通信。它在每个计算节点上运行。
- en: '**Conductor**: The conductor service acts as a database proxy, handles object
    conversion and helps with request coordination.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主管：主管服务充当数据库代理，处理对象转换并协助请求协调。
- en: '**Database**: The database is an SQL database for data storage.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库：数据库是用于数据存储的SQL数据库。
- en: '**Messaging queue**: This route''s information is moved between different Nova
    services.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息队列：此路由的信息在不同的Nova服务之间移动。
- en: '**Network**: The network service manages IP forwarding, bridges, VLANs and
    so on.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络：网络服务管理IP转发、桥接、VLAN等。
- en: 'The following figure represents the architecture of Nova:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表示了Nova的架构：
- en: '![](../images/00015.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00015.jpeg)'
- en: Introduction to Neutron, the OpenStack network service
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Neutron，OpenStack网络服务
- en: Neutron is network service for OpenStack which provides a variety of networking
    options in an OpenStack cloud. Its old name was Quantum and it was later renamed
    to Neutron. Neutron uses a vast array of plugins to provide different network
    configurations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron是OpenStack的网络服务，为OpenStack云提供各种网络选项。它的旧名称是Quantum，后来更名为Neutron。Neutron使用各种插件提供不同的网络配置。
- en: 'Neutron contains the following components:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Neutron包含以下组件：
- en: '**Neutron server** (`neutron-server` and `neutron-*-plugin`): The Neutron server
    handles incoming REST API requests. It communicates to the database using plugins'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neutron服务器（`neutron-server`和`neutron-*-plugin`）：Neutron服务器处理传入的REST API请求。它使用插件与数据库通信
- en: '**Plugin agent** (`neutron-*-agent`): The plugin agent runs on each compute
    node to manage the local virtual switch (vswitch) configuration'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件代理（`neutron-*-agent`）：插件代理在每个计算节点上运行，以管理本地虚拟交换机（vswitch）配置
- en: '**DHCP agent** (`neutron-dhcp-agent`): The DHCP agent provides DHCP services
    to tenant networks. This agent is responsible for maintaining all DHCP configurations'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP代理（`neutron-dhcp-agent`）：DHCP代理为租户网络提供DHCP服务。此代理负责维护所有DHCP配置
- en: '**L3 agent** (`neutron-l3-agent`): The L3 agent provides L3/NAT forwarding
    for the external network access of VMs on tenant networks'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: L3代理（`neutron-l3-agent`）：L3代理为租户网络上VM的外部网络访问提供L3/NAT转发
- en: '**Network provider services (SDN server/services)**: This service provides
    additional networking services to tenant networks'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络提供商服务（SDN服务器/服务）：此服务为租户网络提供额外的网络服务
- en: '**Messaging queue**: Routes information between the Neutron processes'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息队列：在Neutron进程之间路由信息
- en: '**Database**: The database is an SQL database for data storage'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库：数据库是用于数据存储的SQL数据库
- en: 'The following figure represents the architecture of Neutron:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表示了Neutron的架构：
- en: '![](../images/00016.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00016.jpeg)'
- en: Introduction to Cinder, the OpenStack block storage service
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cinder是OpenStack的块存储服务
- en: Cinder is a block storage service for OpenStack which provides persistent block
    storage resources for VMs in Nova. Cinder uses LVM or other plugin drivers to
    provide storage. Users can use Cinder to create, delete, and attach a volume.
    Also, more advanced features such as clone, extend volumes, snapshots, and write
    images can be used as bootable persistent instances for VMs and bare metals. Cinder
    can also be used independently of other OpenStack services.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Cinder是OpenStack的块存储服务，为Nova中的虚拟机提供持久的块存储资源。Cinder使用LVM或其他插件驱动程序来提供存储。用户可以使用Cinder来创建、删除和附加卷。此外，还可以使用更高级的功能，如克隆、扩展卷、快照和写入图像，作为虚拟机和裸金属的可引导持久实例。Cinder也可以独立于其他OpenStack服务使用。
- en: 'The block storage service consists of the following components and provides
    a highly available, fault tolerant and recoverable solution for managing volumes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 块存储服务由以下组件组成，并为管理卷提供高可用性、容错性和可恢复性的解决方案：
- en: '**cinder-api**: A WSGI app that authenticates and routes requests to the cinder-volume
    service'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cinder-api**：一个WSGI应用程序，用于验证和路由请求到cinder-volume服务'
- en: '**cinder-scheduler**: Schedules requests for the optimal storage provider node
    to create volume on'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cinder-scheduler**：调度对最佳存储提供程序节点的请求，以创建卷'
- en: '**cinder-volume**: Interacts with a variety of storage providers and also handles
    the read and write requests to maintain states. It also interacts with cinder-scheduler'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cinder-volume**：与各种存储提供程序进行交互，并处理读写请求以维护状态。它还与cinder-scheduler进行交互。'
- en: '**cinder-backup**: Backs up volumes to OpenStack object storage (Swift). It
    also interacts with a variety of storage providers'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cinder-backup**：将卷备份到OpenStack对象存储（Swift）。它还与各种存储提供程序进行交互'
- en: 'Messaging queue routes information between the block storage processes. The
    following figure is the architecture diagram of Cinder:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 消息队列在块存储过程之间路由信息。以下图是Cinder的架构图：
- en: '![](../images/00017.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00017.jpeg)'
- en: Introduction to Glance, the OpenStack image service
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Glance是OpenStack的图像服务
- en: Glance is the image service project for OpenStack which provides discovering,
    registering, and retrieving abilities for disk and server images. Users can upload
    and discover data images and metadata definitions that are meant to be used with
    other services. In short, Glance is a central repository for managing images for
    VMs, containers and bare metals. Glance has a RESTful API that allows for the
    querying of image metadata as well as the retrieval of the actual image.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Glance是OpenStack的图像服务项目，为磁盘和服务器图像的发现、注册和检索提供能力。用户可以上传和发现数据图像和元数据定义，这些定义旨在与其他服务一起使用。简而言之，Glance是用于管理虚拟机、容器和裸金属图像的中央存储库。Glance具有RESTful
    API，允许查询图像元数据以及检索实际图像。
- en: 'The OpenStack image service, Glance, includes the following components:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack镜像服务Glance包括以下组件：
- en: '**glance-api**: A WSGI app that accepts image API calls for image discovery,
    retrieval and storage. It authenticates it with Keystone and forwards the request
    to the glance-registry.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**glance-api**：一个WSGI应用程序，用于接受图像API调用以进行图像发现、检索和存储。它使用Keystone进行身份验证，并将请求转发到glance-registry。'
- en: '**glance-registry**: A private internal service that stores, processes and
    retrieves metadata about images. Metadata includes items such as size and type.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**glance-registry**：一个私有的内部服务，用于存储、处理和检索有关图像的元数据。元数据包括大小和类型等项目。'
- en: '**Database**: It stores image metadata. You can choose MySQL or SQLite according
    to your preferences.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：它存储图像元数据。您可以根据自己的喜好选择MySQL或SQLite。'
- en: '**Storage repository for image files**: Various repository types are supported
    for storing images.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像文件的存储库**：支持各种存储库类型来存储图像。'
- en: '**Metadata definition service**: A common API for vendors, admins, services
    and users to meaningfully define their own custom metadata. This metadata can
    be used for different types of resources such as images, artifacts, volumes, flavors
    and aggregates. A definition includes the new property''s key, description, constraints,
    and the resource type it can be associated with.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元数据定义服务**: 为供应商、管理员、服务和用户提供一个通用API，以有意义地定义自己的自定义元数据。这些元数据可以用于不同类型的资源，如图像、工件、卷、口味和聚合。定义包括新属性的键、描述、约束以及它可以关联的资源类型。'
- en: 'The following figure is the architecture diagram of Glance. Glance also has
    a client-server architecture that provides a REST API to the user, through which
    requests to the server can be performed:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图是Glance的架构图。Glance还具有客户端-服务器架构，为用户提供REST API，通过该API可以对服务器执行请求：
- en: '![](../images/00018.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00018.jpeg)'
- en: Introduction to Swift, the OpenStack object store
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift介绍，OpenStack对象存储
- en: Swift is the object store service for OpenStack which can be used to store redundant,
    scalable data on clusters of servers that are capable of storing petabytes of
    data. It provides a fully distributed, API-accessible storage platform that can
    be integrated directly into applications or used for backup, archiving and data
    retention. Swift uses a distributed architecture with no central point of control,
    which makes it highly available, distributed and eventually a consistent object
    storage solution. It is ideal for storing unstructured data which can grow without
    bounds and can be retrieved and updated.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Swift是OpenStack的对象存储服务，可用于在能够存储PB级数据的服务器集群上存储冗余、可扩展的数据。它提供了一个完全分布式的、可通过API访问的存储平台，可以直接集成到应用程序中，也可用于备份、归档和数据保留。Swift使用分布式架构，没有中央控制点，这使得它具有高可用性、分布式性和最终一致的对象存储解决方案。它非常适合存储可以无限增长并且可以检索和更新的非结构化数据。
- en: Data is written to multiple nodes that extend to different zones for ensuring
    data replication and integrity across the cluster. Clusters can scale horizontally
    by adding new nodes. In case of node failure, the data is replicated to other
    active nodes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 数据被写入多个节点，扩展到不同区域，以确保数据在集群中的复制和完整性。集群可以通过添加新节点进行水平扩展。在节点故障的情况下，数据会被复制到其他活动节点。
- en: Swift organizes data in a hierarchy. It accounts for the stored list of containers,
    containers for storing lists of objects and objects for storing the actual data
    with metadata.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Swift以层次结构组织数据。它记录容器的存储列表，容器用于存储对象列表，对象用于存储带有元数据的实际数据。
- en: 'Swift has the following major components in order to deliver high availability,
    high durability, and high concurrency. Swift has many other services such as updaters,
    auditors, and replicators which handle housekeeping tasks to deliver a consistent
    object storage solution:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Swift具有以下主要组件，以实现高可用性、高耐久性和高并发性。Swift还有许多其他服务，如更新程序、审计程序和复制程序，用于处理日常任务，以提供一致的对象存储解决方案：
- en: '**proxy-servers**: The public API is exposed through the proxy server. It handles
    all of the incoming API requests and routes the request to appropriate services.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理服务器**: 公共API通过代理服务器公开。它处理所有传入的API请求，并将请求路由到适当的服务。'
- en: '**Rings**: Ring maps the logical names of data to locations on particular disks.
    There are separate rings for different resources in Swift.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环**: 环将数据的逻辑名称映射到特定磁盘上的位置。Swift中针对不同资源有不同的环。'
- en: '**Zones**: A zone isolates data from other zones. If a failure happens in one
    zone, the cluster is not impacted as the data is replicated across zones.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域**: 区域将数据与其他区域隔离开来。如果一个区域发生故障，集群不会受到影响，因为数据在区域之间复制。'
- en: '**Accounts**: An account is a database that stores the list of containers in
    an account. It is distributed across the cluster.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户**：账户是存储账户中容器列表的数据库。它分布在集群中。'
- en: '**Containers**: A container is a database that stores the list of objects in
    a container. It is distributed across the cluster.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：容器是存储容器中对象列表的数据库。它分布在集群中。'
- en: '**Objects**: The data itself.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象**：数据本身。'
- en: '**Partitions**: It stores objects, account databases and container databases
    and helps manage locations in which data lives in the cluster.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区**：它存储对象、账户数据库和容器数据库，并帮助管理数据在集群中的位置。'
- en: 'The following figure shows an architecture diagram for Swift:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了Swift的架构图：
- en: '![](../images/00019.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00019.jpeg)'
- en: DevStack installation
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevStack安装
- en: DevStack is a set of extensible scripts used to quickly bring up a complete
    development OpenStack environment. DevStack is meant for only development and
    testing purposes. Please note that it should not be used in a production environment.
    DevStack installs all the core components by default which are Nova, Neutron,
    Cinder, Glance, Keystone, and Horizon.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: DevStack是一组可扩展的脚本，用于快速搭建完整的开发OpenStack环境。DevStack仅用于开发和测试目的。请注意，它不应该在生产环境中使用。DevStack默认安装所有核心组件，包括Nova、Neutron、Cinder、Glance、Keystone和Horizon。
- en: Devstack is able to run on Ubuntu 16.04/17.04, Fedora 24/25, and CentOS/RHEL
    7, as well as Debian and OpenSUSE.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Devstack可以在Ubuntu 16.04/17.04、Fedora 24/25和CentOS/RHEL 7以及Debian和OpenSUSE上运行。
- en: In this section, we will set up a basic OpenStack environment on Ubuntu 16.04
    and try out some commands to test various components in OpenStack.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Ubuntu 16.04上设置一个基本的OpenStack环境，并尝试一些命令来测试OpenStack中的各个组件。
- en: 'Add a stack user using the following method. You should run DevStack as a non-root
    user with `sudo` enabled:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法添加一个stack用户。您应该以启用了`sudo`的非root用户身份运行DevStack：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now add the `sudo` privilege to the user.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为用户添加`sudo`权限。
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Download DevStack. DevStack by defaults installs the master version of the
    project from Git. You can specify the use of stable branches also:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载DevStack。DevStack默认安装来自Git的项目的主版本。您也可以指定使用稳定的分支：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a `local.conf` file. This is a `config` file used by DevStack for installation.
    Here is the minimum configuration required by DevStack to get started (please
    refer to [https://docs.openstack.org/devstack/latest/](https://docs.openstack.org/devstack/latest/)
    for more configurations):'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`local.conf`文件。这是DevStack用于安装的`config`文件。以下是DevStack启动所需的最小配置（请参考[https://docs.openstack.org/devstack/latest/](https://docs.openstack.org/devstack/latest/)获取更多配置信息）：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Start the installation. This may take around 15 to 20 minutes depending on
    your internet connectivity and your host capacity:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始安装。这可能需要大约15到20分钟，具体取决于您的互联网连接和主机容量：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will see output similar to the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似以下的输出：
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can access Horizon to experience the web interface with OpenStack, or you
    can source `openrc` in your shell, and then use the OpenStack command-line tool
    to manage vms, networks, volumes, and images from there. Here''s how you do it:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问Horizon来体验OpenStack的Web界面，或者您可以在shell中使用`openrc`，然后使用OpenStack命令行工具来管理虚拟机、网络、卷和镜像。以下是您的操作步骤：
- en: '[PRE6]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating a KeyStone user
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建KeyStone用户
- en: 'Now let''s create a user and then assign it an admin role. These actions will
    be handled by KeyStone:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个用户，然后为其分配管理员角色。这些操作将由KeyStone处理：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Assign role to the user
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户分配角色
- en: 'We will assign an admin role to our user `my-new-user`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的用户`my-new-user`分配一个管理员角色：
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating a VM using Nova
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nova创建虚拟机
- en: Let's create a VM using Nova. We will use the cirros image from Glance, and
    the network from Neutron.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Nova创建一个虚拟机。我们将使用Glance中的cirros镜像和Neutron中的网络。
- en: 'The available list of images in Glance are created by DevStack:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Glance中可用的图像列表是由DevStack创建的：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also check the network list in Neutron created by the DevStack installation:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 还要检查由DevStack安装创建的Neutron中的网络列表：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Nova provides a flavor that specifies the VM resources. Here is the list of
    flavors created by DevStack in Nova:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Nova提供了一个指定VM资源的flavor。以下是由DevStack在Nova中创建的flavor列表：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will create a keypair to be used to SSH to the VM created in Nova:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个密钥对，用于SSH到在Nova中创建的VM：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s create a VM using all the resources we listed previously:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前列出的所有资源创建一个VM：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Check the server list to verify whether the VM was launched successfully or
    not:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 检查服务器列表，以验证VM是否成功启动：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Attach volume to VM
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将卷附加到VM
- en: 'Now that our VM is running, let''s try to do something more ambitious. We will
    now create a volume in Cinder and attach it to our running VM:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的VM正在运行，让我们尝试做一些更有雄心的事情。我们现在将在Cinder中创建一个卷，并将其附加到我们正在运行的VM上：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s check the list of volumes in Cinder. We will see that our volume is
    created and is in an available state:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查Cinder中的卷列表。我们将看到我们的卷已创建并处于可用状态：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s attach this volume to our VM:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个卷附加到我们的VM上：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Verify whether the volume was attached:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 验证卷是否已附加：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can see here that the volume is attached to our `test-vm` vm.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里看到卷已附加到我们的`test-vm`虚拟机上。
- en: Uploading an image to Swift
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像上传到Swift
- en: 'We will try to upload an image to Swift. First, check the account details:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试将图像上传到Swift。首先，检查帐户详细信息：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will create an images container to store all our images. Similarly, we can
    create multiple containers inside an account with any logical name to store different
    types of data:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个图像容器来存储所有我们的图像。同样，我们可以在一个帐户中创建多个容器，使用任何逻辑名称来存储不同类型的数据：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now that we have a container, let''s upload an image to the container:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个容器，让我们将一个图像上传到容器中：
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can see that the image was successfully uploaded to the Swift object store.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到图像已成功上传到Swift对象存储。
- en: There are many more features that are available in OpenStack, which you can
    read about in the user guides available for each project.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenStack中还有许多其他可用的功能，您可以在每个项目的用户指南中阅读到。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we gave you a basic introduction to OpenStack and the components
    available in OpenStack. We discussed the components and the architecture of individual
    projects. Then we completed a DevStack installation to set up a development environment
    for running OpenStack. We then did some hands-on provisioning for a VM using Nova.
    This included adding a KeyStone user, assigning a role to them and attaching a
    volume to the VM after it was provisioned. Also, we looked at how we can use Swift
    to upload and download files. In the next chapter, we will look at the state of
    containerization in OpenStack.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为您提供了OpenStack的基本介绍以及OpenStack中可用的组件。我们讨论了各个项目的组件和架构。然后，我们完成了一个DevStack安装，为运行OpenStack设置了一个开发环境。然后，我们进行了一些关于使用Nova进行VM的实际配置。这包括添加一个KeyStone用户，为他们分配角色，并在VM配置完成后将卷附加到VM。此外，我们还看了如何使用Swift上传和下载文件。在下一章中，我们将看看OpenStack中容器化的状态。
