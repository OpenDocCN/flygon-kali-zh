["```cs\nDECLARE_CLIENT_RMI_NOATTACH(ClMoveEntity, SMoveEntityParams, eNRT_ReliableUnordered);\n```", "```cs\n  IMPLEMENT_RMI(CGameRules, ClMoveEntity)\n  {\n  }\n```", "```cs\n  void SerializeWith(TSerialize ser)\n  {\n    ser.Value(\"entityId\", entityId, 'eid');\n    ser.Value(\"position\", position, 'wrld');\n    ser.Value(\"orientation\", orientation, 'ori0');\n  }\n```", "```cs\n  DECLARE_SERVER_RMI_NOATTACH(SvRequestMoveEntity, SMoveEntityParams, eNRT_ReliableUnordered);\n\n  DECLARE_CLIENT_RMI_NOATTACH(ClMoveEntity, SMoveEntityParams, eNRT_ReliableUnordered);\n```", "```cs\n  IMPLEMENT_RMI(CGameRules, SvRequestMoveEntity)\n  {\n    IEntity *pEntity = gEnv->pEntitySystem->GetEntity(params.entityId);\n    if(pEntity == nullptr)\n      return true;\n\n    pEntity->SetWorldTM(Matrix34::Create(Vec3(1, 1, 1), params.orientation, params.position));\n\n    GetGameObject()->InvokeRMI(ClMoveEntity(), params, eRMI_ToAllClients | eRMI_NoLocalCalls);\n\n    return true;\n  }\n```", "```cs\n  GetGameObject()->InvokeRMI(SvRequestMoveEntity(), params, eRMI_Server);\n```", "```cs\n  GetGameObject()->ChangedNetworkState(eEA_GameClientF);\n```", "```cs\n  bool CMyGameObjectExtension::NetSerialize(TSerialize ser, EEntityAspects aspect, uint8 profile, int flags)\n  {\n    switch(aspect)\n    {\n      case eEA_GameClientF:\n        {\n          ser.EnumValue(\"inputFlags\", (EInputFlags &)m_inputFlags, EInputFlag_First, EInputFlag_Last);\n        }\n        break;\n    }\n  }\n```", "```cs\n<Policy name=\"wrld2\" impl=\"QuantizedVec3\">\n  <XParams min=\"0\" max=\"2047.0\" nbits=\"24\"/>\n  YParams min=\"0\" max=\"2047.0\" nbits=\"24\"/>\n  <ZParams min=\"0\" max=\"1023.0\" nbits=\"24\"/>\n</Policy>\n```", "```cs\nNet.Expose({\n  Class = MyEntity,\n  ClientMethods = {\n    ClRevive             = { RELIABLE_ORDERED, POST_ATTACH, ENTITYID, },\n  },\n  ServerMethods = {\n    SvRequestRevive          = { RELIABLE_UNORDERED, POST_ATTACH, ENTITYID, },\n  },\n  ServerProperties = {\n  },\n});\n```", "```cs\n  function MyEntity.Server:SvRequestRevive(playerEntityId)\n  end\n```", "```cs\n  self.server:SvRequestRevive(playerEntityId);\n```", "```cs\n  self.allClients:ClRevive(playerEntityId);\n```", "```cs\n  self.otherClients:ClRevive(playerEntityId);\n```", "```cs\n  CryAction.CreateGameObjectForEntity(self.id);\n```", "```cs\n  CryAction.BindGameObjectToNetwork(self.id);\n```"]