["```js\n$ npx create-react-app data-art\n```", "```js\n$ cd data-art\n$ yarn start\n```", "```js\nnpm install -D tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9\n```", "```js\nnpm install @craco/craco\n```", "```js\n{\n\u00a0\u00a0\"start\": \"craco start\",\n\u00a0\u00a0\"build\": \"craco build\",\n\u00a0\u00a0\"test\": \"craco test\",\n}\n```", "```js\n// craco.config.js\nmodule.exports = {\n\u00a0\u00a0style: {\n\u00a0\u00a0\u00a0\u00a0postcss: {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0plugins: [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0require('tailwindcss'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0require('autoprefixer'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0},\n}\n```", "```js\n//tailwind.config.js\nmodule.exports = {\n\u00a0\u00a0purge: [\"./src/**/*.{js,jsx,ts,tsx}\", \"./public/index.html\"],\n\u00a0\u00a0darkMode: false, // or 'media' or 'class'\n\u00a0\u00a0theme: {\n\u00a0\u00a0\u00a0\u00a0extend: {},\n\u00a0\u00a0},\n\u00a0\u00a0variants: {\n\u00a0\u00a0\u00a0\u00a0extend: {},\n\u00a0\u00a0},\n\u00a0\u00a0plugins: [],\n};\n```", "```js\n/* ./src/index.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```", "```js\n//index.js\n. . . . . .\nimport \"./index.css\n. . . . . .\n```", "```js\nfunction App() {\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<header className=\"App-header\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<p>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Edit <code>src/App.js</code> and save to reload.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</p>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<a\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"App-link\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0href=\"https://reactjs.org\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0target=\"_blank\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rel=\"noopener noreferrer\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Learn React\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</a>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</header>\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0);\n}\n```", "```js\nfunction App() {\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div className=\"\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Data-Art\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0);\n}\n```", "```js\nfunction App() {\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div className=\"max-w-2xl border mx-auto text-3xl mt-60 text-center\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Data-Art\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0);\n}\n```", "```js\nfunction App() {\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div className=\"max-w-full mx-auto border-2 mt-10\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"flex flex-col\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"border-2 mb-10 flex flex-row\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Nav\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"flex flex-row justify-between border-2\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"border-2 w-full\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Main Body\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"border-2 w-1/3\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Side Plane\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0);\n}\n```", "```js\nyarn add react-table-v6 react-draggable\n```", "```js\n    import React from \"react\";\n    import ReactTable from 'react-table-v6'\n    import Draggable from 'react-draggable';\n    import 'react-table-v6/react-table.css'\n    ```", "```js\n    export default function DataTable({ columns, values, setCompIndex, index }) {\n    \u00a0\u00a0// DataTable component code here\n    }\n    ```", "```js\n    const dataColumns = columns.map((val, index) => {\n    \u00a0\u00a0\u00a0\u00a0return { Header: val, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0accessor: val,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell: (props) => (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className={val || ''}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span>{props.value}</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0width:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index === 0 && (1280 * 0.8333 - 30) / columns.length < 130\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? 130\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: undefined,\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0});\n    ```", "```js\n    [{\n    \u00a0\u00a0Header: \"A\",\n    \u00a0\u00a0accessor: \"A\"\n    },{\n    \u00a0\u00a0Header: \"B\",\n    \u00a0\u00a0accessor: \"B\"\n    },{\n    \u00a0\u00a0Header: \"C\",\n    \u00a0\u00a0accessor: \"C\"\n    }]\n    ```", "```js\n    const data = values.map(val =>{\n    \u00a0\u00a0\u00a0\u00a0let rows_data = {}\n    \u00a0\u00a0\u00a0\u00a0val.forEach((val2, index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let col = columns[index];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows_data[col] = val2;\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0return rows_data;\n    \u00a0\u00a0})\n    ```", "```js\n[{\n\u00a0\u00a0A: 2,\n\u00a0\u00a0B: 3,\n\u00a0\u00a0C: 5\n},{\n\u00a0\u00a0A: 1,\n\u00a0\u00a0B: 20,\n\u00a0\u00a0C: 50\n},{\n\u00a0\u00a0A: 23,\n\u00a0\u00a0B: 43,\n\u00a0\u00a0C: 55\n}]\n```", "```js\n[{\n\u00a0\u00a0dummy: {\n\u00a0\u00a0\u00a0\u00a0A: 1.0,\n\u00a0\u00a0\u00a0\u00a0B: 3.0\n\u00a0\u00a0},\n\u00a0\u00a0dummy2: {\n\u00a0\u00a0\u00a0\u00a0J: \"big\",\n\u00a0\u00a0\u00a0\u00a0k: \"small\"\n\u00a0\u00a0}\n}, . . . . ]\n```", "```js\n[{\n\u00a0\u00a0Header: \"A\",\n\u00a0\u00a0accessor: \"dummy.A\"\n},\n{\n\u00a0\u00a0Header: \"B\",\n\u00a0\u00a0accessor: \"dummy.B\"\n},\n{\n\u00a0\u00a0Header: \"J\",\n\u00a0\u00a0accessor: \"dummy2.J\"\n},\n{\n\u00a0\u00a0Header: \"K\",\n\u00a0\u00a0accessor: \"dummy2.K\"\n}]\n```", "```js\nfunction DataTable({ columns, values, setCompIndex, index }) {\n . . . . . . . . . . . . . . . . . . . .\nconst handleSidePlane = ()=>{\n\u00a0\u00a0\u00a0\u00a0setCompIndex(index)\n\u00a0\u00a0}\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<Draggable >\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"w-1/2\" onClick={()=> handleSidePlane()}>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ReactTable\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data={data}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns={dataColumns}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getTheadThProps={() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { style: { wordWrap: 'break-word', whiteSpace: 'initial' } }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showPageJump={true}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showPagination={true}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0defaultPageSize={10}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showPageSizeOptions={true}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minRows={10}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0\u00a0\u00a0</Draggable>\n\u00a0\u00a0)\u00a0\u00a0\n}\n```", "```js\nimport React from 'react'\nimport DataTable from './DataTable'\nexport default function DataTables({datacomp, setCompIndex,}) {\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{datacomp.map((val,index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return( \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<DataTable \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key={index} \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns={val.columns} \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values={val.values} \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCompIndex={setCompIndex}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index={index}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})}\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0)\n}\n```", "```js\n    import React, { useState } from 'react';\n    ```", "```js\n    import { read_csv } from 'danfojs/src/io/reader' // step 2\n    ```", "```js\n    const [dataComp, setDataComp] = useState([])\n    ```", "```js\n    const changeHandler = function (event) {\n    \u00a0\u00a0\u00a0\u00a0const content = event.target.files[0]\n    \u00a0\u00a0\u00a0\u00a0const url = URL.createObjectURL(content)\n\n    \u00a0\u00a0\u00a0\u00a0read_csv(url).then(df => { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const columns = df.columns\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const values = df.values\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp(prev => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let new_data = prev.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let key = new_data.length + 1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let dict = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns: columns,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values: values,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df: df,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keys: \"df\" + key\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_data.push(dict)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new_data\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\n    \u00a0\u00a0\u00a0\u00a0}).catch((error) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(error)\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    ```", "```js\n    if (dataComp.length) { //step 8\n    \u00a0\u00a0\u00a0\u00a0console.log(\"dataComp column\", dataComp[0].columns)\n    \u00a0\u00a0\u00a0\u00a0console.log(\"dataComp values\", dataComp[0].values)\n    \u00a0\u00a0\u00a0\u00a0console.log(\"dataComp dataFame\", dataComp[0].df)\n    \u00a0\u00a0}\n    ```", "```js\n    . . . . . . . . . . . . \n    import DataTables from './components/DataTables';\n    function App() {\n    \u00a0\u00a0\u00a0. . . . . . . . . . \n    \u00a0\u00a0const [compIndex, setCompIndex] = useState()\n    \u00a0\u00a0. . . . . . . . . .\n    }\n    ```", "```js\n    <div>\n    \u00a0\u00a0\u00a0\u00a0{(dataComp.length > 0) &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<DataTables\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datacomp={dataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCompIndex={setCompIndex}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    </div>\n    ```", "```js\n    export default function Describe({ dataComp, setDataComp}) {\n    }\n    ```", "```js\n    return (\n    \u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button onClick={()=> describe()} className=\"bg-blue-700 text-white rounded-sm p-2\">Describe</button>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    )\n    ```", "```js\n    const describe = ()=> {\n    \u00a0\u00a0\u00a0\u00a0const df = dataComp.df.describe()\n    \u00a0\u00a0\u00a0\u00a0let column = df.columns.slice()\n    \u00a0\u00a0\u00a0\u00a0column.splice(0,0, \"index\")\n    \u00a0\u00a0\u00a0\u00a0const values = df.values \n    \u00a0\u00a0\u00a0\u00a0const indexes = df.index\n\n    \u00a0\u00a0\u00a0\u00a0const new_values = values.map((val, index)=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let new_val = val.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_val.splice(0,0, indexes[index]) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new_val\n    \u00a0\u00a0\u00a0\u00a0})\n     . . . . . . . . \n    }\n    ```", "```js\n    setDataComp(prev => { // step 7\n    \u00a0\u00a0\u00a0\u00a0let new_data = prev.slice()\n    \u00a0\u00a0\u00a0\u00a0let dict = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns: column,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values: new_values,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df: df\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0new_data.push(dict)\n    \u00a0\u00a0\u00a0\u00a0return new_data\n    })\n    ```", "```js\nimport React from 'react'\nimport Describe from './Describe'\nexport default function SidePlanes({dataComp, \n\u00a0\u00a0dataComps,\n\u00a0\u00a0setDataComp,\n\u00a0\u00a0df_index,\n\u00a0\u00a0dfOpsType}) {\n\n\u00a0\u00a0\u00a0\u00a0if(dfOpsType === \"Arithemtic\") {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div> Arithmetic </div>\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else if(dfOpsType === \"Describe\") {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <Describe \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComp={dataComp}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp={setDataComp}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else if(dfOpsType === \"Df2df\") {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div> Df2df </div>\n\u00a0\u00a0\u00a0\u00a0} \n\u00a0\u00a0\u00a0\u00a0else if(dfOpsType === \"Query\") {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div> Query </div>\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0No Plane\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0)\n}\n```", "```js\nimport SidePlane from './SidePlane'\nexport { SidePlane }\n```", "```js\n    import { SidePlane } from './components/SidePlanes' \n    ```", "```js\n    function App() {\n    \u00a0\u00a0. . . . . . . . \n    \u00a0\u00a0const [dfOpsType, setDfOpsType] = useState() // step 2\n    \u00a0\u00a0const [showSidePlane, setSidePlane] = useState(false) //step 3\n    \u00a0\u00a0. . . . . . . . . \n    \u00a0\u00a0const dataFrameOps = [\"Arithemtic\", \"Describe\", \"Df2df\", \"Query\"] // step 4\n    \u00a0\u00a0const handleDfops = (e) => { //step 6\n    \u00a0\u00a0\u00a0\u00a0const value = e.target.value\n    \u00a0\u00a0\u00a0\u00a0setDfOpsType(value)\n    \u00a0\u00a0\u00a0\u00a0setSidePlane(\"datatable\")\n    \u00a0\u00a0}\n     . . . . . . . . . . . . . . \n    }\n    ```", "```js\n    <div className=\"border-2 w-1/3\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0{showSidePlane\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showSidePlane === \"datatable\" ?\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"border-2 w-1/3\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<SidePlane\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComp={dataComp[compIndex]}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComps={dataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df_index={compIndex}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp={setDataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dfOpsType={dfOpsType}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div> :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"border-2 w-1/3\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Chart Plane\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0}\n    </div>\n    ```", "```js\n    import React, { useRef } from 'react'\n\n    export default function Query({ dataComp, setDataComp}) {\n    \u00a0\u00a0// step 1\n    \u00a0\u00a0const columnRef = useRef()\n    \u00a0\u00a0const logicRef = useRef()\n    \u00a0\u00a0const valuesRef = useRef()\n     . . . . . . . . . . . . \n    }\n    ```", "```js\n    \u00a0\u00a0const columns = dataComp.columns\n    \u00a0\u00a0const logics = [\">\", \"<\", \"<=\", \">=\", \"==\", \"!=\"]\n    ```", "```js\n    const query = ()=>{\n    \u00a0\u00a0\u00a0\u00a0const qColumn = columnRef.current.value\n    \u00a0\u00a0\u00a0\u00a0const qLogic = logicRef.current.value\n    \u00a0\u00a0\u00a0\u00a0const qValue = valuesRef.current.value\n\n    \u00a0\u00a0\u00a0\u00a0const\u00a0\u00a0df = dataComp.df.query({column: qColumn, is: qLogic, to: qValue})\n    \u00a0\u00a0\u00a0\u00a0setDataComp(prev => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let new_data = prev.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let dict = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns: df.columns,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values: df.values,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df: df\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_data.push(dict)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new_data\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    ```", "```js\n    <div>\n    \u00a0\u00a0<span className=\"mr-2\">Column</span>\n    \u00a0\u00a0\u00a0\u00a0<select ref={columnRef} className=\"border\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns.map((column, index)=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <option value={column}>{column}</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0</select>\n    </div>\n    ```", "```js\n    <div>\n    \u00a0\u00a0<span className=\"mr-2\">is</span>\n    \u00a0\u00a0<select ref={logicRef} className=\"border\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0logics.map((logic, index)=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <option value={logic}>{logic}</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0</select>\n    </div>\n    ```", "```js\n    <div>\n    \u00a0\u00a0<span className=\"mr-2\">to</span>\n    \u00a0\u00a0\u00a0\u00a0<input ref={valuesRef} placeholder=\"value\" className=\"border\"/>\n    </div>\n    ```", "```js\n    <button onClick={()=>query()} className=\"btn btn-default dq-btn-add\">Query</button>\n    ```", "```js\n    Previous code:\n     . . . . . . . .\n    else if(dfOpsType === \"Query\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div> Query </div>\n    \u00a0\u00a0\u00a0\u00a0}\n    Updated code:\n    else if(dfOpsType === \"Query\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <Query \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComp={dataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp={setDataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```js\n    import React, { useRef } from 'react'\n    import { concat } from 'danfojs/src/core/concat'\n\n    export default function Df2df({dataComp, dataComps,df_index, setDataComp}) {\n    \u00a0\u00a0const dfRef = useRef()\n    \u00a0\u00a0const inpRef = useRef()\n    \u00a0\u00a0const axisRef = useRef()\n    \u00a0\u00a0const opsRef = useRef()\n\n    \u00a0\u00a0const allOps = [\n    \u00a0\u00a0\u00a0\u00a0\"lt\", \"ge\", \"ne\",\n    \u00a0\u00a0\u00a0\u00a0\"eq\", \"gt\", \"add\",\n    \u00a0\u00a0\u00a0\u00a0\"sub\", \"mul\", \"div\",\n    \u00a0\u00a0\u00a0\u00a0\"pow\", \"concat\"\n    \u00a0\u00a0]\n     . . . . . . . . .\u00a0\u00a0. . . . \n    }\n    ```", "```js\n    const df2df = () => {\n    \u00a0\u00a0\u00a0\u00a0// step 4\n    \u00a0\u00a0\u00a0\u00a0let dfIndex = dfRef.current.value\n    \u00a0\u00a0\u00a0\u00a0let inp = parseInt(inpRef.current.value)\n    \u00a0\u00a0\u00a0\u00a0let axis = parseInt(axisRef.current.value)\n    \u00a0\u00a0\u00a0\u00a0let ops = opsRef.current.value\n     . . . . . . . . . . . . . .\n    }\n    ```", "```js\n    \u00a0\u00a0if( ops != \"concat\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let value = dfIndex === \"None\" ? inp : dataComps[dfIndex].df\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let df = dataComp.df\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let rslt = eval('df.${ops}(value, axis=${axis})') // step 6\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp(prev => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let new_data = prev.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let key = new_data.length +1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let dict = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns: rslt.columns,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values: rslt.values,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df: rslt,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keys: \"df\" + key\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_data.push(dict)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new_data\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```js\n    . . . . . . . . .\n    else { // step 7\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let df2 = dataComps[dfIndex].df\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let df1 = dataComp.df\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let rslt = concat({ df_list: [df1, df2], axis: axis })\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let column = rslt.columns.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0column.splice(0,0,\"index\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let rsltValues = rslt.values.map((val, index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let newVal = val.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newVal.splice(0,0, rslt.index[index])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return newVal\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0. . . . . . . . . . . \n    }\n    ```", "```js\n    <div>\n    \u00a0\u00a0<span className=\"mr-2\"> Operations</span>\n    \u00a0\u00a0\u00a0<select ref={opsRef}>\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0allOps.map((val,index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <option value={val} key={index}>{val}</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0</select>\n    </div>\n    ```", "```js\n    <div>\n    \u00a0\u00a0<span className=\"mr-2\"> DataFrames</span>\n    \u00a0\u00a0\u00a0<select ref={dfRef}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<option key={-1}>None</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComps.map((val,index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if( df_index != index) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <option value={index} key={index}>{'df${index}'}</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0</select>\n    </div>\n    ```", "```js\n    <div>\n    \u00a0\u00a0<span>input a value</span>\n    \u00a0\u00a0<input ref={inpRef} className=\"border\" />\n    </div>\n    ```", "```js\n    <div>\n    \u00a0\u00a0<span>axis</span>\n    \u00a0\u00a0<select ref={axisRef} className=\"border\">\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0,1].map((val, index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <option value={val} key={index}>{val}</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0}\n     </select>\n    </div>\n    ```", "```js\n    <button onClick={()=>df2df()} className=\"bg-blue-500 p-2 text-white rounded-sm\">generate Dataframe</button>\n    ```", "```js\n    import Df2df from './Df2df'\n    export default function SidePlanes({dataComp, \n    \u00a0\u00a0dataComps,\n    \u00a0\u00a0setDataComp,\n    \u00a0\u00a0df_index,\n    \u00a0\u00a0dfOpsType}) {\n    \u00a0\u00a0\u00a0\u00a0. . . . . . . . \n    \u00a0\u00a0\u00a0\u00a0else if(dfOpsType === \"Df2df\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <Df2df \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComp={dataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComps={dataComps}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df_index={df_index}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp={setDataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0} \n    \u00a0\u00a0\u00a0. . . . . . . . .\n\n    \u00a0\u00a0\u00a0}\n    ```", "```js\n    import React, { useRef } from 'react'\n    export default function Arithmetic({ dataComp, setDataComp}) {\n\n    \u00a0\u00a0const seriesOps = [\"median\", \"min\", \"max\", \"std\", \"var\", \"count\", \"sum\"]\n    \u00a0\u00a0const dfOps = [\"cumsum\", \"cummax\", \"cumprod\", \"cummin\"]\n    \u00a0\u00a0const all = [\"median\", \"min\", \"max\", \"std\", \"var\", \"count\", \"sum\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"cumsum\", \"cummax\", \"cumprod\", \"cummin\"]\n\n    \u00a0\u00a0const axisRef = useRef()\n    \u00a0\u00a0const opsRef = useRef()\n     . . . . . . . . . . . .\n    }\n    ```", "```js\n    const arithemtic = () => {\n\n    \u00a0\u00a0\u00a0\u00a0let sOps = opsRef.current.value\n    \u00a0\u00a0\u00a0\u00a0let axis = axisRef.current.value\n    \u00a0\u00a0\u00a0\u00a0if( seriesOps.includes(sOps)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let df_comp = dataComp.df\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let df = eval('df_comp.${sOps}(axis=${axis})')\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let columns = Array.isArray(df.columns) ? df.columns.slice() : [df.columns]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns.splice(0,0, \"index\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let values = df.values.map((val,index) => {\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return [df.index[index], val]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    . . . . . . . . . . . \n    }\n    ```", "```js\n    else {\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let df_comp2 = dataComp.df\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let df = eval('df_comp2.${sOps}({axis:${axis}})')\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp(prev => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let new_data = prev.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let dict = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0columns: df.columns,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values: df.values,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df: df\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_data.push(dict)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new_data\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```js\n    import Arithmetic from './Arithmetic'\n    export default function SidePlanes({dataComp, \n    \u00a0\u00a0dataComps,\n    \u00a0\u00a0setDataComp,\n    \u00a0\u00a0df_index,\n    \u00a0\u00a0dfOpsType}) {\n    \u00a0\u00a0\u00a0\u00a0. . . . . . . . \n    \u00a0\u00a0\u00a0\u00a0if(dfOpsType === \"Arithmetic\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <Arithmetic \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComp={dataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setDataComp={setDataComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0. . . . . . . . .\n\n    \u00a0\u00a0\u00a0}\n    ```", "```js\n    import { Bar as BarChart } from 'react-chartjs-2';\n    import { Line as LineChart } from \"react-chartjs-2\";\n    import { Pie as PieChart} from \"react-chartjs-2\";\n    import Draggable from 'react-draggable';\n\n    export default function Chart({labels, dataset,type}) {\n    \u00a0\u00a0let data = {\n    \u00a0\u00a0\u00a0\u00a0labels: labels,\n    \u00a0\u00a0\u00a0\u00a0datasets: [{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0backgroundColor: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. . . . . . . .\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0borderColor: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. . . . . . . .\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0borderWidth:1,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data: dataset,\n    \u00a0\u00a0\u00a0\u00a0}]\n    \u00a0\u00a0};\n    ```", "```js\n    if(type===\"BarChart\"){\n    \u00a0\u00a0\u00a0\u00a0return(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Draggable>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"max-w-md\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<BarChart data={data} options={options} width=\"100\" height=\"100\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Draggable> \n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    . . . . . . .\n    ```", "```js\n    export default function ChartPlane({setChartComp, dataComp, chartType}) {\n    \u00a0\u00a0const df = dataComp.df\n    \u00a0\u00a0const compCols = dataComp.columns\n    \u00a0\u00a0let x;\n    \u00a0\u00a0let y;\n    \u00a0\u00a0if( compCols[0] === \"index\") {\n    \u00a0\u00a0\u00a0\u00a0x = compCols\n    \u00a0\u00a0\u00a0\u00a0y = dataComp.values[0].map((val, index)=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(typeof val != \"string\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return compCols[index]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0x = df.columns\n    \u00a0\u00a0\u00a0\u00a0const dtypes = df.dtypes\n    \u00a0\u00a0\u00a0\u00a0y = dtypes.map((val, i)=>{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(val != \"string\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x[i]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    ```", "```js\n    <select ref={xRef} className=\"border\">\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0x.map((val, index)=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <option value={val} key={index} >{val}</option>\n    \u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0}\n    </select>\n    <select ref={yRef} className=\"border\">\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0y.map((val, index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <option value={val} key={index}>{val}</option>\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n     </select>\n    ```", "```js\n    <button onClick={()=>handleChart()} className=\"bg-blue-500 p-2 text-white rounded-sm\">generate Chart</button>\n    ```", "```js\n    const handleChart = () => {\n    \u00a0\u00a0const xVal = xRef.current.value\n    \u00a0\u00a0const yVal = yRef.current.value\n    \u00a0\u00a0const labels = xVal === \"index\" ? df.index : df[xVal].values\n    \u00a0\u00a0const data = yVal === \"index\" ? df.index : df[yVal].values\n    \u00a0\u00a0\u00a0\u00a0setChartComp((prev) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const newChart = prev.slice()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const key = newChart.length + 1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const dict = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels: labels,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data: data,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0key: \"chart\" + key,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: chartType\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newChart.push(dict)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return newChart\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0}\n    ```", "```js\nimport React from 'react'\nimport Chart from './Chart'\n\nexport default function ChartsViz({chartComp,setChartComp}) {\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chartComp.map((chart)=> {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Chart \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels={chart.labels}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataset={chart.data}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type={chart.type}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0)\n}\n```", "```js\n    import ChartsViz from './components/ChartsViz'\n    import ChartPlane from './components/ChartPlane'\n    ```", "```js\n    const [chartType, setChartType] = useState()\n    const [chartComp, setChartComp] = useState([])\n    const charts = [\"BarChart\", \"LineChart\", \"PieChart\"]\n    ```", "```js\n    const handleChart = (e) => { // step 4\n    \u00a0\u00a0\u00a0\u00a0const value = e.target.innerHTML\n    \u00a0\u00a0\u00a0\u00a0setChartType(value)\n    \u00a0\u00a0\u00a0\u00a0setSidePlane(\"chart\")\n    \u00a0\u00a0}\n    ```", "```js\n     . . . . . .\n    { \n    \u00a0\u00a0charts.map((chart, i) => {\n    \u00a0\u00a0\u00a0\u00a0return <button disabled={dataComp.length > 0 ? false : true}\n    \u00a0\u00a0\u00a0\u00a0className={classes}\n    \u00a0\u00a0\u00a0\u00a0onClick={handleChart}\n    \u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{chart}\n    \u00a0\u00a0\u00a0</button>\n     })\n    }\n    . . . . . . \n    ```", "```js\n    {(chartComp.length > 0) &&\n    \u00a0\u00a0\u00a0\u00a0<ChartsViz\n    \u00a0\u00a0\u00a0\u00a0\u00a0chartComp={chartComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0setChartComp={setChartComp}\n    \u00a0\u00a0\u00a0\u00a0/>\n    }\n    ```", "```js\n    <div className=\"border-2 w-1/3\">\n    \u00a0\u00a0\u00a0\u00a0<ChartPlane\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataComp={dataComp[compIndex]}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setChartComp={setChartComp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chartType={chartType}\n    \u00a0\u00a0\u00a0\u00a0/>\n    </div>\n    ```"]