- en: Starting with Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Android开始
- en: '**Kotlin** has been officially announced by Google as a first-class programming
    language for Android. Find out why Kotlin is the best tool available for you as
    a newcomer and why senior Android developers first adopted Kotlin.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kotlin**已被Google正式宣布为Android的一流编程语言。了解为什么Kotlin是新手的最佳工具，以及为什么高级Android开发人员首先采用Kotlin。'
- en: In this chapter, you will learn how to set up a working environment. You will
    install and run Android Studio and set up Android SDK and Kotlin. Here, you will
    also be introduced to some important and useful tools such as **Android Debug
    Bridge** (**adb**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何设置工作环境。您将安装和运行Android Studio，并设置Android SDK和Kotlin。在这里，您还将介绍一些重要和有用的工具，如**Android调试桥**（**adb**）。
- en: Since you don't have your project yet, you will set it up. You will initialize
    a Git repository to track changes in your code and create an empty project. You
    will enable it to support Kotlin and add support for additional libraries that
    we will use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您尚未拥有项目，您将设置它。您将初始化一个Git存储库以跟踪代码中的更改，并创建一个空项目。您将使其支持Kotlin，并添加我们将使用的其他库的支持。
- en: After we have initialized the repository and project, we will go through the
    project structure and explain each file the IDE has generated. Finally, you will
    create your first screen and take a look at it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们初始化了存储库和项目之后，我们将浏览项目结构并解释IDE生成的每个文件。最后，您将创建您的第一个屏幕并查看它。
- en: 'This chapter will cover the following points:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下要点：
- en: Setting up an environment for the development of Git and Gradle basics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Git和Gradle基础开发环境设置
- en: Working with Android Manifest
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Android清单
- en: Android emulator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android模拟器
- en: Android tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android工具
- en: Why Kotlin?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Kotlin？
- en: Before we start our journey, we will answer the question from the chapter title--Why
    Kotlin? Kotlin is a new programming language developed by JetBrains, the company
    that developed IntelliJ IDEA. Kotlin is concise and understandable, and it compiles
    everything to bytecode just like Java. It can also compile to JavaScript or native!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始我们的旅程之前，我们将回答章节标题中的问题--为什么选择Kotlin？Kotlin是由JetBrains开发的一种新的编程语言，该公司开发了IntelliJ
    IDEA。Kotlin简洁易懂，与Java一样将所有内容编译为字节码。它还可以编译为JavaScript或本机代码！
- en: Kotlin comes from professionals of the industry and solves problems programmers
    are facing every day. It is easy to start and adopt! IntelliJ comes with a Java
    to Kotlin converter tool. You can convert Java code file by file and everything
    will still work flawlessly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin来自行业专业人士，并解决程序员每天面临的问题。它易于开始和采用！IntelliJ配备了一个Java到Kotlin转换器工具。您可以逐个文件转换Java代码文件，一切仍将无缝运行。
- en: It is interoperable and can use any existing Java Framework or library. The
    interoperability is impeccable and does not require wrappers or adapter layers.
    Kotlin supports build systems such as Gradle, Maven, Kobalt, Ant, and Griffon
    with external support.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它是可互操作的，并且可以使用任何现有的Java框架或库。可互操作性无可挑剔，不需要包装器或适配器层。Kotlin支持构建系统，如Gradle、Maven、Kobalt、Ant和Griffon，并提供外部支持。
- en: The most important thing about Kotlin, for us, is that it works perfectly with
    Android.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，关于Kotlin最重要的是它与Android完美配合。
- en: 'Some of the most impressive Kotlin features are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最令人印象深刻的Kotlin功能如下：
- en: Null safety
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空安全
- en: Exceptions are unchecked
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常是未经检查的
- en: Type inference works everywhere
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型推断在任何地方都适用
- en: One-liner functions take one line
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一行函数占一行
- en: Generated getters and setter out of the box
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用生成的getter和setter
- en: We can define functions outside of classes
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在类外定义函数
- en: Data classes
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类
- en: Functional programming support
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程支持
- en: Extension functions
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展函数
- en: Kotlin uses Markdown instead of HTML for API documents! The Dokka tool, a Javadoc
    alternative, can read Kotlin and Java source code and generate combined docs
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin使用Markdown而不是HTML来编写API文档！ Dokka工具是Javadoc的替代品，可以读取Kotlin和Java源代码并生成组合文档
- en: Kotlin has a better generics support than Java
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin比Java有更好的泛型支持
- en: Reliable and performant concurrent programming
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠且高性能的并发编程
- en: String patterns
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串模式
- en: Named method arguments
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名方法参数
- en: Kotlin for Android - it's official
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin for Android - 官方
- en: On May 17th 2017, Google announced that it's making Kotlin, a statically typed
    programming language for the Java Virtual Machine, a first-class language to write
    Android apps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年5月17日，Google宣布将Kotlin作为Java虚拟机的一种静态类型编程语言，成为编写Android应用程序的一流语言。
- en: The next version of Android Studio (3.0, current one is 2.3.3) will support
    Kotlin out of the box. Google will put its effort in the future of Kotlin.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个版本的Android Studio（3.0，当前版本为2.3.3）将直接支持Kotlin。Google将致力于Kotlin的未来。
- en: It is important to note that this is only an additional language, not a replacement
    for existing Java and C++ support (for now).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，这只是一种附加语言，而不是现有Java和C++支持的替代品（目前）。
- en: Downloading and configuring Android Studio
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和配置Android Studio
- en: To develop our application, we will need some tools. First of all, we will need
    an IDE. For that purpose, we will use Android Studio. Android Studio provides
    the fastest tools to build apps on every type of Android device.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发我们的应用程序，我们将需要一些工具。首先，我们需要一个集成开发环境。为此，我们将使用Android Studio。Android Studio提供了在各种类型的Android设备上构建应用程序的最快速工具。
- en: Android Studio offers professional code editing, debugging, and performance
    tooling. It's a flexible build system that allows you to focus on building a top
    quality application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供专业的代码编辑、调试和性能工具。这是一个灵活的构建系统，可以让您专注于构建高质量的应用程序。
- en: 'Setting up Android Studio takes just a few clicks. Before we go any further,
    you need to download the following version for your operating system:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Android Studio只需点击几下。在我们继续之前，您需要为您的操作系统下载以下版本：
- en: '[https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html)'
- en: 'Here are the instructions for macOS, Linux, and Windows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是macOS、Linux和Windows的说明：
- en: '**macOS**:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**macOS**：'
- en: 'To install it on macOS, follow these steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS上安装它，请按照以下步骤操作：
- en: Launch the Android Studio `DMG` file.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Android Studio的DMG文件。
- en: Drag and drop Android Studio into the `Applications` folder.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Android Studio拖放到“应用程序”文件夹中。
- en: Launch Android Studio.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Android Studio。
- en: Select whether you want to import previous Android Studio settings.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择是否要导入以前的Android Studio设置。
- en: Click on OK.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击确定。
- en: Follow the instructions until Android Studio is ready for use.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照说明进行，直到Android Studio准备就绪。
- en: '**Linux:** To install it on Linux, follow these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux：**要在Linux上安装它，请按照以下步骤进行：'
- en: Unpack the archive you downloaded to an appropriate location for your applications.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的存档解压到适合您的应用程序的位置。
- en: Navigate to `bin/directory/`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`bin/directory/`。
- en: Execute `/studio.sh`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`/studio.sh`。
- en: Select whether you want to import previous Android Studio settings or not.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择是否要导入以前的Android Studio设置。
- en: Click on OK.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击确定。
- en: Follow the instructions until Android Studio is ready for use.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照说明进行，直到Android Studio准备就绪。
- en: Optionally, select Tools | Create Desktop Entry from the menu bar.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，从菜单栏中选择工具|创建桌面条目。
- en: 'If you are running a 64-bit version of Ubuntu, you need to install some 32-bit
    libraries with the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Ubuntu的64位版本，则需要使用以下命令安装一些32位库：
- en: '`**sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1
    libbz2-1.0:i386**`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1
    libbz2-1.0:i386`命令安装所需的32位库。
- en: 'In case you are running a 64-bit Fedora, the command is follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行64位的Fedora，则命令如下：
- en: '`**sudo yum install zlib.i686 ncurses-libs.i686 bzip2-libs.i686**`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`**sudo yum install zlib.i686 ncurses-libs.i686 bzip2-libs.i686**`'
- en: '**Windows**:To install it on Windows, follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows：**要在Windows上安装它，请按照以下步骤进行：'
- en: Execute the `.exe` file you downloaded.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行您下载的`.exe`文件。
- en: Follow the instructions until Android Studio is ready for use.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照说明进行，直到Android Studio准备就绪。
- en: Setting up Android emulators
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Android模拟器
- en: Android SDK comes with **emulators** capable of running applications we develop.
    We will need it for our project! The purpose of an emulator is to simulate a device
    and displays all its activity windowed on your computer. What can we do with it?
    We can prototype, develop, and test--all this without a hardware device. You can
    emulate phones, tablets, wearables, and TV devices. You can create your own device
    definitions, or you can use predefined emulators.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK带有能够运行我们开发的应用程序的**模拟器**。我们需要它来进行我们的项目！模拟器的目的是模拟设备并在计算机上显示其所有活动。我们可以用它做什么？我们可以进行原型设计、开发和测试——所有这些都不需要硬件设备。您可以模拟手机、平板电脑、可穿戴设备和电视设备。您可以创建自己的设备定义，或者您可以使用预定义的模拟器。
- en: The good thing about emulators is that they are fast. In many situations, it
    will take less time to run an application on an emulator instance than on a real
    hardware device.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器的好处是速度快。在许多情况下，运行应用程序的模拟器实例所需的时间比在真实硬件设备上运行要少。
- en: Working with the emulators is just as easy with a real hardware device. For
    gestures, you use your mouse, and for input, your keyboard.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟器与真实硬件设备一样容易。对于手势，您可以使用鼠标，对于输入，您可以使用键盘。
- en: Emulators can do anything a real phone does! You can easily send incoming phone
    calls and text messages! You can specify the location of the device, send fingerprint
    scans, adjust network speed and status, or even simulate battery properties. Emulators
    can have a virtual SD card and internal data storage, both of them you can use
    to send real files to that space.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器可以做任何真实手机可以做的事情！您可以轻松发送来电和短信！您可以指定设备的位置，发送指纹扫描，调整网络速度和状态，甚至模拟电池属性。模拟器可以有一个虚拟SD卡和内部数据存储，您可以使用它们来发送真实文件到该空间。
- en: '**Android Virtual Device** (**AVD**) configuration is used to define an emulator.
    Each AVD instance works as a completely independent device! For the purpose of
    creating and management of AVDs, we use the AVD Manager. An AVD definition holds
    a hardware profile, system image, storage area, skin, and other important properties.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android虚拟设备**（**AVD**）配置用于定义模拟器。每个AVD实例都作为一个完全独立的设备！为了创建和管理AVD，我们使用AVD Manager。AVD定义包含硬件配置文件、系统映像、存储区域、外观和其他重要属性。'
- en: 'Let''s play with it! To run the AVD Manager, do one of the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来玩一下！要运行AVD Manager，请执行以下操作之一：
- en: 'Select **Tools** | **Android** | **AVDManager** or click on the **AVDManager** icon
    in the toolbar:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**工具**|**Android**|**AVDManager**或单击工具栏中的**AVDManager**图标：
- en: '![](img/03be9bd5-d234-4dec-bd94-e61931a76689.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03be9bd5-d234-4dec-bd94-e61931a76689.png)'
- en: It displays all AVDs you've already defined. As you can see, we don't have any
    yet!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示您已经定义的所有AVD。正如您所看到的，我们还没有任何AVD！
- en: 'What can we do here? We can do the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里可以做什么？我们可以做以下事情：
- en: Create a new AVD
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的AVD
- en: Edit an existing AVD
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑现有的AVD
- en: Delete the existing AVD
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有的AVD
- en: Create hardware profiles
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建硬件配置文件
- en: Edit an existing hardware profile
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑现有的硬件配置文件
- en: Delete an existing hardware profile
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有的硬件配置文件
- en: Import/export definitions
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入/导出定义
- en: Start or stop the AVD
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动或停止AVD
- en: Clear data and reset the AVD
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除数据并重置AVD
- en: Access the AVD `.ini` and `.img` files on the filesystem
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问文件系统上的AVD`.ini`和`.img`文件
- en: View the AVD configuration details
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看AVD配置详细信息
- en: To obtain the AVD instance, you can either create a new AVD from the beginning
    or duplicate an existing AVD and modify it by need.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取AVD实例，您可以从头开始创建一个新的AVD，也可以复制现有的AVD并根据需要进行修改。
- en: Creating a new AVD instance
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的AVD实例
- en: 'From the **Your Virtual Devices** of the AVD Manager, click on Create Virtual Device
    (you can do the same as you run your app from within Android Studio by clicking
    on the Run icon, and then, in the Select Deployment Target dialog, choose Create New Emulator).
    Please refer to the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从AVD Manager的**您的虚拟设备**中，单击创建虚拟设备（您可以在Android Studio中运行应用程序时执行相同操作，方法是单击运行图标，然后在选择部署目标对话框中选择创建新模拟器）。请参考以下截图：
- en: '![](img/74eb1559-6335-4d0f-89f1-e02bf0ff0c05.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74eb1559-6335-4d0f-89f1-e02bf0ff0c05.png)'
- en: Select a hardware profile and then click on Next, as shown in the previous screenshot.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个硬件配置文件，然后单击下一步，如前面的截图所示。
- en: '![](img/97a46a76-95f7-4af6-b69d-326d7548f2d5.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97a46a76-95f7-4af6-b69d-326d7548f2d5.png)'
- en: 'If you notice the Download link next to the system image, you have to click
    on it. The download process starts, as you can see in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您注意到系统映像旁边的下载链接，则必须单击它。下载过程开始，如下屏幕截图所示：
- en: '![](img/66e46867-20b8-48ed-9789-36fbf3d490f5.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66e46867-20b8-48ed-9789-36fbf3d490f5.png)'
- en: We must note that the API level of the target device is very important! Your
    application can't run on a system image whose API level is less than the one required
    by your application. That attribute is specified in your Gradle configuration.
    We will deal with Gradle in detail later.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须注意目标设备的API级别非常重要！您的应用程序无法在其API级别低于应用程序所需级别的系统映像上运行。该属性在您的Gradle配置中指定。稍后我们将详细介绍Gradle。
- en: 'Finally, Verify Configuration appears:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，出现“验证配置”：
- en: '![](img/1ca71d03-a12e-4c21-981c-4ba2fe970635.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ca71d03-a12e-4c21-981c-4ba2fe970635.png)'
- en: Change the AVD properties if needed and then click on Finish to complete the
    wizard. The newly created AVD appears in the Your Virtual Devices list or the
    Select Deployment Target dialog, depending on where you accessed the wizard from.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如有需要，请更改AVD属性，然后单击“完成”以完成向导。新创建的AVD将显示在“您的虚拟设备”列表或“选择部署目标”对话框中，具体取决于您从何处访问向导。
- en: '![](img/3c7bf1a9-d7ed-4da8-81a4-141b0c6cd5bc.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c7bf1a9-d7ed-4da8-81a4-141b0c6cd5bc.png)'
- en: 'If you need to create a copy of the existing AVD, follow these instructions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要创建现有AVD的副本，请按照以下说明进行操作：
- en: Open AVD Manager, right-click on the AVD instance, and select Duplicate.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开AVD管理器，右键单击AVD实例，然后选择“复制”。
- en: Follow the wizard, and, after you modified what you needed, click on Finish.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照向导的指示，在您修改所需内容后，单击“完成”。
- en: A new modified version appears in our AVD list.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的AVD列表中出现了一个新的修改版本。
- en: 'We will demonstrate dealing with hardware profiles by creating a new one from
    scratch. To create a new hardware profile, follow these instructions. In Select
    Hardware, click on New Hardware Profile. Please refer to the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过从头开始创建一个新的硬件配置文件来演示处理硬件配置文件。要创建新的硬件配置文件，请按照以下说明进行操作。在“选择硬件”中，单击“新硬件配置文件”。请参考以下屏幕截图：
- en: '![](img/c34dc3f9-363f-43e9-b4f5-bb38980fa738.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c34dc3f9-363f-43e9-b4f5-bb38980fa738.png)'
- en: Configure Hardware Profile appears. Adjust the hardware profile properties as
    needed. Click on Finish. Your newly created hardware profile appears.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 配置硬件配置文件出现。根据需要调整硬件配置文件属性。单击“完成”。您新创建的硬件配置文件将显示。
- en: Duplicating an existing AVD and modifying it by need
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过复制现有的AVD并根据需要进行修改
- en: 'If you need a hardware profile based on an existing one, follow these instructions:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要基于现有硬件配置文件的硬件配置文件，请按照以下说明进行操作：
- en: Select an existing hardware profile and click on Clone Device.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择现有的硬件配置文件，然后单击“克隆设备”。
- en: Update the hardware profile properties by your needs. To complete the wizard,
    click on Finish.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的需求更新硬件配置文件属性。要完成向导，请单击“完成”。
- en: Your profile appears in the hardware profile list.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的配置文件将显示在硬件配置文件列表中。
- en: 'Let''s go back to the AVD list. Here, you can perform the following operations
    on any existing AVD:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到AVD列表。在这里，您可以对任何现有的AVD执行以下操作：
- en: Edit it by clicking on Edit
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击“编辑”进行编辑
- en: Delete by right-clicking and choosing Delete
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过右键单击并选择删除来删除
- en: Access the `.ini` and `.img` files on the disk by right-clicking on an AVD instance
    and choosing Show on Disk
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过右键单击AVD实例并选择在磁盘上显示来访问磁盘上的.ini和.img文件
- en: To view the AVD configuration details, right-click on an AVD instance and choose View Details
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看AVD配置详细信息，请右键单击AVD实例，然后选择“查看详细信息”
- en: 'Since we covered this, let''s go back to the hardware profile list. Here, we
    can do the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经涵盖了这一点，让我们回到硬件配置文件列表。在这里，我们可以执行以下操作：
- en: Edit a hardware profile by selecting it and choosing Edit Device
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择它并选择编辑设备来编辑硬件配置文件
- en: Delete a hardware profile by right-clicking on it and choosing Delete
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过右键单击并选择删除来删除硬件配置文件
- en: You can't edit or delete the predefined hardware profiles!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您无法编辑或删除预定义的硬件配置文件！
- en: 'Then, we can run or stop an emulator or clear its data as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以运行或停止模拟器，或者清除其数据，如下所示：
- en: To run an emulator that uses an AVD, double-click on the AVD or just choose
    Launch
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要运行使用AVD的模拟器，请双击AVD或只需选择“启动”
- en: To stop it, right-click on it and choose Stop
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键单击它并选择停止以停止它
- en: To clear the data for an emulator, and return it to the same state as when it
    was first defined, right-click on an AVD and choose Wipe Data
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要清除模拟器的数据，并将其返回到首次定义时的状态，请右键单击AVD并选择“擦除数据”
- en: We will continue our emulators' journey with the explanation of command-line
    features that you can use with `*-`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续介绍与`* -`一起使用的命令行功能，您可以使用这些功能。
- en: 'To start an emulator, use the emulator command. We will show you some basic
    command-line syntax to start a virtual device from a terminal:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动模拟器，请使用模拟器命令。我们将向您展示一些从终端启动虚拟设备的基本命令行语法：
- en: '[PRE0]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another command-line syntax is as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个命令行语法如下：
- en: '[PRE1]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s take a look at the following example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下示例：
- en: '[PRE2]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can specify startup options when you start the emulator; later, you can't
    set these options.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在启动模拟器时指定启动选项；稍后，您无法设置这些选项。
- en: 'If you need a list of available AVDs, use this command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要可用AVD的列表，请使用此命令：
- en: '[PRE3]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The result is a list of AVD names from the Android home directory. You can override
    the default home directory by setting the `ANDROID_SDK_HOME` environment variable.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是从Android主目录中列出AVD名称。您可以通过设置`ANDROID_SDK_HOME`环境变量来覆盖默认主目录。
- en: Stopping an emulator is simple--just close its window.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 停止模拟器很简单-只需关闭其窗口。
- en: It is important to note that we can run AVDs from Android Studio UI as well!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们也可以从Android Studio UI运行AVD！
- en: Android Debug Bridge
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android调试桥
- en: To access devices, you will use the `adb` command executed from the terminal.
    We will take a look into the common cases.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问设备，您将使用从终端执行的`adb`命令。我们将研究常见情况。
- en: 'Listing all devices:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 列出所有设备：
- en: '[PRE4]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Console output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出：
- en: '[PRE5]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Obtaining shell access to device:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 获取设备的shell访问：
- en: '[PRE6]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Accessing a specific device instance:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 访问特定设备实例：
- en: '[PRE7]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Where `-s` represents device source.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`-s`代表设备来源。
- en: 'Copying a file from and to a device:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从设备复制文件：
- en: '[PRE8]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Uninstalling an application:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载应用程序：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: One of the greatest features of `adb` is that you can access it through telnet.
    Use `telnet localhost 5554` to connect to your emulator device. Terminate your
    session using the `quit` or `exit` command.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`adb`最大的特点之一是你可以通过telnet访问它。使用`telnet localhost 5554`连接到你的模拟器设备。使用`quit`或`exit`命令终止你的会话。'
- en: 'Let''s play with `adb`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们玩玩`adb`：
- en: 'Connect to device:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到设备：
- en: '[PRE10]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Change the power level:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变电源等级：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or simulate a call:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或模拟一个电话：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Send an SMS:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送短信：
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Set geolocation:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置地理位置：
- en: '[PRE14]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With `adb`, you can also take a screenshot or record a video!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`adb`，你还可以拍摄屏幕截图或录制视频！
- en: Other important tools
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他重要工具
- en: We will cover some other tools you will need in everyday Android development.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍一些你在日常Android开发中需要的其他工具。
- en: 'Let''s start with the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下开始：
- en: '`adb dumpsys`: To get information about a system and running an application,
    use the `adb dumpsys` command. To get a memory status, execute the following command--`adb
    shell dumpsys meminfo <package.name>`.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adb dumpsys`：要获取系统和运行应用程序的信息，使用`adb dumpsys`命令。要获取内存状态，执行以下命令--`adb shell
    dumpsys meminfo <package.name>`。'
- en: 'Next important tool is as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要的工具如下：
- en: '`adb shell procrank`: The `adb shell procrank` lists all the applications for
    you in the order of their memory consumption. This command does not work on live
    devices; you connect only with emulators. For the same purpose, you can use--`adb
    shell dumpsys meminfo`.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adb shell procrank`：`adb shell procrank`按照它们的内存消耗顺序列出了所有的应用程序。这个命令在实时设备上不起作用；你只能连接模拟器。为了达到同样的目的，你可以使用--`adb
    shell dumpsys meminfo`。'
- en: For battery consumption, you can use--`adb shell dumpsys batterystats`--charged
    `<package-name>`.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于电池消耗，你可以使用--`adb shell dumpsys batterystats`--charged `<package-name>`。
- en: Next important tool is **Systrace**. To analyze performance of your application
    by capturing and displaying execution times, you will use this command.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个重要的工具是**Systrace**。为了分析你的应用程序的性能，通过捕获和显示执行时间，你将使用这个命令。
- en: When you have problems with application glitches, Systrace tool comes as a powerful
    ally!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到应用程序故障问题时，Systrace工具将成为一个强大的盟友！
- en: It does not work with Android SDK Tools less than 20! To use it, you must have
    Python installed and configured.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 它不适用于低于20的Android SDK工具！要使用它，你必须安装和配置Python。
- en: Let's try it!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试吧！
- en: 'To access it from UI, open Android Device Monitor in Android Studio and then
    choose Monitor:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要从UI访问它，打开Android Studio中的Android Device Monitor，然后选择Monitor：
- en: '![](img/4725d134-3af5-45c5-bbf9-3ededd23281a.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4725d134-3af5-45c5-bbf9-3ededd23281a.png)'
- en: 'Sometimes, it can be easier to access it from the terminal (command line):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，从终端（命令行）访问它可能更容易：
- en: The Systrace tool has different command-line options, depending on the Android
    version running on your device.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Systrace工具有不同的命令行选项，取决于你设备上运行的Android版本。
- en: 'Let''s take a look at some examples:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子：
- en: 'General usage:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一般用法：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Android 4.3 and up:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 4.3及更高版本：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Android 4.2 and lower options:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 4.2及更低版本的选项：
- en: '[PRE17]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The last important tool we want to present is `sdkmanager`. It allows you to
    view, install, update, and uninstall packages for the Android SDK. It is located
    in `android_sdk/tools/bin/`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要介绍的最后一个重要工具是`sdkmanager`。它允许你查看、安装、更新和卸载Android SDK的包。它位于`android_sdk/tools/bin/`中。
- en: 'Let''s take a look at some common examples of use:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些常见的使用示例：
- en: 'Listing installed and available packages:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 列出已安装和可用的包：
- en: '[PRE18]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Installing packages:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装包：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can send packages you got from `--list` command.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以发送从`--list`命令得到的包。
- en: 'Uninstalling:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载：
- en: '[PRE20]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Updating:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新：
- en: '[PRE21]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There are also some other tools you can use in Android, but we only showed the
    most important ones.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中还有一些其他工具可以使用，但我们只展示了最重要的工具。
- en: Initializing a Git repository
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化一个Git仓库
- en: We have installed Android Studio and introduced ourselves to some important
    SDK tools. We also learned how to deal with emulated devices that will run our
    code. It is time to start working on our project. We will develop a small application
    for notes and todos. This is a tool that everybody needs. We will give it a name--`Journaler`
    and it will be an application capable of creating notes and todos with reminders
    that will be synced to our backend.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装了Android Studio并介绍了一些重要的SDK工具。我们还学会了如何处理将运行我们的代码的模拟设备。现在是时候开始着手我们的项目了。我们将开发一个用于笔记和待办事项的小应用程序。这是每个人都需要的工具。我们将给它起一个名字--`Journaler`，它将是一个能够创建带有提醒的笔记和待办事项并与我们的后端同步的应用程序。
- en: First step in development is initializing a Git repository. Git will be our
    code versioning system. It is up to you to decide if you will use GitHub, BitBucket,
    or something else for a remote Git instance. Create your remote repository and
    keep its URL ready, along with your credentials. So, let's start!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 开发的第一步是初始化一个Git仓库。Git将是我们的代码版本控制系统。你可以决定是否使用GitHub、BitBucket或其他远程Git实例。创建你的远程仓库并准备好它的URL以及你的凭据。那么，让我们开始吧！
- en: 'Go into the directory containing the project:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 进入包含项目的目录：
- en: '[PRE22]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The console output will be something like this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出将会是这样的：
- en: '[PRE23]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We initialized the repo.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化了仓库。
- en: Let's add the first file--`vi notes.txt`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加第一个文件--`vi notes.txt`。
- en: Populate `notes.txt` with some content and save it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 填充`notes.txt`并保存一些内容。
- en: Execute `git add .` to add all of the relevant files.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`git add .`来添加所有相关文件。
- en: 'Then: `git commit -m "Journaler: First commit"`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '然后：`git commit -m "Journaler: First commit"`'
- en: 'The console output will be something like this:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出将会是这样的：
- en: '[PRE24]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you remember, you prepared your remote Git repository `url` with credentials.
    Copy `url` into a clipboard. Now, execute the following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你记得，你准备好了带有凭据的远程Git仓库`url`。将`url`复制到剪贴板中。现在，执行以下操作：
- en: '[PRE25]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This sets the new remote.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置新的远程。
- en: 'Then: `git remote -v`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后：`git remote -v`
- en: This verifies the new remote URL.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这将验证新的远程URL。
- en: 'Finally, push everything we have to remote: `git push -u origin master`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，将我们所有的东西推送到远程：`git push -u origin master`
- en: If you are asked for credentials, enter it and confirm by pressing *Enter*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要求输入凭据，请输入并按*Enter*确认。
- en: Creating an Android project
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android项目
- en: 'We initialized our code repository. It is time to create a project. Start Android
    Studio and choose the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化了我们的代码仓库。现在是创建项目的时候了。启动Android Studio并选择以下内容：
- en: Start a new Android Studio Project or File | New | New Project.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新的Android Studio项目或文件 | 新建 | 新项目。
- en: Create New Project and a window appears.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目，会出现一个窗口。
- en: 'Fill the application information:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 填写应用信息：
- en: '![](img/8a36da05-3057-4868-8470-33ea224f5028.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a36da05-3057-4868-8470-33ea224f5028.png)'
- en: Then, click on Next.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击下一步。
- en: 'Check the Phone and Tablet option, and then choose Android 5.0 as the minimum
    Android version as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选手机和平板选项，然后选择Android 5.0作为最低Android版本，如下所示：
- en: '![](img/45875cb2-148b-47a2-96d5-784235a8ebe0.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45875cb2-148b-47a2-96d5-784235a8ebe0.png)'
- en: Click on Next again.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击下一步。
- en: 'Choose Add No Activity and click on Finish, as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 选择添加无活动，然后点击完成，如下所示：
- en: '![](img/2ec3717d-dcb5-48af-a610-5181dee08b24.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ec3717d-dcb5-48af-a610-5181dee08b24.png)'
- en: Wait until your project is created.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 等待项目创建完成。
- en: 'You will notice a message about Unregistered VCS root detected. Click on add
    root or go to Preferences | Version Control | , and then select our Git repository
    from the list and the click on then + icon, as shown in the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到一个关于检测到未注册的VCS根的消息。点击添加根或转到首选项 | 版本控制 | ，然后从列表中选择我们的Git仓库，点击+图标，如下面的截图所示：
- en: '![](img/6c43b03b-7217-4fb7-928d-51febe52a8a8.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c43b03b-7217-4fb7-928d-51febe52a8a8.png)'
- en: To confirm everything, click on Apply and OK.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认一切，点击应用和确定。
- en: Before committing and pushing, update your `.gitignore` files. The purpose of
    the `.gitignore` file is to allow you to ignore files, such as editor backup files,
    build products, or local configuration overrides that you never want to commit
    into a repository. Without matching the `.gitignore` rules, these files will appear
    in the `untracked files` section of the Git status output.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交和推送之前，更新你的`.gitignore`文件。`.gitignore`文件的目的是允许你忽略文件，比如编辑器备份文件、构建产品或本地配置覆盖，你永远不想提交到仓库中。如果不符合`.gitignore`规则，这些文件将出现在Git状态输出的`未跟踪文件`部分中。
- en: 'Open `.gitignore` located in your project `root` directory and edit it. To
    access it, expand Project by clicking on Project on the left side of Android Studio,
    and then, from the drop-down menu, choose Project, as shown in the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于项目`root`目录的`.gitignore`并编辑它。要访问它，点击Android Studio左侧的项目，然后从下拉菜单中选择项目，如下面的截图所示：
- en: '![](img/15cfa9bb-76e5-4eaf-99d8-91f3661fc73d.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15cfa9bb-76e5-4eaf-99d8-91f3661fc73d.png)'
- en: 'Let''s add some lines:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些行：
- en: '[PRE26]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, edit `.gitignore`, which is located in the `app` module directory:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编辑位于`app`模块目录中的`.gitignore`：
- en: '[PRE27]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You can use this `.gitignore` configuration from the preceding. Now we can commit
    and push *cmd* + *9* on macOS or *ctrl* + *9* on Windows/Linux (shortcut for View
    | Tool Windows | Version Control). Expand unversioned files, select them, and
    right-click on Add to VCS.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用前面的`.gitignore`配置。现在我们可以提交和推送，在macOS上按*cmd* + *9*，在Windows/Linux上按*ctrl*
    + *9*（View | Tool Windows | Version Control的快捷键）。展开未版本化的文件，选择它们，右键单击添加到VCS。
- en: '![](img/e5585919-893d-4466-ba70-60a24ba7bd6e.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5585919-893d-4466-ba70-60a24ba7bd6e.png)'
- en: Press *Cmd* + *K* (or *Ctrl* + *K* on Windows/Linux), check all files, enter
    commit message, and, from the Commit drop-down menu, choose Commit and Push. If
    you get Line Separators Warning, choose Fix and Commit. The Push Commits window
    will appear. Check Push Tags and choose Current Branch, and then Push.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Cmd* + *K*（或Windows/Linux上的*Ctrl* + *K*），勾选所有文件，输入提交消息，然后从提交下拉菜单中选择提交和推送。如果出现换行符警告，选择修复并提交。推送提交窗口将出现。勾选推送标签，选择当前分支，然后推送。
- en: Setting up Gradle
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Gradle
- en: Gradle is a build system. You can build your Android application without one,
    but, in that case, you have to use several SDK tools by yourself. That is not
    simple! This is a part where you need a Gradle and Android Gradle plugin.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle是一个构建系统。你可以在没有它的情况下构建你的Android应用程序，但在那种情况下，你必须自己使用几个SDK工具。这并不简单！这是你需要Gradle和Android
    Gradle插件的部分。
- en: Gradle takes all the source files and processes them by tools we mentioned.
    Then, it packs everything into one compressed file with the `.apk` extension.
    APK can be uncompressed. If you rename it by changing its extension to `.zip`,
    you can extract the content.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle接收所有源文件并通过我们提到的工具处理它们。然后，它将所有内容打包成一个带有`.apk`扩展名的压缩文件。APK可以解压缩。如果你将它的扩展名改为`.zip`，你可以提取内容。
- en: Each build system uses its convention. The most important convention is about
    placing source code and assets in a proper directory with proper structure.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 每个构建系统都有自己的约定。最重要的约定是将源代码和资产放在具有适当结构的适当目录中。
- en: 'Gradle is a JVM-based build system, so that practically means that you can
    write your own script in Java, Groovy, Kotlin, and so on. Also, it''s a plugin-based
    system and is easy to extend. One good example of it is Google''s Android plugin.
    You probably noticed `build.gradle` files in your project. They are all written
    in Groovy, so any Groovy code you write will be executed. We will define our Gradle
    scripts to automate a building process. Let''s set up our building! Open `settings.gradle`
    and take a look at it:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle是基于JVM的构建系统，这意味着你可以用Java、Groovy、Kotlin等编写自己的脚本。此外，它是一个基于插件的系统，易于扩展。一个很好的例子是谷歌的Android插件。你可能在项目中注意到了`build.gradle`文件。它们都是用Groovy编写的，所以你写的任何Groovy代码都会被执行。我们将定义我们的Gradle脚本来自动化构建过程。让我们开始构建吧！打开`settings.gradle`并查看它：
- en: '[PRE28]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This directive tells Gradle that it will build a module named `App`. The `App`
    module is located in the `app` directory of our project.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令告诉Gradle它将构建一个名为`App`的模块。`App`模块位于我们项目的`app`目录中。
- en: 'Now open `build.gradle` from project `root` and add the following lines:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开项目`root`中的`build.gradle`并添加以下行：
- en: '[PRE29]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We defined that our build script will resolve its dependencies from JCenter
    and Maven Central repositories. The same repositories will be used to resolve
    project dependencies. Main dependencies are added to target each module we will
    have:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了我们的构建脚本将从JCenter和Maven Central仓库解析其依赖项。相同的仓库将用于解析项目依赖项。主要依赖项被添加到目标，以便针对我们将拥有的每个模块：
- en: Android Gradle plugin
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Gradle插件
- en: Kotlin Gradle plugin
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin Gradle插件
- en: 'After you updated the main `build.gradle` configuration, open `build.gradle`
    located in the `App module` directory and add the following lines:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新了主`build.gradle`配置之后，打开位于`App模块`目录中的`build.gradle`并添加以下行：
- en: '[PRE30]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The configurations we set enable Kotlin as a development language for our project
    and Gradle scripts as well. Then, it defines a minimal and target sdk version
    that an application requires. In our case, this is `19` as minimum and `26` as
    target. It is important to note that in the default configuration section, we
    set application ID and version parameters too. The dependencies section sets dependencies
    for Kotlin itself and some Android UI components that will be explained later.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置的配置使Kotlin成为项目和Gradle脚本的开发语言。然后，它定义了应用程序所需的最小和目标sdk版本。在我们的情况下，最小值是`19`，目标是`26`。重要的是要注意，在默认配置部分，我们还设置了应用程序ID和版本参数。依赖项部分为Kotlin本身和一些稍后将解释的Android
    UI组件设置了依赖项。
- en: Explaining directory structure
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释目录结构
- en: 'Android Studio contains everything you need to build an application. It contains
    source code and assets. All directories are created by the wizard we used to create
    our project. To see it, open the Project window on the left side of the IDE (click
    on View | ToolWindows | Project), as shown in the following screenshot:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio包含构建应用程序所需的一切。它包含源代码和资产。所有目录都是由我们用来创建项目的向导创建的。要查看它，请在IDE的左侧打开项目窗口（单击查看
    | 工具窗口 | 项目），如下截图所示：
- en: '![](img/b3847c62-65ac-49e5-b948-e99f4deaf4f8.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3847c62-65ac-49e5-b948-e99f4deaf4f8.png)'
- en: A project module represents a collection of source files, assets, and build
    settings that divide projects into discrete functionality parts. The minimal number
    of `modules` is one. There is no real limit on the maximal `modules` number your
    project can have. `Modules` can be built, tested, or debugged independently. As
    you saw, we defined the Journaler project with only one module named app.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '项目模块代表一组源文件、资产和构建设置，将项目分成离散的功能部分。`模块`的最小数量是一个。您的项目可以拥有的`模块`的最大数量没有实际限制。`模块`可以独立构建、测试或调试。正如您所看到的，我们定义了Journaler项目，只有一个名为app的模块。 '
- en: 'To add a new module, following these steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新模块，请按照以下步骤进行：
- en: Go to File | New | New Module.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 转到文件 | 新建 | 新建模块。
- en: '![](img/105d3754-d922-4893-8dc8-002cbfce41ea.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/105d3754-d922-4893-8dc8-002cbfce41ea.png)'
- en: 'It''s possible to create the following `modules`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建以下`模块`：
- en: Android Application Module represents a container for your application source
    code, resources, and settings. The default module name is app, like in our created
    example.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android应用程序模块代表应用程序源代码、资源和设置的容器。默认模块名称是app，就像我们创建的示例中一样。
- en: Phone & Tablet Module.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手机和平板电脑模块。
- en: Android Wear Module.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Wear模块。
- en: Glass Module.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玻璃模块。
- en: Android TV module.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android电视模块。
- en: '`Library` module represents a container for reusable code--a library. The module
    can be used as a dependency in other application modules or imported into other
    projects. When it''s built, the module has an AAR extension--Android Archive instead
    of having an APK extension.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Library`模块代表可重用代码的容器--一个库。该模块可以作为其他应用程序模块的依赖项使用，或者导入其他项目。构建时，该模块具有AAR扩展名--Android存档，而不是APK扩展名。'
- en: 'The Create New Module window offers the following options:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新模块窗口提供以下选项：
- en: '**Android Library**: All types are supported in an Android project. The build
    result of this library is an **Android Archiver** (**AAR**).'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android库**：在Android项目中支持所有类型。此库的构建结果是**Android存档**（**AAR**）。'
- en: '**Java Library**: Only supports pure Java. The build result of this library
    is a **Java Archiver** (**JAR**).'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java库**：仅支持纯Java。此库的构建结果是**Java存档**（**JAR**）。'
- en: '**Google Cloud Module**: This defines a container for the Google Cloud backend
    code.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Cloud模块**：定义了Google Cloud后端代码的容器。'
- en: 'It is important to understand that Gradle refers to `modules` as individual
    projects. If your application code depends on the code for the Android library
    called **Logger** then in **build.config**, you use must include the following
    directive:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，Gradle将`模块`称为单独的项目。如果您的应用程序代码依赖于名为**Logger**的Android库的代码，那么在**build.config**中，您必须包含以下指令：
- en: '[PRE31]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let's navigate through the project structure. The default view Android Studio
    uses to display your project files is Android view. It doesn't represent the actual
    file hierarchy on disk. It hides certain files or directories that are not often
    used.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览项目结构。Android Studio默认使用的视图来显示项目文件是Android视图。它不代表磁盘上的实际文件层次结构。它隐藏了一些不经常使用的文件或目录。
- en: 'Android view presents the following:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Android视图呈现如下内容：
- en: All the build-related configuration files
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有与构建相关的配置文件
- en: All manifest files
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有清单文件
- en: All other resource files in a single group
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他资源文件都在一个组中
- en: 'In each application, the module content is presented in these groups:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个应用程序中，模块内容分为以下组：
- en: Manifests and `AndroidManifest.xml` files.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单和`AndroidManifest.xml`文件。
- en: Java and Kotlin source code for application and tests.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序和测试的Java和Kotlin源代码。
- en: The `res` and Android UI resources.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res`和Android UI资源。'
- en: To see the real file structure of the project, choose Project view. To do this,
    click on Android view and, from the drop-down menu, choose Project.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看项目的实际文件结构，请选择项目视图。要执行此操作，请单击Android视图，然后从下拉菜单中选择项目。
- en: 'By doing this, you will see a lot more files and directories. The most important
    of them are as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，您将看到更多的文件和目录。其中最重要的是：
- en: '`module-name/`: This is the name of the module'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module-name/`：这是模块的名称'
- en: '`build/`: This holds build outputs'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build/`：这是构建输出的保存位置'
- en: '`libs/`: This holds private libraries'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libs/`：这保存私有库'
- en: '`src/`: This holds all code and resource files for the module organized in
    the following subdirectories:'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/`：这保存模块的所有代码和资源文件，组织在以下子目录中：'
- en: '`main`: This holds the `main` source set files--source code and resources shared
    by all build variants (we will explain build variants later)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`：这保存`main`源集文件——所有构建变体共享的源代码和资源（我们稍后会解释构建变体）'
- en: '`AndroidManifest.xml`: This defines the nature of our application and each
    of its components'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`：这定义了我们的应用程序及其各个组件的性质'
- en: '`java`: This holds the Java source code'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java`：这保存Java源代码'
- en: '`kotlin`: This holds the Kotlin source code'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kotlin`：这保存Kotlin源代码'
- en: '`jni`: This holds the native code using the **Java Native Interface** (**JNI**)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jni`：这保存使用**Java Native Interface**（**JNI**）的本机代码'
- en: '`gen`: This holds the Java files generated by Android Studio'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gen`：这保存Android Studio生成的Java文件'
- en: '`res`: This holds application resources, for example, **drawable** files, layout
    files, strings, and so on'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res`：这保存应用程序资源，例如**drawable**文件、布局文件、字符串等'
- en: '`assets`: This holds files that should be compiled into an `.apk` file with
    no modification'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets`：这保存应该编译成`.apk`文件的文件，不进行修改'
- en: '`test`: This holds the test source code'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：这保存测试源代码'
- en: '`build.gradle`: This is the module level build configuration'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.gradle`：这是模块级别的构建配置'
- en: '`build.gradle`: This is the project level build configuration'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.gradle`：这是项目级别的构建配置'
- en: 'Choose File | Project Structure to change settings for the project in the following
    screenshot:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 选择文件|项目结构以更改以下屏幕截图中项目的设置：
- en: '![](img/67d1bc33-5015-43da-b9aa-16218dd7e137.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67d1bc33-5015-43da-b9aa-16218dd7e137.png)'
- en: 'It contains the following sections:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含以下部分：
- en: 'SDK Location: This sets the location of the JDK, Android SDK, and Android NDK
    that your project uses'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDK位置：这设置项目使用的JDK、Android SDK和Android NDK的位置。
- en: 'Project: This sets Gradle and Android Gradle plugin versions'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目：这设置Gradle和Android Gradle插件版本
- en: 'Modules: This edits module-specific build configurations'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块：这编辑特定于模块的构建配置
- en: 'The Modules section is divided in the following tabs:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 模块部分分为以下选项卡：
- en: 'Properties: This sets the versions of the SDK and build tools for module building'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性：这设置模块构建所需的SDK和构建工具的版本
- en: 'Signing: This sets the certificate for APK signing'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签名：这设置APK签名的证书
- en: 'Flavors: This defines flavors for the module'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 口味：这为模块定义口味
- en: 'Build Types: This defines build types for the module'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建类型：这为模块定义构建类型
- en: 'Dependencies: This sets dependencies needed by the module'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项：这设置模块所需的依赖项
- en: 'Please refer to the following screenshot:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下屏幕截图：
- en: '![](img/c985a074-a164-4a44-b980-2619cd9fe97e.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c985a074-a164-4a44-b980-2619cd9fe97e.png)'
- en: Defining build types and flavors
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义构建类型和口味
- en: We are approaching an important phase of our project--defining build variants
    for our application. Build variant stands for a unique version of an Android application.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在接近项目的重要阶段——为我们的应用程序定义构建变体。构建变体代表Android应用程序的唯一版本。
- en: They are unique because they override some of the application attributes or
    resources.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是独特的，因为它们覆盖了一些应用程序属性或资源。
- en: Each build variant is configured per module level.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 每个构建变体都是在模块级别配置的。
- en: 'Let''s extend our `build.gradle`! Put the following code in the `android` section
    of the `build.gradle` file:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们扩展我们的`build.gradle`！将以下代码放入`build.gradle`文件的`android`部分：
- en: '[PRE32]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We defined the following `buildTypes` for our application--`debug`, `release`,
    `staging`, and `preproduction`.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的应用程序定义了以下`buildTypes`——`debug`、`release`、`staging`和`preproduction`。
- en: 'Product flavors are created in a similar way like `buildTypes`. You need to
    add them to `productFlavors` and configure the needed settings. The following
    code snippet demonstrates this:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 产品口味的创建方式与`buildTypes`类似。您需要将它们添加到`productFlavors`并配置所需的设置。以下代码片段演示了这一点：
- en: '[PRE33]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: After you create and configure your `productFlavors`, click on Sync Now in the
    notification bar.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和配置`productFlavors`后，单击通知栏中的立即同步。
- en: 'You need to wait a while for the process to be done. Names for Build Variants
    are formed by the `<product-flavor><Build-Type>` convention. Here are some examples:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要等待一段时间才能完成该过程。构建变体的名称是通过`<product-flavor><Build-Type>`约定形成的。以下是一些示例：
- en: '[PRE34]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You can change the build variant to the one that you want to build and run.
    Go to Build, select Build Variant, and select `completeDebug` from the drop-down
    menu.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将构建变体更改为要构建和运行的构建变体。转到Build，选择Build Variant，然后从下拉菜单中选择`completeDebug`。
- en: '![](img/c97ef034-fda4-4f99-82ef-bc807325851a.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c97ef034-fda4-4f99-82ef-bc807325851a.png)'
- en: The `Main/source` set is shared between all build variants in your application.
    If you need to create a new source set, you can do that for certain build types,
    product flavors, and their combinations.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main/source`集在您的应用程序的所有构建变体之间共享。如果您需要创建新的源集，可以为特定的构建类型、产品口味及其组合进行操作。'
- en: All source set files and directories must be organized in a specific way, similar
    to the `Main/Source` set. Kotlin class files that are specific to your *debug*
    build type must be located in `src/debug/kotlin/directory`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 所有源集文件和目录必须以特定方式组织，类似于`Main/Source`集。特定于您的*debug*构建类型的Kotlin类文件必须位于`src/debug/kotlin/directory`中。
- en: 'In order to learn how to organize your files, open the terminal window (View
    | ToolWindows | Terminal) and execute the following command line:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何组织您的文件，打开终端窗口（View | ToolWindows | Terminal）并执行以下命令行：
- en: '[PRE35]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Take a look at the output carefully. The report is understandable and self-explanatory.
    Android Studio doesn't create the `sourceSets` directories. It's a work that has
    to be done by you.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看输出。报告是可以理解和自解释的。Android Studio不会创建`sourceSets`目录。这是您必须完成的工作。
- en: 'If desired, you can change the location where Gradle is looking for a source
    set using the `sourceSets` block. Let''s update our build configuration. We will
    update the following expected source code paths:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用`sourceSets`块更改Gradle查找源集的位置。让我们更新我们的构建配置。我们将更新以下预期的源代码路径：
- en: '[PRE36]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Code and resources that you want packaged only with certain configurations,
    you can store in the `sourceSets` directories. Here are given examples for build
    with the `demoDebug` build variant; this build variant is a product of a `demo`
    product flavor and `debug` build type. In Gradle, the following priority is given
    to them:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望仅与某些配置一起打包的代码和资源，可以存储在`sourceSets`目录中。这里提供了使用`demoDebug`构建变体的示例；此构建变体是`demo`产品风味和`debug`构建类型的产物。在Gradle中，对它们给予以下优先级：
- en: '[PRE37]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is the priority order that Gradle uses during the build process and considers
    it when applying the following build rules:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Gradle在构建过程中使用的优先顺序，并在应用以下构建规则时考虑它：
- en: It compiles source code in the `java/` and `kotlin/` directories together
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将`java/`和`kotlin/`目录中的源代码一起编译
- en: It merges manifests together into a single manifest
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将清单合并到一个单一的清单中
- en: It merges files in the `values/` directories
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它合并了`values/`目录中的文件
- en: It merges resources in the `res/` and `asset/` directories
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它合并了`res/`和`asset/`目录中的资源
- en: The lowest priority is given to resources and manifests included with library
    module dependencies.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 资源和清单与库模块依赖项一起包含的优先级最低。
- en: Additional libraries
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加库
- en: 'We configured our build types and flavors, now we will need some third-party
    libraries. We will use and add support for Retrofit, OkHttp, and Gson. This is
    an explanation for each of them:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置了构建类型和风味，现在我们需要一些第三方库。我们将使用并添加对Retrofit、OkHttp和Gson的支持。以下是它们的说明：
- en: Retrofit is a type-safe HTTP client for Android and Java by Square, Inc. Retrofit
    is one of the most popular HTTP client library for Android as a result of its
    simplicity and its great performance compared to the others.
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Retrofit是Square, Inc.为Android和Java开发的一种类型安全的HTTP客户端。Retrofit是Android最受欢迎的HTTP客户端库之一，因为它与其他库相比，简单易用且性能出色。
- en: '`OkHttp` is an HTTP client that''s efficient by default--HTTP/2 support allows
    all requests to the same host to share a socket.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OkHttp`是一个默认情况下高效的HTTP客户端--HTTP/2支持允许所有请求与同一主机共享套接字。'
- en: Gson is a Java library that can be used to convert Java objects into their JSON
    representation. It can also be used to convert a JSON string to an equivalent
    Java object. Gson can work with arbitrary Java objects including preexisting objects
    that you do not have a source code for.
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gson是一个Java库，可用于将Java对象转换为其JSON表示。它还可以用于将JSON字符串转换为等效的Java对象。Gson可以处理包括您没有源代码的现有对象在内的任意Java对象。
- en: There are a few open source projects that can convert Java objects to JSON.
    Later in this book, we will add Kotson to provide Gson bindings for Kotlin.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些开源项目可以将Java对象转换为JSON。在本书的后面，我们将添加Kotson以为Kotlin提供Gson绑定。
- en: 'Let''s extend `build.gradle` with dependencies for Retrofit and Gson:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加Retrofit和Gson的依赖项来扩展`build.gradle`：
- en: '[PRE38]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: After you updated your Gradle configuration, sync it again when asked!
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新Gradle配置后，当要求时再次同步它！
- en: Getting familiar with Android Manifest
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉Android清单
- en: 'Every application must have an `AndroidManifest.xml` file and the file must
    have exactly that name. Its location is in its `root` directory, and, in each
    module, it contains essential information about your application to the Android
    system. The `manifest` file is responsible for defining the following:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序必须有一个`AndroidManifest.xml`文件，文件必须具有确切的名称。它的位置在其`root`目录中，在每个模块中，它包含有关应用程序的基本信息。`manifest`文件负责定义以下内容：
- en: Naming a package for the application
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序命名一个包
- en: Describing the components of the application--activities (screens), services,
    broadcast receivers (messages), and content providers (database access)
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述应用程序的组件--活动（屏幕）、服务、广播接收器（消息）和内容提供程序（数据库访问）
- en: Permissions that application must have in order to access protected parts of
    the Android API
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序必须具有的权限，以便访问Android API的受保护部分
- en: Permissions that other applications must have in order to interact with the
    application's components, such as content providers
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他应用程序必须具有的权限，以便与应用程序的组件进行交互，如内容提供程序
- en: 'The following code snippet shows the general structure of the `manifest` file
    and elements that it can contain:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了`manifest`文件的一般结构和它可以包含的元素：
- en: '[PRE39]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Main Application class
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主应用程序类
- en: Each Android application defines its main `Application` class. The `Application`
    class in Android is the base class within an Android application that contains
    all other components, such as `activities` and `services`. The `Application` class,
    or any subclass of the `Application` class, is instantiated before any other class
    when the process for your application/package is created.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Android应用程序都定义了其主要的`Application`类。Android中的`Application`类是Android应用程序中包含所有其他组件（如`activities`和`services`）的基类。`Application`类或`Application`类的任何子类在创建应用程序/包的进程时都会首先实例化。
- en: We will create an `Application` class for Journaler. Locate the main sources
    directory. Expand it, and if there is no Kotlin sources directory, create it.
    Then, create the `package com` and subpackage journaler; to do so, right-click
    on the Kotlin directory and choose **New** | **Package**. Once you've created
    the package structure, right-click on the **journaler** package and choose New
    | KotlinFile/Class. Name it `Journaler`. `Journaler.kt` is created.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为Journaler创建一个`Application`类。找到主要源目录。展开它，如果没有Kotlin源目录，请创建它。然后，创建`package
    com`和子包journaler；为此，请右键单击Kotlin目录，然后选择**New** | **Package**。创建包结构后，右键单击**journaler**包，然后选择New
    | KotlinFile/Class。命名为`Journaler`。创建了`Journaler.kt`。
- en: 'Each `Application` class must extend the Android Application class as shown
    in our example:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Application`类必须扩展Android Application类，就像我们的示例中所示的那样：
- en: '[PRE40]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'For now, our main `Application` class will provide us with static access to
    application context. What this context is will be explained later. However, Android
    will not use this class until it''s mentioned in manifest. Open the `app` module
    `android manifest` and add the following block of code:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的主`Application`类将为我们提供对应用程序上下文的静态访问。这个上下文将在以后解释。但是，Android在清单中提到它之前不会使用这个类。打开`app`模块`android清单`并添加以下代码块：
- en: '[PRE41]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With `android:name=".Journaler"`, we tell Android which class to use.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`android:name=".Journaler"`，我们告诉Android要使用哪个类。
- en: Your first screen
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的第一个屏幕
- en: 'We created an application with no screens. We will not waste time, we will
    create one! Create a new package named `activity` where all our screen classes
    will be defined, and create your first `Activity` class named `MainActivity.kt`.
    We will start with one simple class:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个没有屏幕的应用程序。我们不会浪费时间，我们会创建一个！创建一个名为`activity`的新包，其中将定义所有我们的屏幕类，并创建您的第一个`Activity`类，名为`MainActivity.kt`。我们将从一个简单的类开始：
- en: '[PRE42]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Soon, we will explain the meaning of all these lines. For now, it''s important
    to note that `setContentView(R.layout.activity_main)` assigns UI resource to our
    screen and `activity_main` is a name of the XML defining it. Since we don''t have
    it yet, we will create it. Locate `res` directory under the `main` directory.
    If there is no layout folder there, create one and then create a new layout named
    `activity_main` by right-clicking on `layout` directory and choosing the New |
    Layout resource file. Assign `activity_main` as its name and `LinearLayout` as
    its root element. The content of the file should be similar to this:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 很快，我们将解释所有这些行的含义。现在，重要的是要注意`setContentView(R.layout.activity_main)`将UI资源分配给我们的屏幕，`activity_main`是定义它的XML的名称。由于我们还没有它，我们将创建它。在`main`目录下找到`res`目录。如果那里没有布局文件夹，请创建一个，然后通过右键单击`布局`目录并选择新建|布局资源文件来创建一个名为`activity_main`的新布局。将`activity_main`指定为其名称，`LinearLayout`指定为其根元素。文件的内容应该类似于这样：
- en: '[PRE43]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'There is one more thing to do before we are ready to run our application: we
    must tell our manifest about this screen. Open the `main manifest` file and add
    the following piece of code:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们准备运行应用程序之前，还有一件事要做：我们必须告诉清单关于这个屏幕。打开`主清单`文件并添加以下代码：
- en: '[PRE44]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We will explain all these attributes soon; all you need to know for now is that
    your application is ready to run. However, before that, `commit and push` your
    work. You don't want to lose it!
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快会解释所有这些属性；现在你需要知道的是你的应用程序已经准备好运行了。但是，在此之前，`提交并推送`你的工作。你不想丢失它！
- en: Summary
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the basics of Android and gave glimpses of Kotlin.
    We configured a working environment and made the first screen of our application.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Android的基础知识，并展示了Kotlin的一瞥。我们配置了一个工作环境，并制作了我们应用程序的第一个屏幕。
- en: In the next chapter, we will go deeper into the matter of Android. You will
    learn how to build your application and customize different variants. We will
    also cover different ways of running the application.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Android的问题。您将学习如何构建您的应用程序并自定义不同的变体。我们还将介绍运行应用程序的不同方式。
