- en: Chapter 25. Advanced UI with Paging and Swiping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第25章。使用分页和滑动的高级UI
- en: '**Paging** is the act of moving from page to page, and, on Android, we do this
    by swiping a finger across the screen. The current page then transitions in a
    direction and speed to match the finger movement. It is a useful and practical
    way to navigate around an app, but perhaps even more than this, it is an extremely
    satisfying visual effect for the user. Also, like `RecyclerView`, we can selectively
    load just the data required for the current page and perhaps the data for the
    previous and following pages in anticipation.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**分页**是从一页到另一页的行为，在Android上，我们通过在屏幕上滑动手指来实现这一点。当前页面会根据手指的移动方向和速度进行过渡。这是一个有用和实用的应用程序导航方式，但也许更重要的是，它是一种极其令用户满意的视觉效果。此外，就像`RecyclerView`一样，我们可以选择性地仅加载当前页面所需的数据，也许还有前后页面的数据。'
- en: The Android API, as you would have come to expect, has a few solutions for achieving
    paging in a quite simple manner.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的那样，Android API有一些简单的解决方案来实现分页。
- en: 'In this chapter, we will learn to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Achieve paging and swiping with images like you might find in a photo gallery
    app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现像照片库应用程序中可能找到的图像一样的分页和滑动
- en: Implement paging and swiping with `Fragment`-based layouts, giving the potential
    to offer our users the ability to swipe their way through a selection of entire
    user interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于`Fragment`的布局实现分页和滑动，为用户提供通过滑动浏览整个用户界面的可能性
- en: First, let's look at a swiping example.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一个滑动的例子。
- en: The Angry Birds classic swipe menu
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 愤怒的小鸟经典滑动菜单
- en: 'Here, we can see the famous Angry Birds level selection menu showing swiping/paging
    in action:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到著名的愤怒的小鸟关卡选择菜单展示了滑动/分页的功能：
- en: '![The Angry Birds classic swipe menu](img/B12806_25_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![愤怒的小鸟经典滑动菜单](img/B12806_25_01.jpg)'
- en: 'Let''s build two paging apps: one with images, and one with `Fragment` instances.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建两个分页应用程序：一个带有图像，一个带有`Fragment`实例。
- en: Building an image gallery/slider app
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建图库/滑块应用程序
- en: Create a new project in Android Studio called `Image Pager`. Use the **Empty
    Activity** template and leave the remainder of the settings at their defaults.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为`Image Pager`的新项目。使用**空活动**模板，并将其余设置保持默认。
- en: 'These images are located in the download bundle in the `Chapter25/Image Pager/drawable`
    folder. The following diagram shows them in Windows Explorer:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像位于下载包中的`Chapter25/Image Pager/drawable`文件夹中。以下图表显示它们在Windows资源管理器中的位置：
- en: '![Building an image gallery/slider app](img/B12806_25_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![构建图库/滑块应用程序](img/B12806_25_02.jpg)'
- en: Add the images to the `drawable` folder in the project explorer or, of course,
    you could add more interesting images, perhaps some photos you have taken.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像添加到项目资源管理器中的`drawable`文件夹中，当然，您也可以添加更有趣的图像，也许是您拍摄的一些照片。
- en: Implementing the layout
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现布局
- en: For a simple image paging app, we use the `PagerAdapter` class. We can think
    of this as being like `RecyclerApater` but for images, as it will handle the display
    of an array of images in a `ViewPager` widget. This is much like `RecyclerAdapter`,
    which handles the display of the content of an `ArrayList` in a `RecyclerView`.
    All we need to do is override the appropriate functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的图像分页应用程序，我们使用`PagerAdapter`类。我们可以将其视为像`RecyclerApater`一样用于图像，因为它将处理在`ViewPager`小部件中显示图像数组。这与`RecyclerAdapter`非常相似，后者处理在`RecyclerView`中显示`ArrayList`的内容。我们只需要重写适当的函数。
- en: 'To implement an image gallery with `PagerAdapter`, we first need a `ViewPager`
    widget in our main layout. So, you can see precisely what is required; here is
    the actual XML code for `activity_main.xml`. Edit `layout_main.xml` to look exactly
    like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`PagerAdapter`实现图像库，我们首先需要在主布局中添加一个`ViewPager`小部件。因此，您可以清楚地看到所需的内容；以下是`activity_main.xml`的实际XML代码。编辑`layout_main.xml`使其看起来完全像这样：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The slightly unusually named class, `androidx.ViewPager.widget.ViewPager`, is
    the class that makes this functionality available in Android versions that were
    released prior to `ViewPager`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 略微不寻常命名的类`androidx.ViewPager.widget.ViewPager`是在发布`ViewPager`之前的Android版本中提供此功能的类。
- en: Next, a bit like where we needed a layout to represent a list item, we need
    a layout to represent an item, in this case an image, in our `ViewPager` widget.
    Create a new layout file in the usual way, and call it `pager_item.xml`. It will
    have a single `ImageView` with an `id` property of `imageView`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，就像我们需要一个布局来表示列表项一样，我们需要一个布局来表示`ViewPager`小部件中的项目，这种情况下是一个图像。以通常的方式创建一个新的布局文件，并将其命名为`pager_item.xml`。它将包含一个带有`id`属性为`imageView`的`ImageView`。
- en: 'Use the visual designer to achieve this, or copy the following XML into `pager_item.xml`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可视化设计工具来实现这一点，或者将以下XML复制到`pager_item.xml`中：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, we can make a start on our `PagerAdapter` class.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始编写我们的`PagerAdapter`类。
- en: Coding the PagerAdapter class
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写PagerAdapter类
- en: 'Next, we need to inherit from `PagerAdapter` to handle images. Create a new
    class called `ImagePagerAdapter` and make it inherit from `PagerAdapter`. This
    is what the code should look like at this point:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要继承自`PagerAdapter`来处理图像。创建一个名为`ImagePagerAdapter`的新类，并使其继承自`PagerAdapter`。此时代码应该如下所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add the following imports to the top of the `ImagePagerAdapter` class. We normally
    rely on using the shortcut *Alt* + *Enter* to add imports. We are doing things
    slightly differently this time because there are some very similarly named classes
    in the Android API that will not suit our objectives.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下导入添加到`ImagePagerAdapter`类的顶部。通常我们依靠使用快捷键*Alt* + *Enter*来添加导入。这次我们做法略有不同，因为Android
    API中有一些非常相似的类，它们不适合我们的目标。
- en: 'Add the following imports to the `ImagePagerAdapter` class:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下导入添加到`ImagePagerAdapter`类中：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, add a constructor to the class to get a `Context` object and an array
    of `Int` (that refers to the image resource IDs) from `MainActivity` when the
    instance is created:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在类中添加一个构造函数，以便在创建实例时从`MainActivity`获取`Context`对象和一个`Int`数组（指向图像资源ID）：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we must override the required functions of `PagerAdapter`. Inside the
    body of the `ImagePagerAdapter` class, add the overridden `getCount` function,
    which simply returns the number of image IDs in the array. This function is used
    internally by the class:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须重写`PagerAdapter`的必需函数。在`ImagePagerAdapter`类的主体内，添加重写的`getCount`函数，它简单地返回数组中图像ID的数量。该函数是该类内部使用的：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we must override the `isViewFromObject` function, which just returns a
    `Boolean`, depending on whether the current `View` is the same or associated with
    the current `Object` that was passed in as a parameter. Again, this is a function
    that is used internally by the class. Immediately after the previous code, add
    this overridden function:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须重写`isViewFromObject`函数，它根据当前`View`是否与作为参数传入的当前`Object`相同或关联来返回`Boolean`。再次强调，这是该类内部使用的函数。在上一个代码之后，添加以下重写函数：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we must override the `instantiateItem` function, and this is where we do
    most of the work that concerns us. First, we declare a new `ImageView` object,
    and then we initialize a `LayoutInflater`. Next, we use `LayoutInflater` to declare
    and initialize a new `View` from our `pager_item.xml` layout file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须重写`instantiateItem`函数，这是我们大部分关注的工作所在。首先，我们声明一个新的`ImageView`对象，然后初始化一个`LayoutInflater`。接下来，我们使用`LayoutInflater`从我们的`pager_item.xml`布局文件中声明和初始化一个新的`View`。
- en: After this, we get a reference to the `ImageView` inside the `pager_item.xml`
    layout. We can now add the appropriate image as the content of the `ImageView`
    widget based on the `position` parameter of the `instantiateItem` function and
    the appropriate ID from the `images` array.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们获取`pager_item.xml`布局内的`ImageView`的引用。现在，根据`instantiateItem`函数的`position`参数和`images`数组的适当ID，我们可以将适当的图像添加为`ImageView`小部件的内容。
- en: Finally, we add the layout to the `PagerAdapter` with `addView` and return from
    the function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`addView`将布局添加到`PagerAdapter`中，并从函数返回。
- en: 'Now, add the code we have just discussed:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加我们刚刚讨论的代码：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The last function we must override is `destroyItem`, which the class can call
    when it needs to remove an appropriate item based on the value of the `position`
    parameter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须重写的最后一个函数是`destroyItem`，当类需要根据`position`参数的值移除适当的项时，可以调用该函数。
- en: 'Add the `destroyItem` function after the previous code and before the closing
    curly brace of the `ImagePagerAdapter` class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码之后，在`ImagePagerAdapter`类的闭合大括号之前添加`destroyItem`函数：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we saw when coding `ImagePagerAdapter`, there is very little to this. It
    is just a case of properly implementing the overridden functions that the `ImagePagerAdapter`
    class uses to help make things work smoothly behind the scenes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在编写`ImagePagerAdapter`时所看到的，这里几乎没有什么。只是正确实现`ImagePagerAdapter`类用于在幕后顺利运行的重写函数。
- en: Now, we can code the `MainActivity` class, which will use the `ImagePagerAdapter`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以编写`MainActivity`类，它将使用`ImagePagerAdapter`。
- en: Coding the MainActivity class
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写MainActivity类
- en: 'Finally, we can code our `MainActivity` class. As with the `ImagePagerAdapter`
    class, for clarity, add the following import statements manually to the `MainActivity`
    class before the class declaration, as shown in the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以编写我们的`MainActivity`类。与`ImagePagerAdapter`类一样，为了清晰起见，在类声明之前手动添加以下导入语句，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: All the code goes in the `onCreate` function. We initialize our `Int` array
    with each of the images that we added to the `drawable-xhdpi` folder.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都放在`onCreate`函数中。我们使用`drawable-xhdpi`文件夹中添加的每个图像来初始化我们的`Int`数组。
- en: We initialize a `ViewPager` widget in the usual way with the `findViewByID`
    function. We also initialize our `ImagePagerAdapter` instance by passing in a
    reference of `MainActivity` and the `images` array, as required by the constructor
    that we coded previously. Finally, we bind the adapter to the pager with `setAdapter`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以通常的方式使用`findViewByID`函数初始化`ViewPager`小部件。我们还通过传递`MainActivity`的引用和`images`数组来初始化我们的`ImagePagerAdapter`实例，这是我们之前编写的构造函数所要求的。最后，我们使用`setAdapter`将适配器绑定到pager。
- en: 'Code the `onCreate` function to look just like the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将`onCreate`函数编码为与以下代码完全相同的样式：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, we are ready to run the app.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备运行应用程序。
- en: Running the gallery app
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行画廊应用程序
- en: 'Here, we can see the first image from our `int` array:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们`int`数组中的第一个图像：
- en: '![Running the gallery app](img/B12806_25_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![运行画廊应用程序](img/B12806_25_03.jpg)'
- en: 'Swipe to the left and right a little to see the pleasing manner in which the
    images transition smoothly:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 向左和向右滑动一点，看到图像平稳过渡的愉悦方式：
- en: '![Running the gallery app](img/B12806_25_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![运行画廊应用程序](img/B12806_25_04.jpg)'
- en: Now, we will build an app with almost identical functionality, except that each
    page in the pager will be a `Fragment` instance, which could have any of the functionality
    a regular `Fragment` can have, because they are regular `Fragments`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将构建一个具有几乎相同功能的应用程序，只是pager中的每个页面将是`Fragment`实例，它可以具有常规`Fragment`可以具有的任何功能，因为它们是常规`Fragments`。
- en: Before we implement this, let's learn some more Kotlin, which will help us achieve
    this.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实现这之前，让我们学习一些有助于我们实现这一目标的Kotlin知识。
- en: Kotlin companion objects
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin伴生对象
- en: A companion object is similar in syntax to an inner class because we declare
    it inside a regular class, but note we refer to it as an object, not a class.
    This implies it is in itself an instance as opposed to a blueprint for an instance.
    This is exactly what it is. When we declare a companion object inside a class,
    its properties and functions are shared by all instances of the regular class.
    It is perfect when we want a bunch of regular classes to share one set of related
    data. We will see a companion object in action in the next app, and also in the
    Age database app in the penultimate chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 伴生对象在语法上类似于内部类，因为我们将其声明在一个常规类内部，但请注意我们将其称为对象，而不是类。这意味着它本身是一个实例，而不是一个实例的蓝图。这正是它的作用。当我们在一个类内部声明一个伴生对象时，它的属性和函数将被所有常规类的实例共享。当我们想要一组常规类共享一组相关数据时，它非常完美。我们将在下一个应用程序中看到伴生对象的作用，也将在倒数第二章的Age数据库应用程序中看到它的作用。
- en: Building a Fragment Pager/slider app
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个Fragment Pager/滑块应用程序
- en: We can put whole `Fragment` instances as pages in a `PagerAdapter`. This is
    quite powerful because, as we know, a `Fragment` instance can have a large amount
    of functionality – even a fully-fledged UI.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将整个`Fragment`实例作为`PagerAdapter`中的页面。这是非常强大的，因为我们知道，`Fragment`实例可以具有大量的功能
    - 甚至是一个完整的UI。
- en: To keep the code short and straightforward, we will add a single `TextView`
    to each `Fragment` layout, just to demonstrate that the pager is working. When
    we see how easy it is to get a reference to the `TextView,` however, it should
    be obvious how we could easily add any layout we have learned so far and then
    let the user interact with it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持代码简洁和直观，我们将在每个`Fragment`布局中添加一个`TextView`，以演示滑块的工作原理。然而，当我们看到如何轻松地获取对`TextView`的引用时，我们应该很容易地添加我们迄今为止学到的任何布局，然后让用户与之交互。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the next project, we will see yet another way to display multiple `Fragment`
    instances, `NavigationView`, and we will actually implement multiple coded `Fragment`
    instances.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，我们将看到另一种显示多个`Fragment`实例的方法，`NavigationView`，并且我们将实际实现多个编码的`Fragment`实例。
- en: The first thing we will do is build the content for the slider. In this case,
    of course, the content is an instance of `Fragment`. We will build one simple
    class called `SimpleFragment`, and one simple layout called `fragment_layout`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先构建滑块的内容。在这种情况下，内容当然是`Fragment`的一个实例。我们将构建一个简单的名为`SimpleFragment`的类，和一个简单的名为`fragment_layout`的布局。
- en: You might think this implies that each slide will be identical in appearance,
    but we will use the ID that was passed in by the `FragmentManager` at instantiation
    time as the text for the `TextView`. This way, when we flip/swipe through the
    `Fragment` instances, it will be clear that each is a new distinct instance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为这意味着每个幻灯片在外观上都是相同的，但我们将使用在实例化时由`FragmentManager`传入的ID作为`TextView`的文本。这样，当我们翻转/滑动`Fragment`实例时，每个实例都是一个新的不同实例。
- en: When we see the code that loads `Fragment` instances from a list, it will be
    easy to design completely different `Fragment` classes, as we have done before,
    and use these different classes for some or all of the slides. Each of these classes
    could, of course, also use a different layout as well.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看到从列表中加载`Fragment`实例的代码时，很容易设计完全不同的`Fragment`类，就像我们以前做过的那样，并且可以为一些或所有幻灯片使用这些不同的类。当然，这些类中的每一个也可以使用不同的布局。
- en: Coding the SimpleFragment class
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写SimpleFragment类
- en: As with the Image Pager app, it is not exactly straightforward which classes
    need to be auto-imported by Android Studio. We use the classes that we do because
    they are all compatible with each other, and it is possible that if you let Android
    Studio suggest which classes to import, it will get it "wrong." The project files
    are located in the `Chapter25/Fragment Pager` folder.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与Image Pager应用程序一样，很难确定Android Studio需要自动导入哪些类。我们使用这些类是因为它们彼此兼容，如果让Android Studio建议导入哪些类，可能会出现错误。项目文件位于`Chapter25/Fragment
    Pager`文件夹中。
- en: Create a new project called `Fragment Slider` using the **Empty Activity** template,
    and leave all the settings at the defaults.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**空活动**模板创建一个名为`Fragment Slider`的新项目，并将所有设置保持默认设置。
- en: 'Now, create a new class called `SimpleFragment`, inherit from `Fragment`, and
    add the `import` statements, as shown in the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`SimpleFragment`的新类，继承自`Fragment`，并添加`import`语句，如下所示的代码：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We must add two functions, the first of which is `newInstance` and will be contained
    inside a companion object, which we will call from `MainActivity` to set up and
    return a reference to the `Fragment`. The following code creates a new instance
    of the class, but it also puts a `String` into the `Bundle` object that will eventually
    be read from the `onCreateView` function. The `String` that is added to the `Bundle`,
    which is passed in as the one and only parameter of this `newInstance` function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须添加两个函数，第一个是`newInstance`，将包含在一个伴生对象中，我们将从`MainActivity`中调用它来设置并返回对`Fragment`的引用。以下代码创建了一个类的新实例，但它还将一个`String`放入`Bundle`对象中，最终将从`onCreateView`函数中读取。添加到`Bundle`中的`String`作为`newInstance`函数的唯一参数传入。
- en: 'Add the `newInstance` function inside the companion object to the `SimpleFragment`
    class, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SimpleFragment`类的伴生对象中添加`newInstance`函数，如下所示：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The final function for our `SimpleFragment` class needs to override `onCreateView`
    where, as usual, we will get a reference to the layout that's passed in and load
    up our `fragment_layout` XML file as the layout.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`SimpleFragment`类的最终函数需要覆盖`onCreateView`，在这里，我们将像往常一样获取传入的布局的引用，并将我们的`fragment_layout`
    XML文件加载为布局。
- en: Then, the first line of code unpacks the `String` from the `Bundle` using `getArguments.getString`
    and the `MESSAGE` identifier of the key-value pair.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，第一行代码使用`getArguments.getString`和键值对的`MESSAGE`标识符从`Bundle`中解包`String`。
- en: 'Add the `onCreateView` function we have just discussed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 添加我们刚刚讨论过的`onCreateView`函数：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's also make a super-simple layout for the `Fragment`, which will, of course,
    contain the `TextView` we have just been using.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也为`Fragment`制作一个超级简单的布局，当然，它将包含我们刚刚使用的`TextView`。
- en: The fragment_layout
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: fragment_layout
- en: The `fragment_layout` is the simplest layout we have ever made. Right-click
    on the `layout` folder and choose **New** | **Resource layout file**. Name the
    file `fragment_layout`, and left-click **OK**. Now, add a single `TextView` and
    set its `id` property to `textView`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`fragment_layout`是我们制作过的最简单的布局。右键单击`layout`文件夹，选择**新建** | **资源布局文件**。将文件命名为`fragment_layout`，然后单击**确定**。现在，添加一个单独的`TextView`并将其`id`属性设置为`textView`。'
- en: We can now code the `MainActivity` class, which handles the `FragmentPager`
    and brings our `SimpleFragment` instances to life.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写`MainActivity`类，它处理`FragmentPager`并使我们的`SimpleFragment`实例活起来。
- en: Coding the MainActivity class
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写MainActivity类
- en: This class consists of two main parts; first, the changes we will make to the
    overridden `onCreate` function, and second, the implementation of an inner class
    and its overridden functions of `FragmentPagerAdapter`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类由两个主要部分组成；首先，我们将对重写的`onCreate`函数进行更改，其次，我们将实现一个内部类及其重写的`FragmentPagerAdapter`函数。
- en: 'First, add the following imports:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加以下导入：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, in the `onCreate` function, we create an `ArrayList` for `Fragment` instances,
    and then create and add three instances of `SimpleFragment,` passing in a numerical
    identifier to be packed away in the `Bundle`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`onCreate`函数中，我们创建一个`Fragment`实例的`ArrayList`，然后创建并添加三个`SimpleFragment`实例，传入一个数字标识符以打包到`Bundle`中。
- en: We then initialize `SimpleFragmentPagerAdapter` (which we will code soon), passing
    in our list of fragments.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们初始化`SimpleFragmentPagerAdapter`（我们很快将编写），传入我们的片段列表。
- en: We get a reference to the `ViewPager` with `findViewByID` and bind our adapter
    to it with `setAdapter`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`findViewByID`获取对`ViewPager`的引用，并使用`setAdapter`将适配器绑定到它。
- en: 'Add this code to the `onCreate` function of `MainActivity`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`MainActivity`的`onCreate`函数中：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, we will add our `inner` class, `SimpleFragmentPagerAdapter`. All we do
    is add an `ArrayList` for `Fragment` instances in the constructor that initializes
    it with the passed-in list.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加我们的`inner`类`SimpleFragmentPagerAdapter`。我们所做的就是在构造函数中添加一个`Fragment`实例的`ArrayList`，并用传入的列表进行初始化。
- en: 'Then, we override the `getItem` and `getCount` functions, which are used internally,
    in the same way we did in the last project. Add the following `inner` class that
    we have just discussed to the `MainActivity` class:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们重写`getItem`和`getCount`函数，这些函数在内部使用，方式与上一个项目中所做的方式相同。将我们刚讨论过的以下`inner`类添加到`MainActivity`类中：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The last thing we need to do is add the layout for `MainActivity`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是为`MainActivity`添加布局。
- en: The activity_main layout
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: activity_main布局
- en: Implement the `activity_main` layout by copying the following code. It contains
    a single widget, a `ViewPager`,and it is important that it is from the correct
    hierarchy so that it is compatible with the other classes that we use in this
    project.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过复制以下代码来实现`activity_main`布局。它包含一个小部件，一个`ViewPager`，很重要的是它来自正确的层次结构，以便与我们在此项目中使用的其他类兼容。
- en: 'Amend the code in the `layout_main.xml` file that we have just discussed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 修改我们刚刚讨论的`layout_main.xml`文件中的代码：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's see our fragment slider in action.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的片段滑块在运行中的样子。
- en: Running the fragment slider app
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行片段滑块应用程序
- en: 'Run the app, and then you can swipe your way, left or right, through the fragments
    in the slider. The following screenshot shows the visual effect produced by `FragmentPagerAdapter`
    when the user tries to swipe beyond the final `Fragment` in the `List`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，然后您可以通过滑动左或右来浏览滑块中的片段。以下截图显示了当用户尝试在`List`中的最后一个`Fragment`之外滑动时，`FragmentPagerAdapter`产生的视觉效果：
- en: '![Running the fragment slider app](img/B12806_25_05.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![运行片段滑块应用程序](img/B12806_25_05.jpg)'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw that we can use pagers for simple image galleries or
    for swiping through complex pages of an entire UI, although we demonstrated this
    by means of a very simple `TextView`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到我们可以使用分页器来制作简单的图像库，或者通过整个UI的复杂页面进行滑动，尽管我们通过一个非常简单的`TextView`来演示这一点。
- en: In the next chapter, we will look at another really cool UI element that is
    used in many of the latest Android apps, probably because it looks great and is
    a real pleasure, as well as extremely practical to use. Let's take a look at `NavigationView`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到另一个非常酷的UI元素，它在许多最新的Android应用程序中使用，可能是因为它看起来很棒，而且非常实用。让我们来看看`NavigationView`。
