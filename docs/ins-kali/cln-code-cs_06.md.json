["```cs\ninstall-package mstest.testframework\ninstall-package mstest.testadapter\ninstall-package microsoft.net.tests.sdk\n```", "```cs\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace CH05_MSTestUnitTesting.Tests\n{\n    [TestClass]\n    public class UnitTest1\n    {\n        [TestMethod]\n        public void TestMethod1()\n        {\n        }\n    }\n}\n```", "```cs\nprivate static void WriteSeparatorLine()\n{\n    Debug.WriteLine(\"--------------------------------------------------\");\n}\n```", "```cs\n[AssemblyInitialize]\npublic static void AssemblyInit(TestContext context)\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Optional: AssemblyInitialize\");\n    Debug.WriteLine(\"Executes once before the test run.\");\n}\n```", "```cs\n[ClassInitialize]\npublic static void TestFixtureSetup(TestContext context)\n{\n    WriteSeparatorLine();\n    Console.WriteLine(\"Optional: ClassInitialize\");\n    Console.WriteLine(\"Executes once for the test class.\");\n}\n```", "```cs\n[TestInitialize]\npublic void Setup()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Optional: TestInitialize\");\n    Debug.WriteLine(\"Runs before each test.\");\n}\n```", "```cs\n[AssemblyCleanup]\npublic static void AssemblyCleanup()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Optional: AssemblyCleanup\");\n    Debug.WriteLine(\"Executes once after the test run.\");\n}\n```", "```cs\n[ClassCleanup]\npublic static void TestFixtureTearDown()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Optional: ClassCleanup\");\n    Debug.WriteLine(\"Runs once after all tests in the class have been \n     executed.\");\n    Debug.WriteLine(\"Not guaranteed that it executes instantly after all \n     tests the class have executed.\");\n}\n```", "```cs\n[TestCleanup]\npublic void TearDown()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Optional: TestCleanup\");\n    Debug.WriteLine(\"Runs after each test.\");\n    Assert.Fail();\n}\n```", "```cs\n[TestMethod]\npublic void TestMethod1()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Required: TestMethod\");\n    Debug.WriteLine(\"A test method to be run by the test runner.\");\n    Debug.WriteLine(\"This method will appear in the test list.\");\n    Assert.IsTrue(true);\n}\n```", "```cs\npublic class Tests\n{\n    [SetUp]\n    public void Setup()\n    {\n    }\n\n    [Test]\n    public void Test1()\n    {\n        Assert.Pass();\n    }\n}\n```", "```cs\nusing System;\nusing System.Diagnostics;\nusing NUnit.Framework;\n\nnamespace CH06_NUnitUnitTesting.Tests\n{\n    [TestFixture]\n    public class Tests : IDisposable\n    {\n        public TestClass()\n        {\n            WriteSeparatorLine();\n            Debug.WriteLine(\"Constructor\");\n        }\n\n        public void Dispose()\n        {\n            WriteSeparatorLine();\n            Debug.WriteLine(\"Dispose\"); \n        } \n    }\n}\n```", "```cs\nprivate static void WriteSeparatorLine()\n{\n Debug.WriteLine(\"--------------------------------------------------\");\n}\n```", "```cs\n[OneTimeSetUp]\npublic void OneTimeSetup()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"OneTimeSetUp\");\n    Debug.WriteLine(\"This method is run once before any tests in this \n     class are run.\");\n}\n```", "```cs\n[OneTimeTearDown]\npublic void OneTimeTearDown()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"OneTimeTearDown\");\n    Debug.WriteLine(\"This method is run once after all tests in this \n    class have been run.\");\n    Debug.WriteLine(\"This method runs even when an exception occurs.\");\n}\n```", "```cs\n[SetUp]\npublic void Setup()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Setup\");\n    Debug.WriteLine(\"This method is run before each test method is run.\");\n}\n```", "```cs\n[TearDown]\npublic void Teardown()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Teardown\");\n    Debug.WriteLine(\"This method is run after each test method \n     has been run.\");\n    Debug.WriteLine(\"This method runs even when an exception occurs.\");\n}\n```", "```cs\n  [Test]\n  [Order(1)]\n  public void Test2()\n  {\n      WriteSeparatorLine();\n      Debug.WriteLine(\"Test:Test2\");\n      Debug.WriteLine(\"Order: 1\");\n      Assert.Inconclusive(\"Test 2 is inconclusive.\");\n  }\n```", "```cs\n[Test]\n[Order(0)]\npublic void Test1()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Test:Test1\");\n    Debug.WriteLine(\"Order: 0\");\n    Assert.Pass(\"Test 1 passed with flying colours.\");\n}\n```", "```cs\n[Test]\n[Order(2)]\npublic void Test3()\n{\n    WriteSeparatorLine();\n    Debug.WriteLine(\"Test:Test3\");\n    Debug.WriteLine(\"Order: 2\");\n    Assert.Fail(\"Test 1 failed dismally.\");\n}\n```", "```cs\nnamespace CH06_Moq\n{\n    public class Bar\n    {\n        public virtual Baz Baz { get; set; }\n        public virtual bool Submit() { return false; }\n    }\n}\n```", "```cs\nnamespace CH06_Moq\n{\n    public class Baz\n    {\n        public virtual string Name { get; set; }\n    }\n}\n```", "```cs\nnamespace CH06_Moq\n{\n    public interface IFoo\n    {\n        Bar Bar { get; set; }\n        string Name { get; set; }\n        int Value { get; set; }\n        bool DoSomething(string value);\n        bool DoSomething(int number, string value);\n        string DoSomethingStringy(string value);\n        bool TryParse(string value, out string outputValue);\n        bool Submit(ref Bar bar);\n        int GetCount();\n        bool Add(int value);\n    }\n}\n```", "```cs\nusing Moq;\nusing NUnit.Framework;\nusing System;\n\nnamespace CH06_Moq\n{\n    [TestFixture]\n    public class UnitTests\n    {\n    }\n}\n```", "```cs\npublic bool AssertThrows<TException>(\n    Action action,\n    Func<TException, bool> exceptionCondition = null\n) where TException : Exception\n    {\n        try\n        {\n            action();\n        }\n        catch (TException ex)\n        {\n            if (exceptionCondition != null)\n            {\n                return exceptionCondition(ex);\n            }\n            return true;\n        }\n        catch\n        {\n            return false;\n        }\n        return false;\n    }\n```", "```cs\n[Test]\npublic void DoSomethingReturnsTrue()\n{\n    var mock = new Mock<IFoo>();\n    mock.Setup(foo => foo.DoSomething(\"ping\")).Returns(true);\n    Assert.IsTrue(mock.Object.DoSomething(\"ping\"));\n}\n```", "```cs\n[Test]\npublic void DoSomethingReturnsFalse()\n{\n    var mock = new Mock<IFoo>();\n    mock.Setup(foo => foo.DoSomething(\"tracert\")).Returns(false);\n    Assert.IsFalse(mock.Object.DoSomething(\"tracert\"));\n}\n```", "```cs\n[Test]\npublic void OutArguments()\n{\n    var mock = new Mock<IFoo>();\n    var outString = \"ack\";\n    mock.Setup(foo => foo.TryParse(\"ping\", out outString)).Returns(true);\n    Assert.AreEqual(\"ack\", outString);\n    Assert.IsTrue(mock.Object.TryParse(\"ping\", out outString));\n}\n```", "```cs\n[Test]\npublic void RefArguments()\n{\n    var instance = new Bar();\n    var mock = new Mock<IFoo>();\n    mock.Setup(foo => foo.Submit(ref instance)).Returns(true);\n    Assert.AreEqual(true, mock.Object.Submit(ref instance));\n}\n```", "```cs\n[Test]\npublic void AccessInvocationArguments()\n{\n    var mock = new Mock<IFoo>();\n    mock.Setup(foo => foo.DoSomethingStringy(It.IsAny<string>()))\n        .Returns((string s) => s.ToLower());\n    Assert.AreEqual(\"i like oranges!\", mock.Object.DoSomethingStringy(\"I LIKE ORANGES!\"));\n}\n```", "```cs\n[Test]\npublic void ThrowingWhenInvokedWithSpecificParameters()\n{\n    var mock = new Mock<IFoo>();\n    mock.Setup(foo => foo.DoSomething(\"reset\"))\n        .Throws<InvalidOperationException>();\n    mock.Setup(foo => foo.DoSomething(\"\"))\n        .Throws(new ArgumentException(\"command\"));\n    Assert.IsTrue(\n        AssertThrows<InvalidOperationException>(\n            () => mock.Object.DoSomething(\"reset\")\n        )\n    );\n    Assert.IsTrue(\n        AssertThrows<ArgumentException>(\n            () => mock.Object.DoSomething(\"\")\n        )\n    );\n    Assert.Throws(\n        Is.TypeOf<ArgumentException>()\n          .And.Message.EqualTo(\"command\"),\n          () => mock.Object.DoSomething(\"\")\n    );\n }\n```", "```cs\nFeature: Calculator\n  In order to avoid silly mistakes\n  As a math idiot\n  I want to be told the sum of two numbers\n\n@mytag\nScenario: Add two numbers\n  Given I have entered 50 into the calculator\n  And I have entered 70 into the calculator\n  When I press add\n  Then the result should be 120 on the screen\n```", "```cs\nusing TechTalk.SpecFlow;\n\nnamespace CH06_SpecFlow\n{\n    [Binding]\n    public class CalculatorSteps\n    {\n        [Given(@\"I have entered (.*) into the calculator\")]\n        public void GivenIHaveEnteredIntoTheCalculator(int p0)\n        {\n            ScenarioContext.Current.Pending();\n        }\n\n        [When(@\"I press add\")]\n        public void WhenIPressAdd()\n        {\n            ScenarioContext.Current.Pending();\n        }\n\n        [Then(@\"the result should be (.*) on the screen\")]\n        public void ThenTheResultShouldBeOnTheScreen(int p0)\n        {\n            ScenarioContext.Current.Pending();\n        }\n    }\n}\n```", "```cs\nprivate Calculator _calculator = new Calculator();\n```", "```cs\npublic int FirstNumber { get; set; }\npublic int SecondNumber { get; set; }\n```", "```cs\n[Given(@\"I have entered (.*) into the calculator\")]\npublic void GivenIHaveEnteredIntoTheCalculator(int number)\n{\n    calculator.FirstNumber = number;\n}\n```", "```cs\npublic void GivenIHaveAlsoEnteredIntoTheCalculator(int number)\n{\n    calculator.SecondNumber = number;\n}\n```", "```cs\npublic int Add()\n{\n    return FirstNumber + SecondNumber;\n}\n```", "```cs\n[When(@\"I press add\")]\npublic void WhenIPressAdd()\n{\n    _result = _calculator.Add();\n}\n```", "```cs\n[Then(@\"the result should be (.*) on the screen\")]\npublic void ThenTheResultShouldBeOnTheScreen(int expectedResult)\n{\n    Assert.AreEqual(expectedResult, _result);\n}\n```", "```cs\nusing NUnit.Framework;\n\nnamespace CH06_FailPassRefactor\n{\n    [TestFixture]\n    public class UnitTests\n    {\n        // The PseudoCode.\n        // [1] Call a method to log an exception.\n        // [2] Build up the text to log including \n        // all inner exceptions.\n        // [3] Write the text to a file with a timestamp.\n    }\n}\n```", "```cs\n// [1] Call a method to log an exception.\n[Test]\npublic void LogException()\n{\n    var logger = new Logger();\n    var logFileName = logger.Log(new ArgumentException(\"Argument cannot be null\"));\n    Assert.Pass();\n}\n```", "```cs\nprivate Exception GetException()\n{\n    return new Exception(\n        \"Exception: Main exception.\",\n        new Exception(\n            \"Exception: Inner Exception.\",\n            new Exception(\"Exception: Inner Exception Inner Exception\")\n        )\n    );\n}\n```", "```cs\n[Test]\npublic void CheckFileExists()\n{\n    var logger = new Logger();\n    var logFile = logger.Log(GetException());\n    FileAssert.Exists(logFile);\n}\n```", "```cs\nprivate StringBuilder _stringBuilder;\n\npublic string Log(Exception ex)\n{\n    _stringBuilder = new StringBuilder();\n    return SaveLog();\n}\n\nprivate string SaveLog()\n{\n    var fileName = $\"LogFile{DateTime.UtcNow.GetHashCode()}.txt\";\n    var dir = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\n    var file = $\"{dir}\\\\{fileName}\";\n    return file;\n}\n```", "```cs\n[Test]\npublic void ContainsMessage()\n{\n    var logger = new Logger();\n    var logFile = logger.Log(GetException());\n    var msg = File.ReadAllText(logFile);\n    Assert.IsTrue(msg.Contains(\"Exception: Inner Exception Inner Exception\"));\n}\n```", "```cs\nprivate void BuildExceptionMessage(Exception ex, bool isInnerException)\n{\n    if (isInnerException)\n        _stringBuilder.Append(\"Inner Exception: \").AppendLine(ex.Message);\n    else\n        _stringBuilder.Append(\"Exception: \").AppendLine(ex.Message);\n    if (ex.InnerException != null)\n       BuildExceptionMessage(ex.InnerException, true);\n}\n```", "```cs\npublic string Log(Exception ex)\n{\n    _stringBuilder = new StringBuilder();\n    _stringBuilder.AppendLine(\"-----------------------\n      -----------------\");\n    BuildExceptionMessage(ex, false);\n    _stringBuilder.AppendLine(\"-----------------------\n      -----------------\");\n    return SaveLog();\n}\n```", "```cs\npublic string ExceptionMessage => _stringBuilder.ToString();\n\npublic void BuildExceptionMessage(Exception ex, bool isInnerException)\n{\n    if (isInnerException)\n    {\n        _stringBuilder.Append(\"Inner Exception: \").AppendLine(ex.Message);\n    }\n    else\n    {\n        _stringBuilder.AppendLine(\"--------------------------------------------------------------\");\n        _stringBuilder.Append(\"Exception: \").AppendLine(ex.Message);\n    }\n    if (ex.InnerException != null)\n        BuildExceptionMessage(ex.InnerException, true);\n    else\n        _stringBuilder.AppendLine(\"--------------------------------------------------------------\");\n}\n```", "```cs\npublic string GetHashedTextFileName(string name, SpecialFolder folder)\n{\n    var fileName = $\"{name}-{DateTime.UtcNow.GetHashCode()}.txt\";\n    var dir = Environment.GetFolderPath(folder);\n    return $\"{dir}\\\\{fileName}\";\n}\n```", "```cs\n        private Text _text;\n\n        public string Log(Exception ex)\n        {\n            BuildMessage(ex);\n            return SaveLog();\n        }\n\n        private void BuildMessage(Exception ex)\n        {\n            _text = new Text();\n            _text.BuildExceptionMessage(ex, false);\n        }\n\n        private string SaveLog()\n        {\n            var filename = _text.GetHashedTextFileName(\"Log\", \n              Environment.SpecialFolder.MyDocuments);\n            File.WriteAllText(filename, _text.ExceptionMessage);\n            return filename;\n        }\n```"]