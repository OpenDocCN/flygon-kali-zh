- en: Chapter 7. Working with Shaders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用着色器
- en: Every game's success depends largely on its look and feel. This directly means
    that the game must have an eye-catching graphical display. It is not always possible
    to provide maximum quality graphical assets due to space and heap restrictions.
    So, there has to be a way to create or improvise the graphical assets at runtime
    for display. This necessity gave birth to the concept of shaders.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每个游戏的成功在很大程度上取决于其外观和感觉。这直接意味着游戏必须具有引人注目的图形显示。由于空间和堆限制，通常无法提供最高质量的图形资产。因此，必须有一种方法在运行时创建或改进图形资产以供显示。这种必要性催生了着色器的概念。
- en: Shaders can operate on any visual element and can tweak every pixel of drawable
    elements before rendering. Mostly, shaders are optimized for a specific graphics
    processor. However, nowadays, shaders can be written to support multiple processors
    on multiple platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器可以操作任何可视元素，并在渲染之前调整可绘制元素的每个像素。大多数情况下，着色器针对特定的图形处理器进行了优化。然而，如今，着色器可以编写以支持多个平台上的多个处理器。
- en: Android accommodates the option to work with shaders in the Android framework
    itself. Additionally, OpenGL shaders can also be used and customized with the
    help of the Android NDK. There are many occasions where exquisite graphical quality
    is delivered with the help of shaders without excellent raw art assets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Android在Android框架本身中提供了使用着色器的选项。此外，还可以使用OpenGL着色器，并借助Android NDK进行自定义。有许多场合，借助着色器可以在没有优秀原始艺术资产的情况下提供精美的图形质量。
- en: 'We will have a discussion about shaders in this chapter from the point of view
    of Android game development through the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Android游戏开发的角度讨论着色器，涵盖以下主题：
- en: Introduction to shaders
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器介绍
- en: How shaders work
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器的工作原理
- en: Types of shaders
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器的类型
- en: Android library shaders
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android库着色器
- en: Writing a custom shader
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自定义着色器
- en: Shaders through OpenGL
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过OpenGL的着色器
- en: Use of shaders in games
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中的着色器使用
- en: Shaders and game performance
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器和游戏性能
- en: Introduction to shaders
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 着色器介绍
- en: Many developers develop games on Android, but do not possess much knowledge
    about shaders. In most cases, developers do not need to work with shaders, or
    there are some pre-defined shaders inside the game development framework or engines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员在Android上开发游戏，但对着色器了解不多。在大多数情况下，开发人员不需要使用着色器，或者在游戏开发框架或引擎中有一些预定义的着色器。
- en: In 1988, the animation studio Pixar introduced the modern concept of shaders.
    However, GPUs were not capable of handling shaders at that point of time. OpenGL
    and Direct3D are the first two graphic libraries to support shaders. GPU started
    supporting shaders through pixel shading at the 2D level. Soon, it was enhanced
    to support vertex shaders. Nowadays, geometry shaders are also supported by OpenGL
    3.2 and Direct3D 10 libraries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 1988年，动画工作室Pixar引入了现代着色器概念。然而，当时的GPU无法处理着色器。OpenGL和Direct3D是支持着色器的第一批图形库。GPU开始通过2D像素着色支持着色器。很快，它得到了增强，以支持顶点着色器。如今，OpenGL
    3.2和Direct3D 10库也支持几何着色器。
- en: Let's now dive a bit deeper into shaders to understand their definition, necessity,
    and scope for Android games.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们深入了解着色器的定义、必要性和在Android游戏中的范围。
- en: What is a shader?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是着色器？
- en: In simple words, a shader is an instruction set to manipulate the visual display
    of the input graphic assets.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，着色器是一组指令，用于操纵输入图形资产的视觉显示。
- en: Let's elaborate the definition a bit. All the instructions are basically done
    through programming. That's the reason the concept of a shader exists only in
    computer graphics. Shaders are able to perform a computation based on the instruction
    and input asset to produce more efficient output-displayable assets.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微详细解释一下定义。所有指令基本上都是通过编程完成的。这就是为什么着色器的概念只存在于计算机图形中的原因。着色器能够根据指令和输入资产执行计算，以产生更有效的输出可显示资产。
- en: 'Typical shaders can process either a vertex or a pixel. Pixel shaders can compute
    on the color, depth, and alpha properties of an asset. Vertex shaders can compute
    the position, color, co-ordinates, depth, illuminations, and so on of a vertex.
    Thus, shaders can be primarily divided into two categories depending on the operational
    base type:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的着色器可以处理顶点或像素。像素着色器可以计算资产的颜色、深度和alpha属性。顶点着色器可以计算顶点的位置、颜色、坐标、深度、光照等。因此，着色器可以根据操作基本类型主要分为两类：
- en: 2D shaders
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D着色器
- en: 3D shaders
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D着色器
- en: Necessity of shaders
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 着色器的必要性
- en: In the normal practice of game development, Android developers do not bother
    about shaders. But the necessity of shaders is inevitable. Initially, for small-scale
    games, art assets are used without improvement. Any modification to the assets
    is managed by the old process of updating the art asset itself.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏开发的正常实践中，Android开发人员不太关心着色器。但是，着色器的必要性是不可避免的。最初，对于小规模游戏，艺术资产是未经改进的。对资产的任何修改都是通过更新艺术资产本身的旧流程来管理的。
- en: Shaders can minimize this extra time-consuming effort. The same asset can be
    manipulated to create different objects on screen. For example, you can blur out
    the object as it goes out of focus, change the color of the sprites during gameplay
    to indicate different teams or players, create masks of art assets, and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器可以最小化这种额外耗时的工作。同一资产可以被操纵以在屏幕上创建不同的对象。例如，您可以在对象失焦时使其模糊，改变游戏过程中精灵的颜色以表示不同的团队或玩家，创建艺术资产的蒙版等等。
- en: 'Shaders have the following benefits:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器具有以下好处：
- en: When different shaders are applied to the same art asset, it produces different
    assets, depending on your requirements at runtime. Thus, the shader can save extra
    art-creation time.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当不同的着色器应用于相同的艺术资产时，根据运行时的要求，会产生不同的资产。因此，着色器可以节省额外的艺术创作时间。
- en: One-time integration of drawable objects in the game can lead to a different
    visual experience through different shaders.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中一次性集成可绘制对象可以通过不同的着色器产生不同的视觉体验。
- en: As the art assets are minimized, using shaders can reduce the game build size.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于艺术资产被最小化，使用着色器可以减少游戏构建大小。
- en: There will be more visual difference with the same set of assets.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的资产集会有更多的视觉差异。
- en: Animation can be created by shaders with simple art by manipulating the visual
    content repeatedly.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过着色器可以通过简单的艺术重复操纵视觉内容来创建动画。
- en: Shaders are useful for creating visual effects during runtime.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器在运行时创建视觉效果很有用。
- en: 'However, using shaders may lead to some negative consequences:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用着色器可能会导致一些负面后果：
- en: Using shaders will increase the processing time due to the manipulation of the
    visual assets during runtime
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用着色器会增加处理时间，因为在运行时操纵视觉资产
- en: Unoptimized use of shaders may lead to more heap memory consumption as various
    intermediate instances will be stored in it
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未经优化地使用着色器可能导致更多的堆内存消耗，因为其中将存储各种中间实例
- en: Sometimes, shaders are responsible for the distortion of objects while processing
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，着色器在处理时负责对象的扭曲
- en: Art assets become vulnerable to quality loss using shaders
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用着色器使艺术资产容易受到质量损失
- en: Only the first two are actual direct consequences of using shaders. The rest
    of the problems can occur only if the developer uses a badly written shader or
    faulty shader. Therefore, it is extremely necessary to choose the perfect shader
    for a specific task.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只有前两种是使用着色器的实际直接后果。其余的问题只有在开发人员使用编写不好的着色器或有故障的着色器时才会发生。因此，选择特定任务的完美着色器是非常必要的。
- en: Sometimes, the shader process takes a long time, resulting in poor FPS output.
    A few old GPUs do not support all kinds of shaders. Therefore, the developer should
    check and confirm the hardware platform on which the shader is to perform.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，着色器处理需要很长时间，导致FPS输出不佳。一些旧的GPU不支持所有类型的着色器。因此，开发人员应检查和确认着色器要执行的硬件平台。
- en: Scope of shaders
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 着色器的范围
- en: Shaders can be used in a variety of sectors related to computer graphics, such
    as image processing, photography, digital animation, video/computer/digital games,
    and so on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器可以用于与计算机图形相关的各种领域，如图像处理、摄影、数字动画、视频/电脑/数字游戏等。
- en: The gaming sector is one of the largest communities that uses shaders. The Android
    platform is no exception. Android game developers use shaders on a large scale
    in both 3D and 2D games.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏行业是使用着色器的最大社区之一。安卓平台也不例外。安卓游戏开发人员在3D和2D游戏中大规模使用着色器。
- en: Frankly speaking, 2D games do not have much scope for shaders. Only a pixel
    shader can manipulate the color, opacity, saturation, and hue of a pixel. This
    is useful when the same raw assets are used for different visibility.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，2D游戏对着色器的范围不大。只有像素着色器可以操纵像素的颜色、不透明度、饱和度和色调。当相同的原始资产用于不同的可见性时，这是很有用的。
- en: For example, a 2D cricket game has many teams with different outfits to distinguish
    between them. The developer creates all the sprite animation assets in one design
    and applies shaders to manipulate color differently for different teams. Thus,
    the output sprites have different visibility and are recognized easily by the
    player.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个2D板球游戏有许多队伍，他们穿着不同的服装以区分它们。开发人员将所有精灵动画资产设计成一个设计，并应用着色器以不同方式操纵颜色以区分不同的队伍。因此，输出的精灵具有不同的可见性，并且玩家可以轻松识别它们。
- en: How shaders work
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 着色器的工作原理
- en: 'We have already discussed that shaders process either vertices or pixels. So,
    the basic working principle is to change or manipulate data at runtime:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过着色器处理顶点或像素。因此，基本的工作原理是在运行时更改或操纵数据：
- en: '![How shaders work](img/B05069_07_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![着色器的工作原理](img/B05069_07_01.jpg)'
- en: A shader process is a specific set of instructions to process vertices or fragments.
    Different shader programs can be written for various types of processing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器过程是一组特定的指令，用于处理顶点或片段。可以为各种类型的处理编写不同的着色器程序。
- en: A vertex shader is used to change the shape of the model; it can also change
    the surface-formation system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点着色器用于改变模型的形状；它还可以改变表面形成系统。
- en: Pixel/fragment shaders can change the pixel color value along with opacity.
    Pixel data can be merged, modified, or replaced by a shader program to form a
    new digital image.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 像素/片段着色器可以改变像素颜色值以及不透明度。像素数据可以通过着色器程序合并、修改或替换，以形成新的数字图像。
- en: Types of shaders
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 着色器的类型
- en: 'There are many shaders used in the gaming industry. They are categorized on
    the basis of their behavior and features. Some of the shaders are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏行业中使用了许多着色器。它们根据其行为和特性进行分类。以下是一些着色器：
- en: Pixel shaders
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像素着色器
- en: Vertex shaders
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶点着色器
- en: Geometry shaders
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几何着色器
- en: Tessellation shaders
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镶嵌着色器
- en: Let's have a detailed look at these types.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些类型。
- en: Pixel shaders
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 像素着色器
- en: Pixel shaders are 2D shaders that work on textures or digital images. Pixel
    shaders process colors and other attributes of a single pixel. Each single pixel
    is called a fragment. This is the reason pixel shaders are often called fragment
    shaders.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 像素着色器是在纹理或数字图像上工作的2D着色器。像素着色器处理单个像素的颜色和其他属性。每个单个像素称为片段。这就是为什么像素着色器经常被称为片段着色器的原因。
- en: Vertex shaders
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶点着色器
- en: A vertex shader mainly operates on the vertices of a mesh or model. Every mesh
    of a model is made up of multiple vertices. A vertex shader can only be applied
    to 3D models. So, a vertex shader is a type of 3D shader.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点着色器主要作用于网格或模型的顶点。每个模型的网格由多个顶点组成。顶点着色器只能应用于3D模型。因此，顶点着色器是一种3D着色器。
- en: Geometry shaders
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 几何着色器
- en: Geometry shaders are used to create new primitive graphic elements. After applying
    a vertex shader in order to execute a rendering pipeline, geometry shaders are
    used to create points, lines, and triangles to form a surface.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 几何着色器用于创建新的基本图形元素。在应用顶点着色器以执行渲染管线后，几何着色器用于创建点、线和三角形以形成表面。
- en: Tessellation shaders
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 镶嵌着色器
- en: 'This is a typical 3D shader used to simplify and improve 3D mesh during tessellation.
    It is subdivided into two shaders:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的3D着色器，用于简化和改进镶嵌期间的3D网格。它分为两个着色器：
- en: Hull shaders or tessellation control shaders
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hull着色器或镶嵌控制着色器
- en: Domain shaders or tessellation evolution shaders
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域着色器或镶嵌进化着色器
- en: These two shaders are used together to reduce mesh bandwidth.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个着色器一起使用以减少网格带宽。
- en: Tessellation shaders have the power to improve 3D models in such a way that
    the drawable vertex count is reduced significantly. Thus, rendering becomes faster.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 镶嵌着色器有能力以显著减少可绘制顶点数的方式改进3D模型。因此，渲染变得更快。
- en: Android library shaders
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android库着色器
- en: 'Android provides the shader option in its framework in the `android.graphics`
    package. A few well-known and widely used shaders are also in the Android library.
    Some of them are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Android在`android.graphics`包中的框架中提供了着色器选项。一些知名和广泛使用的着色器也在Android库中。其中一些如下：
- en: '`BitmapShader`: This can be used to draw a bitmap in the texture format. It
    also supports tiling or mirroring of the bitmap. It is very useful for creating
    terrain with tiling.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BitmapShader`：这可以用于以纹理格式绘制位图。它还支持位图的平铺或镜像。它非常适用于创建具有平铺的地形。'
- en: '`ComposeShader`: This is used to merge two shaders. So, it is very useful for
    masking or merging colors for two different shaders.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ComposeShader`：这用于合并两个着色器。因此，它非常适用于掩模或合并两种不同着色器的颜色。'
- en: '`LinearGradient`: This is used to create a gradient along with the given line
    segment with a defined color set.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearGradient`：这用于沿着给定的线段创建渐变，并带有定义的颜色集。'
- en: '`RadialGradient`: This is used to create a gradient along with the given circle
    segment with a defined color set. A radial origin and radius are provided to create
    the gradient.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RadialGradient`：这用于创建沿着给定圆弧段的渐变，并带有定义的颜色集。提供了径向原点和半径来创建渐变。'
- en: '`SweepGradient`: This is used to create a sweep gradient color around a point
    with the given radius.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SweepGradient`：这用于在给定半径周围创建扫描渐变颜色。'
- en: 'Here is an example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is what it looks like:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的样子：
- en: '![Android library shaders](img/B05069_07_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Android库着色器](img/B05069_07_02.jpg)'
- en: These options are really good for creating different objects with different
    styles of the same primitive object.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项非常适合使用不同的样式创建不同对象的相同原始对象。
- en: Writing custom shaders
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义着色器
- en: A developer has the option to write a customized shader as per their requirements.
    Android provides the `android.graphics.Shader` class. It is easy to create your
    own shader class using the primitive shaders provided.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以根据自己的需求编写自定义着色器。Android提供了`android.graphics.Shader`类。使用提供的原始着色器很容易创建自己的着色器类。
- en: 'The custom shader may not include only one shader. It can be a combination
    of various shaders. For example, consider masking an image with a circular view
    port with a motion-touch event:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义着色器可能不仅包括一个着色器。它可以是各种着色器的组合。例如，考虑使用运动触摸事件在圆形视口中遮罩图像：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example is one of the most commonly used shader styles in picture-based
    games. You can also implement such shaders to create hidden object games.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是图片游戏中最常用的着色器样式之一。您也可以实现这样的着色器来创建隐藏物体游戏。
- en: Another use case is highlighting a specific object on the screen. The same viewable
    circle can be used to show only the highlighted object. In this case, color can
    be semitransparent to show a dull background.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用例是突出显示屏幕上的特定对象。同样的可视圆可以用来只显示突出的对象。在这种情况下，颜色可以是半透明的，以显示暗淡的背景。
- en: Shaders through OpenGL
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过OpenGL的着色器
- en: 'In Android, OpenGL supports implementing shaders for Android 3D games. OpenGL
    ES 2.0 is the supporting platform in Android for shaders. It has two functional
    segments while manually creating the shader:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，OpenGL支持为Android 3D游戏实现着色器。OpenGL ES 2.0是Android上支持着色器的平台。在手动创建着色器时，它有两个功能段：
- en: Shader
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器
- en: Program
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序
- en: The shader is converted into intermediate code to support the program to run
    on GPU. In the compiling stage, the shaders are converted. This is the reason
    why shaders need to be recompiled before the program execution.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器被转换成中间代码以支持程序在GPU上运行。在编译阶段，着色器被转换。这就是为什么着色器在程序执行之前需要重新编译的原因。
- en: We will work with `GLSurfaceView` of the `android.opengl` package in our example.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将使用`android.opengl`包的`GLSurfaceView`。
- en: For 3D games, an Android developer can use this package to play with shaders
    on the Android SDK. This package provides the API to create and use an OpenGL
    shader with Java.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于3D游戏，Android开发人员可以使用这个包在Android SDK上玩转着色器。这个包提供了使用Java创建和使用OpenGL着色器的API。
- en: 'We will use `GLSurfaceView` instead of the normal Android `View` or `SurfaceView`.
    The implementation will look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`GLSurfaceView`而不是普通的Android`View`或`SurfaceView`。实现将如下所示：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need to create a renderer for the view to draw objects through OpenGL:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为视图创建一个渲染器，通过OpenGL绘制对象：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The vertex shader code (`String vs_SolidColor`) has two parameters that it needs.
    The `uMVPMatrix` parameter is of the type `mat4`, which holds in the transformation
    matrix that can be used to translate the position. The `uMVPMatrix` parameter
    is a uniform matrix. The `vPosition` parameter is of type `vec4`, which holds
    the positions of vertex.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 顶点着色器代码（`String vs_SolidColor`）有两个需要的参数。`uMVPMatrix`参数是`mat4`类型，它保存了可以用来平移位置的变换矩阵。`uMVPMatrix`参数是一个统一矩阵。`vPosition`参数是`vec4`类型，它保存了顶点的位置。
- en: This system can be applied for a triangular surface.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统可以应用于三角形表面。
- en: Use of shaders in games
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏中使用着色器
- en: Shaders are vastly used in games and animation, especially when creating dynamic
    lighting, changing tints, and making dynamic visual improvements. Sometimes, the
    world environment is created with shaders.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器在游戏和动画中被广泛使用，特别是在创建动态照明、改变色调和进行动态视觉改进时。有时，世界环境是用着色器创建的。
- en: Shaders in a 2D game space
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2D游戏空间中的着色器
- en: Only pixel shaders can be used in 2D games. Each pixel of a digital image is
    considered a fragment. This is the reason why pixel shaders are also called fragment
    shaders. Pixel shaders can only perform color changes, tiling, and masking.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 只有像素着色器可以在2D游戏中使用。数字图像的每个像素被视为一个片段。这就是为什么像素着色器也被称为片段着色器的原因。像素着色器只能执行颜色更改、平铺和遮罩。
- en: '`BitmapShader`, `ComposeShader`, `LinearGradient`, `RadialGradient`, and `SweepGradient`
    are the variants of Android 2D shaders.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`BitmapShader`、`ComposeShader`、`LinearGradient`、`RadialGradient`和`SweepGradient`是Android
    2D着色器的变体。'
- en: A 2D game world is created with images. Developers often choose to create different
    assets to give the same object a different look and feel. In this process, developers
    end up making a bigger APK with almost the same use set.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2D游戏世界是由图像创建的。开发人员通常选择创建不同的资源，以赋予相同对象不同的外观和感觉。在这个过程中，开发人员最终会创建一个几乎相同的使用集，但APK更大的APK。
- en: Sprites can also be a field where shaders can hold a significant role. When
    using the same sprite to create different objects, the colors of certain fragments
    need to change dynamically. Pixel shaders can be very useful here.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵也是着色器可以发挥重要作用的领域。当使用相同的精灵创建不同的对象时，某些片段的颜色需要动态改变。像素着色器在这里非常有用。
- en: Shaders in a 2D space are used to change color, blur segments, change brightness,
    change opacity, tint images, and so on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 2D空间中的着色器用于改变颜色，模糊段，改变亮度，改变不透明度，着色图像等。
- en: Shaders in a 3D game space
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3D游戏空间中的着色器
- en: The most common use of shaders in 3D games is for dynamic shadow. In modern
    game development, a shadow is an inevitable element to improve the game experience.
    3D models look real after applying a texture.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在3D游戏中，着色器最常见的用途是动态阴影。在现代游戏开发中，阴影是改善游戏体验的不可避免的元素。应用纹理后，3D模型看起来很真实。
- en: 'In Android, a 3D shader is applied through OpenGL. We have already discussed
    an example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，通过OpenGL应用3D着色器。我们已经讨论了一个例子：
- en: '![Shaders in a 3D game space](img/B05069_07_03.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![3D游戏空间中的着色器](img/B05069_07_03.jpg)'
- en: A raw model with only vertex information
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 只有顶点信息的原始模型
- en: 'This is a simple model without any lightening or shaders. Let''s apply some
    shaders to give it a solid 3D look:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个没有任何光照或着色器的简单模型。让我们应用一些着色器，使其具有坚实的3D外观：
- en: '![Shaders in a 3D game space](img/B05069_07_04.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![3D游戏空间中的着色器](img/B05069_07_04.jpg)'
- en: A simple flat shader applied
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 应用简单的平面着色器
- en: Now, the developer can apply any texture or color to give it a different feel.
    In this part, the developer can choose to restrict this with color or texture.
    Generally, textures are used in this kind of scenarios in order to make the model
    visually real. However, this costs more than just color manipulation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，开发人员可以应用任何纹理或颜色来赋予其不同的感觉。在这一部分，开发人员可以选择通过颜色或纹理来限制这一点。通常在这种情况下使用纹理，以使模型在视觉上更真实。然而，这比仅仅进行颜色操作要昂贵得多。
- en: We will see a color and lighting change here to get a completely different feel
    of the same object. There are different procedures to handle different scenario
    requirements for the game.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们将看到颜色和光照的变化，以获得完全不同的感觉。对于游戏的不同场景需求，有不同的处理程序。
- en: 'This example, however, is just a visual representation of how shaders can manipulate
    3D models for a different look and feel:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个例子只是着色器如何操纵3D模型以获得不同外观和感觉的视觉表示：
- en: '![Shaders in a 3D game space](img/B05069_07_05.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![3D游戏空间中的着色器](img/B05069_07_05.jpg)'
- en: Shaders and game performance
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器和游戏性能
- en: Shaders are usually process-heavy. A fragment shader processes each fragment
    of a texture and manipulates its data. A large texture may lead to a visible delay
    in the game loop.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器通常是处理密集型的。片段着色器处理纹理的每个片段并操纵其数据。大纹理可能会导致游戏循环中出现明显的延迟。
- en: We can see shaders from different perspectives to create an idea of performance.
    Large textures decrease performance, and many small textures also affect performance.
    There has to be a balance between them to have a feasible real-time use of shaders.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从不同的角度看待着色器，以创造出性能的概念。大纹理会降低性能，而许多小纹理也会影响性能。它们之间必须保持平衡，以便在实时使用着色器时具有可行性。
- en: Creating shadows is one of the extensive uses of shaders. However, the quality
    of shadow processing is inversely proportionate to performance. In high-quality
    games, we can experience real-time shadow. Shaders map the object vertices and
    process it according to the light direction. It is then projected on the *X-Z*
    plane to create shadow. Shadows are merged with objects on the plane and with
    other shadows.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 创建阴影是着色器的广泛用途之一。然而，阴影处理的质量与性能成反比。在高质量游戏中，我们可以体验实时阴影。着色器映射对象的顶点并根据光线方向进行处理。然后将其投影到*X-Z*平面上以创建阴影。阴影与平面上的对象和其他阴影合并。
- en: Shaders can be used to improve world visibility with different lights, materials,
    and colors.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器可用于改善世界的可见性，使用不同的光线、材质和颜色。
- en: 'Here are some pros of using shaders in games:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中使用着色器的一些优点：
- en: Complete flexibility when rendering assets
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染资源的完全灵活性
- en: Fewer asset packages and increased reusability
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少资源包，增加可重用性
- en: Dynamic visual effects
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态视觉效果
- en: Dynamic lighting and shadow
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态光照和阴影
- en: Sprite manipulation on the fly
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时精灵操作
- en: 'There are few disadvantages of using shaders:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用着色器有一些缺点：
- en: Comparatively low frame rate
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帧率相对较低
- en: Performance drop
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能下降
- en: Required supported hardware platforms and graphic drivers
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要支持的硬件平台和图形驱动程序
- en: In spite of the few disadvantages, shaders have proved enough to be an intrinsic
    part of game development. Any performance drop is handled by upgrading the hardware
    and graphic drivers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有一些缺点，着色器已经被证明足够成为游戏开发的固有部分。任何性能下降都可以通过升级硬件和图形驱动程序来处理。
- en: Nowadays, shaders are being optimized for embedded devices with limited resources.
    This even opens up the chance to increase the use of shaders on almost every platform,
    without affecting the performance significantly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，着色器正在针对资源有限的嵌入式设备进行优化。这甚至为在几乎每个平台上增加着色器的使用提供了机会，而不会显著影响性能。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Since Android API level 15, the framework supports OpenGL ES 2.0\. This gave
    immense flexibility to graphic programmers to implement shaders in Android games.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 自Android API级别15起，框架支持OpenGL ES 2.0。这为图形程序员在Android游戏中实现着色器提供了巨大的灵活性。
- en: Almost every hardware configuration supports shaders to run on GPU. However,
    the scale of using shaders determines the performance. In modern day, this is
    not actually an issue.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每种硬件配置都支持着色器在GPU上运行。然而，使用着色器的规模决定了性能。在现代，这实际上并不是一个问题。
- en: Shaders are being used widely in games. In every aspect of graphical programming,
    shaders have already proven their place. All the famous and successful game developers
    have acknowledged the importance of shaders. Graphic artists need not worry about
    everything visual in the game, which reduces the development time significantly.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 着色器在游戏中被广泛使用。在图形编程的各个方面，着色器已经证明了它们的重要性。所有著名和成功的游戏开发者都承认了着色器的重要性。图形艺术家不需要担心游戏中的所有视觉内容，这显著减少了开发时间。
- en: Shaders are, therefore, widely used in games. Newer shaders are coming up with
    additional features now. The upgrading cycle of shaders has become less. However,
    hardware is also being upgraded with newer technology to support the graphical
    updates.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，着色器在游戏中被广泛使用。新的着色器现在带有额外的功能。着色器的升级周期已经减少。然而，硬件也在升级，以支持图形更新的新技术。
- en: It feels like magic to see a simple cube turn into anything that has the same
    orientation. This magic will keep happening on a larger scale in the future.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 看到一个简单的立方体变成具有相同方向的任何东西，感觉就像魔术。这种魔术将在未来更大规模地持续发生。
- en: Just developing a game is not enough. Shaders help a lot in reducing memory
    usage, but they increase processing overhead. We will try to explore various optimization
    techniques of storage and processing in the next chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 开发一款游戏并不足够。着色器在减少内存使用方面有很大帮助，但它们会增加处理开销。我们将在下一章尝试探索各种存储和处理的优化技术。
