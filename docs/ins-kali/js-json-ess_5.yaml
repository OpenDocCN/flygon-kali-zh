- en: Chapter 5. Cross-domain Asynchronous Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。跨域异步请求
- en: In the previous chapter, we used jQuery's `getJSON` method to ingest the `students`
    JSON feed; in this chapter we will take a step forward and send request parameters
    over to the server. Data feeds are often large amounts of data that are made available;
    the data that is part of such feeds is normally generic and can be considered
    too heavy for a targeted search. For example, in the `students` JSON feed, we
    are exposing the whole list of student information that is available. For a data
    vendor who is looking for students who are enrolled in certain courses or who
    reside in a given ZIP code to hire them as interns, this feed is going to be generic.
    It is common to see development teams build **Application Programming Interfaces**
    or **APIs** to give such data vendors numerous ways to target their search. This
    is a win-win situation for both the data vendor and for the company that owns
    the information since the data vendor only gets the information that they are
    looking for and the data supplier only sends the requested data, thereby saving
    a lot of bandwidth and server resources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了jQuery的`getJSON`方法来获取`students` JSON数据；在本章中，我们将迈出一步，将请求参数发送到服务器。数据源通常提供大量数据；这些数据通常是通用的，对于目标搜索来说可能太重了。例如，在`students`
    JSON数据中，我们公开了可用的所有学生信息列表。对于寻找已注册某些课程的学生或居住在特定邮政编码区域以雇佣他们为实习生的数据供应商来说，这个数据源将是通用的。通常可以看到开发团队构建**应用程序编程接口**或**API**，为这样的数据供应商提供多种方式来定位他们的搜索。这对于数据供应商和拥有信息的公司来说都是双赢的，因为数据供应商只获取他们正在寻找的信息，数据供应商只发送请求的数据，从而节省了大量带宽和服务器资源。
- en: Making GET and POST AJAX calls with JSON data
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON数据进行GET和POST AJAX调用
- en: It is important to understand that both synchronous and asynchronous calls are
    made over HTTP, so the data transfer process is the same. The popular methods
    to transfer data from the client machine to the server machine are `GET` and `POST`.
    The most common request method in HTTP is `GET`. When a client requests a web
    page, the web server uses the URL to process the HTTP request. Any other parameters
    that are appended to the URL serve as the data that is being sent from the client
    to the server. Since the parameters are part of the URL, it is important to make
    a clear distinction between when to and when not to use the `GET` request method.
    The `GET` method should be used to pass idempotent information such as a page
    number, a link address, or the limits and offsets that are a part of pagination.
    Keep in mind that there is a size constraint as to how much data can be transferred
    via the `GET` request method.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解同步和异步调用都是通过HTTP进行的，因此数据传输过程是相同的。从客户端机器到服务器机器传输数据的常用方法是`GET`和`POST`。HTTP中最常见的请求方法是`GET`。当客户端请求网页时，Web服务器使用URL处理HTTP请求。附加到URL的任何其他参数都作为从客户端发送到服务器的数据。由于参数是URL的一部分，因此很重要明确区分何时使用何时不使用`GET`请求方法。`GET`方法应该用于传递幂等信息，例如页面编号、链接地址或分页的限制和偏移量。请记住，通过`GET`请求方法可以传输多少数据存在大小限制。
- en: The `POST` request method is commonly used while sending the data that is big
    in size and that is non-trivial. Unlike the `GET` method, the data is transferred
    through the HTTP message body; we can use tools such as Fiddler and the developer
    tools available in the browser to track the data that is going out through the
    HTTP message body. The data that is being passed through the `POST` method cannot
    be bookmarked or cached, unlike the `GET` method. The `POST` method is often used
    to send data while using forms. For our examples in this chapter, let us use jQuery's
    `ajax` method to send data over to the server in JSON format. We will be working
    with a modified `students` API where we will be able to query complete student
    information—the ZIP code they live in, the classes that they take, and so on—and
    use a combination search to find students who live in a certain area and are taking
    a certain class. A new addition to our API is the functionality to add a student
    via a `POST` request; the student information has to be sent as a JSON object.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST`请求方法通常用于发送大量数据和非平凡数据。与`GET`方法不同，数据通过HTTP消息主体传输；我们可以使用诸如Fiddler和浏览器中可用的开发者工具来跟踪通过HTTP消息主体传出的数据。通过`POST`方法传递的数据不能被书签或缓存，不同于`GET`方法。`POST`方法通常用于在使用表单时发送数据。在本章的示例中，让我们使用jQuery的`ajax`方法以JSON格式将数据发送到服务器。我们将使用修改后的`students`
    API，在那里我们将能够查询完整的学生信息—他们居住的邮政编码、他们所上的课程等，并使用组合搜索来找到居住在某个地区并上某个课程的学生。我们API的一个新功能是通过`POST`请求添加学生；学生信息必须以JSON对象的形式发送。'
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This API is built in PHP and MySQL. The PHP and MySQL files would be made available
    in the `scripts-chap5` folder present in the code bundle..
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个API是用PHP和MySQL构建的。PHP和MySQL文件将在代码包中的`scripts-chap5`文件夹中提供。
- en: Before we start building scripts to make our asynchronous calls, let's take
    a look at the URLs that our `students` API provides. The first API call will be
    the generic search that will retrieve information for all the students in the
    database.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建脚本进行异步调用之前，让我们先看一下我们的`students` API提供的URL。第一个API调用将是通用搜索，将检索数据库中所有学生的信息。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_01.jpg)'
- en: As we have not started our targeted search, the URL has been kept for a generic
    search. Now let's look at the URL for our first targeted search—by ZIP code. This
    API call will return all the students that reside in the given ZIP code area.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有开始我们的目标搜索，因此URL已保留为通用搜索。现在让我们看看我们第一个目标搜索的URL—按邮政编码搜索。这个API调用将返回居住在给定邮政编码区域的所有学生。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_02.jpg)'
- en: In this example, the URL will return the information for all the students that
    reside in the ZIP code `08810`. Let's switch the search criteria from the ZIP
    code to the class that a student has enrolled into.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，该URL将返回所有居住在`08810`邮政编码的学生的信息。让我们将搜索条件从ZIP码切换到学生已经报名的课程。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_03.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_03.jpg)'
- en: In this example, the URL will return information for all the students that have
    enrolled for the class `Economics`. Now that we have the power of targeting the
    search by a ZIP code and a class, let us look at another call in our API to retrieve
    information by using both the ZIP code that the user resides in and the class
    that he or she has enrolled in.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，该URL将返回所有已经报名参加`经济学`课程的学生的信息。现在我们有了通过ZIP码和课程来定位搜索的能力，让我们来看看我们的API中另一个调用，通过用户所在的ZIP码和他或她已经报名的课程来检索信息。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_04.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_04.jpg)'
- en: In this example, a call to the URL will return information for all the students
    that have enrolled for the class `Accounting` and reside in the ZIP code `77082`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，对URL的调用将返回所有已经报名参加`会计学`课程并居住在`77082`邮政编码的学生的信息。
- en: The calls had until now used the HTTP `GET` method to transfer data from the
    client to the server. The last call in our API is powered by the HTTP `POST` method
    for adding a student. This call needs heavy data input, as a user can have multiple
    ZIP codes and multiple addresses and can be enrolled in multiple classes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这些调用都是使用HTTP `GET`方法从客户端向服务器传输数据。我们API中的最后一个调用是使用HTTP `POST`方法来添加学生。这个调用需要大量的数据输入，因为用户可以有多个ZIP码和多个地址，并且可以报名多个课程。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_05.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_05.jpg)'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_06.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_06.jpg)'
- en: In this call we start by importing the jQuery library; we can start using the
    `$` variable as we have jQuery on the page. We begin by adding a callback that
    is fired when the document is ready. We are using the `ajax` method for this example
    as it allows us to make the `GET` and `POST` requests, and when required, we can
    modify the `datatype` property in the `ajax` call to `JSONP` to make asynchronous
    cross-domain calls.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个调用中，我们首先导入jQuery库；我们可以开始使用`$`变量，因为页面上有jQuery。我们首先添加一个回调函数，当文档准备就绪时触发。我们在这个例子中使用`ajax`方法，因为它允许我们进行`GET`和`POST`请求，并且在需要时，我们可以修改`ajax`调用中的`datatype`属性为`JSONP`，以进行异步跨域调用。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is not necessary to explicitly mention when the type is GET, but it helps
    us build consistency with our code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要明确说明类型为GET时，但这有助于我们构建代码的一致性。
- en: In our `ajax` call we begin by setting the `url` property to the link to our
    API call to retrieve the student information; we specify that this will be performed
    via the HTTP `GET` method. The fourth property that we are setting is the `dataType`
    property; this is used to mention the type of the data that we are expecting returned.
    As we are working with the `students` feed, we will have to set the `dataType`
    property to JSON. It is important to note the `done` callback that is fired when
    the server sends a response back to our asynchronous request. We are passing the
    data that is sent over from the server as a response, initiating the callback.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`ajax`调用中，我们首先将`url`属性设置为检索学生信息的API调用链接；我们指定这将通过HTTP `GET`方法执行。我们设置的第四个属性是`dataType`属性；这用于指定我们期望返回的数据类型。因为我们正在处理`students`数据，所以我们必须将`dataType`属性设置为JSON。重要的是要注意`done`回调，当服务器发送响应到我们的异步请求时触发。我们将从服务器发送的数据作为响应传递，并启动回调。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`done` is the same as `readyState=4` and `request.status=200`; we have looked
    at this in [Chapter 4](ch04.xhtml "Chapter 4. AJAX Calls with JSON Data"), *AJAX
    Calls with JSON Data*, while making asynchronous calls using JavaScript.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`done`与`readyState=4`和`request.status=200`是相同的；我们在[第4章](ch04.xhtml "第4章. 使用JSON数据进行AJAX调用")中已经看过这个，*使用JavaScript进行异步调用*。'
- en: 'The following is the output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_07.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_07.jpg)'
- en: In the console window, we can view the JSON feed response that comes back from
    the server. This JSON feed contains a lot of information, as it gets the data
    for all the students. Now let us fetch the student records based on the ZIP code.
    For this example, we will be using the `zip_code` parameter and will asynchronously
    pass a value to the server via the HTTP `GET` method. This API call will serve
    the purpose for data vendors who want to search for interns who are available
    in a specific area.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台窗口中，我们可以查看从服务器返回的JSON数据。这个JSON数据包含了很多信息，因为它获取了所有学生的数据。现在让我们根据ZIP码获取学生记录。在这个例子中，我们将使用`zip_code`参数，并将通过HTTP
    `GET`方法异步地将一个值传递给服务器。这个API调用将为希望在特定地区搜索实习生的数据供应商提供服务。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_08.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_08.jpg)'
- en: In the previous example, we start by importing the jQuery library and we bind
    a callback to ready the event that is fired when the document has loaded. It is
    important to notice that we are sending a key-value pair for the ZIP code using
    the `data` property in line 12.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们首先导入了jQuery库，并绑定了一个回调函数来准备文档加载时触发的事件。重要的是要注意，我们在第12行使用`data`属性发送了一个ZIP码的键值对。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_09.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_09.jpg)'
- en: Once the call is fired, we log the response to the console window. The ZIP code
    `08810` matches one user, and the student information is being passed back via
    the JSON feed. Targeted searches help us narrow down our results, thereby providing
    us with the data that we are looking for; the next target search in line would
    be to retrieve data using a certain class that a student is enrolled in.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用被触发，我们就会将响应记录到控制台窗口。邮政编码`08810`匹配了一个用户，并且学生信息通过JSON反馈传递回来。定向搜索帮助我们缩小结果范围，从而为我们提供我们正在寻找的数据；下一个目标搜索将是使用学生注册的特定课程来检索数据。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_10.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_10.jpg)'
- en: The previous example is the same as the targeted search with ZIP code; here
    we are replacing the ZIP code information with the class information. We are retrieving
    all the students who have enrolled for `Economics`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子与使用邮政编码的定向搜索相同；在这里，我们用课程信息替换了邮政编码信息。我们正在检索所有已经注册`经济学`课程的学生。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_11.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_11.jpg)'
- en: The targeted search returns student information for those who have enrolled
    for an Economics class. Now let us target our search with a combination of class
    and ZIP code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 针对性搜索返回了已经注册经济课程的学生信息。现在让我们用课程和邮政编码的组合来定位我们的搜索。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_12.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_12.jpg)'
- en: In the previous example, we add the class and the ZIP code key-value pairs to
    send multiple search parameters to the server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们添加了课程和邮政编码的键值对，以向服务器发送多个搜索参数。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_13.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_13.jpg)'
- en: This call retrieves the student information for students who have enrolled for
    the `Accounting` course and reside in the ZIP code `77082`. We have seen multiple
    examples of making asynchronous calls via the HTTP `GET` method; now it is time
    for us to push the data onto the server in order to add a student using our API.
    We will be using our `addUser` call to add a student on the fly. This helps the
    development teams to add student information into our database from external resources.
    For example, we are a student information aggregator and we sell consolidated
    student information to multiple data vendors. For us to aggregate all this information,
    we might be aggregating it via spiders, where a script would go to a website and
    fetch the data, or external resources, where the data will be unstructured. So
    we will structure our data and use this `addUser` API call to ingest the structured
    student data information into our data storage. Simultaneously, we can expose
    this method to trusted data vendors who would like to store the student information
    that is not available with us, thereby helping them to make our data storage a
    single point data location. It is a win-win for both the companies as we get more
    student information and our data vendors get to store their student information
    on a remote location. Now let's take a look at how this `addUser` post call will
    be made.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用检索了已经注册`会计`课程并居住在邮政编码`77082`的学生信息。我们已经看到了通过HTTP `GET`方法进行异步调用的多个例子；现在是时候将数据推送到服务器，以便使用我们的API添加学生。我们将使用我们的`addUser`调用来实时添加学生。这有助于开发团队从外部资源向我们的数据库添加学生信息。例如，我们是学生信息聚合器，我们将整合的学生信息卖给多个数据供应商。为了整合所有这些信息，我们可能会通过蜘蛛进行整合，其中脚本将访问网站并获取数据，或者通过外部资源进行整合，其中数据将是非结构化的。因此，我们将构造我们的数据并使用`addUser`
    API调用将结构化的学生数据信息摄入到我们的数据存储中。同时，我们可以向信任的数据供应商公开这种方法，他们希望将我们没有的学生信息存储在远程位置，从而帮助他们将我们的数据存储成为单一数据位置。这对两家公司来说都是双赢，因为我们获得了更多的学生信息，而我们的数据供应商可以将他们的学生信息存储在远程位置。现在让我们看看这个`addUser`的POST调用将如何进行。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_14.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_14.jpg)'
- en: In this call, we are doing multiple things; we start by declaring a few variables
    to hold local data. We have local variables that hold string values for the first
    name and last name of the student, and we also have variables that are holding
    arrays for classes, ZIP codes, and addresses, as Superman has to be at multiple
    locations in a span of few minutes. In our `ajax` call, the first change to note
    is the `type` property; as we are pushing a large amount of user data, it is common
    to use the HTTP `POST` method. The `data` property is going to use the local variables
    that are declared for the first name, last name, addresses, ZIP codes, and the
    classes. From the API, when a user is added to the database successfully, we send
    a success message in response, and that will be logged to our console window.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个调用中，我们正在做多件事情；我们首先声明一些变量来保存本地数据。我们有本地变量来保存学生的名字和姓氏的字符串值，还有保存课程、邮政编码和地址的数组变量，就像超人需要在几分钟内出现在多个地方一样。在我们的`ajax`调用中，要注意的第一个变化是`type`属性；因为我们正在推送大量用户数据，通常会使用HTTP
    `POST`方法。`data`属性将使用为名字、姓氏、地址、邮政编码和课程声明的本地变量。从API中，当用户成功添加到数据库时，我们会发送一个成功消息作为响应，并将其记录到我们的控制台窗口中。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_15.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_15.jpg)'
- en: Now to verify that the new student has been added to our database, we can run
    our `getStudents` API call to see a list of all the users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了验证新学生是否已经添加到我们的数据库中，我们可以运行我们的`getStudents` API调用，以查看所有用户的列表。
- en: '![Making GET and POST AJAX calls with JSON data](img/6034OS_05_16.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![使用JSON数据进行GET和POST AJAX调用](img/6034OS_05_16.jpg)'
- en: The last student in the `students` feed is `Kent Clark`; it is always important
    to test our code to see that everything is working as expected. As we are dealing
    with dynamic data, it is very important to maintain data integrity. Whenever a
    CRUD operation is performed on a user or on their dependencies, the verification
    for data integrity on that data storage has to be performed by looking at the
    retrieved data and by performing data validation checks.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`students` feed中的最后一个学生是`Kent Clark`；测试我们的代码以确保一切都按预期工作是非常重要的。因为我们正在处理动态数据，因此保持数据完整性非常重要。每当对用户或其依赖项执行CRUD操作时，都必须通过查看检索到的数据并执行数据验证检查来验证该数据存储的数据完整性。'
- en: The problem with cross-domain AJAX calls
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨域AJAX调用的问题
- en: All the asynchronous calls that we have made until now have been on the same
    server. There are situations where we would want to load data from a different
    domain, such as fetching data from other APIs. Server-side programs are designed
    to handle these kinds of calls; we can use cURL to make HTTP calls to different
    domains to fetch such data. This increases our dependency on server-side programs
    as we would have to make a call to our server, which would in turn make a call
    to another domain to fetch the data, which would be returned to a client-side
    program. It might come across as being a trivial issue, but we are adding an extra
    layer to our web architecture. To avoid making a server-side call, let us try
    and see if we can make an asynchronous call to a different domain. For this example,
    let us use Reddit's JSON API to fetch the data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所做的所有异步调用都是在同一个服务器上。有时我们会希望从不同的域加载数据，比如从其他API获取数据。服务器端程序被设计来处理这些调用；我们可以使用cURL来对不同的域进行HTTP调用以获取这些数据。这增加了我们对服务器端程序的依赖，因为我们需要对我们的服务器进行调用，然后服务器再对另一个域进行调用以获取数据，然后返回给客户端程序。这可能看起来是一个微不足道的问题，但我们在我们的Web架构中增加了一个额外的层。为了避免进行服务器端调用，让我们尝试看看是否可以对不同的域进行异步调用。在这个例子中，让我们使用Reddit的JSON
    API来获取数据。
- en: '![The problem with cross-domain AJAX calls](img/6034OS_05_17.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![跨域AJAX调用的问题](img/6034OS_05_17.jpg)'
- en: This is similar to the asynchronous calls that we have made earlier to retrieve
    data from our `students` API. It is important to understand that we did not have
    to mention the whole URL in the previous cases as we were making a call to the
    same domain.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于我们之前所做的异步调用，用于从我们的`students` API中检索数据。重要的是要理解，在以前的情况下，我们不必在URL中提到整个URL，因为我们是在同一个域中进行调用。
- en: '![The problem with cross-domain AJAX calls](img/6034OS_05_18.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![跨域AJAX调用的问题](img/6034OS_05_18.jpg)'
- en: The Reddit site provides an excellent JSON API, whereby we can append `.json`
    to the URL and will get the JSON feed for that aggregated web page, given that
    the page is part of Reddit. Let's take a look at the output that is generated
    when we make this asynchronous call across domains.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Reddit网站提供了一个出色的JSON API，我们可以在URL后面添加`.json`，就可以获取到该聚合网页的JSON源，前提是该页面是Reddit的一部分。让我们来看看当我们跨域进行这个异步调用时生成的输出。
- en: '![The problem with cross-domain AJAX calls](img/6034OS_05_19.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![跨域AJAX调用的问题](img/6034OS_05_19.jpg)'
- en: In our asynchronous call, the data would have been logged to the console window,
    if the request were successful, but we see an error in the console window. The
    error says that the `XMLHTTPRequest` object cannot load the URL that we have provided
    as it doesn't originate from our [www.training.com](http://www.training.com) domain.
    The **same domain policy** is a security measure followed by web browsers in order
    to prevent one domain from accessing information on another domain. Web applications
    use cookies to store basic information about a user's session so as to provide
    an intuitive user experience when the user requests the same web page another
    time or requests a different web page on the same domain. To prevent an external
    website from stealing this information, web browsers follow the **same origin
    policy**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的异步调用中，如果请求成功，数据将被记录到控制台窗口，但我们在控制台窗口中看到了一个错误。错误显示`XMLHTTPRequest`对象无法加载我们提供的URL，因为它不是源自我们的[www.training.com](http://www.training.com)域的。**同源策略**是Web浏览器遵循的安全措施，以防止一个域访问另一个域上的信息。Web应用程序使用cookie来存储有关用户会话的基本信息，以便在用户再次请求同一网页或请求同一域上的不同网页时提供直观的用户体验。为了防止外部网站窃取这些信息，Web浏览器遵循**同源策略**。
- en: The same domain policy looks for three things in an incoming request; they are
    the host, the port, and the protocol. If any of them is different from the existing
    domain, the request will not be completed and the cross-domain error is returned.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同源策略在传入请求中寻找三样东西；它们是主机、端口和协议。如果其中任何一个与现有域不同，请求将无法完成，会返回跨域错误。
- en: '| Variant of http://www.training.com | RESULT |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 变体http://www.training.com | 结果 |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `http://www.training.com/index.php` | PASS |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `http://www.training.com/index.php` | 通过 |'
- en: '| `https://www.training.com/index.php` | FAIL (Protocol) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `https://www.training.com/index.php` | 失败（协议） |'
- en: '| `http://www.training:81.com/index.php` | FAIL (Port) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `http://www.training:81.com/index.php` | 失败（端口） |'
- en: '| `http://test.training.com.com/index.php` | FAIL (Host) |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `http://test.training.com.com/index.php` | 失败（主机） |'
- en: '| `http://www.differentsite.com/index.php` | FAIL (Host) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `http://www.differentsite.com/index.php` | 失败（主机） |'
- en: Introduction to JSONP
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSONP介绍
- en: In order to get around the same origin policy, we will be using JSONP, which
    is JSON with Padding. One exception under the same origin policy is the `<script>`
    tag so scripts can be passed across domains. JSONP uses this exception in order
    to pass data across domains as a script by adding padding to make the JSON object
    look like a script. In JavaScript, when a function with a parameter is invoked,
    we call the function and add a parameter. With JSONP, we pass the JSON feed as
    a parameter to a function; thereby, we pad our object into a function callback.
    This function into which the JSON feed has been padded has to be used on the client-side
    to retrieve the JSON feed. Let's take a quick look at a JSONP example.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过同源策略，我们将使用JSONP，即带填充的JSON。同源策略的一个例外是`<script>`标签，因此可以跨域传递脚本。JSONP利用这个例外来将数据作为脚本传递到不同的域，通过添加填充使JSON对象看起来像一个脚本。在JavaScript中，当调用带有参数的函数时，我们调用函数并添加参数。使用JSONP，我们将JSON数据流作为参数传递给一个函数；因此，我们将我们的对象填充到一个函数回调中。必须在客户端使用这个填充了JSON数据流的函数来检索JSON数据流。让我们快速看一个JSONP的例子。
- en: '![Introduction to JSONP](img/6034OS_05_20.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![JSONP简介](img/6034OS_05_20.jpg)'
- en: In this example, we are padding the `students` object into the `myCallback`
    function and we have to reuse the `myCallback` function in order to retrieve the
    `students` object. Now that we understand how JSONP works, let's use Reddit's
    JSON API to fetch the data. We need to make one change to the way we access the
    data—we need to find a way to pad the feed into a callback that can be used on
    the client-side. The Reddit website provide a `jsonp` `GET` parameter that will
    take the name of the callback to provide the data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将`students`对象填充到`myCallback`函数中，并且我们必须重用`myCallback`函数以检索`students`对象。现在我们了解了JSONP的工作原理，让我们使用Reddit的JSON
    API来获取数据。我们需要对访问数据的方式进行一些更改——我们需要找到一种方式将数据流填充到一个可以在客户端使用的回调中。Reddit网站提供了一个`jsonp`
    `GET`参数，该参数将获取回调的名称以提供数据。
- en: '![Introduction to JSONP](img/6034OS_05_21.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![JSONP简介](img/6034OS_05_21.jpg)'
- en: Implementing JSONP
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现JSONP
- en: We are using the same URL as before to fetch the data, but we have added the
    `jsonp` parameter and are setting it to `getRedditData`; it is important to note
    that the feed is now padded into our callback `getRedditData`. Now let's replace
    the URL property in our earlier script to create a new script that will fetch
    us the JSON feed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用与之前相同的URL来获取数据，但是我们已经添加了`jsonp`参数，并将其设置为`getRedditData`；重要的是要注意，现在该数据流已经填充到我们的回调`getRedditData`中。现在让我们替换之前脚本中的URL属性，创建一个新的脚本来获取JSON数据流。
- en: '![Implementing JSONP](img/6034OS_05_22.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![实现JSONP](img/6034OS_05_22.jpg)'
- en: A few properties such as `url` and `dataType` have been modified and a few new
    properties such as `contentType` and `jsonpCallback` have been added. We have
    already discussed the change in the `url` property, so let us look at the other
    properties.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一些属性，如`url`和`dataType`已经被修改，一些新属性，如`contentType`和`jsonpCallback`已经被添加。我们已经讨论了`url`属性的更改，现在让我们看看其他属性。
- en: '![Implementing JSONP](img/6034OS_05_23.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![实现JSONP](img/6034OS_05_23.jpg)'
- en: Earlier, the `dataType` property was set to `json` as the incoming feed was
    of type `json`, but now the JSON feed is being padded into a callback, and it
    has to be switched so that the browser expects a callback rather than JSON itself.
    The new properties that have been added are `contentType` and `jsonpCallback`;
    the property `contentType` specifies the type of content being sent to the web
    server. `jsonpCallback` takes the name of the callback function into which the
    JSON feed has been padded.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 早先，`dataType`属性被设置为`json`，因为传入的数据流是`json`类型，但是现在JSON数据流被填充到一个回调中，因此必须进行切换，以便浏览器期望的是回调而不是JSON本身。已添加的新属性是`contentType`和`jsonpCallback`；`contentType`属性指定要发送到Web服务器的内容类型。`jsonpCallback`获取填充了JSON数据流的回调函数的名称。
- en: '![Implementing JSONP](img/6034OS_05_24.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![实现JSONP](img/6034OS_05_24.jpg)'
- en: When the script is fired, the data from the `getRedditData` callback has been
    retrieved and is passed over into the `success` property that logs our JSON object
    onto the console window. An important fact to make a note of is that a JSONP call
    is a script call and not an XHR request, so the JSONP call will be available in
    the `JS` or `<scripts>` tab and not in the `XHR` tab of the console window.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本被触发时，从`getRedditData`回调中检索到的数据被传递到`success`属性中，将我们的JSON对象记录到控制台窗口中。一个重要的事实需要注意，JSONP调用是一个脚本调用，而不是XHR请求，因此JSONP调用将在`JS`或`<scripts>`标签中可用，而不是在控制台窗口的`XHR`标签中。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: HTTP `GET` and `POST` request methods are two of the most popular HTTP methods
    that are used to transfer data from clients to servers. This chapter provides
    an in-depth understanding of how `GET` and `POST` request methods are used to
    transfer data using asynchronous requests. We then proceeded to look at what the
    issues are with cross-domain asynchronous requests; we used the exception of the
    `<script>` tag to perform our JSONP asynchronous script calls to fetch the data
    from a different domain. In the next chapter, we will be building our photo gallery
    application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP `GET`和`POST`请求方法是用于从客户端向服务器传输数据的最流行的HTTP方法之一。本章深入了解了如何使用异步请求来传输数据的`GET`和`POST`请求方法。然后，我们继续研究跨域异步请求的问题；我们利用`<script>`标签的例外来执行我们的JSONP异步脚本调用，以从不同的域获取数据。在下一章中，我们将构建我们的照片库应用程序。
