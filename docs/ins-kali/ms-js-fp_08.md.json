["```js\n$ ls -1 | grep \"odt$\" | wc -l\n***4***\n```", "```js\n$ function cfe() {\n ls -1 | grep \"$1\\$\"| wc -l\n} \n```", "```js\n$ cfe odt\n***4***\n$ cfe pdf\n***6***\n```", "```js\nlet markers = [\n {name: \"UY\", lat: -34.9, lon: -56.2},\n {name: \"AR\", lat: -34.6, lon: -58.4},\n {name: \"BR\", lat: -15.8, lon: -47.9},\n ...\n {name: \"BO\", lat: -16.5, lon: -68.1}\n];\n```", "```js\nconst average = arr => arr.reduce(sum, 0) / arr.length;\nconst getField = attr => obj => obj[attr];\nconst myMap = curry(flipTwo(demethodize(map)));\n\nconst getLat = curry(getField)(\"lat\");\nconst getAllLats = curry(myMap)(getLat);\n\nlet averageLat = pipeline(getAllLats, average);\n// *and similar code to average longitudes*\n```", "```js\nlet averageLat2 = pipeline(curry(myMap)(curry(getField)(\"lat\")), average);\nlet averageLon2 = pipeline(curry(myMap)(curry(getField)(\"lon\")), average);\n```", "```js\nfunction getDir(path) {\n const fs = require(\"fs\");\n const files = fs.readdirSync(path);\n return files;\n}\n```", "```js\nconst filterByText = (text, arr) => arr.filter(v => v.endsWith(text));\n```", "```js\nconst filterOdt = arr => filterByText(\".odt\", arr);\n```", "```js\nconst filterOdt2 = curry(filterByText)(\".odt\");\n```", "```js\nconst count = arr => arr.length;\n```", "```js\nconst countOdtFiles = (path) => {\n const files = getDir(path);\n const filteredFiles = filterOdt(files);\n const countOfFiles = count(filteredFiles);\n return countOfFiles;\n}\n\ncountOdtFiles(\"/home/fkereki/Documents\"); // 4, *as with the command line solution*\n```", "```js\nconst countOdtFiles2 = path => count(filterOdt(getDir(path)));\n\ncountOdtFiles2(\"/home/fkereki/Documents\"); // 4, *as before*\n```", "```js\nconst pipeTwo = (f, g) => (...args) => g(f(...args));\n```", "```js\nconst countOdtFiles3 = path =>\n    pipeTwo(pipeTwo(getDir, filterOdt), count)(path);\n\nconst countOdtFiles4 = path =>\n    pipeTwo(getDir, pipeTwo(filterOdt, count))(path);\n```", "```js\ncountOdtFiles3(\"/home/fkereki/Documents\") ===\n pipeTwo(pipeTwo(getDir, filterOdt), count)(\"/home/fkereki/Documents\") ===\n count(pipeTwo(getDir, filterOdt)(\"/home/fkereki/Documents\")) ===\n count(filterOdt(getDir(\"/home/fkereki/Documents\"))) // 4\n```", "```js\ncountOdtFiles4(\"/home/fkereki/Documents\") ===\n pipeTwo(getDir, pipeTwo(filterOdt, count))(\"/home/fkereki/Documents\") ===\n pipeTwo(filterOdt, count)(getDir(\"/home/fkereki/Documents\")) ===\n count(filterOdt(getDir(\"/home/fkereki/Documents\"))) // **4**\n```", "```js\nconst pipeline = (...fns) => (...args) => {\n let result = fns[0](...args);\n for (let i = 1; i < fns.length; i++) {\n result = fns[i](result);\n }\n return result;\n};\n\npipeline(getDir, filterOdt, count)(\"/home/fkereki/Documents\"); // *still* 4\n```", "```js\nconst pipeline2 = (...fns) =>\n fns.reduce((result, f) => **(...args) => f(result(...args))**);\n\npipeline2(getDir, filterOdt, count)(\"/home/fkereki/Documents\"); // 4\n```", "```js\nconst pipeline3 = (...fns) => fns.**reduce(pipeTwo)**;\n\n**pipeline3(getDir, filterOdt, count)**(\"/home/fkereki/Documents\"); // *again* 4\n```", "```js\n$ ls -1 | grep \"odt$\" | **tee /dev/tty** | wc -l\n\n*...the list of files with names ending in odt...*\n*4*\n```", "```js\nconst tee = arg => {\n console.log(arg);\n return arg;\n};\n```", "```js\nconsole.log(\n pipeline2(getDir, tee, filterOdt, tee, count)(\n \"/home/fkereki/Documents\"\n )\n);\n\n[...*the list of all the files in the directory*...]\n[...*the list of files with names ending in odt*...]\n*4*\n```", "```js\nconst tee2 = (arg, logger = console.log) => {\n    logger(arg);\n return args;\n};\n```", "```js\nconst tap = curry((fn, x) => (fn(x), x));\n```", "```js\nconst tee3 = tap(console.log);\n```", "```js\nconst tap2 = fn => x => (fn(x), x);\n```", "```js\npipeline2(\n **addLogging**(getDir), \n    **addLogging**(filterOdt), \n    **addLogging**(count))(\"/home/fkereki/Documents\"));\n\nentering getDir: /home/fkereki/Documents\nexiting getDir: ...*the list of all the files in the directory*...\nentering filterOdt: ...*the same list of files*...\nexiting filterOdt: ...*the list of files with names ending in odt*...\nentering count: ...*the list of files with names ending in odt*...\nexiting count: 4 \n```", "```js\nconst range = (start, stop) =>\n new Array(stop - start).fill(0).map((v, i) => start + i);\n```", "```js\n var node = svg\n .selectAll(\".node\")\n .data(pack(root).leaves())\n .enter()\n .append(\"g\")\n .attr(\"class\", \"node\")\n .attr(\"transform\", function(d) { \n return \"translate(\" + d.x + \",\" + d.y + \")\"; \n });\n```", "```js\nclass City {\n constructor(name, lat, long) {\n this.name = name;\n this.lat = lat;\n this.long = long;\n }\n\n getName() {\n return this.name;\n }\n\n setName(newName) {\n this.name = newName;\n }\n\n setLat(newLat) {\n this.lat = newLat;\n }\n\n setLong(newLong) {\n this.long = newLong;\n }\n\n getCoords() {\n return [this.lat, this.long];\n }\n}\n```", "```js\nlet myCity = new City(\"Montevideo, Uruguay\", -34.9011, -56.1645);\nconsole.log(myCity.getCoords(), myCity.getName());\n// [ -34.9011, -56.1645 ] 'Montevideo, Uruguay'\n```", "```js\nconst getHandler = {\n    get(target, property, receiver) {\n if (typeof target[property] === \"function\") {\n // requesting a method? return a wrapped version\n return (...args) => {\n const result = target[property](...args);\n return result === undefined ? receiver : result;\n };\n } else {\n // an attribute was requested - just return it\n return target[property];\n }\n }\n};\n\nconst chainify = obj => new Proxy(obj, getHandler);\n```", "```js\nmyCity = chainify(myCity);\n\nconsole.log(myCity\n .setName(\"Pune, India\")\n .setLat(18.5626)\n .setLong(73.8087)\n .g    oords(), \n myCity.getName());\n// [ 18.5626, 73.8087 ] 'Pune, India'\n```", "```js\nconst countOdtFiles3 = path =>\n pipeTwo(pipeTwo(getDir, filterOdt), count)(path);\n\nconst countOdtFiles4 = path =>\n pipeTwo(getDir, pipeTwo(filterOdt, count))(path);\n```", "```js\nconst countOdtFiles3b = pipeTwo(pipeTwo(getDir, filterOdt), count);\n\nconst countOdtFiles4b = pipeTwo(getDir, pipeTwo(filterOdt, count));\n```", "```js\nconst getLat = curry(getField)(\"lat\");\n```", "```js\nconst getLat = obj => curry(getField)(\"lat\")(obj);\n```", "```js\nconst getLat = obj => obj.lat;\n```", "```js\nconst isNegativeBalance = v => v.balance < 0;\n```", "```js\nconst isNegativeBalance2 = pipeline(getBalance, isNegative);\n```", "```js\nconst getBalance = curry(getField)(\"balance\");\n```", "```js\nconst isNegative = x => x < 0;\n```", "```js\nconst isNegative = curry(binaryOp(\">\"))(0);\n```", "```js\nconst isNegative = binaryOpRight(\"<\", 0);\n```", "```js\nconst isNegativeBalance2 = pipeline(\n curry(getField)(\"balance\"),\n curry(binaryOp(\">\"))(0)\n);\n```", "```js\nconst isNegativeBalance3 = pipeline(\n curry(getField)(\"balance\"),\n binaryOpRight(\"<\", 0)\n);\n```", "```js\nconst not = fn => (...args) => !fn(...args);\nconst positiveBalance = not(isNegativeBalance);\n```", "```js\nconst logicalNot = unaryOp(\"!\");\n```", "```js\nconst positiveBalance = compose(logicalNot, isNegativeBalance);\n```", "```js\nconst changeSign = unaryOp(\"-\");\npalabras.sort(**compose(changeSign, spanishComparison)**);\n```", "```js\nconst countOdtFiles2 = path => count(filterOdt(getDir(path)));\n```", "```js\nconst countOdtFiles2b = path => compose(count, filterOdt, getDir)(path);\ncountOdtFiles2b(\"/home/fkereki/Documents\"); // *4, no change here*\n```", "```js\ncompose(count, filterOdt, getDir)(\"/home/fkereki/Documents\");\n```", "```js\nconst removeNonAlpha = str => str.replace(/[^a-z]/gi, \" \");\nconst toUpperCase = demethodize(String.prototype.toUpperCase);\nconst splitInWords = str => str.trim().split(/\\s+/);\nconst arrayToSet = arr => new Set(arr);\nconst setToList = set => Array.from(set).sort();\n```", "```js\nconst getUniqueWords = compose(\n    setToList,\n arrayToSet,\n splitInWords,\n toUpperCase,\n removeNonAlpha\n);\n```", "```js\nconst GETTYSBURG_1_2 = `Four score and seven years ago\nour fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to\nthe proposition that all men are created equal. Now we are engaged in a great civil war, testing whether\nthat nation, or any nation so conceived and dedicated,\ncan long endure.`; console.log(**getUniqueWords(GETTYSBURG_1_2)**); [ 'A', 'AGO', 'ALL', 'AND', 'ANY', 'ARE', 'BROUGHT', 'CAN', 'CIVIL',\n... 'TESTING',| 'THAT', 'THE', 'THIS', 'TO', 'WAR', 'WE', 'WHETHER', 'YEARS' ]\n```", "```js\nconst getUniqueWords1 = str => {\n const str1 = removeNonAlpha(str);\n const str2 = toUpperCase(str1);\n const arr1 = splitInWords(str2);\n const set1 = arrayToSet(arr1);\n const arr2 = setToList(set1);\n return arr2;\n};\n```", "```js\nconst getUniqueWords2 = str =>\n    setToList(arrayToSet(splitInWords(toUpperCase(removeNonAlpha(str)))));\n\nconsole.log(getUniqueWords2(GETTYSBURG_1_2));\n// [ 'A', 'AGO', 'ALL', 'AND', ... 'WAR', 'WE', 'WHETHER', 'YEARS' ]\n```", "```js\nconst pipeTwo = (f, g) => (...args) => g(f(...args));\nconst composeTwo = (f, g) => (...args) => f(g(...args));\n```", "```js\nconst composeTwoByFlipping = flipTwo(pipeTwo);\n```", "```js\nconst getUniqueWords3 = composeTwo(\n setToList,\n composeTwo(\n arrayToSet,\n composeTwo(splitInWords, composeTwo(toUpperCase, removeNonAlpha))\n )\n);\n\nconsole.log(getUniqueWords3(GETTYSBURG_1_2));\n// [ 'A', 'AGO', 'ALL', 'AND', ... 'WAR', 'WE', 'WHETHER', 'YEARS' ] *OK again*\n```", "```js\nconst compose = (...fns) => pipeline(...(fns.reverse**()))**; console.log(\n compose(\n setToList,\n arrayToSet,\n splitInWords,\n toUpperCase,\n removeNonAlpha\n )(GETTYSBURG_1_2)\n);\n// [ 'A', 'AGO', 'ALL', 'AND', ... 'WAR', 'WE', 'WHETHER', 'YEARS' ] *OK once more*  \n```", "```js\nconst  compose2  = (...fns) => fns.reduceRight(pipeTwo);\n\nconsole.log(\n compose2(\n setToList,\n arrayToSet,\n splitInWords,\n toUpperCase,\n removeNonAlpha\n )(GETTYSBURG_1_2)\n);\n// [ 'A', 'AGO', 'ALL', 'AND', ... 'WAR', 'WE', 'WHETHER', 'YEARS' ] *still OK* \n```", "```js\nconst  compose2b  = (...fns) => \n fns.reduceRight((f,g) => (...args) =>  g(f(...args)));\n```", "```js\nconst  compose3  = (...fns) => fns.reduce(composeTwo**)**;\n```", "```js\nvar fn1, fn2;\n\ndescribe(\"pipeTwo\", function() {\n beforeEach(() => {\n fn1 = () => {};\n fn2 = () => {};\n });\n\n it(\"works with single arguments\", () => {\n spyOn(window, \"fn1\").and.returnValue(1);\n spyOn(window, \"fn2\").and.returnValue(2);\n\n const pipe = pipeTwo(fn1, fn2);\n const result = pipe(22);\n\n expect(fn1).toHaveBeenCalledTimes(1);\n expect(fn2).toHaveBeenCalledTimes(1);\n expect(fn1).toHaveBeenCalledWith(22);\n expect(fn2).toHaveBeenCalledWith(1);\n expect(result).toBe(2);\n });\n\n it(\"works with multiple arguments\", () => {\n spyOn(window, \"fn1\").and.returnValue(11);\n spyOn(window, \"fn2\").and.returnValue(22);\n\n const pipe = pipeTwo(fn1, fn2);\n const result = pipe(12, 4, 56);\n\n expect(fn1).toHaveBeenCalledTimes(1);\n expect(fn2).toHaveBeenCalledTimes(1);\n expect(fn1).toHaveBeenCalledWith(12, 4, 56);\n expect(fn2).toHaveBeenCalledWith(11);\n expect(result).toBe(22);\n });\n});\n```", "```js\ndescribe(\"pipeline\", function() {\n beforeEach(() => {\n fn1 = () => {};\n fn2 = () => {};\n fn3 = () => {};\n fn4 = () => {};\n });\n\n it(\"works with a single function\", () => {\n spyOn(window, \"fn1\").and.returnValue(11);\n\n const pipe = pipeline(fn1);\n const result = pipe(60);\n\n expect(fn1).toHaveBeenCalledTimes(1);\n expect(fn1).toHaveBeenCalledWith(60);\n expect(result).toBe(11);\n });\n\n // *we omit here tests for 2 functions,*\n // *which are similar to those for pipeTwo()*\n\n it(\"works with 4 functions, multiple arguments\", () => {\n spyOn(window, \"fn1\").and.returnValue(111);\n spyOn(window, \"fn2\").and.returnValue(222);\n spyOn(window, \"fn3\").and.returnValue(333);\n spyOn(window, \"fn4\").and.returnValue(444);\n\n const pipe = pipeline(fn1, fn2, fn3, fn4);\n const result = pipe(24, 11, 63);\n\n expect(fn1).toHaveBeenCalledTimes(1);\n expect(fn2).toHaveBeenCalledTimes(1);\n expect(fn3).toHaveBeenCalledTimes(1);\n expect(fn4).toHaveBeenCalledTimes(1);\n expect(fn1).toHaveBeenCalledWith(24, 11, 63);\n expect(fn2).toHaveBeenCalledWith(111);\n expect(fn3).toHaveBeenCalledWith(222);\n expect(fn4).toHaveBeenCalledWith(333);\n expect(result).toBe(444);\n });\n});\n```", "```js\nvar fn1, fn2, fn3, fn4;\n\ndescribe(\"compose\", function() {\n beforeEach(() => {\n fn1 = () => {};\n fn2 = () => {};\n fn3 = () => {};\n fn4 = () => {};\n });\n\n // *other tests omitted...*\n\n it(\"works with 4 functions, multiple arguments\", () => {\n spyOn(window, \"fn1\").and.returnValue(111);\n spyOn(window, \"fn2\").and.returnValue(222);\n spyOn(window, \"fn3\").and.returnValue(333);\n spyOn(window, \"fn4\").and.returnValue(444);\n\n const pipe = compose(fn4, fn3, fn2, fn1);\n const result = pipe(24, 11, 63);\n\n expect(fn1).toHaveBeenCalledTimes(1);\n expect(fn2).toHaveBeenCalledTimes(1);\n expect(fn3).toHaveBeenCalledTimes(1);\n expect(fn4).toHaveBeenCalledTimes(1);\n\n expect(fn1).toHaveBeenCalledWith(24, 11, 63);\n expect(fn2).toHaveBeenCalledWith(111);\n expect(fn3).toHaveBeenCalledWith(222);\n expect(fn4).toHaveBeenCalledWith(333);\n expect(result).toBe(444);\n });\n});\n```", "```js\nclass City {\n // *as above*\n}\n\nvar myCity;\n\ndescribe(\"chainify\", function() {\n beforeEach(() => {\n myCity = new City(\"Montevideo, Uruguay\", -34.9011, -56.1645);\n myCity = chainify(myCity);\n });\n\n it(\"doesn't affect get functions\", () => {\n expect(myCity.getName()).toBe(\"Montevideo, Uruguay\");\n expect(myCity.getCoords()[0]).toBe(-34.9011);\n expect(myCity.getCoords()[1]).toBe(-56.1645);\n });\n\n it(\"doesn't affect getting attributes\", () => {\n expect(myCity.name).toBe(\"Montevideo, Uruguay\");\n expect(myCity.lat).toBe(-34.9011);\n expect(myCity.long).toBe(-56.1645);\n });\n\n it(\"returns itself from setting functions\", () => {\n expect(myCity.setName(\"Other name\")).toBe(myCity);\n expect(myCity.setLat(11)).toBe(myCity);\n expect(myCity.setLong(22)).toBe(myCity);\n });\n\n it(\"allows chaining\", () => {\n const newCoords = myCity\n .setName(\"Pune, India\")\n .setLat(18.5626)\n .setLong(73.8087)\n .getCoords();\n\n expect(myCity.name).toBe(\"Pune, India\");\n expect(newCoords[0]).toBe(18.5626);\n expect(newCoords[1]).toBe(73.8087);\n });\n});\n```", "```js\n console.log(headline(\"**Alice's ADVENTURES in WoNdErLaNd**\")); \n // Alice's Adventures In Wonderland\n```", "```js\n const allTasks = {\n date: \"2017-09-22\",\n byPerson: [\n {\n responsible: \"EG\",\n tasks: [\n {id: 111, desc: \"task 111\", done: false},\n {id: 222, desc: \"task 222\", done: false}\n ]\n },\n {\n responsible: \"FK\",\n tasks: [\n {id: 555, desc: \"task 555\", done: false},\n {id: 777, desc: \"task 777\", done: true},\n {id: 999, desc: \"task 999\", done: false}\n ]\n },\n {\n responsible: \"ST\",\n tasks: [{id: 444, desc: \"task 444\", done: true}]\n }\n ]\n };\n```", "```js\nfunction getSomeResults(things) {\n return sort(group(filter(select(things))));\n};\n```"]