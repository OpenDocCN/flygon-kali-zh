["```\n# Start from latest golang parent image\nFROM golang:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n\u00a0\u00a0\u00a0\u00a0fmt.Println(\"Hello World\")\n}\n```", "```\n$ docker image build -t helloworld:v1 .\n```", "```\nREPOSITORY   TAG   IMAGE ID       CREATED          SIZE\nhelloworld   v1    23874f841e3e   10 seconds ago   805MB\n```", "```\n    $ mkdir normal-build\n    ```", "```\n    $ cd normal-build\n    ```", "```\n    $ touch welcome.go\n    ```", "```\n    $ vim welcome.go\n    ```", "```\n    package main\n    import \"fmt\"\n    func main() {\n    \u00a0\u00a0\u00a0\u00a0fmt.Println(\"Welcome to multi-stage Docker builds\")\n    }\n    ```", "```\n    $ touch Dockerfile\n    ```", "```\n    $ vim Dockerfile \n    ```", "```\n    FROM golang:latest\n    WORKDIR /myapp\n    COPY welcome.go .\n    RUN go build -o welcome .\n    ENTRYPOINT [\"./welcome\"]\n    ```", "```\n    $ docker build -t welcome:v1 .\n    ```", "```\n    $ docker image ls\n    ```", "```\n# Start from latest golang parent image\nFROM golang:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\n# Start from latest alpine parent image\nFROM alpine:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy helloworld app from current directory to container\nCOPY helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\n#!/bin/sh\n# Build the builder Docker image \ndocker image build -t helloworld-build -f Dockerfile.build .\n# Create container from the build Docker image\ndocker container create --name helloworld-build-container   helloworld-build\n# Copy build artifacts from build container to the local filesystem\ndocker container cp helloworld-build-container:/myapp/helloworld .\n# Build the runtime Docker image\ndocker image build -t helloworld .\n# Remove the build Docker container\ndocker container rm -f helloworld-build-container\n# Remove the copied artifact\nrm helloworld\n```", "```\nREPOSITORY         TAG      IMAGE ID       CREATED       SIZE\nhelloworld         latest   faff247e2b35   3 hours ago   7.6MB\nhelloworld-build   latest   f8c10c5bd28d   3 hours ago   805MB\n```", "```\n    $ mkdir builder-pattern\n    ```", "```\n    $ cd builder-pattern\n    ```", "```\n    $ touch welcome.go\n    ```", "```\n    $ vim welcome.go\n    ```", "```\n    package main\n    import \"fmt\"\n    func main() {\n    \u00a0\u00a0\u00a0\u00a0fmt.Println(\"Welcome to multi-stage Docker builds\")\n    }\n    ```", "```\n    $ touch Dockerfile.build\n    ```", "```\n    $ vim Dockerfile.build\n    ```", "```\n    FROM golang:latest\n    WORKDIR /myapp\n    COPY welcome.go .\n    RUN go build -o welcome .\n    ENTRYPOINT [\"./welcome\"]\n    ```", "```\n    $ touch Dockerfile\n    ```", "```\n    $ vim Dockerfile\n    ```", "```\n    FROM scratch\n    WORKDIR /myapp\n    COPY welcome .\n    ENTRYPOINT [\"./welcome\"]\n    ```", "```\n    $ touch build.sh\n    ```", "```\n    $ vim build.sh\n    ```", "```\n    #!/bin/sh\n    echo \"Creating welcome builder image\"\n    docker image build -t welcome-builder:v1 -f Dockerfile.build .\n    docker container create --name welcome-builder-container   welcome-builder:v1\n    docker container cp welcome-builder-container:/myapp/welcome .\n    docker container rm -f welcome-builder-container\n    echo \"Creating welcome runtime image\"\n    docker image build -t welcome-runtime:v1 .\n    rm welcome\n    ```", "```\n    $ chmod +x build.sh\n    ```", "```\n    $ ./build.sh\n    ```", "```\n    docker image ls\n    ```", "```\n# Start from latest golang parent image\nFROM golang:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Start from latest alpine parent image\nFROM alpine:latest\n# Set the working directory\nWORKDIR /myapp\n# Copy helloworld app from current directory to container\nCOPY --from=0 /myapp/helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\ndocker image build -t multi-stage:v1 .\n```", "```\nREPOSITORY    TAG      IMAGE ID       CREATED         SIZE\nmulti-stage   latest   75e1f4bcabd0   7 seconds ago   7.6MB\n```", "```\n# Start from latest golang parent image\nFROM golang:latest AS builder \n# Set the working directory\nWORKDIR /myapp\n# Copy source file from current directory to container\nCOPY helloworld.go .\n# Build the application\nRUN go build -o helloworld .\n# Start from latest alpine parent image\nFROM alpine:latest AS runtime\n# Set the working directory\nWORKDIR /myapp\n# Copy helloworld app from current directory to container\nCOPY --from=builder /myapp/helloworld .\n# Run the application\nENTRYPOINT [\"./helloworld\"]\n```", "```\nFROM golang:latest AS builder\nFROM alpine:latest AS runtime\n```", "```\nCOPY --from=builder /myapp/helloworld .\n```", "```\ndocker image build --target builder -t multi-stage-dev:v1 .\n```", "```\n    mkdir multi-stage\n    ```", "```\n    cd multi-stage\n    ```", "```\n    $ touch welcome.go\n    ```", "```\n    $ vim welcome.go\n    ```", "```\n    package main\n    import \"fmt\"\n    func main() {\n    \u00a0\u00a0\u00a0\u00a0fmt.Println(\"Welcome to multi-stage Docker builds\")\n    }\n    ```", "```\n    touch Dockerfile\n    ```", "```\n    vim Dockerfile\n    ```", "```\n    FROM golang:latest AS builder\n    WORKDIR /myapp\n    COPY welcome.go .\n    RUN go build -o welcome .\n    FROM scratch\n    WORKDIR /myapp\n    COPY --from=builder /myapp/welcome .\n    ENTRYPOINT [\"./welcome\"]\n    ```", "```\n    docker build -t welcome-optimized:v1 .\n    ```", "```\n    docker images\n    ```", "```\n$ docker run --user=9999 ubuntu:focal\n```", "```\nFROM ubuntu:focal\nRUN apt-get update \nRUN useradd demo-user\nUSER demo-user\nCMD whoami\n```", "```\nSending build context to Docker daemon  18.6MB\nStep 1/5 : FROM ubuntu:focal\n```", "```\nPASSWORDS.txt\ntmp/\n*.md\n!README.md\n```", "```\nFROM ubuntu:focal\nRUN apt-get update\nRUN apt-get install -y nginx\nRUN apt-get install -y redis-server\n```", "```\nFROM ubuntu:focal\nRUN apt-get update \\\n\u00a0\u00a0&& apt-get install -y nginx redis-server\n```", "```\nFROM ubuntu:focal\nRUN apt-get update \\\n\u00a0\u00a0&& apt-get install --no-install-recommends -y nginx \n```", "```\nFROM ubuntu:focal\nRUN apt-get update \\\n\u00a0\u00a0\u00a0\u00a0&& apt-get install --no-install-recommends -y nginx \\\n\u00a0\u00a0\u00a0\u00a0&& rm -rf /var/lib/apt/lists/*\n```", "```\npackage main\nimport (\n\u00a0\u00a0\u00a0\u00a0\"net/http\"\n\u00a0\u00a0\u00a0\u00a0\"fmt\"\n\u00a0\u00a0\u00a0\u00a0\"log\"\n\u00a0\u00a0\u00a0\u00a0\"os\"\n)\nfunc main() {\n\u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/\", defaultHandler)\n\u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/contact\", contactHandler)\n\u00a0\u00a0\u00a0\u00a0http.HandleFunc(\"/login\", loginHandler)\n\u00a0\u00a0\u00a0\u00a0port := os.Getenv(\"PORT\")\n\u00a0\u00a0\u00a0\u00a0if port == \"\" {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port = \"8080\"\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0log.Println(\"Service started on port \" + port)\n\u00a0\u00a0\u00a0\u00a0err := http.ListenAndServe(\":\"+port, nil)\n\u00a0\u00a0\u00a0\u00a0if err != nil {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0log.Fatal(\"ListenAndServe: \", err)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0}\n}\nfunc defaultHandler(w http.ResponseWriter, r *http.Request) {\n\u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"<h1>Home Page</h1>\")\n}\nfunc contactHandler(w http.ResponseWriter, r *http.Request) {\n\u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"<h1>Contact Us</h1>\")\n}\nfunc loginHandler(w http.ResponseWriter, r *http.Request) {\n\u00a0\u00a0\u00a0\u00a0fmt.Fprintf(w, \"<h1>Login Page</h1>\")\n}\n```"]