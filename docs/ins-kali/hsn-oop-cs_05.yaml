- en: Exception Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常处理
- en: 'Let''s begin this chapter by looking at two words: exception and handling.
    In English, the word **exception** refers to something unusual that doesn''t usually
    happen. In programming, the word exception has a similar meaning, but is related
    to software code. By their nature, computer programs should do only those things
    that we instruct them to do, and it is considered abnormal when a computer won''t
    or can''t follow our instructions. If the computer program fails to follow our
    instructions, it is classified as an exception in the software world.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从两个词开始：异常和处理。在英语中，**exception**一词指的是不经常发生的异常情况。在编程中，异常一词有类似的含义，但与软件代码有关。根据它们的性质，计算机程序应该只执行我们指示它们执行的操作，当计算机不能或无法遵循我们的指示时，这被认为是异常。如果计算机程序无法遵循我们的指示，它在软件世界中被归类为异常。
- en: '**Error **is another word that is heavily used in programming. It is important
    for us to understand that an error and an exception are not the same thing. An
    error refers to an incident where the software couldn''t even run. More specifically,
    an error means that the code that is written contains something wrong, and that
    is why the compiler couldn''t compile/build the code. On the other hand, an exception is
    something that happens at runtime. The easiest way to distinguish between these
    two concepts is—if the code doesn''t compile/build, then there is an error in
    your code. If the code compiles/builds, but when you run it you get some unusual
    behavior, then it''s an exception.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误**是编程中经常使用的另一个词。重要的是我们要明白错误和异常不是同一回事。错误指的是软件甚至无法运行的情况。更具体地说，错误意味着编写的代码包含错误，这就是为什么编译器无法编译/构建代码。另一方面，异常是发生在运行时的事情。区分这两个概念的最简单方法是：如果代码无法编译/构建，那么你的代码中有错误。如果代码编译/构建了，但当你运行它时出现了一些异常行为，那么这就是一个异常。'
- en: '**Exception handling** means handling/controlling/supervising exceptions that
    occur while we are running the program. The topics that we are going to explore
    in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**异常处理**意味着在运行程序时处理/控制/监督发生的异常。本章我们将探讨以下主题：'
- en: Why we need exception handling in programming
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要在编程中处理异常
- en: Exception handling in C# programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#编程中的异常处理
- en: The basics of exception handling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常处理的基础知识
- en: '`try` and `catch`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`try`和`catch`'
- en: What happens if you don't handle exceptions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不处理异常会发生什么
- en: Multiple `catch` blocks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个`catch`块
- en: What the `throw` keyword is used for
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`throw`关键字的用途'
- en: What the `finally` block does
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`finally`块的作用'
- en: Exception classes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常类
- en: Some common exception classes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些常见的异常类
- en: Exception-handling best practices
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常处理最佳实践
- en: Why we need exception handling in programming
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要在编程中处理异常
- en: Imagine that you have written some code. The code should do what you have instructed
    it to, right? But for some reason, the software is unable to execute the commands
    you have given. Maybe the software is facing some issues that make it impossible
    to run.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你已经写了一些代码。代码应该按照你的指示执行，对吧？但由于某种原因，软件无法执行你给出的命令。也许软件面临一些问题，使得它无法运行。
- en: 'For example, let''s say that you have instructed the software to read a file,
    collect data, and store it in a database. However, the software is unable to find
    the file at the location where the file is supposed to be. There could be many
    reasons why the file isn''t found there: the file may have been deleted by someone
    or may have been moved to another location. Now, what will your software do? It''s
    not smart enough to handle this situation automatically. If the software is not
    clear about its work, it will throw an exception. It is our duty as a software
    developer to tell the software what to do in these kind of situations.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您已经指示软件读取文件，收集数据并将其存储在数据库中。然而，软件无法在文件应该存在的位置找到文件。文件找不到的原因可能有很多：文件可能已被某人删除，或者可能已被移动到另一个位置。现在，你的软件会怎么做？它不够聪明以自动处理这种情况。如果软件对自己的工作不清楚，它会抛出异常。作为软件开发人员，我们有责任告诉软件在这种情况下该怎么做。
- en: The software will let us know that it is stuck and can't resolve the situation by
    passing a message. But what should it say to us? *"Help! Help!"* won't be an appropriate
    message, and this kind of message won't make the developer's life any easier.
    We need more information about the situation so that we can guide the computer
    to work accordingly. For that reason, the .NET framework has created some very
    common exceptions that occur very often in programming. If the problem that the
    software is facing has a predefined exception, it will throw that. For example,
    say that there is a program that is trying to divide a number by zero. Mathematically,
    this is not possible, but the computer has to do it because you have instructed
    it to do so. Now the computer is in big trouble; it's confused and helpless. It
    tries to divide the number by zero as you instructed, but then the compiler will
    stop it and say *"Ask for help, Mr. Program!"*, which means, *"T**hrow a* `DivideByZeroException`
    *to your master for help".* The program will then throw a `DivideByZeroException`
    and expect some code that the programmer has written to handle it. This is how
    we will actually know what exceptions we need to handle in the program. This is
    why we need exceptions in programming.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 软件会通过传递消息告诉我们它被卡住了，无法解决这种情况。但它应该对我们说什么？“救命！救命！”不是一个合适的消息，这种消息不会让开发人员的生活变得更容易。我们需要更多关于情况的信息，以便我们可以指导计算机相应地工作。因此，.NET框架创建了一些在编程中经常发生的非常常见的异常。如果软件面临的问题有预定义的异常，它会抛出该异常。例如，假设有一个程序试图将一个数字除以零。从数学上讲，这是不可能的，但计算机必须这样做，因为你已经指示它这样做。现在计算机陷入了大麻烦；它感到困惑和无助。它试图按照你的指示将数字除以零，但编译器会阻止它并说“向程序先生求助！”，这意味着“向你的主人抛出一个`DivideByZeroException`来寻求帮助”。程序将抛出一个`DivideByZeroException`，并期望程序员编写的一些代码来处理它。这就是我们实际上会知道我们需要在程序中处理哪些异常。这就是为什么我们在编程中需要异常。
- en: Exception handling in C# programming
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#编程中的异常处理
- en: The .NET framework and C# programming language have developed some powerful
    ways to handle exceptions. `System.Exceptions` is a class in .NET under the system
    namespace and has some functionality that will help you to manage exceptions that
    occur during runtime and prevent your program from crashing. If you don't handle
    exceptions properly in your code, your software will crash. This is why exception
    handling is very important in software development.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: .NET框架和C#编程语言已经开发了一些强大的方法来处理异常。`System.Exceptions`是.NET中的一个类，在系统命名空间下具有一些功能，可以帮助您管理运行时发生的异常，并防止程序崩溃。如果您在代码中没有正确处理异常，您的软件将崩溃。这就是为什么异常处理在软件开发中非常重要。
- en: Now, you might be wondering how you can handle exceptions in your code. An exception
    is something unexpected. How can you know which exception will occur in your code
    and cause the program to crash? This is a very good question, and I am sure this
    question was also asked when language developers were designing the language.
    That is why they came up with a solution for .NET that has created a very beautiful
    mechanism to handle exceptions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能想知道如何在代码中处理异常。异常是意外的事情。您如何知道在您的代码中会发生哪种异常并导致程序崩溃？这是一个很好的问题，我相信在设计语言时也会提出这个问题。这就是为什么他们为.NET提出了一个解决方案，它创建了一个非常美妙的机制来处理异常。
- en: Basics of exception handling
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常处理的基础知识
- en: 'Exception handling in C# is mainly achieved by four keywords: `try`, `catch`,
    `throw`, and `finally`. Later, we will talk about these keywords in detail. However,
    just to give you a basic idea of what is meant by those keywords, let''s briefly
    discuss them:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: C#中的异常处理主要通过四个关键字实现：`try`、`catch`、`throw`和`finally`。稍后，我们将详细讨论这些关键字。但是，为了让您对这些关键字的含义有一个基本的了解，让我们简要讨论一下：
- en: '`try`: When you are not sure of the expected behavior of a piece of code or
    if there is a possibility of an exception, you should put that code in a `try`
    block. The `try` block will throw an exception if any exception happens inside
    the code for that block. If no exception occurs, the `try` block will act like
    a normal code block. The `try` block is actually designed to throw exceptions,
    which is its main task.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`try`：当您不确定代码的预期行为或存在异常可能性时，应将该代码放入`try`块中。如果该块内部发生异常，`try`块将抛出异常。如果没有异常发生，`try`块将像普通代码块一样。`try`块实际上是设计用来抛出异常的，这是它的主要任务。'
- en: '`catch`: The `catch` block is executed when an exception is caught. Exceptions
    thrown by the `try` block will be handled by the following `catch` block. There
    could be multiple `catch` blocks for a `try` block. Each `catch` block can be
    dedicated to a particular exception. Consequently, we should write different `catch`
    blocks for different types of exception.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catch`：当捕获到异常时，将执行`catch`块。`try`块抛出的异常将由接下来的`catch`块处理。对于`try`块可以有多个`catch`块。每个`catch`块可以专门处理特定的异常。因此，我们应该为不同类型的异常编写不同的`catch`块。'
- en: '`throw`: This is used when you manually want to throw an exception. There could
    be situations in which you want to do this to control a specific kind of situation.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`throw`：当您希望手动抛出异常时使用。可能存在您希望控制特定情况的情况。'
- en: '`finally`: This is a block of code that will be compulsorily executed. It doesn''t
    matter whether the `try` block threw an exception or not—the `finally` block will
    be executed. This is mainly used to code some tasks that are essential to handle
    in any case.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`finally`：这是一段代码，将被强制执行。不管`try`块是否抛出异常，`finally`块都将被执行。这主要用于编写一些在任何情况下都必须处理的任务。'
- en: Try and catch
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试和捕获
- en: 'The `try` and `catch` keywords are the two most important keywords for exception
    handling in C#. If you write a `try` block without a `catch` block, then it won''t
    make any sense because, if a `try` block throws an exception and there is no `catch`
    block to handle it, then what is the benefit? The exception will still be unhandled.
    The `catch` block actually depends on a `try` block. A `catch` block can''t exist
    if there is no `try` block associated with it. Let''s look at how we can write
    a `try`-`catch` block:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`和`catch`关键字是C#异常处理中最重要的两个关键字。如果您编写一个没有`catch`块的`try`块，那么它就没有任何意义，因为如果`try`块抛出异常而没有`catch`块来处理它，那么有什么好处呢？异常仍然未处理。`catch`块实际上依赖于`try`块。如果没有与之关联的`try`块，`catch`块就不能存在。让我们看一下如何编写`try`-`catch`块：'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can also have more `catch` blocks for a `try` block. Let''s look at an example of
    this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以为`try`块有更多的`catch`块。让我们看一个例子：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What happens if you don't handle exceptions?
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果不处理异常会发生什么？
- en: Are exceptions really important? Are they worth the time spent handling them
    when you have tons of complexities in the logic? Yes, they are super important.
    Let's explore what will happen if you don't take care of exceptions. When an exception
    is triggered, if no code handles it, the exception goes to the system runtime.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 异常真的很重要吗？在逻辑中存在大量复杂性时，处理它们是否值得花费时间？是的，它们非常重要。让我们探讨一下如果不处理异常会发生什么。当触发异常时，如果没有代码处理它，异常将传递到系统运行时。
- en: 'Furthermore, when the system runtime faces an exception, it just terminates
    the program. So, now you understand why you should handle exceptions. If you fail
    to do this, your application might break down in the middle of running. I am sure
    you personally don''t like programs that crash while you are using them, so we
    have to be careful about writing exception-free software. Let''s look at an example
    of what happens during system runtime if the exception is not handled:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当系统运行时遇到异常时，它会终止程序。所以，现在您明白为什么您应该处理异常了。如果您未能这样做，您的应用程序可能会在运行中间崩溃。我相信您个人不喜欢在使用它们时程序崩溃，所以我们必须小心编写无异常的软件。让我们看一个例子，看看如果未处理异常会发生什么：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we run this code, then the first four times that it is run, it will perform
    perfectly and print some numbers from one to four. But after that, it will throw
    an exception of `IndexOutOfRangeException` and the system runtime will terminate
    the program.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这段代码，那么前四次运行时，它将完美执行并打印出从一到四的一些数字。但之后，它将抛出`IndexOutOfRangeException`的异常，并且系统运行时将终止程序。
- en: Multiple catch blocks
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个catch块
- en: 'It''s normal to get different types of exceptions in one `try` block. But how
    can you handle them? You should not use a general exception to do this. If you
    throw a general exception instead of throwing a specific exception, you might
    miss some important information about the exception. For this reason, the C# language
    introduced multiple `catch` blocks for a `try` block. You can specify one `catch`
    block that will be called for one type of exception, and you can create other
    `catch` blocks just after one-by-one with different exception types. When a specific
    exception is thrown, only that particular `catch` block will be executed if it
    has a dedicated `catch` block for that kind of exception. Let''s look at an example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个`try`块中获得不同类型的异常是正常的。但是你该如何处理它们呢？您不应该使用通用异常来做这个。如果您抛出通用异常而不是抛出特定异常，您可能会错过有关异常的一些重要信息。因此，C#语言为`try`块引入了多个`catch`块。您可以指定一个`catch`块，它将被一个类型的异常调用，并且您可以创建其他`catch`块，每个后面都有不同的异常类型。当抛出特定异常时，只有那个特定的`catch`块将被执行，如果它有一个专门的`catch`块来处理这种类型的异常。让我们看一个例子：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you run the preceding code, you will see that only the second `catch` block
    is executed. If you open up the console window, you will see that the following
    line has been printed out:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行上述代码，您将看到只有第二个`catch`块被执行。如果您打开控制台窗口，您将看到以下行已被打印出来：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, we can see that if you have multiple `catch` blocks, only the particular
    `catch` block that matches the type of exception that was thrown will be executed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到，如果有多个`catch`块，只有与抛出的异常类型匹配的特定`catch`块将被执行。
- en: 'Now you might be thinking, *"You said we shouldn''t use a general exception
    handler. But why is that? Yes, we might miss some information but my system isn''t
    crashing! Isn''t it better this way?"* Actually, the answer to this question is
    not straightforward. It may vary from system to system, but let me tell you why
    you want the system to crash sometimes. Suppose you have a system where you deal
    with very complex and sensitive data. When an exception happens in such a system, it
    might be very risky to allow the customer to use the software. The customer could
    do some serious damage to the data, as the exception was not handled properly.
    But yes, if you think your system will be fine if you allow the user to continue,
    even if they got an unknown exception, you can use a general `catch` block. Now
    let me show you how you can do this. If you want a `catch` block to catch any
    kind of exception, regardless of the exception type, then your `catch` block should
    accept the `Exception` class as a parameter, as shown in the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想，“你说我们不应该使用通用异常处理程序。但为什么呢？是的，我们可能会错过一些信息，但我的系统没有崩溃！这样做不是更好吗？”实际上，这个问题的答案并不直接。这可能因系统而异，但让我告诉你为什么有时候你希望系统崩溃。假设你有一个处理非常复杂和敏感数据的系统。当这样的系统发生异常时，允许客户继续使用软件可能非常危险。客户可能会对数据造成严重破坏，因为异常没有得到适当处理。但是，如果你认为即使出现未知异常，如果允许用户继续使用系统也不会有问题，你可以使用通用的`catch`块。现在让我告诉你如何做到这一点。如果你希望`catch`块捕获任何类型的异常，无论异常类型如何，那么你的`catch`块应该接受`Exception`类作为参数，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, you can also pass a `no` parameter to the `catch` block. This
    will also catch every kind of exception and execute the code in the body. An example
    of this is given in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您还可以向`catch`块传递一个`no`参数。这也将捕获每种类型的异常并执行主体中的代码。以下代码给出了一个示例：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, keep in mind that this has to be the last `catch` block, otherwise,
    there will be a runtime error.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请记住，这必须是最后一个`catch`块，否则将会出现运行时错误。
- en: Using the throw keyword
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用throw关键字
- en: 'Sometimes, in your own program, you have to create exceptions by yourself.
    No, not to take revenge on the user, but for the sake of your application. Sometimes,
    there are situations where you need to throw an exception to bypass a difficulty,
    to log something, or just redirect the flow of the software. Don''t worry: by
    doing this you are not becoming the bad guy; you are actually the hero who is
    saving the program from trouble. But how can you create an exception? To do that,
    C# has a keyword called `throw`. This keyword will help you to create an instance
    of a type of exception and throw it. Let me show you an example of the `throw`
    keyword:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在您自己的程序中，您必须自己创建异常。不，不是为了报复用户，而是为了您的应用程序。有时，有些情况下，您需要抛出异常来绕过困难，记录一些东西，或者只是重定向软件的流程。不用担心：通过这样做，您不会成为坏人；实际上，您是在拯救程序免受麻烦的英雄。但是，您如何创建异常呢？为此，C#有一个名为`throw`的关键字。这个关键字将帮助您创建异常类型的实例并抛出它。让我给你一个`throw`关键字的例子：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/19a3ed57-7485-4785-872d-de991b0338f1.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19a3ed57-7485-4785-872d-de991b0338f1.png)'
- en: You can see that, if you run the preceding code, you will get the `DivideByZeroException` `catch`
    block executed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，如果运行上述代码，将执行`DivideByZeroException` `catch`块。
- en: So, if you want to throw an exception (because you want the upper-layer `catch`
    block to handle it, for example), you simply throw a new instance of an exception.
    This could be any kind of exception, including a system exception or a self-created
    exception. Just keep in mind that there is a `catch` block that will handle it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想抛出异常（因为你希望上层的`catch`块来处理它，例如），你只需抛出一个新的异常实例。这可以是任何类型的异常，包括系统异常或自定义异常。只需记住有一个`catch`块将处理它。
- en: What does the finally block do?
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: finally块是做什么的？
- en: When we say "finally", we mean something that we were waiting for or something
    that is going to conclude the process. This is almost the same in exception handling.
    A `finally` block is a block of code that will be executed no matter what happens
    in the `try` or `catch` block. It doesn't matter what types of exception were
    thrown or whether or not they were handled, the `finally` block will be executed.
    Now you may ask, *"**Why do we need this* `finally` *block? If there is any exception
    in our program, we will handle it with the* `catch` *block! Can't we write the
    code inside the* `catch` *block instead of the* `finally` *block?"*
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说“最后”，我们指的是我们一直在等待的或者将要结束进程的东西。在异常处理中也是差不多的。`finally` 块是一段无论 `try` 或 `catch`
    块中发生了什么都会执行的代码。无论抛出了什么类型的异常，或者是否被处理，`finally` 块都会执行。现在你可能会问，"*为什么我们需要* `finally`
    *块呢？如果程序中有任何异常，我们会用* `catch` *块来处理它！我们不能把代码写在* `catch` *块里而不是* `finally` *块里吗？*"
- en: 'Yes, you can, but what happens if an exception was thrown but the `catch` block
    wasn''t triggered? This would mean that the code inside the `catch` block will
    not get executed. For this reason, the `finally` block is important. It doesn''t
    matter whether or not there was any exception; the `finally` block will run. Let
    me show you an example of the `finally` block:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以，但是如果抛出了异常而 `catch` 块没有被触发会发生什么？这意味着 `catch` 块内的代码将不会被执行。因此，`finally`
    块很重要。无论是否有异常，`finally` 块都会运行。让我给你展示一个 `finally` 块的例子：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/32173a85-0984-4cbd-acbb-cb9eb559c8e1.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32173a85-0984-4cbd-acbb-cb9eb559c8e1.png)'
- en: An important use case of the `finally` block could be when you open a database
    connection in the `try` block! You have to close this, otherwise, that connection
    will be open for the rest of the program and it will use a lot of resources. In
    addition, there are a limited number of connections a database can make, so if
    you open one and don't close it, that connection string is wasted. The best practice
    is to close the connection as soon as your work with it is complete.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`finally` 块的一个重要用例可能是在 `try` 块中打开数据库连接！你必须关闭它，否则该连接将一直保持打开状态，会占用大量资源。此外，数据库可以建立的连接数量是有限的，所以如果你打开了一个连接却没有关闭它，那么这个连接字符串就浪费了。最佳实践是在完成与连接的工作后立即关闭连接。'
- en: 'The `finally` block plays the best role here. It doesn''t matter what will
    happen in the `try` block, the `finally` block will close the connection, as shown
    in the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`finally` 块在这里发挥了最好的作用。不管在 `try` 块中发生了什么，`finally` 块都会关闭连接，如下面的代码所示：'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we are performing two main tasks in the `try` block. First, we open a
    database connection, and secondly, we perform some activity in the database. Now,
    if any exception happens while we do any of this, an exception will be thrown
    that will be handled by a `catch` block. At the very end, the `finally` block
    will close the database connection.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在 `try` 块中执行了两个主要任务。首先，我们打开了数据库连接，其次，我们在数据库中执行了一些活动。现在，如果在执行任何这些任务时发生了异常，那么异常将被
    `catch` 块处理。最后，`finally` 块将关闭数据库连接。
- en: The `finally` block is not something that you must have to have to handle exceptions,
    but you should use it if you need it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`finally` 块不是处理异常必须要有的东西，但如果需要的话，应该使用它。'
- en: Exception class
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常类
- en: 'An `exception` is simply a class in C#. This has a few properties and methods.
    The four most commonly used properties are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`exception` 简单来说就是 C# 中的一个类。它有一些属性和方法。最常用的四个属性如下：'
- en: '| **Property** | **Description** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** |'
- en: '| `Message` | This contains what the exception is about.  |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `Message` | 这包含了异常的内容。 |'
- en: '| `StackTrace` | This contains the method call-stack information. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `StackTrace` | 这包含了方法调用堆栈信息。 |'
- en: '| `TargetSite` | This gives an object that contains the method where the exception
    happened. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `TargetSite` | 这提供了一个包含发生异常的方法的对象。 |'
- en: '| `InnerException` | This gives the instance of the exception that caused the
    exception. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `InnerException` | 这提供了引起异常的异常实例。 |'
- en: Exception class properties and methods
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 异常类的属性和方法
- en: One of the most popular methods in this class is `ToString()`. This method returns
    a string that contains information about the exception. The exception is easier
    to read and understand when it is represented in string format.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类中最受欢迎的方法之一是 `ToString()`。这个方法返回一个包含异常信息的字符串。当以字符串格式表示时，异常更容易阅读和理解。
- en: 'Let''s look at an example of using these properties and methods:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用这些属性和方法的例子：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/9295d985-106f-47ac-9530-b2818991d2b0.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9295d985-106f-47ac-9530-b2818991d2b0.png)'
- en: Here, we can see that the `message` property of the exception holds the information
    `Attempted to divide by zero`. In addition, the `ToString()` method gives a lot
    of information about the exception. These properties and methods will help you
    a lot when handling exceptions in your program.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到异常的 `message` 属性包含了信息 `Attempted to divide by zero`。此外，`ToString()`
    方法提供了大量关于异常的信息。这些属性和方法在处理程序中处理异常时会帮助你很多。
- en: Some common exception classes
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些常见的异常类
- en: 'There are many exception classes available in .NET Framework. The .NET Framework
    team created these to make the developer''s life easier. The .NET Framework provides
    specific information about the exceptions. The following are some of the most
    common exception classes:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework 中有许多异常类可用。.NET Framework 团队创建了这些类来简化开发人员的生活。.NET Framework 提供了关于异常的具体信息。以下是一些常见的异常类：
- en: '| **Exception Class** | **Description** |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| **异常类** | **描述** |'
- en: '| `DivideByZeroException` | This exception is thrown when any number is divided
    by zero. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `DivideByZeroException` | 当任何数字被零除时，会抛出此异常。 |'
- en: '| `IndexOutOfRangeException` | This exception is thrown when the application
    tries to use an index of an array that doesn''t exist. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `IndexOutOfRangeException` | 当应用程序尝试使用不存在的数组索引时，会抛出此异常。 |'
- en: '| `InvalidCastException` | This exception is thrown when trying to perform
    invalid casting. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `InvalidCastException` | 当尝试执行无效转换时，会引发此异常。 |'
- en: '| `NullReferenceException` | This exception is thrown when trying to use or
    access a null reference type. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `NullReferenceException` | 当尝试使用或访问空引用类型时，会引发此异常。 |'
- en: Different exception classes of .NET framework
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: .NET框架的不同异常类
- en: 'Let''s look at an example in which one of these exception classes is used.
    In this example, we are using the `IndexOutOfRange` exception class:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例，其中使用了这些异常类中的一个。在这个例子中，我们使用了`IndexOutOfRange`异常类：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/2ae2fd64-2e62-4365-aa7c-23b2e7104ae7.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ae2fd64-2e62-4365-aa7c-23b2e7104ae7.png)'
- en: User-defined exceptions
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户定义的异常
- en: 'Sometimes, you''ll encounter a situation where you might think that the predefined
    exceptions do not satisfy your condition. In this instance, you might wish there
    was a way to create your own exception classes and use them. Thankfully, in C#,
    there is actually a mechanism where you can create your own custom exceptions,
    and can write whatever message is appropriate for that kind of exception. Let''s
    look at an example of how to create and use custom exceptions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能会遇到一种情况，认为预定义的异常不满足您的条件。在这种情况下，您可能希望有一种方法来创建自己的异常类并使用它们。值得庆幸的是，在C#中，实际上有一种机制可以创建自定义异常，并且可以编写适用于该类型异常的任何消息。让我们看一个创建和使用自定义异常的示例：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/b38a2822-1170-4403-8bfe-b6e93aea6a89.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b38a2822-1170-4403-8bfe-b6e93aea6a89.png)'
- en: 'So, we can see from the preceding example that you just have to create a class
    that will extend the `Exception` class. This class should have three constructors:
    one shouldn''t take any parameter, one should take a string and pass it to the
    base, and one should take a string and an exception and pass it to the base.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以从上面的示例中看到，您只需创建一个将扩展`Exception`类的类。该类应该有三个构造函数：一个不应该带任何参数，一个应该带一个字符串并将其传递给基类，一个应该带一个字符串和一个异常并将其传递给基类。
- en: Using a custom exception is like using any other built-in exception provided
    by .NET Framework.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义异常就像使用.NET Framework提供的任何其他内置异常一样。
- en: The exception filter
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常筛选器
- en: 'The exception filter feature isn''t very old at the time of writing—it was
    introduced in C# 6\. The main benefit of this is that you can catch more specific
    exceptions in a block. Let''s look at an example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，异常筛选器功能并不是很古老——它是在C# 6中引入的。其主要好处是可以在一个块中捕获更具体的异常。让我们看一个例子：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/0742e721-1391-4da1-89eb-707e2c898206.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0742e721-1391-4da1-89eb-707e2c898206.png)'
- en: To filter out exceptions, you have to use the `when` keyword just next to the
    `catch` declaration line. So first, when any exception is thrown, it will check
    what type of exception it is and then check the condition provided after the `when`
    keyword. In our example, the exception type is `IndexOutOfRangeException` and
    the condition is `ex.Message == "Index was outside the bounds of the array."`.
    We can see that, when the code ran, only that particular `catch` block was executed,
    which fulfilled all the conditions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要筛选异常，必须在`catch`声明行的旁边使用`when`关键字。因此，当抛出任何异常时，它将检查异常的类型，然后检查`when`关键字之后提供的条件。在我们的示例中，异常类型是`IndexOutOfRangeException`，条件是`ex.Message
    == "Index was outside the bounds of the array."`。我们可以看到，当代码运行时，只有满足所有条件的特定`catch`块被执行。
- en: Exception handling best practices
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常处理最佳实践
- en: 'As you can see, there are different ways in which you can handle exceptions:
    sometimes you can throw exceptions, sometimes you can use the `finally` block,
    and sometimes you can use multiple `catch` blocks. Consequently, there is a chance
    that you can get confused at the beginning if you don''t have enough experience
    with exception handling. But thanks to the C# community, there are some best practices
    for exception handling. Let''s have a look at some of them:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，处理异常有不同的方式：有时可以抛出异常，有时可以使用`finally`块，有时可以使用多个`catch`块。因此，如果您对异常处理没有足够的经验，可能会在开始时感到困惑。但幸运的是，C#社区为异常处理提供了一些最佳实践。让我们看看其中一些：
- en: Use a `finally` block to close/clean up dependent resources that could cause
    a problem in the future.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`finally`块关闭/清理可能会在将来引起问题的依赖资源。
- en: Catch the specific exception and handle it properly. Use multiple `catch` blocks
    if needed.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获特定异常并正确处理。如果需要，可以使用多个`catch`块。
- en: Create your own exceptions if needed and use them.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如有需要，创建并使用自定义异常。
- en: Handle exceptions as soon as possible.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽快处理异常。
- en: Don't use a general exception handler if you can handle an exception using a
    specific handler.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可以使用特定处理程序处理异常，则不要使用通用异常处理程序。
- en: The exception messages should be very clear.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常消息应该非常清晰。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We all dream of a perfect world where there are no errors or unexpected situations,
    but in reality, this is impossible. Software development is also not free from
    errors and exceptions. Software developers don't want their software to break
    down, but unexpected exceptions happen every now and then. Consequently, handling
    these exceptions is necessary for developing awesome software. In this chapter,
    we familiarized ourselves with what an exception is in software development. We
    have also learned how to handle exceptions, why we need to handle exceptions,
    how to create custom exceptions, and many other important topics. When implementing
    exception handling in your application, try to follow best practices so that you
    get an application that runs smoothly.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都梦想着一个没有错误或意外情况的完美世界，但现实中这是不可能的。软件开发也不免于错误和异常。软件开发人员不希望他们的软件崩溃，但意外异常时有发生。因此，处理这些异常对于开发出色的软件是必要的。在本章中，我们熟悉了软件开发中异常的概念。我们还学习了如何处理异常，为什么需要处理异常，如何创建自定义异常以及许多其他重要主题。在应用程序中实施异常处理时，请尽量遵循最佳实践，以确保应用程序运行顺畅。
