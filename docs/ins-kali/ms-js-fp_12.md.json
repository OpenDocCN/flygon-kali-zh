["```js\n// firstToUpper :: String \u2192 String\nconst firstToUpper = s => s[0].toUpperCase() + s.substr(1).toLowerCase();\n\n// Math.random :: () \u2192 Number\n```", "```js\n// sum3C :: Number \u2192 Number \u2192 Number \u2192 Number\nconst sum3C = curry((a, b, c) => a + b + c);\n\n// sum3 :: (Number, Number, Number) \u2192 Number\nconst sum3 = (a, b, c) => a + b + c;\n```", "```js\n// sum3C :: Number \u2192 (Number \u2192 (Number \u2192 (Number)))\n```", "```js\n// map :: [a] \u2192 (a \u2192 b) \u2192  [b]\nconst map = curry((arr, fn) => arr.map(fn));\n```", "```js\n// filter :: [a] \u2192 (a \u2192 Boolean) \u2192 [a]\nconst filter = curry((arr, fn) => arr.filter(fn));\n```", "```js\n// reduce :: [a] \u2192 (b \u2192 a \u2192 b) \u2192 b \u2192 b\nconst reduce = curry((arr, fn, acc) => arr.reduce(fn, acc));\n```", "```js\n// String.repeat :: String \u21dd Number \u2192 String\n```", "```js\n// getField :: String \u2192 attr \u2192 a | undefined\nconst getField = attr => obj => obj[attr];\n```", "```js\n// Sortable :: Number | String | Boolean\n```", "```js\n// compareFunction :: (Sortable, Sortable) \u2192 Number\n```", "```js\n// compareFunction :: Sortable a \u21d2 (a, a) \u2192 Number\n```", "```js\n// compareFunction :: \n// ((Number, Number) | (String, String) | (Boolean, Boolean)) \u2192 Number\n```", "```js\n// unary :: ((b, ...) \u2192 a) \u2192 (b \u2192 a) \nconst unary = fn => (...args) => fn(args[0]);\n```", "```js\n// parseInt :: (String, Number?) -> Number\n```", "```js\n// Boolean.map :: Boolean \u21dd (Boolean \u2192 a) \u2192 Boolean\nBoolean.prototype.map = function(fn) {\n return !!fn(this);\n};\n```", "```js\n// Number.map :: Number \u21dd (Number \u2192 a) \u2192 Number\nNumber.prototype.map = function(fn) {\n return Number(fn(this));\n};\n\n// String.map :: String \u21dd (String \u2192 a) \u2192 String\n**String.prototype.map** = function(fn) {\n return **String(fn(this))**;\n}; \n```", "```js\n// Function.map :: (a \u2192 b) \u21dd (b \u2192 c) \u2192 (a \u2192 c)\nFunction.prototype.map = function(fn) {\n return (...args) => fn(this(...args));\n};\n```", "```js\nconst plus1 = x => x + 1;\nconst by10 = y => 10 * y;\n\nconsole.log(plus1.map(by10)(3));\n// 40: first add 1 to 3, then multiply by 10\n```", "```js\nconst VALUE = Symbol(\"Value\");\n\nclass Container {\n constructor(x) {\n this[VALUE] = x;\n }\n\n map(fn) {\n return fn(this[VALUE]);\n }\n}\n```", "```js\nclass Container {\n // \n // *everything as above*\n //\n\n    static of(x) {\n return new Container(x);\n }\n\n    toString() {\n return `${this.constructor.name}(${this[VALUE]})`;\n }\n\n    valueOf() {\n return this[VALUE];\n }\n}\n```", "```js\nclass Functor extends Container {\n static of(x) {\n return new Functor(x);\n }\n\n map(fn) {\n return Functor.of(fn(this[VALUE]));\n }\n}\n```", "```js\nof :: Functor f \u21d2 a \u2192 f a \nFunctor.toString :: Functor f \u21d2 f a \u21dd String\nFunctor.valueOf :: Functor f \u21d2 f a \u21dd a\nFunctor.map :: Functor f \u21d2 f a \u21dd (a \u2192 b) \u2192 f a \u2192 f b\n```", "```js\nclass Nothing extends Functor {\n isNothing() {\n return true;\n }\n\n toString() {\n return \"Nothing()\";\n }\n\n    map(fn) {\n        return this;\n }\n}\n\nclass Just extends Functor {\n isNothing() {\n return false;\n }\n\n    map(fn) {\n        return Maybe.of(fn(this[VALUE]));\n }\n}\n\nclass Maybe extends Functor {\n    constructor(x) {\n        return x === undefined || x === null\n ? new Nothing()\n : new Just(x);\n }\n\n static of(x) {\n return new Maybe(x);\n }\n}\n```", "```js\nconst plus1 = x => x + 1;\n\nMaybe.of(2209).map(plus1).map(plus1).toString(); // *\"Just(2211)\"*\nMaybe.of(null).map(plus1).map(plus1).toString(); // *\"Nothing()\"*\n```", "```js\nconst request = require(\"superagent\");\n\nconst getAlerts = (lat, long, callback) => {\n const SERVER = \"https://api.darksky.net/forecast\";\n const UNITS = \"units=si\";\n const EXCLUSIONS = \"exclude=minutely,hourly,daily,flags\";\n const API_KEY = \"*you.need.to.get.your.own.api.key*\";\n\n request\n .get(`${SERVER}/${API_KEY}/${lat},${long}?${UNITS}&${EXCLUSIONS}`)\n .end(function(err, res) {\n if (err) {\n                callback({});\n } else {\n                callback(JSON.parse(res.text));\n }\n });\n};\n```", "```js\n{\n latitude: 29.76,\n longitude: -95.37,\n timezone: \"America/Chicago\",\n offset: -5,\n currently: {\n time: 1503660334,\n summary: \"Drizzle\",\n icon: \"rain\",\n temperature: 24.97,\n ...\n uvIndex: 0\n },\n alerts: [\n {\n title: \"Tropical Storm Warning\",\n regions: [\"Harris\"],\n severity: \"warning\",\n time: 1503653400,\n expires: 1503682200,\n description:\n \"TROPICAL STORM WARNING REMAINS IN EFFECT... WIND - LATEST LOCAL FORECAST: Below tropical storm force wind ... CURRENT THREAT TO LIFE AND PROPERTY: Moderate ... Locations could realize roofs peeled off buildings, chimneys toppled, mobile homes pushed off foundations or overturned ...\",\n uri:\n \"https://alerts.weather.gov/cap/wwacapget.php?x=TX125862DD4F88.TropicalStormWarning.125862DE8808TX.HGXTCVHGX.73ee697556fc6f3af7649812391a38b3\"\n },\n ...\n {\n title: \"Hurricane Local Statement\",\n regions: [\"Austin\",...,\"Wharton\"],\n severity: \"advisory\",\n time: 1503748800,\n expires: 1503683100,\n description:\n \"This product covers Southeast Texas **HURRICANE HARVEY DANGEROUSLY APPROACHING THE TEXAS COAST** ... The next local statement will be issued by the National Weather Service in Houston/Galveston TX around 1030 AM CDT, or sooner if conditions warrant.\\n\",\n uri:\n \"https://alerts.weather.gov/cap/wwacapget.php?...\"\n }\n ]\n};\n```", "```js\nconst getField = attr => obj => obj[attr];\nconst os = require(\"os\");\n\nconst produceAlertsTable = weatherObj =>\n    Maybe.of(weatherObj)\n .map(getField(\"alerts\"))\n .map(a =>\n a.map(\n x =>\n `<tr><td>${x.title}</td>` +\n `<td>${x.description.substr(0, 500)}...</td></tr>`\n )\n )\n .map(a => a.join(os.EOL))\n .map(s => `<table>${s}</table>`)\n\ngetAlerts(29.76, -95.37, x =>\n    console.log(produceAlertsTable(x).valueOf())\n);\n```", "```js\n**<table><tr><td>**Tropical Storm Warning**</td><td>**...TROPICAL STORM WARNING REMAINS IN EFFECT... ...STORM SURGE WATCH REMAINS IN EFFECT... * WIND - LATEST LOCAL FORECAST: Below tropical storm force wind - Peak Wind Forecast: 25-35 mph with gusts to 45 mph - CURRENT THREAT TO LIFE AND PROPERTY: Moderate - The wind threat has remained nearly steady from the previous assessment. - Emergency plans should include a reasonable threat for strong tropical storm force wind of 58 to 73 mph. - To be safe, earnestly prepare for the potential of significant...**</td></tr>** \n**<tr><td>**Flash Flood Watch**</td><td>**...FLASH FLOOD WATCH REMAINS IN EFFECT THROUGH MONDAY MORNING... The Flash Flood Watch continues for * Portions of Southeast Texas...including the following counties...Austin...Brazoria...Brazos...Burleson... Chambers...Colorado...Fort Bend...Galveston...Grimes... Harris...Jackson...Liberty...Matagorda...Montgomery...Waller... Washington and Wharton. * Through Monday morning * Rainfall from Harvey will cause devastating and life threatening flooding as a prolonged heavy rain and flash flood thre...**</td></tr>** \n**<tr><td>**Hurricane Local Statement**</td><td>**This product covers Southeast Texas **PREPARATIONS FOR HARVEY SHOULD BE RUSHED TO COMPLETION THIS MORNING** NEW INFORMATION --------------- * CHANGES TO WATCHES AND WARNINGS: - None * CURRENT WATCHES AND WARNINGS: - A Tropical Storm Warning and Storm Surge Watch are in effect for Chambers and Harris - A Tropical Storm Warning is in effect for Austin, Colorado, Fort Bend, Liberty, Waller, and Wharton - A Storm Surge Warning and Hurricane Warning are in effect for Jackson and Matagorda - A Storm S...**</td></tr></table>** \n```", "```js\nclass Maybe extends Functor {\n //\n // *everything as before...*\n //\n    orElse(v) {\n return this.isNothing() ? v : this.valueOf();\n }\n}\n```", "```js\ngetAlerts(-34.9, -54.6, x =>\n console.log(\n produceAlertsTable(x).orElse(\"<span>No alerts today.</span>\")\n )\n);\n```", "```js\nconst fakeSearchForSomething = key => {\n if (key % 2 === 0) {\n return {key, some: \"whatever\", other: \"more data\"};\n } else {\n throw new Error(\"Not found\");\n }\n};\n\nconst findSomething = key => {\n try {\n const something = fakeSearchForSomething(key);\n return Maybe.of(something);\n } catch (e) {\n return Maybe.of(null);\n }\n};\n\nconst getSome = something => Maybe.of(something.map(getField(\"some\")));\n\nconst getSomeFromSomething = key => getSome(findSomething(key));\n```", "```js\nlet xxx = getSomeFromSomething(2222).valueOf().valueOf(); // *\"whatever\"*\nlet yyy = getSomeFromSomething(9999).valueOf().valueOf(); // *null*\n```", "```js\nclass Monad extends Functor {\n static of(x) {\n return new Monad(x);\n }\n\n map(fn) {\n return Monad.of(fn(this[VALUE]));\n }\n\n    unwrap() {\n const myValue = this[VALUE];\n return myValue instanceof Container ? myValue.unwrap() : this;\n }\n}\n```", "```js\nconst getSomeFromSomething = key => getSome(findSomething(key)).unwrap();\n```", "```js\nclass Monad extends Functor {\n //\n // *everything as before...*\n //\n    chain(fn) {\n return this.map(fn).unwrap();\n }\n}\n```", "```js\nconst add = x => y => x+y; // *or* curry((x,y) => x+y)\nconst something = **Monad.of(2).map(add)**;\n```", "```js\nclass Monad extends Functor {\n //\n // *everything as earlier...*\n //\n    ap(m) {\n return m.map(this.valueOf());\n }\n}\n```", "```js\nconst monad5 = something.ap(Monad.of(3)); // Monad(5)\n```", "```js\nclass Left extends Monad {\n    isLeft() {\n return true;\n }\n\n    map(fn) {\n        return this;\n }\n}\n\nclass Right extends Monad {\n    isLeft() {\n return false;\n }\n\n    map(fn) {\n        return Either.of(null, fn(this[VALUE]));\n }\n}\n\nclass Either extends Monad {\n    constructor(left, right) {\n return right === undefined || right === null\n ? new Left(left)\n : new Right(right);\n }\n\n static of(left, right) {\n return new Either(left, right);\n }\n}\n```", "```js\nconst getAlerts2 = (lat, long, callback) => {\n const SERVER = \"https://api.darksky.net/forecast\";\n const UNITS = \"units=si\";\n const EXCLUSIONS = \"exclude=minutely,hourly,daily,flags\";\n const API_KEY = \"you.have.to.get.your.own.key\";\n\n request\n .get(`${SERVER}/${API_KEY}/${lat},${long}?${UNITS}&${EXCLUSIONS}`)\n .end((err, res) =>\n callback(\n err\n ? Either.of(\"AJAX FAILURE\", null)\n : Either.of(null, JSON.parse(res.text))\n )\n );\n};\n```", "```js\nconst produceAlertsTable2 = weatherObj => {\n return weatherObj\n        .chain(obj => {\n const alerts = getField(\"alerts\")(obj);\n            return alerts\n ? Either.of(null, alerts)\n : Either.of(\"NO ALERTS\", null);\n })\n        .chain(a =>\n a.map(\n x =>\n `<tr><td>${x.title}</td>` +\n `<td>${x.description.substr(0, 500)}...</td></tr>`\n )\n )\n        .chain(a => a.join(os.EOL))\n        .chain(s => `<table>${s}</table>`);\n};\n```", "```js\n// *Houston, TX, US:*\ngetAlerts2(29.76, -95.37, x => console.log(produceAlertsTable2(x).toString()));\nRight(\"...*a table with alerts: lots of HTML code*...\");\n\n// *Montevideo, UY*\ngetAlerts2(-34.9, -54.6, x => console.log(produceAlertsTable2(x).toString()));\nLeft(\"NO ALERTS\");\n\n// *A point with wrong coordinates*\ngetAlerts2(444, 555, x => console.log(produceAlertsTable2(x).toString()));\nLeft(\"AJAX FAILURE\");\n```", "```js\nclass Try extends Either {\n constructor(fn, msg) {\n try {\n return Either.of(null, fn());\n } catch (e) {\n return Either.of(msg || e, null);\n }\n }\n\n static of(fn, msg) {\n return new Try(fn, msg);\n }\n}\n```", "```js\n// getField :: String \u2192 attr \u2192 a | undefined\nconst getField = attr => obj => obj[attr];\n```", "```js\nconst getField2 = attr => obj => Try.of(() => obj[attr], \"NULL OBJECT\");\n\nconst x = getField2(\"somefield\")(null);\nconsole.log(x.isLeft()); // true\nconsole.log(x.toString()); // Left(NULL OBJECT)\n```", "```js\nPromise.prototype.ap = function(promise2) {\n return this.then(x => promise2.map(x));\n};\n```", "```js\ndata Tree a = Nil | Node a (Tree a) (Tree a)\n```", "```js\nempty :: Tree a -> Bool\nempty Nil = True\nempty (Node root left right) = False\n```", "```js\ncontains :: (Ord a) => (Tree a) -> a -> Bool\ncontains Nil _ = False\ncontains (Node root left right) x \n        | x == root = True\n        | x  < root = contains left x \n        | x  > root = contains right x\n```", "```js\nconst myTree = Tree(\n 22,\n Tree(\n 9,\n Tree(4, EmptyTree(), EmptyTree()),\n Tree(12, EmptyTree(), EmptyTree())\n ),\n Tree(\n 60,\n Tree(56, EmptyTree(), EmptyTree()),\n EmptyTree()\n )\n);\n```", "```js\nconst myRoot = myTree((value, left, right) => value, () => null);\n```", "```js\nconst treeCount = aTree => aTree(\n    (value, left, right) => 1 + treeCount(left) + treeCount(right),\n () => 0\n);\nconsole.log(treeCount(myTree));\n```", "```js\nconst Tree = (value, left, right) => (destructure, __) =>\n destructure(value, left, right);\n\nconst EmptyTree = () => (__, destructure) => destructure();\n```", "```js\nconst treeRoot = tree => tree((value, left, right) => value, () => null);\nconst treeLeft = tree => tree((value, left, right) => left, () => null);\nconst treeRight = tree => tree((value, left, right) => right, () => null);\n```", "```js\nconst treeIsEmpty = tree => tree(() => false, () => true);\n```", "```js\nconst treeToObject = tree =>\n tree((value, left, right) => {\n const leftBranch = treeToObject(left);\n const rightBranch = treeToObject(right);\n const result = { value };\n if (leftBranch) {\n result.left = leftBranch;\n }\n if (rightBranch) {\n result.right = rightBranch;\n }\n return result;\n }, () => null);\n```", "```js\nconsole.log(treeToObject(myTree));\n{\n value: 22,\n left: {\n value: 9,\n left: {\n value: 4\n },\n right: {\n value: 12\n }\n },\n right: {\n value: 60,\n left: {\n value: 56\n }\n }\n}\n```", "```js\nconst treeSearch = (findValue, tree) =>\n tree(\n (value, left, right) =>\n            findValue === value\n ? true\n : findValue < value\n ? treeSearch(findValue, left)\n : treeSearch(findValue, right),\n () => false\n );\n```", "```js\nconst treeInsert = (newValue, tree) =>\n tree(\n (value, left, right) =>\n newValue <= value\n ? Tree(value, treeInsert(newValue, left), right)\n : Tree(value, left, treeInsert(newValue, right)),\n () => Tree(newValue, EmptyTree(), EmptyTree())\n );\n```", "```js\nlet myTree = EmptyTree();\nmyTree = treeInsert(22, myTree);\nmyTree = treeInsert(9, myTree);\nmyTree = treeInsert(60, myTree);\nmyTree = treeInsert(12, myTree);\nmyTree = treeInsert(4, myTree);\nmyTree = treeInsert(56, myTree);\n\n// *The resulting tree is:*\n{\n value: 22,\n left: { value: 9, left: { value: 4 }, right: { value: 12 } },\n right: { value: 60, left: { value: 56 } }\n};\n```", "```js\nconst compare = (obj1, obj2) =>\n    obj1.key === obj2.key ? 0 : obj1.key < obj2.key ? -1 : 1;\n\nconst treeInsert2 = (comparator, newValue, tree) =>\n tree(\n (value, left, right) =>\n            comparator(newValue, value) === 0\n? Tree(newValue, left, right)\n : comparator(newValue, value) < 0\n ? Tree(\n value,\n treeInsert2(comparator, newValue, left),\n right\n )\n : Tree(\n value,\n left,\n treeInsert2(comparator, newValue, right)\n ),\n () => Tree(newValue, EmptyTree(), EmptyTree())\n );\n```", "```js\nconst treeMap = (fn, tree) =>\n tree(\n (value, left, right) =>\n            Tree(fn(value), treeMap(fn, left), treeMap(fn, right)),\n () => EmptyTree()\n );\n```", "```js\n const List = (head, tail) => (destructure, __) => \n destructure(head, tail);\n const EmptyList = () => (__, destructure) => destructure();\n```", "```js\n const listHead = list => list((head, __) => head, () => null);\n const listTail = list => list((__, tail) => tail, () => null);\n const listIsEmpty = list => (() => false, () => true);\n const listSize = list => list((head, tail) => 1 + listSize(tail), \n () => 0);\n```"]