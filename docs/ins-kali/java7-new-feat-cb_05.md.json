["```java\n    static final long kiloByte = 1024;\n    public static void main(String[] args) throws IOException {\n    String format = \"%-16s %-20s %-8s %-8s %12s %12s %12s\\n\";\n    System.out.printf(format,\"Name\", \"Filesystem\", \"Type\",\n    \"Readonly\", \"Size(KB)\", \"Used(KB)\",\n    \"Available(KB)\");\n    FileSystem fileSystem = FileSystems.getDefault();\n    }\n\n    ```", "```java\n    for (FileStore fileStore : fileSystem.getFileStores()) {\n    try {\n    long totalSpace = fileStore.getTotalSpace() / kiloByte;\n    long usedSpace = (fileStore.getTotalSpace() -\n    fileStore.getUnallocatedSpace()) / kiloByte;\n    long usableSpace = fileStore.getUsableSpace() / kiloByte;\n    String name = fileStore.name();\n    String type = fileStore.type();\n    boolean readOnly = fileStore.isReadOnly();\n    NumberFormat numberFormat = NumberFormat.getInstance();\n    System.out.printf(format,\n    name, fileStore, type, readOnly,\n    numberFormat.format(totalSpace),\n    numberFormat.format(usedSpace),\n    numberFormat.format(usableSpace));\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    FileSystem fileSystem = FileSystems.getDefault();\n    FileSystemProvider provider = fileSystem.provider();\n    System.out.println(\"Provider: \" + provider.toString());\n    System.out.println(\"Open: \" + fileSystem.isOpen());\n    System.out.println(\"Read Only: \" + fileSystem.isReadOnly());\n    Iterable<Path> rootDirectories = fileSystem.getRootDirectories();\n    System.out.println();\n    System.out.println(\"Root Directories\");\n    for (Path path : rootDirectories) {\n    System.out.println(path);\n    }\n    Iterable<FileStore> fileStores = fileSystem.getFileStores();\n    System.out.println();\n    System.out.println(\"File Stores\");\n    for (FileStore fileStore : fileStores) {\n    System.out.println(fileStore.name());\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    try {\n    Path path = Paths.get(\"/home\");\n    ListFiles listFiles = new ListFiles();\n    Files.walkFileTree(path, listFiles);\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    class ListFiles extends SimpleFileVisitor<Path> {\n    private final int indentionAmount = 3;\n    private int indentionLevel;\n    public ListFiles() {\n    indentionLevel = 0;\n    }\n    private void indent() {\n    for(int i=0 ; i<indentionLevel; i++) { {\n    System.out.print(' ');\n    }\n    }\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) {\n    indent();\n    System.out.println(\"Visiting file:\" + file.getFileName());\n    return FileVisitResult.CONTINUE;\n    }\n    @Override\n    public FileVisitResult postVisitDirectory(Path directory, IOException e) throws IOException {\n    indentionLevel -= indentionAmount;\n    indent();\n    System.out.println(\"Finished with the directory: \" + directory.getFileName());\n    return FileVisitResult.CONTINUE;\n    }\n    @Override\n    public FileVisitResult preVisitDirectory(Path directory, BasicFileAttributes attributes) throws IOException {\n    indent();\n    System.out.println(\"About to traverse the directory: \" + directory.getFileName());\n    indentionLevel += indentionAmount;\n    return FileVisitResult.CONTINUE;\n    }\n    SimpleFileVisitor classusing, for filesystem traverse@Override\n    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n    System.out.println(\"A file traversal error ocurred\");\n    return super.visitFileFailed(file, exc);\n    }\n    }\n\n    ```", "```java\n    try {\n    Files.walkFileTree(Paths.get(\"/home\"), new DeleteDirectory());\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\n    public class DeleteDirectory extends SimpleFileVisitor<Path> {\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes)\n    throws IOException {\n    System.out.println(\"Deleting \" + file.getFileName());\n    Files.delete(file);\n    return FileVisitResult.CONTINUE;\n    }\n    @Override\n    public FileVisitResult postVisitDirectory(Path directory, IOException exception)\n    throws IOException {\n    if (exception == null) {\n    System.out.println(\"Deleting \" + directory.getFileName());\n    Files.delete(directory);\n    return FileVisitResult.CONTINUE;\n    }\n    else {\n    throw exception;\n    }\n    }\n    }\n\n    ```", "```java\n    try {\n    Path source = Paths.get(\"/home\");\n    Path target = Paths.get(\"/backup\");\n    Files.walkFileTree(source,\n    EnumSet.of(FileVisitOption.FOLLOW_LINKS),\n    Integer.MAX_VALUE,\n    new CopyDirectory(source, target));\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\n    public class CopyDirectory extends SimpleFileVisitor<Path> {\n    private Path source;\n    private Path target;\n    public CopyDirectory(Path source, Path target) {\n    this.source = source;\n    this.target = target;\n    }\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) throws IOException {\n    SimpleFileVisitor classusing, for directory copySystem.out.println(\"Copying \" + source.relativize(file));\n    Files.copy(file, target.resolve(source.relativize(file)));\n    return FileVisitResult.CONTINUE;\n    }\n    @Override\n    public FileVisitResult preVisitDirectory(Path directory, BasicFileAttributes attributes) throws IOException {\n    Path targetDirectory = target.resolve(source.relativize(directory));\n    try {\n    System.out.println(\"Copying \" + source.relativize(directory));\n    Files.copy(directory, targetDirectory);\n    }\n    catch (FileAlreadyExistsException e) {\n    if (!Files.isDirectory(targetDirectory)) {\n    throw e;\n    }\n    }\n    return FileVisitResult.CONTINUE;\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    Path directory = Paths.get(\"/home\");\n    try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(directory)) {\n    for (Path file : directoryStream) {\n    System.out.println(file.getFileName());\n    }\n    }\n    catch (IOException | DirectoryIteratorException ex) {\n    ex.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    Path directory = Paths.get(\"C:/Program Files/Java/jdk1.7.0/bin\");\n    try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(directory,\"java*.exe\")) {\n    for (Path file : directoryStream) {\n    System.out.println(file.getFileName());\n    }\n    }\n    catch (IOException | DirectoryIteratorException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\nPath directory = Paths.get(\"C:/Program Files/Java/jdk1.7.0/bin\");\nPathMatcher pathMatcher = FileSystems.getDefault().getPathMatcher(\"glob:java?.exe\");\ntry (DirectoryStream<Path> directoryStream =\nFiles.newDirectoryStream(directory,\"java*.exe\")) {\nfor (Path file : directoryStream) {\nif(pathMatcher.matches(file.getFileName())) {\nSystem.out.println(file.getFileName());\n}\n}\n}\ncatch (IOException | DirectoryIteratorException ex) {\nex.printStackTrace();\n}\n\n```", "```java\n    DirectoryStream.Filter<Path> filter = new DirectoryStream.Filter<Path>() {\n    public boolean accept(Path file) throws IOException {\n    return (Files.isHidden(file));\n    }\n    };\n    Path directory = Paths.get(\"C:/Windows\");\n    try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(directory,filter)){\n    own directory filterwritingfor (Path file : directoryStream) {\n    System.out.println(file.getFileName());\n    }\n    }\n    catch (IOException | DirectoryIteratorException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\n    try {\n    FileSystem fileSystem = FileSystems.getDefault();\n    WatchService watchService = fileSystem.newWatchService();\n    Path directory = Paths.get(\"/home/docs\");\n\n    ```", "```java\n    WatchEvent.Kind<?>[] events = {\n    StandardWatchEventKinds.ENTRY_CREATE,\n    StandardWatchEventKinds.ENTRY_DELETE,\n    StandardWatchEventKinds.ENTRY_MODIFY};\n    directory.register(watchService, events);\n\n    ```", "```java\n    while (true) {\n    System.out.println(\"Waiting for a watch event\");\n    WatchKey watchKey = watchService.take();\n    System.out.println(\"Path being watched: \" + watchKey.watchable());\n    System.out.println();\n    if (watchKey.isValid()) {\n    for (WatchEvent<?> event : watchKey.pollEvents()) {\n    System.out.println(\"Kind: \" + event.kind());\n    System.out.println(\"Context: \" + event.context());\n    System.out.println(\"Count: \" + event.count());\n    System.out.println();\n    }\n    boolean valid = watchKey.reset();\n    if (!valid) {\n    // The watchKey is not longer registered\n    }\n    }\n    }\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n    catch (InterruptedException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\n    Map<String, String> attributes = new HashMap<>();\n    attributes.put(\"create\", \"true\");\n    try {\n    URI zipFile = URI.create(\"jar:file:/home.zip\");\n    try (FileSystem zipFileSys = FileSystems.newFileSystem(zipFile, attributes);) {\n    Path path = zipFileSys.getPath(\"docs\");\n    Files.createDirectory(path);\n    try (DirectoryStream<Path> directoryStream =\n    Files.newDirectoryStream(zipFileSys.getPath(\"/\"));) {\n    for (Path file : directoryStream) {\n    System.out.println(file.getFileName());\n    }\n    }\n    }\n    }\n    catch (IOException e) {\n    e.printStackTrace();\n    }\n\n    ```"]