- en: Working with Container Orchestration Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与容器编排引擎合作
- en: In this chapter, we will be looking at the **Container Orchestration Engine** (**COE**).
    Container Orchestration Engines are tools which help in managing many containers
    running on multiple hosts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下容器编排引擎（COE）。容器编排引擎是帮助管理在多个主机上运行的许多容器的工具。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to COE
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: COE简介
- en: Docker Swarm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Apache Mesos
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Mesos
- en: Kubernetes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Kubernetes installation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes安装
- en: Kubernetes hands-on
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes实践
- en: Introduction to COE
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: COE简介
- en: Containers provide users with an easy way to package and run their applications.
    Packaging involves defining the library and tools that are necessary for a user's
    application to run. These packages, once converted to images, can be used to create
    and run containers. These containers can be run anywhere, whether it's on developer
    laptops, QA systems, or production machines, without any change in environment.
    Docker and other container runtime tools provide the facility to manage the life
    cycle of such containers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 容器为用户提供了一种打包和运行其应用程序的简便方法。打包涉及定义用户应用程序运行所必需的库和工具。一旦转换为图像，这些软件包可以用于创建和运行容器。这些容器可以在任何地方运行，无论是在开发人员的笔记本电脑，QA系统还是生产机器上，而不需要改变环境。Docker和其他容器运行时工具提供了管理这些容器的生命周期的功能。
- en: 'Using these tools, users can build and manage images, run containers, delete
    containers, and perform other container life cycle operations. But these tools
    can only manage one container on a single host. When we deploy our application
    on multiple containers and multiple hosts, we need some kind of automation tool.
    This type of automation is generally called orchestration. Orchestration tools
    provide a number of features, including:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些工具，用户可以构建和管理图像，运行容器，删除容器，并执行其他容器生命周期操作。但是这些工具只能在单个主机上管理一个容器。当我们在多个容器和多个主机上部署我们的应用程序时，我们需要某种自动化工具。这种自动化通常被称为编排。编排工具提供了许多功能，包括：
- en: Provisioning and managing hosts on which containers will run
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供和管理容器将运行的主机
- en: Pulling the images from the repository and instantiating the containers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从存储库中拉取图像并实例化容器
- en: Managing the life cycle of containers
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理容器的生命周期
- en: Scheduling containers on hosts based on the host's resource availability
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据主机资源的可用性在主机上调度容器
- en: Starting a new container when one dies
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个容器死掉时启动一个新的容器
- en: Scaling the containers to match the application's demand
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展容器以匹配应用程序的需求
- en: Providing networking between containers so that they can access each other on
    different hosts
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器之间提供网络，以便它们可以在不同的主机上相互访问
- en: Exposing these containers as services so that they can be accessed from outside
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这些容器公开为服务，以便可以从外部访问
- en: Health monitoring of the containers
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对容器进行健康监控
- en: Upgrading the containers
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级容器
- en: Generally, these kinds of orchestration tools provide declarative configuration
    in YAML or JSON format. These definitions carry all of the information related
    to containers including image, networking, storage, scaling, and other things.
    Orchestration tools use these definitions to apply the same setting to provide
    the same environment every time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这些类型的编排工具提供YAML或JSON格式的声明性配置。这些定义携带与容器相关的所有信息，包括图像、网络、存储、扩展和其他内容。编排工具使用这些定义来应用相同的设置，以便每次都提供相同的环境。
- en: There are many container orchestration tools available, such as Docker Machine,
    Docker Compose, Kuberenetes, Docker Swarm, and Apache Mesos, but this chapter
    focuses only on Docker Swarm, Apache Mesos, and Kubernetes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多容器编排工具可用，例如Docker Machine，Docker Compose，Kubernetes，Docker Swarm和Apache Mesos，但本章仅关注Docker
    Swarm，Apache Mesos和Kubernetes。
- en: Docker Swarm
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: '**Docker Swarm** is a native orchestration tool from Docker itself. It manages
    a pool of Docker hosts and turns them into a single virtual Docker host. Docker
    Swarm provides a standard Docker API to manage containers on the cluster. It''s
    easy for users to move to Docker Swarm if they are already using Docker to manage
    their containers.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker Swarm**是Docker自身的本地编排工具。它管理一组Docker主机并将它们转换为单个虚拟Docker主机。Docker Swarm提供了标准的Docker
    API来管理集群上的容器。如果用户已经在使用Docker来管理他们的容器，那么他们很容易转移到Docker Swarm。'
- en: 'Docker Swarm follows a *swap, plug, and play* principle. This provides pluggable
    scheduling algorithms, a broad registry, and discovery backend support in the
    cluster. Users can use various scheduling algorithms and discovery backends as
    per their needs. The following diagram represents the Docker Swarm architecture:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm遵循*swap，plug和play*原则。这为集群提供了可插拔的调度算法，广泛的注册表和发现后端支持。用户可以根据自己的需求使用各种调度算法和发现后端。以下图表示Docker
    Swarm架构：
- en: '![](../images/00010.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00010.jpeg)'
- en: Docker Swarm components
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm组件
- en: The following sections explain the various components in Docker Swarm.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节解释了Docker Swarm中的各种组件。
- en: Node
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点
- en: Node is an instance of the Docker host participating in the Swarm cluster. There
    can be one or multiple nodes in a single Swarm cluster deployment. Nodes are categorized
    into Manager and Worker based on their roles in the system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 节点是参与Swarm集群的Docker主机的实例。单个Swarm集群部署中可以有一个或多个节点。根据它们在系统中的角色，节点被分类为管理节点和工作节点。
- en: Manager node
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理节点
- en: The Swarm manager node manages the nodes in the cluster. It provides the API
    to manage the nodes and containers across the cluster. Manager nodes distribute
    units of work, also known as tasks, to worker nodes. If there are multiple manager
    nodes, then they select a single leader to perform an orchestration task.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm管理节点管理集群中的节点。它提供API来管理集群中的节点和容器。管理节点将工作单元（也称为任务）分配给工作节点。如果有多个管理节点，那么它们会选择一个单一的领导者来执行编排任务。
- en: Worker node
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作节点
- en: The worker node receives and executes task distributed by manager nodes. By
    default, every manager node is also a worker node, but they can be configured
    to run Manager tasks exclusively. Worker nodes run agents and keep track of tasks
    running on them, and reports them. The Worker node also notifies the manager node
    about the current state of assigned tasks.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点接收并执行由管理节点分发的任务。默认情况下，每个管理节点也是工作节点，但它们可以配置为仅运行管理任务。工作节点运行代理并跟踪正在运行的任务，并报告它们。工作节点还通知管理节点有关分配任务的当前状态。
- en: Tasks
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: Task is the individual Docker container with a command to run inside the container.
    The manager assigns the tasks to worker nodes. Tasks are the smallest unit of
    scheduling in the cluster.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 任务是具有在容器内运行的命令的单个Docker容器。管理节点分配任务给工作节点。任务是集群中调度的最小单位。
- en: Services
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: Service is the interface for a set of Docker containers or tasks running across
    the Swarm cluster.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是跨Swarm集群运行的一组Docker容器或任务的接口。
- en: Discovery service
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现服务
- en: The Discovery service stores cluster states and provides node and service discoverability.
    Swarm supports a pluggable backend architecture that supports etcd, Consul, Zookeeper,
    static files, lists of IPs, and so on, as discovery services.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 发现服务存储集群状态，并提供节点和服务的可发现性。Swarm支持可插拔的后端架构，支持etcd、Consul、Zookeeper、静态文件、IP列表等作为发现服务。
- en: Scheduler
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度程序
- en: The Swarm scheduler schedules the tasks on different nodes in the system. Docker
    Swarm comes with many built-in scheduling strategies that gives users the ability
    to guide container placement on nodes in order to maximize or minimize the task
    distribution across the cluster. The random strategy is also supported by Swarm.
    It chooses a random node to place the task on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm调度程序在系统中的不同节点上调度任务。Docker Swarm带有许多内置的调度策略，使用户能够指导容器在节点上的放置，以最大化或最小化集群中的任务分布。Swarm也支持随机策略。它选择一个随机节点来放置任务。
- en: Swarm mode
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swarm模式
- en: 'In version 1.12, Docker introduced the Swarm mode, built into its engine. To
    run a cluster, the user needs to execute two commands on each Docker host:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.12版本中，Docker引入了内置的Swarm模式。要运行一个集群，用户需要在每个Docker主机上执行两个命令：
- en: 'To enter Swarm mode:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 进入Swarm模式：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To add a node to the cluster:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 添加节点到集群：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unlike Swarm, Swarm mode comes with service discovery, load balancing, security,
    rolling updates and scaling, and so on, built into the Docker engine itself. Swarm
    mode makes the management of the cluster easy since it does not require any orchestration
    tools to create and manage the cluster.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与Swarm不同，Swarm模式内置于Docker引擎本身，具有服务发现、负载平衡、安全性、滚动更新和扩展等功能。Swarm模式使集群管理变得简单，因为它不需要任何编排工具来创建和管理集群。
- en: Apache Mesos
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Mesos
- en: Apache Mesos is an open source, fault-tolerant cluster manager. It manages a
    set of nodes called slaves and offers their available computing resources to frameworks.
    Frameworks take the resource availability from the master and launches the tasks
    on the slaves. Marathon is one such framework, which runs containerized applications
    on the Mesos cluster. Together, Mesos and Marathon become a container orchestration
    engine like Swarm or Kubernetes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Mesos是一个开源的、容错的集群管理器。它管理一组称为从节点的节点，并向框架提供它们的可用计算资源。框架从主节点获取资源可用性，并在从节点上启动任务。Marathon就是这样一个框架，它在Mesos集群上运行容器化应用程序。Mesos和Marathon一起成为一个类似于Swarm或Kubernetes的容器编排引擎。
- en: 'The following diagram represents the whole architecture:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表示了整个架构：
- en: '![](../images/00011.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00011.jpeg)'
- en: Apache Mesos and its components
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Mesos及其组件
- en: 'Here is a list of Apache Mesos components:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Apache Mesos组件的列表：
- en: Master
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主节点
- en: Master manages the slave nodes in the system. There may be many masters in the
    system, but only one is elected as leader.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 主节点管理系统中的从节点。系统中可能有许多主节点，但只有一个被选举为领导者。
- en: Slaves
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从节点
- en: Slaves are the nodes which offer their resources to the master and run the tasks
    provided by frameworks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从节点是提供其资源给主节点并运行框架提供的任务的节点。
- en: Frameworks
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架
- en: Frameworks are long running applications consisting of schedulers which take
    resource offers from the master and execute the tasks on the slave.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 框架是长期运行的应用程序，由调度程序组成，这些调度程序从主节点接受资源提供并在从节点上执行任务。
- en: Offer
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供
- en: Offer is nothing but a collection of each slave node's available resources.
    The master gets these offers from slave nodes and provides them to frameworks,
    which in turn runs tasks on the slave nodes
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 提供只是每个从节点的可用资源的集合。主节点从从节点获取这些提供，并将它们提供给框架，框架反过来在从节点上运行任务。
- en: Tasks
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: Tasks are the smallest unit of work scheduled by frameworks to be run on slave
    nodes. For example, a containerized application can be one task
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 任务是由框架调度在从节点上运行的最小工作单元。例如，一个容器化应用程序可以是一个任务
- en: Zookeeper
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zookeeper
- en: Zookeeper is a centralized configuration manager in a cluster. Mesos uses Zookeeper
    to elect a master and for slaves to join the cluster
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Zookeeper是集群中的集中式配置管理器。Mesos使用Zookeeper来选举主节点，并让从节点加入集群
- en: In addition, the Mesos Marathon framework provides service discovery and load
    balancing for long running applications, such as containers. Marathon also provides
    the REST API to manage workloads.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Mesos Marathon框架为长时间运行的应用程序（如容器）提供了服务发现和负载均衡。Marathon还提供了REST API来管理工作负载。
- en: Kubernetes
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Kubernetes is a container orchestration engine created by Google, designed to
    automate the deployment, scaling, and operating of containerized applications.
    It is one of the fastest developing COEs because it provides a reliable platform
    to build distributed applications on a massive scale. Kubernetes automates your
    application, manages its life cycle, and maintains and tracks resource allocation
    in a cluster of servers. It can run application containers on physical or virtual
    machine clusters.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是由谷歌创建的容器编排引擎，旨在自动化容器化应用程序的部署、扩展和运行。它是最快发展的COE之一，因为它提供了一个可靠的平台，可以在大规模上构建分布式应用程序。Kubernetes自动化您的应用程序，管理其生命周期，并在服务器集群中维护和跟踪资源分配。它可以在物理或虚拟机集群上运行应用程序容器。
- en: 'It provides a unified API to deploy web applications, databases, and batch
    jobs. It comprises of a rich set of complex features:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个统一的API来部署Web应用程序、数据库和批处理作业。它包括一套丰富的复杂功能：
- en: Auto-scaling
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动扩展
- en: Self-healing infrastructure
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自愈基础设施
- en: Configuration and updating of batch jobs
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批处理作业的配置和更新
- en: Service discovery and load balancing
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务发现和负载均衡
- en: Application life cycle management
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序生命周期管理
- en: Quota management
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配额管理
- en: Kubernetes architecture
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes架构
- en: This section outlines the Kubernetes architecture and the various components
    that deliver a running cluster.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本节概述了Kubernetes架构和各种组件，以提供一个运行中的集群。
- en: 'Kubernetes consists of the following components from a top-level view:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶层视图来看，Kubernetes由以下组件组成：
- en: External requests
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部请求
- en: Master node
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主节点
- en: Worker nodes
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作节点
- en: 'The following diagram shows the architecture of Kubernetes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了Kubernetes的架构：
- en: '![](../images/00012.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00012.jpeg)'
- en: We will discuss each of the components in detail in the next section. Some of
    the key components are depicted in the diagram.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节详细讨论每个组件。图中描述了一些关键组件。
- en: External request
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部请求
- en: Users interact with Kubernetes cluster through APIs; they explain what their
    requirements are and what their application looks like, and Kubernetes does all
    the hard work to manage their application. `kubectl` is command-line tool from
    the Kubernetes project to call Kubernetes APIs in a simple way.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通过API与Kubernetes集群进行交互；他们解释他们的需求以及他们的应用程序的样子，Kubernetes会为他们管理所有的工作。`kubectl`是Kubernetes项目中的命令行工具，可以简单地调用Kubernetes
    API。
- en: Master node
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主节点
- en: The master node provides the cluster's control plane. It acts like a controller
    in the cluster. Most of the major functionalities, such as scheduling, service
    discovery, load balancing, responding to cluster events, and so on, are done by
    components running on the master node only. Now, let's take a look at the master
    components and their functionalities.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 主节点提供了集群的控制平面。它在集群中充当控制器的角色。大部分主要功能，如调度、服务发现、负载均衡、响应集群事件等，都是由运行在主节点上的组件完成的。现在，让我们来看看主要组件及其功能。
- en: kube-apiserver
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: kube-apiserver
- en: It exposes the Kubernetes APIs. All of the internal and external requests go
    through the API server. It verifies all of the incoming requests for authenticity
    and the right level of access, and then forwards the requests to targeted components
    in the cluster.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它公开了Kubernetes的API。所有内部和外部请求都通过API服务器。它验证所有传入请求的真实性和正确的访问级别，然后将请求转发到集群中的目标组件。
- en: etcd
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: etcd
- en: '`etcd` is used for storing all of the cluster state information by Kubernetes.
    `etcd` is a critical component in Kubernetes.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`etcd`用于存储Kubernetes的所有集群状态信息。`etcd`是Kubernetes中的关键组件。'
- en: kube-controller-manager
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: kube-controller-manager
- en: There are multiple controllers in the Kubernetes cluster such as the node controller,
    replication controller, endpoints controller, service account, and token controllers.
    These controllers are run as background threads that handle routine tasks in the
    cluster.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群中有多个控制器，如节点控制器、复制控制器、端点控制器、服务账户和令牌控制器。这些控制器作为后台线程运行，处理集群中的常规任务。
- en: kube-scheduler
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: kube-scheduler
- en: It watches all of the newly created pods and schedules them to run on a node
    if they aren't assigned to any node.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它监视所有新创建的pod，并在它们未分配到任何节点时将它们调度到节点上运行。
- en: 'Please read the Kubernetes documentation ([https://kubernetes.io/docs/concepts/overview/components/](https://kubernetes.io/docs/concepts/overview/components/))
    to learn about other components in the control plane, including:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请阅读Kubernetes文档（[https://kubernetes.io/docs/concepts/overview/components/](https://kubernetes.io/docs/concepts/overview/components/)）了解控制平面中的其他组件，包括：
- en: Cloud-controller-manager
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud-controller-manager
- en: Web UI
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web UI
- en: Container resource monitoring
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器资源监控
- en: Cluster level logging
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群级别日志记录
- en: Worker nodes
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作节点
- en: The worker nodes run the user's applications and services. There can be one
    or more worker node in the cluster. You can add or remove nodes from the cluster
    to achieve scalability in the cluster. Worker nodes also run multiple components
    to manage applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点运行用户的应用程序和服务。集群中可以有一个或多个工作节点。您可以向集群添加或删除节点，以实现集群的可伸缩性。工作节点还运行多个组件来管理应用程序。
- en: kubelet
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: kubelet
- en: '`kubelet` is the primary agent that lives on every worker node. It listens
    to the `kube-apiserver` for commands to perform. Some of the functionalities of
    `kubelet` include mounting the pod''s volume, downloads the pod''s secrets, running
    the pod''s containers via Docker or specified container runtime, and so on.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubelet`是每个工作节点上的主要代理。它监听`kube-apiserver`的命令执行。`kubelet`的一些功能包括挂载pod的卷、下载pod的秘密、通过Docker或指定的容器运行时运行pod的容器等。'
- en: kube-proxy
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: kube-proxy
- en: It enables the service abstraction for Kubernetes by maintaining network rules
    on the host and performing connection forwarding.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过在主机上维护网络规则并执行连接转发，为Kubernetes提供了服务抽象。
- en: Container runtime
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器运行时
- en: Either Docker or Rocket to create containers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker或Rocket创建容器。
- en: supervisord
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: supervisord
- en: '`supervisord` is a lightweight process monitor and control system that can
    be used to keep `kubelet` and Docker running.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`supervisord`是一个轻量级的进程监视和控制系统，可用于保持`kubelet`和Docker运行。'
- en: fluentd
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: fluentd
- en: '`fluentd` is a daemon which helps provide cluster-level logging.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`fluentd`是一个守护程序，帮助提供集群级别的日志记录。'
- en: Concepts in Kubernetes
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes中的概念
- en: In the following sections, we will learn about the concepts of Kubernetes that
    are used to represent your cluster.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习Kubernetes的概念，这些概念用于表示您的集群。
- en: Pod
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pod
- en: A pod is the smallest deployable unit of computing in Kubernetes. A pod is a
    group of one or more containers with shared storage or a shared network, and a
    specification of how to run the containers. Containers themselves are not assigned
    to hosts, whereas closely related containers are always co-located and co-scheduled
    together as pods and run in a shared context.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Pod是Kubernetes中最小的可部署计算单元。Pod是一个或多个具有共享存储或共享网络的容器组，以及如何运行这些容器的规范。容器本身不分配给主机，而密切相关的容器总是作为Pod一起共同定位和共同调度，并在共享上下文中运行。
- en: A pod models an application-specific logical host; it contains one or more application
    container, and they are relatively tightly coupled. In a pre-container world,
    they would have executed on the same physical or virtual machine. Using pods,
    we have the advantage of better resource sharing, guaranteed fate sharing, inter-process
    communication and simplified management.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Pod模型是一个特定于应用程序的逻辑主机；它包含一个或多个应用程序容器，并且它们之间相对紧密地耦合。在没有容器的世界中，它们将在同一台物理或虚拟机上执行。使用Pod，我们可以更好地共享资源、保证命运共享、进行进程间通信并简化管理。
- en: Replica sets and replication controllers
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 副本集和复制控制器
- en: Replica sets are the next generation of replication controllers. The only difference
    between both is that replica sets support the more advanced set-based selectors
    whereas replication controllers only support equality-based selectors, therefore
    making replica sets more flexible than replication controllers. However, the following
    explanation applies to both.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 副本集是复制控制器的下一代。两者之间唯一的区别是副本集支持更高级的基于集合的选择器，而复制控制器只支持基于相等性的选择器，因此副本集比复制控制器更灵活。然而，以下解释适用于两者。
- en: A pod is ephemeral and won't be rescheduled if the node it is running on goes
    down. The replica set ensures that a specific number of pod instances (or replicas)
    are running at any given time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Pod是短暂的，如果它正在运行的节点宕机，它将不会被重新调度。副本集确保特定数量的Pod实例（或副本）在任何给定时间都在运行。
- en: Deployments
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: Deployment is high-level abstraction which creates replica sets and pods. Replica
    sets maintain the desired number of pods in a running state. Deployment provides
    an easy way to upgrade, rollback, and scale up or scale down pods by just changing
    the deployment specification.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 部署是一个高级抽象，它创建副本集和Pod。副本集维护运行状态中所需数量的Pod。部署提供了一种简单的方式来通过改变部署规范来升级、回滚、扩展或缩减Pod。
- en: Secrets
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Secrets
- en: Secrets are used to store sensitive information such as usernames, passwords,
    OAuth tokens, certificates, and SSH keys. It's safer and more flexible to store
    such sensitive information in secrets rather than putting them in pod templates.
    Pods can refer these secrets and use the information inside them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets用于存储敏感信息，如用户名、密码、OAuth令牌、证书和SSH密钥。将这些敏感信息存储在Secrets中比将它们放在Pod模板中更安全、更灵活。Pod可以引用这些Secrets并使用其中的信息。
- en: Labels and selectors
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签和选择器
- en: Labels are key value pairs that can be attached to objects, such as pods and
    even nodes. They are used to specify the identifying attributes of objects that
    are meaningful and relevant to users. Labels can be attached to objects at creation
    time and added or modified later. They are used to organize and select subsets
    of objects. Some examples include environment (development, testing, production,
    release), stable, pike, and so on.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是可以附加到对象（如Pod甚至节点）的键值对。它们用于指定对象的标识属性，这些属性对用户来说是有意义和相关的。标签可以在创建对象时附加，也可以在以后添加或修改。它们用于组织和选择对象的子集。一些示例包括环境（开发、测试、生产、发布）、稳定、派克等。
- en: Labels don't provide uniqueness. Using label selectors, a client or user can
    identify and subsequently manage a group of objects. This is the core grouping
    primitive of Kubernetes and it is used in many situations.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 标签不提供唯一性。使用标签选择器，客户端或用户可以识别并随后管理一组对象。这是Kubernetes的核心分组原语，在许多情况下使用。
- en: 'Kubernetes supports two kinds of selectors: equality-based and set-based. Equality-based
    uses key value pairs to filter based on basic equality or inequality, whereas
    set-based are a bit more powerful and allow for the filtering of keys according
    to a set of values.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes支持两种选择器：基于相等性和基于集合。基于相等性使用键值对进行过滤，而基于集合更强大，允许根据一组值对键进行过滤。
- en: Services
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: As pods are short-lived objects in Kubernetes, the IP address assigned to them
    can't be relied upon to be stable for a long time. This makes the communication
    between pods difficult. Hence, Kubernetes has introduced the concept of a service.
    A service is an abstraction on top of a number of pods and a policy by which to
    access them, typically requiring the running of a proxy for other services to
    communicate with it via a virtual IP address.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于pod在Kubernetes中是短暂的对象，分配给它们的IP地址不能长时间稳定。这使得pod之间的通信变得困难。因此，Kubernetes引入了服务的概念。服务是对一些pod的抽象，以及访问它们的策略，通常需要运行代理来通过虚拟IP地址与其他服务进行通信。
- en: Volumes
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷
- en: Volume provides persistent storage to pods or containers. If data is not persisted
    on external storage, then once the container crashes, all of its files will be
    lost. Volumes also make data sharing easy between multiple containers inside the
    pod. Kubernetes supports many types of volumes, and pods can use any number of
    volumes simultaneously.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 卷为pod或容器提供持久存储。如果数据没有持久存储在外部存储上，那么一旦容器崩溃，所有文件都将丢失。卷还可以使多个容器之间的数据共享变得容易。Kubernetes支持许多类型的卷，pod可以同时使用任意数量的卷。
- en: Kubernetes installation
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes安装
- en: Kubernetes can run on various platforms, from laptops and VMs on a cloud provider
    to a rack of bare metal servers. There are multiple solutions today to install
    and run Kubernetes clusters. Read the Kubernetes documentation to find the best
    solution for your particular use case.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes可以在各种平台上运行，从笔记本电脑和云提供商的虚拟机到一排裸机服务器。今天有多种解决方案可以安装和运行Kubernetes集群。阅读Kubernetes文档，找到适合您特定用例的最佳解决方案。
- en: In this chapter, we will use `kubeadm` to bring up a Kubernetes cluster on Ubuntu
    16.04+. `kubeadm` can be used to easily bring up a cluster with a single command
    per machine.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用`kubeadm`在Ubuntu 16.04+上创建一个Kubernetes集群。`kubeadm`可以用一个命令轻松地在每台机器上创建一个集群。
- en: 'In this installation, we will use a tool called `kubeadm`, which is a part
    of Kubernetes. The prerequisites for installing `kubeadm` are:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个安装中，我们将使用一个名为`kubeadm`的工具，它是Kubernetes的一部分。安装`kubeadm`的先决条件是：
- en: One or more machines running Ubuntu 16.04+
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台或多台运行Ubuntu 16.04+的机器
- en: Minimum of 1 GB or more of RAM per machine
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每台机器至少需要1GB或更多的RAM
- en: Full network connectivity between all machines in the cluster
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群中所有机器之间的完整网络连接
- en: 'All of the machines in the cluster need the following components to be installed:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 集群中的所有机器都需要安装以下组件：
- en: Install Docker on all of the machines. As per the Kubernetes documentation,
    version 1.12 is recommended. Please refer to the *Installation of Docker* section
    in [Chapter 1](part0021.html#K0RQ0-08510d04d33546e798ef8c1140114deb), *Working
    with Containers*, for instructions on installing Docker.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有机器上安装Docker。根据Kubernetes文档，建议使用1.12版本。有关安装Docker的说明，请参阅[第1章](part0021.html#K0RQ0-08510d04d33546e798ef8c1140114deb)中的*安装Docker*部分，*使用容器*。
- en: Install `kubectl` on each machine. `kubectl` is a command-line tool from Kubernetes
    to deploy and manage applications on Kubernetes. You can use `kubectl` to inspect
    cluster resources, create, delete, and update components, and look at your new
    cluster and bring up example apps. Again, there are multiple options to install
    `kubectl`. In this chapter, we will use curl to install it. Please refer to the
    Kubernetes documentation for more options.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每台机器上安装`kubectl`。`kubectl`是来自Kubernetes的命令行工具，用于在Kubernetes上部署和管理应用程序。您可以使用`kubectl`来检查集群资源，创建、删除和更新组件，并查看您的新集群并启动示例应用程序。再次强调，安装`kubectl`有多种选项。在本章中，我们将使用curl进行安装。请参考Kubernetes文档以获取更多选项。
- en: 'Download the latest release of `kubectl` using curl:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用curl下载最新版本的`kubectl`：
- en: '[PRE2]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Make the `kubectl` binary executable:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使`kubectl`二进制文件可执行：
- en: '[PRE3]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, install `kubelet` and `kubeadm` on all the machines. `kubelet` is the
    component that runs on all of the machines in your cluster and does things such
    as starting pods and containers. `kubeadm` is the command to bootstrap the cluster:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在所有机器上安装`kubelet`和`kubeadm`。`kubelet`是在集群中所有机器上运行的组件，负责启动pod和容器等工作。`kubeadm`是引导集群的命令：
- en: 'Log in as root:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以root用户登录：
- en: '[PRE4]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update and install the packages:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新并安装软件包：
- en: '[PRE5]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the authenticate key for the package:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为软件包添加认证密钥：
- en: '[PRE6]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the Kubernetes source to the `apt` list:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Kubernetes源添加到`apt`列表中：
- en: '[PRE7]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Update and install the tools:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新并安装工具：
- en: '[PRE8]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The following steps demonstrate how to set up a secure Kubernetes cluster using
    `kubeadm`. We will also create a pod network on the cluster so that the application
    components can talk to each other. Finally, install a sample microservices application
    on the cluster to verify the installation.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了如何使用`kubeadm`设置安全的Kubernetes集群。我们还将在集群上创建一个pod网络，以便应用程序组件可以相互通信。最后，在集群上安装一个示例微服务应用程序以验证安装。
- en: 'Initialize the master node. To initialize the master, choose one of the machines
    you previously installed `kubeadm` on and run the following command. We have specified
    `pod-network-cidr` for providing the network for communication between pods:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化主节点。要初始化主节点，请选择之前安装了`kubeadm`的机器之一，并运行以下命令。我们已指定`pod-network-cidr`以提供用于通信的网络：
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Please refer to the `kubeadm` reference document to read more about the flags
    `kubeadm init` provides.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考`kubeadm`参考文档，了解更多关于`kubeadm init`提供的标志。
- en: This may take several minutes, as `kubeadm init` will first run a series of
    pre-checks to ensure that the machine is ready to run Kubernetes. It might expose
    warnings and exit on errors depending on the pre-check results. It will then download
    and install the control plane components and cluster database.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要几分钟，因为`kubeadm init`将首先运行一系列预检查，以确保机器准备好运行Kubernetes。它可能会暴露警告并根据预检查结果退出错误。然后，它将下载并安装控制平面组件和集群数据库。
- en: 'The output of the preceding command looks like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：
- en: '[PRE10]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the `kubeadm join` command from the preceding output. You will need this
    to join nodes to your Kubernetes cluster. The token is used for mutual authentication
    between the master and the nodes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 保存前面输出的`kubeadm join`命令。您将需要这个命令来将节点加入到您的Kubernetes集群中。令牌用于主节点和节点之间的相互认证。
- en: 'Now, to start using your cluster, run the following commands as a regular user:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要开始使用您的集群，请以普通用户身份运行以下命令：
- en: '[PRE11]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install a pod network. This network is used for the communication between pods
    in the cluster:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装pod网络。此网络用于集群中pod之间的通信：
- en: The network must be deployed before running any application. Also, services
    such as `kube-dns` will not start up before a network is installed. `kubeadm`
    only supports **Container Network Interface** (**CNI**) networks and does not
    support `kubenet`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行任何应用程序之前，必须部署网络。此外，诸如`kube-dns`之类的服务在安装网络之前不会启动。`kubeadm`仅支持**容器网络接口**（**CNI**）网络，不支持`kubenet`。
- en: 'There are multiple network add-on projects which can be used to create a secure
    network. To see a complete list, please visit the Kubernetes documentation for
    reference. In this example, we will use flannel for the networking. Flannel is
    an overlay network provider:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个网络附加项目可用于创建安全网络。要查看完整列表，请访问Kubernetes文档以供参考。在本例中，我们将使用flannel进行网络连接。Flannel是一种覆盖网络提供程序：
- en: '[PRE12]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can confirm that it is working by checking that the `kube-dns` pod is up
    and running in the output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过检查输出中的`kube-dns` pod是否正在运行来确认它是否正在工作：
- en: '[PRE13]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Join the nodes to the cluster. To add nodes to the Kubernetes cluster, and
    SSH to the node and run the following:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将节点加入集群。要将节点添加到Kubernetes集群，请通过SSH连接到节点并运行以下命令：
- en: '[PRE14]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, run the following command to verify the joining of the nodes:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下命令来验证节点的加入：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Verify your installation by creating a sample Nginx pod:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个示例Nginx pod来验证您的安装：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Kubernetes hands-on
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes实践
- en: We learned how to install the Kubernetes cluster in the previous section. Now,
    let's create a more complex example with Kubernetes. In this application, we will
    deploy an application running a WordPress site and MySQL database using official
    Docker images.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中学习了如何安装Kubernetes集群。现在，让我们使用Kubernetes创建一个更复杂的示例。在这个应用程序中，我们将部署一个运行WordPress站点和MySQL数据库的应用程序，使用官方Docker镜像。
- en: 'Create a persistent volume. Both WordPress and MySQL will use this volume to
    store data. We will create two local persistent volumes of size 5 GB each. Copy
    the following content to the `volumes.yaml` file:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建持久卷。WordPress和MySQL将使用此卷来存储数据。我们将创建两个大小为5 GB的本地持久卷。将以下内容复制到`volumes.yaml`文件中：
- en: '[PRE17]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, create the volume by running the following command:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过运行以下命令来创建卷：
- en: '[PRE18]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check that the volumes were created:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查卷是否已创建：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a secret to store the MySQL password. This secret will be referenced
    by the MySQL and WordPress pods so that those pods will have access to it:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于存储MySQL密码的密钥。MySQL和WordPress pod将引用此密钥，以便这些pod可以访问它：
- en: '[PRE20]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Verify that the secrets were created:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证密钥是否已创建：
- en: '[PRE21]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the MySQL deployment. We will now create a service that exposes a MySQL
    container, a persistent volume claim of 5 GB, and a deployment running the pod
    with the MySQL container. Copy the following content to the `mysql-deployment.yaml`
    file:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建MySQL部署。现在，我们将创建一个服务，公开一个MySQL容器，一个5 GB的持久卷索赔，以及运行MySQL容器的pod的部署。将以下内容复制到`mysql-deployment.yaml`文件中：
- en: '[PRE22]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, launch the MySQL pod:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，启动MySQL pod：
- en: '[PRE23]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Check the status of the pod:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查pod的状态：
- en: '[PRE24]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Alternatively, you can check the logs of the pod by running the following:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您可以通过运行以下命令来检查pod的日志：
- en: '[PRE25]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Alternatively, you can run the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以运行以下命令：
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will also give you the option of removing the test databases and anonymous
    user created by default. It is strongly recommended for production servers.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这还将为您提供删除默认创建的测试数据库和匿名用户的选项。强烈建议用于生产服务器。
- en: 'Check the manual for more instructions:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 查看手册以获取更多说明：
- en: Please report any problems at [http://bugs.mysql.com/](http://bugs.mysql.com/).
    The latest information about MySQL is available on the web at [http://www.mysql.com](http://www.mysql.com).
    Support MySQL by buying support/licenses at: [http://shop.mysql.com](http://shop.mysql.com).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 请在[http://bugs.mysql.com/](http://bugs.mysql.com/)报告任何问题。有关MySQL的最新信息可在网上获取：[http://www.mysql.com](http://www.mysql.com)。通过在[http://shop.mysql.com](http://shop.mysql.com)购买支持/许可证来支持MySQL。
- en: Please note that a new default `config` file was not created; please make sure
    your `config` file is current.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，没有创建新的默认`config`文件；请确保您的`config`文件是最新的。
- en: The default `config` file, `/etc/mysql/my.cnf`, exists on the system.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`config`文件`/etc/mysql/my.cnf`存在于系统上。
- en: 'This file will be read by default by the MySQL server. If you do not want to
    use this, either remove it or use the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将被MySQL服务器默认读取。如果您不想使用它，要么删除它，要么使用以下命令：
- en: '[PRE27]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The MySQL `init` process is now done. We are ready for startup:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL的`init`过程现在已经完成。我们已经准备好启动：
- en: '[PRE28]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Check the status of persistent volume claims by running the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查持久卷索赔的状态：
- en: '[PRE29]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create the WordPress deployment. We will now create a service that exposes
    a WordPress container, a persistent volume claim of 5 GB, and a deployment running
    the pod with the WordPress container. Copy the following content to the `wordpress-deployment.yaml`
    file:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 创建WordPress部署。我们现在将创建一个服务，公开一个WordPress容器，一个持久卷索赔5GB，以及运行WordPress容器的pod的部署。将以下内容复制到`wordpress-deployment.yaml`文件中：
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, launch the WordPress pod:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，启动WordPress pod：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Check the status of the service:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查服务的状态：
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The application is up and running now!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在正在运行！
- en: 'The following lists the commands needed to delete all of the resources created:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了删除所有创建的资源所需的命令：
- en: 'To delete your secret:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要删除您的秘密：
- en: '[PRE33]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To delete all of the deployments and services:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要删除所有部署和服务：
- en: '[PRE34]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To delete the persistent volume claims and the persistent volumes:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要删除持久卷索赔和持久卷：
- en: '[PRE35]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about container orchestration engines. We looked
    at the different COEs such as Docker Swarm and Apache Mesos. We dealt with Kubernetes
    and its architecture, components, and concepts in detail.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了容器编排引擎。我们看了不同的COE，如Docker Swarm和Apache Mesos。我们详细介绍了Kubernetes及其架构、组件和概念。
- en: We learned how to install a Kubernetes cluster using the `kubeadm` tool. Then,
    at the end, we did a hands-on exercise to run a MySQL WordPress application on
    a Kubernetes cluster. In the next chapter, we will read about the OpenStack architecture
    and its core components.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何使用`kubeadm`工具安装Kubernetes集群。然后，在最后，我们进行了一个实际操作，将MySQL WordPress应用程序在Kubernetes集群上运行。在下一章中，我们将了解OpenStack架构及其核心组件。
