["```js\n**sudo apt-get install mysql-server**\n\n```", "```js\n**mysql -u root -p**\n\n```", "```js\n**show databases;**\n\n```", "```js\n**sudo apt-get install php5 php5-mysql** \n\n```", "```js\n**sudo nano /var/www/html/hellodb.php**\n\n```", "```js\n**sudo apt-get install mysql-client php5-mysql** \n\n```", "```js\n**sudo apt install phpmyadmin**\n\n```", "```js\n**sudo nano /etc/apache2/apache2.conf**\n\n```", "```js\n**Include /etc/phpmyadmin/apche.conf**\n\n```", "```js\n**Include /etc/phpmyadmin/apche.conf**\n\n```", "```js\nIPAddress ip(192,168,1,50); \n\n```", "```js\nIPAddress server(192,168,1,108); \n\n```", "```js\nif (client.connect(server, 80)) \n\n```", "```js\nclient.println(\"GET /datalogger1.php?temp=\" + temp + \"&hum=\" + hum + \" HTTP/1.1\"); \n      client.println(\"Host: 192.168.1.108\"); \n      client.println(\"Connection: close\"); \n      client.println(); \n\n```", "```js\n// Include libraries \n#include <SPI.h> \n#include <Ethernet.h> \n#include \"DHT.h\" \n// Enter a MAC address for your controller below. \nbyte mac[] = { 0x90, 0xA2, 0xDA, 0x0E, 0xFE, 0x40 }; \n// DHT11 sensor pins \n#define DHTPIN 7  \n#define DHTTYPE DHT11 \nIPAddress ip(192,168,1,50); \nIPAddress server(192,168,1,108); \nEthernetClient client; \nDHT dht(DHTPIN, DHTTYPE); \nvoid setup() { \n  // Open serial communications \n  Serial.begin(9600); \n      Ethernet.begin(mac, ip); \n  Serial.print(\"IP address: \"); \n  Serial.println(Ethernet.localIP()); \n  delay(1000); \n  Serial.println(\"Conectando...\"); \n\n} \nvoid loop() \n{ \n  float h = dht.readHumidity(); \n  float t = dht.readTemperature(); \n  String temp = String((int) t); \n  String hum = String((int) h); \n    if (client.connect(server, 80)) { \n    if (client.connected()) { \n      Serial.println(\"conectado\"); \n\n```", "```js\n      client.println(\"GET /datalogger1.php?temp=\" + temp + \"&hum=\" + hum + \" HTTP/1.1\"); \n      client.println(\"Host: 192.168.1.108\"); \n      client.println(\"Connection: close\"); \n      client.println(); \n    }  \n    else { \n      // If you didn't get a connection to the server \n      Serial.println(\"fallo la conexion\"); \n    } \n\n```", "```js\n    while (client.connected()) { \n      while (client.available()) { \n      char c = client.read(); \n      Serial.print(c); \n      } \n    } \n\n```", "```js\n    if (!client.connected()) { \n      Serial.println(); \n      Serial.println(\"desconectado.\"); \n      client.stop(); \n    } \n  } \n\n```", "```js\n  delay(5000); \n} \n\n```", "```js\n<?php \nif (isset($_GET[\"temp\"]) && isset($_GET[\"hum\"])) { \n$temperature = intval($_GET[\"temp\"]); \n$humidity = intval($_GET[\"hum\"]); \n$con=mysql_connect(\"localhost\",\"root\",\"ruben\",\"arduinobd\"); \nmysql_select_db('arduinobd',$con); \n      if(mysql_query(\"INSERT INTO measurements (temperature, humidity) VALUES ('$temperature', '$humidity');\")){ \n        echo \"Data were saved\"; \n      } \n      else { \n      echo \"Fail the recorded data\"; \n      } \nmysql_close($con); \n} \n?> \n\n```", "```js\n<!DOCTYPE html> \n  <html> \n    <body> \n<h1>Clik on the buttons to get Data from  MySQL</h1> \n<form action=\"query1.php\" method=\"get\"> \n<input type=\"submit\" value=\"Get all Data\">  \n</form> \n</br> \n\n<form action=\"query2.php\" method=\"get\"> \n<input type=\"submit\"value=\"Humidity <= 15\"> \n</form>  \n</br> \n\n<form action=\"query3.php\" method=\"get\"> \n<input type=\"submit\" value=\"Temperature <=25\">  \n</form> \n</br> \n<?php \n\n$con=mysql_connect(\"localhost\",\"root\",\"ruben\",\"arduinobd\"); \nmysql_select_db('arduinobd',$con); \n$result = mysql_query(\"SELECT * FROM measurements\"); \necho \"<table border='1'> \n<tr> \n<th>Measurements</th> \n<th>Temperature (\u00b0C)</th> \n<th>Humidity (%)</th> \n</tr>\"; \nwhile($row = mysql_fetch_array($result)) { \n  echo \"<tr>\"; \n  echo \"<td>\" . $row['id'] . \"</td>\"; \n  echo \"<td>\" . $row['temperature'] . \"</td>\"; \n  echo \"<td>\" . $row['humidity'] . \"</td>\"; \n  echo \"</tr>\"; \n} \necho \"</table>\"; \nmysql_close($con); \n?> \n</body> \n</html> \n\n```", "```js\n<?php \n$con=mysql_connect(\"localhost\",\"root\",\"ruben\",\"arduinobd\"); \nmysql_select_db('arduinobd',$con); \n$result = mysql_query(\"SELECT * FROM measurements where humidity <= 15 order by id\"); \necho \"<table border='1'> \n<tr> \n<th>Measurements</th> \n<th>Temperature (\u00b0C)</th> \n<th>Humidity (%)</th> \n</tr>\"; \nwhile($row = mysql_fetch_array($result)) { \n  echo \"<tr>\"; \n  echo \"<td>\" . $row['id'] . \"</td>\"; \n  echo \"<td>\" . $row['temperature'] . \"</td>\"; \n  echo \"<td>\" . $row['humidity'] . \"</td>\"; \n  echo \"</tr>\"; \n} \necho \"</table>\"; \nmysql_close($con); \n?> \n\n```", "```js\n<?php \n$con=mysql_connect(\"localhost\",\"root\",\"ruben\",\"arduinobd\"); \nmysql_select_db('arduinobd',$con); \n$result = mysql_query(\"SELECT * FROM measurements where temperature <= 25 order by id\"); \necho \"<table border='1'> \n<tr> \n<th>Measurements</th> \n<th>Temperature (\u00b0C)</th> \n<th>Humidity (%)</th> \n</tr>\"; \nwhile($row = mysql_fetch_array($result)) { \n  echo \"<tr>\"; \n  echo \"<td>\" . $row['id'] . \"</td>\"; \n  echo \"<td>\" . $row['temperature'] . \"</td>\"; \n  echo \"<td>\" . $row['humidity'] . \"</td>\"; \n  echo \"</tr>\"; \n} \necho \"</table>\"; \nmysql_close($con); \n?> \n\n```", "```js\n**wget abyz.co.uk/rpi/pigpio/pigpio.zip**\n\n```", "```js\n**unzip pigpio.zip**\n\n```", "```js\n**cd PIGPIO**\n\n```", "```js\n**Make**\n\n```", "```js\n**sudo make install**\n\n```", "```js\nvar Gpio = require('pigpio').Gpio; \n\n// Create led instance \nvar led = new Gpio(18, {mode: Gpio.OUTPUT}); \nvar dutyCycle = 0; \n// Go from 0 to maximum brightness \nsetInterval(function () { \n  led.pwmWrite(dutyCycle); \n  dutyCycle += 5; \n  if (dutyCycle > 255) { \n    dutyCycle = 0; \n  } \n}, 20); \n\n```", "```js\n**sudo npm install pigpio**\n\n```", "```js\n**sudo node led_test.js**\n\n```", "```js\n// Modules \nvar Gpio = require('pigpio').Gpio; \nvar express = require('express'); \n// Express app \nvar app = express(); \n\n// Use public directory \napp.use(express.static('public')); \n// Create led instance \nvar led = new Gpio(18, {mode: Gpio.OUTPUT}); \n\n// Routes \napp.get('/', function (req, res) { \n\n  res.sendfile(__dirname + '/public/interface.html'); \n\n}); \napp.get('/set', function (req, res) { \n\n  // Set LED \n  dutyCycle = req.query.dutyCycle; \n  led.pwmWrite(dutyCycle); \n\n  // Answer \n  answer = { \n    dutyCycle: dutyCycle \n  }; \n  res.json(answer); \n\n}); \n\n// Start server \napp.listen(3000, function () { \n  console.log('Raspberry Pi Zero LED control'); \n}); \n\n```", "```js\n**sudo npm install express**\n\n```", "```js\n**sudo node led_control.js**\n\n```", "```js\n// Modules \nvar Gpio = require('pigpio').Gpio; \n// Create motor instance \nvar motorSpeed = new Gpio(18, {mode: Gpio.OUTPUT}); \nvar motorDirectionOne = new Gpio(14, {mode: Gpio.OUTPUT}); \nvar motorDirectionTwo = new Gpio(15, {mode: Gpio.OUTPUT}) \n\n// Init motor direction \nmotorDirectionOne.digitalWrite(0); \nmotorDirectionTwo.digitalWrite(1); \nvar dutyCycle = 0; \n\n// Go from 0 to maximum brightness \nsetInterval(function () { \n  motorSpeed.pwmWrite(dutyCycle); \n  dutyCycle += 5; \n  if (dutyCycle > 255) { \n    dutyCycle = 0; \n  } \n}, 20); \n\n```", "```js\n// Modules \nvar Gpio = require('pigpio').Gpio; \nvar express = require('express'); \n\n// Express app \nvar app = express(); \n// Use public directory \napp.use(express.static('public')); \n\n// Create led instance \nvar motorSpeed = new Gpio(18, {mode: Gpio.OUTPUT}); \nvar motorDirectionOne = new Gpio(14, {mode: Gpio.OUTPUT}); \nvar motorDirectionTwo = new Gpio(15, {mode: Gpio.OUTPUT}); \n\n// Routes \napp.get('/', function (req, res) { \n\n  res.sendfile(__dirname + '/public/interface.html'); \n\n}); \n\napp.get('/set', function (req, res) { \n  // Set motor speed \n  speed = req.query.speed; \n  motorSpeed.pwmWrite(speed); \n\n  // Set motor direction \n  motorDirectionOne.digitalWrite(0); \n  motorDirectionTwo.digitalWrite(1); \n\n// Answer \n  answer = { \n    speed: speed \n  }; \n  res.json(answer); \n\n}); \n\n// Start server \napp.listen(3000, function () { \n  console.log('Raspberry Pi Zero Motor control started!'); \n}); \n\n```", "```js\n$( document ).ready(function() { \n\n  $( \"#motor-speed\" ).mouseup(function() { \n\n    // Get value \n    var speed = $('#motor-speed').val(); \n\n    // Set new value \n    $.get('/set?speed=' + speed); \n\n  }); \n\n}); \n\n<!DOCTYPE html> \n<html> \n\n<head> \n  <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script> \n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\"> \n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script> \n  <script src=\"js/interface.js\"></script> \n  <link rel=\"stylesheet\" href=\"css/style.css\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n</head> \n<body> \n\n<div id=\"container\"> \n\n  <h3>Motor Control</h3> \n\n  <div class='row'> \n\n    <div class='col-md-4'></div> \n    <div class='col-md-4 text-center'> \n     <input id=\"motor-speed\" type=\"range\" value=\"0\" min=\"0\" max=\"255\" step=\"1\"> \n    </div> \n    <div class='col-md-4'></div> \n\n  </div> \n\n</div> \n\n</body> \n</html> \n\n```", "```js\n// Modules \nvar express = require('express'); \n\n// Express app \nvar app = express(); \n\n// Pin \nvar lampPin = 12; \n\n// Use public directory \napp.use(express.static('public')); \n\n// Routes \napp.get('/', function (req, res) { \n\n  res.sendfile(__dirname + '/public/interface.html'); \n\n}); \n\napp.get('/on', function (req, res) { \n\n  piREST.digitalWrite(lampPin, 1); \n\n  // Answer \n  answer = { \n    status: 1 \n  }; \n  res.json(answer); \n\n}); \n\napp.get('/off', function (req, res) { \n\n  piREST.digitalWrite(lampPin, 0); \n\n  // Answer \n  answer = { \n    status: 0 \n  }; \n  res.json(answer); \n\n}); \n\n// aREST \nvar piREST = require('pi-arest')(app); \npiREST.set_id('34f5eQ'); \npiREST.set_name('my_rpi_zero'); \n\n// Start server \napp.listen(3000, function () { \n  console.log('Raspberry Pi Zero lamp control started!'); \n}); \n\n```", "```js\n<!DOCTYPE html> \n<html> \n\n<head> \n  <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script> \n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\"> \n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script> \n  <script src=\"js/script.js\"></script> \n  <link rel=\"stylesheet\" href=\"css/style.css\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n</head> \n\n<body> \n\n<div id=\"container\"> \n\n  <h3>Lamp Control</h3> \n\n  <div class='row'> \n\n    <div class='col-md-4'></div> \n    <div class='col-md-2'> \n      <button id='on' class='btn btn-block btn-primary'>On</button> \n    </div> \n    <div class='col-md-2'> \n      <button id='off' class='btn btn-block btn-warning'>Off</button> \n    </div> \n    <div class='col-md-4'></div> \n\n  </div> \n\n</div> \n\n</body> \n</html> \n\n```", "```js\n#define NUMBER_VARIABLES 2 \n#define NUMBER_FUNCTIONS 1 \n\n```", "```js\n#include <Adafruit_CC3000.h> \n#include <SPI.h> \n#include <CC3000_MDNS.h> \n#include <aREST.h> \n\n```", "```js\nconst int relay_pin = 8; \n\n```", "```js\nfloat amplitude_current; \nfloat effective_value; \nfloat effective_voltage = 110; \nfloat effective_power; \nfloat zero_sensor; \n\n```", "```js\n#define ADAFRUIT_CC3000_IRQ   3 \n#define ADAFRUIT_CC3000_VBAT  5 \n#define ADAFRUIT_CC3000_CS    10 \nAdafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS,  \nADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT); \n\n```", "```js\naREST rest = aREST(); \n\n```", "```js\n#define WLAN_SSID       \"xxxxxxxx\" \n#define WLAN_PASS       \"xxxxxxxx\" \n#define WLAN_SECURITY   WLAN_SEC_WPA2 \n\n```", "```js\n#define LISTEN_PORT 80 \n\n```", "```js\nAdafruit_CC3000_Server restServer(LISTEN_PORT); \nMDNSResponder mdns; \n\n```", "```js\nint power; \nint light; \n\n```", "```js\nvoid setup(void) \n{   \n  Serial.begin(115200); \n  rest.variable(\"light\",&light); \n  rest.variable(\"power\",&power); \n\n```", "```js\npinMode(relay_pin,OUTPUT); \n\n```", "```js\n  zero_sensor = getSensorValue(A1); \n\n```", "```js\n  rest.set_id(\"001\"); \n  rest.set_name(\"control\"); \n\n```", "```js\n  if (!cc3000.begin()) \n  { \n    while(1); \n  } \n\n  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) { \n    while(1); \n  } \n  while (!cc3000.checkDHCP()) \n  { \n    delay(100); \n  } \n\n```", "```js\n  if (!mdns.begin(\"arduino\", cc3000)) { \n    while(1);  \n  } \n  displayConnectionDetails(); \n\n```", "```js\n  restServer.begin(); \n  Serial.println(F(\"Listening for connections...\")); \n} \n\n```", "```js\nvoid loop() { \n\n  float sensor_reading = analogRead(A0); \n  light = (int)(sensor_reading/1024*100); \n  float sensor_value = getSensorValue(A1); \n\n```", "```js\n  amplitude_current = (float)(sensor_value-zero_sensor)/1024*5/185*1000000; \n  effective_value = amplitude_current/1.414; \n  effective_power = abs(effective_value*effective_voltage/1000); \n  power = (int)effective_power; \n  mdns.update(); \n\n```", "```js\nAdafruit_CC3000_ClientRef client = restServer.available(); \n  rest.handle(client); \n } \n\n```", "```js\nbool displayConnectionDetails(void) \n{ \n  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv; \n\n  if(!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv, &dnsserv)) \n  { \n    Serial.println(F(\"Unable to retrieve the IP Address!\\r\\n\")); \n    return false; \n  } \n  else \n  { \n    Serial.print(F(\"\\nIP Addr: \")); cc3000.printIPdotsRev(ipAddress); \n    Serial.print(F(\"\\nNetmask: \")); cc3000.printIPdotsRev(netmask); \n    Serial.print(F(\"\\nGateway: \")); cc3000.printIPdotsRev(gateway); \n    Serial.print(F(\"\\nDHCPsrv: \")); cc3000.printIPdotsRev(dhcpserv); \n    Serial.print(F(\"\\nDNSserv: \")); cc3000.printIPdotsRev(dnsserv); \n    Serial.println(); \n    return true; \n  } \n} \n\n```", "```js\nfloat getSensorValue(int pin) \n{ \n  int sensorValue; \n  float avgSensor = 0; \n  int nb_measurements = 100; \n  for (int i = 0; i < nb_measurements; i++) { \n    sensorValue = analogRead(pin); \n    avgSensor = avgSensor + float(sensorValue); \n  }      \n  avgSensor = avgSensor/float(nb_measurements); \n  return avgSensor; \n} \n\n```", "```js\n**npm install arest express jade** \n\n```", "```js\n**npm install pug**\n\n```", "```js\ndoctype \nhtml \n  head \n    title Control and monitoring \n\n```", "```js\nlink(rel='stylesheet', href='/css/interface.css') \n    link(rel='stylesheet',  \n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css\") \n    script(src=\"https://code.jquery.com/jquery-2.1.1.min.js\") \n    script(src=\"/js/interface.js\") \n\n```", "```js\n  body \n    .container \n      h1 Controlling lights \n      .row.voffset \n        .col-md-6 \n          button.btn.btn-block.btn-lg.btn-primary#1 On \n        .col-md-6 \n          button.btn.btn-block.btn-lg.btn-danger#2 Off \n      .row \n\n```", "```js\n        .col-md-4 \n          h3#powerDisplay Power: \n        .col-md-4 \n          h3#lightDisplay Light level:  \n        .col-md-4 \n          h3#status Offline \n\n```", "```js\n$.getq('queue', '/lamp_control/mode/8/o'); \n$.getq('queue', '/lamp_control2/mode/5/o'); \n\n```", "```js\n$(document).ready(function() { \n\n```", "```js\n// Function to control lamp Ethernet Shield \n  $(\"#1\").click(function() { \n    $.getq('queue', '/lamp_control/digital/8/1'); \n  }); \n\n```", "```js\n  $(\"#2\").click(function() { \n    $.getq('queue', '/lamp_control/digital/8/0'); \n  }); \n\n```", "```js\n//Function to control lamp ESP8266 \n  $(\"#3\").click(function() { \n    $.getq('queue', '/lamp_control2/digital/5/0'); \n  }); \n\n```", "```js\n$(\"#4\").click(function() { \n    $.getq('queue', '/lamp_control2/digital/5/1'); \n  }); \n\n```", "```js\n  function refresh_dht() { \n        $.getq('queue', '/sensor/temperature', function(data) { \n      $('#temperature').html(\"Temperature: \" + data.temperature + \" C\"); \n    }); \n\n  $.getq('queue', '/sensor2/temperature2', function(data) { \n      $('#temperature2').html(\"Temperature: \" + data.temperature2 + \" C\"); \n    }); \n\n  $.getq('queue', '/sensor/humidity', function(data) { \n      $('#humidity').html(\"Humidity: \" + data.humidity + \" %\"); \n    }); \n         $.getq('queue', '/sensor2/humidity2', function(data) { \n      $('#humidity2').html(\"Humidity: \" + data.humidity2 + \" %\"); \n}); \n  } \n\n```", "```js\nrefresh_dht(); \nsetInterval(refresh_dht, 10000); \n}); \n\n```", "```js\nvar express = require('express'); \nvar app = express(); \n\n```", "```js\nvar port = 3000; \n\n```", "```js\napp.set('view engine', 'jade'); \n\n```", "```js\napp.use(express.static(__dirname + '/public')); \n\n```", "```js\napp.get('/', function(req, res){ \nres.render('interface'); \n}); \n\n```", "```js\nvar rest = require(\"arest\")(app); \n\n```", "```js\nrest.addDevice('http','192.168.1.108'); \nrest.addDevice('http','192.168.1.105'); \nrest.addDevice('http','192.168.1.107'); \nrest.addDevice('http','192.168.1.110'); \n\n```", "```js\napp.listen(port); \nconsole.log(\"Listening on port \" + port); \n\n```", "```js\n**sudo npm install arest express jade**\n\n```", "```js\n**sudo npm install pug**\n\n```", "```js\n**sudo npm install pi-arest express** \n\n```", "```js\n**sudo npm install arest --unsafe-perm**\n\n```", "```js\n**node app.js**\n\n```"]