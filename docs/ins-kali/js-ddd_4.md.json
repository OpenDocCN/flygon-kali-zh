["```js\nfunction weapons() {\n  result = []\n  dungeon.orcs.forEach(function (orc) {\n    result.push(orc.weapon.type)\n  })\n  return result\n}\n```", "```js\nvar myMock = {\n  called: false,\n  aFunction: function () { myMock.called = true }\n}\n```", "```js\nvar assert = require(\"assert\")\n\nfunction test_my_mock() {\n  mock = Object.create(myMock) // called on the mock is false\n  mock.aFunction()\n  assert(mock.called) // called on the mock is true\n}\n\ntest_my_mock()\n```", "```js\nvar sinon = require(\"sinon\")\n\nvar anApi = {\n  foo: function () {\n         return \"123\"\n       }\n}\n\ndescribe(\"Implementing an API\", function () {\n  it(\"is a mock\", function () {\n    var mock = sinon.mock(anApi)\n    mock.expects(\"foo\").once()\n\n    anApi.foo()\n    mock.verify()\n  })\n})\n```", "```js\n/* get a prisoner to transfer */\nfunction getPrisonerForTransfer() { return {} }\n\n/* get a dungeon to transfer to */\nfunction getDungenonToTransfer() { return { inbox: [] } }\n```", "```js\nvar transportManager = new TransportManager(driver, horse, cart)\ntransportManager.initializeTransport(prisoner)\n```", "```js\nfunction Orc(firstName, lastName) {\n  this.firstName = firstName\n  this.lastName = lastName\n}\n\nOrc.prototype.fullName = function () {\n  return this.firstName + \" \" + this.lastName\n}\n```", "```js\nfunction Orc(age) {\n  this.age = age\n  this.attacking = false\n}\n\nOrc.prototype.goToBattle = function () {\n  if (age < 18) throw new Error(\"To young for battle\")\n  this.attacking = true\n}\n```", "```js\nclass Carriage\n  def transport prisoner\n    # some work happens\n  end\nend\n\ncarriage = Carriage.new\ncarriage.transport(a_prisoner)\n```", "```js\nvar carriage = {\n  transport: function(prisoner) {\n    // do some work\n  }\n}\n\ncarriage.transport(aPrisoner)\n```", "```js\nfunction Carriage() {}\nCarriage.prototype.transport = function (prisoner) {\n  // do some work\n}\n\nvar carriage = new Carriage()\ncarriage.transport(aPrisoner)\n```", "```js\nfunction Notifications(store) {\n  if (typeof(store) === 'undefined') {\n    this.store = []\n  } else {\n    this.store = store\n  }\n}\n\nNotifications.prototype.add = function (notification) {\n  store.push(notifictation)\n}\n```", "```js\ninterface Orc {\n    abstract public String kill(String attacker);\n}\n\nclass SwordMaster implements Orc {\n    public String kill(String name) {\n        return \"Slash \" + name;\n    }\n}\n\nclass AxeMaster implements Orc {\n    public String kill(String name) {\n       return \"Split \" + name;\n    }\n}\n```", "```js\nclass Master {\n  Orc[] guards;\n  public Master(Orc[] guards) {\n    this.guards = guards;\n  }\n\n  public void figthOfAttack(String[] attackers) {\n    for(int i = 0; i < attackers.length; i++) {\n      System.out.println(guards[i].kill(attackers[i]));\n    }\n  }\n}\n```", "```js\nvar axeMaster = {\n  kill: function(name) { return \"Hack \" + name; }\n}\n\nvar swordMaster = {\n  kill: function(name) { return \"Slash \" + name; }\n}\n```", "```js\nvar Master = function (guards) { this.guards = guards }\nMaster.prototype.fightOfAttackers = function (attackers) {\n  var self = this\n  attackers.forEach(function (attacker, idx) {\n    console.log(self.guards[idx].kill(attacker))\n  })\n}\n```", "```js\nprisonerTransfer = function (prisoner,\n                             otherDungeon,\n                             ourDungeon,\n                             notifier,\n                             callback) {\n  var keeper = ourDungeon.getOrc()\n  var carriage = ourDungeon.getCarriage()\n  var transfer = prepareTransfer(carriage, keeper, prisoner)\n  if (transfer) {\n    notifier.message(dungeon, transfer)\n    callback()\n  } else {\n    callback(new Error(\"Transfer initiation failed.\"))\n  }\n}\nfunction prepareTransfer(carriage, keeper, prisoner) {\n  return {}\n}\n```", "```js\nit(\"notifies other dungeons of the transfer\", function (done) {\n  prisonerTransfer(\"prisoner\",\n                   getOtherDungeon(),\n                   getLocalDungeon(),\n                   getNotifier(),\n                   function (err) {\n      assert.ifError(err)\n      assert.equal(dungeon.inbox.length, 1)\n      done()\n    })\n})\n```", "```js\nfunction getOtherDungeon() {\n  return { inbox: [] }\n}\n\nfunction getLocalDungeon() {\n  return {\n    getOrc: function () { return {} },\n      getCarriage: function () { return {} }\n     }\n   }\n\nfunction getNotifier() {\n  return {\n    message: function (target, reason) { target.inbox.push({}) }\n  }\n}\n```"]