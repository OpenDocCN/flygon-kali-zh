["```\n **docker node update --availability drain node-name**\n\n```", "```\n**$ belt cluster new --driver digitalocean swarm2k**\n\n```", "```\n**$ belt cluster ls**\n**CLUSTER       ACTIVE    LEADER    MASTERS    #NODES**\n**swarm2k       -         -         -          0 / 0**\n\n```", "```\n**$ belt use swarm2k**\n**swarm2k**\n\n```", "```\n**$ belt cluster update region=sgp1**\n\n```", "```\n**$ belt cluster config**\n**digitalocean:**\n **image: \"123456\"**\n **region: sgp1**\n **ssh_key_fingerprint: \"800000\"**\n **ssh_user: root**\n\n```", "```\n**$ belt create 8192MB mg[0:2]**\n**NAME   IPv4         MEMORY  REGION  IMAGE       STATUS**\n**mg2    128.*.*.11   8192     sgp1   Ubuntu docker-1.12.1 new**\n**mg1    128.*.*.220  8192     sgp1   Ubuntu docker-1.12.1 new**\n**mg0    128.*.*.21   8192     sgp1   Ubuntu docker-1.12.1 new**\n\n```", "```\n**$ belt status --wait active=3**\n**STATUS  #NODES  NAMES**\n**new         3   mg2, mg1, mg0**\n**STATUS  #NODES  NAMES**\n**new         3   mg2, mg1, mg0**\n**STATUS  #NODES  NAMES**\n**new         3   mg2, mg1, mg0**\n**STATUS  #NODES  NAMES**\n**active      3   mg2, mg1, mg0**\n\n```", "```\n**$ belt active mg0**\n**swarm2k/mg0**\n\n```", "```\n**$ belt docker swarm init --advertise-addr 128.*.*.220**\n**Swarm initialized: current node (24j7sytbomhshtayt74lf7njo) is now \n    a manager.**\n\n```", "```\n **docker swarm join \\**\n **--token SWMTKN-1-1wwyxnfcgqt...fwzc1in3 \\**\n **128.*.*.220:2377**\n\n```", "```\n**$ belt --host mg[1:2] docker swarm join \\**\n **--token --token SWMTKN-1-1wwyxnfcgqt...fwzc1in3 \\**\n **128.*.*.220:2377**\n\n```", "```\n**$ docker-machine create \\**\n **--driver generic \\**\n **--generic-ip-address=$(belt ip mg0) mg0**\n**Running pre-create checks...**\n**Creating machine...**\n**(mg0) No SSH key specified. Assuming an existing key at the default \n    location.**\n**Waiting for machine to be running, this may take a few minutes...**\n**Detecting operating system of created instance...**\n**Waiting for SSH to be available...**\n**Detecting the provisioner...**\n**Provisioning with ubuntu(systemd)...**\n**Installing Docker...**\n**Copying certs to the local machine directory...**\n**Copying certs to the remote machine...**\n**Setting Docker configuration on the remote daemon...**\n**Checking connection to Docker...**\n**Then we can test our working swarm with `docker info`. We grep only \n    15 lines for the brevity.**\n**$ docker $(docker-machine config mg0) info | grep -A 15 Swarm**\n**Swarm: active**\n **NodeID: 24j7sytbomhshtayt74lf7njo**\n **Is Manager: true**\n **ClusterID: 8rshkwfq4hsil2tdb3idpqdeg**\n **Managers: 3**\n **Nodes: 3**\n **Orchestration:**\n **Task History Retention Limit: 5**\n **Raft:**\n **Snapshot Interval: 10000**\n **Heartbeat Tick: 1**\n **Election Tick: 3**\n **Dispatcher:**\n **Heartbeat Period: 5 seconds**\n **CA Configuration:**\n **Expiry Duration: 3 months**\n\n```", "```\n**$ docker $(docker-machine config mg0) node ls**\n**ID                       HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS**\n**24j7sytbomhshtayt74lf7njo *  mg0       Ready   Active        Leader**\n**2a4jcvp32aoa6olaxlelthkws    mg1       Ready   Active        Reachable**\n**94po1ln0j0g5fgjnjfvm1w02r    mg2       Ready   Active        Reachable**\n\n```", "```\n**$ eval $(docker-machine env mg0)**\n**$ docker service create --name nginx --replicas 3 nginx**\n**du2luca34cmy**\n\n```", "```\n**root@mg0:~# ls /var/run/docker/netns -al**\n**total 0**\n**drwxr-xr-x 2 root root 120 Aug 22 15:38 .**\n**drwx------ 5 root root 100 Aug 22 13:39 ..**\n**-r--r--r-- 1 root root   0 Aug 22 15:17 1-5t4znibozx**\n**-r--r--r-- 1 root root   0 Aug 22 15:36 d9ef48834a31**\n**-r--r--r-- 1 root root   0 Aug 22 15:17 fe3714ca42d0**\n\n```", "```\n**root@node1:~# nsenter --net=/var/run/docker/netns/fe3714ca42d0 ipvsadm -L**\n**IP Virtual Server version 1.2.1 (size=4096)**\n**Prot LocalAddress:Port Scheduler Flags**\n **-> RemoteAddress:Port           Forward Weight ActiveConn InActConn**\n**FWM  259 rr**\n **-> 10.255.0.8:0                 Masq    1      0          2**\n\n```", "```\n**$ docker node update --availability drain mg0**\n**$ docker node update --availability drain mg1**\n**$ docker node update --availability drain mg2**\n\n```", "```\n**$ docker node ls**\n**ID                  HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS**\n**4viybni..h24zxde    mg1       Ready   Active        Reachable**\n**6xxwumb..j6zvtyg *  mg0       Ready   Active        Leader**\n**f1vs2e3..abdehnh    mg2       Ready   Active**\n\n```", "```\n**$ docker node demote mg1**\n**Manager mg1 demoted in the swarm.**\n\n```", "```\n**$ docker node ls**\n**ID                  HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS**\n**4viybni..h24zxde    mg1       Ready   Active** \n**6xxwumb..j6zvtyg *  mg0       Ready   Active        Leader**\n**f1vs2e3..abdehnh    mg2       Ready   Active** \n\n```", "```\n**$ doctl compute droplet-action shutdown 23362382**\n\n```", "```\n**$ docker node ls**\n**ID                   HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS**\n**4viybni0ud2gjpay6ih24zxde    mg1       Down    Active**\n**6xxwumbdac34bbgh6hj6zvtyg *  mg0       Ready   Active        Leader**\n**f1vs2e3hjiqjaukmjqabdehnh    mg2       Ready   Active**\n\n```", "```\n**$ doctl -c .doctlcfg compute droplet-action power-on 23362382**\n\n```", "```\n**$ docker node ls**\n**ID                  HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS**\n**4viybni..h24zxde    mg1       Ready   Active** \n**6xxwumb..j6zvtyg *  mg0       Ready   Active        Leader**\n**f1vs2e3..abdehnh    mg2       Ready   Active**\n\n```", "```\n**$ docker node promote mg1**\n**Node mg1 promoted to a manager in the swarm.**\n\n```", "```\n**# Read metrics about swarm tasks and services**\n**[[inputs.swarm]]**\n**\u00a0 # Docker Endpoint**\n**\u00a0 #\u00a0\u00a0 To use TCP, set endpoint = \"tcp://[ip]:[port]\"**\n**#\u00a0\u00a0 To use environment variables (ie, docker-machine), set endpoint =** \n **\"ENV\"**\n**\u00a0 endpoint = \"unix:///var/run/docker.sock\"**\n**\u00a0 timeout = \u201c10s\u201d**\n\n```", "```\n **$ docker run -d \\**\n **-p 8083:8083 \\**\n **-p 8086:8086 \\**\n **--expose 8090 \\**\n **--expose 8099 \\**\n **-e PRE_CREATE_DB=telegraf \\**\n **--name influxsrv**\n **tutum/influxdb**\n\n```", "```\n**docker run -d \\**\n **-p 80:3000 \\**\n **-e HTTP_USER=admin \\**\n **-e HTTP_PASS=admin \\**\n **-e INFLUXDB_HOST=$(belt ip influxdb) \\**\n **-e INFLUXDB_PORT=8086 \\**\n **-e INFLUXDB_NAME=telegraf \\**\n **-e INFLUXDB_USER=root \\**\n **-e INFLUXDB_PASS=root \\**\n **--name grafana \\**\n **grafana/grafana**\n\n```", "```\n**{**\n **\"name\":\"telegraf\",**\n **\"type\":\"influxdb\",**\n **\"access\":\"proxy\",**\n **\"url\":\"http://$INFLUX_DB_IP:8086\",**\n **\"user\":\"root\",**\n **\"password\":\"root\",**\n **\"database\":\"telegraf\",**\n **\"basicAuth\":true,**\n **\"basicAuthUser\":\"admin\",**\n **\"basicAuthPassword\":\"admin\",**\n **\"withCredentials\":false,**\n **\"isDefault\":true**\n**}**\n\n```", "```\n**$ docker network create -d overlay mydb**\n\n```", "```\n**#!/bin/bash**\n**ETCD_SUBNET=${ETCD_SUBNET:-10.0.0.0}**\n**ETCD_HOST=$(ip route get $ETCD_SUBNET | awk 'NR==1 {print $NF}')**\n**/usr/local/bin/etcd \\**\n **-name etcd0 \\**\n **-advertise-client-urls \n       http://${ETCD_HOST}:2379,http://${ETCD_HOST}:4001 \\**\n **-listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \\**\n **-initial-advertise-peer-urls http://${ETCD_HOST}:2380 \\**\n **-listen-peer-urls http://0.0.0.0:2380 \\**\n **-initial-cluster-token etcd-cluster-1 \\**\n **-initial-cluster etcd0=http://${ETCD_HOST}:2380 \\**\n **-initial-cluster-state new**\n\n```", "```\n**FROM quay.io/coreos/etcd**\n**COPY entrypoint.sh /usr/local/bin/entrypoint.sh**\n**RUN  chmod +x /usr/local/bin/entrypoint.sh**\n**ENTRYPOINT ['/usr/local/bin/entrypoint.sh']** \n\n```", "```\n**$ docker service create --name etcd --network mydb chanwit/etcd**\n\n```", "```\n**$ docker service inspect etcd -f \"{{ .Endpoint.VirtualIPs }}\"**\n**[{... 10.0.0.2/24}]**\n\n```", "```\n**docker service create \\**\n**--name mysql \\**\n**-p 3306:3306 \\**\n**--network mydb \\**\n**--env MYSQL_ROOT_PASSWORD=mypassword \\**\n**--env DISCOVERY_SERVICE=10.0.0.2:2379 \\**\n**--env XTRABACKUP_PASSWORD=mypassword \\**\n**--env CLUSTER_NAME=galera \\**\n**--mount \"type=bind,src=/var/lib/mysql,dst=/var/lib/mysql\" \\**\n**perconalab/percona-xtradb-cluster:5.6**\n\n```", "```\n**net.ipv4.neigh.default.gc_thresh1 = 30000 \n    net.ipv4.neigh.default.gc_thresh2 = 32000    \n    net.ipv4.neigh.default.gc_thresh3 = 32768**\n\n```"]