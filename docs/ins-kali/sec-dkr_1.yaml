- en: Chapter 1. Securing Docker Hosts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。保护Docker主机
- en: 'Welcome to the *Securing Docker* book! We are glad you decided to pick up the
    book and we want to make sure that the resources you are using are being secured
    in proper ways to ensure system integrity and data loss prevention. It is also
    important to understand why you should care about the security. If data loss prevention
    doesn''t scare you already, thinking about the worst possible scenario—a full
    system compromise and the possibility of your secret designs being leaked or stolen
    by others—might help to reinforce security. Throughout this book, we will be covering
    a lot of topics to help get your environment set up securely so that you can begin
    to start deploying containers with peace of mind knowing that you took the right
    steps in the beginning to fortify your environment. In this chapter, we will be
    taking a look at securing Docker hosts and will be covering the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到*Securing Docker*书籍！我们很高兴您决定阅读这本书，我们希望确保您使用的资源得到适当的保护，以确保系统完整性和数据丢失预防。了解为什么您应该关心安全性也很重要。如果数据丢失预防还没有吓到您，那么考虑最坏的情况——整个系统被攻破，您的机密设计可能被泄露或被他人窃取——可能有助于加强安全性。在本书中，我们将涵盖许多主题，以帮助您安全地设置环境，以便您可以放心地开始部署容器，知道您在开始时采取了正确的步骤来加强您的环境。在本章中，我们将着眼于保护Docker主机，并将涵盖以下主题：
- en: Docker host overview
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker主机概述
- en: Discussing Docker host
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论Docker主机
- en: Virtualization and isolation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化和隔离
- en: Attack surface of Docker daemon
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序的攻击面
- en: Securing Docker hosts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护Docker主机
- en: Docker Machine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine
- en: SELinux and AppArmor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux和AppArmor
- en: Auto-patching hosts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动修补主机
- en: Docker host overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker主机概述
- en: Before we get in depth and dive in, let's first take a step back and review
    exactly what the Docker host is. In this section, we will look at the Docker host
    itself to get an understanding of what we are referring to when we are talking
    about the Docker host. We will also be looking at the virtualization and isolation
    techniques that Docker uses to ensure security.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究之前，让我们先退一步，确切地了解Docker主机是什么。在本节中，我们将查看Docker主机本身，以了解我们在谈论Docker主机时指的是什么。我们还将研究Docker使用的虚拟化和隔离技术，以确保安全性。
- en: Discussing Docker host
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论Docker主机
- en: 'When we think of a Docker host, what comes to our mind? If you put it in terms
    of virtual machines that almost all of us are familiar with, let''s take a look
    at how a typical VM host differs from a Docker host. A **VM host** is what the
    virtual machines actually run on top of. Typically, this is something like **VMware
    ESXi** if you are using VMware or **Windows Server** if you are using **Hyper-V**.
    Let''s take a look at how they are as compared so that you can get a visual representation
    of the two, as shown in the following diagram:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到Docker主机时，我们会想到什么？如果用我们几乎都熟悉的虚拟机来说，让我们看看典型的VM主机与Docker主机有何不同。**VM主机**是虚拟机实际运行在其上的地方。通常情况下，如果您使用VMware，则是**VMware
    ESXi**，如果您使用**Hyper-V**，则是**Windows Server**。让我们来看看它们的比较，以便您可以对两者有一个视觉上的表示，如下图所示：
- en: '![Discussing Docker host](../images/00002.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![讨论Docker主机](../images/00002.jpeg)'
- en: The preceding image depicts the similarities between a **VM host** and **Docker
    host**. As stated previously, the host of any service is simply the system that
    the underlying virtual machines or containers in Docker run on top of. Therefore,
    a host is the operating system or service that contains and operates the underlying
    systems that you install and set up a service on, such as web servers, databases,
    and more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上图描述了VM主机和Docker主机之间的相似之处。如前所述，任何服务的主机只是底层虚拟机或Docker容器运行的系统。因此，主机是包含和操作您安装和设置服务的底层系统的操作系统或服务，例如Web服务器、数据库等。
- en: Virtualization and isolation
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化和隔离
- en: 'To understand how Docker hosts can be secured, we must first understand how
    the **Docker host** is set up and what items are contained in the **Docker host**.
    Again, like VM hosts, they contain the operating system that the underlying service
    operates on. With VMs, you are creating a whole new operating system on top of
    this **VM host** operating system. However, on Docker, you are not doing that
    and are sharing the **Linux Kernel** that the **Docker host** is using. Let''s
    take a look at the following diagram to help us represent this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何保护Docker主机之前，我们必须首先了解Docker主机是如何设置以及Docker主机中包含哪些项目。与VM主机一样，它们包含底层服务运行的操作系统。对于VM，您正在在VM主机操作系统之上创建一个全新的操作系统。然而，在Docker上，您并没有这样做，而是共享Docker主机正在使用的Linux内核。让我们看一下以下图表，以帮助我们表示这一点：
- en: '![Virtualization and isolation](../images/00003.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![虚拟化和隔离](../images/00003.jpeg)'
- en: As we can see from the preceding image, there is a distinct difference between
    how items are set up on a **VM host** and on a **Docker host**. On a **VM host**,
    each virtual machine has all of its own items inclusive to itself. Each containerized
    application brings its own set of libraries, whether it is Windows or Linux. Now,
    on the **Docker host**, we don't see that. We see that they share the **Linux
    Kernel** version that is being used on the **Docker host**. That being said, there
    are some security aspects that need to be addressed on the **Docker host** side
    of things. Now, on the **VM host** side, if someone does compromise a virtual
    machine, the operating system is isolated to just that one virtual machine. Back
    on the **Docker host** side of things, if the kernel is compromised on the **Docker
    host**, then all the containers running on that host are now at high risk as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图中可以看出，VM主机和Docker主机上的项目设置方式有明显的区别。在VM主机上，每个虚拟机都有其自己的项目。每个容器化应用程序都带有自己的一套库，无论是Windows还是Linux。现在，在Docker主机上，我们看不到这一点。我们看到它们共享Docker主机上正在使用的Linux内核版本。也就是说，Docker主机方面需要解决一些安全方面的问题。现在，在VM主机方面，如果某个虚拟机受到了损害，操作系统只是隔离在那一个虚拟机中。回到Docker主机方面，如果Docker主机上的内核受到了损害，那么运行在该主机上的所有容器也会面临很高的风险。
- en: So, now you should see how important it is that we focus on security when it
    comes to Docker hosts. Docker hosts do use some isolation techniques that will
    help protect against kernel or container compromises in a few ways. Two of these
    ways are by implementing **namespaces** and **cgroups**. Before we can discuss
    how they help, let's first give a definition for each of them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在您应该明白了，当涉及到Docker主机时，我们专注于安全是多么重要。Docker主机确实使用了一些隔离技术，可以在一定程度上保护免受内核或容器受损。其中两种方式是通过实施命名空间和cgroups。在讨论它们如何帮助之前，让我们先给出它们的定义。
- en: Kernel namespaces, as they are commonly known as, provide a form of isolation
    for the containers that will be running on your hosts. What does this mean? This
    means that each container that you run on top of your Docker hosts will be given
    its own network stack so that it doesn't get privileged access to another container's
    socket or interfaces. However, by default, all Docker containers are sitting on
    the bridged interface so that they can communicate with each other easily. Think
    of the bridged interface as a network switch that all the containers are connected
    to.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 内核命名空间，通常被称为，为在主机上运行的容器提供一种隔离形式。这意味着什么？这意味着你在Docker主机上运行的每个容器都将被赋予自己的网络堆栈，以便它不会特权访问另一个容器的套接字或接口。然而，默认情况下，所有Docker容器都位于桥接接口上，以便它们可以轻松地相互通信。将桥接接口视为所有容器连接到的网络交换机。
- en: Namespaces also provide isolation for processes and mount isolation. Processes
    running in one container can't affect or even see processes running in another
    Docker container. Isolation for mount points is also on a container by container
    basis. This means that mount points on one container can't see or interact with
    mount points on another container.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间还为进程和挂载点提供隔离。在一个容器中运行的进程不能影响或甚至看到在另一个Docker容器中运行的进程。挂载点的隔离也是基于每个容器的。这意味着一个容器上的挂载点不能看到或与另一个容器上的挂载点进行交互。
- en: On the other hand, control groups are what control and limit resources for containers
    that will be running on top of your Docker hosts. What does this boil down to,
    meaning how will it benefit you? It means that cgroups, as they will be called
    going forward, help each container get its fair share of memory disk I/O, CPU,
    and much more. So, a container cannot bring down an entire host by exhausting
    all the resources available on it. This will help to ensure that even if an application
    is misbehaving that the other containers won't be affected by this application
    and your other applications can be assured uptime.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，控制组是控制和限制将在Docker主机上运行的容器资源的工具。这归结为什么，意味着它将如何使你受益？这意味着cgroups，它们将被称为，帮助每个容器获得其公平份额的内存磁盘I/O，CPU等等。因此，一个容器不能通过耗尽其上可用的所有资源来使整个主机崩溃。这将有助于确保即使一个应用程序表现不佳，其他容器也不会受到这个应用程序的影响，你的其他应用程序可以保证正常运行时间。
- en: Attack surface of Docker daemon
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker守护程序的攻击面
- en: While Docker does ease some of the complicated work in the virtualization world,
    it is easy to forget to think about the security implications of running containers
    on your Docker hosts. The largest concern you need to be aware of is that Docker
    requires root privileges to operate. For this reason, you need to be aware of
    who has access to your Docker hosts and the Docker daemon as they will have full
    administrative access to all your Docker containers and images on your Docker
    host. They can start new containers, stop existing ones, remove images, pull new
    images, and even reconfigure running containers as well by injecting commands
    into them. They can also extract sensitive information like passwords and certificates
    from the containers. For this reason, make sure to also separate important containers
    if you do need to keep separate controls on who has access to your Docker daemon.
    This is for containers where people have a need for access to the Docker host
    where the containers are running. If a user needs API access then that is different
    and separation might not be necessary. For example, keep containers that are sensitive
    on one Docker host, while keeping normal operation containers running on another
    Docker host and grant permissions for other staff access to the Docker daemon
    on the unprivileged host. If possible, it is also recommended to drop the setuid
    and setgid capabilities from containers that will be running on your hosts. If
    you are going to run Docker, it's recommended to only use Docker on this server
    and not other applications. Docker also starts containers with a very restricted
    set of capabilities, which works in your favor to address security concerns.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Docker确实简化了虚拟化领域的一些复杂工作，但很容易忘记考虑在Docker主机上运行容器的安全影响。您需要注意的最大问题是Docker需要root权限才能运行。因此，您需要知道谁可以访问您的Docker主机和Docker守护程序，因为他们将完全管理您Docker主机上的所有Docker容器和镜像。他们可以启动新容器，停止现有容器，删除镜像，拉取新镜像，甚至通过向其中注入命令来重新配置正在运行的容器。他们还可以从容器中提取密码和证书等敏感信息。因此，如果确实需要对谁可以访问您的Docker守护程序进行分开控制，还需要确保分开重要的容器。这适用于需要访问运行容器的Docker主机的人。如果用户需要API访问，则情况就不同了，可能不需要分开。例如，将敏感的容器保留在一个Docker主机上，而将正常运行的容器保留在另一个Docker主机上，并授予其他员工对非特权主机上的Docker守护程序的访问权限。如果可能的话，还建议取消将在主机上运行的容器的setuid和setgid功能。如果要运行Docker，建议只在此服务器上使用Docker而不是其他应用程序。Docker还以非常受限的功能集启动容器，这有利于解决安全问题。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'To drop the setuid or setgid capabilities when you start a Docker container,
    you will need to do something similar to the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在启动Docker容器时取消setuid或setgid功能，您需要做类似以下操作：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This would start the `nginx` container and would drop the `SETGID` and `SETUID`
    capabilities for the container.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动`nginx`容器，并且会为容器取消`SETGID`和`SETUID`的功能。
- en: Docker's end goal is to map the root user to a non-root user that exists on
    the Docker host. They also are working towards allowing the Docker daemon to run
    without requiring root privileges. These future improvements will only help facilitate
    how much focus Docker does take when they are implementing their feature sets.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的最终目标是将根用户映射到Docker主机上存在的非根用户。他们还致力于使Docker守护程序能够在不需要root权限的情况下运行。这些未来的改进将有助于简化Docker在实施其功能集时所需的关注度。
- en: Protecting the Docker daemon
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护Docker守护程序
- en: To protect the Docker daemon even more, we can secure the communications that
    our Docker daemon is using. We can do this by generating certificates and keys.
    There are are few terms to understand before we dive into the creation of the
    certificates and keys. A **Certificate Authority** (**CA**) is an entity that
    issues certificates. This certificate certifies the ownership of the public key
    by the subject that is specified in the certificate. By doing this, we can ensure
    that your Docker daemon will only accept communication from other daemons that
    have a certificate that was also signed by the same CA.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步保护Docker守护程序，我们可以保护Docker守护程序正在使用的通信。我们可以通过生成证书和密钥来实现这一点。在我们深入创建证书和密钥之前，有一些术语需要理解。**证书颁发机构**（**CA**）是颁发证书的实体。该证书证明了主体对公钥的所有权。通过这样做，我们可以确保您的Docker守护程序只接受由相同CA签署的证书的其他守护程序的通信。
- en: 'Now, we will be looking at how to ensure that the containers you will be running
    on top of your Docker hosts will be secure in a few pages; however, first and
    foremost, you want to make sure the Docker daemon is running securely. To do this,
    there are some parameters you will need to enable for when the daemon starts.
    Some of the things you will need beforehand will be as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下如何确保您在Docker主机上运行的容器将在接下来的几页中是安全的；然而，首先，您需要确保Docker守护程序在安全运行。为此，您需要在守护程序启动时启用一些参数。您需要预先准备一些东西，如下所示：
- en: Create a CA.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建CA。
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will need to specify two values, `pass phrase` and `pass phrase`. This needs
    to be between `4` and `1023` characters. Anything less than `4` or more than `1023`
    won't be accepted.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要指定两个值，`密码短语`和`密码短语`。这需要在`4`和`1023`个字符之间。少于`4`或多于`1023`的字符将不被接受。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are a couple of items you will need. You will need `pass phrase` you entered
    earlier for `ca-key.pem`. You will also need the `Country`, `State`, `city`, `Organization
    Name`, `Organizational Unit Name`, **fully qualified domain name** (**FQDN**),
    and `Email Address` to be able to finalize the certificate.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一些项目。您需要之前输入的`密码短语`用于`ca-key.pem`。您还需要`国家`、`州`、`城市`、`组织名称`、`组织单位名称`、**完全限定域名**（**FQDN**）和`电子邮件地址`以完成证书。
- en: Create a client key and signing certificate.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建客户端密钥和签名证书。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sign the public key.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 签署公钥。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Change permissions.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改权限。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, you can make sure that your Docker daemon only accepts connections from
    the other Docker hosts that you provide the signed certificates to:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以确保您的Docker守护程序只接受来自您提供签署证书的其他Docker主机的连接：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Make sure that the certificate files are in the directory you are running the
    command from or you will need to specify the full path to the certificate file.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保证书文件位于您运行命令的目录中，否则您需要指定证书文件的完整路径。
- en: 'On each client, you will need to run the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个客户端上，您需要运行以下命令：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, the location of the certificates is important. Make sure to either have
    them in a directory where you plan to run the preceding command or specify the
    full path to the certificate and key file locations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，证书的位置很重要。确保它们位于您计划运行前述命令的目录中，或者指定证书和密钥文件位置的完整路径。
- en: 'You can read more about using **Transport Layer Security** (**TLS**) by default
    with your Docker daemon by going to the following link:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问以下链接了解如何默认情况下在Docker守护程序中使用**传输层安全**（**TLS**）：
- en: '[http://docs.docker.com/engine/articles/https/](http://docs.docker.com/engine/articles/https/)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.docker.com/engine/articles/https/](http://docs.docker.com/engine/articles/https/)'
- en: 'For more reading on **Docker Secure Deployment Guidelines**, the following
    link provides a table that can be used to gain insight into some other items you
    can utilize as well:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有关**Docker 安全部署指南**的更多阅读，以下链接提供了一个表格，可以用来深入了解您还可以利用的其他一些项目：
- en: '[https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)'
- en: 'Some of the highlights from that website are:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站的一些亮点包括：
- en: Collecting security and audit logs
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集安全和审计日志
- en: Utilizing the privileged switch when running Docker containers
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行 Docker 容器时使用特权开关
- en: Device control groups
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备控制组
- en: Mount points
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂载点
- en: Security audits
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全审计
- en: Securing Docker hosts
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护 Docker 主机
- en: Where do we start to secure our hosts? What tools do we need to start with?
    We will take a look at using Docker Machine in this section and how to ensure
    the hosts that we are creating are being created in a secure manner. Docker hosts
    are like the front door of your house, if you don't secure them properly, then
    anybody can just walk right in. We will also take a look at **Security-Enhanced
    Linux** (**SELinux**) and **AppArmor** to ensure that you have an extra layer
    of security on top of the hosts that you are creating. Lastly, we will take a
    look at some of the operating systems that support and do auto patching of their
    operating systems when a security vulnerability is discovered.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从哪里开始保护我们的主机？我们需要从哪些工具开始？我们将在本节中使用 Docker Machine，以及如何确保我们创建的主机是以安全的方式创建的。Docker
    主机就像您房子的前门，如果您没有适当地保护它们，任何人都可以随意进入。我们还将看看**安全增强型 Linux**（**SELinux**）和**AppArmor**，以确保您在创建的主机上有额外的安全层。最后，我们将看看一些支持并在发现安全漏洞时自动修补其操作系统的操作系统。
- en: Docker Machine
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Machine
- en: 'Docker Machine is the tool that allows you to install the Docker daemon onto
    your virtual hosts. You can then manage these Docker hosts with Docker Machine.
    Docker Machine can be installed either through the **Docker Toolbox** on Windows
    and Mac. If you are using Linux, you will install Docker Machine through a simple
    `curl` command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Machine 是一种工具，允许您将 Docker 守护程序安装到您的虚拟主机上。然后，您可以使用 Docker Machine 管理这些
    Docker 主机。Docker Machine 可以通过 Windows 和 Mac 上的**Docker 工具箱**安装。如果您使用 Linux，则可以通过简单的
    `curl` 命令安装 Docker Machine：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first command installs Docker Machine into the `/usr/local/bin` directory
    and the second command changes the permissions on the file and sets it to executable.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条命令将 Docker Machine 安装到 `/usr/local/bin` 目录中，第二条命令更改文件的权限并将其设置为可执行文件。
- en: We will be using Docker Machine in the following walkthrough to set up a new
    Docker host.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下演练中使用 Docker Machine 来设置新的 Docker 主机。
- en: 'Docker Machine is what you should be or will be using to set up your hosts.
    For this reason, we will start with it to ensure your hosts are set up in a secure
    manner. We will take a look at how you can tell if your hosts are secure when
    you create them using the Docker Machine tool. Let''s take a look at what it looks
    like when you create a Docker host using Docker Machine, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Machine 是您应该或将要使用来设置您的主机的工具。因此，我们将从它开始，以确保您的主机以安全的方式设置。我们将看看您如何在使用 Docker
    Machine 工具创建主机时，如何判断您的主机是否安全。让我们看看使用 Docker Machine 创建 Docker 主机时的情况，如下：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'From the preceding output, as the create is running, Docker Machine is doing
    things such as creating the machine, waiting for SSH to become available, performing
    actions, copying the certificates to the correct location, and setting up the
    Docker configuration, we will see how to connect Docker to this machine as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，随着创建的运行，Docker Machine正在执行诸如创建机器、等待SSH可用、执行操作、将证书复制到正确位置以及设置Docker配置等操作，我们将看到如何连接Docker到这台机器，如下所示：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding command output shows the commands that were run to set this machine
    up as the one that Docker commands will now run against:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令输出显示了设置此机器为Docker命令将要运行的机器所需运行的命令：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can now run the regular Docker commands, such as `docker info`, and it will
    return information from `host1`, now that we have set it as our environment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行常规的Docker命令，比如`docker info`，它将从`host1`返回信息，现在我们已经将其设置为我们的环境。
- en: 'We can see from the preceding highlighted output that the host is being set
    up securely from the start from two of the export lines. Here is the first highlighted
    line by itself:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从前面突出显示的输出中看到，主机从两个导出行开始就被安全地设置了。以下是第一个突出显示的行：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'From the other highlighted output, `DOCKER_TLS_VERIFY` is being set to `1`
    or `true`. Here is the second highlighted line by itself:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从其他突出显示的输出中，`DOCKER_TLS_VERIFY`被设置为`1`或`true`。以下是第二个突出显示的行：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are setting the host to operate on the secure port of `2376` as opposed to
    the insecure port of `2375`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主机设置为在安全端口`2376`上运行，而不是在不安全端口`2375`上运行。
- en: 'We can also gain this information by running the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过运行以下命令来获取这些信息：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Make sure to check the TLS switch options that can be used with Docker Machine
    if you have used the previous instructions to set up your Docker hosts and Docker
    containers to use TLS. These switches would be helpful if you have existing certificates
    that you want to use as well. These switches can be found in the highlighted section
    by running the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经使用先前的说明来设置Docker主机和Docker容器使用TLS，请确保检查可以与Docker Machine一起使用的TLS开关选项。如果您有现有的证书要使用，这些开关将非常有用。通过运行以下命令，可以在突出显示的部分找到这些开关：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can also regenerate TLS certificates for a machine using the `regenerate-certs`
    subcommand in the event that you want that peace of mind or that your keys do
    get compromised. An example command would look similar to the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要安心，或者您的密钥确实被 compromise，您也可以使用`regenerate-certs`子命令重新生成机器的TLS证书。一个示例命令看起来类似于以下命令：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: SELinux and AppArmor
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELinux和AppArmor
- en: Most Linux operating systems are based on the fact that they can leverage SELinux
    or AppArmor for more advanced access controls to files or locations on the operating
    system. With these components, you can limit a container's ability to execute
    a program as the root user with root privileges.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux操作系统都基于它们可以利用SELinux或AppArmor来实现对操作系统上的文件或位置的更高级访问控制。使用这些组件，您可以限制容器以root用户的权限执行程序的能力。
- en: Docker does ship a security model template that comes with AppArmor and Red
    Hat comes with SELinux policies as well for Docker. You can utilize these provided
    templates to add an additional layer of security on top of your environments.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Docker确实提供了一个安全模型模板，其中包括AppArmor，Red Hat也为Docker提供了SELinux策略。您可以利用这些提供的模板在您的环境中添加额外的安全层。
- en: 'For more information about SELinux and Docker, I would recommend visiting the
    following website:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SELinux和Docker的更多信息，我建议访问以下网站：
- en: '[https://www.mankier.com/8/docker_selinux](https://www.mankier.com/8/docker_selinux)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.mankier.com/8/docker_selinux](https://www.mankier.com/8/docker_selinux)'
- en: 'While, on the other hand, if you are in the market for some more reading on
    AppArmor and Docker, I would recommend visiting the following website:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你正在寻找关于AppArmor和Docker的更多阅读材料，我建议访问以下网站：
- en: '[https://github.com/docker/docker/tree/master/contrib/apparmor](https://github.com/docker/docker/tree/master/contrib/apparmor)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/docker/docker/tree/master/contrib/apparmor](https://github.com/docker/docker/tree/master/contrib/apparmor)'
- en: Here you will find a `template.go` file, which is the template that Docker ships
    with its application that is the AppArmor template.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将找到一个`template.go`文件，这是Docker随其应用程序一起提供的AppArmor模板。
- en: Auto-patching hosts
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动修补主机
- en: If you really want to get into advanced Docker hosts, then you could use **CoreOS**
    and **Amazon Linux AMI**, which perform auto-patching, both in a different way.
    While CoreOS will patch your operating system when a security update comes out
    and will reboot your operating system, the Amazon Linux AMI will complete the
    updates when you reboot. So, when choosing which operating system to use when
    you are setting up your Docker hosts, make sure to take into account the fact
    that both of these operating systems implement some form of auto-patching, but
    in a different way. You will want to make sure you are implementing some type
    of scaling or failover to address the needs of something that is running on CoreOS
    so that there is no downtime when a reboot occurs to patch the operating system.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您真的想深入了解高级Docker主机，那么您可以使用CoreOS和Amazon Linux AMI，它们都以不同的方式进行自动修补。CoreOS将在安全更新发布时对您的操作系统进行修补并重新启动您的操作系统，而Amazon
    Linux AMI将在您重新启动时完成更新。因此，在设置Docker主机时选择要使用的操作系统时，请确保考虑到这两种操作系统都以不同的方式实现了某种形式的自动修补。您将希望确保实施某种类型的扩展或故障转移来满足在CoreOS上运行时的需求，以便在重新启动以修补操作系统时不会出现停机时间。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to secure our Docker hosts. The Docker hosts
    are the first line of defense as they are the starting point where your containers
    will be running and communicating with each other and end users. If these aren't
    secure, then there is no purpose of moving forward with anything else. You learned
    how to set up the Docker daemon to run securely running TLS by generating the
    appropriate certificates for both the host and the clients. We also looked at
    the virtualization and isolation benefits of using Docker containers, but make
    sure to remember the attack surface of the Docker daemon too.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何保护我们的Docker主机。Docker主机是第一道防线，因为它们是您的容器将运行和相互通信以及最终用户的起点。如果这些不安全，那么继续进行其他任何事情就没有意义。您学会了如何设置Docker守护程序以通过为主机和客户端生成适当的证书来安全运行TLS。我们还看了使用Docker容器的虚拟化和隔离优势，但请记住Docker守护程序的攻击面。
- en: Other items included how to use Docker Machine to easily create Docker hosts
    on secure operating systems with secure communication and ensure that they are
    being set up using secure methods when you use it to set up your containers. Using
    items such as SELinux and AppArmor also help to improve your security footprint
    as well. Lastly, we covered some Docker host operating systems that you can use
    for auto-patching as well, such as CoreOS and Amazon Linux AMI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 其他内容包括如何使用Docker Machine在安全操作系统上轻松创建Docker主机，并确保在设置容器时使用安全方法。使用SELinux和AppArmor等项目也有助于改善您的安全性。最后，我们还介绍了一些Docker主机操作系统，您也可以使用自动修补，例如CoreOS和Amazon
    Linux AMI。
- en: In the next chapter, we will be looking at securing the components of Docker.
    We will focus on securing the components of Docker such as the registry you can
    use, containers that run on your hosts, and how to sign your images.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究如何保护Docker的组件。我们将重点关注保护Docker的组件，比如您可以使用的注册表、运行在您主机上的容器，以及如何对您的镜像进行签名。
