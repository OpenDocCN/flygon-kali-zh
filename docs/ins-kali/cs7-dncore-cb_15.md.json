["```cs\n        namespace UtilitiesActor.Interfaces \n        { \n          public interface IUtilitiesActor : IActor \n          { \n            Task<bool> ValidateEmailAsync(string emailToValidate); \n          } \n        }\n\n```", "```cs\n        namespace UtilitiesActor \n        { \n          internal class UtilitiesActor : StatelessActor, IUtilitiesActor \n          { \n            public UtilitiesActor(ActorService actorService, \n              ActorId actorId) : base(actorService, actorId)\n            {\n            }\n            public async Task<bool> ValidateEmailAsync(string \n              emailToValidate) \n            { \n              throw new NotImplementedException(); \n            }         \n          } \n        }\n\n```", "```cs\n        public async Task<bool> ValidateEmailAsync(string emailToValidate)\n        {\n          ActorEventSource.Current.ActorMessage(this, \"Email Validation\");\n          return await Task.FromResult(Regex.IsMatch(emailToValidate, \n          @\"A(?:[a-z0-9!#$%&'*+/=?^_&grave;{|}~-]+(?:.[\n          a-z0-9!#$%&'*+/=?^_&grave;{|}~-]+) *@(?:[a-z0-9](?:[a-z0-9-]\n          *[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\n          Z\", RegexOptions.IgnoreCase));\n        }\n\n```", "```cs\n        namespace sfApp.Client \n        { \n          class Program \n          { \n            static void Main(string[] args)\n            {\n              var actProxy = ActorProxy.Create<IUtilitiesActor>\n                (ActorId.CreateRandom(), \"fabric:/sfApp\");\n              WriteLine(\"Utilities Actor {0} - Valid Email?:{1}\", \n              actProxy.GetActorId(), actProxy.ValidateEmailAsync(\n              \"validemail@gmail.com\").Result);\n              WriteLine(\"Utilities Actor {0} - Valid Email?:{1}\", \n              actProxy.GetActorId(), actProxy.ValidateEmailAsync(\n              \"invalid@email@gmail.com\").Result);\n              ReadLine();\n            } \n          }   \n        }\n\n```", "```cs\n        using Microsoft.ServiceFabric.Actors;\n        using Microsoft.ServiceFabric.Actors.Client;\n        using UtilitiesActor.Interfaces;\n        using static System.Console;\n\n```", "```cs\nvar actProxy = ActorProxy.Create<IUtilitiesActor>(new ActorId(\"Utilities\"), \"fabric:/sfApp\");\n\n```"]