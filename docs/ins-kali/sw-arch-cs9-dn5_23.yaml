- en: Answers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: A software architect needs to be aware of any technology that can help them
    solve problems faster and ensure they can create better quality software.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构师需要了解任何可以帮助他们更快解决问题并确保他们能够创建更高质量软件的技术。
- en: Azure provides, and keeps improving, lots of components that a software architect
    can implement in solutions.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure提供并不断改进许多组件，软件架构师可以在解决方案中实现这些组件。
- en: The best software development process model depends on the kind of project,
    team, and budget you have. As a software architect you need to consider all these
    variables and understand different process models so you can fit the environment's
    needs.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最佳的软件开发过程模型取决于您所拥有的项目、团队和预算的类型。作为软件架构师，您需要考虑所有这些变量，并了解不同的过程模型，以便满足环境的需求。
- en: A software architect pays attention to any user or system requirement that can
    have an effect on performance, security, usability, and so on.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构师要注意任何可能影响性能、安全性、可用性等的用户或系统需求。
- en: All of them, but the non-functional requirements need to be given more attention.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有这些，但非功能性需求需要更多关注。
- en: Design Thinking and Design Sprint are tools that help software architects define
    exactly what users need.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计思维和设计冲刺是帮助软件架构师准确定义用户需求的工具。
- en: User Stories are good when we want to define functional requirements. They can
    be written quickly and commonly deliver not only the feature required, but also
    the acceptance criteria for the solution.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户故事在我们想要定义功能需求时很好。它们可以快速编写，并通常不仅提供所需的功能，还提供解决方案的验收标准。
- en: Caching, asynchronous programming, and correct object allocation.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓存、异步编程和正确的对象分配。
- en: To check that the implementation is correct, a software architect compares it
    with models and prototypes that have already been designed and validated.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了检查实现是否正确，软件架构师将其与已经设计和验证的模型和原型进行比较。
- en: Chapter 2
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章
- en: Vertically and horizontally.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 纵向和横向。
- en: Yes, you can deploy automatically to an already-defined web app or create a new
    one directly using Visual Studio.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，您可以自动部署到已定义的Web应用程序，或者直接使用Visual Studio创建一个新的Web应用程序。
- en: To take advantage of available hardware resources by minimizing the time they
    remain idle.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过最小化空闲时间来利用可用的硬件资源。
- en: Code behavior is deterministic, so it is easy to debug. The execution flow mimics
    the flow of sequential code, which means it is easier to design and understand.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码行为是确定性的，因此很容易调试。执行流程模仿了顺序代码的流程，这意味着更容易设计和理解。
- en: Because the right order minimizes the number of gestures that are needed to fill
    in a form.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为正确的顺序可以最大程度地减少填写表单所需的手势数量。
- en: Because it allows for the manipulation of path files in a way that is independent
    of the operating system.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为它允许以独立于操作系统的方式操作路径文件。
- en: It can be used with several .NET Core versions, as well as with several versions
    of the classic .NET framework.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它可以与多个.NET Core版本一起使用，也可以与经典.NET框架的多个版本一起使用。
- en: Console, .NET Core, and .NET standard class library; ASP.NET Core, test, and
    microservices.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台、.NET Core和.NET标准类库；ASP.NET Core、测试和微服务。
- en: Chapter 3
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章
- en: No, it is available for several platforms.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，它适用于多个平台。
- en: Automatic, manual, and load test plans.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动、手动和负载测试计划。
- en: Yes, they can – through Azure DevOps feeds.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，它们可以 - 通过Azure DevOps feeds。
- en: To manage requirements and to organize the whole development process.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理需求并组织整个开发过程。
- en: Epic work items represent high-level system subparts that are made up of several
    features.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 史诗工作项代表由多个功能组成的高级系统子部分。
- en: A child-father relationship.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 父子关系。
- en: Chapter 4
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章
- en: IaaS is a good option when you are migrating from an on-premise solution or
    if you have an infrastructure team.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您从本地解决方案迁移或者拥有基础设施团队时，IaaS是一个不错的选择。
- en: PaaS is the best option for fast and safe software delivery in systems where
    the team is focused on software development.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PaaS是在团队专注于软件开发的系统中快速安全地交付软件的最佳选择。
- en: If the solution you intend to deliver is provided by a well-known player, such
    as a SaaS, you should consider using it.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打算提供的解决方案是由知名厂商提供的，比如SaaS，您应该考虑使用它。
- en: Serverless is definitely an option when you are building a new system if you
    don't have people who specialize in infrastructure and you don't want to worry
    about scalability.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建新系统时，无服务器绝对是一个选择，如果您没有专门从事基础设施的人员，并且不想担心可伸缩性。
- en: Azure SQL Server Database can be up in minutes and you will have all the power
    of Microsoft SQL Server afterward.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure SQL Server数据库可以在几分钟内启动，之后您将拥有Microsoft SQL Server的所有功能。
- en: Azure provides a set of services called Azure Cognitive Services. These services
    provide solutions for vision, speech, language, search, and knowledge.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure提供了一组名为Azure认知服务的服务。这些服务提供了视觉、语音、语言、搜索和知识的解决方案。
- en: In a hybrid scenario, you have the flexibility to decide on the best solution
    for each part of your system, while respecting the solution's development path
    in the future.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在混合场景中，您可以灵活决定系统的每个部分的最佳解决方案，同时尊重解决方案未来的发展路径。
- en: Chapter 5
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章
- en: The modularity of code and deployment modularity.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码的模块化和部署的模块化。
- en: No. Other important advantages include handling the development team and the
    whole CI/CD cycle well, and the possibility of mixing heterogeneous technologies
    easily and effectively.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。其他重要优势包括很好地处理开发团队和整个CI/CD周期，以及轻松有效地混合异构技术的可能性。
- en: A library that helps us implement resilient communication.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 帮助我们实现弹性通信的库。
- en: Once you've installed Docker on your development machine, you can develop, debug,
    and deploy Dockerized .NET Core applications. You can also add Docker images to
    Service Fabric applications that are being handled with Visual Studio.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦在开发机器上安装了Docker，您就可以开发、调试和部署Docker化的.NET Core应用程序。您还可以将Docker映像添加到使用Visual
    Studio处理的Service Fabric应用程序中。
- en: 'Orchestrators are software that manage microservices and nodes in microservice
    clusters. Azure supports two relevant orchestrators: Azure Kubernetes Service
    and Azure Service Fabric.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编排器是管理微服务和微服务集群中的节点的软件。Azure支持两个相关的编排器：Azure Kubernetes服务和Azure Service Fabric。
- en: Because it decouples the actors that take place in a communication.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为它解耦了通信中发生的参与者。
- en: A message broker. It takes care of service-to-service communication and events.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息代理。它负责服务与服务之间的通信和事件。
- en: The same message can be received several times because the sender doesn't receive
    a confirmation of reception before its time-out period, and so the sender resends
    the message again. Therefore, the effect of receiving a single message once, or
    several times, must be the same.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同一条消息可能会被接收多次，因为发送方在超时之前没有收到接收确认，因此发送方会再次发送消息。因此，接收一条消息一次或多次的效果必须相同。
- en: Chapter 6
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: Reliable services are the native Azure Service Fabric services. However, Azure
    Service Fabric can host also other kinds of services, such as Dockerized services.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可靠服务是本机的Azure Service Fabric服务。但是，Azure Service Fabric也可以托管其他类型的服务，例如Docker化服务。
- en: Stateless and Stateful. Stateless services are used to implement microservices
    that don't need to store any state, while Stateful services implement microservices
    that need to store state information.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无状态和有状态。无状态服务用于实现不需要存储任何状态的微服务，而有状态服务用于实现需要存储状态信息的微服务。
- en: It is the `HostBuilder` method inside which you can place your dependency injection
    container.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是`HostBuilder`方法，您可以在其中放置您的依赖注入容器。
- en: The one that is exposed to traffic from outside the cluster and is accessible
    through the cluster's URI.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暴露给集群外部流量并通过集群的URI访问的对象。
- en: In order to implement write/modify parallelism in Stateful services with *sharding*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在有状态服务中实现*分片*的写入/修改并行性。
- en: Using read-only endpoints. Custom communication protocols can be added by providing
    an `IEnumerable` of `ServiceReplicaListener`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用只读端点。通过提供`ServiceReplicaListener`的`IEnumerable`可以添加自定义通信协议。
- en: Chapter 7
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章
- en: Services are needed to dispatch communication to pods, since a pod has no stable
    IP address.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于服务需要将通信分派到Pod，因为Pod没有稳定的IP地址。
- en: Services understand low-level protocols like TCP/IP, but most web applications
    rely on the more sophisticated HTTP protocol. That's why Kubernetes offers higher-level
    entities called `Ingresses` that are built on top of services.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务了解TCP/IP等低级协议，但大多数Web应用程序依赖于更复杂的HTTP协议。这就是为什么Kubernetes提供了称为`Ingresses`的更高级实体，这些实体建立在服务之上。
- en: Helm charts are a way to organize the templating and installation of complex
    Kubernetes applications that contain several `.yaml` files.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm图表是组织模板和安装包含多个`.yaml`文件的复杂Kubernetes应用程序的一种方法。
- en: Yes, with the `---` separator.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，使用`---`分隔符。
- en: With `livenessProbe`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`livenessProbe`。
- en: Because Pods, having no stable location, can't rely on the storage of the node
    where they are currently running.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为Pod没有稳定的位置，无法依赖于它们当前运行的节点的存储。
- en: '`StatefulSet` communication can be sharded to implement write/update parallelism.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`StatefulSet`通信可以被分片以实现写/更新并行性。'
- en: Chapter 8
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: With the help of database-dependent providers.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 借助依赖于数据库的提供程序。
- en: Either by calling them `Id` or by decorating them with the `Key` attribute.
    This can also be done with fluent configuration approach.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将它们称为`Id`或使用`Key`属性进行装饰。这也可以通过流畅的配置方法完成。
- en: With the `MaxLength` and `MinLength` attributes.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MaxLength`和`MinLength`属性。
- en: 'With something similar to: `builder.Entity<Package>().HasIndex(m => m.Name);`.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于以下内容：`builder.Entity<Package>().HasIndex(m => m.Name);`。
- en: 'With something similar to:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类似于以下内容的东西：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add-Migration and Update-Database.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Add-Migration和Update-Database。
- en: No, but you can forcefully include them with the `Include` LINQ clause or by
    using the `UseLazyLoadingProxies` option when configuring your `DbContext`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，但您可以使用`Include` LINQ子句或在配置`DbContext`时使用`UseLazyLoadingProxies`选项强制包含它们。
- en: Yes, it is, thanks to the `Select` LINQ clause.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，谢谢`Select` LINQ子句。
- en: By calling `context.Database.Migrate()`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`context.Database.Migrate()`。
- en: Chapter 9
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: No, it is an in-memory dictionary that can be used as a cache or for other in-memory
    storage needs.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，它是一个可以用作缓存或其他内存存储需求的内存字典。
- en: Yes, they are. Most of this chapter's sections are dedicated to explaining why.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，它们是。本章的大部分部分都致力于解释为什么。
- en: Write operations.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写操作。
- en: The main weaknesses of NoSQL databases are their consistency and transactions,
    while their main advantage is performance, especially when it comes to handling
    distributed writes.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NoSQL数据库的主要弱点是它们的一致性和事务性，而它们的主要优势是性能，特别是在处理分布式写入时。
- en: Eventual, Consistency Prefix, Session, Bounded Staleness, Strong.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终一致性前缀，会话，有界不一致性，强一致性。
- en: No, they are not efficient in a distributed environment. GUID-based strings
    perform better, since their uniqueness is automatic and doesn't require synchronization
    operations.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，它们在分布式环境中效率不高。基于GUID的字符串性能更好，因为它们的唯一性是自动的，不需要同步操作。
- en: '`OwnsMany` and `OwnsOne`.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OwnsMany`和`OwnsOne`。'
- en: Yes, they can. Once you use `SelectMany`, indices can be used to search for
    nested objects.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，可以。一旦使用`SelectMany`，索引就可以用于搜索嵌套对象。
- en: Chapter 10
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: Azure Functions is an Azure PaaS component that allows you to implement FaaS
    solutions.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Functions是Azure的PaaS组件，允许您实现FaaS解决方案。
- en: You can program Azure Functions in different languages, such as C#, F#, PHP,
    Python and Node. You can also create functions using the Azure portal and Visual
    Studio Code.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用不同的语言编写Azure Functions，例如C＃，F＃，PHP，Python和Node。您还可以使用Azure门户和Visual Studio
    Code创建函数。
- en: There are two plan options in Azure Functions. The first plan is the Consumption
    Plan, where you are charged according to the amount you use. The second plan is
    the App Service Plan, where you share your App Service resources with the function's
    needs.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Functions有两种计划选项。第一个计划是按照您使用的数量收费的消耗计划。第二个计划是应用服务计划，您可以在该计划中与函数的需求共享应用服务资源。
- en: The process of deploying functions in Visual Studio is the same as in web app
    deployment.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中部署函数的过程与Web应用程序部署相同。
- en: There are lots of ways we can trigger Azure Functions, such as using Blob Storage,
    Cosmos DB, Event Grid, Event Hubs, HTTP, Microsoft Graph Events, Queue storage,
    Service Bus, Timer, and Webhooks.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过许多方式触发Azure函数，例如使用Blob存储，Cosmos DB，事件网格，事件中心，HTTP，Microsoft Graph事件，队列存储，服务总线，定时器和Webhooks。
- en: Azure Functions v1 needs the .NET Framework Engine, whereas v2 needs .NET Core
    2.2, and v3 needs .NET Core 3.1 and .NET 5.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Functions v1需要.NET Framework引擎，而v2需要.NET Core 2.2，v3需要.NET Core 3.1和.NET
    5。
- en: The execution of every Azure function can be monitored by Application Insights.
    Here, you can check the time it took to process, resource usage, errors, and exceptions
    that happened in each function call.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个Azure函数的执行都可以通过应用程序洞察监控。在这里，您可以检查处理所需的时间，资源使用情况，错误以及每个函数调用中发生的异常。
- en: Chapter 11
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: Design patterns are good solutions to common problems in software development.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计模式是解决软件开发中常见问题的好方法。
- en: While design patterns give you code implementation for typical problems we face
    in development, design principles help you select the best options when it comes
    to implementing the software architecture.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计模式为我们在开发中面临的典型问题提供了代码实现，设计原则则帮助您在实现软件架构时选择最佳选项。
- en: The Builder Pattern will help you generate sophisticated objects without the
    need to define them in the class you are going to use them in.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成复杂对象而无需在您将要使用它们的类中定义它们的生成器模式将有所帮助。
- en: The Factory Pattern is really useful in situations where you have multiple kinds
    of object from the same abstraction, and you don't know which of them needs to
    be created by the time you start coding.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工厂模式在您有多种来自相同抽象的对象并且在编码开始时不知道哪个对象需要被创建时非常有用。
- en: The Singleton Pattern is useful when you need a class that has only one instance
    during the software's execution.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单例模式在软件执行期间需要只有一个实例的类时非常有用。
- en: The Proxy Pattern is used when you need to provide an object that controls access
    to another object.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理模式用于在需要提供控制对另一个对象的访问时。
- en: The Command Pattern is used when you need to execute a *command* that will affect
    the behavior of an object.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令模式用于执行将影响对象行为的*命令*。
- en: The Publisher/Subscriber Pattern is useful when you need to provide information
    about an object to a group of other objects.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您需要向一组其他对象提供有关对象的信息时，发布者/订阅者模式非常有用。
- en: The DI Pattern is useful if you want to implement the Inversion of Control principle.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DI模式在实现控制反转原则时非常有用。
- en: Chapter 12
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: Changes in the language used by experts and changes in the meaning of words.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 专家使用的语言和单词含义的变化。
- en: Domain mapping.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 域映射。
- en: No; the whole communication passes through the entity, that is, the aggregate
    root.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不；整个通信都通过实体即聚合根进行。
- en: Because aggregates represent part-subpart hierarchies.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为聚合代表部分-整体层次结构。
- en: Just one, since repositories are aggregate-centric.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有一个，因为存储库是以聚合为中心的。
- en: The application layer manipulates repository interfaces. Repository implementations
    are registered in the dependency injection engine.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用层操作存储库接口。存储库实现被注册到依赖注入引擎中。
- en: To coordinate in single transactions operations on several aggregates.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单个事务中协调对多个聚合的操作。
- en: The specifications for updates and queries are usually quite different, especially
    in simple CRUD systems. The reason for its strongest form is mainly the optimization
    of query response times.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新和查询的规范通常非常不同，特别是在简单的CRUD系统中。其最强形式的原因主要是优化查询响应时间。
- en: Dependency injection.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依赖注入。
- en: No; a serious impact analysis must be performed so that we can adopt it.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不；必须进行严格的影响分析，以便我们可以采用它。
- en: Chapter 13
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章
- en: No, since you will have lots of duplicate code in this approach, which will
    cause difficulties when it comes to maintenance.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，因为在这种方法中会有大量重复的代码，这将在维护时造成困难。
- en: The best approach for code reuse is creating libraries.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码重用的最佳方法是创建库。
- en: Yes. You can find components that have already been created in the libraries
    you've created before and then increase these libraries by creating new components
    that can be reused in the future.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的。您可以在以前创建的库中找到已经创建的组件，然后通过创建可以在将来重用的新组件来增加这些库。
- en: The .NET Standard is a specification that allows compatibility between different
    frameworks of .NET, from .NET Framework to Unity. .NET Core is one .NET implementation
    and is open source.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET标准是一种规范，允许.NET的不同框架之间的兼容性，从.NET Framework到Unity。 .NET Core是一种.NET实现，是开源的。
- en: By creating a .NET Standard library, you will be able to use it in different
    .NET implementations, such as .NET Core, the .NET Framework, and Xamarin.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个.NET标准库，您将能够在不同的.NET实现中使用它，例如.NET Core，.NET Framework和Xamarin。
- en: You can enable code reuse using object-oriented principles (inheritance, encapsulation,
    abstraction, and polymorphism).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用面向对象的原则（继承，封装，抽象和多态）实现代码重用。
- en: Generics is a sophisticated implementation that simplifies how objects with
    the same characteristics are treated, by defining a placeholder that will be replaced
    with the specific type at compile time.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泛型是一种复杂的实现，通过定义一个在编译时将被具体类型替换的占位符，简化了具有相同特征的对象的处理方式。
- en: 'The answer for this question is well explained by Immo Landwerth on the dotnet
    blog: [https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/](https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/).
    The basic answer is that .NET 5.0 (and future versions) need to be thought as
    the foundation for sharing code moving forward.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个问题的答案由Immo Landwerth在dotnet博客上得到了很好的解释：[https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/](https://devblogs.microsoft.com/dotnet/the-future-of-net-standard/)。基本答案是，.NET
    5.0（以及未来的版本）需要被认为是未来共享代码的基础。
- en: When you are refactoring a code, you are writing it in a better way, respecting
    the contract of input and output of data that this code will process.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您重构代码时，您正在以更好的方式编写它，尊重该代码将处理的数据的输入和输出的合同。
- en: Chapter 14
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章
- en: No, since this would violate the principle that a service reaction to a request
    must depend on the request itself, and not on other messages/requests that had
    previously been exchanged with the client.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，因为这将违反服务对请求的反应必须依赖于请求本身的原则，而不是依赖于先前与客户端交换的其他消息/请求。
- en: No, since this would violate the interoperability constraint.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，因为这将违反互操作性约束。
- en: Yes, it can. The primary action of a `POST` must be creation, but a delete can
    be performed as a side-effect.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以。`POST`的主要操作必须是创建，但删除可以作为副作用执行。
- en: Three, that is, Base64 encoding of the header and body plus the signature.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三，即头部和正文的Base64编码加上签名。
- en: From the request body.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从请求体中。
- en: With the `ApiController` attribute.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ApiController`属性。
- en: The `ProducesResponseType` attribute.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ProducesResponseType`属性。'
- en: With the `Route` and `Http<verb>` attributes.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Route`和`Http<verb>`属性。
- en: Something like `services.AddHttpClient<MyProxy>()`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于`services.AddHttpClient<MyProxy>()`。
- en: Chapter 15
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章
- en: Developer error pages and developer database error pages, production error pages,
    hosts, HTTPS redirection, routing, authentication and authorization, and endpoint
    invokers.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发人员错误页面和开发人员数据库错误页面，生产错误页面，主机，HTTPS重定向，路由，身份验证和授权以及端点调用者。
- en: No.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。
- en: False. Several tag helpers can be invoked on the same tag.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误。可以在同一个标签上调用多个标签助手。
- en: '`ModelState.IsValid`.'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ModelState.IsValid`。'
- en: '`@RenderBody()`.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@RenderBody()`.'
- en: 'We can use `@RenderSection("Scripts", required: false)`.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们可以使用`@RenderSection("Scripts", required: false)`。'
- en: We can use `return View("viewname", ViewModel)`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`return View("viewname", ViewModel)`。
- en: Three.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三。
- en: No; there is also the `ViewState` dictionary.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不；还有`ViewState`字典。
- en: Chapter 16
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章
- en: 'It is a W3C standard: the assembly of a virtual machine running in W3C compliant
    browsers.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个W3C标准：在符合W3C的浏览器中运行的虚拟机的组装。
- en: A Web UI where dynamic HTML is created in the browser itself.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个Web UI，其中动态HTML是在浏览器本身中创建的。
- en: Selecting a page based on the current browser URL.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据当前浏览器URL选择页面。
- en: A Blazor component with routes attached to it. For this reason, the Blazor `router`
    can select it.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个带有路由的Blazor组件。因此，Blazor `router`可以选择它。
- en: Defining the .NET namespace of a Blazor component class.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义Blazor组件类的.NET命名空间。
- en: A local service that takes care of storing and handling all forms-related information,
    such as validation errors, and changes in HTML inputs.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个本地服务，负责存储和处理所有与表单相关的信息，比如验证错误和HTML输入的更改。
- en: Either `OnInitialized` or `OnInitializedAsync`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OnInitialized`或`OnInitializedAsync`。'
- en: Callbacks and services.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回调和服务。
- en: Blazor way to interact with JavaScript.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor与JavaScript交互的方式。
- en: Getting a reference to a component or HTML element instance.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取对组件或HTML元素实例的引用。
- en: Chapter 17
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章
- en: Maintainability gives you the opportunity to deliver the software you designed
    quickly. It also allows you to fix bugs easily.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可维护性使您有机会快速交付您设计的软件。它还允许您轻松修复错误。
- en: Cyclomatic complexity is a metric that detects the number of nodes a method
    has. The higher the number, the worse the effect.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 圈复杂度是一种检测方法具有的节点数的度量标准。数字越高，影响越糟。
- en: A version control system will guarantee the integrity of your source code, giving
    you the opportunity to analyze the history of each modification that you've made.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版本控制系统将保证您的源代码的完整性，使您有机会分析您所做的每次修改的历史。
- en: A garbage collector is a .NET Core/.NET Framework system, which monitors your
    application and detects objects that you aren't using anymore. It disposes of
    these objects to release memory.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垃圾收集器是.NET Core/.NET Framework系统，它监视您的应用程序并检测您不再使用的对象。它处理这些对象以释放内存。
- en: The `IDisposable` interface is important firstly because it is a good pattern
    for deterministic cleanup. Secondly, it is required in classes that instantiate
    objects that need to be disposed of by the programmer since the garbage collector
    cannot dispose of them.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IDisposable`接口首先很重要，因为它是一种确定性清理的良好模式。其次，它在需要由程序员处理的实例化对象的类中是必需的，因为垃圾收集器无法处理它们。'
- en: .NET Core encapsulates some design patterns in some of its libraries in a way
    that can guarantee safer code, such as with dependency injection and Builder.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET Core在其某些库中封装了一些设计模式，以一种可以保证更安全的代码的方式，比如依赖注入和构建器。
- en: Chapter 18
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章
- en: Because most of the tests must be repeated after any software-change occurs.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为大多数测试必须在任何软件更改后重复进行。
- en: Because the probability of exactly the same error occurring in a unit test and
    in its associated application code is very low.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为在单元测试和其关联的应用程序代码中发生完全相同错误的概率非常低。
- en: '`[Theory]` is used when the test method defines several tests, while `[Fact]`
    is used when the test method defines just one test.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当测试方法定义多个测试时使用`[Theory]`，而当测试方法只定义一个测试时使用`[Fact]`。
- en: '`Assert`.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Assert`。'
- en: '`Setup`, `Returns`, and `ReturnsAsync`.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Setup`，`Returns`和`ReturnsAsync`。'
- en: Yes; with `ReturnAsync`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的；使用`ReturnAsync`。
- en: Chapter 19
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章
- en: Well-written code is code that any person skilled in that programming language
    can handle, modify, and evolve.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 良好编写的代码是任何精通该编程语言的人都可以处理、修改和发展的代码。
- en: Roslyn is the .NET Compiler that's used for code analysis inside Visual Studio.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Roslyn是在Visual Studio内部用于代码分析的.NET编译器。
- en: Code analysis is a practice that considers the way the code is written to detect
    bad practices before compilation.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码分析是一种考虑代码编写方式的实践，在编译之前检测不良实践。
- en: Code analysis can find problems that happen even with apparently good software,
    such as memory leaks and bad programming practices.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码分析可以发现即使是表面上良好的软件中出现的问题，例如内存泄漏和不良的编程实践。
- en: Roslyn can inspect your code for style, quality, maintainability, design, and
    other issues. This is done during design time, so you can check the mistakes before
    compiling your code.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Roslyn可以在设计时检查您的代码风格、质量、可维护性、设计和其他问题。这是在设计时完成的，因此您可以在编译代码之前检查错误。
- en: Visual Studio extensions are tools that have been programmed to run inside Visual
    Studio. These tools can help you out in some cases where Visual Studio IDE doesn't
    have the appropriate feature for you to use.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio扩展是在Visual Studio内部运行的工具。这些工具可以在某些情况下帮助您，其中Visual Studio IDE没有适合您使用的功能。
- en: Microsoft Code Analysis, SonarLint, and Code Cracker.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微软代码分析，SonarLint和Code Cracker。
- en: Chapter 20
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第20章
- en: DevOps is the approach of delivering value to the end user continuously. To
    do this with success, continuous integration, continuous delivery, and continuous
    feedback must be undertaken.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps是持续向最终用户交付价值的方法。为了成功地做到这一点，必须进行持续集成、持续交付和持续反馈。
- en: Continuous integration allows you to check the quality of the software you are
    delivering every single time you commit a change. You can implement this by turning
    on this feature in Azure DevOps.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续集成允许您在每次提交更改时检查您正在交付的软件的质量。您可以通过在Azure DevOps中启用此功能来实现这一点。
- en: Continuous delivery allows you to deploy a solution once you are sure that all
    the quality checks have passed the tests you designed. Azure DevOps helps you
    with that by providing you with relevant tools.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付允许您在确保所有质量检查都通过了您设计的测试之后部署解决方案。Azure DevOps通过提供相关工具来帮助您实现这一目标。
- en: Continuous feedback is the adoption of tools in the DevOps life cycle that enable
    fast feedback when it comes to performance, usability, and other aspects of the
    application you are developing.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续反馈是在DevOps生命周期中采用工具，使得在性能、可用性和应用程序的其他方面快速获得反馈成为可能。
- en: The build pipeline will let you run tasks for building and testing your application,
    while the release pipeline will give you the opportunity to define how the application
    will be deployed in each scenario.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建管道将让您运行用于构建和测试应用程序的任务，而发布管道将为您提供定义应用程序在每种情况下如何部署的机会。
- en: Application Insights is a helpful tool for monitoring the health of the system
    you've deployed, which makes it a fantastic continuous feedback tool.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序洞察是一个有用的工具，用于监视您部署的系统的健康状况，这使其成为一个出色的持续反馈工具。
- en: Test and Feedback is a tool that allows stakeholders to analyze the software
    you are developing and enables a connection with Azure DevOps to open tasks and
    even bugs.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试和反馈是一种工具，允许利益相关者分析您正在开发的软件，并与Azure DevOps建立连接，以打开任务甚至错误。
- en: To maximize the value that the software provides for the target organization.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最大化软件为目标组织提供的价值。
- en: No; it requires the acquisition of all competencies that are required to maximize
    the value added by the software.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不；它需要获得最大化软件增加值所需的所有能力。
- en: Because when a new user subscribes, its tenant must be created automatically,
    and because new software updates must be distributed to all the customer's infrastructures.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为当新用户订阅时，其租户必须自动创建，并且因为新软件更新必须分发到所有客户的基础设施。
- en: Yes; Terraform is an example.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的；Terraform就是一个例子。
- en: Azure pipelines.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure管道。
- en: Your business depends on the SaaS supplier, so its reliability is fundamental.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的业务依赖于SaaS供应商，因此其可靠性至关重要。
- en: No; scalability is just as important as fault tolerance and automatic fault
    recovery.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不；可伸缩性和容错性以及自动故障恢复同样重要。
- en: Chapter 21
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第21章
- en: It is an approach that makes sure that every single commit to the code repository
    is built and tested. This is done by frequently merging the code into a main body
    of code.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一种方法，确保代码存储库中的每个提交都经过构建和测试。这是通过频繁地将代码合并到主体代码中来完成的。
- en: Yes, you can have DevOps separately and then enable Continuous Integration later.
    You can also have Continuous Integration enable without Continuous Delivery on.
    Your team and process need to be ready and attentive for this to happen.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，您可以单独拥有DevOps，然后稍后启用持续集成。您也可以在没有持续交付的情况下启用持续集成。您的团队和流程需要准备好并密切关注这一点。
- en: You may misunderstand CI as a continuous delivery process. In this case, you
    may cause damage to your production environment. In the worst scenario, you can
    have, for example, a feature that isn't ready but has been deployed, you can cause
    a stop at a bad time for your customers, or you can even suffer a bad collateral
    effect due to an incorrect fix.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会误解CI为持续交付过程。在这种情况下，您可能会对生产环境造成损害。在最坏的情况下，您可能会有一个尚未准备好但已部署的功能，您可能会在客户的糟糕时刻停止，或者甚至由于不正确的修复而遭受糟糕的副作用。
- en: A multi-stage environment protects production from bad releases when CI-CD is
    enabled.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多阶段环境在启用CI-CD时保护生产环境免受糟糕的发布。
- en: Automated tests anticipate bugs and bad behaviors in preview scenarios.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化测试可以预测预览场景中的错误和不良行为。
- en: Pull requests allow code reviews before commits are made in the master branch.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求允许在提交到主分支之前进行代码审查。
- en: No; pull requests can help you in any development approach where you have Git
    as your source control.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不；拉取请求可以帮助您在任何开发方法中，其中Git是您的源代码控制。
- en: Chapter 22
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22章
- en: No; it depends on the complexity of the user interface and how often it changes.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不；这取决于用户界面的复杂性以及其变化频率。
- en: The ASP.NET Core pipeline isn't executed, but inputs are passed directly to controllers.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ASP.NET Core管道不会被执行，而是直接将输入传递给控制器。
- en: Use of the `Microsoft.AspNetCore.Mvc.Testing` NuGet package.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Microsoft.AspNetCore.Mvc.Testing` NuGet包。
- en: Use of the `AngleSharp` NuGet package.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`AngleSharp` NuGet包。
