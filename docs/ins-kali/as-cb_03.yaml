- en: Chapter 3. Material Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。Material Design
- en: This chapter will teach you what material design is about, why it is such a
    great improvement, and why you should use it for your apps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章将教你什么是Material Design，为什么它是一个很大的改进，以及为什么你应该在你的应用中使用它。
- en: 'In this chapter, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将学到：
- en: Recycler views and card views
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回收视图和卡片视图
- en: Ripples and elevations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涟漪和高程
- en: Great transitions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出色的过渡
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'With the introduction of material design, the looks of Android apps will finally
    mature. They can compete very well with iOS designs. Android material apps have
    a flat design, but come with some interesting differences such as elevations.
    Consider the following figure for example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Material Design的引入，Android应用的外观终于成熟了。它们可以与iOS设计很好地竞争。Android Material应用具有扁平设计，但也有一些有趣的区别，比如高程。例如考虑下面的图：
- en: '![Introduction](img/B04299_03_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Introduction](img/B04299_03_01.jpg)'
- en: Think of it as multiple slides of paper. It is based on, well, materials. Each
    slide of paper has a particular elevation. So, the environment is in fact a 3D
    world with effects such as light and shadow. Any motion should have real-world
    behaviour as if the moved elements are real physical objects. Animation is another
    important element of material design.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 把它想象成多张纸片。它是基于，嗯，材料的。每张纸片都有特定的高程。所以，环境实际上是一个有光和阴影等效果的3D世界。任何动作都应该具有真实世界的行为，就好像移动的元素是真实的物体一样。动画是Material
    Design的另一个重要元素。
- en: First have a look at [https://www.google.co.in/design/spec/material-design/introduction.html](https://www.google.co.in/design/spec/material-design/introduction.html)
    to see what material design is all about. Sure, many things are interesting for
    designers in particular, and you probably are interested only in the implementation
    of all this beautiful stuff; however, this link provides you with a little bit
    more context about what material design is about.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先看一下[https://www.google.co.in/design/spec/material-design/introduction.html](https://www.google.co.in/design/spec/material-design/introduction.html)来了解Material
    Design的全部内容。当然，对设计师来说有很多有趣的东西，而你可能只对所有这些美丽的东西的实现感兴趣；然而，这个链接为你提供了更多关于Material Design的背景信息。
- en: For a long time, most Android apps suffered from bad design or, in the early
    days no design at all. Or, they looked pretty similar to those made for iPhone,
    including all the elements that are typical for iOS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 长时间以来，大多数Android应用都受到糟糕的设计的困扰，或者在早期根本没有设计。或者，它们看起来与为iPhone制作的应用非常相似，包括所有iOS典型的元素。
- en: 'Have a look at the next app screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下一个应用的截图：
- en: '![Introduction](img/B04299_03_03.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Introduction](img/B04299_03_03.jpg)'
- en: Using Material design, this is what most of Google apps look like nowadays.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Material Design，这就是现在大多数谷歌应用的外观。
- en: Many Google's apps for Android use material design now. They all follow the
    same guidelines for interaction and design. The interface is minimalistic, as
    one would expect from Google. Also, the interface has become more uniform, making
    it easier to understand and use.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在许多谷歌的Android应用都使用Material Design。它们都遵循相同的交互和设计准则。界面是极简主义的，正如人们对谷歌所期望的那样。此外，界面变得更加统一，使得更容易理解和使用。
- en: Earlier, responsiveness was something you had to take care of yourself. Material
    design comes with ripples and other effects, doing the same thing, which is providing
    feedback on user input, but it is much easier to implement and is much more elegant.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，响应性是你自己要注意的事情。Material Design带来了涟漪和其他效果，做着同样的事情，即提供用户输入的反馈，但它更容易实现，更加优雅。
- en: As for the components, material design dictates for example how buttons in a
    particular situation should look. Think of floating buttons used for actions,
    or flat buttons used in dialog boxes. It also replaces the **ListView** with **RecyclerView**,
    which provide more flexibility to show lists. **CardViews** are common elements
    and you can see them being used in the Google apps quite often. Various animations
    provide more natural transitions, such as those for navigational or scrolling
    purposes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 至于组件，Material Design规定了例如特定情况下按钮应该是什么样子。想想用于操作的浮动按钮，或者用于对话框中的扁平按钮。它还用**RecyclerView**替换了**ListView**，这样可以更灵活地显示列表。**CardViews**是常见的元素，你可以经常在谷歌应用中看到它们的使用。各种动画提供了更自然的过渡，比如用于导航或滚动目的的动画。
- en: Material design is not just for the latest and greatest. While it comes with
    Android Lollipop (5.0) and higher versions, most material design features can
    be used in Android version 2.1 and up via the `v7 support` libraries, which allow
    us to apply a material design and still support virtually almost all Android devices.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design不仅适用于最新和最好的。虽然它随Android Lollipop（5.0）和更高版本一起发布，但大多数Material Design功能可以通过`v7支持`库在Android
    2.1及更高版本中使用，这使我们能够应用Material Design并仍然支持几乎所有的Android设备。
- en: Altogether, material design provides quite a lot to the beautification of your
    app. People want to be beautiful too. Health apps are booming because of this.
    Finding out what is healthy to eat, suggesting to drink more water, and advising
    on running or fitness exercises are common objectives that come with these type
    of apps. To demonstrate the beauty of Material design, we will be creating an
    app that will help people become healthier.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Material Design为你的应用美化提供了很多。人们也想变得更美丽。健康应用因此而蓬勃发展。找出健康的饮食，建议多喝水，以及建议跑步或健身锻炼是这类应用的常见目标。为了展示Material
    Design的美丽，我们将创建一个可以帮助人们变得更健康的应用。
- en: So, what about a `drink water and take a selfie` app? People need to drink water
    more often and if they do, they could see the effect of it. Beautiful people deserve
    a beautiful app. This makes sense, does it not?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`喝水并自拍`应用怎么样？人们需要更经常地喝水，如果他们这样做，他们就能看到效果。美丽的人们应该有一个美丽的应用。这是有道理的，不是吗？
- en: Reycler views and card views
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回收视图和卡片视图
- en: The recycler view replaces the good old list view. It provides more flexibility
    in how the elements of a list are shown, for example, as a grid and as horizontal
    or vertical items. Instead of rows, we can now choose to display cards wherever
    it is suitable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`RecyclerView`取代了传统的列表视图。它提供了更多的灵活性，可以以网格形式或水平或垂直项目的形式显示列表的元素。现在，我们可以选择在合适的地方显示卡片，而不是行。'
- en: In our app, each card should display some text about the entry and a thumbnail
    of the picture that we took. This is what this recipe will be all about.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，每个卡片应该显示有关条目的一些文本和我们拍摄的图片的缩略图。这就是本教程的全部内容。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, you need to have Android up and running. Also make
    sure that you have installed the latest SDK. (You can check whether you have the
    latest SDK by opening the SDK manager). To do so, open the **Tools** menu, choose
    **Android**, and next, choose the **SDK Manager** option.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要运行Android。还要确保您已安装了最新的SDK。（您可以通过打开SDK管理器来检查是否安装了最新的SDK）。为此，打开**工具**菜单，选择**Android**，然后选择**SDK管理器**选项。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s investigate, using the following steps, how to use recycler views and
    cards:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下步骤来调查如何使用`recycler view`和卡片：
- en: Start Android Studio and start a new project. Name your application `WaterApp`
    and enter `packtpub.com` in the **Company Domain** field. Then, click on the **Next**
    button.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Android Studio并开始一个新项目。将应用程序命名为`WaterApp`，并在**公司域**字段中输入`packtpub.com`。然后，点击**下一步**按钮。
- en: Choose **Blank Activity** in the next dialog box and click on the **Next** button.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中选择**空白活动**，然后点击**下一步**按钮。
- en: In the following dialog box, click on the **Finish** button.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，点击**完成**按钮。
- en: 'Open the `build.gradle` file within your `app` folder and add the dependency
    for the recycler view to the `dependencies` section as shown in the following
    code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹中的`build.gradle`文件中，如下所示，在`dependencies`部分添加`recycler view`的依赖项：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Change `minSdkVersion` to at least `21` in the `build.gradle` file.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.gradle`文件中将`minSdkVersion`更改为至少`21`。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This does not really have to be the minimal required version, but since the
    support libraries for backward compatibility purposes do not contain all of the
    Material design features, I have chosen to pick API level 21 here, just to be
    on the safe side.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这不一定是最小所需的版本，但由于用于向后兼容目的的支持库不包含所有的Material设计功能，我选择在这里选择API级别21，以确保安全。
- en: Synchronize your project by clicking on the **Sync now** label on the yellow
    bar that appears after we edit the `build.gradle` file, or in case it does not,
    click on the **Sync Project with Gradle files** button on the toolbar.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击`build.gradle`文件编辑后出现的黄色条上的**立即同步**标签来同步您的项目，或者如果没有出现，请单击工具栏上的**同步项目与Gradle文件**按钮。
- en: 'Open the `activity_main.xml` layout file, remove the `Hello World TextView`,
    and add a `RecyclerView` tag to the layout, like this:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`布局文件，删除`Hello World TextView`，并向布局中添加一个`RecyclerView`标签，如下所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In your `MainActivity` class, add the following to the `onCreate` method just
    after `setContentView`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`MainActivity`类中，在`setContentView`之后的`onCreate`方法中添加以下内容：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `RecyclerView` class is not a known class yet. Use the *Alt* + *Enter*
    shortcut to add the right import statement or add the following line yourself:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RecyclerView`类还不是一个已知的类。使用*Alt* + *Enter*快捷键添加正确的导入语句，或者自己添加以下行：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We are going to use a linear layout manager for this recipe. Add the following
    lines after the line we have added in step 9:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在这个教程中使用线性布局管理器。在第9步中添加的行后添加以下行：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new package and name it `models`, and within this package, create
    a new `Drink` class as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的包并将其命名为`models`，在该包中创建一个新的`Drink`类，如下所示：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, the `Date` class refers to the `java.util.Date` package (this is specified
    since there is also a SQL-related class with the same class name).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`Date`类指的是`java.util.Date`包（这是指定的，因为还有一个同名的与SQL相关的类）。
- en: Let's create a layout to display the items. Right-click on the `layout` package
    in the project tree and create a new resource file. To do so, choose **New** and
    **New Layout Resource File** from the menu. Name it `adapter_main.xml` and hit
    the **OK** button.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个布局来显示这些项目。在项目树中的`layout`包上右键单击，创建一个新的资源文件。为此，从菜单中选择**新建**和**新建布局资源文件**。将其命名为`adapter_main.xml`，然后点击**确定**按钮。
- en: 'Switch the layout to the **Text** modus, change the orientation of `LinearLayout`
    from `vertical` to `horizontal`, add some padding to it and add an image view
    to it, as shown in the following snippet. We will also add a default image so
    that we have something to look at:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将布局切换到**文本**模式，将`LinearLayout`的方向从`垂直`改为`水平`，为其添加一些填充，并向其添加一个图像视图，如下面的代码片段所示。我们还将添加一个默认图像，以便我们有东西可以查看：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next to the image, we want to display a date and time and the comments using
    two `TextView` widgets wrapped in another `LinearLayout` widget. Add these after
    the `ImageView` tag:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像旁边，我们想要使用两个`TextView`小部件显示日期和时间以及评论，这两个小部件包裹在另一个`LinearLayout`小部件中。在`ImageView`标签之后添加这些：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create another package and name it `adapters`. Within that package, create
    the `MainAdapter` class that will be using a `ViewHolder` class, helping us to
    display the data exactly where we want it to appear. We also include all methods
    that need to be overridden such as the `onBindViewHolder` method and the `getItemCount`
    method:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个包并将其命名为`adapters`。在该包中创建`MainAdapter`类，该类将使用`ViewHolder`类，帮助我们将数据显示在我们想要的位置。我们还包括所有需要被重写的方法，比如`onBindViewHolder`方法和`getItemCount`方法：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have more things to do. Add the `onBindViewHolder` method and add the implementation
    to actually bind the data to the right widgets:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还有更多的事情要做。添加`onBindViewHolder`方法，并添加实现以将数据实际绑定到正确的小部件上：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `MainActivity` file, we need to have an instance of the adapter and
    some data to display. Add a private adapter and a private array list containing
    the `Drink` items:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`文件中，我们需要有一个适配器的实例和一些要显示的数据。添加一个私有适配器和一个包含`Drink`项目的私有数组列表：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At the end of the `onCreate` method, tell `recyclerView` which adapter to use
    and tell the adapter which dataset to use:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法的末尾，告诉`recyclerView`使用哪个适配器，并告诉适配器使用哪个数据集：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `MainActivity` file, we want to add some dummy data so that we have
    some idea about what things are going to look like. Add the following to the `onCreate`
    method just before the part where we create the `MainAdapter` class:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`文件中，我们想添加一些虚拟数据，以便我们对事情将会是什么样子有一些想法。在我们创建`MainAdapter`类之前的`onCreate`方法中添加以下内容：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Import the required packages using the *Alt* + *enter* shortcut.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Alt* + *enter*快捷键导入所需的包。
- en: Run your app to verify that everything has gone well so far. Your app will display
    two entries containing the sample data that we have created in the previous step.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序以验证到目前为止一切都进行得很顺利。您的应用程序将显示两个包含我们在上一步中创建的示例数据的条目。
- en: '**Using card views**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用卡片视图**'
- en: 'The app looks okay but I would not want to call it beautiful yet. Let''s see
    if we can improve this a little. The following steps will help us to create the
    app using card views:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序看起来还可以，但我不想称其为美丽。让我们看看是否可以稍微改进一下。以下步骤将帮助我们使用卡片视图创建应用程序：
- en: 'Open the `build.gradle` file in the `app` folder and add a `CardView` dependency,
    just after the one for the recycler view:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹中的`build.gradle`文件中添加一个`CardView`依赖项，就在对`recycler view`的依赖项之后：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: And synchronize your project again.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再次同步您的项目。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By the way, if this app was for real, then avoid unpleasant surprises by specifying
    an exact version instead of using the `+` sign in the version number for any dependency
    your app may have. Currently, this is `21.0.0` for this particular dependency,
    but By the time you read this, a new version might be available.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果这个应用是真的，那么避免不愉快的惊喜，通过指定确切的版本而不是在版本号中使用`+`号来解决任何依赖项可能存在的问题。目前，对于这个特定的依赖项，版本号是`21.0.0`，但在您阅读本文时，可能已经有了新版本。
- en: If an error appears indicating Gradle failed to resolve the card view dependency,
    then click on the **Install Repository and sync project** link, accept the license,
    and click on the **Next** button. Wait a while until the download is complete
    and the installation has finished. Once this is done, click on the **Finish**
    button. Sync your project again.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出现错误提示Gradle无法解析卡片视图依赖项，则单击**安装存储库并同步项目**链接，接受许可证，并单击**下一步**按钮。等待一段时间，直到下载完成并安装完成。完成后，单击**完成**按钮。再次同步您的项目。
- en: 'Create a new layout and name it `adapter_main_card_view.xml`. Add some padding
    to the `LinearLayout` tag and within the `linear layout` tag, add a `CardView`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的布局并命名为`adapter_main_card_view.xml`。在`LinearLayout`标签中添加一些填充，在`LinearLayout`标签内部添加一个`CardView`：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: From the previous layout, the `adapter_main.xml` file, copy `ImageView` and
    the two `TextView` widgets (but not `LinearLayout` that contains the two `TextView`
    widgets) and paste them within `CardView` that you have added to the `adapter_main_card_view.xml`
    file.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从先前的布局`adapter_main.xml`文件中，复制`ImageView`和两个`TextView`小部件（但不包括包含这两个`TextView`小部件的`LinearLayout`），并将它们粘贴到您已添加到`adapter_main_card_view.xml`文件中的`CardView`中。
- en: 'Because `CardView` behaves as if it is `FrameLayout`, you need to set the margins
    for the text labels. Add a left margin to both text views. Also modify the top
    margin for the `TextView` comment:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为`CardView`的行为就像`FrameLayout`，所以您需要为文本标签设置边距。为两个文本视图添加左边距。还修改`TextView`评论的顶部边距：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now you tell the `MainAdapter` class to use this layout by changing the layout
    ID in the `onCreateViewHolder` method:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过更改`onCreateViewHolder`方法中的布局ID，告诉`MainAdapter`类使用这个布局：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the app again and we will see what it will look like this time:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行应用程序，我们将看到这次它会是什么样子：
- en: '![Using card views](img/B04299_03_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用卡片视图](img/B04299_03_04.jpg)'
- en: In the next recipe, we will add an elevated floating button and we will create
    a new activity that allows the users of our app to add drinks, comments, and a
    selfie.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个教程中，我们将添加一个提升的浮动按钮，并创建一个新的活动，允许我们的应用程序的用户添加饮料、评论和自拍。
- en: There's more...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There is a lot of documentation about material design. Browse through the various
    examples that are available on various websites, such as [https://www.materialup.com](https://www.materialup.com),
    [http://materialdesignblog.com](http://materialdesignblog.com) or [http://material-design.tumblr.com](http://material-design.tumblr.com).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多关于材料设计的文档。浏览各种网站上提供的各种示例，比如[https://www.materialup.com](https://www.materialup.com)，[http://materialdesignblog.com](http://materialdesignblog.com)或[http://material-design.tumblr.com](http://material-design.tumblr.com)。
- en: Or, download some of the material designed apps that are available in the Play
    Store, such as the Inbox, Google+, Wunderlist, Evernote, LocalCast, and SoundCast
    apps.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，下载一些在Play商店中可用的材料设计应用程序，例如Inbox、Google+、Wunderlist、Evernote、LocalCast和SoundCast应用程序。
- en: Ripples and elevations
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 涟漪和高程
- en: While elevations and ripples are not exactly to be considered to make people
    more beautiful, applying these and other material design principles to our app
    will certainly contribute to the beautification of it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管高程和涟漪并不一定会使人们更加美丽，但将这些和其他材料设计原则应用到我们的应用程序中肯定会有助于美化它。
- en: In the previous recipe, we created a list to show all logged drinks. In this
    recipe we will add an elevated button to add new entries. Also, we will create
    a new activity.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们创建了一个列表来显示所有已登录的饮料。在这个教程中，我们将添加一个提升的按钮来添加新条目。此外，我们将创建一个新的活动。
- en: For each entry, the user can describe some thoughts on what he drank. Of course,
    the user has to be able to take a selfie each time so that later he can check
    whether drinking all that water or green tea (or beer for that matter, if the
    user of our app does have a slightly different objective than that this app has
    been intended for) indeed did have a positive effect on his health and his (or
    her) looks.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个条目，用户可以描述一些关于他喝的东西的想法。当然，用户必须能够每次都自拍，以便以后他可以检查喝那么多水或绿茶（或者啤酒）是否确实对他的健康和外貌产生了积极的影响。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, it would be great if you have the previous recipe completed
    as this will build upon our previous achievements.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个指南，如果您已经完成了上一个指南，那将是很好的，因为这将建立在我们以前的成就之上。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s add a floating button and create a new activity to edit new entries:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个浮动按钮，并创建一个新的活动来编辑新条目：
- en: Add a new drawable resource file to the `res/drawable` folder, name it `button_round_teal_bg.xml`,
    and hit the **OK** button.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/drawable`文件夹中添加一个新的可绘制资源文件，命名为`button_round_teal_bg.xml`，然后点击**OK**按钮。
- en: 'Using XML, we will create a round oval shape for the button. Remove the selector
    tags first (if any). Wrap it up in a `ripple` tag. A `ripple` provides visible
    feedback in case the button is being pressed; I have chosen a material design
    variant of teal as the color but you can of course pick any color that you like.
    For inspiration, you could check out [http://www.google.com/design/spec/style/color.html](http://www.google.com/design/spec/style/color.html).
    The content for the file looks like as shown in the following example:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用XML，我们将为按钮创建一个圆形椭圆形状。首先删除选择器标签（如果有）。将其包装在`ripple`标签中。`ripple`在按钮被按下时提供可见反馈；我选择了一种蓝绿色的材料设计变体作为颜色，但您当然可以选择任何您喜欢的颜色。作为灵感，您可以查看[http://www.google.com/design/spec/style/color.html](http://www.google.com/design/spec/style/color.html)。文件的内容如下例所示：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In case you run into any error, check `minSdkVersion` in the `build.gradle`
    file. Refer to step 5 of the first recipe for further information.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到任何错误，请检查`build.gradle`文件中的`minSdkVersion`。有关更多信息，请参考第一条指南的第5步。
- en: 'Add a button to the `activity_main.xml` layout file just after the recycler
    view:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`布局文件中的循环视图后添加一个按钮：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Colors should be defined in a separate color resource file. Also, elevations
    and margins should be placed in a dimension resource file. Since this is out of
    scope for this recipe, I suggest you do this later.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色应该在单独的颜色资源文件中定义。此外，高程和边距应该放在尺寸资源文件中。由于这超出了本指南的范围，我建议您稍后再做这些。
- en: 'Next we want to have some shadows, and also we want to change the elevation
    if the button is being pushed or released. Create a new directory in the `res`
    folder and name it `anim`. Within this folder, create a new animation resource
    file. Name the file `button_elevation.xml` and hit the **OK** button:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们希望有一些阴影，还希望在按钮被按下或释放时改变高程。在`res`文件夹中创建一个新的目录，命名为`anim`。在此文件夹中，创建一个新的动画资源文件。将文件命名为`button_elevation.xml`，然后点击**OK**按钮：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inform the image button about this new resource file. In your `activity_main.xml`
    layout, add the following line to your image button:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通知图像按钮有关这个新的资源文件。在您的`activity_main.xml`布局中，为图像按钮添加以下行：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the end of the onCreate method in the MainActivity class add an `OnClickListener`
    to the button that we just created and call the `showEntry` method, which we will
    be creating in a minute or two:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MainActivity类的onCreate方法末尾，为我们刚刚创建的按钮添加一个`OnClickListener`，并调用`showEntry`方法，我们将在一两分钟内创建：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Create a new layout resource file, name it `activity_entry.xml`, and use `FrameLayout`
    as the root element. Then hit the **OK** button.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的布局资源文件，命名为`activity_entry.xml`，并将`FrameLayout`用作根元素。然后点击**OK**按钮。
- en: 'Add an `EditText` widget for comments, a button to take pictures and another
    button to save the entry. Then wrap these elements in a `CardView` widget. Add
    an `ImageView` widget after the `CardView` widget, like this:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为评论添加一个`EditText`小部件，一个拍照按钮和另一个保存条目的按钮。然后将这些元素包装在`CardView`小部件中。在`CardView`小部件之后添加一个`ImageView`小部件，就像这样：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Create a new class, name it `EntryActivity`, and click on the **OK** button.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的类，命名为`EntryActivity`，然后点击**OK**按钮。
- en: 'Make your class descend from `Activity`, override the `onCreate` method, and
    set the content view to the layout that you just created:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使您的类从`Activity`继承，重写`onCreate`方法，并将内容视图设置为您刚刚创建的布局：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Do not forget to add your new activity in the `AndroidManifest.xml` file:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记在`AndroidManifest.xml`文件中添加新的活动：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `MainActivity` class, add the `showEntry` method and the implementation
    that is needed to display the new activity. We will be using the `startActivityForResult`
    method here because this will allow the `EntryActivity` to return data later:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中，添加`showEntry`方法和显示新活动所需的实现。我们将在这里使用`startActivityForResult`方法，因为这将允许`EntryActivity`稍后返回数据：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now if you run the app and push the button, you will notice the visual feedback.
    To see the effect properly, you may want to use a stylus or enlarge the size of
    the button. If you release the button, you will see the entry layout. In the layout,
    if you push (and hold) the **Add entry** button (or the camera button), you will
    notice the ripple effect. We did not have to do anything special for that. With
    the introduction of Lollipop (and previous description), this is the default behavior
    for buttons. However, these buttons do look a bit boring and as you have seen
    with the floating button, there are plenty of customization options available.
    Let''s follow the next steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您运行应用程序并按下按钮，您将注意到视觉反馈。为了正确看到效果，您可能需要使用触控笔或放大按钮的大小。如果您释放按钮，您将看到条目布局。在布局中，如果您按住**添加条目**按钮（或相机按钮），您将注意到涟漪效果。我们不必为此做任何特殊处理。随着Lollipop的推出（以及之前的描述），这是按钮的默认行为。但是，这些按钮看起来有点无聊，就像您在浮动按钮中看到的那样，有很多自定义选项可用。让我们按照下一步操作：
- en: 'In the `EntryActivity` class, set the `OnClickListener` for the camera button
    and do the same thing for the `add` button:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EntryActivity`类中，为相机按钮设置`OnClickListener`，并对`add`按钮执行相同的操作：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a private member that will contain the URI for the photo that we are going
    to take:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有成员，用于包含我们将要拍摄的照片的URI：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a `takePicture` method and add the implementation for it. We will create
    a file with a unique image name up front by using a time stamp and we will tell
    the image capture intent to use `Uri` for that file:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`takePicture`方法并为其添加实现。我们将使用时间戳提前创建一个带有唯一图像名称的文件，并告诉图像捕获意图使用`Uri`来访问该文件：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Override the `onActivityResult` method that will be triggered once a photo
    has been taken. If everything goes well, we need to create a bitmap of the file
    we just created by taking the picture and show a preview of it:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onActivityResult`方法，一旦拍照就会触发。如果一切顺利，我们需要创建刚刚拍摄的文件的位图，并显示其预览：
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, implement the `getBitmapFromUri` method:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，实现`getBitmapFromUri`方法：
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the appropriate permission and feature to the `AndroidManifest.xml` file:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AndroidManifest.xml`文件中添加适当的权限和功能：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now let''s implement the `submitEntry` method. We will return the comment and
    `uri` of the picture and end the activity:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们实现`submitEntry`方法。我们将返回评论和图片的`uri`，然后结束活动：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the implementation for the `onClick` event of the `add` button. Just call
    the `submitEntry` method:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`add`按钮的`onClick`事件添加实现。只需调用`submitEntry`方法：
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the `MainActivity` class, we will handle the returned result by overriding
    the `onActivityResult` method. A new drink will be created and added to the list
    of drinks. Finally, we will notify the adapter that there is an update to be displayed
    by adding the following snippet:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中，我们将通过重写`onActivityResult`方法来处理返回的结果。将创建一个新的饮料并添加到饮料列表中。最后，我们将通过添加以下片段通知适配器需要显示更新：
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `MainAdapter` class, we need to do some work to display thumbnails of
    each image. Add this to the end of the `onBindViewHolder` method:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainAdapter`类中，我们需要做一些工作来显示每个图像的缩略图。将以下内容添加到`onBindViewHolder`方法的末尾：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If an `Uri` is known for the item, we need to display a thumbnail for it. We
    will implement `getBitmapFromUri` in `MainAdapter` slightly different. The method
    to do so goes like this:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果已知项目的`Uri`，我们需要为其显示缩略图。我们将在`MainAdapter`中以稍有不同的方式实现`getBitmapFromUri`。方法如下：
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, run the app. You can use a real device or Genymotion for that. If you are
    using Genymotion you have to enable the camera, as described in [Chapter 1](ch01.html
    "Chapter 1. Welcome to Android Studio"), *Welcome to Android Studio*. Click on
    the **add** button, have a glass of water, enter some comments, and then take
    a selfie. Hit the **Add entry** button to make it appear in the list.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行应用程序。您可以使用真实设备或Genymotion。如果您使用Genymotion，您需要启用相机，如[第1章](ch01.html "第1章。欢迎使用Android
    Studio")*欢迎使用Android Studio*中所述。单击**添加**按钮，喝一杯水，输入一些评论，然后自拍。点击**添加条目**按钮，使其出现在列表中。
- en: This is amazing! You are done for now. The app is far from pixel perfect but
    we have made some interesting moves. Beautification takes time. In the next recipe,
    we are going to implement some wow stuff by adding transitions.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您现在已经完成了。该应用程序远非完美，但我们已经做出了一些有趣的举措。美化需要时间。在下一个示例中，我们将通过添加过渡来实现一些令人惊叹的东西。
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On some devices, but not all of them, the picture may be rotated. This is one
    of the challenges that come with Android development and we will cover that topic
    in [Chapter 6](ch06.html "Chapter 6. Capture and Share"), *Capture and Share.*
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些设备上，但不是所有设备，图片可能会被旋转。这是Android开发面临的挑战之一，我们将在[第6章](ch06.html "第6章。捕获和分享")*捕获和分享*中涵盖这个主题。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The list with entries is not yet persisting other than during the life time
    of the application. If you want, you can make the entries persistent, for example,
    by storing the entries in a SQLite database or eventually by using Parse, which
    is discussed in [Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based
    Backend"), *Applications with a Cloud-based Backend*. Since persistency is not
    the objective for this recipe, it will not be discussed any further here. In [Chapter
    7](ch07.html "Chapter 7. Content Providers and Observers"), *Content providers
    and observers*, SQLite and content providers are discussed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在应用程序的生命周期内，条目列表尚未持久化。如果需要，可以通过将条目存储在SQLite数据库中或最终使用Parse来使条目持久化，这在[第2章](ch02.html
    "第2章。具有基于云的后端的应用程序")*具有基于云的后端的应用程序*中讨论。由于持久性不是本示例的目标，这里不会进一步讨论。在[第7章](ch07.html
    "第7章。内容提供程序和观察者")*内容提供程序和观察者*中，将讨论SQLite和内容提供程序。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Since API level 23 there is a FloatingActionButton widget that you can use
    as well. It comes in two sizes: default and mini.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 自API级别23以来，有一个可用的FloatingActionButton小部件。它有两种大小：默认和迷你。
- en: See also
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"),
    *Applications with a Cloud-based Backend*'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。具有基于云的后端的应用程序")*具有基于云的后端的应用程序*'
- en: '[Chapter 6](ch06.html "Chapter 6. Capture and Share"), *Capture and Share*'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。捕获和分享")*捕获和分享*'
- en: '[Chapter 7](ch07.html "Chapter 7. Content Providers and Observers"), *Content
    providers and observers*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章。内容提供程序和观察者")*内容提供程序和观察者*'
- en: Great transitions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 出色的过渡
- en: If you click on any of the cards it will display the entry view again with the
    comments and a preview of the picture that we took previously.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击任何卡片，它将再次显示条目视图，其中包括评论和我们之前拍摄的图片的预览。
- en: We do not just want to move from the list view to the detail view. Material
    design also takes care of great natural transitions. This recipe is going to apply
    just that.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅希望从列表视图转到详细视图。Material design还负责出色的自然过渡。这个示例将应用这一点。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To go through this recipe, you will need to have the previous recipes up and
    running. This recipe is going to add some animations to it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要先运行之前的示例。这个示例将为其添加一些动画。
- en: How to do it…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following steps will help us to add the animations to our app:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们为应用程序添加动画：
- en: 'Add a `mDrink` member to `ViewHolder` in the `MainAdapter` class:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainAdapter`类的`ViewHolder`中添加一个`mDrink`成员：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the same file in the `onBindViewHolder` method inform the `view holder`
    about the actual drink, just after the initialization of `currentDrink`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onBindViewHolder`方法中的同一文件中，在`currentDrink`初始化后，通知`view holder`有关实际饮料的信息：
- en: '[PRE38]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `onCreateViewHolder` method, add an `OnClickListener` to the end:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreateViewHolder`方法中，添加一个`OnClickListener`到末尾：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If the view is being clicked on, we want the `EntryActivity` class to display
    the selected drink entry. In order to be able to inform the entry about the selection,
    we need to make the `Drink` model a `parcelable` class:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果视图被点击，我们希望`EntryActivity`类显示所选的饮料条目。为了能够通知条目有关选择，我们需要将`Drink`模型设为`parcelable`类：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We need to implement a couple of methods for that:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要实现一些方法：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add two constructors for the `Drink` class—a default one and one that takes
    a parcel—so we can recreate the object and populate it with the appropriate values:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Drink`类添加两个构造函数——一个默认的和一个带有parcel的，这样我们就可以重新创建对象并用适当的值填充它：
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the `MainAdapter` class, add a private variable for the request. This approach
    makes your code more readable:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainAdapter`类中，添加一个用于请求的私有变量。这种方法使您的代码更易读：
- en: '[PRE43]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Tip
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The so-called magical numbers are easy to misunderstand and should be avoided
    as much as possible. This and other recipes are just for demo purposes but in
    the real world, you should use self-explaining constants where possible. Here,
    `REQUEST_EDIT_ENTRY` makes much more sense than just putting the number `2` in
    your code somewhere.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓的魔术数字很容易被误解，应尽量避免使用。这些和其他的示例仅用于演示目的，但在现实世界中，您应尽可能使用自解释的常量。在这里，`REQUEST_EDIT_ENTRY`比在代码中的某个地方只放置数字`2`更有意义。
- en: 'Now within the `onClick` method that we created previously in the `onCreateViewHolder`
    method of the `MainAdapter`, we can start a new entry activity and pass the selected
    drink as a parameter. The implementation of the `onClick` method will now look
    like this:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`MainAdapter`的`onCreateViewHolder`方法中我们之前创建的`onClick`方法中，我们可以启动一个新的条目活动并将所选的饮料作为参数传递。`onClick`方法的实现现在将如下所示：
- en: '[PRE44]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the `onCreate` method of the `EntryActivity` class, we will retrieve and
    display the properties of the selected drink. Add this implementation to the end
    of the method:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EntryActivity`类的`onCreate`方法中，我们将检索并显示所选饮料的属性。将此实现添加到方法的末尾：
- en: '[PRE45]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The EditText for the comments will be filled with the comments so that the
    user can edit them. If an image is attached to the drink entry, it will be shown
    in the preview image view. Now if only we had an easy and cool way of animating
    the thumbnail of the image into the preview:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 评论的EditText将填充评论，以便用户可以编辑它们。如果饮料条目附有图像，它将显示在预览图像视图中。现在，如果我们有一种简单而酷的方法将图像的缩略图动画到预览中：
- en: 'Surprise! There is. Add a new string resource in the `strings.xml` (in the
    `res/values` folder) file:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 惊喜！有。在`res/values`文件夹中的`strings.xml`文件中添加一个新的字符串资源：
- en: '[PRE46]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the `onCreateViewHolder` method in the `MainAdapter` class, within the `onClick`
    implementation, and right before the `startActivityForResult` method, we will
    use the `ActivityOptionsCompat` class to create a transition from the thumbnail
    (the holder''s `mImageView` member) to the preview image in the layout for the
    entry activity:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainAdapter`类的`onCreateViewHolder`方法中，在`onClick`实现中，并且在`startActivityForResult`方法之前，我们将使用`ActivityOptionsCompat`类来创建从缩略图（holder的`mImageView`成员）到条目活动布局中预览图像的过渡：
- en: '[PRE47]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Supply these options by replacing the `startActivityForResult` call on the
    next line with this implementation:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用这个实现替换下一行上的`startActivityForResult`调用来提供这些选项：
- en: '[PRE48]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Open the `adapter_main_card_view.xml` layout file and add this line to the
    image view (the one with the `main_image_view` ID):'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`adapter_main_card_view.xml`布局文件，并将此行添加到图像视图（具有`main_image_view`ID的小部件）：
- en: '[PRE49]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In the `activity_entry.xml` layout, add this line as well to the `ImageView`
    widget (the one with the `entry_image_view_preview` ID). This way Android knows
    where the transition of the thumbnail into the larger preview image has to go).
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity_entry.xml`布局中，也将此行添加到`ImageView`小部件（具有`entry_image_view_preview`ID的小部件）。这样Android就知道缩略图到更大的预览图像的过渡应该去哪里）。
- en: Note
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is good practice to use string resources. We can use these resources here
    to make sure we are talking about the same transition everywhere in the code but
    it will also be great for localization purposes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串资源是一个好的实践。我们可以在这里使用这些资源，以确保我们在代码的任何地方都在谈论相同的过渡，但这也对本地化目的非常有用。
- en: Now if you run your app and click on any of the cards in the `MainActivity`
    class, you will see that the thumbnail is enlarged and fits into the place holder
    for the preview image in the layout of the `EntryActivity` class. The reversed
    transition is shown if you choose the back button. In previous versions we could
    not do this with only a few lines of code!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您运行您的应用程序并点击`MainActivity`类中的任何卡片，您将看到缩略图被放大并适合于`EntryActivity`类的布局中预览图像的占位符。如果选择返回按钮，则显示反向过渡。在以前的版本中，我们不能只用几行代码来做到这一点！
- en: Theming
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题
- en: 'As a bonus, let''s do some theming using the following steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 作为奖励，让我们按照以下步骤进行一些主题设置：
- en: Visit [http://www.materialpalette.com](http://www.materialpalette.com) and pick
    two colors. Theming comes up with a color set that we can use for a theme as shown
    in the following screenshot:![Theming](img/B04299_03_06.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://www.materialpalette.com](http://www.materialpalette.com)并选择两种颜色。主题设置出现了一个颜色集，我们可以将其用作主题，如下截图所示：![Theming](img/B04299_03_06.jpg)
- en: 'Create a `color.xml` file in the `res/values` folder and add the suggested
    color names and values. I have chosen blue and indigo on the website so my color
    resource file looks like this:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/values`文件夹中创建一个`color.xml`文件，并添加建议的颜色名称和值。我在网站上选择了蓝色和靛蓝色，所以我的颜色资源文件看起来像这样：
- en: '[PRE50]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Edit the `styles.xml` file in the `res/values` folder and make it look like
    this:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`res/values`文件夹中的`styles.xml`文件，并使其看起来像这样：
- en: '[PRE51]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The output of the preceding code is as shown in the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下截图所示：
- en: '![Theming](img/B04299_03_07.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![Theming](img/B04299_03_07.jpg)'
- en: Modify your layout files and change text views and other elements so that it
    can reflect the color scheme. Run the app.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的布局文件并更改文本视图和其他元素，以便它可以反映颜色方案。运行应用程序。
- en: How it works...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Android's activity transitions will take care of everything. We just need to
    tell what, where, and how. With just a few lines of code the API allows you to
    create meaningful transitions between activities, which will heavily improve the
    **User Experience** (**UX**) of your application.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Android的活动转换将处理一切。我们只需要告诉它什么，哪里以及如何。只需几行代码，API就可以让您在活动之间创建有意义的转换，这将大大改善应用程序的用户体验。
- en: With each new step, the looks of your app become better and better! Unfortunately,
    this is where this introduction to material design ends. Make improvements wherever
    you want. Play with it and have fun! Animations, UX, and layouts are important
    elements of high-quality apps.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 每一步都让你的应用程序看起来越来越好！不幸的是，这就是材料设计介绍的结束。无论你想要在哪里进行改进，都可以随意尝试并享受乐趣！动画，用户体验和布局是高质量应用程序的重要元素。
- en: For wearable apps, this may be even more important as we will see in the next
    chapter. But how can we enable a great user experience on such as small screen?
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可穿戴应用程序来说，这可能更加重要，正如我们将在下一章中看到的那样。但是，我们如何在如此小的屏幕上实现出色的用户体验呢？
- en: There's more...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have seen only a few aspects of Material Design. There is so much more to
    discover.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只看到了材料设计的一些方面。还有很多东西等待我们去发现。
- en: Improve the looks and UX of the app further, add the implementation in the `MainActivity`
    class to handle the data of drink entries that you have added, and make enhancements
    wherever you want them. Or, you can have a look at your existing apps and see
    how you can materialize them.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步改善应用程序的外观和用户体验，将实现添加到“MainActivity”类中以处理您添加的饮料条目的数据，并在需要时进行增强。或者，您可以查看现有的应用程序，看看如何将它们实现。
