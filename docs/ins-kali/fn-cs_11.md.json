["```cs\npublic partial class Program \n{ \n  public static int SumUp( \n    int a, int b) \n  { \n    return a + b; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static int GenerateRandom( \n    int max) \n  { \n    Random rnd = new Random( \n      Guid.NewGuid() \n      .GetHashCode()); \n    return rnd.Next(max); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void RunGenerateRandom() \n  { \n    for (int i = 0; i < 10; i++) \n    { \n      Console.WriteLine( \n        String.Format( \n          \"Number {0} = {1}\", \n          i, \n          GenerateRandom(100))); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static int Divide( \n    int a, int b) \n  { \n    return a / b; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static int? Divide( \n    int a, int b) \n  { \n    if (b == 0) \n    return null; \n    return a / b; \n  } \n} \n\n```", "```cs\nnamespace Immutability \n{ \n  public class UserMembership \n  { \n    private User _user; \n    private DateTime _memberSince; \n    public void UpdateUser( \n      int userId, string name) \n    { \n      _user = new User( \n       userId, \n       name); \n    } \n  } \n  public class User \n  { \n    public int Id { get; } \n    public string Name { get; } \n    public User( \n      int id, \n      string name) \n    { \n      Id = id; \n      Name = name; \n    } \n  } \n} \n\n```", "```cs\nnamespace Immutability \n{ \n  public class UserMembership \n  { \n    private readonly User _user; \n    private readonly DateTime _memberSince; \n\n    public UserMembership( \n      User user, \n      DateTime memberSince) \n    { \n       _user = user; \n       _memberSince = memberSince; \n    } \n\n public UserMembership UpdateUser(int userId,string name) { \n      var newUser = new User(userId,name);\n      return new UserMembership(newUser,_memberSince);\n    }\n\n  } \n\n  public class User \n  { \n    public int Id { get; } \n    public string Name { get; } \n    public User( \n      int id, \n      string name) \n    { \n      Id = id; \n      Name = name; \n    } \n  } \n} \n\n```", "```cs\npublic class MembershipDatabase \n{ \n  private Address _address; \n  private Member _member; \n  public void Process( \n    string memberName, \n    string addressString) \n  { \n    CreateAddress( \n      addressString); \n\n    CreateMember( \n      memberName); \n    SaveMember(); \n  } \n\n  private void CreateAddress( \n    string addressString) \n  { \n    _address = new Address( \n      addressString); \n  } \n\n  private void CreateMember( \n    string name) \n  { \n    _member = new Member( \n    name, \n    _address); \n  } \n\n  private void SaveMember() \n  { \n    var repository = new Repository(); \n    repository.Save(_member); \n  } \n} \n\npublic class Address \n{ \n  public string _addressString { get; } \n  public Address( \n    string addressString) \n  { \n    _addressString = addressString; \n  } \n} \n\npublic class Member \n{ \n  public string _name { get; } \n  public Address _address { get; } \n\n  public Member( \n    string name, \n    Address address) \n  { \n    _name = name; \n    _address = address; \n  } \n} \n\npublic class Repository \n{ \n  public static List<Member> customers { get; } \n\n  public void Save( \n    Member customer) \n  { \n    customers.Add(customer); \n  } \n} \n\n```", "```cs\npublic class MembershipDatabase \n{ \n  public void Process( \n    string memberName, \n    string addressString) \n  { \n    Address address = CreateAddress( \n      addressString); \n    Member member = CreateMember( \n      memberName, \n      address); \n    SaveMember(member); \n  } \n\n  private Address CreateAddress( \n    string addressString) \n  { \n    return new Address( \n      addressString); \n  } \n\n  private Member CreateMember( \n    string name, \n    Address address) \n  { \n    return new Member( \n      name, \n      address); \n  } \n\n  private void SaveMember( \n    Member member) \n  { \n    var repository = new Repository(); \n    repository.Save( \n      member); \n  } \n} \n\npublic class Address \n{ \n  public string _addressString { get; } \n  public Address( \n    string addressString) \n  { \n    _addressString = addressString; \n  } \n} \n\npublic class Member \n{ \n  public string _name { get; } \n  public Address _address { get; } \n  public Member( \n    string name, \n    Address address) \n  { \n    _name = name; \n    _address = address; \n  } \n} \n\npublic class Repository \n{ \n  public static List<Member> customers { get; } \n\n  public void Save( \n    Member customer) \n  { \n    customers.Add(customer); \n  } \n} \n\n```", "```cs\nprivate void SaveMember( \n  Member member) \n{ \n  var repository = new Repository(); \n  repository.Save( \n    member); \n} \n\n```", "```cs\npublic class Librarianship \n{ \n  private readonly int _maxEntriesPerFile; \n  public Librarianship( \n    int maxEntriesPerFile) \n  { \n    _maxEntriesPerFile = \n    maxEntriesPerFile; \n  } \n\n  public void AddRecord( \n    string currentFile, \n    string visitorName, \n    string bookTitle, \n    DateTime returnDate) \n  { \n     // The rest of code can be found  \n     // in the downloaded source code  \n  } \n\n  private string GetNewFileName( \n        string existingFileName) \n  { \n    // The rest of code can be found  \n    // in the downloaded source code  \n  } \n\n  public void RemoveRecord( \n      string visitorName,  \n      string directoryName) \n  { \n    foreach (string fileName in Directory.GetFiles( \n            directoryName)) \n    { \n      // The rest of code can be found  \n      // in the downloaded source code  \n    } \n  } \n} \n\n```", "```cs\n1;Arthur Jackson;Responsive Web Design;9/26/2016 \n2;Maddox Webb;AngularJS by Example;9/27/2016 \n3;Mel Fry;Python Machine Learning;9/28/2016 \n4;Haiden Brown;Practical Data Science Cookbook;9/29/2016 \n5;Sofia Hamilton;DevOps Automation Cookbook;9/30/2016 \n\n```", "```cs\nif (lines.Length < _maxEntriesPerFile) \n{ \n  int lastIndex = int.Parse( \n    lines.Last() \n    .Split(';')[0]); \n\n  string newLine = \n    String.Format( \n    \"{0};{1};{2};{3}\", \n    (lastIndex + 1), \n    visitorName, \n    bookTitle, \n    returnDate \n    .ToString(\"d\") \n  ); \n\n  File.AppendAllLines( \n    currentFile, \n    new[] { \n    newLine }); \n} \n\n```", "```cs\nelse \n{ \n  string newLine = \n    String.Format( \n    \"1;{0};{1};{2}\", \n    visitorName, \n    bookTitle, \n    returnDate \n    .ToString(\"d\") \n    ); \n  string newFileName = \n    GetNewFileName( \n    currentFile); \n  File.WriteAllLines( \n    newFileName, \n    new[] { \n    newLine }); \n  currentFile = newFileName; \n} \n\n```", "```cs\nprivate string GetNewFileName( \n  string existingFileName) \n{ \n  string fileName =  \n    Path.GetFileNameWithoutExtension( \n      existingFileName); \n  int index = int.Parse( \n    fileName \n    .Split('_')[1]); \n\n  return String.Format( \n    \"LibraryLog_{0:D4}.txt\", \n    index + 1); \n} \n\n```", "```cs\nif (!File.Exists(currentFile)) \n{ \n  string newLine = \n    String.Format( \n    \"1;{0};{1};{2}\", \n    visitorName, \n    bookTitle, \n    returnDate \n    .ToString(\"d\") \n    ); \n\n  File.WriteAllLines( \n    currentFile, \n    new[] { \n    newLine }); \n} \n\n```", "```cs\npublic void RemoveRecord( \n    string visitorName,  \n    string directoryName) \n{ \n    foreach (string fileName in Directory.GetFiles( \n        directoryName)) \n    { \n        string tempFile = Path.GetTempFileName(); \n        List<string> linesToKeep = File \n            .ReadLines(fileName) \n            .Where(line => !line.Contains(visitorName)) \n            .ToList(); \n\n        if (linesToKeep.Count == 0) \n        { \n            File.Delete( \n                fileName); \n        } \n        else \n        { \n            File.WriteAllLines( \n                tempFile,  \n                linesToKeep); \n\n            File.Delete( \n                fileName); \n\n            File.Move( \n                tempFile,  \n                fileName); \n        } \n    } \n} \n\n```", "```cs\n\nList<string> linesToKeep = File\n\n .ReadLines(fileName)\n\n .Where(line => !line.Contains(visitorName))\n\n .ToList();\n\n```", "```cs\n\nif (linesToKeep.Count == 0)\n\n{\n\n File.Delete(\n\n fileName);\n\n}\n\n```", "```cs\n\nelse\n\n{\n\n File.WriteAllLines(\n\n tempFile, \n\n linesToKeep);\n\n File.Delete(\n\n fileName);\n\n File.Move(\n\n tempFile, \n\n fileName);\n\n}\n\n```", "```cs\npublic partial class Program \n{ \n    public static List<Book> bookList = \n        new List<Book>() \n        { \n            new Book( \n                \"Arthur Jackson\", \n                \"Responsive Web Design\"), \n            new Book( \n                \"Maddox Webb\", \n                \"AngularJS by Example\"), \n            new Book( \n                \"Mel Fry\", \n                \"Python Machine Learning\"), \n            new Book( \n                \"Haiden Brown\", \n                \"Practical Data Science Cookbook\"), \n            new Book( \n                \"Sofia Hamilton\", \n                \"DevOps Automation Cookbook\") \n        }; \n} \n\n```", "```cs\npublic struct Book \n{ \n    public string Borrower { get; } \n    public string Title { get; } \n\n    public Book( \n        string borrower, \n        string title) \n    { \n        Borrower = borrower; \n        Title = title; \n    } \n} \n\n```", "```cs\npublic partial class Program \n{ \n    public static void LibrarianshipInvocation() \n    { \n        Librarianship librarian =  \n            new Librarianship(5); \n\n        for (int i = 0; i < bookList.Count; i++) \n        { \n            librarian.AddRecord( \n                GetLastLogFile( \n                    AppDomain.CurrentDomain.BaseDirectory), \n                bookList[i].Borrower, \n                bookList[i].Title, \n                DateTime.Now.AddDays(i)); \n        } \n    } \n} \n\n```", "```cs\npublic partial class Program \n{ \n    public static string GetLastLogFile( \n        string LogDirectory) \n    { \n        string[] logFiles = Directory.GetFiles( \n            LogDirectory,  \n            \"LibraryLog_????.txt\"); \n\n        if (logFiles.Length > 0) \n        { \n            return logFiles[logFiles.Length - 1]; \n        } \n        else \n        { \n            return \"LibraryLog_0001.txt\"; \n        } \n    } \n} \n\n```", "```cs\npublic FileAction AddRecord( \n    FileContent currentFile,  \n    string visitorName, \n    string bookTitle, \n    DateTime returningDate) \n{ \n    List<DataEntry> entries = Parse(currentFile.Content); \n\n    if (entries.Count < _maxEntriesPerFile) \n    { \n        entries.Add( \n            new DataEntry( \n                entries.Count + 1,  \n                visitorName,  \n                bookTitle,  \n                returningDate)); \n\n        string[] newContent =  \n            Serialize( \n                entries); \n\n        return new FileAction( \n            currentFile.FileName,  \n            ActionType.Update,  \n            newContent); \n    } \n    else \n    { \n        var entry = new DataEntry( \n            1, \n            visitorName, \n            bookTitle, \n            returningDate); \n\n        string[] newContent =  \n            Serialize( \n                new List<DataEntry> { entry }); \n\n        string newFileName =  \n            GetNewFileName( \n                currentFile.FileName); \n\n        return new FileAction( \n            newFileName,  \n            ActionType.Create,  \n            newContent); \n    } \n} \n\n```", "```cs\npublic struct FileContent \n{ \n    public readonly string FileName; \n    public readonly string[] Content; \n\n    public FileContent( \n        string fileName, \n        string[] content) \n    { \n        FileName = fileName; \n        Content = content; \n    } \n} \n\n```", "```cs\npublic struct FileAction \n{ \n    public readonly string FileName; \n    public readonly string[] Content; \n    public readonly ActionType Type; \n\n    public FileAction( \n        string fileName,  \n        ActionType type,  \n        string[] content) \n    { \n        FileName = fileName; \n        Type = type; \n        Content = content; \n    } \n} \n\n```", "```cs\npublic enum ActionType \n{ \n    Create, \n    Update, \n    Delete \n} \n\n```", "```cs\npublic struct DataEntry \n{ \n    public readonly int Number; \n    public readonly string Visitor; \n    public readonly string BookTitle; \n    public readonly DateTime ReturningDate; \n\n    public DataEntry( \n        int number,  \n        string visitor, \n        string bookTitle, \n        DateTime returningDate) \n    { \n        Number = number; \n        Visitor = visitor; \n        BookTitle = bookTitle; \n        ReturningDate = returningDate; \n    } \n} \n\n```", "```cs\nprivate List<DataEntry> Parse( \n    string[] content) \n{ \n    var result = new List<DataEntry>(); \n\n    foreach (string line in content) \n    { \n        string[] data = line.Split(';'); \n        result.Add( \n            new DataEntry( \n                int.Parse(data[0]),  \n                data[1],  \n                data[2], \n                DateTime.Parse(data[3]))); \n    } \n\n    return result; \n} \n\n```", "```cs\nprivate string[] Serialize( \n    List<DataEntry> entries) \n{ \n    return entries \n        .Select(entry =>  \n            String.Format( \n                \"{0};{1};{2};{3}\", \n                entry.Number, \n                entry.Visitor, \n                entry.BookTitle, \n                entry.ReturningDate \n                    .ToString(\"d\"))) \n        .ToArray(); \n} \n\n```", "```cs\npublic IReadOnlyList<FileAction> RemoveRecord( \n  string visitorName, \n  FileContent[] directoryFiles) \n{ \n  return directoryFiles \n    .Select(file => \n    RemoveRecordIn( \n      file, \n      visitorName)) \n  .Where(action => \n  action != null) \n  .Select(action => \n  action.Value) \n  .ToList(); \n} \n\n```", "```cs\nprivate FileAction? RemoveRecordIn( \n    FileContent file,  \n    string visitorName) \n{ \n    List<DataEntry> entries = Parse( \n        file.Content); \n    List<DataEntry> newContent = entries \n        .Where(x =>  \n            x.Visitor != visitorName) \n        .Select((entry, index) =>  \n            new DataEntry( \n                index + 1,  \n                entry.Visitor,  \n                entry.BookTitle, \n                entry.ReturningDate)) \n        .ToList(); \n    if (newContent.Count == entries.Count) \n        return null; \n    if (newContent.Count == 0) \n    { \n        return new FileAction( \n            file.FileName, \n            ActionType.Delete, \n            new string[0]); \n    } \n    else \n    { \n        return new FileAction( \n            file.FileName,  \n            ActionType.Update,  \n            Serialize( \n                newContent)); \n    } \n} \n\n```", "```cs\n[TestMethod] \n// Add record to existing log file  \n// but the lines is lower then maxEntriesPerFile  \npublic void AddRecord_LinesIsLowerThanMaxEntriesPerFileTest() \n{ \n    LibrarianshipImmutable librarian =  \n        new LibrarianshipImmutable(5); \n\n    FileContent file = new FileContent( \n        \"LibraryLog_0001.txt\",  \n        new[]{ \n            \"1;Arthur Jackson;Responsive Web Design;9/26/2016\" \n        }); \n\n    FileAction action = librarian.AddRecord( \n        file, \n        \"Maddox Webb\", \n        \"AngularJS by Example\", \n        new DateTime( \n            2016, 9, 27, 0, 0, 0)); \n\n    Assert.AreEqual( \n        ActionType.Update,  \n        action.Type); \n    Assert.AreEqual( \n        \"LibraryLog_0001.txt\",  \n        action.FileName); \n    CollectionAssert.AreEqual( \n        new[]{ \n            \"1;Arthur Jackson;Responsive Web Design;9/26/2016\", \n            \"2;Maddox Webb;AngularJS by Example;9/27/2016\" \n        }, \n        action.Content); \n} \n\n```", "```cs\nFileAction action = librarian.AddRecord( \n  file, \n  \"Maddox Webb\", \n  \"AngularJS by Example\", \n  new DateTime( \n    2016, 9, 27, 0, 0, 0)); \n\n```", "```cs\n[TestMethod] \n// Add record to a new log file  \n// becausecurrent log file has reached maxEntriesPerFile  \npublic void AddRecord_LinesHasReachMaxEntriesPerFileTest() \n{ \n    LibrarianshipImmutable librarian =  \n        new LibrarianshipImmutable(3); \n\n    FileContent file = new FileContent( \n        \"LibraryLog_0001.txt\",  \n        new[]{ \n            \"1;Arthur Jackson;Responsive Web Design;9/26/2016\", \n            \"2;Maddox Webb;AngularJS by Example;9/27/2016\", \n            \"3;Mel Fry;Python Machine Learning;9/28/2016\" \n        }); \n\n    FileAction action = librarian.AddRecord( \n        file, \n        \"Haiden Brown\", \n        \"Practical Data Science\", \n        new DateTime(2016, 9, 29, 0, 0, 0)); \n\n    Assert.AreEqual( \n        ActionType.Create,  \n        action.Type); \n    Assert.AreEqual( \n        \"LibraryLog_0002.txt\",  \n        action.FileName); \n    CollectionAssert.AreEqual( \n        new[]{ \n            \"1;Haiden Brown;Practical Data Science;9/29/2016\" \n        },  \n        action.Content); \n} \n\n```", "```cs\nLibrarianshipImmutable librarian =  \n  new LibrarianshipImmutable(3); \nFileContent file = new FileContent( \n  \"LibraryLog_0001.txt\", \n  new[]{ \n    \"1;Arthur Jackson;Responsive Web Design;9/26/2016\", \n    \"2;Maddox Webb;AngularJS by Example;9/27/2016\", \n    \"3;Mel Fry;Python Machine Learning;9/28/2016\" \n  }); \n\n```", "```cs\nFileAction action = librarian.AddRecord( \n  file, \n  \"Haiden Brown\", \n  \"Practical Data Science\", \n  new DateTime(2016, 9, 29, 0, 0, 0)); \n\n```", "```cs\n[TestMethod] \n// Remove selected record from files in the directory \npublic void RemoveRecord_FilesIsAvailableInDirectoryTest() \n{ \n    LibrarianshipImmutable librarian =  \n        new LibrarianshipImmutable(10); \n\n    FileContent file = new FileContent( \n        \"LibraryLog_0001.txt\",  \n        new[] \n        { \n            \"1;Arthur Jackson;Responsive Web Design;9/26/2016\", \n            \"2;Maddox Webb;AngularJS by Example;9/27/2016\", \n            \"3;Mel Fry;Python Machine Learning;9/28/2016\" \n        }); \n\n    IReadOnlyList<FileAction> actions =  \n        librarian.RemoveRecord( \n            \"Arthur Jackson\",  \n            new[] { \n                file }); \n\n    Assert.AreEqual( \n        1,  \n        actions.Count); \n\n    Assert.AreEqual( \n        \"LibraryLog_0001.txt\",  \n        actions[0].FileName); \n\n    Assert.AreEqual( \n        ActionType.Update,  \n        actions[0].Type); \n\n    CollectionAssert.AreEqual( \n        new[]{ \n            \"1;Maddox Webb;AngularJS by Example;9/27/2016\", \n            \"2;Mel Fry;Python Machine Learning;9/28/2016\" \n        },  \n        actions[0].Content); \n} \n\n```", "```cs\n[TestMethod] \n// Remove selected record from files in the directory \n// If file becomes empty, it will be deleted \npublic void RemoveRecord_FileBecomeEmptyTest() \n{ \n\n    LibrarianshipImmutable librarian = \n        new LibrarianshipImmutable(10); \n\n    FileContent file = new FileContent( \n        \"LibraryLog_0001.txt\", \n        new[] \n        { \n            \"1;Arthur Jackson;Responsive Web Design;9/26/2016\" \n        }); \n\n    IReadOnlyList<FileAction> actions = \n        librarian.RemoveRecord( \n            \"Arthur Jackson\",  \n            new[] { \n                file }); \n\n    Assert.AreEqual( \n        1,  \n        actions.Count); \n\n    Assert.AreEqual( \n        \"LibraryLog_0001.txt\",  \n        actions[0].FileName); \n\n    Assert.AreEqual( \n        ActionType.Delete,  \n        actions[0].Type); \n} \n\n```", "```cs\n[TestMethod] \n// Remove nothing if selected record is unavailable \npublic void RemoveRecord_SelectedRecordIsUnavailableTest() \n{ \n    LibrarianshipImmutable librarian = \n        new LibrarianshipImmutable(10); \n\n    FileContent file = new FileContent( \n        \"LibraryLog_0001.txt\", \n        new[] \n        { \n            \"1;Sofia Hamilton;DevOps Automation;9/30/2016\" \n        }); \n\n    IReadOnlyList<FileAction> actions = \n        librarian.RemoveRecord( \n            \"Arthur Jackson\", \n            new[] { \n                file }); \n\n    Assert.AreEqual( \n        0,  \n        actions.Count); \n} \n\n```", "```cs\nnamespace DomainLogicAndMutatingState \n{ \n    public class FileProcessor \n    { \n        public FileContent ReadFile( \n            string fileName) \n        { \n            return new FileContent( \n                fileName,  \n                File.ReadAllLines( \n                    fileName)); \n        } \n\n        public FileContent[] ReadDirectory( \n            string directoryName) \n        { \n            return Directory \n                .GetFiles( \n                    directoryName) \n                .Select(x =>  \n                    ReadFile(x)) \n                .ToArray(); \n        } \n\n        public void ApplyChanges( \n            IReadOnlyList<FileAction> actions) \n        { \n            foreach (FileAction action in actions) \n            { \n                switch (action.Type) \n                { \n                    case ActionType.Create: \n                    case ActionType.Update: \n                        File.WriteAllLines( \n                            action.FileName,  \n                            action.Content); \n                        continue; \n\n                    case ActionType.Delete: \n                        File.Delete( \n                            action.FileName); \n                        continue; \n\n                    default: \n                        throw new InvalidOperationException(); \n                } \n            } \n        } \n\n        public void ApplyChange( \n            FileAction action) \n        { \n            ApplyChanges( \n                new List<FileAction> { \n                    action }); \n        } \n    } \n} \n\n```", "```cs\nnamespace DomainLogicAndMutatingState \n{ \n    public class AppService \n    { \n        private readonly string _directoryName; \n        private readonly LibrarianshipImmutable _librarian; \n        private readonly FileProcessor _fileProcessor; \n\n        public AppService( \n            string directoryName) \n        { \n            _directoryName = directoryName; \n            _librarian = new LibrarianshipImmutable(10); \n            _fileProcessor = new FileProcessor(); \n        } \n\n        public void AddRecord( \n            string visitorName, \n            string bookTitle, \n            DateTime returningDate) \n        { \n            FileInfo fileInfo = new DirectoryInfo( \n                _directoryName) \n                    .GetFiles() \n                    .OrderByDescending(x =>  \n                        x.LastWriteTime) \n                    .First(); \n\n            FileContent file =  \n                _fileProcessor.ReadFile( \n                    fileInfo.Name); \n\n            FileAction action =  \n                _librarian.AddRecord( \n                    file,  \n                    visitorName, \n                    bookTitle, \n                    returningDate); \n\n            _fileProcessor.ApplyChange( \n                action); \n        } \n\n        public void RemoveRecord( \n            string visitorName) \n        { \n            FileContent[] files =  \n                _fileProcessor.ReadDirectory( \n                    _directoryName); \n\n            IReadOnlyList<FileAction> actions = \n                _librarian.RemoveRecord( \n                    visitorName, files); \n\n            _fileProcessor.ApplyChanges( \n                actions); \n        } \n    } \n} \n\n```"]