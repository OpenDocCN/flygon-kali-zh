- en: New Features in C# 8
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C# 8的新功能
- en: For decades, we have seen the development of a wide variety of programming languages.
    Some are now almost dead, some are used by few companies, and others have remained
    dominant in the market for many years. C# belongs to the third category. The first
    version of C# was released in the year 2000\. When C# was released, many people
    said that it was a clone of Java. Over time, however, C# became more mature and
    started dominating the market. This is especially the case for the Microsoft technology stack,
    where C# is undoubtedly the number one programming language. With every new release,
    Microsoft has introduced amazing features and made the language very powerful.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年来，我们见证了各种各样的编程语言的发展。有些现在几乎已经消亡，有些被少数公司使用，而其他一些在市场上占据主导地位多年。C#属于第三类。C#的第一个版本发布于2000年。当C#发布时，许多人说它是Java的克隆。然而，随着时间的推移，C#变得更加成熟，并开始占据市场主导地位。这尤其适用于微软技术栈，C#无疑是第一编程语言。随着每一个新版本的发布，微软都引入了令人惊叹的功能，使语言变得非常强大。
- en: 'At the end of 2018, Microsoft announced some exciting features that will be
    available in C# 8\. At the time of writing, C# 8 is still yet to be officially
    released, so I can''t guarantee that all of these features will be available in
    the final release. However, there is a very high chance that these features will
    be available in the final release. In this chapter, we will look at these features
    and try to understand how the language is evolving into an extraordinary programming
    language. Let''s take a look at the features that we are going to discuss:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在2018年底，微软宣布了一些令人兴奋的功能将在C# 8中可用。在我写作本书时，C# 8仍未正式发布，因此我无法保证所有这些功能将在最终版本中可用。然而，这些功能很有可能在最终版本中可用。在本章中，我们将看看这些功能，并试图理解语言如何演变成一个非凡的编程语言。让我们来看看我们将要讨论的功能：
- en: Nullable reference types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可空引用类型
- en: Async streams
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步流
- en: Ranges and indices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围和索引
- en: Default implementation of interface members
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口成员的默认实现
- en: Switch expressions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Switch表达式
- en: Target-typed new expressions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标类型的新表达式
- en: Environment Setup
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境设置
- en: To execute the code of this chapter you will need **Visual Studio 2019**. At
    the time of my writing this book, Visual Studio 2019 is not yet released officially.
    However, the preview version is available and to execute the code of this chapter,
    you will need Visual Studio 2019 preview version at least. Another thing to keep
    in mind is to create **.NET Core** Console App projects when testing the code
    of this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章的代码，你需要**Visual Studio 2019**。在我写作本书时，Visual Studio 2019尚未正式发布。然而，预览版本已经可用，要执行本章的代码，你至少需要Visual
    Studio 2019预览版。另一件需要记住的事情是，在测试本章的代码时，要创建**.NET Core**控制台应用程序项目。
- en: 'To download Visual Studio 2019 Preview Version, go to this link: [https://visualstudio.microsoft.com/vs/preview/](https://visualstudio.microsoft.com/vs/preview/).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载Visual Studio 2019预览版，请访问此链接：[https://visualstudio.microsoft.com/vs/preview/](https://visualstudio.microsoft.com/vs/preview/)。
- en: '![](img/ca22bf53-4019-4a40-82e3-002f198c086b.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca22bf53-4019-4a40-82e3-002f198c086b.png)'
- en: Visual Studio 2019 Preview download page
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2019预览下载页面
- en: Nullable reference types
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可空引用类型
- en: If you have ever faced an exception while coding in C#, it is likely to have
    been a null reference exception. Null reference exceptions are one of the most
    common exceptions a programmer will face while developing applications, so the
    C# language development team has worked hard to make them easier to understand.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在编写C#代码时曾遇到异常，很可能是空引用异常。空引用异常是程序员在开发应用程序时最常见的异常之一，因此C#语言开发团队努力使其更易于理解。
- en: 'In C#, there are two types of data: **value types** and **reference types**.
    Value types normally have default values when you create them, whereas reference
    types are, by default, null. Null means that the memory address does not point
    to any other memory address. When the program tries to find a reference and can''t
    find any, it throws an exception. As developers, we want to ship software that
    is exception-free, so we try to handle all the exceptions in our code; however,
    sometimes, it can be really hard to find a null reference exception when developing
    applications.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，有两种类型的数据：**值类型**和**引用类型**。当你创建值类型时，它们通常有默认值，而引用类型默认为null。Null意味着内存地址不指向任何其他内存地址。当程序试图查找引用但找不到时，会抛出异常。作为开发人员，我们希望发布无异常的软件，因此我们尽量在代码中处理所有异常；然而，有时在开发应用程序时很难找到空引用异常。
- en: In C# 8, the language development team came up with nullable reference types,
    which means that you can make a reference type nullable. If you do this, the compiler
    will not allow you to set null to non-nullable reference variables. If you are
    using Visual Studio, you will also get a warning if you try to set a null value
    to a non-nullable reference variable.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在C# 8中，语言开发团队提出了可空引用类型的概念，这意味着你可以使引用类型可空。如果这样做，编译器将不允许你将null赋给非可空引用变量。如果你使用Visual
    Studio，当你尝试将null值赋给非可空引用变量时，你也会收到警告。
- en: As this is a new feature and not available in old versions of C#. The C# programming
    language team came up with the idea of enabling the feature by writing a piece
    of code, so that the old systems do not crash. You can enable this feature for
    the whole project or for an individual file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个新功能，不在旧版本的C#中可用。C#编程语言团队提出了通过编写一小段代码来启用该功能的想法，以便旧系统不会崩溃。你可以为整个项目或单个文件启用此功能。
- en: 'To enable nullable reference types in a code file, you have to place the following
    code at the top of the source code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要在代码文件中启用可空引用类型，你必须在源代码顶部放置以下代码：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s take a look at an example of a nullable reference type:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个可空引用类型的例子：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you run the preceding code, you get an exception when trying to print the
    statement. Try to enable nullable reference types by using the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行上面的代码，当尝试打印该语句时会得到一个异常。尝试使用以下代码启用可空引用类型：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code will show you a warning to the effect that the name can''t
    be null. To make this workable, you have to change the code as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码会显示一个警告，指出名称不能为空。为了使其可行，你必须将代码更改如下：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By changing the string name to `nullable`, you are telling the compiler that
    it's OK to make this field nullable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字符串名称更改为`nullable`，你告诉编译器可以将该字段设置为可空。
- en: Async streams
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步流
- en: If you have worked with async methods in C#, you might have noticed that returning
    streams is not possible, or is hard to achieve with existing features. This would,
    however, be a helpful feature, which would make development tasks much simpler.
    This is why C# 8 has introduced a new interface called `IAsyncEnumerable`. With
    this new interface, asynchronous streams of data can be returned. Let me explain
    a little bit more about this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在C#中使用异步方法，你可能会注意到返回流是不可能的，或者很难通过现有的特性实现。然而，这将是一个有用的特性，可以使开发任务变得更简单。这就是为什么C#
    8引入了一个新的接口叫做`IAsyncEnumerable`。通过这个新的接口，可以返回异步数据流。让我再详细解释一下。
- en: Before async streams, in the C# programming language an async method was not
    able to return a stream of data—it could could only return a single value.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在异步流之前，在C#编程语言中，异步方法不能返回数据流，它只能返回单个值。
- en: 'Let''s take a look at an example of code that doesn''t use an async stream:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个不使用异步流的代码示例：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With async streams, a stream of data can now be returned using `IAsyncEnumerable`.
    Let''s take a look at the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过异步流，现在可以使用`IAsyncEnumerable`返回数据流。让我们看一下下面的代码：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: From the preceding example, we can see how we can use this new feature of C#
    to return asynchronous streams.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的例子中，我们可以看到如何使用C#的这个新特性来返回异步流。
- en: Ranges and indices
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围和索引
- en: 'C# 8 comes with ranges, which allow you to take a slice of an array or string.
    Before, if you wanted to get only the first three numbers of an array, you had
    to iterate through the array and use a condition to find out which values you
    wanted to use. Let''s take a look at an example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: C# 8带来了范围，它允许你获取数组或字符串的一部分。在此之前，如果你想要获取数组的前三个数字，你必须遍历数组并使用条件来找出你想要使用的值。让我们看一个例子：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With ranges, you can easily slice the array and take whatever value you want,
    as shown in the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过范围，你可以轻松地切片数组并获取你想要的值，就像下面的代码所示：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, we can see that we gave a range (`[0..3]`) in the
    `foreach` loop next to the numbers. This means that we should only take the values
    of index 0 to index 3 in the array.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们可以看到在`foreach`循环中给出了一个范围(`[0..3]`)。这意味着我们应该只取数组中索引0到索引3的值。
- en: There are other ways to slice an array. You can use `^` to say that indexes
    should be taken backward. For example, if you want to get values from the second
    element to the second-from-last element, you can use `[1..^1]`. If you apply this,
    the result you will get is `2, 3, 4`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他切片数组的方法。你可以使用`^`来表示索引应该向后取值。例如，如果你想要获取从第二个元素到倒数第二个元素的值，你可以使用`[1..^1]`。如果你应用这个范围，你将得到`2,
    3, 4`。
- en: 'Let''s take a look at the use of ranges in the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下面的代码中范围的使用：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When running the above code you will need a special Nuget package in your project.
    The name of the package is `Sdcb.System.Range`. To install this package you can
    go to Nuget Package Manager in Visual Studio and install it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行上面的代码时，你需要在你的项目中使用一个特殊的Nuget包。这个包的名称是`Sdcb.System.Range`。要安装这个包，你可以在Visual
    Studio中的Nuget包管理器中安装它。
- en: '![](img/370d0040-10f3-44d9-9554-5c12e0028656.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/370d0040-10f3-44d9-9554-5c12e0028656.png)'
- en: Installing Sdcb.System.Range Nuget package
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Sdcb.System.Range Nuget包
- en: If you are still having build errors, there is a possibility that your project
    is still using C# 7 and, to upgrade to C# 8, you hover over the place which is
    marked with a red underline and click the light bulb that will popup. Then, Visual
    Studio will ask if you want to use C# 8 for your project. You need to click on
    Upgrade this project to C# language version '8.0 *beta*'. This will upgrade your
    project from C# 7 to C# 8 and you will be able to run your code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然遇到构建错误，有可能是你的项目仍在使用C# 7，要升级到C# 8，你可以将鼠标悬停在被红色下划线标记的地方，然后点击弹出的灯泡。然后，Visual
    Studio会询问你是否要在你的项目中使用C# 8。你需要点击“将此项目升级到C#语言版本'8.0 *beta*'”。这将把你的项目从C# 7升级到C# 8，然后你就可以运行你的代码了。
- en: '![](img/188d10ee-9070-4d8c-848e-9f1dff400cb2.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/188d10ee-9070-4d8c-848e-9f1dff400cb2.png)'
- en: 'Figure: Upgrade project to C# 8'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图：将项目升级到C# 8
- en: Default implementation of interface members
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口成员的默认实现
- en: We all know that, in C#, interfaces don't have any method implementations; they
    only contain the method signature. In C# 8, however, interfaces are allowed to
    have implemented methods. These methods can be overridden by classes if they need
    to be. Interface methods will also have access to modifiers, such as public, virtual,
    protected, or internal. By default, the access level is set to virtual unless
    it is fixed as sealed or private.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道，在C#中，接口没有任何方法实现；它们只包含方法签名。然而，在C# 8中，接口允许有实现的方法。如果需要，这些方法可以被类重写。接口方法也可以访问修饰符，比如public、virtual、protected或internal。默认情况下，访问级别被设置为virtual，除非它被固定为sealed或private。
- en: 'There is another important thing to note. No attributes or fields are yet allowed
    in an interface. This means that interface methods can''t use any instance fields
    in the methods. Interface methods can take parameters as input and use those,
    but not instance variables. Let''s take a look at an example of an interface method:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件重要的事情要注意。接口中还不允许使用属性或字段。这意味着接口方法不能在方法中使用任何实例字段。接口方法可以接受参数作为输入并使用它们，但不能使用实例变量。让我们看一个接口方法的例子：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this time of writing the book, this feature has not yet been available in
    the C# 8 preview version. This is still marked as a proposed feature but, hopefully,
    it will be implemented in the final release. Therefore, the above given code might
    not work even if you use Visual Studio 2019 preview version.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，这个功能在C# 8预览版本中还不可用。这仍然被标记为一个拟议的功能，但希望它会在最终发布中实现。因此，即使您使用Visual Studio
    2019预览版本，上面给出的代码可能也无法工作。
- en: Switch expressions
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Switch表达式
- en: We have been using switch statements for many years now. Whenever we think of
    or hear about switches, we think about case and break. C# 8, however, will force
    us to change that mindset through the introduction of switch expressions. This
    means that switch statements will not be the same as they were in the past.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我们一直在使用switch语句。每当我们想到或听到switch时，我们会想到case和break。然而，C# 8将通过引入switch表达式来迫使我们改变这种思维方式。这意味着switch语句将不再与过去一样。
- en: 'Let''s take a look at what our old `switch` statement used to look like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们以前的`switch`语句是什么样子的：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With the new approach, we won''t place the `person` in parentheses after the
    `switch`, but we will place the `switch` to the right of the `person` variable,
    and no `case` keywords will be needed. Let''s take a look at how we can use `switch`
    expressions in a new way:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过新的方法，我们不会在`switch`后面将`person`放在括号中，而是将`switch`放在`person`变量的右侧，不需要`case`关键字。让我们看看我们如何以新的方式使用`switch`表达式：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we can also see that, for the default case, we just use the underscore (`_`).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还可以看到，对于默认情况，我们只使用下划线(`_`)。
- en: Target-typed new expressions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标类型的新表达式
- en: 'In C# 8, another new feature is target-typed new expressions. This feature
    will make code assignment much cleaner. Let''s start with some example code in
    which we are creating a dictionary with a value:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在C# 8中，另一个新功能是目标类型的新表达式。这个功能将使代码赋值更加清晰。让我们从一个示例代码开始，我们在其中创建了一个带有值的字典：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With target-typed new expressions, the preceding code can be written as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有了目标类型的新表达式，前面的代码可以这样写：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When you place `new()`, the variable takes the type that is on the left-hand
    side and creates a new instance of it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当您放置`new()`时，变量将采用左侧的类型并创建一个新的实例。
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Every time Microsoft announces a new release of the C# programming language,
    I get excited to see what they are bringing to the table, and every time, I am
    impressed with the results. C# 8 was no exception. The nullable reference type
    in particular is an amazing feature because it allows us to prevent a very common
    exception. Async streams are another fantastic feature, especially for the development
    of IoT. Ranges, interface members, switch expressions, and all the other additions
    are small steps towards significant progress. New features such as these make
    a developer's life much easier, and bring benefits to businesses by reducing software
    crashes. In the next chapter, we are going to discuss design principles and different
    design patterns.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每当微软宣布推出新版本的C#编程语言时，我都会对他们带来了什么感到兴奋，而每一次，我都对结果感到印象深刻。C# 8也不例外。特别是可空引用类型是一个令人惊叹的功能，因为它可以防止一个非常常见的异常。异步流是另一个很棒的功能，特别适用于物联网的开发。范围、接口成员、switch表达式以及其他所有的新增功能都是朝着重大进步迈出的小步。这些新功能使开发人员的生活变得更加轻松，并通过减少软件崩溃为企业带来了好处。在下一章中，我们将讨论设计原则和不同的设计模式。
