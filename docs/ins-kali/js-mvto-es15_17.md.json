["```js\nexport interface ComplaintListener{\n  IsAbleToResolveComplaint(complaint: Complaint): boolean;\n  ListenToComplaint(complaint: Complaint): string;\n}\n```", "```js\nvar Complaint = (function () {\n  function Complaint() {\n    this.ComplainingParty = \"\";\n    this.ComplaintAbout = \"\";\n    this.Complaint = \"\";\n  }\n  return Complaint;\n})();\n```", "```js\nclass ClerkOfTheCourt {\n  IsInterestedInComplaint(complaint) {\n    //decide if this is a complaint which can be solved by the clerk\n    if(isInterested())\n      return true;\n    return false;\n  }\n  ListenToComplaint(complaint) {\n    //perform some operation\n    //return solution to the complaint\n    return \"\";\n  }\n}\nJudicialSystem.ClerkOfTheCourt = ClerkOfTheCourt;\nclass King {\n  IsInterestedInComplaint(complaint) {\n    return true;//king is the final member in the chain so must return true\n  }\n  ListenToComplaint(complaint) {\n    //perform some operation\n    //return solution to the complaint\n    return \"\";\n  }\n}\nJudicialSystem.King = King;\n```", "```js\nclass ComplaintResolver {\n  constructor() {\n    this.complaintListeners = new Array();\n     this.complaintListeners.push(new ClerkOfTheCourt());\n     this.complaintListeners.push(new King());\n  }\n  ResolveComplaint(complaint) {\n    for (var i = 0; i < this.complaintListeners.length; i++) {\n      if         (this.complaintListeners[i].IsInterestedInComplaint(complaint)) {\n        return this.complaintListeners[i].ListenToComplaint(complaint);\n      }\n    }\n  }\n}\n```", "```js\nvar simpleCommand = new Array();\nsimpleCommand.push(new LordInstructions().BringTroops);\nsimpleCommand.push(\"King's Landing\");\nsimpleCommand.push(500);\nsimpleCommand.push(new Date());\n```", "```js\nsimpleCommand[0](simpleCommand[1], simpleCommand[2], simpleCommand[3]);\n```", "```js\nsimpleCommand[0](simpleCommand[1], simpleCommand[2], simpleCommand[3], simpleCommand[4], simpleCommand[5], simpleCommand[6]);\n```", "```js\nclass BringTroopsCommand {\n  constructor(location, numberOfTroops, when) {\n    this._location = location;\n    this._numberOfTroops = numberOfTroops;\n    this._when = when;\n  }\n  Execute() {\n    var receiver = new LordInstructions();\n    receiver.BringTroops(this._location, this._numberOfTroops, this._when);\n  }\n}\n```", "```js\ncommand.Execute()\n```", "```js\nprocess.nextTick(function(){command.Execute();});\n```", "```js\nclass LordInstructions {\n  BringTroops(location, numberOfTroops, when) {\n    console.log(`You have been instructed to bring ${numberOfTroops} troops to ${location} by ${when}`);\n  }\n}\n```", "```js\n(aggressor -> battle ground <- defender) -> victor\n```", "```js\n(Robert Baratheon -> River Trident <- RhaegarTargaryen) -> Robert Baratheon\n```", "```js\nclass Battle {\n  constructor(battleGround, agressor, defender, victor) {\n    this.battleGround = battleGround;\n    this.agressor = agressor;\n    this.defender = defender;\n    this.victor = victor;\n  }\n}\n```", "```js\nclass Parser {\n  constructor(battleText) {\n    this.battleText = battleText;\n    this.currentIndex = 0;\n    this.battleList = battleText.split(\"\\n\");\n  }\n  nextBattle() {\n   if (!this.battleList[0])\n     return null;\n    var segments = this.battleList[0].match(/\\((.+?)\\s?->\\s?(.+?)\\s?<-\\s?(.+?)\\s?->\\s?(.+)/);\n    return new Battle(segments[2], segments[1], segments[3], segments[4]);\n  }\n}\n```", "```js\nvar text = \"(Robert Baratheon -> River Trident <- RhaegarTargaryen) -> Robert Baratheon\";\nvar p = new Parser(text);\np.nextBattle()\n```", "```js\n{\n  battleGround: 'River Trident',\n  agressor: 'Robert Baratheon',\n  defender: 'RhaegarTargaryen)',\n  victor: 'Robert Baratheon'\n}\n```", "```js\ninterface Iterator{\n  next();\n}\n```", "```js\nclass KingSuccession {\n  constructor(inLineForThrone) {\n    this.inLineForThrone = inLineForThrone;\n    this.pointer = 0;\n  }\n  next() {\n    return this.inLineForThrone[this.pointer++];\n  }\n}\n```", "```js\nvar king = new KingSuccession([\"Robert Baratheon\" ,\"JofferyBaratheon\", \"TommenBaratheon\"]);\nking.next() //'Robert Baratheon'\nking.next() //'JofferyBaratheon'\nking.next() //'TommenBaratheon'\n```", "```js\nclass FibonacciIterator {\n  constructor() {\n    this.previous = 1;\n    this.beforePrevious = 1;\n  }\n  next() {\n    var current = this.previous + this.beforePrevious;\n    this.beforePrevious = this.previous;\n    this.previous = current;\n    return current;\n  }\n}\n```", "```js\nvar fib = new FibonacciIterator()\nfib.next() //2\nfib.next() //3\nfib.next() //5\nfib.next() //8\nfib.next() //13\nfib.next() //21\n```", "```js\nvar kings = new KingSuccession([\"Robert Baratheon\" ,\"JofferyBaratheon\", \"TommenBaratheon\"]);\nfor(var king of kings){\n  //act on members of kings\n}\n```", "```js\nfunction* FibonacciGenerator (){\n  var previous = 1;\n  var beforePrevious = 1;\n  while(true){\n    var current = previous + beforePrevious;\n    beforePrevious = previous;\n    previous = current;\n    yield current;\n  }\n}\n```", "```js\nvar fib = new FibonacciGenerator()\nfib.next().value //2\nfib.next().value //3\nfib.next().value //5\nfib.next().value //8\nfib.next().value //13\nfib.next().value //21\n```", "```js\nclass Karstark {\n  constructor(greatLord) {\n    this.greatLord = greatLord;\n  }\n  receiveMessage(message) {\n  }\n  sendMessage(message) {\n    this.greatLord.routeMessage(message);\n  }\n}\n```", "```js\nclass HouseStark {\n  constructor() {\n    this.karstark = new Karstark(this);\n    this.bolton = new Bolton(this);\n    this.frey = new Frey(this);\n    this.umber = new Umber(this);\n  }\n  routeMessage(message) {\n  }\n}\n```", "```js\n$(\".error\").slideToggle();\n```", "```js\nclass SquareCommand {\n  constructor(numberToSquare) {\n    this.numberToSquare = numberToSquare;\n  }\n  Execute() {\n    this.numberToSquare *= this.numberToSquare;\n  }\n}\n```", "```js\nclass WorldState {\n  constructor(numberOfKings, currentKingInKingsLanding, season) {\n    this.numberOfKings = numberOfKings;\n    this.currentKingInKingsLanding = currentKingInKingsLanding;\n    this.season = season;\n  }\n}\n```", "```js\nclass WorldStateProvider {\n  saveMemento() {\n    return new WorldState(this.numberOfKings, this.currentKingInKingsLanding, this.season);\n  }\n  restoreMemento(memento) {\n    this.numberOfKings = memento.numberOfKings;\n    this.currentKingInKingsLanding = memento.currentKingInKingsLanding;\n    this.season = memento.season;\n  }\n}\n```", "```js\nclass Soothsayer {\n  constructor() {\n    this.startingPoints = [];\n    this.currentState = new WorldStateProvider();\n  }\n  setInitialConditions(numberOfKings, currentKingInKingsLanding, season) {\n    this.currentState.numberOfKings = numberOfKings;\n    this.currentState.currentKingInKingsLanding = currentKingInKingsLanding;\n    this.currentState.season = season;\n  }\n  alterNumberOfKingsAndForetell(numberOfKings) {\n    this.startingPoints.push(this.currentState.saveMemento());\n    this.currentState.numberOfKings = numberOfKings;\n  }\n  alterSeasonAndForetell(season) {\n    this.startingPoints.push(this.currentState.saveMemento());\n    this.currentState.season = season;\n  }\n  alterCurrentKingInKingsLandingAndForetell(currentKingInKingsLanding) {\n    this.startingPoints.push(this.currentState.saveMemento());\n    this.currentState.currentKingInKingsLanding = currentKingInKingsLanding;\n    //run some sort of prediction\n  }\n  tryADifferentChange() {\n    this.currentState.restoreMemento(this.startingPoints.pop());\n  }\n}\n```", "```js\nclass GetterSetter {\n  GetProperty() {\n    return this._property;\n  }\n  SetProperty(value) {\n    this._property = value;\n  }\n}\n```", "```js\nSetProperty(value) {\n  var temp = this._property;\n  this._property = value;\n  this._listener.Event(value, temp);\n}\n```", "```js\nclass Spy {\n  constructor() {\n    this._partiesToNotify = [];\n  }\n  Subscribe(subscriber) {\n    this._partiesToNotify.push(subscriber);\n  }\n  Unsubscribe(subscriber) {\n    this._partiesToNotify.remove(subscriber);\n  }\n  SetPainKillers(painKillers) {\n    this._painKillers = painKillers;\n    for (var i = 0; i < this._partiesToNotify.length; i++) {\n      this._partiesToNotify[i](painKillers);\n    }\n  }\n}\n```", "```js\nclass Player {\n  OnKingPainKillerChange(newPainKillerAmount) {\n    //perform some action\n  }\n}\n```", "```js\nlet s = new Spy();\nlet p = new Player();\ns.Subscribe(p.OnKingPainKillerChange); //p is now a subscriber\ns.SetPainKillers(12); //s will notify all subscribers\n```", "```js\n$(\"body\").on(\"click\", \"button\", function(){/*do something*/})\n```", "```js\nlet buttons = document.getElementsByTagName(\"button\");\nfor(let i =0; i< buttons.length; i++)\n{\n  buttons[i].onclick = function(){/*do something*/}\n}\n```", "```js\nfunction (action, amount) {\n  if (this.state == \"overdrawn\" && action == \"withdraw\") {\n    this.state = \"on hold\";\n  }\n  if (this.state == \"on hold\" && action != \"deposit\") {\n    this.state = \"on hold\";\n  }\n  if (this.state == \"good standing\" && action == \"withdraw\" && amount <= this.balance) {\n    this.balance -= amount;\n  }\n  if (this.state == \"good standing\" && action == \"withdraw\" && amount >this.balance) {\n    this.balance -= amount;\n    this.state = \"overdrawn\";\n  }\n};\n```", "```js\nclass BankAccountManager {\n  constructor() {\n    this.currentState = new GoodStandingState(this);\n  }\n  Deposit(amount) {\n    this.currentState.Deposit(amount);\n  }\n  Withdraw(amount) {\n    this.currentState.Withdraw(amount);\n  }\n  addToBalance(amount) {\n    this.balance += amount;\n  }\n  getBalance() {\n    return this.balance;\n  }\n  moveToState(newState) {\n    this.currentState = newState;\n  }\n}\n```", "```js\nclass GoodStandingState {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  Deposit(amount) {\n    this.manager.addToBalance(amount);\n  }\n  Withdraw(amount) {\n    if (this.manager.getBalance() < amount) {\n      this.manager.moveToState(new OverdrawnState(this.manager));\n    }\n    this.manager.addToBalance(-1 * amount);\n  }\n}\n```", "```js\nclass OverdrawnState {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  Deposit(amount) {\n    this.manager.addToBalance(amount);\n    if (this.manager.getBalance() > 0) {\n      this.manager.moveToState(new GoodStandingState(this.manager));\n    }\n  }\n  Withdraw(amount) {\n    this.manager.moveToState(new OnHold(this.manager));\n    throw \"Cannot withdraw money from an already overdrawn bank account\";\n  }\n}\n```", "```js\nclass OnHold {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  Deposit(amount) {\n    this.manager.addToBalance(amount);\n    throw \"Your account is on hold and you must attend the bank to resolve the issue\";\n  }\n  Withdraw(amount) {\n    throw \"Your account is on hold and you must attend the bank to resolve the issue\";\n  }\n}\n```", "```js\ngoodStandingState\n.on(\"withdraw\")\n.when(function(manager){return manager.balance > 0;})\n  .transitionTo(\"goodStanding\")\n.when(function(manager){return mangaer.balance <=0;})\n  .transitionTo(\"overdrawn\");\n```", "```js\nexport interface ITravelMethod{\n  Travel(source: string, destination: string) : TravelResult;\n}\n```", "```js\nclass TravelResult {\n  constructor(durationInDays, probabilityOfDeath, cost) {\n    this.durationInDays = durationInDays;\n    this.probabilityOfDeath = probabilityOfDeath;\n    this.cost = cost;\n  }\n}\n```", "```js\nclass SeaGoingVessel {\n  Travel(source, destination) {\n    return new TravelResult(15, .25, 500);\n  }\n}\n\nclass Horse {\n  Travel(source, destination) {\n    return new TravelResult(30, .25, 50);\n  }\n}\n\nclass Walk {\n  Travel(source, destination) {\n    return new TravelResult(150, .55, 0);\n  }\n}\n```", "```js\nvar currentMoney = getCurrentMoney();\nvar strat;\nif (currentMoney> 500)\n  strat = new SeaGoingVessel();\nelse if (currentMoney> 50)\n  strat = new Horse();\nelse\n  strat = new Walk();\nvar travelResult = strat.Travel();\n```", "```js\nvar currentMoney = getCurrentMoney();\nvar strat;\nif (currentMoney> 500)\n  strat = new FavorFastestAndSafestStrategy();\nelse\n  strat = new FavorCheapest();\nvar travelResult = strat.Travel();\n```", "```js\nclass BasicBeer {\n  Create() {\n    this.AddIngredients();\n    this.Stir();\n    this.Ferment();\n    this.Test();\n    if (this.TestingPassed()) {\n      this.Distribute();\n    }\n  }\n  AddIngredients() {\n    throw \"Add ingredients needs to be implemented\";\n  }\n  Stir() {\n    //stir 15 times with a wooden spoon\n  }\n  Ferment() {\n    //let stand for 30 days\n  }\n  Test() {\n    //draw off a cup of beer and taste it\n  }\n  TestingPassed() {\n    throw \"Conditions to pass a test must be implemented\";\n  }\n  Distribute() {\n    //place beer in 50L casks\n  }\n}\n```", "```js\nclass RaspberryBeer extends BasicBeer {\n  AddIngredients() {\n    //add ingredients, probably including raspberries\n  }\n  TestingPassed() {\n    //beer must be reddish and taste of raspberries\n  }\n}\n```", "```js\ninterface IMemberOfArmy{\n  printName();\n}\n```", "```js\nclass Knight {\n  constructor() {\n    this._type = \"Westeros.Army.Knight\";\n  }\n  printName() {\n    console.log(\"Knight\");\n  }\n  visit(visitor) {\n    visitor.visit(this);\n  }\n}\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\n\nfor (let i = 0; i<collection.length; i++) {\n  if (typeof (collection[i]) == 'Knight')\n    collection[i].printName();\n  else\n    console.log(\"Not a knight\");\n}\n```", "```js\nNot a knight\nNot a knight\nNot a knight\nNot a knight\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\n\nfor (var i = 0; i < collection.length; i++) {\n  if (collection[i] instanceof Knight)\n    collection[i].printName();\n  else\n    console.log(\"No match\");\n}\n```", "```js\ncollection.push(Object.create(Knight));\n```", "```js\nvar Knight = (function () {\n  function Knight() {\n    this._type = \"Knight\";\n  }\n  Knight.prototype.printName = function () {\n    console.log(\"Knight\");\n  };\n  return Knight;\n})();\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\n\nfor (vari = 0; i<collection.length; i++) {\n  if (collection[i]._type == 'Knight')\n    collection[i].printName();\n  else\n    console.log(\"No match\");\n}\n```", "```js\nvar Knight = (function () {\n  function Knight() {\n    this._type = \"Knight\";\n  }\n  Knight.prototype.printName = function () {\n    console.log(\"Knight\");\n  };\n  Knight.prototype.visit = function (visitor) {\n visitor.visit(this);\n };\n  return Knight;\n})();\n```", "```js\nvarSelectiveNamePrinterVisitor = (function () {\n  function SelectiveNamePrinterVisitor() {\n  }\n  SelectiveNamePrinterVisitor.prototype.Visit = function (memberOfArmy) {\n    if (memberOfArmy._type == \"Knight\") {\n      this.VisitKnight(memberOfArmy);\n    } else {\n      console.log(\"Not a knight\");\n    }\n  };\n\n  SelectiveNamePrinterVisitor.prototype.VisitKnight = function (memberOfArmy) {\n    memberOfArmy.printName();\n  };\n  return SelectiveNamePrinterVisitor;\n})();\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\nvar visitor = new SelectiveNamePrinterVisitor();\nfor (vari = 0; i<collection.length; i++) {\n  collection[i].visit(visitor);\n}\n```"]