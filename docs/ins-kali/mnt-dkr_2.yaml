- en: Chapter 2. Using the Built-in Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用内置工具
- en: 'In the later chapters of this book, we will explore the monitoring parts of
    the large eco-system that has started to flourish around Docker over the last
    24 months. However, before we press ahead with that, we should take a look at
    what is possible with a vanilla installation of Docker. In this chapter, we will
    cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面章节中，我们将探索围绕Docker在过去24个月中开始蓬勃发展的大型生态系统的监控部分。然而，在我们继续之前，我们应该看看使用原始安装的Docker可能实现什么。在本章中，我们将涵盖以下主题：
- en: Using the tools built into Docker to get real-time metrics on container performance
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker内置工具实时获取容器性能指标
- en: Using standard operating system commands to get metrics on what Docker is doing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准操作系统命令获取Docker正在执行的指标
- en: Generating a test load so you can view the metrics changing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个测试负载，以便您可以查看指标的变化
- en: Docker stats
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker统计
- en: 'Since version 1.5, there has been a basic statistic command built into Docker:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.5版本以来，Docker内置了一个基本的统计命令：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will stream details of the resource utilization of your containers
    in real time. The best way to find out about the command is to see it in action.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将实时流式传输容器的资源利用率详情。了解该命令的最佳方法是看它实际运行。
- en: Running Docker stats
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Docker统计
- en: 'Let''s launch a container using the vagrant environment, which we covered in
    the last chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用vagrant环境启动一个容器，这是我们在上一章中介绍的：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that you are connected to the vagrant server, launch the container using
    the Docker compose file in `/monitoring_docker/Chapter01/01-basic/`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已连接到vagrant服务器，使用`/monitoring_docker/Chapter01/01-basic/`中的Docker compose文件启动容器：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You have now pulled down and launched a container in the background. The container
    is called `01basic_web_1` and it runs NGINX and PHP serving a single PHP information
    page ([http://php.net/manual/en/function.phpinfo.php](http://php.net/manual/en/function.phpinfo.php)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经拉取并在后台启动了一个容器。该容器名为`01basic_web_1`，它运行NGINX和PHP，提供一个单独的PHP信息页面（[http://php.net/manual/en/function.phpinfo.php](http://php.net/manual/en/function.phpinfo.php)）。
- en: 'To check whether everything has been launched as expected, run `docker-compose
    ps`. You should see your single container with `State` of `Up`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否一切都按预期启动，请运行`docker-compose ps`。您应该看到您的单个容器的`State`为`Up`：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, you should be able to see the page containing the output of the PHP
    information at `http://192.168.33.10/` (this IP address is hardcoded into the
    vagrant configuration), if you put it in your local browser:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您应该能够在`http://192.168.33.10/`（此IP地址已硬编码到vagrant配置中）看到包含PHP信息输出的页面，如果您在本地浏览器中输入该地址：
- en: '![Running Docker stats](../images/00010.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![运行Docker统计](../images/00010.jpeg)'
- en: 'Now, you have a container up and running; let''s look at some of the basic
    stats. We know from the output of `docker-compose` that our container is called
    `01basic_web_1`, so enter the following command to start streaming statistics
    in your terminal:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经启动并运行了一个容器；让我们来看一些基本的统计数据。我们从`docker-compose`的输出中知道我们的容器叫做`01basic_web_1`，所以在终端中输入以下命令来开始流式传输统计数据：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will take a second to initiate; after this is done, you should see your
    container listed along with the statistics for the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一点时间来初始化；完成后，您应该看到您的容器列出以及以下统计信息：
- en: '`CPU %`: This shows you how much of the available CPU resource the container
    is currently using.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CPU %`：显示容器当前使用的可用CPU资源的百分比。'
- en: '`MEM USEAGE/LIMIT`: This tells you how much RAM the container is utilizing;
    it also displays how much allowance the container has. If you haven''t explicitly
    set a limit, it will show the total amount of RAM on the host machine.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEM USEAGE/LIMIT`：这告诉你容器正在使用多少RAM；它还显示了容器的允许量。如果你没有明确设置限制，它将显示主机机器上的RAM总量。'
- en: '`MEM %`: This shows you what percentage of the RAM allowance the container
    is using.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MEM %`：这显示了容器使用的RAM允许量的百分比。'
- en: '`NET I/O`: This gives a running total of how much bandwidth has been transferred
    in and out of the container.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NET I/O`：这显示了容器传输的带宽总量。'
- en: If you go back to your browser window and start to refresh `http://192.168.33.10/`,
    you will see that the values in each of the columns start to change. To stop streaming
    the statistics, press *Ctrl* + *c*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回到浏览器窗口并开始刷新`http://192.168.33.10/`，你会看到每列中的值开始改变。要停止流式传输统计信息，按下*Ctrl* +
    *c*。
- en: Rather than keeping on hitting refresh over and over again, let's generate a
    lot of traffic to `01basic_web_1`, which should put the container under a heavy
    load.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与其一遍又一遍地刷新，不如让我们给`01basic_web_1`生成大量流量，这应该会让容器承受重负。
- en: 'Here, we will launch a container that will send 10,000 requests to `01basic_web_1`
    using ApacheBench ([https://httpd.apache.org/docs/2.2/programs/ab.html](https://httpd.apache.org/docs/2.2/programs/ab.html)).
    Although it will take a minute or two to execute, we should run `docker stats`
    as soon as possible:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将启动一个容器，使用ApacheBench（[https://httpd.apache.org/docs/2.2/programs/ab.html](https://httpd.apache.org/docs/2.2/programs/ab.html)）向`01basic_web_1`发送10,000个请求。虽然执行需要一两分钟，但我们应该尽快运行`docker
    stats`：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the ApacheBench image has been downloaded and the container that will
    be called `01basic_load` starts, you should see the statistics for both `01basic_web_1`
    and `01basic_load` begin to stream in your terminal:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完ApacheBench镜像并启动名为`01basic_load`的容器后，你应该在终端中看到`01basic_web_1`和`01basic_load`的统计信息开始流动：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After a while, you will notice that most of the statistics for `01basic_load`
    will drop off to zero; this means that the test has completed and that the container
    running the test has exited. The `docker stats` command can only stream statistics
    for the running containers; ones that have exited are no longer running and, therefore,
    do not produce output when running `docker stats`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 过一会儿，你会注意到`01basic_load`的大部分统计数据会降至零；这意味着测试已经完成，运行测试的容器已退出。`docker stats`命令只能流式传输正在运行的容器的统计信息；已退出的容器不再运行，因此在运行`docker
    stats`时不会产生输出。
- en: 'Exit from `docker stats` using *Ctrl* + *c*; to see the results of the ApacheBench
    command, you can type `docker logs 01basic_load`; you should see something like
    the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *c*退出`docker stats`；要查看ApacheBench命令的结果，可以输入`docker logs 01basic_load`；你应该会看到类似以下截图的内容：
- en: '![Running Docker stats](../images/00011.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![运行Docker stats](../images/00011.jpeg)'
- en: You shouldn't worry if you see any failures like in the preceding output. This
    exercise was purely to demonstrate how to view the statistics of the running containers
    and not to tune a web server to handle the amount of traffic we sent to it using
    ApacheBench.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似于前面输出中的任何失败，不用担心。这个练习纯粹是为了演示如何查看正在运行的容器的统计信息，而不是调整Web服务器来处理我们使用ApacheBench发送的流量量。
- en: 'To remove the containers that we launched, run the following commands:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除我们启动的容器，请运行以下命令：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To check whether everything has been removed successfully, run `docker ps -a`
    and you should not be able to see any running or exited containers that have `01basic_`
    in their names.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否一切都已成功删除，请运行`docker ps -a`，你不应该看到任何带有`01basic_`的正在运行或已退出的容器。
- en: What just happened?
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: While running the ApacheBench test, you may have noticed that the CPU utilization
    on the container running NGINX and PHP was high; in the example in the previous
    section, it was using 139.62 percent of the available CPU resource.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行ApacheBench测试时，您可能已经注意到运行NGINX和PHP的容器的CPU利用率很高；在前一节的示例中，它使用了可用CPU资源的139.62%。
- en: As we did not attach any resource limits to the containers we launched, it was
    easy for our test to use all of the available resources on the host **Virtual
    Machine** (**VM**). If this VM was being used by several users, all running their
    own containers, they may have started to notice that their applications had started
    to slow down or, even worse, the applications had started showing errors.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有为启动的容器附加任何资源限制，因此我们的测试很容易使用主机虚拟机（VM）上的所有可用资源。如果这个VM被多个用户使用，他们都在运行自己的容器，他们可能已经开始注意到他们的应用程序开始变慢，甚至更糟糕的是，应用程序开始显示错误。
- en: If you ever find yourself in this situation, you can use `docker stats` to help
    track down the culprit.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现自己处于这种情况，您可以使用`docker stats`来帮助追踪罪魁祸首。
- en: 'Running `docker stats $(docker ps -q)` will stream the statistics for all the
    currently running containers:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`docker stats $(docker ps -q)`将为所有当前运行的容器流式传输统计信息：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you may have noticed, this displays the container ID rather than the name;
    this information should, however, be enough to spot the resource hog so that you
    can quickly stop it:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，这显示的是容器ID而不是名称；然而，这些信息应该足够让您快速停止资源占用者：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once stopped, you can then get the name of the rogue container by running the
    following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 停止后，您可以通过运行以下命令获取流氓容器的名称：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Alternatively, for more detailed information, you can run `docker inspect 56b459ae9092`,
    which will give you all the information you need on the container.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，为了获得更详细的信息，您可以运行`docker inspect 56b459ae9092`，这将为您提供有关容器的所有所需信息。
- en: What about processes?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程怎么样？
- en: One of the great things about Docker is that it isn't really virtualization;
    as mentioned in the previous chapter, it is a great way of isolating processes
    rather than running an entire operating system.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的一个很棒的特点是它并不是真正的虚拟化；正如前一章所提到的，它是一种很好的隔离进程而不是运行整个操作系统的方法。
- en: 'This can get confusing when running tools such as `top` or `ps`. To get an
    idea just how confusing this can get, lets launch several containers using `docker-compose`
    and see for ourselves:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行诸如`top`或`ps`之类的工具时，这可能会变得令人困惑。为了了解这种情况有多令人困惑，让我们使用`docker-compose`启动几个容器并自己看看：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we have five web servers that have all been launched from the same image
    using the same configuration. One of the first things I do when logging into a
    server to troubleshoot a problem is run `ps -aux`; this will show all the running
    processes. As you can see, when running the command, there are a lot processes
    listed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有五个Web服务器，它们都是使用相同的镜像和相同的配置启动的。当我登录服务器进行故障排除时，我做的第一件事就是运行`ps -aux`；这将显示所有正在运行的进程。正如您所看到的，运行该命令时，列出了许多进程。
- en: 'Even just trying to look at the processes for NGINX is confusing, as there
    is nothing to differentiate the processes from one container to another, as shown
    in the following output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至只是尝试查看NGINX的进程也是令人困惑的，因为没有什么可以区分一个容器和另一个容器的进程，如下面的输出所示：
- en: '![What about processes?](../images/00012.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![进程怎么样？](../images/00012.jpeg)'
- en: So, how can you know which container owns which processes?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您如何知道哪个容器拥有哪些进程呢？
- en: Docker top
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker top
- en: 'This command lists all the processes that are running within a container; think
    of it as a way of filtering the output of the `ps aux` command we ran on the host
    machine:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出了容器内运行的所有进程；可以将其视为对我们在主机上运行的`ps aux`命令输出进行过滤的一种方法：
- en: '![Docker top](../images/00013.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Docker top](../images/00013.jpeg)'
- en: 'As `docker top` is an implementation of the standard `ps` command, any flags
    you would normally pass to `ps` should work as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`docker top`是标准`ps`命令的实现，因此您通常会传递给`ps`的任何标志都应该按照以下方式工作：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Docker exec
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker exec
- en: 'Another way to view what is going on within a container is to enter it. To
    enable you to do this, Docker introduced the `docker exec` command. This allows
    you to spawn an additional process within an already running container and then
    attach to the process; so, if we wanted to look at what is currently running on
    `02multiple_web_3`, we should use the following command spawn a bash shell within
    an already running container:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 查看容器内部发生的情况的另一种方法是进入容器。为了让您能够做到这一点，Docker引入了`docker exec`命令。这允许您在已经运行的容器内生成一个额外的进程，然后附加到该进程；因此，如果我们想要查看`02multiple_web_3`上当前正在运行的内容，我们应该使用以下命令在已经运行的容器内生成一个bash
    shell：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once you have an active shell on the container, you will notice that your prompt
    has changed to the container's ID. Your session is now isolated to the container's
    environment, meaning that you will only be able to interact with the processes
    belonging to the container you entered.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在容器上有一个活动的shell，您会注意到您的提示符已经改变为容器的ID。您的会话现在被隔离到容器的环境中，这意味着您只能与进程进行交互，这些进程属于您进入的容器。
- en: 'From here, you can run the `ps aux` or `top` command as you would do on the
    host machine, and only see the processes associated with the container you are
    interested in:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以像在主机机器上一样运行`ps aux`或`top`命令，并且只能看到与您感兴趣的容器相关的进程：
- en: '![Docker exec](../images/00014.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Docker exec](../images/00014.jpeg)'
- en: To leave the container, type in `exit`, you should see your prompt change back
    in your host machine.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要离开容器，请输入`exit`，您应该看到您的提示符在主机机器上恢复。
- en: Finally, you can stop and remove the containers by running `docker-compose stop`
    and `docker-compose kill`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过运行`docker-compose stop`和`docker-compose kill`来停止和删除容器。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how we can get real-time statistics on our running containers
    and how we can use commands that are familiar to us, to get information on the
    processes that are launched as part of each container.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何实时获取正在运行的容器的统计信息，以及如何使用我们熟悉的命令来获取有关作为每个容器一部分启动的进程的信息。
- en: On the face of it, `docker stats` seems like a really basic piece of functionality
    that isn't really anything more than a tool to help you identify which container
    is using all the resources while a problem is occurring. However, the Docker command
    is actually pulling the information from a quite powerful API.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，`docker stats`似乎只是一个非常基本的功能，不过在发生问题时，它实际上是一个帮助您识别哪个容器正在使用所有资源的工具。然而，Docker命令实际上是从一个非常强大的API中提取信息。
- en: This API forms the basis for a lot of the monitoring tools we will be looking
    at in the next few chapters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个API是我们接下来几章将要看到的许多监控工具的基础。
