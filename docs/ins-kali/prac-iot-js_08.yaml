- en: Raspberry Pi Image Streaming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树莓派图像流式传输
- en: 'In this chapter, we are going to look at live video streaming with Raspberry
    Pi 3 and Raspberry Pi camera. We are going to stream live video from Raspberry
    Pi 3 to our web browser and access this feed from anywhere in the world. As a
    next step, we are going to add a motion detector to the current setup and if the
    motion is detected, we then start streaming the video. In this chapter, we will
    go through the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用树莓派3和树莓派摄像头进行实时视频流。我们将从树莓派3实时流式传输视频到我们的网络浏览器，并可以在世界各地访问此视频。作为下一步，我们将向当前设置添加运动检测器，如果检测到运动，我们将开始流式传输视频。在本章中，我们将介绍以下主题：
- en: Understanding MJPEGs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解MJPEG
- en: Setting up Raspberry Pi with Raspberry Pi camera
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用树莓派和树莓派摄像头进行设置
- en: Stream the images from the camera to the dashboard in real time
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时将摄像头图像流式传输到仪表板
- en: Capturing video in motion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕捉运动中的视频
- en: MJPEG
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MJPEG
- en: Quoting from Wikipedia, [https://en.wikipedia.org/wiki/Motion_JPEG](https://en.wikipedia.org/wiki/Motion_JPEG).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 引用维基百科，[https://en.wikipedia.org/wiki/Motion_JPEG](https://en.wikipedia.org/wiki/Motion_JPEG)。
- en: In multimedia, Motion JPEG (M-JPEG or MJPEG) is a video compression format in
    which each video frame or interlaced field of a digital video sequence is compressed
    separately as a JPEG image. Originally developed for multimedia PC applications,
    M-JPEG is now used by video-capture devices such as digital cameras, IP cameras,
    and webcams, as well as by non-linear video editing systems. It is natively supported
    by the QuickTime Player, the PlayStation console, and web browsers such as Safari,
    Google Chrome, Mozilla Firefox and Microsoft Edge.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在多媒体中，动态JPEG（M-JPEG或MJPEG）是一种视频压缩格式，其中数字视频序列的每个视频帧或隔行场都单独压缩为JPEG图像。最初为多媒体PC应用程序开发，M-JPEG现在被视频捕获设备（如数码相机、IP摄像机和网络摄像头）以及非线性视频编辑系统所使用。它受QuickTime
    Player、PlayStation游戏机和Safari、Google Chrome、Mozilla Firefox和Microsoft Edge等网络浏览器的本地支持。
- en: As described previously, we are going to capture a series of images, every `100ms`
    apart and stream the image binary data on a topic to the API engine, where we
    override an existing image with the latest image.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将捕获一系列图像，每隔`100ms`并在一个主题上流式传输图像二进制数据到API引擎，我们将用最新的图像覆盖现有图像。
- en: This streaming system is very simple and old-fashioned. There are no rewinds
    or pauses while streaming. We can always see the last frame.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个流媒体系统非常简单和老式。在流媒体过程中没有倒带或暂停。我们总是能看到最后一帧。
- en: Now that we have a high level of understanding of what we are going to achieve,
    let us get started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对我们要实现的目标有了很高的理解水平，让我们开始吧。
- en: Setting up Raspberry Pi
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置树莓派
- en: 'Raspberry Pi 3 set up with Raspberry Pi camera is quite simple. You can purchase
    a Raspberry Pi 3 camera ([https://www.raspberrypi.org/products/camera-module-v2/](https://www.raspberrypi.org/products/camera-module-v2/))
    from any of the popular online vendors. Then you can follow this video to setup:
    camera board setup: [https://www.youtube.com/watch?v=GImeVqHQzsE](https://www.youtube.com/watch?v=GImeVqHQzsE).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用树莓派3设置树莓派摄像头非常简单。您可以从任何知名在线供应商购买树莓派3摄像头([https://www.raspberrypi.org/products/camera-module-v2/](https://www.raspberrypi.org/products/camera-module-v2/))。然后您可以按照此视频进行设置：摄像头板设置：[https://www.youtube.com/watch?v=GImeVqHQzsE](https://www.youtube.com/watch?v=GImeVqHQzsE)。
- en: 'My camera setup is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我的摄像头设置如下：
- en: '![](../images/00108.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00108.jpeg)'
- en: I have used a stand and hoisted my camera on top of it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一个支架，将我的摄像头吊在上面。
- en: Setting up the camera
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置摄像头
- en: 'Now that we have the camera connected and powered by the Raspberry Pi 3, we
    will set up the camera, as shown in the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经连接了摄像头并由树莓派3供电，我们将按照以下步骤设置摄像头：
- en: 'From inside the Raspberry Pi, launch a new terminal and run:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从树莓派内部，启动一个新的终端并运行：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will launch the Raspberry Pi configuration screen. Select Interfacing
    options:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动树莓派配置屏幕。选择接口选项：
- en: '![](../images/00109.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00109.jpeg)'
- en: 'On the next screen, select P1 Camera and enable it:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择P1摄像头并启用它：
- en: '![](../images/00110.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00110.jpeg)'
- en: This will trigger a reboot, complete the reboot and log back into the Pi.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将触发重新启动，完成重新启动并重新登录到树莓派。
- en: Once your camera is set up, we will test it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的摄像头设置好了，我们将对其进行测试。
- en: Testing the camera
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试摄像头
- en: 'Now that the camera is set up and powered, let''s test it. Open a new terminal
    and `cd` on the desktop. Then run the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在摄像头已经设置并通电，让我们来测试一下。打开一个新的终端并在桌面上`cd`。然后运行以下命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will take a screenshot in the present working directory, `Desktop`. The
    screen will look something like the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前工作目录`Desktop`中拍摄屏幕截图。屏幕看起来会像下面这样：
- en: '![](../images/00111.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00111.jpeg)'
- en: As you can see, `test.jpg` is created on the `Desktop` and when I double-click
    it shows a picture of the glass wall of my office.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`test.jpg`被创建在`Desktop`上，当我双击它时，显示的是我办公室玻璃墙的照片。
- en: Developing the logic
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发逻辑
- en: Now that we are able to test the camera, we will integrate this setup with our
    IoT platform. We are going to stream these images `100ms` apart continuously to
    our API engine and then through web sockets update the UI on the web.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够测试摄像头，我们将把这个设置与我们的物联网平台集成。我们将不断地以`100ms`的间隔流式传输这些图像到我们的API引擎，然后通过网络套接字更新网络上的用户界面。
- en: 'To get started, we will make a copy of `chapter4` and dump it into a folder
    named `chapter8`. Inside the `chapter8` folder, open `pi/index.js` and update
    it as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将复制`chapter4`并将其转储到名为`chapter8`的文件夹中。在`chapter8`文件夹中，打开`pi/index.js`并进行以下更新：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we can see from the preceding code, we are waiting for the MQTT connection
    to be completed, once the connection is completed, we call `startStreaming()`
    to start streaming. Inside `startStreaming()`, we are calling `raspistill.timelapse()`
    passing in `100ms`, as time difference between each click and `0` indicates that
    the capture should continue perpetually.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从前面的代码中所看到的，我们正在等待MQTT连接完成，一旦连接完成，我们调用`startStreaming()`开始流式传输。在`startStreaming()`内部，我们调用`raspistill.timelapse()`传入`100ms`，作为每次点击之间的时间差，`0`表示捕获应该持续不断地进行。
- en: Once the image is captured, we construct the `data2Send` object with a random
    ID, the image buffer, and the device `macAddress`. Before publishing to the image
    topic, we stringify the `data2Send` object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图像被捕获，我们就用一个随机ID、图像缓冲区和设备的`macAddress`构造`data2Send`对象。在发布到图像主题之前，我们将`data2Send`对象转换为字符串。
- en: 'Now, move this file to Raspberry Pi''s `pi-client` folder, present on the desktop.
    And from inside Raspberry Pi''s, `pi-client` folder, run:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将这个文件移动到树莓派的`pi-client`文件夹中，位于桌面上。然后从树莓派的`pi-client`文件夹内运行：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These two commands will install the `node-raspistill` and other node modules
    present inside the `package.json` file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令将安装`node-raspistill`和`package.json`文件内的其他节点模块。
- en: With this, we are done with the setup of the Raspberry Pi and the camera. In
    the next section, we will update the API engine to accept the live streaming of
    images.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们完成了树莓派和相机的设置。在下一节中，我们将更新API引擎以接受图像的实时流。
- en: Updating the API engine
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新API引擎
- en: Now that we are done with the Raspberry Pi setup, we will update the API engine
    to accept the incoming data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成了树莓派的设置，我们将更新API引擎以接受传入的数据。
- en: 'The first thing we are going to do is update `api-engine/server/mqtt/index.js`
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是按照以下方式更新`api-engine/server/mqtt/index.js`：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we can see from the preceding code, inside the message event of MQTT, we
    have added a new topic named `image`. Inside this topic, we extract the string
    format of the image buffer and convert it back to the image binary data. Then
    using the `fs` module, we overwrite the same image again and again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从前面的代码中所看到的，在MQTT的消息事件中，我们添加了一个名为`image`的新主题。在这个主题内，我们提取了图像缓冲区的字符串格式，并将其转换回图像二进制数据。然后使用`fs`模块，我们一遍又一遍地覆盖相同的图像。
- en: We also keep saving the data simultaneously to MongoDB and this will trigger
    a socket emit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们同时将数据保存到MongoDB，并触发一个socket emit。
- en: 'As the next step, we need to create a folder named `stream` inside the `mqtt`
    folder. And inside this folder, drop an image present here: `http://www.iconarchive.com/show/small-n-flat-icons-by-paomedia/sign-ban-icon.html.`
    This image will be shown if there is no feed available for a camera.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一步，我们需要在`mqtt`文件夹内创建一个名为`stream`的文件夹。在这个文件夹内，放入一个图片，链接在这里：`http://www.iconarchive.com/show/small-n-flat-icons-by-paomedia/sign-ban-icon.html.`
    如果相机没有可用的视频流，将显示这张图片。
- en: All the images will be saved inside the `stream` folder and the same image will
    be updated for the same device, as mentioned earlier, there will not be any rewinds
    or replays.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的图像都将保存在`stream`文件夹内，对于相同的设备将更新相同的图像，正如前面提到的，不会有任何倒带或重播。
- en: 'Now, the images get saved inside the `stream` folder and we need to expose
    an end point to send this image to the request clients. For that, open `api-engine/server/routes.js`
    and add the following to the `module.exports` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，图片被保存在`stream`文件夹内，我们需要暴露一个端点来将这张图片发送给请求的客户端。为此，打开`api-engine/server/routes.js`并将以下内容添加到`module.exports`函数中：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will take care of dispatching the image to the client (web, desktop, and
    mobile).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将负责将图像分发给客户端（Web、桌面和移动端）。
- en: With this, we are done with setting up the API engine.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就完成了API引擎的设置。
- en: 'Save all the files and start the broker, API engine, and the `pi-client`. If
    everything is successfully set up, we should see the data being posted from the
    Raspberry Pi:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并启动代理、API引擎和`pi-client`。如果一切顺利设置，我们应该能看到来自树莓派的数据被发布。
- en: '![](../images/00112.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00112.jpeg)'
- en: 'And the same data appearing in the API engine:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在API引擎中出现的相同数据：
- en: '![](../images/00113.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00113.jpeg)'
- en: At this point, the images are being captured and sent to the API engine over
    MQTTs. The next step is to view these images in real time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，图像正在被捕获并通过MQTT发送到API引擎。下一步是实时查看这些图像。
- en: Updating the web app
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Web应用程序
- en: 'Now that the data is streaming to the API engine, we will show it on the web
    app. Open `web-app/src/app/device/device.component.html` and update it as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据正在流向API引擎，我们将在Web应用程序上显示它。打开`web-app/src/app/device/device.component.html`并按照以下方式更新它：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we are displaying the image that we have created in real time. Next,
    update `web-app/src/app/device/device.component.ts` as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们实时显示了我们创建的图像。接下来，按照以下方式更新`web-app/src/app/device/device.component.ts`：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here we are constructing the image URL and pointing it to the API engine. Save
    all the files and launch the web app by running the following command from inside
    the `web-app` folder:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在构建图像URL并将其指向API引擎。保存所有文件，并通过在`web-app`文件夹内运行以下命令来启动Web应用程序：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If everything works as expected, upon navigating to the VIEW DEVICE page, we
    should see the video stream very slowly. I am monitoring a cup placed in front
    of my chair as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按预期工作，当导航到“查看设备”页面时，我们应该会看到视频流非常缓慢地显示。我正在监视放在椅子前面的杯子，如下所示：
- en: '![](../images/00114.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00114.jpeg)'
- en: Updating the desktop app
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新桌面应用程序
- en: Now that the web app is done, we are going to build the same and deploy it inside
    our desktop app.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Web应用程序已经完成，我们将构建相同的应用程序并将其部署到我们的桌面应用程序内。
- en: 'To get started, head back to the terminal/prompt of the `web-app` folder and
    run the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请返回到`web-app`文件夹的终端/提示符，并运行以下命令：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will create a new folder inside the `web-app` folder named `dist`. The
    contents of the `dist` folder should be along the lines of:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`web-app`文件夹内创建一个名为`dist`的新文件夹。`dist`文件夹的内容应该如下所示：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All the code we have written is finally bundled into the preceding files. We
    will grab all the files (not the `dist` folder) present inside the `dist` folder
    and then paste it inside the `desktop-app/app` folder. The final structure of
    the `desktop-app` after the preceding changes will be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的所有代码最终都打包到了上述文件中。我们将获取`dist`文件夹中的所有文件（不包括`dist`文件夹），然后将其粘贴到`desktop-app/app`文件夹中。在进行上述更改后，`desktop-app`的最终结构将如下所示：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To test drive, run the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 进行测试，运行以下命令：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then when we navigate to the VIEW DEVICE page, we should see:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当我们导航到VIEW DEVICE页面时，我们应该看到：
- en: '![](../images/00115.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00115.jpeg)'
- en: With this we are done with the development of the desktop app. In the next section,
    we will update the mobile app.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就完成了桌面应用程序的开发。在下一节中，我们将更新移动应用程序。
- en: Updating the mobile app
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新移动应用程序
- en: In the last section, we have updated the desktop app. In this section, we are
    going to update the mobile app template to stream images.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经更新了桌面应用程序。在本节中，我们将更新移动应用程序模板以流式传输图像。
- en: 'First we are going to update the view-device template. Update `mobile-app/src/pages/view-device/view-device.html`
    as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将更新view-device模板。按照以下方式更新`mobile-app/src/pages/view-device/view-device.html`：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The logic for displaying the image stream on a mobile is the same as web/desktop.
    Next, update `mobile-app/src/pages/view-device/view-device.ts` as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动端显示图像流的逻辑与Web/桌面端相同。接下来，按照以下方式更新`mobile-app/src/pages/view-device/view-device.ts`：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Save all the files and run the mobile app either by using:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并通过以下方式运行移动应用程序：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or by using the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用以下代码：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And we should see the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该看到以下内容：
- en: '![](../images/00116.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00116.jpeg)'
- en: With this we are done with displaying the data from the camera on the mobile
    app.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就完成了在移动应用程序上显示摄像头数据。
- en: Motion-based video capture
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于运动的视频捕获
- en: As we could see that the stream was kind of choppy, slow, and not real time,
    another probable solution is to put a motion detector along with our Raspberry
    Pi and camera. Then when a motion is identified, we start taking a video for 10
    seconds. Then we email this video to the user as an attachment.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，流式传输有些不连贯，缓慢，并非实时，另一个可能的解决方案是在树莓派和摄像头上放置一个运动检测器。然后当检测到运动时，我们开始录制10秒的视频。然后将此视频作为附件通过电子邮件发送给用户。
- en: Now, we will start updating our existing code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始更新我们现有的代码。
- en: Updating the Raspberry Pi
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新树莓派
- en: 'To get started, we will update our Raspberry Pi setup to accommodate an HC-SR501
    PIR sensor. You can find a PIR sensor here: [https://www.amazon.com/Motion-HC-SR501-Infrared-Arduino-Raspberry/dp/B00M1H7KBW/ref=sr_1_4_a_it](https://www.amazon.com/Motion-HC-SR501-Infrared-Arduino-Raspberry/dp/B00M1H7KBW/ref=sr_1_4_a_it).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将更新我们的树莓派设置以适应HC-SR501 PIR传感器。您可以在此处找到PIR传感器：[https://www.amazon.com/Motion-HC-SR501-Infrared-Arduino-Raspberry/dp/B00M1H7KBW/ref=sr_1_4_a_it](https://www.amazon.com/Motion-HC-SR501-Infrared-Arduino-Raspberry/dp/B00M1H7KBW/ref=sr_1_4_a_it)。
- en: We will connect the PIR sensor to the Raspberry Pi on pin 17 and the camera
    to the camera slot as we have seen earlier.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把PIR传感器连接到树莓派的17号引脚，将摄像头连接到摄像头插槽，就像我们之前看到的那样。
- en: 'Once the connections are made as previously discussed, update `pi/index.js`
    as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接如前所述，按照以下方式更新`pi/index.js`：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As we can see from the preceding code, we have marked GPIO 17 as an input pin
    and assigned it to a variable named `pir`. Next, using `pir.watch()`, we keep
    looking for a change in value on the motion detector. If the motion detector has
    detected some change, we will check if the value is `1`, which indicates that
    a motion is triggered. Then using `raspivid` we record a 5 second video and email
    it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中可以看出，我们已将GPIO 17标记为输入引脚，并将其分配给名为`pir`的变量。接下来，使用`pir.watch()`，我们不断查看运动检测器的值是否发生变化。如果运动检测器检测到某种变化，我们将检查值是否为`1`，这表示触发了运动。然后使用`raspivid`我们录制一个5秒的视频并通过电子邮件发送。
- en: 'For the logic needed to send an email from Raspberry Pi 3, create a new file
    named `mailer.js` at the root of the `pi-client` folder and update it as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从树莓派3发送电子邮件所需的逻辑，创建一个名为`mailer.js`的新文件，放在`pi-client`文件夹的根目录，并按以下方式更新它：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We are using nodemailer to send an email. Update the credentials as applicable.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用nodemailer发送电子邮件。根据需要更新凭据。
- en: 'Next, run the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the next section, we are going to test this setup.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将测试这个设置。
- en: Testing the code
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: 'Now that we are done with the setup, let us test it. Power Raspberry Pi, upload
    the code if not done already, and run the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成设置，让我们来测试一下。给树莓派供电，如果尚未上传代码，则上传代码，并运行以下命令：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once the code is running, trigger a motion. This will start the camera recording
    and save the video for five seconds. Then this video will be emailed to the user.
    The following is a list of the output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 代码运行后，触发一次运动。这将启动摄像头录制并保存5秒的视频。然后将此视频通过电子邮件发送给用户。以下是输出的列表：
- en: '![](../images/00117.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00117.jpeg)'
- en: 'The received email would be as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 收到的电子邮件将如下所示：
- en: '![](../images/00118.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00118.jpeg)'
- en: This is an alternative of using Raspberry Pi 3 for surveillance.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用树莓派3进行监视的另一种方法。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen two methods of surveillance using Raspberry Pi.
    The first approach is where we have streamed images to the API engine and then
    visualized the same on the mobile web and desktop applications using MJPEG. The
    second approach is to detect a motion and then start recording a video. Then email
    this video as an attachment. The two approaches can be combined together as well
    and the MJPEG streaming can be started if a motion is detected in approach one.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到了使用树莓派进行监视的两种方法。第一种方法是我们将图像流式传输到API引擎，然后在移动Web和桌面应用程序上使用MJPEG进行可视化。第二种方法是检测运动，然后开始录制视频。然后将此视频作为附件通过电子邮件发送。这两种方法也可以结合在一起，如果在第一种方法中检测到运动，则可以开始MJPEG流式传输。
- en: In [Chapter 9](part0143.html#48C0E0-ce91715363d04669bca1c1545beb57ee), *Smart
    Surveillance*, we are going to take this to the next level, we are going to add
    face recognition on top of our captures and perform face recognition (not face
    detection) using the AWS Rekognition platform.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](part0143.html#48C0E0-ce91715363d04669bca1c1545beb57ee)中，*智能监控*，我们将把这个提升到下一个级别，我们将在我们的捕获图像上添加人脸识别，并使用AWS
    Rekognition平台进行人脸识别（而不是人脸检测）。
