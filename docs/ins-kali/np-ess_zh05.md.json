["```py\nIn [1]: import numpy as np \nIn [2]: ndArray = np.arange(9).reshape(3,3) \nIn [3]: x = np.matrix(ndArray) \nIn [4]: y = np.mat(np.identity(3)) \nIn [5]: x \nOut[5]: \nmatrix([[0, 1, 2], \n        [3, 4, 5], \n        [6, 7, 8]]) \nIn [6]: y \nOut[6]: \nmatrix([[1., 0., 0.], \n        [0., 1., 0.], \n        [0., 0., 1.]]) \n\n```", "```py\nIn [7]: x + y \nOut[7]: \nmatrix([[ 1.,  1.,  2.], \n        [ 3.,  5.,  5.], \n        [ 6.,  7.,  9.]]) \nIn [8]: x * x \nOut[8]: \nmatrix([[ 15,  18,  21], \n        [ 42,  54,  66], \n        [ 69,  90, 111]]) \nIn [9]: np.dot(ndArray, ndArray) \nOut[9]: \narray([[ 15,  18,  21], \n       [ 42,  54,  66], \n       [ 69,  90, 111]]) \nIn [10]: x**3 \nOut[10]: \nmatrix([[ 180,  234,  288], \n        [ 558,  720,  882], \n        [ 936, 1206, 1476]])\nIn [11]: z = np.matrix(np.random.random_integers(1, 50, 9).reshape(3,3)) \nIn [12]: z \nOut[12]: \nmatrix([[32, 21, 28], \n        [ 2, 24, 22], \n        [32, 20, 22]]) \nIn [13]: z.I \nOut[13]: \nmatrix( [[-0.0237 -0.0264  0.0566] \n         [-0.178   0.0518  0.1748] \n         [ 0.1963 -0.0086 -0.1958]]) \n\nIn [14]: z.H \nOut[14]: \nmatrix([[32  2 32] \n        [21 24 20] \n        [28 22 22]]) \n\n```", "```py\nA-1A x = A-1 b \nI x = A-1 b \nx = A-1 b \n\n```", "```py\nIn [15]: A = np.mat('3 1 4; 1 5 9; 2 6 5') \nIn [16]: b = np.mat([[1],[2],[3]]) \nIn [17]: x = A.I * b \nIn [18]: x \nOut[18]: \nmatrix([[ 0.2667], \n        [ 0.4667], \n        [-0.0667]]) \nIn [21]: np.allclose(A * x, b) \nOut[21]: True \n\n```", "```py\nIn [20]: x = np.arange(25000000).reshape(5000,5000) \n\nIn [21]: y = np.mat(x) \n\nIn [22]: %timeit x.T \n10000000 loops, best of 3: 176 ns per loop \n\nIn [23]: %timeit y.T \n1000000 loops, best of 3: 1.36 \u00b5s per loop \n\n```", "```py\nIn [24]: A.A \nOut[24]: \narray([[3, 1, 4], \n       [1, 5, 9], \n       [2, 6, 5]]) \nIn [25]: A.A1 \nOut[25]: array([3, 1, 4, 1, 5, 9, 2, 6, 5]) \n\n```", "```py\nIn [26]: x = np.array([[1, 2], [3, 4]]) \nIn [27]: y = np.array([[10, 20], [30, 40]]) \nIn [28]: np.dot(x, y) \nOut[28]: \narray([[ 70, 100], \n       [150, 220]]) \n\n```", "```py\nIn [29]: np.vdot(x, y) \nOut[29]: 300 \n\n```", "```py\nIn [100]: np.outer(x,y) \nOut[100]: \narray([[ 10,  20,  30,  40], \n       [ 20,  40,  60,  80], \n       [ 30,  60,  90, 120], \n       [ 40,  80, 120, 160]]) \n\n```", "```py\nIn [31]: a = np.array([1,0,0]) \nIn [32]: b = np.array([0,1,0]) \nIn [33]: np.cross(a,b) \nOut[33]: array([0, 0, 1]) \nIn [34]: np.cross(b,a) \nOut[34]: array([ 0,  0, -1]) \n\n```", "```py\nIn [35]: x = np.array([[4,8],[7,9]]) \nIn [36]: np.linalg.det(x) \nOut[36]: -20.000000000000007 \n\n```", "```py\nIn [37]: np.linalg.inv(x) \nOut[37]: \narray([[-0.45,  0.4 ], \n       [ 0.35, -0.2 ]]) \nIn [38]: np.mat(x).I \nOut[38]: \nmatrix([[-0.45,  0.4 ], \n        [ 0.35, -0.2 ]]) \n\n```", "```py\nIn [39]: x = np.linalg.solve(A,b) \nIn [40]: x \nOut[40]: \nmatrix([[ 0.2667], \n        [ 0.4667], \n        [-0.0667]]) \n\n```", "```py\nIn [41]: x = np.random.randint(0, 10, 9).reshape(3,3) \nIn [42]: x \nOut[42]: \narray([[ 1,  5,  0] \n       [ 7,  4,  0] \n       [ 2,  9,  8]]) \nIn [42]: w, v = np.linalg.eig(x) \nIn [43]: w \nOut[43]: array([ 8.,  8.6033,  -3.6033]) \nIn [44]: v \nOut[44]: \narray([[ 0.,  0.0384,  0.6834] \n       [ 0.,  0.0583, -0.6292] \n       [ 1.,  0.9976,  0.3702]] \n) \n\n```", "```py\nIn [45]: y = np.array([[1, 2j],[-3j, 4]]) \nIn [46]: np.linalg.eig(y) \nOut[46]: \n(array([ -0.3723+0.j,  5.3723+0.j]), \n array([[0.8246+0.j    ,  0.0000+0.416j     ], \n        [-0.0000+0.5658j,  0.9094+0.j    ]])) \n\n```", "```py\nIn [47]: z = np.array([[1 + 1e-10, -1e-10],[1e-10, 1 - 1e-10]]) \nIn [48]: np.linalg.eig(z) \nOut[48]: \n(array([ 1.,  1.]), array([[0.70710678,  0.707106], \n        [0.70710678,  0.70710757]])) \n\n```", "```py\nIn [51]: np.set_printoptions(precision = 4) \nIn [52]: A = np.array([3,1,4,1,5,9,2,6,5]).reshape(3,3) \nIn [53]: u, sigma, vh = np.linalg.svd(A) \nIn [54]: u \nOut[54]: \narray([[-0.3246,  0.799 ,  0.5062], \n       [-0.7531,  0.1055, -0.6494], \n       [-0.5723, -0.592 ,  0.5675]]) \nIn [55]: vh \nOut[55]: \narray([[-0.2114, -0.5539, -0.8053], \n       [ 0.4633, -0.7822,  0.4164], \n       [ 0.8606,  0.2851, -0.422 ]]) \nIn [56]: sigma \nOut[56]: array([ 13.5824,   2.8455,   2.3287]) \n\n```", "```py\nIn [57]: diag_sigma = np.diag(sigma) \nIn [58]: diag_sigma \nOut[58]: \narray([[ 13.5824,   0\\.    ,   0\\.    ], \n       [  0\\.    ,   2.8455,   0\\.    ], \n       [  0\\.    ,   0\\.    ,   2.3287]]) \nIn [59]: Av = u.dot(diag_sigma).dot(vh) \nIn [60]: Av \nOut[60]: \narray([[ 3.,  1.,  4.], \n       [ 1.,  5.,  9.], \n       [ 2.,  6.,  5.]]) \nIn [61]: np.allclose(A, Av) \nOut[61]: True \n\n```", "```py\nIn [62]: b = np.array([1,2,3]).reshape(3,1) \nIn [63]: q, r = np.linalg.qr(A) \nIn [64]: x = np.dot(np.linalg.inv(r), np.dot(q.T, b)) \nIn [65]: x \nOut[65]: \narray([[ 0.2667], \n       [ 0.4667], \n       [-0.0667]]) \n\n```", "```py\nIn [66]: root = np.array([1,2,3,4]) \nIn [67]: np.poly(root) \nOut[67]: array([  1, -10,  35, -50,  24]) \n\n```", "```py\nIn [68]: np.roots([1,-10,35,-50,24]) \nOut[68]: array([ 4.,  3.,  2.,  1.]) \n\n```", "```py\nIn [69]: np.polyval([1,-10,35,-50,24], 5) \nOut[69]: 24 \n\n```", "```py\nIn [70]: coef = np.array([1,-10,35,-50,24]) \nIn [71]: integral = np.polyint(coef) \nIn [72]: integral \nOut[72]: array([  0.2 ,  -2.5 ,  11.6667, -25\\.  ,  24\\.  ,  0\\.  ]) \nIn [73]: np.polyder(integral) == coef \nOut[73]: array([ True,  True,  True,  True,  True], dtype=bool) \nIn [74]: np.polyder(coef, 5) \nOut[74]: array([], dtype=int32) \n\n```", "```py\nIn [75]: from numpy.polynomial import polynomial \nIn [76]: p = polynomial.Polynomial(coef) \nIn [77]: p \nOut[77]: Polynomial([  1., -10.,  35., -50.,  24.], [-1,  1], [-1,  1]) \n\n```", "```py\nIn [78]: p.coef \nOut[78]: array([  1., -10.,  35., -50.,  24.]) \nIn [79]: p.roots() \nOut[79]: array([ 0.25  ,  0.3333,  0.5   ,  1\\.    ]) \n\n```", "```py\nIn [80]: polynomial.polyval(p, 5) \nOut[80]: Polynomial([ 5.], [-1.,  1.], [-1.,  1.]) \n\n```", "```py\nIn [81]: p.integ() \nOut[81]: Polynomial([  0\\.    ,   1\\.    ,  -5\\.    ,  11.6667, -12.5   ,   4.8   ], [-1.,  1.], [-1.,  1.]) \nIn [82]: p.integ().deriv() == p \nOut[82]: True \n\n```", "```py\nIn [83]: groups = [7, 24, 21, 19, 17, 12] \n\nIn [84]: age = np.concatenate([np.random.randint((ind + 1)*10, (ind + 2)*10, group) for ind, group in enumerate(groups)]) \n\nIn [85]: age \nOut[85]: \narray( \n[11, 15, 12, 17, 17, 18, 12, 26, 29, 24, 28, 25, 27, 25, 26, 24, 23,  27, 26, 24, 27, 20, 28, 20, 22, 21, 23, 25, 27, 24, 25, 35, 39, 33, 35, 30, 32, 32, 36, 38, 31, 35, 38, 31, 37, 36, 39, 30, 36, 33, 36, 37, 45, 41, 44, 48, 45, 40, 44, 42, 47, 46, 47, 42, 42, 42, 44, 40, 40, 47, 47, 57, 56, 53, 53, 57, 54, 55, 53, 52, 54, 57, 53, 58, 58, 54, 57, 55, 64, 67, 60, 63, 68, 65, 66, 63, 67, 64, 68, 66] \n) \nIn [86]: scores = [5.5, 5.7, 5.4, 4.9, 4.6, 4.4] \nIn [87]: sim_scores = np.concatenate([.01 * np.random.rand(group) + scores[ind] for ind, group in enumerate(groups)] ) \n\nIn [88]: sim_scores \nOut[88]: \narray([ \n5.5089,  5.5015,  5.5024,  5.5   ,  5.5033,  5.5019,  5.5012, \n5.7068,  5.703 ,  5.702 ,  5.7002,  5.7084,  5.7004,  5.7036, \n5.7055,  5.7024,  5.7099,  5.7009,  5.7013,  5.7093,  5.7076, \n5.7029,  5.702 ,  5.7067,  5.7007,  5.7004,  5.7   ,  5.7017, \n5.702 ,  5.7031,  5.7087,  5.4079,  5.4082,  5.4083,  5.4025, \n5.4008,  5.4069,  5.402 ,  5.4071,  5.4059,  5.4037,  5.4004, \n5.4024,  5.4058,  5.403 ,  5.4041,  5.4075,  5.4062,  5.4014, \n5.4089,  5.4003,  5.4058,  4.909 ,  4.9062,  4.9097,  4.9014, \n4.9097,  4.9023,  4.9   ,  4.9002,  4.903 ,  4.9062,  4.9026, \n4.9094,  4.9099,  4.9071,  4.9058,  4.9067,  4.9005,  4.9016, \n4.9093,  4.6041,  4.6031,  4.6016,  4.6021,  4.6079,  4.6046, \n4.6055,  4.609 ,  4.6052,  4.6005,  4.6017,  4.6091,  4.6073, \n4.6029,  4.6012,  4.6062,  4.6098,  4.4014,  4.4043,  4.4013, \n4.4091,  4.4087,  4.4087,  4.4027,  4.4017,  4.4067,  4.4003, \n4.4021,  4.4061]) \n\n```", "```py\nIn [87]: AGE = np.vstack([age, np.ones(len(age))]).T \nIn [88]: m, c = np.linalg.lstsq(AGE, sim_scores)[0] \nIn [89]: m \nOut[90]: -0.029435313781 \nIn [91]: c \nOut[92]: 6.30307651938 \n\n```", "```py\nIn [93]: year = np.arange(1,11) \nIn [94]: price = np.array([129000, 133000, 138000, 144000, 142000, 141000, 150000, 135000, 134000, 139000]). \nIn [95]: year \nOut[95]: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]) \n\n```", "```py\nIn [97]: a, b, c = np.polyfit(year, price, 2) \nIn [98]: a \nOut[98]: -549.242424242 \nIn [99]: b \nOut[99]: 6641.66666667 \nIn [100]: c \nOut[100]: 123116.666667 \nIn [101]: a*11**2 + b*11 + c \nOut[101]: 129716.66666666642 \n\n```"]