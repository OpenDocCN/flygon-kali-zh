["```js\nconst maxStrings2 = a => [...a].sort().pop();\nconst maxStrings3 = a => a.slice().sort().pop();\n\nlet countries = [\"Argentina\", \"Uruguay\", \"Brasil\", \"Paraguay\"];\nconsole.log(maxStrings3(countries)); // *\"Uruguay\"*\nconsole.log(countries); // *[\"Argentina\", \"Uruguay\", \"Brasil\", \"Paraguay\"] - unchanged*\n```", "```js\nconst myObj = {d: 22, m: 9};\nconsole.log(myObj);\n// {d: 22, m: 9}\n\nmyObj = {d: 12, m: 4};\n// ***Uncaught TypeError: Assignment to constant variable.***\n\nmyObj.d = 12; // *but this is fine!*\nmyObj.m = 4;\nconsole.log(myObj);\n// {d: 12, m: 4}\n```", "```js\nconst myObj = { d: 22, m: 9 };\nObject.freeze(myObj);\n\nmyObj.d = 12; // *won't have effect...*\nconsole.log(myObj);\n// Object {d: 22, m: 9}\n```", "```js\nlet myObj3 = {\n d: 22,\n m: 9,\n o: {c: \"MVD\", i: \"UY\", f: {a: 56}}\n};\nObject.freeze(myObj3);\nconsole.log(myObj3);\n// *{d:22, m:9, o:{c:\"MVD\", i:\"UY\", f:{ a:56}}}*\n```", "```js\nmyObj3.d = 8888;          // *wont' work*\nmyObj3.o.f.a = 9999; // *oops, does work!!*\nconsole.log(myObj3);\n// *{d:22, m:9, o:{c:\"MVD\", i:\"UY\", f:{ **a:9999** }}}*\n```", "```js\nconst deepFreeze = obj => {\n if (obj && typeof obj === \"object\" && !Object.isFrozen(obj)) {\n        Object.freeze(obj);\n Object.getOwnPropertyNames(obj).forEach(prop =>\n            deepFreeze(obj[prop])\n );\n }\n return obj;\n};\n```", "```js\nlet oldObject = {\n d: 22,\n m: 9,\n o: {c: \"MVD\", i: \"UY\", f: {a: 56}}\n};\n\nlet newObject = {\n d: oldObject.d,\n m: oldObject.m,\n o: {c: oldObject.o.c, i: oldObject.o.i, f: {a: oldObject.o.f.a}}\n};\n```", "```js\nlet newObject1 = Object.assign({}, myObj);\nlet newObject2 = {...myObj};\n\nlet myArray = [1, 2, 3, 4];\nlet newArray1 = myArray.slice();\nlet newArray2 = [...myArray];\n```", "```js\nlet oldObject = {\n d: 22,\n m: 9,\n o: { c: \"MVD\", i: \"UY\", f: { a: 56 } }\n};\nlet newObject = Object.assign({}, oldObject);\n\nnewObject.d = 8888;\nnewObject.o.f.a = 9999; \nconsole.log(newObject);\n// {d:8888, m:9, o: {c:\"MVD\", i:\"UY\", f: {a:9999}}} -*- ok*\n\nconsole.log(oldObject);\n// {d:22, m:9, o: {c:\"MVD\", i:\"UY\", f: {a:9999}}} -- *oops!!*\n```", "```js\nconst jsonCopy = obj => JSON.parse(JSON.stringify(obj));\n```", "```js\nlet myDate = new Date();\nlet newDate = jsonCopy(myDate);\nconsole.log(typeof myDate, typeof newDate); // ***object string***\n```", "```js\nconst deepCopy = obj => {\n let aux = obj;\n if (obj && typeof obj === \"object\") {\n        aux = new obj.constructor();\n Object.getOwnPropertyNames(obj).forEach(\n prop => (aux[prop] = deepCopy(obj[prop]))\n );\n }\n return aux;\n};\n```", "```js\nlet oldObject = {\n d: 22,\n m: 9,\n o: { c: \"MVD\", i: \"UY\", f: { a: 56 } }\n};\n\nlet newObject = deepCopy(oldObject);\nnewObject.d = 8888;\nnewObject.o.f.a = 9999;\nconsole.log(newObject);\n// {d:8888, m:9, o:{c:\"MVD\", i:\"UY\", f:{a:9999}}}\nconsole.log(oldObject);\n// {d:22, m:9, o:{c:\"MVD\", i:\"UY\", f:{a:56}}} -- *unchanged!*\n```", "```js\nconst getField = attr => obj => obj[attr];\n```", "```js\nconst getByPath = (arr, obj) => {\n if (arr[0] in obj) {\n return arr.length > 1\n ? getByPath(arr.slice(1), obj[arr[0]])\n : deepCopy(obj[arr[0]]);\n } else {\n return undefined;\n }\n};\n```", "```js\nlet myObj3 = {\n d: 22,\n m: 9,\n o: {c: \"MVD\", i: \"UY\", f: {a: 56}}\n};\ndeepFreeze(myObj3);\n\nconsole.log(getByPath([\"d\"], myObj3)); // 22\nconsole.log(getByPath([\"o\"], myObj3)); // {c: \"MVD\", i: \"UY\", f: {a: 56}}\nconsole.log(getByPath([\"o\", \"c\"], myObj3)); // \"MVD\"\nconsole.log(getByPath([\"o\", \"f\", \"a\"], myObj3)); // 56\n```", "```js\nlet fObj = getByPath([\"o\", \"f\"], myObj3);\nconsole.log(fObj); // {a: 56}\nfObj.a = 9999;\nconsole.log(fObj); // {a: 9999} *-- it's not frozen*\n```", "```js\nconst setByPath = (arr, value, obj) => {\n if (!(arr[0] in obj)) {\n obj[arr[0]] =\n arr.length === 1 ? null : Number.isInteger(arr[1]) ? [] : {};\n }\n\n if (arr.length > 1) {\n return setByPath(arr.slice(1), value, obj[arr[0]]);\n } else {\n obj[arr[0]] = value;\n return obj;\n }\n};\n```", "```js\nconst updateObject = (arr, obj, value) => {\n let newObj = deepCopy(obj);\n setByPath(arr, value, newObj);\n return deepFreeze(newObj);\n};\n```", "```js\nlet new1 = updateObject([\"m\"], myObj3, \"sep\");\n// {d: 22, m: \"sep\", o: {c: \"MVD\", i: \"UY\", f: {a: 56}}};\n\nlet new2 =updateObject([\"b\"], myObj3, 220960);\n// {d: 22, m: 9, o: {c: \"MVD\", i: \"UY\", f: {a: 56}}, b: 220960};\n\nlet new3 =updateObject([\"o\", \"f\", \"a\"], myObj3, 9999);\n// {d: 22, m: 9, o: {c: \"MVD\", i: \"UY\", f: {a: 9999}}};\n\nlet new4 =updateObject([\"o\", \"f\", \"j\", \"k\", \"l\"], myObj3, \"deep\");\n// {d: 22, m: 9, o: {c: \"MVD\", i: \"UY\", f: {a: 56, j: {k: \"deep\"}}}};\n```", "```js\nclass ListNode {\n constructor(value, next = null) {\n this.value = value;\n this.next = next;\n }\n}\n```", "```js\nmyObj = {\n a: ...,\n b: ...,\n c: ...,\n    d: {\n e: ...,\n        f: ...,\n g: {\n h: ...,\n i: ...\n }\n }\n};\n```", "```js\nnewObj = {\n a: myObj.a,\n b: myObj.b,\n c: myObj.c,\n d: {\n e: myObj.d.e,\n f: *the new value*,\n g: myObj.d.g\n }\n};\n```", "```js\nconst setIn = (arr, val, obj) => {\n const newObj = Number.isInteger(arr[0]) ? [] : {};\n\n Object.keys(obj).forEach(k => {\n newObj[k] = k !== arr[0] ? obj[k] : null;\n });\n\n newObj[arr[0]] =\n arr.length > 1 ? setIn(arr.slice(1), val, obj[arr[0]]) : val;\n return newObj;\n};\n```", "```js\nlet myObj1 = {\n a: 111,\n b: 222,\n c: 333,\n d: {\n e: 444,\n f: 555,\n g: {\n h: 666,\n i: 777\n },\n j: [{k: 100}, {k: 200}, {k: 300}]\n }\n};\n```", "```js\nlet myObj2 = setIn([\"d\", \"f\"], 88888, myObj1);\n/*\n{\n a: 111,\n b: 222,\n c: 333,\n d: {\n e: 444,\n f: 88888,\n g: {h: 666, i: 777},\n j: [{k: 100}, {k: 200}, {k: 300}]\n }\n}\n*/\n\nconsole.log(myObj.d === myObj2.d);     // *false*\nconsole.log(myObj.d.f === myObj2.d.f); // *false*\nconsole.log(myObj.d.g === myObj2.d.g); // *true*\n```", "```js\nlet myObj3 = setIn([\"d\", \"j\", 1, \"k\"], 99999, myObj2);\n/*\n{\n a: 111,\n b: 222,\n c: 333,\n d: {\n e: 444,\n f: 88888,\n g: {h: 666, i: 777},\n j: [{k: 100}, {k: 99999}, {k: 300}]\n }\n}\n*/\nconsole.log(myObj.d.j === myObj3.d.j);       // *false*\nconsole.log(myObj.d.j[0] === myObj3.d.j[0]); // *true*\nconsole.log(myObj.d.j[1] === myObj3.d.j[1]); // *false*\nconsole.log(myObj.d.j[2] === myObj3.d.j[2]); // *true*\n```", "```js\nconst deleteIn = (arr, obj) => {\n const newObj = Number.isInteger(arr[0]) ? [] : {};\n\n Object.keys(obj).forEach(k => {\n if (k !== arr[0]) {\n newObj[k] = obj[k];\n }\n });\n\n if (arr.length > 1) {\n newObj[arr[0]] = deleteIn(arr.slice(1), obj[arr[0]]);\n }\n return newObj;\n};\n```", "```js\nmyObj4 = deleteIn([\"d\", \"g\"], myObj3);\nmyObj5 = deleteIn([\"d\", \"j\"], myObj4);\n\n// {a: 111, b: 222, c: 333, d: {e: 444, f: 88888}};\n```", "```js\nclass Node {\n constructor(key, next = null) {\n this.key = key;\n this.next = next;\n }\n}\n\nconst node = (key, next) => new Node(key, next);\n\nlet c3 = node(\"G\", node(\"B\", node(\"F\", node(\"A\", node(\"C\", node(\"E\"))))));\n\n```"]