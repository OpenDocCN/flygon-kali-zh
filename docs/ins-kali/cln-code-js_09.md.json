["```js\nconst possiblyNumeric = '203.45';\n```", "```js\nsetWidth('203.45');\n\nfunction setWidth(width) {\n  width += 20;       // Add margins\n  applyWidth(width); // Apply the width\n}\n```", "```js\nregisterPeopleForMarathon([\n  new Person({ id: 1, name: 'Marcus Wu' }),\n  new Person({ id: 2, name: 'Susan Smith' }),\n  new Person({ id: 3, name: 'Sofia Polat' })\n]);\n```", "```js\nfunction registerPeopleForMarathon(people) {\n  if (Array.isArray(people)) {\n    throw new Error('People is not an array');\n  }\n  for (let person in people) {\n    if (!(person instanceof Person)) {\n      throw new Error('Each person should be an instance of Person');\n    }\n    registerForMarathon(person.id, person.name);\n  }\n}\n```", "```js\nfunction* marathonPeopleGenerator() {\n  yield new Person({ id: 1, name: 'Marcus Wu' });\n  yield new Person({ id: 2, name: 'Susan Smith' });\n  yield new Person({ id: 3, name: 'Sofia Polat' });\n}\n\nfor (let person of marathonPeopleGenerator()) {\n console.log(person.name);\n}\n\n// Logged => \"Marcus Wu\"\n// Logged => \"Susan Smith\"\n// Logged => \"Sofia Polat\"\n```", "```js\n// Should we allow this?\nregisterPeopleForMarathon(\n  marathonPeopleGenerator()\n);\n```", "```js\nfunction isIterable(obj) {\n  return obj != null &&\n typeof obj[Symbol.iterator] === 'function';\n}\n\nisIterable([1, 2, 3]); // => true\nisIterable(marathonPeopleGenerator()); // => true\n```", "```js\n// ...\nif (!(person instanceof Person)) {\n  throw new Error('Each person should be an instance of Person');\n}\n```", "```js\n// ...\nif (!person || !person.name || !person.id) {\n  throw new Error('Each person should have a name and id');\n}\n```", "```js\nfunction registerPeopleForMarathon(people) {\n  if (isIterable(people)) {\n    throw new Error('People is not iterable');\n  }\n  for (let person in people) {\n    if (!person || !person.name || !person.id) {\n      throw new Error('Each person should have a name and id');\n    }\n    registerForMarathon(person.id, person.name);\n  }\n}\n```", "```js\nfunction* marathonPeopleGenerator() {\n  yield { id: 1, name: 'Marcus Wu' };\n  yield { id: 2, name: 'Susan Smith' };\n  yield { id: 3, name: 'Sofia Polat' };\n}\n\nregisterPeopleForMarathon(\n  marathonPeopleGenerator()\n);\n```", "```js\ntypeof 1; // => number\n```", "```js\ntypeof 1; // => \"number\"\ntypeof ''; // => \"string\"\ntypeof {}; // => \"object\"\ntypeof function(){}; // => \"function\"\ntypeof undefined; // => \"undefined\"\ntypeof Symbol(); // => \"symbol\"\ntypeof 0n; // => \"bigint\"\ntypeof true; // => boolean\n```", "```js\ntypeof somethingNotYetDeclared; // => \"undefined\"\n```", "```js\ntypeof null; // => \"object\"\n```", "```js\nlet someValue = null;\nsomeValue === null; // => true\n```", "```js\ntypeof [];         // => \"object\"\ntypeof RegExp(''); // => \"object\"\ntypeof {};         // => \"object\"\n```", "```js\ntypeof () => {};          // => \"function\"\ntypeof function() {};     // => \"function\"\ntypeof class {};          // => \"function\"\ntypeof ({ foo(){} }).foo; // => \"function\"\n```", "```js\nif (typeof 123 == 'number') {...}\nif (typeof 123 === 'number') {...}\n```", "```js\ntypeof true;  // => \"boolean\"\ntypeof false; // => \"boolean\"\n```", "```js\nfunction process(isEnabled) {\n  if (isEnabled) {\n    // ... do things\n  }\n}\n```", "```js\nBoolean(true); // => true\nBoolean(1); // => true\nBoolean(42); // => true\nBoolean([]); // => true\nBoolean('False'); // => true\nBoolean(0.0001); // => true\n```", "```js\nif (isEnabled === true) {...}\nif (isEnabled === false) {...}\n```", "```js\ntypeof 555; // => \"number\"\n```", "```js\ntypeof Infinity;  // => \"number\"\ntypeof -Infinity; // => \"number\"\ntypeof NaN;       // => \"number\"\n```", "```js\nisNaN(NaN)   // => true\nisNaN('foo') // => true\n\nNumber.isNaN(NaN);   // => true\nNumber.isNaN('foo'); // => false\n```", "```js\nconst string = 'foo';\nconst nan = Number(string);\nNumber.isNaN(nan); // => true\n```", "```js\nisFinite(42)   // => true\nisFinite('42') // => true\n\nNumber.isFinite(42);   // => true\nNumber.isFinite('42'); // => false\n```", "```js\nfunction isNormalNumber(n) {\n  return typeof n === 'number' && isFinite(n);\n}\n```", "```js\ntypeof 'hello'; // => \"string\"\n```", "```js\n'hello'.length; // => 5\n```", "```js\nconst string = '';\n\nBoolean(string);            // => false\nBoolean(string.length);     // => false\nBoolean(string.length > 0); // => false\n\n// Since an empty String is falsy we can just check `string` directly:\nif (string) { }\n\n// Or we can be more explicit:\nif (string.length) { }\n\n// Or we can be maximally explicit:\nif (string.length > 0) { }\n```", "```js\nif (typeof myString === 'string' && myString) {\n  // ...\n}\n```", "```js\nfunction isNonEmptyString(string) {\n  return typeof string === 'string' && string.trim().length > 0;\n}\n\nisNonEmptyString('hi');  // => true\nisNonEmptyString('');    // => false\nisNonEmptyString(' ');   // => false\nisNonEmptyString(' \\n'); // => false\n```", "```js\nif (value === undefined) {\n  // ...\n}\n```", "```js\nlet value = void 0;  // <- actually undefined\nlet undefined = 123; // <- cheeky override\n\nif (value === undefined) {\n  // Does not occur\n}\n```", "```js\nif (value === void 0) {\n  // value is undefined\n}\n```", "```js\nfunction myModule() {\n  // My local `undefined`:\n  const undef;\n\n  void 0 === undef; // => true\n\n  if (someValue === undef) {\n    // Instead of `VALUE === undefined` I can\n    // use `VALUE === undef` within this scope\n  }\n}\n```", "```js\ntypeof undefined; // => \"undefined\"\n```", "```js\nif (someValue === null) {\n  // someValue is null...\n}\n```", "```js\nfunction printHello(name, message) {\n  if (message === null || message === undefined) {\n    // Default to a hello message:\n    message = 'Hello!';\n  }\n  console.log(`${name} says: ${message}`);\n}\n```", "```js\nif (!value) {\n  // Value is definitely not null and definitely not undefined\n}\n```", "```js\nif (value === null || value === undefined) //...\n```", "```js\nif (value == null) {\n  // value is either null or undefined\n}\n```", "```js\nif (Array.isArray(value)) {\n // ...\n}\n```", "```js\nfunction isIterable(obj) {\n  return obj != null &&\n    typeof obj[Symbol.iterator] === 'function';\n}\n\nconst foo = [1,2,3];\nif (isIterable(foo)) {\n  for (let f in foo) {\n    console.log(f);\n  }\n}\n\n// Logs: 1, 2, 3\n```", "```js\nif (Array.isArray(someValue)) {\n  // Using Array methods\n  someValue.forEach(v => {/*...*/});\n  someValue.sort((a, b) => {/*...*/});\n}\n```", "```js\nconst myArrayCopy = [...myArray];\n```", "```js\nconst arrayOfParagraphElements = [...document.querySelectorAll('p')];\n```", "```js\nconst component = new Component();\ncomponent instanceof Component; \n```", "```js\nconst plainObject = {\n  name: 'Pikachu',\n  species: 'Pok\u00e9mon'\n};\n\nconst anotherPlainObject = new Object();\nanotherPlainObject.name = 'Pikachu';\nanotherPlainObject.species = 'Pok\u00e9mon';\n```", "```js\nfunction Pokemon() {}\nnew Pokemon(); // => A non-plain object\n```", "```js\nfunction isPlainObject(object) {\n  return Object.getPrototypeOf(object) === Object.prototype;\n}\n\nisPlainObject([]);            // => false\nisPlainObject(123);           // => false\nisPlainObject(new String);    // => false\nisPlainObject(new Pokemon()); // => false\n\nisPlainObject(new Object());  // => true\nisPlainObject({});            // => true\n```", "```js\n'5' * '2'; // => 10 (Number)\n```", "```js\nNumber('123'); // => 123\n+'123'; // => 123\n```", "```js\n1 + '123'; // => \"1234\"\n[2] * [3]; // => 6\n'22' / 2;  // => 11\n```", "```js\nfunction countOccurrences(haystack, needle) {\n\n  haystack = String(haystack);\n  needle = String(needle);\n\n  let count = 0;\n\n  for (let i = 0; i < haystack.length; count++, i += needle.length) {\n    i = haystack.indexOf(needle, i);\n    if (i === -1) break;\n  }\n\n  return count;\n}\n\ncountOccurrences('What apple is the best type of apple?', 'apple'); // => 2\ncountOccurrences('ABC ABC ABC', 'A'); // => 3\n```", "```js\nBoolean(0); // => false\nBoolean(1); // => true\n```", "```js\n!!1;  // => true\n!![]; // => true\n!!0;  // => false\n!!\"\"; // => false\n```", "```js\n!( !( value ) )\n```", "```js\nfunction isNamePopulated(name) {\n  return !!name;\n}\n```", "```js\nisNamePopulated('');        // => false\nisNamePopulated(null);      // => false\nisNamePopulated(undefined); // => false\n\nisNamePopulated('Sandra');  // => true\n```", "```js\nisNamePopulated(0); // => false\nisNamePopulated(1); // => true\n```", "```js\nString(456); // => \"456\"\nString(true); // => \"true\"\nString(null); // => \"null\"\nString(NaN); // => NaN\nString([1, 2, 3]); // => \"1,2,3\"\nString({ foo: 1 }); // => \"[object Object]\"\nString(function(){ return 'wow' }); // => \"function(){ return 'wow' }\"\n```", "```js\n'' + 1234; // => \"1234\"\n`${1234}`; // => \"1234\"\n```", "```js\nconst myFavoriteNumber = {\n  name: 'Forty Two',\n  number: 42,\n  valueOf() { return number; },\n  toString() { return name; }\n};\n\n`${myFavoriteNumber}`; // => \"Forty Two\"\n'' + myFavoriteNumber; // => 42\n```", "```js\n(123).toString(); // => 123\n```", "```js\nnull.toString();      // ! TypeError: Cannot read property 'toString' of null\nundefined.toString(); // ! TypeError: Cannot read property 'toString' of undefined\n```", "```js\n({\n  toString() { return ['not', 'a', 'string'] }\n}).toString(); // => [\"not\", \"a\", \"string\"]\n```", "```js\nNumber('10e3');     // => 10000\nNumber(' 4.6');     // => 4.6\nNumber('Infinity'); // => Infinity\nNumber('wat');      // => NaN\nNumber(false);      // => 0\nNumber('');         // => 0\n```", "```js\n+'Infinity'; // => Infinity\n+'55.66';    // => 55.66\n+'foo';      // => NaN\n```", "```js\nparseInt('1000');   // => 1000\nparseInt('100', 8); // => 64 (i.e. octal to decimal)\nparseInt('AA', 12); // => 130 (i.e. hexadecimal to decimal)\n```", "```js\nparseInt('0x10'); // => 16\n```", "```js\n// (In **some** environments)\nparseInt('023'); // => 19 (assumed octal -> decimal)\n```", "```js\nparseInt(' 111 222 333'); // => 111\nparseInt('\\t\\n0xFF');     // => 255\n```", "```js\nparseFloat('42.01');  // => 42.01\nparseFloat('\\n1e-3'); // => 0.001\n```", "```js\nparseFloat('   123 ... rubbish here...'); // => 123\n```", "```js\nconst rareSituation = {\n  valueOf() { return \"111\"; },\n  toString() { return \"999\"; }\n};\n\nNumber(rareSituation); // => 111\nparseFloat(rareSituation); // => 999\nparseFloat(rareSituation); // => 999\n```", "```js\nfunction toPrimitive() { return 1; }\nfunction valueOf() { return 2; }\nfunction toString() { return 3; }\n\nconst one = { [Symbol.toPrimitive]: toPrimitive, valueOf, toString };\nconst two = { valueOf, toString };\nconst three = { toString };\n\n1 == one; // => true\n2 == two; // => true\n3 == three; // => true\n```", "```js\nconst object = { foo: 123 };\nconst something = {\n  valueOf() { return 'baz'; },\n  toString() { return 'foo'; }\n};\n\nobject[something]; // => 123\n```", "```js\n[1, 2, 3].toString(); // => \"1,2,3\"\n```", "```js\nclass CustomArray extends Array {\n  toString() {\n    return this.join('|');\n  }\n}\n```", "```js\nString(new CustomArray(1, 2, 3));    // => 1|2|3\nnew CustomArray(1, 2, 3) == '1|2|3'; // => true\n```"]