["```py\n    np.random.seed(44)\n    a = np.random.random_integers(-4, 4, 7)\n    print(a)\n    ```", "```py\n    [ 0 -1 -3 -1 -4  0 -1]\n\n    ```", "```py\n    np.sign.at(a, [2, 4])\n    print(a)\n    ```", "```py\n    [ 0 -1 -1 -1 -1  0 -1]\n\n    ```", "```py\n    np.random.seed(20)\n    a = np.random.random_integers(0, 7, 9)\n    print(a)\n    ```", "```py\n    [3 2 7 7 4 2 1 4 3]\n\n    ```", "```py\n    print(np.partition(a, 4))\n    ```", "```py\n    [2 3 1 2 3 7 7 4 4]\n\n    ```", "```py\n    estimates = np.zeros((len(a), 3))\n    ```", "```py\n    for i in xrange(len(a)):\n       b = a.copy()\n       b[i] = np.nan\n       estimates[i,] = [np.nanmean(b), np.nanvar(b), np.nanstd(b)]\n    ```", "```py\n    print(\"Estimator variance\", estimates.var(axis=0))\n    ```", "```py\n    Estimator variance [ 0.00079905  0.00090129  0.00034604]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nnp.random.seed(46)\na = np.random.randn(30)\nestimates = np.zeros((len(a), 3))\n\nfor i in xrange(len(a)):\n   b = a.copy()\n   b[i] = np.nan\n\n   estimates[i,] = [np.nanmean(b), np.nanvar(b), np.nanstd(b)]\n\nprint(\"Estimator variance\", estimates.var(axis=0))\n```", "```py\n>>> help(np.full)\nReturn a new array of given shape and type, filled with `fill_value`.\n>>> help(np.full_like)\nReturn a full array with the same shape and type as a given array.\n\n```", "```py\n    print(np.full((1, 2), 7))\n    ```", "```py\n    array([[ 7.,  7.]])\n\n    ```", "```py\n    print(np.full((1, 2), 7, dtype=np.int))\n    ```", "```py\n    array([[7, 7]])\n\n    ```", "```py\n    a = np.linspace(0, 1, 5)\n    print(a)\n    array([ 0\\.  ,  0.25,  0.5 ,  0.75,  1\\.  ])\n    print(np.full_like(a, 7))\n    array([ 7.,  7.,  7.,  7.,  7.])\n    ```", "```py\n    print(np.full_like(a, 7, dtype=np.int))\n    array([7, 7, 7, 7, 7])\n    ```", "```py\n    N = 400\n    np.random.seed(28)\n    data = np.random.binomial(5, .5, size=N)\n    ```", "```py\n    bootstrapped = np.random.choice(data, size=(N, 30))\n    means = bootstrapped.mean(axis=0)\n    ```", "```py\n    plt.title('Bootstrapping demo')\n    plt.grid()\n    plt.boxplot(means)\n    plt.plot(3 * [data.mean()], lw=3, label='Original mean')\n    plt.legend(loc='best')\n    plt.show()\n    ```", "```py\n    print(np.datetime64('2015-05-21'))\n    ```", "```py\n    numpy.datetime64('2015-05-21')\n    ```", "```py\n    print(np.datetime64('20150521'))\n    print(np.datetime64('2015-05'))\n    ```", "```py\n    numpy.datetime64('20150521')\n    numpy.datetime64('2015-05')\n\n    ```", "```py\n    local = np.datetime64('1578-01-01T21:18')\n    print(local)\n    ```", "```py\n    numpy.datetime64('1578-01-01T21:18Z')\n\n    ```", "```py\n    with_offset = np.datetime64('1578-01-01T21:18-0800')\n    print(with_offset)\n    ```", "```py\n    numpy.datetime64('1578-01-02T05:18Z')\n\n    ```", "```py\n    print(local - with_offset)\n    ```", "```py\n    numpy.timedelta64(-480,'m')\n\n    ```", "```py\nimport numpy as np\n\nprint(np.datetime64('2015-05-21'))\n#numpy.datetime64('2015-05-21')\n\nprint(np.datetime64('20150521'))\nprint(np.datetime64('2015-05'))\n#numpy.datetime64('20150521')\n#numpy.datetime64('2015-05')\n\nlocal = np.datetime64('1578-01-01T21:18')\nprint(local)\n#numpy.datetime64('1578-01-01T21:18Z')\n\nwith_offset = np.datetime64('1578-01-01T21:18-0800')\nprint(with_offset)\n#numpy.datetime64('1578-01-02T05:18Z')\n\nprint(local - with_offset)\n```"]