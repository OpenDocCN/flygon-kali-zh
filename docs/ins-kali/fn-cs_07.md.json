["```cs\npublic partial class Program \n{ \n  private static int GetFactorial(int intNumber) \n  { \n    if (intNumber == 0) \n    { \n      return 1; \n    } \n    return intNumber * GetFactorial(intNumber - 1); \n  } \n} \n\n```", "```cs\nprivate static void GetFactorialOfFive() \n{ \n  int i = GetFactorial(5); \n  Console.WriteLine(\"5! is {0}\",i); \n} \n\n```", "```cs\nif (intNumber == 0) \n{ \n  return 1; \n} \n\n```", "```cs\nint i = GetFactorial(5) \n  (intNumber = 5) != 0 \n  return (5 * GetFactorial(4)) \n    (intNumber = 4) != 0 \n    return (4 * GetFactorial(3)) \n      (intNumber = 3) != 0 \n      return (3 * GetFactorial(2)) \n        (intNumber = 2) != 0 \n        return (2 * GetFactorial(1)) \n          (intNumber = 1) != 0 \n          return (1 * GetFactorial(0)) \n            (intNumber = 0) == 0 \n            return 1 \n          return (1 * 1 = 1) \n        return (2 * 1 = 2) \n      return (3 * 2 = 6) \n    return (4 * 6 = 24) \n  return (5 * 24 = 120) \ni = 120 \n\n```", "```cs\npublic partial class Program \n{ \n  public static int FindMaxIteration( \n     int[] intArray) \n  { \n    int iMax = 0; \n    for (int i = 0; i < intArray.Length; i++) \n    { \n      if (intArray[i] > iMax) \n      { \n        iMax = intArray[i]; \n      } \n    } \n    return iMax; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    int[] intDataArray =  \n       {8, 10, 24, -1, 98, 47, -101, 39 }; \n    int iMaxNumber = FindMaxIteration(intDataArray); \n    Console.WriteLine( \n       \"Max Number (using FindMaxRecursive) = \" + \n         iMaxNumber); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static int FindMaxRecursive( \n     int[] intArray,  \n      int iStartIndex = 0) \n  { \n    if (iStartIndex == intArray.Length - 1) \n    { \n      return intArray[iStartIndex]; \n    } \n    else \n    { \n      return Math.Max(intArray[iStartIndex],\n        FindMaxRecursive(intArray,iStartIndex + 1)); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    int[] intDataArray = {8, 10, 24, -1, 98, 47, -101, 39 }; \n    int iMaxNumber = FindMaxRecursive(intDataArray); \n    Console.WriteLine\"Max Number(using FindMaxRecursive) = \" +\n        iMaxNumber); \n  } \n} \n\n```", "```cs\nif (iStartIndex == intArray.Length - 1) \n{ \n  return intArray[iStartIndex]; \n} \n\n```", "```cs\nArray = { 8, 10, 24, -1, 98, 47, -101, 39 }; \nArray.Length - 1 = 7 \nint iMaxNumber = FindMaxRecursive(Array, 0) \n  (iStartIndex = 0) != 7 \n  return Max(8, FindMaxRecursive(Array, 1)) \n    (iStartIndex = 1) != 7 \n    return Max(10, FindMaxRecursive(Array, 2)) \n      (iStartIndex = 2) != 7 \n      return Max(24, FindMaxRecursive(Array, 3)) \n        (iStartIndex = 3) != 7 \n        return Max(-1, FindMaxRecursive(Array, 4)) \n          (iStartIndex = 4) != 7 \n           return Max(98, FindMaxRecursive(Array, 5)) \n            (iStartIndex = 5) != 7 \n            return Max(47, FindMaxRecursive(Array, 6)) \n              (iStartIndex = 6) != 7 \n              return Max(-101, FindMaxRecursive(Array, 7)) \n                (iStartIndex = 7) == 7 \n                return 39 \n              return Max(-101, 39) = 39 \n            return Max(47, 39) = 47 \n          return Max(98, 47) = 98 \n        return Max(-1, 98) = 98 \n      return Max(24, 98) = 98 \n    return Max(10, 98) = 98 \n  return Max(8, 98) = 98 \niMaxNumber = 98 \n\n```", "```cs\npublic partial class Program \n{ \n  public static void TailCall(int iTotalRecursion) \n  { \n    Console.WriteLine(\"Value: \" + iTotalRecursion); \n    if (iTotalRecursion == 0) \n    { \n      Console.WriteLine(\"The tail is executed\"); \n      return; \n    } \n    TailCall(iTotalRecursion - 1); \n  } \n} \n\n```", "```cs\nif (iTotalRecursion == 0) \n{ \n  Console.WriteLine(\"The tail is executed\"); \n  return; \n} \n\n```", "```cs\nTailCall(5) \n  (iTotalRecursion = 5) != 0 \n  TailCall(4) \n    (iTotalRecursion = 4) != 0 \n    TailCall(3) \n      iTotalRecursion = 3) != 0 \n      TailCall(2) \n        iTotalRecursion = 2) != 0 \n        TailCall(1) \n          iTotalRecursion = 1) != 0 \n          TailCall(0) \n            iTotalRecursion = 0) == 0 \n            Execute the process in tail \n        TailCall(1) => nothing happens \n      TailCall(2) => nothing happens \n    TailCall(3) => nothing happens \n  TailCall(4) => nothing happens \nTailCall(5) => nothing happens \n\n```", "```cs\nTailCall(5) \n   (iTotalRecursion = 5) != 0 \n  TailCall(4) \n    (iTotalRecursion = 4) != 0 \n    TailCall(3) \n      iTotalRecursion = 3) != 0 \n      TailCall(2) \n        iTotalRecursion = 2) != 0 \n        TailCall(1) \n          iTotalRecursion = 1) != 0 \n          TailCall(0) \n            iTotalRecursion = 0) == 0 \n            Execute the process in tail \nFinish! \n\n```", "```cs\npublic partial class Program \n{ \n  public static int GetFactorialAPS(int intNumber, \n    int accumulator = 1) \n  { \n    if (intNumber == 0) \n    { \n      return accumulator; \n    } \n    return GetFactorialAPS(intNumber - 1, \n       intNumber * accumulator); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void GetFactorialOfFiveUsingAPS() \n  { \n    int i = GetFactorialAPS(5); \n    Console.WriteLine( \n       \"5! (using GetFactorialAPS) is {0}\",i); \n  } \n} \n\n```", "```cs\nint i = GetFactorialAPS(5, 1) \n  accumulator = 1 \n  (intNumber = 5) != 0 \n  return GetFactorialAPS(4, 5 * 1) \n    accumulator = 5 * 1 = 5 \n    (intNumber = 4) != 0 \n    return GetFactorialAPS(3, 4 * 5) \n      accumulator = 4 * 5 = 20 \n      (intNumber = 3) != 0 \n      return GetFactorialAPS(2, 3 * 20) \n        accumulator = 3 * 20 = 60 \n        (intNumber = 2) != 0 \n        return GetFactorialAPS(1, 2 * 60) \n          accumulator = 2 * 60 = 120 \n          (intNumber = 1) != 0 \n          return GetFactorialAPS(0, 1 * 120) \n            accumulator = 1 * 120 = 120 \n            (intNumber = 0) == 0 \n            return accumulator \n          return 120 \n        return 120 \n      return 120 \n    return 120 \n  return 120 \ni = 120 \n\n```", "```cs\nreturn GetFactorialTailRecursion(0, 1 * 120) \n  accumulator = 1 * 120 = 120 \n  (intNumber = 0) == 0 \n  return accumulator \nreturn 120 \n\n```", "```cs\npublic partial class Program \n{ \n  public static void GetFactorialAPS2( \n      int intNumber,int accumulator = 1) \n  { \n    if (intNumber == 0) \n    { \n      Console.WriteLine(\"The result is \" + accumulator); \n      return; \n    } \n    GetFactorialAPS2(intNumber - 1, intNumber * accumulator); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void GetFactorialOfFiveUsingAPS2() \n  { \n    Console.WriteLine(\"5! (using GetFactorialAPS2)\"); \n    GetFactorialAPS2(5); \n  } \n} \n\n```", "```cs\nGetFactorialAPS2(5, 1) \n  accumulator = 1 \n  (intNumber = 5) != 0 \n  GetFactorialAPS2(4, 5 * 1) \n    accumulator = 5 * 1 = 5 \n    (intNumber = 4) != 0 \n    GetFactorialAPS2(3, 4 * 5) \n      accumulator = 4 * 5 = 20 \n      (intNumber = 3) != 0 \n      GetFactorialAPS2(2, 3 * 20) \n        accumulator = 3 * 20 = 60 \n        (intNumber = 2) != 0 \n        GetFactorialAPS2(1, 2 * 60) \n          accumulator = 2 * 60 = 120 \n          (intNumber = 1) != 0 \n          GetFactorialAPS2(0, 1 * 120) \n            accumulator = 1 * 120 = 120 \n            (intNumber = 0) == 0 \n            Show the accumulator value \nFinish! \n\n```", "```cs\npublic partial class Program \n{ \n  public static void GetFactorialCPS(int intNumber, Action<int> \n         actCont) \n  { \n    if (intNumber == 0) \n      actCont(1); \n    else \n      GetFactorialCPS(intNumber - 1,x => actCont(intNumber * x)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void GetFactorialOfFiveUsingCPS() \n  { \n    Console.Write(\"5! (using GetFactorialCPS) is \"); \n    GetFactorialCPS(5,  x => Console.WriteLine(x)); \n  } \n} \n\n```", "```cs\nGetFactorialCPS(5, Console.WriteLine(x)) \n  (intNumber = 5) != 0 \n  GetFactorialCPS(4, (5 * x)) \n    (intNumber = 4) != 0 \n    GetFactorialCPS(3, (4 * x)) \n      (intNumber = 3) != 0 \n      GetFactorialCPS(2, (3 * x)) \n        (intNumber = 2) != 0 \n        GetFactorialCPS(1, (2 * x)) \n          (intNumber = 1) != 0 \n          GetFactorialCPS(0, (1 * x)) \n            (intNumber = 0) != 0 \n            GetFactorialCPS(0, (1 * 1)) \n          (1 * 1 = 1) \n        (2 * 1 = 2) \n      (3 * 2 = 6) \n    (4 * 6 = 24) \n  (5 * 24 = 120) \nConsole.WriteLine(120) \n\n```", "```cs\npublic partial class Program \n{ \n  private static bool IsOdd(int targetNumber) \n  { \n    if (targetNumber == 0) \n    { \n      return false; \n    } \n    else \n    { \n      return IsEven(targetNumber - 1); \n    } \n  } \n  private static bool IsEven(int targetNumber) \n  { \n    if (targetNumber == 0) \n    { \n      return true; \n    } \n    else \n    { \n      return IsOdd(targetNumber - 1); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CheckNumberFive() \n  { \n    Console.WriteLine(\"Is 5 even number? {0}\", IsEven(5)); \n  } \n} \n\n```", "```cs\nIsEven(5) \n  (targetNumber = 5) != 0 \n  IsOdd(4) \n    (targetNumber = 4) != 0 \n    IsEven(3) \n      (targetNumber = 3) != 0 \n      IsOdd(2) \n        (targetNumber = 2) != 0 \n        IsEven(1) \n          (targetNumber = 1) != 0 \n            IsOdd(0) \n            (targetNumber = 0) == 0 \n              Result = False \n\n```", "```cs\npublic partial class Program \n{ \n  private static void GetFactorialAggregate(int intNumber) \n  { \n    IEnumerable<int> ints =  \n       Enumerable.Range(1, intNumber); \n    int factorialNumber =  \n       ints.Aggregate((f, s) => f * s); \n    Console.WriteLine(\"{0}! (using Aggregate) is {1}\",\n       intNumber, factorialNumber); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void AggregateInt() \n  { \n    List<int> listInt = new List<int>() { 1, 2, 3, 4, 5, 6 }; \n    int addition = listInt.Aggregate( \n       (sum, i) => sum + i); \n    Console.WriteLine(\"The sum of listInt is \" + addition); \n  } \n} \n\n```", "```cs\n(sum, i) => sum + i \nsum = 1 \nsum = 1 + 2 \nsum = 3 + 3 \nsum = 6 + 4 \nsum = 10 + 5 \nsum = 15 + 6 \nsum = 21 \naddition = sum \n\n```", "```cs\npublic partial class Program \n{ \n  private static void AggregateString() \n  { \n    List<string> listString = new List<string>()\n      {\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\",\n              \"the\", \"lazy\", \"dog\"};\n    string stringAggregate = listString.Aggregate((strAll, str) => \n              strAll + \" \" + str); \n    Console.WriteLine(stringAggregate); \n  } \n} \n\n```", "```cs\npublic static TSource Aggregate<TSource>( \n  this IEnumerable<TSource> source, \n  Func<TSource, TSource, TSource> func \n) \n\n```", "```cs\n(strAll, str) => strAll + \" \" + str \nstrAll = \"The\" \nstrAll = strAll + \" \" + str \nstrAll = \"The\" + \" \" + \"quick\" \nstrAll = \"The quick\" + \" \" + \"brown\" \nstrAll = \"The quick brown\" + \" \" + \"fox\" \nstrAll = \"The quick brown fox\" + \" \" + \"jumps\" \nstrAll = \"The quick brown fox jumps\" + \" \" + \"over\" \nstrAll = \"The quick brown fox jumps over\" + \" \" + \"the\" \nstrAll = \"The quick brown fox jumps over the\" + \" \" + \"lazy\" \nstrAll = \"The quick brown fox jumps over the lazy\" + \" \" + \"dog\" \nstrAll = \"The quick brown fox jumps over the lazy dog\" \nstringAggregate = str \n\n```"]