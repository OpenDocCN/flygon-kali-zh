["```js\n1 + 2 //3\ntypeof(\"this\") //'string'\nconst x = 'what' //undefined\nx //'what'\nx = 'this' //TypeError: Assignment to a constant variable\nconst fun = function() { console.log(x); } //undefined\nfun() //'what' then undefined\nfun = 'something' //TypeError: Assignment to a constant variable\n```", "```js\nconst x = 'what';\nconsole.log('this is the value of x', x); //'this is the value of x what'\nconst obj = {\n    what : 'that',\n    huh : 'this',\n    eh : 'yeah'\n}\nconsole.log(obj); // { what : 'that', huh : 'this', eh : 'yeah' }\n```", "```js\nconst os = require('os');\n\nconsole.log(os.arch()); //prints out x64 on 64-bit OS\nconsole.log(os.cpus()); //prints out information on our CPU\n```", "```js\nimport os from 'os';\n\nconsole.log(os.arch());\nconsole.log(os.cpus());\n```", "```js\n\"config\" : {\n    \"port\" : 8080,\n    \"name\" : \"example\",\n    \"testdata\" : {\n        \"thing\" : 5,\n        \"other\" : 10\n    }\n},\n\"scripts\" : {\n    \"example-script\" : \"node main.js\"\n}\n```", "```js\nconsole.log(process.env.npm_package_config_port); //8080\nconsole.log(process.env.npm_package_config_name); //'example'\nconsole.log(process.env.npm_package_config_testdata); //undefined\n```", "```js\nconsole.log(process.env.npm_package_config_testdata_thing) //5\nconsole.log(process.env.npm_package_config_testdata_other) //10\n```", "```js\nimport fs from 'fs';\nimport { PassThrough } from 'stream'\n\nconst str = fs.createReadStream('./example.txt');\nconst pt = new PassThrough();\nstr.pipe(pt);\npt.on('data', (chunk) => {\n    console.log(chunk);\n});\n```", "```js\nThis is some data\nit should be processed by our system\nit should be coming in chunks that our system can handle\nmost likely this will all come in one chunk\n```", "```js\nconsole.log(chunk.toString('utf8'));\n```", "```js\nimport fs from 'fs';\nimport { PassThrough } from 'stream';\n\nlet numberOfThe = 0;\nconst chars = Buffer.from('the');\nlet currPos = 0;\nconst str = fs.createReadStream('./example.txt');\nconst pt = new PassThrough();\nstr.pipe(pt);\npt.on('data', (chunk) => {\n    for(let i = 0; i < chunk.byteLength; i++) {\n        const char = chunk[i];\n        if( char === chars[currPos] ) {\n            if( currPos === chars.byteLength - 1 ) // we are at the end so \n             reset\n                numberOfThe += 1;\n                currPos = 0;\n            } else {\n                currPos += 1;\n            }\n        } else {\n            currPos += 1;\n        }\n    }\n});\npt.on('end', () => {\n    console.log('the number of THE in the text is: ', numberOfThe);\n});\n```", "```js\nimport { Transform } from 'stream';\n\nclass GetThe extends Transform {\n    #currPos = 0;\n    #numberOfThe = 0;\n\n    static chars = Buffer.from('the');\n    constructor(options) {\n        super(options);\n    }\n    _transform(chunk, encoding, callback) {\n        for(let i = 0; i < chunk.byteLength; i++) {\n            const char = chunk[i];\n            if( char === GetThe.chars[this.#currPos]) {\n                if( this.#currPos === GetThe.chars.byteLength - 1 ) {\n                    this.#numberOfThe += 1;\n                    this.#currPos = 0;\n                } else {\n                    this.#currPos += 1;\n                }\n            } else {\n                this.#currPos = 0;\n            }\n        }\n        callback();\n    }\n    _flush(callback) {\n        callback(null, this.#numberOfThe.toString());\n    }\n}\n\nexport default GetThe;\n\n```", "```js\nimport GetThe from './custom_transform.js';\n```", "```js\nconst gt = new GetThe();\ngt.on('data', (data) => {\n    console.log('the number of THE produced by the custom stream is: ', \n     data.toString('utf8'));\n});\nconst str2 = fs.createReadStream('./example.txt');\nstr2.pipe(gt);\n```", "```js\nimport { promises } from 'fs';\n\n(async() => {\n    await promises.writeFile('example2.txt', \"Here is some text\\n\");\n    const fd = await promises.open('example2.txt', 'a');\n    await fd.appendFile(\"Here is some more text\\n\");\n    await fd.close();\n    console.log(await promises.readFile('example2.txt', 'utf8'));\n})();\n```", "```js\nimport { fork } from 'child_process';\n\nconst child = fork('child.js');\nchild.on('message', (msg) => {\n    switch(msg) {\n        case 'CONNECT': {\n            console.log('our child is connected to us. Tell it to dispose \n             of itself');\n            child.send('DISCONNECT');\n            break;\n        }\n        case 'DISCONNECT': { \n            console.log('our child is disposing of itself. Time for us to \n             do the same');\n            process.exit();\n            break;\n        }\n    }\n});\n```", "```js\nprocess.on('message', (msg) => {\n    switch(msg) {\n        case 'DISCONNECT': {\n            process.exit();\n            break;\n        }\n    }\n});\nprocess.send('CONNECT');\n```", "```js\nsetTimeout(() => {\n    child.send('DISCONNECT');\n}, 15000);\n```", "```js\nimport net from 'net';\nimport path from 'path';\nimport os from 'os';\n\nconst pipeName = (os.platform() === 'win32' ?\n    path.join('\\\\\\\\?\\\\pipe', process.cwd(), 'temp') :\n    path.join(process.cwd(), 'temp');\nconst server = net.createServer().listen(pipeName);\nserver.on('connection', (socket) => {\n    console.log('a socket has joined the party!');\n    socket.write('DISCONNECT');\n    socket.on('close', () => {\n        console.log('socket has been closed!');\n    });\n});\n```", "```js\nimport net from 'net';\nimport path from 'path';\nimport os from 'os';\n\nconst pipeName = (os.platform() === 'win32') ? \n    path.join('\\\\\\\\?\\\\pipe', process.cwd(), 'temp') :\n    path.join(process.cwd(), 'temp');\nconst socket = new net.Socket().connect(pipeName);\nsocket.on('connect', () => {\n    console.log('we have connected');\n});\nsocket.on('data', (data) => {\n    if( data.toString('utf8') === 'DISCONNECT' ) {\n        socket.destroy();\n    }\n});\n```", "```js\nimport http from 'http';\n\nconst server = http.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type' : 'application/json'});\n    res.end(JSON.stringify({here : 'is', some : 'data'}));\n});\nserver.listen(8000, '127.0.0.1');\n```", "```js\nconst server = https.createServer((req, res) => {\n    res.writeHead(200, { 'Content-Type' : 'text/html' });\n    res.end(`\n        <html>\n            <head></head>\n            <body>\n                <h1>Hello!</h1>\n                <p>This is from our server!</p>\n            </body>\n        </html>\n    `);\n});\n```", "```js\nconst server = http.createServer((req, res) => {\n    if( req.method === 'GET' &&\n        req.url === '/main.css' ) {\n        res.writeHead(200, { 'Content-Type' : 'text/css' });\n        res.end(`\n            h1 {\n                color : green;\n            }\n            p {\n                color : purple;\n            }\n        `);\n    } else {\n        res.writeHead(200, { 'Content-Type' : 'text/html' });\n        // same as above\n    }\n});\n```", "```js\nimport https from 'https';\n\nhttps.get('https://en.wikipedia.org/wiki/Surprise_(emotion)', (res) => {\n    if( res.statusCode === 200 ) {\n        res.on('data', (data) => {\n            console.log(data.toString('utf8'));\n        });\n        res.on('end', () => {\n            console.log('no more information');\n        });\n    } else {\n        console.error('bad error code!', res.statusCode);\n    }\n});\n```", "```js\nconst thing = 'this';\nconsole.log(thing);\nthing = 10;\n```", "```js\nTypeError: Assignment to constant variable. \n at Object.<anonymous> (C:\\Code\\Ch5\\bad_code.js:3:7) \n at Module._compile (internal/modules/cjs/loader.js:774:30) \n at Object.Module._extensions..js (internal/modules/cjs/loader.js:785:10) \n at Module.load (internal/modules/cjs/loader.js:641:32) \n at Function.Module._load (internal/modules/cjs/loader.js:556:12) \n at Function.Module.runMain (internal/modules/cjs/loader.js:837:10) \n at internal/main/run_main_module.js:17:11\n```", "```js\nconst fun = function() {\n    const item = 10;\n    for(let i = 0; i < item; i++) {\n        const tempObj = {};\n        tempObj[i] = \"what \" + i;\n    }\n    return function() {\n        console.log('we will have access to other things');\n        const alternative = 'what';\n        debugger;\n        return item;\n    }\n}\n\nconsole.log('this is some code');\nconst x = 'what';\ndebugger;\nfun()();\n```", "```js\n > node --inspect bad_code.js \n```", "```js\nDebugger listening on ws://127.0.0.1:9229/6abd394d-d5e0-4bba-8b28-69069d2cb800\n```", "```js\nchrome-devtools://devtools/bundled/js_app.html?experiments=true&v8only=true&ws=<url>\n```"]