["```kt\nobject TodoListDBContract {\n\n        const val DATABASE_VERSION = 1\n        const val DATABASE_NAME = \"todo_list_db\"\n\n    class TodoListItem: BaseColumns {\n        companion object {\n            const val TABLE_NAME = \"todo_list_item\"\n            const val COLUMN_NAME_TASK = \"task_details\"\n            const val COLUMN_NAME_DEADLINE = \"task_deadline\"\n            const val COLUMN_NAME_COMPLETED = \"task_completed\"\n        }\n    }\n\n}\n```", "```kt\nclass TodoListDBHelper(context: Context): SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {\n```", "```kt\nprivate val SQL_CREATE_ENTRIES = \"CREATE TABLE \" + TodoListDBContract.TodoListItem.TABLE_NAME + \" (\" +\n        BaseColumns._ID + \" INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n        TodoListDBContract.TodoListItem.COLUMN_NAME_TASK + \" TEXT, \" +\n        TodoListDBContract.TodoListItem.COLUMN_NAME_DEADLINE + \" TEXT, \" +\n        TodoListDBContract.TodoListItem.COLUMN_NAME_COMPLETED + \" INTEGER)\"  // 1\n\nprivate val SQL_DELETE_ENTRIES = \"DROP TABLE IF EXISTS \" + TodoListDBContract.TodoListItem.TABLE_NAME   // 2\n\noverride fun onCreate(db: SQLiteDatabase) { // 3\n db.execSQL(SQL_CREATE_ENTRIES)\n}\n\noverride fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {// 4\n db.execSQL(SQL_DELETE_ENTRIES)\n onCreate(db)\n}\n\noverride fun onDowngrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n onUpgrade(db, oldVersion, newVersion)\n}\n```", "```kt\nvar taskId: Long? = null\n```", "```kt\nconstructor(taskId:Long, taskDetails: String?, taskDeadline: String?, completed: Boolean) : this(taskDetails, taskDeadline) {\n        this.taskId = taskId\n        this.completed = completed\n    }\n```", "```kt\nfun addNewTask(task: Task): Task {\n        val db = this.writableDatabase // 1\n\n// 2\n        val values = ContentValues()\n        values.put(TodoListDBContract.TodoListItem.COLUMN_NAME_TASK, task.taskDetails)\n        values.put(TodoListDBContract.TodoListItem.COLUMN_NAME_DEADLINE, task.taskDeadline)\n        values.put(TodoListDBContract.TodoListItem.COLUMN_NAME_COMPLETED, task.completed)\n\n        val taskId = db.insert(TodoListDBContract.TodoListItem.TABLE_NAME, null, values); // 3\n        task.taskId = taskId\n\n        return task\n    }\n```", "```kt\nprivate var dbHelper: TodoListDBHelper = TodoListDBHelper(this)\n```", "```kt\noverride fun onDestroy() {\n    dbHelper.close()\n    super.onDestroy()\n}\n```", "```kt\ntodoListItems.add(Task(taskDetails, \"\"))\n```", "```kt\nval addNewTask = dbHelper.addNewTask(Task(taskDetails, \"\"))\ntodoListItems.add(addNewTask)\n```", "```kt\nfun retrieveTaskList(): ArrayList<Task> {\n    val db = this.readableDatabase  // 1\n\n    val projection = arrayOf<String>(BaseColumns._ID,\n            TodoListDBContract.TodoListItem.COLUMN_NAME_TASK,\n            TodoListDBContract.TodoListItem.COLUMN_NAME_DEADLINE,\n            TodoListDBContract.TodoListItem.COLUMN_NAME_COMPLETED) // 2\n\n    val cursor = db.query(TodoListDBContract.TodoListItem.TABLE_NAME, projection, \n            null, null, null, null, null) // 3\n\n    val taskList = ArrayList<Task>()\n// 4\n    while (cursor.moveToNext()) {\n        val task = Task(cursor.getLong(cursor.getColumnIndexOrThrow(BaseColumns._ID)),\n                cursor.getString(cursor.getColumnIndexOrThrow(TodoListDBContract.TodoListItem.COLUMN_NAME_TASK)),\n                cursor.getString(cursor.getColumnIndexOrThrow(TodoListDBContract.TodoListItem.COLUMN_NAME_DEADLINE)),\n                cursor.getInt(cursor.getColumnIndexOrThrow(TodoListDBContract.TodoListItem.COLUMN_NAME_COMPLETED)) == 1)\n        taskList.add(task)\n    }\n    cursor.close() // 5\n\n    return taskList\n}\n```", "```kt\n    todoListItems = dbHelper.retrieveTaskList();\n```", "```kt\nprivate fun populateListView() {\n    todoListItems = dbHelper.retrieveTaskList();\n    listAdapter = TaskListAdapter(this, todoListItems)\n    listView?.adapter = listAdapter\n}\n```", "```kt\n    fun updateTask(task: Task) {\n        val db = this.writableDatabase // 1\n\n        // 2\n        val values = ContentValues()\n        values.put(TodoListDBContract.TodoListItem.COLUMN_NAME_TASK, task.taskDetails)\n        values.put(TodoListDBContract.TodoListItem.COLUMN_NAME_DEADLINE, task.taskDeadline)\n        values.put(TodoListDBContract.TodoListItem.COLUMN_NAME_COMPLETED, task.completed)\n\n        val selection = BaseColumns._ID + \" = ?\" // 3\n        val selectionArgs = arrayOf(task.taskId.toString()) // 4\n\n        db.update(TodoListDBContract.TodoListItem.TABLE_NAME, values, selection, selectionArgs) // 5\n\n    }\n```", "```kt\ndbHelper.updateTask(todoListItems[selectedItem])\n```", "```kt\ntodoListItems[selectedItem].taskDetails = taskDetails\n```", "```kt\noverride fun onDialogPositiveClick(dialog: DialogFragment, taskDetails:String) {\n        if(\"newtask\" == dialog.tag) {\n            val addNewTask = dbHelper.addNewTask(Task(taskDetails, \"\"))\n            todoListItems.add(addNewTask)\n            listAdapter?.notifyDataSetChanged()\n\n            Snackbar.make(fab, \"Task Added Successfully\", Snackbar.LENGTH_LONG).setAction(\"Action\", null).show()\n\n        } else if (\"updatetask\" == dialog.tag) {\n            todoListItems[selectedItem].taskDetails = taskDetails\n            dbHelper.updateTask(todoListItems[selectedItem])\n\n            listAdapter?.notifyDataSetChanged()\n\n            selectedItem = -1\n\n            Snackbar.make(fab, \"Task Updated Successfully\", Snackbar.LENGTH_LONG).setAction(\"Action\", null).show()\n        }\n    }\n```", "```kt\ndbHelper.updateTask(todoListItems[selectedItem])\n```", "```kt\ntodoListItems[selectedItem].completed = true\n```", "```kt\n    fun deleteTask(task:Task) {\n        val db = this.writableDatabase // 1\n        val selection = BaseColumns._ID + \" = ?\" // 2\n        val selectionArgs = arrayOf(task.taskId.toString()) // 3\n        db.delete(TodoListDBContract.TodoListItem.TABLE_NAME, selection, selectionArgs) // 4\n    }\n```", "```kt\ntodoListItems.removeAt(selectedItem)\n```", "```kt\nval selectedTask = todoListItems[selectedItem]\ntodoListItems.removeAt(selectedItem)\ndbHelper.deleteTask(selectedTask)\n```", "```kt\nimplementation 'android.arch.persistence.room:runtime:1.0.0'\nannotationProcessor 'android.arch.persistence.room:compiler:1.0.0'\nkapt \"android.arch.persistence.room:compiler:1.0.0\"\n```", "```kt\n@Entity(tableName = TodoListDBContract.TodoListItem.TABLE_NAME)\nclass Task() {\n\n    @PrimaryKey(autoGenerate = true)\n    @ColumnInfo(name = BaseColumns._ID)\n    var taskId: Long? = null\n\n    @ColumnInfo(name = TodoListDBContract.TodoListItem.COLUMN_NAME_TASK)\n    var taskDetails: String? = null\n\n    @ColumnInfo(name = TodoListDBContract.TodoListItem.COLUMN_NAME_DEADLINE)\n    var taskDeadline: String? = null\n\n    @ColumnInfo(name = TodoListDBContract.TodoListItem.COLUMN_NAME_COMPLETED)\n    var completed: Boolean? = false\n\n    @Ignore\n    constructor(taskDetails: String?, taskDeadline: String?): this() {\n        this.taskDetails = taskDetails\n        this.taskDeadline = taskDeadline\n    }\n\n    constructor(taskId:Long, taskDetails: String?, taskDeadline: String?, completed: Boolean) : this(taskDetails, taskDeadline) {\n        this.taskId = taskId\n        this.completed = completed\n    }\n\n}\n```", "```kt\n@Dao\ninterface TaskDAO {\n\n    @Query(\"SELECT * FROM \" + TodoListDBContract.TodoListItem.TABLE_NAME)\n    fun retrieveTaskList(): List<Task> \n\n    @Insert\n    fun addNewTask(task: Task): Long   \n\n    @Update\n    fun updateTask(task: Task)  \n\n     @Delete\n     fun deleteTask(task: Task)  \n\n}\n```", "```kt\n@Database(entities = arrayOf(Task::class), version = TodoListDBContract.DATABASE_VERSION)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun taskDao(): TaskDAO\n}\n```", "```kt\nprivate var database: AppDatabase? = null\n```", "```kt\ndatabase = Room.databaseBuilder(applicationContext, AppDatabase::class.java, DATABASE_NAME).build()\n```", "```kt\nprivate class RetrieveTasksAsyncTask(private val database: AppDatabase?) : AsyncTask<Void, Void, List<Task>>() {\n\n    override fun doInBackground(vararg params: Void): List<Task>? {\n        return database?.taskDao()?.retrieveTaskList()\n    }\n}\n```", "```kt\ntodoListItems = dbHelper.retrieveTaskList();\n```", "```kt\ntodoListItems = RetrieveTasksAsyncTask(database).execute().get() as ArrayList<Task>\n```", "```kt\ndatabase = Room.databaseBuilder(applicationContext, AppDatabase::class.java, DATABASE_NAME)\n        .addMigrations(object : Migration(TodoListDBContract.DATABASE_VERSION - 1, TodoListDBContract.DATABASE_VERSION) {\n            override fun migrate(database: SupportSQLiteDatabase) {\n            }\n        }).build()\n```", "```kt\nprivate class AddTaskAsyncTask(private val database: AppDatabase?, private val newTask: Task) : AsyncTask<Void, Void, Long>() {\n\n    override fun doInBackground(vararg params: Void): Long? {\n        return database?.taskDao()?.addNewTask(newTask)\n    }\n}\n```", "```kt\nval addNewTask = dbHelper.addNewTask(Task(taskDetails, \"\"))\n```", "```kt\nvar addNewTask = Task(taskDetails, \"\")\n\naddNewTask.taskId = AddTaskAsyncTask(database, addNewTask).execute().get()\n```", "```kt\nprivate class UpdateTaskAsyncTask(private val database: AppDatabase?, private val selectedTask: Task) : AsyncTask<Void, Void, Unit>() {\n\n    override fun doInBackground(vararg params: Void): Unit? {\n        return database?.taskDao()?.updateTask(selectedTask)\n    }\n}\n```", "```kt\ndbHelper.updateTask(todoListItems[selectedItem])\n```", "```kt\nUpdateTaskAsyncTask(database, todoListItems[selectedItem]).execute()\n```", "```kt\ndbHelper.updateTask(todoListItems[selectedItem])\n```", "```kt\nUpdateTaskAsyncTask(database, todoListItems[selectedItem]).execute()\n```", "```kt\nprivate class DeleteTaskAsyncTask(private val database: AppDatabase?, private val selectedTask: Task) : AsyncTask<Void, Void, Unit>() {\n\n    override fun doInBackground(vararg params: Void): Unit? {\n        return database?.taskDao()?.deleteTask(selectedTask)\n    }\n}\n```", "```kt\ndbHelper.deleteTask(selectedTask)\n```", "```kt\nDeleteTaskAsyncTask(database, selectedTask).execute()\n```"]