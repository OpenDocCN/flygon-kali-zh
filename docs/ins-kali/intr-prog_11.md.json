["```java\n{ \n  x = 42; \n  y = method(7, x); \n  System.out.println(\"Example\"); \n}\n\n```", "```java\nif(booelan expression){\n  //do something\n} \n```", "```java\nif(true) System.out.println(\"true\");    //1: true\nif(false) System.out.println(\"false\");  //2:\n\nint x = 1, y = 5;\nif(x > y) System.out.println(\"x > y\");  //3:\nif(x < y) System.out.println(\"x < y\");  //4: x < y\n\nif((x + 5) > y) {                       //5: x + 5 > y\n  System.out.println(\"x + 5 > y\");    \n  x = y;\n}\n\nif(x == y){                             //6: x == y\n  System.out.println(\"x == y\");       \n}\n\n```", "```java\n       if(x > y) System.out.println(\"x > y\"); \n       x = y;\n```", "```java\nif(x > y){\n  System.out.println(\"x > y\");\n  if(x == 3){\n    System.out.println(\"x == 3\");\n  }\n  if(y == 3){\n    System.out.println(\"y == 3\");\n    System.out.println(\"x == \" + x);\n  }\n}\n```", "```java\nif(Boolean expression){\n  //do something\n} else {\n  //do something else\n}\n```", "```java\nint x = 1, y = 1; \nif(x == y){                        \n  System.out.println(\"x == y\");  //prints: x == y\n  x = y - 1;\n} else {\n  System.out.println(\"x != y\");  \n}\n\nif(x == y){                        \n  System.out.println(\"x == y\");\n} else {\n  System.out.println(\"x != y\");  //prints: x != y\n}\n```", "```java\n  if(n > 5){\n    System.out.println(\"n > 5\");\n  } else {\n    if (n == 5) {\n      System.out.println(\"n == 5\");\n    } else {\n      if (n == 4) {\n        System.out.println(\"n == 4\");\n      } else {\n        System.out.println(\"n < 4\");\n      }\n    }\n  }\n}\n```", "```java\nif(n > 5){\n  System.out.println(\"n > 5\");\n} else if (n == 5) {\n  System.out.println(\"n == 5\");\n} else if (n == 4) {\n  System.out.println(\"n == 4\");\n} else {\n  System.out.println(\"n < 4\");\n}\n```", "```java\nif(n > 5){\n  System.out.println(\"n > 5\");\n} else if (n == 5) {\n  System.out.println(\"n == 5\");\n} else if (n == 4) {\n  System.out.println(\"n == 4\");\n} \n```", "```java\nif(x == 5){\n  //do something\n} else if (x == 7) {\n  //do something else\n} else if (x == 12) {\n  //do something different\n} else if (x = 50) {\n  //do something yet more different\n} else {\n  //do something completely different\n}\n```", "```java\nswitch(x){\n  case 5:\n    //do something\n    break;\n  case 7:\n    //do something else\n    break;\n  case 12:\n    //do something different\n    break;\n  case 50:\n    //do something yet more different\n    break;\n  default:\n    //do something completely different\n}\n```", "```java\nvoid switchDemo(int n){\n  switch(n + 1){\n    case 1:\n      System.out.println(\"case 1: \" + n);\n      break;\n    case 2:\n      System.out.println(\"case 2: \" + n);\n      break;\n    default:\n      System.out.println(\"default: \" + n);\n      break;\n  }\n}\n```", "```java\nswitchDemo(0);     //prints: case1: 0\nswitchDemo(1);     //prints: case2: 1\nswitchDemo(2);     //prints: default: 2\n\n```", "```java\nswitch(n + 1){\n  case 1:\n    System.out.println(\"case 1: \" + n);\n    break;\n  case 2:\n    System.out.println(\"case 2: \" + n);\n}\n```", "```java\nwhile (Boolean expression){\n  //do something\n}\n```", "```java\nint i = 0;\nwhile(i++ < 5){\n  System.out.print(i + \" \");   //prints: 1 2 3 4 5\n}\n```", "```java\ndouble result = 0d;\nwhile (result < 1d){\n  result += tryAndGetValue();\n  System.out.println(result);\n}\n```", "```java\ndouble tryAndGetValue(){\n  return Math.random();\n}\n```", "```java\ndouble result = 0d;\nwhile ((result += tryAndGetValue()) < 1d){\n  System.out.println(result);\n}\n```", "```java\ndouble result = 0d;\nwhile ((result += Math.random()) < 1d){\n  System.out.println(result);\n}\n```", "```java\ndo {\n  //statement or block\n} while (Boolean expression)\n```", "```java\nint i = 0;\ndo {\n  System.out.print(i + \" \");   //prints: 0 1 2 3 4 5\n} while(i++ < 5);\n```", "```java\ndouble result = 0d;\ndo {\n  result += tryAndGetValue();\n  System.out.println(result);\n} while (result < 1d);\n```", "```java\ndouble result = 0d;\ndo {\n  System.out.println(result);\n} while ((result += tryAndGetValue()) < 1d);\n\n```", "```java\ndouble result = 0d;\ndo {\n  System.out.println(result);\n} while ((result += Math.random()) < 1d);\n\n```", "```java\nfor(ListInit; Boolean Expression; ListUpdate) block or statement\n```", "```java\nfor(DeclInitExpr; Boolean Expression; IncrDecrExpr) block or statement\n```", "```java\nfor (int i=0; i < 3; i++){\n  System.out.print(i + \" \");  //prints: 0 1 2\n}\n```", "```java\nint k = 0;\nfor (;;){\n  System.out.print(k++ + \" \");     //prints: 0 1 2\n  if(k > 2) break;\n}\n```", "```java\nfor (int i=0; i < 3;){\n  System.out.print(i++ + \" \"); //prints: 0 1 2\n}\n\nfor (int i=2; i > 0; i--){\n  System.out.print(i + \" \"); //prints: 2 1\n}\n```", "```java\nint[] arr = {21, 34, 5};\nfor (int i=0; i < arr.length; i++){\n  System.out.print(arr[i] + \" \");  //prints: 21 34 5\n}\n```", "```java\n<Type> arr = ...;              //an array or any Iterable\nfor (<Type> a: arr){\n  System.out.print(a + \" \");  \n}\n```", "```java\nint[] arr = {21, 34, 5};\nfor (int a: arr){\n  System.out.print(a + \" \");  //prints: 21 34 5\n}\n```", "```java\nList<String> list = List.of(\"Bob\", \"Joe\", \"Jill\");\nfor (String s: list){\n  System.out.print(s + \" \");  //prints: Bob Joe Jill\n}\n```", "```java\nfor(ListInit; Boolean Expression; ListUpdate) block or statement\n```", "```java\nfor (int i=0, j=0; i < 3 && j < 3; ++i, ++j){\n  System.out.println(i + \" \" + j);\n}\nfor (int x=new A().getInitialValue(), i=x == -2 ? x + 2 : 0, j=0;\n  i < 3 || j < 3 ; ++i, j = i) {\n  System.out.println(i + \" \" + j);\n}\n```", "```java\nclass A{\n  int getInitialValue(){ return -2; }\n}\n```", "```java\nclass Person{\n  private int age;\n  private  String name;\n  public Person(int age, String name) {\n    this.age = age;\n    this.name = name;\n  }\n  @Override\n  public Boolean equals(Object o) {\n    if (this == o) return true;\n    Person person = (Person) o;\n    return age == person.age &&\n              Objects.equals(name, person.name);\n  }\n  @Override\n  public String toString() {\n    return \"Person{age=\" + age +\n              \", name='\" + name + \"'}\";\n  }\n}\nclass Student extends Person {\n  private int year;\n\n  public Student(int age, String name, int year) {\n    super(age, name);\n    this.year = year;\n  }\n\n  @Override\n  public String toString() {\n    return \"Student{year=\" + year +\n        \", \" + super.toString() + \"}\";\n  }\n}\nclass Teacher extends Person {\n  private String subject;\n  public Teacher(int age, String name, String subject) {\n    super(age, name);\n    this.subject = subject;\n  }\n  @Override\n  public String toString() {\n    return \"Student{subject=\" + subject +\n           \", \" + super.toString() + \"}\";\n  }\n}\n```", "```java\nList<Person> list = \n  List.of(new Teacher(32, \"Joe\", \"History\"),\n          new Student(29,\"Joe\", 4),\n          new Student(28,\"Jill\", 3),\n          new Teacher(33, \"ALice\", \"Maths\"));\nPerson personOfInterest = new Person(29,\"Joe\");\nPerson person = null;\nfor (Person p: list){\n  System.out.println(p);\n  if(p.equals(personOfInterest)){\n    person = p;\n    break;\n  }\n}\nif(person == null){\n  System.out.println(\"Not found: \" + personOfInterest);\n} else {\n  System.out.println(\"Found: \" + person);\n}\n```", "```java\nPerson personOfInterest = new Person(30,\"Joe\");\n\n```", "```java\nint[][][] data = {\n        {{1,0,2},{1,2,0},{2,1,0},{0,3,0}},\n        {{1,1,1},{1,3,0},{2,0,1},{1,0,1}}};\n\n```", "```java\nint[][][] data = {\n        {{1,0,2},{1,2,0},{2,1,0},{0,3,0}},\n        {{1,1,1},{1,3,0},{2,0,1},{1,0,1}}};\nint threshold = 4;\nint x = 0, y = 0;\nBoolean isFound = false;\nfor(int[][] dd: data){\n  y = 0;\n  for(int[] d: dd){\n    int sum = 0;\n    for(int i: d){\n      sum += i;\n      if(sum >= threshold){\n        isFound = true;\n        break;\n      }\n    }\n    if(isFound){\n      break;\n    }\n    y++;\n  }\n  if(isFound){\n    break;\n  }\n  x++;\n}\nSystem.out.println(\"isFound=\" + isFound + \", x=\" + x + \", y=\" + y); \n//prints: isFound=true, x=1, y=1\n```", "```java\nint[][][] data = {\n        {{1,0,2},{1,2,0},{2,1,0},{0,3,0}},\n        {{1,1,1},{1,3,0},{2,0,1},{1,0,1}}};\nint threshold = 4;\nint x = 0, y = 0;\nBoolean isFound = false;\nexit:\nfor(int[][] dd: data){\n  y = 0;\n  for(int[] d: dd){\n    int sum = 0;\n    for(int i: d){\n      sum += i;\n      if(sum >= threshold){\n        isFound = true;\n        break exit;\n      }\n    }\n    y++;\n  }\n  x++;\n}\nSystem.out.println(\"isFound=\" + isFound + \", x=\" + x + \", y=\" + y); \n//prints: isFound=true, x=1, y=1\n\n```", "```java\nint[][][] data = {\n        {{1,1,2},{0,3,0},{2,4,1},{2,3,2}},\n        {{0,2,0},{1,3,4},{2,0,1},{2,2,2}}};\n```", "```java\nint[][][] data = {\n        {{1,1,2},{0,3,0},{2,4,1},{2,3,2}},\n        {{0,2,0},{1,3,4},{2,0,1},{2,2,2}}};\nint threshold = 4;\nint x = 0, y;\nfor(int[][] dd: data){\n  y = 0;\n  for(int[] d: dd){\n    int sum = 0;\n    for(int i: d){\n      if(i == 1){\n        continue;\n      }\n      sum += i;\n    }\n    if(sum >= threshold){\n      System.out.println(\"sum=\" + sum + \", x=\" + x + \", y=\" + y);\n    }\n    y++;\n  }\n  x++;\n}\n```", "```java\nint[][][] data = {\n        {{1,1,2},{0,3,0},{2,4,1},{2,3,2}},\n        {{0,2,0},{1,3,4},{2,0,1},{2,2,2}}};\nint threshold = 4;\nint x = 0, y;\nfor(int[][] dd: data){\n  y = 0;\n  cont: for(int[] d: dd){\n    int sum = 0;\n    for(int i: d){\n      if(i == 1){\n        y++;\n        continue cont;\n      }\n      sum += i;\n    }\n    if(sum >= threshold){\n      System.out.println(\"sum=\" + sum + \", x=\" + x + \", y=\" + y);\n    }\n    y++;\n  }\n  x++;\n}\n```", "```java\nclass ConstructorDemo{\n  private int field;\n  public ConstructorDemo(int i) {\n    this.field = i;\n    return;\n  }\n}\n```", "```java\npublic String method(int n){\n  if(n == 1){\n    return \"One\";\n  } else {\n    return \"Not one\";\n  }\n}\n```", "```java\npublic static String methodWithManyReturns(){\n  if(true){\n    return \"The only one returned\";\n  }\n  if(true){\n    return \"Is never reached\";\n  }\n  return \"Is never reached\";\n}\n```", "```java\npublic Boolean method01(int n){\n  if(n < 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\npublic Boolean sameAsMethod01(int n){\n  if(n < 0) {\n    return true;\n  }\n  return false;\n}\n\npublic Boolean sameAsAbove(int n){\n  return n < 0 ? true : false;\n}\n\npublic int method02(int n){\n  if(n < 0) {\n    return 1;\n  } else if(n == 0) {\n    return 2;\n  } else if (n == 1){\n    return 3;\n  } else {\n    return 4;\n  }\n}\npublic int methodSameAsMethod02(int n){\n  if(n < 0) {\n    return 1;\n  }\n  switch(n) {\n    case 0:\n      return 2;\n    case 1:\n      return 3;\n    default:\n      return 4;\n  }\n}\n```", "```java\npublic Integer methodBoxing(){\n  return 42;\n}\n\npublic int methodUnboxing(){\n  return Integer.valueOf(42);\n}\n\npublic int methodWidening(){\n  byte b = 42;\n  return b;\n}\n\npublic byte methodNarrowing(){\n  int n = 42;\n  return (byte)n;\n}\n```", "```java\nList<Person> list = \n  List.of(new Teacher(32, \"Joe\", \"History\"),\n          new Student(29,\"Joe\", 4),\n          new Student(28,\"Jill\", 3),\n          new Teacher(33, \"ALice\", \"Maths\"));\nPerson personOfInterest = new Person(29,\"Joe\");\nPerson person = null;\nfor (Person p: list){\n  System.out.println(p);\n  if(p.equals(personOfInterest)){\n    person = p;\n    break;\n  }\n}\nif(person == null){\n  System.out.println(\"Not found: \" + personOfInterest);\n} else {\n  System.out.println(\"Found: \" + person);\n}\n```", "```java\nPerson findPerson(List<Person> list, Person personOfInterest){\n  Person person = null;\n  for (Person p: list){\n    System.out.println(p);\n    if(p.equals(personOfInterest)){\n      person = p;\n      break;\n    }\n  }\n  return person;\n}\n```", "```java\nList<Person> list = List.of(new Teacher(32, \"Joe\", \"History\"),\n        new Student(29,\"Joe\", 4),\n        new Student(28,\"Jill\", 3),\n        new Teacher(33, \"ALice\", \"Maths\"));\nPerson personOfInterest = new Person(29,\"Joe\");\nPerson person = findPerson(list, personOfInterest);\nif(person == null){\n  System.out.println(\"Not found: \" + personOfInterest);\n} else {\n  System.out.println(\"Found: \" + person);\n}\n```", "```java\nPerson findPerson(List<Person> list, Person personOfInterest){\n  for (Person p: list){\n    System.out.println(p);\n    if(p.equals(personOfInterest)){\n      return p;\n    }\n  }\n  return null;\n}\n```", "```java\nvoid findPerson2(List<Person> list, Person personOfInterest){\n  for (Person p: list){\n    System.out.println(p);\n    if(p.equals(personOfInterest)){\n      System.out.println(\"Found: \" + p);\n      return;\n    }\n  }\n  System.out.println(\"Not found: \" + personOfInterest);\n  return;  //this statement is optional\n}\n```", "```java\nList<Person> list = List.of(new Teacher(32, \"Joe\", \"History\"),\n        new Student(29,\"Joe\", 4),\n        new Student(28,\"Jill\", 3),\n        new Teacher(33, \"ALice\", \"Maths\"));\nPerson personOfInterest = new Person(29,\"Joe\");\nfindPerson(list, personOfInterest);\n```", "```java\nList<Person> list = List.of(new Teacher(32, \"Joe\", \"History\"),\n        new Student(29,\"Joe\", 4),\n        new Student(28,\"Jill\", 3),\n        new Teacher(33, \"ALice\", \"Maths\"));\nfindPerson(list, new Person(29, \"Joe\");\n\n```", "```java\nvoid exceptionCaught(){\n  try {\n    method2();\n  } catch (Exception ex){\n    ex.printStackTrace();\n  }\n}\n\nvoid method2(){\n  method1(null);\n}\n\nvoid method1(String s){\n  s.equals(\"whatever\");\n}\n```", "```java\nvoid method1(String s){\n  if(s == null){\n    throw new NullPointerException();\n  }\n}\n```", "```java\nvoid method1(String s){\n  if(s == null){\n    throw new NullPointerException(\"Parameter String is null\");\n  }\n}\n```", "```java\nvoid method1(String s){\n  if(s == null){\n    throw new RuntimeException(\"Parameter String is null\");\n  }\n}\n```", "```java\nvoid exceptionNotCaught(){\n  method2();\n}\n\nvoid method2(){\n  method1(null);\n}\n\nvoid method1(String s){\n  s.equals(\"whatever\");\n}\n```", "```java\nthrow new Exception(\"Something happened\");\n\nException ex = new Exception(\"Something happened\");\nthrow ex;\n\nThrowable thr = new Exception(\"Something happened\");\nthrow thr;\n\nthrow null;\n```", "```java\nthrow null;\n\nthrow new NullPointerException;\n```", "```java\nclass MyNpe extends NullPointerException{\n  public MyNpe(String message){\n    super(message);\n  }\n  //whatever code you need to have here\n}\n\nclass MyRuntimeException extends RuntimeException{\n  public MyRuntimeException(String message){\n    super(message);\n  }\n  //whatever code you need to have here\n}\n\nclass MyThrowable extends Throwable{\n  public MyThrowable(String message){\n    super(message);\n  }\n  //whatever code you need to have here\n}\n\nclass MyException extends Exception{\n  public MyException(String message){\n    super(message);\n  }\n  //whatever code you need to have here\n}\n```", "```java\nvoid exceptionCaught(){\n  try {\n    method2();\n  } catch (NullPointerException ex){\n    System.out.println(\"NPE caught\");\n    ex.printStackTrace();\n  } catch (RuntimeException ex){\n    System.out.println(\"RuntimeException caught\");\n    ex.printStackTrace();\n  } catch (Exception ex){\n    System.out.println(\"Exception caught\");\n    ex.printStackTrace();\n  }\n}\n```", "```java\nvoid method1(String s){\n  throw new NullPointerException(\"Parameter String is null\");\n}\n```", "```java\nvoid method1(String s){\n  throw new RuntimeException(\"Parameter String is null\");\n}\n```", "```java\nvoid method1(String s){\n  throw new ArrayIndexOutOfBoundsException(\"Index ... is bigger \" +\n                                        \"than the array length ...\");\n}\n```", "```java\nvoid method1(String s) {\n  //some input data validation \n  throw new InstantiationException(\"No value for the field\" +\n                                   \" someField of SomeClass.\");\n}\n```", "```java\n        void method1(String s) throws Exception{\n          //some input data validation \n          throw new InstantiationException(\"No value for the field\" +\n                                           \" someField of SomeClass.\");\n        }\n```", "```java\nvoid method2() throws Exception{\n  method1(null);\n}\n```", "```java\nvoid exceptionCaught(){\n  try {\n    method2();\n  } catch (NullPointerException ex){\n    System.out.println(\"NPE caught\");\n    ex.printStackTrace();\n  } catch (RuntimeException ex){\n    System.out.println(\"RuntimeException caught\");\n    ex.printStackTrace();\n  } catch (Exception ex){\n    System.out.println(\"Exception caught\");\n    ex.printStackTrace();\n  }\n}\n\nvoid method2() throws Exception{\n  method1(null);\n}\n\nvoid method1(String s) throws Exception{\n  throw new InstantiationException(\"No value for the field\" +\n                                           \" someField of SomeClass.\");\n}\n```", "```java\nvoid method1(String s) \n           throws InstantiationException, InterruptedException {\n  //some input data validation \n  if(some data missing){\n    throw new InstantiationException(\"No value for the field\" +\n                                     \" someField of SomeClass.\");\n  }\n  //some other code\n  if(some other reason){\n    throw new InterruptedException(\"Reason...\"); //checked exception \n  }\n}\n```", "```java\nvoid method1(String s) throws Exception {\n  //some input data validation \n  if(some data missing){\n    throw new InstantiationException(\"No value for the field\" +\n                                     \" someField of SomeClass.\");\n  }\n  //some other code\n  if(some other reason){\n    throw new InterruptedException(\"Reason...\"); //checked exception \n  }\n}\n```", "```java\n//Unchecked custom exception\nclass MyRuntimeException extends RuntimeException{\n  public MyRuntimeException(String message){\n    super(message);\n  }\n  //whatever code you need to have here\n}\n\n//Checked custom exception\nclass MyException extends Exception{\n  public MyException(String message){\n    super(message);\n  }\n  //whatever code you need to have here\n}\n```", "```java\ntry {\n  //code of the try block\n} catch (...){\n  //optional catch block code\n} finally {\n  //code of the finally block\n}\n```", "```java\nConnection conn = null;\ntry {\n  conn = createConnection();\n  //code of the try block\n} catch (...){\n  //optional catch block code\n} finally {\n  if(conn != null){\n    conn.close();\n  }\n}\n```", "```java\nvoid exceptionCaught(){\n  Exception exf = null;\n  try {\n    method2();\n  } catch (NullPointerException ex){\n    exf = ex;\n    System.out.println(\"NPE caught\");\n  } catch (RuntimeException ex){\n    exf = ex;\n    System.out.println(\"RuntimeException caught\");\n  } catch (Exception ex){\n    exf = ex;\n    System.out.println(\"Exception caught\");\n  } finally {\n    if(exf != null){\n      exf.printStackTrace();\n    }\n  }\n```", "```java\npublic class AssertDemo {\n  public static void main(String... args) {\n    int x = 2;\n    assert x > 1 : \"x <= 1\";\n    assert x == 1 : \"x != 1\";\n  }\n}\n```", "```java\nwhile(true){\n  System.out.println(\"try and stop me\"); //prints indefinitely\n}\n```", "```java\nfor (;;){\n  System.out.println(\"try and stop me\"); //prints indefinitely\n}\n\n```", "```java\nfor (int x=2; x > 0; x--){\n  System.out.println(x++ + \" \"); //prints 2 indefinitely\n}\n\n```"]