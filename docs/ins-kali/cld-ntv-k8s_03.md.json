["```\n\u00a0\u00a0\u00a0\u00a0\u00a0curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 \\\n&& sudo install minikube-darwin-amd64 /usr/local/bin/minikube\n```", "```\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \\\n&& sudo install minikube-linux-amd64 /usr/local/bin/minikube\n```", "```\neksctl create cluster \\\n--name prod \\\n--version 1.17 \\\n--nodegroup-name standard-workers \\\n--node-type t2.small \\\n--nodes 3 \\\n--nodes-min 1 \\\n--nodes-max 4 \\\n--node-ami auto\n```", "```\nkubectl get nodes\n```", "```\ngcloud config set project proj_id\ngcloud config set compute/zone compute_zone\n```", "```\ngcloud container clusters create dev \\\n\u00a0\u00a0\u00a0\u00a0--zone [compute_zone]\n```", "```\ngcloud container clusters create dev \\\n\u00a0\u00a0\u00a0\u00a0--zone [compute_zone_1]\n\u00a0\u00a0\u00a0\u00a0--node-locations [compute_zone_1],[compute_zone_2],[etc]\n```", "```\ngcloud container clusters create dev \\\n\u00a0\u00a0\u00a0\u00a0--region [region] \\\n\u00a0\u00a0\u00a0\u00a0--node-locations [compute_zone_1],[compute_zone_2],[etc]\n```", "```\ngcloud container clusters get-credentials [cluster_name]\n```", "```\nkubectl get nodes\n```", "```\naz ad sp create-for-rbac --skip-assignment --name myClusterPrincipal\n```", "```\n{\n\u00a0\u00a0\"appId\": \"559513bd-0d99-4c1a-87cd-851a26afgf88\",\n\u00a0\u00a0\"displayName\": \"myClusterPrincipal\",\n\u00a0\u00a0\"name\": \"http://myClusterPrincipal\",\n\u00a0\u00a0\"password\": \"e763725a-5eee-892o-a466-dc88d980f415\",\n\u00a0\u00a0\"tenant\": \"72f988bf-90jj-41af-91ab-2d7cd011db48\"\n}\n```", "```\naz aks create \\\n\u00a0\u00a0\u00a0\u00a0--resource-group devResourceGroup \\\n\u00a0\u00a0\u00a0\u00a0--name myCluster \\\n\u00a0\u00a0\u00a0\u00a0--node-count 2 \\\n\u00a0\u00a0\u00a0\u00a0--service-principal <appId> \\\n\u00a0\u00a0\u00a0\u00a0--client-secret <password> \\\n\u00a0\u00a0\u00a0\u00a0--generate-ssh-keys\n```", "```\naz aks get-credentials --resource-group devResourceGroup --name myCluster\n```", "```\nkubeadm init\n```", "```\nkubeadm join --token [TOKEN] [IP ON MASTER]:[PORT ON MASTER] --discovery-token-ca-cert-hash sha256:[HASH VALUE]\n```", "```\nscp root@[IP OF MASTER]:/etc/kubernetes/admin.conf .\nkubectl --kubeconfig ./admin.conf get nodes \n```", "```\nbrew update && brew install kops\n```", "```\ncurl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '\"' -f 4)/kops-linux-amd64\nchmod +x kops-linux-amd64\nsudo mv kops-linux-amd64 /usr/local/bin/kops\n```", "```\naws iam create-group --group-name kops_users\n```", "```\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops\naws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops\n```", "```\naws iam create-user --user-name kops\naws iam add-user-to-group --user-name kops --group-name kops_users\naws iam create-access-key --user-name kops\n```", "```\naws configure\nexport AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)\nexport AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)\n```", "```\naws s3api create-bucket \\\n\u00a0\u00a0\u00a0\u00a0--bucket my-domain-dev-state-store \\\n\u00a0\u00a0\u00a0\u00a0--region us-east-1\n```", "```\naws s3api put-bucket-versioning --bucket prefix-example-com-state-store\u00a0\u00a0--versioning-configuration Status=Enabled\naws s3api put-bucket-encryption --bucket prefix-example-com-state-store --server-side-encryption-configuration '{\"Rules\":[{\"ApplyServerSideEncryptionByDefault\":{\"SSEAlgorithm\":\"AES256\"}}]}'\n```", "```\nexport NAME=devcluster.k8s.local\nexport KOPS_STATE_STORE=s3://my-domain-dev-cluster-state-store\n```", "```\nkops create cluster \\\n\u00a0\u00a0\u00a0\u00a0--node-count 3 \\\n\u00a0\u00a0\u00a0\u00a0--zones us-east-1a,us-east-1b,us-east-1c \\\n\u00a0\u00a0\u00a0\u00a0--master-zones us-east-1a,us-east-1b,us-east-1c \\\n\u00a0\u00a0\u00a0\u00a0--node-size t2.medium \\\n\u00a0\u00a0\u00a0\u00a0--master-size t2.medium \\\n\u00a0\u00a0\u00a0\u00a0${NAME}\n```", "```\nkops edit cluster ${NAME}\n```", "```\nkops update cluster ${NAME} --yes\n```", "```\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n[Service]\nType=notify\nExecStart=/usr/local/bin/etcd \\\\\n\u00a0\u00a0--name ${ETCD_NAME} \\\\\n\u00a0\u00a0--cert-file=/etc/etcd/kubernetes.pem \\\\\n\u00a0\u00a0--key-file=/etc/etcd/kubernetes-key.pem \\\\\n\u00a0\u00a0--peer-cert-file=/etc/etcd/kubernetes.pem \\\\\n\u00a0\u00a0--peer-key-file=/etc/etcd/kubernetes-key.pem \\\\\n\u00a0\u00a0--trusted-ca-file=/etc/etcd/ca.pem \\\\\n\u00a0\u00a0--peer-trusted-ca-file=/etc/etcd/ca.pem \\\\\n\u00a0\u00a0--peer-client-cert-auth \\\\\n\u00a0\u00a0--initial-cluster-state new \\\\\n\u00a0\u00a0--data-dir=/var/lib/etcd\nRestart=on-failure\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\n```", "```\n{\n\u00a0\u00a0sudo systemctl daemon-reload\n\u00a0\u00a0sudo systemctl enable etcd\n\u00a0\u00a0sudo systemctl start etcd\n}\n```", "```\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\n```", "```\n[Service]\nExecStart=/usr/local/bin/kube-apiserver \\\\\n\u00a0\u00a0--advertise-address=${INTERNAL_IP} \\\\\n\u00a0\u00a0--allow-privileged=true \\\\\n\u00a0\u00a0--apiserver-count=3 \\\\\n\u00a0\u00a0--audit-log-maxage=30 \\\\\n\u00a0\u00a0--audit-log-maxbackup=3 \\\\\n\u00a0\u00a0--audit-log-maxsize=100 \\\\\n\u00a0\u00a0--audit-log-path=/var/log/audit.log \\\\\n\u00a0\u00a0--authorization-mode=Node,RBAC \\\\\n\u00a0\u00a0--bind-address=0.0.0.0 \\\\\n\u00a0\u00a0--client-ca-file=/var/lib/kubernetes/ca.pem \\\\\n\u00a0\u00a0--enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\\\\n\u00a0\u00a0--etcd-cafile=/var/lib/kubernetes/ca.pem \\\\\n\u00a0\u00a0--etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\\\\n\u00a0\u00a0--etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\\\\n\u00a0\u00a0--etcd-\n\u00a0\u00a0--service-account-key-file=/var/lib/kubernetes/service-account.pem \\\\\n\u00a0\u00a0--service-cluster-ip-range=10.10.0.0/24 \\\\\n\u00a0\u00a0--service-node-port-range=30000-32767 \\\\\n\u00a0\u00a0--tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\\\\n\u00a0\u00a0--tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\\\\n\u00a0\u00a0--v=2\n```", "```\nRestart=on-failure\nRestartSec=5\n [Install]\nWantedBy=multi-user.target\n```", "```\n{\n\u00a0\u00a0sudo systemctl daemon-reload\n\u00a0\u00a0sudo systemctl enable kube-apiserver kube-controller-manager kube-scheduler\n\u00a0\u00a0sudo systemctl start kube-apiserver kube-controller-manager kube-scheduler\n}\n```", "```\n[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=containerd.service\nRequires=containerd.service\n[Service]\nExecStart=/usr/local/bin/kubelet \\\\\n\u00a0\u00a0--config=/var/lib/kubelet/kubelet-config.yaml \\\\\n\u00a0\u00a0--container-runtime=remote \\\\\n\u00a0\u00a0--container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\\\\n\u00a0\u00a0--image-pull-progress-deadline=2m \\\\\n\u00a0\u00a0--kubeconfig=/var/lib/kubelet/kubeconfig \\\\\n\u00a0\u00a0--network-plugin=cni \\\\\n\u00a0\u00a0--register-node=true \\\\\n\u00a0\u00a0--v=2\nRestart=on-failure\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\n```"]