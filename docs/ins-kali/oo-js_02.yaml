- en: Chapter 2. Primitive Data Types, Arrays, Loops, and Conditions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。原始数据类型、数组、循环和条件
- en: 'Before diving into the object-oriented features of JavaScript, let''s first
    take a look at some of the basics. This chapter walks you through the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究JavaScript的面向对象特性之前，让我们首先看一些基础知识。本章将介绍以下主题：
- en: The primitive data types in JavaScript, such as strings and numbers
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript中的原始数据类型，如字符串和数字
- en: Arrays
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Common operators, such as `+`, `-`, `delete`, and `typeof`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见运算符，如`+`、`-`、`delete`和`typeof`
- en: Flow control statements, such as loops and `if...else` conditions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程控制语句，如循环和`if...else`条件
- en: Variables
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are used to store data; they are placeholders for concrete values.
    When writing programs, it's convenient to use variables instead of the actual
    data as it's much easier to write `pi` instead of `3.141592653589793`; especially
    when it happens several times inside your program. The data stored in a variable
    can be changed after it initially assigned, hence the name **variable**. You can
    also use variables to store data that is unknown to you while you write the code,
    such as the result of a later operation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 变量用于存储数据；它们是具体值的占位符。编写程序时，使用变量而不是实际数据更方便，因为写`pi`比写`3.141592653589793`要容易得多；特别是当它在程序中多次出现时。存储在变量中的数据可以在最初分配后进行更改，因此称为**变量**。您还可以使用变量存储在编写代码时对您未知的数据，例如稍后操作的结果。
- en: 'Using a variable requires the following two steps. You will need to:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用变量需要以下两个步骤。您需要：
- en: Declare the variable
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明变量
- en: Initialize it, that is, give it a value
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化它，即给它一个值
- en: 'To declare a variable, you will use the `var` statement like the following
    piece of code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明变量，您将使用`var`语句，如下面的代码片段：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For the names of the variables, you can use any combination of letters, numbers,
    the underscore character, and the dollar sign. However, you can''t start with
    a number, which means that the following declaration of code is invalid:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于变量的名称，可以使用字母、数字、下划线字符和美元符号的任何组合。但是，不能以数字开头，这意味着以下代码声明无效：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To initialize a variable means to give it a value for the first (initial) time.
    The following are the two ways to do so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化变量意味着为第一次（初始）赋予它一个值。以下是两种方法：
- en: Declare the variable first, then initialize it
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先声明变量，然后初始化它
- en: Declare and initialize it with a single statement
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明并用单个语句初始化它
- en: 'An example of the latter is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 后者的示例如下：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now the variable named `a` contains the value `1`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在名为`a`的变量包含值`1`。
- en: 'You can declare, and optionally initialize, several variables with a single
    `var` statement; just separate the declarations with a comma, as shown in the
    following line of code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用单个`var`语句声明，并可选择初始化多个变量；只需用逗号分隔声明，如下行代码所示：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For readability, this is often written using one variable per line, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可读性，通常使用每行一个变量来编写，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The $ character in variable names**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名称中的$字符
- en: You may see the dollar sign character (`$`) used in variable names, as in `$myvar`
    or less commonly `my$var`. This character is allowed to appear anywhere in a variable
    name, although previous versions of the ECMA standard discouraged its use in handwritten
    programs and suggested it should only be used in generated code (programs written
    by other programs). This suggestion is not well respected by the JavaScript community,
    and `$` is in fact commonly used in practice as a function name.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会看到变量名称中使用美元符号字符（`$`），如`$myvar`或不太常见的`my$var`。变量名称中允许此字符出现在任何位置，尽管以前的ECMA标准版本不鼓励在手写程序中使用它，并建议它只能在生成的代码（由其他程序编写的程序）中使用。JavaScript社区并不太尊重这个建议，实际上$在实践中常用作函数名。
- en: Variables are case sensitive
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量区分大小写
- en: 'Variable names are case sensitive. You can easily verify this statement using
    your JavaScript console. Try typing the following code by pressing *Enter* after
    each line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名称区分大小写。您可以轻松通过JavaScript控制台验证此语句。尝试按下每行后的*Enter*键输入以下代码：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To save keystrokes when you enter the third line, you can type `case` and press
    the *Tab* or right arrow key. **Console** autocompletes the variable name to `case_matters`.
    Similarly, for the last line, type `CASE` and press the *Tab* key. The end result
    is shown in the following figure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入第三行时，为了节省按键次数，您可以输入`case`并按*Tab*或右箭头键。**Console**会自动将变量名补全为`case_matters`。类似地，对于最后一行，输入`CASE`并按*Tab*键。最终结果如下图所示：
- en: '![Variables are case sensitive](graphics/image_02_001-e1482738938732.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![变量区分大小写](graphics/image_02_001-e1482738938732.jpg)'
- en: 'Throughout the rest of this book, only the code for the examples is given instead
    of a screenshot, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，只提供示例的代码，而不是屏幕截图，如下所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The greater-than signs (`>`) show the code that you type; the rest is the result
    as printed in **Console**. Again, remember that when you see such code examples,
    you're strongly encouraged to type in the code yourself. Then, you can experiment
    by tweaking it a little here and there to get a better feeling of how exactly
    it works.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 大于号（`>`）显示您键入的代码；其余部分是**Console**中打印的结果。再次提醒，当您看到这样的代码示例时，强烈建议您自己键入代码。然后，您可以通过稍微调整代码来进行实验，以更好地了解其工作原理。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see in the preceding screenshot that sometimes what you type in **Console**
    results in the word **undefined**. You can simply ignore this, but if you're curious,
    here's what happens when evaluating (executing) what you type-the **Console**
    prints the returned value. Some expressions, such as `var a = 1;`, don't return
    anything explicitly, in which case, they implicitly return the special value **undefined**
    (more on in a bit). When an expression returns some value (for example, `case_matters`
    in the previous example or something such as `1 + 1`), the resulting value is
    printed out. Not all consoles print the **undefined** value; for example, the
    Firebug console.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在前面的截图中看到，有时你在**控制台**中输入的内容会导致**undefined**这个词。你可以简单地忽略它，但如果你好奇的话，当评估（执行）你输入的内容时，**控制台**会打印返回的值。一些表达式，比如`var
    a = 1;`，不会显式地返回任何东西，在这种情况下，它们会隐式地返回特殊值**undefined**（稍后会详细介绍）。当一个表达式返回某个值（例如，前面例子中的`case_matters`或类似`1
    + 1`的东西）时，结果值会被打印出来。并非所有的控制台都会打印**undefined**值；例如，Firebug控制台。
- en: Operators
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运算符
- en: 'Operators take one or two values (or variables), perform an operation, and
    return a value. Let''s check out a simple example of using an operator, just to
    clarify the terminology:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符接受一个或两个值（或变量），执行一个操作，并返回一个值。让我们看一个使用运算符的简单例子，以澄清术语：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中：
- en: The `+` symbol is the operator
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+`符号是运算符'
- en: The operation is addition
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作是加法
- en: The input values are `1` and `2` (they are also called operands)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入值是`1`和`2`（它们也被称为操作数）
- en: The result value is `3`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果值是`3`
- en: The whole thing is called an expression
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个东西被称为表达式
- en: 'Instead of using the values `1` and `2` directly in the expression, you can
    use variables. You can also use a variable to store the result of the operation
    as the following example demonstrates:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不要直接在表达式中使用值`1`和`2`，你可以使用变量。你也可以使用一个变量来存储操作的结果，如下面的例子所示：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following table lists the basic arithmetic operators:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了基本的算术运算符：
- en: '| **Operator symbol** | **Operation** | **Example** |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **运算符符号** | **操作** | **示例** |'
- en: '| `+` | Addition |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 加法 |'
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `-` | Subtraction |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 减法 |'
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `*` | Multiplication |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 乘法 |'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `/` | Division |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 除法 |'
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `%` | Modulo, the remainder of a division |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `%` | 取模，除法的余数 |'
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It''s sometimes useful to test if a number is even or odd. Using the modulo
    operator, it''s easy to do just that. All odd numbers return `1` when divided
    by `2`, while all even numbers return `0`, for example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候测试一个数字是偶数还是奇数是很有用的。使用取模运算符，很容易做到这一点。所有奇数被2整除时返回`1`，而所有偶数返回`0`，例如：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `++` | Increment a value by `1` | Post increment is when the input value
    is incremented after it''s returned, for example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '| `++` | 将值增加`1` | 后增加是指在返回之后增加输入值，例如：'
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The opposite is pre-increment. The input value is incremented by `1` first
    and then returned, for example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 相反的是前增加。输入值首先增加`1`，然后返回，例如：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `--` | Decrement a value by 1 | Post-decrement:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '| `--` | 将值减1 | 后减：'
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Pre-decrement:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前减：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The `var a = 1;` is also an operation; it's the simple assignment operation,
    and `=` is the **simple ** **assignment ** **operator**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`var a = 1;`也是一个操作；它是简单的赋值操作，`=`是**简单赋值运算符**。'
- en: 'There is also a family of operators that are a combination of an assignment
    and an arithmetic operator. These are called **compound operators**. They can
    make your code more compact. Let''s see some of them with the following examples:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一类运算符，它们是赋值和算术运算符的组合。这些被称为**复合运算符**。它们可以使你的代码更加简洁。让我们看一些例子：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this example, `a += 3;` is just a shorter way of doing `a = a + 3;`. For
    example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`a += 3;`只是`a = a + 3;`的一种更简洁的方式。例如：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here, `a -= 3;` is the same as `a = a - 3;`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`a -= 3;`和`a = a - 3;`是一样的：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In addition to the arithmetic and assignment operators discussed previously,
    there are other types of operators, as you'll see later in this, and the following
    chapters.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前讨论的算术和赋值运算符之外，还有其他类型的运算符，你将在本章和下一章中看到。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Best practice**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**'
- en: Always end your expressions with a semicolon. JavaScript has a semicolon insertion
    mechanism, where it can add the semicolon if you forget it at the end of a line.
    However, this can also be a source of errors, so it's best to make sure you always
    explicitly state where you want to terminate your expressions. In other words,
    both expressions `> 1 + 1` and `> 1 + 1;` will work; but throughout the book,
    you'll always see the second type, terminated with a semicolon, just to emphasize
    this habit.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 始终用分号结束你的表达式。JavaScript有一个分号插入机制，如果你忘记在行尾加上分号，它会自动添加分号。然而，这也可能是一个错误的来源，所以最好确保你总是明确地声明你想要结束表达式的地方。换句话说，`>
    1 + 1`和`> 1 + 1;`都可以工作；但在整本书中，你总是会看到第二种类型，以分号结束，只是为了强调这个习惯。
- en: Primitive data types
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本数据类型
- en: 'Any value that you use is of a certain type. In JavaScript, the following are
    just a few primitive data types:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用的任何值都是某种类型的。在JavaScript中，以下是一些基本的数据类型：
- en: '**Number**: This includes floating point numbers as well as integers. For example,
    these values are all numbers-`1`, `100`, `3`.`14`.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数字**：这包括浮点数和整数。例如，这些值都是数字-`1`，`100`，`3`.`14`。'
- en: '**String**: These consist of any number of characters, for example, `a`, `one`,
    and `one 2 three`.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**字符串**：这些由任意数量的字符组成，例如，`a`，`one`和`one 2 three`。'
- en: '**Boolean**: This can be either `true` or `false`.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**布尔**：这可以是`true`或`false`。'
- en: '**Undefined**: When you try to access a variable that doesn''t exist, you get
    the special value undefined. The same happens when you declare a variable without
    assigning a value to it yet. JavaScript initializes the variable behind the scenes
    with the value `undefined`. The undefined data type can only have one value-the
    special value `undefined`.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**未定义**：当你尝试访问一个不存在的变量时，你会得到特殊值未定义。当你声明一个变量但尚未给它赋值时，也会发生同样的情况。JavaScript在幕后用值`undefined`初始化变量。未定义数据类型只能有一个值-特殊值`undefined`。'
- en: '**Null**: This is another special data type that can have only one value-the
    `null` value. It means no value, an empty value, or nothing. The difference with
    undefined is that if a variable has a null value, it''s still defined; it just
    so happens that its value is nothing. You''ll see some examples shortly.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Null**：这是另一种特殊的数据类型，只能有一个值-`null`值。它表示没有值，空值或无。与未定义的区别在于，如果变量具有空值，则仍然已定义；只是它的值恰好是空的。您很快就会看到一些例子。'
- en: 'Any value that doesn''t belong to one of the five primitive types listed here
    is an object. Even null is considered an object, which is a little awkward having
    an object (something) that is actually nothing. We''ll learn more about objects
    in [Chapter 4](ch04.html "Chapter 4. Objects"), *Objects*, but for the time being,
    just remember that in JavaScript, the data types are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 不属于这里列出的五种原始类型之一的任何值都是对象。甚至null也被认为是对象，这有点尴尬，有一个（东西）实际上是什么都没有的对象。我们将在[第4章](ch04.html
    "第4章。对象")*对象*中了解更多关于对象的知识，但目前，只需记住在JavaScript中，数据类型如下：
- en: Primitive (the five types listed previously)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始（先前列出的五种类型）
- en: Non-primitive (objects)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非原始（对象）
- en: Finding out the value type - the typeof operator
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找值类型-typeof运算符
- en: 'If you want to know the type of a variable or a value, you can use the special
    `typeof` operator. This operator returns a string that represents the data type.
    The return values of using `typeof` are one of the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道变量或值的类型，可以使用特殊的`typeof`运算符。此运算符返回表示数据类型的字符串。使用`typeof`的返回值是以下之一：
- en: number
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: string
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: boolean
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: undefined
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未定义
- en: object
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象
- en: function
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: In the next few sections, you'll see `typeof` in action using examples of each
    of the five primitive data types.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，您将看到`typeof`在使用每种五种原始数据类型的示例中的作用。
- en: Numbers
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字
- en: 'The simplest number is an integer. If you assign `1` to a variable, and then
    use the `typeof` operator, it returns the string `number`, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的数字是整数。如果将`1`分配给变量，然后使用`typeof`运算符，它将返回字符串`number`，如下所示：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding example, you can see that the second time you set a variable's
    value, you don't need the `var` statement.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您可以看到第二次设置变量值时，不需要`var`语句。
- en: 'Numbers can also be floating point (decimals), for example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 数字也可以是浮点数（小数），例如：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can call `typeof` directly on the value without assigning it to a variable
    first, for example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接在值上调用`typeof`，而无需首先将其分配给变量，例如：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Octal and hexadecimal numbers
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 八进制和十六进制数
- en: 'When a number starts with a `0`, it''s considered an octal number. For example,
    the octal `0377` is the decimal `255`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当数字以`0`开头时，它被视为八进制数。例如，八进制`0377`是十进制`255`：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The last line in the preceding example prints the decimal representation of
    the octal value.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例中的最后一行打印了八进制值的十进制表示。
- en: 'ES6 provides a prefix `0o` (or `0O`, but this looks very confusing in most
    monospace fonts) to represent octals. Consider the following line of code for
    example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ES6提供了一个前缀`0o`（或`0O`，但在大多数等宽字体中看起来非常令人困惑）来表示八进制。例如，考虑以下代码行：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: While you may not be intimately familiar with octal numbers, you've probably
    used hexadecimal values to define colors in CSS stylesheets.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可能不太熟悉八进制数，但您可能已经在CSS样式表中使用十六进制值来定义颜色。
- en: 'In CSS, you have several options to define a color, two of them are as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS中，您有几种选项来定义颜色，其中两种如下：
- en: Using decimal values to specify the amount of R (red), G (green), and B (blue),
    ranging from `0` to `255`. For example, *rgb(0, 0, 0)* is black and *rgb(255,
    0, 0)* is red (maximum amount of red and no green or blue).
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用十进制值来指定R（红色）、G（绿色）和B（蓝色）的数量，范围从`0`到`255`。例如，*rgb(0, 0, 0)*是黑色，*rgb(255, 0,
    0)*是红色（红色的最大量，没有绿色或蓝色）。
- en: Using hexadecimals and specifying two characters for each R, G, and B value.
    For example, *#000000* is black and *#ff0000* is red. This is because *ff* is
    the hexadecimal value for `255`.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用十六进制并为每个R、G和B值指定两个字符。例如，*#000000*是黑色，*#ff0000*是红色。这是因为*ff*是`255`的十六进制值。
- en: 'In JavaScript, you can put `0x` before a hexadecimal value, also called hex
    for short, for example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，您可以在十六进制值之前加上`0x`，也称为十六进制，例如：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Binary Literals
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制文字
- en: 'Untill ES6, if you needed binary representation of an integer, you had to pass
    them to the `parseInt()` function as a string with a radix of `2`, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 直到ES6，如果您需要整数的二进制表示，您必须将它们作为字符串传递给`parseInt()`函数，基数为`2`，如下所示：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In ES6 you can use `0b` (or `0B`) prefix to represent binary integers. For
    example:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6中，您可以使用`0b`（或`0B`）前缀表示二进制整数。例如：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Exponent literals
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指数文字
- en: '`1e1` (also written as `1e+1` or `1E1` or `1E+1`) represents the number 1 with
    a 0 after it, or in other words, `10`. Similarly, `2e+3` represents the number
    2 with three 0s after it, or `2000`, for example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`1e1`（也写作`1e+1`或`1E1`或`1E+1`）表示数字1后面跟着一个0，换句话说，是`10`。同样，`2e+3`表示数字2后面跟着三个0，或者`2000`，例如：'
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`2e+3` means moving the decimal point three digits to the right of the number
    **2**. There''s also `2e-3`, meaning you move the decimal point three digits to
    the left of the number **2**. Look at the following figure:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`2e+3`表示将数字**2**的小数点向右移动三位。还有`2e-3`，意思是将数字**2**的小数点向左移动三位。看一下下面的图：'
- en: '![Exponent literals](graphics/image_02_002.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![指数文字](graphics/image_02_002.jpg)'
- en: 'The following is the code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Infinity
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无穷大
- en: 'There is a special value in JavaScript called Infinity. It represents a number
    too big for JavaScript to handle. Infinity is indeed a number, as typing `typeof
    Infinity` in the console will confirm. You can also quickly check that a number
    with `308` zeros is ok, but `309` zeros is too much. To be precise, the biggest
    number JavaScript can handle is `1.7976931348623157e+308`, while the smallest
    is `5e-324`, Look at the following example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中有一个称为Infinity的特殊值。它表示JavaScript无法处理的数字太大。Infinity确实是一个数字，因为在控制台中键入`typeof
    Infinity`将确认。您还可以快速检查具有`308`个零的数字是否正常，但`309`个零太多。准确地说，JavaScript可以处理的最大数字是`1.7976931348623157e+308`，而最小数字是`5e-324`，请看下面的示例：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Dividing by zero gives you infinity, for example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 除以零会得到无穷大，例如：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`Infinity` is the biggest number (or rather a little bigger than the biggest),
    but how about the smallest? It''s infinity with a minus sign in front of it; `-Infinity`,
    for example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Infinity`是最大的数（或者比最大的数稍微大一点），但最小的数呢？它是带有负号的无穷大；`-Infinity`，例如：'
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Does this mean you can have something that''s exactly twice as big as Infinity,
    from 0 up to infinity and then from 0 down to minus infinity? Well, not really.
    When you sum `Infinity` and `-Infinity`, you don''t get `0`, but something that
    is called **Not a Number** (**NaN**), For example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着你可以有一个正好是无穷大两倍的东西，从0到无穷大，然后从0到负无穷大？嗯，并不是真的。当你把`Infinity`和`-Infinity`相加时，你得到的不是`0`，而是一个被称为**Not
    a Number**（**NaN**）的东西，例如：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Any other arithmetic operation with `Infinity` as one of the operands gives
    you `Infinity`, for example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 任何其他算术运算中的`Infinity`作为操作数之一都会得到`Infinity`，例如：
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: There is a lesser known global method, `isFinite()`, that tells you if the value
    is infinity or not. ES6 adds a `Number.isFinite()`method to do just that. Why
    another method, you may ask. The global variant of `isFinite()` tries to cast
    the value through Number(value), while `Number.isFinite()` doesn't, hence it's
    more accurate.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个不太为人知的全局方法`isFinite()`，它告诉你值是否是无穷大。ES6添加了一个`Number.isFinite()`方法来做到这一点。你可能会问为什么还需要另一个方法。全局的`isFinite()`方法试图通过Number(value)来转换值，而`Number.isFinite()`不会，因此它更准确。
- en: NaN
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NaN
- en: 'What was this `NaN` in the previous example? It turns out that despite its
    name, Not a Number, `NaN` is a special value that is also a number:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，这个`NaN`是什么？原来，尽管它的名字是Not a Number，`NaN`是一个特殊的值，也是一个数字：
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You get `NaN` when you try to perform an operation that assumes numbers, but
    the operation fails. For example, if you try to multiply `10` by the character
    `"f"`, the result is `NaN`, because `"f"` is obviously not a valid operand for
    a multiplication:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试执行假定数字的操作，但操作失败时，你会得到`NaN`。例如，如果你尝试将`10`乘以字符`"f"`，结果是`NaN`，因为`"f"`显然不是乘法的有效操作数：
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`NaN` is contagious, so if you have even one `NaN` in your arithmetic operation,
    the whole result goes down the drain, for example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`是具有传染性的，所以如果你的算术运算中有一个`NaN`，整个结果都会泡汤，例如：'
- en: '[PRE39]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Number.isNaN
  id: totrans-159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Number.isNaN
- en: ES5 has a global method-`isNaN()`. It determines if a value is `NaN` or not.
    ES6 provides a very similar method-`Number.isNaN()` (Notice that this method is
    not global).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: ES5有一个全局方法-`isNaN()`。它确定一个值是否是`NaN`。ES6提供了一个非常相似的方法-`Number.isNaN()`（请注意，这个方法不是全局的）。
- en: 'The difference between the global `isNaN()` and `Number.isNaN()` is that global
    `isNaN()` casts non-numeric values before evaluating them to be `NaN`. Let''s
    look at the following example. We are using the ES6 `Number.isNaN()` method to
    test if something is a `NaN` or not:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 全局`isNaN()`和`Number.isNaN()`之间的区别在于，全局`isNaN()`在评估之前会转换非数字值为`NaN`。让我们看下面的例子。我们使用ES6的`Number.isNaN()`方法来测试某个值是否是`NaN`：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We saw that ES5''s global `isNaN()` method first casts non-numeric values and
    then does the comparison; the following result will be different from its ES6
    counterpart:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到ES5的全局`isNaN()`方法首先转换非数字值，然后进行比较；其结果与ES6的对应方法不同：
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In general, compared to its global variant, `Number.isNaN()` is more correct.
    However, neither of them can be used to figure out if something is not a number-they
    just answer if the value is a `NaN` or not. Practically, you are interested in
    knowing if a value identifies as a number or not. Mozilla suggests the following
    polyfill method to do just that:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，与其全局变量相比，`Number.isNaN()`更正确。然而，它们都不能用来判断某个值是否不是一个数字-它们只是回答这个值是否是`NaN`。实际上，你更感兴趣的是知道一个值是否被识别为一个数字。Mozilla建议使用以下polyfill方法来做到这一点：
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Number.isInteger
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Number.isInteger
- en: 'This is a new method in ES6\. It returns `true` if the number is finite and
    does not contain any decimal points (is an integer):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这是ES6中的一个新方法。如果数字是有限的并且不包含任何小数点（是一个整数），它返回`true`：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Strings
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串
- en: 'A string is a sequence of characters used to represent text. In JavaScript,
    any value placed between single or double quotes is considered a string. This
    means that `1` is a number, but `"1"` is a string. When used with strings, `typeof`
    returns the string `"string"`, for example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是用来表示文本的字符序列。在JavaScript中，放在单引号或双引号之间的任何值都被视为字符串。这意味着`1`是一个数字，但`"1"`是一个字符串。当与字符串一起使用时，`typeof`返回字符串`"string"`，例如：
- en: '[PRE44]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here''s an example of a number used in the string context:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在字符串上下文中使用的数字的例子：
- en: '[PRE45]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If you put nothing in quotes, it''s still a string (an empty string), for example:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在引号中什么都不放，它仍然是一个字符串（一个空字符串），例如：
- en: '[PRE46]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'As you already know, when you use the plus sign with two numbers, this is the
    arithmetic addition operation. However, if you use the plus sign with strings,
    this is a string concatenation operation, and it returns the two strings glued
    together:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的，当你用加号和两个数字一起使用时，这是算术加法运算。然而，如果你用加号和字符串一起使用，这是一个字符串连接操作，并且返回两个字符串粘在一起：
- en: '[PRE47]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The dual purpose of the `+` operator is a source of errors. Therefore, if you
    intend to concatenate strings, it's always best to make sure that all of the operands
    are strings. The same applies for addition; if you intend to add numbers then
    make sure the operands are numbers. You'll learn various ways to do so further
    in the chapter and the book.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`+`运算符的双重用途是错误的根源。因此，如果你打算连接字符串，最好确保所有的操作数都是字符串。加法也是一样；如果你打算加上数字，那么确保操作数是数字。你将在本章和本书的后面学到各种方法来做到这一点。'
- en: String conversions
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串转换
- en: 'When you use a number-like string, for example, `"1"`, as an operand in an
    arithmetic operation, the string is converted to a number behind the scenes. This
    works for all arithmetic operations except addition, because of its ambiguity.
    Consider the following example:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用类似数字的字符串，例如，`"1"`，作为算术运算中的操作数时，字符串在幕后被转换为数字。这对所有算术运算都有效，除了加法，因为它存在歧义。考虑以下例子：
- en: '[PRE48]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'A lazy way to convert any number-like string to a number is to multiply it
    by `1` (another way is to use a function called `parseInt()`, as you''ll see in
    the next chapter):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将任何类似数字的字符串转换为数字的一种懒惰方法是将其乘以`1`（另一种方法是使用一个名为`parseInt()`的函数，您将在下一章中看到）：
- en: '[PRE49]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If the conversion fails, you''ll get `NaN`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果转换失败，您将得到`NaN`：
- en: '[PRE50]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You can convert a string to a number by multiplying it by `1`. The opposite-converting
    anything to a string-can be done by concatenating it with an empty string, as
    follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将其乘以`1`将字符串转换为数字。相反-将任何东西转换为字符串-可以通过与空字符串连接来完成，如下所示：
- en: '[PRE51]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Special strings
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊字符串
- en: 'There are also strings with special meanings, as listed in the following table:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些具有特殊含义的字符串，如下表所示：
- en: '| **String** | **Meaning** | **Example** |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| **String** | **Meaning** | **Example** |'
- en: '| `\\``''``"` | The `\` is the escape character. When you want to have quotes
    inside your string, you can escape them so that JavaScript doesn''t think they
    mean the end of the string.If you want to have an actual backslash in the string,
    escape it with another backslash. | `> var s = ''I don''t know'';`: This is an
    error because JavaScript thinks the string is `I don` and the rest is invalid
    code. The following codes are valid:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '| `\\``''``"` | `\`是转义字符。当您想在字符串中使用引号时，您可以转义它们，以便JavaScript不认为它们意味着字符串的结束。如果您想在字符串中有一个实际的反斜杠，请用另一个反斜杠转义它。|
    `> var s = ''I don''t know'';`: 这是一个错误，因为JavaScript认为字符串是`I don`，其余是无效的代码。以下代码是有效的：'
- en: '[PRE52]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `\n` | End of line. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `\n` | 行尾。|'
- en: '[PRE53]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `\r` | Carriage return. | Consider the following statements:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '| `\r` | 回车。|考虑以下陈述：'
- en: '[PRE54]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The result of all of these is as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些的结果如下：
- en: '[PRE55]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '|'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `\t` | Tab. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `\t` | 制表符。|'
- en: '[PRE56]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `\u` | The `\u` followed by a character code allows you to use Unicode. |
    Here''s my name in Bulgarian written with Cyrillic characters:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '| `\u` | `\u`后跟字符代码，允许您使用Unicode。|以下是我的保加利亚名字，用西里尔字母写成：'
- en: '[PRE57]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'There are also additional characters that are rarely used: `\b` (backspace),
    `\v` (vertical tab), and `\f` (form feed).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些很少使用的其他字符：`\b`（退格）、`\v`（垂直制表符）和`\f`（换页符）。
- en: String template literals
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串模板文字
- en: 'ES6 introduced template literals. If you are familiar with other programming
    languages, Perl and Python have supported template literals for a while now. Template
    literals allow expressions to be embedded within regular strings. ES6 has two
    kinds of literals: template literals and tagged literals.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了模板文字。如果您熟悉其他编程语言，Perl和Python现在已经支持模板文字一段时间了。模板文字允许在常规字符串中嵌入表达式。ES6有两种文字：模板文字和标记文字。
- en: 'Template literals are single or multiple line strings with embedded expressions.
    For example, you must have done something similar to this:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文字是带有嵌入表达式的单行或多行字符串。例如，您一定做过类似的事情：
- en: '[PRE58]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You can accomplish the same using template literals, as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用模板文字来实现相同的效果，如下所示：
- en: '[PRE59]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Template literals are enclosed by the back-tick ([PRE60]
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文字用反引号（[PRE60]
- en: var a = 10;
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: var a = 10;
- en: var b = 10;
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: var b = 10;
- en: console.log(`Sum is ${a + b} and Multiplication would be ${a * b}.`);
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(`Sum is ${a + b} and Multiplication would be ${a * b}.`);
- en: //Sum is 20 and Multiplication would be 100\.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: //Sum is 20 and Multiplication would be 100\.
- en: '[PRE61]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: var a = 10;
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: var a = 10;
- en: var b = 10;
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: var b = 10;
- en: function sum(x,y){
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 函数sum(x,y){
- en: return x+y
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 x+y
- en: '}'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: function multi(x,y){
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 函数multi(x,y){
- en: return x*y
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 x*y
- en: '}'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(`Sum is ${sum(a,b)} and Multiplication
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(`Sum is ${sum(a,b)} and Multiplication
- en: would be ${multi(a,b)}.`);
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 将是${multi(a,b)}.`);
- en: '[PRE62]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: console.log("This is line one \n" + "and this is line two");
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("This is line one \n" + "and this is line two");
- en: '[PRE63]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: console.log(`This is line one and this is line two`);
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(`This is line one and this is line two`);
- en: '[PRE64]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: transform`Name is ${lastname}, ${firstname} ${lastname}`
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: transform`Name is ${lastname}, ${firstname} ${lastname}`
- en: '[PRE65]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: transform([["Name is ", ", ", " "],firstname, lastname)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: transform([["Name is ", ", ", " "],firstname, lastname)
- en: '[PRE66]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: function transform(strings, ...substitutes){
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 函数转换（字符串，...替代品）{
- en: console.log(strings[0]); //"Name is"
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(strings[0]); //"Name is"
- en: console.log(substitutes[0]); //Bond
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(substitutes[0]); //Bond
- en: '}'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: var firstname = "James";
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: var firstname = "James";
- en: var lastname = "Bond"
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: var lastname = "Bond"
- en: transform`Name is ${lastname}, ${firstname} ${lastname}`
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: transform`Name is ${lastname}, ${firstname} ${lastname}`
- en: '[PRE67]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: function rawTag(strings,...substitutes){
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 函数rawTag(strings,...substitutes){
- en: console.log(strings.raw[0])
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(strings.raw[0])
- en: '}'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: rawTag`This is a raw text and \n are not treated differently`
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: rawTag`This is a raw text and \n are not treated differently`
- en: //This is a raw text and \n are not treated differently
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: //This is a raw text and \n are not treated differently
- en: '[PRE68]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: var b = true;
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = true;
- en: typeof b;
  id: totrans-256
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof b;
- en: '"boolean"'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '"boolean"'
- en: var b = false;
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = false;
- en: typeof b;
  id: totrans-259
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof b;
- en: '"boolean"'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '"boolean"'
- en: '[PRE69]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: var b = "true";
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = "true";
- en: typeof b;
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof b;
- en: '"string"'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '"string"'
- en: '[PRE70]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '! - logical NOT (negation)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '! - 逻辑非（否定）'
- en: '&& - logical AND'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '&& - 逻辑与'
- en: '|| - logical OR'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '|| - 逻辑或'
- en: '[PRE71]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: var b = !true;
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = !true;
- en: b;
  id: totrans-271
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b;
- en: 'false'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: '[PRE72]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: var b = !!true;
  id: totrans-274
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = !!true;
- en: b;
  id: totrans-275
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b;
- en: 'true'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE73]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: var b = "one";
  id: totrans-278
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = "one";
- en: '!b;'
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '!b;'
- en: 'false'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: '[PRE74]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: var b = "one";
  id: totrans-282
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = "one";
- en: '!!b;'
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '!!b;'
- en: 'true'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE75]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: var b1 = true, b2 = false;
  id: totrans-286
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b1 = true, b2 = false;
- en: b1 || b2;
  id: totrans-287
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b1 || b2;
- en: 'true'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: b1 && b2;
  id: totrans-289
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b1 && b2;
- en: 'false'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: '[PRE76]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: true && true && false && true;
  id: totrans-292
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 真 && true && false && true;
- en: 'false'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: false || true || false;
  id: totrans-294
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: false || true || false;
- en: 'true'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE77]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: false && false || true && true;
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: false && false || true && true;
- en: 'true'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: false && (false || true) && true;
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: false && (false || true) && true;
- en: 'false'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: '[PRE78]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 1 + 2 * 3;
  id: totrans-302
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 + 2 * 3;
- en: '7'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '[PRE79]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 1 + (2 * 3);
  id: totrans-305
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 + (2 * 3);
- en: '7'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '[PRE80]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: false && false || true && true;
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: false && false || true && true;
- en: 'true'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE81]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: (false && false) || (true && true);
  id: totrans-311
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （false && false）||（true && true）;
- en: 'true'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE82]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: true || false || true || false || true;
  id: totrans-314
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 真 || false || true || false || true;
- en: 'true'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE83]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: var b = 5;
  id: totrans-317
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var b = 5;
- en: true || (b = 6);
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 真 || (b = 6);
- en: 'true'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: b;
  id: totrans-320
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b;
- en: '5'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: true && (b = 6);
  id: totrans-322
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 真 && (b = 6);
- en: '6'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: b;
  id: totrans-324
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b;
- en: '6'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '[PRE84]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: true || "something";
  id: totrans-327
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 真 || "something";
- en: 'true'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: true && "something";
  id: totrans-329
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 真 && "something";
- en: '"something"'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '"something"'
- en: true && "something" && true;
  id: totrans-331
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 真 && "something" && true;
- en: 'true'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE85]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: var mynumber = mynumber || 10;
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var mynumber = mynumber || 10;
- en: mynumber;
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: mynumber;
- en: '10'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '[PRE86]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: var mynumber = 0;
  id: totrans-338
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var mynumber = 0;
- en: var mynumber = mynumber || 10;
  id: totrans-339
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var mynumber = mynumber || 10;
- en: mynumber;
  id: totrans-340
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: mynumber;
- en: '10'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '[PRE87]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 1 == 1;
  id: totrans-343
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 == 1;
- en: 'true'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: 1 == 2;
  id: totrans-345
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 == 2;
- en: 'false'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: 1 =='1';
  id: totrans-347
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 =='1';
- en: 'true'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE88]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 1 === '1';
  id: totrans-350
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 === '1';
- en: 'false'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: 1 === 1;
  id: totrans-352
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 === 1;
- en: 'true'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE89]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 1 != 1;
  id: totrans-355
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 != 1;
- en: 'false'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: 1 != '1';
  id: totrans-357
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 != '1';
- en: 'false'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: 1 != '2';
  id: totrans-359
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 != '2';
- en: 'true'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE90]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 1 !== 1;
  id: totrans-362
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 !== 1;
- en: 'false'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: 1 !== '1';
  id: totrans-364
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 !== '1';
- en: 'true'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE91]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 1 > 1;
  id: totrans-367
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 > 1;
- en: 'false'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: 33 > 22;
  id: totrans-369
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 33 > 22;
- en: 'true'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE92]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 1 >= 1;
  id: totrans-372
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 >= 1;
- en: 'true'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE93]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 1 < 1;
  id: totrans-375
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 < 1;
- en: 'false'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 错误
- en: 1 < 2;
  id: totrans-377
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 < 2;
- en: 'true'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE94]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 1 <= 1;
  id: totrans-380
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 <= 1;
- en: 'true'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: 1 <= 2;
  id: totrans-382
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 <= 2;
- en: 'true'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE95]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: NaN == NaN;
  id: totrans-385
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: NaN == NaN;
- en: 'false'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 假
- en: '[PRE96]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: foo;
  id: totrans-388
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: foo;
- en: 'ReferenceError: foo is not defined'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 'ReferenceError: foo is not defined'
- en: '[PRE97]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: typeof foo;
  id: totrans-391
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof foo;
- en: '"undefined"'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '"未定义"'
- en: '[PRE98]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: var somevar;
  id: totrans-394
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var somevar;
- en: somevar;
  id: totrans-395
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: somevar;
- en: typeof somevar;
  id: totrans-396
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof somevar;
- en: '"undefined"'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '"未定义"'
- en: '[PRE99]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: var somevar;
  id: totrans-399
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var somevar;
- en: somevar === undefined;
  id: totrans-400
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: somevar === undefined;
- en: 'true'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: '[PRE100]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: var somevar = null;
  id: totrans-403
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var somevar = null;
- en: 'null'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: somevar;
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: somevar;
- en: 'null'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: typeof somevar;
  id: totrans-407
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof somevar;
- en: '"object"'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '"对象"'
- en: '[PRE101]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: var i = 1 + undefined;
  id: totrans-410
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var i = 1 + 未定义;
- en: i;
  id: totrans-411
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: i;
- en: NaN
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: NaN
- en: var i = 1 + null;
  id: totrans-413
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var i = 1 + null;
- en: i;
  id: totrans-414
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: i;
- en: '1'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '[PRE102]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 1 * undefined;
  id: totrans-417
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 * undefined;
- en: '[PRE103]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 1 * null;
  id: totrans-419
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1 * null;
- en: '0'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: '[PRE104]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '!!undefined;'
  id: totrans-422
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '!!undefined;'
- en: 'false'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 假
- en: '!!null;'
  id: totrans-424
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '!!null;'
- en: 'false'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 假
- en: '[PRE105]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '"value: " + null;'
  id: totrans-427
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"value: " + null;'
- en: '"value: null"'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '"value: null"'
- en: '"value: " + undefined;'
  id: totrans-429
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"value: " + undefined;'
- en: '"value: undefined"'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '"value: undefined"'
- en: '[PRE106]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: var atom = Symbol()
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: var atom = Symbol()
- en: '[PRE107]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: var atom = new Symbol() //Symbol is not a constructor
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: var atom = new Symbol() //Symbol is not a constructor
- en: '[PRE108]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: var atom = Symbol('atomic symbol')
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: var atom = Symbol('原子符号')
- en: '[PRE109]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: console.log(Symbol() === Symbol()) //false
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(Symbol() === Symbol()) //false
- en: console.log(Symbol('atom') === Symbol('atom')) // false
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(Symbol('atom') === Symbol('atom')) // false
- en: '[PRE110]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: var a = [];
  id: totrans-441
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = [];
- en: '[PRE111]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: var a = [1, 2, 3];
  id: totrans-443
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = [1, 2, 3];
- en: '[PRE112]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: a;
  id: totrans-445
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[1, 2, 3]'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 2, 3]'
- en: '[PRE113]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: a[0];
  id: totrans-448
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[0];
- en: '1'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: a[1];
  id: totrans-450
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[1];
- en: '2'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '[PRE114]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: a[2] = 'three';
  id: totrans-453
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[2] = 'three';
- en: '"three"'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '"three"'
- en: a;
  id: totrans-455
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[1, 2, "three"]'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 2, "three"]'
- en: '[PRE115]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: a[3] = 'four';
  id: totrans-458
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[3] = 'four';
- en: '"four"'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '"四"'
- en: a;
  id: totrans-460
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[1, 2, "three", "four"]'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 2, "three", "four"]'
- en: '[PRE116]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: var a = [1, 2, 3];
  id: totrans-463
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = [1, 2, 3];
- en: a[6] = 'n`xew';
  id: totrans-464
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[6] = 'n`xew';
- en: '"new"'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '"新"'
- en: a;
  id: totrans-466
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[1, 2, 3, undefined x 3, "new"]'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 2, 3, undefined x 3, "new"]'
- en: '[PRE117]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: var a = [1, 2, 3];
  id: totrans-469
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = [1, 2, 3];
- en: delete a[1];
  id: totrans-470
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: delete a[1];
- en: 'true'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: a;
  id: totrans-472
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[1, undefined, 3]'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, undefined, 3]'
- en: typeof a[1];
  id: totrans-474
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof a[1];
- en: '"undefined"'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '"未定义"'
- en: '[PRE118]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: var a = [1, "two", false, null, undefined];
  id: totrans-477
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = [1, "two", false, null, undefined];
- en: a;
  id: totrans-478
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[1, "two", false, null, undefined]'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, "two", false, null, undefined]'
- en: a[5] = [1, 2, 3];
  id: totrans-480
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[5] = [1, 2, 3];
- en: '[1, 2, 3]'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 2, 3]'
- en: a;
  id: totrans-482
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[1, "two", false, null, undefined, Array[3]]'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, "two", false, null, undefined, Array[3]]'
- en: '[PRE119]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: var a = [[1, 2, 3], [4, 5, 6]];
  id: totrans-485
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = [[1, 2, 3], [4, 5, 6]];
- en: a;
  id: totrans-486
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '[Array[3], Array[3]]'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[Array[3], Array[3]]'
- en: '[PRE120]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: a[0];
  id: totrans-489
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[0];
- en: '[1, 2, 3]'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '[1, 2, 3]'
- en: '[PRE121]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: a[0][0];
  id: totrans-492
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[0][0];
- en: '1'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: a[1][2];
  id: totrans-494
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a[1][2];
- en: '6'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '[PRE122]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: var s = 'one';
  id: totrans-497
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var s = 'one';
- en: s[0];
  id: totrans-498
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s[0];
- en: '"o"'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '"o"'
- en: s[1];
  id: totrans-500
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s[1];
- en: '"n"'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '"n"'
- en: s[2];
  id: totrans-502
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s[2];
- en: '"e"'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '"e"'
- en: '[PRE123]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '{'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: var a = 1;
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: var a = 1;
- en: var b = 3;
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: var b = 3;
- en: '}'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE124]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '{'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: var a = 1;
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: var a = 1;
- en: var b = 3;
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: var b = 3;
- en: var c, d;
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: var c, d;
- en: '{'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: c = a + b;
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: c = a + b;
- en: '{'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: d = a - b;
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: d = a - b;
- en: '}'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE125]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: var result = '', a = 3;
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: var result = '', a = 3;
- en: if (a > 2) {
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (a > 2) {
- en: result = 'a is greater than 2';
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: result = 'a大于2';
- en: '}'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE126]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: if (a > 2) {
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (a > 2) {
- en: result = 'a is greater than 2';
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: result = 'a大于2';
- en: '} else {'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: result = 'a is NOT greater than 2';
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: result = 'a不大于2';
- en: '}'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE127]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: if (a > 2 || a < -2) {
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (a > 2 || a < -2) {
- en: result = 'a is not between -2 and 2';
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 结果 = 'a不在-2和2之间';
- en: '} else if (a === 0 && b === 0) {'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '} else if (a === 0 && b === 0) {'
- en: result = 'both a and b are zeros';
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: result = 'a和b都是零';
- en: '} else if (a === b) {'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '} 否则 if (a === b) {'
- en: result = 'a and b are equal';
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 结果 = 'a和b相等';
- en: '} else {'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: result = 'I give up';
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: result = '我放弃';
- en: '}'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE128]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: if (a === 1) {
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (a === 1) {
- en: if (b === 2) {
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (b === 2) {
- en: result = 'a is 1 and b is 2';
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: result = 'a is 1 and b is 2';
- en: '} else {'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: result = 'a is 1 but b is definitely not 2';
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: result = 'a是1，但b肯定不是2';
- en: '}'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: result = 'a is not 1, no idea about b';
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: result = 'a不是1，b不知道';
- en: '}'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE129]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: var result = '';
  id: totrans-553
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var result = '';
- en: if (somevar) {
  id: totrans-554
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 (somevar) {
- en: result = 'yes';
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: result = '是的';
- en: '}'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'ReferenceError: somevar is not defined'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 'ReferenceError: somevar is not defined'
- en: result;
  id: totrans-558
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结果;
- en: '""'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '""'
- en: '[PRE130]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: var result = "";
  id: totrans-561
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var result = "";
- en: if (typeof somevar !== "undefined") {
  id: totrans-562
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 (typeof somevar !== "未定义") {
- en: result = "yes";
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: result = "是的";
- en: '}'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: result;
  id: totrans-565
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结果;
- en: '""'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '""'
- en: '[PRE131]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: var somevar;
  id: totrans-568
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var somevar;
- en: if (typeof somevar !== "undefined") {
  id: totrans-569
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 (typeof somevar !== "未定义") {
- en: result = "yes";
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: result = "是的";
- en: '}'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: result;
  id: totrans-572
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结果;
- en: '""'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '""'
- en: somevar = undefined;
  id: totrans-574
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: somevar = undefined;
- en: if (typeof somevar !== "undefined") {
  id: totrans-575
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 (typeof somevar !== "未定义") {
- en: result = "yes";
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: result = "是的";
- en: '}'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: result;
  id: totrans-578
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结果;
- en: '""'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '""'
- en: '[PRE132]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: somevar = 123;
  id: totrans-581
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: somevar = 123;
- en: if (typeof somevar !== "undefined") {
  id: totrans-582
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 (typeof somevar !== "未定义") {
- en: result = 'yes';
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: result = '是的';
- en: '}'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: result;
  id: totrans-585
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结果;
- en: '"yes"'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '"是的"'
- en: '[PRE133]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: var a = 1;
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: var a = 1;
- en: var result = '';
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: var result = '';
- en: if (a === 1) {
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (a === 1) {
- en: result = "a is one";
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: result = "a是一个";
- en: '} else {'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: result = "a is not one";
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: result = "a不是一个";
- en: '}'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE134]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: var a = 1;
  id: totrans-596
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = 1;
- en: 'var result = (a === 1) ? "a is one" : "a is not one";'
  id: totrans-597
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'var result = (a === 1) ? "a是一个" : "a不是一个";'
- en: '[PRE135]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: var a = 123;
  id: totrans-599
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = 123;
- en: 'a = a > 100 ? 100 : a < 50 ? 50: a;'
  id: totrans-600
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'a = a > 100 ? 100 : a < 50 ? 50: a;'
- en: a;
  id: totrans-601
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '100'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '100'
- en: '[PRE136]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: var a = 123;
  id: totrans-604
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = 123;
- en: 'a = (a > 100 ? 100 : a < 50) ? 50 : a;'
  id: totrans-605
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'a = (a > 100 ? 100 : a < 50) ? 50 : a;'
- en: a;
  id: totrans-606
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '50'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '50'
- en: var a = 123;
  id: totrans-608
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a = 123;
- en: 'a = a > 100 ? 100 : (a < 50 ? 50 : a);'
  id: totrans-609
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'a = a > 100 ? 100 : (a < 50 ? 50 : a);'
- en: a;
  id: totrans-610
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a;
- en: '100'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '100'
- en: '[PRE137]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: var a = '1',
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: var a = '1',
- en: result = '';
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 结果 = '';
- en: switch (a) {
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: switch (a) {
- en: 'case 1:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '情况 1:'
- en: result = 'Number 1';
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: result = '数字1';
- en: break;
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 休息;
- en: 'case ''1'':'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '情况 ''1'':'
- en: result = 'String 1';
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: result = '字符串1';
- en: break;
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: 'default:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '默认:'
- en: result = 'I don't know';
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: result = '我不知道';
- en: break;
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 休息;
- en: '}'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE138]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: var i = 0;
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: var i = 0;
- en: while (i < 10) {
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 当 (i < 10) {
- en: i++;
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: i++;
- en: '}'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE139]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: var i = 0;
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: var i = 0;
- en: do {
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 做 {
- en: i++;
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: i++;
- en: '} while (i < 10);'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '} while (i < 10);'
- en: '[PRE140]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: var punishment = '';
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: var punishment = '';
- en: for (var i = 0; i < 100; i++) {
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (var i = 0; i < 100; i++) {
- en: punishment += 'I will never do this again, ';
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 惩罚 += '我再也不会这样做了，';
- en: '}'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE141]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: for (var i = 0, punishment = ''; i < 100; i++) {
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (var i = 0, 惩罚 = ''; i < 100; i++) {
- en: punishment += 'I will never do this again, ';
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 惩罚 += '我再也不会这样做了，';
- en: '}'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE142]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: for (
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (
- en: var i = 0, punishment = '';
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: var i = 0, punishment = '';
- en: i < 100;
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: i < 100;
- en: i++, punishment += 'I will never do this again, ') {
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: i++, punishment += '我再也不会这样做了，') {
- en: // nothing here
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: // nothing here
- en: '}'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE143]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: var i = 0, punishment = '';
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: var i = 0, punishment = '';
- en: for (;;) {
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (;;) {
- en: punishment += 'I will never do this again, ';
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: punishment += '我再也不会这样做了，';
- en: if (++i == 100) {
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (++i == 100) {
- en: break;
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: break;
- en: '}'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE144]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: var res = '\n';
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: var res = '\n';
- en: for (var i = 0; i < 10; i++) {
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (var i = 0; i < 10; i++) {
- en: for (var j = 0; j < 10; j++) {
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (var j = 0; j < 10; j++) {
- en: res += '* ';
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: res += '* ';
- en: '}'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: res += '\n';
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: res += '\n';
- en: '}'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE145]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '"'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: '* * * * * * * * * *'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '* * * * * * * * * *'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * * * * *'
- en: '"'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: '[PRE146]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: var res = '\n', i, j;
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: var res = '\n', i, j;
- en: for (i = 1; i <= 7; i++) {
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (i = 1; i <= 7; i++) {
- en: for (j = 1; j <= 15; j++) {
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 为 (j = 1; j <= 15; j++) {
- en: 'res += (i * j) % 8 ? '' '' : ''*'';'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 'res += (i * j) % 8 ? '' '' : ''*'';'
- en: '}'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: res += '\n';
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: res += '\n';
- en: '}'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE147]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '"'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: '*'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*'
  id: totrans-692
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*'
- en: '*'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '* * * * * * *'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '* * * * * * *'
- en: '*'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*'
  id: totrans-696
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*'
- en: '*'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '"'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: '[PRE148]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: // example for information only
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: // example for information only
- en: // for-in loops are used for objects
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: // for-in loops are used for objects
- en: // regular for is better suited for arrays
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: // regular for is better suited for arrays
- en: var a = ['a', 'b', 'c', 'x', 'y', 'z'];
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: var a = ['a', 'b', 'c', 'x', 'y', 'z'];
- en: var result = '\n';
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: var result = '\n';
- en: for (var i in a) {
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 (var i 在 a 中) {
- en: 'result += ''index: '' + i + '', value: '' + a[i] + ''\n'';'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: result += '索引：' + i + '，值：' + a[i] + '\n';
- en: '}'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'The result is:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '"'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: 'index: 0, value: a'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 索引：0，值：a
- en: 'index: 1, value: b'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 索引：1，值：b
- en: 'index: 2, value: c'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 索引：2，值：c
- en: 'index: 3, value: x'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 索引：3，值：x
- en: 'index: 4, value: y'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 索引：4，值：y
- en: 'index: 5, value: z'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 索引：5，值：z
- en: '"'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: '[PRE149]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: // beginning of line
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: // 行的开头
- en: var a = 1; // anywhere on the line
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: var a = 1; // 在任何一行
- en: /* multi-line comment on a single line */
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: /* 单行的多行注释 */
- en: /*
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: /*
- en: comment that spans several lines
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 跨越多行的注释
- en: '*/'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: '[PRE150]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: var a; typeof a;
  id: totrans-725
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var a; typeof a;
- en: var s = '1s'; s++;
  id: totrans-726
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var s = '1s'; s++;
- en: '!!"false";'
  id: totrans-727
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '!!"false";'
- en: '!!undefined;'
  id: totrans-728
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '!!未定义；'
- en: typeof -Infinity;
  id: totrans-729
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof -无穷大；
- en: 10 % "0";
  id: totrans-730
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 10 % "0";
- en: undefined == null;
  id: totrans-731
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 未定义 == null;
- en: false === "";
  id: totrans-732
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: false === "";
- en: typeof "2E+2";
  id: totrans-733
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: typeof "2E+2";
- en: a = 3e+3; a++;
  id: totrans-734
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a = 3e+3; a++;
- en: '[PRE151]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: var v = v || 10;
  id: totrans-736
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var v = v || 10;
- en: '```'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Experiment by first setting `v` to `100`, `0`, or `null`.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 首先尝试将`v`设置为`100`，`0`或`null`进行实验。
- en: 'Write a small program that prints out the multiplication table. Hint: use a
    loop nested inside another loop.'
  id: totrans-739
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个打印乘法表的小程序。提示：在另一个循环内嵌套使用循环。
- en: Summary
  id: totrans-740
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you learned a lot about the basic building blocks of a JavaScript
    program. Now you know the following primitive data types:'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学到了关于JavaScript程序的基本构建块。现在你知道以下原始数据类型：
- en: Number
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: String
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Boolean
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: Undefined
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未定义
- en: 'Null'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空
- en: 'You also know quite a few operators, which are as follows:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 你也知道了相当多的运算符，它们如下：
- en: '**Arithmetic operators**: `+`, `-`, `*`, `/`, and `%`'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算术运算符**：`+`，`-`，`*`，`/`和`%`'
- en: '**Increment operators**: `++` and `-`'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**递增运算符**：`++`和`-`'
- en: '**Assignment operators**: `=`, `+=`, `-=`, `*=`, `/=`, and `%=`'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**赋值运算符**：`=`，`+=`，`-=`，`*=`，`/=`和`%=` '
- en: '**Special operators**: `typeof` and `delete`'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特殊运算符**：`typeof`和`delete`'
- en: '**Logical operators**: `&&`, `||`, and `!`'
  id: totrans-752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑运算符**：`&&`，`||`和`!`'
- en: '**Comparison operators**: `==`, `===`, `!=`, `!==`, `<`, `>`, `>=`, and `<=`'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**比较运算符**：`==`，`===`，`!=`，`!==`，`<`，`>`，`>=`和`<=`'
- en: '**The ternary operator**: `?`'
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三元运算符**：`?`'
- en: Then you learned how to use arrays to store and access data, and finally you
    saw different ways to control the flow of your program using conditions (`if...else`
    or `switch`) and loops (`while`, `do...while`, `for`, and `for...in`).
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你学会了如何使用数组来存储和访问数据，最后你看到了使用条件（`if...else`或`switch`）和循环（`while`，`do...while`，`for`和`for...in`）来控制程序流程的不同方法。
- en: This is quite a bit of information; give yourself a well-deserved pat on the
    back before diving into the next chapter. More fun is coming up!
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相当多的信息；在深入下一章之前，给自己一个当之无愧的鼓励。更有趣的内容即将到来！
