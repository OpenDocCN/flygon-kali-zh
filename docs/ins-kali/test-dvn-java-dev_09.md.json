["```java\npublic class TicTacToe { \n\n  public void validatePosition(int x, int y) { \n    if (x < 1 || x > 3) { \n      throw new RuntimeException(\"X is outside board\"); \n    } \n    if (y < 1 || y > 3) { \n      throw new RuntimeException(\"Y is outside board\"); \n    } \n  } \n} \n```", "```java\npublic class TicTacToeSpec { \n  @Rule \n  public ExpectedException exception = \n      ExpectedException.none(); \n\n  private TicTacToe ticTacToe; \n\n  @Before \n  public final void before() { \n    ticTacToe = new TicTacToe(); \n  } \n\n  @Test \n  public void whenXOutsideBoardThenRuntimeException() { \n    exception.expect(RuntimeException.class); \n    ticTacToe.validatePosition(5, 2); \n  } \n\n  @Test \n  public void whenYOutsideBoardThenRuntimeException() { \n    exception.expect(RuntimeException.class); \n    ticTacToe.validatePosition(2, 5); \n  } \n} \n```", "```java\npublic class TicTacToe { \n\n  public void validatePosition(int x, int y) { \n    if (isOutsideTheBoard(x)) { \n      throw new RuntimeException(\"X is outside board\"); \n    } \n    if (isOutsideTheBoard(y)) { \n      throw new RuntimeException(\"Y is outside board\"); \n    } \n  } \n\n  private boolean isOutsideTheBoard(final int position) { \n    return position < 1 || position > 3; \n  } \n} \n```", "```java\npublic class TicTacToe { \n\n  public void validatePosition(int x, int y) { \n    if (isOutsideTheBoard(x)) { \n      throw new RuntimeException(\"\"); \n    } \n    if (isOutsideTheBoard(y)) { \n      throw new RuntimeException(\"\"); \n    } \n  } \n\n  private boolean isOutsideTheBoard(final int position) { \n    return position < 1 || position > 3; \n  } \n} \n```", "```java\npublic class BirthdayGreetingService { \n\n  private final MessageSender messageSender; \n\n  public BirthdayGreetingService() { \n    messageSender = new EmailMessageSender(); \n  } \n\n  public void greet(final Employee employee) { \n    messageSender.send(employee.getAddress(), \n     \"Greetings on your birthday\"); \n  } \n} \n```", "```java\npublic class BirthdayGreetingService { \n\n  public BirthdayGreetingService() { \n    messageSender = new EmailMessageSender(); \n  } \n  [...] \n} \n```", "```java\npublic class EndToEndTest { \n\n  @Test \n  public void email_an_employee() { \n    final StringBuilder systemOutput = \n       injectSystemOutput(); \n    final Employee john = new Employee( \n       new Email(\"john@example.com\")); \n\n    new BirthdayGreetingService().greet(john); \n\n    assertThat(systemOutput.toString(),  \n      equalTo(\"Sent email to \" \n        + \"'john@example.com' with \" \n        + \"the body 'Greetings on your \" \n        + \"birthday'\\n\")); \n  } \n\n  // This code has been used with permission from \n  //GMaur's LegacyUtils: \n  // https://github.com/GMaur/legacyutils \n  private StringBuilder injectSystemOutput() { \n    final StringBuilder stringBuilder = \n      new StringBuilder(); \n    final PrintStream outputPrintStream = \n      new PrintStream( \n        new OutputStream() { \n        @Override \n        public void write(final int b) \n          throws IOException { \n          stringBuilder.append((char) b); \n        } \n      }); \n    System.setOut(outputPrintStream); \n    return stringBuilder; \n  } \n} \n```", "```java\npublic class BirthdayGreetingService { \n\n  public BirthdayGreetingService() { \n    messageSender = getMessageSender(); \n  } \n\n  private MessageSender getMessageSender() { \n    return new EmailMessageSender(); \n  } \n\n[...] \n```", "```java\npublic class BirthdayGreetingService { \n\n  protected MessageSender getMessageSender() { \n    return new EmailMessageSender(); \n  } \n\n[...] \n```", "```java\npublic class FakeBirthdayGreetingService \n extends BirthdayGreetingService { \n\n  @Override \n  protected MessageSender getMessageSender() { \n    return new EmailMessageSender(); \n  } \n} \n```", "```java\npublic class EndToEndTest { \n\n  @Test \n  public void email_an_employee() { \n    final StringBuilder systemOutput = \n      injectSystemOutput(); \n    final Employee john = new Employee( \n       new Email(\"john@example.com\")); \n\n    new FakeBirthdayGreetingService().greet(john); \n\n    assertThat(systemOutput.toString(), \n      equalTo(\"Sent email to \" \n        + \"'john@example.com' with \" \n        + \"the body 'Greetings on  \n        + \"your birthday'\\n\")); \n  } \n```", "```java\npublic class BirthdayGreetingService { \n\n  public BirthdayGreetingService(final MessageSender \n     messageSender) { \n    this.messageSender = messageSender; \n  } \n  [...] \n} \n```", "```java\npublic class EndToEndTest { \n\n  @Test \n  public void email_an_employee() { \n    final StringBuilder systemOutput = \n      injectSystemOutput(); \n    final Employee john = new Employee( \n      new Email(\"john@example.com\")); \n\n    new BirthdayGreetingService(new \n         EmailMessageSender()).greet(john); \n\n    assertThat(systemOutput.toString(),  \n      equalTo(\"Sent email to \" \n        + \"'john@example.com' with \" \n        + \"the body 'Greetings on \" \n        + \"your birthday'\\n\")); \n  } \n  [...] \n```", "```java\n  @Test \n  public void the_service_should_ask_the_messageSender() { \n    final Email address = \n      new Email(\"john@example.com\"); \n    final Employee john = new Employee(address); \n    final MessageSender messageSender = \n      mock(MessageSender.class); \n\n    new BirthdayGreetingService(messageSender) \n      .greet(john); \n\n    verify(messageSender).send(address, \n         \"Greetings on your birthday\"); \n  } \n```", "```java\n    $ find src/test\n    find: src/test: No such file or directory\n\n```", "```java\n    $ cd src/main/java/com/packtpublishing/tddjava/ch09/alexandria/\n    $ find .\n    .\n    ./Book.java\n    ./Books.java\n    ./BooksEndpoint.java\n    ./BooksRepository.java\n    ./CustomExceptionMapper.java\n    ./MyApplication.java\n    ./States.java\n    ./User.java\n    ./UserRepository.java\n    ./Users.java\n\n```", "```java\n    $ cd src/main\n    $ find resources webapp\n    resources\n    resources/applicationContext.xml\n    webapp\n    webapp/WEB-INF\n    webapp/WEB-INF/web.xml\n\n```", "```java\ncompile 'org.springframework:spring-web:4.1.4.RELEASE'\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<web-app version=\"3.0\"  \n\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \n          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"> \n\n    <module-name>alexandria</module-name> \n\n    <context-param> \n        <param-name>contextConfigLocation</param-name> \n        <param-value>classpath:applicationContext.xml</param-value> \n    </context-param> \n\n    <servlet> \n        <servlet-name>SpringApplication</servlet-name> \n        <servlet-class>\n org.glassfish.jersey.servlet.ServletContainer</servlet-class> \n        <init-param> \n            <param-name>javax.ws.rs.Application</param-name> \n            <param-value>com.packtpublishing.tddjava.alexandria.MyApplication</param-value> \n        </init-param> \n        <load-on-startup>1</load-on-startup> \n    </servlet> \n```", "```java\npublic class MyApplication extends ResourceConfig { \n\n  public MyApplication() { \n    register(RequestContextFilter.class); \n    register(BooksEndpoint.class); \n    register(JacksonJaxbJsonProvider.class); \n    register(CustomExceptionMapper.class); \n  } \n} \n```", "```java\n@Path(\"books\") \n@Component \npublic class BooksEndpoint { \n\n  private BooksRepository books = new BooksRepository(); \n\n  private UserRepository users = new UserRepository(); \nbooks and users) are created inside the endpoint and not injected. This makes unit testing more difficult.\n```", "```java\n@XmlRootElement \npublic class Book { \n\n  private final String title; \n  private final String author; \n  private int status; //<- this attribute \n  private int id; \n```", "```java\n@XmlRootElement \npublic class Book { \n  private int[] statuses; \n  // ... \n```", "```java\n./gradlew clean jettyRun\n```", "```java\npublic class BooksEndpointTest { \n    public static final URI FULL_PATH =  \n      URI.create(\"http://localhost:8080/alexandria\"); \n    private HttpServer server; \n\n    @Before \n    public void setUp() throws IOException { \n        ResourceConfig resourceConfig = \n          new MyApplication(); \n        server = GrizzlyHttpServerFactory \n          .createHttpServer(FULL_PATH, resourceConfig); \n        server.start(); \n    } \n\n    @After \n    public void tearDown(){ \n        server.shutdownNow(); \n    } \n```", "```java\npublic void pauseTheServer() throws Exception { \n    System.in.read(); \n} \n```", "```java\npublic class BooksEndpointTest { \n\n   public static final String AUTHOR_BOOK_1 = \n     \"Viktor Farcic and Alex Garcia\"; \n    public static final String TITLE_BOOK_1 = \n      \"TDD in Java\"; \n    private final Map<String, String> TDD_IN_JAVA; \n\n    public BooksEndpointTest() { \n      TDD_IN_JAVA = getBookProperties(TITLE_BOOK_1, \n        AUTHOR_BOOK_1); \n    } \n\n    private Map<String, String> getBookProperties \n      (String title, String author) { \n        Map<String, String> bookProperties = \n          new HashMap<>(); \n        bookProperties.put(\"title\", title); \n        bookProperties.put(\"author\", author); \n        return bookProperties; \n    } \n\n    @Test \n    public void add_one_book() throws IOException { \n        final Response books1 = addBook(TDD_IN_JAVA); \n        assertBooksSize(books1, is(\"1\")); \n    } \n\n     private void assertBooksSize(Response response, \n        Matcher<String> matcher) { \n        response.then().body(matcher); \n    } \n\n    private Response addBook \n      (Map<String, ?> bookProperties) { \n        return RestAssured \n            .given().log().path() \n            .contentType(ContentType.URLENC) \n            .parameters(bookProperties) \n            .post(\"books\"); \n    } \n```", "```java\n@Path(\"books\") \n@Component \npublic class BooksEndpoint { \n\n    private BooksRepository books = \n      new BooksRepository(); \n[...] \n```", "```java\n@Test \npublic void add_one_book() throws IOException { \n    addBook(TDD_IN_JAVA); \n\n    Book tddInJava = new Book(TITLE_BOOK_1, \n      AUTHOR_BOOK_1, \n       States.fromValue(1)); \n\n    verify(booksRepository).add(tddInJava); \n} \n```", "```java\n@Path(\"books\") \n@Component \npublic class BooksEndpoint { \n\n    private BooksRepository books = \n      getBooksRepository(); \n\n    [...] \n\n     protected BooksRepository \n       getBooksRepository() { \n        return new BooksRepository(); \n    } \n\n    [...] \n```", "```java\npublic class TestApplication \n    extends ResourceConfig { \n\n    public TestApplication \n      (BooksEndpoint booksEndpoint) { \n        register(booksEndpoint); \n        register(RequestContextFilter.class); \n        register(JacksonJaxbJsonProvider.class); \n        register(CustomExceptionMapper.class); \n    } \n\n    public TestApplication() { \n        this(new BooksEndpoint( \n          new BooksRepository())); \n    } \n} \n```", "```java\n@Test \npublic void add_one_book() throws IOException { \n    addBook(TDD_IN_JAVA); \n    verify(booksRepository) \n      .add(new Book(TITLE_BOOK_1, \n          AUTHOR_BOOK_1, 1)); \n} \n```", "```java\npublic class MyApplication \n      extends ResourceConfig { \n\n    public MyApplication() { \n        this(new BooksEndpoint( \n          new BooksRepository())); \n    } \n\n    public MyApplication \n      (BooksEndpoint booksEndpoint) { \n        register(booksEndpoint); \n        register(RequestContextFilter.class); \n        register(JacksonJaxbJsonProvider.class); \n        register(CustomExceptionMapper.class); \n    } \n} \n```", "```java\npublic class BooksEndpointInteractionTest { \n\n    public static final URI FULL_PATH = URI. \n        create(\"http://localhost:8080/alexandria\"); \n    private HttpServer server; \n    private BooksRepository booksRepository; \n\n    @Before \n    public void setUp() throws IOException { \n        booksRepository = mock(BooksRepository.class); \n        BooksEndpoint booksEndpoint = \n          new BooksEndpoint(booksRepository); \n        ResourceConfig resourceConfig = \n          new MyApplication(booksEndpoint); \n        server = GrizzlyHttpServerFactory \n           .createHttpServer(FULL_PATH, resourceConfig); \n        server.start(); \n    } \n```", "```java\npublic class BooksSpec { \n\n    @Test \n    public void should_search_for_any_past_state() { \n        Book book1 = new Book(\"title\", \"author\", \n           States.AVAILABLE); \n        book1.censor(); \n\n        Books books = new Books(); \n        books.add(book1); \n\n        String available = \n          String.valueOf(States.AVAILABLE); \n        assertThat( \n          books.filterByState(available).isEmpty(), \n           is(false)); \n    } \n} \n```", "```java\npublic class Book { \n\n    private ArrayList<Integer> status; \n\n    public Book(String title, String author, int status) { \n        this.title = title; \n        this.author = author; \n        this.status = new ArrayList<>(); \n        this.status.add(status); \n    } \n\n    public int getStatus() { \n        return status.get(status.size()-1); \n    } \n\n     public void rent() { \n        status.add(States.RENTED); \n    } \n    [...] \n\n    public List<Integer> anyState() { \n        return status; \n    } \n    [...] \n```", "```java\npublic class Books { \n    public Books filterByState(String state) { \n        Integer expectedState = Integer.valueOf(state); \n        return new Books( \n            new ConcurrentLinkedQueue<>( \n                books.stream() \n                  .filter(x \n                 -> x.anyState() \n                  .contains(expectedState)) \n                  .collect(toList()))); \n    } \n    [...] \n```", "```java\npublic class States { \n    public static final int BOUGHT = 1; \n    public static final int RENTED = 2; \n    public static final int AVAILABLE = 3; \n    public static final int CENSORED = 4; \n} \n```", "```java\nenum States { \n    BOUGHT (1), \n    RENTED (2), \n    AVAILABLE (3), \n    CENSORED (4); \n\n    private final int value; \n\n    private States(int value) { \n        this.value = value; \n    } \n\n    public int getValue() { \n        return value; \n    } \n\n    public static States fromValue(int value) { \n        for (States states : values()) { \n            if(states.getValue() == value) { \n                return states; \n            } \n        } \n        throw new IllegalArgumentException( \n          \"Value '\" + value \n    + \"' could not be found in States\"); \n    } \n} \n```", "```java\npublic class BooksEndpointInteractionTest { \n    @Test \n    public void add_one_book() throws IOException { \n        addBook(TDD_IN_JAVA); \n        verify(booksRepository).add( \n            new Book(TITLE_BOOK_1, AUTHOR_BOOK_1, \n              States.BOUGHT)); \n    } \n    [...] \npublic class BooksTest { \n\n    @Test \n    public void should_search_for_any_past_state() { \n        Book book1 = new Book(\"title\", \"author\", \n           States.AVAILABLE); \n        book1.censor(); \n\n        Books books = new Books(); \n        books.add(book1); \n\n        assertThat(books.filterByState( \n            String.valueOf( \n              States.AVAILABLE.getValue())) \n            .isEmpty(), is(false)); \n    } \n    [...] \n```", "```java\n@XmlRootElement \npublic class Books { \n      public Books filterByState(String state) { \n        State expected = \n          States.fromValue(Integer.valueOf(state)); \n        return new Books( \n            new ConcurrentLinkedQueue<>( \n                books.stream() \n                  .filter(x -> x.anyState() \n                    .contains(expected)) \n                  .collect(toList()))); \n    } \n    [...] \n```", "```java\n@XmlRootElement \npublic class Book { \n\n    private final String title; \n    private final String author; \n    @XmlTransient \n    private ArrayList<States> status; \n    private int id; \n\n    public Book \n      (String title, String author, States status) { \n        this.title = title; \n        this.author = author; \n        this.status = new ArrayList<>(); \n        this.status.add(status); \n    } \n\n    public States getStatus() { \n        return status.get(status.size() - 1); \n    } \n\n    @XmlElement(name = \"status\") \n    public int getStatusAsInteger(){ \n        return getStatus().getValue(); \n    } \n\n    public List<States> anyState() { \n        return status; \n    } \n    [...] \n```", "```java\n@XmlElement(name = \"status\") \n```"]