- en: '*Chapter 13*: Backing Up Workloads'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第13章*：备份工作负载'
- en: Accidents and disasters happen, and just like you may have insurance for these
    events in real life, you should have insurance for your cluster and the workloads.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 事故和灾难时常发生，就像您在现实生活中可能为这些事件购买了保险一样，您应该为您的集群和工作负载购买保险。
- en: Most Kubernetes distributions do not include any components to back up workloads,
    but there are a number of products available from both the open source community
    and vendor-supported solutions from companies such as Kasten.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Kubernetes发行版不包括任何用于备份工作负载的组件，但是有许多产品可供选择，既有来自开源社区的解决方案，也有来自公司（如Kasten）的供应商支持的解决方案。
- en: In this chapter, you will be introduced to Velero, which can be used to back
    up workloads in the cluster. We will explain how to use Velero to back up namespaces
    and schedule backup jobs, as well as how to restore workloads.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到Velero，它可以用来备份集群中的工作负载。我们将解释如何使用Velero来备份命名空间和调度备份作业，以及如何恢复工作负载。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding Kubernetes backups
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Kubernetes备份
- en: Performing an etcd backup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行etcd备份
- en: Introducing and setting up Heptio's Velero
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍和设置Heptio的Velero
- en: Using Velero to back up workloads
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Velero来备份工作负载
- en: Managing Velero using the CLI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CLI管理Velero
- en: Restoring from a backup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从备份中恢复
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform the hands-on experiments in this chapter, you will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本章中进行实际操作实验，您需要以下内容：
- en: A KinD Kubernetes cluster
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个KinD Kubernetes集群
- en: A new Ubuntu 18.04 server with a minimum of 4 GB of RAM
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的Ubuntu 18.04服务器，至少有4GB的RAM
- en: 'You can access the code for this chapter at the following GitHub repository:
    [https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下GitHub存储库中访问本章的代码：[https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
- en: Understanding Kubernetes backups
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Kubernetes备份
- en: Backing up a Kubernetes cluster requires backing up not only the workloads running
    on the cluster but also the cluster itself. Remember that the cluster state is
    maintained in an etcd database, making it a very important component that you
    need to back up to recover from any disasters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 备份Kubernetes集群需要备份不仅运行在集群上的工作负载，还需要备份集群本身。请记住，集群状态是在etcd数据库中维护的，这使得它成为一个非常重要的组件，您需要备份以便从任何灾难中恢复。
- en: 'Creating a backup of the cluster and the running workloads allows you to do
    the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 备份集群和运行的工作负载允许您执行以下操作：
- en: Migrate clusters.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移集群。
- en: Create a development cluster from a production cluster.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从生产集群创建一个开发集群。
- en: Recover a cluster from a disaster.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从灾难中恢复集群。
- en: Recover data from persistent volumes.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从持久卷中恢复数据。
- en: Namespace and deployment recovery.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间和部署恢复。
- en: In this chapter, we will provide the details and tools to back up your etcd
    database and every namespace and object in the cluster.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将提供备份您的etcd数据库以及集群中的每个命名空间和对象的详细信息和工具。
- en: Important Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Recovering a cluster from a complete disaster in an enterprise usually involves
    backing up custom SSL certificates for various components, such as Ingress controllers,
    load-balancers, and the API server.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业中从完全灾难中恢复集群通常涉及备份各种组件的自定义SSL证书，例如Ingress控制器、负载均衡器和API服务器。
- en: Since the process to back up all custom components is different for all environments,
    we will focus on the procedures that are common among most Kubernetes distributions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于备份所有自定义组件的过程对所有环境来说都是不同的，我们将专注于大多数Kubernetes发行版中常见的程序。
- en: As you know, the cluster state is maintained in etcd, and if you lose all of
    your etcd instances, you will lose your cluster. In a multi-node control plane,
    you would have a minimum of three etcd instances, providing redundancy for the
    cluster. If you lose a single instance, the cluster would remain running and you
    could build a new instance of etcd and add it to the cluster. Once the new instance
    has been added, it will receive a copy of the etcd database and your cluster will
    be back to full redundancy.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，集群状态是在etcd中维护的，如果您丢失所有etcd实例，您将丢失您的集群。在多节点控制平面中，您将至少有三个etcd实例，为集群提供冗余。如果您丢失一个实例，集群将继续运行，您可以构建一个新的etcd实例并将其添加到集群中。一旦新实例被添加，它将接收etcd数据库的副本，您的集群将恢复到完全冗余状态。
- en: In the event that you lost all of your etcd servers without any backup of the
    database, you would lose the cluster, including the cluster state itself and all
    of the workloads. Since etcd is so important, the **etcdctl** utility includes
    a built-in backup function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您丢失所有etcd服务器而没有对数据库进行任何备份，您将丢失集群，包括集群状态本身和所有工作负载。由于etcd非常重要，**etcdctl**实用程序包含内置的备份功能。
- en: Performing an etcd backup
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行etcd备份
- en: Since we are using KinD for our Kubernetes cluster, we can create a backup of
    the etcd database, but we will not be able to restore it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在Kubernetes集群中使用KinD，我们可以创建etcd数据库的备份，但无法恢复它。
- en: Our etcd server is running in a pod on the cluster called **etcd-cluster01-control-plane**,
    located in the **kube-system** namespace. The running container includes the **etcdctl**
    utility, and we can execute a backup using **kubectl** commands.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的etcd服务器在名为**etcd-cluster01-control-plane**的集群中的一个pod中运行，位于**kube-system**命名空间中。运行的容器包括**etcdctl**实用程序，我们可以使用**kubectl**命令执行备份。
- en: Backing up the required certificates
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 备份所需的证书
- en: 'Most Kubernetes installations store certificates in **/etc/kuberetes/pki**.
    In this respect, KinD is no different, so we can back up our certificates using
    the **docker cp** command. Let''s see how to do this in two simple steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Kubernetes安装将证书存储在**/etc/kuberetes/pki**中。在这方面，KinD并无不同，因此我们可以使用**docker
    cp**命令备份我们的证书。让我们看看如何在两个简单步骤中完成这个操作：
- en: 'First, we will create a directory to store the certificates and the etcd database.
    Change your directory to the **chapter13** folder where you cloned the book repository.
    Under the **chapter13** folder, create a directory named **backup** and make it
    your current path:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个目录来存储证书和etcd数据库。将您的目录更改为您克隆了书籍存储库的**chapter13**文件夹。在**chapter13**文件夹下，创建一个名为**backup**的目录，并将其设置为当前路径：
- en: '**mkdir backup cd ./backup**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**mkdir backup cd ./backup**'
- en: 'To back up the certificates located on the API server, use the following **docker
    cp** command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要备份位于API服务器上的证书，请使用以下**docker cp**命令：
- en: '**docker cp cluster01-control-plane:/etc/kubernetes/pki ./**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**docker cp cluster01-control-plane:/etc/kubernetes/pki ./**'
- en: This will copy the contents of the **pki** folder on the control plane node
    to your **localhost** in a new folder in the **chapter13/backup/pki** folder.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把控制平面节点上**pki**文件夹的内容复制到您的**localhost**中的**chapter13/backup/pki**文件夹中的新文件夹中。
- en: The next step is to create a backup of the etcd database.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建etcd数据库的备份。
- en: Backing up the etcd database
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 备份etcd数据库
- en: 'To back up the etcd database on your KinD cluster, follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要备份KinD集群上的etcd数据库，请按照以下步骤操作：
- en: Important Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Older versions of **etcdctl** required you to set the API version to 3 using
    **ETCDCTL_API=3**, since they defaulted to the version 2 API. Etcd 3.4 changed
    the default API to 3, so we do not need to set that variable before using **etcdctl**
    commands.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版本的**etcdctl**需要您使用**ETCDCTL_API=3**将API版本设置为3，因为它们默认使用版本2的API。Etcd 3.4将默认API更改为3，因此在使用**etcdctl**命令之前，我们不需要设置该变量。
- en: 'Back up the database in the etcd pod and store it in the container''s root
    folder. Using **kubectl exec**, run a shell on the etcd pod:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在etcd pod中备份数据库并将其存储在容器的根文件夹中。使用**kubectl exec**，在etcd pod上运行一个shell：
- en: '**kubectl exec -it etcd-cluster01-control-plane /bin/sh -n kube-system**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl exec -it etcd-cluster01-control-plane /bin/sh -n kube-system**'
- en: 'In the etcd pod, back up the etcd database using **etcdctl**:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在etcd pod中使用**etcdctl**备份etcd数据库：
- en: '**etcdctl snapshot save etcd-snapshot.db --endpoints=https://127.0.0.1:2379
    --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt
    --key=/etc/kubernetes/pki/etcd/healthcheck-client.key**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**etcdctl snapshot save etcd-snapshot.db --endpoints=https://127.0.0.1:2379
    --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt
    --key=/etc/kubernetes/pki/etcd/healthcheck-client.key**'
- en: 'You will receive the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到以下输出：
- en: '**{"level":"info","ts":1591637958.297016,"caller":"snapshot /v3_snapshot.go:110","msg":"created
    temporary db file","path":"etcd-snapshot.db.part"}**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**{"level":"info","ts":1591637958.297016,"caller":"snapshot /v3_snapshot.go:110","msg":"created
    temporary db file","path":"etcd-snapshot.db.part"}**'
- en: '**{"level":"warn","ts":"2020-06-08T17:39:18.323Z","caller":"clientv3/retry_interceptor.go:116","msg":"retry
    stream intercept"}**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**{"level":"warn","ts":"2020-06-08T17:39:18.323Z","caller":"clientv3/retry_interceptor.go:116","msg":"retry
    stream intercept"}**'
- en: '**{"level":"info","ts":1591637958.3238735,"caller":"snapshot/v3_snapshot.go:121","msg":"fetching
    snapshot","endpoint":"https://127.0.0.1:2379"}**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**{"level":"info","ts":1591637958.3238735,"caller":"snapshot/v3_snapshot.go:121","msg":"fetching
    snapshot","endpoint":"https://127.0.0.1:2379"}**'
- en: '**{"level":"info","ts":1591637958.7283804,"caller":"snapshot/v3_snapshot.go:134","msg":"fetched
    snapshot","endpoint":"https://127.0.0.1:2379","took":0.431136053}**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**{"level":"info","ts":1591637958.7283804,"caller":"snapshot/v3_snapshot.go:134","msg":"fetched
    snapshot","endpoint":"https://127.0.0.1:2379","took":0.431136053}**'
- en: '**Snapshot saved at etcd-snapshot.db**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**快照保存在etcd-snapshot.db中**'
- en: '**{"level":"info","ts":1591637958.732125,"caller":"snapshot /v3_snapshot.go:143","msg":"saved","path":"etcd-snapshot.db"}**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**{"level":"info","ts":1591637958.732125,"caller":"snapshot /v3_snapshot.go:143","msg":"saved","path":"etcd-snapshot.db"}**'
- en: Exit the etcd pod.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出etcd pod。
- en: 'Copy the backup to your local machine:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将备份复制到本地机器：
- en: '**kubectl cp kube-system/etcd-cluster01-control-plane:etcd-snapshot.db ./etcd-snap-kind.db**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl cp kube-system/etcd-cluster01-control-plane:etcd-snapshot.db ./etcd-snap-kind.db**'
- en: 'Verify that the copy was successful by viewing the contents of the current
    folder:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过查看当前文件夹的内容来验证复制是否成功：
- en: ls -la
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ls -la
- en: You should see the **pki** directory and the etcd backup, **etcd-snap-kind.db**.
    If you do not see your backup, repeat the steps again and watch for any errors
    in the output.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到**pki**目录和etcd备份**etcd-snap-kind.db**。如果您没有看到备份，请重复这些步骤，并注意输出中是否有任何错误。
- en: Of course, this process only backs up the etcd database once. In the real world,
    you should create a scheduled process that executes a snapshot of etcd at regular
    intervals and stores the backup file in a safe, secure location.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个过程只备份etcd数据库一次。在现实世界中，您应该创建一个定期执行etcd快照并将备份文件存储在安全位置的计划过程。
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Due to how KinD runs the control plane, we cannot use the restore procedures
    in this section. We are providing the steps in this section so that you know how
    to restore a corrupt etcd database or node in an enterprise environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于KinD运行控制平面的方式，我们无法在本节中使用恢复过程。我们提供本节中的步骤，以便您了解如何在企业环境中恢复损坏的etcd数据库或节点。
- en: Introducing and setting up Heptio's Velero
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍和设置Heptio的Velero
- en: Velero is an open source backup solution for Kubernetes from Heptio. It offers
    many features that are only available in commercial products, including scheduling,
    backup hooks, and granular backup controls – all for no charge.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Velero是Heptio为Kubernetes提供的开源备份解决方案。它提供了许多商业产品中才有的功能，包括调度、备份钩子和细粒度的备份控制，而且全部都是免费的。
- en: While Velero is free, it has a learning curve since it does not include an easy-to-use
    GUI like most commercial products. All operations in Velero are carried out using
    their command-line utility, an executable called **velero**. This single executable
    allows you to install the Velero server, create backups, check the status of backups,
    restore backups, and more. Since every operation for management can be done with
    one file, restoring a cluster's workloads becomes a very easy process. In this
    chapter, we will create a second KinD cluster and populate it with a backup from
    an existing cluster.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Velero是免费的，但它有一个学习曲线，因为它不像大多数商业产品那样包含易于使用的GUI。Velero中的所有操作都是使用它们的命令行实用程序**velero**执行的。这个单一的可执行文件允许您安装Velero服务器，创建备份，检查备份的状态，恢复备份等。由于管理的每个操作都可以用一个文件完成，因此恢复集群的工作负载变得非常容易。在本章中，我们将创建第二个KinD集群，并使用现有集群的备份填充它。
- en: But before that, we need to take care of a few requirements.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，我们需要满足一些要求。
- en: Velero requirements
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Velero要求
- en: 'Velero consists of a few components to create a backup system:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Velero由几个组件组成，用于创建备份系统：
- en: '**The Velero CLI**: This provides the installation of Velero components. It
    is used for all backup and restore functions.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Velero CLI**：提供Velero组件的安装。用于所有备份和恢复功能。'
- en: '**The Velero server**: Responsible for executing backing up and restore procedures.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Velero服务器**：负责执行备份和恢复程序。'
- en: '**Storage provider plug-ins**: Used for backup and restoring specific storage
    systems.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储提供程序插件**：用于备份和恢复特定存储系统。'
- en: Outside of the base Velero components, you will also need to provide an object
    storage location that will be used to store your backups. If you do not have an
    object storage solution, you can deploy MinIO, which is an open source project
    that provides an S3-compatible object store. We will deploy MinIO in our KinD
    cluster to demonstrate the backup and restore features provided by Velero.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的Velero组件之外，您还需要提供一个对象存储位置，用于存储您的备份。如果您没有对象存储解决方案，可以部署MinIO，这是一个提供S3兼容对象存储的开源项目。我们将在我们的KinD集群中部署MinIO，以演示Velero提供的备份和恢复功能。
- en: Installing the Velero CLI
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Velero CLI
- en: 'The first step to deploy Velero is to download the latest Velero CLI binary.
    To install the CLI, follow these steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 部署Velero的第一步是下载最新的Velero CLI二进制文件。要安装CLI，请按照以下步骤操作：
- en: 'Download the release from Velero''s GitHub repository:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Velero的GitHub存储库下载发布版本：
- en: '**wget  https://github.com/vmware-tanzu/velero/releases/download/v1.4.0/velero-v1.4.0-linux-amd64.tar.gz**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**wget  https://github.com/vmware-tanzu/velero/releases/download/v1.4.0/velero-v1.4.0-linux-amd64.tar.gz**'
- en: 'Extract the contents of the archive:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取存档的内容：
- en: '**tar xvf velero-v1.4.0-linux-amd64.tar.gz**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**tar xvf velero-v1.4.0-linux-amd64.tar.gz**'
- en: 'Move the Velero binary to **/usr/bin**:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Velero二进制文件移动到**/usr/bin**：
- en: '**sudo mv velero-v1.4.0-linux-amd64/velero /usr/bin**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**sudo mv velero-v1.4.0-linux-amd64/velero /usr/bin**'
- en: 'Verify that you can run the Velero CLI by checking the version:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查版本来验证您是否可以运行Velero CLI：
- en: '**velero version**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero version**'
- en: 'You should see from the output from Velero that you are running version 1.4.0:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该从Velero的输出中看到您正在运行版本1.4.0：
- en: '![Figure 13.1 – Velero client version output'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.1-Velero客户端版本输出'
- en: '](image/Fig_13.1_B15514.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.1_B15514.jpg)'
- en: Figure 13.1 – Velero client version output
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1-Velero客户端版本输出
- en: You can safely ignore the last line, which shows an error in finding the Velero
    server. Right now, all we have installed is the Velero executable, so we will
    install the server in the next step.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安全地忽略最后一行，它显示了在查找Velero服务器时出现的错误。现在，我们安装的只是Velero可执行文件，所以下一步我们将安装服务器。
- en: Installing Velero
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Velero
- en: 'Velero has minimal system requirements, most of which are easily met:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Velero具有最低的系统要求，其中大部分都很容易满足：
- en: A Kubernetes cluster running version 1.10 or higher
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行版本1.10或更高版本的Kubernetes集群
- en: The Velero executable
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Velero可执行文件
- en: Images for the system components
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统组件的图像
- en: A compatible storage location
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 兼容的存储位置
- en: A volume snapshot plugin (optional)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷快照插件（可选）
- en: Depending on your infrastructure, you may not have a compatible location for
    the backups or snapshotting volumes. Fortunately, if you do not have a compatible
    storage system, there are open source options that you can add to your cluster
    to meet the requirements.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的基础设施，您可能没有兼容的位置用于备份或快照卷。幸运的是，如果您没有兼容的存储系统，有一些开源选项可以添加到您的集群中以满足要求。
- en: In the next section, we will explain the natively supported storage options
    and since our example will use a KinD cluster, we will install open source options
    to add compatible storage to use as a backup location.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将解释本地支持的存储选项，由于我们的示例将使用KinD集群，我们将安装开源选项以添加兼容的存储用作备份位置。
- en: Backup storage location
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份存储位置
- en: Velero requires an S3-compatible bucket to store backups. There are a number
    of officially supported systems, including all object-store offerings from AWS,
    Azure, and Google.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Velero需要一个兼容S3存储桶来存储备份。有许多官方支持的系统，包括来自AWS、Azure和Google的所有对象存储产品。
- en: 'Along with the officially supported providers, there are a number of community-
    and vendor-supported providers from companies such as DigitalOcean, Hewlett Packard,
    and Portworx. The following chart lists all of the current providers:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除了官方支持的提供者外，还有许多社区和供应商支持的提供者，来自数字海洋、惠普和Portworx等公司。以下图表列出了所有当前的提供者：
- en: Important Note
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the following table, the **Backup Support** column means that the plugin
    provides a compatible location to store Velero backups. Volume Snapshot Support
    means that the plugin supports backing up persistent volumes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，**备份支持**列表示插件提供了一个兼容的位置来存储Velero备份。卷快照支持表示插件支持备份持久卷。
- en: '![Table 13.1 – Velero storage options'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![表13.1 – Velero存储选项'
- en: '](image/Table_13.1.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Table_13.1.jpg)'
- en: Table 13.1 – Velero storage options
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 表13.1 – Velero存储选项
- en: Note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Velero's AWS S3 driver is compatible with many third-party storage systems,
    including EMC ECS, IBM Cloud, Oracle Cloud, and MinIO.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Velero的AWS S3驱动器与许多第三方存储系统兼容，包括EMC ECS、IBM Cloud、Oracle Cloud和MinIO。
- en: If you do not have an existing object storage solution, you can deploy the open
    source S3 provider, MinIO.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有现有的对象存储解决方案，您可以部署开源S3提供者MinIO。
- en: Now that we have the Velero executable installed, and our KinD cluster has persistent
    storage, thanks to the auto-provisioner from Rancher, we can move on to the first
    requirement – adding an S3-compatible backup location for Velero.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Velero可执行文件，并且我们的KinD集群具有持久存储，这要归功于Rancher的自动配置程序，我们可以继续进行第一个要求 - 为Velero添加一个兼容的S3备份位置。
- en: Deploying MinIO
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署MinIO
- en: MinIO is an open source object storage solution that is compatible with Amazon's
    S3 cloud services API. You can read more about MinIO on its GitHub repository
    at [https://github.com/minio/minio](https://github.com/minio/minio).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: MinIO是一个开源的对象存储解决方案，与Amazon的S3云服务API兼容。您可以在其GitHub存储库上阅读有关MinIO的更多信息[https://github.com/minio/minio](https://github.com/minio/minio)。
- en: 'If you install MinIO using a manifest from the internet, be sure to verify
    what volumes are declared in the deployment before trying to use it as a backup
    location. Many of the examples on the internet use **emptyDir: {}**, which is
    not persistent.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用互联网上的清单安装MinIO，请务必在尝试将其用作备份位置之前验证部署中声明了哪些卷。互联网上的许多示例使用**emptyDir: {}**，这是不持久的。'
- en: We have included a modified MinIO deployment from the Velero GitHub repository
    in the **chapter13** folder. Since we have persistent storage on our cluster,
    we edited the volumes in the deployment to use **PersistentVolumeClaims** (**PVCs**),
    which will use the auto-provisioner for Velero's data and configuration.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在**chapter13**文件夹中包含了来自Velero GitHub存储库的修改后的MinIO部署。由于我们的集群上有持久存储，我们编辑了部署中的卷，以使用**PersistentVolumeClaims**（**PVCs**），这将使用Velero的数据和配置的自动配置程序。
- en: 'To deploy the MinIO server, change directories to **chapter13** and execute
    **kubectl create**. The deployment will create a Velero namespace, PVCs, and MinIO
    on your KinD cluster:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署MinIO服务器，请切换到**chapter13**目录并执行**kubectl create**。部署将在您的KinD集群上创建一个Velero命名空间、PVCs和MinIO：
- en: kubectl create -f minio-deployment.yaml
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: kubectl create -f minio-deployment.yaml
- en: 'This will deploy the MinIO server and expose it as **minio** on port **9000/TCP**,
    as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将部署MinIO服务器，并将其暴露为端口9000/TCP的**minio**，如下所示：
- en: '![Figure 13.2 – Minio service creation'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.2 - Minio服务创建'
- en: '](image/Fig_13.2_B15514.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.2_B15514.jpg)'
- en: Figure 13.2 – Minio service creation
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 - Minio服务创建
- en: The MinIO server can be targeted by any pod in the cluster, with correct access
    keys, using **minio.velero.svc** on port **9000**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: MinIO服务器可以被集群中的任何pod以正确的访问密钥使用**minio.velero.svc**的9000端口进行访问。
- en: Exposing the MinIO dashboard
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 暴露MinIO仪表板
- en: 'MinIO includes a dashboard that allows you to browse the contents of the S3
    buckets on the server. To allow access to the dashboard, you can deploy an Ingress
    rule that exposes the MinIO service. We have included an example Ingress manifest
    in the **chapter13** folder. You can create it using the included file, or from
    the following manifest:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: MinIO包括一个仪表板，允许您浏览服务器上S3存储桶的内容。为了允许访问仪表板，您可以部署一个暴露MinIO服务的Ingress规则。我们在**chapter13**文件夹中包含了一个示例Ingress清单。您可以使用包含的文件创建它，或者使用以下清单创建：
- en: 'Remember to change the host to include the host''s IP address in the **nip.io**
    URL:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得将主机更改为在**nip.io** URL中包含主机IP地址：
- en: 'apiVersion: networking.k8s.io/v1beta1'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: networking.k8s.io/v1beta1'
- en: 'kind: Ingress'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：Ingress
- en: 'metadata:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据：
- en: 'name: minio-ingress'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：minio-ingress
- en: 'namespace: velero'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间：velero
- en: 'spec:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 规范：
- en: 'rules:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：
- en: '- host: minio.[hostip].nip.io'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '- host: minio.[hostip].nip.io'
- en: 'http:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'http:'
- en: 'paths:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 路径：
- en: '- path: /'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '- 路径：/'
- en: 'backend:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 后端：
- en: 'serviceName: minio'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'serviceName: minio'
- en: 'servicePort: 9000'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'servicePort: 9000'
- en: Once deployed, you can use a browser on any machine and open the URL you used
    for the Ingress rule. On our cluster, the host IP is **10.2.1.121**, so our URL
    is **minio.10.2.1.121.nip.io**:![Figure 13.3 – MinIO dashboard
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署后，您可以在任何机器上使用浏览器打开您用于Ingress规则的URL。在我们的集群上，主机IP是**10.2.1.121**，所以我们的URL是**minio.10.2.1.121.nip.io**：![图13.3
    - MinIO仪表板
- en: '](image/Fig_13.3_B15514.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.3_B15514.jpg)'
- en: Figure 13.3 – MinIO dashboard
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 - MinIO仪表板
- en: To access the dashboard, supply the access key and secret key from the MinIO
    deployment. If you used the MinIO installer from the GitHub repository, the access
    key and secret key are **packt**/**packt**.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问仪表板，请提供MinIO部署中的访问密钥和秘密密钥。如果您使用了来自GitHub存储库的MinIO安装程序，则访问密钥和秘密密钥为**packt**/**packt**。
- en: 'Once logged in, you will see a list of buckets and any items that are stored
    in them. Right now, it will be fairly empty since we haven''t created a backup
    yet. We will revisit the dashboard after we execute a backup of our KinD cluster:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，您将看到一个存储桶列表以及其中存储的任何项目。现在它将相当空，因为我们还没有创建备份。在我们执行KinD集群的备份后，我们将重新访问仪表板：
- en: '![Figure 13.4 – MinIO Browser'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.4 - MinIO浏览器'
- en: '](image/Fig_13.4_B15514.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.4_B15514.jpg)'
- en: Figure 13.4 – MinIO Browser
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 - MinIO浏览器
- en: Important Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are new to object storage, it is important to note that while this deploys
    a storage solution in your cluster, it **will not** create a StorageClass or integrate
    with Kubernetes in any way. All pod access to the S3 bucket is done using the
    URL that we will provide in the next section.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是对象存储的新手，重要的是要注意，虽然这在您的集群中部署了一个存储解决方案，但它**不会**创建 StorageClass 或以任何方式与 Kubernetes
    集成。所有对 S3 存储桶的 pod 访问都是使用我们将在下一节提供的 URL 完成的。
- en: Now that you have an S3-compatible object store running, you need to create
    a configuration file that Velero will use to target your MinIO server.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经运行了一个兼容 S3 的对象存储，您需要创建一个配置文件，Velero 将使用它来定位您的 MinIO 服务器。
- en: Creating the S3 target configuration
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 S3 目标配置
- en: 'First, we need to create a file with credentials to the S3 bucket. When we
    deployed the MinIO manifest from the **chapter13** folder, it created an initial
    key ID and access key, **packt**/**packt**:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个包含 S3 存储桶凭据的文件。当我们从 **chapter13** 文件夹部署 MinIO 清单时，它创建了一个初始密钥 ID 和访问密钥，**packt**/**packt**：
- en: 'Create a new credential file in the **chapter13** folder called **credentials-velero**:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **chapter13** 文件夹中创建一个名为 **credentials-velero** 的新凭据文件：
- en: '**vi credentials-velero**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**vi credentials-velero**'
- en: 'Add the following lines to the credentials file and save the file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到凭据文件中并保存该文件：
- en: '[default]'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[default]'
- en: aws_access_key_id = packt
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: aws_access_key_id = packt
- en: aws_secret_access_key = packt
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: aws_secret_access_key = packt
- en: Now, we can deploy Velero using the Velero executable and the **install** option.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 Velero 可执行文件和 **install** 选项部署 Velero。
- en: 'Execute the Velero installation using the following command from inside the
    **chapter13** folder to deploy Velero:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在 **chapter13** 文件夹内执行 Velero 安装以部署 Velero：
- en: '**velero install \**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero install \**'
- en: '**     --provider aws \**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --provider aws \**'
- en: '**     --plugins velero/velero-plugin-for-aws:v1.1.0 \**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: --插件 velero/velero-plugin-for-aws:v1.1.0 \
- en: '**     --bucket velero \**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --bucket velero \**'
- en: '**     --secret-file ./credentials-velero \**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --secret-file ./credentials-velero \**'
- en: '**     --use-volume-snapshots=false \**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --use-volume-snapshots=false \**'
- en: '**     --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.velero.svc:9000**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.velero.svc:9000**'
- en: 'Let''s explain the installation options and what the values mean:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释安装选项以及值的含义：
- en: '![Table 13.2 – Velero Install Options'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 13.2 – Velero 安装选项'
- en: '](image/Table_13.2.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Table_13.2.jpg)'
- en: Table 13.2 – Velero Install Options
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.2 – Velero 安装选项
- en: 'When you execute the install, you will see a number of objects being created,
    including a number of **CustomResourceDefinitions** (**CRDs**) and secrets that
    Velero uses to handle backup and restore operations. If you run into issues with
    your Velero server starting up correctly, there are a few CRDs and secrets that
    you can look at that may have incorrect information. In the following table, we
    explain some of the common objects that you may need to interact with when using
    Velero:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行安装时，您将看到创建了许多对象，包括 Velero 用于处理备份和恢复操作的一些 **CustomResourceDefinitions** (**CRDs**)
    和 secrets。如果您在 Velero 服务器启动时遇到问题，有一些 CRDs 和 secrets 可能包含不正确的信息，您可以查看一下。在下表中，我们解释了在使用
    Velero 时可能需要与之交互的一些常见对象：
- en: '![Table 13.3 – Velero''s CRDs and Secrets'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 13.3 – Velero 的 CRDs 和 Secrets'
- en: '](image/Table_13.3.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Table_13.3.jpg)'
- en: Table 13.3 – Velero's CRDs and Secrets
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.3 – Velero 的 CRDs 和 Secrets
- en: While most of your interaction with these objects will be through the Velero
    executable, it is always a good practice to understand how utilities interact
    with the API server. Understanding the objects and what their functions are is
    helpful if you do not have access to the Velero executable but you need to view,
    or potentially change, an object value to address an issue quickly.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您与这些对象的大部分交互将通过Velero可执行文件进行，但始终要了解实用程序如何与API服务器交互是一个好习惯。如果您无法访问Velero可执行文件，但需要快速查看或可能更改对象值以解决问题，了解对象及其功能是有帮助的。
- en: Now that we have Velero installed, and a high-level understanding of Velero
    objects, we can move on to creating different backup jobs for a cluster.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Velero，并且对Velero对象有了高层次的理解，我们可以继续为集群创建不同的备份作业。
- en: Using Velero to back up workloads
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Velero备份工作负载
- en: Velero supports running a "one-time" backup with a single command or on a recurring
    schedule. Whether you chose to run a single backup or a recurring backup, you
    can back up all objects or only certain objects using **include** and **exclude**
    flags.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Velero支持使用单个命令或定期计划运行“一次性”备份。无论您选择运行单个备份还是定期备份，都可以使用**include**和**exclude**标志备份所有对象或仅特定对象。
- en: Running a one-time cluster backup
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行一次性集群备份
- en: To create an initial backup, you can run a single Velero command that will back
    up all of the namespaces in the cluster.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建初始备份，您可以运行一个单个的Velero命令，该命令将备份集群中的所有命名空间。
- en: Executing a backup without any flags to include or exclude any cluster objects
    will back up every namespace and all of the objects in the namespace.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 执行备份而不使用任何包括或排除任何集群对象的标志将备份每个命名空间和命名空间中的所有对象。
- en: 'To create a one-time backup, execute the **velero** command with the **backup
    create <backup name>** option. In our example, we have named the backup **initial-backup**:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一次性备份，请使用**velero**命令和**backup create <backup name>**选项。在我们的示例中，我们将备份命名为**initial-backup**：
- en: velero backup create initial-backup
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: velero backup create initial-backup
- en: 'The only confirmation you will receive from this is that the backup request
    was submitted:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到的唯一确认是备份请求已提交：
- en: Backup request "initial-backup" submitted successfully.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 备份请求“initial-backup”成功提交。
- en: Run `velero backup describe initial-backup` or `velero backup logs initial-backup`
    for more details.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`velero backup describe initial-backup`或`velero backup logs initial-backup`以获取更多详细信息。
- en: Fortunately, Velero also tells you the command to check the backup status and
    logs. The last line of the output tells us that we can use the **velero** command
    with the **backup** option and either **describe** or **logs** to check the status
    of the backup operation.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Velero还告诉您检查备份状态和日志的命令。输出的最后一行告诉我们，我们可以使用**velero**命令和**backup**选项以及**describe**或**logs**来检查备份操作的状态。
- en: 'The **describe** option will show all of the details of the job:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**describe**选项将显示作业的所有详细信息：'
- en: '![Figure 13.5 – The Velero describe output'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.5 - Velero描述输出'
- en: '](image/Fig_13.5_B15514.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.5_B15514.jpg)'
- en: Figure 13.5 – The Velero describe output
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5 - Velero描述输出
- en: Note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To reinforce the previous section, where we mentioned some of the CRDs that
    Velero uses, we also want to explain where the Velero utility retrieves this information
    from.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加强前一节中提到的Velero使用的一些CRD，我们还想解释一下Velero实用程序从哪里检索这些信息。
- en: Each backup that is created will create a backup object in the Velero namespace.
    For our initial backup, a new backup object named **initial-backup** was created.
    Using **kubectl**, we can describe the object to see similar information that
    the Velero executable will provide.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的每个备份都将在Velero命名空间中创建一个备份对象。对于我们的初始备份，创建了一个名为**initial-backup**的新备份对象。使用**kubectl**，我们可以描述对象以查看与Velero可执行文件提供的类似信息。
- en: As shown in *Figure 13.5*, the **describe** option shows you all of the settings
    for the backup job. Since we didn't pass any options to the backup request, the
    job contains all the namespaces and objects. Some of the most important details
    to verify are the phase, total items to be backed up, and the items backed up.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图13.5*所示，**describe**选项会显示备份作业的所有设置。由于我们没有向备份请求传递任何选项，该作业包含所有命名空间和对象。要验证的一些最重要的细节是阶段、要备份的总项目数以及已备份的项目数。
- en: If the status of the phase is anything other than **success**, you may not have
    all the items that you want in your backup. It's also a good idea to check the
    backed-up items; if the number of items backed up is less than the items to be
    backed up, our backup did not back up all of the items.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果阶段的状态不是**success**，则您的备份中可能没有您想要的所有项目。检查已备份的项目也是一个好主意；如果已备份的项目数少于要备份的项目数，那么我们的备份没有备份所有项目。
- en: 'You may need to check the status of a backup, but you may not have the Velero
    executable installed. Since this information is in a CR, we can describe the CR
    to retrieve the backup details. Running **kubectl describe** on the backup object
    will show the status of the backup:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要检查备份的状态，但可能没有安装Velero可执行文件。由于这些信息在CR中，我们可以描述CR以检索备份详细信息。在备份对象上运行**kubectl
    describe**将显示备份的状态：
- en: kubectl describe backups initial-backup -n velero
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: kubectl describe backups initial-backup -n velero
- en: 'If we jump to the bottom of the output from the **describe** command, you will
    see the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们跳到**describe**命令的输出底部，您将看到以下内容： '
- en: '![Figure 13.6 – The kubectl describe output on the backup resource'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.6 – 备份资源的kubectl describe输出'
- en: '](image/Fig_13.6_B15514.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.6_B15514.jpg)'
- en: Figure 13.6 – The kubectl describe output on the backup resource
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6 – 备份资源的kubectl describe输出
- en: In the output, you can see that the phase is completed, the start and completion
    times, and the number of objects that were backed up and included in the backup.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，您可以看到阶段已完成，开始和完成时间，以及已备份和包含在备份中的对象数量。
- en: It's good practice to use a cluster add-on that can generate alerts based on
    information in log files or the status of an object, such as AlertManager. You
    always want a successful backup, and if a backup fails, you should look into the
    failure immediately.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可以根据日志文件中的信息或对象状态生成警报的集群附加组件是一个很好的做法，比如AlertManager。您总是希望备份成功，如果备份失败，应立即查找失败原因。
- en: Scheduling a cluster backup
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安排集群备份
- en: Creating a one-time backup is useful if you have a cluster operation scheduled
    or if there is a major software upgrade in a namespace. Since these events will
    be rare, you will want to schedule a backup that will back up the cluster at regular
    intervals, rather than random one-time backups.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安排了集群操作或命名空间中有重大软件升级，那么创建一次性备份是有用的。由于这些事件将很少发生，您会希望安排定期备份集群，而不是随机的一次性备份。
- en: 'To create a scheduled backup, you use the **schedule** option and create a
    tag with the Velero executable. Along with the schedule and create, you need to
    provide a name for the job and the **schedule** flag, which accepts *cron*-based
    expressions. The following schedule tells Velero to back up at 1 AM every day:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建定期备份，您可以使用**schedule**选项并创建一个带有Velero可执行文件的标签。除了计划和创建之外，您还需要为作业提供一个名称和**schedule**标志，该标志接受基于*cron*的表达式。以下计划告诉Velero每天凌晨1点备份：
- en: '![Figure 13.7 – Cron scheduling expression'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.7 – Cron调度表达式'
- en: '](image/Fig_13.7_B15514.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.7_B15514.jpg)'
- en: Figure 13.7 – Cron scheduling expression
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7 – Cron调度表达式
- en: 'Using the information in *Figure 13.7*, we can create a backup that will create
    a backup at 1 a.m., using the following **velero schedule create** command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *图 13.7* 中的信息，我们可以创建一个备份，将在凌晨 1 点创建一个备份，使用以下 **velero schedule create** 命令：
- en: velero schedule create cluster-daily --schedule="0 1 * * *"
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: velero schedule create cluster-daily --schedule="0 1 * * *"
- en: 'Velero will reply that a schedule has been successfully created:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Velero 将回复计划已成功创建：
- en: Schedule "cluster-daily" created successfully.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 计划 "cluster-daily" 成功创建。
- en: If you are not familiar with cron and the options that are available, you should
    read the cron package documentation at [https://godoc.org/github.com/robfig/cron](https://godoc.org/github.com/robfig/cron).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉 cron 和可用的选项，您应该阅读 cron 包文档 [https://godoc.org/github.com/robfig/cron](https://godoc.org/github.com/robfig/cron)。
- en: 'cron will also accept some shorthand expressions, which may be easier than
    using the standard cron expressions. The following table contains the shorthand
    for predefined schedules:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: cron 还将接受一些简写表达式，这可能比使用标准 cron 表达式更容易。以下表格包含预定义计划的简写：
- en: '![Table 13.4 – cron shorthand scheduling'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 13.4 – cron 简写调度'
- en: '](image/Table_13.4.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Table_13.4.jpg)'
- en: Table 13.4 – cron shorthand scheduling
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.4 – cron 简写调度
- en: 'Using the values from the shorthand table to schedule a backup job that executes
    daily at midnight, we use the following Velero command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简写表中的值来安排每天午夜执行的备份作业，我们使用以下 Velero 命令：
- en: velero schedule create cluster-daily --schedule="@daily"
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: velero schedule create cluster-daily --schedule="@daily"
- en: Scheduled jobs will create a backup object when the job is executed. The backup
    name will contain the name of the schedule, with a dash and the date and time
    of the backup. Using the name from the preceding example, our initial backup was
    created with the name **cluster-daily-20200627174947**. Here, **20200627** is
    the date the backup ran, and **174947** is the time the backup ran in UTC time.
    This is the equivalent of **2020-06-27 17:49:47 +0000 UTC**.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 计划作业将在执行作业时创建一个备份对象。备份名称将包含计划的名称，后跟破折号和备份的日期和时间。使用前面示例中的名称，我们的初始备份的名称为 **cluster-daily-20200627174947**。这里，**20200627**
    是备份运行的日期，**174947** 是备份在 UTC 时间中运行的时间。这相当于 **2020-06-27 17:49:47 +0000 UTC**。
- en: All of our examples so far have been configured to back up all of the namespaces
    and objects in the cluster. You may need to create different schedules or exclude/include
    certain objects based on your specific clusters.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的示例都已配置为备份集群中的所有命名空间和对象。您可能需要创建不同的计划或根据特定集群排除/包含某些对象。
- en: In the next section, we will explain how to create a custom backup that will
    allow you to use specific tags to include and exclude namespaces and objects.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将解释如何创建一个自定义备份，允许您使用特定标签来包含和排除命名空间和对象。
- en: Creating a custom backup
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义备份
- en: 'When you create any backup job, you can provide flags to customize what objects
    will be included in or excluded from the backup job. Some of the most common flags
    are detailed here:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建任何备份作业时，您可以提供标志来自定义备份作业中将包含或排除的对象。以下是一些最常见的标志的详细信息：
- en: '![](image/Table_13.5a.jpg)![Table 13.5 – Velero backup flags'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![](image/Table_13.5a.jpg)![表 13.5 – Velero 备份标志'
- en: '](image/Table_13.5b.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Table_13.5b.jpg)'
- en: Table 13.5 – Velero backup flags
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.5 – Velero 备份标志
- en: 'To create a scheduled backup that will run daily and include only Kubernetes
    system namespaces, we would create a scheduled job using the **--include-namespaces**
    flag:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个每天运行并且只包含 Kubernetes 系统命名空间的计划备份，我们将使用 **--include-namespaces** 标志创建一个计划作业：
- en: velero schedule create cluster-ns-daily --schedule="@daily" --include-namespaces
    ingress-nginx,kube-node-lease,kube-public,kube-system,local-path-storage,velero
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: velero schedule create cluster-ns-daily --schedule="@daily" --include-namespaces
    ingress-nginx,kube-node-lease,kube-public,kube-system,local-path-storage,velero
- en: Since Velero commands use a CLI for all operations, we should start by explaining
    the common commands you will use to manage backup and restore operations.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Velero命令使用CLI进行所有操作，我们应该从解释你将用来管理备份和恢复操作的常见命令开始。
- en: Managing Velero using the CLI
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CLI管理Velero
- en: Right now, all Velero operations must be done using the Velero executable. Managing
    a backup system without a GUI can be a challenge at first, but once you get comfortable
    with the Velero management commands, it becomes easy to perform operations.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有的Velero操作必须使用Velero可执行文件完成。在没有GUI的情况下管理备份系统一开始可能会有挑战，但一旦你熟悉了Velero管理命令，执行操作就变得容易了。
- en: 'The Velero executable accepts two options:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Velero可执行文件接受两个选项：
- en: Commands
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令
- en: Flags
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志
- en: A command is an operation such as **backup**, **restore**, **install**, and
    **get**. Most initial commands require a second command to make a complete operation.
    For example, a **backup** command requires another command, such as **create**
    or **delete**, to form a complete operation.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 命令是诸如**backup**、**restore**、**install**和**get**之类的操作。大多数初始命令需要第二个命令来完成操作。例如，**backup**命令需要另一个命令，比如**create**或**delete**，才能形成一个完整的操作。
- en: There are two types of flags – command flags and global flags. Global flags
    are flags that can be set for any command, while command flags are specific to
    the command being executed.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的标志 - 命令标志和全局标志。全局标志是可以为任何命令设置的标志，而命令标志是特定于正在执行的命令的。
- en: 'Like many CLI tools, Velero includes built-in help for every command. If you
    forget some syntax or want to know what flags can be used with a command, you
    can use the **-h** flag to get help:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多CLI工具一样，Velero包括每个命令的内置帮助。如果你忘记了一些语法，或者想知道可以与命令一起使用哪些标志，你可以使用**-h**标志来获取帮助：
- en: velero backup create -h
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: velero backup create -h
- en: 'The following is the abbreviated help output for the **backup create** command:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是**backup create**命令的简化帮助输出：
- en: '![Figure 13.8 – Velero help output'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.8 - Velero帮助输出'
- en: '](image/Fig_13.8_B15514.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.8_B15514.jpg)'
- en: Figure 13.8 – Velero help output
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8 - Velero帮助输出
- en: We find Velero's help system to be very helpful; once you get comfortable with
    the Velero basics, you will find that the built-in help provides enough information
    for most commands.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现Velero的帮助系统非常有帮助；一旦你熟悉了Velero的基础知识，你会发现内置的帮助为大多数命令提供了足够的信息。
- en: Using common Velero commands
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用常见的Velero命令
- en: Since many of you may be new to Velero, we wanted to provide a quick overview
    of the most commonly used commands to get you comfortable with operating Velero.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你们中的许多人可能是新手，我们想要提供一个快速概述，介绍最常用的命令，让你们熟悉Velero的操作。
- en: Listing Velero objects
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出Velero对象
- en: As we have mentioned, Velero management is driven by using the CLI. You can
    imagine that as you create additional backup jobs, it may become difficult to
    remember what has been created. This is where the **get** command comes in handy.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，Velero管理是通过使用CLI来驱动的。你可以想象，随着你创建额外的备份作业，记住已经创建了什么可能会变得困难。这就是**get**命令派上用场的地方。
- en: 'The CLI can retrieve, or get, a list of the following Velero objects:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: CLI可以检索或获取以下Velero对象的列表：
- en: Backup-locations
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份位置
- en: Backups
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份
- en: Plugins
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件
- en: Restores
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复
- en: Schedules
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划
- en: Snapshot locations
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快照位置
- en: 'As you may expect, executing **velero get <object>** will return a list of
    the objects managed by Velero:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你们所期望的那样，执行**velero get <object>**将返回Velero管理的对象列表：
- en: velero get backups
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: velero get backups
- en: 'Here is the output:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Figure 13.9 – The velero get output'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.9 - velero get输出'
- en: '](image/Fig_13.9_B15514.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.9_B15514.jpg)'
- en: Figure 13.9 – The velero get output
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9 - velero get输出
- en: All the **get** commands will produce a similar output, which contains the names
    of each object and any unique values for the objects.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的**get**命令都会产生类似的输出，其中包含每个对象的名称和对象的任何唯一值。
- en: The **get** command is useful for a quick look at what objects exists, but it's
    usually used as the first step toward executing the next command, **describe**.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**get**命令对于快速查看存在的对象非常有用，但通常用作执行下一个**describe**命令的第一步。'
- en: Retrieving details for a Velero object
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检索Velero对象的详细信息
- en: 'After you get the name of the object that you want the details for, you can
    use the **describe** command to get the details of the object. Using the output
    from the **get** command in the previous section, we want to view the details
    for the **cluster-daily-20200627175009** backup job:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取要获取详细信息的对象的名称后，您可以使用**describe**命令获取对象的详细信息。使用上一节中**get**命令的输出，我们想查看**cluster-daily-20200627175009**备份作业的详细信息：
- en: velero describe backup cluster-daily-20200627175009
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: velero describe backup cluster-daily-20200627175009
- en: The output of the command provides all the details for the requested object.
    You will find yourself using the **describe** command to troubleshoot issues such
    as backup failures.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出提供了请求对象的所有细节。您将发现自己使用**describe**命令来解决诸如备份失败之类的问题。
- en: Creating and deleting objects
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建和删除对象
- en: Since we have already used the **create** command a few times, we will focus
    on the **delete** command in this section.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经多次使用了**create**命令，所以在本节中我们将专注于**delete**命令。
- en: To recap, the **create** command allows you to create objects that will be managed
    by Velero, including backups, schedules, restores, and locations for backups and
    snapshots. We have created a backup and a schedule, and in the next section, we
    will create a restore.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，**create**命令允许您创建将由Velero管理的对象，包括备份、计划、还原以及备份和快照的位置。我们已经创建了一个备份和一个计划，在下一节中，我们将创建一个还原。
- en: Once an object is created, you may discover that you need to delete it. To delete
    objects in Velero, you use the **delete** command, along with the object and name
    you want to delete.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了一个对象，您可能会发现需要删除它。要在Velero中删除对象，您可以使用**delete**命令，以及您想要删除的对象和名称。
- en: 'In our **get backups** output example, we had a backup called **day2**. To
    delete that backup, we would execute the following **delete** command:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的**get backups**输出示例中，我们有一个名为**day2**的备份。要删除该备份，我们将执行以下**delete**命令：
- en: velero delete backup day2
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: velero delete backup day2
- en: 'Since a delete is a one-way operation, you will need to confirm that you want
    to delete the object. Once confirmed, it may take a few minutes for the object
    to be removed from Velero since it waits until all associated data is removed:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 由于删除是一个单向操作，您需要确认您要删除该对象。一旦确认，可能需要几分钟才能从Velero中删除该对象，因为它会等到所有关联数据都被删除：
- en: '![Figure 13.10 – Velero delete output'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.10 - Velero删除输出'
- en: '](image/Fig_13.10_B15514.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.10_B15514.jpg)'
- en: Figure 13.10 – Velero delete output
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10 - Velero删除输出
- en: As you can see in the output, when we delete a backup, Velero will delete all
    of the objects for the backup, including the snapshot's backup files and restores.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在输出中所看到的，当我们删除一个备份时，Velero将删除该备份的所有对象，包括快照的备份文件和还原。
- en: There are additional commands that you can use, but the commands covered in
    this section are the main commands you need to get comfortable with Velero.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他命令可以使用，但本节涵盖的命令是您需要熟悉Velero的主要命令。
- en: Now that you can create and schedule backups, and know how to use the help system
    in Velero, we can move on to using a backup to restore objects.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以创建和安排备份，并知道如何在Velero中使用帮助系统，我们可以继续使用备份来还原对象。
- en: Restoring from a backup
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从备份中还原
- en: With any luck, you will rarely need to execute a restore of any Kubernetes object.
    Even if you haven't been in the IT field long, you have likely experienced a personal
    situation where you had a drive failure, or accidentally deleted an important
    file. If you don't have a backup of the data that was lost, it is a very frustrating
    situation. In the enterprise world, missing data or not having a backup can lead
    to huge revenue losses, or in some scenarios, large fines in regulated industries.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 带着一些幸运，你很少需要执行任何Kubernetes对象的恢复。即使你在IT领域工作时间不长，你可能也经历过个人情况，比如硬盘故障或者意外删除了重要文件。如果你没有丢失数据的备份，这是非常令人沮丧的情况。在企业世界中，丢失数据或没有备份可能会导致巨额收入损失，或者在一些受监管的行业中，可能会面临巨额罚款。
- en: To run a restore from a backup, you use the **create restore** command with
    the **--from-backup <backup name>** tag.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要从备份中运行恢复，您可以使用**create restore**命令和**--from-backup <backup name>**标签。
- en: 'Earlier in the chapter, we created a single, one-time backup, called **initial-backup**,
    which includes every namespace and object in the cluster. If we decided that we
    needed to restore that backup, we would execute a restore using the Velero CLI:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们创建了一个单一的一次性备份，名为**initial-backup**，其中包括集群中的每个命名空间和对象。如果我们决定需要恢复该备份，我们将使用Velero
    CLI执行恢复：
- en: velero restore create --from-backup initial-backup
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: velero restore create --from-backup initial-backup
- en: 'The output from the **restore** command may seem odd:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**restore**命令的输出可能看起来有些奇怪：'
- en: Restore request "initial-backup-20200627194118" submitted successfully.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复请求"initial-backup-20200627194118"提交成功。
- en: At a quick glance, it may seem like a backup request was made since Velero replies
    with **"initial-backup-20200627194118" submitted successfully**. Velero uses the
    backup name to create a restore request, and since we named our backup **initial-backup**,
    the restore job name will use that name and append the date and time of the restore
    request.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，似乎已经发出了一个备份请求，因为Velero回复说**"initial-backup-20200627194118"提交成功**。Velero使用备份名称创建恢复请求，因为我们将备份命名为**initial-backup**，所以恢复作业名称将使用该名称并附加恢复请求的日期和时间。
- en: 'You can view the status of the restore using the **describe** command:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**describe**命令查看恢复的状态：
- en: velero restore describe initial-backup-20200627194118
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: velero restore describe initial-backup-20200627194118
- en: Depending on the size of the restore, it may take some time to restore the entire
    backup. During the restore phase, the status of the backup will be **InProgress**.
    Once completed, the status will change to **Completed**.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 根据恢复的大小，可能需要一些时间来恢复整个备份。在恢复阶段，备份的状态将是**InProgress**。完成后，状态将变为**Completed**。
- en: Restoring in action
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恢复中的操作
- en: With all of the theory behind us, let's use two examples to see Velero in action.
    For the examples, we will start with a simple deployment that will delete and
    restore on the same cluster. The next example will be more complex; we will use
    the backup for our main KinD cluster and restore the cluster objects to a new
    KinD cluster.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们掌握了所有的理论知识之后，让我们用两个例子来看看Velero的实际操作。在这些例子中，我们将从一个简单的部署开始，然后在同一个集群上删除并恢复。下一个例子将更加复杂；我们将使用我们主要的KinD集群的备份，并将集群对象恢复到一个新的KinD集群中。
- en: Restoring a deployment from a backup
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从备份中恢复部署
- en: For the first example, we will create a simple deployment using an NGINX web
    server. We will deploy the application, verify that it works as expected, and
    then delete the deployment. Using the backup, we will restore the deployment and
    test that the restore worked by browsing to the web server's home page.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个例子，我们将使用NGINX Web服务器创建一个简单的部署。我们将部署该应用程序，验证它是否按预期工作，然后删除部署。使用备份，我们将恢复部署，并通过浏览到Web服务器的主页来测试恢复是否成功。
- en: We have included a deployment in the **chapter13** folder of your cloned repository.
    This deployment will create a new namespace, the NGINX deployment, a service,
    and an Ingress rule for our exercise. The deployment manifest has also been included.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在您克隆的存储库的**chapter13**文件夹中包含了一个部署。此部署将创建一个新的命名空间，NGINX部署，一个服务以及我们练习的Ingress规则。部署清单也已包含。
- en: 'As with any Ingress rule we have created throughout the book, you will need
    to edit its URL to reflect your host''s IP address for **nip.io** to work correctly.
    Our lab server has an IP address of **10.2.1.121** – change this IP to your host''s
    IP:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中创建的任何Ingress规则一样，您需要编辑其URL以反映您主机的IP地址，以使**nip.io**正常工作。我们的实验室服务器的IP地址为**10.2.1.121**
    - 将此IP更改为您主机的IP：
- en: 'Edit the manifest from the GitHub repository under the **chapter13** folder
    called **nginx-deployment.yaml** to include your **niop.io** URL. The section
    you need to change is shown here:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub存储库中的**chapter13**文件夹中编辑清单**nginx-deployment.yaml**，以包括您的**niop.io**
    URL。您需要更改的部分如下所示：
- en: 'spec:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 规格：
- en: 'rules:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：
- en: '**  - host: nginx-lab.10.2.1.121.nip.io**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '- 主机：nginx-lab.10.2.1.121.nip.io'
- en: 'Deploy the manifest using **kubectl**:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**kubectl**部署清单：
- en: '**kubectl apply -f nginx-deployment.yaml**'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl apply -f nginx-deployment.yaml**'
- en: 'This will create the objects we need for the deployment:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建我们部署所需的对象：
- en: '**namespace/nginx-lab created**'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '**namespace/nginx-lab created**'
- en: '**pod/nginx-deployment created**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**pod/nginx-deployment created**'
- en: '**ingress.networking.k8s.io/nginx-ingress created**'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '**ingress.networking.k8s.io/nginx-ingress created**'
- en: '**service/nginx-lab created**'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**service/nginx-lab created**'
- en: 'Finally, test the deployment using any browser and open the URL from the Ingress
    rule:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用任何浏览器测试部署，并打开Ingress规则的URL：
- en: '![Figure 13.11 – Verify that NGINX is running'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.11 - 验证NGINX是否正在运行'
- en: '](image/Fig_13.11_B15514.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.11_B15514.jpg)'
- en: Figure 13.11 – Verify that NGINX is running
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11 - 验证NGINX是否正在运行
- en: Now that you have verified that the deployment works, we need to create a backup
    using Velero.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经验证了部署是否正常工作，我们需要使用Velero创建一个备份。
- en: Backing up the namespace
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份命名空间
- en: 'Create a one-time backup of the new namespace using the Velero **create backup**
    command. Assign the backup job the name **nginx-lab**:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Velero **create backup**命令创建新命名空间的一次性备份。将备份作业命名为**nginx-lab**：
- en: velero create backup nginx-lab --include-namespaces=nginx-lab
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: velero create backup nginx-lab --include-namespaces=nginx-lab
- en: 'Since the namespace only contains a small deployment, the backup should complete
    quickly. Verify that the backup has completed successfully by using the **describe**
    command:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 由于命名空间只包含一个小部署，备份应该很快完成。使用**describe**命令验证备份是否已成功完成：
- en: velero backup describe nginx-lab
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: velero backup describe nginx-lab
- en: Verify that the phase status is complete. If you have an error in the phase
    status, you may have entered the namespace name incorrectly in the **create backup**
    command.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 验证阶段状态是否完成。如果阶段状态出现错误，您可能在**create backup**命令中错误输入了命名空间名称。
- en: After you verify that the backup has been successful, you can move on to the
    next step.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在您验证备份已成功后，您可以继续下一步。
- en: Simulating a failure
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟故障
- en: 'To simulate an event that would require a backup of our namespace, we will
    delete the entire namespace using **kubectl**:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟需要备份我们命名空间的事件，我们将使用**kubectl**删除整个命名空间：
- en: kubectl delete ns nginx-lab
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: kubectl删除ns nginx-lab
- en: It may take a minute to delete the objects in the namespace. Once you have returned
    to a prompt, the deletion should have completed.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 删除命名空间中的对象可能需要一分钟时间。一旦返回到提示符，删除应该已经完成。
- en: 'Verify that the NGINX server does not reply by opening the URL in a browser;
    if you are using the same browser from the initial test, refresh the page. You
    should receive an error when refreshing or opening the URL:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在浏览器中打开URL来验证NGINX服务器是否没有响应；如果您正在使用最初的测试浏览器，请刷新页面。刷新或打开URL时应该会收到错误：
- en: '![Figure 13.12 – Verify whether NGINX is running'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.12-验证NGINX是否正在运行'
- en: '](image/Fig_13.12_B15514.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.12_B15514.jpg)'
- en: Figure 13.12 – Verify whether NGINX is running
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12-验证NGINX是否正在运行
- en: With the confirmation that the NGINX deployment has been deleted, we will restore
    the entire namespace and objects from the backup.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 确认NGINX部署已被删除后，我们将从备份中恢复整个命名空间和对象。
- en: Restoring a namespace
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恢复命名空间
- en: Imagine this is a "real-world" scenario. You receive a phone call that a developer
    has accidentally deleted every object in their namespace and they do not have
    the source files.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 想象这是一个“现实世界”的场景。你接到一个电话，一个开发人员不小心删除了他们命名空间中的每个对象，而且他们没有源文件。
- en: 'Of course, you are prepared for this type of event. You have several backup
    jobs running in your cluster and you tell the developer that you can restore it
    to the state it was in last night from a backup:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您已经为这种类型的事件做好了准备。您的集群中有几个备份作业正在运行，您告诉开发人员，您可以从备份中将其恢复到昨晚的状态：
- en: 'We know that the backup''s name is **nginx-lab**, so using Velero, we can execute
    a **restore create** command with the **--from-backup** option:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们知道备份的名称是**nginx-lab**，因此使用Velero，我们可以使用**--from-backup**选项执行**restore create**命令：
- en: '**velero create restore --from-backup nginx-lab**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero create restore --from-backup nginx-lab**'
- en: 'Velero will return that a restore job has been submitted:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Velero将返回一个已提交的恢复作业：
- en: '**Restore request "nginx-lab-20200627203049" submitted successfully.**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**恢复请求“nginx-lab-20200627203049”已成功提交。**'
- en: '**Run `velero restore describe nginx-lab-20200627203049` or `velero restore
    logs nginx-lab-20200627203049` for more details.**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行`velero restore describe nginx-lab-20200627203049`或`velero restore logs
    nginx-lab-20200627203049`以获取更多详细信息。**'
- en: 'You can check the status using the **velero restore describe** command:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用**velero restore describe**命令来检查状态：
- en: '**velero restore describe nginx-lab-20200627203049**'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero restore describe nginx-lab-20200627203049**'
- en: 'Verify that the phase status shows **completed**, and verify that the deployment
    has been restored by browsing to the URL or refreshing the page if you already
    have it open:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证阶段状态是否显示**已完成**，并通过浏览URL或刷新页面来验证部署是否已恢复，如果您已经打开了页面：
- en: '![Figure 13.13 – Verify that NGINX has been restored'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.13-验证NGINX是否已恢复'
- en: '](image/Fig_13.13_B15514.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.13_B15514.jpg)'
- en: Figure 13.13 – Verify that NGINX has been restored
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13-验证NGINX是否已恢复
- en: Congratulations, you just saved the developer a lot of work because you had
    a backup of the namespace!
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您刚刚通过备份命名空间来节省了开发人员大量的工作！
- en: Velero is a powerful product that you should consider using in every cluster
    to protect the workloads from disasters.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Velero是一个强大的产品，您应该考虑在每个集群中使用它来保护工作负载免受灾难。
- en: Using a backup to create workloads in a new cluster
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用备份在新集群中创建工作负载
- en: Restoring objects in a cluster is just one use case for Velero. While it is
    the main use case for most users, you can also use your backup files to restore
    a workload or all workloads on another cluster. This is a useful option if you
    need to create a new development or disaster recovery cluster.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群中恢复对象只是Velero的一个用例。虽然对于大多数用户来说，这是主要的用例，但您也可以使用备份文件在另一个集群上恢复工作负载或所有工作负载。如果您需要创建一个新的开发或灾难恢复集群，这是一个有用的选项。
- en: Important Note
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember that Velero backup jobs are only the namespaces and objects in the
    namespaces. To restore a backup to a new cluster, you must have a running cluster
    running Velero before you can restore any workloads.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Velero备份作业只包括命名空间和命名空间中的对象。要将备份还原到新集群，你必须先运行一个运行Velero的集群，然后才能还原任何工作负载。
- en: Backing up the cluster
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份集群
- en: By this point in the chapter, we assume that you have seen this process a few
    times and that you know how to use the Velero CLI. If you need a refresher, you
    can go back a few pages in the chapter for reference, or use the CLI help function.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们假设你已经看过这个过程几次，并且知道如何使用Velero CLI。如果你需要复习，可以回到本章的前面几页参考，或者使用CLI的帮助功能。
- en: 'First, we should create a few namespaces and add some deployments to each one
    to make it more interesting:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该创建一些命名空间，并向每个命名空间添加一些部署，以使其更有趣：
- en: 'Let''s create a few demo namespaces:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一些演示命名空间：
- en: '**kubectl create ns demo1**'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl create ns demo1**'
- en: '**kubectl create ns demo2**'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl create ns demo2**'
- en: '**kubectl create ns demo3**'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl create ns demo3**'
- en: '**kubectl create ns demo4**'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl create ns demo4**'
- en: 'We can add a quick deployment to a namespace using the **kubectl run** command:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用**kubectl run**命令向命名空间添加一个快速部署：
- en: '**kubectl run nginx --image=bitnami/nginx -n demo1**'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl run nginx --image=bitnami/nginx -n demo1**'
- en: '**kubectl run nginx --image=bitnami/nginx -n demo2**'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl run nginx --image=bitnami/nginx -n demo2**'
- en: '**kubectl run nginx --image=bitnami/nginx -n demo3**'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl run nginx --image=bitnami/nginx -n demo3**'
- en: '**kubectl run nginx --image=bitnami/nginx -n demo4**'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl run nginx --image=bitnami/nginx -n demo4**'
- en: Now that we have some additional workloads, we need to create a backup of the
    cluster.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一些额外的工作负载，我们需要创建集群的备份。
- en: 'Back up the new namespaces using a backup name of **namespace-demo**:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用备份名称**namespace-demo**备份新的命名空间：
- en: '**velero backup create namespace-demo --include-namespaces=demo1,demo2,demo3,demo4**'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero backup create namespace-demo --include-namespaces=demo1,demo2,demo3,demo4**'
- en: Before moving on, verify that the backup has been completed successfully.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请验证备份是否已成功完成。
- en: Building a new cluster
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建一个新的集群
- en: 'Since we are only demonstrating how Velero can be used to create workloads
    on a new cluster from a backup, we will create a simple single-node KinD cluster
    as our restore point:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只是演示了Velero如何从备份在新集群上创建工作负载，我们将创建一个简单的单节点KinD集群作为我们的还原点：
- en: Note
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This section gets a little complex since you will have two clusters in your
    **kubeconfig** file. Follow the steps carefully if you're new to switching config
    contexts.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分会有点复杂，因为你的**kubeconfig**文件中会有两个集群。如果你对切换配置上下文还不熟悉，一定要仔细跟着步骤走。
- en: Once we have completed this exercise, we will delete the second cluster since
    we will not need to have two clusters.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个练习后，我们将删除第二个集群，因为我们不需要两个集群。
- en: 'Create a new KinD cluster with the name **velero-restore**:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为**velero-restore**的新KinD集群：
- en: '**kind create cluster --name velero-restore**'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind create cluster --name velero-restore**'
- en: This will create a new single-node cluster that contains both the control plane
    and worker node, and it will set your cluster context to the new cluster.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含控制平面和工作节点的新单节点集群，并将你的集群上下文设置为新集群。
- en: 'Once the cluster has deployed, verify that your context has been switched to
    the **velero-restore** cluster:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群部署完成后，请验证你的上下文是否已切换到**velero-restore**集群：
- en: '**kubectl config get-contexts**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl config get-contexts**'
- en: 'The output is as follows:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 13.14 – Verifying your current context'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.14 – 验证当前上下文'
- en: '](image/Fig_13.14_B15514.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.14_B15514.jpg)'
- en: Figure 13.14 – Verifying your current context
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.14 – 验证当前上下文
- en: Verify that the current context is set to the **kind-velero-restore** cluster.
    You will see an ***** in the current field of the cluster that is being used.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证当前上下文是否设置为**kind-velero-restore**集群。您将在正在使用的集群的当前字段中看到一个*****。
- en: 'Finally, verify the namespaces in the cluster using **kubectl**. You should
    only see the default namespaces that are included with a new cluster:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用**kubectl**验证集群中的命名空间。您应该只能看到包含在新集群中的默认命名空间：
- en: '![Figure 13.15 – New cluster namespaces'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.15 – 新集群命名空间'
- en: '](image/Fig_13.15_B15514.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.15_B15514.jpg)'
- en: Figure 13.15 – New cluster namespaces
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.15 – 新集群命名空间
- en: Now that we have a new cluster created, we can start the process to restore
    the workloads. The first step is to install Velero on the new cluster, pointing
    to the existing S3 bucket as the backup location.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个新的集群，我们可以开始恢复工作负载的过程。第一步是在新集群上安装Velero，并将现有的S3存储桶作为备份位置。
- en: Restoring a backup to the new cluster
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将备份还原到新集群
- en: With our new KinD cluster up and running, we need to install Velero to restore
    our backup. We can use most of the same manifests and settings that we used in
    the original cluster, but since we are in a different cluster, we need to change
    the S3 target to the external URL we used to expose the MinIO dashboard.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新KinD集群已经运行起来，我们需要安装Velero来还原我们的备份。我们可以使用大部分与原始集群中使用的相同清单和设置，但由于我们在不同的集群中，我们需要将S3目标更改为我们用于公开MinIO仪表板的外部URL。
- en: Installing Velero in the new cluster
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在新集群中安装Velero
- en: 'We already have the **credentials-velero** file in the **chapter13** folder,
    so we can jump right in to installing Velero using the **velero install** command:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在**chapter13**文件夹中有**credentials-velero**文件，所以我们可以直接使用**velero install**命令来安装Velero：
- en: 'Be sure to change the IP address in **s3Url target** to your host''s IP address:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**s3Url目标**中更改IP地址为您主机的IP地址：
- en: '**velero install \**'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero install \**'
- en: '**     --provider aws \**'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --provider aws \**'
- en: '**     --plugins velero/velero-plugin-for-aws:v1.1.0 \**'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --plugins velero/velero-plugin-for-aws:v1.1.0 \**'
- en: '**     --bucket velero \**'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --bucket velero \**'
- en: '**     --secret-file ./credentials-velero \**'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --secret-file ./credentials-velero \**'
- en: '**     --use-volume-snapshots=false \**'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --use-volume-snapshots=false \**'
- en: '**     --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.10.2.1.121.nip.io**'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '**     --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.10.2.1.121.nip.io**'
- en: 'The install will take a few minutes, but once the pod is up and running, view
    the log files to verify that the Velero server is up and running and connected
    to the S3 target:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装需要几分钟，但一旦pod运行起来，查看日志文件以验证Velero服务器是否正在运行并连接到S3目标：
- en: '**kubectl logs deployment/velero -n velero**'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl logs deployment/velero -n velero**'
- en: 'If all of your settings were correct, the Velero log will have an entry saying
    that it has found backups in the backup location that need to be synced with the
    new Velero server (The number of backups may be different for your KinD cluster):'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的所有设置都正确，Velero日志将有一个条目，说明它已经在备份位置找到需要与新Velero服务器同步的备份（备份的数量可能对于您的KinD集群有所不同）：
- en: '**time="2020-06-27T22:14:02Z" level=info msg="Found 9 backups in the backup
    location that do not exist in the cluster and need to be synced" backupLocation=default
    controller=backup-sync logSource="pkg/controller/backup_sync_controller.go:196"**'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**time="2020-06-27T22:14:02Z" level=info msg="在备份位置找到9个备份，这些备份在集群中不存在，需要同步"
    backupLocation=default controller=backup-sync logSource="pkg/controller/backup_sync_controller.go:196"**'
- en: 'After confirming the installation, verify that Velero can see the existing
    backup files using **velero get backups**:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认安装后，使用**velero get backups**验证Velero是否能够看到现有的备份文件：
- en: '![Figure 13.16 – Viewing backups on the new cluster'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.16 – 查看新集群上的备份'
- en: '](image/Fig_13.16_B15514.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.16_B15514.jpg)'
- en: Figure 13.16 – Viewing backups on the new cluster
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16 – 查看新集群上的备份
- en: Your backup list will differ from ours, but you should see the same list that
    you had in the original cluster.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 您的备份列表将与我们的不同，但您应该看到与原始集群中相同的列表。
- en: At this point, we can use any of the backup files to create a restore job in
    the new cluster.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以使用任何备份文件在新集群中创建还原作业。
- en: Restoring a backup in a new cluster
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在新集群中还原备份
- en: In this section, we will use the backup that was created in the previous section
    and restore the workloads to a brand new KinD cluster to simulate a workload migration.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用在上一节中创建的备份，并将工作负载恢复到全新的 KinD 集群，以模拟工作负载迁移。
- en: 'The backup that was created of the original cluster, after we added the namespaces
    and deployment, was called **namespace-demo**:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们添加命名空间和部署后创建的原始集群的备份被称为 **namespace-demo**：
- en: 'Using that backup name, we can restore the namespaces and objects by running
    the **velero restore create** command:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用该备份名称，我们可以通过运行 **velero restore create** 命令来还原命名空间和对象：
- en: '**velero create restore --from-backup=namespace-demo**'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero create restore --from-backup=namespace-demo**'
- en: 'Wait for the restore to complete before moving on to the next step. To verify
    that the restore was successful, use the **velero describe restore** command with
    the name of the restore job that was created when you executed the **create restore**
    command. In our cluster, the restore job was assigned the name **namespace-demo-20200627223622**:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续下一步之前，请等待还原完成。要验证还原是否成功，请使用 **velero describe restore** 命令和执行 **create restore**
    命令时创建的还原作业的名称。在我们的集群中，还原作业被分配了名称 **namespace-demo-20200627223622**：
- en: '**velero restore describe namespace-demo-20200627223622**'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '**velero restore describe namespace-demo-20200627223622**'
- en: Once the phase has changed from **InProgress** to **Completed**, verify that
    your new cluster has the additional demo namespaces using **kubectl get ns**:![Figure
    13.17 – Viewing backups on the new cluster
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦阶段从 **InProgress** 更改为 **Completed**，请使用 **kubectl get ns** 验证您的新集群是否具有额外的演示命名空间：![图
    13.17 – 查看新集群上的备份
- en: '](image/Fig_13.17_B15514.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.17_B15514.jpg)'
- en: Figure 13.17 – Viewing backups on the new cluster
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.17 – 查看新集群上的备份
- en: 'You will see that the new namespaces were created, and if you look at the pods
    in each namespace, you will see that each has a pod called **nginx.**You can verify
    that the pods were created using kubectl get pods. For example, to verify the
    pods in the demo1 namespace: **kubectl get pods -n demo1**'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到新的命名空间已创建，如果查看每个命名空间中的 pod，您将看到每个命名空间都有一个名为 **nginx** 的 pod。您可以使用 **kubectl
    get pods** 验证已创建的 pod。例如，要验证 demo1 命名空间中的 pod：**kubectl get pods -n demo1**
- en: 'The output is as follows:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 13.18 – Verifying pods in restored namespaces'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.18 – 验证恢复命名空间中的 pod'
- en: '](image/Fig_13.18_B15514.jpg)'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Fig_13.18_B15514.jpg)'
- en: Figure 13.18 – Verifying pods in restored namespaces
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.18 – 验证恢复命名空间中的 pod
- en: Congratulations! You have successfully restored objects from one cluster into
    a new cluster.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功将一个集群中的对象恢复到新集群中。
- en: Deleting the new cluster
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除新集群
- en: 'Since we do not need two clusters, let''s delete the new KinD cluster that
    we restored the backup to:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不需要两个集群，让我们删除我们将备份还原到的新的 KinD 集群：
- en: 'To delete the cluster, execute the **kind delete cluster** command:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除集群，请执行 **kind delete cluster** 命令：
- en: '**kind delete cluster --name velero-restore**'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '**kind delete cluster --name velero-restore**'
- en: 'Set your current context to the original KinD cluster, **kind-cluster01**:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前上下文设置为原始的 KinD 集群，**kind-cluster01**：
- en: '**kubectl config use-context kind-cluster01**'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '**kubectl config use-context kind-cluster01**'
- en: You are now ready to continue to the final chapter of the book, [*Chapter 14*](B15514_14_Final_ASB_ePub.xhtml#_idTextAnchor337),
    *Provisioning a Platform*.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以继续阅读本书的最后一章，[*第14章*](B15514_14_Final_ASB_ePub.xhtml#_idTextAnchor337)，*提供平台*。
- en: Summary
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Backing up clusters and workloads is a requirement for any enterprise cluster.
    In this chapter, we reviewed how to back up the etcd cluster database using **etcdctl**
    and the snapshot feature. We also went into detail on how to install Heptio's
    Velero in a cluster to back up and restore workloads. We closed out the chapter
    by copying workloads from an existing backup by restoring an existing backup on
    a new cluster.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 备份集群和工作负载是任何企业集群的要求。在本章中，我们回顾了如何使用**etcdctl**和快照功能备份etcd集群数据库。我们还详细介绍了如何在集群中安装Heptio的Velero来备份和恢复工作负载。我们通过在新集群上恢复现有备份来复制现有备份中的工作负载来结束本章。
- en: Having a backup solution allows you to recover from a disaster or human error.
    A typical backup solution allows you to restore any Kubernetes object, including
    namespaces, persistent volumes, RBAC, services, and service accounts. You can
    also take all of the workloads from one cluster and restore them on a completely
    different cluster for testing or troubleshooting.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有备份解决方案可以让您从灾难或人为错误中恢复。典型的备份解决方案可以让您恢复任何Kubernetes对象，包括命名空间、持久卷、RBAC、服务和服务帐户。您还可以将一个集群中的所有工作负载恢复到完全不同的集群进行测试或故障排除。
- en: Coming up next, in our final chapter, we will pull together many of the previous
    lessons in this book to build a platform for both your developers and your admins.
    We will add source control and pipelines to build a platform, allowing a developer
    to build a "project," checking in source code to create a running application.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的最后一章中，我们将汇集本书中许多先前的教训，为您的开发人员和管理员构建一个平台。我们将添加源代码控制和流水线来构建一个平台，允许开发人员构建一个“项目”，检入源代码以创建一个运行的应用程序。
- en: Questions
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: True or false – Velero can only use an S3 target to store backup jobs.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确还是错误 - Velero只能使用S3目标来存储备份作业。
- en: A. True
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: A. True
- en: B. False
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: B. False
- en: If you do not have an object storage solution, how can you provide an S3 target
    using a backend storage solution such as NFS?
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有对象存储解决方案，您如何使用后端存储解决方案（如NFS）提供S3目标？
- en: A. You can't – there is no way to add anything in front of NFS to present S3.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: A. 你不能 - 没有办法在NFS前面添加任何东西来呈现S3。
- en: B. Kubernetes can do this using native CSI features.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: B. Kubernetes可以使用本机CSI功能来实现这一点。
- en: C. Install MinIO and use the NFS volumes as persistent disks in the deployment.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: C. 安装MinIO并在部署中使用NFS卷作为持久磁盘。
- en: D. You don't need to use an object store; you can use NFS directly with Velero.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: D. 您不需要使用对象存储；您可以直接使用NFS与Velero。
- en: True or false – Velero backups can only be restored on the same cluster where
    the backup was originally created.
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确还是错误 - Velero备份只能在创建备份的同一集群上恢复。
- en: A. True
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: A. True
- en: B. False
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: B. False
- en: What utility can you use to create an etcd backup?
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用什么实用程序来创建etcd备份？
- en: A. Velero.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: A. Velero。
- en: B. MinIO.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: B. MinIO。
- en: C. There is no reason to back up the etcd database.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: C. 没有理由备份etcd数据库。
- en: D. **etcdctl**.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: D. **etcdctl**。
- en: Which command will create a scheduled backup that runs every day at 3 a.m.?
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令将创建一个每天凌晨3点运行的定期备份？
- en: A. **velero create backup daily-backup**
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: A. **velero create backup daily-backup**
- en: B. **velero create @daily backup daily-backup**
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: B. **velero create @daily backup daily-backup**
- en: C. **velero create backup daily-backup –schedule="@daily3am"**
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: C. **velero create backup daily-backup –schedule="@daily3am"**
- en: D. **velero create schedule daily-backup --schedule="0 3 * * *"**
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: D. **velero create schedule daily-backup --schedule="0 3 * * *"**
