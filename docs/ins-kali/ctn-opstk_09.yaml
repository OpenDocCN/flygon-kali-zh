- en: Kolla – Containerized Deployment of OpenStack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kolla - OpenStack的容器化部署
- en: 'In this chapter, you will learn about Kolla. It provides production-ready containers
    and deployment tools for operating OpenStack cloud. The contents of this chapter
    are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解Kolla。它为操作OpenStack云提供了生产就绪的容器和部署工具。本章的内容如下：
- en: Kolla introduction
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kolla介绍
- en: Key features
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键特性
- en: Architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构
- en: Deploying containerized OpenStack services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署容器化的OpenStack服务
- en: Kolla introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kolla介绍
- en: The OpenStack cloud consists of multiple services, and each service interacts
    with other services. There is no integrated product release for OpenStack. Each
    project follows a release cycle after every 6 months. This provides a greater
    flexibility for operators to choose from multiple options and builds a custom
    deployment solution for them. However, this also brings a complexity of deploying
    and managing the OpenStack cloud.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack云由多个服务组成，每个服务与其他服务进行交互。OpenStack没有集成的产品发布。每个项目在每6个月后都会遵循一个发布周期。这为运营商提供了更大的灵活性，可以从多个选项中进行选择，并为他们构建自定义的部署解决方案。然而，这也带来了部署和管理OpenStack云的复杂性。
- en: There is need for these services to be scalable, upgradable, and readily available.
    Kolla provides a way for running these services inside containers, and this adds
    the advantage to the OpenStack cloud being fast, reliable, scalable, and upgradeable.
    Kolla packs the OpenStack services and their requirements, and sets up all the
    configuration in the container images.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务需要可扩展、可升级和随时可用。Kolla提供了一种在容器内运行这些服务的方式，这使得OpenStack云具有快速、可靠、可扩展和可升级的优势。Kolla打包了OpenStack服务及其要求，并在容器镜像中设置了所有配置。
- en: Kolla uses Ansible to run these container images and deploy or upgrade OpenStack
    cluster very easily on bare metal or VMs. Kolla containers are configured to store
    the data on persistent storage, which can then be mounted back onto the host operating
    system and restored successfully to protect against any faults.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla使用Ansible来运行这些容器镜像，并在裸金属或虚拟机上非常容易地部署或升级OpenStack集群。Kolla容器被配置为将数据存储在持久存储上，然后可以重新挂载到主机操作系统上，并成功恢复以防止任何故障。
- en: 'In order to deploy OpenStack, Kolla has three projects as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部署OpenStack，Kolla有三个项目如下：
- en: '**kolla:** All the Docker container images for OpenStack projects are maintained
    in this project. Kolla provides an image building tool called kolla-build to build
    container images for most of the projects.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kolla:** 所有OpenStack项目的Docker容器镜像都在这个项目中维护。Kolla提供了一个名为kolla-build的镜像构建工具，用于为大多数项目构建容器镜像。'
- en: '**kolla-ansible**: This provides Ansible playbooks for deploying OpenStack
    inside Docker containers. It supports both the all-in-one and multi-node setups
    of the OpenStack cloud.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kolla-ansible:** 这提供了用于在Docker容器内部部署OpenStack的Ansible剧本。它支持OpenStack云的一体化和多节点设置。'
- en: '**kolla-kubernetes**: This deploys OpenStack on Kubernetes. This aims to leverage
    the self-healing, health checks, upgrade, and other capabilities of Kubernetes
    for managing containerized OpenStack deployment. kolla-kubernetes uses Ansible
    playbooks and the Jinja2 template to generate configuration files for the services.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kolla-kubernetes:** 这在Kubernetes上部署OpenStack。它旨在利用Kubernetes的自愈、健康检查、升级和其他功能，用于管理容器化的OpenStack部署。kolla-kubernetes使用Ansible剧本和Jinja2模板来生成服务的配置文件。'
- en: Key features
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键特性
- en: In this section, we will see some of the key features of Kolla.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到Kolla的一些关键特性。
- en: Highly available deployment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可用部署
- en: The OpenStack ecosystem consists of multiple services running only a single
    instance of them, which sometimes becomes the single point of failure in case
    of any disaster, and it can't scale beyond a single instance. To make it scalable,
    Kolla deploys the OpenStack cloud, configured with HA. So even if any service
    fails, it can scale without any interruption to the current operations. This feature
    makes Kolla an ideal solution for easy upgrade and scale without any downtime.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack生态系统由多个服务组成，它们只运行单个实例，有时会成为任何灾难的单点故障，并且无法扩展到单个实例之外。为了使其可扩展，Kolla部署了配置了HA的OpenStack云。因此，即使任何服务失败，也可以在不中断当前操作的情况下进行扩展。这个特性使Kolla成为一个理想的解决方案，可以轻松升级和扩展而无需任何停机时间。
- en: Ceph support
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ceph支持
- en: Kolla uses Ceph to add persistent data to the VMs running our OpenStack environment,
    so that we can easily recover from any disaster, hence making the OpenStack cloud
    more reliable. Ceph is also used for storing glance images.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla使用Ceph向运行我们的OpenStack环境的虚拟机添加持久数据，以便我们可以轻松从任何灾难中恢复，从而使OpenStack云更加可靠。Ceph还用于存储glance镜像。
- en: Image building
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像构建
- en: Kolla provides a tool called kolla-build to build container images on multiple
    distros such as CentOs, Ubuntu, Debian, and Oracle Linux. Multiple dependent components
    can be built at once.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla提供了一个名为kolla-build的工具，可以在CentOs、Ubuntu、Debian和Oracle Linux等多个发行版上构建容器镜像。可以一次构建多个依赖组件。
- en: Docker hub support
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Hub支持
- en: You can pull images from Docker Hub directly. You can see all the Kolla images
    at [https://hub.docker.com/u/kolla/](https://hub.docker.com/u/kolla/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接从Docker Hub拉取图像。您可以在[https://hub.docker.com/u/kolla/](https://hub.docker.com/u/kolla/)上查看所有Kolla图像。
- en: Local registry support
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地注册表支持
- en: Kolla also supports pushing images to the local registry. Refer to [https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry)
    for setting a local registry.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla还支持将图像推送到本地注册表。有关设置本地注册表，请参阅[https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry)。
- en: Multiple build sources
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个构建源
- en: Kolla supports building from multiple sources binary and source. The binaries
    are the packages installed by the package manager of the host OS, whereas the
    source could be a URL, local repository, or tarball. Refer to [https://docs.openstack.org/kolla/latest/admin/image-building.html#build-openstack-from-source](https://docs.openstack.org/kolla/latest/admin/image-building.html#build-openstack-from-source)
    for more details.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla支持从多个源构建二进制和源代码。二进制是由主机操作系统的软件包管理器安装的软件包，而源代码可以是URL、本地存储库或tarball。有关更多详细信息，请参阅[https://docs.openstack.org/kolla/latest/admin/image-building.html#build-openstack-from-source](https://docs.openstack.org/kolla/latest/admin/image-building.html#build-openstack-from-source)。
- en: Dockerfile customization
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dockerfile定制
- en: Kolla supports building images from Jinja2 templates, which provide a better
    flexibility for customization by operators. Operators can customize their image
    building to include additional packages, install plugins, change some configuration
    settings, and so on. Refer to [https://docs.openstack.org/kolla/latest/admin/image-building.html#dockerfile-customisation](https://docs.openstack.org/kolla/latest/admin/image-building.html#dockerfile-customisation)
    for more details on how different customizations can be done.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla支持从Jinja2模板构建图像，这为运营商提供了更好的灵活性。运营商可以定制他们的图像构建，包括安装附加软件包、安装插件、更改一些配置设置等。有关如何进行不同定制的更多详细信息，请参阅[https://docs.openstack.org/kolla/latest/admin/image-building.html#dockerfile-customisation](https://docs.openstack.org/kolla/latest/admin/image-building.html#dockerfile-customisation)。
- en: Architecture
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: In this section, we will see the OpenStack architecture using Kolla. The following
    figure shows a **highly available** (**HA**) OpenStack multimode setup done by
    Kolla.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到使用Kolla的OpenStack架构。以下图显示了Kolla完成的**高可用**（**HA**）OpenStack多模式设置。
- en: The infrastructure engineering here means the code or application written for
    infrastructure management. The code is submitted to Gerrit for review and then
    the CI system reviews and checks for correctness of the code. Once the code is
    approved by CI, the CD system feeds the output of build, that is the OpenStack
    containers that are based on Kolla, into a local registry.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的基础设施工程意味着为基础设施管理编写的代码或应用程序。代码提交到Gerrit进行审查，然后CI系统审查并检查代码的正确性。一旦代码获得CI的批准，CD系统将构建的输出，即基于Kolla的OpenStack容器，输入到本地注册表中。
- en: 'After this, the Ansible contacts Docker and launches our OpenStack multinode
    environment with HA:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，Ansible联系Docker，并使用HA启动我们的OpenStack多节点环境：
- en: '![](../images/00031.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00031.jpeg)'
- en: Deploying containerized OpenStack services
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署容器化的OpenStack服务
- en: In this section, we will understand how Kolla deploys containerized OpenStack
    using kolla-ansible. At the time of writing, kolla-kubernetes is under development.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解Kolla如何使用kolla-ansible部署容器化的OpenStack。在撰写本文时，kolla-kubernetes正在开发中。
- en: Note that this is not a complete guide to Kolla.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是Kolla的完整指南。
- en: Kolla is evolving now, so the guide is upgraded very frequently. Refer to the
    latest documentation provided at [https://docs.openstack.org/kolla-ansible/latest/](https://docs.openstack.org/kolla-ansible/latest/).
    We will try to explain the general deploy process of OpenStack using Kolla and
    the subprojects.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla现在正在发展，因此指南经常进行升级。请参考[https://docs.openstack.org/kolla-ansible/latest/](https://docs.openstack.org/kolla-ansible/latest/)提供的最新文档。我们将尝试解释使用Kolla和子项目部署OpenStack的一般过程。
- en: 'Deploying OpenStack with Kolla is pretty easy. Kolla provides both all-in-one
    and multinode installations on Docker or Kubernetes. It basically involves four
    steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kolla部署OpenStack非常容易。Kolla在Docker或Kubernetes上提供全功能和多节点安装。基本上涉及四个步骤：
- en: Setting up a local registry
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置本地注册表
- en: Automatic host bootstrap
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动主机引导
- en: Building images
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建镜像
- en: Deploying images
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署镜像
- en: Setting up a local registry
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置本地注册表
- en: A local registry is required for storing the container images built by Kolla.
    It is optional for the all-in-one deployment, the Docker cache can be used instead.
    Docker Hub contains all the images for all major releases of Kolla. However, it
    is strongly recommended for the multinode deployment to ensure a single source
    of images. It is also recommended that you run the registry over HTTPS to secure
    the images in the production environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla构建的容器镜像需要一个本地注册表进行存储。对于全功能部署来说，这是可选的，可以使用Docker缓存。Docker Hub包含Kolla所有主要版本的所有镜像。但是，强烈建议多节点部署确保镜像的单一来源。还建议在生产环境中通过HTTPS运行注册表以保护镜像。
- en: Refer to the guide at [https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry)
    for detailed steps for setting up a local registry.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有关设置本地注册表的详细步骤，请参考[https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry](https://docs.openstack.org/kolla-ansible/latest/user/multinode.html#deploy-a-registry)的指南。
- en: Automatic host bootstrap
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动主机引导
- en: Kolla installation requires some packages and tools, such as Docker, libvirt,
    and NTP, to be installed on the host where we want our OpenStack to run. These
    dependencies can be automatically installed and configured by host bootstrap.
    kolla-ansible provides the bootstrap-servers playbook for preparing and installing
    the hosts for OpenStack installation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla安装需要在我们希望运行OpenStack的主机上安装一些软件包和工具，例如Docker、libvirt和NTP。这些依赖项可以通过主机引导自动安装和配置。kolla-ansible提供了用于准备和安装OpenStack主机的bootstrap-servers
    playbook。
- en: 'To quickly prepare the host, run this command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速准备主机，请运行此命令：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Building images
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建镜像
- en: In this step, we will build the Docker container images for all OpenStack services.
    We can specify the base distro for our images, sources, and tags while building
    the images. The images are pushed to local registry.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将为所有OpenStack服务构建Docker容器镜像。在构建镜像时，我们可以指定镜像的基本发行版、来源和标签。这些镜像将被推送到本地注册表。
- en: 'Building images in Kolla is as simple as running this command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kolla中构建镜像就像运行此命令一样简单：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command by default builds all the images based on CentOS. To build images
    with a specific distro, use the `-b` option:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令默认构建基于CentOS的所有镜像。要使用特定的发行版构建镜像，请使用`-b`选项：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To build images for a specific project, pass the name of the project to the
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要为特定项目构建镜像，请将项目名称传递给命令：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'One advanced feature in Kolla is the image profiles. Profiles are used to define
    a set of related projects in OpenStack. Some of the defined profiles in Kolla
    are as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla中的一个高级功能是镜像配置文件。配置文件用于定义OpenStack中一组相关的项目。Kolla中定义的一些配置文件如下：
- en: '**infra**: All infra-related projects'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**infra**：所有基础设施相关的项目'
- en: '**main**: These are the OpenStack core projects such as Nova, Neutron, KeyStone,
    and Horizon'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**main**：这些是OpenStack的核心项目，如Nova、Neutron、KeyStone和Horizon'
- en: '**aux**: These are the additional projects such as Zun and Ironic'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**aux**：这些是额外的项目，如Zun和Ironic'
- en: '**default**: These are a set of minimum projects required for a ready cloud'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**default**：这是一个准备好的云所需的一组最小项目'
- en: 'New profiles can be defined in the `kolla-build.conf` object as well. To do
    this, just add a new profile under the `[profile]` section in the `.conf` file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以在`kolla-build.conf`对象中定义新的配置文件。只需在`.conf`文件的`[profile]`部分下添加一个新的配置文件即可：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding example, we set a new profile called `containers` to represent
    a group of projects related to containerization in OpenStack. The `heat` project
    is also mentioned and used because it is required by `magnum`. Also, you can use
    this profile to create images for these projects:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们设置了一个名为`containers`的新配置文件，用于表示OpenStack中与容器化相关的一组项目。还提到并使用了`heat`项目，因为它是`magnum`所需的。此外，您还可以使用此配置文件为这些项目创建镜像：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Images can also be pushed to Docker Hub or to the local registry using these
    commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用这些命令将镜像推送到Docker Hub或本地注册表：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Kolla also provides more advanced operations such as building image from source
    and Docker file customization. You can refer to [https://docs.openstack.org/kolla/latest/admin/image-building.html](https://docs.openstack.org/kolla/latest/admin/image-building.html) [for
    more details.](https://docs.openstack.org/kolla/latest/admin/image-building.html)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Kolla还提供了更高级的操作，例如从源代码和Docker文件自定义构建镜像。您可以参考[https://docs.openstack.org/kolla/latest/admin/image-building.html](https://docs.openstack.org/kolla/latest/admin/image-building.html) [获取更多详细信息。](https://docs.openstack.org/kolla/latest/admin/image-building.html)
- en: Deploying images
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署镜像
- en: Now we have all the images required for OpenStack deployment; kolla-ansible
    contacts Docker and provides these images for running them. The deployment can
    be all-in-one or mutlinode. The decision is made on the Ansible inventory files
    available in kolla-ansible. This inventory file contains the information about
    the infrastructure hosts in the cluster. The deploy process in Kolla takes the
    environment variables and passwords specified in the configuration files and an
    inventory file to provision the highly available OpenStack cluster.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好部署OpenStack所需的所有镜像；kolla-ansible联系Docker并提供这些镜像来运行它们。部署可以是单一节点或多节点。决定是在kolla-ansible中可用的Ansible清单文件上做出的。此清单文件包含集群中基础设施主机的信息。Kolla中的部署过程需要环境变量和密码，这些变量和密码在配置文件和清单文件中指定，以配置高可用性的OpenStack集群。
- en: 'All the configuration options and passwords used for OpenStack deployment are
    stored in `/etc/kolla/globals.yml` and `/etc/kolla/passwords.yml`, respectively.
    Edit these files manually to specify your choice of installation, as shown here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 用于OpenStack部署的所有配置选项和密码分别存储在`/etc/kolla/globals.yml`和`/etc/kolla/passwords.yml`中。手动编辑这些文件以指定您选择的安装，如下所示：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can generate a password with this command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令生成密码：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can run `prechecks` on the deployment targets nodes to check whether they
    are in the state or not:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在部署目标节点上运行`prechecks`来检查它们是否处于状态：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we are ready to deploy OpenStack. Run the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好部署OpenStack。运行以下命令：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To verify the installation, see the containers list in `docker`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证安装，请查看`docker`中的容器列表：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should see all the OpenStack service containers running. Now let''s generate
    the `admin-openrc.sh` file to use our OpenStack cluster. The generated file will
    be stored in the `/etc/kolla` directory:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到所有运行的OpenStack服务容器。现在让我们生成`admin-openrc.sh`文件以使用我们的OpenStack集群。生成的文件将存储在`/etc/kolla`目录中：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now install `python-openstackclient`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在安装`python-openstackclient`：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To initialize the neutron networks and glance image, run this command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化neutron网络和glance镜像，请运行此命令：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After the successful deployment of OpenStack, you can access the Horizon dashboard.
    Horizon will be available at the IP address or hostname specified in `kolla_external_fqdn`,
    or `kolla_internal_fqdn`. If these variables were not set during deployment, they
    default to `kolla_internal_vip_address`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 成功部署OpenStack后，您可以访问Horizon仪表板。Horizon将在`kolla_external_fqdn`或`kolla_internal_fqdn`中指定的IP地址或主机名处提供。如果在部署期间未设置这些变量，则它们默认为`kolla_internal_vip_address`。
- en: Refer to [https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html](https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html)
    for detailed steps of deploying a multi-node OpenStack cloud using kolla-ansible
    and [https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html](https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html)
    using kolla-kubernetes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用kolla-ansible部署多节点OpenStack云的详细步骤，请参阅[https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html](https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html)，使用kolla-kubernetes请参阅[https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html](https://docs.openstack.org/kolla-kubernetes/latest/deployment-guide.html)。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about Kolla, which deploys a containerized OpenStack
    cloud. We looked at various projects available in Kolla and learned what they
    do in general. Then we looked into some of the key features of Kolla and discussed
    the Kolla architecture for OpenStack deployment. You also learned how to build
    images with Kolla and finally understand the deployment process of Kolla.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Kolla，它部署了一个容器化的OpenStack云。我们看了看Kolla中可用的各种项目，并了解了它们的一般功能。然后我们深入了解了Kolla的一些关键特性，并讨论了OpenStack部署的Kolla架构。您还学会了如何使用Kolla构建镜像，并最终了解了Kolla的部署过程。
- en: In the next chapter, we will look at the best practices for securing your containers
    and also the advantages of using different OpenStack projects.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨保护容器的最佳实践，以及使用不同OpenStack项目的优势。
