["```js\nfunction square(num) {\n    return num*num;\n}\n```", "```js\nfunction double(array) {\n    for(var i = 0; i <  array.length; i++) {\n        array[i] *= 2;\n    }\n\n    return array;\n}\n```", "```js\nfor(var i = 0; i <  array.length; i++) {\n```", "```js\narray[i] *= 2;\n```", "```js\nTdouble = C1*(n + 1) + C2* n + C3;\n        = C5 * n + C4 // where C4 = C3 + C1 and C5 = C1 + C2\n```", "```js\nTdouble = C1*(n + 1) + C2* n + C3;\n        = C5 * n + C4 // where C4 = C3 + C1 and C5 = C1 + C2\n```", "```js\nf(n) = Tdouble = C5 * n + C4 \nf(n) = Tdouble = 4n + 1 // cause C5 and C4 can be any constants\n```", "```js\n4n + 1 <= c * n , where n >= n0\n```", "```js\n4n + 1 >= c * n , where n >= n0 \n```", "```js\nfunction square(num) {\n    return num*num;\n}\n```", "```js\nfor(var i = 1; i < N; i *= 2) {\n    // O(1) operations\n}\n```", "```js\n2n < N\n\nlog(2n) < log(N)\n\nn < log(N) \n```", "```js\nfor(var i = N; i >= 1; i /= 2) {\n    // O(1) operations\n}\n```", "```js\nN/2n <= 1\n\nN <= 2n\n\nLog(N) <= n\n```", "```js\nfor(var i = 0; i < N; i += c) {\n    // O(1) operations\n}\n```", "```js\nfor (int i = 0; i <n; i += c) {\n    for (int j = 0; j < n; j += c) {\n        // some O(1) expressions\n    }\n}\n```", "```js\nfor (int i = 0; i <n; i += c) {\n    for (int j = 0; j < n; j += c) {\n        for (int k = 0; k < n; k += c) {\n            // some O(1) expressions\n        }\n    }\n}\n```", "```js\n            function xyz() {\n\n                abc(); // O(n) operation\n\n                pqr(); // O(log(n)) operation\n\n            }\n```", "```js\n        function xyz() {\n\n            if (someCondition) {\n\n                abc(); // O(n) operation\n\n            } else {\n\n                pqr(); // O(log(n)) operation\n\n            }\n\n        }\n```", "```js\n        function rec1(array) {\n            // O(1) operations\n\n            if (array.length === 0) return;\n\n            array.pop();\n\n            return rec1(array);\n        }\n```", "```js\nfunction firstElement(arr) {\n    return arr[0];\n}\n```", "```js\nfunction redundant(array) {\n    var result = [];\n\n    for(var i = 0, i < array.size; i++) {\n        result.push(array[i]);\n    }\n\n    return result;\n}\n```", "```js\nfunction notRedundant(array) {\n    var result = [];\n\n    for(var i = 0, i < array.size; i++) {\n        if (someCondition) {\n            result.push(array[i]);\n        }\n    }\n\n    return result;\n}\n```"]