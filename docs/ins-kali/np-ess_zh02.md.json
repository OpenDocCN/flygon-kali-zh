["```py\nIn [1]: import numpy as np \n\nIn [2]: x = np.array([[1,2,3],[2,3,4]]) \n\nIn [3]: print(x)\n```", "```py\nfrom numpy import * \n\n```", "```py\nIn [4]: x.ndim \n\nOut [4]: 2 \n\n```", "```py\nIn [5]: x.shape \n\nOut [5]: (2, 3) \n\n```", "```py\nIn [6]: x \n\nOut[6]: \narray([[1, 2, 3], \n       [2, 3, 4]]) \n\nIn [7]: x[0,0] \n\nOut[7]: 1 \n\nIn [8]: x[1,2] \n\nOut[8]: 4 \n\n```", "```py\nIn [9]: x = np.random.random((100, 100)) \n\n```", "```py\nIn [10]: y = x[42, 87] \n\n```", "```py\nIn [11]: print(x[k, :]) \n\n```", "```py\nIn [12]: x.flags \n\n```", "```py\nOut[12]: \n  C_CONTIGUOUS : True \n  F_CONTIGUOUS : False \n  OWNDATA : True \n  WRITEABLE : True \n  ALIGNED : True \n  UPDATEIFCOPY : False \n\n```", "```py\nIn [13]: c_array = np.random.rand(10000, 10000) \n\n```", "```py\nIn [14]: f_array = np.asfortranarray(c_array) \n\n```", "```py\nIn [15]: def sum_row(x):\n         '''\n         Given an array `x`, return the sum of its zeroth row.\n         '''\n         return np.sum(x[0, :])\nIn [16]: def sum_col(x):\n         '''\n         Given an array `x`, return the sum of its zeroth column.\n         '''\n         return np.sum(x[:, 0])\n```", "```py\nIn [17]: %timeit sum_row(c_array) \n10000 loops, best of 3: 21.2 \u00b5s per loop \n\nIn [18]: %timeit sum_row(f_array) \n10000 loops, best of 3: 157 \u00b5s per loop \n\nIn [19]: %timeit sum_col(c_array) \n10000 loops, best of 3: 162 \u00b5s per loop \n\nIn [20]: %timeit sum_col(f_array) \n10000 loops, best of 3: 21.4 \u00b5s per loop \n\n```", "```py\nIn [21]: x = np.random.rand(100,10) \n\n```", "```py\nIn [22]: y = x[:5, :] \n\n```", "```py\nIn [23]: np.may_share_memory(x, y) \n\nOut[23]: True \n\n```", "```py\nIn [24]: y[:] = 0 \n\nIn [25]: print(x[:5, :]) \nOut[25]: [[ 0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0.] \n[ 0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0.] \n[ 0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0.] \n[ 0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0.] \n          [ 0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0\\.  0.]] \n\n```", "```py\nIn [26]: x = np.random.rand(100,10) \n\nIn [27]: y = np.empty([5, 10]) \n\nIn [28]: y[:] = x[:5, :] \n\nIn [29]: np.may_share_memory(x, y) \nOut[29]: False \n\n```", "```py\nIn [30]: y[:] = 0 \nIn [31]: print(x[:5, :]) \n\n```", "```py\nIn [32]: x = np.array([1, 2, 3]) \n\nIn [33]: y = np.array(['hello', 'world']) \n\n```", "```py\nIn [34]: x = range(5) \n\nIn [35]: y = np.array(x) \n\n```", "```py\nIn [36]: x = np.arange(5) \n\n```", "```py\nIn [37]: x = np.array([[1, 2, 3],[4, 5, 6]]) \n\nIn [38]: x.ndim \nOut[38]: 2 \n\nIn [39]: x.shape \nOut[39]: (2, 3) \n\n```", "```py\nIn [40]: x = np.random.rand(2, 2, 2) \n\nIn [41]: print(x.shape) \nOut[41]: (2, 2, 2) \n\nIn [42]: shape_tuple = (2, 3, 4) \n\nIn [43]: y = np.random.random(shape_tuple) \n\nIn [44]: print(y.shape) \nOut[44]: (2, 3, 4) \n\n```", "```py\nIn [45]: LOW, HIGH = 1, 11 \n\nIn [46]: SIZE = 10 \n\nIn [47]: x = np.random.randint(LOW, HIGH, size=SIZE) \n\nIn [48]: print(x) \nOut[48]: [ 6  9 10  7  9  5  8  8  9  3] \n\n```", "```py\nIn [49]: x = np.random.random((10,10)) \n\nIn [50]: x.dtype \nOut[50]: dtype('float64') \nIn [51]: x = np.array(range(10)) \n\nIn [52]: x.dtype \nOut[52]: dtype('int32') \n\nIn [53]: x = np.array(['hello', 'world']) \n\nIn [54]: x.dtype \nOut [54]: dtype('S5') \n\n```", "```py\nIn [55]: x = np.ones((10, 10), dtype=np.int) \n\nIn [56]: x.dtype \nOut[56]: dtype('int32') \n\nIn [57]: x = np.zeros((10, 10), dtype='|S1') \n\nIn [58]: x.dtype \nOut[58]: dtype('S1') \n\n```"]