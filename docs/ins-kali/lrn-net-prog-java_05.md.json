["```java\n        String message = \"String to be hashed\";\n        try {\n            MessageDigest messageDigest = \n                MessageDigest.getInstance(\"SHA-1\");\n            messageDigest.update(message.getBytes());\n            byte[] digest = messageDigest.digest();\n\n            StringBuffer buffer = new StringBuffer();\n            for (byte element : digest) {\n                buffer.append(Integer\n                    .toString((element & 0xff) + 0x100, 16)\n                    .substring(1));\n            }\n            System.out.println(\"Hex format : \" + \n                buffer.toString());\n\n        } catch (NoSuchAlgorithmException ex) {\n            // Handle exceptions\n        }\n```", "```java\nput(key, data) \n```", "```java\ndata = get(key)\n```", "```java\n    try {\n        JDHT DHTExample = new JDHT();\n        DHTExample.put(\"Java SE API\", \n           \"http://docs.oracle.com/javase/8/docs/api/\");\n        ...\n    } catch (IOException ex) {\n        // Handle exceptions\n    }\n```", "```java\n    System.out.println(((JDHT) DHTExample).getReference());\n```", "```java\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Press Enter to terminate application: \");\n    scanner.next();\n    DHTExample.close();\n```", "```java\n    try {\n        JDHT myDHT = new JDHT(5550, \"dksref://192.168.1.9:4440\" \n            + \"/0/2179157225/0/1952355557247862269\");\n        ...\n    } catch (IOException | DKSTooManyRestartJoins | \n             DKSIdentifierAlreadyTaken | DKSRefNoResponse ex) {\n        // Handle exceptions\n    }\n```", "```java\n    String value = (String) myDHT.get(\"Java SE API\");\n    System.out.println(value);\n    myDHT.close();\n```", "```java\npublic class FreePastryExample {\n    ...\n}\n```", "```java\n    public static void main(String[] args) throws Exception {\n        Environment environment = new Environment();\n        environment.getParameters()\n            .setString(\"nat_search_policy\", \"never\");\n        ...\n    }\n```", "```java\n    try {\n        int bindPort = 9001;\n        int bootPort = 9001;\n        InetAddress bootInetAddress = \n            InetAddress.getByName(\"192.168.1.14\"); \n        InetSocketAddress bootAddress = \n                new InetSocketAddress(bootInetAddress, bootPort);\n        System.out.println(\"InetAddress: \" + bootInetAddress);\n        ...\n    } catch (Exception e) {\n        // Handle exceptions\n    }\n```", "```java\n    FreePastryExample freePastryExample = \n        new FreePastryExample(bindPort, bootAddress, environment);\n```", "```java\n    public FreePastryExample(int bindPort, \n            InetSocketAddress bootAddress, \n            Environment environment) throws Exception {\n        NodeIdFactory nidFactory = \n            new RandomNodeIdFactory(environment);\n        PastryNodeFactory factory = \n            new SocketPastryNodeFactory(\n                nidFactory, bindPort, environment);\n        PastryNode node = factory.newNode();\n        ...\n    }\n```", "```java\n    FreePastryApplication application = \n        new FreePastryApplication(node);\n    node.boot(bootAddress);\n    ...\n```", "```java\n    System.out.println(\"Node \" + node.getId().toString() + \" created\");\n    environment.getTimeSource().sleep(10000);\n    Id randomId = nidFactory.generateNodeId();\n    application.routeMessage (randomId);\n```", "```java\npublic class FreePastryApplication implements Application {\n    protected Endpoint endpoint;\n    private final String message;\n    private final String instance = \" Instance ID\";\n\n    public FreePastryApplication(Node node) {\n        this.endpoint = node.buildEndpoint(this, instance);\n        this.message = \"Hello there! from Instance: \"\n                + instance + \" Sent at: [\" + getCurrentTime() \n                + \"]\";\n        this.endpoint.register();\n    }\n\n    ...\n}\n```", "```java\n    private long getCurrentTime() {\n        return this.endpoint\n                .getEnvironment()\n                .getTimeSource()\n                .currentTimeMillis();\n    }\n```", "```java\n    public void routeMessage(Id id) {\n        System.out.println(\n                \"Message Sent\\n\\tCurrent Node: \" +\n                   this.endpoint.getId()\n                + \"\\n\\tDestination: \" + id\n                + \"\\n\\tTime: \" + getCurrentTime());\n        Message msg = new PastryMessage(endpoint.getId(), \n            id, message);\n        endpoint.route(id, msg, null);\n    }\n```", "```java\n    public void deliver(Id id, Message message) {\n        System.out.println(\"Message Received\\n\\tCurrent Node: \" \n            + this.endpoint.getId() + \"\\n\\tMessage: \" \n            + message + \"\\n\\tTime: \" + getCurrentTime());\n    }\n```", "```java\npublic class PastryMessage implements Message {\n  private final Id from;\n  private final Id to;\n  private final String messageBody;\n\n  public PastryMessage(Id from, Id to, String messageBody) {\n    this.from = from;\n    this.to = to;\n    this.messageBody = messageBody;\n  }\n\n    ...\n}\n```", "```java\n  public int getPriority() {\n    return Message.LOW_PRIORITY;\n  }\n```", "```java\n  public String toString() {\n    return \"From: \" + this.from \n            + \" To: \" + this.to \n            + \" [\" + this.messageBody + \"]\";\n  }\n```", "```java\n    Id randomId = nidFactory.generateNodeId();\n    application.routeMessage(randomId);\n```", "```java\n    System.out.println(\"Node \" + node.getId().toStringFull() \n       + \" created\");\n```", "```java\n    public void routeMessageDirect(NodeHandle nh) {\n        System.out.println(\"Message Sent Direct\\n\\tCurrent Node: \"\n                + this.endpoint.getId() + \" Destination: \" + nh\n                + \"\\n\\tTime: \" + getCurrentTime());\n        Message msg = \n            new PastryMessage(endpoint.getId(), nh.getId(),\n                \"DIRECT-\" + message);\n        endpoint.route(null, msg, nh);\n    }\n```", "```java\n    environment.getTimeSource().sleep(10000);\n\n```", "```java\n    LeafSet leafSet = node.getLeafSet();\n    Collection<NodeHandle> collection = leafSet.getUniqueSet();\n    for (NodeHandle nodeHandle : collection) {\n        application.routeMessageDirect(nodeHandle);\n        environment.getTimeSource().sleep(1000);\n    }\n\n```", "```java\nInetAddress: /192.168.1.9\nNode <0xA5BFDA..> created\nMessage Sent Direct\n Current Node: <0xA5BFDA..> Destination: [SNH: <0x2C6D18..>//192.168.1.9:9002]\n Time: 1441849240310\nMessage Received\n Current Node: <0xA5BFDA..>\n Message: From: <0x2C6D18..> To: <0xA5BFDA..> [DIRECT-Hello there! from Instance: Instance ID Sent at: [1441849224879]]\n Time: 1441849245038\n\nInetAddress: /192.168.1.9\nNode <0x2C6D18..> created\nMessage Received\n Current Node: <0x2C6D18..>\n Message: From: <0xA5BFDA..> To: <0x2C6D18..> [DIRECT-Hello there! from Instance: Instance ID Sent at: [1441849220308]]\n Time: 1441849240349\nMessage Sent Direct\n Current Node: <0x2C6D18..> Destination: [SNH: <0xA5BFDA..>//192.168.1.9:9001]\n Time: 1441849245020\n\n```"]