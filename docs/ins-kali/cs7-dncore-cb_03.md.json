["```cs\n        public class SpaceShip \n        { \n\n        }\n\n```", "```cs\n        public class SpaceShip \n        { \n          public void ControlBridge() \n          { \n\n          } \n          public void MedicalBay(int patientCapacity) \n          { \n\n          } \n          public void EngineRoom(int warpDrives) \n          { \n\n          } \n          public void CrewQuarters(int crewCapacity) \n          { \n\n          } \n          public void TeleportationRoom() \n          { \n\n          } \n        }\n\n```", "```cs\n        public class Destroyer : SpaceShip \n        { \n\n        }\n\n```", "```cs\n        public class Destroyer : SpaceShip \n        { \n          public void WarRoom() \n          { \n\n          } \n          public void Armory(int payloadCapacity) \n          { \n\n          } \n\n          public void WarSpecialists(int activeBattalions) \n          { \n\n          } \n        }\n\n```", "```cs\n        public class Annihilator : Destroyer \n        { \n\n        }\n\n```", "```cs\n        public class Annihilator : Destroyer \n        { \n          public void TractorBeam() \n          { \n\n          } \n\n          public void PlanetDestructionCapability() \n          { \n\n          } \n        }\n\n```", "```cs\n        SpaceShip transporter = new SpaceShip(); \n        transporter.ControlBridge(); \n        transporter.CrewQuarters(1500); \n        transporter.EngineRoom(2); \n        transporter.MedicalBay(350); \n        transporter.TeleportationRoom();\n\n```", "```cs\n        Destroyer warShip = new Destroyer(); \n        warShip.Armory(6); \n        warShip.ControlBridge(); \n        warShip.CrewQuarters(2200); \n        warShip.EngineRoom(4); \n        warShip.MedicalBay(800); \n        warShip.TeleportationRoom(); \n        warShip.WarRoom(); \n        warShip.WarSpecialists(1);\n\n```", "```cs\n        Annihilator planetClassDestroyer = new Annihilator(); \n        planetClassDestroyer.Armory(12); \n        planetClassDestroyer.ControlBridge(); \n        planetClassDestroyer.CrewQuarters(4500); \n        planetClassDestroyer.EngineRoom(7); \n        planetClassDestroyer.MedicalBay(3500); \n        planetClassDestroyer.PlanetDestructionCapability(); \n        planetClassDestroyer.TeleportationRoom(); \n        planetClassDestroyer.TractorBeam(); \n        planetClassDestroyer.WarRoom(); \n        planetClassDestroyer.WarSpecialists(3);\n\n```", "```cs\n        public abstract class SpaceCadet \n        { \n          public abstract void ChartingStarMaps(); \n          public abstract void BasicCommunicationSkill(); \n          public abstract void BasicWeaponsTraining(); \n          public abstract void Negotiation(); \n        }\n\n```", "```cs\n        public abstract class SpacePrivate : SpaceCadet \n        { \n          public abstract void AdvancedCommunicationSkill(); \n          public abstract void AdvancedWeaponsTraining(); \n          public abstract void Persuader(); \n        }\n\n```", "```cs\n        public class LabResearcher : SpaceCadet \n        { \n\n        }\n\n```", "```cs\n        public class LabResearcher : SpaceCadet \n        { \n          public override void BasicCommunicationSkill() \n          { \n            thrownewNotImplementedException(); \n          } \n\n          publicoverridevoid BasicWeaponsTraining() \n          { \n            thrownewNotImplementedException(); \n          } \n\n          publicoverridevoid ChartingStarMaps() \n          { \n            thrownewNotImplementedException(); \n          } \n\n          publicoverridevoid Negotiation() \n          { \n            thrownewNotImplementedException(); \n          } \n        }\n\n```", "```cs\n        public class PlanetExplorer : SpacePrivate \n        { \n\n        }\n\n```", "```cs\n        public class PlanetExplorer : SpacePrivate \n        { \n          public override void AdvancedCommunicationSkill() \n          { \n            throw new NotImplementedException(); \n          } \n\n          public override void AdvancedWeaponsTraining() \n          { \n            throw new NotImplementedException(); \n          } \n\n          public override void BasicCommunicationSkill() \n          { \n            throw new NotImplementedException(); \n          } \n\n          public override void BasicWeaponsTraining() \n          { \n            throw new NotImplementedException(); \n          } \n\n          public override void ChartingStarMaps() \n          { \n            throw new NotImplementedException(); \n          } \n\n          public override void Negotiation() \n          { \n            throw new NotImplementedException(); \n          } \n\n          public override void Persuader() \n          { \n            throw new NotImplementedException(); \n          } \n        }\n\n```", "```cs\n        public class LaunchShuttle \n        { \n          private double _EngineThrust; \n          private double _TotalShuttleMass; \n          private double _LocalGravitationalAcceleration; \n\n          private const double EarthGravity = 9.81; \n          private const double MoonGravity = 1.63; \n          private const double MarsGravity = 3.75; \n          private double UniversalGravitationalConstant; \n\n          public enum Planet { Earth, Moon, Mars } \n        }\n\n```", "```cs\n        public LaunchShuttle(double engineThrust, \n          double totalShuttleMass, double gravitationalAcceleration) \n        { \n          _EngineThrust = engineThrust; \n          _TotalShuttleMass = totalShuttleMass; \n          _LocalGravitationalAcceleration =  gravitationalAcceleration; \n\n        } \n\n        public LaunchShuttle(double engineThrust, \n          double totalShuttleMass, Planet planet) \n        { \n          _EngineThrust = engineThrust; \n          _TotalShuttleMass = totalShuttleMass; \n          SetGraviationalAcceleration(planet); \n\n        } \n\n        public LaunchShuttle(double engineThrust, double \n          totalShuttleMass, double planetMass, double planetRadius) \n        { \n          _EngineThrust = engineThrust; \n          _TotalShuttleMass = totalShuttleMass; \n          SetUniversalGravitationalConstant(); \n          _LocalGravitationalAcceleration =  Math.Round(\n            CalculateGravitationalAcceleration (\n              planetRadius, planetMass), 2); \n        }\n\n```", "```cs\n        private void SetGraviationalAcceleration(Planet planet) \n        { \n          switch (planet) \n          { \n            case Planet.Earth: \n              _LocalGravitationalAcceleration = EarthGravity; \n            break; \n            case Planet.Moon: \n              _LocalGravitationalAcceleration = MoonGravity; \n            break; \n            case Planet.Mars: \n              _LocalGravitationalAcceleration = MarsGravity; \n            break; \n            default: \n            break; \n          } \n        }\n\n```", "```cs\n        private void SetUniversalGravitationalConstant() \n        { \n          UniversalGravitationalConstant = 6.6726 * Math.Pow(10,  -11); \n        } \n\n        private double CalculateThrustToWeightRatio() \n        { \n          // TWR = Ft/m.g > 1 \n          return _EngineThrust / (_TotalShuttleMass * \n                      _LocalGravitationalAcceleration); \n        } \n\n        private double CalculateGravitationalAcceleration(\n                       double  radius, double mass) \n        { \n          return (UniversalGravitationalConstant * mass) / \n                                        Math.Pow(radius, 2); \n        } \n\n        public double TWR() \n       { \n         return Math.Round(CalculateThrustToWeightRatio(), 2); \n       }\n\n```", "```cs\n        double thrust = 220; // kN \n        double shuttleMass = 16.12; // t \n        double gravitationalAccelerationEarth = 9.81; \n        double earthMass = 5.9742 * Math.Pow(10, 24); \n        double earthRadius = 6378100; \n        double thrustToWeightRatio = 0;\n\n```", "```cs\n        LaunchShuttle NasaShuttle1 = new LaunchShuttle(thrust, \n                   shuttleMass, gravitationalAccelerationEarth); \n        thrustToWeightRatio = NasaShuttle1.TWR(); \n        Console.WriteLine(thrustToWeightRatio);\n\n```", "```cs\n        LaunchShuttle NasaShuttle2 = new LaunchShuttle(thrust, \n                       shuttleMass, LaunchShuttle.Planet.Earth); \n        thrustToWeightRatio = NasaShuttle2.TWR(); \n        Console.WriteLine(thrustToWeightRatio); \n\n        LaunchShuttle NasaShuttle3 = new LaunchShuttle(\n           thrust,  shuttleMass, earthMass, earthRadius); \n        thrustToWeightRatio = NasaShuttle3.TWR(); \n        Console.WriteLine(thrustToWeightRatio); \n\n        Console.Read();\n\n```", "```cs\n        public abstract class Shuttle \n        { \n          public abstract double TWR(); \n        }\n\n```", "```cs\n        public class NasaShuttle : Shuttle \n        { \n\n        }\n\n```", "```cs\n        public class NasaShuttle : Shuttle \n        { \n          public override double TWR() \n          { \n            throw new NotImplementedException(); \n          } \n        }\n\n```", "```cs\n        public class RoscosmosShuttle : Shuttle \n        { \n\n        }\n\n```", "```cs\n        public class RoscosmosShuttle : Shuttle \n        { \n          public override double TWR() \n          { \n            throw new NotImplementedException(); \n          } \n        }\n\n```", "```cs\n        public NasaShuttle(double engineThrust, \n          double  totalShuttleMass, double gravitationalAcceleration) \n        { \n\n        } \n\n        public NasaShuttle(double engineThrust, \n          double  totalShuttleMass, double planetMass, \n          double planetRadius) \n        { \n\n        }\n\n```", "```cs\n        public class Starship \n        { \n\n        }\n\n```", "```cs\n        public void SetMaximumTroopCapacity(int capacity) \n        {             \n\n        }\n\n```", "```cs\n        try \n        { \n          // Read current capacity and try to add more \n        } \n        catch (Exception ex) \n        { \n          string connectionString = \"connection string goes  here\";\n          string sql = $\"INSERT INTO tblLog (error, date) VALUES\n            ({ex.Message}, GetDate())\";\n          using (SqlConnection con = new \n                 SqlConnection(connectionString)) \n          { \n            SqlCommand cmd = new SqlCommand(sql); \n            cmd.CommandType = CommandType.Text; \n            cmd.Connection = con; \n            con.Open(); \n            cmd.ExecuteNonQuery(); \n          } \n          throw ex; \n        }\n\n```", "```cs\n        public class StarTrooper \n        { \n\n        }\n\n```", "```cs\n        public enum TrooperClass { Soldier, Medic, Scientist } \n        List<string> TroopSkill; \n\n        public List<string> GetSkills(TrooperClass troopClass) \n        { \n          switch (troopClass) \n          { \n            case TrooperClass.Soldier: \n              return TroopSkill = new List<string>(new string[] {\n                \"Weaponry\", \"TacticalCombat\",  \"HandToHandCombat\" }); \n\n            case TrooperClass.Medic: \n              return TroopSkill = new List<string>(new string[] {\n                \"CPR\", \"AdvancedLifeSupport\" }); \n\n            case TrooperClass.Scientist: \n              return TroopSkill = new List<string>(new string[] {\n                \"Chemistry\",  \"MollecularDeconstruction\", \n                \"QuarkTheory\" }); \n\n            default: \n              return TroopSkill = new List<string>(new string[]  {\n                \"none\" }); \n          } \n        }\n\n```", "```cs\n        public class Trooper \n        { \n          public virtual List<string> GetSkills() \n          { \n            return new List<string>(new string[] { \"none\" }); \n          } \n        }\n\n```", "```cs\n        public class Soldier : Trooper \n        { \n          public override List<string> GetSkills() \n          { \n            return new List<string>(new string[] { \"Weaponry\", \n                         \"TacticalCombat\", \"HandToHandCombat\" }); \n          } \n        } \n\n        public class Medic : Trooper \n        { \n          public override List<string> GetSkills() \n          { \n            return new List<string>(new string[] { \n                   \"CPR\",  \"AdvancedLifeSupport\" }); \n          } \n        } \n\n        public class Scientist : Trooper \n        { \n          public override List<string> GetSkills() \n          { \n            return new List<string>(new string[] { \"Chemistry\",\n              \"MollecularDeconstruction\", \"QuarkTheory\" }); \n          } \n        }\n\n```", "```cs\n        public class Engineer : Trooper \n        { \n          public override List<string> GetSkills() \n          { \n            return new List<string>(new string[] {  \n              \"Construction\", \"Demolition\" }); \n          } \n        }\n\n```", "```cs\nusing System.IO;\n\n```", "```cs\n        public void ReadXMLFile(string fileName)\n        {\n          try\n          {\n            bool blnReadFileFlag = true;\n            if (blnReadFileFlag)\n            {\n              File.ReadAllLines(fileName);\n            }\n          }\n          catch (Exception ex)\n          {\n            Log(ex);\n            throw;\n          }\n        }\n\n        private void Log(Exception e)\n        {\n          /* Log the error */\n        }\n\n```", "```cs\nChapter3 ch3 = new Chapter3();\nstring File = @\"c:tempXmlFile.xml\";\nch3.ReadXMLFile(File);\n\n```", "```cs\n        public void ReadXMLFile(string fileName)\n        {\n          try\n          {\n            bool blnReadFileFlag = true;\n            if (blnReadFileFlag)\n            {\n              File.ReadAllLines(fileName);\n            }\n          }\n          catch (Exception ex) when (Log(ex))\n          {\n          }\n        }\n        private bool Log(Exception e)\n        {\n          /* Log the error */\n          return false;\n        }\n\n```", "```cs\ncatch (Exception ex)\n{ \n}\ncatch (FileNotFoundException ex)\n{ \n}\n\n```", "```cs\ncatch (Exception ex) when (Log(ex))\n{ \n}\ncatch (FileNotFoundException ex)\n{ \n}\n\n```", "```cs\npublic void TryReadXMLFile(string fileName)\n{\n  bool blnFileRead = false;\n  do\n  {\n    int iTryCount = 0;\n    try\n    {\n      bool blnReadFileFlag = true;\n      if (blnReadFileFlag)\n      File.ReadAllLines(fileName);\n    }\n    catch (Exception ex) when (RetryRead(ex, iTryCount++) == true)\n    {\n    }\n  } while (!blnFileRead);\n}\n\nprivate bool RetryRead(Exception e, int tryCount)\n{\n  bool blnThrowEx = tryCount <= 10 ? blnThrowEx = \n       false : blnThrowEx = true;\n  /* Log the error if blnThrowEx = false */\n  return blnThrowEx;\n}\n\n```"]