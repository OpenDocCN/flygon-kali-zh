- en: Debugging and Migration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和迁移
- en: This chapter will look further into migration and debugging, providing an extensive
    overview and detailed inspection of these topics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将进一步探讨迁移和调试，提供对这些主题的广泛概述和详细检查。
- en: Migration refers to the process of moving content and projects from earlier
    versions of Webpack to newer ones. We will specifically look at the move from
    Webpack version 3 to version 4 and from version 4 to version 5\. We will also
    cover how to deal with deprecated plugins and how to remove or update them. This
    will include a look at migration when using Node.js v4 and the **command-line
    interface** (**CLI**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移是指将内容和项目从Webpack的早期版本迁移到较新版本的过程。我们将特别关注从Webpack 3版本迁移到4版本以及从4版本迁移到5版本的过程。我们还将介绍如何处理已弃用的插件以及如何删除或更新它们。这将包括在使用Node.js
    v4和CLI时的迁移。
- en: This chapter will discuss the `resolve` method and how `module.loaders` has
    now been replaced by the `module.rules` method. It will also cover the chaining
    of loaders, including chaining loaders that are no longer needed or have been
    removed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论`resolve`方法以及`module.loaders`现已被`module.rules`方法取代。它还将涵盖加载器的链接，包括不再需要或已删除的加载器的链接。
- en: Then, this chapter will move on to exploring debugging. Debugging involves the
    process of removing common faults and errors that present themselves in complex
    software systems. This chapter will explain common problems and their solutions,
    troubleshooting, the best practices to follow to avoid these problems, and how
    to find faults.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，本章将继续探讨调试。调试涉及消除复杂软件系统中出现的常见故障和错误的过程。本章将解释常见问题及其解决方案、故障排除、避免这些问题的最佳实践以及如何找到故障。
- en: 'Topics covered in this chapter are as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Debugging
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: Hot module replacement
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热模块替换
- en: Adding a utility
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加实用程序
- en: Migration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移
- en: Debugging
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 'Debugging tools are central to a workflow, particularly when contributing to
    core reproduction, writing a loader, or any other complex form of coding. This
    guide will take you through the utilities that are of most use when figuring out
    matters such as slow performance or an unforgiving traceback. These principle
    utilities are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 调试工具对于工作流程至关重要，特别是在贡献核心复制、编写加载器或任何其他复杂形式的编码时。本指南将带您了解在解决诸如性能缓慢或不可原谅的回溯等问题时最有用的实用工具。
- en: The `stats` data made available through Node.js and the CLI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Node.js和CLI提供的`stats`数据
- en: Chrome DevTools via `node-nightly` and the latest Node.js versions
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`node-nightly`和最新的Node.js版本使用Chrome DevTools
- en: In Webpack 5, as of the time of writing, there are some known problems; for
    example, DevTools doesn't support persistent caching and persistent cache files
    that include absolute paths are not yet portable.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack 5中，截至撰写本文时，存在一些已知问题；例如，DevTools不支持持久缓存和包含绝对路径的持久缓存文件尚不可移植。
- en: 'The `stats` data can be very useful when debugging build issues, sifting through
    data manually, or when using a tool. It can be used to find the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试构建问题、手动筛选数据或使用工具时，`stats`数据非常有用。它可用于查找以下内容：
- en: Build errors and warnings
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建错误和警告
- en: The contents of every module
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个模块的内容
- en: Module compilation and resolving stats
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块编译和解析统计
- en: The interrelationships between modules
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块之间的相互关系
- en: The modules contained within any given chunk
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何给定块中包含的模块
- en: Also, the official Webpack **analyze** tool will accept this data and visualize
    it for you.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，官方的Webpack分析工具将接受这些数据并为您可视化。
- en: Sometimes, a more robust solution is needed when console statements simply won't
    do the job.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当控制台语句无法完成工作时，需要更强大的解决方案。
- en: As is commonly asserted among the community of frontend developers, Chrome DevTools
    is indispensable when debugging applications—but it doesn't stop there. As of
    Node.js v6.3.0+, the built-in **inspection flag** can be used by developers to
    debug a Node.js program in DevTools.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前端开发人员社区中普遍认为的那样，Chrome DevTools在调试应用程序时是不可或缺的，但它并不止步于此。从Node.js v6.3.0+开始，开发人员可以使用内置的检查标志在DevTools中调试Node.js程序。
- en: 'This short demonstration will utilize the `node-nightly` package, which provides
    access to the latest inspection capabilities. This offers the ability to create
    breakpoints, debug memory usage issues, expose objects in the console, and more:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的演示将利用`node-nightly`包，该包提供了最新的检查功能。这提供了创建断点、调试内存使用问题、在控制台中公开对象等功能：
- en: 'Begin by installing the `node-nightly` package globally:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先全局安装`node-nightly`包：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This package must now be run using the command line to finish the installation:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在必须使用命令行来运行此包以完成安装：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, using the `inspect` flag feature of `node-nightly`, we can start to debug
    any Webpack project. It should be noted that `npm` scripts cannot be run now;
    instead, the full `node_module` path will need to be expressed:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`node-nightly`的`inspect`标志功能，我们可以开始调试任何Webpack项目。需要注意的是，现在无法运行npm脚本；相反，需要表达完整的`node_module`路径：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output should reveal something like the following in the command-line utility
    window:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应该在命令行实用程序窗口中显示如下内容：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, moving to Chrome's inspection feature (`chrome://inspect`), any active
    scripts should now be viewable under the `Remote Target` header.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到Chrome的检查功能（`chrome://inspect`），任何活动脚本现在应该在`远程目标`标题下可见。
- en: Clicking the `inspect` link under each script will open a dedicated debugger
    or DevTools link for the node in a session, which will connect automatically*.*
    Note that **NiM** is a handy extension for Chrome that will automatically open
    DevTools in a new tab every time you make an inspection. This is extremely useful
    for longer projects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 单击每个脚本下的“检查”链接将在会话中为节点打开专用的调试器或DevTools链接，这将自动连接。请注意，NiM是Chrome的一个方便的扩展，每次进行检查时都会自动在新标签中打开DevTools。这对于较长的项目非常有用。
- en: It may also be useful to use the `inspect-brk` flag, which causes a break on
    the first statement of any script, allowing the source code to be perused, the
    breakpoints to be set, and the process to be stopped and started ad hoc. This
    also allows the programmer to continue to pass arguments to the script in question;
    this may be useful for making parallel configuration alterations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用`inspect-brk`标志，它会在任何脚本的第一个语句上中断，允许查看源代码，设置断点，并临时停止和启动进程。这也允许程序员继续向所讨论的脚本传递参数；这可能对进行并行配置更改很有用。
- en: One key feature that this all relates to—and something that has been alluded
    to previously in this guide—is the exciting subject of **hot module replacement**
    (HMR). What it is and how to use it will be covered in the following section,
    along with a tutorial.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都与一个关键功能有关，这也是本指南中先前提到的令人兴奋的**热模块替换**（HMR）主题。下一节将介绍它是什么以及如何使用它，以及教程。
- en: Hot module replacement
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热模块替换
- en: HMR is possibly the most useful element of Webpack. It allows runtime updates
    of modules that need a total refresh. This section will explore the implementation
    of HMR, as well as detailing how it works and why it is so useful.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: HMR可能是Webpack中最有用的元素。它允许运行时更新需要完全刷新的模块。本节将探讨HMR的实现，以及它的工作原理和为什么它如此有用。
- en: It is very important to note that HMR is not intended for and should never be
    used in production mode; it should only be used in development mode.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是，HMR不适用于生产模式，也不应该在生产模式下使用；它只应该在开发模式下使用。
- en: It's worth noting that, according to the developers, the internal HMR API for
    plugins will probably change in future updates of Webpack 5.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，根据开发人员的说法，插件的内部HMR API在将来的Webpack 5更新中可能会发生变化。
- en: To enable HMR, what we first need to do is update our `webpack-dev-server` configuration
    and use Webpack's built-in HMR plugin. This feature is great for productivity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用HMR，我们首先需要更新我们的`webpack-dev-server`配置，并使用Webpack内置的HMR插件。这个功能对提高生产力非常有用。
- en: It is also a good idea to remove the entry point for `print.js` as it will now
    be consumed by the `index.js` module.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`print.js`的入口点也是一个好主意，因为它现在将被`index.js`模块使用。
- en: 'Anyone who used `webpack-dev-middleware` instead of `webpack-dev-server` should
    now use the `webpack-hot-middleware` package to enable HMR:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用`webpack-dev-middleware`而不是`webpack-dev-server`的人现在应该使用`webpack-hot-middleware`包来启用HMR：
- en: 'To start using HMR, we need to return to the configuration file, `webpack.config.js`.
    Follow the amendment here:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用HMR，我们需要返回到配置文件`webpack.config.js`。按照这里的修改：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note the additions in the preceding code—the `hot:` option is set to `true`
    and the `'Hot Module Replacement'` plugin has been added—as well as the creation
    of the new Webpack plugin in the configuration for HMR. All of this should be
    done to make use of the plugin and HMR.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意前面代码中的添加——`hot:`选项设置为`true`，并添加了`'Hot Module Replacement'`插件，以及在HMR配置中创建新的Webpack插件。所有这些都应该被做来使用插件和HMR。
- en: 'The command line can be used to modify the `webpack-dev-server` configuration
    with the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用命令行修改`webpack-dev-server`配置，命令如下：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will allow ad hoc changes to be made to bundled applications.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许对捆绑应用程序进行临时更改。
- en: '`index.js` should now be updated so that when a change in `print.js` is detected,
    Webpack can accept the updated module. The changes are illustrated in bold in
    the following example; we are simply exposing the `print.js` file with an `import`
    expression and function:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.js`现在应该更新，以便当检测到`print.js`的更改时，Webpack可以接受更新的模块。更改在以下示例中以粗体显示;我们只是用`import`表达式和函数暴露`print.js`文件：'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you make changes to the console log in `print.js`, the following output
    will be seen in the browser console. The obligatory `printMe()` button is missing
    for now, but that can be updated later:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更改`print.js`中的控制台日志，则将在浏览器控制台中看到以下输出。现在，强制性的`printMe()`按钮已经消失，但稍后可以更新：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A look at the console window should reveal the following printout:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 查看控制台窗口应该会显示以下输出：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding block reveals that HMR is awaiting a signal from Webpack and should
    HMR take place, the command-line utility can perform the automatic bundle amendment.
    The command-line window will also show this when left open. Node.js has an API
    that can be used in a similar way.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块显示HMR正在等待来自Webpack的信号，如果发生HMR，命令行实用程序可以执行自动捆绑修订。当命令行窗口保持打开时，它也会显示这一点。Node.js有一个类似的API可以使用。
- en: Using DevServer with the Node.js API
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在使用Node.js API时使用DevServer
- en: When using **DevServer** and the Node.js API, you should not put the `dev server`
    option on the Webpack configuration object; instead, it should always be passed
    as a secondary parameter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**DevServer**和Node.js API时，不应将`dev server`选项放在Webpack配置对象上；而应始终将其作为第二参数传递。
- en: 'Here, DevServer simply refers to the use of Webpack in development mode as
    opposed to the `watching` or `production` modes. To use DevServer with the Node.js
    API, follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，DevServer只是指在开发模式下使用Webpack，而不是`watching`或`production`模式。要在Node.js API中使用DevServer，请按照以下步骤进行操作：
- en: 'The function is placed in the `webpack.config.js` file, as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该函数放在`webpack.config.js`文件中，如下：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To enable HMR, the configuration object must first be modified to include the
    HMR entry points. The `webpack-dev-server` package includes a method called `addDevServerEntryPoints` that
    can be used to do this.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用HMR，首先必须修改配置对象以包括HMR入口点。`webpack-dev-server`包包括一个名为`addDevServerEntryPoints`的方法，可以用来执行此操作。
- en: 'What follows is a short example of what it might look like using `dev-server.js`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是使用`dev-server.js`的简短示例：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: HMR can be difficult. To demonstrate this, in our example, click the button
    that has been created in the example web page. It is evident that the console
    is printing the old function. This is because the event handler is bound to the
    original function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: HMR可能很困难。为了证明这一点，在我们的示例中，单击在示例网页中创建的按钮。显然控制台正在打印旧函数。这是因为事件处理程序绑定到原始函数。
- en: 'To resolve this for use with HMR, the binding must be updated to the newer
    function using `module.hot.accept`. See the following example using `index.js`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题以便与HMR一起使用，必须使用`module.hot.accept`更新绑定到新函数。请参阅以下示例，使用`index.js`：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By way of explanation, `btn.onclick = printMe;` is an `onclick` event that is
    bound to the original `printMe` function. `let element = component();` will store
    the element to re-render on any changes to `print.js`. Also, note the `element
    - component();` statement, which will re-render the component and update the click
    handler.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解释，`btn.onclick = printMe;`是绑定到原始`printMe`函数的`onclick`事件。`let element = component();`将存储元素以便在`print.js`发生任何更改时重新渲染。还要注意`element
    - component();`语句，它将重新渲染组件并更新单击处理程序。
- en: This is just one example of the kind of pitfalls that you may encounter. Luckily,
    Webpack offers a lot of loaders, some of which are discussed later, that make
    HMR much less problematic. Let's now look at HMR and style sheets.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是您可能会遇到的陷阱的一个例子。幸运的是，Webpack提供了许多加载程序，其中一些稍后将讨论，这使得HMR变得不那么棘手。现在让我们来看看HMR和样式表。
- en: HMR and style sheets
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HMR和样式表
- en: Using HMR with CSS is a little more straightforward with the help of `style-loader`.
    This loader uses `module.hot.accept` to patch style tags when CSS dependencies
    are updated.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`style-loader`可以更轻松地使用HMR处理CSS。此加载程序使用`module.hot.accept`在更新CSS依赖项时修补样式标签。
- en: 'In the next stage of our practical example, we will be taking the following
    steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实际示例的下一个阶段，我们将采取以下步骤：
- en: 'Start by installing both loaders with the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令安装两个加载程序：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, update the configuration file, `webpack.config.js`, to make use of the
    loaders:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新配置文件`webpack.config.js`以使用这些加载程序：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Hot loading style sheets is as easy as importing them into the module, as you
    can see from the text in bold in the previous configuration example and the directory
    structure example to follow.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 热加载样式表就像将它们导入模块一样简单，您可以从前面的配置示例和接下来的目录结构示例中看到。
- en: 'Ensure that you organize the project files and directories, as shown, in the
    following structure:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保按照以下结构组织项目文件和目录：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Append the style sheet by adding a `body` style to style the background of
    the document body associated with it blue. Do this using the `styles.css` file:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向样式表添加`body`样式来将文档主体的背景与其关联的蓝色进行样式化。使用`styles.css`文件执行此操作：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After that, we need to ensure the content is loaded to the `index.js` file
    correctly, as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要确保内容正确加载到`index.js`文件中，如下所示：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, when the style of the `body` tag background class is changed to red, the
    color change should be immediately noted without a page refresh, indicating the
    live nature of hot coding.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当`body`标签背景类的样式更改为红色时，颜色变化应立即注意到，无需刷新页面，表明了热编码的实时性。
- en: 'You should now make these changes to the background using `styles.css`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该使用`styles.css`对背景进行这些更改：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This demonstrates, in a very simple way, how live code edits can be made. This
    was only a simple example, but it serves as a good introduction. Now, let's progress
    to something trickier—loaders and frameworks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这以一种非常简单的方式演示了如何进行实时代码编辑。这只是一个简单的例子，但它是一个很好的介绍。现在，让我们进一步探讨一些更棘手的内容——加载程序和框架。
- en: Other loaders and frameworks
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他加载程序和框架
- en: 'The numerous loaders that are available and that we alluded to earlier make
    HMR interact more smoothly with a variety of frameworks and libraries. Some of
    the more useful ones are described here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了许多可用的加载程序，这些加载程序使HMR与各种框架和库更加顺畅地交互。其中一些更有用的加载程序在这里进行了描述：
- en: '**Angular HMR**: A simple change to your main `NgModule` file is all that''s
    required to have full control over the HMR APIs (does not require a loader).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular HMR**：只需对主`NgModule`文件进行简单更改，即可完全控制HMR API（不需要加载程序）。'
- en: '**React Hot Loader**: This loader tweaks React components in real time.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React Hot Loader**：此加载程序可以实时调整React组件。'
- en: '**Elm Hot Webpack Loader**: This loader supports HMR for the Elm programming
    language.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elm Hot Webpack Loader**：此加载程序支持Elm编程语言的HMR。'
- en: '**Vue** **Loader**: This loader supports HMR for Vue components out of the
    box.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vue Loader**：此加载程序支持Vue组件的HMR。'
- en: We have gone through HMR and related loaders and frameworks but something we
    have yet to discuss—but relates to the content we have covered so far—is adding
    a utility. We will get to grips with that in the following section.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了HMR和相关加载程序和框架，但有一件事我们尚未讨论——与我们迄今为止涵盖的内容相关的添加实用程序。我们将在接下来的部分中深入了解。
- en: Adding a utility
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加实用程序
- en: In this context, a utility means a file or module that is responsible for a
    related set of functions, designed to optimize, analyze, configure, or maintain.
    This is in contrast to an application, which tends to perform a task or set of
    tasks aimed directly at users. Therefore, you may think of a utility, in this
    context, as something that is part of the frontend but is hidden away in the background
    for background tasks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，实用程序意味着负责一组相关功能的文件或模块，旨在优化、分析、配置或维护。这与应用程序形成对比，后者倾向于执行直接面向用户的任务或一组任务。因此，在这种情况下，您可以将实用程序视为前端的一部分，但它被隐藏在后台用于后台任务。
- en: 'To begin, add a utility file to the example project. Do this in `src/math.js`
    so that it exports two functions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在示例项目中添加一个实用程序文件。在`src/math.js`中执行此操作，以便导出两个函数：
- en: 'The first step will be to organize the project directory:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步将是组织项目目录：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The **project tree** shows how your files and folder should look and you will
    note some new additions in there, such as `math.js`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目树**显示了您的文件和文件夹的外观，您将注意到其中一些新的添加，例如`math.js`。'
- en: 'Let''s now take a closer look at how `math.js` is coded:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们更仔细地看一下`math.js`的编码：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You'll see that they are simple-to-export functions; they will come to the fore
    later.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现它们是简单易导出的函数；它们将在稍后显现。
- en: 'Also, make sure you set the Webpack mode to `development` in the configuration
    file, `webpack.config.js`, which ensures the bundle is not minified:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要确保在配置文件`webpack.config.js`中将Webpack模式设置为`development`，以确保捆绑包不被最小化：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With this in place, we next update the entry script to utilize one of these
    new methods and remove `lodash` for simplicity. This is done using the `src/index.js`
    file:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这个，接下来更新入口脚本以利用其中一种新方法，并为简单起见删除`lodash`。这是使用`src/index.js`文件完成的：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: From the proceeding example, we can see that the `square` method was not imported
    from the `src/math.js` module. This function can be considered dead code—essentially,
    an unused export that can be dropped.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的例子中，我们可以看到`square`方法没有从`src/math.js`模块中导入。这个函数可以被视为死代码，基本上是一个未使用的导出，可以被删除。
- en: 'Now, run an `npm` build again to inspect the results:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次运行`npm`构建以检查结果：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once that is done, locate the `dist/bundle.js` file—it should be somewhere
    on lines 90–100\. Search the file for code similar to the following example to
    follow this process:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，找到`dist/bundle.js`文件——它应该在第90-100行左右。搜索文件以查找类似以下示例的代码，以便按照此过程进行：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this example, you will now see an `unused harmony export square` comment.
    Note that it is not being imported. It is, however, still included in the bundle
    for the time being.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，现在会看到一个`unused harmony export square`的注释。请注意，它没有被导入。但是，它目前仍然包含在捆绑包中。
- en: 'ECMA scripting is not perfect, so it is important to provide hints to Webpack''s
    compiler about the purity of the code. The `packages.json` property will help
    with these side effects:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ECMA脚本并不完美，因此重要的是向Webpack的编译器提供关于代码纯度的提示。`packages.json`属性将有助于处理这些副作用：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding code doesn't contain side effects; therefore, the property should
    be marked as `false` to instruct Webpack to remove the unused exports.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码不包含副作用；因此，应将该属性标记为`false`，以指示Webpack删除未使用的导出。
- en: In this context, a side effect is defined as a script that performs a special
    behavior when imported, as opposed to exposing more than one export, and so on.
    An example would be **polyfills**, which affect the global project and usually do
    not provide an export.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，副作用被定义为在导入时执行特殊行为的脚本，而不是暴露多个导出等。一个例子是影响全局项目并且通常不提供导出的**polyfills**。
- en: 'In the event of the code having a side effect, an array can be provided as
    a remedy, such as in the following example:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果代码具有副作用，可以提供一个数组作为补救措施，例如以下示例：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The array in this example accepts relative and absolute patterns.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中的数组接受相对和绝对模式。
- en: 'Note that any imported file is subject to tree shaking. For example, if `CSS-loader`
    is used to import a CSS file, it must be added to the side effects list to prevent
    it from being unintentionally dropped in production mode:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，任何导入的文件都会受到摇树的影响。例如，如果使用`CSS-loader`导入CSS文件，则必须将其添加到副作用列表中，以防止在生产模式下意外删除它：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, `sideEffects` can also be set from the `module.rules` configuration
    option. So, we''ve queued up our dead code to be dropped by using the `import` and `export` syntax,
    but we still need to drop it from the bundle. To do that, set the `mode` configuration
    option to `production`. This is done by appending the configuration file, **`webpack.config.js`**,as
    follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`sideEffects`也可以从`module.rules`配置选项中设置。因此，我们使用`import`和`export`语法排队将死代码删除，但我们仍然需要从捆绑包中删除它。要做到这一点，将`mode`配置选项设置为`production`。这是通过以下方式在配置文件**`webpack.config.js`**中完成的：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `--optimize-minimize` flag can also be used to enable `TerserPlugin`. Now
    that we have understood that, we can run another `npm` build.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`--optimize-minimize`标志也可以用于启用`TerserPlugin`。现在我们已经了解了这一点，可以再次运行`npm`构建。'
- en: 'It will now be clear that the whole bundle is minified and mangled. A closer
    look reveals that the `square` function is missing; instead, you have a mangled
    cube function:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在清楚地看到整个捆绑包已经被最小化和混淆。仔细观察会发现`square`函数已经消失；取而代之的是一个混淆的cube函数：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With minification and tree shaking, our bundle is now a few bytes smaller! While
    that may not seem like much in this contrived example, tree shaking can yield
    a significant decrease in bundle size when working on larger applications with
    complex dependency trees.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过最小化和摇树，我们的捆绑包现在小了几个字节！虽然在这个假设的例子中可能看起来不多，但在处理具有复杂依赖关系树的大型应用程序时，摇树可以显著减少捆绑包大小。
- en: '`ModuleConcatenationPlugin` is needed for the tree shaking to work. It is added
    by using `mode: "production"`. If you are not using it, remember to add `ModuleConcatenationPlugin` manually.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModuleConcatenationPlugin`是摇树功能的必需品。它通过使用`mode: "production"`来添加。如果您没有使用它，请记得手动添加`ModuleConcatenationPlugin`。'
- en: 'The following tasks must be done to take full advantage of tree shaking:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 必须完成以下任务才能充分利用摇树功能：
- en: Use the ES2015 module syntax (that is, `import` and `export`).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ES2015模块语法（即`import`和`export`）。
- en: Ensure no compilers transform your ECMAScript syntax into CommonJS modules.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保没有编译器将您的ECMAScript语法转换为CommonJS模块。
- en: Add a `sideEffects` property to your `package.json` file.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中添加一个`sideEffects`属性。
- en: Use the `production` configuration option to enable various optimizations, including tree
    shaking and minification.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`production`配置选项来启用各种优化，包括摇树和最小化。
- en: When it comes to tree shaking, it often helps to think of your application as
    a tree. In this analogy, the source code and libraries would be the green leaves
    and the living part of the tree, respectively. Dead code, however, would represent
    the dead leaves. Shaking that tree will remove the now defunct code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行摇树时，通常有助于将您的应用程序视为一棵树。在这个类比中，源代码和库将分别是绿叶和树的活部分。然而，死代码将代表枯叶。摇动这棵树将删除现在无效的代码。
- en: This is especially relevant and worth considering when migrating. Given the
    changes in code deprecation between versions of Webpack, it is important to get
    your software working at its best before attempting anything like this. This will
    prevent very difficult bugs from developing.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这在迁移时尤其重要，值得考虑。考虑到Webpack版本之间的代码弃用变化，重要的是在尝试任何类似操作之前使软件达到最佳状态。这将防止出现非常棘手的错误。
- en: Migration
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移
- en: Migration relates to moving from one version of Webpack to another. This usually
    involves upgrading to the latest version. It's something that, as a web developer,
    you may already know is tricky when dealing with other software in general, so
    this section will be an important one that perhaps you can refer back to when
    going through future development.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移涉及从一个Webpack版本迁移到另一个版本。这通常涉及升级到最新版本。作为Web开发人员，你可能已经知道在处理其他软件时会有一些棘手的问题，所以这一部分可能是一个重要的部分，也许在未来的开发过程中你可以参考一下。
- en: For the sake of providing a more detailed guide, a migration strategy for moving
    from Webpack 3.0 to Webpack 4.0 is included, so let's go through this now, before
    moving on to version 5.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供更详细的指南，包括了从Webpack 3.0迁移到Webpack 4.0的迁移策略，所以让我们在继续到版本5之前先进行一下这部分。
- en: Prerequisites when migrating to version 4 from version 3
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从版本3迁移到版本4的先决条件
- en: 'There are several prerequisites to go over before we begin migrating our project
    from Webpack version 3 to 4\. These involve the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始从Webpack版本3迁移到4的项目之前，有几个先决条件需要澄清：
- en: Node.js
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: The CLI
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行
- en: Plugins
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件
- en: Modes
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式
- en: For developers using Node.js version 4 or lower, upgrading to Node.js version
    6 or higher is necessary. In terms of the command line, the CLI has moved to a
    separate package, called `webpack-cli`. You need to install it before using Webpack
    4.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用Node.js版本4或更低版本的开发人员，升级到Node.js版本6或更高版本是必要的。在命令行方面，CLI已经移动到一个名为`webpack-cli`的单独包中。在使用Webpack
    4之前，你需要安装它。
- en: 'When updating plugins, many third-party plugins need to be upgraded to their
    latest version to be compatible, so please be aware of that. It is also a good
    idea to peruse your project to find the ones that need updating. Also, be sure
    to add the new mode option to your configuration:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新插件时，许多第三方插件需要升级到最新版本以确保兼容，所以请注意这一点。浏览项目以找到需要更新的插件也是一个好主意。另外，请确保将新的模式选项添加到你的配置中：
- en: 'Begin by setting the mode in your configuration to `production` or `development`,
    depending on the configuration type, as in the following code snippet, using `webpack.config.js`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在你的配置中将模式设置为`production`或`development`，根据配置类型而定，如下面的代码片段所示，使用`webpack.config.js`：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There is an alternative method, which can be done by passing the mode using
    the CLI, such as with the following example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种替代方法，可以通过CLI传递模式，就像下面的例子一样：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding example shows the latter part of any Webpack command for the
    `production` mode made through the command line. The following example shows the
    same for the `development` mode:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子展示了通过命令行在`production`模式下进行Webpack命令的后半部分。下面的例子展示了在`development`模式下的相同情况：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The next step is the removal of deprecated plugins; the plugins should be removed
    from your configuration file as they are default in production mode. The following
    example will show you how to make the edit in `webpack.config.js`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是移除弃用的插件；这些插件应该从你的配置文件中移除，因为它们在生产模式下是默认的。下面的例子将向你展示如何在`webpack.config.js`中进行编辑：
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following example gives you a view of how this works in development mode.
    Note that the plugins are the default in development mode, again using `webpack.config.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子让你看到了这在开发模式下是如何工作的。请注意，插件在开发模式下是默认的，同样使用`webpack.config.js`：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If that was done correctly, you will see that the depreciated plugins have
    been removed. Your configuration file, **`webpack.config.js`**, should look something
    like the following:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切都做对了，你会发现已经移除了弃用的插件。你的配置文件**`webpack.config.js`**应该看起来像下面这样：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Also, `CommonChunkPlugin` was removed in this process with the `optimization.splitChunks`
    options offered as an alternative in Webpack 4.0.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在Webpack 4.0中，`CommonChunkPlugin`已被移除，并提供了`optimization.splitChunks`选项作为替代。
- en: 'If you are generating HTML from stats, `optimization.splitChunks.chunks: "all"`
    can now be used—this is the optimal configuration in most cases.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你正在从统计数据生成HTML，现在可以使用`optimization.splitChunks.chunks: "all"`——这在大多数情况下是最佳配置。'
- en: 'There is also some work to be done regarding `import()` and CommonJS. When
    using `import()` to load any non-ESM scripts, the result has changed in Webpack
    4:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`import()`和CommonJS还有一些工作要做。在Webpack 4中，使用`import()`加载任何非ESM脚本的结果已经发生了变化：
- en: 'Now, you need to access the default property to get the value of `module.exports`.
    See the `non-esm.js` file here to see this in action:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要访问默认属性来获取`module.exports`的值。在这里查看`non-esm.js`文件，看看它是如何运作的：
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is a simple JavaScipt function and you can replicate its contents to follow
    the demonstration and see how the results have changed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的JavaScript函数，你可以复制它的内容来跟随演示并查看结果的变化。
- en: 'The next file is an **`example.js`** file. It can be called anything you want
    and you can perform any action you want. In this example, it is a simple `sayHello();`
    function:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个文件是一个**`example.js`**文件。它可以被命名为任何你想要的名字，你可以执行任何你想要的操作。在这个例子中，它是一个简单的`sayHello();`函数：
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: These blocks show how to code simple functions with CommonJS. You should apply
    this convention to your existing code to ensure it doesn't break.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码块展示了如何使用CommonJS编写简单的函数。你应该将这种约定应用到你现有的代码中，以确保它不会出错。
- en: 'When using a custom loader to transform `.json` files, you now need to change
    the module type in `webpack.config.js`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用自定义加载器转换`.json`文件时，现在需要在`webpack.config.js`中更改模块类型：
- en: '[PRE38]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Even when using `json-loader`, it can be removed; see the following example:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使使用`json-loader`，也可以将其移除；参见下面的例子：
- en: '[PRE39]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Once this is done, all of the required migration prerequisites will have been
    done. The next step is the automated updating process, which is built into Webpack.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有必需的迁移先决条件后，下一步是内置在Webpack中的自动更新过程。
- en: Prerequisites when migrating to version 5 from version 4
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从版本4迁移到版本5时的先决条件
- en: This guide aims to help you migrate to Webpack 5 when using Webpack directly.
    If you are using a higher-level tool to run Webpack, please refer to this tool
    for migration instructions.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南旨在帮助您在直接使用Webpack时迁移到Webpack 5。如果您使用更高级的工具来运行Webpack，请参考该工具的迁移说明。
- en: 'As explained in [Chapter 1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction
    to Webpack 5*, Webpack 5 requires Node.js version 10.13.0 (LTS) to run; however,
    the use of a newer version can improve build performance even more:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml)中所解释的，*Webpack 5简介*，Webpack
    5需要Node.js版本10.13.0（LTS）才能运行；但是，使用更新版本可以进一步提高构建性能：
- en: You should be sure to check related plugins and loaders for individual migration
    instructions through the author-provided copies, especially when upgrading across
    major versions. In such cases, be aware of deprecation warnings during the build.
    You can invoke Webpack this way to get stack traces for deprecation warnings to
    figure out which plugins and loaders are responsible. Webpack 5 will remove all
    the deprecated features. To proceed, there should be no deprecation warnings during
    the build.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在升级到主要版本时，应确保检查相关插件和加载程序的个别迁移说明，特别是通过作者提供的副本。在这种情况下，在构建过程中注意弃用警告。您可以通过这种方式调用Webpack来获取弃用警告的堆栈跟踪，以找出哪些插件和加载程序负责。Webpack
    5将删除所有已弃用的功能。要继续，构建过程中不应出现弃用警告。
- en: Make sure you are using entry point information from stats. If you are using
    `HtmlWebpackPlugin`, you won't need to follow this step.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保从统计数据中使用入口点信息。如果使用`HtmlWebpackPlugin`，则无需执行此步骤。
- en: For builds that include static HTML or the creation thereof in some other way,
    you must ensure the use of entry points for the stats JSON file to generate any
    script and link any HTML tags. If this isn't possible, you should avoid setting
    the `splitChunks.chunks` key to `all` and putting any setting against the `splitChunks.maxSize`
    key. However, this is merely a workaround and can be considered less than ideal
    as a solution.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含静态HTML或以其他方式创建静态HTML的构建，您必须确保使用入口点来生成任何脚本和链接任何HTML标签的统计JSON文件。如果不可能，您应该避免将`splitChunks.chunks`键设置为`all`，并且不要针对`splitChunks.maxSize`键设置任何设置。然而，这只是一个变通方法，可以被认为不是理想的解决方案。
- en: Be sure to set the mode to either `production` or `development` to make sure
    that corresponding mode defaults are set.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将模式设置为`production`或`development`，以确保设置相应模式的默认值。
- en: 'Also, be sure to update the following options to their newer version if you
    are using them at all:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，如果您使用了以下选项，请确保将它们更新为更新版本：
- en: '[PRE40]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, we will need to test Webpack 5''s compatibility with your application.
    To do this, set the following options for your Webpack 4 configuration. If this
    works in Webpack 4 without any build errors, we will know whether any successive
    faults are unique to version 5\. This may sound tedious, but it eliminates recursive
    fault-finding:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要测试Webpack 5与您的应用程序的兼容性。为此，请为您的Webpack 4配置设置以下选项。如果在Webpack 4中没有任何构建错误，我们将知道任何后续故障是否是版本5独有的。这可能听起来很繁琐，但它可以消除递归故障查找：
- en: '[PRE41]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The preceding options are removed from the configuration in Webpack 5 and are
    set to `false` by default. Be sure to do this in your Webpack 4 test build, but
    they will need removing again in your version 5 build.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack 5中，上述选项已从配置中删除，并默认设置为`false`。确保在Webpack 4测试构建中执行此操作，但在版本5构建中需要再次删除。
- en: 'Next is a simple and shorthand command-line execution to upgrade your Webpack
    version:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是一个简单和简洁的命令行执行，用于升级您的Webpack版本：
- en: '[PRE42]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now, we need to clean up our configuration.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要清理我们的配置。
- en: It is advised that you change the `[hash]` placeholder in your configuration
    to `[contenthash]`. This has been proven to be more effective and can help to
    shore up your code.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您将配置中的`[hash]`占位符更改为`[contenthash]`。这已被证明更有效，并且可以帮助加固您的代码。
- en: If you happen to be using `pnp-webpack-plugin`, it is now supported by default
    in version 5 of Webpack but it will now need to be removed from your configuration
    schema.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用`pnp-webpack-plugin`，它现在默认支持Webpack的版本5，但现在需要从配置模式中删除。
- en: '`IgnorePlugin` now takes an option object, so it will need to be rewritten
    if you are using it as a regular expression, such as in the following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`IgnorePlugin`现在接受一个选项对象，因此如果您将其用作正则表达式，则需要进行重写，例如以下内容：'
- en: '[PRE43]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For developers using WASM via `import`, you should enable the deprecated specification
    by setting the `experiments.syncWebAssembly` variable to `true`. This will set
    the same behavior in Webpack 5 as in Webpack 4. Once you have migrated to Webpack
    5, you should now change the value of the experiment to use the latest specifications
    for WASM—`{ asyncWebAssembly: true, importAsync: true }`.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '对于通过`import`使用WASM的开发人员，您应该通过将`experiments.syncWebAssembly`变量设置为`true`来启用已弃用的规范。这将在Webpack
    5中设置与Webpack 4相同的行为。一旦您已经迁移到Webpack 5，现在应该更改实验的值以使用WASM的最新规范——`{ asyncWebAssembly:
    true, importAsync: true }`。'
- en: You should also take care when using a custom configuration to replace the `name`
    value with `idHint`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用自定义配置时，还应注意将`name`值替换为`idHint`。
- en: In Webpack 5, named exports from JSON modules are not supported and you will
    get a warning. To import anything this way, you should do so from `package.json`
    with `const[version]=package;`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack 5中，不支持从JSON模块中导出命名的导出，并且会收到警告。要以这种方式导入任何内容，应该从`package.json`中使用`const[version]=package;`。
- en: It is now good practice to clean up the build code. Part of this means closing
    the compiler when using `const compiler =webpack(...);`. This is done with `compiler.close();`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，清理构建代码是一个好的做法。其中一部分是在使用`const compiler =webpack(...);`时关闭编译器。这可以通过`compiler.close();`来完成。
- en: Once you run a build, there may be a few issues that develop. For instance,
    the schema validation could fail, the Webpack could exit with an error, or there
    could be build errors, build warnings, or deprecation warnings.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行构建，可能会出现一些问题。例如，模式验证可能会失败，Webpack可能会退出并显示错误，或者可能会出现构建错误、构建警告或弃用警告。
- en: In each case, there will be either a breaking change note or an error message
    with instructions available through the command line, as usual.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，都会有一个破坏性变更说明或一个带有指令的错误消息，可以通过命令行获得，就像往常一样。
- en: In the case of deprecation warnings, there may be a lot of them for the time
    being as Webpack 5 is new and plugins need time to catch up with core changes.
    They should be ignored until each release is out of beta testing as a matter of
    good practice.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在弃用警告的情况下，可能会有很多弃用警告，因为Webpack 5是新的，插件需要时间来适应核心变化。在每个版本完成测试之前，应该忽略它们，这是一个良好的做法。
- en: You can hide deprecation warnings by running the node with the `--no-deprecation`
    flag—for example, `node --no-deprecation`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用`--no-deprecation`标志来隐藏弃用警告，例如`node --no-deprecation`。
- en: Plugin and loader contributors should follow the warning advice in the deprecation
    messages to improve their code.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 插件和加载器的贡献者应该遵循弃用消息中的警告建议来改进他们的代码。
- en: 'You may also want to turn off the ES2015 syntax in the runtime code, if necessary.
    By default, Webpack''s runtime code uses ES2015 syntax to build smaller bundles.
    If your build targets environments that don''t support this syntax, such as with
    IE 11, you will need to set `output.ecmaVersion: 5` to revert to ES5 syntax.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '如果需要，您还可以关闭运行时代码中的ES2015语法。默认情况下，Webpack的运行时代码使用ES2015语法来构建更小的包。如果您的构建目标环境不支持此语法，例如IE
    11，您需要将`output.ecmaVersion: 5`设置为恢复到ES5语法。'
- en: Dealing with legacy issues will be the biggest hurdle when migrating upwards
    and this rule is not exclusive to Webpack 5\. Webpack 5 has some features that
    will make the experience of the legacy platform user more palatable. One method
    to consider in your project planning is persistent caching.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 处理遗留问题将是向上迁移时面临的最大障碍，这一规则不仅适用于Webpack 5。Webpack 5具有一些功能，将使遗留平台用户的体验更加愉快。在项目规划中考虑的一种方法是持久缓存。
- en: Enabling persistent caching
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用持久缓存
- en: Caching is, of course, the intermediate storage of data to improve loading times
    and speed up performance. Persistent caching is something that is very common
    in database-driven projects, where the data pulled from the database is cached
    so the user has a copy of earlier versions. This can then be loaded all at once
    without causing too much demand from the database as data will be delivered at
    a slower rate than server-based file entries.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存当然是为了提高加载时间和加快性能而进行的数据的中间存储。持久缓存在数据库驱动项目中非常常见，从数据库中提取的数据会被缓存，以便用户拥有早期版本的副本。然后可以一次性加载，而不会对数据库造成太大的需求，因为数据的交付速度比基于服务器的文件条目要慢。
- en: With Webpack 5, an application can utilize the same operation and improve the
    speed of loading for the user if the build changes.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Webpack 5，应用程序可以利用相同的操作并提高用户的加载速度，如果构建发生变化。
- en: First, note that persistent caching is not enabled by default. You have to opt
    in to using it. This is because Webpack 5 favors safety over performance. It is
    probably not the best idea to enable features that improve performance by even
    a small amount but break your code in any small way. At least as a default, this
    feature should remain disabled.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要注意的是，持久缓存不是默认启用的。您必须选择使用它。这是因为Webpack 5更看重安全性而不是性能。启用即使提高了性能但会以任何小的方式破坏您的代码，这可能不是最好的主意。至少作为默认，此功能应保持禁用状态。
- en: Serialization and deserialization would work by default; however, the developer
    may have trouble with cache invalidation.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化和反序列化将默认工作；但是，开发人员可能会在缓存失效方面遇到麻烦。
- en: Cache invalidation is when something changes in your application intentionally,
    such as when the developer changes the contents of a file; in this case, Webpack
    would regard the caching of the old content as invalid.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存失效是指应用程序中有意更改时，例如开发人员更改文件的内容；在这种情况下，Webpack会将旧内容的缓存视为无效。
- en: Webpack 5 does this by tracking `fileDependencies`, `contextDependencies`, and
    `missingDependencies` for each module used. Webpack then creates a filesystem
    schematic from this. The filesystem is then cross-referenced against the recorded
    copy and this, in turn, triggers a rebuild of that module.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 5通过跟踪每个模块使用的`fileDependencies`、`contextDependencies`和`missingDependencies`来实现这一点。然后，Webpack从中创建一个文件系统图。然后，文件系统与记录的副本进行交叉引用，这反过来会触发该模块的重建。
- en: The cache entry of the output bundle then has a tag generated for it; this is
    essentially a hash of all contributors. A match between the tag and the cache
    entry indicates content that can be used by Webpack for bundling.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输出包的缓存条目会为其生成一个标签；这本质上是所有贡献者的哈希。标签与缓存条目之间的匹配表示Webpack可以用于打包的内容。
- en: Webpack 4 used this same process for in-memory caching and it will work in Webpack
    5 without extra configuration unless persistent caching is enabled.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 4使用相同的过程进行内存缓存，而在Webpack 5中也可以工作，无需额外配置，除非启用了持久缓存。
- en: You also need to invalidate cache entries when you upgrade a loader or plugin
    with `npm`, change a configuration, or change a file that is to be read in the
    configuration, or when upgrading a dependency that is used in the configuration,
    when passing difference command-line arguments to run a build, or when you have
    a custom build script and make changes to it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在升级加载器或插件时使用`npm`，更改配置，更改要在配置中读取的文件，或者升级配置中使用的依赖项时，通过传递不同的命令行参数来运行构建，或者拥有自定义构建脚本并对其进行更改时，使缓存条目失效。
- en: As Webpack 5 cannot handle these exceptions out of the box, persistent caching
    is made an opt-in feature for safety in regards to securing the integrity of your
    application.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Webpack 5无法直接处理这些异常，因此持久缓存被作为一种选择性功能，以确保应用程序的完整性。
- en: Updating Webpack
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack更新
- en: 'There are numerous steps that must be taken to ensure the update of Webpack
    behaves correctly. The steps that concern our example are as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多步骤必须采取，以确保Webpack的更新行为正确。与我们的示例相关的步骤如下：
- en: Upgrade and install.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级和安装。
- en: Add the modes to your configuration files.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模式添加到配置文件中。
- en: Add fork checkers.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加fork检查器。
- en: Manually update relevant plugins, loaders, and utilities.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动更新相关插件、加载器和实用程序。
- en: Reconfigure `uglify`.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新配置`uglify`。
- en: Trace any further errors and make the update.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪任何进一步的错误并进行更新。
- en: 'Let''s go over each step in detail and explore what exactly is going on with
    the command line. It should help you to understand the procedure a lot better:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解每个步骤，并探索命令行中到底发生了什么。这应该有助于您更好地理解该过程：
- en: 'The first thing we need to do is upgrade Webpack and install `webpack-cli`.
    This is done in the command line, as follows:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是升级Webpack并安装`webpack-cli`。这是在命令行中完成的，如下所示：
- en: '[PRE44]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The preceding example shows how this is done using `yarn`; it will also give
    a version check. This should also be visible in the `package.json` file:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的示例显示了使用`yarn`来完成这个操作，并且还会进行版本检查。这也应该在`package.json`文件中可见：
- en: '[PRE45]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Once this is done, the respective modes should be added to `webpack.config.dev.js` and `webpack.config.prod.js`.
    See the following `webpack.config.dev.js` file:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，应该将相应的模式添加到`webpack.config.dev.js`和`webpack.config.prod.js`。参见以下`webpack.config.dev.js`文件：
- en: '[PRE46]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'A similar thing is done with the production configuration, as we have two configuration
    files here for each mode. The following shows the contents of the `webpack.config.prod.js` file:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 与生产配置一样，我们在这里为每种模式都有两个配置文件。以下显示了`webpack.config.prod.js`文件的内容：
- en: '[PRE47]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We are dealing with two versions—the older version (3) and the newer version
    (4). If this was done manually, you might first make a **fork** of the original
    version. The term fork refers to the icon usually associated with this operation,
    which represents one line splitting away from the other to appear as a two-pronged
    fork. So, the term fork has come to mean a subversion. Fork checkers will automatically
    check each version for differences that need to be updated as part of the operation.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在处理两个版本——旧版本（3）和新版本（4）。如果这是手动完成的，您可能首先要对原始版本进行**fork**。fork一词指的是通常与此操作相关的图标，它代表一行从另一行分离出来，看起来像一个叉子。因此，fork一词已经成为一个分支的意思。fork检查器将自动检查每个版本的差异，以便作为操作的一部分进行更新。
- en: 'Now, go back to the command line to add the following fork checkers:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到命令行添加以下fork检查器：
- en: '[PRE48]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following should be seen in the `package.json` file:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件中应该看到以下内容：'
- en: '[PRE49]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The preceding code block shows that the fork checker has been installed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块显示了fork检查器已经安装。
- en: 'Now, we need to update `html-webpack-plugin` with the command line:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要使用命令行更新`html-webpack-plugin`：
- en: '[PRE50]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`package.json` should now show the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`现在应该显示如下内容：'
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Now, we need to adjust the plugin order in the `webpack.config.dev.js` and `webpack.config.prod.js` files.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要调整`webpack.config.dev.js`和`webpack.config.prod.js`文件中的插件顺序。
- en: 'You should take these steps to ensure that `HtmlWebpackPlugin` comes before **`InterpolateHtmlPlugin`** and `InterpolateHtmlPlugin` are
    declared, as in the following example:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该采取这些步骤来确保`HtmlWebpackPlugin`在**`InterpolateHtmlPlugin`**之前声明，并且`InterpolateHtmlPlugin`在下面的示例中被声明：
- en: '[PRE52]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Also, be sure to update `ts-loader`, `url-loader`, and `file-loader` in the
    command line:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要确保在命令行中更新`ts-loader`、`url-loader`和`file-loader`：
- en: '[PRE53]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The `package.json` file holds information on the versions used, in terms of
    the previously mentioned loaders, and should look as in the following:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`package.json`文件保存了关于使用的版本的信息，就像之前提到的加载器一样，并且应该如下所示：'
- en: '[PRE54]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If you''re using **React**, then you will need to update the development utilities,
    as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用**React**，那么您需要更新开发实用程序，如下所示：
- en: '[PRE55]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Again, the `package.json` file will hold the version information for the React utility
    in use:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`package.json`文件将保存所使用的React实用程序的版本信息：
- en: '[PRE56]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '`extract-text-webpack-plugin` should be substituted with **`mini-css-extract-plugin`. **'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract-text-webpack-plugin`应该被替换为**`mini-css-extract-plugin`。**'
- en: 'Take note that `extract-text-webpack-plugin` should be removed altogether while
    adding and configuring `mini-css-extract-plugin`:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，应该完全删除`extract-text-webpack-plugin`，同时添加和配置`mini-css-extract-plugin`：
- en: '[PRE57]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The `package.json` file with version settings for the plugin should look as
    in the following for this example:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此示例，`package.json`文件中带有插件版本设置应该如下所示：
- en: '[PRE58]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'With all this done, we should then take a look at the production mode configurations.
    This is done with the following `webpack.config.prod.js` file:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有这些后，我们应该看一下生产模式的配置。这是通过以下`webpack.config.prod.js`文件完成的：
- en: '[PRE59]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We can see some differences in `webpack.config.prod.js` between versions. The
    preceding gives you a look at the format for configuration when in version 4.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在不同版本之间的`webpack.config.prod.js`中有一些差异。前面的示例让你了解了在版本4中进行配置的格式。
- en: 'Next, be sure to update and reconfigure `uglifyjs-webpack-plugin` using the
    command line and the `package.json` file:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，请确保使用命令行和`package.json`文件更新和重新配置`uglifyjs-webpack-plugin`：
- en: '[PRE60]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the interests of prudence, we will also show the version settings for the
    `uglify` plugin here. Apply these using `package.json`:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了谨慎起见，我们还将展示此处`uglify`插件的版本设置。使用`package.json`应用这些设置：
- en: '[PRE61]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The next and final step is the configuration for production mode using `webpack.config.prod.js`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步，最后一步是使用`webpack.config.prod.js`配置生产模式：
- en: '[PRE62]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Once this is all done, you should be done with the updating process. However,
    you may get a unique deprecation error, which means you will need to trace these
    errors using the error message then update any further Webpack plugins as required.
    This will especially be the case if you are working with custom plugins or loaders.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，您应该完成更新过程。但是，您可能会遇到一个独特的弃用错误，这意味着您需要使用错误消息跟踪这些错误，然后根据需要更新任何进一步的Webpack插件。如果您正在使用自定义插件或加载器，情况将尤其如此。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter took a deep look into code debugging and we discussed HMR and other
    debugging techniques. You should now have a firm grasp of what tools and utilities
    can be used to enhance debugging procedures, including the use of `node nightly`
    to perform code inspections. We then delved into HMR, a salient and exciting feature
    of Webpack. We saw how live edits can be made of modules and style sheets, and
    even covered issues with migration. We then segued into adding utilities, which
    is an essential part of any upgrade. From there, we took you through version migration—namely,
    from version 3 to version 4—and the steps to follow to do so. Furthermore, we
    showed you how to migrate from version 4 to version 5\. This section concluded
    with a lengthy tutorial on updating a command-line upgrade to a manual alteration
    of some of the trickier elements.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了代码调试，并讨论了HMR和其他调试技术。您现在应该对可以用于增强调试过程的工具和实用程序有了牢固的掌握，包括使用`node nightly`进行代码检查。然后我们深入研究了HMR，这是Webpack的一个显著和令人兴奋的特性。我们看到了如何对模块和样式表进行实时编辑，甚至涵盖了迁移问题。然后我们过渡到添加实用程序，这是任何升级的重要部分。从那里，我们带您完成了版本迁移，即从版本3迁移到版本4，并介绍了相应的步骤。此外，我们还向您展示了如何从版本4迁移到版本5。本节以一个漫长的教程结束，介绍了如何将命令行升级更新为对一些更棘手的元素进行手动更改。
- en: You should now be confident in your debugging and upgrading skills, which puts
    you on solid ground for the next chapter. In the next chapter, we will get into
    some heavy live coding, customization, and manual bundling, which will excite
    the pants off you, no doubt!
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该对自己的调试和升级技能充满信心，这将使您在下一章中站稳脚跟。在下一章中，我们将进行一些繁重的现场编码、定制和手动捆绑，这无疑会让您兴奋不已！
- en: Further reading
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'This chapter covered some complex issues that could be better understood through
    further reading. The following is a list of subjects and where to find the corresponding
    content alluded to earlier in this chapter, where relevant:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了一些复杂问题，通过进一步阅读可以更好地理解。以下是一些主题以及在本章中提到的相关内容的查找位置：
- en: Debugging optimization bailouts
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试优化退出
- en: Issue 6074—add support for more complex selectors for `sideEffects`
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题 6074—为`sideEffects`添加对更复杂选择器的支持
- en: Questions
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Now, try your hand at some of the following questions related to this chapter.
    You will find the answers in the *Assessment* section in the back matter of this
    book:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试一下与本章相关的以下问题。您将在本书的*评估*部分中找到答案：
- en: What does HMR stand for?
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HMR是什么意思？
- en: What does React Hot Loader do?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React Hot Loader是做什么的？
- en: What interface is Webpack updated through?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Webpack通过哪个接口进行更新？
- en: What feature of Node v6.3.0+ allows debugging via Chrome DevTools?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node v6.3.0+的哪个功能允许通过Chrome DevTools进行调试？
- en: When migrating from Webpack version 3 to version 4 and using a custom loader
    to transform `.json` files, what must you also change?
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Webpack版本3迁移到版本4并使用自定义加载器转换`.json`文件时，您还必须改变什么？
- en: How can a side effects list help development?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: side effects列表如何帮助开发？
- en: Where should deprecated plugins be removed from in production mode?
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生产模式中应该从哪里删除不推荐使用的插件？
