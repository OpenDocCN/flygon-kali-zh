["```kt\n    target=android-20\n    renderscript.target=20\n    renderscript.support.mode=true\n    sdk.buildtools=20\n\n    ```", "```kt\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <LinearLayout\n\n          a:layout_width=\"fill_parent\" a:layout_height=\"fill_parent\"\n          a:layout_weight=\"1\" a:orientation=\"vertical\" >\n          <LinearLayout \n            a:orientation=\"horizontal\"\n            a:layout_width=\"fill_parent\" a:layout_height=\"wrap_content\" >\n            <SeekBar a:id=\"@+id/radiusBar\" a:max=\"250\"\n              a:layout_gravity=\"center_vertical\"\n              a:layout_width=\"128dp\" a:layout_height=\"wrap_content\" />\n            <Button a:id=\"@+id/blurButton\" a:text=\"Blur\"\n              a:layout_width=\"wrap_content\" a:layout_height=\"wrap_content\"/>\n          </LinearLayout>\n          <LinearLayout \n            a:baselineAligned=\"true\" a:orientation=\"horizontal\"\n            a:layout_width=\"fill_parent\" a:layout_height=\"fill_parent\" >\n            <ImageView\n              a:id=\"@+id/srcImageView\" a:layout_weight=\"1\"\n              a:layout_width=\"fill_parent\" a:layout_height=\"fill_parent\" />\n            <ImageView\n              a:id=\"@+id/dstImageView\" a:layout_weight=\"1\"\n              a:layout_width=\"fill_parent\" a:layout_height=\"fill_parent\" />\n          </LinearLayout>\n        </LinearLayout>\n        ```", "```kt\n    package com.packtpub.renderscript;\n    ...\n    public class RenderScriptActivity extends Activity\n    implements OnClickListener {\n        static {\n\n            System.loadLibrary(\"renderscript\");\n        }\n\n        private Button mBlurButton;\n        private SeekBar mBlurRadiusBar, mThresholdBar;\n        private ImageView mSrcImageView, mDstImageView;\n        private Bitmap mSrcImage, mDstImage;\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_renderscript);\n\n            BitmapFactory.Options options = new BitmapFactory.Options();\n            options.inPreferredConfig = Bitmap.Config.ARGB_8888;\n            mSrcImage = BitmapFactory.decodeResource(getResources(),\n                                            R.drawable.picture, options);\n            mDstImage = Bitmap.createBitmap(mSrcImage.getWidth(),\n                                            mSrcImage.getHeight(),\n                                            Bitmap.Config.ARGB_8888);\n\n            mBlurButton = (Button) findViewById(R.id.blurButton);\n            mBlurButton.setOnClickListener(this);\n\n            mBlurRadiusBar = (SeekBar) findViewById(R.id.radiusBar);\n\n            mSrcImageView = (ImageView) findViewById(R.id.srcImageView);\n            mDstImageView = (ImageView) findViewById(R.id.dstImageView);\n            mSrcImageView.setImageBitmap(mSrcImage);\n            mDstImageView.setImageBitmap(mDstImage);\n        }\n    ...\n    ```", "```kt\n    ...\n        private native void blur(String pCacheDir, Bitmap pSrcImage,\n                                 Bitmap pDstImage, float pRadius);\n\n        @Override\n        public void onClick(View pView) {\n            float progressRadius = (float) mBlurRadiusBar.getProgress();\n            float radius = Math.max(progressRadius * 0.1f, 0.1f);\n\n            switch(pView.getId()) {\n            case R.id.blurButton:\n                blur(getCacheDir().toString(), mSrcImage, mDstImage,\n                     radius);\n                break;\n            }\n            mDstImageView.invalidate();\n        }\n    }\n    ```", "```kt\n        #include <android/bitmap.h>\n        #include <jni.h>\n        #include <RenderScript.h>\n\n        using namespace android::RSC;\n        ...\n        ```", "```kt\n    ...\n    void lockBitmap(JNIEnv* pEnv, jobject pImage,\n            AndroidBitmapInfo* pInfo, uint32_t** pContent) {\n        if (AndroidBitmap_getInfo(pEnv, pImage, pInfo) < 0) abort();\n        if (pInfo->format != ANDROID_BITMAP_FORMAT_RGBA_8888) abort();\n        if (AndroidBitmap_lockPixels(pEnv, pImage,\n                (void**)pContent) < 0) abort();\n    }\n\n    void unlockBitmap(JNIEnv* pEnv, jobject pImage) {\n        if (AndroidBitmap_unlockPixels(pEnv, pImage) < 0) abort();\n    }\n    ...\n    ```", "```kt\n    ...\n    extern \"C\" {\n\n    JNIEXPORT void JNICALL\n    Java_com_packtpub_renderscript_RenderScriptActivity_blur\n    (JNIEnv* pEnv, jobject pClass, jstring pCacheDir, jobject pSrcImage,\n            jobject pDstImage, jfloat pRadius) {\n        const char * cacheDir = pEnv->GetStringUTFChars(pCacheDir, NULL);\n        sp<RS> rs = new RS();\n        rs->init(cacheDir);\n        pEnv->ReleaseStringUTFChars(pCacheDir, cacheDir);\n    ...\n    ```", "```kt\n    ...\n        AndroidBitmapInfo srcInfo; uint32_t* srcContent;\n        AndroidBitmapInfo dstInfo; uint32_t* dstContent;\n        lockBitmap(pEnv, pSrcImage, &srcInfo, &srcContent);\n        lockBitmap(pEnv, pDstImage, &dstInfo, &dstContent);\n    ...\n    ```", "```kt\n    ...\n        sp<const Type> srcType = Type::create(rs, Element::RGBA_8888(rs),\n                srcInfo.width, srcInfo.height, 0);\n        sp<Allocation> srcAlloc = Allocation::createTyped(rs, srcType,\n                RS_ALLOCATION_MIPMAP_NONE,\n                RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n                srcContent);\n\n        sp<const Type> dstType = Type::create(rs, Element::RGBA_8888(rs),\n                dstInfo.width, dstInfo.height, 0);\n        sp<Allocation> dstAlloc = Allocation::createTyped(rs, dstType,\n                RS_ALLOCATION_MIPMAP_NONE,\n                RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n                dstContent);\n    ...\n    ```", "```kt\n    ...\n        sp<ScriptIntrinsicBlur> blurIntrinsic =\n                ScriptIntrinsicBlur::create(rs, Element::RGBA_8888(rs));\n        blurIntrinsic->setRadius(pRadius);\n\n        blurIntrinsic->setInput(srcAlloc);\n        blurIntrinsic->forEach(dstAlloc);\n        dstAlloc->copy2DRangeTo(0, 0, dstInfo.width, dstInfo.height,\n                dstContent);\n    ...\n    ```", "```kt\n    ...\n        unlockBitmap(pEnv, pSrcImage);\n        unlockBitmap(pEnv, pDstImage);\n    }\n    }\n    ```", "```kt\n    APP_PLATFORM := android-19\n    APP_ABI := armeabi-v7a x86\n    APP_STL := stlport_static\n    ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n\n    include $(CLEAR_VARS)\n\n    LOCAL_MODULE    := renderscript\n    LOCAL_C_INCLUDES += $(TARGET_C_INCLUDES)/rs/cpp \\\n                        $(TARGET_C_INCLUDES)/rs\n    LOCAL_SRC_FILES := RenderScript.cpp\n    LOCAL_LDFLAGS += -L$(call host-path,$(TARGET_C_INCLUDES)/../lib/rs)\n    LOCAL_LDLIBS    := -ljnigraphics -ldl -llog -lRScpp_static\n\n    include $(BUILD_SHARED_LIBRARY)\n    ```", "```kt\n...\ninclude $(CLEAR_VARS)\nLOCAL_MODULE := RSSupport\nLOCAL_SRC_FILES := $(SYSROOT_LINK)/usr/lib/rs/lib$(LOCAL_MODULE)$(TARGET_ SONAME_EXTENSION)\ninclude $(PREBUILT_SHARED_LIBRARY)\n```", "```kt\nScriptIntrinsicBlend\n```", "```kt\nScriptIntrinsicBlur\n```", "```kt\nScriptIntrinsicColorMatrix\n```", "```kt\nScriptIntrinsicConvolve3x3\n```", "```kt\nScriptIntrinsicConvolve5x5\n```", "```kt\nScriptIntrinsicHistogram\n```", "```kt\nScriptIntrinsicLUT\n```", "```kt\nScriptIntrinsicResize\n```", "```kt\nScriptIntrinsicYuvToRGB\n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout\n\n      a:layout_width=\"fill_parent\" a:layout_height=\"fill_parent\"\n      a:layout_weight=\"1\" a:orientation=\"vertical\" >\n      <LinearLayout \n        a:orientation=\"horizontal\"\n        a:layout_width=\"fill_parent\" a:layout_height=\"wrap_content\" >\n        ...\n        <SeekBar a:id=\"@+id/thresholdBar\" a:max=\"100\"\n     a:layout_gravity=\"center_vertical\"\n     a:layout_width=\"128dp\" a:layout_height=\"wrap_content\" />\n     <Button a:id=\"@+id/thresholdButton\" a:text=\"Threshold\"\n     a:layout_width=\"wrap_content\" a:layout_height=\"wrap_content\"/>\n      </LinearLayout>\n      <LinearLayout \n        a:baselineAligned=\"true\" a:orientation=\"horizontal\"\n        a:layout_width=\"fill_parent\" a:layout_height=\"fill_parent\" >\n        ...\n      </LinearLayout>\n    </LinearLayout>\n    ```", "```kt\n    ...\n    public class RenderScriptActivity extends Activity\n    implements OnClickListener {\n        ...\n\n        private Button mBlurButton, mThresholdButton;\n        private SeekBar mBlurRadiusBar, mThresholdBar;\n        private ImageView mSrcImageView, mDstImageView;\n        private Bitmap mSrcImage, mDstImage;\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            ...\n\n            mBlurButton = (Button) findViewById(R.id.blurButton);\n            mBlurButton.setOnClickListener(this);\n            mThresholdButton = (Button)findViewById(R.id.thresholdButton);\n     mThresholdButton.setOnClickListener(this);\n\n            mBlurRadiusBar = (SeekBar) findViewById(R.id.radiusBar);\n            mThresholdBar = (SeekBar) findViewById(R.id.thresholdBar);\n\n            ...\n        }\n\n        @Override\n        public void onClick(View pView) {\n            float progressRadius = (float) mBlurRadiusBar.getProgress();\n            float radius = Math.max(progressRadius * 0.1f, 0.1f);\n            float threshold = ((float) mThresholdBar.getProgress())\n                            / 100.0f;\n\n            switch(pView.getId()) {\n            ...\n\n            case R.id.thresholdButton:\n                threshold(getCacheDir().toString(), mSrcImage, mDstImage,\n                          threshold);\n                break;\n            }\n            mDstImageView.invalidate();\n        }\n        ...\n\n        private native void threshold(String pCacheDir, Bitmap pSrcImage,\n                                      Bitmap pDstImage, float pThreshold);\n    }\n    ```", "```kt\n        #pragma version(1)\n        #pragma rs java_package_name(com.packtpub.renderscript)\n        ...\n        ```", "```kt\n        ...\n        float thresholdValue;\n        static const float3 BLACK = { 0.0, 0.0, 0.0 };\n        static const float3 LUMINANCE_VECTOR = { 0.2125, 0.7154, 0.0721 };\n        ...\n        ```", "```kt\n        ...\n        uchar4 __attribute__((kernel)) threshold(uchar4 in) {\n            float4 pixel = rsUnpackColor8888(in);\n            float luminance = dot(LUMINANCE_VECTOR, pixel.rgb);\n            if (luminance < thresholdValue) {\n                pixel.rgb = BLACK;\n            }\n            return rsPackColorTo8888(pixel);\n        }\n        ```", "```kt\n    LOCAL_PATH := $(call my-dir)\n\n    include $(CLEAR_VARS)\n\n    LOCAL_MODULE    := renderscript\n    LOCAL_C_INCLUDES += $(TARGET_C_INCLUDES)/rs/cpp \\\n                        $(TARGET_C_INCLUDES)/rs \\\n                        $(TARGET_OBJS)/$(LOCAL_MODULE)\n    LOCAL_SRC_FILES := RenderScript.cpp threshold.rs\n    LOCAL_LDFLAGS += -L$(call host-path,$(TARGET_C_INCLUDES)/../lib/rs)\n    LOCAL_LDLIBS    := -ljnigraphics -ldl -llog -lRScpp_static\n\n    include $(BUILD_SHARED_LIBRARY)\n    ```", "```kt\n    #include <android/bitmap.h>\n    #include <jni.h>\n    #include <RenderScript.h>\n    #include \"ScriptC_threshold.h\"\n\n    using namespace android::RSC;\n\n    ...\n    ```", "```kt\n    ...\n    JNIEXPORT void JNICALL\n    Java_com_packtpub_renderscript_RenderScriptActivity_threshold\n    (JNIEnv* pEnv, jobject pClass, jstring pCacheDir, jobject pSrcImage,\n            jobject pDstImage, jfloat pThreshold) {\n        const char * cacheDir = pEnv->GetStringUTFChars(pCacheDir, NULL);\n        sp<RS> rs = new RS();\n        rs->init(cacheDir);\n        pEnv->ReleaseStringUTFChars(pCacheDir, cacheDir);\n\n        AndroidBitmapInfo srcInfo;\n        uint32_t* srcContent;\n        AndroidBitmapInfo dstInfo;\n        uint32_t* dstContent;\n        lockBitmap(pEnv, pSrcImage, &srcInfo, &srcContent);\n        lockBitmap(pEnv, pDstImage, &dstInfo, &dstContent);\n\n        sp<const Type> srcType = Type::create(rs, Element::RGBA_8888(rs),\n                srcInfo.width, srcInfo.height, 0);\n        sp<Allocation> srcAlloc = Allocation::createTyped(rs, srcType,\n                RS_ALLOCATION_MIPMAP_NONE,\n                RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n                srcContent);\n\n        sp<const Type> dstType = Type::create(rs, Element::RGBA_8888(rs),\n                dstInfo.width, dstInfo.height, 0);\n        sp<Allocation> dstAlloc = Allocation::createTyped(rs, dstType,\n                RS_ALLOCATION_MIPMAP_NONE,\n                RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n                dstContent);\n\n        sp<ScriptC_threshold> thresholdKernel = new ScriptC_threshold(rs);\n     thresholdKernel->set_thresholdValue(pThreshold);\n\n        thresholdKernel->forEach_threshold(srcAlloc, dstAlloc);\n        dstAlloc->copy2DRangeTo(0, 0, dstInfo.width, dstInfo.height,\n                dstContent);\n\n        unlockBitmap(pEnv, pSrcImage);\n        unlockBitmap(pEnv, pDstImage);\n    }\n    }\n    ```", "```kt\nfloat thresholdValue;\n```", "```kt\nstatic const float3 LUMINANCE_VECTOR = { 0.2125, 0.7154, 0.0721 };\n```", "```kt\nuchar4 __attribute__((kernel)) threshold(uchar4 in) {\n   ...\n}\n```", "```kt\nuchar4 __attribute__((kernel)) threshold(uchar4 in, uint32_t x, uint32_t y) {\n   ...\n}\n```", "```kt\nvoid forEach_threshold(android::RSC::sp<const android::RSC::Allocation> ain, android::RSC::sp<const android::RSC::Allocation> aout);\n```", "```kt\nvoid root(const uchar4 *in, uchar4 *out) {\n    float4 pixel = rsUnpackColor8888(*in);\n    float luminance = dot(LUMINANCE_VECTOR, pixel.rgb);\n    if (luminance < thresholdValue) {\n        pixel.rgb = BLACK;\n    }\n    *out = rsPackColorTo8888(pixel);\n```", "```kt\nvoid init() {\n    ...\n}\n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout\n\n      a:layout_width=\"fill_parent\" a:layout_height=\"fill_parent\"\n      a:layout_weight=\"1\" a:orientation=\"vertical\" >\n      <LinearLayout \n        a:orientation=\"horizontal\"\n        a:layout_width=\"fill_parent\" a:layout_height=\"wrap_content\" >\n        ...\n        <Button a:\"d=\"@+id/thresholdBut\"on\" a:te\"t=\"Thresh\"ld\"\n          a:layout_wid\"h=\"wrap_cont\"nt\" a:layout_heig\"t=\"wrap_cont\"nt\"/>\n        <Button a:\"d=\"@+id/combineBut\"on\" a:te\"t=\"Comb\"ne\"\n          a:layout_wid\"h=\"wrap_cont\"nt\" a:layout_heig\"t=\"wrap_cont\"nt\"/>\n      </LinearLayout>\n      <LinearLayout \n        a:baselineAlign\"d=\"t\"ue\" a:orientati\"n=\"horizon\"al\"\n        a:layout_wid\"h=\"fill_par\"nt\" a:layout_heig\"t=\"fill_par\"nt\" >\n        ...\n      </LinearLayout>\n    </LinearLayout>\n    ```", "```kt\n    ...\n    public class RenderScriptActivity extends Activity\n    implements OnClickListener {\n        ...\n\n        private Button mThresholdButton, mBlurButton, mCombineButton;\n        private SeekBar mBlurRadiusBar, mThresholdBar;\n        private ImageView mSrcImageView, mDstImageView;\n        private Bitmap mSrcImage, mDstImage;\n\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            ...\n\n            mBlurButton = (Button) findViewById(R.id.blurButton);\n            mBlurButton.setOnClickListener(this);\n            mThresholdButton = (Button) findViewById(R.id.thresholdButton);\n            mThresholdButton.setOnClickListener(this);\n            mCombineButton = (Button)findViewById(R.id.combineButton);\n            mCombineButton.setOnClickListener(this);\n\n            ...\n        }\n\n        @Override\n        public void onClick(View pView) {\n            float progressRadius = (float) mBlurRadiusBar.getProgress();\n            float radius = Math.max(progressRadius * 0.1f, 0.1f);\n            float threshold = ((float) mThresholdBar.getProgress())\n                            / 100.0f;\n\n            switch(pView.getId()) {\n            case R.id.blurButton:\n                blur(getCacheDir().toString(), mSrcImage, mDstImage,\n                     radius);\n                break;\n\n            case R.id.thresholdButton:\n                threshold(getCacheDir().toString(), mSrcImage, mDstImage,\n                          threshold);\n                break;\n\n            case R.id.combineButton:\n                combine(getCacheDir().toString(), mSrcImage, mDstImage,\n                        radius, threshold);\n                break;\n            }\n            mDstImageView.invalidate();\n        }\n        ...\n\n        private native void combine(String pCacheDir,\n                                    Bitmap pSrcImage, Bitmap pDstImage,\n                                    float pRadius, float pThreshold);\n    }\n    ```", "```kt\n        ...\n        JNIEXPORT void JNICALL\n        Java_com_packtpub_renderscript_RenderScriptActivity_combine\n        (JNIEnv* pEnv, jobject pClass, jstring pCacheDir, jobject pSrcImage,\n                jobject pDstImage, jfloat pRadius, jfloat pThreshold) {\n            const char * cacheDir = pEnv->GetStringUTFChars(pCacheDir, NULL);\n            sp<RS> rs = new RS();\n            rs->init(cacheDir);\n            pEnv->ReleaseStringUTFChars(pCacheDir, cacheDir);\n\n            AndroidBitmapInfo srcInfo; uint32_t* srcContent;\n            AndroidBitmapInfo dstInfo; uint32_t* dstContent;\n            lockBitmap(pEnv, pSrcImage, &srcInfo, &srcContent);\n            lockBitmap(pEnv, pDstImage, &dstInfo, &dstContent);\n\n            sp<const Type> srcType = Type::create(rs, Element::RGBA_8888(rs),\n                    srcInfo.width, srcInfo.height, 0);\n            sp<Allocation> srcAlloc = Allocation::createTyped(rs, srcType,\n                    RS_ALLOCATION_MIPMAP_NONE,\n                    RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n                    srcContent);\n\n            sp<const Type> dstType = Type::create(rs, Element::RGBA_8888(rs),\n                    dstInfo.width, dstInfo.height, 0);\n            sp<Allocation> dstAlloc = Allocation::createTyped(rs, dstType,\n                    RS_ALLOCATION_MIPMAP_NONE,\n                    RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n                    dstContent);\n        ...\n        ```", "```kt\n    ...\n        sp<const Type> tmpType = Type::create(rs, Element::RGBA_8888(rs),\n                dstInfo.width, dstInfo.height, 0);tmpType->getX();\n        uint8_t* tmpBuffer = new uint8_t[tmpType->getX() *\n               tmpType->getY() * Element::RGBA_8888(rs)- >getSizeBytes()];\n        sp<Allocation> tmpAlloc = Allocation::createTyped(rs, tmpType,\n                RS_ALLOCATION_MIPMAP_NONE,\n                RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n                tmpBuffer);\n    ...\n    ```", "```kt\n        ...\n            sp<ScriptC_threshold> thresholdKernel = new ScriptC_threshold(rs);\n            sp<ScriptIntrinsicBlur> blurIntrinsic =\n                    ScriptIntrinsicBlur::create(rs, Element::RGBA_8888(rs));\n            blurIntrinsic->setRadius(pRadius);\n            sp<ScriptIntrinsicBlend> blendIntrinsic =\n                    ScriptIntrinsicBlend::create(rs, Element::RGBA_8888(rs));\n            thresholdKernel->set_thresholdValue(pThreshold);\n        ...\n        ```", "```kt\n        ...\n            thresholdKernel->forEach_threshold(srcAlloc, tmpAlloc);\n            blurIntrinsic->setInput(tmpAlloc);\n            blurIntrinsic->forEach(dstAlloc);\n            blendIntrinsic->forEachAdd(srcAlloc, dstAlloc);\n        ...\n        ```", "```kt\n    ...\n        dstAlloc->copy2DRangeTo(0, 0, dstInfo.width, dstInfo.height,\n                dstContent);\n\n        unlockBitmap(pEnv, pSrcImage);\n        unlockBitmap(pEnv, pDstImage);\n        delete[] tmpBuffer;\n\n    }\n    ...\n    ```", "```kt\n...\nsp<Allocation> srcAlloc = Allocation::createTyped(rs, srcType,\n        RS_ALLOCATION_MIPMAP_NONE,\n        RS_ALLOCATION_USAGE_SHARED | RS_ALLOCATION_USAGE_SCRIPT,\n        srcContent);\n...\n```", "```kt\n#pragma version(1)\n#pragma rs java_package_name(com.packtpub.renderscript)\n\nfloat thresholdValue;\nstatic const float3 BLACK = { 0.0, 0.0, 0.0 };\nstatic const float3 LUMINANCE_VECTOR = { 0.2125, 0.7154, 0.0721 };\n\nrs_allocation input;\nrs_allocation output;\n\nvoid threshold() {\n uint32_t sizeX = rsAllocationGetDimX(input);\n uint32_t sizeY = rsAllocationGetDimY(output);\n for (uint32_t x = 0; x < sizeX; ++x) {\n for (uint32_t y = 0; y < sizeY; ++y) {\n uchar4 rawPixel = rsGetElementAt_uchar4(input, x, y);\n\n            // The algorithm itself remains the same.\n            float4 pixel = rsUnpackColor8888(rawPixel);\n            float luminance = dot(LUMINANCE_VECTOR, pixel.rgb);\n            if (luminance < thresholdValue) {\n                pixel.rgb = BLACK;\n            }\n            rawPixel = rsPackColorTo8888(pixel);\n\n            rsSetElementAt_uchar4(output, rawPixel, x, y);\n        }\n    }\n}\n```", "```kt\n...\nthresholdKernel->set_input(srcAlloc);\nthresholdKernel->set_output(dstAlloc);\nthresholdKernel->invoke_threshold();\ndstAlloc->copy2DRangeTo(0, 0, dstInfo.width, dstInfo.height,\n        dstContent);\n...\n```"]