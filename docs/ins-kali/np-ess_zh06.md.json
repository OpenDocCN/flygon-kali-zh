["```py\n##### The Plotting Functions ####import matplotlib.pyplot as plt \nimport numpy as np \ndef show(ori_func, ft, sampling_period = 5): \n    n = len(ori_func) \n    interval = sampling_period / n \n    plt.subplot(2, 1, 1) \n    plt.plot(np.arange(0, sampling_period, interval), ori_func, 'black') \n    plt.xlabel('Time'), plt.ylabel('Amplitude') \n    plt.subplot(2,1,2) \n    frequency = np.arange(n / 2) / (n * interval) \n    nfft = abs(ft[range(int(n / 2))] / n ) \n    plt.plot(frequency, nfft, 'red') \n    plt.xlabel('Freq (Hz)'), plt.ylabel('Amp. Spectrum') \n    plt.show() \n\n```", "```py\nIn [1]: time = np.arange(0, 5, .005) \nIn [2]: x = np.sin(2 * np.pi * 1 * time) \nIn [3]: y = np.fft.fft(x) \nIn [4]: show(x, y) \n\n```", "```py\nIn [8]: x2 = np.sin(2 * np.pi * 20 * time) \nIn [9]: x3 = np.sin(2 * np.pi * 60 * time) \nIn [10]: x += x2 + x3 \nIn [11]: y = np.fft.fft(x) \nIn [12]: show(x, y) \n\n```", "```py\nIn [13]: x = np.zeros(len(time)) \nIn [14]: x[::20] = 1 \nIn [15]: y = np.fft.fft(x) \nIn [16]: show(x, y) \n\n```", "```py\nIn [17]: x = np.zeros(len(time)) \nIn [18]: x[380:400] = np.arange(0, 1, .05) \nIn [19]: x[400:420] = np.arange(1, 0, -.05) \nIn [20]: y = np.fft.fft(x) \nIn [21]: show(x, y) \n\n```", "```py\nIn [22]: x = np.random.random(100) \nIn [23]: y = np.fft.fft(x) \nIn [24]: show(x, y) \n\n```", "```py\nIn [25]: x = np.random.random(500) \nIn [26]: n = len(x) \nIn [27]: m = np.arange(n) \nIn [28]: k = m.reshape((n, 1)) \nIn [29]: M = np.exp(-2j * np.pi * k * m / n) \nIn [30]: y = np.dot(M, x) \n\n```", "```py\nIn [31]: np.allclose(y, np.fft.fft(x)) \nOut[31]: True \n\n```", "```py\nIn [32]: %timeit np.dot(np.exp(-2j * np.pi * np.arange(n).reshape((n, 1)) * np.arange(n) / n), x) \n10 loops, best of 3: 18.5 ms per loop \nIn [33]: %timeit np.fft.fft(x) \n100000 loops, best of 3: 10.9 \u00b5s per loop \n\n```", "```py\nIn [34]: M2 = np.exp(2j * np.pi * k * m / n) \nIn [35]: x2 = np.dot(y, M2) / n \n\n```", "```py\nIn [36]: np.allclose(x, x2) \nOut[36]: True \n\n```", "```py\nIn [37]: np.allclose(x, np.fft.ifft(y)) \nOut[37]: True \n\n```", "```py\nIn [38]: a = np.random.randint(10, size = 10) \nIn [39]: a \nOut[39]: array([7, 4, 9, 9, 6, 9, 2, 6, 8, 3]) \nIn [40]: a.mean() \nOut[40]: 6.2999999999999998 \nIn [41]: A = np.fft.fft(a) \nIn [42]: A \nOut[42]: \narray([ 63.00000000 +0.00000000e+00j,   \n        -2.19098301 -6.74315233e+00j, \n        -5.25328890 +4.02874005e+00j, \n        -3.30901699 -2.40414157e+00j, \n        13.75328890 -1.38757276e-01j,    \n      1.00000000 -2.44249065e-15j, \n        13.75328890 +1.38757276e-01j, \n     -3.30901699 +2.40414157e+00j, \n        -5.25328890 -4.02874005e+00j, \n     -2.19098301 +6.74315233e+00j]) \nIn [43]: A[0] / 10 \nOut[43]: (6.2999999999999998+0j) \nIn [44]: A[int(10 / 2)] \nOut[44]: (1-2.4424906541753444e-15j) \n\n```", "```py\nIn [45]: np.fft.fftshift(A) \nOut[45]: \narray([  1.00000000 -2.44249065e-15j,   \n     13.75328890 +1.38757276e-01j, \n        -3.30901699 +2.40414157e+00j, \n        -5.25328890 -4.02874005e+00j, \n        -2.19098301 +6.74315233e+00j, \n        63.00000000 +0.00000000e+00j, \n        -2.19098301 -6.74315233e+00j, \n     -5.25328890 +4.02874005e+00j, \n        -3.30901699 -2.40414157e+00j,   \n     13.75328890 -1.38757276e-01j]) \n\n```", "```py\nIn [46]: x = np.random.random(24) \nIn [47]: x.shape = 2,12 \nIn [48]: y2 = np.fft.fft2(x) \nIn [49]: x.shape = 1,2,12 \nIn [50]: y3 = np.fft.fftn(x, axes = (1, 2)) \n\n```", "```py\nIn [51]: np.allclose(y2, y3) \nOut[51]: True \n\n```", "```py\nIn [52]: from matplotlib import image \nIn [53]: img = image.imread('./scientist.png') \nIn [54]: gray_img = np.dot(img[:,:,:3], [.21, .72, .07]) \nIn [55]: gray_img.shape \nOut[55]: (317L, 661L) \nIn [56]: plt.imshow(gray_img, cmap = plt.get_cmap('gray')) \nOut[56]: <matplotlib.image.AxesImage at 0xa6165c0> \nIn [57]: plt.show() \n\n```", "```py\nIn [58]: fft = np.fft.fft2(gray_img) \nIn [59]: amp_spectrum = np.abs(fft) \nIn [60]: plt.imshow(np.log(amp_spectrum)) \nOut[60]: <matplotlib.image.AxesImage at 0xcdeff60> \nIn [61]: plt.show() \n\n```", "```py\nIn [62]: fft_shift = np.fft.fftshift(fft) \nIn [63]: plt.imshow(np.log(np.abs(fft_shift))) \nOut[63]: <matplotlib.image.AxesImage at 0xd201dd8> \nIn [64]: plt.show() \n\n```", "```py\nIn [65]: m, n = fft_shift.shape \nIn [66]: b = np.zeros((int(m / 2), n)) \nIn [67]: c = np.zeros((2 * m - 1, int(n / 2))) \nIn [68]: fft_shift = np.concatenate((b, fft_shift, b), axis = 0) \nIn [69]: fft_shift = np.concatenate((c, fft_shift, c), axis = 1) \nIn [70]: ifft = np.fft.ifft2(np.fft.ifftshift(fft_shift)) \nIn [71]: ifft.shape \nOut[71]: (633L, 1321L) \nIn [72]: ifft = np.real(ifft) \nIn [73]: plt.imshow(ifft, cmap = plt.get_cmap('gray')) \nOut[73]: <matplotlib.image.AxesImage at 0xf9a0f98> \nIn [74]: plt.show() \n\n```"]