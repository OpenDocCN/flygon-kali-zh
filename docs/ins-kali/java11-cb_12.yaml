- en: The Read-Evaluate-Print Loop (REPL) Using JShell
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JShell的读取-评估-打印循环（REPL）
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Getting familiar with REPL
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉REPL
- en: Navigating JShell and its commands
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航JShell及其命令
- en: Evaluating code snippets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估代码片段
- en: Object-oriented programming in JShell
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JShell中的面向对象编程
- en: Saving and restoring the JShell command history
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存和恢复JShell命令历史
- en: Using the JShell Java API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JShell Java API
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**REPL** stands for the **Read-Evaluate-Print Loop** and, as the name states,
    it reads the command entered on the command line, evaluates it, prints the result
    of evaluation, and continues this process on any command entered.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**REPL**代表**读取-评估-打印循环**，正如其名称所示，它读取在命令行上输入的命令，评估它，打印评估结果，并在输入任何命令时继续此过程。'
- en: All the major languages, such as Ruby, Scala, Python, JavaScript, and Groovy,
    have REPL tools. Java was missing the much-needed REPL. If we had to try out some
    sample code, say using `SimpleDateFormat` to parse a string, we had to write a
    complete program with all the ceremonies, including creating a class, adding a
    main method, and then the single line of code we want to experiment with. Then,
    we have to compile and run the code. These ceremonies make it harder to experiment
    and learn the features of the language.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要语言，如Ruby、Scala、Python、JavaScript和Groovy，都有REPL工具。Java一直缺少这个必不可少的REPL。如果我们要尝试一些示例代码，比如使用`SimpleDateFormat`解析字符串，我们必须编写一个包含所有仪式的完整程序，包括创建一个类，添加一个主方法，然后是我们想要进行实验的单行代码。然后，我们必须编译和运行代码。这些仪式使得实验和学习语言的特性变得更加困难。
- en: With a REPL, you can type only the line of code that you are interested in experimenting
    with and you will get immediate feedback on whether the expression is syntactically
    correct and gives the desired results. REPL is a very powerful tool, especially
    for people coming to the language for the first time. Suppose you want to show
    how to print *Hello World* in Java; for this, you'd have to start writing the
    class definition, then the `public static void main(String [] args)` method, and
    by the end of it, you would have explained or tried to explain a lot of concepts
    that would otherwise be difficult for a newbie to comprehend.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用REPL，您只需输入您感兴趣的代码行，并且您将立即得到有关表达式是否在语法上正确并且是否给出所需结果的反馈。REPL是一个非常强大的工具，特别适合初次接触该语言的人。假设您想展示如何在Java中打印*Hello
    World*；为此，您必须开始编写类定义，然后是`public static void main(String [] args)`方法，最后您将解释或尝试解释许多概念，否则对于新手来说将很难理解。
- en: Anyways, with Java 9 and onward, Java developers can now stop whining about
    the absence of a REPL tool. A new REPL, called JShell, is being bundled with the
    JDK installation. So, we can now proudly write *Hello World* as our first *Hello
    World* code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，从Java 9开始，Java开发人员现在可以停止抱怨缺少REPL工具。一个名为JShell的新的REPL被捆绑到了JDK安装中。因此，我们现在可以自豪地将*Hello
    World*作为我们的第一个*Hello World*代码。
- en: In this chapter, we will explore the features of JShell and write code that
    will truly amaze us and appreciate the power of REPL. We will also see how we
    can create our own REPLs using the JShell Java API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索JShell的特性，并编写代码，这些代码将真正使我们惊叹并欣赏REPL的力量。我们还将看到如何使用JShell Java API创建我们自己的REPL。
- en: Getting familiar with REPL
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉REPL
- en: In this recipe, we will look at a few basic operations to help us get familiar
    with the JShell tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看一些基本操作，以帮助我们熟悉JShell工具。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest JDK version installed, which has JShell. JShell
    is available from JDK 9 onward.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您安装了最新的JDK版本，其中包含JShell。JShell从JDK 9开始可用。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: You should have `%JAVA_HOME%/bin` (on Windows) or `$JAVA_HOME/bin` (on Linux)
    added to your `PATH` variable. If not, please visit the *Installing JDK 18.9 on
    Windows and setting up the PATH variable* and *Installing JDK 18.9 on Linux (Ubuntu,
    x64) and configuring the PATH variable* recipes in [Chapter 1](4dbea9e1-3ed8-4fcc-8e46-8a12457e3434.xhtml),
    *Installation and a Sneak Peek into Java 11*.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该将`%JAVA_HOME%/bin`（在Windows上）或`$JAVA_HOME/bin`（在Linux上）添加到您的`PATH`变量中。如果没有，请访问[第1章](4dbea9e1-3ed8-4fcc-8e46-8a12457e3434.xhtml)中的*在Windows上安装JDK
    18.9并设置PATH变量*和*在Linux（Ubuntu，x64）上安装JDK 18.9并配置PATH变量*这两个配方。
- en: On the command line, type `jshell` and press *Enter*.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上，输入`jshell`并按*Enter*。
- en: 'You will see a message and then a `jshell>` prompt:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一条消息，然后是一个`jshell>`提示：
- en: '![](img/e2b2e440-013a-437a-b2fe-0667e558a108.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2b2e440-013a-437a-b2fe-0667e558a108.png)'
- en: 'Forward slash(`/`)**,** followed by the JShell-supported commands, help you
    in interacting with JShell. Just like we try `/help intro` to get the following:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 斜杠(`/`)，后跟JShell支持的命令，可帮助您与JShell进行交互。就像我们尝试`/help intro`以获得以下内容：
- en: '![](img/5c77960d-77a3-4adc-b739-afbe540bc99c.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c77960d-77a3-4adc-b739-afbe540bc99c.png)'
- en: 'Let''s print a `Hello World` message:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打印一个`Hello World`消息：
- en: '![](img/91029a86-a887-453e-b956-f2970368704a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91029a86-a887-453e-b956-f2970368704a.png)'
- en: 'Let''s print a customized `Hello World` message:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打印一个自定义的`Hello World`消息：
- en: '![](img/446baf78-c749-42d9-9e80-b174d6a0168f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/446baf78-c749-42d9-9e80-b174d6a0168f.png)'
- en: You can navigate through the executed commands using the up and down arrow keys.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用上下箭头键浏览执行的命令。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The code snippets entered at the `jshell` prompt are wrapped with just enough
    code to execute them. So, variable, method, and class declarations get wrapped
    within a class, and expressions get wrapped within a method which is in turn wrapped
    within the class. Other things, such as imports and class definitions, remain
    as they are because they are top-level entities, that is, wrapping a class definition
    within another class is not required as a class definition is a top-level entity
    that can exist by itself. Similarly, in Java, import statements can occur by themselves
    and they occur outside of a class declaration and hence need not be wrapped inside
    a class.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`jshell`提示符中输入的代码片段被包装在足够的代码中以执行它们。因此，变量、方法和类声明被包装在一个类中，表达式被包装在一个方法中，该方法又被包装在一个类中。其他东西，如导入和类定义，保持原样，因为它们是顶级实体，即在另一个类定义中包装一个类定义是不需要的，因为类定义是一个可以独立存在的顶级实体。同样，在Java中，导入语句可以单独出现，它们出现在类声明之外，因此不需要被包装在一个类中。
- en: In the subsequent recipes, we will see how to define a method, import additional
    packages, and define classes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将看到如何定义一个方法，导入其他包，并定义类。
- en: In the preceding recipe, we saw `$1 ==> "Hello World"`. If we have some value
    without any variable associated with it, `jshell` gives it a variable name, such
    as `$1` or `$2`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们看到了`$1 ==> "Hello World"`。如果我们有一些值没有与之关联的变量，`jshell`会给它一个变量名，如`$1`或`$2`。
- en: Navigating JShell and its commands
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航JShell及其命令
- en: In order to leverage a tool, we need to be familiar with how to use it, the
    commands it provides, and the various shortcut keys that we can use to be productive.
    In this recipe, we will look at the different ways we can navigate through JShell
    and also at the different keyboard shortcuts it provides to be productive while
    using it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用工具，我们需要熟悉如何使用它，它提供的命令以及我们可以使用的各种快捷键，以提高生产力。在这个示例中，我们将看看我们可以通过JShell导航的不同方式，以及它提供的不同键盘快捷键，以便在使用它时提高生产力。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Spawn JShell by typing `jshell` on the command line. You will be greeted with
    a welcome message that contains the instructions to get started.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在命令行上键入`jshell`来生成`JShell`。您将收到一个欢迎消息，其中包含开始的说明。
- en: 'Type `/help intro` to get a brief introduction to JShell:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`/help intro`以获得关于JShell的简要介绍：
- en: '![](img/b70a0a34-b052-4ee7-913d-280051978691.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b70a0a34-b052-4ee7-913d-280051978691.png)'
- en: 'Type `/help` to get a list of the supported commands:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`/help`以获取支持的命令列表：
- en: '![](img/eaef19b9-06dc-4b27-a94f-e613306bf0cc.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaef19b9-06dc-4b27-a94f-e613306bf0cc.png)'
- en: 'To get more information about a command, type `/help <command>`. For example,
    to get information about `/edit`, type `/help /edit`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取有关命令的更多信息，请键入`/help <command>`。例如，要获取有关`/edit`的信息，请键入`/help /edit`：
- en: '![](img/9b27e73d-2cc1-4d0d-b575-201dfd8ad866.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b27e73d-2cc1-4d0d-b575-201dfd8ad866.png)'
- en: 'There is autocompletion support in JShell. This makes Java developers feel
    at home. You can invoke auto-completion using the *Tab* key:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JShell中有自动补全支持。这使得Java开发人员感到宾至如归。您可以使用*Tab*键来调用自动补全：
- en: '![](img/be642668-7b04-4b58-89a2-2377e5816a36.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be642668-7b04-4b58-89a2-2377e5816a36.png)'
- en: You can use `/!` to execute a previously executed command, and `/line_number`
    to re-execute an expression at the line number.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`/!`来执行先前执行的命令，使用`/line_number`在行号重新执行表达式。
- en: To navigate the cursor through the command line, use *Ctrl* + *A* to reach the
    beginning of the line and *Ctrl* + *E* to reach the end of the line.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过命令行导航光标，使用*Ctrl* + *A*到达行的开头，使用*Ctrl* + *E*到达行的结尾。
- en: Evaluating code snippets
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估代码片段
- en: 'In this recipe, we will look at executing the following code snippets:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到执行以下代码片段：
- en: Import statements
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入语句
- en: Class declarations
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类声明
- en: Interface declarations
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口声明
- en: Method declarations
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法声明
- en: Field declarations
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段声明
- en: Statements
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语句
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the command line and launch JShell.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行并启动JShell。
- en: 'By default, JShell imports a few libraries. We can check that by issuing the `/imports`
    command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，JShell导入了一些库。我们可以通过发出`/imports`命令来检查：
- en: '![](img/53d40193-23d2-4d38-9add-d41744f823a0.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53d40193-23d2-4d38-9add-d41744f823a0.png)'
- en: Let's import `java.text.SimpleDateForm` by issuing the `import java.text.SimpleDateFormat`
    command. This imports the `SimpleDateFormat` class.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过发出`import java.text.SimpleDateFormat`命令来导入`java.text.SimpleDateForm`。这将导入`SimpleDateFormat`类。
- en: 'Let''s declare an `Employee` class. We will issue one statement in each line
    so that it''s an incomplete statement, and we''ll proceed in the same way as we
    do in any ordinary editor. The following illustration will clarify this:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们声明一个`Employee`类。我们将每行发出一个语句，以便它是一个不完整的语句，并且我们将以与任何普通编辑器相同的方式进行。下面的插图将澄清这一点：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will get the following output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '![](img/f1891d8e-b111-4e17-8bfe-6507c85e19c3.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1891d8e-b111-4e17-8bfe-6507c85e19c3.png)'
- en: 'Let''s declare an `Employability` interface, which defines a method, `employable()`,
    as shown in the following code snippet:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们声明一个`Employability`接口，它定义了一个名为`employable()`的方法，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding interface, when created via `jshell`, is shown in the following
    screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`jshell`创建的前面的接口如下截图所示：
- en: '![](img/c9c87021-e754-422a-ae41-94d6894e703c.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9c87021-e754-422a-ae41-94d6894e703c.png)'
- en: 'Let''s declare a `newEmployee(String empId)` method, which constructs an `Employee`
    object with the given `empId`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们声明一个`newEmployee(String empId)`方法，它用给定的`empId`构造一个`Employee`对象：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding method defined in JShell is shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: JShell中定义的前面的方法如下所示：
- en: '![](img/9bd0dddc-3b37-433a-ad81-33da5acb6c52.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bd0dddc-3b37-433a-ad81-33da5acb6c52.png)'
- en: 'We will use the method defined in the previous step to create a statement that
    declares an `Employee` variable:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用前一步中定义的方法来创建一个声明`Employee`变量的语句：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/8b923e7a-b343-4711-8557-b54d6aab68fe.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b923e7a-b343-4711-8557-b54d6aab68fe.png)'
- en: There's more...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can invoke an undefined method. Take a look at the following example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调用一个未定义的方法。看一下下面的例子：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The image below shows the definition of `newMethod()` invoking `undefinedMethod()`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图片显示了`newMethod()`调用`undefinedMethod()`的定义：
- en: '![](img/5a00c521-41c3-4a74-9c11-8cd8eb7e0b36.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a00c521-41c3-4a74-9c11-8cd8eb7e0b36.png)'
- en: 'However, the method cannot be invoked before the method being used has been
    defined:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在使用方法之前，不能调用该方法：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The below image shows the method `undefinedMethod()` being defined and then
    `newMethod()` can be successfully invoked:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图片显示了定义`undefinedMethod()`，然后可以成功调用`newMethod()`：
- en: '![](img/98ba3d0a-baba-47c9-aa22-c64fdbe1fde4.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98ba3d0a-baba-47c9-aa22-c64fdbe1fde4.png)'
- en: We can invoke `newMethod()` only after we have defined `undefinedMethod()`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在我们定义了`undefinedMethod()`之后才能调用`newMethod()`。
- en: Object-oriented programming in JShell
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JShell中的面向对象编程
- en: In this recipe, we will make use of predefined Java class definition files and
    import them into JShell. Then, we will play around with those classes in JShell.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用预定义的Java类定义文件并将它们导入到JShell中。然后，我们将在JShell中使用这些类。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: The class definition files we will use in this recipe are available in `Chapter12/4_oo_programming`,
    in the code downloads for this book.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在这个示例中使用的类定义文件在本书的代码下载中的`Chapter12/4_oo_programming`中可用。
- en: 'There are three class definition files: `Engine.java`, `Dimensions.java`, and
    `Car.java`.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有三个类定义文件：`Engine.java`，`Dimensions.java`和`Car.java`。
- en: Navigate to the directory where these three class definition files are available.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这三个类定义文件可用的目录。
- en: The `/open` command allows us to load the code from within a file.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/open`命令允许我们从文件中加载代码。'
- en: 'Load the `Engine` class definition and create an `Engine` object:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`Engine`类定义并创建一个`Engine`对象：
- en: '![](img/7b878742-330f-4cb5-aef2-7b8394a76bb2.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b878742-330f-4cb5-aef2-7b8394a76bb2.png)'
- en: 'Load the `Dimensions` class definition and create a `Dimensions` object:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`Dimensions`类定义并创建一个`Dimensions`对象：
- en: '![](img/4998d93c-85f2-4174-abe9-fbf9719054a0.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4998d93c-85f2-4174-abe9-fbf9719054a0.png)'
- en: 'Load the `Car` class definition and create a `Car` object:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`Car`类定义并创建一个`Car`对象：
- en: '![](img/d0ee5237-e262-4cd5-82f3-fa32cba224f5.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0ee5237-e262-4cd5-82f3-fa32cba224f5.png)'
- en: Saving and restoring the JShell command history
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和恢复JShell命令历史
- en: We will want to try out some code snippets in `jshell` as a means to explain
    Java programming to someone who is new to it. Moreover, some form of record of
    what code snippets were executed will be useful for the person who is learning
    the language.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试在`jshell`中执行一些代码片段，作为向新手解释Java编程的手段。此外，记录执行的代码片段的形式对于正在学习语言的人将是有用的。
- en: In this recipe, we will execute a few code snippets and save them into a file.
    We will then load the code snippets from the saved file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将执行一些代码片段并将它们保存到一个文件中。然后我们将从保存的文件中加载代码片段。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s execute a series of code snippets, as follows:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们执行一系列的代码片段，如下所示：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will get the following output:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '![](img/3a9285e5-04ba-4e58-b76f-f9a75bf7c4a1.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a9285e5-04ba-4e58-b76f-f9a75bf7c4a1.png)'
- en: Save the code snippets executed into a file called `history` using the `/save
    history` command.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`/save history`命令将执行的代码片段保存到名为`history`的文件中。
- en: Exit the shell using `/exit` and list the files in the directory by using `dir`
    or `ls`, depending on the OS. There will be a `history` file in the listing.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`dir`或`ls`退出shell，并列出目录中的文件，具体取决于操作系统。列表中将会有一个`history`文件。
- en: Open `jshell` and check for the history of code snippets executed using `/list`.
    You will see that there are no code snippets executed.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`jshell`并使用`/list`检查执行的代码片段的历史记录。您会看到没有执行任何代码片段。
- en: 'Load the `history` file using `/open history` and then check for the history
    of the code snippets executed using `/list`. You will see all the previous code
    snippets being executed and added to the history:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`/open history`加载`history`文件，然后使用`/list`检查执行的代码片段的历史记录。您将看到所有先前执行的代码片段被执行并添加到历史记录中：
- en: '![](img/47ce2ead-0eb4-4a84-8a94-0b4c07917ad0.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47ce2ead-0eb4-4a84-8a94-0b4c07917ad0.png)'
- en: Using the JShell Java API
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JShell Java API
- en: JDK 11 provides the Java API for creating tools such as `jshell` for evaluating
    Java code snippets. This Java API is present in the `jdk.jshell` module ([http://cr.openjdk.java.net/~rfield/arch/doc/jdk/jshell/package-summary.html](http://cr.openjdk.java.net/~rfield/arch/doc/jdk/jshell/package-summary.html)).
    So, if you want to use the API in your application, you need to declare a dependency
    on the `jdk.jshell` module.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 11提供了用于评估Java代码片段的工具（如`jshell`）的Java API。这个Java API存在于`jdk.jshell`模块中（[http://cr.openjdk.java.net/~rfield/arch/doc/jdk/jshell/package-summary.html](http://cr.openjdk.java.net/~rfield/arch/doc/jdk/jshell/package-summary.html)）。因此，如果您想在应用程序中使用API，您需要声明对`jdk.jshell`模块的依赖。
- en: In this recipe, we will use the JShell JDK API to evaluate simple code snippets,
    and you'll also see different APIs to get the state of JShell. The idea is not
    to recreate JShell but to show how to make use of its JDK API.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用JShell JDK API来评估简单的代码片段，并且您还将看到不同的API来获取JShell的状态。这个想法不是重新创建JShell，而是展示如何使用其JDK
    API。
- en: For this recipe, we will not be using JShell; instead, we will follow the usual
    way of compiling using `javac` and running using `java`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将不使用JShell；相反，我们将按照通常的方式使用`javac`进行编译，并使用`java`进行运行。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Our module will depend on the `jdk.jshell` module. So, the module definition
    will look like the following:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的模块将依赖于`jdk.jshell`模块。因此，模块定义将如下所示：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create an instance of the `jdk.jshell.JShell` class by using its `create()`
    method or the builder API in `jdk.jshell.JShell.Builder`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`jdk.jshell.JShell`类的`create()`方法或`jdk.jshell.JShell.Builder`中的构建器API创建一个实例：
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Read the code snippet from `System.in` using `java.util.Scanner`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`java.util.Scanner`从`System.in`中读取代码片段：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the `jdk.jshell.JShell#eval(String snippet)` method to evaluate the input.
    The evaluation will result in a list of `jdk.jshell.SnippetEvent`, which contains
    the status and output of the evaluation. The `TODO` in the preceding code snippet
    will be replaced by the following lines:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`jdk.jshell.JShell#eval(String snippet)`方法来评估输入。评估将导致`jdk.jshell.SnippetEvent`的列表，其中包含评估的状态和输出。上述代码片段中的`TODO`将被以下行替换：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When the evaluation is completed, we will print the snippets processed by using
    the `jdk.jshell.JShell.snippets()` method, which will return `Stream` of `Snippet`
    processed.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当评估完成时，我们将使用`jdk.jshell.JShell.snippets()`方法打印处理的代码片段，该方法将返回已处理的`Snippet`的`Stream`。
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Similarly, we can print the active method and variables, as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，我们可以打印活动方法和变量，如下所示：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Before the application exits, we close the `JShell` instance by invoking its
    `close()` method:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序退出之前，我们通过调用其`close()`方法关闭`JShell`实例：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The code for this recipe can be found in `Chapter12/6_jshell_api`. You can
    run the sample by using the `run.bat` or `run.sh` scripts available in the same
    directory. The sample execution and output are shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码可以在`Chapter12/6_jshell_api`中找到。您可以使用同一目录中提供的`run.bat`或`run.sh`脚本来运行示例。示例执行和输出如下所示：
- en: '![](img/47744154-6e86-4218-b780-966a546e8b13.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47744154-6e86-4218-b780-966a546e8b13.png)'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The code snippets passed to the `JShell` evaluation engine are categorized
    as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`JShell`评估引擎的代码片段被分类如下：
- en: '**Erroneous**: Syntactically incorrect input'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：语法错误的输入'
- en: '**Expressions**: An input that might or might not result in some output'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表达式**：可能会产生一些输出的输入'
- en: '**Import**: An import statement'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入**：导入语句'
- en: '**Method**: A method declaration'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**：方法声明'
- en: '**Statement**: A statement'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语句**：语句'
- en: '**Type declaration**: A type, that is, class/interface declaration'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型声明：类型，即类/接口声明
- en: '**Variable declaration**: A variable declaration'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量声明**：变量声明'
- en: All these categories are captured in the `jdk.jshell.Snippet.Kind` enum.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些类别都在`jdk.jshell.Snippet.Kind`枚举中捕获。
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
