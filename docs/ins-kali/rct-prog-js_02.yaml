- en: Chapter 2. Core JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。核心JavaScript
- en: 'JavaScript is a good and a bad language rolled into one. There are some truly
    awful parts to JavaScript and some excellent parts. Overall, JavaScript is a dynamic,
    loosely typed, interpreted scripting language. The approach to the language as
    a whole is to explore it with emphasis on *The Good Parts* as described by Douglas
    Crockford, because of how bad the bad parts of JavaScript are: they are truly
    minefields. Crockford has had a profound influence on how JavaScript is used now;
    enough that the blog post titled *AngularJS: The Bad Parts* instantly, clearly,
    and completely telegraphs what sort of things will be dissected in painful detail.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一个好坏参半的语言。JavaScript有一些真正糟糕的部分和一些优秀的部分。总的来说，JavaScript是一种动态的、弱类型的、解释性的脚本语言。对整个语言的处理是重点探索*好的部分*，正如Douglas
    Crockford所描述的那样，因为JavaScript的坏部分有多糟糕：它们确实是雷区。Crockford对JavaScript的现在的使用产生了深远的影响；足以让题为*AngularJS：坏部分*的博客文章立即、清楚、完全地传达了将会被痛苦细致地剖析的事物。
- en: 'Topics covered in this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: '**Strict mode**: Implicitly used in code including ECMAScript 6 modules'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**严格模式**：隐式用于包括ECMAScript 6模块的代码'
- en: '**Variables and assignment**: Some of the basic building blocks of programming
    in any language'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量和赋值**：任何语言中编程的基本构建块之一'
- en: '**Comments**: There are two styles; we focus on one in preference to the other
    due to the ease of producing unintended behavior by having comments really begin
    or end somewhere other than where the programmer intended'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释**：有两种风格；我们更偏向于一种，因为通过在程序员意图之外的地方开始或结束注释，很容易产生意外行为'
- en: '**Flow control**: A basic look at if-then, if-then-else, and switch statements'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流程控制**：基本的if-then、if-then-else和switch语句的简要介绍'
- en: '**A note on values and NaN**: Notes on truthiness and the toxic *not a number*
    value'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于值和NaN的注释**：关于真值和有毒的*非数字*值的注释'
- en: '**Functions**: Illustration of JavaScript functions, one of the best parts
    of the language'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：JavaScript函数的示例，是语言中最好的部分之一'
- en: '**A few brief notes on ECMAScript 6**: The first truly radical change in core
    JavaScript in years'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于ECMAScript 6的一些简要注释**：多年来核心JavaScript的第一个真正的根本性变化'
- en: The strict mode
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 严格模式
- en: '`"use strict";` as the first line of a file or function will cause certain
    things that can cause innumerable problems (such as assigning to a variable without
    declaring it) to cleanly error out with a line number called out, rather than
    leaving you to ferret out clues from any of a number of possible consequences.
    The `"use strict";` can also be the first line of a function, in which case the
    function is in strict mode.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “use strict”;作为文件或函数的第一行将导致某些可能引起无数问题的事情（例如在没有声明的情况下对变量进行赋值）以清晰的错误行号报告错误，而不是让您从可能的多种后果中去猜测线索。
    “use strict”;也可以是函数的第一行，在这种情况下，函数处于严格模式。
- en: Perl users will know about the `-w` flag, possibly the best-known flag associated
    with the language, and its successor, Perl's use warnings pragma. The documentation
    says things like, opening the list of known bugs, *The behavior implied by the
    use warnings is not mandatory*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Perl用户将了解“-w”标志，可能是与该语言相关的最著名的标志，以及它的后继者Perl的使用警告的惯例。文档中说了一些事情，比如，打开已知错误列表，“使用警告所暗示的行为不是强制性的”。
- en: JavaScript's strict mode by itself may or may not be on par with Perl's use
    warnings pragma, but it's at least something to make you get into the habit of
    using.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的严格模式本身可能与Perl的使用警告的惯例不相上下，但至少可以让您养成使用的习惯。
- en: Variables and assignment
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和赋值
- en: Variables should be declared with the `var` keyword. Any variable that is declared
    outside of a function, or any variable that is used without being declared, is
    a global variable, and global variables are a big problem; their place in *default
    JavaScript* is one of the major design flaws.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 变量应该使用`var`关键字声明。在函数外声明的任何变量，或者在没有声明的情况下使用的任何变量，都是全局变量，全局变量是一个大问题；它们在*默认JavaScript*中的位置是主要的设计缺陷之一。
- en: When there was a major public relations push for Java, JavaScript was named
    to run on Java's coattails, and certain decisions were made to make JavaScript
    code look like Java. These decisions were unfortunate. JavaScript is formally
    a C-like language and its most recent common ancestor with Java or C# is C, not
    C++ or Java. JavaScript has been described as being like Scheme in C's clothing.
    Lisp is a syntax associated with a family of languages including Scheme, Common
    Lisp, Clojure, and ClojureScript, and it is arguable that the increasingly functional
    emphasis in pursuit of the best JavaScript is from ClojureScript. In JavaScript,
    there are no separate integer and float types; numbers are 64-bit floating point
    values that behave like integers when used within a certain long range. However,
    they do sometimes give surprises to new programmers; for example, 0.1 + 0.2 does
    not equal 0.3, for historical reasons that also plague innumerable other languages.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当Java进行了一次重大的公共关系推动时，JavaScript被命名为在Java的影响下运行，并且做出了某些决定，使JavaScript代码看起来像Java。这些决定是不幸的。JavaScript在形式上是一种类似C的语言，它与Java或C#的最近共同祖先是C，而不是C++或Java。JavaScript被描述为穿着C的外衣的Scheme。Lisp是与包括Scheme、Common
    Lisp、Clojure和ClojureScript在内的一系列语言相关的语法，可以说，追求最佳JavaScript的日益功能性的重点来自ClojureScript。在JavaScript中，没有单独的整数和浮点类型；数字是64位浮点值，在一定的长范围内使用时表现得像整数。然而，它们有时会给新程序员带来惊喜；例如，0.1
    + 0.2并不等于0.3，出于历史原因，这也困扰着其他无数语言。
- en: 'Basic variable assignments can look C-like:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基本变量赋值看起来像C语言：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If a variable is declared without being assigned, as `x` in the preceding example,
    its value will be undefined.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量声明但未赋值，如前面示例中的`x`，其值将为undefined。
- en: 'The following are equivalent:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是等效的：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will avoid the use of the last of the three listed in the preceding example,
    as it is not considered one of The Good Parts. Douglas Crockford, in one of his
    videos, recounts a tale where he gave an hour long eloquent defense of the `++y`
    usage, and then had an interminable debugging session in which the subtleties
    of `++y` had bitten him. Unlike the first two options in the preceding example,
    one can assign a value to it, and `++y` and `y++` are not the same. Crockford
    then magnanimously backed down from his earlier position.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将避免在前面示例中列出的最后一个选项的使用，因为它不被认为是好的部分之一。道格拉斯·克罗克福德在其中的一个视频中讲述了一个故事，他在一个小时的辩护中对`++y`的使用进行了精彩的辩护，然后进行了一场漫长的调试会话，在这场调试会话中，`++y`的微妙之处已经咬了他一口。与前面示例中的前两个选项不同，可以为其分配一个值，并且`++y`和`y++`不相同。克罗克福德随后慷慨地放弃了他先前的立场。
- en: Comments
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: Most languages support comments in some form. Besides explanation of the code,
    they are also used to temporarily deactivate the code. JavaScript has the comments
    that would be expected of a language made to look like Java; however, Javadoc
    comments are not natively special (various solutions such as JSDoc have been made
    to fill the gap).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数语言都支持某种形式的注释。除了对代码的解释外，它们还用于临时停用代码。JavaScript具有与Java相似的语言所期望的注释；但是，Javadoc注释并不是本地特殊的（已经制定了各种解决方案，如JSDoc来填补这一空白）。
- en: 'JavaScript supports both classes of C++ comments. The first three lines contain
    only a comment and no executable code, the last line has a line of code and then
    a comment until the end of the line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持C++注释的两类。前三行只包含注释而没有可执行代码，最后一行有一行代码，然后一直到行尾都是注释：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will be avoiding the multiline comments. Asterisks and slashes occur often
    enough in regular expressions that multiline comments can be tripped up, and regular
    expressions may be required by a context or written by someone else in code that
    will still trip unintended effects. Inline comments, by their nature, are less
    vulnerable to surprise effects.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将避免多行注释。星号和斜杠在正则表达式中经常出现，多行注释可能会引起问题，并且可能需要上下文或由其他人编写的代码中仍然会引起意外效果。内联注释本质上不太容易受到意外效果的影响。
- en: Flow control
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程控制
- en: 'If-then and if-then-else works as described in the following example code,
    one of which does something if a number is nonzero, and the other of which takes
    one action if a number is nonzero and another if it is false. Both use truthiness
    in that 0 (and NaN) are falsy, while any other value is truthy:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果-然后和如果-然后-否则按照以下示例代码的描述工作，其中一个在数字非零时执行某些操作，另一个在数字非零时执行一个动作，如果为假则执行另一个动作。两者都使用了真值，其中0（和NaN）为假，而任何其他值为真：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A note on values and NaN
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于值和NaN的注释
- en: All values can be used in Boolean context and tested for truthiness. The values
    `undefined`, `null`, `''`, `0`, `[]`, `false`, and `NaN` (Not a Number) are `falsy`
    and all the other values are `truthy`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有值都可以在布尔上下文中使用并进行真值测试。值`undefined`、`null`、`''`、`0`、`[]`、`false`和`NaN`（不是数字）都是`假值`，所有其他值都是`真值`。
- en: '`NaN` in particular is a special case and it does not behave like other *real*
    numeric values. `NaN` is toxic; any calculation that includes `NaN` will give
    a result of `NaN`. Furthermore, although `NaN` is `falsy`, it does not equal anything,
    including `NaN` itself. The usual way of checking for `NaN` is via the `isNaN()`
    function. If you find `NaN` lurking somewhere unexpected, you might give debugging
    log statements for code, leading to where you detected `NaN`; there may be some
    distance between where `NaN` was first generated and where you observed it corrupting
    your results.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`特别是一个特殊情况，它的行为不像其他*真实*数值。`NaN`是有毒的；包含`NaN`的任何计算都将得到`NaN`的结果。此外，尽管`NaN`是`假值`，但它不等于任何东西，包括`NaN`本身。检查`NaN`的通常方法是通过`isNaN()`函数。如果您发现`NaN`潜伏在某个意想不到的地方，您可能会为代码提供调试日志语句，指导您检测到`NaN`的位置；在生成`NaN`的地方和观察到它破坏结果的地方之间可能存在一定的距离。'
- en: Functions
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: 'In a function, by default, control flows from the beginning to the end, and
    the function returns `undefined`. Optionally, there can be a return statement
    before the end, and the function will stop execution and return the value in question.
    The following example illustrates a function with a return:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数中，默认情况下，控制从开始到结束，函数返回`undefined`。可选地，在结束之前可以有一个返回语句，函数将停止执行并返回相应的值。以下示例说明了一个带有返回值的函数：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous function takes two parameters, although functions can be given
    (without an error or error message) fewer or more arguments than the declaration
    specifies. If they are declared to have values, those values will be present as
    local variables (in the preceding example, `first` and `second`). In any case,
    the arguments are also available in an array-like object called `arguments` which
    has a `.length` method (arrays have a `.length` method which is one greater than
    the highest position of an item), but not the rest of an array's features. Here
    we make a function that can take any arbitrary number of *Number arguments*, and
    returns their (arithmetical) average by using the `arguments` pseudo-array.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数接受两个参数，尽管函数可以给出（没有错误或错误消息）少于或多于声明指定的参数。如果它们被声明为具有值，这些值将作为局部变量存在（在前面的示例中，`first`和`second`）。无论如何，这些参数也可以在一个类似数组的对象`arguments`中使用，该对象具有`.length`方法（数组具有`.length`方法，比项的最高位置大1），但不具有数组的其他特性。在这里，我们创建一个函数，该函数可以接受任意数量的*数字参数*，并通过使用`arguments`伪数组返回它们的（算术）平均值。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Basic data types include number, string, Boolean, symbol, object, null, and
    undefined. Objects include function, array, date, and RegExp.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基本数据类型包括数字、字符串、布尔值、符号、对象、null和undefined。对象包括函数、数组、日期和正则表达式。
- en: The fact that the objects include the functions means that the functions are
    values and can be passed as values. This facilitates higher-order functions, or
    functions that take functions as values.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对象包括函数意味着函数是值，可以作为值传递。这有助于高阶函数，或者将函数作为值传递的函数。
- en: 'For an example of a higher-order function, we will include a `sort` function
    that sorts an array and optionally accepts a comparator. This builds on function
    definitions, actually containing a function definition within a function definition
    (which is perfectly legal as anywhere else), and then an implementation of QuickSort
    where values are divided into *compares as less than the first element*, *compares
    as equal to the first element*, and *compares as greater than the first element*,
    and the first and last of these three are recursively sorted. We check for nonempty
    length before sorting, in order to avoid infinite recursion. An implementation
    of the classic QuickSort algorithm, here implemented as a higher-level function,
    is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 作为高阶函数的一个例子，我们将包括一个 `sort` 函数，它对数组进行排序并可选择接受一个比较函数。这建立在函数定义上，实际上包含了一个函数定义在另一个函数定义中（这与其他任何地方一样合法），然后是一个
    QuickSort 的实现，其中值被分为 *比第一个元素小*、*等于第一个元素* 和 *比第一个元素大* 进行比较，并且这三个中的第一个和最后一个被递归排序。我们在排序之前检查非空长度，以避免无限递归。作为高级函数实现的经典
    QuickSort 算法如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Comments
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'There are several basic features and observations to note regarding this function,
    which is not intended to be pushing the envelope, but demonstrate how to cover
    standard bases well:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个关于这个函数的基本特性和观察需要注意，这并不是要突破界限，而是要展示如何很好地覆盖标准基础：
- en: 'We use `var sort = function()...` rather than the permitted `function sort()...`.
    When used within a function, this stores the function in a variable, rather than
    defining something globally. Note that it may be helpful in debugging to include
    a name for the function, `var sort = function sort()...` to access the function
    only through the variable, and let debuggers pick up on the second. For example:
    `sort` rather than referring to the function anonymously. Note that with `var
    sort = function()`, the variable declaration is hoisted, not the initialization;
    with `function sort()`, the function value is hoisted, available anywhere within
    the current scope.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用 `var sort = function()...` 而不是允许的 `function sort()...`。当在函数内部使用时，这将函数存储在一个变量中，而不是在全局定义某些东西。请注意，在调试时，为函数包括一个名称可能会有所帮助，`var
    sort = function sort()...`，只能通过变量访问函数，并让调试器捕捉到第二个。例如：`sort` 而不是匿名地引用函数。请注意，使用
    `var sort = function()`，变量声明被提升，而不是初始化；使用 `function sort()`，函数值被提升，在当前范围内任何地方都可用。
- en: 'This is a standard way of checking to see if only one of the two arguments
    has been specified, that is if an array has been provided without a sort function.
    If not, a default function is provided. We run a few trial runs of sorting:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一种标准的检查方式，用于查看两个参数中是否只有一个被指定，即是否提供了一个数组但没有提供排序函数。如果没有，将提供一个默认函数。我们运行了几次排序的试验：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This gives us:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This gives us an opportunity to debug. Now, let''s suppose we add the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一个调试的机会。现在，假设我们添加以下内容：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Before the declaration of result, we get:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果声明之前，我们得到：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output that says `Same: a,1,3,2,11,9` looks suspicious, a `Same` bucket
    should have identical values, so that an appropriate output might be `Same: 2,2,2`
    or just `Same: 3` where the `Same` list has five values, no two of which are alike.
    This can''t be the behavior we intended. It appears that the integers are being
    classified as the same as the initial "a", and the rest of it is being sorted.
    A little investigation confirms that ''`"a" < 1`'' and ''`"a" > 1`'' are both
    false, so our comparator could be improved.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '输出中说 `Same: a,1,3,2,11,9` 看起来可疑，一个 `Same` 桶应该有相同的值，因此一个合适的输出可能是 `Same: 2,2,2`
    或者只是 `Same: 3`，其中 `Same` 列表有五个值，没有两个是相同的。这不可能是我们想要的行为。看起来整数被分类为与初始的 "a" 相同，其余部分被排序。一点调查证实了
    ''`"a" < 1`'' 和 ''`"a" > 1`'' 都是假的，所以我们的比较器可以改进。'
- en: 'We make a dictionary order sort of their types. This is somewhat arbitrary
    to sort first on alphabetical order of type, and then on the default sort order
    within types defaults which could be overridden with another comparator. This
    is an example of another of the many kinds of comparators one might use to sort
    an array: this one, unlike the previous one, segments different kinds of items
    such as Numbers sorted in order, and will appear before Strings, sorted in order:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对它们的类型进行了字典排序。这在类型的字母顺序上进行了一些任意排序，然后按照类型默认的排序顺序进行排序，这可以用另一个比较函数覆盖。这是另一种可能用于对数组进行排序的许多种比较器中的一个例子：与前一个不同，这个比较器将不同种类的项目进行分段，例如按顺序排序的数字将出现在字符串之前，按顺序排序：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `typeof` function returns a string containing a description of a type; thus
    `typeof` can offer an extended type. With a comparator function similar to this,
    one can meaningfully compare objects such as records that hold a first name, a
    last name, and an address.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`typeof` 函数返回一个包含类型描述的字符串；因此 `typeof` 可以提供一个扩展类型。使用类似于这样的比较函数，可以有意义地比较诸如包含名字、姓氏和地址的记录之类的对象。'
- en: 'Objects can be declared via curly brace notation. Blocks of code and objects
    can both use curly braces, but these are two separate things. The following code
    with its braces, is not a block of code with statements to execute; it defines
    a dictionary with keys and values:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对象可以通过花括号表示法声明。代码块和对象都可以使用花括号，但这是两个不同的东西。下面的代码及其花括号，不是一个带有要执行的语句的代码块；它定义了一个具有键和值的字典：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Unless a key is a reserved word or contains a special character, as `'strange.key'`
    does (here a period), the quotation marks around a key are optional. JSON formatting,
    in order to have a simple and consistent rule, requires quotes in all cases, and
    specifically double quotes, not single.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除非键是保留字或包含特殊字符，如 `'strange.key'`（这里是一个句号），否则键周围的引号是可选的。为了有一个简单和一致的规则，JSON 格式要求在所有情况下都使用引号，特别是双引号，而不是单引号。
- en: 'An example of a record having a first name, a last name, and email address,
    perhaps populated via JSON, is shown next. This example is not JSON because it
    does not follow JSON''s rules about double quoting all keys and all strings, but
    it illustrates an array of records which could have other fields and could be
    much longer. It may make sense to sort by distance or seniority (with populated
    fields not shown here): there is a whole world of possible comparators one might
    use for records.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个记录具有名字、姓氏和电子邮件地址的示例，可能是通过JSON填充的。这个示例不是JSON，因为它没有遵循JSON关于双引号引用所有键和所有字符串的规则，但它说明了一个记录数组，其中可能有其他字段，可能会更长。按距离或资历排序可能是有意义的（这里没有显示填充字段）：可能有一整套可能用于记录的比较器。
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that a trailing comma is not merely inappropriate in JavaScript (after
    the last entry in almost anything separated by commas), but it has some strange
    and unexpected behavior which can be extremely hard to debug.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尾随逗号不仅在JavaScript中是不合适的（在几乎任何由逗号分隔的东西的最后一个条目之后），而且它有一些奇怪和意想不到的行为，这可能极其难以调试。
- en: 'JavaScript was designed to have semicolons at the end of a statement which
    may be optional. This is a debatable decision, and was tied to a decision to make
    a popular language that regular non-programmers could use without involving IT
    people, a factor also involved in the design of SQL. We should always supply semicolons
    when they are appropriate. One side effect of this is that `return` alone on a
    line will return undefined. This means that the following code will not have the
    desired effect and will return undefined:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript被设计为在语句的末尾有分号，这可能是可选的。这是一个有争议的决定，与决定制作一种流行的语言，普通非程序员可以在不涉及IT人员的情况下使用有关，这也是SQL设计中涉及的因素。当适当时，我们应该始终提供分号。这样做的一个副作用是，单独一行的`return`将返回undefined。这意味着以下代码将不会产生预期的效果，并且将返回undefined：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The effect as the code is executed is different from what it appears to be and
    probably what was intended, so it is advisable to not do it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行时的效果与它看起来的效果以及可能的意图不同，因此最好不要这样做。
- en: 'To get the desired effect, the open curly brace should be on the same line
    as the return statement, as shown next:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得期望的效果，开放的大括号应该与return语句在同一行，如下所示：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'However, JavaScript does have an object-oriented programming that avoids a
    classical difficulty in object-oriented programming: having to get the ontology
    right the first time. Objects are usually best constructed, not as instances of
    a class, but by factories. Or so Douglas Crockford has been abbreviated. Prototypes
    are still part of the language, like many features good and bad, but barring esoteric
    use cases objects should usually be made by factories that allow for a "better
    than ontology-driven classes" approach to object-oriented programming. We will
    be avoiding the pseudo-classical new `function()`, not because it can clobber
    global variables if you ever forget the new, but because its semblance of traditional
    object-oriented programming does not really help that much.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，JavaScript确实具有面向对象编程，避免了面向对象编程中的一个经典困难：必须第一次就正确地获取本体论。对象通常最好是通过工厂而不是类的实例来构造。或者道格拉斯·克罗克福德已经被缩写。原型仍然是语言的一部分，就像许多好的和坏的特性一样，但是除了涉及奇特的用例，对象通常应该由允许“比本体论驱动的类”更好的面向对象编程方法的工厂制造。我们将避免伪经典的新`function()`，不是因为如果你忘记了新的话它可能会破坏全局变量，而是因为它传统面向对象编程的外观并没有真正帮助太多。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You should be aware of a wide-respected convention in JavaScript that constructors
    intending to work with `new` begin with a capital letter. If a function name begins
    with a capital letter, it is intended to be used with the `new` keyword, and strange
    things may happen if it is invoked without the `new` keyword.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道JavaScript中一个广受尊敬的惯例，即打算与`new`一起使用的构造函数以大写字母开头。如果函数名以大写字母开头，那么它打算与`new`关键字一起使用，如果在没有`new`关键字的情况下调用，可能会发生奇怪的事情。
- en: In JavaScript, the interests served by classical object-oriented programming
    in some other languages are sometimes best advanced by functional programming.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，一些其他语言中经典面向对象编程所服务的利益有时最好通过函数式编程来推进。
- en: Loops
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环
- en: 'Loops include the `for` loop, the `for in` loop, the `while-do` loop, and the
    `do-while` loop. The `for` loop works as in C:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 循环包括`for`循环，`for in`循环，`while-do`循环和`do-while`循环。`for`循环的工作方式与C语言相同：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `for in` loop will loop over everything in an object. The `hasOwnProperty()`
    method can be used to examine only an object''s fields. The two variants, for
    an object named `obj`, are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`for in`循环将循环遍历对象中的所有内容。`hasOwnProperty()`方法可用于仅检查对象的字段。对于名为`obj`的对象，两个变体如下：'
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will include any fields from the prototype chain(not explained here).
    To check things that are direct properties of an object itself, and not potentially
    noisy data from a prototype chain, we use an object''s `hasOwnProperty()` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将包括原型链中的任何字段（此处未解释）。为了检查对象本身的直接属性，而不是原型链中潜在的嘈杂数据，我们使用对象的`hasOwnProperty()`方法：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Ordering is not guaranteed; if you are looking for any specific fields, it is
    worth considering to just iterate over the fields you want and check them on an
    object.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序不被保证；如果你正在寻找任何特定的字段，值得考虑的是只迭代你想要的字段并在对象上检查它们。
- en: Taking a look at ECMAScript 6
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看一下ECMAScript 6
- en: JavaScript tools have been booming, with one tool being eclipsed by another
    and an incredibly rich ecosystem that few developers can boast knowing both broadly
    and deeply. However, the core language, ECMAScript or JavaScript, has been stable
    for several years.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript工具一直在蓬勃发展，一个工具被另一个工具取代，有一个极其丰富的生态系统，很少有开发人员可以自豪地广泛和深入地了解。然而，核心语言ECMAScript或JavaScript已经稳定了好几年。
- en: ECMAScript 6, with one introductory roadmap available from [http://tinyurl.com/reactjs-ecmascript-6](http://tinyurl.com/reactjs-ecmascript-6),
    introduces profound new changes and expansions to the core language. As a rule,
    these features enhance, deepen, or make more consistent the functional aspects
    of JavaScript. It might be suggested that ECMAScript 6 features that do not do
    this kind of work, such as enhanced class-oriented syntactic sugar to let Java
    programmers pretend that JavaScript means programming in Java, may be ignored.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6，有一个介绍性的路线图可在[http://tinyurl.com/reactjs-ecmascript-6](http://tinyurl.com/reactjs-ecmascript-6)上找到，它为核心语言引入了深刻的新变化和扩展。一般来说，这些功能增强、加深或使JavaScript的功能方面更加一致。可以建议ECMAScript
    6的功能不做这种工作，比如增强的面向类的语法糖，让Java程序员假装JavaScript意味着在Java中编程，可能会被忽略。
- en: ECMAScript 6 features are a force to reckon with and at the time of this writing
    have more than started to make their way into the mainstream browsers. If you
    want to expand and improve your value as a JavaScript developer, don't restrict
    yourself to digging deeper into the rich JavaScript ecosystem, no matter how important
    that may be. Learn the new JavaScript. Learn an ECMAScript with heaping mounds
    more better parts.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6的功能是不可忽视的，在撰写本文时，它们已经开始在主流浏览器中广泛应用。如果你想扩展和提高自己作为JavaScript开发人员的价值，不要局限于深入挖掘丰富的JavaScript生态系统，无论那有多重要。学习新的JavaScript。学习一个有更多更好部分的ECMAScript。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this whirlwind tour of some of JavaScript's better parts, we have covered
    foundational building blocks that can be helpful as we push further in JavaScript.
    These include variables and assignment, comments, flow control, values, NaN functions,
    and ECMAScript 6.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这场对JavaScript一些更好部分的风暴式之旅中，我们涵盖了可以在我们进一步推进JavaScript时有所帮助的基础构建模块。这些包括变量和赋值、注释、流程控制、值、NaN函数和ECMAScript
    6。
- en: In the *Variables and assignment* section, we threw light on some basic building
    blocks of most programming, although the emphasis in functional reactive programming
    may lie elsewhere. In the *Comments* section, we understood how comments are the
    same everywhere, but the main concern here is to prevent strange surprises.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在*变量和赋值*部分，我们揭示了大多数编程的一些基本构建模块，尽管函数式响应式编程的重点可能在其他地方。在*注释*部分，我们了解到注释在任何地方都是相同的，但这里的主要关注点是防止奇怪的意外。
- en: The *Flow control* section covered basic flow control within a function (or
    possibly outside of any function, although that is usually to be avoided).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*流程控制*部分涵盖了函数内的基本流程控制（或者可能在任何函数之外，尽管通常应该避免这样做）。'
- en: In the section *A note on values and NaN*, we discussed that similarly to Perl,
    JavaScript holds truth to be self-evident; that is, the things are falsy if they
    are null, zero, empty, Not a Number, and so on, and true for anything not on the
    list.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在*关于值和NaN的说明*部分，我们讨论了类似于Perl，JavaScript认为真理是不言自明的；也就是说，如果它们为null、零、空、非数字等，则这些东西是虚假的，而不在列表上的任何东西都是真的。
- en: In the *Functions* section, we got a look at the functions that included a somewhat
    involved example. In the section *ECMAScript 6,* we discussed how the core JavaScript
    language is expanding.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在*函数*部分，我们看了一些包含有些复杂示例的函数。在*ECMAScript 6*部分，我们讨论了核心JavaScript语言的扩展。
- en: This has been a brief tour of highlights, not a comprehensive tour. If you need
    a more comprehensive grounding in JavaScript, there are multiple options available
    to you. We will continue in the next chapter with basic theory for reactive programming.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是对亮点的简要介绍，而不是全面的介绍。如果你需要更全面的JavaScript基础，有多种选择可供选择。我们将在下一章继续讨论响应式编程的基本理论。
