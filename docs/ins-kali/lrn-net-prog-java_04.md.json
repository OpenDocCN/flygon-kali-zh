["```java\npublic class WebServer {\n\n    public WebServer() {\n        System.out.println(\"Webserver Started\");\n        try (ServerSocket serverSocket = new ServerSocket(80)) {\n            while (true) {\n                System.out.println(\"Waiting for client request\");\n                Socket remote = serverSocket.accept();\n                System.out.println(\"Connection made\");\n                new Thread(new ClientHandler(remote)).start();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static void main(String args[]) {\n        new WebServer();\n    }\n}\n```", "```java\npublic class ClientHandler implements Runnable {\n\n    private final Socket socket;\n\n    public ClientHandler(Socket socket) {\n        this.socket = socket;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"\\nClientHandler Started for \" + \n            this.socket);\n        handleRequest(this.socket);\n        System.out.println(\"ClientHandler Terminated for \" \n            + this.socket + \"\\n\");\n    }\n\n}\n```", "```java\n    public void handleRequest(Socket socket) {\n        try (BufferedReader in = new BufferedReader(\n                new InputStreamReader(socket.getInputStream()));) {\n            String headerLine = in.readLine();\n            StringTokenizer tokenizer = \n                new StringTokenizer(headerLine);\n            String httpMethod = tokenizer.nextToken();\n            ...\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```", "```java\n    if (httpMethod.equals(\"GET\")) {\n        System.out.println(\"Get method processed\");\n        String httpQueryString = tokenizer.nextToken();\n        StringBuilder responseBuffer = new StringBuilder();\n        responseBuffer\n            .append(\"<html><h1>WebServer Home Page.... </h1><br>\")\n            .append(\"<b>Welcome to my web server!</b><BR>\")\n            .append(\"</html>\");\n        sendResponse(socket, 200, responseBuffer.toString());\n    } else {\n        System.out.println(\"The HTTP method is not recognized\");\n        sendResponse(socket, 405, \"Method Not Allowed\");\n    }\n```", "```java\n    String httpQueryString = tokenizer.nextToken();\n```", "```java\n    public void sendResponse(Socket socket, \n            int statusCode, String responseString) {\n        String statusLine;\n        String serverHeader = \"Server: WebServer\\r\\n\";\n        String contentTypeHeader = \"Content-Type: text/html\\r\\n\";\n\n        try (DataOutputStream out = \n                new DataOutputStream(socket.getOutputStream());) {\n            ...\n            out.close();\n        } catch (IOException ex) {\n            // Handle exception\n        }\n    }\n```", "```java\n    if (statusCode == 200) {\n        statusLine = \"HTTP/1.0 200 OK\" + \"\\r\\n\";\n        String contentLengthHeader = \"Content-Length: \" \n            + responseString.length() + \"\\r\\n\";\n\n        out.writeBytes(statusLine);\n        out.writeBytes(serverHeader);\n        out.writeBytes(contentTypeHeader);\n        out.writeBytes(contentLengthHeader);\n        out.writeBytes(\"\\r\\n\");\n        out.writeBytes(responseString);\n    } else if (statusCode == 405) {\n        statusLine = \"HTTP/1.0 405 Method Not Allowed\" + \"\\r\\n\";\n        out.writeBytes(statusLine);\n        out.writeBytes(\"\\r\\n\");\n    } else {\n        statusLine = \"HTTP/1.0 404 Not Found\" + \"\\r\\n\";\n        out.writeBytes(statusLine);\n        out.writeBytes(\"\\r\\n\");\n    }\n```", "```java\npublic class HTTPClient {\n\n    public HTTPClient() {\n        System.out.println(\"HTTP Client Started\");\n        try {\n            InetAddress serverInetAddress = \n               InetAddress.getByName(\"127.0.0.1\");\n            Socket connection = new Socket(serverInetAddress, 80);\n\n            try (OutputStream out = connection.getOutputStream();\n                 BufferedReader in = \n                     new BufferedReader(new \n                         InputStreamReader(\n                             connection.getInputStream()))) {\n                sendGet(out);\n                System.out.println(getResponse(in));\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    ...\n\n    public static void main(String[] args) {\n        new HTTPClient();\n    }\n}\n```", "```java\n    private void sendGet(OutputStream out) {\n        try {\n            out.write(\"GET /default\\r\\n\".getBytes());\n            out.write(\"User-Agent: Mozilla/5.0\\r\\n\".getBytes());\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n```", "```java\n    private String getResponse(BufferedReader in) {\n        try {\n            String inputLine;\n            StringBuilder response = new StringBuilder();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine).append(\"\\n\");\n            }\n            return response.toString();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        return \"\";\n    }\n```", "```java\npublic class HttpURLConnectionExample {\n\n    public static void main(String[] args) throws Exception {\n        HttpURLConnectionExample http = \n            new HttpURLConnectionExample();\n        http.sendGet();\n    }\n\n}\n```", "```java\n    private void sendGet() throws Exception {\n        String query = \n      \"http://www.google.com/search?q=java+sdk&ie=utf-8&oe=utf-8\";\n        URL url = new URL(query);\n        HttpURLConnection connection = \n            (HttpURLConnection) url.openConnection();\n        ...\n    }\n```", "```java\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"User-Agent\", \n            \"Mozilla/5.0\");\n```", "```java\n        int responseCode = connection.getResponseCode();\n        System.out.println(\"Response Code: \" + responseCode);\n        if (responseCode == 200) {\n            String response = getResponse(connection);\n            System.out.println(\"response: \" + \n                response.toString());\n        } else {\n            System.out.println(\"Bad Response Code: \" + \n                responseCode);\n        }\n```", "```java\n    private String getResponse(HttpURLConnection connection) {\n        try (BufferedReader br = new BufferedReader(\n                new InputStreamReader(\n                    connection.getInputStream()));) {\n            String inputLine;\n            StringBuilder response = new StringBuilder();\n            while ((inputLine = br.readLine()) != null) {\n                response.append(inputLine);\n            }\n            br.close();\n            return response.toString();\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n        return \"\";\n    }\n```", "```java\n    String query = \n      \"http://www.google.com/search?q=java+sdk&ie=utf-8&oe=utf-8\";\n```", "```java\n    String urlQuery = \"http://www.google.com/search?q=\";\n    String userQuery = \"java sdk\";\n    String urlEncoded = urlQuery + URLEncoder.encode(\n        userQuery, \"UTF-8\");\n```", "```java\npublic class MyHTTPServer {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"MyHTTPServer Started\");\n        HttpServer server = HttpServer.create(\n            new InetSocketAddress(80), 0);\n        server.createContext(\"/index\", new IndexHandler());\n        server.start();\n    }\n\n}\n```", "```java\n    static class IndexHandler implements HttpHandler {\n\n        @Override\n        public void handle(HttpExchange exchange) \n                throws IOException {\n            System.out.println(exchange.getRemoteAddress());\n            String response = getResponse();\n            exchange.sendResponseHeaders(200, response.length());\n            OutputStream out = exchange.getResponseBody();\n            out.write(response.toString().getBytes());\n            out.close();\n        }\n    }\n```", "```java\n    public String getResponse() {\n        StringBuilder responseBuffer = new StringBuilder();\n        responseBuffer\n            .append(\n                \"<html><h1>HTTPServer Home Page.... </h1><br>\")\n            .append(\"<b>Welcome to the new and improved web \" \n                    + \"server!</b><BR>\")\n            .append(\"</html>\");\n        return responseBuffer.toString();\n    }\n```", "```java\n    static class DetailHandler implements HttpHandler {\n\n        @Override\n        public void handle(HttpExchange exchange) \n                throws IOException {\n            ...\n        }\n    }\n```", "```java\n        server.createContext(\"/index\", new DetailHandler());\n```", "```java\n    Headers requestHeaders = exchange.getRequestHeaders();\n    Set<String> keySet = requestHeaders.keySet();\n    for (String key : keySet) {\n        List values = requestHeaders.get(key);\n        String header = key + \" = \" + values.toString() + \"\\n\";\n        System.out.print(header);\n    }\n```", "```java\n    String requestMethod = exchange.getRequestMethod();\n```", "```java\n    InputStream in = exchange.getRequestBody();\n    if (in != null) {\n        try (BufferedReader br = new BufferedReader(\n                new InputStreamReader(in));) {\n            String inputLine;\n            StringBuilder response = new StringBuilder();\n            while ((inputLine = br.readLine()) != null) {\n                response.append(inputLine);\n            }\n            br.close();\n            System.out.println(inputLine);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    } else {\n        System.out.println(\"Request body is empty\");\n    }\n```", "```java\n    Headers responseHeaders = exchange.getResponseHeaders();\n```", "```java\n    String responseMessage = HTTPServerHelper.getResponse();\n    responseHeaders.set(\"Content-Type\", \"text/html\");\n    responseHeaders.set(\"Server\", \"MyHTTPServer/1.0\");\n```", "```java\n    exchange.sendResponseHeaders(200, responseMessage.getBytes().length);\n```", "```java\n    Set<String> responseHeadersKeySet = responseHeaders.keySet();\n    responseHeadersKeySet\n            .stream()\n            .map((key) -> {\n                List values = responseHeaders.get(key);\n                String header = key + \" = \" + \n                    values.toString() + \"\\n\";\n                return header;\n            })\n            .forEach((header) -> {\n                System.out.print(header);\n            });\n```", "```java\npublic class ServletExample extends HttpServlet { \n\n    @Override\n    public void doGet(HttpServletRequest request,\n            HttpServletResponse response)\n                throws ServletException, IOException {\n        response.setContentType(\"text/html\");\n        PrintWriter out = response.getWriter();\n        out.println(\"<h1>\" + \"Message to be sent\" + \"</h1>\");\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, \n            HttpServletResponse response)\n                throws IOException, ServletException {\n        doGet(request, response);\n    }\n\n}\n```", "```java\n    responseHeaders.set(\"Set-cookie\", \"userID=Cookie Monster\");\n```", "```java\n    Map<String, List<String>> requestHeaders = \n        connection.getHeaderFields();\n    Set<String> keySet = requestHeaders.keySet();\n    for (String key : keySet) {\n        if (\"Set-cookie\".equals(key)) {\n            List values = requestHeaders.get(key);\n            String cookie = key + \" = \" + \n                values.toString() + \"\\n\";\n            String cookieName = \n                cookie.substring(0, cookie.indexOf(\"=\"));\n            String cookieValue = cookie.substring(\n                cookie.indexOf(\"=\")+ 1, cookie.length());\n            System.out.println(cookieName + \":\" + cookieValue);\n        }\n    }\n```"]