["```java\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'make'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'make check'\n                junit 'reports/**/*.xml'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'make publish'\n            }\n        }\n    }\n}\n```", "```java\n.travis.yaml:\n```", "```java\nlanguage: java\nsudo: false\ndist: trusty\n\naddons:\n    firefox: latest\n    apt:\n        packages:\n            - google-chrome-stable\n    sonarcloud:\n        organization: \"bonigarcia-github\"\n        token:\n            secure: \"encripted-token\"\n\nbefore_script:\n    - export DISPLAY=:99.0\n    - sh -e /etc/init.d/xvfb start &\n    - sleep 3\n\nscript:\n    - mvn test sonar:sonar\n    - bash <(curl -s https://codecov.io/bash)\n```", "```java\n<reporting>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-report-plugin</artifactId>\n            <version>${maven-surefire-report-plugin.version}</version>\n        </plugin>\n    </plugins>\n</reporting>\n```", "```java\nmvn test\nmvn allure:serve\n```", "```java\n<dependencies>\n    <dependency>\n        <groupId>io.qameta.allure</groupId>\n        <artifactId>allure-junit5</artifactId>\n        <version>${allure-junit5.version}</version>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter-api</artifactId>\n        <version>${junit.jupiter.version}</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>${maven-surefire-plugin.version}</version>\n            <configuration>\n                <properties>\n                    <property>\n                        <name>listener</name>\n                        <value>io.qameta.allure.junit5.AllureJunit5</value>\n                    </property>\n                </properties>\n                <systemProperties>\n                    <property>\n                        <name>allure.results.directory</name>\n                        <value>${project.build.directory}/allure-results</value>\n                    </property>\n                </systemProperties>\n            </configuration>\n            <dependencies>\n                <dependency>\n                    <groupId>org.junit.platform</groupId>\n                    <artifactId>junit-platform-surefire-provider</artifactId>\n                    <version>${junit.platform.version}</version>\n                </dependency>\n                <dependency>\n                    <groupId>org.junit.jupiter</groupId>\n                    <artifactId>junit-jupiter-engine</artifactId>\n                    <version>${junit.jupiter.version}</version>\n                </dependency>\n            </dependencies>\n        </plugin>\n        <plugin>\n            <groupId>io.qameta.allure</groupId>\n            <artifactId>allure-maven</artifactId>\n            <version>${allure-maven.version}</version>\n        </plugin>\n    </plugins>\n</build>\n```", "```java\nbuildscript {\n    repositories {\n        jcenter()\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}\")\n        classpath(\"io.qameta.allure:allure-gradle:${allureGradleVersion}\")\n    }\n}\n\napply plugin: 'io.qameta.allure'\n\ndependencies {\n    testCompile(\"org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}\")\n    testCompile(\"io.qameta.allure:allure-junit5:${allureJUnit5Version}\")\n    testRuntime(\"org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}\")\n}\n```", "```java\naddons:\n    sonarcloud:\n        organization: \"bonigarcia-github\"\n        token:\n            secure: \"encrypted-token\"\n```", "```java\nscript:\n    - mvn test sonar:sonar\n```", "```java\nscript:\n    - gradle test sonarQube\n```", "```java\npackage io.github.bonigarcia.test.unit;\n\nimport static org.hamcrest.CoreMatchers.*equalTo*;\nimport static org.hamcrest.MatcherAssert.*assertThat*;\nimport static org.hamcrest.text.IsEmptyString.*isEmptyString*;\nimport static org.junit.jupiter.api.Assertions.*assertThrows*;\nimport static org.mockito.ArgumentMatchers.*any*;\nimport static org.mockito.Mockito.*when*;\n\nimport java.util.Optional;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.Cat;\nimport io.github.bonigarcia.CatException;\nimport io.github.bonigarcia.CatRepository;\nimport io.github.bonigarcia.CatService;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"Unit tests (black-box): rating cats\")\n@Tag(\"unit\")\nclass RateCatsTest {\n\n    @InjectMocks\n    CatService catService;\n\n    @Mock\n    CatRepository catRepository;\n\n    // Test data\n    Cat dummy = new Cat(\"dummy\", \"dummy.png\");\n    int stars = 5;\n    String comment = \"foo\";\n\n    @ParameterizedTest(name = \"Rating cat with {0} stars\")\n    @ValueSource(doubles = { 0.5, 5 })\n    @DisplayName(\"Correct range of stars test\")\n    @Tag(\"functional-requirement-3\")\n    void testCorrectRangeOfStars(double stars) {\n        *when*(catRepository.save(dummy)).thenReturn(dummy);\n        Cat dummyCat = catService.rateCat(stars, dummy);\n        *assertThat*(dummyCat.getAverageRate(), *equalTo*(stars));\n    }\n\n    @ParameterizedTest(name = \"Rating cat with {0} stars\")\n    @ValueSource(ints = { 0, 6 })\n    @DisplayName(\"Incorrect range of stars test\")\n    @Tag(\"functional-requirement-3\")\n    void testIncorrectRangeOfStars(int stars) {\n        *assertThrows*(CatException.class, () -> {\n            catService.rateCat(stars, dummy);\n        });\n    }\n\n    @Test\n    @DisplayName(\"Rating cats with a comment\")\n    @Tag(\"functional-requirement-4\")\n    void testRatingWithComments() {\n        *when*(catRepository.findById(*any*(Long.class)))\n            .thenReturn(Optional.*of*(dummy));\n        Cat dummyCat = catService.rateCat(stars, comment, 0);\n        *assertThat*(catService.getOpinions(dummyCat).iterator().next()\n           .getComment(), *equalTo*(comment));\n    }\n\n    @Test\n    @DisplayName(\"Rating cats with empty comment\")\n    @Tag(\"functional-requirement-4\")\n    void testRatingWithEmptyComments() {\n        *when*(catRepository.findById(*any*(Long.class)))\n            .thenReturn(Optional.*of*(dummy));\n        Cat dummyCat = catService.rateCat(stars, dummy);\n        *assertThat*(catService.getOpinions(dummyCat).iterator().next()\n            .getComment(), *isEmptyString*());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia.test.unit;\n\nimport static org.hamcrest.CoreMatchers.*containsString*;\nimport static org.hamcrest.CoreMatchers.*equalTo*;\nimport static org.hamcrest.CoreMatchers.*not*;\nimport static org.hamcrest.MatcherAssert.*assertThat*;\nimport static org.hamcrest.collection.IsEmptyCollection.*empty*;\nimport static org.mockito.ArgumentMatchers.*any*;\nimport static org.mockito.Mockito.*doNothing*;\nimport java.util.List;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletResponse;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport io.github.bonigarcia.Cat;\nimport io.github.bonigarcia.CookiesService;\nimport io.github.bonigarcia.Opinion;\nimport io.github.bonigarcia.mockito.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\n@DisplayName(\"Unit tests (white-box): handling cookies\")\n@Tag(\"unit\")\n@Tag(\"functional-requirement-5\")\nclass CookiesTest {\n    @InjectMocks\n    CookiesService cookiesService;\n    @Mock\n    HttpServletResponse response;\n\n    // Test data\n    Cat dummy = new Cat(\"dummy\", \"dummy.png\");\n    String dummyCookie = \"0#0.0#_\";\n\n    @Test\n    @DisplayName(\"Update cookies test\")\n    void testUpdateCookies() {\n        *doNothing*().when(response).addCookie(*any*(Cookie.class));\n        String cookies = cookiesService.updateCookies(\"\", 0L, 0D, \"\", \n          response);\n        *assertThat*(cookies,                         \n *containsString*(CookiesService.*VALUE_SEPARATOR*));\n        *assertThat*(cookies, \n *containsString*(Cookies.*CA**T_SEPARATOR*));\n    }\n\n    @Test\n    @DisplayName(\"Check cat in cookies\")\n    void testCheckCatInCookies() {\n        boolean catInCookies = cookiesService.isCatInCookies(dummy,\n            dummyCookie);\n        *assertThat*(catInCookies, *equalTo*(true));\n    }\n\n    @DisplayName(\"Check cat in empty cookies\")\n    @Test\n    void testCheckCatInEmptyCookies() {\n        boolean catInCookies = cookiesService.isCatInCookies(dummy, \"\");\n        *assertThat*(catInCookies, *equalTo*(false));\n    }\n\n    @DisplayName(\"Update opinions with cookies\")\n    @Test\n    void testUpdateOpinionsWithCookies() {\n        List<Opinion> opinions = cookiesService\n            .updateOpinionsWithCookiesValue(dummy, dummyCookie);\n        *assertThat*(opinions, *not*(*empty*()));\n    }\n\n    @DisplayName(\"Update opinions with empty cookies\")\n    @Test\n    void testUpdateOpinionsWithEmptyCookies() {\n        List<Opinion> opinions = cookiesService\n            .updateOpinionsWithCookiesValue(dummy, \"\");\n        *assertThat*(opinions, *empty*());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia.test.integration;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*get*;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*post*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*content*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*status*;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\n\n@ExtendWith(SpringExtension.class)\n@SpringBootTest\n@DisplayName(\"Integration tests: HTTP reponses\")\n@Tag(\"integration\")\n@Tag(\"functional-requirement-1\")\n@Tag(\"functional-requirement-2\")\n\nclass WebContextTest {\n\n    @Autowired\n    MockMvc mockMvc;\n\n    @Test\n    @DisplayName(\"Check home page (GET /)\")\n    void testHomePage() throws Exception {\n        mockMvc.perform(*get*(\"/\")).andExpect(*status*().isOk())\n            .andExpect(*content*().contentType(\"text/html;charset=UTF-8\"));\n    }\n\n    @Test\n    @DisplayName(\"Check rate cat (POST /)\")\n    void testRatePage() throws Exception {\n        mockMvc.perform(*post*(\"/\").param(\"catId\", \"1\").param(\"stars\", \"1\")\n            .param(\"comment\", \"\")).andExpect(*status*().isOk())\n            .andExpect(*content*().contentType(\"text/html;charset=UTF-8\"));\n    }\n\n    @Test\n    @DisplayName(\"Check rate cat (POST /) of an non-existing cat\")\n    void testRatePageCatNotAvailable() throws Exception {\n        mockMvc.perform(*post*(\"/\").param(\"catId\", \"0\").param(\"stars\", \"1\")\n            .param(\"comment\", \"\")).andExpect(*status*().isOk())\n           .andExpect(*content*().contentType(\"text/html;charset=UTF-8\"));\n    }\n\n    @Test\n    @DisplayName(\"Check rate cat (POST /) with bad parameters\")\n    void testRatePageNoParameters() throws Exception {\n        mockMvc.perform(*post*(\"/\")).andExpect(*status*().isBadRequest());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia.test.e2e;\n\nimport static org.hamcrest.CoreMatchers.*containsString*;\nimport static org.hamcrest.CoreMatchers.*equalTo*;\nimport static org.hamcrest.MatcherAssert.*assertThat*;\nimport static org.openqa.selenium.support.ui.ExpectedConditions.*elementToBeClickable*;\nimport static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.*RANDOM_PORT*;\n import java.util.List;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.phantomjs.PhantomJSDriver;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.web.server.LocalServerPort;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport io.github.bonigarcia.SeleniumExtension;\n\n@ExtendWith({ SpringExtension.class, SeleniumExtension.class })\n@SpringBootTest(webEnvironment = *RANDOM_PORT*)\n@DisplayName(\"E2E tests: user interface\")\n@Tag(\"e2e\")\npublic class UserInferfaceTest {\n    @LocalServerPort\n    int serverPort;\n\n    @Test\n    @DisplayName(\"List cats in the GUI\")\n    @Tag(\"functional-requirement-1\")\n    public void testListCats(PhantomJSDriver driver) {\n        driver.get(\"http://localhost:\" + serverPort);\n        List<WebElement> catLinks = driver\n            .findElements(By.*className*(\"lightbox\"));\n        *assertThat*(catLinks.size(), *equalTo*(9));\n    }\n\n    @Test\n    @DisplayName(\"Rate a cat using the GUI\")\n    @Tag(\"functional-requirement-2\")\n    public void testRateCat(ChromeDriver driver) {\n        driver.get(\"http://localhost:\" + serverPort);\n        driver.findElement(By.*id*(\"Baby\")).click();\n        String fourStarsSelector = \"#form1 span:nth-child(4)\";\n        new WebDriverWait(driver, 10)                     \n            .until(*elementToBeClickable\n*                (By.*cssSelector*(fourStarsSelector)));\n        driver.findElement(By.*cssSelector*(fourStarsSelector)).click();\n        driver.findElement(By.*xpath*(\"//*[@id=\\\"comment\\\"]\"))\n            .sendKeys(\"Very nice cat\");\n        driver.findElement(By.*cssSelector*(\"#form1 > button\")).click();\n        WebElement sucessDiv = driver\n            .findElement(By.*cssSelector*(\"#success > div\"));\n        *assertThat*(sucessDiv.getText(), *containsString*(\"Your vote for               \n            Baby\"));\n    }\n\n    @Test\n    @DisplayName(\"Rate a cat using the GUI with error\")\n    @Tag(\"functional-requirement-2\")\n    public void testRateCatWithError(FirefoxDriver driver) {\n        driver.get(\"http://localhost:\" + serverPort);\n        driver.findElement(By.*id*(\"Baby\")).click();\n        String sendButtonSelector = \"#form1 > button\";\n        new WebDriverWait(driver, 10).until(\n *elementToBeClickable*(By.*cssSelector*(sendButtonSelector)));\n        driver.findElement(By.*cssSelector*(sendButtonSelector)).click();\n        WebElement sucessDiv = driver\n            .findElement(By.*cssSelector*(\"#error > div\"));\n        *assertThat*(sucessDiv.getText(), *containsString*(\n            \"You need to select some stars for rating each cat\"));\n    }\n\n}\n```"]