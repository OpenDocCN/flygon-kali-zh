- en: Distributed Memory Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式内存管理
- en: 'In the last two decades, the industry has seen a paradigm shift to big data
    and machine learning architectures that involve processing terabytes/petabytes
    of data as quickly as possible. As computing power became cheaper, there was a
    need to use multiple processors to speed up processing to a larger scale. This
    has led to distributed computing. Distributed computing refers to an arrangement
    of computer systems that are connected via some networking/distribution middleware.
    All the connected systems share resources and coordinate their activities via
    middleware so that they work in a way that is perceived as a single system by
    the end user. Distributed computing is needed due to the huge volume and throughput
    requirements of modern applications. Some typical examples of scenarios where
    computing demands cannot be fulfilled by a single system and that need to be distributed
    across a grid of computers are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的二十年中，行业已经看到了一个向大数据和机器学习架构的转变，这些架构涉及尽可能快地处理TB / PB级别的数据。随着计算能力变得更加便宜，需要使用多个处理器来加速处理规模更大的数据。这导致了分布式计算。分布式计算是指通过某种网络/分发中间件连接的计算机系统的安排。所有连接的系统共享资源，并通过中间件协调它们的活动，以便它们以最终用户感知为单个系统的方式工作。由于现代应用程序的巨大容量和吞吐量要求，需要分布式计算。一些典型的示例场景，其中单个系统无法满足计算需求，需要在计算机网格上分布的情况如下：
- en: Google performs at least 1.5 trillion searches per year.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌每年至少进行1500亿次搜索。
- en: IOT devices send multiple terabytes of data to event hubs.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网设备向事件中心发送多个TB的数据。
- en: Data warehouses receive and compute terabytes of records in minimal time.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据仓库在最短的时间内接收和计算TB级别的记录。
- en: In this chapter, we will discuss distributed memory management and the need
    for distributed computing. We will also learn about how messages are passed across
    communication networks for distributed systems, as well as various types of communicated
    networks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论分布式内存管理和分布式计算的需求。我们还将了解分布式系统中如何通过通信网络传递消息，以及各种类型的通信网络。
- en: 'This chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Advantages of distributed systems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式系统的优势
- en: Shared memory model versus distributed memory model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享内存模型与分布式内存模型
- en: Types of communication network
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信网络的类型
- en: Properties of communication networks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通信网络的属性
- en: Exploring topologies
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索拓扑结构
- en: Programming distributed memory machines using message passing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用消息传递编程来编程分布式内存机器
- en: Collectives
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you'll need knowledge of programming in C and C# Windows
    platform API invocation programming.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您需要了解在C和C# Windows平台API调用编程中的编程知识。
- en: Introduction to distributed systems
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式系统简介
- en: We have already discussed how distributed computing works in this book. In this
    section, we will try to understand distributed computing with a small example
    that works on arrays.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本书中讨论了分布式计算的工作原理。在本节中，我们将尝试通过一个在数组上工作的小例子来理解分布式计算。
- en: 'Let''s say we have an array of 1,040 elements and we would like to find the
    sum of all the numbers:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个包含1040个元素的数组，我们想找出所有数字的总和：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the total time that''s taken to add numbers is x (let''s say all of the
    numbers are large) and we want to compute them all as fast as possible, we can
    take advantage of distributed computing. We would divide the array into multiple
    arrays (let''s say, four arrays), each with 25% of the original number of elements,
    and send each array to a different processor to calculate the sum, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将数字相加所需的总时间为x（假设所有数字都很大），并且我们希望尽快计算它们，我们可以利用分布式计算。我们将数组分成多个数组（假设有四个数组），每个数组包含原始元素数量的25％，并将每个数组发送到不同的处理器以计算总和，如下所示：
- en: '![](img/b7f7894c-f365-49da-af19-6ef8f87398a9.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7f7894c-f365-49da-af19-6ef8f87398a9.png)'
- en: In this arrangement, the total time that's taken to add all the numbers is reduced
    to (x/4 + d) or (x/number of processors +d), where d is the time that's taken
    to collate the sums from all the processors and add them to get the final results.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种安排中，将所有数字相加所需的总时间减少到（x/4 + d）或（x/处理器数量 + d），其中d是从所有处理器收集总和并将它们相加以获得最终结果所需的时间。
- en: 'Some of the advantages of distributed systems are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式系统的一些优势如下：
- en: Systems can be scaled to any level without any hardware restrictions
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统可以在没有任何硬件限制的情况下扩展到任何级别
- en: No single point of failure, which makes them more fault-tolerant
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有单点故障，使它们更具容错性
- en: Highly available
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度可用
- en: Very efficient when handling big data problems
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理大数据问题时非常高效
- en: Distributed systems are often confused with parallel systems, but there are
    subtle differences between them. **Parallel systems** are an arrangement of multi-processors
    that are placed mostly in single, but sometimes in multiple, containers in close
    vicinity. **Distributed systems**, on the other hand, consist of multiple processors
    (each having its own memory and I/O devices) that are connected together via a
    network that enables data exchange.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式系统经常与并行系统混淆，但它们之间有微妙的区别。**并行系统**是一种多处理器的排列，它们大多放置在单个容器中，但有时也放置在多个容器中。**分布式系统**则由多个处理器组成（每个处理器都有自己的内存和I/O设备），它们通过网络连接在一起，实现数据交换。
- en: Shared versus distributed memory model
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享与分布式内存模型
- en: To achieve high performance, the **multi-processor** and **multi-computer** architectures
    have evolved. With the multi-processor architecture, multiple processors share
    a common memory and communicate with each other by reading/writing to the shared
    memory. With multi-computers, multiple computers that don't share a single physical
    memory communicate with each other by passing messages. **Distributed Shared Memory**
    (**DSM**) deals with sharing memory in a physical, non-shared (distributed) architecture.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现高性能，多处理器和多计算机架构已经发展。使用多处理器架构，多个处理器共享一个公共内存，并通过读/写共享内存进行通信。使用多计算机，多台不共享单个物理内存的计算机通过传递消息进行通信。**分布式共享内存**（**DSM**）处理在物理、非共享（分布式）架构中共享内存。
- en: Let's look at each one and talk about their differences.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分别看看它们，并谈论它们的区别。
- en: Shared memory model
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享内存模型
- en: 'In the case of shared memory models, multiple processors share a single common
    memory space. Since multiple processors share memory space, there needs to be
    some synchronization measures in place to avoid data corruption and race conditions.
    As we have seen so far in this book, synchronization comes with performance overheads.
    The following is an example representation of the shared memory model. As you
    can see, there are **n** processors in the arrangement, all of which have access
    to a commonly shared memory block:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在共享内存模型的情况下，多个处理器共享单个公共内存空间。由于多个处理器共享内存空间，需要一些同步措施来避免数据损坏和竞争条件。正如我们在本书中所看到的，同步会带来性能开销。以下是共享内存模型的示例表示。如您所见，排列中有**n**个处理器，所有这些处理器都可以访问一个共享的内存块：
- en: '![](img/eb451b6f-2779-413e-bc9a-455b1f0052fc.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb451b6f-2779-413e-bc9a-455b1f0052fc.png)'
- en: 'The features of the shared memory model are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 共享内存模型的特点如下：
- en: 'All the processors have access to the entire memory block. The memory block
    can be a single piece of memory composed of memory modules, as shown in the following
    diagram:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有处理器都可以访问整个内存块。内存块可以是由内存模块组成的单个内存块，如下图所示：
- en: '![](img/7287eb33-3361-43f9-93b4-a602c63f4f90.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7287eb33-3361-43f9-93b4-a602c63f4f90.png)'
- en: Processors communicate with each other by creating shared variables in the main
    memory.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器通过在主内存中创建共享变量来相互通信。
- en: The efficiency of parallelization largely depends on the speed of the service
    bus.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行化的效率在很大程度上取决于服务总线的速度。
- en: Due to the speed of the service bus, the system can only be scaled up to n number
    of processors.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于服务总线的速度，系统只能扩展到n个处理器。
- en: Shared memory models are also known as **symmetric multiprocessing** (**SMP**)
    models since all the processors have access to all the available memory blocks.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 共享内存模型也被称为**对称多处理**（**SMP**）模型，因为所有处理器都可以访问所有可用的内存块。
- en: Distributed memory model
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式内存模型
- en: 'In the case of the distributed memory model, the memory space is no longer
    shared across processors. In fact, the processors don''t share common physical
    locations; instead, they can be remotely placed. Each processor has its own private
    memory space and I/O devices. Data is stored across processors rather than in
    single memory. Each processor can work on its own local data, but to access data
    that''s been stored in other processor memories, they need to connect via a communication
    network. Data is passed via **message passing** across processors using the *send
    message* and *receive message* instructions. The following is a diagrammatic representation
    of a distributed memory model:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式内存模型的情况下，内存空间不再跨处理器共享。事实上，处理器不共享共同的物理位置；相反，它们可以远程放置。每个处理器都有自己的私有内存空间和I/O设备。数据存储在处理器之间而不是单个内存中。每个处理器可以处理自己的本地数据，但要访问存储在其他处理器内存中的数据，它们需要通过通信网络连接。数据通过**消息传递**在处理器之间传递，使用*发送消息*和*接收消息*指令。以下是分布式内存模型的图示表示：
- en: '![](img/b9184ffd-8815-494e-984a-75466e0d829b.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9184ffd-8815-494e-984a-75466e0d829b.png)'
- en: The preceding diagram depicts each processor, along with its own memory space
    and interaction with **communication networks** via I/O interfaces. Let's try
    to understand the various types of communication networks that can be used in
    distributed systems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上图描述了每个处理器及其自己的内存空间，并通过I/O接口与**通信网络**进行交互。让我们试着了解分布式系统中可以使用的各种通信网络类型。
- en: Types of communication network
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信网络的类型
- en: 'Communication networks are the links that connect two or more nodes in a typical
    computer network. Communication networks are classified into two categories:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通信网络是连接典型计算机网络中的两个或多个节点的链路。通信网络分为两类：
- en: Static communication networks
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态通信网络
- en: Dynamic communication networks
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态通信网络
- en: Let's take a look at both.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看两者。
- en: Static communication networks
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态通信网络
- en: 'Static communication networks contain links, as shown in the following diagram:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 静态通信网络包含链接，如下图所示：
- en: '![](img/dd8b6d89-e3e9-42dd-9add-60e7da9f3c9a.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd8b6d89-e3e9-42dd-9add-60e7da9f3c9a.png)'
- en: Links are used to connect nodes together, thereby creating a complete communication
    network where any node can talk to any other node.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 链接用于连接节点，从而创建一个完整的通信网络，其中任何节点都可以与任何其他节点通信。
- en: Dynamic communication networks
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态通信网络
- en: 'Dynamic communication networks have links and switches, as shown in the following
    diagram:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 动态通信网络具有链接和交换机，如下图所示：
- en: '![](img/747dae92-c2d8-4f26-b3f1-bf16ee8c33ae.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/747dae92-c2d8-4f26-b3f1-bf16ee8c33ae.png)'
- en: Switches are devices that have input/output ports, and they redirect input data
    to output ports. This means that pathways are dynamic. If one processor wants
    to send data to another, it needs to be done via a switch, as demonstrated in
    the preceding diagram.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 交换机是具有输入/输出端口的设备，并将输入数据重定向到输出端口。这意味着路径是动态的。如果一个处理器想要向另一个处理器发送数据，就需要通过交换机进行，如前图所示。
- en: Properties of communication networks
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信网络的属性
- en: 'While designing a communication network, we need to consider the following
    characteristics:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计通信网络时，我们需要考虑以下特性：
- en: Topology
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拓扑
- en: Routing algorithm
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由算法
- en: Switching strategy
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换策略
- en: Flow control
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量控制
- en: Let's look at these characteristics in more detail.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这些特性。
- en: Topology
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拓扑
- en: Topology refers to how nodes (bridges, switches, and infrastructure devices)
    are connected. Some common topologies include crossbar, ring, 2D mesh, 3D mesh,
    higherD mesh, 2D torus, 3D torus, higherD torus, hypercube, tree, butterfly, perfect
    shuffle, and dragonfly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 拓扑指的是节点（桥接器、交换机和基础设备）的连接方式。一些常见的拓扑包括交叉开关、环形、2D网格、3D网格、更高维网格、2D环、3D环、更高维环、超立方体、树、蝴蝶、完美洗牌和蜻蜓。
- en: 'In the case of the crossbar topology, every node in the network is connected
    to every other node (though they may not be connected directly). Thus, messages
    can be passed via a number of routes to avoid any conflicts. Here is a typical
    crossbar topology:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在交叉开关拓扑的情况下，网络中的每个节点都连接到每个其他节点（尽管它们可能不是直接连接的）。因此，消息可以通过多条路由传递，以避免任何冲突。以下是一个典型的交叉开关拓扑：
- en: '![](img/72c0ae88-b930-4d0e-ac5c-3b30d31f49e2.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72c0ae88-b930-4d0e-ac5c-3b30d31f49e2.png)'
- en: 'In the case of the mesh topology, or meshnet, as it''s popularly called, nodes
    connect to each other directly without having a dependency on other nodes in the
    network. This way, all the nodes can relay information independently. The mesh
    can be partially or fully connected. Here is a typical fully connected mesh:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在网状拓扑或者常被称为网状网络的情况下，节点直接连接到彼此，而不依赖于网络中的其他节点。这样，所有节点都可以独立地中继信息。网状可以是部分连接或完全连接的。以下是一个典型的完全连接的网状：
- en: '![](img/8ba15fd5-ddef-42d3-ba5d-1a63f576c968.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ba15fd5-ddef-42d3-ba5d-1a63f576c968.png)'
- en: We will look at topology in more detail later in this chapter, in the *Exploring
    topologies *section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面更详细地讨论拓扑，在*探索拓扑*部分。
- en: Routing algorithms
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由算法
- en: Routing is a process via which a packet of information is sent across the network
    so that it reaches the intended node. Routing can be adaptive, that is, it responds
    to changes in the network topology by continuously taking information from adjacent
    nodes, or non-adaptive, that is, they are static and is where routing information
    is downloaded to nodes when the network is booted. Routing algorithms need to
    be chosen to make sure there are no deadlocks. For example, in 2D torus, all the
    pathways go from east to west and north to south to avoid any deadlock scenarios.
    We will look at 2D torus in more detail later in this chapter.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是通过网络发送信息包以使其到达预定节点的过程。路由可以是自适应的，即它通过不断从相邻节点获取信息来响应网络拓扑的变化，也可以是非自适应的，即它们是静态的，并且在网络引导时将路由信息下载到节点。需要选择路由算法以确保没有死锁。例如，在2D环中，所有路径都从东到西和从北到南，以避免任何死锁情况。我们将在本章后面更详细地讨论2D环。
- en: Switching strategy
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交换策略
- en: 'Choosing an appropriate switching strategy can increase the performance of
    a network. The two most prominent switching strategies are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适当的交换策略可以提高网络的性能。最突出的两种交换策略如下：
- en: '**Circuit switching**: In circuit switching, the full path is reserved for
    an entire message, such as the telephone. To begin a call on a telephone network,
    a dedicated circuit needs to be established between the caller and callee and
    the circuit persists during the entire call duration.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电路交换**：在电路交换中，整个消息的完整路径被保留，比如电话。在电话网络上开始通话时，需要在呼叫方和被呼叫方之间建立专用电路，并且在整个通话期间电路保持不变。'
- en: '**Packet switching**: In packet switching, the message is broken into separately
    routed packets, such as the internet. In terms of cost benefits, it''s far better
    than circuit switching as the cost of the link is shared across users. Packet
    switching is primarily used for asynchronous scenarios such as sending emails
    or file transfer.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分组交换**：在分组交换中，消息被分成单独路由的数据包，比如互联网。在成本效益方面，它比电路交换要好得多，因为链路的成本是由用户共享的。分组交换主要用于异步场景，比如发送电子邮件或文件传输。'
- en: Flow control
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流量控制
- en: 'Flow control is a process by which a network makes sure that packets are transferred
    across the sender and received efficiently and without error. In the case of the
    network topology, the speeds of the sender and receiver can vary, which can lead
    to bottlenecks or loss of packets in some cases. With flow control, we can make
    decisions in case there''s congestion on the network. Some strategies include
    storing data temporarily into buffers, rerouting data to other nodes, instructing
    source nodes to temporarily halt, discarding data, and so on. The following are
    some common flow control algorithms:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 流量控制是网络确保数据包在发送方和接收方之间高效、无误地传输的过程。在网络拓扑的情况下，发送方和接收方的速度可能不同，这可能导致瓶颈或在某些情况下丢失数据包。通过流量控制，我们可以在网络拥塞时做出决策。一些策略包括临时将数据存储到缓冲区中、将数据重新路由到其他节点、指示源节点暂停传输、丢弃数据等。以下是一些常见的流量控制算法：
- en: '**Stop and wait**: The entire message is broken into parts. The sender sends
    a part to the receiver and waits for an acknowledgement to come within a specific
    time period (timeout). Once the sender receives an acknowledgment, it sends the
    next part of the message.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停止等待**：整个消息被分成部分。发送方将一部分发送给接收方，并等待在特定时间段（超时）内收到确认。一旦发送方收到确认，就发送消息的下一部分。'
- en: '**Sliding window**: The receiver assigns a transmitting window for a sender
    to send messages. The sender has to stop transmitting when the window is full
    so that the receiver can process messages and advertise the next transmitting
    window. This approach works best when the receiver is storing data in a buffer
    and thus can only receive the buffer capacity.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑动窗口**：接收方为发送方分配一个传输窗口来发送消息。当窗口已满时，发送方必须停止传输，以便接收方可以处理消息并通知下一个传输窗口。当接收方将数据存储在缓冲区中并且只能接收缓冲区容量时，这种方法效果最好。'
- en: Exploring topologies
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索拓扑
- en: 'So far, we''ve looked at some complete communication networks where each processor
    can communicate with the others directly, without the need for any switch. This
    arrangement serves well when there is a small number of processors but can become
    a real pain if the number of processors needs to be increased. There are various
    other performance topologies available that can be used. There are two important
    aspects while measuring the performance of a graph in a topology:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过一些完整的通信网络，其中每个处理器都可以直接与其他处理器通信，而不需要任何交换机。当处理器数量较少时，这种排列效果很好，但如果需要增加处理器数量，就会变得非常麻烦。还有其他各种性能拓扑可供使用。在测量拓扑中的图的性能时有两个重要方面：
- en: '**The diameter of the graph**: The longest path between the nodes.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图的直径**：节点之间的最长路径。'
- en: '**Bisection bandwidth**: The bandwidth across the smallest cut that divides
    the network into two equal halves. This is important for networks where each processor
    needs to communicate with the others.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二分带宽**：将网络分成两个相等的部分的最小切割的带宽。这对于每个处理器都需要与其他处理器通信的网络非常重要。'
- en: The following are examples of some network topologies.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些网络拓扑的示例。
- en: Linear and ring topologies
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性和环形拓扑
- en: These topologies work well with 1D arrays. In the case of the linear topology,
    all the processors are in a linear arrangement with one input and output flow,
    whereas in the case of the ring topology, processors form a loop back to the start
    processor.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些拓扑结构与1D数组配合得很好。在线性拓扑的情况下，所有处理器都按线性排列，有一个输入和输出流，而在环形拓扑的情况下，处理器形成一个回路返回到起始处理器。
- en: Let's look at them in more detail.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下它们。
- en: Linear arrays
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性数组
- en: 'All the processors are in a linear arrangement, as shown in the following diagram:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所有处理器都按线性排列，如下图所示：
- en: '![](img/9152fa9a-b82e-455c-842d-3151c377c2bd.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9152fa9a-b82e-455c-842d-3151c377c2bd.png)'
- en: 'This arrangement will have the following values for the diameter and bisection
    bandwidth:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种排列将具有以下直径和二分带宽的值：
- en: Diameter = n-1, where n is the number of processors
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直径= n-1，其中n是处理器的数量
- en: Bisection bandwidth = 1
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分带宽= 1
- en: Ring or torus
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环形或环面
- en: 'All the processors are in ring arrangements and information flows from one
    processor to another, making a loopback to the originating processor. Then, this
    makes a ring, as shown in the following diagram:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所有处理器都处于环形排列中，信息从一个处理器流向另一个处理器，然后回到起始处理器。然后，这形成一个环，如下图所示：
- en: '![](img/ae99c2b1-8be7-4553-9c32-36af39d9a9ab.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae99c2b1-8be7-4553-9c32-36af39d9a9ab.png)'
- en: 'This arrangement will have the following values for the diameter and bisection
    bandwidth:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这种排列将具有以下直径和二分带宽的值：
- en: Diameter = n/2, where n is the number of processors
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直径= n/2，其中n是处理器的数量
- en: Bisection bandwidth = 2
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分带宽= 2
- en: Meshes and tori
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格和环形
- en: These topologies work well with 2D and 3D arrays. Let's look at them in more
    detail.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些拓扑结构与2D和3D数组配合得很好。让我们更详细地看一下它们。
- en: 2D mesh
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2D网格
- en: 'In the case of the mesh, nodes connect to each other directly without having
    a dependency on other nodes in a network. All the nodes are in a 2D mesh arrangement,
    as shown in the following diagram:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在网格的情况下，节点直接连接到彼此，而不依赖于网络中的其他节点。所有节点都处于2D网格排列中，如下图所示：
- en: '![](img/34161c13-68fb-401a-9714-63d04dfba3bf.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34161c13-68fb-401a-9714-63d04dfba3bf.png)'
- en: 'This arrangement will have the following values for the diameter and bisection
    bandwidth:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这种排列将具有以下直径和二分带宽的值：
- en: Diameter = 2 * ( sqrt ( n ) – 1 ), where n is the number of processors
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直径= 2 * ( sqrt ( n ) – 1 )，其中n是处理器的数量
- en: Bisection bandwidth = sqrt( n )
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分带宽= sqrt( n )
- en: 2D torus
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2D环面
- en: 'All the processors are in a 2D torus arrangement, as shown in the following
    diagram:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所有处理器都按2D环排列，如下图所示：
- en: '![](img/52becade-ebc1-4083-b14f-fb61aef07e7c.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52becade-ebc1-4083-b14f-fb61aef07e7c.png)'
- en: 'This arrangement will have the following values for the diameter and bisection
    bandwidth:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这种排列将具有以下直径和二分带宽的值：
- en: Diameter = sqrt( n ), where n is the number of processors
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直径= sqrt( n )，其中n是处理器的数量
- en: Bisection bandwidth = 2 * sqrt(n)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分带宽= 2 * sqrt(n)
- en: Programming distributed memory machines using message passing
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用消息传递编程分布式内存机器
- en: In this section, we will discuss how to program distributed memory machines
    using Microsoft's **message passing interface** (**MPI**).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何使用Microsoft的消息传递接口（MPI）编程分布式内存机器。
- en: MPI is a standard, portable system that has been developed for distributed and
    parallel systems. It defines the basic set of functions that are utilized by parallel
    hardware vendors to support distributed memory communication. In the following
    sections, we will discuss the advantages of using MPI over old messaging libraries
    and explain how to install and run a simple MPI program.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: MPI是一个标准的、可移植的系统，专为分布式和并行系统开发。它定义了一组基本函数，这些函数由并行硬件供应商用于支持分布式内存通信。在接下来的章节中，我们将讨论使用MPI相对于旧的消息传递库的优势，并解释如何安装和运行一个简单的MPI程序。
- en: Why MPI?
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用MPI？
- en: An advantage of MPI is that MPI routines can be called from a variety of languages,
    such as C, C++, C#, Java, Python, and more. MPI is highly portable compared to
    old messaging libraries, and MPI routines are speed-optimized for each piece of
    hardware that they are supposed to run.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: MPI的一个优点是MPI例程可以从各种语言中调用，如C、C++、C#、Java、Python等。与旧的消息传递库相比，MPI具有高度的可移植性，MPI例程针对它们应该运行的每一块硬件进行了速度优化。
- en: Installing MPI on Windows
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装MPI
- en: MPI can be downloaded and installed as a ZIP file from [https://www.open-mpi.org/software/ompi/v1.10/](https://www.open-mpi.org/software/ompi/v1.10/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: MPI可以从[https://www.open-mpi.org/software/ompi/v1.10/](https://www.open-mpi.org/software/ompi/v1.10/)下载并安装为ZIP文件。
- en: Alternatively, you can download the Microsoft version of MPI from [https://github.com/Microsoft/Microsoft-MPI/releases](https://github.com/Microsoft/Microsoft-MPI/releases).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以从[https://github.com/Microsoft/Microsoft-MPI/releases](https://github.com/Microsoft/Microsoft-MPI/releases)下载Microsoft版本的MPI。
- en: Sample program using MPI
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MPI的示例程序
- en: The following is a simple `HelloWorld` program that we can run using MPI. The
    program prints the processor number that the code is being executed on after a
    delay of two seconds. The same code can be run on multiple processors (we are
    able to specify the processor count).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的`HelloWorld`程序，我们可以使用MPI来运行。该程序在延迟两秒后打印代码正在执行的处理器编号。相同的代码可以在多个处理器上运行（我们可以指定处理器数量）。
- en: 'Let''s create a new console application project in Visual Studio and write
    the following code in the `Program.cs` file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Visual Studio中创建一个新的控制台应用程序项目，并在`Program.cs`文件中编写以下代码：
- en: '[PRE1]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`GetCurrentProcessorNumber()` is a utility function that gives the processor
    number of where our code is being executed. As you can see from the preceding
    code, there is no magic – it runs as a single thread and prints `Hello` and the
    current processor number.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetCurrentProcessorNumber()`是一个实用函数，可以给出我们的代码正在执行的处理器编号。正如您从前面的代码中看到的，这并没有什么神奇之处-它作为一个单线程运行，并打印`Hello`和当前处理器编号。'
- en: 'We will install `msmpisetup.exe` from the Microsoft MPI link we provided in
    the *Installing MPI on Windows* section. Once installed, we need to execute the
    following command from Command Prompt:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从*在Windows上安装MPI*部分提供的Microsoft MPI链接中安装`msmpisetup.exe`。安装完成后，我们需要从命令提示符中执行以下命令：
- en: '[PRE2]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `n` signifies the number of processors that we want the program to run
    on.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`n`表示我们希望程序在其上运行的处理器数量。
- en: 'The following is the output of the preceding code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![](img/48ac4d96-b03a-4576-9e1f-1cb7510007ca.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48ac4d96-b03a-4576-9e1f-1cb7510007ca.png)'
- en: As you can see, we can run the same program on multiple processors using MPI.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们可以使用MPI在多个处理器上运行相同的程序。
- en: Basic send/receive use
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的发送/接收使用
- en: MPI is a C++ implementation, and most of the documentation on the Microsoft
    website will only be available in C++. However, it's easy to create a .NET compiled
    wrapper and use it in any of our projects. There are some third-party .NET implementations
    available as well for MPI but, unfortunately, there is no support for .NET Core
    implementations as of now.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: MPI是一个C++实现，微软网站上的大部分文档只能用C++访问。然而，很容易创建一个.NET编译包装器并在我们的任何项目中使用它。也有一些第三方.NET实现可用于MPI，但遗憾的是，目前还没有.NET
    Core实现的支持。
- en: 'Here is the syntax of an `MPI_Send` function that sends a buffer of data to
    another processor:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`MPI_Send`函数的语法，它将一个数据缓冲区发送到另一个处理器：
- en: '[PRE3]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The method returns when the buffer can be safely reused.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当缓冲区可以安全重用时，该方法将返回。
- en: 'Here is the syntax of an `MPU_Recv` function, which will receive a buffer of
    data from another processor:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`MPU_Recv`函数的语法，它将从另一个处理器接收一个数据缓冲区：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This method doesn't return until the buffer is received.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法在缓冲区被接收之前不会返回。
- en: 'Here is a typical example of using the send and receive functions:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用发送和接收函数的典型示例：
- en: '[PRE5]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When running via MPI, the communicator will send data that will be received
    by the receive function in another processor.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过MPI运行时，通信器将发送数据，该数据将由另一个处理器中的接收函数接收。
- en: Collectives
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: 'Collectives, as the name suggests, is a communication method wherein all the
    processors in a communicator are involved. Collectives help us achieve these tasks.
    Two collective methods that are primarily used for this are as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 集合，顾名思义，是一种通信方法，其中通信器中的所有处理器都参与其中。集合帮助我们完成这些任务。用于此目的的两种主要使用的集合方法如下：
- en: '`MPI_BCAST`: This **distributes**data from one (root) process to another processor
    in a communicator'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPI_BCAST`：这个函数将数据从一个（根）进程分发到通信器中的另一个处理器'
- en: '`MPI_REDUCE`: This **combines** data from all the processors within a communicator
    and returns it to the root process'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPI_REDUCE`：这个函数将从通信器中的所有处理器中合并数据，并将其返回给根进程'
- en: Now that we understand collectives, we have come to the end of this chapter
    and ultimately the end of this book. Now, it's time to see what we have learned!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了集合，我们已经到达了本章的结尾，也是本书的结尾。现在，是时候看看我们学到了什么了！
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed distributed memory management implementations.
    We learned about distributed memory management models, such as shared memory and
    distributed memory processors, as well as their implementation. In the end, we
    discussed what an MPI is and how it can be utilized. We also discussed communication
    networks and various design considerations for implementing efficient networks.
    Now, you should have a good understanding of network topologies, routing algorithms,
    switching strategies, and flow controls.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了分布式内存管理实现。我们学习了分布式内存管理模型，如共享内存和分布式内存处理器，以及它们的实现。最后，我们讨论了MPI是什么以及如何利用它。我们还讨论了通信网络和实现高效网络的各种设计考虑。现在，您应该对网络拓扑、路由算法、交换策略和流量控制有很好的理解。
- en: In this book, we have covered various programming constructs that are available
    in .NET Core 3.1 to achieve parallel programming. Parallel programming, if used
    correctly, can greatly enhance the performance and responsiveness of applications.
    The new features and syntaxes that are available in .NET Core 3.1 really make
    writing/debugging and maintaining parallel code easier. We also covered how we
    used to write multithreaded code before TPL came into being, for comparison's
    sake.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经涵盖了.NET Core 3.1中可用的各种编程构造，以实现并行编程。如果正确使用，并行编程可以极大地提高应用程序的性能和响应能力。.NET
    Core 3.1中可用的新功能和语法确实使编写/调试和维护并行代码变得更加容易。我们还讨论了在TPL出现之前我们如何编写多线程代码，以进行比较。
- en: With new constructs for asynchronous programming (async and await), we learned
    how to take full advantage of non-blocking I/Os while the program flow is synchronous.
    Then, we discussed new features such as async streams and async main methods,
    which help us write async code more easily. We also discussed parallel tooling
    support in Visual Studio that can help us debug code better. Finally, we discussed
    how to write unit test cases for parallel code to make our code more robust.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过新的异步编程构造（async和await），我们学习了如何充分利用非阻塞I/O，同时程序流程是同步的。然后，我们讨论了诸如异步流和异步主方法之类的新功能，这些功能可以帮助我们更轻松地编写异步代码。我们还讨论了Visual
    Studio中的并行工具支持，可以帮助我们更好地调试代码。最后，我们讨论了如何为并行代码编写单元测试用例，以使我们的代码更加健壮。
- en: Then, we wrapped up this book by introducing distributed programming techniques
    and how to use them in .NET Core.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过介绍分布式编程技术以及如何在.NET Core中使用它们来结束了这本书。
- en: Questions
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: ____________ is an arrangement of multi-processors placed mostly in single containers
    but sometimes in multiple containers in close vicinity to each other.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ____________是将多处理器放置在单个容器中，但有时也放置在彼此紧邻的多个容器中的一种安排。
- en: In the case of the dynamic communication network, any node can send data to
    any other node.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动态通信网络的情况下，任何节点都可以向任何其他节点发送数据。
- en: 'True'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假
- en: Which of the following are characteristics of a communication network?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是通信网络的特征？
- en: Topology
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拓扑
- en: Switching strategy
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换策略
- en: Flow control
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流量控制
- en: Shared memory
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 共享内存
- en: In the case of the distributed memory model, the memory space is shared across
    processors.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在分布式内存模型的情况下，内存空间在处理器之间共享。
- en: 'True'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假
- en: Circuit switching can be used for asynchronous scenarios.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电路切换可以用于异步场景。
- en: 'True'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: 'False'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假
