["```js\nvar factorial = function(n) {\n  if (n == 0) {\n    // base case\n    return 1;\n  }\n  else {\n    // recursive case\n    return n * factorial(n-1);\n  }\n}\n```", "```js\nvar traverse = function(node) {\n  node.doSomething(); // whatever work needs to be done\n  node.childern.forEach(traverse); // many recursive calls\n}\n```", "```js\nvar factorial = function(n) {\n  var _fact = function(x, n) {\n    if (n == 0) {\n      // base case\n      return x;\n    }\n    else {\n      // recursive case\n      return _fact(n*x, n-1);\n    }\n  }\n  return fact(1, n);\n}\n```", "```js\ncall factorial (3)\n  call fact (3 1)\n    call fact (2 3)\n      call fact (1 6)\n        call fact (0 6)\n        return 6\n      return 6\n    return 6\n  return 6\nreturn 6\n```", "```js\ncall factorial (3)\n  call fact (3 1)\n  call fact (2 3)\n  call fact (1 6)\n  call fact (0 6)\n  return 6\nreturn 6\n```", "```js\nvar trampoline = function(f) {\n  while (f && f instanceof Function) {\n    f = f.apply(f.context, f.args);\n  }\n  return f;\n}\n```", "```js\nvar factorial = function(n) {\n  var _fact = function(x, n) {\n    if (n == 0) {\n      // base case\n      return x;\n    }\n    else {\n      // recursive case\n      return _fact.bind(null, n*x, n-1);\n    }\n  }\n  return trampoline(_fact.bind(null, 1, n));\n}\n```", "```js\nvar thunk = function (fn) {\n  return function() {\n    var args = Array.prototype.slice.apply(arguments);\n    return function() { return fn.apply(this, args); };\n  };\n};\n```", "```js\nvar factorial = function(n) {\n  var fact = function(x, n) {\n    if (n == 0) {\n      return x;\n    }\n    else {\n      return thunk(fact)(n * x, n - 1);\n    }\n  }\n  return trampoline(thunk(fact)(1, n));\n}\n```", "```js\nvar factorial = function(n) {\n  var _fact = thunk(function(x, n) {\n    if (n == 0) {\n      // base case\n      return x;\n    }\n    else {\n      // recursive case\n      return _fact(n * x, n - 1);\n    }\n  });\n  return trampoline(_fact(1, n));\n}\n```", "```js\nvar treeTraverse = function(trunk) {\n  var _traverse = thunk(function(node) {\n    node.doSomething();\n    node.children.forEach(_traverse);\n  }\n  trampoline(_traverse(trunk));\n}\n```", "```js\nvar Y = function(F) {\n  return (function (f) {\n    return f(f);\n  } (function (f) {\n    return F(function (x) {\n      return f(f)(x);\n    });\n  }));\n}\n```", "```js\nvar FactorialGen = function(factorial) {\n  return (function(n) {\n    if (n == 0) {\n      // base case\n      return 1;\n    }\n    else {\n      // recursive case\n      return n * factorial(n \u2013 1);\n    }\n  });\n};\nFactorial = Y(FactorialGen);\nFactorial(10); // 3628800\n```", "```js\nFactorial(23456); // RangeError: Maximum call stack size exceeded\n```", "```js\nvar FactorialGen2 = function (factorial) {\n  return function(n) {\n    var factorial = thunk(function (x, n) {\n      if (n == 0) {\n        return x;\n      }\n      else {\n        return factorial(n * x, n - 1);\n      }\n    });\n    return trampoline(factorial(1, n));\n  }\n};\n\nvar Factorial2 = Y(FactorialGen2)\nFactorial2(10); // 3628800\nFactorial2(23456); // Infinity\n```", "```js\nvar Ymem = function(F, cache) {\n  if (!cache) {\n    cache = {} ; // Create a new cache.\n  }\n  return function(arg) {\n    if (cache[arg]) {\n      // Answer in cache\n      return cache[arg] ; \n    }\n    // else compute the answer\n    var answer = (F(function(n){\n      return (Ymem(F,cache))(n);\n    }))(arg); // Compute the answer.\n    cache[arg] = answer; // Cache the answer.\n    return answer;\n  };\n}\n```", "```js\nvar x = 'hi';\nfunction a() {\n  console.log(x);\n}\na(); // 'hi'\n```", "```js\nvar x = 'hi';\nfunction a() {\n  console.log(x);\n}\nfunction b() {\n  var x = 'hello';\n  console.log(x);\n}\nb(); // hello\na(); // hi\n```", "```js\nfunction c() {\n  var y = 'greetings';\n  if (true) {\n    var y = 'guten tag';\n  }\n  console.log(y);\n}\n\nfunction d() {\n  var y = 'greetings';\n  function e() {\n    var y = 'guten tag';\n  }\n  console.log(y)\n}\nc(); // 'guten tag'\nd(); // 'greetings'\n```", "```js\nfunction e(){\n  var z = 'namaste';\n  [1,2,3].foreach(function(n) {\n    var z = 'aloha';\n  }\n  isTrue(function(){\n    var z = 'good morning';\n  });\n  console.log(z);\n}\ne(); // 'namaste'\n```", "```js\nvar x = 'hi';\nvar obj = function(){\n  this.x = 'hola';\n};\nvar foo = new obj();\nconsole.log(foo.x); // 'hola'\nfoo.x = 'bonjour';\nconsole.log(foo.x); // 'bonjour'\n```", "```js\nobj.prototype.x = 'greetings';\nobj.prototype.y = 'konnichi ha';\nvar bar = new obj();\nconsole.log(bar.x); // still prints 'hola'\nconsole.log(bar.y); // 'konnichi ha'\n```", "```js\nvar name = 'Ford Focus';\nvar year = '2006';\nvar millage = 123456;\nfunction getMillage(){\n  return millage;\n}\nfunction updateMillage(n) {\n  millage = n;\n}\n```", "```js\nvar car = function(){\n  var name = 'Ford Focus';\n  var year = '2006';\n  var millage = 123456;\n  function getMillage(){\n    return Millage;\n  }\n  function updateMillage(n) {\n    millage = n;\n  }\n}();\n```", "```js\n(function(){\n  var name = 'Ford Focus';\n  var year = '2006';\n  var millage = 123456;\n  function getMillage(){\n    return millage;\n  }\n  function updateMillage(n) {\n    millage = n;\n  }\n})();\n```", "```js\nvar car = function(){\n  var name = 'Ford Focus';\n  var year = '2006';\n  var millage = 123456;\n  return {\n    getMillage: function(){\n      return millage;\n    },\n    updateMillage: function(n) {\n      millage = n;\n    }\n  }\n}();\nconsole.log( car.getMillage() ); // works\nconsole.log( car.updateMillage(n) ); // also works\nconsole.log( car.millage ); // undefined\n```", "```js\n    for (var n = 4; false; ) { } console.log(n);\n    ```", "```js\n    var x = 1;\n    function foo() {\n      if (false) {\n        var x = 2;\n      }\n      return x;\n    }\n    foo(); // Return value: 'undefined', expected return value:\n    2\n    ```", "```js\n    window.a = 19;\n    console.log(a); // Output: 19\n    ```", "```js\nfunction foo(n){ return n; }\nvar foo = function(n){ return n; };\nvar foo = new Function('n', 'return n');\n```", "```js\nfunction foo(n) {\n  return n;\n}\n```", "```js\nfoo(2,3);\nfunction foo(n, m) {\n  console.log(n*m);\n}\n```", "```js\nvar bar = function(n, m) {\n  console.log(n*m);\n};\n```", "```js\nbar(2,3);\nvar bar = function(n, m) {\n  console.log(n*m);\n};\n```", "```js\nvar func = new Function('n','m','return n+m');\nfunc(2,3); // returns 5\n```", "```js\nvar func = function(n,m){return n+m};\nfunc(2,3); // returns 5\n```", "```js\nfunction foo() {\n  return 'hi';\n}\nconsole.log(foo());\nfunction foo() {\n  return 'hello';\n}\n```", "```js\nif (true) {\n  function foo(){console.log('one')};\n}\nelse {\n  function foo(){console.log('two')};\n}\nfoo();\n```", "```js\nvar foo = function bar(){ console.log('hi'); };\nfoo(); // 'hi'\nbar(); // Error: bar is not defined\n```", "```js\nvar foo = function factorial(n) {\n  if (n == 0) {\n    return 1;\n  }\nelse {\n    return n * factorial(n-1);\n  }\n};\nfoo(5);\u2029\n```"]