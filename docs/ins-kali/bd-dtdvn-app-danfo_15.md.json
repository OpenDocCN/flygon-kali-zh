["```js\n$ npx create-next-app -e with-tailwindcss twitterdashboard\n```", "```js\n$ npm run dev\n```", "```js\n$ npm i twit\n```", "```js\nconsumer_key='....',\nconsumer_secret='....',\naccess_token='.....',\naccess_token_secret='.....'\n```", "```js\nCONSUMER_KEY='Put in your CONSUMER_KEY',\nCONSUMER_SECRET='Your CONSUMER_SECRET',\nACCESS_TOKEN ='Your ACCESS_TOKEN',\nACCESS_TOKEN_SECRET='Your ACCESS_TOKEN_SECRET'\n```", "```js\n    const Twit = require('twit')\n    function clean_tweet(tweet) {\n    \u00a0\u00a0tweet = tweet.normalize(\"NFD\") //normalize text\n    \u00a0\u00a0tweet = tweet.replace(/(RT\\s(@\\w+))/g, '') //remove Rt tag followed by an @ tag\n    \u00a0\u00a0tweet = tweet.replace(/(@[A-Za-z0-9]+)(\\S+)/g, '') // remove user name e.g @name\n    \u00a0\u00a0tweet = tweet.replace(/((http|https):(\\S+))/g, '') //remove url\n    \u00a0\u00a0tweet = tweet.replace(/[!#?:*%$]/g, '') //remove # tags\n    \u00a0\u00a0tweet = tweet.replace(/[^\\s\\w+]/g, '') //remove punctuations\n    \u00a0\u00a0tweet = tweet.replace(/[\\n]/g, '') //remove newline\n    \u00a0\u00a0tweet = tweet.toLowerCase().trim() //trim text\n    \u00a0\u00a0return tweet\n    }\n    ```", "```js\n    export default function twitterAPI(req, res) {\n    \u00a0\u00a0// api code here\n    }\n    ```", "```js\n    if (req.method === \"POST\") {\n    \u00a0\u00a0\u00a0\u00a0const { username } = req.body\n\n    \u00a0\u00a0\u00a0\u00a0const T = new Twit({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0consumer_key: process.env.CONSUMER_KEY,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0consumer_secret: process.env.CONSUMER_SECRET,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0access_token: process.env.ACCESS_TOKEN,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0access_token_secret: process.env.ACCESS_TOKEN_SECRET,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0timeout_ms: 60 * 1000,\u00a0\u00a0// optional HTTP request timeout to apply to all requests.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strictSSL: true,\u00a0\u00a0\u00a0\u00a0\u00a0// optional - requires SSL certificates to be valid.\n    \u00a0\u00a0\u00a0\u00a0})\n    }\n    ```", "```js\n    T.get('search/tweets', { q: `@${username}`, tweet_mode: 'extended' }, function (err, data, response) {\n    \u00a0\u00a0let dfData = {\n    \u00a0\u00a0\u00a0\u00a0text: data.statuses.map(tweet => clean_tweet(tweet.full_text)),\n    \u00a0\u00a0\u00a0\u00a0length: data.statuses.map(tweet => clean_tweet(tweet.full_text).split(\" \").length),\n    \u00a0\u00a0\u00a0\u00a0date: data.statuses.map(tweet => tweet.created_at),\n    \u00a0\u00a0\u00a0\u00a0source: data.statuses.map(tweet => tweet.source.replace(/<(?:.|\\n)*?>/gm, '')),\n    \u00a0\u00a0\u00a0\u00a0likes: data.statuses.map(tweet => tweet.favorite_count),\n    \u00a0\u00a0\u00a0\u00a0retweet: data.statuses.map(tweet => tweet.retweet_count),\n    \u00a0\u00a0\u00a0\u00a0users: data.statuses.map(tweet => tweet.user.screen_name)\n    \u00a0\u00a0}\n    \u00a0\u00a0res.status(200).json(dfData)\n    })\n    ```", "```js\n{\n\u00a0\u00a0statuses:[{\n\u00a0\u00a0\u00a0\u00a0......\n\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0......\n\u00a0\u00a0]\n}\n```", "```js\n    $ npm i node-nlp danfojs-node\n    ```", "```js\n    const { SentimentAnalyzer } = require('node-nlp')\n    const { DataFrame } = require(\"danfojs-node\")\n    ```", "```js\n    export default async function SentimentApi(req, res) {\n\n    }\n    ```", "```js\n    if (req.method === \"POST\") {\n    \u00a0\u00a0\u00a0\u00a0const sentiment = new SentimentAnalyzer({ language: 'en' })\n    \u00a0\u00a0\u00a0\u00a0const { dfData, username } = req.body\n    \u00a0\u00a0//check if searched user is in the data\n    \u00a0\u00a0\u00a0\u00a0const df = new DataFrame(dfData)\n    \u00a0\u00a0\u00a0\u00a0let removeUserRow = df.query({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0column: \"users\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is: \"!=\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to: username\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0//filter rows with tweet length <=1\n    \u00a0\u00a0\u00a0\u00a0let filterByLength = removeUserRow.query({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0column: \"length\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is: \">\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to: 1\n    \u00a0\u00a0\u00a0\u00a0})\n    . . . . .\n    }\n    ```", "```js\n    let data = {\n    \u00a0\u00a0positive: 0,\n    \u00a0\u00a0negative: 0,\n    \u00a0\u00a0neutral: 0\n    }\n    let sent = filterByLength[\"text\"].values\n    for (let i in sent) {\n    \u00a0\u00a0const getSent = await sentiment.getSentiment(sent[i])\n    \u00a0\u00a0if (getSent.vote === \"negative\") {\n    \u00a0\u00a0\u00a0\u00a0data.negative += 1\n    \u00a0\u00a0} else if (getSent.vote === \"positive\") {\n    \u00a0\u00a0\u00a0\u00a0data.positive += 1\n    \u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0data.neutral += 1\n    \u00a0\u00a0}\n    }\n    res.status(200).json(data)\n    ```", "```js\n    {\n    \u00a0\u00a0score: 2.593,\n    \u00a0\u00a0numWords: 36,\n    \u00a0\u00a0numHits: 8,\n    \u00a0\u00a0average: 0.07202777777777777,\n    \u00a0\u00a0type: 'senticon',\n    \u00a0\u00a0locale: 'en',\n    \u00a0\u00a0vote: 'positive'\n    }\n    ```", "```js\n    {\n    \u00a0\u00a0positive: 20,\n    \u00a0\u00a0negative: 12,\n    \u00a0\u00a0neutral: 40\n    }\n    ```", "```js\nimport React from 'react'\nexport default function Search({ inputRef, handleKeyEvent, handleSubmit }) {\n\u00a0\u00a0return (\n\u00a0\u00a0\u00a0\u00a0<div className='border-2 flex justify-between p-2 rounded-md\u00a0\u00a0md:p-4'>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input id='searchInput' \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type='text' \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeholder='Search twitter user' \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className='focus:outline-none'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ref={inputRef} \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onKeyPress={handleKeyEvent}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button className='focus:outline-none' \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={() => { handleSubmit() }}>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src=\"img/search.svg\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0</button>\n\u00a0\u00a0\u00a0\u00a0</div>\n\u00a0\u00a0)\n}\n```", "```js\n    import React, { useRef, useState } from 'react'\n    import Search from '../components/Search'\n    ```", "```js\n    let [data, setData] = useState() // store tweet data from /api/tweet\n    let [user, setUser] = useState() // store twitter usersname \n    let [dataNlp, setDataNlp] = useState() // store data from /api/nlp\n    let inputRef = useRef() // monitor the current value of search input field\n    ```", "```js\n    const handleSubmit = async () => {\n    \u00a0\u00a0\u00a0\u00a0const res = await fetch(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'/api/tweet',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body: JSON.stringify({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username: inputRef.current.value\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0headers: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Content-Type': 'application/json'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0method: 'POST'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0const result = await res.json()\n    . . . . . . .\n    }\n    ```", "```js\n    const resSentiment = await fetch(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'/api/nlp',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body: JSON.stringify({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username: inputRef.current.value,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dfData: result\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0headers: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Content-Type': 'application/json'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0method: 'POST'\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0)\n    const sentData = await resSentiment.json()\n    ```", "```js\n    setDataNlp(sentData)\n    setUser(inputRef.current.value)\n    setData(result)\n    ```", "```js\n    const handleKeyEvent = async (event) => {\n    \u00a0\u00a0\u00a0\u00a0if (event.key === 'Enter') {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await handleSubmit()\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    ```", "```js\n    <Search inputRef={inputRef} handleKeyEvent={handleKeyEvent} handleSubmit={handleSubmit} />\n    ```", "```js\n    import React from \"react\"\n    import { DataFrame } from 'danfojs/src/core/frame'\n    import { Pie as PieChart } from \"react-chartjs-2\";\n    import { Bar as BarChart } from 'react-chartjs-2';\n    ```", "```js\n    export default function ValueCounts({ data, column, username, type }) {\n\n    }\n    ```", "```js\n    const df = new DataFrame(data)\n    const removeUserData = df.query({\n    \u00a0\u00a0column: \"users\",\n    \u00a0\u00a0is: \"!=\",\n    \u00a0\u00a0to: username\n    })\n    const countsSeries = removeUserData[column].value_counts()\n    const labels = countsSeries.index\n    const values = countsSeries.values\n    ```", "```js\n    const dataChart = {\n    \u00a0\u00a0\u00a0\u00a0labels: labels,\n    \u00a0\u00a0\u00a0\u00a0datasets: [{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. . . . \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data: values,\n    \u00a0\u00a0\u00a0\u00a0}]\n    \u00a0\u00a0};\n    ```", "```js\n    if (type === \"BarChart\") {\n    \u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"max-w-md\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0<BarChart data={dataChart} options={options} width=\"100\" height=\"100\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    )\n    } else {\n    \u00a0\u00a0return (<div className=\"max-w-md\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<PieChart data={dataChart} options={options} width=\"100\" height=\"100\" />\n    \u00a0\u00a0\u00a0\u00a0</div>)\n    }\n    ```", "```js\n    import dynamic from 'next/dynamic'\n    const DynamicValueCounts = dynamic(\n    \u00a0\u00a0() => import('../components/ValueCounts'),\n    \u00a0\u00a0{ ssr: false }\n    )\n    ```", "```js\n    {typeof data != \"undefined\" && <DynamicValueCounts data={data} column={\"source\"} type={\"PieChart\"} />}\n    ```", "```js\n    {typeof data != \"undefined\" && <DynamicValueCounts data={data} column={\"users\"} username={user} type={\"BarChart\"} />}\n    ```", "```js\n    import React from \"react\"\n    import { Bar as BarChart } from 'react-chartjs-2';\n    ```", "```js\n    export default function Plot({ data }) {\n    \u00a0\u00a0const dataChart = {\n    \u00a0\u00a0\u00a0\u00a0labels: Object.keys(data),\n    \u00a0\u00a0\u00a0\u00a0datasets: [{\n    \u00a0\u00a0\u00a0\u00a0. . . . . . . .\n    \u00a0\u00a0\u00a0\u00a0data: Object.values(data),\n    \u00a0\u00a0\u00a0\u00a0}]\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"max-w-md\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<BarChart data={dataChart} options={options} width=\"100\" height=\"100\" />\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0)\n    }\n    ```", "```js\n    import Plot from '../components/Plot'\n    . . . . . . \n\n    {typeof dataNlp != \"undefined\" && <Plot data={dataNlp} />}\n    ```", "```js\n    import React from \"react\";\n    import ReactTable from 'react-table-v6'\n    import { DataFrame } from 'danfojs/src/core/frame'\n    import 'react-table-v6/react-table.css'\n    ```", "```js\n    export default function DataTable({ dfData, username }) {\n\n    }\n    ```", "```js\n    const df = new DataFrame(dfData)\n    const removeUserData = df.query({\n    \u00a0\u00a0column: \"users\",\n    \u00a0\u00a0is: \"!=\",\n    \u00a0\u00a0to: username\n    })\n    const columns = removeUserData.columns\n    const values = removeUserData.values\n    ```", "```js\n    const dataColumns = columns.map((val, index) => {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Header: val,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0accessor: val,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cell: (props) => (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className={val || ''}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span>{props.value}</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. . . . . .\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0});\n    ```", "```js\n    const data = values.map(val => {\n    \u00a0\u00a0\u00a0\u00a0let rows_data = {}\n    \u00a0\u00a0\u00a0\u00a0val.forEach((val2, index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let col = columns[index];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rows_data[col] = val2;\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0return rows_data;\n    \u00a0\u00a0})\n    ```", "```js\n    <ReactTable\n    \u00a0\u00a0data={data}\n    \u00a0\u00a0columns={dataColumns}\n    \u00a0\u00a0getTheadThProps={() => {\n    \u00a0\u00a0\u00a0\u00a0return { style: { wordWrap: 'break-word', whiteSpace: 'initial' } }\n    \u00a0\u00a0}}\n    \u00a0\u00a0showPageJump={true}\n    \u00a0\u00a0showPagination={true}\n    \u00a0\u00a0defaultPageSize={10}\n    \u00a0\u00a0showPageSizeOptions={true}\n    \u00a0\u00a0minRows={10}\n    />\n    ```", "```js\n    const Table = dynamic(\n    \u00a0\u00a0() => import('../components/Table'),\n    \u00a0\u00a0{ ssr: false }\n    )\n    . . . . . . .\n    {typeof data != \"undefined\" && <Table dfData={data} username={user} />}\n    ```"]