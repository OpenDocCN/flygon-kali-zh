- en: Chapter 9. Improving Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。改善性能
- en: Performance matters as it has an impact on the reviews your app gets on the
    Google Play Store. A five-star app is what we want! On a high-end device, your
    app might be running smoothly without any trouble, but on a user's low-end device,
    things might look a little bit different. It performs slowly or runs out of memory,
    resulting in the crashing of that app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 性能很重要，因为它会影响您的应用在Google Play商店上的评价。我们想要一个五星级的应用！在高端设备上，您的应用可能会顺利运行，没有任何问题，但在用户的低端设备上，情况可能会有所不同。它可能运行缓慢或者内存不足，导致应用崩溃。
- en: '![Improving Performance](img/B04299_09_01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![改善性能](img/B04299_09_01.jpg)'
- en: 'In this chapter, you will learn the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下配方：
- en: Memory profilers and performance tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存分析器和性能工具
- en: Here comes the bad app—performance improvements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 糟糕的应用程序-性能改进
- en: Overdraw issues
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过度绘制问题
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: How can we detect whether there will be any performance issues with our app?
    What are the common problems in Android apps? And how can we fix these issues?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何检测我们的应用是否会有性能问题？Android应用程序中常见的问题是什么？我们如何解决这些问题？
- en: 'When it comes to performance, a few problems that could occur are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能方面，可能会出现一些问题，如下所示：
- en: '**Memory leaks**: Although Android comes with its own memory management system,
    memory leaks may occur.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存泄漏**：尽管Android配备了自己的内存管理系统，但可能会发生内存泄漏。'
- en: '**Out of memory exceptions**: Your app could easily run out of memory, resulting
    in a crash of your app. For example, think of processing large images on low-end
    devices.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存不足异常**：您的应用程序可能会很容易耗尽内存，导致应用程序崩溃。例如，在低端设备上处理大图像时会出现这种情况。'
- en: '**Overdraw**: Overdraw is the phenomenon of a pixel on a view being drawn more
    than once. It can result in an unresponsive or laggy user interface.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过度绘制**：过度绘制是指视图上的像素被绘制多次的现象。它可能导致用户界面无响应或延迟。'
- en: In the upcoming recipes, we will examine the problems listed here. The Android
    SDK and Android Studio come with some great tools to examine your app.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将检查这里列出的问题。Android SDK和Android Studio都配备了一些很好的工具来检查您的应用。
- en: Memory profilers and performance tools
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存分析器和性能工具
- en: Your app could suffer from memory leaks or from allocating too much memory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序可能会受到内存泄漏或分配过多内存的影响。
- en: The **Garbage Collector** (**GC**), responsible for cleaning up anything we
    do not want to use any more, is a great helper, but unfortunately, it is not perfect.
    It can only remove objects that are recognized as unreachable. Objects that are
    not cleaned up just hang around taking up space. After a while, if more and more
    objects are created, an `OutOfMemoryError` could occur, as would be the case if
    a couple of large images are attempted to load, which is a commonly seen crash
    scenario for many Android apps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**垃圾收集器**（**GC**）负责清理我们不再需要使用的任何东西，这是一个很好的帮手，但不幸的是，它并不完美。它只能删除被识别为不可达的对象。未清理的对象会一直占用空间。过一段时间，如果创建了越来越多的对象，就可能会发生`OutOfMemoryError`，就像尝试加载一些大图像时会发生的情况，这是许多Android应用程序常见的崩溃场景。'
- en: Memory leaks are somewhat difficult to find. Luckily for us, Android Studio
    comes with a memory monitor. It gives you an overview of your app's memory usage
    and some clue about memory leaks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 内存泄漏有些难以发现。幸运的是，Android Studio配备了内存监视器。它可以为您提供应用程序内存使用情况的概述，并提供一些关于内存泄漏的线索。
- en: We will be using this **Memory monitor** to find out whether unwanted GC event
    patterns are causing performance issues. In addition to this, we will use **Allocation
    Tracker** to identify where in the code the problem might be.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个**内存监视器**来找出是否不需要的GC事件模式导致了性能问题。除此之外，我们将使用**分配跟踪器**来确定代码中可能存在的问题所在。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, it would be great if you have completed any of the recipes
    from the previous chapters. If possible, it should be the recipe that consumes
    data (text and images) from the Internet, for example, the app from [Chapter 2](ch02.html
    "Chapter 2. Applications with a Cloud-based Backend"), *Applications with a Cloud-based
    Backend*. Of course, any other app will do, as we are going to examine tools that
    will inspect our app in order to improve it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，如果您已经完成了前几章中的任何一个配方，那将是很好的。如果可能的话，它应该是从互联网获取数据（文本和图像）的配方，例如[第2章](ch02.html
    "第2章。具有基于云的后端的应用程序")中的应用程序，*具有基于云的后端的应用程序*。当然，任何其他应用程序都可以，因为我们将检查工具来检查我们的应用程序以改进它。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's find out how well our app performs!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的应用程序的性能如何！
- en: Start Android Studio and open the app of your choice.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Android Studio并打开您选择的应用程序。
- en: Run your app on a device (or use a virtual Genymotion device).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上运行您的应用程序（或使用虚拟Genymotion设备）。
- en: The **Memory monitor** is situated on the **Memory** tab, which you can find
    on the **Android** tab.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**内存监视器**位于**内存**选项卡上，您可以在**Android**选项卡上找到它。'
- en: 'If it is not shown, use the *Cmd* + *6* (for Windows: *Alt* + *6*) shortcut
    to make it appear.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有显示，请使用*Cmd* + *6*（对于Windows：*Alt* + *6*）快捷键使其出现。
- en: Run your app to see the memory monitor recording your app's memory usage. In
    the following example, I have run an app that loads 200 venues (containing text
    and images) from the FourSquare API. I request 200 more of them each time I press
    the button, resulting in the peaks shown in this graph. Give me more coffee shops
    in my neighborhood, please:![How to do it...](img/B04299_09_02.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的应用程序，查看内存监视器记录您的应用程序的内存使用情况。在下面的示例中，我运行了一个从FourSquare API加载了200个场馆（包含文本和图片）的应用程序。每次我按下按钮时，我会请求200个更多的场馆，导致图表中显示的峰值。请给我更多附近的咖啡店：![如何做...](img/B04299_09_02.jpg)
- en: The app's memory usage is displayed in dark blue. The unallocated memory appears
    in light blue. The allocated memory will grow when your app starts performing
    until there is no more memory left, or it will drop when the GC has arrived and
    done its job.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用的内存使用显示为深蓝色。未分配的内存显示为浅蓝色。当您的应用开始运行时，分配的内存会增长，直到没有更多的内存，或者当GC到达并完成其工作时，它会减少。
- en: These are common events, and eventually, you call the GC yourself by clicking
    on the **Initiate GC** icon (the button on the upper-left corner of the **Memory**
    tab) on the left-hand side of the window.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些都是常见的事件，最终，您可以通过单击左侧窗口上方的“内存”选项卡上的“启动GC”图标（**Initiate GC**）来自己调用GC。
- en: It will only be suspicious if a lot of memory is allocated in a short period
    of time or if the GC events occur more often. Your app may have a memory leak.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有在短时间内分配了大量内存或GC事件更频繁时才会引起怀疑。您的应用程序可能存在内存泄漏。
- en: In the same way, you can monitor the CPU usage. You can find it on the **CPU**
    tab on the **Android** panel. If you notice very high peaks here, your app might
    be doing too much. In the following screenshot everything looks just fine:![How
    to do it...](img/B04299_09_03.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，您可以监视CPU使用情况。您可以在**Android**面板的**CPU**选项卡上找到它。如果您在这里注意到非常高的峰值，那么您的应用程序可能做得太多了。在下面的截图中，一切看起来都很好：![如何操作...](img/B04299_09_03.jpg)
- en: To learn more about memory issues, we can use another tool. From the **Tools**
    menu, choose **Android** and the **Android Device Monitor** option. This tool
    comes with a heap view, memory monitor, and allocation tracker, which are all
    tools that provide insight on the memory that your app uses.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解更多关于内存问题的信息，我们可以使用另一个工具。从“工具”菜单中，选择“Android”和“Android设备监视器”选项。该工具带有堆视图、内存监视器和分配跟踪器，这些都是提供有关应用程序使用的内存的见解的工具。
- en: If it is not selected yet, click on the **Dalvik Debug Monitor Server** (**DDMS**)
    button that appears on the top navigator bar. `DDMS` is a debugging tool that
    provides thread and heap information and a couple of other things.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未选择，请单击顶部导航栏上出现的“Dalvik调试监视器服务器”（**DDMS**）按钮。`DDMS`是一个提供线程和堆信息以及其他一些内容的调试工具。
- en: Select the **Heap** tab. On the right-hand side of the window, select your running
    app that should appear right under the device name. If you do not see your app,
    you might need to rerun your app.![How to do it...](img/B04299_09_04.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“堆”选项卡。在窗口的右侧，选择应用程序，应该会出现在设备名称的下方。如果找不到您的应用程序，可能需要重新运行您的应用程序。![如何操作...](img/B04299_09_04.jpg)
- en: Memory requests will be handled by allocating parts from a pool of memory, which
    is called a heap. At any given time, some parts of the heap are in use, while
    some are unused and therefore available for future allocations.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存请求将通过从内存池中分配部分来处理，这称为堆。在任何给定时间，堆的某些部分正在使用，而某些部分未使用，因此可供将来分配使用。
- en: The **Heap** tab can help you diagnose memory leaks by displaying how much memory
    the system has allocated for your app. Here, you can identify object types that
    get or stay allocated unexpectedly or unnecessarily. If the allocated memory keeps
    on increasing, then this is a strong indication that your app has a memory leak.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**堆**选项卡可以帮助您诊断内存泄漏，显示系统为您的应用程序分配了多少内存。在这里，您可以确定意外或不必要地分配的对象类型。如果分配的内存不断增加，那么这是您的应用程序存在内存泄漏的强烈迹象。'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If heap updates are not enabled, check out the buttons on the **Devices** tab.
    Click on the **update Heap** button (second from the left-hand side of the screenshot).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未启用堆更新，请查看“设备”选项卡上的按钮。单击“更新堆”按钮（截图左侧第二个按钮）。
- en: The heap output is displayed only after a GC event. On the heap tab, find the
    **Cause GC** button and click on it to force the GC to do its job. After this,
    the **heap** tab will look somewhat like this:![How to do it...](img/B04299_09_05.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 堆输出仅在GC事件之后显示。在堆选项卡上，找到“Cause GC”按钮并单击它以强制GC执行其工作。之后，“堆”选项卡将看起来有点像这样：![如何操作...](img/B04299_09_05.jpg)
- en: A lot of information about the app's heap usage is displayed in the preceding
    screenshot. Click on any item in the table to get further information. The information
    shown here can help you identify which parts of your app are causing too many
    allocations. Perhaps, you need to reduce the number of allocations or release
    memory earlier.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上面的截图中显示了关于应用程序堆使用情况的大量信息。单击表中的任何项目以获取更多信息。这里显示的信息可以帮助您确定应用程序的哪些部分导致了太多的分配。也许，您需要减少分配的数量或更早释放内存。
- en: To better understand what the critical parts of your app are and what stack
    trace exactly is causing the issues, you can click on the **Allocation Tracker**
    tab.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了更好地了解您的应用程序的关键部分以及确切导致问题的堆栈跟踪，您可以单击“分配跟踪器”选项卡。
- en: On that tab, click on the **Start Tracking** button.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该选项卡上，单击“开始跟踪”按钮。
- en: Interact with your app in some way by refreshing the list, going to a detail
    view or whatever it is that your app does and that you would like to measure.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以某种方式与您的应用程序进行交互，例如刷新列表，转到详细视图或您的应用程序所做的任何操作，并且您想要测量。
- en: Click on the **Get allocations** button to update the list of allocations.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“获取分配”按钮以更新分配列表。
- en: As a result of the operation that you have initiated for your app, you will
    see all the recent allocations listed here.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为您为应用程序启动的操作的结果，您将在此处看到所有最近的分配。
- en: To see the stack trace, click on any of the allocations. In the example shown
    next, we are investigating the loading of an image within a table row. The trace
    shows what type of object was allocated in which thread, and where.![How to do
    it...](img/B04299_09_06.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看堆栈跟踪，请单击任何分配。在下一个示例中，我们正在调查在表行中加载图像。跟踪显示了在哪个线程中分配了什么类型的对象以及在哪里。![如何操作...](img/B04299_09_06.jpg)
- en: If you like, you can play around a little bit to learn more about the Android
    device monitor. Now that you have seen some of the tools to measure results, let's
    have a closer look at how to deal with them and how we can avoid memory issues.
    See you at the next recipe!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，您可以玩一下，以更多了解Android设备监视器。既然您已经看到了一些测量结果的工具，让我们更仔细地看看如何处理它们以及如何避免内存问题。我们下一节再见！
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Both the **Android Device Monitor** and the memory tools that come with Android
    Studio have many more options that you could explore. These options will help
    you improve the quality and performance of your app. It will make you and your
    app users happy!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android设备监视器**和Android Studio附带的内存工具都有许多其他选项可供您探索。这些选项将帮助您提高应用程序的质量和性能。这将使您和您的应用程序用户感到满意！'
- en: See also
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 2](ch02.html "Chapter 2. Applications with a Cloud-based Backend"),
    *Applications with a Cloud-based Backend*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。具有基于云的后端的应用程序"), *具有基于云的后端的应用程序*'
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improve Quality*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章。提高质量"), *提高质量*'
- en: '[Chapter 10](ch10.html "Chapter 10. Beta Testing Your Apps"), *Beta Testing
    Your App*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。测试您的应用程序"), *测试您的应用程序*'
- en: Here comes the bad app – performance improvements
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这里是一个糟糕的应用程序 - 性能改进
- en: What are the do's and don'ts for Android application development to avoid performance
    issues, even if they may not occur on your own device? Testing Android apps is
    hard because there are so many devices out there. It is better to be safe than
    sorry, so write your code carefully.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android应用程序开发中，有哪些应该做和不应该做的事情，以避免性能问题，即使这些问题可能不会在您自己的设备上出现？测试Android应用程序很困难，因为有这么多的设备。谨慎写代码总比抱憾写代码要好。
- en: 'Some say that there are two basic rules to writing efficient code: don''t do
    the work that you don''t need to do (hence the DRY and YAGNI principles from [Chapter
    8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*) and do not
    allocate memory if you can avoid it. In addition to this, it is also interesting
    to know that there are various libraries available that will not just save you
    the time but also prove to be very efficient. Of course, reinventing the wheel
    could be error prone as well.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有人说编写高效代码有两个基本规则：不要做不需要做的工作（因此来自[第8章](ch08.html "第8章。提高质量")的DRY和YAGNI原则，*提高质量*），如果可以避免的话，不要分配内存。除此之外，还有一点很有趣，那就是有各种可用的库，它们不仅可以节省您的时间，而且还可以证明非常高效。当然，重新发明轮子也可能出现错误。
- en: Think of the `RetroFit` library, for example, that will make it much easier
    to write code to consume web services, or think of `Picasso`, an image loading
    library that will load an image from a URL with just one line of code without
    worrying too much about things such as threading, image sizing, transforming,
    or memory management.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑`RetroFit`库，它将使编写用于消耗网络服务的代码变得更加容易，或者考虑`Picasso`，这是一个图像加载库，它将通过一行代码从URL加载图像，而无需过多担心诸如线程、图像大小调整、转换或内存管理等问题。
- en: 'In general, some good practices are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，一些良好的做法如下：
- en: Optimize bitmap memory usage.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化位图内存使用。
- en: Release memory when hiding the user interface.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在隐藏用户界面时释放内存。
- en: Do not use too many nested views in your layouts.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在布局中使用太多嵌套视图。
- en: Do not create unnecessary objects, classes, or inner classes.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要创建不必要的对象、类或内部类。
- en: Use primitive types instead of objects where possible.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，使用原始类型而不是对象。
- en: Prefer static methods over virtual methods if you do not need any of the members
    of an object. Static invocations will be faster.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不需要对象的任何成员，最好使用静态方法而不是虚拟方法。静态调用会更快。
- en: Try to avoid internal getters and setters, as direct field access is much faster
    in Android.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量避免使用内部的getter和setter，因为在Android中直接访问字段要快得多。
- en: Do not use floating points if integers can do the trick.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果整数可以胜任，就不要使用浮点数。
- en: If you register a listener, then make sure you also unregister it. Register
    and unregister in the corresponding pairs of the activity lifecycle. Register,
    for example, in the `onCreate` method and unregister in the `onDestroy` method.
    Or, register in the `onResume` method and unregister in the `onPause` method.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果注册了监听器，那么一定要确保取消注册。在活动生命周期的相应对中注册和取消注册。例如，在`onCreate`方法中注册，然后在`onDestroy`方法中取消注册。或者，在`onResume`方法中注册，然后在`onPause`方法中取消注册。
- en: Provide feedback to the user if an operation takes more time than a few seconds.
    Let the user know that your app is not dead but busy! Show that something is going
    on by showing a progress indicator.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果某个操作花费的时间超过几秒钟，请向用户提供反馈。让用户知道您的应用程序并没有死机，而是在忙着处理！通过显示进度指示器来显示正在进行的操作。
- en: Always measure. Use performance tools to find out how well your app is doing.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终进行测量。使用性能工具来了解您的应用程序的表现如何。
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Android Studio tip**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android Studio提示**'
- en: 'Are you looking for something? Press *Shift* two times and start typing what
    you''re searching for. Or, to display all the recent files, use the *Cmd* + *E*
    (for Windows: *Ctrl* + *E*) shortcut.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您在寻找什么吗？按两次*Shift*键，然后开始输入您要搜索的内容。或者，要显示所有最近的文件，请使用*Cmd* + *E*（对于Windows：*Ctrl*
    + *E*）快捷键。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For this recipe, you just need to have Android Studio up and running and preferably
    a real device with Internet access.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您只需要安装并运行Android Studio，最好还有一个具有互联网访问权限的真实设备。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create a really bad application so we have something to fix. We will
    not optimize bitmap memory usage. We will use nested views a lot, do a couple
    of other really bad things, and for this recipe, we will display a list of the
    worst movies ever. Here comes the bad app:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个真正糟糕的应用程序，这样我们就有东西可以修复。我们不会优化位图内存使用。我们会大量使用嵌套视图，做一些其他非常糟糕的事情，对于这个示例，我们将显示有史以来最糟糕的电影列表。这就是糟糕的应用程序：
- en: Create a new project in Android Studio.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目。
- en: Name it `BadApp` and click on the **Next** button.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为`BadApp`，然后单击**下一步**按钮。
- en: Check the **Phone and Tablet** option and click on the **Next** button.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**手机和平板电脑**选项，然后单击**下一步**按钮。
- en: Choose **Blank Activity** and click on the **Next** button.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空白活动**，然后单击**下一步**按钮。
- en: Accept the names as is and click on the **Finish** button.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受名称并单击**完成**按钮。
- en: 'Open the `activity_main.xml` layout and replace the content with a list view
    that has a nice background color within a relative layout that has another nice
    background color. We are doing this because we want to demonstrate the overview
    issue in the next recipe:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`布局，并用一个具有漂亮背景颜色的列表视图替换内容，该列表视图位于具有另一个漂亮背景颜色的相对布局中。我们这样做是因为我们想在下一个示例中演示概述问题：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new layout file and name it `adapter.xml`. Let''s have some nested
    views and lots of background colors. All for the bad app:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的布局文件，命名为`adapter.xml`。让我们有一些嵌套视图和许多背景颜色。都是为了糟糕的应用程序。
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the `AndroidManifest.xml` file and add a permission for Internet access:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AndroidManifest.xml`文件，并添加对互联网访问的权限：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new class and name it `BadMovie`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新类，命名为`BadMovie`：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create an adapter class and name it `MainAdapter`. We will be using a `ViewHolder`
    class, and we will create a separate thread to load each movie image from the
    Net:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个适配器类，命名为`MainAdapter`。我们将使用`ViewHolder`类，并创建一个单独的线程从网络加载每个电影图像：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `MainActivity` file, add a private member that will contain all the
    movies:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`文件中，添加一个包含所有电影的私有成员：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the implementation to the `onCreate` method to add a couple of thousand
    bad movies, creating an adapter for them and telling the list view about it:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中添加实现，以添加几千部糟糕的电影，为它们创建一个适配器，并告诉列表视图相关信息：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now run your app. According to the users at **Internet Movie Database** (**IMDB**),
    these are the worst comedy movies ever. We have added the movies many times on
    purpose to create a huge list where each row uses a primitive way of loading thumbnails
    from the Internet as shown in the following screenshot:![How to do it...](img/B04299_09_07.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行您的应用程序。根据**互联网电影数据库**（**IMDB**）的用户，这些是有史以来最糟糕的喜剧电影。我们故意多次添加了这些电影，以创建一个巨大的列表，其中每一行都使用了从互联网加载缩略图的原始方法，如下图所示：![操作步骤...](img/B04299_09_07.jpg)
- en: Depending on the device you are testing your app on, you need to scroll for
    a while or maybe the error appears right away.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您测试应用程序的设备，您可能需要滚动一段时间，或者错误可能会立即出现。
- en: 'This is what sooner or later appears in **LogCat**. Check the log after your
    app has crashed. Use the *Cmd* + *6* shortcut (for Windows: *Alt* +*6*) to display
    **LogCat**. It will show you something like this:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是迟早会出现在**LogCat**中的。在应用程序崩溃后，检查日志。使用*Cmd* + *6*快捷键（对于Windows：*Alt* + *6*）显示**LogCat**。它会显示类似于这样的内容：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And here is where it happens:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是发生的地方：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Have a look at the Memory and CPU Monitor as well. Your device is having a hard
    time. This is how it looks if you scroll through the list.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要查看内存和CPU监视器。您的设备很难受。如果您滚动列表，就会出现这种情况。
- en: 'The following screenshot provides the **Memory** report:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图提供了**内存**报告：
- en: '![How to do it...](img/B04299_09_08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/B04299_09_08.jpg)'
- en: 'The following screenshot provides the **CPU** report:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图提供了**CPU**报告：
- en: '![How to do it...](img/B04299_09_09.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/B04299_09_09.jpg)'
- en: Well, this is what you get if you want to load full-size images multiple times.
    Since we are displaying thumbs anyway, there is not need for that and your device
    cannot handle it. Let's fix that.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想多次加载全尺寸图像，就会得到这样的结果。由于我们无论如何都显示缩略图，因此没有必要这样做，而且您的设备无法处理。让我们来解决这个问题。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are also having a threading issue as the wrong images may appear on the rows.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还存在线程问题，因为错误的图像可能出现在行上。
- en: Although the best solution is to have a server return thumbnails instead of
    large images, we will not always be in the position to control that, in particular
    when dealing with third-party sources. So, one way to solve the memory issue is
    to set the `inSampleSize` property for `BitmapFactory Options` when loading the
    bitmap in the `MainAdapter` class, just like we did in the recipes of previous
    chapters.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管最好的解决方案是让服务器返回缩略图而不是大图像，但我们并不总能控制这一点，特别是在处理第三方来源时。因此，解决内存问题的一种方法是在`MainAdapter`类中加载位图时为`BitmapFactory
    Options`设置`inSampleSize`属性，就像我们在前几章的示例中所做的那样。
- en: However, it will be even more efficient to use the `Picasso` library here. `Picasso`
    is a popular image library that will simplify the process for us. Among other
    things, it will load an image from the Internet in a separate thread and will
    shrink it to the size of its container, here the image view in the adapter layout.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，在这里使用`Picasso`库将更加高效。`Picasso`是一个流行的图像库，将简化我们的流程。除其他功能外，它将在单独的线程中从互联网加载图像，并将其缩小到其容器的大小，这里是适配器布局中的图像视图。
- en: 'Open the `build.gradle` file in the `app` folder and add the dependency for
    `Picasso`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app`文件夹中的`build.gradle`文件，并添加`Picasso`的依赖项：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save the file and click on the **Sync now** link that appears.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并单击出现的**立即同步**链接。
- en: 'Open the `MainAdapter` class and replace the thread (and anything within it)
    that loads the image with just one line. Use the *Alt* + *Enter* shortcut to add
    the `Picasso` import:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainAdapter`类，并用一行代码替换加载图像的线程（以及其中的任何内容）。使用*Alt* + *Enter*快捷键添加`Picasso`导入：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That is it. `Picasso` will take care of downloading and resizing the images.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样。`Picasso`将负责下载和调整图像的大小。
- en: Now run the app again and scroll through the list as much as you want. Both
    the memory and the threading problem have been solved. And the list view does
    scroll smoothly.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次运行应用程序，并随意滚动列表。内存和线程问题都已解决。列表视图可以平滑滚动。
- en: You will come to know what difference this makes if you have a look at both
    the **Memory** and the **CPU** tabs of the **Android** panel.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果查看**Android**面板的**内存**和**CPU**选项卡，您将了解到这样做的区别。
- en: 'The following screenshot provides the **Memory** report:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图提供了**内存**报告：
- en: '![How to do it...](img/B04299_09_10.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/B04299_09_10.jpg)'
- en: 'The following screenshot provides the **CPU** report:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图提供了**CPU**报告：
- en: '![How to do it...](img/B04299_09_11.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](img/B04299_09_11.jpg)'
- en: We just fixed our app, which is now capable of displaying a huge list of bad
    movies. In the next recipe, we will check whether we have any overdraw issues
    with the app. On older or less powerful devices, these issues may occur.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚修复了我们的应用程序，现在能够显示一大堆糟糕的电影。在下一个教程中，我们将检查应用程序是否存在过度绘制问题。在旧的或性能较差的设备上，可能会出现这些问题。
- en: There's more...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`Picasso` also has some other interesting features such as creating round images,
    rotated images, or displaying error or placeholder images automatically.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Picasso`还有一些其他有趣的功能，比如创建圆形图像，旋转图像，或者自动显示错误或占位图像。'
- en: An alternative to `Picasso` is the `Universal Image Loader` library.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`Picasso`的替代方案是`Universal Image Loader`库。'
- en: '`RetroFit` is a strongly recommended library for API communication. It is a
    REST client for Android and Java and it could save you a lot of time and headaches.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`RetroFit`是一个强烈推荐的用于API通信的库。它是Android和Java的REST客户端，可以节省大量时间和头疼。'
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Android Studio tip**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android Studio提示**'
- en: 'Want to refactor your code? Use the shortcut *Ctrl* + *T* (for Windows: *Ctrl*
    + *Alt* + *Shift* + *T*) to see what options you have. You can, for example, rename
    a class or method or extract code from a method.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 想要重构你的代码吗？使用快捷键*Ctrl* + *T*（对于Windows：*Ctrl* + *Alt* + *Shift* + *T*）来查看你有哪些选项。例如，你可以重命名一个类或方法，或者从一个方法中提取代码。
- en: Overdraw issues
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过度绘制问题
- en: The interface of your app needs to render quickly, and interaction, such as
    scrolling through a list, for example, should run smoothly. In particular, older
    or low-end devices often have a hard time to do these things right. An unresponsive
    or slow UI can be the result, which is often caused by something that is called
    overdraw.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序的界面需要快速渲染，例如，滚动列表时的交互应该运行顺畅。特别是旧的或低端设备经常很难做到这些。无响应或缓慢的用户界面可能是结果，这通常是由所谓的过度绘制引起的。
- en: Overdraw is the phenomenon of a pixel on a view being drawn more than once.
    A colored background with a view on top of that has another background color is
    an example of overdraw (the pixel is drawn twice), but that's not really an issue.
    Too much overdraw, however, will have an impact on your app's performance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 过度绘制是指视图上的像素被绘制多次的现象。一个带有另一个背景颜色的视图的彩色背景就是过度绘制的一个例子（像素被绘制两次），但这并不是真正的问题。然而，过度绘制过多会影响应用程序的性能。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need to have a real device and you need to complete the `The Bad` app
    from the previous recipe to demonstrate overdraw issues, but you can examine any
    other app as well if you like.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要有一个真实的设备，并且需要完成前一个教程中的`The Bad`应用程序，以演示过度绘制问题，但如果愿意，你也可以检查任何其他应用程序。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Your device contains a couple of interesting developer options. One of them
    is the **Debug GPU overdraw** option which can be obtained by following next steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你的设备包含一些有趣的开发者选项。其中之一是**调试GPU过度绘制**选项，可以通过以下步骤获得：
- en: On your device, open the **Settings** app.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的设备上，打开**设置**应用程序。
- en: Select **Developer options**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开发者选项**。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the **Developer options** item is not available on your device, you need
    to go to **About device** first and click seven times on **Build number**. Once
    you're done, go back. A new option called **Developer options** now appears in
    the list.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的设备上没有**开发者选项**项目，你需要先进入**关于设备**，然后点击**版本号**七次。完成后，返回。现在列表中会出现一个名为**开发者选项**的新选项。
- en: Find the **Debug GPU overdraw** option and click on it:![How to do it...](img/B04299_09_12.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到**调试GPU过度绘制**选项并点击它：![如何做...](img/B04299_09_12.jpg)
- en: In the dialog that pops up, select the **Show overdraw** area.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的对话框中，选择**显示过度绘制**区域。
- en: 'Now, your device looks a little bit like a 3D movie without the corresponding
    glasses, but what actually is being shown here is this: colors indicate the amounts
    of overdraw, where no color means no overdraw (a pixel is painted only once),
    blue shows an overdraw of 1, green an overdraw of 2, light red an overdraw of
    3, and dark red an overdraw of 4 times or even more.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的设备看起来有点像没有相应眼镜的3D电影，但实际上显示的是：颜色表示过度绘制的数量，没有颜色表示没有过度绘制（像素只被绘制一次），蓝色表示过度绘制1次，绿色表示过度绘制2次，浅红色表示过度绘制3次，深红色表示过度绘制4次甚至更多。
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A maximum overdraw of 2 times is acceptable, so let's concentrate on the red
    sections.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最多过度绘制2次是可以接受的，所以让我们集中在红色部分。
- en: Run the app you would like to examine. For this recipe, I have chosen to examine
    the `The Bad` app from the previous recipe, shown as follows:![How to do it...](img/B04299_09_13.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行你想要检查的应用程序。在这个教程中，我选择了前一个教程中的`The Bad`应用程序进行检查，如下所示：![如何做...](img/B04299_09_13.jpg)
- en: Yeah, that is pretty bad. Every view has its own background color, resulting
    in overdraw.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，情况非常糟糕。每个视图都有自己的背景颜色，导致过度绘制。
- en: Android is smart enough to reduce some overdraw cases, but for complex apps,
    you need to fix them yourself. When you look at the layout for both the activity
    and adapter from the previous recipe, this cannot be that difficult.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android足够智能，可以减少一些过度绘制的情况，但对于复杂的应用程序，你需要自己解决。当你查看前一个教程中的活动和适配器的布局时，这并不难。
- en: First, open the `activity_main.xml` layout file. Remove the `background` property
    from the list view, since it is not being used anyway. Also, remove the background
    property from the `RelativeLayout` file, as I do not like orange any way, at least
    not for apps.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`activity_main.xml`布局文件。删除列表视图中的`background`属性，因为它根本没有被使用。同时，也从`RelativeLayout`文件中删除背景属性，因为我不喜欢橙色，至少不适合应用程序。
- en: Remove the `background` property from the `main_text_genre`, `main_text_director`,
    and the `main_text_actors` text views. Also, remove the `background` property
    from their parent view, which is the last `TableRow` appearing within `TableLayout`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`main_text_genre`、`main_text_director`和`main_text_actors`文本视图中删除`background`属性。同时，从它们的父视图中删除`background`属性，即出现在`TableLayout`中的最后一个`TableRow`。
- en: If you rerun the app, the app not only does the layout somewhat better, but
    you will also notice that there is less indication of overdraw.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果重新运行应用程序，应用程序不仅会布局得更好一些，而且你还会注意到过度绘制的迹象减少了。
- en: 'Let''s check whether we can make further improvements. Change `FrameLayout`
    at the root to `RelativeLayout`. Get rid of `TableLayout` and position the text
    views relatively:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查一下是否可以进一步改进。将根部的`FrameLayout`更改为`RelativeLayout`。摆脱`TableLayout`并相对定位文本视图：
- en: '[PRE11]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run your app again. It is getting better and better, is it not?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行您的应用程序。它变得越来越好了，不是吗？
- en: To further improve your app, remove all `text` properties. They were only there
    to check whether we were doing the right thing using the `layout_toRightOf` and
    `layout_below` properties.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进一步改进您的应用程序，请删除所有`text`属性。它们只是用来检查我们是否在使用`layout_toRightOf`和`layout_below`属性时做对了。
- en: In this recipe, we have further improved our bad app by optimizing its layout.
    Also, it is no longer ugly. Actually, it has become quite good.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们通过优化布局进一步改进了我们的糟糕应用程序。而且，它不再难看。实际上，它变得相当不错。
- en: What layout type to use?
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用哪种布局类型？
- en: Using `RelativeLayout` is more effective than `LinearLayout` but unfortunately
    it is not so developer friendly if, for example, you want to move or remove a
    text view that another view is referring to using a relative property.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`RelativeLayout`比`LinearLayout`更有效，但不幸的是，如果，例如，您想要移动或删除另一个视图引用的文本视图，则对开发人员不太友好。
- en: The `FrameLayout` is much less complex, but it does not have this problem, and
    it seems to perform as well as `RelativeLayout`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`FrameLayout`要简单得多，但它没有这个问题，而且似乎表现和`RelativeLayout`一样好。'
- en: On the other hand it is not intented to contain many child widgets. Please be
    aware that in the end what counts is the smallest number of nested layout views,
    so you should pick the container that suits your needs and performs best.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，它并不打算包含许多子部件。请注意，最终重要的是最小数量的嵌套布局视图，因此您应该选择适合您的需求并且性能最佳的容器。
- en: Awesome! Our app runs smoothly on all devices. We do not expect any weird errors
    any more.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的应用程序在所有设备上都运行流畅。我们不再期望出现任何奇怪的错误。
- en: Now let's ship it to our beta users to find out what they think of it. We will
    find out once we have completed the final chapter, where we will discuss *adhoc
    distribution*.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将其发送给我们的Beta用户，看看他们对此的看法。一旦我们完成最后一章，我们将讨论*临时分发*，我们就会知道了。
- en: There's more...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are more interesting tools that you perhaps would like to examine in order
    to improve the quality and performance of your app.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多有趣的工具，也许您想检查以改进应用程序的质量和性能。
- en: We have mentioned `Espresso` before. `Robotium` is another Android test automation
    framework for UI testing purposes. You can find it at [http://robotium.com](http://robotium.com).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过`Espresso`。`Robotium`是另一个用于UI测试的Android测试自动化框架。您可以在[http://robotium.com](http://robotium.com)找到它。
- en: See also
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章。提高质量"), *提高质量*'
- en: '[Chapter 10](ch10.html "Chapter 10. Beta Testing Your Apps"), *Beta Testing
    Your App*'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。测试您的应用程序的Beta版"), *测试您的应用程序的Beta版*'
