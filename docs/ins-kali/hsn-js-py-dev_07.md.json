["```js\nconst Officer = function(name, rank, posting) {\n  this.name = name\n  this.rank = rank\n  this.posting = posting\n  this.sayHello = () => {\n    console.log(this.name)\n  }\n}\n\nconst Riker = new Officer(\"Will Riker\", \"Commander\", \"U.S.S. Enterprise\")\n```", "```js\nconst Officer = function(name, rank, posting) {\n  this.name = name\n  this.rank = rank\n  this.posting = posting\n  this.sayHello = () => {\n    alert(this.name)\n  }\n}\n\nconst Riker = new Officer(\"Will Riker\", \"Commander\", \"U.S.S. Enterprise\")\n\nRiker.sayHello()\n```", "```js\nconst Officer = function(name, rank, posting) {\n  this.name = name\n  this.rank = rank\n  this.posting = posting\n\n  this.ask = () => {\n    const values = ['name','rank','posting']\n\n    let answer = prompt(\"What would you like to know about this officer?\")\n    answer = answer.toLowerCase()\n\n    if (values.indexOf(answer) < 0) {\n      alert('Value not found')\n    } else {\n      alert(this[answer])\n    }\n  }\n}\n\nconst Riker = new Officer(\"Will Riker\", \"Commander\", \"U.S.S. Enterprise\")\n\nRiker.ask()\n```", "```js\nanswer = answer.toLowerCase()\n```", "```js\nif (values.indexOf(answer) < 0) {\n  alert('Value not found')\n} else {\n  alert(this[answer])\n}\n...\n\n```", "```js\nfunction fibonacci(num) {\n  let a = 1, b = 0, temp\n\n  while (num >= 0) {\n    temp = a\n    a = a + b\n    b = temp\n    num--\n  }\n\n  return b\n}\n\nlet response = prompt(\"How many numbers?\")\nalert(`The Fibonacci number is ${fibonacci(response)}`)\n\n```", "```js\nfunction fibonacci(num) {\n  let a = 1, b = 0, temp\n\n  while (num >= 0) {\n    temp = a\n    a = a + b\n    b = temp\n    num--\n  }\n\n  return b\n}\n\nlet response = prompt(\"How many numbers?\")\n\nwhile (typeof(parseInt(response)) !== \"number\" || !Number.isInteger(parseFloat(response))) {\n  response = prompt(\"Please enter an integer:\")\n}\n\nalert(`The Fibonacci number is ${fibonacci(response)}`)\n```", "```js\nconst a = [1, 3, 5, 7, 9]\nconst b = [2, 5, 7, 9, 14]\n\n// compute the products of each permutation for efficient retrieval\n\nconst products = { }\n\n// ...\n\nconst getProducts = function(a,b) {\n  // make an efficient means of retrieval\n  // ...\n}\n\n// bonus: get an arbitrary key/value pair. If nonexistent, compute it and store it.\n```", "```js\nconst makeProducts = function(array1, array2) {\n  array1.forEach( (multiplicant) => {\n    if (!products[multiplicant]) {\n      products[multiplicant] = { }\n    }\n    array2.forEach( (multiplier) => {\n      if (!products[multiplier]) {\n        products[multiplier] = { }\n      }\n      products[multiplicant][multiplier] = multiplicant * multiplier\n      products[multiplier][multiplicant] = products[multiplicant]\n       [multiplier]\n    })\n  })\n}\n```", "```js\n{\n  x: {\n    y: z\n  },\n  y: {\n    x: z\n  }\n}\n```", "```js\nif (!products[multiplicant]) {\n    products[multiplicant] = { }\n}\n```", "```js\nif (!products[multiplier]) {\n    products[multiplier] = { }\n}\n```", "```js\nproducts[multiplicant][multiplier] = multiplicant * multiplier\nproducts[multiplier][multiplicant] = products[multiplicant][multiplier]\n```", "```js\nmakeProducts(a,b)\n```", "```js\nconst getProducts = function(a,b) {\n  // make an efficient means of retrieval\n  if (products[a]) {\n    return products[a][b] || null\n  }\n  return null\n}\n```", "```js\n01: const a = [1, 3, 5, 7, 9]\n02: const b = [2, 5, 7, 9, 14]\n03: \n04: // compute the products of each permutation for efficient retrieval\n05: \n06: const products = { }\n07: \n08: const makeProducts = function(array1, array2) {\n09:     array1.forEach( (multiplicant) => {\n10:         if (!products[multiplicant]) {\n11:             products[multiplicant] = { }\n12:         }\n13:         array2.forEach( (multiplier) => {\n14:             if (!products[multiplier]) {\n15:                 products[multiplier] = { }\n16:             }\n17:             products[multiplicant][multiplier] = multiplicant * \n                 multiplier\n18:             products[multiplier][multiplicant] = products[multiplicant]\n                 [multiplier]\n19:         })\n20:     })\n21: }\n22: \n23: const getProducts = function(a,b) {\n24:     // make an efficient means of retrieval\n25:     if (products[a]) {\n26:         return products[a][b] || null\n27:     }\n28:     return null\n29: }\n30: \n31: makeProducts(a,b)\n```", "```js\n1: const a = [1, 3, 5, 7, 9]\n2: const b = [2, 5, 7, 9, 14]\n3: \n4: // compute the products of each permutation for efficient retrieval\n5: \n6: const products = {}\n7: \n```", "```js\n08: const makeProducts = async function(array1, array2) {\n09:     const promises = []\n10:     array1.forEach((multiplicant) => {\n11:         if (!products[multiplicant]) {\n12:             products[multiplicant] = {}\n13:         }\n14:         array2.forEach(async (multiplier) => {\n15:             if (!products[multiplier]) {\n16:                 products[multiplier] = {}\n17:             }\n18: \n19:             promises.push(new Promise(resolve => \n                 resolve(calculation(multiplicant, multiplier))))\n20:             promises[promises.length - 1].then((val) => {\n21:                 products[multiplicant][multiplier] = products[\n                      multiplier][multiplicant] = val\n22:             })\n23:         })\n24:     })\n25:     return promises\n26: }\n```", "```js\n37: async function calculation(value1, value2) {\n38:     await new Promise(resolve => setTimeout(resolve, 2000))\n39:     return value1 * value2\n40: }\n```", "```js\npromises.push(new Promise(resolve => resolve(calculation(multiplicant, multiplier))))\n```", "```js\n20: promises[promises.length - 1].then((val) => {\n21:     products[multiplicant][multiplier] = products[multiplier]\n         [multiplicant] = val\n22: })\n```", "```js\n42: makeProducts(a,b).then((arrOfPromises) => {\n43:     Promise.all(arrOfPromises).then(() => {\n44:         console.log(`${a[4]} x ${b[0]} = ${getProducts(a[4], b[0])}`)\n             // 18\n45:     })\n46: })\n```", "```js\nfunction someFunc() {\n  let outerVar = 1;\n  function zip() {\n    let innerVar = 2;\n  }\n}\n```", "```js\nfunction someFunc() {\n  function zip() {\n    function foo() {\n    }\n  }\n  function quux() {\n  }\n}\n```", "```js\nfunction someFunc() {\n  let bar = 1;\n\n  function zip() {\n    alert(bar); // 1\n    let beep = 2;\n\n    function foo() {\n      alert(bar); // 1\n      alert(beep); // 2\n    }\n  }\n}\n```", "```js\n  function sayHello(name) {\n    const sayAlert = function() {\n      alert(greeting)\n    }\n\n    let greeting = `Hello ${name}`\n    return sayAlert\n  }\n\n  sayHello('Alice')()\n  alert(greeting)\n```", "```js\nfunction someFunc() {\n  let bar = 1;\n\n  function zip() {\n    alert(bar); // 1\n    let beep = 2;\n\n    function foo() {\n      alert(bar); // 1\n      alert(beep); // 2\n    }\n  }\n\n  return zip\n}\n\nfunction sayHello(name) {\n  const sayAlert = function() {\n    alert(greeting)\n  }\n\n  const sayZip = function() {\n    someFunc.zip()\n  }\n\n  let greeting = `Hello ${name}`\n  return sayAlert\n}\n```"]