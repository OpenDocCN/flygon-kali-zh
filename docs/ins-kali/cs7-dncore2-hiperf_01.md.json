["```cs\nInstall-Package Microsoft.AspNetCore.All -Version 2.0.0\n```", "```cs\n<TargetFramework>netcoreapp2.0</TargetFramework>\n```", "```cs\n{ \n  \"sdk\": { \n    \"version\": \"2.0.0\" \n  } \n} \n```", "```cs\n<ItemGroup> \n  <DotNetCliToolReference Include=\n  \"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" /> \n</ItemGroup> \n```", "```cs\ndotnet new \n```", "```cs\ndotnet new mvc \n```", "```cs\ndotnet restore \n```", "```cs\npublic class IndexModel : PageModel \n{ \n  public string GetTitle() => \"Home Page\"; \n}\n```", "```cs\n@page \n@model IndexModel \n@{ \n  ViewData[\"Title\"] = Model.GetTitle(); \n} \n```", "```cs\n<LangVersion>latest</LangVersion>\n```", "```cs\nservices.AddDbContextPool<SampleDbContext>( \n  options => options.UseSqlServer(connectionString)); \n```", "```cs\nstatic void Main(string[] args) \n{ \n  var person = GetPerson(); \n  Console.WriteLine($\"ID : {person.Item1}, \n  Name : {person.Item2}, DOB : {person.Item3}\");       \n} \nstatic (int, string, DateTime) GetPerson() \n{ \n  return (1, \"Mark Thompson\", new DateTime(1970, 8, 11)); \n}\n```", "```cs\nstatic void Main(string[] args) \n{ \n  var person = GetPerson(); \n  Console.WriteLine($\"ID : {person.id}, Name : {person.name}, \n  DOB : {person.dob}\");  \n} \nstatic (int id, string name, DateTime dob) GetPerson() \n{ \n  return (1, \"Mark Thompson\", new DateTime(1970, 8, 11)); \n} \n```", "```cs\nclass Person \n{ \n  public int ID { set; get; } \n  public string Name { get; set; } \n\n  public DateTime DOB { get; set; } \n} \nPerson class that contains three properties, namely ID, Name, and DOB (Date of Birth).\n```", "```cs\nif (person is null) return; \n```", "```cs\nif (!(person.ID is int i)) return; \n\nConsole.WriteLine($\"Person ID is {i}\"); \n```", "```cs\nif (!(person.ID is int i) && !(person.DOB>DateTime.Now.AddYears(-20))) return;   \n```", "```cs\nif (person is var Person) Console.WriteLine($\"It is a person object and type is {person.GetType()}\"); \n```", "```cs\npublic ref Person GetPersonInformation(int ID); \n\nFollowing is the implementation of the GetPersonInformation method that uses the ref keyword while returning the person's object.  \n\nPerson _person; \npublic ref Person GetPersonInformation(int ID) \n{ \n  _person = CallPersonHttpService(); \n  return ref _person; \n} \n```", "```cs\npublic class PersonManager \n{ \n  //Member Variable \n  Person _person; \n\n  //Constructor \n  PersonManager(Person person) => _person = person; \n\n  //Destructor \n  ~PersonManager() => _person = null; \n} \n```", "```cs\nprivate String _name; \npublic String Name \n{ \n  get => _name; \n  set => _name = value; \n} \n```", "```cs\nprivate String _name; \npublic String Name \n{ \n  get => _name; \n  set => _name = value ?? throw new ArgumentNullException(); \n} \n```", "```cs\nstatic void Main(string[] args) \n{ \n  Console.WriteLine(ExecuteFactorial(4));          \n} \n\nstatic long ExecuteFactorial(int n) \n{ \n  if (n < 0) throw new ArgumentException(\"Must be non negative\", \n  nameof(n)); \n\n  else return CheckFactorial(n); \n\n  long CheckFactorial(int x) \n  { \n    if (x == 0) return 1; \n    return x * CheckFactorial(x - 1); \n  } \n}\n```", "```cs\npublic void GetPerson() \n{ \n  int year; \n  int month; \n  int day; \n  GetPersonDOB(out year, out month, out day); \n} \n\npublic void GetPersonDOB(out int year, out int month, out int day ) \n{ \n  year = 1980; \n  month = 11; \n  day = 3; \n} \n```", "```cs\npublic void GetPerson() \n{ \n  GetPersonDOB(out int year, out int month, out int day); \n} \n```", "```cs\npublic static void Main();\npublic static void Main(string[] args);\npublic static int Main();\npublic static int Main(string[] args);\n```", "```cs\npublic static Task Main();\npublic static Task Main(string[] args);\npublic static Task<int> Main();\npublic static Task<int> Main(string[] args);\n```", "```cs\npublic class Program\n{\n  public static async Task Main(string[] args)\n  {\n    await BuildWebHost(args).RunAsync();\n  }\n  public static IWebHost BuildWebHost(string[] args) =>\n    WebHost.CreateDefaultBuilder(args)\n    .UseStartup<Startup>()\n    .Build();\n}\n```", "```cs\npublic enum Status \n{ \n  Create =1, \n  Update =2, \n  Delete =3, \n} \n```"]