- en: Communication and Advocacy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沟通和倡导
- en: We do not write code in isolation. We are embedded in a highly chaotic social
    world in which we must communicate with other people constantly. Our software
    itself will, via its interfaces, be part of this communication. Furthermore, if
    we operate within a team, a workplace, or a community, we are liable to the challenges
    of effective communication.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是孤立地编写代码。我们生活在一个高度混乱的社会世界中，必须不断与其他人沟通。我们的软件本身将通过其接口成为这种沟通的一部分。此外，如果我们在团队、工作场所或社区中工作，我们将面临有效沟通的挑战。
- en: 'The most significant way in which communication has an effect on our code bases
    is in the setting of requirements and the raising of issues and feedback. Software
    development is essentially one very elongated feedback process, where every change
    is precipitated by a communication:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 沟通对我们的代码库产生最重要影响的方式是设定要求、提出问题和反馈。软件开发本质上是一个非常长期的反馈过程，每一次变更都是由一次沟通引发的：
- en: '![](assets/f40a4db5-ca16-4aa5-a21d-b09940e7f46a.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f40a4db5-ca16-4aa5-a21d-b09940e7f46a.png)'
- en: In this chapter, we'll learn how to effectively collaborate and communicate
    with others, how to plan and set requirements, some common collaboration pitfalls,
    and their solutions. We'll also learn how to identify and raise larger issues
    that are preventing us from writing clean JavaScript. Throughout this chapter,
    we will hopefully begin to appreciate our individually vital roles in the feedback
    cycle of software development.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习如何有效地与他人合作和沟通，如何规划和设定要求，一些常见的合作陷阱及其解决方案。我们还将学习如何识别和提出阻碍我们编写清晰JavaScript的更大问题。在整个本章中，我们希望开始意识到我们在软件开发反馈周期中的重要角色。
- en: 'In this chapter, we''ll see the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到以下主题：
- en: Planning and setting requirements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划和设定要求
- en: Communication strategies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沟通策略
- en: Identifying issues and driving change
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别问题并推动变革
- en: Planning and setting requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划和设定要求
- en: 'One of the most common communication struggles resides in the process of deciding
    what to actually build. Programmers will typically spend a lot of time meeting
    with managers, designers, and other stakeholders to transform a genuine user need
    into a workable solution. Ideally, this process would be simple: *User has [problem];
    We create [solution]. End of story!* Unfortunately, however, it can be far more
    complicated.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的沟通困难之一在于决定到底要构建什么。程序员通常会花费大量时间与经理、设计师和其他利益相关者会面，将真正的用户需求转化为可行的解决方案。理想情况下，这个过程应该很简单：*用户有[问题]；我们创建[解决方案]。故事结束！*不幸的是，实际情况可能要复杂得多。
- en: There are numerous technical constraints and biases of communication that can
    make even seemingly simple projects turn into punishingly long struggles. This
    is as relevant to the JavaScript programmer as any other programmer, for we now
    operate at a level of systemic complexity that was previously only the domain
    of enterprise programmers wielding Java, C#, or C++. The landscape has changed,
    and so the humble JavaScript programmer must now be prepared to pick up new skills
    and ask new questions about the systems they build.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在看似简单的项目中，也会有许多技术约束和沟通偏见，使得项目变得异常艰难。这对JavaScript程序员和其他程序员同样重要，因为我们现在操作的系统复杂性水平以前只有企业程序员才能使用Java、C#或C++。形势已经改变，因此谦卑的JavaScript程序员现在必须准备学习新技能，并就他们构建的系统提出新问题。
- en: Understanding user needs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解用户需求
- en: 'Establishing user needs is vital but it is often taken for granted. It''s typical
    for programmers and other project members to assume they understand a certain
    user need without really digging into the details, so it''s useful to have a process
    to fall back on. For each ostensible *need* or *problem*, we should ensure that
    we understand the following aspects:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 确立用户需求至关重要，但往往被视为理所当然。程序员和其他项目成员通常会假设他们了解某个用户需求，而实际上并没有深入了解细节，因此有一个备用的流程是很有用的。对于每一个表面上的*需求*或*问题*，我们应该确保理解以下方面：
- en: '**Who are our users?**: What characteristics do they have? What devices do
    they use?'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我们的用户是谁？**：他们有什么特点？他们使用什么设备？'
- en: '**What are they trying to do?**: What actions are they trying to carry out?
    What''s their ultimate goal?'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**他们试图做什么？**：他们试图执行什么行动？他们的最终目标是什么？'
- en: '**How do they currently do it?**: What set of steps are they currently taking
    to reach their goal? Are there any notable issues with their current method?'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**他们目前是如何做的？**：他们目前采取了哪些步骤来实现他们的目标？目前的方法是否存在明显问题？'
- en: '**What problems do they experience doing it this way?**: Does it take a long
    time? Is it cognitively expensive? Is it difficult to use?'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**他们以这种方式遇到了什么问题？**：需要很长时间吗？认知成本高吗？使用起来困难吗？'
- en: At the beginning of the book, we asked ourselves to consider why we wrote code,
    and we explored what it means to truly understand the nature of our problem domain.
    Ideally, we should be able to step inside the shoes of our users, experience the
    problem domain ourselves, and then craft working solutions from firsthand experience.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在书的开头，我们问自己为什么要编写代码，并探讨了真正理解问题领域本质的含义。理想情况下，我们应该能够站在用户的角度，亲身体验问题领域，然后从第一手经验中制定可行的解决方案。
- en: Unfortunately, we are not always able to talk directly to our users or walk
    in their shoes. Instead, we may rely on intermediates such as project managers
    and designers. And so, we are dependent upon their communication efficacy to relay
    the user needs to us in a way that allows us to build a correct solution.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们并不总能直接与用户交谈或亲身体验。相反，我们可能依赖项目经理和设计师等中间人。因此，我们依赖他们的沟通效果，以便将用户需求传达给我们，从而使我们能够构建正确的解决方案。
- en: 'Here we see how the needs of our users, combined with the technical and business
    constraints, flow into an idea that is built into a solution and iterated upon.
    The translation of **User Needs** to **Idea** is vital, as is the process of feedback
    that allows us to iterate and improve upon our solution:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到了我们用户的需求，结合技术和业务约束，流入一个构建成解决方案并进行迭代的想法。将**用户需求**转化为**想法**至关重要，反馈过程使我们能够对解决方案进行迭代和改进：
- en: '![](assets/6113395e-408d-4552-bcb2-47547245a696.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6113395e-408d-4552-bcb2-47547245a696.png)'
- en: Since user needs are crucial to the process of development, we have to think
    carefully about how we balance these with other constraints. It is usually impossible
    to build the ideal solution, catering well to every single user. Almost every
    piece of software, whether presented as a GUI or API, is a compromise in which
    the average user is well catered to, inevitably meaning that the edge case users
    are left being only partially served by the solution. It's important to consider
    how we can adequately accommodate as many users' needs as possible, delicately balancing
    constraints such as time, money, and technical capability.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户需求对开发过程至关重要，我们必须仔细考虑如何平衡这些需求和其他约束。通常不可能构建出完美的解决方案，能够很好地满足每个用户的需求。几乎每个软件，无论是作为GUI还是API呈现，都是一种折衷，平均用户得到很好的满足，不可避免地意味着边缘情况的用户只能得到部分满足。重要的是要考虑如何尽可能充分地满足尽可能多的用户需求，巧妙地平衡时间、金钱和技术能力等约束。
- en: Following our understanding of user needs, we can begin to design and implement
    prototypes and models of how a system may work. We'll briefly discuss the process
    of doing this next.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解用户需求之后，我们可以开始设计和实现系统可能运行的原型和模型。接下来我们将简要讨论这个过程。
- en: Quick prototypes and PoCs
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速原型和PoC
- en: 'Software, and especially the web platform, provides us with the benefit of
    a quick build cycle. We can go from concept to UI in a very short amount of time.
    This means that ideas can be brought to life during the process of brainstorming,
    almost in real time. We can then place these prototypes in front of real users,
    get real feedback, and then iterate quickly towards an optimal solution. Truly,
    the forte of the web platform—the triad of HTML, CSS, and JavaScript—is that it
    allows a quick and hacky solution that can be iterated on easily, and can work
    on multiple platforms and devices:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 软件，尤其是Web平台，为我们提供了快速的构建周期的好处。我们可以在很短的时间内从概念到UI。这意味着在头脑风暴的过程中，想法可以几乎实时地变为现实。然后我们可以将这些原型放在真实用户面前，获得真实反馈，然后快速迭代，朝着最佳解决方案迈进。事实上，Web平台的优势——HTML、CSS和JavaScript的三位一体——在于它允许快速而粗糙的解决方案，并且可以轻松进行迭代，并且可以在多个平台和设备上运行：
- en: '![](assets/b0411eaa-25df-43a5-a514-6869b2044791.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0411eaa-25df-43a5-a514-6869b2044791.png)'
- en: 'It''s easy to get weighed down by the variety and complexity of JavaScript
    frameworks and libraries; the sheer burden of them can force us to move at a much
    slower pace. That''s why, when prototyping, it''s often better to stick to a simpler
    stack that you already understand well. If you''re accustomed to a framework,
    or if you are prepared to sink some time into learning, then it is worth utilizing
    one of many available skeletal boilerplate starter repositories as your starting
    point. Here are some examples:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易被JavaScript框架和库的多样性和复杂性所压倒；它们的沉重负担会迫使我们进展缓慢。这就是为什么在原型设计时，最好坚持使用你已经很了解的更简单的技术栈。如果你习惯于某个框架，或者你准备花时间学习，那么值得利用现有的骨架模板作为起点。以下是一些例子：
- en: React boilerplate ([github.com/react-boilerplate/react-boilerplate](http://github.com/react-boilerplate/react-boilerplate))
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React boilerplate ([github.com/react-boilerplate/react-boilerplate](http://github.com/react-boilerplate/react-boilerplate))
- en: Angular bootstrap boilerplate ([github.com/mdbootstrap/Angular-Bootstrap-Boilerplate](http://github.com/mdbootstrap/Angular-Bootstrap-Boilerplate))
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular bootstrap boilerplate ([github.com/mdbootstrap/Angular-Bootstrap-Boilerplate](http://github.com/mdbootstrap/Angular-Bootstrap-Boilerplate))
- en: Ember boilerplate ([github.com/mirego/ember-boilerplate](http://github.com/mirego/ember-boilerplate))
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember boilerplate ([github.com/mirego/ember-boilerplate](http://github.com/mirego/ember-boilerplate))
- en: Svelte template ([github.com/sveltejs/template](http://github.com/sveltejs/template))
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Svelte template ([github.com/sveltejs/template](http://github.com/sveltejs/template))
- en: These each offer a relatively simple project template that you can use to very
    quickly set up a new prototype. Even though the tooling used within each one involves
    multiple build tools and framework options, the setup cost is minimal and so the
    time it takes to start tackling the real problem domain of your project is kept
    very short. There are, naturally, similar boilerplates and example applications
    you can find for server-side Node.js projects, isomorphic web applications, and
    even robotic or hardware projects.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模板都提供了一个相对简单的项目模板，可以让你非常快速地设置一个新的原型。尽管每个模板中使用了多个构建工具和框架选项，但设置成本很低，因此开始解决项目的真正问题领域所需的时间非常短。当然，你也可以找到类似的骨架模板和示例应用程序，适用于服务器端Node.js项目、同构Web应用程序，甚至是机器人或硬件项目。
- en: Now that we've explored the technical process of planning and setting requirements,
    we can move on to discover some vital communication strategies that'll help us
    collaborate with others on our code bases.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了规划和需求设置的技术过程，我们可以继续探讨一些重要的沟通策略，这些策略将帮助我们在我们的代码库上与他人合作。
- en: Communication strategies
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沟通策略
- en: 'We intuitively know that communication is vital to an effective project and
    a clean code base, yet it is annoyingly common to find ourselves in situations
    such as the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直觉地知道沟通对于一个有效的项目和清晰的代码库是至关重要的，然而，很常见的情况是我们发现自己处于以下情况：
- en: We don't feel listened to
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们觉得自己没有被倾听到
- en: We don't feel we've got our point across
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们觉得自己没有表达清楚
- en: We feel confused as to a topic or plan
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们对某个主题或计划感到困惑
- en: We feel out of the loop or ignored
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们感到不在圈内或被忽视
- en: 'These difficulties come about because of cultures and practices of poor communication.
    This is not only an issue for morale and general fulfillment in our work but can
    also become a huge issue for the cleanliness of our code bases and the reliability
    of the technology we build. To foster a clean code base, we must focus on the
    underlying communication practices that we employ. A good set of communication
    strategies and practices are incredibly useful in ensuring a clean code base,
    specifically helping us with the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些困难是由于文化和不良沟通习惯造成的。这不仅影响了我们工作中的士气和整体满足感，还可能对我们构建的代码库的整洁性和技术的可靠性造成巨大问题。为了培养一个干净的代码库，我们必须专注于我们采用的基础沟通实践。一套良好的沟通策略和实践对确保一个干净的代码库非常有用，特别是帮助我们做到以下几点：
- en: Ensuring good feedback with colleagues
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保与同事良好的反馈
- en: Receiving correct bug reports
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收正确的错误报告
- en: Actioning improvements and fixes
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行改进和修复
- en: Receiving user requirements and wishes
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收用户需求和愿望
- en: Announcing changes or issues
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宣布变化或问题
- en: Agreeing on conventions and standards
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就约定和标准达成一致
- en: Making decisions about libraries and frameworks
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对库和框架做出决策
- en: But how do we actually accomplish good communication? We are inherently biased
    toward our own socialized communication practices, so it can be difficult to change
    or even see that we have issues with our communication. For this reason, it is
    useful to identify a set of communication strategies and pitfalls that can re-bias
    us towards better and higher signal communication.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何实际实现良好的沟通呢？我们在本质上偏向于我们自己社会化的沟通实践，所以改变或甚至看到我们的沟通存在问题可能是困难的。因此，识别一套沟通策略和陷阱，可以让我们重新偏向更好和更高信号的沟通，这是非常有用的。
- en: '**High signal** communication is any piece of communication that compresses
    a lot of highly valuable or insightful information in a minimally noisy fashion.
    Expressing a bug report in a brief and highly objective paragraph may be an example
    of high signal, while expressing it as a three-part essay with rhetoric and opinion
    thrown in is an example of low signal.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**高信号**沟通是指在最小噪音的情况下压缩大量高价值或富有洞察力的信息的任何沟通。用简洁和高度客观的段落表达错误报告可能是高信号的一个例子，而用三部分的散文和夹杂着观点的表达则是低信号的一个例子。'
- en: Listen and respond
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 倾听并回应
- en: Whether in online or offline conversations, it is quite easy to fall into a
    trap where we end up talking *over* each other instead of *to* each other. A good
    and useful conversation is one where the participants are truly listening to each
    other, instead of merely awaiting their turn to talk.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是在线还是线下对话，很容易陷入一个陷阱，我们最终是在互相交谈而不是互相交流。一个良好而有用的对话是参与者真正倾听彼此，而不仅仅是等待自己说话的轮到。
- en: 'Consider the following conversation between **Person #1** and **Person #2**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下**人员#1**和**人员#2**之间的对话：
- en: '**Person #1**: *We should use the React framework for this, it has a proven
    track record.*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人员#1**：*我们应该使用React框架，它有着良好的记录。*'
- en: '**Person #2**: *I agree about its track record. Shall we explore any other
    options, weighing up their pros and cons*?'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人员#2**：*我同意它的记录。我们是否应该探讨其他选项，权衡它们的利弊呢？*'
- en: '**Person #1**: *React is really fast, well-documented, and the API is really
    usable. I love it*.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人员#1**：*React非常快速，文档完善，API非常易用。我喜欢它。*'
- en: 'Here **Person #1** is not paying attention to what **Person** **#2** is saying.
    Instead, they are just continuing with their existing train of thought, reiterating
    their preference for the React framework. It would be more conducive to good teamwork
    and a healthier project if **Person #1** made an effort to listen to **Person
    #2**''s points and then respond specifically to them. Compare the preceding conversation
    with the following one:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里**人员#1**没有注意**人员#2**在说什么。相反，他们只是继续他们现有的思路，重申他们对React框架的偏好。如果**人员#1**努力倾听**人员#2**的观点，然后具体回应他们，这将更有利于团队合作和项目的健康。将上述对话与以下对话进行比较：
- en: '**Person #1**: *We should use the React framework for this, it has a proven
    track record.*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人员#1**：*我们应该使用React框架，它有着良好的记录。*'
- en: '**Person #2**: *I agree about its track record. Shall we explore any other
    options, weighing up their pros and cons?*'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人员#2**：*我同意它的记录。我们是否应该探讨其他选项，权衡它们的利弊呢？*'
- en: '**Person #1**: *That''d be a good idea, what other frameworks do you think
    we should consider?*'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人员#1**：*那是个好主意，你认为我们应该考虑哪些其他框架呢？*'
- en: 'Here, **Person #1** is being receptive, and not purely talking *over* **Person
    #2**. This shows a much-needed sensitivity and conversational attention. This
    may seem obvious, or even inane, but you may be surprised how often we end up
    speaking over each other and the costs it inflicts us with. Consider taking an
    observational role in your next meeting, observe instances where people fail to
    properly pay attention, listen, or respond. You may be surprised by its prevalence.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**人员#1**是接受的，而不仅仅是在**人员#2**上面说话。这显示了一种非常需要的敏感性和对话关注。这可能看起来很明显，甚至无聊，但你可能会惊讶地发现我们经常互相打断对方，这给我们带来了什么代价。考虑在下次会议中扮演一个观察者的角色，观察人们未能正确地关注、倾听或回应的情况。你可能会对它的普遍性感到惊讶。
- en: Explain from the user's perspective
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从用户的角度解释
- en: 'In almost every piece of online or offline communication you have in regards
    to a code base, the user should be the most important thing. The purpose of our
    work is to fulfill the expectations of the user and deliver to them a user experience
    that is intuitive and functional. This is relevant, regardless of whether our
    end-product is a piece of consumer software or a developer API. The user remains
    our priority. It is, however, incredibly common to find ourselves in situations
    where there is a decision to be made and we don''t know how to make it; we end
    up relying on gut instinct or our own biased beliefs. Consider the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在关于代码库的几乎每一次在线或离线沟通中，用户应该是最重要的事情。我们的工作目的是满足用户的期望，并为他们提供直观和功能性的用户体验。这一点很重要，无论我们的最终产品是消费者软件还是开发者API。用户始终是我们的首要任务。然而，我们经常发现自己处于需要做出决定而不知道如何做出决定的情况；我们最终依赖直觉或自己的偏见。请考虑以下内容：
- en: Of course users should have to fulfill our password strength requirements
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然用户应该满足我们的密码强度要求
- en: Of course our API should be strictly type-checked
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然我们的API应该严格检查类型
- en: Of course we should use a dropdown component for country selection
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然，我们应该为国家选择使用下拉组件
- en: These may seem like fairly unobjectionable statements, but we should always
    seek to qualify them from the perspective of the user. If we cannot do this, then
    there's a strong possibility that the decision holds no water and should be challenged.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能看起来是相当无可非议的声明，但我们应该始终从用户的角度来限定它们。如果我们做不到这一点，那么决定很可能站不住脚，应该受到质疑。
- en: 'For each of the preceding statements, we can defend our reasoning as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述每一条声明，我们可以如下辩护我们的推理：
- en: '**Of course users should have to fulfill our password strength requirements**:
    Users with stronger passwords will end up being more secure against brute-force
    password attacks. While we as a service need to ensure secure storage of passwords,
    it is the user''s responsibility, and very much in their interest, to ensure a
    strong password.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当然用户应该满足我们的密码强度要求**：拥有更强密码的用户将更安全地抵御暴力破解密码攻击。虽然我们作为服务方需要确保密码的安全存储，但确保密码强度是用户的责任，也符合他们的利益。'
- en: '**Of course our API should be strictly type-checked**: A strictly type-checked
    API will ensure that users get more informative warnings about incorrect usage
    and can thus reach their desired goal sooner.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当然我们的API应该严格检查类型**：严格检查类型的API将确保用户获得更多关于不正确使用的警告，从而更快地达到他们的目标。'
- en: '**Of course we should use a dropdown component for country selection**: A dropdown
    is an established convention that users have come to expect. We could always augment
    this with an autocompletion feature as well.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当然我们应该为国家选择使用下拉组件**：下拉是用户已经习惯的传统。我们也可以随时增加自动完成功能。'
- en: Notice how we are expanding upon our of course statements with reasoning that
    relates specifically to the user. It's easy for us to walk around making assertions
    about how things should be without actually backing up our claims with strong
    reasoning. Doing this can lead to pointless and badly argued opposition. It is
    better to always reason about our decisions from the user's perspective so that,
    if there is an argument, we are arguing based on what's best for the user and
    not merely what opinions are most popular, or held most strongly. Always explaining
    from the perspective of the user also helps to instill a culture where we and
    our colleagues are constantly thinking about the user, regardless of whether we're
    programming a deeply specialized API or developing a generic GUI.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何通过与用户相关的推理来扩展我们的“当然”的声明。我们很容易在周围断言事物应该如何，而实际上并没有用强有力的推理支持我们的主张。这样做可能导致毫无意义且论据不足的反对。最好始终从用户的角度推理我们的决定，这样，如果有争论，我们就是基于对用户最有利的事情进行争论，而不仅仅是最受欢迎或最坚定的观点。始终从用户的角度解释也有助于灌输一种文化，即我们和同事们始终在思考用户，无论我们是在编写深度专业的API还是开发通用的GUI。
- en: Have small and focused communications
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行简短而专注的沟通
- en: Similar in spirit to the *single responsibility principle* that we use when
    coding, our communications should ideally only be about one thing at a time. This
    greatly improves understanding among participants and will ensure that any decisions
    that are made relate specifically to the matter at hand. Additionally, keeping
    meetings or communications short ensures that people will be able to pay attention
    for the entire duration. Long meetings, just like long emails, eventually cause
    boredom and irritation. And with each topic or tangent added, the chances of each
    item being individually resolved dwindles massively. It's important to remember
    this when raising issues and bugs as well. Keep it simple.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们编码时使用的“单一责任原则”类似，我们的沟通理想上应该一次只涉及一件事。这将极大地提高参与者之间的理解，并确保所做出的任何决定都与手头的问题有关。此外，保持会议或沟通的简短确保人们能够在整个持续时间内保持注意力。长时间的会议，就像长篇的电子邮件一样，最终会引起厌倦和烦躁。随着每个话题或话题的增加，每个问题被单独解决的机会也会大大减少。在提出问题和错误时记住这一点很重要。保持简单。
- en: Ask stupid questions and have wild ideas
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提出愚蠢的问题，提出大胆的想法
- en: 'There''s a tendency, especially in professional environments, to feign a great
    level of confidence and understanding. This can be to the detriment of knowledge
    transfer. If everyone is pretending to be masterful, then nobody will take the
    humble position that''s required to learn. It''s so valuable to be honest (and
    even stupid) in our lines of questioning. If we''re new additions to a team or
    are confused about an area of a code base, it''s important to ask the questions
    we truly have so that we can build the understanding necessary to be productive
    and reliable in our tasks. Without this understanding, we''ll flail about, probably
    causing bugs and other problems. If everyone in a team takes a position of feigned
    confidence, the team will very quickly become ineffective, with nobody able to
    resolve their questions or confusions:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在专业环境中，有一种倾向，即假装有很高的信心和理解。这可能对知识传递有害。如果每个人都假装自己是熟练的，那么没有人会采取学习所需的谦卑立场。在我们的质疑中诚实（甚至愚蠢）是非常有价值的。如果我们是团队的新成员或者对代码库的某个区域感到困惑，重要的是提出我们真正有的问题，这样我们才能建立必要的理解，以便在我们的任务中成为高效和可靠的人。没有这种理解，我们将挣扎不已，可能会引起错误和其他问题。如果团队中的每个人都采取了假装自信的立场，团队很快就会变得无效，没有人能够解决他们的问题或困惑：
- en: '![](assets/dfcc0d61-a646-4777-a8f2-ba13caad3aa0.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dfcc0d61-a646-4777-a8f2-ba13caad3aa0.png)'
- en: This type of questioning we want to aim towards can be called **open questioning***; *a
    process in which we maximally divulge our ignorances so that we may gain as much
    understanding as possible in a given area. And similarly to such open questioning,
    we can say there is also **open ideating**, wherein we maximally explore and divulge
    any ideas that we have with the hope of some subset being useful.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要朝着的这种质疑可以称为**开放性质疑**；*一个过程，在这个过程中，我们尽可能地揭示我们的无知，以便在给定领域获得尽可能多的理解。类似于这样的开放性质疑，我们也可以说还有**开放性构思**，在这种构思中，我们尽可能地探索和揭示我们所拥有的任何想法，希望其中的一些子集是有用的。
- en: Sometimes it's the ideas left unsaid that are the most effective. Generally,
    if you feel an idea or question is too stupid or wild to say, it's usually a good
    idea to say it. The worst-case scenario (the downside) is that it is an inapplicable
    or obvious question or idea. But the best-case scenario (the upside) is that you've
    either gained understanding, asked a question that many people had on their minds
    (and thus aided their understanding), or have come up with an idea that drastically
    transforms the efficacy of the team or the quality of the code base. The upsides
    of being open are assuredly worth the downsides.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，未说出口的想法是最有效的。通常，如果你觉得一个想法或问题太愚蠢或太疯狂，不值得说出来，通常最好说出来。最坏的情况（下行）是它是一个不适用或显而易见的问题或想法。但最好的情况（上行）是你要么获得了理解，要么问了很多人心中的问题（从而帮助了他们的理解），要么提出了一个极大地改变了团队效率或代码质量的想法。开放性的好处绝对值得坏处。
- en: Pair programming and 1:1s
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配对编程和1:1s
- en: Much of a programmer's time is taken up by the isolated pursuit of writing code.
    This is, to many programmers, their ideal situation; they are able to block out
    the rest of the world and find fluid productivity, writing logic with speed and
    fluency. One risk of this isolation, however, is that vital knowledge of a code
    base or system can accrue in the minds of the few. Without being distributed,
    there is a risk that the code base will become increasingly specialized and complex,
    limiting the ability of newcomers and colleagues to navigate it with ease. For
    this reason, it is essential to consider how to transfer knowledge effectively
    between programmers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员的大部分时间都被孤立地写代码所占据。对许多程序员来说，这是他们理想的情况；他们能够屏蔽掉世界的其他部分，找到流畅的生产力，以速度和流畅度编写逻辑。然而，这种孤立的风险是，代码库或系统的重要知识可能会积累在少数人的头脑中。如果不进行分发，代码库将变得越来越专业化和复杂，限制新人和同事轻松地导航。因此，有效地在程序员之间传递知识是至关重要的。
- en: 'As discussed previously in the book, we already have a number of formal ways
    to transfer knowledge regarding a piece of code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在书中之前讨论的，我们已经有了许多正式的方法来传递关于一段代码的知识：
- en: Via documentation, in all its forms
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过文档，以各种形式
- en: Via the code itself, including comments
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过代码本身，包括注释
- en: Via tests, including unit and E2E variants
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过测试，包括单元测试和端到端测试
- en: Even though these mediums, if built correctly, can be effective in relaying
    knowledge, there appears to always be a need for something else. The basic human
    convention of ad hoc communication is a method that has stood the test of time
    and still remains one of the most effective methods.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这些媒介，如果构建正确，可以有效地传递知识，似乎总是需要其他东西。临时沟通的基本人类约定是一种经受时间考验的方法，仍然是最有效的方法之一。
- en: One of the best ways to learn about a new code base is through **pair programming**,
    an activity in which you sit alongside a more experienced programmer and collaborate
    together on bug fixes or feature implementations. This is especially useful for
    the unfamiliar programmer, as they are able to benefit from the existing knowledge
    and experience of their programming partner. Pair programming is also useful when
    there is an especially complex issue to solve. Having two or more brains tackling
    the problem can drastically increase problem-solving ability and limit the possibility
    of bugs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 了解新代码库的最佳方法之一是通过**配对编程**，这是一种活动，在这种活动中，你坐在一个经验更丰富的程序员旁边，一起合作修复错误或实现功能。对于不熟悉的程序员来说，这是特别有用的，因为他们能够从他们的编程伙伴的现有知识和经验中受益。当需要解决一个特别复杂的问题时，配对编程也是有用的。有两个或更多的大脑来解决问题可以极大地增加解决问题的能力，并限制错误的可能性。
- en: Even outside of pair programming, generally having a Q&A or teacher-student dynamic
    can be very useful. Setting aside time to talk to individuals who have the knowledge
    you desire and asking them pointed but exploratory questions will usually yield
    a lot of understanding. Do not underestimate the power of a focused conversation
    with someone that has the knowledge you desire.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不是在配对编程的情况下，通常进行问答或师生动态可能非常有用。抽出时间与拥有你所需知识的个人交谈，并向他们提出有针对性但探索性的问题通常会产生很多理解。不要低估与拥有你所需知识的人进行专注对话的力量。
- en: Identifying issues and driving change
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别问题和推动变革
- en: A large part of being a programmer is identifying issues and fixing them. As
    part of our work, we employ many different moving parts, many of which will be
    maintained by other teams or individuals, and as such, we'll need to be effective
    in identifying and raising issues with code and systems that we don't have a full
    understanding of. Much like anything we do as programmers, the way in which we
    articulate these issues must take into consideration the target audience (user)of the
    issue or bug report that we're expressing. When we begin to see these pieces of
    communication as user experiences in their own right, we'll start to be genuinely
    effective communicators.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员的重要部分是识别问题并解决它们。作为我们工作的一部分，我们使用许多不同的移动部件，其中许多将由其他团队或个人维护，因此，我们需要有效地识别和提出对我们没有完全理解的代码和系统的问题。就像我们作为程序员所做的任何事情一样，我们表达这些问题的方式必须考虑到目标受众（用户）。当我们开始将这些沟通片段视为用户体验时，我们将开始成为真正有效的沟通者。
- en: Raising bugs
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提出错误报告
- en: 'Raising bugs is a skill. It can be done poorly or effectively. To illustrate
    this, let''s consider two issues on GitHub. Each of them raise the same issue
    but do so in drastically different ways. This is the first variant:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 提出错误是一种技能。它可以做得很差或有效。为了说明这一点，让我们考虑GitHub上的两个问题。它们中的每一个都提出了相同的问题，但方式大不相同。这是第一个变体：
- en: '![](assets/e412bfef-b4c9-4bfe-8e0e-ebf9e5935d16.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e412bfef-b4c9-4bfe-8e0e-ebf9e5935d16.png)'
- en: 'This is the second variant:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二种变体：
- en: '![](assets/1edb0db7-ebaa-4444-b58e-1dc50e8e4eeb.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1edb0db7-ebaa-4444-b58e-1dc50e8e4eeb.png)'
- en: As a maintainer of this code base, which bug report would you prefer to receive?
    Obviously the second. Yet we see, time and time again, thousands of bug reports
    and raised issues on open source projects that not only fail to accurately relay
    the issue at hand but are impatiently worded and disrespectful of the time and
    efforts of the project owner.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这个代码库的维护者，你更希望收到哪个错误报告？显然是第二个。然而我们看到，一次又一次，成千上万的错误报告和对开源项目提出的问题不仅未能准确传达问题，而且用词急躁，不尊重项目所有者的时间和努力。
- en: 'Generally, when raising a bug it is best to include, at minimum, the following
    information:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在提出错误时，最好至少包括以下信息：
- en: '**Problem summary**: You should briefly summarize the problem being experienced
    in regular prose so that the issue can be quickly understood and triaged (possibly
    by someone who is not adept at diagnosing or fixing the exact issue).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题总结：你应该简要总结正常散文中遇到的问题，以便可以快速理解和分级（可能是由不擅长诊断或修复确切问题的人）。
- en: '**Steps taken**: You should show the exact code that could be used to reproduce
    the actual behavior that you receive. The reader of your bug should be able to
    take your shared code or input parameters and reproduce the behavior themselves.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已采取的步骤**：您应该展示可以用来重现您收到的实际行为的确切代码。您的错误的读者应该能够使用您共享的代码或输入参数来重现行为。'
- en: '**Expected behavior**: You should demonstrate what you would expect the behavior
    or output to be, given the input.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期行为：您应该演示在给定输入的情况下您期望的行为或输出。
- en: '**Actual behavior**: You should demonstrate the incorrect output or behavior
    that you observed.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际行为：您应该演示您观察到的不正确的输出或行为。
- en: 'Here''s an example of such a bug report for a fictional `sum()` function:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个虚构的`sum()`函数的错误报告的示例：
- en: '**Problem summary**: `sum()` does not behave intuitively when given null inputs'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题总结：`sum()`在给定空输入时表现不直观
- en: '**Steps taken**: Called `sum(null, null)`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已采取的步骤**：调用`sum(null, null)`'
- en: '**Expected behavior**: `sum(null,  null)` should return `NaN`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期行为：`sum(null, null)`应返回`NaN`
- en: '**Actual behavior**:`sum(null, null)` returns `0`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际行为：`sum(null, null)`返回`0`
- en: It may also be useful to include information about the environment in which
    the code is running, including hardware and software (for example, *MacBook 2013
    Retina, Chrome version 43.01*). The entire purpose of raising a bug is to communicate
    an unexpected or incorrect behavior with a level of accuracy and detail that'll
    allow a swift resolution. If we limit the amount of information we provide, or
    are outright rude, we drastically decrease the probability of our issue being
    resolved.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以包括有关代码运行环境的信息，包括硬件和软件（例如，*MacBook 2013 Retina，Chrome版本43.01*）。提出错误的整个目的是以准确和详细的方式传达意外或不正确的行为，以便能够迅速解决。如果我们限制提供的信息量，或者直接无礼，我们大大降低了问题被解决的可能性。
- en: Apart from the specific steps we should take when raising issues, there is also
    a wider question around how we should drive and inspire systemic change in a piece
    of software or a culture. We'll be exploring this next.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提出问题时应采取的具体步骤外，还有一个更广泛的问题，即我们应该如何在软件或文化中推动和激发系统性变革。我们将在接下来探讨这个问题。
- en: Driving systemic change
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推动系统性变革
- en: 'A bug is usually considered a self-contained technical issue with a piece of
    hardware or software. There are, however, larger or more systemic issues that
    we face every day, and these can be expressed in terms of a culture or in terms
    of the everyday conventions and patterns that we employ throughout a system. Here
    are some fictional examples of issues from within a typical IT consultancy:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，bug被认为是一个与硬件或软件的特定技术问题。然而，我们每天面临的更大或更系统性的问题可以用文化的术语或我们在整个系统中采用的日常惯例和模式来表达。以下是一些典型IT咨询公司内部问题的虚构例子：
- en: We tend to use typefaces throughout our designs that are inaccessible
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在设计中经常使用不可访问的字体
- en: We have a hundred different standards for how to write good JavaScript
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一百种不同的标准来编写良好的JavaScript
- en: We seem to always forget to update third-party dependencies
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们似乎总是忘记更新第三方依赖
- en: We don't feed back into the open source community
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们没有回馈到开源社区
- en: These issues are slightly too broad or subjective to be expressed as definitive
    *bugs*, so we'll need to explore other means to surface them and get them resolved.
    It may be useful to think of such systemic issues as opportunities for growth
    instead of *bugs*, as this can vastly affect how on-board people are with your
    proposed changes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题稍微过于宽泛或主观，无法表达为明确的*bug*，因此我们需要探索其他方法来展现它们并解决它们。将这样的系统性问题视为成长的机会而不是*bug*可能会对人们对你提出的变化有多大影响。
- en: 'Broadly, the steps involved in creating systemic change are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，创建系统性变革涉及的步骤如下：
- en: '**QUALIFY: Articulate the problem with specific examples**: Find examples that
    demonstrate the problem you''re trying to describe. Ensure that these examples
    plainly show the issue and aren''t too complex. Describe the problem in a way
    that makes sense even to people that aren''t fully immersed in the *problem domain*.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**资格：用具体例子阐明问题**：找到能够展示你试图描述的问题的例子。确保这些例子清楚地显示问题，不要太复杂。以一种即使对于完全沉浸在*问题领域*之外的人也能理解的方式描述问题。'
- en: '**FEEDBACK: Gather feedback from other people**: Gather thoughts and suggestions
    from other people. Ask them open questions such as *What do you think about [...]?*.
    Accept the possibility that there is no problem, or the problem you''re encountering
    is best viewed in some other way.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**反馈：从他人那里收集反馈**：从他人那里收集想法和建议。向他们提出开放式问题，比如*你对[...]有什么看法？*。接受可能不存在问题，或者你遇到的问题最好以其他方式看待。'
- en: '**IDEATE: Collaborate on possible solutions**: Source ideas on possible solutions
    from multiple people. Don''t try to reinvent the wheel. Sometimes the simplest
    solutions are the best. It''s also highly likely that systemic issues cannot be
    solved in a purely technical way. You may need to consider social and communicative
    solutions.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构思：共同探讨可能的解决方案**：从多个人那里收集关于可能解决方案的想法。不要试图重复造轮子。有时候最简单的解决方案也是最好的。很可能系统性问题不能仅通过技术手段解决。你可能需要考虑社会和沟通方面的解决方案。'
- en: '**RAISE: Raise the problem alongside possible solutions**: Depending on what
    the problem is, raise it to the appropriate people. This may be via a team meeting,
    a 1:1 chat, or online communication. Ensure that you are raising the issue in
    a non-confrontational way and with a focus on improvement and growth.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提出：提出问题以及可能的解决方案**：根据问题的性质，将其提出给适当的人。这可以通过团队会议、一对一交流或在线沟通来进行。确保以一种非对抗的方式提出问题，并专注于改进和成长。'
- en: '**IMPLEMENT:** **Collaboratively pick a solution and begin work**: Presuming
    that you are still considering this problem is worth pursuing, you can begin to
    implement the most preferred solution, possibly in an isolated and *Proof of Concept*
    kind of way. For example, if the problem being tackled was *We have a hundred
    different standards for how to write good JavaScript,* then you could begin to
    collaboratively implement a singular set of standards using a linter or formatter,
    reaching out for feedback along the way, and then slowly updating older code to
    align with these standards.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施：共同选择解决方案并开始工作**：假设你仍然认为这个问题值得追求，你可以开始实施最优选的解决方案，可能是以一种孤立的*概念验证*的方式。例如，如果正在解决的问题是*我们有一百种不同的标准来编写良好的JavaScript*，那么你可以开始协作实施一套标准，使用一个代码检查工具或格式化工具，一路上寻求反馈，然后慢慢更新旧代码以符合这些标准。'
- en: '**MEASURE: Check in frequently on the success of the solution**: Get feedback
    from people and seek quantifiable data to discern whether the selected solution
    is working as expected. If it isn''t, then consider going back to the drawing
    board and exploring other solutions.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**衡量：经常检查解决方案的成功**：从他人那里获得反馈，并寻求可量化的数据来判断所选解决方案是否按预期运行。如果不是，那么考虑重新审视并探索其他解决方案。'
- en: One of the traps in creating systemic change is to wait too long or to be too
    cautious in approaching the problem. Gaining feedback from others is really valuable,
    but it is not necessary to depend entirely upon their validation. It's sometimes
    hard for people to step outside their perspective and see certain issues, especially
    if they're very accustomed to how things are currently done. Instead of waiting
    for them to see things your way, it may be best to go ahead with an isolated version
    of your proposed solution and later prove its efficacy to them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建系统性变革的一个陷阱是等待太久或者在解决问题时过于谨慎。从他人那里获得反馈是非常有价值的，但不必完全依赖他们的验证。有时候，人们很难超越自己的视角看到某些问题，特别是如果他们非常习惯目前的做法。与其等待他们接受你的观点，也许最好的办法是继续推进你提出的解决方案的孤立版本，并后来向他们证明其有效性。
- en: When people reactively defend how things are currently done, they are typically
    expressing the **status quo bias**, which is an emotional bias that prefers the
    current state of affairs. In the face of such a reaction, it is very normal for
    people to be unwelcoming of a change. So be cautious of placing too much value
    in others' negative feedback about your proposed change.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们对当前的做法做出反应性的辩护时，他们通常表达的是**现状偏见**，这是一种情感偏见，偏好当前的事态。面对这样的反应，人们对变化往往会不太欢迎。因此，要谨慎对待他人对你提出的变化的负面反馈。
- en: Many of the things we wish to change within the technologies and systems we
    work with every day are not easily solved. They may be complex, unwieldy, and
    often multi-disciplinary problems. Examples of these types of problems are easily
    found on discussion forums and community feedback surrounding standards iteration,
    such as with the ECMAScript language specification. Rarely is an addition or change
    to the language accomplished simply. Patience, consideration, and communication
    are all needed to solve these problems and move ourselves and our technologies
    forward.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天希望在我们使用的技术和系统中改变的许多事情并不容易解决。它们可能是复杂的、难以控制的，通常是多学科的问题。这些类型的问题的例子很容易在讨论论坛和围绕标准迭代的社区反馈中找到，比如ECMAScript语言规范。很少有一种语言的添加或更改是简单完成的。耐心、考虑和沟通都是解决这些问题并推动我们自己和我们的技术前进所需要的。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have tried to explore the challenge of effective communication
    in a technical context, and have broadly discussed the communicative process involved
    in taking a problem from the ideation stage to the prototype stage. We have also
    covered the task of communicating and advocating for technological change, whether
    in the form of bug reports or raising broader issues concerning systemic problems.
    Programmers are not just the authors of code; they operate as part of the systems
    they are building, as crucial agents in the iterative feedback cycles that result
    in clean software. Understanding the considerable roles we play in these systems
    and feedback cycles is hugely empowering and begins to get to the crux of what
    it means to be a clean JavaScript programmer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们试图探讨技术背景下有效沟通的挑战，并广泛讨论了将问题从构思阶段转化为原型阶段所涉及的沟通过程。我们还涵盖了沟通和倡导技术变革的任务，无论是以错误报告的形式还是提出关于系统性问题的更广泛问题。程序员不仅仅是代码的作者；他们作为正在构建的系统的一部分，是迭代反馈周期中至关重要的代理人，这些反馈周期最终会产生干净的软件。了解我们在这些系统和反馈周期中扮演的重要角色是非常有力量的，并开始触及成为一名干净的JavaScript程序员意味着什么的核心。
- en: In the next and final chapter, we will be bringing together everything we have
    learned in the book so far, exploring a new problem domain via a case study. That'll
    conclude our exploration into clean code in JavaScript.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将汇集迄今为止在本书中学到的一切，通过一个案例研究探索一个新的问题领域。这将结束我们对JavaScript中干净代码的探索。
