- en: Working with Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库
- en: In the previous chapter, we obtained crucial permissions needed to access Android
    system features. In our case, we obtained location permissions. In this chapter,
    we will move on by inserting data into the database. We will insert location data
    that we will get from Android's location provider. For that purpose, we will define
    proper database schema and management classes. We will also define classes to
    access the location provider to obtain location data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们获得了访问Android系统功能所需的关键权限。在我们的情况下，我们获得了位置权限。在本章中，我们将通过向数据库插入数据来继续。我们将插入来自Android位置提供程序的位置数据。为此，我们将定义适当的数据库模式和管理类。我们还将定义用于访问位置提供程序以获取位置数据的类。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to SQLite
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite简介
- en: Describing database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述数据库
- en: CRUD operations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRUD操作
- en: Introduction to SQLite
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite简介
- en: To persist data for our application, we will need a database. In Android, for
    offline data storage, you can use SQLite.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存我们应用程序的数据，我们将需要一个数据库。在Android中，可以使用SQLite进行离线数据存储。
- en: SQLite is supported out of the box, which means that it comes included with
    the Android Framework.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是开箱即用的，这意味着它已经包含在Android框架中。
- en: Benefits
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 好处
- en: Benefits of SQLite are that it is powerful, fast, and reliable with a huge community
    that uses it. If you find any problem, it will be easy to find a solution since
    somebody from the community has most likely already solved such issues. SQLite
    is a self-contained, embedded, full-featured, public-domain SQL database engine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite的好处是它功能强大、快速、可靠，并且有一个庞大的社区在使用它。如果您遇到任何问题，很容易找到解决方案，因为社区中的某人很可能已经解决了这些问题。SQLite是一个独立的、嵌入式的、功能齐全的、公共领域的SQL数据库引擎。
- en: We will use SQLite to store all our Todos and Notes. To do that, we will define
    our database, the mechanism for accessing it, and data management. We will not
    expose a naked database instance directly, but we will wrap it properly so it
    is easy to insert, update, query, or remove data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用SQLite来存储所有我们的Todos和Notes。为此，我们将定义我们的数据库、访问它的机制以及数据管理。我们不会直接暴露一个裸的数据库实例，而是会适当地包装它，以便轻松地插入、更新、查询或删除数据。
- en: Describing our database
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述我们的数据库
- en: 'First thing we will do is describe our database by defining its tables and
    columns with proper data types. We will also define simple models that will represent
    our data. To do so, create a new package called `database`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过定义其表和列以及适当的数据类型来描述我们的数据库。我们还将定义简单的模型来表示我们的数据。为此，请创建一个名为`database`的新包：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create a new Kotlin class called `DbModel`. The `DbModel` class will
    represent the matrix for all database models of our application and will contain
    only the ID, since the ID is a mandatory field and will be used as a primary key.
    Make sure your `DbModel` class looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`DbModel`的新的Kotlin类。`DbModel`类将表示我们应用程序的所有数据库模型的矩阵，并且只包含ID，因为ID是一个必填字段，并且将用作主键。确保您的`DbModel`类看起来像这样：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, when we define our starting point, we will define data classes that will
    actually contain data. Inside our existing package called `model`, create new
    classes--`DbEntry`, `Note`, and `Todo`. `Note` and `Todo` will extend `Entry`,
    which extends the `DbModel` class.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们定义了我们的起点后，我们将定义实际包含数据的数据类。在我们现有的名为`model`的包中，创建新的类--`DbEntry`、`Note`和`Todo`。`Note`和`Todo`将扩展`Entry`，而`Entry`又扩展了`DbModel`类。
- en: 'The `Entry` class code is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entry`类的代码如下：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will notice that we put the current geolocation as the information stored
    in our note along with `title` and note `message` content. We also overrode the
    ID. Since the newly instantiated `note` is not yet stored into the database, its
    ID will be zero. After we store it, it will be updated to the ID value obtained
    from the database.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到我们将当前地理位置作为存储在我们的笔记中的信息，以及`title`和笔记`message`内容。我们还重写了ID。由于新实例化的`note`尚未存储到数据库中，因此其ID将为零。存储后，它将更新为从数据库获取的ID值。
- en: 'The `Todo` class:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Todo`类：'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Todo` class will have one additional field than the `Note` class--`timestamp`
    for the time when `todo` is scheduled.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Todo`类将比`Note`类多一个字段--用于安排`todo`的`timestamp`。'
- en: 'Now, after we define our data models, we will describe our database. We have
    to define the database helper class responsible for database initialization. The
    database helper class must extend Android''s `SQLiteOpenHelper` class. Create
    the `DbHelper` class and make sure it extends the `SQLiteOpenHelper` class:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们定义了数据模型之后，我们将描述我们的数据库。我们必须定义负责数据库初始化的数据库助手类。数据库助手类必须扩展Android的`SQLiteOpenHelper`类。创建`DbHelper`类，并确保它扩展了`SQLiteOpenHelper`类：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Our class `companion` object contains definitions for table and column names.
    We also defined SQLs for tables creation. Finally, SQLs are executed in the `onCreate()`
    method. In the next section, we will go further with database management and finally
    insert some data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`companion`对象包含了表和列名称的定义。我们还定义了用于创建表的SQL。最后，SQL在`onCreate()`方法中执行。在下一节中，我们将进一步进行数据库管理，并最终插入一些数据。
- en: CRUD operations
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRUD操作
- en: 'CRUD operations are operations for creating, updating, selecting, or removing
    data. They are defined with an interface called `Crud` and it will be generic.
    Create a new interface in the `database` package. Make sure it covers all CRUD
    operations:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD操作是用于创建、更新、选择或删除数据的操作。它们是用一个名为`Crud`的接口定义的，并且它将是通用的。在`database`包中创建一个新的接口。确保它涵盖所有CRUD操作：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For executing CRUD operations, there are two method versions. First version
    is the one that accepts *collections of instances* and the second that *accepts
    a single item*. Let''s create CRUD concretization by creating a Kotlin object
    called `Db`. Creating an object makes our concretization a perfect singleton.
    The `Db` object must implement the `Crud` interface:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行CRUD操作，有两种方法版本。第一个版本是接受*实例集合*的版本，第二个版本是*接受单个项目*的版本。让我们通过创建一个名为`Db`的Kotlin对象来创建CRUD具体化。创建一个对象使我们的具体化成为一个完美的单例。`Db`对象必须实现`Crud`接口：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Insert CRUD operation
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入CRUD操作
- en: 'The `insert` operation will add new data into the database. What follows is
    its implementation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 插入操作将新数据添加到数据库中。其实现如下：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Update CRUD operation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新CRUD操作
- en: 'The `update` operation will update the existing data in our database. What
    follows is its implementation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更新操作将更新我们数据库中的现有数据。其实现如下：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Delete CRUD operation
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除CRUD操作
- en: 'The `delete` operation will remove the existing data from the database. What
    follows is its implementation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 删除操作将从数据库中删除现有数据。其实现如下：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Select CRUD operation
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择CRUD操作
- en: 'The `select` operation will read and return data from the database. What follows
    is its implementation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 选择操作将从数据库中读取并返回数据。其实现如下：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Each CRUD operation will obtain a database instance by using our `DbHelper`
    class. We will not expose it directly, but utilize it by our CRUD mechanism. After
    each operation, the database will be closed. We can only get a readable database
    or, like in our case, a `WritableDatabase` instance by accessing `writableDatabase`.
    Each CRUD operation is performed as an SQL transaction. This means that we will
    start it by calling `beginTransaction()` on the database instance. The transaction
    is completed by calling `endTransaction()`. If we do not call `setTransactionSuccessful()`
    before it, no changes will apply. As we already mentioned, there are two versions
    of each CRUD operation--one that contains the main implementation and the second
    that just passes instances to the other. To perform the insert into the database,
    it's important to note that we will use the `insert()` method on the database
    instance that accepts the table name into which we are inserting, and content
    values (`ContentValues` class) that represent the data. The `update` and `delete`
    operations are similar. We use the `update()` and `delete()` methods. In our case,
    for data removal, we used `compileStatement()` containing the delete SQL query.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个CRUD操作都将使用我们的`DbHelper`类获取数据库实例。我们不会直接暴露它，而是通过我们的CRUD机制来利用它。每次操作后，数据库都将被关闭。我们只能通过访问`writableDatabase`来获取可读数据库或者像我们的情况一样获取`WritableDatabase`实例。每个CRUD操作都作为一个SQL事务执行。这意味着我们将通过在数据库实例上调用`beginTransaction()`来开始它。通过调用`endTransaction()`来完成事务。如果我们在之前没有调用`setTransactionSuccessful()`，则不会应用任何更改。正如我们已经提到的，每个CRUD操作都有两个版本--一个包含主要实现，另一个只是将实例传递给另一个。要执行对数据库的插入，重要的是要注意我们将在数据库实例上使用`insert()`方法，该方法接受我们要插入的表名和代表数据的内容值（`ContentValues`类）。`update`和`delete`操作类似。我们使用`update()`和`delete()`方法。在我们的情况下，对于数据删除，我们使用了包含删除SQL查询的`compileStatement()`。
- en: The code we provided here is a bit complex. We directly pointed only to database
    related matter. So, be patient, read the code slowly, and take your time to investigate
    it. We encourage you to create your own version of database management classes
    in your own way by utilizing the Android database classes we have already mentioned.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里提供的代码有点复杂。我们直接指向了与数据库相关的事项。所以，请耐心阅读代码，慢慢来，花时间来研究它。我们鼓励您利用我们已经提到的Android数据库类，以您自己的方式创建自己的数据库管理类。
- en: Tying things together
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将事物联系在一起
- en: We have one more step! It's the practical use of our database classes and performing
    CRUD operations. We will extend the application to create notes, and we will focus
    on insertion.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一步！那就是实际使用我们的数据库类并执行CRUD操作。我们将扩展应用程序以创建笔记，并专注于插入。
- en: 'Before we insert anything into the database, we must provide a mechanism to
    obtain the current user location since it''s required for both `notes` and `todos`.
    Create a new class called `LocationProvider` and locate it in the `location` package
    as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们向数据库中插入任何内容之前，我们必须提供一种机制来获取当前用户位置，因为这对于`notes`和`todos`都是必需的。创建一个名为`LocationProvider`的新类，并将其定位在`location`包中，如下所示：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We exposed the main structure for the `LocationProvider` object. Let''s take
    a look at the rest of the implementation:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们公开了`LocationProvider`对象的主要结构。让我们来看看其余的实现：
- en: 'The `locationListener` instance code is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`locationListener`实例代码如下：'
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`LocationListener` is Android''s interface whose purpose is to be executed
    on `location` events. We created our concretization that will basically notify
    all subscribed parties about those events. The most important for us is `onLocationChanged()`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocationListener`是Android的接口，其目的是在`location`事件上执行。我们创建了我们的具体化，基本上会通知所有订阅方有关这些事件的信息。对我们来说最重要的是`onLocationChanged()`：'
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To turn on location listening, we must check if permissions are properly fulfilled.
    If that is the case, then we are obtaining Android''s `LocationManager` and defined
    `Criteria` for location updates. We defined our criteria to be very precise and
    accurate. Finally, we request location updates by passing the following arguments:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开位置监听，我们必须检查权限是否得到了正确的满足。如果是这样，那么我们将获取Android的`LocationManager`并为位置更新定义`Criteria`。我们将我们的标准定义为非常精确和准确。最后，我们通过传递以下参数来请求位置更新：
- en: '`long minTime`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long minTime`'
- en: '`float minDistance`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float minDistance`'
- en: '`Criteria criteria`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Criteria criteria`'
- en: '`LocationListener listener`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocationListener listener`'
- en: '`Looper looper`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Looper looper`'
- en: 'As you can see, we passed our `LocationListener` concretization that will notify
    all subscribed third parties about `location` events:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们传递了我们的`LocationListener`具体化，它将通知所有订阅的第三方有关`location`事件的信息：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We stopped listening for location by simply removing our listener `instance.doSubscribe()`:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过简单地移除我们的监听器`instance.doSubscribe()`来停止监听位置。
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `doUnsubscribe()` method code is as follows:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doUnsubscribe()`方法代码如下：'
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These two methods are responsible for subscribing and unsubscribing in location
    updates to interested third parties.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法负责订阅和取消订阅位置更新给感兴趣的第三方。
- en: 'We have all we need. Open the `NoteActivity` class and extend it as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经拥有了所需的一切。打开`NoteActivity`类并扩展如下：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What did we do here? Let's go from top to bottom and explain everything! We
    added two fields--one that contains the current `Note` instance we are editing
    and one that holds information about the current user's location. Then, we defined
    a `TextWatcher` instance. `TextWatcher` is a listener that we will assign to our
    `EditText` views, and, on each change, the proper update method will be triggered.
    That method will create a new `note` class and persist it into a database if it
    does not exist, or perform a data update if it exists.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做了什么？让我们从上到下解释一切！我们添加了两个字段——一个包含我们正在编辑的当前`Note`实例，另一个包含当前用户位置信息。然后，我们定义了一个`TextWatcher`实例。`TextWatcher`是一个监听器，我们将分配给我们的`EditText`视图，每次更改时，适当的更新方法将被触发。该方法将创建一个新的`note`类，并将其持久化到数据库中（如果不存在），或者如果存在，则执行数据更新。
- en: Since we will not insert note until there is no location data available, we
    defined our `locationListener` to put received location into the location field
    and to unsubscribe itself. Then, we will get the current value for the `note`
    title and its main content and create a new `note` instance. Since the database
    operations can take some time, we will execute them asynchronously. For that purpose,
    we will use the `AsyncTask` class. The `AsyncTask` class is Android's class that
    is intended to be used for the most async operations. Class defines input type,
    progress type, and result type. In our case, input type is `Note`. We do not have
    a progress type, but we have a result type `Boolean`, that is, if the operation
    is successful or not.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在没有位置数据可用之前，我们不会插入笔记，因此我们定义了我们的`locationListener`将接收到的位置放入位置字段中，并取消订阅自身。然后，我们将获取`note`标题和其主要内容的当前值，并创建一个新的`note`实例。由于数据库操作可能需要一些时间，我们将以异步方式执行它们。为此，我们将使用`AsyncTask`类。`AsyncTask`类是Android的类，旨在用于大多数异步操作。该类定义了输入类型、进度类型和结果类型。在我们的情况下，输入类型是`Note`。我们没有进度类型，但我们有一个结果类型`Boolean`，即操作是否成功。
- en: The main work is done in the `doInBackground()` concretization while the result
    is handled in `onPostExecute()`. As you can see, we are performing insertion in
    the background using classes we recently defined for database management.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 主要工作是在`doInBackground()`具体化中完成的，而结果在`onPostExecute()`中处理。正如你所看到的，我们正在使用我们最近为数据库管理定义的类在后台执行插入操作。
- en: If you keep looking, the next thing we do is assign `textWatcher` to `EditText`
    views in the `onCreate()` method. Then, we define our most important method--`updateNote()`.
    It will update an existing note or insert a new one if it does not exist. Again,
    we used `AsyncTask` to perform an operation in the background.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你继续查看，我们接下来要做的事情是将`textWatcher`分配给`onCreate()`方法中的`EditText`视图。然后，我们定义了我们最重要的方法——`updateNote()`。它将更新现有的笔记，如果不存在，则插入一个新的笔记。同样，我们使用`AsyncTask`在后台执行操作。
- en: 'Build your application and run it. Try to insert `note`. Observe your Logcat.
    You will notice database-related logs as your type:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 构建你的应用程序并运行它。尝试插入`note`。观察你的Logcat。你会注意到与数据库相关的日志，如下所示：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you can see these logs, you have successfully implemented your first database
    in Android. We encourage you to extend the code for the rest of the CRUD operations.
    Make sure `NoteActivity` supports the `select` and `delete` operations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能看到这些日志，那么你已经成功在Android中实现了你的第一个数据库。我们鼓励你扩展代码以支持其他CRUD操作。确保`NoteActivity`支持`select`和`delete`操作。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we demonstrated how to persist complex data in Android. Databases
    are the heart of every application, so Journaler is not an exception. We covered
    all CRUD operations performed on the SQLite database and gave a proper implementation
    for each of them. In our next chapter, we will demonstrate another persistence
    mechanism for less complex data. We will deal with Android shared preferences,
    and we will use them to keep simple and small data for our application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们演示了如何在Android中持久化复杂数据。数据库是每个应用程序的核心，所以Journaler也不例外。我们涵盖了在SQLite数据库上执行的所有CRUD操作，并为每个操作提供了适当的实现。在我们的下一章中，我们将演示另一种持久化机制，用于较不复杂的数据。我们将处理Android共享首选项，并将使用它们来保存我们应用程序的简单小数据。
