["```\n     $ openssl genrsa -aes256 -out ca-key.pem 4096\n\n     Generating RSA private key, 4096 bit long modulus\n     ...............................................++\n     ..++\n     e is 65537 (0x10001)\n     Enter pass phrase for ca-key.pem:\n     Verifying - Enter pass phrase for ca-key.pem: \n    ```", "```\n     $ openssl req -new -x509 -days 730 -key ca-key.pem -sha256 -out ca.pem \n    ```", "```\n     $ openssl genrsa -out daemon-key.pem 4096\n     <Snip> \n    ```", "```\n     $ openssl req -subj \"/CN=node3\" \\\n       -sha256 -new -key daemon-key.pem -out daemon.csr \n    ```", "```\n     subjectAltName = DNS:node3,IP:10.0.0.12\n     extendedKeyUsage = serverAuth \n    ```", "```\n     $ openssl x509 -req -days 730 -sha256 \\\n       -in daemon.csr -CA ca.pem -CAkey ca-key.pem \\\n       -CAcreateserial -out daemon-cert.pem -extfile extfile.cnf \n    ```", "``` \n\n ```", "```\n$ rm daemon.csr extfile.cnf \n```", "```\n     $ openssl genrsa -out client-key.pem 4096 \n    ```", "```\n     $ openssl req -subj '/CN=node1' -new -key client-key.pem -out client.csr \n    ```", "```\n     extendedKeyUsage = clientAuth \n    ```", "```\n     $ openssl x509 -req -days 730 -sha256 \\\n       -in client.csr -CA ca.pem -CAkey ca-key.pem \\\n       -CAcreateserial -out client-cert.pem -extfile extfile.cnf \n    ```", "``` \n\n ```", "```\n$ rm client.csr extfile.cnf \n```", "```\nca-key.pem          << CA private key\nca.pem              << CA public key (cert)\nca.srl              << Tracks serial numbers\nclient-cert.pem     << client public key (Cert)\nclient-key.pem      << client private key\ndaemon-cert.pem     << daemon public key (cert)\ndaemon-key.pem      << daemon private key \n```", "```\n$ chmod `0400` ca-key.pem client-key.pem daemon-key.pem \n```", "```\n// Daemon files\n$ scp ./ca.pem ubuntu@daemon:/home/ubuntu/.docker/ca.pem\n$ scp ./daemon-cert.pem ubuntu@daemon:/home/ubuntu/.docker/cert.pem\n$ scp ./daemon-key.pem ubuntu@daemon:/home/ubuntu/.docker/key.pem\n\n//Client files\n$ scp ./ca.pem ubuntu@client:/home/ubuntu/.docker/ca.pem\n$ scp ./client-cert.pem ubuntu@client:/home/ubuntu/.docker/cert.pem\n$ scp ./client-key.pem ubuntu@client:/home/ubuntu/.docker/key.pem \n```", "```\n{\n    \"hosts\": [\"tcp://node3:2376\"],\n    \"tls\": true,\n    \"tlsverify\": true,\n    \"tlscacert\": \"/home/ubuntu/.docker/ca.pem\",\n    \"tlscert\": \"/home/ubuntu/.docker/cert.pem\",\n    \"tlskey\": \"/home/ubuntu/.docker/key.pem\"\n} \n```", "```\n`[Service]`\n`ExecStart``=`\n`ExecStart``=``/usr/bin/dockerd -H tcp://node3:2376` \n```", "```\n$ ps -elf `|` grep dockerd\n`4` S root  ... /usr/bin/dockerd -H tcp://node3:2376 \n```", "```\n$ docker -H tcp://node3:2376 version\nClient:\n Version:       `18`.01.0-ce\n API version:   `1`.35\n <Snip>\nGet http://daemon:2376/v1.35/version: net/http: HTTP/1.x transport connectio`\\`\nn broken: malformed HTTP response `\"\\x15\\x03\\x01\\x00\\x02\\x02\"`.\n* Are you trying to connect to a TLS-enabled daemon without TLS? \n```", "```\nexport DOCKER_HOST=tcp://node3:2376 \n```", "```\n$ docker version\nClient:\n Version:       `18`.01.0-ce\n<Snip>\nGet http://daemon:2376/v1.35/version: net/http: HTTP/1.x transport connectio`\\`\nn broken: malformed HTTP response `\"\\x15\\x03\\x01\\x00\\x02\\x02\"`.\n* Are you trying to connect to a TLS-enabled daemon without TLS? \n```", "```\nexport DOCKER_TLS_VERIFY=1 \n```", "```\n$ docker version\nClient:\n Version:       `18`.01.0-ce\n<Snip>\nServer:\n Engine:\n  Version:      `18`.01.0-ce\n  API version:  `1`.35 `(`minimum version `1`.12`)`\n  Go version:   go1.9.2\n  Git commit:   03596f5\n  Built:        Wed Jan `10` `20`:09:37 `2018`\n  OS/Arch:      linux/amd64\n  Experimental: `false` \n```", "```\n{\n    \"hosts\": [\"tcp://node3:2376\"],\n    \"tls\": true,\n    \"tlsverify\": true,\n    \"tlscacert\": \"/home/ubuntu/.docker/ca.pem\",\n    \"tlscert\": \"/home/ubuntu/.docker/cert.pem\",\n    \"tlskey\": \"/home/ubuntu/.docker/key.pem\"\n} \n```", "```````````````````````"]