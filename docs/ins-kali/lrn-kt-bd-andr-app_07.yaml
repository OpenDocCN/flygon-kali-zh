- en: Developing Your Location-Based Alarm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发您的基于位置的闹钟
- en: Getting to know the location of the user and providing customized services to
    them is one of the powerful features of Android devices. Android app developers
    can take advantage of this powerful feature and provide a fascinating service
    to the users of their app. Hence, understanding Google location services, the
    Google Maps APIs, and location APIs, are very important for the developers of
    Android applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 了解用户位置并为他们提供定制服务是Android设备的强大功能之一。 Android应用程序开发人员可以利用这一强大功能，为其应用程序的用户提供迷人的服务。因此，了解Google位置服务、Google
    Maps API和位置API对于Android应用程序的开发人员非常重要。
- en: 'In this chapter, we will develop our own **location-based alarm** (**LBA**)
    and, in the process of developing the app, we will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发我们自己的**基于位置的闹钟**（**LBA**），并在开发应用程序的过程中，我们将了解以下内容：
- en: Creating a map based on Android activity
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Android活动创建地图
- en: Usage of Google Maps in Android applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android应用程序中使用Google Maps
- en: The process for registering and obtaining the key required for Google Maps activity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册并获取Google Maps活动所需的密钥的过程
- en: Developing a screen for the user to provide input to the app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户提供输入的屏幕
- en: How to complete our app and make a workable model in the next chapter by adding
    the alarm feature and using Google Location Services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下一章中，通过添加闹钟功能并使用Google位置服务来完成我们的应用程序并创建一个可行的模型
- en: Creating a project
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个项目
- en: We will look at the steps involved in creation of a LBA. We will use our favorite
    IDE, Android Studio, for developing the LBA.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看创建LBA所涉及的步骤。我们将使用我们最喜欢的IDE，Android Studio，来开发LBA。
- en: Let's get started by launching Android Studio. Once it's up and running, click
    on Start a new Android Studio Project. If you have a project opened already, click
    on File | New Project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始启动Android Studio。一旦它启动并运行，点击开始一个新的Android Studio项目。如果您已经打开了一个项目，请点击文件|新建项目。
- en: 'On the following screen, enter the details shown here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，输入这里显示的详细信息：
- en: '**Application name**: `LocationAlarm`.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序名称**：`LocationAlarm`。'
- en: '**Company domain**: Android Studio uses the domain name to generate the package
    name for the application we develop. The package ensures our app gets a unique
    identifier in the Play Store. Generally, the package name will be the reverse
    of the domain name, for example, it would be `com.natarajan.locationalarm` in
    this case.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公司域**：Android Studio使用域名来生成我们开发的应用程序的包名。包确保我们的应用程序在Play商店中获得唯一标识符。通常，包名将是域名的反向，例如，在这种情况下将是`com.natarajan.locationalarm`。'
- en: '**Project location**: The path where we would like to have the project code
    developed and saved. You can chose and select the path where you are developing
    the app. As we are developing our app using Kotlin, we must select Include Kotlin
    support:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目位置**：我们希望开发和保存项目代码的路径。您可以选择并选择您正在开发应用程序的路径。由于我们正在使用Kotlin开发我们的应用程序，因此我们必须选择包括Kotlin支持：'
- en: '![](img/730f30c7-4125-4be5-bfa2-2da610d797bd.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/730f30c7-4125-4be5-bfa2-2da610d797bd.png)'
- en: 'On the screen that follows, we will be making a decision about the Android
    devices we target based on:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的屏幕上，我们将根据以下内容做出关于我们针对的Android设备的决定：
- en: APIs they provide
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提供的API
- en: Form factors
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单因素
- en: For our app, we will choose Phone and Tablet and the API as API 15\. The text
    beneath the API selection box informs us that by selecting API 15 and later, we
    will be choosing to have our app run on approximately 100% of devices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们将选择手机和平板电脑，并选择API为API 15。 API选择框下方的文本告诉我们，通过选择API 15及更高版本，我们将选择使我们的应用程序在大约100%的设备上运行。
- en: The Help me choose option would help you to understand the distribution of Android
    devices across the globe grouped by the android version (API) they run.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助我选择选项将帮助您了解按Android版本（API）分组的全球Android设备的分布。
- en: 'We will not be running our app on any other form factors; hence, we can skip
    those selection areas and click on Next:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在任何其他表单因素上运行我们的应用程序；因此，我们可以跳过这些选择区域，然后点击下一步：
- en: '![](img/a03eeb24-e179-4e91-9767-4479079768d9.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a03eeb24-e179-4e91-9767-4479079768d9.png)'
- en: In the next screen, we will be provided with an option to add an activity to
    our app.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，我们将有一个选项来向我们的应用程序添加一个活动。
- en: Android Studio makes it easier for developers to include the kind of activity
    they require for their app by providing ready-made templates on the most frequently
    used activities.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio通过提供最常用的活动的现成模板，使开发人员更容易地包含他们的应用程序所需的活动类型。
- en: We are developing a LBA, so we require a map that shows the location for which
    the alarm is set.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在开发LBA，因此我们需要一个显示设置了闹钟的位置的地图。
- en: 'Click on **Google Maps Activity** and click Next:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Google Maps Activity**，然后点击下一步：
- en: '![](img/2a73de5b-a2a7-4727-b45c-0166738c9413.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a73de5b-a2a7-4727-b45c-0166738c9413.png)'
- en: 'We will be configuring the activity on the next screen. Native Android apps
    are, in general, a combination of the Kotlin/Java class and the user interface
    defined by XML. The following inputs are provided on the screen to configure our
    app:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一个屏幕上配置活动。一般来说，原生Android应用程序是由Kotlin/Java类和XML定义的用户界面组合而成。屏幕上提供了以下输入来配置我们的应用程序：
- en: '**Activity Name**: This is the name of the Kotlin class for our map''s activity.
    The name appears by default as MapsActivity when we select a maps activity; we
    will use the same here.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动名称**：这是我们地图活动的Kotlin类的名称。当我们选择地图活动时，默认情况下会显示名称MapsActivity，我们将在这里使用相同的名称。'
- en: '**Layout Name**: The name of the XML layout we will use to design our user
    interface.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局名称**：我们将用于设计用户界面的XML布局的名称。'
- en: '**Title**: The title we want the app to display for this activity. We will
    leave this as Map, which is shown by default.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**：我们希望应用程序为此活动显示的标题。我们将保留此标题为Map，这是默认显示的。'
- en: 'Once these entries are made, click on the Finish button:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些条目后，点击完成按钮：
- en: '![](img/e64162cd-046e-4798-8c82-20e4bdb8dac7.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e64162cd-046e-4798-8c82-20e4bdb8dac7.png)'
- en: On clicking the button, we will see the Building 'LocationAlarm' Gradle project
    info screen.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮后，我们将看到“构建'LocationAlarm' Gradle项目信息”屏幕。
- en: Generation of a Google Maps API key
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成Google Maps API密钥
- en: 'As soon as the build process is complete, we will see the following resources
    file screen being opened by default and displayed by Android Studio:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建过程完成，我们将看到以下资源文件屏幕默认打开并由Android Studio显示：
- en: The file is named `google_maps_api.xml` by default. The file clearly indicates
    that before we run our application, we need to get a Google Maps API key. The
    procedure to get the Google Maps API key for the app is listed in detail.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 文件默认命名为`google_maps_api.xml`。该文件清楚地指示在运行应用程序之前，我们需要获取Google Maps API密钥。获取应用程序的Google
    Maps API密钥的过程将详细列出。
- en: 'The key that is generated should be replaced by the placeholder YOUR_KEY_HERE mentioned
    in the file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的密钥应该替换文件中提到的占位符YOUR_KEY_HERE：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will generate the key required for our app using the link provided in the
    file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用文件中提供的链接生成我们应用程序所需的密钥。
- en: '[https://console.developers.google.com](https://console.developers.google.com/apis/dashboard) requires
    the user to sign in with their Google ID. Once they sign in, the option for creating
    the project and enabling the API will be presented.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://console.developers.google.com](https://console.developers.google.com/apis/dashboard)
    需要用户使用他们的Google ID进行登录。一旦他们登录，将会出现创建项目和启用API的选项。'
- en: 'Select and copy the link in full ([https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm](https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm))and
    enter it into your favorite browser:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并复制完整的链接（[https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm](https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm)）并在您喜欢的浏览器中输入：
- en: '![](img/d94b1a65-5970-4aee-aa60-14b56ea58f32.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d94b1a65-5970-4aee-aa60-14b56ea58f32.png)'
- en: Once the user signs in to the Console, the user will be asked to register the
    application for the Google Maps Android API in the Google API Console.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户登录到控制台，用户将被要求在Google API控制台中为Google Maps Android API注册应用程序。
- en: 'We will see couple of options:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一些选项：
- en: Select a project
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个项目
- en: Create a project
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个项目
- en: As indicated in the text below Select a project where your application will
    be registered, the user can use one project to manage the API keys for all the
    applications developed, or choose to have a different project for each application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如下文本所示，在选择应用程序将注册的项目时，用户可以使用一个项目来管理所有开发的应用程序的API密钥，或者选择为每个应用程序使用不同的项目。
- en: The choice of using one project to manage all API keys required for various
    Android applications developed or having one project for each application, depends
    on the user. At the time of writing, by default, the user will be allowed to create
    12 projects for free.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个项目来管理各种Android应用程序所需的所有API密钥，或者为每个应用程序使用一个项目，这取决于用户。在撰写本文时，默认情况下，用户将被允许免费创建12个项目。
- en: 'Following this, you need to read and agree to the terms of service of the Google
    Play Android Developer API and the Firebase APIs/Services Terms of Service ([https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm](https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm) ):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要阅读并同意Google Play Android开发者API和Firebase API/服务条款的条款和条件（[https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm](https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=00:ED:1B:E2:03:B9:2E:F4:A9:0F:25:7A:2F:40:2E:D2:89:96:AD:2D;com.natarajan.locationalarm) )：
- en: '![](img/bf107574-6da2-4e5f-b34c-97cdf75ca2d7.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf107574-6da2-4e5f-b34c-97cdf75ca2d7.png)'
- en: 'Choose Create a project and agree to the terms and conditions. Once that is
    done, click on **Agree and continue**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 选择创建一个项目并同意条款和条件。完成后，点击**同意并继续**：
- en: '![](img/dc592428-7e92-4030-877e-874c5e0b50db.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc592428-7e92-4030-877e-874c5e0b50db.png)'
- en: 'Once the creation of the project is successful, the user will see a screen.
    The screen reads The project has been created and Google Maps Android API has
    been enabled. Next you''ll need to create an API key in order to call the API. The
    user will also see a button that reads **Create API** **Key**:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目创建成功，用户将看到一个屏幕。屏幕上显示“项目已创建，已启用Google Maps Android API。接下来，您需要创建一个API密钥以调用API。”用户还将看到一个按钮，上面写着**创建API密钥**：
- en: '![](img/c8873375-6a3f-4d8e-b51a-f0d22c2edea6.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8873375-6a3f-4d8e-b51a-f0d22c2edea6.png)'
- en: 'On clicking the Create API Key button, the user will be shown a console with
    a message pop up that reads API key created. This is the API key that we need
    to use in our app:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 单击创建API密钥按钮后，用户将看到一个控制台，上面弹出一个消息，显示API密钥已创建。这是我们需要在应用程序中使用的API密钥：
- en: '![](img/44c63930-3055-4847-a8ba-f0279d8fb298.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44c63930-3055-4847-a8ba-f0279d8fb298.png)'
- en: 'Copy the API key and then replace the YOUR_API_KEY text in the `google_maps_api.xml`
    file with the API key generated, as shown:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 复制API密钥，然后用生成的API密钥替换`google_maps_api.xml`文件中的YOUR_API_KEY文本，如下所示：
- en: '![](img/66097bc6-8513-42c9-b691-06dbf048d28f.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66097bc6-8513-42c9-b691-06dbf048d28f.png)'
- en: 'The modified file with the generated Google Maps API key should look like the
    one shown here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的带有生成的Google Maps API密钥的文件应该看起来像这样：
- en: '![](img/3ac786d7-90d2-427b-bd2c-f8f1a6994396.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ac786d7-90d2-427b-bd2c-f8f1a6994396.png)'
- en: 'Developers can always check the API key generated by logging into the Google
    API console and cross checking the usage of the correct API key generated specifically
    for the project:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以通过登录Google API控制台来检查生成的API密钥，并交叉检查为项目专门生成的正确API密钥的使用情况：
- en: '![](img/ae855389-1b7c-4ee5-9ac5-d1f2f79ca290.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae855389-1b7c-4ee5-9ac5-d1f2f79ca290.png)'
- en: Now that we have got the API key generated and have modified the file to reflect
    this, we are all set for analyzing the code and running the app.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了API密钥并修改了文件以反映这一点，我们已经准备好分析代码并运行应用程序。
- en: To quickly recap, we created the app to include Google Maps activity and created
    a layout file. Then we generated the Google Maps API key and replaced that in
    the file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 快速回顾一下，我们创建了包括Google Maps活动的应用程序，并创建了布局文件。然后我们生成了Google Maps API密钥并替换了文件中的密钥。
- en: Running the app
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: To run the app, go to Run | Run app or click on the **play** button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，请转到Run | Run app或单击**播放**按钮。
- en: Android Studio will prompt us to select the deployment target, the physical
    device that has developer options and USB debugging enabled OR the emulator, also
    known as the virtual device the user has set up.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio将提示我们选择部署目标，即具有开发人员选项和USB调试启用的物理设备，或者用户设置的虚拟设备，也称为模拟器。
- en: 'Once we select one of the options and click on Okay, the app will be built
    and run on the deployment target. The app will be up and running and we should
    see map activity being loaded with Marker in Sydney:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择其中一个选项并点击“确定”，应用程序将构建并运行到部署目标上。应用程序将启动并运行，我们应该看到地图活动加载了悉尼的标记：
- en: '![](img/ca5f912d-0ac1-4a11-89c6-a52da0f5a02b.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca5f912d-0ac1-4a11-89c6-a52da0f5a02b.png)'
- en: Understanding the code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解代码
- en: We could successfully run the app, and now it is time to delve deeper into the
    code and understand how it works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功运行了应用程序，现在是时候深入了解代码，了解它是如何工作的。
- en: Let's start with the `MapsActivity.kt` Kotlin class file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`MapsActivity.kt` Kotlin类文件开始。
- en: The `MapActivity` class extends the `AppCompatActivity` class and also implements
    the `OnMapReadCallback` interface. We have a couple of variables, `GoogleMap`,
    `mMap` and `btn` button initialized.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapActivity`类扩展了`AppCompatActivity`类，并实现了`OnMapReadCallback`接口。我们有一对变量，`GoogleMap`，`mMap`和`btn`按钮初始化。'
- en: Overriding the `onCreate` method, the app is set to load the content from the
    XML file, `activity_maps.xml`, as and when the app is launched.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重写`onCreate`方法，当应用程序启动时，将从XML文件`activity_maps.xml`中加载内容。
- en: 'The resources for the `mapFragment` and `btn` are set from the resources file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从资源文件设置`mapFragment`和`btn`的资源：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Customizing the code
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义代码
- en: 'The default code generated shows the market in Sydney. The method `onMapReady`shown
    here gets called when the map is ready and loaded and displays a marker. The location
    is found based on the `LatLng` value mentioned:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 默认生成的代码显示了悉尼的市场。这里显示的`onMapReady`方法在地图准备就绪并加载并显示标记时被调用。位置是根据提到的`LatLng`值找到的：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's now customize this code to display the marker over Chennai, Tamil Nadu,
    India. To make the change, the first step is to understand what Lat and Lng stand
    for.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们自定义此代码以在印度泰米尔纳德邦金奈上显示标记。要进行更改，第一步是了解`Lat`和`Lng`代表什么。
- en: Latitude and longitude are used together to specify the precise location of
    any part of the earth. In Android, the class `LatLng` is used for specifying the
    location.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 纬度和经度一起用于指定地球上任何部分的精确位置。在Android中，`LatLng`类用于指定位置。
- en: Finding the Lat and Lng of a place
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找地点的纬度和经度
- en: Finding the latitude and longitude of a place can be done easily using Google
    Maps in the browser. For our purpose, we will launch Google Maps in our favorite
    browser.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中使用Google Maps可以轻松找到地点的纬度和经度。为了我们的目的，我们将在我们喜欢的浏览器中启动Google Maps。
- en: Search for the location for which you need to find the latitude and longitude.
    Here, we search for Vasantham, a special school for mentally challenged children
    in Chennai, Tamil Nadu, India.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索您需要找到纬度和经度的位置。在这里，我们搜索位于印度泰米尔纳德邦金奈的智障儿童特殊学校Vasantham。
- en: 'Once the location we''ve searched for is found, we can see the latitude and
    longitude value in the URL, as shown:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们找到了我们搜索的位置，我们可以在URL中看到纬度和经度的值，如下所示：
- en: '![](img/8cb68afc-f61c-4acd-b428-f1332d7342e9.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cb68afc-f61c-4acd-b428-f1332d7342e9.png)'
- en: The latitude and longitude values we see for the place we searched for are 13.07
    and 80.17\. Let us go ahead and make the following changes in the code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们搜索到的地方的纬度和经度值分别为13.07和80.17。让我们继续在代码中进行以下更改。
- en: 'In the `onMapReady` method, let us make the following changes:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onMapReady`方法中，让我们进行以下更改：
- en: Rename the `Sydney` variable to `chennai`
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Sydney`变量重命名为`chennai`
- en: Change the Lat and Lng from Sydney's to Chennai's
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Lat和Lng从悉尼更改为金奈
- en: Change `Marker` text to read `Marker in Chennai`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Marker`文本更改为`马德拉斯的标记`
- en: Change the `newLatLng` to take `chennai` as the input value
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`newLatLng`更改为以`chennai`作为输入值
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we save the changes done and run the app once again, we will be able to
    see that the map now loads with the marker on Chennai, India:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存所做的更改并再次运行应用程序时，我们将能够看到地图现在加载了位于印度金奈的标记：
- en: '![](img/51949d18-eff8-4e7f-83f1-98c0b97d0bc3.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51949d18-eff8-4e7f-83f1-98c0b97d0bc3.png)'
- en: 'Once we touch the marker, we should be able to see the text Marker in Chennai
    displayed on top of the red marker:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们触摸标记，我们应该能够看到“马德拉斯的标记”文本显示在红色标记的顶部：
- en: '![](img/755f5fcc-207d-4fdb-a149-3c968e98feb6.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/755f5fcc-207d-4fdb-a149-3c968e98feb6.png)'
- en: The XML layout
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML布局
- en: We have looked at the Kotlin class in detail and also ways to customize the
    Lat and Lng input.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细查看了Kotlin类，以及自定义Lat和Lng输入的方法。
- en: Let us quickly check out the XML layout files. We will also understand the process
    to add a button that will take us to the screen through which the user will be
    able to enter the Lat and Lng input for the alarm.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速检查XML布局文件。我们还将了解添加一个按钮的过程，该按钮将带我们到一个屏幕，通过该屏幕用户将能够输入警报的Lat和Lng输入。
- en: 'In the `activity_maps.xml` file, we have the map fragment and button element
    wrapped in the `LinearLayoutCompat` as shown here. We have the button element
    linked to the `onClickSettingsButton` method:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`activity_maps.xml`文件中，我们有地图片段和按钮元素包装在`LinearLayoutCompat`中，如下所示。我们将按钮元素链接到`onClickSettingsButton`方法：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `MapsActivity` Kotlin class, we can define a method called `onClickSettingsButton`
    and, on invocation of the same, we fire up another activity called `SETTINGACTVITY`
    as shown:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MapsActivity` Kotlin类中，我们可以定义一个名为`onClickSettingsButton`的方法，并在调用相同的方法时启动另一个名为`SETTINGACTVITY`的活动，如下所示：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Developing a screen for user input
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发用户输入屏幕
- en: When clicking the `Settings` button, our app will take the user to a screen
    where they can enter the Lat and Lng values for the new location that user wants
    the alarm to be set for.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击`Settings`按钮时，我们的应用程序将带用户进入一个屏幕，用户可以在该屏幕上输入新位置的纬度和经度值，用户希望为该位置设置警报。
- en: We have a very simple screen for input purposes. We have a `LinearLayout` that
    has a  couple of `EditText`, one for the latitude and the other for longitude
    input. These edit texts are followed by a button that allows for the submission
    of the new location coordinates entered by the user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个非常简单的输入屏幕。我们有一个包含一对`EditText`的`LinearLayout`，一个用于纬度输入，另一个用于经度输入。这些编辑文本后面跟着一个按钮，允许用户提交输入的新位置坐标。
- en: 'We also have an `onClickButton` method linked to the button to be called upon
    as and when the user clicks on the button:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个与按钮关联的`onClickButton`方法，当用户点击按钮时调用：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have the XML layout for the user input ready; now let's create a new Kotlin
    activity class that will use this setting's XML and interact with the user.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好用户输入的XML布局；现在让我们创建一个新的Kotlin活动类，该类将使用这个设置的XML并与用户交互。
- en: The class `SettingsActivity` extends `AppCompatActivity` and contains a couple
    of edit text elements and button element initialized. The variables are identified
    and set to the correct resources from the resources file by their IDs. The activity
    loads the `settings_activity` XML as and when the activity is invoked and loaded.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`SettingsActivity`类扩展了`AppCompatActivity`，包含了一对编辑文本元素和初始化的按钮元素。变量通过它们的ID从资源文件中识别和设置为正确的资源。当活动被调用和加载时，活动加载`settings_activity`
    XML。'
- en: 'In the `onClickButton` method, we have a simple Toast message that says Alarm
    Set. In the following chapter, we will be saving the input entered and will have
    the alarm trigger when the user enters the location of interest:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onClickButton`方法中，我们有一个简单的Toast消息，显示警报已设置。在接下来的章节中，我们将保存输入的内容，并在用户进入感兴趣的位置时触发警报：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/e21e552f-6b2e-470a-b34d-79272293a859.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e21e552f-6b2e-470a-b34d-79272293a859.png)'
- en: 'When the user clicks on the OK button after entering the Lat and Lng details,
    the Toast message will be displayed, as shown:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在输入纬度和经度后点击`OK`按钮时，将显示Toast消息，如下所示：
- en: '![](img/2ef9237f-56b1-4017-baa9-3cb85efa06cd.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ef9237f-56b1-4017-baa9-3cb85efa06cd.png)'
- en: The AndroidManifest file
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AndroidManifest文件
- en: A manifest file is one of the most important files of the project. In this file,
    we have to list all the activities we intend to use in our app and also provide
    details about the API keys we use for the Google Maps API.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件是项目中最重要的文件之一。在这个文件中，我们必须列出我们打算在应用程序中使用的所有活动，并提供有关我们用于Google Maps API的API密钥的详细信息。
- en: 'We have the following important pointers in the manifest file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单文件中，我们有以下重要的指针：
- en: Our app uses the permission `ACCESS_FINE_LOCATION`. This is to get the details
    about the user's location; we require this to enable the alarm as and when the
    user reaches the location the alarm is set for.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的应用程序使用`ACCESS_FINE_LOCATION`权限。这是为了获取用户位置的详细信息；我们需要这样做以便在用户到达设置的位置时启用警报。
- en: '`ACCESS_COARSE_LOCATION` is the permission-enabled app to get the location
    details provided by `NETWORK_PROVIDER`. The `ACCESS_FINE_LOCATION` permission
    enables the app to get the location details provided by `NETWORK_PROVIDER` and
    `GPS_PROVIDER`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`ACCESS_COARSE_LOCATION`是启用应用程序获取`NETWORK_PROVIDER`提供的位置详细信息的权限。`ACCESS_FINE_LOCATION`权限使应用程序能够获取`NETWORK_PROVIDER`和`GPS_PROVIDER`提供的位置详细信息。'
- en: We have the metadata for the Android geo API Key which is nothing but the API
    key we generated and placed in `google_maps_api.xml`.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有Android geo API密钥的元数据，这只是我们生成并放置在`google_maps_api.xml`中的API密钥。
- en: We have a Launcher MAIN activity, the one that launches the map with the marker
    on the Chennai location.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个启动器MAIN活动，它在钦奈位置上启动带有标记的地图。
- en: 'We also have the default activity settings that get triggered when clicking
    the `Submit` button:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还有默认的活动设置，当点击`提交`按钮时触发：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Build.gradle
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Build.gradle
- en: 'The `build.gradle` file includes the dependencies required for the Google Maps
    services. We must include the Play services maps from the Google Play services.
    From the Google Play services, we include the services of interest to us. Here,
    we would like to have a map service available to us, and, hence we are including
    `play-services-maps`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`build.gradle`文件包括所需的Google Maps服务的依赖项。我们必须包括来自Google Play服务的Play服务地图。从Google
    Play服务中，我们包括我们感兴趣的服务。在这里，我们希望有一个地图服务可用，因此我们包括`play-services-maps`：'
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed and learned about creating our own LBA. We understood
    the details of the Google Maps API, the generation of API keys, the creation of
    the user interface for maps, adding markers to the map, customizing the marker,
    creating user interface screens for input from the user, and so on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论并学习了如何创建自己的LBA。我们了解了Google Maps API的细节，API密钥的生成，地图用户界面的创建，向地图添加标记，自定义标记，为用户输入创建用户界面屏幕等等。
- en: We also discussed the important components in the manifest file, the `build.gradle`
    file, and the XML layout files and corresponding Kotlin classes. In the next chapter,
    we will save the input we received from the user using shared preferences, use
    the location-based services from Google APIs, and enable and trigger the alarm
    as and when the user enters the location.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了清单文件、`build.gradle`文件和XML布局文件以及相应的Kotlin类中的重要组件。在下一章中，我们将使用共享首选项保存从用户那里收到的输入，使用Google
    API的基于位置的服务，并在用户进入位置时启用和触发警报。
