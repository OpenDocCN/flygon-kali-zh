["```\n...\n...\nResources:\n  PrivateSubnet:\n Type: AWS::EC2::Subnet\n Properties:\n AvailabilityZone: !Sub ${AWS::Region}a\n CidrBlock: 172.31.96.0/20\n VpcId: !Ref VpcId\n PrivateRouteTable:\n Type: AWS::EC2::RouteTable\n Properties:\n VpcId: !Ref VpcId\n PrivateSubnetRouteTableAssociation:\n Type: AWS::EC2::SubnetRouteTableAssociation\n Properties:\n RouteTableId: !Ref PrivateRouteTable\n SubnetId: !Ref PrivateSubnet\n...\n...\n```", "```\n> export AWS_PROFILE=docker-in-aws\n> aws ec2 describe-vpcs --query Vpcs[].CidrBlock\n[\n    \"172.31.0.0/16\"\n]\n> aws ec2 describe-subnets --query Subnets[].CidrBlock\n[\n    \"172.31.16.0/20\",\n    \"172.31.80.0/20\",\n    \"172.31.48.0/20\",\n    \"172.31.64.0/20\",\n    \"172.31.32.0/20\",\n    \"172.31.0.0/20\"\n]\n```", "```\n...\n...\nResources:\n NatGateway:\n Type: AWS::EC2::NatGateway\n Properties:\n AllocationId: !Sub ${ElasticIP.AllocationId}\n SubnetId:\n Fn::Select:\n - 0\n - !Ref ApplicationSubnets\n ElasticIP:\n Type: AWS::EC2::EIP\n Properties:\n Domain: vpc\n...\n...\n```", "```\n> cat dev.cfg\nApplicationDesiredCount=1\nApplicationImageId=ami-ec957491\nApplicationImageTag=5fdbe62\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f VpcId=vpc-f8233a80\n> aws ec2 describe-subnets --query Subnets[].[AvailabilityZone,SubnetId] --output table\n-----------------------------------\n|         DescribeSubnets         |\n+-------------+-------------------+\n|  us-east-1a |  subnet-a5d3ecee  |\n|  us-east-1d |  subnet-c2abdded  |\n|  us-east-1f |  subnet-aae11aa5  |\n|  us-east-1e |  subnet-fd3a43c2  |\n|  us-east-1b |  subnet-324e246f  |\n|  us-east-1c |  subnet-d281a2b6  |\n+-------------+-------------------+\n```", "```\n...\n...\nResources:\n PrivateRouteTableDefaultRoute:\n Type: AWS::EC2::Route\n Properties:\n DestinationCidrBlock: 0.0.0.0/0\n RouteTableId: !Ref PrivateRouteTable\n      NatGatewayId: !Ref NatGateway\n...\n...\n```", "```\n> git checkout -b ecs-task-networking\nM stack.yml\nSwitched to a new branch 'ecs-task-networking'\n> git commit -a -m \"Add NAT gateway resources\"\n[ecs-task-networking af06d37] Add NAT gateway resources\n 1 file changed, 33 insertions(+)\n```", "```\n> export AWS_PROFILE=docker-in-aws > aws cloudformation deploy --template-file stack.yml \\\n --stack-name todobackend --parameter-overrides $(cat dev.cfg) \\ --capabilities CAPABILITY_NAMED_IAM Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - todobackend\n> aws ec2 describe-subnets --query \"Subnets[?CidrBlock=='172.31.96.0/20'].SubnetId\" [\"subnet-3acd6370\"]\n> aws ec2 describe-nat-gateways\n{\n    \"NatGateways\": [\n        {\n            \"CreateTime\": \"2018-04-22T10:30:07.000Z\",\n            \"NatGatewayAddresses\": [\n                {\n                    \"AllocationId\": \"eipalloc-838abd8a\",\n                    \"NetworkInterfaceId\": \"eni-90d8f10c\",\n                    \"PrivateIp\": \"172.31.21.144\",\n \"PublicIp\": \"18.204.39.34\"\n                }\n            ],\n            \"NatGatewayId\": \"nat-084089330e75d23b3\",\n            \"State\": \"available\",\n            \"SubnetId\": \"subnet-a5d3ecee\",\n            \"VpcId\": \"vpc-f8233a80\",\n...\n...\n```", "```\n> aws ec2 describe-route-tables \\\n --query \"RouteTables[].Routes[?DestinationCidrBlock=='0.0.0.0/0']\"\n[\n    [\n        {\n            \"DestinationCidrBlock\": \"0.0.0.0/0\",\n            \"NatGatewayId\": \"nat-084089330e75d23b3\",\n            \"Origin\": \"CreateRoute\",\n            \"State\": \"active\"\n        }\n    ],\n    [\n        {\n            \"DestinationCidrBlock\": \"0.0.0.0/0\",\n            \"GatewayId\": \"igw-1668666f\",\n            \"Origin\": \"CreateRoute\",\n            \"State\": \"active\"\n        }\n    ]\n]\n...\n...\n```", "```\n...\n...\n  ApplicationTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      Family: todobackend\n NetworkMode: awsvpc\n      TaskRoleArn: !Sub ${ApplicationTaskRole.Arn}\n      Volumes:\n        - Name: public\n      ContainerDefinitions:\n        - Name: todobackend\n          ...\n          ...\n PortMappings:\n - ContainerPort: 8000 \n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Sub /${AWS::StackName}/ecs/todobackend\n              awslogs-region: !Ref AWS::Region\n              awslogs-stream-prefix: docker\n        - Name: collectstatic\n          Essential: false\n...\n...\n```", "```\n...\n...\nResources:\n  ...\n  ...\n  ApplicationService:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - ApplicationAutoscaling\n      - ApplicationLogGroup\n      - ApplicationLoadBalancerHttpListener\n      - MigrateTask\n    Properties:\n      TaskDefinition: !Ref ApplicationTaskDefinition\n      Cluster: !Ref ApplicationCluster\n      DesiredCount: !Ref ApplicationDesiredCount\n      NetworkConfiguration:\n AwsvpcConfiguration:\n SecurityGroups:\n - !Ref ApplicationSecurityGroup\n Subnets:\n            - !Ref PrivateSubnet\n      LoadBalancers:\n        - ContainerName: todobackend\n          ContainerPort: 8000\n          TargetGroupArn: !Ref ApplicationServiceTargetGroup\n # The Role property has been removed\n      DeploymentConfiguration:\n        MaximumPercent: 200\n        MinimumHealthyPercent: 100\n...\n...\n```", "```\n...\n...\n ApplicationSecurityGroup:\nType: AWS::EC2::SecurityGroup\n Properties:\n GroupDescription: !Sub ${AWS::StackName} Application Security Group\n VpcId: !Ref VpcId\n SecurityGroupEgress:\n - IpProtocol: udp\n FromPort: 53\n ToPort: 53\n CidrIp: 0.0.0.0/0\n - IpProtocol: tcp\n FromPort: 443\n ToPort: 443\n CidrIp: 0.0.0.0/0\n  ...\n  ...\n  ApplicationLoadBalancerToApplicationIngress:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      IpProtocol: tcp\n FromPort: 8000\n ToPort: 8000\n GroupId: !Ref ApplicationSecurityGroup\n      SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup\n  ApplicationLoadBalancerToApplicationEgress:\n    Type: AWS::EC2::SecurityGroupEgress\n    Properties:\n      IpProtocol: tcp\n FromPort: 8000\n ToPort: 8000\n      GroupId: !Ref ApplicationLoadBalancerSecurityGroup\n DestinationSecurityGroupId: !Ref ApplicationSecurityGroup\n  ...\n  ...\n  ApplicationToApplicationDatabaseIngress:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      IpProtocol: tcp\n      FromPort: 3306\n      ToPort: 3306\n      GroupId: !Ref ApplicationDatabaseSecurityGroup\n SourceSecurityGroupId: !Ref ApplicationSecurityGroup\n  ApplicationToApplicationDatabaseEgress:\n    Type: AWS::EC2::SecurityGroupEgress\n    Properties:\n      IpProtocol: tcp\n      FromPort: 3306\n      ToPort: 3306\n```", "```\nGroupId: !Ref ApplicationSecurityGroup\n      DestinationSecurityGroupId: !Ref ApplicationDatabaseSecurityGroup\n...\n...\n```", "```\nResources:\n ...\n ...\n ApplicationServiceTargetGroup:\n     Type: AWS::ElasticLoadBalancingV2::TargetGroup\n     Properties:\n       Protocol: HTTP\n       Port: 8000\n       VpcId: !Ref VpcId\n       TargetType: ip\n       TargetGroupAttributes:\n         - Key: deregistration_delay.timeout_seconds\n           Value: 30\n ...\n ...\n```", "```\n> git commit -a -m \"Add ECS task networking resources\"\n [ecs-task-networking 7e995cb] Add ECS task networking resources\n 2 files changed, 37 insertions(+), 10 deletions(-)\n> git checkout master\nSwitched to branch 'master'\n> aws cloudformation deploy --template-file stack.yml --stack-name todobackend \\\n --parameter-overrides $(cat dev.cfg) --capabilities CAPABILITY_NAMED_IAM\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - todobackend\n```"]