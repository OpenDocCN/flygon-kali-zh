- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: 'Using union types, we can write a method that accepts either the `FahrenheitToCelsius`
    class or the `CelsiusToFahrenheit` class:'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用联合类型，我们可以编写一个接受`FahrenheitToCelsius`类或`CelsiusToFahrenheit`类的方法：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To accept a key/value pair, we need to use a map. Adding our records to it
    would look something like this:'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要接受键/值对，我们需要使用映射。将我们的记录添加到其中看起来像这样：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have actually added two methods here. If we want to add multiple commands
    in one go, we can use REST parameters to accept the array of commands.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上在这里添加了两种方法。如果我们想一次添加多个命令，我们可以使用REST参数来接受命令数组。
- en: 'We can use a decorator to automatically log when our `Add` method is called.
    Our `log` method, for example, could look like this:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用装饰器来在调用我们的`Add`方法时自动记录。例如，我们的`log`方法可能如下所示：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are only going to add this to the following `Add` method because the `Add` method
    that accepts the REST parameters calls this one anyway:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只会将这个添加到以下的`Add`方法中，因为接受REST参数的`Add`方法无论如何都会调用这个方法：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Don't forget that we use the `@` symbol to denote that this is a decorator.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记我们使用`@`符号来表示这是一个装饰器。
- en: 'To add a row with six medium columns of equal size, we use six `div` statements
    with the class set to `col-md-2`, like this:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加一个具有相等大小的六个中等列的行，我们使用六个`div`语句，并将类设置为`col-md-2`，就像这样：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Remember, from our discussion on Bootstrap, that the number of columns in a
    row should equal 12.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，根据我们在Bootstrap中的讨论，一行中的列数应该等于12。
- en: Chapter 3
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章
- en: React provides us with special file types, `.jsx` (for JavaScript) or `.tsx`
    (for TypeScript), to create a file that can be *transpiled* down to JavaScript,
    so React takes the elements that look like HTML and renders them as JavaScript
    instead.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React为我们提供了特殊的文件类型，`.jsx`（用于JavaScript）或`.tsx`（用于TypeScript），以创建一个可以*转译*为JavaScript的文件，因此React将类似HTML的元素呈现为JavaScript。
- en: Both `class` and `for` are reserved keywords in JavaScript. Since `.tsx` files
    seemingly mix JavaScript and HTML together inside the same method, we need aliases
    to specify the CSS class and the control a `label` is associated with. React provides
    `className` to specify the class that should be applied to an HTML element and
    `htmlFor` to specify what control the label is associated with.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`class`和`for`都是JavaScript中的保留关键字。由于`.tsx`文件似乎在同一个方法中混合了JavaScript和HTML，我们需要别名来指定CSS类和`label`关联的控件。React提供了`className`来指定应该应用于HTML元素的类，以及`htmlFor`来指定标签关联的控件。'
- en: When we created our validators, we were creating reusable pieces of code that
    could be used to actually perform specific types of validation; for example, checking
    to ensure that a string was a minimum length. Since these were designed to be
    reusable, we had to separate them from our validation code, which was where we
    actually applied the validation.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们创建验证器时，我们正在创建可重复使用的代码片段，可以用来执行特定类型的验证；例如，检查字符串是否达到最小长度。由于这些被设计为可重复使用，我们必须将它们与实际应用验证的验证代码分开。
- en: By replacing `[0-9]` with `\d`, we convert `^(?:\\((?:[0-9]{3})\\)|(?:[0-9]{3}))[-.
    ]?(?:[0-9]{3})[-. ]?(?:[0-9]{4})$` into the following expression: `^(?:\\((?:\d{3})\\)|(?:\d{3}))[-.
    ]?(?:\d{3})[-. ]?(?:\d{4})$`
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用`\d`替换`[0-9]`，我们将`^(?:\\((?:[0-9]{3})\\)|(?:[0-9]{3}))[-. ]?(?:[0-9]{3})[-.
    ]?(?:[0-9]{4})$`转换为以下表达式：`^(?:\\((?:\d{3})\\)|(?:\d{3}))[-. ]?(?:\d{3})[-. ]?(?:\d{4})$`
- en: With a hard delete, we remove the physical record from the database. With soft
    deletes, we leave the record in place, but we apply a marker to it that means
    the record is no longer active.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用硬删除，我们从数据库中删除物理记录。使用软删除，我们保留记录，但对其应用一个标记，表示该记录不再处于活动状态。
- en: Chapter 4
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章
- en: 'The MEAN stack consists of four major components:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MEAN堆栈由四个主要组件组成：
- en: '**MongoDB**: MongoDB is a NoSQL database that became the de facto standard
    in building database support into client/server applications with Node. There
    are other database options available, but MongoDB is a very popular choice.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB**：MongoDB是一个NoSQL数据库，已成为在Node中构建数据库支持的事实标准。还有其他数据库选项可用，但MongoDB是一个非常受欢迎的选择。'
- en: '**Express**: Express wraps up a log of the complications of working with server-side
    code under Node and makes it easier to use. For instance, if we want to deal with
    HTTP requests, Express makes this trivial, as opposed to writing the equivalent
    Node code.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Express**：Express封装了在Node下处理服务器端代码的许多复杂性，并使其更易于使用。例如，如果我们想处理HTTP请求，Express使这变得微不足道，而不是编写等效的Node代码。'
- en: '**Angular**: Angular is the client-side framework that makes creating powerful
    web frontends easier.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular**：Angular是一个客户端框架，使得创建强大的Web前端更容易。'
- en: '**Node**: Node (or Node.js) is the runtime environment for our application
    on the server.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node**：Node（或Node.js）是服务器上应用程序的运行时环境。'
- en: We supply a prefix to make our component unique. Suppose we had a component
    that we wanted to call `label`; obviously, this will clash with the built-in HTML
    label. To avoid this clash, our component selector would be `atp-label`. Since
    HTML controls never use hyphens, we guarantee that we aren't going to *collide*
    with existing control selectors.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们提供一个前缀使得我们的组件唯一。假设我们有一个组件，我们想要称为`label`；显然，这将与内置的HTML标签冲突。为了避免这种冲突，我们的组件选择器将是`atp-label`。由于HTML控件从不使用连字符，我们保证不会与现有的控件选择器*冲突*。
- en: 'To start our Angular application, we run the following command in the top-level
    Angular folder:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动我们的Angular应用程序，我们在顶层Angular文件夹中运行以下命令：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the same way that our own language is broken down and structured into words
    and punctuation, we can break visual elements down into structures such as color
    and depth. As an example, the language tells us what colors mean, so if we see
    a button with one color on one screen in our application, it should have the same
    underlying usage across other screens in our application; we wouldn't use a green
    button to signify OK on one dialog and then Cancel on another. The idea behind
    a design language is that elements should be consistent. So, if we create our
    application as a Material application, it should be familiar to someone using
    Gmail (for instance).
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与我们自己的语言被分解和结构化为单词和标点符号一样，我们可以将视觉元素分解为结构，例如颜色和深度。例如，语言告诉我们颜色的含义，因此，如果我们在应用程序中的一个屏幕上看到一个带有一个颜色的按钮，它应该在我们应用程序的其他屏幕上具有相同的基础用法；我们不会在一个对话框上使用绿色按钮来表示确定，然后在另一个对话框上使用取消。设计语言背后的理念是元素应该是一致的。因此，如果我们将我们的应用程序创建为一个Material应用程序，那么对于使用Gmail的人来说，它应该是熟悉的（例如）。
- en: 'We create services using the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令创建服务：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This can be shortened to the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以缩短为以下内容：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Whenever a request comes into our server, we need to determine how to handle
    the request the best, which means that we have to route it to the appropriate
    piece of functionality to handle the request. Express routing is the mechanism
    we use to accomplish this.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当请求进入我们的服务器时，我们需要确定如何处理最好的请求，这意味着我们必须将其路由到处理请求的适当功能部分。Express路由是我们用来实现这一点的机制。
- en: RxJS implements the observer pattern. This pattern has an object (known as the
    **subject**) that keeps track of an array of dependencies (known as the **observers**)
    and notifies them of *interesting* behaviors, such as state changes.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RxJS实现了观察者模式。这种模式有一个对象（称为**subject**），它跟踪一系列依赖项（称为**observers**），并通知它们*有趣*的行为，例如状态更改。
- en: '**CORS** stands for **Cross-Origin Request Sharing**. With CORS, we let *known*
    external locations have access to restricted operations on our site. In our code,
    since Angular is running from a different site to our web server (`localhost:4200`,
    as opposed to `localhost:3000`), we need to enable CORS support to post, otherwise
    we won''t return anything when we make requests from Angular.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CORS**代表**跨域请求共享**。使用CORS，我们允许*已知*的外部位置访问我们站点上的受限操作。在我们的代码中，由于Angular是从与我们的Web服务器不同的站点运行的（`localhost:4200`，而不是`localhost:3000`），我们需要启用CORS支持来进行发布，否则当我们从Angular发出请求时，我们将不会返回任何内容。'
- en: Chapter 5
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章
- en: GraphQL is not intended to fully replace REST clients. It can act as a cooperative
    technology, so it could very well consume multiple REST APIs itself to produce
    graphs.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GraphQL并不打算完全取代REST客户端。它可以作为一种合作技术，因此它很可能会自己消耗多个REST API来生成图。
- en: A mutation is an operation that is intended to change the data in the graph
    in some way. We might want to add new items to the graph, update items, or delete
    items. It is important to remember that the mutation is just changing the graph
    – if the change has to be persisted to where the graph got the information from,
    then it is the graph's responsibility to call out to underlying services to make
    those changes.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变异是一种旨在以某种方式更改图中数据的操作。我们可能想要向图中添加新项目，更新项目或删除项目。重要的是要记住，变异只是改变了图 - 如果更改必须持久保存到图从中获取信息的地方，那么图就有责任调用底层服务来进行这些更改。
- en: 'In order to pass a value to a subcomponent, we need to use `@Input()` to expose
    a field for binding from the parent. In our code example, we set up a `Todo` item
    like so:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将值传递给子组件，我们需要使用`@Input()`来公开一个字段，以便从父级进行绑定。在我们的代码示例中，我们设置了一个`Todo`项目，如下所示：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With GraphQL, a resolver represents an instruction on how to turn an operation
    into data; they are organized as a one-to-one mapping to the fields. The schema,
    on the other hand, represents a number of resolvers.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用GraphQL，解析器代表了如何将操作转换为数据的指令；它们被组织为与字段的一对一映射。另一方面，模式代表了多个解析器。
- en: 'To create a singleton, the first thing that we need to do is create our class
    with a private constructor. A private constructor means that the only place that
    we can instantiate our class is from inside the class itself:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个单例，我们需要做的第一件事是创建一个带有私有构造函数的类。私有构造函数意味着我们可以实例化我们的类的唯一位置是从类本身内部：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next thing we need to do is add a field to hold a reference to the class
    instance and then offer a public static property to access that instance. The
    public property will take care of instantiating the class if it''s not already
    available so that we''ll always be able to access it:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要做的是添加一个字段来保存对类实例的引用，然后提供一个公共静态属性来访问该实例。公共属性将负责实例化类（如果尚未可用），以便我们始终能够访问它：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Chapter 6
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: Using `io.emit`, we can send a message to all connected clients.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`io.emit`，我们可以向所有连接的客户端发送消息。
- en: 'If we wanted to send a message to all the users in a particular room, we would
    use something like the following, where we say what room we are sending the message
    to and then use `emit` to set the `event` and `message`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要向特定房间中的所有用户发送消息，我们将使用类似以下的内容，其中我们说我们要向哪个房间发送消息，然后使用`emit`来设置`event`和`message`：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To send the message to all users, except for the sender, we need to broadcast
    it:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将消息发送给除发送方之外的所有用户，我们需要进行广播：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There are certain event names that we cannot use as a message because they have
    been restricted due to them having a special meaning to Socket.IO. These are `error`,
    `connect`, `disconnect`, `disconnecting`, `newListener`, `removeListener`, `ping`,
    and `pong`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一些事件名称，我们不能用作消息，因为它们由于具有对Socket.IO具有特殊含义而受到限制。这些是`error`，`connect`，`disconnect`，`disconnecting`，`newListener`，`removeListener`，`ping`和`pong`。
- en: Socket.IO is made up of a number of different cooperating technologies, one
    of which is called Engine.IO. This provides the underlying transport mechanism.
    The first type of connection it takes, when connecting, is an HTTP long poll,
    which is a fast and efficient transport mechanism to open. During idle periods,
    Socket.IO attempts to determine whether or not the transport can be changed over
    to a socket and, if it can use a socket, it seamlessly and invisibly upgrades
    the transport to use sockets. As far as the client is concerned, they connect
    quickly, and messages are reliable since the Engine.IO part establishes connections,
    even if firewalls and load balancers are present.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Socket.IO由许多不同的协作技术组成，其中之一称为Engine.IO。这提供了底层传输机制。它在连接时采用的第一种连接类型是HTTP长轮询，这是一种快速高效的传输机制。在空闲期间，Socket.IO会尝试确定传输是否可以切换到套接字，如果可以使用套接字，它会无缝地升级传输以使用套接字。对于客户端来说，它们连接迅速，消息可靠，因为Engine.IO部分建立连接，即使存在防火墙和负载均衡器。
- en: Chapter 7
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章
- en: 'In the `@Component` definition, we use `host` to map the host event that we
    want to work with to the relevant Angular method. In our `MapViewComponent`, for
    instance, we used the following component definition to map the `window load`
    event to a `Loaded` method:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@Component`定义中，我们使用`host`将我们要处理的主机事件映射到相关的Angular方法。例如，在我们的`MapViewComponent`中，我们使用以下组件定义将`window
    load`事件映射到`Loaded`方法：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Latitude and longitude are geographic terms that are used to identify exactly
    where something is on the planet. Latitude tells us how far north or south something
    is from the equator, with the equator being 0; a positive number means we are
    north of the equator, while a negative number means we are going south from the
    equator. Longitude tells us how far east or west we are from the vertically centered
    line of the Earth which, by convention, runs through Greenwich in London. Again,
    if we are moving east, the numbers are positive, while moving west means the numbers
    are negative.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 纬度和经度是用于确定地球上某个位置的地理术语。纬度告诉我们某物距赤道有多远，赤道为0；正数表示我们在赤道以北，负数表示我们在赤道以南。经度告诉我们我们距离地球的中心线（按照惯例，通过伦敦的格林威治）有多远。同样，如果我们向东移动，数字是正数，而向西移动意味着数字是负数。
- en: The act of converting a location, represented by latitude and longitude, into
    an address is called reverse geocoding.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将经度和纬度表示的位置转换为地址的行为称为反向地理编码。
- en: We use a Firestore database, part of Google's Firebase cloud service, to save
    our data.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Firestore数据库，这是Google的Firebase云服务的一部分，用来保存我们的数据。
- en: Chapter 8
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章
- en: A container is a running instance that takes in the various pieces of software
    that's needed to run the application. This is the starting point for us; containers
    are built from images, which you can either build yourself or download from a
    central Docker database. Containers can be opened up to other containers, such
    as the host operating system, or even to the wider world using ports and volumes.
    One of the big selling points with a container is that it is easy to set up and
    create and can be stopped and started very quickly.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器是一个运行实例，它接收运行应用程序所需的各种软件。这是我们的起点；容器是从镜像构建的，您可以自己构建或从中央Docker数据库下载。容器可以向其他容器打开，例如主机操作系统，甚至可以使用端口和卷向更广泛的世界打开。容器的一个重要卖点是它易于设置和创建，并且可以快速停止和启动。
- en: 'When we were starting up Docker containers, we discussed two methods of achieving
    this. The first approach involves using a combination of `docker build` and `docker
    run` to start the services:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们启动Docker容器时，我们讨论了两种实现方法。第一种方法涉及使用`docker build`和`docker run`的组合来启动服务：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The use of `-d` signifies that it do not block the console as it detach and
    run silently in the background. This allows us to run a group of these commands
    together. In the download, you will find a batch file that I created to start
    them like this on Windows.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-d`表示它不会阻塞控制台，因为它会在后台分离并静默运行。这使我们能够一起运行一组这些命令。在下载中，您会找到一个我创建的批处理文件，用于在Windows上启动它们。
- en: 'The second approach, and the one that I would recommend, uses Docker composition.
    In our example, we created a `docker-compose.yml` file that we used to group our
    microservices together. To run our composition file, we need to use the following
    command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法，也是我推荐的方法，使用Docker组合。在我们的示例中，我们创建了一个`docker-compose.yml`文件，用于将我们的微服务组合在一起。要运行我们的组合文件，我们需要使用以下命令：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we use `docker run` to start our container, we can specify the port inside
    it using the `-p` switch. The following example remaps port `3000` to `17171`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用`docker run`来启动容器，我们可以使用`-p`开关在其中指定端口。以下示例将端口`3000`重新映射到`17171`：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When we use Docker composition, we specify the port remapping inside the `docker-compose.yml`
    file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Docker组合时，我们在`docker-compose.yml`文件中指定端口重映射。
- en: Swagger provides many useful features for us. We can use it for things such
    as creating API documentation, prototyping APIs, and using it to auto-generate
    our code, as well as for API testing.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Swagger为我们提供了许多有用的功能。我们可以用它来创建API文档，原型化API，并用它来自动生成我们的代码，以及进行API测试。
- en: When a React method cannot see the state, we have two options. We can either
    change it to use the fat arrow, `=>`, so that the `this` context is automatically
    captured, or we can use the JavaScript `bind` feature to bind to the correct context.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当React方法无法看到状态时，我们有两个选择。我们可以将其更改为使用`=>`，以便自动捕获`this`上下文，或者我们可以使用JavaScript的`bind`功能来绑定到正确的上下文。
- en: Chapter 9
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: While TensorFlow is now available with TypeScript/JavaScript support, it was
    originally released as a Python library. The backend of TensorFlow was written
    to use high-performance C++.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然TensorFlow现在支持TypeScript/JavaScript，但最初是作为Python库发布的。TensorFlow的后端是使用高性能C++编写的。
- en: Supervised machine learning takes previous learning and uses this to work against
    new data. It uses labeled examples for this so that it learns correct answers.
    Behind this, there are training datasets that supervised algorithms work against
    to refine their knowledge.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监督式机器学习利用先前的学习，并利用这些来处理新数据。它使用标记的示例来学习正确的答案。在这背后，有训练数据集，监督算法会根据这些数据集来完善它们的知识。
- en: MobileNet is a specialist **Convolutional Neural Network** (**CNN**) that, among
    other things, provides pre-trained image classification models.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MobileNet是一种专门的**卷积神经网络**（**CNN**），除其他外，它提供了预先训练的图像分类模型。
- en: The MobileNet `classify` method defaults to returning three classifications
    containing the classification name and the probability. This can be overridden
    by specifying the number of classifications to return as a parameter.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MobileNet的`classify`方法默认返回包含分类名称和概率的三个分类。这可以通过指定要返回的分类数量来覆盖。
- en: 'When we want to create our Vue application, we use the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们想要创建Vue应用程序时，我们使用以下命令：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Since we want to create TypeScript applications, we choose to manually select
    features and, on the features screen, we make sure that we choose TypeScript as
    our option.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想创建TypeScript应用程序，我们选择手动选择功能，并在功能屏幕上确保选择TypeScript作为我们的选项。
- en: When we create a class in a `.vue` file, we use `@Component` to mark it as a
    component that can be registered in Vue.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在`.vue`文件中创建一个类时，我们使用`@Component`来标记它为一个可以在Vue中注册的组件。
- en: Chapter 10
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: JavaScript and C# both trace their syntax roots back to C, so they largely follow
    similar language paradigms such as using `{ }` to denote the scope of an operation.
    Since all JavaScript is valid TypeScript, this means that TypeScript has exactly
    the same style here.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript和C#都可以追溯到C语言的语法根源，因此它们在很大程度上遵循类似的语言范式，比如使用`{}`来表示操作的范围。由于所有的JavaScript都是有效的TypeScript，这意味着TypeScript在这方面完全相同。
- en: 'The method that starts our program is the `static Main` method. It looks like
    this:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动我们程序的方法是`static Main`方法。它看起来像这样：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ASP.NET Core uses a rewritten .NET version that removes the constraint that
    it can only run on the Windows platform. This means that the reach of ASP.NET
    has greatly increased because it can now run on Linux platforms, as well as on
    Windows.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ASP.NET Core使用了重写的.NET版本，去除了它只能在Windows平台上运行的限制。这意味着ASP.NET的覆盖范围大大增加，因为它现在可以在Linux平台上运行，也可以在Windows上运行。
- en: Discog limits the number of requests that can be issued from a single IP. For
    authenticated requests, Discog limits the rate of requests to 60 per minute. For
    unauthenticated requests, for most cases, the number of requests that can be sent
    is 25 per minute. The number of requests is monitored using a moving window.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Discog限制了单个IP发出的请求数量。对于经过身份验证的请求，Discog将请求速率限制为每分钟60次。对于未经身份验证的请求，在大多数情况下，可以发送的请求数量为每分钟25次。请求的数量使用移动窗口进行监控。
