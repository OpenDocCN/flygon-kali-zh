["```cs\ngEnv->pRenderer->SetCurrentContext(hWnd);\n// Restore context\ngEnv->pRenderer->MakeMainContextActive();\n```", "```cs\ngEnv->pRenderer->ChangeViewport(0, 0, width, height, true);\n```", "```cs\nCCamera camera;\n// Set frustrum based on width, height and field of view (60)\ncamera.SetFrustum(width, height, DEG2RAD(60));\n// Set camera scale, orientation and position.\nVec3 scale(1, 1, 1);\nQuat rotation = Quat::CreateRotationXYZ(Ang3(DEG2RAD(-45), 0, 0));\nVec3 position(0, 0, 0);\ncamera.SetMatrix(Matrix34::Create(scale, rotation, position));\ngEnv->pRenderer->SetCamera(m_camera);\n```", "```cs\n// Set clear color to pure black\nColorF clearColor(0.f)\n\ngEnv->pRenderer->SetClearColor(Vec3(clearColor.r, clearColor.g, clearColor.b));\ngEnv->pRenderer->ClearBuffer(FRT_CLEAR, &clearColor);\n```", "```cs\ngEnv->pSystem->RenderBegin();\ngEnv->pSystem->SetViewCamera(m_camera);\n\n// Insert rendering here\n\ngEnv->pSystem->RenderEnd();\n```", "```cs\ngEnv->pRenderer->SetViewport(0, 0, width, height);\ngEnv->p3DEngine->Update();\n\nint renderFlags = SHDF_ALLOW_AO | SHDF_ALLOWPOSTPROCESS | SHDF_ALLOW_WATER | SHDF_ALLOWHDR | SHDF_ZPASS;\n\ngEnv->p3DEngine->RenderWorld(renderFlags, &camera, 1, __FUNCTION__);\n```", "```cs\nfloat Script : STANDARDSGLOBAL\n<\n  string Script =        \n           \"Public;\"\n           \"SupportsDeferredShading;\"\n           \"SupportsAttrInstancing;\"\n           \"ShaderDrawType = Light;\"\n           \"ShaderType = General;\"\n>;\n```", "```cs\n#if D3D11\n// Include DX11 specific shader code here\n#endif\n```", "```cs\nProperty\n{\n  Name = %MYPROPERTY\n  Mask = 0x160000000\n  Property    (My Property)\n  Description (My property is a very good property)\n}\n```", "```cs\nsampler2D mySampler = sampler_state\n{\n  Texture = EngineAssets/Textures/myTexture.dds;\n  MinFilter = LINEAR;\n  MagFilter = LINEAR;\n  MipFilter = LINEAR;\n  AddressU = Wrap;\n  AddressV = Wrap;\n  AddressW = Wrap;\n}\n```", "```cs\nsampler2D mySamplerWithTextureSlot = sampler_state\n{\n  Texture = $Diffuse;\n  MinFilter = LINEAR;\n  MagFilter = LINEAR;\n  MipFilter = LINEAR; \n  AddressU = Wrap;\n  AddressV = Wrap;\n  AddressW = Wrap;\n}\n```", "```cs\nhalf4 myMap = GetTexture2D(mySampler, baseTC.xy);\n```", "```cs\nIStatObj *pStatObj = pMyEntity->GetStatObj(0);\n```", "```cs\nIIndexedMesh *pIndexedMesh = pStatObj->GetIndexedMesh();\nif(pIndexedMesh)\n{\n  IIndexedMesh::SMeshDescription meshdesc;\n  pIndexedMesh->GetMesh(meshdesc);\n}\n```", "```cs\nIMaterial *pMaterial = pEntity->GetMaterial();\n```", "```cs\nIMaterial *pNewMaterial = gEnv->p3DEngine->GetMaterialManager()->CloneMaterial(pMaterial);\n```", "```cs\npEntity->SetMaterial(pNewMaterial);\n```", "```cs\nfloat newAlpha = 0.5f;\npMaterial->SetGetMaterialParamFloat(\"alpha\",  0.5f, false);\n```", "```cs\nconst SShaderItem& shaderItem(pMaterial->GetShaderItem());\n```", "```cs\nDynArray<SShaderParam> params = shaderItem.m_pShaderResources->GetParameters();\n```", "```cs\n// Iterate through the parameters to find the one we want to modify\nfor(auto it = params.begin(), end = params.end(); it != end; ++it)\n{\n  SShaderParam param = *it;\n\n  if(!strcmp(paramName, param.m_Name))\n  {\n    UParamVal paramVal;\n    paramVal.m_Float = 0.7f;\n\n    // Set the value of the parameter (to 0.7f in this case)\n    param.SetParam(paramName, &params, paramVal);\n\n    SInputShaderResources res;\n    shaderItem.m_pShaderResources->ConvertToInputResource(&res);\n\n    res.m_ShaderParams = params;\n\n    // Update the parameters in the resources.\n    shaderItem.m_pShaderResources->SetShaderParams(&res,shaderItem.m_pShader);\n    break;\n  }\n}\n```", "```cs\nvoid CTreeOfTime::ProcessEvent(SEntityEvent& event)\n{\n  switch(event.event) \n  { \n    case ENTITY_EVENT_INIT:\n    case ENTITY_EVENT_RESET:\n    case ENTITY_EVENT_START_LEVEL:\n    {\n      IEntity *pEntity = GetEntity();\n\n      pEntity->LoadGeometry(0, \"Objects/nature/trees/ash/tree_ash_01.cgf\");\n    }\n    break;\n  }\n}\n```", "```cs\nif(IStatObj *pStatObj = GetEntity()->GetStatObj(0))\n{\n  IMaterial *pMaterial = pStatObj->GetMaterial();\n  if(pMaterial == nullptr)\n    return;\n\n  IMaterial *pBranchMaterial = pMaterial->GetSubMtl(0);\n  if(pBranchMaterial == nullptr)\n    return;\n\n  // Make alpha peak at 12\n  float alphaTest = abs(gEnv->p3DEngine->GetTimeOfDay()->GetTime() - 12) / 12;\n  pBranchMaterial->SetGetMaterialParamFloat(\"alpha\", alphaTest, false);\n}\n```"]