- en: Hot Dog or Not Hot Dog Using Machine Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用机器学习的热狗或不是热狗
- en: In this chapter, we will learn how to use machine learning to create a model
    that we can use for image classification. We will export the model as a TensorFlow
    model that we can use on Android devices and a CoreML model that we can use on
    iOS devices. In order to train and export models, we will use Azure Cognitive
    Services and the Custom Vision service.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用机器学习创建一个用于图像分类的模型。我们将导出该模型为TensorFlow模型，可以在Android设备上使用，以及CoreML模型，可以在iOS设备上使用。为了训练和导出模型，我们将使用Azure认知服务和Custom
    Vision服务。
- en: Once we have exported the models, we will learn how to use them for Android
    and iOS apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导出了模型，我们将学习如何在Android和iOS应用程序中使用它们。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Training a model with Azure Cognitive Service Custom Vision
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure认知服务Custom Vision训练模型
- en: How to use TensorFlow models for image classification on an Android device
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Android设备上使用TensorFlow模型进行图像分类
- en: How to use CoreML models for image classification on an iOS device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在iOS设备上使用CoreML模型进行图像分类
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To be able to complete this project, you need to have Visual Studio for Mac
    or PC installed, as well as the Xamarin components. See [Chapter 1](80b2455c-7174-4e4b-b2eb-916d03b9d3f6.xhtml), *Introduction
    to Xamarin*, for more details on how to set up your environment. To use Azure
    Cognitive Services, you need a Microsoft account. The source code for this chapter
    is available at the GitHub repository at [https://github.com/PacktPublishing/Xamarin.Forms-Projects/tree/master/Chapter-9](https://github.com/PacktPublishing/Xamarin.Forms-Projects/tree/master/Chapter-9).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个项目，您需要安装Visual Studio for Mac或PC，以及Xamarin组件。有关如何设置您的环境的更多详细信息，请参见《Xamarin简介》的第1章。要使用Azure认知服务，您需要一个Microsoft帐户。本章的源代码可在GitHub存储库中找到。
- en: Machine learning
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习
- en: 'The term machine learningwas coined in 1959 by Arthur Samuel, an American pioneer
    in artificial intelligence. Tom M. Mitchell, an American computer scientist, provided
    a more formal definition of machine learning later:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习这个术语是由美国人工智能先驱阿瑟·塞缪尔于1959年创造的。美国计算机科学家汤姆·M·米切尔后来提供了对机器学习的更正式定义。
- en: A computer program is said to learn from experience E with respect to some class
    of tasks T and performance measure P if its performance at tasks in T, as measured
    by P, improves with experience E.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序据说可以从经验E中学习某类任务T和性能度量P，如果它在T中的任务表现，根据P来衡量，随着经验E的增加而提高。
- en: In simpler terms, this quote describes a computer program that has the ability
    to learn without being explicitly programmed. In machine learning, algorithms
    are used to build a mathematical model of sample data or training data. The models
    are used for computer programs to make predictions and decisions without being
    explicitly programmed for the task in question.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这句话描述了一个计算机程序，它具有无需明确编程即可学习的能力。在机器学习中，算法用于构建样本数据或训练数据的数学模型。这些模型用于计算机程序进行预测和决策，而无需为所涉及的任务明确编程。
- en: Azure Cognitive Services – Custom Vision
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure认知服务——Custom Vision
- en: Custom Vision is a tool or service that can be used for training models for
    image classification and for detecting objects in images. In Custom Vision, we
    are able to upload our own images and tag them so that they can be trained for
    image classification. If we train a model for object detection, we can also tag
    specific areas of an image. Because models are already pretrained for basic image
    recognition, we don't need a large amount of data to get a great result. The recommendation
    is to have at least 30 images per tag.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Custom Vision是一个用于训练图像分类模型和检测图像中对象的工具或服务。在Custom Vision中，我们可以上传自己的图像并对其进行标记，以便对图像分类进行训练。如果我们为对象检测训练模型，我们还可以标记图像的特定区域。由于模型已经预先训练用于基本图像识别，我们不需要大量数据就可以获得很好的结果。建议每个标签至少有30张图像。
- en: When we have trained a model, we can use it with an API that is part of the
    Custom Vision service. We can also, however, export models for CoreML (iOS), TensorFlow
    (Android), ONNX (Windows), and Dockerfile (Azure IoT Edge, Azure Functions, and
    AzureML). These models can be used to carry out classification or object detection
    without having a connection to the Custom Vision service.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们训练了一个模型后，我们可以使用Custom Vision服务中的API。然而，我们也可以将模型导出为CoreML（iOS）、TensorFlow（Android）、ONNX（Windows）和Dockerfile（Azure
    IoT Edge，Azure Functions和AzureML）。这些模型可以用于进行分类或对象检测，而无需连接到Custom Vision服务。
- en: CoreML
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CoreML
- en: CoreML is a framework that was introduced in iOS 11\. CoreML makes it possible
    to integrate Machine Learning models into iOS apps. On top of CoreML, we have
    three high-level APIs—Vision APIs for image analysis, natural language APIs for
    natural language processing, and Gameplay Kit for evaluating learned decision
    trees. More information about CoreML can be found in the official documentation
    from Apple at [https://developer.apple.com/documentation/coreml](https://developer.apple.com/documentation/coreml).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CoreML是在iOS 11中引入的一个框架。CoreML使得将机器学习模型集成到iOS应用程序中成为可能。在CoreML之上，我们有三个高级API——Vision
    API用于图像分析，自然语言API用于自然语言处理，以及Gameplay Kit用于评估学习决策树。有关CoreML的更多信息可以在苹果的官方文档中找到。
- en: TensorFlow
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow
- en: TensorFlow is an open source machine learning framework, which can be found
    at [https://www.tensorflow.org/](https://www.tensorflow.org/). TensorFlow can
    be used for more than simply running models on mobile devices—it can also be used
    for training models. For running it on mobile devices, we have TensorFlow Mobile
    and TensorFlow Lite. The models that are exported from Azure Cognitive Services
    are for TensorFlow Mobile. There are also Xamarin bindings for both TensorFlow
    Mobile and TensorFlow Lite, which are available as NuGet packages. However, bear
    in mind that plans have been made to depreciate TensorFlow Mobile during 2019\.
    This does not mean that we can't use it after that, but it does mean that it is
    unlikely to get any more updates after they have depreciated it, and as long as
    Custom Vision still exports models for TensorFlow Mobile, we will continue to
    use it. The concepts will be the same, even if the APIs look a bit different.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow是一个开源的机器学习框架，可以在[https://www.tensorflow.org/](https://www.tensorflow.org/)找到。TensorFlow不仅可以用于在移动设备上运行模型，还可以用于训练模型。为了在移动设备上运行它，我们有TensorFlow
    Mobile和TensorFlow Lite。从Azure认知服务导出的模型是为TensorFlow Mobile设计的。还有Xamarin绑定可用作NuGet软件包，用于TensorFlow
    Mobile和TensorFlow Lite。然而，请记住，计划在2019年停用TensorFlow Mobile。这并不意味着停用后我们就不能使用它，但意味着在停用后它不太可能再得到更新，只要Custom
    Vision仍然为TensorFlow Mobile导出模型，我们将继续使用它。即使API看起来有些不同，概念仍将是相同的。
- en: Project overview
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: If you have seen the TV series *Silicon Valley*, you have probably heard of
    the *Not Hotdog* application. In this chapter, we will learn how to build that
    app. The first part of this chapter will involve collecting the data that we will
    use for creating a machine learning model that can detect whether or not a photo
    has a hot dog.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看过电视剧《硅谷》，你可能听说过《不是热狗》应用程序。在本章中，我们将学习如何构建该应用程序。本章的第一部分将涉及收集我们用于创建可以检测照片中是否有热狗的机器学习模型的数据。
- en: In the second part of the chapter, we will build an app for iOS and an app for
    Android where the user can pick a photo in the photo library in order to analyze
    it to see whether it has a hot dog. The estimated time for completing this project
    is 120 minutes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们将为iOS和Android构建一个应用程序，用户可以从照片库中选择照片，以便分析照片是否有热狗。完成此项目的预计时间为120分钟。
- en: Getting started
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: We can use either Visual Studio 2017 on a PC or Visual Studio for Mac to do
    this project. To build an iOS app using Visual Studio for PC, you must have a
    Mac connected. If you don't have access to a Mac at all, you can choose to just
    do the Android parts of this project. Similarly, if you only have a Mac, you can
    choose to just do the iOS or Android parts of this project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用PC上的Visual Studio 2017或Mac上的Visual Studio来完成此项目。要使用PC上的Visual Studio构建iOS应用程序，必须连接Mac。如果根本没有Mac，可以选择只完成此项目的Android部分。同样，如果只有Mac，可以选择只完成此项目的iOS或Android部分。
- en: Building the Hot Dog or Not Hot Dog application using machine learning
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用机器学习构建热狗或不是热狗应用程序
- en: Let's get started! We will first train a model for image classification that
    we can use later in the chapter to decide whether a photo has a hot dog.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！我们将首先训练一个图像分类模型，以便在本章后面决定照片是否有热狗。
- en: Training a model
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练模型
- en: To train a model for image classification, we need to collect photos of hot
    dogs and photos that aren't of hot dogs. Because most items in the world are not
    hot dogs, we need more photos that don't contain hot dogs. It's better if the
    photos of hot dogs cover a lot of different hot-dog scenarios—with bread, with
    ketchup, or with mustard, such as. This is so the model will be able to recognize
    hot dogs in different situations. When we are collecting photos that aren't of
    hot dogs, we also need to have a big variety of photos that are both of items
    that are similar to hot dogs and that are completely different to hot dogs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要为图像分类训练模型，我们需要收集热狗照片和不含热狗的照片。因为世界上大多数物品都不是热狗，所以我们需要更多不含热狗的照片。最好是热狗照片涵盖许多不同的热狗场景——有面包、有番茄酱或芥末等。这样模型就能够识别不同情况下的热狗。当我们收集不含热狗的照片时，我们还需要有各种各样的照片，既与热狗相似又完全不同的物品的照片。
- en: The model that is in the solution on GitHub was trained with 240 photos, 60
    of which were of hot dogs and 180 of which were not.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的解决方案中的模型是用240张照片训练的，其中60张是热狗，180张不是。
- en: 'Once we have collected all the photos, we will be ready to start training the
    model by going through the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 收集了所有照片后，我们将准备通过以下步骤开始训练模型：
- en: Go to [https://customvision.ai](https://customvision.ai).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://customvision.ai](https://customvision.ai)。
- en: Log in and create a new project.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录并创建一个新项目。
- en: Give the project a name—in our case, `HotDogOrNot`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目命名——在我们的案例中是`HotDogOrNot`。
- en: The project type should be Classification.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目类型应为分类。
- en: Select General (compact) as the domain. We use a compact domain if we want to
    export models and run them on a mobile device.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择通用（紧凑）作为域。如果我们想要在移动设备上导出模型并运行它们，我们就使用紧凑域。
- en: 'Click Create project to continue, as shown in the following screenshot:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建项目继续，如下截图所示：
- en: '![](img/63c7c8a3-0227-4c15-b2f4-312c4ade4165.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63c7c8a3-0227-4c15-b2f4-312c4ade4165.png)'
- en: Tagging images
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给图像打标签
- en: 'Once we have created a project, we can start to upload images and tag them.
    We will start by adding photos of hot dogs by going through the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，我们可以开始上传图像并对其进行标记。我们将通过以下步骤开始添加热狗照片：
- en: Click Add images.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加图像。
- en: Select the photos of hot dogs that should be uploaded.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择应上传的热狗照片。
- en: 'Tag the photos with hotdog, as shown in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用如下截图所示的hotdog标记照片：
- en: '![](img/efe2e175-e770-4e68-997c-8d7494336788.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efe2e175-e770-4e68-997c-8d7494336788.png)'
- en: 'Once we have uploaded all the photos of hot dogs, it is time to upload photos
    that aren''t of hot dogs by going through the following steps. For best results,
    we should also include photos of objects that look similar to hot dogs but are
    not:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们上传了所有的热狗照片，就该上传不是热狗的照片了。为了获得最佳结果，我们还应该包括看起来类似热狗但实际不是的物体的照片：
- en: Click Add images.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加图片”。
- en: Select the photos that aren't of hot dogs.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择不是热狗的照片。
- en: 'Tag the photos with not-hotdog, as shown in the following screenshot. Set this
    tag as a negative tag. A negative tag is used for photos that don''t contain any
    objects that we have created other tags for. In this case, none of the photos
    we will upload contain hot dogs:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`not-hotdog`标记照片，如下截图所示。将此标记设置为负标记。负标记用于不包含我们为其他标记创建的任何对象的照片。在这种情况下，我们上传的照片中都不包含热狗：
- en: '![](img/7e8a8e61-fa42-4767-9e77-d53590b6cabe.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e8a8e61-fa42-4767-9e77-d53590b6cabe.png)'
- en: Training a model
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练模型
- en: Once we have uploaded the photos, it is time to train a model. Not all the photos
    that we are uploading will be used for training; some will be used for verification,
    to give us a score about how good the model is. If we upload photos in chunks
    and train the model after each chunk, we will be able to see our scores improving. To
    train a model, click the green Train button at the top of the page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们上传了照片，就该训练模型了。我们上传的照片并不都用于训练；有些将用于验证，以便给出模型的好坏得分。如果我们分批上传照片并在每批后训练模型，就能看到我们的得分在提高。点击页面顶部的绿色“训练”按钮来训练模型。
- en: 'The following screenshot shows the result of a training iteration, where the
    precision of the model is 93.4%:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一次训练迭代的结果，模型的精度为93.4%：
- en: '![](img/3fdce6a7-9a2a-435c-be74-15400236186b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fdce6a7-9a2a-435c-be74-15400236186b.png)'
- en: Exporting a model
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出模型
- en: 'Once we have trained a model, we will be able to export it so that it can be
    used on a device. We can use the APIs if we want to, but to make fast classifications,
    and to be able to do this offline, we will add the models to the app packages.
    Export and download the CoreML model and the TensorFlow model, as shown in the
    following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们训练好了模型，就可以导出它以便在设备上使用。如果需要的话，我们可以使用API，但为了快速分类并且能够离线进行，我们将把模型添加到应用程序包中。导出并下载CoreML模型和TensorFlow模型，如下截图所示：
- en: '![](img/2d31e16a-cd98-4f10-847a-fc0f27fa2258.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d31e16a-cd98-4f10-847a-fc0f27fa2258.png)'
- en: Building the app
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用
- en: Once we have one CoreML model and one TensorFlow model, it is time to build
    the app. Our app will use the trained models to classify photos according to whether they
    are photos of hot dogs. The CoreML model that we exported from the Custom Vision
    service will be used for iOS and the TensorFlow model for Android.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了一个CoreML模型和一个TensorFlow模型，就该构建应用了。我们的应用将使用训练好的模型来对照片进行分类，判断它们是否是热狗照片。从Custom
    Vision服务中导出的CoreML模型将用于iOS，而TensorFlow模型将用于Android。
- en: 'Create a new project with the template for Mobile App (Xamarin.Forms). The
    template can be found under the Cross-Platform tab. Use `HotDotOrNot` as the name
    of the project, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin.Forms模板创建一个新项目。该模板可以在跨平台选项卡下找到。将项目命名为`HotDotOrNot`，如下截图所示：
- en: '![](img/a1ba39cd-ba5a-43a5-83b7-eeada2179706.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1ba39cd-ba5a-43a5-83b7-eeada2179706.png)'
- en: 'In the next step, we will select what Xamarin.Forms template we should use.
    For our project, select Blank. For this project, we will target Android and iOS
    as the platforms and use .NET Standard as the code-sharing strategy, as shown
    in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将选择应该使用哪个Xamarin.Forms模板。对于我们的项目，选择空白。对于这个项目，我们将以Android和iOS为平台，并使用.NET
    Standard作为代码共享策略，如下截图所示：
- en: '![](img/292ca4cd-e87f-4563-8e81-c0d2340024fe.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/292ca4cd-e87f-4563-8e81-c0d2340024fe.png)'
- en: Before doing anything else we will update the Xamarin.Forms NuGet package to
    make sure that we have the latest version of it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何其他事情之前，我们将更新Xamarin.Forms NuGet包，以确保我们拥有最新版本。
- en: Classifying images with machine learning
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用机器学习对图像进行分类
- en: 'The code that we will use for image classification cannot be shared between
    the iOS and the Android projects. However, to be able to carry out classifications
    from shared code (the `HotDogOrNot` project), we will create an interface. First,
    however, we will create a class for the `EventArgs` that we will use in the interface
    by going through the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于图像分类的代码无法在iOS和Android项目之间共享。但是，为了能够从共享代码（`HotDogOrNot`项目）进行分类，我们将创建一个接口。不过，首先我们将通过以下步骤为接口创建一个`EventArgs`类：
- en: In the `HotDogOrNot` project, create a new class called `ClassificationEventArgs`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中，创建一个名为`ClassificationEventArgs`的新类。
- en: 'Add `EventArgs` as a base class, as shown in the following code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`EventArgs`作为基类添加，如下代码所示：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have created the `ClassificationEventArgs`, we can create the interface
    by going through the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`ClassificationEventArgs`，我们可以通过以下步骤创建接口：
- en: In the `HotdogOrNot` project, create a new interface called `IClassifier` in
    the `HotdogOrNot` project.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotdogOrNot`项目中，在`HotdogOrNot`项目中创建一个名为`IClassifier`的新接口。
- en: Add a method called `Classify` that doesn't return anything but takes a byte
    array as an argument.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Classify`的方法，它不返回任何内容，但接受一个字节数组作为参数。
- en: 'Add an event that uses the `ClassificationEventArgs` and call it `ClassificationCompleted`,
    as shown in the following code:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个使用`ClassificationEventArgs`的事件，并将其命名为`ClassificationCompleted`，如下代码所示：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using CoreML for image classification
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CoreML进行图像分类
- en: 'The first thing we will do is add the CoreML model to the `HotDogOrNot.iOS`
    project by going through the following steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要做的是通过以下步骤将CoreML模型添加到`HotDogOrNot.iOS`项目中：
- en: Extract the ZIP file that we get from the Custom Vision service.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压从Custom Vision服务获得的ZIP文件。
- en: Find the `.mlmodel` file and rename it as `hotdog-or-not.mlmodel`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`.mlmodel`文件并将其重命名为`hotdog-or-not.mlmodel`。
- en: Add it to the `Resources` folder in the iOS project.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其添加到iOS项目的`Resources`文件夹中。
- en: Make sure that the build action is `BundleResource`. If you are using Visual
    Studio on a Mac, a `.cs` file will be created. Remove this file, because it will
    be easier to use the model without the code.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保构建操作是`BundleResource`。如果您在Mac上使用Visual Studio，则会创建一个`.cs`文件。删除此文件，因为在没有代码的情况下使用模型会更容易。
- en: 'When we have added the file to the iOS project, we will be ready to create
    the iOS implementation of the `IClassifier` interface by going through the following
    steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将文件添加到iOS项目后，我们将准备通过以下步骤创建`IClassifier`接口的iOS实现：
- en: Create a new class called `CoreMLClassifier` in the `HotDogOrNotDog.iOS` project.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNotDog.iOS`项目中创建一个名为`CoreMLClassifier`的新类。
- en: Add the `IClassifier` interface.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`IClassifier`接口。
- en: 'Implement the `ClassificationCompleted` event and the `Classify` method from
    the interface, as shown in the following code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`ClassificationCompleted`事件和接口中的`Classify`方法，如下所示：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first thing we will do in the `Classify` method is compile the CoreML model by
    going through the following steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Classify`方法中，我们将首先编译CoreML模型，具体步骤如下：
- en: Get the path of the model with the `NSBundle.MainBundle.GetUrlForResource` method.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`NSBundle.MainBundle.GetUrlForResource`方法获取模型的路径。
- en: Compile the model with the `MLModel.CompileModel `method. Pass the model's URL
    and an error object that will indicate whether one or more errors occurred during
    the compilation of the model.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MLModel.CompileModel`方法编译模型。传递模型的URL和一个错误对象，该对象将指示在编译模型过程中是否发生了一个或多个错误。
- en: 'Use the URL from the `CompileModel` method and pass it to `MLModel.Create`
    to create a model object that we can work with, as shown in the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`CompileModel`方法的URL并将其传递给`MLModel.Create`以创建一个我们可以使用的模型对象，如下所示：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Because we are going to use a photo for the CoreML model, we can use the Vision
    APIs that are built on top of the CoreML. To do this, we will use `VNCoreMLRequest`.
    Before creating the request, however, we will create a callback that will handle
    when the request is completed by going through the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们将使用CoreML模型的照片，所以我们可以使用建立在CoreML之上的Vision API。为此，我们将使用`VNCoreMLRequest`。然而，在创建请求之前，我们将创建一个回调，该回调将处理请求完成时的情况，具体步骤如下：
- en: Open the `CoreMLClassifier.cs`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`CoreMLClassifier.cs`。
- en: Create a new private method called `HandleVNRequest`with two parameters, one
    of the `VNRequst` type and one of the `NSError` type.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`HandleVNRequest`的新私有方法，该方法有两个参数，一个是`VNRequst`类型，一个是`NSError`类型。
- en: If the error is `null`, invoke the `ClassificationCompleted` event with `ClassificationEventArgs`,
    which contains an empty `Dictionary`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果错误是`null`，则使用`ClassificationEventArgs`调用`ClassificationCompleted`事件，其中包含一个空的`Dictionary`。
- en: If the error is not null, get the result with the `GetResults` method on the
    `VNRequest` object.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果错误不是null，则使用`VNRequest`对象上的`GetResults`方法获取结果。
- en: Order the classifications by `Confidence` so that the classification with the
    highest confidence is first.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按`Confidence`对分类进行排序，以便具有最高置信度的分类排在第一位。
- en: Convert the result to a `Dictionary` using the `ToDictionary` method.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ToDictionary`方法将结果转换为`Dictionary`。
- en: 'Invoke the `ClassificationCompleted` event with `ClassificationEventArgs`,
    which contains the sorted dictionary. This is shown in the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ClassificationEventArgs`调用`ClassificationCompleted`事件，其中包含排序后的字典。如下所示：
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we have created the callback, we will go back to the `Classify` method
    and perform the classification by going through the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建回调后，我们将返回到`Classify`方法，并通过以下步骤执行分类：
- en: Convert the model to a `VNCoreMLModel`, because we need this to use the Vision
    APIs. Use the `VNCoreMLModel.FromMLModel` method to convert the model.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模型转换为`VNCoreMLModel`，因为我们需要使用Vision API。使用`VNCoreMLModel.FromMLModel`方法转换模型。
- en: Create a new `VNCoreMLRequest` object and pass the `VNCoreMLModel` and the callback
    we created as arguments to the constructor.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`VNCoreMLRequest`对象，并将`VNCoreMLModel`和我们创建的回调作为参数传递给构造函数。
- en: Convert the input data to an `NSData` object using the `NSData.FromArray` method.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`NSData.FromArray`方法将输入数据转换为`NSData`对象。
- en: Create a new `VNImageRequestHandler` object and pass the data object, `CGImagePropertyOrientation.Up`,
    and a new `VNImageOptions` object to the constructor.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`VNImageRequestHandler`对象，并将数据对象、`CGImagePropertyOrientation.Up`和一个新的`VNImageOptions`对象传递给构造函数。
- en: 'Use the `Perform` method on the `VNImageRequestHandler` and pass the `VNCoreMLRequest`
    in an array and an error object as an argument, as shown in the following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`VNImageRequestHandler`上使用`Perform`方法，并将`VNCoreMLRequest`作为参数传递给该方法，如下所示：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using TensorFlow for image classification
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TensorFlow进行图像分类。
- en: 'Now that we have written the code in iOS to recognize hot dogs, it is now time
    to write the code for Android. The first things to do is to add the files we exported
    from the Custom Vision to the Android project. For TensorFlow, the actual model
    and the labels (the tags) are separated into two files. Let''s set this up by
    going through the following steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在iOS中编写了识别热狗的代码，现在是时候为Android编写代码了。首先要做的是将我们从Custom Vision导出的文件添加到Android项目中。对于TensorFlow，实际模型和标签（标签）分为两个文件。通过以下步骤设置：
- en: Extract the ZIP file that we got from the Custom Vision service.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取我们从Custom Vision服务中获得的ZIP文件。
- en: Find the `model.pb` file and rename it as `hotdog-or-not-model.pb`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`model.pb`文件并将其重命名为`hotdog-or-not-model.pb`。
- en: Find the `labels.txt` file and rename it as `hotdog-or-not-labels.txt`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`labels.txt`文件并将其重命名为`hotdog-or-not-labels.txt`。
- en: Import the files to the `Assets` folder in the Android project. Make sure that
    the build action is Android Asset.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件导入到Android项目的`Assets`文件夹中。确保构建操作是Android Asset。
- en: 'When we have imported the files into the Android project, we can start to write
    code. To get the libraries we need for TensorFlow, we also need to install a NuGet
    package by going through the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件导入到Android项目后，我们可以开始编写代码。为了获取TensorFlow所需的库，我们还需要通过以下步骤安装NuGet包：
- en: In the `HotDogOrNotDog.Android` project, install the `Xam.Android.Tensorflow`
    NuGet package.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNotDog.Android`项目中，安装`Xam.Android.Tensorflow` NuGet包。
- en: Then, create a new class called `TensorflowClassifier` in the `HotDogOrNotDog.Android`
    project.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`HotDogOrNotDog.Android`项目中创建一个名为`TensorflowClassifier`的新类。
- en: Add the `IClassifier` interface to the `TensorflowClassifier` class.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`IClassifier`接口添加到`TensorflowClassifier`类中。
- en: 'Implement the `ClassificationCompleted` event and the `Classify` method from
    the interface, as shown in the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`ClassificationCompleted`事件和接口中的`Classify`方法，如下所示的代码：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first thing we will do in the `Classify` method is read the model and the
    label files from the `Assets` folder by going through the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Classify`方法中，我们将首先从`Assets`文件夹中读取模型和标签文件，通过以下步骤进行：
- en: Use the `TensorFlowInferenceInterface` class to import the model. After that,
    use the path to the asset folder and the name of the model file as arguments for
    the constructor.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`TensorFlowInferenceInterface`类导入模型。然后，使用资产文件夹的路径和模型文件的名称作为构造函数的参数。
- en: Use `StreamReader` to read the labels.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`StreamReader`来读取标签。
- en: 'Read the whole text file, split by line breaks (`''/n''`), and trim the text
    on each row to remove whitespaces. We will also filter away items that are empty
    or null and convert the result to a list of strings, as shown in the following
    code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取整个文本文件，按行分割（`'/n'`），并修剪每一行的文本以去除空格。我们还将过滤掉空或null的项目，并将结果转换为字符串列表，如下所示的代码：
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`TensorFlow` models do not understand images, so we need to convert them to
    binary data. The images need to be converted to a float array of point values,
    one per red, green, and blue value for each pixel. Some adjustments to the color
    values are also necessary. As well as this, we need to resize the images so that
    they are `227 x 227` pixels. To do this, write the following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`TensorFlow`模型无法理解图像，因此我们需要将它们转换为二进制数据。图像需要转换为点值的浮点数组，每个像素的红色、绿色和蓝色值各一个。还需要对颜色值进行一些调整。此外，我们需要调整图像的大小，使其为`227
    x 227`像素。为此，编写以下代码：'
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We are now ready to run the model by going through the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备通过以下步骤运行模型：
- en: Create a new array of floats with the same size as the list of labels. The output
    of the model will be fetched into this array. An item in the array will represent
    the confidence for a tag. The matching label will have the same position in the
    labels list as the confidence result in the float array.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个与标签列表大小相同的浮点数数组。模型的输出将被获取到这个数组中。数组中的一个项目将表示标签的置信度。标签列表中的匹配标签将与浮点数组中的置信度结果在相同的位置。
- en: Run the `Feed` method of the `TensorFlowInferenceInterface`and pass `"Placeholder"` 
    as the first argument, the binary data as the second argument, and the dimensions
    of the image as the third argument.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`TensorFlowInferenceInterface`的`Feed`方法，并将"Placeholder"作为第一个参数，二进制数据作为第二个参数，图像的尺寸作为第三个参数。
- en: Run the `Run` method of `TensorFlowInferenceInterface` and pass an array that
    contains a string with the value `"loss"`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`TensorFlowInferenceInterface`的`Run`方法，并传递一个包含值为"loss"的字符串的数组。
- en: Run the `Fetch` method of the `TensorFlowInferenceInterface`. Pass `"loss"`
    as the first argument and the float arrays for the outputs as the second argument.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`TensorFlowInferenceInterface`的`Fetch`方法。将"loss"作为第一个参数，将输出的浮点数组作为第二个参数。
- en: Create a `Dictionary <string, float>` and fill it with the labels and the confidence
    for each label.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Dictionary <string, float>`并用标签和每个标签的置信度填充它。
- en: 'Invoke the `ClassificationCompleted` event with `ClassificationEventArgs`,
    which contains the dictionary, as shown in the following code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ClassificationCompleted`事件和包含字典的`ClassificationEventArgs`调用事件，如下所示的代码：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Creating a base ViewModel
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基本的ViewModel
- en: 'Before we initialize the app, we will create a base ViewModel so that we can
    use it when we are registering the other ViewModels. In this, we will put the
    code that can be shared between all the ViewModels of the app. Let''s set this
    up by going through the following steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化应用程序之前，我们将创建一个基本的ViewModel，以便在注册其他ViewModel时可以使用它。在其中，我们将放置可以在应用程序的所有ViewModel之间共享的代码。通过以下步骤来设置这一点：
- en: In the `HotDogOrNot` project, create a new folder called `ViewModels`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中，创建一个名为`ViewModels`的新文件夹。
- en: Create a new class called `ViewModel` in the `ViewModels` folder we created.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们创建的`ViewModels`文件夹中创建一个名为`ViewModel`的新类。
- en: Make the new class public and abstract.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的类设置为公共和抽象。
- en: Add and implement the `INotifiedPropertyChanged` interface. This is necessary
    because we want to use data bindings.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加并实现`INotifiedPropertyChanged`接口。这是必要的，因为我们想要使用数据绑定。
- en: Add a `Set` method that will make it easier for us to raise the `PropertyChanged` event
    from the `INotifiedPropertyChanged` interface. The method will check whether the
    value has changed. If it has, it will raise the event.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`Set`方法，这将使我们更容易从`INotifiedPropertyChanged`接口中引发`PropertyChanged`事件。该方法将检查值是否已更改。如果是，它将引发事件。
- en: 'Add a static property of the `INavigation` type called `Navigation`, as shown
    in the following code:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Navigation`的`INavigation`类型的静态属性，如下所示的代码：
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Initializing the app
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化应用程序
- en: We are now ready to write the initialization code for the app. We will set up
    **inversion of control** (**IoC**) and carry out the necessary configuration.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备为应用程序编写初始化代码。我们将设置**控制反转**（**IoC**）并进行必要的配置。
- en: Creating a Resolver
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个解析器
- en: 'We will now create a helper class that will ease the process of resolving object
    graphs through `Autofac`. This will help us to create types based on a configured
    IoC container. In this project, we will use `Autofac` as the IoC library by going
    through the following steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个辅助类，它将简化通过`Autofac`解析对象图的过程。这将帮助我们根据配置的IoC容器创建类型。在这个项目中，我们将通过以下步骤使用`Autofac`作为IoC库：
- en: In the `HotDogOrNot` project, install the NuGet package `Autofac` to the `HotDogOrNot`
    project.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中，安装`NuGet`包`Autofac`到`HotDogOrNot`项目。
- en: Create a new class called `Resolver` in the root.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录中创建一个名为`Resolver`的新类。
- en: Add a private static field of the `IContainer` type called `container` (from
    `Autofac`).
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`container`的`IContainer`类型的私有静态字段（来自`Autofac`）。
- en: Add a public static method called `Initialize` with `IContainer` as a parameter.
    Set the value of the parameter to the container field.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Initialize`的公共静态方法，带有`IContainer`作为参数。将参数的值设置为容器字段。
- en: 'Add a generic `static public` method called `Resolve`, which will return an
    instance that is based on the type argument with the `Resolve` method of `IContainer`,
    as shown in the following code:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Resolve`的通用`static public`方法，该方法将返回一个基于`IContainer`的`Resolve`方法的类型参数的实例，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating a Bootstrapper
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建引导程序
- en: 'To configure the dependency injection and initialize the `Resolver`, we will
    create a bootstrapper. We will have one shared bootstrapper and one bootstrapper
    for each platform to match their specific configurations. We will have different
    implementations of the `IClassifier` in iOS and Android. To create a bootstrapper, go
    through the following steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置依赖注入并初始化`Resolver`，我们将创建一个引导程序。我们将有一个共享的引导程序和一个用于匹配特定配置的每个平台的引导程序。在iOS和Android中，我们将有不同的`IClassifier`实现。要创建引导程序，请按照以下步骤进行：
- en: Create a new class in the `HotDogOrNot` project and name it `Bootstrapper`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中创建一个名为`Bootstrapper`的新类。
- en: 'Write the following code in the new class, as shown in the following code:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新类中编写以下代码，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating the iOS bootstrapper
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建iOS引导程序
- en: 'In the iOS bootstrapper, we will have configurations that are specific to the
    iOS app. To create an iOS app, we go through the following steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS引导程序中，我们将有特定于iOS应用程序的配置。要创建iOS应用程序，我们需要按照以下步骤进行：
- en: In the `HotDogOrNot.iOS` project, create a new class and name it `Bootstrapper`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot.iOS`项目中，创建一个名为`Bootstrapper`的新类。
- en: Make the new class inherit from `HotDogOrNot.Bootstrapper`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使新类继承自`HotDogOrNot.Bootstrapper`。
- en: 'Write the following code and resolve all the references:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下代码并解析所有引用：
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Go to `AppDelegate.cs` in the iOS project.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到iOS项目中的`AppDelegate.cs`。
- en: 'Before the call to `LoadApplication`, in the `FinishedLaunching` method, call
    the `Init` method of the platform-specific bootstrapper, as shown in the following
    code:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FinishedLaunching`方法中的`LoadApplication`调用之前，调用平台特定引导程序的`Init`方法，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating the Android bootstrapper
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android引导程序
- en: 'In the Android bootstrapper, we will have configurations that are specific
    to the Android app. To create bootstrapper in Android, we go through the following
    steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android引导程序中，我们将有特定于Android应用程序的配置。要在Android中创建引导程序，我们需要按照以下步骤进行：
- en: In the Android project, create a new class and name it `Bootstrapper`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android项目中，创建一个名为`Bootstrapper`的新类。
- en: Make the new class inherit from `HotDogOrNot.Bootstrapper`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使新类继承自`HotDogOrNot.Bootstrapper`。
- en: 'Write the following code and resolve all the references:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下代码并解析所有引用：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Go to the `MainActivity.cs` file in the Android project.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Android项目中的`MainActivity.cs`文件。
- en: 'Before the call to `LoadApplication`, in the `OnCreate` method, call the `Execute` method
    of the platform-specific bootstrapper, as shown in the following code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnCreate`方法中的`LoadApplication`调用之前，调用平台特定引导程序的`Execute`方法，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Building the first view
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建第一个视图
- en: The first view in this app will be a simple view with two buttons. One button
    will be for starting the camera so the users can take a photo of something to
    determine whether it is a hot dog. The other button will be for picking a photo
    from the photo library of the device.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序中的第一个视图将是一个简单的视图，其中有两个按钮。一个按钮用于启动相机，以便用户可以拍摄某物的照片，以确定它是否是热狗。另一个按钮用于从设备的照片库中选择照片。
- en: Building the ViewModel
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建ViewModel
- en: 'We will start by creating the `ViewModel`, which will handle what will happen
    when a user taps one of the buttons. Let''s set this up by going through the following
    steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建`ViewModel`，它将处理用户点击按钮时会发生什么。让我们通过以下步骤设置这个：
- en: Create a new class called  `MainViewModel` in the `ViewModels` folder.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ViewModels`文件夹中创建一个名为`MainViewModel`的新类。
- en: Add `ViewModel` as a base class for `MainViewModel`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ViewModel`作为`MainViewModel`的基类添加。
- en: Create a private field of the `IClassifier` type and call it `classifier`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`IClassifier`类型的私有字段，并将其命名为`classifier`。
- en: Create a constructor that has the `IClassifier` as a parameter.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有`IClassifier`作为参数的构造函数。
- en: 'Set the value of the classifier field to the value of the parameter in the
    constructor, as shown in the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将分类器字段的值设置为构造函数中的参数值，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will use the `Xam.Plugin.Media` NuGet package for taking the photo and accessing
    the photo library of the device. We need to install the package for all projects
    in the solution by using the NuGet package manager. Before we can use the package,
    however, we need to do some configuration for each platform. We will start with
    Android. Let''s set this up by going through the following steps:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Xam.Plugin.Media` NuGet包来拍摄照片和访问设备的照片库。我们需要通过NuGet包管理器为解决方案中的所有项目安装该包。但是，在我们可以使用该包之前，我们需要为每个平台进行一些配置。我们将从Android开始。让我们通过以下步骤设置这个：
- en: The plugin needs the `WRITE_EXTERNAL_STORAGE`and `READ_EXTERNAL_STORAGE` permissions.
    The plugin will add these for us, but we need to override the `OnRequestPermissionResult`
    in the `MainActivity.cs`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该插件需要`WRITE_EXTERNAL_STORAGE`和`READ_EXTERNAL_STORAGE`权限。插件将为我们添加这些权限，但我们需要在`MainActivity.cs`中重写`OnRequestPermissionResult`。
- en: Call the `OnRequestPermissionsResult` method, as shown in the following code.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`OnRequestPermissionsResult`方法，如下面的代码所示。
- en: 'Add `CrossCurrentActivity.Current.Init(this, savedInstanceState)` after initializing
    Xamarin.Forms in the `OnCreate` method in the `MainActivity.cs` file, as shown
    in the following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity.cs`文件的`OnCreate`方法中初始化Xamarin.Forms后，添加`CrossCurrentActivity.Current.Init(this,
    savedInstanceState)`，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We also need to add some configuration about the file paths from which the
    users can pick photos. Let''s set this up by going through the following steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加一些关于用户可以选择照片的文件路径的配置。让我们通过以下步骤来设置这一点：
- en: In the `HotDogOrNot.Android` project, add a folder called `xml` to the `Resources`
    folder
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot.Android`项目中，在`Resources`文件夹中添加一个名为`xml`的文件夹。
- en: Create a new XML file called `file_paths.xml` in the new folder.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件夹中创建一个名为`file_paths.xml`的新XML文件。
- en: 'Add the following code to `file_paths.xml`:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`file_paths.xml`中添加以下代码：
- en: '[PRE19]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The last thing we need to do to set up the plugin for the Android project is
    add the following code in the `AndroidManifest.xml` (it can be found in the `Properties`
    folder of the Android project) inside the application element:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为Android项目设置插件的最后一件事是在`AndroidManifest.xml`中添加以下代码（可以在Android项目的`Properties`文件夹中找到），在应用程序元素内部：
- en: '[PRE20]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For the iOS project, the only thing we need to do is add the following four
    usage descriptions to the `info.plist`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS项目，我们唯一需要做的就是在`info.plist`中添加以下四个用途描述：
- en: '[PRE21]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Once we have finished with the configuration for the plugin, we can start using
    it. We will start by creating a method that will handle the media file that we
    will get both when the user is taking a photo and when the user is picking a photo.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了插件的配置，我们就可以开始使用它。我们将首先创建一个方法，该方法将处理我们在用户拍照时和选择照片时都会得到的媒体文件。
- en: 'Let''s set this up by going through the following steps:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤来设置这一点：
- en: Open the `MainViewModel.cs` file.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainViewModel.cs`文件。
- en: Create a private method called `HandlePhoto` that has a parameter of the `MediaFile`type.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`HandlePhoto`的私有方法，该方法具有`MediaFile`类型的参数。
- en: Add an `if` statement to check whether the `MediaFile` parameter is `null`.
    If so, perform an empty return.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`if`语句来检查`MediaFile`参数是否为`null`。如果是，执行空返回。
- en: Get the stream of the photo using the `GetStream` method of the `MediaFile`
    class.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MediaFile`类的`GetStream`方法获取照片的流。
- en: Add a private field of the `byte []` type called `bytes`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`bytes`的`byte []`类型的私有字段。
- en: Convert the stream into a byte array with the `ReadFully` method that we will
    create in the next step.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们将在下一步中创建的`ReadFully`方法将流转换为字节数组。
- en: Add an event handler to the `ClassificationCompleted` event of the classifier.
    We will create the event handler later in this chapter.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为分类器的`ClassificationCompleted`事件添加一个事件处理程序。我们将在本章后面创建事件处理程序。
- en: 'Finally, add a call to the `Classify` method of the classifier and use the
    byte array as the argument, as shown in the following code:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调用分类器的`Classify`方法，并将字节数组作为参数，如下所示：
- en: '[PRE22]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will now create the `ReadFully` method that we called in the preceding code.
    We will use this to read the full stream into a byte array. The code will look
    as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建`ReadFully`方法，该方法在前面的代码中调用。我们将使用它来将完整的流读入一个字节数组。代码如下所示：
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before we create the event handler, we will create a model that we will use
    inside the event handler by going through the following steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建事件处理程序之前，我们将通过以下步骤创建一个我们将在事件处理程序中使用的模型：
- en: In the `HotDogOrNot` project, create a new folder called `Models` in the `HotDogOrNot`
    project.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中，在`HotDogOrNot`项目中创建一个名为`Models`的新文件夹。
- en: Create a new class in the `Models` folder called `Result`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Models`文件夹中创建一个名为`Result`的新类。
- en: Add a property of the `bool` type called `IsHotdog`.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`IsHotdog`的`bool`类型的属性。
- en: Add a property of the `float` type called `Confidence`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Confidence`的`float`类型的属性。
- en: 'Add a property of the `byte[]` type called `PhotoBytes`, as shown in the following
    code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`PhotoBytes`的`byte[]`类型的属性，如下所示：
- en: '[PRE24]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can now add an event handler to the ViewModel by going through the following
    steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下步骤为ViewModel添加一个事件处理程序：
- en: Create a method called `Classifier_ClassificationCompleted` that has an `object` and
    a `ClassificationEventArgs` parameter.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Classifier_ClassificationCompleted`的方法，该方法具有一个`object`和一个`ClassificationEventArgs`参数。
- en: Remove the event handler from the classifier so that we don't allocate unnecessary
    memory.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从分类器中删除事件处理程序，以便我们不会分配不必要的内存。
- en: Check whether the classifications dictionary contains any items. If it does,
    order the dictionary so that the classifications with the highest confidence (values)
    will be first.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查分类字典是否包含任何项。如果有，对字典进行排序，使具有最高置信度（值）的分类首先出现。
- en: 'Create a new `Result` object and set the properties as shown in the following
    code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`Result`对象，并按以下代码中所示设置属性：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When we have created the result view, we will go back to the event handler
    to add the navigation to the result view. The last thing we will do in this `ViewModel`
    is create a `Command` property for the buttons that we have in the view. Let''s
    start by setting up the take photo button by going through the following steps:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 创建结果视图后，我们将返回事件处理程序，以添加导航到结果视图。在这个`ViewModel`中，我们要做的最后一件事是为视图中的按钮创建一个`Command`属性。让我们从设置拍照按钮开始，通过以下步骤：
- en: Create a new property of the `ICommand` type called `TakePhoto` in the `MainViewModel.cs`
    file.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainViewModel.cs`文件中创建一个名为`TakePhoto`的`ICommand`类型的新属性。
- en: Use an expression to return a new `Command`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用表达式返回一个新的`Command`。
- en: Pass an `Action `as an expression to the constructor of the `Command`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`Action`作为表达式传递给`Command`的构造函数。
- en: In the `Action`, use the `CrossMedia.Current.TakePhotoAsync` method and pass
    a `StoreCameraMediaOptions` object to it.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Action`中，使用`CrossMedia.Current.TakePhotoAsync`方法，并将`StoreCameraMediaOptions`对象传递给它。
- en: In `StoreCameraMediaOptions`, set the default camera as the rear camera using
    the `DefaultCamera` property.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`StoreCameraMediaOptions`中，使用`DefaultCamera`属性将默认相机设置为后置相机。
- en: 'Pass the result of the call to the `TakePhotoAsync` method to the `HandlePhoto`
    method, as shown in the following code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对`TakePhotoAsync`方法的调用结果传递给`HandlePhoto`方法，如下所示：
- en: '[PRE26]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The final thing we will do in the `MainViewModel` for now is to handle what
    happens when the pick photo from library button is tapped. Let''s set this up
    by going through the following steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在`MainViewModel`中处理从库中选择照片按钮被点击时发生的情况。让我们按照以下步骤设置这个方法：
- en: Create a new property of the `ICommand` type called `PickPhoto`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`PickPhoto`的`ICommand`类型的新属性。
- en: Use an expression to return a new `Command`.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用表达式返回一个新的`Command`。
- en: Pass an `Action `as an expression to the constructor of the `Command`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`Action`作为表达式传递给`Command`的构造函数。
- en: In the `Action`, use the `CrossMedia.Current.PickPhotoAsync` to open the default
    photo picker of the operating system.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Action`中，使用`CrossMedia.Current.PickPhotoAsync`来打开操作系统的默认照片选择器。
- en: 'Pass the result of the call to the `TakePhotoAsync` method of the `HandlePhoto` method,
    as shown in the following code:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TakePhotoAsync`方法的调用结果传递给`HandlePhoto`方法，如下所示：
- en: '[PRE27]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Building the view
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建视图
- en: 'Now, once we have created the `ViewModel`, it is time to create the code for
    the GUI. Go through the following steps to create the GUI for the `MainView`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们创建了`ViewModel`，就是时候为GUI创建代码了。按照以下步骤创建`MainView`的GUI：
- en: Create a new folder called `Views` in the `HotDogOrNot` project.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中创建一个名为`Views`的新文件夹。
- en: Add a new `XAML ContentPage` called `MainView`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`MainView`的新的`XAML ContentPage`。
- en: Set the `Title` property of the `ContentPage` to `Hotdog or Not hotdog`.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ContentPage`的`Title`属性设置为`Hotdog or Not hotdog`。
- en: Add a `StackLayout` to the page and set its `VerticalOptions` property to `Center`.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上添加一个`StackLayout`并将其`VerticalOptions`属性设置为`Center`。
- en: Add a `Button` to the `StackLayout` with the text `Take Photo`. For the `Command`
    property, add a binding to the `TakePhoto` property in the `ViewModel`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`StackLayout`中添加一个名为`Take Photo`的`Button`。对于`Command`属性，添加到`ViewModel`中的`TakePhoto`属性的绑定。
- en: 'Add a `Button` to the `StackLayout` with the text `Pick Photo`. For the `Command` property,
    add a binding to the `Pick``Photo` property in the `ViewModel`, as shown in the
    following code:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`StackLayout`中添加一个名为`Pick Photo`的`Button`。对于`Command`属性，添加到`ViewModel`中的`Pick
    Photo`属性的绑定，如下所示：
- en: '[PRE28]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the code behind the `MainView`, we will set the binding context of the view
    by going through the following steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainView`的代码后台，按照以下步骤设置视图的绑定上下文：
- en: Add `MainViewModel` as a parameter of the constructor.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MainViewModel`作为构造函数的参数。
- en: After the `InitialComponent` method call, set the `BindingContext` property
    of the view to the `MainViewModel` parameter.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`InitialComponent`方法调用之后，将视图的`BindingContext`属性设置为`MainViewModel`参数。
- en: 'Use the static method `SetBackButtonTitle` on the `NavigationPage` class so
    that an arrow for navigation back to this view will be shown in the navigation
    bar on the result view, as shown in the following code:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NavigationPage`类上使用静态方法`SetBackButtonTitle`，以便在结果视图的导航栏中显示返回到此视图的箭头，如下所示：
- en: '[PRE29]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we can go to `App.xaml.cs` and set the `MainPage` to `MainView` by going
    through the following steps:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以转到`App.xaml.cs`，并按照以下步骤将`MainPage`设置为`MainView`：
- en: In the `HotDogOrNot` project, go to `App.xaml.cs`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中，转到`App.xaml.cs`。
- en: Create an instance of `MainView` using the `Resolve` method on the `Resolver`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Resolver`上的`Resolve`方法创建`MainView`的实例。
- en: Create a `NavigationPage` and pass the `MainView` to the constructor.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`NavigationPage`并将`MainView`传递给构造函数。
- en: Set the static `Navigation` property on the `ViewModel` to the value of the
    `Navigation` property on the `NavigationPage`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ViewModel`上的静态`Navigation`属性设置为`NavigationPage`上的`Navigation`属性的值。
- en: Set the `MainPage` property to the instance of the `NavigationPage` that we
    created in step 3.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MainPage`属性设置为我们在步骤3中创建的`NavigationPage`的实例。
- en: 'Delete `MainPage.xaml`, because we no longer need it. You should be left with
    the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`MainPage.xaml`，因为我们不再需要它。你应该剩下以下代码：
- en: '[PRE30]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Building the result view
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建结果视图
- en: The last thing we need to do in this project is to create the result view. This
    view will show the input photo, and whether or not it is a hot dog.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们需要做的最后一件事是创建结果视图。这个视图将显示输入的照片，以及它是否是一个热狗。
- en: Building the ViewModel
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建ViewModel
- en: 'Before we create the view, we will create a `ViewModel` that will handle all
    the logic for the view by going through the following steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建视图之前，我们将创建一个`ViewModel`来处理视图的所有逻辑，按照以下步骤进行：
- en: Create a class called `ResultViewModel` in the `ViewModels` folder in the `HotdogOrNot`
    project.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotdogOrNot`项目的`ViewModels`文件夹中创建一个名为`ResultViewModel`的类。
- en: Add `ViewModel` as a base class to the `ResultViewModel`.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ViewModel`作为`ResultViewModel`的基类添加。
- en: Create a property of the `string` type called `Title`. Add a private field for
    the property.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Title`的`string`类型的属性。为该属性添加一个私有字段。
- en: Create a property of the `string` type called `Description`. Add a private field
    for the property.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Description`的`string`类型的属性。为该属性添加一个私有字段。
- en: 'Create a property of the `byte[]` type called `PhotoBytes`. Add a private field
    for the property, as shown in the following code:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`PhotoBytes`的`byte[]`类型的属性。为该属性添加一个私有字段，如下所示：
- en: '[PRE31]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The final thing we will do in the `ViewModel` is to create an `Initialize`
    method that will have the result as a parameter. Let''s set this up by going through
    the following steps:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ViewModel`中创建一个带有结果作为参数的`Initialize`方法。让我们按照以下步骤设置这个方法：
- en: In the `Initialize` method, set the `PhotoBytes` property to the value of the
    `PhotoBytes` property of the `result` parameter.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Initialize`方法中，将`PhotoBytes`属性设置为`result`参数的`PhotoBytes`属性的值。
- en: Add an `if` statement that checks whether the `IsHotDog` property of the `result`
    parameter is `true` and whether the `Confidence` is higher than 90%. If this is
    the case, set the `Title` to `"Hot dog"` and the `Description` to `"This is for
    sure a hotdog"`.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`if`语句，检查`result`参数的`IsHotDog`属性是否为`true`，以及`Confidence`是否高于90%。如果是这样，将`Title`设置为`"Hot
    dog"`，并将`Description`设置为`"This is for sure a hotdog"`。
- en: Add an `else if` statement to check whether the `IsHotdog` property of the `result`
    parameter is `true`. If this is the case, set the `Title` to `"Maybe"` and the
    `Description` to `"This is maybe a hotdog"`.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`else if`语句，检查`result`参数的`IsHotdog`属性是否为`true`。如果是这样，将`Title`设置为`"Maybe"`，将`Description`设置为`"This
    is maybe a hotdog"`。
- en: 'Add an `else` statement that sets the `Title` to `"Not a hot dog"` and the
    `Description` to `"This is not a hot dog"`, as shown in the following code:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`else`语句，将`Title`设置为`"Not a hot dog"`，将`Description`设置为`"This is not a hot
    dog"`，如下面的代码所示：
- en: '[PRE32]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Building the view
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建视图
- en: 'Because we want to show the input photo in the input view, we need to convert
    it from `byte[]` to `Xamarin.Forms.ImageSource`. We will do this in a value converter
    that we can use together with the binding in the XAML by going through the following
    steps:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们想要在输入视图中显示输入照片，所以我们需要将其从`byte[]`转换为`Xamarin.Forms.ImageSource`。我们将通过以下步骤在值转换器中执行此操作，然后可以与XAML中的绑定一起使用：
- en: Create a new folder called `Converters` in the `HotDogOrNot` project.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HotDogOrNot`项目中创建一个名为`Converters`的新文件夹。
- en: Create a new class called `BytesToImageConverter`.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`BytesToImageConverter`的新类。
- en: 'Add and implement the  `IValueConverter` interface, as shown in the following
    code:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加并实现`IValueConverter`接口，如下面的代码所示：
- en: '[PRE33]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `Convert` method will be used when a `ViewModel` updates a view. The `ConvertBack`
    method will be used in two-way bindings when the `View` updates the `ViewModel`.
    In this case, we only need to write code for the `Convert` method by going through
    the following steps:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当`ViewModel`更新视图时，将使用`Convert`方法。当`View`更新`ViewModel`时，将使用`ConvertBack`方法。在这种情况下，我们只需要编写`Convert`方法的代码，如下面的步骤所示：
- en: First, check whether the `value` parameter is `null`. If so, we should return
    `null`.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先检查`value`参数是否为`null`。如果是，我们应该返回`null`。
- en: If the value not is `null`, cast it as `byte[]`.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果值不为`null`，则将其强制转换为`byte[]`。
- en: Create a `MemoryStream` from the byte array.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字节数组创建一个`MemoryStream`。
- en: 'Return the result of the `ImageSource.FromStream` method to which we will pass
    the stream to, as shown in the following code:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`ImageSource.FromStream`方法的结果，我们将向其中传递流，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The view will contain the photo, which will take up two-thirds of the screen.
    Under the photo, we will add a description of the result. Let''s set this up by
    going through the following steps:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 视图将包含照片，占据屏幕的三分之二。在照片下面，我们将添加结果的描述。让我们通过以下步骤设置这一点：
- en: In the `Views` folder, create a new `XAML ContentPage` and name it `ResultView`.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views`文件夹中，创建一个名为`ResultView`的新`XAML ContentPage`。
- en: Import the namespace for the converter.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入转换器的命名空间。
- en: Add the `BytesToImageConverter` to the `Resources` for the page and give it
    the key `"ToImage"`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BytesToImageConverter`添加到页面的`Resources`中，并为其指定键`"ToImage"`。
- en: Bind the `Title` property of the `ContentPage` to the `Title` property of the
    `ViewModel`.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ContentPage`的`Title`属性绑定到`ViewModel`的`Title`属性。
- en: Add a `Grid` to the page with two rows. The `Height` value for the first `RowDefinition`
    should be `2*`. The height of the second row should be `*`. These are relative
    values that mean that the first row will take up two-thirds of the `Grid`, while
    the second row will take up one-third of the `Grid`.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上添加一个具有两行的`Grid`。第一行的`RowDefinition`的`Height`值应为`2*`。第二行的高度应为`*`。这些是相对值，意味着第一行将占`Grid`的三分之二，而第二行将占`Grid`的三分之一。
- en: Add an `Image` to the `Grid` and bind the `Source` property to the `PhotoBytes`
    property in the `ViewModel`. Use the converter to convert the bytes to the `ImageSource`
    of the `Source` property.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Grid`添加一个`Image`，并将`Source`属性绑定到`ViewModel`中的`PhotoBytes`属性。使用转换器将字节转换为`Source`属性的`ImageSource`。
- en: 'Add a `Label` and bind the `Text` property to the `Description` property of
    the `ViewModel`, as shown in the following code:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`Label`，并将`Text`属性绑定到`ViewModel`的`Description`属性，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We also need to set the `BindingContext` of the view. We will do this in the
    same way as we did in the `MainView`—in the code-behind file (`ResultView.xaml.cs`),
    as shown in the following code:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要设置视图的`BindingContext`。我们将在与`MainView`相同的方式中进行，即在代码后台文件（`ResultView.xaml.cs`）中，如下面的代码所示：
- en: '[PRE36]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The very last thing we need to do is add navigation from the `MainView` to
    the `ResultView`. We will do this by adding the following code at the end of the `Classifier_ClassificationCompleted`
    method in the `MainViewModel`:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是从`MainView`导航到`ResultView`。我们将在`MainViewModel`的`Classifier_ClassificationCompleted`方法的末尾添加以下代码来实现这一点：
- en: '[PRE37]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Below could you see how the app will look if we upload a photo of a hot dog:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 下面您可以看到，如果我们上传一张热狗的照片，应用程序将是什么样子：
- en: '![](img/f01177fa-ae26-4075-84b9-8a3e29936821.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f01177fa-ae26-4075-84b9-8a3e29936821.png)'
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built an app that can recognize whether or not a photo has
    a hot dog. We accomplished this by training a machine learning model for image
    classification using Azure Cognitive Services and the Custom Vision service.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个可以识别照片是否有热狗的应用程序。我们通过使用Azure认知服务和自定义视觉服务训练图像分类的机器学习模型来实现这一点。
- en: We exported models for CoreML and TensorFlow and we learned how to use them
    in apps for both iOS and Android. In these apps, a user can take a photo or pick
    a photo from their photo library. This photo will be sent to the model to be classified,
    and we will get a result that tells us whether or not the photo is of a hot dog.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为CoreML和TensorFlow导出了模型，并学习了如何在iOS和Android应用中使用它们。在这些应用中，用户可以拍照或从照片库中选择照片。这张照片将被发送到模型进行分类，我们将得到一个结果，告诉我们这张照片是否是热狗。
