["```js\n// simpleAjax.js\n\nimport * as hard from \"hardajaxlibrary\";\n// *import the other library that does Ajax calls*\n// *but in a hard, difficult way, requiring complex code*\n\nconst convertParamsToHardStyle = params => {\n // *do some internal things to convert params*\n // *into the way that the hard library requires*\n};\n\nconst makeStandardUrl = url => {\n // *make sure the url is in the standard*\n // *way for the hard library*\n};\n\nconst getUrl = (url, params, callback) => {\n const xhr = hard.createAnXmlHttpRequestObject();\n hard.initializeAjaxCall(xhr);\n const standardUrl = makeStandardUrl(url);\n hard.setUrl(xhr, standardUrl);\n const convertedParams = convertParamsToHardStyle(params);\n hard.setAdditionalParameters(params);\n hard.setCallback(callback);\n if (hard.everythingOk(xhr)) {\n hard.doAjaxCall(xhr);\n } else {\n throw new Error(\"ajax failure\");\n }\n};\n\nconst postUrl = (url, params, callback) => {\n // *some similarly complex code*\n // *to do a POST using the hard library*\n};\n\nexport {getUrl, postUrl}; // *the only methods that will be seen*\n```", "```js\nconst simpleAjax = (function() {\n const hard = require(\"hardajaxlibrary\");\n\n const convertParamsToHardStyle = params => {\n // ...\n };\n\n const makeStandardUrl = url => {\n // ...\n };\n\n const getUrl = (url, params, callback) => {\n // ...\n };\n\n const postUrl = (url, params, callback) => {\n // ...\n };\n\n return {\n getUrl,\n postUrl\n };\n})();\n```", "```js\nclass FullNameDisplay extends React.Component {\n render() {\n return (\n <div>\n First Name: <b>{this.props.first}</b>\n <br />\n Last Name: <b>{this.props.last}</b>\n </div>\n );\n }\n}\n\nclass ListOfNames extends React.Component {\n render() {\n return (\n <div>\n <h1>\n {this.props.heading}\n </h1>\n <ul>\n {this.props.people.map(v =>\n <FullNameDisplay first={v.first} last={v.last} />\n )}\n </ul>\n </div>\n );\n }\n}\n```", "```js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass FullNameDisplay extends React.Component {\n // *...as above...*\n}\n\nclass ListOfNames extends React.Component {\n // *...as above...*\n}\n\nconst GANG_OF_FOUR = [\n {first: \"Erich\", last: \"Gamma\"},\n {first: \"Richard\", last: \"Helm\"},\n {first: \"Ralph\", last: \"Johnson\"},\n {first: \"John\", last: \"Vlissides\"}\n];\n\nReactDOM.render(\n    <ListOfNames heading=\"GoF\" people={GANG_OF_FOUR} />,\n document.body\n);\n```", "```js\nconst makeVisible = component => {\n return (\n        <div style={{border: \"1px solid red\"}}>\n {component}\n        </div>\n );\n};\n```", "```js\nclass ListOfNames extends React.Component {\n render() {\n return (\n <div>\n <h1>\n {this.props.title}\n </h1>\n <ul>\n {this.props.people.map(v =>\n makeVisible(\n <FullNameDisplay\n first={v.first}\n last={v.last}\n />\n )\n )}\n </ul>\n </div>\n );\n }\n}\n```", "```js\nfunction findRoute(byMeans, fromPoint, toPoint) {\n    switch (byMeans) {\n        case \"foot\":\n            /* *find the shortest road\n                for a walking person* */\n\n        case \"bicycle\":\n            /** find a route apt \n                for a cyclist* */\n\n        case \"car-fastest\":\n            /* *find the fastest route\n                for a car driver* */\n\n        case \"car-shortest\":\n            /** find the shortest route\n                for a car driver* */\n\n        default:\n            /** plot a straight line,\n                or throw an error, \n                or whatever suits you * */\n    }\n}\n```", "```js\nfunction findRoute(routeAlgorithm, fromPoint, toPoint) {\n return routeAlgorithm(fromPoint, toPoint);\n}\n```", "```js\nconst logging = (target, name, descriptor) => {\n const savedMethod = descriptor.value;\n descriptor.value = function(...args) {\n console.log(`entering ${name}: ${args}`);\n try {\n const valueToReturn = savedMethod.bind(this)(...args);\n console.log(`exiting ${name}: ${valueToReturn}`);\n return valueToReturn;\n } catch (thrownError) {\n console.log(`exiting ${name}: threw ${thrownError}`);\n throw thrownError;\n }\n };\n return descriptor;\n};\n```", "```js\nclass SumThree {\n constructor(z) {\n this.z = z;\n }\n    @logging\n sum(x, y) {\n return x + y + this.z;\n }\n}\n\nnew SumThree(100).sum(20, 8);\n// *entering sum: 20,8*\n// *exiting sum: 128*\n```", "```js\nclass Foo {\n constructor(fooValue) {\n this.fooValue = fooValue;\n }\n doSomething() {\n console.log(\"something: foo... \", this.fooValue);\n }\n}\n\nvar addBar = BaseClass =>\n /*\n      *your code goes here*\n */\n ;\n\nvar fooBar = new (addBar(Foo))(22, 9);\nfooBar.doSomething();   // *something: foo... 22*\nfooBar.somethingElse(); // *something else: bar... 9* console.log(Object.keys(fooBar)); // [*\"fooValue\", \"barValue\"*]\n```"]