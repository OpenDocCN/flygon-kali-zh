["```cs\nstruct Rectangle\n{\n\u00a0\u00a0\u00a0\u00a0public int Left;\n\u00a0\u00a0\u00a0\u00a0public int Right;\n\u00a0\u00a0\u00a0\u00a0public int Top;\n\u00a0\u00a0\u00a0\u00a0public int Bottom;\n\u00a0\u00a0\u00a0\u00a0public int Width { get { return Right - Left; } }\n\u00a0\u00a0\u00a0\u00a0public int Height { get { return Bottom - Top; } }\n\u00a0\u00a0\u00a0\u00a0public Rectangle(int l, int t, int r, int b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Left = l;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Top = t;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Right = r;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bottom = b;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar r = new Rectangle(10, 10, 30, 20);\nr.Left -= 5;\nr.Right += 5;\nr.Top -= 5;\nr.Bottom += 5;\n```", "```cs\npublic void Inflate(int l, int t, int r, int b)\n{\n\u00a0\u00a0\u00a0\u00a0Left -= l;\n\u00a0\u00a0\u00a0\u00a0Right += r;\n\u00a0\u00a0\u00a0\u00a0Top -= t;\n\u00a0\u00a0\u00a0\u00a0Bottom += b;\n}\n// invoked as\nr.Inflate(5, 0, 5, 0);\n```", "```cs\nstatic void Inflate(ref Rectangle rect, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int l, int t, int r, int b)\n{\n\u00a0\u00a0\u00a0\u00a0rect.Left -= l;\n\u00a0\u00a0\u00a0\u00a0rect.Right += r;\n\u00a0\u00a0\u00a0\u00a0rect.Top -= t;\n\u00a0\u00a0\u00a0\u00a0rect.Bottom += b;\n}\n// invoked as\nInflate(ref r, 5, 0, 5, 0);\n```", "```cs\nstruct Rectangle\n{\n\u00a0\u00a0\u00a0\u00a0public readonly int Left;\n\u00a0\u00a0\u00a0\u00a0public readonly int Right;\n\u00a0\u00a0\u00a0\u00a0public readonly int Top;\n\u00a0\u00a0\u00a0\u00a0public readonly int Bottom;\n\u00a0\u00a0\u00a0\u00a0public int Width { get { return Right - Left; } }\n\u00a0\u00a0\u00a0\u00a0public int Height { get { return Bottom - Top; } }\n\u00a0\u00a0\u00a0\u00a0public Rectangle(int l, int t, int r, int b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Left = l;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Top = t;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Right = r;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bottom = b;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nstatic Rectangle Inflate(Rectangle rect, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int l, int t, int r, int b)\n{\n\u00a0\u00a0\u00a0\u00a0return new Rectangle(rect.Left - l, rect.Top - t,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rect.Right + r, rect.Bottom + b);\n}\n```", "```cs\nvar r = new Rectangle(10, 10, 30, 20);\nr = Inflate(r, 5, 0, 5, 0);\n```", "```cs\npublic delegate int Combine(int a, int b);\n```", "```cs\nclass Math\n{\n\u00a0\u00a0\u00a0\u00a0public static int Add(int a, int b) { return a + b; }\n\u00a0\u00a0\u00a0\u00a0public static int Sub(int a, int b) { return a - b; }\n\u00a0\u00a0\u00a0\u00a0public static int Mul(int a, int b) { return a * b; }\n}\n```", "```cs\nint Apply(int a, int b, Combine f)\n{\n\u00a0\u00a0\u00a0\u00a0return f(a, b);\n}\n```", "```cs\nvar s = Apply(2, 3, Math.Add);\nvar d = Apply(2, 3, Math.Sub);\nvar p = Apply(2, 3, Math.Mul);\n```", "```cs\npublic delegate TResult Func<out TResult>();\npublic delegate TResult Func<in T,out TResult>(T arg);\npublic delegate TResult Func<in T1,in T2,out TResult>(T1 arg1, T2 arg2);\n...\npublic delegate TResult Func<in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10,in T11,in T12,in T13,in T14,in T15,in T16,out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);\n```", "```cs\nT Apply<T>(T a, T b, Func<T, T, T> f)\n{\n\u00a0\u00a0\u00a0\u00a0return f(a, b);\n}\n```", "```cs\npublic delegate void Action();\npublic delegate void Action<in T>(T obj);\npublic delegate void Action<in T1,in T2>(T1 arg1, T2 arg2);\n...\npublic delegate void Action<in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9,in T10,in T11,in T12,in T13,in T14,in T15,in T16>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16);\n```", "```cs\nT Apply<T>(T a, T b, Func<T, T, T> f, Action<string> log)\n{\n\u00a0\u00a0\u00a0\u00a0var r = f(a, b);\n\u00a0\u00a0\u00a0\u00a0log?.Invoke($\"{f.Method.Name}({a},{b}) = {r}\");\n\u00a0\u00a0\u00a0\u00a0return r;\n}\n```", "```cs\nvar s = Apply(2, 3, Math.Add, Console.WriteLine);\nvar p = Apply(2, 3, Math.Mul, Console.WriteLine);\n```", "```cs\nFunc<T, T, T> ApplyReverse<T>(Func<T, T, T> f)\n{\n\u00a0\u00a0\u00a0\u00a0return delegate(T a, T b) { return f(b, a); };\n}\n```", "```cs\nvar s = ApplyReverse<int>(Math.Add)(2, 3);\nvar d = ApplyReverse<int>(Math.Sub)(2, 3);\n```", "```cs\nvar s = Apply(2, 3, (a, b) => a + b);\nvar d = Apply(2, 3, (a, b) => a - b);\nvar p = Apply(2, 3, (a, b) => a * b);\n```", "```cs\nFunc<int, int, Func<int, int, int>, int> apply = \n\u00a0\u00a0\u00a0(a, b, f) => f(a, b);\nvar s = apply(2, 3, (a, b) => a + b);\nvar d = apply(2, 3, (a, b) => a - b);\nvar p = apply(2, 3, (a, b) => a * b);\n```", "```cs\nbool IsOdd(int n) { return n % 2 == 1; }\nvar list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\nlist.RemoveAll(IsOdd);\n```", "```cs\nvar list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\nlist.RemoveAll(delegate (int n) { return n % 2 == 1; });\n```", "```cs\nvar list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\nlist.RemoveAll(n => n % 2 == 1);\n```", "```cs\nvar list = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\nlist.RemoveAll(n => { return n % 2 == 1; });\n```", "```cs\npublic partial class MyForm : Form\n{\n\u00a0\u00a0\u00a0\u00a0public MyForm()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0InitializeComponent();\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0myButton.Click += async (sender, e) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await ExampleMethodAsync();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private async Task ExampleMethodAsync()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// a time-consuming action\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await Task.Delay(1000);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Foo\n{\n\u00a0\u00a0\u00a0\u00a0public int Data { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public Foo(int value)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Data = value;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Scramble(int value, int iterations)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Func<int, int> apply = (i) => Data ^ i + value;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = 0; i < iterations; ++i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Data = apply(i);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nint[] arr = { 1, 1, 3, 5, 8, 13, 21, 34};\nint sum = 0;\nfor(int i = 0; i < arr.Length; ++i)\n{\n\u00a0\u00a0\u00a0\u00a0if (arr[i] % 2 == 1)\n\u00a0\u00a0\u00a0\u00a0sum += arr[i];\n}\n```", "```cs\nint sum = arr.Where(x => x % 2 == 1).Sum();\n```", "```cs\nint sum = (from x in arr\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0where x % 2 == 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0select x).Sum();\n```", "```cs\nvar text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\nvar count = text.Split(new char[] { ' ', ',', '.' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(w => !string.IsNullOrEmpty(w))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Count();\n```", "```cs\nvar groups = text.Split(new char[] { ' ', ',', '.' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.GroupBy(w => w.Length, w => w.ToLower())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(g => new { Length =g.Key, Words = g })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(g => g.Length > 0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.OrderBy(g => g.Length);\nforeach (var group in groups)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Length={group.Length}\");\n\u00a0\u00a0\u00a0\u00a0foreach (var word in group.Words)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\" {word}\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Customer\n{\n\u00a0\u00a0\u00a0\u00a0public long Id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string FirstName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string LastName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string Email { get; set; }\n}\nclass Article\n{\n\u00a0\u00a0\u00a0\u00a0public long Id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string EAN13 { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public double Price { get; set; }\n}\nclass OrderLine\n{\n\u00a0\u00a0\u00a0\u00a0public long Id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public long OrderId { get; set; }\n\u00a0\u00a0\u00a0\u00a0public long ArticleId { get; set; }\n\u00a0\u00a0\u00a0\u00a0public double Quantity { get; set; }\n\u00a0\u00a0\u00a0\u00a0public double Discount { get; set; }\n}\nclass Order\n{\n\u00a0\u00a0\u00a0\u00a0public long Id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DateTime Date { get; set; }\n\u00a0\u00a0\u00a0\u00a0public long CustomerId { get; set; }\n\u00a0\u00a0\u00a0\u00a0public double Discount { get; set; }\n}\n```", "```cs\nvar articles = new List<Article>()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0new Article(){ Id = 1, EAN13 = \"5901234123457\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"paper\", Price = 100.0},\n\u00a0\u00a0\u00a0\u00a0\u00a0new Article(){ Id = 2, EAN13 = \"5901234123466\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"pen\", Price = 200.0},\n\u00a0\u00a0\u00a0\u00a0\u00a0/* more */\n};\nvar customers = new List<Customer>()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0new Customer() { Id = 101, FirstName = \"John\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\", Email = \"john.doe@email.com\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0new Customer() { Id = 102, FirstName = \"Jane\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\", Email = \"jane.doe@email.com\"},\n\u00a0\u00a0\u00a0\u00a0\u00a0/* more */\n};\nvar orders = new List<Order>()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0new Order() { Id = 1001, Date = new DateTime(2020, 3, 12),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CustomerId = customers[0].Id },\n\u00a0\u00a0\u00a0\u00a0\u00a0new Order() { Id = 1002, Date = new DateTime(2020, 4, 23),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CustomerId = customers[1].Id },\n\u00a0\u00a0\u00a0\u00a0\u00a0/* more */\n};\nvar orderlines = new List<OrderLine>()\n{\n\u00a0\u00a0\u00a0\u00a0new OrderLine(){ Id = 1, OrderId=orders[0].Id, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ArticleId = articles[0].Id, Quantity=2},\n\u00a0\u00a0\u00a0\u00a0new OrderLine(){ Id = 2, OrderId=orders[0].Id, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ArticleId = articles[1].Id, Quantity=1},\n\u00a0\u00a0\u00a0\u00a0/* more */\n};\n```", "```cs\nvar query = \n\u00a0\u00a0\u00a0\u00a0orders.Join(orderlines,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0o => o.Id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ol => ol.OrderId,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(o, ol) => new { Order = o, Line = ol })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Join(customers,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0o => o.Order.CustomerId,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c => c.Id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(o, c) => new { o.Order, o.Line, Customer = c})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Join(articles,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0o => o.Line.ArticleId,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a => a.Id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(o, a) => new { o.Order, o.Line, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0o.Customer, Article = a})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Where(o => o.Order.Date >= new DateTime(2020, 4, 1) &&\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0o.Customer.FirstName == \"John\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.OrderBy(o => o.Article.Name) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(o => o.Article.Name);\n```", "```cs\norders.Join(orderlines,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0o => o.Id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ol => ol.OrderId,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(o, ol) => new { Order = o, Line = ol })\n```", "```cs\nvar count = (from w in text.Split(new char[] { ' ', ',', '.' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0where !string.IsNullOrEmpty(w)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0select w).Count();\n```", "```cs\nvar groups = from w in text.Split(new char[] { ' ', ',', '.' })\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0group w.ToLower() by w.Length into g\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0where g.Key > 0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0orderby g.Key\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0select new { Length = g.Key, Words = g };\nforeach (var group in groups)\n{\n\u00a0\u00a0\u00a0\u00a0Console.Write($\"Length={group.Length}: \");\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(string.Join(',', group.Words));\n}\n```", "```cs\nLength=2: do,ut,et\nLength=3: sit,sed\nLength=4: amet,elit\nLength=5: lorem,ipsum,dolor,magna\nLength=6: tempor,labore,dolore,aliqua\nLength=7: eiusmod\nLength=10: adipiscing,incididunt\nLength=11: consectetur\n```", "```cs\nvar query = from o in orders\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0join ol in orderlines on o.Id equals ol.OrderId\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0join c in customers on o.CustomerId equals c.Id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0join a in articles on ol.ArticleId equals a.Id\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0where o.Date >= new DateTime(2019, 4, 1) &&\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c.FirstName == \"John\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0orderby a.Name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0select a.Name;\n```", "```cs\nstring AsString(int a, double b, string c)\n{\n\u00a0\u00a0\u00a0\u00a0return $\"a={a}, b={b}, c={c}\";\n}\n```", "```cs\nvar f1 = Apply<int, double, string, string>(AsString, 42);\nvar result = f1(43.5, \"44\");\n```", "```cs\nFunc<T2, T3, TResult>\nApply<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> f, T1 arg)\n{\n\u00a0\u00a0\u00a0\u00a0return (b, c) => f(arg, b, c);\n}\n```", "```cs\nvar f1 = Apply<int, double, string, string>(AsString, 42);\nvar f2 = Apply(f1, 43.5);\nvar f3 = Apply(f2, \"44\");\nstring result = f3();\n```", "```cs\nFunc<T2, TResult> Apply<T1, T2, TResult>(Func<T1, T2, TResult> f, T1 arg)\n{\n\u00a0\u00a0\u00a0\u00a0return b => f(arg, b);\n}\nFunc<TResult> Apply<T1, TResult>(Func<T1, TResult> f, T1 arg)\n{\n\u00a0\u00a0\u00a0\u00a0return () => f(arg);\n}\n```", "```cs\nvar f1 = Curry<int, double, string, string>(AsString);\nvar f2 = f1(42);\nvar f3 = f2(43.5);\nstring result = f3(\"44\");\n```", "```cs\nFunc<T1, Func<T2, Func<T3, TResult>>> \nCurry<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> f)\n{\n\u00a0\u00a0\u00a0\u00a0return a => b => c => f(a, b, c);\n}\n```", "```cs\nvar f = Curry<int, double, string, string>(AsString);\nstring result = f(42)(43.5)(\"44\");\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static Func<int, int> Increment()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int step = 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return x => x + step;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var inc = Increment();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(inc(42));\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar list = new List<Engine>();\nvar minp = 75.0;\nvar minc = 1600;\nvar engine = list.Find(e => e.Power >= minp && \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.Capacity >= minc);\n```", "```cs\nsealed class EngineFinder\n{\n\u00a0\u00a0\u00a0\u00a0public EngineFinder(double minPower, int minCapacity)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.minPower = minPower;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.minCapacity = minCapacity;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public double minPower;\n\u00a0\u00a0\u00a0\u00a0public int minCapacity;\n\u00a0\u00a0\u00a0\u00a0public bool IsMatch(Engine engine)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return engine.Power >= minPower && \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Capacity >= minCapacity;\n\u00a0\u00a0\u00a0\u00a0}\n}\nvar engine = list.Find(new EngineFinder(minp, minc).IsMatch);\n```", "```cs\nFunc<int> GetNextId()\n{\n\u00a0\u00a0\u00a0\u00a0int id = 1;\n\u00a0\u00a0\u00a0\u00a0return () => id++;\n}\nvar nextId = GetNextId();\nConsole.WriteLine(nextId()); // prints 1\nConsole.WriteLine(nextId()); // prints 2\nConsole.WriteLine(nextId()); // prints 3\n```", "```cs\ninterface IMonoid<T>\n{\n\u00a0\u00a0\u00a0\u00a0T Combine(T a, T b);\n\u00a0\u00a0\u00a0\u00a0T Identity { get; }\n}\n```", "```cs\nstruct ConcatList<T> : IMonoid<List<T>>\n{\n\u00a0\u00a0\u00a0\u00a0public List<T> Identity => new List<T> { };\n\u00a0\u00a0\u00a0\u00a0public List<T> Combine(List<T> a, List<T> b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var l = new List<T>(a);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l.AddRange(b);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return l;\n\u00a0\u00a0\u00a0\u00a0}\n}\nstruct ConcatString : IMonoid<string>\n{\n\u00a0\u00a0\u00a0\u00a0public string Identity => string.Empty;\n\u00a0\u00a0\u00a0\u00a0public string Combine(string a, string b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return a + b;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar m = new ConcatString();\nvar text = m.Combine(\"Learning\", m.Combine(\" \", \"C# 8\"));\nConsole.WriteLine(text);\n```", "```cs\nstatic class Monoid\n{\n\u00a0\u00a0\u00a0\u00a0public static T Concat<MT, T>(IEnumerable<T> seq)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0where MT : struct, IMonoid<T>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var result = default(MT).Identity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var e in seq)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = default(MT).Combine(result, e);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar text = Monoid.Concat<ConcatString, string>(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new[] { \"Learning\", \" \", \"C# 8\"});\nConsole.WriteLine(text);\nvar list = Monoid.Concat<ConcatList<int>, List<int>>(\n\u00a0\u00a0\u00a0\u00a0new[] { new List<int>{ 1,2,3},\n\u00a0\u00a0\u00a0\u00a0new List<int> { 4, 5 },\n\u00a0\u00a0\u00a0\u00a0new List<int> { } });\nConsole.WriteLine(string.Join(\",\", list));\n```", "```cs\nvar numbers = new int[][]{ new[]{ 1, 2, 3},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new[]{ 4, 5 },\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new[]{ 6, 7} };\nIEnumerable<int> odds = numbers.SelectMany(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n => n.Where(x => x % 2 == 1));\n```", "```cs\nclass Monad<T>\n{\n\u00a0\u00a0\u00a0\u00a0public Monad(T value) => Value = value;\n\u00a0\u00a0\u00a0\u00a0public T Value { get; }\n\u00a0\u00a0\u00a0\u00a0public Monad<U> Bind<U>(Func<T, Monad<U>> f) => f(Value);\n}\n```", "```cs\nvar m = new Monad<int>(42);\nvar mm = new Monad<Monad<int>>(m);\nvar r = mm.Bind(x => x); // r equals m\n```", "```cs\nvar m = new Monad<int>(21);\nvar r = m.Bind(x => new Monad<int>(x * 2))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Bind(x => new Monad<string>($\"x={x}\"));\nConsole.WriteLine(r.Value); // prints x=42\n```", "```cs\nclass Business\n{\n\u00a0\u00a0\u00a0\u00a0public IEnumerable<Customer> GetCustomers() { \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return /* \u2026 */; }\n}\nclass Customer\n{\n\u00a0\u00a0\u00a0\u00a0public IEnumerable<Order> GetOrders() { return /* \u2026 */; }\n}\nclass Order\n{\n\u00a0\u00a0\u00a0\u00a0public IEnumerable<Article> GetArticles() { return /* \u2026 */; }\n}\nclass Article { }\n```", "```cs\nIEnumerable<Article> GetArticlesSoldBy(Business business)\n{\n\u00a0\u00a0\u00a0\u00a0var articles = new HashSet<Article>();\n\u00a0\u00a0\u00a0\u00a0foreach (var customer in business.GetCustomers())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var order in customer.GetOrders())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var article in order.GetArticles())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0articles.Add(article);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return articles;\n}\n```", "```cs\nIEnumerable<Article> GetArticlesSoldBy(Business business)\n{\n\u00a0\u00a0\u00a0\u00a0return business.GetCustomers()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.SelectMany(c => c.GetOrders())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.SelectMany(o => o.GetArticles())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Distinct()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ToList();\n}\n```"]