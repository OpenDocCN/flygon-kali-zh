- en: '5: The Docker Engine'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5：Docker引擎
- en: In this chapter, we’ll take a quick look under the hood of the Docker Engine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将快速查看Docker引擎的内部情况。
- en: You can use Docker without understanding any of the things we’ll cover in this
    chapter. So, feel free to skip it. However, to be a real master of anything, you
    need to understand what’s going on under the hood. So, to be a *real* Docker master,
    you need to know the stuff in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在不了解本章内容的情况下使用Docker。所以，随意跳过它。然而，要成为真正的专家，你需要了解底层发生了什么。所以，要成为一个*真正*的Docker专家，你需要了解本章的内容。
- en: This will be a theory-based chapter with no hands-on exercises.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个基于理论的章节，没有实际操作练习。
- en: 'As this chapter is part of the **Technical section** of the book, we’re going
    to employ the three-tiered approach where we split the chapter into three sections:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章是书中**技术部分**的一部分，我们将采用三层方法，将章节分为三个部分：
- en: '**The TLDR:** Two or three quick paragraphs that you can read while standing
    in line for a coffee'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简而言之：** 两三段简短的内容，你可以在排队买咖啡时阅读'
- en: '**The deep dive:** The really long bit where we get into the detail'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深入挖掘：** 我们深入细节的部分'
- en: '**The commands:** A quick recap of the commands we learned'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令：** 我们学到的命令的快速回顾'
- en: Let’s go and learn about the Docker Engine!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去学习关于Docker引擎的知识！
- en: Docker Engine - The TLDR
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker引擎 - 简而言之
- en: The *Docker engine* is the core software that runs and manages containers. We
    often refer to it simply as *Docker*, or *the Docker platform*. If you know a
    thing or two about VMware, it might be useful to think of it as being like ESXi.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Docker引擎*是运行和管理容器的核心软件。我们经常简称为*Docker*或*Docker平台*。如果你对VMware有所了解，把它想象成类似于ESXi可能会有所帮助。'
- en: The Docker engine is modular in design with many swappable components. Where
    possible, these are based on open-standards outlined by the Open Container Initiative
    (OCI).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker引擎的设计是模块化的，具有许多可互换的组件。在可能的情况下，这些组件基于开放标准，由开放容器倡议（OCI）概述。
- en: 'In many ways, the Docker Engine is like a car engine — both are modular and
    created by connecting many small specialized parts:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，Docker引擎就像汽车引擎 - 都是模块化的，通过连接许多小的专门部件创建而成：
- en: A car engine is made from many specialized parts that work together to make
    a car drive — intake manifolds, throttle body, cylinders, spark plugs, exhaust
    manifolds etc.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汽车引擎由许多专门的部件组成，这些部件共同工作使汽车行驶 - 进气歧管、节气门、气缸、火花塞、排气歧管等。
- en: The Docker Engine is made from many specialized tools that work together to
    create and run containers — APIs, execution driver, runtime, shims etc.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker引擎由许多专门的工具组成，这些工具共同工作以创建和运行容器 - API、执行驱动程序、运行时、shims等。
- en: 'At the time of writing, the major components that make up the Docker engine
    are: the *Docker client*, the *Docker daemon*, *containerd*, and *runc*. Together,
    these create and run containers.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，构成Docker引擎的主要组件有：*Docker客户端*、*Docker守护程序*、*containerd*和*runc*。这些组件共同创建和运行容器。
- en: Figure 5.1 shows a high-level view.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1显示了一个高层次的视图。
- en: '![Figure 5.1](images/figure5-1.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1](images/figure5-1.png)'
- en: Figure 5.1
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1
- en: Throughout the book we’ll refer to `runc` and `containerd` with lower-case “r”
    and “c”. This means sentences starting with either `____r____unc` `____c____ontainerd`
    will not start with a capital letter. This is intentional and not a mistake.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将用小写字母“r”和“c”来指代`runc`和`containerd`。这意味着以`____r____unc` `____c____ontainerd`开头的句子将不以大写字母开头。这是故意的，不是错误。
- en: Docker Engine - The Deep Dive
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker引擎 - 深入挖掘
- en: 'When Docker was first released, the Docker engine had two major components:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当Docker首次发布时，Docker引擎有两个主要组件：
- en: The Docker daemon (hereafter referred to as just “the daemon”)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序（以下简称“守护程序”）
- en: LXC
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LXC
- en: The Docker daemon was a monolithic binary. It contained all of the code for
    the Docker client, the Docker API, the container runtime, image builds, and **much**
    more.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Docker守护程序是一个单一的二进制文件。它包含了Docker客户端、Docker API、容器运行时、镜像构建等等的所有代码。
- en: LXC provided the daemon with access to the fundamental building-blocks of containers
    that existed in the Linux kernel. Things like *namespaces* and *control groups
    (cgroups)*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: LXC为守护程序提供了访问Linux内核中存在的容器的基本构建模块。诸如*命名空间*和*控制组（cgroups）*之类的东西。
- en: Figure 5.2\. shows how the daemon, LXC, and the OS, interacted in older versions
    of Docker.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2显示了在旧版本的Docker中守护程序、LXC和操作系统是如何交互的。
- en: '![Figure 5.2 Previous Docker architecture](images/figure5-2.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图5.2 以前的Docker架构](images/figure5-2.png)'
- en: Figure 5.2 Previous Docker architecture
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 以前的Docker架构
- en: Getting rid of LXC
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 摆脱LXC
- en: The reliance on LXC was an issue from the start.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始就依赖LXC是一个问题。
- en: First up, LXC is Linux-specific. This was a problem for a project that had aspirations
    of being multi-platform.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，LXC是特定于Linux的。这对于一个有多平台愿景的项目来说是一个问题。
- en: Second up, being reliant on an external tool for something so core to the project
    was a huge risk that could hinder development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，对于一个如此核心的项目来说，依赖外部工具是一个巨大的风险，可能会阻碍开发。
- en: As a result, Docker. Inc. developed their own tool called *libcontainer* as
    a replacement for LXC. The goal of *libcontainer* was to be a platform-agnostic
    tool that provided Docker with access to the fundamental container building-blocks
    that exist inside the kernel.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Docker. Inc.开发了他们自己的工具*libcontainer*来替代LXC。*libcontainer*的目标是成为一个平台无关的工具，为Docker提供访问内核中存在的基本容器构建模块。
- en: Libcontainer replaced LXC as the default *execution driver* in Docker 0.9.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Libcontainer在Docker 0.9中取代了LXC成为默认的*执行驱动程序*。
- en: Getting rid of the monolithic Docker daemon
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 摆脱单一的Docker守护程序
- en: 'Over time, the monolithic nature of the Docker daemon became more and more
    problematic:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，Docker守护程序的单一性变得越来越成问题：
- en: It’s hard to innovate on.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这很难进行创新。
- en: It got slower.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它变得更慢了。
- en: It wasn’t what the ecosystem (or Docker, Inc.) wanted.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这并不是生态系统（或Docker, Inc.）想要的。
- en: Docker, Inc. was aware of these challenges, and began a huge effort to break
    apart the monolithic daemon and modularize it. The aim of this work was to break
    out as much of the functionality as possible from the daemon, and re-implement
    it in smaller specialized tools. These specialized tools can be swapped out, as
    well as easily re-used by third parties to build other tools. This plan follows
    the tried-and-tested Unix philosophy of building small specialized tools that
    can be pieced together into larger tools.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Docker, Inc.意识到了这些挑战，并开始了一项巨大的工作，以拆分单一的守护程序并使其模块化。这项工作的目标是尽可能地从守护程序中分离出尽可能多的功能，并在较小的专门工具中重新实现它。这些专门工具可以被替换，也可以被第三方轻松重用以构建其他工具。这个计划遵循了经过验证的Unix哲学，即构建小型专门的工具，可以拼接成更大的工具。
- en: This work of breaking apart and re-factoring the Docker engine is an ongoing
    process. However, it has already seen **all of the *container execution* and container
    *runtime* code entirely removed from the daemon and refactored into small, specialized
    tools**.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 拆分和重构Docker引擎的工作是一个持续的过程。然而，它已经看到**所有的*容器执行*和容器*运行时*代码完全从守护程序中移除，并重构为小型的专门工具**。
- en: Figure 5.3 shows a high-level view of the current Docker engine architecture
    with brief descriptions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3显示了当前Docker引擎架构的高层视图，并附有简要描述。
- en: '![Figure 5.3](images/figure5-3.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3](images/figure5-3.png)'
- en: Figure 5.3
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3
- en: The influence of the Open Container Initiative (OCI)
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 开放容器倡议（OCI）的影响
- en: 'While Docker, Inc. was breaking the daemon apart and refactoring code, the
    [OCI](https://www.opencontainers.org/) was in the process of defining two container-related
    specifications (a.k.a. standards):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker公司拆分守护程序并重构代码的同时，OCI正在定义两个与容器相关的规范（也称为标准）：
- en: '[Image spec](https://github.com/opencontainers/image-spec)'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[镜像规范](https://github.com/opencontainers/image-spec)'
- en: '[Container runtime spec](https://github.com/opencontainers/runtime-spec/blob/master/RELEASES.md)'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[容器运行时规范](https://github.com/opencontainers/runtime-spec/blob/master/RELEASES.md)'
- en: Both specifications were released as version 1.0 in July 2017.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个规范于2017年7月发布为1.0版本。
- en: Docker, Inc. was heavily involved in creating these specifications and contributed
    a lot of code to them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Docker公司在创建这些规范方面发挥了重要作用，并为其贡献了大量代码。
- en: As of Docker 1.11 (early 2016), the Docker engine implements the OCI specifications
    as closely as possible. For example, the Docker daemon no longer contains any
    container runtime code — all container runtime code is implemented in a separate
    OCI-compliant layer. By default, Docker uses a tool called *runc* for this. runc
    is the *reference implementation* of the OCI container-runtime-spec. This is the
    `runc` container runtime layer in Figure 5.3\. A goal of the runc project be in-line
    with the OCI spec. However, now that the OCI spec’s are both at 1.0, we shouldn’t
    expect them to iterate too much — stability is the name of the game here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从Docker 1.11（2016年初）开始，Docker引擎尽可能地实现了OCI规范。例如，Docker守护程序不再包含任何容器运行时代码 — 所有容器运行时代码都在一个单独的符合OCI规范的层中实现。默认情况下，Docker使用一个名为*runc*的工具。runc是OCI容器运行时规范的*参考实现*。这是图5.3中的`runc`容器运行时层。runc项目的目标是与OCI规范保持一致。然而，现在OCI规范都已经达到1.0版本，我们不应该期望它们会有太多迭代
    — 稳定性才是关键。
- en: As well as this, the *containerd* component of the Docker Engine makes sure
    Docker images are presented to *runc* as valid OCI bundles.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Docker引擎的*containerd*组件确保Docker镜像以有效的OCI捆绑包形式呈现给*runc*。
- en: '**Note:** The Docker engine implemented portions of the OCI specs before the
    specs were officially released as version 1.0.'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** Docker引擎在规范正式发布为1.0版本之前就已经实现了OCI规范的部分内容。'
- en: runc
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: runc
- en: As previously mentioned, *runc* is the reference implementation of the OCI container-runtime-spec.
    Docker, Inc. was heavily involved in defining the spec and developing runc.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，*runc*是OCI容器运行时规范的参考实现。Docker公司在定义规范和开发runc方面发挥了重要作用。
- en: If you strip everything else away, runc is a small, lightweight CLI wrapper
    for libcontainer (remember that libcontainer originally replaced LXC in the early
    Docker architecture).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你剥离其他一切，runc只是一个小巧、轻量级的CLI包装器，用于libcontainer（请记住，libcontainer最初替代了Docker早期架构中的LXC）。
- en: runc has a single purpose in life — create containers. And it’s damn good at
    it. And fast! But as it’s a CLI wrapper, it’s effectively a standalone container
    runtime tool. This means you can download and build the binary, and you’ll have
    everything you need to build and play with runc (OCI) containers. But it’s bare
    bones, you’ll have none of the richness that you get with the full-blown Docker
    engine.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: runc在生活中只有一个目的 — 创建容器。而且它做得非常好。而且快！但由于它是一个CLI包装器，它实际上是一个独立的容器运行时工具。这意味着您可以下载和构建二进制文件，然后就拥有了构建和使用runc（OCI）容器所需的一切。但它只是基本功能，您将无法获得完整的Docker引擎所具有的丰富功能。
- en: We sometimes call the layer that runc operates at, “the OCI layer”. See Figure
    5.3.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有时称runc操作的层为“OCI层”。参见图5.3。
- en: 'You can see runc release information at:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接查看runc的发布信息：
- en: https://github.com/opencontainers/runc/releases
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://github.com/opencontainers/runc/releases
- en: containerd
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: containerd
- en: As part of the effort to strip functionality out of the Docker daemon, all of
    the container execution logic was ripped out and refactored into a new tool called
    containerd (pronounced container-dee). Its sole purpose in life was to manage
    container lifecycle operations — `start | stop | pause | rm...`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作为从Docker守护程序中剥离功能的努力的一部分，所有容器执行逻辑都被剥离并重构为一个名为containerd（发音为container-dee）的新工具。它的唯一目的是管理容器的生命周期操作-`start
    | stop | pause | rm...`。
- en: containerd is available as a daemon for Linux and Windows, and Docker has been
    using it on Linux since the 1.11 release. In the Docker engine stack, containerd
    sits between the daemon and runc at the OCI layer. Kubernetes can also use containerd
    via cri-containerd.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: containerd可用作Linux和Windows的守护程序，并且自1.11版本以来，Docker一直在Linux上使用它。在Docker引擎堆栈中，containerd位于守护程序和OCI层的runc之间。Kubernetes也可以通过cri-containerd使用containerd。
- en: As previously stated, containerd was originally intended to be small, lightweight,
    and designed for a single task in life — container lifecycle operations. However,
    over time it has branched out and taken on more functionality. Things like image
    management.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如先前所述，containerd最初旨在小巧，轻量，并设计用于生命周期操作。然而，随着时间的推移，它已经扩展并承担了更多功能。比如镜像管理。
- en: One of the reasons for this, is to make it easier to use in other projects.
    For example, containerd is a popular container runtime in Kubernetes. However,
    in projects like Kubernetes, it was beneficial for containerd to be able to do
    additional things like push and pull images. For these reasons, containerd now
    does a lot more than simple container lifecycle management. However, all the extra
    functionality is modular and optional, meaning you can pick and choose which bits
    you want. So it’s possible to include containerd in projects such as Kubernetes,
    but only to take the pieces your project needs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个原因是为了使它更容易在其他项目中使用。例如，containerd是Kubernetes中流行的容器运行时。然而，在像Kubernetes这样的项目中，containerd能够执行额外的操作，比如推送和拉取镜像，这是有益的。因此，containerd现在做的不仅仅是简单的容器生命周期管理。然而，所有额外的功能都是模块化和可选的，这意味着你可以选择你想要的部分。因此，可以将containerd包含在诸如Kubernetes之类的项目中，但只需选择你的项目需要的部分。
- en: 'containerd was developed by Docker, Inc. and donated to the Cloud Native Computing
    Foundation (CNCF). It released version 1.0 in December 2017\. You can see release
    information at:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: containerd是由Docker，Inc.开发的，并捐赠给了Cloud Native Computing Foundation（CNCF）。它于2017年12月发布了1.0版本。您可以在以下链接查看发布信息：
- en: https://github.com/containerd/containerd/releases
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: https://github.com/containerd/containerd/releases
- en: Starting a new container (example)
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动一个新容器（示例）
- en: Now that we have a view of the big picture, and some of the history, let’s walk
    through the process of creating a new container.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了整体情况和部分历史，让我们来看看创建一个新容器的过程。
- en: The most common way of starting containers is using the Docker CLI. The following
    `docker container run` command will start a simple new container based on the
    `alpine:latest` image.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 启动容器的最常见方式是使用Docker CLI。以下`docker container run`命令将基于`alpine:latest`镜像启动一个简单的新容器。
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`When you type commands like this into the Docker CLI, the Docker client converts
    them into the appropriate API payload and POSTs them to the correct API endpoint.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`当您在Docker CLI中输入这样的命令时，Docker客户端会将它们转换为适当的API负载并将其POST到正确的API端点。`'
- en: The API is implemented in the daemon. It is the same rich, versioned, REST API
    that has become a hallmark of Docker, and is accepted in the industry as the de
    facto container API.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: API是在守护程序中实现的。这是相同丰富，版本化的REST API，已成为Docker的标志，并在行业中被接受为事实上的容器API。
- en: Once the daemon receives the command to create a new container, it makes a call
    to containerd. Remember that the daemon no-longer contains any code to create
    containers!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦守护进程接收到创建新容器的命令，它就会调用 containerd。请记住，守护进程不再包含任何创建容器的代码！
- en: The daemon communicates with containerd via a CRUD-style API over [gRPC](https://grpc.io/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 守护进程通过 [gRPC](https://grpc.io/) 与 containerd 进行 CRUD 风格的 API 通信。
- en: Despite its name, *containerd* cannot actually create containers. It uses *runc*
    to do that. It converts the required Docker image into an OCI bundle and tells
    runc to use this to create a new container.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 *containerd* 的名字中带有“container”，但它实际上不能创建容器。它使用 *runc* 来完成这个任务。它将所需的 Docker
    镜像转换为 OCI bundle，并告诉 runc 使用这个 bundle 来创建一个新的容器。
- en: runc interfaces with the OS kernel to pull together all of the constructs necessary
    to create a container (namespaces, cgroups etc.). The container process is started
    as a child-process of runc, and as soon as it is started runc will exit.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: runc 与操作系统内核进行接口，汇集所有必要的构造来创建一个容器（命名空间、cgroups 等）。容器进程作为 runc 的子进程启动，一旦启动，runc
    就会退出。
- en: Voila! The container is now started.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！容器现在已经启动了。
- en: The process is summarized in Figure 5.4.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程在图5.4中总结了。
- en: '![Figure 5.4](images/figure5-4.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4](images/figure5-4.png)'
- en: Figure 5.4
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4
- en: One huge benefit of this model
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 这种模型的一个巨大好处
- en: Having all of the logic and code to start and manage containers removed from
    the daemon means that the entire container runtime is decoupled from the Docker
    daemon. We sometimes call this “daemonless containers”, and it makes it possible
    to perform maintenance and upgrades on the Docker daemon without impacting running
    containers!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从守护进程中移除了启动和管理容器的所有逻辑和代码意味着整个容器运行时与 Docker 守护进程解耦。我们有时称之为“无守护进程的容器”，这使得可以在不影响正在运行的容器的情况下对
    Docker 守护进程进行维护和升级！
- en: In the old model, where all of container runtime logic was implemented in the
    daemon, starting and stopping the daemon would kill all running containers on
    the host. This was a huge problem in production environments — especially when
    you consider how frequently new versions of Docker are released! Every daemon
    upgrade would kill all containers on that host — not good!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧模型中，容器运行时逻辑全部实现在守护进程中，关闭守护进程会导致主机上所有运行的容器被杀死。这在生产环境中是一个巨大的问题——特别是考虑到 Docker
    的新版本发布频率！每次守护进程升级都会杀死主机上的所有容器——这不好！
- en: Fortunately, this is no longer a problem.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这不再是一个问题。
- en: What’s this shim all about?
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 这个shim到底是什么？
- en: Some of the diagrams in the chapter have shown a shim component.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的一些图表显示了一个shim组件。
- en: The shim is integral to the implementation of daemonless containers (what we
    just mentioned about decoupling running containers from the daemon for things
    like daemon upgrades).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: shim 对于实现无守护进程的容器（就是我们刚刚提到的将运行的容器与守护进程解耦以进行守护进程升级等操作）是至关重要的。
- en: We mentioned earlier that *containerd* uses runc to create new containers. In
    fact, it forks a new instance of runc for every container it creates. However,
    once each container is created, its parent runc process exits. This means we can
    run hundreds of containers without having to run hundreds of runc instances.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到 *containerd* 使用 runc 来创建新的容器。实际上，它为每个创建的容器分叉出一个新的 runc 实例。然而，一旦每个容器被创建，它的父
    runc 进程就会退出。这意味着我们可以运行数百个容器而不必运行数百个 runc 实例。
- en: 'Once a container’s parent runc process exits, the associated containerd-shim
    process becomes the container’s parent. Some of the responsibilities the shim
    performs as a container’s parent include:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一个容器的父 runc 进程退出，相关的 containerd-shim 进程就成为容器的父进程。shim 作为容器的父进程执行的一些职责包括：
- en: Keeping any STDIN and STDOUT streams open so that when the daemon is restarted,
    the container doesn’t terminate due to pipes being closed etc.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持任何 STDIN 和 STDOUT 流保持打开，这样当守护进程重新启动时，容器不会因为管道关闭而终止等。
- en: Reports the container’s exit status back to the daemon.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向守护进程报告容器的退出状态。
- en: How it’s implemented on Linux
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 Linux 上的实现方式
- en: 'On a Linux system, the components we’ve discussed are implemented as separate
    binaries as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 系统上，我们讨论过的组件被实现为以下独立的二进制文件：
- en: '`dockerd` (the Docker daemon)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dockerd`（Docker 守护进程）'
- en: '`docker-containerd` (containerd)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-containerd`（containerd）'
- en: '`docker-containerd-shim` (shim)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-containerd-shim`（shim）'
- en: '`docker-runc` (runc)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-runc`（runc）'
- en: You can see all of these on a Linux system by running a `ps` command on the
    Docker host. Obviously, some of them will only be present when the system has
    running containers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 Docker 主机上运行 `ps` 命令来在 Linux 系统上看到所有这些。显然，当系统有运行的容器时，其中一些将会存在。
- en: So what’s the point of the daemon
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 那么守护进程的目的是什么
- en: 'With all of the execution and runtime code stripped out of the daemon you might
    be asking the question: “what is left in the daemon?”.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当守护进程中剥离了所有的执行和运行时代码，你可能会问这个问题：“守护进程中还剩下什么？”。
- en: Obviously, the answer to this question will change over time as more and more
    functionality is stripped out and modularized. However, at the time of writing,
    some of the major functionality that still exists in the daemon includes; image
    management, image builds, the REST API, authentication, security, core networking,
    and orchestration.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，随着越来越多的功能被剥离和模块化，这个问题的答案会随着时间的推移而改变。然而，在撰写本文时，仍然存在于守护进程中的一些主要功能包括：镜像管理、镜像构建、REST
    API、身份验证、安全性、核心网络和编排。
- en: Chapter summary
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节总结
- en: The Docker engine is modular in design and based heavily on open-standards from
    the OCI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 引擎在设计上是模块化的，并且严重依赖于 OCI 的开放标准。
- en: The *Docker daemon* implements the Docker API which is currently a rich, versioned,
    HTTP API that has developed alongside the rest of the Docker project.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*Docker 守护进程* 实现了 Docker API，这是一个丰富、版本化的 HTTP API，它是随着 Docker 项目的其余部分一起发展的。'
- en: Container execution is handled by *containerd*. containerd was written by Docker,
    Inc. and contributed to the CNCF. You can think of it as a container supervisor
    that handles container lifecycle operations. It is small and lightweight and can
    be used by other projects and third-party tools. For example, it’s poised to become
    the default, and most common, container runtime in Kubernetes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 容器执行由 *containerd* 处理。containerd 是由 Docker, Inc. 编写并贡献给 CNCF 的。你可以把它看作是一个处理容器生命周期操作的容器监督程序。它小巧轻便，可以被其他项目和第三方工具使用。例如，它被认为将成为
    Kubernetes 中默认和最常见的容器运行时。
- en: containerd needs to talk to an OCI-compliant container runtime to actually create
    containers. By default, Docker uses *runc* as its default container runtime. runc
    is the de facto implementation of the OCI container-runtime-spec and expects to
    start containers from OCI-compliant bundles. containerd talks to runc and ensures
    Docker images are presented to runc as OCI-compliant bundles.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: containerd 需要与符合 OCI 标准的容器运行时进行通信，以实际创建容器。默认情况下，Docker 使用 *runc* 作为其默认的容器运行时。runc
    是 OCI 容器运行时规范的事实实现，并且期望从符合 OCI 标准的捆绑包中启动容器。containerd 与 runc 进行通信，并确保 Docker 镜像以符合
    OCI 标准的捆绑包的形式呈现给 runc。
- en: runc can be used as a standalone CLI tool to create containers. It’s based on
    code from libcontainer, and can also be used by other projects and third-party
    tools.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: runc 可以作为一个独立的 CLI 工具来创建容器。它基于 libcontainer 的代码，并且也可以被其他项目和第三方工具使用。
- en: 'There is still a lot of functionality implemented in the Docker daemon. More
    of this may be broken out over time. Functionality currently still inside of the
    Docker daemon include, but is not limited to: the API, image management, authentication,
    security features, core networking, and volumes.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Docker守护程序中仍然实现了许多功能。随着时间的推移，这些功能可能会进一步拆分。目前仍然包含在Docker守护程序中的功能包括但不限于：API、镜像管理、身份验证、安全功能、核心网络和卷管理。
- en: The work of modularizing the Docker engine is ongoing.`
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化Docker引擎的工作正在进行中。
