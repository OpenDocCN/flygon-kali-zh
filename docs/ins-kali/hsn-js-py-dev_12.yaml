- en: JavaScript, Ruler of the Frontend
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript，前端的统治者
- en: If you're starting to grasp that JavaScript is integral to the way modern websites
    and web applications function, you're on the right path. Without JavaScript, most
    of the user interfaces we take for granted on the web wouldn't exist. Let's take
    a closer look at how JavaScript brings the frontend together. We'll be working
    with a couple of React applications, as well as comparing and contrasting a Python
    application in order to further our understanding of the whys and hows of JavaScript's
    importance on the frontend.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您开始领会 JavaScript 对现代网站和 Web 应用程序功能的重要性，那么您正在走上正确的道路。没有 JavaScript，我们在网页上理所当然的大多数用户界面都不会存在。让我们更仔细地看看
    JavaScript 如何将前端整合在一起。我们将使用一些 React 应用程序，并比较和对比 Python 应用程序，以进一步了解 JavaScript
    在前端的重要性的原因和方式。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Building interactions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建交互
- en: Using dynamic data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态数据
- en: Understanding modern applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解现代应用程序
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be prepared to work with the code provided in the `Chapter-10` directory of
    the repository at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-10](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-10).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好使用存储库中`Chapter-10`目录中提供的代码进行工作，网址是[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-10](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-10)。由于我们将使用命令行工具，因此请确保您的终端或命令行
    shell 可用。我们需要一个现代浏览器和一个本地代码编辑器。
- en: Building interactions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建交互
- en: 'Let''s take a look at a simple **Single-Page Application** (**SPA**):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的**单页应用程序**（**SPA**）：
- en: Navigate to the `simple-reactjs-app` directory in `chapter-10` (`cd simple-reactjs-app`).
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`chapter-10`中的`simple-reactjs-app`目录（`cd simple-reactjs-app`）。
- en: Install the dependencies with `npm install`.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm install`安装依赖项。
- en: Run the app with `npm start`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm start`运行应用程序。
- en: 'Access the app at `http://localhost:3000`. Here''s what you''ll see:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http://localhost:3000`访问应用程序。您会看到以下内容：
- en: '![](assets/2ab2abff-d8e7-4629-b096-18ce5772a770.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ab2abff-d8e7-4629-b096-18ce5772a770.png)'
- en: Figure 10.1 – Simple React app
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 - 简单的 React 应用程序
- en: 'As you click through the detail buttons and inspect your network tab, you will
    see that the page does not reload and it only loads the JSON data from the server.
    This is a very basic example of how an SPA functions: with minimal server usage,
    the user experience''s interactions are streamlined, contributing to an efficient,
    low-overhead workflow. You''re probably familiar with other SPAs, such as Gmail,
    Google Maps, and Facebook, though the underlying technologies vary.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您单击详细按钮并检查网络选项卡时，您会发现页面不会重新加载，它只会从服务器加载 JSON 数据。这是单页应用程序功能的一个非常基本的示例：使用最少的服务器使用，用户体验的交互被简化，有助于高效、低开销的工作流程。您可能熟悉其他单页应用程序，如
    Gmail、Google 地图和 Facebook，尽管底层技术有所不同。
- en: It may be taken for granted in this day and age of internet technology, but
    JavaScript is the foundation of how these apps work. Without JavaScript, we'd
    have a lot of page reloading and high wait-times, even with Ajax.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网技术时代，JavaScript 可能被视为理所当然，但它是这些应用程序工作的基础。没有 JavaScript，我们将有大量的页面重新加载和长时间等待，即使使用
    Ajax 也是如此。
- en: Let's see how we can work with dynamic data by comparing and contrasting a basic
    Python example with a modern React application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过比较和对比一个基本的 Python 示例和一个现代的 React 应用程序来看看如何使用动态数据。
- en: Using dynamic data
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动态数据
- en: 'Let''s first take a look at a Python Flask example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一个 Python Flask 示例：
- en: Navigate to the `flask` directory in `chapter-10` (`cd flask`).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`chapter-10`中的`flask`目录（`cd flask`）。
- en: 'You''ll need to install a few pieces for our setup. These instructions are
    for Python:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要安装一些组件以进行设置。以下说明适用于 Python：
- en: Create a virtual environment with `python3 -m venv env`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python3 -m venv env`创建虚拟环境。
- en: Activate it using `. env/bin/activate`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`. env/bin/activate`激活它。
- en: 'Install the requirements: `pip3 install -r requirements.txt`.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装要求：`pip3 install -r requirements.txt`。
- en: 'Now you can start the application: `python3 app.py`.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以启动应用程序：`python3 app.py`。
- en: 'Access the page at `http://localhost:5000`. You''ll see this:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http://localhost:5000`访问页面。您会看到这个：
- en: '![](assets/2ca6bb7c-1df9-4cba-8575-cfb6ee5ad305.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ca6bb7c-1df9-4cba-8575-cfb6ee5ad305.png)'
- en: Figure 10.2 – Basic Flask application
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 - 基本 Flask 应用程序
- en: 'Play around with entering and not entering your name and take a look at the
    fact that the page reloads when you do so (I''ve added a timestamp to make it
    easier to see as the page reload can happen too quickly to see). This is a very
    basic Flask application, and there are more efficient ways to do validation work
    with a combination of Python and JavaScript, but at a base level, even with some
    Flask-based form validation tools, the validation and interaction we''re seeing
    happens on the backend. The server is hit every time we hit Submit. The following
    screenshot shows server-side validation if you don''t enter a string:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试输入和不输入您的姓名，并观察页面在这样做时重新加载的事实（我添加了时间戳，以便更容易看到页面重新加载可能发生得太快而看不到）。这是一个非常基本的 Flask
    应用程序，有更有效的方法可以使用 Python 和 JavaScript 的组合进行验证工作，但在基本水平上，即使使用一些基于 Flask 的表单验证工具，我们所看到的验证和交互也是在后端进行的。每次我们点击提交时，服务器都会被访问。以下截图显示了如果您不输入字符串的服务器端验证：
- en: '![](assets/8928d486-d5e2-499b-81e1-a0f56af3f9c1.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8928d486-d5e2-499b-81e1-a0f56af3f9c1.png)'
- en: Figure 10.3 - Basic Flask validation
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 - 基本 Flask 验证
- en: Note that the timestamp changes, indicating a re-render from the server.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意时间戳的更改，表示服务器重新渲染。
- en: 'Let''s make this a bit better for our form validation interaction by revising
    our simple React application:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改我们简单的 React 应用程序，让我们为我们的表单验证交互做得更好：
- en: 'Navigate to the `reactjs-app-form` directory: `cd reactjs-app-form`.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`reactjs-app-form`目录：`cd reactjs-app-form`。
- en: 'Install the dependencies: `npm install`.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装依赖项：`npm install`。
- en: 'Start the server: `npm start`.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器：`npm start`。
- en: 'Access the page at `http://localhost:5000`. Here''s an updated version of our
    simple app:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http://localhost:5000`访问页面。这是我们简单应用的更新版本：
- en: '![](assets/9536ba0a-56b9-4802-bca2-47e41675bbc8.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9536ba0a-56b9-4802-bca2-47e41675bbc8.png)'
- en: Figure 10.4 – Simple app with dynamic data
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 - 具有动态数据的简单应用
- en: 'Now try working with it and notice how if you change one of the primary fields,
    the fields on the left will change too. Additionally, it''s saving the JSON *as
    you edit* so that if you refresh the page, your changes persist. This is thanks
    to the power of JavaScript: the React frontend is handing all the changes you''re
    making throughout parts of the application and then an Express backend is serving
    and saving JSON files. In this case, the updates to the markup on the page are
    happening in real time. Granted, we''re hitting the server with a save and read
    operation each time we edit, but that''s because of the way the application is
    designed. To persist changes, it would be trivial to create a Save button instead
    of the saving happening on the change of a field.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试使用它，并注意如果您更改一个主要字段，左侧的字段也会更改。此外，它会*在您编辑时*保存JSON，因此如果您刷新页面，您的更改将保留。这要归功于JavaScript的强大功能：React前端正在处理您在应用程序各个部分进行的所有更改，然后Express后端正在提供和保存JSON文件。在这种情况下，页面上标记的更新是实时发生的。当然，每次编辑时我们都会与服务器进行保存和读取操作，但这是因为应用程序的设计方式。要保持更改，创建一个保存按钮而不是在字段更改时进行保存将是微不足道的。
- en: 'If you''d like to work with this example, there are a few things you''ll need
    to do:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用这个示例，您需要做一些事情：
- en: 'First, navigate to the directory in a new shell window (leave the previous
    instance running): `cd client`.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在新的shell窗口中导航到目录（保留之前的实例运行）：`cd client`。
- en: Execute `npm install`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`npm install`。
- en: 'Begin the program: `npm start`.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始程序：`npm start`。
- en: The Express server will then gather the built files created by React's running
    process versus in the pre-built files that are already in the directory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Express服务器将收集由React运行过程创建的构建文件，与已经存在于目录中的预构建文件进行比较。
- en: Input validation and error handling
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入验证和错误处理
- en: 'One part about dynamic data that we can see that might be important for an
    application such as this is *input validation* and *error handling*. Notice how
    in our application, if the email field is blank or we haven''t entered a valid
    email, it will have a red outline. Otherwise, it will have a green outline. As
    you type a valid email address and select the next field, you can see that the
    red outline will change to green without hitting the server (except to save the
    data, as we discussed before). This is client-side validation, and it''s extremely
    powerful when creating a streamlined user experience: the user does not have to
    hit save and wait for a server response in order to see whether they''ve entered
    incorrect data.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关于动态数据的一个重要部分是*输入验证*和*错误处理*。请注意，在我们的应用程序中，如果电子邮件字段为空或者我们没有输入有效的电子邮件，它将有一个红色轮廓。否则，它将有一个绿色轮廓。当您输入有效的电子邮件地址并选择下一个字段时，您会发现红色轮廓会在不与服务器交互的情况下（除了保存数据，正如我们之前讨论的那样）变为绿色。这是客户端验证，当创建流畅的用户体验时非常强大：用户不必点击保存并等待服务器响应，以查看他们是否输入了不正确的数据。
- en: 'You might have noticed one detail when working with the Phone field: it''s
    restricted to numbers. If you look at `client/src/CustomerDetails.js`, we''ve
    restricted the type to numbers here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理电话字段时，您可能已经注意到一个细节：它被限制为数字。如果您查看`client/src/CustomerDetails.js`，我们在这里将类型限制为数字：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are a couple of other React pieces in here also. Let''s take a look at
    the `handleChange` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一些其他的React部分。让我们来看一下`handleChange`函数：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Axios is a library that simplifies Ajax calls, and I used it here instead of
    `fetch` just as a demonstration. You will probably see Axios being used in React
    work, although you can always choose to use raw `fetch`. However, let's focus
    on the `this.validate(event.target)` line.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Axios是一个简化Ajax调用的库，我在这里使用它而不是`fetch`只是为了演示。您可能会在React工作中看到Axios被使用，尽管您始终可以选择使用原始的`fetch`。但是，让我们专注于`this.validate(event.target)`这一行。
- en: 'This is the content of the function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是函数的内容：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`validateEmail()` is a magic function! You can find it in `client/src/validation.js`
    and it uses a *regular expression* to pattern-match the input string to see whether
    it looks like a correctly formatted email address. Then, depending on whether
    the function returns `true` or `false`, we set a validation state that React will
    then use to set the color of the email field''s border.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`validateEmail()`是一个神奇的函数！您可以在`client/src/validation.js`中找到它，它使用*正则表达式*来模式匹配输入字符串，以查看它是否看起来像一个正确格式的电子邮件地址。然后，根据函数返回`true`或`false`，我们设置一个验证状态，React将使用它来设置电子邮件字段的边框颜色。'
- en: Frontend validation and error handling are incredibly important for a smooth
    user experience, but it's only part of the story. The other part is security.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前端验证和错误处理对于流畅的用户体验非常重要，但这只是故事的一部分。另一部分是安全性。
- en: Security and data
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全和数据
- en: As you know from working with the developer tools in the browser, it's possible
    to circumvent pretty much any frontend restrictions if you try hard enough. For
    example, with our Phone field, though we've restricted it on the frontend, we
    can always inspect the HTML and enter in any value that we want. As a quick note,
    it's important to also validate your data on the backend to be sure it's properly
    formatted.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从浏览器中的开发者工具中了解的那样，如果您努力尝试，几乎可以规避任何前端限制。例如，对于我们的电话字段，尽管我们在前端限制了它，但我们总是可以检查HTML并输入任何我们想要的值。一个快速的提示是，也很重要在后端验证您的数据，以确保它格式正确。
- en: One thing that corporate data breaches and hacks always have in common is that
    the attacker is taking advantage of a weakness in the system being used. Very
    rarely is it actually a case of a leaked password; more often, it's weak cryptography
    or even a frontend problem. We'll discuss security further in [Chapter 17](655b37ac-84df-4d2b-abda-b9c88fe9f6f2.xhtml),
    *Security and Keys*. You can learn more at [OWASP.org](https://OWASP.org).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 企业数据泄露和黑客攻击的一个共同点是攻击者利用了系统中的弱点。很少是密码泄露的情况；更常见的是弱加密或甚至是前端问题。我们将在[第17章](655b37ac-84df-4d2b-abda-b9c88fe9f6f2.xhtml)中进一步讨论安全性和密钥。您可以在[OWASP.org](https://OWASP.org)了解更多信息。
- en: Let's continue and review what we've learned.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续回顾我们所学到的东西。
- en: Understanding modern applications
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解现代应用程序
- en: At this point, it should come as no surprise that all modern web applications
    are inextricably tied to using JavaScript. There's no modern web without it, as
    interactions simply cannot happen in real time without it. The server side has
    its place and importance, but the crux of what the user sees and interacts with
    is controlled by JavaScript.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，毫不奇怪的是，所有现代Web应用程序都与JavaScript紧密联系在一起。没有它，交互就无法实时发生。服务器端有其位置和重要性，但用户看到和交互的关键是由JavaScript控制的。
- en: Just like CSS is a complement to HTML, JavaScript is the third friend in the
    group, creating meaningful experiences out of a collection of markup and styling.
    As the muscles of a web app, it provides us with rich interactions and logic,
    and is the foundation of all SPAs. It truly is a tool of wonder and beauty.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就像CSS是HTML的补充一样，JavaScript是这个组合中的第三个朋友，通过一系列标记和样式创建有意义的体验。作为Web应用程序的肌肉，它为我们提供丰富的交互和逻辑，并且是所有单页应用程序的基础。它真的是一个神奇而美丽的工具。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With JavaScript, we can go beyond the "web page" and create fully fledged web
    applications. From email systems to banks to spreadsheets to nearly anything you
    use a computer for, JavaScript is there to help you.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过JavaScript，我们可以超越“网页”，创建完整的Web应用程序。从电子邮件系统到银行，再到电子表格，几乎任何您使用计算机的东西，JavaScript都可以帮助您。
- en: In the next chapter, we will venture into using JavaScript on the server side
    with Node.js. We won't completely leave the frontend behind, but rather, we'll
    see how they tie together.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Node.js在服务器端使用JavaScript。我们不会完全抛弃前端，而是会看到它们如何联系在一起。
