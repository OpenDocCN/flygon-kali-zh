["```cs\n[Fact]\npublic void SomeFunctionWillReturn5AsWeUseResultToLetItFinish()\n{\n    var result = SomeFunction().Result;\n    Assert.Equal(5, result);\n}\n```", "```cs\nprivate async Task<int> SomeFunction()\n{\n    int result =await Task.Run(() =>\n    {\n        Thread.Sleep(1000);\n        return 5;\n    });           \n    return result;\n}\n```", "```cs\n[TestMethod]\npublic async void SomeFunctionShouldFailAsExpectedValueShouldBe5AndNot3()\n{\n    var result = await SomeFunction();\n    Assert.AreEqual(3, result);\n }\n```", "```cs\n[TestMethod]\npublic void SomeFunctionWillReturn5AsWeUseResultToLetItFinish()\n{\n    var result = SomeFunction().Result;\n    Assert.AreEqual(3, result);\n}\n```", "```cs\n[Fact]\npublic void SomeFunctionWillReturn5AsWeUseResultToLetItFinish()\n{\n    var result = SomeFunction().Result;\n    Assert.Equal(5, result);\n}\n```", "```cs\n[Fact]\npublic async void SomeFunctionWillReturn5AsCallIsAwaited()\n{\n    var result = await SomeFunction();\n    Assert.Equal(5, result);\n}\n```", "```cs\n[Test]\npublic async void SomeFunctionWillReturn5AsCallIsAwaited()\n{\n    var result = await SomeFunction();\n    Assert.AreEqual(3, result);\n}\n```", "```cs\n[Test]\npublic async Task SomeFunctionWillReturn5AsCallIsAwaited()\n{\n    var result = await SomeFunction();\n    Assert.AreEqual(3, result);\n}\n```", "```cs\nprivate async Task<float> GetDivisionAsync(int number , int divisor)\n{\n    if (divisor == 0)\n    {\n        throw new DivideByZeroException();\n    }\n    int result = await Task.Run(() =>\n    {\n        Thread.Sleep(1000);\n        return number / divisor;\n    });\n    return result;\n}\n```", "```cs\n[Test]\npublic async Task GetDivisionAsyncShouldReturnSuccessIfDivisorIsNotZero()\n{\n    int number = 20;\n    int divisor = 4;\n    var result = await GetDivisionAsync(number, divisor);\n    Assert.AreEqual(result, 5);\n}\n```", "```cs\n[Test]\npublic void GetDivisionAsyncShouldCheckForExceptionIfDivisorIsNotZero()\n{\n    int number = 20;\n    int divisor = 0;\n    Assert.ThrowsAsync<DivideByZeroException>(async () => \n     await GetDivisionAsync(number, divisor));\n}\n```", "```cs\npublic interface IService\n{\n    Task<string> GetDataAsync();\n}\n```", "```cs\nclass Controller\n{\n    public Controller (IService service)\n    {\n        Service = service;\n    }\n    public IService Service { get; }\n    public async Task DisplayData()\n    {\n        var data =await Service.GetDataAsync();\n        Console.WriteLine(data);\n    }\n}\n```", "```cs\nusing Moq;\n```", "```cs\nvar serviceMock = new Mock<IService>();\n```", "```cs\nserviceMock.Setup(s => s.GetDataAsync()).Returns(\n                Task.FromResult(\"Some Dummy Value\"));\n```", "```cs\nvar controller = new Controller(serviceMock.Object);\n```", "```cs\n [Test]\n        public async System.Threading.Tasks.Task DisplayDataTestAsync()\n        {\n            var serviceMock = new Mock<IService>();\n            serviceMock.Setup(s => s.GetDataAsync()).Returns(\n                Task.FromResult(\"Some Dummy Value\"));\n            var controller = new Controller(serviceMock.Object);\n            await controller.DisplayData();\n        }\n```", "```cs\n[Test]\npublic async Task DisplayDataTestAsyncUsingTaskCompletionSource()\n{\n    // Create a mock service\n    var serviceMock = new Mock<IService>();\n    string data = \"Some Dummy Value\";\n    //Create task completion source\n    var tcs = new TaskCompletionSource<string>();\n    //Setup completion source to return test data\n    tcs.SetResult(data);\n    //Setup mock service object to return Task underlined by tcs \n    //when GetDataAsync method of service is called\n    serviceMock.Setup(s => s.GetDataAsync()).Returns(tcs.Task);\n    //Pass mock service instance to Controller\n    var controller = new Controller(serviceMock.Object);\n    //Call DisplayData method of controller asynchronously\n    await controller.DisplayData();\n}\n```"]