- en: Visualizing Metrics and Alerts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化指标和警报
- en: It is curious how often you humans manage to obtain that which you do not want.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你们人类经常设法获得你们不想要的东西，这是很有趣的。
- en: '- *Spock*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- *斯波克*'
- en: '**Dashboards are useless! They are a waste of time. Get Netflix if you want
    to watch something. It''s cheaper than any other option.**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**仪表板是无用的！它们是浪费时间。如果你想看点东西，就去看Netflix吧。比任何其他选择都便宜。**'
- en: I repeated those words on many public occasions. I think that companies exaggerate
    the need for dashboards. They spend a lot of effort creating a bunch of graphs
    and put a lot of people in charge of staring at them. As if that's going to help
    anyone. The main advantage of dashboards is that they are colorful and full of
    lines, boxes, and labels. Those properties are always an easy sell to decision
    makers like CTOs and heads of departments. When a software vendor comes to a meeting
    with decision makers with authority to write checks, he knows that there is no
    sale without "pretty colors". It does not matter what that software does, but
    how it looks like. That's why every software company focuses on dashboards.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我在许多公开场合重复了这些话。我认为公司夸大了对仪表板的需求。他们花费了大量精力创建了一堆图表，并让很多人负责盯着它们。好像那样会帮助任何人一样。仪表板的主要优势在于它们色彩丰富，充满线条、方框和标签。这些特性总是很容易卖给像CTO和部门负责人这样的决策者。当一个软件供应商与有权签发支票的决策者开会时，他知道没有“漂亮的颜色”就没有销售。软件做什么并不重要，重要的是它的外观。这就是为什么每家软件公司都专注于仪表板。
- en: Think about it. What good is a dashboard for? Are we going to look at graphs
    until a bar reaches a red line indicating that a critical threshold is reached?
    If that's the case, why not create an alert that will trigger under the same conditions
    and stop wasting time staring at screens and waiting until something happens.
    Instead, we can be doing something more useful (like staring Netflix).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 想想看。仪表板有什么好处？我们会盯着图表看，直到柱状图达到红线，表示达到了临界阈值吗？如果是这样，为什么不创建一个在相同条件下触发的警报，而不是浪费时间盯着屏幕等待发生什么。相反，我们可以做一些更有用的事情（比如看Netflix）。
- en: Is our "panic criteria" more complex than what can be expressed through alerts?
    I do think that it is more complex. However, that complexity cannot be reflected
    through pre-defined graphs. Sure, unexpected things happen, and we need to dig
    through data. However, the word "unexpected" defies what dashboards provide. They
    are all about the expected outcomes. Otherwise, how are we going to define a graph
    without knowing what to expect? "It can be anything" cannot be translated to a
    graph. Dashboards with graphs are our ways to assume what might go wrong and put
    those assumptions on a screen or, more often than not, on a lot of screens.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“恐慌标准”是否比警报所能表达的更复杂？我认为它更复杂。然而，这种复杂性无法通过预定义的图表来反映。当然，意外事件会发生，我们需要深入挖掘数据。然而，“意外”这个词违背了仪表板所提供的内容。它们都是关于预期结果的。否则，我们如何在不知道期望结果的情况下定义一个图表呢？“它可以是任何东西”无法转化为图表。带有图表的仪表板是我们假设可能出错的方式，并将这些假设放在屏幕上，或者更常见的是放在很多屏幕上。
- en: However, unexpected can only be explored by querying metrics and going deeper
    and deeper until we find the cause of an issue. That's investigative work that
    does not translate well to dashboards. We use Prometheus queries for that.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，意外只能通过查询指标来探索，不断深入直到找到问题的原因。这是一项调查工作，无法很好地转化为仪表板。我们使用Prometheus查询来进行这项工作。
- en: And yet, here I am dedicating a chapter to dashboards.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我在这里把一整章都献给了仪表板。
- en: I do admit that dashboards are not (fully) useless. They are useful, sometimes.
    What I truly wanted to convey is that their usefulness is exaggerated and that
    we might require to construct and use dashboards differently than what many are
    used to.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认仪表板并不是（完全）无用的。它们有时是有用的。我真正想传达的是它们的用处被夸大了，我们可能需要以不同于许多人习惯的方式构建和使用仪表板。
- en: But, I'm jumping ahead of myself. We'll discuss the details of dashboards a
    bit later. For now, we need to create a cluster that will allow us to experiment
    and take this conversation to a more practical level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我有点跳到了结论。我们稍后会讨论仪表板的细节。现在，我们需要创建一个集群，这将使我们能够进行实验，并将这个对话提升到更实际的水平。
- en: Creating a cluster
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个集群
- en: The `vfarcic/k8s-specs` ([https://github.com/vfarcic/k8s-specs](https://github.com/vfarcic/k8s-specs))
    repository will continue to serve as our source of Kubernetes definitions. We'll
    make sure that it is up-to-date by pulling the latest version.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`vfarcic/k8s-specs` ([https://github.com/vfarcic/k8s-specs](https://github.com/vfarcic/k8s-specs))
    仓库将继续作为我们的 Kubernetes 定义的来源。我们将确保通过拉取最新版本使其保持最新。'
- en: All the commands from this chapter are available in the `06-grafana.sh` ([https://gist.github.com/vfarcic/b94b3b220aab815946d34af1655733cb](https://gist.github.com/vfarcic/b94b3b220aab815946d34af1655733cb))
    Gist.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有命令都可以在 `06-grafana.sh` ([https://gist.github.com/vfarcic/b94b3b220aab815946d34af1655733cb](https://gist.github.com/vfarcic/b94b3b220aab815946d34af1655733cb))
    Gist 中找到。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The requirements are the same as those we had in the previous chapter. For your
    convenience, the Gists are available here as well. Feel free to use them to create
    a new cluster, or to validate that the one you're planning to use meets the requirements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要求与上一章相同。为了方便起见，Gists 在这里也是可用的。请随意使用它们来创建一个新的集群，或者验证您计划使用的集群是否符合要求。
- en: '`gke-instrument.sh`: **GKE** with 3 n1-standard-1 worker nodes, **nginx ****Ingress**,
    **tiller**, **Prometheus** Chart, and environment variables **LB_IP**, **PROM_ADDR**,
    and **AM_ADDR** ([https://gist.github.com/vfarcic/675f4b3ee2c55ee718cf132e71e04c6e](https://gist.github.com/vfarcic/675f4b3ee2c55ee718cf132e71e04c6e)).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gke-instrument.sh`：**GKE** 使用 3 个 n1-standard-1 工作节点，**nginx Ingress**，**tiller**，**Prometheus**
    图表，和环境变量 **LB_IP**，**PROM_ADDR**，和 **AM_ADDR** ([https://gist.github.com/vfarcic/675f4b3ee2c55ee718cf132e71e04c6e](https://gist.github.com/vfarcic/675f4b3ee2c55ee718cf132e71e04c6e))。'
- en: '`eks-hpa-custom.sh`: **EKS** with 3 t2.small worker nodes, **nginx Ingress**,
    **tiller**, **Metrics Server**, **Prometheus** Chart, environment variables **LB_IP**,
    **PROM_ADDR**, and **AM_ADDR**, and **Cluster Autoscaler** ([https://gist.github.com/vfarcic/868bf70ac2946458f5485edea1f6fc4c](https://gist.github.com/vfarcic/868bf70ac2946458f5485edea1f6fc4c)).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eks-hpa-custom.sh`：**EKS** 使用 3 个 t2.small 工作节点，**nginx Ingress**，**tiller**，**Metrics
    Server**，**Prometheus** 图表，环境变量 **LB_IP**，**PROM_ADDR**，和 **AM_ADDR**，以及 **Cluster
    Autoscaler** ([https://gist.github.com/vfarcic/868bf70ac2946458f5485edea1f6fc4c](https://gist.github.com/vfarcic/868bf70ac2946458f5485edea1f6fc4c))。'
- en: '`aks-instrument.sh`: **AKS** with 3 Standard_B2s worker nodes, **nginx Ingress**,
    and **tiller**, **Prometheus** Chart, and environment variables **LB_IP**, **PROM_ADDR**,
    and **AM_ADDR** ([https://gist.github.com/vfarcic/65a0d5834c9e20ebf1b99225fba0d339](https://gist.github.com/vfarcic/65a0d5834c9e20ebf1b99225fba0d339)).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aks-instrument.sh`：**AKS** 使用 3 个 Standard_B2s 工作节点，**nginx Ingress**，**tiller**，**Prometheus**
    图表，和环境变量 **LB_IP**，**PROM_ADDR**，和 **AM_ADDR** ([https://gist.github.com/vfarcic/65a0d5834c9e20ebf1b99225fba0d339](https://gist.github.com/vfarcic/65a0d5834c9e20ebf1b99225fba0d339))。'
- en: '`docker-instrument.sh`: **Docker for Desktop** with **2 CPUs**, **3 GB RAM**,
    **nginx Ingress**, **tiller**, **Metrics Server**, **Prometheus** Chart, and environment
    variables **LB_IP**, **PROM_ADDR**, and **AM_ADDR** ([https://gist.github.com/vfarcic/1dddcae847e97219ab75f936d93451c2](https://gist.github.com/vfarcic/1dddcae847e97219ab75f936d93451c2)).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-instrument.sh`：**Docker for Desktop**，带有**2个CPU**，**3GB RAM**，**nginx
    Ingress**，**tiller**，**Metrics Server**，**Prometheus**图表，以及环境变量**LB_IP**，**PROM_ADDR**和**AM_ADDR**
    ([https://gist.github.com/vfarcic/1dddcae847e97219ab75f936d93451c2](https://gist.github.com/vfarcic/1dddcae847e97219ab75f936d93451c2))。'
- en: '`minikube-instrument.sh`: **minikube** with **2 CPUs**, **3 GB RAM**, **ingress**,
    **storage-provisioner**, **default-storageclass**, and **metrics-server** addons
    enabled, **tiller**, **Prometheus** Chart, and environment variables **LB_IP**,
    **PROM_ADDR**, and **AM_ADDR** ([https://gist.github.com/vfarcic/779fae2ae374cf91a5929070e47bddc8](https://gist.github.com/vfarcic/779fae2ae374cf91a5929070e47bddc8)).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube-instrument.sh`：**minikube**，带有**2个CPU**，**3GB RAM**，启用**ingress**，**storage-provisioner**，**default-storageclass**和**metrics-server**插件，**tiller**，**Prometheus**图表，以及环境变量**LB_IP**，**PROM_ADDR**和**AM_ADDR**
    ([https://gist.github.com/vfarcic/779fae2ae374cf91a5929070e47bddc8](https://gist.github.com/vfarcic/779fae2ae374cf91a5929070e47bddc8))。'
- en: Which tools should we use for dashboards?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应该使用哪些工具来创建仪表板？
- en: It doesn't take more than a few minutes with Prometheus to discover that it
    is not designed to serve as a dashboard. Sure, you can create graphs in Prometheus
    but they are not permanent, nor do they offer much in terms of presenting data.
    Prometheus' graphs are designed to be used as a way to visualize ad-hoc queries.
    And that's what we need most of the time. When we receive a notification from
    an alert that there is a problem, we usually start our search for the culprit
    by executing the query of the alert and, from there on, we go deeper into data
    depending on the results. That is, if the alert does not reveal the problem immediately,
    in which case there is no need to receive notifications since those types of apparent
    issues can usually be fixed automatically.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Prometheus只需几分钟就会发现它并不是设计用来作为仪表板的。当然，你可以在Prometheus中创建图表，但它们并不是永久的，也没有提供很多关于数据呈现的功能。Prometheus的图表设计用于可视化临时查询。这正是我们大部分时间所需要的。当我们收到来自警报的通知表明有问题时，通常会通过执行警报的查询来开始寻找问题的罪魁祸首，然后根据结果深入数据。也就是说，如果警报没有立即显示问题，那么就没有必要接收通知，因为这类明显的问题通常可以自动修复。
- en: But, as I already mentioned, Prometheus' does not have dashboarding features,
    so we'll have to look for a different tool.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，正如我已经提到的，Prometheus并没有仪表板功能，所以我们需要寻找其他工具。
- en: These days, the choice of a dashboard is easy. *Grafana* ([https://grafana.com/](https://grafana.com/))
    is the undisputed ruler in the area. Other solutions are too old to bother with,
    or they do not support Prometheus. That is not to say that Grafana is the best
    tool on the market. But the price is right (it's free), and it works with many
    different data sources. We could, for example, argue that *Kibana* ([https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana))
    is just as good as Grafana, or even better. But, it is limited to data from ElasticSearch.
    While Grafana can also use data from ElasticSearch, it supports many others. Some
    might say that *DataDog* ([https://www.datadoghq.com/](https://www.datadoghq.com/))
    is a better choice. Still, it suffers from the same problem as Kibana. It is tied
    to a specific source of metrics.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，选择仪表板很容易。*Grafana* ([https://grafana.com/](https://grafana.com/))是该领域无可争议的统治者。其他解决方案太老旧，不值得费心，或者它们不支持Prometheus。这并不是说Grafana是市场上最好的工具。但价格合适（免费），并且可以与许多不同的数据源一起使用。例如，我们可以争论*Kibana*
    ([https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana))和Grafana一样好，甚至更好。但是，它仅限于来自ElasticSearch的数据。而Grafana除了可以使用来自ElasticSearch的数据外，还支持许多其他数据源。有人可能会说*DataDog*
    ([https://www.datadoghq.com/](https://www.datadoghq.com/))是一个更好的选择。但是，它遇到了与Kibana相同的问题。它与特定的指标来源绑定。
- en: There is no flexibility and no option to combine data from other data sources.
    More importantly, neither of the two supports Prometheus.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 没有灵活性，也没有组合来自其他数据源的选项。更重要的是，这两者都不支持Prometheus。
- en: I'll save you from further comparison with other tools. You can try them yourself.
    For now, you'll need to trust me that Grafana is good, if not the best choice.
    If we do not agree on that point, it will be pointless for you to read the rest
    of this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我将不再与其他工具进行比较。你可以自己尝试。目前，你需要相信我，Grafana是一个不错的选择，如果不是最好的选择。如果我们在这一点上不同意，那么你继续阅读本章将毫无意义。
- en: Now that I enforced Grafana as the choice, we'll move on and install it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我已经强制选择了Grafana，我们将继续安装它。
- en: Installing and setting up Grafana
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置Grafana
- en: You probably know what's coming next. We Google "Grafana Helm" and hope that
    the community already created a Chart we can use. I'll save you from the search
    by revealing that there is Grafana in Helm's *stable* channel. All we have to
    do is inspect the values and choose which ones we'll use.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来你可能知道发生了什么。我们谷歌搜索“Grafana Helm”，希望社区已经创建了一个我们可以使用的图表。我将为您揭示，Helm的*稳定*频道中有Grafana。我们所要做的就是检查数值并选择我们将使用的数值。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I won't go through all the values we could use. I assume that, by now, you are
    a Helm ninja and that you can explore them yourself. Instead, we'll use the values
    I already defined.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会列举我们可以使用的所有数值。我假设到现在为止，你已经是一个Helm忍者，可以自己探索它们。相反，我们将使用我已经定义的数值。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The output is as follows.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There's nothing special about those values. We enabled Ingress, we set `persistence`,
    and we defined the `resources`. As the name of the file indicates, it's a very
    bare setup without anything fluffy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数值没有什么特别之处。我们启用了Ingress，设置了`persistence`，并定义了`resources`。正如文件名所示，这是一个非常简单的设置，没有任何多余的东西。
- en: All that's left is to install the Chart.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的就是安装图表。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we can open Grafana in your favorite browser.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在您喜欢的浏览器中打开Grafana。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You are presented with the login screen. Just as with many other Helm Charts,
    the installation comes with the `admin` user and the password stored as a Secret.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到登录界面。就像许多其他Helm图表一样，安装包括`admin`用户和密码存储为一个秘密。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Please go back to the Grafana login screen, type `admin` as the username, and
    paste the output of the previous command as the password.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请返回到Grafana登录界面，输入`admin`作为用户名，并将上一个命令的输出粘贴为密码。
- en: Grafana does not collect metrics. Instead, it uses other sources of data, so
    our first action is to set Prometheus as the data source.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana不收集指标。相反，它使用其他数据源，因此我们的第一个操作是将Prometheus设置为数据源。
- en: Please click the Add data source icon.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击“添加数据源”图标。
- en: Type `Prometheus` as the Name and choose it as the Type as well. We'll let Grafana
    connect to it through the Kubernetes Service `prometheus-server`. Since both are
    in the same Namespace, the URL should be set to `http://prometheus-server`. All
    that's left is to Save & Test.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将“Prometheus”作为名称，并选择它作为类型。我们将让Grafana通过Kubernetes服务`prometheus-server`连接到它。由于两者都在同一个命名空间中，URL应设置为`http://prometheus-server`。剩下的就是保存并测试。
- en: 'The outputs and screenshots in this chapter are taken from Docker for Desktop.
    There might be slight differences between what you see here and what you can observe
    on your screen.![](assets/09055a6f-2b2f-4524-8a89-c197904d9134.png)Figure 6-1:
    Grafana''s new data source screenWe''ll have more screenshots in this chapter
    than usual. I believe that they will help you replicate the steps we''ll discuss.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的输出和截图来自Docker for Desktop。您在这里看到的内容可能与您在屏幕上观察到的内容略有不同。![](assets/09055a6f-2b2f-4524-8a89-c197904d9134.png)图6-1：Grafana的新数据源屏幕本章的截图比通常多。我相信它们将帮助您复制我们将讨论的步骤。
- en: Importing and customizing pre-made dashboards
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和自定义预制仪表板
- en: Data sources are useless by themselves. We need to visualize them somehow. We
    could do that by creating our own dashboard, but that might not be the best (and
    easiest) introduction to Grafana. Instead, we'll import one of the existing community-maintained
    dashboards. We just need to choose one that suits our needs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源本身是无用的。我们需要以某种方式将它们可视化。我们可以通过创建自己的仪表板来实现这一点，但这可能不是Grafana的最佳（也不是最简单）介绍。相反，我们将导入一个现有的社区维护的仪表板。我们只需要选择一个适合我们需求的仪表板。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Feel free to spend a bit of time exploring the available dashboards.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随意花一点时间探索可用的仪表板。
- en: I think that *Kubernetes cluster monitoring* ([https://grafana.com/dashboards/3119](https://grafana.com/dashboards/3119))
    dashboard is a good starting point. Let's import it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为*Kubernetes集群监控*（[https://grafana.com/dashboards/3119](https://grafana.com/dashboards/3119)）仪表板是一个很好的起点。让我们导入它。
- en: Please click the + icon from the left-hand menu, followed with the Import link,
    and you'll be presented with a screen that allows us to import one of the Grafana.com
    dashboards, or to paste JSON that defines it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击左侧菜单中的“+”图标，然后点击“导入”链接，您将看到一个屏幕，允许我们导入Grafana.com的仪表板之一，或者粘贴定义它的JSON。
- en: We'll go with the former option.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择前一种选项。
- en: '![](assets/1fc859c6-1c3a-4f74-9196-b1b624a8292f.png)Figure 6-2: Grafana''s
    import dashboard option'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1fc859c6-1c3a-4f74-9196-b1b624a8292f.png)图6-2：Grafana的导入仪表板选项'
- en: Please type `3119` into the *Grafana.com Dashboard* field, and click the Load
    button. You'll be presented with a few fields. The only important one, in this
    case, is the *prometheus* drop-down list. We must use it to set the data source.
    The choice is easy since we defined only one. Select Prometheus, and click the
    Import button.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请在*Grafana.com仪表板*字段中输入“3119”，然后点击“加载”按钮。您将看到一些字段。在这种情况下，唯一重要的是*prometheus*下拉列表。我们必须使用它来设置数据源。选择Prometheus，并点击“导入”按钮。
- en: What you see in front of you is a dashboard with some of the essential Kubernetes
    metrics.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您看到的是一个带有一些基本Kubernetes指标的仪表板。
- en: '![](assets/4059d071-a450-49c1-bf7e-a5ca29798723.png)Figure 6-3: Kubernetes
    cluster monitoring dashboard'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4059d071-a450-49c1-bf7e-a5ca29798723.png)图6-3：Kubernetes集群监控仪表板'
- en: However, some of the graphs might not work. Does that mean that we imported
    a wrong dashboard? A simple answer is quite the opposite. Of all the available
    dashboards, this one probably has the most graphs working. At least, if we count
    only those that are, more or less, useful. Such an outcome is common. Those dashboards
    are maintained by the community, but most of them are made for personal use. They
    are configured to work in specific clusters and to use particular metrics. You
    won't be able to find many dashboards that work without any changes and that,
    at the same time, show the things you truly need. Instead, I consider those dashboards
    a good starting point.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，一些图表可能无法正常工作。这是否意味着我们导入了错误的仪表板？一个简单的答案恰恰相反。在所有可用的仪表板中，这个可能是最有效的。至少，如果我们只计算那些更多或少有用的图表。这样的结果很常见。这些仪表板由社区维护，但其中大多数是为个人使用而制作的。它们被配置为在特定集群中工作并使用特定的指标。您将很难找到许多不经任何更改就能正常工作并且同时显示您真正需要的内容的仪表板。相反，我认为这些仪表板是一个很好的起点。
- en: I import them only to get a base that I can modify to serve my specific needs.
    That's what we're going to do next, at least partially.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是导入它们以获得一个我可以修改以满足我的特定需求的基础。这就是我们接下来要做的，至少部分地。
- en: For now, we'll focus only on the changes aimed at making it fully operational.
    We'll make some of the graphs that are currently without data operational, and
    we'll remove those that are of no use to us.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只关注旨在使其完全运行的更改。我们将使一些当前没有数据的图表运行，并删除对我们无用的图表。
- en: If we take a closer look at the *Total usage* row, we'll see that *Cluster filesystem
    usage* is *N/A*. There's probably something wrong with the metrics it's using.
    Let's take a closer look.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细看一下*总使用量*行，我们会发现*集群文件系统使用情况*是*N/A*。它使用的指标可能有问题。让我们仔细看一下。
- en: In some clusters (for example, EKS) the hard-coded file system in this dashboard
    is the correct one. If that's the case (if *Cluster filesystem usage* is not *N/A*)
    you do not have to make any changes. However, I suggest you still go through the
    exercise while imagining that your cluster uses a different file system. That
    way you'll learn a few tips that you could apply to other dashboards.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些集群中（例如，EKS），此仪表板中的硬编码文件系统是正确的。如果是这种情况（如果*集群文件系统使用情况*不是*N/A*），则您无需进行任何更改。但是，我建议您在想象您的集群使用不同文件系统的同时进行练习。这样你就可以学到一些技巧，可以应用到其他仪表板上。
- en: Please press the arrow next to the *Cluster filesystem usage* title, and click
    the Edit link.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请按下*集群文件系统使用情况*标题旁边的箭头，并单击编辑链接。
- en: '![](assets/b8db47c6-c501-49eb-a072-1fea9b62c391.png)Figure 6-4: Grafana''s
    option to edit a panel'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b8db47c6-c501-49eb-a072-1fea9b62c391.png)图6-4：Grafana编辑面板的选项'
- en: The query used by that graph (formatted for readability) is as follows.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表使用的查询（为了可读性而格式化）如下。
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We won't go into the details of that query. You should be familiar with Prometheus
    expressions by now. Instead, we'll focus on the likely cause of the issue. We
    probably do not have filesystem device called `/dev/xvda` (unless you're using
    EKS or, in some cases, GKE). If that's the problem, we can fix the Graph by simply
    changing the value to whatever our device is. But, before we go down that road,
    we might explore Grafana variables. After all, changing one hard-coded value with
    another will do us no good if we do not even know what our device is.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论该查询的细节。你现在应该熟悉Prometheus表达式。相反，我们将专注于问题的可能原因。我们可能没有名为`/dev/xvda`的文件系统设备（除非您使用EKS或在某些情况下使用GKE）。如果这是问题，我们可以通过简单地将值更改为我们的设备来修复图表。但是，在我们继续之前，我们可能会探索Grafana变量。毕竟，如果我们甚至不知道我们的设备是什么，将一个硬编码值更改为另一个值对我们毫无好处。
- en: We could go to Prometheus and retrieve the list of all the devices, or we can
    let Grafana do that for us. We'll choose the latter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以转到Prometheus并检索所有设备的列表，或者让Grafana为我们执行此操作。我们将选择后者。
- en: Take a closer look at the `kubernetes_io_hostname`. It's set to `^$Node$`. That
    is an example of using Grafana variables. We'll explore them next, in an attempt
    to replace the hard-coded device.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察`kubernetes_io_hostname`。它设置为`^$Node$`。这是使用Grafana变量的示例。接下来，我们将探讨它们，试图替换硬编码的设备。
- en: Please click the Back to dashboard button located in the top-right corner of
    the screen.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请单击位于屏幕右上角的*返回仪表板*按钮。
- en: Click the *Settings* icon located in the top of the screen. You'll be presented
    with all the dashboard-wide configurations we can change. Feel free to explore
    the options in the left-hand menu.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 单击位于屏幕顶部的*设置*图标。您将看到我们可以更改的整个仪表板范围配置。随意在左侧菜单中探索选项。
- en: Since we are interested in creating a new variable that will dynamically populate
    the `device` label of the query, our next action is to click the Variables link
    in the *Settings* section, followed with the + New button.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有兴趣创建一个新变量，该变量将动态填充查询的`device`标签，我们接下来要做的是单击*设置*部分中的变量链接，然后点击+新按钮。
- en: Please type `device` as the variable Name and `IO Device` as the Label. We will
    retrieve the values from Prometheus (the data source), so we'll leave the Type
    to Query.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请将`device`键入为变量名称，将`IO设备`键入为标签。我们将从Prometheus（数据源）检索值，因此我们将将类型保留为查询。
- en: Next, we need to specify the Data source. Select $datasource. That tells Grafana
    that we want to query data from whichever data source we selected when we imported
    the dashboard.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要指定数据源。选择$datasource。这告诉Grafana我们要从我们在导入仪表板时选择的任何数据源中查询数据。
- en: So far, everything was probably self-explanatory. What comes next isn't. We
    need to consult the documentation and learn how to write Grafana queries used
    as variable values.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切可能都是不言自明的。接下来的内容不是。我们需要查阅文档，了解如何编写用作变量值的Grafana查询。
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let this be an exercise. Find out, through the documentation, how to write a
    query that retrieves all distinct values of the label `device` available in the
    `container_fs_usage_bytes` metric.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让这成为一个练习。通过文档找出如何编写一个查询，以检索`container_fs_usage_bytes`指标中可用的`device`标签的所有不同值。
- en: Grafana supports only four types of variable queries so I suppose that you did
    not have a hard time finding out that the expression we should add to the Query
    field is `label_values(container_fs_usage_bytes, device)`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana仅支持四种类型的变量查询，因此我想您不会很难找出我们应该添加到查询字段的表达式是`label_values(container_fs_usage_bytes,
    device)`。
- en: With the query in place, all that's left is to click the Add button.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有了查询，剩下的就是单击添加按钮。
- en: '![](assets/c8cb3194-277c-4074-8c3e-6d72d9f9476e.png)Figure 6-5: Grafana''s
    screen for creating new dashboard variables'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c8cb3194-277c-4074-8c3e-6d72d9f9476e.png)图6-5：创建新仪表板变量的Grafana屏幕'
- en: Now we should go *Back to dashboard* and confirm that the new variable is available.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该返回*仪表板*并确认新变量是否可用。
- en: You should see a new drop-down list with the label *IO Device* at the top-left
    section of the screen. If you expand it, you'll see all the devices used in our
    cluster. Make sure that the correct device is selected. That is likely `/dev/sda1`
    or `/dev/xvda1`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在屏幕左上部看到一个带有标签*IO设备*的新下拉列表。如果您展开它，您将看到我们集群中使用的所有设备。确保选择正确的设备。这可能是`/dev/sda1`或`/dev/xvda1`。
- en: Next, we need to change the graph to use the variable we just created.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更改图表以使用我们刚刚创建的变量。
- en: Please click the arrow next to the *Cluster filesystem usage* graph, and select
    edit. The metric (query) contains two hard-coded `^/dev/xvda.$` values. Change
    them to `$device`, and click the Back to dashboard button located in the top-right
    corner of the screen.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击*Cluster文件系统使用情况*图表旁边的箭头，并选择编辑。指标（查询）包含两个硬编码的`^/dev/xvda.$`值。将它们更改为`$device`，然后点击屏幕右上角的*返回仪表板*按钮。
- en: That's it. The graph now works correctly by showing us the percentage of cluster
    file system usage (`/dev/sda1`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在图表通过显示集群文件系统使用情况（`/dev/sda1`）的百分比来正确工作。
- en: However, the *Used* and *Total* numbers below it are still *N/A*. I believe
    you know what to do to fix them. Edit those graphs and replace `^/dev/xvda.$`
    with `$device`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，下面的*已使用*和*总计*数字仍然是*N/A*。我相信你知道该怎么做来修复它们。编辑这些图形，并用`$device`替换`^/dev/xvda.$`。
- en: There are still two issues to solve with that dashboard. Or, to be more precise,
    two graphs are useless to us. The purpose of the *System services CPU usage* and
    *System services memory usage* graphs should be deducible from their titles. Yet,
    most Kubernetes clusters do not provide access to system-level services (for example,
    GKE). Even if they do, our Prometheus is not configured to fetch the data. If
    you don't believe me, copy the query of one of those graphs and execute it in
    Prometheus. As it is now, those graphs are only wasting space, so we'll remove
    them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该仪表板仍然有两个问题要解决。更准确地说，我们有两个图表对我们没有用。*系统服务CPU使用情况*和*系统服务内存使用情况*图表的目的应该可以从它们的标题中推断出来。然而，大多数Kubernetes集群不提供对系统级服务的访问（例如GKE）。即使提供，我们的Prometheus也没有配置来获取数据。如果你不相信我，复制其中一个图表的查询并在Prometheus中执行它。就目前而言，这些图表只是在浪费空间，所以我们将删除它们。
- en: Please click the *trash* icon next to the title of the *System services CPU
    usage* row. Click Yes to remove both the row and the panel. Repeat the same actions
    for the *System services memory usage* row.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击*系统服务CPU使用情况*行标题旁边的*垃圾桶*图标。点击是以删除该行和面板。对*系统服务内存使用情况*行执行相同的操作。
- en: Now we're done with making changes to the dashboard. It is fully operational,
    and we should persist the changes by clicking the *Save dashboard* icon in the
    top-right corner of the screen, or by pressing **CTRL+S**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了对仪表板的更改。它已经完全可操作，我们应该通过点击屏幕右上角的*保存仪表板*图标或按**CTRL+S**来保存更改。
- en: We won't go into all the Grafana options and the actions we can do. I'm sure
    that you can figure them out yourself. It is a very intuitive application. Instead,
    we'll try to create our own dashboard. Or, at least, explore a few things that
    will allow you to continue on your own.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细介绍Grafana的所有选项和我们可以做的操作。我相信你可以自己弄清楚。这是一个非常直观的应用程序。相反，我们将尝试创建自己的仪表板。或者，至少，探索一些东西，让你可以继续自己的工作。
- en: Creating custom dashboards
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义仪表板
- en: It would be great if all our needs could be covered by existing dashboards.
    But, that is probably not the case. Each organization is "special", and our needs
    have to be reflected in our dashboards. Sometimes we can get away with dashboards
    made by others, and sometimes we need to change them. In other cases, we need
    to create our own dashboards. That's what we'll explore next.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们所有的需求都可以由现有的仪表板满足，那将是很好的。但是，这可能并不是事实。每个组织都是“特殊”的，我们的需求必须反映在我们的仪表板中。有时我们可以使用他人制作的仪表板，有时我们需要对其进行更改。在其他情况下，我们需要创建自己的仪表板。这就是我们接下来要探索的内容。
- en: Please click the + icon in the left-hand menu and choose to `Create Dashboard`.
    You'll be presented with the choice of a few types of panels. Select `Graph`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击左侧菜单中的+图标，并选择`创建仪表板`。您将被提供选择几种类型的面板。选择`图形`。
- en: Before we define our first graph, we'll change a few dashboard settings. Please
    click the *Settings* icon in the top-right part of the screen.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义我们的第一个图表之前，我们将更改一些仪表板设置。请点击屏幕右上角的*设置*图标。
- en: Inside the *General* section, type the Name of the dashboard. If you are not
    inspired today, you can call it `My Dashboard`. Set the Tags to `Prometheus` and
    `Kubernetes`. You'll have to press the enter key after typing each tag. Finally,
    change the Timezone to Local browser time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在*General*部分，输入仪表板的名称。如果你今天没有灵感，你可以称它为`我的仪表板`。将标签设置为`Prometheus`和`Kubernetes`。在输入每个标签后，你需要按下回车键。最后，将时区更改为本地浏览器时间。
- en: '![](assets/61df4ee1-02ff-4141-bce7-d38c27e8c7f7.png)Figure 6-6: Grafana''s
    dashboard general settings screen'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/61df4ee1-02ff-4141-bce7-d38c27e8c7f7.png)图6-6：Grafana的仪表板常规设置屏幕'
- en: That was the boring part. Now let's switch to something more interesting. We
    are about to convert one of the alerts we created in Prometheus into a graph.
    We'll use the one that tells us the percentage of actual vs. reserved CPU. For
    that, we'll need a few variables. To be more precise, we don't really need them
    since we could hard-code the values. But, that would cause problems later on if
    we decide to change them. It is much easier to modify variables than to change
    the queries.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 那是无聊的部分。现在让我们转到更有趣的事情。我们将把我们在Prometheus中创建的警报之一转换成图表。我们将使用告诉我们实际CPU使用量与保留CPU的百分比的那个。为此，我们需要一些变量。更准确地说，我们并不真的需要它们，因为我们可以硬编码这些值。但是，如果以后决定更改它们，那将会引起问题。修改变量比更改查询要容易得多。
- en: Specifically, we'll need variables that will tell us what is the minimum CPU
    so that we can ignore the thresholds for the applications that are set to use
    very low reservations. Also, we'll define variables that will act as lower and
    upper boundaries. Our goal is to be notified if reserved CPU is too low or too
    high when compared with the actual usage, just as we did with Prometheus alerts.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们需要变量来告诉我们最小的CPU是多少，这样我们就可以忽略那些设置为使用非常低保留的应用程序的阈值。此外，我们将定义作为下限和上限的变量。我们的目标是在与实际使用相比时，如果保留的CPU太低或太高，我们会收到通知，就像我们在Prometheus警报中所做的那样。
- en: Please select the Variables section from the left-hand menu, and click the Add
    Variable button.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请从左侧菜单中选择变量部分，然后点击“添加变量”按钮。
- en: You already saw the screen with Grafana variables when we created a new one
    for the dashboard we imported. This time, however, we'll use slightly different
    settings.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为导入的仪表板创建新的变量时，你已经看到了Grafana变量的屏幕。然而，这次我们将使用略有不同的设置。
- en: Type `minCpu` as the Name and choose Constant as the Type. Unlike the `device`
    variable we created earlier, this time we do not need Grafana to query the values.
    By using that type, we are going to define a constant value. Please set the Value
    *to* `0.005` (five CPU milliseconds). Finally, we do not need to see that variable
    in the dashboard, since the value is not likely to change often. If we do need
    to change it in the future, we can always come back to this screen and update
    it. Therefore, change the Hide value to Variable.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将名称设置为`minCpu`，并选择常量作为类型。与之前创建的`device`变量不同，这次我们不需要Grafana来查询数值。通过使用这种类型，我们将定义一个常量值。请将值设置为`0.005`（五个CPU毫秒）。最后，我们不需要在仪表板中看到该变量，因为该值不太可能经常更改。如果将来需要更改它，我们总是可以回到这个屏幕并更新它。因此，将隐藏值更改为变量。
- en: All that's left is to click the Add button, twice.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只需点击两次“添加”按钮。
- en: '![](assets/e0fc3634-99c7-4fb6-9cf9-5b77aa39567f.png)Figure 6-7: Grafana''s
    dashboard new variable screen'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e0fc3634-99c7-4fb6-9cf9-5b77aa39567f.png)图6-7：Grafana的仪表板新变量屏幕'
- en: We need two more variables. There's probably no need to repeat the same instructions,
    so please use the following information to create them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要两个变量。可能没有必要重复相同的说明，所以请使用以下信息来创建它们。
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we can go back and define our graph. Please click the *Back to dashboard*
    icon from the top-right part of the screen.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以返回并定义我们的图表。请点击屏幕右上角的*返回仪表板*图标。
- en: You already know how to edit a panel. Click on the arrow next to *Panel Title*,
    and select Edit.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道如何编辑面板。点击*面板标题*旁边的箭头，然后选择编辑。
- en: We'll start with the *General* section. Please select it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从*常规*部分开始。请选择它。
- en: Next, write `% of actual vs reserved CPU` as the Title and the text that follows
    as the Description.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`%实际CPU与保留CPU`作为标题，以及后面的文本作为描述。
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Please note the usage of `$minCpu` variable in the description. When we go back
    to the dashboard, it will expand to its value.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意描述中`$minCpu`变量的使用。当我们回到仪表板时，它将展开为其值。
- en: Next, please switch to the *Metrics* tab. That's where the real action is happening.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，请切换到*指标*选项卡。那里才是真正的操作发生的地方。
- en: We can define multiple queries but, for our use case, one should be enough.
    Please type the query that follows in the field to the right of *A*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义多个查询，但对于我们的用例，一个应该就足够了。请在*A*右侧的字段中输入以下查询。
- en: For your convenience, the query is available in the `grafana-actual-vs-reserved-cpu`
    ([https://gist.github.com/vfarcic/1b027a1e2b2415e1d156687c1cf14012](https://gist.github.com/vfarcic/1b027a1e2b2415e1d156687c1cf14012))
    Gist.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，查询可在`grafana-actual-vs-reserved-cpu` ([https://gist.github.com/vfarcic/1b027a1e2b2415e1d156687c1cf14012](https://gist.github.com/vfarcic/1b027a1e2b2415e1d156687c1cf14012))
    Gist中找到。
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That query is almost the same as one of those we used in the [Chapter 3](13a73b25-73b2-4775-bd32-7945c7a25e46.xhtml),
    *Collecting and Querying Metrics and Sending Alerts*. The only difference is the
    usage of the `$minCpu` variable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询几乎与我们在[第3章](13a73b25-73b2-4775-bd32-7945c7a25e46.xhtml)中使用的查询之一几乎相同，*收集和查询指标并发送警报*。唯一的区别是使用了`$minCpu`变量。
- en: A few moments after entering the query, we should see the graph come alive.
    There is probably only one Pod included since many of our applications are defined
    to use five CPU milliseconds (the value of `$minCpu`), or less.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输入查询后的几分钟后，我们应该看到图表活跃起来。可能只包括一个Pod，因为我们的许多应用程序被定义为使用五个CPU毫秒（`$minCpu`的值）或更少。
- en: '![](assets/3a7042c2-ba76-4ad8-904d-ef3d72c99c47.png)Figure 6-8: Grafana''s
    panel based on a graph'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3a7042c2-ba76-4ad8-904d-ef3d72c99c47.png)图6-8：基于图表的Grafana面板'
- en: Next, we'll adjust the units on the left side of the graph. Please click the
    Axes tab.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将调整图表左侧的单位。请点击*轴*选项卡。
- en: Expand the *Left Y Unit*, select none, followed with percent (0.0-1.0). Since
    we're not using the *Right Y* axis, please uncheck the *Show* checkbox.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 展开*左Y单位*，选择无，然后选择百分比（0.0-1.0）。由于我们不使用*右Y*轴，请取消选中*显示*复选框。
- en: The next section in line is *Legend*. Please select it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是*图例*部分。请选择它。
- en: Check the *Options As Table*, *Options To the right*, and *Values > Current*
    checkboxes. The changes are applied to the graph immediately, and you should not
    have trouble deducing what each of those does.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选*作为表格显示*、*选项在右侧*和*值>当前*复选框。更改将立即应用到图表上，你应该不难推断出每个选项的作用。
- en: There's only one more thing missing. We should define upper and lower thresholds
    that will provide a clear indication that the results are outside expected boundaries.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 只剩下一件事。我们应该定义上限和下限阈值，以清楚地指示结果是否超出预期范围。
- en: Please click the Alert tab.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击*警报*选项卡。
- en: Click the Create Alert button and change the IS ABOVE condition to IS OUTSIDE
    RANGE. Set the values of the next two fields to `0,5` and `1,5`. That should notify
    is if the actual CPU usage is below 50% or above 150% when compared to the reserved
    value.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“创建警报”按钮，并将“高于”条件更改为“范围之外”。将下两个字段的值设置为`0,5`和`1,5`。这样，当实际CPU使用率低于50％或高于150％时，与保留值相比，应该会通知我们。
- en: '![](assets/460539bf-a465-4596-a883-26a441295b05.png)Figure 6-9: Grafana''s
    graph with alerts'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图6-9：带有警报的Grafana图表
- en: We're done with the graph, so please go *Back to dashboard* and enjoy "pretty
    colors". You might want to drag the bottom-right corner of the graph to adjust
    its size.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了图表，所以请返回到仪表板并享受“漂亮的颜色”。您可能希望拖动图表的右下角以调整其大小。
- en: We can see the difference between the requested and the actual CPU usage. We
    also have the thresholds (marked in red) that will tell us whether the usage goes
    outside the established boundaries.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到请求的CPU使用率与实际CPU使用率之间的差异。我们还有阈值（用红色标记），它将告诉我们使用情况是否超出了设定的边界。
- en: Now comes the big question. Is such a graph useful? The answer depends on what
    we're going to use it for.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在出现了一个重要问题。这样的图表有用吗？答案取决于我们打算用它做什么。
- en: If the goal is to stare at it waiting for one of the Pods to start using too
    much or too little CPU, I can only say that you're wasting your talent that can
    be used on more productive tasks. After all, we already have a similar alert in
    Prometheus that will send us a Slack notification when the criteria are met. It
    is more advanced than what we have in that graph because it will notify us only
    if the CPU usage spikes for a given period, thus avoiding temporary issues that
    might be resolved a few seconds or a few minutes later. We should discard those
    cases as false alarms.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标是盯着它，等待其中一个Pod开始使用过多或过少的CPU，我只能说您正在浪费可以用于更有生产力任务的才能。毕竟，我们已经在Prometheus中有类似的警报，当满足条件时会向我们发送Slack通知。它比我们在图表中拥有的更先进，因为它只会在CPU使用率在一定时间内激增时通知我们，从而避免可能在几秒或几分钟后解决的临时问题。我们应该将这些情况视为误报。
- en: Another usage of that graph could be more passive. We could ignore it (close
    Grafana) and come back to it only if the above mentioned Prometheus alert is fired.
    That might make more sense. Even though we could run a similar query in Prometheus
    and get the same results, having a predefined graph could save us from writing
    such a query. You can think of it as a way to have a query registry with corresponding
    graphical representations. That is something that does make more sense. Instead
    of staring at the dashboard (choose Netflix instead), we can come back to it in
    time of need. While in some situations that might be a reasonable strategy, it
    will work only in very simple cases. When there is an issue, and a single pre-defined
    graph solves the problem or, to be more precise, provides a clear indication of
    the cause of the issue, graphs do provide significant value. However, more often
    than not, finding the cause of a problem is not that simple and we'll have to
    turn to Prometheus to start digging deeper into metrics.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该图的另一个用途可能更为被动。我们可以忽略它（关闭Grafana），只有在上述Prometheus警报触发时才回来。这可能更有意义。尽管我们可以在Prometheus中运行类似的查询并获得相同的结果，但具有预定义图表可以使我们免于编写这样的查询。您可以将其视为具有相应图形表示的查询注册表。这是更有意义的事情。与盯着仪表板（选择Netflix）相比，我们可以在需要时回来。虽然在某些情况下这可能是一个合理的策略，但它只在非常简单的情况下起作用。当出现问题时，一个单独的预定义图表解决问题或更准确地说是提供问题原因的明确指示时，图表确实提供了重要价值。然而，往往情况并不那么简单，我们将不得不求助于Prometheus来深入挖掘指标。
- en: Looking at dashboards with graphs is a waste of time. Visiting dashboards after
    receiving a notification about an issue makes a bit more sense. Still, all but
    trivial problems require deeper digging through Prometheus metrics.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 盯着有图表的仪表板是浪费时间。在收到有关问题的通知后访问仪表板可能更有些意义。但是，除了琐碎的问题，其他问题都需要通过 Prometheus 指标进行更深入的挖掘。
- en: Never the less, the graph we just made might prove itself useful, so we'll keep
    it. What we might want to do, in such a case, is to change the link of the Prometheus
    alert (the one we're currently receiving in Slack) so that it takes us directly
    to the Graph (not the dashboard). We can get that link by clicking the arrow next
    to the panel name, and choosing the View option.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们刚刚制作的图表可能会证明自己是有用的，所以我们会保留它。在这种情况下，我们可能想要做的是更改 Prometheus 警报的链接（我们目前在
    Slack 上收到的警报），以便它直接带我们到图表（而不是仪表板）。我们可以通过单击面板名称旁边的箭头，并选择“查看”选项来获取该链接。
- en: I believe that we can make our dashboard more useful if we change the type of
    panels from graphs to something less colorful, with fewer lines, fewer axes, and
    without other pretty things.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信，如果我们将面板类型从图表更改为更少颜色、更少线条、更少坐标轴和没有其他漂亮东西的类型，我们的仪表板可以变得更有用。
- en: Creating semaphore dashboards
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建信号量仪表板
- en: If I'm claiming that the value dashboards bring to the table is lower than we
    think, you might be asking yourself the same question from the beginning of this
    chapter. Why are we talking about dashboards? Well, I already changed my statement
    from "dashboards are useless" to "there is some value in dashboards". They can
    serve as a registry for queries. Through dashboards, we do not need to memorize
    expressions that we would need to write in Prometheus. They might be a good starting
    point of our search for the cause of an issue before we jump into Prometheus for
    some deeper digging into metrics. But, there is another reason I am including
    dashboards into the solution.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我声称仪表板为我们带来的价值比我们想象的要低，你可能会问自己这一章开头的同样问题。为什么我们要谈论仪表板？嗯，我已经改变了我的说法，从“仪表板是无用的”变成了“仪表板中有一些价值”。它们可以作为查询的注册表。通过仪表板，我们不需要记住我们需要在
    Prometheus 中编写的表达式。在我们深入挖掘指标之前，它们可能是我们寻找问题原因的一个很好的起点。但是，我包括仪表板在解决方案中还有另一个原因。
- en: I love big displays. It's very satisfying to enter into a room with large screens
    showing stuff that seem to be important. There is usually a room where operators
    sit surrounded with monitors on all four walls. That's usually an impressive sight.
    However, there is a problem with many such situations. A bunch of monitors displaying
    a lot of graphs might not amount to much more than a pretty sight. After the initial
    few days, nobody will stare at graphs. If that's not true, you can just as well
    fire that person knowing that he was faking his work.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢大屏幕。走进一个有大屏幕显示重要内容的房间是非常令人满意的。通常有一个房间，操作员坐在四面墙上都是显示器的环境中。那通常是一个令人印象深刻的景象。然而，许多这样的情况存在问题。一堆显示很多图表的监视器可能并不比漂亮的景象更有意义。最初的几天过后，没有人会盯着图表看。如果这不是真的，你也可以解雇那个人，因为他是在假装工作。
- en: Let me repeat it one more time.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再重复一遍。
- en: Dashboards are not designed for us to stare at them, especially not when they
    are on big screens where everyone can see them.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板并不是为了我们盯着它们而设计的，尤其是当它们在所有人都能看到的大屏幕上时。
- en: So, if it's a good idea to have big screens, but graphs are not a good candidate
    to decorate them, what should we do instead? The answer lies in semaphores. They
    are similar to alerts, and they should provide a clear indication of the status
    of the system. If everything on the screen is green, there is no reason for us
    to do anything. One of them turning red is a cue that we should do something to
    correct the problem. Therefore, it is imperative that we try to avoid false positives.
    If something turns red, and that does not require any action, we are likely to
    start ignoring it in the future. When that happens, we are risking the situation
    in which when we ignore a real issue, thinking that it is just another false positive.
    Hence, every appearance of an alarm should be followed by an action.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果拥有大屏幕是一个好主意，但图形不是一个好的装饰候选，那么我们应该做什么呢？答案就在于信号量。它们类似于警报，应该清晰地指示系统的状态。如果屏幕上的一切都是绿色的，我们就没有理由做任何事情。其中一个变成红色是一个提示，我们应该做一些事情来纠正问题。因此，我们必须尽量避免误报。如果某事变成红色，而不需要任何行动，我们很可能在将来开始忽视它。当这种情况发生时，我们冒着忽视一个真正问题的风险，认为它只是另一个误报。因此，每次出现警报都应该跟随着一个行动。
- en: That can be either a fix that will correct the system or a change in the conditions
    that turned one of the semaphores red. In either case, we should not ignore it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以是纠正系统的修复措施，也可以是改变导致其中一个信号量变红的条件。无论哪种情况，我们都不应该忽视它。
- en: The main problem with semaphores is that they are not as appealing to CTOs and
    other decision makers. They are not colorful, nor do they show a lot of boxes,
    lines, and numbers. People often confuse usefulness with how pleasing something
    is to look at. Never the less, we are not building something that should be sold
    to CTOs, but something that can be helpful in our day-to-day work.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 信号量的主要问题在于它们对CTO和其他决策者来说并不那么吸引人。它们既不丰富多彩，也不显示很多框、线和数字。人们经常将有用性与外观上的吸引力混淆。尽管如此，我们并不是在建造应该出售给CTO的东西，而是在建造可以帮助我们日常工作的东西。
- en: Semaphores are much more useful than graphs as a way to see the status of the
    system, even though they do not look as colorful and eye-pleasing as graphs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 与图形相比，信号量作为查看系统状态的一种方式要更有用得多，尽管它们看起来不像图形那样丰富多彩和令人愉悦。
- en: Let's create our first semaphore.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个信号量。
- en: Please click the *Add panel* icon from the top-right part of the screen, and
    select Singlestat. Click the arrow icon next to the *Panel Title*, and select
    Edit.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击屏幕右上角的*添加面板*图标，并选择Singlestat。点击*面板标题*旁边的箭头图标，然后选择编辑。
- en: For the most part, creating a single stat (a semaphore) is not much different
    from creating a graph. The significant difference is in the metric (query) that
    should produce a single value. We'll get there soon. For now, we'll change some
    general info of the panel.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，创建一个单一的状态（信号量）与创建一个图形并没有太大的不同。显著的区别在于应该产生一个单一值的度量（查询）。我们很快就会到达那里。现在，我们将改变面板的一些一般信息。
- en: Please select the General tab.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请选中“常规”选项卡。
- en: Type `Pods with <$cpuReqPercentMin%||>$cpuReqPercentMax% actual compared to
    reserved CPU` as the Title and the text that follows as the Description.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Pods with <$cpuReqPercentMin%||>$cpuReqPercentMax% actual compared to reserved
    CPU`输入为标题，然后输入后面的文本为描述。
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This single stat will use a similar query as the graph we made earlier. However,
    while the graph is displaying current usage compared to reserved CPU, this panel
    is supposed to show how many Pods have actual CPU usage outside of the boundaries
    based on reserved CPU. That is reflected in the title and the description we just
    entered. As you can see, this time we're relying on more variables to formulate
    our intentions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单一统计将使用与我们之前制作的图表类似的查询。然而，虽然图表显示当前使用量与保留CPU相比，但该面板应该显示有多少个Pod的实际CPU使用量超出了基于保留CPU的边界。这反映在我们刚刚输入的标题和描述中。正如您所看到的，这一次我们依赖更多的变量来表达我们的意图。
- en: Now, let's turn our attention to the query. Please click the Metrics tab and
    type the expression that follows into the field next to *A*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把注意力转向查询。请单击“指标”选项卡，并将以下表达式输入到* A *旁边的字段中。
- en: For your convenience, the query is available in the `grafana-single-stat-actual-vs-reserved-cpu`
    ([https://gist.github.com/vfarcic/078674efd3b379c211c4da2c9844f5bd](https://gist.github.com/vfarcic/078674efd3b379c211c4da2c9844f5bd))
    Gist.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了您的方便，该查询可在`grafana-single-stat-actual-vs-reserved-cpu` ([https://gist.github.com/vfarcic/078674efd3b379c211c4da2c9844f5bd](https://gist.github.com/vfarcic/078674efd3b379c211c4da2c9844f5bd))
    Gist中找到。
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That query is similar to one of those we used as the Prometheus alert. To be
    more precise, it is a combination of the two Prometheus alerts. The first half
    returns the number of Pods with more than `$minCpu` (5 CPU milliseconds) of reserved
    CPU and with actual CPU usage lower than `$cpuReqPercentMin` (50%). The second
    half is almost the same as the first, except that it returns Pods with CPU usage
    higher than `$cpuReqPercentMax` (150%).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 该查询类似于我们用作Prometheus警报的查询之一。更准确地说，它是两个Prometheus警报的组合。前半部分返回具有超过`$minCpu`（5
    CPU毫秒）的保留CPU和实际CPU使用低于`$cpuReqPercentMin`（50%）的Pod数量。后半部分与第一部分几乎相同，只是返回CPU使用高于`$cpuReqPercentMax`（150%）的Pod。
- en: Since our goal is to return a single stat which, in this case, is the number
    of Pods, you might be surprised that we used `sum` instead of `count`. Counting
    Pods would indeed make more sense, except that would return `N/A` if there are
    no results. To avoid that, we're using a trick with `bool`. By putting it in front
    of an expression, it returns `1` if there is a match, and `0` if there isn't.
    That way, if none of the Pods match the conditions, we won't get an empty result,
    but `0`, which is a better representation of the number of problematic Pods.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的目标是返回一个单一的统计数据，即Pod的数量，在这种情况下，您可能会感到惊讶，我们使用了`sum`而不是`count`。统计Pod的数量确实更有意义，但如果没有结果，将返回`N/A`。为了避免这种情况，我们使用了`bool`的技巧。通过将其放在表达式前面，如果有匹配，则返回`1`，如果没有，则返回`0`。这样，如果没有Pod符合条件，我们不会得到空结果，而是得到`0`，这更好地表示有问题的Pod的数量。
- en: All in all, we are retrieving a sum of all the Pods with the actual CPU below
    `$cpuReqPercentMin` (50%) of the reserved CPU, plus the sum of all the Pods with
    the actual CPU above `$cpuReqPercentMax` (150%) of the reserved CPU. In both cases,
    only the Pods with more than `$minCpu` (five CPU milliseconds) are included. The
    query itself is not the simplest one we could write but, considering that we already
    spent a lot of time with Prometheus queries, I thought that I should not "insult"
    you with something trivial.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们正在检索所有实际CPU低于保留CPU的`$cpuReqPercentMin`（50%）的Pod的总和，以及所有实际CPU高于保留CPU的`$cpuReqPercentMax`（150%）的Pod的总和。在这两种情况下，只有超过`$minCpu`（五个CPU毫秒）的Pod被包括在内。查询本身并不是我们可以编写的最简单的查询，但考虑到我们已经花了很多时间处理Prometheus查询，我认为我不应该用一些琐碎的东西“侮辱”您。
- en: Next, please click the Options tab. That is where we'll define the conditions
    that should trigger the change of colors.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，请单击“选项”选项卡。这是我们将定义应触发颜色变化的条件的地方。
- en: We do NOT want average value over the specified period, but the current number
    of problematic Pods. We'll accomplish that by changing the value of the Stat drop-down
    list to Current.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想要在指定周期内的平均值，而是有问题的Pods的当前数量。我们将通过将Stat下拉列表的值更改为Current来实现这一点。
- en: We want this panel to be very visible, so we'll change the Stat Font size to
    `200%`. I'd prefer even bigger font, but Grafana does not allow us to go higher
    than that.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这个面板非常显眼，所以我们将将Stat字体大小更改为`200%`。我更喜欢更大的字体，但是Grafana不允许我们超过这个值。
- en: Next, we want to change the background color of the panel, so please check the
    Coloring Background checkbox.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要更改面板的背景颜色，请勾选Coloring Background复选框。
- en: We could use up to three colors, but I believe that we need only two. Either
    one or more of the Pods meet the conditions, or none of them do.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最多可以使用三种颜色，但我相信我们只需要两种。要么一个或多个Pod符合条件，要么没有一个符合条件。
- en: We should be notified as soon as the query returns `1`, or a higher number.
    Please type `1` as the Coloring Thresholds. If we had more, we'd separate them
    with commas.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦查询返回`1`或更高的数字，我们应该立即收到通知。请将`1`键入为Coloring Thresholds。如果我们有更多，我们将用逗号分隔它们。
- en: Finally, since we have only two conditions, green and red, we'll need to change
    the second color from orange to red. Please click the *red* icon in Coloring Colors,
    and replace the value with the word *red*. The third color is not used, so we'll
    leave it intact.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于我们只有两个条件，绿色和红色，我们需要将第二个颜色从橙色更改为红色。请点击Coloring Colors中的*red*图标，并将值替换为单词*red*。第三种颜色没有使用，所以我们将保持不变。
- en: '![](assets/23e5659a-1dbc-440a-9d53-13f57bb1eeea.png)Figure 6-10: Grafana''s
    single stat panel'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/23e5659a-1dbc-440a-9d53-13f57bb1eeea.png)图6-10：Grafana的单个统计面板'
- en: We're finished with our panel, so go *Back to dashboard*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了我们的面板，所以返回*仪表板*。
- en: Before we proceed, please click the *Save Dashboard* icon, followed with the
    Save button.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请点击*保存仪表板*图标，然后点击保存按钮。
- en: So far, we created a dashboard with a graph and a single stat (semaphore). The
    former shows the deviation of CPU usage compared to reserved CPU over time. It
    has alerts (red areas) that tell us whether one of the vectors is outside predefined
    boundaries. The single stat (semaphore) shows a single number with green or red
    background depending on whether that number reached a threshold which, in our
    case, is set to `1`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们创建了一个带有图形和单个统计（信号量）的仪表板。前者显示了CPU使用率与保留CPU随时间的偏差。它有警报（红色区域），告诉我们一个向量是否超出了预定义的边界。单个统计（信号量）显示一个数字，具有绿色或红色的背景，具体取决于该数字是否达到了阈值，而在我们的情况下，阈值设置为`1`。
- en: We just started, and we need many other panels before this dashboard becomes
    useful. I'll save you from repetitive instructions for defining the others. I
    feel that you got a grip on how Grafana works. You should, at least, have the
    base knowledge that you can expand on your own.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚开始，还需要在此仪表板变得有用之前添加许多其他面板。我会免去您定义其他面板的重复指令。我觉得您已经掌握了Grafana的工作原理。至少，您应该具备可以自行扩展的基础知识。
- en: We'll fast forward. We'll import a dashboard I prepared and discuss the design
    choices.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将快进。我们将导入我准备好的仪表板并讨论设计选择。
- en: A better dashboard for big screens
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更适合大屏幕的仪表板
- en: We explored how to create a dashboard with a graph and a single stat (semaphore).
    Both are based on similar queries, and the significant difference is in the way
    they display the results. We'll assume that the primary purpose of the dashboard
    we started building is to be available on a big screen, visible to many, and not
    as something we keep open on our laptops. At least, not continuously.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何创建一个带有图形和单个统计（信号量）的仪表板。两者都基于类似的查询，显著的区别在于它们显示结果的方式。我们将假设我们开始构建的仪表板的主要目的是在大屏幕上可用，对许多人可见，并不是作为我们在笔记本电脑上持续保持打开的东西。至少，不是持续的。
- en: What should be the primary purpose of such a dashboard? Before I answer that
    question, we'll import a dashboard I created for this chapter.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的仪表板的主要目的应该是什么？在我回答这个问题之前，我们将导入我为本章创建的一个仪表板。
- en: Please click the + button from the left-hand menu and select Import. Type `9132`
    as the *Grafana.com Dashboard* and press the Load button. Select a *Prometheus
    data source*. Feel free to change any of the values to suit your needs. Never
    the less, you might want to postpone that until you get more familiar with the
    dashboard.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 请从左侧菜单中单击+按钮，然后选择导入。在*Grafana.com仪表板*中键入`9132`，然后按加载按钮。选择*Prometheus数据源*。随时更改任何值以满足您的需求。尽管如此，您可能希望在更熟悉仪表板之后再进行更改。
- en: In any case, click the Import button once you're finished.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，完成后点击导入按钮。
- en: '![](assets/a5120c4e-3ecd-4fb2-8080-840bc9cfa513.png)Figure 6-11: Grafana dashboard
    based on semaphores'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a5120c4e-3ecd-4fb2-8080-840bc9cfa513.png)图6-11：基于信号的Grafana仪表板'
- en: You are likely to see one or more red semaphores. That's normal since some of
    the resources in our cluster are not configured properly. For example, Prometheus
    is likely to have less memory requested than it needs. That's OK because it allows
    us to see the dashboard in action. The definitions used in the Gists are not supposed
    to be production-ready, and you already know that you have to adjust their resources,
    and likely a few other things.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会看到一个或多个红色的信号。这是正常的，因为我们集群中的一些资源配置不正确。例如，Prometheus可能请求的内存比它实际需要的要少。这没关系，因为它可以让我们看到仪表板的运行情况。Gists中使用的定义不应该是生产就绪的，您已经知道您需要调整它们的资源，以及可能还有其他一些东西。
- en: You'll notice that the dashboard we imported consists only of semaphores. At
    least, on the first look. Even though they might not be as appealing as graphs
    and other types of panels, they are much more effective as indicators of the health
    of our system. We do not need to look at that dashboard. It's enough if it's displayed
    on a big screen, while we work on something else. If one of the boxes turns red,
    we'll notice that. It will be a call to action. Or, to be more precise, we'll
    need to do something if a red box continues being red for longer, thus excluding
    the possibility that it's a false positive that will be resolved by itself after
    a few moments.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们导入的仪表板只包含信号。至少在第一次看时是这样。尽管它们可能不像图形和其他类型的面板那样吸引人，但它们作为系统健康的指标要更有效得多。我们不需要一直看着那个仪表板。只要它显示在大屏幕上，我们就可以在做其他事情的同时工作。如果其中一个方框变成红色，我们会注意到。这将是一个行动的呼唤。或者更准确地说，如果一个红色的方框持续保持红色，排除了它是一个自行解决的错误警报的可能性，我们将需要采取一些行动。
- en: You can think of this dashboard as a supplement to Prometheus alerts. It does
    not replace them, since there are some subtle, yet significant differences we'll
    discuss later.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将此仪表板视为Prometheus警报的补充。它并不取代它们，因为我们将在稍后讨论一些微妙但重要的区别。
- en: I won't describe each of the panels since they are a reflection of the Prometheus
    alerts we created earlier. You should be familiar with them by now. If in doubt,
    please click on the i icon in the top-left corner of a panel. If the description
    is not enough, enter the panel's edit mode and check the query and the coloring
    options.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会描述每个面板，因为它们是我们之前创建的Prometheus警报的反映。您现在应该对它们很熟悉。如果有疑问，请单击面板左上角的i图标。如果描述不够，请进入面板的编辑模式，检查查询和着色选项。
- en: Please note that the dashboard might not be the perfect fit as-is. You might
    need to change some of the variable values or the coloring thresholds. For example,
    the threshold of the *Nodes* panel is set to `4,5`. Judging by the colors, we
    can see that it'll turn orange (warning) if the number of nodes jumps to four,
    and red (panic) if it goes to five. Your values are likely to be different. Ideally,
    we should use variables instead of hard-coded thresholds, but that is currently
    not possible with Grafana. Variables are not supported everywhere. You, as a supporter
    of open source projects, should make a PR. Please let me know if you do.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，仪表板可能不是完美的。您可能需要更改一些变量值或着色阈值。例如，*节点* 面板的阈值设置为 `4,5`。从颜色来看，我们可以看到如果节点数跳到四个，它会变成橙色（警告），如果变成五个，就会变成红色（恐慌）。您的值可能会有所不同。理想情况下，我们应该使用变量而不是硬编码的阈值，但目前在Grafana中还不可能。变量并非在所有地方都受支持。作为开源项目的支持者，您应该提交PR。如果您这样做了，请告诉我。
- en: Does all that mean that all our dashboards should be green and red boxes with
    a single number inside them? I do believe that semaphores should be the "default"
    display. When they are green, there's no need for anything else. If that's not
    the case, we should extend the number of semaphores, instead of cluttering our
    monitors with random graphs. However, that begs the question. What should we do
    when some of the boxes turn red or even orange?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着我们所有的仪表板都应该是绿色和红色的框，里面只有一个数字？我确实认为信号灯应该是“默认”显示。当它们是绿色时，就不需要其他任何东西。如果不是这种情况，我们应该增加信号灯的数量，而不是用随机图表来混乱我们的监视器。然而，这就引出了一个问题。当一些框变成红色甚至橙色时，我们该怎么办？
- en: Below the boxes, you'll find the *Graph* row with additional panels. They are
    not visible by default for a reason.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在框下面，您会找到*图表* 行，带有额外的面板。它们默认情况下是不可见的，有其原因。
- en: There is no justification for seeing them under normal circumstances. But, if
    one of the semaphores does raise an alert, we can expand *Graphs* and see more
    details about the issue.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，看到它们是没有理由的。但是，如果其中一个信号灯发出警报，我们可以展开*图表*，看到有关问题的更多细节。
- en: '![](assets/c5d02e39-5bfa-48fb-ab27-4f8cdb1b7741.png)Figure 6-12: Grafana dashboard
    based on tables and graphs'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c5d02e39-5bfa-48fb-ab27-4f8cdb1b7741.png)图6-12：基于表格和图表的Grafana仪表板'
- en: The panels inside the *Graphs* row are a reflection of the panels (semaphores)
    in the *Alerts* row. Each graph shows more detailed data related to the single
    stat from the same location (but a different row). That way, we do not need to
    waste our time trying to figure out which graph corresponds to the "red box".
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '*图表* 行内的面板是对*警报* 行内的面板（信号灯）的反映。每个图表显示了与相同位置的单个统计数据相关的更详细的数据（但是不同的行）。这样，我们就不需要浪费时间来弄清哪个图表对应于“红色框”。'
- en: Instead, we can jump straight into the corresponding graph. If the semaphore
    on in the second row on the right turns red, look at the graphs in the second
    row on the right. If multiple boxes turn red, we can take a quick look at related
    graphs and try to find the relation (if there is any). More often than not, we'll
    have to switch from Grafana to Prometheus and dig deeper into metrics.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以直接跳转到相应的图表。如果右侧第二行的信号灯变成红色，就看右侧第二行的图表。如果多个框变成红色，我们可以快速查看相关的图表，并尝试找到关联（如果有的话）。往往情况下，我们将不得不从Grafana切换到Prometheus，并深入挖掘指标。
- en: Dashboards like the one in front of you should give us a quick head start towards
    the resolution of an issue. The semaphores on the top provide alerting mechanism
    that should lead to the graphs below that should give a quick indication of the
    possible causes of the problem. From there on, if the cause is an obvious one,
    we can move to Prometheus and start debugging (if that's the right word).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 像你面前的这个仪表板应该让我们快速启动解决问题。顶部的信号灯提供了警报机制，应该导致下面的图表快速指示出问题的可能原因。从那里开始，如果原因很明显，我们可以转到Prometheus并开始调试（如果这个词用得对的话）。
- en: Dashboards with semaphores should be displayed on big screens around the office.
    They should provide an indication of a problem. Corresponding graphs (and other
    panels) provide a first look at the issue. Prometheus serves as the debugging
    tool we use to dig into metrics until we find the culprit.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 带有信号灯的仪表板应该显示在办公室周围的大屏幕上。它们应该提供问题的指示。相应的图表（和其他面板）提供了对问题的第一印象。Prometheus作为我们用来挖掘指标直到找到罪魁祸首的调试工具。
- en: We explored a few things that provide similar functionality. Still, it might
    not be clear what the difference between Prometheus alerts, semaphores, graph
    alerts, and Grafana notifications is? Why didn't we create any Grafana notification?
    We'll explore those and a few other questions next.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了一些提供类似功能的东西。但是，Prometheus警报、信号灯、图表警报和Grafana通知之间的区别可能并不清楚？为什么我们没有创建任何Grafana通知？我们将在接下来探讨这些问题以及其他一些问题。
- en: Prometheus alerts vs. Grafana notifications vs. semaphores vs. graph alerts
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prometheus警报 vs. Grafana通知 vs. 信号灯 vs. 图表警报
- en: The title might be confusing by itself, so let us briefly describe each of the
    elements mentioned in it.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 标题本身可能会让人感到困惑，所以让我们简要描述一下其中提到的每个元素。
- en: Prometheus alerts and Grafana notifications serve the same purpose, even though
    we did not explore the latter. I'll let you learn how Grafana notifications work
    on your own. Who knows? After the discussion that follows you might not even want
    to spend time with them.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus警报和Grafana通知具有相同的目的，尽管我们没有探讨后者。我会让你自己学习Grafana通知的工作原理。谁知道呢？在接下来的讨论之后，你可能甚至不想花时间去了解它们。
- en: Grafana notifications can be forwarded to different recipients in a similar
    manner as how Prometheus' alerts are forwarded with Alertmanager. However, there
    are a few things that make Grafana notifications less appealing.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana通知可以以与Prometheus的警报转发方式类似的方式转发给不同的接收者。然而，有一些事情使Grafana通知变得不那么吸引人。
- en: If we can accomplish the same result with Prometheus alerts as with Grafana
    alerts, there is a clear advantage with the former. If an alert is fired from
    Prometheus, that means that the rules that caused the alert to fire are also defined
    in Prometheus.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以通过Prometheus警报实现与Grafana警报相同的结果，那么前者就具有明显的优势。如果从Prometheus触发了警报，那意味着导致触发警报的规则也在Prometheus中定义。
- en: As a result, evaluations are happening at the data source, and we are avoiding
    unnecessary latency between Grafana and Prometheus. The closer we are to the data
    source, the better. In case of alerts/notifications, closer means inside Prometheus.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，评估是在数据源处进行的，我们避免了Grafana和Prometheus之间不必要的延迟。我们离数据源越近越好。在警报/通知的情况下，更近意味着在Prometheus内部。
- en: Another advantage for defining alerts in Prometheus is the fact that it allows
    us to do more. For example, there is no equivalent to Prometheus' `for` statement
    in Grafana. We cannot define a notification that will fire only if the conditions
    persist for a while. We'd need to resort to non-trivial additions to the queries
    to accomplish the same. Alertmanager, on the other hand, provides more sophisticated
    ways to filter the alerts, to group them, and to forward only those that match
    certain criteria. There are many other advantages to defining alerts in Prometheus
    and Alertmanager instead of notifications in Grafana. But, we won't go into all
    of them. I'll leave it to you to find all the differences unless you are already
    convinced to ditch Grafana notifications in favor of Prometheus alerts and Alertmanager.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在Prometheus中定义警报的另一个优势是它允许我们做更多的事情。例如，在Grafana中没有与Prometheus的`for`语句相当的东西。我们无法定义一个只有在条件持续一段时间后才触发的通知。我们需要通过对查询进行非平凡的添加来实现相同的功能。另一方面，Alertmanager提供了更复杂的方法来过滤警报，对其进行分组，并仅转发符合特定条件的警报。在Prometheus和Alertmanager中定义警报而不是在Grafana中定义通知还有许多其他优点。但我们不会详细讨论所有这些优点。我会留给你去发现所有的区别，除非你已经被说服放弃Grafana通知，转而使用Prometheus警报和Alertmanager。
- en: There is one important reason why you shouldn't dismiss Grafana notifications
    completely. The data source you're using might not have alerting/notifications
    mechanism, or it might be part of enterprise license you do not possess. Since
    Grafana supports many different data sources, with Prometheus being only one of
    them, Grafana notifications allow us to use any of those data sources, or even
    to combine them.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个重要的原因你不应该完全忽视Grafana通知。你使用的数据源可能没有警报/通知机制，或者它可能是你没有拥有的企业许可证的一部分。由于Grafana支持许多不同的数据源，其中Prometheus只是其中之一，Grafana通知允许我们使用任何这些数据源，甚至将它们组合在一起。
- en: Stick with Prometheus for alerts/notifications based on metrics stored there.
    For other data sources, Grafana alerts might be a better or even the only option.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 基于存储在那里的指标，坚持使用Prometheus进行警报/通知。对于其他数据源，Grafana警报可能是更好的选择，甚至是唯一的选择。
- en: Now that we briefly explored the differences between Prometheus alerts and Grafana
    notifications, we'll move into semaphores.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们简要探讨了Prometheus警报和Grafana通知之间的区别，我们将进入信号量。
- en: Semaphores (Grafana dashboards based on single stat panels) do not replace Prometheus
    alerts. First of all, it is hard, or even impossible, to create semaphores that
    turn red only if a value reaches a threshold for some time (for example, like
    the `for` statement in Prometheus alerts). That means that a semaphore might turn
    red, only to go back to green a few moments later. That is not a cause for action
    since the problem was resolved automatically short while later. If we would jump
    every time something turns red in Grafana, we'd be in excellent physical shape,
    but we wouldn't do much useful work.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 信号量（基于单个状态面板的Grafana仪表板）不能取代Prometheus警报。首先，很难，甚至不可能，创建只有在值达到某个阈值一段时间后才变红的信号量（例如，就像Prometheus警报中的`for`语句）。这意味着信号量可能会变红，只是在几分钟后又变回绿色。这并不是一个需要采取行动的原因，因为问题在短时间内会自动解决。如果我们每次在Grafana中看到红色就跳起来，我们可能会身体非常健康，但我们不会做太多有用的工作。
- en: Semaphores are an indication of a possible problem that might not require any
    intervention. While such false positives should be avoided, it's almost impossible
    to get rid of them altogether. That means that we should stare at the screen to
    see whether a red box continues being red for at least a few minutes before we
    act. The primary purpose of semaphores is not to provide a notification to a person
    or a team that should fix the issue. Notifications to Slack, email, and other
    destinations do that. Semaphores provide awareness of the state of the system.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 信号量是可能存在问题的指示，可能不需要任何干预。虽然应该避免这种错误的积极性，但要完全摆脱它们几乎是不可能的。这意味着我们应该盯着屏幕看，看看红色的方框是否在我们采取行动之前至少持续几分钟。信号量的主要目的不是向个人或团队提供通知，告诉他们应该解决问题。Slack、电子邮件和其他目的地的通知会做到这一点。信号量提供了对系统状态的认识。
- en: Finally, we explored alerts defined on graphs. Those are the red lines and zones
    in the graphs. They are not good indicators that there is something wrong. They
    are not that easy to spot so they cannot raise awareness, and they definitely
    do not replace notifications. Instead, they help us after we discover that there
    is an issue. If a notification or a semaphore alerts us that there is a problem
    that might need to be fixed, graph alerts help us identify the culprit. Which
    Pod is in the red zone? Which ingress received more requests than expected? Those
    are only a few questions that we can answer through graph alerts.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了在图表上定义的警报。这些是图表中的红线和区域。它们并不是表明出现问题的良好指标。它们并不容易被发现，因此不能引起注意，而且绝对不能取代通知。相反，它们在我们发现存在问题后帮助我们。如果通知或信号量警告我们存在可能需要解决的问题，图表警报将帮助我们确定罪魁祸首。哪个Pod处于红色区域？哪个入口收到的请求超出了预期？这些只是我们可以通过图表警报回答的一些问题。
- en: What now?
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在呢？
- en: Grafana is relatively simple to use and intuitive. If you know how to write
    queries for the data source hooked to Grafana (for example, Prometheus), you already
    learned the most challenging part. The rest is mostly about checking boxes, choosing
    panel types, and arranging things on the screen. The main difficulty is to avoid
    being carried away by creating a bunch of flashy dashboards that do not provide
    much value. A common mistake is to create a graph for everything we can imagine.
    That only reduces the value of those that are truly important. Less is often more.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana相对简单易用。如果您知道如何为连接到Grafana的数据源（例如Prometheus）编写查询，那么您已经学会了最具挑战性的部分。其余部分大多是勾选框、选择面板类型和在屏幕上排列事物。主要困难在于避免被创建一堆没有太多价值的花哨仪表板所带走。一个常见的错误是为我们能想象到的一切创建图表。这只会降低那些真正重要的价值。少即是多。
- en: That's it. Destroy the cluster if its dedicated to this book, or keep it if
    it's not or if you're planning to jump to the next chapter right away. If you're
    keeping it, please delete the `grafana` Chart by executing the command that follows.
    If we need it in one of the next chapters, I'll make sure that it's included in
    the Gists.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。如果集群专门用于本书，请销毁它；如果不是，或者您打算立即跳到下一章，那就保留它。如果要保留它，请通过执行以下命令删除`grafana`图表。如果我们在接下来的章节中需要它，我会确保它包含在Gists中。
- en: '[PRE15]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Before you leave, you might want to go over the main points of this chapter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在离开之前，您可能希望复习本章的要点。
- en: Looking at dashboards with graphs is a waste of time. Visiting dashboards after
    receiving a notification about an issue makes a bit more sense. Still, all but
    trivial problems require deeper digging through Prometheus metrics.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看带有图形的仪表板是浪费时间。在收到有关问题的通知后访问仪表板会更有意义一些。但是，除了琐碎的问题，其他问题都需要通过Prometheus指标进行更深入的挖掘。
- en: Dashboards are not designed for us to stare at them, especially not when they
    are on big screens where everyone can see them.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表板并不是为了我们盯着它们看而设计的，尤其是当它们显示在大屏幕上，所有人都能看到时。
- en: Semaphores are much more useful than graphs as a way to see the status of the
    system, even though they do not look as colorful and eye-pleasing as graphs.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号灯比图表更有用，作为查看系统状态的一种方式，尽管它们看起来没有图表那么丰富多彩和令人愉悦。
- en: Dashboards with semaphores should be displayed on big screens around the office.
    They should provide an indication of a problem. Corresponding graphs (and other
    panels) provide a first look at the issue. Prometheus serves as the debugging
    tool we use to dig into metrics until we find the culprit.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有信号灯的仪表板应该显示在办公室周围的大屏幕上。它们应该提供问题的指示。相应的图表（和其他面板）提供了对问题的第一印象。Prometheus作为我们用来深入挖掘指标直到找到罪魁祸首的调试工具。
- en: Stick with Prometheus for alerts/notifications based on metrics stored there.
    For other data sources, Grafana alerts might be a better or even the only option.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于基于存储在那里的指标的警报/通知，坚持使用Prometheus。对于其他数据源，Grafana警报可能是更好甚至是唯一的选择。
