["```js\nfunction ExaggeratingOrc(name) {\n  var that = this\n  // public property\n  that.name = name\n\n  // private property\n  var realKills = 0\n  // private method\n  function killCount() {\n    return realKills + 10\n  }\n\n  // public method using private method\n  that.greet = function() {\n    console.log(\"I am \" + that.name + \" and I killed \" + killCount())\n  }\n\n  // public method using private property\n  that.kill = function() { // public\n    realKills = realKills + 1\n  }\n}\n\nvar orc = new ExaggeratingOrc(\"Axeman Axenson\")\norc.killCount() // => TypeError: Object #< ExaggeratingOrc> has no method 'killCount'\norc.greet() // => I am Axeman Axenson and I killed 10\n```", "```js\nfunction iChangeThings(obj) {\n  obj.thing = \"changed\"\n}\n\nobj = {}\nobj.thing // => undefined\niChangeThings(obj)\nobj.thing // => \"changed\"\n```", "```js\nfunction Coin(value) {\n  this.value = value\n}\n\nvar fiftyCoin = new Coin(50)\nvar otherFiftyCoin = new Coin(50)\n\nfiftyCoin == otherFiftyCoin // => false\n```", "```js\n\"use strict\"\n\nfunction Coin(value) {\n  this.value = value\n  Object.freeze(this)\n}\n\nfunction changeValue(coin) {\n  coin.value = 100\n}\n\nvar coin = new Coin(50)\nchangeValue(coin) // => TypeError: Cannot assign to read only property 'value' of #<Coin>\n```", "```js\nCoin.prototype.equals = function(other) {\n  if(!(other instanceof Coin)) {\n    return false\n  }\n\n  return this.value === other.value\n}\n}\n\nvar notACoin = { value: 50 }\nvar aCoin = new Coin(50)\nvar coin = new Coin(50)\n\ncoin.equals(aCoin) // => true\ncoin.equals(notACoin) // => false\n```", "```js\nOrc.prototype.receivePayment = function (coin) {\n  if (this.checkIfValid(coin)) {\n    return this.wallet.add(coin)\n  } else {\n    return false\n  }\n}\n```", "```js\nvar events = require(\"events\")\nvar myEmitter = new events.EventEmitter()\n\nvar thing = { count: 0 }\n\nmyEmitter.on(\"change\", function () {\n  thing.count++\n})\nfunction doStuff(thing) {\n  thing.count = 10\n  process.nextTick(function() {\n    doMoreStuff(thing)\n  })\n}\n\nfunction doMoreStuff(thing) {\n  console.log(thing.count)\n}\n\ndoStuff(thing)\nmyEmitter.emit(\"change\")\n// => prints 11\n```", "```js\nfunction OrcRepository(orcs, swords) {\n  this.orcs = orcs\n  this.swords = swords\n}\n\nOrcRepository.prototype.getArmed = function () {\n  if (this.orcs > 0 && this.swords > 0) {\n    this.orcs -= 1\n    this.swords -= 1\n    return Orc.withSword();\n  }\n  return false\n}\n\nOrcRepository.prototype.add = function (orc) {\n  this.orcs += 1\n  if (orc.weapon == \"sword\") this.swords += 1\n}\n\nfunction Orc(name, weapon) {\n  this.name = name\n  this.weapon = weapon\n}\n\nOrc.withSword = function () {\n  return new Orc(randomName(), \"sword\")\n}\n\nrepo = new OrcRepository (1, 1)\norc = repo.getArmed() // => { name: \"Zuul\", weapon: \"sword\" }\nrepo.getArmed() // => false\nrepo.add(orc)\nrepo.getArmed() // => { name: \"Zuul\", weapon: \"sword\"}\n```", "```js\nfunction Wallet(coins) {\n  this.money = coins\n}\n\nWallet.prototype.pay = function (coin) {\n  for(var i = 0; i < this.money.length; i++) {\n    if (this.money[i].equals(coin) {\n      this.money.splice(i, 1)\n      return true\n    }\n  }\n  return false\n}\n\nfunction Orc(wallet) {\n  this.wallet = wallet\n  this.inventory = []\n}\n\nOrc.prototype.buy = function (thing, price) {\n  var priceToPay = new Coin(price)\n  if (this.wallet.pay(priceToPay)) {\n    this.inventory.unshift(thing)\n    return true\n  }\n  return false\n}\n```", "```js\nvar AVAILABLE_WEAPONS = [ \"axe\", \"axe\", \"sword\" ]\nvar NAMES = [ \"Ghazat\", \"Waruk\", \"Zaraugug\", \"Smaghed\", \"Snugug\",\n              \"Quugug\", \"Torug\", \"Zulgha\", \"Guthug\", \"Xnath\" ]\n\nfunction Orc(weapon, rank, name) {\n  this.weapon = weapon\n  this.rank = rank\n  this.name = name\n}\n\nOrc.anonymusArmedGrunt = function () {\n  var randomName = NAMES[Math.floor(Math.random() * NAMES.length)]\n  var weapon = AVAILABLE_WEAPONS.pop()\n  return new Orc(weapon, \"grunt\", randomName)\n}\n```", "```js\nfunction Letter(title, text, to) {\n  this.title = title\n  this.text = text\n  this.to = to\n}\n\nLetter.prototype.send = function(postman) {\n  postman.deliver(this)\n}\n```", "```js\nfunction LetterSender(postman, letter) {\n  this.postman = postman\n  this.letter = letter\n}\n\nLetterSender.prototype.send = function() {\n  var address = this.letter.to\n  postman.deliver(letter, address)\n}\n```", "```js\nFunction Thing(name) {\n  this.name = name\n}\n\naThing = new Thing(\"foo\")\nbThing = new Thing(\"foo\")\n\naThing === bThing // => false\n```"]