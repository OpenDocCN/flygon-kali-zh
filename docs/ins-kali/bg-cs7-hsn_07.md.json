["```cs\nEnter Values:<asp:TextBox ID=\"TextBox1\" runat=\"server\"></asp:TextBox><br />\n```", "```cs\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Find Max\" /><br />\n```", "```cs\ndelegate double CompareValues(double x, double y);\n```", "```cs\npublic partial class_Default: System.Web.UI.Page\n```", "```cs\ndouble FromStringToDouble(string s) => Convert.ToDouble(s);\n```", "```cs\nprotected void Button1_Click(object sender, EventArgs e)\n```", "```cs\nstring[] vals = TextBox1.Text.Split(new char[] { ',' });\n```", "```cs\ndouble[] doubleVals = Array.ConvertAll(vals, new Converter<string, double>(FromStringToDouble));\n```", "```cs\nCompareValues compareValues = (xin, yin) =>\n```", "```cs\n{\n    double x = xin, y = yin;\n}\n```", "```cs\nreturn x > y ? x : y;\n```", "```cs\nsampLabel.Text = CompareValuesInList(compareValues, doubleVals[0], doubleVals[1], doubleVals[2]).ToString();\n```", "```cs\nstatic double CompareValuesInList(CompareValues compFirstTwo, double first, double second, double third)\n```", "```cs\nreturn third > compFirstTwo(first, second) ? third : compFirstTwo(first, second);\n```", "```cs\nusing System;//needed for array, Convert, and Converter\ndelegate double CompareValues(double x, double y);//delegate for defining expression bodied lambda\npublic partial class _Default :System.Web.UI.Page\n{\n    double FromStringToDouble(string s) => Convert.ToDouble(s);//expression bodied function member\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        //split entries into array of strings\n        string[] vals = TextBox1.Text.Split(new char[] { ',' });\n        //line 10 below converts all strings to doubles using the \n        //vals array, and a new Converter object\n        //which really just calls FromStringToDouble\n        double[] doubleVals = \n        Array.ConvertAll(vals, new Converter<string, double>(FromStringToDouble));\n        //lines 13-17 define the expression bodied lambda, this one compares two \n        //values and returns the bigger\n        CompareValues compareValues = (xin, yin) =>\n        {\n            double x = xin, y = yin;\n            return x > y ? x : y;\n        };\n        //line 19 invokes CompareValuesInList, which needs the lambda, and \n        //list of values to compare\n        sampLabel.Text = \n        CompareValuesInList(compareValues, doubleVals[0], doubleVals[1],doubleVals[2]).ToString();\n    }\n    //lines 22-25 below return either third value if it's biggest, \n    //or one of the other two\n    static double CompareValuesInList(CompareValues compFirstTwo, double first, double second, double     third)\n    {\n        return third > compFirstTwo(first, second) ? third : compFirstTwo(first, second);\n    }\n}\n```"]