["```js\n.\n\u251c\u2500\u2500 App.css\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 App.test.js\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 Components\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 logo.svg\n\u251c\u2500\u2500 registerServiceWorker.js\n\u251c\u2500\u2500 routes.js\n\u2514\u2500\u2500 services\n```", "```js\n.\n\u251c\u2500\u2500 App.css\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 App.test.js\n\u251c\u2500\u2500 assets\n\u251c\u2500\u2500 Components\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 logo.svg\n\u251c\u2500\u2500 redux\n\u251c\u2500\u2500 registerServiceWorker.js\n\u251c\u2500\u2500 routes.js\n\u2514\u2500\u2500 services\n```", "```js\n.\n\u251c\u2500\u2500 actions\n\u251c\u2500\u2500 actionTypes\n\u251c\u2500\u2500 reducers\n\u2514\u2500\u2500 store\n```", "```js\nconst initialState = {\n  posts: [\n\n  ],\n  authors: [\n\n  ],\n  ajaxCalls: {\n    getAllPosts: {\n      loading: false,\n      hasError: false,\n    },\n    getAuthors: {\n      loading: false,\n      hasError: false,\n    },\n    addPost: {\n      loading: false,\n      hasError: false,\n    }\n  }\n};\n\nexport default initialState;\n```", "```js\n.\n\u251c\u2500\u2500 actions\n\u251c\u2500\u2500 actionTypes\n\u251c\u2500\u2500 reducers\n\u2514\u2500\u2500 store\n    \u2514\u2500\u2500 initialState.js\n```", "```js\nconst actions = {\n\n  GET_POSTS_AJAX_CALL_START : 'GET_POSTS_AJAX_CALL_START',\n  GET_POSTS_AJAX_CALL_SUCCESS: 'GET_POSTS_AJAX_CALL_SUCCESS',\n  GET_POSTS_AJAX_CALL_FAILURE: 'GET_POSTS_AJAX_CALL_FAILURE',\n  GET_POSTS: 'GET_POSTS',\n\n  GET_AUTHORS_AJAX_CALL_START: 'GET_AUTHORS_AJAX_CALL_START',\n  GET_AUTHORS_AJAX_CALL_SUCCESS: 'GET_AUTHORS_AJAX_CALL_SUCCESS',\n  GET_AUTHORS_AJAX_CALL_FAILURE: 'GET_AUTHORS_AJAX_CALL_FAILURE',\n  GET_AUTHORS: 'GET_AUTHORS',\n\n  ADD_POST_AJAX_CALL_START: 'ADD_POST_AJAX_CALL_START',\n  ADD_POST_AJAX_CALL_SUCCESS: 'ADD_POST_AJAX_CALL_SUCCESS',\n  ADD_POST_AJAX_CALL_FAILURE: 'ADD_POST_AJAX_CALL_FAILURE',\n  ADD_POST: 'ADD_POST',\n\n};\n\nexport default actions;\n```", "```js\n.\n\u251c\u2500\u2500 actions\n\u251c\u2500\u2500 actionTypes\n\u2502   \u2514\u2500\u2500 actionTypes.js\n\u251c\u2500\u2500 reducers\n\u2514\u2500\u2500 store\n    \u2514\u2500\u2500 initialState.js\n```", "```js\n.\n\u251c\u2500\u2500 actions\n\u2502   \u251c\u2500\u2500 authorActions.js\n\u2502   \u2514\u2500\u2500 postActions.js\n\u251c\u2500\u2500 actionTypes\n\u2502   \u2514\u2500\u2500 actionTypes.js\n\u251c\u2500\u2500 reducers\n\u2514\u2500\u2500 store\n    \u2514\u2500\u2500 initialState.js\n```", "```js\nconst sumAction = (a, b) => {\n  return {\n    type: 'SUM_TWO_NUMBERS',\n    payload: { answer: a+b }\n  }\n};\n```", "```js\nconst ajaxRequestAction = () => {         // Action\n  return dispatch => {                    // dispatcher\n    makeAjaxRequest()                     // asynchronous code\n    .then(response => {\n      dispatch(successAction(response));  // dispatch successAction\n    })\n    .catch(error => {\n      dispatch(errorAction(error));       // dispatch errorAction\n    });\n  }\n}\n\nconst successAction = (response) => {\n  return {\n    type: 'REQUEST_SUCCESS',\n    payload: { response },\n  };\n}\n\nconst errorAction = (error) => {\n  return {\n    type: 'REQUEST_FAILURE',\n    payload: { error },\n  };\n}\n```", "```js\nimport actions from '../actionTypes/actionTypes';\nimport apiCall from '../../services/api/apiCall';\n```", "```js\nexport const getAllPosts = () => {\n\n  return dispatch => {                   // Create the dispatcher\n\n    dispatch(postsApiCallStart());       // Dispatch - api call started\n\n    apiCall('posts', {}, 'GET')\n      .then(posts => {\n        dispatch(postsApiCallSuccess()); // Dispatch - api call success \n        dispatch(getPosts(posts));       // Dispatch - received posts array\n      })\n      .catch(error => {\n        dispatch(postsApiCallFailure()); // Dispatch - api call failed\n        console.error(error);\n      });\n\n  };\n\n};\n```", "```js\nexport const postsApiCallStart = () => {\n  return {\n    type: actions.GET_POSTS_AJAX_CALL_START,\n  };\n};\n\nexport const postsApiCallSuccess = () => {\n  return {\n    type: actions.GET_POSTS_AJAX_CALL_SUCCESS,\n  };\n};\n\nexport const postsApiCallFailure = () => {\n  return {\n    type: actions.GET_POSTS_AJAX_CALL_FAILURE,\n  };\n};\n\nexport const getPosts = (posts) => {\n  return {\n    type: actions.GET_POSTS,\n    payload: { posts },\n  };\n};\n```", "```js\nexport const addNewPost = (body) => {\n  return dispatch => {\n\n    dispatch(addPostApiCallStart());\n\n    apiCall(`post`, body)\n    .then(() => {\n\n      dispatch(addPostApiCallSuccess());\n      dispatch(getAllPosts());             // Dispatch - getAllPosts action\n\n    })\n    .catch(error => {\n\n      dispatch(addPostApiCallFailure());\n\n    });\n  };\n};\n```", "```js\nexport const addPostApiCallStart = () => {\n  return {\n    type: actions.ADD_POST_AJAX_CALL_START\n  };\n};\n\nexport const addPostApiCallSuccess = () => {\n  return {\n    type: actions.ADD_POST_AJAX_CALL_SUCCESS\n  };\n};\n\nexport const addPostApiCallFailure = () => {\n  return {\n    type: actions.ADD_POST_AJAX_CALL_FAILURE\n  };\n};\n```", "```js\n{\n  posts: [],\n  authors: [],\n  ajaxCalls: {\n    ...\n  },\n}\n```", "```js\n.\n\u251c\u2500\u2500 actions\n\u2502   \u251c\u2500\u2500 authorActions.js\n\u2502   \u2514\u2500\u2500 postActions.js\n\u251c\u2500\u2500 actionTypes\n\u2502   \u2514\u2500\u2500 actionTypes.js\n\u251c\u2500\u2500 reducers\n\u2502   \u251c\u2500\u2500 ajaxCallsReducer.js\n\u2502   \u251c\u2500\u2500 authorsReducer.js\n\u2502   \u251c\u2500\u2500 postsReducer.js\n\u2502   \u2514\u2500\u2500 rootReducer.js\n\u2514\u2500\u2500 store\n    \u2514\u2500\u2500 initialState.js\n```", "```js\n{\n  posts: postsReducer(oldPosts, action),\n}\n```", "```js\nimport initialState from '../store/initialState';\nimport actions from '../actionTypes/actionTypes';\n```", "```js\nconst postsReducer = (state = initialState.posts, action) => {\n  switch(action.type) {\n    case actions.GET_POSTS:\n      return action.payload.posts;\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n```", "```js\nimport initialState from '../store/initialState';\nimport actions from '../actionTypes/actionTypes';\n\nconst authorsReducer = (state = initialState.authors, action) => {\n  switch(action.type) {\n\n    default:\n      return state;\n  }\n\n};\n\nexport default authorsReducer;\n```", "```js\n    case actions.GET_POSTS_AJAX_CALL_START:\n      return {\n        ...state,\n        getAllPosts: {\n          loading: true,\n          hasError: false,\n        },\n      };\n```", "```js\nimport { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport authorsReducer from './authorsReducer';\nimport ajaxCallsReducer from './ajaxCallsReducer';\n```", "```js\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  authors: authorsReducer,\n  ajaxCalls: ajaxCallsReducer,\n});\n\nexport default rootReducer;\n```", "```js\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\n```", "```js\nconst configureStore = (preloadedState) => {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunk)\n  );\n};\n\nexport default configureStore;\n```", "```js\n.\n\u251c\u2500\u2500 actions\n\u2502   \u251c\u2500\u2500 authorActions.js\n\u2502   \u2514\u2500\u2500 postActions.js\n\u251c\u2500\u2500 actionTypes\n\u2502   \u2514\u2500\u2500 actionTypes.js\n\u251c\u2500\u2500 reducers\n\u2502   \u251c\u2500\u2500 ajaxCallsReducer.js\n\u2502   \u251c\u2500\u2500 authorsReducer.js\n\u2502   \u251c\u2500\u2500 postsReducer.js\n\u2502   \u2514\u2500\u2500 rootReducer.js\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 configureStore.js\n    \u2514\u2500\u2500 initialState.js\n```", "```js\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/store/configureStore';\n```", "```js\nconst  store  =  configureStore();\n```", "```js\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  ,\n  document.getElementById('root')\n);\n```", "```js\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n```", "```js\nimport { connect } from 'react-redux';\n```", "```js\nimport { bindActionCreators } from 'redux';\n```", "```js\nimport * as postActions from './redux/actions/postActions';\n```", "```js\nexport  default  withRouter(App);\n```", "```js\nfunction mapStateToProps() {\n  return {\n    // No states needed by App Component\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    postActions: bindActionCreators(postActions, dispatch),\n  };\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n);\n```", "```js\nconnectFunction = connect(mapStateToProps, mapDispatchToProps);\n```", "```js\nexport default withRouter(connectFunction(App));\n```", "```js\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(App)\n);\n```", "```js\n  this.props.postActions.getAllPosts();\n```", "```js\npostActions:  PropTypes.object.isRequired\n```", "```js\nimport { connect } from  'react-redux';\n```", "```js\nfunction mapStateToProps(state) {\n  return {\n    posts: state.posts,\n    loading: state.ajaxCalls.getAllPosts.loading,\n    hasError: state.ajaxCalls.getAllPosts.hasError,\n  };\n}\n\nexport default connect(mapStateToProps)(Home);\n```", "```js\n  static propTypes = {\n    posts: PropTypes.array.isRequired,\n    loading: PropTypes.bool.isRequired,\n    hasError: PropTypes.bool.isRequired,\n  }\n```", "```js\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n```", "```js\nfunction mapStateToProps(state, ownProps) {\n\n  return {\n    post: state.posts.find(post => post.id === ownProps.match.params.id),\n    loading: state.ajaxCalls.getAllPosts.loading,\n    hasError: state.ajaxCalls.getAllPosts.hasError,\n  };\n}\n\nexport default withRouter(\n  connect(mapStateToProps)(Post)\n);\n```", "```js\n  static propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    match: PropTypes.object.isRequired,\n    post: PropTypes.object,\n    loading: PropTypes.bool.isRequired,\n    hasError: PropTypes.bool.isRequired,\n  }\n```", "```js\n{\n  this.props.post\n  ?\n    <div>\n      <h2>{this.props.post.title}</h2>\n      <p>{this.props.post.author}</p>\n      <p>{this.props.post.content}</p>\n    </div>\n  :\n    null\n}\n```", "```js\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as postActions from '../../redux/actions/postActions';\n```", "```js\nfunction mapStateToProps(state) {\n  return {\n    loading: state.ajaxCalls.addPost.loading,\n    hasError: state.ajaxCalls.addPost.hasError,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    postActions: bindActionCreators(postActions, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NewPost);\n```", "```js\n  static propTypes = {\n    postActions: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    hasError: PropTypes.bool.isRequired,\n  }\n```", "```js\nthis.props.postActions.addNewPost(body);\n```", "```js\n  submit() {\n    if(this.state.author && this.state.content && this.state.title) {\n      this.setState({loading: true});\n\n      const date = new Date();\n      const epoch = (date.getTime()/1000).toFixed(0).toString();\n      const body = {\n        id: uuidv4(),\n        author: this.state.author,\n        title: this.state.title,\n        content: this.state.content,\n        datetime: epoch,\n      };\n\n      this.props.postActions.addNewPost(body);\n\n    } else {\n      alert('Please Fill in all the fields');\n    }\n  }\n```", "```js\n  componentWillReceiveProps(nextProps) {\n    if(this.props !== nextProps) {\n      if(nextProps.loading === false && nextProps.hasError === false) {\n        this.setState({\n          success: true,\n          author: '',\n          title: '',\n          content: '',\n        });\n      } else if(nextProps.loading === false && nextProps.hasError === true) {\n        this.setState({success: false});\n      }\n    }\n  }\n```", "```js\nimport { autoRehydrate } from 'redux-persist';\n```", "```js\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunk),\n    autoRehydrate()\n  );\n```", "```js\nimport { persistStore } from 'redux-persist';\nimport localForage from 'localforage';\n```", "```js\nconst store = configureStore();              // Store gets created here\npersistStore(store, {storage: localForage}); // next line which will persist your store\n```", "```js\nimport * as constants from 'redux-persist/constants';\n```", "```js\n    case constants.REHYDRATE:\n      if(action.payload.posts) {\n        return action.payload.posts;\n      }\n      return state;\n```"]