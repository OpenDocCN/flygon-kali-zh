- en: '*Chapter 17*: Unit Testing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*：单元测试'
- en: Throughout this book, you have learned all you need to know to be able to program
    using the C# language—from statements to classes, from generics to functional
    programming, from reflection to concurrency, and many others. We also covered
    many topics related to .NET Framework and .NET Core, including collections, regular
    expressions, files and streams, resource management, and **Language Integrated
    Query** (**LINQ**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，您已经学会了使用C#语言进行编程所需的一切——从语句到类，从泛型到函数式编程，从反射到并发等等。我们还涵盖了许多与.NET Framework和.NET
    Core相关的主题，包括集合、正则表达式、文件和流、资源管理以及**语言集成查询**（**LINQ**）。
- en: However, a key aspect of programming is making sure that code behaves as intended.
    Code that is not properly tested is prone to unexpected bugs. There are various
    types and levels of testing, but the one typically performed by developers while
    developing is *unit testing*. This is the topic covered in this final chapter
    of this book. In this chapter, you will learn what unit testing is and what are
    the built-in tools available to write unit tests for C#. Then, we will look in
    detail at how we can leverage these tools to unit test our C# code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，编程的一个关键方面是确保代码的行为符合预期。没有经过适当测试的代码容易出现意外错误。有各种类型和级别的测试，但通常由开发人员在开发过程中执行的是*单元测试*。这是本书最后一章涵盖的主题。在本章中，您将学习什么是单元测试，以及用于编写C#单元测试的内置工具。然后，我们将详细了解如何利用这些工具来对我们的C#代码进行单元测试。
- en: 'In this chapter, we will focus on the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注以下主题：
- en: What is unit testing?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: What are Microsoft tools for unit testing?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软的单元测试工具有哪些？
- en: Creating a C# unit testing project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建C#单元测试项目
- en: Writing unit tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: Writing data-driven unit tests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写数据驱动的单元测试
- en: Let's start with an overview of unit testing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从单元测试的概述开始。
- en: What is unit testing?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: Unit testing is a type of software testing where individual units of code are
    tested to validate whether they are working as they were designed. Unit testing
    is the first level of software testing, the others being integration testing,
    system testing, and acceptance testing. A discussion of these types of testing
    is beyond the scope of this book. Unit testing is typically performed by software
    developers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一种软件测试类型，其中测试单个代码单元以验证它们是否按设计工作。单元测试是软件测试的第一级，其他级别包括集成测试、系统测试和验收测试。讨论这些测试类型超出了本书的范围。单元测试通常由软件开发人员执行。
- en: 'Performing unit testing has important benefits:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 执行单元测试具有重要的好处：
- en: It helps to identify and fix bugs earlier in the development cycle, thereby
    helping to save time and money.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于在开发周期的早期识别和修复错误，从而有助于节省时间和金钱。
- en: It helps developers to better understand the code and allows them to make quick
    changes to the code base.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于开发人员更好地理解代码，并允许他们快速更改代码库。
- en: It helps with code reuse by requiring it to be more modular to test it better.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过要求更模块化来帮助代码重用。
- en: It can act as project documentation.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以作为项目文档。
- en: It helps to speed up development because the effort of identifying bugs using
    various methods of manual testing done by developers is greater than the time
    spent writing unit tests.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于加快开发速度，因为使用开发人员手动测试的各种方法来识别错误的工作量大于编写单元测试所花费的时间。
- en: It simplifies debugging because when tests fail, only the latest changes need
    to be looked at and debugged.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它简化了调试，因为当测试失败时，只需要查看和调试最新的更改。
- en: The unit of testing may differ. It can be a *function* (as it typically is in
    imperative programming) or a *class* (in object-oriented programming). Units are
    tested individually and in isolation from other units. This requires that units
    are designed to be loosely coupled but also employs the use of substitutes such
    as stubs, mocks, and fakes. Although the definition of these concepts may vary,
    stubs are functions that stand in as replacements for other functions, simulating
    their behavior. Examples could include stubs for functions that retrieve data
    from a web service or temporary substitutes for functionalities that will be added
    at a later time. Mocks are objects that simulate the behavior of other objects,
    usually complex, that are impractical to use for a unit test. The term **fake**
    may refer either to a *stub* or a *mock* and is used to indicate an entity that
    is not real.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的单元可能不同。它可以是一个*函数*（通常是在命令式编程中）或一个*类*（在面向对象编程中）。单元是单独和独立地进行测试的。这要求单元被设计为松散耦合，但也需要使用替代品，如存根、模拟和伪造。虽然这些概念的定义可能有所不同，但存根是作为其他函数的替代品，模拟它们的行为。示例可能包括用于从Web服务检索数据的函数的存根，或者用于稍后添加的功能的临时替代品。模拟是模拟其他对象行为的对象，通常是复杂的，不适合用于单元测试。术语**伪造**可能指的是*存根*或*模拟*，用于指示一个不真实的实体。
- en: Apart from using substitutes, unit testing often requires the use of test harnesses.
    A test harness is an automated testing framework that allows testing to be automated
    by supporting the creation of tests, executing the tests, and generating reports.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用替代品，单元测试通常需要使用测试工具。测试工具是一种自动化测试框架，通过支持测试的创建、执行测试和生成报告来实现测试的自动化。
- en: The measure of how much of the code base is covered by unit tests is called
    **code coverage**. Code coverage offers an indication of the degree a code base
    has been tested by providing a quantitative measure. Code coverage helps us to
    identify the parts of a program that are not well covered by test cases and allows
    us to create more tests to increase coverage.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库被单元测试覆盖的程度被称为**代码覆盖率**。代码覆盖率通过提供定量度量来指示代码库已经经过测试的程度。代码覆盖率帮助我们识别程序中未经充分测试的部分，并允许我们创建更多的测试来增加覆盖率。
- en: What are Microsoft tools for unit testing?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软的单元测试工具有哪些？
- en: 'If you are working with Visual Studio, several tools help you to write unit
    tests for your C# code. These tools include the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Visual Studio，有几个工具可以帮助您为您的C#代码编写单元测试。这些工具包括以下内容：
- en: '**Test Explorer**: This is a component of the IDE that allows you to view the
    unit tests, run them, and see their results. The **Test Explorer** does not work
    solely with MSTest (Microsoft''s testing unit framework). It has an extensible
    API that allows developing adapters for third-party frameworks. Some of the frameworks
    that provide adapters for **Test Explorer** are **NUnit** and **xUnit**.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Test Explorer**：这是IDE的一个组件，允许您查看单元测试，运行它们并查看它们的结果。**Test Explorer**不仅适用于MSTest（Microsoft的测试单元框架）。它有一个可扩展的API，允许为第三方框架开发适配器。一些提供**Test
    Explorer**适配器的框架包括**NUnit**和**xUnit**。'
- en: '**Microsoft unit test framework for managed code or MSTest**: This is installed
    with Visual Studio but is also available as a NuGet package. There is also a unit
    testing framework for native code with similar functionalities.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft托管代码单元测试框架或MSTest**：这是与Visual Studio一起安装的，也可以作为NuGet包使用。还有一个类似功能的本地代码单元测试框架。'
- en: '**Code coverage tools**: They allow you to determine the amount of code that
    unit tests are covering.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码覆盖工具**：它们允许您确定单元测试覆盖的代码量。'
- en: '**Microsoft Fakes isolation framework**: This allows you to create substitutes
    for classes and methods. Currently, this only works for .NET Framework and with
    Visual Studio Enterprise. At this time, .NET standard projects are not supported.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Fakes隔离框架**：这允许您为类和方法创建替代品。目前，这仅适用于.NET Framework和Visual Studio
    Enterprise。目前，不支持.NET标准项目。'
- en: The experience of working with the Microsoft testing framework for .NET Framework
    and .NET Core is a bit different at the time of writing this book because there
    are no unit testing templates for .NET Core test projects. This means that you
    need to manually create test classes and methods and decorate them with the proper
    attributes, as we will see shortly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，使用Microsoft测试框架进行.NET Framework和.NET Core的测试体验有些不同，因为.NET Core测试项目没有单元测试模板。这意味着您需要手动创建测试类和方法，并使用适当的属性进行修饰，我们很快就会看到。
- en: Creating a C# unit testing project
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个C#单元测试项目
- en: 'In this section, we will look together at how you can create a unit testing
    project in Visual Studio 2019\. When you open the **File** | **New Project** menu,
    you can choose between various testing projects:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将一起看一下如何在Visual Studio 2019中创建一个单元测试项目。当您打开**文件**|**新建项目**菜单时，您可以在各种测试项目之间进行选择：
- en: '![Figure 17.1 - Visual Studio 2019 unit-testing project templates'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.1 - Visual Studio 2019单元测试项目模板'
- en: '](img/Figure_17.1_B12346.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.1_B12346.jpg)'
- en: Figure 17.1 - Visual Studio 2019 unit testing project templates
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1 - Visual Studio 2019单元测试项目模板
- en: If you need to test a .NET Framework project, then you select **Unit Test Project
    (.NET Framework)**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要测试一个.NET Framework项目，那么您选择**Unit Test Project (.NET Framework)**。
- en: 'A project is created for you with a single unit testing file with the following
    content:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个项目会为您创建一个包含以下内容的单元测试文件：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, `UnitTest1` is a class containing test methods. This class is marked
    with the `TestClassAttribute` attribute. Another attribute, `TestMethodAttribute`,
    is used to mark the `TestMethod1()` method. These attributes are used by the testing
    framework to identify classes and methods that contain tests. These are then shown
    in **Test Explorer,** where you can run or debug them and view their results,
    as you can see in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`UnitTest1`是一个包含测试方法的类。这个类被标记为`TestClassAttribute`属性。另一个属性`TestMethodAttribute`被用来标记`TestMethod1()`方法。这些属性被测试框架用来识别包含测试的类和方法。然后它们会显示在**Test
    Explorer**中，您可以在那里运行或调试它们并查看它们的结果，就像您在下面的截图中看到的那样：
- en: '![Figure 17.2 - The Test Explorer in Visual Studio showing the result of executing
    the empty unit test created from the selected template.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.2 - Visual Studio中的Test Explorer显示了从所选模板创建的空单元测试的执行结果。'
- en: '](img/Figure_17.2_B12346.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.2_B12346.jpg)'
- en: Figure 17.2 - Test Explorer in Visual Studio showing the result of executing
    the empty unit test created from the selected template
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2 - Visual Studio中的Test Explorer显示了从所选模板创建的空单元测试的执行结果
- en: 'You can add more unit testing classes either by hand or by using the test templates
    available in Visual Studio, as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过手动方式或使用Visual Studio中可用的测试模板来添加更多的单元测试类，就像下面的截图所示：
- en: '![Figure 17.3 - The Add New Item dialog in Visual Studio with a selection of
    unit test items.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.3 - Visual Studio中的添加新项对话框，其中包含一些单元测试项目。'
- en: '](img/Figure_17.3_B12346.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.3_B12346.jpg)'
- en: Figure 17.3 - The Add New Item dialog in Visual Studio with a selection of unit
    test items
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3 - Visual Studio中的添加新项对话框，其中包含一些单元测试项目
- en: If you are testing a .NET Core project, then you should select the template
    called **MSTest Test Project (.NET Core)** when creating the test project (refer
    to the screenshot at the beginning of this section). The result is a project with
    a single file and the same content shown earlier. However, adding more unit testing
    items is not possible using the wizards, and you must create everything manually.
    At this point, there are no item templates available for MSTest for .NET Core.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在测试一个.NET Core项目，那么在创建测试项目时，您应该选择名为**MSTest Test Project (.NET Core)**的模板（参考本节开头的截图）。结果是一个包含单个文件和之前显示的相同内容的项目。然而，使用向导添加更多的单元测试项目是不可能的，您必须手动创建一切。目前，MSTest对.NET
    Core没有可用的项目模板。
- en: For the rest of this chapter, we will focus on testing .NET Core projects.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将专注于测试.NET Core项目。
- en: Writing unit tests
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: 'In this section, we will look at how you can write unit tests for your C# code.
    To do so, we will consider the following implementation of a rectangle:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下如何为您的C#代码编写单元测试。为此，我们将考虑一个矩形的以下实现：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This implementation should be straightforward and not require further explanations.
    This is a simple class that does not offer too many functionalities concerning
    rectangles. We can provide more in the form of extension methods. The following
    listing shows extensions for increasing and decreasing the size of a rectangle,
    as well as checking whether two rectangles intersect, and determining the resulting
    rectangle of their intersection:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现应该是直接的，不需要进一步的解释。这是一个简单的类，关于矩形并没有提供太多的功能。我们可以通过扩展方法提供更多功能。以下清单显示了增加和减少矩形大小的扩展，以及检查两个矩形是否相交，并确定它们相交的结果矩形：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will start by testing the `Rectangle` structure and to do so, we will have
    to create a unit testing project as described in the previous section. After the
    project is created, we can edit the generated stub with the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从测试`Rectangle`结构开始，为此，我们将不得不创建一个单元测试项目，如前一节所述。创建项目后，我们可以编辑生成的存根，使用以下代码：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this listing, we have a test class, called `RectangleTests`, that contains
    several testing methods:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在此列表中，我们有一个名为`RectangleTests`的测试类，其中包含几个测试方法：
- en: '`TestEmpty()`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestEmpty()`'
- en: '`TestConstructor()`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestConstructor()`'
- en: '`TestProperties()`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestProperties()`'
- en: '`TestPropertiesMore()`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestPropertiesMore()`'
- en: Each of these methods tests some part of the `Rectangle` class. To do so, we
    are using the `Assert` class from `Microsoft.VisualStudio.TestTools.UnitTesting`.
    This class contains a collection of static methods that help us to perform tests.
    When a test fails, an exception is thrown and the execution of the test method
    stops and continues with the next testing method.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中的每一个都测试了`Rectangle`类的一部分。为此，我们使用了`Microsoft.VisualStudio.TestTools.UnitTesting`中的`Assert`类。该类包含一系列静态方法，帮助我们执行测试。当测试失败时，将引发异常，并且测试方法的执行将停止，并继续下一个测试方法。
- en: 'In the following screenshot, we can see the results of executing the test methods
    we wrote earlier. You can see that all of the tests have executed successfully:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，我们可以看到执行我们之前编写的测试方法的结果。您可以看到所有测试都已成功执行：
- en: '![Figure 17.4 - The Test Explorer showing the successful execution of the test
    methods written earlier.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.4 - 测试资源管理器显示先前编写的测试方法成功执行。'
- en: '](img/Figure_17.4_B12346.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.4_B12346.jpg)'
- en: Figure 17.4 - Test Explorer showing successful execution of the test methods
    written earlier
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4 - 测试资源管理器显示先前编写的测试方法成功执行
- en: 'When a test fails, it will be shown with a red bullet and you can check in
    the `TestProperties()` method to have the following incorrect test:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试失败时，它将显示为红色的圆点，您可以检查`TestProperties()`方法，看看以下不正确的测试：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will make the `TestProperties()` test method fail, as you can see in the
    following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致`TestProperties()`测试方法失败，如下一个截图所示：
- en: '![Figure 17.5 - The Test Explorer showing the execution of the test methods
    with the TestProperties() method failed.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.5 - 测试资源管理器显示测试方法执行失败的TestProperties()方法。'
- en: '](img/Figure_17.5_B12346.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.5_B12346.jpg)'
- en: Figure 17.5 - Test Explorer showing the execution of test methods with the TestProperties()
    method having failed
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5 - 测试资源管理器显示TestProperties()方法执行失败的测试方法
- en: 'The reason for the failure is detailed in the **Test Detail Summary** pane,
    as shown in the following screenshot. This pane is displayed when you click on
    a failed test:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的原因在**测试详细摘要**窗格中有详细说明，如下一个截图所示。单击失败的测试时，将显示此窗格：
- en: '![Figure 17.6 - The Test Detail Summary pane of the Test Explorer showing details
    about the failed test.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.6 - 测试资源管理器的测试详细摘要窗格显示了有关失败测试的详细信息。'
- en: '](img/Figure_17.6_B12346.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_17.6_B12346.jpg)'
- en: Figure 17.6 - Test Detail Summary pane of Test Explorer showing details regarding
    the failed test
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6 - 测试资源管理器的测试详细摘要窗格显示了有关失败测试的详细信息
- en: 'From the report in this pane, we can see that `Assert.AreEqual()` at `line
    30` in `RectangleTests.cs` failed because the expected result was `6,` but the
    actual value was `4`. We also got the message that we supplied to the `Assert.AreEqual()`
    method. The entire text message from the previous screenshot is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从此窗格中的报告中，我们可以看到`RectangleTests.cs`中`第30行`的`Assert.AreEqual()`失败，因为期望的结果是`6`，但实际值是`4`。我们还得到了我们提供给`Assert.AreEqual()`方法的消息。前一个截图中的整个文本消息如下：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the test code written so far, we have used several asserting methods—`AreEqual()`,
    `IsTrue()`, and `IsFalse()`. These, however, are not the only assertion methods
    available; there is a long list of them. Some of the most frequently used assertion
    methods are shown in the following table:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止编写的测试代码中，我们使用了几种断言方法——`AreEqual()`、`IsTrue()`和`IsFalse()`。然而，这些并不是唯一可用的断言方法；还有很多。以下表格显示了一些最常用的断言方法：
- en: '![](img/Chapter_17_Table_1_01.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Chapter_17_Table_1_01.jpg)'
- en: All of the methods listed in this table are actually overloaded methods. You
    can get the complete reference by checking the documentation available online.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此表中列出的所有方法实际上都是重载方法。您可以通过在线文档获得完整的参考资料。
- en: Analyzing code coverage
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析代码覆盖率
- en: 'When we created the `Rectangle` class, we also created several extension methods
    for it, so we should be writing more unit tests to cover these two. We could put
    these tests into another test class. Although the source code accompanying this
    book contains more unit tests, for brevity, we only list some of them here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建`Rectangle`类时，还为其创建了几个扩展方法，因此我们应该编写更多的单元测试来覆盖这两个。我们可以将这些测试放入另一个测试类中。尽管附带本书的源代码包含更多的单元测试，但为简洁起见，我们在这里只列出了其中一些：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After compiling the unit testing project, the new unit test class and methods
    will appear in **Test Explorer,** so you can run or debug them. The following
    screenshot shows the successful execution of all of the test methods:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 编译单元测试项目后，新的单元测试类和方法将出现在**测试资源管理器**中，因此您可以运行或调试它们。以下截图显示了所有测试方法的成功执行：
- en: '![Figure 17.7 - The Test Explorer window showing the successful execution of
    all the unit tests, including the ones written for the Rectangle extension methods.](img/Figure_17.7_B12346.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图17.7 - 测试资源管理器窗口显示了所有单元测试的成功执行，包括为矩形扩展方法编写的单元测试。](img/Figure_17.7_B12346.jpg)'
- en: Figure 17.7 - The Test Explorer window showing the successful execution of all
    the unit tests, including the ones written for the Rectangle extension methods
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7 - 测试资源管理器窗口显示了所有单元测试的成功执行，包括为矩形扩展方法编写的单元测试
- en: 'We can also get code coverage for your code based on the unit tests you have
    written. You can trigger the code coverage either from **Test Explorer** or from
    the **Test** top-level menu. Based on the unit test we have seen so far, we get
    the following coverage:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以根据您编写的单元测试来获取代码覆盖率。您可以从**测试资源管理器**或**测试**顶级菜单触发代码覆盖。根据我们目前所见的单元测试，我们得到以下覆盖范围：
- en: '![Figure 17.8 - The Code Coverage Results pane in Visual Studio showing the
    code coverage of our unit tests.](img/Figure_17.8_B12346.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图17.8 - Visual Studio中显示我们单元测试代码覆盖率的代码覆盖结果窗格。](img/Figure_17.8_B12346.jpg)'
- en: Figure 17.8 - The Code Coverage Results pane in Visual Studio showing the code
    coverage of our unit tests
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.8 - Visual Studio中显示我们单元测试代码覆盖率的代码覆盖结果窗格
- en: Here, we can see that the `Rectangle` class is completely covered by unit tests.
    However, the static class containing extensions is only covered `IntersectsWith()`,
    has one block out of eight that is not covered by the unit tests we have written.
    We can use this report to identify the parts of the code that are not covered
    by tests so that you can write more.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`Rectangle`类完全被单元测试覆盖。然而，包含扩展的静态类只覆盖了`IntersectsWith()`，有一个八分之一的代码块没有被我们编写的单元测试覆盖。我们可以使用这份报告来识别代码中未被测试覆盖的部分，以便您可以编写更多测试。
- en: The anatomy of a test
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试的解剖学
- en: 'In the tests we have written so far, we have seen test classes and test methods.
    However, there are other methods that a test class may have that are executed
    at different stages. A complete example is shown in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们编写的测试中，我们已经看到了测试类和测试方法。然而，测试类可能具有在不同阶段执行的其他方法。下面的代码显示了一个完整的示例：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The names of these methods are irrelevant. What is important here are the attributes
    used to mark them. These are reflected by the testing framework and determine
    the order in which the methods are invoked. For this particular example, this
    order is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法的名称是无关紧要的。这里重要的是用于标记它们的属性。这些属性由测试框架反映，并确定方法被调用的顺序。对于这个特定的例子，顺序如下：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The attributes used to mark these methods are listed in the following table:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 用于标记这些方法的属性列在下表中：
- en: '![](img/Chapter_17_Table_2_01.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Chapter_17_Table_2_01.jpg)'
- en: When you want to do multiple tests for the same function with different sets
    of data, you can resort to retrieving them from a data source. The unit testing
    framework for managed code makes this possible in the ways we will see in the
    following section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要对同一个函数进行多个不同数据集的测试时，您可以从数据源中检索它们。托管代码的单元测试框架使这成为可能，我们将在下一节中看到。
- en: Writing data-driven unit tests
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写数据驱动的单元测试
- en: If you take a second look at the previous tests, such as the `TestIntersectsWith()`
    test method, you will see that we tried testing various cases, such as the intersection
    of one rectangle with several others, some that intersect, and some that don't.
    This was a simple example, and in practice, there should be many more rectangles
    that we should test with to cover all of the possible cases of rectangle intersection.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再看一下之前的测试，比如`TestIntersectsWith()`测试方法，您会发现我们尝试测试各种情况，比如一个矩形与其他几个矩形的交集，一些相交，一些不相交。这是一个简单的例子，在实践中，应该有更多的矩形需要测试，以覆盖所有可能的矩形交集情况。
- en: In general, as code evolves, so do the tests and you often have to add more
    to the testing datasets. Rather than writing explicitly the data in the test method,
    as in our previous example, you can fetch it from a data source. The test method
    is then executed once for each row in the data source. The unit testing framework
    for managed code supports three different scenarios.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，随着代码的发展，测试也会发展，您经常需要添加更多的测试数据集。与其像我们之前的例子中那样在测试方法中明确地编写数据，您可以从数据源中获取数据。然后，测试方法针对数据源中的每一行执行一次。托管代码的单元测试框架支持三种不同的场景。
- en: Data from attributes
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性数据
- en: 'The first option is to provide the data in code but through an attribute called
    `DataRowAttribute`. This attribute has a constructor that allows us to specify
    any number of arguments. These arguments are then forwarded, in the same order,
    to the parameters of the test method it is used on. Let''s look at an example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种选项是通过代码提供数据，但通过一个名为`DataRowAttribute`的属性。这个属性有一个构造函数，允许我们指定任意数量的参数。然后，这些参数按照相同的顺序转发到它所用于的测试方法的参数中。让我们看一个例子：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are several things to notice in this example. First, the attribute used
    to indicate that this is a data-driven test method is `DataTestMethodAttribute`.
    However, for compatibility of legacy code, `TestMethodAttribute` is also supported,
    although not encouraged. The second thing to notice is the use of `DataRowAttribute`.
    We used it to provide the data for several rectangles as well as the expected
    result of the intersection with the reference rectangle from the test method.
    As mentioned before, the method is executed for each row in the data source, which,
    in this case, is each occurrence of the `DataRow` attribute.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中有几件事情需要注意。首先，用于指示这是一个数据驱动测试方法的属性是`DataTestMethodAttribute`。然而，为了向后兼容，也支持`TestMethodAttribute`，尽管不鼓励使用。第二件需要注意的事情是`DataRowAttribute`的使用。我们用它来提供几个矩形的数据，以及与测试方法中的参考矩形相交的预期结果。如前所述，该方法对数据源中的每一行执行一次，这种情况下，即`DataRow`属性的每次出现。
- en: 'The following listing shows the output of executing the test method:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下清单显示了执行测试方法的输出：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If a row in the data source makes the test fail, it is reported as such, but
    the execution of the method is repeated for the next row in the data source.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据源中的一行使测试失败，则会报告这种情况，但是方法的执行将重复进行，直到数据源中的下一行。
- en: Dynamic data
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态数据
- en: 'The use of the `DataRow` attribute is an improvement, since it makes the testing
    code simpler, but it is not the best alternative. A slightly better option is
    fetching data, dynamically, from a method or property of the class. This is possible
    using another attribute called `DynamicDataAttribute`. You must specify the name
    and the type of the source of data (method or property). An example is shown in
    the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DataRow`属性是一种改进，因为它使测试代码更简单，但并非最佳选择。稍微更好的选择是动态地从类的方法或属性中获取数据。这可以使用另一个名为`DynamicDataAttribute`的属性来实现。您必须指定数据源的名称和类型（方法或属性）。下面的代码示例：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, we defined a method called `GetData()` that returns an enumerable
    sequence of arrays of objects. We fill these arrays with the rectangle bounds
    and the result of the intersection with the reference rectangle. Then, on the
    test method, we use the `DynamicData` attribute and provide it with the name of
    the method that supplies the data and the type of data source (`DynamicDataSourceType.Method`).
    The actual test code is no different than the one from the previous example.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们定义了一个名为`GetData()`的方法，该方法返回一个对象数组的可枚举序列。我们用矩形边界和与参考矩形的交集的结果填充这些数组。然后，在测试方法中，我们使用`DynamicData`属性，并向其提供提供数据的方法的名称和数据源类型（`DynamicDataSourceType.Method`）。实际的测试代码与前一个示例中的代码没有任何不同。
- en: However, this alternative also relies on hardcoded data. The most desirable
    solution is to read it from an external data source.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种替代方案也依赖于硬编码数据。最理想的解决方案是从外部数据源读取数据。
- en: Data from external sources
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自外部源的数据
- en: Test data can be fetched from an external source, such as a SQL Server database,
    a CSV file, an Excel document, or XML. For this purpose, we must use another attribute,
    called `DataSourceAttribute`. This attribute has several constructors that allow
    you to specify the connection string to the source and other necessary parameters.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据可以从外部源获取，例如SQL Server数据库、CSV文件、Excel文档或XML。为此，我们必须使用另一个名为`DataSourceAttribute`的属性。此属性有几个构造函数，允许您指定到源的连接字符串和其他必要的参数。
- en: Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of writing this book, this solution and this attribute are only
    available for .NET Framework and are not yet supported for .NET Core.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，此解决方案和此属性仅适用于.NET Framework，并且尚不支持.NET Core。
- en: 'To write a test method that gets data from an external source, you need to
    be able to access information about this data source. This is possible with the
    help of a `TestContext` object that the framework is passing as an argument to
    the methods marked with either the `AssemblyInitialize` or `ClassInitialize` attributes.
    A simpler solution to get a reference to that object is to provide in the test
    class a public property called `TestContext` with the `TestContext` type as shown
    in the following code. The framework will automatically set it with a reference
    to the test context object:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个从外部源获取数据的测试方法，您需要能够访问有关此数据源的信息。这可以通过`TestContext`对象来实现，该对象由框架作为参数传递给标有`AssemblyInitialize`或`ClassInitialize`属性的方法。获取对该对象的引用的一个更简单的解决方案是，在测试类中提供一个名为`TestContext`的公共属性，并将其类型设置为`TestContext`，如下面的代码所示。框架将自动使用对测试上下文对象的引用来设置它：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can then use the context to access data source information. In the example
    that follows, we rewrite the test method to fetch data from a CSV file called
    `TestData.csv` that resides in the same folder as the test application. The content
    of this file is as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用上下文来访问数据源信息。在接下来的示例中，我们将重写测试方法，以从与测试应用程序位于同一文件夹中的名为`TestData.csv`的CSV文件中获取数据。该文件的内容如下：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first column is the expected result of the intersection with the reference
    rectangle, and the other values on each line are the bounds of the rectangle.
    The test method that executes with data fetched from this CSV file is listed in
    the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列是与参考矩形的交集的预期结果，每行中的其他值是矩形的边界。从此CSV文件中获取数据执行的测试方法如下所示：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can see that this method, unlike the previous ones, has no parameters. Data
    is available through the `DataRow` property of the `TestContext` object and this
    method is invoked once for each row in the CSV file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，与以前的方法不同，此方法没有参数。数据可通过`TestContext`对象的`DataRow`属性获得，并且此方法对CSV文件中的每一行调用一次。
- en: 'If you do not want data source information, such as the connection string,
    to be specified in the source code, you can use the application configuration
    file to provide it. To do so, you must add a custom section and then define a
    connection string (with name, string, and provider name) and data source (with
    name, connection string name, table name, and data access method). For the CSV
    file we used in the previous example, the `App.config` file would look as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望在源代码中指定数据源信息（例如连接字符串），则可以使用应用程序配置文件来提供。为此，您必须添加一个自定义部分，然后定义一个连接字符串（带有名称、字符串和提供程序名称）和数据源（带有名称、连接字符串名称、表名称和数据访问方法）。对于我们在前面示例中使用的CSV文件，`App.config`文件将如下所示：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this defined, the only change we have to make to the test method is to
    change the `DataSource` attribute, specifying the name of the data source from
    the `.config` file (`MyCSVDataSource` in our example). This is shown in the following
    code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个定义，我们唯一需要对测试方法进行的更改就是更改`DataSource`属性，指定来自`.config`文件的数据源的名称（在我们的示例中为`MyCSVDataSource`）。如下面的代码所示。
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To get more information about how to provide connection strings for various
    types of data sources, you should read the online documentation.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关如何为各种类型的数据源提供连接字符串的更多信息，您应该阅读在线文档。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This last chapter of this book was dedicated to unit testing, which is essential
    for writing quality code. We started with a basic introduction to unit testing
    and learned about the Microsoft tools for writing unit tests, including the unit
    testing framework for managed code. We have seen how to create unit testing projects
    using this framework, both for .NET Framework and .NET Core. We then looked at
    the most important features of the unit testing framework and learned how to write
    unit tests. In the last section, we learned about data-driven tests and saw how
    to write tests with data from various data sources.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的最后一章专门讲述了单元测试，这对于编写高质量的代码至关重要。我们从基本介绍单元测试开始，了解了微软用于编写单元测试的工具，包括托管代码的单元测试框架。我们看到了如何使用这个框架创建单元测试项目，无论是针对.NET
    Framework还是.NET Core。然后我们看了单元测试框架的最重要特性，并学习了如何编写单元测试。在最后一节中，我们了解了数据驱动测试，并学习了如何使用各种数据源编写测试。
- en: As this book concludes here, we, the authors, would like to thank you for taking
    the time to read it. By writing this book, we tried to provide you with everything
    that was essential for you to become proficient in the C# language. We hope this
    book proves a valuable resource for you in learning and mastering the C# language.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这本书在这里结束，我们作为作者，要感谢你抽出时间来阅读。通过撰写这本书，我们试图为您提供成为C#语言专家所必需的一切。我们希望这本书对您学习和掌握C#语言是一个宝贵的资源。
- en: Test what you learned
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检验你所学到的内容。
- en: What is unit testing and what are its most important benefits?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是单元测试，它的最重要的好处是什么？
- en: What tools does Visual Studio offer to help writing unit tests?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio提供了哪些工具来帮助编写单元测试？
- en: What functionalities does Test Explorer in Visual Studio provide?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio的测试资源管理器提供了哪些功能？
- en: How do you specify that a class in a unit testing project contains unit tests?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何指定单元测试项目中的类包含单元测试？
- en: What class and methods can you use to perform assertions?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用哪些类和方法来执行断言？
- en: How do you check the code coverage of your unit tests?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何检查单元测试的代码覆盖率？
- en: How do you write test fixtures that execute once per test class? What about
    test fixtures for each method?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何编写测试夹具，使其每个测试类执行一次？每个方法的测试夹具又是怎样的？
- en: What is data-driven unit testing?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是数据驱动的单元测试？
- en: What does `DynamicDataAttribute` do? And what about `DataSourceAttribute`?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DynamicDataAttribute`是做什么的？`DataSourceAttribute`又是什么？'
- en: What are the supported external sources for test data?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持的测试数据外部来源有哪些？
