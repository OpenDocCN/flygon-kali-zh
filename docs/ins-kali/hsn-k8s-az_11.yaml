- en: 8\. Connecting an app to an Azure database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8. 连接应用程序到Azure数据库
- en: In previous chapters, we stored the state of our application in our cluster,
    either on a Redis cluster or on MariaDB. You might remember that both had some
    issues when it came to high availability. This chapter will take you through the
    process of connecting to a MySQL database managed by Azure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们将应用程序的状态存储在我们的集群中，要么在Redis集群上，要么在MariaDB上。您可能还记得在高可用性方面两者都存在一些问题。本章将带您了解连接到Azure托管的MySQL数据库的过程。
- en: We will discuss the benefits of using a hosted database versus running **StatefulSets**
    on Kubernetes itself. To create this hosted and managed database, we will make
    use of **Open Service Broker for Azure** (**OSBA**). OSBA is a way to create Azure
    resources, such as a managed MySQL database, from within a Kubernetes cluster.
    In this chapter, we will explain more details about the OSBA project and we will
    set up and configure OSBA on our cluster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论使用托管数据库与在Kubernetes本身上运行StatefulSets的好处。为了创建这个托管和管理的数据库，我们将利用Azure的Open
    Service Broker for Azure（OSBA）。OSBA是一种从Kubernetes集群内部创建Azure资源（如托管的MySQL数据库）的方式。在本章中，我们将更详细地解释OSBA项目，并在我们的集群上设置和配置OSBA。
- en: We will then make use of OSBA to create a MySQL database in Azure. We will use
    this managed database as part of a WordPress application. This will show you how
    you can connect an application to a managed database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将利用OSBA在Azure中创建一个MySQL数据库。我们将把这个托管数据库作为WordPress应用程序的一部分。这将向您展示如何将应用程序连接到托管数据库。
- en: 'In addition, we will show you aspects of security, backup, **disaster recovery**
    (**DR**), authorization, and audit logging. The independent scaling of the database
    and the cluster will also be explored. We will break down the discussion of this
    chapter into the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将向您展示安全性、备份、灾难恢复（DR）、授权和审计日志的方面。还将探讨数据库和集群的独立扩展。我们将把本章的讨论分解为以下主题：
- en: Setting up OSBA
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSBA的设置
- en: Extending our app to connect to an Azure database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展我们的应用程序以连接到Azure数据库
- en: Exploring advanced database operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索高级数据库操作
- en: Reviewing audit logs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查审计日志
- en: Let's start by setting up OSBA on our cluster.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在我们的集群上设置OSBA开始。
- en: Setting up OSBA
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置OSBA
- en: In this section, we will set up OSBA on our cluster. OSBA will allow us to create
    a MySQL database without leaving the Kubernetes cluster. We will start this section
    by explaining the benefits of using a hosted database versus running StatefulSets
    on Kubernetes itself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在我们的集群上设置OSBA。OSBA将允许我们在不离开Kubernetes集群的情况下创建一个MySQL数据库。我们将从解释使用托管数据库与在Kubernetes本身上运行StatefulSets的好处开始本节。
- en: The benefits of using a managed database service
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用托管数据库服务的好处
- en: All the examples that we have gone through so far have been self-contained,
    that is, everything ran inside the Kubernetes cluster. Almost any production application
    has state, which is generally stored in a database. While there is a great advantage
    to being mostly cloud-agnostic, this has a huge disadvantage when it comes to
    managing a stateful workload such as a database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所讨论的所有示例都是自包含的，也就是说，一切都在Kubernetes集群内运行。几乎任何生产应用程序都有状态，通常存储在数据库中。虽然在大部分情况下基本上是云无关的有很大的优势，但在管理数据库等有状态工作负载时却有很大的劣势。
- en: When you are running your own database on top of a Kubernetes cluster, you need
    to take care of scalability, security, high availability, disaster recovery, and
    backup. Managed database services offered by cloud providers can offload you or
    your team from having to execute these tasks. For example, Azure Database for
    MySQL comes with enterprise-grade security and compliance, built-in high availability,
    and automated backups. The service scales within seconds and can optionally very
    easily be configured for disaster recovery.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Kubernetes集群上运行自己的数据库时，您需要关注可伸缩性、安全性、高可用性、灾难恢复和备份。云提供商提供的托管数据库服务可以减轻您或您的团队执行这些任务的负担。例如，Azure
    Database for MySQL具有企业级安全性和合规性、内置高可用性和自动备份。该服务可以在几秒钟内扩展，并且可以非常容易地配置为灾难恢复。
- en: It is a lot simpler to consume a production-grade database from Azure than it
    is to set up and manage your own on Kubernetes. In the next section, we will explore
    a way that Kubernetes can be used to create these databases on Azure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从Azure消费生产级数据库要比在Kubernetes上设置和管理自己的数据库简单得多。在下一节中，我们将探讨Kubernetes如何用于在Azure上创建这些数据库的方法。
- en: What is OSBA?
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是OSBA？
- en: In this section, we will explore what OSBA is.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨OSBA是什么。
- en: As with most applications these days, much of the hard work has already been
    done for us by the open-source community (including those who work for Microsoft).
    Microsoft has realized that many users would like to use their managed services
    from Kubernetes and that they require an easier way of using the same methodologies
    that are used for Kubernetes deployment. To aid in this effort, they have released
    Helm charts that use these managed services as a backend ([https://github.com/Azure/helm-charts](https://github.com/Azure/helm-charts)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与如今大多数应用程序一样，大部分工作已经由开源社区（包括微软员工）为我们完成。微软已经意识到许多用户希望从Kubernetes使用其托管服务，并且他们需要一种更容易使用与Kubernetes部署相同方法的方式。为了支持这一努力，他们发布了使用这些托管服务作为后端的Helm图表
    ([https://github.com/Azure/helm-charts](https://github.com/Azure/helm-charts))。
- en: A key part of the architecture that allows you to create Azure resources from
    within Kubernetes is OSBA ([https://osba.sh/](https://osba.sh/)). OSBA is an **Open
    Service Broker** (**OSB**) implementation for Azure. The OSB API is a spec that
    defines a common language for platform providers that cloud-native applications
    can use to manage cloud services without lock-in.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 允许您从Kubernetes内部创建Azure资源的架构的关键部分是OSBA ([https://osba.sh/](https://osba.sh/))。OSBA是Azure的**开放服务经纪人**（**OSB**）实现。OSB
    API是一个规范，定义了云原生应用程序可以使用的平台提供商的通用语言，以管理云服务而无需锁定。
- en: The OSB API itself isn't Azure or Kubernetes specific. It is an industry effort
    to simplify the provisioning of resources through a standardized API. It allows
    you to connect to third-party services in a standardized way.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OSB API本身并不是针对Azure或Kubernetes的特定。这是一个简化资源供应的行业努力，通过标准化API来连接第三方服务。
- en: 'When using the OSB API with Kubernetes, an extension called the **Service Catalog**
    is run on the cluster. The Service Catalog will listen to the Kubernetes API for
    requests and will translate them to the OSB API to interface with the platform
    provider. This means that when you make a request for a database, the Kubernetes
    API will send that request to the Service Catalog, which in turn will use the
    OSB API to interface with the platform. *Figure 8.1* illustrates this logical
    flow:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Kubernetes的OSB API时，集群上会运行一个名为**服务目录**的扩展。服务目录将监听Kubernetes API的请求，并将其转换为OSB
    API，以与平台提供商进行接口交互。这意味着当您请求数据库时，Kubernetes API将该请求发送到服务目录，然后服务目录将使用OSB API与平台进行接口交互。*图8.1*说明了这种逻辑流程：
- en: '![The user requests a database to the Kubernetes API. The Kubernetes API then
    forwards this request to the Service Catalog. The Service Catalog then creates
    a database using the OSB API on the platform.](image/Figure_8.1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![用户向Kubernetes API请求数据库。然后Kubernetes API将此请求转发给服务目录。服务目录然后使用平台上的OSB API创建数据库。](image/Figure_8.1.jpg)'
- en: 'Figure 8.1: Logical flow of requesting a database using OSB on a Kubernetes
    cluster'
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.1：在Kubernetes集群上使用OSB请求数据库的逻辑流程
- en: OSBA is an implementation of OSB for multiple Azure services. It allows a user
    to use the OSB API to create any of 14 supported Azure services. One of those
    services is Azure Database for MySQL. This means that you can define a MySQL database
    on Azure through OSBA without having to use the Azure portal.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: OSBA是用于多个Azure服务的OSB实现。它允许用户使用OSB API创建14种支持的Azure服务中的任何一种。其中一个服务是Azure Database
    for MySQL。这意味着您可以通过OSBA在Azure上定义一个MySQL数据库，而无需使用Azure门户。
- en: In the next section, we will focus on how to install OSBA on our cluster.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将专注于如何在我们的集群上安装OSBA。
- en: Installing OSBA on the cluster
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在集群上安装OSBA
- en: We will install OSBA on our cluster. There are two elements to this installation.
    First, we will install the Service Catalog extension on our cluster. After that,
    we can install OSBA on the cluster.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的集群上安装OSBA。这个安装有两个元素。首先，我们将在我们的集群上安装服务目录扩展。之后，我们可以在集群上安装OSBA。
- en: 'As we will be installing multiple components on our cluster, our two-node cluster
    won''t suffice for this example. Let''s proactively scale our AKS cluster to three
    nodes so we don''t run into any issues during this example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在我们的集群上安装多个组件，我们的双节点集群不足以满足这个示例。让我们主动将我们的AKS集群扩展到三个节点，这样我们在这个示例中就不会遇到任何问题：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This scaling will take a couple of minutes. When the cluster is scaled out to
    three nodes, we can start with deploying the Service Catalog on the cluster.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展将需要几分钟时间。当集群扩展到三个节点时，我们可以开始部署服务目录到集群上。
- en: '**Deploying the Service Catalog on the cluster**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**在集群上部署服务目录**'
- en: 'The Service Catalog provides the catalog servers that are required for the
    OSB. To deploy the Service Catalog on the cluster, follow these steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 服务目录提供了OSB所需的目录服务器。要在集群上部署服务目录，请按照以下步骤进行：
- en: 'Let''s deploy the Service Catalog by running the following commands:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令来部署服务目录：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Wait until the Service Catalog is deployed. You can check this by running the
    following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待服务目录部署完成。您可以通过运行以下命令来检查：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Verify that both Pods in the deployment are `Running` and fully ready:![The
    output screen represents the successful Service Catalog deployment using the kubectl
    get all -n catalog command. You will see four types of objects created, namely
    a pod catalog, service catalog, deployment catalog, and replicasetcatalog.](image/Figure_8.2.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证部署中的两个Pod都是`Running`并且完全准备就绪：![输出屏幕表示使用kubectl get all -n catalog命令成功部署服务目录。您将看到创建了四种类型的对象，即一个目录Pod，服务目录，部署目录和复制集目录。](image/Figure_8.2.jpg)
- en: 'Figure 8.2: Successful Service Catalog deployment'
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.2：成功部署服务目录
- en: 'To interface with the service broker, we need to install another CLI tool,
    namely `svcat`. We can do that with the following command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要与服务经纪人进行交互，我们需要安装另一个CLI工具，即`svcat`。我们可以使用以下命令来完成：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We now have a Service Catalog configured on top of our cluster. Now, we can
    move on and install OSBA on the cluster.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在我们的集群上配置了一个服务目录。现在，我们可以继续在集群上安装OSBA。
- en: Deploying OSBA
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署OSBA
- en: 'In this section, we will deploy the actual OSBA on our cluster. For this setup,
    we need to obtain the subscription ID, tenant ID, client ID, and secrets for OSBA
    to launch Azure services on our behalf:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在我们的集群上部署实际的OSBA。对于这个设置，我们需要获取订阅ID、租户ID、客户ID和OSBA启动Azure服务的凭据：
- en: 'Run the following command to obtain the required lists:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以获取所需的列表：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will be as shown in *Figure 8.3*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如*图8.3*所示：
- en: '![The screen displays the required list (the subscription ID and the tenant
    ID) using the az account list command.](image/Figure_8.3.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕显示所需列表（订阅ID和租户ID），使用az account list命令。](image/Figure_8.3.jpg)'
- en: 'Figure 8.3: Output displaying the required list – subscription ID and the tenant
    ID'
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.3：显示所需列表-订阅ID和租户ID的输出
- en: 'Copy your `subscription ID` along with the `tenant ID` and save it in an environment
    variable:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制您的`订阅ID`以及`租户ID`并将其保存在环境变量中：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a service principal with RBAC enabled so that it can launch Azure services.
    If you are sharing your subscription with somebody else, make sure that the name
    of the service principal is unique in your directory:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个启用了RBAC的服务主体，以便它可以启动Azure服务。如果您与其他人共享订阅，请确保服务主体的名称在您的目录中是唯一的：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will generate an output as shown in *Figure 8.4*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个如*图8.4*所示的输出：
- en: '![The output displays the service principal credentials such as AppID, DisplayName,
    Name, and the password using the az ad sp create-for-rbac --name osba-quickstart
    -o table command.](image/Figure_8.4.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示服务主体凭据，如AppID、DisplayName、Name和密码，使用az ad sp create-for-rbac --name osba-quickstart
    -o table命令。](image/Figure_8.4.jpg)'
- en: 'Figure 8.4: Output displaying service principal credentials'
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.4：显示服务主体凭据的输出
- en: Note
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For the previous step to complete successfully, you need to have the owner role
    on your Azure subscription.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使上一步成功完成，您需要在Azure订阅上拥有所有者角色。
- en: 'Save the values from the command output in the environment variable:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将命令输出的值保存在环境变量中：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can deploy OSBA as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以按以下方式部署OSBA：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To verify that everything got deployed correctly, you can run the following
    command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证一切都正确部署了，您可以运行以下命令：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Wait until both Pods are in the `Running` state. If one of the Pods is in the
    `Error` state, you don''t have to be concerned. The OSBA Pods will automatically
    restart and should reach a healthy state. In our case, one of the Pods restarted
    three times, as shown in *Figure 8.5*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 等待直到两个Pod都处于`Running`状态。如果其中一个Pod处于`Error`状态，您不必担心。OSBA Pods将自动重新启动并应达到健康状态。在我们的情况下，一个Pod重新启动了三次，如*图8.5*所示：
- en: '![The output will show the OSBA Pods with a status of Running using the kubectl
    get all -n osba command. Here, both the pods are in the Running state and one
    of the pods restarted three times.](image/Figure_8.5.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![输出将显示OSBA Pods的状态为Running，使用kubectl get all -n osba命令。在这里，两个Pod都处于Running状态，其中一个Pod重新启动了三次。](image/Figure_8.5.jpg)'
- en: 'Figure 8.5: Output displaying OSBA Pods in the Running status'
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.5：显示OSBA Pods处于Running状态的输出
- en: 'To verify that our deployment was completely successful, we can use the `svcat`
    utility we downloaded in the previous section:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证我们的部署完全成功，我们可以使用我们在上一节中下载的`svcat`实用程序：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This should show you your Azure broker:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示您的Azure经纪人：
- en: '![You can view the Azure broker running in the cluster using the ./svcat get
    brokers command.](image/Figure_8.6.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![您可以使用./svcat get brokers命令查看集群中运行的Azure经纪人。](image/Figure_8.6.jpg)'
- en: 'Figure 8.6: Output displaying the Azure broker running in the cluster'
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.6：显示集群中运行的Azure经纪人的输出
- en: 'You can additionally also verify all the services you can deploy via the OSBA
    driver:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以验证通过OSBA驱动程序可以部署的所有服务：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will show you a list of services that can be created using OSBA, as shown
    in *Figure 8.7*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示可以使用OSBA创建的服务列表，如*图8.7*所示：
- en: '![A (cropped) list of the services can be obtained by using the ./svcat get
    classes command. Here, you can see the Name along with the description. The namespace
    column in between the Name and description column is blank.](image/Figure_8.7.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![使用./svcat get classes命令可以获取（裁剪后的）服务列表。在这里，您可以看到名称以及描述。名称和描述之间的命名空间列为空白。](image/Figure_8.7.jpg)'
- en: 'Figure 8.7: A (cropped) list of the services that can be created using OSBA'
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.7：可以使用OSBA创建的服务（裁剪后）列表
- en: In this section, we set up the Service Catalog and OSBA on our cluster. This
    means we can now create managed services by Azure from our cluster. We will use
    this capability in the next section, when we deploy WordPress using an Azure-managed
    database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在我们的集群上设置了服务目录和OSBA。这意味着我们现在可以通过Azure从我们的集群创建托管服务。在下一节中，当我们使用Azure托管的数据库部署WordPress时，我们将使用这种能力。
- en: Deploying WordPress
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署WordPress
- en: 'The following are the steps to deploy WordPress:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是部署WordPress的步骤：
- en: 'Run the following command to install WordPress:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令安装WordPress：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To verify the status of the WordPress Pod, run the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证WordPress Pod的状态，请运行以下命令：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should show the status of a single WordPress Pod as displayed in *Figure
    8.8*. In our previous WordPress examples, we always had two Pods running, but
    we were able to offload the database functionality to Azure here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示单个WordPress Pod的状态，如*图8.8*所示。在我们之前的WordPress示例中，我们总是有两个运行的Pod，但是我们能够在这里将数据库功能卸载到Azure：
- en: '![This image shows that the wordpress deployment only creates a single pod.
    You will see the name of the pod and whetherit is in the Ready state. It also
    shows the status ofContainerCreating, the number of times it restarted, and the
    time taken to obtain this status.](image/Figure_8.8.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![这张图片显示了wordpress部署只创建了一个单独的pod。您将看到pod的名称以及它是否处于Ready状态。它还显示了ContainerCreating的状态，它重新启动的次数以及获取此状态所花费的时间。](image/Figure_8.8.jpg)'
- en: 'Figure 8.8: Output displaying only one WordPress Pod and no database on our
    cluster'
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.8：仅显示一个WordPress Pod和我们集群中没有数据库的输出
- en: 'While the WordPress Pod is being created, we can check on the status of the
    database as well. We can use two tools to get this status, either `svcat` or `kubectl`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建WordPress Pod时，我们还可以检查数据库的状态。我们可以使用两种工具来获取此状态，要么是`svcat`，要么是`kubectl`：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will generate the output shown in *Figure 8.9*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成如*图8.9*所示的输出：
- en: '![Using the ./svcat get instances -n wordpress command you can get your MySQL
    instance. You will see the name, namespace, class, plan, and status.](image/Figure_8.9.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![使用./svcat get instances -n wordpress命令，您可以获取您的MySQL实例。您将看到名称，命名空间，类别，计划和状态。](image/Figure_8.9.jpg)'
- en: 'Figure 8.9: Output displaying the use of svcat to get our MySQL instance'
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.9：显示使用svcat获取我们的MySQL实例的输出
- en: 'We can get a similar result by using `kubectl`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`kubectl`获得类似的结果：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will generate an output as shown in *Figure 8.10*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成如*图8.10*所示的输出：
- en: '![The output represents the use of svcat to get our MySQL instance using the
    kubectl get serviceinstances -n wordpress command. You will see the name, class,
    plan, status and the age.](image/Figure_8.10.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![输出代表使用svcat使用kubectl get serviceinstances -n wordpress命令获取我们的MySQL实例。您将看到名称，类别，计划，状态和年龄。](image/Figure_8.10.jpg)'
- en: 'Figure 8.10: Output displaying the use of kubectl to get our MySQL instance'
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.10：显示使用kubectl获取我们的MySQL实例的输出
- en: As you can see, the outputs of each method are similar.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，每种方法的输出都是相似的。
- en: 'Give the deployment a couple of minutes to complete. First, the database needs
    to be fully provisioned, and afterward, the WordPress Pod needs to enter the `Running`
    state. To verify everything is running correctly, check the status of the WordPress
    Pod and ensure it is `Running`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请给部署几分钟的时间来完成。首先，需要完全配置数据库，然后WordPress Pod需要进入“运行”状态。要验证一切是否正常运行，请检查WordPress
    Pod的状态，并确保它处于“运行”状态：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will generate an output as shown in *Figure 8.11*:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个如*图8.11*所示的输出：
- en: '![The output displays an output showing the use of kubectl to get our MySQL
    instance using the kubectl get pods -n wordpress command. You will see the Status
    change to Running after a time frame.](image/Figure_8.11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示了使用kubectl获取我们的MySQL实例的kubectl get pods -n wordpress命令的输出。在一段时间后，您将看到状态更改为Running。](image/Figure_8.11.jpg)'
- en: 'Figure 8.11: Output displaying the status of WordPress Pod'
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.11：显示WordPress Pod的状态的输出
- en: We have now deployed WordPress using an Azure-managed database. However, the
    connectivity to our database, by default, is open to the internet. We will change
    this in the following section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经部署了使用Azure托管数据库的WordPress。但是，默认情况下，对我们的数据库的连接是对互联网开放的。我们将在下一节中更改这一点。
- en: Securing MySQL
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保护MySQL
- en: Although many steps are automated for us, this doesn't mean our MySQL database
    is production-ready. For instance, the network settings for MySQL Server have
    a default rule that allows traffic from everywhere. We will change this to a more
    secure service endpoint rule, also called **VNet rules**.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多步骤都是自动化的，但这并不意味着我们的MySQL数据库已经可以投入生产。例如，MySQL服务器的网络设置具有允许来自任何地方的流量的默认规则。我们将把这个更改为更安全的服务端点规则，也称为**VNet规则**。
- en: A service endpoint in Azure is a security connection between the network (also
    called a VNet) you use for your deployment and the service it connects to. In
    the case of AKS and MySQL, this would make a secure connection between the VNet
    that AKS is deployed into and the MySQL service.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure中，服务端点是您用于部署的网络（也称为VNet）与其连接的服务之间的安全连接。在AKS和MySQL的情况下，这将在AKS部署的VNet和MySQL服务之间建立安全连接。
- en: 'We will configure our MySQL database to use a service endpoint in this section:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置我们的MySQL数据库以使用服务端点：
- en: To make this change, look for `mysql` in the Azure search bar:![Type mysql in
    the Azure search bar to find it.](image/Figure_8.12.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行此更改，请在Azure搜索栏中搜索`mysql`：![在Azure搜索栏中键入mysql以找到它。](image/Figure_8.12.jpg)
- en: 'Figure 8.12: Searching for MySQL in the Azure search bar'
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.12：在Azure搜索栏中搜索MySQL
- en: In the MySQL blade, go to **Connection security** in the left-hand navigation:![In
    the MySQL blade, click on the connection security tab on the left-hand side.](image/Figure_8.13.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MySQL资源的资源页面中，转到左侧导航中的**连接安全**：![在MySQL资源的资源页面中，单击左侧的连接安全选项卡。](image/Figure_8.13.jpg)
- en: 'Figure 8.13: Clicking on Connection security'
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.13：点击连接安全
- en: There is a default rule that allows a connection to the database from any IP
    address. You can add the AKS VNet to the **VNet rules** section and delete the
    **AllowAll 0.0.0.0** rule, as shown in *Figure 8.14*:![In the Azure Database for
    MySQL servers, click on the connection security tab located on the left side of
    the screen. This will allow you to add the AKS VNet to the VNet rules section
    and delete the AllowAll rule.](image/Figure_8.14.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个默认规则允许从任何IP地址连接到数据库。您可以将AKS VNet添加到**VNet规则**部分，并删除**AllowAll 0.0.0.0**规则，如*图8.14*所示：![在Azure
    Database for MySQL服务器中，单击位于屏幕左侧的连接安全选项卡。这将允许您将AKS VNet添加到VNet规则部分并删除AllowAll规则。](image/Figure_8.14.jpg)
- en: 'Figure 8.14: Adding your AKS VNet to the VNet rules section and deleting the
    AllowAll rule'
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.14：将您的AKS VNet添加到VNet规则部分并删除AllowAll规则
- en: We have reduced the attack surface tremendously by performing this simple change.
    We can now connect to our WordPress site.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进行这个简单的改变，我们大大减少了攻击面。现在我们可以连接到我们的WordPress网站。
- en: Connecting to the WordPress site
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到WordPress网站
- en: 'You can verify that your blog site is available and running by using `EXTERNAL_IP`,
    which is obtained by running the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用`EXTERNAL_IP`来验证您的博客网站是否可用和运行，该IP是通过运行以下命令获得的：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will generate an output as shown *Figure 8.15*:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个如*图8.15*所示的输出：
- en: '![The output displays the external IP of the service using the kubectl get
    service -n wordpress command.](image/Figure_8.15.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl get service -n wordpress命令显示服务的外部IP。](image/Figure_8.15.jpg)'
- en: 'Figure 8.15: Output displaying the external IP of the service'
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.15：显示服务外部IP的输出
- en: 'Then, open a web browser and go to `http://<EXTERNAL_IP>/`. You should see
    your brand new blog:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开一个网页浏览器，转到`http://<EXTERNAL_IP>/`。您应该会看到您全新的博客：
- en: '![The screen will display the default look of the WordPress blog.](image/Figure_8.16.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕将显示WordPress博客的默认外观。](image/Figure_8.16.jpg)'
- en: 'Figure 8.16: The final look of the WordPress blog'
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.16：WordPress博客的最终外观
- en: In this section, we have launched a WordPress site that is backed by an Azure-managed
    database. We have also secured it by modifying the firewall. In the next section,
    we will go through the advantages of letting Azure manage your database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们启动了一个由Azure托管的WordPress网站，并对其进行了防火墙修改以确保安全。在接下来的部分，我们将介绍让Azure管理数据库的优势。
- en: Exploring advanced database operations
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索高级数据库操作
- en: Running your database as a managed service on top of Azure has many advantages.
    In this section, we'll explore those benefits. We will explore restoring from
    a backup, how you can set up disaster recovery, and how you can access audit logs
    to verify who made changes to your database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure顶层作为托管服务运行数据库有许多优势。在本节中，我们将探讨这些好处。我们将探讨从备份中恢复，如何设置灾难恢复以及如何访问审计日志以验证谁对您的数据库进行了更改。
- en: We'll begin by restoring our database from a backup.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从备份中恢复我们的数据库开始。
- en: Restoring from a backup
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从备份恢复
- en: 'When you run a database within your Kubernetes cluster, **high availability**
    (**HA**), backups, and DR are your responsibilities. Let''s take some time to
    explain the differences between those three concepts:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Kubernetes集群中运行数据库时，**高可用性**（**HA**）、备份和灾难恢复是您的责任。让我们花点时间来解释这三个概念之间的区别：
- en: '**HA**: HA refers to local redundancy in a service to ensure that the service
    remains available in the event that a single component fails. This means setting
    up multiple replicas of a service and coordinating the state between them. In
    a database context, this means setting up a database cluster.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HA**：HA指的是服务的本地冗余，以确保在单个组件故障时服务仍然可用。这意味着设置服务的多个副本并协调它们之间的状态。在数据库上下文中，这意味着设置数据库集群。'
- en: The Azure Database for MySQL service comes with HA built in. It offers, at the
    time of writing, an availability SLA of 99.99% per month.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Database for MySQL服务内置了HA。在撰写本文时，它提供了每月99.99%的可用性SLA。
- en: '**Backups**: Backups refer to making historical copies of your data. Backups
    are useful when something unforeseen happens to your data, such as accidental
    data deletion or data being overwritten. If you run your own database, you need
    to set up `cron` jobs to take backups and store them separately.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备份**：备份是指对数据进行历史性的复制。当数据发生意外情况时，如意外数据删除或数据被覆盖时，备份是非常有用的。如果您自己运行数据库，您需要设置`cron`作业来进行备份并将其单独存储。'
- en: Azure Database for MySQL handles backups automatically, without additional configuration.
    The service takes a backup every 5 minutes and makes it possible for you to restore
    to any point in time. Backups are retained by default for 7 days, with optional
    configuration making it possible to keep backups for up to 25 days.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Database for MySQL会自动处理备份，无需额外配置。该服务每5分钟进行一次备份，并使您能够恢复到任何时间点。备份默认保留7天，可选配置使备份保留时间延长至25天。
- en: '**DR**: DR refers to the ability of a system to recover from a disaster. This
    typically refers to the ability to recover from a full regional outage. If you
    run your own database, this would involve setting up a secondary database in a
    second region and replicating data to that database.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DR**：DR指的是系统从灾难中恢复的能力。这通常指的是从完全区域性停机中恢复的能力。如果您运行自己的数据库，这将涉及在第二区域设置一个辅助数据库，并将数据复制到该数据库。'
- en: In the case of Azure Database for MySQL, it is easy to configure DR. The service
    makes it possible to set up a secondary managed database and replicate data from
    your primary region to the secondary region.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure Database for MySQL的情况下，很容易配置DR。该服务可以设置一个辅助托管数据库，并将数据从主要区域复制到辅助区域。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: You can refer to [https://docs.microsoft.com/azure/mysql/concepts-backup](https://docs.microsoft.com/azure/mysql/concepts-backup)
    to find up-to-date information on the backup frequency, replication, and restore
    options.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考[https://docs.microsoft.com/azure/mysql/concepts-backup](https://docs.microsoft.com/azure/mysql/concepts-backup)获取有关备份频率、复制和恢复选项的最新信息。
- en: The terms HA, backup, and DR often get confused with each other. It is important
    to use the right terminology and for you to understand the difference between
    the three concepts. In this section, we'll focus on backups, and we'll perform
    a restore from our WordPress database. To demonstrate that the restore operation
    will restore user data, we will first create a blog post.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 术语HA、备份和DR经常被混淆。使用正确的术语并理解这三个概念之间的区别非常重要。在本节中，我们将重点关注备份，并从我们的WordPress数据库执行恢复。为了证明恢复操作将恢复用户数据，我们将首先创建一个博客帖子。
- en: '**Creating a blog post on WordPress**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**在WordPress上创建博客帖子**'
- en: 'We will create a blog post to demonstrate that the restore operation will capture
    new data that we generate on the database. To be able to make this post, we need
    the admin credentials for our site. We will first get those credentials and then
    make a new post:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一篇博客文章，以证明恢复操作将捕获我们在数据库上生成的新数据。为了能够发布这篇文章，我们需要我们站点的管理员凭据。我们将首先获取这些凭据，然后发布一篇新文章：
- en: 'To get the admin credentials, use the following command:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取管理员凭据，请使用以下命令：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will show you the password to connect to your admin website:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示您连接到管理员网站的密码：
- en: '![Using the command provided by Helm to get the password of the WordPress admin
    user.](image/Figure_8.17.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![使用Helm提供的命令获取WordPress管理员用户的密码。](image/Figure_8.17.jpg)'
- en: 'Figure 8.17: Getting the admin credentials'
  id: totrans-145
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.17：获取管理员凭据
- en: Now browse to `http://<EXTERNAL IP>/admin` to open the admin page for the WordPress
    site. Use the username `user` and the password from the previous step to log in.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在浏览`http://<EXTERNAL IP>/admin`以打开WordPress站点的管理页面。使用用户名`user`和上一步的密码登录。
- en: Once connected, select the **Write your first blog post** link:![On the dashboard,
    you will see a welcome message where you will find the "Write your first blog
    post"link located below the Next Steps title. Click on this link.](image/Figure_8.18.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接后，选择**撰写您的第一篇博客文章**链接：![在仪表板上，您将看到一个欢迎消息，您将在“下一步”标题下找到“撰写您的第一篇博客文章”的链接。单击此链接。](image/Figure_8.18.jpg)
- en: 'Figure 8.18: Clicking the link to write a post'
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.18：单击链接撰写帖子
- en: Create a blog post. The content isn't important. Once you are happy with your
    blog post, select the **Publish** button to save and publish the blog post:![After
    typing the content on the blog, go to the Publish tab on the rightside of the
    window. Click on the Publish button under this tab to save and publish it.](image/Figure_8.19.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一篇博客文章。内容并不重要。一旦您满意您的博客文章，选择**发布**按钮保存并发布博客文章：![在博客上输入内容后，转到窗口右侧的发布选项卡。点击该选项卡下的发布按钮来保存并发布。](image/Figure_8.19.jpg)
- en: 'Figure 8.19: Creating a sample blog post and clicking the Publish button to
    save it'
  id: totrans-150
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.19：创建一个示例博客文章并点击发布按钮保存
- en: You can now connect to `http://<EXTERNAL IP>` to see your blog post:![On clicking
    on the Publish button, you will see a white screen with a message- this blog post
    will confirm backup and restore. This shows the successful status of the blog
    post.](image/Figure_8.20.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以连接到`http://<EXTERNAL IP>`来查看您的博客文章：![单击发布按钮后，您将看到一个白屏，上面有一条消息-这篇博客文章将确认备份和恢复。这显示了博客文章的成功状态。](image/Figure_8.20.jpg)
- en: 'Figure 8.20: Note displaying the successful status of the blog post'
  id: totrans-152
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.20：显示博客文章成功状态的提示
- en: Now that we have a blog post saved, please wait for at least 5 minutes. Azure
    takes a backup of the MySQL database every 5 minutes, and we want to make sure
    that our new data has been backed up. Once those 5 minutes have passed, we can
    continue to the next step and perform the actual restore.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经保存了一篇博客文章，请至少等待5分钟。Azure每5分钟对MySQL数据库进行一次备份，我们要确保我们的新数据已经备份。一旦过了这5分钟，我们就可以继续下一步，执行实际的恢复。
- en: '**Performing a restore**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行恢复**'
- en: 'We now have actual content on our blog and in the database. Let''s assume that
    during an update, the database was corrupted, and so we want to do a point-in-time
    restore:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的博客和数据库中都有实际内容。假设在更新过程中，数据库损坏了，所以我们想进行时间点恢复：
- en: To start the restore operation, click on **Restore** in the MySQL blade in the
    Azure portal:![In the Azure Database for MySQL servers portal, you will see a
    Restore button atthe topof the screen. Click on it to initiate the restore process.](image/Figure_8.21.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始恢复操作，请在Azure门户中的MySQL选项卡上点击**恢复**：![在Azure Database for MySQL servers门户中，您会看到屏幕顶部有一个“恢复”按钮。点击它来启动恢复过程。](image/Figure_8.21.jpg)
- en: 'Figure 8.21: Clicking the Restore button to initiate the restore process'
  id: totrans-157
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.21：点击恢复按钮来启动恢复过程
- en: Then, you need to choose the point in time from which you want to perform the
    restore. This point in time can be the current time. Give the restored database
    a name, which must be unique as shown in *Figure 8.22*. Finally, click **OK**.
    After approximately 5 to 10 minutes, the MySQL service should be restored:![Upon
    clicking the Restore button, you will get a window in which you need to enter
    the date and time you want to perform the restore. Give the restored database
    a unique name and click on OK.](image/Figure_8.22.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要选择要执行恢复的时间点。这个时间点可以是当前时间。给恢复的数据库起一个名字，这个名字必须是唯一的，如*图8.22*所示。最后，点击**确定**。大约5到10分钟后，MySQL服务应该会恢复：![单击“恢复”按钮后，将会弹出一个窗口，您需要在其中输入要执行恢复的日期和时间。给恢复的数据库起一个唯一的名字，然后点击确定。](image/Figure_8.22.jpg)
- en: 'Figure 8.22: Selecting the point in time to restore and clicking the OK button'
  id: totrans-159
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.22：选择要恢复的时间点并点击确定按钮
- en: In this section, we restored our MySQL database. When the restore operation
    is complete, one step remains, which is to connect WordPress to the restored database.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们恢复了我们的MySQL数据库。当恢复操作完成后，还有一步需要完成，那就是将WordPress连接到恢复的数据库。
- en: '**Connecting WordPress to the restored database**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**将WordPress连接到恢复的数据库**'
- en: 'The restore operation created a new instance of the database. To make our WordPress
    installation connect to the restored database, we need to modify the Kubernetes
    deployment files. Ideally, you will modify the Helm values file and perform a
    Helm upgrade; however, that is beyond the scope of this book. The following steps
    will help you connect WordPress to the restored database:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复操作创建了数据库的新实例。为了使我们的WordPress安装连接到恢复的数据库，我们需要修改Kubernetes部署文件。理想情况下，您将修改Helm值文件并执行Helm升级；然而，这超出了本书的范围。以下步骤将帮助您将WordPress连接到恢复的数据库：
- en: From the Azure portal, note down the **Server name**, as shown in *Figure 8..23*:![The
    screen shows the details of the restored database. Note down the server name given
    in the top-right corner of the portal.](image/Figure_8.23.jpg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Azure门户中，记下**服务器名称**，如*图8.23*所示：![屏幕显示了恢复的数据库的详细信息。记下门户右上角给出的服务器名称。](image/Figure_8.23.jpg)
- en: 'Figure 8.23: Displaying the full name of the restored database'
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.23：显示恢复的数据库的完整名称
- en: Also, modify **Connection security**, as we did before, to allow the cluster
    to talk to the restored database. Remove the Allow All rule and add a VNet rule
    to the network of your AKS cluster. The result is shown in *Figure 8.24*:![In
    the Azure Database for MySQL servers, click on the connection security tab located
    in the navigation pane on the left side of the screen. When you edit the information,
    the screen will display a "No firewalls configured"message.](image/Figure_8.24.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要修改**连接安全性**，就像之前一样，以允许集群与恢复的数据库通信。删除所有规则并向AKS集群的网络添加VNet规则。结果如*图8.24*所示：![在Azure
    Database for MySQL服务器中，单击位于屏幕左侧导航窗格上的连接安全选项卡。当您编辑信息时，屏幕将显示“未配置防火墙”的消息。](image/Figure_8.24.jpg)
- en: 'Figure 8.24: Editing the connection security for the restored database'
  id: totrans-166
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.24：编辑恢复的数据库的连接安全性
- en: 'Next, we need to connect our WordPress Pod to the new database. Let''s point
    out how that happens. To get that info, run the following command:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将我们的WordPress Pod连接到新的数据库。让我们指出这是如何发生的。要获取这些信息，请运行以下命令：
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can see that the values to connect to the database are obtained from a
    secret, as shown in *Figure 8.25*:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到连接到数据库的值是从一个secret中获取的，如*图8.25*所示：
- en: '![Output displays a list of environment variables such as host, port number,
    database name, database user, and password. The values to connect the database
    to WordPress are obtained from a Secret.](image/Figure_8.25.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示一系列环境变量，如主机、端口号、数据库名称、数据库用户和密码。连接数据库到WordPress的值是从一个Secret中获取的。](image/Figure_8.25.jpg)'
- en: 'Figure 8.25: Displaying the environment variables for the WordPress Pod'
  id: totrans-171
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.25：显示WordPress Pod的环境变量
- en: 'During the setup of WordPress, the installer will save this configuration in
    a file: `/bitname/wordpress/wp-config.php`. In the next steps, we''ll first edit
    the secret and then reconfigure `wp-config.php`.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置WordPress时，安装程序将在文件`/bitname/wordpress/wp-config.php`中保存此配置。在接下来的步骤中，我们将首先编辑secret，然后重新配置`wp-config.php`。
- en: 'To set secrets, we need the `base64` value. Obtain the `base64` value of the
    server name by running the following command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置secrets，我们需要`base64`值。通过运行以下命令获取服务器名称的`base64`值：
- en: '[PRE20]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note the `base64` value.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`base64`值。
- en: 'Now, we''ll go ahead and edit the hostname in the secret. To do this, we''ll
    use the `edit` command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将继续编辑Secret中的主机名。为此，我们将使用`edit`命令：
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will open up a `vi` editor. Navigate to the line that contains `host`
    and press the `I` button. Delete the current value for the host and paste in the
    new `base64` encoded value. Then hit *Esc*, type :`wq!`, and hit *Enter*. Your
    secret should look as shown in *Figure 8.26*:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个`vi`编辑器。导航到包含`host`的行并按`I`按钮。删除主机的当前值，并粘贴新的`base64`编码值。然后按*Esc*，输入：`wq!`，然后按*Enter*。您的密钥应如*图8.26*所示：
- en: '![Navigate to the host line upon opening the vi editor. Delete the current
    value of the host and paste the base64-encoded value instead. This will change
    the secret.](image/Figure_8.26.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![打开vi编辑器后，导航到主机行。删除主机的当前值，并粘贴base64编码的值。这将更改密钥。](image/Figure_8.26.jpg)'
- en: 'Figure 8.26: Editing the host line to contain the base64 encoded value of the
    new server name'
  id: totrans-180
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.26：编辑主机行，包含新服务器名称的base64编码值
- en: 'Next, we''ll need to change this in the `wp-config.php` file as well. To do
    this, let''s `exec` into the current WordPress container and change that value:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们还需要在`wp-config.php`文件中进行更改。为此，让我们`exec`进入当前的WordPress容器并更改该值：
- en: '[PRE22]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will again open a `vi` editor. Navigate to line 32, which contains the
    `DB_HOST` config line. Hit `I` to enter insert mode, and delete the current value
    and replace that with the restored database''s name as shown in *Figure 8.27*.
    Then hit *Esc*, type :`wq!`, and hit *Enter*. Make sure to paste in the real value,
    not the `base64` encoded one:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这将再次打开`vi`编辑器。导航到包含`DB_HOST`配置行的第32行。按`I`进入插入模式，删除当前值，并用*图8.27*中显示的恢复数据库的名称替换。然后按*Esc*，输入：`wq!`，然后按*Enter*。确保粘贴真实值，而不是`base64`编码的值：
- en: '![In the vi editor, go to line 32,which contains the database hostname. Replace
    this name with the restored database''s name. This will generate an output screen
    with the name of a restored database.](image/Figure_8.27.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![在vi编辑器中，转到包含数据库主机名的第32行。将此名称替换为恢复数据库的名称。这将生成一个显示恢复数据库名称的输出屏幕。](image/Figure_8.27.jpg)'
- en: 'Figure 8.27: Changing the name of the database to the restored database'
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.27：将数据库名称更改为恢复的数据库
- en: 'Then, exit out of the Pod with the following command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令退出Pod：
- en: '[PRE23]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Even though we have now reset the secret value and the config file, this doesn't
    mean that our server will automatically pick up the new value. We'll have to restart
    our Pod now to ensure the config is read in again.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们现在已重置了密钥值和配置文件，但这并不意味着我们的服务器会自动获取新值。我们现在必须重新启动Pod，以确保配置再次被读取。
- en: 'There are many ways to do this, and we are going to delete the existing Pod.
    Once this Pod is deleted, our `ReplicaSet` controller will pick up on this and
    create a new Pod. To delete the Pod, use the following command:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有许多方法可以做到这一点，我们将删除现有的Pod。一旦删除了这个Pod，我们的`ReplicaSet`控制器将注意到这一点并创建一个新的Pod。要删除Pod，请使用以下命令：
- en: '[PRE24]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After a couple of seconds, you should see a new Pod being created. It will
    take between 5 and 10 minutes for that new Pod to come online. Once it is online,
    you can watch the container logs from that Pod and verify that you are indeed
    connected to the new database:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，您应该看到正在创建一个新的Pod。新的Pod上线需要5到10分钟。一旦上线，您可以观看该Pod的容器日志，并验证您确实连接到了新的数据库：
- en: '[PRE25]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This should contain a line as shown in *Figure 8.28*:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该包含如*图8.28*所示的一行：
- en: '![The kubectl logs <new wordpress pod> -n wordpress command generates an output
    that displays logs of the WordPress Pod that is connected to the restored database.](image/Figure_8.28.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![kubectl logs <new wordpress pod> -n wordpress命令生成一个输出，显示连接到恢复数据库的WordPress
    Pod的日志。](image/Figure_8.28.jpg)'
- en: 'Figure 8.28: Logs displaying the WordPress Pod connected to the restored database'
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.28：显示连接到恢复数据库的WordPress Pod的日志
- en: 'This shows us that we are now connected to our restored database. We can confirm
    that the actual content was restored. You can connect to the WordPress site itself
    by browsing to `http://<EXTERNAL IP>`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们现在已连接到我们恢复的数据库。我们可以确认实际内容已经恢复。您可以通过浏览到`http://<EXTERNAL IP>`来连接到WordPress网站本身：
- en: '![On clicking connecting to the WordPress site, you will see a white screen
    with a message saying this blog post will confirm backup and restore. This shows
    the successful restoration of the blog post.](image/Figure_8.29.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![单击连接到WordPress网站后，您将看到一个白屏，上面显示着一条消息，确认备份和恢复。这表明博客文章已成功恢复。](image/Figure_8.29.jpg)'
- en: 'Figure 8.29: Note displaying the successful restoration of the blog post'
  id: totrans-198
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.29：显示博客文章成功恢复的说明
- en: In this section, we explored the backup and restore capabilities of Azure Database
    for MySQL. We published a blog post and restored the database where this blog
    post was stored. We connected our WordPress instance to the restored database
    and were able to verify that the blog post was successfully restored.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了Azure Database for MySQL的备份和恢复能力。我们发布了一篇博客文章，并恢复了存储该博客文章的数据库。我们将我们的WordPress实例连接到恢复的数据库，并能够验证博客文章已成功恢复。
- en: Performing backups is just one of the capabilities of Azure Database for MySQL.
    In the next section, we will explore the DR capabilities of the service.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 执行备份只是Azure Database for MySQL的能力之一。在下一节中，我们将探讨该服务的灾难恢复能力。
- en: Disaster Recovery (DR) options
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 灾难恢复（DR）选项
- en: Depending on your application requirements and DR needs, you can add replicas
    to your MySQL server. Replicas can be created either in the same region to improve
    read performance or in a secondary region.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的应用程序要求和灾难恢复需求，您可以向MySQL服务器添加副本。副本可以在同一区域创建，以提高读取性能，也可以在辅助区域创建。
- en: If you are preparing for a DR scenario, you will need to set up a replica in
    a secondary region. This will protect you from regional Azure outages. When you
    set this up, Azure will asynchronously replicate data from the master server to
    the replica server you set up. While replication is ongoing, the replica server
    can be used to read from, but cannot be used to write to. If a disaster occurs,
    meaning an Azure region has a regional outage, you would need to stop replication
    to turn the replica server into a server capable of serving both read and write
    requests.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在为灾难恢复场景做准备，您需要在辅助区域设置一个副本。这将保护您免受Azure区域性故障的影响。设置这一点时，Azure将会异步地将数据从主服务器复制到您设置的副本服务器。在复制进行时，副本服务器可以用于读取，但不能用于写入。如果发生灾难，意味着Azure区域发生了区域性故障，您需要停止复制，将副本服务器变成一个能够同时提供读取和写入请求的服务器。
- en: 'It is very straightforward to create a replica in a new region. Although setting
    up and testing replication is out of the scope of this book, we will show how
    this can be set up. To configure replication, you need to open the **Replication**
    tab in the MySQL blade, as shown in *Figure 8.30*:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在新区域创建副本非常简单。虽然设置和测试复制不在本书的范围内，但我们将展示如何设置。要配置复制，您需要在MySQL刀片中打开**复制**选项卡，如*图8.30*所示：
- en: '![To create a replica via the Azure portal, click on the Replication tab in
    the MySQL blade on the left side of the navigation pane. No results are shown
    for the replicas. On the right side of the screen enter the server name and the
    location. This will show you the monthly cost.](image/Figure_8.30.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![要通过Azure门户创建副本，请单击导航窗格左侧的MySQL刀片中的复制选项卡。副本不显示任何结果。在屏幕右侧输入服务器名称和位置。这将显示每月成本。](image/Figure_8.30.jpg)'
- en: 'Figure 8.30: Creating a replica via the Azure portal'
  id: totrans-206
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.30：通过Azure门户创建副本
- en: Note
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: A full list of backup, restore, and replication options are documented at [https://docs.microsoft.com/azure/mysql/concepts-backup](https://docs.microsoft.com/azure/mysql/concepts-backup)
    and [https://docs.microsoft.com/azure/mysql/concepts-read-replicas](https://docs.microsoft.com/azure/mysql/concepts-read-replicas).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 备份、恢复和复制选项的完整列表在[https://docs.microsoft.com/azure/mysql/concepts-backup](https://docs.microsoft.com/azure/mysql/concepts-backup)和[https://docs.microsoft.com/azure/mysql/concepts-read-replicas](https://docs.microsoft.com/azure/mysql/concepts-read-replicas)中有文档记录。
- en: In this section, we described the capability of Azure Database for MySQL to
    replicate to a secondary region. This replica can be used to build a DR strategy
    for your database. In the next section, we will cover how the activity log can
    be used to audit who has made changes to your server.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们描述了Azure Database for MySQL复制到辅助区域的能力。这个副本可以用来为您的数据库构建DR策略。在下一节中，我们将介绍如何使用活动日志来审计谁对您的服务器进行了更改。
- en: Reviewing audit logs
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查审计日志
- en: A database contains business-critical data. You will want to have a logging
    system in place that can show you who has made changes to your database.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库包含业务关键数据。您将希望有一个日志记录系统，可以显示谁对您的数据库进行了更改。
- en: When you run the database on the Kubernetes cluster, it is difficult to get
    audit logs if something goes wrong. You need a robust way of dynamically setting
    the audit level depending on the scenario. You also have to ensure that the logs
    are shipped outside the cluster.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Kubernetes集群上运行数据库时，如果出现问题，很难获取审计日志。您需要一种强大的动态设置审计级别的方式，具体取决于情况。您还必须确保日志被运送到集群外部。
- en: 'The Azure Database for MySQL service solves the preceding issues by providing
    a robust auditing mechanism via the Azure portal. The service has two different
    views into logs:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Database for MySQL服务通过Azure门户提供了强大的审计机制来解决上述问题。该服务有两种不同的日志视图：
- en: '**Activity logs**: The activity logs show you all the changes that happened
    to the Azure object of your database. Azure records all create, update, and delete
    transactions against Azure resources, and keeps those logs for 90 days. In the
    case of MySQL, this means all changes to the size, to the backup and replication
    settings, and so on. These logs are useful to determine who made changes to your
    database.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动日志**：活动日志显示发生在数据库Azure对象上的所有更改。Azure记录所有针对Azure资源的创建、更新和删除事务，并将这些日志保存90天。对于MySQL来说，这意味着对大小、备份和复制设置等的所有更改。这些日志对于确定谁对您的数据库进行了更改非常有用。'
- en: '**Server logs**: The server logs include logs from the actual data in your
    database. MySQL has multiple logs available that can be configured. It is typically
    recommended to turn on audit logging to verify who has accessed your database
    and to turn on slow query monitoring to track any queries that are running slowly.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器日志**：服务器日志包括来自数据库中实际数据的日志。MySQL有多个可配置的日志可用。通常建议打开审计日志以验证谁访问了您的数据库，并打开慢查询监视以跟踪运行缓慢的任何查询。'
- en: 'Let''s have a look at both logs:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一起看看这两种日志：
- en: To access the activity logs, open the MySQL database blade in the Azure portal.
    In the left-hand navigation, look for **Activity log**. This will open the activity
    log view, as in *Figure 8.31*:![Click on the Activity logs tab located in the
    leftpane of the Azure portal. You will see the actions taken against the respective
    Azure databases.](image/Figure_8.31.jpg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问活动日志，请在Azure门户中打开MySQL数据库刀片。在左侧导航中，寻找**活动日志**。这将打开活动日志视图，如*图8.31*所示：![单击Azure门户左侧窗格中的活动日志选项卡。您将看到针对相应Azure数据库执行的操作。](image/Figure_8.31.jpg)
- en: 'Figure 8.31: Azure activity logs showing the actions taken against the Azure
    database'
  id: totrans-218
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.31：Azure活动日志显示针对Azure数据库执行的操作
- en: The Activity log provides very valuable information in retracing the activities
    that have been performed. You should find events in the activity log that point
    to the changes you made earlier to the connection security settings.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 活动日志提供了非常有价值的信息，可以追溯已执行的活动。您应该在活动日志中找到指向您之前对连接安全设置所做更改的事件。
- en: Server logs can be obtained by looking for **Server logs** in the left-hand
    navigation. Server logs aren't turned on by default, as can be seen in *Figure
    8.32*:![If you click on the server logs tab in the navigation pane on the leftside
    of the Azure portal, it will indicate that there are no server logs by default.](image/Figure_8.32.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器日志可以通过在左侧导航中查找**服务器日志**来获取。服务器日志默认情况下未打开，如*图8.32*所示：![如果您在Azure门户的导航窗格左侧单击服务器日志选项卡，它将指示默认情况下没有服务器日志。](image/Figure_8.32.jpg)
- en: 'Figure 8.32: Navigation displaying no sever logs by default'
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.32：导航显示默认情况下没有服务器日志
- en: Let's turn on the server logs. We will enable the audit log and monitoring for
    performance issues by enabling the `log_slow...` statements and `slow_query_log`,
    as shown in *Figure 8.33*:![Once the server parameters page opens, click on the
    parameters with names such as log_slow... statement and slow_query_log. Ensure
    that their values are ON.](image/Figure_8.33.jpg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开服务器日志。我们将通过启用`log_slow...`语句和`slow_query_log`来启用审计日志和性能监控，如*图8.33*所示：![一旦服务器参数页面打开，点击名称为log_slow...语句和slow_query_log的参数。确保它们的值为ON。](image/Figure_8.33.jpg)
- en: 'Figure 8.33: Enabling the audit log and slow query logging'
  id: totrans-223
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.33：启用审计日志和慢查询日志
- en: 'Once you have turned on these logs, it will take a couple of minutes for the
    actual logs to show up. After a couple of minutes, you should see the logs in
    the **Server logs** tab in the Azure portal as shown in *Figure 8.34*:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您打开了这些日志，实际日志将需要几分钟时间才能显示出来。几分钟后，您应该在Azure门户中的**服务器日志**选项卡中看到日志，如*图8.34*所示：
- en: '![After a couple of minutes you can view the actual logs by clicking on the
    server logs tab in the navigation pane on the leftside of the MySQL blade.](image/Figure_8.34.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![几分钟后，您可以通过单击MySQL刀片左侧导航窗格上的服务器日志选项卡来查看实际日志。](image/Figure_8.34.jpg)'
- en: 'Figure 8.34: Displaying the Server logs in the Azure portal'
  id: totrans-226
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.34：在Azure门户中显示服务器日志
- en: 'Let''s make sure to again clean up after our deployment and scale our cluster
    back down to two nodes. Scaling down to two nodes will make sure you save costs
    on your Azure subscription:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保在部署后再次清理并将我们的集群缩减到两个节点。缩减到两个节点将确保您在Azure订阅上节省成本：
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this section, we covered the two types of logs that Azure generates for a
    MySQL database. We looked into the activity log to see which actions have been
    taken against the Azure database, and we turned on server logs to get insights
    into what happened inside the database.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了Azure为MySQL数据库生成的两种日志类型。我们查看了活动日志，以查看针对Azure数据库执行了哪些操作，并打开了服务器日志，以了解数据库内部发生了什么。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter focused on working with a WordPress sample solution that leverages
    a MySQL database as a data store. We started by showing you how to set up the
    cluster to connect the MySQL database by installing Open Service Broker for Azure.
    We then showed you how to set up a MySQL database and drastically minimize the
    attack surface by changing the default configuration to not allow public access
    to the database. Then, we discussed how to restore the database from a backup
    and how to leverage the solution for DR. Finally, we discussed how to configure
    the audit logs for troubleshooting.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了使用WordPress示例解决方案，该解决方案利用MySQL数据库作为数据存储。我们首先向您展示了如何通过安装Azure的Open Service
    Broker来设置集群，以连接MySQL数据库。然后，我们向您展示了如何设置MySQL数据库，并通过更改默认配置来大大减少数据库的攻击面，从而不允许公共访问数据库。接着，我们讨论了如何从备份中恢复数据库，以及如何利用解决方案进行灾难恢复。最后，我们讨论了如何配置审计日志以进行故障排除。
- en: In the next chapter, you will learn how to implement microservices on AKS, including
    by using Event Hubs for loosely coupled integration between applications.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何在AKS上实现微服务，包括使用事件中心实现应用程序之间的松耦合集成。
