- en: Creating Microservices on Azure Service Fabric
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Azure Service Fabric上创建微服务
- en: 'This chapter deals with the exciting world of microservices and **Azure Service
    Fabric**. In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及微服务和**Azure Service Fabric**的激动人心的世界。在本章中，我们将介绍以下内容：
- en: Downloading and installing Service Fabric
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装Service Fabric
- en: Creating a Service Fabric application with a stateless actor service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无状态actor服务创建Service Fabric应用程序
- en: Using Service Fabric Explorer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Service Fabric Explorer
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Traditionally, developers wrote applications in a monolithic manner. This means
    one single executable that is broken up into components via classes and so on.
    Monolithic applications require a great deal of testing, and deployment is tedious
    due to the bulkiness of the monolithic application. Even though you might have
    multiple developer teams, they all need to have a solid understanding of the application
    as a whole.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，开发人员以单片方式编写应用程序。这意味着一个单一的可执行文件通过类等组件进行分解。单片应用程序需要大量的测试，由于单片应用程序的庞大，部署是繁琐的。即使您可能有多个开发团队，他们都需要对整个应用程序有扎实的了解。
- en: Microservices is a technology that aims to address the issues surrounding monolithic
    applications and the traditional way of developing applications. With microservices,
    you can break the application into smaller bits (services) that can function on
    their own without being dependent on any of the other services. These smaller
    services can be stateless or stateful and are also smaller in scale of functionality,
    making them easier to develop, test, and deploy. You can also version each microservice
    independently from the others. If one microservice is receiving more load than
    the others, you can scale only that service up to meet the demands placed on it.
    With monolithic applications, you would have to try and scale the whole application
    up in order to meet the demands for a single component within the application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是一种旨在解决单片应用程序和传统应用程序开发方式所带来问题的技术。使用微服务，您可以将应用程序分解为可以独立运行的较小部分（服务），而不依赖于任何其他服务。这些较小的服务可以是无状态或有状态的，并且在功能规模上也更小，使它们更容易开发、测试和部署。您还可以独立对每个微服务进行版本控制。如果一个微服务的负载比其他微服务更大，您可以仅扩展该服务以满足其所承受的需求。对于单片应用程序，您必须尝试扩展整个应用程序以满足应用程序中的单个组件的需求。
- en: Take, for example, the workings of a popular online web store. It could consist
    of a shopping cart, shopper profile, order management, backend login, inventory
    management, billing, returns, and much more. Traditionally, a single web application
    is created to provide all these services. With microservices, you can isolate
    each service as a standalone, self-contained bit of functionality and code base.
    You can also dedicate a team of developers to work on a single portion of the
    web store. If this team is responsible for the inventory-management microservice,
    they would handle every aspect of it. This, for example, means everything from
    writing code and enhancing functionality to testing and deployment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个流行的在线网络商店的运作方式。它可能包括购物车、购物者个人资料、订单管理、后端登录、库存管理、结算、退货等等。传统上，创建一个单一的Web应用程序来提供所有这些服务。使用微服务，您可以将每个服务隔离为独立的、自包含的功能和代码库。您还可以专门组建一个开发团队来处理网络商店的某一部分。如果这个团队负责库存管理微服务，他们将处理它的各个方面。例如，这意味着从编写代码和增强功能到测试和部署的所有工作。
- en: Another excellent side effect of microservices is that it allows you to easily
    isolate any faults you might come across. Finally, you can also create microservices
    in any technology you want (C#, Java, and VB.NET), as they are language-independent.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的另一个优点是，它可以轻松隔离您可能遇到的任何故障。最后，您还可以使用任何您想要的技术（C＃，Java和VB.NET）创建微服务，因为它们是与语言无关的。
- en: Azure Service Fabric allows you to scale your microservices easily and increases
    application availability because it implements failover. When microservices are
    used with the Service Fabric, microservices become a very powerful technology.
    Think of Azure Service Fabric as a **Platform as a Service** (**PaaS**) solution
    on top of which your microservices sit. We call the collection that the microservices
    live on a Service Fabric cluster. Each microservice lives on a virtual machine,
    which is referred to as a node in the Service Fabric cluster. This Service Fabric
    cluster can live in the cloud or on a local machine. If a node becomes unavailable
    due to any reason, the Service Fabric cluster will automatically redistribute
    the microservices to the other nodes so that the application remains available.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Service Fabric允许您轻松扩展微服务，并增加应用程序的可用性，因为它实现了故障转移。当微服务与Service Fabric一起使用时，微服务变得非常强大。将Azure
    Service Fabric视为您的微服务所在的**平台即服务**（**PaaS**）解决方案。我们将微服务所在的集合称为Service Fabric集群。每个微服务都位于一个虚拟机上，这在Service
    Fabric集群中被称为节点。此Service Fabric集群可以存在于云中或本地机器上。如果由于任何原因节点不可用，Service Fabric集群将自动将微服务重新分配到其他节点，以确保应用程序保持可用。
- en: Finally, here is a word on the differences between stateful and stateless microservices.
    You are able to create a microservice as stateless or stateful. When a microservice
    relies on an external data store to persist data, it is stateless in nature. This
    simply means that the microservice does not maintain its state internally. A stateful
    microservice, on the other hand, maintains its own state by storing it locally
    on the server it resides on. As you can imagine, stateful microservices are nicely
    suited for financial transactions. If a node had to go down for whatever reason,
    the state of that transaction will be persisted when the failover happens and
    continue where it left off on the new node.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于有状态和无状态微服务之间的区别。您可以将微服务创建为无状态或有状态。当微服务依赖外部数据存储来持久化数据时，它具有无状态性质。这意味着微服务不会在内部维护其状态。另一方面，有状态微服务通过在其所在的服务器上本地存储来维护自己的状态。可以想象，有状态微服务非常适合金融交易。如果某个节点因某种原因关闭，当故障转移发生时，该交易的状态将被持久化，并在新节点上继续进行。
- en: Downloading and installing Service Fabric
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装Service Fabric
- en: You will have to install and set up a local Service Fabric cluster on your PC
    before you can create and test Service Fabric applications. The local Service
    Fabric cluster is a fully functional cluster, as it would be in a live environment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建和测试Service Fabric应用程序之前，您需要在PC上安装和设置本地Service Fabric集群。本地Service Fabric集群是一个完全功能的集群，就像在实际环境中一样。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will download and install the **Microsoft Azure Service Fabric SDK** from
    the Azure site. This will allow you to create a local Service Fabric cluster on
    your local development machine. For more information, have a look at [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-get-started](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-get-started).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Azure网站下载并安装**Microsoft Azure Service Fabric SDK**。这将允许您在本地开发机器上创建本地Service
    Fabric集群。有关更多信息，请参阅[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-get-started](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-get-started)。
- en: 'The Service Fabric tools are now part of the Azure development and management
    workload in Visual Studio 2017. Enable this workload when you install Visual Studio
    2017\. You will also need to enable the ASP.NET and web development workload:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Service Fabric工具现在是Visual Studio 2017中Azure开发和管理工作负载的一部分。在安装Visual Studio 2017时启用此工作负载。您还需要启用ASP.NET和Web开发工作负载：
- en: '![](img/B06434_17_01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_01.png)'
- en: Note that if you do not have the original installer for Visual Studio anymore,
    and didn't enable the Azure Development and Management workload during installation,
    you can still enable this. Download the web platform installer for the version
    of Visual Studio 2017 you have and click on it. This will launch the installer,
    but will allow you to modify your existing Visual Studio 2017 installation. You
    can also run the installer from the New Project dialog screen in Visual Studio
    2017\. If you collapse the installed templates, you will see a section that allows
    you to open the Visual Studio Installer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您不再拥有Visual Studio的原始安装程序，并且在安装过程中没有启用Azure开发和管理工作负载，您仍然可以启用它。下载您拥有的Visual
    Studio 2017版本的Web平台安装程序并单击它。这将启动安装程序，但将允许您修改现有的Visual Studio 2017安装。您还可以从Visual
    Studio 2017的“新项目”对话框屏幕中运行安装程序。如果您折叠已安装的模板，您将看到一个允许您打开Visual Studio安装程序的部分。
- en: In addition to that, you can install the Microsoft Azure Service Fabric SDK
    using the Web Platform Installer from the preceding link. It will read Install
    the Microsoft Azure Service Fabric SDK. For the best installation experience,
    it is advisable to launch the Web Platform Installer using Internet Explorer or
    Edge browsers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，您还可以使用上述链接中的Web平台安装程序安装Microsoft Azure Service Fabric SDK。它将读取安装Microsoft
    Azure Service Fabric SDK。为了获得最佳的安装体验，建议使用Internet Explorer或Edge浏览器启动Web平台安装程序。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'From the Microsoft Azure site, download the Microsoft Azure Service Fabric
    SDK and access other resources, such as documentation via the Service Fabric learning
    path, from [https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/](https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/).
    When you click on the WPI launcher, you should see the following screen:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Microsoft Azure网站下载Microsoft Azure Service Fabric SDK，并通过Service Fabric学习路径访问其他资源，例如文档，从[https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/](https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/)。单击WPI启动程序后，您应该看到以下屏幕：
- en: '![](img/B06434_17_02.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_02.png)'
- en: You will need to accept the license terms before the installation begins.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装开始之前，您需要接受许可条款。
- en: The web platform installer then starts downloading Microsoft Azure Service Fabric
    Runtime. Allow this process to complete.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，Web平台安装程序开始下载Microsoft Azure Service Fabric Runtime。允许此过程完成。
- en: 'After the download has completed, the installation process will begin:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，安装过程将开始：
- en: '![](img/B06434_17_03.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_03.png)'
- en: 'When the installation has completed, the following products will have been
    installed, which is also evident in the following screenshot:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，将安装以下产品，这也可以从以下屏幕截图中看出：
- en: Microsoft Visual C++ 2012 SP1 Redistributable Package
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Visual C++ 2012 SP1可再发行包
- en: Microsoft Azure Service Fabric Runtime
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure Service Fabric Runtime
- en: Microsoft Azure Service Fabric SDK
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure Service Fabric SDK
- en: '![](img/B06434_17_04.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_04.png)'
- en: Your installation might differ from the screenshot, depending on your specific
    pre-installed components.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您的安装可能与屏幕截图不同，具体取决于您特定的预安装组件。
- en: 'The next task is to open PowerShell as the administrator. In the Windows 10
    Start menu, type the word `PowerShell`, and the search will immediately return
    the desktop application as a result. Right-click on the desktop application and
    select Run as administrator from the context menu:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个任务是以管理员身份打开 PowerShell。在 Windows 10 开始菜单中，键入单词 `PowerShell`，搜索将立即返回桌面应用程序作为结果。右键单击桌面应用程序，然后从上下文菜单中选择以管理员身份运行：
- en: '![](img/B06434_17_05.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_05.png)'
- en: 'Once Windows PowerShell has opened up, run the `Set-ExecutionPolicy -ExecutionPolicy
    Unrestricted -Force -Scope CurrentUser` command. The reason for this is that Service
    Fabric uses PowerShell scripts for the creation of the local development cluster.
    It is also used for the deployment of Visual Studio developed apps. Running this
    command prevents Windows from blocking those scripts:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Windows PowerShell 打开，运行 `Set-ExecutionPolicy -ExecutionPolicy Unrestricted
    -Force -Scope CurrentUser` 命令。原因是 Service Fabric 使用 PowerShell 脚本来创建本地开发集群。它也用于部署
    Visual Studio 开发的应用程序。运行此命令可以防止 Windows 阻止这些脚本：
- en: '![](img/B06434_17_06.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_06.png)'
- en: Next, create the local Service Fabric cluster. Enter the `& "$ENV:ProgramFiles\Microsoft
    SDKs\Service Fabric\ClusterSetup\DevClusterSetup.ps1"` command.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建本地 Service Fabric 集群。输入 `& "$ENV:ProgramFiles\Microsoft SDKs\Service Fabric\ClusterSetup\DevClusterSetup.ps1"`
    命令。
- en: 'This will create the local cluster needed to host Service Fabric applications:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建所需的本地集群来托管 Service Fabric 应用程序：
- en: '![](img/B06434_17_07.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_07.png)'
- en: B06434_17_07
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: B06434_17_07
- en: 'After the cluster is created, PowerShell will start the service:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群创建后，PowerShell 将启动服务：
- en: '![](img/B06434_17_08.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_08.png)'
- en: 'The process might take several minutes. Be sure to let it complete:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该过程可能需要几分钟。请确保让它完成：
- en: '![](img/B06434_17_09.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_09.png)'
- en: 'Once the naming service is ready, you can close PowerShell:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦命名服务准备就绪，您可以关闭 PowerShell：
- en: '![](img/B06434_17_10.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_10.png)'
- en: To view the created cluster, you can navigate to `http://localhost:19080/Explorer`
    on your local machine.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看创建的集群，可以在本地机器上导航到 `http://localhost:19080/Explorer`。
- en: 'This will give you a snapshot of the cluster''s health and state. It will also
    show any applications running in the cluster:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供集群的健康和状态的快照。它还将显示集群中运行的任何应用程序：
- en: '![](img/B06434_17_11.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_11.png)'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As you can see, the Service Fabric cluster is essential for creating and running
    applications created in Visual Studio. This will allow us to test applications
    directly on your local machine before publishing them to the cloud. As mentioned
    earlier, this isn't a watered-down version of the Service Fabric cluster. It is
    exactly the same version that would be installed on any one of the machines that
    you would install your Service Fabric applications on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Service Fabric 集群对于在 Visual Studio 中创建和运行应用程序至关重要。这将允许我们在将应用程序发布到云之前直接在本地机器上测试应用程序。正如前面提到的，这不是
    Service Fabric 集群的简化版本。它与您在其中安装 Service Fabric 应用程序的任何一台机器上安装的版本完全相同。
- en: Creating a Service Fabric application with a stateless actor service
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无状态 Actor 服务创建 Service Fabric 应用程序
- en: As part of the introduction to this chapter, we looked at the difference between
    stateful and stateless microservices. The Service Fabric application templates
    available are then further divided into **Reliable Services** (stateful/stateless)
    and **Reliable Actors**. When to use which one is something that will depend on
    the specific business requirement of your application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章介绍的一部分，我们看了有状态和无状态微服务之间的区别。然后，可用的 Service Fabric 应用程序模板进一步分为**可靠服务**（有状态/无状态）和**可靠
    Actor**。何时使用哪一个将取决于您的应用程序的具体业务需求。
- en: To put it simply though, if you wanted to create a service that should be exposed
    to many users of your application at any one time, a Reliable Service would probably
    be a good fit. Think of a service exposing the latest exchange rates that can
    be consumed by many users or applications at once.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，如果您想创建一个应该向您的应用程序的许多用户公开的服务，可靠的服务可能是一个很好的选择。想象一下，一个服务公开了最新的汇率，可以被许多用户或应用程序同时使用。
- en: Again, looking back to the introduction of this chapter, we used the example
    of an online web store with a shopping cart. A Reliable Actor could be a good
    fit for every customer buying items, so you could have a shopping cart actor.
    The Reliable Actor as part of the Service Fabric framework is based on the Virtual
    Actor pattern. Have a look at the article on the Virtual Actor pattern at [http://research.microsoft.com/en-us/projects/orleans/](http://research.microsoft.com/en-us/projects/orleans/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再次回顾本章的介绍，我们使用了在线网店和购物车的例子。对于每个购买商品的客户，可靠 Actor 可能是一个很好的选择，因此您可以有一个购物车 Actor。Service
    Fabric 框架中的可靠 Actor 基于虚拟 Actor 模式。请查看 [http://research.microsoft.com/en-us/projects/orleans/](http://research.microsoft.com/en-us/projects/orleans/)
    上关于虚拟 Actor 模式的文章。
- en: To show you how easy it is to create a microservice using a stateless actor
    service as an example, we will use Visual Studio to publish a service to the Service
    Fabric cluster and call that service from a console (client) application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向您展示使用无状态 Actor 服务创建微服务有多容易，我们将使用 Visual Studio 将服务发布到 Service Fabric 集群，并从控制台（客户端）应用程序调用该服务作为示例。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: To complete this recipe, you must ensure that you have installed your local
    Service Fabric cluster on your local machine. You also need to ensure that the Azure
    Development and Management workload in Visual Studio 2017 has been installed. Enable
    this workload when you install Visual Studio 2017\. If you did not install the
    workload as part of Visual Studio 2017, you can do so by clicking on the Web Platform
    Installer for Visual Studio 2017 and maintaining the installation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此步骤，您必须确保已在本地机器上安装了 Service Fabric 集群。您还需要确保已安装了 Visual Studio 2017 中的 Azure
    开发和管理工作负载。在安装 Visual Studio 2017 时启用此工作负载。如果您没有在 Visual Studio 2017 的安装中安装该工作负载，可以通过单击
    Visual Studio 2017 的 Web 平台安装程序并维护安装来执行此操作。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: In Visual Studio, create a new project by going to File | New | Project.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，通过转到“文件”|“新建”|“项目”来创建一个新项目。
- en: 'From the Visual C# node, expand the nodes until you see the Cloud node. When
    you click on it, you will see that Visual Studio now lists a new Service Fabric
    Application template. Select the Service Fabric Application template, call it
    `sfApp`, and click on OK:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Visual C#节点展开节点，直到看到Cloud节点。当您点击它时，您会看到Visual Studio现在列出了一个新的Service Fabric应用程序模板。选择Service
    Fabric应用程序模板，将其命名为`sfApp`，然后单击“确定”：
- en: '![](img/B06434_17_12.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_12.png)'
- en: 'Next, select Actor Service from the Service Templates window that pops up.
    We just called ours `UtilitiesActor`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从弹出的服务模板窗口中选择Actor Service。我们只是称之为`UtilitiesActor`：
- en: '![](img/B06434_17_13-2.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_13-2.png)'
- en: 'Once your solution is created, you will notice that it consists of three projects:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建解决方案后，您会注意到它由三个项目组成：
- en: '`sfApp`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sfApp`'
- en: '`UtilitiesActor`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UtilitiesActor`'
- en: '`UtilitiesActor.Interfaces`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UtilitiesActor.Interfaces`'
- en: '![](img/B06434_17_14.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_14.png)'
- en: 'We will start off by modifying the `IUtilitiesActor` interface in the `UtilitiesActor.Interfaces`
    project. This interface will simply require that `UtilitiesActor` implements a
    method called `ValidateEmailAsync` that takes an e-mail address as a parameter
    and returns a Boolean value indicating whether it is a valid e-mail address or
    not:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先修改`UtilitiesActor.Interfaces`项目中的`IUtilitiesActor`接口。该接口将简单要求`UtilitiesActor`实现一个名为`ValidateEmailAsync`的方法，该方法以电子邮件地址作为参数，并返回一个布尔值，指示它是否是有效的电子邮件地址：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, open up your `UtilitiesActor` project and view the class `UtilitiesActor.cs`.
    Look for the internal class definition `internal class UtilitiesActor : Actor,
    IUtilitiesActor` around line 22\. The `IUtilitiesActor` interface name will be
    underlined with a red squiggly line because it does not implement the interface
    member `ValidateEmailAsync()`.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开您的`UtilitiesActor`项目，并查看`UtilitiesActor.cs`类。查找大约在第22行左右的内部类定义`internal
    class UtilitiesActor：Actor，IUtilitiesActor`。`IUtilitiesActor`接口名称将被下划线标记，因为它没有实现接口成员`ValidateEmailAsync()`。
- en: Using *Ctrl* + *.* (period), implement the interface. Remove all the other unnecessary
    default code (if any).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *.*（句号），实现接口。删除所有其他不必要的默认代码（如果有）。
- en: 'The implemented interface code inserted for you should look like the following.
    At the moment, it only contains `NotImplementedException`. It is here that we
    will implement the code to validate the e-mail address:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您插入的实现接口代码应如下所示。目前，它只包含`NotImplementedException`。我们将在这里实现验证电子邮件地址的代码：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will use a regular expression to validate the e-mail address passed to this
    method via the parameter. Regular expressions are very powerful. I have, however,
    in all my years of programming, never written my own expression. These are readily
    available on the Internet, and you can create a utilities class (or extension
    methods class) for your own projects to reuse. You can make use of regular expressions
    and other code that are often used.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用正则表达式来验证通过参数传递给此方法的电子邮件地址。正则表达式非常强大。然而，在我多年的编程生涯中，我从未编写过自己的表达式。这些可以在互联网上轻松找到，并且您可以为自己的项目创建一个实用程序类（或扩展方法类）以重用。您可以利用经常使用的正则表达式和其他代码。
- en: 'Finally, you will notice the `ActorEventSource` code. This is simply just to
    create **Event Tracing for Windows** (**ETW**) events that will help you see what
    is happening in your application from the diagnostic events window in Visual Studio.
    To open the diagnostic events window, go to View, Other Windows and click on Diagnostic
    Events:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您会注意到`ActorEventSource`代码。这只是为了创建**Windows事件跟踪**（**ETW**）事件，以帮助您从Visual Studio的诊断事件窗口中查看应用程序中发生的情况。要打开诊断事件窗口，请转到“视图”，选择“其他窗口”，然后单击“诊断事件”：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Be sure to add a reference to the `System.Text.RegularExpressions` namespace.
    Without it, you will not be able to use the regular expressions. If you add the
    regular expression in your code without adding the reference, Visual Studio will
    display a red squiggly line under the `Regex` method.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保添加对`System.Text.RegularExpressions`命名空间的引用。如果没有引用，您将无法使用正则表达式。如果在代码中添加了正则表达式而没有添加引用，Visual
    Studio将在`Regex`方法下显示红色波浪线。
- en: Using *Ctrl* + *.* (period), add the `using` statement to your project. This
    will bring the regular expression namespace into scope.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *.*（句号），将`using`语句添加到您的项目。这将使正则表达式命名空间生效。
- en: Now that we have created the interface and also added the implementation of
    that interface, it is time to add a client application that we will use for testing.
    Right-click on your solution and add a new project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了接口，并添加了该接口的实现，现在是时候添加一个客户端应用程序进行测试了。右键单击解决方案，然后添加一个新项目。
- en: The easiest way is to add a simple console application. Call your client application
    `sfApp.Client` and click on the OK button.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最简单的方法是添加一个简单的控制台应用程序。将您的客户端应用程序命名为`sfApp.Client`，然后单击“确定”按钮。
- en: 'After you have added your console application to your solution, your solution
    should look like this:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将控制台应用程序添加到解决方案后，您的解决方案应如下所示：
- en: '![](img/B06434_17_15.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_15.png)'
- en: You will now need to add references to your client application. Right-click
    the `References` node in your `sfApp.Client` project and select Add Reference
    from the context menu.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要向客户端应用程序添加引用。右键单击`sfApp.Client`项目中的`References`节点，然后从上下文菜单中选择添加引用。
- en: Start off by adding a reference to the `UtilitiesActor.Interfaces` project.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要做的是向`UtilitiesActor.Interfaces`项目添加引用。
- en: 'You will also need to add references to several Service Fabric **dynamic link
    libraries** (**DLLs**). When you created your Service Fabric application, it should
    have added a folder called `packages` to your project folder structure. Browse
    to this folder and add your Service Fabric DLLs from there. After you have added
    the required DLLs, your project should look like this:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要添加对几个Service Fabric **动态链接库**（**DLLs**）的引用。当您创建Service Fabric应用程序时，它应该已经在项目文件夹结构中添加了一个名为`packages`的文件夹。浏览到此文件夹，并从中添加所需的Service
    Fabric DLL。添加所需的DLL后，您的项目应如下所示：
- en: '![](img/B06434_17_16.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_16.png)'
- en: 'In the `Program.cs` file of your console application, you need to add the following
    code to the `Main` method:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的控制台应用程序的`Program.cs`文件中，您需要将以下代码添加到`Main`方法中：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Be sure to add the following `using` statements to your console application:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将以下`using`语句添加到您的控制台应用程序中：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: All we are doing is creating a proxy for our actor and writing the output of
    the e-mail validation to the console window. Your client application is now ready.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的就是为我们的actor创建一个代理，并将电子邮件验证的输出写入控制台窗口。您的客户端应用程序现在已经准备就绪。
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Before we can run the client application, however, we need to publish our service
    first. In Solution Explorer, right-click on the `sfApp` service and click on Publish...
    from the context menu:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在运行客户端应用程序之前，我们需要先发布我们的服务。在解决方案资源管理器中，右键单击`sfApp`服务，然后从上下文菜单中单击“发布...”：
- en: '![](img/B06434_17_17.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_17.png)'
- en: 'The Publish Service Fabric Application window will now be displayed. Click
    on the Select... button next to the Connection Endpoint textbox. Select Local
    Cluster as your Connection Endpoint and click on OK. Change Target profile and
    Application Parameters File to `Local.1Node.xml`. When you are done, click on
    the Publish button:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将显示发布Service Fabric应用程序窗口。单击连接端点文本框旁边的“选择...”按钮。选择本地集群作为您的连接端点，然后单击“确定”。将目标配置文件和应用程序参数文件更改为`Local.1Node.xml`。完成后，单击“发布”按钮：
- en: '![](img/B06434_17_18.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_18.png)'
- en: 'If you navigate to `http://localhost:19080/Explorer`, you will notice that
    the service you created has been published to your local Service Fabric cluster:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您导航到`http://localhost:19080/Explorer`，您会注意到您创建的服务已发布到本地的Service Fabric集群：
- en: '![](img/B06434_17_19.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_19.png)'
- en: 'You are now ready to run your client application. Right-click on the `sfApp.Client`
    project and select Debug and Start new instance from the context menu. The console
    application calls the `validate` method to check the e-mail addresses and displays
    the results to the console window. The results are as expected:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好运行您的客户端应用程序。右键单击`sfApp.Client`项目，然后从上下文菜单中选择“调试”和“启动新实例”。控制台应用程序调用`validate`方法来检查电子邮件地址，并将结果显示在控制台窗口中。结果如预期的那样：
- en: '![](img/B06434_17_20.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_20.png)'
- en: If you receive a `System.BadImageFormatException` when trying to run your console
    application, check to see what platform your console application is targeting.
    You might have compiled your console application as Any CPU while the other projects
    in your solution target x64\. Modify this from the Configuration Manager and make
    the console application also target x64.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在尝试运行控制台应用程序时收到`System.BadImageFormatException`，请检查控制台应用程序的目标平台。您可能已经将控制台应用程序编译为Any
    CPU，而解决方案中的其他项目则以x64为目标。从配置管理器中修改这一点，并使控制台应用程序也以x64为目标。
- en: 'We can, however, be more specific when creating the actor ID. In the previous
    code listing, we used the `CreateRandom()` method to generate an `ActorId`. We
    can now give it a specific name. Modify your proxy code and create a new `ActorId` instance
    and give it any string value. In the following code listing, I just called mine
    `Utilities`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在创建actor ID时，我们可以更具体。在先前的代码清单中，我们使用`CreateRandom()`方法生成了一个`ActorId`。现在我们可以给它一个特定的名称。修改您的代理代码，创建一个新的`ActorId`实例，并给它任何字符串值。在下面的代码清单中，我只是称呼我的为`Utilities`：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `ActorId` method can take a parameter of type `Guid`, `long`, or `string`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActorId`方法可以接受`Guid`、`long`或`string`类型的参数。'
- en: 'When you debug your client application again, you will notice that `Utilities
    Actor` now has a logical name (the same name you passed as string value when creating
    a new `ActorId` instance):'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当您再次调试您的客户端应用程序时，您会注意到`Utilities Actor`现在有一个逻辑名称（与创建新的`ActorId`实例时传递的字符串值相同的名称）：
- en: '![](img/B06434_17_21.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_21.png)'
- en: Creating your Service Fabric application and publishing it locally is a perfect
    solution for testing your application before publishing it to the cloud. Creating
    small, independent microservices allows developers many benefits related to testing,
    debugging, and deploying efficient and robust code that your applications can
    leverage to ensure maximum availability.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在将您的Service Fabric应用程序本地发布之前，这是测试应用程序的完美解决方案。创建小型、独立的微服务允许开发人员在测试、调试和部署高效和健壮的代码方面获得许多好处，您的应用程序可以利用这些好处来确保最大的可用性。
- en: Using Service Fabric Explorer
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Service Fabric Explorer
- en: There is another tool that you can use to visualize the Service Fabric cluster.
    It is a standalone tool that you can find by navigating to the local installation
    path at `%Program Files%\Microsoft SDKs\Service Fabric\Tools\ServiceFabricExplorer`
    and clicking on `ServiceFabricExplorer.exe`. When you run the application, it
    will automatically connect to your local Service Fabric cluster. It can display
    rich information regarding the applications on the cluster, the cluster nodes,
    heath status of the applications and nodes, and any load on the applications in
    the cluster.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个工具可以用来可视化Service Fabric集群。这是一个独立的工具，您可以通过导航到本地安装路径`%Program Files%\Microsoft
    SDKs\Service Fabric\Tools\ServiceFabricExplorer`并单击`ServiceFabricExplorer.exe`来找到。运行应用程序时，它将自动连接到您的本地Service
    Fabric集群。它可以显示有关集群上的应用程序、集群节点、应用程序和节点的健康状态以及集群中应用程序的任何负载的丰富信息。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You must have already completed the installation of Service Fabric on your local
    machine for Service Fabric Explorer to work. If you have not done so yet, follow
    the *Downloading and installing Service Fabric* recipe in this chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须已经在本地计算机上完成了Service Fabric的安装，才能使Service Fabric Explorer正常工作。如果尚未完成，请按照本章中的*下载和安装Service
    Fabric*配方进行操作。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'When you start Service Fabric Explorer, the following window will appear:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您启动Service Fabric Explorer时，将出现以下窗口：
- en: '![](img/B06434_17_22.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_22.png)'
- en: 'Note that the tree view to the left displays Application View and Node View:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，左侧的树形视图显示了应用程序视图和节点视图：
- en: '![](img/B06434_17_23-1.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_23-1.png)'
- en: 'The pane on the right-hand side will display information regarding the local
    cluster. This makes it easy for you to see the overall health of the local Service
    Cluster:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右侧窗格将显示有关本地集群的信息。这使您可以轻松地查看本地服务集群的整体健康状况：
- en: '![](img/B06434_17_24-1.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_24-1.png)'
- en: 'When you expand Application View, you will notice that our `sfApp` service
    has been published. Expanding it even further, you will see that the `sfApp` service
    has been published on Node_3\. Expand Node View and Node_3 to see the service
    active on that node:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您扩展应用程序视图时，您会注意到我们的`sfApp`服务已经发布。进一步扩展它，您会看到`sfApp`服务已经发布在Node_3上。扩展节点视图和Node_3，以查看该节点上的服务活动：
- en: '![](img/B06434_17_25.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_25.png)'
- en: To illustrate the scalability of microservices, right-click on Node_3, and from
    the context menu select Activate / Deactivate and Deactivate (remove data) on
    the node. Then, click on the Refresh button at the top of the window to refresh
    the nodes and applications.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了说明微服务的可扩展性，右键单击Node_3，并从上下文菜单中选择在节点上激活/停用和停用（删除数据）。然后，单击窗口顶部的刷新按钮以刷新节点和应用程序。
- en: 'If you now go ahead and expand Application View and look at the service again,
    you will notice that the Service Fabric cluster noticed that Node_3 was disabled.
    It then automatically pushed the service onto a new, healthy node (in this case,
    Node_2):'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在继续扩展应用程序视图并再次查看服务，您会注意到Service Fabric集群注意到Node_3已被禁用。然后自动将服务推送到一个新的健康节点（在本例中为Node_2）：
- en: '![](img/B06434_17_26.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_26.png)'
- en: 'The local cluster nodes view in the right panel of Service Fabric Explorer
    also reports that Node_3 is disabled. Click on Node View to see this:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Service Fabric Explorer右侧面板中的本地集群节点视图还报告Node_3已禁用。单击节点视图以查看此信息：
- en: '![](img/B06434_17_27.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_17_27.png)'
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Service Fabric Explorer will allow you to see information on the selected node,
    and you will be able to drill down and see a rich amount of information regarding
    the Service Fabric cluster applications. It just another utility for administrators
    to use apart from the Service Fabric Explorer available in the browser.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Service Fabric Explorer将允许您查看所选节点的信息，并且您将能够深入了解有关Service Fabric集群应用程序的丰富信息。这只是管理员除了浏览器中可用的Service
    Fabric Explorer之外可以使用的另一个实用程序。
- en: There is some heated debate as to the manner in which developers should approach
    the microservices architecture. There are some that believe that when your goal
    as a developer is a microservices architecture for your application, you need
    to approach it from a monolith-first perspective. That is to say, write the big
    monolithic application first because that process is a familiar approach to development.
    After you have done that, plan and carve up the monolithic application into smaller
    microservices. The argument here is that the time to market is much quicker when
    creating a monolithic application. A quicker time to market means a quicker return
    on your investment.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些激烈的辩论关于开发人员应该如何处理微服务架构。有人认为，当开发人员的目标是应用程序的微服务架构时，需要从单体优先的角度来处理。也就是说，首先编写大型单体应用程序，因为这个过程是熟悉的开发方法。在完成后，计划并将单体应用程序划分为更小的微服务。这里的论点是，创建单体应用程序时，上市时间更快。更快的上市时间意味着更快的投资回报。
- en: Then the other side of the argument is that starting with a monolith is exactly
    the wrong approach to follow. The correct time to start thinking about how to
    carve up your application into pieces is at the design phase. The concession is
    made, however, that the development team will probably need to understand the
    system they are required to build. Another concession is made in the fact that
    it would probably be better to start off with a microservices approach when creating
    a second version of the existing monolith. A monolithic application by definition
    has all the parts tightly coupled to each other. How much time would it take to
    break these into smaller microservices?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面的论点是，从单体开始恰恰是错误的方法。在设计阶段开始考虑如何将应用程序划分为部分才是正确的时间。然而，必须承认，开发团队可能需要了解他们需要构建的系统。另一个让步是，也许最好在创建现有单体的第二个版本时采用微服务方法。单体应用程序根据定义，所有部分都紧密耦合在一起。将这些部分分解为更小的微服务需要多少时间？
- en: Whichever approach you decide to take, it is one that must be decided on after
    careful consideration of all the facts involving all the stakeholders. Unfortunately,
    there is no formula or hard and fast rule to aid you in your decision. The decision
    regarding architecture of an application (monolithic versus microservices) will
    vary from project to project.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您决定采取哪种方法，都必须在仔细考虑涉及所有利益相关者的所有事实之后做出决定。不幸的是，没有公式或硬性规则可以帮助您做出决定。关于应用程序架构（单体与微服务）的决定将因项目而异。
