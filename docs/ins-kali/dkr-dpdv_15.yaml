- en: '13: Volumes and persistent data'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13：卷和持久数据
- en: It’s time to look at how Docker manages data. We’ll look at persistent and non-persistent
    data. However, the main focus of the chapter will be on persistent data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候看看Docker如何管理数据了。我们将看持久和非持久数据。然而，本章的重点将放在持久数据上。
- en: 'We’ll split the chapter into the usual three parts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这一章分为通常的三个部分：
- en: The TLDR
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简而言之
- en: The deep dive
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入探讨
- en: The commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令
- en: Volumes and persistent data - The TLDR
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卷和持久数据-简而言之
- en: There are two main categories of data. Persistent and non-persistent.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据有两个主要类别。持久和非持久。
- en: Persistent is the stuff you need to *keep*. Things like; customer records, financials,
    bookings, audit logs, and even some types of application *log* data. Non-persistent
    is the stuff you don’t need to keep.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 持久是你需要*保留*的东西。像客户记录、财务、预订、审计日志，甚至某些类型的应用程序*日志*数据。非持久是你不需要保留的东西。
- en: Both are important, and Docker has options for both.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都很重要，Docker都有相应的选项。
- en: Every Docker container gets its own non-persistent storage. It’s automatically
    created, alongside the container, and it’s tied to the lifecycle of the container.
    That means deleting the container will delete this storage and any data on it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Docker容器都有自己的非持久存储。它会自动与容器一起创建，并与容器的生命周期相关联。这意味着删除容器将删除这个存储和其中的任何数据。
- en: If you want your container’s data to stick around (persist), you need to put
    it on a *volume*. Volumes are decoupled from containers, meaning you create and
    manage them separately, and they’re not tied to the lifecycle of any container.
    Net result, you can delete a container with a volume, and the volume will not
    be deleted.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望容器的数据保留下来（持久），你需要把它放在*卷*上。卷与容器解耦，这意味着你可以单独创建和管理它们，并且它们不与任何容器的生命周期相关联。最终结果是，你可以删除一个带有卷的容器，而卷不会被删除。
- en: That’s the TLDR. Let’s take a closer look.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是简而言之。让我们仔细看一看。
- en: Volumes and persistent data - The Deep Dive
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卷和持久数据-深入探讨
- en: Containers are excellent for microservices design patters. And we often associate
    microservices with words like *ephemeral* and *stateless*. So…. microservices
    are all about stateless and ephemeral workloads, and containers are great microservices.
    Therefore, we often jump to the conclusion that containers must be just for ephemeral
    stuff.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 容器非常适合微服务设计模式。我们经常将微服务与*短暂*和*无状态*等词联系在一起。所以……微服务都是关于无状态和短暂的工作负载，而容器非常适合微服务。因此，我们经常得出结论，容器必须只适用于短暂的东西。
- en: Bu that’s wrong. Just wrong, wrong, wrong!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是错误的。完全错误。
- en: Containers and non-persistent data
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 容器和非持久数据
- en: It’s true that containers are great at stateless and non-persistent stuff.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 容器确实非常擅长处理无状态和非持久的东西。
- en: Every container automatically gets a bunch of local storage. By default, this
    is where all of the container’s files and filesystem go. You’ll hear this referred
    to by names like; *local storage*, *graphdriver storage*, and *snapshotter storage*.
    Either way, it’s an integral part of the container, and is tied to the container’s
    lifecycle — it gets created when the container gets created, and it gets deleted
    when the container gets deleted. Simple.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个容器都会自动获得一大堆本地存储。默认情况下，这就是容器的所有文件和文件系统所在的地方。你会听到这些被称为*本地存储*、*图形驱动存储*和*快照存储*。无论如何，这是容器的一个组成部分，并与容器的生命周期相关联-当容器创建时它被创建，当容器删除时它被删除。简单。
- en: On Linux systems, it exists somewhere under `/var/lib/docker/<storage-driver>/`
    as part of the container. On Windows it goes under `C:\ProgramData\Docker\windowsfilter\`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统中，它存在于`/var/lib/docker/<storage-driver>/`的某个位置，作为容器的一部分。在Windows中，它位于`C:\ProgramData\Docker\windowsfilter\`下。
- en: If you’re running Docker in production on Linux, you’ll want to make sure you
    match the right storage driver (graphdriver) with the version of Linux on your
    Docker host. Use the following list as a *guide:*
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Linux上的生产环境中运行Docker，您需要确保将正确的存储驱动程序（图形驱动程序）与Docker主机上的Linux版本匹配。使用以下列表作为*指南：*
- en: '**Red Hat Enterprise Linux:** Use the `overlay2` driver with modern versions
    of RHEL running Docker 17.06 or higher. Use the `devicemapper` driver with older
    versions. This applies to Oracle Linux and other Red Hat related upstream and
    downstream distros.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Red Hat Enterprise Linux：**在运行Docker 17.06或更高版本的现代RHEL版本中使用`overlay2`驱动程序。在旧版本中使用`devicemapper`驱动程序。这适用于Oracle
    Linux和其他与Red Hat相关的上游和下游发行版。'
- en: '**Ubuntu:** Use the `overlay2` or `aufs` drivers. If you’re using a Linux 4.x
    kernel or higher you should go with `overlay2`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ubuntu：**使用`overlay2`或`aufs`驱动程序。如果您使用的是Linux 4.x内核或更高版本，则应选择`overlay2`。'
- en: '**SUSE Linux Enterprise Server:** Use the `btrfs` storage driver.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SUSE Linux Enterprise Server：**使用`btrfs`存储驱动程序。'
- en: '**Windows** Windows only has one driver and it is configured by default.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows** Windows只有一个驱动程序，并且默认情况下已配置。'
- en: The above list should only be used as a guide. As things progress, the `overlay2`
    driver is increasing in popularity and may become the recommended storage driver
    on more platforms. If you are using Docker Enterprise Edition (EE), and have a
    support contract, you should consult the latest compatibility support matrix.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表仅应作为指南使用。随着事物的进展，`overlay2`驱动程序在各个平台上的受欢迎程度正在增加，并且可能成为推荐的存储驱动程序。如果您使用Docker企业版（EE）并且有支持合同，您应该咨询最新的兼容性支持矩阵。
- en: Let’s get back on track.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到正题。
- en: By default, all storage within a container uses this *local storage*. So every
    directory in a container uses this storage by default.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，容器内的所有存储都使用这个*本地存储*。因此，默认情况下，容器中的每个目录都使用这个存储。
- en: If your containers don’t create persistent data, *local storage* will be fine
    and you’re good to go. But if your containers **do** need to persist data, you
    need to read the next section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的容器不创建持久数据，*本地存储*就可以了，您可以继续。但是，如果您的容器**需要**持久数据，您需要阅读下一节。
- en: Containers and persistent data
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 容器和持久数据
- en: The recommended way to persist data in containers is with *volumes*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中持久保存数据的推荐方法是使用*卷*。
- en: At a high-level, you create a volume, then you create a container, and you mount
    the volume into it. The volume gets mounted to a directory in the container’s
    filesystem, and anything written to that directory is written to the volume. If
    you then delete the container, the volume and its data will still exist.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，您创建一个卷，然后创建一个容器，并将卷挂载到其中。卷被挂载到容器文件系统中的一个目录，写入该目录的任何内容都将写入卷中。然后，如果您删除容器，卷及其数据仍将存在。
- en: Figure 13.1 shows a Docker volume mounted into a container at `/code`. Any data
    written to the `/code` directory will be stored on the volume and will exist after
    the container is deleted.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1显示了一个Docker卷挂载到容器的`/code`目录。写入`/code`目录的任何数据都将存储在卷上，并且在删除容器后仍将存在。
- en: '![Figure 13.1 High-level view of volumes and containers](images/figure13-1.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图13.1 卷和容器的高级视图](images/figure13-1.png)'
- en: Figure 13.1 High-level view of volumes and containers
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 卷和容器的高级视图
- en: In Figure 13.1, the `/code` directory is a Docker volume. All other directories
    use the containers ephemeral local storage. The arrow from the volume to the `/code`
    directory is a dashed line to represent the decoupled relationship between volumes
    and containers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在图13.1中，`/code`目录是一个Docker卷。所有其他目录使用容器的临时本地存储。从卷到`/code`目录的箭头是虚线，表示卷和容器之间的解耦关系。
- en: Creating and managing Docker volumes
  id: totrans-36
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 创建和管理Docker卷
- en: Volumes are first-class citizens in Docker. Among other things, this means they
    are their own object in the API, and they have their own `docker volume` sub-command.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 卷在Docker中是一流的公民。这意味着它们是API中的独立对象，并且它们有自己的`docker volume`子命令。
- en: Use the following command to create a new volume called `myvol`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建名为`myvol`的新卷。
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`By default, Docker creates new volumes with the built-in `local` driver. As
    the name suggests, local volumes are only available to containers on the node
    they’re created on. Use the `-d` flag to specify a different driver.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker会使用内置的`local`驱动程序创建新卷。顾名思义，本地卷仅适用于在其上创建的节点上的容器。使用`-d`标志指定不同的驱动程序。
- en: Third-party drivers are available as plugins. These can provide advanced storage
    features, and integrate external storage systems with Docker. Figure 13.2 shows
    an external storage system (e.g. SAN or NAS) being used to provide the backend
    storage for the volume. The driver integrates the external storage system, with
    its advanced features, into the Docker environment.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方驱动程序可作为插件使用。这些可以提供高级存储功能，并将外部存储系统与Docker集成。图13.2显示了外部存储系统（例如SAN或NAS）被用于为卷提供后端存储。驱动程序将外部存储系统及其高级功能集成到Docker环境中。
- en: '![Figure 13.2 Plugging external storage into Docker](images/figure13-2.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2 将外部存储插入Docker](images/figure13-2.png)'
- en: Figure 13.2 Plugging external storage into Docker
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 将外部存储插入Docker
- en: 'At the time of writing, there are over 25 volume plugins. These cover block
    storage, file storage, object storage, and more:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，有超过25个卷插件。这些涵盖了块存储、文件存储、对象存储等：
- en: '**Block storage** tends to be high performance and good for small-block random
    access workloads. Examples of block storage systems with Docker volume plugins
    include HPE 3PAR, Amazon EBS, and the OpenStack Block Storage service (cinder).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**块存储**往往具有高性能，并且适用于小块随机访问工作负载。具有Docker卷插件的块存储系统的示例包括HPE 3PAR、Amazon EBS和OpenStack块存储服务（cinder）。'
- en: '**File storage** includes systems that use the NFS and SMB protocols, and is
    also good for high performance workloads. Examples of file storage systems that
    have Docker volume plugins include NetApp FAS, Azure Files storage, and Amazon
    EFS.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件存储**包括使用NFS和SMB协议的系统，并且也适用于高性能工作负载。具有Docker卷插件的文件存储系统的示例包括NetApp FAS、Azure文件存储和Amazon
    EFS。'
- en: '**Object storage** is good for long term storage of large data blobs that do
    not change frequently. It is often content addressable, and is usually low performance.
    Examples with Docker volume drivers include; Amazon S3, Ceph, and Minio.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象存储**适用于不经常更改的大数据块的长期存储。它通常是内容可寻址的，并且通常性能较低。具有Docker卷驱动程序的示例包括Amazon S3、Ceph和Minio。'
- en: Now that the volume is created, you can see it with the `docker volume ls` command,
    and inspect it with the `docker volume inspect` command.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在卷已创建，您可以使用`docker volume ls`命令查看它，并使用`docker volume inspect`命令检查它。
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Some interesting points from the output of the `inspect` command. The `driver`
    and `scope` are both `local`. This means the volume was created with the default
    `local` driver, and is only available to containers on this Docker host. The `mountpoint`
    property tells us where on the host the volume is surfaced. In this example the
    volume is surfaced on the Docker host at `/var/lib/docker/volumes/myvol/_data`.
    On a Windows Docker host it will report as `Mountpoint": "C:\\ProgramData\\Docker\\volumes\\myvol\\_data`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`从`inspect`命令的输出中得出一些有趣的观点。`driver`和`scope`都是`local`。这意味着卷是使用默认的`local`驱动程序创建的，并且仅适用于此Docker主机上的容器。`mountpoint`属性告诉我们卷在主机上的哪个位置被展示。在这个例子中，卷在Docker主机上的`/var/lib/docker/volumes/myvol/_data`处被展示。在Windows
    Docker主机上，它将报告为`Mountpoint": "C:\\ProgramData\\Docker\\volumes\\myvol\\_data`。'
- en: All volumes created with the `local` driver get their own directory under `/var/lib/docker/volumes`
    on Linux, and `C:\ProgramData\Docker\volumes` on Windows. This means you can see
    them in your Docker host’s filesystem, and even read and write data to them from
    your Docker host. We saw an example of this in the chapter on Docker Compose —
    where we copied a file into a volume’s directory on the Docker host, and the file
    immediately appeared in the volume inside the container.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`local`驱动程序创建的所有卷在Linux上都有自己的目录，位于`/var/lib/docker/volumes`，在Windows上位于`C:\ProgramData\Docker\volumes`。这意味着您可以在Docker主机的文件系统中看到它们，甚至可以从Docker主机读取和写入数据。我们在Docker
    Compose章节中看到了一个例子，我们将文件复制到Docker主机上卷的目录中，文件立即出现在容器内的卷中。
- en: You can now use the `myvol` volume with Docker services and containers. For
    example, you can mount it into a new container using `docker container run` with
    the `--mount` flag. We’ll see some examples in a minute.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用`myvol`卷与Docker服务和容器一起使用。例如，您可以使用`docker container run`命令将其挂载到一个新的容器中，使用`--mount`标志。我们马上会看到一些例子。
- en: 'There are two ways to delete a Docker volume:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 删除Docker卷有两种方法：
- en: '`docker volume prune`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume prune`'
- en: '`docker volume rm`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume rm`'
- en: '`docker volume prune` will delete **all volumes** that are not mounted into
    a container or service replica, so **use with caution!** `docker volume rm` lets
    you specify exactly which volumes you want to delete. Neither command will delete
    a volume that is in use by a container or service replica.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker volume prune`将删除**所有未挂载到容器或服务副本的卷**，因此**请谨慎使用！** `docker volume rm`允许您精确指定要删除的卷。这两个命令都不会删除正在被容器或服务副本使用的卷。'
- en: As the `myvol` volume is not in use, delete it with the `prune` command.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`myvol`卷未被使用，可以使用`prune`命令删除它。
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`Congratulations, you’ve created, inspected, and deleted a Docker volume. And
    you did it all without interacting with a container. This demonstrates the independent
    nature of volumes.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “恭喜，您已经创建、检查和删除了一个Docker卷。而且您做到了所有这一切都没有与容器进行交互。这展示了卷的独立性。”
- en: At this point, you know all of the commands to create, list, inspect, and delete
    Docker volumes. However, it’s also possible to deploy volumes via Dockerfiles
    using the `VOLUME` instruction. The format is `VOLUME <container-mount-point`.
    However, it’s not possible to specify the host directory portion in a Dockerfile.
    This is because *host* directories are, by nature, *host*-dependent, meaning they
    can change between hosts and potentially break builds. If specifying via a Dockerfile,
    you have to specify host directories at deploy-time.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经知道了创建、列出、检查和删除Docker卷的所有命令。但是，也可以使用`VOLUME`指令通过Dockerfile部署卷。格式为`VOLUME
    <container-mount-point>`。但是，在Dockerfile中无法指定主机目录部分。这是因为*主机*目录本质上是*主机*相关的，这意味着它们可能在主机之间发生变化，并且可能破坏构建。如果通过Dockerfile指定，您必须在部署时指定主机目录。
- en: Demonstrating volumes with containers and services
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 演示容器和服务的卷
- en: Now that we know the basic volume-related Docker commands, let’s see how we
    use them with containers and services.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了与容器和服务一起使用基本卷相关的Docker命令，让我们看看如何使用它们。
- en: We’ll be working from a system with no volumes, and everything we demonstrate
    applies to both Linux and Windows.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在没有卷的系统上工作，我们演示的所有内容都适用于Linux和Windows。
- en: Use the following command to create a new standalone container and mount a volume
    called `bizvol`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个新的独立容器，并挂载一个名为`bizvol`的卷。
- en: '**Linux example:**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux示例：**'
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`**Windows example:**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows示例：**'
- en: Use PowerShell for all Windows examples, and note the use of backticks (`) to
    split commands across multiple lines.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有Windows示例，请使用PowerShell，并注意使用反引号（`）将命令拆分成多行。
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`The command should run successfully, even though there is no volume on the
    system called `bizvol`. This raises an interesting point:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`即使系统中没有名为`bizvol`的卷，该命令也应该成功运行。这提出了一个有趣的观点：'
- en: If you specify an existing volume, Docker will use the existing volume
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您指定一个已存在的卷，Docker将使用现有的卷
- en: If you specify a volume that does not exist, Docker will create it for you
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您指定一个不存在的卷，Docker会为您创建它
- en: In this case, `bizvol` did not exist, so Docker created it and mounted it into
    the new container. This means you’ll be able to see it with `docker volume ls`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`bizvol`不存在，因此Docker创建了它并将其挂载到新容器中。这意味着您将能够通过`docker volume ls`看到它。
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Although containers and volumes have separate lifecycle’s, you cannot delete
    a volume that is in use by a container. Try it.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`尽管容器和卷有各自的生命周期，但您不能删除正在被容器使用的卷。试试看。'
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`The volume is currently empty. Let’s `exec` onto the container and write some
    data to it. The example cited is Linux, if you’re following along on Windows,
    you should replace `sh` with `pwsh.exe` at the end of the `docker container exec`
    command. All other commands will work on Linux and Windows.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`卷目前是空的。让我们进入容器并向其中写入一些数据。如果您在Windows上进行操作，请记得在`docker container exec`命令的末尾将`sh`替换为`pwsh.exe`。所有其他命令都适用于Linux和Windows。'
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Type `exit` to return to the shell of your Docker host, and then delete the
    container with the following command.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 键入`exit`返回到Docker主机的shell，然后使用以下命令删除容器。
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Even though the container is deleted, the volume still exists:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 即使容器被删除，卷仍然存在：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Because the volume still exists, you can look at its mount point on the host
    to check if the data you wrote is still there.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`因为卷仍然存在，您可以查看宿主机上的挂载点，以检查您写入的数据是否仍然存在。'
- en: Run the following commands from the terminal of your Docker host. The first
    one will show that the file still exists, the second will show the contents of
    the file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从Docker主机的终端运行以下命令。第一个将显示文件仍然存在，第二个将显示文件的内容。
- en: Be sure to use the `C:\ProgramData\Docker\volumes\bizvol\_data` directory if
    you’re following along on Windows.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Windows上进行操作，请确保使用`C:\ProgramData\Docker\volumes\bizvol\_data`目录。
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`Great, the volume and data still exists.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`很好，卷和数据仍然存在。'
- en: It’s even possible to mount the `bizvol` volume into a new service or container.
    The following command creates a new Docker service, called hellcat, and mounts
    bizvol into the service replica at `/vol`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以将`bizvol`卷挂载到一个新的服务或容器中。以下命令创建一个名为hellcat的新Docker服务，并将bizvol挂载到服务副本的`/vol`目录中。
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`We didn’t specify the `--replicas` flag, so only a single service replica
    will be deployed. Find which node in the Swarm it’s running on.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`我们没有指定`--replicas`标志，因此只会部署一个服务副本。找出它在Swarm中运行的节点。'
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`In this example, the replica is running on `node1`. Log on to `node1` and
    get the ID of the service replica container.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`在这个例子中，副本正在`node1`上运行。登录`node1`并获取服务副本容器的ID。'
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`Notice that the container name is combination of `service-name`, `replica-number`,
    and `replica-ID` separated by periods.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`请注意，容器名称是由`service-name`、`replica-number`和`replica-ID`组合而成，用句点分隔。'
- en: Exec onto the container and check that the data is present in `/vol`. We’ll
    use the service replica’s container ID in the `exec` example. If you’re following
    along on Windows, remember to replace `sh` with `pwsh.exe`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 进入容器并检查`/vol`中是否存在数据。我们将在`exec`示例中使用服务副本的容器ID。如果您在Windows上进行操作，请记得将`sh`替换为`pwsh.exe`。
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`I guess it’s time to jump over to Amazon and write that book review :-D'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`我想现在是时候跳到亚马逊去写那篇书评了 :-D`'
- en: Excellent, the volume has preserved the original data and made it available
    to a new container.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，卷保留了原始数据，并使其对新容器可用。
- en: Sharing storage across cluster nodes
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在集群节点之间共享存储
- en: Integrating Docker with external storage systems makes it easy to share the
    external storage between cluster nodes. For example, a single storage LUN or NFS
    share can be presented to multiple Docker hosts, and therefore made available
    to containers and service replicas no-matter which host they’re running on. Figure
    13.3 shows a single external shared volume being shared presented to two Docker
    nodes. These Docker nodes then make the shared volume available to a couple of
    containers.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将Docker与外部存储系统集成，可以轻松地在集群节点之间共享外部存储。例如，可以将单个存储LUN或NFS共享呈现给多个Docker主机，因此可以提供给无论在哪个主机上运行的容器和服务副本。图13.3显示了一个外部共享卷被呈现给两个Docker节点。然后，这些Docker节点使共享卷可用于一些容器。
- en: '![Figure 13.3](images/figure13-3.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3](images/figure13-3.png)'
- en: Figure 13.3
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3
- en: Building a setup like this requires knowledge of the external storage system,
    as well as how your applications read and write data to the shared storage.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 构建这样的设置需要对外部存储系统有所了解，以及了解您的应用程序如何读取和写入共享存储中的数据。
- en: A major concern with a configuration like this is **data corruption**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置的一个主要问题是**数据损坏**。
- en: 'Assume the following example based on Figure 13.3: Container A on node1 updates
    some data in the shared volume. But instead of writing the update directly to
    the volume, it holds it in its local buffer for faster recall. At this point,
    Container A thinks the data has been updated. However, before container A on node
    1 flushes its buffers and commits the data to the volume, container B on node
    2 updates the same data with a different value and commits it straight to the
    volume. At this point, both containers *think* they’ve updated the data in the
    volume, but in reality only container B has. At a later date, container A on node
    1 flushes its buffers, overwriting the previous changes container B on node 2
    made. But container B and node 2 may not be made aware of this. This is how corruption
    happens.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下示例基于图13.3：节点1上的容器A更新了共享卷中的一些数据。但是，它并没有直接将更新写入卷中，而是将其保存在本地缓冲区中以便更快地调用。此时，容器A认为数据已经更新。然而，在节点2上，容器B更新了相同的数据，并直接将其提交到卷中。此时，两个容器都*认为*它们已经更新了卷中的数据，但实际上只有容器B更新了。在以后的某个时间，节点1上的容器A刷新其缓冲区，覆盖了节点2上容器B之前所做的更改。但是容器B和节点2可能不会意识到这一点。这就是数据损坏发生的方式。
- en: To prevent this, you need to write your applications in a way to avoid this.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，您需要以一种避免这种情况的方式编写您的应用程序。
- en: Volumes and persistent data - The Commands
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卷和持久数据 - 命令
- en: '`docker volume create` is the command we use to create new volumes. By default,
    volumes are created with the native `local` driver, but you can use the `-d` flag
    to specify a different driver.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume create` 是我们用来创建新卷的命令。默认情况下，卷是使用本机`local`驱动程序创建的，但您可以使用`-d`标志来指定不同的驱动程序。'
- en: '`docker volume ls` will list all volumes on the local Docker host.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume ls` 将列出本地Docker主机上的所有卷。'
- en: '`docker volume inspect` shows detailed volume information. Use this command
    to find out where a volume exists in the Docker host’s filesystem.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume inspect` 显示详细的卷信息。使用此命令来查找卷存在于Docker主机文件系统的位置。'
- en: '`docker volume prune` will delete **all** volumes that are not in use by a
    container or service replica. **Use with caution!**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume prune` 将删除**所有**未被容器或服务副本使用的卷。**谨慎使用！**'
- en: '`docker volume rm` deletes specific volumes that are not in use.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker volume rm` 删除未使用的特定卷。'
- en: Chapter Summary
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节总结
- en: 'There are two main types of data: persistent and non-persistent data. Persistent
    data is data that you need to keep, non-persistent is data that you don’t need
    to keep. By default, all containers get non-persistent storage that lives and
    dies with the container — we call this *local storage* and it’s ideal for non-persistent
    data. However, if your containers create data that you need to keep, you should
    store the data in a Docker volume.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 数据有两种主要类型：持久数据和非持久数据。持久数据是您需要保留的数据，非持久数据是您不需要保留的数据。默认情况下，所有容器都会获得与容器一起存在和消失的非持久存储，我们称之为*本地存储*，这对于非持久数据是理想的。然而，如果您的容器创建需要保留的数据，您应该将数据存储在Docker卷中。
- en: Docker volumes are first-class citizens in the Docker API, and are managed independently
    of containers with their own `docker volume` sub-command. This means that deleting
    a container will not delete the volumes it was using.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Docker卷是Docker API中的一流公民，并且独立于容器进行管理，具有自己的`docker volume`子命令。这意味着删除容器不会删除它正在使用的卷。
- en: Volumes are the recommended way to work with persistent data in a Docker environment.[PRE15]
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 卷是在Docker环境中处理持久数据的推荐方式。[PRE15]
