- en: '*Chapter 26*: Advanced UI with Navigation Drawer and Fragment'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第26章：使用导航抽屉和片段进行高级UI
- en: In this chapter, we will see what is (arguably) the most advanced UI. The `NavigationView`
    widget or navigation drawer, because of the way it slides out its contents, can
    be created simply by choosing it as a template when you create a new project.
    We will do just that and then we will examine the autogenerated code and learn
    how to interact with it. Then we will use all we know about `Fragment` to populate
    each of the "drawers" with different behavior and views. Then in the next chapter,
    we will learn about databases to add some new functionality to each `Fragment`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到（可以说是）最先进的UI。`NavigationView`小部件或导航抽屉，因为它滑出其内容的方式，可以通过在创建新项目时选择它作为模板来简单地创建。我们将这样做，然后我们将检查自动生成的代码并学习如何与其交互。然后，我们将使用我们对`Fragment`的所有了解来为每个“抽屉”填充不同的行为和视图。然后在下一章中，我们将学习数据库，为每个`Fragment`添加一些新功能。
- en: 'And here is what we will be doing in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章我们将要做的事情：
- en: Introducing `NavigationView`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍`NavigationView`
- en: Getting started with the simple database app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用简单的数据库应用程序
- en: Implementing a `NavigationView` project based on the autogenerated Android Studio
    template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于自动生成的Android Studio模板实现`NavigationView`项目
- en: Adding multiple Fragments and layouts to `NavigationView`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向`NavigationView`添加多个片段和布局
- en: Let's take a look at this extremely cool UI pattern.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个非常酷的UI模式。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2026)。
- en: Introducing NavigationView
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍NavigationView
- en: 'What''s so great about `NavigationView`? Well, the first thing that might catch
    your eye is that it can be made to look extremely stylish. Take a look at this
    next screenshot, which shows off a `NavigationView` in action in the Google Play
    app:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavigationView`有什么好处？嗯，可能会吸引你的第一件事是它可以看起来非常时尚。看看下一个屏幕截图，展示了Google Play应用中`NavigationView`的操作：'
- en: '![Figure 26.1 – NavigationView in action'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.1–NavigationView在操作中'
- en: '](img/Figure_26.01_B16773.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.01_B16773.jpg)'
- en: Figure 26.1 – NavigationView in action
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.1–NavigationView在操作中
- en: To be honest, right from the start, ours is not going to be as fancy as the
    one in the Google Play app. But the same functionality will be present in our
    app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，从一开始，我们的UI不会像Google Play应用程序中的那样花哨。但是我们的应用程序中将存在相同的功能。
- en: What else is neat about this UI is the way that it slides to hide/reveal itself
    when required. It is because of this behavior that it can be a significant size,
    making it extremely flexible with regard to the options that can be put on it,
    and when the user is finished with it, it completely disappears, like a drawer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个UI的另一个很棒的地方是它在需要时滑动隐藏/显示自己的方式。正是因为这种行为，它可以是一个相当大的尺寸，使得它在放置选项时非常灵活，当用户完成后，它会完全消失，就像一个抽屉一样。
- en: I suggest trying the Google Play app now and seeing how it works if you haven't
    already.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有尝试过，我建议现在尝试一下Google Play应用程序，看看它是如何工作的。
- en: You can slide your thumb/finger from the left-hand edge of the screen and the
    drawer will slowly slide out. You can of course slide it away again in the opposite
    direction.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从屏幕的左边缘滑动手指，抽屉会慢慢滑出。当然，您也可以以相反的方向将其滑开。
- en: While the navigation drawer is open, the rest of the screen is slightly dimmed
    (as seen in the previous screenshot), helping the user to focus on the navigation
    options offered.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航抽屉打开时，屏幕的其余部分会略微变暗（如前一个屏幕截图所示），帮助用户专注于提供的导航选项。
- en: You can also tap anywhere off the Navigation Drawer while it is open, and it
    will slide itself away, leaving the entire screen clear for the rest of the app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在打开导航抽屉时在任何地方点击，它会自动滑开，为应用程序的其余部分留出整个屏幕。
- en: The drawer is also opened by tapping on the menu icon in the top-left corner.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 抽屉也可以通过点击左上角的菜单图标打开。
- en: We can also tweak and refine the behavior of the navigation drawer, as we will
    see towards the end of the chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以调整和完善导航抽屉的行为，这是本章末尾我们将看到的。
- en: Examining the Simple Database app
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查简单的数据库应用程序
- en: In this chapter, we will focus on creating the `NavigationView` and populating
    it with four `Fragment` class instances and their respective layouts. In the next
    chapter, we will learn about and implement the database functionality.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于创建`NavigationView`并用四个`Fragment`类实例及其各自的布局填充它。在下一章中，我们将学习并实现数据库功能。
- en: The screens of the database app are as follows. Here is what our `NavigationView`
    layout looks like in all its glory. Note that many of the options and most of
    the appearance and decoration are provided by default when using the `NavigationView`
    Activity template.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库应用程序的屏幕如下。这是我们`NavigationView`布局的全部荣耀。请注意，当使用`NavigationView` Activity模板时，默认情况下提供了许多选项和大部分外观和装饰。
- en: '![Figure 26.2 – NavigationView layout'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.2–NavigationView布局'
- en: '](img/Figure_26.02_B16773.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.02_B16773.jpg)'
- en: Figure 26.2 – NavigationView layout
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.2–NavigationView布局
- en: The four main options are what we will add to the UI. They are **Insert**, **Delete**,
    **Search**, and **Results**. The layouts are shown, and their purposes are described
    as follows.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 四个主要选项是我们将添加到UI中的内容。它们是**插入**，**删除**，**搜索**和**结果**。布局如下所示，并描述了它们的目的。
- en: Insert
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入
- en: 'The first screen allows the user to insert a person''s name and their associated
    age into the database:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个屏幕允许用户将人名和他们的年龄插入到数据库中：
- en: '![Figure 26.3 – Insert'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.3–插入'
- en: '](img/Figure_26.03_B16773.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.03_B16773.jpg)'
- en: Figure 26.3 – Insert
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.3–插入
- en: This simple layout has two `EditText` widgets and a button. The user will enter
    a name and an age and then click the **INSERT** button to add them to the database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的布局有两个`EditText`小部件和一个按钮。用户将输入姓名和年龄，然后点击**插入**按钮将它们添加到数据库中。
- en: Delete
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除
- en: 'This screen is even simpler. The user will enter a name in the `EditText` widget
    and click the button:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕更简单。用户将在`EditText`小部件中输入姓名，然后点击按钮：
- en: '![Figure 26.4 – Delete'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.4 – 删除'
- en: '](img/Figure_26.04_B16773.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.04_B16773.jpg)'
- en: Figure 26.4 – Delete
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.4 – 删除
- en: If the name entered is present in the database, then the entry (name and age)
    will be deleted.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的姓名在数据库中存在，则该条目（姓名和年龄）将被删除。
- en: Search
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索
- en: 'This layout is much the same as the previous layout but has a different purpose:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局与上一个布局基本相同，但目的不同：
- en: '![Figure 26.5 – Search'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.5 – 搜索'
- en: '](img/Figure_26.05_B16773.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.05_B16773.jpg)'
- en: Figure 26.5 – Search
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.5 – 搜索
- en: The user will enter a name into the `EditText` widget and then click the **SEARCH**
    button. If the name is present in the database, then it will be displayed along
    with the matching age.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将在`EditText`小部件中输入姓名，然后点击**搜索**按钮。如果数据库中存在该姓名，则将显示该姓名以及匹配的年龄。
- en: Results
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果
- en: 'This screen shows all the entries in the entire database:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕显示了整个数据库中的所有条目：
- en: '![Figure 26.6 – Results'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.6 – 结果'
- en: '](img/Figure_26.06_B16773.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.06_B16773.jpg)'
- en: Figure 26.6 – Results
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.6 – 结果
- en: Let's get started with the Navigation Drawer.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用导航抽屉。
- en: Starting the Simple Database project
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始简单数据库项目
- en: 'Create a new project in Android Studio. Call it `Age Database`, use the **Navigation
    Drawer Activity** template. Before we do anything else, it is well worth running
    the app on an emulator to see how much has been autogenerated as part of this
    template:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目。将其命名为`Age Database`，使用**Navigation Drawer Activity**模板。在我们做任何其他事情之前，值得在模拟器上运行应用程序，看看作为模板的一部分自动生成了多少内容：
- en: '![Figure 26.7 – Home page'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.7 – 主页'
- en: '](img/Figure_26.07_B16773.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.07_B16773.jpg)'
- en: Figure 26.7 – Home page
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.7 – 主页
- en: 'At first glance, it is just a plain old layout with a `TextView` widget. But
    swipe from the left edge of the screen or press the menu button and the Navigation
    Drawer layout reveals itself:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，它只是一个普通的布局，带有一个`TextView`小部件。但是从屏幕左边缘滑动或按菜单按钮，导航抽屉布局就会显现出来：
- en: '![Figure 26.8 – Navigation page'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.8 – 导航页面'
- en: '](img/Figure_26.08_B16773.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.08_B16773.jpg)'
- en: Figure 26.8 – Navigation page
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.8 – 导航页面
- en: Now we can modify the options and insert a `Fragment` (with a layout) for each
    option. To understand how it works, let's examine some of the autogenerated code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以修改选项并为每个选项插入一个带有布局的`Fragment`。为了理解它是如何工作的，让我们检查一些自动生成的代码。
- en: Exploring the autogenerated code and assets
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索自动生成的代码和资源
- en: 'Open the `res/menu` folder. Notice there is an extra file titled `activity_main_drawer.xml`.
    This next code is an excerpt from this file, so we can discuss its contents:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`res/menu`文件夹。注意有一个额外的文件名为`activity_main_drawer.xml`。接下来的代码是从这个文件中摘录出来的，所以我们可以讨论它的内容：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice there are four `item` tags within a `group` tag. Now notice the `title`
    tags from top to bottom exactly correspond to the three text options in the menu
    of the autogenerated navigation drawer. Also notice that within each `item` tag,
    there is an `id` tag, so we can refer to them in our Java code as well as an `icon`
    tag, which corresponds to one of the icons in the `drawable` folder and is the
    icon displayed next to the option in the navigation drawer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`group`标签中有四个`item`标签。现在注意从上到下的`title`标签与自动生成的导航抽屉菜单中的三个文本选项完全对应。还要注意，在每个`item`标签中，有一个`id`标签，因此我们可以在我们的Java代码中引用它们，以及一个`icon`标签，它对应于`drawable`文件夹中的一个图标，并且是在导航抽屉中选项旁边显示的图标。
- en: There are also some files that we will not be using that have been autogenerated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些我们不会使用的自动生成的文件。
- en: Let's code the `Fragment` based classes and their layouts.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写基于`Fragment`的类和它们的布局。
- en: Coding the Fragment classes and their layouts
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写片段类和它们的布局
- en: We will create the four classes including the code that loads the layout as
    well as the actual layouts as well, but we won't put any of the database functionality
    into Java until we have learned about Android databases in the next chapter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建四个类，包括加载布局的代码以及实际的布局，但在学习了下一章关于Android数据库之后，我们不会将任何数据库功能放入Java中。
- en: After we have our four classes and their layouts, we will see how to load them
    from the Navigation Drawer menu. By the end of the chapter, we will have a fully
    working Navigation Drawer that lets the user swap between fragments but the fragments
    won't actually have any functionality until the next chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们有了四个类和它们的布局之后，我们将看到如何从导航抽屉菜单中加载它们。到本章结束时，我们将拥有一个完全工作的导航抽屉，让用户在片段之间切换，但是片段在下一章之前实际上没有任何功能。
- en: Creating the empty files for the classes and layouts
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类和布局的空文件
- en: Create four layout files with vertical `LinearLayout` as their parent view by
    right-clicking on the `layout` folder and selecting `content_insert`, the second
    `content_delete`, the third `content_search`, and the fourth `content_results`.
    All the options apart from the `LinearLayout` option and the filename can be left
    as their defaults.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击`layout`文件夹并选择`content_insert`，第二个`content_delete`，第三个`content_search`和第四个`content_results`来创建四个带有垂直`LinearLayout`作为父视图的布局文件。除了`LinearLayout`选项和文件名之外，所有选项都可以保持默认值。
- en: You should now have four new layout files containing `LinearLayout` parents.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该有四个包含`LinearLayout`父视图的新布局文件。
- en: Let's code the related Java classes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写相关的Java类。
- en: Coding the classes
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写类
- en: Create four new classes by right-clicking the folder that contains the `MainActivity.java`
    file and selecting `InsertFragment`, `DeleteFragment`, `SearchFragment`, and `ResultsFragment`.
    It should be plain from the names which fragments will show which layouts.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击包含`MainActivity.java`文件的文件夹，并选择`InsertFragment`，`DeleteFragment`，`SearchFragment`和`ResultsFragment`来创建四个新类。从名称上就可以明白哪些片段将显示哪些布局。
- en: Just to make it clear, let's add some code to each class to make the classes
    extend `Fragment` and load their associated layout.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确起见，让我们向每个类添加一些代码，使类扩展`Fragment`并加载其关联的布局。
- en: 'Open `InsertFragment.java` and edit it to contain the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`InsertFragment.java`并编辑它以包含以下代码：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `DeleteFragment.java` and edit it to contain the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`DeleteFragment.java`并编辑它以包含以下代码：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open `SearchFragment.java` and edit it to contain the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`SearchFragment.java`并编辑它以包含以下代码：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open `ResultsFragment.java` and edit it to contain the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`ResultsFragment.java`并编辑它以包含以下代码：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each class is completely empty of functionality except that in the `onCreateView`
    method, the appropriate layout is loaded from the associated layout file.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类完全没有功能，除了在`onCreateView`方法中，从关联的布局文件加载适当的布局。
- en: Let's add the UI to the layout files we created earlier.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向之前创建的布局文件添加UI。
- en: Designing the layouts
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计布局
- en: As we saw at the start of the chapter, all the layouts are simple. Getting your
    layouts identical to mine is not essential but as always, the ID values must be
    the same or the Java code we write in the next chapter won't work.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开始时所看到的，所有的布局都很简单。使您的布局与我的完全相同并不是必要的，但是ID值必须相同，否则我们在下一章中编写的Java代码将无法工作。
- en: Designing content_insert.xml
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_insert.xml
- en: Drag two `Plain Text` widgets from the `Text` category of the palette onto the
    layout. Remember that `Plain Text` widgets are `EditText` instances. Now drag
    a `Button` widget onto the layout after the two `Plain Text` widgets.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从调色板的`Text`类别中拖放两个`Plain Text`小部件到布局中。请记住，`Plain Text`小部件是`EditText`实例。现在在两个`Plain
    Text`小部件之后将一个`Button`小部件拖放到布局中。
- en: 'Configure the widgets according to this table:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此表配置小部件：
- en: '![](img/B16773_Table_1.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16773_Table_1.jpg)'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的布局在Android Studio的设计视图中应该是什么样子的：
- en: '![Figure 26.9 – Insert layout'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.9 - 插入布局'
- en: '](img/Figure_26.09_B16773.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.09_B16773.jpg)'
- en: Figure 26.9 – Insert layout
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.9 - 插入布局
- en: Designing content_delete.xml
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_delete.xml
- en: 'Drag a `Plain Text` onto the layout with a `Button` widget below it. Configure
    the widgets according to this table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Plain Text`拖放到布局中，下面是一个`Button`小部件。根据此表配置小部件：
- en: '![](img/B16773_Table_2.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16773_Table_2.png)'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的布局在Android Studio的设计视图中应该是什么样子的：
- en: '![Figure 26.10 – Delete layout'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.10 - 删除布局'
- en: '](img/Figure_26.10_B16773.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.10_B16773.jpg)'
- en: Figure 26.10 – Delete layout
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.10 - 删除布局
- en: Designing content_search.xml
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_search.xml
- en: 'Drag a `Plain Text` followed by a button and then a regular `TextView` onto
    the layout and then configure the widgets according to this table:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个`Plain Text`，然后是一个按钮，然后是一个常规的`TextView`拖放到布局中，然后根据此表配置小部件：
- en: '![](img/B16773_Table_3.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16773_Table_3.jpg)'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的布局在Android Studio的设计视图中应该是什么样子的：
- en: '![Figure 26.11 – Search layout'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.11 - 搜索布局'
- en: '](img/Figure_26.11_B16773.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.11_B16773.jpg)'
- en: Figure 26.11 – Search layout
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.11 - 搜索布局
- en: Designing content_results.xml
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计content_results.xml
- en: Drag a single `TextView` widget (not `Plain Text`/`EditText` this time) onto
    the layout. We will see in the next chapter how to add an entire list into this
    single `TextView` widget.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个`TextView`小部件（这次不是`Plain Text`/`EditText`）拖放到布局中。我们将在下一章中看到如何将整个列表添加到这个单个`TextView`小部件中。
- en: 'Configure the widget according to this table:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此表配置小部件：
- en: '![](img/B16773_Table_4.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16773_Table_4.png)'
- en: 'This is what your layout should look like in the design view in Android Studio:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的布局在Android Studio的设计视图中应该是什么样子的：
- en: '![Figure 26.12 – Results layout'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图26.12 - 结果布局'
- en: '](img/Figure_26.12_B16773.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_26.12_B16773.jpg)'
- en: Figure 26.12 – Results layout
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图26.12 - 结果布局
- en: Now we can use the `Fragment` based classes and their layouts.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用基于`Fragment`的类及其布局。
- en: Using the Fragment classes and their layouts
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Fragment类及其布局
- en: This stage has three steps. First, we need to edit the menu of the Navigation
    Drawer layout to reflect the options the user has. Next, we need a `View` instance
    in the layout to hold whatever the active `Fragment` instance is, and finally,
    we need to add code to `MainActivity.java` to switch between the different `Fragment`
    instances when the user taps on the menu.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段有三个步骤。首先，我们需要编辑导航抽屉布局的菜单，以反映用户的选项。接下来，我们需要在布局中添加一个`View`实例，以容纳当前`Fragment`实例，最后，我们需要在`MainActivity.java`中添加代码，以在用户点击菜单时在不同的`Fragment`实例之间切换。
- en: Editing the Navigation Drawer menu
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑导航抽屉菜单
- en: 'Open the `activity_main_drawer.xml` file in the `res/menu` folder of the project
    explorer. Edit the code within the `group` tags that we saw earlier to reflect
    our menu options of **Insert**, **Delete**, **Search**, and **Results**:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目资源管理器的`res/menu`文件夹中打开`activity_main_drawer.xml`文件。编辑我们之前看到的`group`标签内的代码，以反映我们的菜单选项**插入**，**删除**，**搜索**和**结果**：
- en: '[PRE5]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that the results item reuses the camera icon. It is left as a challenge
    for you if you wish to add a unique icon of your own.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，结果项重用了相机图标。如果您希望添加自己的唯一图标，这是您的挑战。
- en: Now we can add a layout within the main layout to hold whatever the current
    active fragment is.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在主布局中添加一个布局，以容纳当前活动的片段。
- en: Adding a holder to the main layout
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向主布局添加一个持有者
- en: 'Open the `content_main.xml` file in the `layout` folder. Locate the following
    existing code, which is the current fragment holder that is not right for our
    uses:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`content_main.xml`文件在`layout`文件夹中。找到以下现有的代码，这是当前不适合我们用途的当前片段持有者：
- en: '[PRE6]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Delete the preceding code and replace it with this XML code just before the
    closing tag of `ConstraintLayout`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 删除前面的代码，并在`ConstraintLayout`的结束标签之前用以下XML代码替换它：
- en: '[PRE7]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Switch to design view and click the **Infer constraints** button to fix the
    new layout in place.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到设计视图并单击**推断约束**按钮以固定新布局。
- en: Now we have a `FrameLayout` widget with an `id` attribute of `fragmentHolder`,
    which we can get a reference to and load all our `Fragment` instance layouts into.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个`id`属性为`fragmentHolder`的`FrameLayout`小部件，我们可以获取其引用并加载所有我们的`Fragment`实例布局。
- en: Coding the MainActivity.java class
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写MainActivity.java类
- en: 'Replace all the existing `import` directives with the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换所有现有的`import`指令：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open the `MainActivity.java` file and edit the entire code to match the following.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`文件并编辑整个代码以匹配以下内容。
- en: Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It might be quickest to delete everything except the `import` directives we
    have just added.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最快的方法可能是删除除我们刚刚添加的`import`指令之外的所有内容。
- en: 'We will discuss the code next, so study the variable names and the various
    classes and their related methods:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将讨论代码，因此请仔细研究变量名称和各种类及其相关方法。
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, the `onCreate` method handles aspects of our UI. The
    code gets a reference to a `DrawerLayout` widget that corresponds to the layout
    we have just seen. The code also creates a new instance of `ActionBarDrawerToggle`,
    which allows the controlling/toggling of the drawers. Next, a reference is captured
    to the layout file of the navigation drawer itself (`nav_view`) and the final
    line of code sets a listener on `NavigationView`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`onCreate`方法处理了我们UI的一些方面。 代码获取了与我们刚刚看到的布局相对应的`DrawerLayout`小部件的引用。 代码还创建了一个`ActionBarDrawerToggle`的新实例，它允许控制/切换抽屉。
    接下来，引用被捕获到导航抽屉本身的布局文件（`nav_view`），代码的最后一行设置了`NavigationView`上的监听器。
- en: 'Now add the `onBackPressed` method as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下方式添加`onBackPressed`方法：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `onBackPressed` method is an overridden method of Activity and it handles
    what happens when the user presses the back button on their device. The code closes
    the drawer if it is open and if it is not, simply calls `super.onBackPressed`.
    This means that the back button will close the drawer if it is open or have the
    default behavior if it was already closed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`onBackPressed`方法是Activity的一个重写方法，它处理用户在设备上按返回按钮时发生的情况。 代码关闭抽屉（如果打开），如果没有打开，则简单地调用`super.onBackPressed`。
    这意味着如果抽屉打开，返回按钮将关闭抽屉，如果已经关闭，则具有默认行为。'
- en: 'Add the `onCreateOptionsMenu` and `onOptionsItemSelected` methods, which aren''t
    really used in this app but will add the default functionality to the `options`
    button:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`onCreateOptionsMenu`和`onOptionsItemSelected`方法，这些方法在此应用程序中并没有真正使用，但将为`options`按钮添加默认功能：
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now add the `onNavigatioItemSelected` method shown next:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加下面显示的`onNavigatioItemSelected`方法：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's go through the code in the `onNavigationItemSelected` method. Most of
    the code should look familiar. For each of our menu options, we create a new `Fragment`
    of the appropriate type and insert it into our `RelativeLayout` with an `id` property
    value of `fragmentHolder`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`onNavigationItemSelected`方法中的代码。 大部分代码应该看起来很熟悉。 对于我们的每个菜单选项，我们都创建了一个相应类型的新`Fragment`，并将其插入到具有`fragmentHolder`属性值的`RelativeLayout`中。
- en: Finally, for the `MainActivity.java` file, the `transaction.addToBackStack`
    method means that the chosen `Fragment` instance will be remembered in order with
    any others. The result of this is that if the user chooses the `insert` fragment,
    then the `results` fragment then taps the back button, then the app will return
    the user to the `insert` fragment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于`MainActivity.java`文件，`transaction.addToBackStack`方法意味着所选的`Fragment`实例将被记住，以便与其他实例一起使用。
    这样做的结果是，如果用户选择`insert`片段，然后选择`results`片段，然后点击返回按钮，那么应用程序将返回用户到`insert`片段。
- en: You can now run the app and use the Navigation Drawer menu to flip between all
    our different `Fragment` instances. They will look just as they did in the screenshots
    at the start of this chapter, but they don't have any functionality yet.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以运行应用程序并使用导航抽屉菜单在所有不同的`Fragment`实例之间切换。 它们看起来就像本章开头的屏幕截图一样，但目前还没有任何功能。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how straightforward it is to have an attractive and
    pleasing UI and although our `Fragment` instances don't have any functionality
    yet, they are set up ready to go once we have learned about databases.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了拥有吸引人和令人愉悦的UI是多么简单，尽管我们的`Fragment`实例目前还没有任何功能，但一旦我们学会了数据库，它们就已经准备好了。
- en: In the next chapter, we will learn about databases in general, the specific
    database that Android apps can use, and we will then add the functionality to
    our `Fragment` classes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于数据库的一般知识，Android应用程序可以使用的特定数据库，然后我们将为我们的`Fragment`类添加功能。
