- en: Chapter 4. NumPy Core and Libs Submodules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：NumPy 核心和子模块
- en: 'After covering so many NumPy ufuncs in the previous chapter, I hope you still
    remember the very core of NumPy, which is the ndarray object. We are going to
    finish the last important attribute of ndarray: strides, which will give you the
    full picture of memory layout. Also, it''s time to show you that NumPy arrays
    can deal not only with numbers but also with various types of data; we will talk
    about record arrays and date time arrays. Lastly, we will show how to read/write
    NumPy arrays from/to files, and start to do some real-world analysis using NumPy.'
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章介绍了这么多 NumPy 函数之后，我希望您仍然记得 NumPy 的核心，即`ndarray`对象。 我们将完成`ndarray`的最后一个重要属性：步幅，它将为您提供完整的内存布局图。
    另外，该向您展示 NumPy 数组不仅可以处理数字，还可以处理各种类型的数据； 我们将讨论记录数组和日期时间数组。 最后，我们将展示如何从文件中读取/写入
    NumPy 数组，并开始使用 NumPy 进行一些实际的分析。
- en: 'The topics that will be covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及的主题是：
- en: 'The core of NumPy arrays: memory layout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 数组的核心：内存布局
- en: Structure arrays (record arrays)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构数组（记录数组）
- en: Date-time in NumPy arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 数组中的日期时间
- en: File I/O in NumPy arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 数组中的文件 I/O
- en: Introducing strides
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步幅
- en: Strides are the indexing scheme in NumPy arrays, and indicate the number of
    bytes to jump to find the next element. We all know the performance improvements
    of NumPy come from a homogeneous multidimensional array object with fixed-size
    items, the `numpy.ndarray` object. We've talked about the `shape` (dimension)
    of the `ndarray` object, the data type, and the order (the C-style row-major indexing
    arrays and the Fortran style column-major arrays.) Now it's time to take a closer
    look at  **strides** .
  prefs: []
  type: TYPE_NORMAL
  zh: 步幅是 NumPy 数组中的索引方案，它指示要跳转以查找下一个元素的字节数。 我们都知道 NumPy 的性能改进来自具有固定大小项的同构多维数组对象`numpy.ndarray`对象。
    我们已经讨论了`ndarray`对象的`shape`（维度），数据类型和顺序（C 风格的行主要索引数组和 Fortran 风格的列主要数组）。现在让我们仔细看看**步幅**。
- en: Let's start by creating a NumPy array and changing its shape to see the differences
    in the strides.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 NumPy 数组并更改其形状以查看步幅的差异。
- en: 'Create a NumPy array and take a look at the strides:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 NumPy 数组，看一下步幅：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A one-dimensional array `x` is created and its data type is NumPy integer `8`
    , which means each element in the array is an 8-bit integer (1 byte each, and
    a total of 8 bytes). The strides represent the tuple of bytes to step in each
    dimension when traversing an array. In the previous example, it's one dimension,
    so we obtain the tuple as (1, ). Each element is 1 byte apart from its previous
    element. When we print out `x.data` , we can get the Python buffer object pointing
    to the start of the data, which is from `x01` to `x07` in the example.
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一维数组`x`，其数据类型为 NumPy 整数`8`，这意味着数组中的每个元素都是 8 位整数（每个 1 字节，总共 8 个字节）。 步幅表示遍历数组时在每个维度上步进的字节元组。
    在上一个示例中，它是一个维度，因此我们将元组获得为`(1, )`。 每个元素与其前一个元素相距 1 个字节。 当我们打印出`x.data`时，我们可以获得指向数据开头的
    Python 缓冲区对象，在示例中从`x01`到`x07`。
- en: 'Change the shape and see the stride change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改形状并查看步幅变化：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we change the dimensions of `x` to 2 by 4 and check the strides again.
    We can see it changes to `(4, 1)` , which means the elements in the first dimension
    are four bytes apart, and the array need to jump four bytes to find the next row,
    but the elements in the second dimension are still 1 byte apart, jumping one byte
    to find the next column. Let''s print out `x.data` again, and we can see that
    the memory layout of the data remains the same, but only the strides change. The
    same behavior occurs when we change the shape to be three dimensional: 1 by 4
    by 2 arrays. (What if our arrays are constructed by the Fortran style order? How
    will the strides change due to changing the shapes? Try to create a column-major
    array and do the same exercise to check this out.)'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将`x`的尺寸更改为 2 乘以 4，然后再次检查步幅。 我们可以看到它变为`(4, 1)`，这意味着第一维中的元素相隔四个字节，并且数组需要跳转四个字节才能找到下一行，但是第二维中的元素仍相隔
    1 个字节， 跳一个字节以查找下一列。 让我们再次打印出`x.data`，我们可以看到数据的内存布局保持不变，但是步幅改变了。 当我们将形状更改为三维时，会发生相同的行为：`1
    x 4 x 2`数组。 （如果我们的数组是按照 Fortran 样式顺序构建的，会怎样？由于形状的变化，步幅将如何变化？尝试创建一个以列为主的数组，并执行相同的操作来检验这一点。）
- en: 'So now we know what a stride is, and its relationship to an `ndarray` object,
    but how can the stride improve our NumPy experience? Let''s do some stride manipulation
    to get a better sense of this: two arrays are with same content but have different
    strides:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所以现在我们知道了什么是步幅，以及它与`ndarray`对象的关系，但是步幅如何改善我们的 NumPy 体验？ 让我们进行一些步幅操作以更好地理解这一点：两个数组的内容相同，但步幅却有所不同：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We create two NumPy Arrays, `x` and `y` , and do a comparison; we can see that
    the two arrays are equal. They have the same shape and all the elements are one,
    but actually the two arrays are different in terms of memory layout. Let's simply
    use the flags attribute you learned about in [Chapter 2](text00021.html#page "Chapter 2. The
    NumPy ndarray Object") ,  *The NumPy ndarray Object* to check the two arrays'
    memory layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建两个 NumPy 数组`x`和`y`并进行比较； 我们可以看到两个数组相等。 它们具有相同的形状，所有元素都是一个，但是实际上这两个数组在内存布局方面是不同的。
    让我们简单地使用您在第二章， “NumPy `ndarray`对象”中了解的`flags`属性来检查两个数组的内存布局。
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can see that the `x` array is continuous in both the C and Fortran order
    while `y` is not. Let''s check the strides for the difference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到`x`数组在 C 和 Fortran 顺序中都是连续的，而`y`则不是。 让我们检查一下步幅差异：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Array `x` is created continuously, so in the same dimension each element is
    eight bytes apart (the default dtype of `numpy.ones` is a 64-bit float); however, `y`
    is created from a subset of 10000 * 100 for every 100 elements, so the index schema
    in the memory layout is not continuous.
  prefs: []
  type: TYPE_NORMAL
  zh: 数组`x`是连续创建的，因此在同一维中，每个元素相隔八个字节（`numpy.ones`的默认`dtype`是 64 位浮点数）； 但是，`y`是由每 100
    个元素`10000 * 100`的子集创建的，因此内存布局中的索引架构不是连续的。
- en: 'Even though `x` and `y` have the same shape, each element in `y` is 800 bytes
    apart from each other. When you use NumPy arrays `x` and `y` , you might not notice
    the difference in indexing, but the memory layout does affect the performance.
    Let''s use the `%timeit` function in IPython to check this out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管`x`和`y`具有相同的形状，但`y`中的每个元素彼此相距 800 个字节。 使用 NumPy 数组`x`和`y`时，您可能不会注意到索引的差异，但是内存布局确实会影响性能。
    让我们使用 IPython 中的`%timeit`函数进行检查：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Typically with a fixed cache size, when the stride size gets larger, the hit
    rate (the fraction of memory accessed that finds data in the cache) will be lower,
    comparatively, while the miss rate (the fraction of memory accessed that has to
    go to the memory) will be higher. The cache hit time and miss time compose the
    average data access time. Let's try to look at our example again from the cache
    perspective. Array `x` with smaller strides is faster than the larger strides
    of `y` . The reason for the difference in performance is that the CPU is pulling
    data from the main memory to its cache in blocks, and the smaller stride means
    fewer transfers are needed. See the following graph for details, where the red
    line represents the size of the CPU cache, and blue boxes represent the memory
    layout containing the data.
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在固定的高速缓存大小的情况下，当步幅大小变大时，命中率（在高速缓存中找到数据的内存访问量的百分比）相对较低，而未命中率（必须访问的内存访问量的百分比）
    到内存）将会更高。 缓存命中时间和未命中时间构成了平均数据访问时间。 让我们尝试从缓存的角度再次来看我们的示例。 步幅较小的数组`x`快于`y`步幅较大的数组。
    性能差异的原因是 CPU 将数据从主存储器分块地拉到其缓存中，步幅越小意味着需要的传输越少。 有关详细信息，请参见下图，其中红线表示 CPU 缓存的大小，蓝框表示包含数据的内存布局。
- en: It's obvious that if `x` and `y` are both required, 100 blue boxes of data,
    the required cache time for `x`  will be less.
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果同时需要`x`和`y`，则 100 个蓝色框的数据将减少`x`所需的缓存时间。
- en: '![Introducing strides](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![步长简介](img/00008.jpeg)'
- en: 'Cache and the x, y array in the memory
    layout'
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存和内存布局中的`x`和`y`数组
- en: Structured arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化数组
- en: 'Structured arrays or record arrays are useful when you perform computations,
    and at the same time you could keep closely related data together. For example,
    when you process incident data and each incident contains geographic coordinates
    and the occurrence time, while you calculate the final result, you can easily
    find the associated geographic locations and timepoint for further visualization.
    NumPy also provides powerful capabilities to create arrays of records, as multiple
    data types live in one NumPy array. However, one principle in NumPy that still
    needs to be honored is that the data type in each field (you can think of this
    as a column in the records) needs to be homogeneous. Here are some simple examples
    that show you how it works:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数组或记录数组在执行计算时很有用，同时您可以将密切相关的数据保持在一起。 例如，当您处理事件数据并且每个事件都包含地理坐标和发生时间时，在计算最终结果时，您可以轻松地找到相关的地理位置和时间点以进行进一步的可视化。
    NumPy 还提供了创建记录数组的强大功能，因为一个 NumPy 数组中存在多种数据类型。 但是，在 NumPy 中仍然需要遵守的一个原则是，每个字段中的数据类型（您可以将其视为记录中的列）需要是同质的。
    以下是一些简单的示例，向您展示其工作方式：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the previous example, we created a one-dimensional record array using `numpy.empty()`
    and specified the data types for the elements-the first element is `i4` (a 32-bit
    integer, where `i` stands for a signed integer, and `4` means 4 bytes, like `np.int32`
    ), the second element is a 32-bit float (`f` stands for float and also 4 bytes),
    and the third element is a string of length less than or equal to 10\. We assign
    the values to the defined array following the data type orders we specified.
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们使用`numpy.empty()`创建了一个一维记录数组，并指定了元素的数据类型-第一个元素是`i4`（32 位整数，其中`i`代表有符号整数，
    `4`表示 4 个字节，例如`np.int32`），第二个元素是 32 位浮点数（`f`代表`float`也是 4 个字节），第三个元素是长度小于或等于 10
    的字符串。我们按照指定的数据类型顺序将值分配给定义的数组。
- en: You can see the print-out of `x` , which now contains three different types
    of records, and we also get a default field name in `dtype` :`f0` , `f1` , and `f2`
    . Of course, you may specify your field names, as we'll show you in the following
    examples.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`x`的打印输出，该输出现在包含三种不同类型的记录，并且我们还在`dtype`中获得了默认字段名称：`f0`，`f1`和`f2`。 当然，您可以指定字段名称，如以下示例所示。
- en: 'One thing to note here is that we used the print-out data type-there is a `<`
    in front of `i4` and `f4` , and `<` stands for byteorder  *big-endian* (indicating
    the memory address increase order):'
  prefs: []
  type: TYPE_NORMAL
  zh: 这里要注意的一件事是，我们使用了打印输出数据类型-`i4`和`f4`前面有一个`<`，而`<`代表字节顺序*大端*（指示内存地址增加顺序）：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The way we retrieve data remains the same, we use the index to obtain the record,
    but moreover, we can use the field name to obtain the value of certain fields,
    so in the previous example, we used `f2` to obtain the string field. In the following
    example, we are going to create a view of `x` , named `y` , and see how it interacts
    with the original record array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 检索数据的方式保持不变，我们使用索引来获取记录，但是此外，我们可以使用字段名称来获取某些字段的值，因此在上一个示例中，我们使用`f2`来获取字符串字段。
    在下面的示例中，我们将创建名为`y`的`x`视图，并查看其如何与原始记录数组交互：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, `y` is the view of field `f0` in `x` . In the record arrays, the characteristics
    of NumPy arrays still remain. When you multiply the scalar 10, it still applies
    to whole array of `y` (the broadcasting rule), and it always honors the data type.
    You can see after the multiplication, we add `0.5` to `y` , but since the data
    type of field `f0` is a 32-bit integer, the result is still `[10, 100]` . Also, `y`
    is a view of `f0` in `x` , so they share the same memory block. When we print
    out `x` after the calculation in `y` , we can find that the values in `x` have
    also changed.
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`y`是`x`中字段`f0`的视图。 在记录数组中，NumPy 数组的特征仍然保留。 当您将标量 10 乘以时，它仍然适用于`y`的整个数组（广播规则），并且始终采用数据类型。
    您可以在乘法之后看到，我们在`y`上添加了`0.5`，但是由于字段`f0`的数据类型是 32 位整数，结果仍然是`[10, 100]`。 另外，`y`是`x`中`f0`的视图，因此它们共享相同的内存块。
    当我们在`y`中进行计算后打印出`x`时，我们发现`x`中的值也已更改。
- en: Before we go further into the record arrays, let's sort out how to define a
    record array. The easiest way is as shown in the previous example, where we initialize
    a NumPy array and use the string argument to specify the data type of fields.
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步介绍记录数组之前，让我们先整理一下如何定义记录数组。 最简单的方法如上一个示例所示，在该示例中，我们初始化 NumPy 数组，并使用字符串参数指定字段的数据类型。
- en: 'There are many forms of string argument NumPy can accept (see [http://docs.scipy.org/doc/numpy/user/basics.rec.html](http://docs.scipy.org/doc/numpy/user/basics.rec.html)
    for details); the most preferred can be chosen from one of these:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 可以接受多种形式的字符串参数（详细信息请参见[`docs.scipy.org/doc/numpy/user/basics.rec.html`](http://docs.scipy.org/doc/numpy/user/basics.rec.html)）；
    最优选的可以选自以下之一：
- en: '| **Data types** | **Representation** |'
  prefs: []
  type: TYPE_TB
  zh: '| **数据类型** | **表示形式** |'
- en: 
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `b1` | Bytes |'
  prefs: []
  type: TYPE_TB
  zh: '| `b1` | 字节 |'
- en: '| `i1` ,`i2` ,`i4` ,`i8` | Signed integers with 1, 2, 4, and 8 bytes corresponding
    to them |'
  prefs: []
  type: TYPE_TB
  zh: '| `i1`，`i2`，`i4`，`i8` | 1、2、4 和 8 个字节的带符号整数 |'
- en: '| `u1` ,`u2` ,`u4` ,`u8` | Unsigned integers with 1, 2, 4, and 8 bytes |'
  prefs: []
  type: TYPE_TB
  zh: '| `u1`，`u2`，`u4`，`u8` | 1、2、4 和 8 个字节的无符号整数 |'
- en: '| `f2` ,`f4` ,`f8` | Floats with 2, 4, and 8 bytes |'
  prefs: []
  type: TYPE_TB
  zh: '| `f2`，`f4`，`f8` |  2、4 和 8 个字节的浮点数 |'
- en: '| `c8` ,`c16` | Complex with 8 and 16 bytes |'
  prefs: []
  type: TYPE_TB
  zh: '| `c8`，`c16` | 8 和 16 个字节的复数 |'
- en: '| `a<n>` | Fixed length strings of length *n* |'
  prefs: []
  type: TYPE_TB
  zh: '| `a<n>` | 长度为`n`的定长字符串 |'
- en: 'You may also prefix the string arguments with a repeated number or a shape
    to define the dimension of the field, but it''s still considered as just one field
    in the record arrays. Let''s try using the shape as prefix to the string arguments
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在字符串参数前面加上重复的数字或形状，以定义字段的维，但是在记录数组中，它仍仅被视为一个字段。 在下面的示例中，让我们尝试使用形状作为字符串参数的前缀：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the previous example, field `f0` is a one-dimensional array with size `3`
    and `f1` is a two-dimensional array with shape `(2, 3)` . Now, we are clear about
    the structure of a record array and how to define it. You might be wondering whether
    the default field name can be changed to something meaningful in your analysis?
    Of course it can! This is how:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，字段`f0`是尺寸为`3`的一维数组，`f1`是形状为`(2, 3)`的二维数组。 现在，我们很清楚记录数组的结构以及如何定义它。 您可能想知道默认字段名称是否可以更改为对您的分析有意义的名称？
    当然可以！ 这是这样的：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'By assigning the new field names back to the names attribute in the `dtype`
    object, we can have our customized field names. Or you can do this when you initialize
    the record arrays by using a list with a tuple, or a dictionary. In the following
    examples, we are going to create two identical record arrays with customized field
    names using a list, and a dictionary:'
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将新的字段名称分配回`dtype`对象中的名称属性，我们可以获得自定义的字段名称。 或者，您可以通过使用带有元组的列表或字典来初始化记录数组时执行此操作。
    在以下示例中，我们将使用列表和字典来创建两个具有自定义字段名称的相同记录数组：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the list example, we make a tuple of (field name, data type, and shape) for
    each field. The shape argument is optional; you may also specify the shape with
    the data type argument. While using a dictionary to define the field, there are
    two required keys (`names` and `formats` ) and each key has an equally sized list
    of values.
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表示例中，我们为每个字段创建一个元组（字段名称，数据类型和形状）。 `shape`参数是可选的； 您也可以使用数据类型参数指定形状。 使用字典定义字段时，有两个必需的键（`names`和`formats`），每个键都有大小相等的值列表。
- en: 'Before we go on to the next section, we are going to show you how to access
    multiple fields in your record array all at once. The following example still
    uses the array `x` that we created at beginning with a customized field: `id`
    , `value` , and `note` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，我们将向您展示如何一次访问记录数组中的多个字段。 以下示例仍使用我们在自定义字段开头创建的数组`x`：`id`，`value`和`note`：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You may find this example too simple; if so, you can try to create a new record
    array from a real-life example containing the country name, population, and rank
    using the data from Wikipedia: [https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population](https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population)
    . This will be more fun!'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现此示例过于简单； 如果是这样，您可以尝试使用来自维基百科的数据从包含国家名称，人口和排名的真实示例创建一个新的记录数组：[`en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population`](https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population)。
    这样会更有趣！
- en: Dates and time in NumPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 中的日期和时间
- en: Dates and times are important when you are doing time series analytics, from
    something as simple as accumulating daily visitors in a museum to something as
    complicated as trending regression for a crime forecast. Starting from NumPy 1.7,
    the NumPy core supports date time types (though it's still experimental, and might
    be subject to change). In order to differentiate from the `datetime` object in
    Python, the data type is called `datetime64` .
  prefs: []
  type: TYPE_NORMAL
  zh: 当您进行时间序列分析时，日期和时间很重要，从简单的事情（如在博物馆中累积每天的访客）到复杂的事情（如对犯罪预测的趋势回归）。 从 NumPy 1.7 开始，NumPy
    核心支持日期时间类型（尽管它仍处于试验阶段，并且可能会发生变化）。 为了区别于 Python 中的`datetime`对象，数据类型称为`datetime64`。
- en: 'This section will cover `numpy.datetime64` creation, time delta arithmetic,
    and the conversion between units and the Python `datetime` . Let''s create a `numpy.datetime64`
    object by using an ISO string:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍`numpy.datetime64`的创建，时间增量算法以及单位与 Python 之间的转换`datetime`。 让我们使用 ISO 字符串创建一个`numpy.datetime64`对象：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`x` and `y` are both `numpy.datetime64` objects and are constructed from an
    ISO 8601 string (the universal date format-for details see [https://en.wikipedia.org/wiki/ISO_8601](https://en.wikipedia.org/wiki/ISO_8601)
    ). But the input string for `x` contains a days unit while the string for `y`
    does not. While creating the NumPy `datetime64` , it will automatically select
    from the form of the input string, so when we print out the `dtype` for both `x`
    and `y` , we can see that `x` with unit `D` stands for days while `y` with unit `M`
    stands for months. The`<` is also the byteorder, here it is the big-endian, and
    M8 is the short notation of `datetime64` (implemented from `np.int64` ). The default
    date units supported by `numpy.datetime64` are years (`Y` ), months (`M` ), weeks
    (`W` ), and days (`D` ), while the time units are hours (`h` ), minutes (`m` ),
    seconds (`s` ), and milliseconds (`ms` ).'
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`和`y`都是`numpy.datetime64`对象，并由 ISO 8601 字符串构造（通用日期格式-有关详细信息，请参见[`en.wikipedia.org/wiki/ISO_8601`](https://en.wikipedia.org/wiki/ISO_8601)。
    但是`x`的输入字符串包含天单位，而`y`的字符串则没有。 创建 NumPy `datetime64`时，它将自动从输入字符串的形式中进行选择，因此当我们为`x`和`y`都打印出`dtype`时，我们可以看到`x`的单位为`D`。
    ]代表几天，而`y`和单位`M`代表几个月。 `<`也是字节序，这里是大端，`M8`是`datetime64`的缩写（从`np.int64`实现）。 `numpy.datetime64`支持的默认日期单位是年（`Y`），月（`M`），周（`W`）和天（`D`），而时间单位是小时（`h`）。
    ，分钟（`m`），秒（`s`）和毫秒（`ms`）。'
- en: 'Of course we can specify the units when we create the array and also use the
    `numpy.arange()` method to create the sequence of the array. See the following
    examples:'
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们在创建数组时可以指定单位，也可以使用`numpy.arange()`方法创建数组的序列。 请参阅以下示例：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'However, it''s not allowed to specify a time unit when the ISO string only
    contains date units. A `TypeError` will be triggered, since conversion between
    date units and time units requires a choice of time zone and the particular time
    of day on a given date:'
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当 ISO 字符串仅包含日期单位时，不允许指定时间单位。 将触发`TypeError`，因为日期单位和时间单位之间的转换需要选择时区和给定日期的特定时间：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we are going to do a subtraction of two `numpy.datetime64` arrays, and
    you will see that the broadcasting rules are still valid as long as the date/time
    units between two arrays are convertible. We use the same array `x` created earlier
    and create a new `y` for the following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对两个`numpy.datetime64`数组进行减法运算，您将看到只要两个数组之间的日期/时间单位是可转换的，广播规则仍然有效。 我们使用先前创建的相同数组`x`，并为以下示例创建一个新的`y`：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Interestingly enough, the result array of `x` subtracting `y` is `[0, 31, 59]`
    , not the date anymore, and the `dtype`  has changed to `timedelta64[D]` . Because
    NumPy doesn''t have a physical quantities system in its core, the `timedelta64`
    data type was created to complement `datetime64` . In the previous example,`[0,
    31, 59]` is the units from 2015-01-01 in each element in `x` , and the units are
    days (`D` ). You may also do the arithmetic between `datetime64` and `timedelta64`
    , as shown in the following examples:'
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，`x`减去`y`的结果数组是`[0, 31, 59]`，而不是日期，并且`dtype`更改为`timedelta64[D]`。 由于 NumPy
    的核心没有物理量系统，因此创建了`timedelta64`数据类型以补充`datetime64`。 在上一个示例中，`[0, 31, 59]`是`x`中每个元素中从`2015-01-01`开始的单位，单位是天（`D`）。
    您也可以在`datetime64`和`timedelta64`之间进行算术运算，如以下示例所示：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the last part of this section, we are going to talk about the conversion
    between `numpy.datetime64` and Python the `datetime` . Although the `datetime64`
    object inherits many traits from a NumPy array, there are still some benefits
    from using the Python `datetime` object (such as the `date` and `year` attributes, `isoformat`
    , and more) or vice versa. For example, you may have a list of `datetime` objects,
    and you may want to convert them to `numpy.datetime64` for the arithmetic or other
    NumPy ufuncs. In the following example, we are going to convert the existing `datetime64`
    array `x` to a list of Python `datetime` in two ways:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后部分，我们将讨论`numpy.datetime64`和 Python `datetime`之间的转换。 尽管`datetime64`对象从
    NumPy 数组继承了许多特征，但是使用 Python `datetime`对象（例如`date`和`year`属性，`isoformat`等）仍然有一些好处，反之亦然
    。 例如，您可能具有`datetime`对象的列表，并且可能希望将其转换为用于算术或其他 NumPy 函数的`numpy.datetime64`。 在下面的示例中，我们将以两种方式将现有的`datetime64`数组`x`转换为
    Python `datetime`列表：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can see that `numpy.datetime64.tolist()` and `numpy.datetime64.item()` with
    the `for` loop can achieve the same goal, that is, converting the array to a list
    of Python `datetime` objects. But needless to say, we all know which is the more
    preferred method to do the conversion (if you don't know the answer, have a quick
    look at [Chapter 3](text00028.html#page "Chapter 3. Using NumPy Arrays") ,  *Using
    NumPy Arrays* .) On the other hand, if you already have a list of Python `datetime`
    and want to convert it to NumPy `datetime64` arrays, simply use the `numpy.array()`
    function.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到带有`for`循环的`numpy.datetime64.tolist()`和`numpy.datetime64.item()`可以实现相同的目标，即将数组转换为
    Python `datetime`对象的列表。 但是不用说，我们都知道哪种方法更适合进行转换（如果您不知道答案，请快速浏览第三章，“使用 Numpy 数组”。）另一方面，如果您已经有了
    Python `datetime`的列表，并想将其转换为 NumPy `datetime64`数组，则只需使用`numpy.array()`函数。
- en: File I/O and NumPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 文件 I/O
- en: Now we have the ability to perform NumPy array computation and manipulation
    and we know how to construct a record array, it's time for us to do some real-world
    analysis by reading files into a NumPy array and outputing the result array to
    a file for further analysis.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以执行 NumPy 数组计算和操作，并且知道如何构造记录数组，现在是时候进行一些实际的分析了，方法是将文件读入 NumPy 数组并将结果数组输出到文件中以进行进一步的分析。
- en: 'We should talk about reading the file first and then exporting the file. But
    now, we are going to reverse the process, and create a record array first and
    then output the array to a CSV file. We read the exported CSV file into the NumPy
    record arrays and compared it with our original record array. The sample array
    we''re going to create will contain an `id` field with consecutive integers, a `value`
    field containing random floats, and a `date` field with `numpy.datetime64[''D'']`
    . This exercise will use all the knowledge you gained from the previous sections
    and chapters. Let''s start creating the record array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该谈论先读取文件然后导出文件。 但是现在，我们将逆转此过程，先创建一个记录数组，然后将其输出到 CSV 文件。 我们将导出的 CSV 文件读入 NumPy
    记录数组，并将其与原始记录数组进行比较。 我们将要创建的样本数组将包含一个带有连续整数的`id`字段，一个包含随机浮点数的`value`字段和一个带有`numpy.datetime64['D']`的`date`字段。
    本练习将使用您从前面的章节中获得的所有知识。 让我们开始创建记录数组：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We first create three NumPy arrays representing the fields we need: `id` , `value`
    , and `date` . When creating the `date` field, we combine the `numpy.datetime64`
    with a random NumPy array with size `1000` to simulate random dates in the range
    from `2014-01-01` to `2014-12-31` (365 days).'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建代表所需字段的三个 NumPy 数组：`id`，`value`和`date`。 创建`date`字段时，我们将`numpy.datetime64`与大小为`1000`的随机
    NumPy 数组结合使用，以模拟从`2014-01-01`到`2014-12-31`范围内的随机日期（365 天）。
- en: Then we use the `numpy.core.records.fromarrays()` function to merge the three
    arrays into one record array and assign the `names` (field name) and the `formats`
    (data type). One thing to notice here is that the record array doesn't support
    the `numpy.datetime64` object, so we stored it in the array as a date/time string
    with a length of 10.
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`numpy.core.records.fromarrays()`函数将三个数组合并为一个记录数组，并分配`names`（字段名称）和`formats`（数据类型）。
    这里要注意的一件事是，记录数组不支持`numpy.datetime64`对象，因此我们将其作为长度为 10 的日期/时间字符串存储在数组中。
- en: 'If you are using Python 3, you will find a prefix `b` added to the front of
    the date/time string in the record array such as `b''2014-09-25''` . `b` here
    stands for "bytes literals" meaning it only contains ASCII characters (all string
    types in Python 3 are Unicode ,which is one major change between Python 2 and
    3). Therefore in Python 3, converting an object (`datetime64` ) to a string will
    add the prefix to differentiate between the normal string type. However, it doesn''t
    affect what we are going to do next-exporting the record array to a CSV file:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Python 3，则会在记录数组（例如`b'2014-09-25'`）的日期/时间字符串的前面找到前缀`b`。 `b`在这里代表“字节字面值”，这意味着它仅包含
    ASCII 字符（Python 3 中的所有字符串类型均为 Unicode，这是 Python 2 和 3 之间的一大变化）。 因此，在 Python 3
    中，将对象（`datetime64`）转换为字符串将添加前缀以区分普通字符串类型。 但是，这不会影响下一步将记录数组导出到 CSV 文件中的操作：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We use the `numpy.savetxt()` function to handle the exporting, and we specify
    the first argument as the exported file location, the array name, and the format
    using the `fmt` argument. We have three fields with three different data types
    and we want to add `,` in between each field in the CSV file. If you prefer any
    other delimiters, replace the comma in the `fmt` argument. We also get rid of
    redundant digits in the `value` field, so we specify only four digits after the
    decimal points to the file by using `%.4f` . Now you may go to the file location
    we specified in the first argument to check the CSV file. Open it in a spreadsheet
    software program and you can see the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`numpy.savetxt()`函数来处理导出，并使用`fmt`参数将第一个参数指定为导出文件的位置，数组名称和格式。 我们有三个具有三种不同数据类型的字段，我们想在
    CSV 文件的每个字段之间添加`,`。 如果您更喜欢其他定界符，请在`fmt`参数中替换逗号。 我们还消除了`value`字段中的冗余数字，因此我们使用`%.4f`仅在文件的小数点后指定四位数字。
    现在，您可以转到我们在第一个参数中指定的文件位置，以检查 CSV 文件。 在电子表格软件程序中将其打开，您将看到以下内容：
- en: '![File I/O and NumPy](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![文件 I/O 和 NumPy](img/00009.jpeg)'
- en: 'Next, we are going to read the CSV file to a record array and use the `value`
    field to generate a mask field, named `mask` , which represents a value larger
    than or equal to 0.75\. Then we will append the new mask field to the record array.
    Let''s read the CSV file first:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将 CSV 文件读取到记录数组中，并使用`value`字段生成一个名为`mask`的掩码字段，该掩码字段表示一个大于或等于 0.75 的值。
    然后，我们将新的`mask`字段追加到记录数组。 让我们先阅读 CSV 文件：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We use `numpy.genfromtxt()` to read the file into NumPy record array. The first
    argument is still the file location we want to access, and the `dtype` argument
    is optional. If we didn't specify this, NumPy will determine the `dtype` argument
    using the contents of each column individually. Since we clearly know about the
    data, it's recommended to specify every time when you read the file.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`numpy.genfromtxt()`将文件读入 NumPy 记录数组。 第一个参数仍然是我们要访问的文件位置，`dtype`参数是可选的。
    如果未指定，NumPy 将使用各列的内容分别确定`dtype`参数。 由于我们清楚地了解数据，因此建议您在每次读取文件时指定一次。
- en: The `delimiter` argument is also optional, and by default, any consecutive whitespaces
    act as delimiters. However, we used "`,` "for the CSV file. The last optional
    argument we use in the method is the `skip_header` . Although we didn't have the
    field name on top of the records in the file, NumPy provides the functionality
    to skip a number of lines at the beginning of the file.
  prefs: []
  type: TYPE_NORMAL
  zh: '`delimiter`参数也是可选的，默认情况下，任何连续的空格都用作分隔符。 但是，对于 CSV 文件，我们使用了`,`。 我们在方法中使用的最后一个可选参数是`skip_header`。
    尽管我们没有在文件中的记录顶部添加字段名称，但是 NumPy 提供了跳过文件开头多行的功能。'
- en: Other than `skip_header` , the `numpy.genfromtext()` function supports 22 more
    operation parameters to fine-tune the array, such as defining missing and filling
    values. For more details, please refer to [http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.genfromtxt.html](http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.genfromtxt.html)
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`skip_header`之外，`numpy.genfromtext()`函数还支持 22 种以上的操作参数以微调数组，例如定义缺失值和填充值。 有关更多详细信息，请参阅[`docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.genfromtxt.html`](http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.genfromtxt.html)。
- en: 'Now the data is read in to the record array, you will find that the second
    field is more than four digits after the decimal points as we specified in exporting
    the CSV. The reason for this is because we use `f4` as its data type when read
    in. The empty digits will be filled by NumPy, but the valid four digits remain
    the same as in the file. You may also notice we lost the field name, so let''s
    specify it:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将数据读到记录数组中，您将发现第二个字段是小数点后四位数以上，这是我们在导出 CSV 时指定的。 这样做的原因是因为我们在读取时使用`f4`作为其数据类型。NumPy
    将填充空数字，但有效的四位数字与文件中的数字相同。 您可能还会注意到我们丢失了字段名，因此让我们指定它：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The last part of this exercise is to create a mask variable with values based
    on the `value` field larger than or equal to `0.75` . We append the new mask array
    to the `read_array` as a new column:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的最后一部分是创建一个基于`value`字段的值大于或等于`0.75`的掩码变量。 我们将新的掩码数组作为新列附加到`read_array`中：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`numpy.lib.recfunctions` can only be accessed when you import it directly,
    and the `append_field()` function is in the module. Appending a record array is
    as simple as appending a NumPy array: the first argument is the base array; the
    second argument is the new field name `mask` , and the data associated with it;
    and the last argument is the data type. Because a mask is a Boolean array, NumPy
    will apply the mask automatically to the record array, but we can still see a
    new field added to the `read_array` and the value of the mask reflects the value
    threshold (`>= 0.75` ) in the `value` field. This is just the beginning of showing
    you how to hook up NumPy array with your data file. Now it''s time to do some
    real analysis with your data!'
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当直接导入`numpy.lib.recfunctions`且模块中具有`append_field()`函数时，才能访问它。 追加一个记录数组就像追加一个
    NumPy 数组一样简单：第一个参数是基本数组；第二个参数是基本数组。 第二个参数是新字段名称`mask`以及与之关联的数据; 最后一个参数是数据类型。 由于掩码是布尔数组，因此
    NumPy 会自动将掩码应用于记录数组，但是我们仍然可以看到在`read_array`中添加了一个新字段，掩码的值反映了阈值（`>= 0.75`） `value`字段。
    这只是向您展示如何将 NumPy 数组与数据文件连接的开始。 现在是时候对您的数据进行一些真实的分析了！
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we covered the last important component of the ndarray object:
    strides. We saw a huge difference in memory layouts and also in performance when
    you use different ways to initialize your NumPy array. We also got to know the
    record array (structured array) and how to manipulate the date/time in NumPy.
    Most importantly, we saw how to read and write our data with NumPy.'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了`ndarray`对象的最后一个重要组成部分：步幅。 当您使用不同的方式初始化 NumPy 数组时，我们看到了内存布局和性能上的巨大差异。
    我们还了解了记录数组（结构化数组）以及如何在 NumPy 中操纵日期/时间。 最重要的是，我们看到了如何使用 NumPy 读写数据。
- en: NumPy is powerful not only because of its performance or ufuncs, but also because
    of how easy it can make your analysis. Use NumPy with your data as much as you
    can!
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 的强大功能不仅在于其性能或功能，还在于它使分析变得如此容易。 尽可能多地将 NumPy 与您的数据一起使用！
- en: Next, we will look at linear algebra and matrix computation using NumPy.
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将研究使用 NumPy 进行线性代数和矩阵计算。
