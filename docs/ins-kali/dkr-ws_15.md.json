["```\npackage docker.authz \nallow {\n\u00a0\u00a0\u00a0\u00a0input.Method = \"GET\"\n}\n```", "```\n    mkdir -p /etc/docker/policies\n    touch /etc/docker/policies/authz.rego\n    ls /etc/docker/policies\n    ```", "```\n    authz.rego\n    ```", "```\n    package docker.authz \n    allow {\n    \u00a0\u00a0\u00a0\u00a0input.Method = \"GET\"\n    }\n    ```", "```\n    cat > /etc/docker/policies/authz.rego << EOF\n    package docker.authz \n    allow {\n    \u00a0\u00a0\u00a0\u00a0input.Method = \"GET\"\n    }\n    EOF\n    cat /etc/docker/policies/authz.rego\n    ```", "```\n    docker plugin install --alias opa-docker-authz:readonly \\\n    openpolicyagent/opa-docker-authz-v2:0.5 \\\n    opa-args=\"-policy-file /opa/policies/authz.rego\"\n    ```", "```\n    docker plugin ls\n    ```", "```\n    {\n    \u00a0\u00a0\u00a0\u00a0\"authorization-plugins\": [\"opa-docker-authz:readonly\"]\n    }\n    ```", "```\n    sudo kill -HUP $(pidof dockerd)\n    ```", "```\n    docker ps\n    ```", "```\n    CONTAINER ID  IMAGE  COMMAND  CREATED  STATUS  PORTS  NAMES\n    ```", "```\n    docker run ubuntu\n    ```", "```\n    Error response from daemon: authorization denied by plugin \n    opa-docker-authz:readonly: request rejected by administrative policy.\n    See 'docker run \u2013-help'.\n    ```", "```\n    journalctl -u docker | grep plugin | grep \"OPA policy decision\"\n    ```", "```\n    cat > /etc/docker/daemon.json << EOF\n    {}\n    EOF\n    cat /etc/docker/daemon.json\n    sudo kill -HUP $(pidof dockerd)\n    ```", "```\n    docker plugin disable opa-docker-authz:readonly \n    docker plugin rm opa-docker-authz:readonly  \n    ```", "```\ndocker network create --driver my-new-network-technology mynet\n```", "```\n// Driver represent the interface a driver must fulfill.\ntype Driver interface {\n\u00a0\u00a0\u00a0\u00a0\u00a0GetCapabilities() (*CapabilitiesResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0CreateNetwork(*CreateNetworkRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0AllocateNetwork(*AllocateNetworkRequest)        (*AllocateNetworkResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0DeleteNetwork(*DeleteNetworkRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0FreeNetwork(*FreeNetworkRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0CreateEndpoint(*CreateEndpointRequest)        (*CreateEndpointResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0DeleteEndpoint(*DeleteEndpointRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0EndpointInfo(*InfoRequest) (*InfoResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0Join(*JoinRequest) (*JoinResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0Leave(*LeaveRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0DiscoverNew(*DiscoveryNotification) error\n\u00a0\u00a0\u00a0\u00a0\u00a0DiscoverDelete(*DiscoveryNotification) error\n\u00a0\u00a0\u00a0\u00a0\u00a0ProgramExternalConnectivity(*ProgramExternalConnectivityRequest)        error\n\u00a0\u00a0\u00a0\u00a0\u00a0RevokeExternalConnectivity(*RevokeExternalConnectivityRequest)        error\n}\n```", "```\n    docker swarm init\n    ```", "```\n    docker plugin install --grant-all-permissions \\\n    store/weaveworks/net-plugin:2.5.2\n    ```", "```\n    docker network create  \\\n    --driver=store/weaveworks/net-plugin:2.5.2  \\\n    weave-custom-net\n    ```", "```\n    docker service create --network=weave-custom-net \\\n    --replicas=3 \\\n    --name=workshop \\\n    -p 80:80 \\\n    onuryilmaz/hello-plain-text\n    ```", "```\n    FIRST_CONTAINER=$(docker ps --format \"{{.Names}}\" |grep \"workshop.1\")\n    echo $FIRST_CONTAINER\n    SECOND_CONTAINER=$(docker ps --format \"{{.Names}}\" |grep \"workshop.2\")\n    echo $SECOND_CONTAINER\n    THIRD_CONTAINER=$(docker ps --format \"{{.Names}}\" |grep \"workshop.3\")\n    echo $THIRD_CONTAINER\n    ```", "```\n    docker exec -it $FIRST_CONTAINER sh -c \"curl $SECOND_CONTAINER\" \n    ```", "```\n    docker exec -it $FIRST_CONTAINER sh -c \"curl $THIRD_CONTAINER\" \n    ```", "```\n    docker service rm workshop\n    docker network rm weave-custom-net\n    ```", "```\n// Driver represent the interface a driver must fulfill.\ntype Driver interface {\n\u00a0\u00a0\u00a0\u00a0\u00a0Create(*CreateRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0List() (*ListResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0Get(*GetRequest) (*GetResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0Remove(*RemoveRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0Path(*PathRequest) (*PathResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0Mount(*MountRequest) (*MountResponse, error)\n\u00a0\u00a0\u00a0\u00a0\u00a0Unmount(*UnmountRequest) error\n\u00a0\u00a0\u00a0\u00a0\u00a0Capabilities() *CapabilitiesResponse\n}\n```", "```\n    docker plugin install --grant-all-permissions vieux/sshfs\n    ```", "```\n    docker run -d -p 2222:22 \\\n    --name volume_provider \\\n    rastasheep/ubuntu-sshd:14.04\n    ```", "```\n    87eecaca6a1ea41e682e300d077548a4f902fdda21acc218a51253a883f725d\n    ```", "```\n    docker volume create -d vieux/sshfs \\\n    --name volume-over-ssh \\\n    -o sshcmd=root@localhost:/tmp \\\n    -o password=root \\\n    -o port=2222\n    ```", "```\n    volume-over-ssh\n    ```", "```\n    docker run --rm -v volume-over-ssh:/data busybox \\\n    sh -c \"touch /data/test.txt && echo 'Hello from Docker Workshop' >> /data/test.txt\"\n    ```", "```\n    docker run --rm -v volume-over-ssh:/data busybox \\\n    cat /data/test.txt\n    ```", "```\n    Hello from Docker Workshop\n    ```", "```\n    docker volume rm volume-over-ssh\n    ```"]