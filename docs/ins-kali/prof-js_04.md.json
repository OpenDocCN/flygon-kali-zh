["```js\n    mkdir smartHouse\n    cd smartHouse\n    npm init\n    ```", "```js\n    npm install -s express\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    ```", "```js\n    app.get('/', (req, res) => {\n    \u00a0\u00a0let info = {};\n    \u00a0\u00a0info.message = \"Welcome home! Our first endpoint.\";\n    \u00a0\u00a0res.json(info);\n    });\n    ```", "```js\n    // Start our application on port 3000\n    app.listen(3000, () => console.log('API running on port 3000'));\n    ```", "```js\n    npm start\n    ```", "```js\ncurl localhost:3000\n```", "```js\ncurl -s localhost:3000 | jq\n```", "```js\n    mkdir routes\n    ```", "```js\n    const express = require('express');\n    const router = express.Router();\n    router.get('/', function(req, res, next) {\n    \u00a0\u00a0let info = {};\n    \u00a0\u00a0info.message = \"Welcome home! Our first endpoint.\";\n    \u00a0\u00a0res.json(info);\n    });\n    // Export route so it is available to import\n    module.exports = router;\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    // Import path and file system libraries for importing our route files\n    const path = require('path');\n    const fs = require('fs');\n    // Import library for handling HTTP errors\n    const createError = require('http-errors');\n    ```", "```js\n    // Tell express to enable url encoding\n    app.use(express.urlencoded({extended: true}));\n    app.use(express.json());\n    ```", "```js\n    // Import our index route\n    let index = require('./routes/index');\n    // Tell Express to use our index module for root URL\n    app.use('/', index);\n    ```", "```js\n    // catch 404 and forward to error handler\n    app.use(function(req, res, next) {\n    \u00a0\u00a0res.status(404);\n    \u00a0\u00a0res.json(createError(404));\n    });\n    ```", "```js\n    // Start our application on port 3000\n    app.listen(3000, () => console.log('API running on port 3000'));\n    ```", "```js\napp.set('view engine', 'ejs');\n```", "```js\n<p><%= user.name %></p>\n```", "```js\nres.status(404);\nres.json(createError(401, 'Please login to view this page.'));\n```", "```js\nres.status(201); // Set 201 instead of 200 to indicate resource created\nres.json(messageObject); // An object containing your response\n```", "```js\n\"actions\": {\n\u00a0\u00a0\"fade\": {\n\u00a0\u00a0\u00a0\u00a0\"title\": \"Fade Light\",\n\u00a0\u00a0\u00a0\u00a0\"description\": \"Dim light brightness to a specified level\",\n\u00a0\u00a0\u00a0\u00a0\"input\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"object\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"level\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"integer\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"minimum\": 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"maximum\": 100\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"duration\": {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"integer\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"minimum\": 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"unit\": \"milliseconds\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\"links\": [{\"href\": \"/light/actions/fade\"}]\n\u00a0\u00a0}\n}\n```", "```js\ncurl -sd \"level=80&duration=500\" -X PUT localhost:3000/lightBulb/actions/fade\n```", "```js\n    mkdir routes/devices\n    ```", "```js\n    cp routes/index.js routes/devices/light.js\n    ```", "```js\n    info.message = \"Welcome home! Our first endpoint.\";\n    ```", "```js\n    \u00a0\u00a0let info =\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\"actions\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"fade\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"title\": \"Fade Light\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"description\": \"Dim light brightness to a specified level\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"input\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"object\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"properties\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"level\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\": \"integer\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"minimum\": 0,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"maximum\": 100\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    ```", "```js\n    let light = require('./routes/devices/light');\n    ```", "```js\n    app.use('/devices/light', light);\n    ```", "```js\n    npm start\n    ```", "```js\n    curl -s localhost:3000/devices/light | jq\n    ```", "```js\n// Light structure is imported at the top of the file\nconst lightStructure = require('./lightStructure.js');\n// Create four routes each displaying a different aspect of the JSON object\nrouter.get('/', function(req, res, next) {\n\u00a0\u00a0let info = lightStructure;\n\u00a0\u00a0res.json(info);\n});\nrouter.get('/properties', function(req, res, next) {\n\u00a0\u00a0let info = lightStructure.properties;\n\u00a0\u00a0res.json(info);\n});\nrouter.get('/model', function(req, res, next) {\n\u00a0\u00a0let info = lightStructure.model;\n\u00a0\u00a0res.json(info);\n});\nrouter.get('/actions', function(req, res, next) {\n\u00a0\u00a0let info = lightStructure.actions;\n\u00a0\u00a0res.json(info);\n});\n```", "```js\n\u00a0\u00a0check('level').isNumeric().isLength({ min: 0, max: 100 }),\n\u00a0\u00a0check('duration').isNumeric().isLength({ min: 0 })\n]\n```", "```js\n    npm install -s express-validator\n    ```", "```js\n    const { check, validationResult } = require('express-validator/check');\n    ```", "```js\n    // Function to run if the user sends a PUT request\n    router.put('/actions/fade', [\n    \u00a0\u00a0\u00a0\u00a0check('level').isNumeric().isLength({ min: 0, max: 100 }),\n    \u00a0\u00a0\u00a0\u00a0check('duration').isNumeric().isLength({ min: 0 })\n    \u00a0\u00a0],\n    \u00a0\u00a0(req, res) => {\n    \u00a0\u00a0\u00a0\u00a0const errors = validationResult(req);\n    \u00a0\u00a0\u00a0\u00a0if (!errors.isEmpty()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return res.status(422).json({ errors: errors.array() });\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0res.json({\"message\": \"success\"});\n    });\n    ```", "```js\n    npm start\n    ```", "```js\n    curl -sd \"level=na&duration=na\" -X PUT \\\n    http://localhost:3000/devices/light/actions/fade | jq\n    ```", "```js\n    curl -sd \"level=50&duration=60\" -X PUT \\\n    http://localhost:3000/devices/light/actions/fade | jq\n    ```", "```js\n    check('duration').isNumeric().optional().isLength({ min: 0 })\n    ```", "```js\n    let level = req.body.level;\n    let duration;\n    if(req.body.duration) {\n    \u00a0\u00a0duration = req.body.duration;\n    } else {\n    \u00a0\u00a0duration = 500;\n    }\n    ```", "```js\n    let message = `success: level to ${level} over ${duration} milliseconds`;\n    res.json({\"message\": message});\n    ```", "```js\n    // Function to run if user sends a PUT request\n    router.put(['/', '/actions/fade'], [\n    \u00a0\u00a0\u00a0\u00a0check('level').isNumeric().isLength({ min: 0, max: 100 }),\n    \u00a0\u00a0\u00a0\u00a0check('duration').isNumeric().optional().isLength({ min: 0 })\n    \u00a0\u00a0],\n    \u00a0\u00a0(req, res) => {\n    ```", "```js\n    npm start\n    ```", "```js\n    curl -sd \"level=50\" -X PUT http://localhost:3000/devices/light | jq\n    ```", "```js\n    curl -sd \"level=50&duration=250\" -X PUT http://localhost:3000/devices/light | jq\n    ```", "```js\nif(req.body.state) {\n\u00a0\u00a0state = req.body.state;\n} else {\n\u00a0\u00a0state = !state;\n}\n```", "```js\nvar logger = function (req, res, next) {\n\u00a0\u00a0// Request is logged\n\u00a0\u00a0console.log(req);\n\u00a0\u00a0// Call the special next function which passes the request to next function\n\u00a0\u00a0next();\n}\n```", "```js\napp.use(logger);\n```", "```js\napp.use('/devices/light', logger, light);\n```", "```js\n    let config = {};\n    config.secret = \"LfL0qpg91/ugndUKLWvS6ENutE5Q82ixpRe9MSkX58E=\";\n    module.exports = config;\n    ```", "```js\n    openssl rand -base64 32\n    ```", "```js\n    npm install -s jwt-simple\n    ```", "```js\n    const express = require('express');\n    const jwt = require('jwt-simple');\n    const { check, validationResult } = require('express-validator/check');\n    const router = express.Router();\n    // import our config file and get the secret value\n    const config = require('../config');\n    const secret = config.secret;\n    ```", "```js\n    router.post('/', [\n    \u00a0\u00a0\u00a0\u00a0check('name').isString()\n    \u00a0\u00a0],\n    \u00a0\u00a0(req, res) => {\n    \u00a0\u00a0\u00a0\u00a0// If errors return 422, client didn't provide required values\n    \u00a0\u00a0\u00a0\u00a0const errors = validationResult(req);\n    \u00a0\u00a0\u00a0\u00a0if (!errors.isEmpty()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return res.status(422).json({ errors: errors.array() });\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// Otherwise use the server secret to encode the user's request as a JWT\n    \u00a0\u00a0\u00a0\u00a0let info = {};\n    \u00a0\u00a0\u00a0\u00a0info.token = jwt.encode(req.body, secret);\n    \u00a0\u00a0\u00a0\u00a0res.json(info);\n    });\n    // Export route so it is available to import\n    module.exports = router;\n    ```", "```js\n    // Import library for working with JWT tokens\n    const jwt = require('jwt-simple');\n    // import our config file and get the secret value\n    const config = require('../config');\n    const secret = config.secret;\n    ```", "```js\n    // Check if the requesting client has checked in\n    function isCheckedIn(req, res, next) {\n    \u00a0\u00a0// Check that authorization header was sent\n    \u00a0\u00a0if (req.headers.authorization) {\n    \u00a0\u00a0\u00a0\u00a0// Get token from \"Bearer: Token\" string\n    \u00a0\u00a0\u00a0\u00a0let token = req.headers.authorization.split(\" \")[1];\n    \u00a0\u00a0\u00a0\u00a0// Try decoding the client's JWT using the server secret\n    \u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0req._guest = jwt.decode(token, secret);\n    \u00a0\u00a0\u00a0\u00a0} catch {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.status(403).json({ error: 'Token is not valid.' });\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// If the decoded object has a name protected route can be used\n    \u00a0\u00a0\u00a0\u00a0if (req._guest.name) return next();\n    \u00a0\u00a0}\n    \u00a0\u00a0// If no authorization header or guest has no name return a 403 error\n    \u00a0\u00a0res.status(403).json({ error: 'Please check-in to recieve a token.' });\n    }\n    ```", "```js\n    // Import our index route\n    let index = require('./routes/index');\n    let checkIn = require('./routes/check-in');\n    let light = require('./routes/devices/light');\n    // Tell Express to use our index module for root URL\n    app.use('/', index);\n    app.use('/check-in', checkIn);\n    app.use('/devices/light', light);\n    app.use('/devices/restricted-light', isCheckedIn, light);\n    ```", "```js\n    npm start\n    ```", "```js\n    TOKEN=$(curl -sd \"name=john\" -X POST http://localhost:3000/check-in \\\n    \u00a0\u00a0| jq -r \".token\")\n    ```", "```js\n    echo $TOKEN\n    ```", "```js\n    curl -sd \"level=50&duration=250\" -X PUT \\\n    \u00a0\u00a0-H \"Authorization: Bearer ${TOKEN}\" \\\n    \u00a0\u00a0http://localhost:3000/devices/restricted-light \\\n    \u00a0\u00a0| jq\n    ```", "```js\n    curl -sd \"level=50&duration=250\" -X PUT \\\n    \u00a0\u00a0http://localhost:3000/devices/restricted-light \\\n    \u00a0\u00a0| jq\n    ```", "```js\n{\n\u00a0\u00a0\"timestamp\": 1556116316288,\n\u00a0\u00a0\"body\" : { \"level\" : \"50\", \"duration\" : \"250\" }\n}\n```", "```js\n{\n\u00a0\u00a0\"timestamp\": 1556116712777,\n\u00a0\u00a0\"body\" : { \"level\" : \"20\", \"duration\" : \"500\" },\n\u00a0\u00a0\"path\" : \"/devices/light\",\n\u00a0\u00a0\"token\" : null\n}\n```"]