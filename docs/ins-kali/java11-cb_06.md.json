["```java\n CREATE USER cook SUPERUSER;\n CREATE DATABASE cookbook OWNER cook;\n```", "```java\nString URL = \"jdbc:postgresql://localhost/cookbook\";\nProperties prop = new Properties( );\n//prop.put( \"user\", \"cook\" );\n//prop.put( \"password\", \"secretPass123\" );\nConnection conn = DriverManager.getConnection(URL, prop);\n```", "```java\nConnection getDbConnection(){\n  String url = \"jdbc:postgresql://localhost/cookbook\";\n  try {\n    return DriverManager.getConnection(url);\n  }\n  catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\nConnection getDbConnection(){\n  PGSimpleDataSource source = new PGSimpleDataSource();\n  source.setServerName(\"localhost\");\n  source.setDatabaseName(\"cookbook\");\n  source.setLoginTimeout(10);\n  try {\n    return source.getConnection();\n  }\n  catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n\n```", "```java\nConnection getDbConnection(){\n  PGPoolingDataSource source = new PGPoolingDataSource();\n  source.setServerName(\"localhost\");\n  source.setDatabaseName(\"cookbook\");\n  source.setInitialConnections(3);\n  source.setMaxConnections(10);\n  source.setLoginTimeout(10);\n  try {\n    return source.getConnection();\n  }\n  catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  // code that uses the connection to access the DB\n} \ncatch(Exception ex) { \n  ex.printStackTrace();\n}\n```", "```java\nCREATE TABLE table_name (\n  column1_name data_type(size),\n  column2_name data_type(size),\n  column3_name data_type(size),\n  ....\n);\n```", "```java\nCREATE TABLE traffic_unit (\n  id SERIAL PRIMARY KEY,\n  vehicle_type VARCHAR NOT NULL,\n  horse_power integer NOT NULL,\n  weight_pounds integer NOT NULL,\n  payload_pounds integer NOT NULL,\n  passengers_count integer NOT NULL,\n  speed_limit_mph double precision NOT NULL,\n  traction double precision NOT NULL,\n  road_condition VARCHAR NOT NULL,\n  tire_condition VARCHAR NOT NULL,\n  temperature integer NOT NULL\n);\n```", "```java\nCREATE TABLE person (\n  name VARCHAR NOT NULL,\n  address VARCHAR NOT NULL,\n  dob date NOT NULL,\n  order integer DEFAULT 1 NOT NULL,\n  PRIMARY KEY (name,address,dob,order)\n);\n```", "```java\nCREATE SEQUENCE traffic_unit_id_seq \nSTART WITH 1000 INCREMENT BY 1 \nNO MINVALUE NO MAXVALUE CACHE 10; \nALTER TABLE ONLY traffic_unit ALTER COLUMN id SET DEFAULT nextval('traffic_unit_id_seq'::regclass);\n```", "```java\nCREATE TABLE enums (\n  id integer PRIMARY KEY,\n  type VARCHAR NOT NULL,\n  value VARCHAR NOT NULL\n);\n\ninsert into enums (id, type, value) values \n(1, 'vehicle', 'car'),\n(2, 'vehicle', 'truck'),\n(3, 'vehicle', 'crewcab'),\n(4, 'road_condition', 'dry'),\n(5, 'road_condition', 'wet'),\n(6, 'road_condition', 'snow'),\n(7, 'tire_condition', 'new'),\n(8, 'tire_condition', 'worn');\n```", "```java\ndrop table traffic_unit;\n```", "```java\nCREATE TABLE traffic_unit (\n  id SERIAL PRIMARY KEY,\n  vehicle_type integer REFERENCES enums (id),\n  horse_power integer NOT NULL,\n  weight_pounds integer NOT NULL,\n  payload_pounds integer NOT NULL,\n  passengers_count integer NOT NULL,\n  speed_limit_mph double precision NOT NULL,\n  traction double precision NOT NULL,\n  road_condition integer REFERENCES enums (id),\n  tire_condition integer REFERENCES enums (id),\n  temperature integer NOT NULL\n);\n```", "```java\nALTER TABLE enums ADD CONSTRAINT enums_unique_type_value \nUNIQUE (type, value);\n```", "```java\n Indexes: \"traffic_unit_pkey\" PRIMARY KEY, btree (id)\n```", "```java\nCREATE INDEX idx_traffic_unit_vehicle_type_passengers_count \nON traffic_unit USING btree (vehicle_type,passengers_count);\n```", "```java\ndrop index idx_traffic_unit_vehicle_type_passengers_count;\n```", "```java\nINSERT INTO table_name (column1,column2,column3,...)\nVALUES (value1,value2,value3,...);\n```", "```java\nINSERT INTO table_name (column1,column2,column3,...)\nVALUES (value1,value2,value3, ... ), \n       (value21,value22,value23, ...), \n       ( ...                       );\n```", "```java\nSELECT column_name,column_name\nFROM table_name WHERE some_column=some_value;\n```", "```java\nWHERE column_name operator value\nOperator:\n  = Equal\n  <> Not equal. In some versions of SQL, !=\n  > Greater than\n  < Less than\n  >= Greater than or equal\n  <= Less than or equal\n  BETWEEN Between an inclusive range\n  LIKE Search for a pattern\n  IN To specify multiple possible values for a column\n```", "```java\nSELECT * FROM table_name WHERE-clause by some_other_column; \n```", "```java\nSELECT * FROM table_name WHERE-clause by some_other_column desc; \n```", "```java\nUPDATE table_name SET column1=value1,column2=value2,... WHERE-clause;\n```", "```java\nDELETE FROM table_name WHERE-clause;\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  try (Statement st = conn.createStatement()) {\n    boolean res = st.execute(\"select id, type, value from enums\");\n    if (res) {\n      ResultSet rs = st.getResultSet();\n      while (rs.next()) {\n        int id = rs.getInt(1); \n        String type = rs.getString(2);\n        String value = rs.getString(3);\n        System.out.println(\"id = \" + id + \", type = \" \n                           + type + \", value = \" + value);\n      }\n    } else {\n      int count = st.getUpdateCount();\n      System.out.println(\"Update count = \" + count);\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\n\"select id, type, value from enums\"\n\"insert into enums (id, type, value)\" + \" values(1,'vehicle','car')\"\n\"select id, type, value from enums\"\n\"update enums set value = 'bus' where value = 'car'\"\n\"select id, type, value from enums\"\n\"delete from enums where value = 'bus'\"\n\"select id, type, value from enums\"\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  try (Statement st = conn.createStatement()) {\n    boolean res = st.execute(\"select id, type, value from enums\");\n    ResultSet rs = st.getResultSet();\n    while (rs.next()) {\n        int id = rs.getInt(1); \n        String type = rs.getString(2);\n        String value = rs.getString(3);\n        System.out.println(\"id = \" + id + \", type = \" \n                           + type + \", value = \" + value);\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\nvoid executeUpdate(String sql){\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      int count = st.executeUpdate(sql);\n      System.out.println(\"Update count = \" + count);\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```", "```java\nvoid traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      try(ResultSet rs = st.executeQuery(sql)){\n        int cCount = 0;\n        Map<Integer, String> cName = new HashMap<>();\n        while (rs.next()) {\n          if (cCount == 0) {\n            ResultSetMetaData rsmd = rs.getMetaData();\n            cCount = rsmd.getColumnCount();\n            for (int i = 1; i <= cCount; i++) {\n              cName.put(i, rsmd.getColumnLabel(i));\n            }\n          }\n          List<String> l = new ArrayList<>();\n          for (int i = 1; i <= cCount; i++) {\n            l.add(cName.get(i) + \" = \" + rs.getString(i));\n          }\n          System.out.println(l.stream()\n                              .collect(Collectors.joining(\", \")));\n        }\n      }\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```", "```java\n<dependency>\n    <groupId>com.zaxxer</groupId>\n    <artifactId>HikariCP</artifactId>\n    <version>3.2.0</version>\n </dependency>\n```", "```java\nHikariDataSource ds = new HikariDataSource();\nds.setPoolName(\"cookpool\");\nds.setDriverClassName(\"org.postgresql.Driver\");\nds.setJdbcUrl(\"jdbc:postgresql://localhost/cookbook\");\nds.setUsername( \"cook\");\n//ds.setPassword(\"123Secret\");\nds.setMaximumPoolSize(10);\nds.setMinimumIdle(2);\nds.addDataSourceProperty(\"cachePrepStmts\", Boolean.TRUE);\nds.addDataSourceProperty(\"prepStmtCacheSize\", 256);\nds.addDataSourceProperty(\"prepStmtCacheSqlLimit\", 2048);\nds.addDataSourceProperty(\"useServerPrepStmts\", Boolean.TRUE);\n\n```", "```java\nHikariConfig config = new HikariConfig();\nconfig.setPoolName(\"cookpool\");\nconfig.setDriverClassName(\"org.postgresql.Driver\");\nconfig.setJdbcUrl(\"jdbc:postgresql://localhost/cookbook\");\nconfig.setUsername(\"cook\");\n//conf.setPassword(\"123Secret\");\nconfig.setMaximumPoolSize(10);\nconfig.setMinimumIdle(2);\nconfig.addDataSourceProperty(\"cachePrepStmts\", true);\nconfig.addDataSourceProperty(\"prepStmtCacheSize\", 256);\nconfig.addDataSourceProperty(\"prepStmtCacheSqlLimit\", 2048);\nconfig.addDataSourceProperty(\"useServerPrepStmts\", true);\n\nHikariDataSource ds = new HikariDataSource(config);\n\n```", "```java\nProperties props = new Properties();\nprops.setProperty(\"poolName\", \"cookpool\");\nprops.setProperty(\"driverClassName\", \"org.postgresql.Driver\");\nprops.setProperty(\"jdbcUrl\", \"jdbc:postgresql://localhost/cookbook\");\nprops.setProperty(\"username\", \"cook\");\n//props.setProperty(\"password\", \"123Secret\");\nprops.setProperty(\"maximumPoolSize\", \"10\");\nprops.setProperty(\"minimumIdle\", \"2\");\nprops.setProperty(\"dataSource.cachePrepStmts\",\"true\");\nprops.setProperty(\"dataSource.prepStmtCacheSize\", \"256\");\nprops.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\nprops.setProperty(\"dataSource.useServerPrepStmts\",\"true\");\n\nHikariConfig config = new HikariConfig(props);\nHikariDataSource ds = new HikariDataSource(config);\n\n```", "```java\npoolName=cookpool\ndriverClassName=org.postgresql.Driver\njdbcUrl=jdbc:postgresql://localhost/cookbook\nusername=cook\npassword=\nmaximumPoolSize=10\nminimumIdle=2\ndataSource.cachePrepStmts=true\ndataSource.useServerPrepStmts=true\ndataSource.prepStmtCacheSize=256\ndataSource.prepStmtCacheSqlLimit=2048\n\n```", "```java\nClassLoader loader = getClass().getClassLoader();\nFile file = \n   new File(loader.getResource(\"database.properties\").getFile());\nHikariConfig config = new HikariConfig(file.getAbsolutePath());\nHikariDataSource ds = new HikariDataSource(config);\n```", "```java\npublic HikariConfig(String propertyFileName) {\n    this();\n    this.loadProperties(propertyFileName);\n}\n```", "```java\nString systemProp = \n       System.getProperty(\"hikaricp.configurationFile\");\nif (systemProp != null) {\n    this.loadProperties(systemProp);\n}\n```", "```java\n-Dhikaricp.configurationFile=src/main/resources/database.properties\n```", "```java\nHikariConfig config = new HikariConfig();\nHikariDataSource ds = new HikariDataSource(config);\n\n```", "```java\nvoid readData(DataSource ds) {\n   try(Connection conn = ds.getConnection();\n      PreparedStatement pst = \n        conn.prepareStatement(\"select id, type, value from enums\");\n      ResultSet rs = pst.executeQuery()){\n      while (rs.next()) {\n            int id = rs.getInt(1);\n            String type = rs.getString(2);\n            String value = rs.getString(3);\n            System.out.println(\"id = \" + id + \", type = \" + \n                                      type + \", value = \" + value);\n      }\n   } catch (SQLException ex){\n      ex.printStackTrace();\n   }\n}\n```", "```java\ntry (Statement st = conn.createStatement()) {\n  boolean res = st.execute(\"select * from enums\");\n\n```", "```java\ntry (PreparedStatement st = \n           conn.prepareStatement(\"select * from enums\")) {\n  boolean res = st.execute();\n\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String[][] values = {{\"1\", \"vehicle\", \"car\"},\n                       {\"2\", \"vehicle\", \"truck\"}};\n  String sql = \"insert into enums (id, type, value) values(?, ?, ?)\");\n  try (PreparedStatement st = conn.prepareStatement(sql) {\n    for(String[] v: values){\n      st.setInt(1, Integer.parseInt(v[0]));\n      st.setString(2, v[1]);\n      st.setString(3, v[2]);\n      int count = st.executeUpdate();\n      System.out.println(\"Update count = \" + count);\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n\n```", "```java\nvoid traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    ...\n  }\n}\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String sql = \"insert into enums (id, type, value) \"\n                       + \" values(1,'vehicle','car')\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    System.out.println(sql);\n    System.out.println(\"Update count = \" + st.executeUpdate());\n  }\n  //conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String sql = \"insert into enums (id, type, value) \"\n                       + \" values(1,'vehicle','car')\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    System.out.println(sql);\n    System.out.println(\"Update count = \" + st.executeUpdate());\n  }\n  conn.commit();\n  sql = \"inst into enums (id, type, value) \" \n                     + \" values(2,'vehicle','truck')\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    System.out.println(sql);\n    System.out.println(\"Update count = \" + st.executeUpdate());\n  }\n  conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); } //get exception here\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n```", "```java\norg.postgresql.util.PSQLException: ERROR: syntax error at or near \"inst\"\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String[][] values = { {\"1\", \"vehicle\", \"car\"},\n                        {\"b\", \"vehicle\", \"truck\"},\n                        {\"3\", \"vehicle\", \"crewcab\"} };\n  String sql = \"insert into enums (id, type, value) \" \n                            + \" values(?, ?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    for (String[] v: values){\n      try {\n        System.out.print(\"id=\" + v[0] + \": \");\n        st.setInt(1, Integer.parseInt(v[0]));\n        st.setString(2, v[1]);\n        st.setString(3, v[2]);\n        int count = st.executeUpdate();\n        conn.commit();\n        System.out.println(\"Update count = \"+count);\n      } catch(Exception ex){\n        //conn.rollback();\n        System.out.println(ex.getMessage());\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String[][] values = { {\"1\", \"vehicle\", \"car\"},\n                        {\"b\", \"vehicle\", \"truck\"},\n                        {\"3\", \"vehicle\", \"crewcab\"} };\n  String sql = \"insert into enums (id, type, value) \" +\n                                        \" values(?, ?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    for (String[] v: values){\n      try(Statement stm = conn.createStatement()) {\n        System.out.print(\"id=\" + v[0] + \": \");\n        stm.execute(\"insert into test values('\"+ v[2] + \"')\");\n        st.setInt(1, Integer.parseInt(v[0]));\n        st.setString(2, v[1]);\n        st.setString(3, v[2]);\n        int count = st.executeUpdate();\n        conn.commit();\n        System.out.println(\"Update count = \" + count);\n      } catch(Exception ex){\n         //conn.rollback();\n         System.out.println(ex.getMessage());\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntraverseRS(\"select * from test\");\n\n```", "```java\nvoid execute(String sql){\n  try (Connection conn = getDbConnection()) {\n    try (PreparedStatement st = conn.prepareStatement(sql)) {\n      st.execute();\n    }\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  }\n}\n```", "```java\nexecute(\"create table images (id integer, image bytea)\");\nexecute(\"create table lobs (id integer, lob oid)\");\nexecute(\"create table texts (id integer, text text)\");\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into images (id, image) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = \n       new File(\"src/main/java/com/packt/cookbook/ch06_db/image1.png\");\n    FileInputStream fis = new FileInputStream(file);\n    Blob blob = conn.createBlob();   \n    OutputStream out = blob.setBinaryStream(1);\n    int i = -1;\n    while ((i = fis.read()) != -1) {\n      out.write(i);\n    }\n    st.setBlob(2, blob);\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into texts (id, text) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/main/java/com/packt/cookbook/\" +\n                                    \"ch06_db/Chapter06Database.java\");\n    Reader reader = new FileReader(file);\n    st.setClob(2, reader);  \n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\nString sql = \"select image from images\";\ntry (PreparedStatement st = conn.prepareStatement(sql)) {\n  st.setInt(1, 100);\n  try(ResultSet rs = st.executeQuery()){\n    while (rs.next()){\n      Blob blob = rs.getBlob(1); \n      System.out.println(\"blob length = \" + blob.length());\n    }\n  }\n}\n```", "```java\ntraverseRS(\"select * from images\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into images (id, image) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = \n       new File(\"src/main/java/com/packt/cookbook/ch06_db/image1.png\");\n    FileInputStream fis = new FileInputStream(file);\n    st.setBinaryStream(2, fis);\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n  sql = \"select image from images where id = ?\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()){\n        try(InputStream is = rs.getBinaryStream(1)){\n          int i;\n          System.out.print(\"ints = \");\n          while ((i = is.read()) != -1) {\n            System.out.print(i);\n          }\n        }\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from images\");\n\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  String sql =  \"insert into images (id, image) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = \n       new File(\"src/main/java/com/packt/cookbook/ch06_db/image1.png\");\n    FileInputStream fis = new FileInputStream(file);\n    byte[] bytes = fis.readAllBytes();\n    st.setBytes(2, bytes);\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n  sql = \"select image from images where id = ?\";\n  System.out.println();\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()){\n        byte[] bytes = rs.getBytes(1);\n        System.out.println(\"bytes = \" + bytes);\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n\n```", "```java\ntraverseRS(\"select * from lobs\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  LargeObjectManager lobm = \n        conn.unwrap(org.postgresql.PGConnection.class)\n            .getLargeObjectAPI();\n  long lob = lobm.createLO(LargeObjectManager.READ \n                           | LargeObjectManager.WRITE);\n  LargeObject obj = lobm.open(lob, LargeObjectManager.WRITE);\n  File file = \n       new File(\"src/main/java/com/packt/cookbook/ch06_db/image1.png\");\n  try (FileInputStream fis = new FileInputStream(file)){\n    int size = 2048;\n    byte[] bytes = new byte[size];\n    int len = 0;\n    while ((len = fis.read(bytes, 0, size)) > 0) {\n      obj.write(bytes, 0, len);\n    }\n    obj.close();\n    String sql = \"insert into lobs (id, lob) values(?, ?)\";\n    try (PreparedStatement st = conn.prepareStatement(sql)) {\n      st.setInt(1, 100);\n      st.setLong(2, lob);\n      st.executeUpdate();\n    }\n  }\n    conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from lobs\");\n\n```", "```java\nexecute(\"delete from lobs where id = 100\"); \n\n```", "```java\nexecute(\"select lo_unlink((select lob from lobs \" + \" where id=100))\");\n\n```", "```java\nSELECT lo_unlink(pgl.oid) FROM pg_largeobject_metadata pgl\nWHERE (NOT EXISTS (SELECT 1 FROM lobs ls\" + \"WHERE ls.lob = pgl.oid));\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  LargeObjectManager lobm =      \n          conn.unwrap(org.postgresql.PGConnection.class)\n              .getLargeObjectAPI();\n  String sql = \"select lob from lobs where id = ?\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()){\n        long lob = rs.getLong(1);\n        LargeObject obj = lobm.open(lob, LargeObjectManager.READ);\n        byte[] bytes = new byte[obj.size()];\n        obj.read(bytes, 0, obj.size());\n        System.out.println(\"bytes = \" + bytes);\n        obj.close();\n      }\n    }\n  }\n  conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); }\n\n```", "```java\nwhile (rs.next()){\n  Blob blob = rs.getBlob(1);\n  byte[] bytes = blob.getBytes(1, (int)blob.length());\n  System.out.println(\"bytes = \" + bytes);\n}\n```", "```java\nString str = new String(bytes, Charset.forName(\"UTF-8\"));\nSystem.out.println(\"bytes = \" + str);\n\n```", "```java\ntraverseRS(\"select * from texts\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into texts (id, text) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/main/java/com/packt/cookbook/ch06_db/\"\n                                          + \"Chapter06Database.java\");\n    try (FileInputStream fis = new FileInputStream(file)) {\n      byte[] bytes = fis.readAllBytes();\n      st.setString(2, new String(bytes, Charset.forName(\"UTF-8\")));\n    }\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n  sql = \"select text from texts where id = ?\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()) {\n        String str = rs.getString(1);\n        System.out.println(str);\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\ntraverseRS(\"select * from texts\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into texts (id, text) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/main/java/com/packt/cookbook/ch06_db/\"\n                                          + \"Chapter06Database.java\");\n    //This is not implemented:\n    //st.setCharacterStream(2, reader, file.length()); \n    st.setCharacterStream(2, reader, (int)file.length());\n\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from texts\");\n```", "```java\nString sql = \"select text from texts where id = ?\";\ntry (PreparedStatement st = conn.prepareStatement(sql)) {\n  st.setInt(1, 100);\n  try(ResultSet rs = st.executeQuery()){\n    while (rs.next()) {\n      try(Reader reader = rs.getCharacterStream(1)) {\n        char[] chars = new char[160];\n        reader.read(chars);\n        System.out.println(chars);\n      }\n    }\n  }\n}\n```", "```java\nString sql = \"{ ? = call replace(?, ?, ? ) }\";\ntry (CallableStatement st = conn.prepareCall(sql)) {\n  st.registerOutParameter(1, Types.VARCHAR);\n  st.setString(2, \"Hello, World! Hello!\");\n  st.setString(3, \"llo\");\n  st.setString(4, \"y\");\n  st.execute();\n  String res = st.getString(1);\n  System.out.println(res);\n}\n```", "```java\nexecute(\"create or replace function createTableTexts() \" \n        + \" returns void as \" \n        + \"$$ drop table if exists texts; \"\n        + \"  create table texts (id integer, text text); \"\n        + \"$$ language sql\");\n\n```", "```java\nvoid execute(String sql){\n  try (Connection conn = getDbConnection()) {\n    try (PreparedStatement st = conn.prepareStatement(sql)) {\n      st.execute();\n    }\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  }\n}\n```", "```java\nString sql = \"{ call createTableTexts() }\";\ntry (CallableStatement st = conn.prepareCall(sql)) {\n  st.execute();\n}\n```", "```java\nvoid traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      try(ResultSet rs = st.executeQuery(sql)){\n        int cCount = 0;\n        Map<Integer, String> cName = new HashMap<>();\n        while (rs.next()) {\n          if (cCount == 0) {\n            ResultSetMetaData rsmd = rs.getMetaData();\n            cCount = rsmd.getColumnCount();\n            for (int i = 1; i <= cCount; i++) {\n              cName.put(i, rsmd.getColumnLabel(i));\n            }\n          }\n          List<String> l = new ArrayList<>();\n          for (int i = 1; i <= cCount; i++) {\n            l.add(cName.get(i) + \" = \" + rs.getString(i));\n          }\n          System.out.println(l.stream()\n                      .collect(Collectors.joining(\", \")));\n        }\n      }\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```", "```java\ndrop function if exists createTableTexts(); \n```", "```java\nexecute(\"create or replace function createTableTexts() \" \n        + \"returns void as \"\n        + \"$$ drop table if exists texts; \"\n        + \"  create table texts (id integer, text text); \"\n        + \"$$ language sql\");\nString sql = \"{ call createTableTexts() }\";\ntry (Connection conn = getDbConnection()) {\n  try (CallableStatement st = conn.prepareCall(sql)) {\n    st.execute();\n  }\n}\ntraverseRS(\"select createTableTexts()\");\ntraverseRS(\"select * from createTableTexts()\");\nexecute(\"drop function if exists createTableTexts()\");\n\n```", "```java\nexecute(\"create or replace function insertText(int,varchar)\" \n        + \" returns void \"\n        + \" as $$ insert into texts (id, text) \"\n        + \"   values($1, replace($2,'XX','ext'));\" \n        + \" $$ language sql\");\nString sql = \"{ call insertText(?, ?) }\";\ntry (Connection conn = getDbConnection()) {\n  try (CallableStatement st = conn.prepareCall(sql)) {\n    st.setInt(1, 1);\n    st.setString(2, \"TXX 1\");\n    st.execute();\n  }\n}\nexecute(\"select insertText(2, 'TXX 2')\");\ntraverseRS(\"select * from texts\");\nexecute(\"drop function if exists insertText()\");\n\n```", "```java\nexecute(\"insert into texts (id, text) \" \n         + \"values(3,'Text 3'),(4,'Text 4')\");\ntraverseRS(\"select * from texts\");\nexecute(\"create or replace function countTexts() \" \n        + \"returns bigint as \" \n        + \"$$ select count(*) from texts; \" \n        + \"$$ language sql\");\nString sql = \"{ ? = call countTexts() }\";\ntry (Connection conn = getDbConnection()) {\n  try (CallableStatement st = conn.prepareCall(sql)) {\n    st.registerOutParameter(1, Types.BIGINT);\n    st.execute();\n    System.out.println(\"Result of countTexts() = \" + st.getLong(1));\n  }\n}\ntraverseRS(\"select countTexts()\");\ntraverseRS(\"select * from countTexts()\");\nexecute(\"drop function if exists countTexts()\");\n\n```", "```java\nexecute(\"create or replace function selectText(int) \" \n        + \"returns setof texts as \n        + \"$$ select * from texts where id=$1; \" \n        + \"$$ language sql\");\ntraverseRS(\"select selectText(1)\");\ntraverseRS(\"select * from selectText(1)\");\nexecute(\"drop function if exists selectText(int)\");\n```", "```java\nString sql = \"{ ? = call selectText(?) }\";\ntry (CallableStatement st = conn.prepareCall(sql)) {\n  st.registerOutParameter(1, Types.OTHER);\n  st.setInt(2, 1);\n  st.execute();\n  traverseRS((ResultSet)st.getObject(1));\n}\n\n```", "```java\nexecute(\"create or replace function selectText(int) \" \n        + \"returns refcursor \" +\n        + \"as $$ declare curs refcursor; \" \n        + \" begin \" \n        + \"   open curs for select * from texts where id=$1;\" \n        + \"     return curs; \" \n        + \" end; \" \n        + \"$$ language plpgsql\");\nString sql = \"{ ? = call selectText(?) }\";\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  try(CallableStatement st = conn.prepareCall(sql)){\n    st.registerOutParameter(1, Types.OTHER);\n    st.setInt(2, 2);\n    st.execute();\n    try(ResultSet rs = (ResultSet) st.getObject(1)){\n      System.out.println(\"traverseRS(refcursor()=>rs):\");\n      traverseRS(rs);\n    }\n  }\n}\ntraverseRS(\"select selectText(2)\");\ntraverseRS(\"select * from selectText(2)\");\nexecute(\"drop function if exists selectText(int)\");\n\n```", "```java\n        void traverseRS(ResultSet rs) throws Exception {\n          int cCount = 0;\n          Map<Integer, String> cName = new HashMap<>();\n          while (rs.next()) {\n            if (cCount == 0) {\n              ResultSetMetaData rsmd = rs.getMetaData();\n              cCount = rsmd.getColumnCount();\n              for (int i = 1; i <= cCount; i++) {\n                cName.put(i, rsmd.getColumnLabel(i));\n              }\n            }\n            List<String> l = new ArrayList<>();\n            for (int i = 1; i <= cCount; i++) {\n              l.add(cName.get(i) + \" = \" + rs.getString(i));\n            }\n            System.out.println(l.stream()\n                      .collect(Collectors.joining(\", \")));\n          }\n        }\n```", "```java\nvoid traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      try(ResultSet rs = st.executeQuery(sql)){\n        traverseRS(rs);\n      }\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```", "```java\ncreate table person (\n   name VARCHAR NOT NULL,\n   age INTEGER NOT NULL\n)\n```", "```java\nINSERT into <table_name> (column1, column2, ...) VALUES \n                         ( value1,  value2, ...),\n                         ( value1,  value2, ...),\n                          ...\n                         ( value1,  value2, ...)\n```", "```java\nint n = 100000;  //number of records to insert\nStringBuilder sb = \n new StringBuilder(\"insert into person (name,age) values \");\nfor(int i = 0; i < n; i++){\n   sb.append(\"(\")\n     .append(\"'Name\").append(String.valueOf(i)).append(\"',\")\n     .append(String.valueOf((int)(Math.random() * 100)))\n     .append(\")\");\n   if(i < n - 1) {\n        sb.append(\",\");\n   }\n}\ntry(Connection conn = getConnection();\n    Statement st = conn.createStatement()){\n    st.execute(sb.toString());\n} catch (SQLException ex){\n    ex.printStackTrace();\n}\n```", "```java\nint n = 100000, limit = 32766, l = 0;\nList<String> queries = new ArrayList<>();\nList<Integer> bindVariablesCount = new ArrayList<>();\nString insert = \"insert into person (name, age) values \";\nStringBuilder sb = new StringBuilder(insert);\nfor(int i = 0; i < n; i++){\n    sb.append(\"(?, ?)\");\n    l = l + 2;\n    if(i == n - 1) {\n        queries.add(sb.toString());\n        bindVariablesCount.add(l % limit);\n    }\n    if(l % limit == 0) {\n        queries.add(sb.toString());\n        bindVariablesCount.add(limit);\n        sb = new StringBuilder(insert);\n    } else {\n        sb.append(\",\");\n    }\n}\ntry(Connection conn = getConnection()) {\n    int i = 0, q = 0;\n    for(String query: queries){\n        try(PreparedStatement pst = conn.prepareStatement(query)) {\n            int j = 0;\n            while (j < bindVariablesCount.get(q)) {\n                pst.setString(++j, \"Name\" + String.valueOf(i++));\n                pst.setInt(++j, (int)(Math.random() * 100));\n            }\n            pst.executeUpdate();\n            q++;\n        }\n    }\n} catch (SQLException ex){\n    ex.printStackTrace();\n}\n```", "```java\nint n = 100000;\nString insert = \n           \"insert into person (name, age) values (?, ?)\";\ntry (Connection conn = getConnection();\n    PreparedStatement pst = conn.prepareStatement(insert)) {\n    for (int i = 0; i < n; i++) {\n        pst.setString(1, \"Name\" + String.valueOf(i));\n        pst.setInt(2, (int)(Math.random() * 100));\n        pst.addBatch();\n    }\n    pst.executeBatch();\n} catch (SQLException ex) {\n    ex.printStackTrace();\n}\n```", "```java\nDataSource createDataSource() {\n    HikariDataSource ds = new HikariDataSource();\n    ds.setPoolName(\"cookpool\");\n    ds.setDriverClassName(\"org.postgresql.Driver\");\n    ds.setJdbcUrl(\"jdbc:postgresql://localhost/cookbook\");\n    ds.setUsername( \"cook\");\n    //ds.setPassword(\"123Secret\");\n    ds.setMaximumPoolSize(2);\n    ds.setMinimumIdle(2);\n    ds.addDataSourceProperty(\"reWriteBatchedInserts\", \n                                            Boolean.TRUE);\n    return ds;\n}\n```", "```java\nint n = 100000;\nint batchSize = 30000;\nboolean execute = false;\nString insert = \n          \"insert into person (name, age) values (?, ?)\";\ntry (Connection conn = getConnection();\n    PreparedStatement pst = conn.prepareStatement(insert)) {\n    for (int i = 0; i < n; i++) {\n        pst.setString(1, \"Name\" + String.valueOf(i));\n        pst.setInt(2, (int)(Math.random() * 100));\n        pst.addBatch();\n        if((i > 0 && i % batchSize == 0) || \n                                 (i == n - 1 && execute)) {\n             pst.executeBatch();\n             System.out.print(\" \" + i); \n                        //prints: 30000 60000 90000 99999\n             if(n - 1 - i < batchSize && !execute){\n                  execute = true;\n             }\n        }\n    }\n    pst.executeBatch();\n} catch (SQLException ex) {\n    ex.printStackTrace();\n}\n```", "```java\nint minAge = 0, maxAge = 0, minCount = n, maxCount = 0;\nStringBuilder sb = new StringBuilder();\nfor (int i = 0; i < 100; i++) {\n    sb.append(\"select count(*) from person where age = \")\n                                          .append(i).append(\";\");\n}\ntry (Connection conn = getConnection();\n     PreparedStatement pst = conn.prepareStatement(sb.toString())) {\n    boolean hasResult = pst.execute();\n    int i = 0;\n    while (hasResult){\n        try (ResultSet rs = pst.getResultSet()) {\n            rs.next();\n            int c = rs.getInt(1);\n            if(c < minCount) {\n                minAge = i;\n                minCount = c;\n            }\n            if(c > maxCount) {\n                maxAge = i;\n                maxCount = c;\n            }\n            i++;\n            hasResult = pst.getMoreResults();\n        }\n    }\n} catch (SQLException ex) {\n    ex.printStackTrace();\n}\nSystem.out.println(\"least popular age=\" + minAge + \"(\" + minCount + \n             \"), most popular age=\" + maxAge + \"(\" + maxCount + \")\");\n\n```", "```java\nleast popular age=14(929), most popular age=10(1080)\n```", "```java\nInputStream inputStream = Resources.getResourceAsStream(configuration);\nSqlSessionFactory sqlSessionFactory = \n                     new SqlSessionFactoryBuilder().build(inputStream);\nSqlSession session = sqlSessionFactory.openSession();\n```", "```java\n<dependency>\n   <groupId>org.mybatis</groupId>\n   <artifactId>mybatis</artifactId>\n   <version>3.4.6</version>\n</dependency>\n```", "```java\npublic class Person1 {\n    private int id;\n    private int age;\n    private String name;\n    public Person1(){}  //Must be present, used by the framework\n    public Person1(int age, String name){\n        this.age = age;\n        this.name = name;\n    }\n    public int getId() { return id; }\n    public void setName(String name) { this.name = name; }\n    @Override\n    public String toString() {\n        return \"Person1{id=\" + id + \", age=\" + age +\n                                  \", name='\" + name + \"'}\";\n    }\n}\n```", "```java\ncreate table person1 (\n   id SERIAL PRIMARY KEY,\n   age INTEGER NOT NULL,\n   name VARCHAR NOT NULL\n);\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n  <settings>\n    <setting name=\"useGeneratedKeys\" value=\"true\"/>\n  </settings>\n  <typeAliases>\n     <typeAlias type=\"com.packt.cookbook.ch06_db.mybatis.Person1\" \n                                                 alias=\"Person\"/>\n  </typeAliases>\n  <environments default=\"development\">\n     <environment id=\"development\">\n       <transactionManager type=\"JDBC\"/>\n       <dataSource type=\"POOLED\">\n          <property name=\"driver\" value=\"org.postgresql.Driver\"/>\n          <property name=\"url\" \n                   value=\"jdbc:postgresql://localhost/cookbook\"/>\n          <property name=\"username\" value=\"cook\"/>\n          <property name=\"password\" value=\"\"/>\n        </dataSource>\n     </environment>\n  </environments>\n  <mappers>\n      <mapper resource=\"mybatis/Person1Mapper.xml\"/>\n  </mappers>\n</configuration>\n```", "```java\n\n<transactionManager type=\"MANAGED\">\n    <property name=\"closeConnection\" value=\"false\"/>\n</transactionManager>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"mybatis.Person1Mapper\">\n   <insert id=\"insertPerson\" keyProperty=\"id\" keyColumn=\"id\" \n                                         parameterType=\"Person\">\n      insert into Person1 (age, name) values(#{age}, #{name})\n   </insert>\n   <select id=\"selectPersonById\" parameterType=\"int\" \n                                            resultType=\"Person\">\n      select * from Person1 where id = #{id}\n   </select>\n   <select id=\"selectPersonsByName\" parameterType=\"string\" \n                                           resultType=\"Person\">\n      select * from Person1 where name = #{name}\n   </select>\n   <select id=\"selectPersons\" resultType=\"Person\">\n      select * from Person1\n   </select>\n   <update id=\"updatePersonById\" parameterType=\"Person\">\n      update Person1 set age = #{age}, name = #{name} \n                                              where id = #{id}\n   </update>\n   <delete id=\"deletePersons\"> \n      delete from Person1\n   </delete>\n</mapper>\n```", "```java\n<resultMap id=\"personResultMap\" type=\"Person\">\n    <id property=\"id\" column=\"person_id\" />\n    <result property=\"name\" column=\"person_name\"/>\n</resultMap>\n```", "```java\n<select id=\"selectPersonById\" parameterType=\"int\" \n                                  resultMap=\"personResultMap\">\n   select person_id, person_name from Person where id = #{id}\n</select>\n```", "```java\n<select id=\"selectPersonById\" parameterType=\"int\" \n                                          resultType=\"Person\">\n   select person_id as \"id\", person_name as \"name\" from Person \n                                              where id = #{id}\n</select>\n```", "```java\nString resource = \"mybatis/mb-config1.xml\";\nString mapperNamespace = \"mybatis.Person1Mapper\";\ntry {\n   InputStream inputStream = \n                    Resources.getResourceAsStream(resource);\n   SqlSessionFactory sqlSessionFactory = \n          new SqlSessionFactoryBuilder().build(inputStream);\n   try(SqlSession session = sqlSessionFactory.openSession()){\n       Person1 p = new Person1(10, \"John\");\n       session.insert(mapperNamespace + \".insertPerson\", p);\n       session.commit();\n       p = session.selectOne(mapperNamespace + \n                            \".selectPersonById\", p.getId());\n        System.out.println(\"By id \" + p.getId() + \": \" + p);\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n} catch (Exception ex){\n    ex.printStackTrace();\n}\n```", "```java\nBy id 1: Person1{id=1, age=10, name='John'}\n```", "```java\nList<Person1> list = session.selectList(mapperNamespace \n                                    + \".selectPersons\");\nfor(Person1 p1: list) {\n    System.out.println(\"All: \" + p1);\n}\n```", "```java\nAll: Person1{id=1, age=10, name='John'}\n```", "```java\nList<Person1> list = session.selectList(mapperNamespace \n                      + \".selectPersonsByName\", \"John\");\nfor(Person1 p1: list) {\n    p1.setName(\"Bill\");\n    int c = session.update(mapperNamespace + \n                               \".updatePersonById\", p1);\n    System.out.println(\"Updated \" + c + \" records\");\n}\nsession.commit();\nlist = \n session.selectList(mapperNamespace + \".selectPersons\");\nfor(Person1 p1: list) {\n    System.out.println(\"All: \" + p1);\n}\n```", "```java\nUpdated 1 records\nAll: Person1{id=1, age=10, name='Bill'}\n```", "```java\n      SqlSession session = sqlSessionFactory.openSession(true);\n```", "```java\nint c = session.delete(mapperNamespace + \".deletePersons\");\nSystem.out.println(\"Deleted \" + c + \" persons\");\nsession.commit();\n\nList<Person1> list = session.selectList(mapperNamespace + \n                                         \".selectPersons\");\nSystem.out.println(\"Total records: \" + list.size());\n\n```", "```java\nDeleted 0 persons\nTotal records: 0\n```", "```java\ncreate table family (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR NOT NULL\n);\ncreate table person2 (\n    id SERIAL PRIMARY KEY,\n    age INTEGER NOT NULL,\n    name VARCHAR NOT NULL,\n    family_id INTEGER references family(id) \n                             ON DELETE CASCADE\n);\n```", "```java\nclass Family {\n    private int id;\n    private String name;\n    private final List<Person2> members = new ArrayList<>();\n    public Family(){}  //Used by the framework\n    public Family(String name){ this.name = name; }\n    public int getId() { return id; }\n    public String getName() { return name; }\n    public List<Person2> getMembers(){ return this.members; }\n}\n```", "```java\nclass Person2 {\n    private int id;\n    private int age;\n    private String name;\n    private Family family;\n    public Person2(){}  //Used by the framework\n    public Person2(int age, String name, Family family){\n        this.age = age;\n        this.name = name;\n        this.family = family;\n    }\n    @Override\n    public String toString() {\n        return \"Person2{id=\" + id + \", age=\" + age +\n                 \", name='\" + name + \"', family='\" +\n         (family == null ? \"\" : family.getName())+ \"'}\";\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"useGeneratedKeys\" value=\"true\"/>\n    </settings>\n    <typeAliases>\n       <typeAlias type=\"com.packt.cookbook.ch06_db.mybatis.Family\" \n                                                    alias=\"Family\"/>\n       <typeAlias type=\"com.packt.cookbook.ch06_db.mybatis.Person2\" \n                                                    alias=\"Person\"/>\n    </typeAliases>\n    <environments default=\"development\">\n       <environment id=\"development\">\n          <transactionManager type=\"JDBC\"/>\n          <dataSource type=\"POOLED\">\n             <property name=\"driver\" value=\"org.postgresql.Driver\"/>\n             <property name=\"url\" \n                      value=\"jdbc:postgresql://localhost/cookbook\"/>\n             <property name=\"username\" value=\"cook\"/>\n             <property name=\"password\" value=\"\"/>\n          </dataSource>\n       </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"mybatis/FamilyMapper.xml\"/>\n        <mapper resource=\"mybatis/Person2Mapper.xml\"/>\n    </mappers>\n</configuration>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"mybatis.Person2Mapper\">\n    <insert id=\"insertPerson\" keyProperty=\"id\" keyColumn=\"id\"\n                                          parameterType=\"Person\">\n        insert into Person2 (age, name, family_id) \n                    values(#{age}, #{name}, #{family.id})\n    </insert>\n    <select id=\"selectPersonsCount\" resultType=\"int\">\n        select count(*) from Person2\n    </select>\n</mapper>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"mybatis.FamilyMapper\">\n <insert id=\"insertFamily\" keyProperty=\"id\" keyColumn=\"id\" \n parameterType=\"Family\">\n insert into Family (name) values(#{name})\n </insert>\n <select id=\"selectMembersOfFamily\" parameterType=\"int\" \n resultMap=\"personMap\">\n select * from Person2 where family_id = #{id}\n </select>\n <resultMap id=\"personMap\" type=\"Person\">\n <association property=\"family\" column=\"family_id\" \n select=\"selectFamilyById\"/>\n </resultMap>\n <select id=\"selectFamilyById\" parameterType=\"int\"\n resultType=\"Family\">\n select * from Family where id = #{id}\n </select>\n <select id=\"selectFamilies\" resultMap=\"familyMap\">\n select * from Family\n </select>\n <resultMap id=\"familyMap\" type=\"Family\">\n <collection property=\"members\" column=\"id\" ofType=\"Person\" \n select=\"selectMembersOfFamily\"/>\n </resultMap>\n <select id=\"selectFamiliesCount\" resultType=\"int\">\n select count(*) from Family\n </select>\n <delete id=\"deleteFamilies\">\n delete from Family\n </delete>\n\n```", "```java\n    <select id=\"selectMembersOfFamily\" parameterType=\"int\" \n resultType=\"Person\">\n        select * from Person2 where family_id = #{id}\n    </select>\n\n```", "```java\nString resource = \"mybatis/mb-config2.xml\";\nString familyMapperNamespace = \"mybatis.FamilyMapper\";\nString personMapperNamespace = \"mybatis.Person2Mapper\";\ntry {\n    InputStream inputStream = Resources.getResourceAsStream(resource);\n    SqlSessionFactory sqlSessionFactory =\n            new SqlSessionFactoryBuilder().build(inputStream);\n    try(SqlSession session = sqlSessionFactory.openSession()){\n        Family f = new Family(\"The Jones\");\n        session.insert(familyMapperNamespace + \".insertFamily\", f);\n        System.out.println(\"Family id=\" + f.getId()); //Family id=1\n\n        Person2 p = new Person2(25, \"Jill\", f);\n        session.insert(personMapperNamespace + \".insertPerson\", p);\n        System.out.println(p); \n          //Person2{id=1, age=25, name='Jill', family='The Jones'}\n\n        p = new Person2(30, \"John\", f);\n        session.insert(personMapperNamespace + \".insertPerson\", p);\n        System.out.println(p);\n          //Person2{id=2, age=30, name='John', family='The Jones'}\n\n        session.commit();\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n} catch (Exception ex){\n    ex.printStackTrace();\n}\n```", "```java\nList<Family> fList = \n       session.selectList(familyMapperNamespace + \".selectFamilies\");\nfor (Family f1: fList) {\n    System.out.println(\"Family \" + f1.getName() + \" has \" + \n                               f1.getMembers().size() + \" members:\");\n    for(Person2 p1: f1.getMembers()){\n        System.out.println(\"   \" + p1);\n    }\n}\n```", "```java\nFamily The Jones has 2 members:\n Person2{id=1, age=25, name='Jill', family='The Jones'}\n Person2{id=2, age=30, name='John', family='The Jones'}\n\n```", "```java\nint c = session.delete(familyMapperNamespace + \".deleteFamilies\");\nSystem.out.println(\"Deleted \" + c + \" families\");\nsession.commit();\n\nc = session.selectOne(familyMapperNamespace + \".selectFamiliesCount\");\nSystem.out.println(\"Total family records: \" + c);\n\nc = session.selectOne(personMapperNamespace + \".selectPersonsCount\");\nSystem.out.println(\"Total person records: \" + c);\n\n```", "```java\nDeleted 1 families\nTotal family records: 0\nTotal person records: 0\n```", "```java\nhttp://download.oracle.com/otn-pub/jcp/persistence-2_2-mrel-spec/JavaPersistence.pdf\n```", "```java\n<dependency>\n    <groupId>javax.persistence</groupId>\n    <artifactId>javax.persistence-api</artifactId>\n    <version>2.2</version>\n</dependency>\n```", "```java\npublic class Person1 {\n    private int age;\n    private String name;\n    public Person1(int age, String name){\n        this.age = age;\n        this.name = name;\n    }\n    @Override\n    public String toString() {\n        return \"Person1{id=\" + id + \", age=\" + age +\n                          \", name='\" + name + \"'}\";\n    }\n}\n```", "```java\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Person1 {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n    public int age;\n    private String name;\n    public Person1(){}\n    public Person1(int age, String name){\n        this.age = age;\n        this.name = name;\n    }\n}\n```", "```java\ncreate table person1 (\n   id SERIAL PRIMARY KEY,\n   age INTEGER NOT NULL,\n   name VARCHAR NOT NULL\n);\n```", "```java\nEntityManagerFactory emf = \n      Persistence.createEntityManagerFactory(\"jpa-demo\");\nEntityManager em = emf.createEntityManager();\ntry {\n    em.getTransaction().begin();\n    Person1 p = new Person1(10, \"Name10\");\n    em.persist(p);\n    em.getTransaction().commit();\n\n    Query q = em.createQuery(\"select p from Person1 p\");\n    List<Person1> pList = q.getResultList();\n    for (Person1 p : pList) {\n        System.out.println(p);\n    }\n    System.out.println(\"Size: \" + pList.size());\n} catch (Exception ex){\n    em.getTransaction().rollback();\n} finally {\n    em.close();\n    emf.close();\n} \n```", "```java\nCriteriaQuery<Person1> cq = \n       em.getCriteriaBuilder().createQuery(Person1.class);\ncq.select(cq.from(Person1.class));\nList<Person1> pList = em.createQuery(cq).getResultList();\nSystem.out.println(\"Size: \" + pList.size());\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence\n    http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\n                                                   version=\"2.1\">\n   <persistence-unit name=\"jpa-demo\" \n                               transaction-type=\"RESOURCE_LOCAL\">\n     <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n     <properties>\n       <property name=\"javax.persistence.jdbc.url\" \n                   value=\"jdbc:postgresql://localhost/cookbook\"/>\n       <property name=\"javax.persistence.jdbc.driver\" \n                                  value=\"org.postgresql.Driver\"/>\n       <property name=\"javax.persistence.jdbc.user\" value=\"cook\"/>\n       <property name=\"javax.persistence.jdbc.password\" value=\"\"/>\n     </properties>\n   </persistence-unit>\n</persistence>\n```", "```java\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-core</artifactId>\n    <version>5.3.1.Final</version>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>javax.xml.bind</groupId>\n    <artifactId>jaxb-api</artifactId>\n    <version>2.3.0</version>\n</dependency>\n\n```", "```java\n@Override\npublic String toString() {\n    return \"Person1{id=\" + id + \", age=\" + age +\n                             \", name='\" + name + \"'}\";\n}\n```", "```java\nPerson1{id=1, age=10, name='Name10'}\nSize: 1\nSize: 1\n```", "```java\n@Entity\npublic class Family {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n    private String name;\n    public Family(){}\n    public Family(String name){ this.name = name;}\n\n    @OneToMany(mappedBy = \"family\")\n    private final List<Person2> members = new ArrayList<>();\n\n    public List<Person2> getMembers(){ return this.members; }\n    public String getName() { return name; }\n}\n```", "```java\ncreate table family (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR NOT NULL\n);\n```", "```java\n@Entity\npublic class Person2 {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n    private int age;\n    private String name;\n\n    @ManyToOne\n    private Family family;\n\n    public Person2(){}\n    public Person2(int age, String name, Family family){\n        this.age = age;\n        this.name = name;\n        this.family = family;\n    }\n    @Override\n    public String toString() {\n      return \"Person2{id=\" + id + \", age=\" + age +\n               \", name='\" + name + \"', family='\" +\n         (family == null ? \"\" : family.getName())+ \"'}\";\n    }\n}\n```", "```java\ncreate table person2 (\n    id SERIAL PRIMARY KEY,\n    age INTEGER NOT NULL,\n    name VARCHAR NOT NULL,\n    family_id INTEGER references family(id) \n                             ON DELETE CASCADE\n);\n```", "```java\nEntityManagerFactory emf = \n         Persistence.createEntityManagerFactory(\"jpa-demo\");\n    EntityManager em = emf.createEntityManager();\n    try {\n        em.getTransaction().begin();\n        Family f = new Family(\"The Jones\");\n        em.persist(f);\n\n        Person2 p = new Person2(10, \"Name10\", f);  \n        em.persist(p);                      \n\n        f.getMembers().add(p);\n        em.getTransaction().commit();\n\n        Query q = em.createQuery(\"select f from Family f\");\n        List<Family> fList = q.getResultList();\n        for (Family f1 : fList) {\n            System.out.println(\"Family \" + f1.getName() + \": \" \n                      + f1.getMembers().size() + \" members:\");\n            for(Person2 p1: f1.getMembers()){\n                System.out.println(\"   \" + p1);\n            }\n        }\n        q = em.createQuery(\"select p from Person2 p\");\n        List<Person2> pList = q.getResultList();\n        for (Person2 p1 : pList) {\n            System.out.println(p1);\n        }\n    } catch (Exception ex){\n        ex.printStackTrace();\n        em.getTransaction().rollback();\n    } finally {\n        em.close();\n        emf.close();\n    }\n}\n```", "```java\nFamily The Jones: 1 members:\n    Person2{id=1, age=10, name='Name10', family='The Jones'}\nPerson2{id=1, age=10, name='Name10', family='The Jones'}\n```"]