- en: Deploying Java on Kubernetes in the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中部署Java在Kubernetes上
- en: In previous chapters, we have managed to run the Kubernetes cluster locally.
    Using `minikube` is a great way to learn Kubernetes and experiment on your own
    machine. The `minikube` powered cluster behaves exactly the same as the normal
    cluster that runs on the server. However, if you decide to run your clustered
    software in a production, the cloud is one of the best solutions. In this chapter,
    we will briefly cover the advantages of using cloud environments in the context
    of microservices running on Docker. Next, we are going to deploy our Kubernetes
    cluster on the Amazon AWS. Configuring AWS and running Kubernetes on it is not
    the easiest and most straightforward process from the start but, following this
    chapter will give you an overview of the process, you will be able to run your
    own cloud cluster quickly and deploy your own or third-party Docker images on
    it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经成功在本地运行了Kubernetes集群。使用`minikube`是学习Kubernetes和在自己的机器上进行实验的好方法。由`minikube`支持的集群的行为与在服务器上运行的普通集群完全相同。然而，如果您决定在生产环境中运行集群软件，云是最佳解决方案之一。在本章中，我们将简要介绍在Docker上运行微服务的情况下使用云环境的优势。接下来，我们将在Amazon
    AWS上部署我们的Kubernetes集群。配置AWS并在其上运行Kubernetes并不是从一开始就最简单和直接的过程，但是，遵循本章将为您提供一个过程概述，您将能够快速运行自己的云集群，并在其上部署自己或第三方的Docker镜像。
- en: 'The list of topics covered includes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖的主题列表包括：
- en: The benefits of using cloud, Docker, and Kubernetes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云、Docker和Kubernetes的好处
- en: Installing the needed tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需工具
- en: Configuring AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置AWS
- en: Deploying the cluster
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署集群
- en: Let's begin with the advantages of using a cloud-deployed Kubernetes cluster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用云部署的Kubernetes集群的优势开始。
- en: Benefits of using the cloud, Docker, and Kubernetes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用云、Docker和Kubernetes的好处
- en: Having an application deployed on a Kubernetes cluster has its advantages. It's
    fail resilient, scalable, and has efficient architecture. What's the difference
    between having your own infrastructure and using the cloud? Well, it comes down
    to couple of factors. First, it can be a significant cost reduction. For small
    services or applications, which could be shut down when not in use, the price
    of deploying applications in the cloud can be lower, due to lower hardware costs,
    there will be more effective usage of physical resources. You will not have to
    pay for the nodes that do not use the computing power or network bandwidth.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes集群上部署应用程序有其优势。它具有故障弹性、可扩展性和高效的架构。拥有自己的基础设施和使用云有什么区别？嗯，这归结为几个因素。首先，它可以显著降低成本。对于小型服务或应用程序，当不使用时可以关闭，因此在云中部署应用程序的价格可能更低，由于硬件成本更低，将更有效地利用物理资源。您将不必为不使用计算能力或网络带宽的节点付费。
- en: Having your own servers requires you to pay for the hardware, energy, and operating
    system software. Docker and Kubernetes are free of charge, even for commercial
    purposes; so, if you run it in the cloud, the cloud provider fee will be the only
    cost. Cloud providers update their software stack often; you can benefit from
    this by having the latest and greatest versions of the operating system software.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有自己的服务器需要支付硬件、能源和操作系统软件的费用。Docker和Kubernetes是免费的，即使用于商业目的；因此，如果在云中运行，云服务提供商的费用将是唯一的成本。云服务提供商经常更新其软件堆栈；通过拥有最新和最好的操作系统软件版本，您可以从中受益。
- en: When it comes to the computing power or network bandwidth, large cloud providers
    such as, Amazon or Google cannot be easily beaten. Their cloud infrastructure
    is huge. Since they provide services to many different clients, they buy large,
    high-performance systems that offer performance levels much higher than a small
    company can afford to run internally. Also, as you will see in the next sections
    of this chapter, cloud providers can spin up new servers or services in minutes
    or even seconds. As a result, if there's a need, new instances will be brought
    to life in a way that is almost transparent for the users of your software. If
    your application needs to handle a lot of requests, sometimes having it deployed
    in the cloud can be the only option.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算能力或网络带宽方面，像亚马逊或谷歌这样的大型云提供商很难被击败。他们的云基础设施非常庞大。由于他们为许多不同的客户提供服务，他们购买大型高性能系统，其性能水平远高于小公司内部运行的水平。此外，正如您将在本章的后续部分中看到的，云提供商可以在几分钟甚至几秒钟内启动新的服务器或服务。因此，如果有需要，新的实例将以几乎对软件用户透明的方式被带到生活中。如果您的应用程序需要处理大量请求，有时在云中部署它可能是唯一的选择。
- en: As for fault-tolerance, because cloud providers have their infrastructure spread
    out over the whole world (such as AWS zones, as you will see later in this chapter),
    your software can be fail-proof. No single accident such as power outage, fire,
    or an earthquake, can stop your application from running. Adding Kubernetes to
    the equation can scale the deployment up or down and will increase the fault tolerance
    of your application, even reducing the chance of complete failure to zero.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 至于容错性，因为云提供商将其基础设施分布在全球各地（例如AWS区域，您将在本章后面看到），您的软件可以是无故障的。没有任何单一事故，如停电、火灾或地震，可以阻止您的应用程序运行。将Kubernetes加入到方程式中可以扩展部署的规模，增加应用程序的容错性，甚至将完全失败的机会降低到零。
- en: Let's move our software to the cloud. To do this, we need to create a toolset
    first, by installing the required software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将软件移到云端。为此，我们需要先创建一个工具集，安装所需的软件。
- en: Installing the tools
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装工具
- en: To be able to manage Kubernetes cluster on Amazon EC2, we will need to install
    some command-line tools first. Of course, using the Amazon EC2 web interface is
    also possible. Spinning up a cluster is quite a complicated process; you will
    need to have a user with proper access and permissions, storage for a cluster
    state, EC2 instances to run your Kubernetes master and worker nodes, and so on.
    Doing everything manually is possible, but can be time consuming and error prone.
    Luckily, we have tools that can automate most of the things for us, this will
    be the AWS command-line client (`awscli` ) and `kops` , Kubernetes operations,
    production Grade K8s installation, upgrades, and management. There are some requirements
    though. `Kops` runs on Linux and macOS, it's written in Go, like Docker. The `awscli`
    is written in Python, so let's focus on Python installation first.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够在Amazon EC2上管理Kubernetes集群，我们需要先安装一些命令行工具。当然，也可以使用Amazon EC2的Web界面。启动集群是一个相当复杂的过程；您需要一个具有适当访问权限和权限的用户，用于集群状态的存储，运行Kubernetes主节点和工作节点的EC2实例等。手动完成所有操作是可能的，但可能会耗时且容易出错。幸运的是，我们有工具可以自动化大部分工作，这将是AWS命令行客户端（`awscli`）和`kops`，Kubernetes操作，生产级K8s安装，升级和管理。不过有一些要求。`Kops`在Linux和macOS上运行，它是用Go编写的，就像Docker一样。`awscli`是用Python编写的，所以让我们先专注于Python安装。
- en: Python and PIP
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python和PIP
- en: To run the AWS command-line tools (`awscli` ), we will need `python3` present
    on our machine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 运行AWS命令行工具（`awscli`），我们需要在我们的机器上安装`python3`。
- en: 'It may be present already, you can verify that using the command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能已经存在，您可以使用以下命令进行验证：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the output is `command not found` , the fastest way of installing it will
    be using the package manager you have on your system, such as `apt` on Debian/Ubuntu,
    `yum` on Fedora, or Homebrew on macOS. If you work on macOS and do not have Homebrew
    installed, I highly recommend doing so; it''s a wonderful tool that gives you
    the possibility to easily install thousands of packages together with all the
    needed dependencies. Homebrew is available freely at [https://brew.sh/](https://brew.sh/)
    . To install it, execute the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出是`command not found`，最快的安装方法将是使用系统上的软件包管理器，例如Debian/Ubuntu上的`apt`，Fedora上的`yum`，或macOS上的Homebrew。如果您在macOS上工作并且尚未安装Homebrew，我强烈建议您这样做；它是一个很棒的工具，可以让您轻松安装成千上万的软件包以及所有所需的依赖项。Homebrew可以免费获取[https://brew.sh/](https://brew.sh/)。要安装它，请执行以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From now on, you should have the `brew` command available in your macOS terminal.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，您应该在macOS终端中可以使用`brew`命令。
- en: 'To install Python on Linux using the `apt` package manager (on Debian or Ubuntu),
    execute the following commands:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux上使用`apt`软件包管理器（在Debian或Ubuntu上）安装Python，请执行以下命令：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On macOS, this will be the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，这将是以下命令：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The process of installing Python depends on the speed of your machine and internet
    connection, but it should not take long. Once Python is installed, we will need
    another tool, which is `pip` . `pip` is the recommended tool for installing Python
    packages. It''s written in Python itself. You can install it using the package
    manager of your choice, executing the following, for example, on Ubuntu or Debian:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python的过程取决于您的计算机速度和互联网连接速度，但不应该花费太长时间。一旦安装了Python，我们将需要另一个工具，即`pip`。`pip`是安装Python软件包的推荐工具。它本身是用Python编写的。您可以使用您选择的软件包管理器来安装它，例如在Ubuntu或Debian上执行以下命令：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An alternative way of installing `pip` is using the installation script. In
    this case, the process is exactly the same for Linux and macOS. First, we need
    to download the installation script using the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`pip`的另一种方法是使用安装脚本。在这种情况下，Linux和macOS的过程完全相同。首先，我们需要使用以下命令下载安装脚本：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After a while, we need to run the installation script by executing the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 过一段时间，我们需要通过执行以下命令运行安装脚本：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After a while, `pip` should be available for you in the terminal shell. To
    verify if it''s working, execute the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 过一段时间，`pip`应该可以在终端shell中使用。要验证它是否正常工作，请执行以下命令：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we have Python and pip installed and working properly, it's time to
    move on to more interesting things, installing Amazon AWS command-line utilities.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并正常运行Python和pip，是时候转向更有趣的事情了，安装Amazon AWS命令行工具。
- en: AWS command-line tools
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS命令行工具
- en: The Amazon **AWS command-line tool** (**awscli** ) interface is a unified tool
    for managing your AWS services. The `awscli` is built on top of the AWS SDK for
    Python, which provides commands for interacting with AWS services. With minimal
    configuration (actually, providing login id and a secret is enough, we will do
    it in a while), you can start using all of the functionality provided by the AWS
    Management Console web interface. Moreover, the `awscli` is not only about EC2,
    which we will be using to deploy our cluster on, but also other services such
    as S3 (a storage service) for example.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon **AWS命令行工具**（**awscli**）界面是管理AWS服务的统一工具。`awscli`是建立在AWS SDK for Python之上的，它提供了与AWS服务交互的命令。只需进行最小配置（实际上，提供登录ID和密码就足够了，我们马上就会做），您就可以开始使用AWS管理控制台Web界面提供的所有功能。此外，`awscli`不仅仅是关于EC2，我们将用它来部署我们的集群，还涉及其他服务，例如S3（存储服务）。
- en: 'To install `awscli` , execute the following `pip` command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`awscli`，执行以下`pip`命令：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After a while, `pip` will download and install the necessary files in the `python3`
    folder structure on your drive. It will be `~/Library/Python/3.6/bin` in case
    of macOS and Python 3.6\. It''s very convenient to add this folder to your `PATH`
    environment variable, to make it available from anywhere in the shell. This is
    straightforward; you will need to edit the `PATH` variable in one of those files,
    depending on the shell you use:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 过一会儿，`pip`将在驱动器的`python3`文件夹结构中下载并安装必要的文件。在macOS和Python 3.6的情况下，它将是`~/Library/Python/3.6/bin`。将此文件夹添加到您的`PATH`环境变量中非常方便，以便在shell中的任何位置都可以使用。这很简单；您需要编辑其中一个文件中的`PATH`变量，具体取决于您使用的shell：
- en: '**Bash** : `.bash_profile` , `.profile` , or `.bash_login`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bash**：`.bash_profile`、`.profile`或`.bash_login`'
- en: '**Zsh** : `.zshrc`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zsh**：`.zshrc`'
- en: '**Tcsh** : `.tcshrc` , `.cshrc` or `.login`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tcsh**：`.tcshrc`、`.cshrc`或`.login`'
- en: 'An example `PATH` entry could look the same as this, on macOS:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，`PATH`条目可能看起来与此相同：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After logging back in or launching a new terminal, you can verify if the `aws`
    command is available, by executing the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 重新登录或启动新的终端后，您可以通过执行以下命令来验证`aws`命令是否可用：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see in the output, this will give you a detailed `aws` command-line
    tools version also with the Python version it''s running on:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在输出中所看到的，这将为您提供详细的`aws`命令行工具版本，还有它运行的Python版本：
- en: '![](Image00112.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00112.jpg)'
- en: The `awscli` is ready to use, but we have one more tool to add to our tool setup.
    It will be Kubernetes `kops` .
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`awscli`已准备就绪，但我们还有一个工具要添加到我们的工具设置中。这将是Kubernetes `kops`。'
- en: Kops
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kops
- en: 'Kubernetes operations or `kops` , for short, is the production grade Kubernetes
    installation, upgrades, and management tool. It''s a command-line utility that
    helps you create, destroy, upgrade, and maintain highly available Kubernetes clusters
    on AWS. AWS is officially supported by the tool. You can find the `kops` releases
    on GitHub: [https://github.com/kubernetes/kops/releases](https://github.com/kubernetes/kops/releases)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes操作或简称`kops`是生产级Kubernetes安装、升级和管理工具。它是一个命令行实用程序，可帮助您在AWS上创建、销毁、升级和维护高可用的Kubernetes集群。该工具官方支持AWS。您可以在GitHub上找到`kops`的发布版本：[https://github.com/kubernetes/kops/releases](https://github.com/kubernetes/kops/releases)
- en: 'To install on either macOS or Linux, you will just need to download the binary,
    change the permission to executable and you are done. To download, execute, for
    example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS或Linux上安装，您只需要下载二进制文件，更改权限为可执行，然后就完成了。例如，要下载，请执行：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, if you are using Linux, execute the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用Linux，请执行以下命令：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, again, using the package manager will be the easiest way to
    get the latest `kops` binary, for example using `brew` on macOS:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，再次使用软件包管理器将是获取最新的`kops`二进制文件的最简单方法，例如在macOS上使用`brew`：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that you must have `kubectl` ([https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)
    ) installed in order for `kops` to work. If you use the package manager, the dependency
    to `kubectl` will be probably defined in the `kops` package, so the `kubernetes-cli`
    will be installed first.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须安装`kubectl`（[https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)）才能使`kops`正常工作。如果您使用软件包管理器，`kubectl`的依赖关系可能已经在`kops`软件包中定义，因此将首先安装`kubernetes-cli`。
- en: The last tool is the `jq` . Although not mandatory, i t's very useful when dealing
    with JSON data. All the AWS, Kubernetes, and `kops` commands will post and receive
    JSON objects, so having a tool for parsing JSON comes in handy, I highly recommend
    installing `jq` .
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个工具是`jq`。虽然不是强制性的，但在处理JSON数据时非常有用。所有AWS、Kubernetes和`kops`命令都将发布和接收JSON对象，因此安装`jq`工具非常方便，我强烈建议安装`jq`。
- en: jq
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jq
- en: '`jq` is a command-line JSON processor. It works like `sed` for JSON data; you
    can use it to filter, parse, and transform structured data with the same ease
    that `sed` , `awk` , or `grep` let you do with raw text. `Jq` is available on
    GitHub at [https://stedolan.github.io/jq/](https://stedolan.github.io/jq/) . The
    installation is very simple; it''s just a single binary, available for Windows,
    macOS, and Linux. Just download it and copy it into the folder available on your
    system `PATH` to be able to run it from the shell or command-line.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`jq`是一个命令行JSON处理器。它的工作原理类似于JSON数据的`sed`；您可以使用它来过滤、解析和转换结构化数据，就像`sed`、`awk`或`grep`让您处理原始文本一样容易。`Jq`可在GitHub上找到[https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)。安装非常简单；它只是一个单一的二进制文件，适用于Windows、macOS和Linux。只需下载它并将其复制到系统`PATH`上可用的文件夹中，以便能够从shell或命令行中运行它。'
- en: Assuming we have all the tools installed before we start using kops, we will
    need to configure our AWS account first. This will be creating an administrative
    user and then, using the `aws` command-line tool, creating the user for running
    `kops` .
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在开始使用kops之前我们已经安装了所有工具，我们需要首先配置我们的AWS账户。这将创建一个管理员用户，然后使用`aws`命令行工具创建用于运行`kops`的用户。
- en: Configuring Amazon AWS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Amazon AWS
- en: The configuration of AWS before setting up a Kubernetes cluster goes down to
    creating a user, basically. All the rest will be done more or less automatically
    by the `kops` command. Before we can use `kops` from the command-line, it's good
    to have a user dedicated to `kops` . But first, we will need to create an administrator
    user. We will do it from the Web Management Console.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置Kubernetes集群之前，AWS的配置基本上是创建一个用户。所有其他工作将由`kops`命令更多或更少地自动完成。在我们可以从命令行使用`kops`之前，最好有一个专门用于`kops`的用户。但首先，我们需要创建一个管理员用户。我们将从Web管理控制台进行操作。
- en: Creating an administrative user
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个管理员用户
- en: Depending on the AWS region you have chosen, the AWS Management Console is available
    at a subdomain of `console.aws.amazon.com` , this will be [https://eu-central-1.console.aws.amazon.com](https://eu-central-1.console.aws.amazon.com)
    , for example. After logging in, go to the IAM page of the Security, Identity,
    and Compliance section, then switch to the Users page, then click on the Add user
    button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您选择的AWS区域，AWS管理控制台可在`console.aws.amazon.com`的子域上使用，例如[https://eu-central-1.console.aws.amazon.com](https://eu-central-1.console.aws.amazon.com)。登录后，转到安全、身份和合规性部分的IAM页面，然后切换到用户页面，然后单击“添加用户”按钮。
- en: 'You will be presented with the user creation screen:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到用户创建屏幕：
- en: '![](Image00113.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00113.jpg)'
- en: 'We will need this user for using `awscli` , so the only option we need to mark
    is the Programmatic Access . After clicking on Next: Permissions , let''s give
    our `admin` user full administrative rights by adding him to the `admin` group:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要这个用户来使用`awscli`，所以我们需要标记的唯一选项是程序化访问。单击“下一步：权限”，让我们通过将其添加到`admin`组来为我们的`admin`用户提供完整的管理权限。
- en: '![](Image00114.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00114.jpg)'
- en: 'On the last page of the user creation wizard, you will be able to see the Access
    key ID and Secret access key ID . Do not close the page, we will need both in
    a short while to authenticate using `awscli` :'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户创建向导的最后一页，您将能够看到访问密钥ID和秘密访问密钥ID。不要关闭页面，我们将在短时间内需要两者来使用`awscli`进行身份验证：
- en: '![](Image00115.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00115.jpg)'
- en: That's it. We have created an admin user with all the administrative rights
    and have the access keys. It's all we need to manage our AWS instances using `awscli`
    . Running `kops` using the `admin` user is probably not the best idea, so let's
    create a separate user for that. This time, however, we will do it from the command-line.
    It will be a lot easier in comparison to UI clicking on the Web Console . First,
    let's authenticate using the admin user's Access key ID and `Secret access key
    ID` , presented on the last page of the user creation wizard.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们已经创建了一个具有所有管理权限的管理员用户，并获得了访问密钥。这就是我们使用`awscli`管理AWS实例所需要的一切。使用`admin`用户运行`kops`可能不是最好的主意，所以让我们为此创建一个单独的用户。然而，这次我们将从命令行进行操作。与在Web控制台上点击UI相比，这将更加容易。首先，让我们使用管理员用户的Access
    Key ID和`Secret access key ID`进行身份验证，这些信息显示在用户创建向导的最后一页上。
- en: Creating a user for kops
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为kops创建用户
- en: 'The `kops` user will need to have the following permissions in AWS to function
    properly:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`kops`用户需要在AWS中具有以下权限才能正常运行：'
- en: '`AmazonEC2FullAccess`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2FullAccess`'
- en: '`AmazonS3FullAccess`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonS3FullAccess`'
- en: '`AmazonRoute53FullAccess`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonRoute53FullAccess`'
- en: '`IAMFullAccess`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IAMFullAccess`'
- en: '`AmazonVPCFullAccess`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonVPCFullAccess`'
- en: 'First, we are going to create a group named `kops` and give the needed permissions
    to the group. Execute the following list of commands to create a group and assign
    permissions:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为`kops`的组，并为该组分配所需的权限。执行以下命令列表来创建一个组并分配权限：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `create-group` command will give you some JSON response, but there will
    be no response when attaching a permission (group policy) to the group if all
    goes well:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`create-group`命令将给您一些JSON响应，但是如果一切顺利，当将权限（组策略）附加到组时将不会有响应：'
- en: '![](Image00116.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00116.jpg)'
- en: 'Next, let''s create the `kops` IAM user and add the user to the `kops` group,
    using the following commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建`kops` IAM用户并将用户添加到`kops`组，使用以下命令：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you are curious you can now login into the web AWS console. You will see
    that our `kops` user has all the permissions we need:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您感兴趣，现在可以登录到Web AWS控制台。您会看到我们的`kops`用户拥有我们需要的所有权限：
- en: '![](Image00117.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00117.jpg)'
- en: 'To list all the registered users, execute the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有注册用户，请执行以下命令：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see in the following screenshot, we should now have two users: `admin`
    and `kops` :'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在以下截图中所看到的，我们现在应该有两个用户：`admin`和`kops`：
- en: '![](Image00118.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00118.jpg)'
- en: 'The last thing we need to do regarding our new `kops` user is to generate the
    access keys. We will need them to authenticate using the `aws configure` command.
    Execute the following to generate the access keys for the `kops` user:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们的新`kops`用户，我们需要做的最后一件事就是生成访问密钥。我们将需要它们来使用`aws configure`命令进行身份验证。执行以下操作为`kops`用户生成访问密钥：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see in the following screenshot, AWS will answer with the JSON response
    containing `AccessKeyId` and `SecretAccessKey` ; we will need both when authenticating
    using the `aws configure` command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在以下截图中所看到的，AWS将以包含`AccessKeyId`和`SecretAccessKey`的JSON响应进行回答；在使用`aws configure`命令进行身份验证时，我们将需要这两者：
- en: '![](Image00119.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00119.jpg)'
- en: 'All we need to do now is to authenticate using the `aws configure` command,
    providing the `AccessKeyId` and `SecretAccessKey` we got in the response. Execute
    the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的就是使用`aws configure`命令进行身份验证，提供我们在响应中获得的`AccessKeyId`和`SecretAccessKey`。执行以下操作：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Because the `aws configure` command doesn''t export these variables for `kops`
    to use, we need to export them now:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`aws configure`命令不会为`kops`导出这些变量以供使用，所以我们现在需要导出它们：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's it, we have authenticated with our new user named `kops` , which has
    all the permissions needed to spin up a Kubernetes cluster. From now on, every
    `kops` command we execute will use the AWS `kops` user. It's time to get back
    to the point and create our cluster, eventually.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，我们已经使用名为`kops`的新用户进行了身份验证，该用户具有启动Kubernetes集群所需的所有权限。从现在开始，我们执行的每个`kops`命令都将使用AWS
    `kops`用户。现在是时候回到重点并最终创建我们的集群了。
- en: Creating the cluster
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群
- en: 'We are going to create a simple cluster with one master node and two worker
    nodes. To do it using `kops` , we will need:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含一个主节点和两个工作节点的简单集群。要使用`kops`进行操作，我们需要：
- en: A user profile declared in `~/.aws/credentials` (this is done automatically
    if you authenticate using `aws configure` ).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户配置文件在`~/.aws/credentials`中声明（如果您使用`aws configure`进行身份验证，则会自动完成）。
- en: An S3 bucket to store `kops` cluster state. In order to store the representation
    of our cluster and its state, we need to create a dedicated S3 bucket for `kops`
    to use. This bucket will become the source of truth for our cluster configuration.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于存储`kops`集群状态的S3存储桶。为了存储我们集群及其状态的表示，我们需要创建一个专用的S3存储桶供`kops`使用。这个存储桶将成为我们集群配置的真相来源。
- en: DNS configured. This means we will need a Route 53 hosted zone in the same AWS
    account. Amazon Route 53 is a highly available and scalable cloud **Domain Name
    System** (**DNS** ) web service. Kops will use it to create records needed by
    the cluster. If you are using newer kops (1.6.2 or later), then DNS configuration
    is optional. Instead, a gossip-based cluster can be easily created. For the purposes
    of the example's simplicity, we will use the gossip-based cluster. To make it
    work, the cluster name must end with `k8s.local` . Let's look at other options
    we have regarding DNS setup, though.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已配置DNS。这意味着我们需要在同一AWS账户中拥有一个Route 53托管区域。Amazon Route 53是一个高可用性和可扩展的云**域名系统**（**DNS**）网络服务。Kops将使用它来创建集群所需的记录。如果您使用更新的kops（1.6.2或更高版本），则DNS配置是可选的。相反，可以轻松地创建一个基于gossip的集群。为了简单起见，我们将使用基于gossip的集群。为了使其工作，集群名称必须以`k8s.local`结尾。让我们看看关于DNS设置的其他选项。
- en: DNS settings
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS设置
- en: 'Four scenarios are possible for our cluster''s domain, basically: the root
    domain, which is hosted on AWS, the subdomain of the domain hosted on AWS, using
    Amazons Route 53 for a domain hosted elsewhere, and finally, a subdomain for your
    cluster set up in Route 53 while having the root domain elsewhere. Let''s briefly
    look at those setups now.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们的集群域名有四种可能的情况：托管在AWS上的根域，托管在AWS上的域的子域，在其他地方托管的域使用亚马逊Route 53，最后，在Route
    53中设置集群的子域，同时在其他地方设置根域。现在让我们简要地看一下这些设置。
- en: Root domain on AWS hosted domain
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管在AWS上的根域
- en: If you have your domain bought and hosted on AWS, you will probably have the
    Route 53 configured for you automatically already. If you would like to use this
    root level domain for your cluster, you need do nothing to be able to use that
    domain name with your cluster.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在AWS上购买并托管了您的域名，那么您可能已经自动配置了Route 53。如果您想要使用此根级域名用于您的集群，您无需做任何操作即可使用该域名与您的集群。
- en: The subdomain of the domain hosted on AWS
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管在AWS上的域的子域
- en: 'If you have your domain bought and hosted on AWS, but would like to use the
    subdomain for the cluster, you will need to create a new hosted zone in Route
    53 and then delegate the new route to this new zone. This is basically about copying
    the NS servers of your subdomain up to the parent domain in Route 53\. Let''s
    assume our domain is [mydomain.com](http://www.mydomain.com/) ; we need to get
    some information first. Note that the `jq` command-line tool comes in handy now,
    when executing `aws` commands. First, we need the ID of our main parent zone:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在AWS上购买并托管了您的域名，但想要将子域用于集群，您需要在Route 53中创建一个新的托管区域，然后将新路由委派给这个新区域。基本上就是将您的子域的NS服务器复制到Route
    53中的父域。假设我们的域是[mydomain.com](http://www.mydomain.com/)；我们首先需要获取一些信息。请注意，当执行`aws`命令时，现在`jq`命令行工具非常方便。首先，我们需要我们主要父区域的ID：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To create a new subdomain, execute the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新的子域，请执行以下操作：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Note that the previous command will list the name servers of the new domain.
    If you created the subdomain before, and would like to list the name servers (to
    copy the NS servers list to the parent zone, we will need to know them first),
    execute the following command to get the subdomain zone ID:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上一个命令将列出新域的名称服务器。如果您之前创建了子域，并且想要列出名称服务器（以便首先将NS服务器列表复制到父区域，我们需要知道它们），请执行以下命令以获取子域区域ID：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Having the ID of the subdomain zone, we can list its name servers, by executing
    the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有了子域区域的ID，我们可以通过执行以下命令列出其名称服务器：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'So far, we have our parent''s zone ID, subdomain zone''s ID and a list of subdomain''s
    name servers. We are ready to copy them into the parent. The most convenient way
    will be to prepare the JSON file, as it''s quite a long input. The file will look
    the same as the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有父区域的区域ID，子域区域的ID和子域名称服务器列表。我们准备好将它们复制到父区域中了。最方便的方法是准备JSON文件，因为输入内容相当长。文件将如下所示：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will need to save this as a file, let''s say `my-service-subdomain.json`
    , and execute the last command. It will copy the name servers list into the parent
    zone:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将此保存为文件，比如`my-service-subdomain.json`，并执行最后一个命令。它将把名称服务器列表复制到父区域中。
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: After a while, all network traffic to `*.myservice.mydomain.com` will be routed
    to the correct subdomain hosted zone in AWS Route 53.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，所有发送到`*.myservice.mydomain.com`的网络流量将被路由到AWS Route 53中正确的子域托管区域。
- en: Route 53 for a domain purchased with another registrar
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用另一个注册商购买的域名的Route 53
- en: If you bought your domain elsewhere, and would like to dedicate the entire domain
    to your AWS hosted cluster, things can get a little complicated, as this setup
    requires you to make crucial changes in another domain registrar.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在其他地方购买了域名，并且想要将整个域专用于您的AWS托管集群，情况可能会有些复杂，因为此设置要求您在另一个域名注册商处进行重要更改。
- en: If the registrar for your domain is also the DNS service provider for the domain
    (which is, actually, very often the case), it's recommended to transfer your DNS
    service to Amazon Route 53 before you continue with the process to transfer the
    domain registration.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的域名注册商也是域名的DNS服务提供商（实际上，这种情况非常常见），建议在继续域名注册转移过程之前将您的DNS服务转移到Amazon Route
    53。
- en: The reason for that is that when you transfer the registration, the previous
    registrar might disable the DNS service for the domain, as soon as they receive
    a transfer request from Route 53\. As a result, any service you have on this domain,
    such as a web application or an email, might become unavailable. To transfer the
    domain registration to Route 53 from another registrar, you will need to use the
    Route 53 console, available at [https://console.aws.amazon.com/route53/](https://console.aws.amazon.com/route53/)
    . In the navigation pane, choose Registered Domains and then Transfer Domain ,
    and enter the name of the domain which you would like to transfer and click on
    Check . If the domain is unavailable for transfer, the console will list the probable
    reasons and a recommended way to handle them. If everything is ok and the domain
    is available for transfer, you will have an option to add it to the cart. You
    will need to enter some details then, such as your contact information, the authorization
    code for transfer (you should get it from the previous registrar) and the name
    server settings. I highly recommend selecting the Route 63 managed DNS server,
    as it's quite easy to configure and reliable. The Route 63 will take care of communication
    with your previous registrar, but you may receive some emails requiring you to
    confirm some things. The transfer process can take a longer time, but when it's
    done, you may proceed with configuring the domain for your AWS based cluster in
    the same way as in the previous two cases.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是，当您转移注册时，之前的注册商可能会在他们收到来自Route 53的转移请求后禁用该域的DNS服务。因此，您在该域上拥有的任何服务，如Web应用程序或电子邮件，可能会变得不可用。要将域注册转移到Route
    53，您需要使用Route 53控制台，该控制台位于[https://console.aws.amazon.com/route53/](https://console.aws.amazon.com/route53/)。在导航窗格中，选择Registered
    Domains，然后选择Transfer Domain，并输入您想要转移的域的名称，然后单击Check。如果该域不可转移，控制台将列出可能的原因以及处理它们的推荐方法。如果一切正常并且该域可以转移，您将有选项将其添加到购物车中。然后，您需要输入一些详细信息，例如您的联系信息，用于转移的授权代码（您应该从之前的注册商那里获取），以及名称服务器设置。我强烈建议选择Route
    63托管的DNS服务器，因为它非常容易配置且可靠。Route 63将负责与您之前的注册商进行通信，但您可能会收到一些需要确认的电子邮件。转移过程可能需要更长的时间，但完成后，您可以继续以与前两种情况相同的方式配置基于AWS的集群的域。
- en: Subdomain for cluster in AWS Route 53, the domain elsewhere
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Route 53中集群的子域，域名在其他地方
- en: If you have your domain registered at a registrar other than Amazon and would
    like to use the subdomain of that domain to point to your cluster, you will need
    to modify your name servers entries in your registrar. This would require a new
    hosted zone subdomain to be created in Route 53 and then migration of this subdomain's
    name server records to your registrar.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在亚马逊以外的注册商那里注册了您的域，并且想要使用该域的子域指向您的集群，您需要修改您注册商中的名称服务器条目。这将需要在Route 53中创建一个新的托管区子域，然后将该子域的名称服务器记录迁移到您的注册商。
- en: 'Similar to the subdomain on the AWS-hosted domain, let''s create a subdomain
    first, by executing the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与托管在AWS上的域上的子域类似，让我们首先创建一个子域，通过执行以下命令：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The output of the previous command will list the name servers for the subdomain.
    You will need to log in to your registrar's settings page and create a new subdomain,
    providing the four name server records received from the previous command. You
    can find detailed instructions on how to edit the name servers for your domain
    in your specific registrar help guides.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出将列出子域的名称服务器。您需要登录到您的注册商设置页面，并创建一个新的子域，提供从上一个命令中收到的四个名称服务器记录。您可以在您特定的注册商帮助指南中找到有关如何编辑您域的名称服务器的详细说明。
- en: The previous guides should make your cluster available under a specific domain
    or subdomain. For the rest of our chapter, however, we will be running the gossip-based
    cluster.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的指南应该使您的集群在特定域或子域下可用。然而，在本章的其余部分，我们将运行基于流言的集群。
- en: Before we create anything on AWS, we must see what zones are available for use.
    You should know that Amazon EC2 is hosted in multiple locations world-wide. These
    locations are composed of regions and availability zones. Each region is a separate
    geographic area. Each region has multiple, isolated locations known as availability
    zones. You can pick the location you want, but first, you will need to check the
    zones availability. Let's do that now.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上创建任何内容之前，我们必须查看可用的区域。您应该知道，Amazon EC2托管在全球多个位置。这些位置由区域和可用区组成。每个区域是一个单独的地理区域。每个区域都有多个隔离的位置，称为可用区。您可以选择您想要的位置，但首先，您需要检查可用的区域。现在让我们这样做。
- en: Checking the zones' availability
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查区域的可用性
- en: 'To list the zones available for the specific region, execute the following
    command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出特定区域可用的区域，请执行以下命令：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you can see on the following screenshot, AWS will give you the list of zones
    in the response:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下截图中所见，AWS将在响应中列出可用的区域：
- en: '![](Image00120.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00120.jpg)'
- en: Creating the storage
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建存储
- en: 'Our cluster needs to store its state somewhere. Kops uses Amazon S3 buckets
    for that purpose. An S3 bucket is a logical unit of storage in the **Amazon Web
    Services** (**AWS** ) object storage service, **Simple Storage Solution** (**S3**
    )*.* Buckets are used to store objects, which consist of data and metadata that
    describes the data. To create a bucket, execute the following `aws` command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的集群需要在某个地方存储其状态。Kops使用Amazon S3存储桶来实现这一目的。S3存储桶是**Amazon Web Services**（**AWS**）对象存储服务**Simple
    Storage Solution**（**S3**）中的逻辑存储单元。存储桶用于存储对象，对象由描述数据的数据和元数据组成。要创建一个存储桶，请执行以下`aws`命令：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you will see on the following screenshot, AWS will give you back the concise
    information about the location of the store:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下截图中所见，AWS将向您提供有关存储位置的简明信息：
- en: '![](Image00121.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00121.jpg)'
- en: 'Having the store created, we will need to make it available for `kops` when
    creating a cluster. To do this, we need to export the bucket''s name into the
    `KOPS_STATE_STORE` environment variable to:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建存储后，我们需要在创建集群时使其对`kops`可用。为此，我们需要将存储桶的名称导出到`KOPS_STATE_STORE`环境变量中：
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We are now ready to create a cluster.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备创建一个集群。
- en: As you remember, we are going to use a gossip-based cluster instead of configured
    DNS, so the name must end with `k8s.local` .
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在你记得的时候，我们将使用基于流言的集群，而不是配置的DNS，因此名称必须以`k8s.local`结尾。
- en: Creating a cluster
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个集群
- en: 'Let''s first export our cluster name to the environment variable. This will
    be useful, because we are going to refer to the cluster''s name often. Execute
    the following command to export the cluster name:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将我们的集群名称导出到环境变量中。这将很有用，因为我们经常会引用集群的名称。执行以下命令导出集群名称：
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `kops create cluster` is the command we are going to use to create our cluster.
    Note that this will not affect our Amazon EC2 instances yet. The outcome of the
    command will be just a local cluster template which we can review and edit before
    rolling out real, physical changes on the AWS.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`kops create cluster`是我们将用来创建集群的命令。请注意，这不会影响我们的Amazon EC2实例。该命令的结果只是一个本地集群模板，我们可以在在AWS上进行真正的物理更改之前进行审查和编辑。'
- en: 'The syntax of the command is very simple:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的语法非常简单：
- en: '[PRE31]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The command takes a lot of options; you can always find the up-to-date description
    on GitHub at [https://github.com/kubernetes/kops/blob/master/docs/cli/kops_create_cluster.md](https://github.com/kubernetes/kops/blob/master/docs/cli/kops_create_cluster.md)
    . Let''s focus on the most important ones:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令有很多选项；您可以在GitHub上始终找到最新的描述，网址为[https://github.com/kubernetes/kops/blob/master/docs/cli/kops_create_cluster.md](https://github.com/kubernetes/kops/blob/master/docs/cli/kops_create_cluster.md)
    。让我们专注于最重要的几个：
- en: '| **Option** | **Description** |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **描述** |'
- en: '| `--master-count [number]` | Sets the number of master nodes. The default
    is one master node per master-zone. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `--master-count [number]` | 设置主节点的数量。默认值是每个主区域一个主节点。 |'
- en: '| `--master-size [string]` | Sets instance size for masters, for example:`--master-size=t2.medium`
    . |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `--master-size [string]` | 设置主节点的实例大小，例如：`--master-size=t2.medium` 。 |'
- en: '| `--master-volume-size [number]` | Sets instance volume size for master nodes
    in gigabytes. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `--master-volume-size [number]` | 设置主节点实例卷大小（以GB为单位）。 |'
- en: '| `--master-zones [zone1,zone2]` | Specifies AWS zones in which to run masters
    (this must be an odd number). |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `--master-zones [zone1,zone2]` | 指定要运行主节点的AWS区域（这必须是奇数）。 |'
- en: '| `--zones [zone1,zone2 ]` | Zones in which to run the cluster, for example:
    `--zones eu-central-1a,eu-central-1b` . |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `--zones [zone1,zone2 ]` | 用于运行集群的区域，例如：`--zones eu-central-1a,eu-central-1b`
    。 |'
- en: '| `--node-count [number]` | Sets the number of nodes. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `--node-count [number]` | 设置节点的数量。 |'
- en: '| `--node-size [string]` | Sets instance size for nodes, for example:`--node-size=t2.medium`
    . |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `--node-size [string]` | 设置节点的实例大小，例如：`--node-size=t2.medium` 。 |'
- en: '| `--node-volume-size int32` | Sets instance volume size (in GB) for nodes.
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `--node-volume-size int32` | 设置节点的实例卷大小（以GB为单位）。 |'
- en: 'If you would like to make your cluster private (it''s public by default) you
    will need to consider using these options additionally:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将您的集群设置为私有的（默认情况下是公共的），您还需要考虑使用以下选项：
- en: '| **Option** | **Description** |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **描述** |'
- en: '| `--associate-public-ip [true&#124;false]` | Specifies if you want your cluster
    to have a public IP assigned or not. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `--associate-public-ip [true&#124;false]` | 指定是否要为您的集群分配公共IP。 |'
- en: '| `--topology [public&#124;private]` | Specifies the internal networking topology
    for the cluster, it can be `public` or `private` . |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `--topology [public&#124;private]` | 指定集群的内部网络拓扑，可以是`public`或`private`。 |'
- en: '| `--bastion` | The `--bastion` flag enables a bastion instance group. The
    option is valid only with the private topology. It will generate a dedicated SSH
    jump host for SSH access to cluster instances. A jump host provides a point of
    entry into a private network of your cluster. It can be started and stopped to
    enable or disable inbound SSH communication from the internet. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `--bastion` | `--bastion`标志启用了一个堡垒实例组。该选项仅适用于私有拓扑。它将为集群实例的SSH访问生成一个专用的SSH跳转主机。跳转主机提供了进入集群私有网络的入口点。它可以启动和停止，以启用或禁用来自互联网的入站SSH通信。
    |'
- en: 'Let''s create our cluster now, using the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令创建我们的集群：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the response, `kops` will list all the details of the configuration that
    has been created and suggest some next steps you can take with your new cluster
    configuration:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，`kops`将列出已创建的配置的所有细节，并建议您可以采取的新集群配置的一些下一步操作：
- en: '![](Image00122.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00122.jpg)'
- en: After running the command, `kops` will configure your `kubectl` Kubernetes client
    to point to your new cluster; this will be `my-rest-cluster.k8s.local` in our
    example.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，`kops`将配置您的`kubectl` Kubernetes客户端指向您的新集群；在我们的示例中，这将是`my-rest-cluster.k8s.local`。
- en: 'As we have said before, at this stage, only the cluster''s template is created,
    not the cluster itself. You can still change any option by editing your cluster:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，在这个阶段，只创建了集群的模板，而不是集群本身。您仍然可以通过编辑您的集群来更改任何选项：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will bring up the default editor you have defined in your shell, where
    you can see the cluster template that has been generated. It will contain a lot
    more settings, not only those you have specified when running the `cluster create`
    command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动你在shell中定义的默认编辑器，在那里你可以看到已生成的集群模板。它将包含更多的设置，不仅仅是你在运行`cluster create`命令时指定的那些：
- en: '![](Image00123.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00123.jpg)'
- en: If you are satisfied with your cluster template, it's time to spin it up to
    create real cloud-based resources, such as networks and EC2 instances. Once the
    infrastructure is ready, `kops` will install Kubernetes on the EC2 instances.
    Let's do it.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对你的集群模板满意，现在是时候启动它，创建真正的基于云的资源，比如网络和EC2实例。一旦基础设施准备好，`kops`将在EC2实例上安装Kubernetes。让我们开始吧。
- en: Starting up clusters
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动集群
- en: 'To start the cluster and spin up all the necessary EC2 instances, you will
    need to execute the `update` command. It''s recommended in the `kops` manual that
    you should do it first in the preview mode without the `--yes` switch. This will
    not spin up any EC2 instances:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动集群并启动所有必要的EC2实例，你需要执行`update`命令。`kops`手册建议你首先在预览模式下执行，不要使用`--yes`开关。这不会启动任何EC2实例：
- en: '[PRE34]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If all is looking correct, execute the update command with the `--yes` switch:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切看起来正确，使用`--yes`开关执行更新命令：
- en: '[PRE35]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![](Image00124.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00124.jpg)'
- en: 'Your cluster is starting and should be ready in a few minutes. If you now log
    in into the WAS Management Console, you will see your EC2 instances starting up,
    as you can see in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你的集群正在启动，应该在几分钟内准备就绪。如果你现在登录到WAS管理控制台，你会看到你的EC2实例正在启动，就像你在下面的截图中看到的那样：
- en: '![](Image00125.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00125.jpg)'
- en: 'You can also check the whole cluster state, issuing the following command:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过发出以下命令来检查整个集群状态：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output will contain information about the number and status of the cluster''s
    nodes, including the master node:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将包含有关集群节点数量和状态的信息，包括主节点：
- en: '![](Image00126.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00126.jpg)'
- en: 'Of course, as the `kubectl` is now configured to act on our AWS cluster, we
    can list nodes using `kubectl get nodes` command, exactly the same as we did in
    the [Chapter 9](text00180.html) , *Working with Kubernetes API* , with `minikube`
    base cluster. Execute the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于`kubectl`现在配置为在我们的AWS集群上操作，我们可以使用`kubectl get nodes`命令列出节点，就像我们在[第9章](text00180.html)中使用`minikube`基础集群一样。执行以下命令：
- en: '[PRE37]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You will be given the information about the name and status of your cluster''s
    nodes:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将会给你提供有关你的集群节点名称和状态的信息：
- en: '![](Image00127.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00127.jpg)'
- en: Updating a cluster
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新集群
- en: '`Kops` behaves similarly to `kubectl` ; you can edit the configuration files
    in the editor before actually doing any changes on the cluster. The `kops update`
    command will apply configuration changes, but will not modify the running infrastructure.
    To update the running cluster, you will need to execute the `rolling-update` command.
    The following will start the update or recreation process of the cluster''s infrastructure:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`Kops`的行为类似于`kubectl`；你可以在编辑器中编辑配置文件，然后再实际对集群进行任何更改。`kops update`命令将应用配置更改，但不会修改正在运行的基础设施。要更新运行中的集群，你需要执行`rolling-update`命令。以下将启动集群基础设施的更新或重建过程：'
- en: '[PRE38]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Our fresh cluster is running, but it's empty. Let's deploy something.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新集群正在运行，但是它是空的。让我们部署一些东西。
- en: Installing the dashboard
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装仪表板
- en: 'Having the cluster running, it would be nice to have a dashboard deployed,
    to see the status of your services, deployments, pods and so on. The dashboard
    is included in the `minikube` cluster by default, but on our brand new Amazon
    cluster we will need to install it manually. This is a straightforward process.
    As we have `kubectl` configured to act on the remote cluster, we can execute the
    following `kubectl create` command with the `kubernetes-dashboard.yaml` template
    as an input:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当集群运行时，部署一个仪表板会很好，以查看您的服务、部署、Pod等的状态。仪表板默认包含在 `minikube` 集群中，但是在我们全新的亚马逊集群上，我们需要手动安装它。这是一个简单的过程。由于我们已经配置了
    `kubectl` 来操作远程集群，我们可以使用 `kubernetes-dashboard.yaml` 模板作为输入执行以下 `kubectl create`
    命令：
- en: '[PRE39]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The next thing would be to proxy the network traffic, using the following `kubectl
    proxy` command we already know:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的事情是代理网络流量，使用我们已经知道的以下 `kubectl proxy` 命令：
- en: '[PRE40]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'That''s it! After a while the dashboard will be deployed and we will be able
    to access it using the localhost address:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！过一会儿，仪表板将被部署，我们将能够使用本地主机地址访问它：
- en: '`http://localhost:8001/` , as you can see in the following screenshot, is the
    same dashboard we have already seen in the [Chapter 9](text00180.html) , *Working
    with Kubernetes API* :'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8001/`，如下截图所示，是我们在[第9章](text00180.html)中已经看到的相同的仪表板，*使用Kubernetes
    API*：'
- en: '![](Image00128.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00128.jpg)'
- en: From now on, you can use the `kubectl` and the dashboard to manage your cluster
    as we did before in the [Chapter 9](text00180.html) , *Working with Kubernetes
    API* . All the `kubectl create` commands will work the same as with the local
    cluster. This time, however, your software will go to the cloud.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，您可以使用 `kubectl` 和仪表板来管理您的集群，就像我们在[第9章](text00180.html)中所做的那样，*使用Kubernetes
    API*。所有 `kubectl create` 命令将与本地集群一样工作。但是，这一次，您的软件将部署到云端。
- en: 'If you decide to remove the cluster, execute the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定删除集群，请执行以下命令：
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Note that if you just created the cluster template, without executing `kops
    update cluster ${NAME} --yes` first, you can also delete the cluster, as you can
    see in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您只是创建了集群模板，而没有首先执行 `kops update cluster ${NAME} --yes`，您也可以删除集群，如下截图所示：
- en: '![](Image00129.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00129.jpg)'
- en: If the cluster is already created on Amazon, the process of deleting it will
    take longer, as all EC2 instances for master and worker nodes needs to be shutdown
    first.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果集群已经在亚马逊上创建，删除过程将需要更长时间，因为首先需要关闭所有主节点和工作节点的EC2实例。
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have set up a cluster in the real cloud, Amazon AWS. `Kops`
    is one of the best tools that we have available right now to manage Kubernetes
    on AWS. Using it, you can easily create and manage clusters on AWS. It can be
    a test or a production-grade cluster; `kops` will make the creation and management
    of it a breeze.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在真正的云端，亚马逊AWS上设置了一个集群。`Kops`是我们目前可用的最好的工具之一，用于在AWS上管理Kubernetes。使用它，您可以轻松地在AWS上创建和管理集群。它可以是一个测试或生产级别的集群；`kops`将使其创建和管理变得轻而易举。
