["```cs\nvar range = Enumerable.Range(1, 100000);\n```", "```cs\nvar resultList = range.Where(i => i % 3 == 0).ToList();\n```", "```cs\n var resultList = range.AsParallel().Where(i => i % 3 == 0).ToList();\n\n```", "```cs\nvar resultList = (from i in range.AsParallel()\n                  where i % 3 == 0\n                  select i).ToList();\n```", "```cs\nvar range = Enumerable.Range(1, 100000);\n//Here is sequential version\nvar resultList = range.Where(i => i % 3 == 0).ToList();\nConsole.WriteLine($\"Sequential: Total items are {resultList.Count}\");\n//Here is Parallel Version using .AsParallel method\nresultList = range.AsParallel().Where(i => i % 3 == 0).ToList();\nresultList = (from i in range.AsParallel()\n where i % 3 == 0\n select i).ToList();\n Console.WriteLine($\"Parallel: Total items are {resultList.Count}\" ); \nConsole.WriteLine($\"Parallel: Total items are {resultList.Count}\");\n\n```", "```cs\nvar range = Enumerable.Range(1, 10);\nConsole.WriteLine(\"Sequential Ordered\"); \nrange.ToList().ForEach(i => Console.Write(i + \"-\"));\n```", "```cs\nConsole.WriteLine(\"Parallel Unordered\");\nvar unordered = range.AsParallel().Select(i => i).ToList();\nunordered.ForEach(i => Console.WriteLine(i));\n```", "```cs\nvar range = Enumerable.Range(1, 10);\nConsole.WriteLine(\"Parallel Ordered\");\nvar ordered = range.AsParallel().AsOrdered().Select(i => i).ToList();                            ordered.ForEach(i => Console.WriteLine(i));\n```", "```cs\n  var range = Enumerable.Range(100, 10000);\n  var ordered = range.AsParallel().AsOrdered().Take(100).Select(i => i * i);\n```", "```cs\nvar range = Enumerable.Range(100, 10000);\nvar ordered = range.AsParallel().AsOrdered().Take(100).AsUnordered().Select(i => i * i).ToList();\n```", "```cs\nvar range = ParallelEnumerable.Range(1, 100);\nStopwatch watch = null;\nParallelQuery<int> notBufferedQuery = range.WithMergeOptions(ParallelMergeOptions.NotBuffered)\n                                           .Where(i => i % 10 == 0)\n                                           .Select(x => {\n                                                     Thread.SpinWait(1000);\n                                                     return x;\n                                                        });\nwatch = Stopwatch.StartNew();\nforeach (var item in notBufferedQuery)\n{\n    Console.WriteLine( $\"{item}:{watch.ElapsedMilliseconds}\");\n}\nConsole.WriteLine($\"\\nNotBuffered Full Result returned in {watch.ElapsedMilliseconds} ms\");\n```", "```cs\nvar range = ParallelEnumerable.Range(1, 100);\nStopwatch watch = null;\nParallelQuery<int> query = range.WithMergeOptions(ParallelMergeOptions.AutoBuffered)\n                                .Where(i => i % 10 == 0)\n                                .Select(x => {\n                                             Thread.SpinWait(1000);\n                                             return x;\n                                             });\nwatch = Stopwatch.StartNew();\nforeach (var item in query)\n{\n    Console.WriteLine($\"{item}:{watch.ElapsedMilliseconds}\");\n}\nConsole.WriteLine($\"\\nAutoBuffered Full Result returned in {watch.ElapsedMilliseconds} ms\");\nwatch.Stop();\n```", "```cs\nvar range = ParallelEnumerable.Range(1, 100);\nStopwatch watch = null;\nParallelQuery<int> fullyBufferedQuery = range.WithMergeOptions(ParallelMergeOptions.FullyBuffered)\n                                .Where(i => i % 10 == 0)\n                                .Select(x => {\n                                              Thread.SpinWait(1000);\n                                              return x;\n                                              });\nwatch = Stopwatch.StartNew();\nforeach (var item in fullyBufferedQuery)\n{\n    Console.WriteLine($\"{item}:{watch.ElapsedMilliseconds}\");\n}\nConsole.WriteLine($\"\\nFullyBuffered Full Result returned in {watch.ElapsedMilliseconds} ms\");\nwatch.Stop();\n```", "```cs\nvar range = ParallelEnumerable.Range(1, 20);\nParallelQuery<int> query= range.Select(i => i / (i - 10)).WithDegreeOfParallelism(2);\ntry\n{\n    query.ForAll(i => Console.WriteLine(i));\n}\ncatch (AggregateException aggregateException)\n{\n    foreach (var ex in aggregateException.InnerExceptions)\n    {\n        Console.WriteLine(ex.Message);\n        if (ex is DivideByZeroException)\n            Console.WriteLine(\"Attempt to divide by zero. Query \n             stopped.\");\n    }\n}\n```", "```cs\nvar range = ParallelEnumerable.Range(1, 20);\nFunc<int, int> selectDivision = (i) =>\n{\n    try\n    {\n        return  i / (i - 10);\n    }\n    catch (DivideByZeroException ex)\n    {\n        Console.WriteLine($\"Divide by zero exception for {i}\");\n        return -1;\n    }\n};\nParallelQuery<int> query = range.Select(i => selectDivision(i)).WithDegreeOfParallelism(2);\ntry\n{\n    query.ForAll(i => Console.WriteLine(i));\n}\ncatch (AggregateException aggregateException)\n{\n    foreach (var ex in aggregateException.InnerExceptions)\n    {\n        Console.WriteLine(ex.Message);\n        if (ex is DivideByZeroException)\n            Console.WriteLine(\"Attempt to divide by zero. Query stopped.\");\n    }\n}\n```", "```cs\nvar range = Enumerable.Range(1, 1000);\nrange.AsParallel().Where(i => i % 2 == 0).AsSequential().Where(i => i % 8 == 0).AsParallel().OrderBy(i => i);\n```", "```cs\nCancellationTokenSource cs = new CancellationTokenSource();\nCreate a task that starts immediately and cancel the token after 4 seconds\n     Task cancellationTask = Task.Factory.StartNew(() =>\n            {\n                Thread.Sleep(4000);\n                cs.Cancel();\n            });\n```", "```cs\ntry\n       {\n           var result = range.AsParallel()\n             .WithCancellation(cs.Token)\n             .Select(number => number)\n             .ToList();\n       }\n```", "```cs\n     catch (OperationCanceledException ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n            catch (AggregateException ex)\n            {\n                foreach (var inner in ex.InnerExceptions)\n                {\n                    Console.WriteLine(inner.Message);\n                }\n            }\n```", "```cs\n            var range = Enumerable.Range(1,1000000);\n```", "```cs\nIEnumerable<int> query =\n    numbers.AsQueryable()\n    .Where((number, index) => number <= index * 10);\nIEnumerable<bool> query =\n    range.AsQueryable()\n    .Select((number, index) => number <= index * 10);\n```", "```cs\nvar range = Enumerable.Range(1, 10);\nvar squares = range.AsParallel().WithExecutionMode\n(ParallelExecutionMode.ForceParallelism).Select(i => i * i);\nsquares.ToList().ForEach(i => Console.Write(i + \"-\"));\n```", "```cs\nStopwatch watch = Stopwatch.StartNew();\nIEnumerable<int> parallelRange = ParallelEnumerable.Range(0, 5000).Select(i => i);\nwatch.Stop();\nConsole.WriteLine($\"Time elapsed {watch.ElapsedMilliseconds}\");\nStopwatch watch2 = Stopwatch.StartNew();\nIEnumerable<int> range = Enumerable.Range(0, 5000);\nwatch2.Stop();\nConsole.WriteLine($\"Time elapsed {watch2.ElapsedMilliseconds}\");\nConsole.ReadLine();\n```", "```cs\nIEnumerable<int> rangeRepeat = ParallelEnumerable.Repeat(1, 5000);\n```", "```cs\nint i=5;\ni = i/i -5;\n```"]