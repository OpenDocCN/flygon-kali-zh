- en: Chapter 5. Running Your Private Docker Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。运行您的私有Docker基础设施
- en: 'In [Chapter 4](ch04.html "Chapter 4. Publishing Images"), *Publishing Images,*
    we discussed Docker images and clearly understood that Docker containers are the
    runtime implementations of Docker images. Docker images and containers are in
    plenty these days, as the containerization paradigm has taken the IT domain by
    storm. Therefore, there is a need for worldwide enterprises to keep their Docker
    images in their own private infrastructure for security considerations. So, the
    concept of deploying a Docker Hub to our own infrastructure has emerged and evolved.
    Docker Hubs are paramount and pertinent to register and then deposit the growing
    array of Docker images. Primarily, a Docker Hub is specially made to centralize
    and centrally manage information on:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html“第4章。发布图像”)，*发布图像*中，我们讨论了Docker图像，并清楚地了解到Docker容器是Docker图像的运行时实现。如今，Docker图像和容器数量众多，因为容器化范式已经席卷了IT领域。因此，全球企业有必要将他们的Docker图像保存在自己的私有基础设施中以考虑安全性。因此，部署Docker
    Hub到我们自己的基础设施的概念已经出现并发展。 Docker Hub对于注册和存储不断增长的Docker图像至关重要和相关。主要，Docker Hub专门用于集中和集中管理以下信息：
- en: User accounts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户帐户
- en: Checksums of the images
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像的校验和
- en: Public namespaces
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共命名空间
- en: 'This chapter is developed with an a focus on providing all the relevant information
    to enable you and Docker container crafters to design, populate, and run their
    own private Docker Hubs in their own backyards. This chapter covers the following
    important topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了为您和Docker容器开发者提供所有相关信息，以便在自己的后院设计、填充和运行自己的私有Docker Hub。本章涵盖了以下重要主题：
- en: The Docker registry and index
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker注册表和索引
- en: Docker registry use cases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker注册表的用例
- en: Run your own index and registry
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行您自己的索引和注册表
- en: Push the image to a newly created registry
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将镜像推送到新创建的注册表
- en: The Docker registry and index
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker注册表和索引
- en: 'Typically, a Docker Hub consists of a Docker index and registry. Docker clients
    can connect and interact with the Docker Hubs over a network. The registry has
    the following characteristics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Docker Hub由Docker索引和注册表组成。 Docker客户端可以通过网络连接和与Docker Hub交互。注册表具有以下特征：
- en: It stores the images and graphs for a set of repositories
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它存储一组存储库的图像和图形
- en: It does not have user accounts data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有用户帐户数据
- en: It has no notion of user accounts or authorization
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有用户帐户或授权的概念
- en: It delegates the authentication and authorization to the Docker Hub Authentication
    service
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将认证和授权委托给Docker Hub认证服务
- en: It supports different storage backends (S3, cloud files, local filesystem, and
    so on)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持不同的存储后端（S3、云文件、本地文件系统等）
- en: It doesn't have a local database
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有本地数据库
- en: It has a source code associated with it
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有与之关联的源代码
- en: The advanced features of the Docker registry include `bugsnag`, `new relic`,
    and `cors`. The `bugsnag` feature detects and diagnoses crashes in applications,
    `new relic` encapsulates the registry and monitors performance, and `cors` can
    be enabled to share resources outside our own registry domain. It is recommended
    that you deploy the registry to production environments using a proxy, such as
    nginx. You can also run the Docker registry directly on Ubuntu and Red Hat Linux-based
    systems.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker注册表的高级功能包括`bugsnag`、`new relic`和`cors`。`bugsnag`功能可检测和诊断应用程序中的崩溃，`new
    relic`封装了注册表并监视性能，`cors`可以启用以在我们自己的注册表域之外共享资源。建议您使用代理（如nginx）将注册表部署到生产环境。您还可以直接在Ubuntu和基于Red
    Hat Linux的系统上运行Docker注册表。
- en: Currently, the firm in charge of developing the Docker platform has released
    the Docker registry as an open source service on GitHub at [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
    It is important to note that the Docker index is only a recommendation and nothing
    has been released by Docker as an open source project at the time of writing this
    book. In this chapter, we will start with a use case of the Docker registry, and
    then start with the actual deployment of the index elements and the Docker registry
    from GitHub.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，负责开发Docker平台的公司已在GitHub上发布了Docker注册表作为开源服务[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)。值得注意的是，Docker索引只是一个建议，在撰写本书时，Docker尚未发布任何开源项目。在本章中，我们将从Docker注册表的用例开始，然后从GitHub开始实际部署索引元素和Docker注册表。
- en: Docker registry use cases
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker注册表用例
- en: 'The following are the use cases of the Docker registry:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Docker注册表的用例：
- en: Pull or download an image
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取或下载图像
- en: Push an image
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送图像
- en: Delete an image
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除图像
- en: 'We will now go through each of these use cases in detail:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将详细介绍每个用例：
- en: '**Pull or download an image**: The user requests an image using the Docker
    client from the index, the index, in turn responds back to the user with the registry
    details. Then, the Docker client will directly request the registry to get the
    required image. The registry authenticates the user with an index internally.
    As shown in the following diagram, image pulling is accomplished with the collaboration
    of the client, index, and registry modules:![Docker registry use cases](graphics/7937OT_05_01.jpg)'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**拉取或下载图像**：用户使用Docker客户端从索引请求图像，索引反过来向用户返回注册表详细信息。然后，Docker客户端将直接请求注册表以获取所需的图像。注册表在内部使用索引对用户进行身份验证。如下图所示，图像拉取是通过客户端、索引和注册表模块的协作完成的：![Docker注册表用例](graphics/7937OT_05_01.jpg)'
- en: '**Push an image**: A user requests to push the image, gets the registry information
    from the index, and then pushes the image directly to the registry. The registry
    authenticates the user with the index and, finally, responds to the user. The
    control flow is illustrated in the following diagram:![Docker registry use cases](graphics/7937OT_05_02.jpg)'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**推送图像**：用户请求推送图像，从索引获取注册表信息，然后直接将图像推送到注册表。注册表使用索引对用户进行身份验证，最后回应用户。控制流程如下图所示：![Docker注册表用例](graphics/7937OT_05_02.jpg)'
- en: '**Delete an image**: The user can also request to delete an image from the
    repository.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**删除图像**：用户还可以请求从存储库中删除图像。'
- en: The user has the option to use the registry with or without the index. Use of
    the registry, without the index, is best suited for storing private images.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以选择使用带有或不带有索引的注册表。在不带有索引的情况下使用注册表最适合存储私人图像。
- en: Run your own index and registry
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行自己的索引和注册表
- en: 'In this section, we will perform the following steps to run our own index and
    registry, and finally, push the image:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将执行以下步骤来运行自己的索引和注册表，并最终推送图像：
- en: Deployment of the index components and the registry from GitHub.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub部署索引组件和注册表。
- en: Configuration of nginx with the Docker Registry.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置nginx与Docker注册表。
- en: Set up SSL on the web server for secure communication.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web服务器上设置SSL以进行安全通信。
- en: Step 1 – Deployment of the index components and the registry from GitHub
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步-从GitHub部署索引组件和注册表
- en: The index components include `apache-utils` and `ngnix` for password authentication
    and the SSL feature for HTTPS support. The user must note that the current version
    of the Docker registry supports only HTTP to connect to the registry. So, it is
    mandatory for the user to deploy and use **Secure Sockets Layer** (**SSL**) to
    secure the data. SSL creates an encrypted connection between a web server and
    the client's web browser that allows private data to be transmitted without the
    issues of eavesdropping, data tampering, or message forgery. This is a proven
    way of securing the data using SSL certificates that is widely accepted.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 索引组件包括`apache-utils`和`ngnix`，用于密码验证和HTTPS支持的SSL功能。用户必须注意，Docker注册表的当前版本仅支持使用HTTP连接到注册表。因此，用户必须部署和使用**安全套接字层**（**SSL**）来保护数据。
    SSL在Web服务器和客户端的Web浏览器之间创建了加密连接，允许私人数据在没有窃听、数据篡改或消息伪造问题的情况下传输。这是使用广泛接受的SSL证书来保护数据的一种经过验证的方法。
- en: 'The Docker registry is a Python application, and we can install Python on the
    local Ubuntu machine from [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry),
    using the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Docker注册表是一个Python应用程序，我们可以使用以下命令从[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)在本地Ubuntu机器上安装Python：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, install the Docker registry:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装Docker注册表：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will update the Docker registry in the Python package and update the configuration
    file in the following path:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新Python软件包中的Docker注册表，并更新以下路径中的配置文件：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Copy the `config_sample.yml` file to `config.yml`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将`config_sample.yml`文件复制到`config.yml`：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Docker, by default, saves its data in the `/tmp` directory, which can create
    problems because the `/tmp` folder is cleared on reboot on many Linux systems.
    Let''s create a permanent folder to store our data:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker将其数据保存在`/tmp`目录中，这可能会导致问题，因为在许多Linux系统上，`/tmp`文件夹在重新启动时会被清除。让我们创建一个永久文件夹来存储我们的数据：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s update our preceding `config.yml` file for this updated path for the
    following two locations. The updated code for the first location will look like
    this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们之前的`config.yml`文件，以适应以下两个位置的更新路径。第一个位置的更新代码如下：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is the code for the second location:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第二个位置的代码：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The other default configuration of the `config.yml` file works fine.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`config.yml`文件的其他默认配置正常工作。'
- en: 'Now, let''s start the Docker registry using `gunicorn`. Gunicorn, also known
    as Green Unicorn, is a Python **Web Server Gateway Interface** (**WSGI**) HTTP
    server for Linux systems:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`gunicorn`启动Docker注册表。 Gunicorn，也称为Green Unicorn，是Linux系统的Python **Web服务器网关接口**（**WSGI**）HTTP服务器：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, the Docker registry is up and running as a process on the user's local
    machine.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Docker注册表作为用户本地机器上的一个进程正在运行。
- en: We can stop this process using *Ctrl* + *C*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用*Ctrl* + *C*来停止这个进程。
- en: 'We can start a Linux service as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式启动Linux服务：
- en: 'Make a directory for the `docker-registry` tool:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`docker-registry`工具创建一个目录：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create and update the file for the Docker registry configuration:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并更新Docker注册表配置文件：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Update the following content in the file:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新文件中的以下内容：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After saving the file, run the Docker registry service:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，运行Docker注册表服务：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now secure this registry using `apache-utils`, by enabling the password protected
    feature, as shown here:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`apache-utils`来保护此注册表，启用密码保护功能，如下所示：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The user creates a login ID and password to access the Docker registry:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户创建登录ID和密码来访问Docker注册表：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Enter the new password when prompted. At this point, we have the login ID and
    password to access the Docker registry.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时输入新密码。此时，我们有登录ID和密码来访问Docker注册表。
- en: Step 2 – Configuration of nginx with the Docker registry
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步 - 配置nginx与Docker注册表
- en: Next, we need to tell nginx to use that authentication file (created in step
    6 and step 7 of the previous section) to forward requests to our Docker registry.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要告诉nginx使用该认证文件（在上一节的第6步和第7步中创建）来转发请求到我们的Docker注册表。
- en: 'We need to create the nginx configuration file. To do this, we need to follow
    these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建nginx配置文件。为此，我们需要按照以下步骤进行：
- en: 'We create the ngnix configuration file by running the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令创建ngnix配置文件：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Update the file with the following content:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容更新文件：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Make the soft link and restart the ngnix service:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建软链接并重新启动ngnix服务：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s check whether everything works fine. Run the following command, and
    we should get this output:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查一切是否正常工作。运行以下命令，我们应该得到这个输出：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Great! So now we have the Docker registry running. Now, we have to check whether
    nginx worked as we expected it to. To do this, run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在我们的Docker注册表正在运行。现在，我们必须检查nginx是否按我们的预期工作。要做到这一点，请运行以下命令：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This time, we will get an unauthorized message:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们会收到一个未经授权的消息：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s log in using the password created earlier:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前创建的密码登录：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This confirms that your Docker registry is password protected.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这证实了您的Docker注册表受到密码保护。
- en: Step 3 – Set up SSL on the web server for secure communication
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步 - 在Web服务器上设置SSL以进行安全通信
- en: 'This is the final step to set up SSL on a local machine, which hosts the web
    server for the encryption of data. We create the following file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在本地机器上设置SSL的最后一步，该机器托管了用于加密数据的Web服务器。我们创建以下文件：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Update the file with the following content:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '使用以下内容更新文件： '
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that my Ubuntu machine is available on the Internet with the name `mydomain.com`
    and SSL is set up with the path for a certificate and key.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我的Ubuntu机器可以在Internet上使用名称“mydomain.com”，并且SSL已设置为证书和密钥的路径。
- en: 'Let''s sign the certificate as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式签署证书：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The root key is generated using `openssl`, using the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令生成根密钥：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we have the root key, let''s generate a root certificate (enter whatever
    you''d like to at the Command Prompt):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了根密钥，让我们生成一个根证书（在命令提示符处输入任何你想要的）：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, generate a key for our server:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为我们的服务器生成一个密钥：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, we have to make a certificate signing request. Once we run the signing
    command, ensure that `Common Name` is our server name. This is mandatory and any
    deviation will result in an error:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须创建一个证书签名请求。一旦我们运行签名命令，请确保“通用名称”是我们的服务器名称。这是强制性的，任何偏差都会导致错误：
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, `Common Name` looks like `mydomain.com`. This is an Ubuntu VM running
    on AWS.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，“通用名称”看起来像“mydomain.com”。这是在AWS上运行的Ubuntu VM。
- en: 'The output of the preceding command is shown as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `challenge password` input is kept blank, and the user is also free to
    populate this. Then, we need to sign the certificate request, by running the following
    command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “挑战密码”输入为空，并且用户也可以自由填写。然后，我们需要通过运行以下命令签署证书请求：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now that we've generated all the files we need for our certificate to work,
    we need to copy these files to the correct places.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了证书所需的所有文件，我们需要将这些文件复制到正确的位置。
- en: 'First, copy the certificate and key to the paths where nginx is expecting them
    to be:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将证书和密钥复制到nginx期望它们在的路径：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Note that we have created self-signed certificates, and they are signed by
    any known certificate authority, so we need to inform the registry that this is
    a legitimate certificate:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经创建了自签名证书，并且它们是由任何已知的证书颁发机构签名的，因此我们需要通知注册表这是一个合法的证书：
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s restart nginx to reload the configuration and SSL keys:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新启动nginx以重新加载配置和SSL密钥：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, we will test the SSL certificate to check whether it works fine. Since
    `mydomain.com` is not an Internet address, add the entry in `/etc/hosts` file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将测试SSL证书，以检查它是否正常工作。由于`mydomain.com`不是互联网地址，请在`/etc/hosts`文件中添加条目：
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now run the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE34]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'So if all went well, you should see something like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果一切顺利，您应该会看到类似于这样的内容：
- en: '[PRE35]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Push the image to the newly created Docker registry
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像推送到新创建的Docker注册表
- en: 'Finally, push the image to the Docker registry. So, let''s create an image
    on the local Ubuntu machine:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将图像推送到Docker注册表。因此，让我们在本地Ubuntu机器上创建一个图像：
- en: '[PRE36]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s log in to the Docker registry created locally on the Ubuntu machine:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们登录到在Ubuntu机器上本地创建的Docker注册表：
- en: '[PRE37]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Tag the image before pushing it to the registry:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在将图像推送到注册表之前对其进行标记：
- en: '[PRE38]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Finally, use the `push` command to upload the image:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`push`命令上传图像：
- en: '[PRE39]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, remove the image from the local disk and `pull` it from the Docker registry:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从本地磁盘中删除图像，并从Docker注册表中`pull`它：
- en: '[PRE40]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The Docker engine allows every value-adding software solution to be containerized,
    indexed, registered, and stocked. Docker is turning out to be a great tool for
    systematically developing, shipping, deploying, and running containers everywhere.
    While `docker.io` lets you upload your Docker creations to their registry for
    free, anything you upload there is publicly discoverable and accessible. Innovators
    and companies aren't keen on this and therefore, insist on for private Docker
    Hubs. In this chapter, we explained all the steps, syntaxes, and semantics for
    you in an easy-to-understand manner. We saw how to retrieve images to generate
    Docker containers and described how to push our images to the Docker registry
    in a secure manner in order to be found and used by authenticated developers.
    The authentication and authorization mechanisms, a major part of the whole process,
    have been explained in detail. Precisely speaking, this chapter is conceived and
    concretized as a guide for setting up your own Docker Hubs. As world organizations
    are showing exemplary interest in having containerized clouds, private container
    hubs are becoming more essential.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Docker引擎允许每个增值软件解决方案被容器化、索引化、注册化和存储化。Docker正在成为一个系统化开发、发布、部署和在各处运行容器的强大工具。虽然`docker.io`允许您免费将Docker创建上传到他们的注册表，但您在那里上传的任何内容都是公开可发现和可访问的。创新者和公司对此并不感兴趣，因此坚持使用私人Docker
    Hub。在本章中，我们以易于理解的方式为您解释了所有步骤、语法和语义。我们看到了如何检索图像以生成Docker容器，并描述了如何以安全的方式将我们的图像推送到Docker注册表，以便经过身份验证的开发人员找到并使用。认证和授权机制作为整个过程的重要部分，已经被详细解释。确切地说，本章被构想和具体化为设置自己的Docker
    Hub的指南。随着世界组织对容器化云表现出示范性兴趣，私人容器中心变得更加重要。
- en: In the next chapter, we will dive deep into containers, which is the natural
    progression from images. We will demonstrate the capability to run services, such
    as a web server in a Docker container, and its interaction with the host machine
    and the outside world.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨容器，这是从图像自然而然的发展。我们将演示在Docker容器中运行服务的能力，比如Web服务器，并展示它与主机和外部世界的交互。
