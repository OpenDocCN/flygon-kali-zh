- en: Chapter 6. Prototype
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。原型
- en: In this chapter, you'll learn about the prototype property of the function objects.
    Understanding how the prototype works is an important part of learning the JavaScript
    language. After all, JavaScript is often classified as having a prototype-based
    object model. There's nothing particularly difficult about the prototype, but
    it's a new concept, and as such, may sometimes take a bit of time to sink in.
    Like closures (see [Chapter 3](ch03.html "Chapter 3. Functions"), *Functions*),
    the prototype is one of those things in JavaScript which, once you get, seem so
    obvious and make perfect sense. As with the rest of this book, you're strongly
    encouraged to type in and play around with the examples - this makes it much easier
    to learn and remember the concepts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习函数对象的`prototype`属性。理解`prototype`的工作原理是学习JavaScript语言的重要部分。毕竟，JavaScript经常被归类为具有基于原型的对象模型。原型并不特别困难，但它是一个新概念，因此有时可能需要一点时间才能理解。就像闭包（见[第3章](ch03.html
    "第3章。函数")，“函数”）一样，原型是JavaScript中的一些东西，一旦理解，就会显得如此明显并且合乎逻辑。与本书的其余部分一样，强烈建议您输入并尝试这些示例-这样学习和记忆概念会更容易。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Every function has a `prototype` property and it contains an object
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个函数都有一个`prototype`属性，它包含一个对象
- en: Adding properties to the prototype object
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向原型对象添加属性
- en: Using the properties added to the prototype
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用添加到原型的属性
- en: The difference between own properties and properties of the prototype
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自有属性和原型属性之间的区别
- en: The `__proto__` property, the secret link every object keeps to its prototype
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__proto__`属性，每个对象都保留着与其原型的秘密链接'
- en: Methods such as `isPrototypeOf()`, `hasOwnProperty()`, and `propertyIsEnumerable()`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如`isPrototypeOf()`、`hasOwnProperty()`和`propertyIsEnumerable()`之类的方法
- en: Enhancing built-in objects, such as arrays or strings, and why that can be a
    bad idea
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强内置对象，例如数组或字符串，以及为什么这可能是一个坏主意
- en: The prototype property
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型属性
- en: The functions in JavaScript are objects, and they contain methods and properties.
    Some of the methods that you're already familiar with are `apply()` and `call()`,
    and some of the other properties are `length` and `constructor`. Another property
    of the function objects is `prototype`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的函数是对象，它们包含方法和属性。您已经熟悉的一些方法是`apply()`和`call()`，其他一些属性是`length`和`constructor`。函数对象的另一个属性是`prototype`。
- en: 'If you define a simple function, `foo()`, you can access its properties as
    you would do with any other object. Consider the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您定义一个简单的函数`foo()`，您可以像处理其他对象一样访问它的属性。考虑以下代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `prototype` property is a property that is available to you as soon as
    you define the function. Its initial value is an empty object:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`prototype`属性是在定义函数时立即可用的属性。它的初始值是一个空对象：'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It''s as if you have added this property yourself, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就好像您自己添加了这个属性一样，如下所示：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can augment this empty object with properties and methods. They won't have
    any effect on the `foo()` function itself; they'll only be used if you call `foo()`
    as a constructor.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以用属性和方法增强这个空对象。它们不会对`foo()`函数本身产生任何影响；它们只会在您将`foo()`作为构造函数调用时使用。
- en: Adding methods and properties using the prototype
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用原型添加方法和属性
- en: In the previous chapter, you learned how to define constructor functions that
    you can use to create (construct) new objects. The main idea is that, inside a
    function invoked with `new`, you will have access to the `this` value, which refers
    to the object to be returned by the constructor. Augmenting, which is adding methods
    and properties to `this`, is how you can add functionality to the object being
    constructed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何定义构造函数，以便用于创建（构造）新对象。主要思想是，在使用`new`调用的函数内部，您将可以访问`this`值，它指的是构造函数返回的对象。增强，即向`this`添加方法和属性，是您可以向正在构造的对象添加功能的方法。
- en: 'Let''s take a look at the constructor function, `Gadget()`, which uses `this`
    to add two properties and one method to the objects it creates, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看构造函数`Gadget()`，它使用`this`向创建的对象添加了两个属性和一个方法，如下所示：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Adding methods and properties to the `prototype` property of the constructor
    function is another way to add functionality to the objects this constructor produces.
    Let''s add two more properties, `price` and `rating`, as well as a `getInfo()`
    method. As `prototype` already points to an object, you can just keep adding properties
    and methods to it, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 向构造函数的`prototype`属性添加方法和属性是另一种为该构造函数产生的对象添加功能的方法。让我们添加两个属性`price`和`rating`，以及一个`getInfo()`方法。由于`prototype`已经指向一个对象，您可以继续向其添加属性和方法，如下所示：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, instead of adding properties to the `prototype` object one by
    one, you can overwrite the `prototype` completely, replacing it with an object
    of your choice, as shown in the following example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以完全覆盖`prototype`对象，用您选择的对象替换它，如下例所示：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the prototype's methods and properties
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原型的方法和属性
- en: 'All the methods and properties you have added to the `prototype` are available
    as soon as you create a new object using the constructor. If you create a `newtoy`
    object using the `Gadget()` constructor, you can access all the methods and properties
    that are already defined, as you can see in the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您添加到`prototype`的所有方法和属性在使用构造函数创建新对象时立即可用。如果您使用`Gadget()`构造函数创建一个`newtoy`对象，您可以访问已经定义的所有方法和属性，如下所示：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's important to note that the `prototype` is live. Objects are passed by reference
    in JavaScript, and therefore, the `prototype` is not copied with every new object
    instance. What does this mean in practice? It means that you can modify the `prototype`
    at any time, and all the objects, even those created before the modification,
    will see the changes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意`prototype`是活动的。在JavaScript中，对象是按引用传递的，因此`prototype`不会随着每个新对象实例的创建而复制。这在实践中意味着什么？这意味着你可以随时修改`prototype`，所有的对象，甚至是在修改之前创建的对象，都会看到这些变化。
- en: 'Let''s continue the example by adding a new method to the `prototype`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向`prototype`添加一个新方法来继续示例：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Even though the `newtoy` object was created before the `get()` method was defined,
    the `newtoy` object still has access to the new method, which is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`newtoy`对象在`get()`方法定义之前创建，`newtoy`对象仍然可以访问新方法，如下所示：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Own properties versus prototype properties
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自有属性与原型属性
- en: 'In the preceding example, `getInfo()` was used internally to access the properties
    of the object. It could''ve also used `Gadget.prototype` to achieve the same output,
    as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`getInfo()`被内部使用来访问对象的属性。它也可以使用`Gadget.prototype`来实现相同的输出，如下所示：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What's the difference? To answer this question, let's examine in detail how
    the `prototype` works.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么区别？为了回答这个问题，让我们详细研究一下`prototype`的工作原理。
- en: 'Let''s take the `newtoy` object again:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次看看`newtoy`对象：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When you try to access a property of `newtoy`, say, `newtoy.name`, the JavaScript
    engine looks through all of the properties of the object searching for one called
    `name`, and if it finds it, it returns its value, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试访问`newtoy`的属性，比如`newtoy.name`，JavaScript引擎会查找对象的所有属性，寻找名为`name`的属性，如果找到，就返回它的值，如下所示：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'What if you try to access the `rating` property? The JavaScript engine examines
    all of the properties of the `newtoy` object and doesn''t find the one called
    `rating`. Then, the script engine identifies the `prototype` of the constructor
    function used to create this object (the same as if you do `newtoy.constructor.prototype`).
    If the property is found in the `prototype` object, the following property is
    used:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试访问`rating`属性会发生什么？JavaScript引擎会检查`newtoy`对象的所有属性，没有找到名为`rating`的属性。然后，脚本引擎会识别用于创建此对象的构造函数的`prototype`（与`newtoy.constructor.prototype`相同）。如果在`prototype`对象中找到属性，则使用该属性：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can do the same and access the `prototype` directly. Every object has a
    `constructor` property, which is a reference to the function that created the
    object, so in this case look at the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做同样的事情并直接访问`prototype`。每个对象都有一个`constructor`属性，它是指向创建对象的函数的引用，所以在这种情况下看看下面的代码：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s take this lookup one step further. Every object has a constructor.
    The `prototype` is an object, so it must have a constructor too, which, in turn,
    has a `prototype`. You can go up the prototype chain, and you will eventually
    end up with the built-in `Object()` object, which is the highest-level parent.
    In practice, this means that if you try `newtoy.toString()` and `newtoy` doesn''t
    have its own `toString()` method, and its `prototype` doesn''t either, in the
    end, you''ll get the object''s `toString()` method:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进一步查找。每个对象都有一个构造函数。`prototype`是一个对象，所以它也必须有一个构造函数，而构造函数又有一个`prototype`。你可以沿着原型链向上查找，最终会得到内置的`Object()`对象，它是最高级的父对象。实际上，这意味着如果你尝试`newtoy.toString()`，而`newtoy`没有自己的`toString()`方法，它的`prototype`也没有，最终你会得到对象的`toString()`方法：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Overwriting a prototype's property with an own property
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用自有属性覆盖原型的属性
- en: As the preceding discussion demonstrates, if one of your objects doesn't have
    a certain property of its own, it can use one, if it exists, somewhere up the
    prototype chain. What if the object does have its own property and the prototype
    also has one with the same name? Then, the own property takes precedence over
    the prototype's.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的讨论所示，如果你的对象没有自己的某个属性，它可以使用原型链上的属性。如果对象有自己的属性，原型也有一个同名的属性会发生什么？那么自有属性优先于原型的属性。
- en: 'Consider a scenario where a property name exists as both an own property and
    a property of the `prototype` object:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一个情景，一个属性名称既存在于自有属性中，又存在于`prototype`对象的属性中：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Creating a new object and accessing its `name` property gives you the object''s
    own `name` property, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新对象并访问它的`name`属性会给你对象自己的`name`属性，如下所示：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can tell where the property was defined using `hasOwnProperty()`, which
    is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`hasOwnProperty()`来确定属性的定义位置，如下所示：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you delete the `toy` object''s own `name` property, the prototype''s property
    with the same name shines through:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果删除`toy`对象自有的`name`属性，原型的具有相同名称的属性将显示出来：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Of course, you can always recreate the object''s own property as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你总是可以重新创建对象的自有属性，如下所示：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can play around with the `hasOwnProperty()` method to find out the origins
    of a particular property you're curious about. The `toString()` method was mentioned
    earlier. Where is it coming from?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`hasOwnProperty()`方法来查找你感兴趣的特定属性的来源。前面提到了`toString()`方法。它是从哪里来的？
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Enumerating properties
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举属性
- en: 'If you want to list all the properties of an object, you can use a `for...in`
    loop. In [Chapter 2](ch02.html "Chapter 2. Primitive Data Types, Arrays, Loops,
    and Conditions"), *Primitive Data Types, Arrays, Loops, and Conditions*, you saw
    that you can also loop through all the elements of an array with `for...in`, but
    as mentioned there, `for` is better suited for arrays and `for...in` for objects.
    Let''s take an example of constructing a query string for a URL from an object:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想列出对象的所有属性，可以使用`for...in`循环。在[第2章](ch02.html "第2章。基本数据类型、数组、循环和条件")中，*基本数据类型、数组、循环和条件*，你看到你也可以使用`for...in`循环遍历数组的所有元素，但正如在那里提到的，`for`更适合数组，`for...in`更适合对象。让我们以构造一个查询字符串的URL为例：
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This produces the `url` string as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下`url`字符串：
- en: '`http://example.org/page.php?productid=666&section=products`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://example.org/page.php?productid=666&section=products`。'
- en: 'The following are a few details to be aware of:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要注意的细节：
- en: Not all properties show up in a `for...in` loop. For example, the length (for
    arrays) and constructor properties don't show up. The properties that do show
    up are called enumerable. You can check which ones are enumerable with the help
    of the `propertyIsEnumerable()` method that every object provides. In ES5, you
    can specify which properties are enumerable, while in ES3 you don't have that
    control.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非所有属性都会出现在`for...in`循环中。例如，长度（对于数组）和构造函数属性不会显示出来。能够显示出来的属性被称为可枚举。你可以通过每个对象提供的`propertyIsEnumerable()`方法来检查哪些属性是可枚举的。在ES5中，你可以指定哪些属性是可枚举的，而在ES3中你没有这种控制。
- en: Prototypes that come through the prototype chain also show up, provided they
    are enumerable. You can check whether a property is an object's own property or
    a prototype's property using the `hasOwnProperty()` method.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过原型链传递的原型也会显示出来，只要它们是可枚举的。你可以使用`hasOwnProperty()`方法来检查属性是对象自己的属性还是原型的属性。
- en: The `propertyIsEnumerable()` method returns `false` for all of the prototype's
    properties, even those that are enumerable and show up in the `for...in` loop.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propertyIsEnumerable()`方法对于原型的所有属性都返回`false`，即使它们是可枚举的并出现在`for...in`循环中。'
- en: 'Let''s see these methods in action. Take this simplified version of `Gadget()`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些方法的实际应用。看看这个简化版本的`Gadget()`：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a new object as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新对象如下：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, if you loop using a `for...in` loop, you can see all of the object''s
    properties, including those that come from the prototype:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你使用`for...in`循环进行循环，你可以看到对象的所有属性，包括来自原型的属性：
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result also contains the object''s methods, as methods are just properties
    that happen to be functions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 结果还包括对象的方法，因为方法只是恰好是函数的属性：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you want to distinguish between the object''s own properties and the prototype''s
    properties, use `hasOwnProperty()`. Try the following first:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想区分对象自己的属性和原型的属性，使用`hasOwnProperty()`。首先尝试以下操作：
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s loop again, but this time, showing only the object''s own properties:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次循环，但这次只显示对象自己的属性：
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The result is as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, let''s try `propertyIsEnumerable()`. This method returns `true` for the
    object''s own properties that are not built in, for example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试`propertyIsEnumerable()`。这个方法对于对象自己的非内置属性返回`true`，例如：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Most built-in properties and methods are not enumerable:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数内置属性和方法都不可枚举：
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Any properties coming down the prototype chain are not enumerable:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 原型链中传递下来的任何属性都不可枚举：
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'However, not that such properties are enumerable if you reach the object contained
    in the `prototype` and invoke its `propertyIsEnumerable()` method. Consider the
    following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要注意的是，如果你到达`prototype`中包含的对象并调用它的`propertyIsEnumerable()`方法，这样的属性是可枚举的。考虑以下代码：
- en: '[PRE32]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Using isPrototypeOf() method
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`isPrototypeOf()`方法
- en: Objects also have the `isPrototypeOf()` method. This method tells you whether
    that specific object is used as a prototype of another object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对象也有`isPrototypeOf()`方法。这个方法告诉你特定的对象是否被用作另一个对象的原型。
- en: 'Let''s take a simple object named `monkey`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个名为`monkey`的简单对象：
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, let''s create a `Human()` constructor function and set its `prototype`
    property to point to `monkey`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个`Human()`构造函数，并将其`prototype`属性指向`monkey`：
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, if you create a new `Human` object called `george` and ask If `monkey`
    the prototype of `george`?, you''ll get `true`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你创建一个名为`george`的新`Human`对象，并询问`monkey`是`george`的原型吗？你会得到`true`：
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that you have to know, or suspect, who the prototype is and then ask is
    it true that your prototype is `monkey`? in order to confirm your suspicion. But,
    what if you don't suspect anything, and you have no idea? Can you just ask the
    object to tell you its prototype? The answer is, you can't in all browsers, but
    you can in most of them. Most recent browsers have implemented the addition to
    ES5 called `Object.getPrototypeOf()`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你必须知道或怀疑原型是谁，然后问你的原型是否是`monkey`？以确认你的怀疑。但是，如果你什么都不怀疑，你一无所知呢？你能否询问对象告诉你它的原型？答案是，在大多数浏览器中你不能，但在大多数浏览器中你可以。大多数最新的浏览器已经实现了ES5的一个补充，叫做`Object.getPrototypeOf()`。
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: For some of the pre-ES5 environments that don't have `getPrototypeOf()`, you
    can use the special property, `__proto__`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些没有`getPrototypeOf()`的ES5之前的环境，你可以使用特殊属性`__proto__`。
- en: The secret __proto__ link
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 秘密的`__proto__`链接
- en: As you already know, the `prototype` property is consulted when you try to access
    a property that does not exist in the current object.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的，当你尝试访问当前对象中不存在的属性时，会查找`prototype`属性。
- en: 'Consider another object called `monkey`, and use it as a prototype when creating
    objects with the `Human()` constructor:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑另一个名为`monkey`的对象，并在使用`Human()`构造函数创建对象时将其用作原型：
- en: '[PRE37]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, let''s create a `developer` object, and give it the following properties:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个`developer`对象，并给它以下属性：
- en: '[PRE38]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, let''s access these properties (for example, `hacks` is a property of
    the `developer` object):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们访问这些属性（例如，`hacks`是`developer`对象的一个属性）：
- en: '[PRE39]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `feeds` property can also be found in the object, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`feeds`属性也可以在对象中找到，如下：'
- en: '[PRE40]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `breathes` property doesn''t exist as a property of the `developer` object,
    so the prototype is looked up, as if there is a secret link or passageway that
    leads to the `prototype` object:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`breathes`属性并不存在于`developer`对象的属性中，所以会查找原型，就好像有一个秘密链接或通道通向`prototype`对象：'
- en: '[PRE41]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The secret link is exposed in most modern JavaScript environments as the `__proto__`
    property, the word `proto` with two underscores before and after:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数现代JavaScript环境中，秘密链接被暴露为`__proto__`属性，即`proto`一词前后各有两个下划线：
- en: '[PRE42]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You can use this secret property for learning purposes, but it's not a good
    idea to use it in your real scripts because it does not exist in all browsers
    (notably IE), so your scripts won't be portable.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个秘密属性进行学习，但在你的真实脚本中使用它并不是一个好主意，因为它并不在所有浏览器中都存在（特别是IE），所以你的脚本不具备可移植性。
- en: 'Be aware that `__proto__` is not the same as `prototype`, as `__proto__` is
    a property of the instances (objects), whereas `prototype` is a property of the
    constructor functions used to create those objects:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`__proto__`和`prototype`不同，`__proto__`是实例（对象）的属性，而`prototype`是用于创建这些对象的构造函数的属性：
- en: '[PRE43]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Once again, you should use `__proto__` only for learning or debugging purposes.
    Or, if you're lucky enough and your code only needs to work in ES5-compliant environments,
    you can use `Object.getPrototypeOf()`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，你应该只在学习或调试目的时使用`__proto__`。或者，如果你足够幸运，你的代码只需要在符合ES5的环境中工作，你可以使用`Object.getPrototypeOf()`。
- en: Augmenting built-in objects
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强内置对象
- en: The objects created by the built-in constructor functions, such as `Array`,
    `String`, and even `Object` and `Function`, can be augmented (or enhanced) through
    the use of prototypes. This means that you can, for example, add new methods to
    the `Array` prototype, and in this way you can make them available to all arrays.
    Let's see how to do this.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由内置构造函数创建的对象，如`Array`、`String`，甚至`Object`和`Function`，都可以通过原型进行增强。这意味着你可以向`Array`原型添加新方法，以便让它们对所有数组可用。让我们看看如何做到这一点。
- en: 'In PHP, there is a function called `in_array()`, which tells you whether a
    value exists in an array. In JavaScript, there is no `inArray()` method, although,
    in ES5, there''s `indexOf()`, which you can use for the same purpose. So, let''s
    implement it and add it to `Array.prototype`, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，有一个名为`in_array()`的函数，它告诉你一个值是否存在于数组中。在JavaScript中，没有`inArray()`方法，尽管在ES5中有`indexOf()`，你可以用它来达到相同的目的。因此，让我们实现它并添加到`Array.prototype`中，如下所示：
- en: '[PRE44]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, all arrays have access to the new method. Let''s test the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有数组都可以访问这个新方法。让我们测试以下代码：
- en: '[PRE45]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'That was nice and easy! Let''s do it again. Imagine your application often
    needs to spell words backward, and you feel there should be a built-in `reverse()`
    method for string objects. After all, arrays have `reverse()`. You can easily
    add a `reverse()` method to the `String` prototype by borrowing `Array.prototype.reverse()`
    (there was a similar exercise at the end of [Chapter 4](ch04.html "Chapter 4. Objects"),
    *Objects*):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单！让我们再做一次。想象一下，你的应用程序经常需要将单词倒过来拼写，你觉得字符串对象应该有一个内置的`reverse()`方法。毕竟，数组有`reverse()`。你可以通过借用`Array.prototype.reverse()`来轻松地向`String`原型添加一个`reverse()`方法（在[第4章](ch04.html
    "第4章。对象")的结尾有一个类似的练习，*对象*）：
- en: '[PRE46]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This code uses the `split()` method to create an array from a string, then
    calls the `reverse()` method on this array, which produces a reversed array. The
    resulting array is then turned back into a string using the `join()` method. Let''s
    test the new method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用`split()`方法从字符串创建一个数组，然后在这个数组上调用`reverse()`方法，产生一个反转的数组。然后使用`join()`方法将结果数组转换回字符串。让我们测试一下新方法：
- en: '[PRE47]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Augmenting built-in objects - discussion
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强内置对象 - 讨论
- en: Augmenting built-in objects through the prototype is a powerful technique, and
    you can use it to shape JavaScript in any way you like. Because of its power,
    though, you should always thoroughly consider your options before using this approach.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过原型增强内置对象是一种强大的技术，你可以用它来塑造JavaScript的任何方式。但是，由于它的强大，你在使用这种方法之前应该仔细考虑你的选择。
- en: The reason is that once you know JavaScript, you're expecting it to work the
    same way, no matter which third-party library or widget you're using. Modifying
    core objects can confuse the users and maintainers of your code and create unexpected
    errors.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是一旦你了解了JavaScript，你期望它以相同的方式工作，无论你使用的是哪个第三方库或小部件。修改核心对象可能会让用户和代码维护者感到困惑，并产生意外的错误。
- en: JavaScript evolves and browser's vendors continuously support more features.
    What you consider a missing method today and decide to add to a core prototype
    could be a built-in method tomorrow. In this case, your method is no longer needed.
    Additionally, what if you have already written a lot of code that uses the method
    and your method is slightly different from the new built-in implementation?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript不断发展，浏览器供应商不断支持更多功能。今天你认为缺少的方法并决定添加到核心原型中的方法，明天可能就成为内置方法。在这种情况下，你的方法就不再需要了。此外，如果你已经编写了大量使用该方法的代码，并且你的方法与新的内置实现略有不同，会怎么样呢？
- en: The most common and acceptable use case to augment built-in prototypes is to
    add support for new features (ones that are already standardized by the ECMAScript
    committee and implemented in new browsers) to old browsers. One example will be
    adding an ES5 method to old versions of IE. These extensions are known as **shims**
    or **polyfills**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 增强内置原型的最常见和可接受的用例是为旧浏览器添加对新功能的支持（这些功能已经由ECMAScript委员会标准化并在新浏览器中实现）。一个例子是在旧版本的IE中添加ES5方法。这些扩展被称为**shims**或**polyfills**。
- en: 'When augmenting prototypes, you will first check if the method exists before
    implementing it yourself. This way, you can use the native implementation in the
    browser if one exists. For example, let''s add the `trim()` method for strings,
    which is a method that exists in ES5 but is missing in older browsers:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在增强原型时，你首先要检查方法是否存在，然后再自己实现。这样，如果浏览器中存在原生实现，你就可以使用它。例如，让我们为字符串添加`trim()`方法，这是ES5中存在的方法，但在旧浏览器中缺少：
- en: '[PRE48]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best practice**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**'
- en: If you decide to augment a built-in object, or its prototype with a new property,
    do check for the existence of the new property first.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定增强内置对象或其原型以添加新属性，首先要检查新属性是否存在。
- en: Prototype gotchas
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型陷阱
- en: 'The following are the two important behaviors to consider when dealing with
    prototypes:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 处理原型时需要考虑的两个重要行为是：
- en: The prototype chain is live, except for when you completely replace the `prototype`
    object
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型链是活跃的，除非你完全替换了`prototype`对象
- en: The `prototype.constructor` method is not reliable
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prototype.constructor`方法不可靠'
- en: 'Let''s create a simple constructor function and two objects:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的构造函数和两个对象：
- en: '[PRE49]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Even after you''ve created the `benji` and `rusty` objects, you can still add
    properties to the prototype of `Dog()` and the existing objects will have access
    to the new properties. Let''s throw in the `say()` method:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您已经创建了`benji`和`rusty`对象，您仍然可以向`Dog()`的原型添加属性，现有对象将可以访问新属性。让我们加入`say()`方法：
- en: '[PRE50]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Both objects have access to the new method:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 两个对象都可以访问新方法：
- en: '[PRE51]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Up to this point, if you consult your objects, asking which constructor function
    was used to create them, they''ll report it correctly:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，如果您咨询您的对象，询问它们是使用哪个构造函数创建的，它们将正确报告：
- en: '[PRE52]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, let''s completely overwrite the `prototype` object with a brand new object:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们完全用全新的对象覆盖`prototype`对象：
- en: '[PRE53]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'It turns out that the old objects do not get access to the new prototype''s
    properties; they still keep the secret link pointing to the old prototype object,
    as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，旧对象无法访问新原型的属性；它们仍然保留指向旧原型对象的秘密链接，如下所示：
- en: '[PRE54]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Any new objects that you will create from now on will use the updated prototype,
    which is as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始创建的任何新对象都将使用更新后的原型，如下所示：
- en: '[PRE55]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The secret `__proto__` link points to the new prototype object, as shown in
    the following lines of code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密的`__proto__`链接指向新的原型对象，如下面的代码行所示：
- en: '[PRE56]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now the `constructor` property of the new object no longer reports correctly.
    You will expect it to point to `Dog()`, but instead it points to `Object()`, as
    you can see in the following example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在新对象的`constructor`属性不再正确报告。您期望它指向`Dog()`，但实际上它指向`Object()`，如下例所示：
- en: '[PRE57]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You can easily prevent this confusion by resetting the `constructor` property
    after you overwrite the prototype completely, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全覆盖原型后，您可以通过重置`constructor`属性轻松防止混淆，如下所示：
- en: '[PRE58]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tip
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best practice**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**'
- en: When you overwrite the prototype, remember to reset the `constructor` property.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当您覆盖原型时，请记得重置`constructor`属性。
- en: Exercises
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Lets practice the following exercise:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们练习以下练习：
- en: Create an object called `shape` that has the type `property` and a `getType()`
    method.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`shape`的对象，该对象具有类型`property`和一个`getType()`方法。
- en: Define a `Triangle()` constructor function whose prototype is `shape`. Objects
    created with `Triangle()` should have three own properties-`a`, `b`, and `c`,
    representing the lengths of the sides of a triangle.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`Triangle()`构造函数，其原型是`shape`。使用`Triangle()`创建的对象应该有三个自有属性-`a`，`b`和`c`，表示三角形的边长。
- en: Add a new method to the prototype called `getPerimeter()`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在原型中添加一个名为`getPerimeter()`的新方法。
- en: 'Test your implementation with the following code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码测试您的实现：
- en: '[PRE59]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Loop over `t`, showing only your own properties and methods, none of the prototype's.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环遍历`t`，仅显示您自己的属性和方法，而不是原型的。
- en: 'Make the following code work:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使以下代码工作：
- en: '[PRE60]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Let''s summarize the most important topics you have learned in this chapter:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下您在本章学到的最重要的主题：
- en: All functions have a property called `prototype`. Initially, it contains an
    empty object-an object without any own properties.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有函数都有一个名为`prototype`的属性。最初，它包含一个空对象-一个没有任何自有属性的对象。
- en: You can add properties and methods to the `prototype` object. You can even replace
    it completely with an object of your choice.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以向`prototype`对象添加属性和方法。您甚至可以完全替换它为您选择的对象。
- en: When you create an object using a function as a constructor (with `new`), the
    object gets a secret link pointing to the prototype of the constructor and can
    access the prototype's properties.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您使用函数作为构造函数创建对象（使用`new`）时，对象会得到一个指向构造函数原型的秘密链接，并且可以访问原型的属性。
- en: An object's own properties take precedence over a prototype's properties with
    the same name.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的自有属性优先于具有相同名称的原型属性。
- en: Use the `hasOwnProperty()` method to differentiate between an object's own properties
    and `prototype` properties.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`hasOwnProperty()`方法区分对象的自有属性和`prototype`属性。
- en: There is a prototype chain. When you execute `foo.bar`, and if your `foo` object
    doesn't have a property called `bar`, the JavaScript interpreter looks for a `bar`
    property in the prototype. If none is found, it keeps searching in the prototype's
    prototype, then the prototype of the prototype's prototype, and it will keep going
    all the way up to `Object.prototype`.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在原型链。当您执行`foo.bar`时，如果您的`foo`对象没有名为`bar`的属性，JavaScript解释器将在原型中查找`bar`属性。如果找不到，则会继续在原型的原型中查找，然后在原型的原型的原型中查找，一直到`Object.prototype`。
- en: You can augment the prototypes of built-in constructor functions, and all objects
    will see your additions. Assign a function to `Array.prototype.flip` and all arrays
    will immediately get a `flip()` method, as in `[1,2,3].flip()`. But, do check
    whether the method/property you want to add already exists, so you can future-proof
    your scripts.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以增强内置构造函数的原型，并且所有对象都将看到您的添加。将一个函数分配给`Array.prototype.flip`，所有数组将立即获得一个`flip()`方法，就像`[1,2,3].flip()`一样。但是，请检查您要添加的方法/属性是否已经存在，以便为您的脚本未来保值。
