- en: Chapter 4. Client/Server Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 客户端/服务器开发
- en: In this chapter, we will explore the process of developing a client/server application
    that is primarily oriented around HTTP. This is an important protocol, and it
    serves as the primary communication medium for a multitude of applications. We
    will examine the protocol, the requirements placed on a client, and the requirements
    placed on a server for various versions of the protocol.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨开发以HTTP为主要方向的客户端/服务器应用程序的过程。这是一个重要的协议，它是多种应用程序的主要通信媒介。我们将研究协议、客户端的要求以及不同版本协议对服务器的要求。
- en: 'Specifically, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将：
- en: Examine the nature of the HTTP protocol
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查HTTP协议的性质
- en: Demonstrate how low-level sockets can support the protocol
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示低级套接字如何支持协议
- en: Use the `HttpURLConnect` and `HTTPServer` classes to create an HTTP server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`HttpURLConnect`和`HTTPServer`类创建HTTP服务器
- en: Examine various open source Java HTTP servers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究各种开源Java HTTP服务器
- en: Investigate various configuration issues and how cookies are handled
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查各种配置问题以及如何处理cookie
- en: HTTP servers are used extensively, so a good understanding of how Java supports
    them is important.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP服务器被广泛使用，因此了解Java如何支持它们非常重要。
- en: The HTTP protocol structure
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP协议结构
- en: HTTP is a network protocol that is used to deliver resources across the **World
    Wide Web** (**WWW**). Resources are usually **HyperText Markup Language** (**HTML**)
    files, but they also include a number of other file types, such as images, audio,
    and video. Users often enter a URL into a browser to obtain a resource. The term
    **URL** stands for **Uniform Resource Locator** with the emphasis here on resource.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是一种网络协议，用于在**万维网**（**WWW**）上传递资源。资源通常是**超文本标记语言**（**HTML**）文件，但也包括许多其他文件类型，如图像、音频和视频。用户通常在浏览器中输入URL以获取资源。**URL**一词代表**统一资源定位符**，这里强调的是资源。
- en: Most people use a browser to communicate across WWW. The browser represents
    a client application, while the web server responds to client requests. The default
    port used by these servers is port `80`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人使用浏览器在WWW上进行通信。浏览器代表客户端应用程序，而Web服务器响应客户端请求。这些服务器使用的默认端口是`80`。
- en: '![The HTTP protocol structure](img/B04915_04_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP协议结构](img/B04915_04_01.jpg)'
- en: HTTP has evolved over the years. HTTP/1.0 originated in the 1980s and 1990s
    with the first documentation released in 1991\. The latest definition of HTTP/1.1
    was released as a six-part specification in June 2014\. A **Request For Comments**
    (**RFC**) for HTTP 2.0 was released in May 2015\. HTTP is an evolving standard.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP经过多年的发展。HTTP/1.0起源于20世纪80年代和90年代，首次文档于1991年发布。HTTP/1.1的最新定义是2014年6月发布的六部分规范。HTTP
    2.0的**请求评论**（**RFC**）于2015年5月发布。HTTP是一个不断发展的标准。
- en: 'The following links may prove useful for the `interested` reader:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接可能对**感兴趣的**读者有用：
- en: '| Version | Reference |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 参考 |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| HTTP 1.0 | [http://www.w3.org/Protocols/HTTP/1.0/spec.html](http://www.w3.org/Protocols/HTTP/1.0/spec.html)
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| HTTP 1.0 | [http://www.w3.org/Protocols/HTTP/1.0/spec.html](http://www.w3.org/Protocols/HTTP/1.0/spec.html)
    |'
- en: '| HTTP/1.1 | [http://tools.ietf.org/html/rfc2616](http://tools.ietf.org/html/rfc2616)
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| HTTP/1.1 | [http://tools.ietf.org/html/rfc2616](http://tools.ietf.org/html/rfc2616)
    |'
- en: '| HTTP/2 | [https://en.wikipedia.org/wiki/HTTP/2](https://en.wikipedia.org/wiki/HTTP/2)
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| HTTP/2 | [https://en.wikipedia.org/wiki/HTTP/2](https://en.wikipedia.org/wiki/HTTP/2)
    |'
- en: HTTP servers are used in a variety of situations. The most common use is within
    organizations to support the dissemination of information to users. Often this
    is supported by production-quality servers, such as those provided by the Apache
    Software Foundation ([http://www.apache.org/foundation/](http://www.apache.org/foundation/)),
    or Gemini ([http://www.eclipse.org/gemini/](http://www.eclipse.org/gemini/)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP服务器在各种情况下被使用。最常见的用途是在组织内支持向用户传播信息。通常这是由生产质量的服务器支持的，比如由Apache软件基金会提供的服务器（[http://www.apache.org/foundation/](http://www.apache.org/foundation/)）或Gemini（[http://www.eclipse.org/gemini/](http://www.eclipse.org/gemini/)）。
- en: However, not all servers need to support the level of service typified by production
    servers. They can be quite small and even embedded in remote devices where they
    may affect a change in a device instead of only supplying information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有服务器都需要支持生产服务器所具有的服务水平。它们可以非常小，甚至嵌入在远程设备中，可能会影响设备的变化，而不仅仅是提供信息。
- en: 'This chapter will examine the various network technologies that are supported
    by Java to address these types of concerns. These include the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将研究Java支持的各种网络技术，以解决这些问题。这些技术包括以下内容：
- en: An overview of HTTP protocol syntax
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP协议语法概述
- en: Low-level socket support for clients/servers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端/服务器的低级套接字支持
- en: Using the `URLConnection` class
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`URLConnection`类
- en: Using the `HTTPServer` class
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`HTTPServer`类
- en: An overview of open source Java servers
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源Java服务器概述
- en: HTTP is a complex topic, and we are only able to skim its surface.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP是一个复杂的主题，我们只能浅尝辄止。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Robots**, often called **spiders**, are applications that automatically follow
    links, frequently to collect web pages for use by search engines. If you desire
    to develop such an application, research their use and how they are built ([http://www.robotstxt.org/](http://www.robotstxt.org/)).
    These types of applications can be disruptive if not designed carefully.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器人**，通常称为**蜘蛛**，是自动跟踪链接的应用程序，经常用于收集供搜索引擎使用的网页。如果您希望开发这样的应用程序，请研究它们的使用和构建方式（[http://www.robotstxt.org/](http://www.robotstxt.org/)）。如果设计不慎，这些类型的应用程序可能会带来破坏性。'
- en: The nature of HTTP messages
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP消息的性质
- en: 'Let''s examine the format of an HTTP message. Messages are either a request
    message sent from a client to a server, or a response message sent from a server
    to a client. Based on an understanding of the format, we will show you how Java
    supports these messages. HTTP messages are, for the most part, readable by humans.
    Both the request and response messages use this structure:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查HTTP消息的格式。消息可以是从客户端发送到服务器的请求消息，也可以是从服务器发送到客户端的响应消息。基于对格式的理解，我们将向您展示Java如何支持这些消息。HTTP消息在很大程度上可供人类阅读。请求和响应消息都使用这种结构：
- en: A line indicating the type of message
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示消息类型的行
- en: Zero or more header lines
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零个或多个头部行
- en: A blank line
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空行
- en: An optional message body containing data
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含数据的可选消息正文
- en: 'The following is an example of an HTTP request:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTTP请求的示例：
- en: '**GET /index HTTP/1.0**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**GET /index HTTP/1.0**'
- en: '**User-Agent: Mozilla/5.0**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**User-Agent: Mozilla/5.0**'
- en: A client request message consists of an initial request line and zero or more
    header lines. A response message consists of an initial response line (called
    the **status line**), zero or more header lines, and an optional message body.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端请求消息由初始请求行和零个或多个头部行组成。响应消息由初始响应行（称为**状态行**）、零个或多个头部行和可选消息正文组成。
- en: Let's examine these elements in more detail.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地检查这些元素。
- en: Initial request line format
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始请求行格式
- en: 'The formats of the request and response initial lines differ. The request line
    consists of three parts separated by spaces:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请求和响应初始行的格式不同。请求行由三部分组成，用空格分隔：
- en: Request method name
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求方法名称
- en: Local path of the resource
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源的本地路径
- en: The HTTP version
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP版本
- en: The method names refer to the action requested by the client. The most common
    method used is the **GET** method, which simply requests that a specific resource
    be returned. The **POST** command is also common and is used to insert and update
    data. A list of HTTP/1.0 methods names is found at [http://www.w3.org/Protocols/HTTP/1.0/spec.html#Methods](http://www.w3.org/Protocols/HTTP/1.0/spec.html#Methods).
    HTTP/1.1 method names can be found at [http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html).
    Method names are always written in uppercase.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 方法名称指的是客户端请求的操作。最常用的方法是**GET**方法，它只是请求返回特定的资源。**POST**命令也很常见，用于插入和更新数据。HTTP/1.0方法名称列表可在[http://www.w3.org/Protocols/HTTP/1.0/spec.html#Methods](http://www.w3.org/Protocols/HTTP/1.0/spec.html#Methods)找到。HTTP/1.1方法名称可在[http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)找到。方法名称始终以大写字母书写。
- en: 'The local path typically references the resource desired. It follows the hostname
    in the URL request. For example, in the following URL, the local path is **/books/info/packt/faq/index.html**:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本地路径通常指的是所需的资源。它遵循URL请求中的主机名。例如，在以下URL中，本地路径是**/books/info/packt/faq/index.html**：
- en: '**www.packtpub.com/books/info/packt/faq/index.html**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.packtpub.com/books/info/packt/faq/index.html**'
- en: 'The HTTP version is always in uppercase and consists of the acronym, HTTP,
    followed by a forward slash, and then the version number:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP版本始终大写，由首字母缩写HTTP，后跟斜杠，然后是版本号：
- en: '**HTTP/x.x**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP/x.x**'
- en: 'The following is an example of a request initial line:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是请求初始行的示例：
- en: '**GET /index HTTP/1.0**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**GET /index HTTP/1.0**'
- en: 'The response initial line consists of three parts separated by spaces, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 响应初始行由三部分组成，用空格分隔，如下所示：
- en: The HTTP version
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP版本
- en: A response status code
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应状态码
- en: A response phrase describing the code
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述代码的响应短语
- en: The following line is an example of a response initial line. The response code
    reflects the status of the result and is easily interpreted by a computer. The
    reason phrase is meant to be human readable.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行是响应初始行的示例。响应代码反映了结果的状态，并且计算机可以轻松解释。原因短语是为了人类可读。
- en: '**HTTP/1.0 404 Not Found**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP/1.0 404 未找到**'
- en: The HTTP version uses the same format that is used for the request line.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP版本使用与请求行相同的格式。
- en: 'The following table contains a list of more commonly used codes. A complete
    list can be found at [https://en.wikipedia.org/wiki/List_of_HTTP_status_codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含了更常用的代码列表。完整列表可以在[https://en.wikipedia.org/wiki/List_of_HTTP_status_codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)找到：
- en: '| Status code | Standard text | Meaning |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 状态码 | 标准文本 | 含义 |'
- en: '| --- | --- | --- |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `200` | **OK** | This indicates that the request was a success |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `200` | **好的** | 这表示请求成功 |'
- en: '| `301` | **Moved Permanently** | This indicates that the URL has been moved
    permanently and the link should be updated |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `301` | **永久移动** | 这表示URL已永久移动，链接应该更新 |'
- en: '| `302` | **Found** | This indicates that the resource is temporarily located
    somewhere else, but the URL should still be used |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `302` | **找到** | 这表示资源暂时位于其他位置，但仍应使用URL |'
- en: '| `307` | **Temporary Redirect** | This is similar to `302`, but the method
    used should not be changed, which may happen with `302` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `307` | **临时重定向** | 这类似于`302`，但不应更改所使用的方法，这可能会发生在`302`中 |'
- en: '| `308` | **Permanent Redirect** | This is similar to `301`, but the method
    used should not be changed, which may happen with `301` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `308` | **永久重定向** | 这类似于`301`，但不应更改所使用的方法，这可能会发生在`301`中 |'
- en: '| `400` | **Bad Request** | This indicates that request access was incorrect
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `400` | **错误的请求** | 这表示请求访问不正确 |'
- en: '| `401` | **Unauthorized** | This indicates that the resource is restricted
    often because the login attempt failed |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `401` | **未经授权** | 这表示资源受限，通常是因为登录尝试失败 |'
- en: '| `403` | **Forbidden** | This indicates that access to the requested resource
    is forbidden |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `403` | **禁止** | 这表示禁止访问所请求的资源 |'
- en: '| `404` | **Not Found** | This indicates that the resource is no longer available
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `404` | **未找到** | 这表示资源不再可用 |'
- en: '| `500` | **Internal server error** | This reflects some sort of error with
    the server |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `500` | **内部服务器错误** | 这反映了服务器出现了某种错误 |'
- en: '| `502` | **Bad Gateway** | This indicates that the gateway server received
    an invalid response from another server |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `502` | **错误的网关** | 这表示网关服务器从另一个服务器收到了无效的响应 |'
- en: '| `503` | **Service Unavailable** | This indicates that the server is not available
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `503` | **服务不可用** | 这表示服务器不可用 |'
- en: '| `504` | **Gateway Timeout** | This indicates that the gateway server did
    not receive a response from another server in a timely manner |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `504` | **网关超时** | 这表示网关服务器未能及时从另一个服务器接收到响应 |'
- en: 'The status code is a three-digit number. The first digit of this number reflects
    the category of the code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码是一个三位数。这个数字的第一位反映了代码的类别：
- en: '1xx: This represents an informational message'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1xx：这代表了信息性消息
- en: '2xx: This represents a success'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2xx：这代表了成功
- en: '3xx: This redirects the client to another URL'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3xx：这将客户端重定向到另一个URL
- en: '4xx: This represents a client error'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4xx：这代表了客户端错误
- en: '5xx: This represents a server error'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5xx：这代表了服务器错误
- en: Header lines
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 头部行
- en: 'Headers lines provide information regarding the request or response, such as
    the e-mail address of the sender, and an application identifier. The header consists
    of a single line. The format of this line starts with the header identifier, followed
    by a colon, spaces, and then the value assigned to the header. The following header
    illustrates the `User-Agent` header that is used by Firefox 36.0\. This header
    identifies the application as the Firefox browser running on a Windows platform:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 头部行提供有关请求或响应的信息，例如发送者的电子邮件地址和应用程序标识符。头部由一行组成。这行的格式以头部标识符开头，后跟冒号、空格，然后是分配给头部的值。以下头部说明了Firefox
    36.0使用的`User-Agent`头部。这个头部标识了应用程序是运行在Windows平台上的Firefox浏览器：
- en: '**User-Agent: Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**User-Agent: Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0**'
- en: A list of header fields and descriptions is found at [https://en.wikipedia.org/wiki/List_of_HTTP_header_fields](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields).
    A list of agent strings can be found at [http://useragentstring.com/pages/useragentstring.php](http://useragentstring.com/pages/useragentstring.php).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://en.wikipedia.org/wiki/List_of_HTTP_header_fields](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields)找到头部字段和描述的列表。代理字符串的列表可以在[http://useragentstring.com/pages/useragentstring.php](http://useragentstring.com/pages/useragentstring.php)找到。
- en: HTTP 1.0 defines 16 headers ([http://www.w3.org/Protocols/HTTP/1.0/spec.html#HeaderFields](http://www.w3.org/Protocols/HTTP/1.0/spec.html#HeaderFields)),
    while HTTP 1.1 has 47 headers ([http://tools.ietf.org/html/rfc2616#section-14](http://tools.ietf.org/html/rfc2616#section-14)).
    Its `Host` header is required.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 1.0定义了16个头部（[http://www.w3.org/Protocols/HTTP/1.0/spec.html#HeaderFields](http://www.w3.org/Protocols/HTTP/1.0/spec.html#HeaderFields)），而HTTP
    1.1有47个头部（[http://tools.ietf.org/html/rfc2616#section-14](http://tools.ietf.org/html/rfc2616#section-14)）。它的`Host`头部是必需的。
- en: Headers are useful in helping troubleshoot problems when they occur. It is a
    good idea to include the `From` and `User-Agent` headers for requests so that
    the server can be in a better position to respond to the request.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 头部在出现问题时有助于进行故障排除。最好包括请求的`From`和`User-Agent`头部，以便服务器能够更好地响应请求。
- en: Message body
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息正文
- en: This is the data constituting the message. While normally a message body is
    included, it is optional and is not needed for some messages. When a body is included,
    the `Content-Type` and `Content-Length` headers are included to provide more information
    about the body.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构成消息的数据。虽然通常会包括消息正文，但它是可选的，并且对于一些消息是不需要的。当包括正文时，会包括`Content-Type`和`Content-Length`头部，以提供有关正文的更多信息。
- en: 'For example, the following headers can be used for a message body:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下头部可以用于消息正文：
- en: '**Content-type: text/html**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**Content-type: text/html**'
- en: '**Content-length: 105**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Content-length: 105**'
- en: 'The message body may appear as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 消息正文可能如下所示：
- en: '**<html><h1>HTTPServer Home Page.... </h1><br><b>Welcome to the new and improved
    web server!</b><BR></html>**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**<html><h1>HTTPServer主页.... </h1><br><b>欢迎来到新的改进的Web服务器！</b><BR></html>**'
- en: Client/Server interaction example
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端/服务器交互示例
- en: 'The following interaction is a simple demonstration of a client sending a request
    and the server responding. The client request message uses the `GET` method against
    a path of `\index`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下交互是一个简单的示例，展示了客户端发送请求，服务器做出响应。客户端请求消息使用`GET`方法对`\index`路径进行请求：
- en: '**GET /index HTTP/1.0**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**GET /index HTTP/1.0**'
- en: '**User-Agent: Mozilla/5.0**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**User-Agent: Mozilla/5.0**'
- en: 'The server will respond with the following message, assuming that it was able
    to process the request. The `Server`, `Content-Type`, and `Content-Length` headers
    are used. A blank line separates the headers and the HTML message body:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将以以下消息作出响应，假设它能够处理请求。使用了`Server`、`Content-Type`和`Content-Length`头部。一个空行分隔头部和HTML消息正文：
- en: '**HTTP/1.0 200 OK**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP/1.0 200 OK**'
- en: '**Server: WebServer**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Server: WebServer**'
- en: '**Content-Type: text/html**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Content-Type: text/html**'
- en: '**Content-Length: 86**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Content-Length: 86**'
- en: '**<html><h1>WebServer Home Page.... </h1><br><b>Welcome to my web server!</b><BR></html>**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**<html><h1>WebServer主页.... </h1><br><b>欢迎来到我的Web服务器！</b><BR></html>**'
- en: Other headers lines can be included.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 其他头部行可以包括在内。
- en: Java socket support for HTTP client/server applications
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java套接字支持HTTP客户端/服务器应用程序
- en: An HTTP client will make a connection to an HTTP server. The client will send
    a request message to the server. The server will send back a response message,
    frequently, as an HTML document. In the early HTTP version, once the response
    was sent, the server would terminate the connection. This is sometimes referred
    to as a stateless protocol because the connection is not maintained.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP客户端将与HTTP服务器建立连接。客户端将向服务器发送一个请求消息。服务器将返回一个响应消息，通常是一个HTML文档。在早期的HTTP版本中，一旦响应被发送，服务器将终止连接。这有时被称为无状态协议，因为连接不会被维护。
- en: With HTTP/1.1, persistent connections can be maintained. This improves the performance
    by eliminating the need to open and close connections when multiple pieces of
    data need to be transferred between the server and a client.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP/1.1，可以保持持久连接。这通过消除在服务器和客户端之间传输多个数据片段时打开和关闭连接的需要来提高性能。
- en: We will focus on creating an HTTP server and an HTTP client. While browsers
    typically serve as HTTP clients, other applications can also access web servers.
    In addition, it helps illustrate the nature of HTTP requests. Our server will
    support a subset of the HTTP/1.0 specification.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于创建一个HTTP服务器和一个HTTP客户端。虽然浏览器通常作为HTTP客户端，但其他应用程序也可以访问Web服务器。此外，它有助于说明HTTP请求的性质。我们的服务器将支持HTTP/1.0规范的一个子集。
- en: Building a simple HTTP server
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个简单的HTTP服务器
- en: We will use a class called `WebServer` to support the HTTP/1.0 protocol. The
    server will use a `ClientHandler` class to handle a client. The server will be
    limited to handling only GET requests. However, this will be adequate to illustrate
    the basic server elements needed. Support of other methods can be easily added.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为`WebServer`的类来支持HTTP/1.0协议。服务器将使用`ClientHandler`类来处理客户端。服务器将被限制为仅处理GET请求。然而，这将足以说明所需的基本服务器元素。支持其他方法可以很容易地添加。
- en: 'The `WebServer` definition is shown next. The `ServerSocket` class is the foundation
    of the server. Its `accept` method will block until a request is made. When this
    happens, a new thread based on the `ClientHandler` class will be started:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来显示了`WebServer`的定义。`ServerSocket`类是服务器的基础。其`accept`方法将阻塞，直到有请求发出。当这发生时，将启动一个基于`ClientHandler`类的新线程：
- en: '[PRE0]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Mac users may encounter an error when using port `80`. Use port `3000` or `8080`
    instead. Threads are concurrently executing sequences of code within a process.
    In Java, a thread is created using the `Thread` class. The constructor''s argument
    is an object that implements the `Runnable` interface. This interface consists
    of a single method: `run`. When the thread is started using the `start` method,
    a separate program stack is created for the new thread, and the `run` method executes
    on this stack. When the `run` method terminates, the thread terminates. The `ClientHandler`
    class, shown next, implements the `Runnable` interface. Its constructor is passed
    to the socket representing the client. When the thread starts, the `run` method
    executes. The method displays, starting and terminating messages. The actual work
    is performed in the `handleRequest` method:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Mac用户在使用端口`80`时可能会遇到错误。请改用端口`3000`或`8080`。线程是在进程内并发执行代码序列。在Java中，可以使用`Thread`类来创建线程。构造函数的参数是实现`Runnable`接口的对象。该接口由一个方法组成：`run`。当使用`start`方法启动线程时，将为新线程创建一个单独的程序堆栈，并在该堆栈上执行`run`方法。当`run`方法终止时，线程也终止。接下来显示的`ClientHandler`类实现了`Runnable`接口。它的构造函数接收表示客户端的套接字。当线程启动时，将执行`run`方法。该方法显示启动和终止消息。实际工作是在`handleRequest`方法中执行的：
- en: '[PRE1]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `handleRequest` method uses the input and output streams to communicate
    with the server. In addition, it determines what request was made and then processes
    that request.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleRequest`方法使用输入和输出流与服务器进行通信。此外，它确定了所发出的请求，然后处理该请求。'
- en: 'In the code that follows, the input and output streams are created and the
    first line of the request is read. The `StringTokenizer` class is used to token
    this line. When the `nextToken` method is invoked, it returns the first word of
    the line, which should correspond to an HTTP method:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的代码中，创建了输入和输出流，并读取了请求的第一行。使用`StringTokenizer`类来标记这一行。当调用`nextToken`方法时，它会返回该行的第一个单词，这应该对应于一个HTTP方法：
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A tokenizer is a process that splits text into a series of tokens. Frequently,
    these tokens are simple words. The `StringTokenizer` class's constructor is passed
    the text to be tokenized. The `nextToken` method will return the next available
    token.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 分词器是将文本分割成一系列标记的过程。通常，这些标记是简单的单词。`StringTokenizer`类的构造函数接收要标记化的文本。`nextToken`方法将返回下一个可用的标记。
- en: 'The next code sequence handles the `GET` method. A message is displayed on
    the server side to indicate that a `GET` method is being processed. This server
    will return a simple HTML page. The page is built using the `StringBuilder` class
    where the `append` methods are used in a fluent style. The `sendResponse` method
    is then invoked to actually send the response. If some other method was requested,
    then a `405` status code is returned:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的代码序列处理了`GET`方法。在服务器端显示一条消息，指示正在处理`GET`方法。该服务器将返回一个简单的HTML页面。该页面是使用`StringBuilder`类构建的，其中使用了`append`方法以流畅的方式。然后调用`sendResponse`方法来实际发送响应。如果请求了其他方法，则返回`405`状态码：
- en: '[PRE3]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we wanted to handle other methods, then a series of else-if clauses can
    be added. To further process the `GET` method, we will need to parse the remainder
    of the initial request line. The following statement will give us a string that
    we can process:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想处理其他方法，那么可以添加一系列的else-if子句。要进一步处理`GET`方法，我们需要解析初始请求行的其余部分。以下语句将给我们一个可以处理的字符串：
- en: '[PRE4]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous statement is not needed for this example and should not be included
    in the code. It simply offers one possible way of further processing HTTP queries.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 上述陈述对于本例不需要，不应包含在代码中。它只是提供了进一步处理HTTP查询的一种可能方式。
- en: 'Once we have created a response, we will use the `sendResponse` method to send
    it to the client as shown next. This method is passed the socket, a status code,
    and the response string. An output stream is then created:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了响应，我们将使用`sendResponse`方法将其发送给客户端，如下所示。该方法接收套接字、状态码和响应字符串。然后创建一个输出流：
- en: '[PRE5]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If the status code is `200`, then a simple HTML page is returned. If the status
    code is `405`, then a single status code line is returned. Otherwise, a `404`
    response is sent. As we used the `DataOutputStream` class to write, we use its
    `writeBytes` method to handle strings:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果状态码是`200`，那么将返回一个简单的HTML页面。如果状态码是`405`，那么将返回一个单一的状态码行。否则，将发送一个`404`响应。由于我们使用`DataOutputStream`类进行写入，因此我们使用它的`writeBytes`方法来处理字符串：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When the server starts, it will display the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器启动后，将显示以下内容：
- en: '**Connection made**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接已建立**'
- en: '**Waiting for client request**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**等待客户端请求**'
- en: 'When a client makes a `GET` request, output similar to the following one will
    be displayed:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端发出`GET`请求时，将显示类似以下的输出：
- en: '**ClientHandler Started for Socket[addr=/127.0.0.1,port=50573,localport=80]**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**ClientHandler Started for Socket[addr=/127.0.0.1,port=50573,localport=80]**'
- en: '**Get method processed**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**GET方法已处理**'
- en: '**ClientHandler Terminated for Socket[addr=/127.0.0.1,port=50573,localport=80]**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**ClientHandler Terminated for Socket[addr=/127.0.0.1,port=50573,localport=80]**'
- en: With a simple server in place, let's take a look at how we can build an HTTP
    client application.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有了一个简单的服务器，让我们看看如何构建一个HTTP客户端应用程序。
- en: Building a simple HTTP client
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个简单的HTTP客户端
- en: 'We will use the following `HTTPClient` class to access our HTTP server. In
    its constructor, a socket connecting to the server is created. The `Socket` class''s
    `getInputStream` and `getOutputStream` return input and output streams for the
    socket, respectively. The `sendGet` method is called, which sends a request to
    the server. The `getResponse` method returns the response, which is then displayed:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下`HTTPClient`类来访问我们的HTTP服务器。在它的构造函数中，创建一个连接到服务器的套接字。`Socket`类的`getInputStream`和`getOutputStream`分别返回套接字的输入和输出流。调用`sendGet`方法，发送请求到服务器。`getResponse`方法返回响应，然后显示出来：
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `sendGet` method follows this, which sends a `GET` method request using
    a simple path. This is followed by a`User-Agent` header. We used an instance of
    the `OutputStream` class with the `write` method. The `write` method requires
    an array of bytes. The `String` class''s `getBytes` method returns this array
    of bytes:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendGet`方法如下，它使用简单路径发送`GET`方法请求。然后是`User-Agent`头。我们使用`OutputStream`类的实例和`write`方法。`write`方法需要一个字节数组。`String`类的`getBytes`方法返回这个字节数组：'
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `getResponse` method is as follows and is passed a `BufferedReader` instance
    to get the response from the server. It returns a string created using the `StringBuilder`
    class:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`getResponse`方法如下，并传递一个`BufferedReader`实例来从服务器获取响应。它返回一个使用`StringBuilder`类创建的字符串：'
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the client application executes, we get the following output reflecting
    the server''s response:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端应用程序执行时，我们得到以下反映服务器响应的输出：
- en: '**HTTP Client Started**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP客户端已启动**'
- en: '**HTTP/1.0 200 OK**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP/1.0 200 OK**'
- en: '**Server: WebServer**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器：WebServer**'
- en: '**Content-Type: text/html**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容类型：text/html**'
- en: '**Content-Length: 86**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容长度：86**'
- en: '**<html><h1>WebServer Home Page.... </h1><br><b>Welcome to my web server!</b><BR></html>**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**<html><h1>WebServer首页.... </h1><br><b>欢迎来到我的网络服务器！</b><BR></html>**'
- en: 'If we use the same request from a browser, we will get the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从浏览器使用相同的请求，我们将得到以下结果：
- en: '![Building a simple HTTP client](img/B04915_04_02.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![构建一个简单的HTTP客户端](img/B04915_04_02.jpg)'
- en: These client and server applications can be further enhanced. However, we can
    use the `HttpURLConnection` class to achieve similar results.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些客户端和服务器应用程序可以进一步增强。然而，我们可以使用`HttpURLConnection`类来实现类似的结果。
- en: Client/server development using standard Java classes
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准Java类进行客户端/服务器开发
- en: Specifically, we will use the `HttpURLConnection` and `HTTPServer` classes to
    implement a client and server application. These classes support much of the functionality
    required for clients and servers. Using these classes will avoid writing low-level
    code to implement HTTP functionality. Low-level code refers to the non-specialized
    classes, such as the `Socket` class. Higher-level and more specialized classes,
    such as the `HttpURLConnection` and `HTTPServer` classes, supplement and provide
    additional support for specialized operations.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将使用`HttpURLConnection`和`HTTPServer`类来实现客户端和服务器应用程序。这些类支持客户端和服务器所需的大部分功能。使用这些类将避免编写低级代码来实现HTTP功能。低级代码是指非专门化的类，如`Socket`类。更高级和更专门化的类，如`HttpURLConnection`和`HTTPServer`类，补充并为专门化的操作提供额外支持。
- en: The `HttpURLConnection` class is derived from the `HttpConnection` class. This
    base class has a number of methods that not are directly concerned with the HTTP
    protocol.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpURLConnection`类是从`HttpConnection`类派生的。这个基类有许多方法，不直接涉及HTTP协议。'
- en: Using the HttpURLConnection class
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HttpURLConnection类
- en: The `HttpURLConnection` class provides a convenient technique to access a web
    server. With this class, we can connect to a site, make a request, and access
    the respond headers and the response message.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpURLConnection`类提供了一种便捷的访问网站的技术。使用这个类，我们可以连接到一个站点，发出请求，并访问响应头和响应消息。'
- en: 'We will use the `HttpURLConnectionExample` class that is defined as follows.
    A `sendGet` method supports transmitting the `GET` method request to the server.
    The `HttpURLConnectionExample` class supports other HTTP methods. For this example,
    we are only using the `GET` method:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下定义的`HttpURLConnectionExample`类。`sendGet`方法支持向服务器发送`GET`方法请求。`HttpURLConnectionExample`类支持其他HTTP方法。在这个例子中，我们只使用`GET`方法：
- en: '[PRE10]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `sendGet` method implementation is shown next. A Google query ([http://www.google.com/search?q=java+sdk&ie=utf-8&oe=utf-8](http://www.google.com/search?q=java+sdk&ie=utf-8&oe=utf-8))
    is used to illustrate the process where we search for "java sdk". The latter part
    of the query, `&ie=utf-8&oe=utf-8`, is additional information attached to the
    query by the Google search engine. The `openConnection` method will connect to
    the Google server:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来显示了`sendGet`方法的实现。使用一个Google查询（[http://www.google.com/search?q=java+sdk&ie=utf-8&oe=utf-8](http://www.google.com/search?q=java+sdk&ie=utf-8&oe=utf-8)）来说明我们搜索"java
    sdk"的过程。查询的后半部分`&ie=utf-8&oe=utf-8`是由Google搜索引擎附加到查询的附加信息。`openConnection`方法将连接到Google服务器：
- en: '[PRE11]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using this connection, the `setRequestMethod` and `setRequestProperty` methods
    set the request method and user agent, respectively:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个连接，`setRequestMethod`和`setRequestProperty`方法分别设置请求方法和用户代理：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The response code is retrieved, and if we are successful, the `getResponse`
    method will retrieve the response and then display it as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 检索响应代码，如果成功，`getResponse`方法将检索响应，然后显示如下：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `getResponse` method is shown next. The `HttpURLConnection` class''s `getInputStream`
    method returns an input stream, which is used to create an instance of the `BufferedReader`
    class. A `StringBuilder` instance is used along with this reader to create and
    return a string:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来显示了`getResponse`方法。`HttpURLConnection`类的`getInputStream`方法返回一个输入流，用于创建`BufferedReader`类的实例。使用这个读取器和`StringBuilder`实例来创建并返回一个字符串：
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When this program executes, you will get output as follows. Due to the length
    of the output, it has been truncated:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当此程序执行时，您将获得以下输出。由于输出的长度，它已被截断：
- en: '**Sent Http GET request**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**发送Http GET请求**'
- en: '**Response Code: 200**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**响应代码：200**'
- en: '**response: <!doctype html><html itemscope="" ...**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**响应：<!doctype html><html itemscope="" ...**'
- en: 'If we used this query in a browser, we will get output similar to the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中使用这个查询，我们将得到类似以下的输出：
- en: '![Using the HttpURLConnection class](img/B04915_04_03.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![使用HttpURLConnection类](img/B04915_04_03.jpg)'
- en: A very interesting discussion of how to use the `URLConnection` class to deal
    with HTTP requests can be found at [http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests](http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用`URLConnection`类处理HTTP请求的非常有趣的讨论可以在[http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests](http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests)找到。
- en: URL encoding
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: URL编码
- en: When a URL is formed, a specific URL format needs to be used. Some of the characters
    of this format are reserved and others are unreserved. Reserved characters have
    special meaning, such as the forward slash, which is used to separate parts of
    a URL. Unreserved characters do not have any special meaning.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当形成URL时，需要使用特定的URL格式。该格式的一些字符是保留字符，其他字符是未保留字符。保留字符具有特殊含义，例如斜杠，用于分隔URL的各个部分。未保留字符没有任何特殊含义。
- en: When a reserved character needs to be used in a non-reserved context, URL encoding,
    also known as percent-encoding, is used to represent these characters using special
    character sequences. More information about this process can be found at [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要在非保留上下文中使用保留字符时，使用URL编码，也称为百分号编码，用特殊字符序列表示这些字符。有关此过程的更多信息，请参阅[https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding)。
- en: In Java, we can perform URL encoding using the `URLEncoder` class. Specifically,
    the `URLEncoder` class has an `encode` method to convert a string that complies
    with the `application/x-www-form-url` encoded MIME format.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，我们可以使用`URLEncoder`类执行URL编码。具体来说，`URLEncoder`类有一个`encode`方法，用于转换符合`application/x-www-form-url`编码MIME格式的字符串。
- en: This method is overloaded. The single argument method has been deprecated. The
    two-argument method accepts a string to be converted and a string that specifies
    the character encoding scheme. For HTTP messages, use the UTF-8 format.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是重载的。单参数方法已被弃用。两参数方法接受要转换的字符串和指定字符编码方案的字符串。对于HTTP消息，请使用UTF-8格式。
- en: 'Previously, we used the following string to create a new URL instance:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们使用以下字符串创建一个新的URL实例：
- en: '[PRE15]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This string was actually formatted by the browser. Instead of using the browser,
    the following code illustrates how to use the `encode` method to achieve similar
    results:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符串实际上是由浏览器格式化的。以下代码演示了如何使用`encode`方法来实现类似的结果，而不是使用浏览器：
- en: '[PRE16]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will produce the string: `http://www.google.com/search?q=java+sd`. You
    can see how the blanks have been converted to `+` symbols for this URL. The latter
    part of the original query, `&ie=utf-8&oe=utf-8`, is not included in our URL encoded
    string.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生字符串：`http://www.google.com/search?q=java+sd`。您可以看到空格已经被转换为`+`符号用于这个URL。原始查询的后半部分`&ie=utf-8&oe=utf-8`没有包含在我们的URL编码字符串中。
- en: 'The `URLDecoder` class is available to decode URL encoded strings if necessary.
    For a comprehensive discussion of URL encoding, see: [http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding](http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，`URLDecoder`类可用于解码URL编码的字符串。有关URL编码的全面讨论，请参阅：[http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding](http://blog.lunatech.com/2009/02/03/what-every-web-developer-must-know-about-url-encoding)。
- en: Using the HTTPServer class
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTTPServer类
- en: The `HTTPServer` class is found in the `com.sun.net.httpserver` package. It
    provides a powerful set of features to support a simple HTTP server. Many of the
    tasks that we had to perform manually with our previous servers are simplified
    with this server. The interaction between a client and server is referred to as
    an exchange.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTPServer`类位于`com.sun.net.httpserver`包中。它提供了一组强大的功能，支持简单的HTTP服务器。我们以前的服务器需要手动执行的许多任务在这个服务器上都得到了简化。客户端和服务器之间的交互称为交换。'
- en: This and other supporting classes and interfaces are members of the `com.sun.net.httpserver`
    package. They are normally included with most IDEs. The API documentation can
    be found at [http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/index.html?com/sun/net/httpserver/package-summary.html](http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/index.html?com/sun/net/httpserver/package-summary.html).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些支持类和接口是`com.sun.net.httpserver`包的成员。它们通常包含在大多数集成开发环境中。API文档可以在[http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/index.html?com/sun/net/httpserver/package-summary.html](http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/index.html?com/sun/net/httpserver/package-summary.html)找到。
- en: 'This package consists of a number of classes. The primary classes that we will
    use include:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包包括许多类。我们将使用的主要类包括：
- en: '| Class/interface | Purpose |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 类/接口 | 目的 |'
- en: '| --- | --- |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `HttpServer` | This class supports the basic functionality of an HTTP server
    |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `HttpServer` | 此类支持HTTP服务器的基本功能 |'
- en: '| `HttpExchange` | This class encapsulates the request and response associated
    with a client/server exchange |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `HttpExchange` | 此类封装了与客户端/服务器交换相关的请求和响应 |'
- en: '| `HttpHandler` | This class defines a handle method used to process specific
    exchanges |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `HttpHandler` | 此类定义了用于处理特定交换的handle方法 |'
- en: '| `HttpContext` | This class maps a URI path to an `HttpHandler` instance |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `HttpContext` | 此类将URI路径映射到`HttpHandler`实例 |'
- en: '| `Filter` | This class supports the preprocessing and post-processing of requests
    |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `Filter` | 此类支持请求的预处理和后处理 |'
- en: The server uses an `HttpHandler` derived class to process client requests. For
    example, one handler can process requests for basic web pages, while another handler
    may process service related requests.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器使用一个派生自`HttpHandler`的类来处理客户端请求。例如，一个处理程序可以处理基本网页的请求，而另一个处理程序可以处理与服务相关的请求。
- en: 'The `HttpExchange` class supports the life-cycle activities of an exchange
    between a client and a server. It possesses a number of methods providing access
    to request and response information. These methods are listed in the following
    table in the order that they are normally used. Not all methods need to be used
    for all requests:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpExchange`类支持客户端和服务器之间交换的生命周期活动。它拥有许多方法，提供对请求和响应信息的访问。这些方法按照通常使用的顺序列在下表中。并非所有请求都需要使用所有方法：'
- en: '| Method | Purpose |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| --- | --- |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `getRequestMethod` | This method returns the HTTP method requested |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `getRequestMethod` | 此方法返回所请求的HTTP方法 |'
- en: '| `getRequestHeaders` | This method returns the request headers |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `getRequestHeaders` | 此方法返回请求头 |'
- en: '| `getRequestBody` | This method returns an `InputStrea` `m` instance for the
    request body |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `getRequestBody` | 此方法返回用于请求正文的`InputStream`实例 |'
- en: '| `getResponseHeaders` | This method returns the response headers except for
    content-length |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `getResponseHeaders` | 此方法返回响应头，除了内容长度 |'
- en: '| `sendResponseHeaders` | This method sends the response headers |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `sendResponseHeaders` | 此方法发送响应头 |'
- en: '| `getResponseBody` | This method returns an `OutputStream` instance used to
    send the response |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `getResponseBody` | 此方法返回用于发送响应的`OutputStream`实例 |'
- en: An exchange is closed when the input and output streams are closed. The `sendResponseHeaders`
    method must be used before the `getResponseBody` method is invoked.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入和输出流关闭时，交换就会关闭。在调用`getResponseBody`方法之前必须使用`sendResponseHeaders`方法。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The performance of the initial version of this class was not very good. However,
    newer versions have better performance. In addition, the filter facility can assist
    in processing exchanges.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类的初始版本性能不是很好。然而，更新的版本性能更好。此外，过滤器功能可以帮助处理交换。
- en: Using the `com.sun.*` classes can be used without concerns. Problems can occur
    if the `sun.*` classes are used with different JREs. The `HTTPServer` class fully
    supports HTTP/1.0, but it only provides partial support for HTTP/1.1.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 可以放心使用`com.sun.*`类，但如果在不同的JRE中使用`sun.*`类可能会出现问题。`HTTPServer`类完全支持HTTP/1.0，但仅提供了对HTTP/1.1的部分支持。
- en: Implementing a simple HTTPServer class
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现一个简单的HTTPServer类
- en: 'The class that follows implements a simple server using the `HTTPServer` class.
    An instance of the `HttpServer` class is created using the localhost and port
    `80` (`3000` or `8080` on a Mac). The `createContext` method associates the `/index`
    path with an instance of the `IndexHandler` class. This handler will process the
    request. The `start` method starts the server. The server will continue running,
    processing multiple requests until it is manually stopped:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的类实现了使用`HTTPServer`类的简单服务器。使用本地主机和端口`80`（在Mac上为`3000`或`8080`）创建了`HttpServer`类的实例。`createContext`方法将`/index`路径与`IndexHandler`类的实例关联起来。这个处理程序将处理请求。`start`方法启动服务器。服务器将继续运行，处理多个请求，直到手动停止为止。
- en: '[PRE17]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When the `createContext` method matches the path expressed as a string to a
    handler, it uses a specific matching process. The details of this process are
    explained in the *Mapping request URIs to HttpContext paths* section of the `HTTPServer`
    class documentation found at [http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/HttpServer.html](http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/HttpServer.html).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当`createContext`方法将字符串表示的路径与处理程序匹配时，它使用特定的匹配过程。此过程的详细信息在`HTTPServer`类文档的*将请求URI映射到HttpContext路径*部分中解释，该文档位于[http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/HttpServer.html](http://docs.oracle.com/javase/8/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/HttpServer.html)。
- en: The `IndexHandler` class is declared next. It implements the `HttpHandler` interface
    by overriding the `handle` method. The `handle` method is passed an `HttpExchange`
    instance, which we can use to process the request.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来声明了`IndexHandler`类。它通过覆盖`handle`方法来实现`HttpHandler`接口。`handle`方法传递了一个`HttpExchange`实例，我们可以用它来处理请求。
- en: 'In this method, we perform the following actions:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，我们执行以下操作：
- en: Display the address of the client
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示客户端的地址
- en: Send back a request with a status code of `200`
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送状态码为`200`的请求返回
- en: Send the response to the client
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向客户端发送响应
- en: 'The `sendResponseHeaders` method will send an initial response line for status
    code `200` and a header for the content length. The `getResponseBody` method returns
    an output stream used to send the message body. The stream is then closed terminating
    the exchange:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendResponseHeaders`方法将发送状态码为`200`的初始响应行和内容长度的头部。`getResponseBody`方法返回用于发送消息正文的输出流。然后关闭流，终止交换：'
- en: '[PRE18]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `sendResponseHeaders` method uses two parameters. The first is the response
    code, and the second controls the transmission of the message body, as detailed
    in the next table:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendResponseHeaders`方法使用两个参数。第一个是响应代码，第二个控制消息主体的传输，如下表所述：'
- en: '| Value | Meaning |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 意义 |'
- en: '| --- | --- |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Greater than zero | This is the length of the message. The server must send
    this number of bytes. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 大于零 | 这是消息的长度。服务器必须发送这么多字节。'
- en: '| Zero | This is used for chunked transfer where an arbitrary number of bytes
    is sent. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: 零 | 这用于分块传输，其中发送任意数量的字节。
- en: '| -1 | This is when no response body is sent. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: -1 | 这是当没有响应主体被发送时。
- en: 'The `getResponse` method uses the `StringBuilder` class to construct a string:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`getResponse`方法使用`StringBuilder`类构造字符串：'
- en: '[PRE19]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When the server is started, the following output is displayed:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器启动时，将显示以下输出：
- en: '**MyHTTPServer Started**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**MyHTTPServer已启动**'
- en: If we enter the URL `http://127.0.0.1/index` in a browser, the browser will
    display the page similar to the one in the image in the section *Building a simple
    HTTP client*.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中输入URL `http://127.0.0.1/index`，浏览器将显示类似于*构建简单HTTP客户端*部分中图像的页面。
- en: 'The server will display the following for each request:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器将为每个请求显示以下内容：
- en: '**/127.0.0.1:50273**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**/127.0.0.1:50273**'
- en: 'This class is instrumental in processing client requests. Here, we will illustrate
    several of this class''s methods using a different handler called `DetailHandler`,
    as declared next:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类在处理客户端请求方面非常重要。在这里，我们将使用一个名为`DetailHandler`的不同处理程序来说明该类的几种方法：
- en: '[PRE20]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To use this handler, replace the `createContext` method, and call in the `MyHTTPServer`
    with this statement:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此处理程序，请在`MyHTTPServer`中用此语句替换`createContext`方法，并在`MyHTTPServer`中调用。
- en: '[PRE21]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's start by examining the use of the `getRequestHeaders` method, which returns
    an instance of the `Headers` class. This will permit us to display each request
    header sent by the client and perform additional processing based on the headers
    if needed.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先检查`getRequestHeaders`方法的使用，它返回`Headers`类的一个实例。这将允许我们显示客户端发送的每个请求头，并根据需要执行其他处理。
- en: 'Add the following code to the `handle` method. The `keyset` method returns
    a `Set` of key/values pairs for each header. In the for-each statement, the `Set`
    interface''s `get` method returns a list of values for each header. This list
    is used to display the headers:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`handle`方法中。`keyset`方法返回每个头的键/值对的`Set`。在for-each语句中，`Set`接口的`get`方法返回每个头的值列表。此列表用于显示头部：
- en: '[PRE22]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using the previous URL (`http://127.0.0.1/index`) from the Firefox browser,
    we get the following output:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firefox浏览器中的先前URL（`http://127.0.0.1/index`），我们得到以下输出：
- en: '**Accept-encoding = [gzip, deflate]**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**接受编码 = [gzip, deflate]**'
- en: '**Accept = [text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**接受 = [text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]**'
- en: '**Connection = [keep-alive]**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接 = [保持活动]**'
- en: '**Host = [127.0.0.1]**'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**主机 = [127.0.0.1]**'
- en: '**User-agent = [Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101
    Firefox/40.0]**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户代理 = [Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0]**'
- en: '**Accept-language = [en-US,en;q=0.5]**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**接受语言 = [en-US,en;q=0.5]**'
- en: '**Cache-control = [max-age=0]**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓存控制 = [max-age=0]**'
- en: 'Using a different browser may return a different set of request headers. The
    `getRequestMethod` method returns the name of the request method, as shown here:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的浏览器可能返回不同的一组请求头。`getRequestMethod`方法返回请求方法的名称，如下所示：
- en: '[PRE23]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can use this to differentiate between client requests.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个来区分客户端请求。
- en: Some request methods will pass a message body along with the request. The `getRequestBody`
    method will return an `InputStream` instance to access this body.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 一些请求方法将在请求中传递消息主体。`getRequestBody`方法将返回一个`InputStream`实例以访问此主体。
- en: 'The following code illustrates how we can obtain and display the message body:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码说明了如何获取和显示消息主体：
- en: '[PRE24]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As our request did not have a body, nothing is displayed.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的请求没有主体，因此不会显示任何内容。
- en: Managing response headers
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理响应头
- en: The server can send back response headers using the `sendResponseHeaders` method.
    However, these headers need to be created using a combination of the `getResponseHeaders`
    method and the `set` methods.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器可以使用`sendResponseHeaders`方法发送响应头。但是，这些头需要使用`getResponseHeaders`方法和`set`方法的组合来创建。
- en: 'In the next code sequence, the `getResponseHeaders` method will return an instance
    of the `Header` class:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个代码序列中，`getResponseHeaders`方法将返回`Header`类的一个实例：
- en: '[PRE25]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We use the `getResponse` method to get our response. We will need this to compute
    the content length. The `set` method is then used to create **Content-Type** and
    **Server** headers:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`getResponse`方法获取我们的响应。我们需要这个来计算内容长度。然后使用`set`方法创建**Content-Type**和**Server**头：
- en: '[PRE26]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The headers are sent using the `sendResponseHeaders` method described earlier,
    shown as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 头部使用先前描述的`sendResponseHeaders`方法发送，如下所示：
- en: '[PRE27]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'These response headers can be displayed using the following code sequence.
    This performs the same functionality as the for-each statement that we used to
    display the request headers. However, this implementation uses a Java 8 Stream
    class and two lambda expressions instead:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下代码序列显示这些响应头。这执行与我们用于显示请求头的for-each语句相同的功能。但是，此实现使用Java 8的Stream类和两个lambda表达式：
- en: '[PRE28]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This implementation uses a stream. The `stream` method returns the keys found
    in the set. The `map` method processes each key using it to look up a list of
    values associated with the key. The list is converted into a string. The `forEach`
    method will then display each of these strings.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现使用流。`stream`方法返回集合中找到的键。`map`方法使用每个键来处理查找与键关联的值列表。然后将列表转换为字符串。`forEach`方法将显示这些字符串中的每一个。
- en: The `HTTPServer`, and its accompanying classes provide a simple, but convenient
    to use technique to implement an HTTP server. Support is also provided for secure
    communications using the `HttpsServer` class, which is discussed in [Chapter 8](ch08.html
    "Chapter 8. Network Security"), *Network Security*.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTPServer`及其相关类提供了一种简单但方便的实现HTTP服务器的技术。还提供了使用`HttpsServer`类进行安全通信的支持，该类在[第8章](ch08.html
    "第8章。网络安全")*网络安全*中讨论。'
- en: Open source Java HTTP servers
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源Java HTTP服务器
- en: 'While we can develop a web server using any of the technologies discussed in
    this chapter, another option is to use any of a number of open source Java-based
    HTTP servers. Such servers frequently provide a number of features, including:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以使用本章讨论的任何技术来开发Web服务器，但另一个选择是使用许多开源的基于Java的HTTP服务器之一。这些服务器通常提供许多功能，包括：
- en: Full compliancy with HTTP standards
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全符合HTTP标准
- en: Support for logging and monitoring
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持日志记录和监控
- en: Handling of virtual hosts
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟主机的处理
- en: Performance tuning capability
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能调优能力
- en: Scalable
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展的
- en: Chunked data transfer
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分块数据传输
- en: Configurability
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可配置性
- en: Support for NIO (Grizzly)
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持NIO（Grizzly）
- en: 'Leveraging these systems can save you a lot of time and effort that would otherwise
    be devoted to building a custom server. A partial list of a few Java-based servers
    include the following:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些系统可以节省大量时间和精力，否则将用于构建自定义服务器。一些基于Java的服务器的部分列表包括以下内容：
- en: Jakarta Tomcat ([http://tomcat.apache.org/](http://tomcat.apache.org/))
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jakarta Tomcat（[http://tomcat.apache.org/](http://tomcat.apache.org/)）
- en: Jetty ([http://www.eclipse.org/jetty/](http://www.eclipse.org/jetty/))
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jetty（[http://www.eclipse.org/jetty/](http://www.eclipse.org/jetty/)）
- en: JLHTTP ([http://www.freeutils.net/source/jlhttp/](http://www.freeutils.net/source/jlhttp/))
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JLHTTP（[http://www.freeutils.net/source/jlhttp/](http://www.freeutils.net/source/jlhttp/)）
- en: GlassFish ([https://glassfish.java.net/](https://glassfish.java.net/))
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GlassFish（[https://glassfish.java.net/](https://glassfish.java.net/)）
- en: Grizzly ([https://grizzly.java.net/](https://grizzly.java.net/))
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grizzly（[https://grizzly.java.net/](https://grizzly.java.net/)）
- en: Simple ([http://www.simpleframework.org/](http://www.simpleframework.org/))
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Simple（[http://www.simpleframework.org/](http://www.simpleframework.org/)）
- en: One list of open source Java servers is found at [http://java-source.net/open-source/web-servers](http://java-source.net/open-source/web-servers).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://java-source.net/open-source/web-servers](http://java-source.net/open-source/web-servers)找到一个开源Java服务器列表。
- en: At a higher level, Java EE is frequently used to support Web Servers. While
    this edition has evolved over the years, servlets form the basis to handle web
    requests. A servlet is a Java application that hides much of the detail surrounding
    the low-level processing of requests and responses. This permits the developer
    to focus on processing requests.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高的层次上，Java EE经常用于支持Web服务器。虽然这个版本多年来已经发展，但servlets仍然是处理Web请求的基础。Servlet是一个隐藏了很多关于请求和响应的低级处理细节的Java应用程序。这使得开发人员可以专注于处理请求。
- en: Servlets are held in containers that provide support for tasks, such as database
    access, managing performance, and providing security. A simple servlet is shown
    next to give you a feel as to how they are structured.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Servlets存放在容器中，提供对任务的支持，如数据库访问，性能管理和安全性提供。下面显示了一个简单的servlet，让您了解它们的结构。
- en: 'The `doGet` and `doPost` methods handle `GET` and `POST` type messages, respectively.
    However, as the differences between these two HTTP messages are hidden, only one
    is needed. The `HttpServletRequest` class represents an HTTP request and the `HttpServletResponse`
    class represents the response. These classes provide access to the messages. For
    example, the `getWriter` method returns a `PrintWriter` class instance, which
    allows us to write the HTML response in a clearer fashion:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`doGet`和`doPost`方法分别处理`GET`和`POST`类型的消息。然而，由于这两种HTTP消息之间的差异被隐藏了，只需要一个。`HttpServletRequest`类表示HTTP请求，`HttpServletResponse`类表示响应。这些类提供对消息的访问。例如，`getWriter`方法返回一个`PrintWriter`类实例，允许我们以更清晰的方式编写HTML响应：'
- en: '[PRE29]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Servlets are normally developed using the Java EE SDK. The previous example
    will not compile correctly unless developed using this API.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Servlets通常使用Java EE SDK开发。前面的例子如果不使用这个API开发，将无法正确编译。
- en: Many technologies have evolved and have hidden servlets. Over the years, this
    has included **JavaServer Pages** (**JSP**) and **JavaServer Faces** (**JSF**),
    which have largely eliminated the need to write servlets directly.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 许多技术已经发展并隐藏了servlets。多年来，这包括了**JavaServer Pages**（**JSP**）和**JavaServer Faces**（**JSF**），它们基本上消除了直接编写servlets的需要。
- en: There are a number of web servers for Java. A comparison of some of these is
    found at [https://en.wikipedia.org/wiki/Comparison_of_application_servers#Java](https://en.wikipedia.org/wiki/Comparison_of_application_servers#Java).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多Java的Web服务器。这些中的一些比较可以在[https://en.wikipedia.org/wiki/Comparison_of_application_servers#Java](https://en.wikipedia.org/wiki/Comparison_of_application_servers#Java)找到。
- en: Server configuration
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器配置
- en: The configuration of a server depends on the technology that was used to build
    it. Here, we will focus on the configuration of the `URLConnection` class. This
    class has a number of protected fields that control how the connection behaves.
    These fields are accessed using corresponding get and set methods.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的配置取决于用于构建它的技术。在这里，我们将重点放在`URLConnection`类的配置上。这个类有一些受保护的字段，控制连接的行为。这些字段可以使用相应的get和set方法来访问。
- en: One field deals with user interactions. When set to `true`, it allows users
    to engage in interactions, such as responding to an authentication dialog box.
    A connection can be used for input and/or output. The connection can be configured
    to disallow input or output.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字段处理用户交互。当设置为`true`时，允许用户参与交互，如响应身份验证对话框。连接可用于输入和/或输出。连接可以配置为禁止输入或输出。
- en: When data is transferred between a client and a server, it may be cached. The
    `UseCaches` variable determines whether caches are ignored or not. If set to `true`,
    then caches are used as appropriate. If `false`, caching is not performed.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据在客户端和服务器之间传输时，它可能会被缓存。`UseCaches`变量确定是否忽略缓存。如果设置为`true`，则缓存将适当地使用。如果为`false`，则不进行缓存。
- en: The `ifModifiedSince` variable controls whether the retrieval of an object occurs.
    It is a long value that represents time as the number of milliseconds since the
    epoch (January 1, 1970, GMT). If the object has been modified more recently than
    that time, then it is fetched.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`ifModifiedSince`变量控制是否发生对象的检索。它是一个长整型值，表示自纪元（1970年1月1日GMT）以来的毫秒数。如果对象的修改时间比该时间更近，则会被获取。'
- en: 'The following table summarizes the methods that are used to configure a connection
    established using the `URLConnection` class. Each of these methods have a corresponding
    `GET` method:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表总结了使用`URLConnection`类建立连接的方法。每个方法都有相应的`GET`方法：
- en: '| Method | Default | Purpose |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 默认 | 目的 |'
- en: '| --- | --- | --- |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `setAllowUserInteraction` | NA | This method controls user interaction |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `setAllowUserInteraction` | NA | 此方法控制用户交互 |'
- en: '| `setDoInput` | `true` | If its argument is set to `true`, then input is allowed
    |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `setDoInput` | `true` | 如果其参数设置为`true`，则允许输入 |'
- en: '| `setDoInput` | `true` | If its argument is set to `true`, then output is
    allowed |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `setDoInput` | `true` | 如果参数设置为`true`，则允许输出 |'
- en: '| `setIfModifiedSince` | NA | This sets the `ifModifiedSince` variable |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `setIfModifiedSince` | NA | 这将设置`ifModifiedSince`变量 |'
- en: '| `setUseCaches` | `true` | This sets the `UseCaches` variable |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `setUseCaches` | `true` | 这将设置`UseCaches`变量 |'
- en: More sophisticated servers, such as Tomcat, have many more options to control
    how it is configured.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的服务器，如Tomcat，有更多选项来控制它的配置。
- en: When an application is deployed, there are numerous configuration options found
    in the `deployment.properties` file. Many of these options are low level, and
    JRE related. A description of the options is found at [https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html](https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html).
    The *21.2.4 Networking* section discusses the network options, while the *21.2.5
    Cache and Optional Package Repository* section is concerned with the configuration
    of caches.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序部署时，在`deployment.properties`文件中有许多配置选项。其中许多选项是低级别的，与JRE相关。有关这些选项的描述可以在[https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html](https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html)找到。*21.2.4
    网络*部分讨论了网络选项，而*21.2.5 缓存和可选包存储库*部分涉及缓存的配置。
- en: An **HTTP proxy** is a server that acts as an intermediary between a client
    and a server. A proxy is frequently used to manage the network, monitor traffic,
    and improve network performance.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP代理**是一个充当客户端和服务器之间中介的服务器。代理经常用于管理网络，监视流量和改善网络性能。'
- en: Generally, we are not concerned with the use or configuration of a proxy. However,
    if a proxy needs to be configured, we can control it either using the JVM command
    line or within the code using the `System` class's `getProperties` method. We
    can control the proxy used and specify the user and password to access it if needed.
    A short discussion of these capabilities is found at [http://viralpatel.net/blogs/http-proxy-setting-java-setting-proxy-java/](http://viralpatel.net/blogs/http-proxy-setting-java-setting-proxy-java/).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们不关心代理的使用或配置。但是，如果需要配置代理，我们可以使用JVM命令行或在代码中使用`System`类的`getProperties`方法来控制它。我们可以控制使用的代理并在需要时指定用户和密码来访问它。关于这些功能的简要讨论可以在[http://viralpatel.net/blogs/http-proxy-setting-java-setting-proxy-java/](http://viralpatel.net/blogs/http-proxy-setting-java-setting-proxy-java/)找到。
- en: Handling cookies
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理cookie
- en: A cookie is a string containing a key/value pair representing information of
    interest to the server such as user preferences. It is sent from a server to a
    browser. The browser should save the cookie to a file so that it can be used later.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 一个cookie是一个包含键/值对的字符串，表示服务器感兴趣的信息，如用户偏好。它从服务器发送到浏览器。浏览器应该将cookie保存到文件中，以便以后使用。
- en: 'A cookie is a string that consists of a name followed by an equal sign and
    then a value. The following is one possible cookie:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 一个cookie是一个由名称后跟等号然后是一个值组成的字符串。以下是一个可能的cookie：
- en: '**userID=Cookie Monster**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**userID=Cookie Monster**'
- en: A cookie can have multiple values. These values will be separated by a semicolon
    and white space.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 一个cookie可以有多个值。这些值将用分号和空格分隔。
- en: 'We will use the `HTTPServer` class and the `HttpURLConnection` classes to demonstrate
    the handling of cookies. In the `MyHTTPServer` class server''s handler class''s
    `handle` method, add the following code after the other headers:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`HTTPServer`类和`HttpURLConnection`类来演示处理cookie。在`MyHTTPServer`类服务器的处理程序类的`handle`方法中，在其他标头之后添加以下代码：
- en: '[PRE30]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When the server responds, it will send that cookie.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器响应时，它将发送该cookie。
- en: 'In the `HttpURLConnectionExample` class''s `getResponse` method, add the following
    code at the beginning of its try block. A string is built containing the cookie
    text. Multiple `substring` and `indexOf` methods are used to extract the cookie''s
    name and then its value:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HttpURLConnectionExample`类的`getResponse`方法中，在其try块的开头添加以下代码。构建一个包含cookie文本的字符串。使用多个`substring`和`indexOf`方法来提取cookie的名称，然后提取其值：
- en: '[PRE31]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When the server sends a response, it will include the cookie. The client will
    then receive the cookie. In the server and the client, you should see the following
    output displaying the cookie:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器发送响应时，它将包括cookie。然后客户端将接收到cookie。在服务器和客户端中，您应该看到以下输出显示cookie：
- en: '**Set-cookie : [userID=Cookie Monster]**'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**Set-cookie : [userID=Cookie Monster]**'
- en: The previous example handles simple single-value cookies. The code to handle
    multiple values is left as an exercise for the reader.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例处理了简单的单值cookie。处理多个值的代码留作读者的练习。
- en: Summary
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we examined the various Java approaches that can be used to
    develop HTTP client/server applications. Communication using HTTP is a common
    practice. Understanding how Java supports this process is a valuable skill to
    possess.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了可以用于开发HTTP客户端/服务器应用程序的各种Java方法。使用HTTP进行通信是一种常见的做法。了解Java如何支持这一过程是一项宝贵的技能。
- en: We started with an overview of HTTP messages. We examined the format of the
    initial request and response lines. Headers lines were also examined, which are
    used to convey information about the message. An optional message body may appear
    in an HTTP message. This is more common in a response where the body is often
    an HTML document.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从HTTP消息的概述开始。我们检查了初始请求和响应行的格式。还检查了头部行，用于传递有关消息的信息。HTTP消息中可能会出现可选的消息主体。这在响应中更常见，其中主体通常是HTML文档。
- en: We demonstrated how a client/server can be developed using simple socket. While
    possible, this approach requires a lot of work to develop a fully functional HTTP
    server. This discussion was followed by the use of the `HTTPServer` and `HttpURLConnection`
    classes to support a server and client, respectively. The use of these classes
    made the development process much easier.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们演示了如何使用简单套接字开发客户端/服务器。虽然可能，但这种方法需要大量工作来开发一个完全功能的HTTP服务器。这一讨论之后是使用`HTTPServer`和`HttpURLConnection`类来支持服务器和客户端，这些类的使用使开发过程变得更加容易。
- en: There are a number of open source Java-based HTTP servers available. These may
    be viable candidates for some environments. The more complex web servers, typified
    by Apache Tomcat, were also discussed. They work with servlets and hide much of
    the low-level HTTP details from the developer.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多基于Java的开源HTTP服务器可用。这些可能是某些环境的可行候选。还讨论了更复杂的Web服务器，比如Apache Tomcat。它们与Servlet一起工作，并且将许多低级HTTP细节隐藏在开发者之外。
- en: We wrapped the chapter up with a brief discussion of server configuration issues
    and how cookies are created and consumed by servers and clients.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总结了本章，简要讨论了服务器配置问题以及服务器和客户端如何创建和使用cookie。
- en: While the client/server architecture is very common, the peer-to-peer architecture
    is an alternative to share information across a network. We will delve into this
    topic in the next chapter.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然客户端/服务器架构非常常见，但对等架构是在网络上共享信息的另一种选择。我们将在下一章深入探讨这个主题。
