- en: Chapter 11. Inheritance in Kotlin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。Kotlin中的继承
- en: In this chapter, we will get to see inheritance in action. In fact, we have
    already seen it, but now we will examine it more closely, discuss the benefits,
    and write classes that we can inherit from. Throughout the chapter, I will show
    you several practical examples of inheritance, and at the end of the chapter we
    will improve our naval battle simulation from the previous chapter and show how
    we could have saved lots of typing and future debugging by using inheritance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到继承的实际应用。实际上，我们已经看到了，但现在我们将更仔细地研究它，讨论其好处，并编写我们可以继承的类。在整个章节中，我将向您展示几个继承的实际例子，并在本章结束时改进我们在上一章中的海战模拟，并展示我们如何通过使用继承来节省大量的输入和未来的调试。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: '**Object-oriented programming** (**OOP**) and inheritance'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向对象编程**（**OOP**）和继承'
- en: Using inheritance with open classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用开放类进行继承
- en: Overriding functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写函数
- en: A bit more about polymorphism
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于多态性的更多内容
- en: Abstract classes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类
- en: Inheritance example app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承示例应用程序
- en: To get started, let's talk a little more about the theory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始，让我们再多谈一点理论。
- en: OOP and inheritance
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OOP和继承
- en: We have seen how we can reuse our own code, and other people's code, by instantiating/creating
    objects from classes. But this whole OOP thing goes even further than that.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何通过实例化/创建对象从类中重用我们自己的代码和其他人的代码。但是整个OOP的概念甚至比这更深入。
- en: What if there is a class that has loads of useful functionality in it, but is
    not exactly what we want? Think about when we wrote the `Carrier` class. It was
    so close to the `Destroyer` class that we could have almost copy-and-pasted it.
    We can **inherit** from a class, and then further refine or add to how it works
    and what it does.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个类中有大量有用的功能，但不完全符合我们的要求怎么办？想想我们编写`Carrier`类时的情况。它与`Destroyer`类非常接近，我们几乎可以复制粘贴它。我们可以从一个类**继承**，然后进一步完善或添加其工作方式和功能。
- en: 'You might be surprised to hear that we have done this already. In fact, we
    have done this with every single app we have created. When we use the `:` syntax,
    we are inheriting. You may recall this code from the `MainActivity` class:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会惊讶地听到我们已经这样做了。实际上，我们已经对我们创建的每个应用程序都这样做了。当我们使用`:`语法时，我们正在继承。您可能还记得`MainActivity`类中的这段代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are inheriting from the `AppCompatActivity` class all its functionality
    – or, more specifically, all the functionality that the designers of the class
    want us to have access to.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从`AppCompatActivity`类继承了所有功能-或者更具体地说，类的设计者希望我们能够访问的所有功能。
- en: 'We can even override a function and still rely, in part, on the overridden
    function in the class we inherit from. For example, we overrode the `onCreate`
    function every time we inherited the `AppCompatActivity` class. But we also called
    on the default implementation provided by the class designers when we did this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以重写一个函数，并在一定程度上依赖于我们继承的类中的重写函数。例如，每次我们继承`AppCompatActivity`类时，我们都重写了`onCreate`函数。但是当我们这样做时，我们也调用了类设计者提供的默认实现：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `super` keyword refers to the super class, which is a class that has been
    inherited from.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`super`关键字指的是被继承的超类。'
- en: And, in [Chapter 6](ch06.html "Chapter 6. The Android Lifecycle"), *The Android
    Lifecycle*, we overrode many more of the `Activity` class' lifecycle functions.
    Note that you can have more than one level of inheritance, although good design
    usually suggests that there are not too many levels. As an example, I have already
    mentioned that `AppCompatActivity` inherits from `Activity,` and we, in turn,
    have inherited from `AppCompatActivity`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，在[第6章](ch06.html "第6章。Android生命周期")中，*Android生命周期*，我们重写了`Activity`类的许多生命周期函数。请注意，您可以有多个级别的继承，尽管良好的设计通常建议不要有太多级别。例如，我已经提到`AppCompatActivity`继承自`Activity`，而我们又从`AppCompatActivity`继承。
- en: With this in mind, let's look at some example classes and see how we can extend
    them, just to see the syntax, as a first step, and to be able to say we have done
    it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，让我们看一些示例类，并看看我们如何扩展它们，只是为了看到语法，作为第一步，并且能够说我们已经做到了。
- en: Using inheritance with open classes
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用开放类进行继承
- en: Some terminology that would be useful to learn at this point is that the class
    that is inherited from is known as the **super** or **base** class. Other common
    ways to refer to this relationship is **parent** and **child** class. The child
    class inherits from the parent class.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，学习的一些有用术语是被继承的类被称为**超类**或**基类**。其他常见的称呼这种关系的方式是**父**类和**子**类。子类继承自父类。
- en: By default, a class cannot be inherited from. It is called a **final** class
    – not open for extending or inheriting from. It is very straightforward, however,
    to change a class so it can be inherited from. All we need to do is add the `open`
    keyword to the class declaration.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，类不能被继承。它被称为**final**类-不开放用于扩展或继承。但是，很容易将类更改为可继承的。我们只需要在类声明中添加`open`关键字。
- en: Basic inheritance examples
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本继承示例
- en: 'Look at this next code, which uses the `open` keyword with the class declaration
    and enables the class to be inherited from:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的代码，它使用`open`关键字与类声明，并使该类可以被继承：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: All the examples from this chapter can be found as completed classes in the
    `Chapter11/Chapter Examples` folder.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例都可以在`Chapter11/Chapter Examples`文件夹中找到。
- en: 'We can now go ahead and create objects of the `Soldier` type and call the `shoot`
    function, as in this next code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续创建`Soldier`类型的对象并调用`shoot`函数，就像下面的代码一样：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code would still output `Bang bang bang` to the logcat window;
    we don''t have to inherit from it to use it. If we want to refine or specialize
    our use of the `Soldier` class, however, we could create a specialized type of
    `Soldier` and inherit the `shoot` function. We could create more classes, perhaps
    `Special Forces` and `Paratrooper`, and use the `:` syntax to inherit from `Soldier`.
    What follows is the code for a `SpecialForces` class:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码仍然会将`Bang bang bang`输出到logcat窗口；我们不必继承它才能使用它。然而，如果我们想要精细化或专门化我们对`Soldier`类的使用，我们可以创建一个专门类型的`Soldier`并继承`shoot`函数。我们可以创建更多的类，也许`Special
    Forces`和`Paratrooper`，并使用`:`语法从`Soldier`继承。以下是`SpecialForces`类的代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice the use of the colon to indicate inheritance. It also adds a `sneakUpOnEnemy`
    function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用冒号表示继承。它还添加了一个`sneakUpOnEnemy`函数。
- en: 'Next, consider the following code for a `Paratrooper` class:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，考虑`Paratrooper`类的以下代码：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code also makes `Paratrooper` inherit from `Soldier`, and it adds
    a `jumpOutOfPlane` function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码还使`Paratrooper`从`Soldier`继承，并添加了`jumpOutOfPlane`函数。
- en: 'This is how we can use these two new child classes:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用这两个新的子类的：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, we instantiated a `SpecialForces` instance and a `Paratrooper`
    instance. The code demonstrates that both instances have access to the `shoot`
    function in the base class, and both classes have access to their own specialized
    functions. The output from the code would be as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们实例化了一个`SpecialForces`实例和一个`Paratrooper`实例。该代码演示了两个实例都可以访问基类中的`shoot`函数，并且两个类都可以访问自己的专门函数。代码的输出将如下所示：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There is even more to inheritance than this. Let's look at what happens when
    we need to further refine the functionality of the base/super class.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 继承还有更多内容。让我们看看当我们需要进一步完善基类/超类的功能时会发生什么。
- en: Overriding functions
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重写函数
- en: Overriding functions is something we have done already, but we need to discuss
    it further. We have overridden the `onCreate` function in every app we have written,
    and in [Chapter 6](ch06.html "Chapter 6. The Android Lifecycle"), *The Android
    Lifecycle*, we overrode many more of the functions from the `AppCompatActivity`
    class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重写函数是我们已经做过的事情，但我们需要进一步讨论。我们已经在我们编写的每个应用程序中重写了`onCreate`函数，并且在[第6章](ch06.html
    "第6章。Android生命周期")中，*Android生命周期*，我们重写了`AppCompatActivity`类的许多其他函数。
- en: 'Consider that we might want to add a `Sniper` class. At first this might seem
    simple. Just code a class, inherit from `Soldier`, and add a `getIntoPosition`
    function, perhaps. What if we wanted to make the `Sniper` class shoot differently
    to the regular `Soldier`? Look at this code for a `Sniper` class, which overrides
    the `shoot` function and replaces it with a specialized version for the `Sniper`
    class:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下我们可能想要添加一个`Sniper`类。起初这可能看起来很简单。只需编写一个类，继承自`Soldier`，并添加一个`getIntoPosition`函数，也许。如果我们想让`Sniper`类的射击方式与普通的`Soldier`不同怎么办？看看`Sniper`类的以下代码，它重写了`shoot`函数，并用`Sniper`类的专门版本替换了它：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You might be tempted to think the job was complete, but this causes a small
    problem. There is an error in the `Sniper` class, as shown in this next screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为工作已经完成，但这会导致一个小问题。在`Sniper`类中有一个错误，如下一个截图所示：
- en: '![Overriding functions](img/B12806_11_01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![重写函数](img/B12806_11_01.jpg)'
- en: 'The error is because the `shoot` function was not written to be overridden.
    By default, functions are final, just like classes are. This means that the child
    class must use it as it is. The solution is to go back to the `Soldier` class
    and add the `open` keyword in front of the `shoot` function declaration. Here
    is the updated code for the `Soldier` class with the subtle, but vital, addition
    highlighted:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 错误是因为`shoot`函数没有被写成可以被重写。默认情况下，函数是final的，就像类一样。这意味着子类必须按原样使用它。解决方案是回到`Soldier`类并在`shoot`函数声明前面添加`open`关键字。以下是带有微妙但至关重要的添加的`Soldier`类的更新代码：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we have fixed the error and can write the following code to instantiate
    the `Sniper` class and use the overridden `shoot` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修复了错误，可以编写以下代码来实例化`Sniper`类并使用重写的`shoot`函数：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This produces the following output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下输出：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can see that the overridden function has been used. It is also interesting
    to note that, even though the child class has overridden a function from the parent
    class, it can still use the function from the parent if it wants to. Consider
    what might happen if the sniper ran out of ammo for his sniper rifle and needed
    to switch to his other weapon. Look at this reworked code for the `Sniper` class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到已使用重写的函数。值得注意的是，即使子类重写了父类的函数，它仍然可以使用父类的函数。考虑一下，如果狙击手的狙击步枪用完了，需要切换到其他武器会发生什么。看看`Sniper`类的重新编写代码：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the new version of the `Sniper` class, there is a new property called `sniperAmmo`,
    and it is initialized to `3`. The overridden `shoot` function now uses a `when`
    expression to check whether `sniperAmmo` is above zero. If it is above zero, then
    the usual text is printed to the logcat window and `sniperAmmo` is decremented.
    This means that the expression will only return true three times. The `when` expression
    also handles what happens when it is false, and calls `super.shoot()`. This line
    of code calls the version of the `shoot` function from `Soldier` – the super class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Sniper`类的新版本中，有一个名为`sniperAmmo`的新属性，并且初始化为`3`。重写的`shoot`函数现在使用`when`表达式来检查`sniperAmmo`是否大于零。如果大于零，则通常的文本将被打印到logcat窗口，并且`sniperAmmo`将被递减。这意味着表达式只会返回三次true。`when`表达式还处理了当它为false时会发生什么，并调用`super.shoot()`。这行代码调用`Soldier`的`shoot`函数的版本-超类。
- en: 'We can now try calling the `shoot` function on a `Sniper` instance four times,
    like in the following code, and observe what happens:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试在`Sniper`实例上四次调用`shoot`函数，就像以下代码中的方式，并观察发生了什么：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is the output we get from the preceding code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们从前面的代码中得到的输出：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can see that the first three calls to `sniper.shoot()` gets output from the
    overridden `shoot` function in the `Sniper` class, and the fourth still calls
    the overridden version, but the `false` branch of the `when` expression calls
    the super class version of `shoot` and we get the output from the `Soldier` class.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到前三次调用`sniper.shoot()`都从`Sniper`类中重写的`shoot`函数输出，第四次仍然调用重写版本，但`when`表达式的`false`分支调用超类版本的`shoot`，我们从`Soldier`类中得到输出。
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A working project based on the examples used so far for inheritance can be found
    in the `Chapter11` folder of the code download. It is called `Inheritance Examples`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，基于继承的示例的工作项目可以在代码下载的`Chapter11`文件夹中找到。它被称为`Inheritance Examples`。
- en: Summary so far
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 到目前为止的总结
- en: As if OOP were not useful enough already, we can now model real-world objects.
    We have also seen that we can make OOP even more useful by subclassing/extending/inheriting
    from other classes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 好像面向对象编程还不够有用，我们现在可以模拟现实世界的对象。我们还看到，通过从其他类进行子类化/扩展/继承，我们可以使面向对象编程变得更加有用。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'As usual, we might find ourselves asking this question about inheritance: why?
    The reason is something like this: if we write common code in the parent class,
    then we can update that common code, and all classes that inherit from it will
    also be updated. Furthermore, we can aid encapsulation with visibility modifiers
    because a subclass only gets to use public/protected instance variables and functions,
    and only gets to override open functions. So, designed properly, this also further
    enhances the benefits of encapsulation.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们可能会问自己这个关于继承的问题：为什么？原因大致如下：如果我们在父类中编写通用代码，那么我们可以更新该通用代码，所有继承它的类也将被更新。此外，我们可以通过可见性修饰符来辅助封装，因为子类只能使用公共/受保护的实例变量和函数，并且只能重写开放函数。因此，如果设计得当，这也进一步增强了封装的好处。
- en: More polymorphism
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多多态性
- en: We already know that polymorphism means many forms, but what does it mean to
    us?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道多态意味着许多形式，但对我们来说意味着什么呢？
- en: 'Boiled down to its simplest, it means the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 简化到最简单的形式，意味着以下内容：
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Any subclass can be used as part of code that uses the super class.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 任何子类都可以作为使用超类的代码的一部分。
- en: This means that we can write code that is easier to understand, and simpler
    to change.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以编写更容易理解、更容易更改的代码。
- en: Also, we can write code for the super class and rely on the fact that no matter
    how many times it is subclassed, the code will still work within certain parameters.
    Let's discuss an example.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以为超类编写代码，并依赖于无论它被子类化多少次，代码仍将在一定范围内工作。让我们讨论一个例子。
- en: Suppose that we want to use polymorphism to help write a zoo management app.
    We will probably want to have a function, such as `feed`. Let's also say we have
    `Lion`, `Tiger,` and `Camel` classes, which all inherit from a parent class called
    `Animal`. We will also probably want to pass a reference to the animal to be fed
    into the `feed` function. This might seem like we need to write a feed function
    for each and every type of `Animal`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想使用多态来帮助编写一个动物园管理应用程序。我们可能会想要有一个函数，比如`feed`。我们还可以说我们有`Lion`，`Tiger`和`Camel`类，它们都继承自一个名为`Animal`的父类。我们可能还想将要喂食的动物的引用传递给`feed`函数。这似乎意味着我们需要为每种类型的`Animal`编写一个feed函数。
- en: 'Instead, however, we can write polymorphic functions with polymorphic arguments:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以使用多态参数编写多态函数：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding function has `Animal` as a parameter, which means that any object
    that is built from a class that inherits from `Animal` can be passed into it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数有`Animal`作为参数，这意味着可以将从继承自`Animal`的类构建的任何对象传递给它。
- en: So, you can even write code today and make another subclass in a week, month,
    or year, and the very same functions and data structures will still work.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您甚至可以今天编写代码，然后在一周、一个月或一年后创建另一个子类，相同的函数和数据结构仍然可以工作。
- en: Also, we can enforce upon our subclasses a set of rules as to what they can
    and cannot do, as well as how they do it. So, clever design in one stage can influence
    it at other stages.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以对我们的子类强制执行一组规则，规定它们可以做什么，不能做什么，以及如何做。因此，在一个阶段的巧妙设计可以影响其他阶段。
- en: But will we ever really want to instantiate an actual `Animal`?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们真的会想要实例化一个实际的`Animal`吗？
- en: Abstract classes and functions
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象类和函数
- en: 'An abstract function is a function that is declared with the `abstract` keyword.
    No problem so far. However, an abstract function also has no body at all. To be
    clear, an abstract function has no code in it. So, why would we ever want to do
    this? The answer is that when we write an abstract function, we force any class
    that inherits from the class with the abstract function to implement/override
    that function. Here is a hypothetical abstract function:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象函数是使用`abstract`关键字声明的函数。到目前为止还没有问题。但是，抽象函数也根本没有主体。明确地说，抽象函数中没有任何代码。那么，我们为什么要这样做呢？答案是，当我们编写抽象函数时，我们强制任何从具有抽象函数的类继承的类来实现/重写该函数。以下是一个假设的抽象函数：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: No body, no code, not even empty curly braces. Any class that wants to inherit
    from that class must implement the `attack` function with precisely the signature
    of the preceding declaration.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 没有主体，没有代码，甚至没有空花括号。任何想要从该类继承的类必须以与前面声明的签名完全相同的方式实现`attack`函数。
- en: An `abstract` class is a class that cannot be instantiated – cannot be made
    into an object. So, it's a blueprint that will never be used then? But that's
    like paying an architect to design your home and then never building it! You might
    be saying to yourself, "I kind of got the idea of an abstract function, but abstract
    classes are just silly."
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`abstract`类是一个不能被实例化的类-不能成为对象。那么，这就是一个永远不会被使用的蓝图？但这就像支付一个建筑师来设计你的家，然后永远不建造它！您可能会对自己说：“我有点明白抽象函数的概念，但抽象类只是愚蠢。”'
- en: If the designer of a class wants to force the user of a class to inherit before
    using their class, they can declare a class as `abstract`**.** Then, we cannot
    make an object from it; therefore, we must inherit from it first and make an object
    from the subclass.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个类的设计者想要强制类的用户在使用他们的类之前继承，他们可以将一个类声明为`abstract`。然后，我们就不能从中创建对象；因此，我们必须先继承它，然后从子类创建对象。
- en: 'Let''s look at an example. We make a class `abstract` by declaring it with
    the `abstract` keyword, like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。我们通过使用`abstract`关键字声明一个类为`abstract`类，像这样：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Yes, but why?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，但为什么呢？
- en: Sometimes we want a class that can be used as a polymorphic type, but we need
    to guarantee it can never be used as an object. For example, `Animal` doesn't
    really make sense on its own.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们想要一个可以用作多态类型的类，但我们需要保证它永远不能被用作对象。例如，`Animal`本身并没有太多意义。
- en: We don't talk about animals, we talk about *types* of animals. We don't say,
    "Ooh, look at that lovely fluffy, white animal," or, "Yesterday we went to the
    pet shop and got an animal and an animal bed." It's just too, well, *abstract*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不谈论动物，我们谈论*动物的类型*。我们不会说，“哦，看那只可爱的毛茸茸的白色动物”，或者，“昨天我们去宠物店买了一只动物和一个动物床。”这太抽象了。
- en: So, an `abstract` class is kind of like a template to be used by any class that
    inherits from it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`abstract`类有点像一个模板，可以被任何继承自它的类使用。
- en: We might want a `Worker` class and extend this to make `Miner`, `Steelworker`,
    `OfficeWorker`, and, of course, `Programmer`. But what exactly does a plain `Worker`
    do? Why would we ever want to instantiate one?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想要一个`Worker`类，并扩展此类以创建`Miner`、`Steelworker`、`OfficeWorker`，当然还有`Programmer`。但是一个普通的`Worker`到底是做什么的呢？为什么我们会想要实例化一个呢？
- en: The answer is that we wouldn't want to instantiate one, but we might want to
    use it as a polymorphic type so that we can pass multiple worker subclasses between
    functions and have data structures that can hold all types of `Worker`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是我们不想实例化一个，但我们可能想要将其用作多态类型，以便我们可以在函数之间传递多个工作子类，并且可以容纳所有类型的`Worker`的数据结构。
- en: We call this type of class an abstract class, and when a class has even one
    abstract function, it must be declared abstract itself. All abstract functions
    must be overridden by any class that inherits from it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称这种类为抽象类，当一个类有一个抽象函数时，它必须被声明为抽象类。所有抽象函数必须被任何继承自它的类重写。
- en: This means that the abstract class can give some of the common functionality
    that would be available in all its subclasses. For example, the `Worker` class
    might have the `height`, `weight`, and `age` properties.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着抽象类可以提供一些在其所有子类中都可用的常见功能。例如，`Worker`类可能具有`height`、`weight`和`age`属性。
- en: It might also have the `getPayCheck` function, which is not abstract and is
    the same in all the subclasses, but a `doWork` function, which is abstract and
    must be overridden, because all the different types of worker `doWork` very differently.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能还有`getPayCheck`函数，这个函数不是抽象的，在所有子类中都是相同的，但是`doWork`函数是抽象的，必须被重写，因为所有不同类型的工作者都有非常不同的`doWork`。
- en: Classes using the Inheritance example app
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用继承示例应用程序的类
- en: We have looked at the way we can create hierarchies of classes to model the
    system that fits our app. So, let's build a project to improve upon the naval
    battle we had in the previous chapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过了我们可以创建类的层次结构来模拟适合我们应用程序的系统的方式。因此，让我们构建一个项目，以改进我们在上一章中进行的海战。
- en: Create a new project called `Basic Classes with` `Inheritance Example` using
    the Empty Activity template. As you have come to expect, the completed code can
    be found in the `Chapter11` folder.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用空活动模板创建一个名为`Basic Classes with Inheritance Example`的新项目。如你所料，完成的代码可以在`Chapter11`文件夹中找到。
- en: 'This is what we are going to do:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们要做的：
- en: Put most of the functionality of the `Carrier` and `Destroyer` classes into
    a `Ship` super class.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Carrier`和`Destroyer`类的大部分功能放入`Ship`超类中。
- en: Inherit from the `Ship` class for both `Carrier` and `Destroyer`, and therefore
    save a lot of code maintenance.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`Carrier`和`Destroyer`类都继承自`Ship`类，从而节省大量代码维护。
- en: Use polymorphism to adapt the `serviceShip` function in the `Shipyard` class
    so that it takes `Ship` as a parameter, and can therefore service any instance
    that inherits from `Ship`, thereby reducing the number of functions in the class.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多态性来调整`Shipyard`类中的`serviceShip`函数，使其以`Ship`作为参数，从而可以为继承自`Ship`的任何实例提供服务，从而减少类中的函数数量。
- en: We will also see that not only is there less code achieving the same functionality
    as before, but it is more encapsulated than before as well.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将看到，不仅代码量比以前少，而且封装性也比以前更好。
- en: 'Create a new class called `Ship` and code it as follows. We will then discuss
    how it compares to the `Destroyer` and `Carrier` classes of the previous project:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`Ship`的新类，并编写如下代码。然后我们将讨论它与上一个项目中的`Destroyer`和`Carrier`类的比较：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: First, you will notice that the class is declared `abstract`, so we know that
    we must inherit from this class and we cannot use it directly. Scan down to near
    the end of the code and you will see an abstract function called `attack`. We
    now know that when we inherit from `Ship`, we will need to override and provide
    the code for a function called `attack`. This is just what we need, because you
    might remember that aircraft carriers launch attacks and destroyers shoot shells.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你会注意到这个类被声明为`abstract`，所以我们知道我们必须从这个类继承，而不能直接使用它。向下扫描代码，你会看到一个名为`attack`的抽象函数。我们现在知道，当我们从`Ship`继承时，我们需要重写并提供一个名为`attack`的函数的代码。这正是我们需要的，因为你可能记得航空母舰发动攻击，驱逐舰发射炮弹。
- en: Scan back to the top of the preceding code and you will see that the constructor
    declares four properties. Two of the properties are new and two have the same
    uses as the previous project, but how we call the constructor is what is interesting,
    and we will see that shortly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 向上扫描前面的代码，你会看到构造函数声明了四个属性。其中两个属性是新的，另外两个与之前的项目具有相同的用途，但我们如何调用构造函数才是有趣的，我们很快就会看到。
- en: The two new properties are `maxAttacks` and `maxHullIntegrity`, so that `Shipyard`
    restores them back to a level appropriate for the specific type of ship.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 两个新属性是`maxAttacks`和`maxHullIntegrity`，这样`Shipyard`就可以将它们恢复到适合特定类型船只的水平。
- en: In the `init` block, the properties that were not initialized in the constructor
    are initialized. What follows is the `takeDamage` function, which has the same
    functionality as the `takeDamage` function from the previous project, except that
    it is in just the `Ship` class and not both the `Carrier` and `Destroyer` classes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init`块中，未在构造函数中初始化的属性被初始化。接下来是`takeDamage`函数，它具有与上一个项目中的`takeDamage`函数相同的功能，只是它只在`Ship`类中，而不是在`Carrier`和`Destroyer`类中。
- en: Finally, we have a `showStats` function for printing the stats related values
    to the logcat window, meaning that those properties can be private too.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个`showStats`函数，用于将与日志窗口相关的统计值打印出来，这意味着这些属性也可以是私有的。
- en: Notice that all the properties are private except for `name` and one protected
    property called `attacksRemaining`. Remember that `protected` means that it is
    only visible inside instances that inherit from the `Ship` class.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了`name`和一个叫做`attacksRemaining`的受保护属性之外，所有属性都是私有的。请记住，`protected`意味着它只在继承自`Ship`类的实例内可见。
- en: 'Now, code the new `Destroyer` class as shown next:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照下面所示的方式编写新的`Destroyer`类：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, code the `Carrier` class that follows, and we can then compare `Destroyer`
    and `Carrier`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照下面所示的方式编写`Carrier`类，然后我们可以比较`Destroyer`和`Carrier`：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Notice that both the preceding two classes receive only a `String` value called
    `name` as a constructor parameter. You will further notice that `name` is not
    declared with `val` or `var`, so it is not a property, just a throw-away parameter
    that will not persist. The first thing each of the classes does is inherit from
    `Ship` and call the constructor of the `Ship` class, passing in `name` along with
    the values appropriate for either `Destroyer` or `Carrier`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面两个类只接收一个名为`name`的`String`值作为构造函数参数。您还会注意到`name`没有用`val`或`var`声明，因此它不是一个属性，只是一个不会持久存在的临时参数。每个类的第一件事是继承自`Ship`并调用`Ship`类的构造函数，同时传入适用于`Destroyer`或`Carrier`的值。
- en: Both classes have an attack-related property. `Destroyer` has `shotPower` and
    `Carrier` has `attackPower`. Then they both implement/override the `attack` function
    to suit the type of attack they will carry out. However, both types of attack
    will be triggered in the same way with the same function call.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 两个类都有与攻击相关的属性。`Destroyer`有`shotPower`，`Carrier`有`attackPower`。然后它们都实现/重写`attack`函数以适应它们将执行的攻击类型。但是，两种类型的攻击将以相同的方式通过相同的函数调用触发。
- en: 'Code the new `Shipyard` class as shown next:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 按照下面所示的方式编写新的`Shipyard`类：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the `Shipyard` class, there is now only one function. It is a polymorphic
    function that takes a `Ship` instance as a parameter. It then calls the `serviceShip`
    function from the super class, which will restore the ammo/attacks and `hullIntegrity`
    back to the levels appropriate for the type of ship.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Shipyard`类中，现在只有一个函数。它是一个多态函数，以`Ship`实例作为参数。然后调用超类的`serviceShip`函数，该函数将将弹药/攻击和`hullIntegrity`恢复到适合船只类型的水平。
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is true that the `Shipyard` class is superficial. We could have called `serviceShip`
    directly without passing the instance to another class. But it neatly demonstrates
    that we can treat two different classes as the same type because they inherit
    from the same type. The idea of polymorphism goes even further than this, as we
    will see in the next chapter when we talk about interfaces. After all, polymorphism
    means many things, not just two things.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shipyard`类是肤浅的这一说法是正确的。我们本可以直接调用`serviceShip`而不将实例传递给另一个类。但是，这清楚地表明我们可以将两个不同的类视为相同类型，因为它们都继承自相同的类型。多态的概念甚至比这更深入，我们将在下一章中讨论接口时看到。毕竟，多态意味着许多事物，而不仅仅是两件事物。'
- en: 'Finally, add code to the `onCreate` function in the `MainActivity` class to
    put our hard work in to action:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`MainActivity`类的`onCreate`函数中添加代码，让我们的辛勤工作付诸实践：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This code follows exactly the same pattern as the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码完全遵循与以下相同的模式：
- en: Attacking the friendly ship
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击友方船只
- en: Fighting back and sinking the enemy carrier
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反击并击沉敌方航母
- en: Printing the stats
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印统计数据
- en: Visiting the shipyard for repairs and rearming
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 造船厂进行修理和重新武装
- en: Printing the stats again
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打印统计数据
- en: Finishing off the final enemy
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成最后一个敌人
- en: 'And now we can observe the output:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以观察输出：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding output, we can see an almost identical output. However, we
    achieved it with less code and more encapsulation, and furthermore, if in six
    months we need a `Submarine` class that attacks with torpedoes, then we can add
    it without changing any of the preexisting code.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，我们可以看到几乎相同的输出。但是，我们用更少的代码和更多的封装实现了它，而且，如果在六个月后我们需要一个使用鱼雷进行攻击的`Submarine`类，那么我们可以在不更改任何现有代码的情况下添加它。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: If you haven't memorized everything, or if some of the code seemed a bit too
    in-depth, then you have still succeeded.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有记住所有内容，或者有些代码看起来有点太深入了，那么您仍然成功了。
- en: If you just understand that OOP is about writing reusable, extendable, and efficient
    code through encapsulation, inheritance, and polymorphism, then you have the potential
    to be a Kotlin master.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是理解OOP是通过封装、继承和多态编写可重用、可扩展和高效的代码，那么你就有成为Kotlin大师的潜力。
- en: Simply put, OOP enables us to use other people's code, even when those other
    people were not aware of exactly what we would be doing at the time they did the
    work.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，OOP使我们能够使用其他人的代码，即使那些其他人在编写代码时并不知道我们当时会做什么。
- en: All you have to do is keep practicing, because we will constantly be using these
    same concepts over and over again throughout the book, so you do not need to have
    even begun to master them at this point.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你所需要做的就是不断练习，因为我们将在整本书中一遍又一遍地使用这些概念，所以你不需要在这一点上甚至已经掌握它们。
- en: In the next chapter, we will be revisiting some concepts from this one, as well
    as looking at some new aspects of OOP and how it enables our Kotlin code to interact
    with our XML layouts.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重新审视本章的一些概念，以及探讨面向对象编程的一些新方面，以及它如何使我们的Kotlin代码与XML布局进行交互。
