- en: Chapter 5. Jasmine Spies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。Jasmine间谍
- en: A test double is a pattern on unit testing. It replaces a test dependent component
    with an equivalent implementation that is specific to the test scenario. These
    implementations are called **doubles** because although their behavior might be
    specific to the test, they act like, and have the same API as, the object they
    impersonate.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 测试替身是单元测试的一种模式。它用一个等效的实现替换测试依赖组件，该实现特定于测试场景。这些实现被称为**替身**，因为尽管它们的行为可能特定于测试，但它们的行为就像并且具有与其模拟的对象相同的API。
- en: Spies are Jasmine's solution to test doubles. At its core, a Jasmine **spy**
    is a special type of function that records all interactions that happen with it.
    Therefore, they are very useful when a returned value or change in an object's
    state can't be used to determine whether a test expectation was a success. In
    other words, Jasmine spies are perfect when a test success can only be determined
    by **behavior checking**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍是Jasmine对测试替身的解决方案。在其核心，Jasmine的**spy**是一种特殊类型的函数，记录与其发生的所有交互。因此，当返回值或对象状态的变化不能用于确定测试期望是否成功时，它们非常有用。换句话说，当测试成功只能通过**行为检查**来确定时，Jasmine间谍是完美的。
- en: The "bare" spy
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “裸”间谍
- en: 'To understand the concept of behavior checking, let''s revisit an example presented
    in [Chapter 3](ch03.html "Chapter 3. Testing Frontend Code"), *Testing Frontend
    Code*, and test the observable behavior of the `NewInvestmentView` test suite:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解行为检查的概念，让我们重新访问[第3章](ch03.html "第3章。测试前端代码")中提出的示例，*测试前端代码*，并测试`NewInvestmentView`测试套件的可观察行为：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: During the spec setup, it creates a new Jasmine spy using the `jasmine.createSpy`
    function while passing a name for it (`callback`). A Jasmine spy is a special
    kind of function that tracks calls and arguments made to it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在规范设置期间，使用`jasmine.createSpy`函数创建一个新的Jasmine间谍，并为其传递一个名称（`callback`）。Jasmine间谍是一种特殊类型的函数，用于跟踪对其进行的调用和参数。
- en: Then, it sets this spy as an observer of the View's create event using the `onCreate`
    function, and finally it invokes the `create` function to create a new investment.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它将这个间谍设置为View的create事件的观察者，使用`onCreate`函数，最后调用`create`函数创建一个新的投资。
- en: Later on, at the expectations, the spec uses the `toHaveBeenCalled` and `toHaveBeenCalledWith`
    matchers to check whether the `callbackSpy` was called and with the right parameters
    (`investment`), thereby making a behavior check.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，在期望中，规范使用`toHaveBeenCalled`和`toHaveBeenCalledWith`匹配器来检查`callbackSpy`是否被调用，并且使用了正确的参数（`investment`），从而进行行为检查。
- en: Spying on an object's functions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对对象的函数进行间谍活动
- en: A spy, by itself is very useful, but its true power comes with changing an object's
    original implementation using a counterpart spy.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个间谍本身非常有用，但它的真正力量在于使用对应的间谍来更改对象的原始实现。
- en: 'Consider the following example, which is aimed at validating that when the
    form is submitted, the `create` function of `view` has to be called:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例，旨在验证当提交表单时，必须调用`view`的`create`函数：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we make use of the global Jasmine function `spyOn` to change the `create`
    function of `view` with a spy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们利用全局Jasmine函数`spyOn`来使用间谍更改`view`的`create`函数。
- en: Then, later in the spec, we use the `toHaveBeenCalled` Jasmine matcher to validate
    that the `view.create` function was called.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在规范中稍后，我们使用`toHaveBeenCalled` Jasmine匹配器来验证`view.create`函数是否被调用。
- en: After the spec is done, Jasmine restores the object's original behavior.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 规范完成后，Jasmine会恢复对象的原始行为。
- en: Testing DOM events
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试DOM事件
- en: DOM events are used all the time while coding frontend applications, and sometimes
    we intend to write a spec that checks whether an event is being triggered.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写前端应用程序时，DOM事件经常被使用，有时我们打算编写一个规范，检查事件是否被触发。
- en: An event could be something like a form submission or an input that has changed,
    so how can we use spies to do that?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 事件可能是表单提交或输入已更改之类的东西，那么我们如何使用间谍来做到这一点呢？
- en: 'We can write a new acceptance criterion to the `NewInvestmentView` test suite
    to check that its form is being submitted when we click on the add button:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向`NewInvestmentView`测试套件添加一个新的验收标准，以检查在单击添加按钮时是否提交了其表单：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To write this spec, we use the `spyOnEvent` global function provided by the
    Jasmine jQuery plugin.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写这个规范，我们使用Jasmine jQuery插件提供的`spyOnEvent`全局函数。
- en: It works by accepting `view.20.18`, which is a DOM element, and the `submit`
    event we want to spy on. Then, later on, we use the jasmine jQuery matcher `toHaveBeenTriggeredOn`
    to check whether the event was triggered on the element.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过接受`view.20.18`，这是一个DOM元素，以及我们想要监视的`submit`事件来工作。然后，稍后，我们使用jasmine jQuery匹配器`toHaveBeenTriggeredOn`来检查事件是否在元素上触发。
- en: Summary
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you were presented with the concept of test doubles and how
    you can use spies to perform behavior checking on your specs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了测试替身的概念以及如何使用间谍来执行规范上的行为检查。
- en: In the next chapter, we will take a look at how we can use fakes and stubs to
    replace real dependencies of our specs and speed up their execution.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何使用伪造和存根来替换我们规范的真实依赖项，并加快其执行速度。
