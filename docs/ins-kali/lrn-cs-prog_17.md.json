["```cs\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nnamespace UnitTestDemo\n{\n\u00a0\u00a0\u00a0\u00a0[TestClass]\n\u00a0\u00a0\u00a0\u00a0public class UnitTest1\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void TestMethod1()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic struct Rectangle\n{\n\u00a0\u00a0\u00a0\u00a0public readonly int Left;\n\u00a0\u00a0\u00a0\u00a0public readonly int Top;\n\u00a0\u00a0\u00a0\u00a0public readonly int Right;\n\u00a0\u00a0\u00a0\u00a0public readonly int Bottom;\n\u00a0\u00a0\u00a0\u00a0public int Width => Right - Left;\n\u00a0\u00a0\u00a0\u00a0public int Height => Bottom - Top;\n\u00a0\u00a0\u00a0\u00a0public int Area => Width * Height;\n\u00a0\u00a0\u00a0\u00a0public Rectangle(int left, int top, int right, int bottom)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Left = left;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Top = top;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Right = right;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Bottom = bottom;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static Rectangle Empty => new Rectangle(0, 0, 0, 0); \n}\n```", "```cs\npublic static class RectangleExtensions\n{\n\u00a0\u00a0\u00a0\u00a0public static Rectangle Inflate(this Rectangle r, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int left, int top, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int right, int bottom) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(r.Left + left, r.Top + top, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r.Right + right, r.Bottom + bottom);\n\u00a0\u00a0\u00a0\u00a0public static Rectangle Deflate(this Rectangle r, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int left, int top, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int right, int bottom) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(r.Left - left, r.Top - top, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r.Right - right, r.Bottom - bottom);\n\u00a0\u00a0\u00a0\u00a0public static Rectangle Interset(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this Rectangle a, Rectangle b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int l = Math.Max(a.Left, b.Left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int r = Math.Min(a.Right, b.Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int t = Math.Max(a.Top, b.Top);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int bt = Math.Min(a.Bottom, b.Bottom);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (r >= l && bt >= t)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new Rectangle(l, t, r, bt);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Rectangle.Empty;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static bool IntersectsWith(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this Rectangle a, Rectangle b) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0((b.Left < a.Right) && (a.Left < b.Right)) &&\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0((b.Top < a.Bottom) && (a.Top < b.Bottom));\n}\n```", "```cs\n[TestClass]\npublic class RectangleTests\n{\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestEmpty()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle = Rectangle.Empty;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, rectangle.Left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, rectangle.Top);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, rectangle.Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, rectangle.Bottom);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestConstructor()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, 3, 4);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(1, rectangle.Left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(2, rectangle.Top);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(3, rectangle.Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(4, rectangle.Bottom);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestProperties()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, 3, 4);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(2, rectangle.Width, \"With must be 2\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(2, rectangle.Height, \"Height must be 2\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(4, rectangle.Area, \"Area must be 4\"); \n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestPropertiesMore()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, -3, -4);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.IsTrue(rectangle.Width < 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Width should be negative\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.IsFalse(rectangle.Height > 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Height should be negative\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nAssert.AreEqual(6, rectangle.Area, \"Area must be 6\");\n```", "```cs\nTestProperties\n\u00a0\u00a0\u00a0Source: RectangleTests.cs line 30\n\u00a0\u00a0\u00a0Duration: 29 ms\n\u00a0\u00a0Message: \n\u00a0\u00a0\u00a0\u00a0Assert.AreEqual failed. Expected:<6>. Actual:<4>. Area must be 6\n\u00a0\u00a0Stack Trace: \n\u00a0\u00a0\u00a0\u00a0RectangleTests.TestProperties() line 35\n```", "```cs\n[TestClass]\npublic class RectangleExtensionsTests\n{\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestInflate()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle1 = Rectangle.Empty.Inflate(1, 2, 3, 4);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(1, rectangle1.Left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(2, rectangle1.Top);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(3, rectangle1.Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(4, rectangle1.Bottom);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestDeflate()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle1 = Rectangle.Empty.Deflate(1, 2, 3, 4);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(-1, rectangle1.Left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(-2, rectangle1.Top);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(-3, rectangle1.Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(-4, rectangle1.Bottom);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestIntersectsWith()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, 10, 12);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle1 = new Rectangle(3, 4, 5, 6);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle2 = new Rectangle(5, 10, 20, 13);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle3 = new Rectangle(11, 13, 15, 16);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.IsTrue(rectangle.IntersectsWith(rectangle1));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.IsTrue(rectangle.IntersectsWith(rectangle2));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.IsFalse(rectangle.IntersectsWith(rectangle3));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0\u00a0public void TestIntersect()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, 10, 12);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle1 = new Rectangle(3, 4, 5, 6);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var rectangle3 = new Rectangle(11, 13, 15, 16);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var intersection1 = rectangle.Intersect(rectangle1);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var intersection3 = rectangle.Intersect(rectangle3);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(3, intersection1.Left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(4, intersection1.Top);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(5, intersection1.Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(6, intersection1.Bottom);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, intersection3.Left);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, intersection3.Top);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, intersection3.Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(0, intersection3.Bottom);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n[TestClass]\npublic class YourUnitTests\n{\n\u00a0\u00a0\u00a0[AssemblyInitialize]\n\u00a0\u00a0\u00a0public static void AssemblyInit(TestContext context) { }\n\u00a0\u00a0\u00a0[AssemblyCleanup]\n\u00a0\u00a0\u00a0public static void AssemblyCleanup() { }\n\u00a0\u00a0\u00a0[ClassInitialize]\n\u00a0\u00a0\u00a0public static void TestFixtureSetup(TestContext context) { }\n\u00a0\u00a0\u00a0[ClassCleanup]\n\u00a0\u00a0\u00a0public static void TestFixtureTearDown() { }\n\u00a0\u00a0\u00a0[TestInitialize]\n\u00a0\u00a0\u00a0public void Setup() { }\n\u00a0\u00a0\u00a0[TestCleanup]\n\u00a0\u00a0\u00a0public void TearDown() { }\n\n\u00a0\u00a0\u00a0[TestMethod]\n\u00a0\u00a0\u00a0public void TestMethod1() { }\n\u00a0\u00a0\u00a0TestMethod]\n\u00a0\u00a0\u00a0public void TestMethod2() { }\n}\n```", "```cs\nAssemblyInit()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// once per assembly\n\u00a0\u00a0TestFixtureSetup()\u00a0\u00a0\u00a0\u00a0// once per test class\n\u00a0\u00a0\u00a0\u00a0Setup()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// before each test of the class\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TestMethod1()\n\u00a0\u00a0\u00a0\u00a0TearDown()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// after each test of the class\n\u00a0\u00a0\u00a0\u00a0Setup()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TestMethod2()\n\u00a0\u00a0\u00a0\u00a0TearDown()\n\u00a0\u00a0TestFixtureTearDown() // once per test class\nAssemblyCleanup()\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// once per assembly\n```", "```cs\n[DataTestMethod]\n[DataRow(true, 3, 4, 5, 6)]\n[DataRow(true, 5, 10, 20, 13)]\n[DataRow(false, 11, 13, 15, 16)]\npublic void TestIntersectsWith_DataRows(\n\u00a0\u00a0\u00a0\u00a0bool result, \n\u00a0\u00a0\u00a0\u00a0int left, int top, int right, int bottom)\n{\n\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, 10, 12);\n\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rectangle.IntersectsWith(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(left, top, right, bottom)));\n}\n```", "```cs\nTest has multiple result outcomes\n\u00a0\u00a0\u00a04 Passed\nResults\n\u00a0\u00a0\u00a0\u00a01) TestIntersectsWith_DataRows\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Duration: 8 ms\n\u00a0\u00a0\u00a0\u00a02) TestIntersectsWith_DataRows (True,3,4,5,6)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Duration: < 1 ms\n\u00a0\u00a0\u00a0\u00a03) TestIntersectsWith_DataRows (True,5,10,20,13)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Duration: < 1 ms\n\u00a0\u00a0\u00a0\u00a04) TestIntersectsWith_DataRows (False,11,13,15,16)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Duration: < 1 ms\n```", "```cs\npublic static IEnumerable<object[]> GetData()\n{\n\u00a0\u00a0\u00a0\u00a0yield return new object[] { true, 3, 4, 5, 6 };\n\u00a0\u00a0\u00a0\u00a0yield return new object[] { true, 5, 10, 20, 13 };\n\u00a0\u00a0\u00a0\u00a0yield return new object[] { false, 11, 13, 15, 16 };\n}\n[DataTestMethod]\n[DynamicData(nameof(GetData), DynamicDataSourceType.Method)]\npublic void TestIntersectsWith_DynamicData(\n\u00a0\u00a0\u00a0\u00a0bool result, \n\u00a0\u00a0\u00a0\u00a0int left, int top, int right, int bottom)\n{\n\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, 10, 12);\n\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rectangle.IntersectsWith(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(left, top, right, bottom)));\n} \n```", "```cs\npublic TestContext TestContext { get; set; }\n```", "```cs\nexpected,left,top,right,bottom\ntrue,3,4,5,6\ntrue,5,10,20,13\nfalse,11,13,15,16\n```", "```cs\n[DataTestMethod]\n[DataSource(\"Microsoft.VisualStudio.TestTools.DataSource.CSV\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"TestData.csv\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"TestData#csv\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DataAccessMethod.Sequential)]\npublic void TestIntersectsWith_CsvData()\n{\n\u00a0\u00a0\u00a0\u00a0var rectangle = new Rectangle(1, 2, 10, 12);\n\u00a0\u00a0\u00a0\u00a0bool result = Convert.ToBoolean(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TestContext.DataRow[\"Expected\"]);\n\u00a0\u00a0\u00a0\u00a0int left = Convert.ToInt32(TestContext.DataRow[\"left\"]);\n\u00a0\u00a0\u00a0\u00a0int top = Convert.ToInt32(TestContext.DataRow[\"top\"]);\n\u00a0\u00a0\u00a0\u00a0int right = Convert.ToInt32(TestContext.DataRow[\"right\"]);\n\u00a0\u00a0\u00a0\u00a0int bottom = Convert.ToInt32(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TestContext.DataRow[\"bottom\"]);\n\u00a0\u00a0\u00a0\u00a0Assert.AreEqual(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rectangle.IntersectsWith(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Rectangle(left, top, right, bottom)));\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n\u00a0\u00a0\u00a0<configSections>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<section name=\"microsoft.visualstudio.testtools\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type=\"Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection, Microsoft.VisualStudio.TestPlatform.TestFramework.Extensions\"/>\n\u00a0\u00a0\u00a0</configSections>\n\u00a0\u00a0\u00a0<connectionStrings>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<add name=\"MyCSVConn\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0connectionString=\"TestData.csv\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0providerName=\"Microsoft.VisualStudio.TestTools.DataSource.CSV\" />\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</connectionStrings>\n\u00a0\u00a0\u00a0<microsoft.visualstudio.testtools>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<dataSources>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<add name=\"MyCSVDataSource\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0connectionString=\"MyCSVConn\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataTableName=\"TestData#csv\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dataAccessMethod=\"Sequential\"/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</dataSources>\n\u00a0\u00a0\u00a0</microsoft.visualstudio.testtools>\n</configuration>\n```", "```cs\n[DataTestMethod]\n[DataSource(\"MyCSVDataSource\")]\npublic void TestIntersectsWith_CsvData()\n{\n\u00a0\u00a0\u00a0\u00a0/* ... */\n}\n```"]