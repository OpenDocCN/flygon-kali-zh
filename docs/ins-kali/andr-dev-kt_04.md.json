["```kt\n    class Person \n```", "```kt\n    val person = Person() \n```", "```kt\n    // Instantiate Kotlin class inside Java file \n    Person person = new Person() \n\n    // Instantiate class inside Kotlin file \n    var person = Person() \n```", "```kt\n    //Test.kt \n    val name:String  \n```", "```kt\n    public class Person { \n\n        private int age; \n        private String name; \n\n        public Person(String name, int age) { \n            this.name = name; \n            this.age = age; \n        } \n\n        public int getAge() { \n            return age; \n        } \n\n        public void setAge(int age) { \n            this.age = age; \n        } \n\n        public String getName() { \n            return name; \n        } \n\n        public void setName(String name) { \n            this.name = name; \n        } \n    } \n```", "```kt\n    class Person { \n        var name: String \n        var age: Int \n\n        constructor(name: String, age: Int) { \n            this.name = name \n            this.age = age \n        } \n    } \n```", "```kt\n    class Person constructor(name: String, age: Int) { \n        var name: String \n        var age: Int \n\n        init { \n            this.name = name \n            this.age = age \n            println(\"Person instance created\") \n        } \n    } \n```", "```kt\n    class Person constructor(name: String, age: Int) { \n        var name: String = name \n        var age: Int = age \n    } \n```", "```kt\n    class Person constructor (var name: String, var age: Int) \n```", "```kt\n    class Person (var name: String, var age: Int)\n```", "```kt\n    class Person( \n        var name: String,  \n        var age: Int \n    ) \n```", "```kt\n    class Person( \n        var name: String, \n\n        // Read-write property (generated getter and setter)\n\n        val age: Int      // Read-only property (generated getter) \n    ) \n\n    \\\\usage \n    val person = Person(\"Eva\", 25) \n\n    val name = person.name \n    person.name = \"Kate\" \n\n    val age = person.age \n    person.age = 28 \\\\error: read-only property \n```", "```kt\n    class Car (var speed: Double) \n\n    //Java access properties using method access syntax \n    Car car = new Car(7.4) \n    car.setSpeed(9.2) \n    Double speed = car.getSpeed(); \n\n    //Kotlin access properties using property access syntax \n    val car: Car = Car(7.4) \n    car.speed = 9.2 \n    val speed = car.speed \n```", "```kt\n    val car = Car(7.0) \n    println(car.speed)  //prints 7.0 \n    car.speed++ \n    println(car.speed)  //prints 8.0 \n    car.speed-- \n    car.speed-- \n    println(car.speed) //prints: 6.0 \n```", "```kt\n    ++speed //pre increment\n\n    --speed //pre decrement \n\n    speed++ //post increment \n\n    speed-- //post decrement\n\n```", "```kt\n    var speed = 1.0 \n    println(++speed) // Prints: 2.0   \n    println(speed)   // Prints: 2.0 \n```", "```kt\n    var speed = 1.0 \n    println(speed++) // Prints: 1.0 \n    println(speed) // Prints: 2.0 \n```", "```kt\n    //Java class declaration \n    public class Fish { \n        private int size; \n        private boolean hungry; \n\n        public Fish(int size, boolean isHungry) { \n            this.size = size; \n            this.hungry = isHungry; \n        } \n\n        public int getSize() { \n            return size; \n        } \n\n        public void setSize(int size) { \n            this.size = size; \n        } \n\n        public boolean isHungry() { \n            return hungry; \n        } \n\n        public void setHungry(boolean hungry) { \n            this.hungry = hungry; \n        } \n    } \n\n    //Kotlin class usage \n    val fish = Fish(12, true) \n    fish.size = 7 \n    println(fish.size) // Prints: 7 \n    fish.isHungry = true \n    println(fish.isHungry) // Prints: true \n```", "```kt\n    //Kotlin class declaration \n    class Fish(var size: Int, var hungry: Boolean) \n\n    //class usage in Java \n    Fish fish = new Fish(12, true); \n    fish.setSize(7); \n    System.out.println(fish.getSize()); \n    fish.setHungry(false); \n    System.out.println(fish.getHungry()); \n```", "```kt\n    class MainActivity : AppCompatActivity() { \n\n        override fun onDestroy() { // 1 \n            super.onDestroy() \n\n            isFinishing() // method access syntax \n            isFinishing // property access syntax \n            finishing // error \n        } \n    } \n```", "```kt\n    fragment.setHasOptionsMenu(true) \n    fragment.hasOptionsMenu = true // Error!\n```", "```kt\n    class Fruit(var weight: Double, \n\n                val fresh: Boolean, \n\n                val ecoRating: Int) \n```", "```kt\nclass Fruit(var weight: Double, val fresh: Boolean, ecoRating: Int)     \n\n{ \n    var ecoRating: Int = ecoRating  \n} \n```", "```kt\n    class Fruit(var weight: Double, val fresh: Boolean) { \n        var ecoRating: Int = 3 \n    } \n```", "```kt\n    class Apple(var weight: Double, val fresh: Boolean) { \n        var ecoRating: Int = when(weight) { \n            in 0.5..2.0 -> 5 \n            in 0.4..0.5 -> 4 \n            in 0.3..0.4 -> 3 \n            in 0.2..0.3 -> 2 \n            else -> 1 \n        } \n    } \n```", "```kt\n    class Fruit(var weight: Double) { \n        var ecoRating = 3 \n    } \n```", "```kt\n    class Fruit(var weight: Double) { \n        var ecoRating: Int = 3 \n        get() { \n            println(\"getter value retrieved\") \n            return field \n        } \n        set(value) { \n            field = if (value < 0) 0 else value \n            println(\"setter new value assigned $field\") \n        } \n    } \n\n    // Usage \n    val fruit = Fruit(12.0) \n    val ecoRating = fruit.ecoRating \n\n    // Prints: getter value retrieved \n    fruit.ecoRating = 3;        \n\n    // Prints: setter new value assigned 3 \n    fruit.ecoRating = -5;       \n\n    // Prints: setter new value assigned 0 \n```", "```kt\n    class Fruit(var weight: Double) { \n        val heavy             // 1 \n        get() = weight > 20  \n    } \n\n    //usage \n    var fruit = Fruit(7.0) \n    println(fruit.heavy) //prints: false \n    fruit.weight = 30.5 \n    println(fruit.heavy) //prints: true \n```", "```kt\n    class Fruit(var weight: Double) { \n        val isHeavy = weight > 20 \n    } \n\n    var fruit = Fruit(7.0) \n    println(fruit.isHeavy) // Prints: false \n    fruit.weight = 30.5 \n    println(fruit.isHeavy) // Prints: false \n```", "```kt\n    class Car { \n        var usable: Boolean = true \n        var inGoodState: Boolean = true \n\n       var crashed: Boolean \n       get() = !usable && !inGoodState \n       set(value) { \n           usable = false \n           inGoodState = false \n       } \n    } \n```", "```kt\n    class MainActivity : AppCompatActivity() { \n\n       private var button: Button? = null \n\n       override fun onCreate(savedInstanceState: Bundle?) { \n           super.onCreate(savedInstanceState) \n           button = findViewById(R.id.button) as Button \n       } \n    } \n```", "```kt\n    class MainActivity : AppCompatActivity() { \n\n        private lateinit var button: Button \n\n        override fun onCreate(savedInstanceState: Bundle?) { \n            button = findViewById(R.id.button) as Button \n            button.text = \"Click Me\" \n        } \n    } \n```", "```kt\n    @Rule \n    val activityRule = ActivityTestRule(MainActivity::class.Java) \n```", "```kt\n    @JvmField @Rule \n    val activityRule = ActivityTestRule(MainActivity::class.Java) \n```", "```kt\n    val activityRule \n    @Rule get() = ActivityTestRule(MainActivity::class.java) \n```", "```kt\n    @get:Rule  \n    val activityRule = ActivityTestRule(MainActivity::class.Java) \n```", "```kt\n    inline val now: Long  \n        get() { \n            println(\"Time retrieved\") \n            return System.currentTimeMillis() \n        } \n```", "```kt\n    println(\"Time retrieved\") \n    System.currentTimeMillis() \n```", "```kt\n    class Fruit(val weight: Int) { \n        constructor(weight: Int, fresh: Boolean) : this(weight) { } \n    } \n\n    //class instantiation \n    val fruit1 = Fruit(10) \n    val fruit2 = Fruit(10, true) \n```", "```kt\n    class Test(val weight: Int) { \n        var fresh: Boolean? = null \n\n        //define fresh property in class body \n\n        constructor(weight: Int, fresh: Boolean) : this(weight) { \n            this.fresh = fresh \n\n            //assign constructor parameter to fresh property \n        } \n    } \n```", "```kt\n    val fruit = Fruit(10) \n    println(fruit.weight) // prints: 10 \n    println(fruit.fresh) // prints: null \n```", "```kt\n    class Fruit(val weight: Int) { \n        var fresh: Boolean = true \n\n        constructor(weight: Int, fresh: Boolean) : this(weight) { \n            this.fresh = fresh \n        } \n    } \n\n    val fruit = Fruit(10) \n    println(fruit.weight) // prints: 10 \n    println(fruit.fresh) // prints: true \n```", "```kt\nclass Fruit(val weight: Int) { \n\n    constructor(weight: Int, fresh: Boolean) : this(weight) // 1 \n\n    constructor(weight: Int, fresh: Boolean, color: String) : \n\n                this(weight, fresh) // 2 \n} \n```", "```kt\nclass ProductView : View { \n   constructor(ctx: Context) : super(ctx) \n   constructor(ctx: Context, attrs : AttributeSet) : \n\n               super(ctx, attrs) \n} \n```", "```kt\n    class Fruit private constructor()  \n```", "```kt\n    class Fruit @Inject constructor() \n```", "```kt\n    class Fruit @Inject private constructor { \n        var weight: Int? = null \n    } \n```", "```kt\n    class Fruit(var weight:Double, fresh:Boolean) \n\n    val fruit = Fruit(12.0, true) \n    println(fruit.weight) \n    println(fruit.fresh) // error \n```", "```kt\n        val view1 = View(context) \n        val view1 = View(context, attributeSet) \n        val view1 = View(context, attributeSet, defStyleAttr) \n```", "```kt\n        val animal = Animal() \n        fruit.setWeight(10) \n        fruit.setSpeed(7.4) \n        fruit.setColor(\"Gray\")\n```", "```kt\n        Retrofit retrofit = new Retrofit.Builder() \n                                .baseUrl(\"https://api.github.com/\") \n                                .build();\n```", "```kt\n    class Fruit(weight: Int = 0, fresh: Boolean = true, color: \n\n                String = \"Green\") \n```", "```kt\n    val fruit = Fruit(7.4, false) \n    println(fruit.fresh) // prints: false \n\n    val fruit2 = Fruit(7.4) \n    println(fruit.fresh) // prints: true \n```", "```kt\nval fruit1 = Fruit (weight = 7.4, fresh = true, color = \"Yellow\") \n\nval fruit2 = Fruit (color = \"Yellow\") \n```", "```kt\n    class Plant // Implicitly extends Any \n    class Plant : Any // Explicitly extends Any \n```", "```kt\n    class Plant  \n    class Tree : Plant() // Error \n```", "```kt\n    open class Plant  \n    class Tree : Plant() \n```", "```kt\n    open class Plant { \n        var height: Int = 0 \n        fun grow(height: Int) {} \n    } \n\n    class Tree : Plant() { \n        override fun grow(height: Int) { // Error \n            this.height += height \n        } \n    } \n```", "```kt\n    open class Plant { \n        var height: Int = 0 \n        open fun grow(height: Int) {} \n    } \n\n    class Tree : Plant() { \n        override fun grow(height: Int) { \n            this.height += height \n        } \n    } \n```", "```kt\n    open class Plant { \n        open var height: Int = 0 \n        open fun grow(height: Int) {} \n    } \n\n    class Tree : Plant() { \n        override var height: Int = super.height \n            get() = super.height \n            set(value) { field = value} \n\n        override fun grow(height: Int) { \n            this.height += height \n        } \n    } \n```", "```kt\n    open class Plant { \n        var height: Int = 0 \n\n        open fun grow(height: Int) {} \n    } \n\n    class Tree : Plant() { \n        final override fun grow(height: Int) { \n            this.height += height \n        } \n    } \n\n    class Oak : Tree() { \n        // 1\n    } \n```", "```kt\n    abstract class Plant { \n        var height: Int = 0 \n\n        abstract fun grow(height: Int) \n    } \n\n    class Tree : Plant() { \n        override fun grow(height: Int) { \n            this.height += height \n        } \n    } \n    val plant = Plant() \n\n    // error: abstract class can't be instantiated \n    val tree = Tree() \n```", "```kt\n    class CustomView : View { \n\n        constructor(context: Context?) : this(context, null) \n\n        constructor(context: Context?, attrs: AttributeSet?) : \n\n                    this(context, attrs, 0) \n\n        constructor(context: Context?, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) { \n            //... \n        } \n     } \n```", "```kt\n    class KotlinView @JvmOverloads constructor( \n        context: Context,  \n        attrs: AttributeSet? = null,  \n        defStyleAttr: Int = 0 \n    ) : View(context, attrs, defStyleAttr) \n```", "```kt\npublic SampleView(Context context) { \n    super(context); \n} \n\npublic SampleView(Context context, @Nullable AttributeSet attrs) { \n    super(context, attrs); \n} \n\npublic SampleView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { \n    super(context, attrs, defStyleAttr); \n} \n```", "```kt\n    interface EmailProvider { \n        fun validateEmail() \n   } \n```", "```kt\n    class User:EmailProvider { \n        override fun validateEmail() { \n            //email validation \n        } \n    } \n```", "```kt\n    open class Person {\n\n        interface EmailProvider { \n            fun validateEmail() \n        } \n\n        class User: Person(), EmailProvider { \n        override fun validateEmail(){ \n            //email validation \n        } \n    } \n```", "```kt\n    interface EmailProvider { \n        val email: String \n        fun validateEmail() \n    } \n```", "```kt\n    class User() : EmailProvider { \n\n        override val email: String = \"UserEmailProvider\" \n\n        override fun validateEmail() { \n            //email validation \n        } \n    } \n```", "```kt\n    class User(override val email: String) : EmailProvider { \n        override fun validateEmail() { \n            //email validation \n        } \n    } \n```", "```kt\n    interface EmailProvider { \n\n        fun validateEmail(): Boolean \n\n        val email: String \n\n        val nickname: String \n        get() = email.substringBefore(\"@\") \n    } \n    class User(override val email: String) : EmailProvider { \n        override fun validateEmail() { \n            //email validation \n        } \n    } \n```", "```kt\n    val user = User (\" johnny.bravo@test.com\") \n    print(user.nickname) //prints: johnny \n```", "```kt\n    interface EmailProvider { \n\n        val email: String \n\n        val nickname: String \n        get() = email.substringBefore(\"@\") \n\n        fun validateEmail() = nickname.isNotEmpty() \n    } \n\n    class User(override val email: String) : EmailProvider \n\n    //usage \n    val user = User(\"joey@test.com\") \n    print(user.validateEmail()) // Prints: true \n    print(user.nickname) // Prints: joey \n```", "```kt\n    interface A { \n        fun foo() { \n            println(\"A\") \n        } \n    } \n\n    interface B { \n        fun foo() { \n            println(\"B\") \n        } \n    } \n```", "```kt\n    class Item : A, B { \n        override fun foo() { \n            println(\"Item\") \n        } \n    } \n\n    //usage \n    val item = Item() \n    item.foo() //prints: Item \n```", "```kt\n    class Item : A, B { \n        override fun foo() { \n            val a = super<A>.foo() \n            val b = super<B>.foo() \n            print(\"Item $a $b\") \n        } \n    } \n\n    //usage \n    val item = Item() \n    item.foo() \n\n    //Prints: A\n\n              B\n\n              ItemsAB\n```", "```kt\n    class Product(var name: String?, var price: Double?) { \n\n       override fun hashCode(): Int { \n           var result = if (name != null) name!!.hashCode() else 0 \n           result = 31 * result + if (price != null) price!!.hashCode() \n\n           else 0 \n           return result \n       } \n\n       override fun equals(other: Any?): Boolean = when { \n           this === other -> true \n           other == null || other !is Product -> false \n           if (name != null) name != other.name else other.name != \n\n                             null -> false \n           price != null -> price == other.price \n           else -> other.price == null \n       } \n\n       override fun toString(): String { \n           return \"Product(name=$name, price=$price)\" \n       } \n    } \n```", "```kt\n    class Product(var name: String, var price: Double) \n\n    // normal class\n\n    data class Product(var name: String, var price: Double) \n\n    // data class\n```", "```kt\n    product.equals(product2)  \n```", "```kt\n    public class Product { \n\n        private String name; \n        private Double price; \n\n        public Product(String name, Double price) { \n            this.name = name; \n            this.price = price; \n        } \n\n        @Override \n        public int hashCode() { \n            int result = name != null ? name.hashCode() : 0; \n         result = 31 * result + (price != null ? \n\n                                 price.hashCode() : 0); \n            return result; \n    } \n\n        @Override \n        public boolean equals(Object o) { \n            if (this == o) { \n                return true; \n            } \n            if (o == null || getClass() != o.getClass()) { \n                return false; \n            } \n\n            Product product = (Product) o; \n\n            if (name != null ? !name.equals(product.name) : \n\n            product.name != null) { \n                return false; \n            } \n            return price != null ? price.equals(product.price) : \n\n            product.price == null; \n        } \n\n        public String getName() { \n            return name; \n        } \n\n        public void setName(String name) { \n            this.name = name; \n        } \n\n        public Double getPrice() { \n            return price; \n        } \n\n        public void setPrice(Double price) { \n            this.price = price; \n        } \n    } \n```", "```kt\n    data class Product(var name: String, var price: Double) \n```", "```kt\n    data class Product(var name:String, var price:Double) \n\n    val productA = Product(\"Spoon\", 30.2) \n    val productB = Product(\"Spoon\", 30.2) \n    val productC = Product(\"Fork\", 17.4) \n\n    print(productA == productA) // prints: true \n    print(productA == productB) // prints: true \n    print(productB == productA) // prints: true \n    print(productA == productC) // prints: false \n    print(productB == productC) // prints: false \n```", "```kt\n    data class Product(var name:String, var price:Double) \n    val productA = Product(\"Spoon\", 30.2) \n    println(productA) // prints: Product(name=Spoon, price=30.2) \n```", "```kt\n    data class Product(var name: String, var price: Double) \n\n    val productA = Product(\"Spoon\", 30.2) \n    print(productA) // prints: Product(name=Spoon, price=30.2) \n\n    val productB = productA.copy() \n    print(productB) // prints: Product(name=Spoon, price=30.2) \n```", "```kt\n        val productB = Product(productA) \n```", "```kt\n        val productB = ProductFactory.newInstance(productA)\n```", "```kt\n    data class Product(var name:String, var price:Double) \n\n    val productA = Product(\"Spoon\", 30.2) \n    print(productA) // prints: Product(name=Spoon, price=30.2) \n\n    val productB = productA.copy(price = 24.0) \n    print(productB) // prints: Product(name=Spoon, price=24.0) \n\n    val productC = productA.copy(price = 24.0, name = \"Knife\") \n    print(productB) // prints: Product(name=Knife, price=24.0) \n```", "```kt\n    //Mutable object - modify object state \n    data class Product(var name:String, var price:Double) \n\n    var productA = Product(\"Spoon\", 30.2) \n    productA.name = \"Knife\" \n\n    //immutable object - create new object instance \n    data class Product(val name:String, val price:Double) \n\n    var productA = Product(\"Spoon\", 30.2) \n    productA = productA.copy(name = \"Knife\") \n```", "```kt\n    data class Person(val firstName: String, val lastName: String, \n\n                      val height: Int) \n\n    val person = Person(\"Igor\", \"Wojda\", 180) \n    var (firstName, lastName, height) = person \n    println(firstName) // prints: \"Igor\" \n    println(lastName) // prints: \"Wojda\" \n    println(height) // prints: 180 \n```", "```kt\n    val person = Person(\"Igor\", \"Wojda\", 180) \n    var firstName = person.component1() \n    var lastName = person.component2() \n    var height = person.component3() \n```", "```kt\n    val person = Person(\"Igor\", \"Wojda\", 180) \n    var (firstName, _, height) = person \n    println(firstName) // prints: \"Igor\" \n    println(height) // prints: 180 \n```", "```kt\n    val person = Person(\"Igor\", \"Wojda\", 180) \n    var firstName= person.component1() \n    var height = person.component3() \n```", "```kt\n    val file = \"MainActivity.kt\" \n    val (name, extension) = file.split(\".\", limit = 2) \n```", "```kt\n    val authors = listOf( \n       Person(\"Igor\", \"Wojda\", 180), \n       Person(\"Marcin\", \"Moska\u0142a\", 180) \n    ) \n\n    println(\"Authors:\") \n    for ((name, surname) in authors) { \n        println(\"$name $surname\") \n    }\n```", "```kt\ndata class Point(var x: Double, var y: Double) { \n   operator fun plus(point: Point) = Point(x + point.x, y+ point.y) \n\n   operator fun times(other: Int) = Point(x * other, y * other) \n} \n\n//usage \nvar p1 = Point(2.9, 5.0) \nvar p2 = Point(2.0, 7.5) \n\nprintln(p1 + p2)     // prints: Point(x=4.9, y=12.5) \nprintln(p1 * 3)      // prints: Point(x=8.7, y=21.0) \n```", "```kt\n    p1.plus(p2) \n    p1.times(3) \n```", "```kt\ndata class Point(var x: Double, var y: Double) { \n   operator fun plus(point: Point) = Point(x + point.x, y +point.y) \n\n   operator fun plus(vector:Double) = Point(x + vector, y + vector) \n} \n\nvar p1 = Point(2.9, 5.0) \nvar p2 = Point(2.0, 7.5) \n\nprintln(p1 + p2) // prints: Point(x=4.9, y=12.5) \nprintln(p1 + 3.1) // prints: Point(x=6.0, y=10.1) \n```", "```kt\n    var p1 = Point(2.9, 7.0) \n    var p2 = Point(2.0, 7.5) \n\n    p1 += p2 \n    println(p1) // prints: Point(x=4.9, y=14.5) \n```", "```kt\n    var p1 = Wallet(39.0, 14.5) \n    p1 += p2          // update state of p1  \n    val p3 = p1 + p2  //creates new object p3      \n```", "```kt\n    data class Point(var x: Double, var y: Double) { \n        init { \n            println(\"Point created $x.$y\") \n        } \n        operator fun plus(point: Point) = Point(x + point.x, y + point.y) \n\n        operator fun plusAssign(point:Point) { \n            x += point.x \n            y += point.y \n        } \n    } \n\n    \\\\usage \n    var p1 = Point(2.9, 7.0) \n    var p2 = Point(2.0, 7.5) \n    val p3 = p1 + p2 \n    p1 += p2 // Error: Assignment operations ambiguity \n```", "```kt\n    // Java \n    public class Point { \n\n        private final int x; \n        private final int y; \n\n        public Point(int x, int y) { \n            this.x = x; \n            this.y = y; \n        } \n\n        public int getX() { \n            return x; \n        } \n\n        public int getY() { \n            return y; \n        } \n\n        public Point plus(Point point) { \n            return new Point(point.getX() + x, point.getY() + y); \n        } \n    } \n\n    //Main.kt \n    val p1 = Point(1, 2) \n    val p2 = Point(3, 4) \n    val p3 = p1 + p2; \n    println(\"$x:{p3.x}, y:${p3.y}\") //prints: x:4, y:6  \n```", "```kt\n    public class Singleton { \n\n        private Singleton() { \n        } \n\n        private static Singleton instance; \n\n        public static Singleton getInstance() { \n            if (instance == null) { \n                instance = new Singleton(); \n            } \n\n            return instance; \n        } \n    } \n```", "```kt\n    //synchronized  \n    public class Singleton { \n\n        private static Singleton instance = null; \n\n        private Singleton(){ \n        } \n\n        private synchronized static void createInstance() { \n            if (instance == null) { \n                instance = new Singleton(); \n            } \n        } \n\n        public static Singleton getInstance() { \n            if (instance == null) createInstance(); \n            return instance; \n        } \n    } \n```", "```kt\n    object Singleton \n```", "```kt\n    object SQLiteSingleton { \n        fun getAllUsers(): List<User> { \n            //... \n        } \n    } \n```", "```kt\n    SQLiteSingleton.getAllUsers() \n```", "```kt\n    ServiceConnection serviceConnection = new ServiceConnection() { \n        @Override \n        public void onServiceDisconnected(ComponentName name) { \n            ...\n\n        } \n\n        @Override \n        public void onServiceConnected(ComponentName name, \n\n            IBinder service) \n\n        {\n\n            ... \n        } \n    } \n```", "```kt\n    val serviceConnection = object: ServiceConnection { \n\n     override fun onServiceDisconnected(name: ComponentName?) { } \n\n     override fun onServiceConnected(name: ComponentName?, \n\n         service: IBinder?) { } \n    } \n```", "```kt\n    val broadcastReceiver = object : BroadcastReceiver() { \n       override fun onReceive(context: Context, intent: Intent) { \n           println(\"Got a broadcast ${intent.action}\") \n       } \n    } \n\n    val intentFilter = IntentFilter(\"SomeAction\"); \n    registerReceiver(broadcastReceiver, intentFilter) \n```", "```kt\n    interface Player { \n        fun play() \n    } \n\n    fun playWith(player: Player) { \n        print(\"I play with\") \n        player.play() \n    } \n```", "```kt\n    open class VideoPlayer { \n        fun play() { \n            println(\"Play video\") \n        } \n    } \n```", "```kt\n    val player = object: VideoPlayer(), Player { } \n    playWith(player) \n```", "```kt\n    val data = object { \n        var size = 1 \n        fun update() { \n            //... \n        } \n    } \n\n    data.size = 2 \n    data .update() \n```", "```kt\n    open class VideoPlayer { \n        fun play() { \n            println(\"Play video\") \n        } \n    } \n\n    interface Player{ \n        fun play() \n        fun stop() \n    } \n\n    //usage \n    val player = object: VideoPlayer(), Player { \n        var duration:Double = 0.0 \n\n        fun stop() { \n            println(\"Stop  video\") \n        } \n    } \n\n    player.play() // println(\"Play video\") \n    player.stop() // println(\"Stop  video\") \n    player.duration = 12.5 \n```", "```kt\n    class ProductDetailsActivity { \n\n        companion object { \n        } \n    } \n```", "```kt\n    //ProductDetailsActivity.kt \n    class ProductDetailsActivity : AppCompatActivity() { \n\n        override fun onCreate(savedInstanceState: Bundle?) { \n            super.onCreate(savedInstanceState) \n            val product = intent.getParcelableExtra<Product>\n\n                (KEY_PRODUCT) // 3 \n            //... \n        } \n\n        companion object { \n\n            const val KEY_PRODUCT = \"product\" // 1 \n\n            fun start(context: Context, product: Product) { // 2 \n                val intent = Intent(context, \n\n                    ProductDetailsActivity::class.java) \n                intent.putExtra(KEY_PRODUCT, product) // 3 \n                context.startActivity(intent) \n            } \n        }   \n    } \n\n    // Start activity \n    ViewProductActivity.start(context, productId) // 2 \n```", "```kt\n    class Car { \n        init { \n            count++; \n        } \n\n        companion object { \n            var count:Int = 0 \n            private set \n        } \n    } \n```", "```kt\n    println(Car.count) // Prints 0   \n    Car() \n    Car() \n    println(Car.count) // Prints: 2 \n```", "```kt\n    class Car { \n        init { \n            count++; \n            println(\"Car created\") \n        } \n\n        companion object { \n            var count: Int = 0 \n\n            init { \n                println(\"Car companion object created\") \n            } \n        }  \n    } \n```", "```kt\n    Car.count  // Prints: Car companion object created \n    Car() // Prints: Car created \n```", "```kt\n    Car()  \n    //Prints: Car companion object created \n    //Prints: Car created \n\n    Car()  //Prints: Car created \n    Car.count \n```", "```kt\n  abstract class Provider<T> { // 1 \n\n     abstract fun creator(): T // 2 \n\n     private var instance: T? = null // 3 \n     var override: T? = null // 4 \n\n     fun get(): T = override ?: instance ?: creator().also { instance = it } //5 \n  } \n```", "```kt\n  interface MarvelRepository { \n\n     fun getAllCharacters(searchQuery: String?): Single<List<MarvelCharacter>> \n\n     companion object : Provider<MarvelRepository>() { \n         override fun creator() = MarvelRepositoryImpl() \n     } \n  } \n```", "```kt\n    MarvelRepository.get() \n```", "```kt\n    MarvelRepository.override = object : MarvelRepository { \n        override fun getAllCharacters(searchQuery: String?): \n\n        Single<List<MarvelCharacter>> { \n            //... \n        } \n    } \n```", "```kt\n    enum class Color { \n        RED, \n        ORANGE, \n        BLUE, \n        GRAY, \n        VIOLET \n    } \n\n    val favouriteColor = Color.BLUE \n```", "```kt\n    val selectedColor = Color.valueOf(\"BLUE\") \n    println(selectedColor == Color.BLUE) // prints: true \n```", "```kt\n    val selectedColor = enumValueOf<Color>(\"BLUE\") \n    println(selectedColor == Color.BLUE) // prints: true \n```", "```kt\n    for (color in Color.values()) { \n        println(\"name: ${it.name}, ordinal: ${it.ordinal}\") \n    } \n```", "```kt\n    for (color in enumValues<Color>()) { \n        println(\"name: ${it.name}, ordinal: ${it.ordinal}\")    \n    } \n\n    // Prints: \n    name: RED, ordinal: 0 \n    name: ORANGE, ordinal: 1 \n    name: BLUE, ordinal: 2 \n    name: GRAY, ordinal: 3 \n    name: VIOLET, ordinal: 4 \n```", "```kt\n    enum class Color(val r: Int, val g: Int, val b: Int) { \n        RED(255, 0, 0), \n        ORANGE(255, 165, 0), \n        BLUE(0, 0, 255), \n        GRAY(49, 79, 79), \n        VIOLET(238, 130, 238) \n    } \n\n    val color = Color.BLUE \n    val rValue =color.r \n    val gValue = color.g \n    val bValue = color.b \n```", "```kt\n    enum class Color(val r: Int, val g: Int, val b: Int) { \n        BLUE(0, 0, 255), \n        ORANGE(255, 165, 0), \n        GRAY(49, 79, 79), \n        RED(255, 0, 0), \n        VIOLET(238, 130, 238); \n\n        fun rgb() = r shl 16 + g shl 8 + b \n    } \n\n    fun printHex(num: Int) { \n        println(num.toString(16)) \n    } \n\n    printHex(Color.BLUE.rgb()) // Prints: ff \n    printHex(Color.ORANGE.rgb()) // Prints: ffa500 \n    printHex(Color.GRAY.rgb()) // Prints: 314f4f \n```", "```kt\n    enum class Color(val r: Int, val g: Int, val b: Int) { \n        BLUE(0, 0, 255), \n        ORANGE(255, 165, 0), \n        GRAY(49, 79, 79), \n        RED(255, 0, 0), \n        VIOLET(238, 130, 238); \n\n        init { \n            require(r in 0..255) \n            require(g in 0..255) \n            require(b in 0..255) \n       } \n\n       fun rgb() = r shl 16 + g shl 8 + b \n    } \n```", "```kt\n    GRAY(33, 33, 333) // IllegalArgumentException: Failed requirement. \n```", "```kt\n    enum class Temperature { COLD, NEUTRAL, WARM } \n\n    enum class Color(val r: Int, val g: Int, val b: Int) { \n        RED(255, 0, 0) { \n            override val temperature = Temperature.WARM \n        },  \n        ORANGE(255, 165, 0) { \n            override val temperature = Temperature.WARM \n        },  \n        BLUE(0, 0, 255) { \n            override val temperature = Temperature.COLD \n        }, \n        GRAY(49, 79, 79) { \n            override val temperature = Temperature.NEUTRAL \n        },  \n        VIOLET(238, 130, 238 { \n            override val temperature = Temperature.COLD \n        }; \n\n        init { \n            require(r in 0..256) \n            require(g in 0..256) \n            require(b in 0..256) \n        } \n\n        fun rgb() = (r * 256 + g) * 256 + b \n\n        abstract val temperature: Temperature \n    } \n\n    println(Color.BLUE.temperature) //prints: COLD \n    println(Color.ORANGE.temperature) //prints: WARM \n    println(Color.GRAY.temperature) //prints: NEUTRAL \n```", "```kt\n    var pair = \"Everest\" to 8848 \n```", "```kt\n    public data class Pair<out A, out B>( // 1 \n       public val first: A, \n       public val second: B \n    ) : Serializable { \n\n       public override fun toString(): String = \"($first, $second)\" \n\n       // 2 \n    } \n```", "```kt\n    val mountain = \"Everest\"; \n    var pair = mountain.to(8848) \n```", "```kt\n    val mountain = \"Everest\"; \n    var pair = mountain.to(8848) \n    println(pair.first) //prints: Everest \n    println(pair.second) //prints: 8848 \n```", "```kt\n    data class Point(val x: Int, val y: Int) {\n\n        infix fun moveRight(shift: Int) = Point(x + shift, y)\n\n    }\n```", "```kt\n    val pointA = Point(1,4) \n    val pointB = pointA moveRight 2 \n    println(pointB) //prints: Point(x=3, y=4) \n```", "```kt\n    val card = KING of HEARTS \n```", "```kt\n    enum class Suit { \n        HEARTS,  \n        SPADES,  \n        CLUBS,  \n        DIAMONDS \n    } \n\n    enum class Rank { \n        TWO, THREE, FOUR, FIVE, \n        SIX, SEVEN, EIGHT, NINE, \n        TEN, JACK, QUEEN, KING, ACE;  \n    } \n```", "```kt\n    data class Card(val rank: Rank, val suit: Suit) \n```", "```kt\n    val card = Card(Rank.KING, Suit.HEARTS) \n```", "```kt\n    enum class Rank { \n        TWO, THREE, FOUR, FIVE, \n        SIX, SEVEN, EIGHT, NINE, \n        TEN, JACK, QUEEN, KING, ACE; \n\n        infix fun of(suit: Suit) = Card(this, suit) \n    } \n```", "```kt\n    val card = Rank.KING.of(Suit.HEARTS) \n```", "```kt\n    val card = Rank.KING of Suit.HEARTS \n```", "```kt\n    import Rank.KING \n    import Suit.HEARTS \n\n    val card = KING of HEARTS \n```", "```kt\n    //top.kt  \n    public val version: String = \"3.5.0\" // 1 \n\n    internal class UnitConveter // 3 \n\n    private fun printSomething() {  \n        println(\"Something\") \n    } \n\n    fun main(args: Array<String>) { \n        println(version) // 1, Prints: \"3.5.0\" \n        UnitConveter() // 2, Accessible \n        printSomething() // 3, Prints: Something \n    } \n\n    // branch.kt \n    fun main(args: Array<String>) { \n        println(version) // 1, Accessible\n        UnitConveter() // 2, Accessible\n        printSomething() // 3, Error \n    } \n\n    // main.kt in another module \n    fun main(args: Array<String>) { \n        println(version) // 1, Accessible \n        UnitConveter() // 2, Error \n        printSomething() // 3, Accessible\n    } \n```", "```kt\n    class Person { \n        public val name: String = \"Igor\" \n        protected var age:Int = 23 \n        internal fun learn() {} \n        private fun speak() {} \n    } \n```", "```kt\n    // main.kt inside the same package as Person definition \n    val person = Person() \n    println(person.name)   // 1 \n    person.speak()         // 2, Error \n    person.age             // 3, Error \n    person.learn()         // 4 \n```", "```kt\n    open class Person { \n        public val name: String = \"Igor\" \n        private fun speak() {} \n        protected var age: Int = 23 \n        internal fun learn() {} \n    } \n\n    class Student() : Person() { \n        fun doSth() { \n            println(name) \n            learn() \n            print(age) \n            // speak()  // 1 \n        } \n    }  \n```", "```kt\n    open class Foo { \n        internal fun boo() { } \n    } \n```", "```kt\n    public class Java { \n        void a() { \n            new Foo().boo$production_sources_for_module_SmallTest(); \n       } \n    } \n```", "```kt\n    open class Person { \n        protected open fun speak() {} \n    } \n\n    class Student() : Person() { \n        public override fun speak() { \n        } \n    } \n\n    val person = Person() \n    //person.speak() // 1 \n\n    val student = Student() \n    student.speak() // 2\n```", "```kt\n    internal class Fruit private constructor { \n       var weight: Double? = null \n\n       companion object { \n           fun create() = Fruit() \n       } \n    } \n```", "```kt\n    var fruit: Fruit? = null    // Accessible\n    fruit = Fruit()             // Error \n    fruit = Fruit.create()      // Accessible\n```", "```kt\n    class Car { \n        init { \n            count++; \n            println(\"Car created\") \n        } \n\n        companion object { \n            init { \n                println(\"Car companion object created\") \n            } \n\n            var count: Int = 0 \n                private set \n        } \n    } \n```", "```kt\n    //vehicle.kt \n\n    sealed class Vehicle()\n    class Car : Vehicle()\n    class Truck : Vehicle()\n    class Bus : Vehicle()\n```", "```kt\n    //vehicle.kt \n    sealed class Vehicle() \n    open class Bus : Vehicle() \n\n    //data.kt \n    class SchoolBus:Bus() \n```", "```kt\n    //vehicle.kt \n    sealed class Vehicle() \n    sealed class Bus : Vehicle() \n\n    //data.kt \n    class SchoolBus:Bus() //Error cannot access Bus \n```", "```kt\n    when (vehicle) { \n        is Car -> println(\"Can transport 4 people\") \n        is Truck -> println(\"Can transport furnitures \") \n        is Bus -> println(\"Can transport 50 people \") \n    } \n```", "```kt\n    sealed class Employee() \n\n    class Programmer : Employee() \n    class Manager : Employee() \n    object CEO : Employee() \n```", "```kt\n    class Outer { \n        private val bar: Int = 1 \n\n        class Nested { \n            fun foo() = 2 \n        } \n    } \n\n    val demo = Outer.Nested().foo() // == 2 \n```", "```kt\n    class Outer { \n        private val bar: Int = 1 \n\n        inner class Inner { \n            fun foo() = bar \n        } \n    } \n\n    val outer = Outer() \n    val demo = outer.Inner().foo() // == 1 \n```", "```kt\n    import com.facebook.ads.InterstitialAd \n\n    val fbAd = InterstitialAd(context, \"...\") \n    val googleAd = com.google.android.gms.ads.InterstitialAd(context)\n```", "```kt\n    import com.facebook.ads.InterstitialAd as FbAd \n    import com.google.android.gms.ads.InterstitialAd as GoogleAd \n```", "```kt\n    val fbAd = FbAd(context, \"...\") \n    val googleAd = GoogleAd(context) \n```"]