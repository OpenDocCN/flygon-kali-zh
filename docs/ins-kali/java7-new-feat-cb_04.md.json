["```java\n    try {\n    Path testDirectoryPath = Paths.get(\"C:/home/test\");\n    Path testDirectory = Files.createDirectory(testDirectoryPath);\n    System.out.println(\"Directory created successfully!\");\n    Path newFilePath = FileSystems.getDefault().getPath(\"C:/home/test/newFile.txt\");\n    Path testFile = Files.createFile(newFilePath);\n    System.out.println(\"File created successfully!\");\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\n    }\n    catch (FileAlreadyExistsException a) {\n    System.out.println(\"File or directory already exists!\");\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n\n    ```", "```java\nPath directoriesPath = Paths.get(\"C:/home/test/subtest/subsubtest\");\nPath testDirectory = Files.createDirectories(directoriesPath);\n\n```", "```java\n    Path newFile = FileSystems.getDefault().getPath(\"C:/home/docs/newFile.txt\");\n    Path copiedFile = FileSystems.getDefault().getPath(\"C:/home/docs/copiedFile.txt\");\n    try {\n    Files.createFile(newFile);\n    System.out.println(\"File created successfully!\");\n    Files.copy(newFile, copiedFile);\n    System.out.println(\"File copied successfully!\");\n    }\n    catch (IOException e) {\n    System.out.println(\"IO Exception.\");\n    }\n\n    ```", "```java\nFiles.copy(newFile, copiedFile, StandardCopyOption.REPLACE_EXISTING);\n\n```", "```java\nPath originalLinkedFile = FileSystems.getDefault().getPath(\"C:/home/music/users.txt\");\nPath newLinkedFile = FileSystems.getDefault().getPath(\"C:/home/music/users2.txt\");\ntry {\nFiles.copy(originalLinkedFile, newLinkedFile);\nSystem.out.println(\"Symbolic link file copied successfully!\");\n}\ncatch (IOException e) {\nSystem.out.println(\"IO Exception.\");\n}\n\n```", "```java\nPath originalDirectory = FileSystems.getDefault().getPath(\"C:/home/docs\");\nPath newDirectory = FileSystems.getDefault().getPath(\"C:/home/tmp\");\ntry {\nFiles.copy(originalDirectory, newDirectory);\nSystem.out.println(\"Directory copied successfully!\");\n}\ncatch (IOException e) {\ne.printStackTrace();\n}\n\n```", "```java\nPath newFile = FileSystems.getDefault().getPath(\"C:/home/docs/java7WebSite.html\");\nURI url = URI.create(\"http://jdk7.java.net/\");\ntry (InputStream inputStream = url.toURL().openStream())\nFiles.copy(inputStream, newFile);\nSystem.out.println(\"Site copied successfully!\");\n}\ncatch (MalformedURLException ex) {\nex.printStackTrace();\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\nPath sourceFile = FileSystems.getDefault().getPath(\"C:/home/docs/users.txt\");\ntry (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\nFiles.copy(sourceFile, outputStream);\nbyte arr[] = outputStream.toByteArray();\nSystem.out.println(\"The contents of \" + sourceFile.getFileName());\nfor(byte data : arr) {\nSystem.out.print((char)data);\n}\nSystem.out.println();\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\n    try {\n    Path rootDirectory = FileSystems.getDefault().getPath(\"C:/home/docs\");\n    Path tempDirectory = Files.createTempDirectory(rootDirectory, \"\");\n    System.out.println(\"Temporary directory created successfully!\");\n    String dirPath = tempDirectory.toString();\n    System.out.println(dirPath);\n    Path tempFile = Files.createTempFile(tempDirectory,\"\", \"\");\n    System.out.println(\"Temporary file created successfully!\");\n    String filePath = tempFile.toString();\n    System.out.println(filePath);\n    }\n    catch (IOException e) {\n    System.out.println(\"IO Exception.\");\n    }\n\n    ```", "```java\n    public static void main(String[] args) throws Exception {\n    Path path = Paths.get(\"C:/home/docs/users.txt\");\n    BasicFileAttributeView view = Files.getFileAttributeView(path, BasicFileAttributeView.class);\n    FileTime lastModifedTime;\n    FileTime lastAccessTime;\n    FileTime createTime;\n    BasicFileAttributes attributes = view.readAttributes();\n    lastModifedTime = attributes.lastModifiedTime();\n    createTime = attributes.creationTime();\n    long currentTime = Calendar.getInstance().getTimeInMillis();\n    lastAccessTime = FileTime.fromMillis(currentTime);\n    view.setTimes(lastModifedTime, lastAccessTime, createTime);\n    System.out.println(attributes.lastAccessTime());\n    }\n\n    ```", "```java\nFileTime fileTime = FileTime.from(1000, TimeUnit.DAYS);\nSystem.out.println(fileTime);\n\n```", "```java\nFileTime fileTime = FileTime.fromMillis(1000L*60*60*24*1000);\n\n```", "```java\nFiles.setLastModifiedTime(path, lastModifedTime);\n\n```", "```java\nlastModifedTime = Files.getLastModifiedTime(path);\n\n```", "```java\nFiles.setAttribute(path, \"basic:lastAccessTime\", lastAccessTime);\n\n```", "```java\n    public static void main(String[] args) throws Exception {\n    Path path = Paths.get(\"C:/home/docs/users.txt\");\n    FileOwnerAttributeView view = Files.getFileAttributeView(path, FileOwnerAttributeView.class);\n    UserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();\n    UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(\"jennifer\");\n    view.setOwner(userPrincipal);\n    System.out.println(\"Owner: \" + view.getOwner().getName());\n    }\n\n    ```", "```java\nPath path = Paths.get(\"C:/home/docs/users.txt\");\ntry {\nUserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();\nUserPrincipal userPrincipal = lookupService.lookupPrincipalByName(\"jennifer\");\nFiles.setOwner(path, userPrincipal);\nSystem.out.println(\"Owner: \" + view.getOwner().getName());\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\n    public static void main(String[] args) throws Exception {\n    Path path = Paths.get(\"C:/home/docs/users.txt\");\n    AclFileAttributeView view = Files.getFileAttributeView(path, AclFileAttributeView.class);\n    List<AclEntry> aclEntryList = view.getAcl();\n    displayAclEntries(aclEntryList);\n    }\n\n    ```", "```java\n    private static void displayAclEntries(List<AclEntry> aclEntryList) {\n    System.out.println(\"ACL Entry List size: \" + aclEntryList.size());\n    for (AclEntry entry : aclEntryList) {\n    System.out.println(\"User Principal Name: \" + entry.principal().getName());\n    System.out.println(\"ACL Entry Type: \" + entry.type());\n    displayEntryFlags(entry.flags());\n    displayPermissions(entry.permissions());\n    System.out.println();\n    }\n    }\n    private static void displayPermissions(Set<AclEntryPermission> permissionSet) {\n    if (permissionSet.isEmpty()) {\n    System.out.println(\"No Permissions present\");\n    }\n    else {\n    System.out.println(\"Permissions\");\n    for (AclEntryPermission permission : permissionSet) {\n    System.out.print(permission.name() + \" \");\n    }\n    System.out.println();\n    }\n    }\n    private static void displayEntryFlags(Set<AclEntryFlag> flagSet) {\n    if (flagSet.isEmpty()) {\n    System.out.println(\"No ACL Entry Flags present\");\n    }\n    else {\n    System.out.println(\"ACL Entry Flags\");\n    for (AclEntryFlag flag : flagSet) {\n    System.out.print(flag.name() + \" \");\n    }\n    System.out.println();\n    }\n    }\n\n    ```", "```java\n    UserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();\n    UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(\"users\");\n\n    ```", "```java\n    AclEntry.Builder builder = AclEntry.newBuilder();\n    builder.setType(AclEntryType.ALLOW);\n    builder.setPrincipal(userPrincipal);\n    builder.setPermissions(\n    AclEntryPermission.WRITE_ACL,\n    AclEntryPermission.DELETE);\n    AclEntry entry = builder.build();\n    aclEntryList.add(0, entry);\n    view.setAcl(aclEntryList);\n\n    ```", "```java\n    public static void main(String[] args) throws Exception {\n    Path path = Paths.get(\"home/docs/users.txt\");\n    FileSystem fileSystem = path.getFileSystem();\n    PosixFileAttributeView view = Files.getFileAttributeView(path, PosixFileAttributeView.class);\n    PosixFileAttributes attributes = view.readAttributes();\n    Set<PosixFilePermission> permissions = attributes.permissions();\n    listPermissions(permissions);\n    permissions.add(PosixFilePermission.OTHERS_WRITE);\n    view.setPermissions(permissions);\n    System.out.println();\n    listPermissions(permissions);\n    }\n    private static void listPermissions(Set<PosixFilePermission> permissions) {\n    System.out.print(\"Permissions: \");\n    for (PosixFilePermission permission : permissions) {\n    System.out.print(permission.name() + \" \");\n    }\n    System.out.println();\n    }\n\n    ```", "```java\nSet<PosixFilePermission> permissions = attributes.permissions();\nPermissions.remove(PosixFilePermission.OTHERS_WRITE);\nview.setPermissions(permissions);\n\n```", "```java\nPath path = Paths.get(\"home/docs/users.txt\");\ntry {\nFileSystem fileSystem = path.getFileSystem();\nPosixFileAttributeView view = Files.getFileAttributeView(path, PosixFileAttributeView.class);\nPosixFileAttributes attributes = view.readAttributes();\nSet<PosixFilePermission> permissions = attributes.permissions();\nSystem.out.println(\"Old Group: \" + attributes.group().getName());\nSystem.out.println(\"Old Owner: \" + attributes.owner().getName());\nSystem.out.println();\nUserPrincipalLookupService lookupService = FileSystems.getDefault().getUserPrincipalLookupService();\nUserPrincipal userPrincipal = lookupService.lookupPrincipalByName(\"jennifer\");\nGroupPrincipal groupPrincipal = lookupService.lookupPrincipalByGroupName((\"jennifer\");\nview.setGroup(groupPrincipal);\nview.setOwner(userPrincipal);\nattributes = view.readAttributes();\nSystem.out.println(\"New Group: \" + attributes.group().getName());\nSystem.out.println(\"New Owner: \" + attributes.owner().getName());\nSystem.out.println();\nPOSIX attributesfile permission, removing}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\nPath path = Paths.get(\"home/docs/users.txt\");\ntry {\nSet<PosixFilePermission> permissions = Files.getPosixFilePermissions(path);\nSystem.out.print(\"Permissions: \");\nfor (PosixFilePermission permission : permissions) {\nSystem.out.print(permission.name() + \" \");\n}\nSystem.out.println();\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\nview.setPermissions(path, permissions);\n\n```", "```java\nFiles.setPosixFilePermissions(path, permissions);\n\n```", "```java\nPath path = Paths.get(\"home/docs/users.txt\");\ntry {\nFiles.setAttribute(path, \"posix:permission, PosixFilePermission.OTHERS_WRITE);\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\nPath path = Paths.get(\"home/docs/users.txt\");\ntry {\nFileSystem fileSystem = path.getFileSystem();\nPosixFileAttributeView view = Files.getFileAttributeView(path, PosixFileAttributeView.class);\nPosixFileAttributes attributes = view.readAttributes();\nSet<PosixFilePermission> permissions = attributes.permissions();\nfor(PosixFilePermission permission : permissions) {\nSystem.out.print(permission.toString() + ' ');\n}\nSystem.out.println();\nFileAttribute<Set<PosixFilePermission>> fileAttributes = PosixFilePermissions.asFileAttribute(permissions);\nSet<PosixFilePermission> fileAttributeSet = fileAttributes.value();\nfor (PosixFilePermission posixFilePermission : fileAttributeSet) {\nSystem.out.print(posixFilePermission.toString() + ' ');\n}\nSystem.out.println();\nSystem.out.println(PosixFilePermissions.toString(permissions));\npermissions = PosixFilePermissions.fromString(\"rw-rw-r--\");\nfor(PosixFilePermission permission : permissions) {\nSystem.out.print(permission.toString() + ' ');\n}\nSystem.out.println();\n}\ncatch (IOException ex) {\n}\n\n```", "```java\n    public static void main(String[] args) throws Exception {\n    Path sourceFile = Paths.get(\"C:/home/docs/users.txt\");\n    Path destinationFile = Paths.get (\"C:/home/music/users.txt\");\n    Files.move(sourceFile, destinationFile);\n    }\n\n    ```", "```java\nPath sourceFile = ...;\nFiles.move(sourceFile, sourceFile);\n\n```", "```java\nPath sourceFile = Paths.get(\"C:/home/docs/users.txt\");\nPath destinationFile = Paths.get(\"C:/home/music/users. txt\");\nFiles.move(sourceFile, destinationFile, StandardCopyOption.ATOMIC_MOVE);\n\n```", "```java\nPath sourceFile = Paths.get(\"C:/home/docs/users.txt\");\nFiles.move(sourceFile, sourceFile.resolveSibling(sourceFile.getFileName()+\".bak\"));\n\n```", "```java\nFiles.move(sourceFile, sourceFile.resolveSibling(\"users.bak\"));\n\n```", "```java\nPath sourceFile = Paths.get(\"C:/home/docs/users.txt\");\nString newFileName = sourceFile.getFileName().toString();\nnewFileName = newFileName.substring(0, newFileName.indexOf('.')) + \".bak\";\nFiles.move(sourceFile, sourceFile.resolveSibling(newFileName));\n\n```", "```java\nPath sourceFile = Paths.get(\"C:/home/docs\");\nPath destinationFile = Paths.get(\"C:/home/music/docs\");\nFiles.move(sourceFile, destinationFile);\n\n```", "```java\nPath sourceFile = Paths.get(\"C:/home/docs\");\nPath destinationFile = Paths.get(\"E:/home/music/docs\");\nFiles.move(sourceFile, destinationFile);\n\n```", "```java\n    public static void main(String[] args) throws Exception {\n    Path sourceFile = Paths.get(\"C:/home/docs/users.txt\");\n    Files.delete(sourceFile);\n    }\n\n    ```", "```java\nFiles.deleteIfExists(sourceFile);\n\n```", "```java\nPath sourceFile = Paths.get(\"C:/home/docs\");\nFiles.delete(sourceFile);\n\n```", "```java\n    public static void main(String[] args) throws Exception {\n    Path targetFile = Paths.get(\"C:/home/docs/users.txt\");\n    Path linkFile = Paths.get(\"C:/home/music/users.txt\");\n    Files.createSymbolicLink(linkFile, targetFile);\n    }\n\n    ```", "```java\ntry {\nPath targetFile = Paths.get(\"C:/home/docs/users.txt\");\nPath linkFile = Paths.get(\"C:/home/music/users.txt\");\nFiles.createLink(linkFile, targetFile);\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\ntry {\nPath targetFile = Paths.get(\"C:/home/docs\");\nPath linkFile = Paths.get(\"C:/home/tmp\");\nFiles.createSymbolicLink(linkFile, targetFile);\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\ntry {\nPath targetFile = Paths.get(\"C:/home/docs/users.txt\");\nPath linkFile = Paths.get(\"C:/home/music/users.txt\");\nSystem.out.println(\"Target file is: \" + Files.readSymbolicLink(linkFile));\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```"]