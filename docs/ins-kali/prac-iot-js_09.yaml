- en: Smart Surveillance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能监视
- en: In [Chapter 8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry
    Pi Image Streaming*, we learned how to connect a Raspberry Pi camera module to
    Raspberry Pi 3, grab a picture or video, and then upload/stream it in real time.
    In this chapter, we are going to take this logic to the next level. We are going
    to take a picture when there is an intrusion detected, and then send that image
    to the Amazon Rekognition platform and compare the image against a set of images.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee) *树莓派图像流*中，我们学习了如何将树莓派相机模块连接到树莓派3，拍摄照片或视频，然后实时上传/流式传输。在本章中，我们将把这种逻辑提升到下一个级别。当检测到入侵时，我们将拍照，然后将该图像发送到亚马逊Rekognition平台并与一组图像进行比较。
- en: 'In this chapter, we are going to cover the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Understanding AWS Rekognition
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解AWS Rekognition
- en: Seeding an AWS Rekognition collection with authorized faces
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用授权人脸填充AWS Rekognition集合
- en: Taking pictures from Raspberry Pi 3 upon intrusion and comparing them with the
    seed faces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在入侵时从树莓派3拍照并将其与种子人脸进行比较
- en: AWS Rekognition
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Rekognition
- en: 'The following quote is from Amazon Rekognition ([https://aws.amazon.com/rekognition/](https://aws.amazon.com/rekognition/)):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下引用来自Amazon Rekognition ([https://aws.amazon.com/rekognition/](https://aws.amazon.com/rekognition/))：
- en: '"Amazon Rekognition is a service that makes it easy to add image analysis to
    your applications. With Rekognition, you can detect objects, scenes, faces; recognize
    celebrities; and identify inappropriate content in images. You can also search
    and compare faces. Rekognition''s API enables you to quickly add sophisticated
    deep learning-based visual search and image classification to your applications."'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “Amazon Rekognition是一项使您的应用程序轻松添加图像分析的服务。使用Rekognition，您可以检测对象、场景、人脸；识别名人；并识别图像中的不当内容。您还可以搜索和比较人脸。Rekognition的API使您能够快速将基于深度学习的复杂视觉搜索和图像分类添加到您的应用程序中。”
- en: In this chapter, we are going to leverage the AWS Rekognition feature to help
    us set conditional surveillance based on face recognition, not face detection.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将利用AWS Rekognition功能，帮助我们基于人脸识别而不是人脸检测来设置有条件的监视。
- en: Let's say that you had set up a camera at your house entrance using Raspberry
    Pi, and programmed it to keep taking pictures of intruders and sending them to
    you. In this setup, you will be receiving images of everyone who comes to your
    door, for instance, your family, neighbors, and so on. But what if you are notified
    only if the intruder is an unknown person? Now, that is what I call smart surveillance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经在家门口使用树莓派设置了摄像头，并对其进行了编程，以持续拍摄入侵者的照片并将其发送给您。在这种设置中，您将收到每个来到您家门口的人的照片，例如您的家人、邻居等。但是，如果只有在入侵者是陌生人时才通知您呢？现在，这就是我所说的智能监视。
- en: In [Chapter 8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry
    Pi Image Streaming*, we built a setup that captured images when intrusion is detected
    and which then send an email and updated the apps in real time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee) *树莓派图像流*中，我们建立了一个设置，当检测到入侵时捕获图像，然后实时发送电子邮件并更新应用程序。
- en: In this chapter, we are going seed AWS Rekognition with a set of faces that
    are trusted. Then, when there is an image captured by the camera, upon intrusion
    detection, we send it to AWS Rekognition to perform facial recognition. If the
    image matches one of the trusted images, nothing happens; otherwise, an email
    notification is sent.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一组受信任的人脸填充AWS Rekognition。然后，当摄像头捕获图像时，在检测到入侵时，我们将其发送到AWS Rekognition进行人脸识别。如果图像与受信任的图像之一匹配，则不会发生任何事情；否则，将发送电子邮件通知。
- en: To understand more about AWS Rekogniton and how it works, take a look at *Announcing
    Amazon Rekognition - Deep Learning-Based Image Analysis* ([https://www.youtube.com/watch?v=b6gN9jCmq3w](https://www.youtube.com/watch?v=b6gN9jCmq3w)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于AWS Rekognition及其工作原理的信息，请查看*宣布亚马逊Rekognition-基于深度学习的图像分析*([https://www.youtube.com/watch?v=b6gN9jCmq3w](https://www.youtube.com/watch?v=b6gN9jCmq3w))。
- en: Setting up smart surveillance
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置智能监视
- en: Now that we have an understanding of what we are going to do, we will get started
    with the setup of Raspberry Pi.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了我们要做什么，我们将开始设置树莓派。
- en: We are going to set up the camera and a motion detector, as we did in [Chapter
    8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry Pi Image
    Streaming*. Next, we will be adding the logic required to capture an image upon
    the detection of motion and then send it for processing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置摄像头和运动检测器，就像我们在[第8章](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee)
    *树莓派图像流*中所做的那样。接下来，我们将添加所需的逻辑，以在检测到运动时捕获图像，然后将其发送进行处理。
- en: Before we do that, we need to seed the Rekognition collection with authorized
    faces.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行此操作之前，我们需要使用授权人脸填充Rekognition集合。
- en: This script can be an API as part of the API engine, and using the web dashboard
    we can upload and seed the images. But to keep things simple, we are going to
    run this standalone script from a machine.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本可以作为API的一部分，作为API引擎，并且使用Web仪表板，我们可以上传和填充图像。但为了保持简单，我们将从计算机上运行这个独立的脚本。
- en: Setting up AWS credentials
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置AWS凭据
- en: Before we get started with development, we need to set up our local machine
    with the AWS CLI and AWS credentials.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始开发之前，我们需要在本地机器上安装AWS CLI和AWS凭据。
- en: 'First, we need to install the AWS CLI. Head over to [https://aws.amazon.com/cli](https://aws.amazon.com/cli)
    and follow the instructions on the page. To test the installation from the command
    prompt, run:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装AWS CLI。转到[https://aws.amazon.com/cli](https://aws.amazon.com/cli)并按照页面上的说明进行操作。要从命令提示符中测试安装，请运行：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see something like:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的内容：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once the setup is complete we need to configure the AWS credentials, so that
    as long as we are using this machine, we need not enter any credentials within
    the code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，我们需要配置AWS凭据，这样只要我们使用这台机器，就不需要在代码中输入任何凭据。
- en: 'Run the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下内容：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should be presented with four questions; fill them with the appropriate
    information:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到四个问题；用适当的信息填写它们：
- en: '![](../images/00119.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00119.jpeg)'
- en: If you are facing issues when configuring AWS credentials, refer to [http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在配置AWS凭据时遇到问题，请参考[http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-quick-configuration)。
- en: Another option is to add the `accessKeyId` and `secretAccessKey` in the code
    itself. But we would still need the `accessKeyId` and `secretAccessKey` to continue.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是在代码本身中添加`accessKeyId`和`secretAccessKey`。但我们仍然需要`accessKeyId`和`secretAccessKey`来继续。
- en: Once the configuration is done, we will get started interfacing with AWS Rekognition.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，我们将开始与AWS Rekognition进行接口。
- en: Seeding the authorized faces
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播种授权面孔
- en: Create a folder named `chapter9`, and inside this folder, create a folder named
    `rekogniton_seed`. Inside this folder, create a file named `seed.js`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter9`的文件夹，在这个文件夹内创建一个名为`rekogniton_seed`的文件夹。在这个文件夹内，创建一个名为`seed.js`的文件。
- en: 'Update `seed.js` as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式更新`seed.js`：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Please refer to the source code for the additional comments: [https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript](https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其他评论，请参阅源代码：[https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript](https://github.com/PacktPublishing/Practical-Internet-of-Things-with-JavaScript)。
- en: As we see from the preceding code snippet, we are creating a new collection
    named `AIOWJS-FACES` in the `eu-west-1` region. You can either use the `accessKeyId`
    and `secretAccessKey` from within the code, or you can use the ones from AWS CLI
    configure. If you are using the key and secret from AWS CLI configure, you can
    comment these two lines out while initializing a new instance of `rekognition`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段中，我们看到我们正在在`eu-west-1`地区创建一个名为`AIOWJS-FACES`的新集合。您可以在代码中使用`accessKeyId`和`secretAccessKey`，也可以使用AWS
    CLI配置中的这两个。如果您正在使用AWS CLI配置中的密钥和密钥，您可以在初始化`rekognition`的新实例时将这两行注释掉。
- en: We call the `createCollection()` to create a new collection and this needs to
    be run only once.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用`createCollection()`来创建一个新的集合，这只需要运行一次。
- en: You can seed data as many times as you want, but collection creation should
    happen only once.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时播种数据，但集合创建应该只发生一次。
- en: Once the collection is created, we will index a few images from a folder named
    `faces`, which we will create now. Create a folder named `faces` at the root of
    the `rekogniton_seed` folder. Inside this folder, upload clear images with faces.
    The better the quality and clarity of the image is, the better chance it has of
    being recognized.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建集合后，我们将从名为`faces`的文件夹中索引一些图像，现在我们将创建。在`rekogniton_seed`文件夹的根目录下创建一个名为`faces`的文件夹。在此文件夹中，上传带有面孔的清晰图像。图像的质量和清晰度越好，被识别的机会就越大。
- en: 'I have dumped a couple of pictures of mine inside the `faces` folder. Before
    we start the seeding, we need to install the required dependencies:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我在`faces`文件夹中放了几张我的照片。在我们开始播种之前，我们需要安装所需的依赖项：
- en: 'Open command prompt/terminal inside the `rekogniton_seed` folder and run:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`rekogniton_seed`文件夹内打开命令提示符/终端并运行：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, run:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the installation is complete, create the collection and seed the faces
    by running:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，通过运行创建集合并通过运行种子面孔：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We should see an output something like the following for each uploaded image:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个上传的图像，我们应该看到类似以下的输出：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This object will consist of information about the image that was analyzed by
    Rekognition.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象将包含Rekognition分析的图像的信息。
- en: You can look up the `*.json` files inside the `faces` folder once the seeding
    is complete. These JSON files will consist of more information about the image.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦播种完成，您可以查看`faces`文件夹中的`*.json`文件。这些JSON文件将包含有关图像的更多信息。
- en: Testing the seed
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试播种
- en: Now that the seed is completed, let's validate the seed. This step is totally
    optional; you can skip this step if you want to.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在播种完成了，让我们验证播种。这一步是完全可选的；如果您愿意，可以跳过这一步。
- en: Create a new folder named `rekogniton_seed_test` at the root of the `chapter9`
    folder. Then create a folder named `faces` at the root of `rekogniton_seed_test`
    and dump the image that you would like to test into this folder. In my case, the
    picture is of me at a different location.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chapter9`文件夹的根目录下创建一个名为`rekogniton_seed_test`的新文件夹。然后在`rekogniton_seed_test`的根目录下创建一个名为`faces`的文件夹，并将要测试的图像放入该文件夹。在我的情况下，图片是我在不同地点的照片。
- en: 'Next, create a file named `seed_test.js` and update it, as shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`seed_test.js`的文件并更新它，如下所示：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we pick up the image from the `faces` folder and submit
    it for recognition, and then we print the appropriate response.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们从`faces`文件夹中提取图像并提交给识别，然后打印适当的响应。
- en: 'Once that is done, we will install the required dependencies:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们将安装所需的依赖项：
- en: 'Open command prompt/terminal inside the `rekogniton_seed_test` folder and run:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`rekogniton_seed_test`文件夹内打开命令提示符/终端并运行：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then run:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后运行：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we are all set to run this example. From inside the `rekogniton_seed_test`
    folder, run:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好运行这个例子了。从`rekogniton_seed_test`文件夹内运行：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We should see something like the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该看到类似以下的东西：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There are a couple of things to note from the preceding response:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的响应中有几件事情需要注意：
- en: '`FaceId`: This is the ID against which the current face has been matched'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FaceId`：这是当前面部匹配的ID'
- en: '`ImageId`: This is the image against which the current face has been matched'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ImageId`：这是当前面部匹配的图像'
- en: With this, we can even tag users from the images that we have indexed/seeded.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们甚至可以从我们已经索引/播种的图像中标记用户。
- en: 'You can do a negative test by putting an image that doesn''t match our seed
    data and updating the last line in the preceding code as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过放置一个与我们的种子数据不匹配的图像并更新上述代码的最后一行来进行负面测试：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, there were no matches found.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，没有找到匹配项。
- en: We are going to use the preceding method in our Raspberry Pi, once we have captured
    an image.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们捕获了图像，我们将在树莓派中使用上述方法。
- en: Deploying to Raspberry Pi
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到树莓派
- en: Now that we have seeded a Rekognition collection, as well as tested it (an optional
    step), we are now going to start setting up the Raspberry Pi code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个Rekognition集合，并对其进行了测试（可选步骤），我们现在将开始设置树莓派代码。
- en: We will be using all the other code pieces from the `chapter8` folder as is
    and only modifying the Raspberry Pi client in the `chapter9` folder.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`chapter8`文件夹中的所有其他代码片段，并且只修改`chapter9`文件夹中的树莓派客户端。
- en: 'Copy the entire code from the `chapter8` folder into the `chapter9` folder.
    Then, open the `pi-client` folder either on your desktop or on the Raspberry Pi
    itself, and update it as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个代码从`chapter8`文件夹复制到`chapter9`文件夹中。然后，打开`pi-client`文件夹，无论是在您的桌面上还是在树莓派本身上，并进行以下更新：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code, we have the required configuration to make a request
    to AWS Rekognition, and then we run `checkForMatch()`, which will take the raw
    photo and check for matches. If any matches are found, we will not get an email,
    and if no matches are found, we will get an email.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们已经配置了向AWS Rekognition发出请求所需的配置，然后运行`checkForMatch()`，它将获取原始照片并检查匹配项。如果找到任何匹配项，我们将不会收到电子邮件；如果没有找到匹配项，我们将收到电子邮件。
- en: Next, we will install the required dependencies.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装所需的依赖项。
- en: 'Run the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the installation is done, start the broker, `api-engine`, and web dashboard.
    Then run the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动代理、`api-engine`和Web仪表板。然后运行以下命令：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Trigger a motion to capture the image. If the captured image matches one of
    the faces we indexed, we will not get an email; if it does, we will get an email.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 触发运动以捕获图像。如果捕获的图像与我们索引的人脸之一匹配，我们将不会收到电子邮件；如果匹配，我们将收到电子邮件。
- en: Simple isn't it? This is a very powerful setup that we have built to provide
    surveillance at our homes or offices, where simple false alarms can be identified
    easily.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 简单吧？这是一个非常强大的设置，我们已经建立了一个可以在家庭或办公室提供监控的系统，可以轻松识别简单的误报。
- en: This example can be extended further to send push notifications or call neighbours
    using cloud-based calling services such as Twilio.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可以进一步扩展，以便使用基于云的呼叫服务（如Twilio）发送推送通知或呼叫邻居。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to set up a smart surveillance system with
    Raspberry Pi and the AWS Rekognition platform.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用树莓派和AWS Rekognition平台建立智能监控系统。
- en: We started by understanding the AWS Rekognition platform and then indexing/seeding
    a collection with our images. Next, we updated the Raspberry Pi code to take a
    picture when motion is detected and then send that image to AWS Rekognition to
    identify whether the face in the current photo matches any of the indexed images.
    If it does, we ignore the image; if it does not, we send an email with that image.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先了解了AWS Rekognition平台，然后使用我们的图像对集合进行了索引/种子化。接下来，我们更新了树莓派代码，以便在检测到运动时拍摄照片，然后将该图像发送到AWS
    Rekognition以确定当前照片中的人脸是否与任何索引图像匹配。如果匹配，我们忽略该图像；如果不匹配，我们将发送一封带有该图像的电子邮件。
- en: With this, we complete, *Practical Internet of Things with JavaScript*. I hope
    you have learned a few ways to leverage JavaScript and Raspberry Pi to build simple
    yet powerful IoT solutions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们完成了*使用JavaScript进行实际物联网*。我希望您已经学会了几种利用JavaScript和树莓派构建简单而强大的物联网解决方案的方法。
