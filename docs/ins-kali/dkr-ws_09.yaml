- en: 9\. Docker Swarm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. Docker Swarm
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you will work with Docker Swarm from the command line to manage
    running nodes, deploy services, and perform rolling updates on your services when
    needed. You will learn how to troubleshoot your Swarm nodes and deploy entire
    stacks using your existing Docker Compose files, as well as learning how you can
    use Swarm to manage your service configuration and secrets. The final part of
    this chapter will provide you with the knowledge you need to get started using
    Swarmpit, which is a web-based interface for running and managing your Docker
    Swarm services and clusters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用命令行与Docker Swarm一起工作，管理运行节点，部署服务，并在需要时对服务进行滚动更新。您将学习如何排查Swarm节点并使用现有的Docker
    Compose文件部署整个堆栈，以及如何使用Swarm来管理服务配置和秘密。本章的最后部分将为您提供使用Swarmpit的知识，这是一个用于运行和管理Docker
    Swarm服务和集群的基于Web的界面。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: So far in this book, we've run our Docker containers and controlled the way
    they run from the command line using direct commands such as `docker run` to launch
    containers. Our next step is to automate things with the use of Docker Compose,
    which allows an entire environment of containers to work together. Docker Swarm
    is the next step in managing our Docker environments. **Docker Swarm** allows
    you to orchestrate how your containers can scale and work together to provide
    a more reliable service to your end-users.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经通过直接命令（如`docker run`）从命令行运行了我们的Docker容器并控制了它们的运行方式。我们的下一步是使用Docker
    Compose自动化事务，它允许整个容器环境一起工作。Docker Swarm是管理我们的Docker环境的下一步。**Docker Swarm**允许您编排容器的扩展和协作，以为最终用户提供更可靠的服务。
- en: Docker Swarm allows you to set up multiple servers running Docker Engine and
    organize them as a cluster. Docker Swarm can then run commands to coordinate your
    containers across the cluster instead of just one server. Swarm will configure
    your cluster to make sure your services are balanced across your cluster, ensuring
    higher reliability for your services. It will also decide for you which service
    will be assigned to which server depending on the load across your cluster. Docker
    Swarm is a step up in terms of managing the way you run your containers and is
    provided by default with Docker.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm允许您设置多个运行Docker Engine的服务器，并将它们组织为一个集群。然后，Docker Swarm可以运行命令来协调整个集群中的容器，而不仅仅是一个服务器。Swarm将配置您的集群，以确保您的服务在整个集群中平衡，确保您的服务更加可靠。它还会根据集群的负载决定将哪个服务分配给哪个服务器。Docker
    Swarm在管理容器运行方式方面是一个进步，并且默认情况下由Docker提供。
- en: Docker Swarm allows you to configure redundancy and failover for your services
    while scaling the number of containers up and down depending on the load. You
    can perform rolling updates across your services to reduce the chances of an outage,
    meaning new versions of your container applications can be applied to the cluster
    without these changes causing an outage for your customers. It will allow you
    to orchestrate your container workloads through the swarm instead of manually
    managing containers one by one.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm允许您为服务配置冗余和故障转移，同时根据负载增加或减少容器的数量。您可以对服务进行滚动更新，以减少停机的可能性，这意味着可以将容器应用的新版本应用到集群中，而这些更改不会导致客户停机。它将允许您通过Swarm编排容器工作负载，而不是手动逐个管理容器。
- en: 'Swarm also introduces some new terms and concepts when it comes to managing
    your environment, defined in the following list:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及管理您的环境时，Swarm还引入了一些新术语和概念，定义如下列表：
- en: '**Swarm**: Multiple Docker hosts run in swarm mode to act as managers and workers.
    Having multiple nodes and workers is not compulsory as part of Docker Swarm. You
    can run your services as a single node swarm, which is the way we will be working
    in this chapter, even though a production cluster may have multiple nodes available
    to make sure your services are as fault-tolerant as possible.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swarm**：多个Docker主机以集群模式运行，充当管理者和工作者。拥有多个节点和工作者并非Docker Swarm的必要部分。您可以将您的服务作为单节点集群运行，在本章中我们将使用这种方式，即使生产集群可能有多个节点可用，以确保您的服务尽可能具有容错性。'
- en: '**Task**: The manager distributes the tasks to run inside the nodes. A task
    consists of a Docker container and the commands that will run inside the container.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：经理将任务分配给节点内部运行。任务包括一个Docker容器和将在容器内运行的命令。'
- en: '**Service**: This defines the tasks to execute on the manager or worker. The
    difference between services and a standalone container is that you can modify
    a service''s configuration without restarting the service.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：这定义了要在管理者或工作者上执行的任务。服务和独立容器之间的区别在于，您可以修改服务的配置而无需重新启动服务。'
- en: '**Node**: An individual system running Docker Engine and participating in the
    swarm is a node. More than one node can run on a single physical computer at one
    time through the use of virtualization.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点**：运行Docker Engine并参与集群的个体系统是一个节点。通过虚拟化，一个物理计算机可以同时运行多个节点。'
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will only be using one node on our system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只在我们的系统上使用一个节点。
- en: '**Manager**: The manager dispatches tasks to worker nodes. The manager carries
    out orchestration and cluster management. It also hosts services on the cluster.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经理：经理将任务分配给工作节点。经理进行编排和集群管理。它还在集群上托管服务。
- en: '**Leader node**: The manager node in the swarm elects a single primary leader
    node to conduct the orchestration tasks across the cluster.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**领导节点**：集群中的管理节点选举一个单一的主领导节点来负责整个集群的编排任务。'
- en: '**Worker nodes**: Worker nodes execute the tasks assigned by the manager node.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作节点**：工作节点执行经理节点分配的任务。'
- en: Now that you are familiar with the key terms, let's explore how Docker Swarm
    works in the following section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您熟悉了关键术语，让我们在下一节中探讨Docker Swarm的工作原理。
- en: How Docker Swarm Works?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm的工作原理？
- en: The swarm manager nodes handle cluster management, and the main objective is
    to maintain a consistent state of both the swarm and the services running on it.
    This includes ensuring that the cluster is running at all times and that services
    are run and scheduled when needed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 集群管理节点处理集群管理，主要目标是维护集群和运行在其上的服务的一致状态。这包括确保集群始终运行，并在需要时运行和调度服务。
- en: As there are multiple managers running at the same time, this means there is
    fault tolerance, especially in a production environment. That is, if one manager
    is shut down, the cluster will still have another manager to coordinate services
    on the cluster. The sole purpose of worker nodes is to run Docker containers.
    They require at least one manager to function, but worker nodes can be promoted
    to being a manager, if needed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于同时运行多个管理者，这意味着在生产环境中有容错能力。也就是说，如果一个管理者关闭，集群仍将有另一个管理者来协调集群上的服务。工作节点的唯一目的是运行Docker容器。它们需要至少一个管理者才能运行，但如果需要，工作节点可以晋升为管理者。
- en: Services permit you to deploy an application image to a Docker swarm. These
    are the containers to run and the commands to execute inside the running container.
    Service options are provided when you create a service, where you can specify
    the ports the application can publish on, CPU and memory restrictions, the rolling
    update policy, and the number of replicas of an image that can run.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 服务允许您将应用程序镜像部署到Docker swarm。这些是要运行的容器和在运行容器内执行的命令。在创建服务时提供了服务选项，您可以在其中指定应用程序可以发布的端口、CPU和内存限制、滚动更新策略以及可以运行的镜像副本数量。
- en: The desired state is set for the service, and the manager's responsibility is
    to monitor the service. If the service is not in the desired state, it will correct
    any issues. If a task fails, the orchestrator simply removes the container related
    to the failed task and replaces it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务的期望状态已经设置，并且管理节点的责任是监视服务。如果服务不处于期望的状态，它将纠正任何问题。如果一个任务失败，编排器会简单地移除与失败任务相关的容器并替换它。
- en: Now that you know how Docker Swarm works, the next section will get you started
    with the basic commands and guide you through a hands-on exercise to further demonstrate
    its operation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了Docker Swarm的工作原理，接下来的部分将带您开始使用基本命令，并通过一个实际操作来进一步演示其操作。
- en: Working with Docker Swarm
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Swarm
- en: The previous section of this chapter has shown you that Swarm uses similar concepts
    to what you have already learned so far in this book. You'll see that the use
    of Swarm takes the Docker commands you are so familiar with and expands them to
    allow you to create your clusters, manage services, and configure your nodes.
    Docker Swarm takes a lot of the hard work out of running your services, as Swarm
    will work out where it is best to place your services, take care of scheduling
    your containers, and decide which node it is best to place it on. For example,
    if there are already three services running on one node and only one service on
    your second node, Swarm will know that it should distribute the services evenly
    across your system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的前一部分已经向您展示了Swarm使用了与您在本书中已经学到的类似概念。您将看到，使用Swarm会将您已经非常熟悉的Docker命令扩展到允许您创建集群、管理服务和配置节点。Docker
    Swarm大大简化了运行服务的工作，因为Swarm会确定最佳放置服务的位置，负责安排容器的调度，并决定最适合放置服务的节点。例如，如果一个节点上已经运行了三个服务，而第二个节点上只有一个服务，Swarm会知道应该均匀地分配服务到您的系统中。
- en: 'By default, Docker Swarm is disabled, so to run Docker in swarm mode, you will
    need to either join an existing cluster or create a new swarm. To create a new
    swarm and activate it in your system, you use the `swarm init` command shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker Swarm是禁用的，因此要在swarm模式下运行Docker，您需要加入现有集群或创建一个新的swarm。要创建一个新的swarm并在系统中激活它，您可以使用此处显示的`swarm
    init`命令：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will create a new single-node swarm cluster on the node you are currently
    working on. Your system will become the manager node for the swarm you have just
    created. When you run the `init` command, you'll also be provided with the details
    on the commands needed to allow other nodes to join your swarm.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您当前工作的节点上创建一个新的单节点swarm集群。您的系统将成为您刚刚创建的swarm的管理节点。当您运行`init`命令时，还将提供有关允许其他节点加入您的swarm所需的命令的详细信息。
- en: 'For a node to join a swarm, it requires a secret token, and the token for a
    worker node is different from that of a manager node. The manager tokens need
    to be strongly protected so you don''t allow your swarm cluster to become vulnerable.
    Once you have the token, IP address, and port of the swarm that your node needs
    to join, you run a command similar to the one shown here, using the `--token`
    option:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入集群的节点需要一个秘密令牌，工作节点的令牌与管理节点的不同。管理令牌需要得到强有力的保护，以免使您的集群集群变得脆弱。一旦您获得了节点需要加入的集群的令牌、IP地址和端口，您可以运行类似于下面显示的命令，使用`--token`选项：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If for some reason you need to change the tokens (possibly for security reasons),
    you can run the `join-token --rotate` option to generate new tokens as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因您需要更改令牌（可能是出于安全原因），您可以运行`join-token --rotate`选项来生成新的令牌，如下所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From the swarm manager node, the following `node ls` command will allow you
    to see the nodes available in your swarm and provide details on the status of
    the node, whether it is a manager or a worker, and whether there are any issues
    with the node:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从集群管理节点，以下`node ls`命令将允许您查看集群中可用的节点，并提供有关节点状态的详细信息，无论它是管理节点还是工作节点，以及节点是否存在任何问题：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once your swarm is available and ready to start hosting services, you can create
    a service with the `service create` command, providing the name of the service,
    the container image, and the commands needed for the service to run correctly—for
    example, if you need to expose ports or mount volumes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的集群可用并准备好开始托管服务，您可以使用`service create`命令创建一个服务，提供服务的名称、容器镜像以及服务正确运行所需的命令，例如，如果您需要暴露端口或挂载卷：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Changes can then be made to the service configuration, or you can change the
    way the service is running by using the `update` command, as shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以对服务配置进行更改，或者您可以使用`update`命令更改服务的运行方式，如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, if you need to remove or stop the service from running, you simply
    use the `service remove` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您需要删除或停止服务运行，您只需使用`service remove`命令：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We've provided a lot of theory on Docker Swarm here, and we hope it has provided
    you with a clear understanding of how it works and how you can use Swarm to launch
    your services and scale to provide a stable service when there is high demand.
    The following exercise will take what we have learned so far and show you how
    to implement it in your projects.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里提供了关于Docker Swarm的许多理论，希望它为您提供了清晰的了解，以及您如何使用Swarm来启动您的服务并在需求高时进行扩展以提供稳定的服务。以下练习将会将我们迄今为止学到的知识，并向您展示如何在您的项目中实施它。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`touch`命令创建文件，并使用`vim`命令在文件上使用vim编辑器。
- en: 'Exercise 9.01: Running Services with Docker Swarm'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.01：使用Docker Swarm运行服务
- en: 'This exercise is designed to help you become familiar with using the Docker
    Swarm commands to manage your services and containers. In the exercise, you will
    activate a cluster, set up a new service, test scaling up the service, and then
    remove the service from the cluster using Docker Swarm:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习旨在帮助您熟悉使用Docker Swarm命令来管理您的服务和容器。在这个练习中，您将激活一个集群，设置一个新的服务，测试扩展服务，然后使用Docker
    Swarm从集群中删除服务：
- en: 'Although Swarm is included by default with your Docker installation, you still
    need to activate it on your system. Use the `docker swarm init` command to put
    your local system into Docker Swarm mode:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然Swarm默认包含在Docker安装中，但您仍然需要在系统上激活它。使用`docker swarm init`命令将您的本地系统置于Docker Swarm模式：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Your output might be a little different from what you see here, but as you
    can see, once the swarm is created, the output provides details on how you can
    add extra nodes to your cluster with the `docker swarm join` command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您的输出可能与此处看到的有些不同，但如您所见，一旦创建了swarm，输出将提供有关如何使用`docker swarm join`命令向集群添加额外节点的详细信息：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now list the nodes you have in your cluster, using the `node ls` command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`node ls`命令列出您在集群中拥有的节点：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should have one node you are currently working on and its status should
    be `Ready`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有一个您当前正在使用的节点，并且其状态应为`Ready`：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For clarity here, we have removed the `Engine Version` column from our output.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，我们已经从输出中删除了`Engine Version`列。
- en: 'From your node, check the status of your swarm using the `docker info` command,
    providing further details of your Swarm cluster and how the node is interacting
    with it. It will also give you extra information if you need to troubleshoot issues
    later:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的节点上，使用`docker info`命令检查您的swarm的状态，提供有关Swarm集群以及节点与其交互方式的进一步详细信息。如果您需要以后排除故障，它还会为您提供额外的信息：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see from the output, you get all the specific details of your Docker
    Swarm cluster, including `NodeID` and `ClusterID`. If you don''t have Swarm set
    up correctly on your system, all you will see is an output of `Swarm: inactive`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '如您从输出中所见，您将获得有关您的Docker Swarm集群的所有具体细节，包括`NodeID`和`ClusterID`。如果您在系统上没有正确设置Swarm，您将只看到`Swarm:
    inactive`的输出：'
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start your first service on your newly created swarm. Create a service named
    `web` using the `docker service create` command and the `--replicas` option to
    set two instances of the container running:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的swarm上启动您的第一个服务。使用`docker service create`命令和`--replicas`选项创建一个名为`web`的服务，以设置两个容器实例运行：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will see that the two instances are successfully created:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到成功创建了两个实例：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Similar to the `docker ps` command, you can see a listing of the services running
    on your cluster with the `docker service ls` command. Execute the `docker service
    ls` command to view the details of the `web` service created in the *step 4*:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于`docker ps`命令，您可以使用`docker service ls`命令查看集群上正在运行的服务的列表。执行`docker service
    ls`命令以查看在*步骤4*中创建的`web`服务的详细信息：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The command will return the details of the `web` service:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将返回`web`服务的详细信息：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To view the containers currently running on your swarm, use the `docker service
    ps` command with the name of your service, `web`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看当前在您的swarm上运行的容器，请使用`docker service ps`命令并提供您的服务名称`web`：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, you now have a list of the containers running our service:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您现在有一个正在运行我们服务的容器列表：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The service will only run the default `Welcome to nginx!` page. Use the node
    IP address to view the page. In this instance, it will be your localhost IP, `0.0.0.0`:![Figure
    9.1: The nginx service from Docker Swarm'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该服务将仅运行默认的`Welcome to nginx!`页面。使用节点IP地址查看页面。在这种情况下，它将是您的本地主机IP，`0.0.0.0`：![图9.1：来自Docker
    Swarm的nginx服务
- en: '](image/B15021_09_01.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_01.jpg)'
- en: 'Figure 9.1: The nginx service from Docker Swarm'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：来自Docker Swarm的nginx服务
- en: 'Scaling the number of containers running your service is easy with Docker Swarm.
    Simply provide the `scale` option with the number of total containers you want
    to have running, and the swarm will do the work for you. Perform the command shown
    here to scale your running web containers to `3`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Docker Swarm轻松扩展运行服务的容器数量。只需提供`scale`选项和您想要运行的总容器数量，swarm将为您完成工作。执行此处显示的命令，将您正在运行的web容器扩展到`3`：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following output shows that the `web` service is now scaled to `3` containers:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示`web`服务现在扩展到`3`个容器：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As in *step 5* of this exercise, run the `service ls` command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如本练习的*步骤5*中所述，运行`service ls`命令：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should now see three `web` services running on your cluster:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该看到你的集群上运行了三个`web`服务：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following change is more suited to a cluster with more than one node, but
    you can run it anyway to see what happens. Run the following `node update` command
    to set the availability to `drain` and use your node ID number or name. This will
    remove all the containers running on this node as it is no longer available on
    your cluster. You will be provided with the node ID as an output:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下更改更适合于具有多个节点的集群，但你可以运行它来看看会发生什么。运行以下`node update`命令将可用性设置为`drain`，并使用你的节点ID号或名称。这将删除在该节点上运行的所有容器，因为它在你的集群上不再可用。你将得到节点ID作为输出：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you were to run the `docker service ps web` command, you would see each
    of your `web` services shut down while trying to start up new `web` services.
    As you only have one node running, the services would be sitting in a pending
    state with `no suitable node` error. Run the `docker service ps web` command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你运行`docker service ps web`命令，你会看到每个`web`服务在尝试启动新的`web`服务时关闭。由于你只有一个正在运行的节点，服务将处于等待状态，并显示`no
    suitable node`错误。运行`docker service ps web`命令：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output has been reduced to only show the second, third, fifth, and sixth
    columns, but you can see that the service is unable to start. The `CURRENT STATE`
    column has both `Pending` and `Shutdown` states:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出已经减少，只显示第二、第三、第五和第六列，但你可以看到服务无法启动。`CURRENT STATE`列同时具有`Pending`和`Shutdown`状态：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the `docker node ls` command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker node ls`命令：
- en: '[PRE26]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This shows that your node is ready but in an `AVAILABILITY` state of `Drain`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明你的节点已准备就绪，但处于`AVAILABILITY`状态为`Drain`：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Stop the service from running. Use the `service rm` command, followed by the
    service name (in this instance, `web`) to stop the service from running:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止服务运行。使用`service rm`命令，后跟服务名称（在本例中为`web`）来停止服务运行：
- en: '[PRE28]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The only output shown will be the name of the service you are removing:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一显示的输出将是你要移除的服务的名称：
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You don''t want to leave your node in a `Drain` state as you want to keep using
    it through the rest of the exercises. To get the node out of a `Drain` state and
    prepare to start managing swarm, set the availability to `active` with the following
    command using your node ID:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你不想让你的节点处于`Drain`状态，因为你希望在练习的其余部分继续使用它。要使节点退出`Drain`状态并准备开始管理Swarm，使用以下命令将可用性设置为`active`，并使用你的节点ID：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The command will return the hash value of the node, which will be different
    for every user.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将返回节点的哈希值，对于每个用户来说都是不同的。
- en: 'Run the `node ls` command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`node ls`命令：
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It will now show the availability of our node as `Active` and ready your services
    to run again:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它将显示我们节点的可用性为`Active`，并准备好再次运行你的服务：
- en: '[PRE32]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Use the `docker node inspect` command with the `--format` option and search
    for the `ManagerStatus.Reachability` status to ensure that your node is reachable:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker node inspect`命令和`--format`选项，并搜索`ManagerStatus.Reachability`状态，以确保你的节点是可访问的：
- en: '[PRE33]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If the node is available and can be contacted, you should see a result of `reachable`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果节点可用并且可以联系，你应该看到一个`reachable`的结果：
- en: '[PRE34]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Search for `Status.State` to ensure that the node is ready:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`Status.State`以确保节点已准备就绪：
- en: '[PRE35]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This should produce `ready`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该产生`ready`：
- en: '[PRE36]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This exercise should have given you a good indication of how Docker Swarm is
    able to simplify your work, especially when you start to think about deploying
    your work into a production environment. We used the Docker Hub NGINX image, but
    we could easily use any service we have created as a Docker image that is available
    to our Swarm node.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习应该让你对Docker Swarm如何简化你的工作有一个很好的了解，特别是当你开始考虑将你的工作部署到生产环境时。我们使用了Docker Hub
    NGINX镜像，但我们可以轻松地使用我们创建的任何服务作为Docker镜像，这些镜像对我们的Swarm节点可用。
- en: The next section will take a quick sidestep to discuss some actions you need
    to take if you find yourself in trouble with your Swarm nodes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将快速讨论一些操作，如果您发现自己在Swarm节点出现问题时需要采取的措施。
- en: Troubleshooting Swarm Nodes
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排除Swarm节点问题
- en: 'For the work we will be doing in this chapter, we will be using only a single-node
    swarm to host our services. Docker Swarm has been providing production-level environments
    for years now. However, this doesn''t mean there will never be any issues with
    your environment, especially when you start hosting services in a multi-node swarm.
    If you need to troubleshoot any of the nodes running on your cluster, there are
    a number of steps you can take to make sure you are correcting any issues they
    may have:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将只使用单节点swarm来托管我们的服务。Docker Swarm多年来一直提供生产级环境。然而，这并不意味着您的环境永远不会出现问题，特别是当您开始在多节点swarm中托管服务时。如果您需要排除集群上运行的任何节点的问题，您可以采取一些步骤来确保您正在纠正它们可能存在的任何问题：
- en: '**Reboot**: Usually the easiest option is to either reboot or restart the node
    system to see whether this resolves the issues you may be experiencing.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新启动：通常最简单的选择是重新启动节点系统，以查看是否解决了您可能遇到的问题。
- en: '**Demote the node**: If the node is a manager on your cluster, try demoting
    the node using the `node demote` command:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降级节点：如果节点是您集群中的管理节点，请尝试使用`node demote`命令降级节点：
- en: '[PRE37]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If this node is the leader, it will allow one of the other manager nodes to
    become the leader of the swarm and hopefully resolve any issues you may be experiencing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此节点是领导者，它将允许其他管理节点之一成为swarm的领导者，并希望解决您可能遇到的任何问题。
- en: '**Remove the node from the cluster**: Using the `node rm` command, you can
    remove the node from the cluster:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从集群中删除节点：使用`node rm`命令，您可以从集群中删除节点：
- en: '[PRE38]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This can also be an issue if the node is not communicating correctly with the
    rest of the swarm, and you may need to use the `--force` option to remove the
    node from the cluster:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果节点与swarm的其余部分没有正确通信，这也可能是一个问题，您可能需要使用`--force`选项从集群中删除节点：
- en: '[PRE39]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Join back to the cluster**: If the preceding has worked correctly, you may
    be able to successfully join the node back onto the cluster with the `swarm join`
    command. Remember to use the token that you used before when joining the swarm:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新加入集群：如果前面的操作正确执行，您可以使用`swarm join`命令成功将节点重新加入集群。记得使用加入swarm时使用的令牌：
- en: '[PRE40]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If your services are still having issues running on Docker Swarm and you have
    corrected all issues with the Swarm nodes, Swarm is simply using Docker to run
    and deploy your services onto the nodes in your environment. Any issues may come
    down to basic troubleshooting with the container image you are trying to run on
    Swarm and not the Swarm environment itself.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的服务在Docker Swarm上仍然存在问题，并且您已经纠正了所有与Swarm节点相关的问题，Swarm只是使用Docker在您的环境中运行和部署服务。任何问题可能归结为对您尝试在Swarm上运行的容器映像的基本故障排除，而不是Swarm环境本身。
- en: 'A cluster of managers is known as a **quorum**, and a majority of the managers
    need to agree on the proposed updates to the swarm, such as adding new nodes or
    scaling back the number of containers. As we saw in the previous section, you
    can monitor swarm managers'' or nodes'' health by running the `docker node ls`
    command, using the ID of the manager to then use the `docker node inspect` command
    as shown here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一组管理节点被称为**仲裁**，大多数管理节点需要就提议更新swarm达成一致意见，例如添加新节点或缩减容器数量。正如我们在前一节中看到的，您可以通过运行`docker
    node ls`命令来监视swarm管理节点或节点的健康状况，然后使用管理节点的ID来使用`docker node inspect`命令，如下所示：
- en: '[PRE41]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: One final note on your Swarm node is to remember to deploy services to your
    nodes that have been created as Docker images. The container image itself needs
    to be available for download from a central Docker Registry, which is available
    for all the nodes to download from and not simply built on one of the Swarm nodes.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 关于您的Swarm节点的最后一点是要记住将服务部署到已创建为Docker镜像的节点上。容器镜像本身需要从中央Docker注册表下载，该注册表可供所有节点从中下载，而不仅仅是在Swarm节点上构建。
- en: Although we've taken a quick detour to discuss troubleshooting your Swarm nodes,
    this should not be a major aspect of running services on Swarm. The next part
    of this chapter moves a step further by showing you how you can use new or existing
    `docker-compose.yml` files to automate the deployment of your services into Docker
    Swarm.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经快速讨论了解决Swarm节点故障的方法，但这不应该是在Swarm上运行服务的主要方面。本章的下一部分将进一步向前迈进，向您展示如何使用新的或现有的`docker-compose.yml`文件来自动部署您的服务到Docker
    Swarm中。
- en: Deploying Swarm Deployments from Docker Compose
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Compose部署Swarm部署
- en: Deploying a complete environment is easy with Docker Swarm; you'll see that
    most of the work is already done if you have been running your containers using
    Docker Compose. This means you won't need to manually start services one by one
    in Swarm as we did in the previous section of this chapter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker Swarm部署完整环境很容易；如果您一直在使用Docker Compose运行容器，您会发现大部分工作已经完成。这意味着您不需要像我们在本章的前一部分中那样手动逐个启动Swarm中的服务。
- en: 'If you already have a `docker-compose.yml` file available to bring up your
    services and applications, there is a good chance it will simply work without
    issues. Swarm will use the `stack deploy` command to deploy all your services
    across the Swarm nodes. All you need to do is provide the `compose` file and assign
    the stack a name:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个可用的`docker-compose.yml`文件来启动您的服务和应用程序，那么它很可能会在没有问题的情况下简单地工作。Swarm将使用`stack
    deploy`命令在Swarm节点上部署所有您的服务。您只需要提供`compose`文件并为堆栈分配一个名称：
- en: '[PRE42]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The stack creation is quick and seamless, but a lot is happening in the background
    to make sure all services are running correctly—including setting up networks
    between all the services and starting up each of the services in the order needed.
    Running the `stack ps` command with the `swarm_name` you provided at creation
    time will show you whether all the services in your deployment are running:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈创建快速而无缝，但在后台会发生很多事情，以确保所有服务都正常运行，包括在所有服务之间设置网络，并按需要的顺序启动每个服务。使用在创建时提供的`swarm_name`运行`stack
    ps`命令将向您显示部署中所有服务是否正在运行：
- en: '[PRE43]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And once you are finished using the services on your swarm or you need to clean
    up everything that is deployed, you simply use the `stack rm` command, providing
    the `swarm_name` you provided when you created the stack deployment. This will
    automatically stop and clean up all the services running in your swarm and ready
    them for you to reassign to other services:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了在您的swarm上使用服务，或者您需要清理部署的所有内容，您只需使用`stack rm`命令，提供您在创建堆栈部署时提供的`swarm_name`。这将自动停止和清理在您的swarm中运行的所有服务，并准备好让您重新分配给其他服务：
- en: '[PRE44]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, since we know the commands used to deploy, run, and manage our Swarm stack,
    we can look at how to perform rolling updates for our services.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然我们知道了用于部署、运行和管理我们的Swarm堆栈的命令，我们可以看看如何为我们的服务执行滚动更新。
- en: Swarm Service Rolling Updates
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swarm服务滚动更新
- en: Swarm also has the ability to perform rolling updates on the services that are
    running. This means if you have a new update to an application running on your
    Swarm, you can create a new Docker image and update your service, and Swarm will
    make sure the new image is up and running successfully before it brings down the
    old version of your container image.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm还具有对正在运行的服务执行滚动更新的能力。这意味着如果您对Swarm上运行的应用程序有新的更新，您可以创建一个新的Docker镜像并更新您的服务，Swarm将确保新镜像在成功运行之前将旧版本的容器镜像关闭。
- en: 'Performing a rolling update on a service you have running in Swarm is simply
    a matter of running the `service update` command. In the following command, you
    can see both the new container image name and the service you want to update.
    Swarm will handle the rest:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在Swarm中对正在运行的服务执行滚动更新只是运行`service update`命令的简单问题。在以下命令中，您可以看到新的容器镜像名称和要更新的服务。Swarm将处理其余部分。
- en: '[PRE45]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You'll get the chance very shortly to use all the commands we've explained here.
    In the following example, you will create a small test application using Django
    and PostgreSQL. The web application you will be setting up is very basic, so there
    is no real need to have a prior understanding of the Django web framework. Simply
    follow along and we will explain what is happening as we move through the exercise.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您很快就有机会使用我们在这里解释过的所有命令。在以下示例中，您将使用Django和PostgreSQL创建一个小型测试应用程序。您将要设置的Web应用程序非常基本，因此没有必要事先了解Django
    Web框架。只需跟着做，我们将在练习中逐步解释发生的事情。
- en: 'Exercise 9.02: Deploying Your Swarm from Docker Compose'
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.02：从Docker Compose部署您的Swarm
- en: 'In the following exercise, you will use `docker-compose.yml` to create a basic
    web application using a PostgreSQL database and the Django web framework. You
    will then use this `compose` file to deploy your services into your swarm without
    the need to run your services manually:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，您将使用`docker-compose.yml`创建一个使用PostgreSQL数据库和Django Web框架的基本Web应用程序。然后，您将使用此`compose`文件将服务部署到Swarm中，而无需手动运行服务。
- en: 'First, create a directory to run your application in. Call the directory `swarm`
    and move into the directory using the `cd` command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个目录来运行您的应用程序。将目录命名为`swarm`，并使用`cd`命令进入该目录。
- en: '[PRE46]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create a `Dockerfile` for your Django application in the new directory and,
    using your text editor, enter the details in the following code block. The `Dockerfile`
    will use the default `Python3` image, set environment variables relevant for Django,
    install relevant applications, and copy the code into the current directory of
    the container image:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新目录中为您的Django应用程序创建一个`Dockerfile`，并使用文本编辑器输入以下代码块中的详细信息。`Dockerfile`将使用默认的`Python3`镜像，设置与Django相关的环境变量，安装相关应用程序，并将代码复制到容器镜像的当前目录中。
- en: '[PRE47]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create the `requirements.txt` file that your `Dockerfile` uses in the previous
    step to install all the relevant applications needed for it to run. Add in the
    following two lines with your text editor to install the version of `Django` and
    `Psycopg2` required by the Django application to communicate with the PostgreSQL
    database:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`requirements.txt`文件，您的`Dockerfile`在上一步中使用它来安装运行所需的所有相关应用程序。使用文本编辑器添加以下两行以安装Django应用程序与PostgreSQL数据库通信所需的`Django`和`Psycopg2`版本。
- en: '[PRE48]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create a `docker-compose.yml` file using your text editor. Add in the first
    service for your database, as shown in the following code. The `db` service will
    use the latest `postgres` image from Docker Hub, exposing port `5432`, and also
    set the environment variable for `POSTGRES_PASSWORD`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器创建一个`docker-compose.yml`文件。根据以下代码添加第一个数据库服务。`db`服务将使用Docker Hub上的最新`postgres`镜像，公开端口`5432`，并设置`POSTGRES_PASSWORD`环境变量。
- en: '[PRE49]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The second half of the `docker-compose.yml` file builds and deploys your web
    application. Build your `Dockerfile` in *line 10*, expose port `8000` to access
    it from your web browser, and set the database password to match your `db` service.
    You will also notice a Python command in *line 13* that will start the development
    web server for the Django application:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker-compose.yml`文件的后半部分构建和部署您的web应用程序。在*第10行*中构建您的`Dockerfile`，将端口`8000`暴露出来，以便从Web浏览器访问，并将数据库密码设置为与您的`db`服务匹配。您还会注意到*第13行*中的Python命令，它将启动Django应用程序的开发Web服务器：'
- en: '[PRE50]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the following command to pull and build the `db` and `web` services in
    your `docker-compose.yml`. The command will then run `django-admin startproject`,
    which will create your basic Django project, named `chapter_nine`:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来拉取和构建`docker-compose.yml`中的`db`和`web`服务。然后该命令将运行`django-admin startproject`，这将创建您的基本Django项目，名为`chapter_nine`：
- en: '[PRE51]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The command should return the following output, in which you see the containers
    being pulled and built:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回以下输出，其中您可以看到正在拉取和构建的容器：
- en: '[PRE52]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `startproject` command you ran in the previous step should have created
    some extra files and directories in your swarm directory. Run the `ls` command
    to list all the files and directories in the swarm directory:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步中运行的`startproject`命令应该在您的swarm目录中创建了一些额外的文件和目录。运行`ls`命令列出swarm目录中的所有文件和目录：
- en: '[PRE53]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You previously created the `Dockerfile`, `docker-compose.yml` file, and `requirements.txt`
    file, but now the build of the container has added the `chapter_nine` Django directory
    and the `manage.py` file:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您之前创建了`Dockerfile`、`docker-compose.yml`文件和`requirements.txt`文件，但现在容器的构建已经添加了`chapter_nine`
    Django目录和`manage.py`文件：
- en: '[PRE54]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'To get your basic application running, you need to make some minor changes
    to the Django project settings. Open the `chapter_nine/settings.py` file with
    your text editor and locate the entry that starts with `DATABASES`. This controls
    how Django will connect to your database, and by default, Django is set up to
    work with an SQLite database. The `DATABASES` entry should look like the following:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使您的基本应用程序运行，您需要对Django项目设置进行一些微小的更改。用文本编辑器打开`chapter_nine/settings.py`文件，并找到以`DATABASES`开头的条目。这控制Django如何连接到您的数据库，默认情况下，Django设置为使用SQLite数据库。`DATABASES`条目应如下所示：
- en: '[PRE55]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You have a PostgreSQL database to deploy to Swarm as a part of our installation,
    so edit the `DATABASES` settings with the following eight lines so that Django
    will access this PostgreSQL database instead:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一个要部署到Swarm的PostgreSQL数据库作为我们安装的一部分，因此使用以下八行编辑`DATABASES`设置，以便Django将访问此PostgreSQL数据库：
- en: settings.py
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: settings.py
- en: '[PRE56]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The complete code for this step can be found at [https://packt.live/2DWP9ov](https://packt.live/2DWP9ov).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤的完整代码可在[https://packt.live/2DWP9ov](https://packt.live/2DWP9ov)找到。
- en: 'At *line 28* of our `settings.py` file, we also need to add the IP address
    we are going to use as the `ALLOWED_HOSTS` configuration. We will configure our
    application to be accessible from the IP address `0.0.0.0`. Make the relevant
    changes to the settings file at *line 28* so that it now looks like the code below:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`settings.py`文件的*第28行*，我们还需要添加我们将用作`ALLOWED_HOSTS`配置的IP地址。我们将配置我们的应用程序可以从IP地址`0.0.0.0`访问。对设置文件进行相关更改，使其在*第28行*看起来像下面的代码：
- en: '[PRE57]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now test to see whether your basic project is working as expected. From the
    command line, deploy your services to Swarm with the `stack deploy` command. In
    the following command, specify the `docker-compose.yml` file to use with the `--compose-file`
    option and name the stack `test_swarm`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在测试一下，看看您的基本项目是否按预期工作。从命令行，使用`stack deploy`命令将您的服务部署到Swarm。在以下命令中，使用`--compose-file`选项指定要使用的`docker-compose.yml`文件，并命名堆栈为`test_swarm`：
- en: '[PRE58]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The command should set up the swarm network, the database, and the web services:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应该设置swarm网络、数据库和web服务：
- en: '[PRE59]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Run the `docker service ls` command, and you should be able to see the status
    for both the `test_swarm_db` and `test_swarm_web` services:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker service ls`命令，您应该能够看到`test_swarm_db`和`test_swarm_web`服务的状态：
- en: '[PRE60]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'As you can see in the following output, they are both showing a `REPLICAS`
    value of `1/1`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如下输出所示，它们都显示了`REPLICAS`值为`1/1`：
- en: '[PRE61]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'If your work has been successful, test it by opening a web browser and going
    to `http://0.0.0.0:8000`. If everything has worked, you should see the following
    Django test page displayed on your web browser:![Figure 9.2: Deploying a service
    to Swarm with Docker Compose file'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的工作成功，可以通过打开Web浏览器并转到`http://0.0.0.0:8000`来进行测试。如果一切正常，您应该在Web浏览器上看到以下Django测试页面显示：![图9.2：使用Docker
    Compose文件将服务部署到Swarm
- en: '](image/B15021_09_02.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_02.jpg)'
- en: 'Figure 9.2: Deploying a service to Swarm with Docker Compose file'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：使用Docker Compose文件将服务部署到Swarm
- en: 'To view the stacks currently running on your system, use the `stack ls` command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看当前在您的系统上运行的堆栈，请使用`stack ls`命令：
- en: '[PRE62]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You should see the following output, which shows two services running under
    the name of `test_swarm`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出，显示了两个以`test_swarm`名称运行的服务：
- en: '[PRE63]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Use the `stack ps` command with the name of your swarm to view the services
    running and check whether there are any issues:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的swarm名称运行`stack ps`命令，查看正在运行的服务并检查是否存在任何问题：
- en: '[PRE64]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The `ID`, `DESIRED STATE`, and `ERROR` columns are not included in the following
    reduced output. Also, it can be seen that the `test_swarm_web.1` and `test_swarm_db.1`
    services are running:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`ID`、`DESIRED STATE`和`ERROR`列未包含在以下精简输出中。还可以看到`test_swarm_web.1`和`test_swarm_db.1`服务正在运行：'
- en: '[PRE65]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Just as you were able to start up all your services at once with the `deploy`
    command, you can stop the services all at once, as well. Use the `stack rm` command
    with the name of your swarm to stop all of your services from running and remove
    the stack:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像您可以使用`deploy`命令一次启动所有服务一样，您也可以一次停止所有服务。使用`stack rm`命令加上您的swarm名称来停止所有正在运行的服务并移除堆栈：
- en: '[PRE66]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Note that all the services are stopped in the following output:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以下输出中所有服务都已停止：
- en: '[PRE67]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You still want to perform some extra work on your swarm as part of this exercise,
    but first, make a minor change to the `compose` file. Open the `docker-compose.yml`
    file with your text editor and add the following lines to your web service to
    now have two replica web services created when deployed to the swarm:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为本练习的一部分，您仍然希望在swarm上执行一些额外的工作，但首先对`compose`文件进行一些微小的更改。使用文本编辑器打开`docker-compose.yml`文件，并向您的web服务添加以下行，以便在部署到swarm时创建两个副本web服务：
- en: '[PRE68]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The complete `docker-compose.yml` file should look like the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`docker-compose.yml`文件应该如下所示：
- en: '[PRE69]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Deploy the swarm again with the changes you have made using the same command,
    as you did earlier in *step 8*. Even if the `test_swarm` stack was still running,
    it would note and make the relevant changes to the services:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的命令再次部署swarm，就像在*步骤8*中所做的那样。即使`test_swarm`堆栈仍在运行，它也会注意并对服务进行相关更改：
- en: '[PRE70]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Run the `docker ps` command as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下`docker ps`命令：
- en: '[PRE71]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Only the first two columns are printed in the output shown here. You can now
    see that there are two `swarm_web` services running:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的输出中只打印了前两列。现在您可以看到有两个`swarm_web`服务正在运行：
- en: '[PRE72]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'To deploy a new version of the `swarm_web` service to your swarm without stopping
    the services, first, build a new Docker image of our web service. Don''t make
    any changes to the image, but this time tag the image with the `patch1` tag to
    demonstrate a change while the service is running:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在不停止服务的情况下将`swarm_web`服务的新版本部署到您的swarm中，首先构建我们Web服务的新Docker镜像。不要对图像进行任何更改，但是这次使用`patch1`标签标记图像以演示在服务运行时的更改：
- en: '[PRE73]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'To perform a rolling update, use the `service update` command, providing details
    of the image you wish to update to and the service name. Run the following command,
    which uses the image you have just created with the `patch1` tag, on the `test_swarm_web`
    service:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行滚动更新，请使用`service update`命令，提供要更新到的图像的详细信息和服务名称。运行以下命令，该命令使用您刚刚创建的带有`patch1`标签的图像，在`test_swarm_web`服务上：
- en: '[PRE74]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Swarm will manage the update to make sure one of the services is always running
    before the update is applied to the rest of the images:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm将管理更新，以确保在将更新应用于其余图像之前，其中一个服务始终在运行：
- en: '[PRE75]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You'll notice the output shows the image was not available on a repository.
    As we only have one node running our swarm, the update will use the image built
    on the node. In a real-world scenario, we would need to push this image to a central
    repository that all our nodes have access to so they can pull it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到输出显示图像在存储库中不可用。由于我们只有一个运行我们的swarm的节点，因此更新将使用在节点上构建的图像。在现实世界的情况下，我们需要将此图像推送到所有我们的节点都可以访问的中央存储库，以便它们可以拉取它。
- en: 'Run the `docker ps` command given here, which pipes its output to an `awk`
    command to only print the first two columns of `CONTAINER` and `ID`:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此处给出的`docker ps`命令，将其输出传输到`awk`命令，以仅打印`CONTAINER`和`ID`的前两列：
- en: '[PRE76]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The command will return the output such as the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将返回以下输出：
- en: '[PRE77]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'What if you wanted to control the way the rolling updates occur? Run the following
    command to perform a new rolling update to your `test_swarm_web` services. Revert
    the changes you made to deploy the image with the `latest` tag, but this time,
    make sure there is a `30`-second delay in performing the update as this will give
    your web service extra time to start up before the second update is run:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要控制滚动更新的方式怎么办？运行以下命令对`test_swarm_web`服务执行新的滚动更新。撤消对使用`latest`标签部署图像所做的更改，但是这次确保在执行更新时有`30`秒的延迟，这将给您的Web服务额外的时间在第二次更新运行之前启动：
- en: '[PRE78]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Run the `docker ps` command again:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`docker ps`命令：
- en: '[PRE79]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Note that the containers are now running the `swarm_web:latest` image again
    after you have performed the rolling update:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在执行滚动更新后，容器现在再次运行`swarm_web:latest`图像：
- en: '[PRE80]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: By now, you should see the benefit of using a swarm, especially when we start
    to scale out our applications using Docker Compose. In this exercise, we have
    demonstrated how to easily deploy and manage a group of services onto your swarm
    using Docker Compose and upgrade services with rolling updates.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该看到使用swarm的好处，特别是当我们开始使用Docker Compose扩展我们的应用程序时。在这个练习中，我们演示了如何使用Docker
    Compose轻松部署和管理一组服务到您的swarm，并使用滚动更新升级服务。
- en: The next section of this chapter will expand your knowledge further to show
    how you can use Swarm to manage your configurations and secret values used within
    your environment.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的下一部分将进一步扩展您的知识，以展示您如何使用Swarm来管理您环境中使用的配置和秘密值。
- en: Managing Secrets and Configurations with Docker Swarm
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker Swarm管理秘密和配置
- en: So far in this chapter, we have observed Docker Swarm's proficiency at orchestrating
    our services and applications. It also provides functionality to allow us to define
    configurations within our environment and then use these values. Why do we need
    this functionality, though?
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经观察到Docker Swarm在编排我们的服务和应用方面的熟练程度。它还提供了功能，允许我们在环境中定义配置，然后使用这些值。但是，我们为什么需要这个功能呢？
- en: Firstly, the way we have been storing details such as our secrets has not been
    very secure, especially when we are typing them in plain text in our `docker-compose.yml`
    file or including them as part of our built Docker image. For our secrets, Swarm
    allows us to store encrypted values that are then used by our services.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们一直以来存储诸如secrets之类的细节并不是非常安全，特别是当我们在`docker-compose.yml`文件中以明文输入它们，或者将它们作为构建的Docker镜像的一部分包含在其中。对于我们的secrets，Swarm允许我们存储加密值，然后由我们的服务使用。
- en: Secondly, by using these features, we can start to move away from setting up
    configurations in our `Dockerfile`. This means we can create and build our application
    as a container image. Then, we can run our application on any environment, be
    it a development system on a laptop or a test environment. We can also run the
    application on a production environment, where we assign it with a separate configuration
    or secrets value to use in that environment.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，通过使用这些功能，我们可以开始摆脱在`Dockerfile`中设置配置的方式。这意味着我们可以创建和构建我们的应用作为一个容器镜像。然后，我们可以在任何环境中运行我们的应用，无论是笔记本上的开发系统还是测试环境。我们还可以在生产环境中运行应用，为其分配一个单独的配置或secrets值在该环境中使用。
- en: 'Creating a Swarm `config` is simple, especially if you already have an existing
    file to use. The following code shows how we can create a new `config` using the
    `config create` command by providing our `config_name` and the name of our `configuration_file`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Swarm `config`很简单，特别是如果你已经有一个现有的文件可以使用。以下代码展示了我们如何使用`config create`命令创建一个新的`config`，并提供我们的`config_name`和`configuration_file`的名称：
- en: '[PRE81]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'This command creates a `config` stored as part of the swarm and is available
    to all the nodes in your cluster. To view the available configs on your system
    and the swarm, run the `ls` option with the `config` command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令创建了一个作为Swarm一部分存储的`config`，并且可以在集群中的所有节点上使用。要查看系统和Swarm上可用的配置，可以使用`config`命令的`ls`选项运行：
- en: '[PRE82]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'You can also view the details in the configuration using the `config inspect`
    command. Make sure you are using the `--pretty` option since the output is presented
    as a long JSON output that would be almost unreadable without it:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`config inspect`命令查看配置的详细信息。确保使用`--pretty`选项，因为输出以长JSON格式呈现，如果没有该选项，几乎无法阅读：
- en: '[PRE83]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Using secrets within Swarm provides a secure way to create and store sensitive
    information in our environments, such as usernames and passwords, in an encrypted
    state so it can then be used by our services.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在Swarm中使用secrets提供了一种安全的方式来创建和存储环境中的敏感信息，比如用户名和密码，以加密的方式存储，然后可以被我们的服务使用。
- en: 'To create a secret that is only holding a single value, such as a username
    or password, we can simply create the secret from the command line, where we pipe
    the secret value into the `secret create` command. The following sample command
    provides an example of how to do this. Remember to name the secret when you create
    it:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个只包含单个值的secret，比如用户名或密码，我们可以简单地从命令行创建secret，将secret值传递到`secret create`命令中。以下示例命令提供了如何做到这一点的示例。记得在创建时给secret命名：
- en: '[PRE84]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'You can make a secret from a file. For example, say you would like to set up
    a certificates file as a secret. The following command shows how to do this using
    the `secret create` command by providing the name of the secret and the name of
    the file you need to create the secret from:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从文件中创建一个秘密。例如，假设您想将证书文件设置为一个秘密。以下命令显示如何使用`secret create`命令来创建秘密，提供秘密的名称和您需要从中创建秘密的文件的名称：
- en: '[PRE85]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Once created, your secret will be available on all the nodes you have running
    on your swarm. Just as you were able to view your `config`, you can use the `secret
    ls` command to see a listing of all the available secrets in your swarm:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，您的秘密将在您的集群上运行的所有节点上都可用。就像您能够查看您的`config`一样，您可以使用`secret ls`命令来查看集群中所有可用秘密的列表：
- en: '[PRE86]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: We can see that Swarm provides us with flexible options to implement configurations
    and secrets in our orchestration, instead of needing to have it set up as part
    of our Docker images.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，Swarm为我们提供了灵活的选项，在我们的编排中实现配置和秘密，而不需要将其设置为我们的Docker镜像的一部分。
- en: The following exercise will demonstrate how to use both configurations and secrets
    in your current Docker Swarm environment.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习将演示如何在当前的Docker Swarm环境中同时使用配置和秘密。
- en: 'Exercise 9.03: Implementing Configurations and Secrets in Your Swarm'
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.03：在您的集群中实现配置和秘密
- en: 'In this exercise, you will expand your Docker Swarm environment further. You
    will add a service to your environment that will help NGINX to route the requests
    through the proxy, before moving into your web service. You will set this up using
    traditional methods but then use the `config` and `secret` functions as part of
    your environment to observe their operations within Swarm and help users deploy
    and configure services more efficiently:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将进一步扩展您的Docker Swarm环境。您将向您的环境添加一个服务，该服务将帮助NGINX通过代理路由请求，然后进入您的Web服务。您将使用传统方法设置这一点，然后使用`config`和`secret`函数作为您的环境的一部分来观察它们在Swarm中的操作，并帮助用户更有效地部署和配置服务：
- en: 'Currently, the web service is using the Django development web server via the
    `runserver` command to provide web requests. NGINX will not be able to route traffic
    requests through to this development server, and instead, you will need to install
    the `gunicorn` application onto our Django web service for traffic to be routed
    via NGINX. Start by opening your `requirements.txt` file with your text editor
    and add the application as in the highlighted third line:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，Web服务正在使用Django开发Web服务器通过`runserver`命令来处理Web请求。NGINX将无法将流量请求路由到这个开发服务器，而是需要将`gunicorn`应用程序安装到我们的Django
    Web服务上，以便通过NGINX路由流量。首先打开您的`requirements.txt`文件，使用文本编辑器添加应用程序，如下所示的第三行：
- en: '[PRE87]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Note
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Gunicorn is short for **Green Unicorn** and is used as a **Web Service Gateway
    Interface** (**WSGI**) for Python applications. Gunicorn is widely used for production
    environments as it is seen to be one of the most stable WSGI applications available.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Gunicorn是**Green Unicorn**的缩写，用作Python应用程序的**Web服务网关接口**（**WSGI**）。Gunicorn被广泛用于生产环境，因为它被认为是最稳定的WSGI应用程序之一。
- en: 'To run Gunicorn as part of your web application, adjust your `docker-compose.yml`
    file. Open the `docker-compose.yml` file with your text editor and change *line
    13* to run the `gunicorn` application, instead of the Django `manage.py runserver`
    command. The following `gunicorn` command runs the `chapter_nine` Django project
    via its WSGI service and binds to IP address and port `0.0.0.0:8000`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将Gunicorn作为您的Web应用程序的一部分运行，请调整您的`docker-compose.yml`文件。使用文本编辑器打开`docker-compose.yml`文件，并将*第13行*更改为运行`gunicorn`应用程序，而不是Django的`manage.py
    runserver`命令。以下`gunicorn`命令通过其WSGI服务运行`chapter_nine` Django项目，并绑定到IP地址和端口`0.0.0.0:8000`：
- en: '[PRE88]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Rebuild your web service to make sure the Gunicorn application is installed
    on the container and available to run. Run the `docker-compose build` command:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建您的web服务，以确保Gunicorn应用程序已安装在容器上并可运行。运行`docker-compose build`命令：
- en: '[PRE89]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Gunicorn can also run without the need of the NGINX proxy, so test the changes
    you have made by running the `stack deploy` command again. If you already have
    your services deployed, don''t worry, you can still run this command again. It
    will simply make the relevant changes to your swarm and match the changes in your
    `docker-compose.yml`:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gunicorn也可以在没有NGINX代理的情况下运行，因此通过再次运行`stack deploy`命令来测试您所做的更改。如果您已经部署了服务，不用担心，您仍然可以再次运行此命令。它将简单地对您的swarm进行相关更改，并匹配您的`docker-compose.yml`中的更改：
- en: '[PRE90]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The command will return the following output:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将返回以下输出：
- en: '[PRE91]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: To ensure the changes have taken effect, make sure you open your web browser
    and verify that the Django test page is still being provided by your web service
    before moving on to the next step. As per your changes, the page should still
    be displayed at `http://0.0.0.0:8000`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为确保更改已生效，请确保打开您的web浏览器，并验证Django测试页面仍然由您的web服务提供，然后再进行下一步。根据您的更改，页面应该仍然显示在`http://0.0.0.0:8000`。
- en: 'To start your implementation of NGINX, open the `docker-compose.yml` file again
    and change *lines 16 and 17* to expose port `8000` from the original `ports` command:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动NGINX的实现，请再次打开`docker-compose.yml`文件，并将*第16行和第17行*更改为从原始`ports`命令中暴露端口`8000`：
- en: '[PRE92]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Keeping the `docker-compose.yml` file open, add your `nginx` service at the
    end of the `compose` file. All of the information here should be familiar to you
    by now. *Line 25* provides the location of a new NGINX directory, the `Dockerfile`
    you will create shortly, and the name of the image to be used when the service
    is deployed. *Lines* *27* and *28* expose port `1337` to port `80` and *lines*
    *29* and *30* show that NGINX needs to depend on the `web` service to run:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持`docker-compose.yml`文件打开，将您的`nginx`服务添加到`compose`文件的末尾。现在，这里的所有信息对您来说应该都很熟悉。*第25行*提供了一个新的NGINX目录的位置，您将很快创建的`Dockerfile`，以及服务部署时要使用的镜像的名称。*第27行*和*第28行*将端口`1337`映射到端口`80`，*第29行*和*第30行*显示NGINX需要依赖`web`服务才能运行：
- en: '[PRE93]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Now, set up the NGINX `Dockerfile` and configurations for the service. Start
    by creating a directory called `nginx`, as in the following command:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为服务设置NGINX `Dockerfile`和配置。首先创建一个名为`nginx`的目录，如下命令所示：
- en: '[PRE94]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Create a new `Dockerfile` in the `nginx` directory, open the file with your
    text editor, and add in the details shown here. The `Dockerfile` is created from
    the latest `nginx` image available on Docker Hub. It removes the default configuration
    `nginx` file in *line 3* and then adds a new configuration that you need to set
    up shortly:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`nginx`目录中创建一个新的`Dockerfile`，用文本编辑器打开文件，并添加这里显示的细节。`Dockerfile`是从Docker Hub上可用的最新`nginx`镜像创建的。它删除了*第3行*中的默认配置`nginx`文件，然后添加了一个您需要很快设置的新配置：
- en: '[PRE95]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Create the `nginx.conf` file that the `Dockerfile` will use to create your
    new image. Create a new file called `nginx.conf` in the `nginx` directory and
    use your text editor to add the following configuration details:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`nginx.conf`文件，`Dockerfile`将使用它来创建您的新镜像。在`nginx`目录中创建一个名为`nginx.conf`的新文件，并使用文本编辑器添加以下配置细节：
- en: '[PRE96]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: If you're unfamiliar with NGINX configurations, the preceding details are simply
    looking for requests to the web service and will route requests through to the
    `chapter_nine` Django application.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对NGINX配置不熟悉，上述细节只是在寻找对web服务的请求，并将请求路由到`chapter_nine` Django应用程序。
- en: 'With all the details now in place, build your new image for the NGINX service
    now set up in your `docker-compose.yml` file. Run the following command to build
    the image:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在所有细节都已就绪，请为在您的`docker-compose.yml`文件中设置的NGINX服务构建新的映像。运行以下命令构建映像：
- en: '[PRE97]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Run the `stack deploy` command again:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`stack deploy`命令：
- en: '[PRE98]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'This time, you will notice that your output shows that the `test_swarm_nginx`
    service has been created and should be running:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，您会注意到您的输出显示`test_swarm_nginx`服务已被创建并应该正在运行：
- en: '[PRE99]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Verify that all the services are running as part of your swarm with the `stack
    ps` command:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`stack ps`命令验证所有服务是否作为swarm的一部分运行：
- en: '[PRE100]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The resulting output has been reduced to show only four of the eight columns.
    You can see that the `test_swarm_nginx` service is now running:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出已减少，仅显示了八列中的四列。您可以看到`test_swarm_nginx`服务现在正在运行：
- en: '[PRE101]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: To prove that requests are routing through the NGINX proxy, use port `1337`
    instead of port `8000`. Make sure that a web page is still being provided from
    your web browser by using the new URL of `http://0.0.0.0:1337`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了证明请求正在通过NGINX代理路由，请使用端口`1337`而不是端口`8000`。确保仍然可以从您的Web浏览器中使用新的URL `http://0.0.0.0:1337`提供网页。
- en: 'This has been a great addition to the services running on Swarm but is not
    using the correct configuration management features. You already have an NGINX
    configuration created previously in this exercise. Create a Swarm configuration
    by using the `config create` command with the name of the new configuration and
    the file you are going to create the configuration from. Run the following command
    to create the new configuration from your `nginx/nginx.conf` file:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是对在Swarm上运行的服务的一个很好的补充，但它没有使用正确的配置管理功能。您之前在此练习中已经创建了一个NGINX配置。使用`config create`命令和新配置的名称以及要创建配置的文件来创建一个Swarm配置。运行以下命令从您的`nginx/nginx.conf`文件创建新配置：
- en: '[PRE102]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The output from the command will provide you with the created configuration
    ID:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出将为您提供创建的配置ID：
- en: '[PRE103]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Swarm also gives you a way to list all the configurations created as part of
    your Swarm, using the `config ls` command. Make sure the new `nginx_config` file
    has been created in the previous step and run the following command:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Swarm还提供了一种列出作为Swarm一部分创建的所有配置的方法，使用`config ls`命令。确保在上一步中已创建新的`nginx_config`文件，并运行以下命令：
- en: '[PRE104]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '`nginx_config` has been created in the following output:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx_config`已在以下输出中创建：'
- en: '[PRE105]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'View the full details of the configuration you have created using the `docker
    config inspect` command. Run the following command with the `--pretty` option
    to make sure the configuration output is in a readable form:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker config inspect`命令查看您创建的配置的完整细节。运行以下命令并使用`--pretty`选项，以确保配置输出以可读形式显示：
- en: '[PRE106]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The output should look similar to what you see here, showing details of the
    NGINX configuration you have just created:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该看起来类似于您在这里看到的内容，显示了您刚刚创建的NGINX配置的细节：
- en: '[PRE107]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'As you have now set up the configuration in Swarm, make sure the configuration
    is no longer built into the container image. Instead, it will be provided when
    the Swarm is deployed. Open the `Dockerfile` in the `nginx` directory and remove
    the fourth line of the `Dockerfile`. It should now look similar to the details
    given here:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于您现在已经在Swarm中设置了配置，请确保配置不再内置到容器映像中。相反，它将在部署Swarm时提供。打开`nginx`目录中的`Dockerfile`并删除`Dockerfile`的第四行。现在它应该看起来类似于这里给出的细节：
- en: '[PRE108]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Note
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that the change we are making here will make sure that we don't need
    to build a new NGINX image every time the configuration changes. This means we
    can use the same image and deploy it to a development swarm or a production swarm.
    All we would do is change the configuration to make the environment. We do need
    to create the image that can use the config we have created and stored in Swarm,
    though.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们在这里所做的更改将确保我们不需要在配置更改时每次构建新的NGINX镜像。这意味着我们可以使用相同的镜像并将其部署到开发Swarm或生产Swarm。我们所要做的就是更改配置以适应环境。但是，我们确实需要创建可以使用我们在Swarm中创建和存储的配置的镜像。
- en: 'The previous step in this exercise made a change to the `nginx` `Dockerfile`,
    so now rebuild the image to make sure it is up to date:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个练习的上一步中，对`nginx`的`Dockerfile`进行了更改，现在重新构建镜像以确保其是最新的：
- en: '[PRE109]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Open the `docker-compose.yml` file with your text editor to update the `compose`
    file so that our `nginx` service will now use the newly created Swarm `config`.
    At the bottom of the `nginx` service, add in the configuration details with the
    source name of the `nginx_cof` configuration you created earlier. Be sure to add
    it to the running `nginx` service so it can be used by the container. Then, set
    up a separate configuration for the file. Even though you have created it manually
    in the previous steps, your swarm needs to know about it when it is deployed.
    Add the following into your `docker-compose.yml`:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用文本编辑器打开`docker-compose.yml`文件，更新`compose`文件，以便我们的`nginx`服务现在将使用新创建的Swarm`config`。在`nginx`服务的底部，添加配置细节，使用你之前创建的`nginx_cof`配置的源名称。确保将其添加到运行的`nginx`服务中，以便容器可以使用它。然后，为文件设置一个单独的配置。即使你在之前的步骤中手动创建了它，当部署时你的Swarm也需要知道它。将以下内容添加到你的`docker-compose.yml`中：
- en: '[PRE110]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Deploy your swarm again:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次部署你的Swarm：
- en: '[PRE111]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'In the following output, you should now see an extra line showing `Creating
    config test_swarm_nginx_conf`:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的输出中，你现在应该看到一个额外的行，显示`Creating config test_swarm_nginx_conf`：
- en: '[PRE112]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'There is still more you can do to take advantage of Swarm, and one extra feature
    not used yet is the secrets function. Just as you created a configuration earlier
    in this exercise, you can create a `secret` with a similar command. The command
    shown here first uses `echo` to output the password you want as your secret value,
    and then, using the `secret create` command, it uses this output to create the
    secret named `pg_password`. Run the following command to name your new secret
    `pg_password`:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有更多你可以做来利用Swarm，一个尚未使用的额外功能是秘密功能。就像你在这个练习中之前创建配置一样，你可以使用类似的命令创建一个`secret`。这里显示的命令首先使用`echo`来输出你想要作为秘密值的密码，然后使用`secret
    create`命令，它使用这个输出来创建名为`pg_password`的秘密。运行以下命令来命名你的新秘密`pg_password`：
- en: '[PRE113]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The command will output the ID of the secret created:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将输出创建的秘密的ID：
- en: '[PRE114]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'View the secrets in your swarm using the `secret ls` command. Run this command
    now:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`secret ls`命令查看你的Swarm中的秘密。现在运行这个命令：
- en: '[PRE115]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'You can see that your secret has been created successfully with the name of
    `pg_password`:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到你的秘密已成功创建，名称为`pg_password`：
- en: '[PRE116]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Now, make the relevant changes to your `docker-compose.yml` file. Previously,
    you simply entered the password you wanted for your `postgres` user. As you can
    see in the following code, here, you will point the environment variable to the
    secret you created earlier as `/run/secrets/pg_password`. This means it will search
    through the available secrets in your swarm and assign the secret stored in `pg_password`.
    You also need to refer to the secret in the `db` service to allow it access. Open
    the file with your text editor and make the following changes to the file:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对您的`docker-compose.yml`文件进行相关更改。以前，您只需输入您想要为您的`postgres`用户设置的密码。如下面的代码所示，在这里，您将把环境变量指向您之前创建的秘密，作为`/run/secrets/pg_password`。这意味着它将搜索您的Swarm中可用的秘密，并分配存储在`pg_password`中的秘密。您还需要在`db`服务中引用秘密以允许其访问。使用文本编辑器打开文件，并对文件进行以下更改：
- en: '[PRE117]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'The `web` service uses the same secret to access the PostgreSQL database. Move
    into the `web` service section of the `docker-compose.yml` and change *line 21*
    to resemble the following, as it will now use the secret you have created:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`web`服务使用相同的秘密来访问PostgreSQL数据库。进入`docker-compose.yml`的`web`服务部分，并将*第21行*更改为以下内容，因为它现在将使用您创建的秘密：'
- en: '[PRE118]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Finally, just as you have done with your configuration, define the secret at
    the end of `docker-compose.yml`. Add in the following lines at the end of your
    `compose` file:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，就像您对配置所做的那样，在`docker-compose.yml`的末尾定义秘密。在您的`compose`文件的末尾添加以下行：
- en: '[PRE119]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Before deploying your changes, you have made a lot of changes to the `compose`
    file, so your `docker-compose.yml` file should look similar to what is shown in
    the following code block. You have three services running with the `db`, `web`,
    and `nginx` services set up, and we now have one `config` instance and one `secret`
    instance:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署更改之前，您已经对`compose`文件进行了许多更改，因此您的`docker-compose.yml`文件应该与下面的代码块中显示的内容类似。您有三个服务正在运行，使用`db`、`web`和`nginx`服务设置，现在我们有一个`config`实例和一个`secret`实例：
- en: docker-compose.yml
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: docker-compose.yml
- en: '[PRE120]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'command: gunicorn chapter_nine.wsgi:application --bind  0.0.0.0:8000'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 命令：gunicorn chapter_nine.wsgi:application --bind 0.0.0.0:8000
- en: '[PRE121]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: The complete code for this step can be found at [https://packt.live/3miUJD8](https://packt.live/3miUJD8).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤的完整代码可以在[https://packt.live/3miUJD8](https://packt.live/3miUJD8)找到。
- en: Note
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are a few changes to our service, and if there are any issues in deploying
    the changes to Swarm, it may be worth deleting the services and then re-deploying
    to make sure all the changes take effect correctly.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务有一些更改，如果在将更改部署到Swarm时出现任何问题，删除服务然后重新部署以确保所有更改正确生效可能是值得的。
- en: 'This is the final run of your Swarm deployment for this exercise:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本练习中Swarm部署的最终运行：
- en: '[PRE122]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Run the deployment and make sure the services are running and deployed successfully:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行部署，并确保服务成功运行和部署：
- en: '[PRE123]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: In this exercise, you have practiced using Swarm to deploy a complete set of
    services using your `docker-compose.yml` file and have them running in a matter
    of minutes. This part of the chapter has also demonstrated some extra functionality
    of Swarm using `config` and `secret` instances to help us reduce the amount of
    work needed to move services to different environments. Now that you know how
    to manage Swarm from the command line, you can further explore Swarm cluster management
    in the following section using a web interface with Swarmpit.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经练习使用Swarm来部署一整套服务，使用您的`docker-compose.yml`文件，并让它们在几分钟内运行。本章的这一部分还演示了Swarm的一些额外功能，使用`config`和`secret`实例来帮助我们减少将服务移动到不同环境所需的工作量。现在您知道如何从命令行管理Swarm，您可以在下一节中进一步探索Swarm集群管理，使用Swarmpit的Web界面。
- en: Managing Swarm with Swarmpit
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swarmpit管理Swarm
- en: The command line provides an efficient and useful way for users to control their
    Swarm. This can get a little confusing for some users if your services and nodes
    multiply as need increases. One way to help with managing and monitoring your
    Swarm is by using a web interface such as the one provided by Swarmpit to help
    you administer your different environments.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行为用户提供了一种高效和有用的方式来控制他们的Swarm。如果您的服务和节点随着需求增加而增加，这可能会让一些用户感到困惑。帮助管理和监控您的Swarm的一种方法是使用诸如Swarmpit提供的Web界面，以帮助您管理不同的环境。
- en: As you'll see shortly, Swarmpit provides an easy-to-use web interface that allows
    you to manage most aspects of your Docker Swarm instances, including the stacks,
    secrets, services, volumes networks, and configurations.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您很快将看到的，Swarmpit提供了一个易于使用的Web界面，允许您管理Docker Swarm实例的大多数方面，包括堆栈、秘密、服务、卷网络和配置。
- en: Note
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This chapter will only touch on the use of Swarmpit, but if you would like
    more information on the application, the following site should provide you with
    further details: [https://swarmpit.io](https://swarmpit.io).'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅涉及Swarmpit的使用，但如果您想了解更多关于该应用程序的信息，以下网站应该为您提供更多详细信息：[https://swarmpit.io](https://swarmpit.io)。
- en: Swarmpit is a simple-to-use installation Docker image that, when run on your
    system, creates its swarm of services deployed in your environment to run the
    management and web interface. Once installed, the web interface is accessible
    from `http://0.0.0.0:888`.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: Swarmpit是一个简单易用的安装Docker镜像，当在您的系统上运行时，它会在您的环境中创建其服务群来运行管理和Web界面。安装完成后，Web界面可以从`http://0.0.0.0:888`访问。
- en: 'To run the installer on your system to get Swarm running, execute the following
    `docker run` command. With this, you name the container `swampit-installer` and
    mount the container volume on `/var/run/docker.sock` so it can manage other containers
    on our system, using the `swarmpit/install:1.8` image:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的系统上运行安装程序以启动Swarm，请执行以下`docker run`命令。通过这样做，您可以将容器命名为`swampit-installer`，并挂载容器卷到`/var/run/docker.sock`，以便它可以管理我们系统上的其他容器，使用`swarmpit/install:1.8`镜像：
- en: '[PRE124]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: The installer will set up a swarm with a database, an agent, a web application,
    and the network to link it all together. It will also guide you through setting
    up an administrative user to log on to the interface for the first time. Once
    you log in to the web application, the interface is intuitive and easy to navigate.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序将设置一个带有数据库、代理、Web应用程序和网络的Swarm，并引导您设置一个管理用户，以便首次登录到界面。一旦您登录到Web应用程序，界面就直观且易于导航。
- en: The following exercise will show you how to install and run Swarmpit on your
    running system and start to manage your installed services.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习将向您展示如何在运行系统上安装和运行Swarmpit，并开始管理已安装的服务。
- en: 'Exercise 9.04: Installing Swarmpit and Managing Your Stacks'
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.04：安装Swarmpit并管理您的堆栈
- en: 'In this exercise, you will install and run Swarmpit, briefly explore the web
    interface, and begin managing your services from your web browser:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将安装和运行Swarmpit，简要探索Web界面，并开始从Web浏览器管理您的服务：
- en: 'It''s not completely necessary to do so, but if you have stopped your `test_swarm`
    stack from running, start it up again. This will provide you with some extra services
    to monitor from Swarmpit:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这并不是完全必要的，但如果您已经停止了`test_swarm`堆栈的运行，请再次启动它。这将为您提供一些额外的服务，以便从Swarmpit进行监视：
- en: '[PRE125]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Note
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are worried that there will be too many services running on your system
    at once, feel free to skip this `test_swarm` stack restart. The exercise can be
    performed as follows on the Swarmpit stack that is created as part of the installation
    process.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您担心系统上会同时运行太多服务，请随时跳过此`test_swarm`堆栈的重启。该练习可以在安装过程中创建的Swarmpit堆栈上执行。
- en: 'Run the following `docker run` command:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下`docker run`命令：
- en: '[PRE126]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'It pulls the `install:1.8` image from the `swarmpit` repository and then runs
    through the process of setting up your environment details, allowing the user
    to make changes to the stack name, ports, administrator username, and password.
    It then creates the relevant services needed to run the applications:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 它从`swarmpit`存储库中提取`install:1.8`镜像，然后通过设置环境详细信息的过程，允许用户对堆栈名称、端口、管理员用户名和密码进行更改。然后创建运行应用程序所需的相关服务：
- en: '[PRE127]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'On the command line, run the `stack ls` command to ensure that you have the
    Swarmpit swarm deployed to your node:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行上运行`stack ls`命令，确保您已经将Swarmpit swarm部署到您的节点上：
- en: '[PRE128]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The following output confirms that Swarmpit is deployed to our node:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出确认了Swarmpit已部署到我们的节点上：
- en: '[PRE129]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Use the `service ls` command to verify that the services needed by Swarmpit
    are running:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`service ls`命令验证Swarmpit所需的服务是否正在运行：
- en: '[PRE130]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'For clarity, the output shown here only displays the first four columns. The
    output also shows that the `REPLICAS` value for each service is `1/1`:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，这里显示的输出仅显示了前四列。输出还显示每个服务的`REPLICAS`值为`1/1`：
- en: '[PRE131]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'It''s time to log in to the Swarmpit web interface. Open your web browser and
    use `http://0.0.0.0:888` to open the Swarmpit login page and enter the admin username
    and password you set during the installation process:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候登录到Swarmpit web界面了。打开您的网络浏览器，使用`http://0.0.0.0:888`打开Swarmpit登录页面，并输入您在安装过程中设置的管理员用户名和密码：
- en: '![Figure 9.3: The Swarmpit login screen'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3：Swarmpit登录屏幕'
- en: '](image/B15021_09_03.jpg)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_03.jpg)'
- en: 'Figure 9.3: The Swarmpit login screen'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：Swarmpit登录屏幕
- en: 'Once you log in, you''re presented with the Swarmpit welcome screen, showing
    your dashboard of all your services running on the node, as well as details of
    the resources being used on the node. The left of the screen provides a menu of
    all the different aspects of the Swarm stack you can monitor and manage, including
    the stacks themselves, `Services`, `Tasks`, `Networks`, `Nodes`, `Volumes`, `Secrets`,
    `Configs`, and `Users`. Click on the `Stacks` option in the left-hand menu and
    select the `test_swarm` stack:![Figure 9.4: The Swarmpit welcome dashboard'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您登录，您将看到Swarmpit欢迎屏幕，显示您在节点上运行的所有服务的仪表板，以及节点上正在使用的资源的详细信息。屏幕左侧提供了一个菜单，您可以监视和管理Swarm堆栈的所有不同方面，包括堆栈本身、`Services`、`Tasks`、`Networks`、`Nodes`、`Volumes`、`Secrets`、`Configs`和`Users`。单击左侧菜单中的`Stacks`选项，然后选择`test_swarm`堆栈：![图9.4：Swarmpit欢迎仪表板
- en: '](image/B15021_09_04.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_04.jpg)'
- en: 'Figure 9.4: The Swarmpit welcome dashboard'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：Swarmpit欢迎仪表板
- en: 'You should be presented with a screen similar to the following. The size of
    the screen has been reduced for clarity, but as you can see, it provides all the
    details of the interacting components of the stack—including the services available
    and the secrets and configs being used. If you click on the menu next to the stack
    name, as shown here, you can edit the stack. Click `Edit Stack` now:![Figure 9.5:
    Managing your swarm with Swarmpit'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到类似于以下内容的屏幕。为了清晰起见，屏幕的大小已经缩小，但正如您所看到的，它提供了堆栈的所有交互组件的详细信息，包括可用的服务以及正在使用的秘密和配置。如果您点击堆栈名称旁边的菜单，如图所示，您可以编辑堆栈。现在点击`Edit
    Stack`：![图9.5：使用Swarmpit管理您的swarm
- en: '](image/B15021_09_05.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_05.jpg)'
- en: 'Figure 9.5: Managing your swarm with Swarmpit'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：使用Swarmpit管理您的swarm
- en: 'Editing the stack brings up a page where you can make changes directly to the
    stack as if you were making changes to `docker-compose.yml`. Move down to the
    file, find the replicas entry for the web service, and change it to `3` from `2`:![Figure
    9.6: Editing your swarm with Swarmpit'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑堆栈会弹出一个页面，您可以直接对堆栈进行更改，就像对`docker-compose.yml`进行更改一样。移动到文件底部，找到Web服务的副本条目，并将其从“2”更改为“3”：![图9.6：使用Swarmpit编辑您的Swarm
- en: '](image/B15021_09_06.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_06.jpg)'
- en: 'Figure 9.6: Editing your swarm with Swarmpit'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：使用Swarmpit编辑您的Swarm
- en: 'Click on the `Deploy` button at the bottom of the screen. This will deploy
    the changes to your `test_swarm` stack into the environment and return you to
    the `test_swarm` stack screen, where you should now see `3/3` replicas of the
    web service running:![Figure 9.7: Increased number of web services in Swarmpit'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击屏幕底部的“部署”按钮。这将在环境中部署对“test_swarm”堆栈的更改，并将您返回到“test_swarm”堆栈屏幕，在那里您现在应该看到正在运行的Web服务的“3/3”副本：![图9.7：在Swarmpit中增加Web服务的数量
- en: '](image/B15021_09_07.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_07.jpg)'
- en: 'Figure 9.7: Increased number of web services in Swarmpit'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：在Swarmpit中增加Web服务的数量
- en: 'Notice that most of the options in Swarmpit are linked. On the `test_swarm`
    stack page, if you click on the web service from the `services` panel, you will
    open the `Service` page for the `test_swarm_web` service. If you click the menu,
    you should see the following page:![Figure 9.8: Managing services with Swarmpit'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，Swarmpit中的大多数选项都是相互关联的。在“test_swarm”堆栈页面上，如果您从“服务”面板中单击Web服务，您将打开“test_swarm_web”服务的“服务”页面。如果单击菜单，您应该会看到以下页面：![图9.8：使用Swarmpit管理服务
- en: '](image/B15021_09_08.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_08.jpg)'
- en: 'Figure 9.8: Managing services with Swarmpit'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：使用Swarmpit管理服务
- en: Select `Rollback Service` from the menu, and you will see the number of replicas
    of the `test_swarm_web` service roll back to two replicas.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择“回滚服务”，您将看到“test_swarm_web”服务的副本数量回滚到两个副本。
- en: 'Finally, return to the `Stacks` menu and select the `test_swarm` again. With
    the `test_swarm` stack open, you have the option to delete the stack by clicking
    on the trash can icon toward the top of the screen. Confirm that you would like
    to delete the stack, and this will bring `test_swarm` down again and it will no
    longer be running on your node:![Figure 9.9: Deleting a web service in Swarmpit'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，返回到“堆栈”菜单，再次选择“test_swarm”。打开“test_swarm”堆栈后，您可以通过单击屏幕顶部的垃圾桶图标来删除堆栈。确认您要删除堆栈，这将再次关闭“test_swarm”，它将不再在您的节点上运行：![图9.9：在Swarmpit中删除Web服务
- en: '](image/B15021_09_09.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_09.jpg)'
- en: 'Figure 9.9: Deleting a web service in Swarmpit'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9：在Swarmpit中删除Web服务
- en: Note
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that Swarmpit will allow you to delete the `swarmpit` stack. You will see
    an error, but when you try to reload the page, it will simply not come up again
    as all the services will have been stopped from running.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Swarmpit将允许您删除`swarmpit`堆栈。您会看到一个错误，但当您尝试重新加载页面时，所有服务都将被停止运行，因此页面将不会再次出现。
- en: Although this has been only a quick introduction to Swarmpit, using your prior
    knowledge from this chapter, the interface will allow you to intuitively deploy
    and make changes to your services and stacks. Almost anything that you can do
    from the command line, you can also do from the Swarmpit web interface. This brings
    us to the end of this exercise and the end of the chapter. The activities in the
    next section of this chapter are designed to help expand your knowledge further.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这只是对Swarmpit的简要介绍，但借助本章的先前知识，界面将允许您直观地部署和更改您的服务和堆栈。几乎您可以从命令行执行的任何操作，也可以从Swarmpit
    Web界面执行。这就是本练习的结束，也是本章的结束。本章下一节的活动旨在帮助您进一步扩展您的知识。
- en: 'Activity 9.01: Deploying the Panoramic Trekking App to a Single-Node Docker
    Swarm'
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动9.01：将全景徒步应用程序部署到单节点Docker Swarm
- en: You are required to use Docker Swarm to deploy web and database services in
    the Panoramic Trekking App. You will gather configurations to create a compose
    file for the application and deploy them to a single node Swarm using a `docker-compose.yml`
    file.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用Docker Swarm在全景徒步应用程序中部署Web和数据库服务。您将收集配置以创建一个应用程序的组合文件，并使用`docker-compose.yml`文件将它们部署到单节点Swarm中。
- en: 'The steps you will need to take to complete this activity are as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此活动所需的步骤如下：
- en: Gather all the applications and build the Docker images needed for the services
    of your swarm.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集所有应用程序并构建Swarm服务所需的Docker镜像。
- en: Create a `docker-compose.yml` file that will allow the services to be deployed
    to Docker Swarm.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`docker-compose.yml`文件，以便将服务部署到Docker Swarm。
- en: Create any supporting images needed for the services to use once deployed.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建部署后服务所需的任何支持镜像。
- en: Deploy your services onto Swarm and verify that all services are able to run
    successfully.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的服务部署到Swarm并验证所有服务能够成功运行。
- en: 'Your running services should look similar to the output shown here:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 您的运行服务应该类似于此处显示的输出：
- en: '[PRE132]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Note
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor342).
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor342)找到。
- en: Continue with the next activity as this will work to solidify some of the information
    you have already learned in this chapter.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行下一个活动，因为这将有助于巩固您在本章中已经学到的一些信息。
- en: 'Activity 9.02: Performing an Update to the App While the Swarm Is Running'
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动9.02：在Swarm运行时执行应用程序更新
- en: In this activity, you need to make a minor change to the Panoramic Trekking
    App that will allow you to build a new image and deploy the image to the running
    Swarm. In this activity, you will perform a rolling update to deploy these changes
    to your Swarm cluster.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项活动中，您需要对全景徒步应用程序进行微小更改，以便您可以构建一个新的镜像并将该镜像部署到正在运行的Swarm中。在这项活动中，您将执行滚动更新以将这些更改部署到您的Swarm集群。
- en: 'The steps you''ll need to complete this activity are as follows:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此活动所需的步骤如下：
- en: If you do not have the Swarm from *Activity 9.01, Deploying the Panoramic Trekking
    App to a Single Node Docker Swarm* still running, deploy the swarm again.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有来自*活动9.01：将全景徒步应用程序部署到单节点Docker Swarm*的Swarm仍在运行，请重新部署Swarm。
- en: Make a minor change to the code in the Panoramic Trekking App—something small
    that can be tested to verify that you have made a change in your environment.
    The change you are making is not important, so it can be something as basic as
    a configuration change. The main focus of this activity is on performing the rolling
    update to the service.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对全景徒步应用程序中的代码进行微小更改——一些可以测试的小改动，以验证您已在环境中进行了更改。您正在进行的更改并不重要，因此可以是诸如配置更改之类的基本内容。这项活动的重点是执行滚动更新服务。
- en: Build a new image to be deployed into the running environment.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个新的镜像，部署到正在运行的环境中。
- en: Perform an update to the environment and verify that the changes were successful.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对环境进行更新，并验证更改是否成功。
- en: Note
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor343).
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor343)找到。
- en: Summary
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has done a lot of work in moving our Docker environments from manually
    starting single-image services to a more production-ready and complete environment
    with Docker Swarm. We started this chapter with an in-depth discussion of Docker
    Swarm and how you can manage your services and nodes from the command line, providing
    a list of commands and their use, and later implementing them as part of a new
    environment running a test Django web application.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 本章在将我们的Docker环境从手动启动单个镜像服务转移到更适合生产并且完整的环境中进行了大量工作，使用了Docker Swarm。我们从深入讨论Docker
    Swarm开始，介绍了如何通过命令行管理服务和节点，提供了一系列命令及其用法，并将它们作为运行测试Django Web应用程序的新环境的一部分进行了实施。
- en: We then expanded this application further with an NGINX proxy and utilized Swarm
    functionality to store configuration and secrets data so they no longer need to
    be included as part of our Docker image and can instead be included in the Swarm
    we are deploying. We then showed you how to manage your swarm using your web browser
    with Swarmpit, providing a rundown of the work we previously did on the command
    line and making a lot of these changes from a web browser. Swarm is not the only
    way you can orchestrate your environments when using Docker.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们进一步扩展了这个应用程序，使用了NGINX代理，并利用了Swarm功能来存储配置和秘密数据，这样它们就不再需要作为我们Docker镜像的一部分，而是可以包含在我们部署的Swarm中。然后，我们向您展示了如何使用Web浏览器使用Swarmpit来管理您的Swarm，提供了我们之前在命令行上所做工作的概述，并且在Web浏览器中进行了许多这些更改。当使用Docker时，Swarm并不是编排环境的唯一方式。
- en: In the next chapter, we will introduce Kubernetes, which is another orchestration
    tool used to manage Docker environments and applications. Here, you will see how
    you can use Kubernetes as part of your projects to help reduce the time you are
    managing services and improve the updating of your applications.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Kubernetes，这是另一个用于管理Docker环境和应用程序的编排工具。在这里，您将看到如何将Kubernetes作为项目的一部分，以帮助减少管理服务的时间并改善应用程序的更新。
