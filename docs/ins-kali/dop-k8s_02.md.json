["```\n$ ps axf\n PID TTY      STAT   TIME COMMAND\n    2 ?        S      0:00 [kthreadd]\n    3 ?        S      0:42  \\_ [ksoftirqd/0]\n    5 ?        S<     0:00  \\_ [kworker/0:0H]\n    7 ?        S      8:14  \\_ [rcu_sched]\n    8 ?        S      0:00  \\_ [rcu_bh]\n```", "```\n$ sudo unshare --fork --pid --mount-proc=/proc /bin/sh\n$ ps axf\n PID TTY      STAT   TIME COMMAND\n    1 pts/0    S      0:00 /bin/sh\n    2 pts/0    R+     0:00 ps axf\n```", "```\n$ ps axf // from another terminal\n PID TTY   COMMAND\n  ...\n  25744 pts/0 \\_ unshare --fork --pid --mount-proc=/proc    \n  /bin/sh\n 25745 pts/0    \\_ /bin/sh\n  3305  ?     /sbin/rpcbind -f -w\n  6894  ?     /usr/sbin/ntpd -p /var/run/ntpd.pid -g -u  \n  113:116\n    ...\n```", "```\n$ yes > /dev/null & top\n$ PID USER  PR  NI    VIRT   RES   SHR S  %CPU %MEM    \nTIME+ COMMAND\n 3 root  20   0    6012   656   584 R 100.0  0.0  \n  0:15.15 yes\n 1 root  20   0    4508   708   632 S   0.0  0.0                   \n  0:00.00 sh\n 4 root  20   0   40388  3664  3204 R   0.0  0.1  \n  0:00.00 top\n```", "```\n$ ls /sys/fs/cgroup\nblkio        cpuset   memory            perf_event\ncpu          devices  net_cls           pids\ncpuacct      freezer  net_cls,net_prio  systemd\ncpu,cpuacct  hugetlb  net_prio \n```", "```\n$ ps x | grep yes\n11809 pts/2    R     12:37 yes\n\n$ mkdir /sys/fs/cgroup/cpu/box && \\\n echo 11809 > /sys/fs/cgroup/cpu/box/tasks\n```", "```\n$ echo 50000 > /sys/fs/cgroup/cpu/box/cpu.cfs_quota_us\n$ PID USER  PR  NI    VIRT   RES   SHR S  %CPU %MEM    \n TIME+ COMMAND\n    3 root  20   0    6012   656   584 R  50.2  0.0     \n    0:32.05 yes\n    1 root  20   0    4508  1700  1608 S   0.0  0.0  \n    0:00.00 sh\n    4 root  20   0   40388  3664  3204 R   0.0  0.1  \n    0:00.00 top\n```", "```\n$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common \n```", "```\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88 \n```", "```\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \n```", "```\n $ sudo apt-get update \n $ sudo apt-get install docker-ce\n```", "```\n    $ sudo yum install -y yum-utils  \n```", "```\n$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \n```", "```\n    $ sudo yum makecache fast   \n```", "```\n$ sudo yum install docker-ce\n$ sudo systemctl start docker \n```", "```\n$ docker run alpine ls\nbin dev etc home lib media mnt proc root run sbin srv sys tmp usr var\n```", "```\n$ docker run alpine ps aux\nPID   USER     TIME   COMMAND\n1 root       0:00 ps aux\n```", "```\n$ docker run alpine /bin/sh -c \"while :;do echo  \n  'meow~';sleep 1;done\"\nmeow~\nmeow~\n...\n```", "```\n$ docker ps\nCONTAINER ID    IMAGE    (omitted)     NAMES\nd51972e5fc8c    alpine      ...        zen_kalam\n\n$ docker exec -it d51972e5fc8c /bin/sh\n/ # ps\nPID   USER     TIME   COMMAND\n  1 root       0:00 /bin/sh -c while :;do echo  \n  'meow~';sleep 1;done\n  27 root       0:00 /bin/sh\n  34 root       0:00 sleep 1\n  35 root       0:00 ps\n  / # kill -s 2 1\n  $ // container terminated\n```", "```\n$ docker run --name demo -v /chest alpine touch /chest/coins\n$ docker inspect demo\n...\n\"Mounts\": [\n {\n    \"Type\": \"volume\",\n     \"Name\":(hash-digits),\n     \"Source\":\"/var/lib/docker/volumes/(hash- \n      digits)/_data\",\n      \"Destination\": \"/chest\",\n      \"Driver\": \"local\",\n      \"Mode\": \"\",\n       ...\n$ ls /var/lib/docker/volumes/(hash-digits)/_data\n      coins\n```", "```\n$ docker create --name box -v /share-vol alpine nop\nc53e3e498ab05b19a12d554fad4545310e6de6950240cf7a28f42780f382c649\n$ docker run --name A --volumes-from box alpine touch /share-vol/wine\n$ docker run --name B --volumes-from box alpine ls /share-vol\nwine\n```", "```\n$ docker run --name hi -v $(pwd)/host/dir:/data alpine touch /data/hi\n$ docker rm hi\n$ ls $(pwd)/host/dir\nhi\n```", "```\n$ docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nff3d52d8f55f: Pull complete\n...\nStatus: Downloaded newer image for nginx:latest\n\n$ docker tag nginx localhost:5000/comps/prod/nginx:1.14\n$ docker push localhost:5000/comps/prod/nginx:1.14\nThe push refers to a repository [localhost:5000/comps/prod/nginx]\n...\n8781ec54ba04: Pushed\n1.14: digest: sha256:(64-digits-hash) size: 948\n$ docker tag nginx localhost:5000/comps/prod/nginx\n$ docker push localhost:5000/comps/prod/nginx\nThe push refers to a repository [localhost:5000/comps/prod/nginx]\n...\n8781ec54ba04: Layer already exists\nlatest: digest: sha256:(64-digits-hash) size: 948\n```", "```\n$ docker pull localhost:5000/comps/prod/nginx\nPulling repository localhost:5000/comps/prod/nginx\nError: image comps/prod/nginx:latest not found\n$ docker login -u letme -p in localhost:5000\nLogin Succeeded\n$ docker pull localhost:5000/comps/prod/nginx\nPulling repository localhost:5000/comps/prod/nginx\n...\nlatest: digest: sha256:(64-digits-hash) size: 948\n```", "```\n$ docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\n1224183f2080        bridge              bridge              local\n801dec6d5e30        host                host                local\nf938cd2d644d        none                null                local\n```", "```\n$ docker run --name greeter -d --expose 5000 alpine \\\n/bin/sh -c \"echo Welcome stranger! | nc -lp 5000\"\n2069cbdf37210461bc42c2c40d96e56bd99e075c7fb92326af1ec47e64d6b344 $ docker exec greeter ifconfig\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02\ninet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n...\n```", "```\n$ docker run alpine telnet 172.17.0.2 5000\nWelcome stranger!\nConnection closed by foreign host\n```", "```\n$ docker network create room\nb0cdd64d375b203b24b5142da41701ad9ab168b53ad6559e6705d6f82564baea\n$ docker run -d --network room \\\n--network-alias dad --name sleeper alpine sleep 60\nb5290bcca85b830935a1d0252ca1bf05d03438ddd226751eea922c72aba66417\n$ docker run --network room alpine ping -c 1 sleeper\nPING sleeper (172.18.0.2): 56 data bytes\n...\n$ docker run --network room alpine ping -c 1 dad\nPING dad (172.18.0.2): 56 data bytes\n...\n```", "```\n$ docker run -d --expose 5000 --network host alpine \\\n/bin/sh -c \"echo im a container | nc -lp 5000\"\nca73774caba1401b91b4b1ca04d7d5363b6c281a05a32828e293b84795d85b54\n$ telnet localhost 5000\nim a container\nConnection closed by foreign host\n```", "```\n$ docker run -p 80:5000 alpine /bin/sh -c \\\n\"while :; do echo -e 'HTTP/1.1 200 OK\\n\\ngood day'|nc -lp 5000; done\"\n\n$ curl localhost\ngood day\n```", "```\ndocker commit $(   \\\ndocker start $(  \\\ndocker create alpine /bin/sh -c    \\\n\"echo My custom build > /etc/motd\" \\\n ))\n```", "```\n./Dockerfile:\n---\nFROM alpine\nRUN echo \"My custom build\" > /etc/motd\n---\n```", "```\n./.dockerignore:\n---\n# ignore .dockerignore, .git\n.dockerignore \n.git\n# exclude all *.tmp files and vim swp file recursively\n**/*.tmp\n**/[._]*.s[a-w][a-z]\n...\n---\n```", "```\n$ docker build -f deploy/builder.dck  \\\n-t my-reg.com/prod/teabreak:$(date +\"%g%m%d\") \\\n-t my-reg.com/prod/teabreak:latest .\n```", "```\nRUN <commands>\nRUN [\"executable\", \"params\", \"more params\"]\n```", "```\nCMD [\"executable\", \"params\", \"more params\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2 ...:\n```", "```\nENTRYPOINT [\"executable\", \"param1\", \"param2\"] ENTRYPOINT command param1 param2\n```", "```\n     /bin/sh -c entry_cmd entry_params ...     \n```", "```\n      entry_cmd entry_params run_arguments\n```", "```\n  entry_cmd entry_parms CMD_exec CMD_parms\n  entry_cmd entry_parms CMD_parms\n  entry_cmd entry_parms /bin/sh -c CMD_cmd \n  CMD_parms   \n```", "```\nENV key value\nENV key1=value1 key2=value2 ... \n```", "```\n    FROM alpine\n    ENV key wD # aw\n    ENV k2=v2 k3=v\\ 3 \\\n        k4=\"v 4\"\n    ENV k_${k2}=$k3 k5=\\\"K\\=da\\\"\n\n    RUN echo key=$key ;\\\n       echo k2=$k2 k3=$k3 k4=$k4 ;\\\n       echo k_\\${k2}=k_${k2}=$k3 k5=$k5\n\n```", "```\n    ...\n    ---> Running in 738709ef01ad\n    key=wD # aw\n    k2=v2 k3=v 3 k4=v 4\n    k_${k2}=k_v2=v 3 k5=\"K=da\"\n    ...\n```", "```\nLABEL maintainer=johndoe@example.com\n```", "```\n    WORKDIR /usr\n    WORKDIR src\n    WORKDIR app\n    RUN pwd\n    ---> Running in 73aff3ae46ac\n    /usr/src/app\n    ---> 4a415e366388\n\n```", "```\nCOPY <src-in-context> ... <dest-in-container> COPY [\"<src-in-context>\",... \"<dest-in-container>\"]\n```", "```\nADD <src > ... <dest >\nADD [\"<src>\",... \"<dest >\"]\n```", "```\nVOLUME mount_point_1 mount_point_2 VOLUME [\"mount point 1\", \"mount point 2\"]\n```", "```\n    --- baseimg ---\n    FROM alpine\n    RUN apk add --no-update git make\n    WORKDIR /usr/src/app\n    ONBUILD COPY . /usr/src/app/\n    ONBUILD RUN git submodule init && \\\n              git submodule update && \\\n              make\n    --- appimg ---\n    FROM baseimg\n    EXPOSE 80\n    CMD [\"/usr/src/app/entry\"]\n```", "```\n    $ docker build -t baseimg -f baseimg .\n    ---\n    FROM alpine\n    RUN apk add --no-update git make\n    WORKDIR /usr/src/app\n    ---\n    $ docker build -t appimg -f appimg .\n    ---\n    COPY . /usr/src/app/\n    RUN git submodule init   && \\\n        git submodule update && \\\n        make\n    EXPOSE 80\n    CMD [\"/usr/src/app/entry\"] \n```", "```\n---\nFROM ubuntu\nADD . /app\nRUN apt-get update \nRUN apt-get upgrade -y\nRUN apt-get install -y redis-server python python-pip mysql-server\nADD db/my.cnf /etc/mysql/my.cnf\nADD db/redis.conf /etc/redis/redis.conf\nRUN pip install -r /app/requirements.txt\nRUN cd /app ; python setup.py\nCMD /app/start-all-service.sh\n```", "```\nFROM ubuntu\nCOPY . /app\nRUN apt-get update \nRUN apt-get upgrade -y\nRUN apt-get install -y python python-pip\nRUN pip install -r /app/requirements.txt\nRUN cd /app ; python setup.py\nCMD python app.py\n```", "```\nFROM ubuntu:16.04\nRUN apt-get update && apt-get upgrade -y  \\\n&& apt-get install -y python python-pip\nENTRYPOINT [\"python\"]\nCMD [\"entry.py\"]\nEXPOSE 5000\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . /app \n```", "```\n\n$ docker network create kiosk\n$ docker run -d -p 5000:5000 \\\n    -e REDIS_HOST=lcredis --network=kiosk kiosk-example \n$ docker run -d --network-alias lcredis --network=kiosk redis\n$ docker run -d -e REDIS_HOST=lcredis -e MYSQL_HOST=lmysql \\\n-e MYSQL_ROOT_PASSWORD=$MYPS -e MYSQL_USER=root \\\n--network=kiosk recorder-example\n$ docker run -d --network-alias lmysql -e MYSQL_ROOT_PASSWORD=$MYPS \\ \n --network=kiosk mysql:5.7 \n```", "```\nversion: '3'\nservices:\n hello-world:\n image: hello-world\n```", "```\n$ docker-compose up\nCreating network \"cwd_default\" with the default driver\nCreating cwd_hello-world_1\nAttaching to cwd_hello-world_1\nhello-world_1  |\nhello-world_1  | Hello from Docker!\nhello-world_1  | This message shows that your installation appears to be working correctly.\n...\ncwd_hello-world_1 exited with code 0\n\n```", "```\nversion: '3'\nservices:\n kiosk-example:\n recorder-example:\n lcredis:\n lmysql:\n```", "```\nkiosk-example:\n image: kiosk-example\n build: ./kiosk\n ports:\n  - \"5000:5000\"\n  environment:\n    REDIS_HOST: lcredis\n```", "```\nversion: '3'\nservices:\n  kiosk-example:\n    image: kiosk-example\n    build: ./kiosk\n    ports:\n    - \"5000:5000\"\n    environment:\n      REDIS_HOST: lcredis\n  recorder-example:\n    image: recorder-example\n    build: ./recorder\n    environment:\n      REDIS_HOST: lcredis\n      MYSQL_HOST: lmysql\n      MYSQL_USER: root\n      MYSQL_ROOT_PASSWORD: mysqlpass\n  lcredis:\n    image: redis\n    ports:\n    - \"6379\"\n```", "```\n lmysql:\n image: mysql:5.7\n   environment:\n     MYSQL_ROOT_PASSWORD: mysqlpass\n   volumes:\n   - mysql-vol:/var/lib/mysql\n   ports:\n   - \"3306\"\n  ---\nvolumes:\n  mysql-vol:\n```", "```\ndocker-compose.yml\n---\nversion: '3'\nservices:\n kiosk-example:\n    image: kiosk-example\n    build: ./kiosk\n    ports:\n    - \"5000:5000\"\n    environment:\n      REDIS_HOST: lcredis\n recorder-example:\n    image: recorder-example\n    build: ./recorder\n    environment:\n      REDIS_HOST: lcredis\n      MYSQL_HOST: lmysql\n      MYSQL_USER: root\n      MYSQL_ROOT_PASSWORD: mysqlpass\n lcredis:\n image: redis\n    ports:\n    - \"6379\"\n lmysql:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: mysqlpass\n    volumes:\n    - mysql-vol:/var/lib/mysql\n    ports:\n    - \"3306\"\nvolumes:\n mysql-vol: \n```", "```\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 kiosk\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 recorder\n \u251c\u2500\u2500 Dockerfile\n \u251c\u2500\u2500 process.py\n \u2514\u2500\u2500 requirements.txt  \n```"]