- en: Serializing and Deserializing Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化和反序列化对象
- en: In this chapter, you will learn another way of saving objects to a hard drive—using
    serialization. You will also learn the process of rebuilding an object from the
    hard drive, which is called deserialization.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习另一种将对象保存到硬盘的方法—使用序列化。您还将学习从硬盘重建对象的过程，这称为反序列化。
- en: Adding two buttons to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将两个按钮添加到HTML中
- en: 'Crank up a project, and in this one, you will insert two buttons into the <html>
    page. You''ll place the first button below the line beginning with `<form id=...`.
    To do this, go to Toolbox, grab a `Button` control, and drag it in there. Change
    the text on the first button to say `Save`. Now grab another button, and drag
    and drop it below that line. Change the text on the second button to say `Open`.
    So you place two buttons in the page, as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个项目，在这个项目中，您将在<html>页面中插入两个按钮。您将在以`<form id=...`开头的行下方放置第一个按钮。要做到这一点，转到工具箱，获取一个`Button`控件，并将其拖放到那里。将第一个按钮上的文本更改为`Save`。现在获取另一个按钮，并将其拖放到该行下方。将第二个按钮上的文本更改为`Open`。因此，您在页面中放置了两个按钮，如下所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Delete the two `<div>` lines—you won''t need them. Of course, at the end you
    also have a label:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 删除两个`<div>`行—您不需要它们。当然，在最后您还有一个标签：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the Design view, as shown in *Figure 24.3.1*, you have two buttons—Save
    and Open—and then a label where the opened object can be displayed:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计视图中，如*图24.3.1*所示，您有两个按钮—Save和Open—然后是一个标签，打开的对象可以在其中显示：
- en: '![](img/158ec832-f711-4990-a112-346c9eb40087.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/158ec832-f711-4990-a112-346c9eb40087.png)'
- en: 'Figure 24.3.1: Our simple interface in the Design view'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.1：我们在设计视图中的简单界面
- en: Beginning to code the project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始编写项目
- en: 'First, we will create the `Save` button, so double-click on it, which brings
    up the event handler for `Button1_click`. Delete the `Page_Load` block. The relevant
    portion of the starting code for this project should look like *Figure 24.3.2*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建`Save`按钮，双击它，这将显示`Button1_click`的事件处理程序。删除`Page_Load`块。该项目的起始代码的相关部分应如*图24.3.2*所示：
- en: '![](img/98553561-10b2-4839-9c47-3c16324e7b3d.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98553561-10b2-4839-9c47-3c16324e7b3d.png)'
- en: 'Figure 24.3.2: The starting code for this project'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.2：该项目的起始代码
- en: Adding namespaces
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命名空间
- en: 'Next, you need to add new namespaces, so near the top of the file under `using
    System`, enter the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要添加新的命名空间，因此在文件顶部的`using System`下面，输入以下内容：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Clearly, this line is used for input and output. Next, enter the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这一行用于输入和输出。接下来，输入以下内容：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This line allows you to do the write of the code. You''ll understand the purpose
    of these namespaces better as we write the code together. Next, let''s do one
    more, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行允许您编写代码。当我们一起编写代码时，您将更好地理解这些命名空间的目的。接下来，让我们再做一个，如下所示：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This line is needed just so that you can open Notepad. You will use Notepad
    to view the file after it's saved in binary format. Now you can collapse these
    namespaces if you like.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行只是为了让您能够打开记事本。保存为二进制格式后，您将使用记事本查看文件。现在您可以折叠这些命名空间，如果您愿意的话。
- en: Creating a serializable class
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可序列化类
- en: 'So first you need something that you can serialize—a serializable class. You
    will place that below that previous `using` statement. Enter the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先您需要可以序列化的东西—一个可序列化的类。您将在前面的`using`语句下方放置它。输入以下内容：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can decorate a class this way. Next, the thing to be serialized is entered
    below this, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以这种方式装饰一个类。接下来，要序列化的内容如下输入：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding features to the serializable class
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为可序列化类添加功能
- en: 'This is your serializable class. Next, you will add features to it. So, between
    a set of curly braces beneath this line, enter the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的可序列化类。接下来，你将为其添加功能。因此，在此行下面的一对大括号之间，输入以下内容：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we will override a method so that we can display a person and actually
    format it. So, enter the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将重写一个方法，以便我们可以显示一个人并实际格式化它。因此，输入以下内容：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, if you hover your mouse over `ToString`, you'll see that it's an object
    class. Remember, an object class is the parent class of the entire hierarchy.
    This is where `ToString` is defined. The tooltip says string object.ToString().
    We'll now overwrite it and write our own definition.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您将鼠标悬停在`ToString`上，您将看到它是一个对象类。请记住，对象类是整个层次结构的父类。这是`ToString`被定义的地方。工具提示显示为string
    object.ToString()。现在我们将覆盖它并编写我们自己的定义。
- en: 'Next, enter the following between a set of curly braces beneath the `override`
    line:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`override`行下面的一对大括号中，输入以下内容：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will be our particular implementation of `ToString`; that is, `Name` makes
    some amount of money per year—whatever the name and salary happen to be for each
    instance of the `Person` class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们对`ToString`的特定实现；也就是说，`Name`每年赚取一定金额的钱—无论每个`Person`类的实例的名称和薪水是什么。
- en: Defining the path for saving a file
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义保存文件的路径
- en: 'Next, within a set of curly braces beneath the line that begins with `protected
    void Button1_Click...`, enter the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在以`protected void Button1_Click...`开头的行下面的一对大括号中，输入以下内容：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, you're defining the path where the file will be saved. Note that this
    time we are using a different extension—`.bin` for binary, rather than `.txt`
    for text.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您正在定义文件将被保存的路径。请注意，这次我们使用了不同的扩展名—`.bin`代表二进制，而不是`.txt`代表文本。
- en: Making a Person object
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Person对象
- en: 'Next, to make a new `Person` object, enter the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下内容以创建一个新的`Person`对象：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Remember, another way of creating objects is that you can set the values of
    the properties within curly braces. So here we have `John Smith` and his `Salary`
    property value. Thus, we've made a `new Person` object.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，创建对象的另一种方法是您可以在大括号内设置属性的值。因此，我们有`John Smith`和他的`Salary`属性值。因此，我们创建了一个`new
    Person`对象。
- en: Handling unmanaged resources
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理非托管资源
- en: 'Now, enter the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入以下内容：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Hover your mouse over `FileStream` in the preceding line to see where it's located;
    it's inside `System.IO`. Notice that `using System.IO;` is no longer greyed out
    because `FileStream` is now there.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标悬停在前一行的`FileStream`上，以查看其位置；它在`System.IO`内。请注意，`using System.IO;`不再是灰色的，因为`FileStream`现在在那里。
- en: 'Next, right-click on `FileStream` and select Go To Definition. You can see
    that it is derived from `Stream`. Now, if you scroll down to the bottom where
    it says `Dispose` and expand that, you''ll see that it says Releases the unmanaged
    resources used by the System.IO.FileStream..., as shown in *Figure 24.3.3*:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，右键单击`FileStream`，然后选择“转到定义”。您会看到它是从`Stream`派生的。现在，如果您向下滚动到底部，看到`Dispose`并展开它，您会看到它说释放System.IO.FileStream使用的未托管资源...，如*图24.3.3*所示：
- en: '![](img/6e558476-79a3-474e-a266-c7ecf84d8485.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e558476-79a3-474e-a266-c7ecf84d8485.png)'
- en: 'Figure 24.3.3: Expanded definition of FileStream'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.3：FileStream的扩展定义
- en: This is why we put it inside a `using` statement, because it deals with unmanaged
    resources, such as low-level disk access. So, we will create a file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们将其放在`using`语句中的原因，因为它涉及到未托管资源，比如低级磁盘访问。所以，我们将创建一个文件。
- en: Making a binary formatter
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个二进制格式化程序
- en: 'Next, you''ll make a binary formatter, so enter the following between a set
    of curly braces:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将创建一个二进制格式化程序，所以在以下行之间输入以下内容：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Again, `BinaryFormatter` here is a class, so if you hover your mouse over it,
    the tooltip says Serializes and deserializes an object, or an entire graph of
    connected objects in binary format.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`BinaryFormatter`在这里是一个类，所以如果您将鼠标悬停在它上面，工具提示会说以二进制格式序列化和反序列化对象，或连接对象的整个图形。
- en: Serializing an object
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化对象
- en: 'Next, to serialize our object, you say `binFormatter.Serialize`, which is a
    function defined there, and then you need a stream and an object (`per`) to be
    serialized through the stream:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要序列化我们的对象，您说`binFormatter.Serialize`，这是一个在那里定义的函数，然后您需要一个流和一个要通过流序列化的对象（`per`）：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To confirm that this works, enter the following below the closing curly brace:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认这个工作，输入以下内容在闭合大括号下面：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will just launch the file for us to confirm that it's been saved.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只是启动文件，以确认它已经被保存。
- en: Testing the program
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试程序
- en: Before we write the rest of the code, we can give this one a test. So let's
    launch this in a browser and click on Save*:*
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写其余代码之前，我们可以进行一次测试。所以让我们在浏览器中启动它，然后点击保存*:*。
- en: '![](img/9f0a1fb0-8eed-4e22-ba68-3a1215442cf8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f0a1fb0-8eed-4e22-ba68-3a1215442cf8.png)'
- en: 'Figure 24.3.4: A test run of the program to make sure that it works'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.4：程序的测试运行，以确保它正常工作
- en: 'You can see now that when you examine it, the stuff that was saved looks very
    different from just plain text. Remember that when you were learning about properties,
    we talked about *backing fields*. The actual value of the fields is shown in *Figure
    24.3.5*. You can see the salary, the name values, and then the fields. This is
    what we mean by *binary*. It looks quite different from just plain text:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以看到，当您检查它时，保存的内容看起来与普通文本非常不同。请记住，当您学习属性时，我们谈到了*后备字段*。字段的实际值显示在*图24.3.5*中。您可以看到工资、姓名值，然后是字段。这就是我们所说的*二进制*。它看起来与普通文本非常不同：
- en: '![](img/39d60141-5f30-4c9d-9d4f-d29ca4665ca0.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39d60141-5f30-4c9d-9d4f-d29ca4665ca0.png)'
- en: 'Figure 24.3.5: The Backing Field shows the actual values of the field'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.5：后备字段显示字段的实际值
- en: Rebuilding an object from a hard drive
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从硬盘重建对象
- en: In the next stage, we want to be able to rebuild this object from the hard drive.
    For this, double-click on the Open button in the Design view. This takes you back
    into the `Default.aspx.cs` file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，我们希望能够从硬盘重新构建这个对象。为此，在设计视图中双击“打开”按钮。这将带您回到`Default.aspx.cs`文件。
- en: 'Now, within a set of curly braces below the line that begins with `protected
    void Button2_Click...`, you''ll make a new `Person` object, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在以`protected void Button2_Click...`开头的行下面的一组大括号内，创建一个新的`Person`对象，如下所示：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We construct this from the hard drive. Next, enter the following below this
    line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从硬盘构建这个。在这行下面输入以下内容：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With this line, we'll be reading back from that file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这行，我们将从该文件中读取回来。
- en: 'Next, you have to confirm that the file actually exists, so enter the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您必须确认文件实际存在，所以输入以下内容：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the file exists, you will take some actions, and those actions will be the
    ones that rebuild the objects.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件存在，您将采取一些操作，这些操作将重建对象。
- en: 'Now enter the following between a set of curly braces below this line:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在以下行下面的一组大括号之间输入以下内容：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we open the file for reading. Hover your mouse over `OpenRead`. Notice
    that it returns a `FileStream` class, so the right-hand and left-hand sides of
    the expression agree.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们打开文件进行读取。将鼠标悬停在`OpenRead`上。注意它返回一个`FileStream`类，因此表达式的右侧和左侧是一致的。
- en: 'Next, between another set of curly braces below this line, enter the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在这行下面的另一组大括号之间，输入以下内容：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we will rebuild the `Person` object, so enter the following next:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将重建`Person`对象，所以接下来输入以下内容：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will be a cast to the `Person` type. Then, you're passing in `personStream`
    into the `Deserialize` function, defined on the binary reader, and then you cast
    that back up to a `Person` object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是对`Person`类型的转换。然后，将`personStream`传递到二进制读取器上定义的`Deserialize`函数中，然后将其转换回`Person`对象。
- en: Displaying the results
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示结果
- en: 'Now, with that in place we can display things. For example, enter the following
    next:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有了这个，我们可以显示东西。例如，接下来输入以下内容：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Remember that `ToString` in this line is the one that's defined inside `Person`.
    It's the one that overrides the basic `ToString` method defined inside the object.
    If you hover your mouse over `ToString` here, it says string Person.ToString().
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，此行中的`ToString`是在`Person`内部定义的。它是覆盖对象内部定义的基本`ToString`方法的方法。如果您将鼠标悬停在此处的`ToString`上，它会显示字符串`Person.ToString()`。
- en: Running the program
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now let''s open this in your browser with this new code in place. Click on
    the Save button, and it opens Notepad, as shown in *Figure 24.3.6*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在浏览器中打开这个新代码。单击“保存”按钮，它会打开记事本，如*图24.3.6*所示：
- en: '![](img/2d7833d7-ce76-4c76-abdd-b9df6f9892b3.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d7833d7-ce76-4c76-abdd-b9df6f9892b3.png)'
- en: 'Figure 24.3.6: The results of running the program when the Save button is clicked'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.6：单击“保存”按钮时运行程序的结果
- en: 'Now click on the Open button, and it looks like the screen shown in *Figure
    24.3.7*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单击“打开”按钮，它看起来像*图24.3.7*中显示的屏幕：
- en: '![](img/c9bc2839-63b6-4824-a6e6-e171a5eadb17.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9bc2839-63b6-4824-a6e6-e171a5eadb17.png)'
- en: 'Figure 24.3.7: The results of running the program when the Open button is clicked'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.7：单击“打开”按钮时运行程序的结果
- en: So, this proves that the object has been constructed, and it also confirms that
    on this reconstructed object, `personRebuilt`, you can call the usual functions,
    methods, and so on, that were spelled out in the definition of the class in the
    `return $"{Name} makes {Salary:C} per year.";` line.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这证明了对象已被构建，并且还证实了在这个重建的对象`personRebuilt`上，您可以调用在类的定义中详细说明的通常函数、方法等，即`return
    $"{Name} makes {Salary:C} per year.";`行。
- en: Chapter review
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: To review, remember that the big idea here is that you can start with an object
    and add quite a few namespaces, specifically `BinaryFormatter` and `IO`. Next,
    you define a class, and add the serializable attribute below. Then you write code
    to save in a binary format and also code to reconstruct from the binary format
    to the one that you can use in your app.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，要记住的重点是，您可以从一个对象开始，并添加相当多的命名空间，特别是`BinaryFormatter`和`IO`。接下来，您定义一个类，并在下面添加可序列化属性。然后，您编写代码以二进制格式保存，还编写了代码以从二进制格式重建为您的应用程序中可以使用的格式。
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Default.aspx.cs`文件的完整版本，包括注释，如下所示：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned another way of saving objects to the hard drive—using
    serialization. Then, you learned the process of rebuilding an object from the
    hard drive—deserialization. You created a `serializable` class, added features
    to the class, defined the path for saving a file, made a `Person` object, wrote
    code to handle unmanaged resources, made a binary formatter, serialized an object,
    and tested your program.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了另一种将对象保存到硬盘的方法——使用序列化。然后，您学习了从硬盘重建对象的过程——反序列化。您创建了一个`serializable`类，为该类添加了特性，定义了保存文件的路径，创建了一个`Person`对象，编写了处理非托管资源的代码，创建了一个二进制格式化程序，对对象进行了序列化，并测试了您的程序。
- en: In the next chapter, you will take a look at working with images at the pixel
    level. We will invert the colors and change that around.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何在像素级别处理图像。我们将反转颜色并进行更改。
