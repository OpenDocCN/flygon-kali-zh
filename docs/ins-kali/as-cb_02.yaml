- en: Chapter 2. Applications with a Cloud-based Backend
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。具有基于云的后端的应用程序
- en: This chapter will teach you how to build an app that does not need a backend
    of its own but uses a cloud-based solution instead.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教您如何构建一个不需要自己的后端但使用基于云的解决方案的应用程序。
- en: 'In this chapter, you will learn the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下食谱：
- en: Setting up Parse
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Parse
- en: Consuming data from the cloud
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从云端获取数据
- en: Submitting data to the cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据提交到云端
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Many applications require a backend solution, allowing users to communicate
    with a server or with each other like in social apps, for example, and which application
    is not social today? You can also think of a business app, for example, one for
    logistic purposes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序需要后端解决方案，允许用户与服务器或彼此通信，例如在社交应用程序中，哪个应用程序今天不是社交应用程序呢？您还可以考虑业务应用程序，例如用于物流目的的应用程序。
- en: Sure, we can write our own API, host it somewhere, and write some Android code
    to communicate with it, including querying, caching, and all other functionalities
    that our application needs to support. Unfortunately, developing all this could
    be a very time-consuming process, and since this is often the most valuable asset,
    there must be another way to do this.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以编写自己的API，在某个地方托管它，并编写一些Android代码与之通信，包括查询、缓存和应用程序需要支持的所有其他功能。不幸的是，开发所有这些可能是一个非常耗时的过程，而且由于这通常是最有价值的资产，必须有另一种方法来做到这一点。
- en: The good news is that you do not have to do all these things yourself. There
    are a couple of ready-made mobile backend solutions available on the Internet,
    such as QuickBlox, Firebase, Google App Engine, and Parse to mention just a few
    of the most well-known ones.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，您不必自己做所有这些事情。互联网上有几种现成的移动后端解决方案，例如QuickBlox、Firebase、Google应用引擎和Parse等，只是其中最知名的几种。
- en: Each of these solutions do particular things well; although, one solution will
    be more suitable than another. For example, take QuickBlox, which provides the
    quickest way to set things up, but at a price. It also is not as flexible as the
    other options. Firebase, recently acquired by Google, is a very great solution
    in particular if you need real-time support; for example, for a chat app. Parse,
    acquired by Facebook, has no real-time options but is more flexible and has some
    interesting third-party integrations to offer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些解决方案各自擅长特定事情；尽管如此，一个解决方案可能比另一个更合适。例如，以QuickBlox为例，它提供了设置事物的最快方式，但需要付出代价。它也不像其他选项那样灵活。Firebase，最近被Google收购，是一个非常好的解决方案，特别是如果您需要实时支持；例如，用于聊天应用程序。Parse，被Facebook收购，没有实时选项，但更灵活，并且有一些有趣的第三方集成可供选择。
- en: There are, of course, other considerations when choosing a particular solution.
    The parties (Facebook and Google) that provide this kind of solutions might have
    access to the data that you store in the cloud, including your user base, which
    is not necessarily a bad thing right away, but it may have an impact on the strategy
    that you choose. Also, think about issues such as scalability and data lock-in
    that are both luxury problems, but nevertheless could become issues when your
    app becomes more popular.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择特定解决方案时，当然还有其他考虑因素。提供这种解决方案的各方（Facebook和Google）可能可以访问您存储在云中的数据，包括您的用户群，这不一定是坏事，但可能会对您选择的策略产生影响。还要考虑诸如可扩展性和数据锁定等问题，这两者都是奢侈问题，但当您的应用程序变得更受欢迎时，仍然可能成为问题。
- en: Parse is my favourite as it currently is the most flexible solution for most
    purposes. It has no data lock-in (all data is exportable), but it is scalable
    (if you choose a paid plan instead of the free one), it is available for all relevant
    mobile platforms, and it even allows us to create cloud modules (methods that
    run in the cloud that could be scheduled on a regular base and/or that could be
    approached by your application). From all the available popular services, this
    one provides the easiest way to attach a backend to a mobile app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Parse是我最喜欢的，因为它目前是大多数用途最灵活的解决方案。它没有数据锁定（所有数据都可以导出），但它是可扩展的（如果您选择付费计划而不是免费计划），它适用于所有相关的移动平台，甚至允许我们创建云模块（在云中运行的方法，可以定期安排，并且/或者可以被应用程序访问）。在所有可用的热门服务中，这个服务提供了将后端附加到移动应用程序的最简单方法。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In future this might change, in particular for Android developers, if the Google
    App Engine (which by the way can be used for iOS apps as well) integration with
    Android Studio is further improved. You can find the **Deploy Module to App Engine**
    option in the **Build** menu already.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将来可能会发生变化，特别是对于Android开发人员，如果Google应用引擎（顺便说一句，也可以用于iOS应用程序）与Android Studio的集成得到进一步改进。您已经可以在**构建**菜单中找到**部署模块到应用引擎**选项。
- en: Setting up Parse
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Parse
- en: 'Think of a scenario that goes like this: at a central point, orders are being
    collected and will be prepared for transport. Goods need to be delivered and customers
    need to sign in the app once they receive the goods that they have ordered. Each
    driver has a mobile device and an app to support this process digitally.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个这样的场景：在一个中心点，订单正在被收集并将被准备运输。商品需要被送达，客户收到他们订购的商品后需要在应用程序中签名。每个司机都有一个移动设备和一个应用程序来在数字化过程中支持这个过程。
- en: This is the process for which we will provide the next three recipes and we
    will be using Parse for it, as it is the most suitable backend for the solution
    that we are going to create.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将提供接下来的三个食谱的过程，我们将使用Parse进行，因为它是我们将要创建的解决方案最合适的后端。
- en: The upcoming recipe describes how to set up Parse, how to consume data from
    Parse into your Android app, and how to send data, such as a signature, from the
    app to Parse.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即将介绍的食谱描述了如何设置Parse，如何从Parse中获取数据到您的Android应用程序，以及如何发送数据，例如应用程序中的签名，到Parse。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To go through this recipe, you will need Android Studio up and running and Internet
    access. That's all folks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，您需要运行Android Studio并具有互联网访问权限。就是这样。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create an app that connects to a Parse backend first so that we have
    a fundament on which we can build our app. Let''s name our app `CloudOrder`. The
    further steps are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个连接到Parse后端的应用程序，这样我们就有了一个可以构建应用程序的基础。让我们将应用程序命名为`CloudOrder`。接下来的步骤如下：
- en: Start Android Studio and start a new Android Studio Project. Name your application
    `CloudOrder` and enter `packtpub.com` for the **Company Domain** field or any
    other name that suits you or your company best. Then, click on the Next button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Android Studio并开始一个新的Android Studio项目。将应用程序命名为`CloudOrder`，并为**公司域**字段输入`packtpub.com`或适合您或您公司的任何其他名称。然后，单击**下一步**按钮。
- en: Select the **Phone and Tablet** option and optionally change the **minimum SDK**
    field. In my case, this will be API 14 (Android 4.x), which at the time of writing
    is the best choice to both reach an audience as large as possible and to benefit
    from the SDK functionality that we need. Make sure you will be targeting at least
    API level 9 as Parse does not support lower levels than this one. Click on the
    **Next** button to continue.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手机和平板电脑**选项，可选择更改**最低SDK**字段。在我的情况下，这将是API 14（Android 4.x），这在撰写时是尽可能覆盖尽可能多的受众并从我们需要的SDK功能中受益的最佳选择。确保至少将目标定位到API级别9，因为Parse不支持低于此级别的级别。单击**下一步**按钮继续。
- en: Next, select **Blank activity** and click on the **Next** button. On the next
    page, just click on the **Finish** button. Your new project will be set up by
    Android Studio.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**空白活动**，然后单击**下一步**按钮。在下一页上，只需单击**完成**按钮。Android Studio将为您设置新项目。
- en: Now, let's go to [www.parse.com](http://www.parse.com) to create a new account
    and an app. Sign up with [www.Parse.com](http://www.Parse.com). Enter your name,
    e-mail address, and chosen password, and then click on the **Sign up** button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们转到[www.parse.com](http://www.parse.com)创建一个新帐户和一个应用程序。使用[www.Parse.com](http://www.Parse.com)注册。输入您的姓名、电子邮件地址和选择的密码，然后单击**注册**按钮。
- en: The next page on [www.Parse.com](http://www.Parse.com) is the **Get Started**
    page. Enter `CloudOrder` or something similar in the field displaying the hint
    about your app name. Pick a value for **Company type** that suits your situation
    best and depending on the chosen value, complete any of the other fields. Once
    this is done, hit the **Start using Parse** button. Select **Data** as the product
    you want to start using. Choose **Mobile** as your environment. Next, select a
    platform. Choose **Android**, and in the next view, choose the **Native (Java)**
    option.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[www.Parse.com](http://www.Parse.com)上的下一页是**开始**页面。在显示有关您的应用程序名称的字段中输入`CloudOrder`或类似的内容。选择适合您情况的**公司类型**的值，并根据所选择的值完成任何其他字段。完成后，单击**开始使用Parse**按钮。选择**数据**作为您要开始使用的产品。选择**移动**作为您的环境。接下来，选择一个平台。选择**Android**，在下一个视图中，选择**本机（Java）**选项。'
- en: Choose the **Existing project** option. We are creating a new project; however,
    to know what is going on here, we will do the following things ourselves.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**现有项目**选项。我们正在创建一个新项目；但是，为了知道这里发生了什么，我们将自己做以下事情。
- en: Now, download the SDK. While downloading, switch to Android Studio and change
    the project view perspective from **Android** to **Project**. Then, expand the
    `app` folder. Note that one of the underlying folders is called `libs`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，下载SDK。在下载时，切换到Android Studio，并将项目视图透视从**Android**更改为**项目**。然后，展开`app`文件夹。请注意，其中一个基础文件夹称为`libs`。
- en: Drag and drop the `Parse-x.x.x.jar` file (where `x.x.x` indicates the version
    number) into the `libs` folder in Android Studio. If the **Non-Project Files Access**
    dialog box appears, just click on the **OK** button. When you do this, `Parse-x.x.x.jar`
    will appear under the `libs` folder.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Parse-x.x.x.jar`文件（其中`x.x.x`表示版本号）拖放到Android Studio中的`libs`文件夹中。如果出现**非项目文件访问**对话框，只需单击**确定**按钮。这样做后，`Parse-x.x.x.jar`将出现在`libs`文件夹下。
- en: 'As we saw in [Chapter 1](ch01.html "Chapter 1. Welcome to Android Studio"),
    *Welcome to Android Studio*, we need to tell Gradle about this Parse library.
    Open the `build.gradle` file in the `apps` folder by double-clicking on it. In
    the dependencies section, we need to add two lines, so it will look like as shown
    in the following example. Just after the two lines that are already in there,
    add the dependencies for both the `bolts` and `parse` libraries:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。欢迎来到Android Studio")中，*欢迎来到Android Studio*，我们需要告诉Gradle关于这个Parse库。双击打开`apps`文件夹中的`build.gradle`文件。在依赖项部分，我们需要添加两行，所以它看起来就像下面的例子一样。在已经存在的两行之后，添加`bolts`和`parse`库的依赖项：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Instead of using the local JAR file, as described through step 6 to 8, we could
    also use a dependency like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过步骤6到8中描述的使用本地JAR文件，我们还可以使用类似于此的依赖项：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `AndroidManifest.xml` file, add permissions needed to access the Internet.
    The `Manifest` file will reside in the `/app/src/main` folder. Double-click on
    it to open it. Add the permissions for both the Internet and to access the network
    state, as shown in the following example. Also, define the name for the `package
    name` + `CloudOrderApplication` application:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AndroidManifest.xml`文件中，添加访问互联网所需的权限。`Manifest`文件将位于`/app/src/main`文件夹中。双击打开它。按照下面的例子添加访问互联网和访问网络状态的权限。还要为`包名`+`CloudOrderApplication`应用程序定义名称：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Select and expand the `src/main/java/com.packt.cloudorder` folder. Right-click
    on this folder. In the context menu that pops up, choose **New**, and in the submenu,
    choose **Java Class**. In the dialog box that will be shown, enter `CloudOrderApplication`
    as the content for the **Name** field. Then, click on the **OK** button.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并展开`src/main/java/com.packt.cloudorder`文件夹。右键单击此文件夹。在弹出的上下文菜单中，选择**新建**，在子菜单中选择**Java类**。在显示的对话框中，将`CloudOrderApplication`输入到**名称**字段中。然后，单击**确定**按钮。
- en: 'Make the new class a descendant of the `Application` class and override the
    `onCreate` method. In the `onCreate` method, right after `super.OnCreate()`, add
    the initialization for Parse, as indicated by Parse using the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使新类成为`Application`类的子类，并重写`onCreate`方法。在`onCreate`方法中，在`super.OnCreate()`之后，添加Parse的初始化，如Parse使用以下代码所示：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Android Studio is not happy yet. You will notice that the Parse part in your
    code is highlighted in red in the Android Studio IDE. This is because your app
    is not aware of this class. Any time you change a `gradle` file, your project
    needs to be synchronized. To do so, click on the button with the tooltip that
    reads **Sync project with Gradle Files**. You will find this on the navigation
    bar. Alternatively, you may also click on the **Sync Now** link.![How to do it...](img/B04299_02_01.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio还不太满意。您会注意到Android Studio IDE中代码中的Parse部分被标记为红色。这是因为您的应用程序不知道这个类。每当您更改`gradle`文件时，您的项目都需要进行同步。要这样做，请单击带有工具提示“与Gradle文件同步项目”的按钮。您会在导航栏上找到这个按钮。或者，您也可以单击**立即同步**链接。![如何做...](img/B04299_02_01.jpg)
- en: 'After this synchronization, Android Studio will have a clue about the Parse
    class, but you still need to add an import clause for that. If you hover over
    the part of your code that reads `Parse`, you will notice that Android Studio
    suggests that this probably refers to `com.parse.Parse`. Press *Alt* + *Enter*
    to accept this suggestion or just add the `import com.parse.Parse` line yourself.
    Finally, your class will look like this:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同步之后，Android Studio将了解Parse类，但您仍然需要为此添加一个导入子句。如果您将鼠标悬停在代码中读取`Parse`的部分上，您会注意到Android
    Studio建议这可能是指`com.parse.Parse`。按下*Alt* + *Enter*接受此建议，或者自己添加`import com.parse.Parse`行。最后，您的类将如下所示：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We are almost done configuring our Parse-based app. Open the `MainActivity`
    file and add the following lines to your `onCreate` method:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们几乎完成了配置基于Parse的应用程序。打开`MainActivity`文件，并将以下行添加到您的`onCreate`方法中：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Don't forget to add the appropriate import statement. Run your app. If everything
    is set up successfully, a new object of the `CloudOrder` class is sent to Parse
    and created at Parse.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记添加适当的导入语句。运行您的应用程序。如果一切设置成功，`CloudOrder`类的新对象将被发送到Parse并在Parse中创建。
- en: On the parse web page, click on the **Core** button at the top of the navigation
    bar. Have a look at the **Data** section on the left-hand side of web page. **CloudOrder**
    should appear there, and if you click on it, you will see the entry (row), containing
    the properties (fields) that you just sent.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在parse网页上，点击导航栏顶部的**Core**按钮。查看网页左侧的**Data**部分。**CloudOrder**应该出现在那里，如果您点击它，您将看到包含您刚刚发送的属性（字段）的条目（行）。
- en: 'This is what the data section at [www.Parse.com](http://www.Parse.com) looks
    like:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[www.Parse.com](http://www.Parse.com)上的数据部分的样子：
- en: '![How to do it...](img/B04299_02_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04299_02_02.jpg)'
- en: If this test succeeds, remove the three lines that you have added to the `onCreate`
    method of `MainActivity` as we no longer need them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个测试成功，删除你在`MainActivity`的`onCreate`方法中添加的三行代码，因为我们不再需要它们了。
- en: Well done! You have just created your first Parse app! Let's move on and see
    how to extend the `CloudOrder` app!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！你刚刚创建了你的第一个Parse应用！让我们继续看看如何扩展`CloudOrder`应用程序！
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Parse SDK will take care of retrieving or sending data. Using the `ParseObject`
    class, `Query` and other Parse classes' all data communication takes place automatically.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Parse SDK将负责检索或发送数据。使用`ParseObject`类、`Query`和其他Parse类，所有数据通信都将自动进行。
- en: There's more...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: At [www.parse.com](http://www.parse.com), you will find additional information
    about caching policies, saving data to the cloud, and other interesting features.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在[www.parse.com](http://www.parse.com)上，您将找到有关缓存策略、将数据保存到云端和其他有趣功能的其他信息。
- en: Consuming data from the cloud
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从云端获取数据
- en: We have our Parse-based app up and running. Now, let's see how we can get the
    orders from Parse into our app and display them in a list.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基于Parse的应用程序已经启动运行。现在，让我们看看如何从Parse获取订单并在列表中显示它们。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, you will need to have the previous recipe up and
    running, Internet access, and some coffee, although I must admit that last one
    is not strictly necessary. Tea will be just as fine.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本教程，您需要先前的教程正在运行，互联网访问以及一些咖啡，尽管我必须承认最后一个不是绝对必要的。茶也可以。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see how we can extend our `CloudOrder` app by consuming orders from
    the Parse backend and display them using a list view with the help of the following
    steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过使用以下步骤从Parse后端获取订单并使用列表视图显示它们来扩展我们的`CloudOrder`应用程序：
- en: In the last step in the *Setting up Parse* recipe, we were looking at the newly
    created Parse entity and the data in there. Entities can be created or extended
    on the fly from your app like we did, but we can also define columns and add data
    here on the webpage. Click on the **+Col** button to add a new column to the `CargoOrder`
    entity.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*设置Parse*步骤的最后一步中，我们正在查看新创建的Parse实体和其中的数据。实体可以像我们所做的那样在应用程序中即时创建或扩展，但我们也可以在网页上定义列并在这里添加数据。点击**+Col**按钮，将新列添加到`CargoOrder`实体中。
- en: In the modal, display **Add a column**, choose **String** from **Select a type**,
    and name the new column `address`. Then, click on the **Create Column** button.
    The new column will be added to the row that is already available (you might need
    to scroll to the right to see this.)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模态中，显示**添加列**，从**选择类型**中选择**字符串**，并将新列命名为`address`。然后，点击**创建列**按钮。新列将被添加到已经可用的行中（您可能需要向右滚动以查看此内容）。
- en: Add another column. From the type drop down box, choose **File** and name this
    field as `signature`. And finally, add a last column with the **Number** type
    and the `Status` name. We now have three new custom columns for each **CargoOrder**
    row.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一列。从类型下拉框中选择**文件**，并将此字段命名为`signature`。最后，添加一个带有**数字**类型和`Status`名称的最后一列。现在，我们为每个**CargoOrder**行添加了三个新的自定义列。
- en: Click on the **address** column and enter an address for it; for example, let's
    say that the delivery address for the order should be `1600 Amphitheatre Pkwy,
    Mountain View, CA 94043, United States` (it's where you can find the Google headquarters,
    but you can of course enter any address you like here).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**地址**列并输入一个地址；例如，假设订单的送货地址应该是`1600 Amphitheatre Pkwy, Mountain View, CA 94043,
    United States`（这是谷歌总部的地址，但你当然可以在这里输入任何地址）。
- en: Click on the **+Row** button to create a new **Cargo Order** row and enter some
    other values for the **customer** and **address** fields. Repeat this a couple
    of times to make sure that we have some data to consume in our app.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+行**按钮创建一个新的**Cargo Order**行，并为**customer**和**address**字段输入其他值。重复几次以确保我们的应用程序中有一些数据可供使用。
- en: 'To retrieve rows from the **CargoOrder** entry, we first need to create a model
    that represents the orders. Create a new class at the location where your `MainActivity`
    and `CloudOrderApplication` classes reside. Right-click on the package name and
    select **New** and **Java Class**. Name your new class `CloudOrder` and hit the
    **OK** button. Make your model a descendant of the `ParseObject` class and indicate
    to which entity this class is mapping. Your class should look like this:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从**CargoOrder**条目中检索行，我们首先需要创建一个表示订单的模型。在`MainActivity`和`CloudOrderApplication`类所在的位置创建一个新类。右键单击包名，选择**新建**和**Java类**。命名你的新类为`CloudOrder`，然后点击**确定**按钮。将你的模型设置为`ParseObject`类的子类，并指示该类映射到哪个实体。你的类应该是这样的：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add getters and setters for the columns that we have created in Parse using
    the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码为我们在Parse中创建的列添加获取器和设置器：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, tell Parse about this new class. In the `CloudOrderApplication` class,
    add this line right before the `Parse.Initialize` line:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，告诉Parse关于这个新类。在`CloudOrderApplication`类中，在`Parse.Initialize`行之前添加这一行：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To get the cloud orders in our app, we need to define a query indicating what
    exactly it is that we are looking for. In its most basic form, query looks like
    the following snippet. Add it to the `onCreate` method of `MainActivity`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中获取云订单，我们需要定义一个查询，指示我们究竟在寻找什么。在其最基本的形式中，查询看起来像以下代码片段。将其添加到`MainActivity`的`onCreate`方法中：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We are going to tell Parse that we want to perform this query asynchronously
    by using the `findInBackground` method. Add the following lines to do so:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`findInBackground`方法告诉Parse我们要异步执行这个查询。添加以下行来实现：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the app and check **LogCat** (use the shortcut *Cmd* + *6* to make it appear).
    It displays the number of objects that have been found. This should return the
    numbers of rows that you have created for **CargoOrder** at [www.parse.com](http://www.parse.com).
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并检查**LogCat**（使用快捷键*Cmd* + *6*）。它会显示已找到的对象数量。这应该返回你在[www.parse.com](http://www.parse.com)为**CargoOrder**创建的行数。
- en: 'Great! Now, if only we had an adapter to make these items available in the
    list view. Create a new class and name it `CloudOrderAdapter`. Make it an array
    adapter descendant with the `CloudOrder` type:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！现在，如果我们有一个适配器可以让这些项目在列表视图中可用就好了。创建一个新类，命名为`CloudOrderAdapter`。将其设置为`CloudOrder`类型的数组适配器子类：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Implement the constructor, create a view holder, and add the implementation
    for all the methods that need to be overridden. Finally, your adapter will look
    like this:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现构造函数，创建一个视图持有者，并为所有需要被重写的方法添加实现。最终，你的适配器将是这样的：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Go back to the `MainActivity` class and modify the code of the query call back
    so that we can feed our newly created adapter with the results over there, like
    this:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`MainActivity`类，并修改查询回调的代码，以便我们可以在那里用结果来填充我们新创建的适配器，如下所示：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To display the orders in our app, we have to create a layout for it. Expand
    the `layout` folder and double-click on the `activity_main.xml` file to open it.
    By default, a preview of the layout is shown. Change the perspective to text by
    clicking on the **Text** tab at the bottom of Android Studio, which makes the
    layout display as XML.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中显示订单，我们必须为其创建一个布局。展开`layout`文件夹，双击`activity_main.xml`文件以打开它。默认情况下，会显示布局的预览。通过点击Android
    Studio底部的**Text**选项卡，将布局显示为XML。
- en: 'Remove the **TextView** widget that displays `Hello world` and add a list view:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除显示`Hello world`的**TextView**小部件，并添加一个列表视图：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Select the `layout` folder again and right-click on it. From the menu, choose
    **New**, and from the submenu, choose **Layout resource**. Choose `adapter_main`
    for the File name and click on the **OK** button. A new layout file will be created.
    Change the perspective from design to text.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次选择`layout`文件夹，右键单击它。从菜单中选择**新建**，然后从子菜单中选择**布局资源**。选择`adapter_main`作为文件名，然后点击**确定**按钮。将创建一个新的布局文件。将视角从设计更改为文本。
- en: 'Add two text views to the layout so that we can display both the customer name
    and the address and add some formatting, like this:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局中添加两个文本视图，以便我们可以显示客户姓名和地址，并添加一些格式，如下所示：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You are done. Run your app. If everything goes well, you will see an output
    like the one shown in the following screenshot, and this is what your list view
    may look like after having the orders consumed from [www.parse.com](http://www.parse.com):![How
    to do it...](img/B04299_02_03.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经完成了。运行你的应用程序。如果一切顺利，你会看到一个输出，就像下面的截图所示，这就是你从[www.parse.com](http://www.parse.com)获取订单后列表视图的样子：![操作步骤...](img/B04299_02_03.jpg)
- en: If you run into a `class exception error,` have a look again at step 8\. Did
    you register your `ParseOrder` subclass? In case you are running into any other
    errors, repeat each step carefully to check whether there are any missing parts
    or mismatches.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你遇到`class exception error`，再看一下第8步。你是否注册了`ParseOrder`子类？如果你遇到其他错误，请仔细重复每一步，检查是否有任何遗漏或不匹配的地方。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe is nothing but a brief introduction to Parse. At [www.parse.com](http://www.parse.com),
    you will find much more information about how to retrieve data from a cloud, including
    using **where** and **order by** statements in your queries. It also provides
    you with information that is needed to create relational or compound queries.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例只是对Parse的简要介绍。在[www.parse.com](http://www.parse.com)上，您将找到更多关于如何从云中检索数据的信息，包括在查询中使用**where**和**order
    by**语句。它还为您提供了创建关系或复合查询所需的信息。
- en: Submitting data to the cloud
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交数据到云
- en: Now that we have completed the previous recipes and the driver that will be
    using our `CloudOrder` app knows where to go to for a particular order, it would
    be great if, once the goods are delivered, he (or she) will be able to select
    that order and have it signed for delivery by the customer on the device.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了之前的示例，并且将使用我们的`CloudOrder`应用程序的司机知道去哪里获取特定订单，如果一旦货物交付，司机将能够选择该订单并要求客户在设备上签名。
- en: In this last recipe, we will implement code to make the customer draws his or
    her signature on the device. The signature will be sent to Parse as an image and
    the `CloudOrder` record will be updated.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最后的示例中，我们将实现代码，让客户在设备上签名。签名将作为图像发送到Parse，并且`CloudOrder`记录将被更新。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To go through this recipe, you will need to have the previous recipes up and
    running.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要先运行之前的示例。
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Create a new class and name it `SignatureActivity`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的类，命名为`SignatureActivity`。
- en: Create a new layout and name it `activity_signature.xml`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的布局，命名为`activity_signature.xml`。
- en: 'Switch the layout to **Text**. Add the **TextView** and the **Button** widget
    to the layout. Make sure that the layout looks like this:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换布局为**文本**。将**TextView**和**Button**小部件添加到布局中。确保布局看起来像这样：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To allow the customer to draw his signature, we need to create a custom widget.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让客户签名，我们需要创建一个自定义小部件。
- en: Right under the `com.packt.cloudorder` package, create a new package and name
    it `widget`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.packt.cloudorder`包的下面，创建一个新包，命名为`widget`。
- en: Within this new package, create a new class and name it `SignatureView`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新包中，创建一个新类，命名为`SignatureView`。
- en: 'Make the `SignatureView` class descend from the `View` class and override the
    `onDraw` method to draw a path wherever we put our finger or stylus on the screen.
    Override the `onTouch` method to create the path. snippet for creating the path
    will look like this:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使`SignatureView`类从`View`类继承，并覆盖`onDraw`方法，以在屏幕上放置手指或触控笔时绘制路径。覆盖`onTouch`方法以创建路径。创建路径的代码段如下所示：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the `getSignatureBitmap` method to the `SignatureView` class so that we
    can get the signature as a bitmap from the `Signature view` widget:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`getSignatureBitmap`方法添加到`SignatureView`类中，以便我们可以从`Signature view`小部件获取签名作为位图：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Go back to the `signature_activity` layout and add the signature view between
    the text view and the button:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`signature_activity`布局，并在文本视图和按钮之间添加签名视图：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Build the project. It should make any rendering issues disappear.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。它应该消除任何渲染问题。
- en: 'Implement the `SignatureActivity` class. First, make it an `Activity` descendant
    and override the `onCreate` method. Set the content view to the layout we have
    just created and add an `onClick` implementation for the button in the layout,
    like this:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`SignatureActivity`类。首先，将其设置为`Activity`的子类，并覆盖`onCreate`方法。将内容视图设置为我们刚刚创建的布局，并在布局中的按钮上添加一个`onClick`实现，如下所示：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the activity to the manifest file after the `MainActivity` declaration
    as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`声明之后，将活动添加到清单文件中，如下所示：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If the driver selects any of the orders, we need to display the signature activity
    that in turn needs to know which order has been selected. Go to the `MainActivity`
    class and append `OnItemClickListener` on the list view at the end of the `OnCreate`
    method, just after the `Query.findInBackground` call:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果司机选择了任何订单，我们需要显示签名活动，然后需要知道选择了哪个订单。转到`MainActivity`类，并在`OnCreate`方法的末尾，在`Query.findInBackground`调用之后，添加`OnItemClickListener`到列表视图上：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `onItemClick` event, let''s figure out which order has been selected
    using the following code snippet:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onItemClick`事件中，使用以下代码段找出选择了哪个订单：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `gotoSignatureActivity` method, we want to start the `Signature` activity,
    using an intent, and pass the selected order from `MainActivity` to `SignatureActivity`,
    using a bundle as shown:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`gotoSignatureActivity`方法中，我们希望使用意图启动`Signature`活动，并将从`MainActivity`传递到`SignatureActivity`的选择订单，使用如下所示的捆绑：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `SignatureActivity` class, add the following to the `OnClick` implementation
    of the button:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SignatureActivity`类中，将以下内容添加到按钮的`OnClick`实现中：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For the `sendSignature` method implementation, we will create a new `ParseFile`
    object and feed it with the bitmap data that comes from the signature view. We
    will send the file to Parse using the `saveInBackground` method:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`sendSignature`方法的实现，我们将创建一个新的`ParseFile`对象，并将来自签名视图的位图数据传递给它。我们将使用`saveInBackground`方法将文件发送到Parse：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Once the saving is done, we want to update the order with information about
    the file we have created and the status, for example `10`, which could indicate
    that the order has been finished or something like that. Its actually value does
    not really matter here.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存完成后，我们希望更新订单的信息，例如我们创建的文件和状态，例如`10`，这可能表示订单已完成或类似的状态。这里实际的值并不重要。
- en: 'If no error occurred during saving, we use the `createWithoutData` method of
    the `ParseObject` class so that we could pass the right object ID and the fields
    that we want to update. We will save these changes as well so that the record
    at Parse will be updated. (For the sake of simplicity, we use this approach; although,
    we could accomplish the same thing using the `CloudOrder` object) The implementation
    of the done call back looks like this:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在保存过程中没有发生错误，我们使用`ParseObject`类的`createWithoutData`方法，这样我们就可以传递正确的对象ID和我们想要更新的字段。我们也会保存这些更改，以便在Parse上更新记录。（为了简单起见，我们使用这种方法；尽管我们也可以使用`CloudOrder`对象来完成相同的事情）完成回调的实现如下：
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run the app, select an order, sign it, and click on the **SEND SIGNATURE** button.
    If everything goes well, a toast will be shown, indicating that the signature
    has been sent.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，选择一个订单，签名，然后单击**发送签名**按钮。如果一切顺利，将显示一个toast，指示签名已发送。
- en: 'This is what your signature looks like after signing by a customer:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是顾客签名后签名的样子：
- en: '![How to do it…](img/B04299_02_04.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤…](img/B04299_02_04.jpg)'
- en: Check it out for yourself at [www.parse.com](http://www.parse.com). Refresh
    the view for **Cloud order**. Notice that for the order that you have selected
    in the app, the `signature.jpg` file appears in the signature column. Double-click
    on it to see its contents. This is what your data rows may look like at [www.parse.com](http://www.parse.com)
    after submitting a signature image to it:![How to do it…](img/B04299_02_05.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自己去[www.parse.com](http://www.parse.com)看看。刷新**Cloud order**的视图。注意，在应用程序中选择的订单中，`signature.jpg`文件出现在签名列中。双击它以查看其内容。在向其提交签名图像后，您的数据行可能如下所示：![操作步骤…](img/B04299_02_05.jpg)
- en: 'Actually, you should be using string resources instead of hardcoded values.
    By reusing string resources (or constant values) not only for the class and field
    names but also for other texts, you will reduce the number of errors caused by
    typos. This will improve the quality of your app. It also will make it much easier
    to localize your app later. (In the last three chapters, we will focus more on
    these kind of things but here is some good practice to start with right away.)
    The following steps gives usage of string resources:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您应该使用字符串资源而不是硬编码的值。通过重用字符串资源（或常量值），不仅可以用于类和字段名称，还可以用于其他文本，从而减少由拼写错误引起的错误数量。这将提高您的应用程序的质量。它也将使以后本地化应用程序变得更加容易。（在最后三章中，我们将更多地关注这些内容，但现在就开始使用这些好的实践。）以下步骤使用了字符串资源：
- en: 'Check out the `strings.xml` file. It resides in the `res/values` folder. Imagine
    we would have included the text for the toast being displayed in step 19\. Your
    `strings.xml` file could look like this:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`strings.xml`文件。它位于`res/values`文件夹中。想象一下，如果我们在步骤19中显示的toast中包含了文本。您的`strings.xml`文件可能如下所示：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In your code, you could refer to a string resource using the `getString` method.
    You could replace the hardcoded string for the toast being displayed in step 19
    for example with a string reference, like this:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码中，您可以使用`getString`方法引用字符串资源。例如，您可以用字符串引用替换步骤19中显示的toast的硬编码字符串，如下所示：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In your layout file, you could also refer to this string resource, for example,
    in a text view:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的布局文件中，您也可以引用这个字符串资源，例如，在一个文本视图中：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We will describe how to use strings, colors, dimensions, and other type of resources
    in depth later, but you can already get a bit familiar with the concepts by replacing
    all hardcoded strings in this recipe with string resource references or where
    applicable, use constant values for them.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以后深入介绍如何使用字符串、颜色、尺寸和其他类型的资源，但您可以通过用字符串资源引用替换本教程中的所有硬编码字符串，或在适用的情况下使用常量值来熟悉这些概念。
- en: With the implementation of this recipe, we have completed our `CloudOrder` app.
    Feel free to further customize it and make enhancements wherever you want to.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现这个步骤，我们已经完成了我们的`CloudOrder`应用程序。随意进行进一步的定制，并在需要的地方进行增强。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The custom widget draws a path on the view, for which a bitmap will be created.
    Using a `ParseFile` object, the bitmap data will be send to Parse (which in turn
    will store the file in Amazon and keep a reference to the file).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义小部件在视图上绘制路径，然后将创建一个位图。使用`ParseFile`对象，位图数据将被发送到Parse（然后将文件存储在Amazon并保留对文件的引用）。
- en: If this succeeds, we will update the **CloudOrder** row to which the signature
    applies by denoting to which file the image in the **signature** column refers
    to.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，我们将更新适用于签名的**CloudOrder**行，指明**signature**列中的图像指向哪个文件。
- en: There's more...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Have a closer look at the documentation at [www.parse.com](http://www.parse.com).
    There are a couple of interesting features available including the `saveEventually`
    method and the cloud code options.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[www.parse.com](http://www.parse.com)上的文档。那里有一些有趣的功能可用，包括`saveEventually`方法和云代码选项。
- en: The `saveEventually` method will store the update locally if there is no Internet
    connection available, which is a common scenario for mobile apps. Once the Internet
    connection has been restored, this method will take of, sending the data that
    has been queued to be sent to the cloud. This option will save you much troubles
    and time.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有可用的互联网连接，`saveEventually`方法将在本地存储更新，这对于移动应用程序是常见的情况。一旦恢复了互联网连接，这个方法将开始发送已排队等待发送到云端的数据。这个选项将为您节省大量麻烦和时间。
- en: Also check out the other features such as cloud code and the various third-party
    integrations that are available, such as Twilio, if you want to send text or voice
    messages (which could be handy for confirmation purposes in on-boarding processes)
    and SendGrid, which is a tool for e-mail delivery.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 还要查看其他功能，比如云代码和各种可用的第三方集成，比如Twilio，如果您想发送文本或语音消息（这对于入职流程中的确认目的可能很方便），以及SendGrid，这是一个用于电子邮件传递的工具。
- en: Following the recipes in this chapter, we have implemented some very interesting
    functionalities with little effort, which is really great! The app however is
    not very eye-catching yet. By applying the concepts of Material design, which
    will be explained in the next chapter, we can make the app look great and more
    intuitive to use.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，我们只需付出少许努力就实现了一些非常有趣的功能，这真的很棒！然而，该应用程序目前还不够吸引人。通过应用下一章将解释的材料设计概念，我们可以使应用程序看起来更加出色，并且更加直观易用。
- en: See also
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information, refer to [Chapter 3](ch03.html "Chapter 3. Material Design"),
    *Material Design*.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[第3章](ch03.html "第3章 材料设计") *材料设计*。
