- en: Chapter 12. Testing and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。测试和调试
- en: 'As you write JavaScript applications, you will soon realize that having a sound
    testing strategy is indispensable. In fact, not writing enough tests is almost
    always a bad idea. It is essential to cover all nontrivial functionality of your
    code to make sure of the following points:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写JavaScript应用程序时，你很快会意识到拥有一个完善的测试策略是不可或缺的。事实上，不写足够的测试几乎总是一个坏主意。覆盖代码的所有非平凡功能是至关重要的，以确保以下几点：
- en: Existing code behaves as per the specifications
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有代码按规范行为
- en: Any new code does not break the behavior defined by the specifications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何新代码都不会破坏规范定义的行为
- en: Both these points are very important. Many engineers consider only the first
    point as the sole reason to cover your code with enough tests. The most obvious
    advantage of test coverage is to really make sure that the code being pushed to
    production system is mostly error free. Writing test cases to smartly cover maximum
    functional areas of the code, generally gives good indication around the overall
    quality of the code. There should be no arguments or compromises around this point.
    Although, it is unfortunate that many production systems are still bereft of adequate
    code coverage. It is very important to build an engineering culture where developers
    think about writing tests as much as they think about writing code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这两点都非常重要。许多工程师只考虑第一点作为足够测试代码的唯一原因。测试覆盖的最明显优势是确保推送到生产系统的代码大部分是无错误的。聪明地编写测试用例以覆盖代码的最大功能区域，通常可以很好地指示代码的整体质量。在这一点上不应该有争论或妥协。尽管很不幸，许多生产系统仍然缺乏足够的代码覆盖。建立一个工程文化，让开发人员像编写代码一样考虑编写测试是非常重要的。
- en: The second point is even more important. Legacy systems are usually very difficult
    to manage. When you are working on code, either written by someone else or written
    by a large distributed team, it is fairly easy to introduce bugs and break things.
    Even the best engineers make mistakes. When you are working on a large code base
    you are unfamiliar with, if there is no sound test coverage to help you, you will
    introduce bugs. As you won't have the confidence in the changes you are making,
    because there are no test cases to confirm your changes, your code releases will
    be shaky, slow, and obviously full of hidden bugs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点更加重要。传统系统通常很难管理。当你在处理代码时，无论是别人写的还是由一个大型分布式团队编写的，很容易引入错误并破坏事物。即使是最优秀的工程师也会犯错。当你在处理一个你不熟悉的大型代码库时，如果没有足够的测试覆盖来帮助你，你会引入错误。因为没有测试用例来确认你的更改，你对自己的更改没有信心，你的代码发布将是不稳定的，缓慢的，显然充满了隐藏的错误。
- en: You will refrain from refactoring or optimizing your code, because you won't
    be really sure what changes to the code base would potentially break something
    (again, because there are no test case to confirm your changes); all this is a
    vicious circle. It's like a civil engineer saying-although I have constructed
    this bridge, I have no confidence on the quality of the construction. It may collapse
    immediately or never. Although this may sound like an exaggeration, I have seen
    a lot of high impact production code being pushed with no test coverage. This
    is risky and should be avoided. When you are writing enough test cases to cover
    majority of your functional code, when you make change to those pieces, you will
    immediately realize if there is a problem with this new change. If your changes
    make the test case fail, you will realize the problem. If your refactor breaks
    the test scenario, you will realize the problem; all of this happens much before
    the code is pushed to production.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将不会重构或优化你的代码，因为你不会真正确定对代码库的更改可能会破坏什么（同样，因为没有测试用例来确认你的更改）；所有这些都是一个恶性循环。这就像土木工程师说-尽管我建造了这座桥，但我对建筑质量没有信心。它可能会立即倒塌，也可能永远不会。尽管这听起来可能有些夸张，但我见过很多高影响的生产代码被推送而没有测试覆盖。这是有风险的，应该避免。当你编写足够的测试用例来覆盖大部分功能代码时，当你对这些部分进行更改时，你会立即意识到是否存在问题。如果你的更改导致测试用例失败，你会意识到问题。如果你的重构破坏了测试场景，你会意识到问题；所有这些都发生在代码被推送到生产之前。
- en: In recent years, ideas like test-driven development and self-testing code are
    gaining prominence, especially in agile methodology. These are fundamentally sound
    ideas and will help you write robust code - the code you are confident of. We
    will discuss all these ideas in this chapter. We will understand how to write
    good test cases in modern JavaScript. We will also look at several tools and methods
    to debug your code. JavaScript was traditionally a bit difficult to test and debug,
    primarily due to lack of tools, but modern tools make both of these easy and natural.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，像测试驱动开发和自测试代码这样的想法在敏捷方法中变得越来越重要。这些都是基本合理的想法，将帮助你编写健壮的代码-你有信心的代码。我们将在本章讨论所有这些想法。我们将了解如何在现代JavaScript中编写良好的测试用例。我们还将看一些工具和方法来调试你的代码。传统上，由于缺乏工具，JavaScript测试和调试都有些困难，但现代工具使这两者都变得容易和自然。
- en: Unit testing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: When we talk about test cases, we mostly mean unit tests. It is incorrect to
    assume that the unit we want to test is always a function. The unit, or unit of
    work, is a logical unit that constitutes single behavior. This unit should be
    able to be invoked via a public interface and should be testable independently.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论测试用例时，我们大多指的是单元测试。假设我们要测试的单元总是一个函数是不正确的。这个单元，或者说工作单元，是一个构成单一行为的逻辑单元。这个单元应该能够通过公共接口被调用，并且应该能够独立进行测试。
- en: 'Thus, a unit test can perform the following functions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单元测试可以执行以下功能：
- en: It tests a single logical function
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它测试一个单一的逻辑函数
- en: It can run without a specific order of execution
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以在没有特定执行顺序的情况下运行
- en: It takes care of its own dependencies and mock data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它负责处理自己的依赖和模拟数据
- en: It always returns the same result for the same input
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于相同的输入，总是返回相同的结果
- en: It should be self-explanatory, maintainable, and readable
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是自解释的，可维护的和可读的
- en: Martin Fowler advocates the *Test Pyramid* ([http://martinfowler.com/bliki/TestPyramid.html](http://martinfowler.com/bliki/TestPyramid.html))
    strategy to make sure we have a high number of unit tests to ensure maximum code
    coverage. There are two important testing strategies that we will discuss in this
    chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Martin Fowler提倡*测试金字塔*（[http://martinfowler.com/bliki/TestPyramid.html](http://martinfowler.com/bliki/TestPyramid.html)）策略，以确保我们有大量的单元测试来确保最大的代码覆盖率。在本章中，我们将讨论两种重要的测试策略。
- en: Test Driven Development
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: '**Test driven development** (**TDD**) has gained a lot of prominence in the
    last few years. The concept was first proposed as part of the extreme programming
    methodology. The idea is to have short repetitive development cycles where the
    focus is on writing the test cases first. The cycle looks like the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动开发**（**TDD**）在过去几年中变得非常重要。这个概念最初是作为极限编程方法论的一部分提出的。其核心思想是有短小的重复开发周期，重点是先编写测试用例。这个周期看起来像下面这样：'
- en: Add a test case as per the specifications for the specific unit of code.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据代码单元的具体规格添加一个测试用例。
- en: Run existing suite of test cases to see if the new test case you wrote fails;
    it should, because there is no code for that unit yet. This step ensures that
    the current test harness works well.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行现有的测试套件，看看你编写的新测试用例是否失败；它应该失败，因为该单元尚未有代码。这一步确保当前的测试工具能够正常工作。
- en: Write the code that mainly serves to confirm to the test case. This code is
    not optimized, refactored, or even entirely correct. However, this is fine at
    this moment.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写的代码主要用于确认测试用例。这段代码并没有经过优化、重构，甚至可能并不完全正确。但是，目前来说这是可以接受的。
- en: Rerun tests and see if all the test cases pass. After this step, you are confident
    that the new code is not breaking anything.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行测试，看看所有的测试用例是否通过。经过这一步，你可以确信新代码没有破坏任何东西。
- en: Refactor code to make sure you are optimizing the unit and handling all corner
    cases
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构代码以确保你正在优化单元并处理所有边缘情况
- en: These steps are repeated for any new code you add. This is an elegant strategy
    that works really well for agile methodology. TDD will be successful only if the
    testable units of code are small and confirms only to the test case.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤对于你添加的任何新代码都是重复的。这是一种对敏捷方法论非常有效的优雅策略。只有当可测试的代码单元很小并且仅符合测试用例时，TDD才会成功。
- en: Behavior Driven Development
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行为驱动开发
- en: A very common problem while trying to follow TDD is vocabulary and the definition
    of correctness. BDD tries to introduce a ubiquitous language while writing the
    test cases when you are following TDD. This language makes sure that both the
    business and the engineering are talking about the same thing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试遵循TDD时一个非常常见的问题是词汇和正确性的定义。BDD试图在遵循TDD时引入一种通用语言。这种语言确保业务和工程都在讨论同一件事情。
- en: We will use Jasmine as the primary BDD framework and explore various testing
    strategies.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Jasmine作为主要的BDD框架，并探索各种测试策略。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can install Jasmine by downloading the standalone package from [https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip](https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从[https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip](https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip)下载独立包来安装Jasmine。
- en: 'When you unzip this package, you will see the following directory structure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你解压这个包时，你会看到以下的目录结构：
- en: '![Behavior Driven Development](graphics/image_12_001.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](graphics/image_12_001.jpg)'
- en: 'The `lib` directory contains the JavaScript files that you need in your project
    to start writing Jasmine test cases. If you open `SpecRunner.html`, you will find
    the following JavaScript files included in it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`目录包含了你在项目中需要的JavaScript文件，用于开始编写Jasmine测试用例。如果你打开`SpecRunner.html`，你会发现其中包含了以下JavaScript文件：'
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first three are Jasmine's own framework files. The next section includes
    the source files we want to test and the actual test specifications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个是Jasmine自己的框架文件。接下来的部分包括我们想要测试的源文件和实际的测试规格。
- en: 'Let''s experiment with Jasmine via a very ordinary example. Create a `bigfatjavascriptcode.js`
    file and place it in the `src/` directory. The function we will test is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个非常普通的例子来尝试Jasmine。创建一个`bigfatjavascriptcode.js`文件，并将其放在`src/`目录中。我们将要测试的函数如下：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a simple function that does one single thing. It receives a string and
    returns a capitalized string. We will test various scenarios around this function.
    This is the unit of code, which we discussed earlier.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的函数，只做了一件事情。它接收一个字符串并返回一个大写的字符串。我们将围绕这个函数测试各种情况。这就是我们之前讨论过的代码单元。
- en: 'Next, create the test specifications. Create one JavaScript file, `test.spec.js`,
    and place it in the `spec/` directory. You will need to add the following two
    lines into your `SpecRunner.html`: The file should contain the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建测试规格。创建一个JavaScript文件`test.spec.js`，并将其放在`spec/`目录中。你需要将以下两行添加到你的`SpecRunner.html`中：文件应包含以下内容：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The order of this inclusion does not matter. When we run `SpecRunner.html`,
    you will see something like the following image:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的顺序并不重要。当我们运行`SpecRunner.html`时，你会看到类似以下图片的内容：
- en: '![Behavior Driven Development](graphics/image_12_002.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](graphics/image_12_002.jpg)'
- en: 'This is the Jasmine report that shows details about the number of tests that
    were executed and the count of failures and successes. Now, let''s make the test
    case fail. We want to test a case where an `undefined` variable is passed to the
    function. Let''s add one more test case, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Jasmine报告，显示了执行的测试数量以及失败和成功的数量。现在，让我们让测试用例失败。我们想要测试一个情况，即将一个`undefined`变量传递给函数。让我们添加一个测试用例，如下所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, when you run `SpecRunner`, you will see the following result:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行`SpecRunner`时，你会看到以下结果：
- en: '![Behavior Driven Development](graphics/image_12_003.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](graphics/image_12_003.jpg)'
- en: 'As you can see, the failure is displayed for this test case in a detailed error
    stack. Now, we will go about fixing this. In your original JS code, handle undefined
    as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个测试用例显示了一个详细的错误堆栈的失败。现在，我们将着手解决这个问题。在你的原始JS代码中，处理undefined如下：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With this change, your test case will pass, and you will see the following
    result in the Jasmine report:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个改变，你的测试用例将通过，并且你将在Jasmine报告中看到以下结果：
- en: '![Behavior Driven Development](graphics/image_12_004.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](graphics/image_12_004.jpg)'
- en: This is very similar to what a test-driven development would look like. You
    write test cases and then fill the necessary code to confirm to the specifications
    and rerun the test suite. Let's understand the structure of the Jasmine tests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常类似于测试驱动开发的样子。你编写测试用例，然后填写必要的代码以符合规范，并重新运行测试套件。让我们了解一下Jasmine测试的结构。
- en: 'Our test specification looks like the following piece of code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试规范看起来像以下代码片段：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `describe("TestStringUtilities"` is what a test suite is. The name of the
    test suite should describe the unit-of-code we are testing; this can be a function
    or a group of related functionality. Inside the specs, you will call the global
    Jasmine function,`it`, to which you will pass the title of the spec and the function
    that validates the condition of the testcase This function is the actual test
    case. You can catch one or more assertions or the general expectations using the
    `expect` function. When all expectations are `true`, your spec is passed. You
    can write any valid JavaScript code inside `describe` and `it` functions. The
    values you verify as part of the expectations are matched using a matcher. In
    our example, `toEqual` is the matcher that matches two values for equality. Jasmine
    contains a rich set of matches to suit most of the common use cases. Some common
    matchers supported by Jasmine are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe("TestStringUtilities"`是一个测试套件。测试套件的名称应该描述我们正在测试的代码单元；这可以是一个函数或一组相关功能。在规范内部，你将调用全局的Jasmine函数`it`，并传递规范的标题和验证测试用例条件的函数。这个函数就是实际的测试用例。你可以使用`expect`函数捕获一个或多个断言或一般的期望。当所有期望都为`true`时，你的规范通过了。你可以在`describe`和`it`函数内部编写任何有效的JavaScript代码。作为期望的一部分验证的值使用匹配器进行匹配。在我们的例子中，`toEqual`是匹配器，用于匹配两个值是否相等。Jasmine包含丰富的匹配器，适合大多数常见用例。Jasmine支持的一些常见匹配器如下：'
- en: '`toBe`: This matcher checks if two objects being compared are equal. This is
    same as the `===` comparison. For example, check out the following code snippet:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: toBe：这个匹配器检查被比较的两个对象是否相等。这与===比较相同。例如，看下面的代码片段：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`not`: You can negate a matcher with a not prefix. For example, `expect(1).not.toEqual(2);`
    will negate the match made by `toEqual()`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: not：你可以用not前缀否定一个匹配项。例如，`expect(1).not.toEqual(2);`将否定`toEqual()`所做的匹配。
- en: '`toContain`: This checks if an element is part of an array. It is not an exact
    object match as `toBe`. For example, take a look at the following lines of code:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: toContain：这个检查一个元素是否是数组的一部分。它不是一个精确的对象匹配，如toBe。例如，看一下下面的代码行：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`toBeDefined` and `toBeUndefined`: These two matches are handy to check whether
    a variable is `undefined` or not.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: toBeDefined和toBeUndefined：这两个匹配项很方便，可以检查变量是否为undefined。
- en: '`toBeNull`: This checks if a variable''s value is `null`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: toBeNull：这个检查变量的值是否为null。
- en: '`toBeGreaterThan` and `toBeLessThan`: These matcher performs numeric comparison
    (works on strings too). For example, consider the following piece of code:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: toBeGreaterThan和toBeLessThan：这两个匹配器执行数字比较（也适用于字符串）。例如，考虑以下代码片段：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'An interesting feature of Jasmine is the spies. When you are writing a large
    system, it is not possible to make sure that all systems are always available
    and correct. At the same time, you don''t want your unit tests to fail due to
    a dependency that may be broken or unavailable. To simulate a situation where
    all dependencies are available for a unit of code we want to test, we will mock
    this dependency to always give the response we expect. Mocking is an important
    aspect of testing, and most testing frameworks provide support for mocking. Jasmine
    allows mocking using a feature called a **Spy**. Jasmine spies essentially stubs
    the functions we may not have ready at the time of writing the test case, but
    as part of the functionality, we will need to track that we are executing those
    dependencies and not ignoring them. Consider the following example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine的一个有趣特性是间谍。当你编写一个大型系统时，不可能确保所有系统始终可用和正确。同时，你不希望你的单元测试因为一个可能被破坏或不可用的依赖而失败。为了模拟所有依赖都可用于我们要测试的代码单元的情况，我们将模拟这个依赖，始终给出我们期望的响应。模拟是测试的一个重要方面，大多数测试框架都提供了模拟支持。Jasmine允许使用一个名为**Spy**的功能进行模拟。Jasmine间谍本质上是我们可能在编写测试用例时没有准备好的函数的存根，但作为功能的一部分，我们需要跟踪我们正在执行这些依赖项而不是忽略它们。考虑以下例子：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, while we are writing this test case, we either don't have the
    real implementation of the dependency, `configurator.submitPOSTRequest()`, or
    someone is fixing this particular dependency; in any case, we don't have it available.
    For our test to work, we will need to mock it. Jasmine spies allow us to replace
    a function with its mock and allows us to track its execution.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当我们编写这个测试用例时，我们要么没有依赖项`configurator.submitPOSTRequest()`的真正实现，要么有人正在修复这个特定的依赖项；无论哪种情况，我们都没有它可用。为了使我们的测试工作，我们需要模拟它。Jasmine间谍允许我们用它的模拟替换一个函数，并允许我们跟踪它的执行。
- en: In this case, we will need to ensure that we called the dependency. When the
    actual dependency is ready, we will revisit this test case to make sure it fits
    the specifications; however, at this time, all we need to ensure that the dependency
    is called. Jasmine function `tohaveBeenCalled()` lets us track the execution of
    a function that may be a mock. We can use `toHaveBeenCalledWith()`, which allows
    us to determine if the stub function was called with correct parameters. There
    are several other interesting scenarios you can create using Jasmine spies. The
    scope of this chapter won't permit us to cover them all, but I would encourage
    you to discover those areas on your own.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要确保调用了依赖项。当实际的依赖项准备好时，我们将重新访问这个测试用例，以确保它符合规范；然而，此时，我们只需要确保调用了依赖项。Jasmine函数`tohaveBeenCalled()`让我们跟踪可能是模拟的函数的执行。我们可以使用`toHaveBeenCalledWith()`，它允许我们确定存根函数是否使用正确的参数进行了调用。使用Jasmine间谍可以创建几种其他有趣的场景。本章的范围不允许我们覆盖它们所有，但我鼓励你自己发现这些领域。
- en: Mocha, Chai and Sinon
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摩卡，柴和西农
- en: 'Though Jasmine is the most prominent JavaScript testing framework, mocha and
    chai are gaining prominence in the `Node.js` environment:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Jasmine是最突出的JavaScript测试框架，但mocha和chai在`Node.js`环境中也越来越受到重视。
- en: Mocha is the testing framework used to describe and run test cases
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mocha是用于描述和运行测试用例的测试框架
- en: Chai is the assertion library supported by Mocha
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柴是Mocha支持的断言库
- en: Sinon comes in handy while creating mocks and stubs for your tests
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 西农在创建测试时非常方便地创建模拟和存根
- en: We won't discuss these frameworks in this book; however, experience on Jasmine
    will be handy if you want to experiment with these frameworks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在本书中讨论这些框架；然而，如果你想尝试这些框架，对Jasmine的经验将会很有帮助。
- en: JavaScript debugging
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript调试
- en: If you are not a completely new programmer, I am sure you must have spent some
    amount of time debugging your or someone else's code. Debugging is almost like
    an art form. Every language has different methods and challenges around the debugging.
    JavaScript is traditionally a difficult language to debug. I have spent days and
    nights in misery, trying to debug badly written JavaScript code using `alert()`
    functions. Fortunately, modern browsers, such as Mozilla, Firefox, and Google
    Chrome, have excellent **Developer Tools** to help debug JavaScript in the browser.
    There are IDEs like IntelliJ IDEA and WebStorm with great debugging support for
    JavaScript and Node.js. In this chapter, we will focus primarily on Google Chrome's
    built-in developer tool. Firefox also supports Firebug extension and has excellent
    built-in developer tools, but as they behave more or less the same as Google Chrome's
    **Developer Tools**, we will discuss common debugging approaches that work in
    both of these tools.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是一个完全新的程序员，我相信你一定花了一些时间来调试你自己或别人的代码。调试几乎就像一种艺术形式。每种语言在调试方面都有不同的方法和挑战。JavaScript传统上是一种难以调试的语言。我曾经在痛苦中度过了几天几夜，试图使用`alert()`函数调试糟糕的JavaScript代码。幸运的是，现代浏览器，如Mozilla，Firefox和Google
    Chrome，都有出色的**开发者工具**，可以帮助在浏览器中调试JavaScript。还有像IntelliJ IDEA和WebStorm这样的IDE，对JavaScript和Node.js有很好的调试支持。在本章中，我们将主要关注Google
    Chrome内置的开发者工具。Firefox也支持Firebug扩展，并且有出色的内置开发者工具，但由于它们的行为与Google Chrome的**开发者工具**几乎相同，我们将讨论在这两种工具中都适用的常见调试方法。
- en: Before we talk about the specific debugging techniques, let's understand the
    type of errors we would be interested in while we try to debug our code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论具体的调试技术之前，让我们了解一下在尝试调试我们的代码时我们感兴趣的错误类型。
- en: Syntax errors
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法错误
- en: 'When your code has something that does not confirm to the JavaScript language
    grammar, the interpreter rejects that piece of code. These are easy to catch if
    your IDE is helping you with syntax checking. Most modern IDEs help with these
    errors. Earlier, we discussed the usefulness of tools, such as JSLint and JSHint,
    around catching syntax issues with your code. They analyze the code and flag errors
    in the syntax. The JSHint output can be very illuminating. For example, the following
    output shows up so many things we can change in the code. The following code snippet
    is from one of my existing projects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码有一些不符合JavaScript语法的东西时，解释器会拒绝那部分代码。如果你的IDE帮助你进行语法检查，这些错误很容易被捕捉到。大多数现代IDE都可以帮助解决这些错误。早些时候，我们讨论了工具的有用性，比如JSLint和JSHint，可以帮助捕捉代码中的语法问题。它们分析代码并标记语法错误。JSHint的输出可能非常有启发性。例如，以下输出显示了我们可以在代码中进行的许多更改。以下代码片段来自我的一个现有项目：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using strict
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用严格模式
- en: 'We briefly discussed the strict mode in earlier chapters. When you enable strict
    mode, JavaScript stops being accepting of syntactical errors in your code. Rather
    than silently failing, strict mode makes these failure throw errors instead. It
    also helps you convert mistakes into actual errors. There are two ways of enforcing
    strict mode. If you want the strict mode for the entire script, you can just add
    the `use strict` statement (with the quotes) as the first line of your JavaScript
    program. If you want a specific function to confirm to strict mode, you can add
    the directive as the first line of a function. For example, take a look at the
    following code snippet:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中简要讨论了严格模式。当你启用严格模式时，JavaScript不再接受代码中的语法错误。严格模式不会悄悄失败，而是会将这些失败抛出错误。它还可以帮助你将错误转换为实际的错误。有两种强制使用严格模式的方法。如果你想要整个脚本都使用严格模式，你可以在JavaScript程序的第一行添加`use
    strict`语句（带引号）。如果你想要特定函数符合严格模式，你可以将指令添加为函数的第一行。例如，看一下以下代码片段：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Runtime exceptions
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时异常
- en: 'These errors appear when you execute the code, try to refer to an `undefined`
    variable, or try to process a `null`. When a runtime exception occurs, any code
    after that particular line, which caused the exception, does not get executed.
    It is essential to correctly handle such exceptional scenarios in the code. While
    exception handling can help prevent crashes, they also aid in debugging. You can
    wrap the code that may encounter a runtime exception into a `try{ }` block. When
    any code inside this block generates a runtime exception, a corresponding handler
    captures it. The handler is defined by a `catch(exception){}` block. Let''s clarify
    this using the following example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行代码时，出现这些错误，尝试引用一个`未定义`的变量，或者尝试处理`null`。当运行时异常发生时，导致异常的特定行之后的任何代码都不会被执行。在代码中正确处理这种异常情况是至关重要的。虽然异常处理可以帮助防止崩溃，但它们也有助于调试。您可以将可能遇到运行时异常的代码包装在`try{
    }`块中。当此块内的任何代码生成运行时异常时，相应的处理程序会捕获它。处理程序由`catch(exception){}`块定义。让我们通过以下示例来澄清这一点：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this example, the `var a = doesnotexist` line tries to assign an `undefined`
    variable, `doesnotexist`, to another variable `a`. This causes a runtime exception.
    When we wrap this problematic code into `try{}catch(){}` block or when the exception
    occurs (or is thrown), the execution stops in the `try{}` block and goes directly
    to the `catch() {}` handler. The catch handler is responsible for handling the
    exceptional scenario. In this case, we are displaying the error message on the
    console for debugging purposes. You can explicitly throw an exception to trigger
    an unhandled scenario in the code. Consider the following example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`var a = doesnotexist`行试图将一个`未定义`的变量`doesnotexist`赋值给另一个变量`a`。这会导致运行时异常。当我们将这个有问题的代码包装在`try{}catch(){}`块中，或者当异常发生（或被抛出）时，执行会在`try{}`块中停止，并直接转到`catch()
    {}`处理程序。捕获处理程序负责处理异常情况。在这种情况下，我们为了调试目的在控制台上显示错误消息。您可以明确地抛出异常来触发代码中未处理的情况。考虑以下的例子：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this example, we are handling valid states of a gear shift: `R`, `N`, and
    `D`; however, when we receive an invalid state, we are explicitly throwing an
    exception clearly stating the reason. When we call the function which we think
    may throw an exception, we will wrap the code in the `try{}` block and attach
    a `catch(){}` handler with it. When the exception is caught by the `catch()` block,
    we will handle the exceptional condition appropriately.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在处理变速器的有效状态：`R`，`N`和`D`；然而，当我们收到无效状态时，我们明确地抛出异常，清楚地说明原因。当我们调用可能引发异常的函数时，我们将在`try{}`块中包装代码，并附加一个带有`catch(){}`的处理程序。当异常被`catch()`块捕获时，我们将适当地处理异常情况。
- en: Console.log and asserts
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Console.log和断言
- en: Displaying the state of execution on console can be very useful while debugging.
    Although, modern developer tools allow you to put breakpoints and halt execution
    to inspect a particular value during runtime. You can quickly detect small issues
    by logging some variable state on the console.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台上显示执行状态在调试时可能非常有用。尽管现代开发工具允许您设置断点并在运行时停止执行以检查特定值，但通过在控制台上记录一些变量状态，您可以快速检测到一些小问题。
- en: With these concepts with us, let's see how we can use Chrome **Developer Tools**
    to debug JavaScript code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些概念，让我们看看如何使用Chrome **开发者工具**来调试JavaScript代码。
- en: Chrome Developer Tools
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chrome开发者工具
- en: 'You can start Chrome **Developer Tools** by clicking **menu** | **More tools**
    | **Developer Tools**. Take a look at the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击**菜单** | **更多工具** | **开发者工具**来启动Chrome **开发者工具**。看一下以下的屏幕截图：
- en: '![Chrome Developer Tools](graphics/image_12_005.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome Developer Tools](graphics/image_12_005.jpg)'
- en: 'Chrome developer tool opens up on the lower pane of your browser and has a
    bunch of very useful sections. Consider the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome开发者工具在浏览器的下方窗格中打开，并且有一堆非常有用的部分。考虑以下的屏幕截图：
- en: '![Chrome Developer Tools](graphics/image_12_006.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome Developer Tools](graphics/image_12_006.jpg)'
- en: The **Elements** panel helps you inspect and monitor the DOM tree and associated
    style sheet for each of these components.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**面板帮助您检查和监视DOM树和每个组件的相关样式表。'
- en: The **Network** panel is useful to understand network activity. For example,
    you can monitor the resources being downloaded over the network in real time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络**面板对于理解网络活动非常有用。例如，您可以实时监视通过网络下载的资源。'
- en: 'The most important pane for us is the **Sources** pane. This pane is where
    the JavaScript and the debugger are displayed. Let''s create a sample HTML with
    the following content:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说最重要的窗格是**Sources**窗格。这个窗格显示了JavaScript和调试器。让我们创建一个包含以下内容的示例HTML：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save this HTML file and open it in Google Chrome. Open **Developer Tools**
    in the browser, and you will see the following screen:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个HTML文件并在Google Chrome中打开它。在浏览器中打开**开发者工具**，您将看到以下屏幕：
- en: '![Chrome Developer Tools](graphics/image_12_007.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome Developer Tools](graphics/image_12_007.jpg)'
- en: This is the view of the **Sources** panel. You can see the HTML and embedded
    JavaScript source in this panel. You can see the **Console** window as well, and
    you can see that the file is executed and the output is displayed on console.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**Sources**面板的视图。您可以在此面板中看到HTML和嵌入的JavaScript源代码。您还可以看到**Console**窗口，并且可以看到文件被执行并且输出显示在控制台上。
- en: 'On the right side, you will see the debugger window, as shown in the following
    screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，您将看到调试器窗口，如下面的屏幕截图所示：
- en: '![Chrome Developer Tools](graphics/image_12_008.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome Developer Tools](graphics/image_12_008.jpg)'
- en: 'In the **Sources** panel, click on the line numbers **8** and **15** to add
    a breakpoint. The breakpoints allow you to stop execution of the script at the
    specified point. Consider the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Sources**面板中，单击行号**8**和**15**以添加断点。断点允许您在指定的位置停止脚本的执行。考虑以下的屏幕截图：
- en: '![Chrome Developer Tools](graphics/5239_12.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome Developer Tools](graphics/5239_12.jpg)'
- en: 'In the debug pane, you can see all existing breakpoints. Take a look at the
    following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试窗格中，您可以看到所有现有的断点。看一下以下的屏幕截图：
- en: '![Chrome Developer Tools](graphics/image_12_010.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome开发者工具](graphics/image_12_010.jpg)'
- en: 'Now, when you rerun the same page, you will see that the execution stops at
    the debug point. Consider the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您重新运行同一个页面时，您会看到执行停在调试点。请看下面的截图：
- en: '![Chrome Developer Tools](graphics/image_12_011.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome开发者工具](graphics/image_12_011.jpg)'
- en: 'This window now has all the action. You can see that the execution is paused
    on line **15**. In the debug window, you can see which breakpoint is being triggered.
    You can also see the **Call Stack** and resume execution in several ways. The
    debug command window has a bunch of actions. Take a look at the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口现在有了所有的操作。您可以看到执行已经暂停在第15行。在调试窗口中，您可以看到触发了哪个断点。您还可以看到**调用堆栈**并以多种方式恢复执行。调试命令窗口有很多操作。看一下下面的截图：
- en: '![Chrome Developer Tools](graphics/image_12_012.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome开发者工具](graphics/image_12_012.jpg)'
- en: 'You can resume execution, which will execute until the next breakpoint, by
    clicking on the following button:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击以下按钮恢复执行，直到下一个断点：
- en: '![Chrome Developer Tools](graphics/image_12_013.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome开发者工具](graphics/image_12_013.jpg)'
- en: 'When you do that, the execution continues until the next breakpoint is encountered.
    In our case, we will halt at line **8**. Consider the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您这样做时，执行会继续，直到遇到下一个断点。在我们的情况下，我们将在第8行停下来。请看下面的截图：
- en: '![Chrome Developer Tools](graphics/image_12_014.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome开发者工具](graphics/image_12_014.jpg)'
- en: You can observe that the **Call Stack** window shows how we arrived at line
    **8**. The **Scope** panel shows the **Local** scope where you can see the variables
    in the scope when the breakpoint was arrived at. You can also Step-Into or Step-over
    the next function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观察到**调用堆栈**窗口显示了我们是如何到达第8行的。**作用域**面板显示了**局部**作用域，在断点到达时您可以看到作用域中的变量。您还可以步进或跳过下一个函数。
- en: There are other very useful mechanisms to debug and profile your code using
    Chrome **Developer Tools**. I would suggest you to experiment with the tool and
    make it a part of your regular development flow.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Chrome开发者工具还有其他非常有用的机制来调试和分析您的代码。我建议您尝试使用这个工具，并将其作为您常规开发流程的一部分。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Both testing and debugging phases are essential to developing robust JavaScript
    code. TDD and BDD are approaches closely associated with the agile methodology
    and is widely embraced by the JavaScript developer community. In this chapter,
    we reviewed best practices around TDD and the usage of Jasmine as the testing
    framework. Additionally, we saw various methods of debugging JavaScript using
    Chrome **Developer Tools**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和调试阶段对于开发健壮的JavaScript代码至关重要。TDD和BDD是与敏捷方法学密切相关的方法，被JavaScript开发者社区广泛接受。在本章中，我们回顾了围绕TDD的最佳实践以及Jasmine作为测试框架的使用。此外，我们还看到了使用Chrome开发者工具调试JavaScript的各种方法。
- en: In the next chapter, we will explore the new and exciting world of ES6, DOM
    Manipulation and cross-browser strategies.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索ES6、DOM操作和跨浏览器策略的新颖世界。
