- en: Chapter 4. Simple Predictive Analytics with NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：使用 NumPy 的简单预测性分析
- en: 'Following the exploration of the meteorological data in the previous chapter,
    we will now try to predict temperature. Usually, weather prediction is accomplished
    with complex models and top-of-the-line supercomputers. Most people don''t have
    access to such resources, so we will cut corners and use simpler models. The list
    of topics covered in this chapter is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章探索了气象数据之后，我们现在将尝试预测温度。 通常，天气预测是通过复杂的模型和顶级的超级计算机来完成的。 大多数人无法访问这些资源，因此我们会偷工减料并使用更简单的模型。
    本章涵盖的主题列表如下：
- en: Autocorrelation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自相关
- en: Autoregressive models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自回归模型
- en: Robust statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠的统计量
- en: Examining autocorrelation of average temperature with pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Pandas 检查平均温度的自相关
- en: The **pandas** (**Python data analysis**) library is just a collection of fancy
    wrappers around NumPy, Matplotlib, and other Python libraries. You can find more
    information including installation instructions on the pandas website at [http://pandas.pydata.org/pandas-docs/stable/install.html](http://pandas.pydata.org/pandas-docs/stable/install.html).
    Most good APIs such as NumPy seem to follow the Unix philosophy—keep it simple
    and do one thing well. This philosophy results in many small tools and utilities
    that can be used as building blocks for something bigger. The pandas library mimics
    the R programming language in its approach.
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pandas**（**Python 数据分析**）库只是 NumPy，Matplotlib， 和其他 Python 库。 您可以在位于[`pandas.pydata.org/pandas-docs/stable/install.html`](http://pandas.pydata.org/pandas-docs/stable/install.html)的 Pandas
    网站上找到更多信息，包括安装说明。 大多数良好的
    API（例如 NumPy）似乎都遵循 Unix 的哲学——保持简单并做一件事。 这种理念产生了许多小型工具和工具，这些工具可以用作更大对象的构建块。 Pandas
    库在其方法中模仿 R 编程语言。'
- en: The pandas library has plotting subroutines, which can plot lag and autocorrelation
    plots. Autocorrelation is correlation within a dataset and can be indicative of
    a trend. For instance, if we have a lag of one day, we can see if the average
    temperature of yesterday influences the temperature today. For that to be the
    case, the autocorrelation value needs to be relatively high.
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 库具有绘图子例程，可以绘制滞后图和自相关图。 自相关是数据集中的相关性，可以指示趋势。 例如，如果我们有一天的延迟，我们可以查看昨天的平均温度是否会影响今天的温度。
    对于这种情况，自相关值需要相对较高。
- en: Pandas can also be used to resample data. Let's now learn how to resample the
    daily average temperature of the De Bilt data to give us annual averages.
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 也可以用于重新采样数据。 现在让我们学习如何对德比尔特数据的每日平均温度进行重新采样以得出年度平均值。
- en: 'In the following code snippets, `pd` refers to the imported pandas module.
    We will skip the imports and loading of data (for more details, see the `pandas_plots.py`
    file in the `Chapter04` folder of this book''s code bundle). Let us now plot lagged
    data with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码段中，`pd`是指导入的 Pandas 模块。 我们将跳过数据的导入和加载（有关更多详细信息，请参见本书代码包的`Chapter04`文件夹中的`pandas_plots.py`文件）。
    现在，让我们借助以下步骤来绘制滞后数据：
- en: 'Create a `DatetimeIndex` object from a list of dates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从日期列表中创建`DatetimeIndex`对象：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a pandas `Series` array, which is a time series array. We have to multiply
    the temperatures by 0.1 because of the way temperatures are written down in the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Pandas`Series`数组，这是一个时间序列数组。 由于文件中记录温度的方式，我们必须将温度乘以 0.1：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Graph the lag plot as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制滞后图，如下所示：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following lag plot is obtained, in which the next value `y(t+1)` in the
    time series is plotted against the previous value `y(t)`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 获得以下滞后图，其中将时间序列中的下一个值`y(t+1)`相对于前一个值`y(t)`进行了绘制：
- en: '![Examining autocorrelation of average temperature with pandas](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Pandas 检查平均温度的自相关](img/00024.jpeg)'
- en: 'Plot the autocorrelation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制自相关如下：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This could result in the following chart:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会导致以下图表：
- en: '![Examining autocorrelation of average temperature with pandas](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Pandas 检查平均温度的自相关](img/00025.jpeg)'
- en: As you can see, the autocorrelation goes down with greater lag. This is important
    to remember for later.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，自相关下降的延迟更大。 这一点很重要，以后需要记住。
- en: 'Resample to annual (denoted by `''A''`) averages, and plot the resampled data
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新采样为年度平均值（用`A`表示），并按以下方式绘制重新采样的数据：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The resampled plot is shown as follows with the year against the average temperature:'
  prefs: []
  type: TYPE_NORMAL
  zh: 重新采样的图显示如下，其中年份与平均温度相对应：
- en: '![Examining autocorrelation of average temperature with pandas](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Pandas 检查平均温度的自相关](img/00026.jpeg)'
- en: You would have noticed that we did the same resampling in the previous chapter
    with plain NumPy, and it was a bit more work.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，我们在上一章中使用纯 NumPy 进行了相同的重采样，这还需要更多工作。
- en: Describing data with pandas DataFrames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 pandas 数据帧描述数据
- en: 'Luckily, pandas has descriptive statistics utilities. We will read the average
    wind speed, temperature, and pressure values from the KNMI De Bilt data file into
    a pandas DataFrame. This object is similar to the R dataframe, which is like a
    data table in a spreadsheet or a database. The columns are labeled, the data can
    be indexed, and you can run computations on the data. We will then print out descriptive
    statistics and a correlation matrix as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Pandas 具有描述性的统计工具。 我们将从 KNMI 德比尔特数据文件中读取平均风速，温度和压力值到 Pandas 数据帧中。 该对象类似于
    R 数据框，它类似于电子表格或数据库中的数据表。 列被标记，可以为数据建立索引，并且您可以对数据进行计算。 然后，我们将打印出描述性统计数据和相关矩阵，如以下步骤所示：
- en: 'Read the CSV file with the pandas `read_csv` function. This function works
    in a similar fashion to the NumPy `load_txt` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Pandas `read_csv`函数读取 CSV 文件。 此函数的工作方式类似于 NumPy `load_txt`函数：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Print the descriptive statistics with the functions described in the following
    table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下表中描述的函数打印描述性统计量：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `head` | This is similar to the `head` Unix command and selects the first
    records of the `DataFrame` |'
  prefs: []
  type: TYPE_TB
  zh: '| `head` | 这类似于`head` Unix 命令，并选择`DataFrame`的第一条记录。 |'
- en: '| `tail` | This is similar to the `tail` Unix command and selects the last
    records of the `DataFrame` |'
  prefs: []
  type: TYPE_TB
  zh: '| `tail` | 这类似于`tail` Unix 命令，并选择`DataFrame`的最后一条记录 |'
- en: '| `describe` | This computes some predefined descriptive statistics |'
  prefs: []
  type: TYPE_TB
  zh: '| `describe` | 这将计算一些预定义的描述性统计信息 |'
- en: '| `corr` | This calculates the correlation matrix |'
  prefs: []
  type: TYPE_TB
  zh: '| `corr` | 计算相关矩阵 |'
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Describing data with pandas DataFrames](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Pandas 数据帧描述数据](img/00027.jpeg)'
- en: Correlating weather and stocks with pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Pandas 将天气和股价相关联
- en: 'We will try to correlate stock market data for the Netherlands with the DataFrame
    we produced last time from the KNMI De Bilt weather data. As a proxy for the stock
    market, we will use closing prices of the EWN ETF. This might not be the best
    choice, by the way, so if you have a better idea, please use the appropriate stock
    ticker. The steps for this exercise are provided as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试将荷兰的股票市场数据与我们上一次根据 KNMI De Bilt 气象数据生成的数据框进行关联。 作为股票市场的代理，我们将使用 EWN ETF
    的收盘价。 顺便说一句，这可能不是最佳选择，因此，如果您有更好的主意，请使用适当的股票报价器。 此练习的步骤如下：
- en: 'Download the EWN data from Yahoo Finance, with a special function. The code
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从雅虎财经下载具有特殊特征的 EWN 数据。 代码如下：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a `DataFrame` object with the available dates in the downloaded data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下载的数据中的可用日期创建一个`DataFrame`对象：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Join the new `DataFrame` object with `DataFrame` of the weather data. We will
    then obtain the correlation matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的数据帧对象与天气数据的数据帧结合在一起。 然后，我们将获得相关矩阵：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The correlation matrix is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 相关矩阵如下：
- en: '![Correlating weather and stocks with pandas](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Pandas 将天气和股价相关联](img/00028.jpeg)'
- en: As you can observe, the correlation between stock price and weather parameters
    is quite weak.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，股价与天气参数之间的相关性非常弱。
- en: Predicting temperature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预测温度
- en: Temperature is a thermodynamic variable, which quantifies being hot or cold.
    To predict temperature, we can apply our knowledge of thermodynamics and meteorology.
    This in general would result in the creation of complex weather models with a
    multitude of inputs. However, this is beyond the scope of this book, so we will
    try to keep our continuing example simple and manageable.
  prefs: []
  type: TYPE_NORMAL
  zh: 温度是热力学变量，量化为热还是冷。 为了预测温度，我们可以运用热力学和气象学的知识。 通常，这将导致创建具有大量输入的复杂天气模型。 但是，这超出了本书的范围，因此我们将尝试使我们继续的示例保持简单和可管理。
- en: Autoregressive model with lag 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滞后为 1 的自回归模型
- en: 'What will the temperature be tomorrow? Probably, the same as today but a bit
    different. We can assume that temperature is a function of the temperature of
    the preceding day. This can be justified with the autocorrelation plot that we
    created earlier. To keep it simple, we will assume further that the function is
    a polynomial. We will define a cutoff point to be used for the fit. Ninety percent
    of the data should be used for that purpose. Let''s model this idea with NumPy:'
  prefs: []
  type: TYPE_NORMAL
  zh: 明天的温度是多少？ 可能与今天相同，但有所不同。 我们可以假设温度是前一天温度的函数。 这可以通过我们之前创建的自相关图来证明。 为简单起见，我们将进一步假设该函数是多项式。
    我们将定义一个用于拟合的截止点。 应将 90% 的数据用于此目的。 让我们用 NumPy 为这个想法建模：
- en: 'Fit the data to polynomials of different degrees with the `polyfit` function
    as shown in the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`polyfit`函数将数据拟合为不同次数的多项式，如以下代码行所示：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Compute values based on the polynomial obtained in the previous step. Here,
    we use the remaining 10 percent of the data. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据上一步获得的多项式计算值。 在这里，我们使用剩余的 10% 的数据。 代码如下：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Calculate the absolute difference between the actual temperature and the predicted
    temperatures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算实际温度和预测温度之间的绝对差：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For each polynomial fit, the calculated percentage of deltas is within 1, 2,
    or 3 degrees Celsius error range, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个多项式拟合，计算出的增量百分比在 1、2 或 3 摄氏度误差范围内，如以下屏幕截图所示：
- en: '![Autoregressive model with lag 1](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![滞后为 1 的自回归模型](img/00029.jpeg)'
- en: As you can see, higher order polynomials give almost the same accuracy as the
    first-degree polynomial.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，高阶多项式的精度几乎与一阶多项式相同。
- en: Autoregressive model with lag 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滞后为 2 的自回归模型
- en: 'Looking back two days, in theory, could make our model more accurate. Although,
    this is not guaranteed since the autocorrelation associated with lag 2 is not
    that strong. In NumPy, we have several ways to set up the model. Here I chose
    to do it with the `lstsq` function. We assume some kind of linear combination
    for the lag 1 and lag 2 components, and then apply linear regression. The method
    can be extended for a longer look-back period, but it probably is enough to stick
    to lag 2 for now. The steps for this exercise are provided as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 从理论上回顾两天，可以使我们的模型更准确。 但是，由于与滞后为 2 相关的自相关不是那么强，因此无法保证。 在 NumPy 中，我们有几种方法来建立模型。
    在这里，我选择使用`lstsq`函数来执行此操作。 我们对滞后为 1 和滞后为 2 分量假定某种线性组合，然后应用线性回归。 该方法可以延长较长的回溯期，但现在暂时可以滞后
    2。 此练习的步骤如下：
- en: 'Set up a matrix `A`, and put in it the values for lags 2 and 1 up to the cutoff
    point. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个矩阵`A`，并在其中输入滞后为 2 和 1 直到截止点的值。 代码如下：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a vector `b` with the values we want to fit to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们要拟合的值创建向量`b`：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Solve the equation *Ax = b*. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 求解方程`Ax = b`。 代码如下：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The coefficients for lags 1 and 2 are printed as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 滞后为 1 和滞后为 2 的系数打印如下：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Predict values above the cutoff point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预测高于临界点的值：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Calculate the absolute errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算绝对误差：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Plot a histogram of the absolute errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制绝对误差的直方图：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The histogram for the absolute error is given as follows (refer to the `lag2.py`
    file in the `Chapter04` folder of this book''s code bundle):'
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对误差的直方图如下所示（请参考本书代码包`Chapter04`文件夹中的`lag2.py`文件）：
- en: '![Autoregressive model with lag 2](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![滞后为 2 的自回归模型](img/00030.jpeg)'
- en: Analyzing intra-year daily average temperatures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析年内每日平均温度
- en: 'We are going to have a look at the temperature variation within a year by converting
    dates to the corresponding day of the year in numbers. This number is between
    1 and 366, where 1 corresponds to January 1st and 365 (or 366) corresponds to
    December 31st. Perform the following steps to analyze the intra-year daily average
    temperature:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过将日期转换为数字来表示年的对应天，从而来查看一年内的温度变化。 此数字介于 1 和 366 之间，其中 1 对应于 1 月 1 日，而 365（或
    366）对应于 12 月 31 日。 执行以下步骤来分析年内日平均温度：
- en: 'Initialize arrays for the range 1-366 with averages initialized to `zeros`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化范围为 1-366 的数组，将平均值初始化为`zeros`：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Calculate averages by the day of the year before and after a cutoff point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在截止点之前和之后的一年中的一天之前计算平均值：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Fit the averages before the cutoff point to a quadratic polynomial (just a
    first-order approximation):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将截止点之前的平均值拟合为二次多项式（仅是一阶近似值）：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following polynomial coefficients in descending power are printed:'
  prefs: []
  type: TYPE_NORMAL
  zh: 打印以下幂次幂的多项式系数：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Plot the average after the cutoff point, and display a fit using the polynomial
    we obtained:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制截止点之后的平均值，并使用我们获得的多项式显示拟合：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see in the following plot, the fit is pretty good but not perfect.
    In the middle of the year, as you can observe around summer, we have peak temperatures.
    In January and December, the temperature hits bottom.
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在下图中所看到的，拟合度很好，但并不完美。 正如您在夏天前后所观察到的那样，在年中，我们的气温最高。 一月和十二月，温度达到最低点。
- en: '![Analyzing intra-year daily average temperatures](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![分析年内每日平均温度](img/00031.jpeg)'
- en: Introducing the day-of-the-year temperature model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 年度温度模型简介
- en: 'Continuing with the work we did in the previous example, I would like to propose
    a new model, where temperature is a function of the day of the year (between 1
    and 366). Of course, this model is not complete, but can be used as a component
    in a more advanced model, which should take into account the previous autoregressive
    model that we did with lag 2\. The procedure for this model is illustrated as
    follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 继续与我们在上一个示例中所做的工作一起，我想提出一个新模型，其中温度是一年中某一天（介于 1 和 366 之间）的的函数。 当然，该模型并不完整，但是可以用作更高级模型的组成部分，该模型应考虑我们对滞后
    2 所做的先前自回归模型。该模型的过程如下所示：
- en: 'Fit the temperature data before the cutoff point to a quadratic polynomial
    just as in the previous section but without averaging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如上一节所述，将截止点之前的温度数据拟合为二次多项式，但不求平均值：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Believe it or not, we get the same polynomial coefficients we got earlier:'
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，我们得到了与之前相同的多项式系数：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Calculate the absolute difference between the predicted and actual values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算预测值与实际值之间的绝对差：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Plot a histogram of the absolute error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制绝对误差的直方图：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Refer to the following plot. It seems that we got a better result with the autoregressive
    model.
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考下图。 似乎我们用自回归模型得到了更好的结果。
- en: '![Introducing the day-of-the-year temperature model](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![年度温度模型简介](img/00032.jpeg)'
- en: Modeling temperature with the SciPy leastsq function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SciPy `leastsq`函数建模温度
- en: 'So, now we have two ideas: either the temperature today depends on the temperature
    yesterday and the day before yesterday, and we assume that some kind of linear
    combination is formed, or the temperature depends on a day of the year (between
    1 and 366). We can combine these ideas, but then the question is how. It seems
    that we could have a multiplicative model or an additive model.'
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们有两个想法：或者今天的温度取决于昨天和前天的温度，并且我们假设某种线性组合形成了，或者温度取决于一年中的一天（介于 1 到 366 之间）。
    我们可以结合这些想法，但是问题是如何实现的。 看来我们可以有一个乘法模型或一个加法模型。
- en: 'Let''s choose the additive model since it seems simpler. This means that we
    assume that temperature is the sum of the autoregressive component and a cyclical
    component. It''s easy to write this down into one equation. We will use the SciPy
    `leastsq` function to minimize the square of the error of this equation. The procedure
    for this model is illustrated as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择加性模型，因为它看起来更简单。 这意味着我们假设温度是自回归成分和循环成分的总和。 将其写成一个方程式很容易。 我们将使用 SciPy `leastsq`函数来最小化此方程式误差的平方。
    该模型的过程如下所示：
- en: 'Define a function that computes the error of our model. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个计算模型误差的函数。 代码如下：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Give an initial guess for all the parameters in our equation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对方程中的所有参数进行初步猜测：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The values here come from the previous programs, but in principle you could
    use other values as long as the solution converges sufficiently fast.
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的值来自以前的程序，但是原则上您可以使用其他值，只要解决方案收敛得足够快即可。
- en: 'Apply the `leastsq` function as shown in the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下代码行所示，应用`leastsq`函数：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The final parameters of the model are printed as follows. It looks like all
    parameters except the first one have decreased in absolute size. I don't know
    if that's coincidental, but as far as I know, the order of the parameters shouldn't
    matter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型的最终参数如下打印。 看起来除第一个参数外的所有参数的绝对大小都已减小。 我不知道这是否是偶然的，但据我所知，参数的顺序无关紧要。
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We then calculate the absolute error for the model applied above the cutoff
    point and plot the histogram of the error. The code is omitted here for the sake
    of brevity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们为在截止点以上应用的模型计算绝对误差，并绘制误差的直方图。 为了简洁起见，此处省略了该代码。
- en: Refer to the following plot. The accuracy of the model doesn't seem to be better
    than the simple autoregressive model with lag 2.
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考下图。 该模型的准确性似乎并不比具有滞后为 2 的简单自回归模型更好。
- en: '![Modeling temperature with the SciPy leastsq function](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SciPy `leastsq`函数建模温度](img/00033.jpeg)'
- en: Day-of-year temperature take two
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选取一年中的两个日期的温度
- en: 'The quadratic polynomial approximation for the day-of-the-year temperature
    fit can be improved upon. We haven''t used any of the NumPy trigonometric functions
    until now. Those should be a good fit for this problem. So, let''s try a trigonometric
    function and fit again using a function from the `scipy.optimize` module (`leastsq`
    to be precise) as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 可以提高和逐年温度拟合的二次多项式近似。 到目前为止，我们尚未使用任何 NumPy 三角函数。 这些应该很适合这个问题。 因此，让我们尝试使用三角函数并再次使用`scipy.optimize`模块（准确地说是`leastsq`）中的函数进行拟合，如下所示：
- en: 'Set up a simple `model` function and an `error` function to be minimized, as
    shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个简单的`model`函数和一个要最小化的`error`函数，如以下代码片段所示：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Give the initial guess and fit the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出初步猜测并拟合数据：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We get the following parameters:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下参数：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Here, -2 *pi* over 365 is equal to the third parameter. I believe that the first
    parameter is equal to the average of all the temperatures, and we can come up
    with similar explanations for the other parameters. Calculate averages for each
    day of the year and plot averages and fitted values. We have done this before,
    so this part of the code is omitted.
  prefs: []
  type: TYPE_NORMAL
  zh: 此处，在 365 上的`-2pi`等于第三参数。 我相信第一个参数等于所有温度的平均值，我们可以对其他参数得出类似的解释。 计算一年中每一天的平均值，并绘制平均值和拟合值。
    我们之前已经做过，因此省略了这部分代码。
- en: 'We get the fit in the following chart:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在下图中得到拟合：
- en: '![Day-of-year temperature take two](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![选取一年中的两个日期的温度](img/00034.jpeg)'
- en: Moving-average temperature model with lag 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滞后为 1 的移动平均温度模型
- en: 'The moving average model of a time series represents the data as oscillations
    around the mean of the data. It is assumed that the lag components are white noise
    (not a politically incorrect term as far as I know), which forms a linear combination.
    We will again use the `leastsq` function to fit a model:'
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列的移动平均模型将数据表示为围绕数据均值的振荡。 假定滞后分量是白噪声（据我所知，这不是一个政治上不正确的术语），它形成线性组合。 我们将再次使用`leastsq`函数来拟合模型：
- en: 'We will start off with a simple moving-average model. It has only one lag component
    and therefore only one coefficient. The code snippet is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从一个简单的移动平均模型开始。 它只有一个滞后分量，因此只有一个系数。 代码段如下：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Call the `leastsq` function. Here, we subtract the mean from the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`leastsq`函数。 在这里，我们从数据中减去平均值：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The program prints the following parameter:'
  prefs: []
  type: TYPE_NORMAL
  zh: 程序打印以下参数：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We get the following plot for the absolute error histogram, which is comparable
    to the autoregressive model results:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下绝对误差直方图图，该图可与自回归模型结果进行比较：
- en: '![Moving-average temperature model with lag 1](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![滞后为 1 的移动平均温度模型](img/00035.jpeg)'
- en: The Autoregressive Moving Average temperature model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自回归移动平均温度模型
- en: 'The **Autoregressive Moving Average** (**ARMA**) model mixes the **Autoregressive**
    (**AR**) and **Moving Average** (**MA**) models. We have already discussed both
    models. Informally, we can say that we have the autoregressive component with
    white noise around it. Part of this white noise can be modeled as a linear combination
    of lag components plus some constant as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '**自回归移动平均值**（**ARMA**）模型混合了**自回归**（**AR**）和**移动平均线**（**MA**） 楷模。 我们已经讨论了这两种模型。
    非正式地说，我们可以说自回归分量周围带有白噪声。 可以将这种白噪声的一部分建模为滞后分量加上一些常数的线性组合，如下所示：'
- en: 'Define an autoregressive model with lag 2 using linear coefficients we obtained
    with a previous script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们从上一个脚本获得的线性系数，定义滞后为 2 的自回归模型：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Define the moving average model with lag 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义滞后为 1 的移动平均模型：
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Subtract the autoregressive model values from the data, giving us the error
    terms (white noise):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据中减去自回归模型值，得出误差项（白噪声）：
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Most of the code for this model should appear familiar to you as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型的大多数代码对您来说应该看起来很熟悉，如以下代码所示：
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output of the script is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的输出如下：
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The time-dependent temperature mean adjusted autoregressive model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时变温度均值的调整自回归模型
- en: 'It''s a mouthful, but it''s not nearly as complicated as it sounds. Let''s
    parse the title in the following points:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个大嘴巴，但听起来并不像那样复杂。 让我们在以下几点分析标题：
- en: As we found out, the average temperature for each day of the year seems to fit
    an annual cycle. It may have to do with the rotation of the Earth around the Sun.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们发现，一年中每一天的平均温度似乎都符合一年的周期。 这可能与地球绕太阳旋转有关。
- en: There appears to be a trend of increasing temperature. Some have called that
    global warming and blame industry and human beings in general for it. Without
    getting into a political discussion, let's assume that there is truth in this
    claim. Further, let's assume for now that this trend depends on the year. I know
    I will get into trouble for this, but let's also assume for now that the relation
    is based on a first-degree polynomial (a straight line).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 似乎有温度升高的趋势。 有人称其为全球变暖和怪罪行业以及人类。 在不进行政治讨论的情况下，我们假定此主张中存在真理。 此外，让我们现在假设这种趋势取决于年份。
    我知道我会为此感到麻烦，但现在我们也假设该关系基于一次多项式（一条直线）。
- en: For the sake of argument, let's claim that the previous two points together
    form a time-dependent mean. We will model what is left over as a linear combination
    of autoregressive lag components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了争辩，让我们声明前两点共同构成一个时间相关的均值。 我们将剩余的东西建模为自回归滞后分量的线性组合。
- en: 'We need to perform the following steps to set up and create the model:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行以下步骤来建立和创建模型：
- en: Create arrays for the day of the year, years, and temperature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为年份，年份和温度创建数组。
- en: Average the temperature for each day of the year.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平均一年中每一天的温度。
- en: Subtract the day-of-the-year average values from the values in the previous
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一步中的值中减去当日平均值。
- en: Fit the remainder to a straight line and subtract the fit from the remainder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将余数拟合为一条直线，然后从余数中减去拟合值。
- en: Do a least squares fit to an autoregressive model with lag 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对滞后为 2 的自回归模型进行最小二乘拟合。
- en: Predict the temperature according to this model and plot the absolute error.
  prefs: []
  type: TYPE_NORMAL
  zh: 根据该模型预测温度并绘制绝对误差图。
- en: 'The code is straightforward and given as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码很简单，给出如下：
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following output is printed:'
  prefs: []
  type: TYPE_NORMAL
  zh: 打印以下输出：
- en: '![The time-dependent temperature mean adjusted autoregressive model](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![时变温度均值的调整自回归模型](img/00036.jpeg)'
- en: Outliers analysis of average De Bilt temperature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 德比尔特平均温度的异常值分析
- en: 'Outliers are values in a dataset that are to be considered extreme. Outliers
    can be caused by measurement or other types of errors, or they could be caused
    by a natural phenomenon. There are several definitions for outliers. In this example,
    we will be using the definition for mild outliers. This definition depends on
    the position of the first and the third quartiles. A quarter and three quarters
    of the items in the dataset are smaller than the first and third quartile values,
    respectively. The difference between these specific quartiles is called the **inter-quartile
    range**. It''s a robust measure for dispersion similar to standard deviation.
    Mild outliers are defined to be 1.5 inter-quartile ranges away from either the
    first or third quartile. We can study the temperature outliers as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 离群值是数据集中的值，被认为是极值。 离群值可能是由测量或其他类型的错误引起的，也可能是由自然现象引起的。 离群值有几种定义。 在此示例中，我们将使用使用轻微异常值的定义。
    此定义取决于第一和第三四分位数的位置。 数据集中项目的四分之一和四分之三分别小于第一和第三四分位数的值。 这些特定四分位数之间的差异称为**四分位数间距**。
    这是一种类似于标准差的强大色散测量方法。 轻度离群值的定义是与第一个或第三个四分位数相差 1.5 个四分位数。 我们可以如下研究温度异常值：
- en: 'Find the first quartile with a function from SciPy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 SciPy 的函数查找第一个四分位数：
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Find the third quartile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到第三个四分位数：
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Find the indices of the mild outliers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找温和异常值的下标：
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Plot the differences of the indices (showing clustering) and the outliers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制索引（显示聚类）和离群值的差异：
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The following NumPy code analyzes outliers and tries to find out whether any
    clustering of outliers occurs:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 NumPy 代码分析异常值，并尝试找出是否发生异常值的聚类：
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'It becomes clear that the outliers are on the colder side as shown in the following
    output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，离群值位于较冷的一侧，如以下输出所示：
- en: '![Outliers analysis of average De Bilt temperature](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![德比尔特平均温度的异常值分析](img/00037.jpeg)'
- en: 'The following plot shows some clustering, but no regular pattern as far as
    I can see:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一些聚类，但据我所知没有规则的模式：
- en: '![Outliers analysis of average De Bilt temperature](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![德比尔特平均温度的异常值分析](img/00038.jpeg)'
- en: Using more robust statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用更强大的统计量
- en: 'We can make our code from the *The time-dependent temperature mean adjusted
    autoregressive model* section more robust by doing the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下操作，使来自“时间相关的温度均值的调整的自回归模型”部分的代码更可靠：
- en: Computing the median instead of the mean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算中位数而不是平均值
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Ignoring the outliers with a masked array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用遮罩数组忽略异常值
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We get slightly different output with the modified code, with about 70 percent
    of the values predicted having an absolute error of less than 2 degrees Celsius:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用修改后的代码，我们得到的输出会略有不同，预测值的大约 70% 的绝对误差小于 2 摄氏度：
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned several simple techniques to predict temperature.
    Of course, they are not at the level of meteorologists who have access to supercomputers
    and can apply complex equations. But we did come pretty far with our simple approach.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了几种简单的温度预测技术。 当然，他们还不具备可以使用超级计算机并可以应用复杂方程式的气象学家水平。 但是我们的简单方法确实取得了很大的进步。
- en: In the next chapter, we will switch to different datasets. The next chapter
    will focus on signal processing techniques.
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将切换到不同的数据集。 下一章将重点介绍信号处理技术。
