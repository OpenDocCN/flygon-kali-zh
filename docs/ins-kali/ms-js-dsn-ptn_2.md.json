["```js\n **#!/usr/bin/ruby** \n\n **puts \"hello world\"** \n\n```", "```js\n **#!/usr/local/bin/node** \n\n **console.log(\"Hello world\")** \n\n```", "```js\n> var words = \"hello world\"\n> console.log(window.words);\n```", "```js\nvar numberOne = new Number(1);\nvar numberTwo = 2;\ntypeof numberOne; //returns 'object'\ntypeof numberTwo; //returns 'number'\nvar numberThree = numberOne + numberTwo;\ntypeof numberThree; //returns 'number'\n```", "```js\nvar objectOne = {};\ntypeof objectOne; //returns 'object'\nvar objectTwo = new Object();\ntypeof objectTwo; //returns 'object'\n```", "```js\nvar objectOne = { value: 7 };\nvar objectTwo = {};\nobjectTwo.value = 7;\n```", "```js\nvar functionObject = {};\nfunctionObject.doThings = function() {\n  console.log(\"hello world\");\n}\nfunctionObject.doThings(); //writes \"hello world\" to the console\n```", "```js\nvar functionObject = {\n  doThings: function() {\n    console.log(\"hello world\");\n  }\n}\nfunctionObject.doThings();//writes \"hello world\" to the console\n```", "```js\nvar functionObject = {\n  greeting: \"hello world\",\n  doThings: function() {\n    console.log(this.greeting);\n  }\n}\nfunctionObject.doThings();//prints hello world\n```", "```js\nvar functionObject = {\n  greeting: \"hello world\",\n  doThings: function() {\n    console.log(this.greeting);\n    this.doOtherThings();\n  },\n  doOtherThings: function() {\n    console.log(this.greeting.split(\"\").reverse().join(\"\"));\n  }\n}\nfunctionObject.doThings();//prints hello world then dlrow olleh\n```", "```js\nvar target = document.getElementById(\"someId\");\ntarget.addEventListener(\"click\", function() {\n  console.log(this);\n}, false);\n```", "```js\nfor(var varScoped =0; varScoped <10; varScoped++)\n{\n  console.log(varScoped);\n}\nconsole.log(varScoped +10);\nfor(let letScoped =0; letScoped<10; letScoped++)\n{\n  console.log(letScoped);\n}\nconsole.log(letScoped+10);\n```", "```js\nlet obj = new functionObject();\nTypeError: object is not a function\n  at repl:1:11\n  at REPLServer.self.eval (repl.js:110:21)\n  at repl.js:249:20\n  at REPLServer.self.eval (repl.js:122:7)\n  at Interface.<anonymous> (repl.js:239:12)\n  at Interface.EventEmitter.emit (events.js:95:17)\n  at Interface._onLine (readline.js:202:10)\n  at Interface._line (readline.js:531:8)\n  at Interface._ttyWrite (readline.js:760:14)\n  at ReadStream.onkeypress (readline.js:99:10)\n```", "```js\nlet ThingDoer = function(){\n  this.greeting = \"hello world\";\n  this.doThings = function() {\n    console.log(this.greeting);\n    this.doOtherThings();\n  };\n  this.doOtherThings = function() {\n    console.log(this.greeting.split(\"\").reverse().join(\"\"));\n  };\n}\nlet instance = new ThingDoer();\ninstance.doThings(); //prints hello world then dlrow olleh\n```", "```js\nlet ThingDoer = function(greeting){\n  this.greeting = greeting;\n  this.doThings = function() {\n    console.log(this.greeting);\n  };\n}\nlet instance = new ThingDoer(\"hello universe\");\ninstance.doThings();\n```", "```js\nlet Castle = function(name){\n  this.name = name;\n  this.build = function() {\n    console.log(this.name);\n  };\n}\nlet instance1 = new Castle(\"Winterfell\");\nlet instance2 = new Castle(\"Harrenhall\");\ninstance1.build = function(){ console.log(\"Moat Cailin\");}\ninstance1.build(); //prints \"Moat Cailin\"\ninstance2.build(); //prints \"Harrenhall\" to the console\n```", "```js\nlet thing = { a: 7};\nconsole.log(thing[\"a\"]);\n```", "```js\nlet Castle = function(name){\n  this.name = name;\n}\nCastle.prototype.build = function(){ console.log(this.name);}\nlet instance1 = new Castle(\"Winterfell\");\ninstance1.build();\n```", "```js\nlet Castle = function(name){\n  this.name = name;\n}\nCastle.prototype.build = function(){\n  console.log(this.name);\n}\nlet instance1 = new Castle(\"Winterfell\");\nCastle.prototype.build = function(){\n  console.log(this.name.replace(\"Winterfell\", \"Moat Cailin\"));\n}\ninstance1.build();//prints \"Moat Cailin\" to the console\n```", "```js\nObject.create(prototype [, propertiesObject ] )\n```", "```js\nlet instance3 = Object.create(Castle.prototype, {name: { value: \"Winterfell\", writable: false}});\ninstance3.build();\ninstance3.name=\"Highgarden\";\ninstance3.build();\n```", "```js\nWinterfell\nWinterfell\n```", "```js\nlet Castle = function(){};\nCastle.prototype.build = function(){console.log(\"Castle built\");}\n\nlet Winterfell = function(){};\nWinterfell.prototype.build = Castle.prototype.build;\nWinterfell.prototype.addGodsWood = function(){}\nlet winterfell = new Winterfell();\nwinterfell.build(); //prints \"Castle built\" to the console\n```", "```js\nfunction clone(source, destination) {\n  for(var attr in source.prototype){ destination.prototype[attr] = source.prototype[attr];}\n}\n```", "```js\nlet Castle = function(){};\nCastle.prototype.build = function(){console.log(\"Castle built\");}\n\nlet Winterfell = function(){};\nclone(Castle, Winterfell);\nlet winterfell = new Winterfell();\nwinterfell.build();\n```", "```js\nWesteros = {}\n```", "```js\nWesteros = Westeros || {}\n```", "```js\nlet Westeros = Westeros || {};\nWesteros.Castle = function(name){this.name = name}; //constructor\nWesteros.Castle.prototype.Build = function(){console.log(\"Castle built: \" +  this.name)};\n```", "```js\nlet Westeros = Westeros || {};\nWesteros.Structures = Westeros.Structures || {};\nWesteros.Structures.Castle = function(name){ this.name = name}; //constructor\nWesteros.Structures.Castle.prototype.Build = function(){console.log(\"Castle built: \" +  this.name)};\n```", "```js\nlet winterfell = new Westeros.Structures.Castle(\"Winterfell\");\nwinterfell.Build();\n```", "```js\nlet Castle = (function () {\n  function Castle(name) {\n    this.name = name;\n  }\n  Castle.prototype.Build = function () {\n    console.log(\"Castle built: \" + this.name);\n  };\n  return Castle;\n})();\nWestros.Structures.Castle = Castle;\n```", "```js\nlet winterfell = new Westeros.Structures.Castle(\"Winterfell\");\nwinterfell.Build();\n```", "```js\nlet BaseStructure = (function () {\n  function BaseStructure() {\n  }\n  return BaseStructure;\n})();\nStructures.BaseStructure = BaseStructure;\nlet Castle = (function (_super) {\n  **__extends(Castle, _super);** \n\n  function Castle(name) {\n    this.name = name;\n    _super.call(this);\n  }\n  Castle.prototype.Build = function () {\n    console.log(\"Castle built: \" + this.name);\n  };\n  return Castle;\n})(BaseStructure);\n```", "```js\nlet __extends = this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() { this.constructor = d; }\n  __.prototype = b.prototype;\n  d.prototype = new __();\n};\n```", "```js\nvar Westeros;\n(function (Westeros) {\n  (function (Structures) {\n    let Castle = (function () {\n      function Castle(name) {\n        this.name = name;\n      }\n       Castle.prototype.Build = function () {\n         console.log(\"Castle built \" + this.name);\n       };\n       return Castle;\n     })();\n     Structures.Castle = Castle;\n  })(Westeros.Structures || (Westeros.Structures = {}));\n  var Structures = Westeros.Structures;\n})(Westeros || (Westeros = {}));\n```", "```js\nvar Westeros;\n(function (Westeros) {\n  (function (Structures) {\n    let Castle = (function () {\n      function Castle(name) {\n        this.name = name;\n      }\n      Castle.prototype.Build = function () {\n        console.log(\"Castle built: \" + this.name);\n        var w = new Wall();\n      };\n      return Castle;\n    })();\n    Structures.Castle = Castle;\n **var Wall = (function () {** \n\n **function Wall() {** \n\n **console.log(\"Wall constructed\");** \n\n **}** \n\n **return Wall;** \n\n **})();** \n\n **Structures.Wall = Wall;** \n\n  })(Westeros.Structures || (Westeros.Structures = {}));\n  var Structures = Westeros.Structures;\n})(Westeros || (Westeros = {}));\n```", "```js\nclass Castle extends Westeros.Structures.BaseStructure {\n  constructor(name, allegience) {\n    super(name);\n    ...\n  }\n  Build() {\n    ...\n    super.Build();\n  }\n}\n```", "```js\nmodule 'Westeros' {\n  export function Rule(rulerName, house) {\n    ...\n    return \"Long live \" + rulerName + \" of house \" + house;\n  }\n}\n```", "```js\nimport westeros from 'Westeros';\nmodule JSON from 'http://json.org/modules/json2.js';\nwesteros.Rule(\"Rob Stark\", \"Stark\");\n```", "```js\nlet Westeros;\n(function (Westeros) {\n  let Ruler = (function () {\n    function Ruler() {\n      this.house = new Westeros.Houses.Targaryen();\n    }\n    return Ruler;\n  })();\n  Westeros.Ruler = Ruler;\n})(Westeros || (Westeros = {}));\n```", "```js\nclass Boxer{\n  function punch(){}\n}\nclass TicketMachine{\n  function punch(){}\n}\n```", "```js\nlet KingJoffery= (function () {\n  function KingJoffery() {\n  }\n  KingJoffery.prototype.makeDecision = function () {\n    \u2026\n  };\n  KingJoffery.prototype.marry = function () {\n    \u2026\n  };\n  return KingJoffery;\n})();\n```", "```js\nlet LordTywin = (function () {\n  function LordTywin() {\n  }\n  LordTywin.prototype.makeDecision = function () {\n  };\n  return LordTywin;\n})();\n```", "```js\nlet LannisterFactory = (function () {\n  function LannisterFactory() {\n  }\n  LannisterFactory.prototype.getKing = function () {\n    return new KingJoffery();\n  };\n  LannisterFactory.prototype.getHandOfTheKing = function ()\n  {\n    return new LordTywin();\n  };\n  return LannisterFactory;\n})();\n```", "```js\nlet TargaryenFactory = (function () {\n  function TargaryenFactory() {\n  }\n  TargaryenFactory.prototype.getKing = function () {\n    return new KingAerys();\n  };\n  TargaryenFactory.prototype.getHandOfTheKing = function () {\n    return new LordConnington();\n  };\n  return TargaryenFactory;\n})();\n```", "```js\nlet CourtSession = (function () {\n  function CourtSession(abstractFactory) {\n    this.abstractFactory = abstractFactory;\n    this.COMPLAINT_THRESHOLD = 10;\n  }\n  CourtSession.prototype.complaintPresented = function (complaint) {\n    if (complaint.severity < this.COMPLAINT_THRESHOLD) {\n      this.abstractFactory.getHandOfTheKing().makeDecision();\n    } else\n    this.abstractFactory.getKing().makeDecision();\n  };\n  return CourtSession;\n})();\n```", "```js\nlet courtSession1 = new CourtSession(new TargaryenFactory());\ncourtSession1.complaintPresented({ severity: 8 });\ncourtSession1.complaintPresented({ severity: 12 });\n\nlet courtSession2 = new CourtSession(new LannisterFactory());\ncourtSession2.complaintPresented({ severity: 8 });\ncourtSession2.complaintPresented({ severity: 12 });\n```", "```js\nlet Event = (function () {\n  function Event(name) {\n    this.name = name;\n  }\n  return Event;\n})();\nWesteros.Event = Event;\n\nlet Prize = (function () {\n  function Prize(name) {\n    this.name = name;\n  }\n  return Prize;\n})();\nWesteros.Prize = Prize;\n\nlet Attendee = (function () {\n  function Attendee(name) {\n    this.name = name;\n  }\n  return Attendee;\n})();\nWesteros.Attendee = Attendee;\n```", "```js\nlet Tournament = (function () {\n  this.Events = [];\n  function Tournament() {\n  }\n  return Tournament;\n})();\nWesteros.Tournament = Tournament;\n```", "```js\nlet LannisterTournamentBuilder = (function () {\n  function LannisterTournamentBuilder() {\n  }\n  LannisterTournamentBuilder.prototype.build = function () {\n    var tournament = new Tournament();\n    tournament.events.push(new Event(\"Joust\"));\n    tournament.events.push(new Event(\"Melee\"));\n    tournament.attendees.push(new Attendee(\"Jamie\"));\n    tournament.prizes.push(new Prize(\"Gold\"));\n    tournament.prizes.push(new Prize(\"More Gold\"));\n    return tournament;\n  };\n  return LannisterTournamentBuilder;\n})();\nWesteros.LannisterTournamentBuilder = LannisterTournamentBuilder;\n\nlet BaratheonTournamentBuilder = (function () {\n  function BaratheonTournamentBuilder() {\n  }\n  BaratheonTournamentBuilder.prototype.build = function () {\n    let tournament = new Tournament();\n    tournament.events.push(new Event(\"Joust\"));\n    tournament.events.push(new Event(\"Melee\"));\n    tournament.attendees.push(new Attendee(\"Stannis\"));\n    tournament.attendees.push(new Attendee(\"Robert\"));\n    return tournament;\n  };\n  return BaratheonTournamentBuilder;\n})();\nWesteros.BaratheonTournamentBuilder = BaratheonTournamentBuilder;\n```", "```js\nlet TournamentBuilder = (function () {\n  function TournamentBuilder() {\n  }\n  TournamentBuilder.prototype.build = function (builder) {\n    return builder.build();\n  };\n  return TournamentBuilder;\n})();\nWesteros.TournamentBuilder = TournamentBuilder;\n```", "```js\nlet WateryGod = (function () {\n  function WateryGod() {\n  }\n  WateryGod.prototype.prayTo = function () {\n  };\n  return WateryGod;\n})();\nReligion.WateryGod = WateryGod;\nlet AncientGods = (function () {\n  function AncientGods() {\n  }\n  AncientGods.prototype.prayTo = function () {\n  };\n  return AncientGods;\n})();\nReligion.AncientGods = AncientGods;\n\nlet DefaultGod = (function () {\n  function DefaultGod() {\n  }\n  DefaultGod.prototype.prayTo = function () {\n  };\n  return DefaultGod;\n})();\nReligion.DefaultGod = DefaultGod;\n```", "```js\nlet GodFactory = (function () {\n  function GodFactory() {\n  }\n  GodFactory.Build = function (godName) {\n    if (godName === \"watery\")\n      return new WateryGod();\n    if (godName === \"ancient\")\n      return new AncientGods();\n    return new DefaultGod();\n  };\n  return GodFactory;\n})();\n```", "```js\nlet GodDeterminant = (function () {\n  function GodDeterminant(religionName, prayerPurpose) {\n    this.religionName = religionName;\n    this.prayerPurpose = prayerPurpose;\n  }\n  return GodDeterminant;\n})();\n```", "```js\nlet Prayer = (function () {\n  function Prayer() {\n  }\n  Prayer.prototype.pray = function (godName) {\n  GodFactory.Build(godName).prayTo();\n  };\n  return Prayer;\n})();\n```", "```js\nlet Westros;\n(function (Westeros) {\n  var Wall = (function () {\n **function Wall() {** \n\n **this.height = 0;** \n\n **if (Wall._instance)** \n\n **return Wall._instance;** \n\n **Wall._instance = this;** \n\n **}** \n\n    Wall.prototype.setHeight = function (height) {\n      this.height = height;\n    };\n    Wall.prototype.getStatus = function () {\n      console.log(\"Wall is \" + this.height + \" meters tall\");\n    };\n **Wall.getInstance = function () {** \n\n **if (!Wall._instance) {** \n\n **Wall._instance = new Wall();** \n\n **}** \n\n **return Wall._instance;** \n\n **};** \n\n    Wall._instance = null;\n    return Wall;\n  })();\n  Westeros.Wall = Wall;\n})(Westeros || (Westeros = {}));\n```", "```js\nfunction clone(source, destination) {\n  for(var attr in source.prototype){\n    destination.prototype[attr] = source.prototype[attr];}\n}\n```", "```js\nvar Westeros;\n(function (Westeros) {\n  (function (Families) {\n    var Lannister = (function () {\n      function Lannister() {\n      }\n      **Lannister.prototype.clone = function () {** \n\n **var clone = new Lannister();** \n\n **for (var attr in this) {** \n\n **clone[attr] = this[attr];** \n\n **}** \n\n **return clone;** \n\n **};** \n\n      return Lannister;\n    })();\n    Families.Lannister = Lannister;\n  })(Westeros.Families || (Westeros.Families = {}));\n  var Families = Westeros.Families;\n})(Westeros || (Westeros = {}));\n```", "```js\nlet jamie = new Westeros.Families.Lannister();\njamie.swordSkills = 9;\njamie.charm = 6;\njamie.wealth = 10;\n\nlet tyrion = jamie.clone();\ntyrion.charm = 10;\n//tyrion.wealth == 10\n//tyrion.swordSkill == 9\n```", "```js\ninterface Ship{\n  SetRudderAngleTo(angle: number);\n  SetSailConfiguration(configuration: SailConfiguration);\n  SetSailAngle(sailId: number, sailAngle: number);\n  GetCurrentBearing(): number;\n  GetCurrentSpeedEstimate(): number;\n  ShiftCrewWeightTo(weightToShift: number, locationId: number);\n}\n```", "```js\ninterface SimpleShip{\n  TurnLeft();\n  TurnRight();\n  GoForward();\n}\n```", "```js\nlet ShipAdapter = (function () {\n  function ShipAdapter() {\n    this._ship = new Ship();\n  }\n  ShipAdapter.prototype.TurnLeft = function () {\n    this._ship.SetRudderAngleTo(-30);\n    this._ship.SetSailAngle(3, 12);\n  };\n  ShipAdapter.prototype.TurnRight = function () {\n    this._ship.SetRudderAngleTo(30);\n    this._ship.SetSailAngle(5, -9);\n  };\n  ShipAdapter.prototype.GoForward = function () {\n    //do something else to the _ship\n  };\n  return ShipAdapter;\n})();\n```", "```js\nvar ship = new ShipAdapter();\nship.GoForward();\nship.TurnLeft();\n```", "```js\nclass OldGods {\n  prayTo(sacrifice) {\n    console.log(\"We Old Gods hear your prayer\");\n  }\n}\nReligion.OldGods = OldGods;\nclass DrownedGod {\n  prayTo(humanSacrifice) {\n    console.log(\"*BUBBLE* GURGLE\");\n  }\n}\nReligion.DrownedGod = DrownedGod;\nclass SevenGods {\n  prayTo(prayerPurpose) {\n    console.log(\"Sorry there are a lot of us, it gets confusing here. Did you pray for something?\");\n  }\n}\nReligion.SevenGods = SevenGods;\n```", "```js\ninterface God\n{\n  prayTo():void;\n}\n```", "```js\nclass OldGodsAdapter {\n  constructor() {\n    this._oldGods = new OldGods();\n  }\n  prayTo() {\n    let sacrifice = new Sacrifice();\n    this._oldGods.prayTo(sacrifice);\n  }\n}\nReligion.OldGodsAdapter = OldGodsAdapter;\nclass DrownedGodAdapter {\n  constructor() {\n    this._drownedGod = new DrownedGod();\n  }\n  prayTo() {\n    let sacrifice = new HumanSacrifice();\n    this._drownedGod.prayTo(sacrifice);\n  }\n}\nReligion.DrownedGodAdapter = DrownedGodAdapter;\nclass SevenGodsAdapter {\n  constructor() {\n    this.prayerPurposeProvider = new PrayerPurposeProvider();\n    this._sevenGods = new SevenGods();\n  }\n  prayTo() {\n    this._sevenGods.prayTo(this.prayerPurposeProvider.GetPurpose());\n  }\n}\nReligion.SevenGodsAdapter = SevenGodsAdapter;\nclass PrayerPurposeProvider {\n  GetPurpose() { }\n  }\nReligion.PrayerPurposeProvider = PrayerPurposeProvider;\n```", "```js\nlet god1 = new Religion.SevenGodsAdapter();\nlet god2 = new Religion.DrownedGodAdapter();\nlet god3 = new Religion.OldGodsAdapter();\n\nlet gods = [god1, god2, god3];\nfor(let i =0; i<gods.length; i++){\n  gods[i].praryTo();\n}\n```", "```js\nclass SimpleIngredient {\n  constructor(name, calories, ironContent, vitaminCContent) {\n    this.name = name;\n    this.calories = calories;\n    this.ironContent = ironContent;\n    this.vitaminCContent = vitaminCContent;\n  }\n  GetName() {\n    return this.name;\n  }\n  GetCalories() {\n    return this.calories;\n  }\n  GetIronContent() {\n    return this.ironContent;\n  }\n  GetVitaminCContent() {\n    return this.vitaminCContent;\n  }\n}\n```", "```js\nclass CompoundIngredient {\n  constructor(name) {\n    this.name = name;\n    this.ingredients = new Array();\n  }\n  AddIngredient(ingredient) {\n    this.ingredients.push(ingredient);\n  }\n  GetName() {\n    return this.name;\n  }\n  GetCalories() {\n    let total = 0;\n    for (let i = 0; i < this.ingredients.length; i++) {\n      total += this.ingredients[i].GetCalories();\n    }\n    return total;\n  }\n  GetIronContent() {\n    let total = 0;\n    for (let i = 0; i < this.ingredients.length; i++) {\n      total += this.ingredients[i].GetIronContent();\n    }\n    return total;\n  }\n  GetVitaminCContent() {\u2029    let total = 0;\n    for (let i = 0; i < this.ingredients.length; i++) {\n      total += this.ingredients[i].GetVitaminCContent();\n    }\n    return total;\n  }\n}\n```", "```js\nlet egg = new SimpleIngredient(\"Egg\", 155, 6, 0);\nlet milk = new SimpleIngredient(\"Milk\", 42, 0, 0);\nlet sugar = new SimpleIngredient(\"Sugar\", 387, 0,0);\nlet rice = new SimpleIngredient(\"Rice\", 370, 8, 0);\n\nlet ricePudding = new CompoundIngredient(\"Rice Pudding\");\nricePudding.AddIngredient(egg);\nricePudding.AddIngredient(rice);\nricePudding.AddIngredient(milk);\nricePudding.AddIngredient(sugar);\n\nconsole.log(\"A serving of rice pudding contains:\");\nconsole.log(ricePudding.GetCalories() + \" calories\");\n```", "```js\n$(\"a\").hide()\n```", "```js\nclass BasicArmor {\n  CalculateDamageFromHit(hit) {\n    return hit.Strength * .2;\n  }\n  GetArmorIntegrity() {\n    return 1;\n  }\n}\n\nclass ChainMail {\n  constructor(decoratedArmor) {\n    this.decoratedArmor = decoratedArmor;\n  }\n  CalculateDamageFromHit(hit) {\n    hit.Strength = hit.Strength * .8;\n    return this.decoratedArmor.CalculateDamageFromHit(hit);\n  }\n  GetArmorIntegrity() {\n    return .9 * this.decoratedArmor.GetArmorIntegrity();\n  }\n}\n```", "```js\nexport interface IArmor{\n  CalculateDamageFromHit(hit: Hit):number;\n  GetArmorIntegrity():number;\n}\n```", "```js\nlet armor = new ChainMail(new Westeros.Armor.BasicArmor());\nconsole.log(armor.CalculateDamageFromHit({Location: \"head\", Weapon: \"Sock filled with pennies\", Strength: 12}));\n```", "```js\nlet Ship = (function () {\n  function Ship() {\n  }\n  Ship.prototype.TurnLeft = function () {\n  };\n  Ship.prototype.TurnRight = function () {\n  };\n  Ship.prototype.GoForward = function () {\n  };\n  return Ship;\n})();\nTransportation.Ship = Ship;\n\nlet Admiral = (function () {\n  function Admiral() {\n  }\n  return Admiral;\n})();\nTransportation.Admiral = Admiral;\n\nlet SupplyCoordinator = (function () {\n  function SupplyCoordinator() {\n  }\n  return SupplyCoordinator;\n})();\nTransportation.SupplyCoordinator = SupplyCoordinator;\n```", "```js\nlet Fleet = (function () {\n   function Fleet() {\n  }\n  Fleet.prototype.setDestination = function (destination) {\n    **//pass commands to a series of ships, admirals and whoever else needs it** \n\n  };\n\n  Fleet.prototype.resupply = function () {\n  };\n\n  Fleet.prototype.attack = function (destination) {\n    **//attack a city** \n\n  };\n  return Fleet;\n})();\n```", "```js\n$.ajax({method: \"PUT\",\nurl: \"https://settings.blob.core.windows.net/container/set1\",\ndata: \"setting data 1\"});\n\n$.ajax({method: \"PUT\",\nurl: \"https://settings.blob.core.windows.net/container/set2\",\ndata: \"setting data 2\"});\n\n$.ajax({method: \"PUT\",\nurl: \"https://settings.blob.core.windows.net/container/set3\",\ndata: \"setting data 3\"});\n```", "```js\npublic interface SettingSaver{\n  Save(settings: Settings); //preceding code in this method\n  Retrieve():Settings;\n}\n```", "```js\nlet Soldier = (function () {\n  function Soldier() {\n    this.Health = 10;\n    this.FightingAbility = 5;\n    this.Hunger = 0;\n  }\n  return Soldier;\n})();\n```", "```js\nclass Soldier {\n  constructor() {\n    this.Health = 10;\n    this.FightingAbility = 5;\n    this.Hunger = 0;\n  }\n}\n```", "```js\nlet soldier1 = new Soldier();\nlet soldier2 = new Soldier();\nconsole.log(soldier1.Health); //10\nsoldier1.Health = 7;\nconsole.log(soldier1.Health); //7\nconsole.log(soldier2.Health); //10\ndelete soldier1.Health;\nconsole.log(soldier1.Health); //10\n```", "```js\nclass BarrelCalculator {\n  calculateNumberNeeded(volume) {\n    return Math.ceil(volume / 157);\n  }\n}\n```", "```js\nclass DragonBarrelCalculator {\n  calculateNumberNeeded(volume) {\n    if (this._barrelCalculator == null)\n      this._barrelCalculator = new BarrelCalculator();\n    return this._barrelCalculator.calculateNumberNeeded(volume * .77);\n  }\n}\n```", "```js\nclass PintBarrelCalculator {\n  calculateNumberNeeded(volume) {\n    if (this._barrelCalculator == null)\n      this._barrelCalculator = new BarrelCalculator();\n    return this._barrelCalculator.calculateNumberNeeded(volume * 1.2);\n  }\n}\n```", "```js\nclass PintUnit {\n  constructor(unit, quantity) {\n    this.quanity = quantity;\n  }\n}\n```", "```js\nclass PintBarrelCalculator {\n  calculateNumberNeeded(volume) {\n    if(PintUnit.prototype == Object.getPrototypeOf(volume))\n      //throw some sort of error or compensate\n    if (this._barrelCalculator == null)\n      this._barrelCalculator = new BarrelCalculator();\n    return this._barrelCalculator.calculateNumberNeeded(volume * 1.2);\n  }\n}\n```", "```js\nexport interface ComplaintListener{\n  IsAbleToResolveComplaint(complaint: Complaint): boolean;\n  ListenToComplaint(complaint: Complaint): string;\n}\n```", "```js\nvar Complaint = (function () {\n  function Complaint() {\n    this.ComplainingParty = \"\";\n    this.ComplaintAbout = \"\";\n    this.Complaint = \"\";\n  }\n  return Complaint;\n})();\n```", "```js\nclass ClerkOfTheCourt {\n  IsInterestedInComplaint(complaint) {\n    //decide if this is a complaint which can be solved by the clerk\n    if(isInterested())\n      return true;\n    return false;\n  }\n  ListenToComplaint(complaint) {\n    //perform some operation\n    //return solution to the complaint\n    return \"\";\n  }\n}\nJudicialSystem.ClerkOfTheCourt = ClerkOfTheCourt;\nclass King {\n  IsInterestedInComplaint(complaint) {\n    return true;//king is the final member in the chain so must return true\n  }\n  ListenToComplaint(complaint) {\n    //perform some operation\n    //return solution to the complaint\n    return \"\";\n  }\n}\nJudicialSystem.King = King;\n```", "```js\nclass ComplaintResolver {\n  constructor() {\n    this.complaintListeners = new Array();\n     this.complaintListeners.push(new ClerkOfTheCourt());\n     this.complaintListeners.push(new King());\n  }\n  ResolveComplaint(complaint) {\n    for (var i = 0; i < this.complaintListeners.length; i++) {\n      if         (this.complaintListeners[i].IsInterestedInComplaint(complaint)) {\n        return this.complaintListeners[i].ListenToComplaint(complaint);\n      }\n    }\n  }\n}\n```", "```js\nvar simpleCommand = new Array();\nsimpleCommand.push(new LordInstructions().BringTroops);\nsimpleCommand.push(\"King's Landing\");\nsimpleCommand.push(500);\nsimpleCommand.push(new Date());\n```", "```js\nsimpleCommand[0](simpleCommand[1], simpleCommand[2], simpleCommand[3]);\n```", "```js\nsimpleCommand[0](simpleCommand[1], simpleCommand[2], simpleCommand[3], simpleCommand[4], simpleCommand[5], simpleCommand[6]);\n```", "```js\nclass BringTroopsCommand {\n  constructor(location, numberOfTroops, when) {\n    this._location = location;\n    this._numberOfTroops = numberOfTroops;\n    this._when = when;\n  }\n  Execute() {\n    var receiver = new LordInstructions();\n    receiver.BringTroops(this._location, this._numberOfTroops, this._when);\n  }\n}\n```", "```js\ncommand.Execute()\n```", "```js\nprocess.nextTick(function(){command.Execute();});\n```", "```js\nclass LordInstructions {\n  BringTroops(location, numberOfTroops, when) {\n    console.log(`You have been instructed to bring ${numberOfTroops} troops to ${location} by ${when}`);\n  }\n}\n```", "```js\n(aggressor -> battle ground <- defender) -> victor\n```", "```js\n(Robert Baratheon -> River Trident <- RhaegarTargaryen) -> Robert Baratheon\n```", "```js\nclass Battle {\n  constructor(battleGround, agressor, defender, victor) {\n    this.battleGround = battleGround;\n    this.agressor = agressor;\n    this.defender = defender;\n    this.victor = victor;\n  }\n}\n```", "```js\nclass Parser {\n  constructor(battleText) {\n    this.battleText = battleText;\n    this.currentIndex = 0;\n    this.battleList = battleText.split(\"\\n\");\n  }\n  nextBattle() {\n   if (!this.battleList[0])\n     return null;\n    var segments = this.battleList[0].match(/\\((.+?)\\s?->\\s?(.+?)\\s?<-\\s?(.+?)\\s?->\\s?(.+)/);\n    return new Battle(segments[2], segments[1], segments[3], segments[4]);\n  }\n}\n```", "```js\nvar text = \"(Robert Baratheon -> River Trident <- RhaegarTargaryen) -> Robert Baratheon\";\nvar p = new Parser(text);\np.nextBattle()\n```", "```js\n{\n  battleGround: 'River Trident',\n  agressor: 'Robert Baratheon',\n  defender: 'RhaegarTargaryen)',\n  victor: 'Robert Baratheon'\n}\n```", "```js\ninterface Iterator{\n  next();\n}\n```", "```js\nclass KingSuccession {\n  constructor(inLineForThrone) {\n    this.inLineForThrone = inLineForThrone;\n    this.pointer = 0;\n  }\n  next() {\n    return this.inLineForThrone[this.pointer++];\n  }\n}\n```", "```js\nvar king = new KingSuccession([\"Robert Baratheon\" ,\"JofferyBaratheon\", \"TommenBaratheon\"]);\nking.next() //'Robert Baratheon'\nking.next() //'JofferyBaratheon'\nking.next() //'TommenBaratheon'\n```", "```js\nclass FibonacciIterator {\n  constructor() {\n    this.previous = 1;\n    this.beforePrevious = 1;\n  }\n  next() {\n    var current = this.previous + this.beforePrevious;\n    this.beforePrevious = this.previous;\n    this.previous = current;\n    return current;\n  }\n}\n```", "```js\nvar fib = new FibonacciIterator()\nfib.next() //2\nfib.next() //3\nfib.next() //5\nfib.next() //8\nfib.next() //13\nfib.next() //21\n```", "```js\nvar kings = new KingSuccession([\"Robert Baratheon\" ,\"JofferyBaratheon\", \"TommenBaratheon\"]);\nfor(var king of kings){\n  //act on members of kings\n}\n```", "```js\nfunction* FibonacciGenerator (){\n  var previous = 1;\n  var beforePrevious = 1;\n  while(true){\n    var current = previous + beforePrevious;\n    beforePrevious = previous;\n    previous = current;\n    yield current;\n  }\n}\n```", "```js\nvar fib = new FibonacciGenerator()\nfib.next().value //2\nfib.next().value //3\nfib.next().value //5\nfib.next().value //8\nfib.next().value //13\nfib.next().value //21\n```", "```js\nclass Karstark {\n  constructor(greatLord) {\n    this.greatLord = greatLord;\n  }\n  receiveMessage(message) {\n  }\n  sendMessage(message) {\n    this.greatLord.routeMessage(message);\n  }\n}\n```", "```js\nclass HouseStark {\n  constructor() {\n    this.karstark = new Karstark(this);\n    this.bolton = new Bolton(this);\n    this.frey = new Frey(this);\n    this.umber = new Umber(this);\n  }\n  routeMessage(message) {\n  }\n}\n```", "```js\n$(\".error\").slideToggle();\n```", "```js\nclass SquareCommand {\n  constructor(numberToSquare) {\n    this.numberToSquare = numberToSquare;\n  }\n  Execute() {\n    this.numberToSquare *= this.numberToSquare;\n  }\n}\n```", "```js\nclass WorldState {\n  constructor(numberOfKings, currentKingInKingsLanding, season) {\n    this.numberOfKings = numberOfKings;\n    this.currentKingInKingsLanding = currentKingInKingsLanding;\n    this.season = season;\n  }\n}\n```", "```js\nclass WorldStateProvider {\n  saveMemento() {\n    return new WorldState(this.numberOfKings, this.currentKingInKingsLanding, this.season);\n  }\n  restoreMemento(memento) {\n    this.numberOfKings = memento.numberOfKings;\n    this.currentKingInKingsLanding = memento.currentKingInKingsLanding;\n    this.season = memento.season;\n  }\n}\n```", "```js\nclass Soothsayer {\n  constructor() {\n    this.startingPoints = [];\n    this.currentState = new WorldStateProvider();\n  }\n  setInitialConditions(numberOfKings, currentKingInKingsLanding, season) {\n    this.currentState.numberOfKings = numberOfKings;\n    this.currentState.currentKingInKingsLanding = currentKingInKingsLanding;\n    this.currentState.season = season;\n  }\n  alterNumberOfKingsAndForetell(numberOfKings) {\n    this.startingPoints.push(this.currentState.saveMemento());\n    this.currentState.numberOfKings = numberOfKings;\n  }\n  alterSeasonAndForetell(season) {\n    this.startingPoints.push(this.currentState.saveMemento());\n    this.currentState.season = season;\n  }\n  alterCurrentKingInKingsLandingAndForetell(currentKingInKingsLanding) {\n    this.startingPoints.push(this.currentState.saveMemento());\n    this.currentState.currentKingInKingsLanding = currentKingInKingsLanding;\n    //run some sort of prediction\n  }\n  tryADifferentChange() {\n    this.currentState.restoreMemento(this.startingPoints.pop());\n  }\n}\n```", "```js\nclass GetterSetter {\n  GetProperty() {\n    return this._property;\n  }\n  SetProperty(value) {\n    this._property = value;\n  }\n}\n```", "```js\nSetProperty(value) {\n  var temp = this._property;\n  this._property = value;\n  this._listener.Event(value, temp);\n}\n```", "```js\nclass Spy {\n  constructor() {\n    this._partiesToNotify = [];\n  }\n  Subscribe(subscriber) {\n    this._partiesToNotify.push(subscriber);\n  }\n  Unsubscribe(subscriber) {\n    this._partiesToNotify.remove(subscriber);\n  }\n  SetPainKillers(painKillers) {\n    this._painKillers = painKillers;\n    for (var i = 0; i < this._partiesToNotify.length; i++) {\n      this._partiesToNotify[i](painKillers);\n    }\n  }\n}\n```", "```js\nclass Player {\n  OnKingPainKillerChange(newPainKillerAmount) {\n    //perform some action\n  }\n}\n```", "```js\nlet s = new Spy();\nlet p = new Player();\ns.Subscribe(p.OnKingPainKillerChange); //p is now a subscriber\ns.SetPainKillers(12); //s will notify all subscribers\n```", "```js\n$(\"body\").on(\"click\", \"button\", function(){/*do something*/})\n```", "```js\nlet buttons = document.getElementsByTagName(\"button\");\nfor(let i =0; i< buttons.length; i++)\n{\n  buttons[i].onclick = function(){/*do something*/}\n}\n```", "```js\nfunction (action, amount) {\n  if (this.state == \"overdrawn\" && action == \"withdraw\") {\n    this.state = \"on hold\";\n  }\n  if (this.state == \"on hold\" && action != \"deposit\") {\n    this.state = \"on hold\";\n  }\n  if (this.state == \"good standing\" && action == \"withdraw\" && amount <= this.balance) {\n    this.balance -= amount;\n  }\n  if (this.state == \"good standing\" && action == \"withdraw\" && amount >this.balance) {\n    this.balance -= amount;\n    this.state = \"overdrawn\";\n  }\n};\n```", "```js\nclass BankAccountManager {\n  constructor() {\n    this.currentState = new GoodStandingState(this);\n  }\n  Deposit(amount) {\n    this.currentState.Deposit(amount);\n  }\n  Withdraw(amount) {\n    this.currentState.Withdraw(amount);\n  }\n  addToBalance(amount) {\n    this.balance += amount;\n  }\n  getBalance() {\n    return this.balance;\n  }\n  moveToState(newState) {\n    this.currentState = newState;\n  }\n}\n```", "```js\nclass GoodStandingState {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  Deposit(amount) {\n    this.manager.addToBalance(amount);\n  }\n  Withdraw(amount) {\n    if (this.manager.getBalance() < amount) {\n      this.manager.moveToState(new OverdrawnState(this.manager));\n    }\n    this.manager.addToBalance(-1 * amount);\n  }\n}\n```", "```js\nclass OverdrawnState {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  Deposit(amount) {\n    this.manager.addToBalance(amount);\n    if (this.manager.getBalance() > 0) {\n      this.manager.moveToState(new GoodStandingState(this.manager));\n    }\n  }\n  Withdraw(amount) {\n    this.manager.moveToState(new OnHold(this.manager));\n    throw \"Cannot withdraw money from an already overdrawn bank account\";\n  }\n}\n```", "```js\nclass OnHold {\n  constructor(manager) {\n    this.manager = manager;\n  }\n  Deposit(amount) {\n    this.manager.addToBalance(amount);\n    throw \"Your account is on hold and you must attend the bank to resolve the issue\";\n  }\n  Withdraw(amount) {\n    throw \"Your account is on hold and you must attend the bank to resolve the issue\";\n  }\n}\n```", "```js\ngoodStandingState\n.on(\"withdraw\")\n.when(function(manager){return manager.balance > 0;})\n  .transitionTo(\"goodStanding\")\n.when(function(manager){return mangaer.balance <=0;})\n  .transitionTo(\"overdrawn\");\n```", "```js\nexport interface ITravelMethod{\n  Travel(source: string, destination: string) : TravelResult;\n}\n```", "```js\nclass TravelResult {\n  constructor(durationInDays, probabilityOfDeath, cost) {\n    this.durationInDays = durationInDays;\n    this.probabilityOfDeath = probabilityOfDeath;\n    this.cost = cost;\n  }\n}\n```", "```js\nclass SeaGoingVessel {\n  Travel(source, destination) {\n    return new TravelResult(15, .25, 500);\n  }\n}\n\nclass Horse {\n  Travel(source, destination) {\n    return new TravelResult(30, .25, 50);\n  }\n}\n\nclass Walk {\n  Travel(source, destination) {\n    return new TravelResult(150, .55, 0);\n  }\n}\n```", "```js\nvar currentMoney = getCurrentMoney();\nvar strat;\nif (currentMoney> 500)\n  strat = new SeaGoingVessel();\nelse if (currentMoney> 50)\n  strat = new Horse();\nelse\n  strat = new Walk();\nvar travelResult = strat.Travel();\n```", "```js\nvar currentMoney = getCurrentMoney();\nvar strat;\nif (currentMoney> 500)\n  strat = new FavorFastestAndSafestStrategy();\nelse\n  strat = new FavorCheapest();\nvar travelResult = strat.Travel();\n```", "```js\nclass BasicBeer {\n  Create() {\n    this.AddIngredients();\n    this.Stir();\n    this.Ferment();\n    this.Test();\n    if (this.TestingPassed()) {\n      this.Distribute();\n    }\n  }\n  AddIngredients() {\n    throw \"Add ingredients needs to be implemented\";\n  }\n  Stir() {\n    //stir 15 times with a wooden spoon\n  }\n  Ferment() {\n    //let stand for 30 days\n  }\n  Test() {\n    //draw off a cup of beer and taste it\n  }\n  TestingPassed() {\n    throw \"Conditions to pass a test must be implemented\";\n  }\n  Distribute() {\n    //place beer in 50L casks\n  }\n}\n```", "```js\nclass RaspberryBeer extends BasicBeer {\n  AddIngredients() {\n    **//add ingredients, probably including raspberries** \n\n  }\n  TestingPassed() {\n    **//beer must be reddish and taste of raspberries** \n\n  }\n}\n```", "```js\ninterface IMemberOfArmy{\n  printName();\n}\n```", "```js\nclass Knight {\n  constructor() {\n    this._type = \"Westeros.Army.Knight\";\n  }\n  printName() {\n    console.log(\"Knight\");\n  }\n  visit(visitor) {\n    visitor.visit(this);\n  }\n}\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\n\nfor (let i = 0; i<collection.length; i++) {\n  if (typeof (collection[i]) == 'Knight')\n    collection[i].printName();\n  else\n    console.log(\"Not a knight\");\n}\n```", "```js\nNot a knight\nNot a knight\nNot a knight\nNot a knight\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\n\nfor (var i = 0; i < collection.length; i++) {\n  if (collection[i] instanceof Knight)\n    collection[i].printName();\n  else\n    console.log(\"No match\");\n}\n```", "```js\ncollection.push(Object.create(Knight));\n```", "```js\nvar Knight = (function () {\n  function Knight() {\n    this._type = \"Knight\";\n  }\n  Knight.prototype.printName = function () {\n    console.log(\"Knight\");\n  };\n  return Knight;\n})();\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\n\nfor (vari = 0; i<collection.length; i++) {\n  if (collection[i]._type == 'Knight')\n    collection[i].printName();\n  else\n    console.log(\"No match\");\n}\n```", "```js\nvar Knight = (function () {\n  function Knight() {\n    this._type = \"Knight\";\n  }\n  Knight.prototype.printName = function () {\n    console.log(\"Knight\");\n  };\n  **Knight.prototype.visit = function (visitor) {** \n\n **visitor.visit(this);** \n\n **};** \n\n  return Knight;\n})();\n```", "```js\nvarSelectiveNamePrinterVisitor = (function () {\n  function SelectiveNamePrinterVisitor() {\n  }\n  SelectiveNamePrinterVisitor.prototype.Visit = function (memberOfArmy) {\n    if (memberOfArmy._type == \"Knight\") {\n      this.VisitKnight(memberOfArmy);\n    } else {\n      console.log(\"Not a knight\");\n    }\n  };\n\n  SelectiveNamePrinterVisitor.prototype.VisitKnight = function (memberOfArmy) {\n    memberOfArmy.printName();\n  };\n  return SelectiveNamePrinterVisitor;\n})();\n```", "```js\nvar collection = [];\ncollection.push(new Knight());\ncollection.push(new FootSoldier());\ncollection.push(new Lord());\ncollection.push(new Archer());\nvar visitor = new SelectiveNamePrinterVisitor();\nfor (vari = 0; i<collection.length; i++) {\n  collection[i].visit(visitor);\n}\n```"]