["```kt\nBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.\nBus 001 Device 004: ID 148f:5370 Ralink Technology, Corp. RT5370 Wireless Adapter\nBus 001 Device 005: ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port\nBus 001 Device 006: ID 0a5c:21e8 Broadcom Corp.\n\n```", "```kt\nsudo apt-get install gpsd gpsd-clients python-gps\n\n```", "```kt\nsudo gpsd /dev/ttyUSB0 -F /var/run/gpsd.sock\n\n```", "```kt\ncgps \u2013s\n\n```", "```kt\nsudo killall gpsd\nsudo gpsd /dev/ttyUSB0 -F /var/run/gpsd.sock\n\n```", "```kt\n@reboot sudo killall gpsd\n@reboot sudo gpsd /dev/ttyUSB0 -F /var/run/gpsd.sock\n\n```", "```kt\n#! /usr/bin/python\n\nfrom gps import *\nimport math\n\ngpsd = gps(mode=WATCH_ENABLE) #starting the stream of info\n\ncount = 0\nwhile count < 10:  # wait max 50 seconds\n    gpsd.next()\n    if gpsd.fix.latitude != 0 and not math.isnan(gpsd.fix.latitude) :\n        print gpsd.fix.latitude,gpsd.fix.longitude\n        break\n    count = count + 1\n    time.sleep(5)\n```", "```kt\nsudo apt-get install bluetooth bluez-utils blueman python-serial python-wxgtk2.8 python-wxtools wx2.8-i18n libwxgtk2.8-dev git-core --fix-missing\n\n```", "```kt\nnetwork={\n        ssid=\"YOUR_NETWORKID_FOR_HOTSPOT\"\n        psk=\"YOUR_PASSWORD_FOR_HOTSPOT\"\n}\n```", "```kt\nBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.\nBus 001 Device 004: ID 148f:5370 Ralink Technology, Corp. RT5370 Wireless Adapter\nBus 001 Device 005: ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port\nBus 001 Device 006: ID 0a5c:21e8 Broadcom Corp.\n\n```", "```kt\nScanning ...\n 00:1D:A5:15:A0:DC       OBDII\n\n```", "```kt\nhciconfig hci0 \n/etc/init.d/bluetooth status \n\n```", "```kt\n/etc/init.d/bluetooth restart \n\n```", "```kt\nsudo rfcomm connect hci0 00:1D:A5:15:A0:DC\n\n```", "```kt\nsudo bluez-simple-agent hci0 00:1D:A5:15:A0:DC\n\n```", "```kt\nRequestPinCode (/org/bluez/2336/hci0/dev_00_1D_A5_15_A0_DC)\nEnter PIN Code: 1234\nRelease\nNew device (/org/bluez/2336/hci0/dev_00_1D_A5_15_A0_DC)\n\n```", "```kt\nsudo update-rc.d -f dbus defaults\nsudo reboot\n\n```", "```kt\nsudo bluez-test-device trusted 00:1D:A5:15:A0:DC yes\n\n```", "```kt\nsudo l2ping 00:1D:A5:15:A0:DC\n```", "```kt\ngit clone https://github.com/Pbartek/pyobd-pi\ncd pyobd-pi\nsudo python ./obd_recorder.py\n\n```", "```kt\nsudo rfcomm connect hci0 00:1D:A5:15:A0:DC &\n\n```", "```kt\nself.send_command(\"0100\")\n```", "```kt\nself.send_command(\"ATSP0\")  # select auto protocol\nwx.PostEvent(self._notify_window, DebugEvent([2,\"ATSP0 response:\" + self.get_result()]))\n```", "```kt\nsudo killall gpsd\nsudo gpsd /dev/ttyUSB0 -F /var/run/gpsd.sock\nsudo rfcomm connect hci0 00:1D:A5:15:A0:DC &\n\n```", "```kt\nmount -o rw,remount /system\nmv playlpm playlpmbackup\necho \"#!/system/bin/sh\" > playlpm\necho \"sleep 60\" >> playlpm\necho \"/system/bin/reboot\" >> playlpm\nchmod 0755 /system/bin/playlpm\nchown root.shell /system/bin/playlpm\nmount -o ro,remount /system\n\n```", "```kt\npublic class StartTetheringAtBootReceiver extends BroadcastReceiver {\n   public static void setWifiTetheringEnabled(boolean enable, Context context) {\n      WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\n\n      Method[] methods = \n         wifiManager.getClass().getDeclaredMethods();\n       for (Method method : methods) {\n        if (method.getName().equals(\"setWifiApEnabled\")) {\n            try {\n                 method.invoke(wifiManager, null, enable);\n             } catch (Exception ex) {\n                ex.printStackTrace();\n             }\n             break;\n         }\n      }\n   }\n    @Override\n   public void onReceive(Context context, Intent intent) {\n      if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction()) || Intent.ACTION_POWER_CONNECTED.equals(intent.getAction())) {\n         setWifiTetheringEnabled(true, context);\n      }\n   }\n}\n```", "```kt\n<receiver\nandroid:name=\".StartTetheringAtBootReceiver\"\n   android:label=\"StartTetheringAtBootReceiver\">\n   <intent-filter>\n      <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n      <action android:name=\"android.intent.action.ACTION_POWER_CONNECTED\" />\n   </intent-filter>\n</receiver>\n```", "```kt\n<uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n```", "```kt\n<Button android:text=\"@string/enable\" \n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" \n        android:onClick=\"click\"/>\n```", "```kt\npublic void click(View v) {\n   StartTetheringAtBootReceiver\n      .setWifiTetheringEnabled(true, this);\n}\n```", "```kt\nnetwork={\n        ssid=\"YOUR_NETWORKID_FOR_HOTSPOT\"\n        psk=\"YOUR_PASSWORD_FOR_HOTSPOT\"\n}\n```", "```kt\n{\n  \"private_key_id\": \"ed5a741ff85f235167015d99a1adc3033f0e6f9f\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDM9YJ2otxwdhcL\\nQJ8ipZOuILkq9dzWDJJgtjSgFUXTJvjgzTDNa2WXGy9p9i4Wuzrj5OJli/M5dMWr\\n+CVZCpsfV7Xt7iqkeCEo0dN225HDiAXXMvWKhDsiofau0xLCTFLDnLZFWqAd55ec\\naENYQKp6ZEc6dGaA7Kp7O1+7LtEB2a4yqgZIelL6fTSSLQqyV477OS2Dkq+nz5Sz\\nRyTexcDWioDNp2vdGadqDfRKsI7ELwgWscaV6jrbHz2uDuC844UnTL4WKMugp1n1\\nObTuGDl1gldEIWlk2XSLFkGfY30lYV7XwrUQGgc85AGRwdH7qYrQM3jO4D+6thAH\\nETq4qjRRAgMBAAECggEAJjXXHrr6EdVSMnzXriPkRmA/ZSz1AMrTN0iAwx90Jwtq\\n9q4KXSGajPM6gaytpvs83WO8eWX/8EQ+3fKjM9hwVwWJG1R9irACrpN/svb4U9W2\\nEQqlEC/avngnfyxGoQaNn35F1OQyWaDlePlPJNLZdXvgc5tjyMFWfybwj/sIaCmR\\nj5ntV2aY/gCEbe6km7L/LkC3C7CesIWstUGMHCjh2aPeQT+Hpodf23AnLZuSo34j\\nB+lSI/RjnDsd0HfazOgaOXa/yK4SliTaMWUBiMSXQcwZZsVp/RL0Ve6W2PSfi092\\n+hATaaRnA8zB8fx7PnAltPhFwVr9+jjbYbq+wypoyQKBgQDoLJytaR4wof46MUiL\\nMWrXDopi5dG2ofUSXR+JEIThe7yyYepzzdWFL+rXNEzD5X9UcfCodwZ0PKLN3u0t\\nZJ5Iq111bxwwZix5uVStRi6stgGaewF6nkDqN8y5TJJgnZB9wSBuG3RvCU4zwXKZ\\ngj2+azWme7PSyOHKNODbBd9DkwKBgQDh/e7nct49/Z0Om/+kNJ+NXUjka+S1yF7n\\nhL+HZ2WU1gL8iQjXPxnCX1lThw7C4rForH/esOs+f1XMje8NYi7ggslqxoXwFRH6\\ny/tuCRaY+e62xmJAxj2o8InsvQQkSM+dtuZiaNq3gCatHKbx2C6SVQal/y3yuR0c\\n00adgr6fCwKBgQDSlAvzGIFiWLsNqr+CR+sAbVbExm9EN3bhFgdROONc4+7M2BRe\\nvlUoPMLCN9RcZR3syH8fPP1klc6P7N6vqjAJ9yuIJKOrnjA+owKTOjGBQn8HzwMT\\nZM+536xWcIXfDWoNNQol887SGt2MAavgYYmA2RpLCq2Zw8tOrFE5NgU+8wKBgQCe\\nAiwNy3S0JySu2EevidOcxYJ3ozBwIT6p5Vj81UBjBhdkdnOl+8qI6p3MFvwtKs8b\\n/rARBeYU9ncI5Jwl4WYhN5CYhWGUcUb28bRERTp1jxpm1OJRo8ns2vG0gpvourfe\\n78i5OdLixklEdGoNYjd9vNE/MuHveZpvUxFmg8m/7QKBgCGVTkOXWLpRxuYT+M+M\\n28LBgftHxu0YZdXx8mU9x6LQYG2aFxho7bkEYiEaNYJn51kdNZqzrIHebxT/dh/z\\nddd5nR93E6WsPuqstZF4ZhJ+l2m77wmG9u5gfRifrNpc3TK0IswydFPIMNVxMz+d\\nl3cdqtiW6rvWSQoHC0brpcYL\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"14902682557-05eecriag0m9jbo50ohnt59sest5694d@developer.gserviceaccount.com\",\n  \"client_id\": \"14902682557-05eecriag0m9jbo50ohnt59sest5694d.apps.googleusercontent.com\",\n  \"type\": \"service_account\"\n}\n```", "```kt\ncurl -O https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py\nsudo python get-pip.py\n\n```", "```kt\nsudo apt-get update\nsudo apt-get install build-essential libssl-dev libffi-dev python-dev\nsudo pip install --upgrade oauth2client\nsudo pip install PyOpenSSL\n\n```", "```kt\ngit clone https://github.com/burnash/gspread.git\ncd gspread\nsudo python setup.py install\n\n```", "```kt\nimport json\nimport gspread\nfrom datetime import datetime\nfrom oauth2client.client import SignedJwtAssertionCredentials\n\njson_key = json.load(open('piandroidprojects.json'))\nscope = ['https://spreadsheets.google.com/feeds']\n\ncredentials = SignedJwtAssertionCredentials(json_key['client_email'], json_key['private_key'], scope)\n\ngc = gspread.authorize(credentials)\nt = datetime.now()\nsh = gc.open(\"CAR_OBD_SHEET\").add_worksheet(str(t.year) + \"_\" + str(t.month) + \"_\" + str(t.day) + \"_\" + str(t.hour) + \"_\" + str(t.minute) + \"_\" + str(t.second), 100, 20)\n\nsh.update_cell(1, 1, 0.23)\n```", "```kt\nsudo killall gpsd\nsudo gpsd /dev/ttyUSB0 -F /var/run/gpsd.sock\nsudo rfcomm connect hci0 00:1D:A5:15:A0:DC &\nsleep 1m\ncurrent_time=$(date \"+%Y.%m.%d-%H.%M.%S\")\nfile_name=/home/pi/log_sender.txt\nnew_filename=$file_name.$current_time\nsudo /home/pi/pyobd-pi/sender.py > $new_filename 2>&1 &\n```", "```kt\n#!/usr/bin/env python\n\nimport obd_io\nfrom datetime import datetime\nimport time\nimport threading\nimport commands\nimport time\nfrom gps import *\nimport math\nimport json\nimport gspread\nfrom oauth2client.client import SignedJwtAssertionCredentials\n\ngpsd = None\n\nclass GpsPoller(threading.Thread):\n  def __init__(self):\n    threading.Thread.__init__(self)\n    global gpsd \n    gpsd = gps(mode=WATCH_ENABLE) \n\n  def run(self):\n    global gpsd\n    while True:\n      gpsd.next()\n\nclass OBD_Sender():\n    def __init__(self):\n        self.port = None\n        self.sensorlist = [3,4,5,12,13,31,32]\n\n    def connect(self):\n        self.port = obd_io.OBDPort(\"/dev/rfcomm0\", None, 2, 2)\n        if(self.port):\n            print \"Connected to \"+str(self.port)\n\n    def is_connected(self):\n        return self.port\n\n    def get_data(self):\n        if(self.port is None):\n            return None\n        current = 1\n        while 1:\n            cell_list = []\n\n            localtime = datetime.now()\n            cell = sh.cell(current, 1)\n            cell.value = localtime\n            cell_list.append(cell)\n\n            try:\n                gpsd.next()\n            except:\n                print \"gpsd.next() error\"\n\n            cell = sh.cell(current, 2)\n            cell.value = gpsd.fix.latitude\n            cell_list.append(cell)\n\n            cell = sh.cell(current, 3)\n            cell.value = gpsd.fix.longitude\n            cell_list.append(cell)\n\n            column = 4\n            for index in self.sensorlist:\n                (name, value, unit) = self.port.sensor(index)\n                cell = sh.cell(current, column)\n                cell.value = value\n                cell_list.append(cell)\n                column = column + 1\n\n            try:\n                sh.update_cells(cell_list)\n                print \"sent data\"\n            except:\n                print \"update_cells error\"\n\n            current = current + 1\n            time.sleep(10)\n\njson_key = json.load(open('/home/pi/pyobd-pi/piandroidprojects.json'))\nscope = ['https://spreadsheets.google.com/feeds']\n\ncredentials = SignedJwtAssertionCredentials(json_key['client_email'], json_key['private_key'], scope)\n\nwhile True:\n    try:\n        gc = gspread.authorize(credentials)\n        break\n    except:\n        print \"Error in GoogleDocs authorize\"\n\nt = datetime.now()\nsh = gc.open(\"CAR_OBD_SHEET\").add_worksheet(str(t.year)+\"_\"+str(t.month)+\"_\"+str(t.day)+\"_\"+str(t.hour)+\"_\"+str(t.minute)+\"_\"+str(t.second), 100, 20)\n\ngpsp = GpsPoller()\ngpsp.start()\n\no = OBD_Sender()\no.connect()\ntime.sleep(5)\no.connect()\ntime.sleep(5)\no.get_data()\n```", "```kt\ncompile files('libs/gdata-spreadsheet-3.0.jar')\ncompile files('libs/gdata-core-1.0.jar')\ncompile files('libs/guava-11.0.2.jar')\ncompile files('libs/gdata-base-1.0.jar')\ncompile files('libs/google-http-client-1.20.0.jar')\ncompile files('libs/google-http-client-jackson-1.20.0.jar')\ncompile files('libs/google-api-client-1.20.0.jar')\ncompile files('libs/google-oauth-client-1.20.0.jar')\ncompile files('libs/jackson-core-asl-1.9.11.jar')\n```", "```kt\nnew RetrieveSpreadsheets().execute();\n```", "```kt\nclass RetrieveSpreadsheets extends AsyncTask<Void, Void, List<WorksheetEntry>> {\n   @Override\n   protected List<WorksheetEntry> doInBackground(Void params) {\n      try {\n         service = \n            new SpreadsheetService(\"MySpreadsheetIntegration-v1\");\n         HttpTransport httpTransport = new NetHttpTransport();\n         JacksonFactory jsonFactory = new JacksonFactory();\n         String[] SCOPESArray = \n            {\"https://spreadsheets.google.com/feeds\", \n             \"https://spreadsheets.google.com/feeds/spreadsheets/private/full\", \n             \"https://docs.google.com/feeds\"};\n         final List SCOPES = Arrays.asList(SCOPESArray);\n         KeyStore keystore = KeyStore.getInstance(\"PKCS12\");\n         keystore.load(\n            getResources().openRawResource(R.raw.piandroidprojects), \"notasecret\".toCharArray());\n         PrivateKey key = (PrivateKey) keystore.getKey(\"privatekey\", \"notasecret\".toCharArray());\n\n         GoogleCredential credential = \n            new GoogleCredential.Builder()\n                .setTransport(httpTransport)\n                .setJsonFactory(jsonFactory)\n                .setServiceAccountPrivateKey(key)\n                .setServiceAccountId(\"14902682557-05eecriag0m9jbo50ohnt59sest5694d@developer.gserviceaccount.com\")\n                .setServiceAccountScopes(SCOPES)\n                .build();\n\n         service.setOAuth2Credentials(credential);\n         URL SPREADSHEET_FEED_URL = new URL(\"https://spreadsheets.google.com/feeds/spreadsheets/private/full\");\n         SpreadsheetFeed feed = \n            service.getFeed(SPREADSHEET_FEED_URL, SpreadsheetFeed.class);\n         List<SpreadsheetEntry> spreadsheets = feed.getEntries();\n\n         return spreadsheets.get(0).getWorksheets();\n\n      } catch (MalformedURLException e) {\n         e.printStackTrace();\n      } catch (ServiceException e) {\n         e.printStackTrace();\n      } catch (IOException e) {\n         e.printStackTrace();\n      } catch (GeneralSecurityException e) {\n         e.printStackTrace();\n      }\n      return null;\n   }\n\n   protected void onPostExecute(final List<WorksheetEntry> worksheets) {\n      if(worksheets == null || worksheets.size() == 0) {\n         Toast.makeText(MapsActivity.this, \"Nothing saved yet\", Toast.LENGTH_LONG).show();\n      } else {\n         final List<String> worksheetTitles = \n            new ArrayList<String>();\n         for(WorksheetEntry worksheet : worksheets) {\n             worksheetTitles.add(\n                worksheet.getTitle().getPlainText());\n         }\n\n         AlertDialog.Builder alertDialogBuilder = \n            new AlertDialog.Builder(MapsActivity.this);\n         alertDialogBuilder.setTitle(\"Select a worksheet\");\n         alertDialogBuilder.setAdapter(\n            new ArrayAdapter<String>(\n                MapsActivity.this,\n                android.R.layout.simple_list_item_1, worksheetTitles.toArray(new String[0])),\n                new DialogInterface.OnClickListener() {\n                   @Override\n                   public void onClick(DialogInterface dialog, int which) {\n                      new RetrieveWorksheetContent()\n                         .execute(worksheets.get(which));\n                   }\n             });\n            alertDialogBuilder.create().show();\n}\n      }\n   }\n```", "```kt\nSpreadsheetService service;\n```", "```kt\nclass RetrieveWorksheetContent extends AsyncTask<WorksheetEntry, Void, List<List<Object>>> {\n\n   @Override\n   protected List<List<Object>> doInBackground(WorksheetEntry params) {\n      WorksheetEntry worksheetEntry = params[0];\n      URL listFeedUrl= worksheetEntry.getListFeedUrl();\n      List<List<Object>> values = new ArrayList<List<Object>>();\n      try {\n         ListFeed feed = \n            service.getFeed(listFeedUrl, ListFeed.class);\n         for(ListEntry entry : feed.getEntries()) {\n             List<Object> rowValues = new ArrayList<Object>();\n             for (String tag : entry.getCustomElements().getTags()) {\n               Object value = \n                  entry.getCustomElements().getValue(tag);\n                rowValues.add(value);\n            }\n            values.add(rowValues);\n         }\n      } catch (IOException e) {\n         e.printStackTrace();\n      } catch (ServiceException e) {\n         e.printStackTrace();\n      }\n      return values;\n   }\n\n   @Override\n   protected void onPostExecute(List<List<Object>> values) {\n      setUpMap(values);\n      super.onPostExecute(values);\n   }\n}\n```", "```kt\nprivate void setUpMap(List<List<Object>> values) {\n   for(List<Object> value : values) {\n       String title = values.get(0).toString();\n       try {\n         double latitude = \n            Double.parseDouble(value.get(1).toString());\n         double longitude = \n            Double.parseDouble(value.get(2).toString());\n         if (latitude != 0 && longitude != 0)\n             mMap.addMarker(\n               new MarkerOptions().position(\n                   new LatLng(latitude, longitude)))\n                .setTitle(title);\n      } catch(NumberFormatException ex) {\n      }\n   }\n}\n```"]