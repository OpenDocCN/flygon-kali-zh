["```kt\n    <manifest xmlns:android=\n     \"http://schemas.android.com/apk/res/android\"   \n      package=\"com.journaler\"> \n      ... \n      <application ... > \n        <service \n          android:name=\".service.MainService\" \n          android:exported=\"false\" /> \n          ... \n\n      </application> \n     </manifest>\n\n```", "```kt\n     public class MainIntentService extends IntentService { \n       /** \n       * A constructor is mandatory! \n       */ \n       public MainIntentService() { \n         super(\"MainIntentService\"); \n       } \n\n       /** \n       * All important work is performed here. \n       */ \n       @Override \n       protected void onHandleIntent(Intent intent) { \n         // Your implementation for handling received intents. \n\n       } \n     } \n```", "```kt\n    override fun onStartCommand(intent: Intent?, flags: Int, startId:  \n    Int): Int { \n\n      return Service.START_STICKY \n    }\n```", "```kt\n    val startServiceIntent = Intent(ctx, MainService::class.java) \n    ctx.startService(startServiceIntent) \n```", "```kt\n     val stopServiceIntent = Intent(ctx, MainService::class.java)\n     ctx.stopService(startServiceIntent) \n```", "```kt\n    class MainService : Service(), DataSynchronization { \n\n      private val tag = \"Main service\" \n      private var binder = getServiceBinder() \n      private var executor = TaskExecutor.getInstance(1) \n\n      override fun onCreate() { \n        super.onCreate() \n        Log.v(tag, \"[ ON CREATE ]\") \n      } \n\n      override fun onStartCommand(intent: Intent?, flags: Int, startId:\n      Int): Int { \n        Log.v(tag, \"[ ON START COMMAND ]\") \n        synchronize() \n        return Service.START_STICKY \n      } \n\n      override fun onBind(p0: Intent?): IBinder { \n        Log.v(tag, \"[ ON BIND ]\") \n        return binder \n      } \n\n      override fun onUnbind(intent: Intent?): Boolean { \n        val result = super.onUnbind(intent) \n        Log.v(tag, \"[ ON UNBIND ]\") \n        return result \n      } \n\n      override fun onDestroy() { \n        synchronize() \n        super.onDestroy() \n        Log.v(tag, \"[ ON DESTROY ]\") \n      } \n\n      override fun onLowMemory() { \n        super.onLowMemory() \n        Log.w(tag, \"[ ON LOW MEMORY ]\") \n      } \n\n      override fun synchronize() { \n        executor.execute { \n            Log.i(tag, \"Synchronizing data [ START ]\") \n            // For now we will only simulate this operation! \n            Thread.sleep(3000) \n            Log.i(tag, \"Synchronizing data [ END ]\") \n        } \n      } \n\n      private fun getServiceBinder(): MainServiceBinder = \n      MainServiceBinder() \n\n      inner class MainServiceBinder : Binder() { \n        fun getService(): MainService = this@MainService \n      } \n    }\n```", "```kt\n    package com.journaler.service \n    interface DataSynchronization { \n\n     fun synchronize() \n    }\n```", "```kt\n     class Journaler : Application() { \n\n       companion object { \n         val tag = \"Journaler\" \n         var ctx: Context? = null \n       } \n\n       override fun onCreate() { \n         super.onCreate() \n         ctx = applicationContext \n         Log.v(tag, \"[ ON CREATE ]\") \n         startService() \n       } \n\n       override fun onLowMemory() { \n         super.onLowMemory() \n         Log.w(tag, \"[ ON LOW MEMORY ]\") \n         // If we get low on memory we will stop service if running. \n         stopService() \n       } \n\n       override fun onTrimMemory(level: Int) { \n         super.onTrimMemory(level) \n         Log.d(tag, \"[ ON TRIM MEMORY ]: $level\") \n       } \n\n       private fun startService() { \n         val serviceIntent = Intent(this, MainService::class.java) \n         startService(serviceIntent) \n       } \n\n       private fun stopService() { \n        val serviceIntent = Intent(this, MainService::class.java) \n        stopService(serviceIntent) \n       } \n\n     } \n```", "```kt\n    data class NavigationDrawerItem( \n      val title: String, \n      val onClick: Runnable, \n      var enabled: Boolean = true \n    ) \n```", "```kt\n    class NavigationDrawerAdapter( \n      val ctx: Context, \n      val items: List<NavigationDrawerItem> \n      ) : BaseAdapter() { \n\n        private val tag = \"Nav. drw. adptr.\" \n\n        override fun getView(position: Int, v: View?, group: \n        ViewGroup?): View { \n          ... \n          val item = items[position] \n          val title = view.findViewById<Button>(R.id.drawer_item) \n          ... \n          title.setOnClickListener { \n            if (item.enabled) { \n                item.onClick.run() \n            } else { \n                Log.w(tag, \"Item is disabled: $item\") \n            } \n          } \n\n          return view \n       } \n        ... \n    }\n```", "```kt\n    class MainActivity : BaseActivity() { \n      ... \n      private var service: MainService? = null \n\n      private val synchronize: NavigationDrawerItem by lazy { \n        NavigationDrawerItem( \n          getString(R.string.synchronize), \n          Runnable { service?.synchronize() }, \n          false \n        ) \n     } \n\n     private val serviceConnection = object : ServiceConnection { \n        override fun onServiceDisconnected(p0: ComponentName?) { \n            service = null \n            synchronize.enabled = false \n        } \n\n        override fun onServiceConnected(p0: ComponentName?, binder: \n        IBinder?) { \n          if (binder is MainService.MainServiceBinder) { \n            service = binder.getService() \n            service?.let { \n              synchronize.enabled = true \n            } \n           } \n        } \n     } \n\n      override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n        ... \n        val menuItems = mutableListOf<NavigationDrawerItem>() \n        ... \n        menuItems.add(synchronize) \n        ... \n      } \n\n      override fun onResume() { \n        super.onResume() \n        val intent = Intent(this, MainService::class.java) \n        bindService(intent, serviceConnection, \n        android.content.Context.BIND_AUTO_CREATE) \n     } \n\n     override fun onPause() { \n        super.onPause() \n        unbindService(serviceConnection) \n     } \n\n     ... \n    } \n```", "```kt\n    <manifest xmlns:android=\n      \"http://schemas.android.com/apk/res/android\" \n       package=\"com.journaler\"> \n       ... \n      <application ... > \n      <service \n        android:name=\".service.MainService\" \n        android:exported=\"false\" /> \n\n      <service \n        android:name=\".service.DatabaseService\" \n        android:exported=\"false\" /> \n        ... \n      </application> \n    </manifest> \n\n    Define DatabaseService like this: \n    class DatabaseService :\n     IntentService(\"DatabaseService\") { \n\n       companion object { \n         val EXTRA_ENTRY = \"entry\" \n         val EXTRA_OPERATION = \"operation\" \n       } \n\n       private val tag = \"Database service\" \n\n       override fun onCreate() { \n         super.onCreate() \n         Log.v(tag, \"[ ON CREATE ]\") \n       } \n\n       override fun onLowMemory() { \n         super.onLowMemory() \n         Log.w(tag, \"[ ON LOW MEMORY ]\") \n       } \n\n       override fun onDestroy() { \n         super.onDestroy() \n         Log.v(tag, \"[ ON DESTROY ]\") \n       } \n\n       override fun onHandleIntent(p0: Intent?) { \n         p0?.let { \n            val note = p0.getParcelableExtra<Note>(EXTRA_ENTRY) \n            note?.let { \n               val operation = p0.getIntExtra(EXTRA_OPERATION, -1) \n               when (operation) { \n                 MODE.CREATE.mode -> { \n                   val result = Db.insert(note) \n                   if (result) { \n                      Log.i(tag, \"Note inserted.\") \n                   } else { \n                      Log.e(tag, \"Note not inserted.\") \n                      } \n                   } \n                   MODE.EDIT.mode -> { \n                     val result = Db.update(note) \n                     if (result) { \n                       Log.i(tag, \"Note updated.\") \n                     } else { \n                       Log.e(tag, \"Note not updated.\") \n                      } \n                    } \n                    else -> { \n                        Log.w(tag, \"Unknown mode [ $operation ]\") \n                    } \n\n                  } \n\n                } \n\n             } \n\n         } \n\n     } \n```", "```kt\n    package com.journaler.model \n    import android.location.Location \n    import android.os.Parcel \n    import android.os.Parcelable \n\n    class Note( \n      title: String, \n      message: String, \n      location: Location \n    ) : Entry( \n      title, \n      message, \n      location \n    ), Parcelable { \n\n      override var id = 0L \n\n      constructor(parcel: Parcel) : this( \n        parcel.readString(), \n        parcel.readString(), \n        parcel.readParcelable(Location::class.java.classLoader) \n      ) { \n         id = parcel.readLong() \n        } \n\n       override fun writeToParcel(parcel: Parcel, flags: Int) { \n         parcel.writeString(title) \n         parcel.writeString(message) \n         parcel.writeParcelable(location, 0) \n         parcel.writeLong(id) \n       } \n\n       override fun describeContents(): Int { \n         return 0 \n       } \n\n       companion object CREATOR : Parcelable.Creator<Note> { \n         override fun createFromParcel(parcel: Parcel): Note { \n            return Note(parcel) \n        } \n\n         override fun newArray(size: Int): Array<Note?> { \n            return arrayOfNulls(size) \n        } \n      } \n\n    } \n```", "```kt\n    class NoteActivity : ItemActivity() { \n      ... \n      private val locationListener = object : LocationListener { \n        override fun onLocationChanged(p0: Location?) { \n          p0?.let { \n            LocationProvider.unsubscribe(this) \n            location = p0 \n            val title = getNoteTitle() \n            val content = getNoteContent() \n            note = Note(title, content, p0) \n\n            // Switching to intent service. \n            val dbIntent = Intent(this@NoteActivity, \n            DatabaseService::class.java) \n            dbIntent.putExtra(DatabaseService.EXTRA_ENTRY, note) \n            dbIntent.putExtra(DatabaseService.EXTRA_OPERATION, \n            MODE.CREATE.mode) \n            startService(dbIntent) \n            sendMessage(true) \n          } \n      } \n\n     override fun onStatusChanged(p0: String?, p1: Int, p2: Bundle?) {} \n     override fun onProviderEnabled(p0: String?) {} \n     override fun onProviderDisabled(p0: String?) {} \n   } \n    ... \n    private fun updateNote() { \n      if (note == null) { \n        if (!TextUtils.isEmpty(getNoteTitle()) && \n        !TextUtils.isEmpty(getNoteContent())) { \n           LocationProvider.subscribe(locationListener) \n        } \n        } else { \n            note?.title = getNoteTitle() \n            note?.message = getNoteContent() \n\n            // Switching to intent service. \n            val dbIntent = Intent(this@NoteActivity, \n            DatabaseService::class.java) \n            dbIntent.putExtra(DatabaseService.EXTRA_ENTRY, note) \n            dbIntent.putExtra(DatabaseService.EXTRA_OPERATION,\n            MODE.EDIT.mode) \n            startService(dbIntent) \n            sendMessage(true) \n        } \n      } \n      ... \n    } \n```"]