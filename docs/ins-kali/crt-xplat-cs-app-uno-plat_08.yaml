- en: '*Chapter 6*: Displaying Data in Charts and with Custom 2D Graphics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：显示图表和自定义2D图形中的数据'
- en: This chapter will look at apps that need to show graphs, reports, and complex
    graphics. It's common for apps to include some sort of graph or chart. It's also
    becoming increasingly common to include elements in the UI that can't easily be
    made with standard controls.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍需要显示图形、报告和复杂图形的应用程序。应用程序通常包括某种图形或图表。还越来越常见的是在UI中包含无法轻松使用标准控件制作的元素。
- en: As we progress through this chapter, we'll build a dashboard app for our fictional
    business that will display information appropriate to different parts of the business.
    Such apps are common as part of management reporting tools. You can imagine the
    different screens being displayed on monitors mounted on the walls in each department.
    This enables staff to instantly see what's going on in their part of the business.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在本章的进展，我们将为我们虚构的业务构建一个仪表板应用程序，显示适合业务不同部分的信息。这样的应用程序在管理报告工具中很常见。您可以想象不同的屏幕显示在每个部门墙上安装的监视器上。这使员工可以立即看到他们所在业务部门的情况。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Displaying graphs and charts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示图形和图表
- en: Creating custom graphics with SkiaSharp
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SkiaSharp创建自定义图形
- en: Having the UI layout respond to changes in the screen size
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使UI布局对屏幕尺寸的变化做出响应
- en: By the end of this chapter, you'll have created a dashboard app that shows financial,
    operational, and network information that runs on UWP and the web. It will also
    adjust to different screen proportions, so the contents of each page account for
    different screen sizes and aspect ratios.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将创建一个仪表板应用程序，显示在UWP和Web上运行的财务、运营和网络信息。它还将适应不同的屏幕比例，因此每个页面的内容都会考虑不同的屏幕尺寸和纵横比。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter assumes that you already have your development environment set
    up, including installing the project templates, as was covered in [*Chapter 1*](B17132_01_Final_VK_ePub.xhtml#_idTextAnchor015),
    *Introducing Uno Platform*. The source code for this chapter is at [https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/Chapter06](https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/Chapter06).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设您已经设置好了开发环境，包括安装了项目模板，就像在[*第1章*](B17132_01_Final_VK_ePub.xhtml#_idTextAnchor015)中介绍的那样，*介绍Uno
    Platform*。本章的源代码位于[https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/Chapter06](https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/Chapter06)。
- en: The code in this chapter makes use of the library from [https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/SharedLibrary](https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/SharedLibrary).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码使用了来自[https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/SharedLibrary](https://github.com/PacktPublishing/Creating-Cross-Platform-C-Sharp-Applications-with-Uno-Platform/tree/main/SharedLibrary)的库。
- en: 'Check out the following video to see the code in action: [https://bit.ly/3iDchtK](https://bit.ly/3iDchtK)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，以查看代码的实际运行情况：[https://bit.ly/3iDchtK](https://bit.ly/3iDchtK)
- en: Introducing the app
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍应用程序
- en: 'The app we''ll build in this chapter is called **Dashboard**. It''s an application
    that displays the current activity within the business divided by department.
    This isn''t something that would be available to all staff, but to allow us to
    focus on the features and areas of interest in this chapter, we''ll not concern
    ourselves with how access is controlled. The real version of this app would have
    many features, but we''re going to only implement three:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将构建的应用程序名为**Dashboard**。这是一个显示业务部门内当前活动的应用程序。这不是所有员工都可以使用的东西，但为了让我们专注于本章的特性和兴趣领域，我们不会关心访问权限是如何控制的。这个应用程序的真实版本将有许多功能，但我们只会实现三个：
- en: Displaying current financial information
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示当前的财务信息
- en: Displaying live operational information
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示实时的运营信息
- en: Showing where the trains currently are in the network
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示火车目前在网络中的位置
- en: As this application will be used by staff members in their offices, it will
    be available on desktop (via UWP) and in a web browser (with a WASM version).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个应用程序将被办公室工作人员使用，它将在桌面上（通过UWP）和在Web浏览器上（使用WASM版本）可用。
- en: Creating the app
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: 'We''ll start by creating the solution for the app:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建应用程序的解决方案开始。
- en: In Visual Studio, create a new project with the **Multi-Platform App (Uno Platform)**
    template.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，使用**多平台应用程序（Uno Platform）**模板创建一个新项目。
- en: Give the project the name `Dashboard`. You can use a different name, but you'll
    need to adjust all subsequent code snippets accordingly.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目命名为`Dashboard`。您可以使用不同的名称，但需要相应调整所有后续的代码片段。
- en: Remove all the platform head projects *except* for the **UWP** and **WASM**
    ones.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有平台头项目，**除了** **UWP** 和 **WASM**。
- en: To avoid the need to write more code than necessary, we'll now add a reference
    to the shared library project. Right-click on the solution node in `UnoBookRail.Common.csproj`
    file, and click **Open**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了避免写更多的代码，我们现在将添加对共享库项目的引用。右键单击`UnoBookRail.Common.csproj`文件中的解决方案节点，然后单击**打开**。
- en: For each platform-specific project, we need to add a reference to the common
    library project. Right-click on the `UnoBookRail.Common` and click **OK**. Now
    *repeat this process for the WASM project*.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个特定于平台的项目，我们需要添加对共享库项目的引用。右键单击`UnoBookRail.Common`，然后单击**确定**。现在*重复此过程以进行WASM项目*。
- en: With the basic solution structure now ready, we can add some functionality to
    the main page.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基本的解决方案结构已经准备好，我们可以向主页面添加一些功能。
- en: Creating the individual pages
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建各个页面
- en: 'We''ll use a separate page for each area of functionality we''re going to show:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为要显示的每个功能区域使用单独的页面：
- en: Create a new folder in the `Views`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views`中创建一个新文件夹。
- en: In the `Views` folder, add *three* new pages named `FinancePage.xaml`, `OperationsPage.xaml`,
    and `NetworkPage.xaml`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views`文件夹中，添加名为`FinancePage.xaml`、`OperationsPage.xaml`和`NetworkPage.xaml`的*三个*新页面。
- en: We'll now update the main page to be able to navigate between these new pages.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新主页面以在这些新页面之间进行导航。
- en: Creating the main page
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主页面
- en: 'The app already contains the file `MainPage.xaml`, and we''ll use it as the
    container for the ability to navigate between the other pages:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序已经包含了文件`MainPage.xaml`，我们将使用它作为在其他页面之间导航的容器：
- en: 'Replace the grid in `MainPage.xaml` with the following `NavigationView` control
    that contains options for each of the separate pages we''ll implement:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用包含每个我们将实现的单独页面选项的以下`NavigationView`控件替换`MainPage.xaml`中的网格：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We now need to add the handler for the `NavItemSelected` event mentioned previously
    to do the actual navigation between pages. Add the following to `MainPage.xaml.cs`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要添加`NavItemSelected`事件的处理程序，以执行页面之间的实际导航。在`MainPage.xaml.cs`中添加以下内容：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also need to implement the `NavBackRequested` method to handle the user
    pressing the back button to navigate back through the pages. Add the following
    to do this:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要实现`NavBackRequested`方法来处理用户按下返回按钮导航回页面。添加以下内容来实现这一点：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Navigation
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 导航
- en: This app uses a custom-defined frame and a stack-based navigation style. This
    allows the user to press the built-in back button to return to a previous page.
    While this may not be considered the most appropriate for this app, it is one
    of the most popular ways that developers implement navigation within a UWP app.
    For this reason, we thought it appropriate to include this in this book and show
    it can be incorporated into an Uno Platform app.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序使用自定义定义的框架和基于堆栈的导航样式。这允许用户按下内置的返回按钮返回到上一页。虽然这可能不被认为是这个应用程序最合适的方式之一，但这是开发人员在UWP应用程序中实现导航的最流行方式之一。因此，我们认为将其包含在本书中并展示它可以被整合到Uno平台应用程序中是合适的。
- en: 'The preceding will allow us to navigate between the pages when an item is selected
    from the menu, but we also want a page to be shown when the app is first opened.
    To do this, add the following call at the *end* of the `MainPage` constructor:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的内容将允许我们在菜单中选择项目时在页面之间进行导航，但我们也希望在应用程序首次打开时显示一个页面。为此，在`MainPage`构造函数的*末尾*添加以下调用：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The code in this section shows the simplest way to enable navigation between
    pages in a `NavigationView` control. This is certainly not the only way to do
    this or a recommendation that it should always be done this way.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的代码显示了在`NavigationView`控件中启用页面之间导航的最简单方法。这当然不是唯一的方法，也不是应该总是这样做的建议。
- en: With all the basics in place, we're now ready to add a graph to the finance
    page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有基础都已就绪，我们现在可以向财务页面添加一个图表。
- en: Displaying charts with controls from SyncFusion
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用来自SyncFusion的控件显示图表
- en: 'SyncFusion is a company that makes UI components for web, desktop, and mobile
    development. Their Uno Platform controls are in the beta state at the time of
    writing and are free to use during this preview period via their community license
    ([https://www.syncfusion.com/products/communitylicense](https://www.syncfusion.com/products/communitylicense)).
    Many different chart types are available, but we''ll use a line chart to create
    a page like the one shown in *Figure 6.1*. The chart is displayed along with some
    arrows that provide some general trend data so that the person viewing them has
    an at-a-glance summary of the data. Imagine them representing how the data compares
    to the same day in the previous week, month, and year:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SyncFusion是一家为Web、桌面和移动开发制作UI组件的公司。他们的Uno平台控件在撰写本文时处于测试阶段，并且在预览期间可以免费使用，通过他们的社区许可证([https://www.syncfusion.com/products/communitylicense](https://www.syncfusion.com/products/communitylicense))。有许多不同的图表类型可用，但我们将使用线图来创建一个类似于*图6.1*所示的页面。图表显示在一些箭头旁边，提供一些一般趋势数据，以便查看它们的人可以快速了解数据的摘要。想象它们代表数据与上周、上个月和去年同一天相比较的情况：
- en: '![Figure 6.1 – Finance information including a graph from SyncFusion'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1-包括来自SyncFusion的图表的财务信息'
- en: '](img/Figure_6.01_B17132.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.01_B17132.jpg)'
- en: Figure 6.1 – Finance information including a graph from SyncFusion
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1-包括来自SyncFusion的图表的财务信息
- en: Updating references to include the SyncFusion controls
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新引用以包括SyncFusion控件
- en: 'The beta version of the SyncFusion Uno chart controls is available with the
    full source code on GitHub:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SyncFusion Uno图表控件的测试版本可在GitHub上获得完整的源代码：
- en: Download or clone the code from [https://github.com/syncfusion/Uno.SfChart](https://github.com/syncfusion/Uno.SfChart).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/syncfusion/Uno.SfChart](https://github.com/syncfusion/Uno.SfChart)下载或克隆代码。
- en: Add the **Syncfusion.SfChart.Uno.csproj** project to the solution by right-clicking
    on the solution and selecting **Add** | **Existing Project…**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过右键单击解决方案并选择**添加** | **现有项目…**，将**Syncfusion.SfChart.Uno.csproj**项目添加到解决方案中。
- en: Update the **Syncfusion.SfChart.Uno** project to use the latest version of the
    **Uno.UI** package. This is to avoid any issues from trying to use different versions
    of the library in different projects within the solution.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新**Syncfusion.SfChart.Uno**项目以使用最新版本的**Uno.UI**包。这是为了避免在解决方案中的不同项目中使用不同版本的库时出现任何问题。
- en: Reference the **Syncfusion.SfChart.Uno** project from the *UWP* and *WASM* projects.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*UWP*和*WASM*项目中引用**Syncfusion.SfChart.Uno**项目。
- en: We're now ready to use the controls in the app.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在应用程序中使用这些控件。
- en: Important note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As the SyncFusion controls are only available from the source, while not expected,
    they may have changed when you read this. Hopefully, compiled versions of the
    controls are available, but if you need to get to a state comparable to when this
    was written, use commit **43cd434**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SyncFusion控件仅从源代码中获取，虽然不太可能，但当您阅读本文时它们可能已经发生了变化。希望可以获得编译版本的控件，但如果您需要达到与本文撰写时相当的状态，请使用提交**43cd434**。
- en: Drawing a line chart
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制线图
- en: 'We can draw a simple line chart by following these steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下步骤绘制一个简单的线图：
- en: 'Start by adding this namespace to `FinancePage.xaml`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将此命名空间添加到`FinancePage.xaml`中：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now replace the grid with the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在用以下内容替换网格：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To provide the data, we need to add the following to the class in `FinancePage.xaml.cs`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提供数据，我们需要在`FinancePage.xaml.cs`中的类中添加以下内容：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These properties require you to add this `using` declaration:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些属性需要您添加此`using`声明：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We must also create the following class that the `SfChart` object will use
    to find the named properties we referenced in the XAML:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还必须创建以下类，`SfChart`对象将使用它来查找我们在XAML中引用的命名属性：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We've obviously only created a simple chart here, but the critical point is
    to notice how easy it was. A real dashboard would likely show more than a single
    chart. You can see examples of the charts you could include in the sample app
    included in the repository at [https://github.com/syncfusion/Uno.SfChart](https://github.com/syncfusion/Uno.SfChart).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们在这里只创建了一个简单的图表，但关键是要注意它是多么容易。一个真正的仪表板可能会显示不止一个图表。您可以在存储库中包含的示例应用程序中看到您可以包含的图表的示例[https://github.com/syncfusion/Uno.SfChart](https://github.com/syncfusion/Uno.SfChart)。
- en: We've seen how easy it was to include a chart from one vendor to show financial
    information. Let's now add a chart from another to display some different information.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何轻松地包含来自一个供应商的图表来显示财务信息。现在让我们添加另一个供应商的图表，以显示一些不同的信息。
- en: Displaying charts with controls from Infragistics
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Infragistics控件显示图表
- en: Infragistics is a company that provides UI and UX tools for a variety of platforms.
    They also have a selection of controls to use in Uno Platform apps that are free
    to use while in preview.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Infragistics是一家为各种平台提供UI和UX工具的公司。他们还有一系列控件可供Uno平台应用程序使用，在预览期间免费使用。
- en: 'You can learn more about these controls at [https://www.infragistics.com/products/uno-platform](https://www.infragistics.com/products/uno-platform)
    or follow along as we add a chart to the app to show information relating to the
    current operation of the UnoBookRail business and create a page that looks like
    the one in *Figure 6.2*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.infragistics.com/products/uno-platform](https://www.infragistics.com/products/uno-platform)了解更多关于这些控件的信息，或者跟随我们为应用程序添加图表，以显示与UnoBookRail业务的当前操作相关的信息，并创建一个看起来像*图6.2*的页面：
- en: '![Figure 6.2 – Network operations details shown on a chart from Infragistics'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 - 来自Infragistics的图表上显示的网络操作详细信息'
- en: '](img/Figure_6.02_B17132.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.02_B17132.jpg)'
- en: Figure 6.2 – Network operations details shown on a chart from Infragistics
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 - 来自Infragistics的图表上显示的网络操作详细信息
- en: Updating references
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新引用
- en: 'To be able to use the controls in our app, we must first make the following
    modifications:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在我们的应用程序中使用这些控件，我们必须首先进行以下修改：
- en: 'Reference the `Infragistics.Uno.Charts` NuGet package in the **UWP** project:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**UWP**项目中引用`Infragistics.Uno.Charts` NuGet包：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Reference the `Infragistics.Uno.Wasm.Charts` NuGet package in the **WASM**
    project:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**WASM**项目中引用`Infragistics.Uno.Wasm.Charts` NuGet包：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Reference the `Uno.SkiaSharp.Views` and `Uno.SkiaSharp.Wasm` NuGet packages
    in the **WASM** project. This is necessary because the Infragistics controls use
    SkiaSharp to draw the controls. This is different from the SyncFusion control
    we used previously, which uses XAML:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**WASM**项目中引用`Uno.SkiaSharp.Views`和`Uno.SkiaSharp.Wasm` NuGet包。这是必要的，因为Infragistics控件使用SkiaSharp来绘制控件。这与我们之前使用的SyncFusion控件不同，后者使用XAML：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With those simple modifications, we can now add the chart to our app.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些简单的修改，我们现在可以将图表添加到我们的应用程序中。
- en: Important note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you notice any strange compilation behaviors after making the preceding changes,
    try cleaning the solution, closing all open instances of Visual Studio, and then
    reopening the solution. This shouldn't be necessary, but we have found this to
    be required on a few occasions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在进行上述更改后注意到任何奇怪的编译行为，请尝试清理解决方案，关闭所有打开的Visual Studio实例，然后重新打开解决方案。这不应该是必要的，但我们发现在某些情况下需要这样做。
- en: You may also see entries in the error list from the SyncFusion project despite
    it successfully compiling. These errors can be safely ignored.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还会在SyncFusion项目的错误列表中看到条目，尽管它成功编译。这些错误可以安全地忽略。
- en: Drawing a column chart
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制柱状图
- en: 'We''ll now add content to the **Operations** page of the app. For simplicity,
    we''re going to only add two pieces of information. We''ll add a chart to show
    how many of each ticket type has been used each hour today. Additionally, we''ll
    display the number of people currently on trains or in stations, based on people
    presenting tickets to enter a station but not having subsequently exited:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为应用程序的**Operations**页面添加内容。为简单起见，我们只添加两条信息。我们将添加一个图表，显示今天每小时使用了多少张票的类型。此外，我们将根据持票进入车站但随后没有出站的人数，显示目前在火车上或车站中的人数：
- en: 'Add the following namespace to the `Page` element of `OperationsPage.xaml`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下命名空间添加到`OperationsPage.xaml`的`Page`元素中：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now add the following XAML as the contents of the page:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下XAML添加为页面的内容：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following `using` directive to `OperationsPage.xaml.cs`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OperationsPage.xaml.cs`中添加以下`using`指令：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These are needed for the properties we'll add to this file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将添加到此文件的属性所需的。
- en: 'Add the following to the `OperationsPage` class providing the data shown in
    the chart:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`OperationsPage`类中，提供图表中显示的数据：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we need to add the `PersonCount` class we''ve just referenced:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加刚刚引用的`PersonCount`类：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With that, we now have a simple page charting the number of passengers traveling
    each hour.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们现在有一个简单的页面图表，显示每小时旅行的乘客数量。
- en: As with the SyncFusion charts, Infragistics has many more charts and other controls
    available. You can find examples of these at [https://github.com/Infragistics/uno-samples](https://github.com/Infragistics/uno-samples).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与SyncFusion图表一样，Infragistics还有许多其他图表和控件可用。您可以在[https://github.com/Infragistics/uno-samples](https://github.com/Infragistics/uno-samples)找到这些示例。
- en: Now that we've seen different ways of displaying more complex controls using
    libraries from third parties, let's look at drawing something more complicated
    ourselves.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了使用第三方库显示更复杂控件的不同方法，让我们来看看如何自己绘制更复杂的东西。
- en: Drawing custom graphics with SkiaSharp
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SkiaSharp绘制自定义图形
- en: 'UWP and Uno Platform include support for creating shapes and provide basic
    drawing capabilities. However, sometimes you need to display something in your
    app that can''t easily be done with standard controls, you require fine-grained
    control, or you encounter performance issues when manipulating large numbers of
    XAML controls. In these situations, it can be necessary to draw directly onto
    the UI yourself. One of the ways to do this is with SkiaSharp. SkiaSharp is a
    cross-platform 2D graphics API based on Google''s Skia graphics library that we
    can use in our Uno Platform apps. To show how simple it is to use, we''ll create
    the final part of our application, which shows on a map where the trains in the
    network currently are. In just a few lines of code, we''ll create something that
    looks as in the screenshot shown in *Figure 6.3*:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: UWP和Uno平台包括支持创建形状并提供基本绘图功能。然而，有时您需要在应用程序中显示一些无法轻松使用标准控件完成的东西，您需要精细的控制，或者在操作大量XAML控件时遇到性能问题。在这些情况下，可能需要直接在UI上进行绘制。其中一种方法是使用SkiaSharp。SkiaSharp是一个基于Google的Skia图形库的跨平台2D图形API，我们可以在Uno平台应用程序中使用。为了展示使用起来有多简单，我们将创建我们应用程序的最后一部分，显示网络中火车当前位置的地图。只需几行代码，我们就可以创建出类似*图6.3*中显示的屏幕截图的东西：
- en: '![Figure 6.3 – The network map shown in the app when running in a browser'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3-在浏览器中运行时应用程序中显示的网络地图'
- en: '](img/Author_Figure_6.03_B17132.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Author_Figure_6.03_B17132.jpg)'
- en: Figure 6.3 – The network map shown in the app when running in a browser
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3-在浏览器中运行时应用程序中显示的网络地图
- en: Now you've seen what we're going to create, let's get on and do it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到我们要创建的东西了，让我们开始做吧。
- en: Updating project references
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新项目引用
- en: The references we need to use SkiaSharp in our app have already been added as
    part of the references we added to use the Infragistics controls. If you've made
    these changes, there's nothing to do here.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用程序中需要使用SkiaSharp的引用已经作为我们添加到使用Infragistics控件的引用的一部分添加。如果您已经进行了这些更改，这里就没有什么要做的了。
- en: 'If you are following along and *haven''t* added the Infragistics controls in
    the last section, you''ll need to make the following change to your solution:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在上一节中跟着做，并且*没有*添加Infragistics控件，您需要对解决方案进行以下更改：
- en: 'Reference the `Uno.SkiaSharp.Views` and `Uno.SkiaSharp.Wasm` NuGet packages
    in the **WASM** project:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**WASM**项目中引用`Uno.SkiaSharp.Views`和`Uno.SkiaSharp.Wasm` NuGet包：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With the relevant references added, we're now ready to draw the network map.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加相关引用之后，我们现在准备绘制网络地图。
- en: Drawing the network map
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制网络地图
- en: 'To draw the network map in the app, we need to take the following steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序中绘制网络地图，我们需要采取以下步骤：
- en: 'In `NetworkPage.xaml`, add the following as the only content. This is the control
    that will show our drawing:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NetworkPage.xaml`中，添加以下作为唯一的内容。这是将显示我们绘制的控件：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To draw the map on the `SKXamlCanvas` control, we''ll need to add the following
    using declarations to `NetworkPage.xaml.cs`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在`SKXamlCanvas`控件上绘制地图，我们需要在`NetworkPage.xaml.cs`中添加以下使用声明：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we must add the `OnPaintSurface` method we referenced in the XAML. This
    method is called by the control whenever it needs to redraw the image. This will
    be when the control is first loaded and whenever the rendered size of the control
    changes:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须添加我们在XAML中引用的`OnPaintSurface`方法。每当控件需要重新绘制图像时，该方法将被控件调用。这将在控件首次加载时以及控件的渲染大小发生变化时发生：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the `SetUpCanvas` method to initialize and position the image correctly:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`SetUpCanvas`方法来正确初始化和定位图像：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `SetUpCanvas` method sizes our drawing area to be as big as possible without
    distorting or stretching it and ensures it is always centered horizontally and
    vertically. Finally, it clears the canvas and returns it, ready for the other
    methods to draw upon it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetUpCanvas`方法调整我们的绘图区域尽可能大，而不会扭曲或拉伸它，并确保它始终水平和垂直居中。最后，它清除画布并返回它，准备让其他方法在其上绘制。'
- en: 'Add the `DrawLines` method to draw the branch lines on the canvas:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`DrawLines`方法来在画布上绘制支线：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code, the station positions returned by the library are converted
    to a Skia-specific array used to draw a polygon connecting all the points.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，库返回的站点位置被转换为Skia特定的数组，用于绘制连接所有点的多边形。
- en: 'Add the `DrawStations` method to draw the station positions on the branch lines:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`DrawStations`方法来在支线上绘制站点位置：
- en: '[PRE23]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `DrawStations` method is simple as all it does is draw a circle for each
    station.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`DrawStations`方法很简单，因为它只是为每个站点绘制一个圆圈。'
- en: 'Add the `DrawTrains` method to show where the trains currently are on the map:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`DrawTrains`方法添加到地图上显示火车当前位置的方法：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `DrawTrains` method is again simple as it loops through the provided data
    and draws a cyan circle at each position. Because this is drawn after the station
    circles, it will appear above them when a train is at a station.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`DrawTrains`方法同样简单，因为它循环遍历提供的数据，并在每个位置绘制一个青色的圆圈。因为这是在站点圆圈之后绘制的，所以当火车在站点时，它会出现在站点上方。'
- en: Important note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this chapter, we've only used a few circles and lines to create our map.
    However, SkiaSharp is capable of much more than we have space to cover here. You
    might want to explore the other functionality available by extending the map we've
    just created to include the names of stations or add other details that show the
    direction a train is heading or if it is at a station.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只使用了一些圆圈和线条来创建我们的地图。然而，SkiaSharp能够做的远不止我们在这里介绍的。您可能希望通过扩展我们刚刚创建的地图来探索其他可用的功能，包括包括站点名称或添加显示火车行驶方向或是否在站点的其他细节。
- en: We now have all the pages of our app implemented, but we can further improve
    things by having the content adjust depending on the size of the screen or window.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了应用程序的所有页面，但我们可以通过根据屏幕或窗口的大小调整内容来进一步改进。
- en: Responding to changes in the UI
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应UI的变化
- en: Your apps will need to run on different sized screens and windows. Some of these
    differences will be due to the different devices the app will run on, but you
    may also need to account for windows that can be resized by the user.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序将需要在不同大小的屏幕和窗口上运行。其中一些差异是由应用程序运行的不同设备引起的，但您可能还需要考虑用户可以调整大小的窗口。
- en: It's possible to design multiple versions of a page and load the appropriate
    one at runtime. However, it's usually much easier to create a single page that
    adjusts to the available dimensions. We'll look at how to do that with the features
    available.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 可以设计页面的多个版本，并在运行时加载适当的版本。但通常更容易创建一个根据可用尺寸调整的单个页面。我们将看看如何使用可用的功能来实现这一点。
- en: Changing the page layout
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改页面布局
- en: Uno Platform allows you to create a responsive UI by switching between `VisualStates`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Uno平台允许您通过在`VisualStates`之间切换来创建响应式UI。
- en: 'It''s possible to create `AdaptiveTrigger` element that fires based on the
    size of the control to which it is attached. We''ll now use adaptive triggers
    to adjust the **Finance** and **Operations** pages to better lay out their contents
    based on the available width:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建`AdaptiveTrigger`元素，根据其附加的控件的大小触发。现在我们将使用自适应触发器来调整**财务**和**运营**页面，以更好地根据可用宽度布置其内容：
- en: 'Add the following as the first child of `RelativePanel` in `FinancePage.xaml`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加为`FinancePage.xaml`中`RelativePanel`的第一个子元素：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can now do a similar thing with the grid in the `OperationsPage.xaml` page.
    Add the following immediately below the row and column definitions:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以在`OperationsPage.xaml`页面的网格中做类似的事情。在行和列定义下方立即添加以下内容：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With these setters, we''re making use of the row and column definitions we
    created earlier. While the initial code put the controls in separate rows, here
    we''re changing the controls so they are in different columns and span the rows
    when the window is wider. As you can see in *Figure 6.4*, this means that the
    number of people currently on trains is displayed beside the chart, rather than
    below it:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些设置器，我们正在利用之前创建的行和列定义。初始代码将控件放在不同的行中，而在这里我们正在更改控件，使它们位于不同的列中，并在窗口更宽时跨越行。如*图6.4*所示，这意味着当前在火车上的人数显示在图表旁边，而不是下方：
- en: '![Figure 6.4 – The Finance and Operations pages shown in a landscape layout'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4-以横向布局显示的财务和运营页面'
- en: '](img/Figure_6.04_B17132.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.04_B17132.jpg)'
- en: Figure 6.4 – The Finance and Operations pages shown in a landscape layout
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4-以横向布局显示的财务和运营页面
- en: With these two examples, we've seen different ways of changing how the elements
    on a page can be repositioned to change the layout. There is no one right way
    to adjust all pages for different amounts of available space. State triggers can
    be used to change any property on an element, and it's also possible to have multiple
    triggers so you could, for example, have different layouts for small, medium,
    and large screens.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个示例，我们已经看到了改变页面上元素重新定位以更改布局的不同方法。没有一种适合所有不同可用空间量的页面的正确方法。状态触发器可用于更改元素上的任何属性，还可以使用多个触发器，因此您可以为小型、中型和大型屏幕制定不同的布局，例如。
- en: Changing the layout of the elements on the screen isn't the only way to adjust
    what's shown. It's also possible to have the controls themselves adjust, resize,
    and redraw themselves to fit the space.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 更改屏幕上元素的布局不是调整显示内容的唯一方法。控件本身也可以调整、调整大小和重绘以适应空间。
- en: Stretching and scaling content to fit the available space
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉伸和缩放内容以适应可用空间
- en: One of the strengths of XAML is its ability to dynamically lay out controls
    and not rely on providing specific sizes for each element. It's possible to resize
    individual XAML controls by setting the `HorizontalAlignment` and `VerticalAlignment`
    properties to control how they make use of the available space. Setting the values
    of these properties to `Stretch` will allow them to take up all the available
    space in their parent element. For more complex scenarios, you can also use a
    `ViewBox` element to transform controls by stretching them in different ways and
    directions.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: XAML的一个优点是其能够动态布局控件，而不依赖于为每个元素提供特定大小。可以通过设置`HorizontalAlignment`和`VerticalAlignment`属性来调整单个XAML控件的大小，以控制它们如何利用可用空间。将这些属性的值设置为`Stretch`将允许它们占用其父元素中的所有可用空间。对于更复杂的情况，还可以使用`ViewBox`元素以不同的方式和方向拉伸控件。
- en: If you wish to know more about creating layouts with XAML elements, you'll find
    some useful links at [https://platform.uno/docs/articles/winui-doc-links-development.html#layouting](https://platform.uno/docs/articles/winui-doc-links-development.html#layouting).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解如何使用XAML元素创建布局的更多信息，您可以在[https://platform.uno/docs/articles/winui-doc-links-development.html#layouting](https://platform.uno/docs/articles/winui-doc-links-development.html#layouting)找到一些有用的链接。
- en: Many controls also automatically adjust to use all or as much of the available
    space as appropriate. We did this with the map we drew with SkiaSharp. The map
    was drawn as large as possible without distorting it. It was aligned in the center
    of the available space regardless of whether the window was of a portrait or landscape
    aspect ratio.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 许多控件也会自动调整以使用所有或尽可能多的可用空间。我们在SkiaSharp绘制的地图上做到了这一点。地图被绘制得尽可能大，而不会扭曲。它被放置在可用空间的中心，无论窗口是纵向还是横向纵横比。
- en: Now that all the pages adjust to the available space, our app and this chapter
    are complete.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有页面都已调整到可用空间，我们的应用程序和本章已经完成。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built an app that works on UWP and in a web browser. The
    app used graphing controls from SyncFusion and Infragistics. We also created a
    custom map with SkiaSharp. Finally, we looked at how to adjust the UI layout in
    response to different and changing screen sizes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们构建了一个可以在UWP和Web浏览器上运行的应用程序。该应用程序使用了SyncFusion和Infragistics的图形控件。我们还使用SkiaSharp创建了一个自定义地图。最后，我们看了如何根据不同和变化的屏幕尺寸调整UI布局。
- en: This chapter is the last in this part of the book. In the next part, we'll move
    on from building apps to look at how to test and deploy them. In the next chapter,
    we'll look at how to use the `Uno.UITest` library as part of your broader testing
    strategy. When building applications that run on multiple platforms, automating
    the testing across those platforms can save lots of time and boost your productivity.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章是本书的这一部分的最后一章。在接下来的部分中，我们将从构建应用程序转向如何测试和部署它们。在下一章中，我们将看看如何在更广泛的测试策略中使用`Uno.UITest`库。在构建可以在多个平台上运行的应用程序时，自动化跨平台的测试可以节省大量时间并提高生产率。
