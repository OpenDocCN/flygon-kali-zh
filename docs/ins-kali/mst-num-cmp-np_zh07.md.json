["```py\nimport numpy as np\narray_x = np.array([100.12, 120.23, 130.91])\n```", "```py\nprint(array_x.dtype)\nfloat64\n```", "```py\nnp.sctypes\n{'complex': [numpy.complex64, numpy.complex128, numpy.complex256],\n'float': [numpy.float16, numpy.float32, numpy.float64, numpy.float128],\n'int': [numpy.int8, numpy.int16, numpy.int32, numpy.int64],\n'others': [bool, object, bytes, str, numpy.void],\n'uint': [numpy.uint8, numpy.uint16, numpy.uint32, numpy.uint64]}\n```", "```py\nnp.float64.mro()\n[numpy.float64,\nnumpy.floating,\nnumpy.inexact,\nnumpy.number,\nnumpy.generic,\nfloat,\nobject]\n```", "```py\nnp.int64.mro()\n[numpy.int64,\nnumpy.signedinteger,\nnumpy.integer,\nnumpy.number,\nnumpy.generic,\nobject]\n```", "```py\nclass First:\n    def firstmethod(self):\n        print(\"Call from First Class, first method.\")\n\nclass Second:\n    def secondmethod(self):\n        print(\"Call from Second Class, second method.\")\n\nclass Third(First, Second):\n    def thirdmethod(self):\n        print(\"Call from Third Class, third method.\")\n```", "```py\nmyclass = Third()\ndir(myclass)\n[...\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n 'firstmethod',\n 'secondmethod',\n 'thirdmethod']\n```", "```py\nmyclass.firstmethod()\nmyclass.secondmethod()\nmyclass.thirdmethod()\n## Call from First Class, first method.\n## Call from Second Class, second method.\n## Call from Third Class, third method.\n```", "```py\nclass First:\n    def firstmethod(self):\n        print(\"Call from First Class, first method.\")\n\nclass Second:\n    def firstmethod(self):\n        print(\"Call from Second Class, first method.\")\n    def secondmethod(self):\n        print(\"Call from Second Class, second method.\")\n\nclass Third(First, Second):\n    def thirdmethod(self):\n        print(\"Call from Third Class, third method.\")\n```", "```py\nmyclass = Third()\nmyclass.firstmethod()\nmyclass.secondmethod()\nmyclass.thirdmethod()\n## Call from First Class, first method.\n## Call from Second Class, second method.\n## Call from Third Class, third method.\n```", "```py\nThird.__mro__\n```", "```py\n(__main__.Third, __main__.First, __main__.Second, object)\n```", "```py\nnp.float64(100.12).nbytes\n8\nnp.str_('n').nbytes\n4\nnp.str_('numpy').nbytes\n20\n```", "```py\nnp.float64(array_x).nbytes\n24\n```", "```py\narray_x2 = array_x.astype(np.float32)\narray_x2\narray([100.12, 120.23, 130.91], dtype=float32)\nnp.float32(array_x2).nbytes\n12\n```", "```py\narray_x.__array_interface__\n{'data': (140378873611440, False),\n'descr': [('', '<f8')],\n'shape': (3,),\n'strides': None,\n'typestr': '<f8',\n'version': 3}\n```", "```py\nimport numpy as np\n\nX = np.array([1,2,3,2,1,3,9,8,11,12,10,11,14,25,26,24,30,22,24,27])\n\nX[::4]\n## array([ 1, 1, 11, 14, 30])\n```", "```py\nnd_1 = np.random.randn(4, 6, 8)\n\nnd_1\n## array([[[ 0.64900179, -0.00494884, -0.97565618, -0.78851039],\n[ 0.05165607, 0.068948 , 1.54542042, 1.68553396],\n[-0.80311258, 0.95298682, -0.85879725, 0.67537715]],\n[[ 0.24014811, -0.41894241, -0.00855571, 0.43483418],\n[ 0.43001636, -0.75432657, 1.16955535, -0.42471807],\n[ 0.6781286 , -1.87876591, 1.02969921, 0.43215107]]])\n```", "```py\nnd_2 = nd_1[::, ::2, ::2]\n```", "```py\nprint(nd_2)\n[[[ 0.64900179 -0.97565618]\n[-0.80311258 -0.85879725]]\n[[ 0.24014811 -0.00855571]\n[ 0.6781286 1.02969921]]]\n```", "```py\nnd_1.__array_interface__\n{'data': (140547049888960, False),\n'descr': [('', '<f8')],\n'shape': (2, 3, 4),\n'strides': None,\n'typestr': '<f8',\n'version': 3}\n\nnd_2.__array_interface__ \n{'data': (140547049888960, False),\n'descr': [('', '<f8')],\n'shape': (2, 2, 2),\n'strides': (96, 64, 16),\n'typestr': '<f8',\n'version': 3}\n```", "```py\nnd_1 = np.random.randn(400, 600)\nnd_2 = np.random.randn(400, 600*20)[::, ::20]\n```", "```py\nprint(nd_1.shape, nd_2.shape)\n(400, 600) (400, 600)\n```", "```py\n%%timeit\nnp.cumprod(nd_1)\n## 802 \u00b5s \u00b1 20.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n```", "```py\n%%timeit\nnp.cumprod(nd_2)\n## 12 ms \u00b1 71.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n```", "```py\nnd_1.__array_interface__ \n{'data': (4569473024, False),\n'descr': [('', '<f8')],\n'shape': (400, 600),\n'strides': None,\n'typestr': '<f8',\n'version': 3}\n\nnd_2.__array_interface__ \n{'data': (4603252736, False),\n'descr': [('', '<f8')],\n'shape': (400, 600),\n'strides': (96000, 160),\n'typestr': '<f8',\n'version': 3}\n```", "```py\nimport numexpr as ne\n\n%%timeit\n2 * nd_2 + 48\n## 4 ms \u00b1 10.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n%%timeit\nne.evaluate(\"2 * nd_2 + 48\")\n## 843 \u00b5s \u00b1 8.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n```", "```py\narray_x[:2].__array_interface__['data'][0]\n## 140378873611440\narray_x[:2].__array_interface__['data'][0] == array_x.__array_interface__['data'][0]\n## True\n```", "```py\narray_x[1:].__array_interface__['data'][0]\n## 140378873611448\narray_x[1:].__array_interface__['data'][0] == array_x.__array_interface__['data'][0]\n## False\n```", "```py\narray_f = np.array([[100.12, 120.23, 130.91], [90.45, 110.32, 120.32]])\nprint(array_f)\n## [[100.12 120.23 130.91]\n## [ 90.45 110.32 120.32]]\n\narray_f.flags\n## C_CONTIGUOUS : True\n## F_CONTIGUOUS : False\n## OWNDATA : True\n## WRITEABLE : True\n## ALIGNED : True\n## WRITEBACKIFCOPY : False\n## UPDATEIFCOPY : False\n```", "```py\narray_f.flags['C_CONTIGUOUS']\n## True\n\narray_f.flags.c_contiguous\n## True\n```", "```py\nnp.reshape(array_f, (3, 2), order='C')\n## array([[100.12, 120.23],\n## [130.91, 90.45],\n## [110.32, 120.32]])\n\nnp.reshape(array_f, (3, 2), order='F')\n## array([[100.12, 110.32],\n## [ 90.45, 130.91],\n## [120.23, 120.32]])\n```", "```py\nshape = (400,400,400)\n\narray_x = np.random.random_sample(shape)\n\nimport cProfile\nimport re\n\ncProfile.run('array_x *= 2')\n\n## 3 function calls in 0.065 seconds\n## Ordered by: standard name\n## ncalls tottime percall cumtime percall filename:lineno(function)\n##      1   0.065   0.065   0.065   0.065 <string>:1(<module>)\n##      1   0.000   0.000   0.065   0.065 {built-in method builtins.exec}\n##      1   0.000   0.000   0.000   0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\nimport cProfile\nimport re\ncProfile.run('array_y = array_x * 2')\n\n## 3 function calls in 0.318 seconds\n## Ordered by: standard name\n## ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n##      1    0.318    0.318    0.318    0.318 <string>:1(<module>)\n##      1    0.000    0.000    0.318    0.318 {built-in method builtins.exec}\n##      1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n```", "```py\nshape_x = (8000,3000)\n\narray_x = np.random.random_sample(shape_x)\n\n%%timeit\nnp.cumprod(array_x)\n## 176 ms \u00b1 2.32 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n```", "```py\noutput_array = np.zeros(array_x.shape[0] * array_x.shape[1])\n\n%%timeit\nnp.cumprod(array_x, out=output_array)\n## 86.4 ms \u00b1 1.21 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n```", "```py\nimport numpy as np\n\nX = np.array([1,2,3,2,1,3,9,8,11,12,10,11,14,25,26,24,30,22,24,27])\n\nn_clusters = 3\n\ndef Kmeans_1D(X, n_clusters, random_seed=442):\n\n  # Randomly choose random indexes as cluster centers\n  rng = np.random.RandomState(random_seed)\n  i = rng.permutation(X.shape[0])[:n_clusters]\n  c_centers = X[i]\n\n  # Calculate distances between each point and cluster centers\n  deltas = np.array([np.abs(point - c_centers) for point in X])\n\n  # Get labels for each point\n  labels = deltas.argmin(1)\n\n  while True:\n\n    # Calculate mean of each cluster\n    new_c_centers = np.array([X[np.where(deltas.argmin(1) == i)[0]].mean() for i in range(n_clusters)])\n\n    # Calculate distances again\n    deltas = np.array([np.abs(point - new_c_centers) for point in X])\n\n    # Get new labels for each point\n    labels = deltas.argmin(1)\n\n    # If there's no change in centers, exit\n    if np.all(c_centers == new_c_centers):\n      break\n    c_centers = new_c_centers\n\n  return c_centers, labels\n\nc_centers, labels = Kmeans_1D(X, 3)\n\nprint(c_centers, labels)\n```", "```py\n$ vprof -c p to_be_profiled.py\nRunning Profiler...\n[10.71428571 25.42857143 2\\. ] [2 2 2 2 2 2 0 0 0 0 0 0 0 1 1 1 1 1 1 1]\nStarting HTTP server...\n```", "```py\n$ vprof -c m to_be_profiled.py\nRunning MemoryProfiler...\n[10.71428571 25.42857143 2\\. ] [2 2 2 2 2 2 0 0 0 0 0 0 0 1 1 1 1 1 1 1]\nStarting HTTP server...\n```", "```py\ndeltas = np.array([np.abs(point - new_c_centers) for point in X])\n```", "```py\n$ vprof -c h to_be_profiled.py\nRunning CodeHeatmapProfiler...\n[10.71428571 25.42857143 2\\. ] [2 2 2 2 2 2 0 0 0 0 0 0 0 1 1 1 1 1 1 1]\nStarting HTTP server...\n```"]