- en: Centralized Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中央配置
- en: In this chapter, we will learn how to use the Spring Cloud Configuration server
    to centralize managing the configuration of our microservices. As already described
    in [Chapter 1](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml), *Introduction to Microservices*,
    in the *Central configuration* section, an increasing number of microservices
    typically come with an increasing number of configuration files that need to be
    managed and updated.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Spring Cloud配置服务器来集中管理微服务的配置。如[第1章](282e7b49-42b8-4649-af81-b4b6830d391d.xhtml)中已经描述的那样，*微服务简介*，在*中央配置*部分，随着微服务数量的增加，需要管理和更新的配置文件数量也在增加。
- en: With the Spring Cloud Configuration server, we can place the configuration files
    for all our microservices in a central configuration repository that will make
    it much easier to handle them. Our microservices will be updated to retrieve their
    configuration from the configuration server at startup.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Cloud配置服务器，我们可以将所有微服务的配置文件放在一个中央配置存储库中，这将使处理它们变得更加容易。我们的微服务将被更新以在启动时从配置服务器检索其配置。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to the Spring Cloud Configuration server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud配置服务器简介
- en: Setting up a config server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置配置服务器
- en: Configuring clients of a config server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置配置服务器的客户端
- en: Structuring the configuration repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置存储库的结构
- en: Trying out the Spring Cloud Configuration server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试Spring Cloud配置服务器
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the commands described in this book are run on a MacBook Pro using macOS
    Mojave but should be straightforward enough to modify in order to be able to run
    on another platform such as Linux or Windows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中描述的所有命令都在使用macOS Mojave的MacBook Pro上运行，但应该很容易修改以在其他平台（如Linux或Windows）上运行。
- en: No new tools need to be installed in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章无需安装新工具。
- en: The source code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12](https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在GitHub上找到，网址为[https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12](https://github.com/PacktPublishing/Hands-On-Microservices-with-Spring-Boot-and-Spring-Cloud/tree/master/Chapter12)。
- en: 'To be able to run the commands as described in the book, download the source
    code to a folder and set up an environment variable, `$BOOK_HOME`, that points
    to that folder. Sample commands include the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够按照书中描述的方式运行命令，将源代码下载到一个文件夹，并设置一个环境变量`$BOOK_HOME`，指向该文件夹。示例命令包括以下内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Java source code is written for Java 8 and tested on Java 12\. This chapter
    uses Spring Cloud 2.1.0, SR1 (also known as the **Greenwich** release), Spring
    Boot 2.1.4, and Spring 5.1.6, that is, the latest available versions of the Spring
    components at the time of writing this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Java源代码是针对Java 8编写的，并在Java 12上进行了测试。本章使用的是Spring Cloud 2.1.0，SR1（也称为**Greenwich**发布版），Spring
    Boot 2.1.4和Spring 5.1.6，即编写本章时可用的Spring组件的最新版本。
- en: The base Docker image, `openjdk:12.0.2`, is used in all Dockerfiles.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Dockerfile中都使用基本的Docker镜像`openjdk:12.0.2`。
- en: 'The source code contains the following Gradle projects:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码包含以下Gradle项目：
- en: '`api`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api`'
- en: '`util`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`util`'
- en: '`microservices/product-service`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务/产品服务
- en: '`microservices/review-service`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`microservices/review-service`'
- en: '`microservices/recommendation-service`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务/推荐服务
- en: '`microservices/product-composite-service`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务/产品组合服务
- en: '`spring-cloud/eureka-server`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/eureka-server`'
- en: '`spring-cloud/gateway`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/gateway`'
- en: '`spring-cloud/authorization-server`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/authorization-server`'
- en: '`spring-cloud/config-server`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spring-cloud/config-server`'
- en: All source code examples in this chapter come from the source code in `$BOOK_HOME/Chapter12`,
    but are, in several cases, edited to remove non-relevant parts of the source code,
    such as comments, import statements, and log statements.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有源代码示例都来自`$BOOK_HOME/Chapter12`中的源代码，但在多种情况下进行了编辑，以删除源代码的非相关部分，如注释、导入语句和日志语句。
- en: If you want to see the changes applied to the source code in [Chapter 12](a250774a-03a1-41b1-b935-cbeb9624b6e3.xhtml),
    *Centralized Configuration*, that is, see what it took to add a configuration
    server, you can compare that with the source code for [Chapter 11](bcb9bba0-d2fe-4ee8-954b-07a7e38e1115.xhtml),
    *Securing Access to APIs*. You can use your favorite `diff` tool and compare the
    two folders, `$BOOK_HOME/Chapter11` and `$BOOK_HOME/Chapter12`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看源代码在[第12章](a250774a-03a1-41b1-b935-cbeb9624b6e3.xhtml)中的更改，即查看添加配置服务器所需的步骤，您可以使用您喜欢的`diff`工具，比较两个文件夹`$BOOK_HOME/Chapter11`和`$BOOK_HOME/Chapter12`。
- en: Introduction to the Spring Cloud Configuration server
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud配置服务器简介
- en: 'The Spring Cloud Configuration server (shortened to *config server*) will be
    added to the existing microservice landscape behind the edge server in [Chapter
    10](a3383211-405d-4319-b142-ddb8cf3674fd.xhtml), *Using Spring Cloud Gateway to
    Hide Microservices Behind an Edge Server*, in the same way as for the other microservices:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud配置服务器（简称*配置服务器*）将被添加到现有的微服务景观中，在[第10章](a3383211-405d-4319-b142-ddb8cf3674fd.xhtml)的边缘服务器后面，以与其他微服务相同的方式进行操作：
- en: '![](img/f1a6d8fa-dd07-47dd-9f4d-3861729c6a70.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1a6d8fa-dd07-47dd-9f4d-3861729c6a70.png)'
- en: 'When it comes to setting up a config server, there are a number of options
    to consider:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置配置服务器时，有许多选项需要考虑：
- en: Selecting a storage type for the configuration repository
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择配置存储库的存储类型
- en: Deciding on the initial client connection, either to the config server or to
    the discovery server
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定初始客户端连接，无论是连接到配置服务器还是发现服务器
- en: Securing the configuration, both against unauthorized access to the API and
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护配置，防止未经授权访问API和
- en: avoiding storing sensitive information in plain text in the configuration repository
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在配置存储库中以明文存储敏感信息
- en: Let's go through each option one by one and also introduce the API exposed by
    the config server.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个讨论每个选项，并介绍配置服务器公开的API。
- en: Selecting the storage type of the configuration repository
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择配置存储库的存储类型
- en: 'As already described in [Chapter 8](9878a36a-5760-41a4-a132-1a2387b61037.xhtml),
    *Introduction to Spring Cloud*, in the *Spring Cloud Config for centralized configuration*
    section, the config server supports storing configuration files in a number of
    different backends, for example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[第8章](9878a36a-5760-41a4-a132-1a2387b61037.xhtml)中已经描述的，*Spring Cloud*的*Spring
    Cloud Config for centralized configuration*部分，配置服务器支持在许多不同的后端存储配置文件，例如：
- en: Git repository
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git存储库
- en: Local filesystem
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地文件系统
- en: HashiCorp Vault
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HashiCorp Vault
- en: A JDBC database
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDBC数据库
- en: In this chapter, we will use a local filesystem. To use the local filesystem,
    the config server needs to be launched with the Spring profile, `native`, enabled.
    The location of the configuration repository is specified using the property,
    `spring.cloud.config.server.native.searchLocations`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用本地文件系统。要使用本地文件系统，配置服务器需要在启用Spring配置文件`native`的情况下启动。配置存储库的位置是使用属性`spring.cloud.config.server.native.searchLocations`指定的。
- en: Deciding on the initial client connection
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定初始客户端连接
- en: By default, a client connects first to the config server to retrieve its configuration.
    Based on the configuration, it connects to the discovery server, that is, Netflix
    Eureka in our case, to register itself. It is also possible to do this the other
    way around, that is, the client first connects to the discovery server to find
    a config server instance and then connects to the config server to get its configuration.
    There are pros and cons to both approaches.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，客户端首先连接到配置服务器以检索其配置。根据配置，它连接到发现服务器，即我们的情况下的Netflix Eureka，以注册自己。也可以以相反的方式进行，即客户端首先连接到发现服务器以查找配置服务器实例，然后连接到配置服务器以获取其配置。这两种方法都有利弊。
- en: In this chapter, the clients will first connect to the config server. With this
    approach, it will be possible to store the configuration of the discovery server,
    that is, Netflix Eureka, in the config server.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，客户端将首先连接到配置服务器。通过这种方法，将能够将发现服务器的配置，即Netflix Eureka，存储在配置服务器中。
- en: To learn more about the other alternative, see [https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#discovery-first-bootstrap](https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_environment_repository).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于其他替代方案的信息，请参阅[https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#discovery-first-bootstrap](https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_environment_repository)。
- en: One concern with connecting to the config server first is that the config server can
    become a single point of failure. If the clients connect first to a discovery
    service, such as Netflix Eureka, there can be multiple config server instances
    registered, so that a single point of failure can be avoided. When, later on in
    this book, we learn about the *service* concept in Kubernetes, we will see how
    we can avoid a single point of failure by running multiple containers, for example,
    config servers, behind each Kubernetes service.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先连接到配置服务器的一个问题是配置服务器可能成为单点故障。如果客户端首先连接到Netflix Eureka等发现服务，可以注册多个配置服务器实例，从而避免单点故障。在本书的后面，当我们了解Kubernetes中的*服务*概念时，我们将看到如何通过在每个Kubernetes服务后运行多个容器（例如配置服务器）来避免单点故障。
- en: Securing the configuration
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护配置
- en: Configuration information will, in general, be handled as sensitive information.
    This means that we need to secure the configuration information both in transit
    and at rest. From a runtime perspective, the config server does not need to be
    exposed to the outside through the edge server. During development, it is, however,
    useful to be able to access the API of the config server to check the configuration.
    In production environments, it is recommended to lock down external access to
    the config server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，配置信息将被视为敏感信息。这意味着我们需要在传输和静态情况下保护配置信息。从运行时的角度来看，配置服务器不需要通过边缘服务器向外部开放。然而，在开发过程中，能够访问配置服务器的API来检查配置是有用的。在生产环境中，建议限制对配置服务器的外部访问。
- en: Securing the configuration in transit
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护传输中的配置。
- en: When the configuration information is asked for by a microservice, or anyone
    using the API of the config server, it will be protected against eavesdropping
    by the edge server since it already uses HTTPS.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当微服务或使用配置服务器的API的任何人请求配置信息时，由于它已经使用HTTPS，它将受到边缘服务器的保护，防止窃听。
- en: To ensure that the API user is a known client, we will use HTTP basic authentication.
    We can set up HTTP basic authentication by using Spring Security in the config
    server and specifying the environment variables, `SPRING_SECURITY_USER_NAME` and
    `SPRING_SECURITY_USER_PASSWORD`, with the permitted credentials.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保API用户是已知客户端，我们将使用HTTP基本身份验证。我们可以通过在配置服务器中使用Spring Security并指定环境变量`SPRING_SECURITY_USER_NAME`和`SPRING_SECURITY_USER_PASSWORD`来设置HTTP基本身份验证，其中包含允许的凭据。
- en: Securing the configuration at rest
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护静态配置
- en: To avoid a situation whereby anyone with access to the configuration repository
    can steal sensitive information, such as passwords, the config server supports
    encryption of configuration information when stored on disk. The config server
    supports using both symmetric and asymmetric keys. Asymmetric keys are more secure
    but harder to manage.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何可以访问配置存储库的人窃取敏感信息，例如密码，配置服务器支持在磁盘上存储配置信息时进行加密。配置服务器支持使用对称密钥和非对称密钥。非对称密钥更安全，但更难管理。
- en: In this chapter, we will use a symmetric key. The symmetric key is given to
    the config server at startup by specifying an environment variable, `ENCRYPT_KEY`.
    The encrypted key is just a plain text string that needs to be protected in the
    same way as any sensitive information.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用对称密钥。对称密钥在启动时通过指定环境变量`ENCRYPT_KEY`提供给配置服务器。加密密钥只是一个需要像任何敏感信息一样受到保护的纯文本字符串。
- en: To learn more about the use of asymmetric keys, see [https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_key_management](https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_key_management).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于使用非对称密钥的信息，请参阅[https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_key_management](https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.1.0.RELEASE/single/spring-cloud-config.html#_key_management)。
- en: Introducing the config server API
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍配置服务器API
- en: 'The config server exposes a REST API that can be used by its clients to retrieve
    their configuration. In this chapter, we will use the following endpoints in the
    API:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器公开了一个REST API，可以被其客户端用来检索其配置。在本章中，我们将在API中使用以下端点：
- en: '`/actuator`: The standard actuator endpoints exposed by all microservices.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/actuator`：所有微服务公开的标准执行器端点。'
- en: As always, these should be used with care. They are very useful during development
    but must be locked down before being used in production.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，这些应该谨慎使用。它们在开发过程中非常有用，但必须在投入生产之前被锁定。
- en: '`/encrypt` and `/decrypt`: Endpoints for encrypting and decrypting sensitive
    information. These must also be locked down before being used in production.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/encrypt`和`/decrypt`：用于加密和解密敏感信息的端点。在投入生产之前，这些也必须被锁定。'
- en: '`/{microservice}/{profile}`: Returns the configuration for the specified microservice
    and the specified Spring profile.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/{microservice}/{profile}`：返回指定微服务和指定Spring配置文件的配置。'
- en: We will see some sample uses for the APIs when we try out the config server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试配置服务器时，我们将看到API的一些示例用法。
- en: Setting up a config server
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置配置服务器
- en: 'Setting up a config server on the basis of the decisions discussed is straightforward:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据讨论的决定设置配置服务器是直截了当的：
- en: Create a Spring Boot project using Spring Initializr as described in [Chapter
    3](d26f4e61-20bf-4f55-b96d-060c7dd6f20c.xhtml), *Creating a Set of Cooperating
    Microservices*. Refer to the *Using Spring Initializr to generate skeleton* *code*
    section.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Spring Initializr创建一个Spring Boot项目，如[第3章](d26f4e61-20bf-4f55-b96d-060c7dd6f20c.xhtml)中所述，*创建一组协作微服务*。参考*使用Spring
    Initializr生成骨架代码*部分。
- en: Add the dependencies, `spring-cloud-config-server` and `spring-boot-starter-security`,
    to the Gradle build file, `build.gradle`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将依赖项`spring-cloud-config-server`和`spring-boot-starter-security`添加到Gradle构建文件`build.gradle`中。
- en: 'Add the annotation, `@EnableConfigServer`, to the application class, `ConfigServerApplication`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将注解`@EnableConfigServer`添加到应用类`ConfigServerApplication`中：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the configuration for the config server to the default property file, `application.yml`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置服务器的配置添加到默认属性文件`application.yml`中：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The most important configuration is to specify where to find the configuration
    repository, specified by the `spring.cloud.config.server.native.searchLocations` property.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的配置是指定配置存储库的位置，由`spring.cloud.config.server.native.searchLocations`属性指定。
- en: Add a routing rule to the edge server to make the API of the config server accessible
    from outside the microservice landscape.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向边缘服务器添加路由规则，以使配置服务器的API可从微服务景观外部访问。
- en: Add a Dockerfile and a definition of the config server to the three Docker Compose
    files.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在三个Docker Compose文件中添加一个Dockerfile和配置服务器的定义。
- en: Externalize sensitive configuration parameters to the standard Docker Compose
    environment file, `.env`
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将敏感配置参数外部化到标准Docker Compose环境文件`.env`中
- en: 'Add the config server to the common build file, `settings.gradle`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置服务器添加到通用构建文件`settings.gradle`中：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The source code for the Spring Cloud Configuration server can be found in `$BOOK_HOME/Chapter12/spring-cloud/config-server`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud配置服务器的源代码可以在`$BOOK_HOME/Chapter12/spring-cloud/config-server`中找到。
- en: Now, let's look a bit more into how to set up the routing rule and how to configure
    the config server for use in Docker.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更深入地了解如何设置路由规则以及如何配置用于Docker的配置服务器。
- en: Setting up a routing rule in the edge server
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在边缘服务器中设置路由规则
- en: 'To be able to access the API of the config server from outside the microservice
    landscape, we add a routing rule to the edge server. All requests to the edge
    server that begin with `/config` will be routed to the config server with the
    following routing rule:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够从微服务景观外部访问配置服务器的API，我们向边缘服务器添加了一个路由规则。所有以`/config`开头的对边缘服务器的请求将根据以下路由规则路由到配置服务器：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `RewritePath` filter in the preceding routing rule will remove the leading
    part, `/config`, from the incoming URL before it sends it to the config server.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的路由规则中的`RewritePath`过滤器将从传入的URL中删除前导部分`/config`，然后将其发送到配置服务器。
- en: 'With this routing rule in place, we can use the API of the config server; for
    example, run the following command to ask for the configuration of the product
    service when it uses the Docker Spring profile:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个路由规则，我们可以使用配置服务器的API；例如，当产品服务使用Docker Spring配置文件时，运行以下命令来请求产品服务的配置：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will run the preceding command when we try out the config server.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试配置服务器时，我们将运行上述命令。
- en: Configuring the config server for use with Docker
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置用于Docker的配置服务器
- en: The Dockerfile of the config server looks the same as for the other microservices,
    except for the fact that it exposes port `8888` instead of port `8080`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器的Dockerfile看起来与其他微服务的一样，只是它暴露端口`8888`而不是端口`8080`。
- en: 'When it comes to adding the config server to the Docker Compose files, it looks
    a bit different from what we have seen for the other microservices:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在将配置服务器添加到Docker Compose文件时，它看起来与我们为其他微服务所见到的有些不同：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here are the explanations for the preceding source code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面源代码的解释：
- en: The Spring profile, `native`, is added to signal to the config server that the
    config repository is based on plain files; in other words, it is not a Git repository.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring配置文件`native`用于表示配置存储库基于普通文件；换句话说，它不是一个Git存储库。
- en: The environment variable `ENCRYPT_KEY` is used to specify the symmetric encryption
    key that shall be used by the config server to encrypt and decrypt sensitive configuration
    information.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 环境变量`ENCRYPT_KEY`用于指定配置服务器用于加密和解密敏感配置信息的对称加密密钥。
- en: The environment variables, `SPRING_SECURITY_USER_NAME` and `SPRING_SECURITY_USER_PASSWORD`,
    are used to specify the credentials to be used for protecting the APIs using basic
    HTTP authentication.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 环境变量`SPRING_SECURITY_USER_NAME`和`SPRING_SECURITY_USER_PASSWORD`用于指定用于保护API的基本HTTP身份验证的凭据。
- en: The volume declaration will make the `config-repo` folder accessible in the
    Docker container at `/config-repo`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卷声明将使`config-repo`文件夹在Docker容器中可访问，路径为`/config-repo`。
- en: 'The values of the three preceding environment variables defined are fetched
    by Docker Compose from the `.env` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由Docker Compose从`.env`文件中获取前述三个环境变量的值：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The information stored in the `.env` file, that is, the username, password,
    and encryption key, is sensitive information and must be protected if used for
    something other than development and testing. Also, note that losing the encryption
    key will lead to a situation whereby the encrypted information in the config repository
    cannot be decrypted!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在`.env`文件中的信息，即用户名、密码和加密密钥，是敏感信息，如果用于除开发和测试之外的其他用途，必须加以保护。另外，请注意，丢失加密密钥将导致配置存储库中的加密信息无法解密！
- en: Configuring clients of a config server
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务器的客户端配置
- en: 'To be able to get their configurations from the config server, our microservices
    need to be updated. This can be done through the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够从配置服务器获取其配置，我们的微服务需要进行更新。可以通过以下步骤完成：
- en: Add the `spring-cloud-starter-config`, and `spring-retry` dependencies to the
    Gradle build file, `build.gradle`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向Gradle构建文件`build.gradle`添加`spring-cloud-starter-config`和`spring-retry`依赖项。
- en: Move the configuration file, `application.yml`, to the config repository and
    rename it to the name of the client as specified by the property, `spring.application.name`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将配置文件`application.yml`移动到配置存储库，并根据属性`spring.application.name`指定的客户端名称进行重命名。
- en: Add a file named `bootstrap.yml` to the `src/main/resources` folder. This file
    holds the configuration required to connect to the config server. Refer to the
    following for an explanation of its content.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main/resources`文件夹中添加一个名为`bootstrap.yml`的文件。该文件包含连接到配置服务器所需的配置。参考以下内容进行解释。
- en: 'Add credentials for accessing the config server to the Docker Compose files,
    for example, the `product` service:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向Docker Compose文件添加访问配置服务器的凭据，例如`product`服务：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Disable the use of the config server when running Spring Boot-based automated
    tests. This is done by adding `spring.cloud.config.enabled=false` to the `@DataMongoTest`, `@DataJpaTest`,
    and `@SpringBootTest` annotations.  For example, execute the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行基于Spring Boot的自动化测试时禁用配置服务器的使用。通过向`@DataMongoTest`、`@DataJpaTest`和`@SpringBootTest`注解添加`spring.cloud.config.enabled=false`来实现。例如，执行以下命令：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring connection information
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置连接信息
- en: 'As mentioned previously, the `src/main/resources/bootstrap.yml` file holds
    the client configuration that is required in order to be able to connect to the
    config server. This file has the same content for all clients of the config server,
    except for the application name as specified by the property called, `spring.application.name` (in
    the following example, set to `product`):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`src/main/resources/bootstrap.yml`文件包含了连接到配置服务器所需的客户端配置。该文件对配置服务器的所有客户端具有相同的内容，除了由属性`spring.application.name`指定的应用程序名称（在以下示例中设置为`product`）：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This configuration will make the client do the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置将使客户端执行以下操作：
- en: Connect to the config server using the `http://localhost:8888` URL when it runs
    outside Docker, and using the `http://config-server:8888` URL when running in
    a Docker container.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker外部运行时，使用`http://localhost:8888` URL连接到配置服务器，在Docker容器中运行时，使用`http://config-server:8888`
    URL连接到配置服务器。
- en: Use HTTP basic authentication using the value of the `CONFIG_SERVER_USR` and
    `CONFIG_SERVER_PWD` properties, as its username and password.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用HTTP基本身份验证，使用`CONFIG_SERVER_USR`和`CONFIG_SERVER_PWD`属性的值作为用户名和密码。
- en: Try to reconnect to the config server during startup up to 20 times, if required.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动期间最多尝试重新连接到配置服务器20次，如果需要的话。
- en: If the connection attempt fails, the client will initially wait for 3 seconds
    before trying to reconnect.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果连接尝试失败，客户端将在尝试重新连接之前最初等待3秒。
- en: The wait time for subsequent retries will increase by a factor of 1.3.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后续重试的等待时间将增加1.3倍。
- en: The maximum wait time between connection attempts will be 10 seconds.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接尝试之间的最大等待时间将为10秒。
- en: If the client can't connect to the config server after 20 attempts, its startup
    will fail.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果客户端在20次尝试后仍无法连接到配置服务器，则其启动将失败。
- en: This configuration is generally good for resilience against temporary connectivity
    problems with the config server. It is especially useful when the whole landscape
    of microservices and its config server are started up at once, for example, when
    using the `docker-compose up` command. In this scenario, many of the clients will
    be trying to connect to the config server before it is ready, and the retry logic
    will make the clients connect to the config server successfully once it is up
    and running.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置通常对抗配置服务器临时连接问题具有良好的弹性。当整个微服务和其配置服务器一起启动时，例如使用`docker-compose up`命令时，它尤其有用。在这种情况下，许多客户端将在配置服务器准备就绪之前尝试连接到配置服务器，重试逻辑将使客户端在配置服务器准备就绪后成功连接到配置服务器。
- en: Moving the partitioning configuration from Docker Compose files to the configuration
    repository
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将分区配置从Docker Compose文件移动到配置存储库
- en: The Docker Compose files, `docker-compose-partitions.yml`, and `docker-compose-kafka.yml`,
    contain some extra configuration for handling partitions in the message brokers,
    RabbitMQ and Kafka. For details, refer to the *Guaranteed order and partitions* section
    in [Chapter 7](436fb8c1-0c4d-410c-a3ec-da251aba4ca1.xhtml), *Developing Reactive
    Microservices*. This configuration has also been moved to the centralized configuration
    repository.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose文件`docker-compose-partitions.yml`和`docker-compose-kafka.yml`包含一些额外的配置，用于处理消息代理RabbitMQ和Kafka中的分区。有关详细信息，请参阅《开发响应式微服务》[第7章]中的*有序和分区*部分。此配置也已移至集中配置存储库。
- en: 'For example, in `docker-compose-kafka.yml`, the configuration for the product
    consumer that reads messages from the first partition in the product topic in
    Kafka appears as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`docker-compose-kafka.yml`中，从Kafka产品主题的第一个分区读取消息的产品消费者的配置如下：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This configuration has been structured into a number of Spring profiles for
    increased reusability and moved to the corresponding configuration files in the
    configuration repository. The Spring profiles added are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置已结构化为多个Spring配置文件，以增加可重用性，并移至配置存储库中的相应配置文件。添加的Spring配置文件如下：
- en: '`streaming_partitioned` contains properties for enabling the use of partitions
    in a message broker.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`streaming_partitioned`包含启用消息代理中分区使用的属性。'
- en: '`streaming_instance_0` contains properties required for consuming messages
    from the first partition.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`streaming_instance_0`包含从第一个分区消费消息所需的属性。'
- en: '`streaming_instance_1` contains properties required for consuming messages
    from the second partition.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`streaming_instance_1`包含从第二个分区消费消息所需的属性。'
- en: '`kafka` contains properties that are specific for the use of Kafka as the messaging
    broker.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kafka`包含特定于Kafka作为消息代理使用的属性。'
- en: 'The following configuration has been added to the configuration files of the
    message consumers, that is, the product, review, and recommendation services:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 已将以下配置添加到消息消费者的配置文件中，即产品、评论和推荐服务：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following configuration has been added to the configuration file of the
    message producer, that is, the product-composite service:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 已将以下配置添加到消息生产者的配置文件中，即产品组合服务：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The Docker Compose files are now cleaner and only contain the configuration
    of credentials for accessing the configurations server and a list of Spring profiles
    to activate. For example, the configuration for the product consumer that read
    messages from the first partition in the product topic in Kafka is now reduced
    to the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Docker Compose文件更加清晰，只包含用于访问配置服务器的凭据配置和要激活的Spring配置文件列表。例如，从Kafka产品主题的第一个分区读取消息的产品消费者的配置现在减少为以下内容：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For the full source code, refer to the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的源代码，请参阅以下内容：
- en: '`docker-compose-partitions.yml`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose-partitions.yml`'
- en: '`docker-compose-kafka.yml`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose-kafka.yml`'
- en: '`config-repo/product-composite.yml`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config-repo/product-composite.yml`'
- en: '`config-repo/product.yml`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config-repo/product.yml`'
- en: '`config-repo/recommendation.yml`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config-repo/recommendation.yml`'
- en: '`config-repo/review.yml`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config-repo/review.yml`'
- en: Structuring the configuration repository
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置存储库的结构
- en: 'After moving the configuration files from each client to the configuration
    repository, we will have some level of consistent configuration in many of the
    configuration files, for example, for the configuration of actuator endpoints
    and how to connect to Eureka, RabbitMQ, and Kafka. The common parts have been
    placed in a configuration file named `application.yml` that is shared by all clients.
    The configuration repository contains the following files:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个客户端的配置文件移动到配置存储库后，我们将在许多配置文件中获得一定程度的一致配置，例如用于执行器端点的配置和如何连接到Eureka、RabbitMQ和Kafka的配置。共同部分已放置在名为`application.yml`的配置文件中，该文件由所有客户端共享。配置存储库包含以下文件：
- en: '`application.yml`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application.yml`'
- en: '`eureka-server.yml`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eureka-server.yml`'
- en: '`product-composite.yml`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product-composite.yml`'
- en: '`recommendation.yml`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recommendation.yml`'
- en: '`auth-server.yml`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth-server.yml`'
- en: '`gateway.yml`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gateway.yml`'
- en: '`product.yml`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product.yml`'
- en: '`review.yml`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`review.yml`'
- en: The configuration repository can be found in `$BOOK_HOME/Chapter12/config-repo`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 配置存储库可以在`$BOOK_HOME/Chapter12/config-repo`中找到。
- en: Trying out the Spring Cloud Configuration server
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试Spring Cloud配置服务器
- en: 'Now it is time to try out the config server:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候尝试配置服务器了：
- en: First, we build from source and run the test script to ensure that everything
    fits together.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们从源代码构建并运行测试脚本，以确保一切配合。
- en: Next, we will try out the config server API to retrieve the configuration for
    our microservices.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试使用配置服务器API检索微服务的配置。
- en: Finally, we will see how we can encrypt and decrypt sensitive information, for
    example, passwords.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将看到如何加密和解密敏感信息，例如密码。
- en: Building and running automated tests
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和运行自动化测试
- en: 'So now we build and run, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们构建和运行，如下：
- en: 'First, build the Docker images with the following commands:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令构建Docker镜像：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, start the system landscape in Docker and run the usual tests with the
    following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在Docker中启动系统架构并使用以下命令运行常规测试：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Getting the configuration using the config server API
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用配置服务器API获取配置
- en: 'As already described previously, we can reach the API of the config server
    through the edge server by using the URL prefix, `/config`. We also have to supply
    credentials as specified in the `.env` file for HTTP basic authentication. For
    example, to retrieve the configuration used for the product service when it runs
    as a Docker container, that is, having activated the Spring profile `docker`,
    run the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以通过边缘服务器使用URL前缀`/config`访问配置服务器的API，并且必须根据`.env`文件中指定的要求提供凭据进行HTTP基本身份验证。例如，要检索产品服务在作为Docker容器运行时使用的配置，即激活了Spring配置文件`docker`，请运行以下命令：
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Expect a response with the following structure (many of the properties in the
    response are replaced by `...` to increase readability):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 期望以下结构的响应（为了增加可读性，响应中的许多属性都被`...`替换）：
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The explanations for the preceding response are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面的响应的解释如下：
- en: 'The response contains properties from a number of *property sources*, one per
    the Spring profile and property file that matched the API request. The property
    sources are returned in priority order; that is, if a property is specified in
    multiple property sources, the first property in the response takes precedence.
    The preceding sample response contains the following property sources:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应包含来自多个*属性源*的属性，每个Spring配置文件和匹配API请求的属性文件对应一个属性源。属性源按优先级顺序返回；也就是说，如果属性在多个属性源中指定，则响应中的第一个属性优先。前面的示例响应包含以下属性源：
- en: '`/config-repo/product.yml`, for the `docker` Spring profile'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/product.yml`，对于`docker` Spring配置文件'
- en: '`/config-repo/application.yml`, for the `docker` Spring profile'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/application.yml`，对于`docker` Spring配置文件'
- en: '`/config-repo/product.yml`, for the `default` Spring profile'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/product.yml`，对于`default` Spring配置文件'
- en: '`/config-repo/application.yml`, for the `default` Spring profile docker'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/config-repo/application.yml`，对于`default` Spring配置文件docker'
- en: 'For example, the port used will be `8080` and not `7001`, since `"server.port":
    8080` is specified before `"server.port": 7001` in the preceding response.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '例如，使用的端口将是`8080`而不是`7001`，因为在前面的响应中指定了`"server.port": 8080`在`"server.port":
    7001`之前。'
- en: 'Sensitive information, such as the passwords to Eureka and RabbitMQ, are returned
    in plain text, for example, `"p"` and `"guest"`, but they are encrypted on disk.
    In the configuration file, `application.yml`, they are specified as follows:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感信息，例如Eureka和RabbitMQ的密码，以明文形式返回，例如`"p"`和`"guest"`，但它们在磁盘上是加密的。在配置文件`application.yml`中，它们的指定如下：
- en: '[PRE19]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Encrypting and decrypting sensitive information
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密和解密敏感信息
- en: Information can be encrypted and decrypted using the `/encrypt`, and `/decrypt`
    endpoints exposed by the config server. The `/encrpyt` endpoint can be used to
    create encrypted values to be placed in the property file in the config repository.
    Refer to the preceding example where the passwords to Eureka and RabbitMQ are
    stored encrypted on disk. The `/decrypt` endpoint can be used to verify encrypted
    information that is stored on disk in the config repository.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用配置服务器公开的`/encrypt`和`/decrypt`端点来加密和解密信息。`/encrpyt`端点可用于创建加密值，以放置在配置存储库中的属性文件中。请参考前面的示例，其中Eureka和RabbitMQ的密码以加密形式存储在磁盘上。`/decrypt`端点可用于验证存储在配置存储库中磁盘上的加密信息。
- en: 'To encrypt the `hello world` string, run the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要加密`hello world`字符串，请运行以下命令：
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It is important to use the `--data-urlencode` flag when using `curl` to call
    the `/encrypt` endpoint, so as to ensure the correct handling of special characters
    such as `'+'`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`curl`调用`/encrypt`端点时，重要的是要使用`--data-urlencode`标志，以确保正确处理诸如'+'之类的特殊字符。
- en: 'Expect a response along the lines of the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 期望类似以下的响应：
- en: '![](img/733638b7-6ddf-4111-b1b8-9ea27d16f42e.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/733638b7-6ddf-4111-b1b8-9ea27d16f42e.png)'
- en: 'To decrypt the encrypted value, run the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要解密加密的值，请运行以下命令：
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Expect the `hello world` string as the response:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 期望响应为`hello world`字符串：
- en: '![](img/db7066ec-de99-4008-91ad-a347b02ff206.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db7066ec-de99-4008-91ad-a347b02ff206.png)'
- en: 'If you want to use an encrypted value in a configuration file, you need to
    prefix it with `{cipher}` and wrap it in `''''`. For example, to store the encrypted
    version of `hello world`, execute the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在配置文件中使用加密值，需要在前面加上`{cipher}`并用`''`括起来。例如，要存储`hello world`的加密版本，执行以下命令：
- en: '[PRE22]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'These tests conclude the chapter on centralized configuration. Wrap it up by
    shutting down the system landscape:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试结束了关于集中式配置的章节。通过关闭系统景观来结束它：
- en: '[PRE23]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how we can use the Spring Cloud Configuration
    server to centralize managing the configuration of our microservices. We can place
    the configuration files in a common configuration repository and share common
    configurations in a single configuration file while keeping microservice-specific
    configuration in microservice specific configuration files. The microservices
    have been updated to retrieve their configuration from the config server at startup
    and are configured to handle temporary outages while retrieving their configuration
    from the config server.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到如何使用Spring Cloud配置服务器来集中管理微服务的配置。我们可以将配置文件放在一个共同的配置存储库中，并在单个配置文件中共享公共配置，同时将微服务特定的配置放在微服务特定的配置文件中。微服务已更新为在启动时从配置服务器检索其配置，并配置为在从配置服务器检索其配置时处理临时中断。
- en: The config server can protect configuration information by requiring authenticated
    usage of its API with basic HTTP authentication, and can prevent eavesdropping
    by exposing its API externally through the edge server that uses HTTPS. To prevent
    intruders who obtained access to the configuration files on disk from gaining
    access to sensitive information such as passwords, we can use the config server
    `/encrypt` endpoint to encrypt the information and store it encrypted on disk.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器可以通过要求对其API进行基本HTTP身份验证来保护配置信息，并且可以通过使用HTTPS的边缘服务器在外部暴露其API来防止窃听。为了防止入侵者从磁盘上获取对配置文件的访问权限，我们可以使用配置服务器`/encrypt`端点来加密信息并将其加密存储在磁盘上，以防止密码等敏感信息的泄露。
- en: While exposing the APIs from the config server externally is useful during development,
    they should be locked down before use in production.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中将配置服务器的API外部公开是有用的，但在生产环境中使用之前应该将其锁定。
- en: In the next chapter, we will learn how we can use *Resilience4j* to mitigate
    the potential drawbacks of overusing synchronous communication between microservices.
    If we, for example, establish chains of microservices that call each other synchronously
    using REST APIs, and the last microservice stops responding, bad things can happen
    that affect many of the microservices involved. Resilience4j comes with an implementation
    of the circuit breaker pattern, which can be used to handle these types of problem.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用*Resilience4j*来减轻微服务之间过度使用同步通信的潜在缺点。例如，如果我们建立一系列通过REST API同步调用彼此的微服务，并且最后一个微服务停止响应，可能会发生影响许多涉及的微服务的不良情况。Resilience4j带有断路器模式的实现，可以用来处理这些类型的问题。
- en: Questions
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'What API call can we expect from a review service to the config server during
    startup to retrieve its configuration? The review service was started up using
    the following command: `docker compose up -d`.'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动期间，我们可以期望从审查服务到配置服务器的哪个API调用来检索其配置？审查服务是使用以下命令启动的：`docker compose up -d`。
- en: 'What configuration information should we expect back from an API call to the
    config server using this command:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用配置服务器的API命令后，我们应该期望从中获得什么配置信息？
- en: '[PRE24]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What types of repository backend does Spring Cloud Config support?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Cloud Config支持哪些类型的存储库后端？
- en: How can we encrypt sensitive information on disk using Spring Cloud Config?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用Spring Cloud Config在磁盘上加密敏感信息？
- en: How can we protect the config server API from misuse?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何保护配置服务器API免受滥用？
- en: Mention some pros and cons for clients that first connect to the config server
    as opposed to those that first connect to the discovery server.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提到一些首先连接到配置服务器的客户端与首先连接到发现服务器的客户端的优缺点。
