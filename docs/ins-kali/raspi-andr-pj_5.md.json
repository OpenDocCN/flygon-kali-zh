["```kt\nsudo apt-get install libdbus-1-dev libdbus-glib-1-dev libglib2.0-dev libical-dev libreadline-dev libudev-dev libusb-dev make\nmkdir -p work/bluepy\ncd work/bluepy\nwget https://www.kernel.org/pub/linux/bluetooth/bluez-5.33.tar.xz\ntar xvf bluez-5.33.tar.xz\ncd bluez-5.33\n./configure --disable-systemd\nmake\nsudo make install\n\n```", "```kt\nlsusb\n\n```", "```kt\nBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.\nBus 001 Device 004: ID 0a5c:21e8 Broadcom Corp.\nBus 001 Device 005: ID 148f:5370 Ralink Technology, Corp. RT5370 Wireless Adapter\n\n```", "```kt\nsudo lsusb -v -d 0a5c:\n\n```", "```kt\nhci0:   Type: BR/EDR  Bus: USB\n BD Address: 5C:F3:70:68:BE:42  ACL MTU: 1021:8  SCO MTU: 64:1\n DOWN\n RX bytes:564 acl:0 sco:0 events:29 errors:0\n TX bytes:358 acl:0 sco:0 commands:29 errors:0\n\n```", "```kt\nsudo hciconfig hci0 up\n\n```", "```kt\nsudo hcitool lescan\n\n```", "```kt\nsudo hcitool lecc 68:64:4B:0B:24:A7\n\n```", "```kt\ncd\ngit clone https://go.googlesource.com/go\ncd go\ngit checkout go1.4.1\ncd src\n./all.bash\n\n```", "```kt\nPATH=$PATH:/home/pi/go/bin\nexport PATH\nexport GOROOT=/home/pi/go\nexport GOPATH=/home/pi/gopath\n\n```", "```kt\ngo get github.com/paypal/gatt\n\n```", "```kt\ncd /home/pi/gopath/src/github.com/paypal/gatt\ngo build examples/server.go\nsudo ./server\n\n```", "```kt\ncrontab -e\n\n```", "```kt\n@reboot sudo /home/pi/gopath/src/github.com/paypal/gatt/server\n\n```", "```kt\n#!/usr/bin/python\n\nimport sys\nimport Adafruit_DHT\n\nhumidity, temperature = Adafruit_DHT.read_retry(Adafruit_DHT.DHT11, 4)\nprint str(temperature)\n```", "```kt\n#!/usr/bin/python\n\nimport sys\nimport Adafruit_DHT\n\nhumidity, temperature = Adafruit_DHT.read_retry(Adafruit_DHT.DHT11, 4)\nprint str(humidity)\n```", "```kt\nchmod +x temperature.py humidity.py\n\n```", "```kt\nsudo ./temperature.py\nsudo ./humidity.py\n\n```", "```kt\n// A simple count service for demo.\ns1 := service.NewCountService()\nd.AddService(s1)\n\n// A sensor service for demo.\nsSensor := service.NewSensorService()\nd.AddService(sSensor)\n\n// A fake battery service for demo.\ns2 := service.NewBatteryService()\nd.AddService(s2)\n```", "```kt\n// Advertise device name and service's UUIDs.\nd.AdvertiseNameAndServices(\"Gopher\", []gatt.UUID{s1.UUID(), sSensor.UUID(), s2.UUID()})\n```", "```kt\npackage service\n\nimport (\n \"fmt\"\n \"log\"\n \"os/exec\"\n \"strings\"\n\n \"github.com/paypal/gatt\"\n)\n\nfunc NewSensorService() *gatt.Service {\n s := gatt.NewService(gatt.MustParseUUID(\"19fc95c0-c111-11e3-9904- 0002a5d5c51b\"))\n s.AddCharacteristic(gatt.MustParseUUID(\"21fac9e0-c111-11e3-9246- 0002a5d5c51b\")).HandleReadFunc(\n  func(rsp gatt.ResponseWriter, req *gatt.ReadRequest) {\n   out, err := exec.Command(\"sh\", \"-c\", \"sudo /home/pi/temperature.py\").Output()\n    if err != nil {\n     fmt.Fprintf(rsp, \"error occured %s\", err)\n     log.Println(\"Wrote: error %s\", err)\n    } else {\n     stringout := string(out)\n     stringout = strings.TrimSpace(stringout)\n     fmt.Fprintf(rsp, stringout)\n     log.Println(\"Wrote:\", stringout)\n    }\n })\n\n s.AddCharacteristic(gatt.MustParseUUID(\"31fac9e0-c111-11e3-9246- 0002a5d5c51b\")).HandleReadFunc(\n  func(rsp gatt.ResponseWriter, req *gatt.ReadRequest) {\n   out, err := exec.Command(\"sh\", \"-c\", \"sudo /home/pi/humidity.py\").Output()\n    if err != nil {\n     fmt.Fprintf(rsp, \"error occured %s\", err)\n     log.Println(\"Wrote: error %s\", err)\n    } else {\n     stringout := string(out)\n     stringout = strings.TrimSpace(stringout)\n     fmt.Fprintf(rsp, stringout)\n     log.Println(\"Wrote:\", stringout)\n   }\n })\n\n return s\n}\n```", "```kt\ngo build examples/server.go\nsudo ./server\n\n```", "```kt\n<uses-permission \nandroid:name=\"android.permission.BLUETOOTH\"/>\n<uses-permission \nandroid:name=\"android.permission.BLUETOOTH_ADMIN\"/>\n```", "```kt\nprivate BluetoothAdapter bluetoothAdapter;\nprivate BluetoothLeScanner bleScanner;\nprivate BluetoothGatt bleGatt;\nprivate static final int REQUEST_ENABLE_BT = 1;\nprivate static final UUID UUID_Service = \nUUID.fromString(\"19fc95c0-c111-11e3-9904-0002a5d5c51b\");\nprivate static final UUID UUID_TEMPERATURE = \nUUID.fromString(\"21fac9e0-c111-11e3-9246-0002a5d5c51b\");\nprivate static final UUID UUID_HUMIDITY = \nUUID.fromString(\"31fac9e0-c111-11e3-9246-0002a5d5c51b\");\n```", "```kt\nBluetoothManager bluetoothManager = \n(BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);\nbluetoothAdapter = bluetoothManager.getAdapter();\n```", "```kt\nprivate void startScan() {\n   if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled())\n   {\n   Intent enableBtIntent = \n      new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);\n   startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);\n   }  else {\n   bleScanner = bluetoothAdapter.getBluetoothLeScanner();\n      if (bleScanner != null) {\n          final ScanFilter scanFilter = \n             new ScanFilter.Builder().build();\n         ScanSettings settings = \n             new ScanSettings.Builder()\n                .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)\n                .build();\n         bleScanner.startScan(\n             Arrays.asList(scanFilter), settings, scanCallback);\n      }\n   }\n}\n```", "```kt\nprivate ScanCallback scanCallback = new ScanCallback() {\n   @Override\n   public void onScanResult(int callbackType, ScanResult result) {\n      if(\"Gopher\".equals(result.getDevice().getName())) {\n          Toast.makeText(MainActivity.this, \"Gopher found\", \n             Toast.LENGTH_SHORT).show();\n          if(bleScanner != null) {\n             bleScanner.stopScan(scanCallback);\n          }\n         bleGatt = \n            result.getDevice().connectGatt(\n                getApplicationContext(), false, bleGattCallback);\n       }\n       super.onScanResult(callbackType, result);\n    }\n};\n```", "```kt\nprivate BluetoothGattCallback bleGattCallback = new BluetoothGattCallback() {\n   @Override\n   public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\n      gatt.discoverServices();\n      super.onConnectionStateChange(gatt, status, newState);\n   }\n\n   @Override\n   public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n      BluetoothGattService service = \n         gatt.getService(UUID_Service);\n      BluetoothGattCharacteristic temperatureCharacteristic = \n         service.getCharacteristic(UUID_TEMPERATURE);\n      gatt.readCharacteristic(temperatureCharacteristic);\n      super.onServicesDiscovered(gatt, status);\n   }\n\n   @Override\n   public void onCharacteristicRead(BluetoothGatt gatt, final BluetoothGattCharacteristic characteristic, int status) {\n      final String value = characteristic.getStringValue(0);\n      runOnUiThread(new Runnable() {\n         @Override\n         public void run() {\n            TextView tv;\n            if(UUID_HUMIDITY.equals(characteristic.getUuid())) {\n                tv = (TextView) MainActivity.this.findViewById(\n                   R.id.humidity_textview);\n            } else {\n                tv = (TextView) MainActivity.this.findViewById(\n                   R.id.temperature_textview);\n              }\n             tv.setText(value);\n        }\n      });\n\n      BluetoothGattService service = \n         gatt.getService(UUID_Service);\n      readNextCharacteristic(gatt, characteristic);\n      super.onCharacteristicRead(gatt, characteristic, status);\n   }\n};\n```", "```kt\nprivate void readNextCharacteristic(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic) {\n   BluetoothGattService service = gatt.getService(UUID_Service);\n   if (UUID_HUMIDITY.equals(characteristic.getUuid())) {\n       BluetoothGattCharacteristic temperatureCharacteristic = \n          service.getCharacteristic(UUID_TEMPERATURE);\n       gatt.readCharacteristic(temperatureCharacteristic);\n   } else {\n      BluetoothGattCharacteristic humidityCharacteristic = \n         service.getCharacteristic(UUID_HUMIDITY);\n      gatt.readCharacteristic(humidityCharacteristic);\n     }\n}\n```", "```kt\n<TextView\n        android:id=\"@+id/temperature_textview\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentEnd=\"true\" />\n\n    <TextView\n        android:id=\"@+id/humidity_textview\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" />\n```", "```kt\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n   if(requestCode == REQUEST_ENABLE_BT) {\n      startScan();\n   }\n   super.onActivityResult(requestCode, resultCode, data);\n}\n\n@Override\nprotected void onResume() {\n   startScan();\n   super.onResume();\n}\n\n@Override\nprotected void onPause() {\n   if(bleScanner != null) {\n      bleScanner.stopScan(scanCallback);\n      }\n\n   if (bleGatt != null) {\n       bleGatt.close();\n       bleGatt.disconnect();\n       bleGatt = null;\n   }\n   super.onPause();\n}\n```", "```kt\ns.AddCharacteristic(gatt.MustParseUUID(\"41fac9e0-c111-11e3-9246- 0002a5d5c51b\")).HandleWriteFunc(\n  func(r gatt.Request, data []byte) (status byte) {\n   log.Println(\"Command received\")\n   exec.Command(\"sh\", \"-c\", \"sudo reboot\").Output()\n   return gatt.StatusSuccess\n })\n```", "```kt\ncd /home/pi/gopath/src/github.com/paypal/gatt\ngo build examples/server.go\nsudo ./server\n\n```", "```kt\nprivate static final UUID UUID_REBOOT = \n   UUID.fromString(\"41fac9e0-c111-11e3-9246-0002a5d5c51b\");\nprivate volatile boolean isSendReboot = false;\n```", "```kt\nif(isSendReboot) {\n   BluetoothGattCharacteristic rebootCharacteristic = \n      service.getCharacteristic(UUID_REBOOT);\n   rebootCharacteristic.setValue(\"reboot\");\n   gatt.writeCharacteristic(rebootCharacteristic);\n} else {\n   readNextCharacteristic(gatt, characteristic);\n}\n```", "```kt\n@Override\npublic void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {\n   isSendReboot = false;\n   readNextCharacteristic(gatt, characteristic);\n   super.onCharacteristicWrite(gatt, characteristic, status);\n}\n```", "```kt\n<Button\n        android:id=\"@+id/reboot_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/humidity_textview\"\n        android:text=\"Reboot\"\n        android:onClick=\"sendRebootCommand\"\n        android:enabled=\"false\"/>\n```", "```kt\npublic void sendRebootCommand(View v) throws InterruptedException\n{\nisSendReboot = true;\n}\n```", "```kt\nif(bleGatt != null) {\n   MainActivity.this.findViewById(R.id.reboot_button).setEnabled(true);\n}\n```", "```kt\ncd\ngit clone git://git.drogon.net/wiringPi\ncd wiringPi\n./build\n\n```", "```kt\ngpio -g mode 17 out\ngpio -g write 17 1\n\n```", "```kt\ngpio -g write 17 0\n\n```", "```kt\ns.AddCharacteristic(gatt.MustParseUUID(\"51fac9e0-c111-11e3-9246-0002a5d5c51b\")).HandleWriteFunc(\n  func(r gatt.Request, data []byte) (status byte) {\n   log.Println(\"Command received to turn on\")\n   exec.Command(\"sh\", \"-c\", \"gpio -g mode 17 out\").Output()\n   exec.Command(\"sh\", \"-c\", \"gpio -g write 17 1\").Output()\n   return gatt.StatusSuccess\n })\n\n s.AddCharacteristic(gatt.MustParseUUID(\"61fac9e0-c111-11e3-9246-0002a5d5c51b\")).HandleWriteFunc(\n  func(r gatt.Request, data []byte) (status byte) {\n   log.Println(\"Command received to turn off\")\n   exec.Command(\"sh\", \"-c\", \"gpio -g mode 17 out\").Output()\n   exec.Command(\"sh\", \"-c\", \"gpio -g write 17 0\").Output()\n   return gatt.StatusSuccess\n })\n```", "```kt\n<Button\n        android:id=\"@+id/turnon_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/reboot_button\"\n        android:text=\"Turn on\"\n        android:onClick=\"sendTurnOnCommand\"\n        android:enabled=\"false\"/>\n\n    <Button\n        android:id=\"@+id/turnoff_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/turnon_button\"\n        android:text=\"Turn off\"\n        android:onClick=\"sendTurnOffCommand\"\n        android:enabled=\"false\"/>\n```", "```kt\nprivate static final UUID UUID_TURNON = \n   UUID.fromString(\"51fac9e0-c111-11e3-9246-0002a5d5c51b\");\nprivate static final UUID UUID_TURNOFF = \n   UUID.fromString(\"61fac9e0-c111-11e3-9246-0002a5d5c51b\");\nprivate volatile boolean isSendTurnOn = false;\nprivate volatile boolean isSendTurnOff = false;\n```", "```kt\nMainActivity.this.findViewById(R.id.turnon_button).setEnabled(true);\n\nMainActivity.this.findViewById(R.id.turnoff_button).setEnabled(true);\n```", "```kt\nif(isSendReboot) {\n   BluetoothGattCharacteristic rebootCharacteristic = \n      service.getCharacteristic(UUID_REBOOT);\n   rebootCharacteristic.setValue(\"reboot\");\n   gatt.writeCharacteristic(rebootCharacteristic);\n} else if(isSendTurnOn) {\n   BluetoothGattCharacteristic turnOnCharacteristic = \n      service.getCharacteristic(UUID_TURNON);\n   turnOnCharacteristic.setValue(\"turnon\");\n   gatt.writeCharacteristic(turnOnCharacteristic);\n} else if(isSendTurnOff) {\n   BluetoothGattCharacteristic turnOffCharacteristic = \n      service.getCharacteristic(UUID_TURNOFF);\n   turnOffCharacteristic.setValue(\"turnoff\");\n   gatt.writeCharacteristic(turnOffCharacteristic);\n} else {\n   readNextCharacteristic(gatt, characteristic);\n}\n```", "```kt\nisSendTurnOn = false;\nisSendTurnOff = false;\n```", "```kt\npublic void sendTurnOnCommand(View v) throws InterruptedException\n{\n   isSendTurnOn = true;\n}\n\npublic void sendTurnOffCommand(View v) throws InterruptedException\n{\n   isSendTurnOff = true;\n}\n```", "```kt\nsudo modprobe snd_bcm2835\n\n```", "```kt\ncd\nwget http://www.freespecialeffects.co.uk/soundfx/sirens/whistle_blow_01.wav\n\n```", "```kt\naplay whistle_blow_01.wav\n\n```", "```kt\namixer cset numid=3 1\n\n```", "```kt\ns.AddCharacteristic(gatt.MustParseUUID(\"71fac9e0-c111-11e3-9246-0002a5d5c51b\")).HandleWriteFunc(\n  func(r gatt.Request, data []byte) (status byte) {\n   log.Println(\"Command received to whistle \")\n   exec.Command(\"sh\", \"-c\", \"aplay /home/pi/whistle_blow_01.wav\").Output()\n   return gatt.StatusSuccess\n })\n```", "```kt\n<Button\n        android:id=\"@+id/whistle_button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/turnoff_button\"\n        android:text=\"Whistle\"\n        android:onClick=\"sendWhistleCommand\"\n        android:enabled=\"false\"/>\n```", "```kt\npublic void sendWhistleCommand(View v) throws InterruptedException\n{\n    isSendWhistle = true;\n}\n```", "```kt\nprivate static final UUID UUID_WHISTLE = \n   UUID.fromString(\"71fac9e0-c111-11e3-9246-0002a5d5c51b\");\nprivate volatile boolean isWhistle = false;\n```", "```kt\nMainActivity.this.findViewById(R.id.whistle_button).setEnabled(true);\n```", "```kt\nelse if(isSendWhistle) {\n   BluetoothGattCharacteristic whistleCharacteristic = \n      service.getCharacteristic(UUID_WHISTLE);\n   whistleCharacteristic.setValue(\"whistle\");\n   gatt.writeCharacteristic(whistleCharacteristic);\n}\n```", "```kt\nisSendWhistle = false;\n```", "```kt\ns.AddCharacteristic(gatt.MustParseUUID(\"81fac9e0-c111-11e3-9246-0002a5d5c51b\")).HandleWriteFunc(\n  func(r gatt.Request, data []byte) (status byte) {\n   log.Println(\"Command received to turn on and whistle\")\n   exec.Command(\"sh\", \"-c\", \"aplay /home/pi/whistle_blow_01.wav\").Output()\n   exec.Command(\"sh\", \"-c\", \"gpio -g mode 17 out\").Output()\n   exec.Command(\"sh\", \"-c\", \"gpio -g write 17 1\").Output()\n   return gatt.StatusSuccess\n })\n```", "```kt\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n```", "```kt\nprivate static final UUID UUID_WHISTLE_AND_TURNON = \n   UUID.fromString(\"81fac9e0-c111-11e3-9246-0002a5d5c51b\");\nprivate volatile boolean isSendWhistleAndTurnOn = false;\n```", "```kt\nTelephonyManager TelephonyMgr = (TelephonyManager) \n   getSystemService(Context.TELEPHONY_SERVICE);\nTelephonyMgr.listen(new PhoneListener(), \nPhoneStateListener.LISTEN_CALL_STATE);\n```", "```kt\nclass PhoneListener extends PhoneStateListener {\n   public void onCallStateChanged(int state, String incomingNumber) {\n      super.onCallStateChanged(state, incomingNumber);\n      switch (state) {\n         case TelephonyManager.CALL_STATE_RINGING:\n         Toast.makeText(getApplicationContext(), incomingNumber, Toast.LENGTH_LONG).show();\n         Toast.makeText(getApplicationContext(), \"CALL_STATE_RINGING\", Toast.LENGTH_LONG).show();\n         isSendWhistleAndTurnOn = true;\n         break;\n      default:\n         break;\n      }\n   }\n}\n```", "```kt\nelse if(isSendWhistleAndTurnOn) {\n   BluetoothGattCharacteristic whistleAndTurnOnCharacteristic = \n      service.getCharacteristic(UUID_WHISTLE_AND_TURNON);\n   whistleAndTurnOnCharacteristic.setValue(\"whistleturnon\");\n   gatt.writeCharacteristic(whistleAndTurnOnCharacteristic);\n}\n```", "```kt\nisSendWhistleAndTurnOn = false;\n```"]