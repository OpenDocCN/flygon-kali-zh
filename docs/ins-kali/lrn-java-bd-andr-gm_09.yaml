- en: Chapter 9. Making Your Game the Next Big Thing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。让您的游戏成为下一个大事件
- en: The day has finally come when we can publish our first game. This chapter, despite
    being shorter than others, is probably the longest chapter to complete. It would
    be a good idea to scan through the different exercises to see what is involved
    before actually diving into them. Most of these tutorials are not suitable to
    do during the advertisements of your favorite TV program or when you get in from
    work and you are really tired.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 终于到了我们可以发布第一个游戏的时候了。这一章，虽然比其他章节短，但可能是完成时间最长的一章。在真正开始之前，浏览一下不同的练习内容是个好主意。大多数这些教程都不适合在您最喜欢的电视节目的广告时间或者下班后感到非常疲倦时进行。
- en: Read the chapter and make a plan of when to perform each stage. The stages are
    arranged so you should be able to leave the project in between each of them. If
    you are really determined, have understood all the code until now, are confident
    with files and folders, and have no interruptions, you can probably get the work
    in this chapter completed in about a day.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章并制定何时执行每个阶段的计划。这些阶段安排得很好，所以您应该能够在每个阶段之间离开项目。如果您真的下定决心，已经理解了到目前为止的所有代码，对文件和文件夹感到自信，并且没有中断，您可能可以在大约一天内完成本章的工作。
- en: As always, the completed code is in the relevant folder in the download bundle,
    in this case the `Chapter9` folder.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，完成的代码位于下载包中相关文件夹中，这种情况下是`Chapter9`文件夹。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that because I cannot share the login credentials for my developer account,
    had to mask some ID numbers within the code with a series of black lines. You
    will see these in the code in this chapter when talking about the `ids.xml` file
    which is NOT in the code bundle because of its confidential nature. However, as
    you will see in the *Setting up the Snake project ready for implementation* section,
    it is easy to get your own ID codes. Also note that a lot of the work in this
    chapter involves set up that takes place in your developer console. The leaderboards
    and achievements will not function until you have completed the necessary steps.
    However, you can review the entire code in the `Chapter9` folder and download
    the enhanced version of the game from [Chapter 8](ch08.xhtml "Chapter 8. The Snake
    Game"), *The Snake Game*, complete with working leaderboards and achievements
    from [Chapter 9](ch09.xhtml "Chapter 9. Making Your Game the Next Big Thing"),
    *Making Your Game the Next Big Thing*, from [https://play.google.com/store/apps/details?id=com.packtpub.enhancedsnakegame.enhancedsnakegame](https://play.google.com/store/apps/details?id=com.packtpub.enhancedsnakegame.enhancedsnakegame).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我无法分享我的开发者帐户的登录凭据，必须使用一系列黑线在代码中掩盖一些ID号码。在本章的代码中，当谈到`ids.xml`文件时，您会看到这些。由于其机密性质，该文件包中没有包含该文件。但是，正如您将在*设置蛇项目以准备实施*部分中看到的那样，很容易获得您自己的ID代码。还要注意，本章的许多工作涉及在您的开发者控制台中进行的设置。在您完成必要的步骤之前，排行榜和成就将无法正常工作。但是，您可以在`Chapter9`文件夹中查看整个代码，并从[第8章](ch08.xhtml
    "第8章。蛇游戏")下载游戏的增强版本，*蛇游戏*，其中包括来自[第9章](ch09.xhtml "第9章。让您的游戏成为下一个大事件")的工作排行榜和成就，*让您的游戏成为下一个大事件*，从[https://play.google.com/store/apps/details?id=com.packtpub.enhancedsnakegame.enhancedsnakegame](https://play.google.com/store/apps/details?id=com.packtpub.enhancedsnakegame.enhancedsnakegame)下载。
- en: If you want to implement everything yourself and also want to start with the
    enhanced version of the game, including all the improvements from the self-test
    questions from the previous chapter, then grab the `EnhancedSnakeGame` code from
    the `Chapter8` folder, and update your working project from `Chapter8`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想自己实现所有内容，并且还想从包含上一章自测问题的增强版游戏开始，那么请从`Chapter8`文件夹中获取`EnhancedSnakeGame`代码，并从`Chapter8`更新您的工作项目。
- en: 'In this chapter, you will learn the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: How to publish your app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何发布您的应用程序
- en: Marketing your app, including making it social with leaderboards and public
    achievements
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 营销您的应用程序，包括通过排行榜和公共成就使其社交化
- en: Implementing leaderboards and achievements with the Google Play Game Services
    API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Play游戏服务API实施排行榜和成就
- en: Looking at what to do next depending on what you want to achieve
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您想要实现的目标，查看接下来要做什么
- en: How to publish your app
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何发布您的应用程序
- en: 'Some of the steps in this guide involve writing descriptions and supplying
    screenshots, so you might like to read through the entire guide before implementing
    any of the steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南中的一些步骤涉及编写描述和提供截图，因此您可能希望在实施任何步骤之前阅读整个指南：
- en: Create an icon. Exactly how to design an icon is beyond the scope of this book,
    but simply put, you need to create a nice image for each of the Android screen
    density categories. This is easier than it sounds. Using a simple image, such
    as the snake head bitmap, you can customize and download a set from [http://romannurik.github.io/AndroidAssetStudio/icons-launcher.html](http://romannurik.github.io/AndroidAssetStudio/icons-launcher.html).
    There are many sites that offer a similar free service. Of course, you can just
    use the images in the enhanced snake project, and skip this step and the next.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个图标。如何设计图标超出了本书的范围，但简单来说，您需要为每个Android屏幕密度类别创建一个漂亮的图像。这比听起来要容易。使用简单的图像，比如蛇头位图，您可以定制并从[http://romannurik.github.io/AndroidAssetStudio/icons-launcher.html](http://romannurik.github.io/AndroidAssetStudio/icons-launcher.html)下载一组图标。有许多网站提供类似的免费服务。当然，您也可以直接使用增强版蛇项目中的图像，跳过这一步和下一步。
- en: Once you have downloaded your `.zip` file from the preceding link, you can simply
    copy the `res` folder from within the download to the `main` folder within the
    project explorer. All icons at all densities will now be updated.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您从上述链接下载了`.zip`文件，您可以简单地将下载包中的`res`文件夹复制到项目资源管理器中的`main`文件夹中。现在，所有密度的所有图标都将被更新。
- en: Before we proceed further, optionally you will need to prepare some screenshots
    of the game. You will be prompted to upload a screenshot for several screen types,
    but since the game is nearly identical on all screen types, one image should do
    fine. You will also need an image of dimension 512 x 512 for a high-resolution
    icon and an image of dimension 1024 x 500 for a feature graphic. They don't need
    to be great, but you do need them to proceed. Create your own or grab a copy of
    my very simple graphics in the `Chapter9` folder.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们进一步进行之前，您可能需要准备一些游戏的屏幕截图。您将被提示为几种屏幕类型上传截图，但由于游戏在所有屏幕类型上几乎相同，一张图片就可以了。您还需要一张尺寸为512
    x 512的高分辨率图标和一张尺寸为1024 x 500的特色图形。它们不需要很好，但您需要它们才能继续。创建您自己的图形，或者在`Chapter9`文件夹中获取我的非常简单的图形的副本。
- en: Now, unfortunately, you will need to spend $ 25 to open a Google Play account.
    You can sign up at [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，不幸的是，您需要花费25美元开设一个Google Play账户。您可以在[https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)注册。
- en: Once you have signed up, you can log in to your developer console at the same
    URL as mentioned in the previous step.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您注册了，您可以使用与上一步中提到的相同URL登录到您的开发者控制台。
- en: Once in your console, click on the **+ Add new application** button:![How to
    publish your app](img/8859OS_09_01.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入控制台，点击**+添加新应用程序**按钮：![如何发布您的应用程序](img/8859OS_09_01.jpg)
- en: In the **Add New Application** dialog, type a name for your application, such
    as `Snake Game`. Now click on **Upload APK**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加新应用程序**对话框中，输入应用程序的名称，例如`Snake Game`。现在点击**上传APK**。
- en: 'We now need to make our app into the release version. Open the `AndroidManifest.xml`
    file and add the highlighted line of code in the location shown:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要将我们的应用程序制作成发布版本。打开`AndroidManifest.xml`文件，并在指定位置添加代码中的突出显示行：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Rebuild your signed APK for the latest version of the *Snake* game, as discussed
    in [Chapter 2](ch02.xhtml "Chapter 2. Getting Started with Android"), *Getting
    Started with Android*.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建您的已签名APK，以获取*Snake*游戏的最新版本，如[第2章](ch02.xhtml "第2章。开始使用Android")中所讨论的，*开始使用Android*。
- en: Now click on **Upload your first APK to production**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**将您的第一个APK上传到生产环境**。
- en: Now go to your Snake game APK.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到您的Snake游戏APK。
- en: Wait for the APK to finish uploading. You can now see your game summary screen.
    Notice the highlighted progress indicator to the top-left corner of the next image.
    We have a green tick, indicating that the APK has been uploaded successfully:![How
    to publish your app](img/8859OS_09_02.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待APK上传完成。您现在可以看到游戏摘要屏幕。请注意下一张图片左上角的突出显示的进度指示器。我们有一个绿色的勾号，表示APK已成功上传：![如何发布您的应用程序](img/8859OS_09_02.jpg)
- en: The next thing we need to do is configure our Store Listing, so click on the
    **Store Listing** link, just below the APK link.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是配置我们的商店列表，所以点击**商店列表**链接，就在APK链接下面。
- en: Write a short description and a long description. Also upload your screenshots,
    feature graphics, and high-resolution icon.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一个简短的描述和一个长描述。还要上传你的屏幕截图、特色图形和高分辨率图标。
- en: In the **Application Type** drop-down menu, select **Games**. In the **Category**
    drop-down menu, **Arcade** is probably most appropriate. For **Content Rating**,
    select **Everyone**, and for **Privacy Policy**, click on the checkbox for **Not
    submitting a privacy policy at this time**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用程序类型**下拉菜单中，选择**游戏**。在**类别**下拉菜单中，**街机**可能是最合适的。对于**内容评级**，选择**所有人**，对于**隐私政策**，点击**此时不提交隐私政策**的复选框。
- en: Add your website and email address to the relevant boxes.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的网站和电子邮件地址添加到相应的框中。
- en: Back at the top of the web page, click on the **Save** button.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到网页顶部，点击**保存**按钮。
- en: Now we are at the final stage of this guide. Click on the **Pricing and distribution**
    link. It is just underneath the **Store Listing** link from step 13.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经到达本指南的最后阶段。点击**定价和分发**链接。它就在第13步的**商店列表**链接下面。
- en: Click on the **Free** button at the top of the page.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部的**免费**按钮。
- en: Click on the checkbox of all the countries you want your game to be listed in.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您希望您的游戏在其中列出的所有国家的复选框。
- en: Scroll down to the bottom of the page and click on the checkboxes for **Content
    guidelines** and **US Export laws**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到页面底部，点击**内容指南**和**美国出口法**的复选框。
- en: Click on **Save** at the top of the page.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部的**保存**。
- en: Finally, from the **Ready to publish** drop-down menu at the top right corner
    of the page, click on **Publish this app** and you are done.![How to publish your
    app](img/88590S_09_03.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从页面右上角的**准备发布**下拉菜单中，点击**发布此应用程序**，然后您就完成了。![如何发布您的应用程序](img/88590S_09_03.jpg)
- en: Congratulations! Your game will be live on Google Play somewhere between the
    next 5 minutes and 24 hours.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您的游戏将在5分钟至24小时之间在Google Play上线。
- en: Marketing your app
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推广您的应用程序
- en: The temptation at this stage is to sit back and wait for our game to hit the
    top position in the best-selling apps. This never happens.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段的诱惑是坐下来等待我们的游戏登顶畅销应用。这永远不会发生。
- en: 'To ensure that our app achieves its full potential, we need to do the following
    continuously:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的应用程序发挥其全部潜力，我们需要不断进行以下操作：
- en: '**Improve it**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 改进它
- en: We have already made quite a few improvements to the *Snake* game but there
    are many more, such as difficulty settings, music, debugging (did you see the
    occasionally wonky body segments?), settings menu, and so on. You can pay a professional
    to design backgrounds and sprites, or add more sound effects. When you have improved
    your Android and Java skills further, you can rewrite the entire game using a
    smoother engine and call it Version 2.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经对*Snake*游戏进行了很多改进，但还有许多其他改进，比如难度设置、音乐、调试（您有没有看到偶尔有点不稳定的身体段？）、设置菜单等等。您可以支付专业人员设计背景和精灵，或者添加更多音效。当您进一步提高您的Android和Java技能时，您可以使用更流畅的引擎重新编写整个游戏，并称其为版本2。
- en: '**Promote it**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**推广它**'
- en: 'This could be the subject of another book but there are so many ways we can
    spread the word about our app. We can create a page/profile on all the social
    media sites—Facebook, Twitter, Flickr, and so on. Add regular updates, announcements,
    challenges (see compulsion). We can create a website to promote our app and promote
    it in all the ways we would promote any other website. We can add a message in
    the app itself asking players to rate it, perhaps pop up a message just after
    they have got a high score or achievement. We can ask everyone we know and everyone
    who visits our social media/website to give a rating and leave a review. There
    are many more ways to promote an app as well. The secret to all of them is this:
    keep doing it. For example, don''t create a Facebook page and then expect it to
    grow in popularity on its own. Keep adding to all of your channels of promotion.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是另一本书的主题，但我们可以通过很多方式来宣传我们的应用。我们可以在所有社交媒体网站上创建页面/个人资料，比如Facebook、Twitter、Flickr等等。定期更新、公告、挑战（参见强迫）。我们可以创建一个网站来推广我们的应用，并以所有我们推广任何其他网站的方式来推广它。我们可以在应用程序本身中添加一条消息，要求玩家对其进行评分，也许在他们获得高分或成就后弹出一条消息。我们可以要求我们认识的每个人和访问我们社交媒体/网站的每个人给予评分并留下评论。还有许多其他推广应用的方式。它们的秘诀是：不断地进行。例如，不要创建一个Facebook页面然后期望它自行流行起来。不断增加所有推广渠道。
- en: '**Keep the players'' level of compulsion**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**保持玩家的强迫水平**'
- en: Besides improving the game in the ways we have briefly mentioned, we need to
    give players a compelling reason to keep coming back to our game. One way might
    be to add new levels. For example, it won't be hard to implement levels in our
    *Snake* game. Each level could have walls in different places and the layouts
    could get progressively more challenging. All we would need to do is make an array
    of obstacles, draw them on the screen, and detect collisions. Then set a target
    for the snake length for each level and move on to the next level when it is achieved.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了以我们简要提到的方式改进游戏之外，我们需要给玩家一个有力的理由继续回到我们的游戏。一种方法可能是添加新的关卡。例如，在我们的*贪吃蛇*游戏中实现关卡不难。每个关卡可以在不同的地方设置墙壁，布局可以变得越来越具有挑战性。我们需要做的就是制作一个障碍物数组，将它们绘制在屏幕上，并检测碰撞。然后为每个关卡设置蛇长度的目标，当达到目标时进入下一个关卡。
- en: We could offer different snake designs to be be unlocked for certain challenges.
    How about the player saving all the apples they collect as a form of currency,
    and then strategically spending that currency to get a chance to continue after
    they have died?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以提供不同的蛇设计来解锁特定挑战。玩家可以将他们收集的所有苹果保存为一种货币，然后有策略地花费这种货币来获得在死后继续的机会，这怎么样？
- en: How about offering time-limited challenges? For example, complete level 10 by
    the end of the month to receive a thousand bonus apples. Perhaps, we could come
    up with more things the apples could be spent on. Cool snake accessories or levels
    that can only be unlocked with apples. The point is that all of this compulsion
    can be added and updated at the same time as we upload our improvements. Nothing
    mentioned in this discussion about compulsion would be unachievable with the skills
    we have learned so far.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 提供限时挑战怎么样？例如，本月底完成第10关以获得一千个额外的苹果。也许，我们可以想出更多苹果可以用来消费的东西。酷炫的蛇配饰或只能用苹果解锁的关卡。关键是所有这些强迫力都可以在我们上传改进的同时添加和更新。在这次讨论中提到的关于强迫力的任何事情都不是我们迄今为止学到的技能无法实现的。
- en: Probably, the most compelling aspect we can add to our game is online leaderboards
    and achievements so that players can compare themselves to their friends and the
    rest of the world. Google is aware of this and have done a lot of work to make
    it as easy as possible to add leaderboards and achievements to games. We will
    see how we can yet again take advantage of other people's hard work.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可能，我们可以为我们的游戏增加的最引人入胜的方面是在线排行榜和成就，这样玩家可以将自己与朋友和全世界的其他玩家进行比较。谷歌意识到了这一点，并已经做了很多工作，使向游戏中添加排行榜和成就变得尽可能容易。我们将看看我们如何再次利用其他人的辛勤工作。
- en: 'What''s more, all the achievements that players of your game earn are fed into
    their overall Google Play profile. Here is a screenshot of my rather poor Google
    Play achievements profile:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，玩家在游戏中获得的所有成就都会被记录在他们的Google Play个人资料中。这是我相当糟糕的Google Play成就个人资料的截图：
- en: '![Marketing your app](img/88590S_09_50.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![营销您的应用](img/88590S_09_50.jpg)'
- en: You might have noticed a few *Snake* achievements in that lot. This feature
    makes your game potentially even more compelling.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了一些*贪吃蛇*成就。这个功能使你的游戏可能更加引人入胜。
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Let's do a quick reality check—I am not actually suggesting that you spend significant
    amounts of time trying to make a real business out of our humble Snake game. It
    just serves as a useful example for discussion. Also, if we can come up with so
    many ideas for a game this old and simple, then we can surely come up with some
    really amazing stuff for a game we are passionate about. When you have an idea
    you are passionate about, then that would be the time to go for it and expand
    the brief marketing plan we have discussed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一个快速的现实检查——我并不是在建议你花费大量时间来尝试将我们的谦逊的贪吃蛇游戏变成一个真正的业务。它只是作为一个讨论的有用例子。此外，如果我们能为一个如此古老和简单的游戏想出这么多点子，那么我们肯定可以为一个我们热爱的游戏想出一些真正令人惊叹的东西。当你有一个你热爱的想法时，那就是去扩展我们讨论过的简短营销计划的时候了。
- en: Adding leaderboards and achievements
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加排行榜和成就
- en: So we know why leaderboards and achievements are a good thing. The first thing
    we need to do here is plan our achievements. A leaderboard is a high score table,
    and that's it! There isn't a great deal of things we can do to make them different.
    The achievements, however, deserve some discussion.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们知道为什么排行榜和成就是一件好事。我们需要做的第一件事是规划我们的成就。排行榜就是一个高分榜，就是这样！我们无法做太多事情来使它们不同。然而，成就值得讨论一番。
- en: Planning the Snake achievements
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划贪吃蛇成就
- en: 'At first, it might seem that a really simple implementation of a really simple
    game, like our *Snake* game, isn''t deep enough to have many, or even any, achievements.
    So what follows is a quick brainstorming session of achievement ideas:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，似乎一个非常简单的游戏，比如我们的*蛇*游戏，实现起来并不深刻，可能没有很多，甚至没有任何成就。接下来是一个快速的头脑风暴会话，关于成就的想法：
- en: '**Score 10, 25, 50, 100, and so on**: Simply unlock achievements at different
    levels of high score.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**得分10、25、50、100等等**：简单地在不同水平的高分解锁成就。'
- en: '**Snake length**: Simply unlock achievements at different snake lengths.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蛇长度**：简单地在不同的蛇长度解锁成就。'
- en: '**Cannibal**: Unlock an achievement the first time the player collides with
    their own tail segment.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**食人族**：第一次玩家与自己的尾部碰撞时解锁成就。'
- en: '**Collect x apples in total**: Keep a tally of all the apples ever collected,
    and unlock achievements at significant milestones.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总共收集x个苹果**：记录所有收集的苹果，并在重要的里程碑上解锁成就。'
- en: '**Play 10, 25, 50, 100 games**: Reward the player for keeping on going. Whether
    they win or lose, achievements are unlocked for effort.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**玩10、25、50、100场比赛**：奖励玩家继续前进。无论他们输赢，都会因努力而解锁成就。'
- en: '**Treasure hunt**: What if there was a hidden spot in every game? It could
    give the player a reason to explore each level. They could be rewarded with points
    and apples. They could then unlock real achievements, perhaps for every 5, 10,
    or 20 hidden spots that they find.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**寻宝**：如果每个游戏中都有一个隐藏的地点怎么办？这可能会给玩家一个探索每个级别的理由。他们可以获得积分和苹果的奖励。然后他们可以解锁真正的成就，也许是每发现5、10或20个隐藏地点。'
- en: Some of the achievements suggest that we would be required to keep a record
    of the player's progress. Surprisingly, Google Play Game Services can actually
    do this for us. These are known as incremental achievements. The number of apples
    collected in total is a good example of an incremental achievement. Others, such
    as snake length, are just dependent on the player's performance in any one game.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一些成就表明我们需要记录玩家的进度。令人惊讶的是，Google Play游戏服务实际上可以为我们做到这一点。这些被称为递增成就。总共收集的苹果数量就是递增成就的一个很好的例子。其他，比如蛇长度，只取决于玩家在任何一场比赛中的表现。
- en: We will implement the total number of apples and the snake length achievements
    so that we can see how to implement both types.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现总苹果数和蛇长度成就，以便了解如何实现这两种类型。
- en: 'We can have five achievements for reaching each of the following snake lengths:
    5, 10, 20, 35, and 50\. There can also be five incremental achievements for the
    total number of apples collected. Specifically, the player will get an achievement
    at 10, 25, 50, 100, 150, and 250 apples collected. Soon, we will see how to do
    it.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为达到以下每个蛇长度设定五个成就：5、10、20、35和50。还可以为总苹果数设定五个递增成就。具体来说，玩家将在收集10、25、50、100、150和250个苹果时获得成就。很快，我们将看到如何做到这一点。
- en: 'Finally, we need to decide how many points each achievement will be worth,
    out of the 1,000-point limit per game. As I might come back and add some more
    achievements later I am going to allocate 250 points to the apples'' achievements,
    like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要决定每个成就的价值，每个游戏的上限为1,000点。由于我可能会回来添加更多成就，我打算将250点分配给苹果的成就，就像这样：
- en: '| Number of eaten apples | Achievement points |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 吃掉的苹果数量 | 成就点数'
- en: '| --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 10 | 10 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: 10 | 10
- en: '| 20 | 30 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: 20 | 30
- en: '| 50 | 40 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: 50 | 40
- en: '| 100 | 70 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: 100 | 70
- en: '| 250 | 100 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: 250 | 100
- en: 'I will also allocate 250 points to the snake length achievements, as shown
    in the following table:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将在下表中分配250点给蛇长度成就，如下所示：
- en: '| Length of snake | Achievement points |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: 蛇的长度 | 成就点数
- en: '| --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 5 | 10 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 10'
- en: '| 10 | 30 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: 10 | 30
- en: '| 25 | 40 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: 25 | 40
- en: '| 35 | 70 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: 35 | 70
- en: '| 50 | 100 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: 50 | 100
- en: Once you see how to implement these achievements in both the code and the developer
    console, it will be fairly simple to design and implement your own different achievements.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您了解如何在代码和开发者控制台中实现这些成就，设计和实现您自己的不同成就将会相当简单。
- en: Step-by-step leaderboards and achievements
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐步排行榜和成就
- en: This is probably the longest part of the book to complete. However, once you
    have been through this process, it will be significantly easier the next time
    you do it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是完成本书最长的部分。但是，一旦您完成了这个过程，下次再做就会容易得多。
- en: Installing the Google Play Services API on your PC
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在您的PC上安装Google Play服务API
- en: 'First, we need to add the tools and the libraries needed to use the Game Services
    classes. This is nice and easy with Android Studio:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加使用游戏服务类所需的工具和库。这在Android Studio中非常简单：
- en: Click on the SDK Manager icon in the Android Studio toolbar:![Installing the
    Google Play Services API on your PC](img/88590S_09_05.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Android Studio工具栏中的SDK管理器图标：![在您的PC上安装Google Play服务API](img/88590S_09_05.jpg)
- en: The SDK manager will start. It looks a bit like this:![Installing the Google
    Play Services API on your PC](img/88590S_09_06.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDK 管理器将启动。它看起来有点像这样：![在您的PC上安装Google Play服务API](img/88590S_09_06.jpg)
- en: Scroll to the very bottom and underneath **Extras**, you will see **Google Play
    Services**. Check the box that is shown as highlighted in the following screenshot
    by clicking on it:![Installing the Google Play Services API on your PC](img/88590S_09_07.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到最底部，在**额外**下面，您会看到**Google Play服务**。通过点击下面的截图中显示的突出显示的框来勾选它：![在您的PC上安装Google
    Play服务API](img/88590S_09_07.jpg)
- en: Now click on the checkbox for **Google Repository**, just below **Google Play
    Services**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**Google存储库**复选框，就在**Google Play服务**下面。
- en: Click on **Install packages** and wait for the packages to download and install.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装软件包**，等待软件包下载和安装。
- en: Save your project and restart Android Studio.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的项目并重新启动Android Studio。
- en: We now have the tools installed to start developing Google Play Game Services
    apps. Next, we need to set up our developer console to communicate with our app,
    ready for the features we will soon write code for.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经安装了开始开发Google Play游戏服务应用所需的工具。接下来，我们需要设置我们的开发者控制台，以便与我们的应用进行通信，为我们即将编写代码的功能做好准备。
- en: Configuring the Google Play developer console
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Google Play开发者控制台
- en: 'Here, we will prepare your developer console by creating a new Game Services
    application. This might sound a little counterintuitive; surely, Snake is our
    application, isn''t it? Yes, but Google Play is structured in such a way that
    you create a Game Services application, and it is with this application that your
    actual games (Snake in this case) will communicate. It is the Game Services application
    that will have the achievements and leaderboards that we will award and display
    from our Snake Game:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过创建一个新的游戏服务应用来准备您的开发者控制台。这可能听起来有点违反直觉；毕竟，Snake就是我们的应用，不是吗？是的，但Google
    Play的结构是这样的，您需要创建一个游戏服务应用，实际的游戏（在这种情况下是Snake）将与该应用进行通信。游戏服务应用将拥有我们将从Snake游戏中授予和显示的成就和排行榜：
- en: Log in to your Google Play developer console at [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到[https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)的Google
    Play开发者控制台。
- en: Click on the **Game services** tab on the left of the web page.![Configuring
    the Google Play developer console](img/88590S_09_15.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击网页左侧的**游戏服务**选项卡。![配置Google Play开发者控制台](img/88590S_09_15.jpg)
- en: Now click on the **Add a new game** button.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**添加新游戏**按钮。
- en: Enter `Snake` as the name of your game and choose **Arcade** from the **Category**
    drop-down menu. Now click on **Continue**. All of this is shown in the next screenshot:![Configuring
    the Google Play developer console](img/88590S_09_16.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Snake`输入为游戏名称，并从**类别**下拉菜单中选择**街机**。现在点击**继续**。所有这些都显示在下一个截图中：![配置Google Play开发者控制台](img/88590S_09_16.jpg)
- en: Now we can configure our game. Type a game description in the **Description**
    field, and add the same high-resolution icon and feature graphic that we added
    when we uploaded the game.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以配置我们的游戏。在**描述**字段中输入游戏描述，并添加与上传游戏时添加的相同的高分辨率图标和特色图形。
- en: Click on the **Save** button at the top of the screen.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕顶部的**保存**按钮。
- en: Now we will link our Snake Game Services app with our actual *Snake* game. On
    the left of the web page, click on the **Linked apps** tab.![Configuring the Google
    Play developer console](img/88590S_09_17.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将把Snake游戏服务应用与我们实际的*Snake*游戏进行关联。在网页左侧，点击**已关联的应用**选项卡。![配置Google Play开发者控制台](img/88590S_09_17.jpg)
- en: Google Play Game Services can be used with almost any platform, even Apple.
    We are using it for Android here, so click on the **Android** button.![Configuring
    the Google Play developer console](img/88590S_09_18.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Google Play游戏服务可以与几乎任何平台一起使用，甚至是苹果。我们在这里使用它来开发Android应用，所以点击**Android**按钮。![配置Google
    Play开发者控制台](img/88590S_09_18.jpg)
- en: All we need to do on this screen is click on the **Package Name** search box
    and click on our **Snake game** option.![Configuring the Google Play developer
    console](img/88590S_09_19.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个屏幕上，我们只需要点击**包名称**搜索框，然后点击我们的**Snake游戏**选项。![配置Google Play开发者控制台](img/88590S_09_19.jpg)
- en: Click on **Save and continue** at the top of the screen.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕顶部的**保存并继续**。
- en: We're nearing the end of this phase. Click on **Authorize your app now** and
    review the information.![Configuring the Google Play developer console](img/88590S_09_20.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接近这个阶段的结束。点击**立即授权您的应用**并查看信息。![配置Google Play开发者控制台](img/88590S_09_20.jpg)
- en: Finally, click on **Continue**.![Configuring the Google Play developer console](img/88590S_09_21.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**继续**。![配置Google Play开发者控制台](img/88590S_09_21.jpg)
- en: We now have a Google Game Services app set up, and linked to our *Snake* game.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置了一个Google游戏服务应用，并与我们的*Snake*游戏进行了关联。
- en: Implementing the leaderboard in the Google Play developer console
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Google Play开发者控制台中实现排行榜
- en: 'Now we need to create our leaderboard in our developer console so that we can
    later interact with it in our Java code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在开发者控制台中创建我们的排行榜，以便稍后在我们的Java代码中与之交互：
- en: Log in to your developer console.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的开发者控制台。
- en: Click on **Game Services**, then on **Snake**, and then on **Leaderboards**.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**游戏服务**，然后点击**Snake**，然后点击**排行榜**。
- en: Now click on **Add Leaderboard**. This is the **NEW LEADERBOARD** screen:![Implementing
    the leaderboard in the Google Play developer console](img/88590S_09_25.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**添加排行榜**。这是**新排行榜**屏幕：![在Google Play开发者控制台中实现排行榜](img/88590S_09_25.jpg)
- en: This might look like a bit of a marathon ahead, but all we need to do is enter
    a name (`Snake` will do) in the **Name** field, and we are done. It might seem
    strange entering a name for our leaderboard, but this is because it is possible
    to have multiple leaderboards for one game.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这可能看起来像是一项漫长的任务，但我们只需要在**名称**字段中输入一个名称（`Snake`就可以了），然后就完成了。可能会觉得奇怪为我们的排行榜输入一个名称，但这是因为一个游戏可以有多个排行榜。
- en: Read through all the options. You will see that they are just right for us and
    no further action is required. Click on **Save**.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读所有选项。您会发现它们对我们来说都是合适的，不需要进一步操作。点击**保存**。
- en: Our leaderboard is now ready to communicate with our *Snake* app.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的排行榜现在已准备好与我们的*Snake*应用进行通信。
- en: Implementing the achievements in the Google Play developer console
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Google Play开发者控制台中实现成就
- en: Here, we will set up in our developer console the achievements that we discussed
    previously.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在开发者控制台中设置我们之前讨论过的成就。
- en: 'You might like to prepare some graphics to represent each of these achievements.
    They need to be 512 x 512 pixels each. Alternatively, you can use an enlarged
    apple bitmap and perhaps a snake body segment for the apples and snake length
    achievements, respectively:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望准备一些图形来代表这些成就。它们需要每个512 x 512像素。或者，您可以使用一个放大的苹果位图，也许是一个蛇身段，分别用于苹果和蛇长度成就：
- en: Log in to your developer console. Click on **Game Services**, then on **Snake**,
    and then on **Achievements**.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到开发者控制台。点击**游戏服务**，然后点击**蛇**，再点击**成就**。
- en: Click on **Add Achievement** and you will see the **New Achievement** screen:![Implementing
    the achievements in the Google Play developer console](img/88590S_09_30.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加成就**，你将看到**新成就**屏幕：![在Google Play开发者控制台中实施成就](img/88590S_09_30.jpg)
- en: As we are implementing the incremental apple achievements, the first thing to
    do is to enter something in the **New Achievement** form. In the **Name** field,
    enter `Apple Muncher 1`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们正在实施增量苹果成就，首先要做的是在**新成就**表单中输入内容。在**名称**字段中输入`苹果食客1`。
- en: In the **Description** field, enter `Munch 10 apples`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**描述**字段中输入`吃掉10个苹果`。
- en: Click on the **Add Icon** button and select your preferred 512 x 512 graphic.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加图标**按钮，并选择你喜欢的512 x 512图像。
- en: Click on the **Incremental achievements** checkbox and enter `5` in the **How
    many steps are needed** field. This is because the first achievement is for eating
    5 apples. This step is shown in the next screenshot:![Implementing the achievements
    in the Google Play developer console](img/88590S_09_31.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**增量成就**复选框，并在**需要多少步骤**字段中输入`5`。这是因为第一个成就是吃掉5个苹果。此步骤显示在下一个截图中：![在Google Play开发者控制台中实施成就](img/88590S_09_31.jpg)
- en: Enter `10` for the number of achievement points in the **Points** field.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**点数**字段中输入`10`。
- en: Click on **Save** and repeat steps 2 to 7 four more times for all the apple
    achievements, varying the **Name**, **Description**, **How many steps are needed?**,
    and **Points** fields as per our plans and tables of values for achievements.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**，并重复步骤2到7四次，为所有苹果成就变化**名称**、**描述**、**需要多少步骤**和**点数**字段，根据我们的计划和成就数值表。
- en: Now we can move on to our snake length achievements. Click on **New Achievement**.
    In the **Name** field, enter `Super Snake 1`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以继续进行蛇长度成就。点击**新成就**。在**名称**字段中输入`超级蛇1`。
- en: In the **Description** field, enter `Grow your snake to 5 segments`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**描述**字段中输入`让你的蛇长到5节`。
- en: Click on the **Add Icon** button and browse to your preferred image.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加图标**按钮，并浏览到你喜欢的图片。
- en: Finally, enter `10` for the number of achievement points in the **Points** field.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在**点数**字段中输入`10`。
- en: Click on **Save** and repeat steps 9 to 13 four more times for each of the snake
    length achievements, varying the **Name**, **Description**, and **Points** fields
    as per our plans and tables of values for achievements.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**，并重复步骤9到13四次，为每个蛇长度成就变化**名称**、**描述**和**点数**字段，根据我们的计划和成就数值表。
- en: We have now set up our achievements, ready to be implemented in code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置好了成就，准备在代码中实施。
- en: Setting up the Snake project ready for implementation
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置好蛇项目以准备实施
- en: 'What we will do in this section is prepare our app to communicate with the
    Google Play servers:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将准备我们的应用与Google Play服务器通信：
- en: 'Add this highlighted code to the `AndroidManifest.xml` file, just before the
    closing `</application>` tag:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这段高亮代码添加到`AndroidManifest.xml`文件中，就在闭合的`</application>`标签之前：
- en: '[PRE1]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create the `ids.xml` file in the `values` folder in the Project Explorer. Now
    you need to get your unique code for your game to go to this file. Log in to your
    developer console, click on **Game Services**, and then click on **Snake**. Now
    click on **Achievements**.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中的`values`文件夹中创建`ids.xml`文件。现在你需要获取你的游戏的唯一代码放入这个文件中。登录到开发者控制台，点击**游戏服务**，然后点击**蛇**。现在点击**成就**。
- en: Just below your list of achievements is a small **Get resources** link:![Setting
    up the Snake project ready for implementation](img/88590S_09_32.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的成就列表下方有一个小的**获取资源**链接：![设置好蛇项目以准备实施](img/88590S_09_32.jpg)
- en: Click on the **Get resources** link.![Setting up the Snake project ready for
    implementation](img/88590S_09_33.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**获取资源**链接。![设置好蛇项目以准备实施](img/88590S_09_33.jpg)
- en: Copy and paste the code into the `ids.xml` file. Then click on the **Finished**
    button in the developer console.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴代码到`ids.xml`文件中。然后点击开发者控制台中的**完成**按钮。
- en: Now we need to get four code files from the Google Play Game Services GitHub
    repository. We will copy and paste the files directly into our project.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要从Google Play游戏服务GitHub存储库中获取四个代码文件。我们将直接复制并粘贴这些文件到我们的项目中。
- en: Create three new empty files in the `java` folder. Right-click on **GameActivity**
    in the project explorer and navigate to **New** | **Java class file**. Name the
    new file `BaseGameActivity`. Repeat this step and name the file `GameHelper`.
    Repeat this once more and name the file `GameHelperUtils`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`java`文件夹中创建三个新的空文件。在项目资源管理器中右键点击**GameActivity**，然后导航到**新建** | **Java类文件**。将新文件命名为`BaseGameActivity`。重复此步骤，将文件命名为`GameHelper`。再重复一次，将文件命名为`GameHelperUtils`。
- en: Now we will get the Java code to copy into the three files we just made. To
    get the code for `BaseGameActivity.java`, visit [https://github.com/playgameservices/android-basic-samples/tree/master/BasicSamples/libraries/BaseGameUtils/src/main/java/com/google/example/games/basegameutils](https://github.com/playgameservices/android-basic-samples/tree/master/BasicSamples/libraries/BaseGameUtils/src/main/java/com/google/example/games/basegameutils),
    where you can see further links to the code for the three files we created in
    step 7:![Setting up the Snake project ready for implementation](img/88590S_09_34.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将获取Java代码，复制到我们刚刚创建的三个文件中。要获取`BaseGameActivity.java`的代码，请访问[https://github.com/playgameservices/android-basic-samples/tree/master/BasicSamples/libraries/BaseGameUtils/src/main/java/com/google/example/games/basegameutils](https://github.com/playgameservices/android-basic-samples/tree/master/BasicSamples/libraries/BaseGameUtils/src/main/java/com/google/example/games/basegameutils)，在那里你可以看到进一步链接到我们在步骤7中创建的三个文件的代码：![设置好蛇项目以准备实施](img/88590S_09_34.jpg)
- en: Click on **BaseGameActivity.java** as shown in the preceding screenshot. Select
    all of the code and copy and paste it into the identically named file that we
    created in Android Studio. Note that when we created the file, Android Studio
    created some basic template code. We need to delete all of this, except our package
    name at the top. When we paste in the copied code, we need to delete the Google
    package name.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**BaseGameActivity.java**，如前面的截图所示。选择所有代码，然后复制粘贴到我们在Android Studio中创建的同名文件中。请注意，当我们创建文件时，Android
    Studio创建了一些基本模板代码。我们需要删除所有这些代码，除了顶部的包名。当我们粘贴复制的代码时，需要删除Google的包名。
- en: Click on **GameHelper.java**, as shown in the previous screenshot, and repeat
    step 9.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**GameHelper.java**，如前面的截图所示，并重复第9步。
- en: Click on **GameHelperUtils.java**, as shown in the preceding screenshot, and
    repeat step 9.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**GameHelperUtils.java**，如前面的截图所示，并重复第9步。
- en: There's one more file to create. Right-click on the **values** folder in the
    project explorer. Navigate to **New** | **File**. Name the file `gamehelper_strings.xml`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一个文件要创建。在项目资源管理器中右键单击**values**文件夹。导航到**New** | **File**。将文件命名为`gamehelper_strings.xml`。
- en: 'Get the code that we need for this file in the same way as we did for the previous
    three Java files from but from this link: [https://github.com/playgameservices/android-basic-samples/blob/master/BasicSamples/libraries/BaseGameUtils/src/main/res/values/gamehelper_strings.xml](https://github.com/playgameservices/android-basic-samples/blob/master/BasicSamples/libraries/BaseGameUtils/src/main/res/values/gamehelper_strings.xml).'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与前三个Java文件相同的方式获取此文件所需的代码，但是从此链接获取：[https://github.com/playgameservices/android-basic-samples/blob/master/BasicSamples/libraries/BaseGameUtils/src/main/res/values/gamehelper_strings.xml](https://github.com/playgameservices/android-basic-samples/blob/master/BasicSamples/libraries/BaseGameUtils/src/main/res/values/gamehelper_strings.xml)。
- en: Paste the code in `gamehelper_strings.xml`, which we created in step 12.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码粘贴到我们在第12步中创建的`gamehelper_strings.xml`中。
- en: Now change the `MainActivity` declaration in the `MainActivity.java` file.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在修改`MainActivity.java`文件中的`MainActivity`声明。
- en: 'Consider this code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下这段代码：
- en: '[PRE2]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Change it to the following code so that we can now extend the version of Activity
    that handles all the hard work of the Game Services API:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下代码，这样我们现在可以扩展处理游戏服务API的Activity版本：
- en: '[PRE3]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now check out the code in the `GameActivity.java` file:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在查看`GameActivity.java`文件中的代码：
- en: '[PRE4]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Change the preceding code to the following code so that we can now extend the
    version of Activity that handles all the hard work of the Game Services API:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码更改为以下代码，这样我们现在可以扩展处理游戏服务API的Activity版本：
- en: '[PRE5]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that for both Activities, we have an error in the class declaration we
    just typed. If you hover the mouse cursor over the code we typed in the previous
    step, you can see the reason. We need to implement some abstract methods of a
    class we are using. Recall from [Chapter 6](ch06.xhtml "Chapter 6. OOP – Using
    Other People's Hard Work"), OOP – *Using Other People's Hard Work*, that if a
    method in a class is declared abstract, then the class that extends it must implement
    it. That's us! Let's perform an empty implementation for now. Right-click on the
    line of code with the error and navigate to **Generate** | **Implement Methods**.
    Now click on **OK**. Perform this step for the `MainActivity.java` file and the
    `GameActivity.java` file. Our empty methods are now ready for our code. We will
    write the code in the next tutorial.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，对于这两个Activity，我们在刚刚输入的类声明中有一个错误。如果将鼠标悬停在我们在上一步中输入的代码上，就可以看到错误的原因。我们需要实现一些我们正在使用的类的抽象方法。回想一下[第6章](ch06.xhtml
    "第6章。OOP – 使用他人的辛勤工作")中的内容，OOP – *使用他人的辛勤工作*，如果一个类中的方法被声明为抽象的，那么扩展它的类必须实现它。这就是我们！现在先进行一个空的实现。右键单击带有错误的代码行，导航到**Generate**
    | **Implement Methods**。现在点击**OK**。对`MainActivity.java`文件和`GameActivity.java`文件执行此步骤。我们的空方法现在已经准备好了。我们将在下一个教程中编写代码。
- en: Next, using the project explorer, find the `build.gradle` file. Be careful;
    there are two files with the same name. The file that we need to find is a couple
    of lines below the `AndroidManifest.xml` file. It is highlighted in the next screenshot.
    Open it by double-clicking on the `build.gradle` file:![Setting up the Snake project
    ready for implementation](img/88590S_09_10.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用项目资源管理器找到`build.gradle`文件。要小心，有两个同名的文件。我们需要找到的文件在`AndroidManifest.xml`文件的下面几行。在下一个截图中有高亮显示。双击`build.gradle`文件打开它：![设置好Snake项目以准备实施](img/88590S_09_10.jpg)
- en: 'Find the section of code shown here and add the line that is highlighted. This
    makes all the classes we downloaded in the previous guide available for use in
    our *Snake* game:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到这里显示的代码部分，并添加高亮显示的行。这样我们在上一篇指南中下载的所有类都可以在我们的*Snake*游戏中使用：
- en: '[PRE6]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Okay, I agree that was a fairly tough tutorial, but we are now ready to implement
    our code in three final steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我同意那是一个相当艰难的教程，但是现在我们已经准备好在三个最后步骤中实现我们的代码了：
- en: Player sign-in and buttons.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家登录和按钮。
- en: Leaderboards.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排行榜。
- en: Achievements.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成就。
- en: We will then be able to upload our updated app and use our new leaderboards
    and achievements.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们就可以上传我们更新的应用程序并使用我们的新排行榜和成就了。
- en: Implementing the player's sign-in, achievements, and leaderboard buttons
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现玩家的登录、成就和排行榜按钮
- en: By the end of this section, players will be able to log in through the game
    to our empty leaderboards and achievements. The guides that follow this section
    will actually make the leaderboards and achievements work.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本节结束时，玩家将能够通过游戏登录到我们的空排行榜和成就。接下来的指南将使排行榜和成就真正起作用。
- en: First, let's enable our Game Services. All of the work we have done so far in
    the developer console needs to be published before we can use it. Log in to your
    developer console. Navigate to **Game Services** | **Snake** | **Ready to publish**
    | **Publish game**. Then you will be shown a **Publish your game** button. Click
    on it. Finally, read the brief disclaimer and click on **Publish now**.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们启用游戏服务。到目前为止，在开发者控制台中所做的所有工作都需要在我们可以使用它之前发布。登录到您的开发者控制台。导航至**游戏服务** |
    **Snake** | **准备发布** | **发布游戏**。然后会显示一个**发布您的游戏**按钮。点击它。最后，阅读简要的免责声明，然后点击**立即发布**。
- en: 'Now we need to build a UI that has **Sign in**, **Sign out**, **Leaderboards**,
    and **Achievements** buttons. Open the `layout_main.xml` file and edit it on the
    **Text** tab of the editor window by adding the following code. Obviously, there
    is a lot to type. You might like to copy and paste the code from the download
    package at `Chapter9\EnhancedSnakeGame\layout`. Here is the code. Type it in or
    copy and paste it:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要构建一个具有**登录**、**登出**、**排行榜**和**成就**按钮的UI。打开`layout_main.xml`文件，并在编辑器窗口的**文本**选项卡上通过添加以下代码进行编辑。显然，需要输入很多内容。您可能希望从`Chapter9\EnhancedSnakeGame\layout`的下载包中复制并粘贴代码。以下是代码。输入或复制并粘贴它：
- en: '[PRE7]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Explaining the code line by line is beyond the scope of the book, but this is
    not much different from the code we have been autogenerating when using the UI
    designer since [Chapter 2](ch02.xhtml "Chapter 2. Getting Started with Android"),
    *Getting Started with Android*. Each block of the code in the last step defines
    a button and its position on the screen. You can switch to the design tab and
    move the buttons around to suit yourself. Note that the reason some of the buttons
    are not visible in the designer is that they are hidden until the player signs
    in. The reason we have done things this way is to make sure we implement the sign
    in button in just the right way. Note the `id` attribute for each of the buttons.
    We will be manipulating them in our Java code next. With some buttons set to `visibility
    = gone`, we see something like this:![Implementing the player's sign-in, achievements,
    and leaderboard buttons](img/88590S_09_40.jpg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐行解释代码超出了本书的范围，但这与我们在[第2章](ch02.xhtml "第2章。开始使用Android")*开始使用Android*时使用UI设计器自动生成的代码并没有太大不同。上一步中的代码块中的每个代码块定义了一个按钮及其在屏幕上的位置。您可以切换到设计选项卡并移动按钮以适应自己。请注意，设计师中某些按钮不可见的原因是它们在玩家登录之前是隐藏的。我们之所以这样做的原因是为了确保我们以恰当的方式实现登录按钮。请注意每个按钮的`id`属性。接下来我们将在我们的Java代码中操作它们。将一些按钮设置为`visibility
    = gone`后，我们看到类似以下内容：![实现玩家的登录、成就和排行榜按钮](img/88590S_09_40.jpg)
- en: With some buttons set to `visibility = visible`, we see something like what
    is shown in the following screenshot:![Implementing the player's sign-in, achievements,
    and leaderboard buttons](img/88590S_09_41.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一些按钮设置为`visibility = visible`后，我们看到类似以下截图所示的内容：![实现玩家的登录、成就和排行榜按钮](img/88590S_09_41.jpg)
- en: You might be wondering why we are designing a UI when `SnakeAnimView` is what
    the user sees. We could have implemented all our own buttons with bitmaps and
    used their screen coordinates to detect presses, but what we will do now is load
    our UI on top of `SnakeAnimView`, which will greatly simplify things. Switch to
    the **MainActivity** tab in the editor window.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会想知道为什么我们要设计一个UI，而`SnakeAnimView`是用户看到的内容。我们本可以使用位图实现所有自己的按钮，并使用它们的屏幕坐标来检测按压，但现在我们将在`SnakeAnimView`上加载我们的UI，这将大大简化事情。切换到编辑器窗口中的**MainActivity**选项卡。
- en: 'First of all, we want to implement the `onClickListener` interface to handle
    our button clicks. To achieve this, change the class declaration to this:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们想要实现`onClickListener`接口来处理我们的按钮点击。为实现这一点，将类声明更改为以下内容：
- en: '[PRE8]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we can get Android Studio to quickly implement the required `onClick` method
    by right-clicking on the class declaration, navigating to **Add** | **Implement
    methods**, and then clicking on **OK**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过右键单击类声明，导航至**添加** | **实现方法**，然后点击**确定**，让Android Studio快速实现所需的`onClick`方法。
- en: 'Immediately after the previous line of code, we declare our four new buttons.
    Add this code after the code in the previous step:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一行代码之后，我们立即声明了我们的四个新按钮。在上一步中的代码之后添加此代码：
- en: '[PRE9]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `onCreate` method, just after the call to the `setContent` view, we
    use an object of the `LayoutInflater` class to load our UI on top of our `SnakeAnimView`.
    Add the highlighted code after the call to `setContentView`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中，在调用`setContent`视图之后，我们使用`LayoutInflater`类的对象在我们的`SnakeAnimView`上加载我们的UI。在调用`setContentView`之后添加突出显示的代码：
- en: '[PRE10]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Immediately after the code in the previous step, we can get a reference to
    all our buttons and listen to clicks in the usual way:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步中的代码之后，我们可以引用所有的按钮并以通常的方式监听点击：
- en: '[PRE11]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Remember that in the previous guide, we overrode two abstract methods that
    we inherited when we extended the `BaseGameActivity` class. Now we will put some
    code into their implementation. The code is very straightforward. We hide the
    sign out button and show the sign in button when the sign-in fails, and we hide
    the sign in button and show all the other three buttons when the sign-in succeeds.
    Here are the two methods in their entirety. Type the highlighted code within the
    methods shown:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，在上一篇指南中，当我们扩展`BaseGameActivity`类时，我们覆盖了两个抽象方法。现在我们将在它们的实现中放入一些代码。代码非常简单。当登录失败时，我们隐藏登出按钮并显示登录按钮；当登录成功时，我们隐藏登录按钮并显示其他三个按钮。以下是这两种方法的全部内容。在所示的方法中输入突出显示的代码：
- en: '[PRE12]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we deal with the `onClick` method and what happens when the player clicks
    on any one of our four buttons. First, we type the code for our switch block.
    We will fill in the `case` statements in the next step:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们处理`onClick`方法以及玩家点击我们四个按钮中的任何一个时会发生什么。首先，我们输入我们的switch块的代码。我们将在下一步填写`case`语句：
- en: '[PRE13]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, we handle the sign in button. We simply call the `beginUserInitiatedSignIn`
    method. It is implemented for us in the `BaseGameActivity` class. Type this code
    in the `switch` block from the previous step:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们处理登录按钮。我们只需调用`beginUserInitiatedSignIn`方法。这在`BaseGameActivity`类中已经为我们实现了。在前一步的`switch`块中输入这段代码：
- en: '[PRE14]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we handle what happens when the player signs out. We just call `signOut`,
    which is implemented for us in the `BaseGameActivity` class. We then hide all
    our buttons and show the sign in button again. Type the following code after the
    code from the previous step:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们处理玩家登出时会发生什么。我们只需调用`signOut`，这在`BaseGameActivity`类中已经为我们实现了。然后隐藏所有按钮，再次显示登录按钮。在上一步的代码后面输入以下代码：
- en: '[PRE15]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we handle what happens when the player clicks on the achievements button.
    One line of code gives us all of the achievement functionality. This is what OOP
    is all about—someone else''s hard work doing everything for us. Type this code
    after the preceding code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们处理玩家点击成就按钮时会发生什么。一行代码为我们提供了所有成就功能。这就是面向对象编程的全部意义——别人的辛勤工作为我们做了一切。在前面的代码后面输入这段代码：
- en: '[PRE16]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we handle what happens when the player clicks on the **Leaderboards**
    button. Again, one line of code gives us all of the leaderboard''s functionality:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们处理了玩家点击**排行榜**按钮时会发生什么。再次，一行代码为我们提供了所有排行榜的功能：
- en: '[PRE17]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We explained the code as we went, but let''s summarize:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在进行时解释了代码，但让我们总结一下：
- en: We designed a simple UI.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们设计了一个简单的用户界面。
- en: We loaded the UI on top of `SnakeAnimView`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`SnakeAnimView`上加载了用户界面。
- en: We got a reference to our four buttons and listened for clicks.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们得到了对我们的四个按钮的引用，并监听了点击事件。
- en: We handled what happens when people click on our buttons, which amounted to
    nothing more than hiding and showing buttons as appropriate, calling methods from
    `BaseGameActivity`, and using the `Intent` class to implement all our leaderboard
    and achievement functionalities.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们处理了当人们点击我们的按钮时会发生什么，这只不过是根据需要隐藏和显示按钮，从`BaseGameActivity`调用方法，并使用`Intent`类来实现我们所有的排行榜和成就功能。
- en: You can actually run the *Snake* game and see the leaderboards and achievements
    screens. Of course, at this point, nobody will have any achievements or high scores
    yet. We will fix this now.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以运行*Snake*游戏并查看排行榜和成就界面。当然，此时还没有人有任何成就或高分。我们现在将修复这个问题。
- en: Implementing the leaderboards in code
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在代码中实现排行榜
- en: 'Once more, we will witness the simplicity of using other people''s well-designed
    code. Admittedly, there was some complexity to arrive at this point, but once
    you have set it all up, then your next game will take a fraction of the time you
    took setting up:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将见证使用其他人设计良好的代码的简单性。诚然，要达到这一点确实有一些复杂性，但一旦你设置好了，那么你下一个游戏将只需要花费你设置的一小部分时间：
- en: We want to submit a score to the `leaderboards` at the end of a game. Google
    Play will handle the process to check whether or not it is a high score. Google
    Play will even determine if it is a new high score for the week or month. Open
    the `GameActivity.java` file in the code editor window.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望在游戏结束时向`排行榜`提交分数。Google Play将处理检查是否为高分。Google Play甚至会确定这是否是本周或本月的新高分。在代码编辑器窗口中打开`GameActivity.java`文件。
- en: 'Find the `updateGame` method and add the highlighted code among all the other
    things we do when the game is over (when `dead` equals `true`). We wrap just one
    line of code within a check to ensure that the current player is signed in:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`updateGame`方法，并在游戏结束时（当`dead`等于`true`时）在所有其他操作中添加高亮显示的代码。我们只需在检查中包装一行代码，以确保当前玩家已登录：
- en: '[PRE18]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That's it! Build the game and play it on a real Android device. You can now
    visit the leaderboards on Google Play and see your high score.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！构建游戏并在真正的Android设备上玩游戏。现在你可以访问Google Play上的排行榜，看到你的最高分。
- en: 'That was nice and easy. Here, we can see the login screen:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单。在这里，我们可以看到登录界面：
- en: '![Implementing the leaderboards in code](img/88590S_09_45.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![在代码中实现排行榜](img/88590S_09_45.jpg)'
- en: 'Then comes the welcome message and our **Achievements** and **Leaderboards**
    buttons as shown in the following screenshot:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是欢迎消息和我们的**成就**和**排行榜**按钮，如下截图所示：
- en: '![Implementing the leaderboards in code](img/88590S_09_46.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![在代码中实现排行榜](img/88590S_09_46.jpg)'
- en: Finally, we can see our new leaderboards with just one player—me.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到我们的新排行榜只有一个玩家——我。
- en: '![Implementing the leaderboards in code](img/88590S_09_47.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![在代码中实现排行榜](img/88590S_09_47.jpg)'
- en: Just in case you're wondering, I can do a lot better than 39.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以防你想知道，我可以做得比39好得多。
- en: Implementing the achievements in code
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在代码中实现成就
- en: 'This brief tutorial will first set up our game to post incremental updates
    to the progress of the apple achievements and the one-off achievement of the snake
    segment length:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的教程首先会设置我们的游戏，以便发布苹果成就的增量更新和蛇段长度的一次性成就：
- en: 'In the `GameActivity.java` file, add an `applesMunchedThisTurn` variable just
    after the class declaration, as shown here:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GameActivity.java`文件中，在类声明后添加一个`applesMunchedThisTurn`变量，如下所示：
- en: '[PRE19]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Find the `updateGame` method.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`updateGame`方法。
- en: 'Add a line of code to increment `applesMunchedThisTurn` each time an apple
    is eaten by adding the highlighted line of code where it is shown:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次吃一个苹果时，添加一行代码来增加`applesMunchedThisTurn`，在显示的地方添加高亮显示的代码行：
- en: '[PRE20]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Notice that we place this highlighted line among the code that executes when
    the player dies (the `if(dead)` block). We could do it at the point the player
    eats an apple, but if we send five messages to the Google Play servers every time
    the player eats an apple, we might risk Google considering it as spam. We simply
    increment each achievement by the number of apples that have been eaten, and then
    reset the `applesMunchedThisTurn` variable to zero. We wrap our achievement method
    calls with a check that the player is signed in and that `applesMunchedThisTurn`
    is greater than zero. Now add the highlighted code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意我们将这一突出显示的行放在了玩家死亡时执行的代码中（`if(dead)`块）。我们可以在玩家吃苹果的时候做这件事，但是如果我们每次玩家吃苹果时向Google
    Play服务器发送五条消息，我们可能会冒着被Google认为是垃圾邮件的风险。我们只是通过已吃的苹果数量逐个增加每个成就，然后将`applesMunchedThisTurn`变量重置为零。我们在成就方法调用中加入了一个检查，即玩家已登录并且`applesMunchedThisTurn`大于零。现在添加突出显示的代码：
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we will handle the segment length achievements. In the `updateGame` method,
    in the part of the code that executes when the player eats an apple, just after
    the line of code that increments `snakeLength`, we test for any of the lengths
    that warrant a Super Snake achievement. When the desired length is achieved (5,
    10, 25, 35, or 50 segments), we ask Google Play to award it (if it hasn''t been
    awarded yet). We wrap our achievement method calls with a check that the player
    is signed in and that at least one apple has been eaten. The highlighted code
    is the new code to add:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将处理分段长度成就。在`updateGame`方法中，在玩家吃苹果时执行的代码部分，就在增加`snakeLength`的代码行之后，我们测试是否达到了任何值得获得超级贪吃蛇成就的长度。当达到所需长度（5、10、25、35或50段）时，我们要求Google
    Play授予它（如果尚未授予）。我们在成就方法调用中加入了一个检查，即玩家已登录并且至少吃了一个苹果。突出显示的代码是要添加的新代码：
- en: '[PRE22]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: That's it! You can now play the game and earn achievements:![Implementing the
    achievements in code](img/88590S_09_48.jpg)
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！现在你可以玩游戏并获得成就：![在代码中实现成就](img/88590S_09_48.jpg)
- en: Again, that was nice and easy. You can probably see how simple it would be to
    implement all other achievement ideas that we discussed earlier in the chapter.
    Let's move on and update our game on Google Play.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这很简单。你可能可以看到在本章前面讨论的所有其他成就想法要实现起来有多简单。让我们继续更新我们在Google Play上的游戏。
- en: Uploading the updated Snake game to Google Play
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将更新后的贪吃蛇游戏上传到Google Play
- en: 'This is nice and easy and is performed as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，操作如下：
- en: 'First, we need to let Google Play know this is a new version. We do this by
    changing the version number. Open the `Build.gradle` file and find these lines
    of code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要让Google Play知道这是一个新版本。我们通过更改版本号来实现这一点。打开`Build.gradle`文件，找到以下代码行：
- en: '[PRE23]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Build your APK in the usual way.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以通常的方式构建你的APK。
- en: Log in to your developer console.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的开发者控制台。
- en: Click on **Snake Game 1.0**, then on **APK**, and then on **Upload new APK to
    production**.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**贪吃蛇游戏 1.0**，然后点击**APK**，然后点击**上传新APK到生产**。
- en: Go to your newly updated APK.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到你的新更新的APK。
- en: In the **What's new in this version** field, enter `Added leaderboards and achievements`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**此版本的新功能**字段中输入`添加排行榜和成就`。
- en: Click on **Publish now to production**.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**立即发布到生产**。
- en: From now onwards, everyone who downloads your game will get the updated version.
    With our first game, complete with sprite sheet animations, leaderboards and achievements,
    it is time to take a break and do a little theory.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，每个下载你的游戏的人都将获得更新的版本。有了我们的第一个游戏，包括精灵表动画、排行榜和成就，是时候休息一下，进行一些理论学习了。
- en: What next?
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来呢？
- en: You should be proud of your creations to date, especially if this was your first
    attempt at programming. If some of the concepts, syntax, or projects are still
    not clear, then consider revisiting them after a break.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你的第一次尝试编程，你应该为你迄今为止的创作感到自豪。如果一些概念、语法或项目仍然不清楚，那么考虑休息一下后再重新学习。
- en: The one thing we haven't talked about is the even more new skills we need to
    progress further. The reason for this is that it very much depends on your initial
    motivation for reading this book.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有讨论的一件事是我们需要进一步提高的新技能。这是因为这在很大程度上取决于你最初阅读本书的动机。
- en: Getting a programmer's job
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获得程序员的工作
- en: If you want to be a Java employee, that is, working full time with a professional
    capacity for a medium or large company, then you will probably need a college
    degree, and this book hopefully has given you a glimpse into the world of programming
    and Java itself. If this describes you, then for further study, you could consider
    a more formal Java book, followed by a pure OOP book about object-oriented analysis
    and design. You could then move on to study design patterns.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想成为一名Java员工，也就是说，全职在中型或大型公司以专业能力工作，那么你可能需要大学学位，希望这本书能给你一个对编程和Java本身世界的一瞥。如果这描述了你，那么在进一步学习时，你可以考虑更正式的Java书籍，然后是关于面向对象分析和设计的纯OOP书籍。然后你可以继续学习设计模式。
- en: 'Some of the best books that fit into these categories are *Head First Object-Oriented
    Analysis and Design: A Brain Friendly Guide to OOA&D, Brett McLaughlin and Gary
    Pollice; Head First Design Patterns*; *Eric Freeman and Elisabeth Robson*, *O''Reilly*;
    and *Design Patterns CD: Elements of Reusable Object-Oriented Software*, *Erich
    Gamma, Richard Helm, Ralph Johnson, and John Vlissides*, *Addison Wesley*. The
    first two are very beginner-friendly. The latter is highly regarded but a much
    more challenging read for a beginner.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '符合这些类别的一些最好的书籍是*Head First Object-Oriented Analysis and Design: A Brain Friendly
    Guide to OOA&D, Brett McLaughlin and Gary Pollice; Head First Design Patterns*;
    *Eric Freeman and Elisabeth Robson*, *O''Reilly*; 和 *Design Patterns CD: Elements
    of Reusable Object-Oriented Software*, *Erich Gamma, Richard Helm, Ralph Johnson,
    and John Vlissides*, *Addison Wesley*。前两本书非常适合初学者。后者备受推崇，但对初学者来说是一本更具挑战性的阅读。'
- en: My guess is that most likely, you didn't pick up a beginners' book on games
    and Java because you were headed in that direction, so let's consider our *piece
    de resistance* so far—our Snake game.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜你之所以选择了一本关于游戏和Java的初学者书，很可能不是因为你正朝着那个方向前进，所以让我们来考虑一下到目前为止我们的*巅峰之作*——我们的贪吃蛇游戏。
- en: Building bigger and better games
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建更大更好的游戏。
- en: If you compare our Snake game to a modern, professional title, even a two-dimensional
    game, never mind a modern big-budget First Person Shooter (FPS), then we still
    have a lot of learning to do. Let's consider some inadequacies of our *Snake*
    game compared to a professional game.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把我们的“贪吃蛇”游戏与现代的专业游戏进行比较，甚至是一个二维游戏，更不用说现代的大型预算第一人称射击游戏（FPS），那么我们仍然有很多需要学习的地方。让我们考虑一下我们的*贪吃蛇*游戏与专业游戏相比的一些不足之处。
- en: Think about our flower and tail animations. They worked because we set up a
    crude timing system within our `controlFPS` method. But what if we had a dozen
    or more game objects that needed to be animated?
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 想想我们的花朵和尾巴动画。它们之所以有效是因为我们在`controlFPS`方法中建立了一个粗糙的定时系统。但如果我们有十几个或更多需要进行动画处理的游戏对象呢？
- en: Then what if they all had different frame counts and frame rates? We can further
    complicate things if some of the animations need to work on a loop and others
    need to reverse through each frame before restarting.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如果它们都有不同的帧数和帧速率呢？如果一些动画需要在循环中工作，而其他动画需要在每个帧之间倒转再重新开始，我们可以进一步复杂化事情。
- en: Now imagine a character that has to jump. How do we synchronize whatever frame
    happens to be displayed at the time the player jumps?
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一个角色需要跳跃。当玩家跳跃时，我们如何同步显示的任何帧呢？
- en: Actually, all of these problems and more are solvable with a quick web search
    and some study. The point is that things are starting to get fairly complicated,
    and we have only talked about animation.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，所有这些问题以及更多问题都可以通过快速的网络搜索和一些学习来解决。问题是事情开始变得相当复杂，而我们只谈到了动画。
- en: What about physics? How will objects in our future games behave when they bounce?
    We were able to cheat with our Squash game because the environment and the objects
    were few and simple. What if the ball was round and there were lots of objects
    of different sizes and shapes, some moving fast and some stationary? How would
    we simulate this physics model?
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学呢？当我们的未来游戏中的物体弹跳时会有什么行为？我们在“弹球”游戏中能够作弊，因为环境和物体都很少而且简单。如果球是圆的，有很多不同大小和形状的物体，有些移动快，有些静止，我们该如何模拟这个物理模型呢？
- en: Again, the answers are all out there but they add complexity. What about other
    environmental factors such as light and shadow? What happens when our screen needs
    to scroll to the left and right? What about up and down?
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 答案都在那里，但它们增加了复杂性。其他环境因素如光和阴影呢？当我们的屏幕需要左右滚动时会发生什么？上下呢？
- en: Now consider all of these problems and imagine implementing a solution in a
    virtual three-dimensional world. Once again, the solutions are out there, but
    it would take a determined beginner many months to implement their own solution
    using the raw mathematics involved in three-dimensional calculations.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑所有这些问题，并想象在虚拟的三维世界中实现解决方案。再次强调，解决方案都在那里，但一个决心的初学者可能需要花费数月时间来使用涉及三维计算的原始数学来实现他们自己的解决方案。
- en: Next, imagine that you want your new three-dimensional, physics-based, superbly
    animated game to be available on Android, Apple, and PC platforms.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，想象一下你希望你的新的三维、基于物理的、动画效果出色的游戏可以在Android、Apple和PC平台上使用。
- en: If I have discouraged you from seeking some of these solutions but you are fascinated
    to find out the answer, then my advice would be to go and find it out anyway.
    It will definitely be a fascinating journey and make you a better game developer.
    Think twice, however, before implementing any of this stuff for any reason other
    than curiosity, self-improvement, or fun.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我打消了你寻找这些解决方案的积极性，但你对找到答案很感兴趣，那么我的建议是去找到答案。这绝对会是一段迷人的旅程，并让你成为一个更好的游戏开发者。然而，在实现任何这些东西时，三思而后行，除非出于好奇心、自我提高或者乐趣之外的任何原因。
- en: The reason for this is because we are not the first people to have these and
    many other problems—the solutions have already been implemented. And guess what?
    We can use those solutions, often at no cost to ourselves.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是因为我们不是第一个遇到这些问题和许多其他问题的人——解决方案已经被实现。猜猜？我们可以使用这些解决方案，通常不需要花费。
- en: For example, there is a library called OpenGL that has one purpose—drawing in
    a three-dimensional coordinate system. It has classes and methods for everything
    you will ever need. There is even a version of OpenGL for mobile, called OpenGL
    ES, that you can program in Java. It is true that OpenGL has some complexities
    of its own, but they can be learned in a logical and straightforward manner from
    easy to hard.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有一个名为OpenGL的库，它有一个目的——在三维坐标系统中绘制。它有你所需要的一切类和方法。甚至有一个移动版的OpenGL，叫做OpenGL ES，你可以用Java来编程。的确，OpenGL本身也有一些复杂性，但可以从简单到困难以逻辑和直接的方式学习。
- en: If you got this far with this book, take a quick refresher on [Chapter 6](ch06.xhtml
    "Chapter 6. OOP – Using Other People's Hard Work"), *OOP – Using Other People's
    Hard Work*, and then grab a copy of *OpenGL ES2 for Android*, *K. Brothaler*,
    *Pragmatic Bookshelf*. The book explores the code library and some of the mathematics
    behind it, so it should satisfy both the curious and the purely practical reader.
    Alternatively, you can check out loads of free tutorials at [http://www.learnopengles.com/](http://www.learnopengles.com/).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经读到了这本书的这一部分，请快速复习一下[第6章](ch06.xhtml "第6章。OOP – 使用他人的辛勤工作")，“OOP – 使用他人的辛勤工作”，然后获取一本《OpenGL
    ES2 for Android》，作者K. Brothaler，Pragmatic Bookshelf的副本。这本书探讨了代码库以及一些背后的数学知识，因此它应该能够满足对知识好奇和纯粹实用的读者。或者，你可以在[http://www.learnopengles.com/](http://www.learnopengles.com/)上查看大量免费教程。
- en: If you just want to make more games and are not particularly fussed about the
    three-dimensional features, then the next logical step would be a Java-based game
    library. There are many, but one in particular uses pure Java to build games on
    Android, iPhone, PC, and the Web.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是想制作更多的游戏，并且对三维特性并不特别在意，那么下一个合乎逻辑的步骤将是一个基于Java的游戏库。有很多，但其中一个特别使用纯Java在Android、iPhone、PC和Web上构建游戏。
- en: Indeed, you can build one Java game and it will run on almost any device in
    the world, even a web page. It also has classes that simplify the use of the aforementioned
    OpenGL ES. The library is called LibGDX, and I had loads of fun making a platform
    game following along with *Learning Libgdx Game development* ([https://www.packtpub.com/game-development/learning-libgdx-game-development](https://www.packtpub.com/game-development/learning-libgdx-game-development)).
    LibGDX also solves all our animation, scrolling, and physics conundrums without
    any math, although it doesn't really address three-dimensional features.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你可以构建一个Java游戏，它将在世界上几乎任何设备上运行，甚至是一个网页。它还有一些简化前述OpenGL ES使用的类。这个库叫做LibGDX，我在*学习Libgdx游戏开发*（[https://www.packtpub.com/game-development/learning-libgdx-game-development](https://www.packtpub.com/game-development/learning-libgdx-game-development)）中跟着做了一个平台游戏，玩得很开心。LibGDX还解决了所有我们的动画、滚动和物理难题，而无需任何数学，尽管它实际上并没有涉及三维特性。
- en: Tip
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that both books have some quite in-depth OOP, but this is not out of reach
    if you understood [Chapter 6](ch06.xhtml "Chapter 6. OOP – Using Other People's
    Hard Work"), *OOP – Using Other People's Hard Work*, and are determined.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这两本书都涉及一些相当深入的面向对象编程，但如果你理解了[第6章](ch06.xhtml "Chapter 6. OOP – Using Other
    People's Hard Work") *OOP – Using Other People's Hard Work*，并且有决心，这并不是难以掌握的。
- en: If you want to go 3D straightaway, then a really fun option is the Unreal Engine.
    Unreal Engine is used in lots of really big-budget games and can involve immense
    complexity in another programming language. However, for a way to make two-dimensional
    and three-dimensional games within a GUI development environment, it is probably
    unbeatable. Unreal Engine 4 uses a system called Blueprint, where you can drag
    and drop elements of flow chart-like elements, instead of coding. It still uses
    all the concepts of OOP as well as loops and branching, but you can do loads without
    a single line of *real* code. Take a look at the Unreal Engine version of Flappy
    Bird created without a single line of code, at [https://play.google.com/store/apps/details?id=com.epicgames.TappyChicken](https://play.google.com/store/apps/details?id=com.epicgames.TappyChicken).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想立即进入3D，那么一个非常有趣的选择就是虚幻引擎。虚幻引擎在许多真正大型预算的游戏中使用，并且可能涉及另一种编程语言中的巨大复杂性。然而，要在GUI开发环境中制作二维和三维游戏，它可能是无与伦比的。虚幻引擎4使用了一个叫做蓝图的系统，你可以拖放流程图式的元素，而不是编码。它仍然使用了面向对象编程的所有概念，以及循环和分支，但你可以在没有一行*真正*代码的情况下完成大量工作。看看虚幻引擎版本的Flappy
    Bird，它是在没有一行代码的情况下创建的，网址是[https://play.google.com/store/apps/details?id=com.epicgames.TappyChicken](https://play.google.com/store/apps/details?id=com.epicgames.TappyChicken)。
- en: Unreal Engine can also build games for multiple platforms, but unfortunately,
    there is a small monthly fee, and most restrictively of all, any commercial project
    you make will be subject to an agreement. Here, you pay 30 percent to Epic games,
    but for learning and having fun, it probably can't be beaten.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 虚幻引擎也可以为多个平台构建游戏，但不幸的是，这里有一个小额的月费，而且最具限制性的是，你制作的任何商业项目都将受到协议的约束。在这里，你需要支付30%给Epic游戏，但对于学习和娱乐来说，这可能是无法超越的。
- en: Alternatively, take a look at my blog ([www.gamecodeschool.com](http://www.gamecodeschool.com)),
    where I regularly add articles and fun game building guides aimed at beginner
    to intermediate game programmers. My blog discusses lots of different programming
    languages, target platforms, all the tools previously mentioned, and more.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，看看我的博客（[www.gamecodeschool.com](http://www.gamecodeschool.com)），我经常添加针对初学者到中级游戏程序员的文章和有趣的游戏构建指南。我的博客讨论了许多不同的编程语言、目标平台，以及之前提到的所有工具，以及更多。
- en: Self-test questions
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自测问题
- en: Q1) Try to implement local high scores on the device.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Q1) 尝试在设备上实现本地高分。
- en: Q2) How many eminent computer scientists have made cameo appearances in the
    code throughout this book?
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Q2) 有多少著名的计算机科学家在本书的代码中出现过客串？
- en: Q3) As a final challenge, try to beat my high score on the Snake leaderboards.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Q3) 作为最后的挑战，尝试打破我的贪吃蛇排行榜上的最高分。
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered a lot. We published our *Snake* game on Google Play.
    Then we added some online leaderboards and achievements. We also updated our publication.
    The process showed how very complicated tasks such as communication over the Internet
    can be made really simple using an API.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容。我们在Google Play上发布了我们的*贪吃蛇*游戏。然后我们添加了一些在线排行榜和成就。我们还更新了我们的出版物。这个过程展示了如何使用API将诸如互联网通信之类的非常复杂的任务变得非常简单。
- en: While putting the finishing touches to this book, I watched a YouTube video
    of a lecture from John Carmack, a software legend. He was a key engineer in the
    development of the *Doom* game, which was published in June 1995\. I had to laugh,
    as did his audience, when he explained that while in school, he felt he was missing
    out on the technology revolution, and by the time he was old enough to work, it
    would all be over.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这本书的最后修改时，我看了一段YouTube视频，是由软件传奇人物约翰·卡马克（John Carmack）讲的一场讲座。他是*Doom*游戏开发中的关键工程师，该游戏于1995年6月发布。当他解释说在学校时，他觉得自己错过了技术革命，等到他够大可以工作时，一切都结束了，我不禁笑了起来，他的听众也是如此。
- en: It is certainly true that lots of technology revolutions have come and many
    have gone. At least, many of the early adopters' opportunities have faded. John
    Carmack explained that there is always going to be another revolution just around
    the corner.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 许多技术革命的确已经来临，许多也已经过去。至少，许多早期采用者的机会已经消失。约翰·卡马克解释说，总会有另一个革命就在拐角处。
- en: So you are probably going to develop your skills and watch out for the next
    big thing. Or perhaps, you just want a bit of fun programming anything in any
    language for any platform.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可能会发展你的技能，并关注下一个大事件。或者，你只是想用任何语言为任何平台编程任何东西，玩得开心。
- en: I hope you have enjoyed our journey through Android and Java, and that you will
    continue this journey as well. I sincerely wish you well, whichever path you choose
    for your future. Feel free to come and share your experiences and knowledge at
    [www.gamecodeschool.com](http://www.gamecodeschool.com). The perfect sequel to
    this book will be published mid 2015 called *Android Game Programming by Example*.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢我们一起学习Android和Java的旅程，并且希望你也会继续这个学习之旅。无论你选择什么样的未来道路，我真诚地祝愿你一切顺利。欢迎你来到[www.gamecodeschool.com](http://www.gamecodeschool.com)分享你的经验和知识。这本书的完美续集将于2015年中期出版，名为《通过示例学习Android游戏编程》。
