["```cs\ndelegate returnType delegateName(parameters)\n```", "```cs\nusing System;\n\nnamespace Delegate1\n{\n  delegate int MathFunc(int a, int b);\n\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      MathFunc mf = new MathFunc(add);\n\n      Console.WriteLine(\"add\");\n      Console.WriteLine(mf(4, 5));\n\n      mf = new MathFunc(sub);\n\n      Console.WriteLine(\"sub\");\n      Console.WriteLine(mf(4, 5));\n\n      Console.ReadKey();\n    }\n\n    public static int add(int a, int b)\n    {\n      return a + b;\n    }\n\n    public static int sub(int a, int b)\n    {\n      return (a > b) ? (a - b) : (b - a);\n    }\n  }\n}\n```", "```cs\ndelegate int MathFunc(int a, int b);\n```", "```cs\nMathFunc mf = new MathFunc(add);\n```", "```cs\nusing System;\n\nnamespace Delegate1\n{\n delegate int MathFunc(int a, int b);\n\n class Program\n {\n static void Main(string[] args)\n {\n MathFunc mf = add;\n\n Console.WriteLine(\"add\");\n Console.WriteLine(mf(4, 5));\n\n mf = sub;\n\n Console.WriteLine(\"sub\");\n Console.WriteLine(mf(4, 5));\n Console.ReadKey();\n }\n\n public static int add(int a, int b)\n {\n return a + b;\n }\n\n public static int sub(int a, int b)\n {\n return (a > b) ? (a - b) : (b - a);\n }\n }\n}\n```", "```cs\nusing System;\n\nnamespace Delegate1\n{\n  delegate int MathFunc(int a, int b);\n\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      MyMath mc = new MyMath();\n\n      MathFunc mf = mc.add;\n\n      Console.WriteLine(\"add\");\n      Console.WriteLine(mf(4, 5));\n\n      mf = mc.sub;\n\n      Console.WriteLine(\"sub\");\n      Console.WriteLine(mf(4, 5));\n\n      Console.ReadKey();\n    }\n  }\n  class MyMath\n  {\n    public int add(int a, int b)\n    {\n      return a + b;\n    }\n\n    public int sub(int a, int b)\n    {\n      return (a > b) ? (a - b) : (b - a);\n    }\n  }\n}\n```", "```cs\nusing System;\n\nnamespace MyDelegate\n{\n  delegate void MathFunc(ref int a);\n\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      MathFunc mf;\n      int number = 10;\n      MathFunc myAdd = MyMath.add5;\n      MathFunc mySub = MyMath.sub3;\n\n      mf = myAdd;\n      mf += mySub;\n\n      mf(ref number);\n\n      Console.WriteLine($\"Final number: {number}\");\n\n      Console.ReadKey();\n    }\n  }\n\n  class MyMath\n  {\n    public static void add5(ref int a)\n    {\n      a = a + 5;\n      Console.WriteLine($\"After adding 5 the answer is {a}\");\n    }\n\n    public static void sub3(ref int a)\n    {\n      a = a - 3;\n      Console.WriteLine($\"After subtracting 3 the answer is {a}\");\n    }\n  }\n}\n```", "```cs\nusing System;\n\nnamespace MyDelegate\n{\n  delegate void MathFunc(ref int a);\n\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      MathFunc mf;\n      MathFunc myAdd = MyMath.add5;\n      MathFunc mySub = MyMath.sub3;\n      MathFunc myMul = MyMath.mul10;\n\n      mf = myAdd;\n      mf += mySub;\n      int number = 10;\n\n      mf(ref number);\n\n      mf -= mySub;\n      mf += myMul;\n      number = 10;\n\n      mf(ref number);\n\n      Console.WriteLine($\"Final number: {number}\");\n\n      Console.ReadKey();\n    }\n  }\n\n  class MyMath\n  {\n    public static void add5(ref int a)\n    {\n      a = a + 5;\n      Console.WriteLine($\"After adding 5 the answer is {a}\");\n    }\n\n    public static void sub3(ref int a)\n    {\n      a = a - 3;\n      Console.WriteLine($\"After subtracting 3 the answer is {a}\");\n    }\n\n    public static void mul10(ref int a)\n    {\n      a = a * 10;\n      Console.WriteLine($\"After multiplying 10 the answer is {a}\");\n    }\n  }\n}\n```", "```cs\nusing System;\n\nnamespace EventsAndDelegates\n{\n public delegate A DoSomething();\n\n public class A\n {\n public int value { get; set; }\n }\n\n public class B : A {}\n\n public class Program\n {\n public static A WorkA()\n {\n A a = new A();\n a.value = 1;\n return a;\n }\n\n public static B WorkB()\n {\n B b = new B();\n b.value = 2;\n return b;\n }\n\n public static void Main(string[] args)\n {\n A someA = new A();\n\n DoSomething something = WorkB;\n\n someA = something();\n\n Console.WriteLine(\"The value is \" + someA.value);\n\n Console.ReadLine();\n }\n }\n}\n```", "```cs\nusing System;\n\nnamespace EventsAndDelegates\n{\n public delegate int DoSomething(B b);\n\n public class A\n {\n public int value = 5;\n }\n\n public class B : A {}\n\n public class Program\n {\n public static int WorkA(A a)\n {\n Console.WriteLine(\"Method WorkA called: \");\n return a.value * 5;\n }\n\n public static int WorkB(B b)\n {\n Console.WriteLine(\"Method WorkB called: \");\n return b.value * 10;\n }\n\n public static void Main(string[] args)\n {\n B someB = new B();\n\n DoSomething something = WorkA;\n\n int result = something(someB);\n\n Console.WriteLine(\"The value is \" + result);\n\n Console.ReadLine();\n }\n }\n}\n```", "```cs\nusing System;\n\nnamespace EventsAndDelegates\n{\n  public delegate void GetResult();\n\n  public class ResultPublishEvent\n  {\n    public event GetResult PublishResult;\n\n    public void PublishResultNow()\n    {\n      if (PublishResult != null)\n      {\n        Console.WriteLine(\"We are publishing the results now!\");\n        Console.WriteLine(\"\");\n        PublishResult();\n      }\n    }\n  }\n\n  public class EmailEventHandler\n  {\n    public void SendEmail()\n    {\n      Console.WriteLine(\"Results have been emailed successfully!\");\n    }\n  }\n\n  public class Program\n  {\n    public static void Main(string[] args)\n    {\n      ResultPublishEvent e = new ResultPublishEvent();\n\n      EmailEventHandler email = new EmailEventHandler();\n\n      e.PublishResult += email.SendEmail;\n      e.PublishResultNow();\n\n      Console.ReadLine();\n    }\n  }\n}\n```", "```cs\nusing System;\n\nnamespace EventsAndDelegates\n{\n public delegate void GetResult();\n\n public class ResultPublishEvent\n {\n public event GetResult PublishResult;\n\n public void PublishResultNow()\n {\n if (PublishResult != null)\n {\n Console.WriteLine(\"\");\n Console.WriteLine(\"We are publishing the results now!\");\n Console.WriteLine(\"\");\n PublishResult();\n }\n }\n }\n\n public class EmailEventHandler\n {\n public void SendEmail()\n {\n Console.WriteLine(\"Results have been emailed successfully!\");\n }\n }\n\n public class SmsEventHandler\n {\n public void SmsSender()\n {\n Console.WriteLine(\"Results have been messaged successfully!\");\n }\n }\n\n public class Program\n {\n public static void Main(string[] args)\n {\n ResultPublishEvent e = new ResultPublishEvent();\n\n EmailEventHandler email = new EmailEventHandler();\n SmsEventHandler sms = new SmsEventHandler();\n\n e.PublishResult += email.SendEmail;\n e.PublishResult += sms.SmsSender;\n\n e.PublishResultNow();\n\n e.PublishResult -= sms.SmsSender;\n\n e.PublishResultNow();\n\n Console.ReadLine();\n }\n }\n}\n```", "```cs\npublic class SmsEventHandler\n{\n  public void SmsSender()\n  {\n    Console.WriteLine(\"Results have been messaged successfully!\");\n  }\n}\n```", "```cs\ne.PublishResult += sms.SmsSender;\n```", "```cs\ne.PublishResult -= sms.SmsSender;\n```", "```cs\nvoid eventHandler(object sender, EventArgs e)\n{\n}\n```", "```cs\nusing System;\n\nnamespace EventsAndDelegates\n{\n  class MyEventArgs : EventArgs\n  {\n    public int number;\n  }\n\n  delegate void MyEventHandler(object sender, MyEventArgs e);\n\n  class MyEvent\n  {\n    public static int counter = 0;\n\n    public event MyEventHandler SomeEvent;\n\n    public void GetSomeEvent()\n    {\n      MyEventArgs a = new MyEventArgs();\n\n      if (SomeEvent != null)\n      {\n        a.number = counter++;\n        SomeEvent(this, a);\n      }\n    }\n\n  }\n\n  class X\n  {\n    public void Handler(object sender, MyEventArgs e)\n    {\n      Console.WriteLine(\"Event number: \" + e.number);\n      Console.WriteLine(\"Source Object: \" + sender);\n      Console.WriteLine();\n    }\n  }\n\n  public class Program\n  {\n    public static void Main(string[] args)\n    {\n      X x = new X();\n\n      MyEvent myEvent = new MyEvent();\n\n      myEvent.SomeEvent += x.Handler;\n\n      myEvent.GetSomeEvent();\n      myEvent.GetSomeEvent();\n\n      Console.ReadLine();\n    }\n  }\n}\n```"]