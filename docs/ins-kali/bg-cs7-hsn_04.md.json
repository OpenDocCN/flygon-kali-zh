["```cs\npublic delegate void Summarize<T>(T x, T y);\n```", "```cs\nSummarize<double> s =\n```", "```cs\npublic void FindSum(double x, double y)\n```", "```cs\nsampLabel.Text = $\"<br>{x}+{y}={x + y}\";\n```", "```cs\nSummarize<double> s = FindSum;\n```", "```cs\npublic void FindRatio(decimal x, decimal y)\n{\n    sampLabel.Text += $\"<br>{x}/{y}={x / y}\";\n}  \n```", "```cs\npublic void FindProduct(decimal x, decimal y)\n{\n    sampLabel.Text += $\"<br>{x}*{y}={x * y}\";\n}\n```", "```cs\ns += FindRatio;\ns += FindProduct;\n```", "```cs\ns(4, 5); \n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic delegate void Summarize<T>(T x, T y);//declare generic delegate\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        Summarize<decimal> s = FindSum;//assign FindSum to the delegate\n        s += FindRatio;//assign FindRatio to the delegate\n        s += FindProduct;//assign FindProduct to the delegate\n        s(4, 5);//invoke the delegate, causing the chain of functions to be executed\n    }\n    public void FindSum(decimal x, decimal y)\n    {\n        sampLabel.Text = $\"<br>{x}+{y}={x + y}\";\n    }\n    public void FindRatio(decimal x, decimal y)\n    {\n        sampLabel.Text += $\"<br>{x}/{y}={x / y}\";\n    }\n    public void FindProduct(decimal x, decimal y)\n    {\n        sampLabel.Text += $\"<br>{x}*{y}={x * y}\";\n    }\n}\n```"]