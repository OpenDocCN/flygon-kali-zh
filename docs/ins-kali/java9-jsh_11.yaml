- en: Chapter 11. Advanced Generics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。高级泛型
- en: 'In this chapter, we will dive deep into parametric polymorphism and how Java
    9 allows us to write generic code with classes that use two constrained generic
    types. We will:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨参数多态性以及Java 9如何允许我们编写使用两个受限泛型类型的类的通用代码。我们将：
- en: Work with more advanced scenarios in which we take advantage of parametric polymorphism
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更高级的场景中使用参数多态性
- en: Create a new interface to be used as a constraint for a second type parameter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新接口，用作第二个类型参数的约束
- en: Declare two classes that implement an interface to work with two type parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明两个实现接口以处理两个类型参数的类
- en: Declare a class that works with two constrained generic types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明一个使用两个受限泛型类型的类
- en: Use a generic class with two generic type parameters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用具有两个泛型类型参数的泛型类
- en: Creating a new interface to be used as a constraint for a second type parameter
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新接口，用作第二个类型参数的约束
- en: So far, we have been working with parties in which the party members were sociable
    animals. However, it is difficult to enjoy a party without some music. The sociable
    animals need to hear something in order to make them dance and enjoy their party.
    We want to create a party of sociable animals and something hearable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理派对，其中派对成员是善于社交的动物。然而，没有一些音乐很难享受派对。善于社交的动物需要听到一些东西，以便让它们跳舞并享受他们的派对。我们想要创建一个由善于社交的动物和一些可听到的东西组成的派对。
- en: Now, we will create a new interface that we will use as a constraint later when
    we define another class that takes advantage of generics with two constrained
    generic types. The following lines show the code for the `Hearable` interface.
    This interface specifies the requirements that a type must meet in order to be
    considered as hearable, that is, a generator of music for a party in our application
    domain. The `public` modifier followed by the `interface` keyword and the interface
    name, `Hearable`, composes the interface declaration, as follows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个新的接口，稍后在定义另一个利用两个受限泛型类型的类时将使用该接口作为约束。以下是`Hearable`接口的代码。
- en: The code file for the sample is included in the `java_9_oop_chapter_11_01` folder,
    in the `example11_01.java` file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_01.java`文件中。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The interface declares two method requirements: `playMusic` and `playMusicWithLyrics`.
    As we learned in the previous chapters, the interface includes only the method
    declarations because the classes that implement the `Hearable` interface will
    be responsible for providing the implementation of the two methods.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接口声明了两个方法要求：`playMusic`和`playMusicWithLyrics`。正如我们在之前的章节中学到的，接口只包括方法声明，因为实现`Hearable`接口的类将负责提供这两个方法的实现。
- en: Declaring two classes that implement an interface to work with two type parameters
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明两个实现接口以处理两个类型参数
- en: Now, we will declare a class named `Smartphone` that implements the previously
    defined `Hearable` interface. We can read the class declaration as "the `Smartphone`
    class implements the `Hearable` interface." The following lines show the code
    for the new class. The code file for the sample is included in the `java_9_oop_chapter_11_01`
    folder, in the `example11_01.java` file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将声明一个名为`Smartphone`的类，该类实现先前定义的`Hearable`接口。我们可以将类声明解读为“`Smartphone`类实现`Hearable`接口”。以下是新类的代码。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Smartphone` class declares a constructor that assigns the value of the
    required `modelName` argument to the `modelName` immutable field. In addition,
    the class implements the two methods required by the `Hearable` interface: `playMusic`
    and `playMusicWithLyrics`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Smartphone`类声明了一个构造函数，将必需的`modelName`参数的值分配给`modelName`不可变字段。此外，该类实现了`Hearable`接口所需的两个方法：`playMusic`和`playMusicWithLyrics`。'
- en: The `playMusic` method prints a message that displays the smartphone model name
    and indicates that the device starts playing music. Then, the method prints multiple
    sounds in words. The `playMusicWithLyrics` method prints a message that displays
    the smartphone model name followed by another message with sounds in words and
    the lyrics received as an argument.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`playMusic`方法打印一条消息，显示智能手机型号名称，并指示设备开始播放音乐。然后，该方法以文字形式打印多个声音。`playMusicWithLyrics`方法打印一条消息，显示智能手机型号名称，然后是另一条包含文字声音和作为参数接收的歌词的消息。'
- en: Now we will declare a class named `AnimalMusicBand` that also implements the
    previously defined `Hearable` interface. We can read the class declaration as
    "the `AnimalMusicBand` class implements the `Hearable` interface." The following
    lines show the code for the new class. The code file for the sample is included
    in the `java_9_oop_chapter_11_01` folder, in the `example11_01.java` file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将声明一个名为`AnimalMusicBand`的类，该类也实现了先前定义的`Hearable`接口。我们可以将类声明解读为“`AnimalMusicBand`类实现`Hearable`接口”。以下是新类的代码。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_01.java`文件中。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `AnimalMusicBand` class declares a constructor that assigns the value of
    the required `bandName` and `numberOfMembers` arguments to the immutable field
    with the same name as these arguments. In addition, the class implements the two
    methods required by the `Hearable` interface: `playMusic` and `playMusicWithLyrics`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`AnimalMusicBand`类声明了一个构造函数，将必需的`bandName`和`numberOfMembers`参数的值分配给与这些参数同名的不可变字段。此外，该类实现了`Hearable`接口所需的两个方法：`playMusic`和`playMusicWithLyrics`。'
- en: The `playMusic` method prints a message that introduces the animal music band
    to the audience and indicates the number of members. Then, the method prints multiple
    sounds in words. The `playMusicWithLyrics` method prints a message that asks the
    audience to sing together with the animal music band followed by another message
    with sounds in words and the lyrics received as an argument.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`playMusic`方法打印一条消息，向观众介绍动物音乐乐队，并指出成员数量。然后，该方法以文字形式打印多个声音。`playMusicWithLyrics`方法打印一条消息，要求观众与动物音乐乐队一起唱歌，然后是另一条带有文字和作为参数接收的歌词的消息。'
- en: Declaring a class that works with two constrained generic types
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明一个与两个受限泛型类型一起工作的类
- en: 'The following lines declare a `PartyWithHearable` subclass of the previously
    created `Party<T>` class that takes advantage of generics to work with two constrained
    types. The type constraints declaration is included within angle brackets (`<>`).
    In this case, we have two generic type parameters: `T` and `U`. The generic type
    parameter named `T` must implement both the `Sociable` and `Comparable<Sociable>`
    interfaces, as it happened in the `Party<T>` superclass. The generic type parameter
    named `U` must implement the `Hearable` interface. Notice that the `extends` keyword
    that follows the type parameter allows us to add the constraints to the generic
    type parameters and the same keyword after the angle brackets specifies that the
    class inherits from the `Party<T>` superclass. This way, the class specifies constraints
    for both the `T` and `U` generic type parameters, and inherits from `Party<T>`.The
    code file for the sample is included in the `java_9_oop_chapter_11_01` folder,
    in the `example11_01.java` file.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行声明了一个`PartyWithHearable`子类，该子类是先前创建的`Party<T>`类的子类，利用泛型来处理两个受限类型。类型约束声明包含在尖括号(`<>`)中。在这种情况下，我们有两个泛型类型参数：`T`和`U`。名为`T`的泛型类型参数必须实现`Sociable`和`Comparable<Sociable>`接口，就像在`Party<T>`超类中一样。名为`U`的泛型类型参数必须实现`Hearable`接口。请注意，跟随类型参数的`extends`关键字允许我们向泛型类型参数添加约束，尖括号之后的相同关键字指定该类继承自`Party<T>`超类。这样，该类为`T`和`U`泛型类型参数指定了约束，并且继承自`Party<T>`。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_01.java`文件中。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When type parameters have constraints in Java, they are also known as **bounded
    type parameters**. In addition, the type constraint is also known as the **upper
    bound** for the bounded type parameter because any class that implements the interface
    used as an upper bound or any subclass of the class indicated as an upper bound
    can be used for the type parameter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当Java中的类型参数有约束时，它们也被称为**有界类型参数**。此外，类型约束也被称为有界类型参数的**上界**，因为任何实现用作上界的接口或任何指定为上界的类的子类都可以用于类型参数。
- en: 'Now we will analyze many code snippets to understand how the code included
    in the `PartyWithHearable<T, U>` class works. The following line starts the class
    body and declares a protected immutable `soundGenerator` field of the type specified
    by `U`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将分析许多代码片段，以了解包含在`PartyWithHearable<T, U>`类中的代码是如何工作的。以下行开始类体并声明了一个受保护的不可变的`soundGenerator`字段，其类型由`U`指定：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following lines declare an initializer that receives two arguments, `partyLeader`
    and `soundGenerator`, whose types are `T` and `U`. The arguments specify the first
    party leader that will also become the first member of the party, and the sound
    generator that will make the party members dance and sing. The constructor calls
    the constructor defined in its superclass, with `partyLeader` as an argument,
    by using the `super` keyword.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行声明了一个初始化器，该初始化器接收两个参数，`partyLeader`和`soundGenerator`，它们的类型分别为`T`和`U`。这些参数指定了将成为派对第一领导者并成为派对第一成员的第一领导者，以及将使派对成员跳舞和唱歌的声音发生器。构造函数使用`super`关键字调用其超类中定义的构造函数，并将`partyLeader`作为参数。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following lines declare a `makeMembersDance` method that overrides the
    method with the same declaration included in the superclass. The code calls the
    `soundGenetor.playMusic` method and then the `super.makeMembersDance` method,
    that is, the `makeMembersDance` method defined in the `Party<T>` superclass, by
    using the `super` keyword:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行声明了一个`makeMembersDance`方法，该方法覆盖了在超类中包含的相同声明的方法。代码调用`soundGenetor.playMusic`方法，然后使用`super`关键字调用`super.makeMembersDance`方法，即在`Party<T>`超类中定义的`makeMembersDance`方法：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we override a method in a subclass, we can call the method defined in the
    superclass by using the `super` keyword followed by a dot (`.`) and the method
    name, and passing the required arguments to the method. The usage of the `super`
    keyword allows us to call the instance method defined in the superclass that we
    have overridden. This way, we can add new features to a method and still call
    the base method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在子类中覆盖一个方法时，我们可以使用`super`关键字后跟一个点(`.`)和方法名来调用在超类中定义的方法，并将所需的参数传递给该方法。使用`super`关键字允许我们调用在超类中被覆盖的实例方法。这样，我们可以向方法添加新特性，同时仍然调用基本方法。
- en: 'Finally, the following lines declare a `makeMembersSingALyric` method that
    overrides the method with the same declaration included in the superclass. The
    code calls the `soundGenerator.playMusicWithLyrics` method with the received `lyrics`
    as an argument. Then, the code calls the `super.makeMembersSingALyric` method
    with the received `lyrics` as an argument, that is, the `makeMembersSingALyric`
    method defined in the `Party<T>` superclass:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下行声明了一个`makeMembersSingALyric`方法，该方法覆盖了在超类中包含的相同声明的方法。代码调用`soundGenerator.playMusicWithLyrics`方法，并将接收到的`lyrics`作为参数。然后，代码调用`super.makeMembersSingALyric`方法，并将接收到的`lyrics`作为参数，即在`Party<T>`超类中定义的`makeMembersSingALyric`方法：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The following UML diagram shows the interface and the concrete subclasses that
    we will create, including all the fields and methods.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下UML图显示了我们将创建的接口和具体子类，包括所有字段和方法。
- en: '![Declaring a class that works with two constrained generic types](img/00091.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![声明一个与两个受限泛型类型一起工作的类](img/00091.jpeg)'
- en: Creating instances of a generic class with two generic type parameters
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用两个泛型类型参数创建泛型类的实例
- en: 'We can create instances of the `PartyWithHearable<T, U>` class by replacing
    both the `T` and `U` generic type parameters with any type names that conform
    to the constraints or the upper bounds specified in the declaration of the `PartyWithHearable<T,
    U>` class. We have three concrete classes that implement both the `Sociable` and
    `Comparable<Sociable>` interfaces required by the `T` generic type parameter:
    `SocialLion`, `SocialParrot`, and `SocialSwan`. We have two classes that implement
    the `Hearable` interface required by the `U` generic type parameter: `Smartphone`
    and `AnimalMusicBand`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过用符合`PartyWithHearable<T, U>`类声明中指定的约束或上界的任何类型名称替换`T`和`U`泛型类型参数来创建`PartyWithHearable<T,
    U>`类的实例。我们有三个具体类实现了`T`泛型类型参数所需的`Sociable`和`Comparable<Sociable>`接口：`SocialLion`、`SocialParrot`和`SocialSwan`。我们有两个实现了`U`泛型类型参数所需的`Hearable`接口的类：`Smartphone`和`AnimalMusicBand`。
- en: We can use `SocialLion` and `Smartphone` to create an instance of `PartyWithHearable<SocialLion,
    Smartphone>`, that is, a party of social lions and a smartphone. Then, we can
    use `SocialParrot` and `AnimalMusicBand` to create an instance of `PartyWithHearable<SocialParrot,
    AnimalMusicBand>`, that is, a party of social parrots and an animal music band.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`SocialLion`和`Smartphone`来创建`PartyWithHearable<SocialLion, Smartphone>`的实例，即社交狮和智能手机的聚会。然后，我们可以使用`SocialParrot`和`AnimalMusicBand`来创建`PartyWithHearable<SocialParrot,
    AnimalMusicBand>`的实例，即社交鹦鹉和动物音乐乐队的聚会。
- en: The following lines create a `Smartphone` instance named `android`. Then, the
    code creates a `PartyWithHearable<SocialLion, Smartphone>` instance named `nalaParty`
    and passes `nala` and `android` as arguments. We take advantage of type inference
    and we use the diamond notation we learned in the previous chapter, [Chapter 10](part0089_split_000.html#2KS221-bc1530b4c4784270ae8a31a7038f8341
    "Chapter 10. Maximization of Code Reuse with Generics"), *Maximization of Code
    Reuse with Generics*. This way, we create a party of social lions that use a smartphone,
    where `Nala` is the party leader, and `Super Android Smartphone` is the hearable
    or music generator. The code file for the sample is included in the `java_9_oop_chapter_11_01`
    folder, in the `example11_01.java` file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行创建了一个名为`android`的`Smartphone`实例。然后，代码创建了一个名为`nalaParty`的`PartyWithHearable<SocialLion,
    Smartphone>`实例，并将`nala`和`android`作为参数传递。我们利用了类型推断，并使用了我们在上一章学到的菱形符号表示法，[第10章](part0089_split_000.html#2KS221-bc1530b4c4784270ae8a31a7038f8341
    "第10章。泛型的代码重用最大化"), *泛型的代码重用最大化*。这样，我们创建了一个使用智能手机的社交狮聚会，其中`Nala`是聚会领袖，`Super Android
    Smartphone`是可听或音乐生成器。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_01.java`文件中。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `nalaParty` instance will only accept a `SocialLion` instance for all the
    arguments in which the class definition uses the generic type parameter named
    `T`. The `nalaParty` instance will only accept a `Smartphone` instance for all
    the arguments in which the class definition uses the generic type parameter named
    `U`. The following lines add the previously created three instances of `SocialLion`
    to the party by calling the `addMember` method. The code file for the sample is
    included in the `java_9_oop_chapter_11_01` folder, in the `example11_01.java`
    file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`nalaParty`实例将只接受`SocialLion`实例，用于类定义中使用泛型类型参数`T`的所有参数。`nalaParty`实例将只接受`Smartphone`实例，用于类定义中使用泛型类型参数`U`的所有参数。以下行通过调用`addMember`方法将之前创建的三个`SocialLion`实例添加到聚会中。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_01.java`文件中。'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the results of executing the previous code in
    JShell:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了在JShell中执行上述代码的结果：
- en: '![Creating instances of a generic class with two generic type parameters](img/00092.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建具有两个泛型类型参数的泛型类的实例](img/00092.jpeg)'
- en: The following lines call the `makeMembersDance` method to make the smartphone's
    playlist invite all the lions to dance and make them dance. Then, the code calls
    the `removeMember` method to remove a member that isn't the party leader, use
    the `declareNewPartyLeader` method to declare a new leader, and finally calls
    the `makeMembersSingALyric` method to make the smartphone's playlist invite all
    the lions to sing a specific lyric and make them sing this lyric. Remember that
    we add the `try` keyword before the calls to `removeMember` and `declareNewPartyLeader`
    because these methods can throw exceptions. The code file for the sample is included
    in the `java_9_oop_chapter_11_01` folder, in the `example11_01.java` file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行调用`makeMembersDance`方法，使智能手机的播放列表邀请所有狮子跳舞并使它们跳舞。然后，代码调用`removeMember`方法来移除不是聚会领袖的成员，使用`declareNewPartyLeader`方法来声明一个新的领袖，最后调用`makeMembersSingALyric`方法来使智能手机的播放列表邀请所有狮子唱特定的歌词并使他们唱这个歌词。请记住，在调用`removeMember`和`declareNewPartyLeader`之前，我们在这些方法前加上`try`关键字，因为这些方法可能会抛出异常。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_01.java`文件中。
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot shows the results of executing the previous code in
    JShell:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了在JShell中执行上述代码的结果：
- en: '![Creating instances of a generic class with two generic type parameters](img/00093.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![创建具有两个泛型类型参数的泛型类的实例](img/00093.jpeg)'
- en: 'The following lines show the output after we run the preceding code snippets
    in JShell. However, we must take into account that there is a pseudo-random selection
    of the new party leader, and therefore, the results will vary in each execution:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了在JShell中运行前面代码片段后的输出。但是，我们必须考虑到新聚会领袖的伪随机选择，因此结果在每次执行时会有所不同：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The following lines create an `AnimalMusicBand` instance named `band`. Then,
    the code creates a `PartyWithHearable<SocialParrot, AnimalMusicBand>` instance
    named `ramboParty` and passes `rambo` and `band` as arguments. As happened in
    the previous example, we take advantage of type inference and we use the diamond
    notation we learned in the previous chapter, [Chapter 10](part0089_split_000.html#2KS221-bc1530b4c4784270ae8a31a7038f8341
    "Chapter 10. Maximization of Code Reuse with Generics"), *Maximization of Code
    Reuse with Generics*. This way, we create a party of social parrots that have
    a music band composed of four animals, where `Rambo` is the party leader, and
    `Black Eyed Paws` is the hearable or music generator. The code file for the sample
    is included in the `java_9_oop_chapter_11_01` folder, in the `example11_02.java`
    file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行创建了一个名为`band`的`AnimalMusicBand`实例。然后，代码创建了一个名为`ramboParty`的`PartyWithHearable<SocialParrot,
    AnimalMusicBand>`实例，并将`rambo`和`band`作为参数传递。与之前的示例一样，我们利用了类型推断，并且使用了我们在上一章学习的菱形符号，[第10章](part0089_split_000.html#2KS221-bc1530b4c4784270ae8a31a7038f8341
    "第10章。泛型的代码重用最大化"), *泛型的代码重用最大化*。这样，我们创建了一个由四只动物组成的音乐乐队的社交鹦鹉派对，其中`Rambo`是派对领袖，`Black
    Eyed Paws`是可听到的或音乐发生器。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_02.java`文件中。
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `ramboParty` instance will only accept a `SocialParrot` instance for all
    the arguments in which the class definition uses the generic type parameter named
    `T`. The `ramboParty` instance will only accept an `AnimalMusicBand` instance
    for all the arguments in which the class definition uses the generic type parameter
    named `U`. The following lines add the previously created three instances of `SocialParrot`
    to the party by calling the `addMember` method. The code file for the sample is
    included in the `java_9_oop_chapter_11_01` folder, in the `example11_02.java`
    file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`ramboParty`实例只接受`SocialParrot`实例作为类定义中使用泛型类型参数`T`的所有参数。`ramboParty`实例只接受`AnimalMusicBand`实例作为类定义中使用泛型类型参数`U`的所有参数。以下行通过调用`addMember`方法将之前创建的三个`SocialParrot`实例添加到派对中。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_02.java`文件中。'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The following screenshot shows the results of executing the previous code in
    JShell.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在JShell中执行上一个代码的结果。
- en: '![Creating instances of a generic class with two generic type parameters](img/00094.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![使用两个泛型类型参数创建泛型类的实例](img/00094.jpeg)'
- en: The following lines call the `makeMembersDance` method to make the animal music
    band invite all the parrots to dance, tell them they are four members in the band
    and make them dance. Then, the code calls the `removeMember` method to remove
    a member that isn't the party leader, use the `declareNewPartyLeader` method to
    declare a new leader, and finally calls the `makeMembersSingALyric` method to
    make the animal music band invite all the parrots to sing a specific lyric and
    make them sing this lyric. Remember that we add the `try` keyword before the calls
    to `removeMember` and `declareNewPartyLeader` because these methods can throw
    exceptions. The code file for the sample is included in the `java_9_oop_chapter_11_01`
    folder, in the `example11_02.java` file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行调用`makeMembersDance`方法，使动物音乐乐队邀请所有鹦鹉跳舞，告诉它们乐队中有四名成员并让它们跳舞。然后，代码调用`removeMember`方法来移除不是派对领袖的成员，使用`declareNewPartyLeader`方法来声明一个新的领袖，最后调用`makeMembersSingALyric`方法，使动物音乐乐队邀请所有鹦鹉唱特定的歌词并让它们唱这个歌词。请记住，在调用`removeMember`和`declareNewPartyLeader`之前我们加上了`try`关键字，因为这些方法可能会抛出异常。示例的代码文件包含在`java_9_oop_chapter_11_01`文件夹中的`example11_02.java`文件中。
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot shows the results of executing the previous code in
    JShell:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在JShell中执行上一个代码的结果：
- en: '![Creating instances of a generic class with two generic type parameters](img/00095.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![使用两个泛型类型参数创建泛型类的实例](img/00095.jpeg)'
- en: 'The following lines show the output after we run the preceding code snippets
    in JShell. However, we must take into account that there is a pseudo-random selection
    of the new party leader, and therefore, the results will vary in each execution:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了在JShell中运行前面的代码片段后的输出。但是，我们必须考虑到新派对领袖的伪随机选择，因此结果在每次执行时会有所不同：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Test your knowledge
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'The `PartyWithHearable<T extends Sociable & Comparable<Sociable>, U extends
    Hearable>` line means:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PartyWithHearable<T extends Sociable & Comparable<Sociable>, U extends Hearable>`这一行的意思是：'
- en: The generic type constraint specifies that `T` must implement either the `Sociable`
    or `Comparable<Sociable>` interfaces, and `U` must implement the `Hearable` interface.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泛型类型约束指定`T`必须实现`Sociable`或`Comparable<Sociable>`接口，`U`必须实现`Hearable`接口。
- en: The class is a subclass of the `Sociable`, `Comparable<Sociable>`, and `Hearable`
    classes.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该类是`Sociable`、`Comparable<Sociable>`和`Hearable`类的子类。
- en: The generic type constraint specifies that `T` must implement both the `Sociable`
    and `Comparable<Sociable>` interfaces, and `U` must implement the `Hearable` interface.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泛型类型约束指定`T`必须实现`Sociable`和`Comparable<Sociable>`接口，`U`必须实现`Hearable`接口。
- en: 'Which of the following lines is equivalent to `PartyWithHearable<SocialLion,
    Smartphone>lionsParty = new PartyWithHearable<SocialLion, Smartphone>(nala, android);`
    in Java 9:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪一行等同于Java 9中的`PartyWithHearable<SocialLion, Smartphone>lionsParty = new PartyWithHearable<SocialLion,
    Smartphone>(nala, android);`：
- en: '`PartyWithHearable<SocialLion, Smartphone> lionsParty = new PartyWithHearable<>(nala,
    android);`'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PartyWithHearable<SocialLion, Smartphone> lionsParty = new PartyWithHearable<>(nala,
    android);`'
- en: '`PartyWithHearable<SocialLion, Smartphone> lionsParty = new PartyWithHearable(nala,
    android);`'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PartyWithHearable<SocialLion, Smartphone> lionsParty = new PartyWithHearable(nala,
    android);`'
- en: '`let lionsParty = new PartyWithHearable(nala, android);`'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`let lionsParty = new PartyWithHearable(nala, android);`'
- en: 'When we use a bounded type parameter with the `extends` keyword:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在使用`extends`关键字的有界类型参数时：
- en: Any class that implements the interface indicated as an upper bound can be used
    for the type parameter. In case the indicated name is a name of a class, its subclasses
    cannot be used for the type parameter.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现指定为上界的接口的任何类都可以用于类型参数。如果指定的名称是一个类的名称，则其子类不能用于类型参数。
- en: Any class that implements the interface indicated as an upper bound or any subclass
    of the class indicated as an upper bound can be used for the type parameter.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现指定为上界的接口或指定为上界的类的任何子类都可以用于类型参数。
- en: Any subclass of the class indicated as an upper bound can be used for the type
    parameter. In case the indicated name is a name of an interface, the classes that
    implement the interface cannot be used for the type parameter.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定为上界的类的任何子类都可以用于类型参数。如果指定的名称是一个接口的名称，则实现该接口的类不能用于类型参数。
- en: 'When type parameters have constraints in Java, they are also known as:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当Java中的类型参数具有约束时，它们也被称为：
- en: Flexible type parameters.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 灵活的类型参数。
- en: Unbounded type parameters.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无界类型参数。
- en: Bounded type parameters.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有界类型参数。
- en: 'Which of the following code snippets declares a class whose generic type constraint
    specifies that `T` must implement the `Sociable` interface and `U` must implement
    the `Convertible` interface:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个代码片段声明了一个类，其泛型类型约束指定`T`必须实现`Sociable`接口，`U`必须实现`Convertible`接口：
- en: '`public class Game<T: where T is Sociable, U: where U is Convertible>`'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class Game<T: where T is Sociable, U: where U is Convertible>`'
- en: '`public class Game<T extends Sociable> where U: Convertible`'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class Game<T extends Sociable> where U: Convertible`'
- en: '`public class Game<T extends Sociable, U extends Convertible>`'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public class Game<T extends Sociable, U extends Convertible>`'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned to maximize code reuse by writing code capable
    of working with two type parameters. We worked with more complex scenarios that
    involve interfaces, generics, and multiple type parameters that have constraints,
    also known as bounded type parameters.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了通过编写能够与两个类型参数一起工作的代码来最大化代码重用。我们处理了涉及接口、泛型和具有约束的多个类型参数的更复杂的情况，也称为有界类型参数。
- en: We created a new interface and then we declared two classes that implemented
    this new interface. Then, we declared a class that worked with two constrained
    generic type parameters. We combined class inheritance and interfaces to maximize
    the reusability of code. We could make classes work with many different types
    and we were able to code the behavior of a party with different music generators
    that could then be reused to create parties of lions with a smartphone and parties
    of parrots with bands of animals.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新接口，然后声明了两个实现了这个新接口的类。然后，我们声明了一个使用了两个受限泛型类型参数的类。我们结合了类继承和接口，以最大化代码的可重用性。我们可以使类与许多不同类型一起工作，并且能够编写具有不同音乐生成器的派对的行为，然后可以重用这些行为来创建带有智能手机的狮子派对和带有动物乐队的鹦鹉派对。
- en: Java 9 allows us to work with more complex scenarios in which we can specify
    more restrictions or bounds to the generic type parameters. However, most of the
    time, we will work with the cases covered by the samples we learned in this chapter
    and in the previous one.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9允许我们处理更复杂的情况，在这些情况下，我们可以为泛型类型参数指定更多的限制或边界。然而，大多数情况下，我们将处理本章和上一章中学到的示例所涵盖的情况。
- en: Now that you have learned advanced usages of parametric polymorphism and generics,
    we are ready to combine object-oriented programming and functional programming
    in Java 9, which is the topic we are going to discuss in the next chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了参数多态性和泛型的高级用法，我们准备在Java 9中将面向对象编程和函数式编程相结合，这是我们将在下一章中讨论的主题。
