["```java\nList<String> list1 = new ArrayList<>();\nlist1.add(\"s1\");\nlist1.add(\"s1\");\n\nList<String> list2 = new ArrayList<>(list1);\nSystem.out.println(list2);      //prints: [s1, s1]\n\nSet<String> set = new HashSet<>(list1);\nSystem.out.println(set);        //prints: [s1]\n\nList<String> list3 = new ArrayList<>(set);\nSystem.out.println(list3);      //prints: [s1]\n\n```", "```java\npublic class ManageCollections {\n  private List<String> list = new ArrayList<>() {\n        {\n            add(null);\n            add(\"s2\");\n            add(\"s3\");\n        }\n  };\n  public List<String> getThatList(){\n      return this.list;\n  }\n  public static void main(String... args){\n    ManageCollections mc = new ManageCollections();\n    System.out.println(mc.getThatList());    //prints: [null, s2, s3]\n  }\n}\n```", "```java\npublic class ManageCollections {\n  private List<String> list = new ArrayList<>();\n  public ManageCollections(){\n        list.add(null);\n        list.add(\"s2\");\n        list.add(\"s3\");\n  }\n  public List<String> getThatList(){\n      return this.list;\n  }\n  public static void main(String... args){\n    ManageCollections mc = new ManageCollections();\n    System.out.println(mc.getThatList());    //prints: [null, s2, s3]\n  }\n}\n```", "```java\nprivate List<String> list = Arrays.asList(null, \"s2\", \"s3\");\n\n```", "```java\nList<String> list = Arrays.asList(null, \"s2\", \"s3\");\nlist.add(\"s4\");    // throws UnsupportedOperationException\n```", "```java\nList<String> list = new ArrayList(Arrays.asList(null, \"s2\", \"s3\"));\nlist.add(\"s4\");   //works just fine\n\nSet<String> set = new HashSet<>(Arrays.asList(null, \"s2\", \"s3\"));\nset.add(\"s4\");   //works just fine as well\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, null);\nmap.put(2, \"s2\");\nmap.put(3, \"s3\");\n\nMap<Integer, String> anotherMap = new HashMap<>(map);\n\n```", "```java\nclass A{}\nclass B extends A{}\nMap<Integer, B> mb = new HashMap<>();\nMap<Integer, A> ma = new HashMap<>(mb);\n\n```", "```java\nMap<Integer, String> map1 = new HashMap<>();\nMap<Integer, Object> map2 = new HashMap<>(map1);\n\n```", "```java\nHashMap(Map<? extends K,? extends V> map)\n```", "```java\nclass A {}\nclass B extends A {}\nList<A> l1 = Arrays.asList(new B());\nList<B> l2 = Arrays.asList(new B());\n//List<B> l3 = Arrays.asList(new A()); //compiler error\n\n```", "```java\nclass SomeClass{\n   public String getThatString(){\n      return \"that string\";\n   }\n}\npublic class ManageCollections {\n  private static Set<String> set = new HashSet<>();\n   static {\n        SomeClass someClass = new SomeClass();\n        set.add(someClass.getThatString());\n        set.add(\"another string\");\n  }\n  public static void main(String... args){\n    System.out.println(set); //prints: [that string, another string]\n  }\n}\n```", "```java\nprivate static Set<String> set = \n    new HashSet<>(Arrays.asList(new SomeClass().getThatString(), \n                                                \"another string\"));\n```", "```java\nList<String> iList0 = List.of();\nList<String> iList1 = List.of(\"s1\");\nList<String> iList2 = List.of(\"s1\", \"s2\");\nList<String> iList3 = List.of(\"s1\", \"s2\", \"s3\");\n\nSet<String> iSet1 = Set.of(\"s1\", \"s2\", \"s3\", \"s4\");\nSet<String> iSet2 = Set.of(\"s1\", \"s2\", \"s3\", \"s4\", \"s5\");\nSet<String> iSet3 = Set.of(\"s1\", \"s2\", \"s3\", \"s4\", \"s5\", \"s6\", \n                                              \"s7\", \"s8\", \"s9\", \"s10\");\n\nMap<Integer, String> iMap = Map.of(1, \"s1\", 2, \"s2\", 3, \"s3\", 4, \"s4\");\n\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(null, \"s1\");\nmap.put(2, \"s2\");\nSystem.out.println(map.get(null));     //prints: s1\n\n```", "```java\nSet<String> iSet3 = Set.of(\"s1\", \"s2\", \"s3\", \"s4\", \"s5\", \"s6\", \n                                       \"s7\", \"s8\", \"s9\", \"s10\");\nSystem.out.println(iSet3);\n\n```", "```java\nList<String> x1 = Arrays.asList(null, \"s2\", \"s3\");\nString[] array = {null, \"s2\", \"s3\"};\nList<String> x2 = Arrays.asList(array);\nSystem.out.println(x1.equals(x2));       //prints: true\n\n```", "```java\nList<String> list2 = Stream.of(null, \"s2\", \"s3\")\n                           .collect(Collectors.toList());\nSystem.out.println(list2);               //prints: [null, s2, s3]\n\nSet<String> set2 = Stream.of(null, \"s2\", \"s3\")\n                         .collect(Collectors.toSet());\nSystem.out.println(set2);               //prints: [null, s2, s3]\n```", "```java\nList<String> list3 = Stream.of(null, \"s2\", \"s3\")\n               .collect(Collectors.toCollection(ArrayList::new));\nSystem.out.println(list3);               //prints: [null, s2, s3]\n\nSet<String> set3 = Stream.of(null, \"s2\", \"s3\")\n                 .collect(Collectors.toCollection(HashSet::new));\nSystem.out.println(set3);               //prints: [null, s2, s3]\n\n```", "```java\nMap<Integer, String> m = new HashMap<>();\nm.put(1, null);\nm.put(2, \"s2\");\nMap<Integer, String> map2 = m.entrySet().stream()\n  .map(e -> e.getValue() == null ? Map.entry(e.getKey(), \"\") : e)\n  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\nSystem.out.println(map2);    //prints: {1=, 2=s2} \n```", "```java\nMap<Integer, String> map3 = m.entrySet().stream()\n   .map(e -> e.getValue() == null ? Map.entry(e.getKey(), \"\") : e)\n   .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue(),\n                                         (k,v) -> v, HashMap::new));\nSystem.out.println(map3);    //prints: {1=, 2=s2}\n```", "```java\nList<String> list = Arrays.asList(\"s1\", \"s1\");\nSystem.out.println(list);          //prints: [s1, s1]\n\nList<String> unmodfifiableList = Collections.unmodifiableList(list);\n//unmodfifiableList.set(0, \"s1\"); //UnsupportedOperationException\n//unmodfifiableList.add(\"s2\");    //UnsupportedOperationException\n```", "```java\nSystem.out.println(unmodfifiableList);      //prints: [s1, s1]\nlist.set(0, \"s0\");\n//list.add(\"s2\");       //UnsupportedOperationException\nSystem.out.println(unmodfifiableList);      //prints: [s0, s1] \n```", "```java\nList<String> iList =\n        Collections.unmodifiableList(new ArrayList<>() {{\n            add(\"s1\");\n            add(\"s1\");\n        }});\n//iList.set(0, \"s0\");       //UnsupportedOperationException\n//iList.add(\"s2\");          //UnsupportedOperationException\nSystem.out.println(iList);  //prints: [s1, s1]\n```", "```java\nString[] source = {\"s1\", \"s2\"};\nList<String> iList2 =\n        Arrays.stream(source).collect(Collectors.toList());\nSystem.out.println(iList2);      //prints: [s1, s2]\n\nsource[0]=\"s0\";\nSystem.out.println(iList2);      //prints: [s1, s2] \n```", "```java\nList<String> list1 = Collections.EMPTY_LIST;\n//list1.add(\"s1\");       //UnsupportedOperationException\nSet<String> set1 = Collections.EMPTY_SET;\nMap<Integer, String> map1 = Collections.EMPTY_MAP;\n\n```", "```java\nList<String> list2 = Collections.emptyList();\n//list2.add(\"s1\");       //UnsupportedOperationException\nSet<String> set2 = Collections.emptySet();\nMap<Integer, String> map2 = Collections.emptyMap();\n\nSortedSet<String> set3 = Collections.emptySortedSet();\nMap<Integer, String> map3 = Collections.emptySortedMap();\nNavigableSet<String> set4 = Collections.emptyNavigableSet();\nNavigableMap<Integer, String> map4 = Collections.emptyNavigableMap();\n\n```", "```java\nList<String> singletonS1 = Collections.singletonList(\"s1\");\nSystem.out.println(singletonS1);\n//singletonS1.add(\"s1\");        //UnsupportedOperationException\n\n```", "```java\nList<String> nList = Collections.nCopies(3, \"s1\");\nSystem.out.println(nList);\n//nList.add(\"s1\");        //UnsupportedOperationException\n\n```", "```java\nList<String> nList = List.of(\"s1\", \"s1\", \"s1\");\n```", "```java\nList<String> list1 = Arrays.asList(\"s1\",\"s2\");\nList<String> list2 = Arrays.asList(\"s3\", \"s4\", \"s5\");\nCollections.copy(list2, list1);\nSystem.out.println(list2);    //prints: [s1, s2, \"s5\"]\n\n```", "```java\nList<String> list1 = Arrays.asList(\"s1\",\"s2\");\nList<String> list2 = Arrays.asList(\"s3\", \"s4\");\nlist2 = new ArrayList(list1);\nSystem.out.println(list2);    //prints: [s1, s2]\n```", "```java\nList<String> no = Arrays.asList(\"a\",\"b\", \"Z\", \"10\", \"20\", \"1\", \"2\");\nCollections.sort(no);\nSystem.out.println(no);     //prints: [1, 10, 2, 20, Z, a, b]\n\n```", "```java\nclass Person implements Comparable<Person>{\n    private String firstName = \"\", lastName = \"\";\n    public Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n    public String getFirstName() { return firstName; }\n    public String getLastName() { return lastName; }\n    @Override\n    public int compareTo(Person person){\n        int result = this.firstName.compareTo(person.firstName);\n        if(result == 0) {\n            return this.lastName.compareTo(person.lastName);\n        }\n        return result;\n    }\n}\n```", "```java\nSystem.out.println(\"a\".compareTo(\"c\"));   //prints: -2\nSystem.out.println(\"c\".compareTo(\"a\"));   //prints: 2\n\n```", "```java\nSystem.out.println(Integer.valueOf(3)\n                          .compareTo(Integer.valueOf(3))); //prints: 0\nSystem.out.println(Integer.valueOf(3)\n                          .compareTo(Integer.valueOf(4))); //prints: -1\nSystem.out.println(Integer.valueOf(3)\n                          .compareTo(Integer.valueOf(5))); //prints: -1\nSystem.out.println(Integer.valueOf(5)\n                          .compareTo(Integer.valueOf(4))); //prints: 1\nSystem.out.println(Integer.valueOf(5)\n                          .compareTo(Integer.valueOf(3))); //prints: 1\n\n```", "```java\nComparator<String> compStr = Comparator.naturalOrder();\nSystem.out.println(compStr.compare(\"a\", \"c\"));  //prints: -2\n\nComparator<Integer> compInt = Comparator.naturalOrder();\nSystem.out.println(compInt.compare(3, 5));     //prints: -1\n\n```", "```java\n@Override\npublic boolean equals(Object other) {\n    if (other == null) return false;\n    if (this == other) return true;\n    if (!(other instanceof Person)) return false;\n    final Person that = (Person) other;\n    return this.firstName.equals(that.getFirstName()) &&\n            this.lastName.equals(that.getLastName());\n}\n```", "```java\nPerson joe1 = new Person(\"Joe\", \"Smith\");\nPerson joe2 = new Person(\"Joe\", \"Smith\");\nPerson bob = new Person(\"Bob\", \"Smith\");\n\nSystem.out.println(joe1.equals(joe2));    //prints: true\nSystem.out.println(joe1.compareTo(joe2)); //prints: 0\n\nSystem.out.println(joe1.equals(bob));     //prints: false\nSystem.out.println(joe1.compareTo(bob));  //prints: 8\nSystem.out.println(joe2.compareTo(bob));  //prints: 8\n\n```", "```java\n@Override\npublic String toString(){\n    return this.firstName + \" \" + this.lastName;\n}\n```", "```java\nPerson p1 = new Person(\"Zoe\", \"Arnold\");\nPerson p2 = new Person(\"Alex\", \"Green\");\nPerson p3 = new Person(\"Maria\", \"Brown\");\nList<Person> list7 = Arrays.asList(p1, p2, p3);\nSystem.out.println(list7);  //[Zoe Arnold, Alex Green, Maria Brown]\nCollections.sort(list7);\nSystem.out.println(list7);  //[Alex Green, Maria Brown, Zoe Arnold]\n\n```", "```java\nclass OrderByLastThenFirstName implements Comparator<Person> {\n    @Override\n    public int compare(Person p1, Person p2){\n        return (p1.getLastName() + p1.getFirstName())\n                .compareTo(p2.getLastName() + p2.getFirstName());\n    }\n}\n```", "```java\nCollections.sort(list7, new OrderByLastThenFirstName());\nSystem.out.println(list7);  //[Zoe Arnold, Maria Brown, Alex Green]\n\n```", "```java\nPerson p1 = new Person(\"Zoe\", \"Arnold\");\nPerson p2 = new Person(\"Alex\", \"Green\");\nPerson p3 = new Person(\"Maria\", \"Brown\");\nList<Person> list7 = Arrays.asList(p1,p2,p3);\nSystem.out.println(list7);  //[Zoe Arnold, Alex Green, Maria Brown]\n\nCollections.reverse(list7);\nSystem.out.println(list7);  //[Maria Brown, Alex Green, Zoe Arnold]\n\nCollections.rotate(list7, 1);\nSystem.out.println(list7);  //[Zoe Arnold, Maria Brown, Alex Green]\n\nCollections.sort(list7, Collections.reverseOrder());\nSystem.out.println(list7);  //[Zoe Arnold, Maria Brown, Alex Green]\n\nCollections.sort(list7, new OrderByLastThenFirstName());\nSystem.out.println(list7);  //[Zoe Arnold, Maria Brown, Alex Green]\n\nCollections.sort(list7, \n         Collections.reverseOrder(new OrderByLastThenFirstName()));\nSystem.out.println(list7);  //[Alex Green, Maria Brown, Zoe Arnold]\n```", "```java\nList<String> list1 = List.of(\"s3\",\"s5\",\"s4\",\"s1\");\nList<String> list2 = List.of(\"s4\",\"s5\");\nint index = Collections.indexOfSubList(list1, list2);\nSystem.out.println(index);  //prints: -1\n\nList<String> list3 = List.of(\"s5\",\"s4\");\nindex = Collections.indexOfSubList(list1, list3);\nSystem.out.println(index);   //prints: 1\n```", "```java\nList<String> list4 = List.of(\"s3\",\"s4\",\"s4\",\"s1\");\nint count = Collections.frequency(list4, \"s4\");\nSystem.out.println(count);         //prints: 2\n```", "```java\nclass A{}\nclass B extends A{}\n\nList<A> list5 = List.of(new A(), new B());\nint c = Collections.frequency(list5, new A());\nSystem.out.println(c);         //prints: 0\n\nA a = new A();\nList<A> list6 = List.of(a, new B());\nc = Collections.frequency(list6, a);\nSystem.out.println(c);         //prints: 1\n\n```", "```java\nclass A{\n    @Override\n    public boolean equals(Object o){\n        if (o == null) return false;\n        return (o instanceof A);\n    }\n}\nclass B extends A{}\n\nList<A> list5 = List.of(new A(), new B());\nint c = Collections.frequency(list5, new A());\nSystem.out.println(c);         //prints: 2\n\nA a = new A();\nList<A> list6 = List.of(a, new B());\nc = Collections.frequency(list6, a);\nSystem.out.println(c);         //prints: 2\n```", "```java\nclass A{\n    @Override\n    public boolean equals(Object o){\n        if (o == null) return false;\n        return o.getClass().equals(this.getClass());\n    }\n}\nclass B extends A{}\n\nList<A> list5 = List.of(new A(), new B());\nint c = Collections.frequency(list5, new A());\nSystem.out.println(c);         //prints: 1\n\nA a = new A();\nList<A> list6 = List.of(a, new B());\nc = Collections.frequency(list6, a);\nSystem.out.println(c);         //prints: 1\n```", "```java\nPerson p1 = new Person(\"Zoe\", \"Arnold\");\nPerson p2 = new Person(\"Alex\", \"Green\");\nPerson p3 = new Person(\"Maria\", \"Brown\");\nList<Person> list7 = Arrays.asList(p1,p2,p3);\nSystem.out.println(list7);  //[Zoe Arnold, Alex Green, Maria Brown]\n\nSystem.out.println(Collections.min(list7)); //prints: Alex Green\nSystem.out.println(Collections.max(list7)); //prints: Zoe Arnold\n\nPerson min = Collections.min(list7, new OrderByLastThenFirstName());\nSystem.out.println(min);                    //[Zoe Arnold]\n\nPerson max = Collections.max(list7, new OrderByLastThenFirstName());\nSystem.out.println(max);                    //[Alex Green]\n\n```", "```java\nList list = new ArrayList();\nlist.add(\"s1\");\nlist.add(\"s2\");\nlist.add(42);\nSystem.out.println(list);    //prints: [s1, s2, 42]\n\nList cList = Collections.checkedList(list, String.class);\nSystem.out.println(list);   //prints: [s1, s2, 42]\n\nlist.add(42);\nSystem.out.println(list);   //prints: [s1, s2, 42, 42]\n\n//cList.add(42);           //throws ClassCastException\n```", "```java\n<dependency>\n  <groupId>org.apache.commons</groupId>\n  <artifactId>commons-collections4</artifactId>\n  <version>4.1</version>\n</dependency>\n```", "```java\nint[] ints = new int[10];\nSystem.out.println(ints[0]);     //prints: 0\n\nInteger[] intW = new Integer[10];\nSystem.out.println(intW[0]);     //prints: null\n\nboolean[] bs = new boolean[10];\nSystem.out.println(bs[0]);       //prints: false\n\nBoolean[] bW = new Boolean[10];\nSystem.out.println(bW[0]);       //prints: 0\n\nString[] strings = new String[10];\nSystem.out.println(strings[0]);  //prints: null\n\nA[] as = new A[10];\nSystem.out.println(as[0]);       //prints: null \nSystem.out.println(as.length);   //prints: 10\n\n```", "```java\n    //A[][] as2 = new A[][10];             //compilation error\n    A[][] as2 = new A[10][];\n    System.out.println(as2.length);        //prints: 10\n    System.out.println(as2[0]);            //prints: null\n    //System.out.println(as2[0].length);   //NullPointerException\n    //System.out.println(as2[0][0]);       //NullPointerException\n\n    as2 = new A[2][3];\n    System.out.println(as2[0]); //prints: ManageArrays$A;@282ba1e\n    System.out.println(as2[0].length); //prints: 3\n    System.out.println(as2[0][0]);     //prints: null\n```", "```java\nSystem.out.println(Arrays.toString(as2));   \n        //prints: [[ManageArrays$A;@282ba1e, [ManageArrays$A;@13b6d03]\nSystem.out.println(Arrays.toString(as2[0])); //[null, null, null]\n\n```", "```java\nSystem.out.println(Arrays.deepToString(as2)); \n           //the above prints: [[null, null, null], [null, null, null]]\n\n```", "```java\nString[] arr = {\"s0\", \"s1\", };\nSystem.out.println(Arrays.toString(arr)); //prints: [s0, s1]\n\n```", "```java\nclass ManageArrays {\nprivate static A[] AS_STATIC;\n  static {\n    AS_STATIC = new A[2];\n    for(int i = 0; i< AS_STATIC.length; i++){\n        AS_STATIC[i] = new A();\n    }\n    AS_STATIC[0] = new A();\n    AS_STATIC[1] = new A();\n  }\n  //... the rest of class code goes here\n}\n```", "```java\nclass ManageArrays {\n  private A[] as;\n  public ManageArrays(){\n    as = new A[2];\n    for(int i = 0; i< as.length; i++){\n        as[i] = new A();\n    }\n    as[0] = new A();\n    as[1] = new A();\n  }\n  //the reat of class code goes here\n}\n```", "```java\nList<Integer> list = List.of(0, 1, 2, 3);\nInteger[] arr1 = list.toArray(new Integer[list.size()]);\nSystem.out.println(Arrays.toString(arr1)); //prints: [0, 1, 2, 3]\n```", "```java\nString[] arr2 = new String[3];\nArrays.fill(arr2, \"s\");\nSystem.out.println(Arrays.toString(arr2));      //prints: [s, s, s]\n\nString[] arr3 = new String[5];\nArrays.fill(arr3, 2, 3, \"s\");\nSystem.out.println(Arrays.toString(arr3)); \n                              //prints: [null, null, s, null, null]\nString[] arr4 = {\"s0\", \"s1\", };\nString[] arr4Copy = Arrays.copyOf(arr4, 5);\nSystem.out.println(Arrays.toString(arr4Copy)); \n                                //prints: [s0, s1, null, null, null]\nString[] arr5 = {\"s0\", \"s1\", \"s2\", \"s3\", \"s4\" };\nString[] arr5Copy = Arrays.copyOfRange(arr5, 1, 3);\nSystem.out.println(Arrays.toString(arr5Copy));    //prints: [s1, s2]\n\nInteger[] arr6 = {0, 1, 2, 3, 4 };\nObject[] arr6Copy = Arrays.copyOfRange(arr6,1, 3, Object[].class);\nSystem.out.println(Arrays.toString(arr6Copy));      //prints: [1, 2]\n\nString[] arr7 = Stream.of(\"s0\", \"s1\", \"s2\").toArray(String[]::new);\nSystem.out.println(Arrays.toString(arr7));    //prints: [s0, s1, s2] \n```", "```java\nList<String> list = Arrays.asList(\"s0\", \"s1\");\nSet<String> set = new HashSet<>(Arrays.asList(\"s0\", \"s1\");\n```", "```java\nList<String> list = List.of(\"s0\", \"s1\");\nSet<String> set = Set.of(\"s0\", \"s1\");\n```", "```java\nList<String> list = new ArrayList<>(List.of(\"s0\", \"s1\"));\nSet<String> set1 = new HashSet<>(list);\nSet<String> set2 = new HashSet<>(Set.of(\"s0\", \"s1\"));\n```", "```java\nInteger[] as1 = {1,2,3};\nInteger[] as2 = {1,2,3};\nSystem.out.println(as1.equals(as2));               //prints: false\nSystem.out.println(Arrays.equals(as1, as2));       //prints: true\nSystem.out.println(Arrays.deepEquals(as1, as2));   //prints: true\n\n```", "```java\nInteger[][] aas1 = {{1,2,3}, {4,5,6}};\nInteger[][] aas2 = {{1,2,3}, {4,5,6}};\nSystem.out.println(Arrays.equals(aas1, aas2));       //prints: false\nSystem.out.println(Arrays.deepEquals(aas1, aas2));   //prints: true\n\nInteger[][][] aaas1 = {{{1,2,3}, {4,5,6}}, {{7,8,9}, {10,11,12}}};\nInteger[][][] aaas2 = {{{1,2,3}, {4,5,6}}, {{7,8,9}, {10,11,12}}};\nSystem.out.println(Arrays.deepEquals(aaas1, aaas2)); //prints: true\n\n```"]