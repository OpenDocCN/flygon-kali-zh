["```\n**ssh-keygen -t rsa -f keys/flocker**\n\n```", "```\n**for i in `seq 101 110`; do**\n**docker-machine create -d amazonec2 \\**\n**--amazonec2-ami ami-c9580bde \\**\n**--amazonec2-ssh-keypath keys/flocker \\**\n**--amazonec2-instance-type \"t2.medium\" \\**\n**aws-$i;**\n**done**\n\n```", "```\n**docker run -v myvolume:/data --volume-driver flocker image command**\n\n```", "```\n**docker volume ls**\n**docker volume create -d flocker**\n\n```", "```\n**git clone git@github.com:fsoppelsa/ansible-flocker.git**\n\n```", "```\n**sudo apt-get -y install --force-yes clusterhq-flocker-cli**\n\n```", "```\n**pip install https://clusterhq-\n    archive.s3.amazonaws.com/python/Flocker-1.15.0-py2-none-any.whl**\n\n```", "```\n**cd utils**\n**./generate_certs.sh**\n\n```", "```\n**mkdir files/**\n\n```", "```\n**cp certs/* files/**\n\n```", "```\n**control-service:**\n **hostname: \"<Control node IP>\"**\n **port: 4524**\n**dataset:**\n **backend: \"aws\"**\n **region: \"us-east-1\"**\n **zone: \"us-east-1a\"**\n **access_key_id: \"<AWS-KEY>\"**\n **secret_access_key: \"<AWS-ACCESS-KEY>\"**\n**version: 1**\n\n```", "```\n**$ export ANSIBLE_HOST_KEY_CHECKING=False**\n**$ ansible-playbook \\**\n**-i inventory \\**\n**--private-key keys/flocker \\**\n**playbooks/flocker_control_install.yml**\n\n```", "```\n**$ ansible-playbook \\**\n**-i inventory \\**\n**--private-key keys/flocker \\**\n**playbooks/flocker_nodes_install.yml**\n\n```", "```\n**$ docker-machine ssh aws-104**\n**$ sudo su -**\n**# ls /var/run/docker/plugins/flocker/**\n**flocker.sock  flocker.sock.lock**\n**# curl -sSL https://get.flocker.io |sh**\n\n```", "```\n**export FLOCKER_USER=client**\n**export FLOCKER_CONTROL_SERVICE=54.84.176.7**\n**export FLOCKER_CERTS_PATH=/etc/flocker**\n\n```", "```\n**flockerctl status**\n**flockerctl list**\n\n```", "```\n**$ docker-machine ssh aws-108**\n**$ sudo su -**\n**# docker run -v test:/data --volume-driver flocker \\**\n**busybox sh -c \"echo example > /data/test.txt\"**\n**# docker run -v test:/data --volume-driver flocker \\**\n**busybox sh -c \"cat /data/test.txt\"**\n**example**\n\n```", "```\n**docker volume ls**\n**flockerctl list**\n\n```", "```\n**# docker rm -v ba7884944577**\n**# docker rm -v 7293a156e199**\n**# flockerctl destroy -d 8577ed21-25a0-4c68-bafa-640f664e774e**\n\n```", "```\n**docker network create --driver overlay --subnet 10.0.0.0/24 spark**\n\n```", "```\n**docker volume create -d flocker -o size=75G -o profile=bronze --\n    name=spark**\n\n```", "```\n**docker node update --label-add type=sparkmaster aws-105**\n\n```", "```\n**$ docker service create \\**\n**--container-label spark-master \\**\n**--network spark \\**\n**--constraint 'node.labels.type == sparkmaster' \\**\n**--publish 8080:8080 \\**\n**--publish 7077:7077 \\**\n**--publish 6066:6066 \\**\n**--name spark-master \\**\n**--replicas 1 \\**\n**--env SPARK_MASTER_IP=0.0.0.0 \\**\n**--mount type=volume,target=/data,source=spark,volume-driver=flocker \n    \\**\n**fsoppelsa/spark-master**\n\n```", "```\n**$ docker service create \\**\n**--constraint 'node.labels.type != sparkmaster' \\**\n**--network spark \\**\n**--name spark-worker \\**\n**--replicas 3 \\**\n**--env SPARK\\_MASTER\\_IP=10.0.0.3 \\**\n**--env SPARK\\_WORKER\\_CORES=1 \\**\n**--env SPARK\\_WORKER\\_MEMORY=1g \\**\n**fsoppelsa/spark-worker**\n\n```", "```\n**docker run -ti fsoppelsa/spark-worker /spark/bin/run-example \n    SparkPi**\n\n```", "```\n**...**\n**Pi is roughly 3.14916**\n**...**\n\n```", "```\n**$ docker run -ti fsoppelsa/spark-worker \\**\n**/spark/bin/spark-shell --master spark://<aws-105-IP>:7077**\n\n```", "```\n**$ docker service rm spark-worker**\n**$ docker service create \\**\n**--constraint 'node.labels.type == sparkmaster' \\**\n**--network spark \\**\n**--name spark-worker \\**\n**--replicas 1 \\**\n**--env SPARK\\_MASTER\\_IP=10.0.0.3 \\**\n**--mount type=volume,target=/data,source=spark,volume-driver=flocker\\**\n**fsoppelsa/spark-worker**\n\n```", "```\n**$ eval $(docker-machine env aws-105)** \n\n```", "```\n**$ docker exec -ti 13ad1e671c8d bash**\n**# echo \"the content of lorem ipsum\" > /data/file.txt**\n\n```", "```\n    **$ docker exec -ti 13ad1e671c8d /spark/bin/spark-shell**\n    **...**\n    **scala> val inFile = sc.textFile(\"file:/data/file.txt\")**\n    **scala> val counts = inFile.flatMap(line => line.split(\" \n            \")).map(word => (word, 1)).reduceByKey(_ + _)**\n    **scala> counts.saveAsTextFile(\"file:/data/output\")**\n    **scala> ^D**\n\n    ```", "```\n**$ docker run -v spark:/data -ti busybox sh**\n**# ls /data**\n**# ls /data/output/**\n**# cat /data/output/part-00000**\n\n```", "```\n**aws-101$ docker service create \\**\n**--constraint 'node.labels.type != sparkmaster' \\**\n**--network spark \\**\n**--name spark-worker \\**\n**--replicas 3 \\**\n**--env SPARK_MASTER_IP=10.0.0.3 \\**\n**--env SPARK\\_WORKER\\_CORES=1 \\**\n**--env SPARK\\_WORKER\\_MEMORY=1g \\**\n**fsoppelsa/spark-worker**\n\n```", "```\n**aws-101$ docker service scale spark-worker=30**\n\n```", "```\n**aws-101$ docker network create --driver overlay monitoring**\n\n```", "```\n**aws-101$ docker service create \\**\n **--mode global \\**\n **--name cadvisor \\**\n **--network monitoring \\**\n **--mount type=bind,src=/var/lib/docker/,dst=/var/lib/docker \\**\n **--mount type=bind,src=/,dst=/rootfs \\**\n **--mount type=bind,src=/var/run,dst=/var/run \\**\n **--publish 8080 \\**\n **google/cadvisor**\n\n```", "```\n**aws-101$ docker service create \\**\n **--name prometheus \\**\n **--network monitoring \\**\n **--replicas 1 \\**\n **--publish 9090:9090 \\**\n **prom/prometheus-swarm**\n\n```", "```\n**aws-101$ docker service create \\**\n **--mode global \\**\n **--name node-exporter \\**\n **--network monitoring \\**\n **--publish 9100 \\**\n **prom/node-exporter**\n\n```", "```\n**aws-101$ docker service create \\**\n **--name grafana \\**\n **--network monitoring \\**\n **--publish 3000:3000 \\**\n **--replicas 1 \\**\n **-e \"GF_SECURITY_ADMIN_PASSWORD=password\" \\**\n **-e \"PROMETHEUS_ENDPOINT=http://prometheus:9090\" \\**\n **grafana/grafana**\n\n```", "```\n**\"admin\":\"password\"**\n\n```"]