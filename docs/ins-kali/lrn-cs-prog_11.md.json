["```cs\n    var engine = new Engine();\n    var type = engine.GetType();\n    ```", "```cs\n    var type = Type.GetType(\"Engine\");\n    ```", "```cs\n    var type = typeof(Engine);\n    ```", "```cs\npublic enum EngineStatus { Stopped, Started }\npublic class Engine\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0public int Capacity { get; }\n\u00a0\u00a0\u00a0\u00a0public double Power { get; }\n\u00a0\u00a0\u00a0\u00a0public EngineStatus Status { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public Engine(string name, int capacity, double power)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Capacity = capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Power = power;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Status = EngineStatus.Stopped;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Start()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Status = EngineStatus.Started;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Stop()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Status = EngineStatus.Stopped;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n\u00a0\u00a0\u00a0\u00a0var type = typeof(Engine);\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(type.Name);\n\u00a0\u00a0\u00a0\u00a0var properties = type.GetProperties();\n\u00a0\u00a0\u00a0\u00a0foreach(var p in properties)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{p.Name} ({p.PropertyType.Name})\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0var methods = type.GetMethods(BindingFlags.Public |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BindingFlags.Instance |\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BindingFlags.DeclaredOnly);\n\u00a0\u00a0\u00a0\u00a0foreach(var m in methods)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var parameters = string.Join(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0',',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m.GetParameters()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(p => $\"{p.ParameterType.Name} {p.Name}\"));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"{m.ReturnType.Name} {m.Name} ({parameters})\");\n\u00a0\u00a0\u00a0}\n}\n```", "```cs\nEngine\nName (String)\nCapacity (Int32)\nPower (Double)\nStatus (EngineStatus)\nString get_Name ()\nInt32 get_Capacity ()\nDouble get_Power ()\nEngineStatus get_Status ()\nVoid Start ()\nVoid Stop ()\n```", "```cs\nvar assembly = Assembly.Load(\"EngineLib\");\n```", "```cs\nvar assembly = Assembly.Load(@\"EngineLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\");\n```", "```cs\nvar assemblyName = new AssemblyName()\n{\n\u00a0\u00a0\u00a0\u00a0Name = \"EngineLib\",\n\u00a0\u00a0\u00a0\u00a0Version = new Version(1,0,0,0),\n\u00a0\u00a0\u00a0\u00a0CultureInfo = null,\n};\nvar assembly = Assembly.Load(assemblyName);\n```", "```cs\nvar assembly = Assembly.Load(@\"WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\");\n```", "```cs\nvar assembly = Assembly.LoadFrom(@\"c:\\learningc#8\\chapter_11_02\\bin\\Debug\\netcoreapp2.1\\EngineLib.dll\");\n```", "```cs\nif (assembly != null)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n$@\"Name: {assembly.GetName().FullName}\nFiles: {string.Join(',', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assembly.GetFiles().Select(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s=>Path.GetFileName(s.Name)))}\nRefs:\u00a0\u00a0{string.Join(',', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assembly.GetReferencedAssemblies().Select(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n=>n.Name))}\");\n\u00a0\u00a0\u00a0\u00a0var type = assembly.GetType(\"EngineLib.Engine\");\n\u00a0\u00a0\u00a0\u00a0if (type != null)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var properties = type.GetProperties();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var p in properties)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"{p.Name} ({p.PropertyType.Name})\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar assembly = Assembly.LoadFrom(\"EngineLib.dll\");\nif (assembly != null)\n{\n\u00a0\u00a0\u00a0\u00a0var type = assembly.GetType(\"EngineLib.Engine\");\n\u00a0\u00a0\u00a0\u00a0object engine = assembly.CreateInstance(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"EngineLib.Engine\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BindingFlags.CreateInstance,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0null,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new object[] { \"M270 Turbo\", 1600, 75.0 },\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0null,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0null);\n\u00a0\u00a0\u00a0\u00a0var pi = type.GetProperty(\"Status\");\n\u00a0\u00a0\u00a0\u00a0if (pi != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(pi.GetValue(engine));\n\u00a0\u00a0\u00a0\u00a0var mi = type.GetMethod(\"Start\");\n\u00a0\u00a0\u00a0\u00a0if (mi != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mi.Invoke(engine, null);\n\u00a0\u00a0\u00a0\u00a0if (pi != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(pi.GetValue(engine));\n}\n```", "```cs\nobject engine = Activator.CreateInstance(\n\u00a0\u00a0\u00a0\u00a0type,\n\u00a0\u00a0\u00a0\u00a0new object[] { \"M270 Turbo\", 1600, 75.0 });\n```", "```cs\nnamespace EngineLibBase\n{\n\u00a0\u00a0\u00a0\u00a0public enum EngineStatus { Stopped, Started }\n\u00a0\u00a0\u00a0\u00a0public interface IEngine\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0EngineStatus Status { get; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void Start();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void Stop();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nusing EngineLibBase;\nnamespace EngineLib\n{ \n\u00a0\u00a0\u00a0\u00a0public class Engine : IEngine\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public int Capacity { get; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public double Power { get; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public EngineStatus Status { get; private set; }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public Engine(string name, int capacity, double power)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Capacity = capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Power = power;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Status = EngineStatus.Stopped;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void Start()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Status = EngineStatus.Started;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void Stop()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Status = EngineStatus.Stopped;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar assembly = Assembly.LoadFrom(\"EngineLib.dll\");\nif (assembly != null)\n{\n\u00a0\u00a0\u00a0\u00a0var type = assembly.GetType(\"EngineLib.Engine\");\n\u00a0\u00a0\u00a0\u00a0var engine = (IEngine)Activator.CreateInstance(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new object[] { \"M270 Turbo\", 1600, 75.0 });\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(engine.Status);\n\u00a0\u00a0\u00a0\u00a0engine.Start();\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(engine.Status);\n}\n```", "```cs\ndynamic i = 42;\ndynamic s = \"42\";\ndynamic d = 42.0;\ndynamic l = new List<int> { 42 };\nl.Add(43); // OK\ntry\n{\n\u00a0\u00a0\u00a0s.Add(44); /* RuntimeBinderException:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'string' does not contain a definition for 'Add' */\n}\ncatch (Exception ex)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(ex.Message);\n}\n```", "```cs\nvar assembly = Assembly.LoadFrom(\"EngineLib.dll\");\nif (assembly != null)\n{\n\u00a0\u00a0\u00a0\u00a0var type = assembly.GetType(\"EngineLib.Engine\");\n\u00a0\u00a0\u00a0\u00a0dynamic engine = Activator.CreateInstance(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new object[] { \"M270 Turbo\", 1600, 75.0 });\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(engine.Status);\n\u00a0\u00a0\u00a0\u00a0engine.Start();\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(engine.Status);\n}\n```", "```cs\ndynamic d = \"42\";\nstring s = d;\n```", "```cs\ndynamic excel = Activator.CreateInstance(\n\u00a0\u00a0\u00a0\u00a0Type.GetTypeFromProgID(\"Excel.Application.16\")); \nif (excel != null)\n{\n\u00a0\u00a0\u00a0\u00a0excel.Visible = true;\n\n\u00a0\u00a0\u00a0\u00a0dynamic workBook = excel.Workbooks.Add();\n\u00a0\u00a0\u00a0\u00a0dynamic workSheet = excel.ActiveWorkbook.ActiveSheet;\n\u00a0\u00a0\u00a0\u00a0workSheet.Cells[1, 1] = \"ID\";\n\u00a0\u00a0\u00a0\u00a0workSheet.Cells[1, 2] = \"Name\";\n\u00a0\u00a0\u00a0\u00a0workSheet.Cells[2, 1] = \"1\";\n\u00a0\u00a0\u00a0\u00a0workSheet.Cells[2, 2] = \"One\";\n\u00a0\u00a0\u00a0\u00a0workSheet.Cells[3, 1] = \"2\";\n\u00a0\u00a0\u00a0\u00a0workSheet.Cells[3, 2] = \"Two\";\n\u00a0\u00a0\u00a0\u00a0workBook.SaveAs(\"d:\\\\demo.xls\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Excel.XlFileFormat.xlWorkbookNormal, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AccessMode : Excel.XlSaveAsAccessMode.xlExclusive);\n\u00a0\u00a0\u00a0\u00a0workBook.Close(true);\n\u00a0\u00a0\u00a0\u00a0excel.Quit();\n}\n```", "```cs\nclass DescriptionAttribute : Attribute\n{\n\u00a0\u00a0\u00a0\u00a0public string Text { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public DescriptionAttribute(string description)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Text = description;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n[Description(\"Main component of the car\")]\nclass Engine\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0[Description(\"cm\u00b3\")]\n\u00a0\u00a0\u00a0\u00a0public int Capacity { get; }\n\u00a0\u00a0\u00a0\u00a0[Description(\"kW\")]\n\u00a0\u00a0\u00a0\u00a0public double Power { get; }\n\u00a0\u00a0\u00a0\u00a0public Engine([Description(\"The name\")] string name, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Description(\"The capacity\")] int capacity, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Description(\"The power\")] double power)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Capacity = capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Power = power;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass DescriptionAttribute : Attribute\n{\n\u00a0\u00a0\u00a0\u00a0public string Text { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public bool Required { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DescriptionAttribute(string description)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Text = description;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n[Description(\"Main component of the car\", Required = true)]\nclass Engine\n{\n}\n```", "```cs\n    [Serializable]\n    [Description(\"Main component of the car\")]\n    [ComVisible(false)]\n    class Engine\n    {\n    }\n    ```", "```cs\n    [Serializable, \n     Description(\"Main component of the car\"), \n     ComVisible(false)]\n    class Engine\n    {\n    }\n    ```", "```cs\n[AttributeUsage(AttributeTargets.Class|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AttributeTargets.Struct|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AttributeTargets.Method|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AttributeTargets.Property|\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AttributeTargets.Field,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AllowMultiple = true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Inherited = true)]\nclass DescriptionAttribute : Attribute\n{\n\u00a0\u00a0\u00a0\u00a0public string Text { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public bool Required { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DescriptionAttribute(string description)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Text = description;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n[assembly: AssemblyTitle(\"project_name\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"project_name\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9 2019\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n```", "```cs\nvar e = new Engine(\"M270 Turbo\", 1600, 75.0);\nvar type = e.GetType();\nvar attributes = type.GetCustomAttributes(typeof(DescriptionAttribute), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true);\nif (attributes != null)\n{\n\u00a0\u00a0\u00a0\u00a0foreach (DescriptionAttribute attr in attributes)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(attr.Text);\n\u00a0\u00a0\u00a0\u00a0}\n}\nvar properties = type.GetProperties();\nforeach (var property in properties)\n{\n\u00a0\u00a0\u00a0\u00a0var pattributes = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0property.GetCustomAttributes(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0typeof(DescriptionAttribute), false);\n\u00a0\u00a0\u00a0\u00a0if (attributes != null)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (DescriptionAttribute attr in pattributes)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"{property.Name} [{attr.Text}]\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nMain component of the car\nCapacity [cm3]\nPower [kW]\n```"]