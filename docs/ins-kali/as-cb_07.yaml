- en: Chapter 7. Content Providers and Observers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。内容提供程序和观察者
- en: In most apps, we need to persist data and often use SQLite for this purpose.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数应用程序中，我们需要持久化数据，并经常使用SQLite来实现这一目的。
- en: A very common situation is that of the list and detail views. By using content
    providers, we do not just provide a way of communication between apps but also
    save ourselves much work in our own app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 非常常见的情况是列表和详细视图。通过使用内容提供程序，我们不仅提供了应用程序之间的通信方式，还在我们自己的应用程序中节省了大量工作。
- en: 'In this chapter, you will learn about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习：
- en: Content providers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容提供程序
- en: Consuming and updating data using a content provider
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内容提供程序消耗和更新数据
- en: Changing projections to display **Key Performance Indicators** (**KPIs**) in
    your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将投影更改为在您的应用程序中显示**关键绩效指标**（**KPIs**）
- en: Communicating with other apps using content providers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内容提供程序与其他应用程序进行通信
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: If we want to create a new row or if we want to edit a row in the database,
    the app will show the fragment or activity containing the details, where the user
    can enter or modify some text and other values. Once the record has been inserted
    or updated, the list needs to know about the changes. Telling the list activity
    or fragment about the changes is not hard to do, but there is a more elegant way
    to accomplish this. For this, and for other reasons that we will find out about
    later, we will examine what content providers are about.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要创建一个新的行，或者想要编辑数据库中的一行，应用程序将显示包含详细信息的片段或活动，用户可以在那里输入或修改一些文本和其他值。一旦记录被插入或更新，列表需要知道这些变化。告诉列表活动或片段有关这些变化并不难做到，但有一种更优雅的方法可以实现这一点。为此，以及其他我们将在以后了解的原因，我们将研究内容提供程序的内容。
- en: The Android content provider framework allows us to create a much better design
    for our app. One of its features is that it allows us to notice when certain data
    has been changed. That could work even across different applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android内容提供程序框架允许我们为应用程序创建更好的设计。其中一个特点是它允许我们注意到某些数据已经发生了变化。即使在不同的应用程序之间也可以工作。
- en: Content providers
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容提供程序
- en: Building a content provider is a really smart thing to do. The content provider
    API comes with an interesting feature that allows applications to observe changes
    in a data set.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 构建内容提供程序是一件非常聪明的事情。内容提供程序API具有一个有趣的功能，允许应用程序观察数据集的变化。
- en: Content providers connect data in one process with code running in another process,
    even between two completely different applications if you want. If you ever wrote
    code to pick an image from the Gallery app, you may have experienced this behavior.
    Some component manipulates the persistent dataset that other components depend
    upon. A content provider can use many different ways to store data, which can
    be stored in a database, in files, or even over a network.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 内容提供程序将一个进程中的数据与另一个进程中运行的代码连接起来，甚至可以在两个完全不同的应用程序之间进行连接。如果您曾经编写过从Gallery应用中选择图像的代码，您可能已经经历过这种行为。某些组件操作其他组件依赖的持久数据集。内容提供程序可以使用许多不同的方式来存储数据，可以存储在数据库中，文件中，甚至可以通过网络进行存储。
- en: Datasets are identified by unique URIs, so it is possible to ask for notifications
    if a certain URI is changed. Here is where the observer pattern comes in.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集由唯一的URI标识，因此可以要求在某个URI发生变化时进行通知。这就是观察者模式的应用之处。
- en: The observer pattern is a common software design pattern in which an object
    (the subject) has one or more dependents (the observers, also known as the listeners)
    that will automatically be notified of any state changes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者模式是一种常见的软件设计模式，其中一个对象（主题）具有一个或多个依赖对象（观察者，也称为监听器），它们将自动被通知任何状态更改。
- en: There's more...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Design patterns
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计模式
- en: To learn more about this and other **object-oriented** (**OO**) design patterns,
    you can have a look at [http://www.oodesign.com/observer-pattern.html](http://www.oodesign.com/observer-pattern.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于这个和其他**面向对象**（**OO**）设计模式，您可以查看[http://www.oodesign.com/observer-pattern.html](http://www.oodesign.com/observer-pattern.html)。
- en: RxJava
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RxJava
- en: RxJava is a very interesting library and is available in an Android flavor as
    well. Reactive programming has principal similarities with the observer pattern.
    The basic building blocks of reactive code are also Observables and Subscribers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: RxJava是一个非常有趣的库，也可以在Android版本中使用。响应式编程与观察者模式有主要相似之处。响应式代码的基本构建块也是可观察对象和订阅者。
- en: 'To learn more about Rx and RxJava, you can visit these web sites:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Rx和RxJava，您可以访问这些网站：
- en: '[https://github.com/reactivex/rxandroid](https://github.com/reactivex/rxandroid)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/reactivex/rxandroid](https://github.com/reactivex/rxandroid)'
- en: '[https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava](https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava](https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava)'
- en: '[http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/](http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/](http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/)'
- en: See also
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 8](ch08.html "Chapter 8. Improving Quality") , *Improving Quality*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章。提高质量") ，*提高质量*'
- en: Consuming and updating data using a content provider – daily thoughts
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内容提供程序消耗和更新数据 - 每日想法
- en: To demonstrate how to create and use content providers we will create an app
    to store what is on your mind and how happy you are on a daily basis.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何创建和使用内容提供程序，我们将创建一个应用程序，用于存储您每天的想法和快乐程度。
- en: Yes, there are apps doing that; however, if you want to create an app to record
    sport notes and scores instead, feel free to modify the code as it involves basically
    the same functionality.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，有一些应用程序正在这样做；但是，如果您想创建一个应用程序来记录体育笔记和分数，可以随意修改代码，因为它基本上涉及相同的功能。
- en: In this recipe, we will store new thoughts and retrieve them using a content
    provider. For the various elements of the app, we will be using fragments because
    they will neatly demonstrate the effect of the observer pattern.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用内容提供程序存储新的想法并检索它们。对于应用程序的各个元素，我们将使用片段，因为它们将清楚地展示观察者模式的效果。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you just need to have Android Studio up and running and a physical
    or virtual Android device.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您只需要运行Android Studio并拥有一个物理或虚拟的Android设备。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s see how to set up a project using a content provider. We will be using
    the Navigation Drawer template for it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用内容提供程序设置项目。我们将使用导航抽屉模板：
- en: Create a new project in Android Studio and name it `DailyThoughts`. Click on
    the **Next** button.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为`DailyThoughts`的新项目。点击**下一步**按钮。
- en: Select the **Phone and Tablet** option and click on the **Next** button.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手机和平板电脑**选项，然后点击**下一步**按钮。
- en: Choose **Navigation Drawer Activity** and click on the **Next** button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**导航抽屉活动**，然后点击**下一步**按钮。
- en: Accept all values on the **Customize the Activity** page and click on the **Finish**
    button.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受**自定义活动**页面上的所有值，然后点击**完成**按钮。
- en: 'Open the `strings.xml` file within the `res/values` folder. Modify the strings
    for the entries that start with `title_section`. Replace them with the menu items
    needed for our app. Also replace the `action_sample` string:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`res/values`文件夹中的`strings.xml`文件。修改以`title_section`开头的条目的字符串。用我们应用程序所需的菜单项替换它们。还替换`action_sample`字符串：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `NavigationDrawerFragment` file, and in the `onCreate` method, modify
    the strings for the adapter accordingly:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`NavigationDrawerFragment`文件，在`onCreate`方法中，相应地修改适配器的字符串：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the same class, within the `onOptionsItemSelected` method, remove the second
    `if` statement that is displaying a toast. We do not need it.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个类中，在`onOptionsItemSelected`方法中，删除显示toast的第二个`if`语句。我们不需要它。
- en: 'Open `main.xml` from the `res/menu` folder. Remove the item for the settings
    and modify the first item so it will use the `action_add` string. Also rename
    it''s ID and add a neat icon for it:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`res/menu`文件夹中打开`main.xml`。删除设置项，并修改第一项，使其使用`action_add`字符串。还重命名它的ID并为其添加一个漂亮的图标：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `MainActivity` file, in the `onSectionAttached` section, apply the correct
    strings for the different options:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`文件中，在`onSectionAttached`部分，为不同的选项应用正确的字符串：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a new package named `db`. Within this package, create a new class, `DatabaseHelper`,
    that extends the `SQLiteOpenHelper` class. It will help us to create a new database
    for our application. It will contain just one table: `thoughts`. Each `Thought
    table` will have an id, a name and a happiness rating:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`db`的新包。在这个包中，创建一个名为`DatabaseHelper`的新类，它继承`SQLiteOpenHelper`类。它将帮助我们为我们的应用程序创建一个新的数据库。它将只包含一个表：`thoughts`。每个`Thought
    table`将有一个id，一个名称和一个幸福评分：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create another package and name it `providers`. Within this package, create
    a new class called `ThoughtsProvider`. This will be our content provider for all
    our daily thoughts. Make it a descendant of the `ContentProvider` class.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个包并命名为`providers`。在这个包中，创建一个名为`ThoughtsProvider`的新类。这将是我们所有日常想法的内容提供程序。将其作为`ContentProvider`类的后代。
- en: From the **Code** menu, choose the **Implement methods** option. In the dialog
    that appears, all available methods are selected. Accept this suggestion and click
    on the **OK** button. Your new class will be extended with these methods.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**代码**菜单中，选择**实现方法**选项。在出现的对话框中，所有可用的方法都被选中。接受这个建议，然后点击**确定**按钮。您的新类将扩展这些方法。
- en: 'On top of the class, we will create some static variables:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类的顶部，我们将创建一些静态变量：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a private member, `db`, that refers to the `SQLiteDatabase` class, and
    modify the `onCreate` method. We create a new database helper:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有成员`db`，引用`SQLiteDatabase`类，并修改`onCreate`方法。我们创建一个新的数据库助手：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Queries
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询
- en: 'Next, implement the `query` method. A query returns a cursor object. A cursor
    represents the result of the query and points to one of the query results so the
    results can be buffered efficiently as it does not need to load data into memory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，实现`query`方法。查询返回一个游标对象。游标表示查询的结果，并指向查询结果中的一个，因此结果可以被高效地缓冲，因为它不需要将数据加载到内存中：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `setNotificationUri` call registers the instruction to watch a content URI
    for changes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`setNotificationUri`调用注册指令以监视内容URI的更改。'
- en: 'We will implement the other methods using the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下步骤实现其他方法：
- en: 'Implement the `getType` method. The `dir` directory suggests we want to get
    all thought records. The `item` term indicates that we are looking for a particular
    thought:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`getType`方法。`dir`目录表示我们想要获取所有的想法记录。`item`术语表示我们正在寻找特定的想法：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Implement the `insert` method. It will create a new record based on the provided
    values, and if this succeeds we will be notified about the change:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`insert`方法。它将基于提供的值创建一个新记录，如果成功，我们将收到通知：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `delete` and `update` methods are out of scope for this recipe, so we will
    not implement them now. Challenge: Add your own implementation here.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`delete`和`update`方法超出了本配方的范围，所以我们现在不会实现它们。挑战：在这里添加您自己的实现。'
- en: 'Open the `AndroidManifest.xml` file and add add the `provider` tag within the
    `application` tag:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AndroidManifest.xml`文件，并在`application`标签内添加`provider`标签：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For security reasons, you should use `false` as the value for the exported property
    in most cases. The reason why we set the value of this property to `true` here
    is that later we will create another app that will be able to read the content
    from this app.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，在大多数情况下，您应该将导出属性的值设置为`false`。我们将此属性的值设置为`true`的原因是，稍后我们将创建另一个应用程序，该应用程序将能够从此应用程序中读取内容。
- en: 'Add the permission for other apps to read data. We will use that in the last
    recipe. Add it outside the `application` tag:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加其他应用程序读取数据的权限。我们将在最后一个配方中使用它。将其添加到`application`标签之外：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Open the `strings.xml` file and add new strings to it:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`strings.xml`文件并向其中添加新的字符串：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create two new layout files: `fragment_thoughts.xml` for our list of thoughts
    and `fragment_thoughts_detail` to enter new thoughts.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个新的布局文件：`fragment_thoughts.xml`用于我们的想法列表和`fragment_thoughts_detail`用于输入新的想法。
- en: 'Define the layout for `fragment_thoughts.xml`. A `ListView` widget is just
    fine to display all thoughts:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`fragment_thoughts.xml`定义布局。 一个`ListView`小部件很适合显示所有的想法：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The layout for `fragment_thoughts_detail.xml` will contain the `EditText` and
    `RatingBar` widgets so we can enter what we are thinking and how happy how we
    currently are:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fragment_thoughts_detail.xml`的布局将包含`EditText`和`RatingBar`小部件，以便我们可以输入我们的想法和我们当前的幸福程度：'
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Also create a layout for the rows in the list of thoughts. Name it `adapter_thought.xml`.
    Add text views to display an ID a title, or name and the rating:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要为想法列表中的行创建布局。将其命名为`adapter_thought.xml`。添加文本视图以显示ID、标题或名称和评分：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new package, name it: `fragments`, and add two new classes to it:
    `ThoughtsDetailFragment` and `ThoughtsFragment`, both of which will be descendants
    of the `Fragment` class.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的包，命名为：`fragments`，并向其中添加两个新的类：`ThoughtsDetailFragment`和`ThoughtsFragment`，它们都将是`Fragment`类的子类。
- en: 'To the `ThoughtsFragment` class, add the `LoaderCallBack` implementation:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ThoughtsFragment`类中，添加`LoaderCallBack`的实现：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: From the **Code** menu, choose **Implement methods**, accept the suggested methods,
    and click on the **OK** button. It will create the `onCreateLoader`, `onLoadFinished`,
    and `onLoaderReset` implementations.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**代码**菜单中选择**实现方法**，接受建议的方法，并单击**确定**按钮。它将创建`onCreateLoader`，`onLoadFinished`和`onLoaderReset`的实现。
- en: 'Add two private members that will hold the list view and an adapter:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加两个私有成员，它们将保存列表视图和适配器：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Override the `onCreateView` method, where we will inflate the layout and get
    a reference to the list view. From here we also will call the `getData` method:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`onCreateView`方法，在其中我们将填充布局并获取对列表视图的引用。从这里，我们还将调用`getData`方法：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Loader manager
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载程序管理器
- en: 'The following steps will help us to add a loader manager to our app:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们向应用程序添加加载程序管理器：
- en: Implement the `getData` method. We will use the `initLoader` method of `loaderManager`
    for that. The projection defines the fields we want to retrieve, and the target
    is an array of ID's within the `adapter_thought_title` layout, which will save
    us some work using the `SimpleCursorAdapter` class.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`getData`方法。我们将使用`loaderManager`的`initLoader`方法。投影定义了我们想要检索的字段，目标是`adapter_thought_title`布局中的ID数组，这将节省我们使用`SimpleCursorAdapter`类的一些工作。
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After the `initLoader` call, a new loader needs to be created. For this we
    will have to implement the `onLoadFinished` method. We use the same projection
    as we did for the adapter and we will create a `CursorLoader` class using the
    `uri` content of the `ThoughtsProvider` we have created in the preceding steps.
    We will sort the outcome by ID (descending):'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initLoader`调用之后，需要创建一个新的加载程序。为此，我们将不得不实现`onLoadFinished`方法。我们将使用与适配器相同的投影，并使用我们在前面步骤中创建的`ThoughtsProvider`的`uri`内容创建`CursorLoader`类。我们将按ID（降序）对结果进行排序：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In `onLoadFinished`, notify the adapter about the loaded data:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onLoadFinished`中，通知适配器加载了数据：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Finally, let's add the implementation for the `onLoaderReset` method. In this
    situation, the data is no longer available so we can delete the reference.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们为`onLoaderReset`方法添加实现。在这种情况下，数据不再可用，因此我们可以删除引用。
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s have a look at the `ThoughtsDetailFragment`method. Override the `onCreateView`
    method, inflate the layout, and add an on-click listener for the save button in
    the layout:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看看`ThoughtsDetailFragment`方法。重写`onCreateView`方法，填充布局，并为布局中的保存按钮添加点击监听器：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the `addThought` method. We will create new content values based on the
    input via the `EditText` and `RatingBar` field We will use the `insert` method
    of the content resolver based on the provided URI. After inserting the new record,
    we will clear the input:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`addThought`方法。我们将根据通过`EditText`和`RatingBar`字段输入创建新的内容值。我们将根据提供的URI使用内容解析器的`insert`方法。插入新记录后，我们将清除输入：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Again it is time to glue things together. Open the `MainActivity` class and
    add two private members that will refer to the fragments we have created as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次是将事物粘合在一起的时候了。打开`MainActivity`类，并添加两个私有成员，它们将引用我们创建的片段，如下所示：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add two private members that will initialize them if needed, and return the
    instance:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加两个私有成员，如果需要，将它们初始化，并返回实例：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Remove the implementation for `onNavigationDrawerItemSelected` and a new one
    to display the list of thoughts. We will implement the KPI option later:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`onNavigationDrawerItemSelected`的实现，并添加一个新的来显示想法列表。我们稍后将实现KPI选项：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `onOptionsItemSelected` method, test whether the id is `action_add`,
    and if so, display the details fragment. Add the implementation just after the
    line where we get the id:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onOptionsItemSelected`方法中，测试id是否为`action_add`，如果是，则显示详细片段。在获取id的行后立即添加实现：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Instead of `replace`, we use `add` here. We want the details fragment to appear
    on top of the stack.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用`add`而不是`replace`。我们希望详细片段出现在堆栈的顶部。
- en: 'After saving details, the fragment has to be removed again. Open `ThoughtsDetailFragment`
    one more time. To the end of the `addThought` method, add this to do the trick:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存详细信息后，片段必须再次被移除。再次打开`ThoughtsDetailFragment`。在`addThought`方法的末尾，添加以下内容以完成操作：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'However, it would be better to let the activity handle the displaying of fragments
    since they are intended to be helpers to an activity. Instead, we will create
    a listener for an `onSave` event. On top of the class, add a `DetailFragmentListener`
    interface. Also create a private member and a setter for it:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，最好让活动处理片段的显示，因为它们旨在成为活动的辅助程序。相反，我们将为`onSave`事件创建一个监听器。在类的顶部，添加一个`DetailFragmentListener`接口。还创建一个私有成员和一个setter：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add these lines to the end of the `addThought` member to let the listener know
    things have been saved:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`addThought`成员的末尾添加这些行，以便让监听器知道已保存事物：
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Go back to the `MainActivity` class, and add a listener implementation for
    it. You could use the **Implement methods** option from the **Code** menu for
    it if you want:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`MainActivity`类，并为其添加一个监听器实现。如果需要，您可以使用**代码**菜单中的**实现方法**选项：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To tell the detail fragment that the main activity is listening, scroll to
    the `getThoughtDetailFragment` class and call the `setListener` method right after
    the creation of a new detail fragment:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要告诉详细片段主活动正在监听，请滚动到`getThoughtDetailFragment`类并在创建新详细片段后立即调用`setListener`方法：
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now run the app, choose **Thoughts list** from the navigation drawer, and click
    on the plus sign to add new thoughts. Following screenshot gives the example of
    adding thought:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，从导航抽屉中选择**Thoughts list**，然后单击加号添加新的想法。以下截图显示了添加想法的示例：
- en: '![Loader manager](img/B04299_07_01.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![加载程序管理器](img/B04299_07_01.jpg)'
- en: We do not need to tell the fragment that contains the list about the new thought
    we have created in the detail fragment. Using a content provider with an observer,
    the list will be updated automatically.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要告诉包含列表的片段有关我们在详细片段中创建的新想法。使用具有观察者的内容提供程序，列表将自动更新。
- en: This way we can accomplish more and achieve less error-prone functionality writing
    less code, which is exactly what we want. It allows us to improve the quality
    of our code.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以完成更多，写更少容易出错的功能，从而写更少的代码，这正是我们想要的。它使我们能够提高代码的质量。
- en: See also
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer [Chapter 5](ch05.html "Chapter 5. Size Does Matter"), *Size Does Matter*
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见[第5章](ch05.html "第5章。大小很重要"), *大小很重要*
- en: Refer [Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见[第8章](ch08.html "第8章。提高质量"), *提高质量*
- en: Change projections to display KPIs in your app
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改投影以在应用程序中显示KPI
- en: We can use a different projection and the same observer pattern for displaying
    some KPIs. Actually that is pretty easy, as we will see in this recipe.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用不同的投影和相同的观察者模式来显示一些KPI。实际上，这很容易，正如我们将在本示例中看到的那样。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you need to have completed the previous one successfully.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要成功完成上一个示例。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will continue working on the app from the previous recipe and we will add
    a new view to display the KPIs:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续在上一个示例中的应用程序上工作，并添加一个新视图来显示KPI：
- en: Open the project you have worked on in the previous recipe.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您在上一个示例中工作的项目。
- en: 'Add a new layout, `fragment_thoughts_kpi.xml`:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的布局，`fragment_thoughts_kpi.xml`：
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add a new fragment and name it `ThoughtsKpiFragment`. It descends from the
    `Fragment` class. We will be using the `LoaderManager` here as well so it will
    basically look like this:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的片段并命名为`ThoughtsKpiFragment`。它是从`Fragment`类继承的。我们将在这里使用`LoaderManager`，所以它基本上看起来像这样：
- en: '[PRE35]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Because we will be using two loaders to display two different KPIs, we are
    going to add two constant values first:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们将使用两个加载程序来显示两个不同的KPI，所以我们首先要添加两个常量值：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Override the `onCreate` method:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖`onCreate`方法：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the `getKpis` method (where we initialize the loader twice for different
    purposes):'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`getKpis`方法（在这里我们为不同目的两次初始化加载程序）：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the implementation for the `onCreateLoader` method. This time the projection
    depends on the id of the loader. The projection is just like you would expect
    it to be if it was plain SQL. We are counting the number of rows and we are calculating
    the average happiness:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`onCreateLoader`方法的实现。这次投影取决于加载程序的ID。投影就像您期望的那样，如果它是普通的SQL。我们正在计算行数，并计算平均幸福指数：
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once the data comes in, we arrive at the `onLoadFinished` method and will call
    methods to display the data, if there is any:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦数据到达，我们将到达`onLoadFinished`方法，并调用方法显示数据（如果有的话）：
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add the `setCountedThoughts` and `setAvgHappiness` methods. If the fragment
    is still attached to the activity, we will update the text view or the rating
    bar:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`setCountedThoughts`和`setAvgHappiness`方法。如果片段仍附加到活动中，我们将更新文本视图或评分栏：
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the `MainActivity` file, add a private member for the KPI fragment:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`文件中，添加一个KPI片段的私有成员：
- en: '[PRE42]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a method `getKpiFragment`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`getKpiFragment`方法：
- en: '[PRE43]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Locate the `onNavigationDraweItemSelected` method and add this to the `if`
    statement:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`onNavigationDraweItemSelected`方法，并将其添加到`if`语句中：
- en: '[PRE44]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Run your app. Now we have some neat statistics in our thoughts app:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序。现在我们的想法应用程序中有一些整洁的统计数据：
- en: '![How to do it...](img/B04299_07_02.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04299_07_02.jpg)'
- en: In this and in the previous recipe, we have seen how easy working with data
    becomes once you have grokked the concept of content providers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个和上一个示例中，我们已经看到了一旦掌握了内容提供程序的概念，处理数据变得多么容易。
- en: So far we did all this within the same app; however, since we are already prepared
    to export the content provider, let us find out how to read our thoughts in a
    different app. Let's do that now.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在同一个应用程序中完成了所有这些工作；然而，由于我们已经准备好导出内容提供程序，让我们找出如何在不同的应用程序中读取我们的想法。现在就让我们来做吧。
- en: See also
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer [Chapter 5](ch05.html "Chapter 5. Size Does Matter"), *Size Does Matter*
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[第5章](ch05.html "第5章。大小很重要"), *大小很重要*
- en: Refer [Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[第8章](ch08.html "第8章。提高质量"), *提高质量*
- en: Communicate with other apps using content providers
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内容提供程序与其他应用程序通信
- en: If you read Google's documentation about content providers, you will notice
    that a content provider basically is intended to supply data from one application
    to others on request. Such requests are handled by the methods of the `ContentResolver`
    class.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您阅读谷歌关于内容提供程序的文档，您会注意到内容提供程序基本上是为了在请求时向其他应用程序提供数据。这些请求由`ContentResolver`类的方法处理。
- en: We will create a new app that will read our daily thoughts from the other one.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的应用程序，它将从另一个应用程序中读取我们的日常想法。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you need to have completed the previous one successfully. Make
    sure you have added some thoughts to your app as well or there'll be nothing to
    read otherwise, as Captain Obvious could tell us.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，您需要成功完成上一个示例。确保您也向应用程序添加了一些想法，否则将没有东西可读，正如显而易见的船长所告诉我们的那样。
- en: How to do it...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First we will create a new app. It is going to read our thoughts. That's for
    sure!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们将创建一个新的应用程序。它将读取我们的想法。这是肯定的！
- en: Create a new project in Android Studio, name it `DailyAnalytics`, and click
    on the **OK** button.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目，命名为`DailyAnalytics`，然后点击**确定**按钮。
- en: Select **Phone and tablet** and click on the **Next** button.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手机和平板电脑**，然后点击**下一步**按钮。
- en: Choose **Blank Activity** and click on the **Next** button.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空白活动**，然后点击**下一步**按钮。
- en: Accept all values in the **Customize the activity** view and click on the **Finish**
    button.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受**自定义活动**视图中的所有值，然后点击**完成**按钮。
- en: 'Open the `AndroidManifest.xml` file and add the permission required to communicate
    with the content provider from the `DailyThought` app:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AndroidManifest.xml`文件，并添加与`DailyThought`应用程序通信所需的权限：
- en: '[PRE45]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Open the `activity_main.xml` layout and change the `id` of the `TextView` app
    to `main_kpi_count`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`布局，并将`TextView`应用程序的`id`更改为`main_kpi_count`：
- en: '[PRE46]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the `MainActivity` class, add the `LoaderCallBack` implementation:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中，添加`LoaderCallBack`实现：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Call `initLoader` at the end of the `onCreate` method:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法的末尾调用`initLoader`：
- en: '[PRE48]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add an implementation for the `onCreateLoader` method. It works pretty much
    in the same way as for the app the content provider is part of:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`onCreateLoader`方法添加一个实现。它的工作方式基本与应用程序的内容提供程序相同：
- en: '[PRE49]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `onLoadFinished` method, we can display some analytics based on what
    you have entered in the other app:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onLoadFinished`方法中，我们可以根据您在其他应用程序中输入的内容显示一些分析：
- en: '[PRE50]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the app and see all your thoughts appearing here as shown here:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，看到所有你的想法出现在这里，如下所示：
- en: '![How to do it...](img/B04299_07_03.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04299_07_03.jpg)'
- en: Scary, isn't it? Using content providers, it is pretty easy to share data between
    different apps. This is how many apps such as contacts or the Gallery work.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 可怕，不是吗？使用内容提供程序，很容易在不同的应用程序之间共享数据。这就是许多应用程序如联系人或画廊的工作方式。
- en: There's more...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have learned how content providers work, and we had a sneak peak at the observer
    pattern. Using this and other patterns could improve the quality of our app.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了内容提供程序的工作原理，并且已经偷偷看了一眼观察者模式。使用这个和其他模式可以提高我们应用程序的质量。
- en: Now things will really become serious. Avoid potential errors, reduce the amount
    of code you need to write, and make it work on any Android device! We will find
    out how to do that in the next chapter.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在事情将变得非常严肃。避免潜在错误，减少需要编写的代码量，并使其在任何Android设备上运行！我们将在下一章中找出如何做到这一点。
- en: See also
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to [Chapter 8](ch08.html "Chapter 8. Improving Quality"), *Improving Quality*
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[第8章](ch08.html "第8章。提高质量"), *提高质量*
