- en: '*Chapter 1*: Starting with the Building Blocks of C#'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：从C#的基本构建块开始
- en: C# is one of the most widely used general-purpose programming languages. It
    is a multi-paradigm language that combines object-oriented, imperative, declarative,
    functional, generic, and dynamic programming. C# is one of the programming languages
    designed for the **Common Language Infrastructure** (**CLI**) platform, which
    is an open specification developed by Microsoft and standardized by the **International
    Organization for Standardization** (**ISO**) and **European Computer Manufacturers
    Association** (**ECMA**) that describes executable code and a runtime environment
    to be used on different computer platforms without being rewritten for specific
    architectures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: C#是最广泛使用的通用编程语言之一。它是一种多范式语言，结合了面向对象、命令式、声明式、函数式、泛型和动态编程。C#是为**公共语言基础设施**（**CLI**）平台设计的编程语言之一，这是由微软开发并由**国际标准化组织**（**ISO**）和**欧洲计算机制造商协会**（**ECMA**）标准化的开放规范，描述了可在不同计算机平台上使用的可执行代码和运行时环境，而无需为特定架构重新编写。
- en: Over the years, C# has evolved with powerful features released version by version.
    The most recent version (at the time of writing) is C# 8, which has introduced
    several features to empower developers to be more productive. These include nullable
    reference types, ranges and indices, asynchronous streams, default implementations
    of interface members, recursive patterns, switch expressions, and many others.
    You will learn about these features in detail in [*Chapter 15*](B12346_15_Final_JC_ePub.xhtml#_idTextAnchor271),
    *New Features of C# 8*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，C#随着版本的发布而不断演进，引入了强大的功能。最近的版本（在撰写本文时）是C# 8，它引入了几个功能，使开发人员能够更加高效。这些功能包括可空引用类型、范围和索引、异步流、接口成员的默认实现、递归模式、开关表达式等。您将在[*第15章*](B12346_15_Final_JC_ePub.xhtml#_idTextAnchor271)中详细了解这些功能，*C#
    8的新功能*。
- en: 'In this chapter, we will introduce you to the language, the .NET Framework,
    and the basic concepts around them. We have structured the contents of this chapter
    as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍语言、.NET Framework以及围绕它们的基本概念。我们将本章的内容结构化如下：
- en: Learning the history of C#
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解C#的历史
- en: Understanding the CLI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解CLI
- en: Knowing the .NET family of frameworks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解.NET框架家族
- en: Assemblies in .NET
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET中的程序集
- en: Understanding the basic structure of a C# program
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解C#程序的基本结构
- en: At the end of this chapter, you will learn how to write a `Hello World!` program
    in C#.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学会如何在C#中编写一个`Hello World!`程序。
- en: The history of C#
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#的历史
- en: C# development started at Microsoft in the late 1990s by a team led by Anders
    Hejlsberg. Initially, it was called **Cool**, but when the .NET project was first
    publicly announced in the summer of 2002, the language was renamed C#. The use
    of the sharp suffix was intended to denote that the language is an increment of
    C++, which, along with Java, Delphi, and Smalltalk, acted as an inspiration for
    the CLI and the C# language design.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: C#的开发始于1990年代末的微软团队，由Anders Hejlsberg领导。最初它被称为Cool，但当.NET项目在2002年夏天首次公开宣布时，语言被重新命名为C#。使用井号后缀的用意是表示该语言是C++的一个增量，C++与Java、Delphi和Smalltalk一起，为CLI和C#语言设计提供了灵感。
- en: 'The first version of C#, called **1.0**, was made available in 2002 bundled
    with .NET Framework 1.0 and Visual Studio .NET 2002\. Since then, major and minor
    increments of the language have been released together with new versions of .NET
    Framework and Visual Studio. The following table lists all of the versions and
    some of the key features for each of these releases:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: C#的第一个版本称为**1.0**，于2002年与.NET Framework 1.0和Visual Studio .NET 2002捆绑发布。从那时起，随着新版本的.NET
    Framework和Visual Studio的发布，语言的主要和次要增量版本也相继发布。以下表格列出了所有版本以及每个版本的一些关键功能：
- en: '![](img/Chapter_1Table_1_01.jpg)![](img/Chapter_1Table_1_03.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Chapter_1Table_1_01.jpg)![](img/Chapter_1Table_1_03.jpg)'
- en: The latest version of the language at the time of writing, 8.0, is being released
    with .NET Core 3.0\. Although most features will also work in projects targeting
    .NET Framework, some of them will not because they require changes in the runtime,
    which is something Microsoft will no longer do as .NET Framework is being deprecated
    in favor of .NET Core.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，最新版本的语言是8.0，它将与.NET Core 3.0一起发布。虽然大多数功能也适用于针对.NET Framework的项目，但其中一些功能不适用，因为它们需要对运行时进行更改，而微软将不再这样做，因为.NET
    Framework正在被淘汰，取而代之的是.NET Core。
- en: Now that you have an overview of the evolution of the C# language over time,
    let's start looking at the platforms that the language is targeting.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了C#语言随时间的演变概况，让我们开始看一下语言所针对的平台。
- en: Understanding the CLI
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解CLI
- en: 'The CLI is a specification that describes how a runtime environment can be
    used on different computer platforms without being rewritten for specific architectures.
    It is developed by Microsoft and standardized by ECMA and ISO. The following diagram
    shows the high-level functionality of the CLI:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CLI是一项规范，描述了运行时环境如何在不同计算机平台上使用，而无需为特定架构重新编写。它由微软开发，并由ECMA和ISO标准化。以下图示显示了CLI的高级功能：
- en: '![Figure 1.1 – Diagram of the high-level functionality of the CLI'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 - CLI的高级功能图示'
- en: '](img/Figure_1.1_B12346.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.1_B12346.jpg)'
- en: Figure 1.1 – Diagram of the high-level functionality of the CLI
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 - CLI的高级功能图示
- en: The CLI enables programs written in a variety of programming languages (that
    are CLS-compliant) to be executed on any operating system and with a single runtime.
    The CLI specifies a common language, called the **Common Language Specification
    (CLS)**, a common set of data types that any language must support, called the
    **Common Type System**, and other things such as how exceptions are handled and
    how the state is managed. The various aspects specified by the CLI are described
    in more detail in the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: CLI使得用各种编程语言（符合CLS的）编写的程序可以在任何操作系统上以及单个运行时上执行。CLI指定了一个通用语言，称为**公共语言规范（CLS）**，任何语言必须支持的一组通用数据类型，称为**公共类型系统**，以及其他一些内容，例如异常处理和状态管理方式。CLI指定的各个方面在以下各节中有更详细的描述。
- en: Information box
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 信息框
- en: Because of the limited scope of this chapter, a deep dive into the specification
    is not possible. If you want more information about the CLI, you can visit the
    ISO site at [https://www.iso.org/standard/58046.html](https://www.iso.org/standard/58046.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章的范围有限，深入研究规范是不可能的。如果您想了解更多关于CLI的信息，可以访问ISO网站[https://www.iso.org/standard/58046.html](https://www.iso.org/standard/58046.html)。
- en: There are several implementations of the CLI and among these, the most important
    ones are .NET Framework, .NET Core, and Mono/Xamarin.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CLI有几种实现，其中最重要的是.NET Framework、.NET Core和Mono/Xamarin。
- en: Common Type System (CTS)
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共类型系统（CTS）
- en: 'The CTS is a component of the CLI that describes how type definitions and values
    are represented and memory is intended to facilitate the sharing of data between
    programming languages. The following are some of the characteristics and functions
    of the CTS:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CTS是CLI的一个组成部分，描述了类型定义和值的表示以及内存的用途，旨在促进数据在编程语言之间的共享。以下是CTS的一些特点和功能：
- en: It enables cross-platform integration, type safety, and high-performance code
    execution.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它实现了跨平台集成、类型安全和高性能代码执行。
- en: It provides an object-oriented model that supports the complete implementation
    of many programming languages.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个支持许多编程语言完整实现的面向对象模型。
- en: It provides rules for languages to ensure that objects and data types of objects
    written in different programming languages can interact with each other.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为语言提供规则，以确保不同编程语言中编写的对象和数据类型可以相互交互。
- en: It defines rules for type visibility and access to members.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它定义了类型可见性和对成员的访问规则。
- en: It defines rules for type inheritance, virtual methods, and object lifetime.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它定义了类型继承、虚拟方法和对象生命周期的规则。
- en: 'The CTS supports two categories of types:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: CTS支持两类类型：
- en: '**Value types**: These contain their data directly and have copy semantics,
    which means when an object of such a type is copied its data is copied.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值类型**：这些类型直接包含其数据，并具有复制语义，这意味着当此类型的对象被复制时，其数据也被复制。'
- en: '**Reference types**: These contain references to the memory address where the
    data is stored. When an object of a reference type is copied, the reference is
    copied and not the data it points to.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用类型**：这些类型包含对数据存储的内存地址的引用。当引用类型的对象被复制时，复制的是引用而不是它指向的数据。'
- en: Although it is an implementation detail, value types are usually stored on the
    stack and reference types on the heap. Conversion between value types and a reference
    type is possible and known as **boxing**, while the other way around is called
    **unboxing**. These concepts will be explained in further detail in the next chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个实现细节，值类型通常存储在堆栈上，引用类型存储在堆上。值类型和引用类型之间的转换是可能的，称为**装箱**，而反之则称为**拆箱**。这些概念将在下一章中进一步详细解释。
- en: Common Language Specification (CLS)
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共语言规范（CLS）
- en: The CLS comprises a set of rules that any language that targets the CLI needs
    to adhere to, to be able to interoperate with other CLS-compliant languages. CLS
    rules fall into the broader rules of the CTS and therefore it can be said that
    the CLS is a subset of CTS. All of the rules of CTS apply to the CLS unless the
    CLS rules are stricter. Language constructs that make it impossible to easily
    verify the type safety of the code were excluded from the CLS so that all languages
    that work with the CLS can produce verifiable code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CLS包括一组规则，任何针对CLI的语言都需要遵守这些规则，以便与其他符合CLS的语言进行互操作。CLS规则属于CTS的更广泛规则，因此可以说CLS是CTS的子集。除非CLS规则更严格，否则所有CTS规则都适用于CLS。使代码的类型安全性难以验证的语言构造被排除在CLS之外，以便所有与CLS一起工作的语言都可以生成可验证的代码。
- en: 'The relationship between the CTS and CLS as well as the programming languages
    targeting the CLI is conceptually shown in the following diagram:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CTS与CLS之间的关系以及针对CLI的编程语言在以下图表中概念上显示：
- en: '![Figure 1.2 – A diagram showing the conceptual relationship between the CTS
    and CLS and the programming languages that target the CLI'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 - 显示CTS和CLS之间的概念关系以及针对CLI的编程语言'
- en: '](img/Figure_1.2_B12346.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.2_B12346.jpg)'
- en: Figure 1.2 – A diagram showing the conceptual relationship between the CTS and
    CLS and the programming languages that target the CLI
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 - 显示CTS和CLS之间的概念关系以及针对CLI的编程语言
- en: Components built using only the rules of the CLS are called **CLS-compliant**.
    An example of such components is the framework libraries that need to work across
    all of the languages supported on .NET.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用CLS规则构建的组件称为**CLS兼容**。这样的组件的一个例子是需要在.NET上支持的所有语言中工作的框架库。
- en: Common Intermediate Language (CIL)
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共中间语言（CIL）
- en: CIL is a platform-neutral intermediate language (formerly called **Microsoft
    Intermediate Language** or **MSIL**) that represents the intermediate language
    binary instruction set defined by the CLI. It is a stack-based object-oriented
    assembly language that represents the code in byte-code format.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: CIL是一个平台中立的中间语言（以前称为**Microsoft中间语言**或**MSIL**），代表了CLI定义的中间语言二进制指令集。它是一种基于堆栈的面向对象的汇编语言，代表了以字节码格式的代码。
- en: Once the source code of an application is compiled, the compiler translates
    it into the CIL bytecode and produces a CLI assembly. When the CLI assembly is
    executed, the bytecode is passed through the **Just-In-Time** compiler to generate
    native code, which is then executed by the computer's processor. The CPU and the
    platform-independent nature of the CIL make it possible that the code is executed
    on any environment supporting the CLI.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序的源代码被编译，编译器将其转换为CIL字节码并生成CLI程序集。当执行CLI程序集时，字节码通过**即时编译器**传递，生成本机代码，然后由计算机的处理器执行。CIL的CPU和平台无关性使得代码可以在支持CLI的任何环境上执行。
- en: 'To help us to understand the CIL, let''s look at an example. The following
    listing shows a very simple C# program that prints a `Hello, World!` message to
    the console:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们理解CIL，让我们看一个例子。以下列表显示了一个非常简单的C#程序，它向控制台打印“Hello, World!”消息：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It is possible to view the content of the assembly produced by the compiler
    using various utility tools, such as `ildasm.exe`, which comes with .NET Framework,
    or ILSpy, which is an open source .NET assembly browser and decompiler (available
    at [http://www.ilspy.net/](http://www.ilspy.net/)). The `ildasm.exe` file shows
    a visual representation of the program and its components, such as classes and
    members:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用各种实用工具查看编译器生成的程序集的内容，例如.NET Framework附带的`ildasm.exe`或ILSpy，后者是一个开源的.NET程序集浏览器和反编译器（可在[http://www.ilspy.net/](http://www.ilspy.net/)上找到）。`ildasm.exe`文件显示了程序及其组件（如类和成员）的可视化表示：
- en: '![Figure 1.3 – A screenshot of the ildasm tool showing the content of an assembly'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 - ildasm工具显示程序集内容的屏幕截图'
- en: '](img/Figure_1.3_B12346.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.3_B12346.jpg)'
- en: Figure 1.3 – A screenshot of the ildasm tool showing the content of an assembly
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 - ildasm工具显示程序集内容的屏幕截图
- en: 'You can also see the content of the manifest (which includes assembly metadata)
    as well as the CIL code for each method if you double-click on it. The following
    screenshot shows the disassembled code of the `Main` method:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果双击它，还可以看到清单的内容（包括程序集元数据）以及每个方法的CIL代码。以下屏幕截图显示了“Main”方法的反汇编代码：
- en: '![Figure 1.4 – A screenshot of the ildasm tool showing the IL code of the Main
    method'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4 - ildasm工具显示Main方法的IL代码的屏幕截图'
- en: '](img/Figure_1.4_B12346.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.4_B12346.jpg)'
- en: Figure 1.4 – A screenshot of the ildasm tool showing the IL code of the Main
    method
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 - ildasm工具显示Main方法的IL代码的屏幕截图
- en: 'A human-readable dump of the CIL code is also available. This starts with the
    manifest and continues with the class member''s declarations. A partial listing
    of the CIL code for the preceding program is shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CIL代码的可读性转储也是可用的。这从清单开始，然后继续类成员的声明。以下是前面程序的CIL代码的部分列表：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An explanation of the code here is beyond the scope of this chapter, but you
    can probably identify at a glance parts of it such as classes, methods, and instructions
    executed in each method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里对代码的解释超出了本章的范围，但你可能一眼就能识别出其中的部分，比如类、方法以及每个方法中执行的指令。
- en: Virtual Execution System (VES)
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟执行系统（VES）
- en: VES is a part of the CLI that represents a runtime system that provides the
    environment for executing the managed code. It has several built-in services to
    support the execution of code and handling of exceptions, among other things.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: VES是CLI的一部分，代表提供执行托管代码的环境的运行时系统。它具有几个内置服务，以支持代码的执行和异常处理等功能。
- en: The Common Language Runtime is .NET Framework's implementation of the Virtual
    Execution System. Other implementations of the CLI provide their own VES implementations.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 公共语言运行时是.NET Framework对虚拟执行系统的实现。CLI的其他实现提供了它们自己的VES实现。
- en: The .NET family of frameworks
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET框架家族
- en: .NET is a general-purpose development platform developed by Microsoft for writing
    a variety of types of applications for desktop, cloud, and mobile. .NET Framework
    was the first implementation of the CLI but, over time, a series of other frameworks
    have been created, such as .NET Micro Framework, .NET Native, and Silverlight.
    While .NET Framework works on Windows, other current implementations, such as
    .NET Core and Mono/Xamarin, are cross-platform and run on other operating systems,
    such as Linux, macOS, iOS, or Android.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: .NET是由微软开发的通用开发平台，用于编写各种类型的桌面、云和移动应用程序。.NET Framework是CLI的第一个实现，但随着时间的推移，已经创建了一系列其他框架，如.NET
    Micro Framework、.NET Native和Silverlight。虽然.NET Framework适用于Windows，但其他当前的实现，如.NET
    Core和Mono/Xamarin，是跨平台的，可以在其他操作系统上运行，如Linux、macOS、iOS或Android。
- en: 'The following screenshot shows the main characteristics of the current top
    .NET frameworks. .NET Framework is intended for developing .NET applications for
    Windows and is distributed with the operating system. .NET Core, which is cross-platform
    and open source, is optimized for modern application requirements and developer
    workflows and is distributed with the application. Xamarin, which uses a Mono-based
    runtime, is also cross-platform and open source. It is intended for developing
    mobile applications for iOS, macOS, Android, and Windows, and is distributed with
    the application:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了当前顶级.NET框架的主要特征。.NET Framework用于开发Windows的.NET应用程序，并随操作系统分发。.NET Core是跨平台和开源的，针对现代应用程序需求和开发人员工作流程进行了优化，并随应用程序分发。Xamarin使用基于Mono的运行时，也是跨平台和开源的。它用于开发iOS、macOS、Android和Windows的移动应用程序，并随应用程序分发：
- en: '![Figure 1.5 – A diagram with the main characteristic of the most important
    .NET frameworks'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5 - 具有最重要的.NET框架主要特征的图表'
- en: '](img/Figure_1.5_B12346.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.5_B12346.jpg)'
- en: Figure 1.5 – A diagram with the main characteristic of the most important .NET
    frameworks
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 - 具有最重要的.NET框架主要特征的图表
- en: 'All of these implementations are based on a common infrastructure that includes
    languages, compilers, and runtime components and supports a variety of application
    models, some of which are shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些实现都基于一个共同的基础设施，包括语言、编译器和运行时组件，并支持各种应用模型，其中一些显示在以下截图中：
- en: '![Figure 1.6 – A high-level diagram of the .NET frameworks infrastructure and
    the application models they support'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 - .NET框架基础设施和它们支持的应用模型的高级图表'
- en: '](img/Figure_1.6_B12346.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.6_B12346.jpg)'
- en: Figure 1.6 – A high-level diagram of the .NET frameworks infrastructure and
    the application models they support
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 - .NET框架基础设施和它们支持的应用模型的高级图表
- en: Here, you can see that each framework resides on top of the common infrastructure
    and provides a set of base libraries as well as different application models.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到每个框架都位于共同基础设施的顶部，并提供一组基本库以及不同的应用模型。
- en: .NET Framework
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET框架
- en: .NET Framework was the first implementation of the CLI. It is the primary development
    platform for Windows Server and client developers. It contains a large class library
    that supports many types of applications. The framework is distributed as a part
    of the operating system and as a result, new versions are serviced through **Windows
    Update**, although standalone installers are also available. Initially, .NET Framework
    was proprietary software developed by Microsoft. In recent years, parts of .NET
    Framework have been open-sourced.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: .NET框架是CLI的第一个实现。它是Windows服务器和客户端开发人员的主要开发平台。它包含一个支持许多类型应用程序的大型类库。该框架作为操作系统的一部分分发，因此新版本通过**Windows
    Update**进行更新，尽管也提供独立的安装程序。最初，.NET框架是由微软开发的专有软件。近年来，.NET框架的部分内容已经开源。
- en: 'The following table shows the history of .NET Framework, as well as the major
    features available in each release:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了.NET框架的历史，以及每个版本中可用的主要功能：
- en: '![](img/Chapter_1Table_2_01.jpg)![](img/Chapter_1Table_2_02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Chapter_1Table_2_01.jpg)![](img/Chapter_1Table_2_02.jpg)'
- en: In the future, Microsoft intends to unify all .NET frameworks into a single
    one. At the time of writing this book, this is planned to be named .NET 5.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，微软打算将所有.NET框架统一为一个。在撰写本书时，计划将其命名为.NET 5。
- en: '.NET Framework includes the **Common Language Runtime** (**CLR**), which is
    the execution engine of the framework that provides services such as memory management,
    type safety, garbage collection, exception handling, thread management, and others.
    It also includes an implementation of the CLI foundational standard libraries.
    The following is a list of the components of the standard libraries (although
    not all of them):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: .NET框架包括**公共语言运行时**（**CLR**），它是框架的执行引擎，提供诸如内存管理、类型安全、垃圾回收、异常处理、线程管理等服务。它还包括CLI基础标准库的实现。以下是标准库的组件列表（尽管不是全部）：
- en: '**Base Class Library** (**BCL**): It provides types to represent the CLI built-in
    types, simple file access, custom attributes, string handling, formatting, collections,
    streams, and others.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础类库**（**BCL**）：它提供用于表示CLI内置类型、简单文件访问、自定义属性、字符串处理、格式化、集合、流等的类型。'
- en: '**Runtime Infrastructure Library**: It provides services to dynamically load
    types from a stream and other services that allow the compiler to target the CLI.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时基础设施库**：它提供从流中动态加载类型以及其他允许编译器针对CLI的服务。'
- en: '**Reflection Library**: It provides services that make it possible to examine
    the structure of types at runtime, instantiate objects, and invoke methods.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反射库**：它提供使得在运行时检查类型结构、实例化对象和调用方法成为可能的服务。'
- en: '**Network Library**: It provides networking services.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络库**：它提供网络服务。'
- en: '**Extended Numerics Library**: It provides support for floating-point and extended-precision
    data types.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展数值库**：它提供对浮点和扩展精度数据类型的支持。'
- en: '**Parallel Library**: It provides parallelism in simple forms.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行库**：它提供简单形式的并行性。'
- en: Apart from these libraries, the `System.*` or `Microsoft.*` namespaces.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些库，还有`System.*`或`Microsoft.*`命名空间。
- en: A key aspect of developing in C# for the .NET platform is how memory is managed.
    In general, developers do not have to worry about the lifetime of objects and
    the disposal of memory. Memory management is automatically done by the CLR through
    the **Garbage Collector** (**GC**). The GC handles the allocation of objects on
    the heap and the disposal of memory when heap objects are no longer used.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET平台上开发C#的一个关键方面是内存管理。一般来说，开发人员不必担心对象的生命周期和内存的释放。内存管理由CLR通过**垃圾回收器**（**GC**）自动完成。GC处理堆上对象的分配和在堆对象不再使用时的内存释放。
- en: The garbage collection is a *non-deterministic process* because it happens on
    a per-need basis and not at some deterministic moments. A detailed description
    of the way the garbage collection works is provided in [*Chapter 9*](B12346_09_Final_JC_ePub.xhtml#_idTextAnchor173),
    *Resource Management*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾回收是一个*非确定性的过程*，因为它是根据需要进行的，而不是在某些确定的时刻进行的。有关垃圾回收工作方式的详细描述，请参阅[*第9章*](B12346_09_Final_JC_ePub.xhtml#_idTextAnchor173)，*资源管理*。
- en: .NET Core
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core
- en: .NET Core is a new implementation of the CLI that is cross-platform, open source,
    and modular. It is intended for developing a variety of applications, such as
    web apps, micro-services, libraries, or console apps that run on Windows, Linux,
    and macOS. The .NET Core framework is packaged using NuGet; as a result, it is
    either compiled directly into an application or put into a folder inside the application.
    Therefore, .NET Core applications distribute the framework components directly,
    although a cache system for a centralized deployment, called **runtime package
    store**, is also available starting with version 2.0.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core是CLI的新实现，它是跨平台的、开源的和模块化的。它旨在开发各种应用程序，如运行在Windows、Linux和macOS上的Web应用程序、微服务、库或控制台应用程序。.NET
    Core框架使用NuGet打包；因此，它要么直接编译到应用程序中，要么放入应用程序内的文件夹中。因此，.NET Core应用程序直接分发框架组件，尽管从2.0版本开始，也提供了一个用于集中部署的缓存系统，称为**运行时包存储**。
- en: The implementation of the VES for .NET Core is called **CoreCLR**. Similarly,
    the implementation of the CLI foundational standard libraries is called **CoreFX**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core的VES实现称为**CoreCLR**。同样，CLI基础标准库的实现称为**CoreFX**。
- en: ASP.NET Core is a part of .NET Core but also runs on the .NET Framework CLR.
    However, an ASP.NET Core app is cross-platform only when targeting .NET Core.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core是.NET Core的一部分，但也可以在.NET Framework CLR上运行。但是，当目标是.NET Core时，ASP.NET
    Core应用程序才是跨平台的。
- en: With the release of version 3.0 in September 2019, developers can create web
    apps, micro-services, desktop applications, machine learning, and AI applications,
    IoT applications, libraries, and console applications using .NET Core.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 随着2019年9月发布的3.0版本，开发人员可以使用.NET Core创建Web应用程序、微服务、桌面应用程序、机器学习和人工智能应用程序、物联网应用程序、库和控制台应用程序。
- en: You will learn more about .NET Core in [*Chapter 16*](B12346_16_Final_JC_ePub.xhtml#_idTextAnchor296),
    *C# in Action with .NET Core 3*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在[*第16章*](B12346_16_Final_JC_ePub.xhtml#_idTextAnchor296)中了解更多关于.NET Core的信息，*使用.NET
    Core 3进行C#编程*。
- en: Xamarin
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin
- en: Xamarin is a CLI implementation based on **Mono**, which is a cross-platform,
    open source .NET framework. In general, Mono APIs followed the progress of .NET
    Framework and not .NET Core. The framework is intended for writing mobile applications
    that can run on iOS, Android, macOS, and Windows devices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin是基于**Mono**的CLI实现，它是一个跨平台的开源.NET框架。一般来说，Mono API遵循了.NET Framework的进展，而不是.NET
    Core。该框架旨在编写可以在iOS、Android、macOS和Windows设备上运行的移动应用程序。
- en: Applications developed with Xamarin are *native*, which provides similar performance
    to those developed with Objective-C or Swift for iOS and Java or Kotlin for Android.
    Xamarin also provides facilities to directly invoke Objective-C, Java, C, and
    C++ libraries.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin开发的应用程序是*本机*的，提供了与使用Objective-C或Swift开发的iOS和Java或Kotlin开发的Android应用程序类似的性能。Xamarin还提供了直接调用Objective-C、Java、C和C++库的功能。
- en: Xamarin applications are written in C# and use the .NET Base Class Library.
    They can share most of the code, with only a small portion needed to be platform-specific.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin应用程序是用C#编写的，并使用.NET基类库。它们可以共享大部分代码，只需要少量特定于平台的代码。
- en: Detailed information about Xamarin is beyond the scope of this book. If you
    want to learn more about this implementation, you should use additional resources.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Xamarin的详细信息超出了本书的范围。如果您想了解更多关于这个实现的信息，您应该使用其他资源。
- en: Assemblies in .NET
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET中的程序集
- en: An assembly is a basic unit for deployment, versioning, and security. Assemblies
    come in two forms, either as an `.exe`) or a `.dll`). An assembly is a collection
    of types, resources, and meta-information that forms a logical unit of functionality.
    Assemblies are loaded into memory only if needed. For .NET Framework applications,
    assemblies could either be located in the application private folder or shared
    in the Global Assembly Cache, provided they are strongly-named. For .NET Core
    applications, this latter solution is not available.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 程序集是部署、版本控制和安全性的基本单位。程序集有两种形式，要么是`.exe`，要么是`.dll`。程序集是类型、资源和元信息的集合，形成一个逻辑功能单元。只有在需要时，程序集才会加载到内存中。对于.NET
    Framework应用程序，程序集可以位于应用程序私有文件夹中，也可以共享在全局程序集缓存中，只要它们是强命名的。对于.NET Core应用程序，后一种解决方案不可用。
- en: 'Each assembly contains a manifest that contains the following information:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序集都包含一个包含以下信息的清单：
- en: The identity of the assembly (such as name and version)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序集的身份（如名称和版本）
- en: A file table describing the files that make up the assembly, such as other assemblies
    or resources (such as images)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件表描述了组成程序集的文件，例如其他程序集或资源（如图像）
- en: A list of assembly references that contains the external dependencies that the
    application needs
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含应用程序所需的外部依赖项的程序集引用列表
- en: 'The identity of an assembly is composed of several parts:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一个程序集的身份由几个部分组成：
- en: The **name** of the file where the name should be compliant with the Windows
    Portable Executable file format
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件的**名称**，其中名称应符合Windows可移植可执行文件格式
- en: A `major.minor.build.revision`, such as 1.12.3.0
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`major.minor.build.revision`，例如1.12.3.0
- en: The **culture** that should be locale-agnostic except in the case of satellite
    assemblies (which are locale-aware assemblies)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文化**，除了卫星程序集（这些是区域感知的程序集）外，应该是与区域无关的'
- en: The **public key token**, which is a 64-bit hash of the private key used to
    sign the assembly; signed assemblies have strong names that are meant to provide
    a unique name
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公钥标记**，它是用于签署程序集的私钥的64位哈希；签名程序集具有旨在提供唯一名称的强名称'
- en: You will learn more about assemblies in [*Chapter 11*](B12346_11_Final_SK_ePub.xhtml#_idTextAnchor200),
    *Reflection and Dynamic Programming*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在[*第11章*](B12346_11_Final_SK_ePub.xhtml#_idTextAnchor200)中了解更多关于程序集的信息，*反射和动态编程*。
- en: Global Assembly Cache (GAC)
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局程序集缓存（GAC）
- en: As mentioned in the preceding section, .NET Framework assemblies could either
    be stored *locally*, in the application folder, or in *GAC*. This is a machine-wide
    code cache that enables the sharing of assemblies between applications. Since
    the release of .NET Framework 4, the default location for the GAC is `%windir%\Microsoft.NET\assembly`;
    however, previously, the location was `%windir%\assembly`. GAC also enables storing
    multiple versions of the same assembly, which is not actually possible in a private
    folder, since you cannot store multiple files with the same name in the same folder.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，.NET Framework程序集可以存储在*本地*，即应用程序文件夹中，也可以存储在*GAC*中。这是一个机器范围的代码缓存，可以在应用程序之间共享程序集。自.NET
    Framework 4发布以来，GAC的默认位置是`%windir%\Microsoft.NET\assembly`；然而，以前的位置是`%windir%\assembly`。GAC还可以存储同一程序集的多个版本，而在私有文件夹中实际上是不可能的，因为您不能在同一文件夹中存储多个同名文件。
- en: To deploy an assembly to the GAC, you could use the Windows SDK utility tool
    called `gacutil.exe` or an installer that is able to work with the GAC. However,
    an assembly must have a strong name to be deployed to the GAC. A `sn.exe`).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要将程序集部署到GAC，您可以使用名为`gacutil.exe`的Windows SDK实用工具或能够与GAC一起工作的安装程序。但是，程序集必须具有强名称才能部署到GAC。一个`sn.exe`）。
- en: Note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more details about how to sign an assembly, please refer to the following
    document, which describes how to sign an assembly with a strong name: [https://docs.microsoft.com/en-us/dotnet/framework/app-domains/how-to-sign-an-assembly-with-a-strong-name](https://docs.microsoft.com/en-us/dotnet/standard/assembly/sign-strong-name).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何对程序集进行签名的更多详细信息，请参阅以下文档，其中描述了如何使用强名称对程序集进行签名：[https://docs.microsoft.com/en-us/dotnet/framework/app-domains/how-to-sign-an-assembly-with-a-strong-name](https://docs.microsoft.com/en-us/dotnet/standard/assembly/sign-strong-name)。
- en: When you add an assembly to GAC, integrity checks are performed on all of the
    files contained by the assembly. This is done to ensure that the assembly has
    not been tampered with. The cryptographic signing ensures that any change to any
    of the files in the assembly invalidates the signature and only someone that has
    access to the private key can resign the assembly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序集添加到GAC时，将对程序集中包含的所有文件执行完整性检查。这样做是为了确保程序集没有被篡改。加密签名确保对程序集中任何文件的更改都会使签名无效，只有拥有私钥访问权限的人才能重新对程序集进行签名。
- en: Runtime package store
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时包存储
- en: The GAC is not used for .NET Core assemblies. These are assemblies that can
    run on any platform and not just Windows. Prior to .NET Core 2.0, the only option
    for deployment was the application folder. Since version 2.0, however, it is possible
    to package and deploy applications against a known set of packages that exist
    in the target environment. This enables faster deployment and lower disk space
    requirements. Typically, this store is available at `/usr/local/share/dotnet/store`
    on macOS and Linux and `C:/Program Files/dotnet/store` on Windows.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: GAC不用于.NET Core程序集。这些程序集可以在任何平台上运行，而不仅仅是Windows。在.NET Core 2.0之前，部署的唯一选项是应用程序文件夹。然而，自2.0版本以来，可以将应用程序打包并部署到目标环境中已知的一组包中。这样可以实现更快的部署和更低的磁盘空间要求。通常，此存储库在macOS和Linux上可用于`/usr/local/share/dotnet/store`，在Windows上可用于`C:/Program
    Files/dotnet/store`。
- en: The packages available in the runtime package store are listed in a target manifest
    file that is used while publishing an application. This file has a format that
    is compatible with the project file format (`.csproj`).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时包存储中可用的包列在目标清单文件中，该文件在发布应用程序时使用。此文件的格式与项目文件格式（`.csproj`）兼容。
- en: 'Detailing the targeting process is beyond the scope of this chapter, but you
    can learn more about the runtime package store by visiting the following link:
    [https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 详细介绍定位过程超出了本章的范围，但您可以通过访问以下链接了解有关运行时包存储的更多信息：[https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store)。
- en: Understanding the basic structure of a C# program
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解C#程序的基本结构
- en: So far, we have learned about the basics of C# and the .NET runtime. In this
    section, we will write a simple C# program so that we can have a short introduction
    to some of the key elements of a simple program.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了C#和.NET运行时的基础知识。在本节中，我们将编写一个简单的C#程序，以便简要介绍一些简单程序的关键要素。
- en: 'Before writing a program, you must create a project. For this purpose, you
    should use Visual Studio 2019; alternatively, you could use any other version
    for most of the content of this book. The source code accompanying this book was
    written in Visual Studio 2019 using .NET Core projects. When creating a new project,
    select `chapter_01`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写程序之前，您必须创建一个项目。为此，您应该使用Visual Studio 2019；或者，您可以在本书的大部分内容中使用任何其他版本。本书附带的源代码是在Visual
    Studio 2019中使用.NET Core项目编写的。创建新项目时，选择`chapter_01`：
- en: '![Figure 1.7 – Select the Console App (.NET Core) template when creating'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 - 在创建时选择控制台应用程序(.NET Core)模板'
- en: a new project in Visual Studio
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建一个新项目
- en: '](img/Figure_1.7_B12346.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.7_B12346.jpg)'
- en: Figure 1.7 – Select the Console App (.NET Core) template when creating a new
    project in Visual Studio
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 - 在Visual Studio中创建新项目时选择控制台应用程序(.NET Core)模板
- en: 'A project with the following content will be automatically created for you:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将自动为您创建具有以下内容的项目：
- en: '![Figure 1.8 – Screenshot of Visual Studio and the code generated for the selected
    template'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.8 - Visual Studio的屏幕截图和所选模板生成的代码'
- en: '](img/Figure_1.8_B12346.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.8_B12346.jpg)'
- en: Figure 1.8 – Screenshot of Visual Studio and the code generated for the selected
    template
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 - Visual Studio的屏幕截图和所选模板生成的代码
- en: 'This code represents the minimum a C# program must contain: a single file with
    a single class having a single method called `Main`. You can compile and run the
    project and the message **Hello World!** will be displayed to the console. However,
    to better understand it, let''s look at the actual C# program.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码代表了一个C#程序必须包含的最小内容：一个包含一个名为`Main`的方法的单个文件。您可以编译和运行该项目，控制台将显示消息**Hello World!**。然而，为了更好地理解它，让我们看一下实际的C#程序。
- en: The first line of the program (`using System;`) declares the namespaces that
    we want to use in this program. A namespace contains types and the one used here
    is the core namespace of the base class library.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的第一行（`using System;`）声明了我们想在这个程序中使用的命名空间。命名空间包含类型，这里使用的是基类库的核心命名空间。
- en: On the following line, we define our own namespace, called `chapter_01`, which
    contains our code. A namespace is introduced with the `namespace` keyword. In
    this namespace, we define a single class called `Program`. A class is introduced
    with the `class` keyword. Furthermore, this class contains a single method called
    `Main`, with a single argument that is an array of strings called `args`. The
    code within namespaces, types (whether it's a class, struct, interface, or enum),
    and methods is always provided within curly braces `{}`. This method is the entry
    point of the program, which means it's where the execution of a program starts.
    A C# program must have one and only one `Main` method.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们定义了自己的命名空间，名为`chapter_01`，其中包含我们的代码。命名空间是用`namespace`关键字引入的。在这个命名空间中，我们定义了一个名为`Program`的类。类是用`class`关键字引入的。此外，这个类包含一个名为`Main`的方法，它有一个名为`args`的字符串数组参数。命名空间、类型（无论是类、结构、接口还是枚举）和方法中的代码总是用大括号`{}`提供。这个方法是程序的入口点，这意味着程序的执行从这里开始。一个C#程序必须有且只有一个`Main`方法。
- en: The `Main` method contains a single line of code. It uses the `System.Console.WriteLine`
    static method to print a text to the console. A static method is a method that
    belongs to a type and not an instance of the type, which means you do not call
    it through an object. The `Main` method is itself a static method, but furthermore,
    it is a special method. Every C# program must have a single static method called
    `Main`, which is considered the entry point of the program and the first to be
    called when the execution of the program begins.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main`方法包含一行代码。它使用`System.Console.WriteLine`静态方法将文本打印到控制台。静态方法是属于类型而不是类型的实例的方法，这意味着您不通过对象调用它。`Main`方法本身是一个静态方法，而且是一个特殊的方法。每个C#程序必须有一个名为`Main`的静态方法，它被认为是程序的入口点，在程序执行开始时首先被调用。'
- en: Throughout the next chapters, we will learn about namespaces, types, methods,
    and other key features of C#.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习命名空间、类型、方法和C#的其他关键特性。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked in short at the history of C#. We then explored the
    basic concepts behind the CLI and its constituents, such as CTS, CLS, CIL, and
    VES. Then, we looked at the .NET family of frameworks and briefly discussed .NET
    Framework, .NET Core, and Xamarin. We also talked about assemblies, the GAC (for
    .NET Framework) and the runtime package store (for .NET Core). Finally, we wrote
    our first C# program and looked at its structure.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了C#的历史。然后，我们探讨了CLI背后的基本概念及其组成部分，如CTS、CLS、CIL和VES。接着，我们了解了.NET框架家族，并简要讨论了.NET
    Framework、.NET Core和Xamarin。我们还谈到了程序集、GAC（针对.NET Framework）和运行时包存储（针对.NET Core）。最后，我们编写了我们的第一个C#程序，并了解了它的结构。
- en: This overview of the frameworks and the runtime will help you to understand
    the context of writing and executing a C# program and will provide a good background
    when we talk about more advanced features such as reflection, assembly loading,
    or look at the .NET Core framework.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些框架和运行时的概述将帮助您了解编写和执行C#程序的背景，并在我们讨论更高级功能（如反射、程序集加载）或研究.NET Core框架时提供良好的背景知识。
- en: In the next chapter, we will explore the basic data types and operators in C#
    and learn how to work with them.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨C#中的基本数据类型和运算符，并学习如何使用它们。
- en: Test what you learned
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你所学到的知识
- en: When was C# first released and what is the current version of the language?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C#是何时首次发布的，目前的语言版本是多少？
- en: What is the Common Language Infrastructure? What are its main components?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是公共语言基础设施？它的主要组成部分是什么？
- en: What is the Common Intermediate Language and how is it related to the Just-In-Time
    compiler?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是公共中间语言，它与即时编译器有什么关系？
- en: What tools can you use to disassembly and explore the assemblies produced by
    the compiler?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用什么工具来反汇编和探索编译器生成的程序集？
- en: What is the Common Language Runtime?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是公共语言运行时？
- en: What is the Base Class Library?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是基类库？
- en: What are currently the major .NET frameworks? Which one will no longer be developed?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前主要的.NET框架是什么？哪一个将不再开发？
- en: What is an assembly? What constitutes the identity of an assembly?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是程序集？程序集的标识包括什么？
- en: What is the Global Assembly Cache? What about the runtime package store?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是全局程序集缓存？运行时包存储又是什么？
- en: What is the minimum a C# program must contain to be executed?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个C#程序必须包含什么最少才能执行？
- en: '![](img/Chapter_1Table_1_02.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Chapter_1Table_1_02.png)'
