["```kt\n    <resources> \n\n      <style name=\"AppTheme\" \n        parent=\"Theme.AppCompat.Light.NoActionBar\"> \n        <item name=\"android:colorPrimary\">@color/colorPrimary</item> \n        <item name=\"android:statusBarColor\">@color/colorPrimary</item> \n        <item name=\"android:colorPrimaryDark\">\n         @color/colorPrimaryDark</item> \n        <item name=\"android:colorAccent\">@color/colorAccent</item> \n        <item name=\"android:textColor\">@android:color/black</item> \n      </style> \n\n    </resources> \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n    <resources> \n      <color name=\"colorPrimary\">#ff6600</color> \n      <color name=\"colorPrimaryDark\">#197734</color> \n      <color name=\"colorAccent\">#ffae00</color> \n    </resources> \n```", "```kt\n    <application \n    android:theme=\"@style/AppTheme\" \n```", "```kt\n    <android.support.design.widget.FloatingActionButton \n        android:backgroundTint=\"@color/colorPrimary\" \n        android:id=\"@+id/new_item\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:layout_alignParentBottom=\"true\" \n        android:layout_alignParentEnd=\"true\" \n        android:layout_margin=\"@dimen/button_margin\" /> \n```", "```kt\n    <color name=\"green\">#11c403</color> \n    <color name=\"green_dark\">#0e8c05</color> \n    <color name=\"white\">#ffffff</color> \n    <color name=\"white_transparent_40\">#64ffffff</color> \n    <color name=\"black\">#000000</color> \n    <color name=\"black_transparent_40\">#64000000</color> \n    <color name=\"grey_disabled\">#d5d5d5</color> \n    <color name=\"grey_text\">#444d57</color> \n    <color name=\"grey_text_transparent_40\">#64444d57</color> \n    <color name=\"grey_text_middle\">#6d6d6d</color> \n    <color name=\"grey_text_light\">#b9b9b9</color> \n    <color name=\"grey_thin_separator\">#f1f1f1</color> \n    <color name=\"grey_thin_separator_settings\">#eeeeee</color> \n    <color name=\"vermilion\">#f3494c</color> \n    <color name=\"vermilion_dark\">#c64145</color> \n    <color name=\"vermilion_transparent_40\">#64f3494c</color> \n    <color name=\"plum\">#121e2a</color> \n```", "```kt\n     <style name=\"simple_button\"> \n        <item name=\"android:textSize\">16sp</item> \n        <item name=\"android:textAllCaps\">false</item> \n        <item name=\"android:textColor\">@color/white</item> \n     </style> \n\n     <style name=\"simple_button_green\" parent=\"simple_button\"> \n        <item name=\"android:background\">\n        @drawable/selector_button_green</item> \n    </style> \n```", "```kt\n     <?xml version=\"1.0\" encoding=\"utf-8\"?> \n     <selector xmlns:android=\n      \"http://schemas.android.com/apk/res/android\"> \n\n      <item android:drawable=\"@color/grey_disabled\" \n       android:state_enabled=\"false\" /> \n      <item android:drawable=\"@color/green_dark\"\n       android:state_selected=\"true\" /> \n      <item android:drawable=\"@color/green_dark\"\n       android:state_pressed=\"true\" /> \n      <item android:drawable=\"@color/green\" /> \n\n     </selector> \n```", "```kt\n    style=\"@style/simple_button_green\"  \n```", "```kt\n        <style name=\"simple_button_grey\" parent=\"simple_button\"> \n         <item name=\"android:background\">\n          @drawable/selector_button_grey</item> \n        </style> \n\n        <style name=\"edit_text_transparent\"> \n          <item name=\"android:textSize\">14sp</item> \n          <item name=\"android:padding\">19dp</item> \n          <item name=\"android:textColor\">@color/white</item> \n          <item name=\"android:textColorHint\">@color/white</item> \n          <item name=\"android:background\">\n          @color/black_transparent_40</item> \n        </style> \n\n       <style name=\"edit_text_gery_text\"\n         parent=\"edit_text_transparent\"> \n         <item name=\"android:textAlignment\">textStart</item> \n         <item name=\"android:textColor\">@color/white</item> \n         <item name=\"android:background\">@color/grey_text_light</item> \n       </style> \n```", "```kt\n        <?xml version=\"1.0\" encoding=\"utf-8\"?> \n        <selector xmlns:android=\n         \"http://schemas.android.com/apk/res/android\"> \n\n         <item android:drawable=\"@color/grey_disabled\"  \n         android:state_enabled=\"false\" /> \n         <item android:drawable=\"@color/grey_text_middle\"  \n         android:state_selected=\"true\" /> \n         <item android:drawable=\"@color/grey_text_middle\"\n         android:state_pressed=\"true\" /> \n         <item android:drawable=\"@color/grey_text\" /> \n        </selector> \n```", "```kt\n        style=\"@style/edit_text_transparent\" \n```", "```kt\n        style=\"@style/edit_text_gery_text\"  \n```", "```kt\n        style=\"@style/simple_button_grey\" \n```", "```kt\n    abstract class BaseActivity : AppCompatActivity() { \n    companion object { \n      private var fontExoBold: Typeface? = null \n      private var fontExoRegular: Typeface? = null \n\n      fun applyFonts(view: View, ctx: Context) { \n        var vTag = \"\" \n        if (view.tag is String) { \n          vTag = view.tag as String \n        } \n        when (view) { \n          is ViewGroup -> { \n            for (x in 0..view.childCount - 1) { \n              applyFonts(view.getChildAt(x), ctx) \n            } \n          } \n          is Button -> { \n            when (vTag) { \n              ctx.getString(R.string.tag_font_bold) -> { \n                view.typeface = fontExoBold \n              } \n              else -> { \n                view.typeface = fontExoRegular \n              } \n             } \n            } \n            is TextView -> { \n              when (vTag) { \n                ctx.getString(R.string.tag_font_bold) -> { \n                view.typeface = fontExoBold \n                } \n                 else -> { \n                   view.typeface = fontExoRegular \n                 } \n                } \n              } \n              is EditText -> { \n                when (vTag) { \n                  ctx.getString(R.string.tag_font_bold) -> { \n                    view.typeface = fontExoBold \n                  } \n                 else -> { \n                   view.typeface = fontExoRegular \n                 } \n               } \n             } \n           } \n        } \n     } \n    ... \n    override fun onPostCreate(savedInstanceState: Bundle?) { \n        super.onPostCreate(savedInstanceState) \n        Log.v(tag, \"[ ON POST CREATE ]\") \n        applyFonts() \n    } \n    ... \n    protected fun applyFonts() { \n        initFonts() \n        Log.v(tag, \"Applying fonts [ START ]\") \n        val rootView = findViewById(android.R.id.content) \n        applyFonts(rootView, this) \n        Log.v(tag, \"Applying fonts [ END ]\") \n    } \n\n    private fun initFonts() { \n        if (fontExoBold == null) { \n            Log.v(tag, \"Initializing font [ Exo2-Bold ]\") \n            fontExoBold = Typeface.createFromAsset(assets, \"fonts/Exo2-\n            Bold.ttf\") \n        } \n        if (fontExoRegular == null) { \n            Log.v(tag, \"Initializing font [ Exo2-Regular ]\") \n            fontExoRegular = Typeface.createFromAsset(assets,\n            \"fonts/Exo2-Regular.ttf\") \n        } \n     }   \n    } \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n    <resources> \n      <string name=\"tag_font_regular\">FONT_REGULAR</string> \n      <string name=\"tag_font_bold\">FONT_BOLD</string> \n    </resources> \n    To apply it open styles.xml and add tag to simple_button style: \n    <item name=\"android:tag\">@string/tag_font_bold</item> \n```", "```kt\n    val color = ContextCompat.getColor(contex, R.color.plum) \n```", "```kt\n     val color = resources.getColor(R.color.plum) \n```", "```kt\n    pick_date.setTextColor(color) \n```", "```kt\n    val color = Color.parseColor(\"#ff0000\")  \n```", "```kt\n     val color = Color.RED \n```", "```kt\n    public static final int BLACK \n    public static final int BLUE \n    public static final int CYAN \n    public static final int DKGRAY \n    public static final int GRAY \n    public static final int GREEN \n    public static final int LTGRAY \n    public static final int MAGENTA \n    public static final int RED \n    public static final int TRANSPARENT \n    public static final int WHITE \n    public static final int YELLOW\n```", "```kt\n     Color red = Color.valueOf(1.0f, 0.0f, 0.0f); \n```", "```kt\n    val colorSpace = ColorSpace.get(ColorSpace.Named.NTSC_1953) \n    val color = Color.valueOf(1f, 1f, 1f, 1f, colorSpace) \n```", "```kt\n    counter.setTextColor( \n      ContextCompat.getColor(context, R.color.vermilion) \n    ) \n```", "```kt\n    <LinearLayout \n      android:background=\"@color/grey_text_light\" \n      android:layout_width=\"match_parent\" \n      android:layout_height=\"wrap_content\" \n      android:orientation=\"horizontal\" \n      android:weightSum=\"1\"> \n\n      ... \n\n     </LinearLayout> \n```", "```kt\n     <dimen name=\"button_corner\">10dp</dimen> \n```", "```kt\n     <color name=\"green2\">#208c18</color> \n     <color name=\"green_dark2\">#0b5505</color>  \n```", "```kt\n     <style name=\"simple_button_green\" parent=\"simple_button\"> \n        <item name=\"android:layout_margin\">5dp</item> \n        <item name=\"android:background\">\n        @drawable/selector_button_green</item> \n     </style> \n```", "```kt\n         <shape xmlns:android=\n           \"http://schemas.android.com/apk/res/android\"> \n            <gradient \n            android:angle=\"270\" \n            android:endColor=\"@color/green2\" \n            android:startColor=\"@color/green\" /> \n\n           <corners android:radius=\"@dimen/button_corner\" /> \n         </shape>  \n```", "```kt\n     <shape > \n       <gradient \n       android:angle=\"270\" \n       android:endColor=\"@color/green_dark2\" \n       android:startColor=\"@color/green_dark\" /> \n\n      <corners android:radius=\"@dimen/button_corner\" /> \n     </shape> \n```", "```kt\n         <shape xmlns:android=\n         \"http://schemas.android.com/apk/res/android\"> \n\n         <solid android:color=\"@color/grey_disabled\" /> \n         <corners android:radius=\"@dimen/button_corner\" /> \n         </shape> \n```", "```kt\n       <?xml version=\"1.0\" encoding=\"utf-8\"?> \n       <selector xmlns:android=\n       \"http://schemas.android.com/apk/res/android\"> \n\n       <item  \n       android:drawable=\"@drawable/rect_rounded_grey_disabled\"  \n       android:state_enabled=\"false\" /> \n\n       <item  \n       android:drawable=\"@drawable/rect_rounded_green_dark\"  \n       android:state_selected=\"true\" /> \n\n       <item  \n       android:drawable=\"@drawable/rect_rounded_green_dark\"  \n       android:state_pressed=\"true\" /> \n\n       <item  \n       android:drawable=\"@drawable/rect_rounded_green\" /> \n\n     </selector> \n```", "```kt\n        <?xml version=\"1.0\" encoding=\"utf-8\"?> \n        <alpha xmlns:android=\n        \"http://schemas.android.com/apk/res/android\" \n        android:duration=\"300\" \n        android:fromAlpha=\"0.0\" \n        android:interpolator=\"@android:anim/accelerate_interpolator\" \n        android:toAlpha=\"1.0\" /> \n```", "```kt\n         <?xml version=\"1.0\" encoding=\"utf-8\"?> \n         <alpha xmlns:android=\n         \"http://schemas.android.com/apk/res/android\" \n         android:duration=\"300\" \n         android:fillAfter=\"true\" \n         android:fromAlpha=\"1.0\" \n         android:interpolator=\"@android:anim/accelerate_interpolator\" \n         android:toAlpha=\"0.0\" /> \n         -  bottom_to_top: \n         <set xmlns:android=\n          \"http://schemas.android.com/apk/res/android\" \n         android:fillAfter=\"true\" \n         android:fillEnabled=\"true\" \n         android:shareInterpolator=\"false\"> \n\n         <translate \n         android:duration=\"900\" \n         android:fromXDelta=\"0%\" \n         android:fromYDelta=\"100%\" \n         android:toXDelta=\"0%\" \n         android:toYDelta=\"0%\" /> \n\n         </set> \n```", "```kt\n     <set  \n     android:fillAfter=\"true\" \n     android:fillEnabled=\"true\" \n     android:shareInterpolator=\"false\"> \n     <translate \n      android:duration=\"900\" \n      android:fromXDelta=\"0%\" \n      android:fromYDelta=\"-100%\" \n      android:toXDelta=\"0%\" \n      android:toYDelta=\"0%\" /> \n    </set> \n```", "```kt\n     <set  \n      android:fillAfter=\"true\" \n      android:fillEnabled=\"true\" \n      android:shareInterpolator=\"false\"> \n\n    <translate \n      android:duration=\"900\" \n      android:fromXDelta=\"0%\" \n      android:fromYDelta=\"0%\" \n      android:toXDelta=\"0%\" \n      android:toYDelta=\"-100%\" /> \n\n   </set> \n```", "```kt\n         <set xmlns:android=\n          \"http://schemas.android.com/apk/res/android\" \n           android:fillAfter=\"true\" \n           android:fillEnabled=\"true\" \n           android:shareInterpolator=\"false\"> \n\n        <translate \n          android:duration=\"900\" \n          android:fromXDelta=\"0%\" \n          android:fromYDelta=\"0%\" \n          android:toXDelta=\"0%\" \n          android:toYDelta=\"100%\" /> \n\n       </set> \n```", "```kt\n     android:background=\"@android:color/darker_gray\" \n```", "```kt\n     <LinearLayout \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:background=\"@color/black_transparent_40\" \n        android:orientation=\"vertical\"> \n\n      <LinearLayout \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:background=\"@color/black_transparent_40\" \n        android:orientation=\"vertical\"> \n\n      <android.support.v7.widget.Toolbar \n        android:id=\"@+id/toolbar\" \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"50dp\" \n        android:background=\"@color/colorPrimary\" \n        android:elevation=\"4dp\" /> \n\n```", "```kt\n     override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n        overridePendingTransition(R.anim.fade_in, R.anim.fade_out) \n        setContentView(getLayout()) \n        setSupportActionBar(toolbar) \n        Log.v(tag, \"[ ON CREATE ]\") \n\n     } \n```", "```kt\n    override fun onResume() { \n        super.onResume() \n        Log.v(tag, \"[ ON RESUME ]\") \n        val animation = getAnimation(R.anim.top_to_bottom) \n        findViewById(R.id.toolbar).startAnimation(animation) \n    } \n\n    override fun onPause() { \n        super.onPause() \n        Log.v(tag, \"[ ON PAUSE ]\") \n        val animation = getAnimation(R.anim.hide_to_top) \n        findViewById(R.id.toolbar).startAnimation(animation) \n\n    } \n```", "```kt\n     protected fun getAnimation(animation: Int): Animation =\n     AnimationUtils.loadAnimation(this, animation) \n```", "```kt\n     fun Activity.getAnimation(animation: Int): Animation =\n     AnimationUtils.loadAnimation(this, animation) \n```", "```kt\n     private fun animate(btn: FloatingActionButton, expand: Boolean =\n     true) { \n        btn.animate() \n                .setInterpolator(BounceInterpolator()) \n                .scaleX(if(expand){ 1.5f } else { 1.0f }) \n                .scaleY(if(expand){ 1.5f } else { 1.0f }) \n                .setDuration(2000) \n                .start() \n      } \n```", "```kt\n    btn?.setOnClickListener { \n\n    animate(btn) \n\n    ... \n\n    } \n```", "```kt\n    val builder = AlertDialog.Builder(this@ItemsFragment.context) \n                    .setTitle(R.string.choose_a_type) \n                    .setCancelable(true) \n                    .setOnCancelListener { \n                        animate(btn, false) \n                    } \n\n    .setItems( ... ) \n\n    ... \n\n    builder.show() \n```", "```kt\n     <android.support.design.widget.FloatingActionButton \n     ... \n     android:src=\"img/add\" \n     android:scaleType=\"centerInside\" \n     ... \n     /> \n```", "```kt\n     private fun animate(btn: FloatingActionButton, expand: Boolean =\n     true) { \n        val animation1 = ObjectAnimator.ofFloat(btn, \"scaleX\",\n        if(expand){ 1.5f } else { 1.0f }) \n        animation1.duration = 2000 \n        animation1.interpolator = BounceInterpolator() \n\n        val animation2 = ObjectAnimator.ofFloat(btn, \"scaleY\",\n        if(expand){ 1.5f } else { 1.0f }) \n        animation2.duration = 2000 \n        animation2.interpolator = BounceInterpolator() \n\n        val animation3 = ObjectAnimator.ofFloat(btn, \"alpha\",\n        if(expand){ 0.3f } else { 1.0f }) \n        animation3.duration = 500 \n        animation3.interpolator = AccelerateInterpolator() \n\n        val set = AnimatorSet() \n        set.play(animation1).with(animation2).before(animation3) \n        set.start() \n      } \n```"]