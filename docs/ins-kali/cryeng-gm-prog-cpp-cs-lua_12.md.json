["```cs\n    CryLog(\"MyMessage\");\n    ```", "```cs\n    CryLogAlways(\"This is always logged, unless log_verbosity is set to -1\");\n    ```", "```cs\n    CryWarning(VALIDATOR_MODULE_GAME, VALIDATOR_WARNING, \"My warning!\");\n    ```", "```cs\n    CryFatalError(\"Fatal error, shutting down!\");\n    ```", "```cs\n    CryComment(\"My note\");\n    ```", "```cs\nIPersistantDebug *pPersistantDebug = gEnv->pGame->GetIGameFramework()->GetIPersistantDebug();\n```", "```cs\npPersistantDebug->Begin(\"myPersistentDebug\", false);\n```", "```cs\npPersistantDebug->AddSphere(Vec3(0, 0, 10), 0.3f, ColorF(1, 0, 0),2.0f);\n```", "```cs\nDebug.DrawSphere(new Vec3(0, 0, 10), 0.3f, Color.Red, 2.0f);\n```", "```cs\nCRY_ASSERT(pPointer != nullptr)\n```", "```cs\nFUNCTION_PROFILER(GetISystem(), PROFILE_GAME);\n```", "```cs\nif (true)\n{\n  FRAME_PROFILER(\"MyCheck\", gEnv->pSystem, PROFILE_GAME);\n\n  auto myCharArray = new char[100000];\n  for(int i = 0; i < 100000; i++)\n    myCharArray[i] = 'T';\n\n  // Frame profiler section is now destroyed\n}\n```", "```cs\nusing CryEngine.Profiling;\n\npublic SpawnPoint()\n{\n  ReceiveUpdates = true;\n\n  m_frameProfiler = FrameProfiler.Create(\"SpawnPoint.OnUpdate\");\n}\n\npublic override void OnUpdate()\n{\n  var section = m_frameProfiler.CreateSection();\n\n  var stringArray = new string[10000];\n  for(int i = 0; i < 10000; i++)\n    stringArray[i] = \"is it just me or is it laggy in here\";\n\n  section.End();\n}\n\nFrameProfiler m_frameProfiler;\n```", "```cs\ngEnv->pConsole->Register(\"g_myVariable\", &m_myVariable, 3.0f, VF_CHEAT, \"My variable description!\");\n```", "```cs\nfloat m_myVariable;\n\nCVar.RegisterFloat(\"g_myCSharpCVar\", ref m_myVariable, \"My variable is awesome\");\n```", "```cs\n[default]\n; default of this CVarGroup\n= 3\n\ni_lighteffects = 1\ng_ragdollUnseenTime = 2\ng_ragdollMinTime = 13\ng_ragdollDistance = 30\n\n[1]\ng_ragdollMinTime = 5\ng_ragdollDistance = 10\n\n[2]\ng_ragdollMinTime = 8\ng_ragdollDistance = 20\n\n[3]\n\n[4]\ng_ragdollMinTime = 15\ng_ragdollDistance = 40\n```", "```cs\npublic void OnMyCSharpCommand(ConsoleCommandArgs e)\n{\n}\n\nConsoleCommand.Register(\"MyCSharpCommand\", OnMyCSharpCommand, \"C# CCommands are awesome.\");\n```", "```cs\nstring firstArgument = null;\nif(e.Args.Length >= 1)\n  firstArgument = e.Args[0];\n```", "```cs\nvoid MyCommandCallback(IConsoleCmdArgs *pCmdArgs)\n{\n}\ngEnv->pConsole->AddCommand(\"MyCommand\", MyCommandCallback, VF_NULL, \"My command is great!\");\n```"]