- en: Fargate and ECS Service Discovery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fargate和ECS服务发现
- en: So far in this book, we have spent a considerable amount of time focused on
    building infrastructure that supports your ECS clusters, detailing how to build
    custom Amazon machine images for your ECS container instances and how to create
    EC2 Auto Scaling groups that can dynamically add or remove ECS container instances
    to your ECS cluster, with chapters dedicated to managing the life cycle and capacity
    of your clusters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经花了大量时间专注于构建支持您的ECS集群的基础架构，详细介绍了如何为ECS容器实例构建自定义的Amazon机器映像，以及如何创建可以动态添加或删除ECS容器实例到ECS集群的EC2自动扩展组，还有专门用于管理集群的生命周期和容量的章节。
- en: Imagine not having to worry about ECS clusters and ECS container instances.
    Imagine that somebody else managed them for you, to the extent that you didn't
    even really know they existed. For some use cases, having a strong level of control
    over hardware selection, storage configuration, security posture, and other infrastructure
    related concerns, is very important; by now, you should have a pretty strong understanding
    of exactly how ECS provides such capabilities. However, in many cases, having
    that level of control is not necessary, and being able to leverage a service that
    manages your ECS cluster patching, security configuration, capacity, and everything
    else, would be of significant benefit, lowering your operational overhead and
    allowing you to focus on delivering whatever it is your organization is striving
    to achieve.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下不必担心ECS集群和ECS容器实例。想象一下，有人为您管理它们，以至于您甚至真的不知道它们的存在。对于某些用例，对硬件选择、存储配置、安全姿态和其他基础设施相关问题具有强大的控制能力非常重要；到目前为止，您应该对ECS如何提供这些功能有相当深入的了解。然而，在许多情况下，不需要那种控制水平，并且能够利用一个管理您的ECS集群补丁、安全配置、容量和其他一切的服务将会带来显著的好处，降低您的运营开销，并使您能够专注于实现您的组织正在努力实现的目标。
- en: The good news is that this is actually possible, thanks to a service called
    **AWS Fargate**, which was launched in December of 2017\. Fargate is a completely
    managed service, wherein you simply define ECS task definitions and ECS services,
    and then let Fargate take care of the rest of the ECS cluster and container instance
    management that you have become accustomed to in this book. In this chapter, you
    will learn how to deploy container applications using AWS Fargate, using the **infrastructure
    as code** (**IaC**) approach of CloudFormation that we have been adopting throughout
    this book. To make this chapter a little bit more interesting, we will add support
    for an AWS service called X-Ray, which provides distributed tracing for your applications
    running in AWS.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，这是完全可能的，这要归功于一个名为**AWS Fargate**的服务，该服务于2017年12月推出。Fargate是一个完全托管的服务，您只需定义ECS任务定义和ECS服务，然后让Fargate来处理本书中您已经习惯的ECS集群和容器实例管理的其余部分。在本章中，您将学习如何使用AWS
    Fargate部署容器应用程序，使用我们在本书中一直在采用的CloudFormation的**基础设施即代码**（**IaC**）方法。为了使本章更加有趣，我们将为名为X-Ray的AWS服务添加支持，该服务为在AWS中运行的应用程序提供分布式跟踪。
- en: When you want to use X-Ray with your container applications, you need to implement
    what is referred to as an X-Ray daemon, which is an application that collects
    tracing information from your container applications and publishes it to the X-Ray
    service. We will extend the todobackend application to capture tracing information
    for incoming requests, and will add an X-Ray daemon to your AWS environment by
    leveraging the AWS Fargate service, which will collect the tracing information
    and forward it to the X-Ray service.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要在容器应用程序中使用X-Ray时，您需要实现所谓的X-Ray守护程序，这是一个从容器应用程序收集跟踪信息并将其发布到X-Ray服务的应用程序。我们将扩展todobackend应用程序以捕获传入请求的跟踪信息，并通过利用AWS
    Fargate服务向您的AWS环境添加X-Ray守护程序，该服务将收集跟踪信息并将其转发到X-Ray服务。
- en: As an added bonus, we will also implement a feature called ECS service discovery,
    which allows your container applications to be published and discovered automatically,
    using DNS. This feature is very useful for the X-Ray daemon, which is a UDP-based
    application that cannot be serviced by the various load balancing services that
    are available for frontending your TCP and HTTP-based applications. ECS includes
    built-in support for service discovery, taking care of service registration and
    de-registration as your ECS tasks start and stop, allowing you to creating highly
    available services that other applications can easily discover.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的奖励，我们还将实现一个名为ECS服务发现的功能，它允许您的容器应用程序自动发布和发现，使用DNS。这个功能对于X-Ray守护程序非常有用，它是一个基于UDP的应用程序，不能由各种可用于前端TCP和基于HTTP的应用程序的负载平衡服务提供服务。ECS包含对服务发现的内置支持，负责在您的ECS任务启动和停止时进行服务注册和注销，使您能够创建其他应用程序可以轻松发现的高可用服务。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: When to use Fargate
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用Fargate
- en: Adding support for AWS X-Ray to applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序添加对AWS X-Ray的支持
- en: Creating an X-Ray daemon Docker image
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建X-Ray守护程序Docker镜像
- en: Configuring ECS service discovery resources
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置ECS服务发现资源
- en: Configuring an ECS task definition for Fargate
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Fargate配置ECS任务定义
- en: Configuring an ECS service for Fargate
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Fargate配置ECS服务
- en: Deploying and testing the X-Ray daemon
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署和测试X-Ray守护程序
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements for this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: Administrator access to an AWS account
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对AWS帐户的管理员访问权限
- en: A local AWS profile, configured as per the instructions in Chapter 3
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地AWS配置文件，根据第3章的说明进行配置
- en: AWS CLI version 1.15.71 or higher
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI版本1.15.71或更高版本
- en: Docker 18.06 CE or higher
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 18.06 CE或更高版本
- en: Docker Compose 1.22 or higher
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose 1.22或更高版本
- en: GNU Make 3.82 or higher
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU Make 3.82或更高版本
- en: This chapter continues on from Chapter 13, so it requires that you have successfully
    completed all of the configuration tasks defined in Chapter 13
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章继续自第13章，因此需要您成功完成第13章中定义的所有配置任务
- en: The following GitHub URL contains the code samples used in this chapter: [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub URL包含本章中使用的代码示例：[https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14)
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2Lyd9ft](http://bit.ly/2Lyd9ft)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2Lyd9ft](http://bit.ly/2Lyd9ft)'
- en: When to use Fargate?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用Fargate？
- en: As discussed in the introduction to this chapter, AWS Fargate is a service that
    allows you to deploy your container-based applications, without requiring you
    to deploy any ECS container instances, auto-scaling groups, or any of the associated
    operational requirements that come with managing ECS cluster infrastructure. This
    positions AWS Fargate as a serverless technology that sits somewhere between running
    Functions as a Service using AWS Lambda and running your own infrastructure using
    traditional ECS clusters and ECS container instances.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章介绍中所讨论的，AWS Fargate是一项服务，允许您部署基于容器的应用程序，而无需部署任何ECS容器实例、自动扩展组，或者与管理ECS集群基础设施相关的任何操作要求。这使得AWS
    Fargate成为一个介于使用AWS Lambda运行函数作为服务和使用传统ECS集群和ECS容器实例运行自己基础设施之间的无服务器技术。
- en: 'Although Fargate is a great technology, it is important to understand that
    Fargate is very young (at least at the time of writing this book), and it does
    come with some limitations that may make it unsuitable for some use cases, outlined
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Fargate是一项很棒的技术，但重要的是要了解，Fargate目前还很年轻（至少在撰写本书时是这样），它确实存在一些限制，这些限制可能使其不适用于某些用例，如下所述：
- en: '**No Persistent Storage**: Fargate does not currently support persistent storage,
    so if your applications need to use persistent Docker volumes, you should use
    an alternative service, such as the traditional ECS service.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无持久存储**：Fargate目前不支持持久存储，因此如果您的应用程序需要使用持久的Docker卷，您应该使用其他服务，例如传统的ECS服务。'
- en: '**Pricing**: Pricing is always subject to change; however, the initial pricing
    set for Fargate is viewed as expensive by many, as compared to the regular EC2
    instance pricing that you get with ECS. For example, the smallest Fargate configuration that
    you can buy has 0.25v CPU and 512 MB of memory, and costs $14.25 USD per month.
    As a comparison, a t2.nano with 0.5v CPU and 512 MB of memory costs substantially
    less, at $4.75 USD (all prices are based upon `us-east-1 region`),'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定价**：定价始终可能会有变化；然而，与ECS一起获得的常规EC2实例定价相比，Fargate的初始定价被许多人认为是昂贵的。例如，您可以购买的最小Fargate配置为0.25v
    CPU和512 MB内存，价格为每月14.25美元。相比之下，具有0.5v CPU和512 MB内存的t2.nano的价格要低得多，为4.75美元（所有价格均基于“us-east-1”地区）。'
- en: '**Deployment Times**: So far, in my experience, the ECS tasks running on Fargate
    typically take longer to provision and deploy, which may affect the length of
    time your application deployments take (this will also affect auto scaling actions).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署时间**：就我个人经验而言，在Fargate上运行的ECS任务通常需要更长的时间来进行配置和部署，这可能会影响您的应用程序部署所需的时间（这也会影响自动扩展操作）。'
- en: '**Security and Control**: With Fargate, you don''t get to control anything
    about the underlying hardware or instances that are running your containers. If
    you have strict security and/or compliance requirements, then Fargate may not
    offer you the assurances or necessary controls to meet your specific requirements.
    It is important to note, however, that Fargate is listed by AWS as both HIPAA
    and PCI Level 1 DSS compliant.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和控制**：使用Fargate，您无法控制运行容器的底层硬件或实例的任何内容。如果您有严格的安全和/或合规性要求，那么Fargate可能无法为您提供满足特定要求的保证或必要的控制。然而，重要的是要注意，AWS将Fargate列为符合HIPAA和PCI
    Level 1 DSS标准。'
- en: '**Network Isolation:** At the time of writing this book, Fargate does not support
    the use of an HTTP proxy for ECS agent and CloudWatch logs communication. This
    requires you to either place your Fargate tasks in a public subnet with internet
    connectivity, or in a private subnet with a NAT gateway, similar to the approach
    you learned about in the chapter *Isolating Network Access*. To allow access to
    the public AWS API endpoints, this does require you to open up outgoing web access,
    which may violate the security requirements of your organization.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络隔离：在撰写本书时，Fargate不支持ECS代理和CloudWatch日志通信使用HTTP代理。这要求您将Fargate任务放置在具有互联网连接性的公共子网中，或者放置在具有NAT网关的私有子网中，类似于您在“隔离网络访问”章节中学到的方法。为了允许访问公共AWS
    API端点，这确实要求您打开出站网络访问，这可能违反您组织的安全要求。
- en: '**Service Availability**: At the time of writing this book, Fargate is only
    available in the US East (Virginia), US East (Ohio), US West (Oregon), and EU
    (Ireland) regions; however, I would expect Fargate to become widely available
    across most regions reasonably quickly.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务可用性：在撰写本书时，Fargate仅在美国东部（弗吉尼亚州）、美国东部（俄亥俄州）、美国西部（俄勒冈州）和欧盟（爱尔兰）地区可用；但是，我希望Fargate能够在大多数地区迅速广泛地可用。
- en: If you can live with the current limitations of Fargate, then Fargate will significantly
    reduce your operational overheads and make life simpler for you. For example,
    when it comes to auto-scaling, you can simply auto-scale your ECS services using
    the application auto-scaling approach that we discussed toward the end of the
    *ECS Auto-Scaling* chapter, and Fargate will take care of ensuring that there
    is sufficient cluster capacity. Similarly, you won't need to worry about the patching
    and life cycle management of your ECS clusters - Fargate takes care of all of
    the above for you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以接受Fargate当前的限制，那么Fargate将显著减少您的运营开销，并使您的生活更加简单。例如，在自动扩展方面，您可以简单地使用我们在“ECS自动扩展”章节末尾讨论的应用自动扩展方法来自动扩展您的ECS服务，Fargate将负责确保有足够的集群容量。同样，您无需担心ECS集群的打补丁和生命周期管理
    - Fargate会为您处理上述所有事项。
- en: In this chapter, we will be deploying an AWS X-Ray daemon service to support
    application tracing for the todobackend application. This type of service is well-suited
    to Fargate, given it is a background service that does not require persistent
    storage, does not affect the availability of the todobackend application (if it
    goes down), and does not process end user data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将部署一个AWS X-Ray守护程序服务，以支持todobackend应用程序的应用程序跟踪。鉴于这种类型的服务是Fargate非常适合的，因为它是一个不需要持久存储、不会影响todobackend应用程序的可用性（如果它宕机），也不会处理最终用户数据的后台服务。
- en: Adding support for AWS X-Ray to applications
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用程序添加对AWS X-Ray的支持
- en: Before we can use the AWS X-Ray service, your applications need to support collecting
    and publishing tracing information to the X-Ray service. The X-Ray **software
    development kit (SDK)** includes support for a variety of programming languages
    and popular application frameworks, including Python and Django, which both power
    the todobackend application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用AWS X-Ray服务之前，您的应用程序需要支持收集和发布跟踪信息到X-Ray服务。X-Ray软件开发工具包（SDK）包括对各种编程语言和流行的应用程序框架的支持，包括Python和Django，它们都是todobackend应用程序的动力源。
- en: You can locate the appropriate SDK documentation for your language of choice
    at [https://aws.amazon.com/documentation/xray/](https://aws.amazon.com/documentation/xray/),
    but for our use case, [https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html](https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html)
    provides the relevant information on how to configure Django to automatically
    create traces for each incoming request to your application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://aws.amazon.com/documentation/xray/](https://aws.amazon.com/documentation/xray/)找到适合您选择的语言的适当SDK文档，但对于我们的用例，[https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html](https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html)提供了有关如何配置Django以自动为应用程序的每个传入请求创建跟踪的相关信息。
- en: 'In the todobackend repository, you first need to add the X-Ray SDK package
    to the `src/requirements.txt` file, which will ensure that the SDK is installed
    alongside the other dependencies of the todobackend application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在todobackend存储库中，您首先需要将X-Ray SDK包添加到`src/requirements.txt`文件中，这将确保SDK与todobackend应用程序的其他依赖项一起安装：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you need to add a Django X-Ray middleware component, which is included
    in the SDK, to the `MIDDLEWARE` configuration element in the release settings
    file for the Django project located in `src/todobackend/settings_release.py`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将Django X-Ray中间件组件（包含在SDK中）添加到位于`src/todobackend/settings_release.py`中的Django项目的`MIDDLEWARE`配置元素中：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This configuration does vary from the [X-Ray documentation for Django](https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html),
    however in general you only want to run X-Ray in your AWS environments, and using
    the standard approach can cause X-Ray configuration issues in your local development
    environment.  Because we have a separate release settings file that imports the
    base settings file, we can simply insert the X-Ray middleware component at the
    beginning of the base `MIDDLEWARE` list using the `insert()` function as shown. 
    This approach ensures we will run X-Ray in our AWS environments that use the release
    settings, but not use X-Ray in a local development setting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置与[Django的X射线文档](https://docs.aws.amazon.com/xray-sdk-for-python/latest/reference/frameworks.html)有所不同，但通常情况下，您只想在AWS环境中运行X-Ray，并且使用标准方法可能会导致本地开发环境中的X-Ray配置问题。因为我们有一个单独的发布设置文件，导入基本设置文件，我们可以简单地使用`insert()`函数将X-Ray中间件组件插入到基本的`MIDDLEWARE`列表的开头，如所示。这种方法确保我们将在使用发布设置的AWS环境中运行X-Ray，但不会在本地开发环境中使用X-Ray。
- en: It is important that the X-Ray middleware component is specified first in the
    `MIDDLEWARE` list, as this ensures that X-Ray can start tracing incoming requests
    before any other middleware components.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要在`MIDDLEWARE`列表中首先指定X-Ray中间件组件，因为这样可以确保X-Ray可以在任何其他中间件组件之前开始跟踪传入请求。
- en: 'Finally, the Python X-Ray SDK includes tracing support for a number of popular
    packages, including the `mysql-connector-python` package, which is used by the
    todobackend application to connect to its MySQL database. In Python, X-Ray wraps
    calls made by supported packages using a technique referred to as patching, which
    allows X-Ray to intercept calls made by the package and capture tracing information.
    For our use case, patching the `mysql-connector-python` package will enable us
    to trace database calls made by the application, which can be very useful for
    troubleshooting performance issues. To patch this package, you need to add a few
    lines of code to your application entry point, which, for Django, is located in
    the file `src/todobackend.wsgi.py`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Python X-Ray SDK包括对许多流行软件包的跟踪支持，包括“mysql-connector-python”软件包，该软件包被todobackend应用程序用于连接其MySQL数据库。在Python中，X-Ray使用一种称为patching的技术来包装受支持软件包的调用，这允许X-Ray拦截软件包发出的调用并捕获跟踪信息。对于我们的用例，对“mysql-connector-python”软件包进行patching将使我们能够跟踪应用程序发出的数据库调用，这对于解决性能问题非常有用。要对此软件包进行patching，您需要向应用程序入口点添加几行代码，对于Django来说，该入口点位于文件“src/todobackend.wsgi.py”中：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `xray_recorder` configuration will add a service name to each trace segment,
    which is required otherwise you will observe SegmentNameMissingException errors. 
    At this point, you have added support at an application level to start tracing
    incoming requests, and you should be able to run the make workflow (running `make
    test` and `make release`) successfully before committing and pushing your changes
    to GitHub. Because you now have a continuous delivery pipeline in place, this
    will trigger that pipeline, which ensures that your application changes will be
    published to ECR once the pipeline build stage completes. If you haven't completed
    the previous chapter, or if you have removed your pipeline, then you will need
    to manually publish the new image by using the `make login` and `make publish`
    commands after running `make test` and `make release`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “xray_recorder”配置将向每个跟踪段添加服务名称，否则您将观察到SegmentNameMissingException错误。在这一点上，您已经在应用程序级别上添加了支持以开始跟踪传入请求，并且在提交并将更改推送到GitHub之前，您应该能够成功运行“make
    workflow”（运行“make test”和“make release”）。因为您现在已经建立了一个持续交付管道，这将触发该管道，该管道确保一旦管道构建阶段完成，您的应用程序更改将被发布到ECR。如果您尚未完成上一章，或者已删除管道，则需要在运行“make
    test”和“make release”后使用“make login”和“make publish”命令手动发布新镜像。
- en: Creating an X-Ray daemon Docker image
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建X-Ray守护程序Docker镜像
- en: 'Before our application can publish X-Ray tracing information, you must deploy
    an X-Ray daemon that your application can send this information to. Our goal is
    to run the X-Ray daemon using AWS Fargate, but before we can do that, we need
    to create a Docker image that will run the daemon. AWS provides examples of how
    to build an X-Ray daemon image, and we will following a similar approach to what
    is documented by AWS by creating a file called `Dockerfile.xray` in the root of
    the `todobackend-aws` repository:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序可以发布X-Ray跟踪信息之前，您必须部署一个X-Ray守护程序，以便您的应用程序可以将此信息发送到它。我们的目标是使用AWS Fargate运行X-Ray守护程序，但在此之前，我们需要创建一个将运行守护程序的Docker镜像。AWS提供了如何构建X-Ray守护程序镜像的示例，我们将按照AWS文档中记录的类似方法创建一个名为“Dockerfile.xray”的文件，该文件位于“todobackend-aws”存储库的根目录中：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can now build this image locally by using the `docker build` command, as
    demonstrated here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用“docker build”命令在本地构建此镜像，如下所示：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With our image now built, we need to publish it to ECR. Before you can do this,
    you need to create a new repository for the X-Ray image, which we can add to the
    existing `ecr.yml` file at the root of the `todobackend-aws` repository:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的镜像已构建，我们需要将其发布到ECR。在此之前，您需要为X-Ray镜像创建一个新的存储库，然后将其添加到“todobackend-aws”存储库的根目录中的现有“ecr.yml”文件中：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example*,* you created a new repository with the name `docker-in-aws/xray`,
    which will result in a fully qualified repository name of `<account-id>.dkr.ecr.<region>.amazonaws.com/docker-in-aws/xray` (for
    example, `385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray`).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您使用名称`docker-in-aws/xray`创建了一个新的存储库，这将导致一个完全合格的存储库名称为`<account-id>.dkr.ecr.<region>.amazonaws.com/docker-in-aws/xray`（例如，`385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/xray`）。
- en: 'You can now create the new repository by running the `aws cloudformation deploy`
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过运行`aws cloudformation deploy`命令来创建新的存储库：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once deployment has completed, you can log in to ECR, and then tag and publish
    the image that you created earlier with the fully qualified name of the new ECR
    repository:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，您可以登录到ECR，然后使用新的ECR存储库的完全合格名称对之前创建的图像进行标记和发布。
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Configuring ECS service discovery resources
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS服务发现资源
- en: ECS service discovery is a feature that allows your client applications to discover
    ECS services in a dynamic environment, where container-based endpoints come and
    go. To date, we have used AWS application load balancers to perform this function,
    where you configure a stable service endpoint that your applications can connect
    to, with connections then load balanced across an ECS-managed target group that
    includes each of the ECS tasks associated with your ECS service.  Although this
    is generally my recommended best practice approach, for applications that don't
    support load balancers (for example, UDP-based applications), or for very large
    microservice architectures where it is more efficient to have direct communication
    with a given ECS task, ECS service discovery may be a better approach than using
    load balancers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ECS服务发现是一个功能，允许您的客户端应用程序在动态环境中发现ECS服务，其中基于容器的端点来来去去。到目前为止，我们已经使用AWS应用程序负载均衡器来执行此功能，您可以配置一个稳定的服务端点，您的应用程序可以连接到该端点，然后在ECS管理的目标组中进行负载平衡，该目标组包括与ECS服务相关联的每个ECS任务。尽管这通常是我推荐的最佳实践方法，但对于不支持负载均衡器的应用程序（例如，基于UDP的应用程序），或者对于非常庞大的微服务架构，在这种架构中，与给定的ECS任务直接通信更有效，ECS服务发现可能比使用负载均衡器更好。
- en: ECS service discovery also supports AWS load balancers, where ECS will publish
    the IP address of the load balancer listener if a load balancer is associated
    with a given ECS service.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ECS服务发现还支持AWS负载均衡器，如果负载均衡器与给定的ECS服务相关联，ECS将发布负载均衡器侦听器的IP地址。
- en: ECS service discovery uses DNS as its discovery mechanism, which is useful,
    given that in its most basic form, DNS is universally supported by any application
    client. The DNS namespace that your ECS services are registered in is referred
    to as a**service discovery namespace**, which simply corresponds to a Route 53
    DNS domain or zone, and each service that you register in the namespace is referred
    to as a **service discovery**. For example, you might configure `services.dockerinaws.org`
    as a service discovery namespace, and, if you have an ECS service called `todobackend`,
    then you will connect to that service using the DNS name `todobackend.services.dockerinaws.org`.
    ECS will automatically manage address (`A`) records registered against the DNS
    record for your service, dynamically adding the IP address associated with each
    active and healthy ECS task of your ECS service, as well as removing any ECS tasks
    that exit or become unhealthy. ECS service discovery supports both public and
    private namespaces, and for our example of running the X-Ray daemon, a private
    namespace is suitable, given that this service only needs to support internal
    application tracing communications from the todobackend application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ECS服务发现使用DNS作为其发现机制，这是有用的，因为在其最基本的形式中，DNS被任何应用客户端普遍支持。您的ECS服务注册的DNS命名空间被称为**服务发现命名空间**，它简单地对应于Route
    53 DNS域或区域，您在命名空间中注册的每个服务被称为**服务发现**。例如，您可以将`services.dockerinaws.org`配置为服务发现命名空间，如果您有一个名为`todobackend`的ECS服务，那么您将使用DNS名称`todobackend.services.dockerinaws.org`连接到该服务。ECS将自动管理针对您的服务的DNS记录注册的地址（`A`）记录，动态添加与您的ECS服务的每个活动和健康的ECS任务关联的IP地址，并删除任何退出或变得不健康的ECS任务。ECS服务发现支持公共和私有命名空间，对于我们运行X-Ray守护程序的示例，私有命名空间是合适的，因为此服务只需要支持来自todobackend应用程序的内部应用程序跟踪通信。
- en: ECS service discovery supports the provisioning of DNS service (SRV) records,
    which include both IP address and TCP/UDP port information about a given service
    endpoint. You typically use address (`A`) records when using static port mapping
    or **awsvpc** networking mode (as is the case with Fargate), and SRV records when
    using dynamic port mapping, given that SRV records can include the dynamic port
    information for the port mapping that is created. Note that application support
    for SRV records is somewhat limited, so I typically recommend using the tried
    and true approach of using `A` records for ECS service discovery.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ECS服务发现支持DNS服务（SRV）记录的配置，其中包括有关给定服务端点的IP地址和TCP/UDP端口信息。当使用静态端口映射或**awsvpc**网络模式（例如Fargate）时，通常使用地址（`A`）记录，当使用动态端口映射时使用SRV记录，因为SRV记录可以包括为创建的端口映射提供动态端口信息。请注意，应用程序对SRV记录的支持有些有限，因此我通常建议在ECS服务发现中使用经过验证的`A`记录的方法。
- en: Configuring a service discovery namespace
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务发现命名空间
- en: Like most AWS resources, you can configure service discovery resources using
    the AWS console, AWS CLI, any one of the various AWS SDKs, or CloudFormation.
    Given our infrastructure as code approach throughout this book, we will naturally
    adopt CloudFormation in this chapter; because the X-Ray daemon is a new service
    (and would typically be considered a shared service, which each of your applications
    publishes trace information to), we will create a new stack, in a file called
    `xray.yml`, at the root of the `todobackend-aws` repository.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数AWS资源一样，您可以使用AWS控制台、AWS CLI、各种AWS SDK之一或CloudFormation来配置服务发现资源。鉴于本书始终采用基础设施即代码的方法，我们自然会在本章中采用CloudFormation；因为X-Ray守护程序是一个新服务（通常被视为每个应用程序发布跟踪信息的共享服务），我们将在名为`xray.yml`的文件中创建一个新的堆栈，放在`todobackend-aws`存储库的根目录。
- en: 'The following example demonstrates creating the initial template and creating
    a service discovery namespace resource:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了创建初始模板和创建服务发现命名空间资源：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding example*,* we created a private service discovery namespace
    that simply requires the DNS name of the namespace, an optional description, and
    the VPC ID that the associated private Route 53 zone will be linked to. To keep
    things simple, I have also hardcoded an appropriate value for the VPC ID related
    to my AWS account, which you would typically inject via a stack parameter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个私有服务发现命名空间，它只需要命名空间的DNS名称、可选描述和关联的私有Route 53区域的VPC ID。为了保持简单，我还硬编码了与我的AWS账户相关的VPC
    ID的适当值，通常您会通过堆栈参数注入这个值。
- en: Given that the intention of a service discovery namespace is to support multiple
    services, you would typically create the namespace in a separate CloudFormation
    stack, such as a dedicated network stack that creates shared network resources.
    However, in the interest of keeping things simple, we are creating the namespace
    in the X-Ray stack.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于服务发现命名空间的意图是支持多个服务，您通常会在单独的CloudFormation堆栈中创建命名空间，比如创建共享网络资源的专用网络堆栈。然而，为了保持简单，我们将在X-Ray堆栈中创建命名空间。
- en: 'You can now deploy the initial stack to CloudFormation by using the `aws cloudformation
    deploy` command, which should create a service discovery namespace and the associated
    Route 53 private zone:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用`aws cloudformation deploy`命令将初始堆栈部署到CloudFormation，这应该会创建一个服务发现命名空间和相关的Route
    53私有区域。
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, once your stack successfully deploys, you will use
    the `aws servicediscovery list-namespaces` command to verify that a private namespace
    was created, while the `aws route53 list-hosted-zones` command shows that a Route
    53 zone was also created, with a zone name of `services.dockerinaws.org`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，一旦您的堆栈成功部署，您将使用`aws servicediscovery list-namespaces`命令来验证是否创建了一个私有命名空间，而`aws
    route53 list-hosted-zones`命令将显示已创建一个Route 53区域，其区域名称为`services.dockerinaws.org`。
- en: Configuring a service discovery service
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务发现服务
- en: 'Now that you have a service discovery namespace in place, the next step is
    to create a service discovery service, which has a one-to-one relationship with
    each ECS service, meaning that you need to create a service discovery service
    that represents the X-Ray ECS service that you will create later in this chapter:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了一个服务发现命名空间，下一步是创建一个服务发现服务，它与每个ECS服务都有一对一的关系，这意味着您需要创建一个代表稍后在本章中创建的X-Ray
    ECS服务的服务发现服务。
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding example, you added a new resource, called `ApplicationServiceDiscoveryService`,
    and configured the following properties:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您添加了一个名为`ApplicationServiceDiscoveryService`的新资源，并配置了以下属性：
- en: '`Name`: Defines the name of the service. This name will be used to register
    the service in the associated namespace.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name`：定义服务的名称。此名称将用于在关联的命名空间中注册服务。'
- en: '`DnsConfig`: Specifies the namespace that the service is associated with (as
    defined by the `NamespaceId` property), and defines the DNS record type and time-to-live
    (TTL) that should be created. Here, you specify an address record (type `A`) and
    a TTL of 60 seconds, meaning that clients will only cache the record for a maximum
    of 60 seconds. Generally, you should set the TTL to a low value, to ensure that
    your clients pick up DNS changes when new ECS tasks are registered to the service
    or existing ECS tasks are removed from the service.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DnsConfig`：指定服务关联的命名空间（由`NamespaceId`属性定义），并定义应创建的DNS记录类型和生存时间（TTL）。在这里，您指定了一个地址记录（类型为`A`）和一个60秒的TTL，这意味着客户端只会缓存该记录最多60秒。通常情况下，您应该将TTL设置为较低的值，以确保您的客户端在新的ECS任务注册到服务或现有的ECS任务从服务中移除时能够获取DNS更改。'
- en: '`HealthCheckCustomConfig`: This configures ECS to manage health checks that
    determine whether or not an ECS task can be registered. You can also configure
    Route 53 health checks (see [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html#service-discovery-concepts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html#service-discovery-concepts));
    however, for our use case, given that X-Ray is a UDP-based application and Route
    53 health checks only support TCP-based services, you must use the `HealthCheckCustomConfig`
    configuration shown in the preceding example. The `FailureThreshold` specifies
    the number of `30` second intervals the service discovery will wait to change
    the health of a given service instance, after receiving a custom health check
    update (in this scenario, ECS provides custom health checks).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HealthCheckCustomConfig`：这配置ECS来管理确定是否可以注册ECS任务的健康检查。您还可以配置Route 53健康检查（参见[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html#service-discovery-concepts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html#service-discovery-concepts)）；然而，对于我们的用例来说，鉴于X-Ray是基于UDP的应用程序，而Route
    53健康检查仅支持基于TCP的服务，您必须使用前面示例中显示的`HealthCheckCustomConfig`配置。`FailureThreshold`指定服务发现在接收到自定义健康检查更新后等待更改给定服务实例的健康状态的`30`秒间隔数。'
- en: 'You can now deploy your updated stack to CloudFormation using the `aws cloudformation
    deploy` command, which should create a service discovery service:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用`aws cloudformation deploy`命令将更新后的堆栈部署到CloudFormation，这应该会创建一个服务发现服务。
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will create a DNS record set for `xray.services.dockerinaws.org`, which
    won't have any address (`A`) records associated with it until we configure ECS
    service discovery support for the X-Ray ECS service that we will create later
    in this chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为`xray.services.dockerinaws.org`创建一个DNS记录集，直到我们在本章后面将要创建的X-Ray ECS服务的ECS服务发现支持配置之前，它将不会有任何地址（`A`）记录与之关联。
- en: Configuring an ECS task definition for Fargate
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Fargate配置ECS任务定义
- en: You are now ready to start defining your ECS resources, which you will configure
    to use the AWS Fargate service and leverage the service discovery resources that
    you created in the previous section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始定义您的ECS资源，您将配置为使用AWS Fargate服务，并利用您在上一节中创建的服务发现资源。
- en: 'When configuring ECS task definitions to support Fargate, there are some key
    considerations that you need to understand:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置ECS任务定义以支持Fargate时，有一些关键考虑因素需要您了解：
- en: '**Launch type:** An ECS task definition includes a parameter called `RequiresCompatibilities`,
    which defines the compatible launch types for the definition. The current launch
    types include EC2, which refers to ECS tasks launched on traditional ECS clusters,
    and FARGATE, which refers to ECS tasks launched on Fargate. By default, the `RequiresCompatibilities` parameter
    is configured as EC2, meaning that you must explicitly configure this parameter
    if you want to use Fargate.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动类型**：ECS任务定义包括一个名为`RequiresCompatibilities`的参数，该参数定义了定义的兼容启动类型。当前的启动类型包括EC2，指的是在传统ECS集群上启动的ECS任务，以及FARGATE，指的是在Fargate上启动的ECS任务。默认情况下，`RequiresCompatibilities`参数配置为EC2，这意味着如果要使用Fargate，必须显式配置此参数。'
- en: '**Network mode**: Fargate only supports the `awsvpc` network mode, which we
    discussed in Chapter 10 - *Isolating Network Access*.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络模式**：Fargate仅支持`awsvpc`网络模式，我们在第10章“隔离网络访问”中讨论过。'
- en: '**Execution role**: Fargate requires you to configure an **execution role**,
    which is an IAM role assigned to the ECS agent and Fargate runtime that manages
    the life cycle of ECS tasks, based from your Fargate task definition. This is
    a separate role from the IAM roles for tasks feature that you configured back
    in Chapter 9 - *Managing Secrets*, which you use to grant IAM permissions to the
    application running in your ECS task. The execution role is typically configured
    with similar permissions to those that you would configure for an EC2 IAM instance
    role associated with a traditional ECS container instance, granting, at a minimum,
    permissions for the ECS agent and Fargate runtime, to pull images from ECR and
    write logs to CloudWatch logs.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行角色**：Fargate要求您配置一个**执行角色**，这是分配给管理ECS任务生命周期的ECS代理和Fargate运行时的IAM角色。这是一个独立的角色，不同于您在第9章“管理机密”中配置的任务IAM角色功能，该功能用于向在ECS任务中运行的应用程序授予IAM权限。执行角色通常配置为具有类似权限的权限，这些权限您将为与传统ECS容器实例关联的EC2
    IAM实例角色配置，至少授予ECS代理和Fargate运行时从ECR拉取图像和将日志写入CloudWatch日志的权限。'
- en: '**CPU and Memory**: Fargate requires you to define CPU and memory requirements
    at the task definition level, as this determines the underlying target instance
    that ECS tasks based from your task definition will run on. Note that this is
    separate from the per-container definition CPU and memory settings that you configured
    in the ECS task definition for the todobackend application, back in Chapter 8
    - *Deploying Applications using ECS*; you can still configure per-container definition
    CPU and memory settings, but you need to ensure that the total CPU/memory allocated
    to your container definitions does not exceed the overall CPU/memory allocated
    to the ECS task definition. Fargate currently supports only a limited set of CPU/memory
    allocations, which you can read more about in the *Task CPU and Memory* section
    at [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU和内存**：Fargate要求您在任务定义级别定义CPU和内存要求，因为这决定了基于您的任务定义运行的ECS任务的基础目标实例。请注意，这与您在第8章“使用ECS部署应用程序”中为todobackend应用程序的ECS任务定义配置的每个容器定义CPU和内存设置是分开的；您仍然可以配置每个容器定义的CPU和内存设置，但需要确保分配给容器定义的总CPU/内存不超过分配给ECS任务定义的总CPU/内存。Fargate目前仅支持有限的CPU/内存分配，您可以在[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html)的“任务CPU和内存”部分了解更多信息。'
- en: '**Logging**: At the time of writing, Fargate only supports the `awslogs` logging
    driver, which forwards your container logs to CloudWatch logs.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：截至撰写本文时，Fargate仅支持`awslogs`日志记录驱动程序，该驱动程序将您的容器日志转发到CloudWatch日志。'
- en: 'With the preceding considerations in mind, let''s now define a task definition
    for our X-Ray daemon service:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到上述情况，现在让我们为我们的X-Ray守护程序服务定义一个任务定义：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, notice that the `RequiresCompatibilities` parameter
    specifies `FARGATE` as the supported launch type, and that the `NetworkMode` parameter
    is configured as the required `awsvpc` mode. The `Cpu` and `Memory` settings are
    configured as 256 CPU units (0.25 vCPUs) and 512 MB, respectively, which represents
    the smallest available Fargate CPU/memory configuration.  For the `ExecutionRoleArn`
    parameter, you reference an IAM role called `ApplicationTaskExecutionRole`, which
    we will configure shortly, separate from the role configured for the `TaskRoleArn`
    parameter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，请注意`RequiresCompatibilities`参数指定`FARGATE`作为支持的启动类型，并且`NetworkMode`参数配置为所需的`awsvpc`模式。`Cpu`和`Memory`设置分别配置为256
    CPU单位（0.25 vCPU）和512 MB，这代表了最小可用的Fargate CPU/内存配置。对于`ExecutionRoleArn`参数，您引用了一个名为`ApplicationTaskExecutionRole`的IAM角色，我们将很快单独配置，与为`TaskRoleArn`参数配置的角色分开。
- en: Next, you define a single container definition called `xray`, which references
    the ECR repository that you created earlier in this chapter; notice that you specify
    the `-o` flag for the `Command` parameter. This will append `-o` to the command
    specified in the `ENTRYPOINT` directive that you configured in the X-Ray daemon
    image back in the previous example, which stops the X-Ray daemon from attempting
    to query EC2 instance metadata, as this is not supported when you use Fargate.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您定义一个名为`xray`的单个容器定义，该容器定义引用了您在本章前面创建的ECR存储库；请注意，您为`Command`参数指定了`-o`标志。这将在您在上一个示例中配置的X-Ray守护程序镜像的`ENTRYPOINT`指令中附加`-o`，从而阻止X-Ray守护程序尝试查询EC2实例元数据，因为在使用Fargate时不支持这一操作。
- en: The log configuration for the container definition is configured to use the
    `awslogs` driver, as required for Fargate, which references the `ApplicationLogGroup`
    CloudWatch logs group resource configured under the task definition. Finally,
    you specify the X-Ray daemon port (`UDP port 2000`) as a container port mapping,
    and you configure a single environment variable, called `AWS_REGION`, that references
    the region in which you deploy the stack, which is required for the X-Ray daemon
    to determine the regional X-Ray service endpoint that the daemon should publish
    trace data to.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 容器定义的日志配置配置为使用`awslogs`驱动程序，这是Fargate所需的，它引用了任务定义下配置的`ApplicationLogGroup` CloudWatch日志组资源。最后，您指定了X-Ray守护程序端口（`UDP端口2000`）作为容器端口映射，并配置了一个名为`AWS_REGION`的环境变量，该变量引用您部署堆栈的区域，这对于X-Ray守护程序确定守护程序应将跟踪数据发布到的区域性X-Ray服务端点是必需的。
- en: Configuring IAM roles for Fargate
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Fargate配置IAM角色
- en: In the previous example, your ECS task definition refers to a task execution
    role (as defined by the `ExecutionRoleArn` parameter) and a task role (as defined
    by the `TaskRoleArn` parameter).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，您的ECS任务定义引用了一个任务执行角色（由`ExecutionRoleArn`参数定义）和一个任务角色（由`TaskRoleArn`参数定义）。
- en: 'As discussed previously, the task execution role defines the IAM permissions
    that will be assigned to the ECS agent and Fargate runtime, and typically includes
    permissions to pull the require ECR images to run the containers defined in your
    task definition, as well as permissions to write to the CloudWatch log groups
    referenced in your container logging configuration:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，任务执行角色定义了将分配给ECS代理和Fargate运行时的IAM权限，通常包括拉取任务定义中定义的容器所需的ECR镜像的权限，以及写入容器日志配置中引用的CloudWatch日志组的权限：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The task role defines any IAM permissions that the applications running from
    your ECS task definition may require. For our use case, the X-Ray daemon requires
    permissions to publish traces to the X-Ray service, as demonstrated in the following
    example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 任务角色定义了从您的ECS任务定义中运行的应用程序可能需要的任何IAM权限。对于我们的用例，X-Ray守护程序需要权限将跟踪发布到X-Ray服务，如下例所示：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example*,* you grant the `xray:PutTraceSegments` and `xray:PutTelemetryRecords`
    permission to the X-Ray daemon, which allows the daemon to publish application
    traces captured from your applications to the X-Ray service. Notice that for both
    the `ApplicationTaskExecutionRole` and `ApplicationTaskRole` resources, the trusted
    entity in the `AssumeRolePolicyDocument` section must be configured as the `ecs-tasks.amazonaws.com`
    service.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您授予`xray:PutTraceSegments`和`xray:PutTelemetryRecords`权限给X-Ray守护程序，这允许守护程序将从您的应用程序捕获的应用程序跟踪发布到X-Ray服务。请注意，对于`ApplicationTaskExecutionRole`和`ApplicationTaskRole`资源，`AssumeRolePolicyDocument`部分中的受信任实体必须配置为`ecs-tasks.amazonaws.com`服务。
- en: Configuring an ECS service for Fargate
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Fargate配置ECS服务
- en: Now that you have defined an ECS task definition for Fargate, you can create
    an ECS service that will reference your ECS task definition and deploy one or
    more instances (ECS tasks) for your service.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经为Fargate定义了一个ECS任务定义，您可以创建一个ECS服务，该服务将引用您的ECS任务定义，并为您的服务部署一个或多个实例（ECS任务）。
- en: 'As you might expect, when configuring ECS services to support Fargate, there
    are some key considerations that you need to be aware of:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能期望的那样，在配置ECS服务以支持Fargate时，有一些关键考虑因素需要您注意：
- en: '**Launch type**: You must specify Fargate as the launch type for any ECS service
    that you want to run using Fargate.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动类型**：您必须指定Fargate作为任何要使用Fargate运行的ECS服务的启动类型。'
- en: '**Platform version**: AWS maintains different versions of the Fargate runtime
    or platform, which will evolve over time, and may at some point introduce breaking
    changes for your ECS services. You can optionally target a specific platform version
    for your ECS service, or simply omit configuring this property, to use the latest
    platform version available.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台版本**：AWS维护不同版本的Fargate运行时或平台，这些版本会随着时间的推移而发展，并且可能在某个时候为您的ECS服务引入破坏性更改。您可以选择为您的ECS服务针对特定的平台版本，或者简单地省略配置此属性，以使用最新可用的平台版本。'
- en: '**Network configuration**: Because Fargate requires the use of **awsvpc** networking
    mode, your ECS services must define a network configuration that defines the subnets
    your ECS service will run in, the security groups assigned to your ECS service,
    and also, whether or not your service is assigned a public IP address. At the
    time of writing this book, when using Fargate, you must either assign a public
    IP address or use a NAT gateway, as discussed in the chapter *Isolating Network
    Access*, to ensure that the ECS agent that manages your ECS service can communicate
    with ECS, pull images from ECR, and publish logs to the CloudWatch logs service.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络配置**：因为Fargate需要使用**awsvpc**网络模式，您的ECS服务必须定义一个网络配置，定义您的ECS服务将在其中运行的子网，分配给您的ECS服务的安全组，以及您的服务是否分配了公共IP地址。在撰写本书时，当使用Fargate时，您必须分配公共IP地址或使用NAT网关，如章节*隔离网络访问*中所讨论的，以确保管理您的ECS服务的ECS代理能够与ECS通信，从ECR拉取镜像，并将日志发布到CloudWatch日志服务。'
- en: Although you can't interact with the ECS agent, it is important to understand
    that all ECS agent communications use the same network interface as your container
    applications running in Fargate. This means that you must consider the communication
    requirements of the ECS agent and Fargate runtime when attaching security groups
    and determining the network placement of your ECS service.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您无法与ECS代理进行交互，但重要的是要理解所有ECS代理通信都使用与在Fargate中运行的容器应用程序相同的网络接口。这意味着您必须考虑ECS代理和Fargate运行时的通信需求，当附加安全组并确定您的ECS服务的网络放置时。
- en: 'The following example demonstrates configuring an ECS service for Fargate and
    ECS service discovery:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了为Fargate和ECS服务发现配置ECS服务：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding example*,* the first point to note is that although you don't
    run any ECS container instances or other infrastructures when using Fargate, you
    are still required to define an ECS cluster when configuring ECS services for
    Fargate, which you will then reference in your ECS service.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，首先要注意的是，尽管在使用Fargate时您不运行任何ECS容器实例或其他基础设施，但在为Fargate配置ECS服务时仍需要定义一个ECS集群，然后在您的ECS服务中引用它。
- en: 'The ECS service configuration is similar to the configuration you defined when
    running the todobackend application using ECS task networking in the *Isolating
    Network Access* chapter, although there are a few key configuration properties
    to discuss:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: ECS服务配置类似于在*隔离网络访问*章节中使用ECS任务网络运行todobackend应用程序时定义的配置，尽管有一些关键的配置属性需要讨论：
- en: '`LaunchType`: This must be specified as `FARGATE`. It is important to ensure
    that you place your ECS services in a public subnet and configure the `AssignPublicIp`
    property in the networking configuration as `ENABLED`, or, alternatively, place
    your services in a private subnet with a NAT gateway. In the preceding example,
    note that I have hardcoded the `Subnets` property to public subnets within my
    VPC; you need to change these to the appropriate values for your environment,
    and you would typically inject these values via a stack parameter.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LaunchType`：必须指定为`FARGATE`。确保将您的ECS服务放置在公共子网中，并在网络配置中将`AssignPublicIp`属性配置为`ENABLED`，或者将您的服务放置在带有NAT网关的私有子网中非常重要。在前面的示例中，请注意我已经将`Subnets`属性硬编码为我的VPC中的公共子网；您需要将这些值更改为您的环境的适当值，并且通常会通过堆栈参数注入这些值。'
- en: '`ServiceRegistries`: This property configures your ECS service to use the ECS
    service discovery feature that we configured earlier in this chapter, and here,
    you reference the ARN of the service discovery service that you configured back
    in the previous example. With this configuration in place, ECS will automatically
    register/de-register the IP address of each of your ECS service instances (ECS
    tasks) in the DNS record set created for the linked service discovery service.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServiceRegistries`：此属性配置您的ECS服务以使用我们在本章前面配置的ECS服务发现功能，在这里，您引用了您在上一个示例中配置的服务发现服务的ARN。有了这个配置，ECS将自动在为链接的服务发现服务创建的DNS记录集中注册/注销每个ECS服务实例（ECS任务）的IP地址。'
- en: 'At this point, there is one final resource to configure—you need to define
    the `ApplicationSecurityGroup` resource referenced by your ECS service:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，还有一个最终需要配置的资源——您需要定义被您的ECS服务引用的`ApplicationSecurityGroup`资源：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, again, note that I am using hardcoded values where
    I would typically use stack parameters, to keep things simple and to the point.
    The security group permits ingress access to UDP port 2000 from any host within
    the VPC, while the egress security rules allow access to DNS, HTTP, and HTTPS,
    which is required to ensure that the ECS agent can communicate with ECS, ECR,
    and CloudWatch logs, and that the X-Ray daemon can communicate with the X-Ray
    service.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，再次注意，我在这里使用了硬编码的值，而我通常会使用堆栈参数，以保持简单和简洁。安全组允许从VPC内的任何主机对UDP端口2000进行入口访问，而出口安全规则允许访问DNS、HTTP和HTTPS，这是为了确保ECS代理可以与ECS、ECR和CloudWatch日志进行通信，以及X-Ray守护程序可以与X-Ray服务进行通信。
- en: Deploying and testing the X-Ray daemon
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和测试X-Ray守护程序
- en: 'At this point, we have completed the configuration of our CloudFormation template
    that will deploy the X-Ray daemon to AWS using the Fargate service with ECS service
    discovery enabled; you can deploy the changes to your stack by using the `aws
    cloudformation deploy` command, including the `--capabilities` parameter, given
    that our stack is now creating IAM resources:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经完成了配置CloudFormation模板的工作，该模板将使用启用了ECS服务发现的Fargate服务将X-Ray守护程序部署到AWS；您可以使用`aws
    cloudformation deploy`命令将更改部署到您的堆栈中，包括`--capabilities`参数，因为我们的堆栈现在正在创建IAM资源：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once the deployment has completed, if you open the ECS dashboard in the AWS
    console and select Clusters, you should see a new cluster called xray-daemon-cluster,
    with a single service and two running tasks, in the FARGATE section:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署完成，如果您在AWS控制台中打开ECS仪表板并选择集群，您应该会看到一个名为xray-daemon-cluster的新集群，其中包含一个单一服务和两个正在运行的任务，在FARGATE部分：
- en: '![](assets/c46789ab-3cb2-4a26-b6bc-229781c40131.png)X-Ray daemon cluster'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c46789ab-3cb2-4a26-b6bc-229781c40131.png)X-Ray守护程序集群'
- en: 'If you select the cluster and click on the **xray-daemon-application-service**,
    you should see the ECS service discovery configuration in place on the Details
    tab:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择集群并单击**xray-daemon-application-service**，您应该在“详细信息”选项卡中看到ECS服务发现配置已经就位：
- en: '![](assets/b005f475-d3a7-4e40-a393-cf610c7882a4.png)X-Ray daemon service details'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b005f475-d3a7-4e40-a393-cf610c7882a4.png)X-Ray守护程序服务详细信息'
- en: 'Within the service discovery namespace, you should now find two address records
    attached to the `xray.services.dockerinaws.org` record set, which you can view
    by navigating to the Route 53 dashboard, selecting Hosted zones from the left-hand
    menu, and selecting the `services.dockerinaws.org` zone:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务发现命名空间中，您现在应该找到附加到`xray.services.dockerinaws.org`记录集的两个地址记录，您可以通过导航到Route
    53仪表板，从左侧菜单中选择托管区域，并选择`services.dockerinaws.org`区域来查看：
- en: '![](assets/fdcda94e-f9c6-49e2-87b9-b843c2465b05.png)Service discovery DNS records'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/fdcda94e-f9c6-49e2-87b9-b843c2465b05.png)服务发现DNS记录'
- en: Notice that there are two `A` records present, one for each ECS task that supports
    our ECS service. If you were to stop one of these ECS tasks, ECS would automatically
    remove the record from DNS, and then add a new `A` record once ECS restored the
    ECS service count to its desired count and started a replacement ECS task. This
    ensures that your service is highly available, and that applications that rely
    on your service can dynamically resolve an appropriate instance of your service.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里有两个`A`记录，每个支持我们的ECS服务的ECS任务一个。如果您停止其中一个ECS任务，ECS将自动从DNS中删除该记录，然后在ECS将ECS服务计数恢复到所需计数并启动替换的ECS任务后，添加一个新的`A`记录。这确保了您的服务具有高可用性，并且依赖于您的服务的应用程序可以动态解析适当的服务实例。
- en: Configuring the todobackend stack for X-Ray support
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为X-Ray支持配置todobackend堆栈
- en: With our X-Ray daemon service in place, we can now add support for X-Ray to
    the `todobackend-aws` stack. At the beginning of this chapter, you configured
    support for X-Ray in the todobackend application, and if you committed and pushed
    your changes, the continuous delivery pipeline you created in the last chapter
    should have already published an updated Docker image to ECR (if this is not the
    case, run the `make publish` command in the todobackend repository). The only
    other configuration that you need to perform is to update the security rules attached
    to your todobackend cluster instances to allow X-Ray communications, and to ensure
    that the Docker environment is configured with the appropriate environment variables
    that enable correct X-Ray operation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的X射线守护程序服务，我们现在可以为`todobackend-aws`堆栈添加对X射线的支持。在本章的开头，您配置了todobackend应用程序对X射线的支持，如果您提交并推送了更改，您在上一章中创建的持续交付流水线应该已经将更新的Docker镜像发布到了ECR（如果不是这种情况，请在todobackend存储库中运行`make
    publish`命令）。您需要执行的唯一其他配置是更新附加到todobackend集群实例的安全规则，以允许X射线通信，并确保Docker环境配置了适当的环境变量，以启用正确的X射线操作。
- en: 'The following example demonstrates adding a security rule to the `ApplicationAutoscalingSecurityGroup`
    resource in the `todobackend-aws` stack, which allows for X-Ray communications
    with the X-Ray daemon:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了在`todobackend-aws`堆栈中的`ApplicationAutoscalingSecurityGroup`资源中添加安全规则，该规则允许与X射线守护程序进行通信：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following example demonstrates configuring the environment settings for
    the todobackend container definition, within the `ApplicationTaskDefinition` resource:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了为`ApplicationTaskDefinition`资源中的todobackend容器定义配置环境设置：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding example, you added a variable called `AWS_XRAY_DAEMON_ADDRESS`,
    which references the `xray.services.dockerinaws.org` service endpoint of our X-Ray
    daemon service and must be expressed in the format `<hostname>:<port>`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您添加了一个名为`AWS_XRAY_DAEMON_ADDRESS`的变量，该变量引用了我们的X射线守护程序服务的`xray.services.dockerinaws.org`服务端点，并且必须以`<hostname>:<port>`的格式表示。
- en: You can override the service name used in your X-Ray traces be setting the `AWS_XRAY_TRACE_NAME`
    environment variable.  This would be important in our scenario where we have a
    dev and production instance of the todobackend application in the same account,
    and want to ensure each application environment has its own set of traces.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过设置`AWS_XRAY_TRACE_NAME`环境变量来覆盖X射线跟踪中使用的服务名称。在我们的场景中，我们在同一帐户中有todobackend应用程序的开发和生产实例，并希望确保每个应用程序环境都有自己的跟踪集。
- en: If you now commit and push all of your changes to the `todobackend-aws` repository,
    the continuous delivery pipeline from the previous chapter should detect the change
    and deploy your updated stack automatically, or alternatively you can run the
    `make deploy/dev` command to deploy your changes from the command line.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在提交并推送所有更改到`todobackend-aws`存储库，则上一章的持续交付流水线应该会检测到更改并自动部署您的更新堆栈，或者您可以通过命令行运行`make
    deploy/dev`命令来部署更改。
- en: Testing the X-Ray service
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试X射线服务
- en: After your changes have deployed successfully, browse to the todobackend URL
    for your environment and perform a few interactions with the application, such
    as adding a `todo` item.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功部署更改后，浏览到您环境的todobackend URL，并与应用程序进行一些交互，例如添加一个`todo`项目。
- en: 'If you next open the X-Ray dashboard from the AWS console (Services | Developer
    Tools | X-Ray) and select Service map from the left-hand menu, you should see
    a very simple map that includes the todobackend application:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您接下来从AWS控制台打开X射线仪表板（服务|开发人员工具|X射线）并从左侧菜单中选择服务地图，您应该会看到一个非常简单的地图，其中包括todobackend应用程序。
- en: '![](assets/51bba37a-3dbf-4f06-8d4f-ecc168183a1c.png)X-Ray service map'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/51bba37a-3dbf-4f06-8d4f-ecc168183a1c.png)X-Ray服务地图'
- en: In the preceding screenshot, I have clicked on the todobackend service, which
    displays the Service details pane on the right, showing information such as the
    response time distribution and response status responses. Also, notice that the
    service map includes the todobackend RDS instance, given that we configured our
    application to patch the `mysql-connector-python` library back in the previous
    example in this chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我点击了todobackend服务，显示了右侧的服务详情窗格，显示了响应时间分布和响应状态响应等信息。另外，请注意，服务地图包括todobackend
    RDS实例，因为我们在本章的前一个示例中配置了应用程序以修补`mysql-connector-python`库。
- en: 'If you click on the View traces button, the traces for that service will be
    displayed; notice that the X-Ray middleware for Django includes URL information
    that allows your traces to be grouped by URL:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击“查看跟踪”按钮，将显示该服务的跟踪；请注意，Django的X-Ray中间件包括URL信息，允许根据URL对跟踪进行分组：
- en: '![](assets/d25b61ac-61ec-4621-8b3d-99a298865260.png)X-Ray traces'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d25b61ac-61ec-4621-8b3d-99a298865260.png)X-Ray跟踪'
- en: In the preceding screenshot*,* notice that 85% of traces are hitting an IP address
    URL, which corresponds to the ongoing application load balancer health checks.
    If you click on the Age column in the Trace list to sort traces from newest to
    oldest, you should be able to see the requests that you made to the todobackend
    application, which, in my case, was a `POST` request to create a new `todo` item.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，请注意85%的跟踪都命中了一个IP地址URL，这对应于正在进行的应用程序负载均衡器健康检查。如果您点击跟踪列表中的“年龄”列，以从最新到最旧对跟踪进行排序，您应该能够看到您对todobackend应用程序所做的请求，对我来说，是一个创建新的`todo`项目的`POST`请求。
- en: 'You can view more details for the `POST` trace in the following screenshot*,*
    by clicking on the ID link:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击ID链接查看以下截图中`POST`跟踪的更多细节：
- en: '![](assets/9eaf6820-622f-422a-bbc3-6c5e41b1d710.png)X-Ray trace details'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9eaf6820-622f-422a-bbc3-6c5e41b1d710.png)X-Ray跟踪详情'
- en: In the preceding screenshot, you can see that the response took 218 ms to complete,
    in total, and that two database calls were made, which each took less than 2 ms.
    If you were using other libraries supported by the X-Ray SDK, you could also see
    trace information for calls made by those libraries; for example, any AWS service
    calls made via the boto3 library, such as copying a file to S3 or publishing a
    message to a Kinesis stream, would also be captured. Obviously, this type of information
    is very useful when troubleshooting performance issues for your application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，您可以看到响应总共花费了218毫秒，并且进行了两次数据库调用，每次调用都少于2毫秒。如果您正在使用X-Ray SDK支持的其他库，您还可以看到这些库所做调用的跟踪信息；例如，通过boto3库进行的任何AWS服务调用，比如将文件复制到S3或将消息发布到Kinesis流，也会被捕获。显然，这种信息在排除应用程序性能问题时非常有用。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to deploy Docker applications using the AWS
    Fargate service. To make things more interesting, you also learned how you can
    leverage ECS service discovery to automatically publish service reachability information
    for your application endpoints, which is an alternative to the more traditional
    approach of publishing your application endpoints behind a load balancer. And,
    to cap off what I'm sure you found to be a fun and interesting chapter, you added
    support for the AWS X-Ray service to the todobackend application and deployed
    an X-Ray daemon service, using Fargate to capture application traces.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用AWS Fargate服务部署Docker应用程序。为了使事情更有趣，您还学习了如何利用ECS服务发现自动发布应用程序端点的服务可达性信息，这是传统方法的替代方案，传统方法是将应用程序端点发布在负载均衡器后面。最后，为了结束这一定会让您觉得有趣和有趣的章节，您为todobackend应用程序添加了对AWS
    X-Ray服务的支持，并部署了一个X-Ray守护程序服务，使用Fargate来捕获应用程序跟踪。
- en: First, you learned how to add support for X-Ray to a Python Django application,
    which simply requires you to add an X-Ray middleware component that intercepts
    incoming requests, and to also patch support packages, such as the mysql-connector-python
    and boto3 libraries, which allows you to capture MySQL database calls and any
    AWS service calls that your application might make. You then created a Docker
    image for the X-Ray daemon, which you published to the Elastic Container Registry,
    to make it available for deployment in your AWS environment.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您学习了如何为Python Django应用程序添加对X-Ray的支持，这只需要您添加一个拦截传入请求的X-Ray中间件组件，并且还需要修补支持包，例如mysql-connector-python和boto3库，这允许您捕获MySQL数据库调用和应用程序可能进行的任何AWS服务调用。然后，您为X-Ray守护程序创建了一个Docker镜像，并将其发布到弹性容器注册表，以便在您的AWS环境中部署。
- en: The, you learned how to configure the supporting elements required for ECS service
    discovery, adding a service discovery namespace that creates a public or private
    DNS zone where service discovery service endpoints are maintained, and then creating
    a service discovery service for the X-Ray daemon, allowing your todobackend application
    (and other applications) to discover all active and healthy X-Ray daemon instances
    via logical DNS names.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您学习了如何配置ECS服务发现所需的支持元素，添加了一个服务发现命名空间，创建了一个公共或私有DNS区域，其中维护了服务发现服务端点，然后为X-Ray守护程序创建了一个服务发现服务，允许您的todobackend应用程序（以及其他应用程序）通过逻辑DNS名称发现所有活动和健康的X-Ray守护程序实例。
- en: With these components in place, you proceeded to creating an X-Ray daemon service
    using Fargate, creating an ECS task definition and an ECS service. The ECS task
    definition had a few specific requirements for supporting Fargate, including defining
    a separate task execution role that grants privileges to the underlying ECS agent
    and Fargate runtime, specifying Fargate as a supported launch type and ensuring
    that the awsvpc networking mode was configured. The ECS service that you created
    required you to configure a network configuration to support the awsvpc networking
    mode of your ECS task definition. You also added support for ECS service discovery
    by referencing the service discovery service that you created earlier in the chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些组件，您继续创建了一个使用Fargate的X-Ray守护程序服务，创建了一个ECS任务定义和一个ECS服务。ECS任务定义对支持Fargate有一些特定要求，包括定义一个单独的任务执行角色，该角色授予基础ECS代理和Fargate运行时的特权，指定Fargate作为支持的启动类型，并确保配置了awsvpc网络模式。您创建的ECS服务要求您配置网络配置以支持ECS任务定义的awsvpc网络模式。您还通过引用本章早些时候创建的服务发现服务，为ECS服务添加了对ECS服务发现的支持。
- en: Finally, you configured your existing ECS task definitions in the todobackend
    stack, to specify the service discovery service name as the `AWS_XRAY_DAEMON_ADDRESS`
    variable; after deploying your changes, you learned how to use X-Ray traces to
    analyze the performance of incoming requests to your application, with the ability
    to profile individual calls to the todobackend application database.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您在todobackend堆栈中配置了现有的ECS任务定义，以将服务发现服务名称指定为`AWS_XRAY_DAEMON_ADDRESS`变量；在部署更改后，您学会了如何使用X-Ray跟踪来分析传入请求到您的应用程序的性能，并能够对todobackend应用程序数据库的个别调用进行分析。
- en: In the next chapter, you will learn about another AWS service that supports
    Docker applications, called Elastic Beanstalk. It provides a **platform-as-a-service
    (Paas)** approach to deploying and running your container-based applications in
    AWS.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解另一个支持Docker应用程序的AWS服务，称为Elastic Beanstalk。它提供了一种平台即服务（PaaS）的方法，用于在AWS中部署和运行基于容器的应用程序。
- en: Questions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True/false: Fargate requires you to create an ECS cluster.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fargate是否需要您创建ECS集群？
- en: When configuring Fargate, what networking modes are supported?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置Fargate时，支持哪些网络模式？
- en: 'True/false: Fargate separates ECS agent **control plane** network communications
    from ECS task **data plane** network communications.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：Fargate将ECS代理的控制平面网络通信与ECS任务的数据平面网络通信分开。
- en: You deploy a new ECS service using Fargate, which fails, with an error indicating
    that the ECR image specified in the task definition cannot be pulled. You verify
    that the image name and tag are correct, and that the IAM role referenced on the
    `TaskRoleArn` property of the task definition permits access to the ECR repository.
    What is the most likely cause of this error?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用Fargate部署一个新的ECS服务，但失败了，出现错误指示无法拉取任务定义中指定的ECR镜像。您验证了镜像名称和标签是正确的，并且任务定义的`TaskRoleArn`属性引用的IAM角色允许访问ECR存储库。这个错误最有可能的原因是什么？
- en: You are determining the best technology to deploy your container-based applications
    in AWS. Your organization deploys Splunk to collect logs for all applications,
    and uses New Relic to collect performance metrics. Is Fargate a suitable technology,
    based on these requirements?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据这些要求，您正在确定在AWS中部署基于容器的应用程序的最佳技术。您的组织部署Splunk来收集所有应用程序的日志，并使用New Relic来收集性能指标。基于这些要求，Fargate是否是一种合适的技术？
- en: 'True/false: ECS service discovery uses Consul to publish service registration
    information.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：ECS服务发现使用Consul发布服务注册信息。
- en: Which service discovery resource creates a Route 53 zone?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种服务发现资源创建了Route 53区域？
- en: You configure an ECS task definition to use Fargate, and specify that the task
    should be allocated 400 CPU units and 600 MB of memory. When you deploy an ECS
    service that uses the task definition, the deployment fails. How can you resolve
    this issue?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您配置了一个ECS任务定义来使用Fargate，并指定任务应分配400个CPU单位和600 MB的内存。当您部署使用任务定义的ECS服务时，部署失败了。您如何解决这个问题？
- en: By default, which network protocol and port are used for AWS X-Ray communications?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，AWS X-Ray通信使用哪种网络协议和端口？
- en: 'True/false: When you add X-Ray support to your container-based applications,
    they will publish traces to the AWS X-Ray service.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：当您为基于容器的应用程序添加X-Ray支持时，它们将发布跟踪到AWS X-Ray服务。
- en: Further reading
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can check the following links for more information about the topics covered
    in this chapter:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看本章涵盖的主题的更多信息的以下链接：
- en: AWS Fargate on Amazon ECS: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html)
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Fargate on Amazon ECS: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html)
- en: Amazon ECS Task Execution IAM Role: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon ECS任务执行IAM角色: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)'
- en: ECS Service Discovery: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html)
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ECS 服务发现: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html)'
- en: AWS X-Ray Developer Guide: [https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html](https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AWS X-Ray 开发人员指南: [https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html](https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html)'
- en: AWS X-Ray Python SDK: [https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-python.html](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-python.html)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AWS X-Ray Python SDK: [https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-python.html](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-python.html)'
- en: Running the X-Ray Daemon on Amazon ECS: [https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-ecs.html](https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-ecs.html)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在Amazon ECS上运行X-Ray守护程序: [https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-ecs.html](https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-ecs.html)'
- en: CloudFormation Service Discovery Public Namespace Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation 服务发现公共命名空间资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html)'
- en: CloudFormation Service Discovery Private Namespace Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation 服务发现私有命名空间资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html)'
- en: CloudFormation Service Discovery Service Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation 服务发现服务资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html)'
- en: CloudFormation ECS Task Definition Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation ECS任务定义资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html)'
- en: CloudFormation ECS Service Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation ECS服务资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)'
