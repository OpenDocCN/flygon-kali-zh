- en: Making Apps Responsive with Asynchronous Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异步编程使应用程序响应
- en: 'This chapter will introduce you to asynchronous programming. It will cover
    the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍异步编程。它将涵盖以下内容：
- en: Return types of asynchronous functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步函数的返回类型
- en: Handling tasks in asynchronous programming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在异步编程中处理任务
- en: Exception handling in asynchronous programming
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程中的异常处理
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Asynchronous programming is an exciting feature in C#. It allows you to continue
    program execution on the main thread while a long-running task finishes its execution.
    When this long-running task is complete, a thread from the thread pool will return
    to the method containing so that the long-running task can continue execution.
    The best way to learn and understand asynchronous programming is to experience
    it. The following recipes will illustrate some of the basics to you.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程是C#中的一个令人兴奋的特性。它允许您在主线程上继续程序执行，同时长时间运行的任务完成其执行。当这个长时间运行的任务完成时，来自线程池的一个线程将返回到包含该任务的方法，以便长时间运行的任务可以继续执行。学习和理解异步编程的最佳方法是亲身体验。以下示例将向您说明一些基础知识。
- en: Return types of asynchronous functions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步函数的返回类型
- en: 'In asynchronous programming, the `async` methods can have three possible return
    types. These are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在异步编程中，`async`方法可以具有三种可能的返回类型。它们如下：
- en: '`void`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void`'
- en: '`Task`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Task`'
- en: '`Task<TResult>`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Task<TResult>`'
- en: We will take a look at each return type in the following recipe.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将在下一个示例中查看每种返回类型。 '
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: What could be the use of a `void` return type in asynchronous methods? Generally,
    `void` is used with event handlers. Just bear in mind that `void` returns nothing,
    so you can't wait for it. Therefore, if you call a `void` return type asynchronous
    method, your calling code should be able to continue executing code without having
    to wait for the asynchronous method to complete.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 异步方法中`void`返回类型的用途是什么？通常，`void`与事件处理程序一起使用。只要记住`void`不返回任何内容，因此您无法等待它。因此，如果调用`void`返回类型的异步方法，您的调用代码应能够继续执行代码，而无需等待异步方法完成。
- en: With asynchronous methods that have a return type of `Task`, you can utilize
    the `await` operator to pause the execution of the current thread until the called
    asynchronous method has completed. Keep in mind that an asynchronous method that
    returns a type of `Task` basically does not return an operand. Therefore, if it
    was written as a synchronous method, it would be a `void` return type method.
    This statement might be confusing, but it will become clear in the following recipes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用返回类型为`Task`的异步方法，您可以利用`await`运算符暂停当前线程的执行，直到调用的异步方法完成。请记住，返回类型为`Task`的异步方法基本上不返回操作数。因此，如果它被编写为同步方法，它将是一个`void`返回类型的方法。这个说法可能令人困惑，但在接下来的示例中将会变得清晰。
- en: Finally, asynchronous methods that have a `return` statement have a return type
    of `TResult`. In other words, if the asynchronous method returns a boolean, you
    would create an asynchronous method with a return type of `Task<bool>`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，具有`return`语句的异步方法具有`TResult`的返回类型。换句话说，如果异步方法返回布尔值，您将创建一个返回类型为`Task<bool>`的异步方法。
- en: Let's start with the `void` return type asynchronous method.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`void`返回类型的异步方法开始。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new Windows forms project in Visual Studio called `winformAsync`. We will
    be creating a new Windows forms application so that we can create a button-click
    event.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建一个名为`winformAsync`的新Windows表单项目。我们将创建一个新的Windows表单应用程序，以便我们可以创建一个按钮点击事件。
- en: 'On the winformAsync Forms Designer, openToolbox and select the Button control,
    which is found under the All Windows Forms node:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在winformAsync Forms Designer上，打开工具箱并选择按钮控件，该控件位于所有Windows Forms节点下：
- en: '![](img/B06434_07_08.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_08.png)'
- en: Drag the Button control onto the Form1 designer.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮控件拖放到Form1设计器上。
- en: 'With the Button control selected, double-click on the control to create the
    click event in the code behind. Visual Studio will insert the event code for you:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择按钮控件后，双击控件以在代码后台创建点击事件。Visual Studio将为您插入事件代码：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Change the `button1_Click` event and add the `async` keyword to the click event.
    This is an example of a `void` returning an asynchronous method:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`button1_Click`事件并在点击事件中添加`async`关键字。这是一个`void`返回异步方法的示例：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, create a new class called `AsyncDemo`:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`AsyncDemo`的新类：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next method to add to the `AsyncDemo` class is the asynchronous method
    that returns `TResult` (in this case, a boolean). This method simply checks whether
    the current year is a leap year. It then returns a boolean to the calling code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加到`AsyncDemo`类的下一个方法是异步方法，该方法返回`TResult`（在本例中为布尔值）。此方法只是检查当前年份是否为闰年。然后将布尔值返回给调用代码：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next method to add is the `void` returning method that returns a `Task`
    type so that it allows you to `await` the method. The method itself does not return
    any result, making it a `void` returning method. However, in order to use the
    `await` keyword, you to return the `Task` type from this asynchronous method:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加的下一个方法是返回`void`的方法，该方法返回`Task`类型，以便您可以`await`该方法。该方法本身不返回任何结果，使其成为`void`返回方法。但是，为了使用`await`关键字，您需要从这个异步方法返回`Task`类型：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, add a method that will call the previous asynchronous methods and
    display the result of the leap year check. You will notice that we are using the
    `await` keyword with both method calls:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个方法，该方法将调用之前的异步方法并显示闰年检查的结果。您会注意到我们在两个方法调用中都使用了`await`关键字：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the button click, add the following code that calls the long-running task
    asynchronously:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按钮点击事件中，添加以下代码，以异步方式调用长时间运行的任务：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running your application will display the Windows forms application:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序将显示Windows表单应用程序：
- en: '![](img/B06434_07_13.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_13.png)'
- en: Before clicking on the button1 button, ensure that the Output window is visible.
    To do this, click on View and then Output. You can also just hold down *Ctrl* + *W*
    + *O*.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单击button1按钮之前，请确保输出窗口可见。要执行此操作，请单击“查看”，然后单击“输出”。您也可以按住*Ctrl* + *W* + *O*。
- en: '![](img/B06434_07_14.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_14.png)'
- en: Displaying the Output window will allow us to see the `Console.Writeline()`
    outputs that we added to the code in the `AsyncDemo` class and in the Windows
    application.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示输出窗口将允许我们看到我们在`AsyncDemo`类和Windows应用程序中添加的`Console.Writeline()`输出。
- en: 'Clicking on the button1 button will display the outputs to our Output window.
    Throughout this code execution, the form remains responsive:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击button1按钮将在输出窗口中显示输出。在代码执行期间，窗体保持响应：
- en: '![](img/B06434_07_15-1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_15-1.png)'
- en: 'Finally, you can also use the `await` operator in separate calls. Modify the
    code in the `LongTask()` method as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您还可以在单独的调用中使用`await`运算符。修改`LongTask()`方法中的代码如下：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the preceding code, we saw the `void` returning type asynchronous method
    that was used in the `button1_Click` event. We also created a `Task` returning
    method that returns nothing (that would be a `void` if used in synchronous programming),
    but returning a `Task` type allows us to `await` the method. Finally, we created
    a `Task<TResult>` returning method that performs a task and returns the result
    to the calling code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们看到了`void`返回类型的异步方法，该方法在`button1_Click`事件中使用。我们还创建了一个返回`Task`的方法，该方法不返回任何内容（如果在同步编程中使用，将是`void`），但返回`Task`类型允许我们`await`该方法。最后，我们创建了一个返回`Task<TResult>`的方法，该方法执行任务并将结果返回给调用代码。
- en: Handling tasks in asynchronous programming
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在异步编程中处理任务
- en: '**Task-based Asynchronous Pattern** (**TAP**) is now the recommended method
    to create asynchronous code. It executes asynchronously on a thread from the thread
    pool and does not execute synchronously on the main thread of your application.
    It allows us to check the task''s state by calling the `Status` property.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于任务的异步模式**（**TAP**）现在是创建异步代码的推荐方法。它在线程池中异步执行，并不在应用程序的主线程上同步执行。它允许我们通过调用`Status`属性来检查任务的状态。'
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create a task to read a very large text file. This will be accomplished
    using an asynchronous `Task`. Be sure that you have added the `using System.IO;`
    namespace to your Windows forms application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个任务来读取一个非常大的文本文件。这将通过使用异步`Task`来完成。确保您已将`using System.IO;`命名空间添加到您的Windows窗体应用程序中。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a large text file (we called ours `taskFile.txt`) and place it in a
    folder called `C:\temp\taskFile\`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个大型文本文件（我们称之为`taskFile.txt`）并将其放在名为`C:\temp\taskFile\`的文件夹中：
- en: '![](img/B06434_07_16.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_16.png)'
- en: 'In the `AsyncDemo` class, create a method called `ReadBigFile()` that returns
    a `Task<TResult>` type, which will be used to return an integer of bytes read
    from our big text file:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AsyncDemo`类中，创建一个名为`ReadBigFile()`的方法，该方法返回一个`Task<TResult>`类型，该类型将用于返回从我们的大型文本文件中读取的字节数的整数：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following code to open and read the file bytes. You will see that we
    are using the `ReadAsync()` method that asynchronously reads a sequence of bytes
    from the stream and advances the position of that stream by the number of bytes
    read from that stream. You will also notice that we are using a buffer to read
    those bytes:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到打开和读取文件字节的代码中。您将看到我们正在使用`ReadAsync()`方法，该方法异步从流中读取一系列字节，并通过从该流中读取的字节数推进该流的位置。您还会注意到我们正在使用缓冲区来读取这些字节：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The exceptions you can expect to handle from the `ReadAsync()` method are `ArgumentNullException`,
    `ArgumentOutOfRangeException`, `ArgumentException`, `NotSupportedException`, `ObjectDisposedException`,
    and `InvalidOperatorException`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以期望从`ReadAsync()`方法处理的异常包括`ArgumentNullException`、`ArgumentOutOfRangeException`、`ArgumentException`、`NotSupportedException`、`ObjectDisposedException`和`InvalidOperatorException`。
- en: 'Finally, add the final section of code just after the `var readBytes = bigFile.ReadAsync(bigFileBuffer,
    0, (int)bigFile.Length);` line that uses a lambda expression to specify the work
    that the task needs to perform. In this case, it is to read the bytes in the file:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`var readBytes = bigFile.ReadAsync(bigFileBuffer, 0, (int)bigFile.Length);`行之后添加最终的代码部分，该行使用lambda表达式指定任务需要执行的工作。在这种情况下，它是读取文件中的字节：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you''ve not done so in the previous recipe, add a button to your Windows
    forms application''s Forms Designer. In the winformAsync Forms Designer, open
    Toolbox and select the Button control, which is found under the All Windows Forms
    node:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前没有这样做，请在Windows窗体应用程序的Forms Designer中添加一个按钮。在winformAsync Forms Designer中，打开工具箱并选择Button控件，该控件位于所有Windows窗体节点下：
- en: '![](img/B06434_07_08.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_08.png)'
- en: 'Drag the Button control onto the Form1 designer:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Button控件拖放到Form1设计器上：
- en: 'With the Button control selected, double-click on the control to create the
    click event in the code behind. Visual Studio will insert the event code for you:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Button控件，双击控件以在代码后台创建单击事件。Visual Studio将为您插入事件代码：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Change the `button1_Click` event and add the `async` keyword to the click event.
    This is an example of a `void` returning asynchronous method:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`button1_Click`事件并在单击事件中添加`async`关键字。这是一个`void`返回的异步方法的示例：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, make sure that you add code to call the `AsyncDemo` class''s `ReadBigFile()`
    method asynchronously. Remember to read the result from the method (which are
    the bytes read) into an integer variable:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，请确保您添加代码以异步调用`AsyncDemo`类的`ReadBigFile()`方法。记得将方法的结果（即读取的字节数）读入整数变量中：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running your application will display the Windows forms application:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的应用程序将显示Windows窗体应用程序：
- en: '![](img/B06434_07_13-1.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_13-1.png)'
- en: 'Before clicking on the button1 button, ensure that the Output window is visible:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单击button1按钮之前，请确保输出窗口可见：
- en: '![](img/B06434_07_14.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_14.png)'
- en: From the View menu, click on the Output menu item or type *Ctrl* + *W * + *O* to
    display the Output window. This will allow us to see the `Console.Writeline()`
    outputs that we added to the code in the `AsyncDemo` class and in the Windows
    application.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“视图”菜单中，单击“输出”菜单项，或键入*Ctrl* + *W* + *O*以显示“输出”窗口。这将允许我们查看我们在`AsyncDemo`类和Windows应用程序中添加的`Console.Writeline()`输出的内容。
- en: 'Clicking on the button1 button will display the outputs to our Output window.
    Throughout this code execution, the form remains responsive:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击button1按钮将在输出窗口中显示输出。在代码执行期间，窗体保持响应：
- en: '![](img/B06434_07_17.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_17.png)'
- en: Take note, though, that the information displayed in your Output window will
    differ from the screenshot. This is because the file you used is different from
    mine.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，输出窗口中显示的信息将与屏幕截图不同。这是因为您使用的文件与我的不同。
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '工作原理... '
- en: The task is executed on a separate thread from the thread pool. This allows
    the application to remain responsive while the large file is being processed.
    Tasks can be used in multiple ways to improve your code. This recipe is but one
    example.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 任务在来自线程池的单独线程上执行。这允许应用程序在处理大文件时保持响应。任务可以以多种方式使用以改进代码。这个示例只是其中之一。
- en: Exception handling in asynchronous programming
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程中的异常处理
- en: Exception handling in asynchronous programming has always been a challenge.
    This was especially true in the catch blocks. The following feature (introduced
    in C# 6.0) allows you to write asynchronous code inside the `catch` and `finally`
    blocks of your exception handlers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程中的异常处理一直是一个挑战。特别是在catch块中。以下功能（在C# 6.0中引入）允许您在异常处理程序的`catch`和`finally`块中编写异步代码。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The application will simulate the action of reading a log file. Assume that
    a third-party system always makes a backup of the log file before processing it
    in another application. While this processing is happening, the log file is deleted
    and recreated. Our application, however, needs to read this log file on a periodic
    basis. We therefore need to be prepared for the case where the file does not exist
    in the location we expect it in. Therefore, we will purposely omit the main log
    file so that we can force an error.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将模拟读取日志文件的操作。假设第三方系统总是在在另一个应用程序中处理日志文件之前备份日志文件。在进行此处理时，日志文件将被删除并重新创建。但是，我们的应用程序需要定期读取此日志文件。因此，我们需要为文件不存在于我们期望的位置的情况做好准备。因此，我们将故意省略主日志文件，以便我们可以强制出现错误。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a text file and two folders to contain the log files. We will, however,
    only create a single log file in the `BackupLog` folder. Name your text file `taskFile.txt`
    and copy it to the `BackupLog` folder. The `MainLog` folder will remain empty:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文本文件和两个文件夹来包含日志文件。但是，我们只会在`BackupLog`文件夹中创建一个单独的日志文件。将您的文本文件命名为`taskFile.txt`并将其复制到`BackupLog`文件夹中。`MainLog`文件夹将保持空白：
- en: '![](img/B06434_07_18.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_18.png)'
- en: 'In our `AsyncDemo` class, write a method to read the log file in the folder
    specified by the `enum` value:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`AsyncDemo`类中，编写一个方法来读取由`enum`值指定的文件夹中的日志文件：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the `enum` value as shown here:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建如下所示的`enum`值：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will then create a main `ReadLogFile()` method that tries to read the main
    log file. As we have not created the log file in the `MainLog` folder, the code
    will throw a `FileNotFoundException`. It will then run the asynchronous method
    and `await` it in the `catch` block of the `ReadLogFile()` method (something that was
    impossible in the previous versions of C#), returning the bytes read to the calling
    code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个主`ReadLogFile()`方法，尝试读取主日志文件。由于我们尚未在`MainLog`文件夹中创建日志文件，因此代码将抛出`FileNotFoundException`。然后在`ReadLogFile()`方法的`catch`块中运行异步方法并`await`它（这在以前的C#版本中是不可能的），将读取的字节返回给调用代码：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you''ve not done so in the previous recipe, add a button to your Windows
    forms application''s Forms Designer. On the winformAsync Forms Designer, open
    Toolbox and select the Button control, which is found under the All Windows Forms
    node:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前没有这样做，请在Windows窗体应用程序的Forms Designer中添加一个按钮。在winformAsync Forms Designer中，打开工具箱并选择Button控件，该控件位于所有Windows窗体节点下：
- en: '![](img/B06434_07_08-1.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_08-1.png)'
- en: 'Drag the Button control onto the Form1 designer:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Button控件拖放到Form1设计器上：
- en: 'With the Button control selected, double-click on the control to create the
    click event in the code behind. Visual Studio will insert the event code for you:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Button控件后，双击控件以在代码后台创建单击事件。Visual Studio将为您插入事件代码：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Change the `button1_Click` event and add the `async` keyword to the click event.
    This is an example of a `void` returning an asynchronous method:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`button1_Click`事件并在单击事件中添加`async`关键字。这是一个`void`返回异步方法的示例：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we will write the code to create a new instance of the `AsyncDemo` class
    and attempt to read the main log file. In a real-world example, it is at this
    point that the code does not know that the main log file does not exist:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编写代码来创建`AsyncDemo`类的新实例，并尝试读取主日志文件。在实际示例中，此时代码并不知道主日志文件不存在：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Running your application will display the Windows forms application:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序将显示Windows窗体应用程序：
- en: '![](img/B06434_07_13-1.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_13-1.png)'
- en: 'Before clicking on the button1 button, ensure that the Output window is visible:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单击button1按钮之前，请确保输出窗口可见：
- en: '![](img/B06434_07_14.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_14.png)'
- en: From the View menu, click on the Output menu item or type *Ctrl* + *W* + *O* to
    display the Output window. This will allow us to see the `Console.Writeline()`
    outputs that we added to the code in the `AsyncDemo` class and in the Windows
    application.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“视图”菜单中，单击“输出”菜单项，或键入*Ctrl* + *W* + *O*以显示“输出”窗口。这将允许我们查看我们在`AsyncDemo`类和Windows应用程序中添加的`Console.Writeline()`输出的内容。
- en: 'To simulate a file not found exception, we deleted the file from the `MainLog`
    folder. You will see that the exception is thrown, and the `catch` block runs
    the code to read the backup log file instead:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了模拟文件未找到异常，我们从`MainLog`文件夹中删除了文件。您会看到异常被抛出，`catch`块运行代码来读取备份日志文件：
- en: '![](img/B06434_07_19.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_07_19.png)'
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The fact that we can await in `catch` and `finally` blocks allows developers
    much more flexibility because asynchronous results can consistently be awaited
    throughout the application. As you can see from the code we wrote, as soon as
    the exception was thrown, we asynchronously read the file read method for the
    backup file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`catch`和`finally`块中等待的事实使开发人员拥有更大的灵活性，因为异步结果可以在整个应用程序中一致地等待。正如您从我们编写的代码中可以看到的，一旦异常被抛出，我们就会异步地读取备份文件的读取方法。
