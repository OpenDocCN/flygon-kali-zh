["```cs\nEnter Value:<asp:TextBoxID=\"TextBox1\" runat=\"server\"></asp:TextBox>\n```", "```cs\n<asp:ButtonID=\"Button1\" runat=\"server\" Text=\"Search\" />\n```", "```cs\nusing System.Xml.Linq;\nusing System.Linq;\n```", "```cs\nsampLabel.Text = \"\";\n```", "```cs\nXElement store = new XElement(\"store\",\n```", "```cs\nnew XElement(\"shoes\",\n```", "```cs\nnew XElement(\"brand\", \"Nike\", new XAttribute(\"price\", \"65\")),\n```", "```cs\nnew XElement(\"brand\", \"Stacy Adams\", new XAttribute(\"price\", \"120\")),\n```", "```cs\nnew XElement(\"brand\", \"Florsheim\", new XAttribute(\"price\", \"90\"))));\n```", "```cs\nstore.Save(@\"c:\\data\\storefile.xml\");\n```", "```cs\nvar shoeSearch = from shoes in store.Descendants(\"shoes\").Descendants(\"brand\")\n```", "```cs\nwhere (decimal)shoes.Attribute(\"price\") >decimal.Parse(TextBox1.Text)\n```", "```cs\nselect shoes;\n```", "```cs\nforeach(XElement shoeBrand in shoeSearch)\n```", "```cs\nsampLabel.Text += $\"<br>Brand:{shoeBrand}<br>Price:{(decimal)shoeBrand.Attribute(\"price\"):C}\";\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\nusing System.Xml.Linq;\nusing System.Linq;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        //clear label on every button click so stuff does not accumulate\n        sampLabel.Text = \"\";\n        //create a nice XML tree structure for searching: store is the \n        //root, inside that is shoes,\n        //and then under shoes are three different brands\n        XElement store = new XElement(\"store\",\n                            new XElement(\"shoes\",\n                            new XElement(\"brand\",\"Nike\", \n                            new XAttribute(\"price\",\"65\")),\n                            new XElement(\"brand\", \"Stacy Adams\", \n                            new XAttribute(\"price\",\"120\")),\n                            new XElement(\"brand\", \"Florsheim\", \n                            new XAttribute(\"price\",\"90\"))));\n        //save file to drive to confirm it looks like healthy XML\n        store.Save(@\"c:\\data\\storefile.xml\");\n        //search down to the level of the price attribute, and compare that\n        //value against the value entered in the search box by the user\n        var shoeSearch = from shoes in store.Descendants(\"shoes\").Descendants(\"brand\")\n        where (decimal)shoes.Attribute(\"price\") > decimal.Parse(TextBox1.Text)select shoes;\n        //display all the shoe brands, and the prices\n        foreach(XElement shoeBrand in shoeSearch)\n        {\n            sampLabel.Text += $\"<br>Brand:{shoeBrand}<br>Price:{(decimal)shoeBrand.Attribute(\"price\"):C}\";\n        }\n    }\n} \n```"]