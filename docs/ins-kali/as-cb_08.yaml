- en: Chapter 8. Improving Quality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。提高质量
- en: You have just finished coding your app. Now what? Get it onto the Play Store
    as quickly as possible!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚完成了应用的编码。现在呢？尽快将其放到Play商店上！
- en: No wait, you are not done yet! Did you test your app properly? Will it work
    on any Android version? On any device? In all circumstances?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不要等待，您还没有完成！您是否正确测试了您的应用？它是否适用于任何Android版本？在任何设备上？在任何情况下？
- en: 'In this chapter, we will focus on:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注：
- en: Patterns and support annotations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式和支持注释
- en: Unit testing using Robolectrics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Robolectrics进行单元测试
- en: Code analysis
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码分析
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: There are some common pitfalls to avoid and some patterns that you may want
    to apply in order to improve the quality of your app. You have seen some of them
    in the previous chapters already. Also, there are some interesting tools that
    can be used to test and analyze your code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些常见的陷阱要避免，以及一些模式，您可能希望应用以提高应用程序的质量。您已经在之前的章节中看到了其中一些。此外，还有一些有趣的工具可以用来测试和分析您的代码。
- en: 'In the following road map, you will notice that there are different stages
    that you need to complete before you can go live with your app:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的路线图中，您会注意到在将应用上线之前，您需要完成不同的阶段：
- en: '![Introduction](img/B04299_08_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/B04299_08_01.jpg)'
- en: The structure of your code, robustness, maintainability, and how well it complies
    with the functional requirements are key elements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码结构、健壮性、可维护性以及其与功能要求的符合程度是关键因素。
- en: Functional quality is measured through software testing, for which we need to
    distribute our app to our beta testers. We will discuss this in [Chapter 10](ch10.html
    "Chapter 10. Beta Testing Your Apps"), *Beta Testing Your Apps*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 功能质量通过软件测试来衡量，因此我们需要将应用分发给我们的测试人员。我们将在[第10章](ch10.html "第10章。测试您的应用程序")中讨论这一点，*测试您的应用程序*。
- en: Structural quality is evaluated by running unit tests and code inspections manually
    (peer review) or using tools such as Android Lint, which you will learn more about
    in the final recipe within this chapter. Now the question is how well does the
    architecture of the code meet the demands of good software engineering?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行单元测试和手动代码检查（同行审查）或使用诸如Android Lint之类的工具来评估结构质量，您将在本章的最后一个配方中了解更多有关它。现在的问题是代码架构是否满足良好软件工程的要求？
- en: 'In general, there are some interesting principles that will help you to improve
    the quality of your code. Some of them are listed here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，有一些有趣的原则将帮助您提高代码的质量。其中一些列在这里：
- en: Learn the activity lifecycle and use fragments in the right way.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习活动生命周期，并以正确的方式使用片段。
- en: Don't allocate memory if it can be avoided.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可以避免，就不要分配内存。
- en: Avoid fragments and activities that are too heavy.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免过于沉重的片段和活动。
- en: Consider a **Model View Controller** (**MVC**) approach. Apply the correct patterns.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑**模型视图控制器**（**MVC**）方法。应用正确的模式。
- en: Solve a problem once at a single spot. **Do not Repeat Yourself** (**DRY**).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个地方解决一次问题。**不要重复自己**（**DRY**）。
- en: 'Don''t do work that you do not need to do (yet). Also known as: **You Aren''t**
    **Gonna Need It** (**YAGNI**).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要做不需要做的工作（尚未）。也被称为：**你不会需要它**（**YAGNI**）。
- en: The next recipe will give you an idea of what patterns are and why you would
    want to apply them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个配方将让您了解模式是什么，以及为什么您会想要应用它们。
- en: Patterns and support annotations
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式和支持注释
- en: Quality is a serious business so we will combine it with some fun. We will be
    creating a quiz app in the upcoming recipe. We will use Google Play services for
    this, and we will have a look at patterns that we can apply to our app, in particular
    the MVC and **Model View Presenter** (**MVP**) approach.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 质量是一项严肃的业务，因此我们将把它与一些乐趣结合起来。在即将到来的配方中，我们将创建一个测验应用。我们将使用Google Play服务进行此操作，并且我们将研究可以应用于我们的应用的模式，特别是MVC和**模型视图控制器**（**MVP**）方法。
- en: So what actually is a design pattern? A design pattern is a solution for a common
    problem. We can reuse such a pattern anywhere. There is no need to reinvent the
    wheel (unless you can think of a better one of course) and there is no need to
    repeat ourselves.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么设计模式实际上是什么？设计模式是常见问题的解决方案。我们可以在任何地方重用这样的模式。没有必要重新发明轮子（除非您当然可以想到更好的轮子），也没有必要重复自己。
- en: Patterns are best practices that we can trust on. They can help us to speed
    up the development process, including testing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 模式是我们可以信任的最佳实践。它们可以帮助我们加快开发过程，包括测试。
- en: 'Some of the patterns are:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模式包括：
- en: MVC
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC
- en: MVP
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVP
- en: Observable
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察的
- en: Factory
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂
- en: Singleton
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单例
- en: Support annotations
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持注释
- en: Google Play services
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Play服务
- en: MVC
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MVC
- en: MVC is most suitable for larger projects. The benefit of this pattern is the
    separation of concerns. We can separate our UI code from the business logic. A
    controller will be responsible for which view is being displayed. It will get
    data from another layer, a repository-a-like class that will get its data from
    somewhere, and pass that data through a model (or list of models) to the UI. The
    controller has no clue where the data is coming from and how it is being displayed.
    These are tasks of the repository class and the UI, respectively.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MVC最适合较大的项目。这种模式的好处是关注点的分离。我们可以将UI代码与业务逻辑分开。控制器将负责显示哪个视图。它将从另一层获取数据，一个类似存储库的类，该类将从某处获取其数据，并通过模型（或模型列表）将数据传递给UI。控制器不知道数据来自何处以及如何显示。这些是存储库类和UI的任务，分别。
- en: MVP
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MVP
- en: MVP is a more suitable pattern to use with Android app development in most cases
    because of the nature of activities and fragments. With MVP patterns, a presenter
    contains the UI logic for a view. All invocations from the view are delegated
    directly to it. The presenter will communicate with the view through an interface,
    allowing us to create unit tests with mocked data later.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，MVP是与Android应用程序开发一起使用的更合适的模式，因为活动和片段的性质。使用MVP模式，一个Presenter包含视图的UI逻辑。视图的所有调用都直接委托给它。Presenter将通过接口与视图通信，允许我们稍后使用模拟数据创建单元测试。
- en: The observer pattern
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察者模式
- en: We saw this pattern in [Chapter 7](ch07.html "Chapter 7. Content Providers and
    Observers"), *Content Providers and Observers*, already. An observer observes
    changes in another object.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第7章](ch07.html "第7章。内容提供者和观察者")中已经看到了这种模式，*内容提供者和观察者*。观察者观察另一个对象的变化。
- en: The factory pattern
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工厂模式
- en: This pattern helps to create an object. The bitmap factory that we have been
    using for previous recipes (and that we will use again in this recipe) is a great
    example of the factory pattern.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式有助于创建对象。我们之前使用过的位图工厂（并且我们将在本教程中再次使用）是工厂模式的一个很好的例子。
- en: The singleton
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单例
- en: The singleton pattern will prevent us from having multiple instances of an object.
    Typically, it is a (class) method that returns an instance. It will be created
    if it does not exist or else it will just return the previously created instance.
    The application class is an example of the singleton pattern.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 单例模式将防止我们拥有对象的多个实例。通常，它是一个（类）方法，返回一个实例。如果它不存在，它将被创建，否则它将返回先前创建的实例。应用程序类就是单例模式的一个例子。
- en: Support annotations
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持注释
- en: Support annotations can help us to provide hints to code inspection tools, such
    as lint. They can help you detect problems such as null pointer exceptions and
    resource type conflicts just by adding metadata tags and running code inspections.
    The support library itself has been annotated with these annotations. Yes, they
    eat their own dog food, which proves that using annotations is the way to go.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 支持注释可以帮助我们向代码检查工具（如lint）提供提示。它们可以帮助您通过添加元数据标签并运行代码检查来检测问题，例如空指针异常和资源类型冲突。支持库本身已经用这些注释进行了注释。是的，他们自己也在使用注释，这证明使用注释是正确的方法。
- en: 'There are basically three types of annotations that we can use: Nullness annotations,
    resource type annotations, and IntDef \ StringDef annotations. For example, we
    can use the `@NonNull` annotation to indicate that a given parameter cannot be
    null, or we can use the `@Nullable` annotation to indicate that a return value
    can be null.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上有三种我们可以使用的注释类型：空值注释、资源类型注释和IntDef \ StringDef注释。例如，我们可以使用`@NonNull`注释来指示给定参数不能为空，或者我们可以使用`@Nullable`注释来指示返回值可以为空。
- en: Google Play services
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Play服务
- en: The Play Games SDK provides cross-platform Google Play game services that let
    you easily integrate popular gaming features, such as achievements, leader boards,
    saved games, and real-time multiplayer (on Android) options in your tablet and
    mobile games.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Play Games SDK提供跨平台的Google Play游戏服务，让您可以轻松地在平板电脑和移动设备游戏中集成流行的游戏功能，例如成就、排行榜、保存的游戏和实时多人游戏（在Android上）选项。
- en: That is enough theory for now! Let's create our Quiz app and apply some of the
    theory that we have discussed here.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在理论已经足够了！让我们创建我们的测验应用程序，并应用我们在这里讨论过的一些理论。
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you need to have the latest version of Android Studio and a
    real device on which Google Play services have been installed, which will be the
    case for most devices. Alternatively, you can install them on a virtual Genymotion
    device, but that will require some additional preparations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，您需要拥有最新版本的Android Studio和已安装Google Play服务的真实设备，这对大多数设备来说都是成立的。或者，您可以在虚拟Genymotion设备上安装它们，但这将需要一些额外的准备工作。
- en: Also, you need to have (or to create) a Google developer account.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要拥有（或创建）一个Google开发者帐户。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'And off we go. Start Android Studio and perform the following steps as we are
    going to build something great:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后开始。启动Android Studio并执行以下步骤，因为我们将要构建一些伟大的东西：
- en: Create a new project in Android Studio. Name it `GetItRight` and click on the
    **Next** button.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目。命名为`GetItRight`，然后点击**下一步**按钮。
- en: Choose the **Phone and tablet** option and click on the **Next** button.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手机和平板电脑**选项，然后点击**下一步**按钮。
- en: In the **Add an activity to mobile** view, choose **Google Play Service** and
    click on the **Next** button.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**为移动设备添加活动**视图中，选择**Google Play服务**，然后点击**下一步**按钮。
- en: Accept the **activity name** and **title** fields and click on the **Finish**
    button.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受**活动名称**和**标题**字段，然后点击**完成**按钮。
- en: 'Point your web browser at the Google Developer console and log in or register
    if you do not have an account yet. You can find it at: [https://console.developers.google.com](https://console.developers.google.com).'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的网络浏览器指向Google开发者控制台，如果您还没有帐户，请登录或注册。您可以在以下网址找到它：[https://console.developers.google.com](https://console.developers.google.com)。
- en: In the developer console, click on the game tab (game icon on the left-hand
    side of the webpage).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发者控制台中，点击游戏选项卡（网页左侧的游戏图标）。
- en: Accept the terms of service if asked to do so.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果被要求，接受服务条款。
- en: Click on the **Setup up Google Play Services** button.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**设置Google Play服务**按钮。
- en: 'Enter the name of the app `Get It Right Sample`, and pick a category: **Trivia**,
    and click on the **Continue** button.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入应用程序名称`Get It Right Sample`，选择一个类别：**问答**，然后点击**继续**按钮。
- en: In the game details view, enter a description and click on the **Save** button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏详情视图中，输入描述，然后点击**保存**按钮。
- en: Next, you need to generate an Oauth2 client ID. To do so, click on the **Linked
    app** link.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要生成一个Oauth2客户端ID。要这样做，请点击**关联应用**链接。
- en: Pick **Android** as your OS, enter `packt.com.getitright` as the **package name**,
    leave the other settings unchanged, and click on the **Save and continue** button.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Android**作为您的操作系统，输入`packt.com.getitright`作为**包名称**，保持其他设置不变，然后点击**保存并继续**按钮。
- en: Click on the **Authorize your app now** button in step 2\. In the **Branding
    information** popup dialog, click on the **Continue** button.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第2步中，点击**立即授权您的应用**按钮。在**品牌信息**弹出对话框中，点击**继续**按钮。
- en: 'The **Client ID** dialog appears. Enter `packt.com.getitright` as the package
    name. To get the signing certificate fingerprint, open **Terminal app** (for Windows:
    Command Prompt) and type:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**客户端ID**对话框出现。输入`packt.com.getitright`作为包名称。要获取签名证书指纹，打开**终端应用程序**（对于Windows：命令提示符）并输入：'
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If asked for the `keystore` password, the default password for the debug keystore
    is `android`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要求`keystore`密码，默认的调试keystore密码是`android`。
- en: Copy and paste the fingerprint (SHA1) and click on the **Create Client** button.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴指纹（SHA1），然后点击**创建客户端**按钮。
- en: Click on the **Back to the list** button, and after that click on the **Continue
    to next step** button.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**返回列表**按钮，然后点击**继续下一步**按钮。
- en: In the **Android app details** view, you will see the **Application ID** (if
    you scroll down a little) that we are going to need later. Copy its value.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Android应用程序详细信息**视图中，您将看到**应用程序ID**（如果向下滚动一点），我们稍后将需要它。复制其值。
- en: Leaderboards
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排行榜
- en: 'Follow the given steps for adding leader boards to your app:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 按照提供的步骤为应用程序添加排行榜：
- en: On the left-hand side of the webpage, choose **LEADERBOARDS** and click on the
    **Add new leaderboard** button. Name your new leaderboard `GetItRight Leaderboard`
    and click on the **Save** button. Note the leader board **ID**. We will be using
    it later:![Leaderboards](img/B04299_08_02.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页的左侧，选择**排行榜**，然后点击**添加新排行榜**按钮。将新排行榜命名为`GetItRight Leaderboard`，然后点击**保存**按钮。注意排行榜**ID**。我们稍后会用到它：![排行榜](img/B04299_08_02.jpg)
- en: 'Open the `build.gradle` file inside the `app` directory of your project and
    add a dependency for Google Play services:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目`app`目录内的`build.gradle`文件，并添加Google Play服务的依赖项：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Sync your project. In case it fails to resolve Google Play services, an error
    will be generated including a link that reads **Install Repository and sync project**.
    Click on this link to do so.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同步您的项目。如果无法解析Google Play服务，将生成一个错误，其中包含一个链接，上面写着**安装存储库并同步项目**。点击此链接进行操作。
- en: 'Open the `AndroidManifest.xml` file and add a metadata tag to the application
    tag:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AndroidManifest.xml`文件，并向应用程序标签添加元数据标记：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, add `app_id` to the `strings.xml` file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，将`app_id`添加到`strings.xml`文件中：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Add a breakpoint on the first line of the `onConnected` method of the `GooglePlayServicesActivity`
    class. Do the same thing for the first line of the `onConnectionFailed` method.
    Using the Google Play service template and the provided app ID, you should be
    able to connect to Google Play Services already. Run the app (in debug mode) to
    find out if it does.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GooglePlayServicesActivity`类的`onConnected`方法的第一行设置断点。对于`onConnectionFailed`方法的第一行也是如此。使用Google
    Play服务模板和提供的应用ID，您应该已经能够连接到Google Play服务。运行应用程序（调试模式）以查看是否成功。
- en: Create a new Android Resource directory and choose **layout** as the Resource
    type; create a new layout resource file within that directory and name it `activity_google_play_services.xml`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Android资源目录，并选择**layout**作为资源类型；在该目录中创建一个新的布局资源文件，并命名为`activity_google_play_services.xml`。
- en: 'Add some new strings to the `strings.xml` resource file:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`strings.xml`资源文件添加一些新的字符串：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a layout for the `activity_google_play_service` resource file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`activity_google_play_service`资源文件创建布局：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open the `GooglePlayServicesActivity` file. In the `onCreate` method, load
    the layout and set the on click listeners for all buttons:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`GooglePlayServicesActivity`文件。在`onCreate`方法中，加载布局并为所有按钮设置点击监听器：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Implement the `onClickListener` method for the `GooglePlayServicesActivity`
    file. Android Studio will suggest an implementation and you can accept this suggestion
    or add the implementation yourself:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`GooglePlayServicesActivity`文件实现`onClickListener`方法。Android Studio将建议一个实现，您可以接受此建议，也可以自己添加实现：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add two private members, one for our leaderboard request and one that will
    hold your leaderboard ID:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加两个私有成员，一个用于我们的排行榜请求，另一个用于保存您的排行榜ID：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the implementation for the `onClick` method. We are preparing the situation
    where the user clicks on any of the multiple choice options. For the **leaderboard**
    (test) button, we can add the implementation right away:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`onClick`方法创建实现。我们正在准备用户点击多项选择选项的情况。对于**排行榜**（测试）按钮，我们可以立即添加实现：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a new package and name it `models`. Create the `Answer`, `Question`,
    and `Quiz` classes:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的包并命名为`models`。创建`Answer`、`Question`和`Quiz`类：
- en: 'To add the `Answer` class, you need the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`Answer`类，您需要以下代码：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To add the `Question` class, use the given code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`Question`类，请使用以下代码：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To add the `Quiz` class, use the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`Quiz`类，请使用以下代码：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new package and name it `repositories`. Create a new class and name
    it `QuizRepository`. Add some questions to the quiz. You can use the questions
    from the following example, but you can create some questions yourself as well
    if you would like to do so. In a real app, the questions and answers, of course,
    would not be hardcoded but retrieved from a database or from a backend (note that
    we can always change this behavior later without the need to modify anything but
    this class):'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的包并命名为`repositories`。创建一个新的类并命名为`QuizRepository`。向测验添加一些问题。您可以使用以下示例中的问题，但如果愿意，也可以自己创建一些问题。在真实的应用程序中，问题和答案当然不会是硬编码的，而是从数据库或后端检索的（请注意，我们随时可以更改此行为，而无需修改除此类之外的任何内容）：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `GamePlayServicesActivity` class, add these three private members:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GamePlayServicesActivity`类中，添加这三个私有成员：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the implementation for the `newGame` method. We will get the `Quiz` object
    by asking the repository for it. After resetting the score and the question index,
    we call the `displayQuestion` method, which implements the UI logic by actually
    displaying the question, the possible answers, and a nice image:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`newGame`方法添加实现。我们将通过向存储库请求来获取`Quiz`对象。重置分数和问题索引后，我们调用`displayQuestion`方法，该方法通过实际显示问题、可能的答案和漂亮的图片来实现UI逻辑：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let the game begin!
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让游戏开始！
- en: 'The following steps can be used to add methods to a new game:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤可用于添加新游戏的方法：
- en: 'At the end of the `onCreate` method, we will call the `newGame` method:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法的末尾，我们将调用`newGame`方法：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Modify the `onClick` method, so we can respond when a user clicks on any of
    the buttons. If any of the multiple choice buttons are being clicked on, we will
    call the `checkAnswer` method. Is it the correct answer we have chosen? How exciting:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`onClick`方法，这样当用户点击任何按钮时我们可以做出响应。如果点击了任何一个多选按钮，我们将调用`checkAnswer`方法。我们选择的是正确答案吗？多么令人兴奋：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the `checkAnswer` method. We will compare the given answer against the
    correct answer for the question, and depending on the result, we will call the
    `onGoodAnswer` or `onWrongAnswer` methods. Depending on the answer, your progress
    gets decided: if the answer is wrong, the game is over and we display the leader
    board.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`checkAnswer`方法。我们将比较给定答案与问题的正确答案，根据结果，我们将调用`onGoodAnswer`或`onWrongAnswer`方法。根据答案，你的进展将被决定：如果答案错误，游戏结束，我们将显示排行榜。
- en: 'If there are no more questions, we will submit the users score and display
    the leader board as well. The leader board itself will take care of all the logic
    for it. Was the submitted score high enough to make your name appear on top of
    the list? Check it with the help of the following snippet:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有更多的问题，我们将提交用户的分数并显示排行榜。排行榜本身将处理所有相关逻辑。提交的分数是否足够高，使你的名字出现在榜单的顶部？通过以下片段来检查：
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To be prepared for unit testing and code inspection let''s add annotation support.
    Open the `build.gradle` file in the `app` folder and add the dependency. Click
    on the **Sync now** link that appears after modifying the file:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了做好单元测试和代码检查，让我们添加注释支持。在`app`文件夹中打开`build.gradle`文件并添加依赖项。在修改文件后，点击出现的**立即同步**链接：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If an error appears that reads `Failed to resolve support-annotations`, then
    click on the **Install Repository and Sync Project** link that appears.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果出现“无法解析支持注释”的错误，则点击出现的**安装存储库并同步项目**链接。
- en: 'If all goes well, then we can add annotations, for example, to the parameter
    of the `CheckAnswer` method:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们可以添加注释，例如在`CheckAnswer`方法的参数上：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `Question` class, we could add a `@Nullable` annotation to the `getPossibleAnswers`
    method, which could be the case if we did not provide any multiple choice option
    for a question:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Question`类中，我们可以为`getPossibleAnswers`方法添加`@Nullable`注释，如果我们没有为问题提供任何多选选项的话，这可能是情况：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Later, if we do some analysis, this will result in a warning for `GooglePlayServiceActivity`,
    where we will be calling this method. We will have a closer look at that in the
    *code analysis* recipe:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稍后，如果我们进行一些分析，这将导致“GooglePlayServiceActivity”出现警告，我们将在*代码分析*中更仔细地查看这一点：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can play the game if you like and add some more annotations. Just don't
    play too long with them. Let's play the game instead!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢，你可以玩这个游戏并添加一些注释。只是不要花太多时间。我们来玩游戏吧！
- en: Run your app and become number one on the leader board. Since currently you
    are the only test player, that cannot be too hard I guess.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，并成为排行榜上的第一名。因为目前你是唯一的测试玩家，我猜这不会太难。
- en: 'You have just created your own quiz app, which you can extend with some other
    challenging questions if you like, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建了自己的测验应用程序，如果你愿意，可以添加一些其他具有挑战性的问题，如下面的屏幕截图所示：
- en: '![Let the game begin!](img/B04299_08_03.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![让游戏开始吧！](img/B04299_08_03.jpg)'
- en: We have investigated Google Play services and we have been using a MVC approach
    for our app. Also, we had a look at how to use annotations, which could help us
    to improve code after doing some code analysis.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经调查了Google Play服务，并且我们一直在为我们的应用使用MVC方法。此外，我们还研究了如何使用注释，在进行一些代码分析后，这些注释可以帮助我们改进代码。
- en: There's more...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We had only a sneak peek at patterns and how to apply them. Check out the Internet
    or get some great books to learn more about patterns. Also, refer to [https://www.google.com/design/spec/patterns/app-structure.html](https://www.google.com/design/spec/patterns/app-structure.html).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是匆匆一瞥了一下模式以及如何应用它们。查看互联网或获取一些优秀的书籍，以了解更多关于模式的知识。另外，请参阅[https://www.google.com/design/spec/patterns/app-structure.html](https://www.google.com/design/spec/patterns/app-structure.html)。
- en: Make sure you read the docs about support annotations as well. There are so
    many more possibilities using them. Check the docs out at [http://tools.android.com/tech-docs/support-annotations](http://tools.android.com/tech-docs/support-annotations).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你也阅读了有关支持注释的文档。使用它们有很多更多的可能性。在[http://tools.android.com/tech-docs/support-annotations](http://tools.android.com/tech-docs/support-annotations)中查看文档。
- en: Also, we have been using Google Play services for only a fraction. We just know
    how to sign in and how to use a leader board. If you want, you can check out the
    other options. For that, refer to [https://developers.google.com/games/services/android/quickstart](https://developers.google.com/games/services/android/quickstart).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们只使用了Google Play服务的一小部分。我们只知道如何登录和如何使用排行榜。如果你愿意，你可以查看其他选项。有关此内容，请参阅[https://developers.google.com/games/services/android/quickstart](https://developers.google.com/games/services/android/quickstart)。
- en: See also
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to [Chapter 7](ch07.html "Chapter 7. Content Providers and Observers"),
    *Content Providers and Observers*.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见[第7章](ch07.html "第7章。内容提供者和观察者")，*内容提供者和观察者*。
- en: Unit testing using Robolectric
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Robolectric进行单元测试
- en: Unit testing is a testing method where individual units of code are tested.
    A view or repository can be tested, for example, to check whether it meets the
    demands. Unlike most other tests, these kinds of tests typically are developed
    and run by a software developer.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一种测试方法，其中测试代码的各个单元。例如，可以测试视图或存储库，以检查它是否满足要求。与大多数其他测试不同，这些测试通常由软件开发人员开发和运行。
- en: Ideally, a test case is completely independent from other cases and other units.
    Since classes often depend on others substitutes such as mock objects needs to
    be used. In the previous recipe, the `QuizRepository` class provides hardcoded
    quiz data (stubbed or mocked data), but as suggested, the intention is that the
    quiz data should be retrieved from a backend.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，一个测试用例完全独立于其他用例和其他单元。由于类通常依赖于其他替代品，例如需要使用模拟对象。在上一个教程中，`QuizRepository`类提供了硬编码的测验数据（存根或模拟数据），但正如建议的那样，意图是测验数据应该从后端获取。
- en: We are going to prepare the app we created in the previous recipe for unit testing,
    and we will create some tests ourselves. **Robolectric** is going to help us with
    that. Although since the 1.2 release of Android Studio unit testing (based on
    JUnit) has become much easier to set up, it still is not as powerful as Robolectric.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将准备好我们在上一个教程中创建的应用程序进行单元测试，并且我们将自己创建一些测试。**Robolectric**将帮助我们完成这些。尽管自Android
    Studio 1.2版本发布以来，基于JUnit的单元测试设置变得更加容易，但它仍然不如Robolectric强大。
- en: Robolectric does not need additional mock frameworks and it can be run outside
    the emulator as well, allowing us to combine unit testing with a continuous integration
    environment, as we are going to do in [Chapter 10](ch10.html "Chapter 10. Beta
    Testing Your Apps"), *Beta Testing Your Apps*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Robolectric不需要额外的模拟框架，它也可以在模拟器之外运行，这使我们能够将单元测试与持续集成环境结合起来，就像我们将在[第10章](ch10.html
    "第10章。测试你的应用程序")中所做的那样，*测试你的应用程序*。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, it would be most ideal to have the previous recipe successfully
    completed. In case you prefer to skip that part of this chapter, you can, of course,
    open your own project and set up unit testing in more or less the same way. That
    is up to you.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，最理想的情况是上一个教程已经成功完成。如果你选择跳过本章的这一部分，当然可以打开你自己的项目，并以更或多或少相同的方式设置单元测试。这取决于你。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'So what do we have to do to create and run some unit tests? Let''s find out:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们要做些什么来创建和运行一些单元测试呢？让我们找出来：
- en: Open the project that we created in the previous recipe.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在上一个教程中创建的项目。
- en: 'Open the `build.gradle` file within the `app` folder and add a dependency for
    Robolectric:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹中打开`build.gradle`文件，并为Robolectric添加一个依赖项：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Rename the `androidTest` folder in the `src` folder to `test`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`src`文件夹中的`androidTest`文件夹重命名为`test`。
- en: From the **Run** menu choose the **Edit configurations** option.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Run**菜单中选择**Edit configurations**选项。
- en: On the left-hand side of Run\Debug Configuration window, choose **Defaults**
    and **JUnit**. On the right-hand side change the content for **Working directory**
    to `$MODULE_DIR$` and click on the **OK** button.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Run\Debug Configuration窗口的左侧，选择**Defaults**和**JUnit**。在右侧将**Working directory**的内容更改为`$MODULE_DIR$`，然后点击**OK**按钮。
- en: Rename the **ApplicationTest** class to `QuizRepositoryTest`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**ApplicationTest**类重命名为`QuizRepositoryTest`。
- en: 'Add some tests to the **QuizRepositoryTest** class. We will be using Robolectric
    for this. As you can notice, we will be using annotations here as well just like
    we did in the previous recipe:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**QuizRepositoryTest**类添加一些测试。我们将使用Robolectric进行这项工作。正如你所注意到的，我们将在这里使用注解，就像我们在上一个教程中所做的那样：
- en: '[PRE24]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create another test class so we can test the activity. Name the new class `GooglePlayServicesActivityTest`.
    Within this test, we could perform some layout tests as well:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个测试类，以便我们可以测试该活动。将新类命名为`GooglePlayServicesActivityTest`。在这个测试中，我们也可以进行一些布局测试：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open the `build variants` pane and choose `Unit tests` instead of `Instrumentation
    tests`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`build variants`窗格，并选择`Unit tests`而不是`Instrumentation tests`。
- en: Everything under the `test` package will be highlighted in green now (you may
    need to do a rebuild first). If you right-click on the package name `packt.com.getitright`
    or on any of the test classes you created, you will find an option in the context
    menu **Run tests in packt.com.getright** or **Run QuizRepositoryTest**. For example,
    choose to run `QuizRepositoryTest`.If you choose this option, Gradle starts thinking
    for a bit. After a while, the results are displayed.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`test`包中的所有内容都将被突出显示为绿色（你可能需要先进行重建）。如果你右键单击`packt.com.getitright`包名或者你创建的任何测试类，你将在上下文菜单中找到一个选项**Run
    tests in packt.com.getright**或**Run QuizRepositoryTest**。例如，选择运行`QuizRepositoryTest`。如果选择此选项，Gradle会开始思考一会儿。一段时间后，结果会显示出来。
- en: Only the tests that fail are shown by default. To see the tests that did succeed
    as well, click on the **Hide passed** button (the button above the test tree shown
    on the left-hand side).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下只显示失败的测试。要查看成功的测试，点击左侧显示测试树上方的**Hide passed**按钮。
- en: 'You will see that the **quizHasQuestions** test has passed. However, the **quizHasSufficientQuestions**
    test has failed. This makes sense, as our test requires our quiz to have at least
    10 questions while we added only three to the quiz, as shown in the following
    figure:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到**quizHasQuestions**测试已经通过。然而，**quizHasSufficientQuestions**测试失败了。这是有道理的，因为我们的测试要求我们的测验至少有10个问题，而我们只添加了三个问题到测验中，如下图所示：
- en: '![How to do it...](img/B04299_08_04.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04299_08_04.jpg)'
- en: Add seven more questions to `Quiz` in `QuizRepository` to get it right. Well,
    you can cheat, of course, by modifying the test, but let's just say it is a business
    requirement.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`QuizRepository`中为`Quiz`添加七个问题，以便做对。当然，你也可以作弊，通过修改测试来达到目的，但我们就说这是一个业务需求吧。
- en: Rerun the test. Every unit test succeeded. Hurrah! Create a few more unit tests
    that you can think of.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行测试。每个单元测试都成功了。万岁！创建一些你能想到的其他单元测试。
- en: Unit testing is a very interesting option because we can use it for continuous
    integration purposes as well. Think of a scenario where we run the unit tests
    each time you commit (and push) your source to a central repository such as GitHub
    or BitBucket. If the compilation and all unit tests succeed, we can create a new
    (ad hoc) release automatically or be notified whether the compilation or any of
    the tests failed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一个非常有趣的选择，因为我们也可以将其用于持续集成的目的。想象一下，每次您将源代码提交（和推送）到GitHub或BitBucket等中央存储库时，我们都运行单元测试的情景。如果编译和所有单元测试都成功，我们可以自动创建一个新的（临时的）发布，或者被通知编译或任何测试失败。
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are plenty of other tools and approaches available for mobile testing
    purposes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他工具和方法可用于移动测试目的。
- en: In addition to unit testing, we want to test the **User Interface** (**UI**)
    as well, for example, by using Espresso.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单元测试，我们还希望测试**用户界面**（**UI**），例如使用Espresso。
- en: Espresso
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Espresso
- en: 'Espresso is suitable for writing concise and reliable Android UI tests. A test
    typically contains clicks, text input, and checks. It is actually pretty simple
    to write tests. The following is an example of a test using Espresso:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Espresso适用于编写简洁可靠的Android UI测试。测试通常包含点击、文本输入和检查。编写测试实际上非常简单。以下是使用Espresso的测试示例：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To quote the website:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 引用网站上的话：
- en: '*"Espresso tests state expectations, interactions, and assertions clearly without
    the distraction of boilerplate content, custom infrastructure, or messy implementation
    details getting in the way".*'
  id: totrans-175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “*Espresso测试清楚地陈述期望、交互和断言，而不受到样板内容、自定义基础设施或混乱的实现细节的干扰*”。
- en: For more information, refer to [https://code.google.com/p/android-test-kit/wiki/Espresso](https://code.google.com/p/android-test-kit/wiki/Espresso).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[https://code.google.com/p/android-test-kit/wiki/Espresso](https://code.google.com/p/android-test-kit/wiki/Espresso)。
- en: Approaches
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: When it comes to testing, there are different approaches you can think of. One
    of these approaches is **Test-driven Development** (**TDD**). If the functionality
    and all requirements are known, we can define our tests before developing our
    app. Of course, all tests will fail initially, but that is actually a good thing.
    It will set an outline of what needs to be done and create focus to get things
    right. If you start developing more and more, tests will succeed, remaining the
    amount of work.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试方面，有不同的方法可以考虑。其中一种方法是**测试驱动开发**（**TDD**）。如果功能和所有要求都已知，我们可以在开发应用程序之前定义我们的测试。当然，所有测试最初都会失败，但这实际上是件好事。它将概述需要做的事情，并集中精力做正确的事情。如果您开始开发得越来越多，测试将成功，剩下的工作量也会减少。
- en: Another and more recent approach is **Behavior-driven Development** (**BDD**).
    This testing approach is based around features, where a feature is a collection
    of stories expressed from a particular point of view.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种更近期的方法是**行为驱动开发**（**BDD**）。这种测试方法是基于功能的，其中一个功能是从特定的角度表达的一系列故事。
- en: 'BDD tools come as a unit testing flavor such as `Rspec` for example and as
    a higher level acceptance testing flavor: `Cucumber`.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: BDD工具可以作为单元测试的一种风格，例如`Rspec`，也可以作为更高级别的验收测试风格：`Cucumber`。
- en: Cucumber, Gherkin, and Calabash
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cucumber、Gherkin和Calabash
- en: No, this is not a greengrocer advertisement that suddenly has popped up here.
    **Cucumber** is a tool that runs automated acceptance tests written in a BDD style.
    It allows the execution of a feature documentation written in a business-facing
    text.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 不，这不是突然出现在这里的蔬菜店广告。**Cucumber**是一种以BDD风格编写的自动化验收测试的工具。它允许执行以业务面向文本编写的功能文档。
- en: 'Here is an example of a feature file using **Gherkin**. It serves two purposes:
    documentation and automated tests:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用**Gherkin**的功能文件的示例。它有两个目的：文档和自动化测试：
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`Gherkin` is a business-readable, domain-specific language that lets you describe
    a software''s behavior without detailing on how that behavior is implemented.
    Therefore, these tests can also be written by the nondeveloping members of your
    team.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`Gherkin`是一种可读性强的领域特定语言，它可以让您描述软件的行为，而不详细说明该行为是如何实现的。因此，非开发团队成员也可以编写这些测试。'
- en: There is some glue code required to make things happen. In Cucumber, this process
    is defined in step definitions. Cucumber typically lets you write these step definitions
    in the Ruby language.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一些粘合代码来使事情发生。在Cucumber中，这个过程是在步骤定义中定义的。Cucumber通常让您用Ruby语言编写这些步骤定义。
- en: Through the Calabash framework, you can use Cucumber to create tests for both
    Android and iOS. It enables you to define and execute automated acceptance tests.
    Another great thing about Calabash is that it allows you to run automated tests
    on the cloud, for example, using the services of TestDroid.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Calabash框架，您可以使用Cucumber为Android和iOS创建测试。它使您能够定义和执行自动化验收测试。Calabash的另一个很棒的地方是，它允许您在云上运行自动化测试，例如使用TestDroid的服务。
- en: First things first!
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 首先要做的事情！
- en: To learn more about Cucumber, visit [https://cucumber.io](https://cucumber.io).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关Cucumber的更多信息，请访问[https://cucumber.io](https://cucumber.io)。
- en: You will find the Calabash framework at [http://calaba.sh](http://calaba.sh).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://calaba.sh](http://calaba.sh)找到Calabash框架。
- en: Also, check out [www.testdroid.com](http://www.testdroid.com) for more information
    about testing on as many devices as possible using TestDroid a cloud based test
    environment.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以查看[www.testdroid.com](http://www.testdroid.com)了解有关使用TestDroid云测试环境在尽可能多的设备上进行测试的更多信息。
- en: Finally, find a good balance between time, quality, and money. The approach
    to test your app depends on how valuable you (or your company or your customer)
    think each of these elements are. Create at least unit and UI tests. Also, let's
    not forget about performance testing, but that a topic that will be discussed
    in the next chapter!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要在时间、质量和金钱之间找到一个良好的平衡。测试应用程序的方法取决于您（或您的公司或您的客户）认为这些元素中的每个元素有多有价值。至少创建单元测试和UI测试。还要不要忘了性能测试，但这是下一章将讨论的一个话题！
- en: See also
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to [Chapter 9](ch09.html "Chapter 9. Improving Performance"), *Improving
    Performance*
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[第9章](ch09.html "第9章。性能改进")，*性能改进*
- en: Refer to [Chapter 10](ch10.html "Chapter 10. Beta Testing Your Apps"), *Beta
    Testing Your Apps*
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[第10章](ch10.html "第10章。测试您的应用程序的Beta版")，*测试您的应用程序的Beta版*
- en: Code analysis
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码分析
- en: Code analysis tools, such as Android Lint, can help you detect potential bugs
    and how your app can be optimized for security, usability, and performance.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析工具，如Android Lint，可以帮助你检测潜在的错误，以及如何优化你的应用程序的安全性、可用性和性能。
- en: 'Android Lint comes with Android Studio, but there are also other tools available
    such as: Check Style, **Project** **Mess Detector** (**PMD**), and Find Bugs.
    In this recipe, we will only have a look at Android Lint.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Android Lint随Android Studio一起提供，但也有其他可用的工具，如：Check Style，**项目** **Mess Detector**（**PMD**）和Find
    Bugs。在这个示例中，我们只会看一下Android Lint。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Most ideally, you would have completed the first two recipes of this chapter,
    so we will now examine the results of the app. However, you can use `Android Lint`
    (or another tool) on any project to see where things can be improved.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最理想的情况是，你已经完成了本章的前两个示例，所以我们现在将检查应用的结果。但是，你也可以在任何项目上使用`Android Lint`（或其他工具）来查看哪里可以改进。
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The support annotations of the first recipe influence the results being displayed.
    Yes, that is right, we cause these warnings.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例的支持注解影响了显示的结果。是的，没错，我们引起了这些警告。
- en: How to do it...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'There is nothing that we need to install in order to get an Android Lint report,
    as it is already in there with Android Studio. Just follow the next steps to make
    use of it:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要安装任何东西来获取Android Lint报告，因为它已经在Android Studio中了。只需按照下一步骤来使用它：
- en: Open the project you have created in the previous recipes. Or, alternatively,
    open your own project.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你在之前示例中创建的项目。或者，打开你自己的项目。
- en: From the **Analyze** menu, choose **Code inspection**. The inspection scope
    is the whole project. Click on the **OK** button to proceed.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**分析**菜单中选择**代码检查**。检查范围是整个项目。单击**确定**按钮继续。
- en: The results for inspection will be presented as a tree view. Expand and select
    items to see what each item is about, as shown in the following snapshot:![How
    to do it...](img/B04299_08_05.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果将以树形视图呈现。展开并选择项目以查看每个项目的内容，如下面的快照所示：![操作步骤...](img/B04299_08_05.jpg)
- en: Things look pretty serious here but actually, it is not all that bad. There
    are some issues that are no show stoppers at all, but fixing them could greatly
    improve your code, which is what we are aiming at for now.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里看起来很严重，但实际上并不是那么糟糕。有一些问题根本不是致命错误，但修复它们可以极大地改进你的代码，这正是我们目前的目标。
- en: For example, check out the **Declaration redundancy** | **Declaration access
    can be weaker** | **Can be private** issue. Navigate to it. Double-click on it
    to jump to the code where the issue appears. Right-click on it. The context menu
    provides a solution for this right away. Choose the **Make field private** option
    to apply the correct solution. If you do so, this item will be marked as done
    (strike-through).
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，查看**声明冗余** | **声明访问可以更弱** | **可以是私有**问题。导航到它。双击它跳转到问题出现的代码。右键单击它。上下文菜单立即提供了解决方案。选择**使字段私有**选项应用正确的解决方案。如果这样做，此项目将被标记为已完成（划掉）。
- en: Now have a look at **Hardcoded texts**. If you double-click on any of the items
    that are related to this issue, you will see what the problem is.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在看看**硬编码文本**。如果你双击与此问题相关的任何项目，你会看到问题所在。
- en: 'For our convenience, we did put a temporary text (such as `Question` in `Text
    View`). If this was for real, we should be using a string resource instead. Here,
    we can safely remove the text. If you rerun the code inspection, the issue will
    disappear:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了方便起见，我们放置了一个临时文本（如`Text View`中的`Question`）。如果这是真的，我们应该使用一个字符串资源。在这里，我们可以安全地删除这个文本。如果你重新运行代码检查，问题将消失：
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, have a look at **Constant conditions & exceptions** under **Probable
    bugs**. For the `GooglePlayServicesActivity` file, it says:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，看看**常量条件和异常**下的**可能的错误**。对于`GooglePlayServicesActivity`文件，它说：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you double-click on this message, you will find what the issue is about:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你双击这条消息，你会发现问题所在：
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This line may produce `Null Pointer Exception` Why is that? If you go to the
    declaration of the `getPossibleAnswers` method by selecting it and pressing *Cmd*
    + *B* (for Windows: *Ctrl* + *B*) you will find out why:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一行可能会产生`Null Pointer Exception`。为什么？如果你通过选择并按下*Cmd* + *B*（对于Windows：*Ctrl*
    + *B*）来查看`getPossibleAnswers`方法的声明，你就会找到原因：
- en: '[PRE31]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Ah right! We added this annotation ourselves in the first recipe to remind our
    later selves (or fellow developer) that the answers that are returned might be
    null. There are a couple of ways to fix this.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 啊对了！我们在第一个示例中自己添加了这个注解，以提醒我们以后（或其他开发人员）返回的答案可能为空。有几种方法可以解决这个问题。
- en: We could remove the `@Nullable` annotation here, but that would be bad since
    the answers actually could be null. We also could choose to suppress the warning.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在这里删除`@Nullable`注解，但那样做是不好的，因为答案实际上可能是空的。我们也可以选择忽略这个警告。
- en: 'The best solution is to actually test the outcome of the `getAnswers` method
    before doing anything with it. Just like that:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最好的解决方案是在执行任何操作之前实际测试`getAnswers`方法的结果。就像这样：
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Expand **Declaration redundancy** | **Method can be void** | **Question**.
    It says:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**声明冗余** | **方法可以是void** | **问题**。它说：
- en: '[PRE33]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Double-click on the issue to jump the code. Well, that warning is correct but
    suppose I do want to return the answer any way because I am pretty sure (how sure
    can you be?) I will be consuming it later. In that case, you could right-click
    on the issue and choose the **Suppress for Member** option. You will not be bothered
    by this issue again because it will add the `SuppressWarnings` annotation to your
    code:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击问题跳转到代码。嗯，那个警告是正确的，但假设我确实想要返回答案，因为我相当确定（你能有多确定？）我以后会使用它。在这种情况下，你可以右键单击问题，选择**对成员进行抑制**选项。你将不会再被这个问题打扰，因为它会在你的代码中添加`SuppressWarnings`注释：
- en: '[PRE34]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Finally, have a look at **Spelling warnings**. Expand **Spelling** and the underlying
    **Typo** and **app** items. There it is. A `Typo`!
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，看看**拼写警告**。展开**拼写**和底层的**拼写错误**和**应用**项目。就在那里。一个`拼写错误`！
- en: '[PRE35]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We didn''t get **getitright** right now did we? Since it is the name of our
    app and because it is part of the package name, I am pretty sure we can safely
    ignore this warning. This time, we right-click on the type and choose the **Save
    to dictionary** option:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在没有**getitright**，是吗？由于这是我们应用程序的名称，也是包名称的一部分，我相当确定我们可以安全地忽略这个警告。这一次，我们右键单击类型，选择**保存到字典**选项：
- en: The list of warnings seems to be endless, but how severe are all these items?
    On the left-hand side of Android Studio, you will find a button with the **Group
    by Severity** tooltip. Click on it.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警告列表似乎是无穷无尽的，但所有这些项目有多严重呢？在Android Studio的左侧，你会找到一个带有**按严重性分组**工具提示的按钮。点击它。
- en: Now the tree view contains an error node (if you have any), a warning node,
    and a typo node. If you just concentrate on the errors and warnings and see what
    each item is about, then you will improve your code and actually learn quite a
    lot, as each issue comes with a description of the problem and a suggestion on
    how to fix it.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在树视图包含一个错误节点（如果有的话），一个警告节点和一个拼写错误节点。如果你只专注于错误和警告，并了解每个项目是关于什么，那么你将改进你的代码，并且实际上会学到很多，因为每个问题都附带了问题的描述和如何修复的建议。
- en: Great, you learned some cool stuff today! And wrote better code by applying
    patterns, running unit tests, and by fixing issues reported by `Android Lint`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，你今天学到了一些很酷的东西！并且通过应用模式、运行单元测试以及修复`Android Lint`报告的问题来编写更好的代码。
- en: We now know that our app does what it should do and that it is well structured
    after some refactoring.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道我们的应用程序做了它应该做的事情，并且在一些重构之后它结构良好。
- en: The next thing to wonder about is what would happen if the images we are loading
    from the Internet are 10 times the size they are now? What if we have 1000 questions?
    Unreal? Perhaps.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要想的是，如果我们从互联网加载的图像是现在的10倍大小会发生什么？如果我们有1000个问题呢？不真实？也许。
- en: How will our Quiz app perform on a low-end device? In the next chapter, we will
    go after the answers to these and other questions.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测验应用在低端设备上的表现如何？在下一章中，我们将寻找这些和其他问题的答案。
- en: See also
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Refer to [Chapter 9](ch09.html "Chapter 9. Improving Performance"), *Performance*
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[第9章](ch09.html "第9章。提高性能"), *性能*
- en: Refer to [Chapter 10](ch10.html "Chapter 10. Beta Testing Your Apps"), *Beta
    Testing Your App*
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考[第10章](ch10.html "第10章。测试您的应用程序的Beta版"), *测试您的应用程序的Beta版*
