- en: '*Chapter 18*:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '*第18章*：'
- en: Unit Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: As a developer (or software engineer), you must have skills in the testing field
    as well. For example, developers are responsible for writing the unit tests of
    their code (for example, using JUnit or TestNG). Most probably, a pull request
    that doesn't contain unit tests as well won't be accepted.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员（或软件工程师），您必须在测试领域也具备技能。例如，开发人员负责编写其代码的单元测试（例如，使用JUnit或TestNG）。很可能，不包含单元测试的拉取请求也不会被接受。
- en: 'In this chapter, we will cover unit testing interview problems that you may
    encounter if you apply for a position such as developer or software engineer.
    Of course, if you are looking for a tester (manual/automation) position, then
    this chapter may represent just another perspective of testing, so do not expect
    to see questions specific to manual/automation tester positions here. In this
    chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖单元测试面试问题，如果您申请开发人员或软件工程师等职位，可能会遇到这些问题。当然，如果您正在寻找测试人员（手动/自动化）职位，那么本章可能只代表测试的另一个视角，因此不要期望在这里看到特定于手动/自动化测试人员职位的问题。在本章中，我们将涵盖以下主题：
- en: Unit testing in a nutshell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试简介
- en: Questions and coding problems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题和编码问题
- en: Let's begin!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical Requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The codes used in this chapter can be found on GitHub on: [https://github.com/PacktPublishing/The-Complete-Coding-Interview-Guide-in-Java/tree/master/Chapter18](https://github.com/PacktPublishing/The-Complete-Coding-Interview-Guide-in-Java/tree/master/Chapter18)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在GitHub上找到：[https://github.com/PacktPublishing/The-Complete-Coding-Interview-Guide-in-Java/tree/master/Chapter18](https://github.com/PacktPublishing/The-Complete-Coding-Interview-Guide-in-Java/tree/master/Chapter18)
- en: Unit testing in a nutshell
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试简介
- en: The process of testing an application contains several layers of testing. One
    of these layers is the *unit testing* layer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应用程序的过程包含几个测试层。其中之一是*单元测试*层。
- en: Mainly, an application is built by small functional parts called units (for
    example, a regular Java method can be considered a unit). Testing the functionality
    and correctness of these units under specific inputs/conditions/constraints is
    called unit testing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的，一个应用程序是由称为单元的小功能部分构建的（例如，一个常规的Java方法可以被认为是一个单元）。测试这些单元在特定输入/条件/约束下的功能和正确性称为单元测试。
- en: These unit tests are written by developers using the source code and the test
    plan. Ideally, every developer should be capable of writing unit tests that test/validate
    their code. Unit tests should be meaningful and provide accepted code coverage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单元测试是由开发人员使用源代码和测试计划编写的。理想情况下，每个开发人员都应该能够编写测试/验证其代码的单元测试。单元测试应该是有意义的，并提供被接受的代码覆盖率。
- en: 'If the unit tests fails, then the developer is responsible for fixing the issues
    and executing the unit tests again. The following diagram depicts this statement:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单元测试失败，那么开发人员负责修复问题并再次执行单元测试。以下图表描述了这一陈述：
- en: '![Figure 18.1 – Unit testing flow'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.1 – 单元测试流程'
- en: '](img/Figure_18.1_B15403.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.1_B15403.jpg)'
- en: Figure 18.1 – Unit testing flow
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.1 – 单元测试流程
- en: Unit testing uses **unit test cases**. A *unit test case* is a pair of input
    data and expected output meant to shape a test for a certain functionality.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试使用**单元测试用例**。*单元测试用例*是一对输入数据和预期输出，用于塑造对某个功能的测试。
- en: If you are in an interview where you are expected to know unit testing, don't
    be surprised if you are asked questions on functional testing and/or integration
    testing. Hence, it is advisable to be prepared with answers to these questions
    as well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您参加的面试要求了解单元测试，如果被问及功能测试和/或集成测试的问题，不要感到惊讶。因此，最好准备好这些问题的答案。
- en: '**Functional testing** is about testing functional requirements based on the
    given input and a produced output (behavior) that needs to be compared with the
    expected output (behavior). Each functional test uses the functional specification
    to verify the correctness of the component (or a group of components) that represents
    the implementation of that functional requirement. This is explained in the following
    diagram:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试是基于给定的输入和产生的输出（行为）来测试功能要求，需要将其与预期输出（行为）进行比较。每个功能测试都使用功能规范来验证表示该功能要求实现的组件（或一组组件）的正确性。这在下图中有解释：
- en: '![Figure 18.2 – Functional testing'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.2 – 功能测试'
- en: '](img/Figure_18.2_B15403.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.2_B15403.jpg)'
- en: Figure 18.2 – Functional testing
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.2 – 功能测试
- en: 'The goal of **integration testing** is to find out the defects in the software
    components while they are being integrated in an iteratively incremental manner.
    In other words, the modules that have been unit tested are integrated (grouped
    together or aggregated) and tested by following the integration plan. This has
    been depicted in the following diagram:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成测试**的目标是在软件组件被迭代增量地集成时发现缺陷。换句话说，已经进行单元测试的模块被集成（分组或聚合）并按照集成计划进行测试。这在下图中有所描述：'
- en: '![Figure 18.3 – Integration testing'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.3 – 集成测试'
- en: '](img/Figure_18.3_B15403.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.3_B15403.jpg)'
- en: Figure 18.3 – Integration testing
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3 – 集成测试
- en: 'A question regarding unit and integration testing that is frequently put to
    interview candidates is about highlighting the main differences between these
    two. The following table will help you prepare an answer to this question:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于单元测试和集成测试的问题经常被问及面试候选人，问题是突出这两者之间的主要区别。以下表格将帮助您准备回答这个问题：
- en: '![Figure 18.4 – Comparison between unit tests and integration tests'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图18.4 – 单元测试和集成测试的比较'
- en: '](img/Figure_18.4_B15403.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_18.4_B15403.jpg)'
- en: Figure 18.4 – Comparison between unit tests and integration tests
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.4 – 单元测试和集成测试的比较
- en: A good tester is capable of stressing and abusing the subject of testing without
    making any kinds of assumptions or constraints regarding the input. This applies
    to unit tests as well. Now that we have touched on unit testing, let's have a
    look at some coding challenges and questions on unit testing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的测试人员能够在不做任何关于输入的假设或约束的情况下对测试对象进行压力测试和滥用。这也适用于单元测试。现在我们已经涉及了单元测试，让我们来看看一些关于单元测试的编码挑战和问题。
- en: Questions and coding challenges
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题和编码挑战
- en: In this section, we'll cover 15 questions and coding challenges related to unit
    testing that are very popular in interviews. Let's begin!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将涵盖与单元测试相关的15个问题和编码挑战，这在面试中非常受欢迎。让我们开始吧！
- en: Coding challenge 1 – AAA
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战1 - AAA
- en: '**Problem**: What is AAA in unit testing?'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：单元测试中的AAA是什么？'
- en: '**Solution**: The **AAA** acronym stands for [**A**]rrange, [**A**]ct, [**A**]ssert,
    and it represents an approach to structuring tests to sustain clean code and readability.
    Today, AAA is a testing pattern that''s almost a standard across the industry.
    The following snippet of code speaks for itself:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：AAA首字母缩写代表[**A**]rrange，[**A**]ct，[**A**]ssert，它代表一种构造测试的方法，以维持清晰的代码和可读性。今天，AAA是一种几乎成为行业标准的测试模式。以下代码片段说明了这一点：'
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Arrange** section: In this section, we prepare or set up the test. For example,
    in the preceding code, we prepared a stream of integers where the elements are
    1, 2, and 3.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**安排**部分：在这一部分，我们准备或设置测试。例如，在前面的代码中，我们准备了一个整数流，其中的元素是1、2和3。'
- en: '**Act** section: In this section, we perform the necessary actions to obtain
    the result of the test. For example, in the preceding code, we sum the elements
    of the stream and store the result in an integer variable.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**行动**部分：在这一部分，我们执行必要的操作以获得测试的结果。例如，在前面的代码中，我们对流的元素求和，并将结果存储在一个整数变量中。'
- en: '**Assert** section: In this section, we check whether the unit test''s result
    matches the expected results. This is done via assertions. For example, in the
    preceding code, we checked that the sum of the elements is equal to 6.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**断言**部分：在这一部分，我们检查单元测试的结果是否与预期结果相匹配。这是通过断言来完成的。例如，在前面的代码中，我们检查元素的总和是否等于6。'
- en: You can find this code in the application called *junit5/ArrangeActAssert*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在名为*junit5/ArrangeActAssert*的应用程序中找到这段代码。
- en: Coding challenge 2 – FIRST
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战2 - FIRST
- en: '**Problem**: What is **FIRST** in unit testing?'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：单元测试中的**FIRST**是什么？'
- en: '**Solution**: Good testers use FIRST to avoid many of the pitfalls encountered
    in unit tests. The **FIRST** acronym stands for [**F**]ast, [**I**]solated, [**R**]epeatable,
    [**S**]elf-validating, [**T**]imely. Let''s see what each of them mean:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：好的测试人员使用FIRST来避免在单元测试中遇到的许多问题。FIRST首字母缩写代表[**F**]ast，[**I**]solated，[**R**]epeatable，[**S**]elf-validating，[**T**]imely。让我们看看它们各自的含义：'
- en: '**Fast**: It is advisable to write unit tests that run fast. Fast is an arbitrary
    notion that depends on how many unit tests you have, how often you run them, and
    how long you are willing to wait for them to run. For example, if each unit test
    has an average completion time of 200 ms and you run 5,000 unit tests, then you''ll
    wait ~17 minutes. Commonly, unit tests are slow because they access external resources
    (for example, databases and files).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速**：建议编写运行快速的单元测试。快速是一个依赖于你有多少单元测试、你多频繁运行它们以及你愿意等待它们运行多长时间的任意概念。例如，如果每个单元测试的平均完成时间为200毫秒，你运行5000个单元测试，那么你将等待约17分钟。通常，单元测试很慢，因为它们访问外部资源（例如数据库和文件）。'
- en: '**Isolated**: Ideally, you should be able to run any test at any time, in any
    order. This is possible if your unit tests are isolated and they focus on small
    snippets of code. Good unit tests don''t depend on other unit tests, but this
    is not always achievable. Nevertheless, strive to avoid chains of dependencies
    since they are evil when things go wrong, and you''ll have to debug.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**隔离**：理想情况下，你应该能够随时以任何顺序运行任何测试。如果你的单元测试是隔离的，并且专注于小代码片段，这是可能的。良好的单元测试不依赖于其他单元测试，但这并不总是可实现的。尽量避免依赖链，因为当出现问题时它们是有害的，你将不得不进行调试。'
- en: '**Repeatable**: A unit test should be repeatable. This means that the unit
    test''s assertions should produce the same result every time you run it. In other
    words, the unit tests should not depend on anything that may introduce variable
    results to assertions.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**可重复**：单元测试应该是可重复的。这意味着单元测试的断言每次运行时都应该产生相同的结果。换句话说，单元测试不应该依赖于可能给断言引入可变结果的任何东西。'
- en: '**Self-validating**: Unit tests should be self-validating. This means that
    you shouldn''t manually verify the results of the tests. This is time-consuming
    and reveals that the assertions are not doing their job. Strive to write assertions
    so that they work as expected.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**自我验证**：单元测试应该是自我验证的。这意味着你不应该手动验证测试的结果。这是耗时的，并且会显示断言没有完成它们的工作。努力编写断言，使它们按预期工作。'
- en: '**Timely**: It is important to not postpone writing unit tests. The more you
    postpone, the more defects you''ll face. You''ll find out that you cannot find
    time to come back and write unit tests. Think of what''s happening if we constantly
    postpone taking out the trash. The more we postpone, the harder it will be to
    take it on, and we risk our health. Did I say anything about the smell? So, write
    the unit tests in a timely fashion. This is a good habit!'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 及时：重要的是不要推迟编写单元测试。你推迟得越久，面对的缺陷就会越多。你会发现自己找不到时间回来编写单元测试。想想如果我们不断推迟倒垃圾会发生什么。我们推迟得越久，拿出来就会越困难，我们的健康也会受到风险。我有没有提到气味？所以，及时地编写单元测试。这是一个好习惯！
- en: Coding challenge 3 – Test fixtures
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战3 - 测试夹具
- en: '**Problem**: What are test fixtures?'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：什么是测试夹具？'
- en: '**Solution**: By test fixtures, we mean any test data that lives outside that
    test and is used to set up the application so that it''s in a fixed state. Having
    a fixed state for the application allows the tests to be run against a constant
    and known environment.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：通过测试夹具，我们指的是任何存在于测试之外并用于设置应用程序的测试数据，以便它处于固定状态。应用程序的固定状态允许对其进行测试，并且处于一个恒定和已知的环境中。'
- en: Coding challenge 4 – Exception testing
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战4-异常测试
- en: '**Problem**: What are the common approaches for testing exceptions in JUnit?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：在JUnit中测试异常的常见方法有哪些？'
- en: '`try`/`catch` idiom, the `expected` element of `@Test`, and via the `ExpectedException`
    rule.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`/`catch`习语，`@Test`的`expected`元素，以及通过`ExpectedException`规则。'
- en: 'The `try`/`catch` idiom prevailed in JUnit 3.x and can be used as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`/`catch`习语在JUnit 3.x中盛行，并且可以如下使用：'
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since `fail()`throws an `AssertionError`, it cannot be used to test this error
    type.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`fail()`抛出`AssertionError`，它不能用来测试这种错误类型。
- en: 'Starting with JUnit 4, we can use the `expected` element of the `@Test` annotation.
    The value of this element is the type of the expected exception (subclasses of
    `Throwable`). Check out the following example, which was written using `expected`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从JUnit 4开始，我们可以使用`@Test`注解的`expected`元素。该元素的值是预期异常的类型（`Throwable`的子类）。查看以下示例，该示例使用了`expected`：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This approach is alright as long as you don't want to test the value of the
    exception message. Moreover, pay attention that the test passes if a `NoSuchElementException`
    is thrown by any line of code. You may expect this exception to be caused by a
    particular line of code, while it can, in fact, be caused by other code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您不想测试异常消息的值，这种方法就可以。此外，请注意，如果任何代码行抛出`NoSuchElementException`，则测试将通过。您可能期望此异常是由特定代码行引起的，而实际上可能是由其他代码引起的。
- en: 'Another approach relies on the `ExpectedException` rule. This approach was
    deprecated starting with JUnit 4.13\. Let''s take a look at the code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法依赖于`ExpectedException`规则。从JUnit 4.13开始，此方法已被弃用。让我们看看代码：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Via this approach, you can test the value of the exception message. These examples
    have been grouped into an application called *junit4/TestingExceptions*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方法，您可以测试异常消息的值。这些示例已被分组到一个名为*junit4/TestingExceptions*的应用程序中。
- en: 'Starting with JUnit5, there are two approaches we can use to test exceptions.
    Both of them rely on the `assertThrows()` method. This method allows us to assert
    that a given function call (passed in as a lambda expression or even as a method
    reference) results in the expected type of exception being thrown. The following
    example speaks for itself:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从JUnit5开始，我们可以使用两种方法来测试异常。它们都依赖于`assertThrows()`方法。此方法允许我们断言给定的函数调用（作为lambda表达式甚至作为方法引用传递）导致抛出预期类型的异常。以下示例不言自明：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This example just validates the type of exception. However, since the exception
    has been thrown, we can assert more details of the thrown exception. For example,
    we can assert the value of the exception message as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只验证了异常的类型。但是，由于异常已被抛出，我们可以断言抛出异常的更多细节。例如，我们可以断言异常消息的值如下：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Simply use the `ex` object to assert anything you consider useful from `Throwable`.
    Whenever you don't need to assert details about the exception, rely on `assertThrows()`,
    without capturing the return. These two examples have been grouped into an application
    called *junit5/TestingExceptions*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 只需使用`ex`对象来断言您认为从`Throwable`中有用的任何内容。每当您不需要断言有关异常的详细信息时，请依靠`assertThrows()`，而不捕获返回。这两个示例已被分组到一个名为*junit5/TestingExceptions*的应用程序中。
- en: Coding challenge 5 – Developer or tester
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战5-开发人员还是测试人员
- en: '**Problem**: Who should use JUnit – the developer or the tester?'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：谁应该使用JUnit-开发人员还是测试人员？'
- en: '**Solution**: Commonly, JUnit is used by developers for writing unit tests
    in Java. Writing unit tests is a coding process that tests the application code.
    JUnit is not a testing process. However, many testers are open to learn and use
    JUnit for unit testing.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：通常，JUnit由开发人员用于编写Java中的单元测试。编写单元测试是测试应用程序代码的编码过程。JUnit不是一个测试过程。但是，许多测试人员愿意学习并使用JUnit进行单元测试。'
- en: Coding challenge 6 – JUnit extensions
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战6-JUnit扩展
- en: '**Problem**: What useful JUnit extensions do you know/use?'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：您知道/使用哪些有用的JUnit扩展？'
- en: '**Solution**: The most widely used JUnit extensions are JWebUnit (a Java-based
    testing framework for web applications), XMLUnit (a single JUnit extension class
    for testing XML), Cactus (a simple testing framework for testing server-side Java
    code), and MockObject (a mocking framework). You will need to say a few words
    about each of these.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：最常用的JUnit扩展是JWebUnit（用于Web应用程序的基于Java的测试框架）、XMLUnit（用于测试XML的单个JUnit扩展类）、Cactus（用于测试服务器端Java代码的简单测试框架）和MockObject（模拟框架）。您需要对这些扩展中的每一个都说几句话。'
- en: Coding challenge 7 – @Before* and @After* annotations
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战7-@Before*和@After*注释
- en: '`@Before*`/`@After*` annotation do you know about/use?'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您知道/使用哪些`@Before*`/`@After*`注释？
- en: '`@Before`, `@BeforeClass`, `@After`, and `@AfterClass`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Before`，`@BeforeClass`，`@After`和`@AfterClass`。'
- en: When executing a method before each test, we annotate it with the `@Before`
    annotation. This is useful for executing a common snippet of code before running
    a test (for example, we may need to perform some reinitializations before each
    test). To clean up the stage after each test, we annotate a method with the `@After`
    annotation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个测试之前执行方法时，我们使用`@Before`注解对其进行注释。这对于在运行测试之前执行常见的代码片段非常有用（例如，我们可能需要在每个测试之前执行一些重新初始化）。在每个测试之后清理舞台时，我们使用`@After`注解对方法进行注释。
- en: When executing a method only once before all tests, we annotate it with the
    `@BeforeClass` annotation. The method must be `static`. This is useful for global
    and expensive settings, such as opening a connection to a database. To clean up
    the stage after all the tests are done, we annotate a `static` method with the
    `@AfterClass` annotation; for example, closing a database connection.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当仅在所有测试之前执行一次方法时，我们使用`@BeforeClass`注解对其进行注释。该方法必须是`static`的。这对于全局和昂贵的设置非常有用，例如打开到数据库的连接。在所有测试完成后清理舞台时，我们使用`@AfterClass`注解对一个`static`方法进行注释；例如，关闭数据库连接。
- en: You can find a simple example under the name *junit4/BeforeAfterAnnotations*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在名为*junit4/BeforeAfterAnnotations*的简单示例中找到一个简单的示例。
- en: Starting with JUnit5, we have `@BeforeEach` as the equivalent of `@Before` and
    `@BeforeAll` as the equivalent of `@BeforeClass`. Practically, `@Before` and `@BeforeClass`
    were renamed with more suggestive names to avoid confusion.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从JUnit5开始，我们有`@BeforeEach`作为`@Before`的等效项，`@BeforeAll`作为`@BeforeClass`的等效项。实际上，`@Before`和`@BeforeClass`被重命名为更具指示性的名称，以避免混淆。
- en: You can find a simple example of this under the name *junit5/BeforeAfterAnnotations*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在名称为*junit5/BeforeAfterAnnotations*的简单示例中找到这个。
- en: Coding challenge 8 – Mocking and stubbing
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战8 - 模拟和存根
- en: '**Problem**: What is mocking and stubbing?'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：模拟和存根是什么？'
- en: '**Solution**: Mocking is a technique that''s used to create objects that emulate/mimic
    real objects. These objects can be pre-programmed (or preset or pre-configured)
    with expectations and we can check whether they have been called. Among the most
    widely used mocking frameworks available, we have Mockito and EasyMock.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：模拟是一种用于创建模拟真实对象的对象的技术。这些对象可以预先编程（或预设或预配置）期望，并且我们可以检查它们是否已被调用。在最广泛使用的模拟框架中，我们有Mockito和EasyMock。'
- en: Stubbing is like mocking, except that we cannot check whether they have been
    called. Stubs are pre-configured to respond to particular inputs with particular
    outputs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 存根类似于模拟，只是我们无法检查它们是否已被调用。存根预先配置为使用特定输入产生特定输出。
- en: Coding challenge 9 – Test suite
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战9 - 测试套件
- en: '**Problem**: What is a test suite?'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：什么是测试套件？'
- en: '**Solution**: A test suite is the concept of aggregating multiple tests divided
    among multiple test classes and packages so that they run together.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：测试套件是将多个测试聚合在多个测试类和包中，以便它们一起运行的概念。'
- en: 'In JUnit4, we can define a test suite via the `org.junit.runners.Suite` runner
    and the `@SuiteClasses(...)` annotation. For example, the following snippet of
    code is a test suite that aggregates three tests (`TestConnect.class`, `TestHeartbeat.class`,
    and `TestDisconnect.class`):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在JUnit4中，我们可以通过`org.junit.runners.Suite`运行器和`@SuiteClasses(...)`注解来定义测试套件。例如，以下代码片段是一个聚合了三个测试（`TestConnect.class`，`TestHeartbeat.class`和`TestDisconnect.class`）的测试套件：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The complete code is called *junit4/TestSuite*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码称为*junit4/TestSuite*。
- en: In JUnit5, we can define a test suite via the `@SelectPackages` and `@SelectClasses`
    annotations.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在JUnit5中，我们可以通过`@SelectPackages`和`@SelectClasses`注解来定义测试套件。
- en: 'The `@SelectPackages` annotation is useful for aggregating tests from different
    packages. All we have to do is specify the names of the packages, as shown in
    the following example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SelectPackages`注解对于从不同包中聚合测试非常有用。我们只需要指定包的名称，如下例所示：'
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `@SelectClasses` annotation is useful for aggregating tests via the names
    of their classes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SelectClasses`注解对于通过类名聚合测试非常有用：'
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The complete code is called *junit5/TestSuite*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码称为*junit5/TestSuite*。
- en: 'Additionally, filtering test packages, test classes, and test methods can be
    done via the following annotations:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以通过以下注解来过滤测试包、测试类和测试方法：
- en: 'Filter packages: `@IncludePackages` and `@ExcludePackages`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤包：`@IncludePackages`和`@ExcludePackages`
- en: 'Filter test classes: `@IncludeClassNamePatterns` and `@ExcludeClassNamePatterns`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤测试类：`@IncludeClassNamePatterns`和`@ExcludeClassNamePatterns`
- en: 'Filter test methods: `@IncludeTags` and `@ExcludeTags`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤测试方法：`@IncludeTags`和`@ExcludeTags`
- en: Coding challenge 10 – Ignoring test methods
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战10 - 忽略测试方法
- en: '**Problem**: How can we ignore a test?'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：如何忽略测试？'
- en: '`@Ignore` annotation. In JUnit5, we can do the same thing via the `@Disable`
    annotation.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Ignore`注解。在JUnit5中，我们可以通过`@Disable`注解做同样的事情。'
- en: Ignoring test methods can be useful when we have written some tests in advance
    and we want to run the current tests without running these particular tests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略测试方法在我们预先编写了一些测试并且希望在运行当前测试时不运行这些特定测试时是有用的。
- en: Coding challenge 11 – Assumptions
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战11 - 假设
- en: '**Problem**: What are assumptions?'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：什么是假设？'
- en: '**Solution**: Assumptions are used to execute tests if the specified conditions
    have been met. They are commonly used to handle external conditions that are required
    for the test to execute properly, but that are not under our control and/or are
    not directly related to what is being tested.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：假设用于执行测试，如果满足指定条件，则使用假设。它们通常用于处理测试执行所需的外部条件，但这些条件不在我们的控制范围之内，或者与被测试的内容不直接相关。'
- en: 'In JUnit4, assumptions are `static` methods that can be found in the `org.junit.Assume`
    package. Among these assumptions, we have `assumeThat()`, `assumeTrue()`, and
    `assumeFalse()`. The following snippet of code exemplifies the usage of `assumeThat()`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在JUnit4中，假设是可以在`org.junit.Assume`包中找到的`static`方法。在这些假设中，我们有`assumeThat()`，`assumeTrue()`和`assumeFalse()`。以下代码片段举例说明了`assumeThat()`的用法：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If `assumeThat()` doesn't meet the given condition, then the test is skipped.
    The complete application is called *junit4/Assumptions*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`assumeThat()`不满足给定条件，则测试将被跳过。完整的应用程序称为*junit4/Assumptions*。
- en: 'In JUnit5, assumptions are `static` methods that can be found in the `org.junit.jupiter.api.Assumptions`
    package. Among these assumptions, we have `assumeThat()`, `assumeTrue()`, and
    `assumeFalse()`. All three come in different flavors. The following snippet of
    code exemplifies the usage of `assumeThat()`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在JUnit5中，假设是可以在`org.junit.jupiter.api.Assumptions`包中找到的`static`方法。在这些假设中，我们有`assumeThat()`，`assumeTrue()`和`assumeFalse()`。所有三种都有不同的用法。以下代码片段举例说明了`assumeThat()`的用法：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that the test method (`assertThat()`) will only execute if the assumption
    is met. Everything after the lambda will be executed, irrespective of the assumption's
    validity. The complete application is called *junit5/Assumptions*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，测试方法（`assertThat()`）只有在满足假设时才会执行。lambda之后的所有内容都将被执行，而不管假设的有效性如何。完整的应用程序称为*junit5/Assumptions*。
- en: Coding challenge 12 – @Rule
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战12 - @Rule
- en: '`@Rule`?'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Rule`？'
- en: '**Solution**: JUnit provides a high degree of flexibility via so-called *rules*.
    Rules allows us to create and isolate objects (code) and reuse this code in multiple
    test classes. Mainly, we enhance tests with reusable rules. JUnit comes with built-in
    rules and with an API that can be used to write custom rules.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：JUnit通过所谓的*规则*提供了高度的灵活性。规则允许我们创建和隔离对象（代码），并在多个测试类中重用这些代码。主要是通过可重用的规则增强测试。JUnit提供了内置规则和可以用来编写自定义规则的API。'
- en: Coding challenge 13 – Method test return type
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战13 - 方法测试返回类型
- en: '`void` from a JUnit test method?'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在JUnit测试方法中使用`void`？
- en: '`void` to something else, but JUnit will not recognize it as a test method,
    so it will be ignored during the test''s execution.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将`void`转换为其他内容，但JUnit不会将其识别为测试方法，因此在测试执行期间将被忽略。
- en: Coding challenge 14 – Dynamic tests
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战14 - 动态测试
- en: '**Problem**: Can we write dynamic tests (tests generated at runtime) in JUnit?'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：我们能在JUnit中编写动态测试（在运行时生成的测试）吗？'
- en: '`@Test` were static tests that were fully defined at compile time. JUnit5 introduced
    dynamic tests – a dynamic test is generated at runtime.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Test`是在编译时完全定义的静态测试。JUnit5引入了动态测试 - 动态测试是在运行时生成的。'
- en: Dynamic tests are generated via a factory method, which is a method annotated
    with the `@TestFactory` annotation. Such a method can return `Iterator`, `Iterable`,
    `Collection`, or `Stream` of `DynamicTest` instances. A factory method is not
    annotated with `@Test`, and is not `private` or `static`. Moreover, dynamic tests
    cannot take advantage of life cycle callbacks (for example, `@BeforeEach` and
    `@AfterEach` are ignored).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 动态测试是通过一个工厂方法生成的，这个方法使用`@TestFactory`注解进行注释。这样的方法可以返回`DynamicTest`实例的`Iterator`、`Iterable`、`Collection`或`Stream`。工厂方法没有被`@Test`注解，并且不是`private`或`static`。此外，动态测试不能利用生命周期回调（例如，`@BeforeEach`和`@AfterEach`会被忽略）。
- en: 'Let''s look at a simple example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子：
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s point out the main lines of code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们指出主要的代码行：
- en: '`@TestFactory` annotation to instruct JUnit5 that this is a factory method
    for dynamic tests.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`@TestFactory`注解来指示JUnit5这是一个动态测试的工厂方法。'
- en: '`Stream<DynamicTest>`.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Stream<DynamicTest>`。'
- en: '**4**: The input for our tests is a list of integers. For each integer, we
    generate a dynamic test.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**4**：我们测试的输入是一个整数列表。对于每个整数，我们生成一个动态测试。'
- en: '`List<DynamicTest>`. In this list, we add each generated test.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<DynamicTest>`。在这个列表中，我们添加每个生成的测试。'
- en: '**8-12**: We generate a test for each integer. Each test has a name and a lambda
    expression containing the requisite assertion(s).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**8-12**：我们为每个整数生成一个测试。每个测试都有一个名称和包含必要断言的lambda表达式。'
- en: '**13**: We store the generated test in the proper list.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**13**：我们将生成的测试存储在适当的列表中。'
- en: '`Stream` of tests.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的`Stream`。
- en: Running this test factory will produce five tests. The complete example is called
    *junit5/TestFactory*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个测试工厂将产生五个测试。完整的例子被称为*junit5/TestFactory*。
- en: Coding challenge 15 – Nested tests
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码挑战15 - 嵌套测试
- en: '**Problem**: Can we write nested tests in JUnit5?'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：我们能在JUnit5中编写嵌套测试吗？'
- en: '`@Nested` annotation. Practically, we create a nested test class hierarchy.
    This hierarchy may contain the setup, teardown, and test methods. Nevertheless,
    there are some rules that we must respect, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Nested`注解。实际上，我们创建了一个嵌套测试类层次结构。这个层次结构可能包含设置、拆卸和测试方法。然而，我们必须遵守一些规则，如下：'
- en: Nested test classes are annotated with the `@Nested` annotation.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套测试类使用`@Nested`注解进行注释。
- en: Nested test classes are non-`static` inner classes.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套测试类是非`static`的内部类。
- en: A nested test class can contain one `@BeforeEach` method, one `@AfterEach` method,
    and test methods.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套测试类可以包含一个`@BeforeEach`方法，一个`@AfterEach`方法和测试方法。
- en: The `static` members are not allowed in inner classes, which means that the
    `@BeforeAll` and `@AfterAll` methods cannot be used in nested tests.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部类中不允许使用`static`成员，这意味着嵌套测试中不能使用`@BeforeAll`和`@AfterAll`方法。
- en: The depth of the class hierarchy is unlimited.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类层次结构的深度是无限的。
- en: 'Some sample code for a nested test can be seen here:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套测试的一些示例代码可以在这里看到：
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The complete example is called *junit5/NestedTests*.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的例子被称为*junit5/NestedTests*。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered several hot questions and coding challenges about
    unit testing via JUnit4 and JUnit5\. It is important to not neglect this topic.
    Most likely, in the last part of an interview for a Java developer or software
    engineer position, you'll get several questions related to testing. Moreover,
    those questions will be related to unit testing and JUnit.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了关于通过JUnit4和JUnit5进行单元测试的几个热门问题和编码挑战。不要忽视这个话题是很重要的。很可能，在Java开发人员或软件工程师职位的面试的最后部分，你会得到一些与测试相关的问题。此外，这些问题将与单元测试和JUnit相关。
- en: In the next chapter, we will discuss scaling and scaling-related interview questions.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论与扩展和扩展相关的面试问题。
