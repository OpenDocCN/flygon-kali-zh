- en: Implementing a Generic Interface to Accomplish Sorting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现泛型接口以实现排序
- en: In this chapter, you'll learn upcasting and downcasting and then how to implement
    a generic interface and how exactly that helps us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习向上转型和向下转型，然后学习如何实现泛型接口以及它如何帮助我们。
- en: Imagine that you have a list of objects, which you have made of your own type,
    and you want to sort them. You'll need to figure out just how you can sort these
    objects. This comes from implementing `IComparable`, a generic interface that
    can act on different data types.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一个对象列表，你已经用自己的类型创建了这些对象，并且你想对它们进行排序。你需要弄清楚如何对这些对象进行排序。这来自于实现`IComparable`，这是一个可以作用于不同数据类型的泛型接口。
- en: Adding a button to sort and display results
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个按钮来排序和显示结果
- en: 'Open up a project and click on the <html> tab. Once again, the only thing that
    you need to put in there is a button. For this, go to Toolbox and grab a `Button`
    control. Drag and drop it below the line beginning with `<form id=...` and change
    the text on the button to say `Sort and Show`. Now, put a `<br>` tag in there
    at the end of the line and keep the label as usual:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目并点击<html>标签。同样，你需要放入的只是一个按钮。为此，转到工具箱并拖动一个`Button`控件。将其放在`<form id=...`行下面并将按钮上的文本更改为`Sort
    and Show`。现在，在该行的末尾放入一个`<br>`标签，并保持标签不变：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, go to the Design view, where you should see only the Sort and Show button
    as shown in *Figure 3.3.1*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到设计视图，在那里你应该只看到一个名为Sort and Show的按钮，如*图3.3.1*所示。
- en: '![](img/23d3ad22-094e-44ca-b8ea-101219d785a7.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23d3ad22-094e-44ca-b8ea-101219d785a7.png)'
- en: 'Figure 3.3.1: Adding a button'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3.1：添加一个按钮
- en: Creating a generics interface class
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个泛型接口类
- en: Next, go to Solution Explorer. Right-click on the name of the website, select
    Add, and then click on Class. Name the class `GenInterface` and then click on
    OK. When the Visual Studio message comes up, click on Yes. Remember, this is just
    an example.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，转到解决方案资源管理器。右键点击网站的名称，选择添加，然后点击类。将类命名为`GenInterface`，然后点击确定。当Visual Studio消息出现时，点击是。记住，这只是一个例子。
- en: The code for the `GenInterface` class is really complex. I'll create it now
    line-by-line, explaining what I'm doing and why I'm doing it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`GenInterface`类的代码真的很复杂。我将逐行创建它，解释我在做什么以及为什么这样做。'
- en: 'First, delete everything except `using System;` at the very top. Next, you''ll
    make the class called `Quad` for a four-sided shape of some kind. Enter the following
    after `using System`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在顶部除了`using System;`之外删除所有内容。接下来，你将创建一个名为`Quad`的类，用于表示某种四边形。在`using System`之后输入以下内容：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This needs `System` so that we can use `IComparable`. If you right-click on
    it and select Go To Definition in the drop-down menu (*F12*), you can see the
    definition of this thing. You will see `namespace System` near the top, and the
    `public intCompareTo (T other);` function after the `Returns` definition, as shown
    in *Figure 3.3.2*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要`System`，这样我们才能使用`IComparable`。如果你右键点击它并在下拉菜单中选择Go To Definition（*F12*），你可以看到这个东西的定义。你会看到`namespace
    System`在顶部附近，以及`public intCompareTo (T other);`函数在`Returns`定义之后，如*图3.3.2*所示：
- en: '![](img/8f2cc003-2a23-4922-807b-b2a11ca4399d.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f2cc003-2a23-4922-807b-b2a11ca4399d.png)'
- en: 'Figure 3.3.2: The definition of IComparable'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3.2：IComparable的定义
- en: Notice that it returns an integer. So, when we implement this interface, we
    have to keep that in mind. Now, close the definition window.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它返回一个整数。因此，当我们实现这个接口时，我们必须记住这一点。现在关闭定义窗口。
- en: 'In our particular case, enter the following text below the open curly brace
    under the line beginning with `public class Quad...`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的特定情况下，在以`public class Quad...`开头的行下面输入以下文本：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, to set the value, enter the following between a set of curly braces beneath
    the preceding lines:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了设置值，在上述行的大括号之间输入以下内容：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After all, every quadrilateral shape, which is a square, rectangle, or rhombus,
    all have a name, don't they? So, it's a good idea to centralize the name feature
    in the `Quad class`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，每个四边形形状，无论是正方形、矩形还是菱形，都有一个名称，对吧？所以，在`Quad`类中将名称特性集中起来是个好主意。
- en: Implementing the interface
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现接口
- en: Next, because `IComparable` has a function, right-click on it, select Quick
    Actions, and choose Implement interface from the popup. Now, we have to write
    code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，因为`IComparable`有一个函数，右键点击它，选择快速操作，然后从弹出菜单中选择实现接口。现在，我们需要编写代码。
- en: 'First, delete `throw new NotImplementedException()`. Now, we will implement
    the interface in a way that''s sufficient to illustrate the point. For this, enter
    the following beneath the open curly brace under the `public int CompareTo(Quad
    other)` line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先删除`throw new NotImplementedException()`。现在，我们将以足够说明问题的方式实现接口。为此，在`public int
    CompareTo(Quad other)`行下的大括号内输入以下内容：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, `this` means the current object, and the name of this object is compared
    to `other.name`, meaning the other object. Look at where it says `(Quad other)`
    in the line above this one; in other words, we''re comparing two `Quads`. So,
    in the one on the left, `this` is the one on which the function is being invoked
    and the other `Quad` class is the one against which it''s being compared. So,
    if `this` is less than `0`, we will return a number such as `-1`, else it can
    return some other value, such as `1`. Enter the following between a set of curly
    braces below this line:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`this`表示当前对象，这个对象的名称与`other.name`进行比较，意思是另一个对象。看看上面一行中`(Quad other)`所在的地方；换句话说，我们正在比较两个`Quads`。因此，在左边的对象中，`this`是调用该函数的对象，而另一个`Quad`类是与之进行比较的对象。因此，如果`this`小于`0`，我们将返回一个数字，比如`-1`，否则它可以返回其他值，比如`1`。在这行下面的大括号之间输入以下内容：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have just implemented `CompareTo`. Now, notice that the *this* is not necessary.
    You can remove it and it will still work. Remember, however, that name essentially
    means the current object under which `CompareTo` will be invoked. This is why
    I like to have the `this` keyword present, because it is more suggestive of what
    I want to know.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚实现了`CompareTo`。现在注意到`*this*`是不必要的。你可以删除它，它仍然可以工作。但请记住，name本质上意味着将在其中调用`CompareTo`的当前对象。这就是为什么我喜欢有`this`关键字存在，因为它更能暗示我想要知道的内容。
- en: Basically, what this line is saying is that if the current object when compared
    to the other name is less than `0`, then we return `-1`, which means that the
    current object will come before the next object in the list when you sort it.
    That's a simple interpretation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这行的意思是，如果当前对象与另一个名称比较小于`0`，那么我们返回`-1`，这意味着当前对象将在排序时出现在下一个对象之前。这是一个简单的解释。
- en: Adding a virtual function
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个虚函数
- en: 'Now, in the next stage, we will add a virtual function called `Perimeter`.
    For this, enter the following beneath the closed curly brace:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一个阶段，我们将添加一个名为`Perimeter`的虚函数。为此，请在闭合大括号下面输入以下内容：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Again, we''ll centralize as much as we can. So, enter the following within
    a set of curly braces below this line:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将尽可能地集中。因此，请在此行下面的一对大括号中输入以下内容：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The specific name can come from this line, because the `name` instance variable
    is declared above in `private string name`. However, the `Perimeter` will come
    from the derived classes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的名称可以来自这一行，因为`name`实例变量在`private string name`上面声明。然而，`Perimeter`将来自派生类。
- en: 'So now, enter the following beneath the preceding closed curly brace:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前面的闭合大括号下面输入以下内容：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding refinements
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加改进
- en: 'Now we add class-specific refinements; for this, enter the following between
    a set of curly braces beneath the preceding line:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加类特定的改进；为此，请在前面的行下面的一对大括号之间输入以下内容：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `string n` is the name and `doubles` is the side. Then, call the `base`
    class constructor with the name (`n`) and then enter `sideLength = s`. Remember,
    when you are calling the `base` class constructor, you're reusing code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`string n`是名称，`doubles`是边。然后，用名称（`n`）调用`base`类构造函数，然后输入`sideLength = s`。请记住，当你调用`base`类构造函数时，你正在重用代码。
- en: 'I''ve chosen to express this as a single line just to save space. Remember
    that, normally, it would look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择将其表达为一行，只是为了节省空间。请记住，通常它看起来是这样的：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we have to implement an override version of `Perimeter`. So, enter the
    following beneath the preceding closed curly brace:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须实现`Perimeter`的覆盖版本。因此，在前面的闭合大括号下面输入以下内容：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we want to keep `return base.Perimeter()`, which appears automatically,
    because it provides the useful default functionality, `$"The perimeter of {name}
    is ";`, from the preceding return line: we don''t want to keep typing that. What
    we do want to do is add a small refinement. So, add the following refinement to
    `return base.Perimeter()`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要保留`return base.Perimeter()`，它会自动出现，因为它提供了有用的默认功能，`$"The perimeter of
    {name} is ";`，来自前面的返回行：我们不想一直输入那个。我们想要做的是添加一个小的改进。所以，在`return base.Perimeter()`中添加以下改进：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This means four times the `sideLength` variable, because to find the perimeter
    of a square, you take four multiplied by the length of one side.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着四倍的`sideLength`变量，因为要找到正方形的周长，你要取四乘以一边的长度。
- en: 'Refinement comes from the derived class generic functionality, which is equally
    applicable to all the classes you stick into a virtual method in the `base` class:
    you don''t have to keep writing it.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 改进来自派生类的通用功能，这同样适用于你将其放入`base`类的虚方法中的所有类：你不必一直写它。
- en: 'Next, we can repeat this for our rectangle. So, copy the `public class Square
    : Quad` block (*Ctrl* + *C*) and then paste (*Ctrl* +& *V*) down below:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们可以为我们的矩形重复这个过程。所以，复制`public class Square : Quad`块（*Ctrl* + *C*），然后粘贴（*Ctrl*
    + *V*）到下面：'
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, make the following changes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行以下更改：
- en: Rename this block to `Rectangle`. This is also derived from `Quad`, so that's
    fine.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此块重命名为`Rectangle`。这也是从`Quad`派生的，所以没问题。
- en: Change where it says `sideLength`; because a rectangle has two different side
    lengths, so change that to say `sideOne` and `sideTwo`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变`sideLength`的地方；因为矩形有两个不同的边长，所以把它改成`sideOne`和`sideTwo`。
- en: Change `public Square` to `public Rectangle` as the name of the constructor.
    It calls the base class constructor with the name.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`public Square`改为`public Rectangle`作为构造函数的名称。它调用了带有名称的基类构造函数。
- en: Then, initialize the other two, so now you'll say `double s1` and `double s2`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，初始化另外两个，现在你会说`double s1`和`double s2`。
- en: 'Next, you have to initialize the fields, so say `sideOne = s1;` and `sideTwo
    = s2;`. That''s it: they''ve been initialized.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您必须初始化字段，所以说`sideOne = s1;`和`sideTwo = s2;`。就是这样：它们已经被初始化了。
- en: Now again, override `Perimeter` inside the `Rectangle` class as shown earlier.
    Here, you specify the bit that applies to rectangles, so `(2 * sideOne + 2 * sideTwo)`.
    Make sure that you enclose this within parentheses, so that the calculation is
    done first and then it's combined together with `base.Perimeter` with the rest
    of it.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在再次在`Rectangle`类中覆盖`Perimeter`，就像之前展示的那样。在这里，你指定适用于矩形的部分，所以是`(2 * sideOne +
    2 * sideTwo)`。确保将其括在括号中，这样计算就会先进行，然后再与`base.Perimeter`的其余部分结合在一起。
- en: 'So, that''s that class. For reference, the complete version of the `GenInterface`
    class, including comments, is shown in the following code block:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，就是这样的类。供参考，包括注释的`GenInterface`类的完整版本如下所示：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Entering the reference code
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入参考代码
- en: Now, I'll do my reference code. This code is mechanical. There's a lot of it,
    but it's mechanical. Remember, the big idea here is that `IComparable` is being
    implemented using the `CompareTo` method inside the `Quad` class, which means
    that now when we stick different shapes into a list of quads, we will be able
    to sort them in some fashion. So, now our names will be sorted. In our case, we'll
    be sorting them by name.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将进行参考代码。这段代码是机械的。有很多代码，但它是机械的。记住，这里的重要思想是使用`Quad`类内部的`CompareTo`方法来实现`IComparable`，这意味着现在当我们将不同的形状放入`Quads`列表中时，我们将能够以某种方式对它们进行排序。所以，现在我们的名称将被排序。在我们的情况下，我们将按名称对它们进行排序。
- en: Now go to `Default.aspx`, and enter the Design view. Double-click on the Sort
    and Show button. This takes us into `Default.aspx.cs`. Delete the `Page_Load`
    block.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到`Default.aspx`，并进入设计视图。双击“排序并显示”按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。
- en: 'Next, between the set of curly braces under the line beginning with `protected
    void Button1_Click...`, the first thing we''ll do is to put a `Quad` on the left-hand
    side and we''ll call it `sqr`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在以`protected void Button1_Click...`开头的一行下的大括号之间，我们要做的第一件事是在左侧放置一个`Quad`，然后我们称之为`sqr`：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Upcasting
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向上转型
- en: Notice that I've written `new Square`. This is *upcasting*. Here, this involves
    converting the object on the right-hand side, because it's derived from its `Quad`.
    On the left-hand side, you can make a `Quad` namespace and put an object that
    is of a derived type on the right side; so, we'll call this one `Square` and then
    enter a side length of `4`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我写了`new Square`。这是*向上转型*。在这里，这涉及到将右侧的对象转换，因为它是从其`Quad`派生的。在左侧，你可以创建一个`Quad`命名空间，并在右侧放置一个派生类型的对象；所以，我们将称之为`Square`，然后输入一个边长为`4`。
- en: 'Next, enter the following directly below this line:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在这行的正下方直接输入以下内容：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Again, we put a `Quad` namespace on the left-hand side, and this time we called
    it `rect`. We give it the name `Rectangle`, and then we put in two sides of lengths
    `2` and `5`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们在左侧放置了一个`Quad`命名空间，这次我们称之为`rect`。我们给它起名叫`Rectangle`，然后我们放入两条边，长度分别为`2`和`5`。
- en: 'Now, you can store this in a list, for example, which you can sort. Imagine
    if you had many of these, you would need a way to sort this information. So now,
    go to the top of this file, and enter the following beneath `using System`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将这个存储在一个列表中，例如，你可以对其进行排序。想象一下，如果你有很多这样的东西，你需要一种方法来对这些信息进行排序。所以现在，转到这个文件的顶部，在`using
    System`下面输入以下内容：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, under the `Quad rect...` line, enter the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Quad rect...`行下面输入以下内容：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We'll call this list `new List<Quad>`, and to initialize a list you can always
    use an array. To do this, type `new Quad` and then initialize it with `sqr` and
    `rect`. This is how you can always initialize a list within an array.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将称这个列表为`new List<Quad>`，要初始化一个列表，你总是可以使用数组。为此，输入`new Quad`，然后用`sqr`和`rect`进行初始化。这就是你可以在数组中初始化列表的方法。
- en: 'Then, to sort the list, enter the following directly below this line:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了对列表进行排序，在这行的正下方直接输入以下内容：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So, this makes sense now. It doesn't give an error. Imagine if you didn't have
    `IComparable<Quad>` at the top of the `GenInterface` class. This sort would not
    work. If you cut `IComparable<Quad>`, and then take the `CompareTo` method out,
    you will have problems. So, for our purposes, we now have a way of sorting these
    `Quads` classes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在这是有意义的。它不会出错。想象一下，如果你在`GenInterface`类的顶部没有写`IComparable<Quad>`。这个排序就不会起作用。如果你去掉`IComparable<Quad>`，然后把`CompareTo`方法拿出来，你会有问题。所以，对于我们的目的，我们现在有一种对这些`Quads`类进行排序的方法。
- en: 'For the last stage, start by entering the following below the `Sort` line:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后阶段，从`Sort`行下面开始输入以下内容：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, `is` is a new keyword. You can use it to check whether something is of a
    certain type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`is`是一个新关键字。你可以用它来检查某个东西是否是某种类型。
- en: Downcasting
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向下转型
- en: 'Now, we will talk about *downcasting*, which means going from, for example,
    a parent type to a child type. Enter the following between a set of curly braces
    below this line:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论*向下转型*，这意味着从父类型转到子类型。在这行下面的大括号之间输入以下内容：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, beneath the closed curly brace after the preceding line, enter the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前一行之后的封闭大括号下面输入以下内容：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, you can call the following code; so, copy the `sampLabel.Text...` line
    and paste it between a set of curly braces:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以调用以下代码；所以，复制`sampLabel.Text...`行，并将其粘贴在一对大括号之间：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Be sure to change `Square` to `Rectangle`, so that it gets cast down to a rectangle,
    and then the `Perimeter` function on the rectangle will be called. When you hover
    your mouse over `Perimeter` in the preceding two lines, the popups show `string
    Square.Perimeter()` and `string Square.Perimeter()`, respectively. If you removed
    `(Rectangle)` from the preceding line and hovered your mouse over `Perimeter`,
    the popup will show `string Quad.Perimeter()`. Do you understand? This is why
    I have the cast: because it changes the way the functions are recognized.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将`Square`更改为`Rectangle`，这样它就会被转换为矩形，然后矩形上的`Perimeter`函数将被调用。当你将鼠标悬停在前两行的`Perimeter`上时，弹出窗口显示`string
    Square.Perimeter()`和`string Square.Perimeter()`。如果你从前一行中删除`(Rectangle)`并将鼠标悬停在`Perimeter`上，弹出窗口将显示`string
    Quad.Perimeter()`。你明白吗？这就是为什么我有这个转型：因为它改变了函数被识别的方式。
- en: This is downcasting from a parent to a child class. So, when we talk about bulk
    actions, you cannot cast to a parent class, perform a bulk action like a sort,
    or if you want to add refinements called child classes and child class objects,
    then you can downcast.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从父类向子类的向下转型。所以，当我们谈论批量操作时，你不能转型为父类，执行类似排序的批量操作，或者如果你想添加称为子类和子类对象的细化，那么你可以向下转型。
- en: Running the program
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now, let''s take a look. Open the program in your browser and click on the
    Sort And Show button. The results are shown in *Figure 3.3.3*:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看。在浏览器中打开程序，然后点击“排序并显示”按钮。结果显示在*图3.3.3*中：
- en: '![](img/7a77dc3d-04e7-4ef6-bd2c-0cd90ea664d8.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a77dc3d-04e7-4ef6-bd2c-0cd90ea664d8.png)'
- en: 'Figure 3.3.3: The results of running the program'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3.3：运行程序的结果
- en: This is indeed the perimeter of the rectangle.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实是矩形的周长。
- en: These are the basics of upcasting, downcasting, and implementing a generic interface
    such as `IComparable`. This is really complex code, but I hope you've learned
    a lot.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是向上转型、向下转型和实现通用接口（如`IComparable`）的基础知识。这是非常复杂的代码，但我希望您已经学到了很多。
- en: Chapter review
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了复习，包括注释在内的本章的`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned upcasting, downcasting, and then how to implement
    a generic interface and how that exactly helps us. You created a Generics Interface
    class and a Quad class, implemented an interface, added a virtual `Perimeter`
    function, added refinements to the code, and entered a lot of mechanical reference
    code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了向上转型、向下转型，然后学习了如何实现通用接口以及这对我们有何帮助。您创建了一个通用接口类和一个Quad类，实现了一个接口，添加了一个虚拟的`Perimeter`函数，对代码进行了改进，并输入了大量的机械引用代码。
- en: In the next chapter, you will learn about generic delegates.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关通用委托的知识。
