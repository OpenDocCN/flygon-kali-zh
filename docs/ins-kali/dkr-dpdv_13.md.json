["```\n//Linux\n$ docker network ls\nNETWORK ID        NAME        DRIVER        SCOPE\n333e184cd343      bridge      bridge        local\n\n//Windows\n> docker network ls\nNETWORK ID        NAME        DRIVER        SCOPE\n095d4090fa32      nat         nat           local \n```", "```\ndocker network inspect bridge\n[\n    {\n        \"Name\": \"bridge\",     << Will be nat on Windows\n        \"Id\": \"333e184...d9e55\",\n        \"Created\": \"2018-01-15T20:43:02.566345779Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",   << Will be nat on Windows\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.17.0.0/16\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        <Snip>\n    }\n] \n```", "```\n$ ip link show docker0\n`3`: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu `1500` qdisc...\n    link/ether `02`:42:af:f9:eb:4f brd ff:ff:ff:ff:ff:ff \n```", "```\n$ docker network inspect bridge `|` grep bridge.name\n`\"com.docker.network.bridge.name\"`: `\"docker0\"`, \n```", "```\n//Linux\n$ docker network create -d bridge localnet\n\n//Windows\n> docker network create -d nat localnet \n```", "```\n$ brctl show\nbridge name       bridge id             STP enabled    interfaces\ndocker0           `8000`.0242aff9eb4f     no\nbr-20c2e8ae4bbb   `8000`.02429636237c     no \n```", "```\n$ docker container run -d --name c1 `\\`\n  --network localnet `\\`\n  alpine sleep 1d \n```", "```\n$ docker network inspect localnet --format `'{{json .Containers}}'`\n`{`\n  `\"4edcbd...842c3aa\"`: `{`\n    `\"Name\"`: `\"c1\"`,\n    `\"EndpointID\"`: `\"43a13b...3219b8c13\"`,\n    `\"MacAddress\"`: `\"02:42:ac:14:00:02\"`,\n    `\"IPv4Address\"`: `\"172.20.0.2/16\"`,\n    `\"IPv6Address\"`: `\"\"`\n    `}`\n`}`, \n```", "```\n$ brctl show\nbridge name       bridge id           STP enabled     interfaces\nbr-20c2e8ae4bbb   `8000`.02429636237c   no              vethe792ac0\ndocker0           `8000`.0242aff9eb4f   no \n```", "```\n     //Linux\n     $ docker container run -it --name c2 \\\n       --network localnet \\\n       alpine sh\n\n     //Windows\n     > docker container run -it --name c2 `\n       --network localnet `\n       microsoft/powershell:nanoserver \n    ```", "```\n     > ping c1\n     Pinging c1 [172.26.137.130] with 32 bytes of data:\n     Reply from 172.26.137.130: bytes=32 time=1ms TTL=128\n     Reply from 172.26.137.130: bytes=32 time=1ms TTL=128\n     Control-C \n    ```", "```\n> ipconfig\nWindows IP Configuration\nEthernet adapter Ethernet:\n   Connection-specific DNS Suffix  . :\n   Link-local IPv6 Address . . . . . : fe80::14d1:10c8:f3dc:2eb3%4\n   IPv4 Address. . . . . . . . . . . : 172.26.135.0\n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : 172.26.128.1 \n```", "```\n     $ docker container run -d --name web \\\n       --network localnet \\\n       --publish 5000:80 \\\n       nginx \n    ```", "```\n     $ docker port web\n     80/tcp -> 0.0.0.0:5000 \n    ```", "```\n$ docker network create -d macvlan `\\`\n  --subnet`=``10`.0.0.0/24 `\\`\n  --ip-range`=``10`.0.00/25 `\\`\n  --gateway`=``10`.0.0.1 `\\`\n  -o `parent``=`eth0.100 `\\`\n  macvlan100 \n```", "```\n$ docker container run -d --name mactainer1 `\\`\n  --network macvlan100 `\\`\n  alpine sleep 1d \n```", "```\n{\n  <Snip>\n  \"debug\":true,\n  \"log-level\":\"debug\",\n  <Snip>\n} \n```", "```\n{\n  \"log-driver\": \"syslog\"\n} \n```", "```\n$ docker logs vantage-db\n`1`:C `2` Feb `09`:53:22.903 `# oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo`\n`1`:C `2` Feb `09`:53:22.904 `# Redis version=4.0.6, bits=64, commit=00000000, modi\\`\n`fied``=``0`, `pid``=``1`\n`1`:C `2` Feb `09`:53:22.904 `# Warning: no config file specified, using the defaul\\`\nt config.\n`1`:M `2` Feb `09`:53:22.906 * Running `mode``=`standalone, `port``=``6379`.\n`1`:M `2` Feb `09`:53:22.906 `# WARNING: The TCP backlog setting of 511 cannot be e\\`\nnforced because...\n`1`:M `2` Feb `09`:53:22.906 `# Server initialized`\n`1`:M `2` Feb `09`:53:22.906 `# WARNING overcommit_memory is set to 0!` \n```", "```\n$ docker container run -it --name c1 `\\`\n  --dns`=``8`.8.8.8 `\\`\n  --dns-search`=`dockercerts.com `\\`\n  alpine sh \n```", "```\n$ docker service create -d --name svc1 `\\`\n  --publish `published``=``5000`,target`=``80`,mode`=`host `\\`\n  nginx \n```", "`````````````````````"]