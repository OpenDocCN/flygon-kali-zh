- en: '*Chapter 25*: Building a Simple Image Gallery App'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第25章*：构建一个简单的图片库应用'
- en: '`RecyclerView` widget, we can selectively load just the data required for the
    current page and perhaps the data for the previous and next pages.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`RecyclerView`小部件，我们可以有选择地加载当前页面所需的数据，也许是前一页和下一页的数据。'
- en: The Android API, as you will have come to expect, has some solutions for achieving
    paging in quite a simple manner.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，Android API提供了一些解决方案来以相当简单的方式实现分页。
- en: 'In this chapter, we will learn how to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何做到以下几点：
- en: Achieve paging and swiping with images as you might find in a photo gallery
    app.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现像照片库应用中可能找到的图片一样的分页和滑动。
- en: First, let's look at a swiping example.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一个滑动的例子。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2025](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2025).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，网址为[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2025](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2025)。
- en: Angry Birds classic swipe menu
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 愤怒的小鸟经典滑动菜单
- en: 'Here we can see the famous Angry Birds level selection menu showing swiping/paging
    in action:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到著名的愤怒的小鸟关卡选择菜单展示了滑动/分页的效果：
- en: '![Figure 25.1 – Angry Birds level selection menu'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图25.1 – 愤怒的小鸟关卡选择菜单'
- en: '](img/Figure_25.1_B16773.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_25.1_B16773.jpg)'
- en: Figure 25.1 – Angry Birds level selection menu
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.1 – 愤怒的小鸟关卡选择菜单
- en: Let's build a paging app.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个分页应用。
- en: Building an image gallery/slider app
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个图片库/幻灯片应用
- en: Create a new project in Android Studio called `Image Pager`. Use the **Empty
    Activity** template and leave all the rest of the settings at their defaults.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为`Image Pager`的新项目。使用**空活动**模板，并将其余设置保持默认。
- en: 'The images are in the download bundle in the [*Chapter 25*](B16773_25_ePub_RK.xhtml#_idTextAnchor430)`/Image
    Pager/drawable` folder. This next screenshot shows them in Windows File Explorer:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图片位于[*第25章*](B16773_25_ePub_RK.xhtml#_idTextAnchor430)`/Image Pager/drawable`文件夹中的下载包中。下一张截图显示了它们在Windows文件资源管理器中的情况：
- en: '![Figure 25.2 – Add images'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图25.2 – 添加图片'
- en: '](img/Figure_25.2_B16773.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_25.2_B16773.jpg)'
- en: Figure 25.2 – Add images
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.2 – 添加图片
- en: Add the images to the `drawable` folder in the Project Explorer in Android Studio
    or you could add more interesting images, perhaps some photos you have taken.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将图片添加到Android Studio中的Project Explorer中的`drawable`文件夹中，或者您可以添加更有趣的图片，也许是您拍摄的一些照片。
- en: Implementing the layout
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现布局
- en: For a simple image paging app, we use the `PagerAdapter` class. We can think
    of this as being like `RecyclerAdapter` but for images as it will handle the display
    of an array of images in a `ViewPager` widget. This is much like how `RecyclerAdapter`
    handles the display of the contents of an `ArrayList` in a `ListView`. All we
    need to do is override the appropriate methods.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的图片分页应用，我们使用`PagerAdapter`类。我们可以将其视为像`RecyclerAdapter`一样，但用于图片，因为它将处理`ViewPager`小部件中的图像数组的显示。这很像`RecyclerAdapter`如何处理`ListView`中`ArrayList`的内容的显示。我们只需要重写适当的方法。
- en: 'To implement an image gallery with `PagerAdapter`, we first need a `ViewPager`
    widget in our main layout. So you can see precisely what is required, here is
    the actual XML code for `activity_main.xml`. Edit `activity_main.xml` to look
    exactly like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`PagerAdapter`实现图片库，我们首先需要在主布局中添加一个`ViewPager`小部件。为了确切地了解需要什么，这是`activity_main.xml`的实际XML代码。编辑`activity_main.xml`使其看起来完全像这样：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The class named `androidx.ViewPager.widget.ViewPager` is the class that makes
    this functionality available in Android versions that were released before `ViewPager`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 名为`androidx.ViewPager.widget.ViewPager`的类是在`ViewPager`之前发布的Android版本中提供此功能的类。
- en: Next, a bit like how we needed a layout to represent a list item, we need a
    layout to represent an item, in this case, an image, in `ViewPager`. Create a
    new layout file in the usual way and call it `pager_item.xml`. Add a single `ImageView`
    with an ID of `imageView`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，就像我们需要一个布局来表示列表项一样，我们需要一个布局来表示一个项目，这里是一个图片，在`ViewPager`中。以通常的方式创建一个新的布局文件，命名为`pager_item.xml`。添加一个带有ID为`imageView`的`ImageView`。
- en: 'Use the visual designer to achieve this or copy the following XML into `pager_item.xml`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用可视化设计工具来实现这一点，或者将以下XML复制到`pager_item.xml`中：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can make a start on our `PagerAdapter` class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始编写我们的`PagerAdapter`类了。
- en: Coding the PagerAdapter class
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写PagerAdapter类
- en: Next, we need to extend `PagerAdapter` to handle images. Create a new class
    called `ImagePagerAdapter` and make it extend `PagerAdapter`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要扩展`PagerAdapter`来处理图片。创建一个名为`ImagePagerAdapter`的新类，并使其扩展`PagerAdapter`。
- en: Add the following imports to the top of the `ImagePagerAdapter` class. We often
    rely on using the *Alt* + *Enter* shortcut to add imports. We are doing things
    slightly differently this time because there are some very similarly named classes
    that will not suit our objectives.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下导入添加到`ImagePagerAdapter`类的顶部。我们经常依赖使用*Alt* + *Enter*快捷键来添加导入。这次我们做的有些不同，因为有一些非常相似的类，它们不适合我们的目标。
- en: 'Add the following imports to the `ImagePagerAdapter` class:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下导入添加到`ImagePagerAdapter`类中：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here is the class declaration with the `extends...` code added as well as a
    couple of member variables. These variables are a `Context` object that we will
    use shortly and an `int` array called `images`. The reason for having an `int`
    array for images is that we will store `int` identifiers for each of the images.
    We'll see how this works in a few code blocks time. The last member variable is
    a `LayoutInflater` instance, which you can probably guess will be used to inflate
    each of the instances of `pager_item.xml`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是类声明，添加了`extends...`代码以及一些成员变量。这些变量是我们不久将要使用的`Context`对象和一个名为`images`的`int`数组。之所以使用`int`数组来存储图像，是因为我们将为每个图像存储`int`标识符。我们将在几个代码块后看到这是如何工作的。最后一个成员变量是一个`LayoutInflater`实例，您可能猜到它将用于填充`pager_item.xml`的每个实例。
- en: 'Extend the `PagerAdapter` class and add the member variables we have just discussed:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`PagerAdapter`类并添加我们刚刚讨论过的成员变量：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we need a constructor that sets up `ImagerPagerAdapter` by receiving the
    `Context` from the `MainActivity` class as well as the `int` array for the images
    and initializing the member variables with them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个构造函数，通过从`MainActivity`类接收`Context`以及图像的`int`数组并用它们初始化成员变量来设置`ImagerPagerAdapter`。
- en: 'Add the constructor method to the `ImagePagerAdapter` class:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ImagePagerAdapter`类中添加构造方法：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we must override the required methods of `PagerAdapter`. Immediately after
    the previous code, add the overridden `getCount` method, which simply returns
    the number of image IDs in the array. This method is used internally by the class:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须重写`PagerAdapter`的必需方法。在上一个代码之后，添加重写的`getCount`方法，它简单地返回数组中图像ID的数量。这个方法是类内部使用的：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we must override the `isViewFromObject` method, which returns a Boolean
    depending upon whether the current `View` instance is the same or associated with
    the current `Object` as passed in as a parameter. Again, this is a method that
    is used internally by the class. Immediately after the previous code, add this
    `Override` method:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须重写`isViewFromObject`方法，根据当前`View`实例是否与传入的参数作为当前`Object`相关联，返回一个布尔值。同样，这是一个类内部使用的方法。在上一个代码之后，添加这个`Override`方法：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we must override the `instantiateItem` method; this is where we get most
    of the work that concerns us done. First, we declare a new `ImageView` object,
    and then we initialize our `LayoutInflater` member. Next, we use the `LayoutInflater`
    instance to declare and initialize a new `View` instance from our `pager_item.xml`
    layout file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须重写`instantiateItem`方法；这是我们要做的大部分工作。首先，我们声明一个新的`ImageView`对象，然后初始化我们的`LayoutInflater`成员。接下来，我们使用`LayoutInflater`实例从我们的`pager_item.xml`布局文件中声明和初始化一个新的`View`实例。
- en: After this, we get a reference to the `ImageView` widget inside the `pager_item.xml`
    layout. We can now add the appropriate image as the content of the `ImageView`
    widget based on the `position` parameter of the `instantiateItem` method and the
    appropriate ID integer from the `images` array.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之后，我们获取`pager_item.xml`布局中`ImageView`小部件的引用。现在，根据`instantiateItem`方法的`position`参数和`images`数组中的适当ID整数，我们可以将适当的图像添加为`ImageView`小部件的内容。
- en: Finally, we add the layout to the `PagerAdapter` instance with the `addView`
    method and return from the method.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`addView`方法将布局添加到`PagerAdapter`实例，并从该方法返回。
- en: 'Add the method we have just discussed:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 添加我们刚刚讨论过的方法：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The last method we must override is the `destroyItem` method, which the class
    can call when it needs to remove an appropriate item based on the value of the
    `position` parameter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须重写的最后一个方法是`destroyItem`方法，当类需要根据`position`参数的值移除适当的项时，可以调用该方法。
- en: 'Add the `destroyItem` method after the previous code and before the closing
    curly brace of the `ImagePagerAdapter` class:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码之后，在`ImagePagerAdapter`类的闭合大括号之前添加`destroyItem`方法：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we saw when coding the `ImagePagerAdapter` class, there is very little to
    it. It is just a case of properly implementing the overridden methods that the
    `ImagePagerAdapter` class uses to help make things work smoothly behind the scenes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在编写`ImagePagerAdapter`类时所看到的，它几乎没有什么。只是正确实现`ImagePagerAdapter`类使用的重写方法，以帮助在幕后顺利运行。
- en: Now we can code the `MainActivity` class, which will use our `ImagePagerAdapter`
    implementation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写`MainActivity`类，它将使用我们的`ImagePagerAdapter`实现。
- en: Coding the MainActivity class
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写MainActivity类
- en: 'Finally, we can code our `MainActivity` class. As with the `ImagePagerAdapter`
    class, for clarity, add the following `import` statements manually to the `MainActivity.java`
    class before the class declaration as shown next:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以编写我们的`MainActivity`类。与`ImagePagerAdapter`类一样，为了清晰起见，手动将以下`import`语句添加到`MainActivity.java`类中，然后再类声明之前，如下所示：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We need a few member variables. Unsurprisingly, we need a `ViewPager` instance,
    which will be used to hold a reference to the `ViewPager` in our layout. Also,
    we need an `ImagePagerAdapter` reference for the class we have just coded. We
    also need an `int` array to hold an array of image IDs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些成员变量。毫不奇怪，我们需要一个`ViewPager`实例，它将用于保存布局中`ViewPager`的引用。此外，我们还需要一个刚刚编码的类的`ImagePagerAdapter`引用。我们还需要一个`int`数组来保存图像ID的数组。
- en: 'Adapt the `MainActivity` class to be as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 调整`MainActivity`类如下：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: All the rest of the code goes in the `onCreate` method. We initialize our `int`
    array with each of the images that we added to the `drawable-xhdpi` folder.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他的代码都放在`onCreate`方法中。我们使用每个添加到`drawable-xhdpi`文件夹中的图像来初始化我们的`int`数组。
- en: We initialize the `ViewPager` in the usual way with the `findViewById` method.
    We also initialize our `ImagePagerAdapter` instance by passing in a reference
    of the `MainActivity` class and the `images` array, as required by the constructor
    that we coded previously. Finally, we bind the adapter to the pager with the `setAdapter`
    method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常使用`findViewById`方法来初始化`ViewPager`。我们还通过传入`MainActivity`类的引用和`images`数组来初始化我们的`ImagePagerAdapter`实例，这是我们之前编写的构造函数所需的。最后，我们使用`setAdapter`方法将适配器绑定到pager。
- en: 'Code the `onCreate` method to look just like this next code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编写`onCreate`方法，使其看起来像下面的代码：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we are ready to run the app.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备运行应用程序。
- en: Running the gallery app
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行图库应用程序
- en: 'Here we can see the first image from our `int` array:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们`int`数组中的第一张图片：
- en: '![Figure 25.3 – First image'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图25.3 – 第一张图片'
- en: '](img/Figure_25.3_B16773.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_25.3_B16773.jpg)'
- en: Figure 25.3 – First image
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.3 – 第一张图片
- en: 'Swipe a little right and left to see the smooth, pleasing way the images transition:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 向右和向左轻轻滑动，看到图像平稳过渡的愉悦方式：
- en: '![Figure 25.4 – Swipe to view images'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图25.4 – 滑动查看图片'
- en: '](img/Figure_25.4_B16773.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_25.4_B16773.jpg)'
- en: Figure 25.4 – Swipe to view images
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图25.4 – 滑动查看图片
- en: That's it for this chapter. Let's review what we have done.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章的全部内容。让我们回顾一下我们所做的事情。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how we can use pagers for simple image galleries with
    just a few lines of code and some very simple layouts. We achieved this so easily
    because of the `ImagePagerAdapter` class.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用分页器来创建简单的图库，只需几行代码和一些非常简单的布局。我们之所以能够如此轻松地实现这一点，是因为有了`ImagePagerAdapter`类。
- en: In the next chapter, we will look at another really cool UI element that is
    used in many of the latest Android apps, probably because it looks great and is
    a real pleasure, as well as extremely practical, to use. The `NavigationView`
    layout will enable us to design and implement different layouts with entirely
    different behavior (code). Let's take a look at the `NavigationView` layout.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到另一个非常酷的UI元素，它在许多最新的Android应用程序中使用，可能是因为它看起来很棒，而且非常实用，使用起来非常愉快。`NavigationView`布局将使我们能够设计和实现具有完全不同行为（代码）的不同布局。让我们来看看`NavigationView`布局。
