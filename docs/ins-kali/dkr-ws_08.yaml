- en: 8\. CI/CD Pipeline
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. CI/CD流水线
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter introduces **Continuous Integration and Continuous Delivery** (**CI/CD**),
    the most crucial step before going to production. This is the intermediate stage
    between development and production. This chapter will demonstrate how Docker is
    a robust technology for CI and CD, and how easily it integrates with other widely
    used platforms. By the end of the chapter, you will be able to configure GitHub,
    Jenkins, and SonarQube and incorporate them to publish your images for production
    automatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入生产之前，本章介绍了**持续集成和持续交付**（**CI/CD**）这一最关键的步骤。这是开发和生产之间的中间阶段。本章将演示Docker是CI和CD的强大技术，以及它如何轻松地与其他广泛使用的平台集成。在本章结束时，您将能够配置GitHub、Jenkins和SonarQube，并将它们整合以自动发布您的图像以供生产使用。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In previous chapters, you learned how to write `docker-compose` files and explored
    the networking and storage of the Services. In this chapter, you will learn how
    to integrate the various microservices of an application and test it as a whole.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您学习了如何编写`docker-compose`文件，并探索了服务的网络和存储。在本章中，您将学习如何集成应用程序的各种微服务并将其作为一个整体进行测试。
- en: '**CI/CD** stands for **Continuous Integration and Continuous Delivery**. Sometimes,
    **CD** is used for **Continuous Deployment** as well. Deployment here means making
    an application publicly accessible from a specific URL through an automated pipeline
    workflow, while delivery means making the application ready to be deployed. In
    this chapter, we will focus on the concept of CI/CD.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI/CD**代表**持续集成和持续交付**。有时，**CD**也用于**持续部署**。这里的部署意味着通过自动化流水线工作流从特定URL公开访问应用程序，而交付意味着使应用程序准备部署。在本章中，我们将重点讨论CI/CD的概念。'
- en: This chapter discusses how Docker integrates into the CI/CD pipeline in step-by-step
    exercises. You will also learn how to install and run Jenkins as a Docker container.
    Jenkins is an open-source automation server. You can use it to build, test, deploy,
    and facilitate CI/CD by automating parts of software development. The installation
    of Jenkins is merely one Docker command. Installing Jenkins on Docker is more
    robust than installing it as an application, and it won't be tightly coupled to
    a specific operating system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了Docker如何在CI/CD流水线中进行逐步练习。您还将学习如何安装和运行Jenkins作为Docker容器。Jenkins是一个开源的自动化服务器。您可以使用它来构建、测试、部署，并通过自动化软件开发的部分来促进CI/CD。安装Jenkins只需一个Docker命令。在Docker上安装Jenkins比将其安装为应用程序更加强大，并且不会与特定操作系统紧密耦合。
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you do not have accounts on GitHub and Docker Hub, please create them. You
    can do so for free at the following links: [www.github.com](http://www.github.com)
    and [http://hub.docker.com](http://hub.docker.com).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有GitHub和Docker Hub的帐户，请创建它们。您可以在以下链接免费创建：[www.github.com](http://www.github.com)
    和 [http://hub.docker.com](http://hub.docker.com)。
- en: What Is CI/CD?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是CI/CD？
- en: CI/CD is a method that helps application development teams to provide code changes
    to users more frequently and reliably. CI/CD introduces automation into the stages
    of code deployment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD是一种帮助应用程序开发团队更频繁和可靠地向用户提供代码更改的方法。CI/CD将自动化引入到代码部署的各个阶段中。
- en: When several developers collaborate and contribute to the same application (each
    of them responsible for a certain microservice or fixing a specific bug), they
    use a code version control provider to aggregate the application using the latest
    code versions that the developers have uploaded and pushed. GitHub, Bitbucket,
    and Assembla are examples of version control systems. The developers and testers
    push the application code and Docker files to automation software to build, test,
    and deploy the CI/CD pipeline. Jenkins, Circle CI, and GitLab CI/CD are examples
    of such automation platforms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个开发人员共同协作并为同一应用程序做出贡献（每个人负责特定的微服务或修复特定的错误）时，他们使用代码版本控制提供程序使用开发人员上传和推送的最新代码版本来汇总应用程序。GitHub、Bitbucket和Assembla是版本控制系统的示例。开发人员和测试人员将应用程序代码和Docker文件推送到自动化软件以构建、测试和部署CI/CD流水线。Jenkins、Circle
    CI和GitLab CI/CD是此类自动化平台的示例。
- en: After passing the testing, a Docker image is built and published to your repository.
    These repositories can be either Docker Hub, your company's **Docker Trusted Register**
    (**DTR**), or Amazon **Elastic Container Registry** (**ECR**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过测试后，将构建Docker镜像并发布到您的存储库。这些存储库可以是Docker Hub、您公司的Docker Trusted Register（DTR）或Amazon
    Elastic Container Registry（ECR）。
- en: In this chapter, as in *Figure 8.1*, we will use a GitHub repository for the
    code version control. Then, we will use Jenkins to build and publish the framework
    and Docker Hub as a registry.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，就像*图8.1*一样，我们将使用GitHub存储库进行代码版本控制。然后，我们将使用Jenkins来构建和发布框架，并使用Docker Hub作为注册表。
- en: '![Figure 8.1: CI/CD pipeline'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1：CI/CD流水线'
- en: '](image/B15021_08_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_01.jpg)'
- en: 'Figure 8.1: CI/CD pipeline'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：CI/CD流水线
- en: You must build the Docker image before the production stage since there is no
    `build` keyword in the `docker-stack.yml` file that is used in production. The
    image will then be deployed to production in an integrated and automated target
    environment. In production, the operations (or DevOps) people configure the orchestrators
    to pull the images from the registry. Kubernetes, Docker Swarm, and Google Kubernetes
    Engine are examples of production orchestrators and management services that can
    be used to pull images from the registry.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产阶段之前，您必须构建Docker镜像，因为在生产中使用的`docker-stack.yml`文件中没有`build`关键字。然后将在集成和自动化的目标环境中将镜像部署到生产环境。在生产中，运维（或DevOps）人员配置编排器从注册表中拉取镜像。Kubernetes、Docker
    Swarm和Google Kubernetes Engine是可以用来从注册表中拉取镜像的生产编排器和管理服务的示例。
- en: 'To summarize, we have three main steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们有三个主要步骤：
- en: Upload the code to GitHub.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码上传到GitHub。
- en: Create a project in Jenkins and enter the GitHub and Docker Hub credentials.
    Jenkins will automatically build the image and push it for you to the Docker Hub
    account. When you push the code to GitHub, Jenkins automatically detects, tests,
    and builds the image. If no errors are generated, Jenkins pushes the image to
    the registry.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中创建一个项目，并输入GitHub和Docker Hub凭据。Jenkins将自动构建镜像并将其推送到您的Docker Hub账户。当您将代码推送到GitHub时，Jenkins会自动检测、测试和构建镜像。如果没有生成错误，Jenkins会将镜像推送到注册表。
- en: Verify that the image is on your Docker Hub account.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证镜像是否在您的Docker Hub账户上。
- en: In the next exercise, you will install Jenkins as a container that will be used
    to build the image. Jenkins is one of the most popular platforms for testing and
    is in great demand in the market. Jenkins has several project types. In this chapter,
    we will use the Freestyle project type.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，您将安装Jenkins作为一个容器，用于构建镜像。Jenkins是市场上最受欢迎的测试平台之一。Jenkins有几种项目类型。在本章中，我们将使用Freestyle项目类型。
- en: Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`touch`命令创建文件，使用`vim`命令在vim编辑器中处理文件。
- en: 'Exercise 8.01: Installing Jenkins as a Container'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.01：将Jenkins安装为一个容器
- en: 'In this exercise, you will install Jenkins, finish its setup, and install the
    preliminary plugins. You will install the Git and GitHub plugins that will be
    used throughout this chapter. Perform the following steps to successfully install
    Jenkins as a container:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将安装Jenkins，完成其设置，并安装初步插件。您将安装Git和GitHub插件，这些插件将在本章中使用。执行以下步骤成功地将Jenkins安装为一个容器：
- en: 'Run the following command to pull the Jenkins image:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令拉取Jenkins镜像：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This results in an output similar to the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致类似以下的输出：
- en: '![Figure 8.2: Output of the docker run command'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2：docker run命令的输出'
- en: '](image/B15021_08_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_02.jpg)'
- en: 'Figure 8.2: Output of the docker run command'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：docker run命令的输出
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are many Jenkins images on Docker Hub. Feel free to pull any of them and
    play with the ports and shared volume, but pay attention to the deprecated images
    as the Jenkins official image is now deprecated for the `Jenkins/Jenkins:lts`
    image. So, read the documentation of the images carefully. However, do not worry
    if one does not work. It might not be your mistake. Look for another and follow
    the instructions of the documentation carefully.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub上有许多Jenkins镜像。随意拉取其中任何一个，并玩转端口和共享卷，但要注意弃用的镜像，因为Jenkins官方镜像现在已弃用为`Jenkins/Jenkins:lts`镜像。因此，请仔细阅读镜像的文档。但是，如果一个镜像不起作用，不要担心。这可能不是你的错。寻找另一个镜像，并严格按照文档的说明操作。
- en: Open the browser and connect to the Jenkins service at `http://localhost:8080`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，并连接到`http://localhost:8080`上的Jenkins服务。
- en: 'If it gives you an error message stating it cannot reach the Docker daemon,
    add Jenkins to the `docker` group using the following commands:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它给出一个错误消息，说明它无法连接到Docker守护程序，请使用以下命令将Jenkins添加到`docker`组：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If your machine's operating system is Windows, the localhost might not be resolved.
    Run the `ipconfig` command in Windows PowerShell. In the second section of the
    output, `ipconfig` displays the information of the `switch` network. Copy the
    IPv4 address, and use it instead of the localhost throughout the exercises.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的计算机操作系统是Windows，本地主机名可能无法解析。在Windows PowerShell中运行`ipconfig`命令。在输出的第二部分中，`ipconfig`显示`switch`网络的信息。复制IPv4地址，并在练习中使用它，而不是本地主机名。
- en: You can also get the IP address from `Control Panel` > `Network and Sharing
    Center` and then clicking on `Details` for your Ethernet or Wi-Fi connection.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从`控制面板` > `网络和共享中心`获取IP地址，然后点击您的以太网或Wi-Fi连接的`详细信息`。
- en: 'After installation, Jenkins will ask for an `Administrator password` to unlock
    it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，Jenkins将要求输入`管理员密码`来解锁它：
- en: '![Figure 8.3: Getting started with Jenkins'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3：开始使用Jenkins'
- en: '](image/B15021_08_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_03.jpg)'
- en: 'Figure 8.3: Getting started with Jenkins'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：开始使用Jenkins
- en: Jenkins autogenerates a password for you to use to unlock the application. In
    the next step, you will see how to get this password.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins会为您生成一个密码，用于解锁应用程序。在下一步中，您将看到如何获取这个密码。
- en: 'Run the `docker container ls` command to get the list of the currently running
    containers:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker container ls`命令以获取当前正在运行的容器列表：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will get the details of the container that is crafted from the `jekinsci/blueocean`
    image:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得从`jekinsci/blueocean`镜像创建的容器的详细信息：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Copy the container ID and run the `docker logs` command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制容器ID并运行`docker logs`命令：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At the end of the log file, you will find six lines of asterisks. The password
    will be in between them. Copy it and paste it in the browser:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志文件的末尾，您将找到六行星号。密码将在它们之间。复制并粘贴到浏览器中：
- en: '![Figure 8.4: Output of the docker logs command'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4：docker logs命令的输出'
- en: '](image/B15021_08_04.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_04.jpg)'
- en: 'Figure 8.4: Output of the docker logs command'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4：docker logs命令的输出
- en: 'Select `Install suggested plugins`. Then, click `Skip and continue as admin`.
    Click `Save and Finish`:![Figure 8.5: Installing plugins to customize Jenkins'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“安装建议的插件”。然后，单击“跳过并继续作为管理员”。单击“保存并完成”：![图8.5：安装插件以自定义Jenkins
- en: '](image/B15021_08_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_05.jpg)'
- en: 'Figure 8.5: Installing plugins to customize Jenkins'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5：安装插件以自定义Jenkins
- en: In the suggested plugins, there are Git and GitHub plugins that Jenkins will
    install automatically for you. You will need these plugins for all the coming
    exercises.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在建议的插件中，有Git和GitHub插件，Jenkins将自动为您安装这些插件。您将需要这些插件来完成所有即将进行的练习。
- en: Note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In *Exercise 8.04*, *Integrating Jenkins and Docker Hub,* you will need to install
    more plugins so Jenkins can push the image to the Docker Hub registry. This will
    be discussed in detail later, as well as how to manage Jenkins plugins in a step-by-step
    lab.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在*练习8.04*，*集成Jenkins和Docker Hub*中，您将需要安装更多插件，以便Jenkins可以将镜像推送到Docker Hub注册表。稍后将详细讨论这一点，以及如何逐步管理Jenkins插件的实验。
- en: 'After installation, it will display `Jenkins is ready!`. Click `Start using
    Jenkins`:![Figure 8.6: Setting up Jenkins'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，它将显示“Jenkins已准备就绪！”。单击“开始使用Jenkins”：![图8.6：设置Jenkins
- en: '](image/B15021_08_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_06.jpg)'
- en: 'Figure 8.6: Setting up Jenkins'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：设置Jenkins
- en: 'Click on `Create a job` to build the software project:![Figure 8.7: Welcome
    page of Jenkins'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建作业”以构建软件项目：![图8.7：Jenkins的欢迎页面
- en: '](image/B15021_08_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_07.jpg)'
- en: 'Figure 8.7: Welcome page of Jenkins'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：Jenkins的欢迎页面
- en: The preceding screenshot verifies that you have successfully installed Jenkins
    on your system.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图验证了您已成功在系统上安装了Jenkins。
- en: In the next sections, we will follow the CI/CD pipeline in this chapter. The
    first step is uploading the code to GitHub and then integrating Jenkins with GitHub
    so that Jenkins can pull the code and build the image automatically. The final
    step will be to integrate Jenkins with the registry to push that image to the
    registry without any manual interference.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将遵循本章的CI/CD流水线。第一步是将代码上传到GitHub，然后将Jenkins与GitHub集成，以便Jenkins可以自动拉取代码并构建镜像。最后一步将是将Jenkins与注册表集成，以便将该镜像推送到注册表而无需任何手动干预。
- en: Integrating GitHub and Jenkins
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成GitHub和Jenkins
- en: After installing Jenkins, we will create our first job and integrate it with
    GitHub. In this section, as in *Figure 8.8*, we will focus solely on GitHub and
    Jenkins. Docker Hub will be discussed a little later.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Jenkins后，我们将创建我们的第一个作业并将其与GitHub集成。在本节中，就像*图8.8*中一样，我们将专注于GitHub和Jenkins。Docker
    Hub稍后将进行讨论。
- en: '![ Figure 8.8: Integrating GitHub and Jenkins'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.8：集成GitHub和Jenkins'
- en: '](image/B15021_08_08.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_08.jpg)'
- en: 'Figure 8.8: Integrating GitHub and Jenkins'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：集成GitHub和Jenkins
- en: We will use a simple Python application to count the number of hits on a website.
    Every time you refresh the page, the counter will increment, resulting in an increase
    in the number of hits on the website.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的Python应用程序来统计网站点击次数。每次刷新页面，计数器都会增加，从而增加网站点击次数。
- en: Note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code files for the `Getting Started` application can be found at the following
    link: [https://github.com/efoda/hit_counter](https://github.com/efoda/hit_counter).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “Getting Started”应用程序的代码文件可以在以下链接找到：[https://github.com/efoda/hit_counter](https://github.com/efoda/hit_counter)。
- en: 'The application consists of four files:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序由四个文件组成：
- en: '`app.py`: This is the Python application code. It uses `Redis` to keep track
    of the counts of the number of hits on a website.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.py`：这是Python应用程序代码。它使用`Redis`来跟踪网站点击次数的计数。'
- en: '`requirments.txt`: This file contains the dependencies needed for the application
    to work properly.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirments.txt`：该文件包含应用程序正常工作所需的依赖项。'
- en: '`Dockerfile`: This builds the image with the required libraries and dependencies.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dockerfile`：这将使用所需的库和依赖项构建图像。'
- en: '`docker-compose.yml`: It is essential to have the YAML file when two or more
    containers are working together.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose.yml`：当两个或更多容器一起工作时，拥有YAML文件是必不可少的。'
- en: 'In this simple application, we also have two services, `Web` and `Redis`, as
    shown in *Figure 8.9*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的应用程序中，我们还有两个服务，`Web`和`Redis`，如*图8.9*所示：
- en: '![Figure 8.9: The hit_counter application architecture'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.9：hit_counter应用程序架构'
- en: '](image/B15021_08_09.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_09.jpg)'
- en: 'Figure 8.9: The hit_counter application architecture'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9：hit_counter应用程序架构
- en: If you do not know how to upload this application to your GitHub account, don't
    worry. The next exercise will guide you through this process.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不知道如何将此应用程序上传到您的GitHub帐户，请不要担心。下一个练习将指导您完成此过程。
- en: 'Exercise 8.02: Uploading the Code to GitHub'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.02：将代码上传到GitHub
- en: You can use GitHub to save your code and projects. In this exercise, you will
    learn how to download and upload the code to GitHub. You can do that by forking
    the code on the GitHub website or pushing the code from Command Prompt. In this
    exercise, you will do it from Command Prompt.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用GitHub保存您的代码和项目。在这个练习中，您将学习如何下载和上传代码到GitHub。您可以通过在GitHub网站上fork代码或从命令提示符推送代码来实现。在这个练习中，您将从命令提示符中执行。
- en: 'Perform the following steps to upload the code to GitHub:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤将代码上传到GitHub：
- en: 'On the GitHub website, create a new empty repository with the name `hit_counter`.
    Open a terminal and clone the code by typing the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GitHub网站上，创建一个名为`hit_counter`的新空存储库。打开终端并输入以下命令来克隆代码：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results in an output similar to the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似以下的输出：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Verify that the code is downloaded to your local machine by listing the directories.
    Then, open the application directory:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过列出目录来验证代码是否已下载到本地计算机。然后，打开应用程序目录：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will find the application files downloaded to your local machine:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现应用程序文件已下载到您的本地计算机：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Initialize and configure Git:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化并配置Git：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should get output similar to the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到类似以下的输出：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Enter your username and email:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的用户名和电子邮件：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Specify the names of the Git accounts, `origin` and `destination`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定Git帐户的名称，`origin`和`destination`：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add all the content in the current path:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加当前路径中的所有内容：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can also add a specific file instead of all the files by typing the following
    command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过输入以下命令添加特定文件而不是所有文件：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Specify a `commit` message:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定一个`commit`消息：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This results in an output similar to the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似以下的输出：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Push the code to your GitHub account:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码推送到您的GitHub帐户：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It will ask you for your username and password. Once you''ve logged in, the
    files will be uploaded to your GitHub repository:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它会要求您输入用户名和密码。一旦您登录，文件将被上传到您的GitHub存储库：
- en: '![Figure 8.10: Pushing the code to GitHub'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.10：将代码推送到GitHub'
- en: '](image/B15021_08_10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_10.jpg)'
- en: 'Figure 8.10: Pushing the code to GitHub'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10：将代码推送到GitHub
- en: Check your GitHub account. You will find the files are uploaded there.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的GitHub帐户。您会发现文件已经上传到那里。
- en: Now that we have finished the first step in the CI/CD pipeline and have uploaded
    the code to GitHub, we will integrate GitHub with Jenkins.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了CI/CD管道的第一步，并且已经将代码上传到GitHub，我们将把GitHub与Jenkins集成。
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Starting from this point and going forward, replace the GitHub username, `efoda`,
    with your username.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，将GitHub用户名`efoda`替换为您的用户名。
- en: 'Exercise 8.03: Integrating GitHub and Jenkins'
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.03：集成GitHub和Jenkins
- en: 'You installed Jenkins as a container in *Exercise 8.01*, *Installing Jenkins
    as a Container*. In this exercise, you will create a job in Jenkins and configure
    it with GitHub. You will check Jenkins'' `Output Console` to verify that it has
    built the image successfully. You will then modify the `Dockerfile` on GitHub
    and ensure that Jenkins has detected the change in the `Dockerfile` and rebuilt
    the image automatically:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在*练习8.01*，*将Jenkins安装为容器*中，您安装了Jenkins作为一个容器。在这个练习中，您将在Jenkins中创建一个作业，并将其配置为GitHub。您将检查Jenkins的`输出控制台`，以验证它是否成功构建了镜像。然后，您将修改GitHub上的`Dockerfile`，并确保Jenkins已经检测到`Dockerfile`中的更改并自动重新构建了镜像：
- en: 'Go back to Jenkins in the browser. Click on `Create a job`:![Figure 8.11: Creating
    a job in Jenkins'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到浏览器中的Jenkins。点击`创建作业`：![图8.11：在Jenkins中创建作业
- en: '](image/B15021_08_07.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_07.jpg)'
- en: 'Figure 8.11: Creating a job in Jenkins'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11：在Jenkins中创建作业
- en: 'Fill in the `Enter an item name` textbox by providing the name of the project.
    Click `Freestyle project` and then click `OK`:![Figure 8.12: Selecting Freestyle
    project'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`输入项目名称`文本框中填写项目名称。点击`自由风格项目`，然后点击`确定`：![图8.12：选择自由风格项目
- en: '](image/B15021_08_12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_12.jpg)'
- en: 'Figure 8.12: Selecting Freestyle project'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12：选择自由风格项目
- en: 'You will see six tabs: `General`, `Source Code Management`, `Build Triggers`,
    `Build Environment`, `Build`, and `Post-build Actions`, as in *Figure 8.13*.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到六个选项卡：`常规`，`源代码管理`，`构建触发器`，`构建环境`，`构建`和`后构建操作`，就像*图8.13*中那样。
- en: 'In the `General` tab, select the `Discard old builds` option so that the old
    builds do not eat up your disk space. Jenkins will do the housekeeping for you
    as well:![Figure 8.13: Selecting the Discard old builds option'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`常规`选项卡中，选择`丢弃旧构建`选项，以防止旧构建占用磁盘空间。Jenkins也会为您做好清理工作：![图8.13：选择丢弃旧构建选项
- en: '](image/B15021_08_13.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_13.jpg)'
- en: 'Figure 8.13: Selecting the Discard old builds option'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13：选择丢弃旧构建选项
- en: 'In the `Source Code Management` tab, select `Git`. In `Repository URL`, enter
    `https://github.com/<your GitHub username>/hit_counter`, as in *Figure 8.14*.
    If you do not have Git, check your plugins and download the Git plugin. We will
    talk about managing plugins in *Exercise 8.04*, *Integrating Jenkins and Docker
    Hub*:![Figure 8.14: Entering the GitHub repository URL'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`源代码管理`选项卡中，选择`Git`。在`存储库URL`中，输入`https://github.com/<your GitHub username>/hit_counter`，就像*图8.14*中那样。如果您没有Git，请检查您的插件并下载Git插件。我们将在*练习8.04*，*集成Jenkins和Docker
    Hub*中讨论管理插件的问题：![图8.14：输入GitHub存储库URL
- en: '](image/B15021_08_14.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_14.jpg)'
- en: 'Figure 8.14: Entering the GitHub repository URL'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14：输入GitHub存储库URL
- en: 'In the `Build Triggers` tab, select `Poll SCM`. This is where you specify how
    often you want Jenkins to perform the tests. If you enter `H/5` with four asterisks
    and spaces in between each asterisk, this means that you want Jenkins to perform
    the test every minute, as in *Figure 8.16*. If you enter it as `H * * * *`, this
    means the polling will be done every hour. If you do it as `H/15 * * * *`, the
    polling will be done every 15 minutes. Click your mouse outside the textbox. If
    you entered the code correctly, Jenkins will show the message stating when it
    will execute the next job. Otherwise, it will display an error in red.![Figure
    8.15: Building triggers'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`构建触发器`选项卡中，选择`轮询SCM`。这是您指定Jenkins执行测试的频率的地方。如果您输入`H/5`，并在每个星号之间加上四个星号和空格，这意味着您希望Jenkins每分钟执行一次测试，就像*图8.16*中那样。如果您输入`H
    * * * *`，这意味着轮询将每小时进行一次。如果您输入`H/15 * * * *`，则每15分钟进行一次轮询。点击文本框外部。如果您输入的代码正确，Jenkins将显示下次执行作业的时间。否则，它将显示红色的错误。![图8.15：构建触发器
- en: '](image/B15021_08_15.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_15.jpg)'
- en: 'Figure 8.15: Building triggers'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15：构建触发器
- en: 'Click the `Build` tab. Click `Add build step`. Select `Execute shell`, as in
    *Figure 8.17*:![Figure 8.16: Selecting Execute shell'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“构建”选项卡。点击“添加构建步骤”。选择“执行shell”，如*图8.17*所示：![图8.16：选择执行shell
- en: '](image/B15021_08_16.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_16.jpg)'
- en: 'Figure 8.16: Selecting Execute shell'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16：选择执行shell
- en: 'A textbox will be displayed. Write the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示一个文本框。写入以下命令：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then click `Save`, as in *Figure 8.17*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击“保存”，如*图8.17*所示：
- en: '![Figure 8.17: Entering the docker build command in the Execute shell command
    box'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17：在“执行shell命令”框中输入docker构建命令'
- en: '](image/B15021_08_17.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_17.jpg)'
- en: 'Figure 8.17: Entering the docker build command in the Execute shell command
    box'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17：在“执行shell命令”框中输入docker构建命令
- en: 'A screen similar to the following screenshot should appear:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 应该出现类似以下截图的屏幕：
- en: '![Figure 8.18: Successful creation of the hit_count project'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.18：成功创建hit_count项目'
- en: '](image/B15021_08_18.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_18.jpg)'
- en: 'Figure 8.18: Successful creation of the hit_count project'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18：成功创建hit_count项目
- en: 'Before doing anything further in Jenkins, check the images that you currently
    have in your host. In a terminal, run the `docker images` command to list the
    images:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中进一步操作之前，请检查您主机上当前拥有的镜像。在终端中运行`docker images`命令列出镜像：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you cleaned your lab before this chapter, you will have only the `jenkinsci/blueocean`
    image:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在本章之前清理了实验室，您将只有`jenkinsci/blueocean`镜像：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Go back to Jenkins. Click on `Build Now` from the menu on the left.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Jenkins。从左侧菜单中点击“立即构建”。
- en: Note
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'In case you get the Permission Denied error while connecting to the Docker
    daemon, perform the following steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接到Docker守护程序时出现权限被拒绝错误，请执行以下步骤：
- en: '1\. If not already exists, add a Jenkins user to the docker host:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 如果尚不存在，请将Jenkins用户添加到docker主机：
- en: '`$ sudo useradd jenkins`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo useradd jenkins`'
- en: '2\. Add the Jenkins user to the docker group:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 将Jenkins用户添加到docker组中：
- en: '`$ sudo usermod -aG docker jenkins`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo usermod -aG docker jenkins`'
- en: '3\. Obtain the docker group ID from `/etc/group` that is, `998`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 从`/etc/group`获取docker组ID，即`998`：
- en: '`$ sudo cat /etc/group | grep docker`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo cat /etc/group | grep docker`'
- en: '4\. Use `docker exec` command to create a bash shell in the running Jenkins
    container:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 使用`docker exec`命令在运行中的Jenkins容器中创建一个bash shell：
- en: '`$ docker container ls`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ docker container ls`'
- en: '`$ docker exec -it -u root <CONTAINER NAME | CONTAINER ID> /bin/bash`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ docker exec -it -u root <CONTAINER NAME | CONTAINER ID> /bin/bash`'
- en: '5\. Edit the `/etc/group` file inside the Jenkins container:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 编辑Jenkins容器内的`/etc/group`文件：
- en: '`# vi /etc/group`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`# vi /etc/group`'
- en: '6\. Replace the docker group ID with the ID obtained from the host, and add
    the Jenkins user to the docker group:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 用从主机获取的ID替换docker组ID，并将Jenkins用户添加到docker组中：
- en: '`docker:x:998:jenkins`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker:x:998:jenkins`'
- en: '7\. Save the `/etc/group` file and close the editor:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 保存`/etc/group`文件并关闭编辑器：
- en: '`:wq`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`:wq`'
- en: '8\. Exit from the Jenkins container:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 退出Jenkins容器：
- en: '`# exit`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`# exit`'
- en: '9\. Stop the Jenkins container:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 停止Jenkins容器：
- en: '`$ docker container ls`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ docker container ls`'
- en: '`$ docker container stop <CONTAINER NAME | CONTAINER ID>`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ docker container stop <CONTAINER NAME | CONTAINER ID>`'
- en: Note
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '10\. Restart the Jenkins container:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 重新启动Jenkins容器：
- en: '`$ docker container ls`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ docker container ls`'
- en: '`$ docker container start <CONTAINER NAME | CONTAINER ID>`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ docker container start <CONTAINER NAME | CONTAINER ID>`'
- en: Now, the job will build successfully.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作业将成功构建。
- en: 'Click on `Back to Dashboard`. The following screen will appear. In the bottom-left
    corner, you will see the `Build Queue` and `Build Executor Status` fields. You
    can see that one build has started with `#1` beside it, as in *Figure 8.19*:![Figure
    8.19: Checking the Build Queue'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“返回仪表板”。将出现以下屏幕。在左下角，您将看到“构建队列”和“构建执行器状态”字段。您可以看到一个构建已经开始，并且旁边有`#1`，如*图8.19*所示：![图8.19：检查构建队列
- en: '](image/B15021_08_19.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_19.jpg)'
- en: 'Figure 8.19: Checking the Build Queue'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19：检查构建队列
- en: There is no success or failure of the build yet. When the build is done, its
    status will be displayed on the screen. After some time, you will observe that
    two builds have been done.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 构建尚未成功或失败。构建完成后，其状态将显示在屏幕上。过一段时间，您会发现已经进行了两次构建。
- en: 'Click on the small arrow beside `#2` under the `Last Success` field. A drop-down
    menu will appear, as shown in the following figure. Select `Console Output` to
    check what Jenkins did automatically for us, as in *Figure 8.20*:![Figure 8.20:
    Selecting Console Output'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`最后成功`字段下的`#2`旁边的小箭头。将出现一个下拉菜单，如下图所示。选择`控制台输出`以检查Jenkins自动为我们执行的操作，如*图8.20*所示：![图8.20：选择控制台输出
- en: '](image/B15021_08_20.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_20.jpg)'
- en: 'Figure 8.20: Selecting Console Output'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20：选择控制台输出
- en: 'In `Console Output`, you will find that Jenkins executed the `docker build`
    command you entered in the `Build` step during project configuration:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在`控制台输出`中，您会发现Jenkins执行了您在项目配置期间在`构建`步骤中输入的`docker build`命令：
- en: 'Scroll down to the bottom of `Console Output` to see the result of the execution.
    You will see that the image has been built successfully. You will also find the
    image ID and tag:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到`控制台输出`的底部，以查看执行结果。您将看到镜像已成功构建。您还会找到镜像ID和标签：
- en: '![Figure 8.21: Verifying that the image is built successfully'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.21：验证镜像是否成功构建'
- en: '](image/B15021_08_21.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_21.jpg)'
- en: 'Figure 8.21: Verifying that the image is built successfully'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21：验证镜像是否成功构建
- en: Verify the image ID and tag from the terminal. Re-run the `docker images` command.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端验证镜像ID和标签。重新运行`docker images`命令。
- en: '[PRE21]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You will find that the `hit_counter` image has been created for you. You will
    also find the `python:3.7-alpine` image as this is the base image in the `Dockerfile`
    and Jenkins has pulled it automatically:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现已为您创建了`hit_counter`镜像。您还会发现`python:3.7-alpine`镜像，因为这是`Dockerfile`中的基础镜像，Jenkins已自动拉取它：
- en: '[PRE22]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With this step, you can confirm that Jenkins was able to pull the files from
    your GitHub successfully.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一步，您可以确认Jenkins能够成功地从GitHub拉取文件。
- en: 'Now, you will make the desired changes in the GitHub code. But first, verify
    that you did not commit any changes to the code yet. Return to Jenkins, scroll
    up and click `Back to Project` in the left-hand menu at the top. Then click on
    `Recent Changes`, as in *Figure 8.22*:![Figure 8.22: Selecting Recent Changes'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将在GitHub代码中进行所需的更改。但首先，请验证您尚未提交任何更改到代码。返回Jenkins，向上滚动并在顶部的左侧菜单中单击`返回项目`。然后单击`最近的更改`，如*图8.22*所示：![图8.22：选择最近的更改
- en: '](image/B15021_08_22.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_22.jpg)'
- en: 'Figure 8.22: Selecting Recent Changes'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22：选择最近的更改
- en: 'Jenkins will display that there are no changes in any of the builds, as you
    can see in the following figure:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins将显示所有构建中都没有更改，如下图所示：
- en: '![Figure 8.23: Verifying changes in the code'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.23：验证代码中的更改'
- en: '](image/B15021_08_23.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_23.jpg)'
- en: 'Figure 8.23: Verifying changes in the code'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.23：验证代码中的更改
- en: Go to GitHub and edit the `Dockerfile` by changing the base image's tag from
    `3.7-alpine` to `alpine` only.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往GitHub，并编辑`Dockerfile`，将基础镜像的标签从`3.7-alpine`更改为仅`alpine`。
- en: 'You can also do the same from the terminal as before by editing the file using
    any text editor. Then run the `git add` and `git push` commands:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以像以前一样从终端通过任何文本编辑器编辑文件来执行相同操作。然后运行`git add`和`git push`命令：
- en: '[PRE23]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Scroll down and commit your changes to GitHub.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并将更改提交到GitHub。
- en: 'Return to Jenkins. Remove the `hit_counter` and `python:3.7-alpine` images
    to make sure that Jenkins is not using previous local images:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Jenkins。删除`hit_counter`和`python:3.7-alpine`镜像，以确保Jenkins不使用先前的本地镜像：
- en: '[PRE24]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Click `Build Now` again to start building the job instantly. Refresh the `Recent
    Changes` page. It will display a message stating that a change has occurred.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击`立即构建`以立即开始构建作业。刷新`最近更改`页面。它将显示一个消息，说明发生了变化。
- en: If you click on the change that has occurred, it will forward you to GitHub,
    showing you the differences between the old code and the new code.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击发生的更改，它会将您转到GitHub，显示旧代码和新代码之间的差异。
- en: 'Click back into the browser to return to Jenkins. Check `Console Output` again
    to see the base image that Jenkins has used:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击浏览器返回到Jenkins。再次检查`控制台输出`，以查看Jenkins使用的基础镜像：
- en: At the bottom, you will find that Jenkins built the image successfully.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，您会发现Jenkins成功构建了镜像。
- en: 'Go to the terminal and check the images again:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到终端并再次检查镜像：
- en: '[PRE25]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will find that `hit_counter` and `python:alpine` are on the list:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现`hit_counter`和`python:alpine`在列表上：
- en: '[PRE26]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Clean your lab for the next exercise by removing all the images listed except
    `jenkinsci/blueocean`:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理您的实验室，以便进行下一个练习，删除除`jenkinsci/blueocean`之外的所有列出的镜像：
- en: '[PRE27]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this exercise, you learned how to integrate Jenkins with GitHub. Jenkins
    was able to pull the code from GitHub automatically and build the image.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您学会了如何将Jenkins与GitHub集成。Jenkins能够自动从GitHub拉取代码并构建镜像。
- en: In the next section, you will learn how to push this image to your registry
    without manual interference to complete your CI/CD pipeline.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，您将学习如何将这个镜像推送到您的注册表，而无需手动干预，以完成您的CI/CD流水线。
- en: Integrating Jenkins and Docker Hub
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成Jenkins和Docker Hub
- en: In this section, as in *Figure 8.31*, we will focus on the last step of our
    CI/CD pipeline, which is integrating Jenkins with Docker Hub. As we mentioned
    before, there are plenty of registries out there. We will use Docker Hub because
    it is free and easy to use. At your workplace, your company will probably have
    a private local registry. You will need to ask the operations or IT admins to
    create an account for you and grant you some privileges so that you are able to
    access the registry and push your images to it.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，就像*图8.31*中一样，我们将专注于我们的CI/CD流水线的最后一步，即将Jenkins与Docker Hub集成。正如我们之前提到的，市面上有很多注册表。我们将使用Docker
    Hub，因为它是免费且易于使用的。在您的工作场所，您的公司可能会有一个私有的本地注册表。您需要向运维或IT管理员申请一个账户，并授予您一些权限，以便您能够访问注册表并将您的镜像推送到其中。
- en: '![ Figure 8.24: Integrating Jenkins and Docker Hub'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.24：集成Jenkins和Docker Hub'
- en: '](image/B15021_08_24.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_24.jpg)'
- en: 'Figure 8.24: Integrating Jenkins and Docker Hub'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24：集成Jenkins和Docker Hub
- en: In the following exercise, you will learn how to integrate Jenkins with Docker
    Hub and how to push the image that Jenkins built in the previous exercise.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将学习如何将Jenkins与Docker Hub集成，以及如何推送Jenkins在上一个练习中构建的镜像。
- en: 'Exercise 8.04: Integrating Jenkins and Docker Hub'
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.04：集成Jenkins和Docker Hub
- en: 'In this exercise, you will integrate Jenkins with Docker Hub and push that
    image to your repository. First, you will install the `Docker`, `docker-build-step`,
    and `Cloudbees Docker Build and Publish` plugins so that Jenkins can connect to
    Docker Hub. Then, you will learn how to enter your Docker Hub credentials in Jenkins
    so that Jenkins can access your Docker Hub account automatically and push your
    images to it. Finally, you will check your images in Docker Hub to verify that
    the pipeline was executed correctly. At the end of this exercise, you will verify
    that the image is successfully pushed to the repository by checking your Docker
    Hub account:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将把Jenkins与Docker Hub集成，并将该镜像推送到您的存储库。首先，您将安装“Docker”、“docker-build-step”和“Cloudbees
    Docker构建和发布”插件，以便Jenkins可以连接到Docker Hub。然后，您将学习如何在Jenkins中输入您的Docker Hub凭据，以便Jenkins可以自动访问您的Docker
    Hub帐户并将您的镜像推送到其中。最后，您将在Docker Hub中检查您的镜像，以验证流水线是否正确执行。在本练习结束时，您将通过检查您的Docker Hub帐户来验证镜像是否成功推送到存储库：
- en: 'Click on `Manage Jenkins` in the left-hand menu to install the plugins:![Figure
    8.25: Clicking on Manage Jenkins'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的“管理Jenkins”以安装插件：![图8.25：点击“管理Jenkins”
- en: '](image/B15021_08_25.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_25.jpg)'
- en: 'Figure 8.25: Clicking on Manage Jenkins'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25：点击“管理Jenkins”
- en: 'Click on `Plugin Manager`. Four tabs will appear. Click on the `Available`
    tab and select the `Docker`, `docker-build-step`, and `Cloudbees Docker Build
    and Publish` plugins:![Figure 8.26: Installing the Docker, docker-build-step,
    and Cloudbees'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“插件管理”。会出现四个选项卡。点击“可用”选项卡，然后选择“Docker”、“docker-build-step”和“Cloudbees Docker构建和发布”插件：![图8.26：安装Docker、docker-build-step和Cloudbees
- en: Docker Build and Publish plugins
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Docker构建和发布插件
- en: '](image/B15021_08_26.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_26.jpg)'
- en: 'Figure 8.26: Installing the Docker, docker-build-step, and Cloudbees Docker
    Build and Publish plugins'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26：安装Docker、docker-build-step和Cloudbees Docker构建和发布插件
- en: Click `Install without restart`. After installation, check `Restart Jenkins
    when installation is complete and no jobs are running`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“无需重启安装”。安装完成后，勾选“安装完成且没有作业运行时重新启动Jenkins”。
- en: 'Jenkins will take an extended period of time to restart, depending upon your
    disk space, memory, and internet connectivity speed. Wait until it is done, and
    the dashboard is shown. Click on the project''s name, that is, `hit_count`:![Figure
    8.27: Jenkins Dashboard showing the hit_count project'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins将花费较长时间来重新启动，具体取决于您的磁盘空间、内存和互联网连接速度。等待直到完成，并显示仪表板。点击项目的名称，即“hit_count”：![图8.27：Jenkins仪表板显示hit_count项目
- en: '](image/B15021_08_27.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_27.jpg)'
- en: 'Figure 8.27: Jenkins Dashboard showing the hit_count project'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27：Jenkins仪表板显示hit_count项目
- en: 'Click `Configure` in the left-hand menu to modify the project configurations:![Figure
    8.28: The Configure option in the left-hand menu'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的“配置”以修改项目配置：![图8.28：左侧菜单中的配置选项
- en: '](image/B15021_08_28.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_28.jpg)'
- en: 'Figure 8.28: The Configure option in the left-hand menu'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.28：左侧菜单中的配置选项
- en: 'Modify the details in the `Build` tab only. Click on it and select `Add build
    step`. A larger menu than the one you saw before will show up. If you see `Docker
    Build and Publish` in that menu, it verifies that your plugins were installed
    successfully. Click `Docker Build and Publish`:![Figure 8.29: Selecting Docker
    Build and Publish from the menu'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只修改“构建”选项卡中的详细信息。点击它，然后选择“添加构建步骤”。会出现比之前更大的菜单。如果你在菜单中看到“Docker构建和发布”，那么说明你的插件安装成功了。点击“Docker构建和发布”：![图8.29：从菜单中选择Docker构建和发布
- en: '](image/B15021_08_29.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_29.jpg)'
- en: 'Figure 8.29: Selecting Docker Build and Publish from the menu'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.29：从菜单中选择Docker构建和发布
- en: In `Registry Credentials`, click `Add`. Then select `Jenkins` from the drop-down
    menu.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“注册表凭据”中，点击“添加”。然后从下拉菜单中选择“Jenkins”。
- en: 'A pop-up box will appear. Enter your Docker Hub username and password. Then,
    click `Add`:![Figure 8.30: Adding Jenkins credentials'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个弹出框。输入您的Docker Hub用户名和密码。然后，单击“添加”：![图8.30：添加Jenkins凭据
- en: '](image/B15021_08_30.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_30.jpg)'
- en: 'Figure 8.30: Adding Jenkins credentials'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.30：添加Jenkins凭据
- en: 'Now, in `Registry Credentials`, click the first drop-down menu and select the
    credentials that you entered in the previous step. Then, enter `<your Docker Hub
    username>/<image name>` in the `Repository Name` field. Remove the `Execute Shell`
    option that you entered in *Exercise 8.02*, *Uploading the Code to GitHub*, by
    clicking the Red `X` at the top right. Now, you will have only one build step,
    which is the `Docker Build and Publish` step. Click `Save` to save the new configuration:![Figure
    8.31: The Docker Build and Publish step'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“注册表凭据”中，单击第一个下拉菜单，并选择您在上一步中输入的凭据。然后，在“存储库名称”字段中输入“<您的Docker Hub用户名>/<图像名称>”。通过单击右上角的红色“X”删除您在*练习8.02*“将代码上传到GitHub”中输入的“执行Shell”选项。现在，您将只有一个构建步骤，即“Docker构建和发布”步骤。单击“保存”以保存新配置：![图8.31：Docker构建和发布步骤
- en: '](image/B15021_08_31.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_31.jpg)'
- en: 'Figure 8.31: The Docker Build and Publish step'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.31：Docker构建和发布步骤
- en: Click `Build Now` again in the left-hand menu and in the `Build History` option,
    follow the progress of the image build. It will have the same name that you specified
    in `Repository Name` in the previous step. Jenkins will add the `docker build`
    step by itself because you chose it from the plugins. If the image passed the
    build successfully, Jenkins will use your Docker credentials and automatically
    connect to Docker Hub or any registry you specify in `Repository Name`. Finally,
    Jenkins will push the new image automatically to your registry, which is your
    Docker Hub registry in this exercise.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在左侧菜单中单击“立即构建”，并在“构建历史”选项中，跟踪图像构建的进度。它将与您在上一步中指定的“存储库名称”相同。Jenkins将自动添加“docker
    build”步骤，因为您从插件中选择了它。如果图像成功通过构建，Jenkins将使用您的Docker凭据并自动连接到Docker Hub或您在“存储库名称”中指定的任何注册表。最后，Jenkins将自动将新图像推送到您的注册表，这在本练习中是您的Docker
    Hub注册表。
- en: 'As a further check, while the image is being built and before it is done, go
    to the terminal and list the images you have using the `docker images` command:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为进一步检查，当图像正在构建并在完成之前，转到终端并使用`docker images`命令列出您拥有的图像：
- en: '[PRE28]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Because you cleaned your lab at the end of the last exercise, you should find
    the `jenkinsci/blueocean` image only:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您在上一练习结束时清理了实验室，所以您应该只会找到`jenkinsci/blueocean`图像：
- en: '[PRE29]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also, check your Docker Hub account to verify whether the `hit_counter` image
    is built. You will not find the `hit_counter` image:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，检查您的Docker Hub帐户，以验证是否构建了`hit_counter`图像。您将找不到`hit_counter`图像：
- en: '![Figure 8.32: Checking your Docker Hub'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.32：检查您的Docker Hub'
- en: '](image/B15021_08_32.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_32.jpg)'
- en: 'Figure 8.32: Checking your Docker Hub'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.32：检查您的Docker Hub
- en: 'If the job is successfully built, you will find a blue ball beside the image
    name. If it is a red ball, this means that there was an error. Now, click on the
    arrow beside the image name and select `Console Output`:![Figure 8.33: Selecting
    Console Output'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果作业成功构建，您将在图像名称旁边找到一个蓝色的球。如果是红色的球，这意味着出现了错误。现在，单击图像名称旁边的箭头，并选择“控制台输出”：![图8.33：选择控制台输出
- en: '](image/B15021_08_33.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_33.jpg)'
- en: 'Figure 8.33: Selecting Console Output'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.33：选择控制台输出
- en: 'As shown in the following image, you will find that Jenkins built the image
    successfully and pushed it to your Docker Hub:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，您将发现Jenkins成功构建了图像并将其推送到您的Docker Hub：
- en: '![Figure 8.34: In Console Output, verify that Jenkins has built and pushed
    the image'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.34：在控制台输出中，验证Jenkins是否已构建并推送了图像'
- en: '](image/B15021_08_34.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_34.jpg)'
- en: 'Figure 8.34: In Console Output, verify that Jenkins has built and pushed the
    image'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.34：在控制台输出中，验证Jenkins是否已构建并推送了镜像
- en: 'Go back to the terminal and rerun the `docker images` command to list the images:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回终端并重新运行`docker images`命令以列出镜像：
- en: '[PRE30]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will find an image with `<your Docker Hub Username>/hit_count`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`<your Docker Hub Username>/hit_count`中找到一张图片：
- en: '[PRE31]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the browser, refresh the Docker Hub page. You will find your image at the
    top; Jenkins pushed it for you automatically:![Figure 8.35: Verifying that Jenkins
    has pushed the image to your Docker Hub automatically'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中刷新Docker Hub页面。您会在顶部找到您的镜像；Jenkins会自动为您推送它：![图8.35：验证Jenkins是否已自动将镜像推送到您的Docker
    Hub
- en: '](image/B15021_08_35.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_35.jpg)'
- en: 'Figure 8.35: Verifying that Jenkins has pushed the image to your Docker Hub
    automatically'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.35：验证Jenkins是否已自动将镜像推送到您的Docker Hub
- en: In this exercise, we finished the last phase of our CI/CD pipeline and integrated
    Jenkins with Docker Hub. Jenkins pushed the image it built to Docker Hub. You
    also verified that the image was pushed correctly by checking the Docker Hub account.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们完成了CI/CD管道的最后阶段，并将Jenkins与Docker Hub集成。Jenkins将构建的镜像推送到Docker Hub。您还通过检查Docker
    Hub账户来验证镜像是否被正确推送。
- en: In the next activity, we will apply the same method of installing extra plugins
    to integrate Jenkins with SonarQube. SonarQube is another powerful tool that can
    analyze code and generate reports about its quality and detect bugs, code smells,
    and security vulnerabilities in a vast number of programming languages.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个活动中，我们将应用相同的方法来安装额外的插件，将Jenkins与SonarQube集成。SonarQube是另一个强大的工具，可以分析代码并生成关于其质量的报告，并在大量编程语言中检测错误、代码异味和安全漏洞。
- en: 'Activity 8.01: Utilizing Jenkins and SonarQube'
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动8.01：利用Jenkins和SonarQube
- en: Usually, you will be asked to evaluate the quality of your code before submitting
    it to testers. You can utilize Jenkins for further code inspection by generating
    reports about debugging bugs, code smells, and security vulnerabilities by adding
    the SonarQube plugin.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在提交代码给测试人员之前，您会被要求评估代码的质量。您可以利用Jenkins进一步检查代码，通过添加SonarQube插件生成关于调试错误、代码异味和安全漏洞的报告。
- en: In this activity, we will utilize Jenkins and the SonarQube plugin for our `hit_count`
    Python example.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将利用Jenkins和SonarQube插件来进行我们的`hit_count` Python示例。
- en: '**Steps**:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤**：'
- en: Install and run SonarQube in a container, as you did in *Exercise 8.01*, *Installing
    Jenkins as a Container*. Use the default port `9000`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在容器中安装和运行SonarQube，就像你在*练习8.01*，*将Jenkins安装为容器*中所做的那样。使用默认端口`9000`。
- en: Install the SonarQube plugin in Jenkins. Log in to SonarQube using `admin/admin`
    and generate the authentication token. Do not forget to copy the token and keep
    it in a text file. You cannot retrieve the token after this step. If you lose
    your token, remove the SonarQube container, re-craft it from the SonarQube image
    as in *step 1*, and re-do the steps again.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中安装SonarQube插件。使用`admin/admin`登录SonarQube并生成身份验证令牌。不要忘记复制令牌并将其保存在文本文件中。在这一步之后，您将无法检索到令牌。如果您丢失了令牌，请删除SonarQube容器，像*步骤1*中重新构建它，并重新执行这些步骤。
- en: Restart Jenkins.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Jenkins。
- en: In Jenkins, add SonarQube's authentication token to the `Global Credentials`
    domain as secret text.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中，将SonarQube的身份验证令牌添加到`全局凭据`域中作为秘密文本。
- en: Integrate Jenkins with SonarQube by adjusting the `Global System Configuration`
    and the `Configure System` options.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调整`全局系统配置`和`配置系统`选项来将Jenkins与SonarQube集成。
- en: Modify the fields in the `Build Environment` tab by enabling the `Prepare SonarQube
    scanner` environment.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过启用`准备SonarQube扫描仪`环境来修改`构建环境`选项卡中的字段。
- en: Modify the `Build` step and add the `Analysis Properties`.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`构建`步骤并添加`分析属性`。
- en: In the browser, go to the SonarQube window, and check its report.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到SonarQube窗口，并检查其报告。
- en: 'The output should be like the following:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 8.36: The expected SonarQube output'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.36：预期的SonarQube输出'
- en: '](image/B15021_08_36.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_36.jpg)'
- en: 'Figure 8.36: The expected SonarQube output'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.36：预期的SonarQube输出
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor339).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor339)找到。
- en: In the next activity, you will integrate Jenkins and SonarQube with our Panoramic
    Trekking application.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个活动中，您将集成Jenkins和SonarQube与我们的全景徒步应用程序。
- en: 'Activity 8.02: Utilizing Jenkins and SonarQube in the Panoramic Trekking Application'
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动8.02：在全景徒步应用中利用Jenkins和SonarQube
- en: The Panoramic Trekking Application also has a frontend and backend, like the
    `hit_counter` application. In this activity, you will create a new project in
    Jenkins that is linked to the Panoramic Trekking application on GitHub. Then,
    you will run SonarQube to get a detailed report about its bugs and security vulnerabilities,
    if the trekking application has any.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 全景徒步应用程序也有前端和后端，就像“hit_counter”应用程序一样。在这个活动中，您将在Jenkins中创建一个新项目，该项目链接到GitHub上的全景徒步应用程序。然后，您将运行SonarQube以获取关于其错误和安全漏洞的详细报告，如果徒步应用程序有任何问题的话。
- en: 'Follow these steps to complete the activity:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成活动：
- en: Create a new item called `trekking` in Jenkins.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中创建一个名为“trekking”的新项目。
- en: Select it as a `FREESTYLE` project.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其选择为“FREESTYLE”项目。
- en: In the `General` tab, select `Discard Old Builds`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“常规”选项卡中，选择“丢弃旧构建”。
- en: In `Source Code Management`, select `GIT`. Then enter the URL `http://github.com/efoda/trekking_app`.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“源代码管理”中，选择“GIT”。然后输入URL“http://github.com/efoda/trekking_app”。
- en: In `Build Triggers`, select `Poll SCM` and set it to be analyzing and testing
    every 15 minutes.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建触发器”中，选择“轮询SCM”，并将其设置为每15分钟进行分析和测试。
- en: In the `Build` tab, enter the `Analysis properties` code.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建”选项卡中，输入“分析属性”代码。
- en: Save and click `Build Now`.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并单击“立即构建”。
- en: Check the report in the `SonarQube` tab in the browser.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器的“SonarQube”选项卡中检查报告。
- en: 'The output should look like the following at SonarQube:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示在SonarQube中：
- en: '![Figure 8.37: Expected output of Activity 8.02'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.37：活动8.02的预期输出'
- en: '](image/B15021_08_37.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_37.jpg)'
- en: 'Figure 8.37: Expected output of Activity 8.02'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.37：活动8.02的预期输出
- en: Note
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor340).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor340)找到。
- en: Summary
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has provided hands-on experience integrating your code using the
    CI/CD pipeline. CI helps developers to integrate code into a shared and easily
    accessible repository. CD helps developers to deliver the code stored in the repository
    to production. The CI/CD approach also helps to keep the product up to date with
    the latest technology and to provide the latest version to customers with a fast
    turnaround for new features and bug fixes.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了集成代码使用CI/CD流水线的实际经验。CI帮助开发人员将代码集成到共享和易于访问的存储库中。CD帮助开发人员将存储在存储库中的代码交付到生产环境。CI/CD方法还有助于使产品与最新技术保持同步，并为新功能和错误修复提供快速交付的最新版本给客户。
- en: Once this chapter's defined three phases of the CI/CD pipeline are completed
    successfully, you will only need to focus on editing your code on GitHub. Jenkins
    will then be your automated assistant, and it will automatically handle the rest
    of the phases for you and make the images available for production.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦本章定义的CI/CD流水线的三个阶段成功完成，您只需要专注于在GitHub上编辑您的代码。Jenkins将成为您的自动助手，并且将自动处理其余的阶段，并使图像可用于生产。
- en: In the next chapter, you will learn about Docker swarm mode and how to perform
    service discovery, clustering, scaling, and rolling updates.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习关于Docker集群模式以及如何执行服务发现、集群、扩展和滚动更新。
