["```py\n    $ python setup.py\n\n    ```", "```py\n    $ python setup.py help\n\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    ```", "```py\n    pygame.init()\n    screen = pygame.display.set_mode((400, 300))\n\n    pygame.display.set_caption('Hello World!')\n    ```", "```py\n    while True: \n       sysFont = pygame.font.SysFont(\"None\", 19)\n       rendered = sysFont.render('Hello World', 0, (255, 100, 100))\n       screen.blit(rendered, (100, 100))\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n\n    pygame.init()\n    screen = pygame.display.set_mode((400, 300))\n\n    pygame.display.set_caption('Hello World!')\n\n    while True: \n       sysFont = pygame.font.SysFont(\"None\", 19)\n       rendered = sysFont.render('Hello World', 0, (255, 100, 100))\n       screen.blit(rendered, (100, 100))\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n    clock = pygame.time.Clock()\n    ```", "```py\n    img = pygame.image.load('head.jpg')\n    ```", "```py\n    steps = np.linspace(20, 360, 40).astype(int)\n    right = np.zeros((2, len(steps)))\n    down = np.zeros((2, len(steps)))\n    left = np.zeros((2, len(steps)))\n    up = np.zeros((2, len(steps)))\n    ```", "```py\n    right[0] = steps\n    right[1] = 20\n\n    down[0] = 360\n    down[1] = steps\n\n    left[0] = steps[::-1]\n    left[1] = 360\n\n    up[0] = 20\n    up[1] = steps[::-1]\n    ```", "```py\n    pos = np.concatenate((right.T, down.T, left.T, up.T))\n    ```", "```py\n       clock.tick(30)\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy as np\n\n    pygame.init()\n    clock = pygame.time.Clock()\n    screen = pygame.display.set_mode((400, 400))\n\n    pygame.display.set_caption('Animating Objects')\n    img = pygame.image.load('head.jpg')\n\n    steps = np.linspace(20, 360, 40).astype(int)\n    right = np.zeros((2, len(steps)))\n    down = np.zeros((2, len(steps)))\n    left = np.zeros((2, len(steps)))\n    up = np.zeros((2, len(steps)))\n\n    right[0] = steps\n    right[1] = 20\n\n    down[0] = 360\n    down[1] = steps\n\n    left[0] = steps[::-1]\n    left[1] = 360\n\n    up[0] = 20\n    up[1] = steps[::-1]\n\n    pos = np.concatenate((right.T, down.T, left.T, up.T))\n    i = 0\n\n    while True: \n       # Erase screen\n       screen.fill((255, 255, 255))\n\n       if i >= len(pos):\n          i = 0\n\n       screen.blit(img, pos[i])\n       i += 1\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n       clock.tick(30)\n    ```", "```py\n    import matplotlib as mpl\n\n    mpl.use(\"Agg\")\n    ```", "```py\n    import matplotlib.pyplot as plt\n    import matplotlib.backends.backend_agg as agg\n\n    fig = plt.figure(figsize=[3, 3])\n    ax = fig.add_subplot(111)\n    canvas = agg.FigureCanvasAgg(fig)\n    ```", "```py\n    def plot(data):\n       ax.plot(data)\n       canvas.draw()\n       renderer = canvas.get_renderer()\n\n       raw_data = renderer.tostring_rgb()\n       size = canvas.get_width_height()\n\n       return pygame.image.fromstring(raw_data, size, \"RGB\")\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy as np\n    import matplotlib as mpl\n\n    mpl.use(\"Agg\")\n\n    import matplotlib.pyplot as plt\n    import matplotlib.backends.backend_agg as agg\n\n    fig = plt.figure(figsize=[3, 3])\n    ax = fig.add_subplot(111)\n    canvas = agg.FigureCanvasAgg(fig)\n\n    def plot(data):\n       ax.plot(data)\n       canvas.draw()\n       renderer = canvas.get_renderer()\n\n       raw_data = renderer.tostring_rgb()\n       size = canvas.get_width_height()\n\n       return pygame.image.fromstring(raw_data, size, \"RGB\")\n\n    pygame.init()\n    clock = pygame.time.Clock()\n    screen = pygame.display.set_mode((400, 400))\n\n    pygame.display.set_caption('Animating Objects')\n    img = pygame.image.load('head.jpg')\n\n    steps = np.linspace(20, 360, 40).astype(int)\n    right = np.zeros((2, len(steps)))\n    down = np.zeros((2, len(steps)))\n    left = np.zeros((2, len(steps)))\n    up = np.zeros((2, len(steps)))\n\n    right[0] = steps\n    right[1] = 20\n\n    down[0] = 360\n    down[1] = steps\n\n    left[0] = steps[::-1]\n    left[1] = 360\n\n    up[0] = 20\n    up[1] = steps[::-1]\n\n    pos = np.concatenate((right.T, down.T, left.T, up.T))\n    i = 0\n    history = np.array([])\n    surf = plot(history)\n\n    while True: \n       # Erase screen\n       screen.fill((255, 255, 255))\n\n       if i >= len(pos):\n          i = 0\n          surf = plot(history)\n\n       screen.blit(img, pos[i])\n       history = np.append(history, pos[i])\n       screen.blit(surf, (100, 100))\n\n       i += 1\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n       clock.tick(30)\n    ```", "```py\n    pixels = pygame.surfarray.array2d(img)\n    ```", "```py\n    X = pixels.shape[0] * 7\n    Y = pixels.shape[1] * 7\n    screen = pygame.display.set_mode((X, Y))\n    ```", "```py\n    new_pixels = np.tile(pixels, (7, 7)).astype(int)\n    ```", "```py\n    pygame.surfarray.blit_array(screen, new_pixels)\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy as np\n\n    pygame.init()\n    img = pygame.image.load('head.jpg')\n    pixels = pygame.surfarray.array2d(img)\n    X = pixels.shape[0] * 7\n    Y = pixels.shape[1] * 7\n    screen = pygame.display.set_mode((X, Y))\n    pygame.display.set_caption('Surfarray Demo')\n    new_pixels = np.tile(pixels, (7, 7)).astype(int)\n\n    while True: \n       screen.fill((255, 255, 255))\n       pygame.surfarray.blit_array(screen, new_pixels)\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n$ [sudo] pip install -U scikit-learn\n\n```", "```py\n$ [sudo] easy_install -U scikit-learn\n\n```", "```py\n    positions = np.random.randint(0, 400, size=(30, 2))\n    ```", "```py\n    positions_norms = np.sum(positions ** 2, axis=1)\n    S = - positions_norms[:, np.newaxis] - positions_norms[np.newaxis, :] + 2 * np.dot(positions, positions.T)\n    ```", "```py\n    aff_pro = sklearn.cluster.AffinityPropagation().fit(S)\n    labels = aff_pro.labels_\n    ```", "```py\n    pygame.draw.polygon(screen, (255, 0, 0), polygon_points[i])\n    ```", "```py\n    import numpy as np\n    import sklearn.cluster\n    import pygame, sys\n    from pygame.locals import *\n\n    np.random.seed(42)\n    positions = np.random.randint(0, 400, size=(30, 2))\n\n    positions_norms = np.sum(positions ** 2, axis=1)\n    S = - positions_norms[:, np.newaxis] - positions_norms[np.newaxis, :] + 2 * np.dot(positions, positions.T)\n\n    aff_pro = sklearn.cluster.AffinityPropagation().fit(S)\n    labels = aff_pro.labels_\n\n    polygon_points = []\n\n    for i in xrange(max(labels) + 1):\n       polygon_points.append([])\n\n    # Sorting points by cluster\n    for label, position in zip(labels, positions):\n       polygon_points[labels[i]].append(positions[i])\n\n    pygame.init()\n    screen = pygame.display.set_mode((400, 400))\n\n    while True: \n       for point in polygon_points:\n          pygame.draw.polygon(screen, (255, 0, 0), point)\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n$ [sudo] pip install PyOpenGL PyOpenGL_accelerate\n\n```", "```py\n$ [sudo] easy_install PyOpenGL PyOpenGL_accelerate\n\n```", "```py\n    def display_openGL(w, h):\n      pygame.display.set_mode((w,h), pygame.OPENGL|pygame.DOUBLEBUF)\n\n      glClearColor(0.0, 0.0, 0.0, 1.0)\n      glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)\n\n      gluOrtho2D(0, w, 0, h)\n    ```", "```py\n        glColor3f(1.0, 0, 0)\n        vertices = np.array([[0, 0], [DIM/2, DIM], [DIM, 0]])\n        NPOINTS = 9000\n        indices = np.random.random_integers(0, 2, NPOINTS)\n        point = [175.0, 150.0]\n\n        for i in xrange(NPOINTS):\n           glBegin(GL_POINTS)\n           point = (point + vertices[indices[i]])/2.0\n           glVertex2fv(point)\n           glEnd()\n\n        glFlush()\n    ```", "```py\n    import pygame\n    from pygame.locals import *\n    import numpy as np\n\n    from OpenGL.GL import *\n    from OpenGL.GLU import *\n\n    def display_openGL(w, h):\n      pygame.display.set_mode((w,h), pygame.OPENGL|pygame.DOUBLEBUF)\n\n      glClearColor(0.0, 0.0, 0.0, 1.0)\n      glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)\n\n      gluOrtho2D(0, w, 0, h)\n\n    def main():\n        pygame.init()\n        pygame.display.set_caption('OpenGL Demo')\n        DIM = 400\n        display_openGL(DIM, DIM)\n        glColor3f(1.0, 0, 0)\n        vertices = np.array([[0, 0], [DIM/2, DIM], [DIM, 0]])\n        NPOINTS = 9000\n        indices = np.random.random_integers(0, 2, NPOINTS)\n        point = [175.0, 150.0]\n\n        for i in xrange(NPOINTS):\n           glBegin(GL_POINTS)\n           point = (point + vertices[indices[i]])/2.0\n           glVertex2fv(point)\n           glEnd()\n\n        glFlush()\n        pygame.display.flip()\n\n        while True:\n            for event in pygame.event.get():\n                if event.type == QUIT:\n                    return\n\n    if __name__ == '__main__':\n      main()\n    ```", "```py\n    def get_pixar(arr, weights):\n      states = ndimage.convolve(arr, weights, mode='wrap')\n\n      bools = (states == 13) | (states == 12 ) | (states == 3)\n\n      return bools.astype(int)\n    ```", "```py\n    def draw_cross(pixar):\n       (posx, posy) = pygame.mouse.get_pos()\n       pixar[posx, :] = 1\n       pixar[:, posy] = 1\n    ```", "```py\n    def random_init(n):\n       return np.random.random_integers(0, 1, (n, n))\n    ```", "```py\n    from __future__ import print_function\n    import os, pygame\n    from pygame.locals import *\n    import numpy as np\n    from scipy import ndimage\n\n    def get_pixar(arr, weights):\n      states = ndimage.convolve(arr, weights, mode='wrap')\n\n      bools = (states == 13) | (states == 12 ) | (states == 3)\n\n      return bools.astype(int)\n\n    def draw_cross(pixar):\n       (posx, posy) = pygame.mouse.get_pos()\n       pixar[posx, :] = 1\n       pixar[:, posy] = 1\n\n    def random_init(n):\n       return np.random.random_integers(0, 1, (n, n))\n\n    def draw_pattern(pixar, pattern):\n         print(pattern)\n\n         if pattern == 'glider':\n          coords = [(0,1), (1,2), (2,0), (2,1), (2,2)]\n         elif pattern == 'block':\n          coords = [(3,3), (3,2), (2,3), (2,2)]\n         elif pattern == 'exploder':\n          coords = [(0,1), (1,2), (2,0), (2,1), (2,2), (3,3)]\n         elif pattern == 'fpentomino':\n          coords = [(2,3),(3,2),(4,2),(3,3),(3,4)]\n\n         pos = pygame.mouse.get_pos()\n\n         xs = np.arange(0, pos[0], 10)\n         ys = np.arange(0, pos[1], 10)\n\n         for x in xs:\n            for y in ys:\n               for i, j in coords:\n                   pixar[x + i, y + j] = 1\n\n    def main():\n        pygame.init ()\n        N = 400\n        pygame.display.set_mode((N, N))\n        pygame.display.set_caption(\"Life Demo\")\n\n        screen = pygame.display.get_surface()\n\n        pixar = random_init(N)\n        weights = np.array([[1,1,1], [1,10,1], [1,1,1]])\n\n        cross_on = False\n\n        while True:\n           pixar = get_pixar(pixar, weights)\n\n           if cross_on:\n              draw_cross(pixar)\n\n           pygame.surfarray.blit_array(screen, pixar * 255 ** 3)\n           pygame.display.flip()\n\n           for event in pygame.event.get():\n             if event.type == QUIT:\n                 return\n             if event.type == MOUSEBUTTONDOWN:\n                cross_on = not cross_on\n             if event.type == KEYDOWN:\n                if event.key == ord('r'):\n                   pixar = random_init(N)\n                   print(\"Random init\")\n                if event.key == ord('g'):\n                   draw_pattern(pixar, 'glider')\n                if event.key == ord('b'):\n                   draw_pattern(pixar, 'block')\n                if event.key == ord('e'):\n                   draw_pattern(pixar, 'exploder')\n                if event.key == ord('f'):\n                   draw_pattern(pixar, 'fpentomino')\n\n    if __name__ == '__main__':\n        main()\n    ```"]