["```java\napply plugin: 'java' \napply plugin: 'application' \n\nsourceCompatibility = 1.8 \nversion = '1.0' \nmainClassName = \"com.packtpublishing.tddjava.ch09.Application\" \n\nrepositories { \n    mavenLocal() \n    mavenCentral() \n} \n\ndependencies { \n    compile group: 'org.springframework.boot', \n            name: 'spring-boot-starter-thymeleaf', \n            version: '1.2.4.RELEASE' \n\n    testCompile group: 'junit', \n    name: 'junit', \n    version: '4.12' \n} \n```", "```java\n@SpringBootApplication \npublic class Application { \n    public static void main(String[] args) { \n        SpringApplication.run(Application.class, args); \n    } \n} \n```", "```java\nfeatures: \n    fibonacci: \n        restEnabled: false \n```", "```java\n@Configuration \n@EnableConfigurationProperties \n@ConfigurationProperties(prefix = \"features.fibonacci\") \npublic class FibonacciFeatureConfig { \n    private boolean restEnabled; \n\n    public boolean isRestEnabled() { \n        return restEnabled; \n    } \n\n    public void setRestEnabled(boolean restEnabled) { \n        this.restEnabled = restEnabled; \n    } \n} \n```", "```java\n@Service(\"fibonacci\") \npublic class FibonacciService { \n\n    public int getNthNumber(int n) { \n        return -1; \n    } \n} \n```", "```java\npublic class FibonacciNumber { \n    private final int number, value; \n\n    public FibonacciNumber(int number, int value) { \n        this.number = number; \n        this.value = value; \n    } \n\n    public int getNumber() { \n        return number; \n    } \n\n    public int getValue() { \n        return value; \n    } \n} \n```", "```java\n@RestController \npublic class FibonacciRestController { \n    @Autowired \n    FibonacciFeatureConfig fibonacciFeatureConfig; \n\n    @Autowired \n    @Qualifier(\"fibonacci\") \n    private FibonacciService fibonacciProvider; \n\n    @RequestMapping(value = \"/fibonacci\", method = GET) \n    public FibonacciNumber fibonacci( \n            @RequestParam( \n                    value = \"number\", \n                    defaultValue = \"0\") int number) { \n        if (fibonacciFeatureConfig.isRestEnabled()) { \n            int fibonacciValue = fibonacciProvider \n                    .getNthNumber(number); \n            return new FibonacciNumber(number, fibonacciValue); \n        } else throw new UnsupportedOperationException(); \n    } \n\n    @ExceptionHandler(UnsupportedOperationException.class) \n    public void unsupportedException(HttpServletResponse response) \n            throws IOException { \n        response.sendError( \n                HttpStatus.SERVICE_UNAVAILABLE.value(), \n                \"This feature is currently unavailable\" \n        ); \n    } \n\n    @ExceptionHandler(Exception.class) \n    public void handleGenericException( \n            HttpServletResponse response, \n            Exception e) throws IOException { \n        String msg = \"There was an error processing \" + \n                \"your request: \" + e.getMessage(); \n        response.sendError( \n                HttpStatus.BAD_REQUEST.value(), \n                msg \n        ); \n    } \n} \n```", "```java\n    $> gradle run\n\n```", "```java\n    ...\n    2015-06-19 03:44:54.157  INFO 3886 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]\n    2015-06-19 03:44:54.160  INFO 3886 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]\n    2015-06-19 03:44:54.319  INFO 3886 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]\n    2015-06-19 03:44:54.495  INFO 3886 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup\n    2015-06-19 03:44:54.649  INFO 3886 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)\n    2015-06-19 03:44:54.654  INFO 3886 --- [           main] c.p.tddjava.ch09.Application             : Started Application in 6.916 seconds (JVM running for 8.558)\n    > Building 75% > :run\n\n```", "```java\n@Service(\"fibonacci\") \npublic class FibonacciService { \n    public static final int LIMIT = 30; \n\n    public int getNthNumber(int n) { \n        if (isOutOfLimits(n) { \n        throw new IllegalArgumentException( \n        \"Requested number must be a positive \" + \n           number no bigger than \" + LIMIT); \n        if (n == 0) return 0; \n        if (n == 1 || n == 2) return 1; \n        int first, second = 1, result = 1; \n        do { \n            first = second; \n            second = result; \n            result = first + second; \n            --n; \n        } while (n > 2); \n        return result; \n    } \n\n    private boolean isOutOfLimits(int number) { \n        return number > LIMIT || number < 0; \n    } \n} \n```", "```java\npublic class FibonacciServiceTest { \n    private FibonacciService tested; \n    private final String expectedExceptionMessage = \n         \"Requested number \" + \n            \"must be a positive number no bigger than \" +  \n            FibonacciService.LIMIT; \n\n    @Rule \n    public ExpectedException exception = ExpectedException.none(); \n\n    @Before \n    public void beforeTest() { \n        tested = new FibonacciService(); \n    } \n\n    @Test \n    public void test0() { \n        int actual = tested.getNthNumber(0); \n        assertEquals(0, actual); \n    } \n\n    @Test \n    public void test1() { \n        int actual = tested.getNthNumber(1); \n        assertEquals(1, actual); \n    } \n\n    @Test \n    public void test7() { \n        int actual = tested.getNthNumber(7); \n        assertEquals(13, actual); \n    } \n\n    @Test \n    public void testNegative() { \n        exception.expect(IllegalArgumentException.class); \n        exception.expectMessage(is(expectedExceptionMessage)); \n        tested.getNthNumber(-1); \n    } \n\n    @Test \n    public void testOutOfBounce() { \n        exception.expect(IllegalArgumentException.class); \n        exception.expectMessage(is(expectedExceptionMessage)); \n        tested.getNthNumber(31); \n    } \n} \n```", "```java\nfeatures: \n    fibonacci: \n        restEnabled: true \n```", "```java\n    $>gradle run\n```", "```java\nfeatures: \n    fibonacci: \n        restEnabled: true \n        webEnabled: true \n```", "```java\n    private boolean webEnabled; \n    public boolean isWebEnabled() { \n        return webEnabled; \n    } \n\n    public void setWebEnabled(boolean webEnabled) { \n        this.webEnabled = webEnabled; \n    } \n```", "```java\n<!DOCTYPE html> \n<html > \n<head lang=\"en\"> \n    <meta http-equiv=\"Content-Type\" \n          content=\"text/html; charset=UTF-8\" /> \n    <title>HOME - Fibonacci</title> \n</head> \n<body> \n<div th:if=\"${isWebEnabled}\"> \n    <p>List of links:</p> \n    <ul th:each=\"number : ${arrayOfInts}\"> \n        <li><a \n            th:href=\"@{/web/fibonacci(number=${number})}\" \n            th:text=\"'Compute ' + ${number} + 'th fibonacci'\"> \n        </a></li> \n    </ul> \n</div> \n</body> \n</html> \n```", "```java\n<!DOCTYPE html> \n<html > \n<head lang=\"en\"> \n    <meta http-equiv=\"Content-Type\" \n          content=\"text/html; charset=UTF-8\" /> \n    <title>Fibonacci Example</title> \n</head> \n<body> \n<p th:text=\"${number} + 'th number: ' + ${value}\"></p> \n<a th:href=\"@{/}\">back</a> \n</body> \n</html> \n```", "```java\n@Controller \npublic class FibonacciWebController { \n    @Autowired \n    FibonacciFeatureConfig fibonacciFeatureConfig; \n\n    @Autowired \n    @Qualifier(\"fibonacci\") \n    private FibonacciService fibonacciProvider; \n\n    @RequestMapping(value = \"/\", method = GET) \n    public String home(Model model) { \n        model.addAttribute( \n            \"isWebEnabled\", \n            fibonacciFeatureConfig.isWebEnabled() \n        ); \n        if (fibonacciFeatureConfig.isWebEnabled()) { \n            model.addAttribute( \n                \"arrayOfInts\", \n                Arrays.asList(5, 7, 8, 16) \n            ); \n        } \n        return \"home\"; \n    } \n\n    @RequestMapping(value =\"/web/fibonacci\", method = GET) \n    public String fibonacci( \n            @RequestParam(value = \"number\") Integer number, \n            Model model) { \n        if (number != null) { \n            model.addAttribute(\"number\", number); \n            model.addAttribute( \n                \"value\", \n                fibonacciProvider.getNthNumber(number)); \n        } \n        return \"fibonacci\"; \n    } \n} \n```", "```java\n    $> gradle clean run\n\n```", "```java\nfeatures: \n    fibonacci: \n        restEnabled: true \n        webEnabled: false \n```"]