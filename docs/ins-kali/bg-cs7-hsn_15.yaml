- en: Joining Datasets with Inner Joins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内连接加入数据集
- en: In this chapter, you will learn how to use LINQ to write queries that join different
    result sets or different data sets. The code is not very complicated in this chapter—there's
    just a bit of it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用LINQ编写查询，以连接不同的结果集或不同的数据集。本章的代码并不是很复杂，只有一点点。
- en: Adding a Join Classes button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加一个连接类的按钮
- en: 'Bring up a project. Put a button in the HTML page that says Join Classes below
    the line beginning with `<form id=....`. So, we''ll have two different classes
    and then we''ll join them together, produce some results, and then display them.
    That''s the objective here:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目。在HTML页面中放置一个按钮，上面写着连接类，放在以`<form id=....`开头的行下面。因此，我们将有两个不同的类，然后将它们连接在一起，产生一些结果，然后显示它们。这是目标：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, switch to the Design view and double-click on the Join Classes button.
    This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The relevant
    portion of the starting code for this project should look like *Figure 15.10.1*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，切换到设计视图，并双击连接类按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。该项目的起始代码的相关部分应如*图15.10.1*所示：
- en: '![](img/eb1eda2d-e891-4908-8db1-912e2d9669ba.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb1eda2d-e891-4908-8db1-912e2d9669ba.png)'
- en: 'Figure 15.10.1: The starting code section for this project'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10.1：该项目的起始代码部分
- en: Adding the namespaces
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命名空间
- en: 'Now, we will make code as follows. We''ll need the LINQ and generic collections
    namespaces; so, enter the following under `using System` near the top of the file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写以下代码。我们需要LINQ和泛型集合命名空间；因此，在文件顶部的`using System`下面输入以下内容：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating the person and car classes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建人员和汽车类
- en: 'We''ll make two classes. One will be a `person` and the other will be a `car`
    class. To do this, enter the following directly above the line that begins with
    `public partial class _Default...`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个类。一个是`person`，另一个是`car`类。为此，请在以`public partial class _Default...`开头的行的正上方直接输入以下内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we need just a name; so, enter the following between a set of curly braces
    below this line:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要一个名字；因此，在此行下面的一对大括号之间输入以下内容：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, we also need to make a class called `Car`. So, beneath the closed curly
    brace underneath the preceding line, enter the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们还需要创建一个名为`Car`的类。因此，在前一行下面的封闭大括号下面输入以下内容：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, enter the following between a set of curly braces below this line:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在此行下面的一对大括号之间输入以下内容：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see now, `public Person` is being defined inside the class as a data
    type of a field. For example, a car has an owner.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如您现在所见，`public Person` 被定义为类内字段的数据类型。例如，一辆车有一个所有者。
- en: 'Now, add one more data type below the preceding line, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前一行下面添加另一个数据类型，如下所示：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Clearly, you can see the presence of the `Person` field inside the `Car` class.
    There's a connection between the classes. We will use this shortly. For now, let's
    go through the construction.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您可以看到`Car`类内有`Person`字段。这些类之间存在连接。我们很快就会用到这个。现在，让我们来构建。
- en: Making person objects
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建人员对象
- en: 'First, we have to make some `Person` objects, otherwise we won''t have anything
    to join. So, enter the following between a set of curly braces under the line
    that begins with `protected void Button1_Click...`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一些`Person`对象，否则我们将没有任何东西可以连接。因此，在以`protected void Button1_Click...`开头的行下面的一对大括号之间输入以下内容：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, copy this line and paste it directly below. Edit the line to say `Person
    per2` and change the value of `Name` variable to equal `Jenny Smith`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，复制此行并将其直接粘贴到下面。编辑该行，将其更改为`Person per2`，并将`Name`变量的值更改为`Jenny Smith`：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, copy the preceding line and paste it below. Edit the line to say `Person
    per3` and change the value of `Name` variable to equal `John Jenkins`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，复制前面的行并将其粘贴到下面。编辑该行，将其更改为`Person per3`，并将`Name`变量的值更改为`John Jenkins`：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So, now we have some people who will be the car owners.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们有一些人将成为汽车的所有者。
- en: Making car objects
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建汽车对象
- en: 'Now, let''s make some `car` objects. Skip a line and then start by entering
    the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一些`car`对象。跳过一行，然后输入以下内容：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To initialize `car1`, you start by saying `Owner = per1`. This establishes a
    connection between the two classes; that is, owner for `car1` is `per1`, who is
    `Mark Owens`. Then, you add maker, which we'll say is `Honda` for `car1`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化`car1`，您可以从`Owner = per1`开始。这建立了两个类之间的连接；也就是说，`car1`的所有者是`per1`，即`Mark Owens`。然后，您添加制造商，我们将说`car1`的制造商是`Honda`。
- en: 'Once again, copy this line and paste it directly below the preceding line.
    Edit the line to say `Car car2` and owner to say `per2`, but leave maker equal
    to `Honda`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 再次复制此行，并将其直接粘贴到前一行下面。编辑该行，将其更改为`Car car2`，所有者更改为`per2`，但制造商保持为`Honda`：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sometimes, unfortunately, to illustrate a concept, I've got to write a decent
    amount of code, otherwise the concept is difficult to illustrate.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，不幸的是，为了阐明一个概念，我必须写相当多的代码，否则很难阐明这个概念。
- en: 'Again, copy the preceding line and paste it below. Edit the line to say `Car
    car3` and `Owner` to say `per1`, but this time and change `Maker` equal to `Toyota`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 再次复制前面的行并将其粘贴到下面。编辑该行，将其更改为`Car car3`，`Owner`更改为`per1`，但这次将`Maker`更改为`Toyota`：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, copy the preceding line and paste it below. Edit the line to say `Car
    car4`, `Owner` to say `per4` and `Maker` equal to `Tesla`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，复制前面的行并将其粘贴到下面。编辑该行，将其更改为`Car car4`，`Owner`更改为`per4`，并将`Maker`更改为`Tesla`：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The thing to be observed here, of course, is that the `per3` variable is not
    being used as the owner of a car, right? So, when we do the join, the query that
    joins these two datasets, the records that are shared will be returned. This means,
    for example, that there is no car owned by `per3`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，要注意的是，`per3`变量并未被用作汽车的所有者，对吧？因此，当我们进行连接时，连接这两个数据集的查询将返回共享的记录。这意味着，例如，没有一辆车是由`per3`拥有的。
- en: Making a list of owners and their cars
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建所有者及其汽车的列表
- en: 'Next, skip a line and enter the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，跳过一行，输入以下内容：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we are saying a list of persons, `people`, equals a new list of people
    and, then, we stick in those individuals—`per1`, `per2`, and `per3`. Next, you''ll
    do the same thing for the cars, so enter the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说一个人的列表，`people`，等于一个新的人的列表，然后，我们把这些个体——`per1`，`per2`和`per3`放进去。接下来，你要对汽车做同样的事情，所以输入以下内容：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Again, to initialize the list of cars, you say `car1`, `car2`, `car3`, and `car4`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，要初始化汽车列表，你说`car1`，`car2`，`car3`和`car4`。
- en: Joining the owners and car lists
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接所有者和汽车列表
- en: 'Now, you can join those lists. To do this, skip a line, and enter the following
    next:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以连接这些列表。要做到这一点，略过一行，然后输入以下内容：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For cars with owners, you write the query: `from person in people`. Next, continue
    by entering the following below:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有所有者的汽车，你可以编写查询：`from person in people`。接下来，继续输入以下内容：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we are joining the two lists. We are using `person` to `join people`
    and setting that equal to `car.Owner`. Then, once you have them joined, the people
    who have a car essentially, you can say the following next:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在连接这两个列表。我们使用`person`来`join people`，并将其设置为`car.Owner`。然后，一旦它们连接起来，拥有汽车的人基本上，你可以接着说以下内容：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We are creating an anonymous type in this line. So, if you hover your mouse
    over `var`, it says T is 'a. That's an anonymous data type. So, `carsWithOwners`
    is basically a list of anonymous types, but because it is a list and because it
    is `IEnumerable`, you can step through it using a `foreach` loop.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中创建了一个匿名类型。因此，如果你将鼠标悬停在`var`上，它会说T是'a。这是一个匿名数据类型。因此，`carsWithOwners`基本上是一个匿名类型的列表，但因为它是一个列表，而且是`IEnumerable`，你可以使用`foreach`循环逐步进行遍历。
- en: Getting and displaying the results
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取并显示结果
- en: 'Now we need to get the results. So, skip a line, and say the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要获取结果。所以，略过一行，说以下内容：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, enter the following between a set of curly braces below this line:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在这条线下面的花括号之间输入以下内容：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will display the results for us.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们显示结果。
- en: Running the program
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now open this up in your browser, and click on the Join Classes button. Take
    a look at the results, which are also shown in *Figure 15.10.2*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在浏览器中打开这个，然后点击连接类按钮。看一下结果，也显示在*图15.10.2*中：
- en: '![](img/cfb73cca-c128-411c-9dd3-b75c8b2e1767.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfb73cca-c128-411c-9dd3-b75c8b2e1767.png)'
- en: 'Figure 15.10.2: The result of this project'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10.2：这个项目的结果
- en: So, Mark Owens has two cars. Next, Jenny Smith has a Honda and also a Tesla.
    Correct?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，马克·欧文斯有两辆车。接下来，珍妮·史密斯有一辆本田和一辆特斯拉。对吗？
- en: Now, because John Jenkins is `per3`, he does not appear as an owner in the list
    of cars. This means that there's no connection between `per3` and the `Car` list.
    In other words, when the join is done in LINQ, `per1` is used because it is going
    by the owner—`Car.Owner`. So, `per1` and `per2` will be used, but not `per3`.
    Then, you display the results.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，因为约翰·詹金斯是`per3`，他不会出现在汽车列表中作为所有者。这意味着`per3`和`Car`列表之间没有连接。换句话说，在LINQ中进行连接时，会使用`per1`，因为它是按所有者`Car.Owner`进行的。因此，将使用`per1`和`per2`，但不会使用`per3`。然后，显示结果。
- en: Chapter review
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释在内的本章的`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use LINQ to write queries that join different
    result sets or different data sets. You created the `Person` and `Car` classes,
    made the `Person` and `Car` objects, made a list of owners and their cars, and
    joined the owners and car lists.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何使用LINQ编写查询，连接不同的结果集或不同的数据集。你创建了`Person`和`Car`类，制作了`Person`和`Car`对象，制作了所有者及其汽车的列表，并连接了所有者和汽车列表。
- en: In the next chapter, you will work with SQL Server 2017 Express.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将使用SQL Server 2017 Express。
