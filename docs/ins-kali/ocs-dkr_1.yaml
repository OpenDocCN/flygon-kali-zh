- en: Chapter 1. Unboxing Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。打开Docker
- en: '**Docker** is a lightweight containerization technology that has gained widespread
    popularity in recent years. It uses a host of the Linux kernel''s features such
    as namespaces, cgroups, AppArmor profiles, and so on, to sandbox processes into
    configurable virtual environments.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker**是一种轻量级的容器化技术，在近年来广受欢迎。它利用了Linux内核的一系列特性，如命名空间、cgroups、AppArmor配置文件等，将进程隔离到可配置的虚拟环境中。'
- en: In this chapter, you will learn how to install Docker on various systems, both
    in development and in production. For Linux-based systems, since a kernel is already
    available, installation is as simple as the `apt-get install` or `yum install`
    commands. However, to run Docker on non-Linux operating systems such as OSX and
    Windows, you will need to install a helper application developed by Docker Inc.,
    called **Boot2Docker**. This will install a lightweight Linux VM on **VirtualBox**,
    which will make Docker available through port 2375, assigned by the **Internet**
    **Assigned** **Numbers** **Authority** (**IANA**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在各种系统上安装Docker，无论是在开发还是生产环境。对于基于Linux的系统，由于内核已经可用，安装就像`apt-get install`或`yum
    install`命令一样简单。然而，要在OSX和Windows等非Linux操作系统上运行Docker，您需要安装Docker Inc.开发的一个辅助应用程序，称为**Boot2Docker**。这将在**VirtualBox**上安装一个轻量级的Linux虚拟机，通过**Internet**
    **Assigned** **Numbers** **Authority** (**IANA**)分配的端口2375，使Docker可用。
- en: At the end of this chapter, you will have installed Docker on your system, be
    it in development or production, and verified it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将在您的系统上安装了Docker，无论是在开发还是生产环境，并进行了验证。
- en: 'This chapter will cover the following points:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Introducing Docker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Docker
- en: Installing Docker
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Docker
- en: Ubuntu (14.04 and 12.04)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu（14.04和12.04）
- en: Mac OSX and Windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OSX和Windows
- en: OpenStack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack
- en: 'Inception: building Docker in Docker'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Inception：在Docker中构建Docker
- en: 'Verifying installation: `Hello` `World` output'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证安装：`Hello` `World` 输出
- en: Introducing Docker
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Docker
- en: Docker was developed by DotCloud Inc. (Currently Docker Inc.), as the framework
    they built their **Platform** **as** **a** **Service** (**PaaS**) upon. When they
    found increasing developer interest in the technology, they released it as open
    source and have since announced that they will completely focus on the Docker
    technology's development, which is good news as it means continual support and
    improvement for the platform.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是由DotCloud Inc.（目前是Docker Inc.）开发的，作为他们构建的**Platform** **as** **a** **Service**
    (**PaaS**)的框架。当他们发现开发人员对这项技术越来越感兴趣时，他们将其作为开源发布，并自那时起宣布他们将完全专注于Docker技术的发展，这是一个好消息，因为这意味着平台将得到持续的支持和改进。
- en: There have been many tools and technologies aimed at making distributed applications
    possible, even easy to set up, but none of them have as wide an appeal as Docker
    does, which is primarily because of its cross-platform nature and friendliness
    towards both system administrators and developers. It is possible to set up Docker
    in any OS, be it Windows, OSX, or Linux, and Docker containers work the same way
    everywhere. This is extremely powerful, as it enables a write-once-run-anywhere
    workflow. Docker containers are guaranteed to run the same way, be it on your
    development desktop, a bare-metal server, virtual machine, data center, or cloud.
    No longer do you have the situation where a program runs on the developer's laptop
    but not on the server.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有许多旨在使分布式应用程序成为可能，甚至易于设置的工具和技术，但没有一个像Docker一样具有如此广泛的吸引力，这主要是因为它的跨平台性和对系统管理员和开发人员的友好性。在任何操作系统上都可以设置Docker，无论是Windows、OSX还是Linux，Docker容器在任何地方都可以以相同的方式工作。这是非常强大的，因为它实现了一次编写，到处运行的工作流程。Docker容器保证在开发桌面、裸机服务器、虚拟机、数据中心或云上以相同的方式运行。不再出现程序在开发人员的笔记本电脑上运行但在服务器上不运行的情况。
- en: The nature of the workflow that comes with Docker is such that developers can
    completely concentrate on building applications and getting them running inside
    the containers, whereas sysadmins can work on running the containers in deployment.
    This separation of roles and the presence of a single underlying tool to enable
    it simplifies the management of code and the deployment process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的工作流程的性质使得开发人员可以完全专注于构建应用程序并在容器内运行它们，而系统管理员可以专注于在部署中运行容器。这种角色的分离和一个单一的基础工具的存在使得代码管理和部署过程变得简单。
- en: But don't virtual machinesalready provide all of these features?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是虚拟机不是已经提供了所有这些功能吗？
- en: '**Virtual Machines** (**VMs**) are fully virtualized. This means that they
    share minimal resources amongst themselves and each VM has its own set of resources
    allocated to it. While this allows fine-grained configuration of the individual
    VMs, minimal sharing also translates into greater resource usage, redundant running
    processes (an entire operating system needs to run!), and hence a performance
    overhead.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟机**（**VMs**）是完全虚拟化的。这意味着它们在彼此之间共享最少的资源，每个虚拟机都有其自己分配的资源集。虽然这允许对各个虚拟机进行细粒度配置，但最小的共享也意味着更大的资源使用、冗余的运行进程（需要运行整个操作系统！）和因此性能开销。'
- en: Docker, on the other hand, builds on a container technology that isolates a
    process and makes it believe that it is running on a standalone operating system.
    The process still runs in the same operating system as its host, sharing its kernel.
    It uses a layered copy-on-write filesystem called **Another** **Unionfs** (**AUFS**),
    which shares common portions of the operating system between containers. Greater
    sharing, of course, can only mean less isolation, but vast improvements in Linux
    process's resource management solutions such as namespaces and cgroups have allowed
    Docker to achieve VM-like sandboxing of processes and yet maintain a very small
    resource footprint.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Docker建立在容器技术之上，它隔离一个进程并使其相信自己在独立的操作系统上运行。该进程仍然在与其主机相同的操作系统中运行，共享其内核。它使用了一个名为**Another**
    **Unionfs**（**AUFS**）的分层写时复制文件系统，它在容器之间共享操作系统的公共部分。更大的共享当然只能意味着更少的隔离，但Linux进程资源管理解决方案的巨大改进，如命名空间和cgroups，已经使Docker实现了类似虚拟机的进程隔离，同时保持了非常小的资源占用。
- en: 'Let''s take a look at the following image:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下图片：
- en: '![Unboxing Docker](graphics/4787_01_04.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![拆箱Docker](graphics/4787_01_04.jpg)'
- en: This a Docker vs VM comparison. Containers share the host's resources with other
    containers and processes, and virtual machines have to run an entire operating
    system for every instance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Docker与虚拟机的比较。容器与其他容器和进程共享主机的资源，而虚拟机必须为每个实例运行整个操作系统。
- en: Installing Docker
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker
- en: Docker is available in the standard repositories of most major Linux distributions.
    We will be looking at the installation procedures for Docker in Ubuntu 14.04 and
    12.04 (Trusty and Precise), Mac OSX, and Windows. If you are currently using an
    operating system not listed above, you can look up the instructions for your operating
    system at [https://docs.docker.com/installation/#installation](https://docs.docker.com/installation/#installation).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Docker在大多数主要Linux发行版的标准存储库中都有。我们将看一下Ubuntu 14.04和12.04（Trusty和Precise）、Mac OSX和Windows中Docker的安装程序。如果您目前使用的操作系统不在上述列表中，您可以在[https://docs.docker.com/installation/#installation](https://docs.docker.com/installation/#installation)上查找您操作系统的说明。
- en: Installing Docker in Ubuntu
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Ubuntu中安装Docker
- en: Docker is supported by Ubuntu from Ubuntu 12.04 onwards. Remember that you still
    need a 64-bit operating system to run Docker. Let's take a look at the installation
    instructions for Ubuntu 14.04.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu从Ubuntu 12.04开始支持Docker。请记住，您仍然需要64位操作系统才能运行Docker。让我们来看一下Ubuntu 14.04的安装说明。
- en: Installing Docker in Ubuntu Trusty 14.04 LTS
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Ubuntu Trusty 14.04 LTS中安装Docker
- en: 'Docker is available as a package in the Ubuntu Trusty release''s software repositories
    under the name of `docker.io`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Docker作为一个软件包在Ubuntu Trusty版本的软件存储库中以`docker.io`的名称可用：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's it! You have now installed Docker onto your system. However, since the
    command has been renamed `docker.io`, you will have to run all Docker commands
    with `docker.io` instead of `docker`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您现在已经在系统上安装了Docker。但是，由于命令已更名为`docker.io`，您将不得不使用`docker.io`而不是`docker`来运行所有Docker命令。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The package is named `docker.io` because it conflicts with another KDE3/GNOME2
    package called `docker`. If you rather want to run commands as `docker`, you can
    create a symbolic link to the `/usr/local/bin` directory. The second command adds
    autocomplete rules to bash:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包的名称为`docker.io`，因为它与另一个名为`docker`的KDE3/GNOME2软件包冲突。如果您更愿意以`docker`运行命令，可以创建一个符号链接到`/usr/local/bin`目录。第二个命令将自动完成规则添加到bash：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing Docker in Ubuntu Precise 12.04 LTS
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Ubuntu Precise 12.04 LTS中安装Docker
- en: 'Ubuntu 12.04 comes with an older kernel (3.2), which is incompatible with some
    of the dependencies of Docker. So we will have to upgrade it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 12.04带有较旧的内核（3.2），与Docker的一些依赖项不兼容。因此，我们需要升级它：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The kernel that we just installed comes with AUFS built in, which is also a
    Docker requirement.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚安装的内核内置了AUFS，这也是Docker的要求。
- en: 'Now let''s wrap up the installation:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们结束安装：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is a `curl` script for easy installation. Looking at the individual pieces
    of this script will allow us to understand the process better:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于简单安装的`curl`脚本。查看此脚本的各个部分将帮助我们更好地理解该过程：
- en: 'First, the script checks whether our **Advanced** **Package** **Tool** (**APT**)
    system can deal with `https` URLs, and installs `apt-transport-https` if it cannot:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，脚本检查我们的**高级** **软件包** **工具**（**APT**）系统是否能处理`https` URL，并在无法处理时安装`apt-transport-https`：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then it will add the Docker repository to our local key chain:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后它将Docker存储库添加到我们的本地密钥链中：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You may receive a warning that the package isn't trusted. Answer `yes` to continue
    the installation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会收到一个警告，表示软件包不受信任。回答“yes”以继续安装。
- en: 'Finally, it adds the Docker repository to the APT sources list, and updates
    and installs the `lxc-docker` package:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，它将Docker存储库添加到APT源列表中，并更新并安装`lxc-docker`软件包：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Docker versions before 0.9 had a hard dependency on LXC (Linux Containers) and
    hence couldn't be installed on VMs hosted on OpenVZ. But since 0.9, the execution
    driver has been decoupled from the Docker core, which allows us to use one of
    numerous isolation tools such as LXC, OpenVZ, systemd-nspawn, libvirt-lxc, libvirt-sandbox,
    qemu/kvm, BSD Jails, Solaris Zones, and even chroot! However, it comes by default
    with an execution driver for Docker's own containerization engine, called l**ibcontainer**,
    which is a pure Go library that can access the kernel's container APIs directly,
    without any other dependencies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 0.9版本之前的Docker对LXC（Linux容器）有严格依赖，因此无法安装在OpenVZ托管的VM上。但自0.9版本以来，执行驱动程序已从Docker核心中解耦，这使我们可以使用众多隔离工具之一，如LXC、OpenVZ、systemd-nspawn、libvirt-lxc、libvirt-sandbox、qemu/kvm、BSD
    Jails、Solaris Zones，甚至chroot！但是，它默认使用Docker自己的容器化引擎的执行驱动程序，称为l**ibcontainer**，这是一个纯Go库，可以直接访问内核的容器API，而无需任何其他依赖关系。
- en: 'To use any other containerization engine, say LXC, you can use the-e flag,
    like so: `$ docker -d -e lxc`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用任何其他容器化引擎，比如LXC，您可以使用-e标志，如下所示：`$ docker -d -e lxc`。
- en: 'Now that we have Docker installed, we can get going at full steam! There is
    one problem though: software repositories like **APT** are usually behind times
    and often have older versions. Docker is a fast-moving project and a lot has changed
    in the last few versions. So it is always recommended to have the latest version
    installed.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Docker，我们可以全速前进了！不过有一个问题：像APT这样的软件仓库通常滞后于时代，经常有较旧的版本。Docker是一个快速发展的项目，在最近的几个版本中发生了很多变化。因此，建议始终安装最新版本。
- en: Upgrading Docker
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级Docker
- en: 'You can upgrade Docker as and when it is updated in the APT repositories. An
    alternative (and better) method is to build from source. The tutorial for this
    method is in the section titled *Inception: Docker in Docker*. It is recommended
    to upgrade to the newest stable version as the newer versions might contain critical
    security updates and bug fixes. Also, the examples in this book assume a Docker
    version greater than 1.0, whereas Ubuntu''s standard repositories package a much
    older version.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以根据APT仓库中的更新来升级Docker。另一种（更好的）方法是从源代码构建。此方法的教程在标题为*Inception: Docker in Docker*的部分中。建议升级到最新的稳定版本，因为更新的版本可能包含关键的安全更新和错误修复。此外，本书中的示例假定Docker版本大于1.0，而Ubuntu的标准仓库中打包了一个更旧的版本。'
- en: Mac OSX and Windows
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac OSX和Windows
- en: 'Docker depends on the Linux kernel, so we need to run Linux in a VM and install
    and use Docker through it. Boot2Docker is a helper application built by Docker
    Inc. that installs a VM containing a lightweight Linux distribution made specifically
    to run Docker containers. It also comes with a client that provides the same **Application**
    **Program** **Interface** (**API**) as that of Docker, but interfaces with the
    `docker` daemon running in the VM, allowing us to run commands from within the
    OSX/Windows terminal. To install Boot2Docker, carry out the following steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Docker依赖于Linux内核，因此我们需要在虚拟机中运行Linux，并通过它安装和使用Docker。Boot2Docker是由Docker Inc.构建的辅助应用程序，它安装了一个包含轻量级Linux发行版的虚拟机，专门用于运行Docker容器。它还带有一个客户端，提供与Docker相同的**应用程序**
    **接口** (**API**)，但与在虚拟机中运行的`docker`守护程序进行交互，允许我们从OSX/Windows终端运行命令。要安装Boot2Docker，请执行以下步骤：
- en: Download the latest release of Boot2Docker for your operating system from [http://boot2docker.io/](http://boot2docker.io/).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://boot2docker.io/](http://boot2docker.io/)下载适用于您操作系统的最新版本的Boot2Docker。
- en: The installation image is shown as follows:![Mac OSX and Windows](graphics/4787_01_01.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装镜像如下所示：![Mac OSX和Windows](graphics/4787_01_01.jpg)
- en: Run the installer, which will install VirtualBox and the Boot2Docker management
    tool.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序，它将安装VirtualBox和Boot2Docker管理工具。
- en: Run Boot2docker. The first run will ask you for a **Secure** **Shell** (**SSH**)
    key passphrase. Subsequent runs of the script will connect you to a shell session
    in the virtual machine. If needed, the subsequent runs will initialize a new VM
    and start it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Boot2docker。第一次运行时会要求您输入**安全** **Shell** (**SSH**)密钥密码。脚本的后续运行将连接您到虚拟机中的shell会话。如果需要，后续运行将初始化一个新的虚拟机并启动它。
- en: 'Alternately, to run Boot2Docker, you can also use the terminal command `boot2docker`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要运行Boot2Docker，您也可以使用终端命令`boot2docker`。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You will have to run `boot2docker init` only once. It will ask you for an SSH
    key passphrase. This passphrase is subsequently used by `boot2docker ssh` to authenticate
    SSH access.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要运行`boot2docker init`一次。它会要求您输入SSH密钥密码。随后，`boot2docker ssh`将使用此密码来验证SSH访问。
- en: Once you have initialized Boot2Docker, you can subsequently use it with the
    `boot2docker start` and `boot2docker stop` commands.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化Boot2Docker后，您随后可以使用`boot2docker start`和`boot2docker stop`命令。
- en: '`DOCKER_HOST` is an environment variable that, when set, indicates to the Docker
    client the location of the `docker` daemon. A port forwarding rule is set to the
    boot2Docker VM''s port 2375 (where the `docker` daemon runs). You will have to
    set this variable in every terminal shell you want to use Docker in.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`DOCKER_HOST` 是一个环境变量，设置后，指示 Docker 客户端 `docker` 守护程序的位置。端口转发规则设置为 boot2Docker
    VM 的端口 2375（`docker` 守护程序运行的位置）。您将需要在每个要在其中使用 Docker 的终端 shell 中设置此变量。'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Bash allows you to insert commands by enclosing subcommands within [PRE8]
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Bash 允许您通过在 [PRE8] 中包含子命令来插入命令
- en: '**$ boot2docker**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ boot2docker**'
- en: '**Usage: boot2docker [<options>] {help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete|download|version}
    [<args>]**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'Usage: boot2docker [<options>] {help|init|up|ssh|save|down|poweroff|reset|restart|config|status|info|ip|delete|download|version}
    [<args>]'
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**alias setdockerhost=''export DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375''**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**alias setdockerhost=''export DOCKER_HOST=tcp://$(boot2docker ip 2>/dev/null):2375''**'
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**$ setdockerhost**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ setdockerhost**'
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**$ boot2docker stop**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ boot2docker stop**'
- en: '**$ boot2docker download**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ boot2docker download**'
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**VIRT_DRIVER=docker**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**VIRT_DRIVER=docker**'
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**$ apt-get install socat**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ apt-get install socat**'
- en: '**$ ./tools/docker/install_docker.sh**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ ./tools/docker/install_docker.sh**'
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**$ ./stack.sh**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ ./stack.sh**'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**$ sudo yum -y install docker-registry**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo yum -y install docker-registry**'
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**$ export SETTINGS_FLAVOR=openstack**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ export SETTINGS_FLAVOR=openstack**'
- en: '**$ export REGISTRY_PORT=5042**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ export REGISTRY_PORT=5042**'
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**$ source /root/keystonerc_admin**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ source /root/keystonerc_admin**'
- en: '**$ export OS_GLANCE_URL=http://localhost:9292**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ export OS_GLANCE_URL=http://localhost:9292**'
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**openstack:**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**openstack:**'
- en: '**storage: glance**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**storage: glance**'
- en: '**storage_alternate: local**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**storage_alternate: local**'
- en: '**storage_path: /var/lib/docker-registry**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**storage_path: /var/lib/docker-registry**'
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**$ usermod -G docker nova**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ usermod -G docker nova**'
- en: '**$ service openstack-nova-compute restart**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ service openstack-nova-compute restart**'
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**$ sudo service redis start**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo service redis start**'
- en: '**$ sudo chkconfig redis on**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo chkconfig redis on**'
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**$ sudo service docker-registry start**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo service docker-registry start**'
- en: '**$ sudo chkconfig docker-registry on**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo chkconfig docker-registry on**'
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**[DEFAULT]**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**[DEFAULT]**'
- en: '**compute_driver = docker.DockerDriver**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**compute_driver = docker.DockerDriver**'
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**docker_registry_default_port = 5042**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**docker_registry_default_port = 5042**'
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**[DEFAULT]**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**[DEFAULT]**'
- en: '**container_formats = ami,ari,aki,bare,ovf,docker**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**container_formats = ami,ari,aki,bare,ovf,docker**'
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**$ docker search hipache**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ docker search hipache**'
- en: '**Found 3 results matching your query ("hipache")**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**Found 3 results matching your query ("hipache")**'
- en: '**NAME                             DESCRIPTION**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**NAME                             DESCRIPTION**'
- en: '**samalba/hipache                  https://github.com/dotcloud/hipache**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**samalba/hipache                  https://github.com/dotcloud/hipache**'
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**$ docker pull samalba/hipache**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ docker pull samalba/hipache**'
- en: '**$ docker tag samalba/hipache localhost:5042/hipache**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ docker tag samalba/hipache localhost:5042/hipache**'
- en: '**$ docker push localhost:5042/hipache**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ docker push localhost:5042/hipache**'
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**[localhost:5042/hipache] (len: 1)**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**[localhost:5042/hipache] (len: 1)**'
- en: '**Sending image list**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sending image list**'
- en: '**Pushing repository localhost:5042/hipache (1 tags)**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pushing repository localhost:5042/hipache (1 tags)**'
- en: '**Push 100% complete**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**Push 100% complete**'
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**$ glance image-list**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ glance image-list**'
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**$ nova boot --image "docker-busybox:latest" --flavor m1.tiny test**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ nova boot --image "docker-busybox:latest" --flavor m1.tiny test**'
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**$ nova list**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ nova list**'
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**$ docker ps**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ docker ps**'
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**$ git clone https://git@github.com/dotcloud/docker**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ git clone https://git@github.com/dotcloud/docker**'
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**$ cd docker**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ cd docker**'
- en: '**$ sudo make build**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo make build**'
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**$ sudo make binary**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo make binary**'
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**$ sudo make test**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo make test**'
- en: '[PRE36]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**$ sudo service docker stop**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo service docker stop**'
- en: '**$ alias wd=''which docker''**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ alias wd=''which docker''**'
- en: '**$ sudo cp $(wd) $(wd)_**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo cp $(wd) $(wd)_**'
- en: '**$ sudo cp $(pwd)/bundles/<version>-dev/binary/docker-<version>-dev $(wd)**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo cp $(pwd)/bundles/<version>-dev/binary/docker-<version>-dev $(wd)**'
- en: '**$ sudo service docker start**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ sudo service docker start**'
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**$ docker run -i -t ubuntu echo Hello World!**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ docker run -i -t ubuntu echo Hello World!**'
- en: '[PRE38]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Unable to find image ''ubuntu'' locally**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 无法找到本地镜像'ubuntu'
- en: '**Pulling repository ubuntu**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取存储库ubuntu
- en: '**e54ca5efa2e9: Download complete**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: e54ca5efa2e9：下载完成
- en: '**511136ea3c5a: Download complete**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 511136ea3c5a：下载完成
- en: '**d7ac5e4f1812: Download complete**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: d7ac5e4f1812：下载完成
- en: '**2f4b4d6a4a06: Download complete**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 2f4b4d6a4a06：下载完成
- en: '**83ff768040a0: Download complete**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 83ff768040a0：下载完成
- en: '**6c37f792ddac: Download complete**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 6c37f792ddac：下载完成
- en: '**Hello World!**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，世界！
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**$ sudo groupadd docker # Adds the docker group**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '$ sudo groupadd docker # 添加docker组'
- en: '**$ sudo gpasswd -a $(whoami) docker # Adds the current user to the group**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '$ sudo gpasswd -a $(whoami) docker # 将当前用户添加到组中'
- en: '**$ sudo service docker restart**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo service docker restart
- en: '[PRE40]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**$ sudo vim /etc/default/ufw**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo vim /etc/default/ufw
- en: '**# Change:**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '# 更改：'
- en: '**# DEFAULT_FORWARD_POLICY="DROP"**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '# DEFAULT_FORWARD_POLICY="DROP"'
- en: '**# to**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '# 到'
- en: '**DEFAULT_FORWARD_POLICY="ACCEPT"**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: DEFAULT_FORWARD_POLICY="ACCEPT"
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**$ sudo ufw reload**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo ufw reload
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**$ sudo ufw allow 2375/tcp**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: $ sudo ufw allow 2375/tcp
- en: '```'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载示例代码文件，用于您购买的所有Packt
    Publishing图书。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便文件直接通过电子邮件发送给您
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope this introductory chapter got you hooked to Docker. The upcoming chapters
    will take you into the Docker world and try to dazzle you with its awesomeness.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个介绍性的章节让你着迷于Docker。接下来的章节将带你进入Docker的世界，并试图用它的神奇之处来迷住你。
- en: In this chapter, you learned some history and some basics on Docker and how
    it works. We saw how it is different from and advantageous over VM.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了一些关于Docker的历史和基础知识，以及它的工作原理。我们看到了它与虚拟机的不同之处以及优势。
- en: Then we proceeded to install Docker on our development setup, be it Ubuntu,
    Mac, or Windows. Then we saw how to replace OpenStack's hypervisor with Docker.
    Later, we built Docker from source, within Docker! Talk about eating your own
    dog food!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续在我们的开发环境中安装Docker，无论是Ubuntu、Mac还是Windows。然后我们看到如何用Docker替换OpenStack的hypervisor。后来，我们在Docker中构建了Docker源代码！说到吃自己的狗粮！
- en: Finally, we downloaded our first image and ran our first container. Now you
    can pat your self on the back and proceed to the next chapter, where we will cover
    the primary Docker commands in depth and see how we can create our own images.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们下载了我们的第一个镜像并运行了我们的第一个容器。现在你可以拍拍自己的背，继续下一章，在那里我们将深入介绍主要的Docker命令，并看看我们如何创建自己的镜像。
