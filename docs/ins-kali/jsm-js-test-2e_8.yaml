- en: Chapter 8. Build Automation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。构建自动化
- en: We saw how to create an application from the ground up using tests with Jasmine.
    However, as the application grows and the number of files starts to increase,
    managing the dependencies between them can become a little difficult.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到如何使用Jasmine从头开始创建应用程序。然而，随着应用程序的增长和文件数量的增加，管理它们之间的依赖关系可能会变得有点困难。
- en: 'For instance, we have a dependency between the Investment and Stock models,
    and they must be loaded in a proper order to work. So, we do what we can; we order
    the loading of the scripts so that Stock is available once Investment is loaded.
    Here''s how we do it:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们在Investment和Stock模型之间有一个依赖关系，它们必须按正确的顺序加载才能工作。因此，我们尽力而为；我们按照脚本的加载顺序进行排序，以便在加载Investment后Stock可用。下面是我们的做法：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: However, that can soon become cumbersome and unmanageable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这很快就会变得繁琐和难以管理。
- en: Another problem is the number of requests the application uses to load all of
    its files; it can get up to hundreds once the application starts to grow.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是应用程序用于加载所有文件的请求数量；一旦应用程序开始增长，这个数量可能会增加到数百个。
- en: So, we have a paradox here; although it is good to break it up into small modules
    for code maintainability, it is bad for the client performance, where a single
    file is much more desirable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在这里有一个悖论；尽管将其分解为小模块有利于代码的可维护性，但对于客户端性能来说却是不利的，单个文件更加可取。
- en: 'A perfect world would be to match the following two requirements at the same
    time:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一时间满足以下两个要求将是完美的：
- en: In development, we have a bunch of small files containing different modules
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发中，我们有一堆包含不同模块的小文件
- en: In production, we have a single file with the content of all those modules
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产中，我们有一个包含所有这些模块内容的单个文件
- en: Clearly, what we need is some sort of build process. There are many different
    ways to achieve these goals with JavaScript, but we are going to focus on **webpack**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们需要一些构建过程。有许多不同的方法可以用JavaScript实现这些目标，但我们将专注于**webpack**。
- en: Module bundler – webpack
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块捆绑器 - webpack
- en: Webpack is a module bundler created by Tobias Koppers to help create big and
    modular frontend JavaScript applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是由Tobias Koppers创建的模块捆绑器，用于帮助创建大型和模块化的前端JavaScript应用程序。
- en: Its main difference from other solutions is its support for any type of module
    system (AMD and CommonJS), languages (CoffeeScript, TypeScript, and JSX) and even
    assets (images and templates) through loaders.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它与其他解决方案的主要区别在于它支持任何类型的模块系统（AMD和CommonJS）、语言（CoffeeScript、TypeScript和JSX）甚至通过加载器支持资产（图像和模板）。
- en: You read it right, even images; if in a React application, everything is a component,
    in a webpack project, everything is a module.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你没看错，甚至包括图片；如果在React应用中，一切都是组件，在webpack项目中，一切都是模块。
- en: It builds a dependency graph of all your assets, serving them in a development
    environment and optimizing them for production.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它构建了所有资产的依赖图，在开发环境中为它们提供服务，并在生产环境中对它们进行优化。
- en: Module definition
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块定义
- en: JavaScript is a language based on the ECMA Script specification that, until
    version 6, still didn't have a standard definition of a module. This lack of formal
    standards led to a number of competing community standards (AMD and CommonJS)
    and implementations (RequireJS and browserify).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种基于ECMA脚本规范的语言，直到第6版，仍没有对模块的标准定义。这种缺乏正式标准导致了许多竞争的社区标准（AMD和CommonJS）和实现（RequireJS和browserify）。
- en: Now, there is a standard to follow, but unfortunately there is no support for
    it in modern browsers, so which style should we use to write our modules?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有一个标准可供遵循，但不幸的是，现代浏览器不支持它，那么我们应该使用哪种样式来编写我们的模块呢？
- en: The good news is that it is possible to use ES6 today through transpilers, which
    gives us a future-proof advantage.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，通过转译器，我们可以今天就使用ES6，这给了我们未来的优势。
- en: A popular transpiler is **Babel** ([http://babeljs.io/](http://babeljs.io/)),
    which we are going to use with webpack through a loader.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个流行的转译器是**Babel**（[http://babeljs.io/](http://babeljs.io/)），我们将通过一个加载器与webpack一起使用它。
- en: 'We''ll see how to use it with webpack in a moment, but first it is important
    to understand what makes an ES6 module. Here is a simple definition without any
    dependency:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何在webpack中使用它，但首先重要的是要理解什么是ES6模块。这是一个简单的定义，没有任何依赖：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s compare it to the way we''ve been declaring modules until now. The next
    example shows how that code would be if written using the conventions presented
    in [Chapter 3](ch03.html "Chapter 3. Testing Frontend Code"), *Testing Frontend
    Code*:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其与我们到目前为止一直声明模块的方式进行比较。下一个示例显示了如果使用[第3章](ch03.html "第3章。测试前端代码")中介绍的约定编写的代码将会是什么样子，*测试前端代码*：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The biggest difference is the lack of an IIFE. An ES6 module, by default, has
    a scope of its own, so it is impossible to pollute the global namespace by accident.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的区别在于缺少IIFE。ES6模块默认具有自己的作用域，因此不可能意外地污染全局命名空间。
- en: 'The second difference is that the module value is no longer being attached
    to the global object, but instead being exported as the default module value:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个区别是模块值不再附加到全局对象上，而是作为默认模块值导出：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Regarding a module''s dependencies, up until now, everything was globally available,
    so we passed the dependencies to the module as parameters to the IIFE, as shown
    here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于模块的依赖关系，到目前为止，一切都是全局可用的，因此我们将依赖项作为参数传递给IIFE模块，如下所示：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: However, as you start using ES6 modules on the project, there will be no more
    global variables. So, how do you get those dependencies into the module?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦在项目中开始使用ES6模块，就不再有全局变量了。那么，如何将这些依赖项引入模块呢？
- en: 'If you remember from before, the ES6 example was exporting the module value
    through the `export default` syntax. So, given a module has a value, all we have
    to do is ask for it as a dependency. Let''s add the jQuery dependency to our ES6
    module:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得之前的内容，ES6示例是通过`export default`语法导出模块值的。因此，给定一个模块有一个值，我们所要做的就是将其作为依赖项请求。让我们将jQuery依赖项添加到我们的ES6模块中：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `$` represents the name of the variable the dependency will be loaded
    into, and `jQuery` is the filename.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`$`代表依赖项将加载到的变量名，`jQuery`是文件名。
- en: It is also possible to export multiple values as the result of a module and
    import these values into different variables, but for the scope of this book,
    default values will suffice.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以导出多个值作为模块的结果，并将这些值导入到不同的变量中，但是在本书的范围内，默认值就足够了。
- en: The ES6 standard introduces a number of different constructs to the JavaScript
    language that are also beyond the scope of this book. For more information, check
    Babel's excellent documentation at [http://babeljs.io/docs/learn-es6/](http://babeljs.io/docs/learn-es6/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ES6标准引入了许多不同的构造到JavaScript语言中，这些内容超出了本书的范围。更多信息，请查看Babel的优秀文档[http://babeljs.io/docs/learn-es6/](http://babeljs.io/docs/learn-es6/)。
- en: Webpack project setup
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webpack项目设置
- en: Webpack is available as an NPM package, and its setup is very simple as it is
    going to be demonstrated in the next sections.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack可以作为一个NPM包使用，它的设置非常简单，将在接下来的章节中进行演示。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is important to understand the difference between NPM and Node.js. NPM is
    both a package manager and a package format, while Node.js is a platform that
    NPM modules usually run.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解NPM和Node.js之间的区别。NPM既是一个包管理器，也是一个包格式，而Node.js是NPM模块通常运行的平台。
- en: Managing dependencies with NPM
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用NPM管理依赖关系
- en: We already got an embryo of a Node.js project, but as we are going to start
    using more dependencies throughout this chapter, we are going to need a formal
    definition of all the NPM packages that the project depends on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一个Node.js项目的雏形，但是在本章中我们将开始使用更多的依赖项，因此我们需要一个正式的定义，列出项目所依赖的所有NPM包。
- en: 'To define the project as an NPM package, and at the same time all of its dependencies,
    we need to create a special file called `package.json` at the root folder of the
    application. It can be easily created through a single command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将项目定义为一个NPM包，同时定义所有的依赖项，我们需要在应用程序的根文件夹中创建一个名为`package.json`的特殊文件。可以通过一个简单的命令轻松创建它：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It will prompt for a number of questions about the project that can all be
    left with their default values. In the end, you should have a file with content
    similar to the following output depending on your folder name:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它将提示一系列关于项目的问题，所有这些问题都可以保持默认值。最后，你应该有一个类似以下输出的文件，具体取决于你的文件夹名称：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The next step is to install all of our dependencies, which, at the moment, is
    only express.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是安装我们所有的依赖项，目前只有express。
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous command will not only install express as described in [Chapter
    4](ch04.html "Chapter 4. Asynchronous Testing – AJAX"), *Asynchronous Testing
    – AJAX*, but will also add it as a dependency to the `package.json` file. On running
    the `npm init` command as done previously, we get the following output showing
    the `dependencies` attribute:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令不仅会安装express，如[第4章](ch04.html "第4章。异步测试 - AJAX")中所述，*异步测试 - AJAX*，还会将其添加为`package.json`文件的依赖项。在之前运行`npm
    init`命令时，我们得到了以下输出，显示了`dependencies`属性：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we understand how to manage the dependencies of our project, we can
    install **webpack** and **Babel** as development dependencies to start bundling
    our modules, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何管理项目的依赖关系，我们可以安装**webpack**和**Babel**作为开发依赖项，以开始打包我们的模块，如下所示：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The final step is to add a script in `package.json` to start the development
    server:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在`package.json`中添加一个脚本来启动开发服务器：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This allows us to start the development server with a simple command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们可以通过一个简单的命令启动开发服务器：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The actual location of the `webpack-dev-server` executable is in the `./node_modules/.bin`
    folder. So, `npm run dev` is the same as:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack-dev-server`可执行文件的实际位置在`./node_modules/.bin`文件夹中。因此，`npm run dev`等同于：'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It works because when you run `npm run <scriptName>`, NPM adds the `./node_modules/.bin`
    folder to the path.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为当你运行`npm run <scriptName>`时，NPM会将`./node_modules/.bin`文件夹添加到路径中。
- en: Webpack configuration
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Webpack配置
- en: 'Next, we need to configure webpack so that it knows what files to bundle. This
    can be achieved by creating a `webpack.config.js` file at the root folder of the
    project. Its content should be:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要配置webpack，让它知道要捆绑哪些文件。可以通过在项目的根文件夹中创建一个名为`webpack.config.js`的文件来实现。它的内容应该是：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are a few key points about this configuration file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个配置文件有一些关键点：
- en: The `context` directive tells webpack to look for modules in `__dirname`, meaning
    the project's root folder.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`指令告诉webpack在`__dirname`中查找模块，意思是项目的根文件夹。'
- en: The `entry` directive specifies the application's entry points. Since we are
    only doing testing at the moment, there is a single entry point named `spec` that
    refers to all of our spec files.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry`指令指定了应用程序的入口点。由于我们目前只是在进行测试，所以只有一个名为`spec`的入口点，它指向我们所有的规范文件。'
- en: The `output.filename` directive is here to inform the filename of each of the
    entry points. The `[name]` pattern will be replaced by an entry point name on
    compilation. So `spec.js` will actually contain all of our spec code.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output.filename`指令用于指定每个入口点的文件名。`[name]`模式将在编译时被入口点名称替换。因此，`spec.js`实际上将包含我们所有的规范代码。'
- en: The `module.loaders` final directive tells webpack how to deal with different
    file types. We are using the `babel-loader` parameter here to add support for
    ES6 modules and the JSX syntax on our source files. The `exclude` directive is
    important so as not to waste compiling any dependency from the `node_modules`
    folder.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module.loaders`最后一条指令告诉webpack如何处理不同的文件类型。我们在这里使用`babel-loader`参数来为我们的源文件添加对ES6模块和JSX语法的支持。`exclude`指令很重要，以免编译`node_modules`文件夹中的任何依赖项。'
- en: With this setup completed, you can start the development server and check what
    the transpiled bundle looks like at `http://localhost:8080/spec.js` (the filename
    defined in the configuration file).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了这个设置后，你可以启动开发服务器，并在`http://localhost:8080/spec.js`上检查转译后的捆绑文件的样子（在配置文件中定义的文件名）。
- en: At this point, the webpack configuration is complete, and we can move to adapt
    the Jasmine runner to run the specs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，webpack配置已经完成，我们可以开始适应Jasmine运行器以运行规范。
- en: The spec runner
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规范运行器
- en: 'As stated previously, we are using webpack to compile and bundle the source
    files, so the Jasmine spec is about to become a lot simpler:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们正在使用webpack来编译和捆绑源文件，因此Jasmine规范将变得简单得多：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are a few takeaways:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些要点：
- en: First, we no longer need the JSX transformer hack explained in the previous
    chapter; the transformation is now done by webpack and the babel-loader. As a
    result, we can use the default Jasmine boot just fine.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们不再需要在前一章中解释的JSX转换器hack；转换现在由webpack和babel-loader完成。因此，我们可以很好地使用默认的Jasmine
    boot。
- en: Second, we've chosen to leave the test runner dependencies as global (Jasmine,
    Mock Ajax, Jasmine JQuery, and the Spec helper). Leaving them global makes things
    a lot simpler for our test runner, and we don't hurt our code as far as modularity
    is concerned.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们选择将测试运行器依赖项保留为全局（Jasmine，Mock Ajax，Jasmine JQuery和Spec helper）。将它们保留为全局对于我们的测试运行器来说会简单得多，并且就模块化而言，我们不会伤害我们的代码。
- en: At this moment, trying to run the tests at `http://localhost:8080/SpecRunner.html`
    should produce a lot of fails due to missing references. That is because we still
    need to convert our specs and sources into ES6 modules.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻，尝试在`http://localhost:8080/SpecRunner.html`上运行测试应该会因缺少引用而产生许多失败。这是因为我们仍然需要将我们的规范和源转换为ES6模块。
- en: Testing a module
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一个模块
- en: 'To be able to run all the tests requires that all the source and spec files
    be converted into ES6 modules. At the specs, it means adding, as dependencies
    all the source modules:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够运行所有测试，需要将所有源文件和规范文件转换为ES6模块。在规范中，这意味着将所有源模块添加为依赖项：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At the source files, it means declaring all the dependencies as well as exporting
    its default value, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在源文件中，这意味着声明所有依赖项并导出其默认值，如下所示：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once all the code is converted, the tests should work upon starting the development
    server and pointing the browser once again to the runner URL.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有代码都转换完成，启动开发服务器并再次将浏览器指向运行器URL后，测试应该可以正常工作。
- en: 'Test runner: Karma'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试运行器：Karma
- en: Remember we said back in the introduction that we could execute Jasmine without
    the need of a browser window? To do so, we are going to use **PhantomJS**, a scriptable
    headless WebKit browser (the same rendering engine that powers the Safari browser)
    and **Karma**, a test runner.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们在介绍中说过，我们可以执行Jasmine而不需要浏览器窗口吗？为此，我们将使用**PhantomJS**，一个可编写脚本的无头WebKit浏览器（驱动Safari浏览器的相同渲染引擎）和**Karma**，一个测试运行器。
- en: 'The setup is very simple; using NPM, we once again install some dependencies:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 设置非常简单；再次使用NPM安装一些依赖项：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The only strange dependency here is the `es5-shim`, which is used to give PhantomJS
    support for some ES5 features that it still is missing, and React requires.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里唯一奇怪的依赖是`es5-shim`，它用于为PhantomJS提供对一些ES5功能的支持，而PhantomJS仍然缺少这些功能，React需要。
- en: 'The next step is creating a configuration file, named `karma.conf.js`, for
    Karma at the project''s'' root folder:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在项目的根文件夹中创建一个名为`karma.conf.js`的配置文件，用于Karma。
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In it, we set up the Jasmine framework and the PhantomJS browser:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，我们设置了Jasmine框架和PhantomJS浏览器：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Fix the browser compatibility issues on PhantomJS by loading `es5-shim`, as
    shown in the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过加载`es5-shim`来修复PhantomJS上的浏览器兼容性问题，如下所示：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Load the test runner dependencies, which were previously global in the `SpecRunner.html`
    file, as shown in the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 加载先前在`SpecRunner.html`文件中全局的测试运行器依赖项，如下所示：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, load all the specs, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，加载所有规范，如下所示：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: By now, you can remove the `SpecRunner.html` file, the spec entry in the `webpack.config.js`
    file, and the `lib/jasmine-2.1.3` folder.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可以删除`SpecRunner.html`文件，`webpack.config.js`文件中的规范条目以及`lib/jasmine-2.1.3`文件夹。
- en: 'Run the tests by invoking Karma, which will print the test results in the console,
    as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用Karma来运行测试，在控制台中打印测试结果，如下所示：
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To make it simpler to run the tests, it is possible to change the `package.json`
    project file and describe its test script:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更简单地运行测试，可以更改`package.json`项目文件并描述其测试脚本：
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can then run the tests by simply invoking the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过简单调用以下命令来运行测试：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Quick feedback loop
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速反馈循环
- en: Automated testing is all about the quick feedback loop, so imagine being able
    to have the tests running in the console and the application refreshing on the
    browser after any file change. Would that be possible? The answer is yes!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试的关键在于快速反馈循环，因此想象一下能够在控制台中运行测试并在任何文件更改后刷新应用程序的浏览器。这可能吗？答案是肯定的！
- en: Watch and run the tests
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观看并运行测试
- en: 'Via a simple parameter while starting Karma, we can achieve testing nirvana,
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在启动Karma时添加一个简单的参数，我们可以实现测试的极乐世界，如下所示：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Try it by yourself; run this command, change a file, and see the tests running
    automatically—like magic.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 自己尝试一下；运行此命令，更改文件，然后查看测试是否自动运行-就像魔术一样。
- en: 'Once again, we don''t want to remember these complicated commands, so let''s
    add another script to the `package.json` file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们不想记住这些复杂的命令，因此让我们向`package.json`文件添加另一个脚本：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can run it through the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下命令运行它：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Watch and update the browser
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观看并更新浏览器
- en: To achieve development nirvana, we are also just a parameter away.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现开发的极乐世界，我们也只差一个参数。
- en: 'While starting the development server, add the following to the `package.json`
    file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动开发服务器时，将以下内容添加到`package.json`文件中：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Once again, try it on your browser; change a file in the text editor and the
    browser should refresh.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在浏览器上尝试一下；更改文本编辑器中的文件，浏览器应该会刷新。
- en: You are also encouraged to update the `package.json` file with these new parameters
    so that running `npm run dev` gets you the goodness of "live reload".
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还鼓励您使用这些新参数更新`package.json`文件，以便运行`npm run dev`可以获得“实时重新加载”的好处。
- en: Optimizing for production
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产进行优化
- en: The final step of our module bundler goal is to generate a minified and ready-for-production
    file.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模块打包目标的最后一步是生成一个经过缩小并准备好生产的文件。
- en: Most of the configuration is complete, missing just a few more steps.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分配置已经完成，只缺少几个步骤。
- en: 'The first step is to set up an entry point for the application, then an index
    file that will start it all, `index.js`, is to be placed inside the `src` folder
    with the contents as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为应用程序设置一个入口点，然后将一个启动所有内容的索引文件`index.js`放在`src`文件夹中，内容如下：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We haven't covered in detail the implementation of this file in the book, so
    be sure to check the attached source files to understand better how it works.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在书中没有详细介绍这个文件的实现，所以一定要检查附加的源文件，以更好地理解它的工作原理。
- en: 'In the webpack configuration file, we need to add both an output path to indicate
    where the bundled files will be placed and the new entry file we just created,
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在webpack配置文件中，我们需要添加一个输出路径来指示捆绑文件将放置在哪里，以及我们刚刚创建的新入口文件，如下所示：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, all that it is left is to create a build task in our `package.json` file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，剩下的就是在我们的`package.json`文件中创建一个构建任务：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Run it and check the built files into the `dist` folder, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它并检查`dist`文件夹中的构建文件，如下所示：
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Static code analysis: JSHint'
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态代码分析：JSHint
- en: As stated in the first chapter, JavaScript is not a compiled language, but running
    the code (as in the case of automated testing) is not the only way to check for
    errors.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 正如第一章所述，JavaScript不是一种编译语言，但运行代码（如自动化测试）并不是检查错误的唯一方法。
- en: A whole class of tools is able to read source files, interpret them, and look
    for common errors or bad practices without needing to actually run the source
    files.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一整类工具能够读取源文件，解释它们，并查找常见错误或不良实践，而无需实际运行源文件。
- en: 'A very popular tool is **JSHint**—a simple binary that can also be installed
    through NPM, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常流行的工具是**JSHint**—一个简单的二进制文件，也可以通过NPM安装，如下所示：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You can see that we are also installing **JSXHint**, another tool to perform
    static analysis of JSX files. It is basically a wrapper around the original JSHint
    while performing the JSX transformations.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们还安装了**JSXHint**，另一个用于执行JSX文件的静态分析的工具。它基本上是原始JSHint的包装器，同时执行JSX转换。
- en: If you remember from the previous chapter, JSXTransformer doesn't change the
    line numbers, so a warning in a given line number on a JavaScript file will be
    in the same line number in the original JSX file.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得上一章，JSXTransformer不会改变行号，所以JavaScript文件中给定行号上的警告将在原始JSX文件中的相同行号上。
- en: 'To execute them is very simple, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 执行它们非常简单，如下所示：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'However, it is also a good idea to have them running whenever we run the tests:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每当我们运行测试时，让它们运行也是一个好主意：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The final step is configuring what errors we want JSHint and JSXHint to catch.
    Once again, we create another configuration file at the root folder of our project,
    this time called `.jshintrc`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是配置我们希望JSHint和JSXHint捕获的错误。再次，在项目的根文件夹中创建另一个配置文件，这次名为`.jshintrc`：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This is a list of option flags either being enabled or disabled, where the
    most important are the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个启用或禁用的选项标志列表，其中最重要的是以下内容：
- en: '`esnext`: This flag tells us we are using the ES6 version'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`esnext`：此标志告诉我们我们正在使用ES6版本'
- en: '`unused`: This flag breaks on any unused declared variable'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unused`：此标志会在任何未使用的声明变量上中断'
- en: '`undef`: This option flag breaks on any variable being used without being declared'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`undef`：此选项标志会在使用未声明的变量时中断'
- en: There is also a list of `globals` variables used by the tests to prevent errors
    due to the `undef` flag.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`globals`变量列表，用于测试，以防止由于`undef`标志而出现错误。
- en: Head over to the JSHint website at [http://jshint.com/docs/options/](http://jshint.com/docs/options/)
    for a complete list of options.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 前往JSHint网站[http://jshint.com/docs/options/](http://jshint.com/docs/options/)查看完整的选项列表。
- en: 'The only missing step is preventing the linter from running in other people''s
    code (Jasmine, React, and so on). This is possible by simply creating a file with
    the folders it should ignore. This file called `.jshintignore` should contain:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一缺少的步骤是防止linter在其他人的代码（Jasmine，React等）中运行。这可以通过简单地创建一个文件来实现，该文件应包含应忽略的文件夹。这个名为`.jshintignore`的文件应包含：
- en: '`node_modules`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules`'
- en: '`lib`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`'
- en: 'To run the static analysis and all the tests is now as simple as this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行静态分析和所有测试就像这样简单：
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Continuous integration – Travis-CI
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成-Travis-CI
- en: 'We have created a great deal of automation around the project, which is great
    for onboarding a new developer on the team; running the test is just two commands
    away:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为项目创建了大量自动化，这对于团队中新开发人员的入职非常有帮助；运行测试只需两个命令：
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: However, that is not the only advantage; we can have the tests running via these
    same two commands while on a continuous integration environment.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这不是唯一的优势；我们可以在持续集成环境中通过这两个命令运行测试。
- en: To demonstrate a possible setup, we are going to use Travis-CI ([https://travis-ci.org](https://travis-ci.org)),
    a free solution for open source projects.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示可能的设置，我们将使用Travis-CI（[https://travis-ci.org](https://travis-ci.org)），这是一个免费的开源项目解决方案。
- en: Before we can start, it is required that you have a GitHub ([https://github.com/](https://github.com/))
    account and that the project is already hosted there. I expect that you are already
    familiar with git ([http://www.git-scm.com/](http://www.git-scm.com/)) and GitHub.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，需要您拥有一个GitHub（[https://github.com/](https://github.com/)）帐户，并且项目已经托管在那里。我希望您已经熟悉git（[http://www.git-scm.com/](http://www.git-scm.com/)）和GitHub。
- en: Once you are ready, we can start the Travis-CI setup.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备好，我们就可以开始Travis-CI的设置。
- en: Adding a project to Travis-CI
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加项目到Travis-CI
- en: Before we can add Travis-CI support to the project, first we need to add the
    project to Travis-CI.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以为项目添加Travis-CI支持之前，首先需要将项目添加到Travis-CI。
- en: Go to the Travis-CI website at [https://travis-ci.org](https://travis-ci.org)
    and click on **Sign in with GitHub** in the top-right corner.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Travis-CI网站[https://travis-ci.org](https://travis-ci.org)，然后点击右上角的**使用GitHub登录**。
- en: 'Enter your GitHub credentials and once you have signed in, it should show you
    the list with all your repositories:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的GitHub凭据，一旦您登录，它应该显示您所有存储库的列表：
- en: If your repository doesn't show up, you can click on the **Sync Now** button
    to make Travis-CI update the list.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的存储库没有显示出来，您可以点击**立即同步**按钮，让Travis-CI更新列表。
- en: Once your repository appears, enable it by clicking on the switch. This will
    set up hooks on your GitHub project, so Travis-CI gets notified on any change
    pushed to the repository.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的存储库出现，点击开关启用它。这将在您的GitHub项目上设置钩子，因此Travis-CI会在对存储库进行任何更改时收到通知。
- en: Project setup
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目设置
- en: Setting up a Travis-CI project couldn't be simpler. Since we have our build
    process and tests all scripted, all we have to do is tell Travis-CI what runtime
    it should use.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Travis-CI项目再简单不过了。因为我们的构建过程和测试都已经脚本化，我们所要做的就是告诉Travis-CI应该使用什么运行时。
- en: Travis-CI knows that Node.js project dependencies are installed through `npm
    install` and that tests are run through `npm test`, so there is no extra step
    to get our tests running.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Travis-CI知道Node.js项目依赖项是通过`npm install`安装的，并且测试是通过`npm test`运行的，因此没有额外的步骤来运行我们的测试。
- en: 'Create a new file at the project root directory called `.travis.yml` and configure
    the language for Travis as Node.js:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根目录创建一个名为`.travis.yml`的新文件，并将Travis的语言配置为Node.js：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: And that is all there is to it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。
- en: The steps taken to use Travis-CI were pretty straightforward, and it should
    be pretty simple to apply these same concepts to other continuous integration
    environments, such as Jenkins ([http://jenkins-ci.org/](http://jenkins-ci.org/)).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Travis-CI的步骤非常简单，将这些概念应用到其他持续集成环境，比如Jenkins（[http://jenkins-ci.org/](http://jenkins-ci.org/)）应该也很简单。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I hope to have showed you the power of automation and how we
    can use scripts to make our life easier. You learned about webpack and how it
    can be used to manage the dependencies between your modules and help you generate
    the production code (packed and minified).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我希望向您展示自动化的力量，以及我们如何使用脚本来使生活更轻松。您了解了webpack以及它如何用于管理模块之间的依赖关系，并帮助您生成生产代码（打包和压缩）。
- en: The power of static code analysis in helping us find bugs even before the code
    runs.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 静态代码分析的力量帮助我们在代码运行之前甚至找到错误。
- en: You have also seen how to run your specs headlessly, and even automatically,
    letting you focus on the code editor all the time.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您还看到了如何在无头模式下甚至自动运行您的规范，让您始终专注于代码编辑器。
- en: Finally, we have seen how simple it is to use a continuous integration environment
    and how we can use this powerful concept to keep our projectsalways tested.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经看到了使用持续集成环境是多么简单，以及我们如何使用这个强大的概念来保持我们的项目始终得到测试。
