["```\n$ docker commit --help\n\nUsage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n\nCreate a new image from a container's changes\n\nOptions:\n -a, --author string    Author (e.g., \"John Hannibal Smith <hannibal@a-team.com>\")\n -c, --change list      Apply Dockerfile instruction to the created image\n --help             Print usage\n -m, --message string   Commit message\n -p, --pause            Pause container during commit (default true)\n```", "```\n$ # Run a new NGINX container and add a new file to it\n$ docker run -d nginx:latest\n2020a3b1c0fdb83c1f70c13c192eae25e78ca8288c441d753d5b42461727fa78\n$ docker exec -it \\\n              2020a3b1 \\\n              /bin/bash -c \"/bin/echo test > /root/testfile\"\n\n$ # Make sure that the file is in /root\n$ docker exec -it \\\n              2020a3b1 \\\n              /bin/ls /root\ntestfile\n\n$ # Check what this container's base image is so that we can see changes\n$ docker inspect 2020a3b1 | grep Image\n \"Image\": \"sha256:b8efb18f159bd948486f18bd8940b56fd2298b438229f5bd2bcf4cedcf037448\",\n \"Image\": \"nginx:latest\",\n\n$ # Commit our changes to a new image called \"new_nginx_image\"\n$ docker commit -a \"Author Name <author@site.com>\" \\\n                -m \"Added a test file\" \\\n                2020a3b1 new_nginx_image\nsha256:fda147bfb46277e55d9edf090c5a4afa76bc4ca348e446ca980795ad4160fc11\n\n$ # Clean up our original container\n$ docker stop 2020a3b1 && docker rm 2020a3b1\n2020a3b1\n2020a3b1\n\n$ # Run this new image that includes the custom file\n$ docker run -d new_nginx_image\n16c5835eef14090e058524c18c9cb55f489976605f3d8c41c505babba660952d\n\n$ # Verify that the file is there\n$ docker exec -it \\\n              16c5835e \\\n              /bin/ls /root\ntestfile\n\n$ # What about the content?\n$ docker exec -it \\\n              16c5835e \\\n              /bin/cat /root/testfile\ntest\n\n$ See what the new container's image is recorded as\n$ docker inspect 16c5835e | grep Image\n \"Image\": \"sha256:fda147bfb46277e55d9edf090c5a4afa76bc4ca348e446ca980795ad4160fc11\",\n \"Image\": \"new_nginx_image\",\n\n$ # Clean up\n$ docker stop 16c5835e && docker rm 16c5835e\n16c5835e\n16c5835e\n```", "```\n$ # Make our registry storage folder\n$ mkdir registry_storage\n\n$ # Start our registry, mounting the data volume in the container\n$ # at the expected location. Use standard port 5000 for it.\n$ docker run -d \\\n -p 5000:5000 \\\n -v $(pwd)/registry_storage:/var/lib/registry \\\n --restart=always \\\n --name registry \\\n registry:2 \n19e4edf1acec031a34f8e902198e6615fda1e12fb1862a35442ac9d92b32a637\n\n$ # Pull a test image into our local Docker storage\n$ docker pull ubuntu:latest\nlatest: Pulling from library/ubuntu\n<snip>\nDigest: sha256:2b9285d3e340ae9d4297f83fed6a9563493945935fc787e98cc32a69f5687641\nStatus: Downloaded newer image for ubuntu:latest\n\n$ # \"Tag our image\" by marking it as something that is linked to our local registry\n$ # we just started\n$ docker tag ubuntu:latest localhost:5000/local-ubuntu-image\n\n$ # Push our ubuntu:latest image into our local registry under \"local-ubuntu-image\" name\n$ docker push localhost:5000/local-ubuntu-image\nThe push refers to a repository [localhost:5000/local-ubuntu-image]\n<snip>\nlatest: digest: sha256:4b56d10000d71c595e1d4230317b0a18b3c0443b54ac65b9dcd3cac9104dfad2 size: 1357\n\n$ # Verify that our image is in the right location in registry container\n$ ls registry_storage/docker/registry/v2/repositories/\nlocal-ubuntu-image\n\n$ # Remove our images from our main Docker storage\n$ docker rmi ubuntu:latest localhost:5000/local-ubuntu-image\nUntagged: ubuntu:latest\nUntagged: localhost:5000/local-ubuntu-image:latest\n<snip>\n\n$ # Verify that our Docker Engine doesn't have either our new image\n$ # nor ubuntu:latest\n$ docker images\nREPOSITORY                TAG                 IMAGE ID            CREATED             SIZE\n\n$ # Pull the image from our registry container to verify that our registry works\n$ docker pull localhost:5000/local-ubuntu-image\nUsing default tag: latest\nlatest: Pulling from local-ubuntu-image\n<snip>\nDigest: sha256:4b56d10000d71c595e1d4230317b0a18b3c0443b54ac65b9dcd3cac9104dfad2\nStatus: Downloaded newer image for localhost:5000/local-ubuntu-image:latest\n\n$ # Great! Verify that we have the image.\n$ docker images\nREPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE\nlocalhost:5000/local-ubuntu-image   latest              8b72bba4485f        23 hours ago        120MB\n```", "```\nparent\n\u2514\u2500 child_option\n \u2514\u2500 some_setting\n```", "```\n$ docker run -d \\\n -p 5000:5000 \\\n -v $(pwd)/registry_storage:/var/lib/registry \\\n             -e REGISTRY_STORAGE=s3 \\\n -e REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR=inmemory \\\n -e REGISTRY_STORAGE_S3_ACCESSKEY=<aws_key_id> \\\n -e REGISTRY_STORAGE_S3_BUCKET=<bucket> \\\n -e REGISTRY_STORAGE_S3_REGION=<s3_region> \\\n -e REGISTRY_STORAGE_S3_SECRETKEY=<aws_key_secret> \\\n --restart=always \\\n --name registry \\\n registry:2\n```", "```\n --name registry\n```", "```\n$ docker info\n<snip>\nStorage Driver: overlay2\n Backing Filesystem: extfs\n Supports d_type: true\n Native Overlay Diff: true\n<snip>\n```", "```\n{\n  \"storage-driver\": \"driver_name\"\n}\n```", "```\nDOCKER_OPTS=\"-s driver_name\"\n```", "```\n$ docker rm $(docker ps -aq)\n86604ed7bb17\n<snip>\n7f7178567aba\n```", "```\n$ docker images --filter \"dangling=true\"\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              873473f192c8        7 days ago          129MB\n<snip>\nregistry            <none>              751f286bc25e        7 weeks ago         33.2MB\n\n$ # Use those image IDs and delete them\n$ docker rmi $(docker images -q --filter \"dangling=true\")\n Deleted: sha256:873473f192c8977716fcf658c1fe0df0429d4faf9c833b7c24ef269cacd140ff\n<snip>\nDeleted: sha256:2aee30e0a82b1a6b6b36b93800633da378832d623e215be8b4140e8705c4101f\n```", "```\n$ docker image prune \nWARNING! This will remove all dangling images.\nAre you sure you want to continue? [y/N] y \nDeleted Images:\nuntagged: ubuntu@sha256:2b9285d3e340ae9d4297f83fed6a9563493945935fc787e98cc32a69f5687641\ndeleted: sha256:8b72bba4485f1004e8378bc6bc42775f8d4fb851c750c6c0329d3770b3a09086\n<snip>\ndeleted: sha256:f4744c6e9f1f2c5e4cfa52bab35e67231a76ede42889ab12f7b04a908f058551\n\nTotal reclaimed space: 188MB\n```", "```\n$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               database_volume\nlocal               local_storage\nlocal               swarm_test_database_volume\n\n$ docker volume prune \nWARNING! This will remove all volumes not used by at least one container.\nAre you sure you want to continue? [y/N] y \nDeleted Volumes:\nlocal_storage\nswarm_test_database_volume\ndatabase_volume\n\nTotal reclaimed space: 630.5MB\n```", "```\n$ docker run <run_params> \\\n             -v /path/on/host:/path/on/container \\\n             <image>...\n```", "```\n$ docker run <run_params> \\\n             --mount source=/path/on/host,target=/path/on/container \\\n             <image>...\n```", "```\n$ # Old-style\n$ docker run <run_params> \\\n             -v /path/on/host:/path/on/container:ro \\\n             <image>...\n\n$ # New-style\n$ docker run <run_params> \\\n             --mount source=/path/on/host,target=/path/on/container,readonly \\\n             <image>...\n```", "```\n$ # Create our volume\n$ docker volume create mongodb_data\nmongodb_data\n\n$ docker volume inspect mongodb_data\n[\n {\n \"Driver\": \"local\",\n \"Labels\": {},\n \"Mountpoint\": \"/var/lib/docker/volumes/mongodb_data/_data\",\n \"Name\": \"mongodb_data\",\n \"Options\": {},\n \"Scope\": \"local\"\n }\n]\n\n$ # We can start our container now\n$ # XXX: For non-bind-mounts, the new \"--mount\" option\n$ #      works fine so we will use it here\n$ docker run -d \\\n             --mount source=mongodb_data,target=/data/db \\\n             mongo:latest\n888a8402d809174d25ac14ba77445c17ab5ed371483c1f38c918a22f3478f25a\n\n$ # Did it work?\n$ docker exec -it 888a8402 ls -la /data/db\ntotal 200\ndrwxr-xr-x 4 mongodb mongodb  4096 Sep 16 14:10 .\ndrwxr-xr-x 4 root    root     4096 Sep 13 21:18 ..\n-rw-r--r-- 1 mongodb mongodb    49 Sep 16 14:08 WiredTiger\n<snip>\n-rw-r--r-- 1 mongodb mongodb    95 Sep 16 14:08 storage.bson\n\n$ # Stop the container\n$ docker stop 888a8402 && docker rm 888a8402\n888a8402\n888a8402\n\n$ # What does our host's FS have in the\n$ # volume storage? (path used is from docker inspect output)\n$ sudo ls -la /var/lib/docker/volumes/mongodb_data/_data\ntotal 72\ndrwxr-xr-x 4  999 docker 4096 Sep 16 09:08 .\ndrwxr-xr-x 3 root root   4096 Sep 16 09:03 ..\n-rw-r--r-- 1  999 docker 4096 Sep 16 09:08 collection-0-6180071043564974707.wt\n<snip>\n-rw-r--r-- 1  999 docker 4096 Sep 16 09:08 WiredTiger.wt\n\n$ # Remove the new volume\n$ docker volume rm mongodb_data\nmongodb_data\n```", "```\n$ # Verify that we don't have any volumes\n$ docker volume ls\nDRIVER              VOLUME NAME\n\n$ # Run our MongoDB without creating the volume beforehand\n$ docker run -d \\\n             --mount source=mongodb_data,target=/data/db \\\n             mongo:latest\nf73a90585d972407fc21eb841d657e5795d45adc22d7ad27a75f7d5b0bf86f69\n\n$ # Stop and remove our container\n$ docker stop f73a9058 && docker rm f73a9058\nf73a9058\nf73a9058\n\n$ # Check our volumes\n$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               4182af67f0d2445e8e2289a4c427d0725335b732522989087579677cf937eb53\nlocal               mongodb_data\n\n$ # Remove our new volumes\n$ docker volume rm mongodb_data 4182af67f0d2445e8e2289a4c427d0725335b732522989087579677cf937eb53\nmongodb_data\n4182af67f0d2445e8e2289a4c427d0725335b732522989087579677cf937eb53\n```", "```\n$ # See what volumes Mongo image defines\n$ docker inspect mongo:latest | grep -A 3 Volumes\n<snip>\n            \"Volumes\": {\n                \"/data/configdb\": {},\n                \"/data/db\": {}\n            },\n```", "```\n$ # New-style volume switch (--mount)\n$ docker run --mount source=<volume_name>,target=/dest/path,volume-driver=<name> \\\n             <image>...\n\n$ # Old-style volume switch\n$ docker run -v <volume_name>:/dest/path \\\n             --volume-driver <name> \\\n             <image>...\n```", "```\n$ # Install the plugin\n$ docker plugin install vieux/sshfs \nPlugin \"vieux/sshfs\" is requesting the following privileges:\n - network: [host]\n - mount: [/var/lib/docker/plugins/]\n - mount: []\n - device: [/dev/fuse]\n - capabilities: [CAP_SYS_ADMIN]\nDo you grant the above permissions? [y/N] y\nlatest: Pulling from vieux/sshfs\n2381f72027fc: Download complete \nDigest: sha256:72c8cfd1a6eb02e6db4928e27705f9b141a2a0d7f4257f069ce8bd813784b558\nStatus: Downloaded newer image for vieux/sshfs:latest\nInstalled plugin vieux/sshfs\n\n$ # Sanity check\n$ docker plugin ls\nID                  NAME                 DESCRIPTION               ENABLED\n0d160591d86f        vieux/sshfs:latest   sshFS plugin for Docker   true\n\n$ # Add our password to a file\n$ echo -n '<password>' > password_file\n\n$ # Create a volume backed by sshfs on a remote server with SSH daemon running\n$ docker volume create -d vieux/sshfs \\\n -o sshcmd=user@192.168.56.101/ssh_movable_volume \\\n -o password=$(cat password_file) \\\n ssh_movable_volume\nssh_movable_volume\n\n$ # Sanity check\n$ docker volume ls\nDRIVER               VOLUME NAME\nvieux/sshfs:latest   ssh_movable_volume\n\n$ # Time to test it with a container\n$ docker run -it \\\n --rm \\\n --mount source=ssh_movable_volume,target=/my_volume,volume-driver=vieux/sshfs:latest \\\n ubuntu:latest \\\n /bin/bash\n\nroot@75f4d1d2ab8d:/# # Create a dummy file\nroot@75f4d1d2ab8d:/# echo 'test_content' > /my_volume/test_file\n\nroot@75f4d1d2ab8d:/# exit\nexit\n\n$ # See that the file is hosted on the remote server\n$ ssh user@192.168.56.101\nuser@192.168.56.101's password: \n<snip>\nuser@ubuntu:~$ cat ssh_movable_volume/test_file \ntest_content\n\n$ # Get back to our Docker Engine host\nuser@ubuntu:~$ exit\nlogout\nConnection to 192.168.56.101 closed.\n\n$ # Clean up the volume\n$ docker volume rm ssh_movable_volume\nssh_movable_volume\n```", "```\n$ # Create a folder and a file that we will mount in the container\n$ mkdir /tmp/foo\n$ cd /tmp/foo\n$ touch foofile\n\n$ # Let's see what we have. Take note of owner and group of the file and directory\n$ ls -la\ntotal 0\ndrwxrwxr-x  2 user user   60 Sep  8 20:20 .\ndrwxrwxrwt 56 root root 1200 Sep  8 20:20 ..\n-rw-rw-r--  1 user user    0 Sep  8 20:20 foofile\n\n$ # See what our current UID and GID are\n$ id\nuid=1001(user) gid=1001(user) <snip>\n\n$ # How about we see the actual values that the underlying system uses\n$  ls -na\ntotal 0\ndrwxrwxr-x  2 1001 1001   60 Sep  8 20:20 .\ndrwxrwxrwt 56    0    0 1200 Sep  8 20:20 ..\n-rw-rw-r--  1 1001 1001    0 Sep  8 20:20 foofile\n```", "```\n$ ls -la\ntotal 0\ndrwxrwxr-x  2 user user   60 Sep  8 21:16 .\ndrwxrwxrwt 57 root root 1220 Sep  8 21:16 ..\n-rw-rw-r--  1 user user    0 Sep  8 21:16 foofile \n$ ls -na\ntotal 0\ndrwxrwxr-x  2 1001 1001   60 Sep  8 21:16 .\ndrwxrwxrwt 57    0    0 1220 Sep  8 21:16 ..\n-rw-rw-r--  1 1001 1001    0 Sep  8 21:16 foofile\n\n$ # Start a container with this volume mounted\n$ # Note: We have to use the -v form since at the time of writing this\n$ #       you can't mount a bind mount with absolute path :(\n$ docker run --rm \\\n             -it \\\n             -v $(pwd)/foofile:/tmp/foofile \\\n             ubuntu:latest /bin/bash\n\nroot@d7776ec7b655:/# # What does the container sees as owner/group?\nroot@d7776ec7b655:/# ls -la /tmp\ntotal 8\ndrwxrwxrwt 1 root root 4096 Sep  9 02:17 .\ndrwxr-xr-x 1 root root 4096 Sep  9 02:17 ..\n-rw-rw-r-- 1 1001 1001    0 Sep  9 02:16 foofile \nroot@d7776ec7b655:/# # Our container doesn't know about our users\nroot@d7776ec7b655:/# # so it only shows UID/GID \nroot@d7776ec7b655:/# # Let's change the owner/group to root (UID 0) and set setuid flag\nroot@d7776ec7b655:/# chown 0:0 /tmp/foofile \nroot@d7776ec7b655:/# chmod +x 4777 /tmp/foofile \n\nroot@d7776ec7b655:/# # See what the permissions look like now in container\nroot@d7776ec7b655:/# ls -la /tmp\ntotal 8\ndrwxrwxrwt 1 root root 4096 Sep  9 02:17 .\ndrwxr-xr-x 1 root root 4096 Sep  9 02:17 ..\n-rwsrwxrwx 1 root root    0 Sep  9 02:16 foofile\n\nroot@d7776ec7b655:/# # Exit the container\nroot@d7776ec7b655:/# exit\nexit\n\n$ # What does our unmounted volume looks like?\n$ ls -la\ntotal 0\ndrwxrwxr-x  2 user user   60 Sep  8 21:16 .\ndrwxrwxrwt 57 root root 1220 Sep  8 21:17 ..\n-rwsrwxrwx  1 root root    0 Sep  8 21:16 foofile\n$ # Our host now has a setuid file! Bad news! \n```", "```\nRUN groupadd -r -g 910 mongodb && \\\n useradd -r -u 910 -g 910 mongodb && \\\n mkdir -p /data/db && \\\n chown -R mongodb:mongodb /data/db && \\\n chmod -R 700 /data/db && \\\n apt-get install mongodb-org\n```", "```\n$ mkdir /tmp/some_folder\n$ ls -la /tmp | grep some_folder\ndrwxrwxr-x  2 sg   sg        40 Sep  8 21:56 some_folder\n\n$ # Mount this folder to a container and list the content\n$ docker run -it \\\n             --rm \\\n             -v /tmp/some_folder:/tmp/some_folder \\\n             ubuntu:latest \\\n             ls -la /tmp\ntotal 8\ndrwxrwxrwt 1 root root 4096 Sep  9 02:59 .\ndrwxr-xr-x 1 root root 4096 Sep  9 02:59 ..\ndrwxrwxr-x 2 1000 1000   40 Sep  9 02:56 some_folder\n\n$ # Somewhat expected but we will do this now by overlaying\n$ # an existing folder (/var/log - root owned) in the container\n\n$ # First a sanity chech\n$ docker run -it \\\n             --rm \\\n             ubuntu:latest \\\n             ls -la /var | grep log\ndrwxr-xr-x 4 root root  4096 Jul 10 18:56 log \n$ # Seems ok but now we mount our folder here\n$ docker run -it \\\n             --rm \\\n             -v /tmp/some_folder:/var/log \\\n             ubuntu:latest \\\n             ls -la /var | grep log\ndrwxrwxr-x 2 1000  1000   40 Sep  9 02:56 log\n```", "```\n#!/bin/bash -e\n\n# Change owner of volume to the one we expect\nchown mongodb:mongodb /path/to/volume\n\n# Optionally you can use this recursive version too\n# but in most cases it is a bit heavy-handed\n# chown -R mongodb:mongodb /path/to/volume\n\nsu - <original limited user> -c '<original cmd invocation>'\n```", "```\n<snip>\nCMD [ \"/usr/bin/wrapper.sh\" ]\n```"]