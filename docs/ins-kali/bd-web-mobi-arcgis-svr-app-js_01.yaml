- en: Chapter 1. Introduction to HTML, CSS, and JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。HTML、CSS和JavaScript简介
- en: There are certain fundamental concepts that you need to understand before you
    can get started with developing GIS applications with the ArcGIS API for JavaScript.
    For those of you already familiar with HTML, JavaScript, and CSS, you may wish
    to skip ahead to the next chapter. However, if you're new to any of these concepts,
    read on. We are going to cover these topics at a very basic level, just enough
    to get you started. For a more advanced treatment on any of these subjects, there
    are many learning resources available, including books and online tutorials. You
    can refer to [Appendix](apa.html "Appendix A. Application Design with ArcGIS Templates
    and Dojo"), *Application Design with ArcGIS Templates and Dojo*, for a more comprehensive
    list of these resources.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用ArcGIS API for JavaScript开发GIS应用程序之前，您需要了解某些基本概念。对于那些已经熟悉HTML、JavaScript和CSS的人，您可能希望跳到下一章。但是，如果您对这些概念中的任何一个都不熟悉，请继续阅读。我们将以非常基本的水平来介绍这些主题，仅仅足够让您开始。关于这些主题的更高级的教程资源有很多，包括书籍和在线教程。您可以参考[附录](apa.html
    "附录 A. 使用ArcGIS模板和Dojo设计应用程序")，*使用ArcGIS模板和Dojo设计应用程序*，获取更全面的资源列表。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Basic HTML page concepts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本HTML页面概念
- en: JavaScript fundamentals
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript基础知识
- en: Basic CSS principles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本CSS原则
- en: Basic HTML page concepts
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本HTML页面概念
- en: Before we dive into the details of creating a map and adding layers of information,
    you need to understand the context of where the code will be placed when you're
    developing applications with the ArcGIS API for JavaScript. The code you write
    will be placed inside an HTML page or a JavaScript file. HTML files typically
    have an `.html` or `.htm` file extension and JavaScript files have a `.js` extension.
    Once you have created a basic HTML page, you can go through the steps required
    to create a basic map with the ArcGIS API for JavaScript.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论创建地图和添加信息层的细节之前，您需要了解在使用ArcGIS API for JavaScript开发应用程序时代码将放置的上下文。您编写的代码将放置在HTML页面或JavaScript文件中。HTML文件通常具有`.html`或`.htm`文件扩展名，JavaScript文件具有`.js`扩展名。创建基本HTML页面后，您可以按照使用ArcGIS
    API for JavaScript创建基本地图所需的步骤进行操作。
- en: The core of a web page is an HTML file. Coding this basic file is quite important
    as it forms the basis for the rest of your application. Mistakes that you make
    in the basic HTML coding can result in problems down the line when your JavaScript
    code attempts to access these HTML tags.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 网页的核心是一个HTML文件。编写这个基本文件非常重要，因为它构成了您的应用程序的基础。在基本HTML编码中犯的错误可能会导致问题，当您的JavaScript代码尝试访问这些HTML标签时会出现问题。
- en: 'The following is a code example for a very simple HTML page. This example is
    about as simple as an HTML page can get. It contains only the primary HTML tags
    `<DOCTYPE>`, `<html>`, `<head>`, `<title>`, and `<body>`. Use your favorite text
    or web editor to enter the following code. I use Notepad++ but there are many
    other good editors available. Save this example as `helloworld.html`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个非常简单的HTML页面的代码示例。这个示例是一个HTML页面可以变得多么简单。它只包含了主要的HTML标签`<DOCTYPE>`，`<html>`，`<head>`，`<title>`和`<body>`。使用您喜欢的文本或网络编辑器输入以下代码。我使用Notepad++，但还有许多其他好的编辑器可用。将此示例保存为`helloworld.html`：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are a different types of HTML currently in use. The new HTML5 is getting
    a lot of press and you'll likely see this implementation being used almost exclusively
    for the development of new applications; so, we'll focus on HTML5 throughout the
    book. However, I do want to make you aware that there are other flavors of HTML
    in use, the most common being HTML 4.01 (seen in the preceding code example) and
    XHTML 1.0.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有不同类型的HTML正在使用。新的HTML5受到了很多关注，您可能会看到几乎专门用于开发新应用程序的这种实现；因此，我们将在整本书中专注于HTML5。但是，我想让您知道还有其他正在使用的HTML版本，最常见的是HTML
    4.01（在上面的代码示例中看到）和XHTML 1.0。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接通过电子邮件接收文件。
- en: The HTML DOCTYPE declaration
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML DOCTYPE声明
- en: 'The first line of your HTML page will contain the `DOCTYPE` declaration. This
    is used to tell the browser how the HTML page should be interpreted. We''ll focus
    on HTML5 in this book, so the following example you see uses the HTML5 `DOCTYPE`
    declaration. The two other common `DOCTYPE` declarations are HTML 4.01 Strict
    and XHTML 1.0 Strict:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您的HTML页面的第一行将包含`DOCTYPE`声明。这用于告诉浏览器应如何解释HTML页面。在本书中，我们将专注于HTML5，因此您将看到的以下示例使用HTML5的`DOCTYPE`声明。另外两个常见的`DOCTYPE`声明是HTML
    4.01 Strict和XHTML 1.0 Strict：
- en: 'HTML 5 uses the following code:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 5使用以下代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'HTML 4.01 Strict uses the following code:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 4.01 Strict使用以下代码：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'XHTML 1.0 Strict uses the following code:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XHTML 1.0 Strict使用以下代码：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Primary tags
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要标签
- en: At a minimum, all your web pages will need to contain the `<html>`, `<head>`,
    and `<body>` tags. The `<html>` tag defines the whole HTML document. All other
    tags must be placed inside this tag. Tags that define how the web page will appear
    in the browser are placed inside the `<body>` tag. For instance, your mapping
    applications will contain a `<div>` tag inside the `<body>` tag that is used as
    a container for displaying the map.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，您的所有网页都需要包含`<html>`，`<head>`和`<body>`标签。`<html>`标签定义整个HTML文档。所有其他标签必须放在此标签内。定义网页在浏览器中显示方式的标签放在`<body>`标签内。例如，您的地图应用程序将包含一个`<div>`标签，该标签位于`<body>`标签内，用作显示地图的容器。
- en: Loading the `helloworld.html` page in a browser will produce the content you
    see in the following screenshot. Most of the ArcGIS API for JavaScript code that
    you write will be placed between the `<head></head>` tags and within a `<script>`
    tag or inside a separate JavaScript file. As you gain experience, you will likely
    begin placing your JavaScript code inside one or more JavaScript files and then
    referencing them from the JavaScript section. We'll explore this topic later.
    For now, just concentrate on placing your code inside the `<head>` tags.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中加载`helloworld.html`页面将产生您在下面截图中看到的内容。您编写的大部分ArcGIS API for JavaScript代码将放置在`<head></head>`标签之间，并在`<script>`标签内或单独的JavaScript文件中。随着经验的积累，您可能会开始将JavaScript代码放在一个或多个JavaScript文件中，然后从JavaScript部分引用它们。我们将在后面探讨这个话题。现在，只需专注于将您的代码放在`<head>`标签内。
- en: '![Primary tags](graphics/7965_01_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![主要标签](graphics/7965_01_01.jpg)'
- en: Validating HTML code
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证HTML代码
- en: 'As mentioned earlier, it is very important that your HTML tags be coded correctly.
    This is all well and good you say, but how do I know that my HTML has been coded
    correctly? Well, there are a number of HTML code validators that you can use to
    check your HTML. The W3C HTML validator ([http://validator.w3.org/](http://validator.w3.org/))
    shown in the following screenshot can be used to validate HTML code through URI,
    file upload, or direct input:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，非常重要的是您的HTML标签被正确编码。你可能会说，这都很好，但我怎么知道我的HTML已经被正确编码了呢？嗯，有许多HTML代码验证器可以用来检查您的HTML。W3C
    HTML验证器（[http://validator.w3.org/](http://validator.w3.org/)）如下面的截图所示，可以通过URI、文件上传或直接输入来验证HTML代码：
- en: '![Validating HTML code](graphics/7965_01_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![验证HTML代码](graphics/7965_01_02.jpg)'
- en: 'Assuming that your HTML code successfully validates itself, you will get a
    screen with a message indicating a successful validation as shown in the following
    screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的HTML代码成功验证自身，您将会看到一个屏幕上显示成功验证的消息，如下面的截图所示：
- en: '![Validating HTML code](graphics/7965_01_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![验证HTML代码](graphics/7965_01_03.jpg)'
- en: On the other hand, it will identify any problem with an error message displayed
    in red. Errors are described in detail, which makes it easier to correct problems.
    Often a single error can lead to many other errors, so it is not uncommon to see
    a long list of error items. Don't panic if this is the case. Fixing one error
    often resolves many others.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，它将用红色显示的错误消息来识别任何问题。错误会被详细描述，这样更容易纠正问题。通常一个错误会导致许多其他错误，所以看到一个长长的错误列表并不罕见。如果是这种情况，不要惊慌。修复一个错误通常会解决许多其他错误。
- en: '![Validating HTML code](graphics/7965_01_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![验证HTML代码](graphics/7965_01_04.jpg)'
- en: To correct the errors in the preceding document, you would need to surround
    the text `Hello World` with a paragraph tag similar to `<p>Hello World</p>`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要纠正前面文档中的错误，您需要将文本`Hello World`用类似`<p>Hello World</p>`的段落标签括起来。
- en: JavaScript fundamentals
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript基础知识
- en: As implied by the name, the ArcGIS API for JavaScript requires that you use
    the JavaScript language when developing your application. There are some fundamental
    JavaScript programming concepts that you will need to know before you start building
    your application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所暗示的，ArcGIS API for JavaScript要求您在开发应用程序时使用JavaScript语言。在开始构建应用程序之前，您需要了解一些基本的JavaScript编程概念。
- en: JavaScript is a lightweight scripting language that is embedded in all modern
    web browsers. Although JavaScript can certainly exist outside the web browser
    environment in other applications, it is most commonly known for its integration
    with web applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种轻量级的脚本语言，嵌入在所有现代的Web浏览器中。尽管JavaScript当然可以存在于Web浏览器环境之外的其他应用程序中，但它最常用于与Web应用程序的集成。
- en: All modern web browsers, including Internet Explorer, Firefox, and Chrome, have
    JavaScript embedded. The use of JavaScript in web applications gives us the ability
    to create dynamic applications that do not require round trips to the server to
    fetch data, and thus the applications are more responsive and user-friendly. However,
    JavaScript does have the capability of submitting requests to the server, and
    is a core technology in the **Asynchronous JavaScript and XML** (**AJAX**) stack.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代的Web浏览器，包括Internet Explorer，Firefox和Chrome，都内置了JavaScript。在Web应用程序中使用JavaScript使我们能够创建动态应用程序，而无需往返服务器获取数据，因此应用程序更具响应性和用户友好性。然而，JavaScript确实有能力向服务器提交请求，并且是**异步JavaScript和XML**（**AJAX**）堆栈中的核心技术。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One common misconception regarding JavaScript is that it is a simplified version
    of Java. The two languages are actually unrelated with the exception of the name.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JavaScript的一个常见误解是它是Java的简化版本。这两种语言实际上是无关的，除了名字以外。
- en: Commenting in code
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码中的注释
- en: It is a best practice to always document your JavaScript code through the use
    of comments. At a minimum, these should include the author of the code, the date
    of last revision, and the general purpose of the code. In addition, at various
    points throughout your code, you should include comment sections that define the
    purpose of specific sections of the application. The purpose of this documentation
    is to make it easier for you or any other programmer to quickly get up to speed
    in the event that the code needs to be updated in some way.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 始终通过注释来记录您的JavaScript代码是最佳实践。至少，这些注释应包括代码的作者、最后修订日期和代码的一般目的。此外，在代码的各个部分，您应该包括注释部分，定义应用程序特定部分的目的。这些文档的目的是使您或任何其他程序员在需要以某种方式更新代码时更容易快速上手。
- en: 'Any comments that you include in your code are not executed. They are simply
    ignored by the JavaScript interpreter. Commenting in JavaScript can be done in
    a couple of ways including single line and multiline comments. Single line comments
    start with `//` and any additional characters that you add to the line. The following
    code example shows how single line comments are created:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您在代码中包含的任何注释都不会被执行。JavaScript解释器只是简单地忽略它们。在JavaScript中，可以通过几种方式进行注释，包括单行和多行注释。单行注释以`//`开头，以及您添加到该行的任何其他字符。以下代码示例显示了如何创建单行注释：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Multiline comments in JavaScript start with `/*` and end with `*/`. Any lines
    in between are treated as comments and are not executed. The following code example
    shows an example of multiline comments:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的多行注释以`/*`开头，以`*/`结尾。之间的任何行都被视为注释，不会被执行。以下代码示例显示了多行注释的示例：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Variables
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: The concept of variables is a fundamental concept that you need to understand
    when working with any programming language. Variables are simply names that we
    use to associate with some type of data value. At a lower level, these variables
    are areas of space carved out in a computer's memory that store data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的概念是您在使用任何编程语言时需要了解的基本概念。变量只是我们用来与某种数据值关联的名称。在较低级别上，这些变量是计算机内存中划出的存储数据的空间。
- en: You can think of a variable as a box that has a name and contains some sort
    of data. When we initially create the variable, it is empty until data is assigned.
    Basically, variables give us the ability to store and manipulate data. In the
    following diagram, we create a variable called `ssn`. Initially, this variable
    is empty but is then assigned a value of `450-63-3567`. The data value assigned
    to a variable can be of various types, including numbers, strings, booleans, objects,
    and arrays.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将变量视为具有名称并包含某种数据的盒子。当我们最初创建变量时，它是空的，直到分配数据。基本上，变量使我们能够存储和操作数据。在下图中，我们创建了一个名为`ssn`的变量。最初，此变量为空，但然后被赋予值`450-63-3567`。分配给变量的数据值可以是各种类型，包括数字、字符串、布尔值、对象和数组。
- en: '![Variables](graphics/7965_01_05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![变量](graphics/7965_01_05.jpg)'
- en: 'In JavaScript, variables are declared with the `var` keyword. In general, the
    names that you assign to your variables are completely up to you. However, there
    are certain rules that you need to follow when creating a variable. Variables
    can contain both text and numbers but should never start with a number. Always
    start your variable name with a letter or an underscore. In addition, spaces are
    not allowed within variable names nor are special characters such as percent signs
    and ampersands. Other than that, you are free to create variable names as you
    wish but you should try to assign variable names that describe the data that the
    variable will be assigned to. It is also perfectly legal to declare multiple variables
    with the same `var` keyword as seen in the following code example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，变量使用`var`关键字声明。一般来说，您分配给变量的名称完全取决于您。但是，在创建变量时，有一些规则需要遵循。变量可以包含文本和数字，但不应以数字开头。始终使用字母或下划线开头变量名。此外，变量名中不允许包含空格，也不允许包含特殊字符，如百分号和和号。除此之外，您可以自由创建变量名，但应尽量分配描述变量将被分配的数据的变量名。使用相同的`var`关键字声明多个变量也是完全合法的，如下面的代码示例所示：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also combine variable declaration with data assignment, as seen in
    the following examples:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将变量声明与数据分配结合在一起，如以下示例所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You may have also noticed that each JavaScript statement ends with a semicolon.
    The semicolon indicates the end of a statement in JavaScript and should always
    be included in JavaScript.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到每个JavaScript语句都以分号结束。分号表示JavaScript语句的结束，并且应始终包含在JavaScript中。
- en: JavaScript and case sensitivity
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript和大小写敏感性
- en: 'One very important point that I need to make is that JavaScript is a case-sensitive
    language and you need to be very careful about this because it can introduce some
    difficult-to-track-down bugs in your code. All variables, keywords, functions,
    and identifiers must be typed with a consistent capitalization of the letters.
    This gets even more confusing when you consider that HTML is not case sensitive.
    This tends to be a stumbling block for new JavaScript developers. In the following
    code snippet, I have created three variables, all with the same spelling. But,
    because they do not follow the same capitalization pattern, you end up with three
    different variables:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要强调的一个非常重要的观点是，JavaScript是一种大小写敏感的语言，您需要非常小心，因为这可能会在您的代码中引入一些难以跟踪的错误。所有变量、关键字、函数和标识符都必须以一致的大写字母拼写。当您考虑到HTML不区分大小写时，这会变得更加令人困惑。这往往是新JavaScript开发人员的绊脚石。在下面的代码片段中，我创建了三个变量，拼写相同。但是，由于它们没有遵循相同的大写规则，您最终会得到三个不同的变量：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Variable datatypes
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量数据类型
- en: JavaScript supports various types of data that can be assigned to your variables.
    Unlike other strongly-typed languages such as .NET or C++, JavaScript is a loosely-typed
    language. What this means is that you don't have to specify the type of data that
    will occupy your variable. The JavaScript interpreter does this for you on the
    fly. You can assign strings of text, numbers, boolean true/false values, arrays,
    or objects to your variables.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持各种类型的数据，可以分配给您的变量。与.NET或C++等强类型语言不同，JavaScript是一种弱类型语言。这意味着您不必指定将占用变量的数据类型。JavaScript解释器会在运行时为您执行此操作。您可以将文本字符串、数字、布尔值、数组或对象分配给您的变量。
- en: 'Numbers and strings are pretty straightforward for the most part. Strings are
    simply text enclosed by either a single or double quote. For instance:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 数字和字符串在大多数情况下都很简单。字符串只是由单引号或双引号括起来的文本。例如：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Numbers are not enclosed inside quote marks and can be integers or floating
    point numbers:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 数字不包含在引号内，可以是整数或浮点数：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: One thing I would point out to new programmers is that numeric values can be
    assigned to string variables through the use of single or double quotes that enclose
    the value. This can be confusing at times for some new programmers. For instance,
    a value of 3.14 without single or double quotes is a numeric datatype while a
    value of 3.14 with single or double quotes is assigned a string data type.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我要指出的一件事是，新程序员可能会感到困惑的一点是，可以通过用单引号或双引号括起来的值将数值赋给字符串变量。例如，没有单引号或双引号的值3.14是一个数值数据类型，而带有单引号或双引号的值3.14被分配了一个字符串数据类型。
- en: Other datatypes include booleans that are simply true or false values and arrays
    that are a collection of data values. An array basically serves as a container
    for multiple values. For instance, you could store a list of geographic data layer
    names within an array and access them individually, as required.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 其他数据类型包括布尔值，它们只是真或假的值，以及数组，它们是数据值的集合。数组基本上用作多个值的容器。例如，您可以在数组中存储地理数据图层名称的列表，并根据需要单独访问它们。
- en: 'Arrays allow you to store multiple values in a single variable. For example,
    you might want to store the names of all the layers you want to add to a map.
    Instead of creating individual variables for each layer, you could use an array
    to store all of them in a single variable. You can then reference individual values
    from the array using an index number by looping through them with a *for* loop.
    The following code example shows one way to create an array in JavaScript:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 数组允许您在单个变量中存储多个值。例如，您可能希望存储要添加到地图中的所有图层的名称。您可以使用数组将它们全部存储在一个变量中，而不是为每个图层创建单独的变量。然后，您可以使用*for*循环通过索引号循环访问数组中的单个值。下面的代码示例展示了在JavaScript中创建数组的一种方法：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You could also simplify the creation of this array variable as seen in the
    following code example, where the array has been created as a comma-separated
    list enclosed in brackets:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以简化创建数组变量的过程，就像下面的代码示例中所示，数组已经创建为括号括起来的逗号分隔列表：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can access elements in an array through the use of an index as seen in
    the following code example. Array access is zero based, which means that the first
    item in the array occupies the `0` position and each successive item in the array
    is incremented by one:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用索引来访问数组中的元素，就像下面的代码示例中所示。数组访问是从零开始的，这意味着数组中的第一个项目占据`0`位置，数组中的每个后续项目都增加了一个：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Decision-supporting statements
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决策支持语句
- en: 'An `if/else` statement in JavaScript and other programming languages is a control
    statement that allows decision making in your code. This type of statement performs
    a test at the top of the statement. If the test returns a value of `true`, then
    the statements associated with the `if` block will run. If the test returns a
    value of `false`, then the execution skips to the first `else if` block. This
    pattern will continue until a value of `true` is returned in the test or the execution
    reaches the `else` statement. The following code example shows how this statement
    works:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript和其他编程语言中的`if/else`语句是一种控制语句，允许在代码中进行决策。这种类型的语句在语句的顶部执行测试。如果测试返回`true`，则与`if`块关联的语句将运行。如果测试返回`false`，则执行跳转到第一个`else
    if`块。这种模式将继续，直到测试返回`true`或执行到达`else`语句。下面的代码示例显示了这种语句的工作原理：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Looping statements
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环语句
- en: Looping statements give you the ability to run the same block of code over and
    over again. There are two fundamental looping mechanisms in JavaScript. The *for*
    loop executes a code block a specified number of times and the *while* loop executes
    a code block while a condition is true. Once the condition becomes false, the
    looping mechanism stops.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 循环语句使您能够一遍又一遍地运行相同的代码块。JavaScript中有两种基本的循环机制。*for*循环执行指定次数的代码块，而*while*循环在条件为真时执行代码块。一旦条件变为假，循环机制就会停止。
- en: 'The following code sample shows the syntax of a `for` loop. You''ll note that
    it takes a start value, which will be an integer and a condition statement. You
    can also supply an increment. The code block inside the *for* loop will execute
    the given condition while the value is less than the end value:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码示例显示了`for`循环的语法。您会注意到它需要一个起始值，这将是一个整数和一个条件语句。您还可以提供一个增量。*for*循环内的代码块将在给定条件下执行，而该值小于结束值时：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the following example, the start value is set to `0` and is assigned to
    a variable called `i`. The condition statement is when `i` is less than or equal
    to `10`, and the value of `i` is incremented by `1` for each loop, using the `++`
    operator. Each time we pass through the loop, the value of `i` is printed:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，起始值设置为`0`并分配给一个名为`i`的变量。条件语句是当`i`小于或等于`10`时，`i`的值每次循环都会增加`1`，使用`++`运算符。每次通过循环时，都会打印`i`的值：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The other basic looping mechanism in JavaScript is the *while* loop. This loop
    is used when you want to execute a code block while a condition is true. Once
    the condition is set to false, the execution stops. The *while* loops accept a
    single argument, which is the condition that will be tested. In the following
    example, the code block will be executed while `i` is less than or equal to `10`.
    Initially, `i` is set to a value of `0`. At the end of the code block, you will
    notice that `i` is incremented by one (`i = i + 1`):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的另一种基本循环机制是*while*循环。当您想要在条件为真时执行代码块时，可以使用此循环。一旦条件设置为假，执行就会停止。*while*循环接受一个参数，即将被测试的条件。在下面的例子中，当`i`小于或等于`10`时，代码块将被执行。最初，`i`被设置为`0`的值。在代码块的末尾，您会注意到`i`增加了一个（`i
    = i + 1`）：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Functions
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: Now let's cover the very important topic of functions. Functions are simply
    named blocks of code that are executed when called. The vast majority of the code
    that you write in this book and in your development efforts will occur within
    the functions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来讨论非常重要的函数主题。函数只是在调用时执行的命名代码块。您在本书和开发工作中编写的绝大部分代码都将出现在函数中。
- en: Best practice calls for you to split your code into functions that perform small,
    discrete units of operation. These blocks of code are normally defined in the
    `<head>` section of a web page inside a `<script>` tag, but can also be defined
    in the `<body>` section. However, in most cases, you will want your functions
    defined within the `<head>` section so that you can ensure that they are available
    once the page is loaded.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践要求您将代码分成执行小的、离散的操作单元的函数。这些代码块通常在网页的`<head>`部分内部的`<script>`标记中定义，但也可以在`<body>`部分中定义。然而，在大多数情况下，您会希望将函数定义在`<head>`部分，以便在页面加载后确保它们可用。
- en: To create a function, you need to use the `function` keyword followed by a function
    name that you define, and any variables necessary for the execution of the function
    passed as parameter variables. In the event that you need your function to return
    a value to the calling code, you will need to use the `return` keyword in conjunction
    with the data that you want passed back.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个函数，您需要使用`function`关键字，后面跟着您定义的函数名称，以及作为参数变量传递的执行函数所需的任何变量。如果您的函数需要将一个值返回给调用代码，您将需要使用`return`关键字，与您想要传回的数据一起使用。
- en: 'Functions can also accept parameters that are just variables used to pass information
    into the function. In the following code example, the `prod()` function passes
    two variables: `a` and `b`. This information, in the form of variables, can then
    be used inside the function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 函数还可以接受参数，这些参数只是用于将信息传递到函数中的变量。在下面的代码示例中，`prod()`函数传递了两个变量：`a`和`b`。这些信息以变量的形式可以在函数内部使用：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Objects
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: Now that we've gone through some basic JavaScript concepts, we'll tackle the
    most important concept in this section. In order to effectively program mapping
    applications with the ArcGIS API for JavaScript, you need to have a good fundamental
    understanding of objects. So, this is a critical concept that you need to grasp
    to understand how to develop web-mapping applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了一些基本的JavaScript概念，我们将解决本节中最重要的概念。为了有效地使用ArcGIS API for JavaScript编程地图应用程序，您需要对对象有一个良好的基本理解。因此，这是一个您需要掌握的关键概念，以了解如何开发Web地图应用程序。
- en: The ArcGIS API for JavaScript makes extensive use of objects. We'll cover the
    details of this programming library in detail, but for now we'll hit the high-level
    concepts. Objects are complex structures capable of aggregating multiple data
    values and actions into a single structure. This differs greatly from our primitive
    datatypes, such as numbers, strings, and booleans, which can hold only a single
    value. Objects are much more complex structures.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript广泛使用对象。我们将详细介绍这个编程库的细节，但现在我们将介绍高级概念。对象是复杂的结构，能够将多个数据值和动作聚合到一个结构中。这与我们的原始数据类型（如数字、字符串和布尔值）有很大的不同，后者只能保存一个值。对象是更复杂的结构。
- en: Objects are composed of both data and actions. Data, in the form of properties,
    contains information about an object. For example, with a `Map` object found in
    the ArcGIS API for JavaScript, there are a number of properties, including the
    map extent, graphics associated with a map, the height and width of the map, layer
    IDs associated with the map, and others. These properties contain information
    about the object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对象由数据和动作组成。数据以属性的形式包含有关对象的信息。例如，在ArcGIS API for JavaScript中找到的`Map`对象中有许多属性，包括地图范围、与地图相关的图形、地图的高度和宽度、与地图相关的图层ID等。这些属性包含有关对象的信息。
- en: Objects also have actions that we typically call methods, but we can also group
    constructors and events into this category. Methods are actions that a map can
    perform, such as adding a layer, setting the map extent, or getting the map scale.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对象还有我们通常称为方法的动作，但我们也可以将构造函数和事件分为这个类别。方法是地图可以执行的操作，比如添加图层、设置地图范围或获取地图比例。
- en: 'Constructors are special-purpose functions that are used to create new instances
    of an object. With some objects, it is also possible to pass parameters into the
    constructor to give more control over the object that is created. The following
    code example shows how a constructor is used to create a new instance of a `Map`
    object. You can tell that this method is a constructor because of the use of the
    `new` keyword that I''ve highlighted. The `new` keyword, followed by the name
    of the object and any parameters used to control the `new` object, defines the
    constructor for the object. In this case, we''ve created a new `Map` object and
    stored it in a variable called `map`. Three parameters are passed into the constructor
    to control various aspects of the `Map` object including `basemap`, `center` of
    the map, and the `zoom` scale level:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数是用于创建对象的新实例的特殊用途函数。对于某些对象，还可以将参数传递到构造函数中，以便更好地控制所创建的对象。以下代码示例显示了如何使用构造函数创建`Map`对象的新实例。您可以通过我突出显示的`new`关键字来判断这个方法是一个构造函数。`new`关键字后面跟着对象的名称和用于控制`new`对象的任何参数，定义了对象的构造函数。在这种情况下，我们创建了一个新的`Map`对象，并将其存储在一个名为`map`的变量中。传递了三个参数到构造函数中，以控制`Map`对象的各个方面，包括`basemap`、地图的`center`和`zoom`比例级别：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Events are actions that take place on the object and are triggered by the end
    user or the application. This would include events such as a map click, mouse
    move, or a layer being added to the map.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是在对象上发生的动作，由最终用户或应用程序触发。这包括诸如地图点击、鼠标移动或图层添加到地图等事件。
- en: 'Properties and methods are accessed via a dot notation wherein the object instance
    name is separated from the property or method by a dot. For instance, to access
    the current map extent you would enter `map.extent` in your code. A couple of
    code examples showing how to access properties of an object are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 属性和方法通过点表示法访问，其中对象实例名称与属性或方法之间用点分隔。例如，要访问当前地图范围，您可以在代码中输入`map.extent`。以下是显示如何访问对象属性的一些代码示例：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The same is the case with methods, except that methods have parentheses at
    the end of the method name. Data can be passed into a method through the use of
    parameters. In the first line of the following code, we''re passing a variable
    called `pt` into the `map.centerAt(pt)` method:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 方法也是如此，只是方法名称的末尾有括号。数据可以通过参数传递到方法中。在以下代码的第一行中，我们将一个名为`pt`的变量传递给`map.centerAt(pt)`方法：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Basic CSS principles
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本CSS原则
- en: '**Cascading Style Sheets** (**CSS**) is a language used to describe how HTML
    elements should be displayed on a web page. For instance, CSS is often used to
    define common styling elements for a page or set of pages, such as the font, background
    color, font size, link colors, and many other things related to the visual design
    of a web page. Take a look at the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**层叠样式表**（**CSS**）是一种用于描述HTML元素在网页上应如何显示的语言。例如，CSS通常用于定义页面或一组页面的常见样式元素，如字体、背景颜色、字体大小、链接颜色以及与网页视觉设计相关的许多其他内容。看一下以下代码片段：'
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: CSS syntax
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS语法
- en: 'CSS follows certain rules that define what HTML element to select along with
    defining how that element should be styled. A CSS rule has two main parts: a selector
    and one or more declarations. The selector is typically the HTML element that
    you want to style. In the following diagram, the selector is `p`. A `<p>` element
    in HTML represents a paragraph. The second part of a CSS rule comprises of one
    or more declarations, each of which consists of a property and a value. The property
    represents the style attribute that you want to change. In our example, we are
    setting the `color` property to `red`. In effect, what we have done with this
    CSS rule is define that all the text within our paragraph should be in red.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: CSS遵循一定的规则，定义了要选择哪个HTML元素以及如何对该元素进行样式设置。CSS规则有两个主要部分：选择器和一个或多个声明。选择器通常是您要设置样式的HTML元素。在下图中，选择器是`p`。HTML中的`<p>`元素表示段落。CSS规则的第二部分由一个或多个声明组成，每个声明都包括属性和值。属性表示要更改的样式属性。在我们的示例中，我们将`color`属性设置为`red`。实际上，我们通过这个CSS规则定义了段落中的所有文本应该是红色的。
- en: 'We have used `p {color:red}`, as shown in the following diagram:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`p {color:red}`，如下图所示：
- en: '![CSS syntax](graphics/7965_01_06.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![CSS语法](graphics/7965_01_06.jpg)'
- en: 'You can include more than one declaration in a CSS rule as you see in the following
    example. A declaration is always surrounded by curly brackets and each declaration
    ends with a semicolon. In addition, a colon should be placed between the property
    and the value. In this particular example, two declarations have been made: one
    for the color of the paragraph and another for the text alignment of the paragraph.
    Notice that the declarations are separated by a semicolon:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在CSS规则中包含多个声明，就像在以下示例中所示的那样。声明始终用大括号括起来，每个声明以分号结束。此外，属性和值之间应该放置一个冒号。在这个特定的例子中，已经做出了两个声明：一个是段落的颜色，另一个是段落的文本对齐。请注意，声明之间用分号分隔：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'CSS comments are used to explain your code. You should get into the habit of
    always commenting on your CSS code just as you would in any other programming
    language. Comments are always ignored by the browser. Comments begin with a slash
    followed by an asterisk and end with an asterisk followed by a slash. Everything
    in between is assumed to be a comment and is ignored:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: CSS注释用于解释您的代码。您应该养成像在任何其他编程语言中一样总是对CSS代码进行注释的习惯。注释始终被浏览器忽略。注释以斜杠后跟一个星号开始，并以一个星号后跟一个斜杠结束。之间的所有内容都被视为注释并被忽略。
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In addition to specifying selectors for specific HTML elements, you can also
    use the `id` selector to define styles for any HTML elements with an `id` value
    that matches the `id` selector. An `id` selector is defined in CSS through the
    use of the pound sign (`#`), followed by an `id` value.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为特定HTML元素指定选择器之外，您还可以使用`id`选择器为任何具有与`id`选择器匹配的`id`值的HTML元素定义样式。通过井号(`#`)定义CSS中的`id`选择器，后跟`id`值。
- en: 'For instance, in the following code example, you see three `id` selectors:
    `rightPane`, `leftPane`, and `map`. In ArcGIS API for JavaScript applications,
    you almost always have a map. When you define a `<div>` tag that will serve as
    the container for the map, you define an `id` selector and assign it a value that
    is often the word `map`. In this case, we are using CSS to define several styles
    for our map, including a margin of 5 pixels along with a solid styled border of
    a specific color and a border radius:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在以下代码示例中，您会看到三个`id`选择器：`rightPane`，`leftPane`和`map`。在ArcGIS API for JavaScript应用程序中，您几乎总是有一个地图。当您定义一个将用作地图容器的`<div>`标记时，您定义一个`id`选择器并为其分配一个值，通常是单词`map`。在这种情况下，我们使用CSS来定义地图的几种样式，包括5像素的边距以及特定颜色的实心样式边框和边框半径：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![CSS syntax](graphics/7965_01_07.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![CSS语法](graphics/7965_01_07.jpg)'
- en: 'Unlike `id` selectors that are used to assign styles to a single element, the
    `class` selectors are used to specify styles for a group of elements, all of which
    have the same HTML class attribute. A class selector is defined with a period,
    followed by the class name. You may also specify that only specific HTML elements
    with a particular class should be affected by the style. Examples of both are
    shown in the following code example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与用于为单个元素分配样式的`id`选择器不同，`class`选择器用于指定一组具有相同HTML类属性的元素的样式。类选择器用句点定义，后跟类名。您还可以指定只有具有特定类的特定HTML元素应受样式影响。以下是示例：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Your HTML code would then reference the class selector as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你的HTML代码将引用类选择器如下：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'There are three ways to insert CSS into your application: inline, internal
    stylesheets, and external stylesheets.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以将CSS插入到应用程序中：内联、内部样式表和外部样式表。
- en: Inline styling
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联样式
- en: 'The first method of defining CSS rules for your HTML elements is through the
    use of inline styles. This method is not recommended because it mixes style with
    presentation and is difficult to maintain. It is an option in some cases where
    you need to define a very limited set of CSS rules. To use inline styles, simply
    place the `style` attribute inside the relevant HTML tag:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为HTML元素定义CSS规则的第一种方法是通过使用内联样式。这种方法并不推荐，因为它混合了样式和表示，并且难以维护。在某些情况下，需要定义一组非常有限的CSS规则时，这是一个选项。要使用内联样式，只需在相关的HTML标记内放置`style`属性：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Internal stylesheets
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部样式表
- en: 'An internal stylesheet moves all the CSS rules into a specific web page. Only
    HTML elements within that particular page have access to the rules. All CSS rules
    are defined inside the `<head>` tag and are enclosed inside a `<style>` tag, as
    seen in the following code example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 内部样式表将所有的CSS规则移动到特定的网页中。只有该特定页面内的HTML元素才能访问这些规则。所有的CSS规则都在`<head>`标记内定义，并且被包含在`<style>`标记内，如下面的代码示例所示：
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: External stylesheets
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部样式表
- en: An external stylesheet is simply a text file containing CSS rules and is saved
    with a `.css` file extension. This file is then linked to all web pages that want
    to implement the styles defined within the external stylesheet through the use
    of the HTML `<link>` tag. This is a commonly used method to split the styling
    from the main web page and gives you the ability to change the look of an entire
    website through the use of a single external stylesheet.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 外部样式表只是一个包含CSS规则的文本文件，并且保存为`.css`文件扩展名。然后通过HTML的`<link>`标记将该文件链接到想要实现外部样式表中定义的样式的所有网页。这是一种常用的方法，用于将样式与主网页分禅，并且使你能够通过使用单个外部样式表来改变整个网站的外观。
- en: Now let's put some emphasis on the *cascading* part of cascading stylesheets.
    As you now know, styles can be defined in external stylesheets, internal stylesheets,
    or inline. There is a fourth level that we didn't discuss, which is the browser
    default. You don't have any control over that though. In CSS, an inline style
    has the highest priority, which means that it will override a style defined in
    an internal stylesheet, an external stylesheet, or the browser default. If an
    inline style is not defined, any style rule defined in an internal stylesheet
    would take precedence over styles defined in an external stylesheet. The caveat
    here is that if a link to an external stylesheet is placed after the internal
    stylesheet in HTML `<head>`, the external stylesheet will override the internal
    sheet!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们着重讨论层叠样式表中的“层叠”部分。正如你现在所知道的，样式可以在外部样式表、内部样式表或内联中定义。还有一个我们没有讨论的第四个级别，那就是浏览器默认样式。不过你对此没有任何控制。在CSS中，内联样式具有最高优先级，这意味着它将覆盖在内部样式表、外部样式表或浏览器默认样式中定义的样式。如果没有定义内联样式，那么在内部样式表中定义的任何样式规则将优先于外部样式表中定义的样式。这里的一个警告是，如果在HTML的`<head>`中将外部样式表的链接放在内部样式表之后，外部样式表将覆盖内部样式表！
- en: 'That''s a lot to remember! Just keep in mind that style rules defined further
    down the hierarchy override style rules defined higher in the hierarchy, as shown
    in the following diagram:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是需要记住的很多内容！只需记住，层叠样式表中定义的样式规则会覆盖层次结构中较高位置定义的样式规则，如下图所示：
- en: '![External stylesheets](graphics/7965_01_08.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![外部样式表](graphics/7965_01_08.jpg)'
- en: These are the basic concepts that you need to understand with regard to CSS.
    You can use CSS to define styles for pretty much anything on a web page, including
    backgrounds, text, fonts, links, lists, images, tables, maps, and any other visible
    objects.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是你需要了解的关于CSS的基本概念。你可以使用CSS来定义网页上几乎任何东西的样式，包括背景、文本、字体、链接、列表、图像、表格、地图和任何其他可见对象。
- en: Separating HTML, CSS, and JavaScript
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离HTML、CSS和JavaScript
- en: You may be wondering where all of this code is placed. Should you put all your
    HTML, CSS, and JavaScript code in the same file or split them into separate files?
    For very simple applications and examples, it is not uncommon for all the code
    to be placed into a single file with an extension of `.html` or `.htm`. In this
    case, the CSS and JavaScript code will reside in the `<head>` section of your
    HTML page. However, the preferred way of creating an application using this code
    stack is to separate the presentation from the content and behavior. The user
    interface items for your application should reside in an HTML page that contains
    only tags used to define the content of the application, along with references
    to any CSS (presentation) or JavaScript (behavior) files that are part of the
    application. The end result is a single HTML page and one or more CSS and JavaScript
    files. This would result in a folder structure similar to that shown in the following
    screenshot, where we have a single file called `index.html` and several folders
    that hold CSS, JavaScript, and other resources, such as images. The `css` and
    `js` folders will contain one or more files.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道所有这些代码放在哪里。你应该把所有的HTML、CSS和JavaScript代码放在同一个文件中，还是分成不同的文件？对于非常简单的应用程序和示例，将所有代码放在一个扩展名为`.html`或`.htm`的单个文件中并不罕见。在这种情况下，CSS和JavaScript代码将驻留在HTML页面的`<head>`部分。然而，使用这些代码堆栈创建应用程序的首选方法是将表示与内容和行为分开。应用程序的用户界面项目应该驻留在一个HTML页面中，该页面只包含用于定义应用程序内容的标签，以及应用程序的任何CSS（表示）或JavaScript（行为）文件的引用。最终结果是一个单独的HTML页面和一个或多个CSS和JavaScript文件。这将导致类似于以下截图所示的文件夹结构，其中我们有一个名为`index.html`的单个文件和几个包含CSS、JavaScript和其他资源（如图像）的文件夹。`css`和`js`文件夹将包含一个或多个文件。
- en: '![Separating HTML, CSS, and JavaScript](graphics/7965_01_0.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![分离HTML、CSS和JavaScript](graphics/7965_01_0.jpg)'
- en: 'CSS files can be linked into an HTML page with the `<link>` tag. In the following
    code sample, you will see a code example that shows you how to use the `<link>`
    tag to import a CSS file. Links to CSS files should be defined in the `<head>`
    tag of your HTML page:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: CSS文件可以通过`<link>`标签链接到HTML页面中。在下面的代码示例中，您将看到一个代码示例，展示了如何使用`<link>`标签导入CSS文件。CSS文件的链接应该在HTML页面的`<head>`标签中定义：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: JavaScript files are imported into your HTML page with the `<script>` tag as
    seen in the following code example. These `<script>` tags can be placed in the
    `<head>` tag of your web page, as seen in reference to the ArcGIS API for the
    following JavaScript code, or near the end of the page just before the ending
    `</body>` tag, as has been done with the `creategeometries.js` file. It is often
    recommended that you import your JavaScript files close to the ending `</body>`
    tag because when browsers download JavaScript files, they don't download anything
    else until the downloading is done. This can make it look like the application
    is loading slowly.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript文件可以通过`<script>`标签导入到您的HTML页面中，就像下面的代码示例中所示。这些`<script>`标签可以放在您网页的`<head>`标签中，就像下面的JavaScript代码中引用ArcGIS
    API一样，或者可以放在页面末尾的`</body>`标签之前，就像`creategeometries.js`文件中所做的那样。通常建议将JavaScript文件导入到接近`</body>`标签的位置，因为当浏览器下载JavaScript文件时，在下载完成之前不会下载其他任何内容。这可能会导致应用程序加载缓慢的情况。
- en: 'Adding a `<script>` tag in the header is recommended for JavaScript libraries,
    such as Dojo, which need to be parsed before they interact with HTML elements
    in the body. That''s why the ArcGIS API for JavaScript is loaded in the header:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在头部添加`<script>`标签是推荐的做法，用于JavaScript库，比如需要在与body中的HTML元素交互之前解析的Dojo。这就是为什么ArcGIS
    API for JavaScript在头部加载的原因：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Splitting your code into several files allows for a clean separation of your
    code and it should be much easier to maintain.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的代码拆分成多个文件可以清晰地分离您的代码，而且维护起来应该更容易。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Before we can begin a detailed discussion of the ArcGIS API for JavaScript,
    you need to have an understanding of some of the fundamental HTML, CSS, and JavaScript
    concepts. This chapter has provided just that, but you will need to continue learning
    many additional concepts related to these topics. Right now, you know just enough
    to be dangerous.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始详细讨论ArcGIS API for JavaScript之前，您需要了解一些基本的HTML、CSS和JavaScript概念。本章已经提供了这些内容，但您需要继续学习与这些主题相关的许多其他概念。现在，您已经知道足够多，可以开始尝试了。
- en: How your application looks is defined through the HTML and CSS code that you
    develop while the functionality provided by your application is controlled through
    JavaScript. These are very different skill sets and many people are good at one
    but not necessarily the other. Most application developers will focus on developing
    the functionality of the application through JavaScript and will leave HTML and
    CSS to the designers! Nevertheless, it is important that you have a good understanding
    of at least the basic concepts of all these topics. In the next chapter, we'll
    dive into the ArcGIS API for JavaScript and begin learning how to create the `Map`
    object and how to add dynamic and tiled map service layers to the map.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您开发的HTML和CSS代码定义了应用程序的外观，而应用程序提供的功能是通过JavaScript控制的。这些是非常不同的技能集，许多人擅长其中一种，但不一定擅长另一种。大多数应用程序开发人员将专注于通过JavaScript开发应用程序的功能，并将HTML和CSS留给设计师！然而，重要的是您至少对所有这些主题的基本概念有很好的理解。在下一章中，我们将深入学习ArcGIS
    API for JavaScript，并开始学习如何创建`Map`对象以及如何向地图添加动态和瓦片地图服务图层。
