- en: Chapter 2. The NumPy ndarray Object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：NumPy `ndarray`对象
- en: Array-oriented computing is the very heart of computational sciences. It is
    something that most Python programmers are not accustomed to. Though list or dictionary
    comprehension is relative to an array and sometimes used similarly to an array,
    there is a huge difference between a list/dictionary and an array in terms of
    performance and manipulation. This chapter introduces a basic array object in
    NumPy. It covers the information that can be gleaned from the intrinsic characteristics
    of NumPy arrays without performing any external operations on the array.
  prefs: []
  type: TYPE_NORMAL
  zh: 面向数组的计算是计算科学的核心。 这是大多数 Python 程序员都不习惯的。 尽管列表或字典的理解是相对于数组的，有时与数组的用法类似，但是在性能和​​操作上，列表/字典和数组之间还是存在巨大差异。
    本章介绍了 NumPy 中的基本数组对象。 它涵盖了可以从 NumPy 数组的固有特性中收集的信息，而无需对该数组执行任何外部操作。
- en: 'The topics that will be covered in the chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及的主题如下：
- en: '**numpy.ndarray** and how to use it-basic array-oriented computing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.ndarray`以及如何使用它-面向基本数组的计算'
- en: Performance of numpy.ndarray-memory access, storage, and retrieval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.ndarray`内存访问，存储和检索的性能'
- en: Indexing, slicing, views, and copies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引，切片，视图和副本
- en: Array data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组数据类型
- en: Getting started with numpy.ndarray
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`numpy.ndarray`入门'
- en: 'In this section, we will go over some of the internals of numpy ndarray, including
    its structure and behavior. Let''s start. Type in the following statements in
    the IPython prompt:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 NumPy `ndarray`的一些内部结构，包括其结构和行为。 开始吧。 在 IPython 提示符中输入以下语句：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'NumPy shares the names of its functions with functions in other modules, such
    as the math module in the Python standard library. Using imports like the following
    there is not recommended:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 与其他模块（例如 Python 标准库中的`math`模块）中的函数共享其函数名称。 不建议使用如下所示的导入：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As it may overwrite many functions that are already in the global namespace,
    which is not recommended. This may lead to unexpected behavior from your code
    and may introduce very subtle bugs in it . This may also create conflicts in the
    code itself, (example numPy has `any`  and will cause conflicts with the system
    `any`  keyword) and may cause confusion when reviewing or debugging a piece of
    code. Therefore, it is important and recommended to always follow the import numPy
    with explicit name such as `np` convention used in the first line: , — `import
    numpy as np` , which is the standard convention used for the purpose of for importing,
    as it helps the a developer figure out where a function comes from. This can prevent
    a lot of confusion in large programs..'
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它可能会覆盖全局名称空间中已经存在的许多函数，所以不建议这样做。 这可能会导致您的代码出现意外行为，并可能在其中引入非常细小的错误。 这也可能会在代码本身中造成冲突（例如
    NumPy 具有`any`并会与系统`any`关键字发生冲突），并可能在检查或调试一段代码时引起混乱。 因此，重要的是建议始终使用带有显式名称的导入 NumPy，例如第一行中使用的`np`约定：`import
    numpy as np`，这是用于导入目的的标准约定，因为它有助于开发人员找出函数的来源。 这可以避免大型程序中的许多混乱。
- en: 'NumPy arrays can be created in a number of ways, as we shall see. One of the
    simplest ways of creating arrays is using the `array` function. Notice that we
    passed a list of lists to the function, and the constituent lists were equal in
    length. Each constituent list became a row in the array, and the elements of these
    lists populated the columns of the resulting array. The `array` function can be
    called on lists or even nested lists. Since the level of nesting in our input
    here was two, the resulting array is two-dimensional. This means that the array
    can be indexed with a set of two integers. The simplest way of calculating the
    dimensionality of an array is by checking the `ndim` attribute of the array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们将看到的，可以用多种方式创建 NumPy 数组。 创建数组的最简单方法之一是使用`array`函数。 注意，我们向函数传递了一个列表列表，组成列表的长度相等。
    每个组成列表成为数组中的一行，并且这些列表的元素填充了结果数组的列。 `array`函数可以在列表甚至嵌套列表上调用。 由于此处输入的嵌套级别是 2，因此生成的数组是二维的。
    这意味着可以使用两个整数集对数组进行索引。 计算数组维数的最简单方法是检查数组的`ndim`属性：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This can also be accomplished in a different (and indirect) way-by checking
    the `shape` attribute of the array. The dimensionality of the array will be equal
    to how many numbers you see in the `shape` attribute. (Note that this, however,
    is not the purpose of the `shape` attribute.):'
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以通过检查数组的`shape`属性以其他（间接）方式来实现。 数组的维数将等于您在`shape`属性中看到的数字。 （但是请注意，这并不是`shape`属性的目的。）：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This means that the array has two rows and three columns. It is important to
    note that, unlike MATLAB and R, the indexing of NumPy arrays is zero-based; that
    is, the first element of a NumPy array is indexed by a zero and the last element
    is indexed by the integer n-1, where n is the length of the array along the respective
    dimension. Thus, in the case of the array we just created, the element in the
    top-left corner of the array can be accessed using a pair of zeros, and the one
    in the bottom-right corner can be accessed with indices ( *1* , *2* ):'
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着该数组具有两行三列。 重要的是要注意，与 MATLAB 和 R 不同，NumPy 数组的索引是从零开始的。 也就是说，NumPy 数组的第一个元素索引为零，而最后一个元素索引为整数`n-1`，其中`n`是数组沿相应维度的长度。
    因此，对于我们刚刚创建的数组，可以使用一对零来访问数组左上角的元素，并且可以使用索引来访问右下角的元素（`1`，`2`）：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The ndarray object has a lot of useful methods. To get a list of the methods
    that can be called on an ndarray object, type the `array` variable (in the preceding
    example, it's `x` ) in the IPython prompt and press **Tab** . This should list
    all the methods available for the object. As an exercise, try playing around with
    a few of them.
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray`对象具有许多有用的方法。 要获取可以在`ndarray`对象上调用的方法的列表，请在 IPython 提示符下键入`array`变量（在前面的示例中为`x`），然后按`TAB`。
    这应该列出该对象可用的所有方法。 作为练习，尝试与其中一些玩耍。'
- en: Array indexing and slicing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组索引和切片
- en: NumPy provides powerful indexing capabilities for arrays. Indexing capabilities
    in NumPy became so popular that many of them were added back to Python.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 为数组提供了强大的索引功能。 NumPy 中的索引功能变得如此流行，以至于其中许多功能又重新添加到 Python 中。
- en: 'Indexing NumPy arrays, in many ways, is very similar to indexing lists or tuples.
    There are some differences, which will become apparent as we proceed. To start
    with, let''s create an array that has 100 x 100 dimensions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，为 NumPy 数组建立索引与为列表或元组建立索引非常相似。 存在一些差异，随着我们的进行，这些差异将变得显而易见。 首先，让我们创建一个尺寸为`100
    x 100`的数组：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Simple integer indexing works by typing indices within a pair of square brackets
    and placing this next to the array variable. This is a widely used Python construct.
    Any object that has a `__getitem__` method will respond to such indexing. Thus,
    to access the element in the 42^(nd) row and 87^(th) column, just type this:'
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的整数索引的工作方式是在一对方括号内键入索引，然后将其放置在数组变量旁边。 这是一种广泛使用的 Python 构造。 具有`__getitem__`方法的任何对象都将响应此类索引。
    因此，要访问第 42 行和第 87 列中的元素，只需键入：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Like lists and other Python sequences, the use of a colon to index a range of
    values is also supported. The following statement will print the `k` ^(th) row
    of the `x` matrix.
  prefs: []
  type: TYPE_NORMAL
  zh: 像列表和其他 Python 序列一样，也支持使用冒号为一系列值建立索引。 以下语句将打印`x`矩阵的第`k`行。
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The colon can be thought of as an *all elements* character. So, the preceding
    statement actually means Print all the characters for the `k` ^(th) row. Similarly,
    a column can be accessed with `x[:,k]` . Reversing an array is also similar to
    reversing a list, such as `x[::-1]` .
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号可以被认为是*所有元素*的字符。 因此，前面的语句实际上意味着打印第`k`行的所有字符。 同样，可以使用`x[:,k]`访问列。 反转数组也类似于反转列表，例如`x[::-1]`。
- en: The indexed portion of an array is also called a *slice* of an array, which
    creates a copy of a port or the whole array (we will cover copies and views in
    a later section). In the context of an array, the words "slicing" and "indexing"
    can generally be used interchangeably.
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的索引部分也称为数组的*切片*，它创建端口或整个数组的副本（我们将在后面的部分中介绍副本和视图） 。 在数组的上下文中，单词“切片”和“索引”通常可以互换使用。
- en: 'A very concise overview of different slicing and indexing techniques is shown
    in the following image:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了不同切片和索引技术的非常简洁的概述：
- en: '![Array indexing and slicing](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![数组索引和切片](img/00004.jpeg)'
- en: Memory layout of ndarray
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ndarray`的内存布局'
- en: 'A particularly interesting attribute of the ndarray object is `flags` . Type
    the following code:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray`对象的一个​​特别有趣的属性是`flags`。 输入以下代码：'
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It should produce something like this:'
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该产生如下内容：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `flags` attribute holds information about the memory layout of the array.
    The `C_CONTIGUOUS` field in the output indicates whether the array was a C-style
    array. This means that the indexing of this array is done like a C array. This
    is also called row-major indexing in the case of 2D arrays. This means that, when
    moving through the array, the row index is incremented first, and then the column
    index is incremented. In the case of a multidimensional C-style array, the last
    dimension is incremented first, followed by the last but one, and so on.
  prefs: []
  type: TYPE_NORMAL
  zh: '`flags`属性保存有关数组的内存布局的信息。 输出中的`C_CONTIGUOUS`字段指示该数组是否为 C 样式数组。 这意味着该数组的索引就像
    C 数组一样完成。 在 2D 数组的情况下，这也称为行优先索引。 这意味着，当在数组中移动时，行索引将首先增加，然后列索引将增加。 在多维 C 样式数组的情况下，最后一个维度首先递增，然后是最后一个，但最后一个递增，依此类推。'
- en: Similarly, the `F_CONTIGUOUS` attribute indicates whether the array is a Fortran-style
    array. Such an array is said to have column-major indexing (R, Julia, and MATLAB
    use column-major arrays). This means that, when moving through the array, the
    first index (along the column) is incremented first.
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`F_CONTIGUOUS`属性指示该数组是否为 Fortran 样式的数组。 据说这样的数组具有列主索引（R，Julia 和 MATLAB 使用列主数组）。
    这意味着，当在数组中移动时，第一个索引（沿着列）首先增加。
- en: Knowing the difference between indexing styles is important, especially for
    large arrays, because operations on arrays can be significantly sped up if the
    indexing is applied in the right way. Let's demonstrate this with an exercise.
  prefs: []
  type: TYPE_NORMAL
  zh: 知道索引样式之间的差异很重要，尤其是对于大型数组，因为如果以正确的方式应用索引，则可以大大加快对数组的操作。 让我们通过练习来演示这一点。
- en: 'Declare an array, as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 声明一个数组，如下所示：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will produce a variable called `c_array` , which is a 2D array with a
    hundred million random numbers as its elements. (We used the `rand` function from
    the `random` submodule in NumPy, which we will deal with in a later section).
    Next, create a Fortran-styled array from `c_array` , as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个名为`c_array`的变量，它是一个二维数组，其随机数为一亿。 （我们使用了 NumPy 中`random`子模块中的`rand`函数，我们将在下一部分中对其进行处理）。
    接下来，从`c_array`创建一个 Fortran 样式的数组，如下所示：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can check whether `c_array` and `f_array` are indeed C and Fortran-styled,
    respectively, by reading their `flags` attributes. Next, we define the following
    two functions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过读取`flags`属性来分别检查`c_array`和`f_array`是否确实为 C 和 Fortran 风格。 接下来，我们定义以下两个函数：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s test the performance of the two functions on both the arrays using
    IPython''s `%timeit` magic function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 IPython 的`%timeit`魔术函数在两个数组上测试这两个函数的性能：
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are a handful of magic functions that IPython provides to help us understand
    the code better; for further details, refer to: [http://ipython.readthedocs.org/en/stable/interactive/magics.html?highlight=magic](http://ipython.readthedocs.org/en/stable/interactive/magics.html?highlight=magic)
    .'
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 提供了一些魔术函数来帮助我们更好地理解代码。 有关更多详细信息，请参见[`ipython.readthedocs.org/en/stable/interactive/magics.html?highlight=magic`](http://ipython.readthedocs.org/en/stable/interactive/magics.html?highlight=magic)。
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we can see, summing up the row of a C array is much faster than summing up
    its column. This is because, in a C array, elements in a row are laid out in successive
    memory locations. The opposite is true for a Fortran array, where the elements
    of a column are laid out in consecutive memory locations.
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，对 C 数组的行求和比对其列求和要快得多。 这是因为，在 C 数组中，一行中的元素被放置在连续的内存位置中。 对于 Fortran 数组，情况恰好相反，其中列的元素布置在连续的内存位置中。
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the exact figures may vary depending on the operating system, RAM,
    and the Python distribution being used, but the relative order between the execution
    times should remain the same.
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，确切的数字可能会因所使用的操作系统，RAM 和 Python 发行版而异，但是执行时间之间的相对顺序应保持不变。
- en: This is an important distinction and allows you to suitably arrange your data
    in an array, depending on the kind of algorithm or operation you are performing.
    Knowing this distinction can help you speed up your code by orders of magnitude.
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的区别，它使您可以根据要执行的算法或运算的类型将数据适当地排列在一个数组中。 知道这种区别可以帮助您将代码加速几个数量级。
- en: Views and copies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图和副本
- en: 'There are primarily two ways of accessing data by slicing and indexing. They
    are called copies and views: you can either access elements directly from an array,
    or create a copy of the array that contains only the accessed elements. Since
    a view is a reference of the original array (in Python, all variables are references),
    modifying a view modifies the original array too. This is not true for copies.'
  prefs: []
  type: TYPE_NORMAL
  zh: 通过切片和索引访问数据主要有两种方法。 它们称为副本和视图：您可以直接从数组访问元素，也可以创建仅包含访问的元素的数组副本。 由于视图是原始数组的引用（在
    Python 中，所有变量都是引用），因此修改视图也将修改原始数组。 对于副本，情况并非如此。
- en: The `may_share_memory` function in NumPy miscellaneous routines can be used
    to determine whether two arrays are copies or views of each other. While this
    method does the job in most cases, it is not always reliable, since it uses heuristics.
    It may return incorrect results too. For introductory purposes, however, we shall
    take it for granted.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 其他例程中的`may_share_memory`函数可用于确定两个数组是彼此的副本还是彼此的视图。 尽管此方法在大多数情况下都能胜任，但由于使用启发式方法，因此并不总是可靠的。
    它也可能返回错误的结果。 但是，出于介绍性目的，我们将其视为理所当然。
- en: Generally, slicing an array creates a view and indexing it creates a copy. Let
    us study these differences through a few code snippets. First, let's create a
    random 100x10 array.
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，切片数组会创建一个视图，对其进行索引会创建一个副本。 让我们通过一些代码片段研究这些差异。 首先，让我们创建一个随机的`100x10`数组。
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, let us extract the first five rows of the array and assign them to variable
    `y` .
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们提取数组的前五行，并将它们分配给变量`y`。
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let us see if `y` is a view of `x` .
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`y`是否是`x`的视图。
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now let us modify the array `y` and see how it affects `x` . Set all the elements
    of `y` to zero:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们修改数组`y`，看看它如何影响`x`。 将`y`的所有元素设置为零：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The code snippet prints out five rows of zeros. This is because `y` was just
    a view, a reference to `x` .
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码段打印出五行零。 这是因为`y`只是一个视图，是对`x`的引用。
- en: 'Next, let''s create a copy to see the difference. We use the preceding method
    that uses a random function to create the `x` array, but this time we initialize
    the `y` array using `numpy.empty` to create an empty array first and then copy
    the values from `x` to `y` . So, now `y` is not a view/reference of `x` anymore;
    it''s an independent array but has the same values as part of `x` . Let''s use
    the `may_share_memory` function again to verify that `y` is the copy of `x` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个副本以查看区别。 我们使用前面的方法使用随机函数来创建`x`数组，但是这次我们使用`numpy.empty`初始化`y`数组以首先创建一个空数组，然后将值从`x`复制到`y`。
    因此，现在`y`不再是`x`的视图/参考； 它是一个独立的数组，但具有与`x`相同的值。 让我们再次使用`may_share_memory`函数来验证`y`是`x`的副本：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s alter the value in `y` and check whether the value of `x` changes as
    well:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改`y`中的值，并检查`x`的值是否也发生变化：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You should see the preceding snippet print out five rows of random numbers as
    we initialized `x` , so changing `y` to `0` didn't affect `x` .
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到前面的代码段在初始化`x`时打印了五行随机数，因此将`y`更改为`0`不会影响`x`。
- en: Creating arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数组
- en: Arrays can be created in a number of ways, for instance from other data structures,
    by reading files on disk, or from the Web. For the purposes of this chapter, whose
    aim is to familiarize us with the core characteristics of a NumPy array, we will
    be creating arrays using lists or various NumPy functions.
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以通过多种方式创建，例如从其他数据结构，通过读取磁盘上的文件或从 Web 创建。 就本章而言，其目的是使我们熟悉 NumPy 数组的核心特性，我们将使用列表或各种
    NumPy 函数创建数组。
- en: Creating arrays from lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从列表创建数组
- en: 'The simplest way to create an array is using the `array` function. To create
    a valid array object, arguments to array functions need to adhere to at least
    one of the following conditions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数组的最简单方法是使用`array`函数。 若要创建有效的数组对象，数组函数的参数必须至少满足以下条件之一：
- en: It has to be a valid iterable value or sequence, which may be nested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须是有效的可迭代值或序列，可以嵌套
- en: It must have an `__array__` method that returns a valid numpy array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须具有返回有效的 NumPy 数组的`__array__`方法
- en: 'Consider the following snippet:'
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码段：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The first condition is always true for Python lists and tuples. When creating
    an array from lists or tuples, the input may consist of different (heterogeneous)
    data types. The array function, however, will normally cast all input elements
    into the most suitable data type required for the array. For example, if a list
    contains both floats and integers, the resulting array will be of type float.
    If it contains an integer and a boolean, the resulting array will consist of integers.
    As an exercise, try creating arrays from lists that contain arbitrary data types.
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个条件对于 Python 列表和元组始终为`true`。 从列表或元组创建数组时，输入可能包含不同的（异构）数据类型。 但是，数组函数通常会将所有输入元素转换为数组所需的最合适的数据类型。
    例如，如果列表同时包含浮点数和整数，则结果数组将为`float`类型。 如果它包含一个整数和一个布尔值，则结果数组将由整数组成。 作为练习，请尝试从包含任意数据类型的列表创建数组。
- en: 'One of the most handy ways of creating lists, and therefore arrays, of integers
    is using the `range` function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`range`函数是创建整数列表以及数组的最便捷方法之一：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'NumPy has a convenient function, called `arange` , that combines the functionality
    of the `range` and `array` functions. The preceding two lines of code are equivalent
    to this:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 具有称为`arange`的便捷函数，该函数结合了`range`和`array`函数的功能。 前两行代码与此等效：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For multidimensional arrays, the input lists simply have to be nested, as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多维数组，只需嵌套输入列表，如下所示：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding examples simply show how to create a NumPy array from an existing
    array or from a range of numbers. Next, we will talk about creating an array with
    random numbers.
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例仅说明如何从现有数组或一系列数字创建 NumPy 数组。 接下来，我们将讨论创建具有随机数的数组。
- en: Creating random arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建随机数组
- en: 'The `random` module in NumPy provides various functions to create random arrays
    of any data type. We will be using this module very frequently throughout the
    book to demonstrate the working of functions in NumPy. The `random` module broadly
    consists of functions that:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 中的`random`模块提供了各种函数来创建任何数据类型的随机数组。 在整本书中，我们将非常频繁地使用此模块来演示 NumPy 中函数的工作。
    `random`模块大致由以下函数组成：
- en: Create random arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建随机数组
- en: Create random permutations of arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数组的随机排列
- en: Generate arrays with specific probability distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成具有特定概率分布的数组
- en: 'We shall go over each of these in detail through out the book. For the purposes
    of this chapter, we will be focusing on two important functions in the `random`
    module-`rand` and `random` . Here is a simple snippet demonstrating the use of
    both these functions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中详细介绍所有这些内容。 在本章中，我们将重点介绍`random`模块中的两个重要函数-`rand`和`random`。 这是一个简单的代码段，展示了这两个函数的使用：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Notice the subtle difference between the arguments passed to the two functions.
    The random function accepts a *tuple* as an argument and creates an array with
    dimensionality equal to the length of the tuple. The respective dimensions have
    their lengths equal to the elements of the tuple. The `rand` function, on the
    other hand, takes any number of *integer arguments* and returns a random array
    such that its dimensionality is equal to the number of integer arguments passed
    to the function, and the respective dimensions have lengths equal to the values
    of the integer arguments. Thus, `x` in the preceding snippet is a three-dimensional
    array (the number of the arguments passed to the function), and each of the three
    dimensions of `x` has a length of *2* (the value of each of the arguments). `rand`
    is a convenience function for `random` . Both these functions can be used interchangeably,
    provided the arguments that are passed are respectively valid for either function.
  prefs: []
  type: TYPE_NORMAL
  zh: 注意传递给两个函数的参数之间的细微差别。 随机函数接受*元组*作为参数，并创建维数等于元组长度的数组。 各个尺寸的长度等于元组的元素。 另一方面，`rand`函数采用任意数量的*整数参数*，并返回一个随机数组，使得其维数等于传递给该函数的整数参数的数量
    ，并且各个维度的长度等于整数参数的值。 因此，前面的代码段中的`x`是三维数组（传递给函数的参数数量），并且`x`的三个维度中的每个维度的长度均为`2`（每个参数的值）。
    `rand`是`random`的便捷函数。 这两个函数可以互换使用，只要传递的参数分别对两个函数均有效即可。
- en: 'These two functions, however, have a major drawback-they can only create arrays
    of floats. If we wanted an array of random integers, we would have to cast the
    output of these functions into integers. But this, too, is a significant problem,
    since NumPy''s `int` function truncates a float to the nearest integer toward
    zero (this is an equivalent of the `floor` function). Therefore, casting the output
    of `rand` or `random` to integers will always return an array of zeros since both
    these functions return floats within the interval ( *0* , *1* ). The problem can
    be solved using the `randint` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这两个函数的主要缺点是-它们只能创建浮点数组。 如果我们想要一个随机整数数组，则必须将这些函数的输出转换为整数。 但是，这也是一个重大问题，因为
    NumPy 的`int`函数将浮点数截断为最接近 0 的整数（这与`floor`函数等效）。 因此，将`rand`或`random`的输出强制转换为整数将始终返回零数组，因为这两个函数都返回`[0,
    1)`区间内的浮点数。 可以使用`randint`函数解决此问题，如下所示：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `randint` function takes three arguments, of which two are optional. The
    first argument denotes the desired lower limit of the output values, and the second
    optional argument denotes the (exclusive) upper limit of the output values. The
    optional `size` argument is a tuple that determines the shape of the output array.
  prefs: []
  type: TYPE_NORMAL
  zh: '`randint`函数带有三个参数，其中两个是可选的。 第一个参数表示输出值的期望下限，第二个可选参数表示输出值的（专有）上限。 可选的`size`参数是一个元组，用于确定输出数组的形状。'
- en: 'There are many other functions, such as seeding the random number generator
    in the random submodule. For details, refer to:'
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他函数，例如将随机数生成器植入随机子模块中。 有关详细信息，请参考：。
- en: '[http://docs.scipy.org/doc/numpy/reference/routines.random.html](http://docs.scipy.org/doc/numpy/reference/routines.random.html)'
  prefs: []
  type: TYPE_NORMAL
  zh: '[`docs.scipy.org/doc/numpy/reference/routines.random.html`](http://docs.scipy.org/doc/numpy/reference/routines.random.html)'
- en: Other arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '其他数组'
- en: There are a few other array creation functions, such as `zeros()` , `ones()`
    , `eye()` , and others (similar to the ones in MATLAB) that can be used to create
    NumPy arrays. Their use is fairly straightforward. Arrays can also be populated
    from files or from the Web. We shall deal with file I/O in the next chapter.
  prefs: []
  type: TYPE_NORMAL
  zh: '还有一些其他的数组创建函数，例如`zeros()`，`ones()`，`eye()`和其他一些函数（类似于 MATLAB 中的函数）可用于创建 NumPy
    数组。 它们的使用非常简单。 数组也可以从文件或从 Web 填充。 我们将在下一章中处理文件 I/O。'
- en: Array data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组的数据类型
- en: 'Data types are another important intrinsic aspect of a NumPy array alongside
    its memory layout and indexing. The data type of a NumPy array can be found by
    simply checking the `dtype` attribute of the array. Try out the following examples
    to check the data types of different arrays:'
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型是 NumPy 数组的另一个重要内在方面，它的内存布局和索引也是如此。 只需检查数组的`dtype`属性即可找到 NumPy 数组的数据类型。
    尝试以下示例检查不同数组的数据类型：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Many array creation functions provide a default array data type. For example,
    the `np.zeros` and `np.ones` functions create arrays that are full of floats by
    default. But it is possible to make them create arrays of other data types too.
    Consider the following examples that demonstrate how to use the dtype argument
    to create arrays of arbitrary data types.
  prefs: []
  type: TYPE_NORMAL
  zh: 许多数组创建函数提供默认的数组数据类型。 例如，`np.zeros`和`np.ones`函数默认创建充满浮点数的数组。 但是也可以使它们创建其他数据类型的数组。
    考虑以下示例，这些示例演示如何使用`dtype`参数创建任意数据类型的数组。
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For a complete list of data types supported by NumPy, refer to [http://docs.scipy.org/doc/numpy/user/basics.types.html](http://docs.scipy.org/doc/numpy/user/basics.types.html)
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 NumPy 支持的数据类型的完整列表，请参考[`docs.scipy.org/doc/numpy/user/basics.types.html`](http://docs.scipy.org/doc/numpy/user/basics.types.html)。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some basics of the NumPy ndarray object. We studied
    some elementary ways of creating NumPy arrays. We also took a look at the differences
    between copies and views of arrays and how these can affect using indexing and
    slicing. We saw the subtle differences between the memory layouts offered by NumPy.
    We are now equipped with the basic vocabulary of the ndarray object and can get
    started on the core functionality of NumPy. In the next chapter, we will explore
    more details of ndarray and show you some of them using certain tricks and tips
    (universal functions and shape manipulation) to make your NumPy script speed up!
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 NumPy `ndarray`对象的一些基础知识。 我们研究了一些创建 NumPy 数组的基本方法。 我们还研究了数组的副本和视图之间的差异，以及它们如何影响使用索引和切片的情况。
    我们看到了 NumPy 提供的内存布局之间的细微差别。 现在，我们已经配备了`ndarray`对象的基本词汇，并且可以开始使用 NumPy 的核心功能。 在下一章中，我们将探索`ndarray`的更多细节，并使用某些技巧和窍门（通用函数和形状操作）向您展示其中的一些技巧，以使您的
    NumPy 脚本加速！
