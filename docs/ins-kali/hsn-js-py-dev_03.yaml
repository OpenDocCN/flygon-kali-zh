- en: Can We Use JavaScript Server-Side? Sure!
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在服务器端使用JavaScript吗？当然可以！
- en: We don't typically think of JavaScript existing server-side, as the majority
    of its history has only been client-side in a browser. However, at the end of
    the day, JavaScript *is* a language—and languages can be agnostic to their application
    (to an extent). While it was possible to use JavaScript server-side since its
    beginning with a few different tools, the introduction of **Node.js** brought
    using JavaScript on the server-side into the mainstream. There are more similarities
    between Python and JavaScript here than on the frontend, but there are still significant
    differences between how each technology is used in practice. Let's take a look
    at Node.js and how we can leverage its power on the server-side—and why we would
    want to!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常不会认为JavaScript存在于服务器端，因为它的大部分历史只存在于浏览器端。然而，归根结底，JavaScript *是*一种语言——而语言可以对其应用程序（在一定程度上）是不可知的。虽然从一开始就可以使用一些不同的工具在服务器端使用JavaScript，但是**Node.js**的引入使得在服务器端使用JavaScript成为主流。在这里，Python和JavaScript之间的相似之处比在前端更多，但在实践中两种技术的使用仍然存在显著差异。让我们来看一下Node.js以及我们如何利用它在服务器端的力量——以及为什么我们想要这样做！
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Why use JavaScript on the server-side?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要在服务器端使用JavaScript？
- en: The Node.js ecosystem
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js生态系统
- en: Threading and asynchronicity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程和异步性
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中的代码文件：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers)。
- en: Why use JavaScript on the server side?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要在服务器端使用JavaScript？
- en: 'There are many server-side languages: Java, PHP, Ruby, Go, and our friend Python,
    just to name a few. So, why would we want to use JavaScript as a server-side language?
    One answer is to reduce context switching. In theory, the same developer can write
    both the front- and backend of a web application with a minimum of mental changes.
    The research behind the cost of switching programming languages is light so far
    and tends to be highly anecdotal, but some studies have shown that the cognitive
    overhead of switching from one task to another and back again reduces productivity
    and increases the length of time it takes to complete a task. By extension, switching
    from JavaScript to Python requires a few mental gymnastics. Of course, with practice,
    this mental overhead becomes unimportant (think of a translator who can in real
    time listen to one language and translate this to a different language). However,
    with the speed at which technology changes, reaching that level of fluency is
    harder. It stands to reason that the more consistency between tasks, the less
    the mental overhead involved in switching between the tasks.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多服务器端语言：Java、PHP、Ruby、Go，还有我们的朋友Python，只是举几个例子。那么，为什么我们要使用JavaScript作为服务器端语言呢？一个答案是为了减少上下文切换。理论上，同一个开发人员可以用最少的心理变化来编写Web应用程序的前端和后端。迄今为止，关于切换编程语言的成本的研究还很少，往往是高度个人化的，但一些研究表明，从一项任务切换到另一项任务，然后再切换回来，会降低生产力，增加完成任务所需时间。换句话说，从JavaScript切换到Python需要一些心理上的运动。当然，通过实践，这种心理负担变得不重要（想象一个可以实时听取一种语言并将其翻译成另一种语言的翻译员）。然而，随着技术变化的速度，达到那种流利程度更加困难。可以说，任务之间的一致性越大，切换任务所涉及的心理负担就越小。
- en: Let's take a look at grammatical similarities between the coding languages we've
    discussed in terms of syntax and style, and a bit more history.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们讨论过的编码语言在语法和风格方面的相似之处，还有一些历史。
- en: Grammatical similarities
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法相似之处
- en: One of the reasons that developers enjoy working with Node.js is that it's syntactically
    virtually identical to frontend JavaScript.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员喜欢使用Node.js的原因之一是它在语法上几乎与前端JavaScript相同。
- en: Let's take a look at some of the code we've already written.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们已经写过的一些代码。
- en: 'Here is an example of JavaScript code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个JavaScript代码的例子：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s take a look at some Node.js code that does something completely
    different, but with similar grammar, with dot notation, curly braces, and such.
    Here is an example of this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下一些完全不同的Node.js代码，但是具有类似的语法，点符号、花括号等。这是一个例子：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At first glance, these two code snippets may not look all that similar, so let's
    take a closer look. In our JavaScript example, take a look at `event.preventDefault()`,
    and then, in our Node.js example, the line `response.end('Hello World!')`. They
    both use **dot syntax** to specify a **method** (or function) of the parent object.
    These two lines are doing completely different things, but we can read them both
    according to the rules of JavaScript. Dot syntax is a very important concept in
    JavaScript, as it is inherently an object-oriented language. Much like we would
    when accessing class methods and properties when working with object-oriented
    Python, we have access to the class methods and properties of a JavaScript object.
    Just like in Python, we have classes, instances, methods, and properties in JavaScript.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这两个代码片段可能看起来并不相似，所以让我们仔细看看。在我们的JavaScript示例中，看看`event.preventDefault()`，然后在我们的Node.js示例中，看看`response.end('Hello
    World!')`。它们都使用**点语法**来指定父对象的**方法**（或函数）。这两行完全做着不同的事情，但我们可以根据JavaScript的规则来阅读它们。点语法在JavaScript中是一个非常重要的概念，因为它本质上是一种面向对象的语言。就像在使用面向对象的Python处理对象时一样，我们可以访问JavaScript对象的类方法和属性。就像在Python中一样，JavaScript中也有类、实例、方法和属性。
- en: 'So, what exactly *is* this Node.js example doing? Once again, we can see that
    JavaScript is a fairly legible language! Even without knowing too much about the
    innards of Node.js, we can see that we''re creating a server, sending something,
    and listening for input. If we again compare to a Flask example, as follows, here''s
    what we''re doing:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个Node.js示例到底在做什么呢？再次，我们可以看到JavaScript是一种相当易读的语言！即使不太了解Node.js的内部，我们也可以看到我们正在创建一个服务器，发送一些东西，并监听输入。如果我们再次与Flask示例进行比较，如下所示，我们正在做什么：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There’s nothing inherently different about the workings of these two snippets;
    they are two different ways to accomplish the same goal in two different languages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个片段的工作原理并没有本质上的不同；它们是用两种不同的语言实现相同目标的两种不同方式。
- en: Let's take a look at a function that does the same work in client-side JavaScript
    and in Node.js. We haven't gone into detail on grammar quite yet, so, for the
    moment, don't let the syntax be a stumbling block.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个在客户端JavaScript和Node.js中执行相同工作的函数。我们还没有详细讨论语法，所以暂时不要让语法成为绊脚石。
- en: 'Here is a JavaScript example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个JavaScript示例：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is a Node.js example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Node.js示例：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Look closely at the two. This isn’t a trick: they are, in fact, identical.
    Compare the JavaScript version with a basic Python loop, illustrated in the following
    code snippet:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看看这两个。这不是一个把戏：事实上，它们是相同的。将JavaScript版本与以下代码片段中的基本Python循环进行比较：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We'll get into the grammar of JavaScript and why it appears longer than its
    Pythonic counterpart in [Chapter 3](4257dcd7-525c-4ca9-9695-d9cfcff438d7.xhtml), *Nitty-Gritty
    Grammar*, but for now, let's acknowledge how *different* the Python code is from
    JavaScript.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将深入探讨JavaScript的语法，以及为什么它看起来比其Pythonic对应物更长，但现在，让我们承认Python代码与JavaScript有多么*不同*。
- en: A bit more history
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多历史
- en: Node.js, created by Ryan Dahl and originally released in 2009, is an open source
    runtime for JavaScript that runs outside of a browser. It may seem new, but it
    has gained a large foothold in its time, including major corporations. One fact
    that most people don't know, however, is that Node.js is *not* the first implementation
    of server-side JavaScript. That distinction again belongs to Netscape, years prior.
    However, many considered the language not developed enough, so its usage in this
    vein was limited to the point of nonexistence.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js，由Ryan Dahl创建，最初于2009年发布，是JavaScript的开源运行时，可以在浏览器之外运行。它可能看起来很新，但在其时间内已经获得了很大的立足点，包括主要的公司。然而，大多数人不知道的一个事实是，Node.js
    *不是* 服务器端JavaScript的第一个实现。这个区别再次属于Netscape，几年前。然而，许多人认为这种语言发展不够，因此它在这方面的使用被限制到了不存在的程度。
- en: Dahl sought to bring the server side and the client side closer together. Historically,
    there was quite a separation of concerns between the two sides of the application.
    JavaScript could work with the frontend, but querying the server was a continual
    process. The story goes that Dahl was inspired to create Node.js when he became
    frustrated that file upload progress bars had to rely on constant communication
    with the server. Node.js presents a smoother way of performing this communication
    by presenting an *event loop-based architecture* to facilitate this communication. Since
    creating Node.js, Dahl has gone on to create Deno, a JavaScript and TypeScript
    runtime similar to Node.js. However, for our purposes, we'll be using Node.js.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Dahl试图将服务器端和客户端更紧密地联系在一起。从历史上看，应用程序的两侧之间存在着相当大的关注点分离。JavaScript可以与前端一起工作，但查询服务器是一个持续的过程。据说Dahl在创建Node.js时受到启发，因为他对文件上传进度条必须依赖与服务器的持续通信感到沮丧。Node.js通过提供基于*事件循环的架构*来促进这种通信，呈现了一种更顺畅的执行方式。自从创建Node.js以来，Dahl已经开始创建Deno，这是一个类似于Node.js的JavaScript和TypeScript运行时。然而，对于我们的目的，我们将使用Node.js。
- en: We'll get into the callback paradigm used by Node.js later, and we'll also see
    how frontend JavaScript uses it too.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将深入探讨Node.js使用的回调范式，我们还将看到前端JavaScript也使用它。
- en: Let's take a look at how Node.js works by taking a closer look at its proverbial
    life cycle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过更仔细地观察它的谚语生命周期来看看Node.js是如何工作的。
- en: The Node.js ecosystem
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js生态系统
- en: 'Most languages aren''t of the paradigm: of just writing self-contained code.
    Independent modules of code, called **packages**, are widely used in software
    engineering and development. To think of this in another way, even a fresh web
    server doesn''t have software on it to serve a site out of the box. You have to
    install a package of software, such as Apache or nginx, to even get to the "Hello
    World!" step of a website. Node.js is no different. It has a number of tools to
    make the process of getting these packages simpler, though. Let''s take a look
    from the ground up at a basic "Hello World!" example of a server using Node.js.
    We''ll be discussing these concepts in more detail later, so, for now, let''s
    just go through the basic setup.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数语言不是范式：只编写自包含的代码。称为**包**的独立代码模块在软件工程和开发中被广泛使用。换个角度思考，即使是一个全新的Web服务器也没有软件来直接提供网站服务。您必须安装软件包，如Apache或nginx，甚至才能到达网站的“Hello
    World！”步骤。Node.js也不例外。它有许多工具可以使获取这些软件包的过程更简单。让我们从头开始看一个使用Node.js的基本“Hello World！”服务器示例。我们稍后将更详细地讨论这些概念，所以现在让我们只是进行基本设置。
- en: Node.js
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js
- en: 'Of course, the first thing we need is access to the language itself. There
    are a few methods by which you can get Node.js on your machine, including package
    managers, but the most straightforward way is just to download it from the official
    site: [https://nodejs.org](https://nodejs.org/). You''ll also want some familiarity
    with your Terminal program and basic commands. Be sure to include **Node Package
    Manager** (**npm**) when installing. Depending on your environment, you may need
    to reboot your machine when the installation is complete.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们首先需要访问语言本身。你可以通过几种方法在你的机器上获取Node.js，包括包管理器，但最简单的方法就是从官方网站下载：[https://nodejs.org](https://nodejs.org/)。安装时，确保包括**Node
    Package Manager**（**npm**）。根据你的环境，在安装完成后可能需要重新启动你的机器。
- en: 'Once you''ve installed Node.js, ensure that you have access to it. Open your
    Terminal and execute the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Node.js之后，确保你可以访问它。打开你的终端并执行以下命令：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You should see a version number returned. If so, you're ready to move on!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到返回的版本号。如果是这样，你就准备好继续了！
- en: npm
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: npm
- en: One of the powers of Node.js is its rich open source community. Of course, this
    isn't in any way unique to Node.js, but it is an attractive fact. Just as there
    is `pip` for Python, there is `npm` for Node.js. With hundreds of thousands of
    packages and billions of downloads, `npm` is the largest package registry in the
    world. Of course, with packages come a web of interdependencies and the need to
    keep them up to date, so npm provides a reasonably stable version management method
    to ensure that the packages you use function together properly in concert.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的一个优势是其丰富的开源社区。当然，这并不是Node.js独有的，但这是一个吸引人的事实。就像Python有`pip`一样，Node.js有`npm`。有数十万个软件包和数十亿次的下载，`npm`是世界上最大的软件包注册表。当然，随着软件包的增多，就会有一系列的相互依赖关系和保持它们更新的需求，因此npm提供了一个相当稳定的版本管理方法，以确保你使用的软件包在一起正常运行。
- en: 'Just as we tested our Node version, we''ll test `npm`, like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们测试了Node版本一样，我们也会测试`npm`，就像这样：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If for some reason you do *not *have `npm` installed, it's time to do some research
    on how to install it, since the original install of Node didn't come with `npm`.
    There are several ways to install it, such as with Homebrew, but it may be best
    to revisit how you installed Node.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因你*没有*安装`npm`，那么现在是时候研究如何安装它了，因为最初安装Node时并没有带有`npm`。有几种安装它的方法，比如使用Homebrew，但最好重新查看一下你是如何安装Node的。
- en: Express.js
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Express.js
- en: 'Express is a fast, popular web application framework. We''ll be using it as
    the basis of our Node.js work. We''ll discuss using it in more detail later, so
    for now, let''s give ourselves a quick scaffold upon which to work. We''re going
    to install Express and a scaffolding tool globally, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Express是一个快速、流行的Web应用程序框架。我们将把它作为我们Node.js工作的基础。我们稍后会详细讨论如何使用它，所以现在让我们快速搭建一个脚手架。我们将全局安装Express和一个脚手架工具，如下所示：
- en: Use the command line to install the Express generator, by running the following
    command: `npm install -g express express-generator`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令行安装Express生成器，通过运行以下命令：`npm install -g express express-generator`。
- en: Use the generator to create a new directory and scaffold the application, by
    running the following command: `express --view=hbs sample && cd sample`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用生成器创建一个新目录并搭建应用程序，通过运行以下命令：`express --view=hbs sample && cd sample`。
- en: 'Your `sample` directory should now contain a skeleton, like this:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的`sample`目录现在应该包含一个类似这样的骨架：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we'll install the dependencies of the application by running the following
    command: `npm install`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将通过运行以下命令来安装应用程序的依赖项：`npm install`。
- en: It'll do some work downloading the necessary packages, and then we'll be ready
    to start the server, by running the following command: `npm start`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将下载必要的软件包，然后我们将准备启动服务器，通过运行以下命令：`npm start`。
- en: 'Visit `http://localhost:3000/` and you should see the most exciting page of
    all time, as shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问`http://localhost:3000/`，你应该会看到以下截图中显示的有史以来最激动人心的页面：
- en: '![](assets/1a90e2e5-80ce-4d0e-a6f0-d2d3283aeb77.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a90e2e5-80ce-4d0e-a6f0-d2d3283aeb77.png)'
- en: Figure 2.1 - Express welcome page
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 - Express欢迎页面
- en: 'Congratulations! It''s your first Node.js application! Let''s take a look under
    the hood:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！这是你的第一个Node.js应用程序！让我们来看看它的内部：
- en: 'Open the `index.js` file in the `routes` directory, and you should see something
    similar to this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`routes`目录中的`index.js`文件，你应该会看到类似于这样的内容：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It's worth noting at this point that you may see a difference in syntax between
    some Node.js examples and modern JavaScript. If you notice, these lines end with
    semicolons, whereas our previous examples did not. We'll get into a discussion
    of the different versions of JavaScript later, but for now, just keep that note
    in mind if it surprised you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，此时你可能会注意到一些Node.js示例和现代JavaScript之间的语法差异。如果你注意到了，这些行以分号结尾，而我们之前的示例没有。我们将在后面讨论不同版本的JavaScript，但现在，如果这让你感到惊讶，就记住这个注释。
- en: 'Let''s take a look at the `router.get` statement, illustrated in the following
    code block:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`router.get`语句，在下面的代码块中有所说明：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`get` is referring to the HTTP verb to which the program is responding. Similarly,
    if we were dealing with POST data, the beginning of the line would be `router.post`.
    So, in essence, this is saying: "Hey server, when you get a request for the home
    page, render the index template with the `title` variable equal to `Express`."
    Don''t worry—we''ll go into much more detail on this in [Chapter 13](57b3ea57-b927-47f6-b07e-d1dd11796e1a.xhtml)*,
    Using Express*, but for now, let''s play around a little:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`get`指的是程序响应的HTTP动词。同样，如果我们处理POST数据，行的开头将是`router.post`。因此，本质上，这是在说：“嘿，服务器，当你收到对主页的请求时，用`title`变量等于`Express`来渲染index模板。”别担心，我们将在[第13章](57b3ea57-b927-47f6-b07e-d1dd11796e1a.xhtml)*使用Express*中详细介绍这个问题，但现在，让我们玩一下：'
- en: Add the line `console.log('hello')` before the `res.render` line.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res.render`行之前添加一行`console.log('hello')`。
- en: Change `Express` to `My Site`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Express`改为`My Site`。
- en: When making changes to Node.js code, you'll need to restart the local server.
    You can go back to your Terminal and use *Ctrl* + *C* to quit Express and then
    `npm start` to restart it. Of course, there are process managers to handle this
    for you, but for now, we're using a very bare-bones implementation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在对Node.js代码进行更改时，您需要重新启动本地服务器。您可以返回到您的终端，使用*Ctrl* + *C*退出Express，然后使用`npm start`重新启动它。当然，也有处理这个问题的进程管理器，但是现在，我们使用的是一个非常基本的实现。
- en: 'Navigate to `https://localhost:3000/` again. You should see the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再次导航到`https://localhost:3000/`。您应该会看到以下内容：
- en: '![](assets/e221d0fc-250c-460d-97ca-19cf03614e83.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e221d0fc-250c-460d-97ca-19cf03614e83.png)'
- en: Figure 2.2 - Changed Express page
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 - 更改后的Express页面
- en: 'Now, let''s go back to your Terminal. When you hit your localhost, you also
    triggered a `console.log()` statement—a debugging print statement. You should
    see `hello` in line with the requests and responses Express provided, as illustrated
    in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到您的终端。当您访问本地主机时，您还触发了一个`console.log()`语句-一个调试打印语句。您应该会看到`hello`与Express提供的请求和响应一起显示在屏幕上，如下截图所示：
- en: '![](assets/843c1443-a9c0-4f00-869c-e0f93e587ff0.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/843c1443-a9c0-4f00-869c-e0f93e587ff0.png)'
- en: Figure 2.3 - console.log
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 - console.log
- en: Using the console will prove invaluable to us, both on the client side and the
    server side. This is just a taste of what it can do! Go ahead and quit with *Ctrl*
    + *C.*
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用控制台对我们来说将是非常宝贵的，无论是在客户端还是服务器端。这只是它可以做的一小部分！继续使用 *Ctrl* + *C* 退出。
- en: Threading and asynchronicity
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程和异步性
- en: As with traditional web architectures, it's important to understand the *why *of
    using Node.js on the backend.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的Web架构一样，了解在后端使用Node.js的*原因*是很重要的。
- en: We've taken a look at the *how* of running Node.js, so now, let's take a look
    at how Node's client-server architecture differs from the traditional paradigm.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看了Node.js的运行方式，现在，让我们看看Node的客户端-服务器架构与传统范式有何不同。
- en: Traditional client-server architecture
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统的客户端-服务器架构
- en: 'To understand how Node.js differs from traditional architectures, let''s look
    at the following request diagram:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解Node.js与传统架构的不同之处，让我们看一下以下请求图表：
- en: '![](assets/c0ac1cec-e2b8-4c71-9eff-f303c0130ff3.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c0ac1cec-e2b8-4c71-9eff-f303c0130ff3.png)'
- en: Figure 2.4 - Traditional client-server diagram
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 - 传统的客户端-服务器图表
- en: In a traditional setup, each request (or connection) to the server spawns a
    new thread in memory on the server, taking up system **random-access memory**
    (**RAM**) until the number of possible threads is reached. After that, some requests
    must wait until more memory is available. If you're not familiar with the concept
    of **threads**, they're basically a small sequence of commands to run on a computer.
    What this *multithreaded* paradigm implies is that for each new request received
    by the server, a new unique place is created in memory in order to handle the
    request.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的设置中，每个对服务器的请求（或连接）都会在服务器的内存中产生一个新的线程，占用系统的**随机存取内存**（**RAM**），直到达到可能的线程数量。之后，一些请求必须等待，直到有更多的内存可用。如果你不熟悉**线程**的概念，它们基本上是在计算机上运行的一小段命令。这种*多线程*范式意味着对服务器接收的每个新请求，都会在内存中创建一个新的唯一位置来处理该请求。
- en: 'Now, keep in mind that a *request* is not a whole web page—a page can have
    dozens of requests for other supplementary assets such as images. In the following
    screenshot, take a look at the fact that the Google home page alone has 16 requests:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请记住，一个*请求*不是一个完整的网页-一个页面可以有数十个请求，用于其他补充资产，如图像。在下面的截图中，看一下谷歌主页仅有16个请求：
- en: '![](assets/f21cef55-9e15-49ab-837c-f80ccc457f37.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f21cef55-9e15-49ab-837c-f80ccc457f37.png)'
- en: Figure 2.5 - google.com requests
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 - google.com请求
- en: 'Why is this important? In a nutshell: scalability. The more requests per second,
    the more memory is being used. We''ve all seen what happens when a website crashes
    under load—a nasty error page. This is something we all want to avoid.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很重要？简而言之：可伸缩性。每秒的请求越多，使用的内存就越多。我们都见过网站在负载下崩溃时会发生什么-一个令人讨厌的错误页面。这是我们都想要避免的事情。
- en: Node.js architecture
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js架构
- en: 'In contrast to this paradigm, Node.js is *single-threaded*, allowing for thousands
    of non-blocking input-output calls without the need for additional overhead, as
    illustrated in the following diagram:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与这种范式相反，Node.js是*单线程*的，允许进行数千次非阻塞的输入输出调用，而无需额外的开销，如下图所示：
- en: '![](assets/39249e9f-ca08-4ab9-a08f-4efeff2017bf.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39249e9f-ca08-4ab9-a08f-4efeff2017bf.png)'
- en: Figure 2.6 - Node.js client-server diagram
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 - Node.js客户端-服务器图表
- en: 'One thing to take note of early on, however: this paradigm isn''t a silver
    bullet for managing traffic and load on a server. There really is no bullet-proof
    solution (yet) for the problem of large amounts of traffic. However, this structure
    does help a server to be more performant.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一件事情需要早早注意到：这种范式并不是管理服务器上的流量和负载的万能解决方案。目前确实没有一个完全解决大量流量问题的银弹。然而，这种结构确实有助于使服务器更加高效。
- en: One of the reasons why Node.js pairs so well with JavaScript is that it's already
    dealing with the idea of **events**. As we'll see, events are a powerful cornerstone
    of JavaScript on the frontend, and so it stands to reason that by carrying over
    this process to the backend, we'll see a bit of a different approach from other
    architectures.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js与JavaScript配合得如此完美的原因之一是它已经在处理**事件**的概念。正如我们将看到的，事件是JavaScript前端的一个强大基石，因此可以推断，通过将这个过程延续到后端，我们将看到与其他架构有些不同的方法。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: While the concept of running JavaScript on a server isn't new, its popularity,
    stability, and features are greatly expanded with Node.js. Early on, server-side
    JavaScript was abandoned but came to light again in 2009 with the creation of
    Node.js.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在服务器上运行JavaScript的概念并不新鲜，但随着Node.js的流行、稳定性和功能的大大扩展，它的受欢迎程度也大大提高。早期，服务器端JavaScript被抛弃，但在2009年随着Node.js的创建再次光芒万丈。
- en: Node.js reduces the context-switching mental overhead for developers by working
    with the same fundamental grammar on both the client and server side. The same
    developer can work through the whole stack rather seamlessly because there are
    considerable similarities between the client-side work and how to operate with
    Node.js on the server. Along with a difference in approach also comes a different
    fundamental paradigm for handling requests to the server, compared to other more
    traditional implementations.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js通过在客户端和服务器端使用相同的基本语法，减少了开发人员的上下文切换心智负担。同一个开发人员可以相当无缝地处理整个堆栈，因为客户端工作和如何在服务器上操作Node.js之间存在相当大的相似之处。除了方法上的差异，还有一种不同的基本范式来处理对服务器的请求，与其他更传统的实现相比。
- en: 'JavaScript: it''s not just client-side anymore!'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript：不仅仅是客户端！
- en: 'In the next chapter, we''re going to take a deep dive into the grammar of JavaScript:
    syntax, semantics, and best practices.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨JavaScript的语法、语义和最佳实践。
- en: Questions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Try your hand at answering the following questions to test your knowledge:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试回答以下问题来测试你的知识：
- en: 'True or false: Node.js is single-threaded.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：Node.js 是单线程的。
- en: 'True or false: The architecture of Node.js makes it impervious to **Distributed
    Denial of Service** (**DDoS**) attacks.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：Node.js 的架构使其不受分布式拒绝服务（DDoS）攻击的影响。
- en: Who originally created Node.js?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁最初创建了Node.js？
- en: Brendan Eich
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Brendan Eich
- en: Linux Torvalds
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linux Torvalds
- en: Ada Lovelace
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ada Lovelace
- en: Ryan Dahl
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ryan Dahl
- en: 'True or false: JavaScript on the server side is inherently insecure because
    the code is exposed on the frontend.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：服务器端的JavaScript本质上是不安全的，因为代码暴露在前端。
- en: 'True or false: Node.js is inherently superior to Python.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：Node.js 本质上优于Python。
- en: Further reading
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Refer to the following links to get more information on this topic:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接以获取更多关于这个主题的信息：
- en: Why The Hell Would I Use Node.js? A Case-by-Case Tutorial: [https://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js](https://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我要使用Node.js？逐案教程：[https://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js](https://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js)
- en: Event-driven architecture: [https://en.wikipedia.org/wiki/Event-driven_architecture](https://en.wikipedia.org/wiki/Event-driven_architecture)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件驱动架构：[https://en.wikipedia.org/wiki/Event-driven_architecture](https://en.wikipedia.org/wiki/Event-driven_architecture)
