- en: '*Chapter 23*: Supporting Different Versions of Android, Sound Effects, and
    Spinner Widget'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第23章*：支持不同版本的Android，声音效果和Spinner小部件'
- en: In this chapter, we will learn how we can detect and handle different versions
    of Android. We will then be able to study the `SoundPool` class and the different
    ways we use it depending on the Android version of the device the app is running
    on. At this point, we can then put everything we have learned into producing a
    cool sound demo app, which will also introduce us to a new UI widget, **Spinner**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何检测和处理不同版本的Android。然后，我们将能够研究`SoundPool`类以及根据应用程序运行的Android设备的Android版本使用它的不同方式。在这一点上，我们可以将我们学到的一切都投入到制作一个很酷的声音演示应用程序中，这也将向我们介绍一个新的UI小部件**Spinner**。
- en: 'In summary, in this chapter we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在本章中，我们将涵盖以下内容：
- en: Learning how to handle different versions of Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何处理不同版本的Android
- en: Learning how to use the Android `SoundPool` class
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用Android的`SoundPool`类
- en: Coding a sound-based app also using the `SpinnerView` widget
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个基于声音的应用程序，同时使用`SpinnerView`小部件
- en: Let's get started.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Handling different versions of Android
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理不同版本的Android
- en: Most of the time throughout this book, we haven't paid any attention to supporting
    older Android devices, the main reason being that all the up-to-date parts of
    the API we have been using work on such a high percentage of devices (in excess
    of 99%) that it has not seemed worthwhile. Unless you intend on carving out a
    niche in apps for ancient Android relics, this seems like a sensible approach.
    Regarding playing sounds, however, there have been some relatively recent modifications
    to the Android API.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的大部分时间里，我们没有注意支持旧的Android设备，主要原因是我们一直在使用的API的最新部分在如此高比例的设备上运行（超过99%），以至于似乎不值得。除非你打算在古老的Android遗物应用中开辟一个利基，否则这似乎是一个明智的做法。然而，关于播放声音，Android
    API最近进行了一些相对较新的修改。
- en: Actually, this isn't immediately a big deal because devices newer than this
    can still use the old parts of the API. But it is good practice to specifically
    handle these differences in compatibility, because eventually, one day, the older
    parts might not work on newer versions of Android.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这并不是一个立即的大问题，因为比这更新的设备仍然可以使用API的旧部分。但是，特别处理这些兼容性差异是一个很好的做法，因为最终，有一天，旧的部分可能在新版本的Android上不起作用。
- en: The main reason for discussing this here and now is that the slight differences
    in pre- and post-Android Lollipop sound handling give us a good excuse to see
    how we can deal with things like this in our code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时此地讨论这个的主要原因是，Android Lollipop之前和之后的声音处理中的轻微差异给了我们一个很好的借口，让我们看看我们如何在我们的代码中处理这样的事情。
- en: We will see how we can make our app compatible with the very latest devices
    and pre-Lollipop devices as well.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何使我们的应用与最新的设备和早期的Lollipop设备兼容。
- en: The class we will be using to make some noise is the `SoundPool` class. First,
    let's look at some simple code for detecting the current Android version.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的类来发出一些声音是`SoundPool`类。首先，让我们看一些检测当前Android版本的简单代码。
- en: Detecting the current Android version
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测当前的Android版本
- en: 'We can determine the current version of Android using the static variables
    of the `Build.Version` class and we can determine whether it is newer than a specific
    version by comparing it to that version''s appropriate `Build.VERSION_CODES` variable.
    If that explanation was a bit of a mouthful, just look at how we determine whether
    the current version is equal to or newer (greater) than Lollipop:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`Build.Version`类的静态变量来确定当前的Android版本，并且我们可以通过将其与该版本的适当`Build.VERSION_CODES`变量进行比较来确定它是否比特定版本更新。如果这个解释有点啰嗦，那就看看我们如何确定当前版本是否等于或更新（更大）于Lollipop：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now let's see how to make some noise with Android devices newer, and then older,
    than Lollipop.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在比Lollipop更新的Android设备和比Lollipop更老的Android设备上发出一些声音。
- en: The SoundPool class
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SoundPool类
- en: The `SoundPool` class allows us to hold and manipulate a collection of sound
    effects – literally, a pool of sounds. The class handles everything from decompressing
    a sound file such as a `.wav` or a `.ogg` to keeping an identifying reference
    to it via an integer ID, and, of course, playing the sound. When the sound is
    played, it is done so in a non-blocking manner (using a thread behind the scenes)
    that does not interfere with the smooth running of our app or our users' interaction
    with it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`SoundPool`类允许我们保存和操作一系列音效 - 简而言之，一组声音。该类处理从解压声音文件（如`.wav`或`.ogg`）到通过整数ID保持标识引用，当然还包括播放声音的一切。当播放声音时，它是以非阻塞的方式进行的（在幕后使用线程），不会干扰我们的应用程序的流畅运行或用户与之的交互。'
- en: The first thing we need to do is add the sound effects to a folder called `assets`
    in the `main` folder of the game project. We will do this for real shortly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是将音效添加到游戏项目的`main`文件夹中名为`assets`的文件夹中。我们很快就会真正做到这一点。
- en: 'Next, in our Java code, declare an object of the `SoundPool` type and an `int`
    to use as an ID for each sound effect we intend to use. We also declare another
    `int` called `nowPlaying`, which we can use to track which sound is currently
    playing, and we will see how we do this shortly:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的Java代码中，声明一个`SoundPool`类型的对象和一个用作我们打算使用的每个音效的ID的`int`。我们还声明另一个名为`nowPlaying`的`int`，我们可以用它来跟踪当前正在播放的声音，我们很快就会看到我们是如何做到这一点的：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we will look at the two different ways we initialize a `SoundPool` depending
    upon the version of Android the device is using. This is the perfect opportunity
    to use our method of writing different code for different versions of Android.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下我们初始化`SoundPool`的两种不同方式，这取决于设备使用的Android版本。这是使用我们编写不同版本的Android代码的绝佳机会。
- en: Initializing SoundPool the new way
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以新方式初始化SoundPool
- en: The new way involves us using an `AudioAttributes` object to set the attributes
    of the pool of sound we want.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方法涉及我们使用`AudioAttributes`对象来设置我们想要的声音池的属性。
- en: 'In the first block of code we use chaining and call four separate methods on
    one object that initialize our `AudioAttributes` object (`audioAttributes`):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码块中，我们使用链接并在一个对象上调用四个单独的方法来初始化我们的`AudioAttributes`对象(`audioAttributes`)：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the code, we use chaining and the `Builder` method of this class to initialize
    an `AudioAttributes` object to let it know that it will be used for UI interaction
    with `USAGE_ASSISTANCE_SONIFICATION`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们使用链接和这个类的`Builder`方法来初始化一个`AudioAttributes`对象，让它知道它将用于与`USAGE_ASSISTANCE_SONIFICATION`进行UI交互。
- en: We also use the `CONTENT_TYPE_SONIFICATION` value, which lets the class know
    it is for responsive sounds, for example, a user button click, a collision, or
    similar.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用`CONTENT_TYPE_SONIFICATION`值，让该类知道它是用于响应声音，例如用户按钮点击，碰撞或类似情况。
- en: Now we can initialize the `SoundPool` (`sp`) itself by passing in the `AudioAttributes`
    object (`audioAttributes`) and the maximum number of simultaneous sounds we are
    likely to want to play.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过传入`AudioAttributes`对象(`audioAttributes`)和我们可能想要播放的最大同时声音数量来初始化`SoundPool`(`sp`)本身。
- en: The second block of code chains another four methods to initialize `sp`, including
    a call to `setAudioAttributes` that uses the `audioAttributes` object that we
    initialized in the earlier block of chained methods.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个代码块将另外四个方法链接到初始化`sp`，包括调用`setAudioAttributes`，该方法使用我们在之前链接方法块中初始化的`audioAttributes`对象。
- en: Now we can write an `else` block of code that will, of course, have the code
    for the old way of doing things.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写一个`else`代码块，其中当然包含了旧方法的代码。
- en: Initializing SoundPool the old way
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以旧方式初始化SoundPool
- en: 'No need for an `AudioAttributes` object; simply initialize the `SoundPool`
    (`sp`) by passing in the number of simultaneous sounds. The final parameter is
    for sound quality and passing `0` is all we need to do. This is much simpler than
    the new way but also less flexible regarding the choices we can make:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要`AudioAttributes`对象；只需通过传入同时播放的声音数量来初始化`SoundPool`(`sp`)。最后一个参数是声音质量，传入`0`就足够了。这比新方法简单得多，但在我们可以做出的选择方面也不够灵活：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We could use the old way and the newer versions of Android would handle it.
    However, we'd get a warning about using deprecated methods. That is what the official
    documentation says about it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用旧方法，较新版本的Android也可以处理它。但是，我们会收到有关使用已弃用方法的警告。这就是官方文档对此的说法。
- en: Furthermore, the new way gives access to more features, as we saw. And anyway,
    it's a good excuse to look at some simple code to handle different versions of
    Android.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，新方法提供了更多功能，正如我们所看到的。无论如何，这是一个很好的借口来查看处理不同版本Android的一些简单代码。
- en: Now we can go ahead and load up (decompress) the sound files into our `SoundPool`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以加载（解压缩）声音文件到我们的`SoundPool`中。
- en: Loading sound files into memory
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载声音文件到内存
- en: As with our thread control, we are required to wrap our code in `try`-`catch`
    blocks. This makes sense because reading a file can fail for reasons beyond our
    control, but also we are forced to because the method that we use throws an exception
    and the code we write will not compile otherwise.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的线程控制一样，我们需要将我们的代码包装在`try`-`catch`块中。这是有道理的，因为读取文件可能因我们无法控制的原因而失败，而且我们被迫这样做是因为我们使用的方法会抛出异常，否则我们编写的代码将无法编译。
- en: Inside the `try` block, we declare and initialize an object of the `AssetManager`
    and `AssetFileDescriptor` types.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在`try`块中，我们声明并初始化了`AssetManager`和`AssetFileDescriptor`类型的对象。
- en: The `AssetFileDescriptor` instance is initialized by using the `openFd` method
    of the `AssetManager` object, which actually decompresses the sound file. We then
    initialize our ID (`idFX1`) at the same time as we load the contents of `AssetFileDescriptor`
    into our `SoundPool`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`AssetManager`对象的`openFd`方法初始化`AssetFileDescriptor`实例，该方法实际上解压缩声音文件。然后我们初始化我们的ID(`idFX1`)，同时将`AssetFileDescriptor`的内容加载到我们的`SoundPool`中。
- en: 'The `catch` block just outputs a message to the console to let us know if something
    has gone wrong. Note that this code is the same regardless of the Android version:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`catch`块只是向控制台输出一条消息，让我们知道是否出了什么问题。请注意，无论Android版本如何，此代码都是相同的：'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We are ready to make some noise.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备制造一些噪音。
- en: Playing a sound
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 播放声音
- en: At this point, there is a sound effect in our `SoundPool` instance and we have
    an ID by which we can refer to it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们的`SoundPool`实例中有一个音效，并且我们有一个ID可以用来引用它。
- en: This code is the same regardless of how we built the `SoundPool` object and
    this is how we play the sound. Notice in the next line of code that we initialize
    the `nowPlaying` variable with the return value from the same method that plays
    the sound.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们如何构建`SoundPool`对象，这段代码都是相同的，这就是我们播放声音的方式。请注意，在下一行代码中，我们使用相同方法的返回值来初始化`nowPlaying`变量。
- en: 'The following code, therefore, simultaneously plays a sound and loads the value
    of the ID that is being played into `nowPlaying`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下代码同时播放声音并将正在播放的ID的值加载到`nowPlaying`中：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is not necessary to store the ID in `nowPlaying` to play a sound, but it
    has its uses as we will now see.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要将ID存储在`nowPlaying`中来播放声音，但正如我们将要看到的那样，它也有其用途。
- en: 'The parameters of the `play` method are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`play`方法的参数如下：'
- en: The ID of the sound effect
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音效的ID
- en: The left speaker volume and the right speaker volume
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左扬声器音量和右扬声器音量
- en: The priority over other sounds
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对于其他声音的优先级
- en: The number of times to repeat the sound
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复播放声音的次数
- en: The rate/speed it is played (1 is the normal rate)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它播放的速率/速度（1是正常速率）
- en: Just one more thing before we make the sound demo app.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们制作声音演示应用之前，还有一件事。
- en: Stopping a sound
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 停止声音
- en: 'It is also very trivial to stop a sound while it is still playing with the
    `stop` method. Note that there might be more than one sound effect playing at
    any given time, so the `stop` method needs the ID of the sound effect to stop:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`stop`方法在声音仍在播放时停止声音也非常简单。请注意，可能在任何给定时间有多个音效正在播放，因此`stop`方法需要声音效果的ID来停止：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you call `play`, you only need to store the ID of the currently playing
    sound if you want to track it so you can interact with it at a later time. As
    we will see soon, the code to play a sound in the Pong game will look more like
    this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`play`时，如果要跟踪当前播放的声音，只需存储其ID，以便以后可以与其交互。很快我们将看到，在Pong游戏中播放声音的代码看起来更像这样：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous line of code would simply play the chosen sound (`mBeepID`) at
    full volume, with the lowest priority, until it ends with no repeats at the normal
    speed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码将简单地以最大音量播放所选的声音（`mBeepID`），具有最低的优先级，直到以正常速度结束且不重复。
- en: Now we can make the sound demo app.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以制作声音演示应用程序。
- en: Sound demo app introducing the Spinner widget
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音演示应用程序介绍Spinner小部件
- en: Of course, with all this talk of sound effects, we need some actual sound files.
    You can make your own with Bfxr (explained next) or use the ones supplied. The
    sound effects for this app are in the download bundle in the `assets` folder of
    the [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/Sound Demo` folder.
    But you might like to make your own.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，谈到声音效果，我们需要一些实际的声音文件。您可以使用Bfxr制作自己的声音效果（下面解释），也可以使用提供的声音效果。该应用程序的声音效果位于[*第23章*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/Sound
    Demo`文件夹中的下载包的`assets`文件夹中。但您可能想制作自己的声音效果。
- en: Making sound effects
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作声音效果
- en: There is an open source app called Bfxr that allows us to make our own sound
    effects. Here is a very fast guide to making your own sound effects using Bfxr.
    Grab a free copy from [www.bfxr.net](http://www.bfxr.net).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为Bfxr的开源应用程序，可以让我们制作自己的声音效果。以下是使用Bfxr制作自己的声音效果的快速指南。从[www.bfxr.net](http://www.bfxr.net)免费获取一份副本。
- en: Note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the sound effects for the sound demo app are supplied to you in the
    [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/assets` folder. You
    don't have to create your own sound effects unless you want to. It is still worth
    getting this free software and learning how to use it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，声音演示应用程序的声音效果已经在[*第23章*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/assets`文件夹中提供给您。除非您愿意，否则您无需创建自己的声音效果。学习如何使用它仍然是值得的。
- en: 'Follow the simple instructions on the website to set it up. Try out a few of
    these things to make cool sound effects:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 按照网站上的简单说明进行设置。尝试其中一些内容以制作酷炫的声音效果：
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This is a seriously condensed tutorial. You can do so much more with Bfxr. To
    learn more, read the tips on the website at the previous URL. If you have any
    trouble downloading Bfxr, you can use the website to create all your sound effects
    or just use the examples provided.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简化的教程。您可以使用Bfxr做更多事情。要了解更多，请阅读上一个URL网站上的提示。如果您在下载Bfxr时遇到问题，可以使用该网站创建所有您的声音效果，或者只使用提供的示例。
- en: Run Bfxr:![Figure 23.1 – Bfxr page
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Bfxr：![图23.1 – Bfxr页面
- en: '](img/Figure_23.01_B16773.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.01_B16773.jpg)'
- en: Figure 23.1 – Bfxr page
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.1 – Bfxr页面
- en: Try out all the preset types that generate a random sound of that type. When
    you have a sound that is close to what you want, move on to the next step:![Figure
    23.2 – Different effects
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试所有生成该类型随机声音的预设类型。当您有接近所需声音时，继续下一步：![图23.2 – 不同效果
- en: '](img/Figure_23.02_B16773.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.02_B16773.jpg)'
- en: Figure 23.2 – Different effects
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.2 – 不同效果
- en: Use the sliders to fine-tune the pitch, duration, and other aspects of your
    new sound:![Figure 23.3 – Fine-tune your sound
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用滑块微调音调、持续时间和其他方面的新声音：![图23.3 – 调整您的声音
- en: '](img/Figure_23.03_B16773.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.03_B16773.jpg)'
- en: Figure 23.3 – Fine-tune your sound
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.3 – 调整您的声音
- en: Save your sound by clicking the `.wav` too:![Figure 23.4 – The Export Wav button
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击`.wav`按钮保存您的声音：![图23.4 – 导出Wav按钮
- en: '](img/Figure_23.04_B16773.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.04_B16773.jpg)'
- en: Figure 23.4 – The Export Wav button
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.4 – 导出Wav按钮
- en: Android works very well with sounds in the OGG format, so when asked to name
    your file, use the `.ogg` extension at the end of the filename.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android与OGG格式的声音非常兼容，因此在要求命名文件时，请在文件名末尾使用`.ogg`扩展名。
- en: Repeat *steps 2* to *5* to create three cool sound effects. Name them `fx1.ogg`,
    `fx2.ogg`, and `fx3.ogg`. We use the `.ogg` file format as it is more compressed
    than formats such as WAV.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤2*至*5*，创建三个酷炫的音效。将它们命名为`fx1.ogg`，`fx2.ogg`和`fx3.ogg`。我们使用`.ogg`文件格式，因为它比WAV等格式更压缩。
- en: Once you have your sound files ready, we can proceed with the app.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的声音文件准备好，我们就可以继续进行应用程序。
- en: Laying out the sound demo
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布置声音演示
- en: I will describe the parts of the project we are getting used to a little more
    concisely than in previous projects. Every time there is a new concept, however,
    I will be sure to explain it in full. I guess by now you will be fine with dragging
    a few widgets onto a `ConstraintLayout` and changing their `text` properties.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我将更简洁地描述我们正在适应的项目的部分，比以前的项目更简洁。但是，每当有新概念时，我一定会详细解释。我想现在你应该可以轻松地将一些小部件拖放到`ConstraintLayout`上并更改它们的`text`属性。
- en: 'Complete the following steps. If you have any problems at all, you can copy
    or view the code in the [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)
    folder of the download bundle:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下步骤。如果您遇到任何问题，可以在下载包的[*第23章*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)文件夹中复制或查看代码：
- en: Create a new project, call it `Sound Demo`, choose the `TextView` from the `activity_main.xml`
    file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新项目，命名为`Sound Demo`，从`activity_main.xml`文件中选择`TextView`。
- en: Now we will build a layout in the `activity_main.xml` file, so be sure to be
    in design view. In this order, from top to bottom then left to right, drag a `text`
    properties as shown in the next screenshot:![](img/Figure_23.05_B16773.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在`activity_main.xml`文件中构建布局，所以请确保处于设计视图中。按照从上到下，然后从左到右的顺序，拖放`text`属性，如下一张截图所示：![](img/Figure_23.05_B16773.jpg)
- en: Figure 23.5 – Building a layout in the activity_main.xml file
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.5 – 在activity_main.xml文件中构建布局
- en: Click the **Infer Constraints** button.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**推断约束**按钮。
- en: Use the following table to set their properties:![](img/Table_23.1.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下表格设置它们的属性：![](img/Table_23.1.jpg)
- en: 'Next, add the following highlighted code to the `strings.xml` file in the `values`
    folder. We used this array of string resources that is named `spinner_options`
    for the `options` property in the previous step. It will represent the options
    that can be chosen from our `Spinner` widget:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在values文件夹中的strings.xml文件中添加以下突出显示的代码。我们在上一步中使用了名为spinner_options的字符串资源数组作为上一步中options属性的选项。它将表示可以从我们的Spinner小部件中选择的选项：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the app now and you will not initially see anything that we haven''t seen
    before. If you click on the spinner, however, you will see the options from our
    string array called `spinner_options`. We can use the spinner to control the number
    of times a sound effect repeats when played:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，最初您将看不到任何我们以前没有看到的东西。但是，如果您点击下拉列表，您将看到我们称为spinner_options的字符串数组中的选项。我们可以使用下拉列表来控制播放音效时音效重复的次数：
- en: '![Figure 23.6 – spinner_options'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图23.6 - 下拉列表选项'
- en: '](img/Figure_23.06_B16773.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.06_B16773.jpg)'
- en: Figure 23.6 – spinner_options
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.6 - 下拉列表选项
- en: Let's write the Java code to make this app work, including how we interact with
    our spinner.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写Java代码使这个应用程序工作，包括我们如何与我们的下拉列表交互。
- en: Using your operating system's file browser, go to the `app\src\main` folder
    of the project and add a new folder called `assets`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用操作系统的文件浏览器，转到项目的app\src\main文件夹，并添加一个名为assets的新文件夹。
- en: There are three sound files ready-made for you in the [*Chapter 23*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)`/assets`
    folder of the download bundle. Place these three files into the assets directory
    you just created or use the ones you created yourself. The important thing is
    that their filenames are `fx1.ogg`, `fx2.ogg`, and `fx3.ogg`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载包的/assets文件夹中有三个预先准备好的音频文件[*第23章*](B16773_23_ePub_RK.xhtml#_idTextAnchor400)。将这三个文件放入您刚创建的assets目录中，或者使用您自己创建的文件。重要的是它们的文件名是fx1.ogg，fx2.ogg和fx3.ogg。
- en: Coding the sound demo
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写声音演示
- en: 'First, we will change the class declaration so we can handle interaction with
    all our widgets efficiently. Edit the declaration to implement `View.OnClickListener`
    as highlighted next:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将更改类声明，以便我们可以有效地处理所有小部件的交互。编辑声明以实现View.OnClickListener，如下所示：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will add the required `onClick` method shortly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将很快添加所需的onClick方法。
- en: 'Now, we add some member variables for our `SoundPool`, sound effect IDs, `nowPlaying
    int` as previously discussed, and we will also add a `float` to hold a value for
    volume between `0` (silent) and `1` (full volume relative to the current volume
    of the device). We''ll also add an `int` called `repeats` that unsurprisingly
    holds the value of the number of times we will repeat a given sound effect:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们为我们的SoundPool、音效ID、nowPlaying int（如前所述），还将添加一个float来保存音量值，介于0（静音）和1（相对于设备当前音量的最大音量）之间。我们还将添加一个int叫做repeats，它不出所料地保存我们将重复播放给定音效的次数的值：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, in the `onCreate` method, we can get a reference and set a click listener
    for our buttons in the usual way. Add the following code to the project:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在onCreate方法中，我们可以以通常的方式获取引用并为我们的按钮设置点击侦听器。将以下代码添加到项目中：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Still in `onCreate`, we can initialize our `SoundPool` (`sp`) based on the
    version of Android that the device is using. Add the following code to the project:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在onCreate中，我们可以根据设备使用的Android版本初始化我们的SoundPool（sp）。将以下代码添加到项目中：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法为前面的代码添加以下import语句：
- en: '`import android.media.AudioAttributes;`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.media.AudioAttributes;
- en: '`import android.media.AudioManager;`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.media.AudioManager;
- en: '`import android.media.SoundPool;`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.media.SoundPool;
- en: '`import android.os.Build;`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.os.Build;
- en: '`import android.view.View;`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.view.View;
- en: '`import android.widget.Button;`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.widget.Button;
- en: 'Next, we load each of our sound effects in turn and initialize our IDs with
    a value that points to the related sound effect that we load into the `SoundPool`.
    The whole thing is wrapped in a `try`-`catch` block as required. Add the following
    code to the project:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，依次加载我们的每个音效，并使用一个值来初始化我们的ID，该值指向我们加载到SoundPool中的相关音效。整个过程都包裹在try-catch块中。将以下代码添加到项目中：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法为前面的代码添加以下import语句：
- en: '`import android.content.res.AssetFileDescriptor;`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.content.res.AssetFileDescriptor;
- en: '`import android.content.res.AssetManager;`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.content.res.AssetManager;
- en: '`import android.util.Log;`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.util.Log;
- en: '`import java.io.IOException;`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 导入java.io.IOException;
- en: Then we see how we are going to handle the `SeekBar` widget. As you probably
    have come to expect, we will use an anonymous class. We use the `OnSeekBarChangeListener`
    class and override the `onProgressChanged`, `onStartTrackingTouch`, and `onStopTrackingTouch`
    methods.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们看看我们将如何处理SeekBar小部件。正如您可能已经期待的那样，我们将使用一个匿名类。我们使用OnSeekBarChangeListener类并重写onProgressChanged，onStartTrackingTouch和onStopTrackingTouch方法。
- en: 'We only need to add code to the `onProgressChanged` method. Within this method,
    we simply change the value of our volume variable and then use the `setVolume`
    method on our `SoundPool` object, passing in the currently playing sound effect
    and the volume of the left and right channels of sound. Add the following code
    to the project:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在onProgressChanged方法中添加代码。在这个方法中，我们只是改变我们的音量变量的值，然后在我们的SoundPool对象上使用setVolume方法，传入当前播放的音效和左右声道的音量。将以下代码添加到项目中：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Add the following `import` statement for the previous code using your preferred
    method:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法为前面的代码添加以下import语句：
- en: '`import android.widget.SeekBar;`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.widget.SeekBar;
- en: After the `SeekBar` code comes the `Spinner` code and another anonymous class
    to handle user interaction. We use `AdapterView.OnItemSelectedListener` to override
    the `onItemSelected` and `onNothingSelected` methods.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在SeekBar代码之后是Spinner代码和另一个匿名类来处理用户交互。我们使用AdapterView.OnItemSelectedListener来重写onItemSelected和onNothingSelected方法。
- en: 'All our code goes in the `onItemSelected` method, which creates a temporary
    string named `temp` and then uses the `Integer.ValueOf` method to convert the
    string into an `int`, which we can use to initialize the `repeats` variable. Add
    the following code to the project:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的代码都放在`onItemSelected`方法中，该方法创建一个名为`temp`的临时字符串，然后使用`Integer.ValueOf`方法将字符串转换为`int`，我们可以用它来初始化`repeats`变量。将以下代码添加到项目中：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法为以前的代码添加以下`import`语句：
- en: '`import android.widget.AdapterView;`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.widget.AdapterView;
- en: '`import android.widget.Spinner;`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 导入android.widget.Spinner;
- en: That's everything from `onCreate`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`onCreate`的全部内容。
- en: 'Now implement the `onClick` method, which is required because this class implements
    the `View.OnClickListener` interface. Quite simply, there is a `case` statement
    for each button. There is a `case` statement to play each of our three sound effects,
    set the volume, and set the number of times to repeat. Notice that the return
    value for each call to `play` is stored in `nowPlaying`. When the user presses
    the `stop` with the current value of `nowPlaying`, causing the most recently started
    sound effect to stop. Add the following code to the project:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现`onClick`方法，这是必需的，因为这个类实现了`View.OnClickListener`接口。简单地说，每个按钮都有一个`case`语句。有一个`case`语句来播放我们的三种声音效果，设置音量和设置重复次数。请注意，对`play`的每次调用的返回值都存储在`nowPlaying`中。当用户按下`stop`时，`nowPlaying`的当前值会导致最近启动的声音效果停止。将以下代码添加到项目中：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can now run the app. Make sure the volume on your device is turned up if
    you can't hear anything.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行应用程序。如果听不到任何声音，请确保设备的音量已调高。
- en: Click the appropriate button for the sound effect you want to play. Change the
    volume and the number of times it is repeated and, of course, try stopping it
    with the **STOP** button.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 点击适当的按钮以播放所需的声音效果。更改音量和重复次数，当然，尝试使用**STOP**按钮停止它。
- en: Also note you can repeatedly tap multiple play buttons when a sound effect is
    already playing, and the sounds will be played simultaneously up to the maximum
    number of streams (`5`) that we set.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，当一个声音效果正在播放时，您可以重复点击多个播放按钮，声音将同时播放，直到我们设置的最大流数（`5`）。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked closely at the `SoundPool` class, including how we
    can detect which version of Android the user has and vary our code accordingly.
    Then, we used all this knowledge to complete the sound demo app.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仔细研究了`SoundPool`类，包括如何检测用户使用的Android版本并相应地改变我们的代码。然后，我们利用所有这些知识完成了声音演示应用程序。
- en: In the next chapter, we will learn how to make our apps work with multiple different
    layouts.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使我们的应用程序与多种不同的布局配合工作。
