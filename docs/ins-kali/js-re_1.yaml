- en: Chapter 1. Getting Started with Regex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 正则表达式入门
- en: '**Regular expressions** are special kinds of tools used to represent patterns
    syntactically. When working with any type of textual input, you don''t always
    know what the value will be, but you can usually assume (or even demand) the format
    you are going to receive into your application. These types of situations arise
    when you create a regular expression to extract and manipulate this input.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**正则表达式**是用来以语法方式表示模式的特殊工具。在处理任何类型的文本输入时，你并不总是知道值是什么，但你通常可以假设（甚至要求）你将接收到的格式。当你创建一个正则表达式来提取和操作这个输入时，就会出现这种情况。'
- en: Consequently, to match a specific pattern requires a very mechanical syntax,
    since a change in even a single character or two can vastly change the behavior
    of a regular expression and, as a result, the final outcome as well.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要匹配一个特定的模式需要一个非常机械的语法，因为即使是一个或两个字符的变化也会大大改变正则表达式的行为，结果也会相应地改变。
- en: Regular expressions by themselves (or **Regex**, for short) are not specific
    to any single programming language and you can definitely use them in nearly all
    the modern languages straight out of the box. However, different languages have
    implemented Regex with different feature sets and options; in this book, we will
    be taking a look at Regex through **JavaScript**, and its specific implementation
    and functions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式本身（或**Regex**，简称）并不特定于任何单一的编程语言，你绝对可以在几乎所有现代语言中直接使用它们。然而，不同的语言使用不同的功能集和选项实现了正则表达式；在本书中，我们将通过**JavaScript**来看正则表达式及其特定的实现和功能。
- en: It's all about patterns
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一切都是关于模式
- en: Regular expressions are strings that describe a pattern using a specialized
    syntax of characters, and throughout this book, we will be learning about these
    different characters and codes that are used to match and manipulate different
    pieces of data in a vague sort of manner. Now, before we can attempt to create
    a regular expression, we need to be able to spot and describe these patterns (in
    English). Let's take a look at a few different and common examples and later on
    in the book, when we have a stronger grasp on the syntax, we will see how to represent
    these patterns in code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式是用专门的字符语法描述模式的字符串，本书中我们将学习这些不同字符和代码，这些字符和代码用于以模糊的方式匹配和操作不同的数据片段。现在，在我们尝试创建正则表达式之前，我们需要能够发现和描述这些模式（用英语）。让我们看一些不同和常见的例子，稍后在本书中，当我们对语法有更牢固的掌握时，我们将看到如何在代码中表示这些模式。
- en: Analyzing a phone number
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析电话号码
- en: 'Let''s begin with something simple, and take a look at a single phone number:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的事情开始，看一下一个单独的电话号码：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can describe this pattern as being three digits, a dash, then another three
    numbers, followed by a second dash, and finally four more numbers. It is pretty
    simple to do; we look at a string and describe how it is made up, and the preceding
    description will work perfectly if all your numbers follow the given pattern.
    Now, let''s say, we add the following three phone numbers to this set:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以描述这个模式为三个数字，一个破折号，然后另外三个数字，接着是第二个破折号，最后是四个数字。这很简单；我们看着一个字符串描述它是如何组成的，如果你的所有数字都遵循给定的模式，前面的描述就会完美地起作用。现在，假设我们将以下三个电话号码添加到这个集合中：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These are all valid phone numbers, and in your application, you probably want
    to be able to match all of them, giving the user the flexibility to write in whichever
    manner they feel most comfortable. So, let''s have another go at our pattern.
    Now, I would say we have three numbers, optionally inside brackets, then an optional
    dash, another three numbers, followed by another optional dash, and finally four
    more digits. In this example, the only parts that are mandatory are the ten digits:
    the placing of dashes and brackets would completely be up to the user.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是有效的电话号码，在你的应用程序中，你可能希望能够匹配它们所有，让用户可以以他们感觉最舒适的方式写入。所以，让我们再试一次我们的模式。现在，我会说我们有三个数字，可选地在括号内，然后是一个可选的破折号，另外三个数字，接着是另一个可选的破折号，最后是四个数字。在这个例子中，唯一强制的部分是这十个数字：破折号和括号的放置完全取决于用户。
- en: 'Notice also that we haven''t put any constraints on the actual digits, and
    as a matter of fact, we don''t even know what they will be, but we do know that
    they have to be numbers (as opposed to letters, for instance), so we''ve only
    placed this constraint:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的是，我们并没有对实际数字做任何限制，事实上，我们甚至不知道它们将是什么，但我们知道它们必须是数字（与字母相反），所以我们只放置了这个约束：
- en: '![Analyzing a phone number](img/2258OS_01_09.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![分析电话号码](img/2258OS_01_09.jpg)'
- en: Analyzing a simple log file
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析一个简单的日志文件
- en: 'Sometimes, we might have a more specific constraint than just a digit or a
    letter; in other cases, we may want a specific word or at least a word from a
    specific group. In these cases (and mostly with all patterns), the more specific
    you can be, the better. Let''s take the following example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能有比数字或字母更具体的约束；在其他情况下，我们可能希望有一个特定的单词，或者至少是来自特定组的单词。在这些情况下（大多数情况下都是如此），你越具体，越好。让我们看下面的例子：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is an example of some sort of log, of course, and we can simply say that
    each line is a single log message. However, this doesn't help us if we want to
    manipulate or extract the data more specifically. Another option would be to say
    that we have some kind of word in brackets, which refers to the log level, and
    then a message after the dash, which will consist of any number of words. Again,
    this isn't too specific, and our application may only know how to handle the three
    preceding log levels, so, you may want to ignore everything else or raise an error.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这当然是某种日志的示例，我们可以简单地说每一行都是一个单独的日志消息。然而，如果我们想更具体地操作或提取数据，这并没有帮助。另一个选择是说我们在括号中有某种单词，它指的是日志级别，然后是破折号后面的消息，它将由任意数量的单词组成。同样，这并不太具体，我们的应用程序可能只知道如何处理前面三个日志级别，所以你可能想忽略其他一切或引发错误。
- en: 'To best describe the preceding pattern, we would say that you have a word,
    which can either be info, a warning, or an error inside a pair of square brackets,
    followed by a dash and then some sort of sentence, which makes up the log message.
    This will allow us to capture the information from the log more accurately and
    make sure our system is ready to handle the data before we send it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最好地描述前面的模式，我们可以说你有一个单词，它可以是info、warning或error，位于一对方括号内，然后是一个破折号，然后是一些句子，构成了日志消息。这将允许我们更准确地捕获日志中的信息，并确保我们的系统准备好在发送之前处理数据：
- en: '![Analyzing a simple log file](img/2258OS_01_10.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![分析简单的日志文件](img/2258OS_01_10.jpg)'
- en: Analyzing an XML file
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析XML文件
- en: 'The last example I want to discuss is when your pattern relies on itself; a
    perfect example of this is with something like **XML**. In XML you may have the
    following markup:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我想讨论的最后一个例子是当你的模式依赖于自身时；XML就是一个完美的例子。在XML中，你可能有以下标记：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We could just say that the pattern consists of a tag, some text, and a closing
    tag. This isn''t really specific enough for it to be a valid XML, since the closing
    tag has to match the opening one. So, if we define the pattern again, we would
    say that it contains some text wrapped by an opening tag on the left-hand side
    and a matching closing tag on the right-hand side:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说模式由一个标签、一些文本和一个闭合标签组成。这对于它是一个有效的XML来说并不够具体，因为闭合标签必须与开放标签匹配。因此，如果我们重新定义模式，我们会说它包含左侧由开放标签包裹的一些文本，右侧是匹配的闭合标签：
- en: '![Analyzing an XML file](img/2258OS_01_11.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![分析XML文件](img/2258OS_01_11.jpg)'
- en: The last three examples were just used to get us into the Regex train of thought;
    these are just a few of the common types of patterns and constraints, which you
    can use in your own applications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后三个例子只是用来让我们进入正则表达式的思维方式；这些只是一些常见类型的模式和约束，你可以在自己的应用程序中使用。
- en: Now that we know what kind of patterns we can create, let's take a moment to
    discuss what we can do with them; this includes the actual features and functions
    JavaScript provides to allow us to use these patterns once they're made.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道可以创建什么样的模式，让我们花一点时间讨论一下我们可以用这些模式做什么；这包括JavaScript提供的实际功能和函数，允许我们在创建模式后使用它们。
- en: Regex in JavaScript
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript中的正则表达式
- en: In JavaScript, regular expressions are implemented as their own type of object
    (such as the `RegExp` object). These objects store patterns and options and can
    then be used to test and manipulate strings.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，正则表达式被实现为它们自己的类型的对象（比如`RegExp`对象）。这些对象存储模式和选项，然后可以用于测试和操作字符串。
- en: To start playing with regular expressions, the easiest thing to do is to enable
    a JavaScript console and play around with the values. The easiest way to get a
    console is to open up a browser, such as **Chrome**, and then open the JavaScript
    console on any page (press the *command* + *option* + *J* on a Mac or *Ctrl* +
    *Shift* + *J*).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用正则表达式，最简单的方法是启用JavaScript控制台并尝试不同的值。获取控制台的最简单方法是打开浏览器，比如**Chrome**，然后在任何页面上打开JavaScript控制台（在Mac上按*command*
    + *option* + *J*，在Windows上按*Ctrl* + *Shift* + *J*）。
- en: Let's start by creating a simple regular expression; we haven't yet gotten into
    the specifics of the different special characters involved, so for now, we will
    just create a regular expression that matches a word. For example, we will create
    a regular expression that matches `hello`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个简单的正则表达式开始；我们还没有深入讨论涉及的不同特殊字符的具体内容，所以现在，我们将创建一个只匹配一个单词的正则表达式。例如，我们将创建一个匹配`hello`的正则表达式。
- en: The RegExp constructor
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RegExp构造函数
- en: 'Regular expressions can be created in two different ways in JavaScript, similar
    to the ones used in strings. There is a more explicit definition, where you call
    the constructor function and pass it the pattern of your choice (and optionally
    any settings as well), and then, there is the literal definition, which is a shorthand
    for the same process. Here is an example of both (you can type this straight into
    the JavaScript console):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，正则表达式可以以两种不同的方式创建，类似于字符串中使用的方式。有一个更明确的定义，你可以调用构造函数并传递你选择的模式（以及可选的任何设置），然后有一个文字定义，这是同样过程的简写。这是两种方式的例子（你可以直接在JavaScript控制台中输入）：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Both these variables are essentially the same, it''s pretty much a personal
    preference as to which you would use. The only real difference is that with the
    constructor method you use a string to create an expression: therefore, you have
    to make sure to escape any special characters beforehand, so it gets through to
    the regular expression.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个变量本质上是相同的，你可以根据个人喜好选择使用哪一个。唯一的区别是，使用构造函数方法时，你使用一个字符串来创建一个表达式：因此，你必须确保提前转义任何特殊字符，以便它传递到正则表达式。
- en: Besides a pattern, both forms of Regex constructors accept a second parameter,
    which is a string of flags. **Flags** are like settings or properties, which are
    applied on the entire expression and can therefore change the behavior of both
    the pattern and its methods.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了模式，正则表达式的两种形式的构造函数都接受第二个参数，这是一个标志字符串。**标志**就像设置或属性，它们应用于整个表达式，因此可以改变模式及其方法的行为。
- en: Using pattern flags
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用模式标志
- en: The first flag I would like to cover is the **ignore case** or **i** flag. Standard
    patterns are case sensitive, but if you have a pattern that can be in either case,
    this is a good option to set, allowing you to specify only one case and have the
    modifier adjust this for you, keeping the pattern short and flexible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要介绍的第一个标志是**忽略大小写**或**i**标志。标准模式是区分大小写的，但如果你有一个可以是任何大小写的模式，这是一个很好的选项，允许你只指定一个大小写，并且让修改器为你调整，使模式简短和灵活。
- en: The next flag is the **multiline** or **m** flag, and this makes JavaScript
    treat each line in the string as essentially the start of a new string. So, for
    example, you could say that a string must start with the letter **a**. Usually,
    JavaScript would test to see if the entire string starts with the letter a, but
    with the m flag, it will test this constraint against each line individually,
    so any of the lines can pass this test by starting with a.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的标志是**多行**或**m**标志，这使JavaScript将字符串中的每一行基本上视为新字符串的开始。例如，您可以说字符串必须以字母**a**开头。通常，JavaScript会测试整个字符串是否以字母a开头，但使用m标志，它将针对每行单独测试此约束，因此任何行都可以通过以a开头的测试。
- en: The last flag is the **global** or **g** flag. Without this flag, the `RegExp`
    object only checks whether there is a match in the string, returning on the first
    one that's found; however, in some situations, you don't just want to know if
    the string matches, you may want to know about all the matches specifically. This
    is where the global flag comes in, and when it's used, it will modify the behavior
    of the different `RegExp` methods to allow you to get to all the matches, as opposed
    to only the first.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个标志是**全局**或**g**标志。没有这个标志，`RegExp`对象只检查字符串中是否有匹配，只返回找到的第一个匹配；然而，在某些情况下，您不只是想知道字符串是否匹配，您可能想要了解所有特定的匹配。这就是全局标志的作用，当使用时，它将修改不同`RegExp`方法的行为，允许您获取所有匹配，而不仅仅是第一个。
- en: 'So, continuing from the preceding example, if we wanted to create the same
    pattern, but this time, with the case set as insensitive and using global flags,
    we would write something similar to this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，继续从前面的例子，如果我们想创建相同的模式，但这次，大小写不敏感并使用全局标志，我们会写类似于这样的内容：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the rgx.test method
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用rgx.test方法
- en: 'Now that we have created our regular expression objects, let''s use its simplest
    function, the `test` function. The `test` method only returns `true` or `false`,
    based on whether a string matches a pattern or not. Here is an example of it in
    action:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的正则表达式对象，让我们使用它最简单的函数，即`test`函数。`test`方法只根据字符串是否与模式匹配返回`true`或`false`。这是它的一个示例：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, the first string matches and returns true, and the second string
    does not contain `hello`, so it returns `false`, and finally the last string *matches
    the pattern*. In the pattern, we did not specify that the string had to only contain
    `hello`, so it matches the last string and returns `true`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，第一个字符串匹配并返回true，第二个字符串不包含`hello`，因此返回`false`，最后一个字符串*匹配模式*。在模式中，我们没有指定字符串必须只包含`hello`，因此它匹配最后一个字符串并返回`true`。
- en: Using the rgx.exec method
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用rgx.exec方法
- en: The next method on the `RegExp` object, is the `exec` function, which, instead
    of just checking whether the pattern matches the text or not, `exec` also returns
    some information about the match. For this example, let's create another regular
    expression, and get `index` for the start of the pattern;
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`RegExp`对象的下一个方法是`exec`函数，它不仅仅是检查模式是否与文本匹配，`exec`还返回有关匹配的一些信息。例如，让我们创建另一个正则表达式，并获取模式的起始`index`；'
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see here, the result from the function contains the actual match
    as the first element (`rgx.exec("world !!")[0];`) and if you `console.dir` the
    results, you will see it also contains two properties: `index` and `input`, which
    store the starting `index` property and complete the `input` text, respectively.
    If there are no matches, the function will return `null`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在这里所见，函数的结果包含实际匹配作为第一个元素（`rgx.exec("world !!")[0];`），如果您`console.dir`结果，您还会看到它还包含两个属性：`index`和`input`，分别存储起始`index`属性和完整的`input`文本。如果没有匹配，函数将返回`null`：
- en: '![Using the rgx.exec method](img/2258OS_01_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用rgx.exec方法](img/2258OS_01_01.jpg)'
- en: The string object and regular expressions
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串对象和正则表达式
- en: Besides these two methods on the `RegExp` object itself, there are a few methods
    on the string object that accept the `RegExp` object as a parameter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`RegExp`对象本身的这两种方法之外，字符串对象上还有一些接受`RegExp`对象作为参数的方法。
- en: Using the String.replace method
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用String.replace方法
- en: 'The most commonly used method is the `replace` method. As an example, let''s
    say we have the `foo foo` string and we want to change it to `qux qux`. Using
    `replace` with a string would only switch the first occurrence, as shown here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的方法是`replace`方法。例如，假设我们有`foo foo`字符串，我们想将其更改为`qux qux`。使用带有字符串的`replace`只会切换第一次出现，如下所示：
- en: '![Using the String.replace method](img/2258OS_01_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![使用String.replace方法](img/2258OS_01_02.jpg)'
- en: 'In order to replace all the occurrences, we need to supply a `RegExp` object
    that has the `g` flag, as shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了替换所有出现的情况，我们需要提供一个带有`g`标志的`RegExp`对象，如下所示：
- en: '![Using the String.replace method](img/2258OS_01_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![使用String.replace方法](img/2258OS_01_03.jpg)'
- en: Using the String.search method
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用String.search方法
- en: 'Next, if you just want to find the (zero-based) index of the first match in
    a string, you can use the `search` method:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果您只想在字符串中找到第一个匹配的（从零开始的）索引，您可以使用`search`方法：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the String.match method
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用String.match方法
- en: 'The last method I want to talk about right now is the `match` function. This
    function returns the same output as the `exec` function we saw earlier when there
    was no `g` flag (it includes the `index` and `input` properties), but returned
    a regular `Array` of all the matches when the `g` flag was set. Here is an example
    of this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在要谈论的最后一个方法是`match`函数。当设置了`g`标志时，此函数返回与我们之前看到的`exec`函数相同的输出（包括`index`和`input`属性），但返回了所有匹配的常规`Array`。这是一个例子：
- en: '![Using the String.match method](img/2258OS_01_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![使用String.match方法](img/2258OS_01_04.jpg)'
- en: We have taken a quick pass through the most common uses of regular expressions
    in JavaScript (code-wise), so we are now ready to build our `RegExp` testing page,
    which will help us explore the actual syntax of Regex without combining it with
    JavaScript code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经快速浏览了JavaScript中正则表达式的最常见用法（代码方面），所以现在我们准备构建我们的`RegExp`测试页面，这将帮助我们探索实际的正则表达式语法，而不将其与JavaScript代码结合在一起。
- en: Building our environment
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的环境
- en: In order to test our Regex patterns, we will build an **HTML** form, which will
    process the supplied pattern and match it against a string.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的正则表达式模式，我们将构建一个**HTML**表单，该表单将处理提供的模式并将其与字符串匹配。
- en: 'I am going to keep all the code in a single file, so let''s start with the
    head of the HTML document:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把所有的代码放在一个文件中，所以让我们从HTML文档的头部开始：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt Publishing图书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: It is a fairly standard document head, and contains a title and some styles.
    Besides this, I am including the bootstrap **CSS** framework for design, and the
    jQuery library to help with the **DOM** manipulation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当标准的文档头，包含了标题和一些样式。除此之外，我还包括了用于设计的bootstrap **CSS**框架和jQuery库来帮助进行**DOM**操作。
- en: 'Next, let''s create the form and result area in the body:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在页面中创建表单和结果区域：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Most of this code is boilerplate HTML required by the Bootstrap library for
    styling; however, the gist of it is that we have two inputs: one for some text
    and the other for the pattern to match against it. We have a button to submit
    the form (the `Test!` button) and an extra `div` to display the results.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分代码是Bootstrap库所需的样式的样板HTML；然而，要点是我们有两个输入：一个用于一些文本，另一个用于匹配的模式。我们有一个提交表单的按钮（`Test!`按钮）和一个额外的`div`来显示结果。
- en: 'Opening this page in your browser should show you something similar to this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开此页面应该会显示类似于这样的内容：
- en: '![Building our environment](img/2258OS_01_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的环境](img/2258OS_01_05.jpg)'
- en: Handling a submitted form
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理提交的表单
- en: 'The last thing we need to do is handle the form being submitted and run a regular
    expression. I broke the code into helper functions to help with the code flow
    when we go through it now. To begin with, let''s write the full-click handler
    for the submit (`Test!`) button (this should go where I''ve inserted the comment
    in the script tags):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是处理表单的提交并运行正则表达式。我将代码分成了辅助函数，以帮助我们在浏览代码时进行代码流。首先，让我们为提交（`Test!`）按钮编写完整的点击处理程序（应该放在脚本标签中的注释处）：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first four lines select the corresponding DOM element from the page using
    jQuery, and store them for use throughout the application. This is a best practice
    when the DOM is static, instead of selecting the element each time you use it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前四行使用jQuery从页面中选择相应的DOM元素，并将它们存储以供整个应用程序使用。这是一种最佳实践，当DOM是静态的时候，而不是每次使用时选择元素。
- en: The rest of the code is the click handler for the submit (`Test!`) button. In
    the function that handles the `Test!` button, we start by clearing the results
    and errors from the previous run. Next, we pull in the values from the two text
    boxes and handle the cases where they are empty using a function called `err`,
    which we will take a look at in a moment. If the two values are fine, we attempt
    to create a new `RegExp` object and we get their results using two other functions
    I wrote called `createRegex` and `getMatches`, respectively. Finally, the last
    conditional block checks whether there were results and displays either a **No
    Matches Found** message or an element on the page that will show individual matches
    using `getMatchesCountString` to display how many matches were found and `getResultsString`
    to display the actual matches in `string`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码是提交（`Test!`）按钮的点击处理程序。在处理`Test!`按钮的函数中，我们首先清除上一次运行的结果和错误。接下来，我们从两个文本框中获取值，并使用一个名为`err`的函数处理它们为空的情况，我们稍后会看一下这个函数。如果两个值都正常，我们尝试创建一个新的`RegExp`对象，并使用我编写的另外两个函数`createRegex`和`getMatches`来获取它们的结果。最后，最后一个条件块检查是否有结果，并显示**未找到匹配**消息或页面上的一个元素，该元素将使用`getMatchesCountString`显示找到了多少个匹配项，并使用`getResultsString`显示实际的匹配项。
- en: Resetting matches and errors
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重置匹配和错误
- en: 'Now, let''s take a look at some of these helper functions, starting with `err`
    and `clearResultsAndErrors`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下一些辅助函数，从`err`和`clearResultsAndErrors`开始：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first function clears the text from the results element and then hides the
    previous errors, and the second function un-hides the alert element and adds the
    error passed in as a parameter.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数清除结果元素中的文本，然后隐藏先前的错误，第二个函数取消隐藏警报元素，并将传递的错误添加为参数。
- en: Creating a regular expression
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建正则表达式
- en: 'The next function I want to take a look at is in charge of creating the actual
    `RegExp` object from the value given in the textbox:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要看的下一个函数负责从文本框中给定的值创建实际的`RegExp`对象。
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you try and create a `RegExp` object with flags that don't exist or invalid
    parameters, it will throw an exception. Therefore, we need to wrap the `RegExp`
    creation in a `try`/`catch` block, so that we can catch the error and display
    an error for it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试使用不存在的标志或无效参数创建`RegExp`对象，它将抛出异常。因此，我们需要将`RegExp`的创建包装在`try`/`catch`块中，以便我们可以捕获错误并显示错误。
- en: Inside the `try` section, we will handle two different kinds of `RegExp` input,
    the first is when you use forward slashes in your expressions. In this situation,
    we split this expression by forward slashes, remove the first element, which will
    be an empty string (the text before it is the first forward slash), and then pop
    off the last element which is supposed to be in the form of flags.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`try`部分内，我们将处理两种不同的`RegExp`输入，第一种是当您在表达式中使用斜杠时。在这种情况下，我们通过斜杠分割表达式，移除第一个元素（即空字符串，它之前的文本是第一个斜杠），然后弹出最后一个元素，它应该是标志的形式。
- en: We then recombine the remaining parts back into a string and pass it in along
    with the flags into the `RegExp` constructor. The other case we are dealing with
    is where you wrote a string, and then we are simply going to pass this pattern
    to the constructor with only the `g` flag, so as to get multiple results.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将剩余的部分重新组合成一个字符串，并将其与标志一起传递给`RegExp`构造函数。我们正在处理的另一种情况是，您输入了一个字符串，然后我们将只使用`g`标志将此模式传递给构造函数，以便获得多个结果。
- en: Executing RegExp and extracting its matches
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行RegExp并提取其匹配项
- en: 'The next function we have is for actually cycling through the `regex` object
    and getting `results` from different matches:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的函数是用于实际循环遍历`regex`对象并从不同的匹配中获取`results`的函数：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have already seen the `exec` command earlier and how it returns a `results`
    object for each match, but the `exec` method actually works differently, depending
    on whether the global flag (`g`) is set or not. If it is not set, it will constantly
    just return the first match, no matter how many times you call it, but if it is
    set, the function will cycle through the results until the last match returns
    `null`. In the function, the global flag is set, I use a while loop to cycle through
    `results` and push each one into the `results` array, whereas if it is not set,
    I simply call `function` once and push only if the first match on.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了之前的`exec`命令以及它如何为每个匹配返回一个`results`对象，但`exec`方法实际上根据是否设置了全局标志（`g`）而有所不同。如果没有设置，它将始终只返回第一个匹配，无论您调用多少次，但如果设置了，该函数将循环遍历结果，直到最后一个匹配返回`null`。在该函数中，如果设置了全局标志，我使用while循环来循环遍历`results`并将每个匹配推入`results`数组中，而如果没有设置，我只调用一次`function`并且只在第一个匹配时推入。
- en: 'Next, we have a function that will create a string that displays how many matches
    we have (either one or more):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个函数，它将创建一个显示我们有多少匹配项（一个或多个）的字符串：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we have `function`, which will cycle through the `results` array and
    create an HTML string to display on the page:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个`function`，它将循环遍历`results`数组并创建一个HTML字符串以在页面上显示：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Inside `function`, we cycle through a list of matches and for each one, we cut
    the string and wrap the actual match inside a label for styling purposes. We need
    to cycle through the list in reverse order as we are changing the actual text
    by adding labels and also so as to change the indexes. In order to keep in sync
    with the indexes from the `results` array, we modify `text` from the end, keeping
    `text` that occurs before it, the same.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在`function`内部，我们循环遍历匹配列表，对于每一个匹配，我们会切割字符串并将实际匹配内容包裹在标签中以进行样式设置。我们需要按照相反的顺序循环遍历列表，因为我们正在通过添加标签来改变实际文本，同时也需要改变索引。为了与`results`数组中的索引保持同步，我们从末尾修改`text`，保持其之前的部分不变。
- en: Testing our application
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的应用程序
- en: 'If everything goes as planned, we should now be able to test the application.
    For example, let''s say we enter the `Hello World` string as the text and add
    the `l` pattern (which if you remember will be similar to entering `/l/g` into
    our application), you should get something similar to this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们现在应该能够测试应用程序。例如，假设我们输入`Hello World`字符串作为文本，并添加`l`模式（如果您记得的话，这将类似于在我们的应用程序中输入`/l/g`），您应该会得到类似于这样的结果：
- en: '![Testing our application](img/2258OS_01_06.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的应用程序](img/2258OS_01_06.jpg)'
- en: 'Whereas, if we specify the same pattern, though without the global flag, we
    would only get the first match:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 而如果我们指定相同的模式，但没有全局标志，我们将只得到第一个匹配：
- en: '![Testing our application](img/2258OS_01_07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的应用程序](img/2258OS_01_07.jpg)'
- en: 'Of course, if you leave out a field or specify an invalid pattern, our error
    handling will kick in and provide an appropriate message:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果您遗漏了某个字段或指定了无效的模式，我们的错误处理将会启动并提供适当的消息：
- en: '![Testing our application](img/2258OS_01_08.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的应用程序](img/2258OS_01_08.jpg)'
- en: With this all working as expected, we are now ready to start learning Regex
    by itself, without having to worry about the JavaScript code alongside it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都按预期工作，我们现在准备开始学习正则表达式本身，而不必担心旁边的JavaScript代码。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a look at what a pattern actually is, and at the kind
    of data we are able to represent. Regular expressions are simply strings that
    express these patterns, and combined with functions provided by JavaScript, we
    are able to match and manipulate user data.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下模式实际上是什么，以及我们能够表示的数据类型。正则表达式只是表达这些模式的字符串，结合JavaScript提供的函数，我们能够匹配和操作用户数据。
- en: We also covered building a quick `RegExp` builder that allowed us to get a first-hand
    look at how to use regular expressions in a real-world setting. In the next chapter,
    we will continue to use this testing tool to start exploring the `RegExp` syntax.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了构建一个快速的`RegExp`构建器，它使我们能够第一手了解如何在实际环境中使用正则表达式。在下一章中，我们将继续使用这个测试工具来开始探索`RegExp`语法。
