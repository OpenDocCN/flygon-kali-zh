["```java\nclass Person implements Comparable<Person> {\n    private int age;\n    private String name;\n    public Person(int age, String name) {\n        this.age = age;\n        this.name = name == null ? \"\" : name;\n    }\n    public int getAge(){ return this.age; }\n    public String getName(){ return this.name; }\n    @Override\n    public int compareTo(Person p){\n        int result = this.name.compareTo(p.getName());\n        if (result != 0) {\n            return result;\n        }\n        return this.age - p.getAge();\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null) return false;\n        if(!(o instanceof Person)) return false;\n        Person person = (Person)o;\n        return age == person.getAge() &&\n               Objects.equals(name, person.getName()); //line 25\n    }\n    @Override\n    public int hashCode(){\n        return Objects.hash(age, name);\n    }\n    @Override\n    public String toString() {\n        return \"Person{age=\" + age + \", name=\" + name + \"}\";\n    }\n}\n```", "```java\nboolean equals(Object a, Object b) {\n    return (a == b) || (a != null && a.equals(b));\n}\n```", "```java\nboolean deepEquals(Object a, Object b) {\n    if (a == b)\n        return true;\n    else if (a == null || b == null)\n        return false;\n    else\n        return Arrays.deepEquals0(a, b);\n}\n```", "```java\nInteger[] as1 = {1,2,3};\nInteger[] as2 = {1,2,3};\nSystem.out.println(Arrays.equals(as1, as2));        //prints: true\nSystem.out.println(Arrays.deepEquals(as1, as2));    //prints: true\n\nSystem.out.println(Objects.equals(as1, as2));        //prints: false\nSystem.out.println(Objects.deepEquals(as1, as2));    //prints: true\n\nInteger[][] aas1 = {{1,2,3},{1,2,3}};\nInteger[][] aas2 = {{1,2,3},{1,2,3}};\nSystem.out.println(Arrays.equals(aas1, aas2));       //prints: false\nSystem.out.println(Arrays.deepEquals(aas1, aas2));   //prints: true\n\nSystem.out.println(Objects.equals(aas1, aas2));       //prints: false\nSystem.out.println(Objects.deepEquals(aas1, aas2));   //prints: true\n\n```", "```java\nSystem.out.println(Objects.hash(\"s1\"));           //prints: 3645\nSystem.out.println(Objects.hashCode(\"s1\"));       //prints: 3614\n\n```", "```java\nSystem.out.println(Objects.hash(null));      //prints: 0\nSystem.out.println(Objects.hashCode(null));  //prints: 0\n\n```", "```java\nString object = null;\n\nSystem.out.println(object == null);           //prints: true\nSystem.out.println(Objects.isNull(object));   //prints: true\n\nSystem.out.println(object != null);           //prints: false\nSystem.out.println(Objects.nonNull(object));  //prints: false\n```", "```java\n      String object = null;\n      try {\n          Objects.requireNonNull(object);\n      } catch (NullPointerException ex){\n          System.out.println(ex.getMessage());  //prints: null\n      }\n```", "```java\n      String object = null;\n      try {\n          Objects.requireNonNull(object, \"Parameter 'object' is null\");\n      } catch (NullPointerException ex){\n          System.out.println(ex.getMessage());  \n          //Parameter 'object' is null\n      }\n```", "```java\n      String object = null;\n      Supplier<String> msg1 = () -> {\n          String msg = \"Msg from db\";\n          //get the corresponding message from database\n          return msg;\n      };\n      try {\n          Objects.requireNonNull(object, msg1);\n      } catch (NullPointerException ex){\n          System.out.println(ex.getMessage());  //prints: Msg from db\n      }\n      Supplier<String> msg2 = () -> null;\n      try {\n          Objects.requireNonNull(object, msg2);\n      } catch (NullPointerException ex){\n          System.out.println(ex.getMessage());  //prints: null\n      }\n      Supplier<String> msg3 = null;\n      try {\n          Objects.requireNonNull(object, msg3);\n      } catch (NullPointerException ex){\n          System.out.println(ex.getMessage());  //prints: null\n      }\n```", "```java\n      String object = null;\n      System.out.println(Objects.requireNonNullElse(object, \n                              \"Default value\"));   \n                              //prints: Default value\n      try {\n          Objects.requireNonNullElse(object, null);\n      } catch (NullPointerException ex){\n          System.out.println(ex.getMessage());     //prints: defaultObj\n      }\n```", "```java\n      String object = null;\n      Supplier<String> msg1 = () -> {\n          String msg = \"Msg from db\";\n          //get the corresponding message from database\n          return msg;\n      };\n      String s = Objects.requireNonNullElseGet(object, msg1);\n      System.out.println(s);                //prints: Msg from db\n\n      Supplier<String> msg2 = () -> null;\n      try {\n       System.out.println(Objects.requireNonNullElseGet(object, msg2));\n      } catch (NullPointerException ex){\n       System.out.println(ex.getMessage()); //prints: supplier.get()\n      }\n      try {\n       System.out.println(Objects.requireNonNullElseGet(object, null));\n      } catch (NullPointerException ex){\n       System.out.println(ex.getMessage()); //prints: supplier\n      }\n```", "```java\nList<String> list = List.of(\"s0\", \"s1\");\ntry {\n    Objects.checkIndex(3, list.size());\n} catch (IndexOutOfBoundsException ex){\n    System.out.println(ex.getMessage());  \n                         //prints: Index 3 out-of-bounds for length 2\n}\ntry {\n    Objects.checkFromIndexSize(1, 3, list.size());\n} catch (IndexOutOfBoundsException ex){\n    System.out.println(ex.getMessage());  \n                //prints: Range [1, 1 + 3) out-of-bounds for length 2\n}\n\ntry {\n    Objects.checkFromToIndex(1, 3, list.size());\n} catch (IndexOutOfBoundsException ex){\n    System.out.println(ex.getMessage());  \n                    //prints: Range [1, 3) out-of-bounds for length 2\n}\n```", "```java\nint diff = Objects.compare(\"a\", \"c\", Comparator.naturalOrder());\nSystem.out.println(diff);  //prints: -2\ndiff = Objects.compare(\"a\", \"c\", Comparator.reverseOrder());\nSystem.out.println(diff);  //prints: 2\ndiff = Objects.compare(3, 5, Comparator.naturalOrder());\nSystem.out.println(diff);  //prints: -1\ndiff = Objects.compare(3, 5, Comparator.reverseOrder());\nSystem.out.println(diff);  //prints: 1\n\n```", "```java\n@Override\npublic int compareTo(Person p){\n    int result = Objects.compare(this.name, p.getName(),\n                                         Comparator.naturalOrder());\n    if (result != 0) {\n        return result;\n    }\n    return Objects.compare(this.age, p.getAge(), \n                                         Comparator.naturalOrder());\n}\n```", "```java\nPerson p1 = new Person(15, \"Zoe\");\nPerson p2 = new Person(45, \"Adam\");\nPerson p3 = new Person(37, \"Bob\");\nPerson p4 = new Person(30, \"Bob\");\nList<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4));\nSystem.out.println(list);//[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}]\nCollections.sort(list);\nSystem.out.println(list);//[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}] \n```", "```java\n@Override\npublic int compareTo(Person p){\n    int result = Objects.compare(this.name, p.getName(),\n                                         Comparator.reverseOrder());\n    if (result != 0) {\n        return result;\n    }\n    return Objects.compare(this.age, p.getAge(), \n                                         Comparator.naturalOrder());\n}\n```", "```java\nPerson p1 = new Person(15, \"Zoe\");\nPerson p2 = new Person(45, \"Adam\");\nPerson p3 = new Person(37, \"Bob\");\nPerson p4 = new Person(30, \"Bob\");\nList<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4));\nSystem.out.println(list);//[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}]\nCollections.sort(list);\nSystem.out.println(list);//[{15, Zoe}, {30, Bob}, {37, Bob}, {45, Adam}] \n```", "```java\nList<String> list = new ArrayList<>(List.of(\"s0 \"));\nlist.add(null);\nfor(String e: list){\n    System.out.print(e);                   //prints: s0 null\n}\nSystem.out.println();\nfor(String e: list){\n    System.out.print(Objects.toString(e)); //prints: s0 null\n}\nSystem.out.println();\nfor(String e: list){\n    System.out.print(Objects.toString(e, \"element was null\")); \n                                        //prints: s0 element was null\n}\n```", "```java\n@Override\npublic int compareTo(Person p){\n    int result = ObjectUtils.compare(this.name, p.getName());\n    if (result != 0) {\n        return result;\n    }\n    return ObjectUtils.compare(this.age, p.getAge());\n}\n```", "```java\nPerson p1 = new Person(15, \"Zoe\");\nPerson p2 = new Person(45, \"Adam\");\nPerson p3 = new Person(37, \"Bob\");\nPerson p4 = new Person(30, \"Bob\");\nPerson p5 = new Person(25, null);\nList<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));\nSystem.out.println(list);  //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25, }]\nCollections.sort(list);\nSystem.out.println(list);  //[{25, }, {45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}]\n\n```", "```java\n@Override\npublic String toString() {\n    //return \"{\" + age + \", \" + name + \"}\";\n    return \"{\" + age + \", \" + Objects.toString(name, \"\") + \"}\";\n}\n```", "```java\n@Override\npublic int compareTo(Person p){\n    int result = ObjectUtils.compare(this.name, p.getName(), true);\n    if (result != 0) {\n        return result;\n    }\n    return ObjectUtils.compare(this.age, p.getAge());\n}\n```", "```java\nPerson p1 = new Person(15, \"Zoe\");\nPerson p2 = new Person(45, \"Adam\");\nPerson p3 = new Person(37, \"Bob\");\nPerson p4 = new Person(30, \"Bob\");\nPerson p5 = new Person(25, null);\nList<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));\nSystem.out.println(list);  \n               //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25, }]\nCollections.sort(list);\nSystem.out.println(list);  \n               //[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }]\n\n```", "```java\nPerson p1 = new Person(15, \"Zoe\");\nPerson p2 = new Person(45, \"Adam\");\nPerson p3 = new Person(37, \"Bob\");\nPerson p4 = new Person(30, \"Bob\");\nPerson p5 = new Person(25, null);\nList<Person> list = new ArrayList<>(List.of(p1, p2, p3, p4, p5));\nlist.add(null);\nSystem.out.println(list);  \n        //[{15, Zoe}, {45, Adam}, {37, Bob}, {30, Bob}, {25, }, null]\nCollections.sort(list, \n Comparator.nullsLast(Comparator.naturalOrder()));\nSystem.out.println(list);  \n        //[{45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }, null]\n```", "```java\nCollections.sort(list, \n                   Comparator.nullsFirst(Comparator.naturalOrder()));\nSystem.out.println(list);  \n        //[null, {45, Adam}, {30, Bob}, {37, Bob}, {15, Zoe}, {25, }]\n\n```", "```java\nString s = \"s0 \" + ObjectUtils.identityToString(\"s1\");\nSystem.out.println(s);  //prints: s0 java.lang.String@5474c6c\n\nStringBuffer sb = new StringBuffer();\nsb.append(\"s0\");\nObjectUtils.identityToString(sb, \"s1\");\nSystem.out.println(s);  //prints: s0 java.lang.String@5474c6c\n\n```", "```java\nString s = ObjectUtils.mode(\"s0\", \"s1\", \"s1\");\nSystem.out.println(s);     //prints: s1\n\ns = ObjectUtils.mode(\"s0\", \"s1\", \"s2\");\nSystem.out.println(s);     //prints: null\n\ns = ObjectUtils.mode(\"s0\", \"s1\", \"s2\", \"s1\", \"s2\");\nSystem.out.println(s);     //prints: null\n\ns = ObjectUtils.mode(null);\nSystem.out.println(s);     //prints: null\n\ns = ObjectUtils.mode(\"s0\", null, null);\nSystem.out.println(s);     //prints: null\n\n```", "```java\nList<String> list = \n  List.of(\"That\", \"is\", \"the\", \"way\", \"to\", \"build\", \"a\", \"sentence\");\nStringBuilder sb = new StringBuilder();\nfor(String s: list){\n    sb.append(s).append(\" \");\n}\nString s = sb.toString();\nSystem.out.println(s);  //prints: That is the way to build a sentence\n\n```", "```java\nString veryLongText = new String(\"asdakjfakjn akdb aakjn... akdjcnak\");\n```", "```java\nString format = \"There is a %s in the %s\";\nString s = String.format(format, \"bear\", \"woods\");\nSystem.out.println(s); //prints: There is a bear in the woods\n\nformat = \"Class %s is very useful\";\ns = String.format(format, new A());\nSystem.out.println(s);  //prints: Class A is very useful\n\n```", "```java\nString s1 = \"There is a bear in the woods\";\nString s2 = s1.replace(\"bear\", \"horse\").replace(\"woods\", \"field\");\nSystem.out.println(s2);     //prints: There is a horse in the field\n\n```", "```java\nString s = \"Introduction\";\nSystem.out.println(s.indexOf(\"I\"));      //prints: 0\nSystem.out.println(s.lastIndexOf(\"I\"));  //prints: 0\nSystem.out.println(s.lastIndexOf(\"i\"));  //prints: 9\nSystem.out.println(s.indexOf(\"o\"));      //prints: 4\nSystem.out.println(s.lastIndexOf(\"o\"));  //prints: 10\nSystem.out.println(s.indexOf(\"tro\"));    //prints: 2\n```", "```java\nString s = \"Introduction\";\nSystem.out.println(s.substring(1));        //prints: ntroduction\nSystem.out.println(s.substring(2));        //prints: troduction\n\n```", "```java\nString s = \"Introduction\";\nSystem.out.println(s.substring(1, 2));        //prints: n\nSystem.out.println(s.substring(1, 3));        //prints: nt\n\n```", "```java\nSystem.out.println(s.substring(1));              //prints: ntroduction\nSystem.out.println(s.substring(1, s.length()));  //prints: ntroduction\n\n```", "```java\nString s = \"Introduction\";\nSystem.out.println(s.contains(\"x\"));          //prints: false\nSystem.out.println(s.contains(\"o\"));          //prints: true\nSystem.out.println(s.contains(\"tro\"));        //prints: true\nSystem.out.println(s.contains(\"trx\"));        //prints: false\n\n```", "```java\nString[] substrings = \"Introduction\".split(\"o\");\nSystem.out.println(Arrays.toString(substrings)); \n                                       //prints: [Intr, ducti, n]\nsubstrings = \"Introduction\".split(\"duct\");\nSystem.out.println(Arrays.toString(substrings)); \n                                      //prints: [Intro, ion] \n\n```", "```java\nString s = \"There is a bear in the woods\";\nString[] arr = s.split(\" \");\nSystem.out.println(Arrays.toString(arr));  \n                       //prints: [There, is, a, bear, in, the, woods]\narr = s.split(\" \", 3);\nSystem.out.println(Arrays.toString(arr));  \n                          //prints: [There, is, a bear in the woods]\n\n```", "```java\nString s1 =  \"There is a bear\";\nString s2 =  \" in the woods\";\nString s = s1.concat(s2);\nSystem.out.println(s);  //prints: There is a bear in the woods\n\n```", "```java\nString s =  s1 + s2;\nSystem.out.println(s);  //prints: There is a bear in the woods\n```", "```java\ns = String.join(\" \", \"There\", \"is\", \"a\", \"bear\", \"in\", \"the\", \"woods\");\nSystem.out.println(s);  //prints: There is a bear in the woods\n\nList<String> list = \n             List.of(\"There\", \"is\", \"a\", \"bear\", \"in\", \"the\", \"woods\");\ns = String.join(\" \", list);\nSystem.out.println(s);  //prints: There is a bear in the woods\n```", "```java\nboolean b = \"Introduction\".startsWith(\"Intro\");\nSystem.out.println(b);             //prints: true\n\nb = \"Introduction\".startsWith(\"tro\", 2);\nSystem.out.println(b);             //prints: true\n\nb = \"Introduction\".endsWith(\"ion\");\nSystem.out.println(b);             //prints: true\n\n```", "```java\nSystem.out.println(LocalDate.now());   //prints: 2018-04-14\n```", "```java\nSet<String> zoneIds = ZoneId.getAvailableZoneIds();\nfor(String zoneId: zoneIds){\n    System.out.println(zoneId);     \n}\n```", "```java\nZoneId zoneId = ZoneId.of(\"Asia/Tokyo\");\nSystem.out.println(LocalDate.now(zoneId));   //prints: 2018-04-15\n\n```", "```java\nLocalDate lc1 =  LocalDate.parse(\"2020-02-23\");\nSystem.out.println(lc1);                     //prints: 2020-02-23\n\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\nLocalDate lc2 =  LocalDate.parse(\"23/02/2020\", formatter);\nSystem.out.println(lc2);                     //prints: 2020-02-23\n\nLocalDate lc3 =  LocalDate.of(2020, 2, 23);\nSystem.out.println(lc3);                     //prints: 2020-02-23\n\nLocalDate lc4 =  LocalDate.of(2020, Month.FEBRUARY, 23);\nSystem.out.println(lc4);                     //prints: 2020-02-23\n\nLocalDate lc5 = LocalDate.ofYearDay(2020, 54);\nSystem.out.println(lc5);                     //prints: 2020-02-23\n\n```", "```java\nSystem.out.println(lc5.getYear());          //prints: 2020\nSystem.out.println(lc5.getMonth());         //prints: FEBRUARY\nSystem.out.println(lc5.getMonthValue());    //prints: 2\nSystem.out.println(lc5.getDayOfMonth());    //prints: 23\n\nSystem.out.println(lc5.getDayOfWeek());     //prints: SUNDAY\nSystem.out.println(lc5.isLeapYear());       //prints: true\nSystem.out.println(lc5.lengthOfMonth());    //prints: 29\nSystem.out.println(lc5.lengthOfYear());     //prints: 366\n\n```", "```java\nSystem.out.println(lc5.withYear(2021));     //prints: 2021-02-23\nSystem.out.println(lc5.withMonth(5));       //prints: 2020-05-23\nSystem.out.println(lc5.withDayOfMonth(5));  //prints: 2020-02-05\nSystem.out.println(lc5.withDayOfYear(53));  //prints: 2020-02-22\n\nSystem.out.println(lc5.plusDays(10));       //prints: 2020-03-04\nSystem.out.println(lc5.plusMonths(2));      //prints: 2020-04-23\nSystem.out.println(lc5.plusYears(2));       //prints: 2022-02-23\n\nSystem.out.println(lc5.minusDays(10));      //prints: 2020-02-13\nSystem.out.println(lc5.minusMonths(2));     //prints: 2019-12-23\nSystem.out.println(lc5.minusYears(2));      //prints: 2018-02-23 \n```", "```java\nLocalDate lc6 =  LocalDate.parse(\"2020-02-22\");\nLocalDate lc7 =  LocalDate.parse(\"2020-02-23\");\nSystem.out.println(lc6.isAfter(lc7));       //prints: false\nSystem.out.println(lc6.isBefore(lc7));      //prints: true\n\n```", "```java\nSystem.out.println(LocalTime.now());         //prints: 21:15:46.360904\n\nZoneId zoneId = ZoneId.of(\"Asia/Tokyo\");\nSystem.out.println(LocalTime.now(zoneId));   //prints: 12:15:46.364378\n\nLocalTime lt1 =  LocalTime.parse(\"20:23:12\");\nSystem.out.println(lt1);                     //prints: 20:23:12\n\nLocalTime lt2 =  LocalTime.of(20, 23, 12);\nSystem.out.println(lt2);                     //prints: 20:23:12\n\n```", "```java\nSystem.out.println(lt2.getHour());          //prints: 20\nSystem.out.println(lt2.getMinute());        //prints: 23\nSystem.out.println(lt2.getSecond());        //prints: 12\nSystem.out.println(lt2.getNano());          //prints: 0\n\n```", "```java\nSystem.out.println(lt2.withHour(3));        //prints: 03:23:12\nSystem.out.println(lt2.withMinute(10));     //prints: 20:10:12\nSystem.out.println(lt2.withSecond(15));     //prints: 20:23:15\nSystem.out.println(lt2.withNano(300));      //prints: 20:23:12:000000300\n\nSystem.out.println(lt2.plusHours(10));      //prints: 06:23:12\nSystem.out.println(lt2.plusMinutes(2));     //prints: 20:25:12\nSystem.out.println(lt2.plusSeconds(2));     //prints: 20:23:14\nSystem.out.println(lt2.plusNanos(200));     //prints: 20:23:14:000000200\n\nSystem.out.println(lt2.minusHours(10));      //prints: 10:23:12\nSystem.out.println(lt2.minusMinutes(2));     //prints: 20:21:12\nSystem.out.println(lt2.minusSeconds(2));     //prints: 20:23:10\nSystem.out.println(lt2.minusNanos(200));     //prints: 20:23:11.999999800\n\n```", "```java\nLocalTime lt3 =  LocalTime.parse(\"20:23:12\");\nLocalTime lt4 =  LocalTime.parse(\"20:25:12\");\nSystem.out.println(lt3.isAfter(lt4));       //prints: false\nSystem.out.println(lt3.isBefore(lt4));      //prints: true\n\n```", "```java\nSystem.out.println(LocalDateTime.now());  //2018-04-14T21:59:00.142804\nZoneId zoneId = ZoneId.of(\"Asia/Tokyo\");\nSystem.out.println(LocalDateTime.now(zoneId));  \n                                   //prints: 2018-04-15T12:59:00.146038\nLocalDateTime ldt1 =  LocalDateTime.parse(\"2020-02-23T20:23:12\");\nSystem.out.println(ldt1);                 //prints: 2020-02-23T20:23:12\nDateTimeFormatter formatter = \n          DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\");\nLocalDateTime ldt2 =  \n       LocalDateTime.parse(\"23/02/2020 20:23:12\", formatter);\nSystem.out.println(ldt2);                 //prints: 2020-02-23T20:23:12\nLocalDateTime ldt3 = LocalDateTime.of(2020, 2, 23, 20, 23, 12);\nSystem.out.println(ldt3);                 //prints: 2020-02-23T20:23:12\nLocalDateTime ldt4 =  \n        LocalDateTime.of(2020, Month.FEBRUARY, 23, 20, 23, 12);\nSystem.out.println(ldt4);                     //prints: 2020-02-23T20:23:12\nLocalDate ld = LocalDate.of(2020, 2, 23);\nLocalTime lt =  LocalTime.of(20, 23, 12);\nLocalDateTime ldt5 = LocalDateTime.of(ld, lt);\nSystem.out.println(ldt5);                     //prints: 2020-02-23T20:23:12\n\n```", "```java\nLocalDateTime ldt1 = LocalDateTime.parse(\"2020-02-23T20:23:12\");\nLocalDateTime ldt2 = ldt1.plus(Period.ofYears(2));\nSystem.out.println(ldt2); //prints: 2022-02-23T20:23:12\n\n//The following methods work the same way:\nldt.minus(Period.ofYears(2));\nldt.plus(Period.ofMonths(2));\nldt.minus(Period.ofMonths(2));\nldt.plus(Period.ofWeeks(2));\nldt.minus(Period.ofWeeks(2));\nldt.plus(Period.ofDays(2));\nldt.minus(Period.ofDays(2));\n\nldt.plus(Duration.ofHours(2));\nldt.minus(Duration.ofHours(2));\nldt.plus(Duration.ofMinutes(2));\nldt.minus(Duration.ofMinutes(2));\nldt.plus(Duration.ofMillis(2));\nldt.minus(Duration.ofMillis(2));\n```", "```java\nLocalDate ld1 =  LocalDate.parse(\"2020-02-23\");\nLocalDate ld2 =  LocalDate.parse(\"2020-03-25\");\n\nPeriod period = Period.between(ld1, ld2);\nSystem.out.println(period.getDays());       //prints: 2\nSystem.out.println(period.getMonths());     //prints: 1\nSystem.out.println(period.getYears());      //prints: 0\nSystem.out.println(period.toTotalMonths()); //prints: 1\n\nperiod = Period.between(ld2, ld1);\nSystem.out.println(period.getDays());       //prints: -2\n```", "```java\nLocalTime lt1 =  LocalTime.parse(\"10:23:12\");\nLocalTime lt2 =  LocalTime.parse(\"20:23:14\");\nDuration duration = Duration.between(lt1, lt2);\nSystem.out.println(duration.toDays());     //prints: 0\nSystem.out.println(duration.toHours());    //prints: 10\nSystem.out.println(duration.toMinutes());  //prints: 600\nSystem.out.println(duration.toSeconds());  //prints: 36002\nSystem.out.println(duration.getSeconds()); //prints: 36002\nSystem.out.println(duration.toNanos());    //prints: 36002000000000\nSystem.out.println(duration.getNano());    //prints: 0\n\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.println(Math.random());\n    //0.9350483840148613\n    //0.0477353019234189\n    //0.25784245516898985\n}\n```", "```java\nint getInteger(int max){\n    return (int)(Math.random() * max);\n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(getInteger(10) + \" \"); //prints: 2 5 6\n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(getInteger(100) + \" \"); //prints: 48 11 97\n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(100 + getInteger(100) + \" \"); //prints: 114 101 127\n}\n```", "```java\nint getIntegerRound(int max){\n    return (int)Math.round(Math.random() * max);\n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(100 + getIntegerRound(100) + \" \"); //179 147 200\n}\n```", "```java\nint getInteger2(int max){\n    return (int)(Math.random() * (max + 1));\n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(100 + getInteger2(100) + \" \"); //167 200 132\n}\n```", "```java\nRandom random = new Random();\nfor(int i =0; i < 3; i++){\n    System.out.print(random.nextDouble() + \" \"); \n    //prints: 0.8774928230544553 0.7822070124559267 0.09401796000707807 \n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(random.nextInt() + \" \"); \n                        //prints: -2001537190 -1148252160 1999653777\n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(random.nextInt(11) + \" \"); //prints: 4 6 2\n}\n```", "```java\nfor(int i =0; i < 3; i++){\n    System.out.print(11 + random.nextInt(10) + \" \"); //prints: 13 20 15\n}\n```", "```java\nString result = random.ints(3, 0, 101)\n        .mapToObj(String::valueOf)\n        .collect(Collectors.joining(\" \")); //prints: 30 48 52\n\n```", "```java\npublic class A{}\npublic class B{}\npublic class Exercise {\n    private A a;\n    private B b;\n    public Exercise(){\n        System.out.println(java.util.Objects.equals(a, b));\n    }\n    public static void main(String... args){\n        new Exercise();\n    }\n}\n```"]