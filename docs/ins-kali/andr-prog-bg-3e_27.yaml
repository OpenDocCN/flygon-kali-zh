- en: '*Chapter 27*: Android Databases'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第27章*：Android数据库'
- en: If we are going to make apps that offer our users significant features, then
    we are almost certainly going to need a way to manage, store, and filter significant
    amounts of data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要制作提供给用户重要功能的应用程序，那么我们几乎肯定需要一种管理、存储和过滤大量数据的方法。
- en: It is possible to store very large amounts of data efficiently with JSON, but
    when we need to use that data selectively rather than simply restricting ourselves
    to the options of "save everything" and "load everything," we need to think about
    what other options are available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSON可以高效地存储大量数据，但当我们需要有选择地使用数据而不仅仅限制于“保存所有”和“加载所有”的选项时，我们需要考虑其他可用的选项。
- en: A good computer science course would probably teach you about the algorithms
    necessary to handle sorting and filtering our data, but the effort involved would
    be quite extensive, and what are the chances of us coming up with a solution that
    is as good as something made by the people who gave us the Android API?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一门优秀的计算机科学课程可能会教你处理排序和过滤数据所需的算法，但所需的工作量会相当大，我们能否想出与Android API提供的解决方案一样好的解决方案的机会有多大呢？
- en: As is so often the case, it makes the most sense to use the solutions provided
    in the Android API. As we have seen, the `JSON` and `SharedPreferences` classes
    have their place, but at some point, we need to move on to using real databases
    for real-world solutions. Android uses the SQLite database management system,
    and as you would expect, there is an API to make it as easy as possible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，使用Android API中提供的解决方案是最合理的。正如我们所见，`JSON`和`SharedPreferences`类有它们的用途，但在某个时候，我们需要转向使用真正的数据库来解决现实世界的问题。Android使用SQLite数据库管理系统，正如您所期望的那样，有一个API可以使其尽可能简单。
- en: 'In this chapter, we will do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Find out exactly what a database is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确切地了解数据库是什么
- en: Learn what SQL and SQLite are
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解SQL和SQLite是什么
- en: Learn the basics of the SQL language
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习SQL语言的基础知识
- en: Take a look at the Android SQLite API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看一下Android SQLite API
- en: Code the Age Database app that we started in the previous chapter
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写在上一章开始的Age Database应用程序
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2027](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2027).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2027](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2027)。
- en: Databases 101
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库101
- en: Let's answer a whole bunch of database-related questions and then we can get
    started making apps that use SQLite.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回答一大堆与数据库相关的问题，然后我们就可以开始制作使用SQLite的应用程序。
- en: What is a database?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是数据库？
- en: A **database** is both a place of storage and a means to retrieve, store, and
    manipulate data. It helps to be able to visualize a database before learning how
    to use it. The actual structure of the internals of a database varies greatly
    depending upon the database in question. SQLite actually stores all its data in
    a single file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据库**既是存储的地方，也是检索、存储和操作数据的手段。在学习如何使用之前，能够想象数据库是有帮助的。实际上，数据库内部的结构因所涉及的数据库而异。SQLite实际上将所有数据存储在一个单个文件中。'
- en: It aids our comprehension greatly, however, if we visualize our data as if it
    were in a spreadsheet, or sometimes multiple spreadsheets. Our database, like
    a spreadsheet, will be divided into multiple columns, which represent different
    types of data, and rows, which represent entries of the database.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们将我们的数据视为电子表格，或者有时是多个电子表格，它会极大地帮助我们理解。我们的数据库，就像电子表格一样，将被分成多个列，代表不同类型的数据，和行，代表数据库的条目。
- en: 'Think about a database with names and exam scores. Take a look at this visual
    representation of such data and imagine what it would look like in a database:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个具有姓名和考试成绩的数据库。看一下这种数据的可视化表示，并想象它在数据库中会是什么样子：
- en: '![Figure 27.1 – Database example'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图27.1 – 数据库示例'
- en: '](img/Figure_27.1_B16773.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_27.1_B16773.jpg)'
- en: Figure 27.1 – Database example
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.1 – 数据库示例
- en: 'Notice, however, that there is an extra column of data: an _**ID** column.
    We will talk more about this as we proceed. This single spreadsheet-like structure
    is called a **table**. As mentioned before, there might be, and often are, multiple
    tables in a database. Each column of the table will have a name that can be referred
    to when speaking to the database.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，还有一列额外的数据：一个**ID**列。随着我们的进行，我们将更多地谈论这个。这种类似电子表格的结构称为**表**。如前所述，数据库中可能有多个表。表的每一列都将有一个名称，在与数据库交谈时可以引用该名称。
- en: What is SQL?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SQL？
- en: '**SQL** stands for **Structured Query Language**. It is the syntax that is
    used to get things done with a database.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL**代表**Structured Query Language**。这是用于处理数据库的语法。'
- en: What is SQLite?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SQLite？
- en: SQLite is the name of the database system that is favored by Android, and it
    has its own version of SQL. The reason the SQLite version of SQL needs to be slightly
    different to some other versions is that the database has different features.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是Android所青睐的数据库系统的名称，并且它有自己的SQL版本。SQLite版本的SQL需要稍微不同的原因是数据库具有不同的特性。
- en: The SQL syntax primer that follows will be focused on SQLite.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的SQL语法入门将专注于SQLite。
- en: SQL syntax primer
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL语法入门
- en: Before we can learn how to use SQLite with Android, we need to first learn the
    basics of how to use SQLite in general, in a platform-neutral context.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习如何在Android中使用SQLite之前，我们需要首先学习如何在一般情况下使用SQLite的基础知识。
- en: Let's look at some example SQL code that could be used on a SQLite database
    directly, without any Java or Android classes; then we can more easily understand
    what our Java code is doing later on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些示例SQL代码，可以直接在SQLite数据库上使用，而不需要任何Java或Android类；然后我们可以更容易地理解我们的Java代码在后面做什么。
- en: SQLite example code
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLite示例代码
- en: 'SQL has keywords, much like Java, that cause things to happen. Here is a flavor
    of some of the SQL keywords we will soon be using:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SQL有关键字，就像Java一样，会引起一些事情发生。以下是一些我们很快将要使用的SQL关键字的例子：
- en: '`INSERT`: Allows us to add data to the database'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT`：允许我们向数据库添加数据'
- en: '`DELETE`: Allows us to remove data from the database'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：允许我们从数据库中删除数据'
- en: '`SELECT`: Allows us to read data from the database'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT`：允许我们从数据库中读取数据'
- en: '`WHERE`: Allows us to specify parts of the database, matching specific criteria,
    that we want to use `INSERT`, `DELETE`, or `SELECT` on'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WHERE`：允许我们指定数据库的部分，匹配特定条件，我们想要在其上使用`INSERT`、`DELETE`或`SELECT`'
- en: '`FROM`: Used to specify a table or column name in a database'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM`：用于指定数据库中的表或列名'
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are many more SQLite keywords than this; for a full list of types, take
    a look at this link: [https://sqlite.org/lang_keywords.html](https://sqlite.org/lang_keywords.html).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite的关键字远不止这些；要查看完整的关键字列表，请查看此链接：[https://sqlite.org/lang_keywords.html](https://sqlite.org/lang_keywords.html)。
- en: 'In addition to keywords, SQL has **types**. Some examples of SQL types are
    as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了关键字之外，SQL还有**类型**。以下是一些SQL类型的示例：
- en: '**integer**: Just what we need for storing whole numbers'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数**：正好适合存储整数'
- en: '**text**: Perfect for storing a simple name or address'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：非常适合存储简单的姓名或地址'
- en: '**real**: For large floating-point numbers'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实数**：用于存储大浮点数'
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are many more SQLite types than this; for a full list of types, take
    a look at this link: [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite的类型远不止这些；要查看完整的类型列表，请查看此链接：[https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html)。
- en: Let's look at how we can combine those types with keywords to create tables
    and add, remove, modify, and read data using full SQLite statements.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将这些类型与关键字结合起来，使用完整的SQLite语句创建表格并添加、删除、修改和读取数据。
- en: Creating a table
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建表格
- en: 'It would be a perfectly decent question to ask why we don''t first create a
    new database. The reason for this is that every Android app has access to a SQLite
    database by default. The database is private to that app. Here is the statement
    we would use to create a table within that database. I have highlighted a few
    parts to make the statement clearer:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会问为什么我们不先创建一个新的数据库。原因是每个Android应用程序默认都可以访问一个SQLite数据库。该数据库对该应用程序是私有的。以下是我们在该数据库中创建表格的语句。我已经突出显示了一些部分，以便更清楚地理解语句：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous code creates a table called `StudentsAndGrades` with an integer
    row ID that will be automatically increased (incremented) each time a row of data
    is added.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个名为`StudentsAndGrades`的表，其中有一个整数行ID，每次添加一行数据时都会自动增加（递增）。
- en: The table will also have a `name` column that will be of type `text` and cannot
    be blank (`not null`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该表还将有一个`name`列，其类型为`text`，并且不能为空（`not null`）。
- en: It will also have a `score` column that will be of type `int`. Also, notice
    that the statement is completed by a semicolon.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将有一个`score`列，其类型为`int`。同时，注意语句以分号结束。
- en: Inserting data into the database
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向数据库中插入数据
- en: 'Here is how we might insert a new row of data into that database:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何向数据库插入一行新数据的方式：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code added a row to the database. After the preceding statement,
    the database will have one entry with the values (`1`, `Bart`, `23`) for the columns
    (`_ID`, `name`, `score`).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码向数据库添加了一行。在上述语句之后，数据库将有一个条目，其列（`_ID`，`name`，`score`）的值为（`1`，`Bart`，`23`）。
- en: 'Here is how we might insert another new row of data into that database:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何向数据库插入另一行新数据的方式：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous code added a new row of data with the values (`2`, `Lisa`, `100`)
    for the columns (`_ID`, `name`, `score`).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码添加了一个新的数据行，其列（`_ID`，`name`，`score`）的值为（`2`，`Lisa`，`100`）。
- en: 'Our spreadsheet-like structure would now look as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类似电子表格的结构现在看起来如下：
- en: '![Figure 27.2 – Updated spreadsheet'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图27.2 - 更新后的电子表格'
- en: '](img/Figure_27.2_B16773.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_27.2_B16773.jpg)'
- en: Figure 27.2 – Updated spreadsheet
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.2 - 更新后的电子表格
- en: Retrieving data from the database
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从数据库中检索数据
- en: 'Here is how we would access all the rows and columns from our database:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何从数据库中访问所有的行和列：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous code asks for every row and column. The `*` symbol can be read
    as "all."
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码要求每一行和每一列。`*`符号可以理解为“所有”。
- en: 'We can also be a little more selective, as this code demonstrates:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以更加有选择性，就像这段代码所示：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous code would only return `100`, which of course is the score associated
    with the name `Lisa`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码只会返回`100`，这当然是与姓名`Lisa`相关联的分数。
- en: Updating the database structure
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新数据库结构
- en: 'We can even add new columns after the table has been created and the data added.
    This is simple, as far as the SQL is concerned, but can cause some issues with
    regard to users'' data on already-published apps. The next statement adds a new
    column called `age` that is of type `int`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在创建表格并添加数据后，我们仍然可以添加新的列。就SQL而言，这很简单，但可能会导致已发布应用程序的用户数据出现一些问题。下一个语句添加了一个名为`age`的新列，其类型为`int`：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are many more data types, keywords, and ways to use them than we have
    seen so far. Next, let's look at the Android SQLite API; we will begin to see
    how we can use our new SQLite skills.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多数据类型、关键字和使用它们的方式，比我们目前所见到的要多。接下来，让我们看一下Android SQLite API；我们将开始看到如何使用我们的新的SQLite技能。
- en: Android SQLite API
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android SQLite API
- en: There are a number of different ways that the Android API makes it fairly easy
    to use our app's database. The first class we need to get familiar with is `SQLiteOpenHelper`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Android API有许多不同的方式，使得使用我们应用程序的数据库变得相当容易。我们需要首先熟悉的是`SQLiteOpenHelper`类。
- en: SQLiteOpenHelper and SQLiteDatabase
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLiteOpenHelper和SQLiteDatabase
- en: The `SQLiteDatabase` class is the class that represents the actual database.
    The `SQLiteOpenHelper` class, however, is where most of the action takes place.
    This class will enable us to get access to a database and initialize an instance
    of `SQLiteDatabase`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`SQLiteDatabase`类是表示实际数据库的类。然而，`SQLiteOpenHelper`类是大部分操作发生的地方。这个类将使我们能够访问数据库并初始化`SQLiteDatabase`的实例。'
- en: In addition, `SQLiteOpenHelper`, which we will extend in our Age Database app,
    has two methods to override. First, it has an `onCreate` method, which is called
    the first time a database is used; therefore, it makes sense that we would put
    our SQL to create our table structure in.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`SQLiteOpenHelper`，我们将在我们的Age Database应用程序中扩展它，有两个要重写的方法。首先，它有一个`onCreate`方法，当第一次使用数据库时被调用；因此，我们将把用于创建表结构的SQL放在其中是有意义的。
- en: The other method we must override is `onUpgrade`, which, as you can probably
    guess, is called when we upgrade our database (use `ALTER` to change its structure).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须重写的另一个方法是`onUpgrade`，你可能已经猜到，它在我们升级数据库时被调用（使用`ALTER`来改变其结构）。
- en: Building and executing queries
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和执行查询
- en: As our database structures get more complex and as our SQL knowledge grows,
    our SQL statements will get quite long and awkward. The potential for errors is
    high.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的数据库结构变得更加复杂，以及我们的SQL知识的增长，我们的SQL语句会变得非常长和笨拙。出现错误的可能性很高。
- en: The way we will help overcome the problem of complexity is to build our queries
    from parts into a string. We can then pass that string to the method that will
    execute the query for us.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将帮助解决复杂性问题的方法是将查询从各个部分构建成一个字符串。然后我们可以将该字符串传递给执行查询的方法。
- en: Furthermore, we will use `final` strings to represent things such as table and
    column names so we don't get in a muddle with them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用`final`字符串来表示诸如表和列名之类的东西，这样我们就不会与它们搞混。
- en: 'For example, we could declare the following members, which would represent
    the table name and column names from the fictitious example from earlier. Note
    that we will also give the database itself a name and have a string for that too:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以声明以下成员，它们将代表之前虚构示例中的表名和列名。请注意，我们还将为数据库本身命名，并为其设置一个字符串：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice in the preceding code how we will benefit from accessing the strings
    outside the class, as we declare them `public`. You might be thinking that this
    breaks the rules of encapsulation. It does, but when the intention of the class
    is to be used as widely as possible, that is OK. And remember, all the variables
    are final. An external class using these string variables cannot change them or
    mess things up. They can only refer to and use the values that they hold.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在前面的代码中，我们将受益于在类外部访问字符串，因为我们将它们声明为`public`。你可能会认为这违反了封装的规则。的确如此，但当类的意图是尽可能广泛地使用时，这是可以接受的。而且请记住，所有的变量都是final的。使用这些字符串变量的外部类不能改变它们或搞乱它们。它们只能引用和使用它们所持有的值。
- en: 'We could then build a query like in this next example. The example adds a new
    entry to our hypothetical database and incorporates Java variables into the SQL
    statement:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以像下面的示例一样构建一个查询。该示例向我们的假设数据库添加了一个新条目，并将Java变量合并到SQL语句中：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice in the previous code that the regular `name` and `score` Java variables
    arehighlighted. The previous string called `query` is now the SQL statement, exactly
    equivalent to this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在前面的代码中，常规的`name`和`score` Java变量被突出显示。之前的名为`query`的字符串现在是SQL语句，与此完全相同：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is not essential to completely grasp the previous two blocks of code in order
    to proceed with learning Android programming. But if you want to build your own
    apps and construct SQL statements that do exactly what you need, it *will* help
    to do so. Why not study the previous two blocks of code in order to discern the
    difference between the pairs of double-quote marks, `"`, which are the parts of
    the string joined together with `+`; the pairs of single quote marks, `'`, which
    are part of the SQL syntax; the regular Java variables; and the distinct semicolons
    in the SQL statement in the string and Java.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习Android编程并不一定要完全掌握前两个代码块。但是，如果你想构建自己的应用程序并构造确切需要的SQL语句，理解这些代码块将有所帮助。为什么不学习前两个代码块，以便区分双引号`"`，它们是用`+`连接在一起的字符串的一部分；单引号`'`，它们是SQL语法的一部分；常规的Java变量；以及字符串和Java中SQL语句中的不同分号。
- en: Throughout the typing of the query, Android Studio prompts us as to the names
    of our variables, making the chances of an error much lower, even though it is
    more verbose than simply typing the query.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入查询时，Android Studio会提示我们变量的名称，这样错误的几率就会降低，尽管它比简单地输入查询更冗长。
- en: 'Now we can use the classes we introduced previously to execute the query:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用之前介绍的类来执行查询：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When adding data to the database, we will use `execSQL` as in the previous
    code; when getting data from the database, we will use the `rawQuery` method as
    shown next:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在向数据库添加数据时，我们将像前面的代码一样使用`execSQL`；在从数据库获取数据时，我们将使用`rawQuery`方法，如下所示：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that the `rawQuery` method returns an object of type `Cursor`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`rawQuery`方法返回`Cursor`类型的对象。
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are several different ways we can interact with SQLite, and they each
    have their advantages and disadvantages. We have chosen to use raw SQL statements
    as it makes what we are doing entirely transparent, as well as reinforcing our
    knowledge of the SQL language. See the next tip if you want to know more.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用几种不同的方式与SQLite交互，它们各有优缺点。我们选择使用原始的SQL语句，因为这样可以完全透明地展示我们正在做什么，同时加强我们对SQL语言的了解。如果你想了解更多，请参阅下一个提示。
- en: Database cursors
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库游标
- en: Besides the classes that give us access to the database and the methods that
    allow us to execute our queries, there is the issue of exactly how the results
    we get back from our queries are formatted.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 除了让我们访问数据库的类和允许我们执行查询的方法之外，还有一个问题，那就是我们从查询中得到的结果如何格式化。
- en: 'Fortunately, there is the `Cursor` class. All our database queries will return
    objects of type `Cursor`. We can use the methods of the `Cursor` class to selectively
    access the data returned from the queries, as here:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有`Cursor`类。我们所有的数据库查询都会返回`Cursor`类型的对象。我们可以使用`Cursor`类的方法有选择地访问从查询返回的数据，如下所示：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The previous code would output to logcat the two values stored in the first
    two columns of the result that the query returned. It is the `Cursor` object itself
    that determines which row of our returned data we are currently reading.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的代码将输出到logcat中查询返回的前两列中存储的两个值。决定我们当前正在读取的返回数据的哪一行是`Cursor`对象本身。
- en: 'We can access a number of methods of the `Cursor` object, including the `moveToNext`
    method, which unsurprisingly would move `Cursor` to the next row, ready for reading:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问`Cursor`对象的许多方法，包括`moveToNext`方法，该方法将`Cursor`移动到下一行，准备读取：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: On some occasions, we will be able to bind `Cursor` to a part of our UI (such
    as `RecyclerView`), as we did with an `ArrayList` instance in the Note to Self
    app, and just leave everything to the Android API.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们将能够将`Cursor`绑定到我们UI的一部分（例如`RecyclerView`），就像我们在Note to Self应用程序中使用`ArrayList`实例一样，然后将一切留给Android
    API。
- en: There are many more useful methods of the `Cursor` class, some of which we will
    see soon.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cursor`类还有许多有用的方法，其中一些我们很快就会看到。'
- en: Note
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This introduction to the Android SQLite API really only scratches the surface
    of its capabilities. We will bump into a few more methods and classes as we proceed
    further. It is, however, worth studying further if your app idea requires complex
    data management.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对Android SQLite API的介绍实际上只是触及了它的能力表面。随着我们进一步进行，我们将遇到更多的方法和类。然而，如果您的应用想法需要复杂的数据管理，进一步研究是值得的。
- en: Now we can see how all this theory comes together and how we will structure
    our database code in the Age Database app.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到所有这些理论是如何结合在一起的，以及我们将如何在Age Database应用程序中构建我们的数据库代码结构。
- en: Coding the database class
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写数据库类
- en: Here we will put into practice everything we have learned so far and finish
    coding the Age Database app. Before our `Fragment` classes from the previous section
    can interact with a shared database, we need a class to handle interaction with,
    and the creation of, the database.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将实践我们迄今为止学到的一切，并完成编写Age Database应用程序。在我们之前的部分的`Fragment`类可以与共享数据库进行交互之前，我们需要一个类来处理与数据库的交互和创建。
- en: We will create a class that manages our database by using the `SQLiteOpenHelper`
    class. It will also define some `final` strings to represent the names of the
    table and its columns. Furthermore, it will supply a bunch of helper methods we
    can call to perform all the necessary queries. Where necessary, these helper methods
    will return a `Cursor` object that we can use to show the data we have retrieved.
    It would be trivial, then, to add new helper methods, should our app need to evolve.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个通过使用`SQLiteOpenHelper`类来管理我们的数据库的类。它还将定义一些`final`字符串来表示表的名称和其列。此外，它将提供一堆我们可以调用的辅助方法来执行所有必要的查询。在必要时，这些辅助方法将返回一个`Cursor`对象，我们可以用来显示我们检索到的数据。如果我们的应用程序需要发展，添加新的辅助方法将是微不足道的。
- en: 'Create a new class called `DataManager` and add the following member variables:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`DataManager`的新类，并添加以下成员变量：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, we add the constructor that will create an instance of our custom version
    of `SQLiteOpenHelper`. We will actually implement this class as an inner class
    soon. The constructor also initializes the `db` member, which is our `SQLiteDatabase`
    reference.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个构造函数，它将创建我们的自定义版本的`SQLiteOpenHelper`的实例。我们很快将实现这个类作为一个内部类。构造函数还初始化了我们的`SQLiteDatabase`引用`db`成员。
- en: 'Add the following constructor that we have just discussed to the `DataManager`
    class:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们刚刚讨论过的以下构造函数添加到`DataManager`类中：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we can add the helper methods we will access from our Fragment classes.
    Start with the `insert` method, which executes an `INSERT` SQL query based on
    the `name` and `age` parameters passed into the method.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加我们将从Fragment类中访问的辅助方法。从`insert`方法开始，它根据传入方法的`name`和`age`参数执行`INSERT`
    SQL查询。
- en: 'Add the `insert` method to the `DataManager` class:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将`insert`方法添加到`DataManager`类中：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This next method called `delete` will delete a record from the database if it
    has a value in the name column that matches the passed-in `name` parameter. It
    achieves this using the SQL `DELETE` keyword.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个名为`delete`的方法将从数据库中删除一条记录，如果它在名称列中具有与传入的`name`参数匹配的值。它使用SQL`DELETE`关键字来实现这一点。
- en: 'Add the `delete` method to the `DataManager` class:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将`delete`方法添加到`DataManager`类中：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, we have the `selectAll` method, which also does as the name suggests.
    It achieves this with a `SELECT` query using the `*` parameter, which is equivalent
    to specifying all the columns individually. Also, note that the method returns
    a `Cursor` instance, which we will use in some of the `Fragment` classes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`selectAll`方法，它也如其名称所示。它使用`SELECT`查询并使用`*`参数来实现这一点，该参数相当于单独指定所有列。还要注意，该方法返回一个`Cursor`实例，我们将在一些`Fragment`类中使用。
- en: 'Add the `selectAll` method to the `DataManager` class:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将`selectAll`方法添加到`DataManager`类中：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we add a `searchName` method that has a `String` parameter for the name
    the user wants to search for. It also returns a `Cursor` instance that will contain
    all the entries that were found. Notice that the SQL statement uses `SELECT`,
    `FROM`, and `WHERE` to achieve this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们添加一个`searchName`方法，该方法具有一个`String`参数，用于用户想要搜索的名称。它还返回一个包含找到的所有条目的`Cursor`实例。请注意，SQL语句使用`SELECT`，`FROM`和`WHERE`来实现这一点：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finally, for the `DataManager` class, we create an inner class that will be
    our implementation of `SQLiteOpenHelper`. It is a barebones implementation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于`DataManager`类，我们创建一个内部类，它将是我们的`SQLiteOpenHelper`的实现。这是一个最基本的实现。
- en: We have a constructor that receives a `Context` object, the database name, and
    the database version.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个构造函数，接收一个`Context`对象，数据库名称和数据库版本。
- en: We also override the `onCreate` method that has the SQL statement, which creates
    our database table with `_ID`, `name`, and `age` columns.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还重写了`onCreate`方法，其中包含创建具有`_ID`，`name`和`age`列的数据库表的SQL语句。
- en: The `onUpgrade` method is left intentionally blank for this app.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`onUpgrade`方法在此应用程序中被故意留空。'
- en: 'Add the inner `CustomSQLiteOpenHelper` class to the `DataManager` class:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将内部的`CustomSQLiteOpenHelper`类添加到`DataManager`类中：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now we can add code to our `Fragment` classes to use our new `DataManager` class.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在我们的`Fragment`类中添加代码来使用我们的新的`DataManager`类。
- en: Coding the Fragment classes to use the DataManager class
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Fragment类以使用DataManager类
- en: 'Add this highlighted code to the `InsertFragment` class to update the `onCreateView`
    method:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段突出显示的代码添加到`InsertFragment`类中以更新`onCreateView`方法：
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the code, we get an instance of our `DataManager` class and a reference to
    each of our UI widgets. Then, in the `onClick` method, we use the `insert` method
    to add a new name and age to the database. The values to insert are taken from
    the two `EditText` widgets.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们获取了我们的`DataManager`类的实例和对每个UI小部件的引用。然后，在`onClick`方法中，我们使用`insert`方法向数据库添加新的姓名和年龄。要插入的值来自两个`EditText`小部件。
- en: 'Add this highlighted code to the `DeleteFragment` class to update the `onCreateView`
    method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段突出显示的代码添加到`DeleteFragment`类中以更新`onCreateView`方法：
- en: '[PRE21]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the `DeleteFragment` class, we create an instance of our `DataManager` class
    and then get a reference to the `EditText` and `Button` widgets from our layout.
    When the button is clicked, the `delete` method is called, passing in the value
    of any text from the `EditText` widget that the user has entered. The `delete`
    method searches our database for a match, and if one is found, it deletes it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DeleteFragment`类中，我们创建了我们的`DataManager`类的实例，然后从我们的布局中获取了`EditText`和`Button`小部件的引用。当按钮被点击时，将调用`delete`方法，传入用户输入的`EditText`小部件中的任何文本的值。`delete`方法搜索我们的数据库是否有匹配项，如果找到，则删除它。
- en: 'Add this highlighted code to the `SearchFragment` class to update the `onCreateView`
    method:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段突出显示的代码添加到`SearchFragment`类中以更新`onCreateView`方法：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As we do for all our different `Fragment` classes, we create an instance of
    the `DataManager` class and get a reference to all the different UI widgets in
    the layout. In the `onClick` method, the `searchName` method is used, passing
    in the value from the `EditText` widget. If the database returns a result in the
    `Cursor` instance, then the `TextView` widget uses its `setText` method to output
    the results.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们所有不同的`Fragment`类一样，我们创建了`DataManager`类的实例，并获取了布局中所有不同UI小部件的引用。在`onClick`方法中，使用`searchName`方法，传入`EditText`小部件的值。如果数据库在`Cursor`实例中返回结果，那么`TextView`小部件使用其`setText`方法输出结果。
- en: 'Add this highlighted code to the `ResultsFragment` class to update the `onCreateView`
    method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段突出显示的代码添加到`ResultsFragment`类中以更新`onCreateView`方法：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this class, the `Cursor` instance is loaded up with data using the `selectAll`
    method before any interactions take place. The contents of `Cursor` are then output
    into the `TextView` widget by concatenating the results. `\n` in the concatenation
    is what creates a new line between each result in the `Cursor` instance.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，`Cursor`实例在任何交互发生之前使用`selectAll`方法加载数据。然后通过连接结果将`Cursor`的内容输出到`TextView`小部件中。在连接中的`\n`是在`Cursor`实例中的每个结果之间创建新行的。
- en: Running the Age Database app
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Age Database应用程序
- en: Let's run through some of the functions of our app to make sure it is working
    as expected.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一些我们应用程序的功能，以确保它按预期工作。
- en: 'First, I added a new name to the database using the **Insert** menu option:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我使用**插入**菜单选项向数据库添加了一个新的名字：
- en: '![Figure 27.3 – Insert menu'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图27.3 – 插入菜单'
- en: '](img/Figure_27.3_B16773.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_27.3_B16773.jpg)'
- en: Figure 27.3 – Insert menu
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.3 – 插入菜单
- en: 'Then I confirmed it was there by viewing the **Results** option:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我通过查看**结果**选项确认它确实存在：
- en: '![Figure 27.4 – Results option'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图27.4 – 结果选项'
- en: '](img/Figure_27.4_B16773.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_27.4_B16773.jpg)'
- en: Figure 27.4 – Results option
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.4 – 结果选项
- en: 'After that, I added a few more names and ages just to fill the database up
    a little bit:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我添加了一些更多的姓名和年龄，只是为了填充数据库：
- en: '![Figure 27.5 – Filling the database'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图27.5 – 填充数据库'
- en: '](img/Figure_27.5_B16773.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_27.5_B16773.jpg)'
- en: Figure 27.5 – Filling the database
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.5 – 填充数据库
- en: 'Then I used the **Delete** menu option and looked at the **Results** option
    again to check that my chosen name was in fact removed:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我使用了**删除**菜单选项，再次查看**结果**选项，以确保我选择的名字确实被删除了。
- en: '![Figure 27.6 – Delete menu'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图27.6 – 删除菜单'
- en: '](img/Figure_27.6_B16773.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_27.6_B16773.jpg)'
- en: Figure 27.6 – Delete menu
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.6 – 删除菜单
- en: 'I then searched for a name that I knew existed to test the **Search** menu
    option:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我搜索了一个我知道存在的名字来测试**搜索**菜单选项：
- en: '![Figure 27.7 – Search menu'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图27.7 – 搜索菜单'
- en: '](img/Figure_27.7_B16773.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_27.7_B16773.jpg)'
- en: Figure 27.7 – Search menu
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.7 – 搜索菜单
- en: Let's review what we have done in this chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章我们所做的事情。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have covered a lot in this chapter. We have learned about databases and in
    particular the database used by Android apps, SQLite. We have practiced the basics
    of communicating with a database using the SQL language.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容。我们学习了关于数据库，特别是Android应用程序使用的数据库SQLite。我们练习了使用SQL语言与数据库进行通信的基础知识。
- en: We have seen how the Android API helps us use a SQLite database and have implemented
    our first working app with a database.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了Android API如何帮助我们使用SQLite数据库，并实现了我们的第一个使用数据库的工作应用程序。
- en: You have come a long way and have reached the end of the book. Let's talk about
    what might come next.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经走了很长的路，已经到达了书的尽头。让我们谈谈接下来可能会发生什么。
