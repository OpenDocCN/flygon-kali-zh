- en: The New Way of Coding with Java 10 and Java 11
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Java 10和Java 11进行编码的新方式
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下示例：
- en: Using local-variable type inference
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用局部变量类型推断
- en: Using local-variable syntax for lambda parameters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用lambda参数的局部变量语法
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter gives you a quick introduction to new features that affect your
    coding. Many other languages, including JavaScript, have this feature—the ability
    to declare a variable using a `var` keyword (in Java, it is actually a **reserved
    type name**, not a keyword). It has many advantages but is not without controversy.
    If used excessively, especially with short non-descriptive identifiers, it can
    make the code less readable and the added value may be drowned out by the increased
    code obscurity.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为您快速介绍了影响您编码的新功能。许多其他语言，包括JavaScript，都具有此功能——使用`var`关键字声明变量（在Java中，它实际上是一个**保留类型名称**，而不是关键字）。它有许多优点，但也存在争议。如果过度使用，特别是对于短的非描述性标识符，可能会使代码变得不太可读，而增加的价值可能会被增加的代码模糊所淹没。
- en: That is why in the following recipe, we explain the reasons the reserved `var` type
    was introduced. Try to avoid using `var` in the other cases.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在下面的示例中，我们解释了引入保留`var`类型的原因。尽量避免在其他情况下使用`var`。
- en: Using local-variable type inference
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用局部变量类型推断
- en: In this recipe, you will learn about local-variable type inference, which was
    introduced in Java 10, where it can be used, and its limitations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将了解到局部变量类型推断，它是在Java 10中引入的，可以在哪里使用以及其限制。
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'A local-variable type inference is the ability of a compiler to identify the
    type of the local variable using the correct side of an expression. In Java, a
    local variable with an inferred type is declared using the `var` identifier. For
    example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 局部变量类型推断是编译器使用表达式的正确侧来识别局部变量类型的能力。在Java中，使用`var`标识符声明具有推断类型的局部变量。例如：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The type of each of the preceding variables is clearly identifiable. We captured
    their types in comments.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面变量的类型是明确可识别的。我们在注释中捕获了它们的类型。
- en: Note that `var` is not a keyword, but an identifier, with a special meaning
    as the type of a local variable declaration.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`var`不是关键字，而是一个标识符，具有作为局部变量声明类型的特殊含义。
- en: 'It definitely saves typing and makes the code less cluttered with repeated
    code. Let''s look at this example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它确实节省了输入，并使代码不再被重复的代码淹没。让我们看看这个例子：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That was the only way to implement such a loop. But since Java 10, it can be
    written as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现这样的循环的唯一方法。但自Java 10以来，可以写成如下形式：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, the code becomes clearer, but using more descriptive variable
    names (such as `idToNames` and `names`) is helpful. Well, it is helpful anyway.
    But if you do not pay attention to the variable names,it is easy to make the code
    not easy to understand. For example, look at the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，代码变得更清晰，但使用更具描述性的变量名（如`idToNames`和`names`）是有帮助的。无论如何，这都是有帮助的。但是，如果您不注意变量名，很容易使代码变得难以理解。例如，看看以下代码：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Looking at the preceding line, you have no idea what type the `names` variable
    is. Changing it to `idToNames` makes it easier to guess. Nevertheless, many programmers
    do not do it. They prefer short variable names and figure out the type of each
    variable using the IDE context support (adding a dot after the variable name).
    But at the end of the day, it's just a matter of style and personal preferences.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 看看前一行，你不知道`names`变量的类型是什么。将其更改为`idToNames`会更容易猜到。然而，许多程序员不这样做。他们更喜欢使用简短的变量名，并使用IDE上下文支持来确定每个变量的类型（在变量名后添加一个点）。但归根结底，这只是一种风格和个人偏好的问题。
- en: 'Another potential problem comes from the fact that the new style may violate
    encapsulation and coding to an interface principle if no extra care is taken.
    For example, consider this interface and its implementation:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个潜在的问题来自于新的风格可能违反封装和编码到接口原则，如果不额外注意的话。例如，考虑这个接口及其实现：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that the `AImpl` class has more public methods than the interface it implements.
    The traditional style of creating the `AImpl` object would be as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`AImpl`类具有比其实现的接口更多的公共方法。创建`AImpl`对象的传统方式如下：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This way, we expose only the methods present in the interface, while the new
    style allows access to all the methods:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们只暴露接口中存在的方法，而新的风格允许访问所有方法：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To limit the reference to the methods of the interface only, one needs to add
    the typecasting as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制仅引用接口的方法，需要添加类型转换，如下所示：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, like many powerful tools, the new style can make your code easier to write
    and much more readable or, if special care is not taken, less readable and more
    difficult to debug.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，像许多强大的工具一样，新的风格可以使您的代码更易于编写和更易于阅读，或者如果不特别注意，可能会使代码变得不太可读并且更难以调试。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You can use a local variable type in the following ways:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以以下方式使用局部变量类型：
- en: 'With a right-hand initializer:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用右侧初始化器：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following declarations and assignments are illegal and will not compile:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下声明和赋值是非法的，不会编译：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'By extension, with an initializer in the loop:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展，在循环中使用初始化器：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And we have talked already about this example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈到了这个例子：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As an anonymous class reference:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为匿名类引用：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As an identifier:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为标识符：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As a method name:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为方法名：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: But `var` cannot be used as a class or an interface name.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但`var`不能用作类或接口名称。
- en: 'As a package name:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为包名：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using local-variable syntax for lambda parameters
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用lambda参数的局部变量语法
- en: In this recipe, you will learn how to use the local-variable syntax (discussed
    in the previous recipe) for lambda parameters and the motivation for introducing
    this feature. It was introduced in Java 11.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将学习如何使用局部变量语法（在前一个示例中讨论）用于lambda参数以及引入此功能的动机。它是在Java 11中引入的。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Until the release of Java 11, there were two ways to declare parameter types—explicit
    and implicit. Here is an explicit version:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 直到Java 11发布之前，有两种声明参数类型的方式——显式和隐式。以下是显式版本：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And the following is an implicit parameter type definition:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是隐式参数类型定义：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, the compiler figures the type of the parameters by the
    interface definition.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，编译器通过接口定义来确定参数的类型。
- en: With Java 11, another way of parameter type declaration was introduced—using
    the  `var` identifier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Java 11，引入了另一种参数类型声明的方式——使用`var`标识符。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following parameter declaration is exactly the same as the implicit one
    before Java 11:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Java 11之前的隐式版本的参数声明与以下参数声明完全相同：
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The new local variable style syntax allows us to add annotations without defining
    the parameter type explicitly:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的局部变量样式语法允许我们在不明确定义参数类型的情况下添加注释：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The annotations tell the tools that process the code (the IDE, for example)
    about the programmer''s intent, so they can warn the programmer during compilation
    or execution in case the declared intent is violated. For example, we have tried
    to run the following code inside IntelliJ IDEA:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注释告诉处理代码的工具（例如IDE）程序员的意图，因此它们可以在编译或执行过程中警告程序员，以防违反声明的意图。例如，我们尝试在IntelliJ IDEA中运行以下代码：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It failed with `NullPointerException` at runtime. Then we have run the following
    code (with annotations):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时出现了`NullPointerException`。然后我们运行了以下代码（带有注释）：
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result was the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The lambda expression was not even executed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: lambda表达式甚至没有被执行。
- en: 'The advantage of local-variable syntax in the case of lambda parameters becomes
    clear if we need to use annotations when the parameters are the objects of a class
    with a really long name. Before Java 11, the code may look like the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在lambda参数的情况下，局部变量语法的优势变得清晰起来，如果我们需要在参数是一个名字非常长的类的对象时使用注释。在Java 11之前，代码可能如下所示：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We had to declare the type of the variable explicitly because we wanted to
    add annotations and the following implicit version would not even compile:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不明确声明变量的类型，因为我们想要添加注释，而以下的隐式版本甚至无法编译：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With Java 11, the new syntax allows us to use the implicit parameter type inference
    using the `var` identifier:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Java 11，新的语法允许我们使用`var`标识符进行隐式参数类型推断：
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That is the advantage of and the motivation behind introducing a local-variable
    syntax for the lambda parameter's declaration.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是引入lambda参数声明的局部变量语法的优势和动机。
