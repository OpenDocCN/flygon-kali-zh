- en: Feature Toggles – Deploying Partially Done Features to Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能切换-部分完成功能的部署到生产环境
- en: '"Do not let circumstances control you. You change your circumstances."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “不要让环境控制你。你改变你的环境。”
- en: – Jackie Chan
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 成龙'
- en: We have seen so far how TDD makes the development process easier and decreases
    the amount of time spent on writing quality code. But there's another particular
    benefit to this. As code is being tested and its correctness is proven, we can
    go a step further and assume that our code is production-ready once all tests
    have passed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到TDD如何使开发过程更容易，并减少了编写高质量代码所花费的时间。但还有另一个特殊的好处。随着代码被测试并且其正确性得到证明，我们可以进一步假设一旦所有测试都通过，我们的代码就已经准备好投入生产了。
- en: There are some software life cycle approaches based on this idea. Some **extreme
    programming** (**XP**) practices such as **continuous integration** (**CI**),
    continuous delivery, and **continuous deployment** (**CD**) will be introduced.
    The code examples can be found at [https://bitbucket.org/alexgarcia/packt-tdd-java/src/](https://bitbucket.org/alexgarcia/packt-tdd-java/src/),
    in the folder `10-feature-toggles`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些基于这个想法的软件生命周期方法。一些极限编程（XP）实践，如持续集成（CI）、持续交付和持续部署（CD）将被介绍。代码示例可以在[https://bitbucket.org/alexgarcia/packt-tdd-java/src/](https://bitbucket.org/alexgarcia/packt-tdd-java/src/)的`10-feature-toggles`文件夹中找到。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Continuous integration, delivery, and deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成、交付和部署
- en: Testing the application in production
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中测试应用程序
- en: Feature Toggles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能切换
- en: Continuous integration, delivery, and deployment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成、交付和部署
- en: TDD goes hand in hand with CI, continuous delivery, or CD. Differences aside,
    all three techniques have similar goals. They are all trying to foster the continuous
    verification of production readiness of our code. In that respect, they are very
    similar to TDD. They each promote very short development cycles, continuous verification
    of the code we're producing, and the intention to continuously keep our application
    in a production-ready state.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: TDD与CI、持续交付或CD密切相关。除了区别之外，这三种技术都有相似的目标。它们都试图促进对我们的代码的生产准备状态进行持续验证。在这方面，它们与TDD非常相似。它们都倡导非常短的开发周期，持续验证我们正在生产的代码，并持续保持我们的应用程序处于生产准备状态的意图。
- en: The scope of this book does not permit us to go into the details of those techniques.
    Indeed, a whole book could be written on this subject. We'll just briefly explain
    the differences between the three. Practicing CI means that our code is at (almost)
    all times integrated with the rest of the system, and if there is a problem it
    will surface quickly. If such a thing happens, the priority is to fix the cause
    of that problem, meaning that any new development must take lower priority. You
    might have noticed a similarity between this definition and the way TDD works.
    The major difference is that with TDD, our primary focus is not the integration
    with the rest of the system. The rest is the same. Both TDD and CI try to detect
    problems fast and treat fixing them as the highest priority, putting everything
    else on hold. CI does not have the whole pipeline automated, and additional manual
    verifications are needed before the code is deployed to production.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的范围不允许我们详细介绍这些技术。事实上，整本书都可以写关于这个主题。我们只是简要解释一下这三者之间的区别。实践持续集成意味着我们的代码（几乎）始终与系统的其他部分集成在一起，如果出现问题，它将很快显现出来。如果发生这样的事情，首要任务是修复问题的原因，这意味着任何新的开发必须降低优先级。你可能已经注意到这个定义与TDD的工作方式之间的相似之处。主要区别在于，TDD的主要重点不是与系统的其他部分集成。其他方面都是一样的。TDD和CI都试图快速检测问题并将修复它们作为最高优先级，将其他一切搁置。CI并没有整个流程自动化，需要在代码部署到生产环境之前进行额外的手动验证。
- en: Continuous delivery is very similar to CI, except that the former goes a bit
    further and has the whole pipeline automated, except the actual deployment to
    production. Every push to the repository that passed all verifications is considered
    valid for deployment to production. However, the decision to deploy is made manually.
    Someone needs to choose one of the builds and promote it to the production environment.
    The choice is political or functional. It depends on what and when we want our
    users to receive, even though each is production-ready.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付与持续集成非常相似，只是前者走得更远，整个流程都是自动化的，除了实际部署到生产环境。每次推送到仓库并通过所有验证的代码都被视为可以部署到生产环境的有效代码。然而，部署的决定是手动进行的。需要有人选择其中一个构建版本并将其推广到生产环境。选择是政治性的或功能性的。这取决于我们想要用户在什么时候接收到什么内容，尽管每个版本都已经准备好投入生产。
- en: '"Continuous Delivery is a software development discipline where you build software
    in such a way that the software can be released to production at any time."'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “持续交付是一种软件开发纪律，通过这种方式构建软件，软件可以随时发布到生产环境。”
- en: – Martin Fowler
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '- 马丁·福勒'
- en: Finally, CD is accomplished when the decision about what to deploy is automated
    as well. In this scenario, every commit that passed all verifications is deployed
    to production—no exceptions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当关于部署什么的决定也被自动化时，CD就完成了。在这种情况下，通过了所有验证的每次提交都会被部署到生产环境，没有例外。
- en: In order to continuously integrate or deliver our code to production, branches
    cannot exist, or the time between creating them and integrating them with the
    mainline must be very short (less than a day, preferably a few hours). If that
    is not the case, we are not continuously verifying our code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了持续将我们的代码集成或交付到生产环境，不能存在分支，或者创建分支和将其与主线集成的时间必须非常短（一天以内，最好是几个小时）。如果不是这样，我们就不能持续验证我们的代码。
- en: The true connection with TDD comes from the necessity to create validations
    before the code is committed. If those verifications are not created in advance,
    code pushed to the repository is not accompanied with tests and the process fails.
    Without tests, there is no confidence in what we did. Without TDD, there are no
    tests to accompany our implementation code. Alternatively, a delay in pushing
    commits to repository until tests are created but in that case, there is no continuous
    part of the process. Code is sitting on someone's computer until someone else
    is finished with tests. Code that sits somewhere is not continuously verified
    against the whole system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与TDD的真正联系来自于在提交代码之前创建验证的必要性。如果这些验证没有提前创建，推送到存储库的代码就没有伴随着测试，流程就会失败。没有测试，我们对自己的工作没有信心。没有TDD，就没有测试来伴随我们的实现代码。或者，推送提交到存储库直到创建测试，但在这种情况下，流程中就没有连续的部分。代码一直停留在某人的计算机上，直到其他人完成测试。停留在某处的代码没有持续地针对整个系统进行验证。
- en: To summarize, continuous integration, delivery, and deployment rely on tests
    to accompany the integration code (thus, relying on TDD) and on the practice of
    not using branches or having them very short-lived (very often merged to the mainline).
    The problem lies with the fact that some features cannot be developed that fast.
    No matter how small our features are, in some cases it might take days to develop
    them. During all that time, we cannot push to the repository because the process
    would deliver them to production. Users do not want to see partial features. There
    is no point having, for example, part of the login process delivered. If one were
    to see a login page with a username, password, and login button, but the process
    behind that button does not actually store that info and provides, let's say,
    an authentication cookie, then at best we would have confused the users. In some
    other cases, one feature cannot work without the other. Following the same example,
    even if a login feature is fully developed, without registration it is pointless.
    One cannot be used without the other.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，持续集成、交付和部署依赖于测试来伴随集成代码（因此依赖于TDD），并且不使用分支或使它们的生命周期非常短暂（很频繁地合并到主线）。问题在于一些功能无法那么快地开发。无论我们的功能有多小，在某些情况下可能需要几天来开发它们。在这段时间内，我们不能推送到存储库，因为这个流程会将它们交付到生产环境。用户不想看到部分功能。例如，交付登录流程的一部分是没有意义的。如果有人看到一个带有用户名、密码和登录按钮的登录页面，但是按钮后面的流程实际上并没有存储这些信息并提供，比如，认证cookie，那么最好我们只会让用户感到困惑。在其他一些情况下，一个功能离开另一个功能是无法工作的。按照同样的例子，即使登录功能完全开发，没有注册就是没有意义的。一个功能离开另一个功能是无法使用的。
- en: Imagine playing a puzzle. We need to have a rough idea of the final picture,
    but we are focused on one piece at the time. We pick a piece that we think is
    the easiest to place and combine it with its neighbors. Only when all of them
    are in place is the picture complete and we are finished.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下玩拼图。我们需要对最终图片有一个大致的想法，但我们专注于一次只处理一个拼图。我们挑选一个我们认为最容易放置的拼图，并将它与它的邻居组合在一起。只有当它们全部就位时，图片才完整，我们才完成了。
- en: The same applies to TDD. We develop our code by being focused on small units.
    As we progress, they start taking a shape and working with each other until they
    are all integrated. While we're waiting for that to happen, even though all our
    tests are passing and we are in a green state, the code is not ready for the end
    users.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于TDD。我们通过专注于小单元来开发我们的代码。随着我们的进展，它们开始相互配合，直到它们全部集成。当我们等待这种情况发生时，即使我们的所有测试都通过了，我们处于绿色状态，代码也还没有准备好交付给最终用户。
- en: The easiest way to solve those problems and not compromise on TDD and CI/CD
    is to use Feature Toggles.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些问题并且不妥协TDD和CI/CD的最简单方法是使用功能切换。
- en: Feature Toggles
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能切换
- en: You might have also heard about this as **Feature Flipping** or **Feature Flags**.
    No matter which expression we use, they are all based on a mechanism that permits
    you to turn on and off the features of your application. This is very useful when
    all code is merged into one branch and you must deal with partially finished (or
    integrated) code. With this technique, unfinished features can be hidden so that
    users cannot access them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也听说过这个叫做**功能翻转**或**功能标志**。无论我们使用哪种表达方式，它们都基于一种机制，允许你打开和关闭应用程序的功能。当所有代码合并到一个分支时，你必须处理部分完成（或集成）的代码时，这是非常有用的。使用这种技术，未完成的功能可以被隐藏，以便用户无法访问它们。
- en: Due to its nature, there are other possible uses for this functionality. As
    a circuit breaker when something is wrong with a particular feature, providing
    graceful degradation of the application, shutting down secondary features to preserve
    hardware resources for business core operations, and so on. Feature Toggles, in
    some cases, can go even further. We might use them to enable features only to
    certain users, based on, for example, geographic location or their role. Another
    use is that we can enable new features for our testers only. That way, end users
    would continue to be oblivious of the existence of some new features, while testers
    would be able to validate them on a production server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其性质，这个功能还有其他可能的用途。例如，当特定功能出现问题时，作为断路器，提供应用程序的优雅降级，关闭次要功能以保留硬件资源用于业务核心操作等。在某些情况下，功能切换甚至可以更进一步。我们可以使用它们仅向特定用户启用功能，例如基于地理位置或他们的角色。另一个用途是我们可以仅为我们的测试人员启用新功能。这样，最终用户将继续对一些新功能的存在毫不知情，而测试人员将能够在生产服务器上验证它们。
- en: 'Moreover, there are some aspects to remember when using Feature Toggles:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在使用功能切换时，还有一些需要记住的方面：
- en: Use toggles only until they are fully deployed and proven to work. Otherwise,
    you might end up with spaghetti code full of `if`/`else` statements containing
    old toggles that are not in use any more.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在完全部署并被证明有效之前才使用切换。否则，你可能最终会得到充满旧的切换的意大利面代码，其中包含不再使用的`if`/`else`语句。
- en: Do not spend too much time testing toggles. It is, in most cases, enough to
    confirm that the entry point into some new feature is not visible. That can be,
    for example, a link to the new feature.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要花太多时间测试切换。在大多数情况下，确认某个新功能的入口点不可见就足够了。例如，这可以是指向新功能的链接。
- en: Do not overuse toggles. Do not use them when there is no need for them. For
    example, you might be developing a new screen that is accessible through a link
    in the home page. If that link is added at the end, there might be no need to
    have a toggle that hides it.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要过度使用切换。当不需要时不要使用它们。例如，您可能正在开发一个可以通过主页上的链接访问的新屏幕。如果该链接是在最后添加的，可能没有必要有一个隐藏它的切换。
- en: 'There are many good frameworks and libraries for application feature handling.
    Two of them are the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多用于应用程序特性处理的良好框架和库。其中两个是以下：
- en: '**Togglz** ([http://www.togglz.org/](http://www.togglz.org/))'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Togglz** ([http://www.togglz.org/](http://www.togglz.org/))'
- en: '**FF4J** ([http://ff4j.org/](http://ff4j.org/))'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FF4J** ([http://ff4j.org/](http://ff4j.org/))'
- en: These libraries offer a sophisticated way to manage features, even adding role-based
    or rules-based feature access. In many cases, you aren't going to need it, but
    these capabilities bring us the possibility of testing a new feature in production
    without opening it to all users. However, implementing a custom basic solution
    for feature toggling is quite simple, and we are going to go through an example
    to illustrate this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些库提供了一种复杂的方式来管理特性，甚至添加基于角色或规则的特性访问。在许多情况下，您可能不需要它，但这些功能使我们有可能在生产中测试新功能而不向所有用户开放。但是，实现自定义基本解决方案以进行特性切换非常简单，我们将通过一个示例来说明这一点。
- en: A Feature Toggle example
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性切换示例
- en: Here we go with our demo application. This time, we're going to build a simple
    and small **REpresentational State Transfer** (**REST**)  service to compute,
    on demand, a concrete N^(th) position of Fibonacci's sequence. We will keep track
    of enabled/disabled features using a file. For simplicity, we will use Spring
    Boot as our framework of choice and Thymeleaf as a template engine. This is also
    included in the Spring Boot dependency. Find more information about Spring Boot
    and related projects at [http://projects.spring.io/spring-boot/](http://projects.spring.io/spring-boot/).
    Also, you can visit [http://www.thymeleaf.org/](http://www.thymeleaf.org/) to
    read more about the template engine.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看我们的演示应用程序。这一次，我们将构建一个简单而小的**REpresentational State Transfer**（**REST**）服务，以按需计算Fibonacci序列的具体N^(th)位置。我们将使用文件跟踪启用/禁用的特性。为简单起见，我们将使用Spring
    Boot作为我们的框架选择，并使用Thymeleaf作为模板引擎。这也包含在Spring Boot依赖项中。在[http://projects.spring.io/spring-boot/](http://projects.spring.io/spring-boot/)上找到有关Spring
    Boot和相关项目的更多信息。此外，您可以访问[http://www.thymeleaf.org/](http://www.thymeleaf.org/)了解有关模板引擎的更多信息。
- en: 'This is how the `build.gradle` file looks:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`build.gradle`文件的样子：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that application plugin is present because we want to run the application
    using the Gradle command `run`. Here is the application''s `main` class:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，应用程序插件存在，因为我们希望使用Gradle命令“run”运行应用程序。这是应用程序的“main”类：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will create the properties file. This time, we are going to use **YAML Ain''t
    Markup Language** (**YAML**) format, as it is very comprehensive and concise.
    Add a file called `application.yml` in the `src/main/resources` folder, with the
    following content:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建属性文件。这一次，我们将使用**YAML Ain't Markup Language**（**YAML**）格式，因为它非常全面和简洁。在`src/main/resources`文件夹中添加一个名为`application.yml`的文件，内容如下：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Spring offers a way to load this kind of property file automatically. Currently,
    there are only two restrictions: the name must be `application.yml` and/or the
    file should be included in the application''s class path.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Spring提供了一种自动加载这种属性文件的方法。目前只有两个限制：名称必须是`application.yml`和/或文件应包含在应用程序的类路径中。
- en: 'This is our implementation of the feature''s `config` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们对特性“config”文件的实现：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the `fibonacci` service class. This time, the computation operation
    will always return `-1`, just to simulate a partially done feature:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`fibonacci`服务类。这一次，计算操作将始终返回`-1`，只是为了模拟一个部分完成的功能：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We also need a wrapper to hold the computed values:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个包装器来保存计算出的值：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is the `FibonacciRESTController` class, responsible for handling the `fibonacci`
    service queries:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`FibonacciRESTController`类，负责处理`fibonacci`服务查询：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the `fibonacci` method is checking whether the `fibonacci` service
    should be enabled or disabled, throwing an `UnsupportedOperationException` for
    convenience in the last case. There are also two error-handling functions; the
    first one is for processing `UnsupportedOperationException` and the second is
    for generic exceptions handling.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`fibonacci`方法正在检查`fibonacci`服务是否应启用或禁用，在最后一种情况下为方便抛出`UnsupportedOperationException`。还有两个错误处理函数；第一个用于处理`UnsupportedOperationException`，第二个用于处理通用异常。
- en: Now that all the components have been set, all we need to do is execute Gradle's
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有组件都已设置好，我们需要做的就是执行Gradle的
- en: '`run` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`run`命令：'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The command will launch a process that will eventually set a server up on the
    following address: `http://localhost:8080`. This can be observed in the console
    output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将启动一个进程，最终将在以下地址上设置服务器：`http://localhost:8080`。这可以在控制台输出中观察到：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once the application has started, we can perform a query using a regular browser.
    The URL of the query is `http://localhost:8080/fibonacci?number=7`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序启动后，我们可以使用常规浏览器执行查询。查询的URL是`http://localhost:8080/fibonacci?number=7`。
- en: 'This gives us the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下输出：
- en: '![](img/9da0fbdc-44da-432f-a293-4782b2751e9f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9da0fbdc-44da-432f-a293-4782b2751e9f.png)'
- en: As you can see, the error received corresponds to the error sent by the REST
    API when the feature is disabled. Otherwise, the return should be `-1`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，收到的错误对应于REST API在禁用特性时发送的错误。否则，返回值应为`-1`。
- en: Implementing the Fibonacci service
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Fibonacci服务
- en: Most of you might be familiar with Fibonacci's numbers. Here's a brief explanation
    anyway for those who don't know what they are.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你们大多数人可能都熟悉斐波那契数。无论如何，这里还是一个简要的解释，供那些不知道它们是什么的人参考。
- en: Fibonacci's sequence is an integer sequence resulting from the recurrence *f(n)
    = f(n-1) - f(n - 2)*. The sequence starts with being *f(0) = 0* and *f(1) = 1*.
    All other numbers are generated applying the recurrence as many times as needed
    until a value substitution can be performed using either 0 or 1 known values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列是一个整数序列，由递推*f(n) = f(n-1) - f(n - 2)*得出。该序列以*f(0) = 0*和*f(1) = 1*开始。所有其他数字都是通过多次应用递推生成的，直到可以使用0或1个已知值进行值替换为止。
- en: 'That is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...More info about Fibonacci''s
    sequence can be found here: [http://www.wolframalpha.com/input/?i=fibonacci+sequence](http://www.wolframalpha.com/input/?i=fibonacci+sequence)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 即：0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...有关斐波那契数列的更多信息可以在这里找到：[http://www.wolframalpha.com/input/?i=fibonacci+sequence](http://www.wolframalpha.com/input/?i=fibonacci+sequence)
- en: As an extra functionality, we want to limit how long the value computation takes,
    so we impose a constraint on the input; our service will only compute Fibonacci's
    numbers from `0` to `30` (both numbers included).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外功能，我们希望限制值计算所需的时间，因此我们对输入施加约束；我们的服务只会计算从`0`到`30`的斐波那契数（包括这两个数字）。
- en: 'This is a possible implementation of a class computing Fibonacci''s numbers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个计算斐波那契数的可能实现类：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For the sake of brevity, the TDD Red-Green-Refactor process is not explicitly
    explained in the demonstration, but has been present through development. Only
    the final implementation with the final tests is presented:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，TDD红-绿-重构过程没有在演示中明确解释，但在开发过程中一直存在。只呈现了最终实现和最终测试：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also, we can now turn on the `fibonacci` feature in the `application.yml` file,
    perform some queries with the browser, and check how is it going:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`application.yml`文件中打开`fibonacci`功能，用浏览器执行一些查询，并检查它的运行情况：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Execute Gradle''s `run` command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 执行Gradle的`run`命令：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we can fully test our REST API using the browser, with a number between
    `0` and `30`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用浏览器完全测试我们的REST API，使用一个介于`0`和`30`之间的数字：
- en: '![](img/aa63d9c5-147d-49a5-95ad-99b9cb66c21d.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa63d9c5-147d-49a5-95ad-99b9cb66c21d.png)'
- en: 'Then, we test it with a number bigger than `30`, and lastly by introducing
    characters instead of numbers:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们用一个大于`30`的数字进行测试，最后用字符代替数字进行测试：
- en: '![](img/554eb35c-9550-4abf-8bb8-2a88ef7eaae9.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/554eb35c-9550-4abf-8bb8-2a88ef7eaae9.png)'
- en: Working with the template engine
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板引擎
- en: We are enabling and disabling the `fibonacci` feature, but there are many other
    cases where the Feature Toggle can be very useful. One of them is hiding a web
    link that links to an unfinished feature. This is an interesting use because we
    can test what we released to production using its URL, but it will be hidden for
    the rest of the users for as long as we want.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在启用和禁用`fibonacci`功能，但还有许多其他情况下，功能切换可以非常有用。其中之一是隐藏链接到未完成功能的网页链接。这是一个有趣的用法，因为我们可以使用其URL测试我们发布到生产环境的内容，但对于其他用户来说，它将被隐藏，只要我们想要。
- en: To illustrate this behavior, we are going to create a simple web page using
    the already mentioned Thymeleaf framework.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这种行为，我们将使用已经提到的Thymeleaf框架创建一个简单的网页。
- en: 'First of all, we add a new `control` flag:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加一个新的`control`标志：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, map this new flag in a configuration class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在配置类中映射这个新的标志：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are going to create two templates. The first one is the home page. It contains
    some links to different Fibonacci number computations. These links should be visible
    only when the feature is enabled, so there''s an optional block to simulate this
    behavior:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个模板。第一个是主页。它包含一些链接到不同的斐波那契数计算。这些链接只有在启用功能时才可见，因此有一个可选的块来模拟这种行为：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The second one just shows the value of the computed Fibonacci number and also
    a link to go back to the home page:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个模板只显示计算出的斐波那契数的值，还有一个链接返回主页：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In order to get both templates to work, they should be in a specific location.
    They are `src/main/resources/templates/home.html` and `src/main/resources/templates/fibonacci.html` respectively.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这两个模板都能正常工作，它们应该放在特定的位置。它们分别是`src/main/resources/templates/home.html`和`src/main/resources/templates/fibonacci.html`。
- en: 'Finally, the masterpiece, which is the controller that connects all this and
    makes it work:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是连接所有内容并使其工作的控制器的杰作：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that this controller and the previous one seen in the REST API example
    share some similarities. This is because both are constructed with the same framework
    and use the same resources. However, there are slight differences between them;
    one is annotated as `@Controller` instead of both being `@RestController`. This
    is because the web controller is serving template pages with custom information,
    while the REST API generates a JSON object response.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个控制器和之前在REST API示例中看到的控制器有一些相似之处。这是因为两者都是用相同的框架构建的，并且使用相同的资源。但是，它们之间有一些细微的差异；一个被注释为`@Controller`，而不是两者都是`@RestController`。这是因为Web控制器提供带有自定义信息的模板页面，而REST
    API生成JSON对象响应。
- en: 'Let''s see this working, again using this Gradle command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个工作，再次使用这个Gradle命令：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is the generated home page:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的主页：
- en: '![](img/e9b8caa6-9e02-4fc0-876b-ed6f62e03ca4.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9b8caa6-9e02-4fc0-876b-ed6f62e03ca4.png)'
- en: 'This is shown when visiting the Fibonacci number link:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问斐波那契数链接时，会显示这个：
- en: '![](img/5aaee666-9dbf-4a26-ad4e-40880a149824.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5aaee666-9dbf-4a26-ad4e-40880a149824.png)'
- en: 'But we turn off the feature using the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们使用以下代码关闭该功能：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Relaunching the application, we browse to the home page and see that those
    links are not shown anymore, but we can still access the page if we already know
    the URL. If we manually write `http://localhost:8080/web/fibonacci?number=15`,
    we can still access the page:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动应用程序，我们浏览到主页，看到那些链接不再显示，但如果我们已经知道URL，我们仍然可以访问页面。如果我们手动输入`http://localhost:8080/web/fibonacci?number=15`，我们仍然可以访问页面：
- en: '![](img/56aced76-f40d-47b9-9178-488ff47cf1bc.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56aced76-f40d-47b9-9178-488ff47cf1bc.png)'
- en: This practice is very useful, but it usually adds unnecessary complexity to
    your code. Don't forget to refactor the code, deleting old toggles that you won't
    use anymore. It will keep your code clean and readable. Also, a good point is
    getting this working without restarting the application. There are many storage
    options that do not require a restart, databases being the most popular.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实践非常有用，但通常会给您的代码增加不必要的复杂性。不要忘记重构代码，删除您不再使用的旧切换。这将使您的代码保持清晰和可读。另外，一个很好的点是在不重新启动应用程序的情况下使其工作。有许多存储选项不需要重新启动，数据库是最受欢迎的。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Feature Toggles are a nice way to hide and/or handle partially finished functionalities
    in production environments. This may sound weird for those deploying code to production
    on demand, but it is quite common to find this situation when practicing continuous
    integration, delivery, or deployment.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 功能切换是在生产环境中隐藏和/或处理部分完成的功能的一种不错的方式。对于那些按需部署代码到生产环境的人来说，这可能听起来很奇怪，但在实践持续集成、交付或部署时，发现这种情况是相当常见的。
- en: 'We have introduced the technique and discussed the pros and cons. We have also
    enumerated some of the typical cases where toggling features can be helpful. Finally,
    we have implemented two different use cases: a Feature Toggle with a very simple
    REST API, and a Feature Toggle in a web application.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了这项技术并讨论了其利弊。我们还列举了一些典型情况，说明切换功能可以帮助解决问题。最后，我们实现了两种不同的用例：一个具有非常简单的REST
    API的功能切换，以及一个Web应用中的功能切换。
- en: Although the code presented in this chapter is fully functional, it isn't very
    common to use a file-based property system for this matter. There are many libraries
    more suitable for production environments that can help us to implement this technique,
    providing a lot of capabilities, such as using a web interface to handle features,
    storing preferences in a database, or allowing access to concrete user profiles.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章中介绍的代码是完全功能的，但通常不常使用基于文件的属性系统来处理此事。有许多更适合生产环境的库可以帮助我们实现这种技术，提供许多功能，例如使用Web界面处理功能、将偏好存储在数据库中或允许访问具体用户配置文件。
- en: In the next chapter we are going to put the TDD concepts described in the book
    all together. We are going to name some good practices and recommendations that
    are very useful when programming in the TDD way.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把书中描述的TDD概念整合在一起。我们将提出一些编程TDD方式时非常有用的良好实践和建议。
