- en: '04'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '04'
- en: Writing, Debugging, and Testing Functions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写、调试和测试函数
- en: This chapter is about writing functions to reuse code, debugging logic errors
    during development, logging exceptions during runtime, unit testing your code
    to remove bugs, and ensuring stability and reliability.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于编写函数以重用代码，开发期间调试逻辑错误，运行时记录异常，对代码进行单元测试以消除错误，并确保稳定性和可靠性。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Writing functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写函数
- en: Debugging during development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发期间调试
- en: Logging during runtime
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时日志记录
- en: Unit testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Throwing and catching exceptions in functions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数中抛出和捕获异常
- en: Writing functions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写函数
- en: A fundamental principle of programming is **Don't Repeat Yourself** (**DRY**
    ).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编程的一个基本原则是**不要重复自己**（**DRY**）。
- en: While programming, if you find yourself writing the same statements over and
    over again, then turn those statements into a function. Functions are like tiny
    programs that complete one small task. For example, you might write a function
    to calculate sales tax and then reuse that function in many places in a financial
    application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程时，如果发现自己一遍又一遍地编写相同的语句，那么将这些语句转换为函数。函数就像完成一个小任务的小程序。例如，您可以编写一个计算销售税的函数，然后在财务应用程序的许多地方重用该函数。
- en: Like programs, functions usually have inputs and outputs. They are sometimes
    described as black boxes, where you feed some raw materials in one end, and a
    manufactured item emerges at the other. Once created, you don't need to think
    about how they work.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与程序一样，函数通常具有输入和输出。有时被描述为黑匣子，您在一端输入一些原材料，而在另一端出现了制造出的物品。一旦创建，您就不需要考虑它们是如何工作的。
- en: Times table example
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乘法表示例
- en: 'Let''s say that you want to help your child learn their times tables, so you
    want to make it easy to generate a times table for a number, such as the 12 times
    table:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想帮助孩子学习乘法表，因此希望轻松生成一个数字的乘法表，例如12乘法表：
- en: '```cs'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '1'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: x 12
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: x 12
- en: = 12
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: = 12
- en: '2'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: x 12
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: x 12
- en: = 24
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: = 24
- en: '...'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '12'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: x 12
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: x 12
- en: = 144
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: = 144
- en: '```'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You previously learned about the `for` statement earlier in this book, so you
    know that it can be used to generate repeated lines of output when there is a
    regular pattern, such as the 12 times table, as shown in the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您之前在本书的早些时候学习了`for`语句，因此您知道它可以用于生成重复的输出行，例如12乘法表，如下面的代码所示：
- en: '```cs'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: for
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为
- en: (int
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: row = 1
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 行= 1
- en: ; row <= 12
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ; 行 <= 12
- en: ; row++)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ; 行++）
- en: '{'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Console.WriteLine($"
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine（$“
- en: '{row}'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '{行}'
- en: x 12 =
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: x 12 =
- en: '{row *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '{行 *'
- en: '12'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '}'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '"'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: However, instead of outputting the 12 times table, we want to make this more
    flexible, so it could output the times table for any number. We can do this by
    creating a function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们不想输出12乘法表，我们希望使其更加灵活，因此可以输出任何数字的乘法表。我们可以通过创建一个函数来实现这一点。
- en: Writing a times table function
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写乘法表函数
- en: 'Let''s explore functions by creating one to output any times table for numbers
    0 to 255 multiplied by 1 to 12:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个函数来探索函数，以输出1到12的任何数字的乘法表：
- en: 'Use your preferred coding tool to create a new console app, as defined in the
    following list:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编码工具创建一个新的控制台应用程序，如下列表中定义的那样：
- en: 'Project template: **Console Application** / `console`'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Workspace/solution file and folder: `Chapter04`'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`Chapter04`
- en: 'Project file and folder: `WritingFunctions`'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`WritingFunctions`
- en: Statically import `System.Console` .
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 静态导入`System.Console`。
- en: 'In `Program.cs` , write statements to define a function named `TimesTable`
    , as shown in the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，编写语句来定义一个名为`TimesTable`的函数，如下面的代码所示：
- en: '```cs'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: TimesTable
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: TimesTable
- en: (
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: byte
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 字节
- en: number
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数字
- en: )
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"This is the
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“这是
- en: '{number}'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '{数字}'
- en: times table:"
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法表："
- en: );
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: for
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为
- en: (int
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: row = 1
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 行= 1
- en: ; row <= 12
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ; 行 <= 12
- en: ; row++)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ; 行++)
- en: '{'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“
- en: '{row}'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '{行}'
- en: x
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: x
- en: '{number}'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '{数字}'
- en: '='
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '{row * number}'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '{行 * 数字}'
- en: '"'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine();
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 写入行（）;
- en: '}'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the preceding code, note the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，请注意以下内容：
- en: '`TimesTable` must have a `byte` value passed to it as a parameter named `number`
    .'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimesTable`必须有一个名为`number`的参数传递给它的`byte`值。'
- en: '`TimesTable` is a `static` method because it will be called by the `static`
    method `Main` .'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimesTable`是一个`static`方法，因为它将被`static`方法`Main`调用。'
- en: '`TimesTable` does not return a value to the caller, so it is declared with
    the `void` keyword before its name.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimesTable`不会向调用者返回值，因此在其名称之前使用`void`关键字声明。'
- en: '`TimesTable` uses a `for` statement to output the times table for the `number`
    passed to it.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimesTable`使用`for`语句输出传递给它的数字的乘法表。'
- en: 'After the statement that statically imports the `Console` class and before
    the `TimesTable` function, call the function and pass in a `byte` value for the
    `number` parameter, for example, `6` , as shown highlighted in the following code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在静态导入`Console`类的语句之后，在`TimesTable`函数之前，调用该函数并传递一个`byte`值作为`number`参数，例如`6`，如下面的代码中所示：
- en: '```cs'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Console;
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: '**TimesTable(**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**TimesTable（**'
- en: '**6**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**6**'
- en: '**);**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '```'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : If a function has one or more parameters where just passing
    the values may not provide enough meaning, then you can optionally specify the
    name of the parameter as well as its value, as shown in the following code: `TimesTable(number:
    6)` .'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果一个函数有一个或多个参数，仅传递值可能不提供足够的含义，那么您可以选择指定参数的名称以及其值，如下面的代码所示：`TimesTable(number:
    6)`。'
- en: 'Run the code and then view the result, as shown in the following output:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，然后查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'This is the 6 times table:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是6乘法表：”
- en: 1 x 6 = 6
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 1 x 6 = 6
- en: 2 x 6 = 12
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 2 x 6 = 12
- en: 3 x 6 = 18
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 3 x 6 = 18
- en: 4 x 6 = 24
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 4 x 6 = 24
- en: 5 x 6 = 30
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 5 x 6 = 30
- en: 6 x 6 = 36
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 6 x 6 = 36
- en: 7 x 6 = 42
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 7 x 6 = 42
- en: 8 x 6 = 48
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 8 x 6 = 48
- en: 9 x 6 = 54
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 9 x 6 = 54
- en: 10 x 6 = 60
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 10 x 6 = 60
- en: 11 x 6 = 66
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 11 x 6 = 66
- en: 12 x 6 = 72
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 12 x 6 = 72
- en: '```'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Change the number passed into the `TimesTable` function to other `byte` values
    between `0` and `255` and confirm that the output times tables are correct.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将传递给`TimesTable`函数的数字更改为`0`到`255`之间的其他`byte`值，并确认输出的乘法表是正确的。
- en: 'Note that if you try to pass a non-`byte` number, for example, an `int` or
    `double` or `string` , an error is returned, as shown in the following output:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，如果您尝试传递非`byte`数字，例如`int`或`double`或`string`，将返回错误，如下面的输出所示：
- en: '```cs'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Error: (1,12): error CS1503: Argument 1: cannot convert from ''int'' to ''byte'''
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：（1,12）：错误CS1503：参数1：无法从'int'转换为'byte'
- en: '```'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Writing a function that returns a value
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写一个返回值的函数
- en: The previous function performed actions (looping and writing to the console),
    but it did not return a value. Let's say that you need to calculate sales or value-added
    tax (VAT). In Europe, VAT rates can range from 8% in Switzerland to 27% in Hungary.
    In the United States, state sales taxes can range from 0% in Oregon to 8.25% in
    California.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的函数执行了一些操作（循环和写入控制台），但没有返回值。假设您需要计算销售税或增值税（VAT）。在欧洲，增值税率可以从瑞士的8%到匈牙利的27%不等。在美国，州销售税的范围可以从俄勒冈州的0%到加利福尼亚州的8.25%。
- en: Tax rates change all the time, and they vary based on many factors. You do not
    need to contact me to tell me that the tax rate in Virginia is 6%. Thank you.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 税率随时变化，根据许多因素而变化。您无需与我联系告诉我弗吉尼亚的税率是6%。谢谢。
- en: 'Let''s implement a function to calculate taxes in various regions around the
    world:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个在世界各地计算税收的函数：
- en: 'Add a function named `CalculateTax` , as shown in the following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`CalculateTax`的函数，如下面的代码所示：
- en: '```cs'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: decimal
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: CalculateTax
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: CalculateTax
- en: (
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: decimal
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: amount,
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: amount，
- en: string
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: twoLetterRegionCode
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: twoLetterRegionCode
- en: )
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: decimal
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: rate = 0.0
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.0
- en: M;
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: switch
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: switch
- en: (twoLetterRegionCode)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: （twoLetterRegionCode）
- en: '{'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: case
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"CH"'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '"CH"'
- en: ': // Switzerland'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 瑞士'
- en: rate = 0.08
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.08
- en: M;
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: case
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"DK"'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '"DK"'
- en: ': // Denmark'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 丹麦'
- en: case
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"NO"'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '"NO"'
- en: ': // Norway'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 挪威'
- en: rate = 0.25
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.25
- en: M;
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: case
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"GB"'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '"GB"'
- en: ': // United Kingdom'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 英国'
- en: case
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"FR"'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '"FR"'
- en: ': // France'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 法国'
- en: rate = 0.2
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.2
- en: M;
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: case
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"HU"'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '"HU"'
- en: ': // Hungary'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 匈牙利'
- en: rate = 0.27
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.27
- en: M;
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: case
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"OR"'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '"OR"'
- en: ': // Oregon'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 俄勒冈州'
- en: case
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"AK"'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '"AK"'
- en: ': // Alaska'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 阿拉斯加'
- en: case
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"MT"'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '"MT"'
- en: ': // Montana'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 蒙大拿州'
- en: rate = 0.0
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.0
- en: M;
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: case
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"ND"'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '"ND"'
- en: ': // North Dakota'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 北达科他州'
- en: case
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"WI"'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '"WI"'
- en: ': // Wisconsin'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 威斯康星'
- en: case
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"ME"'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '"ME"'
- en: ': // Maine'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 缅因州'
- en: case
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"VA"'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '"VA"'
- en: ': // Virginia'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 弗吉尼亚'
- en: rate = 0.05
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.05
- en: M;
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: case
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '"CA"'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '"CA"'
- en: ': // California'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 加利福尼亚'
- en: rate = 0.0825
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.0825
- en: M;
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: default
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: default
- en: ': // most US states'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 大多数美国州'
- en: rate = 0.06
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: rate = 0.06
- en: M;
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: break
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: break
- en: ;
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: amount * rate;
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: amount * rate;
- en: '}'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the preceding code, note the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，请注意以下内容：
- en: '`CalculateTax` has two inputs: a parameter named `amount` that will be the
    amount of money spent, and a parameter named `twoLetterRegionCode` that will be
    the region the amount is spent in.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CalculateTax`有两个输入：一个名为`amount`的参数，它将是花费的金额，以及一个名为`twoLetterRegionCode`的参数，它将是花费金额的地区。'
- en: '`CalculateTax` will perform a calculation using a `switch` statement and then
    return the sales tax or VAT owed on the amount as a `decimal` value; so, before
    the name of the function, we have declared the data type of the return value to
    be `decimal` .'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CalculateTax`将使用`switch`语句执行计算，然后返回金额上所欠销售税或增值税的`decimal`值；因此，在函数名称之前，我们已经声明了返回值的数据类型为`decimal`。'
- en: 'Comment out the `TimesTable` method call and call the `CalculateTax` method,
    passing values for the amount such as `149` and a valid region code such as `FR`
    , as shown in the following code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉`TimesTable`方法调用，并调用`CalculateTax`方法，传递金额的值，例如`149`和有效的区域代码，例如`FR`，如下面的代码所示：
- en: '```cs'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // TimesTable(6);
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: // TimesTable(6);
- en: decimal
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: 'taxToPay = CalculateTax(amount: 149'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 'taxToPay = CalculateTax(amount: 149'
- en: ', twoLetterRegionCode: "FR"'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '，twoLetterRegionCode: "FR"'
- en: );
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"You must pay
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“您必须支付
- en: '{taxToPay}'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '{taxToPay}'
- en: in tax."
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: in tax."
- en: );
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: You must pay 29.8 in tax.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须支付29.8的税款。
- en: '```'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: We could format the `taxToPay` output as currency by using `{taxToPay:C}` but
    it will use your local culture to decide how to format the currency symbol and
    decimals. For example, for me in the UK, I would see `£29.80` .
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`{taxToPay:C}`将`taxToPay`输出格式化为货币，但它将使用您的本地文化来决定如何格式化货币符号和小数位。例如，对于我来说，在英国，我会看到`£29.80`。
- en: Can you think of any problems with the `CalculateTax` function as written? What
    would happen if the user enters a code such as `fr` or `UK` ? How could you rewrite
    the function to improve it? Would using a `switch` *expression* instead of a `switch`
    *statement* be clearer?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您能想到`CalculateTax`函数的任何问题吗？如果用户输入诸如`fr`或`UK`之类的代码会发生什么？您如何重写函数以改进它？使用`switch`
    *表达式*而不是`switch` *语句*是否更清晰？
- en: Converting numbers from cardinal to ordinal
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从基数转换为序数的数字
- en: 'Numbers that are used to count are called **cardinal** numbers, for example,
    1, 2, and 3, whereas numbers used to order are **ordinal** numbers, for example,
    1st, 2nd, and 3rd. Let''s create a function to convert cardinals to ordinals:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 用于计数的数字称为**基数**数字，例如1、2和3，而用于排序的数字是**序数**数字，例如1st、2nd和3rd。让我们创建一个将基数转换为序数的函数：
- en: 'Write a function named `CardinalToOrdinal` that converts a cardinal `int` value
    into an ordinal `string` value; for example, it converts 1 into 1st, 2 into 2nd,
    and so on, as shown in the following code:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为`CardinalToOrdinal`的函数，将基数`int`值转换为序数`string`值；例如，它将1转换为1st，2转换为2nd，如下面的代码所示：
- en: '```cs'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: string
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: CardinalToOrdinal
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: CardinalToOrdinal
- en: (
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: int
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: number
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: number
- en: )
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: switch
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: switch
- en: (number)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: （数字）
- en: '{'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: case
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '11'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: ': // special cases for 11th to 13th'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: ': // 11th到13th的特殊情况'
- en: case
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '12'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: ':'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: ':'
- en: case
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: '13'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: ':'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: ：
- en: return
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: $"
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: $"
- en: '{number}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '{number}'
- en: th"
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: th"
- en: ;
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: default
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: default
- en: ':'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: ：
- en: int
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: lastDigit = number % 10
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: lastDigit = number % 10
- en: ;
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: string
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: suffix = lastDigit switch
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: suffix = lastDigit switch
- en: '{'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '1'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: => "st"
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: => "st"
- en: ','
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '2'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: => "nd"
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: => "nd"
- en: ','
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '3'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: => "rd"
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: => "rd"
- en: ','
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: _ => "th"
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: _ => "th"
- en: '};'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: return
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: $"
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: $"
- en: '{number}{suffix}'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '{number}{suffix}'
- en: '"'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: ;
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'From the preceding code, note the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，请注意以下内容：
- en: '`CardinalToOrdinal` has one input: a parameter of the `int` type named `number`
    , and one output: a return value of the `string` type.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CardinalToOrdinal` 有一个输入：一个名为 `number` 的 `int` 类型参数，一个输出：一个 `string` 类型的返回值。'
- en: A `switch` *statement* is used to handle the special cases of 11, 12, and 13.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `switch` *语句* 处理11、12和13的特殊情况。
- en: 'A `switch` *expression* then handles all other cases: if the last digit is
    1, then use `st` as the suffix; if the last digit is 2, then use `nd` as the suffix;
    if the last digit is 3, then use `rd` as the suffix; and if the last digit is
    anything else, then use `th` as the suffix.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，`switch` *表达式* 处理所有其他情况：如果最后一位是1，则使用 `st` 作为后缀；如果最后一位是2，则使用 `nd` 作为后缀；如果最后一位是3，则使用
    `rd` 作为后缀；如果最后一位是其他任何数字，则使用 `th` 作为后缀。
- en: 'Write a function named `RunCardinalToOrdinal` that uses a `for` statement to
    loop from 1 to 40, calling the `CardinalToOrdinal` function for each number and
    writing the returned `string` to the console, separated by a space character,
    as shown in the following code:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为 `RunCardinalToOrdinal` 的函数，该函数使用 `for` 语句循环从1到40，为每个数字调用 `CardinalToOrdinal`
    函数，并将返回的 `string` 写入控制台，用空格字符分隔，如下面的代码所示：
- en: '```cs'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: RunCardinalToOrdinal
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: RunCardinalToOrdinal
- en: ()
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: for
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: for
- en: (int
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: (int
- en: number = 1
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: number = 1
- en: ; number <= 40
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ; number <= 40
- en: ; number++)
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: ; number++)
- en: '{'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Write($"
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: Write($"
- en: '{CardinalToOrdinal(number)}'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '{CardinalToOrdinal(number)}'
- en: '"'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine();
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: '}'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Comment out the `CalculateTax` statements, and call the `RunCardinalToOrdinal`
    method, as shown in the following code:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉 `CalculateTax` 语句，并调用 `RunCardinalToOrdinal` 方法，如下面的代码所示：
- en: '```cs'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // TimesTable(6);
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: // TimesTable(6);
- en: '// decimal taxToPay = CalculateTax(amount: 149, twoLetterRegionCode: "FR");'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '// decimal taxToPay = CalculateTax(amount: 149, twoLetterRegionCode: "FR");'
- en: // WriteLine($"You must pay {taxToPay} in tax.");
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: // WriteLine($"You must pay {taxToPay} in tax.");
- en: RunCardinalToOrdinal();
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: RunCardinalToOrdinal();
- en: '```'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the results, as shown in the following output:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th
    18th 19th 20th 21st 22nd 23rd 24th 25th 26th 27th 28th 29th 30th 31st 32nd 33rd
    34th 35th 36th 37th 38th 39th 40th
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th
    18th 19th 20th 21st 22nd 23rd 24th 25th 26th 27th 28th 29th 30th 31st 32nd 33rd
    34th 35th 36th 37th 38th 39th 40th
- en: '```'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Calculating factorials with recursion
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用递归计算阶乘
- en: 'The factorial of 5 is 120, because factorials are calculated by multiplying
    the starting number by one less than itself, and then by one less again, and so
    on, until the number is reduced to 1\. An example can be seen here: 5 x 4 x 3
    x 2 x 1 = 120.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 5的阶乘是120，因为阶乘是通过将起始数字乘以比它小1的数字，然后再乘以比它小的数字，依此类推，直到数字减少到1来计算的。一个例子可以在这里看到：5 x
    4 x 3 x 2 x 1 = 120。
- en: 'Factorials are written like this: 5!, where the exclamation mark is read as
    bang, so 5! = 120, that is, *five bang equals one hundred and twenty* . Bang is
    a good name for factorials because they increase in size very rapidly, just like
    an explosion.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 阶乘写成这样：5!，其中感叹号读作bang，所以5! = 120，也就是说，*五bang等于一百二十*。Bang是阶乘的一个好名字，因为它们的大小增长非常迅速，就像爆炸一样。
- en: 'We will write a function named `Factorial` ; this will calculate the factorial
    for an `int` passed to it as a parameter. We will use a clever technique called
    **recursion** , which means a function that calls itself within its implementation,
    either directly or indirectly:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个名为 `Factorial` 的函数；这将为传递给它的 `int` 计算阶乘。我们将使用一种称为**递归**的巧妙技术，这意味着一个函数在其实现中直接或间接地调用自身：
- en: 'Add a function named `Factorial` , and a function to call it, as shown in the
    following code:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Factorial` 的函数，并调用它，如下面的代码所示：
- en: '```cs'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: int
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: Factorial
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 阶乘
- en: (
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: int
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: number
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: number
- en: )
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (number < 1
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: (number < 1
- en: )
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '0'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: ;
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: if
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (number == 1
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: (number == 1
- en: )
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '1'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: ;
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: number * Factorial(number - 1
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: number * Factorial(number - 1
- en: );
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As before, there are several noteworthy elements of the preceding code, including
    the following:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，前面的代码中有几个值得注意的元素，包括以下内容：
- en: If the input parameter `number` is zero or negative, `Factorial` returns `0`
    .
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入参数 `number` 是零或负数，`Factorial` 返回 `0`。
- en: If the input parameter `number` is `1` , `Factorial` returns `1` , and therefore
    stops calling itself.
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入参数 `number` 是 `1`，`Factorial` 返回 `1`，因此停止调用自身。
- en: If the input parameter `number` is larger than one, which it will be in all
    other cases, `Factorial` multiplies the number by the result of calling itself
    and passing one less than `number` . This makes the function recursive.
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入参数 `number` 大于1，那么在所有其他情况下，`Factorial` 将数字乘以调用自身并传递比 `number` 小1的结果。这使得函数递归。
- en: '**More Information** : Recursion is clever, but it can lead to problems, such
    as a stack overflow due to too many function calls because memory is used to store
    data on every function call, and it eventually uses too much. Iteration is a more
    practical, if less succinct, solution in languages such as C#. You can read more
    about this at the following link: [https://en.wikipedia.org/wiki/Recursion_(computer_science)#Recursion_versus_iteration](https://en.wikipedia.org/wiki/Recursion_(computer_science)#Recursion_versus_iteration)
    .'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：递归很聪明，但它可能会导致问题，比如由于太多函数调用而导致堆栈溢出，因为内存用于在每次函数调用时存储数据，最终使用过多。在诸如C#之类的语言中，迭代是一个更实际但不够简洁的解决方案。您可以在以下链接中阅读更多信息：[https://en.wikipedia.org/wiki/Recursion_(computer_science)#Recursion_versus_iteration](https://en.wikipedia.org/wiki/Recursion_(computer_science)#Recursion_versus_iteration)。'
- en: 'Add a function named `RunFactorial` that uses a `for` statement to output the
    factorials of numbers from 1 to 14, calls the `Factorial` function inside its
    loop, and then outputs the result, formatted using the code `N0` , which means
    number format uses thousand separators with zero decimal places, as shown in the
    following code:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `RunFactorial` 的函数，该函数使用 `for` 语句输出从1到14的数字的阶乘，调用其循环中的 `Factorial` 函数，然后输出结果，使用代码
    `N0` 进行格式化，这意味着数字格式使用千位分隔符，小数位数为零，如下面的代码所示：
- en: '```cs'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: RunFactorial
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: RunFactorial
- en: ()
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: for
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: for
- en: (int
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: (int
- en: i = 1
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: ; i < 15
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: ; i < 15
- en: ; i++)
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: ; i++)
- en: '{'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{i}'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '{i}'
- en: '! ='
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '! ='
- en: '{Factorial(i):N0}'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '{Factorial(i):N0}'
- en: '"'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Comment out the `RunCardinalToOrdinal` method call and call the `RunFactorial`
    method.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Comment out the `RunCardinalToOrdinal` method call and call the `RunFactorial`
    method.
- en: 'Run the code and view the results, as shown in the following output:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Run the code and view the results, as shown in the following output:'
- en: '```cs'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 1! = 1
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 1! = 1
- en: 2! = 2
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 2! = 2
- en: 3! = 6
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 3! = 6
- en: 4! = 24
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 4! = 24
- en: 5! = 120
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 5! = 120
- en: 6! = 720
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 6! = 720
- en: 7! = 5,040
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 7! = 5,040
- en: 8! = 40,320
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 8! = 40,320
- en: 9! = 362,880
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 9! = 362,880
- en: 10! = 3,628,800
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 10! = 3,628,800
- en: 11! = 39,916,800
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 11! = 39,916,800
- en: 12! = 479,001,600
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 12! = 479,001,600
- en: 13! = 1,932,053,504
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 13! = 1,932,053,504
- en: 14! = 1,278,945,280
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 14! = 1,278,945,280
- en: '```'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: It is not immediately obvious in the previous output, but factorials of 13 and
    higher overflow the `int` type because they are so big. 12! is 479,001,600, which
    is about half a billion. The maximum positive value that can be stored in an `int`
    variable is about two billion. 13! is 6,227,020,800, which is about six billion
    and when stored in a 32-bit integer it overflows silently without showing any
    problems.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: It is not immediately obvious in the previous output, but factorials of 13 and
    higher overflow the `int` type because they are so big. 12! is 479,001,600, which
    is about half a billion. The maximum positive value that can be stored in an `int`
    variable is about two billion. 13! is 6,227,020,800, which is about six billion
    and when stored in a 32-bit integer it overflows silently without showing any
    problems.
- en: Do you remember what we can do to be notified of a numeric overflow?
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: Do you remember what we can do to be notified of a numeric overflow?
- en: What should you do to get notified when an overflow happens? Of course, we could
    solve the problem for 13! and 14! by using a `long` (64-bit integer) instead of
    an `int` (32-bit integer), but we will quickly hit the overflow limit again.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: What should you do to get notified when an overflow happens? Of course, we could
    solve the problem for 13! and 14! by using a `long` (64-bit integer) instead of
    an `int` (32-bit integer), but we will quickly hit the overflow limit again.
- en: The point of this section is to understand that numbers can overflow and how
    to show that rather than ignore it, not specifically how to calculate factorials
    higher than 12!.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: The point of this section is to understand that numbers can overflow and how
    to show that rather than ignore it, not specifically how to calculate factorials
    higher than 12!.
- en: 'Modify the `Factorial` function to check for overflows, as shown highlighted
    in the following code:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Modify the `Factorial` function to check for overflows, as shown highlighted
    in the following code:'
- en: '```cs'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**checked**'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '**checked**'
- en: '**// for overflow**'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '**// for overflow**'
- en: '**{**'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: return
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: number * Factorial(number - 1
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: number * Factorial(number - 1
- en: );
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '**}**'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '```'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Modify the `RunFactorial` function to handle overflow exceptions when calling
    the `Factorial` function, as shown highlighted in the following code:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Modify the `RunFactorial` function to handle overflow exceptions when calling
    the `Factorial` function, as shown highlighted in the following code:'
- en: '```cs'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**try**'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '**try**'
- en: '**{**'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: WriteLine($"
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{i}'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '{i}'
- en: '! ='
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '! ='
- en: '{Factorial(i):N0}'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '{Factorial(i):N0}'
- en: '"'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '**}**'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**catch (System.OverflowException)**'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '**catch (System.OverflowException)**'
- en: '**{**'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**WriteLine(**'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine(**'
- en: '**$"**'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '**$"**'
- en: '**{i}**'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '**{i}**'
- en: '**! is too big for a 32-bit integer."**'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '**! is too big for a 32-bit integer."**'
- en: '**);**'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**}**'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '```'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the results, as shown in the following output:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Run the code and view the results, as shown in the following output:'
- en: '```cs'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 1! = 1
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 1! = 1
- en: 2! = 2
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 2! = 2
- en: 3! = 6
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 3! = 6
- en: 4! = 24
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 4! = 24
- en: 5! = 120
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 5! = 120
- en: 6! = 720
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 6! = 720
- en: 7! = 5,040
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 7! = 5,040
- en: 8! = 40,320
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 8! = 40,320
- en: 9! = 362,880
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 9! = 362,880
- en: 10! = 3,628,800
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 10! = 3,628,800
- en: 11! = 39,916,800
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 11! = 39,916,800
- en: 12! = 479,001,600
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 12! = 479,001,600
- en: 13! is too big for a 32-bit integer.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 13! is too big for a 32-bit integer.
- en: 14! is too big for a 32-bit integer.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 14! is too big for a 32-bit integer.
- en: '```'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Documenting functions with XML comments
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Documenting functions with XML comments
- en: 'By default, when calling a function such as `CardinalToOrdinal` , code editors
    will show a tooltip with basic information, as shown in *Figure 4.1* :'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 'By default, when calling a function such as `CardinalToOrdinal` , code editors
    will show a tooltip with basic information, as shown in *Figure 4.1* :'
- en: '![Graphical user interface, text, application Description automatically generated](img/Image00041.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![Graphical user interface, text, application Description automatically generated](img/Image00041.jpg)'
- en: 'Figure 4.1: A tooltip showing the default simple method signature'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 'Figure 4.1: A tooltip showing the default simple method signature'
- en: 'Let''s improve the tooltip by adding extra information:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'Let''s improve the tooltip by adding extra information:'
- en: 'If you are using Visual Studio Code with the **C#** extension, you should navigate
    to **View** | **Command Palette** | **Preferences: Open Settings (UI)** , and
    then search for `formatOnType` and make sure that is enabled. C# XML documentation
    comments are a built-in feature of Visual Studio 2022.'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'If you are using Visual Studio Code with the **C#** extension, you should navigate
    to **View** | **Command Palette** | **Preferences: Open Settings (UI)** , and
    then search for `formatOnType` and make sure that is enabled. C# XML documentation
    comments are a built-in feature of Visual Studio 2022.'
- en: On the line above the `CardinalToOrdinal` function, type three forward slashes
    `///` , and note that they are expanded into an XML comment that recognizes that
    the function has a single parameter named `number` .
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: On the line above the `CardinalToOrdinal` function, type three forward slashes
    `///` , and note that they are expanded into an XML comment that recognizes that
    the function has a single parameter named `number` .
- en: 'Enter suitable information for the XML documentation comment for a summary
    and to describe the input parameter and the return value for the `CardinalToOrdinal`
    function, as shown in the following code:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Enter suitable information for the XML documentation comment for a summary
    and to describe the input parameter and the return value for the `CardinalToOrdinal`
    function, as shown in the following code:'
- en: '```cs'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: ///
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <summary>
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: <summary>
- en: ///
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: Pass a 32-bit integer and it will be converted into its ordinal equivalent.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: Pass a 32-bit integer and it will be converted into its ordinal equivalent.
- en: ///
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: </summary>
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: </summary>
- en: ///
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <param name="number">
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: <param name="number">
- en: Number is a cardinal value e.g. 1, 2, 3, and so on.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: Number is a cardinal value e.g. 1, 2, 3, and so on.
- en: </param>
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: </param>
- en: ///
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <returns>
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: <returns>
- en: Number as an ordinal value e.g. 1st, 2nd, 3rd, and so on.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: Number as an ordinal value e.g. 1st, 2nd, 3rd, and so on.
- en: </returns>
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: </returns>
- en: '```'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Now, when calling the function, you will see more details, as shown in *Figure
    4.2* :![Graphical user interface, text, application, chat or text message, email
    Description automatically generated](img/Image00042.jpg)
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Now, when calling the function, you will see more details, as shown in *Figure
    4.2* :![Graphical user interface, text, application, chat or text message, email
    Description automatically generated](img/Image00042.jpg)
- en: 'Figure 4.2: A tooltip showing the more detailed method signature'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 'Figure 4.2: A tooltip showing the more detailed method signature'
- en: At the time of writing the sixth edition, C# XML documentation comments do not
    work in .NET Interactive notebooks.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: At the time of writing the sixth edition, C# XML documentation comments do not
    work in .NET Interactive notebooks.
- en: '**Good Practice** : Add XML documentation comments to all your functions.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：为所有函数添加XML文档注释。'
- en: Using lambdas in function implementations
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在函数实现中使用lambda
- en: F# is Microsoft's strongly typed functional-first programming language that,
    like C#, compiles to IL to be executed by .NET. Functional languages evolved from
    lambda calculus; a computational system based only on functions. The code looks
    more like mathematical functions than steps in a recipe.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: F#是微软的强类型函数优先编程语言，与C#一样，编译为IL以供.NET执行。函数语言起源于λ演算；一个仅基于函数的计算系统。代码看起来更像数学函数，而不是食谱中的步骤。
- en: 'Some of the important attributes of functional languages are defined in the
    following list:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 函数语言的一些重要属性在以下列表中定义：
- en: '**Modularity** : The same benefit of defining functions in C# applies to functional
    languages. Break up a large complex code base into smaller pieces.'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：在C#中定义函数的同样好处适用于函数语言。将大型复杂的代码库分解为较小的部分。'
- en: '**Immutability** : Variables in the C# sense do not exist. Any data value inside
    a function cannot change. Instead, a new data value can be created from an existing
    one. This reduces bugs.'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不变性**：在C#中，变量不存在。函数内部的任何数据值都不能更改。相反，可以从现有数据值创建新的数据值。这减少了错误。'
- en: '**Maintainability** : Code is cleaner and clearer (for mathematically inclined
    programmers!).'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：代码更清晰（适用于数学倾向的程序员！）。'
- en: Since C# 6, Microsoft has worked to add features to the language to support
    a more functional approach. For example, adding **tuples** and **pattern matching**
    in C# 7, **non-null reference types** in C# 8, and improving pattern matching
    and adding records, that is, **immutable objects** in C# 9.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 自C# 6以来，微软一直致力于为语言添加功能，以支持更加函数式的方法。例如，在C# 7中添加了**元组**和**模式匹配**，在C# 8中添加了**非空引用类型**，并改进了模式匹配并添加了记录，即C#
    9中的**不可变对象**。
- en: In C# 6, Microsoft added support for **expression-bodied function members**
    . We will look at an example of this now.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 在C# 6中，微软添加了对**表达式主体函数成员**的支持。我们现在将看一个例子。
- en: 'The **Fibonacci sequence** of numbers always starts with 0 and 1\. Then the
    rest of the sequence is generated using the rule of adding together the previous
    two numbers, as shown in the following sequence of numbers:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '**斐波那契数列**总是以0和1开始。然后，使用将前两个数字相加的规则生成序列的其余部分，如下面的数字序列所示：'
- en: '```cs'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '0'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: '1'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '1'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '5'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '8'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '13'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '21'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '21'
- en: '34'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '34'
- en: '55'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '55'
- en: '...'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The next term in the sequence would be 34 + 55, which is 89.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 序列中的下一个项将是34 + 55，即89。
- en: 'We will use the Fibonacci sequence to illustrate the difference between an
    imperative and declarative function implementation:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用斐波那契数列来说明命令式和声明式函数实现之间的区别：
- en: 'Add a function named `FibImperative` that will be written in an imperative
    style, as shown in the following code:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`FibImperative`的函数，该函数将以命令式风格编写，如下面的代码所示：
- en: '```cs'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: int
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: FibImperative
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: FibImperative
- en: (
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: int
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: term
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 术语
- en: )
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (term == 1
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: （term == 1
- en: )
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '0'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: ;
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: if
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (term == 2
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: （term == 2
- en: )
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '1'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: ;
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: '{'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: FibImperative(term - 1
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: FibImperative（term-1
- en: ) + FibImperative(term - 2
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: ）+ FibImperative（term-2
- en: );
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a function named `RunFibImperative` that calls `FibImperative` inside a
    `for` statement that loops from 1 to 30, as shown in the following code:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`RunFibImperative`的函数，该函数在`for`语句中调用`FibImperative`，该语句循环从1到30，如下面的代码所示：
- en: '```cs'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: RunFibImperative
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: RunFibImperative
- en: ()
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: for
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (int
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: i = 1
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: ; i <= 30
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: ; i <= 30
- en: ; i++)
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: ; i ++）
- en: '{'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("The {0} term of the Fibonacci sequence is {1:N0}."
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“斐波那契数列的第{0}项是{1：N0}。”
- en: ','
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: CardinalToOrdinal(i),'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：CardinalToOrdinal（i），
- en: 'arg1: FibImperative(term: i));'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：FibImperative（term：i））;
- en: '}'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Comment out the other method calls and call the `RunFibImperative` method.
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉其他方法调用，并调用`RunFibImperative`方法。
- en: 'Run the code and view the results, as shown in the following output:'
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: The 1st term of the Fibonacci sequence is 0.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第1项是0。
- en: The 2nd term of the Fibonacci sequence is 1.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第2项是1。
- en: The 3rd term of the Fibonacci sequence is 1.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第3项是1。
- en: The 4th term of the Fibonacci sequence is 2.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第4项是2。
- en: The 5th term of the Fibonacci sequence is 3.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第5项是3。
- en: The 6th term of the Fibonacci sequence is 5.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第6项是5。
- en: The 7th term of the Fibonacci sequence is 8.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第7项是8。
- en: The 8th term of the Fibonacci sequence is 13.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第8项是13。
- en: The 9th term of the Fibonacci sequence is 21.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第9项是21。
- en: The 10th term of the Fibonacci sequence is 34.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第10项是34。
- en: The 11th term of the Fibonacci sequence is 55.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第11项是55。
- en: The 12th term of the Fibonacci sequence is 89.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第12项是89。
- en: The 13th term of the Fibonacci sequence is 144.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第13项是144。
- en: The 14th term of the Fibonacci sequence is 233.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第14项是233。
- en: The 15th term of the Fibonacci sequence is 377.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第15项是377。
- en: The 16th term of the Fibonacci sequence is 610.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第16项是610。
- en: The 17th term of the Fibonacci sequence is 987.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第17项是987。
- en: The 18th term of the Fibonacci sequence is 1,597.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第18项是1,597。
- en: The 19th term of the Fibonacci sequence is 2,584.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第19项是2,584。
- en: The 20th term of the Fibonacci sequence is 4,181.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第20项是4,181。
- en: The 21st term of the Fibonacci sequence is 6,765.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第21项是6,765。
- en: The 22nd term of the Fibonacci sequence is 10,946.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第22项是10,946。
- en: The 23rd term of the Fibonacci sequence is 17,711.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第23项是17,711。
- en: The 24th term of the Fibonacci sequence is 28,657.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第24项是28,657。
- en: The 25th term of the Fibonacci sequence is 46,368.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第25项是46,368。
- en: The 26th term of the Fibonacci sequence is 75,025.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第26项是75,025。
- en: The 27th term of the Fibonacci sequence is 121,393.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第27项是121,393。
- en: The 28th term of the Fibonacci sequence is 196,418.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第28项是196,418。
- en: The 29th term of the Fibonacci sequence is 317,811.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第29项是317,811。
- en: The 30th term of the Fibonacci sequence is 514,229.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列的第30项是514,229。
- en: '```'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a function named `FibFunctional` written in a declarative style, as shown
    in the following code:'
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`FibFunctional`的函数，以声明式风格编写，如下面的代码所示：
- en: '```cs'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: int
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: FibFunctional
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: FibFunctional
- en: (
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: int
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: term
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 项
- en: )
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: =>
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: =>
- en: term switch
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 术语切换
- en: '{'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '1'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: => 0
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: => 0
- en: ','
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '2'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: => 1
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: => 1
- en: ','
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: _ => FibFunctional(term - 1
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: _ => FibFunctional(term - 1
- en: ) + FibFunctional(term - 2
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: ）+ FibFunctional(term - 2
- en: )
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '};'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a function to call it inside a `for` statement that loops from 1 to 30,
    as shown in the following code:'
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个函数来调用它，该函数在一个`for`语句中循环从1到30，如下面的代码所示：
- en: '```cs'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: RunFibFunctional
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: RunFibFunctional
- en: ()
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: for
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (int
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: i = 1
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: ; i <= 30
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: ; i <= 30
- en: ; i++)
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: ; i++)
- en: '{'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("The {0} term of the Fibonacci sequence is {1:N0}."
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("斐波那契数列的第{0}项是{1:N0}。"
- en: ','
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: CardinalToOrdinal(i),'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：CardinalToOrdinal(i),
- en: 'arg1: FibFunctional(term: i));'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1：FibFunctional(term: i));'
- en: '}'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Comment out the `RunFibImperative` method call, and call the `RunFibFunctional`
    method.
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉`RunFibImperative`方法调用，并调用`RunFibFunctional`方法。
- en: Run the code and view the results (which will be the same as before).
  id: totrans-659
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果（与以前相同）。
- en: Debugging during development
  id: totrans-660
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发期间调试
- en: In this section, you will learn how to debug problems at development time. You
    must use a code editor that has debugging tools such as Visual Studio or Visual
    Studio Code. At the time of writing, you cannot use .NET Interactive Notebooks
    to debug code, but this is expected to be added in the future.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何在开发时调试问题。您必须使用具有调试工具的代码编辑器，例如Visual Studio或Visual Studio Code。在撰写本文时，您无法使用.NET交互式笔记本来调试代码，但预计将来会添加。
- en: '**More Information** : Some people find it tricky setting up the OmniSharp
    debugger for Visual Studio Code. I have included instructions for the most common
    issues, but if you still have trouble, try reading the information at the following
    link: [https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：有些人发现为Visual Studio Code设置OmniSharp调试器有些棘手。我已经包含了最常见问题的说明，但如果您仍然遇到问题，请尝试阅读以下链接中的信息：[https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)'
- en: Creating code with a deliberate bug
  id: totrans-663
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建有意的错误的代码
- en: 'Let''s explore debugging by creating a console app with a deliberate bug that
    we will then use the debugger tools in your code editor to track down and fix:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个有意的错误的控制台应用程序来探索调试，然后使用您的代码编辑器中的调试工具来追踪并修复错误：
- en: Use your preferred coding tool to add a new **Console Application** to the `Chapter04`
    workspace/solution named `Debugging` .
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编码工具向`Chapter04`工作区/解决方案添加一个新的**控制台应用程序**，命名为`Debugging`。
- en: In Visual Studio Code, select `Debugging` as the active OmniSharp project. When
    you see the pop-up warning message saying that required assets are missing, click
    **Yes** to add them.
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Debugging`作为活动的OmniSharp项目。当看到弹出的警告消息说缺少所需的资产时，点击**是**以添加它们。
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: 'In `Program.cs` , add a function with a deliberate bug, as shown in the following
    code:'
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加一个有意的错误的函数，如下面的代码所示：
- en: '```cs'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: double
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: Add
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 添加
- en: (
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: double
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: a,
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: a，
- en: double
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: b
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: b
- en: )
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: a * b; // deliberate bug!
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: a * b; // 有意的错误！
- en: '}'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Below the `Add` function, write statements to declare and set some variables
    and then add them together using the buggy function, as shown in the following
    code:'
  id: totrans-684
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Add`函数下面，编写语句来声明和设置一些变量，然后使用有错误的函数将它们相加，如下面的代码所示：
- en: '```cs'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: double
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: a = 4.5
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: a = 4.5
- en: ;
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: double
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: b = 2.5
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: b = 2.5
- en: ;
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: double
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: answer = Add(a, b);
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: answer = Add(a, b);
- en: WriteLine($"
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{a}'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '{a}'
- en: +
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: +
- en: '{b}'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '{b}'
- en: '='
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '{answer}'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '{answer}'
- en: '"'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("Press ENTER to end the app."
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("按ENTER键结束应用程序。"
- en: );
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: ReadLine(); // wait for user to press ENTER
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: ReadLine(); // 等待用户按ENTER键
- en: '```'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the console application and view the result, as shown in the following
    partial output:'
  id: totrans-706
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并查看结果，如下面的部分输出所示：
- en: '```cs'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 4.5 + 2.5 = 11.25
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 4.5 + 2.5 = 11.25
- en: '```'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: But wait, there's a bug! 4.5 added to 2.5 should be 7, not 11.25!
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请等一下，有一个错误！4.5加上2.5应该是7，而不是11.25！
- en: We will use the debugging tools to hunt for and squash the bug.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用调试工具来寻找并消灭错误。
- en: Setting a breakpoint and start debugging
  id: totrans-712
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置断点并开始调试
- en: Breakpoints allow us to mark a line of code that we want to pause at to inspect
    the program state and find bugs.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 断点允许我们标记要暂停以检查程序状态并查找错误的代码行。
- en: Using Visual Studio 2022
  id: totrans-714
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022
- en: 'Let''s set a breakpoint and then start debugging using Visual Studio 2022:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一个断点，然后使用Visual Studio 2022开始调试：
- en: Click in the statement that declares the variable named `a` .
  id: totrans-716
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击声明名为`a`的变量的语句。
- en: Navigate to **Debug** | **Toggle Breakpoint** or press F9 . A red circle will
    then appear in the margin bar on the left-hand side and the statement will be
    highlighted in red to indicate that a breakpoint has been set, as shown in *Figure
    4.3* :![](img/Image00043.jpg)
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**调试** | **切换断点**或按F9。然后，左侧边栏上会出现一个红色圆圈，并且该语句将以红色突出显示，以指示已设置断点，如*图4.3*所示：![](img/Image00043.jpg)
- en: 'Figure 4.3: Toggling breakpoints using Visual Studio 2022'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：使用Visual Studio 2022切换断点
- en: Breakpoints can be toggled off with the same action. You can also left-click
    in the margin to toggle a breakpoint on and off, or right-click a breakpoint to
    see more options, such as delete, disable, or edit conditions or actions for an
    existing breakpoint.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 断点可以使用相同的操作切换关闭。您还可以在边栏中单击左键以切换断点的打开和关闭，或者右键单击断点以查看更多选项，例如删除、禁用或编辑现有断点的条件或操作。
- en: Navigate to **Debug** | **Start Debugging** or press F5 . Visual Studio starts
    the console application and then pauses when it hits the breakpoint. This is known
    as break mode. Extra windows titled **Locals** (showing current values of local
    variables), **Watch 1** (showing any watch expressions you have defined), **Call
    Stack** , **Exception Settings** , and **Immediate Window** appear. The **Debugging**
    toolbar appears. The line that will be executed next is highlighted in yellow,
    and a yellow arrow points at the line from the margin bar, as shown in *Figure
    4.4* :![](img/Image00044.jpg)
  id: totrans-720
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**调试** | **开始调试**或按F5。Visual Studio启动控制台应用程序，然后在命中断点时暂停。这称为断点模式。额外的窗口标题为**Locals**（显示本地变量的当前值）、**Watch
    1**（显示您定义的任何监视表达式）、**Call Stack**、**Exception Settings**和**Immediate Window**出现。**调试**工具栏出现。将要执行的下一行将以黄色高亮显示，并且黄色箭头指向边栏的该行，如*图4.4*所示：![](img/Image00044.jpg)
- en: 'Figure 4.4: Break mode in Visual Studio 2022'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4：Visual Studio 2022中的断点模式
- en: If you do not want to see how to use Visual Studio Code to start debugging then
    you can skip the next section and continue to the section titled *Navigating with
    the debugging toolbar* .
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想看如何使用Visual Studio Code开始调试，可以跳过下一节，继续阅读标题为*使用调试工具栏导航*的部分。
- en: Using Visual Studio Code
  id: totrans-723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code
- en: 'Let''s set a breakpoint and then start debugging using Visual Studio Code:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一个断点，然后使用Visual Studio Code开始调试：
- en: Click in the statement that declares the variable named `a` .
  id: totrans-725
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击声明名为`a`的变量的语句。
- en: Navigate to **Run** | **Toggle Breakpoint** or press F9 . A red circle will
    appear in the margin bar on the left-hand side to indicate that a breakpoint has
    been set, as shown in *Figure 4.5* :![](img/Image00045.jpg)
  id: totrans-726
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**运行** | **切换断点**或按F9。左侧边栏中会出现一个红色圆圈，表示已设置断点，如*图4.5*所示：![](img/Image00045.jpg)
- en: 'Figure 4.5: Toggling breakpoints using Visual Studio Code'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5：使用Visual Studio Code切换断点
- en: Breakpoints can be toggled off with the same action. You can also left-click
    in the margin to toggle a breakpoint on and off, or right-click to see more options,
    such as remove, edit, or disable an existing breakpoint; or adding a breakpoint,
    conditional breakpoint, or logpoint when a breakpoint does not yet exist.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用相同的操作关闭断点。您还可以在边栏中左键单击以切换断点的开启和关闭，或者右键单击以查看更多选项，例如删除、编辑或禁用现有断点；或者在断点尚不存在时添加断点、条件断点或日志点。
- en: Logpoints, also known as tracepoints, indicate that you want to record some
    information without having to actually stop executing the code at that point.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 日志点，也称为跟踪点，表示您想要记录一些信息，而无需在该点停止执行代码。
- en: Navigate to **View** | **Run** , or in the left navigation bar you can click
    the **Run and Debug** icon (the triangle "play" button and "bug"), as shown in
    *Figure 4.5* .
  id: totrans-730
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**视图** | **运行**，或者在左侧导航栏中单击**运行和调试**图标（三角形“播放”按钮和“bug”），如*图4.5*所示。
- en: At the top of the **DEBUG** window, click on the dropdown to the right of the
    **Start Debugging** button (green triangular "play" button), and select **.NET
    Core Launch (console) (Debugging)** , as shown in *Figure 4.6* :![](img/Image00046.jpg)
  id: totrans-731
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**DEBUG**窗口顶部，单击**开始调试**按钮（绿色三角形“播放”按钮）右侧的下拉菜单，并选择**.NET Core Launch (console)
    (Debugging)**，如*图4.6*所示：![](img/Image00046.jpg)
- en: 'Figure 4.6: Selecting the project to debug using Visual Studio Code'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：使用Visual Studio Code选择要调试的项目
- en: '**Good Practice** : If you do not see a choice in the dropdown list for the
    **Debugging** project, it is because that project does not have the assets needed
    to debug. Those assets are stored in the `.vscode` folder. To create the `.vscode`
    folder for a project, navigate to **View** | **Command Palette** , select **OmniSharp:
    Select Project** , and then select the **Debugging** project. After a few seconds,
    when prompted, **Required assets to build and debug are missing from ''Debugging''.
    Add them?** , click **Yes** to add the missing assets.'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果在**调试**项目的下拉列表中看不到选项，那是因为该项目没有进行调试所需的资源。这些资源存储在`.vscode`文件夹中。要为项目创建`.vscode`文件夹，请导航到**视图**
    | **命令面板**，选择**OmniSharp: 选择项目**，然后选择**调试**项目。几秒钟后，当提示**“从''Debugging''中缺少构建和调试所需的资源。是否添加？”**时，点击**是**以添加缺失的资源。'
- en: At the top of the **DEBUG** window, click the **Start Debugging** button (green
    triangular "play" button), or navigate to **Run** | **Start Debugging** , or press
    F5 . Visual Studio Code starts the console application and then pauses when it
    hits the breakpoint. This is known as break mode. The line that will be executed
    next is highlighted in yellow, and a yellow block points at the line from the
    margin bar, as shown in *Figure 4.7* :![](img/Image00047.jpg)
  id: totrans-734
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**DEBUG**窗口顶部，单击**开始调试**按钮（绿色三角形“播放”按钮），或导航到**运行** | **开始调试**，或按F5。Visual Studio
    Code启动控制台应用程序，然后在命中断点时暂停。这称为断点模式。将要执行的下一行将以黄色高亮显示，并且黄色块指向边栏的该行，如*图4.7*所示：![](img/Image00047.jpg)
- en: 'Figure 4.7: Break mode in Visual Studio Code'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：Visual Studio Code中的断点模式
- en: Navigating with the debugging toolbar
  id: totrans-736
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用调试工具栏导航
- en: Visual Studio Code shows a floating toolbar with buttons to make it easy to
    access debugging features. Visual Studio 2022 has one button in its **Standard**
    toolbar to start or continue debugging and a separate **Debugging** toolbar for
    the rest of the tools.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code显示一个浮动工具栏，其中包含按钮，便于访问调试功能。Visual Studio 2022在其**标准**工具栏中有一个按钮，用于启动或继续调试，以及一个单独的**调试**工具栏用于其他工具。
- en: 'Both are shown in *Figure 4.8* and as described in the following list:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都显示在*图4.8*中，并如下列表所述：
- en: '![Graphical user interface Description automatically generated with medium
    confidence](img/Image00048.jpg)'
  id: totrans-739
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面描述自动生成，中等置信度](img/Image00048.jpg)'
- en: 'Figure 4.8: Debugging toolbars in Visual Studio 2022 and Visual Studio Code'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：Visual Studio 2022和Visual Studio Code中的调试工具栏
- en: '**Continue** /F5 : This button will continue running the program from the current
    position until it ends or hits another breakpoint.'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继续**/F5：此按钮将从当前位置继续运行程序，直到结束或命中另一个断点。'
- en: '**Step Over** /F10 , **Step Into** /F11 , and **Step Out** /Shift + F11 (blue
    arrows over dots): These buttons step through the code statements in various ways,
    as you will see in a moment.'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Step Over** /F10，**Step Into** /F11和**Step Out** /Shift + F11（蓝色箭头覆盖点）：这些按钮以各种方式逐步执行代码语句，稍后您将看到。'
- en: '**Restart** /Ctrl or Cmd + Shift + F5 (circular arrow): This button will stop
    and then immediately restart the program with the debugger attached again.'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Restart** /Ctrl或Cmd + Shift + F5（圆形箭头）：此按钮将停止然后立即重新启动带有调试器的程序。'
- en: '**Stop** /Shift + F5 (red square): This button will stop the debugging session.'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Stop** /Shift + F5（红色方块）：此按钮将停止调试会话。'
- en: Debugging windows
  id: totrans-745
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试窗口
- en: While debugging, both Visual Studio Code and Visual Studio show extra windows
    that allow you to monitor useful information, such as variables, while you step
    through your code.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试时，Visual Studio Code和Visual Studio都会显示额外的窗口，允许您监视有用的信息，例如变量，同时逐步执行代码。
- en: 'The most useful windows are described in the following list:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最有用的窗口：
- en: '**VARIABLES** , including **Locals** , which shows the name, value, and type
    for any local variables automatically. Keep an eye on this window while you step
    through your code.'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VARIABLES**，包括**Locals**，自动显示任何本地变量的名称、值和类型。在逐步执行代码时，密切关注此窗口。'
- en: '**WATCH** , or **Watch 1** , which shows the value of variables and expressions
    that you manually enter.'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WATCH**或**Watch 1**，显示您手动输入的变量和表达式的值。'
- en: '**CALL STACK** , which shows the stack of function calls.'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CALL STACK**显示函数调用堆栈。'
- en: '**BREAKPOINTS** , which shows all your breakpoints and allows finer control
    over them.'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BREAKPOINTS**显示所有断点并允许对其进行更精细的控制。'
- en: 'When in break mode, there is also a useful window at the bottom of the edit
    area:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 在断点模式下，编辑区域底部还有一个有用的窗口：
- en: '**DEBUG CONSOLE** or **Immediate Window** enables live interaction with your
    code. You can interrogate the program state, for example, by entering the name
    of a variable. For example, you can ask a question such as, "What is 1+2?" by
    typing `1+2` and pressing Enter , as shown in *Figure 4.9* :![](img/Image00049.jpg)'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DEBUG CONSOLE**或**Immediate Window**可以实现与代码的实时交互。您可以查询程序状态，例如输入变量的名称。例如，您可以通过输入`1+2`并按Enter来询问问题，如*图4.9*所示：![](img/Image00049.jpg)'
- en: 'Figure 4.9: Interrogating the program state'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9：查询程序状态
- en: Stepping through code
  id: totrans-755
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐步执行代码
- en: 'Let''s explore some ways to step through the code using either Visual Studio
    or Visual Studio Code:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些使用Visual Studio或Visual Studio Code逐步执行代码的方法：
- en: Navigate to **Run/Debug** | **Step Into** , or click on the **Step Into** button
    in the toolbar, or press F11 . The yellow highlight steps forward one line.
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Run/Debug** | **Step Into**，或单击工具栏中的**Step Into**按钮，或按F11。黄色高亮显示将向前移动一行。
- en: Navigate to **Run/Debug** | **Step Over** , or click on the **Step Over** button
    in the toolbar, or press F10 . The yellow highlight steps forward one line. At
    the moment, you can see that there is no difference between using **Step Into**
    or **Step Over** .
  id: totrans-758
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Run/Debug** | **Step Over**，或单击工具栏中的**Step Over**按钮，或按F10。黄色高亮显示将向前移动一行。目前，您可以看到使用**Step
    Into**或**Step Over**之间没有区别。
- en: You should now be on the line that calls the `Add` method, as shown in *Figure
    4.10* :![](img/Image00050.jpg)
  id: totrans-759
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您应该在调用`Add`方法的行上，如*图4.10*所示：![](img/Image00050.jpg)
- en: 'Figure 4.10: Stepping into and over code'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10：进入和跳过代码
- en: 'The difference between **Step Into** and **Step Over** can be seen when you
    are about to execute a method call:'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '**Step Into**和**Step Over**之间的区别在于您即将执行方法调用时：'
- en: If you click on **Step Into** , the debugger steps *into* the method so that
    you can step through every line in that method.
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果单击**Step Into**，调试器将*进入*该方法，以便您可以逐行执行该方法中的每一行。
- en: If you click on **Step Over** , the whole method is executed in one go; it does
    not skip over the method without executing it.
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果单击**Step Over**，整个方法将一次执行完毕；它不会跳过方法而不执行它。
- en: Click on **Step Into** to step inside the method.
  id: totrans-764
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Step Into**以进入方法内部。
- en: Hover your mouse pointer over the `a` or `b` parameters in the code editing
    window and note that a tooltip appears showing their current value.
  id: totrans-765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标指针悬停在代码编辑窗口中的`a`或`b`参数上，注意到会显示一个工具提示，显示它们的当前值。
- en: Select the expression `a * b` , right-click the expression, and select **Add
    to Watch** or **Add Watch** . The expression is added to the **WATCH** window,
    showing that this operator is multiplying `a` by `b` to give the result `11.25`
    .
  id: totrans-766
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择表达式`a * b`，右键单击表达式，然后选择**Add to Watch**或**Add Watch**。该表达式将添加到**WATCH**窗口，显示该运算符正在将`a`乘以`b`以得到结果`11.25`。
- en: In the **WATCH** or **Watch 1** window, right-click the expression and choose
    **Remove Expression** or **Delete Watch** .
  id: totrans-767
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**WATCH**或**Watch 1**窗口中，右键单击表达式，然后选择**Remove Expression**或**Delete Watch**。
- en: Fix the bug by changing `*` to `+` in the `Add` function.
  id: totrans-768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Add`函数中将`*`更改为`+`以修复bug。
- en: Stop debugging, recompile, and restart debugging by clicking the circular arrow
    **Restart** button or pressing Ctrl or Cmd + Shift + F5 .
  id: totrans-769
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止调试，重新编译，并通过单击圆形箭头**Restart**按钮或按Ctrl或Cmd + Shift + F5重新启动调试。
- en: Step over the function, take a minute to note how it now calculates correctly,
    and click the **Continue** button or press **F5** .
  id: totrans-770
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳过该函数，花一分钟时间注意它现在如何正确计算，并单击**Continue**按钮或按**F5**。
- en: With Visual Studio Code, note that when writing to the console during debugging,
    the output appears in the **DEBUG CONSOLE** window instead of the **TERMINAL**
    window, as shown in *Figure 4.11* :![](img/Image00051.jpg)
  id: totrans-771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code时，请注意在调试期间向控制台写入时，输出将显示在**DEBUG CONSOLE**窗口中，而不是**TERMINAL**窗口中，如*图4.11*所示：![](img/Image00051.jpg)
- en: 'Figure 4.11: Writing to the DEBUG CONSOLE during debugging'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11：在调试期间写入DEBUG CONSOLE
- en: Customizing breakpoints
  id: totrans-773
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义断点
- en: 'It is easy to make more complex breakpoints:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易创建更复杂的断点：
- en: If you are still debugging, click the **Stop** button in the debugging toolbar,
    or navigate to **Run/Debug** | **Stop Debugging** , or press Shift + F5 .
  id: totrans-775
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您仍在调试中，请单击调试工具栏中的**Stop**按钮，或导航到**Run/Debug** | **Stop Debugging**，或按Shift
    + F5。
- en: Navigate to **Run** | **Remove All Breakpoints** or **Debug** | **Delete All
    Breakpoints** .
  id: totrans-776
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**运行** | **删除所有断点**或**调试** | **删除所有断点**。
- en: Click on the `WriteLine` statement that outputs the answer.
  id: totrans-777
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击输出答案的`WriteLine`语句。
- en: Set a breakpoint by pressing F9 or navigating to **Run/Debug** | **Toggle Breakpoint**
    .
  id: totrans-778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按F9或导航到**运行/调试** | **切换断点**来设置断点。
- en: In Visual Studio Code, right-click the breakpoint and choose **Edit Breakpoint...**
    , and then enter an expression, such as the `answer` variable must be greater
    than 9, and note the expression must evaluate to true for the breakpoint to activate,
    as shown in *Figure 4.12* :![](img/Image00052.jpg)
  id: totrans-779
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，右键单击断点，选择**编辑断点...**，然后输入一个表达式，比如`answer`变量必须大于9，并注意表达式必须为真才能激活断点，如*图4.12*所示：![](img/Image00052.jpg)
- en: 'Figure 4.12: Customizing a breakpoint with an expression using Visual Studio
    Code'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12：使用Visual Studio Code自定义断点表达式
- en: In Visual Studio, right-click the breakpoint and choose **Conditions...** ,
    and then enter an expression, such as the `answer` variable must be greater than
    9, and note the expression must evaluate to true for the breakpoint to activate.
  id: totrans-781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，右键单击断点，选择**条件...**，然后输入一个表达式，比如`answer`变量必须大于9，并注意表达式必须为真才能激活断点。
- en: Start debugging and note the breakpoint is not hit.
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始调试，并注意断点未命中。
- en: Stop debugging.
  id: totrans-783
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止调试。
- en: Edit the breakpoint or its conditions and change its expression to less than
    9.
  id: totrans-784
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑断点或其条件，并将其表达式更改为小于9。
- en: Start debugging and note the breakpoint is hit.
  id: totrans-785
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始调试，并注意断点被命中。
- en: Stop debugging.
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止调试。
- en: Edit the breakpoint or its conditions, (in Visual Studio click **Add condition**
    ) and select **Hit Count** , then enter a number such as `3` , meaning that you
    would have to hit the breakpoint three times before it activates, as shown in
    *Figure 4.13* :![Graphical user interface, text, application Description automatically
    generated](img/Image00053.jpg)
  id: totrans-787
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑断点或其条件（在Visual Studio中单击**添加条件**），然后选择**命中计数**，然后输入一个数字，比如`3`，这意味着您必须命中断点三次才能激活它，如*图4.13*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00053.jpg)
- en: 'Figure 4.13: Customizing a breakpoint with an expression and hot count using
    Visual Studio 2022'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13：使用Visual Studio 2022自定义断点表达式和命中计数
- en: Hover your mouse over the breakpoint's red circle to see a summary, as shown
    in *Figure 4.14* :![Graphical user interface, text, application Description automatically
    generated](img/Image00054.jpg)
  id: totrans-789
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在断点的红色圆圈上以查看摘要，如*图4.14*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00054.jpg)
- en: 'Figure 4.14: A summary of a customized breakpoint in Visual Studio Code'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14：Visual Studio Code中自定义断点的摘要
- en: You have now fixed a bug using some debugging tools and seen some advanced possibilities
    for setting breakpoints.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经使用一些调试工具修复了一个错误，并看到了一些设置断点的高级可能性。
- en: Logging during development and runtime
  id: totrans-792
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发和运行时日志记录
- en: Once you believe that all the bugs have been removed from your code, you would
    then compile a release version and deploy the application, so that people can
    use it. But no code is ever bug free, and during runtime unexpected errors can
    occur.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您相信代码中的所有错误都已经被修复，那么您将编译一个发布版本并部署应用程序，以便人们可以使用它。但是没有代码是完全没有错误的，在运行时可能会发生意外错误。
- en: End users are notoriously bad at remembering, admitting to, and then accurately
    describing what they were doing when an error occurred, so you should not rely
    on them accurately providing useful information to reproduce the problem to understand
    what caused the problem and then fix it. Instead, you can **instrument your code**
    , which means logging events of interest.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 最终用户极其不擅长记住、承认并准确描述发生错误时他们正在做什么，因此您不应该依赖于他们提供有用的信息来重现问题以理解问题的原因并解决问题。相反，您可以**仪表化您的代码**，这意味着记录感兴趣的事件。
- en: '**Good Practice** : Add code throughout your application to log what is happening,
    and especially when exceptions occur, so that you can review the logs and use
    them to trace the issue and fix the problem. Although we will see logging again
    in *Chapter 10* , *Working with Data Using Entity Framework Core* , and in *Chapter
    15* , *Building Websites Using the Model-View-Controller Pattern* , logging is
    a huge topic, so we can only cover the basics in this book.'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在整个应用程序中添加代码来记录发生的情况，特别是在发生异常时，以便您可以查看日志并使用它们来跟踪问题并解决问题。虽然我们将在*第10章*，*使用Entity
    Framework Core处理数据*和*第15章*，*使用模型-视图-控制器模式构建网站*中再次看到日志记录，但日志记录是一个庞大的主题，所以我们只能在本书中涵盖基础知识。'
- en: Understanding logging options
  id: totrans-796
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解日志记录选项
- en: '.NET includes some built-in ways to instrument your code by adding logging
    capabilities. We will cover the basics in this book. But logging is an area where
    third parties have created a rich ecosystem of powerful solutions that extend
    what Microsoft provides. I cannot make specific recommendations because the best
    logging framework depends on your needs. But I include some common ones in the
    following list:'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: .NET包括一些内置的方法来通过添加日志记录功能来仪表化您的代码。我们将在本书中介绍基础知识。但是日志记录是一个领域，第三方已经创建了丰富的强大解决方案生态系统，扩展了微软提供的功能。我无法提出具体的建议，因为最佳的日志记录框架取决于您的需求。但我在以下列表中包含了一些常见的日志记录框架：
- en: Apache log4net
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache log4net
- en: NLog
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLog
- en: Serilog
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Serilog
- en: Instrumenting with Debug and Trace
  id: totrans-801
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Debug和Trace进行仪表化
- en: 'There are two types that can be used to add simple logging to your code: `Debug`
    and `Trace` .'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型可用于向您的代码添加简单的日志记录：`Debug`和`Trace`。
- en: 'Before we delve into them in more detail, let''s look at a quick overview of
    each one:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们更详细地深入研究它们之前，让我们快速概述一下每个选项：
- en: The `Debug` class is used to add logging that gets written only during development.
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Debug`类用于添加仅在开发期间写入的日志记录。'
- en: The `Trace` class is used to add logging that gets written during both development
    and runtime.
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trace`类用于添加在开发和运行时都会写入的日志记录。'
- en: You have seen the use of the `Console` type and its `WriteLine` method write
    out to the console window. There is also a pair of types named `Debug` and `Trace`
    that have more flexibility in where they write out to.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到了`Console`类型及其`WriteLine`方法写入到控制台窗口。还有一对名为`Debug`和`Trace`的类型，它们在写入时具有更大的灵活性。
- en: The `Debug` and `Trace` classes write to any trace listener. A trace listener
    is a type that can be configured to write output anywhere you like when the `WriteLine`
    method is called. There are several trace listeners provided by .NET, including
    one that outputs to the console, and you can even make your own by inheriting
    from the `TraceListener` type.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '`Debug`和`Trace`类写入到任何跟踪侦听器。跟踪侦听器是一种类型，当调用`WriteLine`方法时，可以配置为在任何地方写入输出。.NET提供了几个跟踪侦听器，包括一个输出到控制台的侦听器，甚至可以通过继承`TraceListener`类型来创建自己的侦听器。'
- en: Writing to the default trace listener
  id: totrans-808
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入到默认跟踪侦听器
- en: One trace listener, the `DefaultTraceListener` class, is configured automatically
    and writes to Visual Studio Code's **DEBUG CONSOLE** window or Visual Studio's
    **Debug** window. You can configure other trace listeners using code.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 一个跟踪侦听器，`DefaultTraceListener`类，会自动配置并写入到Visual Studio Code的**DEBUG CONSOLE**窗口或Visual
    Studio的**Debug**窗口。您可以使用代码配置其他跟踪侦听器。
- en: 'Let''s see trace listeners in action:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看跟踪侦听器的作用：
- en: Use your preferred coding tool to add a new **Console Application** to the `Chapter04`
    workspace/solution named `Instrumenting` .
  id: totrans-811
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编码工具向`Chapter04`工作区/解决方案中添加一个新的**控制台应用程序**，命名为`Instrumenting`。
- en: In Visual Studio Code, select `Instrumenting` as the active OmniSharp project.
    When you see the pop-up warning message saying that required assets are missing,
    click **Yes**  to add them.
  id: totrans-812
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Instrumenting`作为活动的OmniSharp项目。当您看到弹出的警告消息说缺少所需的资产时，点击**Yes**添加它们。
- en: In `Program.cs` , import the `System.Diagnostics` namespace.
  id: totrans-813
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入`System.Diagnostics`命名空间。
- en: 'Write a message from the `Debug` and `Trace` classes, as shown in the following
    code:'
  id: totrans-814
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Debug`和`Trace`类中写入一条消息，如下面的代码所示：
- en: '```cs'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Debug.WriteLine("Debug says, I am watching!"
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: Debug.WriteLine("调试显示，我在观察！"
- en: );
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Trace.WriteLine("Trace says, I am watching!"
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: Trace.WriteLine("跟踪显示，我在观察！"
- en: );
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In Visual Studio, navigate to **View** | **Output** and make sure **Show output
    from:** **Debug**  is selected.
  id: totrans-821
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到**View** | **Output**，确保选择**Show output from:** **Debug**。
- en: Start debugging the `Instrumenting` console application, and note that **DEBUG
    CONSOLE** in Visual Studio Code or the **Output** window in Visual Studio 2022
    shows the two messages, mixed with other debugging information, such as loaded
    assembly DLLs, as shown in *Figures 4.15* and *4.16* :![Graphical user interface,
    text, website Description automatically generated](img/Image00055.jpg)
  id: totrans-822
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始调试`Instrumenting`控制台应用程序，并注意在Visual Studio Code的**DEBUG CONSOLE**或Visual Studio
    2022的**Output**窗口中显示两条消息，混合其他调试信息，如*图4.15*和*图4.16*所示：![图形用户界面，文本，网站描述自动生成](img/Image00055.jpg)
- en: 'Figure 4.15: Visual Studio Code DEBUG CONSOLE shows the two messages in blue'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15：Visual Studio Code DEBUG CONSOLE显示两条消息为蓝色
- en: '![](img/Image00056.jpg)'
  id: totrans-824
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00056.jpg)'
- en: 'Figure 4.16: Visual Studio 2022 Output window shows Debug output including
    the two messages'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16：Visual Studio 2022输出窗口显示调试输出，包括两条消息
- en: Configuring trace listeners
  id: totrans-826
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置跟踪侦听器
- en: 'Now, we will configure another trace listener that will write to a text file:'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将配置另一个跟踪侦听器，它将写入到一个文本文件：
- en: 'Before the `Debug` and `Trace` calls to `WriteLine` , add a statement to create
    a new text file on the desktop and pass it into a new trace listener that knows
    how to write to a text file, and enable automatic flushing for its buffer, as
    shown highlighted in the following code:'
  id: totrans-828
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对`Debug`和`Trace`的`WriteLine`调用之前，添加一个语句在桌面上创建一个新的文本文件，并将其传递给一个知道如何写入文本文件的新的跟踪侦听器，并为其缓冲区启用自动刷新，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**// write to a text file in the project folder**'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 写入到项目文件夹中的文本文件**'
- en: '**Trace.Listeners.Add(**'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '**Trace.Listeners.Add(**'
- en: '**new**'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**TextWriterTraceListener(**'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '**TextWriterTraceListener(**'
- en: '**File.CreateText(Path.Combine(Environment.GetFolderPath(**'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '**File.CreateText(Path.Combine(Environment.GetFolderPath(**'
- en: '**Environment.SpecialFolder.DesktopDirectory),**'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '**Environment.SpecialFolder.DesktopDirectory),**'
- en: '**"log.txt"**'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '**"log.txt"**'
- en: '**))));**'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '**))));**'
- en: '**// text writer is buffered, so this option calls**'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 文本编写器是缓冲的，因此此选项在写入后调用**'
- en: '**// Flush() on all listeners after writing**'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 在写入后刷新所有侦听器**'
- en: '**Trace.AutoFlush =**'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '**Trace.AutoFlush =**'
- en: '**true**'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: '**;**'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '**;**'
- en: Debug.WriteLine("Debug says, I am watching!"
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: Debug.WriteLine("调试显示，我在观察！"
- en: );
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Trace.WriteLine("Trace says, I am watching!"
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: Trace.WriteLine("跟踪显示，我在观察！"
- en: );
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Any type that represents a file usually implements a buffer
    to improve performance. Instead of writing immediately to the file, data is written
    to an in-memory buffer and only once the buffer is full will it be written in
    one chunk to the file. This behavior can be confusing while debugging because
    we do not immediately see the results! Enabling `AutoFlush` means it calls the
    `Flush` method automatically after every write.'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：任何表示文件的类型通常都会实现缓冲以提高性能。数据不会立即写入文件，而是写入内存缓冲区，只有当缓冲区满时才会一次性写入文件。这种行为在调试时可能会令人困惑，因为我们不会立即看到结果！启用`AutoFlush`意味着在每次写入后自动调用`Flush`方法。'
- en: 'In Visual Studio Code, run the release configuration of the console app by
    entering the following command in the **TERMINAL** window for the `Instrumenting`
    project and note that nothing will appear to have happened:'
  id: totrans-849
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，通过在`Instrumenting`项目的**TERMINAL**窗口中输入以下命令来运行控制台应用程序的发布配置，并注意似乎没有发生任何事情：
- en: '```cs'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet run --configuration Release
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet run --configuration Release
- en: '```'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In Visual Studio 2022, in the standard toolbar, select **Release** in the **Solution
    Configurations** dropdown list, as shown in *Figure 4.17* :![](img/Image00057.jpg)
  id: totrans-853
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，在标准工具栏中，选择**Solution Configurations**下拉列表中的**Release**，如*图4.17*所示：![](img/Image00057.jpg)
- en: 'Figure 4.17: Selecting the Release configuration in Visual Studio'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17：在Visual Studio中选择Release配置
- en: In Visual Studio 2022, run the release configuration of the console app by navigating
    to **Debug** | **Start Without Debugging** .
  id: totrans-855
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，通过导航到**调试** | **开始时不调试**来运行控制台应用程序的发布配置。
- en: On your desktop, open the file named `log.txt` and note that it contains the
    message `Trace says, I am watching!` .
  id: totrans-856
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在桌面上，打开名为`log.txt`的文件，并注意它包含消息`Trace says, I am watching!`。
- en: 'In Visual Studio Code, run the debug configuration of the console app by entering
    the following command in the **TERMINAL** window for the `Instrumenting` project:'
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，通过在“Instrumenting”项目的**TERMINAL**窗口中输入以下命令来运行控制台应用程序的调试配置：
- en: '```cs'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet run --configuration Debug
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet run --configuration Debug
- en: '```'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In Visual Studio, in the standard toolbar, select **Debug** in the **Solution
    Configurations** dropdown list and then run the console app by navigating to **Debug**
    | **Start Debugging** .
  id: totrans-861
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，从标准工具栏中，在**解决方案配置**下拉列表中选择**Debug**，然后通过导航到**调试** | **开始调试**来运行控制台应用程序。
- en: On your desktop, open the file named `log.txt` and note that it contains both
    the message, `Debug says, I am watching!` and `Trace says, I am watching!` .
  id: totrans-862
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在桌面上，打开名为`log.txt`的文件，并注意它包含消息`Debug says, I am watching!`和`Trace says, I am
    watching!`。
- en: '**Good Practice** : When running with the `Debug` configuration, both `Debug`
    and `Trace` are active and will write to any trace listeners. When running with
    the `Release` configuration, only `Trace` will write to any trace listeners. You
    can therefore use `Debug.WriteLine` calls liberally throughout your code, knowing
    they will be stripped out automatically when you build the release version of
    your application and will therefore not affect performance.'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当使用“Debug”配置运行时，“Debug”和“Trace”都是活动的，并且将写入任何跨度侦听器。当使用“Release”配置运行时，只有“Trace”将写入任何跨度侦听器。因此，您可以在代码中自由使用`Debug.WriteLine`调用，知道它们在构建应用程序的发布版本时会自动剥离，并且不会影响性能。'
- en: Switching trace levels
  id: totrans-864
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换跟踪级别
- en: The `Trace.WriteLine` calls are left in your code even after release. So, it
    would be great to have fine control over when they are output. This is something
    we can do with a **trace switch** .
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '`Trace.WriteLine`调用即使在发布后也会留在您的代码中。因此，最好能够在输出它们时有精细控制。这是我们可以使用**跟踪开关**做的事情。'
- en: 'The value of a trace switch can be set using a number or a word. For example,
    the number `3` can be replaced with the word `Info` , as shown in the following
    table:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪开关的值可以使用数字或单词进行设置。例如，数字`3`可以替换为单词`Info`，如下表所示：
- en: '| Number | Word | Description |'
  id: totrans-867
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | 单词 | 描述 |'
- en: '| 0 | Off | This will output nothing. |'
  id: totrans-868
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 关闭 | 这将不输出任何内容。 |'
- en: '| 1 | Error | This will output only errors. |'
  id: totrans-869
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 错误 | 这将只输出错误。 |'
- en: '| 2 | Warning | This will output errors and warnings. |'
  id: totrans-870
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 警告 | 这将输出错误和警告。 |'
- en: '| 3 | Info | This will output errors, warnings, and information. |'
  id: totrans-871
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 信息 | 这将输出错误、警告和信息。 |'
- en: '| 4 | Verbose | This will output all levels. |'
  id: totrans-872
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 冗长 | 这将输出所有级别。 |'
- en: Let's explore using trace switches. First, we will add some NuGet packages to
    our project to enable loading configuration settings from a JSON `appsettings`
    file.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索使用跟踪开关。首先，我们将向项目添加一些NuGet包，以启用从JSON“appsettings”文件加载配置设置。
- en: Adding packages to a project in Visual Studio Code
  id: totrans-874
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中向项目添加包
- en: 'Visual Studio Code does not have a mechanism to add NuGet packages to a project,
    so we will use the command-line tool:'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code没有添加NuGet包到项目的机制，因此我们将使用命令行工具：
- en: Navigate to the **TERMINAL** window for the `Instrumenting` project.
  id: totrans-876
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到“Instrumenting”项目的**TERMINAL**窗口。
- en: 'Enter the following command:'
  id: totrans-877
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '```cs'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet add package Microsoft.Extensions.Configuration
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet add package Microsoft.Extensions.Configuration
- en: '```'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Enter the following command:'
  id: totrans-881
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '```cs'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet add package Microsoft.Extensions.Configuration.Binder
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet add package Microsoft.Extensions.Configuration.Binder
- en: '```'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Enter the following command:'
  id: totrans-885
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '```cs'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet add package Microsoft.Extensions.Configuration.Json
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet add package Microsoft.Extensions.Configuration.Json
- en: '```'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Enter the following command:'
  id: totrans-889
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '```cs'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet add package Microsoft.Extensions.Configuration.FileExtensions
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet add package Microsoft.Extensions.Configuration.FileExtensions
- en: '```'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`dotnet add package` adds a reference to a NuGet package to your project file.
    It will be downloaded during the build process. `dotnet add reference` adds a
    project-to-project reference to your project file. The referenced project will
    be compiled if needed during the build process.'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet add package`将向您的项目文件添加对NuGet包的引用。它将在构建过程中下载。`dotnet add reference`将向您的项目文件添加项目对项目的引用。如果需要，引用的项目将在构建过程中进行编译。'
- en: Adding packages to a project in Visual Studio 2022
  id: totrans-894
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中向项目添加包
- en: Visual Studio has a graphical user interface for adding packages.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio有一个用于添加包的图形用户界面。
- en: In **Solution Explorer** , right-click the **Instrumenting** project and select
    **Manage NuGet Packages** .
  id: totrans-896
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击**Instrumenting**项目，然后选择**管理NuGet包**。
- en: Select the **Browse** tab.
  id: totrans-897
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**浏览**选项卡。
- en: In the search box, enter `Microsoft.Extensions.Configuration` .
  id: totrans-898
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中，输入`Microsoft.Extensions.Configuration`。
- en: 'Select each of these NuGet packages and click the **Install** button, as shown
    in *Figure 4.18* :'
  id: totrans-899
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择这些NuGet包中的每一个，并单击**安装**按钮，如*图4.18*所示：
- en: '`Microsoft.Extensions.Configuration`'
  id: totrans-900
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Microsoft.Extensions.Configuration`'
- en: '`Microsoft.Extensions.Configuration.Binder`'
  id: totrans-901
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Microsoft.Extensions.Configuration.Binder`'
- en: '`Microsoft.Extensions.Configuration.Json`'
  id: totrans-902
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Microsoft.Extensions.Configuration.Json`'
- en: '`Microsoft.Extensions.Configuration.FileExtensions`![Graphical user interface,
    text, application Description automatically generated](img/Image00058.jpg)'
  id: totrans-903
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Microsoft.Extensions.Configuration.FileExtensions`![图形用户界面，文本，应用程序描述自动生成](img/Image00058.jpg)'
- en: 'Figure 4.18: Installing NuGet packages using Visual Studio 2022'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.18：使用Visual Studio 2022安装NuGet包
- en: '**Good Practice** : There are also packages for loading configuration from
    XML files, INI files, environment variables, and the command line. Use the most
    appropriate technique for setting configuration in your projects.'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：还有用于从XML文件、INI文件、环境变量和命令行加载配置的包。在项目中使用最合适的技术来设置配置。'
- en: Reviewing project packages
  id: totrans-906
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查项目包
- en: 'After adding the NuGet packages, we can see the references in the project file:'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 添加NuGet包后，我们可以在项目文件中看到引用：
- en: 'Open `Instrumenting.csproj` (double-click the **Instrumenting** project in
    Visual Studio''s **Solution Explorer** ) and note the `<ItemGroup>` section with
    the added NuGet packages, as shown highlighted in the following markup:'
  id: totrans-908
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Instrumenting.csproj`（在Visual Studio的**Solution Explorer**中双击**Instrumenting**项目），注意带有添加的NuGet包的`<ItemGroup>`部分，如下标记的部分所示：
- en: '```cs'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: </PropertyGroup>
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: '**<ItemGroup>**'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '**<ItemGroup>**'
- en: '**<PackageReference**'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageReference**'
- en: '**Include=**'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: '**Include=**'
- en: '**"Microsoft.Extensions.Configuration"**'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: '**"Microsoft.Extensions.Configuration"**'
- en: '**Version=**'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '**Version=**'
- en: '**"6.0.0"**'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: '**"6.0.0"**'
- en: '**/>**'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: '**<PackageReference**'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageReference**'
- en: '**Include=**'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '**Include=**'
- en: '**"Microsoft.Extensions.Configuration.Binder"**'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '**"Microsoft.Extensions.Configuration.Binder"**'
- en: '**Version=**'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '**Version=**'
- en: '**"6.0.0"**'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: '**"6.0.0"**'
- en: '**/>**'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: '**<PackageReference**'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageReference**'
- en: '**Include=**'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '**Include=**'
- en: '**"Microsoft.Extensions.Configuration.FileExtensions"**'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '**"Microsoft.Extensions.Configuration.FileExtensions"**'
- en: '**Version=**'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '**Version=**'
- en: '**"6.0.0"**'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: '**"6.0.0"**'
- en: '**/>**'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: '**<PackageReference**'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageReference**'
- en: '**Include=**'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '**Include=**'
- en: '**"Microsoft.Extensions.Configuration.Json"**'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '**"Microsoft.Extensions.Configuration.Json"**'
- en: '**Version=**'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: '**Version=**'
- en: '**"6.0.0"**'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '**"6.0.0"**'
- en: '**/>**'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: '**</ItemGroup>**'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '**</ItemGroup>**'
- en: </Project>
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Add a file named `appsettings.json` to the `Instrumenting` project folder.
  id: totrans-947
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Instrumenting`项目文件夹中添加名为`appsettings.json`的文件。
- en: 'Modify `appsettings.json` to define a setting named `PacktSwitch` with a `Level`
    value, as shown in the following code:'
  id: totrans-948
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`appsettings.json`以定义名为`PacktSwitch`的设置，并设置`Level`值，如下所示的代码：
- en: '```cs'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '{'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"PacktSwitch"'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: '"PacktSwitch"'
- en: ': {'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"Level"'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '"Level"'
- en: ': "Info"'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: ': "Info"'
- en: '}'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In Visual Studio 2022, in **Solution Explorer** , right-click `appsettings.json`
    , select **Properties** , and then in the **Properties** window, change **Copy
    to Output Directory** to **Copy if newer** . This is necessary because unlike
    Visual Studio Code, which runs the console app in the project folder, Visual Studio
    runs the console app in `Instrumenting\bin\Debug\net6.0` or `Instrumenting\bin\Release\net6.0`
    .
  id: totrans-958
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，在**Solution Explorer**中，右键单击`appsettings.json`，选择**Properties**，然后在**Properties**窗口中，将**Copy
    to Output Directory**更改为**Copy if newer**。这是必要的，因为与在项目文件夹中运行控制台应用程序的Visual Studio
    Code不同，Visual Studio在`Instrumenting\bin\Debug\net6.0`或`Instrumenting\bin\Release\net6.0`中运行控制台应用程序。
- en: At the top of `Program.cs` , import the `Microsoft.Extensions.Configuration`
    namespace.
  id: totrans-959
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入`Microsoft.Extensions.Configuration`命名空间。
- en: 'Add some statements to the end of `Program.cs` to create a configuration builder
    that looks in the current folder for a file named `appsettings.json` , build the
    configuration, create a trace switch, set its level by binding to the configuration,
    and then output the four trace switch levels, as shown in the following code:'
  id: totrans-960
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的末尾添加一些语句，创建一个配置生成器，查找名为`appsettings.json`的当前文件夹中的文件，构建配置，创建一个跟踪开关，通过绑定到配置设置其级别，然后输出四个跟踪开关级别，如下所示的代码：
- en: '```cs'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: ConfigurationBuilder builder = new
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigurationBuilder builder = new
- en: ();
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: builder.SetBasePath(Directory.GetCurrentDirectory())
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: builder.SetBasePath(Directory.GetCurrentDirectory())
- en: .AddJsonFile("appsettings.json"
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: .AddJsonFile("appsettings.json"
- en: ','
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'optional: true'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 'optional: true'
- en: ', reloadOnChange: true'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: ', reloadOnChange: true'
- en: );
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: IConfigurationRoot configuration = builder.Build();
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: IConfigurationRoot configuration = builder.Build();
- en: TraceSwitch ts = new
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: TraceSwitch ts = new
- en: (
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: 'displayName: "PacktSwitch"'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 'displayName: "PacktSwitch"'
- en: ','
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'description: "This switch is set via a JSON config."'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 'description: "This switch is set via a JSON config."'
- en: );
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: configuration.GetSection("PacktSwitch"
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: configuration.GetSection("PacktSwitch"
- en: ).Bind(ts);
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: ).Bind(ts);
- en: Trace.WriteLineIf(ts.TraceError, "Trace error"
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: Trace.WriteLineIf(ts.TraceError, "Trace error"
- en: );
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Trace.WriteLineIf(ts.TraceWarning, "Trace warning"
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: Trace.WriteLineIf(ts.TraceWarning, "Trace warning"
- en: );
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Trace.WriteLineIf(ts.TraceInfo, "Trace information"
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: Trace.WriteLineIf(ts.TraceInfo, "Trace information"
- en: );
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Trace.WriteLineIf(ts.TraceVerbose, "Trace verbose"
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: Trace.WriteLineIf(ts.TraceVerbose, "Trace verbose"
- en: );
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Set a breakpoint on the `Bind` statement.
  id: totrans-988
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Bind`语句上设置断点。
- en: Start debugging the `Instrumenting` console app.In the **VARIABLES** or **Locals**
    window, expand the `ts` variable expression, and note that its `Level` is `Off`
    and its `TraceError` , `TraceWarning` , and so on are all `false` , as shown in
    *Figure 4.19* :![Graphical user interface, text, application Description automatically
    generated](img/Image00059.jpg)
  id: totrans-989
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始调试`Instrumenting`控制台应用程序。在**VARIABLES**或**Locals**窗口中，展开`ts`变量表达式，并注意其`Level`为`Off`，`TraceError`，`TraceWarning`等都为`false`，如*图4.19*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00059.jpg)
- en: 'Figure 4.19: Watching the trace switch variable properties in Visual Studio
    2022'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.19：在Visual Studio 2022中查看跟踪开关变量属性
- en: Step into the call to the `Bind` method by clicking the **Step Into** or **Step
    Over** buttons or pressing F11 or F10 , and note the `ts` variable watch expression
    updates to the `Info` level.
  id: totrans-991
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击**Step Into**或**Step Over**按钮或按F11或F10进入`Bind`方法的调用，并注意`ts`变量监视表达式更新为`Info`级别。
- en: Step into or over the four calls to `Trace.WriteLineIf` and note that all levels
    up to `Info` are written to the **DEBUG CONSOLE** or **Output - Debug** window,
    but not `Verbose` , as shown in *Figure 4.20* :![Graphical user interface, text,
    application Description automatically generated](img/Image00060.jpg)
  id: totrans-992
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步入或跳过对`Trace.WriteLineIf`的四次调用，并注意所有级别直到`Info`都写入**DEBUG CONSOLE**或**Output
    - Debug**窗口，但`Verbose`不会，如*图4.20*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00060.jpg)
- en: 'Figure 4.20: Different trace levels shown in the DEBUG CONSOLE in Visual Studio
    Code'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.20：在Visual Studio Code的DEBUG CONSOLE中显示不同的跟踪级别
- en: Stop debugging.
  id: totrans-994
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止调试。
- en: 'Modify `appsettings.json` to set a level of `2` , which means warning, as shown
    in the following JSON file:'
  id: totrans-995
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`appsettings.json`以设置`2`级别，表示警告，如下所示的JSON文件：
- en: '```cs'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '{'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"PacktSwitch"'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: '"PacktSwitch"'
- en: ': {'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"Level"'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '"Level"'
- en: ': "2"'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: ': "2"'
- en: '}'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Save the changes.
  id: totrans-1005
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改。
- en: 'In Visual Studio Code, run the console application by entering the following
    command in the **TERMINAL** window for the `Instrumenting` project:'
  id: totrans-1006
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，通过在**TERMINAL**窗口中输入以下命令来运行控制台应用程序，为`Instrumenting`项目：
- en: '```cs'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet run --configuration Release
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet run --configuration Release
- en: '```'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In Visual Studio, in the standard toolbar, select **Release** in the **Solution
    Configurations** dropdown list and then run the console app by navigating to **Debug**
    | **Start Without Debugging** .
  id: totrans-1010
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，在标准工具栏中，选择**解决方案配置**下拉列表中的**发布**，然后通过导航到**调试** | **开始调试**来运行控制台应用程序。
- en: 'Open the file named `log.txt` and note that this time, only trace error and
    warning levels are the output of the four potential trace levels, as shown in
    the following text file:'
  id: totrans-1011
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开名为`log.txt`的文件，并注意这次只有跟踪错误和警告级别是四个潜在跟踪级别的输出，如下文本文件所示：
- en: '```cs'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Trace says, I am watching!
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪说，我在看着呢！
- en: Trace error
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪错误
- en: Trace warning
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪警告
- en: '```'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If no argument is passed, the default trace switch level is `Off` (0), so none
    of the switch levels are output.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递参数，则默认的跟踪开关级别为“关闭”（0），因此不会输出任何开关级别。
- en: Unit testing
  id: totrans-1018
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Fixing bugs in code is expensive. The earlier that a bug is discovered in the
    development process, the less expensive it will be to fix.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 修复代码中的错误是昂贵的。在开发过程中发现错误越早，修复的成本就越低。
- en: Unit testing is a good way to find bugs early in the development process. Some
    developers even follow the principle that programmers should create unit tests
    before they write code, and this is called **Test-Driven Development** (**TDD**
    ).
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是在开发过程中早期发现错误的好方法。一些开发人员甚至遵循程序员应该在编写代码之前创建单元测试的原则，这被称为**测试驱动开发**（**TDD**）。
- en: Microsoft has a proprietary unit testing framework known as **MS Test** . There
    is also a framework named **NUnit** . However, we will use the free and open-source
    third-party framework **xUnit.net** . xUnit was created by the same team that
    built NUnit but they fixed the mistakes they felt they made previously. xUnit
    is more extensible and has better community support.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 微软有一个专有的单元测试框架称为**MS Test**。还有一个名为**NUnit**的框架。然而，我们将使用免费的开源第三方框架**xUnit.net**。xUnit是由构建NUnit的同一团队创建的，但他们纠正了他们之前认为犯的错误。xUnit更具可扩展性，并且有更好的社区支持。
- en: Understanding types of testing
  id: totrans-1022
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解测试类型
- en: 'Unit testing is just one of many types of testing, as described in the following
    table:'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试只是许多测试类型之一，如下表所述：
- en: '| Type of testing | Description |'
  id: totrans-1024
  prefs: []
  type: TYPE_TB
  zh: '| 测试类型 | 描述 |'
- en: '| Unit | Tests the smallest unit of code, typically a method or function. Unit
    testing is performed on a unit of code isolated from its dependencies by mocking
    them if needed. Each unit should have multiple tests: some with typical inputs
    and expected outputs, some with extreme input values to test boundaries, and some
    with deliberately wrong inputs to test exception handling. |'
  id: totrans-1025
  prefs: []
  type: TYPE_TB
  zh: '| 单元 | 测试代码的最小单元，通常是一个方法或函数。单元测试是在与其依赖项隔离的代码单元上执行的，如果需要，可以通过模拟来隔离它们。每个单元应该有多个测试：一些具有典型输入和预期输出，一些具有极端输入值以测试边界，一些具有故意错误的输入以测试异常处理。
    |'
- en: '| Integration | Tests if the smaller units and larger components work together
    as a single piece of software. Sometimes involves integrating with external components
    that you do not have source code for. |'
  id: totrans-1026
  prefs: []
  type: TYPE_TB
  zh: '| 集成 | 测试较小的单元和较大的组件是否作为软件的单个部分一起工作。有时涉及与您没有源代码的外部组件集成。 |'
- en: '| System | Tests the whole system environment in which your software will run.
    |'
  id: totrans-1027
  prefs: []
  type: TYPE_TB
  zh: '| 系统 | 测试软件运行环境的整个系统。 |'
- en: '| Performance | Tests the performance of your software; for example, your code
    must return a web page full of data to a visitor in under 20 milliseconds. |'
  id: totrans-1028
  prefs: []
  type: TYPE_TB
  zh: '| 性能 | 测试软件的性能；例如，您的代码必须在不到20毫秒的时间内向访问者返回一个充满数据的网页。 |'
- en: '| Load | Tests how many requests your software can handle simultaneously while
    maintaining required performance, for example, 10,000 concurrent visitors to a
    website. |'
  id: totrans-1029
  prefs: []
  type: TYPE_TB
  zh: '| 负载 | 测试您的软件在保持所需性能的同时可以处理多少个请求，例如，网站上有1万个并发访问者。 |'
- en: '| User Acceptance | Tests if users can happily complete their work using your
    software. |'
  id: totrans-1030
  prefs: []
  type: TYPE_TB
  zh: '| 用户验收 | 测试用户是否可以愉快地使用您的软件完成工作。 |'
- en: Creating a class library that needs testing
  id: totrans-1031
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建需要测试的类库
- en: 'First, we will create a function that needs testing. We will create it in a
    class library project. A class library is a package of code that can be distributed
    and referenced by other .NET applications:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个需要测试的函数。我们将在一个类库项目中创建它。类库是一组可以被其他.NET应用程序分发和引用的代码包：
- en: Use your preferred coding tool to add a new **Class Library** to the `Chapter04`
    workspace/solution named `CalculatorLib` . The `dotnet new` template is named
    `classlib` .
  id: totrans-1033
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编码工具将新的**类库**添加到名为`CalculatorLib`的`Chapter04`工作区/解决方案中。`dotnet new`模板名为`classlib`。
- en: Rename the file named `Class1.cs` to `Calculator.cs` .
  id: totrans-1034
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为`Class1.cs`的文件重命名为`Calculator.cs`。
- en: 'Modify the file to define a `Calculator` class (with a deliberate bug!), as
    shown in the following code:'
  id: totrans-1035
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件以定义一个带有故意错误的`Calculator`类，如下面的代码所示：
- en: '```cs'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: Packt
- en: '{'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Calculator
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 计算器
- en: '{'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: double
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: Add
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 添加
- en: (
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: double
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: a,
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: a，
- en: double
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 双
- en: b
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: b
- en: )
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: a * b;
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: a * b;
- en: '}'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Compile your class library project:'
  id: totrans-1060
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译您的类库项目：
- en: In Visual Studio 2022, navigate to **Build** | **Build CalculatorLib** .
  id: totrans-1061
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，导航到**生成** | **构建CalculatorLib**。
- en: In Visual Studio Code, in **TERMINAL** , enter the command `dotnet build` .
  id: totrans-1062
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，在**TERMINAL**中，输入命令`dotnet build`。
- en: Use your preferred coding tool to add a new **xUnit Test Project [C#]** to the
    `Chapter04` workspace/solution named `CalculatorLibUnitTests` . The `dotnet new`
    template is named `xunit` .
  id: totrans-1063
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编码工具将新的**xUnit测试项目[C#]**添加到名为`CalculatorLibUnitTests`的`Chapter04`工作区/解决方案中。`dotnet
    new`模板名为`xunit`。
- en: If you are using Visual Studio, in **Solution Explorer** , select the `CalculatorLibUnitTests`
    project, navigate to **Project** | **Add Project Reference…** , check the box
    to select the `CalculatorLib` project, and then click **OK** .
  id: totrans-1064
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Visual Studio，在**Solution Explorer**中，选择`CalculatorLibUnitTests`项目，导航到**项目**
    | **添加项目引用…**，选中`CalculatorLib`项目的复选框，然后单击**确定**。
- en: 'If you are using Visual Studio Code, use the `dotnet add reference` command
    or click on the file named `CalculatorLibUnitTests.csproj` , and modify the configuration
    to add an item group with a project reference to the `CalculatorLib` project,
    as shown highlighted in the following markup:'
  id: totrans-1065
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Visual Studio Code，请使用`dotnet add reference`命令或单击名为`CalculatorLibUnitTests.csproj`的文件，并修改配置以添加一个项目引用到`CalculatorLib`项目的项目组，如下标记所示：
- en: '```cs'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <TargetFramework>net6.0
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <IsPackable>false
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: <IsPackable>false
- en: </IsPackable>
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: </IsPackable>
- en: </PropertyGroup>
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: <ItemGroup>
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference Include="Microsoft.NET.Test.Sdk"
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="Microsoft.NET.Test.Sdk"
- en: Version="16.10.0"
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 版本="16.10.0"
- en: />
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <PackageReference Include="xunit"
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="xunit"
- en: Version="2.4.1"
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 版本="2.4.1"
- en: />
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <PackageReference Include="xunit.runner.visualstudio"
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="xunit.runner.visualstudio"
- en: Version="2.4.3"
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 版本="2.4.3"
- en: '>'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <IncludeAssets>runtime; build; native; contentfiles;
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: <IncludeAssets>runtime；build；native；contentfiles；
- en: analyzers; buildtransitive</IncludeAssets>
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器；buildtransitive</IncludeAssets>
- en: <PrivateAssets>all</PrivateAssets>
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: <PrivateAssets>all</PrivateAssets>
- en: </PackageReference>
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: </PackageReference>
- en: <PackageReference Include="coverlet.collector"
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="coverlet.collector"
- en: Version="3.0.2"
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 版本="3.0.2"
- en: '>'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <IncludeAssets>runtime; build; native; contentfiles;
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: <IncludeAssets>runtime；build；native；contentfiles；
- en: analyzers; buildtransitive</IncludeAssets>
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器；buildtransitive</IncludeAssets>
- en: <PrivateAssets>all</PrivateAssets>
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: <PrivateAssets>all</PrivateAssets>
- en: </PackageReference>
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: </PackageReference>
- en: </ItemGroup>
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '**<ItemGroup>**'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: '**<ItemGroup>**'
- en: '**<ProjectReference**'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '**<ProjectReference**'
- en: '**Include=**'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '**包括=**'
- en: '**"..\CalculatorLib\CalculatorLib.csproj"**'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '**"..\CalculatorLib\CalculatorLib.csproj"**'
- en: '**/>**'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: '**</ItemGroup>**'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '**</ItemGroup>**'
- en: </Project>
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the `CalculatorLibUnitTests` project.
  id: totrans-1106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`CalculatorLibUnitTests`项目。
- en: Writing unit tests
  id: totrans-1107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: 'A well-written unit test will have three parts:'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好编写的单元测试将包括三个部分：
- en: '**Arrange** : This part will declare and instantiate variables for input and
    output.'
  id: totrans-1109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安排**：这部分将声明和实例化输入和输出变量。'
- en: '**Act** : This part will execute the unit that you are testing. In our case,
    that means calling the method that we want to test.'
  id: totrans-1110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动**：这部分将执行您正在测试的单元。在我们的案例中，这意味着调用我们想要测试的方法。'
- en: '**Assert** : This part will make one or more assertions about the output. An
    assertion is a belief that, if not true, indicates a failed test. For example,
    when adding 2 and 2, we would expect the result to be 4.'
  id: totrans-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言**：这部分将对输出进行一个或多个断言。断言是一种信念，如果不成立，就表示测试失败。例如，当添加2和2时，我们期望结果为4。'
- en: 'Now, we will write some unit tests for the `Calculator` class:'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为`Calculator`类编写一些单元测试：
- en: Rename the file `UnitTest1.cs` to `CalculatorUnitTests.cs` and then open it.
  id: totrans-1113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件`UnitTest1.cs`重命名为`CalculatorUnitTests.cs`，然后打开它。
- en: In Visual Studio Code, rename the class to `CalculatorUnitTests` . (Visual Studio
    prompts you to rename the class when you rename the file.)
  id: totrans-1114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将类重命名为`CalculatorUnitTests`。（当您重命名文件时，Visual Studio会提示您重命名类。）
- en: Import the `Packt` namespace.
  id: totrans-1115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Packt`命名空间。
- en: 'Modify the `CalculatorUnitTests` class to have two test methods for adding
    2 and 2, and adding 2 and 3, as shown in the following code:'
  id: totrans-1116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`CalculatorUnitTests`类，为添加2和2以及添加2和3编写两个测试方法，如下所示：
- en: '```cs'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Packt;
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: Packt；
- en: using
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Xunit;
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: Xunit；
- en: namespace
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: CalculatorLibUnitTests
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: CalculatorLibUnitTests
- en: '{'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: CalculatorUnitTests
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: CalculatorUnitTests
- en: '{'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '[Fact'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '[事实'
- en: ']'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: void
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: TestAdding2And2
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: TestAdding2And2
- en: ()
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // arrange
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: //安排
- en: double
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: a = 2
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: a=2
- en: ;
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: double
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: b = 2
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: b=2
- en: ;
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: double
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: expected = 4
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 预期=4
- en: ;
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: Calculator calc = new
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: Calculator calc = new
- en: ();
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: // act
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: //行动
- en: double
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: actual = calc.Add(a, b);
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 实际=calc.Add(a，b);
- en: // assert
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: //断言
- en: Assert.Equal(expected, actual);
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: Assert.Equal(expected，actual);
- en: '}'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[Fact'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: '[事实'
- en: ']'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: void
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: TestAdding2And3
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: TestAdding2And3
- en: ()
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // arrange
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: //安排
- en: double
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: a = 2
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: a=2
- en: ;
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: double
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: b = 3
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: b=3
- en: ;
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: double
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: expected = 5
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 预期=5
- en: ;
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: Calculator calc = new
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: Calculator calc = new
- en: ();
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: // act
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: //行动
- en: double
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 双重
- en: actual = calc.Add(a, b);
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 实际=calc.Add(a，b);
- en: // assert
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: //断言
- en: Assert.Equal(expected, actual);
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: Assert.Equal(expected，actual);
- en: '}'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Running unit tests using Visual Studio Code
  id: totrans-1182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code运行单元测试
- en: 'Now we are ready to run the unit tests and see the results:'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备运行单元测试并查看结果：
- en: 'In the `CalculatorLibUnitTest` project''s **TERMINAL** window, run the tests,
    as shown in the following command:'
  id: totrans-1184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CalculatorLibUnitTest`项目的**TERMINAL**窗口中，运行测试，如下命令所示：
- en: '```cs'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet test
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet test
- en: '```'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note that the results indicate that two tests ran, one test passed, and one
    test failed, as shown in *Figure 4.21* :![](img/Image00061.jpg)
  id: totrans-1188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，结果表明运行了两个测试，一个测试通过了，一个测试失败了，如*图4.21*所示：![](img/Image00061.jpg)
- en: 'Figure 4.21: The unit test results in Visual Studio Code''s TERMINAL'
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.21：Visual Studio Code的TERMINAL中的单元测试结果
- en: Running unit tests using Visual Studio
  id: totrans-1190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio运行单元测试
- en: 'Now we are ready to run the unit tests and see the results:'
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备运行单元测试并查看结果：
- en: Navigate to **Test** | **Run All Tests** .
  id: totrans-1192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**测试** | **运行所有测试**。
- en: In **Test Explorer** , note that the results indicate that two tests ran, one
    test passed, and one test failed, as shown in *Figure 4.22* :![Graphical user
    interface, text, application, email Description automatically generated](img/Image00062.jpg)
  id: totrans-1193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**测试资源管理器**中，注意结果表明运行了两个测试，一个测试通过了，一个测试失败了，如*图4.22*所示：![图形用户界面，文本，应用程序，电子邮件描述自动生成](img/Image00062.jpg)
- en: 'Figure 4.22: The unit test results in Visual Studio 2022''s Test Explorer'
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.22：Visual Studio 2022的测试资源管理器中的单元测试结果
- en: Fix the bug
  id: totrans-1195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复错误
- en: 'Now you can fix the bug:'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以修复错误：
- en: Fix the bug in the `Add` method.
  id: totrans-1197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复`Add`方法中的错误。
- en: Run the unit tests again to see that the bug has now been fixed and both tests
    pass.
  id: totrans-1198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行单元测试，以查看错误现在已经被修复，并且两个测试都通过了。
- en: Throwing and catching exceptions in functions
  id: totrans-1199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在函数中抛出和捕获异常
- en: In *Chapter 3* , *Controlling Flow, Converting Types, and Handling Exceptions*
    , you were introduced to exceptions and how to use a `try-catch` statement to
    handle them. But you should only catch and handle an exception if you have enough
    information to mitigate the issue. If you do not, then you should allow the exception
    to pass up through the call stack to a higher level.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第3章*，*控制流，转换类型和处理异常*中，您已经了解了异常以及如何使用`try-catch`语句来处理它们。但是，只有在有足够的信息来减轻问题时，您才应该捕获和处理异常。如果没有，那么您应该允许异常通过调用堆栈传递到更高级别。
- en: Understanding usage errors and execution errors
  id: totrans-1201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解使用错误和执行错误
- en: '**Usage errors** ar e when a programmer misuses a function, typically by passing
    invalid values as parameters. They could be avoided by that programmer changing
    their code to pass valid values. When some programmers first learn C# and .NET,
    they sometimes think exceptions can always be avoided because they assume all
    errors are usage errors. Usage errors should all be fixed before production runtime.'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用错误**是指程序员错误使用函数，通常是通过将无效值作为参数传递。他们可以通过程序员更改其代码以传递有效值来避免。当一些程序员首次学习C#和.NET时，他们有时会认为异常总是可以避免，因为他们假设所有错误都是使用错误。在生产运行时之前，应该修复所有使用错误。'
- en: '**Execution errors** are when something happens at runtime that cannot be fixed
    by writing "better" code. Execution errors can be split into **program errors**
    and **system errors** . If you attempt to access a network resource but the network
    is down, you need to be able to handle that system error by logging an exception,
    and possibly backing off for a time and trying again. But some system errors,
    such as running out of memory, simply cannot be handled. If you attempt to open
    a file that does not exist, you might be able to catch that error and handle it
    programmatically by creating a new file. Program errors can be programmatically
    fixed by writing smart code. System errors often cannot be fixed programmatically.'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行错误**是指运行时发生无法通过编写“更好”的代码修复的事情。执行错误可以分为**程序错误**和**系统错误**。如果尝试访问网络资源但网络已关闭，则需要能够通过记录异常来处理该系统错误，并可能暂时后退一段时间并重试。但是，某些系统错误，例如内存耗尽，根本无法处理。如果尝试打开一个不存在的文件，则可能能够捕获该错误并通过编程方式处理它，例如创建一个新文件。程序错误可以通过编写智能代码进行程序化修复。系统错误通常无法通过编程方式修复。'
- en: Commonly thrown exceptions in functions
  id: totrans-1204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数中常见的抛出异常
- en: Very rarely should you define new types of exceptions to indicate usage errors.
    .NET already defines many that you should use.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 很少情况下应该定义新类型的异常来指示使用错误。.NET已经定义了许多您应该使用的异常。
- en: When defining your own functions with parameters, your code should check the
    parameter values and throw exceptions if they have values that will prevent your
    function from properly functioning.
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义具有参数的自己的函数时，您的代码应该检查参数值，并在它们具有阻止函数正常运行的值时抛出异常。
- en: 'For example, if a parameter should not be `null` , throw `ArgumentNullException`
    . For other problems, throw `ArgumentException` , `NotSupportedException` , or
    `InvalidOperationException` . For any exception, include a message that describes
    the problem for whoever will have to read it (typically a developer audience for
    class libraries and functions, or end users if it is at the highest level of a
    GUI app), as shown in the following code:'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果参数不应为`null`，则抛出`ArgumentNullException`。对于其他问题，请抛出`ArgumentException`，`NotSupportedException`或`InvalidOperationException`。对于任何异常，都包括描述问题的消息（通常是类库和函数的开发人员受众，或者如果它位于GUI应用程序的最高级别，则是最终用户），如下面的代码所示：
- en: '```cs'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Withdraw
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 撤回
- en: (
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: string
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: accountName,
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: accountName，
- en: decimal
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: amount
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 量
- en: )
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (accountName is
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: （accountName是
- en: 'null'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: throw
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 扔
- en: new
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: 'ArgumentNullException(paramName: nameof'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: ArgumentNullException（paramName：nameof
- en: (accountName));
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: （accountName）;
- en: '}'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (amount < 0
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: （金额<0
- en: )
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: throw
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 扔
- en: new
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: ArgumentException(
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: ArgumentException（
- en: 'message: $"'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 消息：$"
- en: '{'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: nameof
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: nameof
- en: (amount)}
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: （量）}
- en: cannot be less than zero."
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 不能小于零。"
- en: );
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // process parameters
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: //处理参数
- en: '}'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : If a function cannot successfully perform its operation,
    you should consider that a function failure and report it by throwing an exception.'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果函数无法成功执行其操作，您应该将其视为函数失败，并通过抛出异常来报告。'
- en: You should never need to write a `try-catch` statement to catch these usage
    type errors. You want the application to terminate. These exceptions should cause
    the programmer who is calling the function to fix their code to prevent the problem.
    They should be fixed before production deployment. That does not mean that your
    code does not need to throw usage error type exceptions. You should—to force other
    programmers to call your functions correctly!
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 您永远不应该需要编写`try-catch`语句来捕获这些使用类型错误。您希望应用程序终止。这些异常应该导致调用函数的程序员修复其代码以防止问题。它们应该在生产部署之前修复。这并不意味着您的代码不需要抛出使用错误类型的异常。您应该这样做-强制其他程序员正确调用您的函数！
- en: Understanding the call stack
  id: totrans-1248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解调用堆栈
- en: The entry point for a .NET console application is the `Main` method of the `Program`
    class, regardless of if you have explicitly defined this class and method or if
    it was created for you by the top-level program feature.
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: .NET控制台应用程序的入口点是`Program`类的`Main`方法，无论您是否明确定义了这个类和方法，还是它是由顶级程序功能为您创建的。
- en: 'The `Main` method will call other methods, that call other methods, and so
    on, and these methods could be in the current project or in referenced projects
    and NuGet packages, as shown in *Figure 4.23* :'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main`方法将调用其他方法，然后调用其他方法，依此类推，这些方法可以在当前项目中或在引用的项目和NuGet包中，如*图4.23*所示：'
- en: '![](img/Image00063.jpg)'
  id: totrans-1251
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/Image00063.jpg)
- en: 'Figure 4.23: A chain of method calls that create a call stack'
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.23：创建调用堆栈的方法调用链
- en: 'Let''s create a similar chain of methods to explore where we could catch and
    handle exceptions:'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个类似的方法链，以探索我们可以在哪里捕获和处理异常：
- en: Use your preferred coding tool to add a new **Class Library** to the `Chapter04`
    workspace/solution named `CallStackExceptionHandlingLib` .
  id: totrans-1254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编码工具向`Chapter04`工作区/解决方案中添加一个名为`CallStackExceptionHandlingLib`的新**类库**。
- en: Rename the `Class1.cs` file to `Calculator.cs` .
  id: totrans-1255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Class1.cs`文件重命名为`Calculator.cs`。
- en: 'Open `Calculator.cs` and modify its contents, as shown in the following code:'
  id: totrans-1256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Calculator.cs`并修改其内容，如下所示：
- en: '```cs'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: namespace
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Packt
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: Packt
- en: ;
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Calculator
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: Calculator
- en: '{'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Gamma
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: Gamma
- en: ()
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: // public so it can be called from outside
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: // public so it can be called from outside
- en: '{'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("In Gamma"
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("In Gamma"
- en: );
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Delta();
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: Delta();
- en: '}'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: private
- en: static
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Delta
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: Delta
- en: ()
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: // private so it can only be called internally
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: // private so it can only be called internally
- en: '{'
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("In Delta"
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("In Delta"
- en: );
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: File.OpenText("bad file path"
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: File.OpenText("bad file path"
- en: );
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Use your preferred coding tool to add a new **Console Application** to the `Chapter04`
    workspace/solution named `CallStackExceptionHandling` .
  id: totrans-1293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的编码工具向`Chapter04`工作区/解决方案中添加一个名为`CallStackExceptionHandling`的新**控制台应用程序**。
- en: In Visual Studio Code, select `CallStackExceptionHandling` as the active OmniSharp
    project. When you see the pop-up warning message saying that required assets are
    missing, click **Yes** to add them.
  id: totrans-1294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`CallStackExceptionHandling`作为活动的OmniSharp项目。当您看到弹出的警告消息说缺少所需的资产时，点击**是**以添加它们。
- en: In the `CallStackExceptionHandling` project, add a reference to the `CallStackExceptionHandlingLib`
    project.
  id: totrans-1295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CallStackExceptionHandling`项目中，添加对`CallStackExceptionHandlingLib`项目的引用。
- en: 'In `Program.cs` , add statements to define two methods and chain calls to them,
    and the methods in the class library, as shown in the following code:'
  id: totrans-1296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加语句来定义两个方法并链接调用它们，以及类库中的方法，如下所示：
- en: '```cs'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Packt;
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: Packt;
- en: using
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: WriteLine("In Main"
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("In Main"
- en: );
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Alpha();
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha();
- en: static
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Alpha
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha
- en: ()
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("In Alpha"
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("In Alpha"
- en: );
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Beta();
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: Beta();
- en: '}'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: static
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Beta
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: Beta
- en: ()
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("In Beta"
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("In Beta"
- en: );
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Calculator.Gamma();
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: Calculator.Gamma();
- en: '}'
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the console app, and note the results, as shown in the following partial
    output:'
  id: totrans-1325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，并注意结果，如下部分输出所示：
- en: '```cs'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: In Main
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 在Main
- en: In Alpha
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 在Alpha
- en: In Beta
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 在Beta
- en: In Gamma
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gamma
- en: In Delta
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 在Delta
- en: 'Unhandled exception. System.IO.FileNotFoundException: Could not find file ''C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad
    file path''.'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 未处理的异常。System.IO.FileNotFoundException：找不到文件'C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad
    file path'。
- en: at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(...
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(...
- en: at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(...
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft.Win32.SafeHandles.SafeFileHandle.Open(...
- en: at System.IO.Strategies.OSFileStreamStrategy..ctor(...
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 在System.IO.Strategies.OSFileStreamStrategy..ctor(...
- en: at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(...
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 在System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(...
- en: at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(...
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 在System.IO.Strategies.FileStreamHelpers.ChooseStrategy(...
- en: at System.IO.StreamReader.ValidateArgsAndOpenPath(...
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 在System.IO.StreamReader.ValidateArgsAndOpenPath(...
- en: at System.IO.File.OpenText(String path) in ...
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 在System.IO.File.OpenText(String path)中...
- en: at Packt.Calculator.Delta() in C:\Code\Chapter04\CallStackExceptionHandlingLib\Calculator.cs:line
    16
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandlingLib\Calculator.cs的Packt.Calculator.Delta()中：第16行
- en: at Packt.Calculator.Gamma() in C:\Code\Chapter04\CallStackExceptionHandlingLib\Calculator.cs:line
    10
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandlingLib\Calculator.cs的Packt.Calculator.Gamma()中：第10行
- en: at <Program>$.<<Main>$>g__Beta|0_1() in C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line
    16
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandling\Program.cs的<Program>$.<<Main>$>g__Beta|0_1()中：第16行
- en: at <Program>$.<<Main>$>g__Alpha|0_0() in C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line
    10
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandling\Program.cs的<Program>$.<<Main>$>g__Alpha|0_0()中：第10行
- en: at <Program>$.<Main>$(String[] args) in C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line
    5
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandling\Program.cs的<Program>$.<Main>$(String[]
    args)中：第5行
- en: '```'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: 'The call stack is upside-down. Starting from the bottom, you see:'
  id: totrans-1347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用堆栈是颠倒的。从底部开始，您会看到：
- en: The first call is to the `Main` entry point function in the auto-generated `Program`
    class. This is where arguments are passed in as a `string` array.
  id: totrans-1348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次调用是对自动生成的`Program`类中的`Main`入口点函数的调用。这是将参数作为`string`数组传递的地方。
- en: The second call is to the `Alpha` function.
  id: totrans-1349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二次调用是对`Alpha`函数的调用。
- en: The third call is to the `Beta` function.
  id: totrans-1350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三次调用是对`Beta`函数的调用。
- en: The fourth call is to the `Gamma` function.
  id: totrans-1351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四次调用是对`Gamma`函数的调用。
- en: The fifth call is to the `Delta` function. This function attempts to open a
    file by passing a bad file path. This causes an exception to be thrown. Any function
    with a `try-catch` statement could catch this exception. If they do not, it is
    automatically passed up the call stack until it reaches the top, where .NET outputs
    the exception (and the details of this call stack).
  id: totrans-1352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五次调用是对`Delta`函数的调用。该函数尝试通过传递错误的文件路径来打开文件。这会导致抛出异常。任何带有`try-catch`语句的函数都可以捕获此异常。如果它们没有这样做，它会自动传递到调用堆栈的顶部，直到达到顶部，.NET会输出异常（以及此调用堆栈的详细信息）。
- en: Where to catch exceptions
  id: totrans-1353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在哪里捕获异常
- en: Programmers can decide if they want to catch an exception near the failure point,
    or centralized higher up the call stack. This allows your code to be simplified
    and standardized. You might know that calling an exception could throw one or
    more types of exception, but you do not need to handle any of them at the current
    point in the call stack.
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员可以决定是否要在失败点附近捕获异常，或者在调用堆栈的更高位置集中处理异常。这使得您的代码可以简化和标准化。您可能知道调用异常可能会引发一个或多个类型的异常，但您不需要在调用堆栈的当前点处理任何异常。
- en: Rethrowing exceptions
  id: totrans-1355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新抛出异常
- en: 'Sometimes you want to catch an exception, log it, and then rethrow it. There
    are three ways to rethrow an exception inside a `catch` block, as shown in the
    following list:'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您希望捕获异常，记录它，然后重新抛出它。有三种在`catch`块内重新抛出异常的方法，如下列表所示：
- en: To throw the caught exception with its original call stack, call `throw` .
  id: totrans-1357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将捕获的异常与其原始调用堆栈一起抛出，调用`throw`。
- en: To throw the caught exception as if it was thrown at the current level in the
    call stack, call `throw` with the caught exception, for example, `throw ex` .
    This is usually poor practice because you have lost some potentially useful information
    for debugging.
  id: totrans-1358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要像在调用堆栈的当前级别抛出捕获的异常一样，使用捕获的异常调用`throw`，例如`throw ex`。这通常是不好的做法，因为您可能会丢失一些用于调试的有用信息。
- en: To wrap the caught exception in another exception that can include more information
    in a message that might help the caller understand the problem, throw a new exception
    and pass the caught exception as the `innerException` parameter.
  id: totrans-1359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在另一个异常中包装捕获的异常，该异常可以在消息中包含更多信息，这可能有助于调用者理解问题，请抛出一个新异常，并将捕获的异常作为`innerException`参数传递。
- en: 'If an error could occur when we call the `Gamma` function then we could catch
    the exception and then perform one of the three techniques of rethrowing an exception,
    as shown in the following code:'
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在调用`Gamma`函数时可能发生错误，那么我们可以捕获异常，然后执行重新抛出异常的三种技术之一，如下面的代码所示：
- en: '```cs'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: try
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试
- en: '{'
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Gamma();
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: Gamma();
- en: '}'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: catch (IOException ex)
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: catch (IOException ex)
- en: '{'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: LogException(ex);
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: LogException(ex);
- en: // throw the caught exception as if it happened here
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: //像在这里发生一样抛出捕获的异常
- en: // this will lose the original call stack
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: //这将丢失原始调用堆栈
- en: throw
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出
- en: ex;
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: ex;
- en: // rethrow the caught exception and retain its original call stack
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: //重新抛出捕获的异常并保留其原始调用堆栈
- en: throw
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出
- en: ;
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: // throw a new exception with the caught exception nested within it
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: //抛出一个包含捕获的异常的新异常
- en: throw
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出
- en: new
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: InvalidOperationException(
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: InvalidOperationException(
- en: 'message: "Calculation had invalid values. See inner exception for why."'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 消息：“计算具有无效值。请参阅内部异常原因。”
- en: ','
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'innerException: ex);'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 'innerException: ex);'
- en: '}'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Let''s see this in action with our call stack example:'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过调用堆栈示例来看看这个过程：
- en: 'In the `CallStackExceptionHandling` project, in `Program.cs` , in the `Beta`
    function, add a `try-catch` statement around the call to the `Gamma` function,
    as shown highlighted in the following code:'
  id: totrans-1386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CallStackExceptionHandling`项目的`Program.cs`中，在`Beta`函数中，添加一个`try-catch`语句来调用`Gamma`函数，如下面的代码所示：
- en: '```cs'
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Beta
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: Beta
- en: ()
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("In Beta"
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("在Beta"``
- en: );
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '**try**'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试**'
- en: '**{**'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**Calculator.Gamma();**'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '**Calculator.Gamma();**'
- en: '**}**'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**catch (Exception ex)**'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: '**catch (Exception ex)**'
- en: '**{**'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**WriteLine(**'
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine(**'
- en: '**$"Caught this:**'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: '**$"捕获到：**'
- en: '**{ex.Message}**'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: '**{ex.Message}**'
- en: '**"**'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: '**“**'
- en: '**);**'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**throw**'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '**抛出**'
- en: '**ex;**'
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: '**ex;**'
- en: '**}**'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '}'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note the green squiggle under the `ex` to warn you that you will lose call stack
    information.
  id: totrans-1411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意`ex`下的绿色波浪线，警告您将丢失调用堆栈信息。
- en: 'Run the console app and note the output excludes some details of the call stack,
    as shown in the following output:'
  id: totrans-1412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意输出不包括调用堆栈的某些细节，如下输出所示：
- en: '```cs'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Caught this: Could not find file ''C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad
    file path''.'
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获到：找不到文件'C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad
    file path'。
- en: 'Unhandled exception. System.IO.FileNotFoundException: Could not find file ''C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad
    file path''.'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 未处理的异常。System.IO.FileNotFoundException：找不到文件'C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad
    file path'。
- en: 'File name: ''C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad
    file path'''
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名：'C:\Code\Chapter04\CallStackExceptionHandling\bin\Debug\net6.0\bad file
    path'
- en: at <Program>$.<<Main>$>g__Beta|0_1() in C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line
    25
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line 25处的<Program>$.<<Main>$>g__Beta|0_1()
- en: at <Program>$.<<Main>$>g__Alpha|0_0() in C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line
    11
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line 11处的<Program>$.<<Main>$>g__Alpha|0_0()
- en: at <Program>$.<Main>$(String[] args) in C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line
    6
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 在C:\Code\Chapter04\CallStackExceptionHandling\Program.cs:line 6处的<Program>$.<Main>$(String[]
    args)
- en: '```'
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Delete the `ex` when rethrowing.
  id: totrans-1421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新抛出时删除`ex`。
- en: Run the console app and note the output includes all the details of the call
    stack.
  id: totrans-1422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意输出包括调用堆栈的所有细节。
- en: Implementing the tester-doer pattern
  id: totrans-1423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现测试者-执行者模式
- en: 'The **tester-doer pattern** can avoid some thrown exceptions (but not eliminate
    them completely). This pattern uses pairs of functions: one to perform a test,
    the other to perform an action that would fail if the test is not passed.'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试者-执行者模式**可以避免一些抛出的异常（但不能完全消除）。该模式使用一对函数：一个用于执行测试，另一个用于执行如果测试未通过则会失败的操作。'
- en: .NET implements this pattern itself. For example, before adding an item to a
    collection by calling the `Add` method, you can test to see if it is read-only,
    which would cause `Add` to fail and therefore throw an exception.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: .NET本身实现了这种模式。例如，在通过调用`Add`方法向集合添加项目之前，您可以测试是否为只读，这将导致`Add`失败并因此引发异常。
- en: 'For example, before withdrawing money from a bank account, you might test that
    the account is not overdrawn, as shown in the following code:'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在从银行账户中提取资金之前，您可能会测试账户是否透支，如下面的代码所示：
- en: '```cs'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: if
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (!bankAccount.IsOverdrawn())
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: （！bankAccount.IsOverdrawn（））
- en: '{'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: bankAccount.Withdraw(amount);
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: bankAccount.Withdraw(amount);
- en: '}'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Problems with the tester-doer pattern
  id: totrans-1434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试者-执行者模式的问题
- en: The tester-doer pattern can add performance overhead, so you can also implement
    the **try pattern** , which in effect combines the test and do parts into a single
    function, as we saw with `TryParse` .
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 测试者-执行者模式可能会增加性能开销，因此您还可以实现**尝试模式**，实际上将测试和执行部分合并为单个函数，就像我们在`TryParse`中看到的那样。
- en: Another problem with the tester-doer pattern occurs when you are using multiple
    threads. In this scenario, one thread could call the test function and it returns
    okay. But then another thread executes that changes the state. Then the original
    thread continues executing assuming everything is fine, but it is not fine. This
    is called a race condition. We will see how we could handle it in *Chapter 12*
    , *Improving Performance and Scalability Using Multitasking* .
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员-执行者模式的另一个问题是当您使用多个线程时。在这种情况下，一个线程可以调用测试函数并返回正常。但然后另一个线程执行了改变状态的操作。然后原始线程继续执行，假设一切都很好，但实际上并不好。这被称为竞争条件。我们将看到如何在*第12章*中处理它，*使用多任务改进性能和可伸缩性*。
- en: 'If you implement your own try pattern function and it fails, remember to set
    the `out` parameter to the default value of its type and then return `false` ,
    as shown in the following code:'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您实现自己的try模式函数并且失败了，请记住将`out`参数设置为其类型的默认值，然后返回`false`，如下面的代码所示：
- en: '```cs'
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的
- en: bool
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: TryParse
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试解析
- en: (
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: string
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? input,'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: ？输入，
- en: out
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: Person
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 人
- en: value
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: )
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (someFailure)
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: （某些失败）
- en: '{'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: value
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: = default
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: = 默认
- en: (Person);
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: （人）;
- en: return
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'false'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 假
- en: ;
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // successfully parsed the string into a Person
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: //成功将字符串解析为Person
- en: value
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: = new
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: = 新的
- en: Person() { ... };
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: Person() { ... };
- en: return
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'true'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: ;
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Practicing and exploring
  id: totrans-1469
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore with deeper research into the topics covered in
    this chapter.
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试您的知识和理解，进行一些动手实践，并深入研究本章涵盖的主题。
- en: Exercise 4.1 – Test your knowledge
  id: totrans-1471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.1-测试您的知识
- en: 'Answer the following questions. If you get stuck, try Googling the answers
    if necessary, while remembering that if you get totally stuck, the answers are
    in the Appendix (available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ) :'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题。如果遇到困难，请尝试谷歌答案，必要时记住，如果完全困住，答案在附录中（可在[https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)找到）：
- en: What does the C# keyword `void` mean?
  id: totrans-1473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C#关键字`void`的含义是什么？
- en: What are some differences between imperative and functional programming styles?
  id: totrans-1474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令式和函数式编程风格之间有哪些区别？
- en: In Visual Studio Code or Visual Studio, what is the difference between pressing
    F5 , Ctrl or Cmd + F5 , Shift + F5 , and Ctrl or Cmd + Shift + F5 ?
  id: totrans-1475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code或Visual Studio中，按F5、Ctrl或Cmd + F5、Shift + F5和Ctrl或Cmd + Shift
    + F5之间有什么区别？
- en: Where does the `Trace.WriteLine` method write its output to?
  id: totrans-1476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Trace.WriteLine`方法的输出写入到哪里？'
- en: What are the five trace levels?
  id: totrans-1477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 五个跟踪级别是什么？
- en: What is the difference between the `Debug` and `Trace` classes?
  id: totrans-1478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Debug`和`Trace`类之间有什么区别？'
- en: When writing a unit test, what are the three "A"s?
  id: totrans-1479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编写单元测试时，三个“A”是什么？
- en: When writing a unit test using xUnit, what attribute must you decorate the test
    methods with?
  id: totrans-1480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用xUnit编写单元测试时，必须用什么属性装饰测试方法？
- en: What `dotnet` command executes xUnit tests?
  id: totrans-1481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么`dotnet`命令执行xUnit测试？
- en: What statement should you use to rethrow a caught exception named `ex` without
    losing the stack trace?
  id: totrans-1482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不丢失堆栈跟踪的情况下，应该使用什么语句来重新抛出一个名为“ex”的捕获异常？
- en: Exercise 4.2 – Practice writing functions with debugging and unit testing
  id: totrans-1483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.2-练习编写带有调试和单元测试的函数
- en: 'Prime factors are the combination of the smallest prime numbers that, when
    multiplied together, will produce the original number. Consider the following
    example:'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 质因数是最小质数的组合，当它们相乘时将产生原始数字。考虑以下例子：
- en: 'Prime factors of 4 are: 2 x 2'
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4的质因数是：2 x 2
- en: 'Prime factors of 7 are: 7'
  id: totrans-1486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7的质因数是：7
- en: 'Prime factors of 30 are: 5 x 3 x 2'
  id: totrans-1487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 30的质因数是：5 x 3 x 2
- en: 'Prime factors of 40 are: 5 x 2 x 2 x 2'
  id: totrans-1488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 40的质因数是：5 x 2 x 2 x 2
- en: 'Prime factors of 50 are: 5 x 5 x 2'
  id: totrans-1489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 50的质因数是：5 x 5 x 2
- en: 'Create a workspace/solution named `PrimeFactors` to contain three projects:
    a class library with a method named `PrimeFactors` that, when passed an `int`
    variable as a parameter, returns a `string` showing its prime factors; a unit
    tests project; and a console application to use it.'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`PrimeFactors`的工作空间/解决方案，其中包含三个项目：一个类库，其中有一个名为`PrimeFactors`的方法，当作为参数传递一个`int`变量时，返回显示其质因数的`string`；一个单元测试项目；和一个控制台应用程序来使用它。
- en: To keep it simple, you can assume that the largest number entered will be 1,000.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，您可以假设输入的最大数字为1,000。
- en: Use the debugging tools and write unit tests to ensure that your function works
    correctly with multiple inputs and returns the correct output.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 使用调试工具并编写单元测试，以确保您的函数能够正确处理多个输入并返回正确的输出。
- en: Exercise 4.3 – Explore topics
  id: totrans-1493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.3-探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，了解本章涵盖的主题的更多细节：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-4---writing-debugging-and-testing-functions](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-4---writing-debugging-and-testing-functions)'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-4---writing-debugging-and-testing-functions](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-4---writing-debugging-and-testing-functions)'
- en: Summary
  id: totrans-1496
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to write reusable functions with input parameters
    and return values, in both an imperative and functional style, and then how to
    use the Visual Studio and Visual Studio Code debugging and diagnostic features
    to fix any bugs in them. Finally, you learned how to throw and catch exceptions
    in functions and understand the call stack.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何以命令式和函数式风格编写具有输入参数和返回值的可重用函数，以及如何使用Visual Studio和Visual Studio Code调试和诊断功能来修复其中的任何错误。最后，您学会了如何在函数中抛出和捕获异常，并了解调用堆栈。
- en: In the next chapter, you will learn how to build your own types using object-oriented
    programming techniques.
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用面向对象的编程技术构建自己的类型。
