["```cs\n     using\n\n     static\n\n     System.Console; \n    using\n\n     static\n\n     System.IO.Directory; \n    using\n\n     static\n\n     System.IO.Path; \n    using\n\n     static\n\n     System.Environment; \n\n    ```", "```cs\n     static\n\n    void\n\n    OutputFileSystemInfo\n\n    ()\n\n    {\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \"Path.PathSeparator\"\n\n    ,\n        arg1: PathSeparator);\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \"Path.DirectorySeparatorChar\"\n\n    ,\n        arg1: DirectorySeparatorChar);\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \"Directory.GetCurrentDirectory()\"\n\n    ,\n        arg1: GetCurrentDirectory());\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \"Environment.CurrentDirectory\"\n\n    , \n        arg1: CurrentDirectory);\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \"Environment.SystemDirectory\"\n\n    , \n        arg1: SystemDirectory);\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \"Path.GetTempPath()\"\n\n    , \n        arg1: GetTempPath());\n      WriteLine(\"GetFolderPath(SpecialFolder\"\n\n    );\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \" .System)\"\n\n    , \n        arg1: GetFolderPath(SpecialFolder.System));\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \" .ApplicationData)\"\n\n    , \n        arg1: GetFolderPath(SpecialFolder.ApplicationData));\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \" .MyDocuments)\"\n\n    , \n        arg1: GetFolderPath(SpecialFolder.MyDocuments));\n      WriteLine(\"{0,-33} {1}\"\n\n    , arg0: \" .Personal)\"\n\n    , \n        arg1: GetFolderPath(SpecialFolder.Personal));\n    } \n\n    ```", "```cs\n    OutputFileSystemInfo(); \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithDrives\n\n    ()\n\n    {\n      WriteLine(\"{0,-30} | {1,-10} | {2,-7} | {3,18} | {4,18}\"\n\n    ,\n        \"NAME\"\n\n    , \"TYPE\"\n\n    , \"FORMAT\"\n\n    , \"SIZE (BYTES)\"\n\n    , \"FREE SPACE\"\n\n    );\n      foreach\n\n     (DriveInfo drive in\n\n     DriveInfo.GetDrives())\n      {\n        if\n\n     (drive.IsReady)\n        {\n          WriteLine(\n            \"{0,-30} | {1,-10} | {2,-7} | {3,18:N0} | {4,18:N0}\"\n\n    ,\n            drive.Name, drive.DriveType, drive.DriveFormat,\n            drive.TotalSize, drive.AvailableFreeSpace);\n        }\n        else\n\n        {\n          WriteLine(\"{0,-30} | {1,-10}\"\n\n    , drive.Name, drive.DriveType);\n        }\n      }\n    } \n\n    ```", "```cs\n     **// OutputFileSystemInfo();**\n\n    **WorkWithDrives();** \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithDirectories\n\n    ()\n\n    {\n      // define a directory path for a new folder\n\n      // starting in the user's folder\n\n      string\n\n     newFolder = Combine(\n        GetFolderPath(SpecialFolder.Personal),\n        \"Code\"\n\n    , \"Chapter09\"\n\n    , \"NewFolder\"\n\n    );\n      WriteLine($\"Working with: \n\n    {newFolder}\n\n    \"\n\n    );\n      // check if it exists\n\n      WriteLine($\"Does it exist? \n\n    {Exists(newFolder)}\n\n    \"\n\n    );\n      // create directory \n\n      WriteLine(\"Creating it...\"\n\n    );\n      CreateDirectory(newFolder);\n      WriteLine($\"Does it exist? \n\n    {Exists(newFolder)}\n\n    \"\n\n    );\n      Write(\"Confirm the directory exists, and then press ENTER: \"\n\n    );\n      ReadLine();\n      // delete directory \n\n      WriteLine(\"Deleting it...\"\n\n    );\n      Delete(newFolder, recursive: true\n\n    );\n      WriteLine($\"Does it exist? \n\n    {Exists(newFolder)}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Working with: /Users/markjprice/Code/Chapter09/NewFolder Does it exist? False\n    Creating it...\n    Does it exist? True\n    Confirm the directory exists, and then press ENTER:\n    Deleting it...\n    Does it exist? False \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithFiles\n\n    ()\n\n    {\n      // define a directory path to output files\n\n      // starting in the user's folder\n\n      string\n\n     dir = Combine(\n        GetFolderPath(SpecialFolder.Personal), \n        \"Code\"\n\n    , \"Chapter09\"\n\n    , \"OutputFiles\"\n\n    );\n      CreateDirectory(dir);\n      // define file paths\n\n      string\n\n     textFile = Combine(dir, \"Dummy.txt\"\n\n    );\n      string\n\n     backupFile = Combine(dir, \"Dummy.bak\"\n\n    );\n      WriteLine($\"Working with: \n\n    {textFile}\n\n    \"\n\n    );\n      // check if a file exists\n\n      WriteLine($\"Does it exist? \n\n    {File.Exists(textFile)}\n\n    \"\n\n    );\n      // create a new text file and write a line to it\n\n      StreamWriter textWriter = File.CreateText(textFile);\n      textWriter.WriteLine(\"Hello, C#!\"\n\n    );\n      textWriter.Close(); // close file and release resources\n\n      WriteLine($\"Does it exist? \n\n    {File.Exists(textFile)}\n\n    \"\n\n    );\n      // copy the file, and overwrite if it already exists\n\n      File.Copy(sourceFileName: textFile,\n        destFileName: backupFile, overwrite: true\n\n    );\n      WriteLine(\n        $\"Does \n\n    {backupFile}\n\n     exist? \n\n    {File.Exists(backupFile)}\n\n    \"\n\n    );\n      Write(\"Confirm the files exist, and then press ENTER: \"\n\n    );\n      ReadLine();\n      // delete file\n\n      File.Delete(textFile);\n      WriteLine($\"Does it exist? \n\n    {File.Exists(textFile)}\n\n    \"\n\n    );\n      // read from the text file backup\n\n      WriteLine($\"Reading contents of \n\n    {backupFile}\n\n    :\"\n\n    );\n      StreamReader textReader = File.OpenText(backupFile); \n      WriteLine(textReader.ReadToEnd());\n      textReader.Close();\n    } \n\n    ```", "```cs\n    Working with: /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.txt \n    Does it exist? False\n    Does it exist? True\n    Does /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak exist? True \n    Confirm the files exist, and then press ENTER:\n    Does it exist? False\n    Reading contents of /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak:\n    Hello, C#! \n\n    ```", "```cs\n     // Managing paths\n\n    WriteLine($\"Folder Name: \n\n    {GetDirectoryName(textFile)}\n\n    \"\n\n    ); \n    WriteLine($\"File Name: \n\n    {GetFileName(textFile)}\n\n    \"\n\n    ); \n    WriteLine(\"File Name without Extension: {0}\"\n\n    ,\n      GetFileNameWithoutExtension(textFile)); \n    WriteLine($\"File Extension: \n\n    {GetExtension(textFile)}\n\n    \"\n\n    ); \n    WriteLine($\"Random File Name: \n\n    {GetRandomFileName()}\n\n    \"\n\n    ); \n    WriteLine($\"Temporary File Name: \n\n    {GetTempFileName()}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Folder Name: /Users/markjprice/Code/Chapter09/OutputFiles \n    File Name: Dummy.txt\n    File Name without Extension: Dummy \n    File Extension: .txt\n    Random File Name: u45w1zki.co3 \n    Temporary File Name:\n    /var/folders/tz/xx0y_wld5sx0nv0fjtq4tnpc0000gn/T/tmpyqrepP.tmp \n\n    ```", "```cs\n    FileInfo info = new\n\n    (backupFile); \n    WriteLine($\"\n\n    {backupFile}\n\n    :\"\n\n    ); \n    WriteLine($\"Contains \n\n    {info.Length}\n\n     bytes\"\n\n    );\n    WriteLine($\"Last accessed \n\n    {info.LastAccessTime}\n\n    \"\n\n    ); \n    WriteLine($\"Has readonly set to \n\n    {info.IsReadOnly}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak: \n    Contains 11 bytes\n    Last accessed 26/10/2021 09:08:26 \n    Has readonly set to False \n\n    ```", "```cs\nFileStream file = File.Open(pathToFile,\n  FileMode.Open, FileAccess.Read, FileShare.Read); \n\n```", "```cs\nFileInfo info = new\n\n(backupFile); \nWriteLine(\"Is the backup file compressed? {0}\"\n\n,\n  info.Attributes.HasFlag(FileAttributes.Compressed)); \n\n```", "```cs\n     static\n\n     class\n\n     Viper\n\n    {\n      // define an array of Viper pilot call signs\n\n      public\n\n     static\n\n     string\n\n    [] Callsigns = new\n\n    []\n      {\n        \"Husker\"\n\n    , \"Starbuck\"\n\n    , \"Apollo\"\n\n    , \"Boomer\"\n\n    ,\n        \"Bulldog\"\n\n    , \"Athena\"\n\n    , \"Helo\"\n\n    , \"Racetrack\"\n\n      };\n    } \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithText\n\n    ()\n\n    {\n      // define a file to write to\n\n      string\n\n     textFile = Combine(CurrentDirectory, \"streams.txt\"\n\n    );\n      // create a text file and return a helper writer\n\n      StreamWriter text = File.CreateText(textFile);\n      // enumerate the strings, writing each one\n\n      // to the stream on a separate line\n\n      foreach\n\n     (string\n\n     item in\n\n     Viper.Callsigns)\n      {\n        text.WriteLine(item);\n      }\n      text.Close(); // release resources\n\n      // output the contents of the file\n\n      WriteLine(\"{0} contains {1:N0} bytes.\"\n\n    ,\n        arg0: textFile,\n        arg1: new\n\n     FileInfo(textFile).Length);\n      WriteLine(File.ReadAllText(textFile));\n    } \n\n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.txt contains\n    60 bytes. \n    Husker \n    Starbuck \n    Apollo \n    Boomer \n    Bulldog \n    Athena \n    Helo \n    Racetrack \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithXml\n\n    ()\n\n    {\n      // define a file to write to\n\n      string\n\n     xmlFile = Combine(CurrentDirectory, \"streams.xml\"\n\n    );\n      // create a file stream\n\n      FileStream xmlFileStream = File.Create(xmlFile);\n      // wrap the file stream in an XML writer helper\n\n      // and automatically indent nested elements\n\n      XmlWriter xml = XmlWriter.Create(xmlFileStream,\n        new\n\n     XmlWriterSettings { Indent = true\n\n     });\n      // write the XML declaration\n\n      xml.WriteStartDocument();\n      // write a root element\n\n      xml.WriteStartElement(\"callsigns\"\n\n    );\n      // enumerate the strings writing each one to the stream\n\n      foreach\n\n     (string\n\n     item in\n\n     Viper.Callsigns)\n      {\n        xml.WriteElementString(\"callsign\"\n\n    , item);\n      }\n      // write the close root element\n\n      xml.WriteEndElement();\n      // close helper and stream\n\n      xml.Close();\n      xmlFileStream.Close();\n      // output all the contents of the file\n\n      WriteLine(\"{0} contains {1:N0} bytes.\"\n\n    ,\n        arg0: xmlFile,\n        arg1: new\n\n     FileInfo(xmlFile).Length);\n      WriteLine(File.ReadAllText(xmlFile));\n    } \n\n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml contains\n    310 bytes.\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <callsigns>\n      <callsign>Husker</callsign>\n      <callsign>Starbuck</callsign>\n      <callsign>Apollo</callsign>\n      <callsign>Boomer</callsign>\n      <callsign>Bulldog</callsign>\n      <callsign>Athena</callsign>\n      <callsign>Helo</callsign>\n      <callsign>Racetrack</callsign>\n    </callsigns> \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithXml\n\n    ()\n\n    {\n\n     **FileStream? xmlFileStream =** \n\n    **null**\n\n    **;** \n\n     **XmlWriter? xml =** \n\n    **null**\n\n    **;**\n\n    **try**\n\n     **{**\n\n        // define a file to write to\n\n        string\n\n     xmlFile = Combine(CurrentDirectory, \"streams.xml\"\n\n    );\n        // create a file stream\n\n     **xmlFileStream = File.Create(xmlFile);**\n\n        // wrap the file stream in an XML writer helper\n\n        // and automatically indent nested elements\n\n     **xml = XmlWriter.Create(xmlFileStream,**\n\n    **new**\n\n     **XmlWriterSettings { Indent =** \n\n    **true**\n\n     **});**\n\n        // write the XML declaration\n\n        xml.WriteStartDocument();\n        // write a root element\n\n        xml.WriteStartElement(\"callsigns\"\n\n    );\n        // enumerate the strings writing each one to the stream\n\n        foreach\n\n     (string\n\n     item in\n\n     Viper.Callsigns)\n        {\n          xml.WriteElementString(\"callsign\"\n\n    , item);\n        }\n        // write the close root element\n\n        xml.WriteEndElement();\n        // close helper and stream\n\n        xml.Close();\n        xmlFileStream.Close();\n        // output all the contents of the file\n\n        WriteLine($\"\n\n    {\n\n    0\n\n    }\n\n     contains \n\n    {\n\n    1\n\n    :N0}\n\n     bytes.\"\n\n    ,\n          arg0: xmlFile,\n          arg1: new\n\n     FileInfo(xmlFile).Length);\n        WriteLine(File.ReadAllText(xmlFile));\n\n     **}**\n\n     **catch (Exception ex)**\n\n     **{**\n\n    **// if the path doesn't exist the exception will be caught**\n\n     **WriteLine(**\n\n    **$\"**\n\n    **{ex.GetType()}**\n\n     **says** \n\n    **{ex.Message}**\n\n    **\"**\n\n    **);**\n\n     **}**\n\n    **finally**\n\n     **{**\n\n    **if**\n\n     **(xml !=** \n\n    **null**\n\n    **)**\n\n     **{** \n\n     **xml.Dispose();**\n\n     **WriteLine(**\n\n    **\"The XML writer's unmanaged resources have been disposed.\"**\n\n    **);**\n\n    **if**\n\n     **(xmlFileStream !=** \n\n    **null**\n\n    **)**\n\n     **{**\n\n     **xmlFileStream.Dispose();**\n\n     **WriteLine(**\n\n    **\"The file stream's unmanaged resources have been disposed.\"**\n\n    **);**\n\n     **}**\n\n     **}**\n\n     **}**\n\n    } \n\n    ```", "```cs\n    The XML writer's unmanaged resources have been disposed. \n    The file stream's unmanaged resources have been disposed. \n\n    ```", "```cs\n using\n\n (FileStream file2 = File.OpenWrite(\n  Path.Combine(path, \"file2.txt\"\n\n)))\n{\n  using\n\n (StreamWriter writer2 = new\n\n StreamWriter(file2))\n  {\n    try\n\n    {\n      writer2.WriteLine(\"Welcome, .NET!\"\n\n);\n    }\n    catch(Exception ex)\n    {\n      WriteLine($\"\n\n{ex.GetType()}\n\n says \n\n{ex.Message}\n\n\"\n\n);\n    }\n  } // automatically calls Dispose if the object is not null\n\n} // automatically calls Dispose if the object is not null \n\n```", "```cs\n using\n\n FileStream file2 = File.OpenWrite(\n\nPath.Combine(path, \"file2.txt\"\n\n));\nusing\n\n StreamWriter writer2 = new\n\n(file2);\ntry\n\n{\n  writer2.WriteLine(\"Welcome, .NET!\"\n\n);\n}\ncatch(Exception ex)\n{\n  WriteLine($\"\n\n{ex.GetType()}\n\n says \n\n{ex.Message}\n\n\"\n\n);\n} \n\n```", "```cs\n     using\n\n     System.IO.Compression; // BrotliStream, GZipStream, CompressionMode \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithCompression\n\n    ()\n\n    {\n      string\n\n     fileExt = \"gzip\"\n\n    ;\n      // compress the XML output\n\n      string\n\n     filePath = Combine(\n        CurrentDirectory, $\"streams.\n\n    **{fileExt}**\n\n    \"\n\n    );\n      FileStream file = File.Create(filePath);\n      Stream compressor = new\n\n     GZipStream(file, CompressionMode.Compress);\n      using\n\n     (compressor)\n      {\n        using\n\n     (XmlWriter xml = XmlWriter.Create(compressor))\n        {\n          xml.WriteStartDocument();\n          xml.WriteStartElement(\"callsigns\"\n\n    );\n          foreach\n\n     (string\n\n     item in\n\n     Viper.Callsigns)\n          {\n            xml.WriteElementString(\"callsign\"\n\n    , item);\n          }\n          // the normal call to WriteEndElement is not necessary\n\n          // because when the XmlWriter disposes, it will\n\n          // automatically end any elements of any depth\n\n        }\n      } // also closes the underlying stream\n\n      // output all the contents of the compressed file\n\n      WriteLine(\"{0} contains {1:N0} bytes.\"\n\n    ,\n        filePath, new\n\n     FileInfo(filePath).Length);\n      WriteLine($\"The compressed contents:\"\n\n    );\n      WriteLine(File.ReadAllText(filePath));\n      // read a compressed file\n\n      WriteLine(\"Reading the compressed XML file:\"\n\n    );\n      file = File.Open(filePath, FileMode.Open);\n      Stream decompressor = new\n\n     GZipStream(file,\n        CompressionMode.Decompress);\n      using\n\n     (decompressor)\n      {\n        using\n\n     (XmlReader reader = XmlReader.Create(decompressor))\n        {\n          while\n\n     (reader.Read()) // read the next XML node\n\n          {\n            // check if we are on an element node named callsign\n\n            if\n\n     ((reader.NodeType == XmlNodeType.Element)\n              && (reader.Name == \"callsign\"\n\n    ))\n            {\n              reader.Read(); // move to the text inside element\n\n              WriteLine($\"\n\n    {reader.Value}\n\n    \"\n\n    ); // read its value\n\n            }\n          }\n        }\n      }\n    } \n\n    ```", "```cs\n     // WorkWithText();\n\n    **WorkWithXml();**\n\n    **WorkWithCompression();** \n\n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml contains 310 bytes.\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip contains 150 bytes. \n\n    ```", "```cs\n     static\n\n    void\n\n    WorkWithCompression\n\n    (\n\n    **bool**\n\n     **useBrotli =** \n\n    **true**\n\n    )\n\n    {\n      string\n\n     fileExt =\n     **useBrotli ?** \n\n    **\"brotli\"**\n\n     **:** \n\n    **\"gzip\"**\n\n    **;**\n\n      // compress the XML output\n\n      string\n\n     filePath = Combine(\n        CurrentDirectory, $\"streams.\n\n    {fileExt}\n\n    \"\n\n    );\n      FileStream file = File.Create(filePath);\n\n     **Stream compressor;**\n\n    **if**\n\n     **(useBrotli)**\n\n     **{**\n\n     **compressor =** \n\n    **new**\n\n     **BrotliStream(file, CompressionMode.Compress);**\n\n     **}**\n\n    **else**\n\n     **{**\n\n     **compressor =** \n\n    **new**\n\n     **GZipStream(file, CompressionMode.Compress);**\n\n     **}**\n\n      using\n\n     (compressor)\n      {\n        using\n\n     (XmlWriter xml = XmlWriter.Create(compressor))\n        {\n          xml.WriteStartDocument();\n          xml.WriteStartElement(\"callsigns\"\n\n    );\n          foreach\n\n     (string\n\n     item in\n\n     Viper.Callsigns)\n          {\n            xml.WriteElementString(\"callsign\"\n\n    , item);\n          }\n        }\n      } // also closes the underlying stream\n\n      // output all the contents of the compressed file\n\n      WriteLine(\"{0} contains {1:N0} bytes.\"\n\n    ,\n        filePath, new\n\n     FileInfo(filePath).Length);\n      WriteLine($\"The compressed contents:\"\n\n    );\n      WriteLine(File.ReadAllText(filePath));\n      // read a compressed file\n\n      WriteLine(\"Reading the compressed XML file:\"\n\n    );\n      file = File.Open(filePath, FileMode.Open);\n\n     **Stream decompressor;**\n\n    **if**\n\n     **(useBrotli)**\n\n     **{**\n\n     **decompressor =** \n\n    **new**\n\n     **BrotliStream(**\n\n     **file, CompressionMode.Decompress);**\n\n     **}**\n\n    **else**\n\n     **{**\n\n     **decompressor =** \n\n    **new**\n\n     **GZipStream(**\n\n     **file, CompressionMode.Decompress);**\n\n     **}**\n\n      using\n\n     (decompressor)\n      {\n        using\n\n     (XmlReader reader = XmlReader.Create(decompressor))\n        {\n          while\n\n     (reader.Read())\n          {\n            // check if we are on an element node named callsign\n\n            if\n\n     ((reader.NodeType == XmlNodeType.Element)\n              && (reader.Name == \"callsign\"\n\n    ))\n            {\n              reader.Read(); // move to the text inside element\n\n              WriteLine($\"\n\n    {reader.Value}\n\n    \"\n\n    ); // read its value\n\n            }\n          }\n        }\n      }\n    } \n\n    ```", "```cs\n    WorkWithCompression(); \n    WorkWithCompression(useBrotli: false\n\n    ); \n\n    ```", "```cs\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.brotli contains 118 bytes.\n    /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip contains 150 bytes. \n\n    ```", "```cs\n    WriteLine(\"Encodings\"\n\n    ); \n    WriteLine(\"[1] ASCII\"\n\n    );\n    WriteLine(\"[2] UTF-7\"\n\n    );\n    WriteLine(\"[3] UTF-8\"\n\n    );\n    WriteLine(\"[4] UTF-16 (Unicode)\"\n\n    );\n    WriteLine(\"[5] UTF-32\"\n\n    ); \n    WriteLine(\"[any other key] Default\"\n\n    );\n    // choose an encoding\n\n    Write(\"Press a number to choose an encoding: \"\n\n    ); \n    ConsoleKey number = ReadKey(intercept: false\n\n    ).Key; \n    WriteLine();\n    WriteLine();\n    Encoding encoder = number switch\n\n    {\n      ConsoleKey.D1 => Encoding.ASCII,\n      ConsoleKey.D2 => Encoding.UTF7,\n      ConsoleKey.D3 => Encoding.UTF8,\n      ConsoleKey.D4 => Encoding.Unicode,\n      ConsoleKey.D5 => Encoding.UTF32,\n      _             => Encoding.Default\n    };\n    // define a string to encode\n\n    string\n\n     message = \"Caf\u00e9 cost: \u00a34.39\"\n\n    ;\n    // encode the string into a byte array\n\n    byte\n\n    [] encoded = encoder.GetBytes(message);\n    // check how many bytes the encoding needed\n\n    WriteLine(\"{0} uses {1:N0} bytes.\"\n\n    ,\n      encoder.GetType().Name, encoded.Length);\n    WriteLine();\n    // enumerate each byte \n\n    WriteLine($\"BYTE HEX CHAR\"\n\n    ); \n    foreach\n\n     (byte\n\n     b in\n\n     encoded)\n    {\n      WriteLine($\"\n\n    {b,\n\n    4\n\n    }\n\n    {b.ToString(\n\n    \"X\"\n\n    ),\n\n    4\n\n    }\n\n    {(\n\n    char\n\n    )b,\n\n    5\n\n    }\n\n    \"\n\n    );\n    }\n    // decode the byte array back into a string and display it\n\n    string\n\n     decoded = encoder.GetString(encoded); \n    WriteLine(decoded); \n\n    ```", "```cs\n    BYTE  HEX  CHAR\n      67   43     C\n      97   61     a\n     102   66     f\n      63   3F     ?\n      32   20      \n     111   6F     o\n     115   73     s\n     116   74     t\n      58   3A     :\n      32   20      \n      63   3F     ?\n      52   34     4\n      46   2E     .\n      51   33     3\n      57   39     9\n    Caf? cost: ?4.39 \n\n    ```", "```cs\n    UTF8EncodingSealed uses 18 bytes.\n    BYTE  HEX  CHAR\n      67   43     C\n      97   61     a\n     102   66     f\n     195   C3     \u00c3\n     169   A9     \u00a9\n      32   20      \n     111   6F     o\n     115   73     s\n     116   74     t\n      58   3A     :\n      32   20      \n     194   C2     \u00c2\n     163   A3     \u00a3\n      52   34     4\n      46   2E     .\n      51   33     3\n      57   39     9\n    Caf\u00e9 cost: \u00a34.39 \n\n    ```", "```cs\nStreamReader reader = new\n\n(stream, Encoding.UTF8); \nStreamWriter writer = new\n\n(stream, Encoding.UTF8); \n\n```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Person\n\n    {\n      public\n\n    Person\n\n    (\n\n    decimal\n\n     initialSalary\n\n    )\n\n      {\n        Salary = initialSalary;\n      }\n      public\n\n     string\n\n    ? FirstName { get\n\n    ; set\n\n    ; }\n      public\n\n     string\n\n    ? LastName { get\n\n    ; set\n\n    ; }\n      public\n\n     DateTime DateOfBirth { get\n\n    ; set\n\n    ; }\n      public\n\n     HashSet<Person>? Children { get\n\n    ; set\n\n    ; }\n      protected\n\n     decimal\n\n     Salary { get\n\n    ; set\n\n    ; }\n    } \n\n    ```", "```cs\n     using\n\n     System.Xml.Serialization; // XmlSerializer\n\n    using\n\n     Packt.Shared; // Person \n\n    using\n\n     static\n\n     System.Console; \n    using\n\n     static\n\n     System.Environment; \n    using\n\n     static\n\n     System.IO.Path; \n\n    ```", "```cs\n     // create an object graph\n\n    List<Person> people = new\n\n    ()\n    {\n      new\n\n    (30000\n\n    M) \n      {\n        FirstName = \"Alice\"\n\n    ,\n        LastName = \"Smith\"\n\n    ,\n        DateOfBirth = new\n\n    (1974\n\n    , 3\n\n    , 14\n\n    )\n      },\n      new\n\n    (40000\n\n    M) \n      {\n        FirstName = \"Bob\"\n\n    ,\n        LastName = \"Jones\"\n\n    ,\n        DateOfBirth = new\n\n    (1969\n\n    , 11\n\n    , 23\n\n    )\n      },\n      new\n\n    (20000\n\n    M)\n      {\n        FirstName = \"Charlie\"\n\n    ,\n        LastName = \"Cox\"\n\n    ,\n        DateOfBirth = new\n\n    (1984\n\n    , 5\n\n    , 4\n\n    ),\n        Children = new\n\n    ()\n        {\n          new\n\n    (0\n\n    M)\n          {\n            FirstName = \"Sally\"\n\n    ,\n            LastName = \"Cox\"\n\n    ,\n            DateOfBirth = new\n\n    (2000\n\n    , 7\n\n    , 12\n\n    )\n          }\n        }\n      }\n    };\n    // create object that will format a List of Persons as XML\n\n    XmlSerializer xs = new\n\n    (people.GetType());\n    // create a file to write to\n\n    string\n\n     path = Combine(CurrentDirectory, \"people.xml\"\n\n    );\n    using\n\n     (FileStream stream = File.Create(path))\n    {\n      // serialize the object graph to the stream\n\n      xs.Serialize(stream, people);\n    }\n    WriteLine(\"Written {0:N0} bytes of XML to {1}\"\n\n    ,\n      arg0: new\n\n     FileInfo(path).Length,\n      arg1: path);\n    WriteLine();\n    // Display the serialized object graph\n\n    WriteLine(File.ReadAllText(path)); \n\n    ```", "```cs\n    Unhandled Exception: System.InvalidOperationException: Packt.Shared.Person cannot be serialized because it does not have a parameterless constructor. \n\n    ```", "```cs\n     public\n\n    Person\n\n    ()\n\n     { } \n\n    ```", "```cs\n    Written 752 bytes of XML to\n    /Users/markjprice/Code/Chapter09/WorkingWithSerialization/people.xml\n    <?xml version=\"1.0\"?>\n    <ArrayOfPerson  >\n      <Person>\n        <FirstName>Alice</FirstName>\n        <LastName>Smith</LastName>\n        <DateOfBirth>1974-03-14T00:00:00</DateOfBirth>\n      </Person>\n      <Person>\n        <FirstName>Bob</FirstName>\n        <LastName>Jones</LastName>\n        <DateOfBirth>1969-11-23T00:00:00</DateOfBirth>\n      </Person>\n      <Person>\n        <FirstName>Charlie</FirstName>\n        <LastName>Cox</LastName>\n        <DateOfBirth>1984-05-04T00:00:00</DateOfBirth>\n        <Children>\n          <Person>\n            <FirstName>Sally</FirstName>\n            <LastName>Cox</LastName>\n            <DateOfBirth>2000-07-12T00:00:00</DateOfBirth>\n          </Person>\n        </Children>\n      </Person>\n    </ArrayOfPerson> \n\n    ```", "```cs\n     **[**\n\n    **XmlAttribute(**\n\n    **\"fname\"**\n\n    **)**\n\n    **]**\n\n    public\n\n     string\n\n     FirstName { get\n\n    ; set\n\n    ; }\n\n    **[**\n\n    **XmlAttribute(**\n\n    **\"lname\"**\n\n    **)**\n\n    **]**\n\n    public\n\n     string\n\n     LastName { get\n\n    ; set\n\n    ; }\n\n    **[**\n\n    **XmlAttribute(**\n\n    **\"dob\"**\n\n    **)**\n\n    **]**\n\n    public\n\n     DateTime DateOfBirth { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n    Written 462 bytes of XML to /Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.xml\n    <?xml version=\"1.0\"?>\n    <ArrayOfPerson  >\n      <Person fname=\"Alice\" lname=\"Smith\" dob=\"1974-03-14T00:00:00\" />\n      <Person fname=\"Bob\" lname=\"Jones\" dob=\"1969-11-23T00:00:00\" />\n      <Person fname=\"Charlie\" lname=\"Cox\" dob=\"1984-05-04T00:00:00\">\n        <Children>\n          <Person fname=\"Sally\" lname=\"Cox\" dob=\"2000-07-12T00:00:00\" />\n        </Children>\n      </Person>\n    </ArrayOfPerson> \n\n    ```", "```cs\n     using\n\n     (FileStream xmlLoad = File.Open(path, FileMode.Open))\n    {\n      // deserialize and cast the object graph into a List of Person\n\n      List<Person>? loadedPeople =\n        xs.Deserialize(xmlLoad) as\n\n     List<Person>;\n      if\n\n     (loadedPeople is\n\n     not\n\n     null\n\n    )\n      {\n        foreach\n\n     (Person p in\n\n     loadedPeople)\n        {\n          WriteLine(\"{0} has {1} children.\"\n\n    , \n            p.LastName, p.Children?.Count ?? 0\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n    Smith has 0 children. \n    Jones has 0 children. \n    Cox has 1 children. \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Newtonsoft.Json\"\n\n        Version=\"13.0.1\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     // create a file to write to\n\n    string\n\n     jsonPath = Combine(CurrentDirectory, \"people.json\"\n\n    );\n    using\n\n     (StreamWriter jsonStream = File.CreateText(jsonPath))\n    {\n      // create an object that will format as JSON\n\n      Newtonsoft.Json.JsonSerializer jss = new\n\n    ();\n      // serialize the object graph into a string\n\n      jss.Serialize(jsonStream, people);\n    }\n    WriteLine();\n    WriteLine(\"Written {0:N0} bytes of JSON to: {1}\"\n\n    ,\n      arg0: new\n\n     FileInfo(jsonPath).Length,\n      arg1: jsonPath);\n    // Display the serialized object graph\n\n    WriteLine(File.ReadAllText(jsonPath)); \n\n    ```", "```cs\n    Written 366 bytes of JSON to: /Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.json [{\"FirstName\":\"Alice\",\"LastName\":\"Smith\",\"DateOfBirth\":\"1974-03-\n    14T00:00:00\",\"Children\":null},{\"FirstName\":\"Bob\",\"LastName\":\"Jones\",\"Date\n    OfBirth\":\"1969-11-23T00:00:00\",\"Children\":null},{\"FirstName\":\"Charlie\",\"L astName\":\"Cox\",\"DateOfBirth\":\"1984-05-04T00:00:00\",\"Children\":[{\"FirstNam e\":\"Sally\",\"LastName\":\"Cox\",\"DateOfBirth\":\"2000-07-12T00:00:00\",\"Children \":null}]}] \n\n    ```", "```cs\n     using\n\n     NewJson = System.Text.Json.JsonSerializer; \n\n    ```", "```cs\n     using\n\n     (FileStream jsonLoad = File.Open(jsonPath, FileMode.Open))\n    {\n      // deserialize object graph into a List of Person\n\n      List<Person>? loadedPeople = \n        await\n\n     NewJson.DeserializeAsync(utf8Json: jsonLoad,\n          returnType: typeof\n\n    (List<Person>)) as\n\n     List<Person>;\n      if\n\n     (loadedPeople is\n\n     not\n\n     null\n\n    )\n      {\n        foreach\n\n     (Person p in\n\n     loadedPeople)\n        {\n          WriteLine(\"{0} has {1} children.\"\n\n    ,\n            p.LastName, p.Children?.Count ?? 0\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n    Smith has 0 children. \n    Jones has 0 children. \n    Cox has 1 children. \n\n    ```", "```cs\n     using\n\n     System.Text.Json; // JsonSerializer\n\n    using\n\n     System.Text.Json.Serialization; // [JsonInclude]\n\n    using\n\n     static\n\n     System.Console;\n    using\n\n     static\n\n     System.Environment;\n    using\n\n     static\n\n     System.IO.Path; \n\n    ```", "```cs\n     public\n\n     class\n\n     Book\n\n    {\n      // constructor to set non-nullable property\n\n      public\n\n    Book\n\n    (\n\n    string\n\n     title\n\n    )\n\n      {\n        Title = title;\n      }\n      // properties\n\n      public\n\n     string\n\n     Title { get\n\n    ; set\n\n    ; }\n      public\n\n     string\n\n    ? Author { get\n\n    ; set\n\n    ; }\n      // fields\n\n      [JsonInclude\n\n    ] // include this field\n\n      public\n\n     DateOnly PublishDate;\n      [JsonInclude\n\n    ] // include this field\n\n      public\n\n     DateTimeOffset Created;\n      public\n\n     ushort\n\n     Pages;\n    } \n\n    ```", "```cs\n    Book csharp10 = new\n\n    (title: \n      \"C# 10 and .NET 6 - Modern Cross-platform Development\"\n\n    )\n    { \n      Author = \"Mark J Price\"\n\n    ,\n      PublishDate = new\n\n    (year: 2021\n\n    , month: 11\n\n    , day: 9\n\n    ),\n      Pages = 823\n\n    ,\n      Created = DateTimeOffset.UtcNow,\n    };\n    JsonSerializerOptions options = new\n\n    ()\n    {\n      IncludeFields = true\n\n    , // includes all fields\n\n      PropertyNameCaseInsensitive = true\n\n    ,\n      WriteIndented = true\n\n    ,\n      PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n    };\n    string\n\n     filePath = Combine(CurrentDirectory, \"book.json\"\n\n    );\n    using\n\n     (Stream fileStream = File.Create(filePath))\n    {\n      JsonSerializer.Serialize<Book>(\n        utf8Json: fileStream, value\n\n    : csharp10, options);\n    }\n    WriteLine(\"Written {0:N0} bytes of JSON to {1}\"\n\n    ,\n      arg0: new\n\n     FileInfo(filePath).Length,\n      arg1: filePath);\n    WriteLine();\n    // Display the serialized object graph \n\n    WriteLine(File.ReadAllText(filePath)); \n\n    ```", "```cs\n    Written 315 bytes of JSON to C:\\Code\\Chapter09\\WorkingWithJson\\bin\\Debug\\net6.0\\book.json\n    {\n      \"title\": \"C# 10 and .NET 6 - Modern Cross-platform Development\",\n      \"author\": \"Mark J Price\",\n      \"publishDate\": {\n        \"year\": 2021,\n        \"month\": 11,\n        \"day\": 9,\n        \"dayOfWeek\": 2,\n        \"dayOfYear\": 313,\n        \"dayNumber\": 738102\n      },\n      \"created\": \"2021-08-20T08:07:02.3191648+00:00\",\n      \"pages\": 823\n    } \n\n    ```", "```cs\n    Written 230 bytes of JSON to C:\\Code\\Chapter09\\WorkingWithJson\\bin\\Debug\\net6.0\\book.json\n    {\"Title\":\"C# 10 and .NET 6 - Modern Cross-platform Development\",\"Author\":\"Mark J Price\",\"PublishDate\":{\"Year\":2021,\"Month\":11,\"Day\":9,\"DayOfWeek\":2,\"DayOfYear\":313,\"DayNumber\":738102},\"Created\":\"2021-08-20T08:12:31.6852484+00:00\"} \n\n    ```", "```cs\n // create a list of Shapes to serialize\n\nList<Shape> listOfShapes = new\n\n()\n{\n  new\n\n Circle { Colour = \"Red\"\n\n, Radius = 2.5\n\n },\n  new\n\n Rectangle { Colour = \"Blue\"\n\n, Height = 20.0\n\n, Width = 10.0\n\n },\n  new\n\n Circle { Colour = \"Green\"\n\n, Radius = 8.0\n\n },\n  new\n\n Circle { Colour = \"Purple\"\n\n, Radius = 12.3\n\n },\n  new\n\n Rectangle { Colour = \"Blue\"\n\n, Height = 45.0\n\n, Width = 18.0\n\n }\n}; \n\n```", "```cs\nList<Shape> loadedShapesXml = \n  serializerXml.Deserialize(fileXml) as\n\n List<Shape>;\nforeach\n\n (Shape item in\n\n loadedShapesXml)\n{\n  WriteLine(\"{0} is {1} and has an area of {2:N2}\"\n\n,\n    item.GetType().Name, item.Colour, item.Area);\n} \n\n```", "```cs\nLoading shapes from XML:\nCircle is Red and has an area of 19.63 \nRectangle is Blue and has an area of 200.00 \nCircle is Green and has an area of 201.06 \nCircle is Purple and has an area of 475.29 \nRectangle is Blue and has an area of 810.00 \n\n```"]