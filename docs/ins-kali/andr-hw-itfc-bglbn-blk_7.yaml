- en: Chapter 7. Where to Go from Here
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。从这里开始
- en: In the previous chapter, we examined how an Android app can interface with GPIO,
    I2C, and SPI at the same time to provide a complete hardware-interfacing solution.
    While you might think that this covers most of the problems of hardware interfacing
    under Android, there are still many other factors to consider.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们研究了Android应用如何同时与GPIO、I2C和SPI进行接口，以提供完整的硬件接口解决方案。虽然您可能认为这涵盖了Android下硬件接口的大部分问题，但仍有许多其他因素需要考虑。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Integrating your solution into Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的解决方案集成到Android
- en: Combining your hardware with other hardware
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的硬件与其他硬件结合使用
- en: Exploring the BBB's other interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索BBB的其他接口
- en: Integrating your solution with Android
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的解决方案与Android集成
- en: The BBB offers a wide variety of hardware features, and the particular features
    that you use in your projects will vary as you change the capes and overlays used
    within your system. While this gives you a lot of flexibility during prototyping,
    you might eventually reach a point where you will finalize your custom hardware
    design to a single, static configuration and decide to make it a permanent Android-based
    solution.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: BBB提供了各种硬件功能，您在项目中使用的特定功能将随着更改系统中使用的cape和叠加而变化。虽然这在原型设计阶段给您很大的灵活性，但最终您可能会达到一个点，决定将您的自定义硬件设计最终确定为单一的静态配置，并决定将其作为永久的基于Android的解决方案。
- en: The examples in this book make the design decision of having apps directly access
    the hardware of the BBB. While this approach makes creating hardware-interfacing
    Android apps simple, it is not an ideal approach. Once you have a hardware design
    that you like and software that properly interfaces with the hardware, it is time
    to fully integrate your solution with Android. Depending upon just how complex
    your hardware solution is, you might end up creating custom kernel device drivers,
    or even modifying the managers within the Android OS framework!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例做出了这样的设计决策，即应用程序直接访问BBB的硬件。虽然这种方法使得创建硬件接口Android应用程序变得简单，但并非理想的方法。一旦您拥有了喜欢的硬件设计和与硬件正确接口的软件，就是时候将您的解决方案与Android完全集成了。根据您的硬件解决方案有多复杂，您可能最终会创建自定义内核设备驱动程序，甚至修改Android
    OS框架中的管理器！
- en: Creating a custom kernel and Device Tree
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义内核和设备树
- en: The first step to creating a permanent Android solution is to ensure that everything
    on the Linux side of the system is as it should be. This means that all hardware
    support (such as Linux kernel drivers needed for your project) should be enabled
    in the kernel and configured and allocated within the kernel's Device Tree (for
    pin muxing and resource allocation). Ideally, everything that you need will be
    statically built directly into the kernel and Device Tree. This eliminates the
    need to load overlays and kernel modules for your solution via explicit commands
    executed from within the `init.{ro.hardware}.rc` file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建永久的Android解决方案的第一步是确保系统的Linux端一切正常。这意味着所有硬件支持（例如您项目所需的Linux内核驱动程序）应该在内核中启用，并在内核的设备树中进行配置和分配（用于引脚复用和资源分配）。理想情况下，您所需的一切都将直接静态构建到内核和设备树中。这消除了通过从`init.{ro.hardware}.rc`文件中执行显式命令加载叠加和内核模块的需求。
- en: Our advice for preparing the kernel space aspects of your project is to develop
    these items from within Linux. The Linux environment provides far more tools for
    kernel driver development and debugging, and you'll be able to quickly and easily
    build standalone user space binaries that interact with custom and existing kernel
    drivers via the `open()`, `read()`, `write()`, and `ioctl()` function calls. The
    code-compile-test-debug cycle of Linux user space binaries can be performed very
    quickly because a full development toolchain, including compilers and debuggers,
    are available under Linux. Under Android, you must build such test binaries using
    the Android NDK on your development machine and then use `adb` to push them to
    an Android system for test. This makes the development cycle much slower and more
    difficult.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为准备项目的内核空间方面的建议是从Linux中开发这些项目。Linux环境提供了更多用于内核驱动程序开发和调试的工具，您将能够快速轻松地构建与自定义和现有内核驱动程序通过`open()`、`read()`、`write()`和`ioctl()`函数调用交互的独立用户空间二进制文件。Linux用户空间二进制文件的代码-编译-测试-调试周期可以非常快速地完成，因为在Linux下提供了完整的开发工具链，包括编译器和调试器。在Android下，您必须在开发机上使用Android
    NDK构建这样的测试二进制文件，然后使用`adb`将它们推送到Android系统进行测试。这使得开发周期变得更慢更困难。
- en: Developing a static Device Tree for your solution requires a similar process.
    The Device Tree and its overlays are compiled using the `dtc` tool, which is available
    under Linux, but not Android. Using standard Linux kernel debugging techniques,
    you can develop and troubleshoot an overlay that muxes the pins for your project
    and allocates the necessary kernel drivers to these pins. Once your overlay is
    working properly, you can integrate the overlay into the Device Tree permanently.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的解决方案开发静态设备树需要类似的过程。设备树及其叠加使用`dtc`工具进行编译，在Linux下可用，但在Android下不可用。使用标准的Linux内核调试技术，您可以开发和调试一个为您的项目复用引脚并为这些引脚分配必要内核驱动程序的叠加。一旦您的叠加正常工作，您可以将叠加永久集成到设备树中。
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Where can I learn more about Linux development for the BBB?**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**我在哪里可以了解更多有关BBB的Linux开发？**'
- en: There are many tutorials and resources available on the web to help you learn
    about developing Linux software and Device Tree overlays for the BBB. The best
    resource that we can recommend to you is the series of BeagleBone video tutorials
    created by Derek Molloy. These tutorials cover topics such as the setup and configuration
    of a C/C++ development environment, debugging, Device Tree overlay creation, and
    troubleshooting. They also have a variety of code and circuit examples to help
    get you started. You can watch these tutorials from the BeagleBone section of
    Derek's website at [http://derekmolloy.ie/beaglebone](http://derekmolloy.ie/beaglebone).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网络上有许多教程和资源可帮助你了解BBB的Linux软件和设备树叠加的开发。我们可以向你推荐的最佳资源是Derek Molloy创建的一系列BeagleBone视频教程。这些教程涵盖了设置和配置C/C++开发环境、调试、设备树叠加创建和故障排除等主题。它们还有各种代码和电路示例，帮助你入门。你可以从Derek网站上的BeagleBone部分观看这些教程，网址为[http://derekmolloy.ie/beaglebone](http://derekmolloy.ie/beaglebone)。
- en: Adding hardware communication into the kernel
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将硬件通信添加到内核中
- en: While interfacing directly with GPIOs and the I2C and SPI buses is convenient,
    it is not the most efficient way to interface with hardware. The I2C FRAM example
    in [Chapter 4](part0029_split_000.html#page "Chapter 4. Storing and Retrieving
    Data with I2C"), *Storing and Retrieving Data with I2C*, uses the 24c256 kernel
    driver to handle low-level details of communication with the FRAM chip. Can you
    imagine how difficult it would be to implement every single detail needed to directly
    interface with the FRAM chip? Aside from having to know every detail of the communication
    protocol between the BBB and the FRAM chip, such protocols can also require strict
    timing guarantees that are difficult or impossible to meet from user space.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 直接与GPIO和I2C和SPI总线进行接口虽然方便，但并不是与硬件进行接口的最有效方式。[第4章](part0029_split_000.html#page
    "第4章。使用I2C存储和检索数据")中的I2C FRAM示例，*使用I2C存储和检索数据*，使用24c256内核驱动程序处理与FRAM芯片的通信的低级细节。你能想象直接与FRAM芯片进行接口所需的每一个细节有多困难吗？除了必须了解BBB和FRAM芯片之间的通信协议的每一个细节之外，这些协议还可能需要严格的时间保证，这些保证在用户空间很难或不可能满足。
- en: In cases where user space interfacing with hardware is infeasible, using a kernel
    driver is necessary. Kernel drivers encapsulate the details of communicating with
    a specific piece of hardware. This simplifies your interfacing apps by keeping
    these details outside your app's implementation. Kernel drivers also provide much
    stricter timing guarantees when communicating with hardware. This is because the
    kernel has a much deeper understanding of scheduling kernel driver communication
    events to meet the necessary deadlines. In user space, a process can be suspended
    at any time if the kernel's task scheduler has decided to give another process
    an opportunity to execute. Even if a user space process priority is greatly increased,
    it will still always have a lower scheduling priority when compared to the priority
    of kernel-based activities.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户空间与硬件进行接口不可行的情况下，使用内核驱动程序是必要的。内核驱动程序封装了与特定硬件的通信细节。这通过将这些细节保持在应用程序实现之外来简化你的接口应用程序。内核驱动程序在与硬件通信时也提供了更严格的时间保证。这是因为内核对调度内核驱动程序通信事件以满足必要的截止日期有更深入的理解。在用户空间，如果内核的任务调度程序决定给另一个进程执行的机会，一个进程可以随时被挂起。即使用户空间进程的优先级大大提高，与基于内核的活动的优先级相比，它仍然始终具有较低的调度优先级。
- en: Creating a kernel driver can be quite complex, and it is an activity that is
    far outside the scope of this book. However, if you find yourself trying to meet
    very tight timing restrictions when communicating with a piece of hardware, you
    might eventually need to explore the details of kernel device driver development.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建内核驱动程序可能非常复杂，这是本书范围之外的活动。然而，如果你发现自己在与硬件通信时需要满足非常严格的时间限制，最终可能需要探索内核设备驱动程序开发的细节。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Where can I learn more about developing kernel drivers?**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**我在哪里可以了解更多关于开发内核驱动程序的知识？**'
- en: The best place to start learning about kernel driver development is the book
    *Linux Device Drivers* by Corbet, Rubini, and Kroah-Hartman. This book provides
    comprehensive instructions that walk you through the development process. Even
    better, the third edition of this book is freely available for download at [http://lwn.net/Kernel/LDD3](http://lwn.net/Kernel/LDD3).
    The third edition was originally published in 2005, so it is a bit dated, but
    the central concepts presented in the book are still valid.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 学习内核驱动程序开发的最佳起点是Corbet、Rubini和Kroah-Hartman的书籍*Linux Device Drivers*。这本书提供了全面的指导，引导你完成开发过程。更好的是，这本书的第三版可以在[http://lwn.net/Kernel/LDD3](http://lwn.net/Kernel/LDD3)免费下载。第三版最初于2005年出版，所以有点过时，但书中提出的核心概念仍然有效。
- en: Integrating into existing managers
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成到现有的管理器中
- en: In [Chapter 5](part0035_split_000.html#page "Chapter 5. Interfacing with High-speed
    Sensors Using SPI"), *Interfacing with High-speed Sensors Using SPI*, you interfaced
    with an SPI-based temperature and pressure sensor. While you communicated with
    the sensor using the `spidev` kernel driver from a single app, it is far cleaner
    to have a manager communicate with the sensor instead. This way, all apps can
    request access to the sensor data by communicating with the manager, rather than
    having to understand the many details of SPI communications and coordinating access
    among themselves. It also restricts which apps have permission to interact with
    the `spidev` driver.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0035_split_000.html#page "第5章。使用SPI接口高速传感器")中，*使用SPI接口高速传感器*，你使用了基于SPI的温度和压力传感器进行了接口。虽然你使用`spidev`内核驱动程序从一个单一的应用程序与传感器进行通信，但是通过一个管理器与传感器进行通信会更加清晰。这样，所有应用程序都可以通过与管理器进行通信来请求访问传感器数据，而不必理解SPI通信的许多细节并在它们之间协调访问。它还限制了哪些应用程序有权限与`spidev`驱动程序进行交互。
- en: 'In fact, Android already has a manager, `Android.SensorManager`, that is designed
    to talk with hardware sensor resources that are commonly found in phones and tablets.
    Apps communicate with the manager by requesting an instance of the manager and
    then requesting an object that represents a particular type of sensor:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Android已经有一个名为`Android.SensorManager`的管理器，旨在与手机和平板电脑中常见的硬件传感器资源进行通信。应用程序通过请求管理器的实例，然后请求表示特定类型传感器的对象来与管理器通信：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If `SensorManager` was extended to interface with the SPI sensor that you used
    in [Chapter 5](part0035_split_000.html#page "Chapter 5. Interfacing with High-speed
    Sensors Using SPI"), *Interfacing with High-speed Sensors Using SPI*, your app
    could have communicated with the sensor via `SensorManager` with only a few lines
    of Java code! Even better, the file system permissions of the `spidev` device
    would not have to be set to such an insecure state for apps to communicate with
    the sensor. Unfortunately, it can be quite difficult to integrate new hardware
    functionality into an existing manager for a few reasons:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`SensorManager`被扩展以与您在[第5章](part0035_split_000.html#page "第5章。使用SPI接口与高速传感器通信")中使用的SPI传感器进行接口，*使用SPI接口与高速传感器通信*，您的应用程序可以只用几行Java代码通过`SensorManager`与传感器进行通信！更好的是，`spidev`设备的文件系统权限不必设置为如此不安全的状态，以便应用程序与传感器进行通信。不幸的是，将新的硬件功能集成到现有管理器中可能会非常困难，原因有几个：
- en: You must rebuild the appropriate pieces of Android, which typically requires
    you to build the complete Android source code base at least once. This is a time-consuming
    (and often quite confusing) process for the inexperienced. The Android Open Source
    Project provides instructions on how to build Android from source at [https://source.android.com/source](https://source.android.com/source).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须重新构建Android的适当部分，通常需要至少构建一次完整的Android源代码库。对于没有经验的人来说，这是一个耗时（而且通常相当令人困惑）的过程。Android开源项目提供了有关如何从源代码构建Android的说明，网址是[https://source.android.com/source](https://source.android.com/source)。
- en: The additional interface logic for your new hardware must be added into the
    HAL of the manager that you are integrating with. While this is often fairly straightforward,
    the pieces of the manager's HAL might be scattered throughout the Android code
    base.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的新硬件的附加接口逻辑必须添加到您正在集成的管理器的HAL中。虽然这通常相当直接，但管理器的HAL的各个部分可能分散在整个Android代码库中。
- en: The new hardware must comply with the framework's API methods that are provided
    by the manager. Unless you are willing to break API compatibility to add additional
    attributes and methods to a particular manager's class, you must ensure that your
    hardware fits the existing interfaces that the manager provides.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的硬件必须符合管理器提供的框架的API方法。除非您愿意破坏API兼容性以向特定管理器的类添加额外的属性和方法，否则您必须确保您的硬件符合管理器提供的现有接口。
- en: While this integration can be difficult, it is often very straightforward. As
    Android is designed with tablets and phones in mind, any hardware that can potentially
    be part of a mobile device platform probably already has an Android manager designed
    to interface with it. `SensorManager` is a good example of this. It is designed
    to provide sensor information from a variety of different types of sensor hardware.
    While you will need to integrate some native code into the `SensorManager` HAL
    to speak with your particular sensor, the communication between the HAL and the
    `SensorManager` API methods is a fairly simple process.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种集成可能很困难，但通常非常直接。由于Android是针对平板电脑和手机设计的，任何可能成为移动设备平台一部分的硬件可能已经有了一个与之接口的Android管理器。`SensorManager`就是一个很好的例子。它旨在提供来自各种不同类型传感器硬件的传感器信息。虽然您需要将一些本机代码集成到`SensorManager`
    HAL中，以与您特定的传感器进行通信，但HAL和`SensorManager` API方法之间的通信过程是相当简单的。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Where can I find examples of integrating custom hardware into a manager**?'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪里可以找到将自定义硬件集成到管理器中的示例？
- en: Texas Instruments provides a number of **evaluation modules** (**EVMs**) for
    the various processors that they produce and sell. As many commercial products
    are based upon these processors, TI freely provides documentation and guidance
    on how to create custom HAL code that integrates common hardware into Android
    managers. The best place to begin looking for these details is the documentation
    of TI's Sitara Android SDK. The SDK's web page is located at [http://www.ti.com/tool/androidsdk-sitara](http://www.ti.com/tool/androidsdk-sitara).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 德州仪器为他们生产和销售的各种处理器提供了许多**评估模块**（**EVMs**）。由于许多商业产品都是基于这些处理器的，TI免费提供了关于如何将常见硬件集成到Android管理器的自定义HAL代码的文档和指导。开始寻找这些细节的最佳地方是TI的Sitara
    Android SDK文档。SDK的网页位于[http://www.ti.com/tool/androidsdk-sitara](http://www.ti.com/tool/androidsdk-sitara)。
- en: Creating new managers for custom hardware
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为自定义硬件创建新的管理器
- en: If you are integrating a unique piece of hardware into Android, such as the
    environment sampler you created in [Chapter 6](part0041_split_000.html#page "Chapter 6. Creating
    a Complete Interfacing Solution"), *Creating a Complete Interfacing Solution*,
    there will probably not be any standard Android manager that provides the necessary
    API methods for apps to properly communicate with the hardware. In this case,
    you might consider creating a new type of manager that specifically deals with
    the unique hardware.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要将一种独特的硬件集成到Android中，比如您在[第6章](part0041_split_000.html#page "第6章。创建完整的接口解决方案")中创建的环境采样器，*创建完整的接口解决方案*，可能不会有任何标准的Android管理器提供必要的API方法，以便应用程序能够正确地与硬件通信。在这种情况下，您可能需要考虑创建一种专门处理独特硬件的新类型管理器。
- en: A new manager can be tailored specifically to the hardware that it interacts
    with. For example, the BBB offers specialized hardware that allows software to
    communicate with the computers inside most modern vehicles. Such functionality
    is not available in standard Android mobile devices, so no exists to handle such
    communication.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 新的管理器可以专门针对其交互的硬件进行定制。例如，BBB提供了专门的硬件，允许软件与大多数现代车辆内部的计算机进行通信。这样的功能在标准的Android移动设备中是不可用的，因此没有可以处理这种通信的存在。
- en: 'Creating a new manager to handle the specific details of using this interface
    and providing a custom API to use this manager frees apps from having to know
    the details of such communication. However, this should be considered as a last
    resort for the following reasons:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的管理器来处理使用此接口的具体细节，并提供一个自定义API来使用此管理器，使应用程序不必了解这种通信的细节。然而，出于以下原因，这应该被视为最后的选择：
- en: There is no existing manager code to build upon. At best, you might find a simple
    manager from which to copy the code as a starting point.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有现有的管理器代码可供构建。最好的情况是，您可能会找到一个简单的管理器，可以将其代码作为起点进行复制。
- en: The Android build process must be modified to include building the new manager
    code. This requires adding the source files for the new manager to the Android
    makefiles and then verifying that the Android framework is not broken. Building
    Android is a large and complex task, so making any changes to the process should
    not be undertaken lightly.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android构建过程必须修改以包括构建新管理器代码。这需要将新管理器的源文件添加到Android makefiles中，然后验证Android框架没有出现问题。构建Android是一个庞大而复杂的任务，因此对过程进行任何更改都不应该轻率对待。
- en: You must design a proper API to interface with the new manager. As this new
    interface addition is not part of the standard Android API, apps will be unable
    to include these API calls unless you specifically add them to your Eclipse ADT
    installation.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须设计一个适当的API来与新的管理器进行接口。由于这个新的接口添加不是标准Android API的一部分，除非您将它们明确添加到您的Eclipse
    ADT安装中，否则应用程序将无法包含这些API调用。
- en: You must also augment `android.Manifest.permission` to include one or more new
    permission settings that allow an app to access the functionality of the new manager.
    As an alternative, you can piggyback on an existing permission or choose to forego
    using permissions entirely.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还必须增加`android.Manifest.permission`，以包括一个或多个新的权限设置，允许应用程序访问新管理器的功能。作为替代方案，您可以依附现有权限，或选择放弃完全不使用权限。
- en: 'Overall, building a custom manager is a lot of work and not for the fainthearted.
    The process touches many different pieces of the Android framework and requires
    expertise in the functionality of all of those pieces. If you find yourself in
    a position where you think you absolutely need to create a new manager to handle
    your hardware properly via the Android framework, you should consider skipping
    the manager and using an approach similar to the examples in this book: have your
    app communicate directly with your hardware using JNI.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，构建一个自定义管理器是一项艰巨的工作，不适合胆小的人。这个过程涉及到Android框架的许多不同部分，并需要对所有这些部分的功能有专业知识。如果您发现自己处于一个您认为绝对需要创建一个新的管理器来通过Android框架正确处理您的硬件的位置，您应该考虑跳过管理器，使用类似本书中示例的方法：让您的应用程序直接使用JNI与您的硬件进行通信。
- en: Combining your project with other hardware
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的项目与其他硬件结合
- en: Now that you have considered how to best modify the software side of your Android
    system to fully integrate your custom hardware project, let's look at the hardware
    side of things. Breadboards do a great job of allowing you to rapidly create and
    change your hardware project designs. Hardware and software co-design is an iterative
    process, so you might find yourself changing your hardware designs as you develop
    interfacing software. However, carrying around a breadboard to show off your hardware
    projects is far from ideal.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经考虑了如何最好地修改Android系统的软件部分，以完全整合您的自定义硬件项目，让我们来看看硬件方面的事情。面包板非常适合让您快速创建和更改硬件项目设计。硬件和软件的共同设计是一个迭代的过程，因此在开发接口软件时，您可能会发现自己需要更改硬件设计。然而，随身携带一个面包板来展示您的硬件项目远非理想。
- en: Constructing your own prototype capes
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建自己的原型披风
- en: Why not create your own custom cape board project? If you have developed the
    perfect hardware project for your Android system, you should consider making it
    a stand-alone cape board. Putting your project into a cape form factor makes it
    easy to integrate it with other cape boards. It also allows you to move your project
    from place to place without worrying about disturbing the circuit or accidentally
    disconnecting any breadboard wires.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不创建自己的自定义披风板项目呢？如果您已经为您的Android系统开发了完美的硬件项目，您应该考虑将其制作成一个独立的披风板。将您的项目放入披风形式使得它很容易与其他披风板集成。它还允许您将项目从一个地方移动到另一个地方，而不必担心干扰电路或意外断开任何面包板线路。
- en: Creating a professionally laid-out PCB for a custom cape is a very difficult
    task for the inexperienced. However, you can still construct your own cape board
    with a little soldering and planning. Adafruit's Proto Cape Kit (product ID 572)
    is a great place to start. Proto Cape is little more than a generic PCB to hold
    components that are soldered into semipermanent circuits. If you purchased the
    BeagleBone Black Starter Pack (product ID 703) that we mentioned in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. Introduction to Android and the BeagleBone Black"), *Introduction
    to Android and the BeagleBone Black*, you already have Proto Cape, as it is included
    in that kit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为自定义披风创建专业布局的PCB对于经验不足的人来说是一项非常困难的任务。然而，您仍然可以通过一点焊接和规划来构建自己的披风板。Adafruit的Proto
    Cape Kit（产品ID 572）是一个很好的起点。Proto Cape只不过是一个通用的PCB，用于容纳被焊接成半永久电路的元件。如果您购买了我们在[第1章](part0014_split_000.html#page
    "第1章。介绍Android和BeagleBone Black")中提到的BeagleBone Black入门套装（产品ID 703），*介绍Android和BeagleBone
    Black*，您已经拥有Proto Cape，因为它包含在该套装中。
- en: '![Constructing your own prototype capes](img/00031.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![构建自己的原型披风](img/00031.jpeg)'
- en: 'Proto Cape Kit for constructing semipermanent cape circuits (source: [www.adafruit.com](http://www.adafruit.com))'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Proto Cape套件用于构建半永久披风电路（来源：www.adafruit.com）
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Proto Cape also offers the important advantage of removing the breadboard wires
    that block the openings of the P8/P9 connectors. Up to four capes can be connected
    simultaneously by *stacking* the capes (plugging one cape into another via pass-through
    P8/P9 connectors on each cape). This provides the opportunity to combine different
    combinations of capes to create a custom Android system that makes the most out
    of the custom hardware that you have designed. If breadboard wires are blocking
    the P8/P9 connections, other capes can no longer be inserted into the connectors
    and stacked on top of the BBB. This makes it impossible to use a breadboard design
    if the top-most cape in the stack doesn't have a pass-through P8/P9 connector
    (like most LCD capes).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Proto Cape还提供了一个重要的优势，即去除挡住P8/P9连接器开口的面包板导线。最多可以通过*堆叠*披风（通过每个披风上的P8/P9连接器的通道连接一个披风到另一个披风）同时连接四个披风。这提供了结合不同披风组合的机会，以创建一个利用你设计的定制硬件的自定义Android系统。如果面包板导线挡住了P8/P9连接，其他披风就无法插入连接器并堆叠在BBB上。如果堆叠中最上面的披风没有通道式P8/P9连接器（大多数LCD披风都没有），那么就无法使用面包板设计。
- en: Commercial capes that interface with Android
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Android接口的商业披风
- en: There are a number of premade BBB capes that are available for purchase and
    will work well with Android. 4D Systems ([http://www.4dsystems.com.au/](http://www.4dsystems.com.au/))
    provides several different reasonably priced LCD capes of various sizes and resolutions
    that are available in both touchscreen and non-touchscreen models. BeagleBoard
    Toys ([http://www.beagleboardtoys.com/](http://www.beagleboardtoys.com/)) also
    provides a wide variety of capes, such as LCD, audio, and battery capes. By combining
    a variety of different capes with your BBB, you can turn your Android system into
    a portable Android device!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多现成的BBB披风可以购买，并且可以与Android很好地配合使用。4D Systems（http://www.4dsystems.com.au/）提供了几种不同尺寸和分辨率的价格合理的LCD披风，有触摸屏和非触摸屏型号。BeagleBoard
    Toys（http://www.beagleboardtoys.com/）还提供了各种披风，如LCD、音频和电池披风。通过将各种不同的披风与BBB结合使用，你可以将你的Android系统变成一个便携式Android设备！
- en: '![Commercial capes that interface with Android](img/00032.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![与Android接口的商业披风](img/00032.jpeg)'
- en: 'The 4DCAPE-70T (800 x 480 pixels, left) and 4DCAPE-43T (480 x 272 pixels, right)
    4D Systems touchscreen LCD capes (source: [www.4dsystems.com.au](http://www.4dsystems.com.au))'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 4D Systems触摸屏LCD披风（左边为800 x 480像素，右边为480 x 272像素）（来源：www.4dsystems.com.au）
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**What about USB devices?**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**USB设备呢？**'
- en: Other hardware components to consider are USB devices such as audio devices,
    mice, keyboards, Wi-Fi adapters, Bluetooth adapters, gamepads, and webcams. As
    the Linux kernel contains drivers for all of these devices, you can easily experiment
    with them to extend your Android platform and develop a variety of creative apps.
    The BBB only has a single USB port, though you can connect a USB hub to that port
    to support using multiple USB devices simultaneously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其他需要考虑的硬件组件包括音频设备、鼠标、键盘、Wi-Fi适配器、蓝牙适配器、游戏手柄和网络摄像头等USB设备。由于Linux内核包含所有这些设备的驱动程序，你可以轻松地尝试它们，以扩展你的Android平台并开发各种创意应用。BBB只有一个USB端口，但你可以连接一个USB集线器到该端口，以支持同时使用多个USB设备。
- en: Perhaps you can create an Android-based hand-held gaming console with GPIO controller
    inputs and an SPI- or I2C-based accelerometer. Or you can design a custom automotive
    control console with a touchscreen LCD that gathers real-time data from your vehicle.
    You have control of both the hardware and software of the entire platform, and
    the Android app development tools are excellent for creating UIs quickly and easily.
    The possibilities are endless!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你可以创建一个基于Android的手持游戏控制台，带有GPIO控制器输入和基于SPI或I2C的加速度计。或者你可以设计一个定制的汽车控制台，带有触摸屏LCD，可以从你的车辆中收集实时数据。你可以控制整个平台的硬件和软件，而且Android应用开发工具非常适合快速轻松地创建用户界面。可能性是无限的！
- en: '![Commercial capes that interface with Android](img/00033.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![与Android接口的商业披风](img/00033.jpeg)'
- en: 'The 5VDC battery (left) and audio CODEC (right) CircuitCo capes (source: [www.beagleboardtoys.com](http://www.beagleboardtoys.com))'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 5VDC电池（左）和音频CODEC（右）CircuitCo披风（来源：www.beagleboardtoys.com）
- en: Exploring the BBB's other interfaces
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索BBB的其他接口
- en: So far, we have used the BBB's GPIO, SPI, and I2C functionality for our interfacing.
    These are not the only interfacing options that the BBB offers, though. The following
    are a few other interfaces that you should keep in mind as you consider Android
    projects on the BBB.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了BBB的GPIO、SPI和I2C功能进行接口。然而，这些并不是BBB提供的唯一接口选项。以下是一些其他接口，当你考虑在BBB上进行Android项目时，你应该牢记的。
- en: Programmable real-time units
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可编程实时单元
- en: Embedded within the BBB's AM335X processor are a pair of programmable real-time
    units (PRUs). These units are clocked at 200 MHz, so they execute programs at
    the rate of a single instruction every 5 ns. The kernel loads programs into a
    PRU and then instructs the PRU to begin execution. Communication between the PRU
    and the kernel occurs via shared memory. The execution of PRUs is completely separate
    from that of the main processor, so pushing the PRUs to their limit will not have
    a performance impact on the main processor unless some coordination between the
    processor and a PRU is required.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: BBB的AM335X处理器内嵌有一对可编程实时单元（PRUs）。这些单元的时钟频率为200 MHz，因此它们以每5 ns执行一条指令的速度执行程序。内核将程序加载到PRU中，然后指示PRU开始执行。PRU与内核之间的通信通过共享内存进行。PRUs的执行完全独立于主处理器，因此将PRUs推到极限不会对主处理器产生性能影响，除非需要处理器和PRU之间的协调。
- en: There are a number of GPIO pins that can be muxed so that they fall under the
    direct control of a PRU. The PRU can check or set the value of these GPIOs on
    each instruction, meaning that PRU-controlled GPIOs can toggle fast enough to
    "bit-bang" implementations of complex digital interfaces (such as SPI and I2C).
    If you have a custom piece of hardware and need to implement a high-speed interface
    to it, using one or both of the PRUs is an option.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多GPIO引脚可以复用，使它们直接受到PRU的控制。PRU可以在每条指令中检查或设置这些GPIO的值，这意味着PRU控制的GPIO可以快速切换，以实现复杂数字接口（如SPI和I2C）的“位操作”实现。如果您有自定义的硬件，并且需要为其实现高速接口，则可以使用一个或两个PRU。
- en: Serial communications
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 串行通信
- en: The BBB offers five serial communication UARTs that can be muxed to the pins
    of the P8 and P9 connectors. There is also a sixth UART (UART0) that provides
    the serial debug output via the FTDI cable. If you are using the BBB to control
    a large number of serial-controlled devices, these UARTs are a very useful resource.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: BBB提供了五个串行通信UART，可以复用到P8和P9连接器的引脚上。还有第六个UART（UART0），通过FTDI电缆提供串行调试输出。如果您正在使用BBB控制大量串行控制设备，这些UART是非常有用的资源。
- en: Unfortunately, several of these UARTs (UARTs 3, 4, and 5) conflict with pins
    that are in use by the LCD interface bus that provides video data to LCD capes
    and the internal HDMI cape. As much of Android's strength comes from its user
    interface, disabling the LCD interface to receive more UARTs is usually a very
    poor trade-off. If you find that you absolutely need these UARTs under Android,
    all of the UARTs can be accessed using the standard Linux kernel serial driver
    and existing NDK libraries that access the `/dev/TTYS*` files in the filesystem.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，其中几个UART（UART 3、4和5）与LCD接口总线使用的引脚冲突，该接口提供视频数据给LCD capes和内部HDMI cape。由于Android的许多优势来自其用户界面，禁用LCD接口以接收更多UART通常是一个非常糟糕的权衡。如果您发现在Android下绝对需要这些UART，所有UART可以使用标准Linux内核串行驱动程序和现有的访问文件系统中的`/dev/TTYS*`文件的NDK库来访问。
- en: Controller area network
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器局域网
- en: There are two **controller area network** (**CAN**) buses on the BBB. CAN is
    a serial protocol that forms one of the five protocols used in the **on-board
    diagnostics** (**OBD**) standard for vehicle interfacing. Vehicle diagnostics
    hardware and software use CAN to communicate with the host controller of most
    modern automobiles. The CAN driver in the Linux kernel exposes each CAN bus as
    a network interface that can be communicated with via network socket programming.
    If you are interested in creating an Android device capable of communicating with
    your vehicle, such as a status display in your car or a hand-held diagnostic unit,
    the CAN bus is exactly what you need.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: BBB上有两个**控制器局域网**（**CAN**）总线。CAN是一种串行协议，是**车载诊断**（**OBD**）标准中使用的五种协议之一，用于车辆接口。车辆诊断硬件和软件使用CAN与大多数现代汽车的主控制器通信。Linux内核中的CAN驱动程序将每个CAN总线公开为可以通过网络套接字编程进行通信的网络接口。如果您有兴趣创建一个能够与您的车辆通信的Android设备，比如您车上的状态显示或手持诊断单元，CAN总线正是您需要的。
- en: The CAN0 bus is muxed to the P9.19 and P9.20 pins, which are the same pins used
    by the I2C2 bus used by the capemgr to discover the identity of any connected
    capes. Muxing the CAN1 bus to the P9.24 and P9.26 pins can conflict with I2C1
    depending upon how you have muxed your I2C channels. In general, you won't be
    able to use SPI, I2C, and CAN at the same time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: CAN0总线被复用到P9.19和P9.20引脚上，这些引脚与I2C2总线使用的引脚相同，I2C2总线用于capemgr发现任何连接的capes的身份。将CAN1总线复用到P9.24和P9.26引脚上可能会与I2C1冲突，具体取决于您如何复用I2C通道。一般来说，您将无法同时使用SPI、I2C和CAN。
- en: The analog-to-digital converter
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模数转换器
- en: The BBB isn't limited to only digital communications. It also provides an 8-channel,
    12-bit **analog-to-digital converter** (**ADC**) that allows the BBB to receive
    analog voltage levels between 0 and 1.8 V. This is useful when interacting with
    real-world sensors as well as many touchscreen displays. However, you must be
    very careful to ensure that the voltage applied to these pins never exceeds 1.8
    volts or you will damage the BBB.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: BBB不仅限于数字通信。它还提供了一个8通道、12位**模数转换器**（**ADC**），允许BBB接收0到1.8V之间的模拟电压。这在与现实世界传感器以及许多触摸屏显示器交互时非常有用。但是，您必须非常小心，确保应用到这些引脚的电压永远不要超过1.8伏特，否则会损坏BBB。
- en: Pins P9.32 through P9.40 are permanently muxed with ADC, so you are free to
    use them for your own projects. The CircuitCo and 4D Systems LCD capes with touchscreen
    support presently use ADC channels 4-7 for the touchscreen, leaving channels 0-3
    available for your use.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚P9.32到P9.40被永久复用为ADC，因此您可以将它们用于自己的项目。CircuitCo和4D Systems LCD capes目前使用ADC通道4-7来支持触摸屏，留下通道0-3供您使用。
- en: Pulse width modulation
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脉冲宽度调制
- en: The AM3359 processor on the BBB has a **Pulse Width Modulation** (**PWM**) subsystem
    that is used for the precise control of electric motors. PWM sets the period and
    duty cycle where voltage is supplied to a motor to control its rotation speed.
    The PWM subsystem contains three **Enhanced High Resolution Pulse Width Modulator**
    (**eHRPWM**) modules and an **Enhanced Quadrature Encoder Pulse** (**eQEP**) module.
    Altogether, these four modules provide eight PWM channels for driving motors.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: BBB上的AM3359处理器具有用于精确控制电动机的**脉冲宽度调制**（**PWM**）子系统。PWM设置电压供应给电动机以控制其转速的周期和占空比。PWM子系统包含三个**增强型高分辨率脉冲宽度调制器**（**eHRPWM**）模块和一个**增强型正交编码器脉冲**（**eQEP**）模块。总之，这四个模块为驱动电动机提供了八个PWM通道。
- en: While PWM is often seen in control of industrial manufacturing equipment, robotic
    servo motors, and various other mechanical systems, it can also be used to control
    the brightness of lighting and other tasks that can make use of the variable duty
    cycle of PWM to emulate power/brightness/speed levels between off and on at full
    intensity. If you are interested in controlling mechanical systems with the Android
    OS, PWM is definitely a feature of the BBB that you should explore further.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然PWM通常用于控制工业制造设备、机器人伺服电机和其他各种机械系统，但它也可以用于控制照明的亮度和其他可以利用PWM的可变占空比来模拟关闭和全强度开启之间的功率/亮度/速度级别的任务。如果您对使用Android
    OS控制机械系统感兴趣，PWM绝对是您应该进一步探索的BBB功能。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to fully integrate your custom hardware projects
    into Android on the BBB. We discussed how your custom device drivers should be
    built directly into your Linux kernel and how your custom Device Tree overlays
    should be compiled directly into the main Device Tree. This avoids having to include
    a special module and an overlay that loads commands in your `init.{ro.hardware}.rc`
    file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何将您的自定义硬件项目完全集成到BBB上的Android系统中。我们讨论了您的自定义设备驱动程序应该直接构建到您的Linux内核中，以及您的自定义设备树叠加应该直接编译到主设备树中。这样可以避免在`init.{ro.hardware}.rc`文件中加载命令的特殊模块和叠加。
- en: We also explored how to customize the standard Android software framework to
    include support for your custom hardware projects. Existing Android managers can
    be extended to support custom hardware.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了如何定制标准的Android软件框架，以支持您的自定义硬件项目。现有的Android管理器可以扩展以支持自定义硬件。
- en: We looked at making your custom hardware design semipermanent using Proto Cape.
    This allows you to avoid accidentally disconnecting breadboard wires when moving
    your project around. It also allows for easier integration with commercially available
    BBB capes by avoiding the problem of blocking the P8/P9 connectors with breadboard
    wires. We also mentioned that there are many types of USB devices that are also
    supported by Android and are worth exploring when considering new projects.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了如何使用Proto Cape使您的自定义硬件设计半永久化。这样可以避免在移动项目时意外断开面包板导线。它还可以更容易地与商用BBB Cape集成，避免用面包板导线阻塞P8/P9连接器的问题。我们还提到，在考虑新项目时，许多类型的USB设备也受到Android支持，值得探索。
- en: Finally, we explored some of the other BBB interfaces that were not covered
    by the examples in the earlier chapters of this book. The BBB's PRUs, serial UARTs,
    CAN buses, ADCs, and PWM subsystems all offer additional functionality to interface
    with the outside world.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探索了一些在本书早期章节中未涵盖的BBB接口。BBB的PRU、串行UART、CAN总线、ADC和PWM子系统都提供了额外的功能，可以与外部世界进行接口。
