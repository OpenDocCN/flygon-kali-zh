["```java\n    public class PrintQueue {\n    ```", "```java\n      private final Semaphore semaphore;\n    ```", "```java\n      public PrintQueue(){\n        semaphore=new Semaphore(1);\n      }\n    ```", "```java\n      public void printJob (Object document){\n    ```", "```java\n        try {\n          semaphore.acquire();\n    ```", "```java\n      long duration=(long)(Math.random()*10);\n          System.out.printf(\"%s: PrintQueue: Printing a Job during %d seconds\\n\",Thread.currentThread().getName(),duration);\n          Thread.sleep(duration);    \n    ```", "```java\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n          semaphore.release();      \n        }\n    ```", "```java\n    public class Job implements Runnable {\n    ```", "```java\n      private PrintQueue printQueue;\n    ```", "```java\n      public Job(PrintQueue printQueue){\n        this.printQueue=printQueue;\n      }\n    ```", "```java\n      @Override\n       public void run() {\n    ```", "```java\n        System.out.printf(\"%s: Going to print a job\\n\",Thread.currentThread().getName());\n    ```", "```java\n        printQueue.printJob(new Object());\n    ```", "```java\n        System.out.printf(\"%s: The document has been printed\\n\",Thread.currentThread().getName());        \n      }\n    ```", "```java\n    public class Main {\n\n      public static void main (String args[]){\n    ```", "```java\n        PrintQueue printQueue=new PrintQueue();\n    ```", "```java\n        Thread thread[]=new Thread[10];\n        for (int i=0; i<10; i++){\n          thread[i]=new Thread(new Job(printQueue),\"Thread\"+i);\n        }\n    ```", "```java\n        for (int i=0; i<10; i++){\n          thread[i].start();\n        }\n    ```", "```java\n      private boolean freePrinters[];\n    ```", "```java\n      private Lock lockPrinters;\n    ```", "```java\n      public PrintQueue(){\n        semaphore=new Semaphore(3);\n        freePrinters=new boolean[3];\n        for (int i=0; i<3; i++){\n          freePrinters[i]=true;\n        }\n        lockPrinters=new ReentrantLock();\n      }\n    ```", "```java\n      public void printJob (Object document){\n    ```", "```java\n        try {\n          semaphore.acquire();\n    ```", "```java\n          int assignedPrinter=getPrinter();\n    ```", "```java\n          long duration=(long)(Math.random()*10);\n          System.out.printf(\"%s: PrintQueue: Printing a Job in Printer%d during %d seconds\\n\",Thread.currentThread().getName(),assignedPrinter,duration);\n          TimeUnit.SECONDS.sleep(duration);\n    ```", "```java\n          freePrinters[assignedPrinter]=true;\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } finally {\n          semaphore.release();      \n        }\n    ```", "```java\n      private int getPrinter() {\n    ```", "```java\n        int ret=-1;\n    ```", "```java\n        try {\n          lockPrinters.lock();\n    ```", "```java\n        for (int i=0; i<freePrinters.length; i++) {\n          if (freePrinters[i]){\n            ret=i;\n            freePrinters[i]=false;\n            break;\n          }\n        }\n    ```", "```java\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          lockPrinters.unlock();\n        }\n        return ret;\n    ```", "```java\n    public class Videoconference implements Runnable{\n    ```", "```java\n      private final CountDownLatch controller;\n    ```", "```java\n      public Videoconference(int number) {\n        controller=new CountDownLatch(number);\n      }\n    ```", "```java\n      public void arrive(String name){\n    ```", "```java\n        System.out.printf(\"%s has arrived.\",name);\n    ```", "```java\n        controller.countDown();\n    ```", "```java\n        System.out.printf(\"VideoConference: Waiting for %d participants.\\n\",controller.getCount());\n    ```", "```java\n       @Override\n      public void run() {\n    ```", "```java\n        System.out.printf(\"VideoConference: Initialization: %d participants.\\n\",controller.getCount());\n    ```", "```java\n        try {\n          controller.await();\n    ```", "```java\n          System.out.printf(\"VideoConference: All the participants have come\\n\");\n          System.out.printf(\"VideoConference: Let's start...\\n\");\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n    public class Participant implements Runnable {\n    ```", "```java\n      private Videoconference conference;\n    ```", "```java\n      private String name;\n    ```", "```java\n      public Participant(Videoconference conference, String name) {\n        this.conference=conference;\n        this.name=name;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n    ```", "```java\n        long duration=(long)(Math.random()*10);\n        try {\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        conference.arrive(name);\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        Videoconference conference=new Videoconference(10);\n    ```", "```java\n        Thread threadConference=new Thread(conference);\n        threadConference.start();\n    ```", "```java\n        for (int i=0; i<10; i++){\n          Participant p=new Participant(conference, \"Participant \"+i);\n          Thread t=new Thread(p);\n          t.start();\n        }\n    ```", "```java\n    public class MatrixMock {\n    ```", "```java\n      private int data[][];\n    ```", "```java\n      public MatrixMock(int size, int length, int number){\n    ```", "```java\n        int counter=0;\n        data=new int[size][length];\n        Random random=new Random();\n    ```", "```java\n        for (int i=0; i<size; i++) {\n          for (int j=0; j<length; j++){\n            data[i][j]=random.nextInt(10);\n            if (data[i][j]==number){\n              counter++;\n            }\n          }\n        }\n    ```", "```java\n        System.out.printf(\"Mock: There are %d ocurrences of number in generated data.\\n\",counter,number);\n    ```", "```java\n      public int[] getRow(int row){\n        if ((row>=0)&&(row<data.length)){\n          return data[row];\n        }\n        return null;\n      }\n    ```", "```java\n    public class Results {\n    ```", "```java\n      private int data[];\n    ```", "```java\n      public Results(int size){\n        data=new int[size];\n      }\n    ```", "```java\n      public void  setData(int position, int value){\n        data[position]=value;\n      }\n    ```", "```java\n      public int[] getData(){\n        return data;\n      }\n    ```", "```java\n    public class Searcher implements Runnable {\n    ```", "```java\n      private int firstRow;\n\n      private int lastRow;\n    ```", "```java\n      private MatrixMock mock;\n    ```", "```java\n      private Results results;\n    ```", "```java\n      private int number;\n    ```", "```java\n      private final CyclicBarrier barrier;\n    ```", "```java\n      public Searcher(int firstRow, int lastRow, NumberMock mock, Results results, int number, CyclicBarrier barrier){\n        this.firstRow=firstRow;\n        this.lastRow=lastRow;\n        this.mock=mock;\n        this.results=results;\n        this.number=number;\n        this.barrier=barrier;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        int counter;\n    ```", "```java\n        System.out.printf(\"%s: Processing lines from %d to %d.\\n\",Thread.currentThread().getName(),firstRow,lastRow);\n    ```", "```java\n        for (int i=firstRow; i<lastRow; i++){\n          int row[]=mock.getRow(i);\n          counter=0;\n          for (int j=0; j<row.length; j++){\n            if (row[j]==number){\n              counter++;\n            }\n          }\n          results.setData(i, counter);\n        }\n    ```", "```java\n        System.out.printf(\"%s: Lines processed.\\n\",Thread.currentThread().getName());        \n    ```", "```java\n        try {\n          barrier.await();\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        } catch (BrokenBarrierException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n    public class Grouper implements Runnable {\n    ```", "```java\n      private Results results;\n    ```", "```java\n      public Grouper(Results results){\n        this.results=results;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n    ```", "```java\n        int finalResult=0;\n        System.out.printf(\"Grouper: Processing results...\\n\");\n    ```", "```java\n        int data[]=results.getData();\n        for (int number:data){\n          finalResult+=number;\n        }\n    ```", "```java\n        System.out.printf(\"Grouper: Total result: %d.\\n\",finalResult);\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        final int ROWS=10000;\n        final int NUMBERS=1000;\n        final int SEARCH=5; \n        final int PARTICIPANTS=5;\n        final int LINES_PARTICIPANT=2000;\n    ```", "```java\n        MatrixMock mock=new MatrixMock(ROWS, NUMBERS,SEARCH);\n    ```", "```java\n        Results results=new Results(ROWS);\n    ```", "```java\n        Grouper grouper=new Grouper(results);\n    ```", "```java\n        CyclicBarrier barrier=new CyclicBarrier(PARTICIPANTS,grouper);\n    ```", "```java\n        Searcher searchers[]=new Searcher[PARTICIPANTS];\n        for (int i=0; i<PARTICIPANTS; i++){\n          searchers[i]=new Searcher(i*LINES_PARTICIPANT, (i*LINES_PARTICIPANT)+LINES_PARTICIPANT, mock, results, 5,barrier);\n          Thread thread=new Thread(searchers[i]);\n          thread.start();\n        }\n        System.out.printf(\"Main: The main thread has finished.\\n\");\n    ```", "```java\n    public class FileSearch implements Runnable {\n    ```", "```java\n      private String initPath;\n    ```", "```java\n      private String end;\n    ```", "```java\n      private List<String> results;\n    ```", "```java\n      private Phaser phaser;\n    ```", "```java\n      public FileSearch(String initPath, String end, Phaser phaser) {\n        this.initPath = initPath;\n        this.end = end;\n        this.phaser=phaser;\n        results=new ArrayList<>();\n      }\n    ```", "```java\n      private void directoryProcess(File file) {\n\n        File list[] = file.listFiles();\n        if (list != null) {\n          for (int i = 0; i < list.length; i++) {\n            if (list[i].isDirectory()) {\n              directoryProcess(list[i]);\n            } else {\n              fileProcess(list[i]);\n            }\n          }\n        }\n      }\n    ```", "```java\n      private void fileProcess(File file) {\n        if (file.getName().endsWith(end)) {\n          results.add(file.getAbsolutePath());\n        }\n      }\n    ```", "```java\n      private void filterResults() {\n        List<String> newResults=new ArrayList<>();\n        long actualDate=new Date().getTime();\n    ```", "```java\n        for (int i=0; i<results.size(); i++){\n          File file=new File(results.get(i));\n          long fileDate=file.lastModified();\n\n    ```", "```java\n          if (actualDate-fileDate< TimeUnit.MILLISECONDS.convert(1,TimeUnit.DAYS)){\n            newResults.add(results.get(i));\n          }\n        }\n    ```", "```java\n        results=newResults;\n      }\n    ```", "```java\n      private boolean checkResults() {\n    ```", "```java\n      if (results.isEmpty()) {\n          System.out.printf(\"%s: Phase %d: 0 results.\\n\",Thread.currentThread().getName(),phaser.getPhase());\n          System.out.printf(\"%s: Phase %d: End.\\n\",Thread.currentThread().getName(),phaser.getPhase());\n          phaser.arriveAndDeregister();\n          return false;\n    ```", "```java\n        } else {\n        System.out.printf(\"%s: Phase %d: %d results.\\n\",Thread.currentThread().getName(),phaser.getPhase(),results.size());\n          phaser.arriveAndAwaitAdvance();\n          return true;\n        }    \n      }\n    ```", "```java\n      private void showInfo() {\n        for (int i=0; i<results.size(); i++){\n          File file=new File(results.get(i));\n          System.out.printf(\"%s: %s\\n\",Thread.currentThread().getName(),file.getAbsolutePath());\n        }\n        phaser.arriveAndAwaitAdvance();\n      }\n    ```", "```java\n       @Override\n      public void run() {\n\n        phaser.arriveAndAwaitAdvance();\n    ```", "```java\n        System.out.printf(\"%s: Starting.\\n\",Thread.currentThread().getName());\n    ```", "```java\n        File file = new File(initPath);\n        if (file.isDirectory()) {\n          directoryProcess(file);\n        }\n    ```", "```java\n        if (!checkResults()){\n          return;\n        }\n    ```", "```java\n        filterResults();\n    ```", "```java\n        if (!checkResults()){\n          return;\n        }\n    ```", "```java\n        showInfo();\n        phaser.arriveAndDeregister();\n        System.out.printf(\"%s: Work completed.\\n\",Thread.currentThread().getName());\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        Phaser phaser=new Phaser(3);\n    ```", "```java\n        FileSearch system=new FileSearch(\"C:\\\\Windows\", \"log\", phaser);\n        FileSearch apps=\n    new FileSearch(\"C:\\\\Program Files\",\"log\",phaser);\n        FileSearch documents=\n    new FileSearch(\"C:\\\\Documents And Settings\",\"log\",phaser);\n    ```", "```java\n        Thread systemThread=new Thread(system,\"System\");\n        systemThread.start();\n    ```", "```java\n        Thread appsThread=new Thread(apps,\"Apps\");\n        appsThread.start();\n    ```", "```java\n        Thread documentsThread=new Thread(documents, \"Documents\");\n        documentsThread.start();\n    ```", "```java\n        try {\n          systemThread.join();\n          appsThread.join();\n          documentsThread.join();\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n        System.out.println(\"Terminated: \"+ phaser.isTerminated());\n    ```", "```java\n    public class MyPhaser extends Phaser {\n    ```", "```java\n       @Override\n      protected boolean onAdvance(int phase, int registeredParties) {\n        switch (phase) {\n        case 0:\n          return studentsArrived();\n        case 1:\n          return finishFirstExercise();\n        case 2:\n          return finishSecondExercise();\n        case 3:\n          return finishExam();\n        default:\n          return true;\n        }\n      }\n    ```", "```java\n      private boolean studentsArrived() {\n        System.out.printf(\"Phaser: The exam are going to start. The students are ready.\\n\");\n        System.out.printf(\"Phaser: We have %d students.\\n\",getRegisteredParties());\n        return false;\n      }\n    ```", "```java\n      private boolean finishFirstExercise() {\n        System.out.printf(\"Phaser: All the students have finished the first exercise.\\n\");\n        System.out.printf(\"Phaser: It's time for the second one.\\n\");\n        return false;\n      }\n    ```", "```java\n      private boolean finishSecondExercise() {\n        System.out.printf(\"Phaser: All the students have finished the second exercise.\\n\");\n        System.out.printf(\"Phaser: It's time for the third one.\\n\");\n        return false;\n      }\n    ```", "```java\n      private boolean finishExam() {\n        System.out.printf(\"Phaser: All the students have finished the exam.\\n\");\n        System.out.printf(\"Phaser: Thank you for your time.\\n\");\n        return true;\n      }\n    ```", "```java\n    public class Student implements Runnable {\n    ```", "```java\n      private Phaser phaser;\n    ```", "```java\n      public Student(Phaser phaser) {\n        this.phaser=phaser;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n    ```", "```java\n        System.out.printf(\"%s: Has arrived to do the exam. %s\\n\",Thread.currentThread().getName(),new Date());\n        phaser.arriveAndAwaitAdvance();\n    ```", "```java\n        System.out.printf(\"%s: Is going to do the first exercise. %s\\n\",Thread.currentThread().getName(),new Date());\n        doExercise1();\n        System.out.printf(\"%s: Has done the first exercise. %s\\n\",Thread.currentThread().getName(),new Date());\n        phaser.arriveAndAwaitAdvance();\n    ```", "```java\n        System.out.printf(\"%s: Is going to do the second exercise. %s\\n\",Thread.currentThread().getName(),new Date());\n        doExercise2();\n        System.out.printf(\"%s: Has done the second exercise. %s\\n\",Thread.currentThread().getName(),new Date());\n        phaser.arriveAndAwaitAdvance();\n        System.out.printf(\"%s: Is going to do the third exercise. %s\\n\",Thread.currentThread().getName(),new Date());\n        doExercise3();\n        System.out.printf(\"%s: Has finished the exam. %s\\n\",Thread.currentThread().getName(),new Date());\n        phaser.arriveAndAwaitAdvance();\n    ```", "```java\n      private void doExercise1() {\n        try {\n          long duration=(long)(Math.random()*10);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n    ```", "```java\n      private void doExercise2() {\n        try {\n          long duration=(long)(Math.random()*10);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n    ```", "```java\n      private void doExercise3() {\n        try {\n          long duration=(long)(Math.random()*10);\n          TimeUnit.SECONDS.sleep(duration);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        MyPhaser phaser=new MyPhaser();\n    ```", "```java\n        Student students[]=new Student[5];\n        for (int i=0; i<students.length; i++){\n          students[i]=new Student(phaser);\n          phaser.register();\n        }\n    ```", "```java\n        Thread threads[]=new Thread[students.length];\n        for (int i=0; i<students.length; i++){\n          threads[i]=new Thread(students[i],\"Student \"+i);\n          threads[i].start();\n        }\n    ```", "```java\n        for (int i=0; i<threads.length; i++){\n          try {\n            threads[i].join();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        System.out.printf(\"Main: The phaser has finished: %s.\\n\",phaser.isTerminated());\n    ```", "```java\n    public class Producer implements Runnable {\n    ```", "```java\n      private List<String> buffer;\n    ```", "```java\n      private final Exchanger<List<String>> exchanger;\n    ```", "```java\n      public Producer (List<String> buffer, Exchanger<List<String>> exchanger){\n        this.buffer=buffer;\n        this.exchanger=exchanger;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        int cycle=1;\n\n        for (int i=0; i<10; i++){\n          System.out.printf(\"Producer: Cycle %d\\n\",cycle);\n    ```", "```java\n          for (int j=0; j<10; j++){\n            String message=\"Event \"+((i*10)+j);\n            System.out.printf(\"Producer: %s\\n\",message);\n            buffer.add(message);\n          }\n    ```", "```java\n          try {\n            buffer=exchanger.exchange(buffer);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n          System.out.println(\"Producer: \"+buffer.size());\n          cycle++;\n        }\n    ```", "```java\n    public class Consumer implements Runnable {\n    ```", "```java\n      private List<String> buffer;\n    ```", "```java\n      private final Exchanger<List<String>> exchanger;\n    ```", "```java\n      public Consumer(List<String> buffer, Exchanger<List<String>> exchanger){\n        this.buffer=buffer;\n        this.exchanger=exchanger;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        int cycle=1;\n\n        for (int i=0; i<10; i++){\n          System.out.printf(\"Consumer: Cycle %d\\n\",cycle);\n    ```", "```java\n          try {\n            buffer=exchanger.exchange(buffer);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n    ```", "```java\n          System.out.println(\"Consumer: \"+buffer.size());\n\n          for (int j=0; j<10; j++){\n            String message=buffer.get(0);\n            System.out.println(\"Consumer: \"+message);\n            buffer.remove(0);\n          }\n\n          cycle++;\n        }\n    ```", "```java\n    public class Core {\n\n      public static void main(String[] args) {\n    ```", "```java\n        List<String> buffer1=new ArrayList<>();\n        List<String> buffer2=new ArrayList<>();\n    ```", "```java\n        Exchanger<List<String>> exchanger=new Exchanger<>();\n    ```", "```java\n        Producer producer=new Producer(buffer1, exchanger);\n        Consumer consumer=new Consumer(buffer2, exchanger);\n    ```", "```java\n        Thread threadProducer=new Thread(producer);\n        Thread threadConsumer=new Thread(consumer);\n\n        threadProducer.start();\n        threadConsumer.start();\n    ```"]