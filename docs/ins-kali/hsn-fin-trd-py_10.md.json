["```py\npip install yahoofinancials\n```", "```py\nfrom yahoofinancials import YahooFinancials\n```", "```py\n    aapl = yf.Ticker(\"AAPL\")\n    ```", "```py\n    hist = aapl.get_historical_price_data('2020-01-01', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'2020-12-31', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'daily')\n    print(hist)\n    ```", "```py\n    {'AAPL': {'eventsData': {'dividends': {'2020-02-07': {'amount': 0.1925, 'date': 1581085800, 'formatted_date': '2020-02-07'}, '2020-05-08': {'amount': 0.205, 'date': 1588944600, 'formatted_date': '2020-05-08'}, '2020-08-07': {'amount': 0.205, 'date': 1596807000, 'formatted_date': '2020-08-07'}, '2020-11-06': {'amount': 0.205, 'date': 1604673000, 'formatted_date': '2020-11-06'}}, 'splits': {'2020-08-31': {'date': 1598880600, 'numerator': 4, 'denominator': 1, 'splitRatio': '4:1', 'formatted_date': '2020-08-31'}}}, 'firstTradeDate': {'formatted_date': '1980-12-12', 'date': 345479400}, 'currency': 'USD', 'instrumentType': 'EQUITY', 'timeZone': {'gmtOffset': -18000}, 'prices': [{'date': 1577975400, 'high': 75.1500015258789, 'low': 73.79750061035156, 'open': 74.05999755859375, 'close': 75.0875015258789, 'volume': 135480400, 'adjclose': 74.4446029663086, 'formatted_date': '2020-01-02'}, {'date': 1578061800, 'high': 75.1449966430664, 'low': 74.125, 'open': 74.2874984741211, 'close': 74.35749816894531, 'volume': 146322800, 'adjclose': 73.72084045410156, 'formatted_date': '2020-01-03'}, {'date': 1578321000, 'high': 74.98999786376953, 'low': 73.1875, 'open': 73.44750213623047, 'close': 74.94999694824219, 'volume': 118387200, 'adjclose': 74.30826568603516, 'formatted_date': '2020-01-06'}, {'date': 1578407400, 'high': 75.2249984741211, 'low': 74.37000274658203, 'open': 74.95999908447266, 'close': 74.59750366210938, 'volume': 108872000, 'adjclose': 73.95879364013672, 'formatted_date': '2020-01-07'}, {'date': 1578493800, 'high': 76.11000061035156, 'low': 74.29000091552734, 'open': 74.29000091552734, 'close': 75.79750061035156, 'volume': 132079200, 'adjclose': 75.14852142333984, 'formatted_date': '2020-01-08'}, {'date': 1578580200, 'high': 77.60749816894531, 'low': 76.55000305175781, 'open': 76.80999755859375, 'close': 77.40750122070312, 'volume': 170108400, 'adjclose': 76.7447280883789, 'formatted_date': '2020-01-09'}, {'date': 1578666600, 'high': 78.1675033569336, 'low': 77.0625, 'open': 77.6500015258789, 'close': 77.5824966430664, 'volume': 140644800, 'adjclose': 76.91822052001953, 'formatted_date': '2020-01-10'}, {'date': 1578925800, 'high': 79.26750183105469, 'low': 77.7874984741211, 'open': 77.91000366210938, 'close': 79.23999786376953, 'volume': 121532000, 'adjclose': 78.56153106689453, 'formatted_date': '2020-01-13'}, {'date': 1579012200, 'high': 79.39250183105469, 'low': 78.0425033569336, 'open': 79.17500305175781, 'close': 78.16999816894531, 'volume': 161954400, 'adjclose': 77.50070190429688, 'formatted_date': '2020-01-14'}, {'date': 1579098600, 'high': 78.875, 'low': 77.38749694824219, 'open': 77.9625015258789, 'close': 77.83499908447266, 'volume': 121923600, 'adjclose': 77.16856384277344, 'formatted_date': '2020-01-15'}, {'date': 1579185000, 'high': 78.92500305175781, 'low': 78.02249908447266, 'open': 78.39749908447266, 'close': 78.80999755859375, 'volume': 108829200, 'adjclose': 78.13522338867188, 'formatted_date': '2020-01-16'}, {'date': 1579271400, 'high': 79.68499755859375, 'low': 78.75, 'open': 79.06749725341797, 'close': 79.68250274658203, 'volume': 137816400, 'adjclose': 79.000244140625, 'formatted_date': '2020-01-17'}, {'date': 1579617000, 'high': 79.75499725341797, 'low': 79.0, 'open': 79.29750061035156, 'close': 79.14250183105469, 'volume': 110843200, 'adjclose': 78.46488189697266, 'formatted_date': '2020-01-21'}, {'date': 1579703400, 'high': 79.99749755859375, 'low': 79.32749938964844, 'open': 79.6449966430664, 'close': 79.42500305175781, 'volume': 101832400, 'adjclose': 78.74495697021484, 'formatted_date': '2020-01-22'}, ... \n    ```", "```py\n    hist = aapl.get_historical_price_data('2020-01-01', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'2020-12-31', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'weekly')\n    print(hist)\n    ```", "```py\n    {'AAPL': {'eventsData': {'dividends': {'2020-02-05': {'amount': 0.1925, 'date': 1581085800, 'formatted_date': '2020-02-07'}, '2020-05-06': {'amount': 0.205, 'date': 1588944600, 'formatted_date': '2020-05-08'}, '2020-08-05': {'amount': 0.205, 'date': 1596807000, 'formatted_date': '2020-08-07'}, '2020-11-04': {'amount': 0.205, 'date': 1604673000, 'formatted_date': '2020-11-06'}}, 'splits': {'2020-08-26': {'date': 1598880600, 'numerator': 4, 'denominator': 1, 'splitRatio': '4:1', 'formatted_date': '2020-08-31'}}}, 'firstTradeDate': {'formatted_date': '1980-12-12', 'date': 345479400}, 'currency': 'USD', 'instrumentType': 'EQUITY', 'timeZone': {'gmtOffset': -18000}, 'prices': [{'date': 1577854800, 'high': 75.2249984741211, 'low': 73.1875, 'open': 74.05999755859375, 'close': 74.59750366210938, 'volume': 509062400, 'adjclose': 73.95879364013672, 'formatted_date': '2020-01-01'}, {'date': 1578459600, 'high': 79.39250183105469, 'low': 74.29000091552734, 'open': 74.29000091552734, 'close': 78.16999816894531, 'volume': 726318800, 'adjclose': 77.50070190429688, 'formatted_date': '2020-01-08'}, {'date': 1579064400, 'high': 79.75499725341797, 'low': 77.38749694824219, 'open': 77.9625015258789, 'close': 79.14250183105469, 'volume': 479412400, 'adjclose': 78.46488189697266, 'formatted_date': '2020-01-15'}, {'date': 1579669200, 'high': 80.8324966430664, 'low': 76.22000122070312, 'open': 79.6449966430664, 'close': 79.42250061035156, 'volume': 677016000, 'adjclose': 78.74247741699219, 'formatted_date': '2020-01-22'}, {'date': 1580274000, 'high': 81.9625015258789, 'low': 75.55500030517578, 'open': 81.11250305175781, 'close': 79.7125015258789, 'volume': 853162800, 'adjclose': 79.02999877929688, 'formatted_date': '2020-01-29'}, {'date': 1580878800, 'high': 81.30500030517578, 'low': 78.4625015258789, 'open': 80.87999725341797, 'close': 79.90249633789062, 'volume': 545608400, 'adjclose': 79.21836853027344, 'formatted_date': '2020-02-05'}, {'date': 1581483600, 'high': 81.80500030517578, 'low': 78.65249633789062, 'open': 80.36750030517578, 'close': 79.75, 'volume': 441122800, 'adjclose': 79.25482177734375, 'formatted_date': '2020-02-12'}, {'date': 1582088400, 'high': 81.1624984741211, 'low': 71.53250122070312, 'open': 80.0, 'close': 72.0199966430664, 'volume': 776972800, 'adjclose': 71.57282257080078, 'formatted_date': '2020-02-19'}, {'date': 1582693200, 'high': 76.0, 'low': 64.09249877929688, 'open': 71.63249969482422, 'close': 72.33000183105469, 'volume': 1606418000, 'adjclose': 71.88089752197266, 'formatted_date': '2020-02-26'}, {'date': 1583298000, 'high': 75.8499984741211, 'low': 65.75, 'open': 74.11000061035156, 'close': 71.33499908447266, 'volume': 1204962800, 'adjclose': 70.89207458496094, 'formatted_date': '2020-03-04'}, {'date': 1583899200, 'high': 70.3050003051757 ...\n    ```", "```py\n    hist = aapl.get_historical_price_data('2020-01-01', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'2020-12-31', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'monthly')\n    print(hist)\n    ```", "```py\n    {'AAPL': {'eventsData': {'dividends': {'2020-05-01': {'amount': 0.205, 'date': 1588944600, 'formatted_date': '2020-05-08'}, '2020-08-01': {'amount': 0.205, 'date': 1596807000, 'formatted_date': '2020-08-07'}, '2020-02-01': {'amount': 0.1925, 'date': 1581085800, 'formatted_date': '2020-02-07'}, '2020-11-01': {'amount': 0.205, 'date': 1604673000, 'formatted_date': '2020-11-06'}}, 'splits': {'2020-08-01': {'date': 1598880600, 'numerator': 4, 'denominator': 1, 'splitRatio': '4:1', 'formatted_date': '2020-08-31'}}}, 'firstTradeDate': {'formatted_date': '1980-12-12', 'date': 345479400}, 'currency': 'USD', 'instrumentType': 'EQUITY', 'timeZone': {'gmtOffset': -18000}, 'prices': [{'date': 1577854800, 'high': 81.9625015258789, 'low': 73.1875, 'open': 74.05999755859375, 'close': 77.37750244140625, 'volume': 2934370400, 'adjclose': 76.7149887084961, 'formatted_date': '2020-01-01'}, {'date': 1580533200, 'high': 81.80500030517578, 'low': 64.09249877929688, 'open': 76.07499694824219, 'close': 68.33999633789062, 'volume': 3019851200, 'adjclose': 67.75486755371094, 'formatted_date': '2020-02-01'}, {'date': 1583038800, 'high': 76.0, 'low': 53.15250015258789, 'open': 70.56999969482422, 'close': 63 ...\n    ```", "```py\n    import pandas as pd\n    hist_df = \\\n    pd.DataFrame(hist['AAPL']['prices']).drop('date', axis=1).set_index('formatted_date')\n    print(hist_df)\n    ```", "```py\nprint(aapl.get_stock_price_data())\n```", "```py\n{'AAPL': {'quoteSourceName': 'Nasdaq Real Time Price', 'regularMarketOpen': 137.35, 'averageDailyVolume3Month': 107768827, 'exchange': 'NMS', 'regularMarketTime': '2021-02-06 03:00:02 UTC+0000', 'volume24Hr': None, 'regularMarketDayHigh': 137.41, 'shortName': 'Apple Inc.', 'averageDailyVolume10Day': 115373562, 'longName': 'Apple Inc.', 'regularMarketChange': -0.42500305, 'currencySymbol': '$', 'regularMarketPreviousClose': 137.185, 'postMarketTime': '2021-02-06 06:59:58 UTC+0000', 'preMarketPrice': None, 'exchangeDataDelayedBy': 0, 'toCurrency': None, 'postMarketChange': -0.0800018, 'postMarketPrice': 136.68, 'exchangeName': 'NasdaqGS', 'preMarketChange': None, 'circulatingSupply': None, 'regularMarketDayLow': 135.86, 'priceHint': 2, 'currency': 'USD', 'regularMarketPrice': 136.76, 'regularMarketVolume': 72317009, 'lastMarket': None, 'regularMarketSource': 'FREE_REALTIME', 'openInterest': None, 'marketState': 'CLOSED', 'underlyingSymbol': None, 'marketCap': 2295940513792, 'quoteType': 'EQUITY', 'volumeAllCurrencies': None, 'postMarketSource': 'FREE_REALTIME', 'strikePrice': None, 'symbol': 'AAPL', 'postMarketChangePercent': -0.00058498, 'preMarketSource': 'FREE_REALTIME', 'maxAge': 1, 'fromCurrency': None, 'regularMarketChangePercent': -0.0030980287}}\n```", "```py\nstatements = aapl.get_financial_stmts('quarterly', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['income', 'cash', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'balance'])\nprint(statements)\n```", "```py\n{'incomeStatementHistoryQuarterly': {'AAPL': [{'2020-12-26': {'researchDevelopment': 5163000000, 'effectOfAccountingCharges': None, 'incomeBeforeTax': 33579000000, 'minorityInterest': None, 'netIncome': 28755000000, 'sellingGeneralAdministrative': 5631000000, 'grossProfit': 44328000000, 'ebit': 33534000000, 'operatingIncome': 33534000000, 'otherOperatingExpenses': None, 'interestExpense': -638000000, 'extraordinaryItems': None, 'nonRecurring': None, 'otherItems': None, 'incomeTaxExpense': 4824000000, 'totalRevenue': 111439000000, 'totalOperatingExpenses': 77905000000, 'costOfRevenue': 67111000000, 'totalOtherIncomeExpenseNet': 45000000, 'discontinuedOperations': None, 'netIncomeFromContinuingOps': 28755000000, 'netIncomeApplicableToCommonShares': 28755000000}}, {'2020-09-26': {'researchDevelopment': 4978000000, 'effectOfAccountingCharges': None, 'incomeBeforeTax': 14901000000, 'minorityInterest': None, 'netIncome': 12673000000, 'sellingGeneralAdministrative': 4936000000, 'grossProfit': ...\n```", "```py\nprint(aapl.get_summary_data())\n```", "```py\n{'AAPL': {'previousClose': 137.185, 'regularMarketOpen': 137.35, 'twoHundredDayAverage': 119.50164, 'trailingAnnualDividendYield': 0.0058825673, 'payoutRatio': 0.2177, 'volume24Hr': None, 'regularMarketDayHigh': 137.41, 'navPrice': None, 'averageDailyVolume10Day': 115373562, 'totalAssets': None, 'regularMarketPreviousClose': 137.185, 'fiftyDayAverage': 132.86455, 'trailingAnnualDividendRate': 0.807, 'open': 137.35, 'toCurrency': None, 'averageVolume10days': 115373562, 'expireDate': '-', 'yield': None, 'algorithm': None, 'dividendRate': 0.82, 'exDividendDate': '2021-02-05', 'beta': 1.267876, 'circulatingSupply': None, 'startDate': '-', 'regularMarketDayLow': 135.86, 'priceHint': 2, 'currency': 'USD', 'trailingPE': 37.092484, 'regularMarketVolume': 72317009, 'lastMarket': None, 'maxSupply': None, 'openInterest': None, 'marketCap': 2295940513792, 'volumeAllCurrencies': None, 'strikePrice': None, 'averageVolume': 107768827, 'priceToSalesTrailing12Months': 7.805737, 'dayLow': 135.86, 'ask': 136.7, 'ytdReturn': None, 'askSize': 1100, 'volume': 72317009, 'fiftyTwoWeekHigh': 145.09, 'forwardPE': 29.410751, 'maxAge': 1, 'fromCurrency': None, 'fiveYearAvgDividendYield': 1.44, 'fiftyTwoWeekLow': 53.1525, 'bid': 136.42, 'tradeable': False, 'dividendYield': 0.0061000003, 'bidSize': 2900, 'dayHigh': 137.41}}\n```", "```py\ncurrencies = YahooFinancials(['EURCHF=X', 'USDEUR=X', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'GBPUSD=x'])\nprint(currencies.get_historical_price_data('2020-01-01', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'2020-12-31', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'weekly'))\n```", "```py\n{'EURCHF=X': {'eventsData': {}, 'firstTradeDate': {'formatted_date': '2003-01-23', 'date': 1043280000}, 'currency': 'CHF', 'instrumentType': 'CURRENCY', 'timeZone': {'gmtOffset': 0}, 'prices': [{'date': 1577836800, 'high': 1.0877000093460083, 'low': 1.0818699598312378, 'open': 1.0872000455856323, 'close': 1.084280014038086, 'volume': 0, 'adjclose': 1.084280014038086, 'formatted_date': '2020-01-01'}, {'date': 1578441600, 'high': 1.083299994468689, 'low': 1.0758999586105347, 'open': 1.080530047416687, 'close': 1.0809999704360962, 'volume': 0, 'adjclose': 1.0809999704360962, 'formatted_date': '2020-01-08'}, {'date': 1579046400, 'high': 1.0774999856948853, 'low': 1.0729299783706665, 'open': 1.076300024986267, 'close': 1.0744800567626953, 'volume': 0, 'adjclose': 1.0744800567626953, 'formatted_date': '2020-01-15'}, {'date': 1579651200, 'high': 1.0786099433898926, 'low': 1.0664700269699097, 'open': 1.0739500522613525, 'close': 1.068600058555603, 'volume': 0, 'adjclose': 1.068600058555603, 'formatted_date': '2020-01-22'}, {'date': 1580256000, 'high': 1.0736199617385864, 'low': 1.0663000345230103, 'open': 1.0723999738693237, 'close': 1.0683200359344482, 'volume': 0, 'adjclose': 1.068320035 ...\n```", "```py\npip install pandas-datareader\n```", "```py\nfrom pandas_datareader import data\nstart_date = '2010-01-01'\nend_date = '2020-12-31'\n```", "```py\naapl = data.DataReader('AAPL', 'yahoo', start_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_date)\naapl\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0High\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Low\u00a0\u00a0\u00a0\u00a0\u00a0Open\u00a0\u00a0\u00a0\u00a0Close\u00a0\u00a0\u00a0\u00a0\u00a0Volume\u00a0Adj Close\nDate\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n2010-01-04\u00a07.660714\u00a07.585000\u00a07.622500\u00a07.643214\u00a0493729600.0\u00a06.593426\n2010-01-05\u00a07.699643\u00a07.616071\u00a07.664286\u00a07.656428\u00a0601904800.0\u00a06.604825\n2010-01-06\u00a07.686786\u00a07.526786\u00a07.656428\u00a07.534643\u00a0552160000.0\u00a06.499768\n2010-01-07\u00a07.571429\u00a07.466072\u00a07.562500\u00a07.520714\u00a0477131200.0\u00a06.487752\n2010-01-08\u00a07.571429\u00a07.466429\u00a07.510714\u00a07.570714\u00a0447610800.0\u00a06.530883\n...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\n2020-12 -21\u00a0128.309998\u00a0123.449997\u00a0125.019997\u00a0128.229996\u00a0121251600.0\u00a0128.229996\n2020-12-22\u00a0134.410004\u00a0129.649994\u00a0131.610001\u00a0131.880005\u00a0168904800.0\u00a0131.880005\n2020-12-23\u00a0132.429993\u00a0130.779999\u00a0132.160004\u00a0130.960007\u00a088223700.0\u00a0130.960007\n2020-12-24\u00a0133.460007\u00a0131.100006\u00a0131.320007\u00a0131.970001\u00a054930100.0\u00a0131.970001\n2020-12-28\u00a0137.339996\u00a0133.509995\u00a0133.990005\u00a0136.690002\u00a0124182900.0\u00a0136.690002\n```", "```py\noilprodus = data.DataReader('ticker=OILPRODUS', 'econdb', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start_date, end_date)\noilprodus\n\u00a0Reference Area\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0United States of America\n\u00a0Energy product\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Crude oil\n\u00a0Flow breakdown\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Production\nUnit of measure\u00a0\u00a0Thousand Barrels per day (kb/d)\nTIME_PERIOD\u00a0\u00a0\n2010-01-01\u00a0\u00a05390\n2010-02-01\u00a0\u00a05548\n2010-03-01\u00a0\u00a05506\n2010-04-01\u00a0\u00a05383\n2010-05-01\u00a0\u00a05391\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0...\n2020-04-01\u00a0\u00a011990\n2020-05-01\u00a0\u00a010001\n2020-06-01\u00a0\u00a010436\n2020-07-01\u00a0\u00a010984\n2020-08-01\u00a0\u00a010406\n```", "```py\nimport pandas as pd\npd.set_option('display.max_rows', 2)\ngdp = data.DataReader('GDP', 'fred', start_date, end_date)\ngdp\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GDP\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DATE\u00a0\u00a0\n2010-01-01\u00a0\u00a014721.350\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2020-07-01\u00a0\u00a021170.252\n43 rows \u00d7 1 columns\n```", "```py\ngs10 = data.get_data_fred('GS20')\ngs10\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GS20\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DATE\u00a0\u00a0\n2016-01-01\u00a0\u00a02.49\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0...\n2020-11-01\u00a0\u00a01.40\n59 rows \u00d7 1 columns\n```", "```py\nimport datetime\nimport requests_cache\nsession = \\\nrequests_cache.CachedSession(cache_name='cache', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0backend='sqlite', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expire_after = \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datetime.timedelta(days=7))\naapl_full_history = \\\ndata.DataReader(\"AAPL\",'yahoo',datetime.datetime(1980,1,1), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0datetime.datetime(2020, 12, 31), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session=session)\naapl_full_history\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0High\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Low\u00a0\u00a0\u00a0\u00a0Open\u00a0\u00a0\u00a0\u00a0Close\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Volume\u00a0Adj Close\nDate\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n1980-12-12\u00a00.128906\u00a00.128348\u00a00.128348\u00a00.128348\u00a0469033600.0\u00a00.101087\n...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\n2020-12-28\u00a0137.339996\u00a0133.509995\u00a0133.990005\u00a0136.690002\u00a0124182900.0\u00a0136.690002\n```", "```py\naapl_full_history.loc['2013-01-07']\nHigh\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a018.903572\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\nAdj Close\u00a0\u00a0\u00a0\u00a016.284145\nName: 2013-01-07 00:00:00, Length: 6, dtype: float64\n```", "```py\npip install quandl\n```", "```py\nimport quandl\nquandl.ApiConfig.api_key = 'XXXXXXX'\n```", "```py\npapple = quandl.get('ODA/PAPPLE_USD')\npapple\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value\nDate\u00a0\u00a0\n1998-01-31\u00a0\u00a01.735999\n\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2020-11-30\u00a0\u00a03.350000\n275 rows \u00d7 1 columns\n```", "```py\naapl_fundamental_data = quandl.get_table('ZACKS/FC', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ticker='AAPL')\n\u00a0\u00a0m_ticker\u00a0\u00a0ticker\u00a0\u00a0comp_name\u00a0\u00a0comp_name_2\u00a0\u00a0exchange\u00a0\u00a0currency_code\u00a0\u00a0per_end_date\u00a0\u00a0per_type\u00a0\u00a0per_code\u00a0\u00a0per_fisc_year\u00a0\u00a0...\u00a0\u00a0stock_based_compsn_qd\u00a0\u00a0cash_flow_oper_activity_qd\u00a0\u00a0net_change_prop_plant_equip_qd\u00a0\u00a0comm_stock_div_paid_qd\u00a0\u00a0pref_stock_div_paid_qd\u00a0\u00a0tot_comm_pref_stock_div_qd\u00a0\u00a0wavg_shares_out\u00a0\u00a0wavg_shares_out_diluted\u00a0\u00a0eps_basic_net\u00a0\u00a0eps_diluted_net\nNone\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n0\u00a0\u00a0AAPL\u00a0\u00a0AAPL\u00a0\u00a0APPLE INC\u00a0\u00a0Apple Inc.\u00a0\u00a0NSDQ\u00a0\u00a0USD\u00a0\u00a02018-09-30\u00a0\u00a0A\u00a0\u00a0None\u00a0\u00a02018\u00a0\u00a0...\u00a0\u00a0NaN\u00a0\u00a0NaN\u00a0\u00a0NaN\u00a0\u00a0NaN\u00a0\u00a0None\u00a0\u00a0NaN\u00a0\u00a019821.51\u00a0\u00a020000.44\u00a0\u00a03.000\u00a0\u00a02.980\n...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\n4\u00a0\u00a0AAPL\u00a0\u00a0AAPL\u00a0\u00a0APPLE INC\u00a0\u00a0Apple Inc.\u00a0\u00a0NSDQ\u00a0\u00a0USD\u00a0\u00a02018-12-31\u00a0\u00a0Q\u00a0\u00a0None\u00a0\u00a02019\u00a0\u00a0...\u00a0\u00a01559.0\u00a0\u00a026690.0\u00a0\u00a0-3355.0\u00a0\u00a0-3568.0\u00a0\u00a0None\u00a0\u00a0-3568.0\u00a0\u00a018943.28\u00a0\u00a019093.01\u00a0\u00a01.055\u00a0\u00a01.045\n5 rows \u00d7 249 columns\n```", "```py\npip install iexfinance\n```", "```py\nfrom iexfinance.refdata import get_symbols\nget_symbols(output_format='pandas', token=\"XXXXXX\")\nsymbol\u00a0\u00a0exchange\u00a0\u00a0exchangeSuffix\u00a0\u00a0exchangeName\u00a0\u00a0name\u00a0\u00a0date\u00a0\u00a0type\u00a0\u00a0iexId\u00a0\u00a0region\u00a0\u00a0currency\u00a0\u00a0isEnabled\u00a0\u00a0figi\u00a0\u00a0cik\u00a0\u00a0lei\n0\u00a0\u00a0A\u00a0\u00a0NYS\u00a0\u00a0UN\u00a0\u00a0NEW YORK STOCK EXCHANGE, INC.\u00a0\u00a0Agilent Technologies Inc.\u00a0\u00a02020-12-29\u00a0\u00a0cs\u00a0\u00a0IEX_46574843354B2D52\u00a0\u00a0US\u00a0\u00a0USD\u00a0\u00a0True\u00a0\u00a0BBG000C2V3D6\u00a0\u00a00001090872\u00a0\u00a0QUIX8Y7A2WP0XRMW7G29\n...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\n9360\u00a0\u00a0ZYXI\u00a0\u00a0NAS\u00a0\u00a0\u00a0\u00a0NASDAQ CAPITAL MARKET\u00a0\u00a0Zynex Inc\u00a0\u00a02020-12-29\u00a0\u00a0cs\u00a0\u00a0IEX_4E464C4C4A462D52\u00a0\u00a0US\u00a0\u00a0USD\u00a0\u00a0True\u00a0\u00a0BBG000BJBXZ2\u00a0\u00a00000846475\u00a0\u00a0None\n9361 rows \u00d7 14 columns\n```", "```py\nfrom iexfinance.stocks import Stock\naapl = Stock(\"aapl\", token=\"XXXXXX\")\naapl.get_balance_sheet()\n```", "```py\naapl.get_price()\n```", "```py\nfrom iexfinance.stocks import get_sector_performance\nget_sector_performance(output_format='pandas', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0token =token)\n```", "```py\nfrom iexfinance.stocks import get_historical_data\nget_historical_data(\"AAPL\", start=\"20190101\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end=\"20200101\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output_format='pandas', token=token)\nclose\u00a0\u00a0high\u00a0\u00a0low\u00a0\u00a0open\u00a0\u00a0symbol\u00a0\u00a0volume\u00a0\u00a0id\u00a0\u00a0key\u00a0\u00a0subkey\u00a0\u00a0updated\u00a0\u00a0...\u00a0\u00a0uLow\u00a0\u00a0uVolume\u00a0\u00a0fOpen\u00a0\u00a0fClose\u00a0\u00a0fHigh\u00a0\u00a0fLow\u00a0\u00a0fVolume\u00a0\u00a0label\u00a0\u00a0change\u00a0\u00a0changePercent\n2019-01-02\u00a0\u00a039.48\u00a0\u00a039.7125\u00a0\u00a038.5575\u00a0\u00a038.7225\u00a0\u00a0AAPL\u00a0\u00a0148158948\u00a0\u00a0HISTORICAL_PRICES\u00a0\u00a0AAPL\u00a0\u00a0\u00a0\u00a01606830572000\u00a0\u00a0...\u00a0\u00a0154.23\u00a0\u00a037039737\u00a0\u00a037.8227\u00a0\u00a038.5626\u00a0\u00a038.7897\u00a0\u00a037.6615\u00a0\u00a0148158948\u00a0\u00a0Jan 2, 19\u00a0\u00a00.045\u00a0\u00a00.0011\n...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\u00a0\u00a0...\n2019-12-31\u00a0\u00a073.4125\u00a0\u00a073.42\u00a0\u00a072.38\u00a0\u00a072.4825\u00a0\u00a0AAPL\u00a0\u00a0100990500\u00a0\u00a0HISTORICAL_PRICES\u00a0\u00a0AAPL\u00a0\u00a0\u00a0\u00a01606830572000\u00a0\u00a0...\u00a0\u00a0289.52\u00a0\u00a025247625\u00a0\u00a071.8619\u00a0\u00a072.7839\u00a0\u00a072.7914\u00a0\u00a071.7603\u00a0\u00a0100990500\u00a0\u00a0Dec 31, 19\u00a0\u00a00.5325\u00a0\u00a00.0073\n252 rows \u00d7 25 columns\n```", "```py\nimport requests\nparams = {\n\u00a0\u00a0'access_key': 'XXXXX'\n}\napi_result = \\\nrequests.get('http://api.marketstack.com/v1/tickers/aapl/eod', params)\napi_response = api_result.json()\nprint(f\"Symbol = {api_response['data']['symbol']}\")\nfor eod in api_response['data']['eod']:\n\u00a0\u00a0\u00a0\u00a0print(f\"{eod['date']}: {eod['adj_close']}\")\nSymbol = AAPL\n2020-12-28T00:00:00+0000: 136.69\n2020-12-24T00:00:00+0000: 131.97\n2020-12-23T00:00:00+0000: 130.96\n2020-12-22T00:00:00+0000: 131.88\n2020-12-21T00:00:00+0000: 128.23\n2020-12-18T00:00:00+0000: 126.655\n2020-12-17T00:00:00+0000: 128.7\n2020-12-16T00:00:00+0000: 127.81\n2020-12-15T00:00:00+0000: 127.88\n2020-12-14T00:00:00+0000: 121.78\n2020-12-11T00:00:00+0000: 122.41\n2020-12-10T00:00:00+0000: 123.24\n2020-12-09T00:00:00+0000: 121.78\n2020-12-08T00:00:00+0000: 124.38\n2020-12-07T00:00:00+0000: 123.75\n2020-12-04T00:00:00+0000: 122.25\n```", "```py\napi_result = \\\nrequests.get('http://api.marketstack.com/v1/exchanges/XNAS/tickers', params)\napi_response = api_result.json()\nprint(f\"Exchange Name = {api_response['data']['name']}\")\nfor ticker in api_response['data']['tickers']:\n\u00a0\u00a0\u00a0\u00a0print(f\"{ticker['name']}: {ticker['symbol']}\")\nExchange Name = NASDAQ Stock Exchange\nMicrosoft Corp: MSFT\nApple Inc: AAPL\nAmazoncom Inc: AMZN\nAlphabet Inc Class C: GOOG\nAlphabet Inc Class A: GOOGL\nFacebook Inc: FB\nVodafone Group Public Limited Company: VOD\nIntel Corp: INTC\nComcast Corp: CMCSA\nPepsiCo Inc: PEP\nAdobe Systems Inc: ADBE\nCisco Systems Inc: CSCO\nNVIDIA Corp: NVDA\nNetflix Inc: NFLX\n```"]