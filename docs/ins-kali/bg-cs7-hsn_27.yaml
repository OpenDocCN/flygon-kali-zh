- en: Creating and Using an XML File
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用XML文件
- en: In this chapter, we will take a look at the basics of XML (short for Extensible
    Markup Language). Basically, it's a way of structuring information on the internet.
    A useful aspect of XML is that it's extensible, which means that you can create
    your own tags.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍XML（可扩展标记语言）的基础知识。基本上，这是一种在互联网上结构化信息的方式。XML的一个有用的方面是它是可扩展的，这意味着您可以创建自己的标签。
- en: Adding a button to HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加按钮
- en: Crank up a project. The only thing to be put inside <html> is a single `Button`
    control. To do this, go to Toolbox, type `but` in the search field, and drag and
    drop the `Button` control below the line that begins with `<form id=...`. Change
    the text on the button to say `Read XML`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个项目。在`<html>`中唯一要放置的是一个`Button`控件。要做到这一点，转到工具箱，在搜索字段中输入`but`，然后将`Button`控件拖放到以`<form
    id=...`开头的行下面。将按钮上的文本更改为`Read XML`。
- en: Coding the XML
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写XML
- en: 'Now you will need a file that you can read. For this, go to Solution Explorer
    and right-click on the name of the website. Go to Add in the dropdown, and then
    select Add New Item.... Type `xml` in the search field, and make sure that you
    choose XML File that says Visual C#. Your starting screen for `XMLFile.xml` should
    look like the one shown in *Figure 27.1.1*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要一个可以阅读的文件。为此，转到解决方案资源管理器，右键单击网站的名称。在下拉菜单中选择`添加`，然后选择`添加新项...`。在搜索字段中输入`xml`，并确保选择Visual
    C#中标有XML文件的XML文件。您的`XMLFile.xml`的起始屏幕应该如*图27.1.1*所示：
- en: '![](img/79a637f2-e10c-4041-aa15-b4ffca6e7e8d.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79a637f2-e10c-4041-aa15-b4ffca6e7e8d.png)'
- en: 'Figure 27.1.1: The starting screen for XMLFile.xml'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.1.1：XMLFile.xml的起始屏幕
- en: Now let's go through the creation of the code line-by-line, so that you can
    see what's exactly going on. Basically, just as in HTML, you have elements, nesting
    of elements, and attributes in XML.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们逐行创建代码，这样您就可以看到到底发生了什么。基本上，就像在HTML中一样，XML中有元素、元素的嵌套和属性。
- en: 'First, imagine that you have a bookstore. In XML, you can create your own tags.
    So enter the following next:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，想象一下您有一家书店。在XML中，您可以创建自己的标签。因此，接下来输入以下内容：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice that it automatically creates opening and closing tags: `<bookstore>`
    `</bookstore>`. Insert a few blank lines between these tags.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它自动创建了开放和关闭标签：`<bookstore>` `</bookstore>`。在这些标签之间插入几行空白。
- en: 'Of course, you have books in the book store, so enter the following next beneath
    the first `<bookstore>` tag:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您的书店里有书，所以在第一个`<bookstore>`标签下面输入以下内容：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A book might be a traditional textbook, or it could be an eBook. So we will
    specify a type attribute, and set that equal to `eBook` for our first book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一本书可能是传统的教科书，也可能是电子书。因此，我们将指定一个类型属性，并将其设置为我们第一本书的`eBook`。
- en: 'Now let''s talk about some of the elements stored under `<book type="eBook">`.
    One essential item, obviously, is the book title, so enter the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈存储在`<book type="eBook">`下的一些元素。显然，一个基本的项目是书名，所以输入以下内容：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will call the book, `The Great Way`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这本书称为`The Great Way`。
- en: 'In the next stage, naturally, you put in the author, so enter the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个阶段，自然地，您要输入作者，所以输入以下内容：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, our book was written by `Bob Jones`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的书是由`Bob Jones`写的。
- en: 'The last item, of course, is the price, which we''ll say is `$10.00` in this
    case, so enter the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一项当然是价格，我们将说这个案例中是`$10.00`，所以输入以下内容：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This information provides the first book element, which as you can see consists
    of sub elements called `<booktitle>`, `<author>`, and `<price>`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息提供了第一个书籍元素，正如您所看到的，它由称为`<booktitle>`、`<author>`和`<price>`的子元素组成。
- en: 'Now let''s do one more book just for the sake of variety, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再做一本书，只是为了多样性，如下所示：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our simple XML file is shown in the following code block:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的简单XML文件如下代码块所示：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Again, remember that XML is *Extensible*, because you can make your own tags,
    *Markup* because it has a structure similar to HTML, and, of course, it's a *Language*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 再次记住，XML是*可扩展*的，因为您可以创建自己的标签，*标记*因为它具有类似HTML的结构，当然，它是一种*语言*。
- en: Now, right-click on the tab that says `XMLFile.xml`, and select Copy Full Path
    from the dropdown. We will make use of this path shortly. (If you hover your mouse
    over the `XMLFile.xml` tab, you can see the full path, however, it's long and
    difficult to remember, so it's better to right-click and select Copy the Full
    Path.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，右键单击标有`XMLFile.xml`的选项卡，并从下拉菜单中选择`复制完整路径`。我们将很快使用这个路径。（如果您将鼠标悬停在`XMLFile.xml`选项卡上，可以看到完整路径，但它很长且难以记住，因此最好右键单击并选择`复制完整路径`。）
- en: 'Now click on the `Default.aspx` tab inside the HTML, switch to the Design view,
    and then double-click on the Read XML button. This brings up the event-handling
    code inside `Default.aspx.cs`. Delete the `Page_Load` stub. The relevant portion
    of the starting code for this project should look like that shown in *Figure 27.1.2*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击HTML中的`Default.aspx`选项卡，切换到设计视图，然后双击读取XML按钮。这会打开`Default.aspx.cs`中的事件处理代码。删除`Page_Load`存根。该项目的起始代码的相关部分应该如*图27.1.2*所示：
- en: '![](img/75158be0-b1d7-4f5c-85f5-de95b55e1bf1.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75158be0-b1d7-4f5c-85f5-de95b55e1bf1.png)'
- en: 'Figure 27.1.2: The starting code for this project'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.1.2：该项目的起始代码
- en: Adding a namespace
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个命名空间
- en: 'Let''s begin by adding a namespace. You need a new one, so enter the following
    after `using System` near the top of the file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先添加一个命名空间。您需要一个新的，所以在文件顶部附近的`using System`之后输入以下内容：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You will make use of this namespace as you code. (You can collapse all the code
    above the line that beings with `public partial class...`.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在编码中使用此命名空间。（您可以折叠`public partial class...`上面的所有代码。）
- en: Loading the XML file into your program
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将XML文件加载到您的程序中
- en: 'In the next stage, enter the following within a set of curly braces beneath
    the line that begins with `protected void Button1_Click...` :'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个阶段，在以`protected void Button1_Click...`开头的行下面的一对大括号中输入以下内容：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You want to load `XElement fromFile`, so you say `XElement.Load()`. Then, within
    the parentheses, you put the `@` symbol to make it a verbatim string, followed
    by double quotes. Now you need to make use of the path that you copied from `XMLFile.xml`
    so that you can load the XML from the file there. So, paste the path in between
    the set of `""` symbols. This will allow you to load the extensible markup file.
    Now hover your mouse over `XElement`. It says, class System.Xml.Linq.XElement,
    Represents an XML element.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要加载`XElement fromFile`，所以你说`XElement.Load()`。然后，在括号内，你放置`@`符号使其成为原始字符串，然后是双引号。现在你需要利用从`XMLFile.xml`中复制的路径，这样你就可以从文件中加载XML。所以，将路径粘贴在一对`""`符号之间。这将允许你加载可扩展标记文件。现在将鼠标悬停在`XElement`上。它说，类System.Xml.Linq.XElement，表示XML元素。
- en: Iterating over the contents of the XML file
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历XML文件的内容
- en: 'Now, enter the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入以下内容：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you hover your mouse over `Elements` at the end of this line, you can see
    that it's a function and it returns IEnumerable, so you can go over its contents,
    and each member within it is an element.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将鼠标悬停在这一行末尾的“Elements”上时，你会发现它是一个函数，返回的是IEnumerable，所以你可以遍历它的内容，其中每个成员都是一个元素。
- en: Displaying the results
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示结果
- en: 'Now you can display them, so enter the following between a set of curly braces:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以显示它们，所以在一对大括号之间输入以下内容：
- en: 'First, you will need the book type. To get it, after you type `sampLabel.Text
    += $"<br>Book Type:`, you say `{childElement.Attribute("type")`, and to get the
    value, you type `.Value}";`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要书的类型。要获取它，在你输入`sampLabel.Text += $"<br>Book Type:`之后，你说`{childElement.Attribute("type")`，然后获取值，你输入`.Value}";`：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, to get the author you use `{childElement.Element("author")}";`, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要获取作者，你使用`{childElement.Element("author")}";`，如下所示：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is how you can get all of the elements out. At this stage, you can just
    copy and paste this line as it's pretty much the same thing for the book title
    and book price.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以将所有元素取出来的方法。在这个阶段，你可以直接复制并粘贴这行代码，因为对于书名和书价来说基本上是一样的。
- en: 'For book title, you say: `{childElement.Element("booktitle")}";`, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于书名，你可以这样说：`{childElement.Element("booktitle")}";`，如下所示：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For price, you say: `{childElement.Element("price")}";`, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于价格，你可以这样说：`{childElement.Element("price")}";`，如下所示：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At the end, to separate things out, you can use `"<br><hr/>";`, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了分隔开，你可以使用`"<br><hr/>";`，如下所示：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the program
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now let''s give it a go here, so crank it up in your browser. Remember, you
    are essentially reading XML into a web page. This is our objective here. Click
    on the Read XML button. The results are shown in Figure 27*.1.3*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在这里试一下，在浏览器中打开它。记住，你实际上是在将XML读入网页。这是我们的目标。点击“读取XML”按钮。结果显示在图27*.1.3*中：
- en: '![](img/8865cc92-d6fa-4ed2-896f-a27a8cda8e80.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8865cc92-d6fa-4ed2-896f-a27a8cda8e80.png)'
- en: 'Figure 27.1.3: The results of running our program'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图27.1.3：运行程序的结果
- en: The information is reported exactly as you entered it, as you would expect.
    Remember that the horizontal lines are present because you typed `"<br><hr/>"`
    inside the HTML page, which added a break and a horizontal rule or line.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 信息被报告的方式与你输入的方式完全一样，这是你所期望的。请记住，水平线存在是因为你在HTML页面中输入了`"<br><hr/>"`，这添加了一个换行和一个水平规则或线。
- en: This is how you can combine reading from an XML file, which is basically a collection
    of elements like the one in this project, many times nested. You can combine it
    with C#, and you can produce results.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以将从XML文件中读取的内容与C#结合起来，然后产生结果的方法。
- en: Chapter review
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Default.aspx.cs`文件的完整版本，包括注释，如下所示：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the basics of XML. You wrote XML code, loaded the
    resulting XML file into your program, iterated over the contents of the XML file,
    and wrote the code to display the results.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了XML的基础知识。你编写了XML代码，将生成的XML文件加载到程序中，遍历了XML文件的内容，并编写了显示结果的代码。
- en: In the next chapter, you will learn how to write XML to a file and then view
    the results in Notepad and in Internet Explorer. So, you will come across lots
    of useful little things.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何将XML写入文件，然后在记事本和Internet Explorer中查看结果。因此，你将遇到许多有用的小技巧。
