["```js\nEveryPlantSelectionApp/\n\u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 package.json\n|   \u251c\u2500\u2500 babel.config.js\n\u2502   \u251c\u2500\u2500 index.js\n|   \u2514\u2500\u2500 plantData/\n\u2502       \u251c\u2500\u2500 plantData.js\n\u2502       \u251c\u2500\u2500 plantData.test.js\n|       \u2514\u2500\u2500 data.json\n\u2514\u2500\u2500 client/\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 webpack.config.js\n    \u251c\u2500\u2500 babel.config.js\n    \u251c\u2500\u2500 app/\n    |   \u251c\u2500\u2500 index.jsx\n    |   \u2514\u2500\u2500 components/\n    |       \u2514\u2500\u2500 PlantSelectionInput/\n    \u2514\u2500\u2500 dist/\n        \u251c\u2500\u2500 main.js (bundling target)\n        \u2514\u2500\u2500 index.html\n```", "```js\nimport express from 'express';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.get('/plants/:query', (req, res) => {\n  req.params.query; // => The query\n  res.json({\n    fakeData: 'We can later place some real data here...'\n  });\n});\n\napp.listen(\n  port,\n  () => console.log(`App listening on port ${port}!`)\n);\n```", "```js\nGET /plants/c\nGET /plants/ca\nGET /plants/car\nGET /plants/card\nGET /plants/cardu\nGET /plants/cardua\n...\n```", "```js\n['APPLE', 'ACORN', 'APP', 'APPLICATION']\n```", "```js\n[\n  { id: 105,\n    family: 'Acanthaceae',\n    genus: 'Andrographis',\n    species: 'alata' },\n  { id: 106,\n    family: 'Acanthaceae',\n    genus: 'Justicia',\n    species: 'alata' },\n  { id: 107,\n    family: 'Acanthaceae',\n    genus: 'Pararuellia',\n    species: 'alata' },\n  { id: 108,\n    family: 'Acanthaceae',\n    genus: 'Thunbergia',\n    species: 'alata' },\n  // ...\n]\n```", "```js\nconst trie = new TrieSearch(['name'], {\n  ignoreCase: true // Make it case-insensitive\n});\n\ntrie.addAll(\n  data.map(({ family, genus, species, id }) => {\n    return { name: family + ' ' + genus + ' ' + species, id };\n  })\n);\n```", "```js\ntrie.get('laxi');\n```", "```js\n[\n  { id: 203,\n    name: 'Acanthaceae Acanthopale laxiflora' },\n  { id: 809,\n    name: 'Acanthaceae Andrographis laxiflora' },\n  { id: 390,\n    name: 'Acanthaceae Isoglossa laxiflora' },\n  //... (many more)\n]\n```", "```js\napp.get('/plants/:query', (req, res) => {\n  const queryString = req.params.query;\n  if (queryString.length < 3) {\n    return res.json([]);\n  }\n  res.json(\n    trie.get(queryString)\n  );\n});\n```", "```js\n// server/plantData.js\n\nimport TrieSearch from 'trie-search';\nimport plantData from './data.json';\n\nconst MIN_QUERY_LENGTH = 3;\n\nconst trie = new TrieSearch(['fullyQualifiedName'], {\n  ignoreCase: true\n});\n\ntrie.addAll(\n  plantData.map(plant => {\n    return {\n      ...plant,\n      fullyQualifiedName:\n        `${plant.family} ${plant.genus} ${plant.species}`\n    };\n  })\n);\n\nexport default {\n  query(partialString) {\n    if (partialString.length < MIN_QUERY_LENGTH) {\n      return [];\n    }\n    return trie.get(partialString);\n  }\n};\n```", "```js\n//...\nimport plantData from './plantData';\n//...\napp.get('/plants/:query', (req, res) => {\n  const query = req.params.query;\n  res.json( plantData.query(partial) );\n});\n```", "```js\nimport plantData from './plantData';\n\ndescribe('plantData', () => {\n\n  describe('Family+Genus name search (Acanthaceae Thunbergia)', () => {\n    it('Returns plants with family and genus of \"Acanthaceae Thunbergia\"', () =>{\n      const results = plantData.query('Acanthaceae Thunbergia');\n      expect(results.length).toBeGreaterThan(0);\n      expect(\n        results.filter(plant =>\n          plant.family === 'Acanthaceae' &&\n          plant.genus === 'Thunbergia'\n        )\n      ).toHaveLength(results.length);\n    });\n  });\n\n});\n```", "```js\ndescribe('Partial family & genus name search (Acantu Thun)', () => {\n  it('Returns plants that have a fully-qualified name containing both \"Acantu\" and \"Thunbe\"', () => {\n    const results = plantData.query('Acant Thun');\n    expect(results.length).toBeGreaterThan(0);\n    expect(\n      results.filter(plant =>\n        /\\bAcant/i.test(plant.fullyQualifiedName) &&\n        /\\bThun/i.test(plant.fullyQualifiedName)\n      )\n    ).toHaveLength(results.length);\n  });\n});\n```", "```js\n<body>\n  ... Content\n  <script src=\"//example.org/libraryFoo.js\"></script>\n  <script src=\"//example.org/libraryBaz.js\"></script>\n  <script>\n    // Our JavaScript code...\n  </script>\n</body>\n```", "```js\n# Install babel's core dependencies:\nnpm install --save-dev @babel/core @babel/cli\n\n# Install some smart presets for Babel, allowing us to not have\n# to worry about which specific JS syntax we're using:\nnpm install --save-dev @babel/preset-env\n\n# Install a smart preset for React (i.e. JSX) usage:\nnpm install --save-dev @babel/preset-react\n```", "```js\n<script src=\"./ourBundledJavaScript.js\"></script>\n```", "```js\n# Install Webpack and its CLI:\nnpm install --save-dev webpack webpack-cli\n\n# Install Webpack's development server, which enables us to more easily\n# develop without having to keep re-running the build process:\nnpm install --save-dev webpack-dev-server\n\n# Install a couple of helpful packages that make it easier for\n# Webpack to make use of Babel:\nnpm install --save-dev babel-loader babel-preset-react\n```", "```js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './app/index.jsx',\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/react']\n          }\n        }\n      }\n    ]\n  },\n  devServer: {\n    contentBase: path.join(__dirname, 'dist'),\n    compress: true,\n    port: 9000\n  },\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  }\n};\n```", "```js\nnpm install --save react react-dom\n```", "```js\nconst PlantSelectionInput = () => {\n  return (\n    <div className=\"PlantSelectionInput\">\n      <input\n        autoComplete=\"off\"\n        aria-autocomplete=\"inline\"\n        role=\"combobox\" />\n      <ol>\n        <li>A plant name...</li>\n        <li>A plant name...</li>\n        <li>A plant name...</li>\n      </ol>\n    </div>\n  );\n};\n```", "```js\nconst PlantSelectionInput = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div className=\"PlantSelectionInput\">\n      <input\n        onFocus={() => setIsOpen(true)}\n        onBlur={() => setIsOpen(false)}\n        autoComplete=\"off\"\n        aria-autocomplete=\"inline\"\n        role=\"combobox\" />\n      {\n        isOpen &&\n          <ol>\n             <li>A plant name...</li>\n             <li>A plant name...</li>\n             <li>A plant name...</li>\n          </ol>\n      }\n    </div>\n  );\n};\n```", "```js\n// Example of calling usePlantsLike:\nconst {loading, plants} = usePlantsLike('Acantha');\n```", "```js\n// usePlantLike.js\n\nimport {useState, useEffect} from 'react';\n\nexport default (query) => {\n  const [loading, setLoading] = useState(false);\n  const [plants, setPlants] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(`/plants/${query}`)\n      .then(response => response.json())\n      .then(data => {\n        setLoading(false);\n        setPlants(data);\n      });\n  }, [query]);\n\n  return { loading, plants };\n};\n```", "```js\nconst PlantSelectionInput = ({ isInitiallyOpen, value }) => {\n\n  const inputRef = useRef();\n  const [isOpen, setIsOpen] = useState(isInitiallyOpen || false);\n  const [query, setQuery] = useState(value);\n  const {loading, plants} = usePlantsLike(query);\n\n  return (\n    <div className=\"PlantSelectionInput\">\n      <input\n        ref={inputRef}\n        onFocus={() => setIsOpen(true)}\n        onBlur={() => setIsOpen(false)}\n        onChange={() => setQuery(inputRef.current.value)}\n        autoComplete=\"off\"\n        aria-autocomplete=\"inline\"\n        role=\"combobox\"\n        value={value} />\n      {\n        isOpen &&\n          <ol>{\n            plants.map(plant =>\n              <li key={plant.id}>{plant.fullyQualifiedName}</li>\n            )\n          }</ol>\n      }\n    </div>\n  );\n};\n```", "```js\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport PlantSelectionInput from './components/PlantSelectionInput';\n\nReactDOM.render(\n  <PlantSelectionInput />,\n  document.getElementById('root')\n);\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title>EveryPlant Selection App</title>\n  <style>\n    /* our styles... */\n  </style>\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"./main.js\"></script>\n</body>\n</html>\n```", "```js\n<style>\n.PlantSelectionInput {\n  width: 100%;\n  display: flex;\n  position: relative;\n}\n.PlantSelectionInput input {\n  background: #fff;\n  font-size: 1em;\n  flex: 1 1;\n  padding: .5em;\n  outline: none;\n}\n/* ... more styles here ... */\n</style>\n```", "```js\n// PlantSelectionInput.test.jsx\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport PlantSelectionInput from './';\n\ndescribe('PlantSelectionInput', () => {\n\n  it('Should render deterministically to its snapshot', () => {\n    expect(\n      renderer\n        .create(<PlantSelectionInput />)\n        .toJSON()\n    ).toMatchSnapshot();\n  });\n\n  describe('With configured isInitiallyOpen & value properties', () => {\n    it('Should render deterministically to its snapshot', () => {\n      expect(\n        renderer\n          .create(\n            <PlantSelectionInput\n              isInitiallyOpen={true}\n              value=\"Example...\"\n            />\n          )\n          .toJSON()\n      ).toMatchSnapshot();\n    });\n  });\n\n});\n\n```"]