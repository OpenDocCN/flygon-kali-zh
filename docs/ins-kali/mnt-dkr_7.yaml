- en: Chapter 7. Collecting Application Logs from within the Container
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。从容器内收集应用程序日志
- en: One of the most overlooked parts of monitoring are log files generated by the
    application or services such as NGINX, MySQL, Apache, and so on. So far we have
    looked at various ways of recording the CPU and RAM utilization of the processes
    within your containers are at a point in time, now its time to do the same for
    the log files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 监控中最容易被忽视的部分之一是应用程序或服务生成的日志文件，例如NGINX、MySQL、Apache等。到目前为止，我们已经看过了记录容器中进程的CPU和RAM利用率的各种方法，现在是时候为日志文件做同样的事情了。
- en: If you are running your containers as Cattle or Chickens, then the way you deal
    with the issues to destroy and relaunch your container either manually or automatically
    is important. While this should fix the immediate problem, it does not help with
    tracking down the root cause of the issue and if you don't know that then how
    can you attempt to resolve it so that it does not reoccur.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将容器作为牛或鸡运行，那么处理销毁和重新启动容器的问题的方式，无论是手动还是自动，都很重要。虽然这可以解决眼前的问题，但它并不能帮助您追踪问题的根本原因，如果您不知道问题的根本原因，又如何尝试解决它，以便它不再发生。
- en: 'In this chapter, we will look at how we can get the content of the log files
    for the applications running within our containers to the central location so
    that they are available, even if you have to destroy and replace a container.
    We are going to cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何将运行在容器中的应用程序的日志文件内容传输到中央位置，以便它们可用，即使您必须销毁和替换容器。本章我们将涵盖以下主题：
- en: How to view container logs?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何查看容器日志？
- en: Deploying an "ELK" stack using a Docker containers stack to ship the logs to
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker容器堆栈部署“ELK”堆栈以将日志发送到
- en: Reviewing your logs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查您的日志
- en: What third party options are available?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些第三方选项可用？
- en: Viewing container logs
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看容器日志
- en: Like the `docker top` command, there is a very basic way of viewing logs. When
    you use the `docker logs` command, you are actually viewing the `STDOUT` and `STDERR`
    of the processes that are running within the container.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与`docker top`命令一样，查看日志的方法非常基本。当您使用`docker logs`命令时，实际上是在查看容器内运行的进程的`STDOUT`和`STDERR`。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Standard Streams, please see [https://en.wikipedia.org/wiki/Standard_streams](https://en.wikipedia.org/wiki/Standard_streams).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有关标准流的更多信息，请参阅[https://en.wikipedia.org/wiki/Standard_streams](https://en.wikipedia.org/wiki/Standard_streams)。
- en: 'As you can see from the following screenshot, the simplest thing you have to
    do is run `docker logs` followed by your container name:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下截图中所见，您所需做的最简单的事情就是运行`docker logs`，然后加上您的容器名称：
- en: '![Viewing container logs](../images/00059.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![查看容器日志](../images/00059.jpeg)'
- en: 'To see this on your own host, let''s launch the WordPress installation from
    `chapter05` using the following commands:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在自己的主机上查看此内容，请使用以下命令启动`chapter05`中的WordPress安装：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can extend the `dockerlogs` command by adding the following flags before
    your container name:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在容器名称之前添加以下标志来扩展`docker logs`命令：
- en: '`-f` or `--follow` will stream the logs in real time'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`或`--follow`将实时流式传输日志'
- en: '`-t` or `--timestamps` will show a timestamp at the start of each line'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t`或`--timestamps`将在每行开头显示时间戳'
- en: '`--tail="5"` will show the last *x* number of lines'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--tail="5"`将显示最后*x*行'
- en: '`--since="5m00s"` will show only the entries for the last 5 minutes'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--since="5m00s"`将仅显示最近5分钟的条目'
- en: 'Using the WordPress installation that we have just launched, try running the
    following commands:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们刚刚启动的WordPress安装，尝试运行以下命令：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will show the last two lines of the logs, you can add timestamps using:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示日志的最后两行，您可以使用以下命令添加时间戳：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in the following terminal output, you can also string commands
    together to form a very basic query language:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如下终端输出所示，您还可以将命令串联在一起，形成一个非常基本的查询语言：
- en: '![Viewing container logs](../images/00060.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![查看容器日志](../images/00060.jpeg)'
- en: The downside of using `docker logs` is exactly the same as using `docker top`,
    in that it is only available locally and the logs are only present for the time
    the container is around, you can view the logs of a stopped container, but once
    the container is removed, so are the logs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker logs`的缺点与使用`docker top`完全相同，即它仅在本地可用，日志仅在容器存在的时间内存在，您可以查看已停止容器的日志，但一旦容器被移除，日志也会被移除。
- en: ELK Stack
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ELK Stack
- en: 'Similar to some of the technologies that we have covered in this book, an ELK
    stack really deserves a book by itself; in fact, there are books for each of the
    elements that make an ELK stack, these elements are:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中涵盖的一些技术类似，ELK堆栈确实值得一本书；事实上，每个构成ELK堆栈的元素都有专门的书籍，这些元素包括：
- en: Elasticsearch is a powerful search server, which has been developed with modern
    workloads in mind
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elasticsearch是一个功能强大的搜索服务器，它是针对现代工作负载开发的。
- en: Logstash sits between your data source and Elasticsearch services; it transforms
    your data in real time to a format, which Elasticsearch can understand.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logstash位于数据源和Elasticsearch服务之间；它实时转换您的数据为Elasticsearch可以理解的格式。
- en: Kibana is in front of your Elasticsearch services and allows you to query your
    data in a feature-rich web-based dashboard.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kibana位于您的Elasticsearch服务前面，并允许您在功能丰富的基于Web的仪表板中查询数据。
- en: There are a lot of moving parts with an ELK stack, so to simplify things, we
    will use a prebuilt stack for the purpose of testing; however, you probably don't
    want to use this stack in production.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ELK堆栈中有许多组件，为了简化事情，我们将使用一个预构建的堆栈进行测试；但是，您可能不希望在生产中使用此堆栈。
- en: Starting the stack
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动堆栈
- en: 'Let''s launch a fresh vagrant host on which to run the ELK stack:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动一个新的vagrant主机来运行ELK堆栈：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we have a clean host that is up and running, we can start the stack by
    running the following commands:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个干净的主机正在运行，我们可以通过运行以下命令来启动堆栈：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you may have noticed, it did more that just pull down some images; what
    happened was:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，它不仅仅是下载了一些镜像；发生的事情是：
- en: An Elasticsearch container was launched using the official image from [https://hub.docker.com/_/elasticsearch/](https://hub.docker.com/_/elasticsearch/).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用官方镜像[https://hub.docker.com/_/elasticsearch/](https://hub.docker.com/_/elasticsearch/)启动了一个Elasticsearch容器。
- en: A Logstash container was launched using the official image from [https://hub.docker.com/_/logstash/](https://hub.docker.com/_/logstash/),
    it was also launched with our own configuration, which means that our installation
    listens for logs sent from Logspout (more about that in a minute).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用官方镜像[https://hub.docker.com/_/logstash/](https://hub.docker.com/_/logstash/)启动了一个Logstash容器，它还使用我们自己的配置启动，这意味着我们的安装监听来自Logspout的日志（稍后会详细介绍）。
- en: A custom Kibana image was built using the official image from [https://hub.docker.com/_/kibana/](https://hub.docker.com/_/kibana/).
    All it did was add a small script to ensure that Kibana doesn't start until our
    Elasticsearch container is fully up and running. It was then launched with a custom
    configuration file.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用官方镜像[https://hub.docker.com/_/kibana/](https://hub.docker.com/_/kibana/)构建了一个自定义的Kibana镜像。它所做的只是添加了一个小脚本，以确保Kibana在我们的Elasticsearch容器完全启动和运行之前不会启动。然后使用自定义配置文件启动了它。
- en: A custom Logspout container was built using the official image from [https://hub.docker.com/r/gliderlabs/logspout/](https://hub.docker.com/r/gliderlabs/logspout/)
    and then we added a custom module so that Logspout could talk to Logstash.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自[https://hub.docker.com/r/gliderlabs/logspout/](https://hub.docker.com/r/gliderlabs/logspout/)的官方镜像构建了一个自定义的Logspout容器，然后我们添加了一个自定义模块，以便Logspout可以与Logstash通信。
- en: 'Once `docker-compose` has finished building and launching the stack you should
    be able to see the following when running `docker-compose ps`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`docker-compose`完成构建和启动堆栈，运行`docker-compose ps`时，您应该能够看到以下内容：
- en: '![Starting the stack](../images/00061.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![启动堆栈](../images/00061.jpeg)'
- en: We now have our ELK stack up and running, as you may have noticed, there is
    an additional container running and giving us an ELK-L stack, so what is Logspout?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的ELK堆栈已经运行起来了，您可能已经注意到，有一个额外的容器正在运行并为我们提供ELK-L堆栈，那么Logspout是什么？
- en: Logspout
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Logspout
- en: If we were to launch Elasticsearch, Logstash, and Kibana containers, we should
    have a functioning ELK stack but we will have a lot of configuration to do to
    get our container logs into Elasticsearch.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要启动Elasticsearch、Logstash和Kibana容器，我们应该有一个正常运行的ELK堆栈，但是我们需要做很多配置才能将容器日志输入Elasticsearch。
- en: 'Since Docker 1.6, you have been able to configure logging drivers, this meant
    that it is possible to launch a container and have it send its `STDOUT` and `STDERR`
    to a Syslog Server, which will be Logstash in our case; however, this means that
    you will have to add something similar to the following options each time we launch
    a container:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 自Docker 1.6以来，您已经能够配置日志驱动程序，这意味着可以启动一个容器，并让它将其`STDOUT`和`STDERR`发送到Syslog服务器，在我们的情况下将是Logstash；然而，这意味着每次启动容器时都必须添加类似以下选项的内容：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is where Logspout comes in, it has been designed to collect all of the
    `STDOUT` and `STDERR` messages on a host machine by intercepting the messages
    that are being collected by the Docker process and then it routes them to our
    Logstash instance in a format that is understood by Elasticsearch.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Logspout的作用，它被设计用来通过拦截Docker进程收集的消息来收集主机上的所有`STDOUT`和`STDERR`消息，然后将它们路由到我们的Logstash实例中，以Elasticsearch理解的格式。
- en: Just as the log-driver, it supports Syslog out of the box; however, there is
    a third party module that transforms the output to JSON, which Logstash understands.
    As a part of our build we downloaded, compiled and configured the module.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就像日志驱动程序一样，它支持开箱即用的Syslog；然而，有一个第三方模块将输出转换为Logstash理解的JSON。作为我们构建的一部分，我们下载、编译和配置了该模块。
- en: 'You can find out more about Logspout and logging drivers at the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下位置了解有关Logspout和日志驱动程序的更多信息：
- en: 'Official Logspout image: [https://hub.docker.com/r/gliderlabs/logspout/](https://hub.docker.com/r/gliderlabs/logspout/)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方Logspout镜像：[https://hub.docker.com/r/gliderlabs/logspout/](https://hub.docker.com/r/gliderlabs/logspout/)
- en: 'Logspout Project page: [https://github.com/gliderlabs/logspout](https://github.com/gliderlabs/logspout)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logspout项目页面：[https://github.com/gliderlabs/logspout](https://github.com/gliderlabs/logspout)
- en: 'Logspout Logstash module: [https://github.com/looplab/logspout-logstash](https://github.com/looplab/logspout-logstash)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logspout Logstash模块：[https://github.com/looplab/logspout-logstash](https://github.com/looplab/logspout-logstash)
- en: 'Docker 1.6 release notes: [https://blog.docker.com/2015/04/docker-release-1-6/](https://blog.docker.com/2015/04/docker-release-1-6/)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 1.6发布说明：[https://blog.docker.com/2015/04/docker-release-1-6/](https://blog.docker.com/2015/04/docker-release-1-6/)
- en: 'Docker Logging Drivers: [https://docs.docker.com/reference/logging/overview/](https://docs.docker.com/reference/logging/overview/)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker日志驱动程序：[https://docs.docker.com/reference/logging/overview/](https://docs.docker.com/reference/logging/overview/)
- en: Reviewing the logs
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查日志
- en: So now, we have our ELK running and a mechanism in place to stream all of the
    `STDOUT` and `STDERR` messages generated by our containers into Logstash, which
    in turn routes the data into Elasticsearch. Now its time to view the logs in Kibana.
    To access Kibana go to `http://192.168.33.10:8080/` in your browser; when you
    access the page, you will be asked to **Configure an index pattern**, the default
    index pattern will be fine for our needs so just click the **Create** button.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的ELK正在运行，并且已经有了一种机制，可以将容器生成的所有`STDOUT`和`STDERR`消息流式传输到Logstash，然后将数据路由到Elasticsearch。现在是时候在Kibana中查看日志了。要访问Kibana，请在浏览器中输入`http://192.168.33.10:8080/`；当您访问页面时，将要求您**配置索引模式**，默认的索引模式对我们的需求来说是可以的，所以只需点击**创建**按钮。
- en: 'Once you do, you will see a list of the index patterns, these are taken directly
    from the Logspout output, and you should notice the following items in the index:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您这样做，您将看到索引模式的列表，这些直接取自Logspout输出，并且您应该注意索引中的以下项目：
- en: '`docker.name`: The name of container'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker.name`：容器的名称'
- en: '`docker.id`: The full container ID'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker.id`：完整的容器ID'
- en: '`docker.image`: The name of the image used to launch the image'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker.image`：用于启动图像的名称'
- en: 'From here, if you were to click on **Discover** in the top menu you would see
    something similar to the following page:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，如果您点击顶部菜单中的**发现**，您将看到类似以下页面的内容：
- en: '![Reviewing the logs](../images/00062.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![审查日志](../images/00062.jpeg)'
- en: 'In the screenshot, you will see that I have recently launched the WordPress
    stack and we have been using it throughout the book, using the following commands:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕截图中，您将看到我最近启动了WordPress堆栈，并且我们一直在整本书中使用它，使用以下命令：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To give you an idea of what is being logged, here is the raw JSON taken from
    Elasticseach for running the WordPress installation script:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您了解正在记录的内容，这里是从Elasticseach获取的运行WordPress安装脚本的原始JSON：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: From here, you can start to use the free text search box and build up some quite
    complex queries to drill down into your container's `STDOUT` and `STDERR` logs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以开始使用自由文本搜索框，并构建一些相当复杂的查询，以深入了解容器的`STDOUT`和`STDERR`日志。
- en: What about production?
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产环境怎么样？
- en: As mentioned at the top of this section, you probably don't want to run your
    production ELK stack using the `docker-compose` file, which accompanies this chapter.
    First of all, you will want your Elasticsearch data to be stored on a persistent
    volume and you more than likely want your Logstash service to be highly available.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节顶部所述，您可能不希望使用附带本章的`docker-compose`文件来运行生产ELK堆栈。首先，您希望将Elasticsearch数据存储在持久卷上，并且很可能希望您的Logstash服务具有高可用性。
- en: 'There are numerous guides on how to configure a highly available ELK stack,
    as well as, the hosted services from Elastic, which is the creator of Elasticsearch,
    and also Amazon Web Services, which offers an Elasticsearch service:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多指南可以指导您如何配置高可用性ELK堆栈，以及Elastic的托管服务，Elasticsearch的创建者，以及亚马逊Web服务，该服务提供Elasticsearch服务：
- en: 'ELK tutorial: [https://www.youtube.com/watch?v=ge8uHdmtb1M](https://www.youtube.com/watch?v=ge8uHdmtb1M)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELK教程：[https://www.youtube.com/watch?v=ge8uHdmtb1M](https://www.youtube.com/watch?v=ge8uHdmtb1M)
- en: 'Found from Elastic: [https://www.elastic.co/found](https://www.elastic.co/found)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Elastic发现：[https://www.elastic.co/found](https://www.elastic.co/found)
- en: 'Amazon Elasticsearch Service: [https://aws.amazon.com/elasticsearch-service/](https://aws.amazon.com/elasticsearch-service/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊Elasticsearch服务：[https://aws.amazon.com/elasticsearch-service/](https://aws.amazon.com/elasticsearch-service/)
- en: Looking at third party options
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看第三方选项
- en: 'There are a few options when it comes to hosting central logging for your containers
    external to your own server instances. Some of these are:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在为容器托管的中央日志记录提供托管时，有一些选项。其中一些是：
- en: 'Log Entries: [https://logentries.com/](https://logentries.com/)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志条目：[https://logentries.com/](https://logentries.com/)
- en: 'Loggly: [https://www.loggly.com/](https://www.loggly.com/)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Loggly：[https://www.loggly.com/](https://www.loggly.com/)
- en: Both of these services offer a free tier. Log Entries also offers a "Logentries
    DockerFree" account that you can find out more about at [https://logentries.com/docker/](https://logentries.com/docker/)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这两项服务都提供免费套餐。Log Entries还提供了一个“Logentries DockerFree”账户，你可以在[https://logentries.com/docker/](https://logentries.com/docker/)了解更多信息。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As recommended in the *Exploring Third Party Options* chapter, it is best to
    use a cloud service when evaluating third party services. The remainder of this
    chapter assumes that you are running a cloud host.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如*探索第三方选项*章节所建议的，在评估第三方服务时最好使用云服务。本章的其余部分假设你正在运行云主机。
- en: Let's look at configuring the Log Entries on an external server, first of all
    you need to have signed up for an account at [https://logentries.com/](https://logentries.com/).
    Once you have signed up, you should be taken to a page in which your logs will
    eventually be displayed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何在外部服务器上配置日志条目，首先你需要在[https://logentries.com/](https://logentries.com/)注册一个账户。注册完成后，你会被带到一个页面，你的日志最终会在这里显示。
- en: To start, click on the **Add new log** button in the top-right corner of the
    page and then click the Docker logo in the **Platforms** section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，点击页面右上角的**添加新日志**按钮，然后点击**平台**部分的Docker标志。
- en: 'You have to name your set of logs in the **Select set** section, so give a
    name to your log set. You now have the choice of building your own container locally
    using the Docker file from [https://github.com/logentries/docker-logentries](https://github.com/logentries/docker-logentries):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须在**选择集**部分为你的日志集命名。现在你可以选择使用来自[https://github.com/logentries/docker-logentries](https://github.com/logentries/docker-logentries)的Docker文件来本地构建你自己的容器：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After running the preceding command, you will get the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，你会得到以下输出：
- en: '![Looking at third party options](../images/00063.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![查看第三方选项](../images/00063.jpeg)'
- en: 'Before you start your container, you will need to generate an access token
    for your log set by clicking on **Generate Log Token**. Once you have this, you
    can launch your locally built containers using the following command (replace
    the token with the one you have just generated):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动容器之前，你需要通过点击**生成日志令牌**来生成日志集的访问令牌。一旦你拥有了这个令牌，你可以使用以下命令启动本地构建的容器（用你刚生成的令牌替换原来的令牌）：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can download the image straight from the Docker hub by running:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令直接从Docker hub下载镜像：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It's worth pointing out that the automatically generated instructions given
    by Log Entries launches the container in the foreground, rather than detaching
    from the container once it has been launched like the preceding instructions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 值得指出的是，Log Entries自动生成的指令会在前台启动容器，而不是像前面的指令那样在启动后与容器分离。
- en: 'Once you have the `docker-logentries` container up and running, you should
    start to see logs from your container streamed in real-time to your dashboard:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的`docker-logentries`容器启动并运行，你应该开始实时看到来自容器的日志流到你的仪表板上：
- en: '![Looking at third party options](../images/00064.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![查看第三方选项](../images/00064.jpeg)'
- en: From here, you will be able to query your logs, create dashboards, and create
    alerts depending on the account option you go for.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以查询你的日志，创建仪表板，并根据你选择的账户选项创建警报。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered how to query the `STDOUT` and `STDERR` output
    from your containers using the tool built into Docker, how to ship the messages
    to an external source, our ELK stack, and how to store the messages even after
    the container has been terminated. Finally, we have looked at a few of the third-party
    services who offer services to which you can stream your logs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了如何使用Docker内置工具查询容器的`STDOUT`和`STDERR`输出，如何将消息发送到外部源，我们的ELK堆栈，以及如何在容器终止后仍存储消息。最后，我们还看了一些第三方服务，它们提供服务，您可以将日志流式传输到这些服务。
- en: So why go to all of this effort? Monitoring isn't just about keeping and querying
    CPU, RAM, HDD, and Network utilization metrics; there is no point in knowing if
    there was a CPU spike an hour ago if you don't have access to the log files to
    see if any errors were being generated at that time.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要付出这么多努力呢？监控不仅仅是为了保持和查询CPU、RAM、HDD和网络利用率指标；如果您在一个小时前知道有CPU峰值，但在那个时候没有访问日志文件来查看是否生成了任何错误，那就没有意义。
- en: The services we have covered in this chapter offer the quickest and most efficient
    insights into what can quickly become a complex dataset.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的服务为我们提供了对可能迅速变得复杂的数据集的最快速和最有效的洞察。
- en: In the next chapter, we will look at all of the services and concepts we have
    covered in the book and apply them to some real world scenarios.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究本书涵盖的所有服务和概念，并将它们应用到一些真实场景中。
