- en: Chapter 20. Drawing Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第20章。绘图图形
- en: This entire chapter will be about the Android `Canvas` class and some related
    classes, such as `Paint`, `Color`, and `Bitmap`. When combined, these classes
    bring great power when it comes to drawing on the screen. Sometimes, the default
    UI provided by the Android API isn't what we need. If we want to make a drawing
    app, draw graphs, or perhaps make a game, we need to take control of every pixel
    that the Android device has to offer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 整个章节将讨论Android的`Canvas`类以及一些相关类，如`Paint`，`Color`和`Bitmap`。当这些类结合在一起时，在屏幕上绘图时会带来巨大的力量。有时，Android
    API提供的默认UI并不是我们所需要的。如果我们想要制作一个绘图应用程序，绘制图表，或者制作游戏，我们需要控制Android设备提供的每个像素。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Gain an understanding of the `Canvas` class and some related classes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解`Canvas`类及一些相关类
- en: Write a `Canvas`-based demo app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个基于`Canvas`的演示应用程序
- en: Look at the Android coordinate system so that we know where to do our drawing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Android坐标系统，以便知道在哪里进行绘制
- en: Learn about drawing and manipulating bitmap graphics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习绘制和操作位图图形
- en: Write a bitmap graphics-based demo app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个基于位图图形的演示应用程序
- en: So, let's get drawing!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始绘图吧！
- en: Understanding the Canvas class
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Canvas类
- en: 'The `Canvas` class is part of the `android.graphics` package. In the next two
    chapters, we will be using all the following `import` statements from the `android.graphics`
    package and one more from the now familiar `View` package. They give us access
    to some powerful drawing functions from the Android API:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Canvas`类是`android.graphics`包的一部分。在接下来的两章中，我们将使用`android.graphics`包中的所有以下`import`语句以及来自现在熟悉的`View`包的另一个`import`语句。它们为我们提供了从Android
    API中获取一些强大绘图功能的途径：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: First, let's talk about `Bitmap`, `Canvas`, and `ImageView`, as highlighted
    in the previous code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论前面代码中突出显示的`Bitmap`，`Canvas`和`ImageView`。
- en: Getting started drawing with Bitmap, Canvas, and ImageView
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bitmap，Canvas和ImageView开始绘制
- en: As Android is designed to run all types of mobile apps, we can't immediately
    start typing our drawing code and expect it to work. We need to do a bit of preparation
    (that is, more coding) to consider the specific device that our app is running
    on. It is true that some of this preparation can be slightly counterintuitive,
    but we will go through this one step at a time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Android设计用于运行各种类型的移动应用程序，我们不能立即开始输入我们的绘图代码并期望它能够工作。我们需要做一些准备（也就是更多的编码）来考虑我们的应用程序运行在特定设备上。这种准备有时可能有点反直觉，但我们将一步一步地进行。
- en: Canvas and Bitmap
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Canvas和Bitmap
- en: Depending on how you use the `Canvas` class, the term can be slightly misleading.
    While the `Canvas` class *is* the class that you draw your graphics to, such as
    a painting canvas, you still need a **surface** to transpose the canvas on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您如何使用`Canvas`类，这个术语可能会有点误导。虽然`Canvas`类确实是您绘制图形的类，就像绘画画布一样，但您仍然需要一个**表面**来转置画布。
- en: The surface, in this case (and in our first two demo apps), will be from the
    `Bitmap` class.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下（以及我们的前两个演示应用程序中），表面将来自`Bitmap`类。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that a bitmap is a type of image and Android has a `Bitmap` class. The
    `Bitmap` class can be used to draw bitmap images to the screen but, as we will
    see, it also has other uses as well. When talking about bitmap images and the
    `Bitmap` class I will try and be as clear as possible, so the distinction is as
    clear as possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，位图是一种图像类型，Android有一个`Bitmap`类。`Bitmap`类可用于将位图图像绘制到屏幕上，但正如我们将看到的那样，它还有其他用途。在谈论位图图像和`Bitmap`类时，我会尽量清晰明了，以便区分得更清楚。
- en: 'We can think of the process as follows: we get a `Canvas` object and a `Bitmap`
    object, and then set the `Bitmap` object as the part of the `Canvas` object to
    draw on.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个过程看作是：我们得到一个`Canvas`对象和一个`Bitmap`对象，然后将`Bitmap`对象设置为`Canvas`对象的一部分来进行绘制。
- en: This is slightly counterintuitive if you take the word "canvas" in its literal
    sense, but once it is all set up, we can forget about it and concentrate on the
    graphics that we want to draw.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按照字面意义理解"画布"这个词有点反直觉，但一旦设置好了，我们就可以忘记它，专注于我们想要绘制的图形。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `Canvas` class supplies the *ability* to draw. It has all the functions
    for doing things such as drawing shapes, text, lines, and image files (such as
    other bitmaps), and even supports plotting individual pixels.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Canvas`类提供了绘制的*能力*。它具有绘制形状、文本、线条和图像文件（如其他位图）的所有功能，甚至支持绘制单个像素。'
- en: The `Bitmap` class is used by the `Canvas` class and is the surface that gets
    drawn on. You can think of the `Bitmap` instance as being inside a picture frame
    on the `Canvas` instance.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bitmap`类由`Canvas`类使用，是被绘制的表面。您可以将`Bitmap`实例视为位于`Canvas`实例上的图片框。'
- en: Paint
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Paint
- en: In addition to `Canvas` and `Bitmap`, we will be using the `Paint` class. This
    is much easier to understand; `Paint` is the class that is used to configure specific
    properties, such as the color that we will draw on the `Bitmap` instance (within
    the `Canvas` instance).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Canvas`和`Bitmap`，我们还将使用`Paint`类。这更容易理解；`Paint`是用于配置特定属性的类，例如我们将在`Canvas`实例中绘制的颜色（在`Canvas`实例内的`Bitmap`实例上）。
- en: There is, however, still another piece of the puzzle before we can start drawing
    things.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们开始绘制之前，还有一个谜题需要解决。
- en: ImageView and Activity
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ImageView和Activity
- en: The `ImageView` class is the class that the `Activity` class will use to display
    output to the user. The reason for this third layer of abstraction is that, as
    we have seen throughout the book, the `Activity` class needs to pass a `View`
    reference to the `setContentView` function to display something to the user. Throughout
    the book, this has been a layout that we created in the visual designer or in
    XML code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageView`类是`Activity`类用于向用户显示输出的类。引入这第三层抽象的原因是，正如我们在整本书中所看到的，`Activity`类需要将一个`View`引用传递给`setContentView`函数，以向用户显示内容。在整本书中，这一直是我们在可视化设计器或XML代码中创建的布局。'
- en: This time, however, we don't want a UI – instead, we want to draw lines, pixels,
    images, and shapes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这一次我们不需要用户界面 - 相反，我们需要绘制线条、像素、图像和形状。
- en: There are multiple classes that inherit from `View` that enable all different
    types of apps to be made, and they will all be compatible with the `Activity`
    class, which is the foundation of all regular Android apps (including drawing
    apps and games).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个从 `View` 继承的类，可以制作所有不同类型的应用程序，并且它们都与 `Activity` 类兼容，这是所有常规 Android 应用程序（包括绘图应用程序和游戏）的基础。
- en: It is, therefore, necessary to associate the `Bitmap` class that gets drawn
    on (through its association with `Canvas`) with the `ImageView` class, once the
    drawing is done. The last step will be to tell the `Activity` class that our `ImageView`
    represents the content for the user to see by passing it to `setContentView`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有必要将在 `Canvas` 上绘制的 `Bitmap` 类与 `ImageView` 类关联起来，一旦绘制完成。最后一步是通过将其传递给 `setContentView`
    来告诉 `Activity` 类，我们的 `ImageView` 代表用户要看到的内容。
- en: Canvas, Bitmap, Paint, and ImageView – a quick summary
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Canvas、Bitmap、Paint 和 ImageView - 简要总结
- en: If the theory of the code structure that we need to set up doesn't appear simple,
    then you will breathe a sigh of relief when you see the relatively simple code
    later.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要设置的代码结构理论看起来并不简单，那么当你看到稍后的相对简单的代码时，你会松一口气。
- en: 'Here is a quick summary of what we''ve covered so far:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经覆盖了以下内容：
- en: Every app needs an `Activity` class to interact with the user and the underlying
    operating system. Therefore, we must conform to the required hierarchy if we want
    to succeed.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个应用程序都需要一个 `Activity` 类来与用户和底层操作系统交互。因此，如果我们想成功，我们必须遵循所需的层次结构。
- en: We will use the `ImageView` class, which inherits from the `View` class. The
    `View` class is what `Activity` needs to display our app to the user.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用继承自 `View` 类的 `ImageView` 类。`View` 类是 `Activity` 需要显示我们的应用程序给用户的东西。
- en: The `Canvas` class supplies the *ability* to draw lines, pixels, and other graphics.
    It has all the functions for doing things, such as drawing shapes, text, lines,
    and image files, and even supports plotting individual pixels.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Canvas` 类提供了绘制线条、像素和其他图形的 *能力*。它具有执行诸如绘制形状、文本、线条和图像文件等操作的所有功能，甚至支持绘制单个像素。'
- en: The `Bitmap` class will be associated with the `Canvas` class, and it is the
    surface that gets drawn on.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Bitmap` 类将与 `Canvas` 类关联，它是被绘制的表面。'
- en: The `Canvas` class uses the `Paint` class to configure details, such as the
    color that is drawn.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Canvas` 类使用 `Paint` 类来配置细节，比如绘制的颜色。'
- en: Finally, once the `Bitmap` instance has been drawn on, we must associate it
    with the `ImageView` class, which, in turn, is set as the view for the `Activity`
    instance.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，一旦 `Bitmap` 实例被绘制，我们必须将其与 `ImageView` 类关联起来，而 `ImageView` 类又被设置为 `Activity`
    实例的视图。
- en: The result will be that what we draw on the `Bitmap` instance in the `Canvas`
    instance will be displayed to the user through the `ImageView` instance via the
    call to `setContentView`. Phew!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是我们在 `Canvas` 实例中绘制的 `Bitmap` 实例将通过调用 `setContentView` 显示给用户的 `ImageView`
    实例。呼～
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It doesn't matter if this isn't 100% clear. It is not you that isn't seeing
    things clearly – it simply isn't a clear relationship. Writing the code and using
    the techniques over and over will cause things to become clearer. Take a look
    at the code, perform the demo apps in this chapter and the next, and then re-read
    this section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这并不是100%清楚也没关系。不是你看不清楚 - 它只是没有清晰的关系。编写代码并反复使用这些技术将使事情变得更清晰。看看代码，执行本章和下一章的演示应用程序，然后重新阅读本节。
- en: Let's take a look at how to set up this relationship in code – don't worry about
    typing the code; we will just study it first.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在代码中建立这种关系 - 不要担心输入代码；我们先来学习它。
- en: Using the Canvas class
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Canvas 类
- en: Let's take a look at the code and the different stages that are required to
    get drawing, then we can quickly move on to drawing something, for real, with
    the `Canvas` demo app.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码和获取绘图所需的不同阶段，然后我们可以快速转移到使用 `Canvas` 演示应用程序真正绘制一些东西。
- en: Preparing the instances of the required classes
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备所需类的实例
- en: The first step is to turn the classes that we need into usable instances.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将我们需要的类转换为可用的实例。
- en: 'First, we declare all the instances that we require. We can''t initialize the
    instances right away, but we can make sure that we initialize them before they
    are used, so we use `lateinit` in the same way we did in the Animation demo app:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们声明我们需要的所有实例。我们不能立即初始化这些实例，但我们可以确保在使用它们之前初始化它们，所以我们在同样的方式中使用 `lateinit`，就像在动画演示应用程序中一样：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code declares references of the `ImageView`, `Bitmap`, `Canvas`,
    and `Paint` types. They are named `myImageView`, `myBlankBitmap`, `myCanvas`,
    and `myPaint`, respectively.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码声明了 `ImageView`、`Bitmap`、`Canvas` 和 `Paint` 类型的引用。它们分别被命名为 `myImageView`、`myBlankBitmap`、`myCanvas`
    和 `myPaint`。
- en: Initializing the objects
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化对象
- en: 'Next, we need to initialize our new objects before using them:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在使用它们之前初始化我们的新对象：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Notice the following comment in the previous code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意上一个代码中的以下注释：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is where we will configure our color and draw our graphics. Additionally,
    notice at the top of the code that we declare and initialize two `Int` variables,
    called `widthInPixels` and `heightInPixels`. When we code the `Canvas` demo app,
    I will go into greater detail about some of those lines of code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将配置颜色并绘制图形的地方。另外，请注意在代码顶部我们声明并初始化了两个 `Int` 变量，称为 `widthInPixels` 和 `heightInPixels`。当我们编写
    `Canvas` 演示应用程序时，我将更详细地介绍其中一些代码行。
- en: We are now ready to draw; all we need to do is assign the `ImageView` instance
    to the `Activity` via the `setContentView` function.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好绘制；我们所需要做的就是通过 `setContentView` 函数将 `ImageView` 实例分配给 `Activity`。
- en: Setting the Activity content
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Activity 内容
- en: 'Finally, before we can see our drawing, we tell Android to use our `ImageView`
    instance, called `myImageView`, as the content to display to the user:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们看到我们的绘图之前，我们告诉Android使用我们的名为“myImageView”的“ImageView”实例作为要显示给用户的内容：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you have already seen in every app so far, the `setContentView` function
    is part of the `Activity` class, and this time we pass in `myImageView` as an
    argument, instead of an XML layout as we have been doing throughout the book.
    That's it – all we have to learn now is how to actually draw on the `Bitmap` instance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在迄今为止的每个应用程序中已经看到的，“setContentView”函数是“Activity”类的一部分，这一次我们将“myImageView”作为参数传递，而不是像我们在整本书中一直做的那样传递XML布局。就是这样
    - 现在我们要学习的就是如何在“Bitmap”实例上实际绘制。
- en: Before we do some drawing, it will be useful to start a real project. We will
    copy and paste the code that we have just discussed, one step at a time, into
    the correct place, and then actually see something drawn on the screen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行一些绘图之前，启动一个真正的项目将非常有用。我们将逐步复制并粘贴我们刚刚讨论过的代码到正确的位置，然后实际上在屏幕上看到一些绘制的东西。
- en: So, let's do some drawing.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始绘图吧。
- en: The Canvas Demo app
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Canvas Demo应用程序
- en: First, create a new project to explore the topic of drawing with `Canvas`. We
    will reuse what we have learned and, this time, we will also draw to the `Bitmap`
    instance.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个新项目来探索使用“Canvas”进行绘图的主题。我们将重复利用我们所学到的知识，这一次我们还将绘制到“Bitmap”实例上。
- en: Creating a new project
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新项目
- en: Create a new project and call it `Canvas Demo`, and make sure that you choose
    the **Empty Activity** template option.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新项目，将其命名为“Canvas Demo”，并确保选择**空活动**模板选项。
- en: In this app, we will make a change that we have not seen before. We will be
    using the vanilla version of the `Activity` class. Therefore, `MainActivity` will
    inherit from `Activity` instead of `AppCompatActivity`, as has been the case previously.
    We are doing this because we are not using a layout from an XML file, and so we
    have no need for the backward compatibility features of `AppCompatActivity` as
    we did in all the previous projects.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将进行一个以前未见过的更改。我们将使用“Activity”类的原始版本。因此，“MainActivity”将继承自“Activity”，而不是之前一直使用的“AppCompatActivity”。我们这样做是因为我们不使用来自XML文件的布局，因此我们不需要“AppCompatActivity”的向后兼容功能，就像在以前的所有项目中一样。
- en: You should edit the class declaration as follows.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该编辑类声明如下。
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will also need to add the following import statement:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要添加以下导入语句：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete code for this app can be found in the download bundle in the `Chapter20/Canvas
    Demo` folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的完整代码可以在“Chapter20/Canvas Demo”文件夹的下载包中找到。
- en: Coding the Canvas demo app
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写Canvas演示应用程序
- en: Next, delete all the contents of the `onCreate` function, except the declaration/signature,
    call to super.onCreate, and the opening and closing curly braces.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，删除“onCreate”函数的所有内容，除了声明/签名、调用super.onCreate以及打开和关闭大括号。
- en: 'Now, we can add the following highlighted code after the class declaration,
    but before the `onCreate` function. This is what the code will look like after
    this step:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在类声明之后但在“onCreate”函数之前添加以下突出显示的代码。在此步骤之后，代码将如下所示：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice in Android Studio that the four new classes are underlined in red. This
    is because we need to add the appropriate `import` statements. You could copy
    them from the first page of this chapter, but it will be much quicker to place
    the mouse cursor on each error in turn, and then hold the *ALT* key and tap the
    *Enter* key. If prompted from the pop-up options, select **Import class**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中，四个新类都被下划线标记为红色。这是因为我们需要添加适当的“import”语句。您可以从本章的第一页复制它们，但更快的方法是依次将鼠标光标放在每个错误上，然后按住*ALT*键并轻按*Enter*键。如果从弹出选项中提示，请选择**导入类**。
- en: Once you have done this for `ImageView`, `Bitmap`, `Canvas`, and `Paint`, all
    the errors will be gone, and the relevant `import` statements will have been added
    to the top of the code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成对“ImageView”、“Bitmap”、“Canvas”和“Paint”的操作后，所有错误都将消失，并且相关的“import”语句将被添加到代码的顶部。
- en: 'Now that we have declared instances of the required classes, we can initialize
    them. Add the following code to the `onCreate` function after the call to `super.onCreate…`,
    as shown in the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经声明了所需类的实例，我们可以对它们进行初始化。将以下代码添加到“onCreate”函数中，添加到“super.onCreate…”之后，如下所示：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This preceding code is the same as the code that we saw when we were discussing
    `Canvas` in theory. However, it is worth exploring the `Bitmap` class initialization
    a little more as it is not straightforward.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码与我们在理论上讨论“Canvas”时看到的代码相同。但是，值得更深入地探索“Bitmap”类的初始化，因为它并不简单。
- en: Exploring the Bitmap initialization
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 探索位图初始化
- en: Bitmaps, more typically in graphics-based apps and games, are used to represent
    objects, such as different brushes to paint with, a player character, backgrounds,
    game objects, and more. Here, we are simply using it to draw on. In the next project,
    we will use bitmaps to represent the subject of our drawing and not just the surface
    to draw on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 位图在基于图形的应用程序和游戏中更常见，用于表示不同的画笔、玩家角色、背景、游戏对象等对象。在这里，我们只是用它来绘制。在下一个项目中，我们将使用位图来表示我们绘制的主题，而不仅仅是绘制的表面。
- en: 'The function that requires explaining is the `createBitmap` function. The parameters
    from left to right are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 需要解释的函数是“createBitmap”函数。从左到右的参数如下：
- en: Width (in pixels)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度（以像素为单位）
- en: Height (in pixels)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度（以像素为单位）
- en: The bitmap configuration
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位图配置
- en: '`Bitmap` instances can be configured in several different ways; the `ARGB_8888`
    configuration means that each pixel is represented by four bytes of memory.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “Bitmap”实例可以以几种不同的方式进行配置；“ARGB_8888”配置意味着每个像素由四个字节的内存表示。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are a number of bitmap formats that Android can use. This one is perfect
    for a good range of color and will ensure that the bitmaps we use and the color
    that we request will be drawn as intended. There are higher and lower configurations,
    but `ARGB_8888` is a good fit for this book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Android可以使用多种位图格式。这种格式非常适合绘制一系列颜色，并确保我们使用的位图和请求的颜色将按预期绘制。还有更高和更低的配置，但`ARGB_8888`非常适合本书。
- en: Now, we can do the actual drawing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以进行实际绘制。
- en: Drawing on the screen
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在屏幕上绘制
- en: 'Add the following highlighted code after the initialization of `myPaint` and
    inside the closing curly brace of the `onCreate` function:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`myPaint`初始化之后和`onCreate`函数的闭合大括号内添加以下突出显示的代码：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous code uses:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用：
- en: '`myCanvas.drawColor` to fill the screen with color'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myCanvas.drawColor`用颜色填充屏幕'
- en: The `myPaint.textSize` property defines the size of the text that will be drawn
    next
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myPaint.textSize`属性定义了接下来将绘制的文本的大小'
- en: The `myPaint.color` property determines what color any future drawing will be
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myPaint.color`属性决定了未来任何绘图的颜色'
- en: The `myCanvas.drawText` function actually draws the text to the screen.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myCanvas.drawText`函数实际上将文本绘制到屏幕上。'
- en: If we analyze the arguments passed into `drawText`, we can see that the text
    will say "Hello World!", and that it will be drawn 100 pixels from the left and
    100 pixels from the top of our `Bitmap` instance (`myBitmap`).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们分析传递给`drawText`的参数，我们可以看到文本将会显示"Hello World!"，并且将在我们的`Bitmap`实例(`myBitmap`)的左侧100像素和顶部100像素处绘制。
- en: Next, we use the `color` property again to change the color that will be used
    for drawing. Finally, we use the `drawCircle` function to draw a circle that is
    400 pixels from the left, and 100 pixels from the top. The circle will have a
    radius of 100 pixels.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们再次使用`color`属性来更改将用于绘制的颜色。最后，我们使用`drawCircle`函数来绘制一个距左侧400像素，顶部100像素的圆。圆的半径为100像素。
- en: I have refrained from explaining the `Color.argb` function until now.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我一直没有解释`Color.argb`函数。
- en: Explaining Color.argb
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解释Color.argb
- en: The `Color` class, unsurprisingly, helps us to manipulate and represent color.
    The `argb` function returns a color that is constructed using the **a**lpha (for
    opacity and transparency), **r**ed, **g**reen, **b**lue model. This model uses
    values ranging from 0 (no color) to 255 (full color) for each element. It is important
    to note – although, it might seem obvious – that the mixed colors are intensities
    of different colored light, and the results are quite different to what happens
    when we mix paint, for example.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Color`类，不出所料，帮助我们操纵和表示颜色。`argb`函数返回使用**a**lpha（不透明度和透明度）、**r**ed、**g**reen、**b**lue模型构建的颜色。该模型对于每个元素使用从0（无颜色）到255（全颜色）的值。重要的是要注意
    - 尽管这似乎是显而易见的 - 混合颜色是不同颜色光的强度，结果与我们混合颜料时发生的情况完全不同。'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'To devise an ARGB value and explore this model further, take a look at this
    handy website: [https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html).
    The website helps you to pick the RGB values; you can then experiment with the
    alpha values.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要设计ARGB值并进一步探索这个模型，请查看这个方便的网站：[https://www.rapidtables.com/web/color/RGB_Color.html](https://www.rapidtables.com/web/color/RGB_Color.html)。该网站可以帮助您选择RGB值；然后您可以尝试alpha值。
- en: The values used to clear the drawing surface were `255`, `0`, `0`, and `255`.
    These values mean full opacity (that is, solid color), no red, no green, and full
    blue. This makes a blue color.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 用于清除绘图表面的值是`255`、`0`、`0`和`255`。这些值表示完全不透明（即纯色），没有红色，没有绿色，完全蓝色。这会产生蓝色。
- en: The next call to the `argb` function is in the first call to `setColor`, where
    we are setting the required color for the text. The `255`, `255`, `255`, and `255`
    values mean full opacity, full red, full green, and full blue. When you combine
    light with these values, you will get white.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对`argb`函数的下一个调用是在`setColor`的第一个调用中，我们正在为文本设置所需的颜色。`255`、`255`、`255`和`255`的值表示完全不透明，完全红色，完全绿色和完全蓝色。当您将光与这些值结合时，您将得到白色。
- en: The final call to `argb` is in the final call to `setColor`, where we are setting
    the color to draw the circle; `255`, `21`, `207`, and `62` makes a sun-yellow
    color.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对`argb`的最终调用是在`setColor`的最终调用中，我们正在设置绘制圆的颜色；`255`、`21`、`207`和`62`产生太阳黄色。
- en: 'The last step that we need to perform before we can run the code is to add
    the call to the `setContentView` function, which places our `ImageView` instance
    (`myImageView`) as the view to be set as the content for this app. Here are the
    final lines of code for after the code that we have already added, but before
    the closing curly brace of `onCreate`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行代码之前，我们需要执行的最后一步是添加对`setContentView`函数的调用，将我们的`ImageView`实例(`myImageView`)放置为此应用程序的内容视图。以下是我们已经添加的代码之后，但在`onCreate`的闭合大括号之前的最后几行代码：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, we tell the `Activity` class to use `myImageView` by calling `setContentView`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过调用`setContentView`告诉`Activity`类使用`myImageView`。
- en: 'The following screenshot illustrates what the Canvas demo app looks like when
    you run it. We can see an 800 by 800-pixel drawing. In the next chapter, we will
    use more advanced techniques to utilize the entire screen, and we will also learn
    about threads to make the graphics move in real time:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图展示了当您运行Canvas演示应用程序时的外观。我们可以看到一个800x800像素的绘图。在下一章中，我们将使用更高级的技术来利用整个屏幕，并且我们还将学习有关线程，以使图形实时移动：
- en: '![Explaining Color.argb](img/B12806_C20_01.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![解释Color.argb](img/B12806_C20_01.jpg)'
- en: It will help you to understand the result of the coordinates that we use in
    our `Canvas` drawing functions if you know more about the Android coordinate system.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您了解Android坐标系统的更多信息，将有助于您理解我们在`Canvas`绘图函数中使用的坐标的结果。
- en: The Android coordinate system
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android坐标系统
- en: As you will see, drawing a bitmap graphic is trivial. However, the coordinate
    system that we use to draw our graphics on requires a brief explanation.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将看到的，绘制位图图形是微不足道的。但是，我们用来绘制图形的坐标系统需要简要解释。
- en: Plotting and drawing
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘图和绘制
- en: When we draw a bitmap graphic on the screen, we pass in the coordinates that
    we want to draw the object to. The available coordinates of a given Android device
    depend upon the resolution of its screen.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在屏幕上绘制位图图形时，我们传入要绘制对象的坐标。给定Android设备的可用坐标取决于其屏幕的分辨率。
- en: For example, the Google Pixel phone has a screen resolution of 1,920 pixels
    (across) by 1,080 pixels (down) when held in landscape orientation.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Google Pixel手机在横向方向上的屏幕分辨率为1,920像素（横向）x 1,080像素（纵向）。
- en: The numbering system of these coordinates starts in the top left-hand corner
    at 0,0, and proceeds downward and to the right until the bottom-right corner is
    pixel 1919, 1079\. The apparent 1-pixel disparity between 1,920/1,919 and 1,080/1,079
    is because the numbering starts at 0\.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些坐标的编号系统从左上角的0,0开始，向下和向右移动，直到右下角是像素1919, 1079。1,920/1,919和1,080/1,079之间明显的1像素差异是因为编号从0开始。
- en: So, when we draw a bitmap graphic or anything else on the screen (such as `Canvas`
    circles and rectangles), we must specify an *x*, *y* coordinate.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们在屏幕上绘制位图图形或其他任何东西（如`Canvas`圆和矩形）时，我们必须指定*x*，*y*坐标。
- en: Furthermore, a bitmap graphic (or `Canvas` shape), of course, comprises many
    pixels. So, which pixel of a given bitmap graphic is drawn at the *x*, *y* screen
    coordinate that we will be specifying?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，位图图形（或`Canvas`形状）当然包括许多像素。因此，我们将要指定的*x*，*y*屏幕坐标上绘制给定位图图形的哪个像素？ '
- en: 'The answer is the top-left pixel of the bitmap graphic. Take a look at the
    next diagram, which should clarify the screen coordinates using the Google Pixel
    phone as an example. As a graphical means for explaining the Android coordinate
    drawing system, I will use a cute spaceship graphic:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是位图图形的左上角像素。看一下下一个图表，它应该使用Google Pixel手机作为示例来澄清屏幕坐标。作为解释Android坐标绘制系统的图形手段，我将使用一个可爱的太空飞船图形：
- en: '![Plotting and drawing](img/B12806_C20_02.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![绘图和绘制](img/B12806_C20_02.jpg)'
- en: Furthermore, the coordinates are relative to what you draw on. So, in the `Canvas`
    demo that we just coded and in the next demo, the coordinates are relative to
    the `Bitmap` object (`myBitmap`). In the next chapter, we will use the entire
    screen, and the previous diagram will be a more accurate representation of what
    is happening.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些坐标是相对于您绘制的内容。因此，在我们刚刚编写的`Canvas`演示和下一个演示中，坐标是相对于`Bitmap`对象（`myBitmap`）的。在下一章中，我们将使用整个屏幕，上一个图表将更准确地表示发生的情况。
- en: Let's do some more drawing – this time with bitmap graphics (and the `Bitmap`
    class again). We will use the same starting code as we have seen in this app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些更多的绘图 - 这次使用位图图形（再次使用`Bitmap`类）。我们将使用与此应用程序中看到的相同的起始代码。
- en: Creating bitmap graphics with the Bitmap class
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bitmap类创建位图图形
- en: Let's examine a bit of theory before we dive into the code and consider exactly
    how we are going to draw images to the screen. To draw a bitmap graphic, we will
    use the `drawBitmap` function of the `Canvas` class.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入代码之前，让我们先研究一些理论，并考虑我们将如何将图像绘制到屏幕上。要绘制位图图形，我们将使用`Canvas`类的`drawBitmap`函数。
- en: First, we will need to add a bitmap graphic to the project in the `res/drawable`
    folder – we will do this in reality in the Bitmap demo app later. For now, assume
    that the graphics file/bitmap has a name of `myImage.png`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`res/drawable`文件夹中的项目中添加一个位图图形 - 我们将在Bitmap演示应用程序中进行这个操作。现在，假设图形文件/位图的名称为`myImage.png`。
- en: Next, we will declare an object of the `Bitmap` type in the same way that we
    did for the `Bitmap` object that we used for our background in the previous demo.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将以与我们在上一个演示中用于背景的`Bitmap`对象相同的方式声明`Bitmap`类型的对象。
- en: 'Next, we will need to initialize the `myBitmap` instance using our preferred
    image file, which we previously added to the project''s `drawable` folder:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用我们之前添加到项目的`drawable`文件夹中的首选图像文件来初始化`myBitmap`实例：
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `decodeResource` function of the `BitmapFactory` class is used to initialize
    `myBitmap`. It takes two parameters; the first is the `resources` property that
    is made available by the `Activity` class. This function, as the name suggests,
    gives access to the project resources, and the second parameter, `R.drawable.myImage`,
    points to the `myImage.png` file in the `drawable` folder. The `Bitmap` (`myBitmap`)
    instance is now ready to be drawn by the `Canvas` class.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`BitmapFactory`类的`decodeResource`函数用于初始化`myBitmap`。它需要两个参数；第一个是`Activity`类提供的`resources`属性。这个函数，正如其名称所示，可以访问项目资源，第二个参数`R.drawable.myImage`指向`drawable`文件夹中的`myImage.png`文件。`Bitmap`（`myBitmap`）实例现在已准备好由`Canvas`类绘制。'
- en: 'You can now draw the bitmap graphic via the `Bitmap` instance with the following
    code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下代码通过`Bitmap`实例绘制位图图形：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is what the spaceship graphic from the previous section looks like when
    drawn on the screen (just for reference when we talk about rotating bitmaps):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当在屏幕上绘制时，上一节中太空飞船图形的样子如下（仅供参考，当我们谈论旋转位图时）：
- en: '![Creating bitmap graphics with the Bitmap class](img/B12806_C20_03.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bitmap类创建位图图形](img/B12806_C20_03.jpg)'
- en: Manipulating bitmaps
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作位图
- en: Quite often, however, we need to draw bitmaps in a rotated or otherwise altered
    state. It is quite easy to use Photoshop, or whatever your favorite image editing
    software happens to be and create more bitmaps from the original bitmap to face
    other directions. Then, when we come to draw our bitmap, we can simply decide
    which way and draw the appropriate pre-loaded bitmap.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通常情况下，我们需要以旋转或其他方式改变的状态绘制位图。使用Photoshop或您喜欢的其他图像编辑软件创建更多的位图以面向其他方向是非常容易的。然后，当我们要绘制位图时，我们可以简单地决定以哪种方式绘制适当的预加载位图。
- en: However, I think it will be much more interesting and instructive if we work
    with just the one single source image and learn about the class that Android provides
    to manipulate images with our Kotlin code. You will then be able to add rotating
    and inverting graphics to your app developer's toolkit.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们只使用一个单一的源图像并学习Android提供的用于在Kotlin代码中操作图像的类，那将会更有趣和有教育意义。然后，你就可以将旋转和反转图形添加到你的应用程序开发工具包中。
- en: What is a bitmap?
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是位图？
- en: 'A bitmap is called a bitmap because that is exactly what it is: a *map of bits*.
    While there are many bitmap formats that use different ranges and values to represent
    colors and transparency, they all amount to the same thing. They are a grid or
    map of values and each value represents the color of a single pixel.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 位图之所以被称为位图，是因为它确实就是一个“位的地图”。虽然有许多使用不同范围和值来表示颜色和透明度的位图格式，但它们都归结为同一件事。它们是一组值的网格或地图，每个值代表一个像素的颜色。
- en: Therefore, to rotate, scale, or invert a bitmap, we must perform the appropriate
    mathematical calculation on each pixel or bit of the image, grid, or map of the
    bitmap. The calculations are not terribly complicated, but they are not especially
    simple either. If you took math to the end of high school, you will probably understand
    the math without too much difficulty.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要旋转、缩放或反转位图，我们必须对位图的每个像素或位进行适当的数学计算。这些计算并不是非常复杂，但也不是特别简单。如果你上完高中的数学课，你可能不会对这些数学感到太困难。
- en: Unfortunately, understanding the math isn't enough. We will also need to devise
    efficient code as well as understand the bitmap format, and then modify our code
    for each format; this is not trivial. Fortunately (as we have come to expect),
    the Android API has done it all for us – meet the `Matrix` class.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，理解数学还不够。我们还需要设计高效的代码，了解位图格式，然后针对每种格式修改我们的代码；这并不是微不足道的。幸运的是（正如我们所期望的那样），Android
    API已经为我们做好了一切 - 认识`Matrix`类。
- en: The Matrix class
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Matrix类
- en: The class is named `Matrix` because it uses the mathematical concept and rules
    to perform calculations on a series of values known as matrices – the plural of
    matrix.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类被命名为`Matrix`，是因为它使用数学概念和规则来对一系列值进行计算，这些值被称为矩阵 - 矩阵的复数。
- en: Tip
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Android `Matrix` class has nothing to do with the movie series of the same
    name. However, the author advises that all aspiring app developers take the **red**
    pill.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Android的`Matrix`类与同名电影系列无关。然而，作者建议所有有抱负的应用程序开发者服用**红色**药丸。
- en: You might be familiar with matrices, but don't worry if you're not, because
    the `Matrix` class hides all the complexity away. Furthermore, the `Matrix` class
    not only allows us to perform calculations on a series of values, but it also
    has some pre-prepared calculations that enable us to do things such as rotate
    a point around another point by a specific number of degrees. We get all this
    without knowing anything about trigonometry.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对矩阵很熟悉，但如果你不熟悉也不用担心，因为`Matrix`类将所有复杂性都隐藏起来了。此外，`Matrix`类不仅允许我们对一系列值进行计算，还具有一些预先准备好的计算，使我们能够做一些事情，比如围绕另一个点旋转一个点特定角度，而无需了解三角学。
- en: Tip
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you are intrigued by how the math works behind the scenes of the `Matrix`
    class and want an absolute beginner''s guide to the mathematics of rotating game
    objects, then look at this series of Android tutorials on my website, which ends
    with a flyable and rotatable spaceship. These tutorials are in Java, but should
    be quite straightforward to follow:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对`Matrix`类背后的数学运作感兴趣，并且想要一个绝对初学者指南来学习旋转游戏对象的数学，那么请查看我网站上的这一系列Android教程，其中包括一个可飞行和可旋转的太空飞船。这些教程是用Java编写的，但应该很容易理解：
- en: '[http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/)'
- en: '[http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/](http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/](http://gamecodeschool.com/essentials/rotating-graphics-in-2d-games-using-trigonometric-functions-part-2/)'
- en: '[http://gamecodeschool.com/android/2d-rotation-and-heading-demo/](http://gamecodeschool.com/android/2d-rotation-and-heading-demo/)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://gamecodeschool.com/android/2d-rotation-and-heading-demo/](http://gamecodeschool.com/android/2d-rotation-and-heading-demo/)'
- en: This book will stick to using the Android `Matrix` class, but we will do slightly
    more advanced math when we create a particle system in the next chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书将继续使用Android的`Matrix`类，但在下一章中创建粒子系统时，我们将进行稍微更高级的数学运算。
- en: Inverting a bitmap to face the opposite direction
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将位图反转以面对相反方向
- en: 'First, we need to create an instance of the `Matrix` class. The following line
    of code does so in a familiar way by calling the default constructor:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个`Matrix`类的实例。下面的代码行以熟悉的方式调用默认构造函数来实现这一点：
- en: '[PRE13]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you don't need to add any of this code to a project right now; it
    will all be shown again shortly with much more context. I just thought it would
    be easier to see all the `Matrix`-related code on its own beforehand.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你现在不需要将任何这些代码添加到项目中；它很快就会再次显示，并且会有更多的上下文。我只是觉得在此之前单独看到所有与`Matrix`相关的代码会更容易些。
- en: 'Now we can use one of the many neat functions of the `Matrix` class. The `preScale`
    function takes two parameters; one for the horizontal change and one for the vertical
    change. Take a look at the following line of code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`Matrix`类的许多巧妙功能之一。`preScale`函数接受两个参数；一个用于水平变化，一个用于垂直变化。看一下下面的代码行：
- en: '[PRE14]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What the `preScale` function will do is loop through every pixel position and
    multiply all the horizontal coordinates by `-1`, and all the vertical coordinates
    by `1`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`preScale`函数将循环遍历每个像素位置，并将所有水平坐标乘以`-1`，所有垂直坐标乘以`1`。'
- en: The effect of these calculations is that all the vertical coordinates will remain
    the same, because if you multiply by one, then the number doesn't change. However,
    when you multiply by minus one, the horizontal position of the pixel will be inverted.
    For example, horizontal positions 0, 1, 2, 3, and 4 will become 0, -1, -2, -3,
    and -4.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些计算的效果是所有垂直坐标将保持不变，因为如果乘以一，那么数字不会改变。但是，当您乘以负一时，像素的水平位置将被倒转。例如，水平位置0、1、2、3和4将变为0、-1、-2、-3和-4。
- en: 'At this stage, we have created a matrix that can perform the necessary calculations
    on a bitmap. We haven''t actually done anything to the bitmap yet. To use the
    `Matrix` instance, we call the `createBitmap` function of the `Bitmap` class,
    as in the following line of code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经创建了一个可以在位图上执行必要计算的矩阵。我们实际上还没有对位图做任何事情。要使用`Matrix`实例，我们调用`Bitmap`类的`createBitmap`函数，如下面的代码行：
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The previous code assumes that `myBitmapLeft` is already initialized along
    with `myBitmapRight`. The parameters to the `createBitmap` function are explained
    as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码假设`myBitmapLeft`已经与`myBitmapRight`一起初始化。`createBitmap`函数的参数解释如下：
- en: '`myBitmapRight` is a `Bitmap` object that has already been created and scaled
    and has the image (facing to the right) loaded into it. This is the image that
    will be used as the source for creating the new `Bitmap` instance. The source
    `Bitmap` object will not be altered at all.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myBitmapRight`是一个已经创建并缩放的`Bitmap`对象，并且已经加载了图像（面向右侧）。这是将用作创建新`Bitmap`实例的源的图像。源`Bitmap`对象将不会被改变。'
- en: '`0, 0` is the horizontal and vertical starting position that we want the new
    `Bitmap` instance to be mapped to.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0, 0`是我们希望将新的`Bitmap`实例映射到的水平和垂直起始位置。'
- en: The `50, 25` parameters are values that set the size that the bitmap is scaled
    to.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`50, 25`参数是设置位图缩放到的大小。'
- en: The next parameter is our pre-prepared `Matrix` instance, `matrix`.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个参数是我们预先准备的`Matrix`实例`matrix`。
- en: The final parameter, `true`, instructs the `createBitmap` function that filtering
    is required to correctly handle the creation of the `Bitmap` type.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数`true`指示`createBitmap`函数需要过滤以正确处理`Bitmap`类型的创建。
- en: 'This is what `myBitmapLeft` will look like when drawn to the screen:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在绘制到屏幕时`myBitmapLeft`的样子：
- en: '![Inverting a bitmap to face the opposite direction](img/B12806_C20_04.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![将位图反转以面向相反方向](img/B12806_C20_04.jpg)'
- en: We can also create the bitmap facing up and down using a rotation matrix.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用旋转矩阵创建面向上和下的位图。
- en: Rotating the bitmap to face up and down
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将位图旋转以面向上和下
- en: 'Let''s take a look at rotating a `Bitmap` instance and then we can build the
    demo app. We already have an instance of the `Matrix` class, so all we have to
    do is call the `preRotate` function to create a matrix that is capable of rotating
    every pixel by a specified number of degrees in the single argument to `preRotate`.
    Take a look at the following line of code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何旋转`Bitmap`实例，然后我们可以构建演示应用程序。我们已经有了`Matrix`类的一个实例，所以我们只需要调用`preRotate`函数来创建一个能够将每个像素旋转指定角度的矩阵，该角度作为`preRotate`的单个参数。看看下面的代码行：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How simple was that? The `matrix` instance is now ready to rotate any series
    of numbers (map of bits) we pass to it, anti-clockwise (`-`), by `90` degrees.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 是不是很简单？`matrix`实例现在已经准备好以逆时针（`-`）`90`度旋转我们传递给它的任何一系列数字（位图）。
- en: 'The following line of code has the same parameters as the previous call to
    `createBitmap` that we dissected, except that the new `Bitmap` instance is assigned
    to `myBitmapUp`, and the effect of `matrix` is to perform the rotate instead of
    the `preScale` function:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行与我们分解的先前对`createBitmap`的调用具有相同的参数，只是新的`Bitmap`实例分配给了`myBitmapUp`，并且`matrix`的效果是执行旋转而不是`preScale`函数：
- en: '[PRE17]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is what `myBitmapUp` will look like when drawn:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在绘制时`myBitmapUp`的样子：
- en: '![Rotating the bitmap to face up and down](img/B12806_C20_05.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![将位图旋转以面向上和下](img/B12806_C20_05.jpg)'
- en: You can also use the same technique, but with a different value, in the argument
    to `preRotate` to face the bitmap downward. Let's get on with the demo app to
    see all this stuff in action.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用相同的技术，但在`preRotate`的参数中使用不同的值，以使位图面向下。让我们继续演示应用程序，看看所有这些东西是如何运作的。
- en: The Bitmap manipulation demo app
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bitmap操作演示应用程序
- en: Now that we have studied the theory, let's draw and spin some bitmaps. First,
    create a new project and call it `Bitmap manipulation`. Choose the **Empty Activity**
    option with all the other settings as they have been throughout the book.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了理论，让我们绘制和旋转一些位图。首先，创建一个新项目并将其命名为`Bitmap manipulation`。选择**空活动**选项，其他设置与整本书中的设置相同。
- en: Adding the Bob graphic to the project
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Bob图形添加到项目中
- en: Right-click and select **Copy** to copy the `bob.png` graphics file from the
    download bundle in the `Chapter20/Bitmap Manipulation/drawable` folder. Bob, represented
    by `bob.png`, is a simple, static video game character.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击并选择**复制**，从`Chapter20/Bitmap Manipulation/drawable`文件夹中的下载包中复制`bob.png`图形文件。由`bob.png`表示的Bob是一个简单的静态视频游戏角色。
- en: 'In Android Studio, locate the `app/res/drawable` folder in the project explorer
    window and paste the `bob.png` image file into it. The following screenshot makes
    it clear where this folder is located and what it will look like with the `bob.png`
    image in it:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中，定位项目资源管理器窗口中的`app/res/drawable`文件夹，并将`bob.png`图像文件粘贴到其中。以下屏幕截图清楚地显示了该文件夹的位置以及带有`bob.png`图像的外观：
- en: '![Adding the Bob graphic to the project](img/B12806_C20_06.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![将Bob图形添加到项目中](img/B12806_C20_06.jpg)'
- en: Right-click on the `drawable` folder and select **Paste** to add the `bob.png`
    file to the project. Click on **OK** twice to confirm the default options for
    importing the file into the project.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`drawable`文件夹，然后选择**粘贴**以将`bob.png`文件添加到项目中。点击两次**确定**以确认将文件导入项目的默认选项。
- en: In this app, we will make the same change that we did in the previous app. We
    will be using the vanilla version of the `Activity` class. Therefore, `MainActivity`
    will inherit from `Activity` instead of `AppCompatActivity`, as has been the case
    previously. We are doing this because, again, we are not using a layout from an
    XML file, and so we have no need for the backward compatibility features of `AppCompatActivity`
    as we did in all the previous projects.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将做与上一个应用程序相同的更改。我们将使用`Activity`类的原始版本。因此，`MainActivity`将继承自`Activity`而不是`AppCompatActivity`，这是以前的情况。我们这样做是因为，再次强调，我们不使用来自XML文件的布局，因此我们不需要`AppCompatActivity`的向后兼容功能，就像在以前的所有项目中一样。
- en: You should edit the class declaration as follows.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该编辑类声明如下。
- en: '[PRE18]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will also need to add the following import statement:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要添加以下导入语句：
- en: '[PRE19]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following required properties to the `MainActivity` class, after the
    class declaration and before the `onCreate` function, ready to do some drawing:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`类的类声明之后，在`onCreate`函数之前，添加以下必需的属性，准备进行一些绘图：
- en: '[PRE20]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Add the following imports after the package declaration:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在包声明之后添加以下导入：
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we can initialize all the instances in `onCreate`, as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`onCreate`中初始化所有实例，如下所示：
- en: '[PRE22]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we add calls to three functions that we will write soon and set our new
    drawing as the view for the app:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加对三个函数的调用，我们很快将编写这些函数，并将我们的新绘图设置为应用程序的视图：
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, add the `drawRotatedBitmap` function, which performs the bitmap manipulation:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加`drawRotatedBitmap`函数，执行位图操作：
- en: '[PRE24]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The previous code uses a loop to iterate through 360 degrees, 30 degrees at
    a time. The value (at each pass through the loop) is used in the `Matrix` instance
    to rotate the image of Bob, and he is then drawn to the screen using the `drawBitmap`
    function.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码使用循环迭代360度，每次30度。值（在循环中的每次通过）用于在`Matrix`实例中旋转Bob的图像，然后使用`drawBitmap`函数将其绘制到屏幕上。
- en: 'Add the final two functions, as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 添加最后两个函数，如下所示：
- en: '[PRE25]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `drawEnlargedBitmap` function uses the `createScaledBitmap` function, enlarging
    the bitmap graphic to 300 by 400 pixels. The `drawBitmap` function then draws
    it to the screen.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawEnlargedBitmap`函数使用`createScaledBitmap`函数，将位图图形放大到300 x 400像素。然后`drawBitmap`函数将其绘制到屏幕上。'
- en: The `drawShrunkenBitmap` function uses the exact same technique, except that
    it scales and then draws a 50 x 75 pixel image.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawShrunkenBitmap`函数使用完全相同的技术，只是它缩放然后绘制一个50 x 75像素的图像。'
- en: 'Finally, run the app to see Bob grow, shrink, and then spin around through
    360 degrees at 30-degree intervals, as shown in the following screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行应用程序，看到Bob在30度间隔下生长、缩小，然后围绕360度旋转，如下截图所示：
- en: '![Adding the Bob graphic to the project](img/B12806_C20_07.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![将Bob图形添加到项目中](img/B12806_C20_07.jpg)'
- en: The only thing missing from our drawing repertoire is the ability to watch all
    this activity as it happens. We will fix this gap in our knowledge next.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绘图库中唯一缺少的是观看所有这些活动发生的能力。我们将在下一步中填补这一知识空白。
- en: Frequently asked question
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Q 1) I know how to do all this drawing, but why can't I see anything move?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Q 1）我知道如何进行所有这些绘图，但为什么我看不到任何东西移动？
- en: A) To see things move, you need to be able to regulate when each part of the
    drawing occurs. You need to use animation techniques. This is not trivial, but
    it is not beyond the grasp of a determined beginner, either. We will study the
    required topics in the next chapter.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: A）要看到物体移动，您需要能够调节绘图的每个部分发生的时间。您需要使用动画技术。这并不是微不足道的，但对于一个有决心的初学者来说也不是难以掌握的。我们将在下一章中学习所需的主题。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to draw custom shapes, text, and bitmaps. Now that
    we know how to draw and manipulate both primitive shapes, text, and bitmaps, we
    can take things up a level.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何绘制自定义形状、文本和位图。现在我们知道如何绘制和操作原始形状、文本和位图，我们可以提升一级。
- en: In the next chapter, we will start our next multi-chapter app, which is a kid's-style
    drawing app that comes to life at the tap of a button.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始我们的下一个多章节应用程序，这是一个儿童风格的绘图应用程序，只需轻按按钮即可生动起来。
