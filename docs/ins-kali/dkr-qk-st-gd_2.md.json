["```\n# the new command syntax...\ndocker container run hello-world\n# the old command syntax...\ndocker run hello-world\n```", "```\ndocker version\n```", "```\n# new syntax\n# Usage: docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]\ndocker container run hello-world\n\n# old syntax\ndocker run hello-world\n```", "```\n# new syntax\n# Usage: docker image pull [OPTIONS] NAME[:TAG|@DIGEST]\ndocker image pull hello-world\n\n# old syntax\ndocker pull hello-world\n```", "```\n# Usage:  docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```", "```\n# Usage: docker container ls [OPTIONS]\ndocker container ls\n```", "```\n# short form of the parameter is -a\ndocker container ls -a\n# long form is --all\ndocker container ls --all\n\n# old syntax\ndocker ps -a\n```", "```\n# there is no short form of the --rm parameter\ndocker container run --rm hello-world\n```", "```\n# the new syntax\n# Usage: docker container rm [OPTIONS] CONTAINER [CONTAINER...]\ndocker container rm cd828234194a\n\n# the old syntax\ndocker rm cd828234194a\n```", "```\n# using the randomly generated name docker container rm competent_payne\n```", "```\n# using our own name docker container run --name hi-earl hello-world\n```", "```\n# removing more than one docker container rm hi-earl hi-earl2\n```", "```\n# removing even if it is running docker container rm --force web-server\n```", "```\n# list just the container IDs docker container ls --all --quiet\n```", "```\n# using full parameter names\ndocker container rm --force $(docker container ls --all --quiet)\n# using short parameter names\ndocker container rm -f $(docker container ls -aq)\n\n# using the old syntax\ndocker rm -f $(docker ps -aq)\n```", "```\n# using the full form of the parameter\ndocker container run --detach --name web-server --rm nginx\n# using the short form of the parameter\ndocker container run -d --name web-server --rm nginx\n```", "```\n# Usage: docker container stop [OPTIONS] CONTAINER [CONTAINER...]\ndocker container stop web-server\n```", "```\n# the long form of the command\n# Usage: docker container logs [OPTIONS] CONTAINER\ndocker container logs --follow --timestamps web-server\n# the short form of the command\ndocker container logs -f -t web-server\n\n# get just the last 5 lines (there is no short form for the \"--tail\" parameter)\ndocker container logs --tail 5 web-server\n\n# the old syntax\ndocker logs web-server\n```", "```\n# using the new syntax\n# Usage: docker container top CONTAINER [ps OPTIONS]\ndocker container top web-server\n\n# using the old syntax\ndocker top web-server\n```", "```\n# using the new syntax\n# Usage: docker container inspect [OPTIONS] CONTAINER [CONTAINER...]\ndocker container inspect web-server\n\n# using the old syntax\ndocker inspect web-server\n```", "```\n# if you want to see the state of a container you can use this command\ndocker container inspect --format '{{json .State}}' web-server1 | jq\n\n# if you want to narrow the state data to just when the container started, use this command\ndocker container inspect --format '{{json .State}}' web-server1 | jq '.StartedAt'\n```", "```\n# if you are interested in the container's network settings, use this command\ndocker container inspect --format '{{json .NetworkSettings}}' web-server1 | jq\n\n# or maybe you just want to see the ports used by the container, here is a command for that\ndocker container inspect --format '{{json .NetworkSettings}}' web-server1 | jq '.Ports'\n\n# maybe you just want the IP address used by the container, this is the command you could use.\ndocker container inspect -f '{{json .NetworkSettings}}' web-server1 | jq '.IPAddress'\n```", "```\n# maybe you want the IP Addresses for a couple containers\ndocker container inspect -f '{{json .NetworkSettings}}' web-server1 web-server2 | jq '.IPAddress'\n\n# since the output for each container is a single line, this one can be done without using jq\ndocker container inspect -f '{{ .NetworkSettings.IPAddress }}' web-server1 web-server2 web-server3\n```", "```\n# install jq on Mac OS\nbrew install jq\n\n# install jq on ubuntu\nsudo apt-get install jq\n\n# install jq on RHEL/CentOS\nyum install -y epel-release\nyum install -y jq\n\n# install jq on Windows using Chocolatey NuGet package manager\nchocolatey install jq\n```", "```\n# using the new syntax, view the stats for all running containers\n# Usage: docker container stats [OPTIONS] [CONTAINER...]\ndocker container stats\n\n# view the stats for just two web server containers\ndocker container stats web-server1 web-server2\n\n# using the old syntax, view stats for all running containers\ndocker stats\n```", "```\n# running detached docker container run --detach --name web-server1 nginx\n```", "```\n# using the long form of the parameters\ndocker container run --interactive --tty --name web-server2 nginx bash\n\n# using the short form of the parameters (joined as one), which is much more common usage\ndocker container run -it --name web-server2 nginx bash\n```", "```\n# running interactively with default CMD docker container run -it --name earls-dev ubuntu\n```", "```\n# run a container detached\ndocker container run --detach -it --name web-server1 -p 80:80 nginx\n\n# show that the container is running\ndocker container ps\n\n# attach to the container\n# Usage: docker container attach [OPTIONS] CONTAINER\ndocker container attach web-server1\n\n# issue a *Ctrl* + *PQ* keystroke to detach (except for Docker on Mac, see below for special Mac instructions)\n\n# again, show that the container is running detached.\ndocker container ps\n```", "```\n# when you are using Docker for Mac, remember to always add the \"--sig-proxy=false\" parameter\ndocker attach --sig-proxy=false web-server1\n```", "```\n# start an nginx container detached\ndocker container run --detach --name web-server1 -p 80:80 nginx\n\n# see that the container is currently running\ndocker container ls\n\n# execute other commands in the running container\n# Usage: docker container exec [OPTIONS] CONTAINER COMMAND [ARG...] docker container exec -it web-server1 bash\ndocker container exec web-server1 cat /etc/debian_version\n\n# confirm that the container is still running \ndocker container ls\n```", "```\n# Usage: docker container commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\ndocker container commit ubuntu new-ubuntu\n```", "```\n# create an nginx web-server that redirects host traffic from port 8080 to port 80 in the container\ndocker container run --detach --name web-server1 --publish 8080:80 nginx\n```", "```\n# all of these can be running at the same time\ndocker container run --detach --name web-server1 --publish 80:80 nginx\ndocker container run --detach --name web-server2 --publish 8000:80 nginx\ndocker container run --detach --name web-server3 --publish 8080:80 nginx\ndocker container run --detach --name web-server4 --publish 8888:80 nginx # however if you tried to run this one too, it would fail to run \n# because the host already has port 80 assigned to web-server1\ndocker container run --detach --name web-server5 --publish 80:80 nginx\n```"]