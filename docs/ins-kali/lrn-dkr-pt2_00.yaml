- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: We have been fiddling with virtualization techniques and tools for quite a long
    time now in order to establish the much-demanded software portability. The inhibiting
    dependency factor between software and hardware needs to be decimated by leveraging
    virtualization, a kind of beneficial abstraction, through an additional layer
    of indirection. The idea is to run any software on any hardware. This is achieved
    by creating multiple virtual machines (VMs) out of a single physical server, with
    each VM having its own operating system (OS). Through this isolation, which is
    enacted through automated tools and controlled resource sharing, heterogeneous
    applications are accommodated in a physical machine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立广受需求的软件可移植性，我们已经长时间研究虚拟化技术和工具。通过利用虚拟化这种有益的抽象，通过额外的间接层来消除软件和硬件之间的抑制性依赖因素。这个想法是在任何硬件上运行任何软件。这是通过将单个物理服务器分成多个虚拟机（VMs）来实现的，每个VM都有自己的操作系统（OS）。通过自动化工具和受控资源共享实现的隔离，异构应用程序可以在一台物理机上容纳。
- en: With virtualization, IT infrastructures become open, programmable, remotely
    monitorable, manageable, and maintainable. Business workloads can be hosted in
    appropriately-sized virtual machines and delivered to the outside world, ensuring
    broader and more frequent utilization. On the other hand, for high-performance
    applications, virtual machines across multiple physical machines can be readily
    identified and rapidly combined to guarantee any kind of high-performance requirement.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过虚拟化，IT基础设施变得开放、可编程、可远程监控、可管理和可维护。业务工作负载可以托管在适当大小的虚拟机中，并传送到外部世界，确保更广泛和更频繁的利用。另一方面，对于高性能应用程序，可以轻松识别跨多台物理机的虚拟机，并迅速组合以保证任何种类的高性能需求。
- en: The virtualization paradigm has its own drawbacks. Because of the verbosity
    and bloatedness (every VM carries its own operating system), VM provisioning typically
    takes a while, the performance goes down due to excessive usage of computational
    resources, and so on. Furthermore, the growing need for portability is not fully
    met by virtualization. Hypervisor software from different vendors comes in the
    way of ensuring application portability. Differences in the OS and application
    distributions, versions, editions, and patches hinder smooth portability. Computer
    virtualization has flourished, whereas the other, closely associated concepts
    of network and storage virtualization are just taking off. Building distributed
    applications through VM interactions invites and involves some practical difficulties.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化范式也有其缺点。由于冗长和臃肿（每个虚拟机都携带自己的操作系统），虚拟机的配置通常需要一段时间，性能会因过度使用计算资源而下降，等等。此外，对可移植性的不断增长需求并未完全得到虚拟化的满足。来自不同供应商的Hypervisor软件妨碍了应用程序的可移植性。操作系统和应用程序分发、版本、版本和补丁的差异阻碍了平稳的可移植性。计算机虚拟化蓬勃发展，而与之密切相关的网络和存储虚拟化概念刚刚起步。通过虚拟机相互作用构建分布式应用程序会引发和涉及一些实际困难。
- en: Let's move on to containerization. All of these barriers contribute to the unprecedented
    success of the idea of containerization. A container generally contains an application,
    and all of the application's libraries, binaries, and other dependencies are stuffed
    together to be presented as a comprehensive, yet compact, entity for the outside
    world. Containers are exceptionally lightweight, highly portable, easily and quickly
    provisionable, and so on. Docker containers achieve native system performance.
    The greatly articulated DevOps goal gets fully fulfilled through application containers.
    As best practice, it is recommended that every container hosts one application
    or service.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论容器化。所有这些障碍都促成了容器化理念的空前成功。一个容器通常包含一个应用程序，应用程序的所有库、二进制文件和其他依赖项都被一起打包，以作为一个全面而紧凑的实体呈现给外部世界。容器非常轻量级，高度可移植，易于快速配置等等。Docker容器实现了本地系统性能。通过应用容器，DevOps的目标得到了充分实现。作为最佳实践，建议每个容器托管一个应用程序或服务。
- en: The popular Docker containerization platform has come up with an enabling engine
    to simplify and accelerate the life cycle management of containers. There are
    industry-strength and openly automated tools made freely available to facilitate
    the needs of container networking and orchestration. Therefore , producing and
    sustaining business-critical distributed applications is becoming easy. Business
    workloads are methodically containerized to be easily taken to cloud environments,
    and they are exposed for container crafters and composers to bring forth cloud-based
    software solutions and services. Precisely speaking, containers are turning out
    to be the most featured, favored, and fine-tuned runtime environment for IT and
    business services.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的Docker容器化平台推出了一个使容器的生命周期管理变得简单和快速的启用引擎。有行业强度和开放自动化工具免费提供，以满足容器网络和编排的需求。因此，生产和维护业务关键的分布式应用变得容易。业务工作负载被系统地容器化，以便轻松地转移到云环境，并为容器工匠和作曲家提供云端软件解决方案和服务。确切地说，容器正在成为IT和业务服务最具特色、受欢迎和精细调整的运行时环境。
- en: This book is meticulously designed and developed in order to empower developers,
    cloud architects, business managers, and strategists with all the right and relevant
    information on the Docker platform and its capacity to power up mission-critical,
    composite, and distributed applications across industry verticals.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书精心设计和开发，旨在为开发人员、云架构师、业务经理和战略家提供有关Docker平台及其推动行业垂直领域中的关键、复合和分布式应用的所有正确和相关信息。
- en: What this book covers
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖了以下内容
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started with Docker"), *Getting Started
    with Docker*, talks about the Docker platform and how it simplifies and speeds
    up the process of realizing containerized workloads to be readily deployed and
    run on a variety of platforms. This chapter also has step-by-step details on installing
    the Docker engine, downloading a Docker image from the centralized Docker Hub,
    creating a Docker container out of that image, and troubleshooting the Docker
    container.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 《第1章》（ch01.html“第1章。使用Docker入门”）*使用Docker入门*，介绍了Docker平台以及它如何简化和加速实现容器化工作负载的过程，以便在各种平台上轻松部署和运行。本章还详细介绍了安装Docker引擎、从集中式Docker
    Hub下载Docker镜像、创建Docker容器以及排除Docker容器故障的步骤。
- en: '[Chapter 2](ch02.html "Chapter 2. Handling Docker Containers"), *Handling Docker
    Containers*, is primarily meant to expound the commands required to manage Docker
    images and containers. This chapter provides the basic Docker terminologies needed
    to understand the output of Docker commands. Other details covered here include
    starting an interactive session inside a container, managing your images, running
    containers, and tracking changes inside containers.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章，“处理Docker容器”，主要是为了阐述管理Docker图像和容器所需的命令。本章提供了理解Docker命令输出所需的基本Docker术语。此外，本章还涵盖了在容器内启动交互会话，管理图像，运行容器以及跟踪容器内的更改等其他细节。
- en: '[Chapter 3](ch03.html "Chapter 3. Building Images"), *Building Images*, introduces
    Docker''s integrated image building system. The other important topics covered
    in this chapter include a quick overview of a Dockerfile''s syntax and a bit of
    theory on how Docker stores images.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，“构建图像”，介绍了Docker集成图像构建系统。本章还涵盖了Dockerfile语法的快速概述以及关于Docker如何存储图像的一些理论。
- en: '[Chapter 4](ch04.html "Chapter 4. Publishing Images"), *Publishing Images*,
    focuses on publishing images on the centralized Docker Hub and how to get the
    most out of the Docker Hub. The other important contents in the chapter include
    greater details about the Docker Hub, how to push images to the Docker Hub, the
    automatic building of images, creating organizations on Docker Hub, and finally
    private repositories.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“发布图像”，侧重于在集中式Docker Hub上发布图像以及如何充分利用Docker Hub。本章的其他重要内容包括有关Docker Hub的更多细节，如何将图像推送到Docker
    Hub，图像的自动构建，创建Docker Hub上的组织，以及私有存储库。
- en: '[Chapter 5](ch05.html "Chapter 5. Running Your Private Docker Infrastructure"),
    *Running Your Private Docker Infrastructure*, explains how corporates can set
    up their own private repositories. Due to certain reasons, corporates may not
    want to host specific Docker images in publicly-available image repositories,
    such as the Docker Hub. Here, the need for their own private repository to keep
    up those images arises. This chapter has all of the information required to set
    up and sustain private repositories.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，“运行您的私有Docker基础设施”，解释了企业如何建立自己的私有存储库。由于某些原因，企业可能不希望将特定的Docker图像托管在公开可用的图像存储库（如Docker
    Hub）中。因此，他们需要自己的私有存储库来保存这些图像。本章包含了设置和维护私有存储库所需的所有信息。
- en: '[Chapter 6](ch06.html "Chapter 6. Running Services in a Container"), *Running
    Services in a Container*, illustrates how a web application can be run inside
    a Docker container as a service, and how to expose the service for the outside
    world to find and access it. How the appropriate Dockerfile gets developed to
    simplify this task is also described in detail.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，“在容器中运行服务”，说明了如何将Web应用程序作为服务在Docker容器内运行，以及如何公开该服务，以便外部世界找到并访问它。还详细描述了如何开发适当的Dockerfile以简化此任务。
- en: '[Chapter 7](ch07.html "Chapter 7. Sharing Data with Containers"), *Sharing
    Data with Containers*, shows you how to use Docker''s volumes feature to share
    data between the Docker host and its containers. The other topics covered here
    are how to share data between containers, the common use cases, and the typical
    pitfalls to avoid.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章，“与容器共享数据”，向您展示如何使用Docker的卷功能在Docker主机和其容器之间共享数据。本章还涵盖了如何在容器之间共享数据，常见用例以及要避免的典型陷阱。
- en: '[Chapter 8](ch08.html "Chapter 8. Orchestrating Containers"), *Orchestrating
    Containers*, focuses on orchestrating multiple containers towards composite, containerized
    workloads. It is a well-known truth that orchestration plays a major role in producing
    composite applications. This chapter includes some information about orchestration
    and the toolset made available for enabling the process of orchestration. Finally,
    you will find a well-orchestrated example of how containers can be orchestrated
    to bring forth highly reusable and business-aware containers.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章。编排容器") *编排容器*，着重于编排多个容器以实现复合、容器化的工作负载。众所周知，编排在生成复合应用程序中起着重要作用。本章包括一些关于编排和可用于启用编排过程的工具集的信息。最后，您将找到一个精心编排的示例，演示如何编排容器以产生高度可重用和业务感知的容器。'
- en: '[Chapter 9](ch09.html "Chapter 9. Testing with Docker"), *Testing with Docker*,
    focuses on testing your code inside Docker images. In this chapter, you find out
    how to run the tests inside an ad hoc Docker image. Finally, you come across details
    of how to integrate Docker testing into a continuous integration server, such
    as Jenkins.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章。使用Docker进行测试") *使用Docker进行测试*，侧重于在Docker镜像内测试您的代码。在本章中，您将了解如何在临时Docker镜像内运行测试。最后，您将了解如何将Docker测试集成到持续集成服务器（如Jenkins）中的详细信息。'
- en: '[Chapter 10](ch10.html "Chapter 10. Debugging Containers"), *Debugging Containers*,
    teaches you how to debug applications running inside containers. Also, the details
    regarding how Docker ensures that processes running inside containers are isolated
    from the outside world are covered. Furthermore, descriptions of the usage of
    the nsenter and nsinit tools for effective debugging are included.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。调试容器") *调试容器*，教您如何调试在容器内运行的应用程序。还涵盖了关于Docker如何确保容器内运行的进程与外部世界隔离的详细信息。此外，还包括了关于使用nsenter和nsinit工具进行有效调试的描述。'
- en: '[Chapter 11](ch11.html "Chapter 11. Securing Docker Containers"), *Securing
    Docker Containers*, is crafted to explain the brewing security and privacy challenges
    and concerns, and how they are addressed through the liberal usage of competent
    standards, technologies, and tools. This chapter inscribes the mechanism on dropping
    user privileges inside an image. There is also a brief introduction on how the
    security capabilities introduced in SELinux come in handy when securing Docker
    containers.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html "第11章。保护Docker容器") *保护Docker容器*，旨在解释正在酝酿的安全和隐私挑战和关注点，以及通过使用充分的标准、技术和工具来解决这些问题。本章描述了在镜像内降低用户权限的机制。还简要介绍了在保护Docker容器时，SELinux引入的安全功能如何派上用场。'
- en: What you need for this book
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书所需内容
- en: The Docker platform requires a 64-bit hardware system to run on. Docker applications
    have been developed on Ubuntu 14.04 for this book, but this does not mean that
    the Docker platform cannot run on other Linux distributions, such as Redhat, CentOS,
    CoreOS, and so on. However, the Linux kernel version must be 3.10 or above.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker平台需要64位硬件系统才能运行。本书的Docker应用程序是在Ubuntu 14.04上开发的，但这并不意味着Docker平台不能在其他Linux发行版上运行，比如Redhat、CentOS、CoreOS等。但是，Linux内核版本必须是3.10或更高版本。
- en: Who this book is for
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合对象
- en: If you are an application developer who wants to learn about Docker in order
    to utilize its features for application deployment, then this book is for you.
    No prior knowledge of Docker is required.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一名应用程序开发人员，想要学习Docker以利用其特性进行应用部署，那么这本书适合您。不需要Docker的先前知识。
- en: Conventions
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您会发现许多文本样式，用于区分不同类型的信息。以下是一些样式的示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "If
    the `docker` service is running, then this command will print the status as `start/running`,
    along with its process ID."'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter用户名显示如下：“如果`docker`服务正在运行，则此命令将打印状态为`start/running`，并显示其进程ID。”
- en: 'A block of code is set as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下形式书写：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Select the **Docker** option, which is in the drop-down menu, and then
    click on **Launch Now**."'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。屏幕上看到的单词，例如菜单或对话框中的单词，会以这样的方式出现在文本中：“选择**Docker**选项，它在下拉菜单中，然后点击**立即启动**。”'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会出现在这样的框中。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这种方式出现。
