["```java\nvar date = LocalDate.now();\n```", "```java\nvar dayOfWeek = date.getDayOfWeek();\nvar dayOfMonth = date.getDayOfMonth();\nvar month = date.getMonth();\nvar year = date.getYear();\n```", "```java\nvar date1 = LocalDate.of(2018, 4, 12);\nvar date2 = LocalDate.of(2018, Month.APRIL, 12);\ndate2 = LocalDate.ofYearDay(2018, 102);\ndate2 = LocalDate.parse(\"2018-04-12\");\n```", "```java\nvar time = LocalTime.now();\n```", "```java\ntime = LocalTime.of(23, 11, 11, 11);\ntime = LocalTime.ofSecondOfDay(3600);\n\nvar hour = time.getHour();\nvar minutes = time.getMinute();\nvar seconds = time.get(ChronoField.SECOND_OF_MINUTE);\n```", "```java\nvar dateTime1 = LocalDateTime.of(2018, 04, 12, 13, 30, 22);\nvar dateTime2 = LocalDateTime.of(2018, Month.APRIL, 12, 13, 30, 22);\ndateTime2 = LocalDateTime.of(date2, LocalTime.of(13, 30, 22));\n```", "```java\nvar startDate = LocalDate.of(year, month, 1);\n```", "```java\nvar endDate = startDate.plusDays(startDate.lengthOfMonth());\n```", "```java\nvar dayBuckets = startDate.datesUntil(endDate).collect(\n\nCollectors.groupingBy(date -> date.getDayOfWeek(), \n    Collectors.mapping(LocalDate::getDayOfMonth, \n        Collectors.toList())\n));\n```", "```java\nvar dateTime = ZonedDateTime.now();\n```", "```java\nvar indianTz = ZoneId.of(\"Asia/Kolkata\");\nvar istDateTime = ZonedDateTime.now(indianTz);\n```", "```java\nvar indianTzOffset = ZoneOffset.ofHoursMinutes(5, 30);\nistDateTime = ZonedDateTime.now(indianTzOffset);\n```", "```java\nZonedDateTime dateTimeOf = ZonedDateTime.of(2018, 4, 22, 14, 30, 11, 33, indianTz);\n```", "```java\nvar localDateTime = dateTimeOf.toLocalDateTime();\n```", "```java\njshell> ZoneId.getAvailableZoneIds().stream().count()\n$16 ==> 599\n```", "```java\njshell> ZoneId.getAvailableZoneIds().stream().limit(10).forEach(System.out::println)\nAsia/Aden\nAmerica/Cuiaba\nEtc/GMT+9\nEtc/GMT+8\nAfrica/Nairobi\nAmerica/Marigot\nAsia/Aqtau\nPacific/Kwajalein\nAmerica/El_Salvador\nAsia/Pontianak\n```", "```java\njshell> ZoneId.of(\"US/Pacific\").getRules().getDaylightSavings(Instant.now())\n$31 ==> PT1H\n\njshell> ZoneId.of(\"US/Pacific\").getRules().getOffset(LocalDateTime.now())\n$32 ==> -07:00\n\njshell> ZoneId.of(\"US/Pacific\").getRules().getStandardOffset(Instant.now())\n$33 ==> -08:00\n```", "```java\njshell> ZoneOffset.ofHoursMinutes(5,30)\n$27 ==> +05:30\n```", "```java\nSignatures:\nZonedDateTime ZonedDateTime.now()\nZonedDateTime ZonedDateTime.now(ZoneId zone)\nZonedDateTime ZonedDateTime.now(Clock clock)\n\njshell> ZonedDateTime.now()\njshell> ZonedDateTime.now(ZoneId.of(\"Asia/Kolkata\"))\n$36 ==> 2018-05-04T21:58:24.453113900+05:30[Asia/Kolkata]\njshell> ZonedDateTime.now(Clock.fixed(Instant.ofEpochSecond(1525452037), ZoneId.of(\"Asia/Kolkata\")))\n$54 ==> 2018-05-04T22:10:37+05:30[Asia/Kolkata]\n```", "```java\nvar hourAheadClock = Clock.offset(Clock.system(ZoneId.of(\"Asia/Kolkata\")), Duration.ofHours(1));\n```", "```java\njshell> LocalDateTime.now(hourAheadClock)\n$64 ==> 2018-05-04T23:29:58.759973700\njshell> ZonedDateTime.now(hourAheadClock)\n$65 ==> 2018-05-04T23:30:11.421913800+05:30[Asia/Kolkata]\n```", "```java\nSignatures:\nZonedDateTime ZonedDateTime.of(LocalDate date, LocalTime time, ZoneId zone)\nZonedDateTime ZonedDateTime.of(LocalDateTime localDateTime, ZoneId zone)\nZonedDateTime ZonedDateTime.of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneId zone)\n\njshell> ZonedDateTime.of(LocalDateTime.of(2018, 1, 1, 13, 44, 44), ZoneId.of(\"Asia/Kolkata\"))\n$70 ==> 2018-01-01T13:44:44+05:30[Asia/Kolkata]\n\njshell> ZonedDateTime.of(LocalDate.of(2018,1,1), LocalTime.of(13, 44, 44), ZoneId.of(\"Asia/Kolkata\"))\n$71 ==> 2018-01-01T13:44:44+05:30[Asia/Kolkata]\n\njshell> ZonedDateTime.of(LocalDate.of(2018,1,1), LocalTime.of(13, 44, 44), ZoneId.of(\"Asia/Kolkata\"))\n$72 ==> 2018-01-01T13:44:44+05:30[Asia/Kolkata]\n\njshell> ZonedDateTime.of(2018, 1, 1, 13, 44, 44, 0, ZoneId.of(\"Asia/Kolkata\"))\n$73 ==> 2018-01-01T13:44:44+05:30[Asia/Kolkata] \n```", "```java\njshell> OffsetTime.of(LocalTime.of(14,12,34), ZoneOffset.ofHoursMinutes(5, 30))\n$74 ==> 14:12:34+05:30\n\njshell> OffsetTime.of(14, 34, 12, 11, ZoneOffset.ofHoursMinutes(5, 30))\n$75 ==> 14:34:12.000000011+05:30\n```", "```java\nSignatures:\nOffsetTime OffsetTime.now()\nOffsetTime OffsetTime.now(ZoneId zone)\nOffsetTime OffsetTime.now(Clock clock)\n\njshell> OffsetTime.now()\n$76 ==> 21:49:16.895192800+03:00\n\njshell> OffsetTime.now(ZoneId.of(\"Asia/Kolkata\"))\n\njshell> OffsetTime.now(ZoneId.of(\"Asia/Kolkata\"))\n$77 ==> 00:21:04.685836900+05:30\n\njshell> OffsetTime.now(Clock.offset(Clock.systemUTC(), Duration.ofMinutes(330)))\n$78 ==> 00:22:00.395463800Z\n```", "```java\njshell> Period.of(2,4,30)\n$2 ==> P2Y4M30D\n```", "```java\njshell> Period.ofDays(10)\n$3 ==> P10D\njshell> Period.ofMonths(4)\n$4 ==> P4M\njshell> Period.ofWeeks(3)\n$5 ==> P21D\njshell> Period.ofYears(3)\n$6 ==> P3Y\n```", "```java\njshell> Period.parse(\"P2Y4M23D\").getDays()\n$8 ==> 23\n```", "```java\njshell> Period.between(LocalDate.now(), LocalDate.of(2018, 8, 23))\n$9 ==> P2M2D\njshell> Period.between(LocalDate.now(), LocalDate.of(2018, 2, 23))\n$10 ==> P-3M-26D\n```", "```java\n/**\n* The number of years.\n*/\nprivate final int years;\n/**\n* The number of months.\n*/\nprivate final int months;\n/**\n* The number of days.\n*/\nprivate final int days;\n```", "```java\njshell> Period period1 = Period.ofWeeks(2)\nperiod1 ==> P14D\n\njshell> Period period2 = period1.withDays(15)\nperiod2 ==> P15D\n\njshell> period1 == period2\n$19 ==> false\n\njshell> Period period3 = period1.withDays(14)\nperiod3 ==> P14D\n\njshell> period1 == period3\n$21 ==> true\n```", "```java\njshell> LocalDate.now().until(LocalDate.of(2018, 2, 23))\n$11 ==> P-3M-26D\n\njshell> LocalDate.now().until(LocalDate.of(2018, 8, 23))\n$12 ==> P2M2D\n```", "```java\njshell> Period period1 = Period.ofWeeks(2)\nperiod1 ==> P14D\n\njshell> LocalDate date = LocalDate.now()\ndate ==> 2018-06-21\n\njshell> period1.addTo(date)\n$24 ==> 2018-07-05\n\njshell> date.plus(period1)\n$25 ==> 2018-07-05\n```", "```java\njshell> period1.minus(Period.of(1,3,4))\n$28 ==> P2Y12M25D\n\njshell> period1.minusDays(4)\n$29 ==> P3Y15M25D\n\njshell> period1.minusMonths(3)\n$30 ==> P3Y12M29D\n\njshell> period1.minusYears(1)\n$31 ==> P2Y15M29D\n```", "```java\njshell> Period period1 = Period.of(3, 15, 29)\nperiod1 ==> P3Y15M29D\n\njshell> period1.plus(Period.of(1, 3, 4))\n$33 ==> P4Y18M33D\n\njshell> period1.plusDays(4)\n$34 ==> P3Y15M33D\n\njshell> period1.plusMonths(3)\n$35 ==> P3Y18M29D\n\njshell> period1.plusYears(1)\n$36 ==> P4Y15M29D\n```", "```java\njshell> Period period1 = Period.of(3, 15, 29)\nperiod1 ==> P3Y15M29D\n\njshell> period1.negated()\n$38 ==> P-3Y-15M-29D\n\njshell> period1\nperiod1 ==> P3Y15M29D\n\njshell> period1.normalized()\n$40 ==> P4Y3M29D\n\njshell> period1\nperiod1 ==> P3Y15M29D\n```", "```java\njshell> Duration.of(56, ChronoUnit.MINUTES)\n$66 ==> PT56M\njshell> Duration.of(56, ChronoUnit.DAYS)\n$67 ==> PT1344H\njshell> Duration.ofSeconds(87)\n$68 ==> PT1M27S\njshell> Duration.ofHours(7)\n$69 ==> PT7H\n```", "```java\njshell> Duration.parse(\"P12D\")\n$70 ==> PT288H\njshell> Duration.parse(\"P12DT7H5M8.009S\")\n$71 ==> PT295H5M8.009S\njshell> Duration.parse(\"PT7H5M8.009S\")\n$72 ==> PT7H5M8.009S\n```", "```java\njshell> LocalDateTime time1 = LocalDateTime.now()\ntime1 ==> 2018-06-23T10:51:21.038073800\njshell> LocalDateTime time2 = LocalDateTime.of(2018, 6, 22, 11, 00)\ntime2 ==> 2018-06-22T11:00\njshell> Duration.between(time1, time2)\n$77 ==> PT-23H-51M-21.0380738S\njshell> ZonedDateTime time1 = ZonedDateTime.now()\ntime1 ==> 2018-06-23T10:56:57.965606200+03:00[Asia/Riyadh]\njshell> ZonedDateTime time2 = ZonedDateTime.of(LocalDateTime.now(), ZoneOffset.ofHoursMinutes(5, 30))\ntime2 ==> 2018-06-23T10:56:59.878712600+05:30\njshell> Duration.between(time1, time2)\n$82 ==> PT-2H-29M-58.0868936S\n```", "```java\njshell> Duration.parse(\"P2DT3M\")\n$2 ==> PT48H3M\n\njshell> Duration.parse(\"P3M2DT3M\")\n| Exception java.time.format.DateTimeParseException: Text cannot be parsed to a Duration\n| at Duration.parse (Duration.java:417)\n| at (#3:1)\n\njshell> Duration.ofHours(4)\n$4 ==> PT4H\n\njshell> Duration.parse(\"PT3H4M5.6S\")\n$5 ==> PT3H4M5.6S\n\njshell> Duration d = Duration.parse(\"PT3H4M5.6S\")\nd ==> PT3H4M5.6S\n\njshell> d.toDays()\n$7 ==> 0\n\njshell> d.toHours()\n$9 ==> 3\n```", "```java\njshell> Duration d = Duration.parse(\"PT1H5M4S\")\nd ==> PT1H5M4S\n\njshell> d.plusDays(3)\n$14 ==> PT73H5M4S\n\njshell> d\nd ==> PT1H5M4S\n\njshell> d.plusDays(3)\n$16 ==> PT73H5M4S\n\njshell> d.plusHours(3)\n$17 ==> PT4H5M4S\n\njshell> d.plusMillis(4)\n$18 ==> PT1H5M4.004S\n\njshell> d.plusMinutes(40)\n$19 ==> PT1H45M4S\n```", "```java\njshell> Duration d = Duration.parse(\"PT1H5M4S\")\nd ==> PT1H5M4S\n\njshell> d.addTo(LocalDateTime.now())\n$21 ==> 2018-06-25T21:15:53.725373600\n\njshell> d.addTo(ZonedDateTime.now())\n$22 ==> 2018-06-25T21:16:03.396595600+03:00[Asia/Riyadh]\n\njshell> d.addTo(LocalDate.now())\n| Exception java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Seconds\n| at LocalDate.plus (LocalDate.java:1272)\n| at LocalDate.plus (LocalDate.java:139)\n| at Duration.addTo (Duration.java:1102)\n| at (#23:1)\n```", "```java\njshell> Instant.now()\n$40 ==> 2018-07-06T07:56:40.651529300Z\n\njshell> Instant.now().getEpochSecond()\n$41 ==> 1530863807\n```", "```java\njshell> Instant.now().toEpochMilli()\n$42 ==> 1530863845158\n```", "```java\njshell> Instant.now().plusMillis(1000)\n$43 ==> 2018-07-06T07:57:57.092259400Z\n\njshell> Instant.now().plusNanos(1991999)\n$44 ==> 2018-07-06T07:58:06.097966099Z\n\njshell> Instant.now().plusSeconds(180)\n$45 ==> 2018-07-06T08:01:15.824141500Z\n```", "```java\njshell> Instant.now().atZone(ZoneId.of(\"Asia/Kolkata\"))\n$36 ==> 2018-07-06T13:15:13.820694500+05:30[Asia/Kolkata]\n\njshell> Instant.now().atOffset(ZoneOffset.ofHoursMinutes(2,30))\n$37 ==> 2018-07-06T10:15:19.712039+02:30\n```", "```java\njshell> LocalDate d = LocalDate.now()\nd ==> 2018-07-27\n\njshell> d.plusDays(3)\n$5 ==> 2018-07-30\n\njshell> d.minusYears(4)\n$6 ==> 2014-07-27\n```", "```java\njshell> LocalDateTime dt = LocalDateTime.now()\ndt ==> 2018-07-27T15:27:40.733389700\n\njshell> dt.plusMinutes(45)\n$8 ==> 2018-07-27T16:12:40.733389700\n\njshell> dt.minusHours(4)\n$9 ==> 2018-07-27T11:27:40.733389700\n```", "```java\njshell> ZonedDateTime zdt = ZonedDateTime.now()\nzdt ==> 2018-07-27T15:28:28.309915200+03:00[Asia/Riyadh]\n\njshell> zdt.plusDays(4)\n$11 ==> 2018-07-31T15:28:28.309915200+03:00[Asia/Riyadh]\n\njshell> zdt.minusHours(3)\n$12 ==> 2018-07-27T12:28:28.309915200+03:00[Asia/Riyadh]\n```", "```java\njshell> LocalDate d = LocalDate.now()\nd ==> 2018-07-28\n\njshell> LocalDate d2 = LocalDate.of(2018, 7, 27)\nd2 ==> 2018-07-27\n\njshell> d.isBefore(d2)\n$4 ==> false\n\njshell> d.isAfter(d2)\n$5 ==> true\n\njshell> LocalDate d3 = LocalDate.of(2018, 7, 28)\nd3 ==> 2018-07-28\n\njshell> d.isEqual(d3)\n$7 ==> true\n\njshell> d.isEqual(d2)\n$8 ==> false\n```", "```java\njshell> ZonedDateTime zdt1 = ZonedDateTime.now();\nzdt1 ==> 2018-07-28T14:49:34.778006400+03:00[Asia/Riyadh]\n\njshell> ZonedDateTime zdt2 = zdt1.plusHours(4)\nzdt2 ==> 2018-07-28T18:49:34.778006400+03:00[Asia/Riyadh]\n\njshell> zdt1.isBefore(zdt2)\n$11 ==> true\n\njshell> zdt1.isAfter(zdt2)\n$12 ==> false\njshell> zdt1.isEqual(zdt2)\n$13 ==> false\n```", "```java\njshell> Chronology.getAvailableChronologies().forEach(chrono -> \nSystem.out.println(chrono.dateNow()))\n2018-07-30\nMinguo ROC 107-07-30\nJapanese Heisei 30-07-30\nThaiBuddhist BE 2561-07-30\nHijrah-umalqura AH 1439-11-17\n```", "```java\njshell> JapaneseDate jd = JapaneseDate.now()\njd ==> Japanese Heisei 30-07-30\n\njshell> jd.getChronology()\n$7 ==> Japanese\n\njshell> jd.getEra()\n$8 ==> Heisei\n\njshell> jd.lengthOfYear()\n$9 ==> 365\n\njshell> jd.lengthOfMonth()\n$10 ==> 31\n```", "```java\njshell> JapaneseEra.values()\n$42 ==> JapaneseEra[5] { Meiji, Taisho, Showa, Heisei, NewEra }\n```", "```java\njshell> HijrahDate hd = HijrahDate.of(1438, 12, 1)\nhd ==> Hijrah-umalqura AH 1438-12-01\n```", "```java\njshell> HijrahChronology.INSTANCE.localDateTime(LocalDateTime.now())\n$23 ==> Hijrah-umalqura AH 1439-11-17T19:56:52.056465900\n\njshell> HijrahChronology.INSTANCE.localDateTime(LocalDateTime.now()).toLocalDate()\n$24 ==> Hijrah-umalqura AH 1439-11-17\n\njshell> HijrahChronology.INSTANCE.localDateTime(LocalDateTime.now()).toLocalTime()\n$25 ==> 19:57:07.705740500\n```", "```java\njshell> import java.time.*\n\njshell> import java.time.chrono.*\n```", "```java\njshell> JapaneseDate jd = JapaneseDate.of(JapaneseEra.SHOWA, 26, 12, 25)\njd ==> Japanese Showa 26-12-25\n\njshell> JapaneseDate jd = JapaneseDate.now()\njd ==> Japanese Heisei 30-07-30\n\njshell> JapaneseDate jd = JapaneseChronology.INSTANCE.dateNow()\njd ==> Japanese Heisei 30-07-30\n\njshell> JapaneseDate jd = JapaneseChronology.INSTANCE.date(LocalDateTime.now())\njd ==> Japanese Heisei 30-07-30\n\njshell> ThaiBuddhistChronology.INSTANCE.date(LocalDate.now())\n$41 ==> ThaiBuddhist BE 2561-07-30\n```", "```java\njshell> LocalDate ld = LocalDate.now()\nld ==> 2018-08-01\n\njshell> ld.format(DateTimeFormatter.ISO_DATE)\n$47 ==> \"2018-08-01\"\n\njshell> LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)\n$49 ==> \"2018-08-01T17:24:49.1985601\"\n```", "```java\njshell> DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm:ss a\")\ndtf ==> Value(DayOfMonth,2)' 'Text(MonthOfYear,SHORT)' 'V ... 2)' 'Text(AmPmOfDay,SHORT)\n```", "```java\njshell> LocalDateTime ldt = LocalDateTime.now()\nldt ==> 2018-08-01T17:36:22.442159\n\njshell> ldt.format(dtf)\n$56 ==> \"01 Aug 2018 05:36:22 PM\"\n```", "```java\njshell> DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd MMMM yy h:mm:ss a VV\")\ndtf ==> Value(DayOfMonth,2)' 'Text(MonthOfYear)' 'Reduced ... mPmOfDay,SHORT)' 'ZoneId()\n\njshell> ZonedDateTime.now().format(dtf)\n$67 ==> \"01 August 18 6:26:04 PM Asia/Kolkata\"\n\njshell> DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd MMMM yy h:mm:ss a zz\")\ndtf ==> Value(DayOfMonth,2)' 'Text(MonthOfYear)' 'Reduced ... y,SHORT)' 'ZoneText(SHORT)\n\njshell> ZonedDateTime.now().format(dtf)\n$69 ==> \"01 August 18 6:26:13 PM IST\"\n\njshell> DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd MMMM yy h:mm:ss a O\")\ndtf ==> Value(DayOfMonth,2)' 'Text(MonthOfYear)' 'Reduced ... )' 'LocalizedOffset(SHORT)\n\njshell> ZonedDateTime.now().format(dtf)\n$72 ==> \"01 August 18 6:26:27 PM GMT+5:30\"\n```", "```java\njshell> DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"dd MMMM yy h:mm:ss a VV\")\ndtf ==> Value(DayOfMonth,2)' 'Text(MonthOfYear)' 'Reduced ... mPmOfDay,SHORT)' 'ZoneId()\n```", "```java\njshell> ZonedDateTime.now().format(dtf)\n$92 ==> \"01 August 18 7:25:00 PM Asia/Kolkata\"\n```", "```java\njshell> DateTimeFormatter dtf = new DateTimeFormatterBuilder().\n ...> appendValue(DAY_OF_MONTH, 2).\n ...> appendLiteral(\" \").\n ...> appendText(MONTH_OF_YEAR).\n ...> appendLiteral(\" \").\n ...> appendValue(YEAR, 4).\n ...> toFormatter()\ndtf ==> Value(DayOfMonth,2)' 'Text(MonthOfYear)' 'Value(Year,4)\n\njshell> LocalDate.now().format(dtf) E$106 ==> \"01 August 2018\"\n```"]