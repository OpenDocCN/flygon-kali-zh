["```java\npublic class Engine { \n  private int horsePower; \n  public void setHorsePower(int horsePower) { \n     this.horsePower = horsePower; \n  } \n  public double getSpeedMph(double timeSec, int weightPounds){ \n    double v = 2.0 * this.horsePower * 746 * timeSec * \n                                       32.17 / weightPounds; \n    return Math.round(Math.sqrt(v) * 0.68); \n } \n}\n```", "```java\n      public class Vehicle { \n          private int weightPounds; \n          private Engine engine; \n          public Vehicle(int weightPounds, Engine engine) { \n            this.weightPounds = weightPounds; \n            this.engine = engine; \n          } \n          public double getSpeedMph(double timeSec){ \n            return this.engine.getSpeedMph(timeSec, weightPounds); \n         } \n     } \n```", "```java\npublic static void main(String... arg) { \n   double timeSec = 10.0; \n   int horsePower = 246; \n   int vehicleWeight = 4000;  \n   Engine engine = new Engine(); \n   engine.setHorsePower(horsePower); \n   Vehicle vehicle = new Vehicle(vehicleWeight, engine); \n   System.out.println(\"Vehicle speed (\" + timeSec + \" sec)=\" \n                   + vehicle.getSpeedMph(timeSec) + \" mph\"); \n } \n```", "```java\nif(engine == null){ \n   throw new RuntimeException(\"Engine\" + \" is required parameter.\"); \n}   \n```", "```java\nif(getEngine() == null){ \n  throw new RuntimeException(\"Engine value is required.\"); \n} \n```", "```java\npublic double getSpeedMph(double timeSec){\n  double v =  2.0 * this.engine.getHorsePower() * 746 * \n                                timeSec * 32.17 / this.weightPounds;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\npublic class Car extends Vehicle {\n  private int passengersCount;\n  public Car(int passengersCount, int weightPounds, Engine engine){\n    super(weightPounds, engine);\n    this.passengersCount = passengersCount;\n  }\n  public int getPassengersCount() {\n    return this.passengersCount;\n  }\n}\n```", "```java\npublic static void main(String... arg) { \n  double timeSec = 10.0; \n  int horsePower = 246; \n  int vehicleWeight = 4000; \n  Engine engine = new Engine(); \n  engine.setHorsePower(horsePower); \n  Vehicle vehicle = new Car(4, vehicleWeight, engine); \n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                             vehicle.getSpeedMph(timeSec) + \" mph\"); \n} \n```", "```java\n        public class Vehicle {\n          private int weightPounds;\n          private Engine engine;\n          public Vehicle(int weightPounds, int horsePower) {\n            this.weightPounds = weightPounds;\n            this.engine = new Engine(horsePower);\n          }\n          public double getSpeedMph(double timeSec){\n            return this.engine.getSpeedMph(timeSec);\n          }\n          private int getWeightPounds(){ return weightPounds; }\n          private class Engine {\n            private int horsePower;\n            private Engine(int horsePower) {\n              this.horsePower = horsePower;\n            }\n            private double getSpeedMph(double timeSec){\n              double v = 2.0 * this.horsePower * 746 * \n                         timeSec * 32.17 / getWeightPounds();\n              return Math.round(Math.sqrt(v) * 0.68);\n            }\n          }\n        }\n```", "```java\n        public class Vehicle {\n          private int weightPounds;\n          private int horsePower;\n          public Vehicle(int weightPounds, int horsePower) {\n            this.weightPounds = weightPounds;\n            this.horsePower = horsePower;\n          }\n          private int getWeightPounds() { return weightPounds; }\n          public double getSpeedMph(double timeSec){\n            class Engine {\n              private int horsePower;\n              private Engine(int horsePower) {\n                this.horsePower = horsePower;\n              }\n              private double getSpeedMph(double timeSec){\n                double v = 2.0 * this.horsePower * 746 * \n                          timeSec * 32.17 / getWeightPounds();\n                return Math.round(Math.sqrt(v) * 0.68);\n              }\n            }\n            Engine engine = new Engine(this.horsePower);\n            return engine.getSpeedMph(timeSec);\n          }\n        }\n```", "```java\npublic static void main(String arg[]) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = \n          new Vehicle(vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Vehicle speed (\" + timeSec + \" sec) = \" \n                    + vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic double getSpeedMph(double timeSec){ return -1.0d; }\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = \n    new Vehicle(vehicleWeightPounds, engineHorsePower) {\n        public double getSpeedMph(double timeSec){ \n           return -1.0d;\n        }\n    };\n  System.out.println(\"Vehicle speed (\" + timeSec + \" sec) = \"\n                    + vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = \n    new Vehicle(vehicleWeightPounds, engineHorsePower){\n      public double getSpeedMph(double timeSec){\n        double v = 2.0 * engineHorsePower * 746 * \n             timeSec * 32.17 / vehicleWeightPounds;\n        return Math.round(Math.sqrt(v) * 0.68);\n      }\n    };\n  System.out.println(\"Vehicle speed (\" + timeSec + \" sec) = \" \n                    + vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic class Vehicle {\n  private Engine engine;\n  public Vehicle(int weightPounds, int horsePower) {\n    this.engine = new Engine(horsePower, weightPounds)\n  }\n  public double getSpeedMph(double timeSec){\n    return this.engine.getSpeedMph(timeSec);\n  }\n  private static class Engine {\n    private int horsePower;\n    private int weightPounds;\n    private Engine(int horsePower, int weightPounds) {\n      this.horsePower = horsePower;\n    }\n    private double getSpeedMph(double timeSec){\n      double v = 2.0 * this.horsePower * 746 * \n                       timeSec * 32.17 / this.weightPounds;\n      return Math.round(Math.sqrt(v) * 0.68);\n    }\n  }\n}\n```", "```java\n        public class Vehicle {\n          private int weightPounds, horsePower;\n          public Vehicle(int weightPounds, int horsePower) {\n            this.weightPounds = weightPounds;\n            this.horsePower = horsePower;\n          }\n          public double getSpeedMph(double timeSec){\n            double v = 2.0 * this.horsePower * 746 * \n                     timeSec * 32.17 / this.weightPounds;\n            return Math.round(Math.sqrt(v) * 0.68);\n          }\n        }\n```", "```java\n        public class Car extends Vehicle {\n          private int passengersCount;\n          public Car(int passengersCount, int weightPounds, \n                                             int horsepower){\n            super(weightPounds, horsePower);\n            this.passengersCount = passengersCount;\n          }\n          public int getPassengersCount() { \n            return this.passengersCount; \n          }\n        }\n```", "```java\n         public class Truck extends Vehicle {\n           private int payload;\n           public Truck(int payloadPounds, int weightPounds, \n                                              int horsePower){\n             super(weightPounds, horsePower);\n             this.payload = payloadPounds;\n           }\n           public int getPayload() { \n             return this.payload; \n           }\n         }\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = new Car(4, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Passengers count=\" + \n                                 ((Car)vehicle).getPassengersCount());\n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                               vehicle.getSpeedMph(timeSec) + \" mph\");\n  vehicle = new Truck(3300, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Payload=\" + \n                           ((Truck)vehicle).getPayload() + \" pounds\");\n  System.out.println(\"Truck speed (\" + timeSec + \" sec) = \" + \n                               vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weight = this.weightPounds + this.passengersCount * 250;\n  double v = 2.0 * this.horsePower * 746 * timeSec * 32.17 / weight;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weight = this.weightPounds + this.payload;\n  double v = 2.0 * this.horsePower * 746 * timeSec * 32.17 / weight;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\nVehicle vehicle =  new Car(4, vehicleWeightPounds, engineHorsePower);\nSystem.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                              vehicle.getSpeedMph(timeSec) + \" mph\");\n```", "```java\nprotected double getSpeedMph(double timeSec, int weightPounds) {\n  double v = 2.0 * this.horsePower * 746 * \n                              timeSec * 32.17 / weightPounds;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weightPounds = this.weightPounds + this.passengersCount * 250;\n  return getSpeedMph(timeSec, weightPounds);\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weightPounds = this.weightPounds + this.payload;\n  return getSpeedMph(timeSec, weightPounds);\n}\n```", "```java\npublic static void main(String... arg) {\n    double timeSec = 10.0;\n    int engineHorsePower = 246;\n    int vehicleWeightPounds = 4000;\n    Vehicle vehicle = new Car(4, vehicleWeightPounds, \n    engineHorsePower);\n    System.out.println(\"Passengers count=\" + \n    ((Car)vehicle).getPassengersCount());\n    System.out.println(\"Car speed (\" + timeSec + \" sec) = \" +\n                       ((Car)vehicle).getSpeedMph(timeSec) + \" mph\");\n    vehicle = new Truck(3300, vehicleWeightPounds, engineHorsePower);\n    System.out.println(\"Payload=\" + \n                          ((Truck)vehicle).getPayload() + \" pounds\");\n    System.out.println(\"Truck speed (\" + timeSec + \" sec) = \" + \n                     ((Truck)vehicle).getSpeedMph(timeSec) + \" mph\");\n  }\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Car car = new Car(4, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Passengers count=\" + car.getPassengersCount());\n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                                  car.getSpeedMph(timeSec) + \" mph\");\n  Truck truck = \n              new Truck(3300, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Payload=\" + truck.getPayload() + \" pounds\");\n  System.out.println(\"Truck speed (\" + timeSec + \" sec) = \" + \n                                truck.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic class Car extends Vehicle {\n  private int passengersCount, weightPounds;\n  public Car(int passengersCount, int weightPounds, int horsePower){\n    super(weightPounds, horsePower);\n    this.passengersCount = passengersCount;\n    this.weightPounds = weightPounds;\n  }\n  public int getPassengersCount() { \n    return this.passengersCount;\n  }\n  public int getMaxWeightPounds() {\n    return this.weightPounds + this.passengersCount * 250;\n  }\n}\n```", "```java\npublic class Truck extends Vehicle {\n  private int payload, weightPounds;\n  public Truck(int payloadPounds, int weightPounds, int horsePower) {\n    super(weightPounds, horsePower);\n    this.payload = payloadPounds;\n    this.weightPounds = weightPounds;\n  }\n  public int getPayload() { return this.payload; }\n  public int getMaxWeightPounds() {\n    return this.weightPounds + this.payload;\n  }\n}\n```", "```java\npublic abstract class Vehicle {\n  private int weightPounds, horsePower;\n  public Vehicle(int weightPounds, int horsePower) {\n    this.weightPounds = weightPounds;\n    this.horsePower = horsePower;\n  }\n  public abstract int getMaxWeightPounds();\n  public double getSpeedMph(double timeSec){\n    double v = 2.0 * this.horsePower * 746 * \n                             timeSec * 32.17 / getMaxWeightPounds();\n    return Math.round(Math.sqrt(v) * 0.68);\n  }\n}\n```", "```java\npublic class Car extends Vehicle {\n  private int passengersCount;\n  public Car(int passengersCount, int weightPounds, int horsepower){\n    super(weightPounds + passengersCount * 250, horsePower);\n    this.passengersCount = passengersCount;\n  }\n  public int getPassengersCount() { \n    return this.passengersCount; }\n}\n```", "```java\npublic class Truck extends Vehicle {\n  private int payload;\n  public Truck(int payloadPounds, int weightPounds, int horsePower) {\n    super(weightPounds + payloadPounds, horsePower);\n    this.payload = payloadPounds;\n  }\n  public int getPayload() { return this.payload; }\n}\n```", "```java\npublic class Vehicle {\n  private int weightPounds, horsePower;\n  public Vehicle(int weightPounds, int horsePower) {\n    this.weightPounds = weightPounds;\n    this.horsePower = horsePower;\n  }\n  public double getSpeedMph(double timeSec){\n    double v = 2.0 * this.horsePower * 746;\n    v = v * timeSec * 32.174 / this.weightPounds;\n    return Math.round(Math.sqrt(v) * 0.68);\n  }\n}\n```", "```java\npublic class SpeedModel{\n  private Properties conditions;\n  public SpeedModel(Properties drivingConditions){\n    this.drivingConditions = drivingConditions;\n  }\n  public double getSpeedMph(double timeSec, int weightPounds,\n                                               int horsePower){\n    String road = \n         drivingConditions.getProperty(\"roadCondition\",\"Dry\");\n    String tire = \n         drivingConditions.getProperty(\"tireCondition\",\"New\");\n    double v = 2.0 * horsePower * 746 * timeSec * \n                                         32.17 / weightPounds;\n    return Math.round(Math.sqrt(v)*0.68)-road.equals(\"Dry\")? 2 : 5) \n                                       -(tire.equals(\"New\")? 0 : 5);\n  }\n}\n```", "```java\npublic class Vehicle {\n   private SpeedModel speedModel;       \n   private int weightPounds, horsePower;\n   public Vehicle(int weightPounds, int horsePower) {\n      this.weightPounds = weightPounds;\n      this.horsePower = horsePower;\n   }\n   public void setSpeedModel(SpeedModel speedModel){\n      this.speedModel = speedModel;\n   }\n   public double getSpeedMph(double timeSec){\n      return this.speedModel.getSpeedMph(timeSec,\n                       this.weightPounds, this.horsePower);\n   }\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int horsePower = 246;\n  int vehicleWeight = 4000;\n  Properties drivingConditions = new Properties();\n  drivingConditions.put(\"roadCondition\", \"Wet\");\n  drivingConditions.put(\"tireCondition\", \"New\");\n  SpeedModel speedModel = new SpeedModel(drivingConditions);\n  Car car = new Car(4, vehicleWeight, horsePower);\n  car.setSpeedModel(speedModel);\n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                         car.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic interface SpeedModel {\n   double getSpeedMph(double timeSec, int weightPounds, \n                                            int horsePower);\n }\n public interface Vehicle {\n   void setSpeedModel(SpeedModel speedModel);\n   double getSpeedMph(double timeSec);\n }\n public interface Car extends Vehicle {\n   int getPassengersCount();\n }\n public interface Truck extends Vehicle {\n   int getPayloadPounds();\n }\n```", "```java\npublic static void main(String... arg) {\n   double timeSec = 10.0;\n   int horsePower = 246;\n   int vehicleWeight = 4000;\n   Properties drivingConditions = new Properties();\n   drivingConditions.put(\"roadCondition\", \"Wet\");\n   drivingConditions.put(\"tireCondition\", \"New\");\n   SpeedModel speedModel  = FactorySpeedModel.\n                 generateSpeedModel(drivingConditions);\n   Car car = FactoryVehicle.\n                buildCar(4, vehicleWeight, horsePower);\n   car.setSpeedModel(speedModel);\n   System.out.println(\"Car speed (\" + timeSec + \" sec) = \" \n                      + car.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic class FactorySpeedModel {\n  public static SpeedModel generateSpeedModel(\n  Properties drivingConditions){\n    //if drivingConditions includes \"roadCondition\"=\"Wet\"\n    return new SpeedModelWet(...);\n    //if drivingConditions includes \"roadCondition\"=\"Dry\"\n    return new SpeedModelDry(...);\n  }\n  private class SpeedModelWet implements SpeedModel{\n    public double getSpeedMph(double timeSec, int weightPounds, \n                                                     int horsePower){\n       //method code goes here\n    }\n  }\n  private class SpeedModelDry implements SpeedModel{\n    public double getSpeedMph(double timeSec, int weightPounds, \n                                                     int horsePower){\n      //method code goes here\n    }\n  }\n}\n```", "```java\npublic class FactoryVehicle {\n  public static Car buildCar(int passengersCount, \n                               int weightPounds, int horsePower){\n    return new CarImpl(passengersCount, weightPounds,horsePower);\n  }\n  public static Truck buildTruck(int payloadPounds, \n                               int weightPounds, int horsePower){\n    return new TruckImpl(payloadPounds, weightPounds,horsePower);\n  }\n}\n```", "```java\n  private static class CarImpl extends VehicleImpl implements Car {\n    private int passengersCount;\n    private CarImpl(int passengersCount, int weightPounds,\n                                                 int horsePower){\n      super(weightPounds + passengersCount * 250, horsePower);\n      this.passengersCount = passengersCount;\n    }\n    public int getPassengersCount() { \n      return this.passengersCount;\n    }\n  }\n```", "```java\n  private static class TruckImpl extends VehicleImpl implements Truck {\n    private int payloadPounds;\n    private TruckImpl(int payloadPounds, int weightPounds, \n                                                     int horsePower){\n      super(weightPounds+payloadPounds, horsePower);\n      this.payloadPounds = payloadPounds;\n    }\n    public int getPayloadPounds(){ return payloadPounds; }\n  }\n```", "```java\n  private static abstract class VehicleImpl implements Vehicle {\n    private SpeedModel speedModel;\n    private int weightPounds, horsePower;\n    private VehicleImpl(int weightPounds, int horsePower){\n      this.weightPounds = weightPounds;\n      this.horsePower = horsePower;\n    }\n    public void setSpeedModel(SpeedModel speedModel){ \n      this.speedModel = speedModel; \n    }\n    public double getSpeedMph(double timeSec){\n      return this.speedModel.getSpeedMph(timeSec, weightPounds, \n                                                    horsePower);\n    }\n  }\n```", "```java\npublic class CrewCab extends VehicleImpl implements Car, Truck {\n  private int payloadPounds;\n  private int passengersCount;\n  private CrewCabImpl(int passengersCount, int payloadPounds,\n                             int weightPounds, int horsePower) {\n     super(weightPounds + payloadPounds + passengersCount * 250, \n                                                     horsePower);\n     this.payloadPounds = payloadPounds;\n     this. passengersCount = passengersCount;\n  }\n  public int getPayloadPounds(){ return payloadPounds; }\n  public int getPassengersCount() { \n     return this.passengersCount;\n  }\n}\n```", "```java\npublic static Vehicle buildCrewCab(int passengersCount, \n                      int payload, int weightPounds, int horsePower){\n  return new CrewCabImpl(passengersCount, payload, \n                                           weightPounds, horsePower);\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int horsePower = 246;\n  int vehicleWeight = 4000;\n  Properties drivingConditions = new Properties();\n  drivingConditions.put(\"roadCondition\", \"Wet\");\n  drivingConditions.put(\"tireCondition\", \"New\");\n  SpeedModel speedModel = \n      FactorySpeedModel.generateSpeedModel(drivingConditions);\n  Vehicle vehicle = FactoryVehicle.\n             buildCrewCab(4, 3300, vehicleWeight, horsePower);\n  vehicle.setSpeedModel(speedModel);\n  System.out.println(\"Payload = \" +\n            ((Truck)vehicle).getPayloadPounds()) + \" pounds\");\n  System.out.println(\"Passengers count = \" + \n                         ((Car)vehicle).getPassengersCount());\n  System.out.println(\"Crew cab speed (\" + timeSec + \" sec) = \"  \n                     + vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\n      public interface Truck extends Vehicle {\n          int getPayloadPounds();\n          default int getPayloadKg(){\n            return (int) Math.round(0.454 * getPayloadPounds());\n          }\n      }\n```", "```java\n      public static void main(String... arg) {\n         Truck truck = FactoryVehicle.buildTruck(3300, 4000, 246);\n         System.out.println(\"Payload in pounds: \" + \n                                        truck.getPayloadPounds());\n         System.out.println(\"Payload in kg: \" + \n                                            truck.getPayloadKg());\n      }\n```", "```java\n       class TruckImpl extends VehicleImpl implements Truck {\n          private int payloadPounds;\n          private TruckImpl(int payloadPounds, int weightPounds,\n                                                int horsePower) {\n            super(weightPounds + payloadPounds, horsePower);\n            this.payloadPounds = payloadPounds;\n          }\n          public int getPayloadPounds(){ return payloadPounds; }\n          public int getPayloadKg(){ return -2; }\n       }\n```", "```java\n      public interface Truck extends Vehicle {\n          int getPayloadPounds();\n          default int getPayloadKg(){\n            return (int) Math.round(0.454 * getPayloadPounds());\n          }\n          static int convertKgToPounds(int kgs){\n            return (int) Math.round(2.205 * kgs);\n          }\n       }\n```", "```java\npublic static void main(String... arg) {\n  int horsePower = 246;\n  int payload = Truck.convertKgToPounds(1500);\n  int vehicleWeight = Truck.convertKgToPounds(1800);\n  Truck truck = FactoryVehicle.\n           buildTruck(payload, vehicleWeight, horsePower);\n  System.out.println(\"Payload in pounds: \" + \n                                truck.getPayloadPounds());\n  int kg = truck.getPayloadKg();\n  System.out.println(\"Payload converted to kg: \" + kg);\n  System.out.println(\"Payload converted back to pounds: \" + \n                              Truck.convertKgToPounds(kg));\n}\n```", "```java\n     public interface Truck extends Vehicle {\n         int getPayloadPounds();\n         default int getPayloadKg(){\n            return (int) Math.round(0.454 * getPayloadPounds());\n         }\n         static int convertKgToPounds(int kilograms){\n            return (int) Math.round(2.205 * kilograms);\n         }\n         default int getWeightKg(int pounds){\n            return (int) Math.round(0.454 * pounds);\n         }\n     }\n```", "```java\n    public interface Truck extends Vehicle {\n        int getPayloadPounds();\n        default int getPayloadKg(int pounds){\n            return convertPoundsToKg(pounds);\n        }\n        static int convertKgToPounds(int kilograms){\n            return (int) Math.round(2.205 * kilograms);\n        }\n        default int getWeightKg(int pounds){\n            return convertPoundsToKg(pounds);\n        }\n        private int convertPoundsToKg(int pounds){\n            return (int) Math.round(0.454 * pounds);\n        }\n    }\n```", "```java\npublic static void main(String... arg) {\n  int horsePower = 246;\n  int payload = Truck.convertKgToPounds(1500);\n  int vehicleWeight = Truck.convertKgToPounds(1800);\n  Truck truck = \n      FactoryVehicle.buildTruck(payload, vehicleWeight, horsePower);\n  System.out.println(\"Weight in pounds: \" + vehicleWeight);\n  int kg = truck.getWeightKg(vehicleWeight);\n  System.out.println(\"Weight converted to kg: \" + kg);\n  System.out.println(\"Weight converted back to pounds: \" + \n                                       Truck.convertKgToPounds(kg));\n}\n```", "```java\npublic interface Truck extends Vehicle {\n  int getPayloadPounds();\n  default int getPayloadKg(int pounds){\n    return convertPoundsToKg(pounds);\n  }\n  static int convertKgToPounds(int kilograms){\n    return (int) Math.round(2.205 * kilograms);\n  }\n  static int convertPoundsToKg(int pounds){\n    return (int) Math.round(0.454 * pounds);\n  }\n}\n```", "```java\npublic static void main(String... arg) {\n  int payload = Truck.convertKgToPounds(1500);\n  int vehicleWeight = Truck.convertKgToPounds(1800);\n  System.out.println(\"Weight in pounds: \" + vehicleWeight);\n  int kg = Truck.convertPoundsToKg(vehicleWeight);\n  System.out.println(\"Weight converted to kg: \" + kg);\n  System.out.println(\"Weight converted back to pounds: \" + \n                                     Truck.convertKgToPounds(kg));\n}\n```", "```java\nvoid checkResultInt(int lotteryPrize){\n    if(lotteryPrize <= 0){\n        System.out.println(\"We've lost again...\");\n    } else {\n        System.out.println(\"We've won! Your half is \" + \n                     Math.round(((double)lotteryPrize)/2) + \"!\");\n    }\n}\n```", "```java\nvoid checkResultInt(Integer lotteryPrize){\n    if(lotteryPrize == null || lotteryPrize <= 0){\n        System.out.println(\"We've lost again...\");\n    } else {\n        System.out.println(\"We've won! Your half is \" + \n                    Math.round(((double)lotteryPrize)/2) + \"!\");\n    }\n}\n```", "```java\nvoid checkResultOpt(Optional<Integer> lotteryPrize){\n    if(lotteryPrize == null || !lotteryPrize.isPresent() \n                                        || lotteryPrize.get() <= 0){\n        System.out.println(\"We lost again...\");\n    } else {\n        System.out.println(\"We've won! Your half is \" + \n                   Math.round(((double)lotteryPrize.get())/2) + \"!\");\n    }\n}\n```", "```java\nOptional<Integer> prize1 = Optional.empty();\nSystem.out.println(prize1.isPresent()); //prints: false\nSystem.out.println(prize1);   //prints: Optional.empty\n\nOptional<Integer> prize2 = Optional.of(1000000);\nSystem.out.println(prize2.isPresent()); //prints: true\nSystem.out.println(prize2);  //prints: Optional[1000000]\n\n//Optional<Integer> prize = Optional.of(null); \n                                  //NullPointerException\n\nOptional<Integer> prize3 = Optional.ofNullable(null);\nSystem.out.println(prize3.isPresent());  //prints: false\nSystem.out.println(prize3);     //prints: Optional.empty\n\n```", "```java\nOptional<Integer> prize1 = Optional.empty();\nSystem.out.println(prize1.equals(prize1)); //prints: true\n\nOptional<Integer> prize2 = Optional.of(1000000);\nSystem.out.println(prize1.equals(prize2)); //prints: false\n\nOptional<Integer> prize3 = Optional.ofNullable(null);\nSystem.out.println(prize1.equals(prize3)); //prints: true\n\nOptional<Integer> prize4 = Optional.of(1000000);\nSystem.out.println(prize2.equals(prize4)); //prints: true\nSystem.out.println(prize2 == prize4); //prints: false\n\nOptional<Integer> prize5 = Optional.of(10);\nSystem.out.println(prize2.equals(prize5)); //prints: false\n\nOptional<String> congrats1 = Optional.empty();\nSystem.out.println(prize1.equals(congrats1));//prints: true\n\nOptional<String> congrats2 = Optional.of(\"Happy for you!\");\nSystem.out.println(prize1.equals(congrats2));//prints: false\n```", "```java\n       int prize = lotteryPrize.or(() -> Optional.of(0)).get();\n\n```", "```java\nvoid processIfPresent(Optional<Integer> lotteryPrize){\n   lotteryPrize.ifPresent(prize -> {\n      if(prize <= 0){\n          System.out.println(\"We've lost again...\");\n      } else {\n          System.out.println(\"We've won! Your half is \" + \n                    Math.round(((double)prize)/2) + \"!\");\n     }\n});\n```", "```java\nvoid checkResultAndShare(int prize){\n    if(prize <= 0){\n        System.out.println(\"We've lost again...\");\n    } else {\n        System.out.println(\"We've won! Your half is \" + \n                   Math.round(((double)prize)/2) + \"!\");\n    }\n}\n```", "```java\nvoid processIfPresent(Optional<Integer> lotteryPrize){\n    lotteryPrize.ifPresent(prize -> checkResultAndShare(prize));\n}\n```", "```java\nvoid processIfPresentOrElse(Optional<Integer> lotteryPrize){\n   Consumer<Integer> weWon = \n                       prize -> checkResultAndShare(prize);\n   Runnable weLost = \n           () -> System.out.println(\"We've lost again...\");\n   lotteryPrize.ifPresentOrElse(weWon, weLost);\n}\n```", "```java\nvoid processOrGet(Optional<Integer> lotteryPrize){\n   int prize = lotteryPrize.orElseGet(() -> 42);\n   lotteryPrize.ifPresentOrElse(p -> checkResultAndShare(p),\n      () -> System.out.println(\"Better \" + prize \n                                     + \" than nothing...\"));\n }\n```", "```java\nvoid processOrThrow(Optional<Integer> lotteryPrize){\n   int prize = lotteryPrize.orElseThrow();\n   checkResultAndShare(prize);\n}\n```", "```java\nvoid processOrThrow(Optional<Integer> lotteryPrize){\n    int prize = lotteryPrize.orElseThrow(() -> \n           new RuntimeException(\"We've lost again...\"));\n    checkResultAndShare(prize);\n}\n```", "```java\nvoid useFilter(List<Optional<Integer>> list){\n   list.stream().filter(opt -> opt.isPresent())\n         .forEach(opt -> checkResultAndShare(opt.get()));\n}\nvoid useMap(List<Optional<Integer>> list){\n   list.stream().map(opt -> opt.or(() -> Optional.of(0)))\n         .forEach(opt -> checkResultAndShare(opt.get()));\n}\nvoid useFlatMap(List<Optional<Integer>> list){\n   list.stream().flatMap(opt -> \n           List.of(opt.or(()->Optional.of(0))).stream())\n        .forEach(opt -> checkResultAndShare(opt.get()));\n}\n```", "```java\nvoid useFlatMap(List<Optional<Integer>> list){\n    Function<Optional<Integer>, \n      Stream<Optional<Integer>>> tryUntilWin = opt -> {\n        List<Optional<Integer>> opts = new ArrayList<>();\n        if(opt.isPresent()){\n            opts.add(opt);\n        } else {\n            int prize = 0;\n            while(prize == 0){\n                double d = Math.random() - 0.8;\n                prize = d > 0 ? (int)(1000000 * d) : 0;\n                opts.add(Optional.of(prize));\n            }\n        }\n        return opts.stream();\n    };\n    list.stream().flatMap(tryUntilWin)\n        .forEach(opt -> checkResultAndShare(opt.get()));\n}\n```", "```java\nList<Optional<Integer>> list = List.of(Optional.empty(), \n                                       Optional.ofNullable(null), \n                                       Optional.of(100000));\nuseFlatMap(list);\n\n```", "```java\nint res =\n      Objects.compare(\"a\", \"c\", Comparator.naturalOrder());\nSystem.out.println(res);       //prints: -2\nres = Objects.compare(\"a\", \"a\", Comparator.naturalOrder());\nSystem.out.println(res);       //prints: 0\nres = Objects.compare(\"c\", \"a\", Comparator.naturalOrder());\nSystem.out.println(res);       //prints: 2\nres = Objects.compare(\"c\", \"a\", Comparator.reverseOrder());\nSystem.out.println(res);       //prints: -2\n```", "```java\nres = Objects.compare(3, 5, Comparator.naturalOrder());\nSystem.out.println(res);       //prints: -1\nres = Objects.compare(3, 3, Comparator.naturalOrder());\nSystem.out.println(res);       //prints: 0\nres = Objects.compare(5, 3, Comparator.naturalOrder());\nSystem.out.println(res);       //prints: 1\nres = Objects.compare(5, 3, Comparator.reverseOrder());\nSystem.out.println(res);       //prints: -1\nres = Objects.compare(\"5\", \"3\", Comparator.reverseOrder());\nSystem.out.println(res);       //prints: -2\n```", "```java\nres = Objects.compare(null,null,Comparator.naturalOrder());\nSystem.out.println(res);       //prints: 0\n\n```", "```java\n//Objects.compare(null, \"c\", Comparator.naturalOrder());   \n//Objects.compare(\"a\", null, Comparator.naturalOrder());   \n```", "```java\nSystem.out.println(Objects.toString(\"a\")); //prints: a\nSystem.out.println(Objects.toString(null)); //prints: null\nSystem.out.println(Objects.toString(\"a\", \"b\")); //prints: a\nSystem.out.println(Objects.toString(null, \"b\"));//prints: b\n```", "```java\nList<Integer> list = List.of(1, 2);\ntry {\n   Objects.checkIndex(3, list.size());\n} catch (IndexOutOfBoundsException ex){\n   System.out.println(ex.getMessage()); \n       //prints: Index 3 out-of-bounds for length 2\n}\n```", "```java\nList<Integer> list = List.of(1, 2);\ntry {\n   Objects.checkFromIndexSize(1, 3, list.size());\n} catch (IndexOutOfBoundsException ex){\n   System.out.println(ex.getMessage());\n//prints:Range [1, 1 + 3) out-of-bounds for length 2\n}\n```", "```java\nList<Integer> list = List.of(1, 2);\ntry {\n   Objects.checkFromToIndex(1, 3, list.size());\n} catch (IndexOutOfBoundsException ex){\n   System.out.println(ex.getMessage()); \n   //prints:Range [1, 3) out-of-bounds for length 2\n}\n```", "```java\nString obj = null;\ntry {\n  Objects.requireNonNull(obj);\n} catch (NullPointerException ex){\n  System.out.println(ex.getMessage());//prints: null\n}\n```", "```java\nString obj = null;\ntry {\n  Objects.requireNonNull(obj,  \n                          \"Parameter 'obj' is null\");\n} catch (NullPointerException ex){\n  System.out.println(ex.getMessage()); \n                 //prints: Parameter 'obj' is null\n}\n```", "```java\nString obj = null;\nSupplier<String> supplier = () -> \"Message\";\ntry {\n  Objects.requireNonNull(obj, supplier);\n} catch (NullPointerException ex){\n  System.out.println(ex.getMessage()); \n                         //prints: Message\n}\n```", "```java\nString object = null;\nSystem.out.println(Objects\n          .requireNonNullElse(obj, \"Default value\")); \n                          //prints: Default value\n```", "```java\nInteger obj = null;\nSupplier<Integer> supplier = () -> 42;\ntry {\n    System.out.println(Objects\n              .requireNonNullElseGet(obj, supplier));\n} catch (NullPointerException ex){\n    System.out.println(ex.getMessage()); //prints: 42\n} \n```", "```java\nSystem.out.println(Objects.hashCode(null)); \n                                       //prints: 0\nSystem.out.println(Objects.hashCode(\"abc\")); \n                                   //prints: 96354 \n```", "```java\nSystem.out.println(Objects.hash(null));  //prints: 0\nSystem.out.println(Objects.hash(\"abc\"));  \n                                     //prints: 96385\nString[] arr = {\"abc\"};\nSystem.out.println(Objects.hash(arr));\n                                     //prints: 96385\nObject[] objs = {\"a\", 42, \"c\"};\nSystem.out.println(Objects.hash(objs));  \n                                    //prints: 124409\nSystem.out.println(Objects.hash(\"a\", 42, \"c\")); \n                                    //prints: 124409\n```", "```java\nString obj = null;\nSystem.out.println(obj == null);     //prints: true\nSystem.out.println(Objects.isNull(obj));\n                                     //prints: true\nobj = \"\";\nSystem.out.println(obj == null);    //prints: false\nSystem.out.println(Objects.isNull(obj));  \n                                    //prints: false\n```", "```java\nString obj = null;\nSystem.out.println(obj != null);    //prints: false\nSystem.out.println(Objects.nonNull(obj)); \n                                    //prints: false\nobj = \"\";\nSystem.out.println(obj != null);     //prints: true\nSystem.out.println(Objects.nonNull(obj));  \n                                     //prints: true\n```", "```java\nString o1 = \"o\";\nString o2 = \"o\";\nSystem.out.println(Objects.equals(o1, o2));       \n                                   //prints: true\nSystem.out.println(Objects.equals(null, null));   \n                                   //prints: true\nInteger[] ints1 = {1,2,3};\nInteger[] ints2 = {1,2,3};\nSystem.out.println(Objects.equals(ints1, ints2)); \n                                  //prints: false\n```", "```java\nString o1 = \"o\";\nString o2 = \"o\";\nSystem.out.println(Objects.deepEquals(o1, o2));    \n                                   //prints: true\nSystem.out.println(Objects.deepEquals(null, null));\n                                   //prints: true\nInteger[] ints1 = {1,2,3};\nInteger[] ints2 = {1,2,3};\nSystem.out.println(Objects.deepEquals(ints1,ints2));\n                                      //prints: true\nInteger[][] iints1 = {{1,2,3},{1,2,3}};\nInteger[][] iints2 = {{1,2,3},{1,2,3}};\nSystem.out.println(Objects.\n         deepEquals(iints1, iints2)); //prints: true  \n```", "```java\nInteger[][] iints1 = {{1,2,3},{1,2,3}};\nInteger[][] iints2 = {{1,2,3},{1,3,2}};\nSystem.out.println(Objects.\n      deepEquals(iints1, iints2)); //prints: false\n```", "```java\nInteger[] ints1 = {1,2,3};\nInteger[] ints2 = {1,2,3};\nSystem.out.println(Arrays.equals(ints1, ints2));         \n                                            //prints: true\nSystem.out.println(Arrays.deepEquals(ints1, ints2));     \n                                            //prints: true\nSystem.out.println(Arrays.equals(iints1, iints2));       \n                                            //prints: false\nSystem.out.println(Arrays.deepEquals(iints1, iints2));   \n                                            //prints: true\n```"]