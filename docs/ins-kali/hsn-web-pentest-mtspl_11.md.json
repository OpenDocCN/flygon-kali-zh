["```\n/wp-links-opml.php\n```", "```\nrequire 'open3'\nrequire 'fileutils'\nrequire 'json'\nrequire 'pp'\n```", "```\nclass MetasploitModule < Msf::Auxiliary\n include Msf::Auxiliary::Report\n```", "```\ndef initialize\n super(\n 'Name' => 'Metasploit WordPress Scanner (WPscan)',\n 'Description' => 'Runs wpscan via Metasploit',\n 'Author' => [ 'Harpreet Singh', 'Himanshu Sharma' ]\n )\n```", "```\nregister_options(\n [\n     OptString.new('TARGET_URL', [true, 'The target URL to be scanned using wpscan'])\n ]\n )\n end\n```", "```\ndef target_url\n datastore['TARGET_URL']\nend\n```", "```\ndef find_wpscan_path\n Rex::FileUtils.find_full_path(\"wpscan\")\nend\n```", "```\ndef run\n wpscan = find_wpscan_path\n if wpscan.nil?\n print_error(\"Please install wpscan gem via: gem install wpscan\")\n end\n```", "```\ntmp_file_name = Rex::Text.rand_text_alpha(10)\n```", "```\ncmd = [ wpscan, \"--url\", target_url, \"-o\", \"#{tmp_file_name}\", \"-f\", \"json\", \"--force\" ]\n ::IO.popen(cmd, \"rb\") do |fd|\n     print_status(\"Running WPscan on #{target_url}\")\n     print_line(\"\\t\\t\\t\\t(This may take some time)\\n\")\n     fd.each_line do |line|\n         print_status(\"Output: #{line.strip}\")\n     end\n end\n```", "```\njson = File.read(\"/tmp/#{tmp_file_name}\")\n```", "```\nobj = JSON.parse(json)\n i = 0\n print_line(\"\\n\")\n print_status(\"-------------------------------------\")\n print_status(\"Looking for some Interesting Findings\")\n print_status(\"-------------------------------------\")\n obj = obj.compact\n```", "```\n\n while (i <= obj['interesting_findings'].length) do\n     if obj['interesting_findings'][i]['type'] == 'headers' && !(obj['interesting_findings'][i].nil?)\n         obj['interesting_findings'][i]['interesting_entries'].each { |x|                     print_good(\"Found Some Interesting Enteries via Header detection: #{x}\")}\n         i += 1\n     elsif obj['interesting_findings'][i]['type'] == 'robots_txt' && (!obj['interesting_findings'][i].nil?)\n         obj['interesting_findings'][i]['interesting_entries'].each { |x| print_good(\"Found Some Interesting Enteries via robots.txt: #{x}\")}\n         i += 1\n     else\n         break\n     end\n end\n```", "```\n print_line(\"\\n\")\n print_status(\"--------------------------------------\")\n print_status(\"Looking for the WordPress version now\")\n print_status(\"--------------------------------------\")\n if !(obj['version'].nil?)\n     print_good(\"Found WordPress version: \" + obj['version']['number'] + \" via \" + obj['version']['found_by'])\n else\n     print_error(\"Version not found\")\n end\n```", "```\n print_status \"#{obj['version']['vulnerabilities'].count} vulnerabilities identified:\"\n obj['version']['vulnerabilities'].each do |x|\n print_error(\"\\tTitle: #{x['title']}\")\n print_line(\"\\tFixed in: #{x['fixed_in']}\")\n print_line(\"\\tReferences:\")\n x['references'].each do |ref|\n if ref[0].include?'cve'\n     print_line(\"\\t\\t- https://cve.mitre.org/cgi-bin/cvename.cgi?name=#{ref[1][0]}\")\n elsif ref[0].include?'url'\n     ref[1].each do |e|\n     print_line(\"\\t\\t- #{e}\")\n end\n elsif ref[0].include?'wpvulndb'\n     print_line(\"\\t\\t- https://wpvulndb.com/vulnerabilities/#{ref[1][0]}\")\n end\n end\n print_line(\"\\n\")\n end\n```", "```\n print_line(\"\\n\")\n print_status(\"------------------------------------------\")\n print_status(\"Checking for installed themes in WordPress\")\n print_status(\"------------------------------------------\")\n if !(obj['main_theme'].nil?)\n     print_good(\"Theme found: \" + \"\\\"\" + obj['main_theme']['slug'] + \"\\\"\" + \" via \" + obj['main_theme']['found_by'] + \" with version: \" + obj['main_theme']['version']['number'])\n else\n     print_error(\"Theme not found\")\n end\n```", "```\n print_line(\"\\n\")\n print_status(\"---------------------------------\")\n print_status(\"Enumerating installed plugins now\")\n print_status(\"---------------------------------\")\n if !(obj['plugins'].nil?)\n     obj['plugins'].each do |x|\n     if !x[1]['version'].nil?\n         print_good \"Plugin Found: #{x[0]}\"\n         print_status \"\\tPlugin Installed Version: #{x[1]['version']['number']}\"\n         if x[1]['version']['number'] < x[1]['latest_version']\n             print_warning \"\\tThe version is out of date, the latest version is #{x[1]['latest_version']}\"\n         elsif x[1]['version']['number'] == x[1]['latest_version']\n             print_status \"\\tLatest Version: #{x[1]['version']['number']} (up to date)\"\n         else\n             print_status \"\\tPlugin Location: #{x[1]['location']}\"\n         end \n    else\n     print_good \"Plugin Found: #{x[0]}, Version: No version found\"\n end\n```", "```\n if x[1]['vulnerabilities'].count > 0\n     print_status \"#{x[1]['vulnerabilities'].count} vulnerabilities identified:\"\n x[1]['vulnerabilities'].each do |b|\n     print_error(\"\\tTitle: #{b['title']}\")\n     print_line(\"\\tFixed in: #{b['fixed_in']}\")\n     print_line(\"\\tReferences:\")\n     b['references'].each do |ref2|\n     if ref2[0].include?'cve'\n         print_line(\"\\t\\t- https://cve.mitre.org/cgi-bin/cvename.cgi?name=#{ref2[1][0]}\")\n     elsif ref2[0].include?'url'\n         ref2[1].each do |f|\n         print_line(\"\\t\\t- #{f}\")\n     end\n elsif ref2[0].include?'exploitdb'\n     print_line(\"\\t\\t- https://www.exploit-db.com/exploits/#{ref2[1][0]}/\")\n elsif ref2[0].include?'wpvulndb'\n     print_line(\"\\t\\t- https://wpvulndb.com/vulnerabilities/#{ref2[1][0]}\")\n end\n end\n print_line(\"\\n\")\n end\n\n end\n end\n else\n     print_error \"No plugin found\\n\"\n end\n```", "```\nFile.delete(\"/tmp/#{tmp_file_name}\") if File.exist?(\"/tmp/#{tmp_file_name}\")\n end\nend\n```", "```\nrequire 'open3'\nrequire 'fileutils'\nrequire 'json'\nrequire 'pp'\nclass MetasploitModule < Msf::Auxiliary\n include Msf::Auxiliary::Report\n\n def initialize\n super(\n 'Name' => 'Metasploit WordPress Scanner (WPscan)',\n 'Description' => 'Runs wpscan via Metasploit',\n 'Author' => [ 'Harpreet Singh', 'Himanshu Sharma' ]\n )\n\n register_options(\n [\n     OptString.new('TARGET_URL', [true, 'The target URL to be scanned using wpscan'])\n ]\n )\n end\n\n def target_url\n     datastore['TARGET_URL']\n end\n\n def find_wpscan_path\n     Rex::FileUtils.find_full_path(\"wpscan\")\n end\n\n def run\n     wpscan = find_wpscan_path\n     if wpscan.nil?\n         print_error(\"Please install wpscan gem via: gem install wpscan\")\n     end\n     tmp_file_name = Rex::Text.rand_text_alpha(10)\n     cmd = [ wpscan, \"--url\", target_url, \"-o\", \"#{tmp_file_name}\", \"-f\", \"json\", \"--force\" ]\n     ::IO.popen(cmd, \"rb\") do |fd|\n         print_status(\"Running WPscan on #{target_url}\")\n         print_line(\"\\t\\t\\t\\t(This may take some time)\\n\")\n         fd.each_line do |line|\n             print_status(\"Output: #{line.strip}\")\n         end\n end\n\n json = File.read(\"/tmp/#{tmp_file_name}\")\n obj = JSON.parse(json)\n i = 0\n print_line(\"\\n\")\n print_status(\"-------------------------------------\")\n print_status(\"Looking for some Interesting Findings\")\n print_status(\"-------------------------------------\")\n obj = obj.compact\n while (i <= obj['interesting_findings'].length) do\n     if obj['interesting_findings'][i]['type'] == 'headers' && !(obj['interesting_findings'][i].nil?)\n         obj['interesting_findings'][i]['interesting_entries'].each { |x| print_good(\"Found Some Interesting Enteries via Header detection: #{x}\")}\n         i += 1\n     elsif obj['interesting_findings'][i]['type'] == 'robots_txt' && (!obj['interesting_findings'][i].nil?)\n         obj['interesting_findings'][i]['interesting_entries'].each { |x| print_good(\"Found Some Interesting Enteries via robots.txt: #{x}\")}\n         i += 1\n     else\n         break\n     end\n end\n\n print_line(\"\\n\")\n print_status(\"--------------------------------------\")\n print_status(\"Looking for the WordPress version now\")\n print_status(\"--------------------------------------\")\n if !(obj['version'].nil?)\n     print_good(\"Found WordPress version: \" + obj['version']['number'] + \" via \" + obj['version']['found_by'])\n else\n     print_error(\"Version not found\")\n end\n print_status \"#{obj['version']['vulnerabilities'].count} vulnerabilities identified:\"\n obj['version']['vulnerabilities'].each do |x|\n print_error(\"\\tTitle: #{x['title']}\")\n print_line(\"\\tFixed in: #{x['fixed_in']}\")\n print_line(\"\\tReferences:\")\n x['references'].each do |ref|\n if ref[0].include?'cve'\n     print_line(\"\\t\\t- https://cve.mitre.org/cgi-bin/cvename.cgi?name=#{ref[1][0]}\")\n elsif ref[0].include?'url'\n     ref[1].each do |e|\n     print_line(\"\\t\\t- #{e}\")\n end\n elsif ref[0].include?'wpvulndb'\n     print_line(\"\\t\\t- https://wpvulndb.com/vulnerabilities/#{ref[1][0]}\")\n end\n end\n print_line(\"\\n\")\n end\n print_line(\"\\n\")\n\n print_status(\"------------------------------------------\")\n print_status(\"Checking for installed themes in WordPress\")\n print_status(\"------------------------------------------\")\n if !(obj['main_theme'].nil?)\n     print_good(\"Theme found: \" + \"\\\"\" + obj['main_theme']['slug'] + \"\\\"\" + \" via \" + obj['main_theme']['found_by'] + \" with version: \" + obj['main_theme']['version']['number'])\n else\n     print_error(\"Theme not found\")\n end\n print_line(\"\\n\")\n print_status(\"---------------------------------\")\n print_status(\"Enumerating installed plugins now\")\n print_status(\"---------------------------------\")\n if !(obj['plugins'].nil?)\n     obj['plugins'].each do |x|\n if !x[1]['version'].nil?\n     print_good \"Plugin Found: #{x[0]}\"\n     print_status \"\\tPlugin Installed Version: #{x[1]['version']['number']}\"\n     if x[1]['version']['number'] < x[1]['latest_version']\n         print_warning \"\\tThe version is out of date, the latest version is #{x[1]['latest_version']}\"\n     elsif x[1]['version']['number'] == x[1]['latest_version']\n         print_status \"\\tLatest Version: #{x[1]['version']['number']} (up to date)\"\n     else\n         print_status \"\\tPlugin Location: #{x[1]['location']}\"\n     end \n else\n     print_good \"Plugin Found: #{x[0]}, Version: No version found\"\n end\n if x[1]['vulnerabilities'].count > 0\n     print_status \"#{x[1]['vulnerabilities'].count} vulnerabilities identified:\"\n x[1]['vulnerabilities'].each do |b|\n     print_error(\"\\tTitle: #{b['title']}\")\n     print_line(\"\\tFixed in: #{b['fixed_in']}\")\n     print_line(\"\\tReferences:\")\n     b['references'].each do |ref2|\n     if ref2[0].include?'cve'\n         print_line(\"\\t\\t- https://cve.mitre.org/cgi-bin/cvename.cgi?name=#{ref2[1][0]}\")\n     elsif ref2[0].include?'url'\n         ref2[1].each do |f|\n             print_line(\"\\t\\t- #{f}\")\n         end\n     elsif ref2[0].include?'exploitdb'\n         print_line(\"\\t\\t- https://www.exploit-db.com/exploits/#{ref2[1][0]}/\")\n     elsif ref2[0].include?'wpvulndb'\n         print_line(\"\\t\\t- https://wpvulndb.com/vulnerabilities/#{ref2[1][0]}\")\n     end\n end\n\n print_line(\"\\n\")\n end\n end\n end\n else\n     print_error \"No plugin found\\n\"\n end\n File.delete(\"/tmp/#{tmp_file_name}\") if File.exist?(\"/tmp/#{tmp_file_name}\")\n end\nend\n```", "```\nuse exploit/unix/webapp/wp_admin_shell_upload\n```", "```\nauxiliary/admin/http/wp_google_maps_sqli\n```", "```\nuse exploit/multi/http/wp_crop_rce\n```"]