["```py\n    def double(a):\n        return 2 * a\n    ```", "```py\n    from __future__ import print_function\n    import numpy as np\n\n    def double(a):\n       return 2 * a\n\n    ufunc = np.frompyfunc(double, 1, 1)\n    print(\"Result\", ufunc(np.arange(4)))\n    ```", "```py\n    Result [0 2 4 6]\n\n    ```", "```py\n    m = np.arange(33)\n    n = np.arange(33)\n    ```", "```py\n    a = np.subtract.outer(m ** 2, n ** 2)\n    b = 2 * np.multiply.outer(m, n)\n    c = np.add.outer(m ** 2, n ** 2)\n    ```", "```py\n    idx =  np.where((a + b + c) == 1000)\n    ```", "```py\n    np.testing.assert_equal(a[idx]**2 + b[idx]**2, c[idx]**2)\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\n#A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n#a ** 2 + b ** 2 = c ** 2\n#\n#For example, 3 ** 2 + 4 ** 2 = 9 + 16 = 25 = 5 ** 2.\n#\n#There exists exactly one Pythagorean triplet for which a + b + c = 1000.\n#Find the product abc.\n\n#1\\. Create m and n arrays\nm = np.arange(33)\nn = np.arange(33)\n\n#2\\. Calculate a, b and c\na = np.subtract.outer(m ** 2, n ** 2)\nb = 2 * np.multiply.outer(m, n)\nc = np.add.outer(m ** 2, n ** 2)\n\n#3\\. Find the index\nidx =  np.where((a + b + c) == 1000)\n\n#4\\. Check solution\nnp.testing.assert_equal(a[idx]**2 + b[idx]**2, c[idx]**2)\nprint(a[idx], b[idx], c[idx])\n      # [375] [200] [425]\n```", "```py\n    carray = np.array(html).view(np.chararray)\n    ```", "```py\n    carray = carray.expandtabs(1)\n    ```", "```py\n    carray = carray.splitlines()\n    ```", "```py\n    import urllib2\n    import numpy as np\n    import re\n\n    response = urllib2.urlopen('http://python.org/')\n    html = response.read()\n    html = re.sub(r'<.*?>', '', html)\n    carray = np.array(html).view(np.chararray)\n    carray = carray.expandtabs(1)\n    carray = carray.splitlines()\n    print(carray)\n    ```", "```py\n    random_mask = np.random.randint(0, 2, size=lena.shape)\n    ```", "```py\n    masked_array = np.ma.array(lena, mask=random_mask)\n    ```", "```py\n    from __future__ import print_function\n    import numpy as np\n    from scipy.misc import lena\n    import matplotlib.pyplot as plt\n\n    lena = lena()\n    random_mask = np.random.randint(0, 2, size=lena.shape)\n\n    plt.subplot(221)\n    plt.title(\"Original\")\n    plt.imshow(lena)\n    plt.axis('off')\n\n    masked_array = np.ma.array(lena, mask=random_mask)\n    print(masked_array)\n    plt.subplot(222)\n    plt.title(\"Masked\")\n    plt.imshow(masked_array)\n    plt.axis('off')\n    plt.subplot(223)\n    plt.title(\"Log\")\n    plt.imshow(np.log(lena))\n    plt.axis('off')\n\n    plt.subplot(224)\n    plt.title(\"Log Masked\")\n    plt.imshow(np.log(masked_array))\n    plt.axis('off')\n\n    plt.show()\n    ```", "```py\n    triples = np.arange(0, len(close), 3)\n    print(\"Triples\", triples[:10], \"...\")\n    ```", "```py\n    signs = np.ones(len(close))\n    print(\"Signs\", signs[:10], \"...\")\n    ```", "```py\n    signs[triples] = -1\n    print(\"Signs\", signs[:10], \"...\")\n    ```", "```py\n    ma_log = np.ma.log(close * signs)\n    print(\"Masked logs\", ma_log[:10], \"...\")\n    ```", "```py\n    Triples [ 0  3  6  9 12 15 18 21 24 27] ...\n    Signs [ 1\\.  1\\.  1\\.  1\\.  1\\.  1\\.  1\\.  1\\.  1\\.  1.] ...\n    Signs [-1\\.  1\\.  1\\. -1\\.  1\\.  1\\. -1\\.  1\\.  1\\. -1.] ...\n    Masked logs [-- 5.93655586575 5.95094223368 -- 5.97468290742 5.97510711452 --\n     6.01674381162 5.97889061623 --] ...\n\n    ```", "```py\n    dev = close.std()\n    avg = close.mean()\n    inside = numpy.ma.masked_outside(close, avg - dev, avg + dev)\n    print(\"Inside\", inside[:10], \"...\")\n    ```", "```py\n    Inside [-- -- -- -- -- -- 409.429675172 410.240597855 -- --] ...\n\n    ```", "```py\n    from __future__ import print_function\n    import numpy as np\n    from matplotlib.finance import quotes_historical_yahoo\n    from datetime import date\n    import matplotlib.pyplot as plt\n    def get_close(ticker):\n       today = date.today()\n       start = (today.year - 1, today.month, today.day)\n\n       quotes = quotes_historical_yahoo(ticker, start, today)\n\n       return np.array([q[4] for q in quotes])\n\n    close = get_close('AAPL')\n\n    triples = np.arange(0, len(close), 3)\n    print(\"Triples\", triples[:10], \"...\")\n\n    signs = np.ones(len(close))\n    print(\"Signs\", signs[:10], \"...\")\n\n    signs[triples] = -1\n    print(\"Signs\", signs[:10], \"...\")\n\n    ma_log = np.ma.log(close * signs)\n    print(\"Masked logs\", ma_log[:10], \"...\")\n\n    dev = close.std()\n    avg = close.mean()\n    inside = np.ma.masked_outside(close, avg - dev, avg + dev)\n    print(\"Inside\", inside[:10], \"...\")\n\n    plt.subplot(311)\n    plt.title(\"Original\")\n    plt.plot(close)\n\n    plt.subplot(312)\n    plt.title(\"Log Masked\")\n    plt.plot(np.exp(ma_log))\n\n    plt.subplot(313)\n    plt.title(\"Not Extreme\")\n    plt.plot(inside)\n\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    weights = np.recarray((len(tickers),), dtype=[('symbol', np.str_, 16), \n        ('stdscore', float), ('mean', float), ('score', float)])\n    ```", "```py\n    for i, ticker in enumerate(tickers):\n       close = get_close(ticker)\n       logrets = np.diff(np.log(close))\n       weights[i]['symbol'] = ticker\n       weights[i]['mean'] = logrets.mean()\n       weights[i]['stdscore'] = 1/logrets.std()\n       weights[i]['score'] = 0\n    ```", "```py\n    for key in ['mean', 'stdscore']:\n        wsum = weights[key].sum()\n        weights[key] = weights[key]/wsum\n    ```", "```py\n    weights['score'] = (weights['stdscore'] + weights['mean'])/2\n    weights['score'].sort()\n    ```", "```py\n    from __future__ import print_function\n    import numpy as np\n    from matplotlib.finance import quotes_historical_yahoo\n    from datetime import date\n\n    tickers = ['MRK', 'T', 'VZ']\n\n    def get_close(ticker):\n       today = date.today()\n       start = (today.year - 1, today.month, today.day)\n\n       quotes = quotes_historical_yahoo(ticker, start, today)\n\n       return np.array([q[4] for q in quotes])\n\n    weights = np.recarray((len(tickers),), dtype=[('symbol', np.str_, 16), \n       ('stdscore', float), ('mean', float), ('score', float)])\n\n    for i, ticker in enumerate(tickers):\n       close = get_close(ticker)\n       logrets = np.diff(np.log(close))\n       weights[i]['symbol'] = ticker\n       weights[i]['mean'] = logrets.mean()\n       weights[i]['stdscore'] = 1/logrets.std()\n       weights[i]['score'] = 0\n\n    for key in ['mean', 'stdscore']:\n       wsum = weights[key].sum()\n       weights[key] = weights[key]/wsum\n\n    weights['score'] = (weights['stdscore'] + weights['mean'])/2\n    weights['score'].sort()\n\n    for record in weights:\n       print(\"%s,mean=%.4f,stdscore=%.4f,score=%.4f\" % (record['symbol'], record['mean'], record['stdscore'], record['score']))\n    ```", "```py\n    MRK,mean=0.8185,stdscore=0.2938,score=0.2177\n    T,mean=0.0927,stdscore=0.3427,score=0.2262\n    VZ,mean=0.0888,stdscore=0.3636,score=0.5561\n\n    ```"]