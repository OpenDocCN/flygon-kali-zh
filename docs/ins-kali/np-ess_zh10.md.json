["```py\nIn [1]: import pandas as pd \nIn [2]: py_list = [3, 8, 15, 25, 11] \nIn [3]: series = pd.Series(py_list) \nIn [4]: series \nOut[4]: \n0     3 \n1     8\n2    15\n3    25 \n4    11 \ndtype: int64 \n\n```", "```py\nIn [5]: indices = ['A', 'B', 'C', 'D', 'E'] \nIn [6]: series = pd.Series(py_list, index = indices) \nIn [7]: series \nOut[7]: \nA     3 \nB     8 \nC    15 \nD    25 \nE    11 \ndtype: int64 \n\n```", "```py\nIn [8]: data = {'Name': ['Brian', 'George', 'Kate', 'Amy', 'Joe'], \n   ...:         'Age': [23, 41, 26, 19, 35]} \nIn [9]: data_frame = pd.DataFrame(data) \nIn [10]: data_frame \nOut[10]: \n   Age    Name \n0   23   Brian \n1   41  George\n2   26    Kate \n3   19     Amy \n4   35     Joe \n\n```", "```py\nIn [11]: data_frame = pd.DataFrame(data) \nIn [12]: data_frame['Age'] \nOut[12]: \n0    23 \n1    41 \n2    26 \n3    19 \n4    35 \nName: Age, dtype: int64 \nIn [13]: data_frame.sort(columns = 'Age') \nOut[13]: \n   Age    Name \n3   19     Amy \n0   23   Brian \n2   26    Kate \n4   35     Joe \n41  George \nIn [14]: data_frame.describe() \nOut[14]: \n             Age \ncount   5.000000 \nmean   28.800000 \nstd     9.011104 \nmin    19.000000 \n25%    23.000000 \n50%    26.000000 \n75%    35.000000 \nmax    41.000000 \n\n```", "```py\nIn [15]: sales = pd.read_csv('sales.csv') \nIn [16]: sales.shape \nOut[16]: (348, 97) \nIn [17]: sales.columns[:3] \nOut[17]: Index([u'LA_Code', u'LA_Name', u'1995_COUNT_ALL_TYPES'], dtype='object') \nIn [18]: sales['1995_COUNT_ALL_TYPES'].head() \nOut[18]: \n0    1,188 \n1    1,652 \n2    1,684 \n3    2,314 \n4    1,558 \nName: 1995_COUNT_ALL_TYPES, dtype: object \n\n```", "```py\nIn [1]: from sklearn.datasets import load_diabetes \nIn [2]: diabetes = load_diabetes() \nIn [3]: diabetes.data \nOut[3]: \narray([[ 0.03807591,  0.05068012,  0.06169621, ..., -0.00259226, \n         0.01990842, -0.01764613], \n       [-0.00188202, -0.04464164, -0.05147406, ..., -0.03949338, \n        -0.06832974, -0.09220405], \n       [ 0.08529891,  0.05068012,  0.04445121, ..., -0.00259226, \n         0.00286377, -0.02593034], \n       ..., \n       [ 0.04170844,  0.05068012, -0.01590626, ..., -0.01107952, \n        -0.04687948,  0.01549073], \n       [-0.04547248, -0.04464164,  0.03906215, ...,  0.02655962, \n         0.04452837, -0.02593034], \n       [-0.04547248, -0.04464164, -0.0730303 , ..., -0.03949338, \n        -0.00421986,  0.00306441]]) \nIn [4]: diabetes.data.shape \nOut[4]: (442, 10) \n\n```", "```py\nIn [5]: from sklearn.cross_validation import train_test_split \nIn [6]: X_train, X_test, y_train, y_test  = \n        train_test_split(diabetes.data, \ndiabetes.target, \nrandom_state = 50) \n\n```", "```py\nIn [7]: from sklearn.linear_model import LinearRegression \nIn [8]: lr = LinearRegression() \nIn [9]: lr.fit(X_train, y_train) \nOut[9]: LinearRegression(copy_X = True, fit_intercept = True, \n     Normalize = False) \nIn [10]: lr.coef_ \nOut[10]: \narray([  80.73490856, -195.84197988,  474.68083473,  371.06688824, \n       -952.26675602,  611.63783483,  174.40777144,  159.78382579, \n        832.01569658,   12.04749505]) \n\n```", "```py\nIn [11]: lr.predict(X_test)[:10] \nOut[11]: \narray([  71.96974998,   82.55916305,  265.71560021,   79.37396336, \n         72.48674613,   47.01580194,  149.11263906,  185.36563936, \n         94.88688296,  132.08984366]) \n\n```", "```py\nIn [12]: lr.score(X_test, y_test) \nOut[12]: 0.48699089712593369 \n\n```", "```py\nIn [1]: import netCDF4 as nc \nIn [2]: dataset = nc.Dataset('sresa1b_ncar_ccsm3-example.nc', 'r') \nIn [3]: variables = [var for var in dataset.variables] \nIn [4]: variables \nOut[4]: \n['area', 'lat', 'lat_bnds', 'lon', 'lon_bnds', 'msk_rgn', 'plev', \n'pr', 'tas', 'time', 'time_bnds', 'ua'] \n\n```", "```py\nIn [5]: precipitation = dataset.variables['pr'] \nIn [6]: precipitation.standard_name \nOut[6]: 'precipitation_flux' \nIn [7]: precipitation.missing_value \nOut[7]: 1e+20 \nIn [8]: precipitation.ndim \nOut[8]: 3 \nIn [9]: precipitation.shape \nOut[9]: (1, 128, 256) \nIn [10]: precipitation[:, 1, :10] \nOut[10]: \narray([[  8.50919207e-07,   8.01471970e-07,   7.74396426e-07, \n          7.74230614e-07,   7.47181844e-07,   7.21426375e-07, \n          7.19294349e-07,   6.99790974e-07,   6.83397502e-07, \n          6.74683179e-07]], dtype=float32) \n\n```", "```py\nIn [11]: import numpy as np \nIn [12]: time = np.arange(10) \nIn [13]: lat = 54 + np.random.randn(8) \nIn [14]: lon = np.random.randn(6) \nIn [15]: data = np.random.randn(480).reshape(10, 8, 6) \n\n```", "```py\nIn [16]: output = nc.Dataset('test_output.nc', 'w') \nIn [17]: output.createDimension('time', 10) \nIn [18]: output.createDimension('lat', 8) \nIn [19]: output.createDimension('lon', 6) \nIn [20]: time_var = output.createVariable('time', 'f4', ('time',)) \nIn [21]: time_var[:] = time \nIn [22]: lat_var = output.createVariable('lat', 'f4', ('lat',)) \nIn [23]: lat_var[:] = lat \nIn [24]: lon_var = output.createVariable('lon', 'f4', ('lon',)) \nIn [25]: lon_var[:] = lon \n\n```", "```py\nIn [26]: var = output.createVariable('test', 'f8', ('time', 'lat', 'lon')) \nIn [27]: var[:] = data \n\n```", "```py\nIn [28]: time_var.standard_name = 'Time' \nIn [29]: time_var.units = 'days since 2015-01-01 00:00:00' \nIn [30]: time_var.calendar = 'gregorian' \n\n```", "```py\nIn [31]: output.close() \n\n```", "```py\nIn [1]: from scipy.misc import imread, imsave, ascent \nIn [2]: import matplotlib.pyplot as plt \nIn [3]: image_data = ascent() \n\n```", "```py\nIn [4]: import numpy as np \nIn [5]:noise_img = image_data +  image_data.std() * np.random.random(image_data.shape) \nIn [6]: imsave('noise_img.png', noise_img) \nIn [7]: plt.imshow(noise_img) \nOut[7]: <matplotlib.image.AxesImage at 0x20066572898> \nIn [8]: plt.show() \n\n```", "```py\nIn [9]: from scipy import ndimage \nIn [10]: gaussian_denoised = ndimage.gaussian_filter(noise_img, 3) \nIn [11]: imsave('gaussian_denoised.png', gaussian_denoised ) \nIn [12]: plt.imshow(gaussian_denoised) \nOut[12]: <matplotlib.image.AxesImage at 0x2006ba54860> \nIn [13]: plt.show() \nIn [14]: uniform_denoised = ndimage.uniform_filter(noise_img) \nIn [15]: imsave('uniform_denoised.png', uniform_denoised) \nIn [16]: plt.imshow(gaussian_denoised) \nOut[17]: <matplotlib.image.AxesImage at 0x2006ba80320> \nIn [18]: plt.show() \n\n```"]