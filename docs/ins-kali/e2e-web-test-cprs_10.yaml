- en: '*Chapter 8*: Understanding Variables and Aliases in Cypress'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：理解Cypress中的变量和别名'
- en: Before we get started on how variables and aliases work in Cypress, it is important
    to understand what we covered in the previous chapters on how to write tests in
    Cypress, how to configure tests, and even how to use Cypress to write applications
    in the proper way by following a test-driven development approach. The background
    information provided in the previous chapters of this book will give you a good
    grounding as we dive into how variables and aliases work. By exploring what variables
    and aliases are, we will understand how we can create references in Cypress, which
    will ease our test writing process and the complexity of our tests. Understanding
    how to use variables and aliases will not only make you write better tests but
    also write tests that are easy to read and maintain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论Cypress中变量和别名的工作原理之前，重要的是要了解我们在前几章中涵盖了什么，如何在Cypress中编写测试，如何配置测试，甚至如何使用Cypress按照测试驱动开发的方式编写应用程序。本书前几章提供的背景信息将为我们提供一个良好的基础，让我们深入了解变量和别名的工作原理。通过探索变量和别名，我们将了解如何在Cypress中创建引用，这将简化我们的测试编写过程和测试的复杂性。了解如何使用变量和别名不仅可以让您编写更好的测试，还可以编写易于阅读和维护的测试。
- en: In this chapter, we will focus on writing asynchronous commands to make use
    of the variables and aliases that Cypress comes bundled with. We will also understand
    how we can simplify our tests by using aliases and how we can utilize the aliases
    and the variables we create in different areas of our tests such as references
    to elements, routes, and requests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于编写异步命令，以利用Cypress捆绑的变量和别名。我们还将了解如何通过使用别名简化我们的测试，以及如何在测试的不同区域利用我们创建的别名和变量，例如元素的引用、路由和请求。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下关键主题：
- en: Understanding Cypress variables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Cypress变量
- en: Understanding Cypress aliases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Cypress别名
- en: Once you've worked through each of these topics, you will have a full understanding
    of how to utilize aliases and variables in your Cypress tests.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您了解了这些主题，您将完全了解如何在Cypress测试中使用别名和变量。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, we recommend that you clone the repository containing the source
    code and all the tests that we will write in this chapter from GitHub.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请克隆包含本章中将编写的所有源代码和测试的存储库从GitHub中获取。
- en: The GitHub repository for this chapter can be found at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub存储库可以在[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)找到。
- en: The source code for this chapter can be found in the `chapter-08` directory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在`chapter-08`目录中找到。
- en: Understanding Cypress variables
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Cypress变量
- en: This section will focus on what variables are in Cypress, how they are used
    in tests, and their roles in tests, especially in the reduction of test complexity.
    We will also explore different areas where we can use Cypress variables to add
    readability to our tests. By the end of this section, you will be able to write
    tests using variables and also understand where variables should be used when
    writing your tests.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将重点介绍Cypress中的变量是什么，它们在测试中如何使用以及它们在测试中的作用，特别是在减少测试复杂性方面。我们还将探讨可以在哪些不同区域使用Cypress变量来增加测试的可读性。通过本节的学习，您将能够使用变量编写测试，并了解在编写测试时应该在哪里使用变量。
- en: 'To better understand how variables in Cypress work, it is important to understand
    how Cypress executes its commands. The following code block is a test that first
    selects a button and then selects an input element, then later clicks the button:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Cypress中变量的工作原理，重要的是要了解Cypress如何执行其命令。以下代码块是一个测试，首先选择一个按钮，然后选择一个输入元素，然后点击按钮：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code block illustrates a test that should first identify a button,
    then next identify a username input, and finally, click the button. However, the
    test and execution will not happen in the way that we would normally assume. In
    our assumptions, we might think that the first command will execute and return
    the results before the second command runs, then the third command will be the
    last to execute. Cypress utilizes JavaScript **asynchronous APIs**, which control
    how commands are executed in Cypress tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块说明了一个测试，应该首先识别一个按钮，然后识别一个用户名输入，最后点击按钮。然而，测试和执行不会按照我们通常的假设方式进行。在我们的假设中，我们可能会认为第一个命令将在第二个命令运行之前执行并返回结果，然后第三个命令将是最后执行的。Cypress利用JavaScript的**异步API**来控制Cypress测试中命令的执行方式。
- en: Important note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The asynchronous APIs are implemented such that they provide the responses of
    commands or requests as they are received, and do not necessarily wait for one
    particular request to get a response before handling other requests. The APIs
    instead return the first response that was received and continue the execution
    of the responses that have not yet been received. The non-blocking mechanism of
    making requests and receiving responses ensures that different requests can be
    made at the same time, therefore making our application appear multi-threaded,
    while in reality, it is single-threaded in nature.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 异步API被实现为它们在收到命令或请求时提供响应，并不一定等待某个特定请求获得响应后再处理其他请求。相反，API会返回收到的第一个响应，并继续执行尚未收到响应的响应。请求和接收响应的非阻塞机制确保可以同时进行不同的请求，因此使我们的应用程序看起来是多线程的，而实际上，它的本质是单线程的。
- en: In the preceding code block, Cypress executes the commands in an asynchronous
    order where the responses are not necessarily returned in the order in which the
    requests are made in our test. We can, however, force Cypress to execute our tests
    as we desire, and we will cover this in the next section as we explore **closures**
    in Cypress.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，Cypress以异步顺序执行命令，响应不一定按照测试中发出请求的顺序返回。然而，我们可以强制Cypress按照我们的期望执行测试，我们将在下一节中介绍闭包时进行讨论。
- en: Closures
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 闭包
- en: 'Closures are created when Cypress bundles together test functions and references
    to the surrounding state of the functions. Closures are a JavaScript concept from
    which Cypress borrows heavily. A test closure in Cypress would therefore have
    access to the external scope of our test and also have access to its internal
    scope, which will be created by the test function. We refer to the local functional
    scope of the test as the **lexical environment**, as is the case in JavaScript
    functions. In the following code block, we can see what closures are in Cypress
    and how variables are utilized in the closure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当Cypress捆绑测试函数和对函数周围状态的引用时，就会创建闭包。闭包是Cypress大量借鉴的JavaScript概念。因此，Cypress中的测试闭包将能够访问测试的外部范围，并且还将能够访问由测试函数创建的内部范围。我们将测试的局部功能范围称为**词法环境**，就像JavaScript函数中的情况一样。在下面的代码块中，我们可以看到Cypress中的闭包是什么，以及变量在闭包中如何被利用：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `$submitBtn` variable is created to access the response gotten from the
    `cy.get('#submit-button')` command. Using the variable that we just created in
    the test, we can access the value that was returned and interact with it, just
    like in a normal function. In this test, we have created a test closure function
    using the `$submitBtn` variable. The `.then()` function creates a **callback function**
    that enables us to nest other commands within the code block. The advantage of
    closures is that we can control how our tests execute commands. In our test, we
    can wait until all nested commands inside the `.then()` method execute before
    running any other commands in our test. The execution behavior is further described
    by our comments in the test code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`$submitBtn`变量用于访问从`cy.get(''#submit-button'')`命令获取的响应。使用我们在测试中刚刚创建的变量，我们可以访问返回的值并与之交互，就像在普通函数中一样。在这个测试中，我们使用了`$submitBtn`变量创建了一个测试闭包函数。`.then()`函数创建了一个**回调函数**，使我们能够在代码块中嵌套其他命令。闭包的优势在于我们可以控制测试执行命令的方式。在我们的测试中，我们可以等待`.then()`方法内部的所有嵌套命令执行完毕，然后再运行测试中的其他命令。测试代码中的注释进一步描述了执行行为。'
- en: Important note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Callback functions are functions passed inside other functions as arguments
    and are then invoked inside the outer function to complete an action. When commands
    inside our `.then()` function complete running, other commands outside the function
    will proceed with their execution routine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数是作为参数传递到其他函数中的函数，并在外部函数中被调用以完成一个动作。当我们的`.then()`函数内部的命令完成运行时，函数外部的其他命令将继续执行它们的执行例程。
- en: 'In the following code block, we will explore how to write a test by using variables
    and ensuring that the code within the closure is executed first before any other
    code outside and after the closure begins execution. The test will add two to-do
    items, but before the addition of the second to-do item, we will use a closure
    to verify that the code within the closure was executed first:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码块中，我们将探讨如何使用变量编写测试，并确保在闭包内部的代码执行之前，任何其他代码在闭包之外和闭包开始执行之后都不会执行。该测试将添加两个待办事项，但在添加第二个待办事项之前，我们将使用闭包来验证闭包内部的代码是否首先执行：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code block, we have added a to-do item to our to-do list,
    but before we add our second item, we validate that the added to-do item is indeed
    what we created. To achieve this, we use a closure and a callback function that
    needs to return `true` before our execution of the next command can proceed. The
    following screenshot shows the execution steps of our running test:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们已经向待办事项列表中添加了一个待办事项，但在添加第二个项目之前，我们验证添加的待办事项确实是我们创建的。为了实现这一点，我们使用了闭包和一个需要在执行下一个命令之前返回`true`的回调函数。以下截图显示了我们运行测试的执行步骤：
- en: '![Figure 8.1 – Closures in Cypress'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 - Cypress中的闭包'
- en: '](image/Figure_8.1_B15616.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.1_B15616.jpg)'
- en: Figure 8.1 – Closures in Cypress
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 - Cypress中的闭包
- en: In *Figure 8.1*, we can see that Cypress executed the command to get the added
    to-do item and asserted that the added to-do item was what we had in our list
    before executing the last command to add a new to-do item to our to-do list.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图8.1*中，我们可以看到Cypress执行了获取添加的待办事项的命令，并断言添加的待办事项是我们在列表中拥有的，然后执行最后一个命令将新的待办事项添加到我们的待办事项列表中。
- en: Closures in Cypress cannot exist outside variables. To use closures, we need
    to utilize variables to pass the value received from our commands to the closure
    function, and utilizing variables is the only way to do this. In this code block,
    we have used a `$todoItem` variable to pass the value of the `cy.get()` command
    to the closure that asserts that the found to-do item is the exact item that we
    created.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress中的闭包不能存在于变量之外。要使用闭包，我们需要利用变量将从我们的命令中接收的值传递给闭包函数，而利用变量是唯一的方法。在这个代码块中，我们使用了`$todoItem`变量将`cy.get()`命令的值传递给了断言找到的待办事项是我们创建的确切项目的闭包。
- en: Cypress utilizes variable scopes just as in JavaScript. In Cypress, users have
    the option of using `const`, `var`, and `let` identifiers to specify the scope
    of the variable declaration. In the following sections, we will see different
    scopes that can be utilized in a test.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress像JavaScript一样利用变量作用域。在Cypress中，用户可以使用`const`、`var`和`let`标识符来指定变量声明的范围。在接下来的部分中，我们将看到可以在测试中使用的不同范围。
- en: Var
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Var
- en: 'The `var` keyword is used to declare a function or a globally scoped variable.
    It is optional to provide the value to the variable for the purposes of initialization.
    A variable declared with the `var` keyword is executed before any other code is
    executed when it is encountered in a test function. It is possible to declare
    a variable in the global scope with the `var` keyword and overwrite it in the
    functional scope within our test function. The following code block shows a simple
    override of the globally scoped variable declared with the `var` keyword:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`var`关键字用于声明函数或全局作用域变量。为了初始化目的，为变量提供值是可选的。使用`var`关键字声明的变量在遇到测试函数时会在任何其他代码执行之前执行。可以使用`var`关键字在全局范围内声明变量，并在测试函数内的功能范围内覆盖它。以下代码块显示了使用`var`关键字声明的全局作用域变量的简单覆盖：'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this code block, we declared an `a` variable in the global context of our
    tests, then later changed the global variable in our test. The newly changed variable
    will become the new value of our global `a` variable unless it is explicitly changed,
    as we did in the test. The `var` keyword therefore changes the global context
    of the variable, as it globally reassigns the value of the global variable.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们在测试的全局上下文中声明了一个`a`变量，然后在测试中改变了全局变量。新更改的变量将成为我们的全局`a`变量的新值，除非它被明确更改，就像我们在测试中所做的那样。因此，`var`关键字改变了变量的全局上下文，因为它在全局重新分配了全局变量的值。
- en: Let
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Let
- en: 'The `let` variable declaration works in the same way that `var` declared variables
    work, with the exception that variables defined can only be available inside the
    scope in which they are declared. Yes, I know that sounds confusing! In the following
    code block, the two tests show a difference of scope declaration while using the
    `let` keyword:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`变量声明的工作方式与使用`var`声明的变量相同，唯一的区别是定义的变量只能在声明它们的范围内使用。是的，我知道这听起来很混乱！在下面的代码块中，两个测试展示了在使用`let`关键字时的范围声明的差异：'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this second test, we have a test failure as the `let` keyword will only
    make the changed `a` variable available to the specific test that changed it,
    and not to the entire global scope of our test suite, as is the case with the
    `var` variable declaration. In the following screenshot, we can see that the test
    fails as it only picks the variable declared in the `describe` block and not the
    one in the previous tests:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第二个测试中，由于`let`关键字只会使更改后的`a`变量对更改它的特定测试可用，而不会对整个测试套件的全局范围可用，因此我们有一个测试失败，就像使用`var`变量声明一样。在下面的截图中，我们可以看到测试失败，因为它只选择了在`describe`块中声明的变量，而没有选择前面测试中的变量：
- en: '![Figure 8.2 – The let keyword'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 – let关键字'
- en: '](image/Figure_8.2_B15616.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.2_B15616.jpg)'
- en: Figure 8.2 – The let keyword
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – let关键字
- en: As shown in *Figure 8.2*, while writing tests, it is possible to make declarations
    of the same variable in different tests without affecting the scope of the declared
    variables, as each one will belong and have its own context and not affect the
    global context.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图8.2*所示，在编写测试时，可以在不影响声明变量的范围的情况下在不同的测试中对同一变量进行声明，因为每个变量都将属于并拥有自己的上下文，不会影响全局上下文。
- en: Const
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Const
- en: 'The `const` keyword is used to declare objects and variables that are read-only
    and cannot be altered or reassigned once they have been declared. Variables assigned
    with the `const` keyword are "final" and can only be used in the state that they
    are in without their values being mutated or changed. In the following code block,
    we are trying to reassign a variable declared with the `const` keyword, which
    will then result in a failure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`关键字用于声明只读的对象和变量，一旦声明后就不能被改变或重新赋值。使用`const`关键字分配的变量是“最终的”，只能在其当前状态下使用，其值不能被改变或改变。在下面的代码块中，我们试图重新分配使用`const`关键字声明的变量，这将导致失败：'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From this code block, given that the `a` variable is declared with `const`,
    it is immutable and therefore Cypress will fail with an error, as shown in the
    following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中，考虑到`a`变量是用`const`声明的，它是不可变的，因此Cypress会因为错误而失败，如下面的截图所示：
- en: '![Figure 8.3 – The const keyword'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3 – const关键字'
- en: '](image/Figure_8.3_B15616.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.3_B15616.jpg)'
- en: Figure 8.3 – The const keyword
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – const关键字
- en: Just like in JavaScript, Cypress cannot reassign a variable that has been declared
    with a `const` keyword. Variables declared using `const` are those that do not
    need to be changed during the execution of a program, neither globally or locally
    within the test.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在JavaScript中一样，Cypress不能重新分配使用`const`关键字声明的变量。使用`const`声明的变量是在程序执行期间不需要在全局或局部范围内改变的变量。
- en: Recap – Understanding Cypress variables
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 – 理解Cypress变量
- en: In this section, we learned about the utilization of variables in Cypress. We
    took a look at how variables are used in closures and also how they are declared
    with different scopes and contexts. Here, we also got to understand what variable
    scopes mean and how they can be used within tests. Now that we know what variables
    are and what they represent, we will dive into the use of aliases in Cypress tests
    in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了Cypress中变量的利用。我们看了一下变量在闭包中的使用方式，以及它们如何在不同的范围和上下文中声明。在这里，我们还了解了变量范围的含义以及它们在测试中的使用方式。现在我们知道了变量是什么以及它们代表什么，我们将在下一节中深入了解Cypress测试中别名的使用。
- en: Understanding Cypress aliases
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Cypress别名
- en: Aliases are a way to prevent the usage of `.then()` callback functions in our
    tests. We use aliases to create references or some kind of "memory" that Cypress
    can refer to, hence reducing the need for us to re-declare the items all over
    again. A common use of aliases is to avoid using callback functions in our `before`
    and `beforeEach` test hooks. Aliases provide a "clean" way to access the global
    state of a variable without the need for calling or initializing the variable
    in every single test. In this section, we will learn how to properly utilize aliases
    in our test execution and different scenarios where using aliases is recommended.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 别名是一种避免在我们的测试中使用`.then()`回调函数的方法。我们使用别名来创建引用或某种“内存”，Cypress可以引用，从而减少我们需要重新声明项目的需求。别名的常见用途是避免在我们的`before`和`beforeEach`测试钩子中使用回调函数。别名提供了一种“清晰”的方式来访问变量的全局状态，而无需在每个单独的测试中调用或初始化变量。在本节中，我们将学习如何正确地在我们的测试执行中利用别名，并介绍使用别名的不同场景。
- en: 'Aliases come in handy in situations where one variable is utilized by more
    than one test in a test suite. The following code block shows a test where we
    want to verify that our to-do item does exist after we have added it to our to-do
    list:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，别名非常方便，其中一个变量被测试套件中的多个测试所使用。以下代码块显示了一个测试，我们希望验证在将待办事项添加到待办事项列表后，我们的待办事项确实存在：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To externally use a variable declared in the `beforeEach` or `before` hooks,
    we used a callback function in the code block to access the variable, and later
    assert that the text of the variable created by our `beforeEach` method is the
    same to-do item that we are expecting.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`beforeEach`或`before`钩子中外部使用声明的变量，我们在代码块中使用回调函数来访问变量，然后断言由我们的`beforeEach`方法创建的变量的文本与我们期望的待办事项相同。
- en: Important note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The structure of the code is intended for demonstration purposes only and is
    not recommended for use when writing your tests.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 代码结构仅用于演示目的，不建议在编写测试时使用。
- en: 'While the preceding test will definitely pass, it is an anti-pattern that Cypress
    aliases exist to solve. Aliases in Cypress exist to serve the following purpose
    in Cypress tests:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的测试肯定会通过，但这是Cypress别名存在的反模式。Cypress别名存在的目的是为了在Cypress测试中提供以下目的：
- en: Sharing object contexts between hooks and tests
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在钩子和测试之间共享对象上下文
- en: Accessing element references in the DOM
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问DOM中的元素引用
- en: Accessing route references
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问路由引用
- en: Accessing request references
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问请求引用
- en: We will look into each of the uses of aliases and look at examples of how they
    can be used in the uses covered.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究别名的每个用途，并看看它们在覆盖的用途中如何使用的示例。
- en: Sharing contexts between test hooks and tests
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在测试钩子和测试之间共享上下文
- en: 'Aliases can provide a "clean" way of defining variables and make them accessible
    to the tests without using callback functions in our test hooks, as was shown
    in the previous code block. To create an alias, we simply add the `.as()` command
    to what we are sharing, and the shared elements can then be accessed from Mocha''s
    context object using the `this.*` command. The contexts for each test are cleared
    after the test runs and so are the properties that our tests create in the different
    test hooks. The following code block shows the same test as the previous one to
    check whether a to-do item exists, but this time utilizing aliases:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 别名可以提供一种“清晰”的方式来定义变量，并使它们在测试中可访问，而无需在测试钩子中使用回调函数，就像在前一个代码块中所示的那样。要创建别名，我们只需将`.as()`命令添加到我们要共享的内容，然后可以使用`this.*`命令从Mocha的上下文对象中访问共享的元素。每个测试的上下文在测试运行后都会被清除，因此我们的测试在不同的测试钩子中创建的属性也会被清除。以下代码块显示了与前一个相同的测试，以检查待办事项是否存在，但这次利用了别名：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code block, we can verify that Mocha has `this.todoItem` in
    its context and runs successfully, validating that the to-do item was indeed created.
    A further verification of the test can be done as shown in the following screenshot,
    which highlights the passing state of the Cypress test after the use of aliasing
    to reference the created to-do item in our to-do list:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块中，我们可以验证Mocha在其上下文中具有`this.todoItem`并成功运行，从而验证确实创建了待办事项。测试的进一步验证可以如下截图所示，突出显示了在使用别名引用我们待办事项列表中创建的待办事项后，Cypress测试的通过状态：
- en: '![Figure 8.4 – Context sharing'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 – 上下文共享'
- en: '](image/Figure_8.4_B15616.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.4_B15616.jpg)'
- en: Figure 8.4 – Context sharing
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 上下文共享
- en: In *Figure 8.4*, we see that Cypress highlights the aliased text and shows how
    it is invoked in our test. Cypress prints out the aliased elements and commands
    that have been used, making it easy to identify and debug in the event of a failure
    and to trace what caused that failure in the aliased elements.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图8.4*中，我们看到Cypress突出显示了别名文本，并显示了它在我们的测试中是如何被调用的。Cypress打印出了已使用的别名元素和命令，这样在失败时很容易识别和调试，并跟踪导致别名元素失败的原因。
- en: Important note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is not possible to use `this.*` with arrow functions in your Cypress tests
    as `this.*` will refer to the **lexical context** of the arrow function, and not
    that of Mocha's context. For any use of the `this` keyword, you will need to switch
    your Cypress tests to use regular `function () {}` syntax instead of `() => {}`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Cypress测试中，无法使用箭头函数与`this.*`，因为`this.*`将指向箭头函数的**词法上下文**，而不是Mocha的上下文。对于任何使用`this`关键字的地方，您需要将Cypress测试切换为使用常规的`function
    () {}`语法，而不是`() => {}`。
- en: Another great use of aliasing for sharing contexts is with Cypress fixtures.
    Fixtures are a feature that Cypress uses to provide mock data to be used in the
    tests. Fixtures are created in files and can be accessible in tests.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 别名在共享上下文方面的另一个很好的用途是与Cypress fixtures一起使用。Fixtures是Cypress用于提供用于测试的模拟数据的功能。Fixtures在文件中创建，并可以在测试中访问。
- en: Important note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Fixtures provide test data, and we utilize fixtures to provide data that is
    consistent with either the input that the application would expect or the output
    that it would generate when an operation is carried out. Fixtures are an easy
    way for us to provide data inputs to our tests without going through the hurdles
    of hardcoding the data in our tests or auto generating the data when our tests
    are running. With fixtures, we can also utilize the same set of test data for
    different tests.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 固定提供测试数据，我们利用固定提供与应用程序期望的输入或在执行操作时生成的输出一致的数据。固定是我们为测试提供数据输入的简单方法，而无需在测试中硬编码数据或在测试运行时自动生成数据。使用固定，我们还可以为不同的测试利用相同的测试数据集。
- en: 'Assuming that we had a `todos fixture` that contained a list of all our created
    to-do items, we could have a test that is similar to the following code block:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个包含所有已创建待办事项列表的 `todos fixture`，我们可以编写类似以下代码块的测试：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code block, we have aliased both the created to-do item and
    also the `todos.json` fixture file containing the created to-do items. We can
    utilize the to-do items' fixtures throughout all our tests, as we loaded the fixtures
    in the `beforeEach` hook of our tests. In this test, we accessed our first fixture
    value using `this.todo[0]`, which is the first object in our array of to-do items.
    To further understand how to work with fixtures and the exact files we are working
    with, take a look at the GitHub repository that we cloned at the beginning of
    this chapter, under `cypress/fixtures directory`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们为创建的待办事项和包含已创建待办事项的 `todos.json` 固定文件都创建了别名。我们可以在所有测试中利用待办事项的固定，因为我们在测试的
    `beforeEach` 钩子中加载了固定。在这个测试中，我们使用 `this.todo[0]` 来访问我们的第一个固定值，它是我们待办事项数组中的第一个对象。要进一步了解如何使用固定和我们正在使用的确切文件，请查看我们在本章开头克隆的GitHub存储库，位于
    `cypress/fixtures` 目录下。
- en: Important note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Cypress still works using asynchronous commands, and trying to access the `this.todos`
    outside the `beforeEach` hook will lead to a test failure as the test first needs
    to load the fixtures before it can utilize them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress仍然使用异步命令工作，尝试在 `beforeEach` 钩子之外访问 `this.todos` 将导致测试失败，因为测试首先需要加载固定才能使用它们。
- en: 'While sharing context, Cypress commands can also make use of a special `''@''`
    command, which eliminates the use of `this.*` when referring to the context of
    the declared aliases. The following code block shows the usage of `''@''` syntax
    when referring to Cypress aliases:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在共享上下文时，Cypress命令还可以使用特殊的 `'@'` 命令，这消除了在引用已声明别名的上下文时使用 `this.*` 的需要。以下代码块显示了在引用Cypress别名时使用
    `'@'` 语法的用法：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code block, we used the `cy.get()` command to eliminate the
    `this.*` syntax when accessing our fixture file, along with the need to use the
    old-style function declaration method. When we use `this.todos`, we are accessing
    the `todos` object synchronously, whereas when we introduce `cy.get('@todos')`,
    we are asynchronously accessing the `todos` object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们使用了 `cy.get()` 命令来消除在访问我们的固定文件时使用 `this.*` 语法，以及使用旧式函数声明方法的需要。当我们使用
    `this.todos` 时，我们是同步访问 `todos` 对象，而当我们引入 `cy.get('@todos')` 时，我们是异步访问 `todos`
    对象。
- en: As mentioned earlier, when Cypress runs code synchronously, the commands are
    executed in the order in which they are called. On the other hand, when we run
    Cypress tests asynchronously, the responses from the executed commands are not
    returned in the order in which the commands were called, since the execution of
    the commands doesn't happen in the order in which they are called. In our case,
    `this.todo` will execute as a synchronous command, which will return `todo` object
    results in the order of execution, while `cy.get('@todos')` will behave like an
    asynchronous command and will return the `todo` object responses when they become
    available.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当Cypress以同步方式运行代码时，命令按照调用顺序执行。另一方面，当我们以异步方式运行Cypress测试时，由于命令的执行不是按照调用顺序进行的，所以执行的命令的响应也不会按照调用顺序返回。在我们的情况下，`this.todo`将作为同步命令执行，它将按照执行顺序返回
    `todo` 对象结果，而 `cy.get('@todos')` 将像异步命令一样行为，并在可用时返回 `todo` 对象响应。
- en: Accessing element references
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问元素引用
- en: 'Aliases can also be used to access DOM elements for reuse. Making references
    to elements ensures that we do not need to redeclare DOM elements once they have
    been referenced by an alias. In the following code block, we will create an alias
    for the input element for adding a new to-do item, and later reference it when
    creating our to-do items:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 别名还可以用于访问DOM元素以便重用。引用元素可以确保我们在引用别名后不需要重新声明DOM元素。在下面的代码块中，我们将为添加新待办事项的输入元素创建一个别名，并在创建待办事项时稍后引用它：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This test shows the use of aliases to access elements in the DOM that have been
    stored as references. In the test, Cypress looks for our saved `'todoInput'` reference
    and uses it instead of running another query to find our input item.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试展示了使用别名来访问已存储为引用的DOM元素。在测试中，Cypress查找我们保存的 `'todoInput'` 引用并使用它，而不是运行另一个查询来查找我们的输入项。
- en: Accessing route references
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问路由引用
- en: 'We can use aliases to reference routes for an application under test. Routes
    manage the behavior of network requests, and by using aliases, we can ensure that
    proper requests are made, server requests are sent, and proper XHR object assertions
    are created when we make our requests. The following code block shows the usage
    of aliases when working with routes:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用别名来引用测试应用程序的路由。路由管理网络请求的行为，通过使用别名，我们可以确保在进行请求时进行正确的请求，发送服务器请求，并在进行请求时创建正确的XHR对象断言。以下代码块显示了在处理路由时使用别名的用法：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this code block, we have referenced our `todoItem` request as an alias. The
    route request will then check whether the form that we submitted has been submitted
    successfully and returns a response. When using aliases in routes, we do not have
    to keep referencing or calling the route, as Cypress will already have a stored
    response of the route from the alias that we created earlier.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，我们将我们的`todoItem`请求引用为别名。路由请求将检查我们提交的表单是否已成功提交并返回响应。在路由中使用别名时，我们不必保持引用或调用路由，因为Cypress已经从我们之前创建的别名中存储了路由的响应。
- en: Accessing request references
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问请求引用
- en: 'Just like when ­­accessing route references with aliases, we can use Cypress
    to access Cypress requests and use the properties of the requests later. In the
    following code block, we identify a request for a specific comment and check the
    properties of the comment using aliases:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 就像访问路由引用时使用别名一样，我们可以使用Cypress访问Cypress请求并在以后使用请求的属性。在下面的代码块中，我们标识了一个特定评论的请求，并使用别名检查评论的属性：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The test makes an assertion on a specific comment and checks whether the assertion
    matches the ID of the comment. We have used an alias to reference the request
    URL in such a way that when running our tests, we just need to reference the URL
    that we have aliased without necessarily typing it in whole. The following screenshot
    of the running test shows how Cypress creates an alias that it later references
    while it is running the test:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 测试对特定评论进行断言，并检查断言是否与评论的ID匹配。我们使用别名引用请求URL，这样当运行我们的测试时，我们只需要引用我们已经别名的URL，而不必完整输入它。运行测试的下面的屏幕截图显示了Cypress如何创建别名，并在运行测试时引用它：
- en: '![Figure 8.5 – Request references'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.5 - 请求引用'
- en: '](image/Figure_8.5_B15616.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.5_B15616.jpg)'
- en: Figure 8.5 – Request references
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 - 请求引用
- en: In the preceding screenshot, the first `sixthComment` command is a command where
    Cypress is creating the alias, and the second is when the running test identifies
    the alias and asserts the expectation against the responses gotten from the aliased
    URL.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，第一个`sixthComment`命令是Cypress创建别名的命令，第二个是运行测试识别别名并对从别名URL获取的响应进行断言的命令。
- en: Recap – Understanding Cypress aliases
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 了解Cypress别名
- en: 'In this section, we learned about aliases and how they are used to write "clean"
    code for our tests by providing a way for us to access and have references to
    requests, elements, routes, and commands that we may later require in our tests.
    We have also learned how Cypress aliases are accessed: either through the asynchronous
    method that utilizes the `@` symbol before the alias, or the synchronous method
    that directly accesses the aliased object using the `this` keyword. Finally, we
    learned how to utilize aliases in tests for referencing elements, enabling us
    to use aliased routes and requests in our tests.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了别名及其如何用于编写测试的“干净”代码，通过提供一种方式让我们可以访问和引用我们在测试中可能需要的请求、元素、路由和命令。我们还学习了Cypress别名的访问方式：通过异步方法，该方法在别名之前使用`@`符号，或者直接使用`this`关键字访问别名对象的同步方法。最后，我们学习了如何在测试中利用别名引用元素，使我们能够在测试中使用别名路由和请求。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about aliases and variables and how to utilize them
    in Cypress. We covered what variables are in Cypress tests, different types of
    variables and their scopes, and how to utilize them. We also covered how variables
    in Cypress assist in the creation of closures and how we create an environment
    that can only be accessed by the variables in addition to the global context accessible
    to the tests. Lastly, we looked at how we use aliases and the different contexts
    in which aliases are utilized. We learned how to reference aliases in tests, how
    to use them with elements, routes, and requests, and even for context sharing
    between test hooks and the tests themselves.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了别名和变量以及如何在Cypress中利用它们。我们介绍了Cypress测试中的变量是什么，不同类型的变量及其作用域，以及如何利用它们。我们还介绍了Cypress中变量如何帮助创建闭包，以及如何创建只能被变量访问的环境，除了测试可访问的全局上下文。最后，我们看了如何使用别名以及别名的不同上下文。我们学习了如何在测试中引用别名，如何与元素、路由和请求一起使用它们，甚至用于测试钩子和测试本身之间的上下文共享。
- en: From this chapter, you have gained the skills of understanding how aliases and
    variables work, how aliases can be used in both asynchronous and synchronous scenarios,
    and how and when to create and implement the scope of variables in tests.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，您已经掌握了了解别名和变量如何工作，别名如何在异步和同步场景中使用，以及何时以及如何创建和实现测试中变量的作用域的技能。
- en: Now that you fully understand how aliases and variables work, we are ready for
    our next chapter in which we will understand how the test runner works. We will
    dive into different aspects of the test runner and how to interpret events happening
    on the test runner.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您完全了解了别名和变量的工作原理，我们已经准备好进行下一章，我们将了解测试运行器的工作原理。我们将深入研究测试运行器的不同方面以及如何解释测试运行器上发生的事件。
