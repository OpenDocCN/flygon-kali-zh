["```java\n0 <= mark <= position <= limit <= capacity\n```", "```java\npublic class ServerSocketChannelTimeServer {\n    public static void main(String[] args) {\n        System.out.println(\"Time Server started\");\n        try {\n            ServerSocketChannel serverSocketChannel = \n                ServerSocketChannel.open();\n            serverSocketChannel.socket().bind(\n                new InetSocketAddress(5000));\n            ...\n            }\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n    }\n}\n```", "```java\n    while (true) {\n        System.out.println(\"Waiting for request ...\");\n        SocketChannel socketChannel = \n            serverSocketChannel.accept();\n```", "```java\n    if (socketChannel != null) {\n        String dateAndTimeMessage = \"Date: \" \n            +  new Date(System.currentTimeMillis());\n        ...\n\n    }\n```", "```java\n    ByteBuffer buf = ByteBuffer.allocate(64);\n    buf.put(dateAndTimeMessage.getBytes());\n```", "```java\n    buf.flip();\n    while (buf.hasRemaining()) {\n        socketChannel.write(buf);\n    }\n    System.out.println(\"Sent: \" + dateAndTimeMessage);\n```", "```java\npublic class SocketChannelTimeClient {\n    public static void main(String[] args) {\n        SocketAddress address = new InetSocketAddress(\n            \"127.0.0.1\", 5000);\n        try (SocketChannel socketChannel = \n                SocketChannel.open(address)) {\n            ...\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n```", "```java\n            ByteBuffer byteBuffer = ByteBuffer.allocate(64);\n            int bytesRead = socketChannel.read(byteBuffer);\n            while (bytesRead > 0) {\n                byteBuffer.flip();\n                while (byteBuffer.hasRemaining()) {\n                    System.out.print((char) byteBuffer.get());\n                }\n                System.out.println();\n                bytesRead = socketChannel.read(byteBuffer);\n            }\n```", "```java\npublic class ChatServer {\n\n    public ChatServer() {\n        System.out.println(\"Chat Server started\");\n        try {\n            ServerSocketChannel serverSocketChannel = \n                ServerSocketChannel.open();\n            serverSocketChannel.socket().bind(\n                new InetSocketAddress(5000));\n\n            boolean running = true;\n            while (running) {\n                System.out.println(\"Waiting for request ...\");\n                SocketChannel socketChannel\n                        = serverSocketChannel.accept();\n                ...\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }        \n    }\n\n    public static void main(String[] args) {\n        new ChatServer();\n    }\n}\n```", "```java\n    System.out.println(\"Connected to Client\");\n    String message;\n    Scanner scanner = new Scanner(System.in);\n    while (true) {\n        System.out.print(\"> \");\n        message = scanner.nextLine();\n        if (message.equalsIgnoreCase(\"quit\")) {\n            HelperMethods.sendFixedLengthMessage(\n                    socketChannel, \"Server terminating\");\n            running = false;\n            break;\n        } else {\n            HelperMethods.sendFixedLengthMessage(\n                socketChannel, message);\n            System.out.println(\n                \"Waiting for message from client ...\");\n            System.out.println(\"Message: \" + HelperMethods\n                .receiveFixedLengthMessage(socketChannel));\n        }\n    }\n```", "```java\npublic class ChatClient {\n\n    public ChatClient() {\n        SocketAddress address = \n            new InetSocketAddress(\"127.0.0.1\", 5000);\n        try (SocketChannel socketChannel = \n                SocketChannel.open(address)) {\n            System.out.println(\"Connected to Chat Server\");\n            String message;\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n                System.out.println(\n                    \"Waiting for message from the server ...\");\n                ...\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }        \n    }\n\n    public static void main(String[] args) {\n        new ChatClient();\n    }\n}\n```", "```java\n    System.out.println(\"Waiting for message from the server ...\");\n    System.out.println(\"Message: \" \n            + HelperMethods.receiveFixedLengthMessage(\n                    socketChannel));\n    System.out.print(\"> \");\n    message = scanner.nextLine();\n    if (message.equalsIgnoreCase(\"quit\")) {\n        HelperMethods.sendFixedLengthMessage(\n            socketChannel, \"Client terminating\");\n        break;\n    }\n    HelperMethods.sendFixedLengthMessage(socketChannel, message);\n```", "```java\npublic class HelperMethods {\n    ...\n}\n```", "```java\n    public static void sendFixedLengthMessage(\n            SocketChannel socketChannel, String message) {\n        try {\n            ByteBuffer buffer = ByteBuffer.allocate(64);\n            buffer.put(message.getBytes());\n            buffer.flip();\n            while (buffer.hasRemaining()) {\n                socketChannel.write(buffer);\n            }\n            System.out.println(\"Sent: \" + message);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static String receiveFixedLengthMessage\n            (SocketChannel socketChannel) {\n        String message = \"\";\n        try {\n            ByteBuffer byteBuffer = ByteBuffer.allocate(64);\n            socketChannel.read(byteBuffer);\n            byteBuffer.flip();\n            while (byteBuffer.hasRemaining()) {\n                message += (char) byteBuffer.get();\n            }\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        return message;\n    }\n```", "```java\n    public static void sendMessage(\n        SocketChannel socketChannel, String message) {\n        try {\n            ByteBuffer buffer = \n                ByteBuffer.allocate(message.length() + 1);\n            buffer.put(message.getBytes());\n            buffer.put((byte) 0x00);\n            buffer.flip();\n            while (buffer.hasRemaining()) {\n                socketChannel.write(buffer);\n            }\n            System.out.println(\"Sent: \" + message);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n```", "```java\n    public static String receiveMessage(SocketChannel socketChannel) {\n        try {\n            ByteBuffer byteBuffer = ByteBuffer.allocate(16);\n            String message = \"\";\n            while (socketChannel.read(byteBuffer) > 0) {\n                char byteRead = 0x00;\n                byteBuffer.flip();\n                while (byteBuffer.hasRemaining()) {\n                    byteRead = (char) byteBuffer.get();\n                    if (byteRead == 0x00) {\n                        break;\n                    }\n                    message += byteRead;\n                }\n                if (byteRead == 0x00) {\n                    break;\n                }\n                byteBuffer.clear();\n            }\n            return message;\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        return \"\";\n    }\n```", "```java\npublic class PartsServer {\n    private static final HashMap<String,Float> parts = \n            new HashMap<>();\n\n    public PartsServer() {\n        System.out.println(\"Part Server Started\");\n        ...\n    }\n\n    public static void main(String[] args) {\n        new PartsServer();\n    }\n}\n```", "```java\n        initializeParts();\n```", "```java\n    private void initializeParts() {\n        parts.put(\"Hammer\", 12.55f);\n        parts.put(\"Nail\", 1.35f);\n        parts.put(\"Pliers\", 4.65f);\n        parts.put(\"Saw\", 8.45f);\n    }\n```", "```java\n    public static Float getPrice(String partName) {\n        return parts.get(partName);\n    }\n```", "```java\n        try {\n            ServerSocketChannel serverSocketChannel = \n                ServerSocketChannel.open();\n            serverSocketChannel.socket().bind(\n                new InetSocketAddress(5000));\n             ...\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n```", "```java\n            while (true) {\n                System.out.println(\"Waiting for client ...\");\n                SocketChannel socketChannel\n                        = serverSocketChannel.accept();\n                new Thread(\n                    new ClientHandler(socketChannel)).start();\n            }\n```", "```java\npublic class ClientHandler implements Runnable{\n    private final SocketChannel socketChannel;\n\n    public ClientHandler(SocketChannel socketChannel) {\n        this.socketChannel = socketChannel;\n    }\n\n    public void run() {\n        System.out.println(\"ClientHandler Started for \" \n            + this.socketChannel);\n        String partName;\n        while (true) {\n            partName = \n                HelperMethods.receiveMessage(socketChannel);\n            if (partName.equalsIgnoreCase(\"quit\")) {\n                break;\n            } else {\n                Float price = PartsServer.getPrice(partName);\n                HelperMethods.sendMessage(socketChannel, \"\" + \n                    price);\n            }\n        }\n        System.out.println(\"ClientHandler Terminated for \" \n            + this.socketChannel);\n    }\n}\n```", "```java\npublic class PartsClient {\n\n    public PartsClient() {\n        System.out.println(\"PartsClient Started\");\n        SocketAddress address = \n            new InetSocketAddress(\"127.0.0.1\", 5000);\n        try (SocketChannel socketChannel = \n                SocketChannel.open(address)) {\n            System.out.println(\"Connected to Parts Server\");\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n            ...\n            }\n            System.out.println(\"PartsClient Terminated\");\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        new PartsClient();\n    }\n}\n```", "```java\n    System.out.print(\"Enter part name: \");\n    String partName = scanner.nextLine();\n    if (partName.equalsIgnoreCase(\"quit\")) {\n        HelperMethods.sendMessage(socketChannel, \"quit\");\n        break;\n    } else {\n        HelperMethods.sendMessage(socketChannel, partName);\n        System.out.println(\"The price is \" \n            + HelperMethods.receiveMessage(socketChannel));\n    }\n```", "```java\npublic class AsynchronousServerSocketChannelServer {\n\n    public AsynchronousServerSocketChannelServer() {\n        System.out.println(\"Asynchronous Server Started\");\n        try (AsynchronousServerSocketChannel serverChannel\n                = AsynchronousServerSocketChannel.open()) {\n        ...\n        } catch (IOException | InterruptedException \n               | ExecutionException ex) {\n            ex.printStackTrace();\n        }        \n\n    }\n\n    public static void main(String[] args) {\n        new AsynchronousServerSocketChannelServer();\n    }\n\n}\n```", "```java\n    InetSocketAddress hostAddress\n        = new InetSocketAddress(\"localhost\", 5000);\n    serverChannel.bind(hostAddress);\n```", "```java\n    System.out.println(\"Waiting for client to connect... \");\n    Future acceptResult = serverChannel.accept();\n```", "```java\n    try (AsynchronousSocketChannel clientChannel\n             = (AsynchronousSocketChannel) acceptResult.get()) {\n        ...\n    }\n```", "```java\n    System.out.println(\"Messages from client: \");\n    while ((clientChannel != null) && (clientChannel.isOpen())) {\n        ByteBuffer buffer = ByteBuffer.allocate(32);\n        Future result = clientChannel.read(buffer);\n        // Wait until buffer is ready using \n        // one of three techniques to be discussed\n        buffer.flip();\n        String message = new String(buffer.array()).trim();\n        System.out.println(message);\n        if (message.equals(\"quit\")) {\n            break;\n        }\n    }\n```", "```java\n    while (!result.isDone()) {\n        // do nothing   \n    }\n```", "```java\n    result.get();\n```", "```java\n    result.get(10, TimeUnit.SECONDS);\n```", "```java\npublic class AsynchronousSocketChannelClient {\n\n    public static void main(String[] args) {\n        System.out.println(\"Asynchronous Client Started\");\n        try (AsynchronousSocketChannel client = \n                AsynchronousSocketChannel.open()) {\n            ...\n        } catch (IOException | InterruptedException \n                             | ExecutionException ex) {\n            // Handle exception\n        }\n    }\n\n}\n```", "```java\n            InetSocketAddress hostAddress = \n                    new InetSocketAddress(\"localhost\", 5000);\n            Future future = client.connect(hostAddress);\n            future.get();\n```", "```java\n    System.out.println(\"Client is started: \" + client.isOpen());\n    System.out.println(\"Sending messages to server: \");\n\n    Scanner scanner = new Scanner(System.in);\n    String message;\n    while (true) {\n        System.out.print(\"> \");\n        message = scanner.nextLine();\n        ByteBuffer buffer = ByteBuffer.wrap(message.getBytes());\n        Future result = client.write(buffer);\n        while (!result.isDone()) {\n            // Wait\n        }                \n        if (message.equalsIgnoreCase(\"quit\")) {\n            break;\n        }\n    }\n```", "```java\n    public void displayBuffer(IntBuffer buffer) {\n        for (int i = 0; i < buffer.position(); i++) {\n            System.out.print(buffer.get(i) + \" \");\n        }\n        System.out.println();\n    }\n```", "```java\n        int[] arr = {12, 51, 79, 54};\n```", "```java\n        IntBuffer buffer = IntBuffer.allocate(6);\n```", "```java\n        buffer.put(arr);\n```", "```java\n        System.out.println(buffer);\n        displayBuffer(buffer);\n```", "```java\n        int length = buffer.remaining();\n        buffer.put(arr, 0, length);\n```", "```java\n    public void displayBuffer(IntBuffer buffer) {\n        int arr[] = new int[buffer.position()];\n        buffer.rewind();\n        buffer.get(arr);\n        for(int element : arr) {\n            System.out.print(element + \" \");\n        }\n    }\n```", "```java\n    String contents = \"Book\";\n    ByteBuffer buffer = ByteBuffer.allocate(32);\n    buffer.put(contents.getBytes());\n    ByteBuffer duplicateBuffer = buffer.duplicate();\n```", "```java\n    duplicateBuffer.put(0,(byte)0x4c); // 'L'\n    System.out.println(\"buffer: \" + buffer.get(0));\n    System.out.println(\"duplicateBuffer: \" +\n        duplicateBuffer.get(0));\n```", "```java\n    ByteBuffer buffer = ByteBuffer.allocate(32);\n    ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n```", "```java\n    System.out.println(\"Read-only: \" + \n        readOnlyBuffer.isReadOnly());\n```", "```java\n    serverSocketChannel.setOption(SO_RCVBUF, 64);\n```", "```java\n    public static final SocketOption<Integer> SO_RCVBUF;\n```"]