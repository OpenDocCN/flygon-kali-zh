- en: Introduction to ECS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECS简介
- en: '**Elastic Container Service** (**ECS**) is a popular AWS-managed service that
    provides container orchestration for your applications and integrates with a wide
    variety of AWS services and tools.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性容器服务（ECS）是一项流行的AWS托管服务，为您的应用程序提供容器编排，并与各种AWS服务和工具集成。
- en: In this chapter, you will learn key concepts of ECS; how ECS is architected,
    and understand the various components of ECS, which include the **Elastic Container
    Registry** (**ECR**), ECS clusters, ECS container instances, ECS task definitions,
    ECS tasks, and ECS services. The primary focus of this chapter will be using the
    AWS console to create your first ECS cluster, define an ECS task definition, and
    configure an ECS service to deploy your first container application to ECS. You
    will take a closer look at how ECS clusters are formed from ECS container instances,
    and inspect an ECS container instance under the hood to understand further how
    ECS is connected to your infrastructure and how containers are deployed and managed.
    Finally, you will be introduced to the ECS command-line interface (CLI), which
    is a useful tool for quickly standing up ECS clusters, task definitions, and services
    that uses the popular Docker Compose format to define your containers and services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习ECS的关键概念；ECS的架构方式，并了解ECS的各个组件，包括弹性容器注册表（ECR），ECS集群，ECS容器实例，ECS任务定义，ECS任务和ECS服务。本章的重点将是使用AWS控制台创建您的第一个ECS集群，定义ECS任务定义，并配置ECS服务以部署您的第一个容器应用程序到ECS。您将更仔细地了解ECS集群是如何由ECS容器实例形成的，并检查ECS容器实例的内部，以进一步了解ECS如何与您的基础架构连接以及如何部署和管理容器。最后，您将介绍ECS命令行界面（CLI），这是一个有用的工具，可以快速搭建ECS集群，任务定义和服务，它使用流行的Docker
    Compose格式来定义您的容器和服务。
- en: 'The following topics will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: ECS architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS架构
- en: Creating an ECS cluster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建ECS集群
- en: Understanding ECS container instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解ECS容器实例
- en: Creating ECS task definitions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建ECS任务定义
- en: Creating ECS services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建ECS服务
- en: Deploying ECS services
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署ECS服务
- en: Running an ECS task
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行ECS任务
- en: Using the ECS CLI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ECS CLI
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements to complete this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成本章所需的技术要求：
- en: Docker Engine 18.06 or higher
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Engine 18.06或更高版本
- en: Docker Compose 1.22 or higher
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose 1.22或更高版本
- en: jq
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jq
- en: Administrator access to an AWS account
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对AWS账户的管理员访问权限
- en: Local AWS profile configured, as per instructions in Chapter 3
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据第3章的说明配置本地AWS配置文件
- en: Working Docker workflow for the sample application, as configured in Chapter
    2 (see [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2)).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第2章中配置的示例应用程序的工作Docker工作流程（请参阅[https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch2)）。
- en: 'The following GitHub URL contains the code samples used in this chapter: [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub URL包含本章中使用的代码示例：[https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码实际操作：
- en: '[http://bit.ly/2MTG1n3](http://bit.ly/2MTG1n3)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2MTG1n3](http://bit.ly/2MTG1n3)'
- en: ECS architecture
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECS架构
- en: ECS is an AWS-managed service that provides you with core building blocks to
    construct how you want to deploy and operate container applications in AWS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ECS是AWS托管服务，为您提供了构建在AWS中部署和操作容器应用程序的核心构建块。
- en: Prior to December 2017, the Elastic Container Service was known as the EC2 Container
    Service.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在2017年12月之前，弹性容器服务被称为EC2容器服务。
- en: 'ECS allows you to:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ECS允许您：
- en: Build and publish your Docker images in private repositories
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和发布您的Docker镜像到私有仓库
- en: Create definitions that describe the container images, configuration, and resources
    required to run your applications
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建描述容器镜像、配置和运行应用程序所需资源的定义。
- en: Launch and run your containers using your own EC2 infrastructure or using an
    AWS-managed infrastructure
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用您自己的EC2基础设施或使用AWS托管基础设施启动和运行您的容器
- en: Manage and monitor your containers
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和监视您的容器
- en: Orchestrate rolling deployments of new versions or revisions of your container
    applications
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编排滚动部署新版本或修订您的容器应用程序
- en: 'To provide these capabilities, ECS includes a number of components illustrated
    in the following diagram and described in the following table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供这些功能，ECS包括以下图表中说明的一些组件，并在下表中描述：
- en: '| Component | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 组件 | 描述 |'
- en: '| Elastic Container Registry (ECR) | Provides secure private Docker image repositories
    where you can publish and pull your Docker images. We will examine ECR in depth
    in [Chapter 5](a00edb3f-1989-4e3c-8835-b99bb4a1b582.xhtml), *Publishing Docker
    Images using ECR.* |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 弹性容器注册表（ECR） | 提供安全的私有Docker镜像仓库，您可以在其中发布和拉取您的Docker镜像。我们将在[第5章](a00edb3f-1989-4e3c-8835-b99bb4a1b582.xhtml)中深入研究ECR，*使用ECR发布Docker镜像*。|'
- en: '| ECS cluster | A collection of ECS Container Instances that run your container
    applications. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| ECS集群 | 运行您的容器应用程序的ECS容器实例的集合。|'
- en: '| ECS container instance | An EC2 instance that runs the Docker Engine and
    ECS agent, which communicates with the AWS ECS service and allows ECS to manage
    the lifecycle of your container applications. Each ECS container instance is joined
    to a single ECS cluster. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| ECS容器实例 | 运行Docker引擎和ECS代理的EC2实例，该代理与AWS ECS服务通信，并允许ECS管理容器应用程序的生命周期。每个ECS容器实例都加入到单个ECS集群中。|'
- en: '| ECS agent | A software component that runs in the form of a Docker container
    and communicates with the AWS ECS service. The agent is responsible for managing
    the Docker Engine on behalf of ECS, pulling Docker images from registries, starting
    and stopping ECS tasks, and publishing metrics to ECS. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| ECS代理 | 以Docker容器的形式运行的软件组件，与AWS ECS服务通信。代理负责代表ECS管理Docker引擎，从注册表中拉取Docker镜像，启动和停止ECS任务，并向ECS发布指标。|'
- en: '| ECS task definition | Defines one or more containers and associated resources
    that comprise your application. Each container definition includes information
    specifying the container image, how much CPU and memory should be allocated to
    the container, runtime environment variables, and many more configuration options.
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| ECS任务定义 | 定义组成您的应用程序的一个或多个容器和相关资源。每个容器定义包括指定容器镜像、应分配给容器的CPU和内存量、运行时环境变量等许多配置选项的信息。|'
- en: '| ECS Task | An ECS task is the runtime manifestation of an ECS task definition,
    and represents the containers defined in your task definitions running on a given
    ECS cluster. ECS tasks can be run as short-lived, adhoc tasks, or run as long-lived
    tasks, which form the building blocks of ECS services. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| ECS任务 | ECS任务是ECS任务定义的运行时表现，代表在给定ECS集群上运行的任务定义中定义的容器。ECS任务可以作为短暂的临时任务运行，也可以作为长期任务运行，这些任务是ECS服务的构建块。|'
- en: '| ECS service | An ECS service defines zero or more instances of a long-lived
    ECS task running on a given ECS cluster and represent what you would commonly
    think of as your application or microservice instances.ECS services define an
    ECS task definition, target an ECS cluster, and also include a desired count,
    which defines how many instances or ECS tasks based from the ECS task definition
    are associated with the service.Your ECS services can be integrated with the AWS
    Elastic Load Balancing service, which allows you to provide a highly available,
    load-balanced service endpoint for your ECS service, and also supports rolling
    deployments of new versions of your application. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| ECS服务 | ECS服务定义了在给定的ECS集群上运行的一个或多个长期运行的ECS任务实例，并代表您通常会考虑为您的应用程序或微服务实例。ECS服务定义了一个ECS任务定义，针对一个ECS集群，并且还包括一个期望的计数，它定义了与服务关联的基于ECS任务定义的实例或ECS任务的数量。您的ECS服务可以与AWS弹性负载均衡服务集成，这允许您为您的ECS服务提供高可用的、负载均衡的服务端点，并且还支持新版本应用程序的滚动部署。'
- en: '| AWS ECS | Manages all components in the ECS architecture. Provides service
    endpoints that manage ECS agents, integrate with other AWS services, and allow
    customers to manage their ECR repositories, ECS task definitions, and ECS clusters.
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| AWS ECS | 管理ECS架构中的所有组件。提供管理ECS代理的服务端点，与其他AWS服务集成，并允许客户管理其ECR存储库、ECS任务定义和ECS集群。'
- en: As we progress through this chapter, refer to the following diagram to obtain
    a visual overview of how the various ECS components relate to each other.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在本章中的进展，参考以下图表以获得各种ECS组件之间关系的视觉概述。
- en: '![](assets/25c1eaac-981b-4035-b59d-dda3353e1607.png)ECS architecture'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/25c1eaac-981b-4035-b59d-dda3353e1607.png)ECS架构'
- en: Creating an ECS cluster
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ECS集群
- en: To help you understand the basics of ECS, we will now step through a series
    of configuration tasks using the AWS console.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您了解ECS的基础知识，我们将通过AWS控制台逐步进行一系列配置任务。
- en: We will first create an ECS cluster, which is a collection of ECS container
    instances that will run your container applications, and often are closely related
    to EC2 Auto Scaling groups, as shown in the following figure.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将创建一个ECS集群，这是一组将运行您的容器应用程序的ECS容器实例，并且通常与EC2自动扩展组密切相关，如下图所示。
- en: 'Creating an ECS cluster can be performed using the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下步骤执行创建ECS集群的操作：
- en: All AWS console configuration examples in this chapter are based on you having
    logged in to the AWS console and assumed an appropriate administrative role, as
    described in the earlier Chapter 3, *Getting Started with AWS**.* At the time
    of writing this chapter, the tasks described in this section are specific to the
    us-east-1 (North Virginia) region so before proceeding, ensure you have selected
    this region in the AWS console.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有AWS控制台配置示例都基于您已登录到AWS控制台并假定了适当的管理角色，如在第3章“开始使用AWS”中所述。撰写本章时，本节中描述的任务特定于us-east-1（北弗吉尼亚）地区，因此在继续之前，请确保您已在AWS控制台中选择了该地区。
- en: From the main AWS console, select **Services** | **Elastic Container Service**
    within the Compute section.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主AWS控制台中，在计算部分中选择“服务”|“弹性容器服务”。
- en: If you haven't used or configured ECS before in your AWS account and region,
    you will be presented with a Welcome screen, and you can invoke a getting started
    configuration wizard by clicking the **Get started** button.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您以前没有在您的AWS账户和地区中使用或配置过ECS，您将看到一个欢迎屏幕，并且可以通过单击“开始”按钮来调用一个入门配置向导。
- en: At at the time of writing, the getting started wizard only allows you to get
    started using the Fargate deployment type. We will learn about Fargate in later
    chapters, so scroll to the bottom of the screen and click on **Cancel**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在撰写本文时，入门向导只允许您使用Fargate部署类型开始。我们将在后面的章节中了解有关Fargate的信息，因此请滚动到屏幕底部，然后单击**取消**。
- en: You will be returned to the ECS console and we can now get started creating
    an ECS cluster by clicking on the **Create Cluster** button.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将返回到ECS控制台，现在可以通过单击**创建集群**按钮开始创建ECS集群。
- en: On the **Select cluster template** screen, select the **EC2 Linux + Networking**
    template, which will set up network resources and an EC2 autoscaling group with
    support for Docker for Linux by launching EC2 instances based upon a special ECS-optimized
    Amazon Machine Image (AMI) that we'll learn more about later on. Once complete,
    click on **Next step** to continue.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择集群模板**屏幕上，选择**EC2 Linux + Networking**模板，该模板将通过启动基于特殊的ECS优化Amazon机器映像（AMI）的EC2实例来设置网络资源和支持Linux的Docker的EC2自动扩展组，我们稍后将了解更多信息。完成后，单击**下一步**继续。
- en: 'On the **Configure cluster** screen, configure a cluster name of **test-cluster**,
    ensure the **EC2 instance type** is set to **t2.micro** to qualify for free tier
    access, and set the **Key pair** to the EC2 key pair you created in earlier chapters.
    Notice that a new VPC and subnets will be created, along with a security group
    that permits inbound web access (TCP port `80`) from the internet (`0.0.0.0/0`).
    Once complete, click on **Create** to commence creation of the cluster:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置集群**屏幕上，配置一个名为**test-cluster**的集群名称，确保**EC2实例类型**设置为**t2.micro**以符合免费使用条件，并将**密钥对**设置为您在早期章节中创建的EC2密钥对。请注意，将创建新的VPC和子网，以及允许来自互联网（`0.0.0.0/0`）的入站Web访问（TCP端口`80`）的安全组。完成后，单击**创建**开始创建集群：
- en: '![](assets/06292307-6855-4e25-869b-12901590f2ef.png)Configuring the ECS cluster'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/06292307-6855-4e25-869b-12901590f2ef.png)配置ECS集群'
- en: At this point, the Launch status screen will be displayed and a number of resources
    will be created that are required to support your ECS cluster. Once the cluster
    creation is complete, click on the **View Cluster** button to continue.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，将显示启动状态屏幕，并将创建一些必要的资源来支持您的ECS集群。完成集群创建后，单击**查看集群**按钮继续。
- en: You will now be taken to the details screen for the `test-cluster` that was
    just created. Congratulations—you have successfully deployed your first ECS cluster!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将转到刚刚创建的`test-cluster`的详细信息屏幕。恭喜 - 您已成功部署了第一个ECS集群！
- en: 'The cluster details screen provides you with configuration and operational
    data about your ECS cluster—for example, if you click on the **ECS Instances**
    tab, you are presented with a list of each of the ECS container instances in the
    cluster:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 集群详细信息屏幕为您提供有关ECS集群的配置和操作数据 - 例如，如果您单击**ECS实例**选项卡，则会显示集群中每个ECS容器实例的列表：
- en: '![](assets/b41be353-c25f-4219-a6c6-d5792812649d.png)ECS cluster details'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b41be353-c25f-4219-a6c6-d5792812649d.png)ECS集群详细信息'
- en: You can see that the wizard created a single container instance, which is running
    from an EC2 instance that is deployed to the displayed availability zone. Note
    you can also see other information about the ECS container instance, such as ECS
    agent version and status, running tasks, CPU/memory usage, along with the version
    of the Docker Engine.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到向导创建了一个单个容器实例，该实例正在从部署到显示的可用区的EC2实例上运行。请注意，您还可以查看有关ECS容器实例的其他信息，例如ECS代理版本和状态、运行任务、CPU/内存使用情况，以及Docker
    Engine的版本。
- en: There's not much more than this to an ECS cluster—it is essentially a collection
    of ECS container instances, which in turn are EC2 instances running the Docker
    Engine along with an ECS agent that provide CPU, memory, and networking resources
    for running your containers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ECS集群没有比这更多的东西——它本质上是一组ECS容器实例，这些实例又是运行Docker引擎以及提供CPU、内存和网络资源来运行容器的EC2实例。
- en: Understanding ECS container instances
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解ECS容器实例
- en: Creating an ECS cluster was very easy using the wizard provided by the AWS console,
    however it should be obvious that a lot of things were happening under the hood
    to get your ECS cluster up and running. A full discussion of all of the resources
    that were created is outside the scope of this introductory chapter, however at
    this stage, it is useful to focus on ECS container instances and examine them
    in further detail, given they collectively form the heart of ECS clusters.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AWS控制台提供的向导创建ECS集群非常容易，但是显然，在幕后进行了很多工作来使您的ECS集群正常运行。本入门章节范围之外的所有创建资源的讨论都是不在讨论范围内的，但是在这个阶段，集中关注ECS容器实例并对其进行进一步详细检查是有用的，因为它们共同构成了ECS集群的核心。
- en: Joining an ECS cluster
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入ECS集群
- en: As the ECS create cluster wizard launched instances and created our ECS cluster,
    you may have wondered how exactly an ECS container instance joins an ECS cluster.
    The answer to this is very simple and can be understood easily by clicking on
    the EC2 instance ID link of the ECS container instance in your newly created cluster.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当ECS创建集群向导启动实例并创建我们的ECS集群时，您可能会想知道ECS容器实例如何加入ECS集群。这个问题的答案非常简单，可以通过单击新创建集群中ECS容器实例的EC2实例ID链接来轻松理解。
- en: 'This link will take you to the EC2 Dashboard with the EC2 instance associated
    with the container instance selected, as shown in the following screenshot. Note
    that I have highlighted a number of elements that I will refer back to as we discuss
    ECS container instances:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接将带您转到EC2仪表板，其中选择了与容器实例关联的EC2实例，如下一个屏幕截图所示。请注意，我已经突出显示了一些元素，我们在讨论ECS容器实例时将会回顾到它们：
- en: '![](assets/54684032-be1c-458f-9a0f-54cd1fd2f890.png)EC2 Instance details'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/54684032-be1c-458f-9a0f-54cd1fd2f890.png)EC2实例详情'
- en: 'If you right-click the instance and select **Instance Settings** | **View/Change
    User Data** (see the previous screenshot), you will be presented with the user
    data for the instance, which is a script that is run on instance creation and
    can be used to help initialize your EC2 instances:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您右键单击实例并选择**实例设置** | **查看/更改用户数据**（参见上一个屏幕截图），您将看到实例的用户数据，这是在实例创建时运行的脚本，可用于帮助初始化您的EC2实例：
- en: '![](assets/f1a75df1-7ad8-457a-96e4-701b6a1d0a5d.png)EC2 Instance User Data
    Script for Joining an ECS Cluster'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f1a75df1-7ad8-457a-96e4-701b6a1d0a5d.png)加入ECS集群的EC2实例用户数据脚本'
- en: The user data script that was configured by the getting started wizard is shown
    in the previous screenshot, which, as you can see, is a very simple bash script
    that writes the `ECS_CLUSTER=test-cluster` text to a file called `/etc/ecs/ecs.config`.
    In this example, recall that `test-cluster` is the name you configured for your
    ECS cluster, so this single configuration line in the referenced ECS agent configuration
    file simply tells the agent running on the ECS container instance to attempt to
    register with an ECS cluster called `test-cluster`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过入门向导配置的用户数据脚本显示在上一个屏幕截图中，正如您所看到的，这是一个非常简单的bash脚本，它将`ECS_CLUSTER=test-cluster`文本写入名为`/etc/ecs/ecs.config`的文件中。在这个例子中，回想一下，`test-cluster`是您为ECS集群配置的名称，因此在引用的ECS代理配置文件中的这一行配置告诉运行在ECS容器实例上的代理尝试注册到名为`test-cluster`的ECS集群。
- en: The `/etc/ecs/ecs.config` file includes many other configuration options, which
    we will examine in further detail in [Chapter 6](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml),
    *Building Custom ECS Container Instances**.*
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/ecs/ecs.config`文件包含许多其他配置选项，我们将在[第6章](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml)中进一步详细讨论*构建自定义ECS容器实例*。'
- en: Granting access to join an ECS cluster
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授予加入ECS集群的访问权限
- en: In the previous screenshot, notice that there are no credentials required to
    connect to the ECS cluster—you could be forgiven for thinking that ECS simply
    allows any EC2 instance to join an ECS cluster, but of course that would not be
    very secure.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个屏幕截图中，请注意连接到ECS集群不需要凭据—您可能会原谅认为ECS只允许任何EC2实例加入ECS集群，但当然这并不安全。
- en: EC2 instances include a feature called IAM instance profiles, which attaches
    an IAM role to the EC2 instance that defines various AWS service operations the
    instance can perform. In the EC2 dashboard for your EC2 instance, you can see
    that a role called **ecsInstanceRole** has been assigned to your instance, and
    if you click on this role, you will be taken to the IAM dashboard showing the
    **Summary** page for the role.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: EC2实例包括一个名为IAM实例配置文件的功能，它将IAM角色附加到定义实例可以执行的各种AWS服务操作的EC2实例上。在您的EC2实例的EC2仪表板中，您可以看到一个名为**ecsInstanceRole**的角色已分配给您的实例，如果您点击此角色，您将被带到IAM仪表板，显示该角色的**摘要**页面。
- en: 'In the **Permissions** tab you can see that an AWS-managed policy called `AmazonEC2ContainerServiceforEC2Role`
    is attached to the role, and if you expand the policy, you can see the various
    IAM permissions associated with this policy as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在**权限**选项卡中，您可以看到一个名为`AmazonEC2ContainerServiceforEC2Role`的AWS托管策略附加到该角色，如果您展开该策略，您可以看到与该策略相关的各种IAM权限，如下面的屏幕截图所示：
- en: '![](assets/eb356c06-1ac3-4310-9736-1e1163eab6cd.png)EC2 Instance Role IAM Policy'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: EC2实例角色IAM策略
- en: Notice that the policy permits the `ecs:RegisterContainerInstance` action, which
    is the ECS permission required for an ECS container instance to join an ECS cluster,
    and that the policy also grants the `ecs:CreateCluster` permission, which means
    an ECS container instance attempting to register to an ECS cluster that does not
    currently exist will automatically create a new cluster.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，该策略允许`ecs:RegisterContainerInstance`操作，这是ECS容器实例加入ECS集群所需的ECS权限，并且该策略还授予了`ecs:CreateCluster`权限，这意味着尝试注册到当前不存在的ECS集群的ECS容器实例将自动创建一个新的集群。
- en: 'One further thing to note is that the policy applies to all resources as designated
    by the `"Resource": "*"` property, meaning any EC2 instance that is assigned a
    role with this policy will be able to join any ECS cluster in your account and
    region. Again, this may not seem very secure, but bear in mind this is a policy
    intended to simplify granting the necessary permissions for your ECS container
    instances, and in later chapters we will discuss how to create your own custom
    IAM roles and policies to restrict which ECS clusters a given ECS container instance
    can join.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '还有一件需要注意的事情是，该策略适用于所有资源，由`"Resource": "*"`属性指定，这意味着分配了具有此策略的角色的任何EC2实例都能够加入您帐户和区域中的任何ECS集群。再次强调，这可能看起来不太安全，但请记住，这是一个旨在简化授予ECS容器实例所需权限的策略，在后面的章节中，我们将讨论如何创建自定义IAM角色和策略，以限制特定ECS容器实例可以加入哪些ECS集群。'
- en: Managing ECS container instances
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理ECS容器实例
- en: In general, ECS container instances should be self-managing and require very
    little direct management, but nevertheless there will be times you need to troubleshoot
    your ECS container instances, hence it is useful to learn how you can connect
    to your ECS container instances and understand what happens under the hood of
    an ECS container instance.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，ECS容器实例应该是自管理的，需要很少的直接管理，但是总会有一些时候你需要排查你的ECS容器实例，因此学习如何连接到你的ECS容器实例并了解ECS容器实例内部发生了什么是很有用的。
- en: Connecting to ECS container instances
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到ECS容器实例
- en: 'ECS container instances are regular Linux hosts, so as you might expect, connecting
    to your instances simply means being able to establish a secure shell (SSH) session
    to the instance:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ECS容器实例是常规的Linux主机，因此您可能期望，连接到您的实例只是意味着能够与实例建立安全外壳（SSH）会话：
- en: If you navigate back to your instance in the EC2 dashboard, we first need to
    configure the security group attached to your instance to permit inbound SSH access.
    You can do this by clicking on the security group, selecting the Inbound tab and
    clicking the **Edit button** to modify the inbound rules of the security group.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在EC2仪表板中导航回到您的实例，我们首先需要配置附加到您的实例的安全组，以允许入站SSH访问。您可以通过点击安全组，选择入站选项卡，然后点击**编辑按钮**来修改安全组的入站规则来实现这一点。
- en: 'In the **Edit inbound rules** dialog, click on the **Add Rule** button and
    add a new rule with the following settings:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑入站规则**对话框中，点击**添加规则**按钮，并使用以下设置添加新规则：
- en: 'Protocol: TCP'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议：TCP
- en: 'Port Range: 22'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口范围：22
- en: 'Source: My IP'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来源：我的IP
- en: '![](assets/47275b79-2f2b-40c2-9a8b-df1c4a977c87.png)Add a Security Group Rule
    for SSH Access'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/47275b79-2f2b-40c2-9a8b-df1c4a977c87.png)为SSH访问添加安全组规则'
- en: After clicking **Save**, you will have enabled inbound SSH access from your
    public IP address to the ECS container instance. If you click back in your browser
    to return to your EC2 instance, you can now copy the public IP address and SSH
    to your instance.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**后，您将允许来自您的公共IP地址的入站SSH访问到ECS容器实例。如果您在浏览器中返回到您的EC2实例，现在您可以复制公共IP地址并SSH到您的实例。
- en: 'The following example demonstrates how to establish an SSH connection to the
    instance, using the `-i` flag to reference the private key of the EC2 key pair
    you associated with the instance. You also need to log in with a username of `ec2-user`,
    which is the default non-root user included in Amazon Linux:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何建立与实例的SSH连接，使用`-i`标志引用与实例关联的EC2密钥对的私钥。您还需要使用用户名`ec2-user`登录，这是Amazon
    Linux中包含的默认非root用户：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first thing to notice is that the login banner indicates this instance is
    based on the the Amazon ECS-Optimized Amazon Linux AMI, which is the default and
    recommended Amazon Machine Image (AMI) to work with when creating ECS container
    instances. AWS maintains this AMI and updates it periodically with versions of
    Docker and ECS agent recommended for use with ECS, so this is by far the simplest
    platform to use for your ECS container instances and I strongly recommend using
    this AMI as the foundation for your ECS container instances.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是登录横幅指示此实例基于Amazon ECS-Optimized Amazon Linux AMI，这是创建ECS容器实例时默认和推荐的Amazon
    Machine Image（AMI）。AWS定期维护此AMI，并使用与ECS推荐使用的Docker和ECS代理版本定期更新，因此这是迄今为止最简单的用于ECS容器实例的平台，我强烈建议使用此AMI作为ECS容器实例的基础。
- en: 'You can learn more about this AMI here: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).
    It includes a list of current AMI image IDs for each of the regions supported
    by ECS.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处了解有关此AMI的更多信息：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)。它包括每个ECS支持的区域的当前AMI映像ID列表。
- en: In [Chapter 6](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml), *Building Custom
    ECS Container Instances* you will learn how to customize and enhance the Amazon
    ECS-Optimized Amazon Linux AMI.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml)中，*构建自定义ECS容器实例*，您将学习如何自定义和增强Amazon
    ECS优化的Amazon Linux AMI。
- en: Inspecting the local Docker environment
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查本地Docker环境
- en: 'As you might expect, your ECS container instance will have an active Docker
    Engine running, which you can gather information about by running the `docker
    info` command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能期望的那样，您的ECS容器实例将运行一个活动的Docker引擎，您可以通过运行`docker info`命令来收集有关其信息：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here you can see the instance is running Docker version 17.09.1-ce, using the
    device mapper storage driver, and currently has a single container running.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到实例正在运行Docker版本17.09.1-ce，使用设备映射器存储驱动程序，并且当前只有一个容器正在运行。
- en: 'Let''s now take a look at the running container by executing the `docker container
    ps` command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过执行`docker container ps`命令来查看运行的容器：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see that the ECS agent actually runs as a container called `ecs-agent`,
    which should always be running on your ECS container instances in order for your
    ECS container instance to be managed by ECS.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到ECS代理实际上作为一个名为`ecs-agent`的容器运行，这应该始终在您的ECS容器实例上运行，以便您的ECS容器实例由ECS管理。
- en: Inspecting the ECS agent
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查ECS代理
- en: As shown previously, the ECS agent runs as a Docker container, and we can use
    the `docker container inspect` command to gather some insight about how this container
    works. In the previous example, we reference the name of the ECS agent container,
    and then use a Go template expression along with the `--format` flag to filter
    the command output, displaying the various bind mounts or volume mappings from
    the ECS agent container to the ECS container instance host.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，ECS代理作为Docker容器运行，我们可以使用`docker container inspect`命令来收集有关此容器如何工作的一些见解。在先前的示例中，我们引用了ECS代理容器的名称，然后使用Go模板表达式以及`--format`标志来过滤命令输出，显示ECS代理容器到ECS容器实例主机的各种绑定挂载或卷映射。
- en: In many of the command examples, I am piping output to the `jq` utility, which
    is a useful utility used for parsing JSON output at the command line. `jq` is
    not included by default in the Amazon Linux AMI, so you will need to install `jq`
    by running the `sudo yum install jq` command.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多命令示例中，我正在将输出传输到`jq`实用程序，这是一个用于在命令行解析JSON输出的实用程序。 `jq`不是Amazon Linux AMI默认包含的，因此您需要通过运行`sudo
    yum install jq`命令来安装`jq`。
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Running the docker container inspect command
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行docker container inspect命令
- en: Notice that the `/var/run` folder is mapped from the host to the agent, which
    provides access to the Docker Engine socket located at `/var/run/docker.sock`,
    allowing the ECS agent to manage the Docker Engine. You can also see that ECS
    agent logs will be written to `/var/log/ecs` on the Docker Engine host file system.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，将`/var/run`文件夹从主机映射到代理，这将允许ECS代理访问位于`/var/run/docker.sock`的Docker引擎套接字，从而允许ECS代理管理Docker引擎。您还可以看到ECS代理日志将写入Docker引擎主机文件系统上的`/var/log/ecs`。
- en: Verifying the ECS agent
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证ECS代理
- en: The ECS agent includes a local web server that can be used to introspect current
    ECS agent status.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ECS代理包括一个本地Web服务器，可用于内省当前的ECS代理状态。
- en: 'The following example demonstrates introspecting the ECS agent using the `curl`
    command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用`curl`命令内省ECS代理：
- en: '[PRE4]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Introspecting the ECS Agent
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 审查ECS代理
- en: 'Notice that the ECS agent listens on port 51678 and provides three endpoints
    you can query:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，ECS代理监听端口51678，并提供三个可以查询的端点：
- en: '`/v1/metadata`: Describes the cluster the container instance is joined to,
    the container instance **Amazon Resource Name** (**ARN**), and the ECS agent version'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/v1/metadata`：描述容器实例加入的集群、容器实例的Amazon资源名称（ARN）和ECS代理版本'
- en: '`/v1/tasks`: Returns a list of currently-running tasks. At the moment we haven''t
    deployed any ECS services or tasks to our cluster, hence this list is empty'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/v1/tasks`：返回当前正在运行的任务列表。目前我们还没有将任何ECS服务或任务部署到我们的集群，因此此列表为空'
- en: '`/license`: Provides the various software licenses that apply for the ECS agent
    software'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/license`：提供适用于ECS代理软件的各种软件许可证'
- en: The `/v1/metadata` endpoint is particularly useful, as you can use this endpoint
    to determine whether or not the ECS agent has successfully joined a given ECS
    cluster. We will use this later on in [Chapter 6](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml),
    *Building Custom ECS* *Container Instances* to perform a health check on instance
    creation to ensure our instances have successfully joined the correct ECS cluster.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`/v1/metadata`端点特别有用，因为您可以使用此端点来确定ECS代理是否成功加入了给定的ECS集群。我们将在[第6章](9b1ad8a7-b25d-4713-aa20-2c80f0019d4c.xhtml)中使用这一点，构建自定义ECS容器实例来执行实例创建的健康检查，以确保我们的实例已成功加入了正确的ECS集群。'
- en: ECS container instance logs
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECS容器实例日志
- en: Each ECS container instance includes log files that can help troubleshoot your
    instance.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每个ECS容器实例都包括可帮助排除故障的日志文件。
- en: 'The primary logs you will work with include the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您将处理的主要日志包括以下内容：
- en: 'Docker Engine logs: Located at `/var/log/docker`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker引擎日志：位于`/var/log/docker`
- en: 'ECS Agent logs: Located at `/var/log/ecs`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS代理日志：位于`/var/log/ecs`
- en: 'Note that there are two types of ECS agent logs:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有两种类型的ECS代理日志：
- en: 'Init logs: Located at `/var/log/ecs/ecs-init.log`, these logs provide output
    related to the `ecs-init` service, which is an Upstart service that ensures the
    ECS agent is running on container instance startup.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化日志：位于`/var/log/ecs/ecs-init.log`，这些日志提供与`ecs-init`服务相关的输出，这是一个Upstart服务，确保ECS代理在容器实例启动时运行。
- en: 'Agent logs: Located at `/var/log/ecs/ecs-agent.log.*`, these logs provide output
    related to ECS agent operation. These logs are the most common logs you will inspect
    for any ECS agent related issues.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理日志：位于`/var/log/ecs/ecs-agent.log.*`，这些日志提供与ECS代理操作相关的输出。这些日志是您检查任何与ECS代理相关问题的最常见日志。
- en: Creating an ECS task definition
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ECS任务定义
- en: Now that you have set up your ECS cluster and understand how ECS container instances
    register with the cluster, it's time to configure an ECS task definition, which
    defines the configuration of the containers you want to deploy for your application.
    ECS task definitions can define one or more containers, along with other elements,
    such as volumes, that your containers may need to read or write to.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经设置了ECS集群并了解了ECS容器实例如何注册到集群，现在是时候配置ECS任务定义了，该定义定义了您要为应用程序部署的容器的配置。ECS任务定义可以定义一个或多个容器，以及其他元素，例如容器可能需要读取或写入的卷。
- en: To keep things simple, we are going to create a very basic task definition that
    will run the official Nginx Docker image, which is published at [https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/).
    Nginx is a popular web server, which by default will serve a Welcome to Nginx
    page, and for now this will suffice to represent a simple web application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化问题，我们将创建一个非常基本的任务定义，该任务将运行官方的Nginx Docker镜像，该镜像发布在[https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/)。Nginx是一个流行的Web服务器，默认情况下将提供欢迎页面，现在这足以代表一个简单的Web应用程序。
- en: 'Let''s now create an ECS task definition for our simple web application by
    performing the following steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过执行以下步骤为我们的简单Web应用程序创建一个ECS任务定义：
- en: Navigate to the ECS console at **Services** | **Elastic Container Service**.
    You can create a new task definition by selecting **Task Definitions** from the
    left-hand menu and clicking the **Create new Task Definition** button.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ECS控制台上导航到**服务** | **弹性容器服务**。您可以通过从左侧菜单中选择**任务定义**并单击**创建新任务定义**按钮来创建一个新的任务定义。
- en: In the **Select launch type compatibility** screen, select the **EC2 launch
    type**, which will configure the task definition to be launched on ECS clusters
    based upon the infrastructure that you own and manage.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择启动类型兼容性**屏幕上，选择**EC2启动类型**，这将配置任务定义在基于您拥有和管理的基础设施上启动ECS集群。
- en: In the **Configure task and container definitions** screen, configure a **Task
    Definition Name** of **simple-web** and then scroll down and click **Add container**
    to add a new container definition.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置任务和容器定义**屏幕上，配置**任务定义名称**为**simple-web**，然后向下滚动并单击**添加容器**以添加新的容器定义。
- en: 'In the **Add container** screen, configure the following settings and once
    complete click the **Add button** to create the container definition. This container
    definition will map port 80 on ECS container hosts to port `80` in the container,
    allowing access to the Nginx web server from the outside world:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加容器**屏幕上，配置以下设置，完成后单击**添加按钮**以创建容器定义。此容器定义将在ECS容器主机上将端口80映射到容器中的端口`80`，允许从外部世界访问Nginx
    Web服务器：
- en: '**Container name**: nginx'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器名称**：nginx'
- en: '**Image**: nginx'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像**：nginx'
- en: '**Memory Limits**: `250` MB Hard limit'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存限制**：`250` MB硬限制'
- en: '**Port mappings**: Host port `80`, Container port `80`, Protocol tcp:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口映射**：主机端口`80`，容器端口`80`，协议tcp：'
- en: '![](assets/0b9e9538-9656-4d04-a83d-a988536410bf.png)Creating a Container Definition'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0b9e9538-9656-4d04-a83d-a988536410bf.png)创建容器定义'
- en: Complete creation of the task definition by clicking the **Create** button at
    the bottom of the **Configure task and container definitions** page.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击**配置任务和容器定义**页面底部的**创建**按钮完成任务定义的创建。
- en: Creating an ECS service
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ECS服务
- en: We have created an ECS cluster and configured an ECS task definition that includes
    a single container running Nginx with an appropriate port mapping configuration
    to expose the Nginx web server to the outside world.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个ECS集群，并配置了一个ECS任务定义，其中包括一个运行Nginx的单个容器，具有适当的端口映射配置，以将Nginx Web服务器暴露给外部世界。
- en: We now need to define an ECS service, which will configure ECS to deploy one
    or more instances of our ECS task definition to our ECS cluster. ECS services
    deploy a given ECS task definition to a given ECS cluster, allowing you to configure
    how many instances (ECS tasks) of the referenced ECS task definition you would
    like to run, and controlling more advanced features, such as load balancer integration
    and rolling updates of your application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要定义一个ECS服务，这将配置ECS以部署一个或多个实例到我们的ECS集群。ECS服务将给定的ECS任务定义部署到给定的ECS集群，允许您配置要运行多少个实例（ECS任务）的引用ECS任务定义，并控制更高级的功能，如负载均衡器集成和应用程序的滚动更新。
- en: 'To create a new ECS service, complete the following steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的ECS服务，请完成以下步骤：
- en: 'In the ECS console, select Clusters from the left and click on the **test-cluster**
    you created earlier in this chapter:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ECS控制台上，从左侧选择集群，然后单击您在本章前面创建的**test-cluster**：
- en: '![](assets/ee85b80b-d440-4a73-bbd4-fa331767d863.png)Selecting an ECS Cluster
    to Create an ECS Service'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ee85b80b-d440-4a73-bbd4-fa331767d863.png)选择要创建ECS服务的ECS集群'
- en: In the Cluster details page, select the **Services** tab and click on **Create**
    to create a new service.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在集群详细信息页面，选择**服务**选项卡，然后点击**创建**来创建一个新服务。
- en: 'On the Configure service screen, configure the following settings and once
    complete click the **Next** **step** button. Notice that we reference both the
    task definition and ECS cluster we created earlier in this chapter:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置服务屏幕上，配置以下设置，完成后点击**下一步**按钮。请注意，我们在本章前面创建的任务定义和ECS集群都有所提及：
- en: '**Launch type**: EC2'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动类型**：EC2'
- en: '**Task Definition**: simple-web:1'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务定义**：simple-web:1'
- en: '**Cluster**: test-cluster'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群**：test-cluster'
- en: '**Service name**: simple-web'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务名称**：simple-web'
- en: '**Number of tasks**: 1'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务数量**：1'
- en: The remainder of the ECS service configuration settings are optional. Keep on
    clicking **Next step** until you reach the **Review** screen, where you can review
    your settings and click **Create Service** to complete creation of the ECS service.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ECS服务配置设置的其余部分是可选的。继续点击**下一步**，直到到达**审阅**屏幕，在那里您可以审阅您的设置并点击**创建服务**来完成ECS服务的创建。
- en: The **Launch Status** screen will now appear and once your service has been
    created, click on the **View Service** button.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动状态**屏幕现在将出现，一旦您的服务已创建，点击**查看服务**按钮。'
- en: 'The Service details screen will now appear for your new ECS service, and you
    should see a single ECS task in a RUNNING state, meaning the Nginx container associated
    with the simple-web ECS task definition was successfully launched:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务详细信息屏幕现在将出现在您的新ECS服务中，您应该看到一个处于运行状态的单个ECS任务，这意味着与simple-web ECS任务定义相关联的Nginx容器已成功启动：
- en: '![](assets/7ff62653-1a1e-4dc7-9f44-848fcebca51c.png)Completing Creation of
    a New ECS Service'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7ff62653-1a1e-4dc7-9f44-848fcebca51c.png)完成新ECS服务的创建'
- en: 'At this stage, you should now be able to browse to your newly deployed Nginx
    web server, which you can verify by browsing to the public IP address of the ECS
    container instance you created earlier as part of your ECS cluster. If everything
    is working as expected, you should be presented with the default **Welcome to
    nginx** page, as shown in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您现在应该能够浏览到您新部署的Nginx Web服务器，您可以通过浏览到您之前作为ECS集群的一部分创建的ECS容器实例的公共IP地址来验证。如果一切正常，您应该会看到默认的**欢迎使用nginx**页面，如下截图所示：
- en: '![](assets/7863bcb9-dbb8-42c2-8481-c43e191fa316.png)Browsing to the Nginx Web
    Server'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7863bcb9-dbb8-42c2-8481-c43e191fa316.png)浏览到Nginx Web服务器'
- en: Deploying ECS services
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署ECS服务
- en: Now that you have successfully created an ECS service, let's examine how ECS
    manages new deployments of container applications. It is important to understand
    that ECS task definitions are immutable—that is, you cannot modify a task definition
    once it has been created, and instead you need to either create a completely new
    task definition or create a *revision* of your current task definition, which
    you can think of as a new version of a given task definition.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已成功创建了一个ECS服务，让我们来看看ECS如何管理容器应用的新部署。重要的是要理解，ECS任务定义是不可变的—也就是说，一旦创建了任务定义，就不能修改任务定义，而是需要创建一个全新的任务定义或创建当前任务定义的*修订版*，您可以将其视为给定任务定义的新版本。
- en: ECS defines the logical name of an ECS task definition as the *family*, and
    a given revision of an ECS task definition is expressed in the form *family*:*revision—*for
    example, `my-task-definition:3` refers to revision 3 from the *my-task-definition*
    family.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ECS将ECS任务定义的逻辑名称定义为*family*，ECS任务定义的给定修订版以*family*:*revision*的形式表示—例如，`my-task-definition:3`指的是*my-task-definition*家族的第3个修订版。
- en: 'This means that in order to deploy a new version of a container application,
    you need to perform a couple of steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着为了部署一个容器应用的新版本，您需要执行一些步骤：
- en: Create a new revision of your ECS task definition with configuration settings
    that have been changed for the new version of your application. This often will
    just be the image tag associated with the Docker images you build for your applications,
    however any configuration change, such as a change in allocated memory or CPU
    resource, will result in a new revision of your ECS task definition being created.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的ECS任务定义修订，其中包含已更改为应用程序新版本的配置设置。这通常只是您为应用程序构建的Docker镜像关联的图像标签，但是任何配置更改，比如分配的内存或CPU资源的更改，都将导致创建ECS任务定义的新修订。
- en: Update your ECS service to use the new revision of the ECS task definition.
    Whenever you update an ECS service in this manner, ECS will automatically perform
    a rolling update of your application, attempting to gracefully replace each running
    container that comprises your ECS service with new containers based on the new
    ECS task definition revision.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新您的ECS服务以使用ECS任务定义的新修订版。每当以这种方式更新ECS服务时，ECS将自动执行应用程序的滚动更新，试图优雅地用基于新ECS任务定义修订的新容器替换组成ECS服务的每个运行容器。
- en: 'To demonstrate this behavior, let''s now modify the ECS task definition you
    created earlier in this chapter and update the ECS service by performing the following
    steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这种行为，现在让我们修改本章前面创建的ECS任务定义，并通过以下步骤更新ECS服务：
- en: In the ECS console, select **Task Definitions** from the left and click on the
    **simple-web** task definition you created earlier.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ECS控制台中，从左侧选择任务定义，然后点击您之前创建的simple-web任务定义。
- en: Notice that a single revision of the task definition currently exists—the revision
    number is denoted after the colon following the task definition name. For example,
    **simple-web:1** refers to revision 1 of a simple-web task definition. Select
    the current task definition revision, and then click **Create new revision** to
    create a new revision based on the existing task definition revision.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，当前任务定义修订只有一个存在——在任务定义名称后的冒号后面标明修订号。例如，simple-web:1指的是simple-web任务定义的修订1。选择当前任务定义修订，然后点击创建新修订以基于现有任务定义修订创建新的修订。
- en: The **Create new revision of Task Definition** screen is displayed, which is
    very similar to the **Create new Task Definition** screen you configured earlier.
    Scroll down to the **Container Definitions** section and click on the Nginx container
    to modify the Nginx container definition.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的任务定义修订屏幕显示出来，这与您之前配置的创建新任务定义屏幕非常相似。滚动到容器定义部分，点击Nginx容器以修改Nginx容器定义。
- en: The change we will make to the task definition is to modify the port mapping
    from the current static host mapping of port 80 to a dynamic port mapping on the
    host. This can be achieved by simply leaving the host port setting empty, in which
    case the Docker Engine will assign a dynamic port from the ephemeral port range
    on underlying ECS container instances. For the Amazon Linux AMI we are using,
    this port range is between `32768` and `60999`. The benefit of dynamic port mapping
    is that we can run multiple instances of our container on the same host—if the
    static port mapping was in place, only one container could be launched, as subsequent
    containers would attempt to bind to the already-in-use port `80`. Once you have
    completed the configuration change, click on the **Update** button to continue.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将对任务定义进行的更改是修改端口映射，从当前端口80的静态主机映射到主机上的动态端口映射。这可以通过简单地将主机端口设置为空来实现，在这种情况下，Docker引擎将从基础ECS容器实例上的临时端口范围中分配动态端口。对于我们使用的Amazon
    Linux AMI，此端口范围介于`32768`和`60999`之间。动态端口映射的好处是我们可以在同一主机上运行多个容器实例 - 如果静态端口映射已经存在，只能启动一个容器实例，因为随后的容器实例将尝试绑定到已使用的端口`80`。完成配置更改后，点击**更新**按钮继续。
- en: Click the Create button at the bottom of the **Create new revision of Task Definition**
    screen to complete creation of the new revision.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建新的任务定义版本**屏幕的底部点击**创建**按钮，完成新版本的创建。
- en: To obtain the ephemeral port range used by Docker, you can inspect the contents
    of the `/proc/sys/net/ipv4/ip_local_port_range` file. If this file is not available
    on your operating system, Docker will use the port range of `49153` through `65535`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取Docker使用的临时端口范围，您可以检查`/proc/sys/net/ipv4/ip_local_port_range`文件的内容。如果您的操作系统上没有此文件，Docker将使用`49153`到`65535`的端口范围。
- en: 'At this point, a new revision (revision 2) has been created from your ECS task
    definition. Now you need to update your ECS service to use the new task definition
    revision by completing the following steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，已从您的ECS任务定义创建了一个新版本（版本2）。现在，您需要通过完成以下步骤来更新您的ECS服务以使用新的任务定义版本。
- en: In the ECS console, select **Clusters** from the left and select your test-cluster.
    On the Services tab, select the checkbox next to your ECS service and click the
    **Update** button.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ECS控制台中，从左侧选择**集群**，选择您的测试集群。在服务选项卡上，选择您的ECS服务旁边的复选框，然后点击**更新**按钮。
- en: 'In the Task Definition drop-down on the Configure service screen, you should
    be able to select the new revision (simple-web:2) of the task definition you just
    created. Once complete, keep on clicking the **Next step** button until you reach
    the Review screen, at which point you can click the **Update Service** button
    to complete your configuration changes:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置服务屏幕上的任务定义下拉菜单中，您应该能够选择您刚刚创建的任务定义的新版本（simple-web:2）。完成后，继续点击**下一步**按钮，直到到达审阅屏幕，在这时您可以点击**更新服务**按钮完成配置更改：
- en: '![](assets/2aa14d89-5a38-4204-b619-236a6a61a153.png)Modifying ECS Service Task
    Definition'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2aa14d89-5a38-4204-b619-236a6a61a153.png)修改ECS服务任务定义'
- en: 'Similar to what you saw previously when you created your ECS service, the Launch
    Status screen will be displayed. If you click on the **View Service** button,
    you will be taken to the ECS service details screen, and if you select the Deployments
    tab, you should see the new version of your task definition being deployed:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与您创建ECS服务时之前看到的类似，启动状态屏幕将显示。如果您点击**查看服务**按钮，您将进入ECS服务详细信息屏幕，如果选择部署选项卡，您应该看到正在部署的任务定义的新版本：
- en: '![](assets/6fe12f0d-5fdd-48bd-8677-ed4aa6755052.png)ECS Service Deployment'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6fe12f0d-5fdd-48bd-8677-ed4aa6755052.png)ECS服务部署'
- en: Notice that there are two deployments—the ACTIVE deployment shows the existing
    ECS service deployment, and indicates there is currently a single running container.
    The PRIMARY deployment shows the new ECS service deployment based on the new revision,
    and indicates a desired count of 1 but notice the running count is not yet 1.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有两个部署——活动部署显示现有的ECS服务部署，并指示当前有一个正在运行的容器。主要部署显示基于新修订的新ECS服务部署，并指示期望计数为1，但请注意运行计数尚未为1。
- en: 'If you periodically refresh the deploy status, you will be able to observe
    the various state changes as the new task definition revision is deployed:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您定期刷新部署状态，您将能够观察到新任务定义修订版部署时的各种状态变化：
- en: The deployment changes will be performed reasonably quickly, so if you don't
    see any of these changes, you can always update the ECS service to use the first
    revision of the ECS task definition to force a new deployment.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 部署更改将会相当快速地进行，所以如果您没有看到任何这些更改，您可以随时更新ECS服务，以使用ECS任务定义的第一个修订版本来强制进行新的部署。
- en: The PRIMARY deployment should indicate a pending count of 1, meaning the new
    version of the container is about to start.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要部署应该指示挂起计数为1，这意味着新版本的容器即将启动。
- en: '![](assets/7686c6f8-bd4d-4904-bf65-0fd0382085d4.png)New Deployment Pending
    Transition'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7686c6f8-bd4d-4904-bf65-0fd0382085d4.png)新部署待转换'
- en: 'The PRIMARY deployment will next transition to a running count of 1, meaning
    the new version of the container is running alongside the existing container:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要部署接下来将转换为运行计数为1，这意味着新版本的容器正在与现有容器一起运行：
- en: '![](assets/74aa02ea-9b46-46cb-8854-3b7b1a8ffecd.png)New Deployment Running
    Transition'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/74aa02ea-9b46-46cb-8854-3b7b1a8ffecd.png)新部署运行转换'
- en: 'At this point, the existing container can now be stopped, so you should see
    the ACTIVE deployment running count drop to zero:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，现有容器现在可以停止，所以您应该看到活动部署的运行计数下降到零：
- en: '![](assets/619fe851-38df-4e92-bde6-6371ee013880.png)Old Deployment Stopping
    Transition'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/619fe851-38df-4e92-bde6-6371ee013880.png)旧部署停止转换'
- en: 'The ACTIVE deployment disappears from the Deployments tab and the rolling deployment
    is complete:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活动部署从部署选项卡中消失，滚动部署已完成：
- en: '![](assets/3750bf97-f2c1-4d44-a110-f3952a961157.png)Rolling Deployment Completion'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3750bf97-f2c1-4d44-a110-f3952a961157.png)滚动部署完成'
- en: At this point, we have successfully performed a rolling update of an ECS service,
    and it is worthwhile to point out that the new dynamic port-mapping configuration
    means that your Nginx web server is no longer listening on port 80 to the outside
    world, and instead is listening on a port dynamically chosen by the ECS container
    instance.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已成功执行了ECS服务的滚动更新，值得指出的是，新的动态端口映射配置意味着您的Nginx Web服务器不再在端口80上对外界进行监听，而是在ECS容器实例动态选择的端口上进行监听。
- en: You can verify this by attempting to browse to your Nginx web server public
    IP address—this should result in a connection failure as the web server is no
    longer operational on port 80\. If you select the **Tasks** tab for the **simple-web**
    ECS service, you can click on the task to find out which port our web server is
    now listening on.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过尝试浏览到您的Nginx Web服务器的公共IP地址来验证这一点——这应该会导致连接失败，因为Web服务器不再在端口80上运行。如果您选择**Tasks**选项卡，找到**simple-web**
    ECS服务，您可以点击任务，找出我们的Web服务器现在正在监听的端口。
- en: After expanding the Nginx container which is shown as follows, you can see that
    in this case port `32775` on the ECS container instance host is mapped to port
    `80` on the Nginx container, which you won't be able to reach from the Internet,
    given the security group assigned to the ECS container instance only permits inbound
    access on port `80`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展Nginx容器后，您可以看到在这种情况下，ECS容器实例主机上的端口`32775`映射到Nginx容器上的端口`80`，但由于ECS容器实例分配的安全组仅允许在端口`80`上进行入站访问，因此您无法从互联网访问该端口。
- en: For dynamic port mapping to be useful, you need to associate your ECS services
    with an application load balancer, which will automatically detect the dynamic
    port mapping of each ECS service instance and load balance incoming requests to
    a static port defined on the load balancer to each ECS service instance. You will
    learn more about this in later chapters.![](assets/c27fd937-e1b2-4a91-8300-c174222ad400.png)ECS
    Service Dynamic Port Mapping
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使动态端口映射有用，您需要将您的ECS服务与应用程序负载均衡器相关联，负载均衡器将自动检测每个ECS服务实例的动态端口映射，并将传入的请求负载均衡到负载均衡器上定义的静态端口到每个ECS服务实例。您将在后面的章节中了解更多相关内容。![](assets/c27fd937-e1b2-4a91-8300-c174222ad400.png)ECS服务动态端口映射
- en: Running ECS tasks
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行ECS任务
- en: We've seen how we can deploy long-running applications as ECS services, but
    how do we run ad-hoc tasks or short-lived containers using ECS? The answer of
    course is to create an ECS task, which typically are used to run ad-hoc tasks,
    such as running a deployment script, performing database migrations, or perhaps
    performing scheduled batch processing.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何将长时间运行的应用程序部署为ECS服务，但是如何使用ECS运行临时任务或短暂的容器呢？答案当然是创建一个ECS任务，通常用于运行临时任务，例如运行部署脚本，执行数据库迁移，或者执行定期批处理。
- en: 'Although ECS services are essentially long-running ECS tasks, ECS does treat
    ECS tasks that you create yourself quite differently from ECS services, as described
    in the following table:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管ECS服务本质上是长时间运行的ECS任务，但ECS确实会对您自己创建的ECS任务与ECS服务进行不同的处理，如下表所述：
- en: '| Scenario/feature | ECS service behavior | ECS task behavior |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 场景/特性 | ECS服务行为 | ECS任务行为 |'
- en: '| Container is stopped or fails | ECS will always attempt to maintain the desired
    count of a given ECS service, and will attempt to restart a container if the active
    count falls below the desired count due to a container being stopped or failing.
    | ECS tasks are one-shot executions that are either success or fail. ECS will
    never attempt to re-run a failed ECS task. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 容器停止或失败 | ECS将始终尝试维护给定ECS服务的期望计数，并将尝试重新启动容器，如果活动计数由于容器停止或失败而低于期望计数。 | ECS任务是一次性执行，要么成功，要么失败。ECS永远不会尝试重新运行失败的ECS任务。
    |'
- en: '| Task definition configuration | You cannot override any of the ECS task definition
    configuration for a given ECS service. | ECS tasks allow you to override environment
    variables and command-line settings, allow you to leverage a single ECS task definition
    for a variety of different types of ECS tasks. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 任务定义配置 | 您无法覆盖给定ECS服务的任何ECS任务定义配置。 | ECS任务允许您覆盖环境变量和命令行设置，允许您利用单个ECS任务定义来运行各种不同类型的ECS任务。
    |'
- en: '| Load balancer integration | ECS services feature full integration with the
    AWS Elastic Load Balancing service. | ECS tasks offer no integration with any
    load balancing services. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 负载均衡器集成 | ECS服务具有与AWS弹性负载均衡服务的完全集成。 | ECS任务不与任何负载均衡服务集成。 |'
- en: ECS Services vs ECS Tasks
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: ECS服务与ECS任务
- en: Let's now see how you run ECS tasks using the AWS console. You will create a
    very simple ECS task that runs the `sleep 300` command from the Nginx image defined
    in your ECS tasks definition.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看如何使用AWS控制台运行ECS任务。您将创建一个非常简单的ECS任务，该任务将在ECS任务定义中定义的Nginx镜像中运行`sleep 300`命令。
- en: 'This will cause the task to sleep for five minutes before executing, simulating
    a short-lived ad-hoc task:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致任务在执行之前休眠五分钟，模拟短暂的临时任务：
- en: In the ECS console, select **Clusters** on the left and click on your cluster
    named **test-cluster**.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ECS控制台上，选择左侧的**集群**，然后单击名为**test-cluster**的集群。
- en: 'Select the **Tasks** tab and click on the **Run new Task** button to create
    a new ECS task:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**任务**选项卡，单击**运行新任务**按钮以创建新的ECS任务：
- en: '![](assets/c57d3acc-a14a-4571-b3a6-158461398793.png)Running an ECS Task'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c57d3acc-a14a-4571-b3a6-158461398793.png)运行ECS任务'
- en: 'In the **Run Task** screen, first select **EC2** as the **Launch type** and
    ensure that the **Task Definition** and **Cluster** settings are configured correctly.
    If you expand the **Advanced Options** section, notice that you can specify container
    overrides for the **nginx** container. Note that to configure a command override,
    you must supply the command you want to run along with any arguments in a comma
    separated format—for example, to execute the `sleep 300` command, you must configure
    a command override of **sleep,300**. Once configuration is complete, click on
    **Run Task** to execute your new ECS task:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**运行任务**屏幕上，首先选择**EC2**作为**启动类型**，并确保**任务定义**和**集群**设置正确配置。如果您展开**高级选项**部分，注意您可以为**nginx**容器指定容器覆盖。请注意，要配置命令覆盖，您必须以逗号分隔的格式提供要运行的命令及其任何参数，例如，要执行`sleep
    300`命令，您必须配置**sleep,300**的命令覆盖。配置完成后，单击**运行任务**以执行新的ECS任务：
- en: '![](assets/689373b4-dae0-49a9-9677-97bf10311b1a.png)Configuring an ECS Task'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/689373b4-dae0-49a9-9677-97bf10311b1a.png)配置ECS任务'
- en: 'At this point, you will be returned to the Tasks tab for the ECS cluster and
    you should see a new task with a state of **PENDING**:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您将返回到ECS集群的任务选项卡，您应该看到一个状态为**挂起**的新任务：
- en: '![](assets/e25ba3d1-4de3-4d2d-a607-16d019c3b943.png)ECS Task in a Pending State'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e25ba3d1-4de3-4d2d-a607-16d019c3b943.png)ECS任务处于挂起状态'
- en: The new task should quickly transition to a status of **RUNNING**, and if we
    left the task to run it would eventually exit after five minutes.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 新任务应该很快转换为**运行**状态，如果我们让任务运行，它最终会在五分钟后退出。
- en: Let's now take this opportunity to observe the behavior of ECS tasks when they
    are stopped. If you select all tasks and click the **Stop** button, you will be
    prompted to confirm you want to stop each task. After confirming you want to stop
    each task, the **Tasks** pane should immediately display no active tasks, and
    after clicking the refresh button a few times, you should see a single task start
    back up. This task was automatically started by ECS, in order to maintain a desired
    count of 1 for the simple-web service.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们利用这个机会观察ECS任务在停止时的行为。如果您选择所有任务并单击**停止**按钮，系统将提示您确认是否要停止每个任务。确认要停止每个任务后，**任务**窗格应立即显示没有活动任务，然后单击刷新按钮几次后，您应该看到一个任务重新启动。这个任务是由ECS自动启动的，以保持simple-web服务的期望计数为1。
- en: Using the ECS CLI
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ECS CLI
- en: In this chapter, we have focused solely on using the AWS console to get started
    with ECS. Another tool that is written and maintained by AWS is called the ECS
    CLI, which allows you to create ECS clusters and deploy ECS tasks and services
    from the command line.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于使用AWS控制台来开始使用ECS。AWS编写和维护的另一个工具称为ECS CLI，它允许您从命令行创建ECS集群并部署ECS任务和服务。
- en: 'The ECS CLI is different from the AWS CLI in a variety of ways, but the main
    differences include:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: ECS CLI与AWS CLI在许多方面不同，但主要区别包括：
- en: The ECS CLI is focused on interacting with ECS and only supports interacting
    with other AWS services that provide supporting resources for ECS, such as the
    AWS CloudFormation and EC2 service.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS CLI 专注于与 ECS 交互，并且仅支持与为 ECS 提供支持资源的其他 AWS 服务进行交互，例如 AWS CloudFormation 和
    EC2 服务。
- en: ECS CLI operations are more coarse-grained than AWS CLI operations. For example,
    the ECS CLI will orchestrate creating an ECS cluster and all of its supporting
    resources, much like the behavior of the ECS cluster wizard you used earlier in
    this chapter, whereas the AWS CLI is focused on more fine-grained operations that
    perform a single specific task.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS CLI 操作比 AWS CLI 操作更粗粒度。例如，ECS CLI 将编排创建 ECS 集群及其所有支持资源，就像您在本章前面使用的 ECS 集群向导的行为一样，而
    AWS CLI 则专注于执行单个特定任务的更细粒度操作。
- en: The ECS CLI is written in Golang, whereas the AWS CLI is written in Python.
    This does introduce some behavioral differences—for example, the ECS CLI does
    not support the use of AWS profiles with MFA (multi-factor authentication) enabled,
    meaning you need to use AWS credentials and roles that do not mandate MFA.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS CLI 是用 Golang 编写的，而 AWS CLI 是用 Python 编写的。这确实引入了一些行为差异——例如，ECS CLI 不支持启用了
    MFA（多因素认证）的 AWS 配置文件的使用，这意味着您需要使用不需要 MFA 的 AWS 凭据和角色。
- en: A particularly useful feature of the ECS CLI is that it supports version 1 and
    version 2 of Docker Compose files, meaning you can use Docker Compose to provide
    a generic description of your multi-container environments. The ECS CLI also allows
    you to define your infrastructure using a YAML-based configuration file, and as
    such can be considered a simple and functional infrastructure-as-code tool.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: ECS CLI 的一个特别有用的功能是它支持 Docker Compose 文件的第 1 版和第 2 版，这意味着您可以使用 Docker Compose
    来提供对多容器环境的通用描述。ECS CLI 还允许您使用基于 YAML 的配置文件来定义您的基础设施，因此可以被视为一个简单而功能强大的基础设施即代码工具。
- en: In general, the ECS CLI is useful for quickly standing up sandbox/development
    environments for rapid prototyping or testing. For deploying your formal non-production
    and production environments, you should use tools and services such as Ansible,
    AWS CloudFormation, or Terraform, which provide much broader support for all of
    the AWS resources you will need to run production-grade environments.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，ECS CLI 对于快速搭建沙盒/开发环境以进行快速原型设计或测试非常有用。对于部署正式的非生产和生产环境，您应该使用诸如 Ansible、AWS
    CloudFormation 或 Terraform 等工具和服务，这些工具和服务提供了对您运行生产级环境所需的所有 AWS 资源的更广泛支持。
- en: The ECS CLI includes complete documentation, which you can find at [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html).
    You can also view the ECS CLI source code and raise issues at [https://github.com/aws/amazon-ecs-cli](https://github.com/aws/amazon-ecs-cli).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: ECS CLI 包括完整的文档，您可以在 [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)
    找到。您还可以查看 ECS CLI 源代码并在 [https://github.com/aws/amazon-ecs-cli](https://github.com/aws/amazon-ecs-cli)
    上提出问题。
- en: Deleting the Test Cluster
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除测试集群
- en: 'At this point, you should delete the test cluster you created in this chapter
    by following these steps in the ECS dashboard:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该按照 ECS 仪表板中的以下步骤删除本章中创建的测试集群：
- en: Select the test-cluster from Clusters
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从集群中选择测试集群
- en: Select and update the simple-web ECS service to have a desired count of 0
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并更新 simple-web ECS 服务，使其期望计数为 0
- en: Wait until the simple-web ECS task count falls to 0
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待直到 simple-web ECS 任务计数下降到 0
- en: Select the test-cluster and then click the Delete Cluster button
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择测试集群，然后单击删除集群按钮
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the ECS architecture and learned about
    the core components that make up ECS. You learned how ECS clusters are a collection
    of ECS container instances, which run the Docker Engine atop EC2 autoscaling group
    instances. AWS provide you with a pre-built ECS-optimized AMI, making it very
    easy to get up and running quickly with ECS. Each ECS container instance includes
    an ECS agent, which runs as a system container and communicates with ECS, providing
    the management and control plane required to start, stop, and deploy your containers.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了ECS架构，并了解了构成ECS的核心组件。您了解到ECS集群是一组ECS容器实例，这些实例在EC2自动扩展组实例上运行Docker引擎。AWS为您提供了预构建的ECS优化AMI，使得使用ECS能够快速启动和运行。每个ECS容器实例包括一个作为系统容器运行并与ECS通信的ECS代理，提供启动、停止和部署容器所需的管理和控制平面。
- en: You next created an ECS task definition, which defines a collection of one or
    more container and volume definitions, including information such as container
    image, environment variables, and CPU/memory resource allocations. With your ECS
    cluster and ECS task definition in place, you were then able to create and configure
    an ECS service, referencing the ECS task definition to define the container configuration
    for the ECS service, and targeting one or more instances of your ECS service to
    your ECS cluster.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您创建了一个ECS任务定义，该定义定义了一个或多个容器和卷定义的集合，包括容器映像、环境变量和CPU/内存资源分配等信息。有了您的ECS集群和ECS任务定义，您随后能够创建和配置一个ECS服务，引用ECS任务定义来定义ECS服务的容器配置，并将一个或多个实例的ECS服务定位到您的ECS集群。
- en: ECS supports rolling deployments for updates to your container applications,
    and you were able to successfully deploy a new application change by simply creating
    a new revision of your ECS task definition and then associating the definition
    with your ECS service.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: ECS支持滚动部署以更新容器应用程序，您可以通过简单地创建ECS任务定义的新版本，然后将定义与ECS服务关联来成功部署新的应用程序更改。
- en: Finally, you learned how to use the ECS CLI to simplify the creation of ECS
    clusters and services, using Docker Compose as a generic mechanism to define task
    definitions and ECS services.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您学会了如何使用ECS CLI简化创建ECS集群和服务，使用Docker Compose作为通用机制来定义任务定义和ECS服务。
- en: In the next chapter, you will take a closer look at the Elastic Container Registry
    (ECR) service, where you will learn how to create your own private ECR repositories
    and publish your Docker images to these repositories.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将更仔细地了解弹性容器注册表（ECR）服务，您将学习如何创建自己的私有ECR存储库，并将您的Docker映像发布到这些存储库。
- en: Questions
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name three ECS components required to run a long running Docker container using
    ECS
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出三个在使用ECS运行长时间运行的Docker容器所需的ECS组件
- en: 'True/false: The ECS agent runs as an upstart service'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：ECS代理作为upstart服务运行
- en: What configuration file format do you use to define infrastructure when using
    the ECS CLI?
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用ECS CLI时，您使用什么配置文件格式来定义基础架构？
- en: 'True/false: You can deploy two instances of an ECS task with a static port
    mapping to a single instance ECS cluster'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：您可以将两个实例的ECS任务部署到单个实例ECS集群并进行静态端口映射
- en: 'True/false: The ECS CLI is considered the best tool for deploying Docker environments
    to production'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：ECS CLI被认为是将Docker环境部署到生产环境的最佳工具
- en: What would you configure when using ECS to run a batch job that runs for 15
    minutes every night?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ECS运行每晚运行15分钟的批处理作业时，您将配置什么？
- en: 'True/false: ECS task definitions are mutable and can be modified'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：ECS任务定义是可变的，可以修改
- en: 'True/false: You can inspect the current status of an agent on a given Docker
    Engine by running the `curl localhost:51678` command'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：您可以通过运行`curl localhost:51678`命令来检查给定Docker Engine上代理的当前状态
- en: Further information
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check the following links for more information about the topics covered
    in this chapter:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接以获取有关本章涵盖的主题的更多信息：
- en: 'ECS Developer Guide: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS开发人员指南：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)
- en: 'Amazon ECS-Optimized AMI: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon ECS-Optimized AMI：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
- en: 'Permissions required for ECS container instances: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS容器实例所需的权限：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html)
- en: 'ECS agent documentation: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_agent.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_agent.html)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS代理文档：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_agent.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_agent.html)
- en: 'Using the ECS CLI: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ECS CLI：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)
- en: 'ECS agent GitHub repository: [https://github.com/aws/amazon-ecs-agent](https://github.com/aws/amazon-ecs-agent)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS代理GitHub存储库：[https://github.com/aws/amazon-ecs-agent](https://github.com/aws/amazon-ecs-agent)
- en: 'ECS init GitHub repository: [https://github.com/aws/amazon-ecs-init](https://github.com/aws/amazon-ecs-init)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS init GitHub存储库：[https://github.com/aws/amazon-ecs-init](https://github.com/aws/amazon-ecs-init)
- en: 'ECS CLI GitHub repository: [https://github.com/aws/amazon-ecs-cli](https://github.com/aws/amazon-ecs-cli)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS CLI GitHub存储库：[https://github.com/aws/amazon-ecs-cli](https://github.com/aws/amazon-ecs-cli)
