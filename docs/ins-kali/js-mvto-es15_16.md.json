["```js\ninterface Ship{\n  SetRudderAngleTo(angle: number);\n  SetSailConfiguration(configuration: SailConfiguration);\n  SetSailAngle(sailId: number, sailAngle: number);\n  GetCurrentBearing(): number;\n  GetCurrentSpeedEstimate(): number;\n  ShiftCrewWeightTo(weightToShift: number, locationId: number);\n}\n```", "```js\ninterface SimpleShip{\n  TurnLeft();\n  TurnRight();\n  GoForward();\n}\n```", "```js\nlet ShipAdapter = (function () {\n  function ShipAdapter() {\n    this._ship = new Ship();\n  }\n  ShipAdapter.prototype.TurnLeft = function () {\n    this._ship.SetRudderAngleTo(-30);\n    this._ship.SetSailAngle(3, 12);\n  };\n  ShipAdapter.prototype.TurnRight = function () {\n    this._ship.SetRudderAngleTo(30);\n    this._ship.SetSailAngle(5, -9);\n  };\n  ShipAdapter.prototype.GoForward = function () {\n    //do something else to the _ship\n  };\n  return ShipAdapter;\n})();\n```", "```js\nvar ship = new ShipAdapter();\nship.GoForward();\nship.TurnLeft();\n```", "```js\nclass OldGods {\n  prayTo(sacrifice) {\n    console.log(\"We Old Gods hear your prayer\");\n  }\n}\nReligion.OldGods = OldGods;\nclass DrownedGod {\n  prayTo(humanSacrifice) {\n    console.log(\"*BUBBLE* GURGLE\");\n  }\n}\nReligion.DrownedGod = DrownedGod;\nclass SevenGods {\n  prayTo(prayerPurpose) {\n    console.log(\"Sorry there are a lot of us, it gets confusing here. Did you pray for something?\");\n  }\n}\nReligion.SevenGods = SevenGods;\n```", "```js\ninterface God\n{\n  prayTo():void;\n}\n```", "```js\nclass OldGodsAdapter {\n  constructor() {\n    this._oldGods = new OldGods();\n  }\n  prayTo() {\n    let sacrifice = new Sacrifice();\n    this._oldGods.prayTo(sacrifice);\n  }\n}\nReligion.OldGodsAdapter = OldGodsAdapter;\nclass DrownedGodAdapter {\n  constructor() {\n    this._drownedGod = new DrownedGod();\n  }\n  prayTo() {\n    let sacrifice = new HumanSacrifice();\n    this._drownedGod.prayTo(sacrifice);\n  }\n}\nReligion.DrownedGodAdapter = DrownedGodAdapter;\nclass SevenGodsAdapter {\n  constructor() {\n    this.prayerPurposeProvider = new PrayerPurposeProvider();\n    this._sevenGods = new SevenGods();\n  }\n  prayTo() {\n    this._sevenGods.prayTo(this.prayerPurposeProvider.GetPurpose());\n  }\n}\nReligion.SevenGodsAdapter = SevenGodsAdapter;\nclass PrayerPurposeProvider {\n  GetPurpose() { }\n  }\nReligion.PrayerPurposeProvider = PrayerPurposeProvider;\n```", "```js\nlet god1 = new Religion.SevenGodsAdapter();\nlet god2 = new Religion.DrownedGodAdapter();\nlet god3 = new Religion.OldGodsAdapter();\n\nlet gods = [god1, god2, god3];\nfor(let i =0; i<gods.length; i++){\n  gods[i].praryTo();\n}\n```", "```js\nclass SimpleIngredient {\n  constructor(name, calories, ironContent, vitaminCContent) {\n    this.name = name;\n    this.calories = calories;\n    this.ironContent = ironContent;\n    this.vitaminCContent = vitaminCContent;\n  }\n  GetName() {\n    return this.name;\n  }\n  GetCalories() {\n    return this.calories;\n  }\n  GetIronContent() {\n    return this.ironContent;\n  }\n  GetVitaminCContent() {\n    return this.vitaminCContent;\n  }\n}\n```", "```js\nclass CompoundIngredient {\n  constructor(name) {\n    this.name = name;\n    this.ingredients = new Array();\n  }\n  AddIngredient(ingredient) {\n    this.ingredients.push(ingredient);\n  }\n  GetName() {\n    return this.name;\n  }\n  GetCalories() {\n    let total = 0;\n    for (let i = 0; i < this.ingredients.length; i++) {\n      total += this.ingredients[i].GetCalories();\n    }\n    return total;\n  }\n  GetIronContent() {\n    let total = 0;\n    for (let i = 0; i < this.ingredients.length; i++) {\n      total += this.ingredients[i].GetIronContent();\n    }\n    return total;\n  }\n  GetVitaminCContent() {\u2029    let total = 0;\n    for (let i = 0; i < this.ingredients.length; i++) {\n      total += this.ingredients[i].GetVitaminCContent();\n    }\n    return total;\n  }\n}\n```", "```js\nlet egg = new SimpleIngredient(\"Egg\", 155, 6, 0);\nlet milk = new SimpleIngredient(\"Milk\", 42, 0, 0);\nlet sugar = new SimpleIngredient(\"Sugar\", 387, 0,0);\nlet rice = new SimpleIngredient(\"Rice\", 370, 8, 0);\n\nlet ricePudding = new CompoundIngredient(\"Rice Pudding\");\nricePudding.AddIngredient(egg);\nricePudding.AddIngredient(rice);\nricePudding.AddIngredient(milk);\nricePudding.AddIngredient(sugar);\n\nconsole.log(\"A serving of rice pudding contains:\");\nconsole.log(ricePudding.GetCalories() + \" calories\");\n```", "```js\n$(\"a\").hide()\n```", "```js\nclass BasicArmor {\n  CalculateDamageFromHit(hit) {\n    return hit.Strength * .2;\n  }\n  GetArmorIntegrity() {\n    return 1;\n  }\n}\n\nclass ChainMail {\n  constructor(decoratedArmor) {\n    this.decoratedArmor = decoratedArmor;\n  }\n  CalculateDamageFromHit(hit) {\n    hit.Strength = hit.Strength * .8;\n    return this.decoratedArmor.CalculateDamageFromHit(hit);\n  }\n  GetArmorIntegrity() {\n    return .9 * this.decoratedArmor.GetArmorIntegrity();\n  }\n}\n```", "```js\nexport interface IArmor{\n  CalculateDamageFromHit(hit: Hit):number;\n  GetArmorIntegrity():number;\n}\n```", "```js\nlet armor = new ChainMail(new Westeros.Armor.BasicArmor());\nconsole.log(armor.CalculateDamageFromHit({Location: \"head\", Weapon: \"Sock filled with pennies\", Strength: 12}));\n```", "```js\nlet Ship = (function () {\n  function Ship() {\n  }\n  Ship.prototype.TurnLeft = function () {\n  };\n  Ship.prototype.TurnRight = function () {\n  };\n  Ship.prototype.GoForward = function () {\n  };\n  return Ship;\n})();\nTransportation.Ship = Ship;\n\nlet Admiral = (function () {\n  function Admiral() {\n  }\n  return Admiral;\n})();\nTransportation.Admiral = Admiral;\n\nlet SupplyCoordinator = (function () {\n  function SupplyCoordinator() {\n  }\n  return SupplyCoordinator;\n})();\nTransportation.SupplyCoordinator = SupplyCoordinator;\n```", "```js\nlet Fleet = (function () {\n   function Fleet() {\n  }\n  Fleet.prototype.setDestination = function (destination) {\n    //pass commands to a series of ships, admirals and whoever else needs it\n  };\n\n  Fleet.prototype.resupply = function () {\n  };\n\n  Fleet.prototype.attack = function (destination) {\n    //attack a city\n  };\n  return Fleet;\n})();\n```", "```js\n$.ajax({method: \"PUT\",\nurl: \"https://settings.blob.core.windows.net/container/set1\",\ndata: \"setting data 1\"});\n\n$.ajax({method: \"PUT\",\nurl: \"https://settings.blob.core.windows.net/container/set2\",\ndata: \"setting data 2\"});\n\n$.ajax({method: \"PUT\",\nurl: \"https://settings.blob.core.windows.net/container/set3\",\ndata: \"setting data 3\"});\n```", "```js\npublic interface SettingSaver{\n  Save(settings: Settings); //preceding code in this method\n  Retrieve():Settings;\n}\n```", "```js\nlet Soldier = (function () {\n  function Soldier() {\n    this.Health = 10;\n    this.FightingAbility = 5;\n    this.Hunger = 0;\n  }\n  return Soldier;\n})();\n```", "```js\nclass Soldier {\n  constructor() {\n    this.Health = 10;\n    this.FightingAbility = 5;\n    this.Hunger = 0;\n  }\n}\n```", "```js\nlet soldier1 = new Soldier();\nlet soldier2 = new Soldier();\nconsole.log(soldier1.Health); //10\nsoldier1.Health = 7;\nconsole.log(soldier1.Health); //7\nconsole.log(soldier2.Health); //10\ndelete soldier1.Health;\nconsole.log(soldier1.Health); //10\n```", "```js\nclass BarrelCalculator {\n  calculateNumberNeeded(volume) {\n    return Math.ceil(volume / 157);\n  }\n}\n```", "```js\nclass DragonBarrelCalculator {\n  calculateNumberNeeded(volume) {\n    if (this._barrelCalculator == null)\n      this._barrelCalculator = new BarrelCalculator();\n    return this._barrelCalculator.calculateNumberNeeded(volume * .77);\n  }\n}\n```", "```js\nclass PintBarrelCalculator {\n  calculateNumberNeeded(volume) {\n    if (this._barrelCalculator == null)\n      this._barrelCalculator = new BarrelCalculator();\n    return this._barrelCalculator.calculateNumberNeeded(volume * 1.2);\n  }\n}\n```", "```js\nclass PintUnit {\n  constructor(unit, quantity) {\n    this.quanity = quantity;\n  }\n}\n```", "```js\nclass PintBarrelCalculator {\n  calculateNumberNeeded(volume) {\n    if(PintUnit.prototype == Object.getPrototypeOf(volume))\n      //throw some sort of error or compensate\n    if (this._barrelCalculator == null)\n      this._barrelCalculator = new BarrelCalculator();\n    return this._barrelCalculator.calculateNumberNeeded(volume * 1.2);\n  }\n}\n```"]