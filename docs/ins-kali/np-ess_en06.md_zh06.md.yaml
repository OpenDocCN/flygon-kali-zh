- en: Chapter 6. Fourier Analysis in NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：NumPy 中的傅立叶分析
- en: Fourier analysis is commonly used, among other things, for digital signal processing.
    This is thanks to it being so powerful in separating its input signals (time domain)
    into components that contribute at discrete frequencies (frequency domain). Another
    fast algorithm to compute **Discrete Fourier transform** ( **DFT** ) was developed,
    which is well known as  **Fast Fourier transform** ( **FFT** ), and it provides
    more possibilities for analysis and its applications. NumPy, as it targets numeric
    computing, also supports FFT. Let's try to use NumPy to apply some Fourier analysis
    on applications! Note, no familiarity with signal processing or Fourier methods
    is assumed in this chapter.
  prefs: []
  type: TYPE_NORMAL
  zh: 除其他事项外，傅立叶分析通常用于数字信号处理。 这要归功于它在将输入信号（时域）分离为以离散频率（频域）起作用的分量方面如此强大。 开发了另一种快速算法来计算**离散傅里叶变换**（**DFT**），这就是众所周知的**快速傅里叶变换**（**FFT**），它为分析及其应用提供了更多可能性。
    NumPy 针对数字计算，也支持 FFT。 让我们尝试使用 NumPy 在应用上进行一些傅立叶分析！ 注意，本章假定不熟悉信号处理或傅立叶方法。
- en: 'The topics that will be covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及的主题是：
- en: The basics of Fourier analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 傅立叶分析的基础
- en: One and two-dimensional Fourier transformations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一维和二维傅立叶变换
- en: Spectral density estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频谱密度估计
- en: Time frequency analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时频分析
- en: Before we start
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始之前
- en: As we all know, Fourier analysis expresses a function as a sum of periodic components
    (a combination of sine and cosine functions) and these components are able to
    recover the original function. It has great applications in digital signal processing
    such as filtering, interpolation, and more, so we don't want to talk about Fourier
    analysis in NumPy without giving details of any application we can use it for.
    For this, we need a module to visualize it.
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，傅里叶分析将函数表示为周期分量的总和（正弦和余弦函数的组合），并且这些分量能够恢复原始函数。 它在数字信号处理（例如滤波，插值等）中具有广泛的应用，因此我们在不提供
    NumPy 的任何应用细节的情况下就不想谈论 NumPy 中的傅立叶分析。 为此，我们需要一个可视化的模块。
- en: 'Matplotlib is the module we are going to use in this chapter for visualization.
    Please download and install it from the official website: [http://matplotlib.org/downloads.html](http://matplotlib.org/downloads.html)
    . Or if you are using Scientific Python distributions such as Anaconda, then matplotlib
    should already be included.'
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 是我们将在本章中使用的可视化模块。 请从官方网站下载并安装它：[`matplotlib.org/downloads.html`](http://matplotlib.org/downloads.html)。
    或者，如果您正在使用 Anaconda 之类的 Python 科学发行版，则应该已经包括了 Matplotlib。
- en: 'We are going to write a simple display function called `show()` to help us
    with the practice examples in this chapter. The function output will be as shown
    in the following graph:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个名为`show()`的简单显示函数，以帮助我们了解本章中的练习示例。 函数输出如下图所示：
- en: '![Before we start](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![开始之前](img/00017.jpeg)'
- en: 'The upper plot area shows the original functions (signal), and the lower plot
    shows the Fourier transformation. Please type the following code into your IPython
    command prompt or save it to a `.py` file and load it to the prompt:'
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示原始函数（信号），下图显示傅立叶变换。 请在 IPython 命令提示符下键入以下代码，或将其保存到`.py`文件并将其加载到提示符：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is a display function called `show()` , which has two input parameters:
    the first one is the original signal function (`ori_func` ) and the second one
    is its Fourier transform (`ft` ). This method will use the `matplotlib.pyplot`
    module to create two line charts: the original signal at the top with black lines,
    where the  *x* axis represents the time intervals (we set the default signal sampling
    period to be five seconds for our all examples) and the  *y* axis represents the
    amplitude of the signal. The lower part of the chart is its Fourier transform
    with a red line, where the  *x* axis represents the frequency and the  *y* axis
    represents the amplitude spectrum.'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个名为`show()`的显示函数，它具有两个输入参数：第一个是原始信号函数（`ori_func`），第二个是其傅里叶变换（`ft`）。 此方法将使用`matplotlib.pyplot`模块创建两个折线图：顶部带有黑线的原始信号，其中
    *x* 轴表示时间间隔（在我们所有的示例中，我们设置了默认值，信号采样周期为 5 秒）， *y* 轴代表信号的幅度。 图表的下部是带有红线的傅里叶变换，其中
    *x* 轴表示频率， *y* 轴代表振幅频谱。
- en: In the next section, we will simply go through different types of signal waves
    and use the `numpy.fft` module to compute the Fourier transform. Then we call
    the `show()` function to provide a visual comparison between them.
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将简单地介绍不同类型的信号波，并使用`numpy.fft`模块计算傅立叶变换。 然后我们调用`show()`函数以提供它们之间的视觉比较。
- en: Signal processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信号处理
- en: In this section, we are going to use NumPy functions to simulate several signal
    functions and translate them to Fourier transforms. We will focus on using `numpy.fft`
    and its related functions. We hope after this section that you will get some sense
    of using a Fourier transformation in NumPy. The theory part will be covered in
    the next section.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 NumPy 函数来模拟多个信号函数并将其转换为傅立叶变换。 我们将重点介绍`numpy.fft`及其相关函数。 我们希望在本节之后，您将对在
    NumPy 中使用傅立叶变换有所了解。 理论部分将在下一部分中介绍。
- en: 'The first example we are going to use is our heartbeat signal, which is a series
    of sine waves. The frequency is 60 beats per minutes (1 Hz), and our sampling
    period is 5 seconds long, with a sampling interval of 0.005 seconds. Let''s create
    the sine wave first:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要使用的第一个示例是心跳信号，它是一系列正弦波。 频率为每分钟 60 次（1Hz），我们的采样周期为 5 秒长，采样间隔为 0.005 秒。 首先创建正弦波：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this example, we first created the sampling time interval and saved it to
    an`ndarray` called `time` . And we passed the `time` array times 2π and its frequency
    1 Hz to the `numpy.sin()` method to create the sine wave (`x` ). Then applied
    the Fourier transform to `x` and saved it to `y` . Finally, we used our predefined
    method `show()` for visual comparison with the sine wave and its normalized Fourier
    transform, as you can see in the following graph:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们首先创建了采样时间间隔并将其保存到名为`time`的`ndarray`中。 然后，我们将`time`数组乘以`2π`并将其频率设为 1Hz
    传递给`numpy.sin()`方法，以创建正弦波（`x`）。 然后将傅立叶变换应用于`x`并将其保存到`y`。 最后，我们使用预定义的方法`show()`与正弦波及其归一化的傅里叶变换进行视觉比较，如下图所示：
- en: '![Signal processing](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![信号处理](img/00018.jpeg)'
- en: The upper green line represents the heartbeat wave; since we use 1 Hz for 5
    seconds, we obtained 5 continuous sine waves. One thing to note here is that our
    sampling interval is 0.005 seconds, which means we use 200 points (1/0.005) to
    simulate one wave, so it looks relatively smooth. If we increase our sampling
    interval (reducing the number of points for each wave), we will obtain a more
    intense sine wave. The lower part of the chart is the absolute value of the normalized
    Fourier transform based on the frequencies (the so-called spectrum). We can see
    that there is a high point at 1 Hz, which matches our original wave frequency.
  prefs: []
  type: TYPE_NORMAL
  zh: 上方的绿线代表心跳波； 因为我们使用 1Hz 持续 5 秒钟，所以获得了 5 个连续的正弦波。 这里要注意的一件事是，我们的采样间隔为 0.005 秒，这意味着我们使用
    200 点（`1 / 0.005`）来模拟一个波形，因此它看起来相对平滑。 如果增加采样间隔（减少每个波的点数），我们将获得更强烈的正弦波。 图表的下部是基于频率（所谓的频谱）的标准化傅里叶变换的绝对值。
    我们可以看到在 1Hz 处有一个高点，与我们的原始波频率相匹配。
- en: 'Next, we are going to try computing multi-frequency sine waves to their Fourier
    transforms. After this, we may have a clearer picture of a Fourier transform.
    The following code shows you how to do this:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试计算多频正弦波并对其傅里叶变换进行计算。 在此之后，我们可能对傅立叶变换有了更清晰的了解。 以下代码显示了如何执行此操作：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'First, we created two more sine waves with a different frequency, `x2` with
    a frequency of 20 Hz, and `x3` with 60 Hz, and we added them to the original 1Hz
    sine waves `x` . Then we passed the modified `x` to the Fourier transform and
    plotted the graph using the predefined `show()` . You can see this in the following
    graph:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们再创建两个频率不同的正弦波，频率为 20Hz 的`x2`和 60Hz 的`x3`，然后将它们添加到原始的 1Hz 正弦波`x`中。 然后我们将修改后的`x`传递给傅立叶变换，并使用预定义的`show()`绘制图形。
    您可以在下图中看到它：
- en: '![Signal processing](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![信号处理](img/00019.jpeg)'
- en: In the upper green line chart, we can see that the sine waves are combined with
    different frequencies, but it is really difficult to distinguish them. However,
    after computing the Fourier transform, and converting them to the frequency domain,
    we can see clearly in the lower red line chart that three high points are identified,
    which are 1 Hz, 20 Hz, and 60 Hz. This matches up with our original sine wave's
    frequency.
  prefs: []
  type: TYPE_NORMAL
  zh: 在上方的绿色折线图中，我们可以看到正弦波组合了不同的频率，但实际上很难区分它们。 但是，在计算傅立叶变换并将其转换到频域之后，我们可以在下部的红色折线图中清楚地看到已识别出三个高点，分别是
    1Hz，20Hz 和 60Hz。 这与我们原始的正弦波频率匹配。
- en: 'From these two examples, you must be able to get some sense of the Fourier
    transform. Next we are going to demonstrate three more signal processings: one
    for square signals, one for pulses, and the other for random signals.'
  prefs: []
  type: TYPE_NORMAL
  zh: 从这两个示例中，您必须能够对傅立叶变换有所了解。 接下来，我们将演示另外三种信号处理：一种用于正方形信号，一种用于脉冲，另一种用于随机信号。
- en: 'First we created square wave signals using `numpy.zeros()` with the same time
    intervals (`time` ). We want the square wave frequency to be 10 Hz and the amplitude
    to be 1, so we set every 20^(th) time interval ( *200 / 10* ) to be a value of
    one to simulate the wave and pass it to the Fourier transform, as you can see
    in the following code block:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`numpy.zeros()`以相同的时间间隔（`time`）创建方波信号。 我们希望方波频率为 10Hz，幅度为 1，因此我们将每 20
    个时间间隔（`200/10`）设置为值 1，来模拟波浪并将其传递给傅立叶变换，如下面的代码块所示：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code generates the following graph:'
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码生成以下图形：
- en: '![Signal processing](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![信号处理](img/00020.jpeg)'
- en: From the upper green line chart, we can see 50 continuous square waves in 5
    seconds (10 Hz), but when we computed its Fourier transform we obtained several
    red high points in the spectrum instead of just one at 10 Hz. You may wonder whether
    square waves are also periodic functions, but why is the Fourier transform so
    different from the sine waves? Remember that the Fourier transform converts the
    time domain to the frequency domain but, underneath the hood, there are series
    of sine and cosine functions to decompose the original function. We can still
    see the red high points are regularly spaced, where the space is 10 Hz apart.
  prefs: []
  type: TYPE_NORMAL
  zh: 从上方的绿色折线图中，我们可以在 5 秒（10Hz）中看到 50 个连续的方波，但是当我们计算其傅立叶变换时，我们在频谱中获得了几个红色的高点，而不是
    10Hz 时的一个红色高点。 您可能想知道方波是否也是周期函数，但是傅立叶变换为什么与正弦波有很大不同？ 请记住，傅立叶变换将时域转换为频域，但是在引擎盖下，有一系列正弦和余弦函数可以分解原始函数。
    我们仍然可以看到红色的高点是规则间隔的，间隔为 10Hz。
- en: 'Next, we are going to generate a one-pulse signal, that doesn''t have any frequency,
    and we are going to compute its Fourier transform. Compare this with the previous
    square waves, and you may have a better sense of the Fourier transform:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将生成一个没有任何频率的单脉冲信号，并且将要计算其傅立叶变换。 将其与以前的方波进行比较，您可能会对傅里叶变换有更好的了解：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'First we created an all-zero `ndarray` the same size as the time variable,
    and then we generated the one-pulse signal, which occurred at 2 seconds (the 400^(th)
    element of the `x` array). We occupied 40 elements around 2 seconds to simulate
    the pulse: 20 increasing from 0 to 1, and the other half decreasing from 1 back
    to 0\. We passed the one-pulse signal to the Fourier transform and used `show()`
    for visual comparison.'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们创建一个与时间变量大小相同的全零`ndarray`，然后生成一个单脉冲信号，该信号在 2 秒时发生（`x`数组的第 400 个元素 ）。 我们在
    2 秒左右的时间内占用了 40 个元素来模拟脉冲：20 个元素从 0 增加到 1，另一半从 1 减少到 0。我们将一个脉冲信号传递给傅里叶变换，并使用`show()`进行视觉比较。
- en: The upper green line chart in the following graph is the one-pulse signal we
    simulated, and the lower red line chart is its Fourier transform. We can see the
    highest point in the lower chart occurred in frequency equal to 0, which makes
    perfect sense since our simulated signal didn't have any frequency. But, after
    zero-frequency, we can still see a couple of high points at different frequencies,
    which came from the transformation processes.
  prefs: []
  type: TYPE_NORMAL
  zh: 下图中上部的绿色折线图是我们模拟的一脉冲信号，下部的红色折线图是其傅里叶变换。 我们可以看到下面图表中的最高点出现在等于 0 的频率上，这很有意义，因为我们的模拟信号没有任何频率。
    但是，在零频率之后，我们仍然可以看到来自变换过程的两个不同频率的高点。
- en: '![Signal processing](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![信号处理](img/00021.jpeg)'
- en: 'The last example in this section is random signal processing. As in the previous
    example, we also use 5 seconds as our total sampling period with 100 random signals,
    which doesn''t have any fixed frequency associated with it. And we pass the random
    signals to the Fourier transform to obtain its frequency domain. The code block
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的最后一个示例是随机信号处理。 与前面的示例一样，我们还将 5 秒作为 100 个随机信号的总采样周期，该随机信号没有任何固定的频率与之关联。 然后，我们将随机信号传递给傅立叶变换，以获得其频域。
    代码块如下：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is the graph generated by the code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由代码生成的图形：
- en: '![Signal processing](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![信号处理](img/00022.jpeg)'
- en: After going through these examples, we know how to use the Fourier transform
    in NumPy-simply call `numpy.fft.fft()` -and we gained some sense of what the Fourier
    transform looks like. In the next section, we will focus on the theory part.
  prefs: []
  type: TYPE_NORMAL
  zh: 看完这些示例之后，我们知道如何在 NumPy（简称为`numpy.fft.fft()`）中使用傅立叶变换-并且对傅立叶变换的外观有了一些了解。 在下一节中，我们将重点介绍理论部分。
- en: Fourier analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 傅立叶分析
- en: 'There are many ways to define the DFT; however, in a NumPy implementation,
    the DFT is defined as the following equation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 DFT 的方法很多。 但是，在 NumPy 实现中，DFT 定义为以下公式：
- en: '![Fourier analysis](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶分析](img/00023.jpeg)'
- en: '*A* [*k*] represents the discrete Fourier transform and *a[m]* represents the
    original function. The transformation from *a[m] ->A[k]* is a translation from
    the configuration space to the frequency space. Let''s calculate this equation
    manually to get a better understanding of the transformation process. We will
    use a random signal with 500 values:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`A[k]`代表离散傅里叶变换，`a[m]`代表原始函数。 `a[m] -> A[k]`的转换是从配置空间到频率空间的转换。 让我们手动计算此方程，以更好地了解转换过程。
    我们将使用具有 500 个值的随机信号：'
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this code block, `x` is our simulated random signal, which contain 500 values
    and corresponds to *a[m]* in the equation. Based on the size of `x` , we calculate
    the sum product of:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码块中，`x`是我们的模拟随机信号，其中包含 500 个值，并且在公式中对应于`a[m]`。 根据`x`的大小，我们计算出：
- en: '![Fourier analysis](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶分析](img/00024.jpeg)'
- en: We then save it to `M` . The final step is to use the matrix multiplication
    between `M` and `x` to generate DFT and save it to `y` .
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将其保存到`M`。 最后一步是使用`M`和`x`之间的矩阵乘法来生成 DFT 并将其保存到`y`中。
- en: 'Let''s verify our result by comparing it with the built-in `numpy.fft` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将其与内置`numpy.fft`进行比较来验证结果：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we expected, the manually computed DFT is identical to the NumPy built-in
    module. Of course, `numpy.fft` is just like any other built-in modules in NumPy-it''s
    been optimized and the FFT algorithm has been applied. Let''s compare the performance
    between our manual DFT and `numpy.fft` :'
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所料，手动计算的 DFT 与 NumPy 内置模块相同。 当然，`numpy.fft`就像 NumPy 中的任何其他内置模块一样-已经过优化，并且已应用
    FFT 算法。 让我们比较一下我们的手动 DFT 和`numpy.fft`的性能：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, we put this equation implementation code on one line in order to measure
    the execution time. We can see a huge performance difference between them. Underneath
    the hood, NumPy uses the `FFTPACK` library to perform the Fourier transform, which
    is a very stable library both in performance and accuracy.
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将此方程式实现代码放在一行上，以测量执行时间。 我们可以看到它们之间的巨大性能差异。 在引擎盖下，NumPy 使用`FFTPACK`库执行傅立叶变换，该傅立叶变换在性能和准确性上都是非常稳定的库。
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: If you still feel that `FFTPACK` is not fast enough, there is a `FFTW` library
    that normally performs better than `FFTPACK` , but the speed-up from `FFTPACK`
    to `FFTW` would not be nearly as dramatic.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然觉得`FFTPACK`不够快，通常有一个`FFTW`库的性能要比`FFTPACK`好，但是从`FFTPACK`到`FFTW`的加速将不会那么快。
- en: 'Next, we are going to compute the inverse DFT. The iDFT maps the frequency
    series back to the original time series, which is defined in the following equation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将计算逆 DFT。 iDFT 将频率序列映射回原始时间序列，该序列由以下公式定义：
- en: '![Fourier analysis](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶分析](img/00025.jpeg)'
- en: 'We can see the inverse equation differs from the DFT equation by the sign of
    the exponential argument and the normalization by *1/n* . Let''s do the manual
    calculation again. We can re-use the `m` , `k` , and `n` variables from the previous
    code and just re-compute `M` due to the sign change of the exponential argument:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到反方程与 DFT 方程的不同之处在于指数参数的符号和通过`1 / n`进行归一化。 让我们再次进行手动计算。 由于指数参数的符号更改，我们可以重复使用先前代码中的`m`，`k`和`n`变量，只需重新计算`M`：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Again, let''s verify the computed inverse DFT result `x2` with our original
    random signal `x` . The two `ndarray` should be identical:'
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，让我们用原始随机信号`x`验证计算出的逆 DFT 结果`x2`。 两者`ndarray`应该相同：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Of course, the `numpy.fft` module also support inverse DFT-simply call `numpy.fft.ifft()`
    to perform the computation, as you can see in the following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`numpy.fft`模块还支持逆 DFT 调用`numpy.fft.ifft()`以执行计算，如以下示例所示：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You may notice that, in the previous examples, we always use a one-dimensional
    array as our input signals. Does that mean that `numpy.fft` only handles one-dimensional
    data? Of course not; `numpy.fft` can also process two- or multi-dimensional data.
    Before we get to this part, we'd like to talk about the order of returned FFT
    arrays and a shift method in `numpy.fft` .
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，在前面的示例中，我们始终使用一维数组作为输入信号。 这是否意味着`numpy.fft`仅处理一维数据？ 当然不是; `numpy.fft`也可以处理二维或多维数据。
    在开始这一部分之前，我们想谈谈返回的 FFT 数组的顺序和`numpy.fft`中的`shift`方法。
- en: 'Let''s create a simple signal array with 10 random integers, and compute its
    Fourier transform:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含 10 个随机整数的简单信号数组，并计算其傅里叶变换：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In this example, `a` is our original random signal and `A` is `a` 's Fourier
    transform. When we call `numpy.fft.fft(a)` , the resulting `ndarray` follows the
    "standard" order in which the first value `A[0]` contains the zero-frequency term
    (the mean of the signal). When we do the normalization, which is dividing it by
    the length of the original signal array (`A[0]` / 10), we get the same value as
    when we calculated the mean of the signal array (`a.mean()` ).
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`a`是我们的原始随机信号，`A`是`a`的傅立叶变换。 当我们调用`numpy.fft.fft(a)`时，结果`ndarray`遵循“标准”顺序，其中第一个值`A[0]`包含零频率项（信号的均值）。
    进行归一化处理（将其除以原始信号数组的长度`A[0] / 10`)时，我们得到的值与计算信号数组的平均值（`a.mean()`）时的值相同。
- en: 'Then `A[1:n/2]` contains the positive-frequency terms and `A[n/2 + 1: n]` contains
    the negative-frequency terms. When the inputs are even numbers as in our example, `A[n/2]`
    represents both positive and negative. If you want to shift the zero-frequency
    component to the center of the spectrum, we can use the `numpy.fft.fftshift()`
    routine. See the following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: '然后`A[1:n/2]`包含正频率项，`A[n/2 + 1: n]`包含负频率项。 在我们的示例中，当输入为偶数时，`A[n/2]`代表正数和负数。
    如果要将零频率分量移到频谱中心，可以使用`numpy.fft.fftshift()` 例程。 请参见以下示例：'
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: From this example, you can see that `numpy.fft.fftshift()` swaps half-spaces
    in the array, so the zero-frequency components are shifted to the middle. `numpy.fft.ifftshift`
    is the inverse function, shifting the order back to "standard".
  prefs: []
  type: TYPE_NORMAL
  zh: 从此示例中，您可以看到`numpy.fft.fftshift()`交换了数组中的半空间，因此零频率分量移到了中间。 `numpy.fft.ifftshift`是反函数，将顺序移回“标准”。
- en: 'Now, we are going to talk multi-dimensional DFT; let''s start with two dimensions.
    You may see that the following equation is very similar to a one-dimensional DFT,
    and the second dimension is extended in the obvious way. The idea for multi-dimensional
    DFT is the same, and so does the inverses in higher dimensions. You may also try
    to modify the previous codes to calculate the one-dimensional DFT to two or multi-dimensional
    DFT to better understand the processes. But now we are simply going to demonstrate
    how to use `numpy.fft` for two-dimensional and multi-dimensional Fourier transforms:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要谈谈多维 DFT。 让我们从二维开始。 您可能会看到以下等式与一维 DFT 非常相似，而第二维以明显的方式扩展。 多维 DFT 的思想是相同的，较高维中的逆函数也是如此。
    您也可以尝试修改先前的代码，以将一维 DFT 计算为二维或多维 DFT，以更好地理解过程。 但是，现在我们仅要演示如何将`numpy.fft`用于二维和多维傅里叶变换：
- en: '![Fourier analysis](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶分析](img/00026.jpeg)'
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'From these examples, you can see that we call `numpy.fft.fft2()` for a two-dimensional
    Fourier transform, and `numpy.fft.fftn()` for multi-dimensional. The axes parameter
    is optional; it indicates the axes over which to compute the FFT. For two-dimensional,
    if the axes are not specified, it uses the last two axes; while for multi-dimensional,
    the module uses all the axes. In the previous example, we applied the last two
    axes only, so the Fourier transform result will be identical to the two-dimensional
    one. Let''s check it out:'
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些示例中，您可以看到我们将`numpy.fft.fft2()`用于二维傅立叶变换，将`numpy.fft.fftn()`称为多维。 `axes`参数是可选的；
    它指示要计算 FFT 的轴。 对于二维，如果未指定轴，则使用最后两个轴。 对于多维，模块使用所有轴。 在前面的示例中，我们仅应用了最后两个轴，因此傅立叶变换结果将与二维轴相同。
    让我们来看看：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Fourier transform application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 傅立叶变换应用
- en: In the previous sections, you learned how to use `numpy.fft` for a one and multi-dimensional `ndarray`
    , and saw the implementation details underneath the hood. Now it's time for some
    applications. In this section, we are going to use the Fourier transform to do
    some image processing. We will analyze the spectrum, and then we will interpolate
    the image to enlarge it to twice the size. First, let's download the exercise
    image from the Packt Publishing website blog post:  [https://www.packtpub.com/books/content/python-data-scientists](https://www.packtpub.com/books/content/python-data-scientists)
    . Save the image to your local directory as `scientist.png` .
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，您学习了如何将`numpy.fft`用于一个一维和多维`ndarray`，并在幕后了解了实现细节。 现在是一些应用的时候了。 在本节中，我们将使用傅立叶变换进行一些图像处理。
    我们将分析频谱，然后对图像进行插值以将其放大到两倍大小。 首先，让我们从 Packt Publishing 网站博客文章中下载练习图像：[`www.packtpub.com/books/content/python-data-scientists`](https://www.packtpub.com/books/content/python-data-scientists)。
    将映像另存为本地目录`scientist.png`。
- en: '![Fourier transform application](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶变换的应用](img/00027.jpeg)'
- en: 'This is a RGB image, which means that, when we convert it to an `ndarray` ,
    it will be three-dimensional. To simplify the exercise, we use the image module
    in `matplotlib` to read in the image and convert it to grayscale:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 RGB 图像，这意味着，当我们将其转换为`ndarray`时，它将是三维的。 为了简化练习，我们使用`matplotlib`中的图像模块读取图像并将其转换为灰度：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will get the following image as the result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下图像作为结果：
- en: '![Fourier transform application](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶变换的应用](img/00028.jpeg)'
- en: The pre-processing part is done. We read the image into a three-dimensional
    `ndarray` (`img` ) and applied the luminosity formula to convert the RGB image
    to grayscale using  *0.21R + 0.72G + 0.07B* . We used the `pyplot` module in `matplotlib`
    to show the grayscale image. Here we didn't apply any axis label in the plot,
    but we can see from the axis scale that `ndarray gray_img` represents a 317 x
    661 pixel image.
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理部分完成。 我们将图像读取到三维`ndarray`（`img`）中，并应用[亮度]公式使用`0.21R + 0.72G + 0.07B`将 RGB
    图像转换为灰度图像 。 我们使用`matplotlib`中的`pyplot`模块显示灰度图像。 这里我们在图中未应用任何轴标签，但是从轴比例可以看到`ndarray
    gray_img`代表`317 x 661`像素的图像。
- en: 'Next, we are going to do the Fourier transform and show the spectrum:'
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进行傅立叶变换并显示频谱：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This code will give the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将给出以下输出：
- en: '![Fourier transform application](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶变换的应用](img/00029.jpeg)'
- en: 'First, we use a two-dimensional Fourier transform for `gray_img` , and plot
    the amplitude spectrum using a log-scale color map. We can see that the corners
    are different due to the zero-frequency component. Remember, when we use `numpy.fft.fft2()`
    , the order follows the  *standard* order, and we want to place the zero-frequency
    component to the center. So let''s use the shift routine:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们对`gray_img`使用二维傅立叶变换，并使用对数刻度色图绘制幅度谱。 我们可以看到，由于零频率分量，拐角有所不同。 请记住，当我们使用`numpy.fft.fft2()`时，该顺序遵循*标准*的顺序，并且我们希望将零频分量置于中心。
    因此，让我们使用`shift`例程：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This changes the image to:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将图像更改为：
- en: '![Fourier transform application](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶变换的应用](img/00030.jpeg)'
- en: 'We can now see that the zero-frequency component is in the center. Let''s go
    to the last step of this exercise: interpolating the image to enlarge the size.
    The techniques we are using here are very simple; we interpolate zero-frequency
    into the `fft_shift` array and make it twice the size. Then we inverse `fft_shift`
    to the standard order and do another inverse transform back to the original domain:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到零频率分量位于中心。 让我们转到本练习的最后一步：对图像进行插值以扩大尺寸。 我们在这里使用的技术非常简单。 我们将零频率插值到`fft_shift`数组中，并使它变成两倍大小。
    然后我们将`fft_shift`逆转为标准阶数，并进行另一次逆转换回到原始域：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Fourier transform application](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅里叶变换的应用](img/00031.jpeg)'
- en: In the previous code block, we first retrieved the shape of our `fft_shift`
    array (the same size as `gray_img` ). Then we created two zero `ndarrays` and
    padded them to the `fft_shift` array in four directions to enlarge it. So when
    we inverse the modified `fft_shift` array back to the standard order, the zero-frequency
    will be perfectly in the middle. And when we do the inverse transformation, you
    can see that the shape has been doubled. In order to let the `pyplot` module plot
    the new array, we need to convert the array to real numbers. After plotting the
    new array, we can see that the axis scales are double the size. And we barely
    lose any details or get any image blur as a result of it. The image has been interpolated
    using the Fourier transformation.
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码块中，我们首先获取了`fft_shift`数组的形状（大小与`gray_img`相同）。 然后我们创建了两个零`ndarrays`并将它们沿四个方向填充到`fft_shift`数组中以将其放大。
    因此，当我们将修改后的`fft_shift`数组逆回到标准阶数时，零频率将完美地位于中间。 当我们进行逆变换时，您可以看到形状已经加倍。 为了让`pyplot`模块绘制新数组，我们需要将数组转换为实数。
    绘制新数组后，我们可以看到轴刻度是其大小的两倍。 而且，我们几乎不会丢失任何细节或图像模糊。 已使用傅立叶变换对图像进行插值。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the usage of one and multi-dimensional Fourier transformations
    and how they are applied in signal processing. You now understand the implementation
    of the discrete Fourier transform in NumPy, and we did a performance comparison
    between our manual implemented script with NumPy built-in modules.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一维和多维傅立叶变换的用法以及它们在信号处理中的应用方式。 现在，您了解了 NumPy 中离散傅立叶变换的实现，并且我们在手动实现的脚本与
    NumPy 内置模块之间进行了性能比较。
- en: We also accomplished a real-world application of image interpolation, and we
    got a plus one for knowing some basics of the `matplotlib` packages.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还完成了图像插值的实际应用，并且由于了解`matplotlib`包的一些基础知识而获得了加号。
- en: In the next chapter, we will see how to distribute our code using the `numpy.distutils()`
    submodules.
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用`numpy.distutils()`子模块分发代码。
