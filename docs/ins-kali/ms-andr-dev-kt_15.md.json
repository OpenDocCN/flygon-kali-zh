["```kt\n       package com.journaler.activity; \n\n       import android.os.Bundle; \n       import android.support.annotation.Nullable; \n       import android.support.v7.app.AppCompatActivity; \n\n       import com.journaler.R; \n\n       public class MigrationActivity extends AppCompatActivity { \n\n        @Override \n        protected void onCreate(@Nullable Bundle savedInstanceState) { \n          super.onCreate(savedInstanceState); \n          setContentView(R.layout.activity_main); \n        } \n\n        @Override \n        protected void onResume() { \n          super.onResume(); \n        } \n       }\n```", "```kt\n        <manifest xmlns:android=\n        \"http://schemas.android.com/apk/res/android\" \n        package=\"com.journaler\"> \n        ... \n        <application \n         ... \n        > \n        ... \n         <activity \n            android:name=\".activity.MainActivity\" \n            android:configChanges=\"orientation\" \n            android:screenOrientation=\"portrait\"> \n            <intent-filter> \n              <action android:name=\"android.intent.action.MAIN\" /> \n              <category android:name=\n              \"android.intent.category.LAUNCHER\" /> \n            </intent-filter> \n         </activity> \n\n         <activity \n            android:name=\".activity.NoteActivity\" \n            android:configChanges=\"orientation\" \n            android:screenOrientation=\"portrait\" /> \n\n         <activity \n            android:name=\".activity.TodoActivity\" \n            android:configChanges=\"orientation\" \n            android:screenOrientation=\"portrait\" /> \n\n         <activity \n            android:name=\".activity.MigrationActivity\" \n            android:configChanges=\"orientation\" \n            android:screenOrientation=\"portrait\" /> \n\n         <activity \n            android:name=\".activity.MigrationActivity2\" \n            android:configChanges=\"orientation\" \n            android:screenOrientation=\"portrait\" /> \n        </application> \n\n      </manifest> \n```", "```kt\n        package com.journaler.model; \n\n        public class Dummy { \n\n          private String title; \n          private String content; \n\n          public Dummy(String title) { \n            this.title = title; \n          } \n\n          public Dummy(String title, String content) { \n            this.title = title; \n            this.content = content; \n          } \n\n          public String getTitle() { \n            return title; \n          } \n\n          public void setTitle(String title) { \n            this.title = title; \n          } \n\n          public String getContent() { \n            return content; \n          } \n\n         public void setContent(String content) { \n           this.content = content; \n         } \n\n       } \n```", "```kt\n        package com.journaler.model; \n\n        import android.os.Parcel; \n        import android.os.Parcelable; \n\n        public class Dummy2 implements Parcelable { \n\n          private int count; \n          private float result; \n\n          public Dummy2(int count) { \n            this.count = count; \n            this.result = count * 100; \n         } \n\n         public Dummy2(Parcel in) { \n           count = in.readInt(); \n           result = in.readFloat(); \n         } \n\n         public static final Creator<Dummy2>\n         CREATOR = new Creator<Dummy2>() { \n           @Override \n           public Dummy2 createFromParcel(Parcel in) { \n             return new Dummy2(in); \n           } \n\n           @Override \n           public Dummy2[] newArray(int size) { \n             return new Dummy2[size]; \n           } \n         }; \n\n         @Override \n         public void writeToParcel(Parcel parcel, int i) { \n           parcel.writeInt(count); \n           parcel.writeFloat(result); \n         } \n\n         @Override \n         public int describeContents() { \n           return 0; \n         } \n\n         public int getCount() { \n           return count; \n         } \n\n         public float getResult() { \n           return result; \n         } \n       }\n```", "```kt\n    package com.journaler \n\n    import android.content.Context \n    import android.content.Intent \n    import com.journaler.activity.MigrationActivity \n    import com.journaler.model.Dummy2 \n\n    fun kotlinCallsJava(ctx: Context) { \n\n      /** \n      * We access Java class and instantiate it. \n      */ \n      val dummy = Dummy2(10) \n\n      /** \n      * We use Android related Java code with no problems as well. \n      */ \n       val intent = Intent(ctx, MigrationActivity::class.java) \n       intent.putExtra(\"dummy\", dummy) \n       ctx.startActivity(intent) \n\n    } \n```", "```kt\n        buildscript { \n          repositories { \n            jcenter() \n            mavenCentral() \n          } \n          dependencies { \n            classpath 'com.android.tools.build:gradle:2.3.3' \n            classpath 'org.jetbrains.kotlin:kotlin-gradle-\n            plugin:1.1.51' \n          } \n       } \n\n      repositories { \n       jcenter() \n       mavenCentral() \n      }\n```", "```kt\n        apply plugin: \"com.android.application\" \n        apply plugin: \"kotlin-android\" \n        apply plugin: \"kotlin-android-extensions\" \n\n        repositories { \n          maven { url \"https://maven.google.com\" } \n        } \n\n        android { \n         ... \n         sourceSets { \n          main.java.srcDirs += [ \n                'src/main/kotlin', \n                'src/common/kotlin', \n                'src/debug/kotlin', \n                'src/release/kotlin', \n                'src/staging/kotlin', \n                'src/preproduction/kotlin', \n                'src/debug/java', \n                'src/release/java', \n                'src/staging/java', \n                'src/preproduction/java', \n                'src/testDebug/java', \n                'src/testDebug/kotlin', \n                'src/androidTestDebug/java', \n                'src/androidTestDebug/kotlin' \n           ] \n          } \n          ... \n          } \n         ... \n        } \n\n        repositories { \n          jcenter() \n          mavenCentral() \n        } \n\n        dependencies { \n          compile \"org.jetbrains.kotlin:kotlin-reflect:1.1.51\" \n          compile \"org.jetbrains.kotlin:kotlin-stdlib:1.1.51\" \n           ... \n          compile \"com.github.salomonbrys.kotson:kotson:2.3.0\" \n            ... \n\n          compile \"junit:junit:4.12\" \n          testCompile \"junit:junit:4.12\" \n\n          testCompile \"org.jetbrains.kotlin:kotlin-reflect:1.1.51\" \n          testCompile \"org.jetbrains.kotlin:kotlin-stdlib:1.1.51\" \n\n          compile \"org.jetbrains.kotlin:kotlin-test:1.1.51\" \n          testCompile \"org.jetbrains.kotlin:kotlin-test:1.1.51\" \n\n          compile \"org.jetbrains.kotlin:kotlin-test-junit:1.1.51\" \n          testCompile \"org.jetbrains.kotlin:kotlin-test-junit:1.1.51\" \n          ... \n        }\n```", "```kt\n    package com.journaler.activity \n\n    import android.os.Bundle \n    import android.support.v7.app.AppCompatActivity \n\n    import com.journaler.R \n\n    class MigrationActivity : AppCompatActivity() { \n\n      override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n        setContentView(R.layout.activity_main) \n      } \n\n      override fun onResume() { \n        super.onResume() \n      } \n\n    } \n```", "```kt\n       package com.journaler.model \n\n       class Dummy { \n\n         var title: String? = null \n         var content: String? = null \n\n         constructor(title: String) { \n           this.title = title \n         } \n\n         constructor(title: String, content: String) { \n           this.title = title \n           this.content = content \n        } \n\n      } \n```", "```kt\n        package com.journaler.model \n\n        import android.os.Parcel \n        import android.os.Parcelable \n\n        class Dummy2 : Parcelable { \n\n          var count: Int = 0 \n          private set \n          var result: Float = 0.toFloat() \n          private set \n\n          constructor(count: Int) { \n            this.count = count \n            this.result = (count * 100).toFloat() \n          } \n\n          constructor(`in`: Parcel) { \n            count = `in`.readInt() \n            result = `in`.readFloat() \n          } \n\n          override fun writeToParcel(parcel: Parcel, i: Int) { \n            parcel.writeInt(count) \n            parcel.writeFloat(result) \n          } \n\n          override fun describeContents(): Int { \n            return 0 \n          } \n\n         companion object { \n\n           val CREATOR: Parcelable.Creator<Dummy2>\n           = object : Parcelable.Creator<Dummy2> { \n              override fun createFromParcel(`in`: Parcel): Dummy2 { \n                return Dummy2(`in`) \n            } \n\n           override fun newArray(size: Int): Array<Dummy2> { \n              return arrayOfNulls(size) \n            } \n          } \n        } \n\n    } \n```", "```kt\n    override fun newArray(size: Int): Array<Dummy2> { ... \n```", "```kt\n    override fun newArsray(size: Int): Array<Dummy2?> { ... \n```", "```kt\n    ... \n    override fun onResume() = super.onResume() \n    ... \n```", "```kt\n        package com.journaler.model \n\n        class Dummy( \n          var title: String, \n          var content: String \n          ) { \n\n            constructor(title: String) : this(title, \"\") { \n            this.title = title \n           } \n\n       } \n```", "```kt\n        package com.journaler.model \n\n        import android.os.Parcel \n        import android.os.Parcelable \n\n        class Dummy2( \n          private var count: Int \n        ) : Parcelable { \n\n          companion object { \n            val CREATOR: Parcelable.Creator<Dummy2> \n            = object : Parcelable.Creator<Dummy2> { \n              override fun createFromParcel(`in`: Parcel): \n              Dummy2 = Dummy2(`in`) \n              override fun newArray(size: Int): Array<Dummy2?> =\n              arrayOfNulls(size) \n            }    \n          } \n\n         private var result: Float = (count * 100).toFloat() \n\n         constructor(`in`: Parcel) : this(`in`.readInt()) \n\n         override fun writeToParcel(parcel: Parcel, i: Int) { \n           parcel.writeInt(count) \n         } \n\n         override fun describeContents() = 0 \n\n        } \n```"]