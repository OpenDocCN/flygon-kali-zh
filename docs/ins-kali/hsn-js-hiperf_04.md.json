["```js\n> npx degit sveltejs/template todo\n> cd todo\n> npm install\n> npm run dev\n```", "```js\n//inside of the script tag\nexport let name;\nexport let counter;\n\nfunction clicker() {\n   counter += 1;\n}\n\n//add to the template\n<span>We have been clicked {counter} times</span>\n<button on:click={clicker}>Click me!</button>\n```", "```js\nh1.svelte-i7qo5m{color:purple}\n```", "```js\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\n```", "```js\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\n```", "```js\n<script>\n    import { createEventDispatcher } from 'svelte';\n    export let completed;\n    export let num;\n    export let description;\n\n    const dispatch = createEventDispatcher();\n</script>\n<style>\n    .completed {\n        text-decoration: line-through;\n    }\n</style>\n<li class:completed>\n    Task {num}: {description}\n    <input type=\"checkbox\" bind:checked={completed} />\n    <button on:click=\"{() => dispatch('remove', null)}\">Remove</button>\n</li>\n```", "```js\n<script>\n    import Todo from './Todo.svelte';\n\n    let newTodoText = '';\n    const Todos = new Set();\n\n    function addTodo() {\n        const todo = new Todo({\n            target: document.querySelector('#main'),\n            props: {\n                num : Todos.size,\n                description : newTodoText\n            }\n        });\n        newTodoText = '';\n        todo.$on('remove', () => {\n            Todos.delete(todo);\n            todo.$destroy();\n        });\n        Todos.add(todo);\n    }\n</script>\n<style></style>\n<h1>Todo Application!</h1>\n<ul id=\"main\">\n</ul>\n<button on:click={addTodo}>Add Todo</button>\n<input type=\"text\" bind:value={newTodoText} />\n```", "```js\n//inside of script tag\nexport let dueDate;\n\n//part of the template\n<li class:completed>\n    Task {num}: {description} - Due on {dueDate}\n    <input type=\"checkbox\" bind:checked={completed} />\n    <button on:click=\"{() => dispatch('remove', null)}\">Remove</button>\n</li>\n```", "```js\n//inside of the script tag\nlet newTodoDate = null;\nfunction addTodo() {\n    const todo = new Todo({\n        target: document.querySelector('#main'),\n        props: {\n            num : Todos.size + 1,\n            dueDate : newTodoDate,\n            description : newTodoText\n        }\n    });\n    newTodoText = '';\n    newTodoDate = null;\n    todo.$on('remove', () => {\n        Todos.delete(todo);\n        todo.$destroy();\n    });\n    Todos.add(todo);\n}\n\n//part of the template\n<input type=\"date\" bind:value={newTodoDate} />\n```", "```js\n//inside of script tag\nlet currSize = 0;\nfunction addTodo() {\n    const todo = new Todo({\n        // code removed for readability\n    });\n    todo.$on('remove', () => {\n        Todos.delete(todo);\n        currSize = Todos.size;\n        todo.$destroy();\n    });\n    Todos.add(todo);\n    currSize = Todos.size;\n}\n\n//part of the template\n<h1>Todo Application! <span> Current number of Todos: {currSize}</span></h1>\n```", "```js\n//inside of script tag\nlet completed = false;\nlet overdue = false;\n\n//part of the template\n<label><input type=\"checkbox\" bind:checked={completed}\n    on:change={handleFilter}/>Completed</label>\n<label><input type=\"checkbox\" bind:checked={overdue}\n    on:change={handleFilter}/>Overdue</label>\n```", "```js\nfunction handleHide(item) {\n    const currDate = Date.now();\n    if( completed && overdue ) {\n        item.hidden = !item.completed || new Date(item.dueDate).getTime() < currDate;\n        return;\n    }\n    if( completed ) {\n        item.hidden = !item.completed;\n        return;\n    }\n    if( overdue ) {\n        item.hidden = new Date(item.dueDate).getTime() < currDate;\n        return;\n    }\n    item.hidden = false;\n}\n\nfunction handleFilter() {\n    for(const item of Todos) {\n        handleHide(item);\n    }\n}\n```", "```js\nconst todo = new Todo({\n    target: document.querySelector('#main'),\n    props: {\n        num : Todos.size + 1,\n        dueDate : newTodoDate,\n        description : newTodoText\n    }\n});\nhandleHide(todo);\n```", "```js\n<svelte:options accessors={true} />\n<script>\n    import { createEventDispatcher } from 'svelte';\n\n    export let num;\n    export let description;\n    export let dueDate;\n    export let hidden = false;\n    export let completed = false;\n\n    const dispatch = createEventDispatcher();\n</script>\n<style>\n    .completed {\n        text-decoration: line-through;\n    }\n    .hidden {\n        display : none;\n    }\n</style>\n<li class:completed class:hidden>\n    Task {num}: {description} - Due on {dueDate}\n    <input type=\"checkbox\" bind:checked={completed} />\n    <button on:click=\"{() => dispatch('remove', null)}\">Remove</button>\n</li>\n```", "```js\n//inside of script tag\nimport { fade } form 'svelte/transition';\n\n//part of template\n{#if !hidden}\n    <li in:fade out:fade class:completed>\n        Task {num}: {description} - Due on {dueDate}\n        <input type=\"checkbox\" bind:checked={completed} />\n        <button on:click=\"{() => dispatch('remove', null)}\">Remove</button>\n    </li>\n{/if}\n```", "```js\nimport { writable } from 'svelte/store';\n\nexport const overdue = writable(false);\nexport const completed = writable(false);\n```", "```js\n//inside of script tag\nimport { completed, overdue } from './stores.js';\n\n//part of the template\n<label><input type=\"checkbox\" bind:checked={$completed} />Completed</label>\n<label><input type=\"checkbox\" bind:checked={$overdue} />Overdue</label>\n```", "```js\n<script>\n    import { overdue, completed } from './stores.js';\n    import { createEventDispatcher, onDestroy } from 'svelte';\n    import { fade } from 'svelte/transition';\n\n    export let num;\n    export let description;\n    export let dueDate;\n    let _completed = false;\n\n    const dispatch = createEventDispatcher();\n</script>\n<style>\n    .completed {\n        text-decoration: line-through;\n    }\n</style>\n{#if\n    !(\n         ($completed && !_completed) ||\n         ($overdue && new Date(dueDate).getTime() >= Date.now())\n     )\n}\n    <li in:fade out:fade class:_completed>\n        Task {num}: {description} - Due on {dueDate}\n        <input type=\"checkbox\" bind:checked={_completed} />\n        <button on:click=\"{() => dispatch('remove', null)}\">Remove</button>\n    </li>\n{/if}\n```", "```js\nlet api_key = \"<your_api_key>\";\nfetch(`https://api.openweathermap.org/data/2.5/weather?q=London&appid=${api_key}`)\n    .then((res) => res.json())\n    .then((final) => console.log(final));\n```", "```js\n> cd ..\n> npx degit sveltejs/template weather\n> cd weather\n> npm install\n> npm run dev\n```", "```js\ndisplay: flex;\nflex-direction : column;\nalign-items : center;\n```", "```js\n<script>\n    import { zipcode } from './stores.js';\n    const api_key = '<your_api_key>'\n\n    let city = null;\n    let zip = null;\n    let country_code = null;\n\n    const submitData = function() {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${zipcode \n         ? zip : city},${country_code}&appid=${api_key}`)\n            .then(res => res.json())\n            .then(final => console.log(final));\n    }\n</script>\n<style>\n    input:valid {\n        border: 1px solid #333;\n    }\n    input:invalid {\n        border: 1px solid #c71e19;\n    }\n</style>\n<div>\n    <input type=\"checkbox\" bind:checked={$zipcode} />\n    {#if zipcode}\n        <input type=\"number\" bind:value={zip} minLength=\"6\" maxLength=\"10\" \n         require />\n    {:else}\n        <input type=\"text\" bind:value={city} required />\n    {/if}\n    <input type=\"text\" bind:value={country_code} minLength=\"2\" \n     maxLength=\"2\" required />\n    <button on:click={submitData}>Check</button>\n</div>\n```", "```js\n//in the style tag\ninput {\n    margin-left: 10px;\n}\nlabel {\n    display: inline-block;\n}\n#cc input {\n    width: 3em;\n}\n```", "```js\n<label id=\"cc\">Country Code<input type=\"text\" bind:value={country_code} minLength=\"2\" maxLength=\"2\" required /></label>\n```", "```js\nfunction createWeather() {\n    const { subscribe, update } = writable({});\n    const api_key = '<your_api_key>';\n    return {\n        subscribe,\n        gather: (cc, _z, zip=null, city=null) => {\n            fetch(`https://api.openweathermap.org/data/2.5/weather?=${_z ? \n             zip : city},${cc}&appid=${api_key})\n                .then(res => res.json())\n                .then(final => update(() => { return {...final} }));\n        }\n    }\n}\n```", "```js\n<script>\n    import { weather } from './stores.js';\n</script>\n<style>\n</style>\n<p>{JSON.stringify($weather)}</p>\n```", "```js\n//inside the script tag\nimport WeatherOutput from './WeatherOutput.svelte'\n\n//part of the template\n<WeatherOutput></WeatherOutput>\n```", "```js\n<div>\n    {#if $weather.error}\n        <p>There was an error getting your data!</p>\n    {:else if $weather.data}\n        <dl>\n            <dt>Conditions</dt>\n            <dd>{$weather.weather}</dd>\n            <dt>Temperature</dt>\n            <dd>{$weather.temperature.current}</dd>\n            <dd>{$weather.temperature.min}</dd>\n            <dd>{$weather.temperature.max}</dd>\n            <dt>Humidity</dt>\n            <dd>{$weather.humidity}</dd>\n            <dt>Sunrise</dt>\n            <dd>{$weather.sunrise}</dd>\n            <dt>Sunset</dt>\n            <dd>{$weather.sunset}</dd>\n            <dt>Windspeed</dt>\n            <dd>{$weather.windspeed}</dd>\n            <dt>Direction</dt>\n            <dd>{$weather.direction}</dd>\n        </dl>\n    {:else}\n        <p>No city or zipcode has been submitted!</p>\n    {/if}\n</div>\n```", "```js\n<label>Metric?<input type=\"checkbox\" bind:checked={$metric}</label>\n```", "```js\n<script>\n    import { weather } from './stores.js';\n    import { onDestroy, onMount } from 'svelte';\n\n    export let type = \"text\";\n    export let name = \"DEFAULT\";\n    export let value = null;\n    export let required = true;\n    export let minLength = 0;\n    export let maxLength = 100000;\n    let active = false;\n    let inputs = [];\n    let el;\n\n    const unsubscribe = weather.subscribe(() => {\n        if(!inputs.includes(value) ) {\n            inputs = [...inputs, value];\n            localStorage.setItem(name, inputs);\n        }\n        value = '';\n    });\n    const active = function() {\n        active = true;\n    }\n    const deactivate = function(ev) {\n        if(!ev.path.includes(el) ) \n            active = false;\n    }\n    const add = function(ev) {\n        value = ev.target.innerText;\n        active = false;\n    }\n    const remove = function(ev) {\n        const text = ev.target.parentNode.querySelector('span').innerText;\n        const data = localStorage.getItem(name).split(',');\n        data.splice(data.indexOf(text));\n        inputs = [...data];\n        localStorage.setItem(name, inputs);\n    }\n    onMount(() => {\n        const data = localStorage.getItem(name);\n        if( data === \"\" ) { inputs = []; }\n        else { inputs = [...data.split(',')]; }\n    });\n    onDestroy(() => {\n        unsubscribe();\n    });\n</script>\n<style>\n    input:valid {\n        border 1px solid #333;\n    }\n    input:invalid {\n        border 1px solid #c71e19;\n    }\n    div {\n        position : relative;\n    }\n    ul {\n        position : absolute;\n        top : 100%;\n        list-style-type : none;\n        background : white;\n        display : none;\n    }\n    li {\n        cursor : hand;\n        border-bottom : 1px solid black;\n    }\n    ul.active {\n        display : inline-block;\n    }\n</style>\n<svelte:window on:mousedown={deactivate} />\n<div>\n    {#if type === \"text\"}\n        <input on:focus={activate} type=\"text\" bind:value={value} \n         {minLength} {maxLength} {required} />\n    {:else}\n        <input on:focus={activate} type=\"number\" bind:value={value} \n         {minLength} {maxLength} {required} />\n    {/if}\n    <ul class:active bind:this={el}>\n        {#each inputs as input }\n            <li><span on:click={add}>{input}</span> <button \n             on:click={remove}>&times;</button></li>\n        {/each}\n    </ul>\n</div>\n```", "```js\n//inside the script tag\nimport Dropdown from './Dropdown.svelte';\n\n//part of the template\n{#if $zipcode}\n    <label>Zip<Dropdown name=\"zip\" type=\"number\" bind:value={zip} \n     minLength=\"6\" maxLength=\"10\"></Dropdown></label>\n{:else}\n    <label>City<Dropdown name=\"city\" bind:value={city}></Dropdown></label>\n{/if}\n<label>Country Code<Dropdown name=\"cc\" bind:value={country_code} \n minLength=\"2\" maxLength=\"2\"></Dropdown></label>\n```"]