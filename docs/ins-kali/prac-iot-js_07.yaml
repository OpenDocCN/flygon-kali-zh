- en: Smart Wearable and IFTTT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能可穿戴和IFTTT
- en: 'In [Chapter 6](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee), *Smart
    Wearable*, we looked at how to build a simple wearable that displays a user''s
    location and also reads accelerometer values. In this chapter, we are going to
    take that application to the next level by implementing fall detection logic on
    the device and then adding **If This Then That** (**IFTTT**) rules on top of the
    data to execute actions when certain events happen. We will look at the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee) *智能可穿戴*中，我们看到了如何构建一个简单的可穿戴设备，显示用户的位置并读取加速计值。在本章中，我们将通过在设备上实现跌倒检测逻辑，然后在数据上添加**If
    This Then That**（**IFTTT**）规则，将该应用程序提升到下一个级别。我们将讨论以下主题：
- en: What is IFTTT
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是IFTTT
- en: IFTTT and IoT
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IFTTT和物联网
- en: Understanding fall detection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解跌倒检测
- en: Accelerometer-based fall detection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于加速计的跌倒检测
- en: Building an IFTTT rules engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个IFTTT规则引擎
- en: IFTTT and IoT
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IFTTT和物联网
- en: This reactive pattern can be easily applied to certain situations. For example,
    if a patient falls down, then call an ambulance, or if the temperature goes below
    15 degrees, then turn off the AC, and so on. These are simple rules that we define
    that can help us automate a lot of processes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反应模式可以轻松应用于某些情况。例如，如果病人摔倒，就叫救护车，或者如果温度低于15度，就关闭空调，等等。这些都是我们定义的简单规则，可以帮助我们自动化许多流程。
- en: In IoT, rules engines are key to automating most monotonous tasks. In this chapter,
    we are going to build a simple hardcoded rules engine that will continuously monitor
    the incoming data. If the incoming data matches any of our rules, it will execute
    a response.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网中，规则引擎是自动化大部分单调任务的关键。在本章中，我们将构建一个简单的硬编码规则引擎，将持续监视传入的数据。如果传入的数据与我们的任何规则匹配，它将执行一个响应。
- en: What we are building is a similar concept to [ifttt.com](https://ifttt.com/)
    ([https://ifttt.com/discover](https://ifttt.com/discover)), but is very specific
    to IoT devices that are present inside our framework. IFTTT ([https://ifttt.com/discover](https://ifttt.com/discover))
    has no relation to what we are building in our book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在构建的东西类似于[ifttt.com](https://ifttt.com/)（[https://ifttt.com/discover](https://ifttt.com/discover)）的概念，但非常特定于我们框架内存在的物联网设备。IFTTT（[https://ifttt.com/discover](https://ifttt.com/discover)）与我们在书中构建的内容无关。
- en: Fall detection
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跌倒检测
- en: In [Chapter 6](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee), *Smart
    Wearable*, we gathered three axis values from the accelerometer. Now, we are going
    to make use of this data to detect falls.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee) *智能可穿戴*中，我们从加速计中收集了三个轴的值。现在，我们将利用这些数据来检测跌倒。
- en: I would recommend watching the video *Accelerometer in Freefall* ([https://www.youtube.com/watch?v=-om0eTXsgnY](https://www.youtube.com/watch?v=-om0eTXsgnY)),
    which explains how an accelerometer behaves both when it is stationary and in
    motion.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议观看视频*自由落体中的加速计*（[https://www.youtube.com/watch?v=-om0eTXsgnY](https://www.youtube.com/watch?v=-om0eTXsgnY)），它解释了加速计在静止和运动时的行为。
- en: Now that we understand the basic concept of fall detection, let's talk about
    our specific use case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了跌倒检测的基本概念，让我们谈谈我们的具体用例。
- en: The biggest challenge in fall detection is to distinguish falling from other
    activities, such as running and jumping. In this chapter, we are going to keep
    things simple and work on very basic conditions, where a user at rest or in constant
    motion suddenly falls down.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 跌倒检测中最大的挑战是区分跌倒和其他活动，比如跑步和跳跃。在本章中，我们将保持简单，处理非常基本的条件，即用户静止或持续运动时突然摔倒。
- en: 'To identify whether the user has fallen down, we use the signal magnitude vector
    or *SMV*. *SMV* is the root mean square of the values of the three axes. That
    is:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定用户是否摔倒，我们使用信号幅度矢量或*SMV*。*SMV*是三个轴的值的均方根。也就是说：
- en: '![](../images/00100.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00100.jpeg)'
- en: 'If we start plotting the **SMV** over **Time** for a user who is standing idle
    and then falls down, we will end up with a graph, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们开始绘制用户在站立不动然后摔倒时的**SMV**随**时间**的图表，我们将得到以下图表：
- en: '![](../images/00101.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00101.jpeg)'
- en: Note the spike at the end of the chart. This is the point at which the user
    actually fell.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意图表末端的尖峰。这是用户实际摔倒的点。
- en: Now, when we gather the accelerometer values from ADXL345, we will calculate
    the SMV. Based on multiple iterations using the smart wearable we have built,
    I was consistently able to detect falls at an SMV value of 1 g. For anything less
    than 1 g SMV, the user is almost always considered to be stationary and anything
    greater than 1 g SMV is considered a fall.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们从ADXL345收集加速计值时，我们将计算SMV。通过使用我们构建的智能可穿戴进行多次迭代，我一直能够在1 g SMV值处稳定地检测到跌倒。对于小于1
    g SMV的任何值，用户几乎总是被认为是静止的，而大于1 g SMV的任何值都被认为是跌倒。
- en: Do note that I have placed the accelerometer in such a way that the y-axis is
    perpendicular to the ground.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我已经将加速计放置在y轴垂直于地面的位置。
- en: Once we put the setup together , you can see for yourself how the SMV values
    change with a change in the accelerometer's position.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们把设置放在一起，您就可以亲自看到SMV值随加速计位置的变化而变化。
- en: Do note that if you are performing other activities, such as jumping or squatting,
    the fall detection might be triggered. You can play around with the threshold
    value of 1 g SMV to get consistent fall detection.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您正在进行其他活动，比如跳跃或下蹲，可能会触发跌倒检测。您可以调整1 g SMV的阈值，以获得一致的跌倒检测。
- en: 'You can also refer to *Detecting Human Falls with a 3-Axis Digital Accelerometer*:
    ([http://www.analog.com/en/analog-dialogue/articles/detecting-falls-3-axis-digital-accelerometer.html](http://www.analog.com/en/analog-dialogue/articles/detecting-falls-3-axis-digital-accelerometer.html)),
    or *Accelerometer-based on-body sensor localization for health and medical monitoring
    applications* ([https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3279922/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3279922/)),
    and *Development of the Algorithm for Detecting Falls during Daily Activity using
    2 Tri-Axial Accelerometers* ([http://waset.org/publications/2993/development-of-the-algorithm-for-detecting-falls-during-daily-activity-using-2-tri-axial-accelerometers](http://waset.org/publications/2993/development-of-the-algorithm-for-detecting-falls-during-daily-activity-using-2-tri-axial-accelerometers))
    to get a greater understanding of this topic and improve the efficiency of the
    system.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以参考*使用3轴数字加速度计检测人类跌倒*：([http://www.analog.com/en/analog-dialogue/articles/detecting-falls-3-axis-digital-accelerometer.html](http://www.analog.com/en/analog-dialogue/articles/detecting-falls-3-axis-digital-accelerometer.html))，或者*基于加速度计的身体传感器定位用于健康和医疗监测应用*
    ([https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3279922/](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3279922/))，以及*开发用于检测日常活动中跌倒的算法，使用2个三轴加速度计*
    ([http://waset.org/publications/2993/development-of-the-algorithm-for-detecting-falls-during-daily-activity-using-2-tri-axial-accelerometers](http://waset.org/publications/2993/development-of-the-algorithm-for-detecting-falls-during-daily-activity-using-2-tri-axial-accelerometers))，以便更好地理解这个主题并提高系统的效率。
- en: Updating Raspberry Pi
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新树莓派
- en: Now that we know what needs to be done, we will get started with the code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道需要做什么，我们将开始编写代码。
- en: Before we proceed, create a folder named `chapter7` and make a copy of the `chapter6`
    code in the `chapter7` folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，创建一个名为`chapter7`的文件夹，并在其中复制`chapter6`代码。
- en: 'Next, open the `pi/index.js` file. We will update the ADXL345 initialization
    setup and then start working with the values. Update `pi/index.js`, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`pi/index.js`文件。我们将更新ADXL345初始化设置，然后开始处理数值。更新`pi/index.js`如下：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note `initADXL345()`. We define the measurement range as `2_G`, clear the offsets,
    and then we invoke the infinite loop function. In this scenario, we run the `setInterval()`
    every `500` ms instead of every `1` second. `readSensorValues()` is invoked every
    `500` ms instead of every `3` seconds. This is to make sure that we capture falls
    without much delay.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`initADXL345()`。我们将测量范围定义为`2_G`，清除偏移量，然后调用无限循环函数。在这种情况下，我们将`setInterval()`每`500`毫秒运行一次，而不是每`1`秒。`readSensorValues()`每`500`毫秒调用一次，而不是每`3`秒。这是为了确保我们能够及时捕捉到跌倒。
- en: 'In the `readSensorValues()`, once the `x`, `y`, and `z` values are available,
    we calculate the SMV. Then, we check whether the SMV value is greater than `1`:
    if it is, then we have detected a fall.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在`readSensorValues()`中，一旦`x`、`y`和`z`值可用，我们就计算SMV。然后，我们检查SMV值是否大于`1`：如果是，那么我们就检测到了跌倒。
- en: Along with the `x`, `y`, and `z` values, we send the SMV value as well as the
    fall value to the API engine. Also, do note that in this example, we are not sending
    all values as we collect them. We send data only if the fall is detected.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`x`、`y`和`z`值之外，我们还发送SMV值以及跌倒值到API引擎。还要注意，在这个例子中，我们并不是在收集所有值后立即发送数据。我们只有在检测到跌倒时才发送数据。
- en: 'Save all of the files. Start the broker by running the following command from
    the `chapter7/broker` folder:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件。通过从`chapter7/broker`文件夹运行以下命令来启动代理：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, start the API engine by running the following command from the `chapter7/api-engine`
    folder:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过从`chapter7/api-engine`文件夹运行以下命令来启动API引擎：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are yet to add the IFTTT logic to the API engine, which we will do in the
    next section. For now, to validate our setup, let''s run the `index.js` file on
    the Raspberry Pi by executing:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有将IFTTT逻辑添加到API引擎中，这将在下一节中完成。目前，为了验证我们的设置，让我们通过执行在树莓派上的`index.js`文件来开始：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If everything goes well, the accelerometer should be initialized successfully
    and the data should start coming in.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，加速度计应该成功初始化，并且数据应该开始传入。
- en: 'If we simulate a free fall, we should see our first piece of data going to
    the API engine, and it should look something like the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们模拟自由落体，我们应该看到我们的第一条数据发送到API引擎，并且它应该看起来像以下截图：
- en: '![](../images/00102.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00102.jpeg)'
- en: As you can see, the simulated free fall gave an SMV of `2.048` g.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，模拟的自由落体给出了`2.048` g的SMV。
- en: 'My hardware setup is as shown here:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我的硬件设置如下所示：
- en: '![](../images/00103.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00103.jpeg)'
- en: I have glued the entire setup to a **Styrofoam** sheet, so I can comfortably
    test the fall detection logic.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我将整个设置粘贴到了**聚苯乙烯**板上，这样我就可以舒适地测试跌倒检测逻辑。
- en: I removed the 16 x 2 LCD from the setup while I was identifying the SMV for
    free fall.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我确定自由落体的SMV时，我从设置中移除了16 x 2 LCD。
- en: In the next section, we are going to read the data that we received from the
    device and then execute rules based on it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将读取从设备接收到的数据，然后根据数据执行规则。
- en: Building the IFTTT rules engine
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建IFTTT规则引擎
- en: 'Now that we are sending the required data to the API engine, we will be doing
    two things:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在将所需的数据发送到API引擎，我们将做两件事：
- en: Showing data that we got from the smart wearable on the web, desktop, and mobile
    apps
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页、桌面和移动应用程序上显示我们从智能可穿戴设备得到的数据
- en: Executing rules on top of the data
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据之上执行规则
- en: We will get started with the second objective first. We will be building a rules
    engine to execute rules based on the data we have received.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先开始第二个目标。我们将构建一个规则引擎来根据我们收到的数据执行规则。
- en: 'Let''s get started by creating a folder named `ifttt` at the root of the `api-engine/server`
    folder. Inside the `ifttt` folder, create a file named `rules.json`. Update `api-engine/server/ifttt/rules.json`,
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在`api-engine/server`文件夹的根目录下创建一个名为`ifttt`的文件夹开始。在`ifttt`文件夹中，创建一个名为`rules.json`的文件。更新`api-engine/server/ifttt/rules.json`如下：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see from the preceding code, we are maintaining a JSON file with
    all of our rules. In our scenario, we have only one rule for one device, and the
    rule has two parts: the `if` part and the `then` part. The `if` refers to the
    property, which needs to be checked against the incoming data, the checking condition,
    and the value against which it needs to be checked. The `then` part refers to
    the action that needs to be taken if the `if` matches. In the preceding case,
    this action involves sending an email.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中可以看出，我们正在维护一个包含所有规则的JSON文件。在我们的情况下，每个设备只有一个规则，规则有两部分：`if`部分和`then`部分。`if`指的是需要针对传入数据进行检查的属性，检查条件以及需要进行检查的值。`then`部分指的是如果`if`匹配，则需要执行的操作。在前面的情况下，此操作涉及发送电子邮件。
- en: 'Next, we are going to build the rules engine itself. Create a file named `ifttt.js`
    inside the `api-engine/server/ifttt` folder and update `api-engine/server/ifttt/ifttt.js`,
    as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建规则引擎本身。在`api-engine/server/ifttt`文件夹内创建一个名为`ifttt.js`的文件，并更新`api-engine/server/ifttt/ifttt.js`，如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The logic is quite simple. `processData()` gets called when a new data record
    comes to the API engine. Then, we load all of the rules from the `rules.json`
    file and we iterate over them to check whether or not the current rule is meant
    for the incoming device.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑非常简单。当新的数据记录到达API引擎时，将调用`processData()`。然后，我们从`rules.json`文件中加载所有规则，并对它们进行迭代，以检查当前规则是否适用于传入设备。
- en: If yes, then `checkRuleAndData()` is called by passing the rule and incoming
    data to check whether the current data set matches any of the predefined rules.
    If it does, we check the action, which in our case is the sending of an email.
    You can update the appropriate email credentials in the code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是，则通过传递规则和传入数据来调用`checkRuleAndData()`，以检查当前数据集是否与预定义规则匹配。如果是，我们将检查动作，我们的情况是发送电子邮件。您可以在代码中更新相应的电子邮件凭据。
- en: Once this is done, we need to invoke `processData()` from `api-engine/server/mqtt/index.js
    client.on('message')` with the `topic` equaling `accelerometer`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们需要在`api-engine/server/mqtt/index.js client.on('message')`中使用`topic`等于`accelerometer`来调用`processData()`。
- en: 'Update `client.on(''message'')`, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`client.on('message')`，如下所示：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That is it. We have all the pieces needed for the IFTTT engine to run.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们已经准备好了IFTTT引擎运行所需的所有部件。
- en: 'Save all of the files and restart the API engine. Now, simulate a fall and
    we should see an email coming our way, which should look something like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并重新启动API引擎。现在，模拟一次跌倒，我们应该看到一封电子邮件，内容应该类似于这样：
- en: '![](../images/00104.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00104.jpeg)'
- en: Now that we are done with the IFTTT engine, we will update the interfaces to
    reflect the new data we have gathered.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了IFTTT引擎，我们将更新界面以反映我们收集到的新数据。
- en: Updating the web app
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Web应用程序
- en: 'To update the web app, open `web-app/src/app/device/device.component.html`
    and update it, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新Web应用程序，请打开`web-app/src/app/device/device.component.html`并进行如下更新：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save the file and run:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并运行：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We should see the following once we navigate to the device page:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们导航到设备页面，我们应该看到以下内容：
- en: '![](../images/00105.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00105.jpeg)'
- en: In the next section, we will update the desktop app.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更新桌面应用程序。
- en: Updating the desktop app
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新桌面应用程序
- en: Now that the web app is done, we are going to build the same and deploy it inside
    our desktop app.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Web应用程序已经完成，我们将构建相同的内容并将其部署到我们的桌面应用程序中。
- en: 'To get started, head back to the terminal/prompt of the `web-app` folder and
    run:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请返回到`web-app`文件夹的终端/提示符并运行：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will create a new folder inside the `web-app` folder named `dist`. The
    contents of the `dist` folder should be along the lines of:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`web-app`文件夹内创建一个名为`dist`的新文件夹。`dist`文件夹的内容应该如下所示：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'All the code we have written is finally bundled into the preceding files. We
    will grab all of the files (not the `dist` folder) present inside the `dist` folder
    and then paste them inside the `desktop-app/app` folder. The final structure of
    the desktop app after these changes will be as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的所有代码最终都被捆绑到了前述文件中。我们将获取`dist`文件夹内的所有文件（而不是`dist`文件夹），然后将它们粘贴到`desktop-app/app`文件夹内。这些更改后桌面应用程序的最终结构将如下所示：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To test drive, run:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 进行测试，运行：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, when we navigate to the VIEW DEVICE page, we should see the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们导航到VIEW DEVICE页面时，我们应该看到以下内容：
- en: '![](../images/00106.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00106.jpeg)'
- en: Now that we are done with the desktop app, we will work on the mobile app.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在桌面应用程序已经完成，我们将开始处理移动应用程序。
- en: Updating the mobile app
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新移动应用程序
- en: 'To reflect the new template in the mobile app, we will update `mobile-app/src/pages/view-device/view-device.html`,
    as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在移动应用程序中反映新的模板，我们将更新`mobile-app/src/pages/view-device/view-device.html`，如下所示：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Save all of the files and run the mobile app by using:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有文件并通过以下方式运行移动应用程序：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You could also use:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We should see the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下内容：
- en: '![](../images/00107.gif)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00107.gif)'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we worked with the concept of fall detection and IFTTT. Using
    the smart wearable we built in [Chapter 6](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee),
    *Smart Wearable*, we added the fall detection logic. Then, we posted the same
    data to the API engine, and in the API engine, we built our own IFTTT rules engine.
    We defined one rule for sending an email when a fall was detected.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了跌倒检测和IFTTT的概念。使用我们在[第6章](part0111.html#39REE0-ce91715363d04669bca1c1545beb57ee)中构建的智能可穿戴设备，我们添加了跌倒检测逻辑。然后，我们将相同的数据发送到API引擎，并在API引擎中构建了自己的IFTTT规则引擎。我们定义了一个规则，用于在检测到跌倒时发送电子邮件。
- en: As well as this, we also updated the web, desktop, and mobile apps to reflect
    the new data we collected.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还更新了Web、桌面和移动应用程序，以反映我们收集到的新数据。
- en: In [Chapter 8](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee), *Raspberry
    Pi Image Streaming*, we are going to work with video surveillance using Raspberry
    Pi.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0129.html#3R0OI0-ce91715363d04669bca1c1545beb57ee)中，*树莓派图像流*，我们将使用树莓派进行视频监控。
