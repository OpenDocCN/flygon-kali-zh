- en: '*Chapter 9*: Advanced Uses of Cypress Test Runner'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：Cypress测试运行器的高级用法'
- en: Before we get started on advanced uses of the Test Runner, it is crucial that
    you understand how Cypress works, the role of the Test Runner, and how tests are
    executed in the Test Runner. This chapter builds on the knowledge of Cypress that
    you have acquired in the previous eight chapters and will focus on assisting you
    to understand the advanced functions of the Test Runner that we have not yet explored
    in this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论测试运行器的高级用法之前，您必须了解Cypress的工作原理、测试运行器的作用以及测试在测试运行器中的执行方式是至关重要的。本章是在您在前八章中所学到的Cypress知识的基础上构建的，并将重点放在帮助您理解测试运行器的高级功能上，这些功能在本书中尚未探讨过。
- en: 'Throughout this chapter, we will utilize the Test Runner and learn how to write
    better tests by making use of the built-in functions of the Test Runner. By learning
    how to use the Test Runner, we will have a deeper understanding of how tests run,
    what happens when they are failing, and how they can be improved. We will cover
    the following key topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将利用测试运行器，并通过利用测试运行器的内置功能来学习如何编写更好的测试。通过学习如何使用测试运行器，我们将更深入地了解测试的运行方式，当测试失败时会发生什么，以及如何改进它们。本章将涵盖以下关键主题：
- en: Understanding the instrument panel
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解仪表板
- en: Understanding the Selector Playground
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解选择器游乐场
- en: Test Runner keyboard shortcuts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试运行器键盘快捷键
- en: Once you've worked through each of these topics, you will have a full understanding
    of the Test Runner and how to fully utilize it in the process of writing your
    tests.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您学习了这些主题，您将完全了解测试运行器，以及如何充分利用它来编写您的测试。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, we recommend you clone the repository containing the source
    code and all the tests that we will write in this chapter from GitHub.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们建议您从GitHub克隆包含本章中将编写的所有源代码和测试的存储库。
- en: Important note
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: We have covered how to read and interpret Cypress errors in the Test Runner
    in [*Chapter 5*](B15616_05_Final_NM_ePUB.xhtml#_idTextAnchor119), *Debugging Cypress
    Tests*. In that chapter, we also covered how we can interact with DOM snapshots
    in the Test Runner, where we covered the interaction between elements and the
    command log. In this chapter, we might make references to [*Chapter 5*](B15616_05_Final_NM_ePUB.xhtml#_idTextAnchor119),
    *Debugging Cypress Tests*, or further expound on the information provided in that
    chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第5章*](B15616_05_Final_NM_ePUB.xhtml#_idTextAnchor119) *调试Cypress测试*中介绍了如何阅读和解释测试运行器中的Cypress错误。在该章节中，我们还介绍了如何与测试运行器中的DOM快照进行交互，其中我们涵盖了元素和命令日志之间的交互。在本章中，我们可能会参考[*第5章*](B15616_05_Final_NM_ePUB.xhtml#_idTextAnchor119)
    *调试Cypress测试*，或者进一步阐述该章节提供的信息。
- en: The GitHub repository for this chapter can be found at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub存储库可以在[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)找到。
- en: The source code for this chapter can be found in the `chapter-09` directory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在`chapter-09`目录中找到。
- en: Understanding the instrument panel
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解仪表板
- en: The instrument panel is a special panel in the Cypress Test Runner that is only
    visible when Cypress is providing you with additional information about your tests.
    The appearance of the instrument panel is triggered by specific commands that
    provide more information about the tests. The commands that trigger the instrument
    panel include `cy.stub()`, `cy.intercept()`, and `cy.spy()`. In this section,
    we will explore how we can use the instrument panel to display additional information
    about tests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板是Cypress测试运行器中的一个特殊面板，只有当Cypress为您提供有关测试的其他信息时才可见。仪表板的出现是由特定命令触发的，这些命令提供了有关测试的更多信息。触发仪表板的命令包括`cy.stub()`、`cy.intercept()`和`cy.spy()`。在本节中，我们将探讨如何使用仪表板来显示有关测试的其他信息。
- en: To achieve our goal of understanding how the instrument panel works, we will
    have to understand how **intercepts**, **stubs**, and **spies** work, along with
    what specific information is displayed on the instrument panel when stubs, routes,
    and spies are called in Cypress tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们理解仪表板工作原理的目标，我们将不得不了解**拦截**、**存根**和**间谍**的工作原理，以及在Cypress测试中调用存根、路由和间谍时仪表板显示的具体信息。
- en: Intercepts
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拦截
- en: 'Cypress uses the `cy.intercept()` command to manage the behavior of HTTP requests
    in the network layer of a test. To understand intercepts, we first need to understand
    how network requests take place in Cypress. Cypress automatically indicates on
    the Test Runner when an **XHR** (**XMLHttpRequest**) request is made from the
    running test. Cypress additionally creates a DOM snapshot of the moment when the
    request was called and when the response was received, which gives us an idea
    of what the DOM was like before and after the request. The following code block
    is an example of a request to get the response to an XHR request from our Todo
    application:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress使用`cy.intercept()`命令来管理测试的网络层中的HTTP请求的行为。要理解拦截，我们首先需要了解Cypress中网络请求是如何进行的。Cypress会在测试运行器上自动指示当运行测试时发出**XHR**（**XMLHttpRequest**）请求。Cypress还会在请求被调用和响应被接收时创建DOM快照，这让我们了解了请求之前和之后DOM的情况。以下代码块是一个示例，用于从我们的Todo应用程序获取对XHR请求的响应：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code block shows Cypress' `cy.intercept()` command listening for
    an XHR response that it expects Cypress to make on initialization of the application.
    In the test, we are verifying that the request was indeed made to the application,
    as we are waiting for the route response to have been called before our test completes
    execution.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块显示了Cypress的`cy.intercept()`命令监听对初始化应用程序时Cypress预期进行的XHR响应。在测试中，我们正在验证确实已经向应用程序发出了请求，因为我们正在等待路由响应在我们的测试执行完成之前被调用。
- en: Cypress has the capability to interpret requests, which makes it easy for the
    framework to manage HTTP requests by listening to the HTTP requests that the tests
    are making and knowing the responses that are returned by the request calls.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress有能力解释请求，这使得框架可以轻松地通过监听测试发出的HTTP请求并知道请求调用返回的响应来管理HTTP请求。
- en: Intercepts in Cypress, using the `cy.intercept()` command, provide the ability
    to override XHR responses returned by the requests made by Cypress tests during
    execution. Overriding the XHR responses made by our application is what we call
    **stubbing** and we will look at this concept later in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cypress中，使用`cy.intercept()`命令进行拦截提供了覆盖Cypress测试执行期间由请求发出的XHR响应的能力。覆盖我们应用程序发出的XHR响应就是我们所谓的**存根**，我们将在本章后面讨论这个概念。
- en: 'Cypress logs all the intercepts information on the instrument panel, and by
    looking at the panel, we can tell the number of matched routes in our tests, whether
    there were any responses that matched our routes, and whether they are stubbed
    or not. The following screenshot illustrates the use of the instrument panel to
    elaborate the information logged by Cypress concerning the routes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在仪表板上记录了所有拦截的信息，通过查看面板，我们可以知道在我们的测试中匹配的路由数量，是否有任何与我们的路由匹配的响应，以及它们是否被存根。以下截图说明了使用仪表板来详细说明Cypress记录的有关路由的信息：
- en: '![Figure 9.1 – Cypress instrument panel'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – Cypress仪表板'
- en: '](image/Figure_9.1_B15616.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_9.1_B15616.jpg)'
- en: Figure 9.1 – Cypress instrument panel
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – Cypress仪表板
- en: '*Figure 9.1* shows the area represented by the instrument panel labeled **Routes**
    and in it, it contains columns of different types of information that the route
    responses have when a test has completed running. The different columns in the
    instrument panel for the routes have different purposes and are significant to
    both the running test and the instrument panel. The following are the different
    columns, each described with its use and significance in Cypress routing:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9.1*显示了仪表板上标有**路由**的区域，其中包含了不同类型的信息列，当测试完成运行时，路由响应的信息就会显示在这里。路由仪表板中的不同列具有不同的目的，并且对于运行测试和仪表板都是重要的。以下是不同的列，每个列都有其在Cypress路由中的用途和重要性的描述：'
- en: '**Method** (**1**): The **Method** column represents the request that the `cy.intercept()`
    command is expecting, and depending on the expected request, it can either be
    **GET**, **POST**, **PUT**, **PATCH**, or even **DELETE**.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**（**1**）：**方法**列代表`cy.intercept()`命令期望的请求，根据预期的请求，它可以是**GET**、**POST**、**PUT**、**PATCH**甚至**DELETE**。'
- en: '**Url** (**2**): The **Url** column will display the URL expected by our `cy.intercept()`
    command when running the Cypress tests. In this case, we have told Cypress to
    look for any route that ends with `learn.json` and if it encounters it then our
    test should pass.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**（**2**）：**URL**列将显示运行Cypress测试时`cy.intercept()`命令期望的URL。在这种情况下，我们告诉Cypress查找任何以`learn.json`结尾的路由，如果遇到它，那么我们的测试应该通过。'
- en: '**Stubbed** (**3**): The **Stubbed** column will show whether our route has
    been stubbed or not. When a route is stubbed, Cypress will not return the response
    that was received, but the response that we pass to the route.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存根**（**3**）：**存根**列将显示我们的路由是否已被存根。当路由被存根时，Cypress不会返回接收到的响应，而是返回我们传递给路由的响应。'
- en: '**Alias** (**4**): The **Alias** column shows the aliases that we have given
    our route in Cypress. In [*Chapter 8*](B15616_08_Final_NM_ePUB.xhtml#_idTextAnchor183),
    *Understanding Variables and Aliases in Cypress*, we learned about aliases and
    how they can be useful when we need to access the information of an element, a
    route, or even a request. The alias provided in the **Alias** column is what we
    use to call our route, and this we will do by appending an `@` prefix before the
    alias.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**别名**（**4**）：**别名**列显示了我们在Cypress中给予路由的别名。在[*第8章*](B15616_08_Final_NM_ePUB.xhtml#_idTextAnchor183)中，*了解Cypress中的变量和别名*，我们学习了别名以及当我们需要访问元素、路由或请求的信息时它们可以是有用的。**别名**列中提供的别名是我们用来调用我们的路由的，我们将在别名前加上`@`前缀来做到这一点。'
- en: '**#** (**5**): This match column will show the count of the responses that
    matched our route. In our case, the request to our URL was only made once and
    therefore our route was only called once in our tests.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**#**（**5**）：这个匹配列将显示与我们的路由匹配的响应的计数。在我们的情况下，对我们的URL的请求只被发出了一次，因此我们的路由在我们的测试中只被调用了一次。'
- en: The instrument panel information on the routes is sufficient for you to understand
    if any XHR requests were made to the routes that have already been declared in
    our tests and if the methods and number of request times are consistent with what
    is expected in the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 路由的仪表板信息足以让您了解在我们的测试中是否有任何XHR请求发送到已在我们的测试中声明的路由，并且方法和请求次数是否与应用程序中预期的一致。
- en: Stubs
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存根
- en: 'Stubs in Cypress are used to replace a function, control its behavior, or record
    its usage. Stubs can be used to replace actual methods with synthetic responses
    that we write ourselves. In the following code block, we will just verify that
    we can stub a method called `foo` when our test runs:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress中的存根用于替换函数，控制其行为或记录其使用情况。存根可用于用我们自己编写的合成响应替换实际方法。在下面的代码块中，我们将验证我们在测试运行时可以存根名为`foo`的方法：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `foo()` method shown in the preceding code block illustrates stubbing in
    action and from the code, we can see that we are expecting Cypress to know that
    our stub was called when the `foo` function is called from the test. The following
    screenshot shows the test executing and the details of the passed tests with the
    type of stub, stub name, and the number of times the stub was called:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中显示的`foo()`方法说明了存根的实际操作，从代码中我们可以看到我们期望Cypress知道我们的存根在测试中被调用了。以下截图显示了测试执行和通过测试的详细信息，包括存根类型、存根名称以及存根被调用的次数：
- en: '![Figure 9.2 – Cypress stubbing'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – Cypress存根'
- en: '](image/Figure_9.2_B15616.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_9.2_B15616.jpg)'
- en: Figure 9.2 – Cypress stubbing
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – Cypress存根
- en: In *Figure 9.2*, Cypress shows our created stubs in the instrument panel and
    also shows the number of times the stubs were called during the execution of our
    tests. Stubbing comes in handy as we can stub out dependencies or functions that
    we do not necessarily want to test in our scope.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图9.2*中，Cypress显示了我们在仪表板中创建的存根，并显示了在执行测试过程中调用存根的次数。存根非常方便，因为我们可以存根化我们不想在范围内进行测试的依赖项或函数。
- en: Spies
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 间谍
- en: 'Spies behave just like stubs, with the difference that they wrap a method in
    the spy for them to record the calls and the arguments to the function. Spies
    are only used for verification of working elements or methods in Cypress. The
    most common use in tests is to verify that certain calls were made in the test
    and not necessarily for changing the expectations of the calls as in the case
    of stubs. The following screenshot shows the spy of a method where we verify that
    the `foo` method was called inside our `cy.spy()` method:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍的行为与存根完全相同，不同之处在于它们包装了间谍方法中的方法，以记录对函数的调用和参数。间谍仅用于验证Cypress中工作元素或方法。在测试中最常见的用法是验证测试中是否进行了某些调用，而不一定是为了改变对调用的期望，就像存根的情况一样。以下屏幕截图显示了我们验证`foo`方法是否在我们的`cy.spy()`方法中被调用的间谍：
- en: '![Figure 9.3 – Cypress spying'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3-Cypress间谍'
- en: '](image/Figure_9.3_B15616.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_9.3_B15616.jpg)'
- en: Figure 9.3 – Cypress spying
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3-Cypress间谍
- en: In *Figure 9.3*, the instrument panel plays a crucial role in showing us calls
    that were made to our `spy` function, what the name of the function is, the aliases
    allocated to our spy method, and the type of our test method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图9.3*中，仪表板在显示调用我们的`spy`函数时发挥了关键作用，函数的名称，分配给我们的间谍方法的别名以及我们的测试方法的类型。
- en: Recap – understanding the instrument panel
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-理解仪表板
- en: In this section, we learned how we can utilize the instrument panel to understand
    intercepts, spies, and stubs in Cypress. We also learned how intercepts, spies,
    and stubs actually work and how the information on the instrument panel is useful
    to understand whether our implementation is correct. In the next section, we will
    dive into understanding the Selector Playground in Cypress and see how it works.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何利用仪表板来理解Cypress中的拦截、间谍和存根。我们还学习了拦截、间谍和存根实际上是如何工作的，以及仪表板上的信息对于理解我们的实现是否正确是有用的。在下一节中，我们将深入了解Cypress中的选择器游乐场以及它的工作原理。
- en: Understanding the Selector Playground
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解选择器游乐场
- en: The Selector Playground is an interactive feature of the Cypress Test Runner.
    The Selector Playground gives you the ability to determine unique selectors, check
    elements that match a specific selector, and check the elements that match a specific
    text in the Cypress application. In this section, we will look at different strategies
    that Cypress uses to select elements and how from the Test Runner we can identify
    the selectors that we can use in our tests. By the end of this section, you will
    learn how to use Cypress to uniquely select elements using the Selector Playground
    and also how to use the selector strategies that Cypress utilizes to run tests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器游乐场是Cypress测试运行器的一个交互式功能。选择器游乐场使您能够确定唯一选择器，检查与特定选择器匹配的元素，并检查与Cypress应用程序中特定文本匹配的元素。在本节中，我们将看看Cypress用于选择元素的不同策略，以及从测试运行器中如何识别我们可以在测试中使用的选择器。在本节结束时，您将学会如何使用Cypress使用选择器游乐场来唯一选择元素，以及如何使用Cypress使用的选择器策略来运行测试。
- en: Selecting unique elements
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择唯一元素
- en: The Selector Playground could be one of the most underutilized features in the
    Cypress Test Runner, but also one of the most useful for anyone who wants to write
    tests that have meaningful selectors. The Selector Playground enables us to identify
    valid selectors and unique selectors for elements in our test application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器游乐场可能是Cypress测试运行器中最未充分利用的功能之一，但对于想要编写具有有意义选择器的测试的人来说，它也是最有用的。选择器游乐场使我们能够识别测试应用程序中元素的有效选择器和唯一选择器。
- en: 'In the Selector Playground, Cypress calculates a unique selector for the targeted
    element and determines the selector by evaluating built-in selector strategies
    that are enabled by default in the test framework. The following shows two added
    todo items and an open Cypress Selector Playground showing how we can uniquely
    select any of the todo items:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择器游乐场中，Cypress计算了目标元素的唯一选择器，并通过评估测试框架中默认启用的内置选择器策略来确定选择器。以下显示了两个添加的待办事项和一个打开的Cypress选择器游乐场，显示了我们如何唯一选择任何待办事项：
- en: '![Figure 9.4 – Cypress Selector Playground'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4-Cypress选择器游乐场'
- en: '](image/Figure_9.4_B15616.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_9.4_B15616.jpg)'
- en: Figure 9.4 – Cypress Selector Playground
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4-Cypress选择器游乐场
- en: The first step is to click the Selector Playground button and once you click
    on it, the Selector Playground menu appears as shown in *Figure 9.4*. In the Selector
    Playground menu, you have the option to change the type of selector to either
    select elements with their selectors using `cy.get()` or using the element text,
    which can be found by toggling the selector to be `cy.contains()`. Inside, either
    the `cy.get()` command or the `cy.contains()` command is the specific element
    or text that we want to get from our application preview. For any element or text
    to qualify to be a unique element selector, the number of matched elements, represented
    by the gray color on the Selector Playground, should be **1** in order to ensure
    that we do not have duplicates of the element or the text. The buttons next to
    the label of the matched elements represent a copy command to copy the selector
    to the clipboard, while the next button is a print button that will print our
    selected or chosen command to the browser's console log.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是点击选择器游乐场按钮，一旦点击它，选择器游乐场菜单就会出现，如*图9.4*所示。在选择器游乐场菜单中，您可以选择将选择器的类型更改为使用`cy.get()`选择其选择器的元素，或者使用元素文本，这可以通过将选择器切换为`cy.contains()`来找到。在`cy.get()`命令或`cy.contains()`命令中，是我们想要从应用程序预览中获取的特定元素或文本。为了确保任何元素或文本有资格成为唯一的元素选择器，匹配元素的数量，由选择器游乐场上的灰色表示，应为**1**，以确保我们没有元素或文本的重复。匹配元素标签旁边的按钮代表将选择器复制到剪贴板的复制命令，而下一个按钮是一个打印按钮，将我们选择或选择的命令打印到浏览器的控制台日志中。
- en: When the mouse button below the Selector Playground is clicked, Cypress automatically
    shows a popup when a user hovers over an element and automatically selects a unique
    selector that can be used to identify the element in our tests. In *Figure 9.4*,
    we can see that once the **New Todo** item is hovered over, Cypress shows the
    unique selector as a tooltip and also populates the `cy.get()` command when the
    element is clicked. When an element is selected on the Selector Playground menu,
    Cypress will return the unique selector on the Selector Playground.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击选择器游乐场下方的鼠标按钮时，Cypress会自动显示一个弹出窗口，当用户悬停在元素上时，会自动选择一个可以用于在我们的测试中识别元素的唯一选择器。在*图9.4*中，我们可以看到一旦悬停在**New
    Todo**项目上，Cypress会将唯一选择器显示为工具提示，并且在单击元素时还会填充`cy.get()`命令。当在选择器游乐场菜单上选择元素时，Cypress将在选择器游乐场上返回唯一的选择器。
- en: Determination of selectors
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择器的确定
- en: 'For Cypress to determine unique selectors in the Selector Playground, it uses
    a strategy of preference where the selectors selected are based on a series of
    strategies known to Cypress. Cypress has a preference for the following strategies
    when selecting and allocating unique selectors to elements:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定选择器游乐场中的唯一选择器，Cypress使用了一种偏好策略，选择的选择器基于Cypress已知的一系列策略。Cypress在选择和分配唯一选择器给元素时，偏好以下策略：
- en: '`data-cy`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-cy`'
- en: '`data-test`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-test`'
- en: '`data-testid`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-testid`'
- en: '`id`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`'
- en: '`class`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class`'
- en: '`tag`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tag`'
- en: '`attributes`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributes`'
- en: '`nth-child`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nth-child`'
- en: Important note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The Selector Playground prefers selector strategies that begin with `data-*`
    in their identification format. In most instances, the selector strategies are
    custom and therefore eliminate the chances of flaky tests due to the use of dynamic
    IDs, class names in an application, or a change of CSS due to content changes.
    With custom `data-*` tags, the selector identifiers do not change and can be persisted
    throughout the life cycle of the application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器游乐场更喜欢以`data-*`开头的选择器策略作为它们的识别格式。在大多数情况下，选择器策略是自定义的，因此消除了由于应用程序中使用动态ID、类名或CSS更改而导致测试不稳定的可能性。使用自定义的`data-*`标签，选择器标识符不会改变，并且可以在应用程序的整个生命周期中持续存在。
- en: When an element can be identified by any of these selector strategies, Cypress
    will then display the unique selector of the element. While these strategies are
    what Cypress prefers, it is possible to alter the configuration and make Cypress
    recognize your selector strategy by adding it to the list of recognizable selector
    strategies.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素可以通过任何这些选择器策略进行识别时，Cypress将显示元素的唯一选择器。虽然这些策略是Cypress偏好的策略，但可以通过更改配置来使Cypress识别您的选择器策略，并将其添加到可识别的选择器策略列表中。
- en: Editing selector elements
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑选择器元素
- en: 'The Selector Playground gives users the ability to edit the selectors for the
    selected elements. Having the ability to edit the selector elements is important
    as a more targeted selection and a more refined selector tag can be generated
    in a way that Cypress may not be able to by itself. Cypress automatically recognizes
    the changes made to the Selector Playground and will highlight the Selector Playground
    in blue when there is a match for the edited selector elements, or in red if there
    was no match for the edited selector identifier in the Selector Playground of
    the application preview. *Figure 9.5* and *Figure 9.6* show editing the Selector
    Playground with correct element selectors and also with an incorrect element selector:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器游乐场使用户能够编辑所选元素的选择器。编辑选择器元素的能力很重要，因为可以生成更有针对性的选择和更精细的选择器标记，这是Cypress本身可能无法做到的。Cypress会自动识别对选择器游乐场所做的更改，并且当编辑的选择器元素有匹配时，将选择器游乐场突出显示为蓝色，如果在应用程序预览的选择器游乐场中对编辑的选择器标识符没有匹配时，则突出显示为红色。*图9.5*和*图9.6*显示了使用正确的元素选择器编辑选择器游乐场以及使用不正确的元素选择器：
- en: '![Figure 9.5 – Valid element selector in the Playground'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.5 - 游乐场中的有效元素选择器'
- en: '](image/Figure_9.5_B15616.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_9.5_B15616.jpg)'
- en: Figure 9.5 – Valid element selector in the Playground
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 - 游乐场中的有效元素选择器
- en: 'In *Figure 9.5*, editing the Selector Playground with an invalid element selector
    shows an error and highlights the Selector Playground in red to show us that no
    element was found using the selector element that we provided. *Figure 9.6*, on
    the other hand, shows editing the Selector Playground element selector is successful:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图9.5*中，使用无效的元素选择器编辑选择器游乐场会显示错误，并用红色突出显示选择器游乐场，以向我们显示使用我们提供的选择器元素未找到任何元素。另一方面，*图9.6*显示编辑选择器游乐场元素选择器是成功的：
- en: '![Figure 9.6 – Invalid element selector in the Playground'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.6-游乐场中的无效元素选择器'
- en: '](image/Figure_9.6_B15616.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_9.6_B15616.jpg)'
- en: Figure 9.6 – Invalid element selector in the Playground
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6-游乐场中的无效元素选择器
- en: As observed in *Figure 9.6*, we are able to select both of our todo items with
    the selector that we edited in the Selector Playground. The blue color shows that
    Cypress found the elements that we are searching for, and did this by showing
    a count of the elements on the right side of the element selector input in the
    Selector Playground.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图9.6*所示，我们能够使用在选择器游乐场中编辑的选择器选择我们的两个待办事项。蓝色显示了Cypress找到了我们正在搜索的元素，并通过在选择器游乐场中的元素选择器输入右侧显示元素数量来实现这一点。
- en: Recap – understanding the Selector Playground
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-理解选择器游乐场
- en: In this section, we learned what the Selector Playground is and how important
    it is when using the Test Runner to run our tests. We learned how we can use the
    Selector Playground to select elements, modify elements, and even select and copy
    unique elements from the application preview of the Cypress Test Runner. We also
    learned how Cypress identifies elements and the selector strategies that are preferred
    when selecting elements. Finally, we learned how we can edit the locators in the
    Selector Playground and how we can identify whether our selectors are valid or
    not. In the next section, we will look at how the keyboard shortcuts work on the
    Test Runner.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们学习了选择器游乐场是什么，以及在使用测试运行器运行测试时它有多重要。我们学习了如何使用选择器游乐场来选择元素，修改元素，甚至从Cypress测试运行器的应用程序预览中选择和复制唯一元素。我们还学习了Cypress如何识别元素以及在选择元素时首选的选择器策略。最后，我们学习了如何在选择器游乐场中编辑定位器，以及如何确定我们的选择器是否有效。在下一节中，我们将看看测试运行器上的键盘快捷键是如何工作的。
- en: Test Runner keyboard shortcuts
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试运行器键盘快捷键
- en: Keyboard shortcuts come in handy especially when we do not want to perform manual
    actions on the browser that involve a series of steps. In this section, we will
    learn how to use three keyboard shortcuts to control the Cypress Test Runner and
    to run our tests effectively. With the Test Runner, we will perform common actions
    more quickly than we would when explicitly triggering the actions with the browser
    actions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘快捷键在我们不想在浏览器上执行一系列步骤的情况下特别方便。在本节中，我们将学习如何使用三个键盘快捷键来控制Cypress测试运行器并有效地运行我们的测试。通过测试运行器，我们将比使用浏览器操作显式触发操作更快地执行常见操作。
- en: 'The following are the mappings of different keyboard keys and their associated
    actions:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不同键盘键的映射及其关联的操作：
- en: '*R* – Rerunning the tests of a spec file(s)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*R* - 重新运行规范文件的测试'
- en: '*S* – Stopping the running tests'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*S* - 停止运行测试'
- en: '*F* – Viewing all tests in the spec window'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*F* - 查看规范窗口中的所有测试'
- en: These keyboard keys will trigger different actions on the Test Runner depending
    on the key presses made by the user.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些键盘键将根据用户的按键触发测试运行器上的不同操作。
- en: Recap – Test Runner keyboard shortcuts
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-测试运行器键盘快捷键
- en: In this section, we learned how Cypress keyboard shortcuts can be used to control
    the common actions of the Test Runner using three keys on the keyboard. We also
    learned that performing actions using the keyboard yields quicker actions than
    when triggering the same actions using the browser actions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用Cypress键盘快捷键来控制测试运行器的常见操作，只需键盘上的三个键。我们还了解到，使用键盘执行操作比使用浏览器操作触发相同操作时更快。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the instrument panel, Selector Playground,
    and keyboard shortcuts in the Cypress Test Runner. We explored how the instrument
    panel works with stubs, spies, and routes and explored how routes, stubs, and
    spies work, and what information is shown in the instrument panel. We also looked
    at how the Selector Playground is utilized in Cypress and how we can leverage
    it to identify elements for the application under test, and also to optimize the
    selectors that Cypress uses to uniquely select elements. Finally, we learned what
    Cypress keyboard shortcuts do and what keys are mapped to the actions that are
    available using the browser functionality.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了仪表板、选择器游乐场和Cypress测试运行器中的键盘快捷键。我们探讨了仪表板如何与存根、间谍和路由一起工作，并探讨了路由、存根和间谍的工作原理，以及仪表板中显示的信息。我们还看了选择器游乐场在Cypress中的应用以及我们如何利用它来识别应用程序测试中的元素，以及优化Cypress用于唯一选择元素的选择器。最后，我们学习了Cypress键盘快捷键的作用以及哪些键与使用浏览器功能可用的操作相对应。
- en: Now that we know and understand how different elements in Cypress tie together,
    we can go further to test our knowledge on the topics we have learned through
    our exercises. In the next chapter, we will test our knowledge on navigation,
    network requests, and navigation configuration options for tests.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道并理解了Cypress中不同元素是如何联系在一起的，我们可以进一步通过练习来测试我们所学到的知识。在下一章中，我们将测试我们对导航、网络请求和测试的导航配置选项的了解。
