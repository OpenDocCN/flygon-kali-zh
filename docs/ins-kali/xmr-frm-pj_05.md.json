["```cs\nusing System.Collections.Generic;\n\nnamespace Weather.Models\n{\n    public class Main\n    {\n        public double temp { get; set; }\n        public double temp_min { get; set; }\n        public double temp_max { get; set; }\n        public double pressure { get; set; }\n        public double sea_level { get; set; }\n        public double grnd_level { get; set; }\n        public int humidity { get; set; }\n        public double temp_kf { get; set; }\n    }\n\n    public class Weather\n    {\n        public int id { get; set; }\n        public string main { get; set; }\n        public string description { get; set; }\n        public string icon { get; set; }\n    }\n\n    public class Clouds\n    {\n        public int all { get; set; }\n    }\n\n    public class Wind\n    {\n        public double speed { get; set; }\n        public double deg { get; set; }\n    }\n\n    public class Rain\n    {\n    }\n\n    public class Sys\n    {\n        public string pod { get; set; }\n    }\n\n    public class List\n    {\n        public long dt { get; set; }\n        public Main main { get; set; }\n        public List<Weather> weather { get; set; }\n        public Clouds clouds { get; set; }\n        public Wind wind { get; set; }\n        public Rain rain { get; set; }\n        public Sys sys { get; set; }\n        public string dt_txt { get; set; }\n    }\n\n    public class Coord\n    {\n        public double lat { get; set; }\n        public double lon { get; set; }\n    }\n\n    public class City\n    {\n        public int id { get; set; }\n        public string name { get; set; }\n        public Coord coord { get; set; }\n        public string country { get; set; }\n    }\n\n    public class WeatherData\n    {\n        public string cod { get; set; }\n        public double message { get; set; }\n        public int cnt { get; set; }\n        public List<List> list { get; set; }\n        public City city { get; set; }\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Weather.Models\n{  \n    public class ForecastItem\n    {\n        public DateTime DateTime { get; set; }\n        public string TimeAsString => DateTime.ToShortTimeString();\n        public double Temperature { get; set; }\n        public double WindSpeed { get; set; }\n        public string Description { get; set; }\n        public string Icon { get; set; }\n    }\n}     \n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Weather.Models\n{ \n    public class Forecast\n    {\n        public string City { get; set; }\n        public List<ForecastItem> Items { get; set; }\n    }\n}\n```", "```cs\n public interface IWeatherService\n {\n      Task<Forecast> GetForecast(double latitude, double longitude);\n }\n```", "```cs\nusing System;\nusing System.Globalization;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing Weather.Models; \n\nnamespace Weather.Services\n{ \n    public class OpenWeatherMapWeatherService : IWeatherService\n    {\n        public async Task<Forecast> GetForecast(double latitude, \n        double longitude)\n        { \n        }\n    }\n}\n```", "```cs\npublic class OpenWeatherMapWeatherService : IWeatherService\n{\n    public async Task<Forecast> GetForecast(double latitude, double \n    longitude)\n    { \n        var language =  \n        CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;\n var apiKey = \"{AddYourApiKeyHere}\";\n var uri = \n        $\"https://api.openweathermap.org/data/2.5/forecast?\n        lat={latitude}&lon={longitude}&units=metric&lang=\n        {language}&appid={apiKey}\";\n    }\n}\n```", "```cs\npublic async Task<Forecast> GetForecast(double latitude, double  \n                                        longitude)\n{ \n    var language = \n    CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;\n    var apiKey = \"{AddYourApiKeyHere}\";\n    var uri = $\"https://api.openweathermap.org/data/2.5/forecast?\n    lat={latitude}&lon={longitude}&units=metric&lang=\n    {language}&appid={apiKey}\";\n\n    var httpClient = new HttpClient();\n    var result = await httpClient.GetStringAsync(uri);\n\n    var data = JsonConvert.DeserializeObject<WeatherData>(result);\n\n    var forecast = new Forecast()\n    {\n        City = data.city.name,\n        Items = data.list.Select(x => new ForecastItem()\n        {\n            DateTime = ToDateTime(x.dt),\n            Temperature = x.main.temp,\n            WindSpeed = x.wind.speed,\n            Description = x.weather.First().description,\n            Icon = \n     $\"http://openweathermap.org/img/w/{x.weather.First().icon}.png\"\n     }).ToList()\n    };\n\n    return forecast;\n}\n\n```", "```cs\nprivate DateTime ToDateTime(double unixTimeStamp)\n{\n     DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, \n     DateTimeKind.Utc);\n     dateTime = dateTime.AddSeconds(unixTimeStamp).ToLocalTime();\n     return dateTime;\n}\n```", "```cs\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>We are using your location to find a forecast for you</string>\n```", "```cs\npublic override void OnRequestPermissionsResult(int requestCode, string[] permissions, \n[GeneratedEnum] Android.Content.PM.Permission[] grantResults)\n{\n     Xamarin.Essentials.Platform.OnRequestPermissionsResult(requestCode, permissions, grantResults); base.OnRequestPermissionsResult(requestCode, permissions, grantResults);\n}\n```", "```cs\nprotected override void OnCreate(Bundle savedInstanceState)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n\n    base.OnCreate(savedInstanceState);\n\n    global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n    Xamarin.Essentials.Platform.Init(this, savedInstanceState);\n    LoadApplication(new App());\n}\n```", "```cs\npublic abstract class ViewModel : INotifyPropertyChanged\n{\n     public event PropertyChangedEventHandler PropertyChanged; \n     protected void Set<T>(ref T field, T newValue, \n     [CallerMemberName] string propertyName = null)\n     {\n          if (!EqualityComparer<T>.Default.Equals(field, \n          newValue))\n          {\n               field = newValue;\n               PropertyChanged?.Invoke(this, new \n               PropertyChangedEventArgs(propertyName));\n          }\n     }\n} \n```", "```cs\npublic class MainViewModel : ViewModel\n{\n     private readonly IWeatherService weatherService;\n\n     public MainViewModel(IWeatherService weatherService)\n     {\n          this.weatherService = weatherService;\n     } \n}\n```", "```cs\npublic async Task LoadData()\n{\n     var location = await Geolocation.GetLocationAsync();\n     var forecast = await weatherService.GetForecast\n     (location.Latitude, location.Longitude); \n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Weather.Models\n{ \n    public class ForecastGroup : List<ForecastItem>\n    {\n        public ForecastGroup() { }\n        public ForecastGroup(IEnumerable<ForecastItem> items)\n        {\n            AddRange(items);\n        }\n\n        public DateTime Date { get; set; }\n        public string DateAsString => Date.ToShortDateString();\n        public List<ForecastItem> Items => this;\n    }\n} \n```", "```cs\npublic class MainViewModel : ViewModel\n{ \n private string city;\n public string City\n {\n get => city;\n set => Set(ref city, value);\n }\n\n private ObservableCollection<ForecastGroup> days;\n public ObservableCollection<ForecastGroup> Days\n {\n get => days;\n set => Set(ref days, value);\n }\n\n    // Rest of the class is omitted for brevity\n} \n```", "```cs\npublic async Task LoadData()\n{ \n    var itemGroups = new List<ForecastGroup>();\n\n    foreach (var item in forecast.Items)\n    {\n        if (!itemGroups.Any())\n        {\n            itemGroups.Add(new ForecastGroup(\n             new List<ForecastItem>() { item }) \n             { Date = item.DateTime.Date});\n             continue;\n        }\n\n        var group = itemGroups.SingleOrDefault(x => x.Date == \n        item.DateTime.Date);\n\n        if (group == null)\n        {\n            itemGroups.Add(new ForecastGroup(\n            new List<ForecastItem>() { item }) \n            { Date = item.DateTime.Date });\n\n                      continue;\n        }\n\n        group.Items.Add(item);\n    }\n\n    Days = new ObservableCollection<ForecastGroup>(itemGroups);\n    City = forecast.City;\n}\n```", "```cs\nusing Autofac;\n\nnamespace Weather\n{ \n    public class Resolver\n    {\n        private static IContainer container;\n\n        public static void Initialize(IContainer container)\n        {\n            Resolver.container = container;\n        }\n\n        public static T Resolve<T>()\n        {\n            return container.Resolve<T>();\n        }\n    }\n} \n```", "```cs\nusing Autofac;\nusing TinyNavigationHelper.Forms;\nusing Weather.Services;\nusing Weather.ViewModels;\nusing Weather.Views;\nusing Xamarin.Forms;\n\nnamespace Weather\n{ \n    public class Bootstrapper\n    {\n        public static void Init()\n        {\n            var containerBuilder = new ContainerBuilder();\n            containerBuilder.RegisterType\n            <OpenWeatherMapWeatherService>().As\n            <IWeatherService>();\n            containerBuilder.RegisterType<MainViewModel>();\n\n            var container = containerBuilder.Build();\n\n            Resolver.Initialize(container);\n        }\n    }\n}\n```", "```cs\npublic App()\n{\n    InitializeComponent();\n    Bootstrapper.Init();\n    MainPage = new NavigationPage(new MainView());\n} \n```", "```cs\nusing System.Collections.Generic;\nusing Xamarin.Essentials;\nusing Xamarin.Forms;\n\nnamespace Weather.Controls\n{ \n    public class ReperaterView : FlexLayout\n    {\n        private DataTemplate itemsTemplate;\n        public DataTemplate ItemsTemplate\n        {\n            get => itemsTemplate;\n            set\n            {\n                itemsTemplate = value;\n                MainThread.BeginInvokeOnMainThread(() => \n                Generate());\n            }\n        } \n\n        public void Generate()\n        {\n        }\n    }\n}\n```", "```cs\npublic static BindableProperty ItemsSourceProperty = BindableProperty.Create(nameof(ItemsSource), typeof(IEnumerable<object>), typeof(RepeaterView), null);\n\npublic IEnumerable<object> ItemsSource\n{\n    get => GetValue(ItemsSourceProperty) as IEnumerable<object>;\n    set => SetValue(ItemsSourceProperty, value);\n}\n```", "```cs\npublic static BindableProperty ItemsSourceProperty = BindableProperty.Create(nameof(ItemsSource), typeof(IEnumerable<object>), typeof(RepeaterView), null, \n             propertyChanged: (bindable, oldValue, newValue) => {\n\n var repeater = (RepeaterView)bindable;\n\n if(repeater.ItemsTemplate == null)\n {\n return;\n }\n\n MainThread.BeginInvokeOnMainThread(() => \n                     repeater.Generate());\n                 }); \n```", "```cs\nprivate void Generate()\n{\n    Children.Clear();\n\n    if(ItemsSource == null)\n    {\n        return;\n    }\n\n    foreach(var item in ItemsSource)\n    {\n        var view = itemsTemplate.CreateContent() as View;\n\n        if(view == null)\n        {\n            return;\n        }\n\n        view.BindingContext = item;\n\n        Children.Add(view);\n    }\n} \n```", "```cs\npublic MainView ()\n{\n    InitializeComponent ();\n    BindingContext = Resolver.Resolve<MainViewModel>();\n} \n```", "```cs\nprotected override void OnAppearing()\n{\n    base.OnAppearing();\n\n if (BindingContext is MainViewModel viewModel)\n {\n MainThread.BeginInvokeOnMainThread(async () =>\n {\n await viewModel.LoadData();\n });\n }\n} \n```", "```cs\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:controls=\"clr-namespace:Weather.Controls\" \n    x:Class=\"Weather.Views.MainView\" \n    Title=\"{Binding City}\">\n```", "```cs\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n             xmlns:controls=\"clr-namespace:Weather.Controls\"\n             x:Class=\"Weather.Views.MainView\" \n```", "```cs\n<Grid>\n    <ScrollView BackgroundColor=\"Transparent\">\n        <controls:RepeaterView ItemsSource=\"{Binding Days}\"  \n                 Direction=\"Column\">\n            <controls:RepeaterView.ItemsTemplate>\n                <DataTemplate>\n                  <!--Content will be added here -->\n                </DataTemplate>\n            </controls:RepeaterView.ItemsTemplate>\n        </controls:RepeaterView>\n    </ScrollView>\n</Grid>\n```", "```cs\n<StackLayout>\n    <ContentView Padding=\"10\" BackgroundColor=\"#9F5010\">\n        <Label Text=\"{Binding DateAsString}\" TextColor=\"White\" \n         FontAttributes=\"Bold\" />\n    </ContentView> \n</StackLayout>\n```", "```cs\n <controls:RepeaterView ItemsSource=\"{Binding Items}\" Wrap=\"Wrap\"  \n  JustifyContent=\"Start\" AlignItems=\"Start\"> \n```", "```cs\n<controls:RepeaterView.ItemsTemplate>\n    <DataTemplate>\n        <StackLayout Margin=\"10\" Padding=\"20\" WidthRequest=\"150\" \n             BackgroundColor=\"#99FFFFFF\">\n            <Label FontSize=\"16\" FontAttributes=\"Bold\" Text=\"{Binding \n              TimeAsString}\" HorizontalOptions=\"Center\" />\n            <Image WidthRequest=\"100\" HeightRequest=\"100\" \n              Aspect=\"AspectFit\" HorizontalOptions=\"Center\" Source=\" \n              {Binding Icon}\" />\n            <Label FontSize=\"14\" FontAttributes=\"Bold\" Text=\"{Binding \n              Temperature, StringFormat='{0}\u00b0 C'}\"  \n              HorizontalOptions=\"Center\" /> \n            <Label FontSize=\"14\" FontAttributes=\"Bold\" Text=\"{Binding \n              Description}\" HorizontalOptions=\"Center\" />\n        </StackLayout>\n    </DataTemplate>\n</controls:RepeaterView.ItemsTemplate>\n\n```", "```cs\npublic ICommand Refresh => new Command(async() => \n{\n    await LoadData();\n}); \n```", "```cs\n<ContentPage.ToolbarItems>\n    <ToolbarItem Icon=\"refresh.png\" Text=\"Refresh\" Command=\"{Binding \n     Refresh}\" />\n</ContentPage.ToolbarItems> \n```", "```cs\nprivate bool isRefreshing;\npublic bool IsRefreshing\n{\n    get => isRefreshing;\n    set => Set(ref isRefreshing, value);\n} \n\npublic async Task LoadData()\n{\n    IsRefreshing = true; \n    .... // The rest of the code is omitted for brevity\n    IsRefreshing = false;\n}\n```", "```cs\n <Frame IsVisible=\"{Binding IsRefreshing}\" \n      BackgroundColor=\"#99FFFFFF\" \n      WidthRequest=\"100\" HeightRequest=\"100\" \n      VerticalOptions=\"Center\" \n      HorizontalOptions=\"Center\">\n      <ActivityIndicator Color=\"Black\" IsRunning=\"True\" />\n</Frame> \n```", "```cs\n<ContentPage \n\n             x:Class=\"Weather.Views.MainView\" Title=\"{Binding \n                                                       City}\">\n    <ContentPage.ToolbarItems>\n        <ToolbarItem Icon=\"refresh.png\" Text=\"Refresh\" Command=\"\n        {Binding Refresh}\" />\n    </ContentPage.ToolbarItems>\n\n <Grid>\n <Image Aspect=\"AspectFill\">\n <Image.Source>\n <UriImageSource \n           Uri=\"https://upload.wikimedia.org/wikipedia/commons/7/79/\n           Solnedg%C3%A5ng_%C3%B6ver_Laholmsbukten_augusti_2011.jpg\"            \n           CachingEnabled=\"true\" CacheValidity=\"1\" />\n </Image.Source> </Image>\n    <ScrollView BackgroundColor=\"Transparent\"> \n        <!-- The rest of the code is omitted for brevity -->\n```", "```cs\npublic MainView_Phone ()\n{\n    InitializeComponent ();\n    BindingContext = Resolver.Resolve<MainViewModel>();\n} \n```", "```cs\nprotected override void OnAppearing()\n{\n    base.OnAppearing();\n\n    if (BindingContext is MainViewModel viewModel)\n    {\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            await viewModel.LoadData();\n        });\n    }\n} \n```", "```cs\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:controls=\"clr-namespace:Weather.Controls\" \n    x:Class=\"Weather.Views.MainView_Phone\" \n    Title=\"{Binding City}\">\n```", "```cs\n<ListView ItemsSource=\"{Binding Days}\" IsGroupingEnabled=\"True\" \n          HasUnevenRows=\"True\" CachingStrategy=\"RecycleElement\" \n          BackgroundColor=\"Transparent\">\n</ListView>\n```", "```cs\n<ListView ItemsSource=\"{Binding Days}\" IsGroupingEnabled=\"True\" \n                   HasUnevenRows=\"True\" \n                   CachingStrategy=\"RecycleElement\" \n                   BackgroundColor=\"Transparent\">\n       <ListView.GroupHeaderTemplate>\n         <DataTemplate>\n             <ViewCell>\n                 <ContentView Padding=\"15,5\"  \n                  BackgroundColor=\"#9F5010\">\n              <Label FontAttributes=\"Bold\" TextColor=\"White\"  \n              Text=\"{Binding DateAsString}\"   \n              VerticalOptions=\"Center\"/>\n                  </ContentView>\n             </ViewCell>\n         </DataTemplate>\n    </ListView.GroupHeaderTemplate> \n</ListView>\n```", "```cs\n<ListView.ItemTemplate>\n    <DataTemplate>\n        <ViewCell>\n            <Grid Padding=\"15,10\" ColumnSpacing=\"10\" \n                BackgroundColor=\"#99FFFFFF\">\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"*\" />\n                    <ColumnDefinition Width=\"50\" />\n                    <ColumnDefinition Width=\"*\" />\n                    <ColumnDefinition Width=\"*\" />\n                </Grid.ColumnDefinitions>\n                <Label FontAttributes=\"Bold\" Text=\"{Binding \n                  TimeAsString}\" VerticalOptions=\"Center\" />\n                <Image Grid.Column=\"1\" HeightRequest=\"50\" \n                  WidthRequest=\"50\" Source=\"{Binding Icon}\"   \n                  Aspect=\"AspectFit\" VerticalOptions=\"Center\" />\n                <Label Grid.Column=\"2\" Text=\"{Binding Temperature, \n                StringFormat='{0}\u00b0  C'}\" VerticalOptions=\"Center\" />\n                <Label Grid.Column=\"3\" Text=\"{Binding Description}\" \n                 VerticalOptions=\"Center\" />\n            </Grid>\n        </ViewCell>\n    </DataTemplate>\n</ListView.ItemTemplate> \n```", "```cs\n<ListView ItemsSource=\"{Binding Days}\" IsGroupingEnabled=\"True\" \n           HasUnevenRows=\"True\" CachingStrategy=\"RecycleElement\" \n           BackgroundColor=\"Transparent\" \n IsPullToRefreshEnabled=\"True\" \n           RefreshCommand=\"{Binding Refresh}\" \n IsRefreshing=\"{Binding  \n           IsRefreshing}\"> \n```", "```cs\npublic class Bootstrapper\n{\n    public static void Init()\n    {\n var navigation = new \n        FormsNavigationHelper(Application.Current);\n\n if (Device.Idiom == TargetIdiom.Phone)\n {\n navigation.RegisterView(\"MainView\",  \n            typeof(MainView_Phone));\n }\n else\n {\n navigation.RegisterView(\"MainView\", typeof(MainView));\n }\n\n        var containerBuilder = new ContainerBuilder();\n        containerBuilder.RegisterType<OpenWeatherMapWeatherService>\n        ().As<IWeatherService>();\n        containerBuilder.RegisterType<MainViewModel>();\n\n        var container = containerBuilder.Build();\n\n        Resolver.Initialize(container);\n    }\n}\n\n```", "```cs\npublic App()\n{\n    InitializeComponent();\n    Bootstrapper.Execute();\n NavigationHelper.Current.SetRootView(\"MainView\", true);\n} \n```", "```cs\n<StackLayout Margin=\"10\" Padding=\"20\" WidthRequest=\"150\"  \n    BackgroundColor=\"#99FFFFFF\">\n    <VisualStateManager.VisualStateGroups>\n <VisualStateGroup> \n </VisualStateGroup>\n </VisualStateManager.VisualStateGroups> \n</StackLayout>\n```", "```cs\n <VisualStateGroup>\n     <VisualState Name=\"Portrait\">\n <VisualState.Setters>\n <Setter Property=\"WidthRequest\" Value=\"150\" />\n </VisualState.Setters>\n </VisualState>\n <VisualState Name=\"Landscape\">\n <VisualState.Setters>\n <Setter Property=\"WidthRequest\" Value=\"200\" />\n </VisualState.Setters>\n </VisualState>\n</VisualStateGroup> \n```", "```cs\n<Image WidthRequest=\"100\" HeightRequest=\"100\" Aspect=\"AspectFit\" HorizontalOptions=\"Center\" Source=\"{Binding Icon}\">\n    <VisualStateManager.VisualStateGroups>\n <VisualStateGroup>\n <VisualState Name=\"Portrait\">\n <VisualState.Setters>\n <Setter Property=\"WidthRequest\" Value=\"100\" />\n <Setter Property=\"HeightRequest\" Value=\"100\" />\n </VisualState.Setters>\n </VisualState>\n <VisualState Name=\"Landscape\">\n <VisualState.Setters>\n <Setter Property=\"WidthRequest\" Value=\"150\" />\n <Setter Property=\"HeightRequest\" Value=\"150\" />\n </VisualState.Setters>\n </VisualState>\n </VisualStateGroup>\n </VisualStateManager.VisualStateGroups>\n</Image> \n```", "```cs\nprivate string visualState;\npublic string VisualState\n{\n    get => visualState;\n    set \n    {\n        visualState = value;\n\n        foreach(var child in Children)\n        {\n            VisualStateManager.GoToState(child, visualState);\n        }\n\n        VisualStateManager.GoToState(this, visualState);\n     }\n} \n```", "```cs\nusing System;\nusing Weather.Controls;\nusing Xamarin.Essentials;\nusing Xamarin.Forms;\n\nnamespace Weather.Behaviors\n{ \n    public class RepeaterViewBehavior : Behavior<RepeaterView>\n    {\n        private RepeaterView view;\n    }\n}\n```", "```cs\nprivate void UpdateState()\n{\n    MainThread.BeginInvokeOnMainThread(() =>\n    {\n        var page = Application.Current.MainPage;\n\n        if (page.Width > page.Height)\n        {\n            view.VisualState = \"Landscape\";\n            return;\n        }\n\n        view.VisualState = \"Portrait\";\n    });\n} \n```", "```cs\nprotected override void OnAttachedTo(RepeaterView view)\n{\n    this.view = view;\n\n    base.OnAttachedTo(view);\n\n    UpdateState();\n\n    Application.Current.MainPage.SizeChanged += \n    MainPage_SizeChanged;\n} \n\n    void MainPage_SizeChanged(object sender, EventArgs e)\n{\n    UpdateState();\n} \n```", "```cs\nprotected override void OnDetachingFrom(RepeaterView view)\n{\n    base.OnDetachingFrom(view);\n\n    Application.Current.MainPage.SizeChanged -= \n    MainPage_SizeChanged;\n    this.view = null;\n}\n```", "```cs\n <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n              xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n              xmlns:controls=\"clr-namespace:Weather.Controls\" \n xmlns:behaviors=\"clr-                          \n namespace:Weather.Behaviors\"\n              x:Class=\"Weather.Views.MainView\" Title=\"{Binding City}\"> \n```", "```cs\n <controls:RepeaterView ItemsSource=\"{Binding Items}\" Wrap=\"Wrap\"  \n JustifyContent=\"Start\" AlignItems=\"Start\">\n    <controls:RepeaterView.Behaviors>\n <behaviors:RepeaterViewBehavior />\n </controls:RepeaterView.Behaviors>\n    <controls:RepeaterView.ItemsTemplate> \n```"]