- en: Introduction to Webpack 5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 5简介
- en: This book is aimed at experienced JavaScript developers, designed to take you
    through the development and production of a specific example project through step-by-step
    processes. By the time you get to the end of this guide, you should be able to
    fully set up and deploy a working bundled application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书面向有经验的JavaScript开发人员，旨在通过逐步的过程带您完成一个特定示例项目的开发和生产。当您完成本指南时，您应该能够完全设置和部署一个可工作的捆绑应用程序。
- en: This chapter will introduce you to Webpack—specifically, Webpack version 5\.
    It will include an overview of the central concepts around Webpack and how it
    is used.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍Webpack——具体来说，是Webpack 5版本。它将包括对Webpack周围的核心概念以及其用法的概述。
- en: This chapter is aimed at programmers who are new to Webpack and Webpack 5\.
    The initial setup will be covered in this chapter, as well as an overview of the
    process, and you will be shown how to deploy your first bundled application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章面向对Webpack和Webpack 5新手程序员。本章将涵盖初始设置，以及对该过程的概述，并将向您展示如何部署您的第一个捆绑应用程序。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The fundamentals of Webpack 5
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 5的基础知识
- en: Setting up Webpack
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Webpack
- en: Creating a sample project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个示例项目
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code used in all of the chapters in this book at [https://github.com/PacktPublishing/Webpack-5-Up-and-Running](https://github.com/PacktPublishing/Webpack-5-Up-and-Running):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的所有章节中找到使用的代码[https://github.com/PacktPublishing/Webpack-5-Up-and-Running](https://github.com/PacktPublishing/Webpack-5-Up-and-Running)：
- en: To use this guide, you will need a fundamental knowledge of JavaScript.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用本指南，您需要对JavaScript有基本的了解。
- en: Ensure that you have the latest version of Webpack 5 installed.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您已安装了Webpack 5的最新版本。
- en: You will need the use of a command line, such as Command Prompt or another command-line
    utility of your choice.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将需要使用命令行，如命令提示符或您选择的其他命令行实用程序。
- en: You will need Node.js, the JavaScript runtime environment.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将需要Node.js，JavaScript运行环境。
- en: Ensure that you've installed the latest version of Node.js; otherwise, you may
    encounter a lot of issues.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你已经安装了最新版本的Node.js；否则，你可能会遇到很多问题。
- en: You will need `npm` installed on your local machine with administrator-level
    privileges. Webpack and Webpack 5 run in the Node.js environment, which is why
    we need its package manager—npm.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要在本地计算机上安装`npm`并具有管理员级别的权限。Webpack和Webpack 5在Node.js环境中运行，这就是为什么我们需要它的包管理器npm。
- en: As of the time of writing, the most current release is Webpack version 5\. Visit [https://webpack.js.org](https://webpack.js.org) to
    find the most current version for you.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截至撰写本文时，最新版本是Webpack 5。访问[https://webpack.js.org](https://webpack.js.org)找到适合您的最新版本。
- en: The fundamentals of Webpack 5
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 5的基础知识
- en: Essentially, Webpack is a module bundler for JavaScript applications. Webpack
    takes a series of JavaScript files, along with dependencies such as image files,
    which make up an application, and constructs something called a dependency graph.
    A dependency graph is a representation of how these files and dependencies are
    ordered and linked within an application and shows how the files interact with
    each other.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Webpack是一个用于JavaScript应用程序的模块打包工具。Webpack接受一系列JavaScript文件，以及构成应用程序的图像文件等依赖项，并构建所谓的依赖图。依赖图是这些文件和依赖项在应用程序中如何排序和链接的表示，并显示文件之间的交互方式。
- en: This dependency graph then forms a template that the bundler follows when taking
    all of the dependencies and files to compress them into a smaller set. Webpack
    is then able to bundle these files into a larger, but usually less-numerous, set
    of files. This eliminates problems such as unused code, repetitive code, and the
    need for rewriting. To some extent, the code can be formatted more succinctly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这个依赖图形成了一个模板，捆绑器在将所有依赖项和文件压缩成更小的集合时会遵循这个模板。然后Webpack能够将这些文件捆绑成更大、但通常更少的文件集。这消除了未使用的代码、重复的代码以及重写的需要。在某种程度上，代码可以更简洁地格式化。
- en: Webpack recursively builds every module in your application, then packs all
    those modules into a small number of bundles. For the most part, a bundled application
    will contain a script that is ideal to be read by a program, such as a web browser,
    but too complicated for a programmer to use. The developer, therefore, will take
    a set of source files and make changes to this area of the program, then bundle
    this source into an output—a bundled application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack递归地构建应用程序中的每个模块，然后将所有这些模块打包成少量的捆绑包。在大多数情况下，捆绑的应用程序将包含一个脚本，非常适合被程序（如Web浏览器）读取，但对程序员来说太复杂了。因此，开发人员将会拿一组源文件并对程序的这一部分进行更改，然后将这些源文件捆绑成一个输出——一个捆绑的应用程序。
- en: Bundling was originally intended to improve browser-reading performance, but
    it also has many other advantages. Once a set of source files is bundled by Webpack,
    it will usually follow a systematic and conventional filing structure. Errors
    within the code can halt a bundling operation; this book will instruct you on
    how to overcome these problems.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 捆绑最初是为了提高浏览器的阅读性能，但它还有许多其他优点。一旦Webpack捆绑了一组源文件，它通常会遵循一种系统化和常规的文件结构。代码中的错误可能会中断捆绑操作；本书将指导您如何克服这些问题。
- en: Now, let's explore the general concepts around Webpack 5.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索Webpack 5周围的一般概念。
- en: General concepts behind Webpack 5
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 5背后的一般概念
- en: Here, we will begin to understand the key concepts and the purpose of Webpack,
    rather than expect you to have any prior understanding of it. Bundling is carried
    out locally on a desktop using Node.js or `npm` and the **command-line interface**
    (**CLI**), usually Command Prompt.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将开始理解Webpack的关键概念和目的，而不是期望您有任何先前的了解。捆绑通常在桌面上使用Node.js或`npm`和**命令行界面**（**CLI**）（通常是命令提示符）上进行。
- en: Webpack is a build tool that puts all of your assets into a dependency graph.
    This includes JavaScript files, images, fonts, and **Cascading Style Sheets** (**CSS**).
    It will take **Sassy CSS** (**SCSS**) and TypeScript files and place them into
    CSS and JavaScript files, respectively. Webpack will only be able to do this when
    the code is compatible with the latter format.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack是一个构建工具，将所有资产放入一个依赖图中。这包括JavaScript文件、图像、字体和**层叠样式表**（**CSS**）。它将**Sassy
    CSS**（**SCSS**）和TypeScript文件分别放入CSS和JavaScript文件中。只有当代码与后者格式兼容时，Webpack才能做到这一点。
- en: When programming in JavaScript and other languages, the source code will often
    use a statement such as `require()`, which points one file to another. Webpack
    will detect this statement and determine the file that is needed as a dependency.
    This will decide how the files are processed in your final JavaScript bundle.
    This will also include replacing a URL path to a **content delivery network** (**CDN**)—which
    is, essentially, a network of proxy servers—with a local file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript和其他语言编程时，源代码通常会使用诸如`require()`的语句，将一个文件指向另一个文件。Webpack将检测这个语句，并确定所需的文件作为依赖项。这将决定最终JavaScript捆绑包中的文件如何处理。这还包括将URL路径替换为**内容传送网络**（**CDN**）——这实质上是一组代理服务器网络——与本地文件。
- en: 'The following diagram is a representation of the general purpose of Webpack,
    which is to take a set of files or dependencies and output the content in an optimized
    form:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表是Webpack的一般目的的表示，即获取一组文件或依赖项并以优化的形式输出内容：
- en: '![](img/a69b6e79-5bb7-4de7-acd2-f0cf6cd10d25.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a69b6e79-5bb7-4de7-acd2-f0cf6cd10d25.jpg)'
- en: Now, let's take a closer look at some of the terminology, which you may be unfamiliar
    with but can be considered common parlance when using Webpack.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更仔细地看一些您可能不熟悉但在使用Webpack时可以被视为常用术语的术语。
- en: Terminology
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语
- en: 'This section will cover the terminology used in Webpack 5\. This will include
    native terms, as well as some more unusual acronyms:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将涵盖Webpack 5中使用的术语。这将包括本地术语，以及一些更不寻常的缩写词。
- en: '**Assets**: This is a term frequently used in Webpack to prevent conflations
    of concepts. It refers to image files, or even data or script files, collated
    by the software when producing a bundled application.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产：**这是Webpack中经常使用的一个术语，用于防止概念的混淆。它指的是软件在生成捆绑应用程序时收集的图像文件，甚至是数据或脚本文件。'
- en: '**Bundle: **This refers to the application that is output once Webpack has
    compiled an application. This is an optimized version of the original or source
    application—the reasons for this will be discussed in detail in later chapters.
    The bundler will combine these files into one file, which makes unpicking and
    hacking very difficult. It also improves browser performance. It does this by
    ensuring that processors are kept to an optimal level and removing any coding
    structure that does not conform to a standard. This also encourages the developer
    to adopt conventions a lot more diligently. Should there be any insecure programming,
    these locations are more easily identified, isolated, and corrected.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捆绑：**这指的是Webpack编译应用程序后输出的应用程序。这是原始或源应用程序的优化版本——这将在后面的章节中详细讨论原因。捆绑器将这些文件合并成一个文件，这使得解包和破解变得非常困难。它还提高了浏览器的性能。它通过确保处理器保持在最佳水平，并删除任何不符合标准的编码结构来实现这一点。这也鼓励开发人员更加认真地采用惯例。如果存在任何不安全的编程，这些位置更容易被识别、隔离和纠正。'
- en: '**SASS: **A version of CSS that has enhanced features. Webpack handles this
    code as it does CSS; however, it is a phrase that may come up and leave you stumped,
    so it is worth knowing about.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SASS：**CSS的增强版本。Webpack处理这段代码就像处理CSS一样；然而，这可能是一个让你感到困惑的短语，所以了解一下是值得的。'
- en: '**SCSS:** This is simply the name for the syntax version used to give SASS
    extra functionality. It is useful to know that Webpack is capable of transpiling
    both syntaxes.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SCSS：**这只是用于给SASS增加额外功能的语法版本的名称。值得知道的是，Webpack能够转译这两种语法。'
- en: '**Transpiling**: This is the process where Webpack 5 takes a set of input source
    code and changes it into a more optimized output distribution code. This is done
    by removing unused or duplicated code. Transpiling is used to convert one set
    of files into a simpler set. For instance, SCSS often contains script that can
    be easily stored inside a CSS file. You might also transpile SCSS to CSS, or TypeScript
    to JavaScript.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转译：**这是Webpack 5将一组输入源代码转换为更优化的输出分发代码的过程。这是通过删除未使用或重复的代码来完成的。转译用于将一组文件转换为更简单的一组文件。例如，SCSS通常包含可以轻松存储在CSS文件中的脚本。您还可以将SCSS转译为CSS，或将TypeScript转译为JavaScript。'
- en: '**TypeScript**: For the uninitiated, TypeScript is a type of code that is similar
    to JavaScript in many ways. Browsers, for instance, most commonly run JavaScript,
    so it may be more appropriate to use JavaScript, where possible. Webpack 5 will
    transpile TypeScript into JavaScript whenever the former allows.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeScript：**对于未经训练的人来说，TypeScript是一种在许多方面类似于JavaScript的代码类型。例如，浏览器最常运行JavaScript，因此在可能的情况下使用JavaScript可能更合适。当前，Webpack
    5将在前者允许时将TypeScript转译为JavaScript。'
- en: '**CDN:** A CDN is a network of proxy servers that provides high availability
    and high performance. Some examples are Google APIs, such as Google Fonts, and
    other similar tools that all JavaScript developers are, no doubt, familiar with.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CDN：**CDN是一组代理服务器网络，提供高可用性和高性能。一些例子是谷歌API，如谷歌字体，以及其他类似的工具，所有JavaScript开发人员无疑都很熟悉。'
- en: '**Dependency graphs**: In Webpack 5, a dependency graph is a directed graph
    representing the dependency of several assets to each other. Webpack 5 maps a
    list of assets and dependencies itself and records how they depend on each other
    in an application. It uses this to derive an appropriate output file structure.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖图：**在Webpack 5中，依赖图是表示多个资产相互依赖的有向图。Webpack 5将映射资产和依赖项的列表，并记录它们在应用程序中如何相互依赖。它使用这个来推导出一个适当的输出文件结构。'
- en: Though JavaScript is the entry point, Webpack appreciates that your other asset
    types—such as HTML, CSS, and SVG—each have dependencies of their own, which should
    be considered as part of the build process.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript是入口点，但Webpack意识到您的其他资产类型（如HTML、CSS和SVG）都有自己的依赖关系，这些依赖关系应该作为构建过程的一部分进行考虑。
- en: Webpack is comprised of **input** and **output**. The output can be made of
    one or more files. As well as bundling modules, Webpack can carry out a lot of
    functions on your files. The input refers to the original files when they are
    in their original structure, before bundling. The output refers to the resulting
    bundled files in their new and optimized filing structure. Inputs, therefore,
    are comprised of the source files and outputs can be comprised of development
    files or production files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack由**输入**和**输出**组成。输出可以由一个或多个文件组成。除了捆绑模块外，Webpack还可以对您的文件执行许多功能。输入是指在捆绑之前，原始文件的原始结构。输出是指捆绑后的文件在其新的和优化的文件结构中的结果。因此，输入由源文件组成，输出可以由开发文件或生产文件组成。
- en: There is often a conflation between the terms input and output and source code
    and development code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 输入和输出以及源代码和开发代码之间经常混淆。
- en: '**Source code** refers to the original application before it is bundled. **Development
    code** refers to the application after it is placed in the Node.js environment
    and bundled in developmental mode. A more "tightly packed" version of the bundle
    is produced in production mode, but this version is difficult to work on. Therefore,
    the development code can be altered to some degree after it is bundled, which
    is very useful, for example, in a case where you are altering a database''s connection
    configurations.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**源代码**指的是捆绑之前的原始应用程序。**开发代码**指的是将应用程序放入Node.js环境并以开发模式捆绑后的应用程序。在生产模式下会产生一个更“紧凑”的捆绑版本，但这个版本很难进行工作。因此，在捆绑后可以在一定程度上修改开发代码，这非常有用，例如在您修改数据库连接配置的情况下。'
- en: When working with Webpack 5, these phrases may present themselves and it is
    important that you don't get too confused by them.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Webpack 5时，这些短语可能会出现，重要的是您不要对它们感到太困惑。
- en: Most other terminology will be explained as we encounter it, or it is so common
    that we assume you understand these terms if you are familiar with JavaScript.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数其他术语将在我们遇到它时进行解释，或者如果您熟悉JavaScript，它是如此常见，我们假设您了解这些术语。
- en: That summarizes the bulk of the terminology you will come across when using
    Webpack. Now, we will explore how the software works.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这总结了您在使用Webpack时会遇到的大部分术语。现在，我们将探讨软件的工作原理。
- en: How Webpack works
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack的工作原理
- en: Webpack works by generating a dependency graph of assets in a set of source
    files, which it transpiles an optimized set of distribution files from. These
    source and distribution files contain source code and distribution code, respectively.
    This distributed code forms the output. Distribution is simply another name for
    the output or bundle.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack通过生成一组源文件中资产的依赖图来工作，然后从中转换出一组优化的分发文件。这些源和分发文件分别包含源代码和分发代码。这些分发代码形成了输出。分发只是输出或捆绑的另一个名称。
- en: Webpack begins by finding an entry point in the source files and from there,
    it builds a dependency graph. The selection of an entry point is optional in Webpack
    5 and the choice of selection will alter the nature of the build process, either
    in terms of speed or output optimization.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack首先在源文件中找到一个入口点，然后构建一个依赖图。在Webpack 5中，选择入口点是可选的，选择的方式将改变构建过程的性质，无论是速度还是输出优化。
- en: Webpack 5 is capable of transforming, bundling, or packaging just about any
    resource or asset.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 5能够转换、捆绑或打包几乎任何资源或资产。
- en: We have covered a good overview of how the software works; experienced users
    of previous Webpack versions may consider this overview rudimentary, so let's
    have a look at what is new in this current version.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经对软件的工作原理进行了良好的概述；之前使用过Webpack的有经验的用户可能会认为这个概述很基础，所以让我们来看看这个当前版本中有什么新东西。
- en: What's new in Webpack 5?
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webpack 5中有什么新功能？
- en: The popular Webpack module bundler has undergone a massive update for the release
    of version 5\. Webpack 5 offers massive performance improvements, more dynamic
    scalability, and basic backward compatibility.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 备受欢迎的Webpack模块捆绑器已经经历了一次大规模更新，发布了第5版。Webpack 5提供了巨大的性能改进、更动态的可扩展性和基本的向后兼容性。
- en: Webpack 5 takes over from version 4, where backward compatibility wasn't always
    possible with many of the various loaders available, which were often more compatible
    with version 2, which meant that a developer would often encounter deprecation
    warnings in the command line if version 2 wasn't used. Webpack 5 has now addressed
    this issue.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 5接替了第4版，第4版并非总是与许多可用的各种加载器向后兼容，这些加载器通常更兼容第2版，这意味着如果不使用第2版，开发人员通常会在命令行中遇到弃用警告。Webpack
    5现在已经解决了这个问题。
- en: Another big selling point of version 5 is federated modules. We will discuss
    this in more detail in a later [Chapter 6](c8eb858d-110e-459c-aaa9-c6b8f48aef50.xhtml), *Production,
    Integration, and Federated Modules*. However, to sum it up, federated modules
    are essentially a way for a bundled application to utilize and interact with modules
    and assets in remotely stored separate bundles.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第5版的另一个重要卖点是联邦模块。我们将在稍后的[第6章](c8eb858d-110e-459c-aaa9-c6b8f48aef50.xhtml)中更详细地讨论这一点，*生产、集成和联邦模块*。然而，总结一下，联邦模块本质上是捆绑应用程序以利用和与远程存储的单独捆绑中的模块和资产进行交互的一种方式。
- en: 'The advantages of Webpack 5 are summarized as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 5的优点总结如下：
- en: Webpack 5 offers control over HTTP requests, which improves speed and performance,
    and also alleviates security concerns.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 5提供了对HTTP请求的控制，这提高了速度和性能，也减轻了安全问题。
- en: Webpack 5 has some advantages over rival bundlers such as Browserify and systemjs—namely,
    speed. The build time directly depends on the configuration but it's faster than
    its nearest rivals.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 5相对于竞争对手Browserify和systemjs有一些优势，特别是速度。构建时间直接取决于配置，但比最近的竞争对手更快。
- en: Little or no configuration is required to use Webpack 5, but you always have
    it as an option.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Webpack 5几乎不需要任何配置，但您始终可以选择配置。
- en: It can be more complicated to use than alternatives, but this is mainly due to
    its versatility and scope and it is well worth overcoming.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他替代方案相比，使用起来可能更复杂，但这主要是由于其多功能和范围，值得克服。
- en: Webpack 5 has optimization plugins that remove unused code fantastically well.
    It also has many related features, such as tree shaking, which we will discuss
    in more detail later in this book.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webpack 5具有优化插件，可以很好地删除未使用的代码。它还具有许多相关功能，例如树摇动，我们将在本书后面更详细地讨论。
- en: It is more flexible than Browserify, allowing the user to select more entry
    points and use different types of assets. It's also better, when it comes to speed
    and flexibility, for bundling large web applications and for single-page web applications.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它比Browserify更灵活，允许用户选择更多的入口点并使用不同类型的资产。在捆绑大型Web应用程序和单页面Web应用程序时，它在速度和灵活性方面也更好。
- en: Webpack is now considered an incredibly important tool for application development
    and web development, transforming the structure and optimizing the loading time
    for all of your web assets, such as HTML, JS, CSS, and images. Let's now get to
    grips with using Webpack practically. To do that, the first thing we will look
    at that may be new to you—if you have, perhaps, only worked with Vanilla JavaScript
    up to now—is modes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack现在被认为是应用程序开发和Web开发中非常重要的工具，它可以改变结构并优化所有Web资产的加载时间，例如HTML、JS、CSS和图像。现在让我们实际使用Webpack。为了做到这一点，我们将首先看一下可能对您来说是新的东西——如果您到目前为止只使用原生JavaScript——模式。
- en: Modes
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式
- en: Once you have understood the general concepts, the first thing you need to learn
    about when running a build is modes. Modes are central to how Webpack works and
    compiles projects, so it is best to cover this brief but important topic before
    we go any further.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您理解了一般概念，运行构建时需要了解的第一件事就是模式。模式对于Webpack的工作和编译项目至关重要，因此最好在继续之前简要但重要地介绍一下这个主题。
- en: Modes use the CLI, a process that we will cover in more detail later. If you
    are used to using Vanilla JavaScript, this may be new to you. However, rest assured
    it is not a complex topic to get your head around.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 模式使用CLI，这是我们稍后将更详细介绍的一个过程。如果您习惯使用原生JavaScript，这可能对您来说是新的。但是，请放心，这不是一个难以理解的复杂主题。
- en: 'Webpack ships with two configuration files, which are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack附带两个配置文件，如下所示：
- en: '**Development config**: This uses `webpack-dev-server` (hot reloading), debugging
    enabled, and so on.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发配置**：这使用`webpack-dev-server`（热重载）、启用调试等。'
- en: '**Production config**: This will spit out an optimized, minimized (uglify JS),
    source-mapped bundle that is used in production environments.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产配置**：这将生成一个在生产环境中使用的优化、最小化（uglify JS）、源映射的捆绑包。'
- en: Since the release of version 5, Webpack takes care of the mode features by default
    by simply adding a `mode` argument to the command. Webpack can't use `package.json` alone
    to find the mode to determine the correct build path.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 自从发布第5版以来，Webpack默认通过简单地向命令添加`mode`参数来处理模式功能。Webpack不能仅使用`package.json`来查找模式以确定正确的构建路径。
- en: Now that we have a grasp of the fundamentals, it's time to progress to the practical
    setup.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了基本原理，是时候进入实际设置了。
- en: Setting up Webpack
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Webpack
- en: This book follows the development of a sample project step by step, and I am
    sure you will find this a simple way to learn how to use Webpack 5.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将逐步介绍一个示例项目的开发，我相信您会发现这是学习如何使用Webpack 5的简单方法。
- en: Webpack 5 packages all its dependencies within the application you wish to bundle
    on a local machine. Theoretically, this can be done remotely, but to save any
    confusion for first-time users, I will emphasize the use of a local machine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 5在本地机器上打包所有依赖项。理论上，这可以远程完成，但为了避免给第一次使用者带来任何困惑，我将强调使用本地机器。
- en: Installing packages locally is recommended for most projects. It makes things
    easier when upgrade or break changes are introduced.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数项目，建议在本地安装软件包。当引入升级或破坏性更改时，这样做会更容易。
- en: We will begin with the `npm` installation. npm is the package manager that you
    will use with Webpack 5\. Once this is installed on your local machine, you will
    be able to use the `npm` command using a CLI, such as Command Prompt.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`npm`安装开始。npm是您将与Webpack 5一起使用的软件包管理器。一旦在本地机器上安装了它，您就可以使用CLI，例如命令提示符，来使用`npm`命令。
- en: Once you have installed `npm`, you can move on to the next step, which is to
    open your CLI. There are many to choose from, but for the sake of this tutorial,
    we will use Command Prompt.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`npm`后，您可以继续下一步，即打开CLI。有很多选择，但为了本教程的缘故，我们将使用命令提示符。
- en: 'Let''s break this down step by step so that you can follow along:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地分解这个过程，这样您就可以跟上：
- en: Install the `npm` package manager, which you will use with Wepback 5.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`npm`软件包管理器，您将与Wepback 5一起使用它。
- en: 'Open the CLI (in this tutorial, we will be using Command Prompt) and type the
    following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开CLI（在本教程中，我们将使用命令提示符）并输入以下内容：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's break down the code block. The preceding command will first create a new
    directory on your local machine, called `webpack5`. It will then identify the
    current directory (`cd`) as `webpack5`. This means any further commands made through
    the CLI will be made with respect to that directory. The next command is to initialize
    `npm`. A full list of these basic commands and what they mean can be found in
    the *Further reading* section at the end of this chapter. This section makes for
    some interesting reading and I'm sure you will learn something new. Then, we locally
    install Webpack and install `webpack-cli`—this is the tool used to run Webpack
    on the command line.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码块。前面的命令首先会在您的本地计算机上创建一个名为`webpack5`的新目录。然后，它将把当前目录（`cd`）标识为`webpack5`。这意味着通过CLI进行的任何进一步的命令都将是相对于该目录进行的。接下来的命令是初始化`npm`。这些基本命令及其含义的完整列表可以在本章末尾的*进一步阅读*部分找到。这部分内容很有趣，我相信您会学到一些新东西。然后，我们在本地安装Webpack并安装`webpack-cli`——这是用于在命令行上运行Webpack的工具。
- en: 'Next, install the latest release, or a specific version of Webpack, and run
    the following command. However, on the second line, replace `<version>` with the
    version of your choice, such as `5.00`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装最新版本或特定版本的Webpack，并运行以下命令。但是，在第二行，用您选择的版本替换`<version>`，例如`5.00`：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next command is `npm install`, which will install Webpack 5 in the directory
    and save the project in a development environment. It is important to note that
    there is a difference between the development and production environments (or
    modes):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个命令是`npm install`，它将在目录中安装Webpack 5，并将项目保存在开发环境中。重要的是要注意开发环境和生产环境（或模式）之间的区别：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following lines are a code snippet from the `package.json` file. We need
    these in the input files to generate a `webpack.config.js` file, which holds the
    configuration information for your Webpack bundle.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行是`package.json`文件中的代码片段。我们需要这些输入文件来生成`webpack.config.js`文件，其中包含Webpack捆绑的配置信息。
- en: 'We must take care to ensure that the `package.json` file is coded as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须确保`package.json`文件的编码如下：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When using Webpack 5, you can access its binary version by running `npx webpack`
    in the CLI.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Webpack 5时，您可以通过在CLI中运行`npx webpack`来访问其二进制版本。
- en: We should also decide which type of installation we need; any re-installation
    will overwrite the previous one, so don't worry if you have already followed the
    preceding steps.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该决定我们需要哪种类型的安装；任何重新安装都会覆盖先前的安装，所以如果您已经按照前面的步骤进行了操作，就不用担心了。
- en: Let's do that installation now, if applicable.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果适用，现在让我们进行安装。
- en: 'There are two types of installation:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的安装：
- en: '**Global**: A global installation will lockdown your installation to a specific
    version of Webpack.'
  id: totrans-94
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局**：全局安装将锁定您的安装到特定版本的Webpack。'
- en: 'The following `npm` installation will make Webpack available globally:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`npm`安装将使Webpack全局可用：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Local**: A local installation will allow you to run Webpack in the project
    directory. This needs to be done via the `npm` script:'
  id: totrans-97
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地**：本地安装将允许您在项目目录中运行Webpack。这需要通过`npm`脚本完成：'
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will need to carry out all of the preceding steps every time you begin a
    new project on a new local machine. Once you have completed the installation,
    it is time to revert your attention to building a project.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每次在新的本地计算机上开始新项目时，您都需要执行所有前面的步骤。完成安装后，是时候把注意力转回到构建项目上了。
- en: Creating a sample project
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个示例项目
- en: Now, we'll create an experimental project with the following directory structure,
    files, and their contents.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个实验项目，具有以下目录结构、文件及其内容。
- en: 'The following code block refers to a folder on your local machine. It illustrates
    the format and naming conventions typically used in Webpack. You should follow
    this format to ensure your project aligns with this tutorial, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块是指您本地计算机上的一个文件夹。它说明了Webpack通常使用的格式和命名约定。您应该遵循此格式，以确保您的项目与本教程保持一致，如下所示：
- en: 'Begin by setting up the **project tree**:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先设置**项目树**：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The project tree shows us the files that we will work on.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 项目树向我们展示了我们将要处理的文件。
- en: 'Let''s now take a closer look at the index files as they will be key to our
    frontend, starting with `src/index.js`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们仔细看一下索引文件，因为它们将成为我们前端的关键，从`src/index.js`开始：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`index.js` contains our JS. The `index.html` file that follows is our user''s
    frontend.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.js`包含我们的JS。接下来的`index.html`文件是我们用户的前端。'
- en: 'It will also need setting up, so let''s open and edit `index.html`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它还需要设置，所以让我们打开并编辑`index.html`：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note the preceding `<script src="img/lodash@4.16.6">` tag. This refers to the
    use of the `lodash` library. The `index.js` file (not the `index.html` file) requires
    this library to be called. Webpack will take whatever modules it needs from the
    library and use them to build a dependency graph for the bundle.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意前面的`<script src="img/lodash@4.16.6">`标签。这是指使用`lodash`库。`index.js`文件（而不是`index.html`文件）需要调用此库。Webpack将从库中获取所需的模块，并使用它们来构建捆绑包的依赖关系图。
- en: Lodash is a JavaScript library that provides functional programming tasks. It
    was released under the MIT license and essentially makes things easier when working
    with numbers, arrays, strings, and objects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Lodash是一个提供函数式编程任务的JavaScript库。它是在MIT许可下发布的，基本上使处理数字、数组、字符串和对象变得更容易。
- en: Something to be aware of is that if it is not made clear that your code depends
    on an external library, the application will not function properly. For example, dependencies
    could be missing or included in the wrong order. Conversely, the browser will
    download unnecessary code if a dependency is included but not used.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，如果没有明确说明您的代码依赖于外部库，应用程序将无法正常运行。例如，依赖项可能丢失或包含顺序错误。相反，如果包含了但未使用依赖项，浏览器将下载不必要的代码。
- en: We can manage these scripts by using Webpack 5.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Webpack 5来管理这些脚本。
- en: 'You will also need to adjust your `package.json` file to mark your package
    as private, as well as removing the main entry point. This is to prevent accidentally
    publishing your code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要调整你的`package.json`文件，将你的软件包标记为私有，并删除主入口点。这是为了防止意外发布你的代码：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can see how to make these alterations from the bold text in the preceding
    code. Note that our entry point will be set as `index.js`. This is the first file
    that Webpack will read when beginning a bundle compilation (see the previous definition
    of a dependency graph).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从前面代码中的粗体文本中看到如何进行这些修改。请注意，我们的入口点将设置为`index.js`。这是Webpack在开始捆绑编译时将读取的第一个文件（请参阅依赖图的先前定义）。
- en: If you want to learn more about the `package.json` file, go to [https://docs.npmjs.com/getting-](https://docs.npmjs.com/getting-started/)[started/](https://docs.npmjs.com/getting-started/),
    which gives you information about `npm`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于`package.json`文件的信息，请访问[https://docs.npmjs.com/getting-started/](https://docs.npmjs.com/getting-started/)，这里提供了关于`npm`的信息。
- en: We have now finished with the source code for the first demonstration application
    bundle. This constitutes the input or source files that we will now run through
    Webpack to produce our first bundled application.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了第一个演示应用程序捆绑的源代码。这构成了我们现在将通过Webpack运行以生成我们的第一个捆绑应用程序的输入或源文件。
- en: Bundling your first project
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捆绑你的第一个项目
- en: Web packing simply means bundling the project. It is the essence of Webpack
    and starting with this very simple introduction is an excellent way to begin learning
    about the application.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Web打包简单地意味着捆绑项目。这是Webpack的本质，从这个非常简单的介绍开始学习应用程序是一个很好的方法。
- en: Firstly, we need to separate the source code from our distribution code by altering
    our directory structure slightly. This source code is used to write and edit and the
    distribution code is the minimized and optimized bundle that is the result of
    our build process.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要通过略微改变我们的目录结构来将源代码与分发代码分开。这个源代码用于编写和编辑，分发代码是经过最小化和优化的捆绑，是我们构建过程的结果。
- en: 'We will now go through each step for building our first project in detail:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将详细介绍构建我们的第一个项目的每个步骤：
- en: 'We will begin by structuring the project and the directories. First, note the
    `/src` and `/dist` terms; they refer to the source code and distribution code,
    respectively:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先构建项目和目录结构。首先注意`/src`和`/dist`这两个术语；它们分别指的是源代码和分发代码：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To bundle the `lodash` dependency with `index.js`, we need to install the library
    locally:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将`lodash`依赖项与`index.js`捆绑，我们需要在本地安装该库：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When installing a package that will be bundled to your production bundle, you
    should use the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装将捆绑到生产捆绑包的软件包时，应使用以下命令：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you''re installing a package for development purposes (for example, a linter,
    testing libraries, and so on), you should use the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为开发目的安装软件包（例如，一个代码检查工具、测试库等），你应该使用以下命令：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s import `lodash` into our script using **`src/main.js`**:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用**`src/main.js`**将`lodash`导入到我们的脚本中：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, update your `dist/index.html` file. We will remove the inclusion of the
    `lodash` library.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新你的`dist/index.html`文件。我们将删除对`lodash`库的引用。
- en: 'This is done because we will be installing the library locally for bundling
    and no longer need to make a remote call to the library:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是因为我们将在本地安装库进行捆绑，不再需要远程调用库：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we will use the command line to run `npx webpack`. The `npx` command
    ships with Node 8.2/npm 5.0.0 or higher and runs the Webpack binary (`./node_modules/.bin/webpack`).
    This will take our script at `src/index.js` as the entry point and will generate
    `dist/main.js` as the output:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用命令行运行`npx webpack`。`npx`命令随Node 8.2/npm 5.0.0或更高版本一起提供，并运行Webpack二进制文件（`./node_modules/.bin/webpack`）。这将把我们的脚本`src/index.js`作为入口点，并生成`dist/main.js`作为输出：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If there are no errors, the build can be considered successful.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，构建可以被视为成功。
- en: Note that a warning is not considered an error. The warning is simply shown
    because no mode has yet been set.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，警告不被视为错误。警告只是因为尚未设置模式而显示的。
- en: I wouldn't be concerned about this as Webpack will default to production mode.
    We will handle the setting of modes later in this guide.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会担心这个，因为Webpack将默认为生产模式。我们将在本指南的后面处理模式设置。
- en: 'You should see the following text when you open `index.html` in your browser:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在浏览器中打开`index.html`时，你应该看到以下文本：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Huzzah—we have completed our first application bundle and I bet you're very
    proud of yourself! This was a fundamental step to begin with; we will move on
    to more complex elements of Webpack in later chapters and begin applying them
    to existing projects that need bundling.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁——我们已经完成了我们的第一个应用程序捆绑，我敢打赌你一定为自己感到非常自豪！这是一个开始的基本步骤；我们将在后面的章节中继续学习Webpack的更复杂的元素，并开始将它们应用到需要捆绑的现有项目中。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: To summarize, Webpack 5 is an incredibly versatile bundler that uses almost every
    conceivable method to optimize the size of applications and improve the overall
    performance. It is very worthwhile getting to grips with it and this guide will
    show you everything you need to know to do so.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Webpack 5是一个非常多才多艺的捆绑工具，几乎使用了每一种可想象的方法来优化应用程序的大小并提高整体性能。了解它是非常值得的，本指南将向你展示你需要了解的一切。
- en: You should now understand the basic concepts behind Webpack, as well as the
    fundamental terminology. You should also now know how to install the prerequisites,
    such as Node.js, and set up and deploy—as well as make—your first bundle using
    the command line.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该了解Webpack背后的基本概念，以及基本术语。你现在也应该知道如何安装先决条件，比如Node.js，并设置和部署——以及制作——你的第一个捆绑使用命令行。
- en: In the next chapter, we will elaborate on modules and code splitting, as well
    as some of the more salient and interesting aspects of Webpack 5 that are key
    to understanding Webpack.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细介绍模块和代码拆分，以及Webpack 5的一些更显著和有趣的方面，这些方面对理解Webpack至关重要。
- en: Questions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following are a series of questions related to this chapter that you should
    try to answer to aid your learning. The answers can be found under the *Assessments*
    section in the back matter of this book:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与本章相关的一系列问题，您应该尝试回答以帮助您的学习。答案可以在本书的*评估*部分中找到：
- en: What is Webpack?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Webpack？
- en: What is a bundle in Webpack?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Webpack中的捆绑包是什么？
- en: What is the latest version of Webpack, according to this guide?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据本指南，Webpack的最新版本是多少？
- en: Which environment does Webpack work in?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Webpack在哪个环境中工作？
- en: What is a dependency graph?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是依赖图？
- en: 'When bundling, what entry is missing from the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在捆绑时，以下命令缺少哪个入口？
- en: '`npm --save lodash`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm --save lodash`'
- en: What is the name of the package manager that we use with Webpack 5?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在Webpack 5中使用的包管理器的名称是什么？
- en: How would you remove the `lodash` library using the command line?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用命令行删除`lodash`库？
- en: What is the difference between source code and distribution code when working
    with Webpack 5?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用Webpack 5时，源代码和分发代码之间有什么区别？
- en: When setting up your project, why might you adjust the `package.json` file?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置项目时，为什么要调整`package.json`文件？
