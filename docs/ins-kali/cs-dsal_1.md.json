["```cs\nint number; \n```", "```cs\nnumber = 500; \n```", "```cs\nint number = 500; \n```", "```cs\nconst int DAYS_IN_WEEK = 7; \n```", "```cs\nenum Language { PL, EN, DE }; \n```", "```cs\nLanguage language = Language.PL; \nswitch (language) \n{ \n    case Language.PL: /* Polish version */ break; \n    case Language.DE: /* German version */ break; \n    default: /* English version */ break; \n} \n```", "```cs\nstring firstName = \"Marcin\", lastName = \"Jamro\"; \nint year = 1988; \nstring note = firstName + \" \" + lastName.ToUpper()  \n   + \" was born in \" + year; \nstring initials = firstName[0] + \".\" + lastName[0] + \".\"; \n```", "```cs\nstring note = string.Format(\"{0} {1} was born in {2}\",  \n   firstName, lastName.ToUpper(), year); \n```", "```cs\nstring note = $\"{firstName} {lastName.ToUpper()}  \n   was born in {year}\"; \n```", "```cs\nint age = 28; \nobject ageBoxing = age; \nint ageUnboxing = (int)ageBoxing; \n```", "```cs\npublic class Person \n{ \n    private string _location = string.Empty; \n    public string Name { get; set; } \n    public int Age { get; set; } \n\n    public Person() => Name = \"---\"; \n\n    public Person(string name, int age) \n    { \n        Name = name; \n        Age = age; \n    } \n\n    public void Relocate(string location) \n    { \n        if (!string.IsNullOrEmpty(location)) \n        { \n            _location = location; \n        } \n    } \n\n    public float GetDistance(string location) \n    { \n        return DistanceHelpers.GetDistance(_location, location); \n    } \n} \n```", "```cs\nPerson person = new Person(\"Mary\", 20); \nperson.Relocate(\"Rzeszow\"); \nfloat distance = person.GetDistance(\"Warsaw\");  \n```", "```cs\npublic interface IDevice \n{ \n    string Model { get; set; } \n    string Number { get; set; } \n    int Year { get; set; } \n\n    void Configure(DeviceConfiguration configuration); \n    bool Start(); \n    bool Stop(); \n} \n```", "```cs\ndelegate double Mean(double a, double b, double c); \n\nstatic double Harmonic(double a, double b, double c) \n{ \n    return 3 / ((1 / a) + (1 / b) + (1 / c)); \n} \n\nstatic void Main(string[] args) \n{ \n    Mean arithmetic = (a, b, c) => (a + b + c) / 3; \n    Mean geometric = delegate (double a, double b, double c) \n    { \n        return Math.Pow(a * b * c, 1 / 3.0); \n    }; \n    Mean harmonic = Harmonic; \n    double arithmeticResult = arithmetic.Invoke(5, 6.5, 7); \n    double geometricResult = geometric.Invoke(5, 6.5, 7); \n    double harmonicResult = harmonic.Invoke(5, 6.5, 7); \n} \n```", "```cs\nusing System; \nusing System.Collections.Generic; \nusing System.Linq; \nusing System.Text; \nusing System.Threading.Tasks; \n\nnamespace GettingStarted \n{ \n    class Program \n    { \n        static void Main(string[] args) \n        { \n        } \n    } \n} \n```", "```cs\nstring fullName = Console.ReadLine(); \n```", "```cs\nstring numberString = Console.ReadLine(); \nint.TryParse(numberString, out int number); \n```", "```cs\nstring dateTimeString = Console.ReadLine(); \nif (!DateTime.TryParseExact( \n    dateTimeString, \n    \"M/d/yyyy HH:mm\", \n    new CultureInfo(\"en-US\"), \n    DateTimeStyles.None, \n    out DateTime dateTime)) \n{ \n    dateTime = DateTime.Now; \n} \n```", "```cs\nConsoleKeyInfo key = Console.ReadKey(); \nswitch (key.Key) \n{ \n    case ConsoleKey.S: /* Pressed S */ break; \n    case ConsoleKey.F1: /* Pressed F1 */ break; \n    case ConsoleKey.Escape: /* Pressed Escape */ break; \n} \n```", "```cs\nConsole.Write(\"Enter a name: \"); \n```", "```cs\n    Enter a name: \n```", "```cs\nConsole.WriteLine(\"Hello!\"); \n```", "```cs\n    Hello!\n```", "```cs\nstring name = \"Marcin\"; \nConsole.WriteLine(\"Hello, {0}!\", name); \n```", "```cs\n    Hello, Marcin!\n```", "```cs\nstring tableNumber = \"A100\"; \nint peopleCount = 4; \nDateTime reservationDateTime = new DateTime( \n    2017, 10, 28, 11, 0, 0); \nCultureInfo cultureInfo = new CultureInfo(\"en-US\"); \nConsole.WriteLine( \n    \"Table {0} has been booked for {1} people on {2} at {3}\", \n    tableNumber, \n    peopleCount, \n    reservationDateTime.ToString(\"M/d/yyyy\", cultureInfo), \n    reservationDateTime.ToString(\"HH:mm\", cultureInfo)); \n```", "```cs\n    Table A100 has been booked for 4 people on 10/28/2017 at 11:00 \n```", "```cs\nusing System; \nusing System.Globalization; \n\nnamespace GettingStarted \n{ \n    class Program \n    { \n        static void Main(string[] args) \n        { \n            CultureInfo cultureInfo = new CultureInfo(\"en-US\"); \n\n            Console.Write(\"The table number: \"); \n            string table = Console.ReadLine(); \n\n            Console.Write(\"The number of people: \"); \n            string countString = Console.ReadLine(); \n            int.TryParse(countString, out int count); \n\n            Console.Write(\"The reservation date (MM/dd/yyyy): \"); \n            string dateTimeString = Console.ReadLine(); \n            if (!DateTime.TryParseExact( \n                dateTimeString, \n                \"M/d/yyyy HH:mm\", \n                cultureInfo, \n                DateTimeStyles.None, \n                out DateTime dateTime)) \n            { \n                dateTime = DateTime.Now; \n            } \n\n            Console.WriteLine( \n                \"Table {0} has been booked for {1} people on {2}  \n                 at {3}\", \n                table, \n                count, \n                dateTime.ToString(\"M/d/yyyy\", cultureInfo), \n                dateTime.ToString(\"HH:mm\", cultureInfo)); \n        } \n    } \n} \n```", "```cs\n    The table number: A100\n    The number of people: 4\n    The reservation date (MM/dd/yyyy): 10/28/2017 11:00\n    Table A100 has been booked for 4 people on 10/28/2017 at 11:00\n    Press any key to continue . . . \n```"]