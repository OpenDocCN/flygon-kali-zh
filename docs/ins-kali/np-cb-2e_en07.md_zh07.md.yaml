- en: Chapter 7. Profiling and Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：性能分析和调试
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下秘籍：
- en: Profiling with `timeit`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`timeit`进行性能分析
- en: Profiling with IPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 IPython 进行分析
- en: Installing `line_profiler`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`line_profiler`
- en: Profiling code with `line_profiler`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`line_profiler`分析代码
- en: Profiling code with the `cProfile` extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有`cProfile`扩展名的性能分析代码
- en: Debugging with IPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 IPython 进行调试
- en: Debugging with `PuDB`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`PuDB`进行调试
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Debugging is the act of finding and removing bugs from software. Profiling means
    building a profile of a program in order to collect information about memory usage
    or time complexity. Profiling and debugging are activities that are integral to
    the life of a developer. This is especially true for complex software. The good
    news is that many tools can help you. We will review techniques popular among
    NumPy users.
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是从软件中查找和删除错误的行为。 分析是指构建程序的概要文件，以便收集有关内存使用或时间复杂度的信息。 分析和调试是开发人员生活中必不可少的活动。
    对于复杂的软件尤其如此。 好消息是，许多工具可以为您提供帮助。 我们将回顾 NumPy 用户中流行的技术。
- en: Profiling with timeit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`timeit`进行性能分析
- en: '`timeit` is a module that allows you to time pieces of code. It is part of
    the standard Python library. We will time the `sort()` NumPy function with several
    array sizes. The classic **quicksort** and **merge sort** algorithms have an average
    running time of O(N log N), so we will try to fit our result to such a model.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeit`是一个模块，可用于计时代码段。 它是标准 Python 库的一部分。 我们将使用几种数组大小对`sort()` NumPy 函数计时。
    经典的**快速排序**和**归并排序**算法的平均运行时间为`O(N log N)`，因此我们将尝试将这个模型拟合到结果。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will require arrays to sort:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要求数组进行排序：
- en: 'Create arrays to sort varying sizes containing random integer values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数组以排序包含随机整数值的各种大小：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To measure time, create a timer, give it a function to execute, and specify
    the relevant imports. Then, sort 100 times to get data about the sorting times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测量时间，请创建一个计时器，为其提供执行函数，并指定相关的导入。 然后，排序 100 次以获取有关排序时间的数据：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Build the measurement time arrays by appending the times one by one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过一次乘以时间来构建测量时间数组：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Fit the times into the theoretical model of `n log n`. Since we are varying
    the array size as powers of two, this is easy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将时间拟合为`n log n`的理论模型。 由于我们将数组大小更改为 2 的幂，因此很容易：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the complete timing code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的计时代码：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the resulting plot for the running time versus
    array size:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了运行时间与数组大小的关系图：
- en: '![How to do it...](img/0945_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_07_01.jpg)'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We measured the average running time of the `sort()` NumPy function. The following
    functions were used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们测量了`sort()` NumPy 函数的平均运行时间。 此秘籍中使用了以下函数：
- en: '| Functions | Descriptions |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `random_integers()` | This function creates an array of random integers when
    a range is given for the values and array size |'
  prefs: []
  type: TYPE_TB
  zh: '| `random_integers()` | 给定值和数组大小的范围时，此函数创建一个随机整数数组 |'
- en: '| `append()` | This function appends a value to a NumPy array |'
  prefs: []
  type: TYPE_TB
  zh: '| `append()` | 此函数将值附加到 NumPy 数组 |'
- en: '| `polyfit()` | This function fits data into a polynomial of a given degree
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `polyfit()` | 此函数将数据拟合为给定阶数的多项式 |'
- en: '| `polyval()` | This function evaluates a polynomial and returns the corresponding
    value for a given value of `x` |'
  prefs: []
  type: TYPE_TB
  zh: '| `polyval()` | 此函数计算多项式，并为给定的 `x`值返回相应的值 |'
- en: '| `semilogx()` | This function plots data using a logarithmic scale on the
    *X* axis |'
  prefs: []
  type: TYPE_TB
  zh: '| `semilogx()` | 此函数使用对数刻度在 *X* 轴上绘制数据 |'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for `timeit` is at [http://docs.python.org/2/library/timeit.html](http://docs.python.org/2/library/timeit.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeit`的文档位于[`docs.python.org/2/library/timeit.html`](http://docs.python.org/2/library/timeit.html)'
- en: Profiling with IPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IPython 进行分析
- en: In IPython, we can profile small snippets of code using `timeit`. We can also
    profile a larger script. We will show both approaches.
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPython 中，我们可以使用`timeit`来分析代码的小片段。 我们可以也分析较大的脚本。 我们将展示两种方法。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'First, we will time a small snippet:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将介绍一个小片段：
- en: 'Start IPython in `pylab` mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`pylab`模式启动 IPython：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create an array containing 1000 integer values between 0 and 1000:'
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含 1000 个介于 0 到 1000 之间的整数值的数组：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Measure the time taken for searching "the answer to everything"—42, in the
    array. Yes, the answer to everything is 42\. If you don''t believe me, read [http://en.wikipedia.org/wiki/42_%28number%29](http://en.wikipedia.org/wiki/42_%28number%29):'
  prefs: []
  type: TYPE_NORMAL
  zh: 测量在数组中搜索“所有问题的答案”（42）所花费的时间。 是的，所有问题的答案都是 42。如果您不相信我，请阅读[`en.wikipedia.org/wiki/42_%28number%29`](http://en.wikipedia.org/wiki/42_%28number%29)：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Profile the following small script that inverts a matrix of varying size containing
    random values. The `.I` attribute (that''s an uppercase I) of a NumPy matrix represents
    the inverse of that matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剖析以下小脚本，该小脚本可以反转包含随机值的大小可变的矩阵。 NumPy 矩阵的`.I`属性（即大写`I`）表示该矩阵的逆：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Time this code as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码计时如下：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then profile the script with the `p` option:'
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`p`选项对脚本进行配置：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We ran the aforementioned NumPy code through a profiler. The following table
    summarizes the profiler output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过分析器运行了上述 NumPy 代码。 下表概述了分析器的输出：
- en: '| Columns | Descriptions |'
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ncalls` | This is the number of calls |'
  prefs: []
  type: TYPE_TB
  zh: '| `ncalls` | 这是调用次数 |'
- en: '| `tottime` | This is the total time spent in a function |'
  prefs: []
  type: TYPE_TB
  zh: '| `tottime` | 这是一个函数花费的总时间 |'
- en: '| `percall` | This is the time spent per call, calculated by dividing the total
    time by the count of calls |'
  prefs: []
  type: TYPE_TB
  zh: '| `percall` | 这是每次调用所花费的时间  ，计算方法是将总时间除以调用次数 |'
- en: '| `cumtime` | This is the cumulative time spent in function and functions called
    by the function, including recursive calls |'
  prefs: []
  type: TYPE_TB
  zh: '| `cumtime` | 这是在函数和由函数调用的函数（包括递归调用）上花费的累积时间 |'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The IPython magics documentation at [http://ipython.org/ipython-doc/dev/interactive/magics.html](http://ipython.org/ipython-doc/dev/interactive/magics.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IPython 魔术文档位于[`ipython.org/ipython-doc/dev/interactive/magics.html`](http://ipython.org/ipython-doc/dev/interactive/magics.html)'
- en: Installing line_profiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装`line_profiler`
- en: '`line_profiler` was created by one of the developers of NumPy. This module
    does line-by-line profiling of Python code. We will describe the necessary installation
    steps in this recipe.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`line_profiler`由 NumPy 的开发人员之一创建。 此模块对 Python 代码进行逐行分析。 我们将在此秘籍中描述必要的安装步骤。'
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: You might need to install `setuptools`. This was covered in a previous recipe;
    refer to the *See also* section if necessary. In order to install the development
    version, you will need Git. Installing Git is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要安装`setuptools`。 先前的秘籍中对此进行了介绍； 如有必要，请参阅“另见”部分。 为了安装开发版本，您将需要 Git。 安装 Git
    超出了本书的范围。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Choose the install option appropriate for you:'
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适合您的安装选项：
- en: 'Install `line_profiler` with `easy_install`, using any one of the following
    commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下任一命令将`line_profiler`与`easy_install`一起安装：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Install the development version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装开发版本。
- en: 'Check out the source with Git:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git 查看源代码：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After checking out the source, build it as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 签出源代码后，按如下所示构建它：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing IPython* in [Chapter 1](ch01.xhtml "Chapter 1. Winding Along with
    IPython"), *Winding Along with IPython*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一章，“使用 IPython”中的“安装 IPython”
- en: Profiling code with line_profiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`line_profiler`分析代码
- en: Now that we've installed `line_profiler`, we can start profiling.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装完毕，可以开始分析。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Obviously, we will need code to profile:'
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们将需要代码来分析：
- en: 'Write the following code to multiply a random matrix of varying size by itself.
    Also, the thread will sleep for a few seconds. Annotate the function to profile
    with `@profile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下代码，以自身乘以大小可变的随机矩阵。 此外，线程将休眠几秒钟。 使用`@profile`注解函数以进行概要分析：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the profiler with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行事件分析器：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'The `@profile` decorator tells `line_profiler` which functions to profile.
    The following table explains the output of the profiler:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`@profile`装饰器告诉`line_profiler`要分析哪些函数。 下表说明了分析器的输出：'
- en: '| Columns | Descriptions |'
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Line #` | The line number in the file |'
  prefs: []
  type: TYPE_TB
  zh: '| `Line #` | 文件中的行号 |'
- en: '| `Hits` | The number of times the line was executed |'
  prefs: []
  type: TYPE_TB
  zh: '| `Hits` | 执行该行的次数 |'
- en: '| `Time` | The time spent executing the line |'
  prefs: []
  type: TYPE_TB
  zh: '| `Time` | 执行该行所花费的时间 |'
- en: '| `Per Hit` | The average time spent executing the line |'
  prefs: []
  type: TYPE_TB
  zh: '| `Per Hit` | 执行该行所花费的平均时间 |'
- en: '| `% Time` | The percentage of time spent executing the line relative to the
    time spent executing all the lines |'
  prefs: []
  type: TYPE_TB
  zh: '| `% Time` | 执行该行所花费的时间相对于执行所有行所花费的时间的百分比 |'
- en: '| `Line Contents` | The content of the line |'
  prefs: []
  type: TYPE_TB
  zh: '| `Line Contents` | 该行的内容 |'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The Github `line_profiler` project page is at [https://github.com/rkern/line_profiler](https://github.com/rkern/line_profiler)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Github `line_profiler`项目页面位于[`github.com/rkern/line_profiler`](https://github.com/rkern/line_profiler)'
- en: Profiling code with the cProfile extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`cProfile`扩展和代码性能分析'
- en: '`cProfile` is a `C` extension introduced in Python 2.5\. It can be used for
    deterministic profiling. Deterministic profiling means that the time measurements
    obtained are precise and no sampling is used. This contrasts with statistical
    profiling, where measurements come from random samples. We will profile a small
    NumPy program using `cProfile`, which transposes an array with random values.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`cProfile`是 Python 2.5 中引入的`C`扩展名。 它可以用于确定性分析。 确定性分析表示所获得的时间测量是精确的，并且不使用采样。
    这与统计分析相反，统计分析来自随机样本。 我们将使用`cProfile`对一个小的 NumPy 程序进行分析，该程序会对具有随机值的数组进行转置。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Again, we require code to profile:'
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要代码来配置：
- en: 'Write the following `transpose()` function to create an array with random values
    and transpose it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下`transpose()`函数以创建具有随机值的数组并将其转置：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the profiler and give it the function to profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行分析器，并为其提供待分析函数：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The complete code for this tutorial can be found in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下片段中找到本教程的完整代码：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For a 1000 x 1000 array, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`1000 x 1000`的数组，我们得到以下输出：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The columns in the output are the same as those seen in the IPython profiling
    recipe.
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的列与 IPython 分析秘籍中看到的列相同。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The Python profilers documentation at [http://docs.python.org/2/library/profile.html](http://docs.python.org/2/library/profile.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python 分析器文档位于[`docs.python.org/2/library/profile.html`](http://docs.python.org/2/library/profile.html)'
- en: The working with `pstats` tutorial at [http://pymotw.com/2/profile/#module-pstats](http://pymotw.com/2/profile/#module-pstats)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用`pstats`的教程位于[`pymotw.com/2/profile/#module-pstats`](http://pymotw.com/2/profile/#module-pstats)'
- en: Debugging with IPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IPython 进行调试
- en: '*"If debugging is the process of removing software bugs, then programming must
    be the process of putting them in."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “如果调试是清除软件错误的过程，则编程必须是放入它们的过程。”
- en: '*Edsger Dijkstra, Dutch computer scientist,
    winner of the 1972 Turing Award*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '——荷兰计算机科学家艾兹格尔·迪克斯特拉（Edsger Dijkstra），1972 年图灵奖的获得者'
- en: 'Debugging is one of those things nobody really likes, but is very important
    to master. It can take hours, and because of Murphy''s law, you most likely don''t
    have that time. Therefore, it is important to be systematic and know your tools
    well. After you''ve found the bug and implemented a fix, you should have a unit
    test in place (if the bug has a related ID from an issue tracker, I usually name
    the test by appending the ID at the end). In this way, you will at least not have
    to go through the hell of debugging again. Unit testing is covered in the next
    chapter. We will debug the following buggy code. It tries to access an array element
    that is not present:'
  prefs: []
  type: TYPE_NORMAL
  zh: '调试是没人真正喜欢，但是掌握这些东西非常重要的东西之一。 这可能需要几个小时，并且由于墨菲定律，您很可能没有时间。 因此，重要的是要系统地了解您的工具。
    找到错误并实现修复后，您应该进行单元测试（如果该错误具有来自问题跟踪程序的相关 ID，我通常在末尾附加 ID 来命名测试）。 这样，您至少不必再次进行调试。
    下一章将介绍单元测试。 我们将调试以下错误代码。 它尝试访问不存在的数组元素：'
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The IPython debugger works as the normal Python `pdb` debugger; it adds features
    such as tab completion and syntax highlighting.
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 调试器充当普通的 Python `pdb`调试器； 它添加了选项卡补全和语法突出显示等功能。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The following steps illustrate a typical debugging session:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤说明了典型的调试会话：
- en: 'Start the IPython shell. Run the buggy script in IPython by issuing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 IPython Shell。 通过发出以下命令在 IPython 中运行错误脚本：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now that your program crashed, start the debugger. Set a breakpoint on the
    line where the error occurred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的程序崩溃了，启动调试器。 在发生错误的行上设置一个断点：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'List the code with the `list` command, or use the shorthand `l`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`list`命令列出代码，或使用简写`l`：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can now evaluate arbitrary code at the line the debugger is currently at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在调试器当前所在的行上求值任意代码：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The **call stack** is a stack containing information about active functions
    of a running program. View the call stack with the `bt` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用栈是包含有关正在运行的程序的活动函数的信息的栈。 使用`bt`命令查看调用栈：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Move up the call stack:'
  prefs: []
  type: TYPE_NORMAL
  zh: 向上移动调用栈：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Move down the call stack:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下移调用栈：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'In this tutorial, you learned how to debug a NumPy program using IPython. We
    set a breakpoint and navigated the call stack. The following debugger commands
    were used:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您学习了如何使用 IPython 调试 NumPy 程序。 我们设置一个断点并导航调用栈。 使用了以下调试器命令：
- en: '| Commands | Descriptions |'
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `list` or `l` | Lists the source code |'
  prefs: []
  type: TYPE_TB
  zh: '| `list`或 `l` | 列出源代码 |'
- en: '| `bt` | Shows the call stack |'
  prefs: []
  type: TYPE_TB
  zh: '| `bt` | 显示调用栈 |'
- en: '| `u` | Moves up the call stack |'
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 向上移动调用栈 |'
- en: '| `d` | Moves down the call stack |'
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 下移调用栈 |'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The Python debugger documentation at [http://docs.python.org/2/library/pdb.html](http://docs.python.org/2/library/pdb.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python 调试器文档位于[`docs.python.org/2/library/pdb.html`](http://docs.python.org/2/library/pdb.html)'
- en: The `ipdb` package's homepage at [https://pypi.python.org/pypi/ipdb](https://pypi.python.org/pypi/ipdb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipdb`包的主页位于[`pypi.python.org/pypi/ipdb`](https://pypi.python.org/pypi/ipdb)'
- en: Debugging with PuDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PuDB 进行调试
- en: '**PuDB** is a visual, full-screen, console-based Python debugger that is easy
    to install. PuDB supports cursor keys and vi commands. We can also integrate this
    debugger with IPython if required.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**PuDB** 是基于视觉的，全屏，基于控制台的 Python 调试器，易于安装。 PuDB 支持光标键和 vi 命令。 如果需要，我们还可以将此调试器与
    IPython 集成。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We''ll start with the installation of `pudb`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装`pudb`开始：
- en: 'To install `pudb`, we only need to execute the following command (or the equivalent
    `pip` command):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装`pudb`，我们只需执行以下命令（或等效的`pip`命令）：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s debug the buggy program from the previous example. Start the debugger
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们调试前面示例中的`buggy`程序。 如下所示启动调试器：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following screenshot shows the user interface of the debugger:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了调试器的用户界面：
- en: '![How to do it...](img/0945_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_07_02.jpg)'
- en: The screenshot shows the most important debugging commands at the top. We can
    also see the code being debugged, the variables, the stack, and the defined breakpoints.
    Typing `q` exits most menus. Typing `n` moves the debugger to the next line. We
    can also move with the cursor keys or vi `j` and `k` keys to, for instance, set
    a breakpoint by typing `b`.
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕快照在顶部显示了最重要的调试命令。 我们还可以看到正在调试的代码，变量，栈和定义的断点。 键入`q`退出大多数菜单。 键入`n`将调试器移至下一行。
    我们还可以使用光标键或 VI 的`j`和`k`键移动，例如，通过键入`b`设置断点。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The PyPi PuDB page is at [https://pypi.python.org/pypi/pudb](https://pypi.python.org/pypi/pudb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PyPi PuDB 页面位于[`pypi.python.org/pypi/pudb`](https://pypi.python.org/pypi/pudb)'
