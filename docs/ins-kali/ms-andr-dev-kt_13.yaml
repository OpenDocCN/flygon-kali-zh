- en: Tuning Up for High Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整以获得高性能
- en: We just finished mastering work with backend and API. We are approaching the
    end of our journey, but it's not over yet! We have to cover some very important
    points! One such is performance optimization. We will guide you through some good
    practices in achieving this. Think about the code we have developed so far and
    how can we apply these advices on it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚掌握了与后端和API的工作。我们接近旅程的尽头，但还没有结束！我们必须涵盖一些非常重要的要点！其中之一是性能优化。我们将指导你通过一些在实现这一目标时的良好实践。思考到目前为止我们已经开发的代码，以及如何应用这些建议。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Layout optimization
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局优化
- en: Optimization to preserve battery life
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化以保护电池寿命
- en: Optimizing to get maximal responsiveness
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化以获得最大的响应性
- en: Optimizing layouts
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化布局
- en: 'To achieve maximal UI performance, follow these points:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现最佳的UI性能，请遵循以下几点：
- en: '**Optimize your layout hierarchies**: Avoid nested layouts since it can be
    a performance killer! For example, you can have multiple `LinearLayout` views
    nested. Instead of this, switch to `RelativeLayout`. This can save your performance
    significantly! Nested layouts require more processing power to be used on calculations
    and drawing.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化你的布局层次结构**：避免嵌套布局，因为它可能会影响性能！例如，你可以有多个嵌套的`LinearLayout`视图。与此相反，切换到`RelativeLayout`。这可以显著提高性能！嵌套布局需要更多的处理能力用于计算和绘制。'
- en: '**Reuse layouts if possible**: Android provides `<include />` to allow this.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽可能重用布局**：Android提供了`<include />`来实现这一点。'
- en: 'Take a look at the following example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 看一个例子：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Beside this, you can use `<merge>`. Merge eliminates redundant `view groups`
    in your view hierarchy when you include one layout within another. Let''s take
    a look at the following example:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，可以使用`<merge>`。当在一个布局中包含另一个布局时，合并可以消除视图层次结构中多余的`view groups`。让我们看一个例子：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we include `to_merge.xml` in another layout using include, like we did
    in the previous example, Android will ignore the `<merge>` element and add our
    views directly to the container in which `<include />` is placed:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在另一个布局中使用include包含`to_merge.xml`时，就像我们在之前的例子中所做的那样，Android会忽略`<merge>`元素，并直接将我们的视图添加到`<include
    />`所放置的容器中：
- en: Include layouts into your screens only when they are needed--If you don't need
    view at the moment, set its visibility to `Gone` instead of `Invisible`. `Invisible`
    will still create an instance of view. When using `Gone`, Android will instantiate
    view only when visibility is changed to `Visible`.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只在需要时将布局包含到屏幕中--如果你暂时不需要视图，将其可见性设置为`Gone`而不是`Invisible`。`Invisible`仍会创建视图的实例。使用`Gone`时，Android只有在可见性更改为`Visible`时才会实例化视图。
- en: Use containers like `ListView` or `GridView` to hold your groups of data. We
    already explained why you should use them in the previous chapter.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ListView`或`GridView`等容器来保存你的数据组。我们已经在前一章中解释了为什么你应该使用它们。
- en: Optimizing battery life
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化电池寿命
- en: There are many ways to drain your battery. Just one of the examples is doing
    too much work in your application. Too much processing can affect your battery.
    However, we will point out ways you can save your battery and what you must avoid.
    Follow these points and keep them in mind every time you develop an application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以耗尽你的电池。其中一个例子就是在应用程序中做太多的工作。过多的处理会影响电池寿命。然而，我们将指出你可以节省电池的方法以及你必须避免的事情。遵循这些要点，并在开发应用程序时时刻牢记。
- en: 'To keep your battery in the best condition, apply these advices:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持电池处于最佳状态，请遵循以下建议：
- en: Reduce network communication as much as possible. Frequent network calls can
    affect your battery. Because of this, try to make this optimal.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量减少网络通信。频繁的网络调用会影响电池寿命。因此，尽量使其达到最佳状态。
- en: Determine if your phone is charging. That can be a good time to fire up intensive
    and performance demanding actions your application may need to do.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定你的手机是否在充电。这可能是启动应用程序可能需要执行的密集和性能要求的操作的好时机。
- en: Monitor connectivity status and perform connectivity related operations only
    when the connectivity status is proper.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控连接状态，并且只有在连接状态正常时执行与连接相关的操作。
- en: Make use of broadcast messages rationally. Frequent and unnecessary sending
    of broadcast messages can cost you your performance. Think how frequent you need
    them and also unregister your receivers when you don't need to receive messages
    anymore and when there is no benefit to receiving them.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合理利用广播消息。频繁和不必要地发送广播消息会影响性能。考虑发送频率，并在不需要接收消息时注销接收器。
- en: Pay attention to the intensity of GPS use. Frequent location requests can affect
    your battery significantly.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意GPS的使用强度。频繁的位置请求会显著影响电池寿命。
- en: Keeping your application responsive
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持你的应用程序响应
- en: 'How many times has it happened to you that you use some Android application
    and get the message saying that the application is not responding? Why does this
    happen? We will explain! Pay attention to these points so you don''t have the
    same thing happening with your application:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你有多少次使用某个Android应用程序时收到应用程序无响应的消息？为什么会发生这种情况？我们会解释！注意以下几点，以免发生同样的情况：
- en: Make sure nothing blocks your input (any intensive operation, especially network
    traffic).
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保没有任何东西阻塞你的输入（任何密集的操作，特别是网络流量）。
- en: Don't perform long tasks on the main application thread.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在主应用程序线程上执行长时间的任务。
- en: Don't perform long running operations in the `onReceive()` method for your broadcast
    receivers.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在广播接收器的`onReceive()`方法中执行长时间运行的操作。
- en: Make use of the `AsyncTask` class as much as you can. Consider the use of `ThreadPoolExecutor`.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量使用`AsyncTask`类。考虑使用`ThreadPoolExecutor`。
- en: Try using content loaders whenever it's possible.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能使用内容加载器。
- en: Avoid executing too many threads at the same time.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免同时执行太多线程。
- en: If writing to filesystem, do it from a separate thread.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要写入文件系统，请使用单独的线程。
- en: If it still happens that you have ANRs, or your application behaves sluggishly,
    use tools such as systrace and Traceview to track the roots of your problems.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序仍然出现ANR，或者应用程序表现迟缓，请使用诸如systrace和Traceview之类的工具来跟踪问题的根源。
- en: Summary
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this short but important chapter, we highlighted important points about maintaining
    and achieving good application performance and responsiveness. These advices are
    crucial in application optimization. So, if your application doesn't follow these
    rules, you must optimize it accordingly. By finishing this chapter, we covered
    all you need to develop Android applications. In the next chapter, we will test
    it. Be ready to write some unit and instrumentation tests!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一简短但重要的章节中，我们强调了关于维护和实现良好应用性能和响应能力的重要要点。这些建议在应用程序优化中至关重要。因此，如果您的应用程序不遵循这些规则，您必须相应地进行优化。通过完成这一章，我们涵盖了您开发Android应用程序所需的一切。在下一章中，我们将对其进行测试。准备好编写一些单元测试和仪器测试！
