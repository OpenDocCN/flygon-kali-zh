- en: Chapter 11. Playing with Pygame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十一章：玩转 Pygame
- en: '*This chapter is for developers who want to create games quickly and easily
    with NumPy and Pygame. Basic game development experience would help, but it isn''t
    necessary.*'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章适用于希望使用 NumPy 和 Pygame 快速轻松创建游戏的开发人员。 基本的游戏开发经验会有所帮助，但这不是必需的。
- en: 'The things you will learn are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学到的东西如下：
- en: Pygame basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pygame 基础
- en: matplotlib integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib 集成
- en: Surface pixel arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表面像素数组
- en: Artificial intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人工智能
- en: Animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画
- en: OpenGL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenGL
- en: Pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pygame
- en: '**Pygame** is a Python framework, originally written by **Pete Shinners**,
    which, as its name suggests, can be used to create video games. Pygame is free,
    open source since 2004 and licensed under the GPL license, which means that you
    are allowed to basically make any type of game. Pygame is built on top of the
    **Simple** **DirectMedia** **Layer** (**SDL**). SDL is a C framework that gives
    access to graphics, sound, keyboard, and other input devices on various operating
    systems including Linux, Mac OS X, and Windows.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pygame** 是 Python 框架，最初由  **Pete Shinners** 编写，  顾名思义，可用于制作视频游戏。 自 2004 年以来，Pygame
    是免费的开放源代码，并获得 GPL 许可，这意味着您基本上可以制作任何类型的游戏。 Pygame 构建在**简单 DirectMedia 层**（**SDL**）。
    SDL 是一个 C 框架，可以访问各种操作系统（包括 Linux，MacOSX 和 Windows）上的图形，声音，键盘和其他输入设备。'
- en: Time for action – installing Pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：安装 Pygame
- en: We will install Pygame in this section. Pygame should be compatible with all
    Python versions. At the time of writing, there were some incompatibility issues
    with Python 3, but in all probability, these will be fixed soon.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中安装 Pygame。 Pygame 应该与所有 Python 版本兼容。 在撰写时，Python3 存在一些不兼容问题，但很可能很快就会解决。
- en: '**Installing on Debian and Ubuntu**: Pygame can be found in the Debian archives
    at [https://packages.qa.debian.org/p/pygame.html](https://packages.qa.debian.org/p/pygame.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Debian 和 Ubuntu 上安装**：Pygame 可以在 Debian 档案文件中找到，位于[`packages.qa.debian.org/p/pygame.html`](https://packages.qa.debian.org/p/pygame.html)。'
- en: '**Installing on Windows**: From the Pygame website ([http://www.pygame.org/download.shtml](http://www.pygame.org/download.shtml)),
    download the appropriate binary installer for the Python version you are using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Windows 上安装**：从 Pygame 网站（[`www.pygame.org/download.shtml`](http://www.pygame.org/download.shtml)）下载适用于您正在使用的版本的
    Python 的二进制安装程序。'
- en: '**Installing Pygame on the Mac**: Binary Pygame packages for Mac OS X 10.3
    and up can be found at [http://www.pygame.org/download.shtml](http://www.pygame.org/download.shtml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Mac 上安装 Pygame**：适用于 MacOSX 10.3 及更高版本的二进制 Pygame 包可在[`www.pygame.org/download.shtml`](http://www.pygame.org/download.shtml)中找到。'
- en: '**Installing from source**: Pygame is using the `distutils` system for compiling
    and installing. To start installing Pygame with the default options, simply run
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从源代码安装**：Pygame 使用`distutils`系统进行编译和安装。 要开始使用默认选项安装 Pygame，只需运行以下命令：'
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you need more information about the available options, type the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要有关可用选项的更多信息，请键入以下内容：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To compile the code, you need a compiler for your operating system. Setting
    this up is beyond the scope of this book. More information about compiling Pygame
    on Windows can be found at [http://pygame.org/wiki/CompileWindows](http://pygame.org/wiki/CompileWindows).
    For more information about compiling Pygame on Mac OS X, refer to [http://pygame.org/wiki/MacCompile](http://pygame.org/wiki/MacCompile).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要编译代码，您的操作系统需要一个编译器。 进行设置超出了本书的范围。 有关在  Windows 上编译 Pygame 的更多信息，可以在[`pygame.org/wiki/CompileWindows`](http://pygame.org/wiki/CompileWindows)上找到。
    有关在  MacOSX 上编译 Pygame 的更多信息，请参考[`pygame.org/wiki/MacCompile`](http://pygame.org/wiki/MacCompile)。
- en: Hello World
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HelloWorld
- en: We will create a simple game that we will improve on further in this chapter.
    As is traditional in programming books, we start with a `Hello World!` example.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的游戏，在本章中我们将进一步改进  。 与编程书籍中的传统方法一样，我们从`Hello World!`示例开始。
- en: Time for action – creating a simple game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：创建一个简单的游戏
- en: It's important to notice the so-called main game loop, where all the action
    happens, and the usage of the `Font` module to render text. In this program, we
    will manipulate a Pygame `Surface` object that is used for drawing, and we will
    handle a quit event.
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意所谓的主游戏循环，在该循环中所有动作都会发生，并使用`Font`模块渲染文本。 在此程序中，我们将操纵用于绘制的 Pygame `Surface`对象，并处理退出事件。
- en: 'First, import the required Pygame modules. If Pygame is installed properly,
    we should get no errors, otherwise please return to the installation *Time for
    action*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入所需的 Pygame 模块。 如果正确安装了 Pygame，则不会出现任何错误，否则请返回安装“实战时间”：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Initialize Pygame, create a display of `400` by `300` pixels, and set the window
    title to `Hello` `world!`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 Pygame，按`300`像素创建`400`的显示，并将窗口标题设置为`Hello world!`：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Games usually have a game loop, which runs forever until, for instance, a quit
    event occurs. In this example, only set a label with the text `Hello world!` at
    coordinates (`100`, `100`). The text has font size `19` and a `red` color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏通常会有一个游戏循环，该循环将一直运行直到发生退出事件为止。 在此示例中，仅在坐标`(100, 100)`上设置带有文本`Hello world!`的标签。
    文字的字体大小为 19，颜色为红色：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We get the following screenshot as an end result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下屏幕截图作为最终结果：
- en: '![Time for action – creating a simple game](img/4154_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：创建一个简单的游戏](img/4154_11_01.jpg)'
- en: 'Following is the complete code for the Hello World! example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 HelloWorld 的完整代码示例：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'It may not seem like much, but we learned a lot in this section. The functions
    that passed the review are summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来似乎不多，但是我们在本节中学到了很多东西。 下表总结了通过审查的函数：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pygame.init()` | This function performs initialization and you must call
    it before calling other Pygame functions. |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.init()` | 此函数执行初始化，您必须在调用其他 Pygame 函数之前调用它。 |'
- en: '| `pygame.display.set_mode((400, 300))` | This function creates a so-called
    `Surface` object to draw on. We give this function a tuple representing the dimensions
    of the surface. |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.display.set_mode((400, 300))` | 此函数创建一个要使用的所谓的`Surface`对象。 我们给这个函数一个表示表面尺寸的元组。
    |'
- en: '| `pygame.display.set_caption(''Hello World!'')` | This function sets the window
    title to a specified string value. |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.display.set_caption(''Hello World!'')` | 此函数将窗口标题设置为指定的字符串值。 |'
- en: '| `pygame.font.SysFont("None", 19)` | This function creates a system font from
    a comma-separated list of fonts (in this case none) and an integer font size parameter.
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.font.SysFont("None", 19)` | 此函数根据逗号分隔的字体列表（在本例中为无）和整数字体大小参数创建系统字体。
    |'
- en: '| `sysFont.render(''Hello World'', 0, (255, 100, 100))` | This function draws
    text on a `Surface`. The last parameter is a tuple representing the RGB values
    of a color. |'
  prefs: []
  type: TYPE_TB
  zh: '| `sysFont.render(''Hello World'', 0, (255, 100, 100))` | 此函数在`Surface`上绘制文本。
    最后一个参数是表示颜色的 RGB 值的元组。 |'
- en: '| `screen.blit(rendered, (100, 100))` | This function draws on a `Surface`.
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `screen.blit(rendered, (100, 100))` | 此函数使用`Surface`。 |'
- en: '| `pygame.event.get()` | This function gets a list of `Event` objects. Events
    represent a special occurrence in the system, such as a user quitting the game.
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.event.get()` | 此函数获取`Event`对象的列表。 事件表示系统中的特殊事件，例如用户退出游戏。 |'
- en: '| `pygame.quit()` | This function cleans up the resources used by Pygame. Call
    this function before exiting the game. |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.quit()` | 该函数清除由 Pygame 使用的资源。 退出游戏之前，请调用此函数。 |'
- en: '| `pygame.display.update()` | This function refreshes the surface. |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.display.update()` | 此函数刷新表面。 |'
- en: Animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: Most games, even the most static ones, have some level of animation. From a
    programmer's standpoint, animation is nothing more than displaying an object at
    a different place at a different time, thus simulating movement.
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数游戏，甚至是最静态的游戏，都有一定程度的动画效果。 从程序员的角度来看，动画就是  ，无非就是在不同的时间在不同的位置显示对象，从而模拟运动。
- en: Pygame offers a `Clock` object, which manages how many frames are drawn per
    second. This ensures that the animation is independent of how fast the user's
    CPU is.
  prefs: []
  type: TYPE_NORMAL
  zh: Pygame 提供了一个`Clock`对象，该对象管理每秒绘制多少帧。 这样可以确保动画与用户 CPU 的速度无关。
- en: Time for action – animating objects with NumPy and Pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用 NumPy 和 Pygame 让对象动起来
- en: We will load an image and use NumPy again to define a clockwise path around
    the screen.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载图像，然后再次使用 NumPy 定义屏幕周围的顺时针路径。
- en: 'Create a Pygame clock as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Pygame 时钟，如下所示：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As part of the source code accompanying this book, there should be a picture
    of a head. Load this image and move it around on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为本书随附的源代码的一部分，应该有一张头像。 加载此图像并在屏幕上四处移动：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Define some arrays to hold the coordinates of the positions, where we would
    like to put the image during the animation. Since we will move the object, there
    are four logical sections of the path: `right`, `down`, `left`, and `up`. Each
    of these sections will have `40` equidistant steps. Initialize all the values
    in the sections to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一些数组来保存位置的坐标，我们希望在动画过程中将图像放置在这些位置。 由于我们将移动对象，因此路径有四个逻辑部分：`right`，`down`，`left`和`up`。
    每个部分将具有`40`等距步长。 将`0`部分中的所有值初始化：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It''s straight-forward to set the coordinates of the positions of the image.
    However, there is one tricky bit to notice—the `[::-1]` notation leads to reversing
    the order of the array elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置图像位置的坐标很简单。 但是，需要注意一个棘手的问题-`[::-1]`表示法会导致数组元素的顺序颠倒：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can join the path sections, but before doing this, transpose the arrays
    with the `T` operator because they are not aligned properly for concatenation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以加入路径部分，但是在执行此操作之前，请使用`T`运算符转置数组，因为它们未正确对齐以进行连接：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the main event loop, let the clock tick at a rate of 30 frames per second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主事件循环中，让时钟以每秒 30 帧的速度计时：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A screenshot of the moving head is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 摇头的屏幕截图如下：
- en: '![Time for action – animating objects with NumPy and Pygame](img/4154_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：使用 NumPy 和 Pygame 让对象动起来](img/4154_11_02.jpg)'
- en: You should be able to watch a movie of this animation at [https://www.youtube.com/watch?v=m2TagGiq1fs](https://www.youtube.com/watch?v=m2TagGiq1fs),
    and it is also part of the code bundle (`animation.mp4`).
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够在[`www.youtube.com/watch?v=m2TagGiq1fs`](https://www.youtube.com/watch?v=m2TagGiq1fs)观看此动画的电影。 它也是代码包（`animation.mp4`）的一部分。
- en: 'The code of this example uses almost everything we have learnt so far, but
    should still be simple enough to understand:'
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码几乎使用了到目前为止我们学到的所有内容，但仍应足够简单以了解：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We learned a bit about animation in this section. The most important concept
    we learned about is the clock. The following table describes the new functions
    we used:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了一些有关动画的知识。 我们了解到的最重要的概念是时钟。 下表描述了我们使用的新函数：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pygame.time.Clock()` | This creates a game clock. |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.time.Clock()` | 这将创建一个游戏时钟。 |'
- en: '| `clock.tick(30)` | This function executes a tick of the game clock. Here,
    `30` is the number of frames per second. |'
  prefs: []
  type: TYPE_TB
  zh: '| `clock.tick(30)` | 此函数执行游戏时钟的刻度。 此处，`30`是每秒的帧数。 |'
- en: matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: matplotlib
- en: '`matplotlib` is an open source library for easy plotting, which we learned
    about in [Chapter 9](ch09.html "Chapter 9. Plotting with matplotlib"), *Plotting
    with matplotlib*. We can integrate matplotlib into a Pygame game and create various
    plots.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`是一个易于绘制的开源库，我们在第九章，“Matplotlib 绘图”中了解到。 我们可以将 Matplotlib 集成到
    Pygame 游戏中并创建各种绘图。'
- en: Time for Action – using matplotlib in Pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：在 Pygame 中使用 Matplotlib
- en: In this recipe, we take the position coordinates of the previous section and
    make a graph of them.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本秘籍中，我们采用上一节的位置坐标，并对其进行绘制。
- en: 'To integrate matplotlib with Pygame, we need to use a non-interactive backend;
    otherwise matplotlib will present us with a GUI window by default. We will import
    the main matplotlib module and call the `use()` function. Call this function immediately
    after importing the main matplotlib module and before importing other matplotlib
    modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将 Matplotlib 与 Pygame 集成，我们需要使用非交互式后端； 否则，默认情况下，Matplotlib 将为我们提供一个 GUI 窗口。
    我们将导入主要的 Matplotlib 模块并调用`use()`函数。 在导入主 Matplotlib 模块之后以及在导入其他 Matplotlib 模块之前，立即调用此函数：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can draw non-interactive plots on a matplotlib canvas. Creating this canvas
    requires imports, creating a figure and a subplot. Specify the figure to be `3`
    by `3` inches large. More details can be found at the end of this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在 Matplotlib 画布上绘制非交互式绘图。 创建此画布需要导入，创建图形和子图。 将数字指定为`3`乘`3`英寸大。 在此秘籍的末尾可以找到更多详细信息：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In non-interactive mode, plotting data is a bit more complicated than in the
    default mode. Since we need to plot repeatedly, it makes sense to organize the
    plotting code in a function. Pygame eventually draws the plot on the canvas. The
    canvas adds a bit of complexity to our setup. At the end of this example, you
    can find more detailed explanation of the functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在非交互模式下，绘制数据比在默认模式下复杂一些。 由于我们需要重复绘图，因此在函数中组织绘图代码是有意义的。 Pygame 最终在画布上绘制了绘图。 画布为我们的设置增加了一些复杂性。
    在此示例的末尾，您可以找到有关这些函数的更多详细说明：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows the animation in action. You can also view a
    screencast in the code bundle (`matplotlib.mp4`) and on YouTube at: [https://www.youtube.com/watch?v=t6qTeXxtnl4](https://www.youtube.com/watch?v=t6qTeXxtnl4).'
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了正在运行的动画。 您还可以在代码包（`matplotlib.mp4`）和 YouTube 上查看截屏视频，位于[`www.youtube.com/watch?v=t6qTeXxtnl4`](https://www.youtube.com/watch?v=t6qTeXxtnl4)。
- en: '![Time for Action – using matplotlib in Pygame](img/4154_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：在 Pygame 中使用 Matplotlib](img/4154_11_03.jpg)'
- en: 'We get the following code after the changes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 更改后，我们将获得以下代码：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'The following table explains the plotting related functions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下表解释了绘图相关函数：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `mpl.use("Agg")` | This function specifies to use the non-interactive backend
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `mpl.use("Agg")` | 此函数指定使用非交互式后端 |'
- en: '| `plt.figure(figsize=[3, 3])` | This function creates a figure of 3 by 3 inches
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `plt.figure(figsize=[3, 3])` | 此函数创建一个`3 x 3`英寸的图形 |'
- en: '| `agg.FigureCanvasAgg(fig)` | This function creates a canvas in non-interactive
    mode |'
  prefs: []
  type: TYPE_TB
  zh: '| `agg.FigureCanvasAgg(fig)` | 此函数在非交互模式下创建画布 |'
- en: '| `canvas.draw()` | This function draws on the canvas |'
  prefs: []
  type: TYPE_TB
  zh: '| `canvas.draw()` | 此函数在画布上绘制 |'
- en: '| `canvas.get_renderer()` | This function gets a renderer for the canvas |'
  prefs: []
  type: TYPE_TB
  zh: '| `canvas.get_renderer()` | 此函数为画布提供渲染器 |'
- en: Surface pixels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表面像素
- en: The Pygame `surfarray` module handles the conversion between Pygame `Surface`
    objects and NumPy arrays. As you may recall, NumPy can manipulate big arrays in
    a fast and efficient manner.
  prefs: []
  type: TYPE_NORMAL
  zh: Pygame `surfarray`模块处理 Pygame `Surface`对象与 NumPy 数组之间的转换  。 您可能还记得，NumPy 可以快速有效地处理大型数组。
- en: Time for Action – accessing surface pixel data with NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：用 NumPy 访问表面像素数据
- en: In this section, we will tile a small image to fill the game screen.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将平铺一个小图像以填充游戏屏幕。
- en: 'The `array2d()` function copies pixels into a two-dimensional array (and there
    is a similar function for three-dimensional arrays). Copy the pixels from the
    avatar image into an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`array2d()`函数将像素复制到二维数组中（对于三维数组也有类似的功能）。 将头像图像中的像素复制到数组中：'
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the game screen from the shape of the pixels array using the shape attribute
    of the array. Make the screen seven times larger in both directions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数组的`shape`属性从像素数组的形状创建游戏屏幕。 在两个方向上将屏幕放大七倍：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Tiling the image is easy with the NumPy the `tile()` function. The data needs
    to be converted into integer values, because Pygame defines colors as integers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 NumPy `tile()`函数可以轻松平铺图像。 数据需要转换为整数值，因为 Pygame 将颜色定义为整数：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `surfarray` module has a special function `blit_array()` to display the
    array on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`surfarray`模块具有特殊函数`blit_array()`在屏幕上显示数组：'
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![Time for Action – accessing surface pixel data with NumPy](img/4154_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：用 NumPy 访问表面像素数据](img/4154_11_04.jpg)'
- en: 'The following code performs the tiling of the image:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码执行图像的平铺：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'Following is a brief description of the new functions and attributes we used:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们使用的新函数和属性的简要说明：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pygame.surfarray.array2d(img)` | This function copies pixel data into a
    two-dimensional array |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.surfarray.array2d(img)` | 此函数将像素数据复制到二维数组中 |'
- en: '| `pygame.surfarray.blit_array(screen, new_pixels)` | This function displays
    array values on the screen |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.surfarray.blit_array(screen, new_pixels)` | 此函数在屏幕上显示数组值 |'
- en: Artificial Intelligence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人工智能
- en: Often we need to mimic intelligent behavior within a game. The `scikit-learn`
    project aims to provide an API for machine learning, and what I like most about
    it is its amazing documentation. We can install `scikit-learn` with the package
    manager of our operating system, though this option may or may not be available,
    depending on your operating system, but should be the most convenient route. Windows
    users can just download an installer from the project website. On Debian and Ubuntu,
    the project is called `python-sklearn`. On MacPorts, the ports are called `py26-scikits-learn`
    and `py27-scikits-learn`. We can also install from source or using `easy_install`.
    There are third-party distributions from **Python(x,y)**, **Enthought**, and **NetBSD**.
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们需要模仿游戏中的智能行为。 `scikit-learn`项目旨在提供一种用于机器学习的 API，而我最喜欢的是其精美的文档。 我们可以使用操作系统的包管理器来安装`scikit-learn`，尽管此选项可能有效或无效，具体取决于您的操作系统，但这应该是最方便的方法。
    Windows 用户只需从项目网站下载安装程序即可。 在 Debian 和 Ubuntu 上，该项目称为`python-sklearn`。 在 MacPorts
    上，这些端口称为`py26-scikits-learn`和`py27-scikits-learn`。 我们也可以从源代码或使用`easy_install`安装。
    **PythonXY**， **Enthought** 和 **NetBSD**。
- en: 'We can install `scikit-learn` by typing at command line:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在命令行中键入来安装`scikit-learn`：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can also type the following instead of the preceding line:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以键入以下内容而不是前一行：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This may not work because of permissions, so you might need to put `sudo` in
    front of the commands or log in as admin.
  prefs: []
  type: TYPE_NORMAL
  zh: 由于权限的原因，这可能无法正常工作，因此您可能需要在命令前面放置`sudo`或以管理员身份登录。
- en: Time for Action – clustering points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：点的聚类
- en: 'We will generate some random points and cluster them, which means that the
    points that are close to each other are put into the same cluster. This is just
    one of the many techniques that you can apply with `scikit-learn`. **Clustering**
    is a type of machine learning algorithm, which aims to group items based on similarities.
    Next, we will calculate a square affinity matrix. An **affinity matrix** is a
    matrix containing affinity values: for instance, the distances between points.
    Finally, we will cluster the points with the `AffinityPropagation` class from
    `scikit-learn`.'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将生成一些随机点并将它们聚类，这意味着彼此靠近的点将放入同一簇中。 这只是`scikit-learn`可以应用的许多技术之一。**聚类**是一种机器学习算法，旨在基于相似度对项目进行分组。
    接下来，我们将计算平方亲和矩阵。**亲和度矩阵**是包含亲和度值的矩阵：例如，点之间的距离。 最后，我们将这些点与[​​HTG2]中的`AffinityPropagation`类聚类。
- en: 'Generate 30 random point positions within a square of 400 by 400 pixels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`400 x 400`像素的正方形内生成 30 个随机点位置：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Calculate the affinity matrix using the Euclidean distance to the origin as
    the affinity metric:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用到原点的欧式距离作为亲和度度量来计算亲和度矩阵：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Give the `AffinityPropagation` class the result from the previous step. This
    class labels the points with the appropriate cluster number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`AffinityPropagation`类上一步的结果。 此类使用适当的簇编号标记点：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Draw polygons for each cluster. The function involved requires a list of points,
    a color (let''s paint it red), and a surface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个簇绘制多边形。 涉及的函数需要点列表，颜色（将其绘制为红色）和表面：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The result is a bunch of polygons for each cluster, as shown in the following
    picture:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是每个簇的一堆多边形，如下图所示：
- en: '![Time for Action – clustering points](img/4154_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：点的聚类](img/4154_11_05.jpg)'
- en: 'The clustering example code is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类示例代码如下：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'The most important lines in the artificial intelligence example are described
    in more detail in the following table:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下表更详细地描述了人工智能示例中最重要的行  ：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `sklearn.cluster.AffinityPropagation().fit(S)` | This function creates an
    `AffinityPropagation` object and performs a fit using an affinity matrix |'
  prefs: []
  type: TYPE_TB
  zh: '| `sklearn.cluster.AffinityPropagation().fit(S)` | 此函数创建`AffinityPropagation`对象，并使用相似性矩阵执行拟合
    |'
- en: '| `pygame.draw.polygon(screen, (255, 0, 0), point)` | This function draws a
    polygon given a surface, a color (red in this case), and a list of points |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.draw.polygon(screen, (255, 0, 0), point)` | 给定表面，颜色（在这种情况下为红色）和点列表，此函数绘制多边形
    |'
- en: OpenGL and Pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenGL 和 Pygame
- en: 'OpenGL specifies an API for two-dimensional and three-dimensional computer
    graphics. The API consists of functions and constants. We will be concentrating
    on the Python implementation called `PyOpenGL`. Install `PyOpenGL` with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 为二维和三维计算机图形指定了 API。 API 由函数和常量组成。 我们将专注于名为`PyOpenGL`的 Python 实现。 使用以下命令安装`PyOpenGL`：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You might need to have root access to execute this command. The corresponding
    `easy_install` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要具有 root 访问权限才能执行此命令。 对应于`easy_install`的命令如下：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Time for Action – drawing the Sierpinski gasket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制谢尔宾斯基地毯
- en: For the purpose of demonstration, we will draw a **Sierpinski** **gasket**,
    also known as **Sierpinski** **triangle** or **Sierpinski** **Sieve** with **OpenGL**.
    This is a fractal pattern in the shape of a triangle created by the mathematician
    **Waclaw** **Sierpinski**. The triangle is obtained via a recursive and, in principle
    infinite procedure.
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示的目的，我们将使用 OpenGL 绘制一个**谢尔宾斯基地毯**，也称为**谢尔宾斯基三角形**或**谢尔宾斯基筛子**。 这是由数学家**瓦克劳·谢尔宾斯基**（Waclaw Sierpinski）创建的三角形形状的分形图案。 三角形是通过递归且原则上是无限的过程获得的。
- en: 'First, start out by initializing some of the OpenGL related primitives. This
    includes setting the display mode and background color. A line-by-line explanation
    is given at the end of this section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，首先初始化一些与 OpenGL 相关的原语。 这包括设置显示模式和背景颜色。 本节末尾提供逐行说明：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The algorithm requires us to display points, the more the better. First, we
    set the drawing color to red. Second, we define the vertices (I call them points
    myself) of a triangle. Then, we define random indices, which are to be used to
    choose one of the three triangle vertices. We pick a random point somewhere in
    the middle—it doesn''t really matter where. After this, draw points halfway between
    the previous point and one of the vertices picked at random. Finally, flush the
    result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该算法要求我们显示点，越多越好。 首先，我们将绘图颜色设置为红色。 其次，我们定义一个三角形的顶点（我称它们为点）。 然后，我们定义随机索引，该随机索引将用于选择三个三角形顶点之一。
    我们在中间的某个地方随机选择一个点，实际上并不重要。 之后，在上一个点和随机选取的一个顶点之间的一半处绘制点。 最后，刷新结果：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The Sierpinski triangle looks like the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 谢尔宾斯基三角形如下所示：
- en: '![Time for Action – drawing the Sierpinski gasket](img/4154_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制谢尔宾斯基地毯](img/4154_11_06.jpg)'
- en: 'The full Sierpinski gasket demo code with all the imports is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 带有所有导入的完整谢尔宾斯基地毯演示代码如下：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'As promised, the following is a line-by-line explanation of the most important
    parts of the example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如所承诺的，以下是该示例最重要部分的逐行说明：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pygame.display.set_mode((w,h), pygame.OPENGL&#124;pygame.DOUBLEBUF)` | This
    function sets the display mode to the required width, height, and OpenGL display
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `pygame.display.set_mode((w,h), pygame.OPENGL&#124;pygame.DOUBLEBUF)` | 此函数将显示模式设置为所需的宽度，高度和
    OpenGL 显示 |'
- en: '| `glClear(GL_COLOR_BUFFER_BIT&#124;GL_DEPTH_BUFFER_BIT)` | This function clears
    the buffers using a mask. Here we clear the color buffer and depth buffer bits
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `glClear(GL_COLOR_BUFFER_BIT&#124;GL_DEPTH_BUFFER_BIT)` | 此函数使用遮罩清除缓冲区。 在这里，我们清除颜色缓冲区和深度缓冲区位
    |'
- en: '| `gluOrtho2D(0, w, 0, h)` | This function defines a two-dimensional orthographic
    projection matrix with the coordinates of the left, right, top, and bottom clipping
    planes |'
  prefs: []
  type: TYPE_TB
  zh: '| `gluOrtho2D(0, w, 0, h)` | 此函数定义二维正交投影矩阵，其坐标为左，右，上和下剪切平面 |'
- en: '| `glColor3f(1.0, 0, 0)` | This function defines the current drawing color
    using three float values for RGB (red, green, blue). In this case, we will be
    painting in red |'
  prefs: []
  type: TYPE_TB
  zh: '| `glColor3f(1.0, 0, 0)` | 此函数使用 RGB 的三个浮点值（红色，绿色，蓝色）定义当前图形颜色。 在这种情况下，我们将以红色绘制
    |'
- en: '| `glBegin(GL_POINTS)` | This function delimits the vertices of primitives
    or a group of primitives. Here the primitives are points |'
  prefs: []
  type: TYPE_TB
  zh: '| `glBegin(GL_POINTS)` | 此函数定义了图元的顶点或图元的组。 这里的原语是点 |'
- en: '| `glVertex2fv(point)` | This function renders a point given a vertex |'
  prefs: []
  type: TYPE_TB
  zh: '| `glVertex2fv(point)` | 此函数在给定顶点的情况下渲染点 |'
- en: '| `glEnd()` | This function closes a section of code started with `glBegin()`
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `glEnd()` | 此函数关闭以`glBegin()`开头的一段代码 |'
- en: '| `glFlush()` | This function forces the execution of GL commands |'
  prefs: []
  type: TYPE_TB
  zh: '| `glFlush()` | 此函数强制执行 GL 命令 |'
- en: Simulation game with Pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Pygame 的模拟游戏
- en: 'As a last example, we will simulate life with **Conway''s Game of Life**. The
    original game of life is based on a few basic rules. We start out with a random
    configuration on a two-dimensional square grid. Each cell in the grid can be either
    dead or alive. This state depends on the neighbors of the cell. You can read more
    about the rules at [http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules](http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules)
    At each step in time, the following transitions occur:'
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一个示例，我们将使用**康威的生命游戏**模拟生命。 最初的生命游戏是基于一些基本规则。 我们从二维正方形网格上的随机配置开始。 网格中的每个单元可以是死的或活着的。
    此状态取决于小区的邻居。 您可以在[`en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules`](http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules)上详细了解规则。在每个时间步上，都会发生以下转换：
- en: Live cells with less than two live neighbors die.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 少于两个活邻居的活细胞死亡。
- en: Live cells with two or three live neighbors live on to the next generation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有两个或三个活邻居的活细胞可以存活到下一代。
- en: Live cells with more than three live neighbors die.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有三个以上活邻居的活细胞死亡。
- en: Dead cells with exactly three live neighbors become a live cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有恰好三个活邻居的死细胞会成为活细胞。
- en: Convolution can be used to evaluate the basic rules of the game. We need the
    SciPy package for the convolution process.
  prefs: []
  type: TYPE_NORMAL
  zh: 卷积可用于求值游戏的基本规则。 卷积过程需要 SciPy 包。
- en: Time for Action – simulating life
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：模拟生命
- en: 'The following code is an implementation of the Game of Life, with some modifications:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是生命游戏的实现  ，并进行了一些修改：
- en: Clicking once with the mouse draws a cross until we click again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用鼠标单击一次会画一个十字，直到我们再次单击
- en: The *r* key resets the grid to a random state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`键可将网格重置为随机状态'
- en: Pressing *b* creates blocks based on the mouse position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`键根据鼠标位置创建块'
- en: '*g* creates gliders'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g`键创建滑翔机'
- en: The most important data structure in the code is a two-dimensional array, holding
    the color values of the pixels on the game screen. This array is initialized with
    random values and then recalculated for each iteration of the game loop. Find
    more information about the involved functions in the next section.
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中最重要的数据结构是一个二维数组，其中包含游戏屏幕上像素的颜色值。 该数组用随机值初始化，然后针对游戏循环的每次迭代重新计算。 在下一部分中找到有关所涉及函数的更多信息。
- en: 'To evaluate the rules, use the convolution as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要求值规则，请使用卷积，如下所示：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Draw a cross using the basic indexing tricks that we learned in [Chapter 2](ch02.html
    "Chapter 2. Beginning with NumPy Fundamentals"), *Beginning with NumPy Fundamentals*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在第二章，“从 NumPy 基础知识开始”中学习的基本索引技巧来画十字：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Initialize the grid with random values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用随机值初始化网格：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following is the code in its entirety:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的代码：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You should be able to view a screencast from the code bundle (`life.mp4`) or
    on YouTube ([https://www.youtube.com/watch?v=NNsU-yWTkXM](https://www.youtube.com/watch?v=NNsU-yWTkXM)).
    A screenshot of the game in action is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够从代码包（`life.mp4`）或 YouTube（[`www.youtube.com/watch?v=NNsU-yWTkXM`](https://www.youtube.com/watch?v=NNsU-yWTkXM)）
    上观看截屏视频。 正在运行的游戏的屏幕截图如下：
- en: '![Time for Action – simulating life](img/4154_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：模拟生命](img/4154_11_07.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We used some NumPy and SciPy functions that need explaining:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一些 NumPy 和 SciPy 函数，这些函数需要说明：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ndimage.convolve(arr, weights, mode=''wrap'')` | This function applies the
    convolve operation on the given array, using weights in the wrap mode. The mode
    has to do with the array borders. |'
  prefs: []
  type: TYPE_TB
  zh: '| `ndimage.convolve(arr, weights, mode=''wrap'')` | 此函数在包装模式下使用权重将卷积运算应用于给定数组。
    该模式与数组边界有关。 |'
- en: '| `bools.astype(int)` | This function converts the array of Booleans to integers.
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `bools.astype(int)` | 此函数将布尔数组转换为整数。 |'
- en: '| `np.arange(0, pos[0], 10)` | This function creates an array from 0 to `pos[0]`
    in steps of 10\. So, if `pos[0]` is equal to 1000, we will get 0, 10, 20, … 990.
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `np.arange(0, pos[0], 10)` | 此函数以 10 为步长创建一个从 0 到`pos[0]`的数组。因此，如果`pos[0]`等于
    1000，我们将得到 0、10、20，… 990。 |'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: You might find the mention of Pygame in this book a bit odd. However, after
    reading this chapter, I hope you realized that NumPy and Pygame go well together.
    Games after all involve lots of computation for which NumPy and SciPy are ideal
    choices, and they also require artificial intelligence capabilities as found in
    `scikit-learn`. In any event, making games is fun and we hope this last chapter
    was the equivalent of a nice dessert or coffee after a ten-course meal! If you
    are still hungry for more, please check out *NumPy Cookbook*, *Second Edition*,
    *Ivan Idris*, *Packt* *Publishing*, which builds further on this book with minimum
    overlap.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现本书中提到 Pygame 有点奇怪。 但是，阅读本章后，我希望您意识到 NumPy 和 Pygame 可以很好地结合在一起。 毕竟，游戏涉及大量计算，因此
    NumPy 和 SciPy 是理想的选择，并且它们还需要`scikit-learn`中提供的人工智能功能。 无论如何，制作游戏都很有趣，我们希望最后一章相当于十道菜后的精美甜点或咖啡！
    如果您仍然渴望更多，请查看《NumPy Cookbook 第二版》， *Ivan Idris*，*Packt Publishing*，在本书的基础上以最小的重叠为基础。
