["```cs\n        namespace cookbook\n        {\n          class Program\n          {\n            static void Main(string[] args)\n            {\n\n            }\n          }\n\n          public class Chapter1\n          {\n\n          }\n        }\n\n```", "```cs\n        static void Main(string[] args)\n        {\n          int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24 };\n          Chapter1 ch1 = new Chapter1();\n          var s = ch1.GetAverageAndCount(scores);\n        }\n\n```", "```cs\n        public (int, int) GetAverageAndCount(int[] scores)\n        {\n\n        }\n\n```", "```cs\n        public (int, int) GetAverageAndCount(int[] scores)\n        {\n          var returnTuple = (0, 0);\n          return returnTuple;\n        }\n\n```", "```cs\n        static void Main(string[] args)\n        {\n          int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24 };\n          Chapter1 ch1 = new Chapter1();\n          var s = ch1.GetAverageAndCount(scores);\n          WriteLine($\"Average was {s.Item1} across {s.Item2} students\");\n          ReadLine();\n        }\n\n```", "```cs\n        using static System.Console;\n\n```", "```cs\n        public (int average, int studentCount) \n          GetAverageAndCount(int[] scores)\n        {\n          var returnTuple = (0, 0);\n          return returnTuple;\n        }\n\n```", "```cs\n        static void Main(string[] args)\n        {\n          int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24 };\n          Chapter1 ch1 = new Chapter1();\n          var s = ch1.GetAverageAndCount(scores);\n          WriteLine($\"Average was {s.average} across {\n            s.studentCount} students\");\n          ReadLine();\n        }\n\n```", "```cs\n        var returnTuple = (0, 0);\n\n```", "```cs\n        var returnTuple = (ave:0, sCount:0);\n\n```", "```cs\n        public (int average, int studentCount) \n          GetAverageAndCount(int[] scores)\n        {\n          var returnTuple = (ave:0, sCount:0);\n          return returnTuple;\n        }\n\n```", "```cs\n        var s = ch1.GetAverageAndCount(scores);\n\n```", "```cs\n        var (average, studentCount) = ch1.GetAverageAndCount(scores);\n\n```", "```cs\n        WriteLine($\"Average was {average} across {studentCount} students\");\n\n```", "```cs\n        static void Main(string[] args)\n        {\n          int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24 };\n          Chapter1 ch1 = new Chapter1();\n          var (average, studentCount) = ch1.GetAverageAndCount(scores);\n          WriteLine($\"Average was {average} across {\n            studentCount} students\");\n          ReadLine();\n        }\n\n```", "```cs\n        public (int average, int studentCount) \n          GetAverageAndCount(int[] scores)\n        {\n          var returnTuple = (ave:0, sCount:0);\n          return returnTuple;\n        }\n\n```", "```cs\n        using System.Linq;\n\n```", "```cs\n        public (int average, int studentCount) \n          GetAverageAndCount(int[] scores)\n        {\n          var returnTuple = (ave:0, sCount:0);\n          returnTuple = (returnTuple.ave = scores.Sum()/scores.Count(),\n                         returnTuple.sCount = scores.Count());\n          return returnTuple;\n        }\n\n```", "```cs\n        returnTuple = (returnTuple.ave = scores.Sum()/scores.Count(), \n                       returnTuple.sCount = scores.Count());\n\n```", "```cs\n        public (int average, int studentCount)\n          GetAverageAndCount(int[] scores)\n        {\n          var returnTuple = (ave:0, sCount:0);\n          returnTuple = (scores.Sum()/scores.Count(), scores.Count());\n          return returnTuple;\n        }\n\n```", "```cs\n        public static class ExtensionMethods\n        {\n\n        }\n\n```", "```cs\n        public static bool CheckIfBelowAverage(\n          this int classAverage, int threshold)\n        {\n          if (classAverage < threshold)\n          {\n            // Notify head of department\n            return true;\n          }\n          else\n            return false;\n        }\n\n```", "```cs\n        public (int average, int studentCount, bool belowAverage) \n          GetAverageAndCount(int[] scores, int threshold)\n        {\n\n        }\n\n```", "```cs\n        var returnTuple = (ave: 0, sCount: 0, subAve: true);\n\n```", "```cs\n        returnTuple = (scores.Sum() / scores.Count(), scores.Count(), \n                       returnTuple.ave.CheckIfBelowAverage(threshold));\n\n```", "```cs\n        public (int average, int studentCount, bool belowAverage) \n          GetAverageAndCount(int[] scores, int threshold)\n        {\n          var returnTuple = (ave: 0, sCount: 0, subAve: true);\n          returnTuple = (scores.Sum() / scores.Count(), scores.Count(), \n          returnTuple.ave.CheckIfBelowAverage(threshold)); \n          return returnTuple;\n        }\n\n```", "```cs\n        int threshold = 51;\n        var (average, studentCount, belowAverage) = ch1.GetAverageAndCount(\n                                                   scores, threshold);\n\n```", "```cs\n        WriteLine($\"Average was {average} across {studentCount}\n                  students. {(average < threshold ? \n                  \" Class score below average.\" : \n                  \" Class score above average.\")}\");\n\n```", "```cs\n        static void Main(string[] args)\n        {\n          int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24 };\n          Chapter1 ch1 = new Chapter1();\n          int threshold = 51;\n          var (average, studentCount, belowAverage) = \n               ch1.GetAverageAndCount(scores, threshold);\n          WriteLine($\"Average was {average} across {studentCount} \n                    students. {(average < threshold ? \n                    \" Class score below average.\" : \n                    \" Class score above average.\")}\");\n          ReadLine();\n        }\n\n```", "```cs\n        int threshold = 40;\n\n```", "```cs\n        int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24 };\n\n```", "```cs\n        int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24, 49 };\n\n```", "```cs\n        public static bool CheckIfBelowAverage(\n          this double classAverage, int threshold)\n        {\n\n        }\n\n```", "```cs\n        public (double average, int studentCount, bool belowAverage) \n               GetAverageAndCount(int[] scores, int threshold)\n        {\n\n        }\n\n```", "```cs\n        var returnTuple = (ave: 0D, sCount: 0, subAve: true);\n\n```", "```cs\n        returnTuple = ((double)scores.Sum() / scores.Count(),\n          scores.Count(), \n        returnTuple.ave.CheckIfBelowAverage(threshold));\n\n```", "```cs\n        using static System.Math;\n\n```", "```cs\n        WriteLine($\"Average was {Round(average,2)} across {studentCount}\n                  students. {(average < threshold ? \n                             \" Class score below average.\" : \n                             \" Class score above average.\")}\");\n\n```", "```cs\n        public (double average, int studentCount, bool belowAverage) \n               GetAverageAndCount(int[] scores, int threshold)\n        {\n          var returnTuple = (ave: 0D, sCount: 0, subAve: true);\n          returnTuple = ((double)scores.Sum() / scores.Count(), \n                          scores.Count(),   \n                          returnTuple.ave.CheckIfBelowAverage(\n                          threshold));\n          return returnTuple;\n        }\n\n```", "```cs\n        static void Main(string[] args)\n        {\n          int[] scores = { 17, 46, 39, 62, 81, 79, 52, 24, 49 }; \n          Chapter1 ch1 = new Chapter1();\n          int threshold = 40;\n          var (average, studentCount, belowAverage) = \n               ch1.GetAverageAndCount(scores, threshold);\n          WriteLine($\"Average was {Round(average,2)} across \n                    {studentCount} students. {(average < threshold ? \n                    \" Class score below average.\" : \n                    \" Class score above average.\")}\");\n          ReadLine();\n        }\n\n```", "```cs\nreturnTuple = (returnTuple.ave + 15, returnTuple.sCount - 1);\n\n```", "```cs\n        using System.Collections.Generic;\n\n```", "```cs\n        public class Student\n        {\n          public string Name { get; set; }\n          public string LastName { get; set; } \n          public List<int> CourseCodes { get; set; }\n        }\n\n```", "```cs\n        public class Professor\n        {\n          public string Name { get; set; }\n          public string LastName { get; set; }\n          public List<string> TeachesSubjects { get; set; }\n        }\n\n```", "```cs\n        public void OutputInformation(object person)\n        {\n\n        }\n\n```", "```cs\n        if (person is Student)\n        {\n          Student student = (Student)person;\n          WriteLine($\"Student {student.Name} {student.LastName}\n                    is enrolled for courses {String.Join<int>(\n                    \", \", student.CourseCodes)}\");\n        }\n\n        if (person is Professor)\n        {\n          Professor prof = (Professor)person;\n          WriteLine($\"Professor {prof.Name} {prof.LastName} \n                    teaches {String.Join<string>(\",\", prof.TeachesSubjects)}\");\n        }\n\n```", "```cs\n        public void OutputInformation(object person)\n        {\n          if (person is Student)\n          {\n            Student student = (Student)person;\n            WriteLine($\"Student {student.Name} {student.LastName}\n                      is enrolled for courses {String.Join<int>\n                      (\", \", student.CourseCodes)}\");\n          }\n          if (person is Professor)\n          {\n            Professor prof = (Professor)person;\n            WriteLine($\"Professor {prof.Name} {prof.LastName}\n                      teaches {String.Join<string>\n                      (\",\", prof.TeachesSubjects)}\");\n            }\n          }\n\n```", "```cs\n        static void Main(string[] args)\n        {\n          Chapter1 ch1 = new Chapter1();\n\n          Student student = new Student();\n          student.Name = \"Dirk\";\n          student.LastName = \"Strauss\";\n          student.CourseCodes = new List<int> { 203, 202, 101 };\n\n          ch1.OutputInformation(student);\n\n          Professor prof = new Professor();\n          prof.Name = \"Reinhardt\";\n          prof.LastName = \"Botha\";\n          prof.TeachesSubjects = new List<string> {\n               \"Mobile Development\", \"Cryptography\" };\n\n          ch1.OutputInformation(prof);\n        }\n\n```", "```cs\n        if (person is Student student)\n        {\n\n        }\n        if (person is Professor prof)\n        {\n\n        }\n\n```", "```cs\n        if (person is Student student)\n        {\n          WriteLine($\"Student {student.Name} {student.LastName}\n                    is enrolled for courses {String.Join<int>\n                    (\", \", student.CourseCodes)}\");\n        }\n        if (person is Professor prof)\n        {\n          WriteLine($\"Professor {prof.Name} {prof.LastName}\n                    teaches {String.Join<string>\n                    (\",\", prof.TeachesSubjects)}\");\n        }\n\n```", "```cs\n        public void OutputInformation(object person)\n        {\n          if (person is null)\n          {\n            WriteLine($\"Object {nameof(person)} is null\");\n          }\n        }\n\n```", "```cs\n        Student student = null;\n\n```", "```cs\n        public void OutputInformation(object person)\n        {\n          switch (person)\n          {\n            default:\n              WriteLine(\"Unknown object detected\");\n            break;\n          }\n        }\n\n```", "```cs\n        switch (person)\n        {\n          case Professor prof:\n            WriteLine($\"Professor {prof.Name} {prof.LastName}\n                      teaches {String.Join<string>\n                      (\",\", prof.TeachesSubjects)}\");\n          break;\n          default:\n            WriteLine(\"Unknown object detected\");\n          break;\n        }\n\n```", "```cs\n        switch (person)\n        {\n          case Student student:\n            WriteLine($\"Student {student.Name} {student.LastName}\n                      is enrolled for courses {String.Join<int>\n                      (\", \", student.CourseCodes)}\");\n          break;\n          case Professor prof:\n            WriteLine($\"Professor {prof.Name} {prof.LastName}\n                      teaches {String.Join<string>\n                      (\",\", prof.TeachesSubjects)}\");\n          break;\n          default:\n            WriteLine(\"Unknown object detected\");\n          break;\n        }\n\n```", "```cs\n        switch (person)\n        {\n          case Student student when (student.CourseCodes.Contains(203)):\n          WriteLine($\"Student {student.Name} {student.LastName}\n                    is enrolled for course 203.\");\n          break;\n          case Student student:\n          WriteLine($\"Student {student.Name} {student.LastName}\n                    is enrolled for courses {String.Join<int>\n                    (\", \", student.CourseCodes)}\");\n          break;\n          case Professor prof:\n          WriteLine($\"Professor {prof.Name} {prof.LastName}\n                    teaches {String.Join<string>(\",\",\n                    prof.TeachesSubjects)}\");\n          break;\n          default:\n            WriteLine(\"Unknown object detected\");\n          break;\n        }\n\n```", "```cs\n        switch (person)\n       {\n          case Student student when (student.CourseCodes.Contains(203)):\n            WriteLine($\"Student {student.Name} {student.LastName} \n                      is enrolled for course 203.\");\n          break;\n          case Student student:\n          WriteLine($\"Student {student.Name} {student.LastName} \n                    is enrolled for courses {String.Join<int>\n                    (\", \", student.CourseCodes)}\");\n          break;\n          case Professor prof:\n          WriteLine($\"Professor {prof.Name} {prof.LastName}\n                    teaches {String.Join<string>\n                    (\",\", prof.TeachesSubjects)}\");\n          break;\n          case null:\n            WriteLine($\"Object {nameof(person)} is null\");\n          break;\n          default:\n            WriteLine(\"Unknown object detected\");\n          break;\n        }\n\n```", "```cs\n        string sValue = \"500\";\n\n        int intVal;\n        if (int.TryParse(sValue, out intVal))\n        {\n          WriteLine($\"{intVal} is a valid integer\");\n          // Do something with intVal\n        }\n\n```", "```cs\n        if (int.TryParse(sValue, out int intVal))\n        {\n          WriteLine($\"{intVal} is a valid integer\");\n          // Do something with intVal\n        }\n\n```", "```cs\n        if (int.TryParse(sValue, out var intVal))\n        {\n          WriteLine($\"{intVal} is a valid integer\");\n          // Do something with intVal\n        }\n\n```", "```cs\npublic static (string originalValue, int integerValue, bool isInteger) ToInt(this string stringValue)\n{\n  var t = (original: stringValue, toIntegerValue: 0, isInt: false);\n  if (int.TryParse(stringValue, out var iValue)) \n  {\n    t.toIntegerValue = iValue; t.isInt = true;\n  }\n  return t;\n}\n\n```", "```cs\nvar (original, intVal, isInteger) = sValue.ToInt();\nif (isInteger)\n{\n  WriteLine($\"{original} is a valid integer\");\n  // Do something with intVal\n}\n\n```", "```cs\nvar (average, studentCount) = ch1.GetAverageAndCount(scores);\n\n```", "```cs\n        public class Student\n        {\n          public string Name { get; set; }\n          public string LastName { get; set; }\n          public List<int> CourseCodes { get; set; }\n        }\n\n```", "```cs\n        public void Deconstruct(out string name, out string lastName)\n        {\n          name = Name;\n          lastName = LastName;\n        }\n\n```", "```cs\n        public class Student\n        {\n          public string Name { get; set; }\n          public string LastName { get; set; }\n          public List<int> CourseCodes { get; set; }\n\n          public void Deconstruct(out string name, out string lastName)\n          {\n            name = Name;\n            lastName = LastName;\n          }\n        }\n\n```", "```cs\n        Student student = new Student();\n        student.Name = \"Dirk\";\n        student.LastName = \"Strauss\";\n\n        var (FirstName, Surname) = student;\n        WriteLine($\"The student name is {FirstName} {Surname}\");\n\n```", "```cs\n        public class Student\n        {\n          public string Name { get; set; }\n          public string LastName { get; set; }\n          public List<int> CourseCodes { get; set; }\n        }\n\n```", "```cs\n        public static void Deconstruct(this Student student, \n                 out string firstItem, out string secondItem)\n        {\n          firstItem = student.Name;\n          secondItem = student.LastName;\n        }\n\n```", "```cs\nStudent student = new Student(studentNumber);\n\n```", "```cs\npublic class Student\n{\n  public Student(string studentNumber)\n  {\n    (Name, LastName) = GetStudentDetails(studentNumber);\n  }\n  public string Name { get; private set; }\n  public string LastName { get; private set; }\n  public List<int> CourseCodes { get; private set; }\n\n  public void Deconstruct(out string name, out string lastName)\n  {\n    name = Name;\n    lastName = LastName;\n  }\n\n  private (string name, string surname) GetStudentDetails(string studentNumber)\n  {\n    var detail = (n: \"Dirk\", s: \"Strauss\");\n    // Do something with student number to return the student details\n    return detail;\n  }\n}\n\n```", "```cs\nStudent student = new Student(\"S20323742\");\nvar (FirstName, Surname) = student;\nWriteLine($\"The student name is {FirstName} {Surname}\");\n\n```", "```cs\n        public Building GetShopfloorSpace(int floorCommonArea,\n                         int buildingWidth, int buildingLength)\n        {\n\n        }\n\n```", "```cs\n        public class Building\n        { \n          public int TotalShopFloorSpace { get; set; } \n        }\n\n```", "```cs\n        int CalculateShopFloorSpace(int common, int width, int length)\n        {\n          return (width * length) - common;\n        }\n\n```", "```cs\n        public Building GetShopfloorSpace(int floorCommonArea,\n                         int buildingWidth, int buildingLength)\n        {\n          Building building = new Building();\n\n          building.TotalShopFloorSpace = CalculateShopFloorSpace(\n                   floorCommonArea, buildingWidth, buildingLength);\n\n          int CalculateShopFloorSpace(int common, int width, int length)\n          {\n            return (width * length) - common;\n          }\n\n          return building;\n        }\n\n```", "```cs\n        Chapter1 ch1 = new Chapter1();\n        Building bldng = ch1.GetShopfloorSpace(200, 35, 100);\n        WriteLine($\"The total space for shops is \n                  {bldng.TotalShopFloorSpace} square meters\");\n\n```", "```cs\nbuilding.TotalShopFloorSpace = CalculateShopFloorSpace(10, 9, 17);\n\n```", "```cs\npublic Building GetShopfloorSpace(int floorCommonArea, int buildingWidth, int buildingLength)\n{\n  Building building = new Building();\n\n  building.TotalShopFloorSpace = CalculateShopFloorSpace(\n           floorCommonArea, buildingWidth, buildingLength);\n\n  int CalculateShopFloorSpace(int common, int width, int length)\n  {\n    return (width * length) - common;\n  }\n\n  building.TotalShopFloorSpace = CalculateShopFloorSpace(10, 9, 17);\n\n  return building;\n}\n\n```", "```cs\n        var oldNum = 342057239127493;\n        var newNum = 342_057_239_127_493;\n        WriteLine($\"oldNum = {oldNum} and newNum = {newNum}\");\n\n```", "```cs\n        var binLit = 0b1010_1100_0011_0010_0001_0000;\n\n```", "```cs\n        public int GetLargest(int valueA, int valueB)\n        {\n          if (valueA > valueB)\n            return valueA;\n          else\n            return valueB;\n        }\n\n```", "```cs\n        public ref int GetLargest(ref int valueA, ref int valueB)\n        {\n          if (valueA > valueB)\n            return ref valueA;\n          else\n            return ref valueB;\n        }\n\n```", "```cs\n        int a = 10;\n        int b = 20;\n        Chapter1 ch1 = new Chapter1();\n        int val = ch1.GetLargest(a, b);\n        val += 25;\n\n        WriteLine($\"val = {val} a = {a} b = {b} \");\n\n```", "```cs\n        ref int refVal = ref ch1.GetLargest(ref a, ref b);\n        refVal += 25;\n\n        WriteLine($\"refVal = {refVal} a = {a} b = {b} \");\n\n```", "```cs\nunsafe\n{\n  IntPtr a_var_memoryAddress = (IntPtr)(&a);\n  IntPtr b_var_memoryAddress = (IntPtr)(&b);\n  IntPtr val_var_memoryAddress = (IntPtr)(&val);\n\n  fixed (int* refVal_var = &refVal)\n  {\n    IntPtr refVal_var_memoryAddress = (IntPtr)(refVal_var);\n    WriteLine($\"The memory address of a is {a_var_memoryAddress}\");\n    WriteLine($\"The memory address of b is {b_var_memoryAddress}\");\n    WriteLine($\"The memory address of val is {val_var_memoryAddress}\");\n    WriteLine($\"The memory address of refVal is\n              {refVal_var_memoryAddress}\");\n  }\n}\n\n```", "```cs\n        using System.Threading.Tasks;\n\n```", "```cs\n        double timerTtl = 10.0D;\n        private DateTime timeToLive;\n        private int cacheValue;\n\n```", "```cs\n        private void Form1_Load(object sender, EventArgs e)\n        {\n          lblTimer.Text = $\"Timer TTL {timerTtl} sec (Stopped)\"; \n        }\n\n```", "```cs\n        private void timer1_Tick(object sender, EventArgs e)\n        {\n          if (timerTtl == 0)\n          {\n            timerTtl = 5;\n          }\n          else\n          {\n            timerTtl -= 1; \n          }\n          lblTimer.Text = $\"Timer TTL {timerTtl} sec (Running)\";\n        }\n\n```", "```cs\n        public async Task<int> GetValue()\n        {\n          await Task.Delay(1000);\n\n          Random r = new Random();\n          cacheValue = r.Next();\n          timeToLive = DateTime.Now.AddSeconds(timerTtl);\n          timer1.Start();\n          return cacheValue;\n        }\n\n```", "```cs\n        public ValueTask<int> LoadReadCache(out bool blnCached)\n        {\n          if (timeToLive < DateTime.Now)\n          {\n            blnCached = false;\n            return new ValueTask<int>(GetValue());\n          }\n          else\n          {\n            blnCached = true;\n            return new ValueTask<int>(cacheValue);\n          } \n        }\n\n```", "```cs\n        private async void btnTestAsync_Click(object sender, EventArgs e)\n        {\n          int iVal = await LoadReadCache(out bool isCachedValue);\n          if (isCachedValue)\n            txtOutput.Text = $\"Cached value {iVal} read\";\n          else\n            txtOutput.Text = $\"New value {iVal} read\";\n        }\n\n```", "```cs\n        public class SomeClass\n        {\n          private int _initialValue;\n\n          // Property\n          public int InitialValue\n          {\n            get\n            {\n              return _initialValue;\n            }\n\n            set\n            {\n              _initialValue = value;\n            }\n          }\n\n          // Constructor\n          public SomeClass(int initialValue)\n          {\n            InitialValue = initialValue;\n          }\n\n          // Finalizer\n          ~SomeClass()\n          {\n            WriteLine(\"Release unmanaged code\");\n          }\n        }\n\n```", "```cs\n        public class SomeClass\n        {\n          private int _initialValue;\n\n          public int InitialValue\n          {\n            get => _initialValue;\n            set => _initialValue = value;\n          }\n\n          public SomeClass(int initialValue) => \n                 InitialValue = initialValue;\n\n          ~SomeClass() => WriteLine(\"Release unmanaged code\");\n        }\n\n```", "```cs\n        public int GetNameLength(string firstName, string lastName)\n        {\n          return (firstName.Length + lastName.Length) > 0 ? \n            firstName.Length + lastName.Length : throw new \n            Exception(\"First name and last name is empty\");\n        }\n\n```", "```cs\n        try\n        {\n          Chapter1 ch1 = new Chapter1();\n          int nameLength = ch1.GetNameLength(\"\", \"\");\n        }\n        catch (Exception ex)\n        {\n          WriteLine(ex.Message);\n        }\n\n```"]