- en: Chapter 5. Using Widgets and Toolbars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用小部件和工具栏
- en: As a GIS web application developer, you want to focus on building a functionality
    specific to the application you are constructing. Spending valuable time and effort
    adding basic GIS functions such as zooming and panning to your application detracts
    from what should be your primary focus. Many applications also need to add an
    overview map, legend, or scale bar to be added to the user interface. Fortunately,
    the API provides user interface widgets that you can drop directly into your application
    and with a little configuration, they are ready to go.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为GIS Web应用程序开发人员，您希望专注于构建特定于您正在构建的应用程序的功能。花费宝贵的时间和精力添加基本的GIS功能，如缩放和平移到您的应用程序中，会分散您的主要关注点。许多应用程序还需要添加概览地图、图例或比例尺到用户界面中。幸运的是，API提供了用户界面小部件，您可以直接将其放入您的应用程序中，并进行一些配置，它们就可以使用了。
- en: The ArcGIS API for JavaScript also includes helper classes to add the navigation
    and drawing toolbars to your application. In this chapter, you'll learn how easy
    it is to add these user interface components to an application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript还包括辅助类，用于向您的应用程序添加导航和绘图工具栏。在本章中，您将学习如何将这些用户界面组件轻松添加到应用程序中。
- en: 'Let''s start by examining a navigation sample that Esri has placed on their
    resource center website. Open a web browser and go to [http://developers.arcgis.com/en/javascript/samples/toolbar_draw/](http://developers.arcgis.com/en/javascript/samples/toolbar_draw/).
    Take a look at the following screenshot:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先来看一下Esri在其资源中心网站上放置的一个导航示例。打开一个Web浏览器，转到[http://developers.arcgis.com/en/javascript/samples/toolbar_draw/](http://developers.arcgis.com/en/javascript/samples/toolbar_draw/)。看一下以下的屏幕截图：
- en: '![Using Widgets and Toolbars](graphics/7965OT_05_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用小部件和工具栏](graphics/7965OT_05_01.jpg)'
- en: At first glance over the preceding screenshot, you'd think that the drawing
    toolbar is simply a user interface component that you drop into your application,
    which is not exactly the case. The ArcGIS API for JavaScript provides a toolbar
    helper class called `esri/toolbars/Draw` to assist in accomplishing this task.
    In addition, the API also provides a class to handle navigation tasks. What these
    helper classes do is save you the work of drawing zoom boxes, capturing mouse
    clicks, and other user-initiated events. As any experienced GIS web developer
    can tell you, this is no small accomplishment. Adding these basic navigation capabilities
    into the helper classes provided with the API can easily save hours of development
    work.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先浏览前面的屏幕截图，您可能会认为绘图工具栏只是一个您可以放入应用程序中的用户界面组件，但实际情况并非如此。ArcGIS API for JavaScript提供了一个名为`esri/toolbars/Draw`的工具栏辅助类，以帮助完成此任务。此外，API还提供了一个处理导航任务的类。这些辅助类的作用是为您节省绘制缩放框、捕获鼠标点击和其他用户发起的事件的工作。任何有经验的GIS
    Web开发人员都会告诉您，这并不是一件小事。将这些基本导航功能添加到API提供的辅助类中可以轻松节省数小时的开发工作。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: Adding toolbars to an application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将工具栏添加到应用程序中
- en: User interface widgets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面小部件
- en: Feature editing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要素编辑
- en: Adding toolbars to an application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将工具栏添加到应用程序中
- en: There are two basic types of toolbars that you can add to your application using
    the helper classes, `Navigation` and `Draw`, provided by the API. There is also
    an editing toolbar that can be used to edit features or graphics through a web
    browser. We'll discuss this toolbar in a later chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用辅助类`Navigation`和`Draw`，API提供了两种基本类型的工具栏，您可以将其添加到应用程序中。还有一个编辑工具栏，可用于通过Web浏览器编辑要素或图形。我们将在后面的章节中讨论这个工具栏。
- en: Steps for creating a toolbar
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建工具栏的步骤
- en: 'The **Navigation** and **Draw** toolbars are not simply user interface components
    that you can drop into your application. They are helper classes and there are
    several steps that you need to take to actually create your toolbar with the appropriate
    buttons. This to-do list for your toolbars may seem a little intimidating, but
    after you do it once or twice, it becomes pretty simple. The following are the
    steps to do this, and we''ll discuss each item in detail:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Navigation**和**Draw**工具栏不仅仅是您可以放入应用程序中的用户界面组件。它们是辅助类，您需要采取几个步骤才能实际创建具有适当按钮的工具栏。对于工具栏的待办事项清单可能看起来有点令人生畏，但做一两次后，它就变得非常简单。以下是执行此操作的步骤，我们将详细讨论每一项：'
- en: Define the CSS styles for each button.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个按钮定义CSS样式。
- en: Create the buttons inside the toolbar.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏内创建按钮。
- en: Create an instance of `esri/toolbars/Navigation` or `esri/toolbars/Draw`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`esri/toolbars/Navigation`或`esri/toolbars/Draw`的实例。
- en: Connect button events to handler functions.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮事件连接到处理程序函数。
- en: Defining CSS styles
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义CSS样式
- en: The first thing you'll need to do is define the CSS styles for each button that
    you intend to include on the toolbar. Each button on your toolbar will need an
    image, text, or both, along with the width and height for the button. Each of
    these properties are defined within the CSS inside a `<style>` tag as seen in
    the following code snippet. In the code example shown in the following code snippet,
    a number of buttons are being defined for the `Navigation` toolbar. Let's examine
    the **Zoom Out** button and follow it through the entire process to make things
    a little simpler. I've highlighted the **Zoom Out** button in the following code.
    As with all the other buttons, we define an image to be used for the button (`nav_zoomout.png`)
    along with the width and height of the button. In addition, the identifier for
    this style is defined as `.zoomoutIcon`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是为您打算在工具栏上包含的每个按钮定义CSS样式。工具栏上的每个按钮都需要一个图像、文本或两者，以及按钮的宽度和高度。这些属性都在CSS中定义在`<style>`标签内，如下面的代码片段所示。在下面的代码示例中，为`Navigation`工具栏定义了许多按钮。让我们来看一下**缩小**按钮，并跟随整个过程，以使事情变得更简单一些。我在下面的代码中突出显示了**缩小**按钮。与所有其他按钮一样，我们定义了一个用于按钮的图像（`nav_zoomout.png`），以及按钮的宽度和高度。此外，此样式的标识符被定义为`.zoomoutIcon`。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating buttons
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建按钮
- en: 'The buttons can to be defined inside a `<div>` container with `data-dojo-type`
    of the `ContentPane` dijit inside `BorderContainer`, as shown in the following
    code example. When creating each button, you will need to define the CSS style
    it should reference and what should happen when the button is clicked. The buttons
    use the `iconClass` attribute to reference a CSS style. In the case of the **Zoom
    Out** button in our example, the `iconClass` attribute references `zoomoutIcon`,
    which is a style we defined earlier. The `zoomoutIcon` style defines an image
    to use for the button along with a width and height for the button. Take a look
    at the following code snippet:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮可以在`<div>`容器内定义，该容器具有`BorderContainer`的`data-dojo-type`为`ContentPane` dijit，如下面的代码示例所示。在创建每个按钮时，你需要定义它应该引用的CSS样式以及按钮被点击时应该发生什么。按钮使用`iconClass`属性来引用CSS样式。在我们的示例中，**缩小**按钮的`iconClass`属性引用了我们之前定义的`zoomoutIcon`样式。`zoomoutIcon`样式定义了要用于按钮的图像以及按钮的宽度和高度。看一下下面的代码片段：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code block defines the buttons on the toolbar. Each button is
    created using a `Button` user interface control provided by Dijit (a subproject
    of Dojo). Each control is enclosed within a `<button>` tag inside the `<body>`
    tag of the web page with all the buttons being enclosed by the surrounding the
    `<div>` tag that contains the `ContentPane` dijit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块定义了工具栏上的按钮。每个按钮都是使用Dijit（Dojo的一个子项目）提供的`Button`用户界面控件创建的。每个控件都包含在网页的`<body>`标签内的`<button>`标签中，所有按钮都被包含在包含`ContentPane`
    dijit的`<div>`标签中。
- en: Creating an instance of the Navigation toolbar
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建`Navigation`工具栏的实例
- en: 'Now that the visual interface for the buttons is complete, we need to create
    an instance of `esri/toolbars/Navigation` and wire up the events and event handlers.
    Creating an instance of the `Navigation` class is as easy as calling the constructor
    and passing in a reference to `Map` as you''ll see shortly. However, you''ll first
    want to make sure that you add a reference to `esri/toolbars/navigation`. The
    following code example adds references to the `Navigation` toolbar, creates the
    toolbar, connects click events to the buttons, and activates the tools. The relevant
    lines of code have been highlighted and commented so that you understand each
    section:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按钮的视觉界面已经完成，我们需要创建一个`esri/toolbars/Navigation`的实例，并连接事件和事件处理程序。创建`Navigation`类的实例就像调用构造函数并传入对`Map`的引用一样简单，很快你就会看到。但是，首先要确保添加对`esri/toolbars/navigation`的引用。以下代码示例添加了对`Navigation`工具栏的引用，创建了工具栏，将点击事件连接到按钮，并激活了工具。相关的代码行已经被突出显示和注释，以便你理解每个部分：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Hopefully, the previous `Navigation` toolbar example has illustrated the steps
    to add a navigation toolbar to your web mapping application through the JavaScript
    API. You no longer have to be concerned with adding in JavaScript code to draw
    and handle the extent rectangle or capture mouse coordinates for a pan operation.
    In addition, the user interface components of the toolbar can be created easily
    through various user interface controls supplied by the Dijit library. The `Draw`
    class makes it equally easy to support the drawing of geometries such as points,
    lines, and polygons within a similar toolbar.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 希望前面的`Navigation`工具栏示例已经说明了通过JavaScript API向你的Web地图应用程序添加导航工具栏的步骤。你不再需要担心添加JavaScript代码来绘制和处理范围矩形或捕获鼠标坐标进行平移操作。此外，工具栏的用户界面组件可以通过Dijit库提供的各种用户界面控件轻松创建。`Draw`类同样可以轻松支持在类似工具栏中绘制点、线和多边形。
- en: User interface widgets
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户界面小部件
- en: The API for JavaScript comes with many out of the box widgets that you can drop
    into your application for enhanced productivity. Included are the `BasemapGallery`,
    `Bookmarks`, `Print`, `Geocoder`, `Gauge`, `Measurement`, `Popup`, `Legend`, `Scalebar`,
    `OverviewMap`, `Editor`, `Directions`, `HistogramTimeSlider`, `HomeButton`, `LayerSwipe`,
    `LocateButton`, `TimeSlider`, and `Analysis` widgets. Widgets differ from the
    buttons and tools you create as part of the `Navigation` or `Draw` toolbars we
    discussed earlier. These widgets are out of the box functionalities that you can
    drop into your application with just a few lines of code as opposed to the toolbars,
    which were just helper classes that require a fair amount of HTML, CSS, and JavaScript
    code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript API提供了许多开箱即用的小部件，可以在应用程序中使用以提高生产力。包括`BasemapGallery`、`Bookmarks`、`Print`、`Geocoder`、`Gauge`、`Measurement`、`Popup`、`Legend`、`Scalebar`、`OverviewMap`、`Editor`、`Directions`、`HistogramTimeSlider`、`HomeButton`、`LayerSwipe`、`LocateButton`、`TimeSlider`和`Analysis`小部件。小部件与我们之前讨论的`Navigation`或`Draw`工具栏的按钮和工具不同。这些小部件是开箱即用的功能，你只需几行代码就可以将它们放入应用程序中，而不是工具栏，后者只是需要大量HTML、CSS和JavaScript代码的辅助类。
- en: The BasemapGallery widget
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`BasemapGallery`小部件'
- en: The `BasemapGallery` widget displays a collection of basemaps from [ArcGIS.com](http://ArcGIS.com)
    and/or a user-defined set of map or image services. When a basemap is selected
    from the collection, the current basemap is removed and the newly selected basemap
    appears. When adding custom maps to the basemap gallery, they will need to have
    the same spatial reference as the other layers in the gallery. When using layers
    from [ArcGIS.com](http://ArcGIS.com), this would be the Web Mercator reference
    with wkids 102100, 102113, or 3857 (well known IDs or 'wkids' are unique identifiers
    for a spatial reference system). It is also recommended that all basemaps be tiled
    layers for performance reasons.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`BasemapGallery`小部件显示了来自[ArcGIS.com](http://ArcGIS.com)的基础地图集合和/或用户定义的地图或图像服务。从集合中选择一个基础地图时，当前的基础地图将被移除，新选择的基础地图将出现。当向基础地图库添加自定义地图时，它们需要与库中的其他图层具有相同的空间参考。当使用[ArcGIS.com](http://ArcGIS.com)的图层时，这将是Web
    Mercator参考，wkids为102100、102113或3857（wkids是空间参考系统的唯一标识符）。出于性能原因，还建议所有基础地图都是切片图层。'
- en: '![The BasemapGallery widget](graphics/7965OT_05_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![BasemapGallery小部件](graphics/7965OT_05_02.jpg)'
- en: 'When creating a `BasemapGallery` widget, there are a number of parameters that
    you can supply in the constructor as shown in the preceding screenshot, which
    include the ability to show ArcGIS basemaps, define one or more custom basemaps
    for inclusion in the gallery, supply a Bing maps key and a reference to the map
    where the gallery will be placed, and so on. After creating the `BasemapGallery`
    widget, you need to call the `startup()` method to prepare it for user interaction.
    Take a look at the following code snippet:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`BasemapGallery`小部件时，可以在构造函数中提供一些参数，如前面的屏幕截图所示，包括显示ArcGIS底图、定义一个或多个自定义底图以包含在库中、提供Bing地图密钥以及地图的引用等。创建`BasemapGallery`小部件后，需要调用`startup()`方法来准备用户交互。看一下以下的代码片段：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code sample, a new `Basemap` object is created with a title,
    thumbnail image, and an array containing a single layer. This `Basemap` object
    is then pushed into an array of basemaps that will be added to the widget.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，创建了一个新的`Basemap`对象，其中包含标题、缩略图图像和一个包含单个图层的数组。然后将该`Basemap`对象推送到将添加到小部件中的底图数组中。
- en: The Bookmarks widget
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 书签小部件
- en: 'The `Bookmarks` widget is used to display a set of named geographic extents
    to the end user. Clicking on a bookmark name from the widget will automatically
    set the extent of the map to the extent provided for the bookmark. Using the widget,
    you can add new bookmarks, delete existing bookmarks, and update bookmarks. Bookmarks
    are defined in JavaScript code as JSON objects with properties that define the
    name, extent, and bounding coordinates of the bookmark. To add a bookmark to the
    widget, you call `Bookmark.addBookmark()`. Take a look at the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bookmarks`小部件用于向最终用户显示一组命名的地理范围。从小部件中点击书签名称将自动将地图范围设置为书签提供的范围。使用该小部件，您可以添加新书签，删除现有书签和更新书签。书签在JavaScript代码中定义为JSON对象，其中包含定义书签名称、范围和边界坐标的属性。要将书签添加到小部件中，您需要调用`Bookmark.addBookmark()`。看一下以下的屏幕截图：'
- en: '![The Bookmarks widget](graphics/7965OT_05_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![书签小部件](graphics/7965OT_05_03.jpg)'
- en: 'Then take a look at the following code snippet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看一下以下的代码片段：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous code example, a new `Bookmarks` object is created. It is attached
    to the map and a list of bookmarks in the JSON format is added.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，创建了一个新的`Bookmarks`对象。它附加到地图，并添加了一个JSON格式的书签列表。
- en: The Print widget
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印小部件
- en: 'The `Print` widget is a much-welcomed tool, which simplifies printing maps
    from web applications. It uses a default or user-defined layout for the map. This
    widget does require the use of an ArcGIS Server 10.1 or higher export web map
    task. Take a look at the following figure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Print`小部件是一个备受欢迎的工具，它简化了从Web应用程序打印地图的过程。它使用默认或用户定义的地图布局。该小部件需要使用ArcGIS Server
    10.1或更高版本的导出Web地图任务。看一下以下的图：'
- en: '![The Print widget](graphics/7965OT_05_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![打印小部件](graphics/7965OT_05_04.jpg)'
- en: 'Then take a look at the following code snippet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看一下以下的代码片段：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous code example, a new `Print` widget is created. The URL property
    is used to point the widget to a **Print** task and the widget is attached to
    a HTML element on the page.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，创建了一个新的`Print`小部件。使用URL属性将小部件指向**Print**任务，并将小部件附加到页面上的HTML元素。
- en: The Geocoder widget
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理编码器小部件
- en: 'The `Geocoder` widget allows you to easily add geocoding functionality to your
    application. This widget includes a single textbox that autofilters results as
    the end user begins typing in an address. Autocompletion is enabled by setting
    the `autoComplete` property to `true`. By default, the `Geocoder` widget uses
    the ESRI World Locator service. You can change this by setting the `geocoder`
    property. Take a look at the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 地理编码器小部件允许您轻松地向应用程序添加地理编码功能。该小部件包括一个文本框，当最终用户开始输入地址时，结果会自动过滤。通过将`autoComplete`属性设置为`true`来启用自动完成。默认情况下，`Geocoder`小部件使用ESRI
    World Locator服务。您可以通过设置`geocoder`属性来更改这一点。看一下以下的屏幕截图：
- en: '![The Geocoder widget](graphics/7965OT_05_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![地理编码器小部件](graphics/7965OT_05_05.jpg)'
- en: You can also automatically append values to any string that the user enters.
    For example, in a local application, you might want to always append a specific
    city and state to any address entered. This is done through the `suffix` property.
    To enable the map to display the location of the geocoded address, you can set
    `autoNavigate` to `true`. It is certainly possible for more than one potential
    location to be returned from Locator. You can set a maximum number of returned
    locations by setting the `maxLocations` property. In the practice exercise coming
    up in the next section, you'll learn how to add the `Geocoder` widget to your
    applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以自动将值附加到用户输入的任何字符串中。例如，在本地应用程序中，您可能希望始终将特定城市和州附加到输入的任何地址中。这是通过`suffix`属性完成的。要使地图显示地理编码地址的位置，您可以将`autoNavigate`设置为`true`。从定位器返回多个潜在位置是完全可能的。您可以通过设置`maxLocations`属性来设置返回位置的最大数量。在接下来的练习中，您将学习如何将`Geocoder`小部件添加到您的应用程序中。
- en: Time to practice with the Geocoder widget
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习使用地理编码器小部件
- en: In this exercise, you'll learn how to add the `Geocoder` widget to an application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将学习如何将`Geocoder`小部件添加到应用程序中。
- en: Open the ArcGIS API for JavaScript Sandbox available at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开ArcGIS JavaScript API Sandbox，网址为[http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)。
- en: 'Alter the `<style>` tag so that it appears as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`<style>`标签，使其显示如下：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Remove the JavaScript content from the `<script>` tag, highlighted as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`<script>`标签中删除以下JavaScript内容，如下所示：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You already have a `<div>` container for the map. In this step, you''ll create
    a second `<div>` tag that will serve as the container for the `Geocoding` widget.
    Add the container for the widget as shown in the following highlighted code. Make
    sure you give the `<div>` tag a particular `id` of `search`. This corresponds
    to the CSS styling we defined at the top of the file and highlighted in the following
    code snippet. It connects the HTML `<div>` tag to the CSS:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经有一个用于地图的“<div>”容器。在此步骤中，您将创建第二个“<div>”标记，用作“地理编码”小部件的容器。按照以下突出显示的代码添加小部件的容器。确保为“<div>”标记指定特定的“id”为“search”。这对应于我们在文件顶部定义的
    CSS 样式，并在以下代码片段中突出显示。它将 HTML 的“<div>”标记连接到 CSS：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create variables to hold the map and the `geocoder` object as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建变量来保存地图和“geocoder”对象，如下所示：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `<script>` tag, add the `require()` function and create a `Map` object
    as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“<script>”标签中，添加“require()”函数并创建“Map”对象，如下所示：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the geocoding widget as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式创建地理编码小部件：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The entire script should appear as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 整个脚本应如下所示：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Click on the **Run** button to execute the code. You should see something similar
    to the following screenshot. Notice the `Geocoder` widget.![Time to practice with
    the Geocoder widget](graphics/7965OT_05_06.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“运行”按钮执行代码。您应该看到类似以下屏幕截图的内容。注意“地理编码器”小部件。![练习使用地理编码器小部件的时间到了](graphics/7965OT_05_06.jpg)
- en: Begin typing an address for `San Antonio, TX`. You can use `1202 Sand Wedge`
    as a sample. Autocompletion should kick in as you begin typing the address. When
    you see the address, select it from the list. The widget will geocode the address
    and positions the map so that the address is centered on the map, as shown in
    the following screenshot:![Time to practice with the Geocoder widget](graphics/7965OT_05_07.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始输入“圣安东尼奥，德克萨斯州”的地址。您可以使用“1202 Sand Wedge”作为示例。在开始输入地址时，自动完成应该开始。当您看到地址时，请从列表中选择它。小部件将对地址进行地理编码，并将地图定位，使地址位于地图的中心，如下面的屏幕截图所示：![练习使用地理编码器小部件的时间到了](graphics/7965OT_05_07.jpg)
- en: The Gauge widget
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表小部件
- en: 'The `Gauge` widget displays numeric data from `FeatureLayer` or `GraphicsLayer`
    in a semicircular gauge interface. You can define the color for the gauge indicator,
    the field to use for the numeric data that drives the gauge, a label field, a
    layer to reference, a maximum data value, a title, and a lot more. Take a look
    at the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: “仪表”小部件在半圆仪表界面中显示来自“FeatureLayer”或“GraphicsLayer”的数字数据。您可以定义仪表指示器的颜色、驱动仪表的数字数据的字段、标签字段、引用的图层、最大数据值、标题等。请查看以下屏幕截图：
- en: '![The Gauge widget](graphics/7965OT_05_08.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![仪表小部件](graphics/7965OT_05_08.jpg)'
- en: 'Then take a look at the following code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后查看以下代码片段：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The previous code example shows the creation of a `Gauge` widget. A number of
    parameters are being passed into the constructor for the gauge, including a caption,
    color, data field, layer, max data value, and more.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例显示了创建“仪表”小部件。许多参数被传递到仪表的构造函数中，包括标题、颜色、数据字段、图层、最大数据值等。
- en: The Measurement widget
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测量小部件
- en: 'The `Measurement` widget provides three tools that enable the end user to measure
    the length and area as well as obtain the coordinates of the mouse. Take a look
    at the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “测量”小部件提供了三种工具，使最终用户能够测量长度和面积，并获取鼠标的坐标。请查看以下屏幕截图：
- en: '![The Measurement widget](graphics/7965OT_05_09.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![测量小部件](graphics/7965OT_05_09.jpg)'
- en: 'The `Measurement` widget also allows you to change the units of measurement
    as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “测量”小部件还允许您更改测量单位，如下所示：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The previous code example shows how to create an instance of the `Measurement`
    widget and add it to the application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例显示了如何创建“测量”小部件的实例并将其添加到应用程序中。
- en: The Popup widget
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出小部件
- en: The `Popup` widget is functionally similar to the default info window in that
    it is used to display attribute information about features or graphics. In fact,
    starting with Version 3.4 of the API, this widget is now the default window for
    displaying attributes instead of the `infoWindow` parameter. However, it also
    contains additional functionalities such as the ability to zoom and highlight
    features, handling of multiple selections, and a button to maximize the window.
    The interface can also be styled using CSS. Please refer to the following screenshot
    as an example of the content that can be displayed in the `Popup` widget.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “弹出”小部件在功能上类似于默认的信息窗口，用于显示有关要素或图形的属性信息。实际上，从 API 的 3.4 版本开始，该小部件现在是显示属性的默认窗口，而不是“infoWindow”参数。但是，它还包含其他功能，如缩放和突出显示要素、处理多个选择以及最大化窗口的按钮。界面还可以使用
    CSS 进行样式设置。请参考以下屏幕截图，作为“弹出”小部件中可以显示的内容的示例。
- en: '![The Popup widget](graphics/7965OT_05_10.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![弹出小部件](graphics/7965OT_05_10.jpg)'
- en: 'Starting with version 3.4, the `Popup` widget supports rendering text in a
    **right-to-left** (**RTL**) orientation to support RTL languages such as Hebrew
    and Arabic. RTL support will automatically apply if the page direction is set
    to RTL using the `dir` attribute. The default value is **left-to-right** (**LTR**).
    Take a look at the following code snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 3.4 开始，“弹出”小部件支持以**从右到左**（**RTL**）方向呈现文本，以支持希伯来语和阿拉伯语等 RTL 语言。如果页面方向使用“dir”属性设置为
    RTL，则 RTL 支持将自动应用。默认值为**从左到右**（**LTR**）。请查看以下代码片段：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the previous code example, a JSON `popupOptions` object is created to define
    the symbol and margin of the pop up. This `popupOptions` object is then passed
    into the constructor for the `Popup` object. Finally, the `Popup` object is passed
    into the `infoWindow` parameter, which specifies that the `Popup` object should
    be used as the info window.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，创建了一个 JSON“popupOptions”对象来定义弹出窗口的符号和边距。然后将此“popupOptions”对象传递给“Popup”对象的构造函数。最后，将“Popup”对象传递给“infoWindow”参数，该参数指定应将“Popup”对象用作信息窗口。
- en: The Legend widget
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图例小部件
- en: The `Legend` widget displays a label and symbols for some or all the layers
    in the map. It does have the ability to respect scale dependencies so that the
    legend values updates to reflect layer visibility at various scale ranges as you
    zoom in or out of the application. The `Legend` widget supports `ArcGISDynamicMapServiceLayer`,
    `ArcGISTiledMapServiceLayer`, and `FeatureLayer`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Legend`小部件显示地图中一些或所有图层的标签和符号。它具有尊重比例依赖性的能力，以便在缩放应用程序时，图例值更新以反映各种比例范围下的图层可见性。`Legend`小部件支持`ArcGISDynamicMapServiceLayer`、`ArcGISTiledMapServiceLayer`和`FeatureLayer`。'
- en: '![The Legend widget](graphics/7965OT_05_11.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图例小部件](graphics/7965OT_05_11.jpg)'
- en: 'When creating a new instance of the `Legend` widget, you can specify the various
    parameters that control the contents and display characteristics of the legend.
    The `arrangement` parameter can be used to specify the alignment of the legend
    within its container HTML element and can be defined as alignment left or right.
    The `autoUpdate` property can be set to `true` or `false` and if `true`, the legend
    will automatically update its parameters when the map scale changes or layers
    are added or removed from the map. The `layerInfos` parameter is used to specify
    a subset of layers to use in the legend, and `respectCurrentMapScale` can be set
    to `true` to trigger automatic legend updates based on the scale ranges for each
    layer. Finally, you need to call the `startup()` method to display the newly created
    legend:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`Legend`小部件的新实例时，可以指定控制图例内容和显示特性的各种参数。`arrangement`参数可用于指定图例在其容器HTML元素中的对齐方式，并可定义为左对齐或右对齐。`autoUpdate`属性可设置为`true`或`false`，如果设置为`true`，则当地图比例尺发生变化或图层被添加或从地图中移除时，图例将自动更新其参数。`layerInfos`参数用于指定要在图例中使用的图层子集，`respectCurrentMapScale`可以设置为`true`，以根据每个图层的比例范围触发自动图例更新。最后，需要调用`startup()`方法来显示新创建的图例：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The previous code example shows how to create a Legend widget and add it to
    an application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码示例显示了如何创建一个图例小部件并将其添加到应用程序中。
- en: The OverviewMap widget
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概览地图小部件
- en: The `OverviewMap` widget is used to display the current extent of the main map
    within the context of a larger area. This overview map gets updated each time
    the main map extent changes. The extent of the main map is represented as a rectangle
    in the overview map. This extent rectangle can also be dragged to change the extent
    of the main map.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`OverviewMap`小部件用于在较大区域的上下文中显示主地图的当前范围。此概览地图在主地图范围更改时更新。主地图的范围在概览地图中表示为一个矩形。此范围矩形也可以拖动以更改主地图的范围。'
- en: 'An overview map can be displayed in a corner of the main map and also hidden
    from display when not in use. It can also be placed inside a `<div>` element outside
    the main map window or temporarily maximized for easy access to far away areas
    of interest. Take a look at the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 概览地图可以显示在主地图的一个角落，并在不使用时隐藏。它也可以放置在主地图窗口之外的`<div>`元素内，或者临时最大化，以便轻松访问感兴趣的远程区域。看一下下面的屏幕截图：
- en: '![The OverviewMap widget](graphics/7965OT_05_12.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![概览地图小部件](graphics/7965OT_05_12.jpg)'
- en: 'The `OverviewMap` widget takes a number of optional parameters in the constructor
    for the object. These parameters allow you to control features such as where the
    overview map is placed in relation to the main map, the base layer to use for
    the overview map, the fill color for the extent rectangle, the appearance of a
    maximize button, and the initial visibility of the overview map. Take a look at
    the following code snippet:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`OverviewMap`小部件在对象的构造函数中接受许多可选参数。这些参数允许您控制概览地图相对于主地图的放置位置、用于概览地图的基础图层、范围矩形的填充颜色、最大化按钮的外观以及概览地图的初始可见性。看一下下面的代码片段：'
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The previous code example illustrates the creation of an `OverviewMap` widget.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码示例说明了创建`OverviewMap`小部件。
- en: The Scalebar widget
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比例尺小部件
- en: 'The `Scalebar` widget is used to add a scalebar to the map or a specific HTML
    node. The `Scalebar` widget displays units in either English or metric values.
    As of Version 3.4 of the API, it can show both English and metric values at the
    same time if you set the `scalebarUnits` property to `dual`. You can also control
    scalebar positioning through the `attachTo` parameter. By default, the scalebar
    is positioned in the bottom-left-hand corner of the map. Take a look at the following
    screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`Scalebar`小部件用于向地图或特定的HTML节点添加比例尺。`Scalebar`小部件以英制或公制值显示单位。从API的3.4版本开始，如果将`scalebarUnits`属性设置为`dual`，它可以同时显示英制和公制值。您还可以通过`attachTo`参数控制比例尺的位置。默认情况下，比例尺位于地图的左下角。看一下下面的屏幕截图：'
- en: '![The Scalebar widget](graphics/7965OT_05_13.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![比例尺小部件](graphics/7965OT_05_13.jpg)'
- en: 'Then take a look at the following code snippet:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看一下下面的代码片段：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The previous code sample illustrates the creation of a `Scalebar` widget with
    the units in English.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码示例说明了使用英制单位创建`Scalebar`小部件。
- en: The Directions widget
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方向小部件
- en: 'The `Directions` widget makes it easy to calculate directions between two or
    more input locations. The resulting directions, displayed in the following screenshot,
    are displayed with detailed turn-by-turn instructions and an optional map. If
    a map is associated with the widget, the direction''s route and stops are displayed
    on the map. The stops displayed on the map are interactive, so you can click on
    them to display a pop up with stop details or drag the stop to a new location
    to recalculate the route. Take a look at the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Directions`小部件使得计算两个或多个输入位置之间的方向变得容易。生成的方向，在下面的屏幕截图中显示，显示了详细的逐步转向说明和可选地图。如果地图与小部件关联，方向的路线和停靠点将显示在地图上。地图上显示的停靠点是交互式的，因此您可以单击它们以显示带有停靠点详细信息的弹出窗口，或者将停靠点拖动到新位置以重新计算路线。看一下下面的屏幕截图：'
- en: '![The Directions widget](graphics/7965OT_05_14.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![方向小部件](graphics/7965OT_05_14.jpg)'
- en: 'Take a look at the following code snippet:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的代码片段：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The previous code example shows the creation of a `Directions` object.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码示例显示了创建`Directions`对象。
- en: The HistogramTimeSlider dijit
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HistogramTimeSlider dijit
- en: The `HistogramTimeSlider` dijit provides a histogram chart representation of
    data for time-enabled layers on a map. Through the UI, users can temporally control
    the display of data with an extension to the `TimeSlider` widget.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`HistogramTimeSlider` dijit为地图上启用时间的图层提供了数据的直方图图表表示。通过UI，用户可以使用`TimeSlider`小部件的扩展来临时控制数据的显示。'
- en: '![The HistogramTimeSlider dijit](graphics/7965OT_05_15.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: ！[HistogramTimeSlider dijit]（graphics/7965OT_05_15.jpg）
- en: 'Take a look at the following code snippet:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the previous code example, a `HistogramTimeSlider` object is created and
    associated with a map.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，创建了一个`HistogramTimeSlider`对象并将其与地图关联。
- en: The HomeButton widget
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HomeButton小部件
- en: 'The `HomeButton` widget is simply a button that you can add to your application,
    which returns the map to the initial extent. Take a look at the following screeshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`HomeButton`小部件只是一个按钮，您可以将其添加到应用程序中，它将地图返回到初始范围。看一下以下截图：'
- en: '![The HomeButton widget](graphics/7965OT_05_16.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: ！[HomeButton小部件]（graphics/7965OT_05_16.jpg）
- en: 'Then take a look at the following code snippet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看一下以下代码片段：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The previous code example shows the creation of a `HomeButton` widget.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码示例显示了创建`HomeButton`小部件。
- en: The LocateButton widget
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LocateButton小部件
- en: 'The `LocateButton` widget can be used to find and zoom to the current location
    of the user. This widget uses the Geolocation API to find the user''s current
    location. Once the location is found, the map zooms to that location. The widget
    provides options that allow the developer to define the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocateButton`小部件可用于查找并缩放到用户当前位置。此小部件使用地理位置API来查找用户当前位置。找到位置后，地图将缩放到该位置。该小部件提供选项，允许开发人员定义以下内容：'
- en: The HTML5 geolocation position provides options for finding a location such
    as `maximumAge` and `timeout`. The `timeout` property defines the maximum amount
    of time that can be used to determine the location of a device, while the `maximumAge`
    property defines the maximum amount of time before a new location for the device
    is found.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5地理位置提供了查找位置的选项，如`maximumAge`和`timeout`。 `timeout`属性定义了用于确定设备位置的最长时间，而`maximumAge`属性定义了在找到设备的新位置之前的最长时间。
- en: The ability to define a custom symbol that will be used to highlight the user's
    current location on the map.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义自定义符号，用于在地图上突出显示用户当前位置的能力。
- en: The scale to zoom to when a location has been found.![The LocateButton widget](graphics/7965OT_05_17.jpg)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到位置后要缩放的比例。！[LocateButton小部件]（graphics/7965OT_05_17.jpg）
- en: 'Take a look at the following code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The previous code example shows how to create an instance of the `LocateButton`
    widget and add it to the map.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码示例显示了如何创建`LocateButton`小部件的实例并将其添加到地图中。
- en: The TimeSlider widget
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TimeSlider小部件
- en: 'The `TimeSlider` widget is used for visualizing time-enabled layers. The `TimeSlider`
    widget is configured to have two thumbs, so only the data within the time frame
    of the two thumb locations is displayed. The `setThumbIndexes()` method determines
    the initial location of each thumb. In this case, a thumb is added at the initial
    start time and another thumb is positioned one time step higher up. Take a look
    at the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimeSlider`小部件用于可视化启用时间的图层。 `TimeSlider`小部件配置为具有两个拇指，因此仅显示两个拇指位置的时间范围内的数据。
    `setThumbIndexes（）`方法确定每个拇指的初始位置。在这种情况下，在初始开始时间添加了一个拇指，另一个拇指定位在更高的时间步骤。看一下以下屏幕截图：'
- en: '![The TimeSlider widget](graphics/7965OT_05_18.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: ！[TimeSlider小部件]（graphics/7965OT_05_18.jpg）
- en: 'Take a look at the following code snippet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The previous code example illustrates how you can create an instance of the
    `TimeSlider` object and set various properties, including the start and end time.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码示例说明了如何创建`TimeSlider`对象的实例并设置各种属性，包括开始和结束时间。
- en: The LayerSwipe widget
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图层滑动小部件
- en: The `LayerSwipe` widget provides a simple tool to show a portion of a layer
    or layers at the top of a map. You can easily compare the content of multiple
    layers in a map, using this widget to reveal the contents of layer(s) on the map.
    The widget provides horizontal, vertical, and scope viewing modes.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`LayerSwipe`小部件提供了一个简单的工具，用于在地图顶部显示图层或图层的一部分。您可以使用此小部件在地图上显示一个或多个图层的内容，以便比较多个图层的内容。该小部件提供水平，垂直和范围查看模式。'
- en: '![The LayerSwipe widget](graphics/7965OT_05_19.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: ！[LayerSwipe小部件]（graphics/7965OT_05_19.jpg）
- en: 'Take a look at the following code snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The previous code example shows how to create an instance of `LayerSwipe` and
    add it to the map.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码示例显示了如何创建`LayerSwipe`的实例并将其添加到地图中。
- en: Analysis widgets
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析小部件
- en: 'A number of new analysis widgets have been introduced with the Version 3.7
    release of the ArcGIS API for JavaScript. The analysis widgets provide access
    to the ArcGIS Spatial Analysis Service, which allows you to perform common spatial
    analyses on your hosted data via the API. The previous screenshot shows part of
    the `SummarizeNearby` widget, which is one of the 12 Analysis widgets. The analysis
    widgets include the following 12 widgets:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArcGIS API for JavaScript的3.7版本中引入了许多新的分析小部件。分析小部件提供对ArcGIS空间分析服务的访问，允许您通过API对托管数据执行常见的空间分析。上一个屏幕截图显示了`SummarizeNearby`小部件的一部分，这是12个分析小部件之一。分析小部件包括以下12个小部件：
- en: '`AnalysisBase`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnalysisBase`'
- en: '`AggregatePoints`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合点
- en: '`CreateBuffers`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建缓冲区
- en: '`CreateDriveTimeAreas`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建驾驶时间区域
- en: '`DissolveBoundaries`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 溶解边界
- en: '`EnrichLayer`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富图层
- en: '`ExtractData`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取数据
- en: '`FindHotSpots`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找热点
- en: '`FindNearest`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找最近
- en: '`MergeLayers`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并图层
- en: '`OverlayLayers`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图层叠加
- en: '`SummarizeNearby`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附近总结
- en: '`SummarizeWithin`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SummarizeWithin`'
- en: An [ArcGIS.com](http://ArcGIS.com) subscription is required for the widgets.
    Not only will you need to store data using your [ArcGIS.com](http://ArcGIS.com)
    account, but will also need to sign in to run an analysis job as a credit-based
    service. Executing analysis tasks and hosting feature services are not available
    to personal account users.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 需要[ArcGIS.com](http://ArcGIS.com)订阅才能使用这些小部件。您不仅需要使用您的[ArcGIS.com](http://ArcGIS.com)帐户存储数据，还需要登录以作为基于信用的服务运行分析作业。执行分析任务和托管要素服务对个人帐户用户不可用。
- en: Feature editing
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性编辑
- en: Simple feature editing is supported by the ArcGIS API for JavaScript when working
    against data stored in an enterprise geodatabase format. What this means is that
    your data needs to be stored in an enterprise geodatabase managed by ArcSDE.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用企业地理数据库格式存储的数据时，ArcGIS API for JavaScript支持简单要素编辑。这意味着您的数据需要存储在由ArcSDE管理的企业地理数据库中。
- en: Editing works on the concept of "last in wins." For example, if two people are
    editing the same feature in a layer and both submit modifications, the last editor
    to submit changes will overwrite any changes made by the first editor. Obviously,
    this could pose a problem in some cases, so before implementing editing in your
    application, you will need to examine how your data could be affected.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑工作基于“最后提交者获胜”的概念。例如，如果两个人正在编辑图层中的同一要素，并且两者都提交了修改，最后提交更改的编辑者将覆盖第一个编辑者所做的任何更改。显然，在某些情况下，这可能会造成问题，因此在实现应用程序中的编辑之前，您需要检查您的数据可能受到的影响。
- en: Other characteristics of editing include support for domains and subtypes, template
    style editing, and the ability to edit standalone tables and attachments. To use
    editing options, you will need to use `FeatureService` and `FeatureLayer`. Editing
    requests are submitted to the server using a HTTP post request, which in most
    cases will require the use of a proxy.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑的其他特性包括对域和子类型的支持，模板样式编辑以及编辑独立表和附件的能力。要使用编辑选项，您需要使用`FeatureService`和`FeatureLayer`。编辑请求通过HTTP
    post请求提交到服务器，大多数情况下需要使用代理。
- en: Editing support includes feature editing, including the creation and deletion
    of simple features, along with the ability to modify features through moves, cuts,
    union, or reshaping. In addition, feature attributes can be edited, documents
    can be attached to features, and comments can be added to features.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑支持包括要素编辑，包括创建和删除简单要素，以及通过移动、切割、联合或重塑来修改要素的能力。此外，要素属性可以被编辑，文档可以附加到要素，并且可以向要素添加评论。
- en: Feature service
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要素服务
- en: Web editing requires a feature service to provide the symbology and feature
    geometry of your data. The feature service is just a map service with the feature
    access capability enabled. This capability allows the map service to expose feature
    geometries and their symbols in a way that is easy for web applications to use
    and update.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Web编辑需要要素服务来提供数据的符号和要素几何。要素服务只是启用了要素访问功能的地图服务。此功能允许地图服务以便于Web应用程序使用和更新的方式公开要素几何和它们的符号。
- en: Before you build a web editing application, you need to do some work to create
    a feature service exposing the layers that you want to be edited. This involves
    setting up a map document and optionally defining some templates for editing.
    Templates allow you to preconfigure the symbology and attributes for some commonly
    used feature types. For example, to prepare editing streams, you might configure
    templates for "major rivers", "minor rivers", "streams", and "tributaries." Templates
    are optional, but they make it easy for the end user of the application to create
    common features.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建Web编辑应用程序之前，您需要做一些工作来创建一个公开要进行编辑的图层的要素服务。这涉及设置地图文档，并可选择定义一些编辑模板。模板允许您预先配置一些常用要素类型的符号和属性。例如，为了准备编辑流，您可以为“主要河流”、“次要河流”、“小溪”和“支流”配置模板。模板是可选的，但它们使应用程序的最终用户轻松创建常见要素。
- en: Once your map is completed, you need to publish it to ArcGIS Server with the
    Feature Access capability enabled. This creates REST URLs or endpoints to both
    a map service and a feature service. You will use these URLs to reference the
    services in your application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 完成地图后，您需要将其发布到启用了要素访问功能的ArcGIS Server。这将创建REST URL或端点，用于地图服务和要素服务。您将使用这些URL在应用程序中引用服务。
- en: Feature services are accessible in the web APIs through a `FeatureLayer` object,
    which we examined earlier in a previous chapter. Feature layers can do a variety
    of things and can reference either map services or feature services. However,
    when you use `FeatureLayer` for editing purposes, you need to reference a feature
    service.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`FeatureLayer`对象，Web API可以访问要素服务，我们在之前的章节中已经进行了检查。要素图层可以执行各种操作，并且可以引用地图服务或要素服务。但是，当您将`FeatureLayer`用于编辑目的时，您需要引用要素服务。
- en: With the editing functionality, your web application tells the `FeatureLayer`
    which attributes have changed and, if applicable, how the geometry has changed.
    The `FeatureLayer` object also displays the updated features after editing. You
    can call the `applyEdits()` method on the feature layer to apply the edits, which
    then commits them to the database.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编辑功能，您的Web应用程序告诉`FeatureLayer`哪些属性已更改，以及（如果适用）几何图形如何更改。`FeatureLayer`对象还在编辑后显示更新的要素。您可以在要素图层上调用`applyEdits()`方法来应用编辑，然后将其提交到数据库。
- en: The editing widgets
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑小部件
- en: The ArcGIS API for JavaScript provides widgets to make it easier for you to
    add editing function to your Web applications. These widgets include `Editor`,
    `TemplatePicker`, `AttributeInspector`, and `AttachmentEditor` widgets. The `Editor`
    widget is the default editing interface and includes everything you need to edit
    a layer, and also allows you to choose the number and types of tools available.
    `TemplatePicker` displays a preconfigured template containing symbols for each
    of the layers in your map document. This template style editing allows your users
    to simply pick a layer and begin editing. The `AttributeInspector` widget provides
    an interface for editing the attributes of features and ensures valid data entry.
    Finally, `AttachmentEditor` associates a downloadable file with a feature. We'll
    examine each of these widgets in more detail.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript提供了小部件，使您更容易将编辑功能添加到您的Web应用程序中。这些小部件包括`Editor`、`TemplatePicker`、`AttributeInspector`和`AttachmentEditor`小部件。`Editor`小部件是默认的编辑界面，包括您编辑图层所需的一切，并允许您选择可用的工具的数量和类型。`TemplatePicker`显示一个预配置的模板，其中包含地图文档中每个图层的符号。这种模板样式编辑允许用户简单地选择一个图层并开始编辑。`AttributeInspector`小部件提供了一个界面，用于编辑要素的属性，并确保有效的数据输入。最后，`AttachmentEditor`将可下载文件与要素关联起来。我们将更详细地研究这些小部件。
- en: The Editor widget
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑器小部件
- en: The `Editor` widget, shown in the following screenshot, provides the default
    editing interface included with API. It combines the functionality of the other
    widgets to provide everything that you need for editing a layer. You can choose
    the number and types of tools that are available on the widget.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`Editor`小部件显示在以下截图中，提供了API包含的默认编辑界面。它结合了其他小部件的功能，为您提供了编辑图层所需的一切。您可以选择小部件上可用的工具的数量和类型。'
- en: 'The `Editor` widget saves your edits immediately after they are made, for example,
    as soon as you finish drawing a point. If you decide not to use the `Editor` widget,
    you must determine when and how often you want to apply edits. Take a look at
    the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`Editor`小部件在进行编辑后立即保存您的编辑，例如，当您完成绘制一个点时。如果您决定不使用`Editor`小部件，您必须确定何时以及多久应用编辑。看一下以下截图：'
- en: '![The Editor widget](graphics/7965OT_05_20.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![编辑器小部件](graphics/7965OT_05_20.jpg)'
- en: 'In the following code example, a new `Editor` object is created by passing
    a `params` object into the constructor. The input `params` object is where the
    developer defines the functionality that the editing application will include.
    In this case, only the required options are defined. The required options are
    the map, the feature layers to edit, and the URL to a geometry service. Take a
    look at the following code snippet:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，通过将`params`对象传递到构造函数中来创建一个新的`Editor`对象。输入的`params`对象是开发人员定义编辑应用程序功能的地方。在这种情况下，只定义了必需的选项。必需的选项是地图、要编辑的要素图层和几何服务的URL。看一下以下代码片段：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `Editor` widget provides out of the box editing capabilities using an editable
    layer in a Feature Service. It combines the out of the box `TemplatePicker`, `AttachmentEditor`,
    `AttributeInspector`, and `GeometryService` to provide feature and attribute editing.
    For most editing applications, you should take advantage of the `Editor` widget.
    This widget allows you to perform all the functions you see listed in the following
    diagram:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`Editor`小部件使用要素服务中的可编辑图层提供开箱即用的编辑功能。它结合了开箱即用的`TemplatePicker`、`AttachmentEditor`、`AttributeInspector`和`GeometryService`，以提供要素和属性编辑。对于大多数编辑应用程序，您应该利用`Editor`小部件。该小部件允许您执行以下图表中列出的所有功能：'
- en: '![The Editor widget](graphics/7965OT_05_21.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![编辑器小部件](graphics/7965OT_05_21.jpg)'
- en: To use the `Editor` widget in your code, you'll need to first load the widget
    using `dojo.require`. Required parameters for creating a new instance of `Editor`
    include a reference to the `Map` object and a geometry service.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的代码中使用`Editor`小部件，您需要首先使用`dojo.require`加载小部件。创建`Editor`的新实例所需的参数包括对`Map`对象和几何服务的引用。
- en: The TemplatePicker widget
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板选择器小部件
- en: 'The `TemplatePicker` widget displays a preconfigured set of features to the
    user, with each feature symbolizing a layer in the service. Editing is initiated
    very simply by selecting a symbol from the template and then clicking on the map
    to add features. The symbols displayed in the template come from the editing templates
    you defined in the feature service''s source map or the symbols defined in the
    application. `TemplatePicker` can also be used as a simple legend. Take a look
    at the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`TemplatePicker`小部件向用户显示了一组预配置的要素，每个要素都代表服务中的一个图层。通过从模板中选择一个符号，然后单击地图来添加要素，编辑可以非常简单地启动。模板中显示的符号来自您在要素服务的源地图中定义的编辑模板或应用程序中定义的符号。`TemplatePicker`也可以用作简单的图例。看一下以下截图：'
- en: '![The TemplatePicker widget](graphics/7965OT_05_22.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![模板选择器小部件](graphics/7965OT_05_22.jpg)'
- en: 'Take a look at the following code snippet:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE26]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the previous code example, a new `TemplatePicker` object is created and attached
    to the `Editor` widget.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码示例中，创建了一个新的`TemplatePicker`对象并将其附加到`Editor`小部件上。
- en: The AttributeInspector widget
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性检查器小部件
- en: 'The `AttributeInspector` widget, as shown in the following screenshot, provides
    an interface for editing feature attributes over the web. It also ensures that
    the data they enter is valid by matching the input to the expected data type.
    Domains are also supported. For example, if a coded value domain is applied to
    a field, the permitted values appear in a drop-down list, restricting the possibility
    of other values being entered. If a field requires a date value, a calendar appears,
    helping the user to supply a valid date. Take a look at the following screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，`AttributeInspector`小部件为在Web上编辑要素属性提供了一个界面。它还通过将输入与预期数据类型进行匹配来确保用户输入的数据有效。还支持域。例如，如果对字段应用了编码值域，则允许的值会出现在下拉列表中，限制了输入其他值的可能性。如果字段需要日期值，则会出现一个日历，帮助用户提供有效的日期。看一下以下截图：
- en: '![The AttributeInspector widget](graphics/7965OT_05_23.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![AttributeInspector小部件](graphics/7965OT_05_23.jpg)'
- en: 'The `AttributeInspector` widget exposes all the available attributes on the
    layer for editing. If you want to restrict the available attributes, you must
    code your own interface for entering and validating values. Take a look at the
    following code snippet:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`AttributeInspector`小部件公开了图层上所有可用的属性以供编辑。如果要限制可用属性，必须编写自己的界面来输入和验证值。看一下以下代码片段：'
- en: '[PRE27]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the previous code example, an `AttributeInspector` widget is created and
    added to the application. In addition, several event handlers including the attributes
    `change`, `next`, and `delete` are set up to handle various attribute changes.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码示例中，创建了一个`AttributeInspector`小部件并将其添加到应用程序中。此外，设置了几个事件处理程序，包括属性`change`、`next`和`delete`，以处理各种属性更改。
- en: The AttachmentEditor widget
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AttachmentEditor小部件
- en: In some situations, you may want to associate a downloadable file with a feature.
    For example, you might want users to be able to click on a feature representing
    a water meter and see a link to an image of the meter. In the ArcGIS Web APIs,
    such an associated downloadable file is known as a feature attachment.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能希望将可下载文件与要素关联起来。例如，您可能希望用户能够单击代表水表的要素并看到指向水表图像的链接。在ArcGIS Web API中，这样一个关联的可下载文件称为要素附件。
- en: The `AttachmentEditor` widget, as seen in the following screenshot, is a widget
    that helps users upload and view feature attachments. The `AttachmentEditor` widget
    includes a list of current attachments (with a **Remove** button), as well as
    a **Browse** button that can be used to upload more attachments. The `AttachmentEditor`
    widget works well inside an info window, but can be placed elsewhere on the page.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如下面的屏幕截图所示，`AttachmentEditor`小部件是一个帮助用户上传和查看要素附件的小部件。`AttachmentEditor`小部件包括当前附件的列表（带有**删除**按钮），以及一个**浏览**按钮，可用于上传更多附件。`AttachmentEditor`小部件在信息窗口内工作良好，但也可以放置在页面的其他位置。
- en: '![The AttachmentEditor widget](graphics/7965OT_05_24.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![AttachmentEditor小部件](graphics/7965OT_05_24.jpg)'
- en: 'In order to use feature attachments, attachments must be enabled on the source
    feature class. You can enable attachments for a feature class in ArcCatalog or
    the **Catalog** window in ArcMap. If the `Editor` widget detects that attachments
    are enabled, it will include `AttachmentEditor`. Take a look at the following
    code snippet:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用要素附件，必须在源要素类上启用附件。您可以在ArcCatalog或ArcMap中的**目录**窗口中为要素类启用附件。如果`Editor`小部件检测到附件已启用，它将包括`AttachmentEditor`。看一下以下代码片段：
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The previous code shows how to create an `AttachmentEditor` object and add it
    to the application.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码显示了如何创建一个`AttachmentEditor`对象并将其添加到应用程序中。
- en: The Edit toolbar
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑工具栏
- en: 'There may be times when you don''t want to use the default `Editor` widget
    shown in the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能不想使用默认的`Editor`小部件，如下面的屏幕截图所示：
- en: '![The Edit toolbar](graphics/7965OT_05_25.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![编辑工具栏](graphics/7965OT_05_25.jpg)'
- en: These situations would include times where you want to code your own editing
    logic, particularly with regards to the client side display of features and graphics.
    You can use the **Edit** toolbar in these cases. The **Edit** toolbar is simply
    a JavaScript helper class that is part of the API. It helps with placing and moving
    vertices and graphics. This toolbar is similar to the **Navigation** and **Draw**
    toolbars that we examined earlier in the book.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这些情况包括您希望编写自己的编辑逻辑，特别是关于客户端显示要素和图形的情况。在这些情况下，您可以使用**编辑**工具栏。**编辑**工具栏只是API的一部分，是一个JavaScript辅助类。它有助于放置和移动顶点和图形。这个工具栏类似于我们在本书前面讨论过的**导航**和**绘图**工具栏。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Widgets and toolbars provide an easy way to add prebuilt functionalities to
    your application without having to write a lot of code. The wide array of available
    widgets has increased throughout the various releases of the API, and it is expected
    that many new widgets will be available in future releases. Toolbars, though similar
    to widgets, are helper classes that provide the functionality for adding navigation,
    drawing functionality, and editing tools to your application. However, it is up
    to the developer to define the appearance of the toolbars and buttons. In the
    next chapter, you will learn how to create spatial and attribute queries using
    the `Query` and `QueryTask` classes.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件和工具栏为您的应用程序提供了一种简单的方式来添加预构建的功能，而无需编写大量代码。可用小部件的范围在API的各个版本中不断增加，预计在未来的版本中将提供许多新的小部件。工具栏与小部件类似，是提供导航、绘图功能和编辑工具功能的辅助类。但是，开发人员需要定义工具栏和按钮的外观。在下一章中，您将学习如何使用`Query`和`QueryTask`类创建空间和属性查询。
