- en: Working with Google's Location Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google的位置服务
- en: In the previous chapter, we built our **location-based alarm** (**LBA**) app
    to include Google Maps, added a marker and customization of the location, and
    also built the UI for receiving user input for the alarm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了我们的**基于位置的警报**（LBA）应用程序，包括Google地图，添加了标记和自定义位置，并为接收用户输入设置了UI。
- en: We will focus now on the integration of the Google Location API with our app
    and receiving updates on the user's location. The location of interest entered
    by the user will be saved and compared with the location updates received for
    the alarm to be triggered as the user reaches the area of interest.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将专注于将Google位置API与我们的应用程序集成，并在用户的位置上接收更新。用户输入的感兴趣的位置将被保存并与接收到的警报位置更新进行比较，以便在用户到达感兴趣的区域时触发警报。
- en: Google provides various means to access and identify the location of the user.
    The Google Location APIs provides information on the user's last known location,
    display the location address, receive continuous updates on the location changes,
    and so on. Developers can add GeoFence—a fence around a geographical region—and
    any time users pass through the GeoFence an alert can be generated.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Google提供了各种方式来访问和识别用户的位置。Google位置API提供了关于用户上次已知位置的信息，显示位置地址，接收位置更改的持续更新等。开发人员可以添加地理围栏
    - 围绕地理区域的围栏 - 任何时候用户通过地理围栏时都可以生成警报。
- en: 'In this chapter, we will learn how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何：
- en: Use the Google Location API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google位置API
- en: Receive updates on the user's current location
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收用户当前位置的更新
- en: Utilize user shared preferences to persist the user's location of interest
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用用户共享首选项来保存用户感兴趣的位置
- en: Match and display the alert when the user reaches the location of interest
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配并在用户到达感兴趣的位置时显示警报
- en: The primary focus of this chapter is to introduce and explain the concept and
    usage of the location in our app. With this objective in mind, these concepts
    are explained with the app receiving the location updates when running in the
    foreground. The handling of required permissions is also handled in a simpler
    way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要重点是介绍和解释我们应用程序中位置的概念和用法。考虑到这一目标，这些概念是通过应用程序在前台运行时接收位置更新来解释的。所需权限的处理也以更简单的方式处理。
- en: Integrating shared preferences
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成共享首选项
- en: Users of our app will enter the desired location for which they want the alarm
    to be triggered. Users enter the `Lat` and `Lng` of the location and for us to
    compare this with the current location users are in, we need to store the details
    entered by them as the desired location.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序用户将输入他们希望触发警报的所需位置。用户输入位置的“纬度”和“经度”，以便我们将其与用户所在的当前位置进行比较，我们需要将他们输入的详细信息存储为所需位置。
- en: Shared preferences are file-based storage that contain key-value pairs and provide
    an easier means to read and write. The shared preferences file is managed by the
    Android framework and the file can be either private or shared.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 共享首选项是基于文件的存储，包含键值对，并提供了更容易的读写方式。共享首选项文件由Android框架管理，文件可以是私有的或共享的。
- en: Let's first integrate shared preferences into our code and save the latitude
    and longitude the user entered in the UI screen for the alarm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将共享首选项集成到我们的代码中，并保存用户在UI屏幕上输入的纬度和经度用于警报。
- en: Shared preferences give us an option of saving the data in key-value pairs.
    While we can use the generically available shared preference file, it is better
    to have a specific shared preference file for our app.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 共享首选项为我们提供了以键值对的形式保存数据的选项。虽然我们可以使用通用的共享首选项文件，但最好为我们的应用程序创建一个特定的共享首选项文件。
- en: 'We need to define a string for our shared preference file to be used by our
    app. Navigate to app | src | main | res | values | strings.xml. Let us add a new
    string, `PREFS_NAME`, and name it as `LocationAlarmFile`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的应用程序定义一个共享首选项文件的字符串。导航到app | src | main | res | values | strings.xml。让我们添加一个新的字符串`PREFS_NAME`，并将其命名为`LocationAlarmFile`：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will add the following code in our `SettingsActivity` class to capture the
    user input and save that in the shared preferences file. The shared preferences
    file is opened by referring to the string `PREFS_NAME` in the resources file and
    the file is opened with `MODE_PRIVATE`, which indicates the file is available
    only for our app.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的`SettingsActivity`类中添加以下代码，以捕获用户输入并将其保存在共享首选项文件中。共享首选项文件通过在资源文件中引用字符串`PREFS_NAME`来打开，并且文件以`MODE_PRIVATE`打开，这表示该文件仅供我们的应用程序使用。
- en: 'Once the file is available, we open the editor and share the latitude and longitude
    input from the user as a string using `putString` as key-value pairs:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件可用，我们打开编辑器并使用`putString`将用户输入的纬度和经度作为字符串共享。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To read and display from shared preferences:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从共享首选项中读取和显示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The user is alerted about the alarm being set:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将收到有关设置警报的警报：
- en: '![](img/e94c0720-b24e-426b-8d67-08a28aedecdc.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e94c0720-b24e-426b-8d67-08a28aedecdc.png)'
- en: 'The latitude that is entered by the user is stored and read from shared preference
    and displayed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入的纬度将存储并从共享首选项中读取并显示：
- en: '![](img/3eb7b5d4-409e-47f2-bd74-31eb98885280.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3eb7b5d4-409e-47f2-bd74-31eb98885280.png)'
- en: 'The longitude entered by the user is also read from shared preferences and
    displayed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入的经度也将从共享首选项中读取并显示：
- en: '![](img/4e0402fa-652e-4d8c-bf4d-295149b723e5.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e0402fa-652e-4d8c-bf4d-295149b723e5.png)'
- en: Adding permissions
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加权限
- en: Google Play Services provide location-based services that can be integrated
    and used by our app. Adding the location services and using them requires permissions
    to identify and get the location updates from the user.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play服务提供了可以集成和使用的基于位置的服务。添加位置服务并使用它们需要权限来识别并从用户那里获取位置更新。
- en: 'To use the Google Location services from Play Services, we need to include
    the `play-services-location` in the `build.gradle` file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用来自Play服务的Google位置服务，我们需要在`build.gradle`文件中包含`play-services-location`：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is important to include **only** the specific feature required for the app
    from Google Play Services. For example, here we require location services, so
    we need to specify the services for the location. Including all Google Play Services
    will make the app size huge; ask for permissions that are not really required
    for the app.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是**仅**从 Google Play 服务中包含应用程序所需的特定功能。例如，在这里我们需要位置服务，因此我们需要指定位置的服务。包含所有 Google
    Play 服务将使应用程序大小变得庞大；请求不真正需要的权限。
- en: 'We also need to add the permission for accessing the fine location in our `AndroidManifest.xml`
    file. This gives us access to obtain the location details from the network provider
    and also the GPS provider:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在 `AndroidManifest.xml` 文件中添加访问精确定位的权限。这使我们可以从网络提供商和 GPS 提供商获取位置详细信息：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: During runtime, we need to check whether the device has the location enabled;
    if not, we will display a message requesting the user to enable the location and
    grant permission for the app.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，我们需要检查设备是否已启用位置；如果没有，我们将显示一条消息，请求用户启用位置并授予权限。
- en: 'The `checkLocation` Boolean function finds out if the device has the location
    enabled or not for us:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkLocation` 布尔函数用于判断设备是否已启用位置：'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/f698a5c3-d5f2-40d4-b344-897e05332272.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f698a5c3-d5f2-40d4-b344-897e05332272.png)'
- en: Integration of the location API
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置 API 的集成
- en: We will integrate the location API into our app to receive location updates.
    Integration of the location API involves some changes in the code. Let us discuss
    them in detail.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将集成位置 API 到我们的应用程序中以接收位置更新。位置 API 的集成涉及代码的一些更改。让我们详细讨论这些更改。
- en: Classes and variables
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和变量
- en: 'Integration of the Google location API requires implementation of `GoogleAPIClient`,
    `ConnectionCallbacks`, and connection failed listeners by `MapsActivity`. Let
    us proceed and make the changes to the `MapsActivity`. Earlier, we had the `MapsActivity`
    extend `AppCompatActivity` and implement the `OnMapReadyCallback` interface. Now,
    since we need to use the location API''s we have to also implement the `GoogleAPIClient`,
    `ConnectionCallbacks`, and `onConnectionFailedListener` as shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Google 位置 API 的集成需要 `MapsActivity` 实现 `GoogleAPIClient`、`ConnectionCallbacks`
    和连接失败监听器。让我们继续对 `MapsActivity` 进行更改。之前，`MapsActivity` 扩展了 `AppCompatActivity`
    并实现了 `OnMapReadyCallback` 接口。现在，由于我们需要使用位置 API，我们还必须实现 `GoogleAPIClient`、`ConnectionCallbacks`
    和 `onConnectionFailedListener`，如下所示：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We declare the variables required for `GoogleMap` and other variables to store
    the latitude and longitude received from the user and also from the location API:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了 `GoogleMap` 所需的变量和其他变量，用于存储来自用户和位置 API 的纬度和经度：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We declare the `UPDATE_INTERVAL`, the interval in which we would like to receive
    the updates from the location API, and `FASTEST_INTERVAL`, the rate at which our
    app can handle the update. We also declare the `LocationManager` variable:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明 `UPDATE_INTERVAL`，即我们希望从位置 API 接收更新的间隔，以及 `FASTEST_INTERVAL`，即我们的应用程序可以处理更新的速率。我们还声明
    `LocationManager` 变量：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `onCreate` function, we set the content view for the UI and also ensure
    the `GoogleApiClient` is instantiated. We also request that the user enables the
    location is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onCreate` 函数中，我们为 UI 设置内容视图，并确保 `GoogleApiClient` 已实例化。我们还请求用户启用位置如下：
- en: '`onCreate()`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCreate()`：'
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Google API client
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google API 客户端
- en: Declaring, initializing, and managing the connection options of the Google API
    client is to be handled along the lifecyle events of Android app. We also need
    to get the location updates once the connection is established.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 声明、初始化和管理 Google API 客户端的连接选项需要在 Android 应用程序的生命周期事件中处理。一旦建立连接，我们还需要获取位置更新。
- en: 'In the `onStart` method, we check if the `mGoogleAPIClient` instance is not
    null and request the connection be initiated:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onStart` 方法中，我们检查 `mGoogleAPIClient` 实例是否不为空，并请求初始化连接：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `onStop` method, we check whether the `mGoogleAPIClient` instance is
    connected and if it is, we call the `disconnect` method:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onStop` 方法中，我们检查 `mGoogleAPIClient` 实例是否已连接，如果是，则调用 `disconnect` 方法：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In case something goes wrong and the connection gets suspended, we request
    a reconnect in the `onConnectionSuspended` method:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题并且连接被挂起，我们在 `onConnectionSuspended` 方法中请求重新连接：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In case the Google Location API cannot establish the connection, we log the
    reason for this by getting the error code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Google 位置 API 无法建立连接，我们通过获取错误代码来记录连接失败的原因：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the `onConnected` method, we first check for the permission to `ACCESS _FINE_LOCATION`
    and that the `ACCESS_COARSE_LOCATION` is indeed present in the manifest file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onConnected` 方法中，我们首先检查是否有 `ACCESS_FINE_LOCATION` 权限，并且 `ACCESS_COARSE_LOCATION`
    确实存在于清单文件中。
- en: 'We call the `startLocationUpdates()` method once we ensure the permissions
    are granted:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确保已授予权限，我们调用 `startLocationUpdates()` 方法：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `fusedLocationProviderClient` provides the current location details and
    assigns them to the `mLocation` variable:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`fusedLocationProviderClient` 提供当前位置详细信息，并将其分配给 `mLocation` 变量：'
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `startLocationUpdates` creates the `LocationRequest` instance and provides
    the parameters we set for the updates. We also call the `FusedLocationAPI` and
    request the location updates:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`startLocationUpdates` 创建 `LocationRequest` 实例，并提供我们设置的更新参数。我们还调用 `FusedLocationAPI`
    并请求位置更新：'
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `onLocationChanged` method is the important method in which we get the
    details of the current location of the user. We also read the latitude and longitude
    the user input for the alarm from the shared preferences. Once we get both sets
    of details, we call the `CheckAlarmLocation` method which matches the latitude/longitude
    and alert the user as and when they reach the area of interest:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`onLocationChanged` 方法是一个重要的方法，我们可以在其中获取用户当前位置的详细信息。我们还从共享偏好中读取用户输入的警报的纬度和经度。一旦我们获得了这两组详细信息，我们调用
    `CheckAlarmLocation` 方法，该方法匹配纬度/经度并在用户到达感兴趣的区域时提醒用户：'
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/d2b3a7d9-134b-41af-83ef-b778674eb1a4.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2b3a7d9-134b-41af-83ef-b778674eb1a4.png)'
- en: Matching the location
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匹配位置
- en: The `startLocationUpdates` method provides the current latitude and longitude
    of the user continuously as per the interval we have set. We need to use the latitude
    and longitude information obtained and need to compare this with the latitude
    and longitude entered by the user for the alarm.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`startLocationUpdates`方法根据我们设置的间隔持续提供用户的当前纬度和经度。我们需要使用获取到的纬度和经度信息，并将其与用户输入的用于设置警报的纬度和经度进行比较。'
- en: 'As and when the user enters the location of interest, we display an alert message
    that the User has reached the area for which the alarm has been set:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入感兴趣的位置时，我们会显示警报消息，告知用户已经到达设置了警报的区域：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/adf9fa70-f09d-4fdd-bc66-7d8439a26a79.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adf9fa70-f09d-4fdd-bc66-7d8439a26a79.png)'
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we continued developing our location-based alarm app to make
    use of the Google Location APIs from Google Play Services and utilized the functionality
    of providing an alert as when the user entered the area of interest.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们继续开发基于位置的闹钟应用程序，利用了来自Google Play服务的Google位置API，并利用了提供警报的功能，当用户进入感兴趣的区域时。
- en: We learned how to use shared preferences for the persistence of the data entered
    by the user, retrieving the same and using the Location APIs to match the current
    location of the user with the area of interest.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用共享偏好来持久化用户输入的数据，检索相同的数据，并使用位置API来将用户的当前位置与感兴趣的区域进行匹配。
