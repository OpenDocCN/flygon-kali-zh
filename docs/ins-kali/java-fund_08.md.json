["```java\n    public class SimpleIntLinkedList \n    {\n    ```", "```java\n    static class Node {\n    Integer data;\n    Node next;\n    Node(Integer d) {\n    data = d;\n    next = null;\n    }\n    Node getNext() {\n    return next;\n    }\n    void setNext(Node node) {\n    next = node;\n    }\n    Object getData() {\n    return data;\n    }\n    }\n    ```", "```java\n    // appends the specified element to the end of this list.\n        public void add(Integer element) {\n            // create a new node\n            Node newNode = new Node(element);\n            //if head node is empty, create a new node and assign it to Head\n            //increment index and return\n            if (head == null) {\n                head = newNode;\n                return;\n            }\n            Node currentNode = head;\n\n            while (currentNode.getNext() != null) {\n                    currentNode = currentNode.getNext();\n            }\n            // set the new node as next node of current\n            currentNode.setNext(newNode);\n        }\n    ```", "```java\n    \u00a0\u00a0public String toString() {\n    \u00a0\u00a0\u00a0\u00a0String delim = \",\";\n    \u00a0\u00a0\u00a0\u00a0StringBuffer stringBuf = new StringBuffer();\n    \u00a0\u00a0\u00a0\u00a0if (head == null)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"LINKED LIST is empty\";\n    \u00a0\u00a0\u00a0\u00a0Node currentNode = head;\n    \u00a0\u00a0\u00a0\u00a0while (currentNode != null) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stringBuf.append(currentNode.getData());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0currentNode = currentNode.getNext();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (currentNode != null)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stringBuf.append(delim);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return stringBuf.toString();\n    \u00a0\u00a0}\n    ```", "```java\n    Node head;\n    public static void main(String[] args) {\n    \u00a0\u00a0SimpleLinkedList list = new SimpleLinkedList();\n    \u00a0\u00a0list.add(13);\n    \u00a0\u00a0list.add(39);\n    \u00a0\u00a0list.add(41);\n    \u00a0\u00a0list.add(93);\n    \u00a0\u00a0list.add(98);\n    \u00a0\u00a0System.out.println(list);\n    \u00a0\u00a0}\n    }\n    ```", "```java\n    [13, 39, 41, 93, 98]\n    ```", "```java\n    [INPUT-1 ,INPUT-2 ,INPUT-3 ,INPUT-4 ,INPUT-5 ]\n    INPUT-3\n    [INPUT-1 ,INPUT-2 ,INPUT-3 ,INPUT-5 ]\n    ```", "```java\n    //Public class holding the functions of Entire Binary Tree structure\n    public class BinarySearchTree\n    {\n        private Node parent;\n        private int  data;\n        private int  size = 0;\n        public BinarySearchTree() {\n            parent = new Node(data);\n        }\n    private class Node {\n            Node left; //points to left node\n            Node right; //points to right node\n            int  data;\n            //constructor of Node\n            public Node(int data) {\n                this.data = data;\n            }\n    }\n    ```", "```java\n    /**\n    * This is the method exposed as public for adding elements into the Tree.\n         * it checks if the size == 0 and then adds the element into parent node. if\n         * parent is already filled, creates a New Node with data and calls the\n         * add(parent, newNode) to find the right root and add it to it.\n         * @param data\n         */\n    \u00a0\u00a0public void add(int data) {\n    \u00a0\u00a0\u00a0\u00a0if (size == 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent.data = data;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size++;\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add(parent, new Node(data));\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    /**\n     * Takes two params, root node and newNode. As per BST, check if the root\n     * data is > newNode data if true: newNode has to be added in left Node\n     * (again recursively check if it has child nodes and the same logic of BST\n     * until it reaches the leaf node to add value) else: newNode has to be\n     * added in right (again recursively check if it has child nodes and the\n     * same logic of BST until it reaches the leaf node to add value)\n    * \n     * @param root\n     * @param newNode\n     */\n    \u00a0\u00a0private void add(Node root, Node newNode) {\n    \u00a0\u00a0\u00a0\u00a0if (root == null) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0if (newNode.data < root.data) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (root.left == null) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0root.left = newNode;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size++;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add(root.left, newNode);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0if ((newNode.data > root.data)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (root.right == null) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0root.right = newNode;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size++;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add(root.right, newNode);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    ```", "```java\n    \u00a0\u00a0public void traverseLeft() {\n    \u00a0\u00a0Node current = parent;\n    \u00a0\u00a0System.out.print(\"Traverse the BST From Left : \");\n            while (current.left != null && current.right != null) {\n                System.out.print(current.data + \"->[\" + current.left.data + \" \" + current.right.data + \"] \");\n                current = current.left;\n            }\n            System.out.println(\"Done\");\n        }\n    ```", "```java\n        public void traverseRight() {\n            Node current = parent;\n            System.out.print(\"Traverse the BST From Right\");\n            while (current.left != null && current.right != null) {\n                System.out.print(current.data + \"->[\" + current.left.data + \" \" + current.right.data + \"] \");\n                current = current.right;\n            }\n            System.out.println(\"Done\");\n        }\n    ```", "```java\n        /**\n         * Main program to demonstrate the BST functionality.\n         * - Adding nodes\n         * - finding High and low \n         * - Traversing left and right\n         * @param args\n         */\n        public static void main(String args[]) {\n            BinarySearchTree bst = new BinarySearchTree();\n            // adding nodes into the BST\n            bst.add(32);\n            bst.add(50);\n            bst.add(93);\n            bst.add(3);\n            bst.add(40);\n            bst.add(17);\n            bst.add(30);\n            bst.add(38);\n            bst.add(25);\n            bst.add(78);\n            bst.add(10);\n            bst.traverseLeft();\n            bst.traverseRight();\n    }\n        }\n    ```", "```java\n    Traverse the BST From Left : 32->[3 50] Done\n    Traverse the BST From Right32->[3 50] 50->[40 93] Done\n    ```", "```java\n    Lowest value in BST :3\n    Highest value in BST :93\n    ```", "```java\npublic enum DayofWeek { \n SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY  \n} \n```", "```java\npublic enum Jobs { \n  DEVELOPER, TESTER, TEAM LEAD, PROJECT MANAGER \n}\n```", "```java\npublic enum Currency {\n    USD, INR, DIRHAM, DINAR, RIYAL, ASD \n}\n```", "```java\n    public class EnumExample\n    {\n        public static void main(String[] args)\n        {\n            Direction north = Direction.NORTH;\n            System.out.println(north + \" : \" + north.no);\n            Direction south = Direction.valueOf(\"SOUTH\");\n            System.out.println(south + \" : \" + south.no);\n        }\n    }\n    ```", "```java\n    public enum Direction\n        {\n                      EAST(45), WEST(90), NORTH(180), SOUTH(360);\n                int no;\n\n    Direction(int i){\n                    no =i;\n                }\n        }\n    ```", "```java\n    NORTH : 180\n    SOUTH : 360\n    ```", "```java\n    BACHELOR OF ENGINEERING : 1\n    BACHELOR OF ENGINEERING : 1\n    BACHELOR OF COMMERCE : 2\n    BACHELOR OF SCIENCE : 3\n    BACHELOR OF ARCHITECTURE : 4\n    BACHELOR : 0\n    true\n    ```", "```java\nBACHELOR OF SCIENCE : 3\nBSC\n```", "```java\n    /**\n     * Sample Class student containing attributes name, age and yearOfPassing\n     *\n     */\n    import java.util.HashSet;\n    class Student {\n        private String name;\n        private Integer age;\n        private Integer yearOfPassing;\n        public String getName() {\n            return name;\n        }\n        public void setName(String name) {\n            this.name = name;\n        }\n        public int getAge() {\n            return age;\n        }\n        public void setAge(int age) {\n            this.age = age;\n        }\n        public int getYearOfPassing() {\n            return yearOfPassing;\n        }\n        public void setYearOfPassing(int releaseYr) {\n            this.yearOfPassing = releaseYr;\n        }\n    }\n    ```", "```java\n    /**\n     * Example class demonstrating the set behavior\n     * We will create 3 objects and add into the Set\n     * Later will create a new object resembling same as one of the 3 objects created and added into the set\n    */\n    public class HashCodeExample {\n        public static void main(String[] args) {\n            Student m = new Student();\n            m.setName(\"RAYMONDS\");\n            m.setAge(20);\n            m.setYearOfPassing(2011);\n            Student m1 = new Student();\n            m1.setName(\"ALLEN\");\n            m1.setAge(19);\n            m1.setYearOfPassing(2010);\n            Student m2 = new Student();\n            m2.setName(\"MAGGY\");\n            m2.setAge(18);\n            m2.setYearOfPassing(2012);\n    }\n    }\n    ```", "```java\n        HashSet<Student> set = new HashSet<Student>();\n            set.add(m);\n            set.add(m1);\n            set.add(m2);\n            //printing all the elements of Set\n    System.out.println(\"Before Adding ALLEN for second time : \");\n            for (Student mm : set) {\n                System.out.println(mm.getName() + \" \" + mm.getAge());\n            }\n    ```", "```java\n        //creating a student similar to m1 (name:ALLEN, age:19, yearOfPassing:2010)\n            Student m3 = new Student();\n            m3.setName(\"ALLEN\");\n            m3.setAge(19);\n            m3.setYearOfPassing(2010);\n    //this Student will be added as hashCode() and equals() are not implemented\n            set.add(m3);\n            // 2 students with same details (ALLEN 19 will be noticed twice)\n    System.out.println(\"After Adding ALLEN for second time: \");\n            for (Student mm : set) {\n                System.out.println(mm.getName() + \" \" + mm.getAge());\n            }\n    ```", "```java\n    Before Adding ALLEN for second time : \n    RAYMONDS 20\n    MAGGY 18\n    ALLEN 19\n    After Adding ALLEN for second time: \n    RAYMONDS 20\n    ALLEN 19\n    MAGGY 18\n    ALLEN 19\n    ```", "```java\n        @Override\n        public boolean equals(Object o) {\n            Student m = (Student) o;\n            return m.name.equals(this.name) && \n                    m.age.equals(this.age) && \n                    m.yearOfPassing.equals(this.yearOfPassing);\n        }\n    ```", "```java\n    @Override\n        public int hashCode() {\n            return this.name.hashCode() + \n                    this.age.hashCode() + \n                    this.yearOfPassing.hashCode();\n        }\n    ```", "```java\n    public class HashCodeExample {\n        public static void main(String[] args) {\n            Student m = new Student();\n            m.setName(\"RAYMONDS\");\n            m.setAge(20);\n            m.setYearOfPassing(2011);\n            Student m1 = new Student();\n            m1.setName(\"ALLEN\");\n            m1.setAge(19);\n            m1.setYearOfPassing(2010);\n            Student m2 = new Student();\n            m2.setName(\"MAGGY\");\n            m2.setAge(18);\n            m2.setYearOfPassing(2012);\n\n            Set<Student> set = new HashSet<Student>();\n            set.add(m);\n            set.add(m1);\n            set.add(m2);\n\n            //printing all the elements of Set\n    System.out.println(\"Before Adding ALLEN for second time : \");\n            for (Student mm : set) {\n                System.out.println(mm.getName() + \" \" + mm.getAge());\n            }\n        //creating a student similar to m1 (name:ALLEN, age:19, yearOfPassing:2010)\n            Student m3 = new Student();\n            m3.setName(\"ALLEN\");\n            m3.setAge(19);\n            m3.setYearOfPassing(2010);\n    //this element will not be added if hashCode and equals methods are implemented\n            set.add(m3);\n    System.out.println(\"After Adding ALLEN for second time: \");\n            for (Student mm : set) {\n                System.out.println(mm.getName() + \" \" + mm.getAge());\n            }\n\n        }\n    }\n    ```", "```java\n    Before Adding ALLEN for second time: \n    ALLEN 19\n    RAYMONDS 20\n    MAGGY 18\n    After Adding ALLEN for second time: \n    ALLEN 19\n    RAYMONDS 20\n    MAGGY 18\n    ```"]