["```cs\nIActorSystem *pAS = gEnv->pGameFramework->GetIActorSystem();\n\npAS ->CreateActor(channelId, \"MyPlayerName\", \"MyCppActor\", Vec3(0, 0, 0), Quat(IDENTITY), Vec3(1, 1, 1));\n```", "```cs\npActorSystem->RemoveActor(myActorEntityId);\n```", "```cs\nIViewSystem *pViewSystem = gEnv->pGame->GetIGameFramework()->GetIViewSystem();\n\nIView *pNewView = pViewSystem->CreateView();\n```", "```cs\npViewSystem_>SetActiveView(pNewView);\n```", "```cs\nSViewParams viewParams = *GetCurrentParams();\nviewParams.position = Vec3(0, 0, 10);\nSetCurrentParams(viewParams);\n```", "```cs\npublic class MyActor : Actor\n{\n}\n```", "```cs\nREGISTER_FACTORY(pFramework, \"Player\", CPlayer, false);\n```", "```cs\npublic class Player : NativeActor\n{\n}\n```", "```cs\nclass CMyCppActor\n  : public CGameObjectExtensionHelper<CMyCppActor, IActor>\n{\n};\n```", "```cs\nREGISTER_FACTORY(pFramework, \"MyCppActor\", CMyCppActor, false);\n```", "```cs\nif(!GetGameObject()->CaptureView(this))\n  return false;\n```", "```cs\nGetGameObject()->ReleaseView(this);\n```", "```cs\nprotected override void UpdateView(ref ViewParams viewParams)\n{\n  var fov = MathHelpers.DegreesToRadians(60);\n\n  viewParams.FieldOfView = fov;\n  viewParams.Position = Position;\n  viewParams.Rotation = Rotation\n}\n```", "```cs\nvar playerRotation = Rotation;\n\nfloat distanceFromPlayer = 5;\nvar upDir = playerRotation.Column2;\n\nviewParams.Position = Position + upDir * distanceFromPlayer;\n```", "```cs\n// Face straight down\nvar angles = new Vec3(MathHelpers.DegreesToRadians(-90), 0, 0);\n\n//Convert to Quaternion\nviewParams.Rotation = Quat.CreateRotationXYZ(angles);\n```", "```cs\npublic override void OnSpawn()\n{\n  // Load object\n  LoadObject(\"Objects/default/primitive_cube.cgf\");\n\n  // Physicalize to weigh 50KG\n  var physicalizationParams = new PhysicalizationParams(PhysicalizationType.Rigid);\n  physicalizationParams.mass = 50;\n  Physicalize(physicalizationParams);\n}\n```", "```cs\ngEnv->pHardwareMouse->AddListener(this);\n```", "```cs\n    gEnv->pGameFramework->GetIActionMapManager()->AddExtraActionListener(this);\n    ```", "```cs\n<actionmap name=\"walk\" version=\"22\">\n  <action name=\"walkBack\" onPress=\"1\" keyboard=\"s\" />\n</actionmap>\n\n<actionmap name=\"drive\" version=\"22\">\n  <action name=\"break\" onPress=\"1\" keyboard=\"s\" />\n</actionmap>\n```", "```cs\ngEnv->pFramework->GetIActionMapManager()->EnableActionMap(\"walk\", true);\n```", "```cs\nm_pAnimatedCharacter = static_cast<IAnimatedCharacter*>(GetGameObject()->AcquireExtension(\"AnimatedCharacter\"))\n```", "```cs\nSCharacterMoveRequest request;\n\nrequest.type = eCMT_Normal;\nrequest.velocity = Vec3(1, 0, 0);\nrequest.rotation = Quat(IDENTITY);\n\nm_pAnimatedCharacter->AddMovement(request);\n```", "```cs\n<MannequinPreview>\n  <controllerDef filename=\"Animations/Mannequin/ADB/SNOWControllerDefinition.xml\"/>\n  <contexts>\n    <contextData name=\"Char3P\" enabled=\"1\" database=\"Animations/Mannequin/ADB/Skiing.adb\" context=\"Char3P\" model=\"scripts/config/base.cdf\"/>\n  </contexts>\n  <History StartTime=\"-4.3160208e+008\" EndTime=\"-4.3160208e+008\"/>\n</MannequinPreview>\n```", "```cs\nSAnimationContext *pAnimContext = GetAnimatedCharacter()->GetAnimationContext();\n\nFragmentID fragmentId = pAnimContext->controllerDef.m_fragmentIDs.Find(name);\nCRY_ASSERT(fragmentId != FRAGMENT_ID_INVALID);\n```", "```cs\nint priority = 0;\nIActionPtr pAction = new TAction<SAnimationContext>(priority, id);\n```", "```cs\nIActionController *pActionController = GetAnimatedCharacter()->GetActionController();\n\npActionController->Queue(pAction);\n```", "```cs\nSAnimationContext *pAnimationContext = pActionController->GetContext();\n\nTagID tagId = pAnimationContext->state.GetDef().Find(name);\nCRY_ASSERT(tagId != TAG_ID_INVALID);\n```", "```cs\nSAnimationContext *pAnimContext = pActionController->GetContext();\n\nbool enable = true;\npAnimContext->state.Set(tagId, enable);\n```", "```cs\nIAction::EStatus CUpdatedAction::Update(float timePassedSeconds)\n{\n  TBase::Update(timePassedSeconds);\n\n  const IScope &rootScope = GetRootScope();\n  if(rootScope.IsDifferent(m_fragmentID, m_fragTags))\n  {\n    SetFragment(m_fragmentID, m_fragTags);\n  }\n\n  return m_eStatus;\n}\n```", "```cs\npActionController->SetFlag(AC_DebugDraw, g_pGameCVars->pl_debugMannequin != 0);\n```", "```cs\nIActionController *m_pActionController;\nSAnimationContext *m_pAnimationContext;\n```", "```cs\n// Mannequin Initialization\nIMannequin &mannequinInterface = gEnv->pGame->GetIGameFramework()->GetMannequinInterface();\nIAnimationDatabaseManager &animationDBManager = mannequinInterface.GetAnimationDatabaseManager();\n```", "```cs\nconst SControllerDef *pControllerDef = animationDBManager.LoadControllerDef(\"Animations/Mannequin/ADB/myControllerDefinition.xml\");\n```", "```cs\nm_pAnimationContext = new SAnimationContext(*pControllerDef);\n```", "```cs\nm_pActionController = mannequinInterface.CreateActionController(pEntity, *m_pAnimationContext);\n```", "```cs\nconst TagID mainContextId = m_pAnimationContext->controllerDef.m_scopeContexts.Find(\"Char3P\");\n\nCRY_ASSERT(mainContextId != TAG_ID_INVALID);\n```", "```cs\nconst IAnimationDatabase *pAnimationDatabase = animationDBManager.Load(\"Animations/Mannequin/ADB/myAnimDB.adb\");\n```", "```cs\nm_pActionController->SetScopeContext(mainContextId, *pEntity, pCharacterInstance, pAnimationDatabase);\n```"]