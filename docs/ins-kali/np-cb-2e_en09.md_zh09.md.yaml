- en: Chapter 9. Speeding Up Code with Cython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：使用 Cython 加速代码
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下秘籍：
- en: Installing Cython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Cython
- en: Building a Hello World program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 HelloWorld 程序
- en: Using Cython with NumPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合使用 Cython 与 NumPy
- en: Calling C functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用 C 函数
- en: Profiling the Cython code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析 Cython 代码
- en: Approximating factorials with Cython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用 Cython 近似阶乘
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Cython** is a relatively young programming language based on Python. It allows
    coders to mix the speed of C with the power of Python. The difference with Python
    is that we can optionally declare static types. Many programming languages, such
    as C, have static typing, which means that we have to tell C the type of variables,
    function parameters, and return value types. Another difference is that C is a
    compiled language, while Python is an interpreted language. As a rule of thumb,
    we can say that C is faster but less flexible than Python. From Cython code, we
    can generate C or C++ code. After that we can compile the generated code into
    Python extension modules.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cython** 是基于 Python 的相对年轻的编程语言。 它允许编码人员将 C 的速度与 Python 的功能混合在一起。 与 Python
    的区别在于我们可以选择声明静态类型。 许多编程语言（例如 C）具有静态类型，这意味着我们必须告诉 C 变量的类型，函数参数和返回值类型。 另一个区别是 C
    是一种编译语言，而 Python 是一种解释语言。 根据经验，可以说 C 比 Python 更快，但灵活性更低。 通过 Cython 代码，我们可以生成 C
    或 C++ 代码。 之后，我们可以将生成的代码编译为 Python 扩展模块。'
- en: In this chapter, you will learn about Cython. We will get some simple Cython
    programs running together with NumPy. Also, we will profile Cython code.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习 Cython。 我们将获得一些与 NumPy 一起运行的简单 Cython 程序。 另外，我们将介绍 Cython 代码。
- en: Installing Cython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Cython
- en: In order to use Cython, we need to install it. The Enthought Canopy, Anaconda,
    and Sage distributions include Cython. For more information, see [https://www.enthought.com/products/canopy/](https://www.enthought.com/products/canopy/),
    [https://store.continuum.io/cshop/anaconda/](https://store.continuum.io/cshop/anaconda/),
    and [http://sagemath.org/](http://sagemath.org/). We will not discuss here how
    to install these distributions. Obviously, we need a C compiler to compile the
    generated C code. On some operating systems such as Linux, the compiler will already
    be present. In this recipe, we will assume that you already have the compiler
    installed.
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Cython，我们需要安装它。 Enthought Canopy，Anaconda 和 Sage 发行版包括 Cython。 有关更多信息，请参见[`www.enthought.com/products/canopy`](https://www.enthought.com/products/canopy/)，[`store.continuum.io/cshop/anaconda`](https://store.continuum.io/cshop/anaconda/)和[`sagemath.org`](http://sagemath.org/)。
    我们将不在这里讨论如何安装这些发行版。 显然，我们需要一个 C 编译器来编译生成的 C 代码。 在某些操作系统（例如 Linux）上，编译器将已经存在。 在本秘籍中，我们将假定您已经安装了编译器。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We can install Cython using any of the following methods:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下任何一种方法来安装  Cython：
- en: 'Install Cython from a source archive by performing the following steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过执行以下步骤从源存档中安装 Cython ：
- en: Download a source archive from [http://cython.org/#download](http://cython.org/#download).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '从[`cython.org/#download`](http://cython.org/#download)下载源归档文件。'
- en: Unpack it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开包装。
- en: Browse to the directory using the `cd` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`cd`命令浏览到目录。
- en: 'Run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install Cython from the PyPI repository with any one of these commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下任一命令从 PyPI 仓库安装 Cython：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Install Cython on Windows using the unofficial Windows installers from [http://www.lfd.uci.edu/~gohlke/pythonlibs/#cython](http://www.lfd.uci.edu/~gohlke/pythonlibs/#cython).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自[`www.lfd.uci.edu/~gohlke/pythonlibs/#cython`](http://www.lfd.uci.edu/~gohlke/pythonlibs/#cython)的非官方 Windows 安装程序，在 Windows
    上安装 Cython。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant Cython online documentation is at [http://docs.cython.org/src/quickstart/install.html](http://docs.cython.org/src/quickstart/install.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的 Cython 在线文档位于[`docs.cython.org/src/quickstart/install.html`](http://docs.cython.org/src/quickstart/install.html)'
- en: Building a Hello World program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 HelloWorld 程序
- en: As is the tradition with programming languages, we will start with a Hello World
    example. Unlike Python, we need to compile Cython code. We start with a `.pyx`
    file, from which we will generate C code. This `.c` file can be compiled and then
    imported into a Python program.
  prefs: []
  type: TYPE_NORMAL
  zh: 与编程语言的传统一样，我们将从 HelloWorld 示例开始。 与 Python 不同，我们需要编译 Cython 代码。 我们从`.pyx`文件开始，然后从中生成
    C 代码。 可以编译此`.c`文件，然后将其导入 Python 程序中。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'This section describes how to build a Cython Hello World program:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍如何构建 Cython HelloWorld 程序：
- en: 'First, write some pretty simple code that prints `Hello World`. This is just
    normal Python code, but the file has the `pyx` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，编写一些非常简单的代码以显示`Hello World`。 这只是普通的 Python 代码，但文件具有`pyx`扩展名：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file named `setup.py` to help build the Cython code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setup.py`的文件来帮助构建 Cython 代码：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we specified the file from the previous step and gave our application
    a name.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在上一步中指定了文件，并为应用命名。
- en: 'Build using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令进行构建：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This generates C code, compiles it for your platform, and produces the following
    output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成 C 代码，将其编译为您的平台，并产生以下输出：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can import our module with the following statement:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下语句导入模块：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: In this recipe, we created a traditional Hello World example. Cython is a compiled
    language, so we need to compile our code. We wrote a `.pyx` file containing the
    `Hello World` code and a `setup.py` file used to generate and build the C code.
  prefs: []
  type: TYPE_NORMAL
  zh: 在此秘籍中，我们创建了一个传统的 HelloWorld 示例。 Cython 是一种编译语言，因此我们需要编译代码。 我们编写了一个包含`Hello World`代码的`.pyx`文件和一个用于生成和构建
    C 代码的`setup.py`文件。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant Cython online documentation is at [http://docs.cython.org/src/quickstart/build.html](http://docs.cython.org/src/quickstart/build.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的 Cython 的在线文档位于[`docs.cython.org/src/quickstart/build.html`](http://docs.cython.org/src/quickstart/build.html)'
- en: Using Cython with NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合使用 Cython 与 NumPy
- en: 'We can integrate Cython and NumPy code in the same way we can integrate Cython
    and Python code. Let''s go through an example that analyzes the ratio of up days
    (days on which a stock closes higher than the previous day) for a stock. We will
    apply the formula for binomial proportion confidence. You can refer to [http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval](http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval)
    for more information. The following formula indicates how significant the ratio
    is:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以集成 Cython 和 NumPy 代码，就像可以集成 Cython 和 Python 代码一样。 让我们来看一个示例，该示例分析股票的上涨天数（股票收盘价高于前一日的天数）的比率。
    我们将应用二项式比值置信度的公式。 您可以参考[`en.wikipedia.org/wiki/Binomial_proportion_confidence_interval`](http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval)了解更多信息。
    以下公式说明该比率的重要性：
- en: '![Using Cython with NumPy](img/0945OS_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![结合使用 Cython 与 NumPy](img/0945OS_09_04.jpg)'
- en: In the formula, **p** is the probability and **n** is the number of observations.
  prefs: []
  type: TYPE_NORMAL
  zh: 式中，`p`是概率，`n`是观察数。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'This section describes how to use Cython with NumPy, with the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过以下步骤介绍如何将 Cython 与 NumPy 结合使用：
- en: 'Write a `.pyx` file that contains a function that calculates the ratio of up
    days and the associated confidence. First, this function computes the differences
    between the prices. Then, it counts the number of positive differences, giving
    us a ratio for the proportion of up days. Finally, apply the formula for confidence
    from the Wikipedia page in the introduction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`.pyx`文件，其中包含一个函数，该函数可计算上升天数的比率和相关的置信度。 首先，此函数计算价格之间的差异。 然后，它计算出正差的数量，从而得出上升天数的比率。
    最后，在引言中的维基百科页面上应用置信度公式：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Use the `setup.py` file from the previous example as a template. Change the
    obvious things, such as the name of the `.pyx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上一个示例中的`setup.py`文件作为模板。 更改明显的内容，例如`.pyx`文件的名称：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can now build; see the previous recipe for more details.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以建立； 有关更多详细信息，请参见前面的秘籍。
- en: 'After building, use the Cython module from the previous step by importing.
    We will write a Python program that downloads stock price data with `matplotlib`.
    Then we''ll apply the `confidence()` function to the close prices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建后，通过导入使用上一步中的 Cython 模块。 我们将编写一个 Python 程序，使用`matplotlib`下载股价数据。 然后我们将`confidence()`函数应用于收盘价：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the program for AAPL is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`AAPL`程序的输出如下：'
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We computed the probability of an up day for AAPL shares and the corresponding
    confidence. We put NumPy code in a `.pyx` file and built it just as in the previous
    tutorial—by creating a Cython module. At the end, we imported and used the Cython
    module.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算了`APL`股价上涨的可能性和相应的置信度。 我们通过创建  Cython 模块，将 NumPy 代码放入`.pyx`文件中，并按照上一教程中的步骤进行构建。
    最后，我们导入并使用了 Cython 模块。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant Cython online documentation is at [http://docs.cython.org/src/tutorial/numpy.html](http://docs.cython.org/src/tutorial/numpy.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的 Cython 在线文档位于[`docs.cython.org/src/tutorial/numpy.html`](http://docs.cython.org/src/tutorial/numpy.html)'
- en: Calling C functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用 C 函数
- en: We can call C functions from Cython. In this example, we call the C `log()`
    function. This function works on a single number only. Remember that the NumPy
    `log()` function can also work with arrays. We will compute the so-called log
    returns of stock prices.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 Cython 调用 C 函数。 在此示例中，我们调用 C `log()`函数。 此函数仅适用于单个数字。 请记住，NumPy `log()`函数也可以与数组一起使用。
    我们将计算股票价格的所谓对数回报。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We start by writing some Cython code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先编写一些 Cython 代码：
- en: 'First, import the C `log()` function from the `libc` namespace. Then, apply
    this function to numbers in a `for` loop. Finally, use the NumPy `diff()` function
    to get the first-order difference between the log values in the second step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从`libc`命名空间导入 C 的`log()`函数。 然后，将此函数应用于`for`循环中的数字。 最后，使用 NumPy `diff()`函数在第二步中获取对数值之间的一阶差：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Building has been covered in the previous recipes. We only need to change some
    values in the `setup.py` file.
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的秘籍中已经介绍了架构。 我们只需要更改`setup.py`文件中的某些值。
- en: 'Again, download the stock price data with `matplotlib`. Apply the Cython `logrets()`
    function you just created on the prices and plot the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用 Matplotlib 下载股价数据。 应用您刚刚在价格上创建的 Cython `logrets()`函数并绘制结果：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The resulting plot of the log returns for AAPL looks like what is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 的`AAPL`对数回报结果图类似于以下屏幕截图所示：
- en: '![How to do it...](img/0945OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945OS_09_01.jpg)'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We called the C `log()` function from Cython code. The function, together with
    NumPy functions, was used to calculate log returns of stocks. In this way, we
    can create our own specialized API containing convenience functions. The nice
    thing is that our code should perform at or near the speed of C code, while looking
    more or less like Python code.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 Cython 代码中调用了 C `log()`函数。 该函数与 NumPy 函数一起用于计算股票的对数收益。 这样，我们可以创建自己的包含便利函数的专用
    API。 令人高兴的是，我们的代码应该或多或少地像 Python 代码一样，以与 C 代码差不多的速度执行。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant Cython online documentation is at [http://docs.cython.org/src/tutorial/external.html](http://docs.cython.org/src/tutorial/external.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的 Cython 在线文档位于[`docs.cython.org/src/tutorial/external.html`](http://docs.cython.org/src/tutorial/external.html)'
- en: Profiling the Cython code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析 Cython 代码
- en: 'We will profile Cython and NumPy code that tries to approximate the Euler constant
    with the following formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下公式对  Cython 和 NumPy 代码进行剖析，这些代码试图近似于欧拉常数：
- en: '![Profiling the Cython code](img/0945OS_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![分析 Cython 代码](img/0945OS_09_05.jpg)'
- en: See [http://en.wikipedia.org/wiki/E_%28mathematical_constant%29](http://en.wikipedia.org/wiki/E_%28mathematical_constant%29)
    for more background information.
  prefs: []
  type: TYPE_NORMAL
  zh: '有关更多背景信息，请参见[`en.wikipedia.org/wiki/E_%28mathematical_constant%29`](http://en.wikipedia.org/wiki/E_%28mathematical_constant%29)。'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'This section demonstrates how to profile Cython code with the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本节演示如何通过以下步骤来分析 Cython 代码：
- en: 'For the NumPy approximation of e, follow these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`e`的 NumPy 近似值，请按照下列步骤操作：
- en: First, we will create an array of `1` to `n` (`n` is `40` in our example).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个`1`到`n`的数组（在我们的示例中`n`是`40`）。
- en: 'Then we will compute the cumulative product of this array, which happens to
    be the factorial. After that, we take the reciprocal of the factorials. Finally,
    we apply the formula from the Wikipedia page. At the end, we put the standard
    profiling code, giving us the following program:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将计算该数组的累积乘积，该乘积恰好是阶乘。 在那之后，我们采取阶乘的倒数。 最后，我们从维基百科页面应用公式。 最后，我们放入标准配置代码，为我们提供以下程序：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The profiling output and the result for the *e* approximation are shown in
    the following snippet. Refer to [Chapter 7](ch07.xhtml "Chapter 7. Profiling and
    Debugging"), *Profiling and Debugging*, for more information about the profiling
    output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段显示了`e`的近似值的分析输出和结果。 有关概要分析输出的更多信息，请参见第 7 章，“分析和调试”。
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The Cython code uses the same algorithm as shown in the previous step, but
    the implementation is different. There are less convenience functions, and we
    actually need a `for` loop now. Also, we need to specify types for some of the
    variables. The code for the `.pyx` file is shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cython 代码使用与上一步所示相同的算法，但是实现方式不同。 便利函数较少，实际上我们现在需要一个`for`循环。 另外，我们需要为某些变量指定类型。
    `.pyx`文件的代码如下所示：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following Python program imports the Cython module and does some profiling:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Python 程序导入 Cython 模块并进行一些分析：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is the profiling output of the Cython code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Cython 代码的分析输出：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We profiled NumPy and Cython code. NumPy is heavily optimized for speed, so
    we should not be surprised that both NumPy and Cython programs are high-performing
    programs. However, when comparing the total time for 2,000 runs of the approximation
    code, we realize that NumPy needs 0.016 seconds while Cython only takes 0.001
    seconds. Obviously, the actual times depend on your hardware, operating system,
    and other factors, such as other processes running on your machine. Also, the
    speedup depends on the type of code, but I hope you agree that as a rule of thumb,
    Cython code is faster.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分析了 NumPy 和 Cython 代码。 NumPy 已针对速度进行了优化，因此 NumPy 和 Cython 程序都是高性能程序，我们对此不会感到惊讶。
    但是，当比较 2,000 次近似代码的总时间时，我们意识到  NumPy 需要 0.016 秒，而 Cython 仅需要 0.001 秒。 显然，实际时间取决于硬件，操作系统和其他因素，例如计算机上运行的其他进程。
    同样，提速取决于代码类型，但我希望您同意，根据经验，Cython 代码会更快。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant Cython online documentation is at [http://docs.cython.org/src/tutorial/profiling_tutorial.html](http://docs.cython.org/src/tutorial/profiling_tutorial.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的 Cython 在线文档位于[`docs.cython.org/src/tutorial/profiling_tutorial.html`](http://docs.cython.org/src/tutorial/profiling_tutorial.html)'
- en: Approximating factorials with Cython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cython 的近似阶乘
- en: 'The last example is about approximating factorials with Cython. We will use
    two approximation methods. First, we will apply the Stirling approximation method
    (see [http://en.wikipedia.org/wiki/Stirling%27s_approximation](http://en.wikipedia.org/wiki/Stirling%27s_approximation)
    for more information). The formula for the Stirling approximation is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例是 Cython 的近似阶乘。 我们将使用两种近似方法。 首先，我们将应用斯特林近似方法（见[`en.wikipedia.org/wiki/Stirling%27s_approximation`](http://en.wikipedia.org/wiki/Stirling%27s_approximation)）。
    斯特林近似的公式如下：
- en: '![Approximating factorials with Cython](img/0945OS_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Cython 近似阶乘](img/0945OS_09_06.jpg)'
- en: 'Secondly, we will use the approximation due to Ramanujan, with the following
    formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们将使用拉曼纽扬（Ramanujan）的近似值，并使用以下公式：
- en: '![Approximating factorials with Cython](img/0945OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Cython 近似阶乘](img/0945OS_09_03.jpg)'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'This section describes how to approximate factorials using Cython. In this
    recipe, we use types, which are optional in Cython, as you may remember. In theory,
    declaring static types should speed things up. Static typing offers interesting
    challenges that you may not encounter when writing Python code, but don''t worry;
    we will try to keep it simple:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍如何使用 Cython 近似阶乘。 您可能还记得，在本秘籍中，我们使用在 Cython 中可选的类型。 从理论上讲，声明静态类型应加快速度。 静态类型化提供了一些有趣的挑战，这些挑战在编写
    Python 代码时可能不会遇到，但请不要担心。 我们将尝试使其简单：
- en: 'The Cython code that we will write looks like regular Python code, except that
    we declare function parameters and a local variable to be an `ndarray` array.
    In order to get the static types to work, we need to `cimport` NumPy. Also, we
    have to use the `cdef` keyword to declare the type of the local variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了将函数参数和一个局部变量声明为`ndarray`数组外，我们将编写的 Cython 代码类似于常规的 Python 代码。 为了使静态类型起作用，我们需要`cimport`
    NumPy。 另外，我们必须使用`cdef`关键字声明局部变量的类型：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Building requires us to create a `setup.py` file, as was shown in the previous
    tutorials, but we now include NumPy-related directories by calling the `get_include()`
    function. With this amendment, the `setup.py` file has the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如先前的教程所示，构建需要我们创建一个`setup.py`文件，但是现在我们通过调用`get_include()`函数来包含与 NumPy 相关的目录。
    通过此修订，`setup.py`文件具有以下内容：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Plot the relative error for both the approximation methods. Calculate the error
    relative to the factorial values that we will compute with the NumPy `cumprod()`
    function, as we did throughout the book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制两种近似方法的相对误差。 像我们在整本书中所做的那样，将使用 NumPy `cumprod()`函数计算相对于阶乘值的误差：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following plot shows the relative error for the Ramanujan approximation
    (dots) and the Stirling approximation (line):'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了拉曼纽扬近似值（点）和斯特林近似值（线）的相对误差：
- en: '![How to do it...](img/0945OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945OS_09_02.jpg)'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'In this example, we saw a demonstration of Cython''s static types. The main
    ingredients of this recipe were the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们看到了 Cython 静态类型的演示。 该秘籍的主要成分如下：
- en: '`cimport`, which imports C declarations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cimport`，它导入 C 声明'
- en: Including directories with the `get_include()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含具有`get_include()`函数的目录
- en: The `cdef` keyword, used to define the type of local variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cdef`关键字，用于定义局部变量的类型'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The relevant Cython online documentation is at [http://docs.cython.org/src/quickstart/cythonize.html](http://docs.cython.org/src/quickstart/cythonize.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '相关的 Cython 在线文档位于[`docs.cython.org/src/quickstart/cythonize.html`](http://docs.cython.org/src/quickstart/cythonize.html)'
