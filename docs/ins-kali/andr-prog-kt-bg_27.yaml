- en: Chapter 27. Android Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第27章。Android数据库
- en: If we are going to make apps that offer our users significant features, then
    almost certainly we are going to need a way to manage, store, and filter significant
    amounts of data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要制作具有重要功能的应用程序，几乎可以肯定我们需要一种方式来管理、存储和过滤大量数据。
- en: It is possible to efficiently store very large amounts of data with JSON, but
    when we need to use that data selectively rather than simply restricting ourselves
    to the options of "save everything" and "load everything", we need to think about
    which other options are available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSON可以高效地存储大量数据，但当我们需要有选择地使用数据而不仅仅限制在“保存所有”和“加载所有”的选项时，我们需要考虑其他可用的选项。
- en: A good computer science course would probably teach the algorithms necessary
    for handling the sorting and filtering our data, but the effort involved would
    be quite extensive, and what are the chances of us coming up with a solution that
    is as good as the people who provide us with the Android API?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的计算机科学课程可能会教授处理数据排序和过滤所需的算法，但涉及的工作量会相当大，我们能否想出与为我们提供Android API的人一样好的解决方案呢？
- en: So often, it makes sense to use the solutions provided in the Android API. As
    we have seen, `JSON` and `SharedPreferences` classes have their place but at some
    point, we need to move on to using real databases for real-world solutions. Android
    uses the SQLite database management system and, as you would expect, there is
    an API to make it as easy as possible.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通常情况下，使用Android API中提供的解决方案是有意义的。正如我们所见，`JSON`和`SharedPreferences`类有其用途，但在某个时候，我们需要转向使用真正的数据库来解决现实世界的问题。Android使用SQLite数据库管理系统，而且如你所期望的那样，有一个API可以尽可能地简化它。
- en: 'In this chapter, we will do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Find out exactly what a database is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确切地了解什么是数据库
- en: Learn what SQL and SQLite are
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习SQL和SQLite是什么
- en: Learn the basics of the SQL language
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习SQL语言的基础知识
- en: Take a look at the Android SQLite API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Android SQLite API
- en: Code the Age Database app that we started in the previous chapter
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写上一章开始的Age Database应用程序
- en: Database 101
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库101
- en: Let's answer a whole bunch of those database-related questions, and then we
    can get started making apps that use SQLite.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回答一大堆与数据库相关的问题，然后我们就可以开始制作使用SQLite的应用程序。
- en: So, what is a database?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是数据库？
- en: What is a database?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是数据库？
- en: A **database** is both a place of storage and the means to retrieve, store,
    and manipulate data. It helps to be able to visualize a database before learning
    how to use it. The actual structure of the internals of a database varies greatly
    depending upon the database in question. SQLite actually stores all its data in
    a single file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据库**既是一个存储的地方，也是检索、存储和操作数据的手段。在学习如何使用数据库之前，能够形象地想象一个数据库是很有帮助的。实际上，数据库内部的结构因所涉及的数据库而异。SQLite实际上将所有数据存储在一个单独的文件中。'
- en: It will aid our comprehension greatly however if we visualize our data as if
    it were in a spreadsheet, or sometimes, multiple spreadsheets. Our database, like
    a spreadsheet, will be divided into multiple columns that represent different
    types of data, and rows that represent entries into the database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们将数据想象成电子表格，有时是多个电子表格，我们的理解将会大大有助。我们的数据库，就像电子表格一样，将被划分为代表不同类型数据的多个列，以及代表数据库条目的行。
- en: 'Think about a database with names and exam scores. Take a look at this visual
    representation of this data for how we could imagine it in a database:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个包含姓名和考试成绩的数据库。看一下这个数据的可视化表示，我们可以想象它在数据库中的样子：
- en: '![What is a database?](img/B12806_27_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![什么是数据库？](img/B12806_27_01.jpg)'
- en: Notice, however, that there is an extra column of data—an **ID** column. We
    will talk more about this as we proceed. This single spreadsheet-like structure
    is called a **table**. As mentioned before, there might be, and often are, multiple
    tables in a database. Each column of the table will have a name that can be referred
    to when speaking to the database. When we ask the database questions, we say that
    we are **querying** the database.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而请注意，这里有一列额外的数据——一个**ID**列。随着我们的学习，我们将会更多地讨论这个。这种类似电子表格的结构被称为**表**。如前所述，数据库中可能有多个表。表的每一列都有一个名称，可以在与数据库交互时引用。当我们向数据库提问时，我们说我们正在**查询**数据库。
- en: What is SQL?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SQL？
- en: '**SQL** stands for **Structured Query Language**. It is the syntax that is
    used to get things done with the database.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL**代表**结构化查询语言**。这是用于与数据库进行交互的语法。'
- en: What is SQLite?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SQLite？
- en: SQLite is the name of the entire database system that is favored by Android,
    and it has its own version of SQL. The reason the SQLite version of SQL needs
    to be slightly different to some other versions is because the database has different
    features.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是Android所青睐的整个数据库系统的名称，它有自己的SQL版本。SQLite版本的SQL需要稍微不同是因为数据库具有不同的特性。
- en: The SQL syntax primer that follows will focus on the SQLite version.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的SQL语法基础知识将专注于SQLite版本。
- en: The SQL syntax primer
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL语法基础知识
- en: Before we can learn how to use SQLite with Android, we need to first learn the
    basics of how to use SQLite in general, in a platform-neutral context.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何在Android中使用SQLite之前，我们需要首先学习如何在通用平台上使用SQLite的基础知识。
- en: Let's look at some example SQL code that could be used on an SQLite database
    directly, without any Kotlin or Android classes, and then we can more easily understand
    what our Kotlin code is doing later on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些示例SQL代码，可以直接在SQLite数据库上使用，而不需要任何Kotlin或Android类，然后我们可以更容易地理解我们的Kotlin代码在后续的操作中在做什么。
- en: SQLite example code
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLite示例代码
- en: 'SQL has keywords, much like Kotlin, that cause things to happen. Here is a
    flavor of some of the SQL keywords we will soon be using:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SQL有关键字，就像Kotlin一样，会引发一些事件发生。以下是我们很快将要使用的一些SQL关键字的示例：
- en: '`INSERT`: Allows us to add data to the database'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSERT`：允许我们向数据库中添加数据'
- en: '`DELETE`: Allows us to remove data from the database'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：允许我们从数据库中删除数据'
- en: '`SELECT`: Allows us to read data from the database'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SELECT`：允许我们从数据库中读取数据'
- en: '`WHERE`: Allows us to specify the parts of the database that match specific
    criteria we want to `INSERT`, `DELETE,` or `SELECT` from'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WHERE`：允许我们指定与我们想要从中`INSERT`、`DELETE`或`SELECT`的特定条件匹配的数据库部分'
- en: '`FROM`: Used for specifying a table or column name in a database'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM`：用于指定数据库中的表或列名'
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are many more SQLite keywords than this and, for a comprehensive list,
    take a look at this link: [https://sqlite.org/lang_keywords.html](https://sqlite.org/lang_keywords.html).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite关键字远不止这些，要获得全面的列表，请查看此链接：[https://sqlite.org/lang_keywords.html](https://sqlite.org/lang_keywords.html)。
- en: 'In addition to keywords, SQL has **types**. Some examples of SQL types are
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了关键字，SQL还有**类型**。一些SQL类型的示例如下：
- en: '**integer**: Just what we need for storing whole numbers'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**integer**：正是我们存储整数所需的'
- en: '**text**: Perfect for storing a simple name or address'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**text**：非常适合存储简单的名称或地址'
- en: '**real**: For large floating-point numbers'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**real**：用于大型浮点数'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are many more SQLite types than this and, for a comprehensive list, take
    a look at this link: [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite类型远不止这些，要获得全面的列表，请查看此链接：[https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html)。
- en: Let's look at how we can combine those types with keywords to create tables,
    and add, remove, modify, and read data, using full SQLite statements.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何结合这些类型和关键字来创建表，并使用完整的SQLite语句添加、删除、修改和读取数据。
- en: Creating a table
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建表
- en: 'It would be a perfectly decent question to ask why we don''t first create a
    new database. The reason for this is that every app has access to an SQLite database
    by default. The database is private to that app. Here is the statement we would
    use to create a table within that database. I have highlighted a few parts to
    make the statement clearer:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完全合理的问题是为什么我们不先创建一个新的数据库。原因是每个应用程序默认都可以访问SQLite数据库。该数据库对该应用程序是私有的。以下是我们将使用的语句在该数据库中创建表。我已经突出显示了一些部分，以使语句更清晰：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous code creates a table called `StudentsAndGrades` with an **integer**
    row **id** that will be automatically increased (incremented) each time a row
    of data is added.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码创建了一个名为`StudentsAndGrades`的表，其中有一个**integer**行**id**，每次添加一行数据时都会自动增加（递增）。
- en: The table will also have a `name` column that will be of the `text` type and
    cannot be blank (`not null`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该表还将有一个`name`列，类型为`text`，不能是空的（`not null`）。
- en: It will also have a `score` column that will be of the `int` type. Also, notice
    that the statement is completed by a semicolon.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将有一个`score`列，类型为`int`。另外，请注意语句以分号结束。
- en: Inserting data into the database
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向数据库插入数据
- en: 'Here is how we might insert a new row of data into that database:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何向该数据库插入新的数据行：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code added a row to the database. After the preceding statement,
    the database will have one entry with the values (1, "Bart", 23) for the columns
    (_ID, name, and score).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码向数据库添加了一行。在前面的语句之后，数据库将有一个条目，其值为（1、"Bart"、23），对应列为（_ID、name和score）。
- en: 'Here is how we might insert another new row of data into that database:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何向该数据库插入另一行新数据：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous code added a new row of data with the values (2, "Lisa", 100) for
    the columns (_ID, name, and score).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码为列（_ID、name和score）添加了新的数据行（2、"Lisa"、100）。
- en: 'Our spreadsheet-like structure would now look like the following diagram:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们类似电子表格的结构现在看起来像下面的图表：
- en: '![Inserting data into the database](img/B12806_27_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![向数据库插入数据](img/B12806_27_02.jpg)'
- en: Retrieving data from the database
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从数据库中检索数据
- en: 'Here is how we would access all the rows and columns from our database:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们如何从数据库中访问所有行和列：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous code asks for every row and column. The `*` symbol can be read
    as **all**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码要求每一行和每一列。`*`符号可以读作**all**。
- en: 'We can also be a little more selective, as the following code demonstrates:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以更加选择性，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous code would only return `100`, which, of course, is the score associated
    with the name Lisa.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码只会返回`100`，当然，这是与名称Lisa相关联的分数。
- en: Updating the database structure
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新数据库结构
- en: 'We can even add new columns after the table has been created and the data added.
    This is simple as far as the SQL is concerned, but can cause some issues with
    regard to a user''s data on already-published apps. The next statement adds a
    new column called `age` that is of the `int` type:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以在创建表并添加数据后添加新列。就SQL而言，这很简单，但可能会对已发布的应用程序中用户的数据造成一些问题。下一个语句添加了一个名为`age`的新列，类型为`int`：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are many more data types, keywords, and ways to use them than we have
    seen so far. Next, let's look at the Android SQLite API, and we will begin to
    see how we can use our new SQLite skills.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型、关键字和使用它们的方式远不止我们迄今所见。接下来，让我们看看Android SQLite API，我们将开始看到如何使用我们的新的SQLite技能。
- en: The Android SQLite API
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android SQLite API
- en: There are a number of different ways in which the Android API makes it fairly
    easy to use our app's database. The first class we need to get familiar with is
    `SQLiteOpenHelper`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Android API以多种方式使我们相当容易地使用应用程序的数据库。我们需要熟悉的第一个类是`SQLiteOpenHelper`。
- en: SQLiteOpenHelper and SQLiteDatabase
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLiteOpenHelper和SQLiteDatabase
- en: The `SQLiteDatabase` class is the class that represents the actual database.
    The `SQLiteOpenHelper` class, however, is where most of the action takes place.
    This class will enable us to get access to a database and initialize an instance
    of `SQLiteDatabase`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`SQLiteDatabase`类是表示实际数据库的类。然而，`SQLiteOpenHelper`类是大部分操作发生的地方。这个类将使我们能够访问数据库并初始化`SQLiteDatabase`的实例。'
- en: In addition, the `SQLiteOpenHelper` class, which we will inherit from in our
    *Age database* app, has two functions to override. First, it has an `onCreate`
    function, which is called the first time a database is used, and it therefore
    makes sense that we would incorporate our SQL in which to create our table structure.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将从中继承的`SQLiteOpenHelper`类在*Age database*应用程序中有两个要重写的函数。首先，它有一个`onCreate`函数，第一次使用数据库时会调用，因此我们会在其中加入我们的SQL以创建表结构是有意义的。
- en: The other function we must override is `onUpgrade`, which, you can probably
    guess, is called when we upgrade our database (`ALTER` its structure).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须重写的另一个函数是`onUpgrade`，您可能已经猜到，当我们升级数据库（`ALTER`其结构）时会调用它。
- en: Building and executing queries
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和执行查询
- en: As our database structures become more complex and as our SQL knowledge grows,
    our SQL statements will get quite long and awkward. The potential for syntax errors
    or typos is high.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据库结构变得更加复杂和我们的SQL知识的增长，我们的SQL语句会变得相当长和笨拙。语法错误或拼写错误的可能性很高。
- en: The way we will help overcome the problem of this complexity is to build our
    queries from parts into a `String`. We can then pass that `String` to the function
    (we will see this soon) that will execute the query for us.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将帮助克服这种复杂性的方法是将查询从各个部分构建成一个`String`。然后我们可以将该`String`传递给执行查询的函数（我们很快就会看到）。
- en: Furthermore, we will use `String` instances to represent things such as table
    and column names, so we can't get in a muddle with them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用`String`实例来表示表和列名称，因此我们不会与它们混淆。
- en: 'For example, we could declare the following `String` instances in a `companion`
    object, which would represent the table name and column names from the fictitious
    example from earlier. Note that we will also give the database itself a name and
    have a `String` for that too:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在`companion`对象中声明以下`String`实例，它们将代表之前虚构示例中的表名和列名。请注意，我们还将为数据库本身命名，并为其也有一个`String`：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We could then build a query like this in the next example. The following example
    adds a new entry to our hypothetical database and incorporates Kotlin variables
    into the SQL statement:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在下一个示例中构建这样的查询。以下示例向我们的假想数据库添加了一个新条目，并将Kotlin变量合并到了SQL语句中：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice that in the previous code, the regular Kotlin variables, `name` and
    `score`, arehighlighted. The previous `String` called `query` is now the SQL statement,
    exactly equivalent to this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的代码中，常规的Kotlin变量`name`和`score`被突出显示。之前的名为`query`的`String`现在是SQL语句，与此完全相同：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is not essential to completely grasp the previous two blocks of code in order
    to proceed with learning Android programming. But, if you want to build your own
    apps and construct SQL statements that do exactly what you need, it *will* help
    to do so. Why not study the previous two blocks of code in order to discern the
    difference between the parts of the `String` joined together with the pairs of
    single quote marks, `'`, that are part of the SQL syntax?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续学习Android编程，不一定要完全掌握前两个代码块。但是，如果您想构建自己的应用程序并构造完全符合您需求的SQL语句，那么理解这两个代码块将有所帮助。为什么不学习前两个代码块，以便分辨出与SQL语法相关的`String`部分之间用单引号`'`连接的差异呢？
- en: Throughout the typing of the query, Android Studio prompts us as to the names
    of our variables, making the chances of an error much less likely, even though
    it is more verbose than simply typing the query.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入查询时，Android Studio会提示我们变量的名称，这样错误的可能性就会大大降低，尽管它比简单输入查询更冗长。
- en: 'Now, we can use the classes we introduced previously to execute the query:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用之前介绍的类来执行查询：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When adding data to the database, we will use `execSQL`, as in the previous
    code, and when getting data from the database, we will use the `rawQuery` function,
    demonstrated as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在向数据库添加数据时，我们将使用`execSQL`，就像之前的代码中一样，而在从数据库获取数据时，我们将使用`rawQuery`函数，如下所示：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that the `rawQuery` function returns an object of `Cursor` type.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`rawQuery`函数返回`Cursor`类型的对象。
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are several different ways in which we can interact with SQLite, and they
    each have their advantages and disadvantages. We have chosen to use raw SQL statements
    as it is entirely transparent as to what we are doing, at the same time as reinforcing
    our knowledge of the SQL language.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与SQLite交互的方式有几种，它们各自都有优缺点。我们选择使用原始SQL语句，因为这样做完全透明，同时加强了我们对SQL语言的了解。
- en: Database cursors
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库游标
- en: In addition to the classes that give us access to the database, and the functions
    that allow us to execute our queries, there is the issue of exactly how the results
    we get back from our queries are formatted.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了让我们访问数据库的类和允许我们执行查询的函数之外，还有一个问题，那就是我们从查询中得到的结果的格式。
- en: 'Fortunately, there is the `Cursor` class. All our database queries will return
    objects of the `Cursor` type. We can use the functions of the `Cursor` class to
    selectively access the data returned from the queries, as in the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有`Cursor`类。我们所有的数据库查询都将返回`Cursor`类型的对象。我们可以使用`Cursor`类的函数有选择地访问从查询返回的数据，就像下面的代码一样：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The previous code would output to the logcat window the two values stored in
    the first two columns of the result that the query returned. It is the `Cursor`
    object itself that determines which row of our returned data we are currently
    reading.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码将在logcat窗口中输出查询返回结果的前两列中存储的两个值。确定我们当前正在读取的返回数据的哪一行是`Cursor`对象本身确定的。
- en: 'We can access various functions of the `Cursor` object, including the `moveToNext`
    function, which, unsurprisingly, would move the `Cursor` to the next row ready
    for reading:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问`Cursor`对象的各种函数，包括`moveToNext`函数，它会将`Cursor`移动到下一行以便读取：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: On certain occasions, we will be able to bind a `Cursor` to a part of our UI
    (such as `RecyclerView`), as we did with an `ArrayList` in the *Note to self*
    app, and just leave everything to the Android API.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们将能够将`Cursor`绑定到我们UI的一部分（例如`RecyclerView`），就像我们在*Note to self*应用程序中使用`ArrayList`一样，并且只需将一切交给Android
    API。
- en: There are many more useful functions in the `Cursor` class, some of which we
    will see soon.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cursor`类中还有许多有用的函数，其中一些我们很快就会看到。'
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This introduction to the Android SQLite API really only scratches the surface
    of its capabilities. We will bump into a few more functions and classes as we
    proceed further. It is, however, worth studying further if your app idea requires
    complex data management.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇介绍Android SQLite API实际上只是触及了它的能力表面。随着我们进一步进行，我们会遇到更多的函数和类。然而，如果您的应用想法需要复杂的数据管理，进一步研究是值得的。
- en: Now, we can see how all this theory comes together and how we will structure
    our database code in the Age Database app.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到所有这些理论是如何结合在一起的，以及我们将如何在Age数据库应用程序中构建我们的数据库代码的结构。
- en: Coding the database class
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写数据库类
- en: Here, we will put into practice everything we have learned so far and finish
    coding the Age database app. Before our `Fragment` classes from the previous section
    can interact with a shared database, we need a class to handle interaction with,
    and creation of, the database.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将把我们迄今学到的一切付诸实践，并完成编写Age数据库应用程序。在我们之前的部分的`Fragment`类可以与共享数据库进行交互之前，我们需要一个处理与数据库的交互和创建的类。
- en: 'We will create a class that manages our database by implementing `SQLiteOpenHelper`.
    It will also define some `String` variables in a `companion object` to represent
    the names of the table and its columns. Furthermore, it will supply a bunch of
    helper functions we can call to perform all the necessary queries. Where necessary,
    these helper functions will return a `Cursor` object that we can use to show the
    data we have retrieved. It would be trivial then to add new helper functions should
    our app need to evolve:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个通过实现`SQLiteOpenHelper`来管理我们的数据库的类。它还将在`companion object`中定义一些`String`变量，以表示表的名称和其列。此外，它将提供一堆辅助函数，我们可以调用这些函数来执行所有必要的查询。在必要时，这些辅助函数将返回一个`Cursor`对象，我们可以用来显示我们检索到的数据。如果我们的应用需要发展，添加新的辅助函数将是微不足道的：
- en: 'Create a new class called `DataManager` and add the companion object, the constructor,
    and the `init` block:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`DataManager`的新类，并添加`companion object`、构造函数和`init`块：
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We discussed the `companion object` in [Chapter 25](ch25.html "Chapter 25. Advanced
    UI with Paging and Swiping"), *Advanced UI with Paging and Swiping*
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第25章](ch25.html "第25章. 使用分页和滑动的高级UI")中讨论了`companion object`，*使用分页和滑动的高级UI*
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I named the database and the table as it could evolve to be an address book
    app that also keeps track of ages and perhaps birthdays.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我将数据库和表命名为可能会发展成一个地址簿应用，还可以跟踪年龄和生日。
- en: The previous code gives us all our handy `String` instances for building our
    queries, and it also declares and initializes our database and helper class.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码为我们提供了构建查询的所有方便的`String`实例，并声明和初始化了我们的数据库和辅助类。
- en: Now, we can add the helper functions we will access from our `Fragment` classes;
    first, the `insert` function, which executes an `INSERT` SQL query based on the
    `name` and `age` parameters passed into the function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以添加我们将从我们的`Fragment`类中访问的辅助函数；首先是`insert`函数，它根据传入函数的`name`和`age`参数执行`INSERT`
    SQL查询。
- en: 'Add the `insert` function to the `DataManager` class:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将`insert`函数添加到`DataManager`类中：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This next function, called `delete`, will delete a record from the database
    if it has a matching value in the `name` column to that of the passed-in `name`
    parameter. It achieves this using the SQL `DELETE` keyword.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个名为`delete`的函数将从数据库中删除记录，如果它在`name`列中具有与传入的`name`参数相匹配的值。它使用SQL的`DELETE`关键字来实现这一点。
- en: 'Add the `delete` function to the `DataManager` class:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将`delete`函数添加到`DataManager`类中：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, we have the `selectAll` function, which also does as the name suggests.
    It achieves this with a `SELECT` query using the `*` parameter, which is equivalent
    to specifying all the columns individually. Also, note that the function returns
    a `Cursor`, which we will use in some of the `Fragment` classes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`selectAll`函数，它也如其名称所示。它使用`SELECT`查询来实现这一点，使用`*`参数，这相当于单独指定所有列。另外，请注意该函数返回一个`Cursor`，我们将在一些`Fragment`类中使用。
- en: 'Add the `selectAll` function to the `DataManager` class as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将`selectAll`函数添加到`DataManager`类中，如下所示：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we add a `searchName` function, which has a `String` parameter for the
    name the user wants to search for. It also returns a `Cursor` object, which will
    contain all the entries that were found. Notice that the SQL statement uses `SELECT`,
    `FROM`, and `WHERE` to achieve this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们添加一个`searchName`函数，它具有一个`String`参数，用于用户想要搜索的名称。它还返回一个`Cursor`对象，其中包含找到的所有条目。请注意，SQL语句使用`SELECT`、`FROM`和`WHERE`来实现这一点：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, for the `DataManager` class, we create an `inner` class that will be
    our implementation of `SQLiteOpenHelper`. It is a barebones implementation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于`DataManager`类，我们创建一个`inner`类，它将是我们的`SQLiteOpenHelper`的实现。这是一个最基本的实现。
- en: We have a constructor that receives a `Context` object, the database name, and
    the database version.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个构造函数，接收一个`Context`对象、数据库名称和数据库版本。
- en: We also override the `onCreate` function, which has the SQL statement that creates
    our database table with `_ID`, `name`, and `age` columns.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还重写了`onCreate`函数，其中包含创建具有`_ID`、`name`和`age`列的数据库表的SQL语句。
- en: The `onUpgrade` function is left intentionally blank for this app, but still
    needs to be present because it is part of the contract when we inherit from `SQLiteOpenHelper`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`onUpgrade`函数在这个应用程序中被故意留空，但仍然需要存在，因为当我们从`SQLiteOpenHelper`继承时，它是合同的一部分。'
- en: 'Add the inner `CustomSQLiteOpenHelper` class to the `DataManager` class:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将内部的`CustomSQLiteOpenHelper`类添加到`DataManager`类中：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we can add code to our `Fragment` classes to use our new `DataManager`
    class.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在我们的`Fragment`类中添加代码来使用我们的新`DataManager`类。
- en: Coding the Fragment classes to use the DataManager class
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Fragment类以使用DataManager类
- en: 'Add this highlighted code to the `InsertFragment` class to update the `onCreateView`
    function, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将此突出显示的代码添加到`InsertFragment`类中，以更新`onCreateView`函数，如下所示：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the code, we get an instance of our `DataManager` class and a reference to
    each of our UI widgets. Then, in the `onClick` function of the button, we use
    the `insert` function to add a new name and age to the database. The values to
    insert are taken from the two `EditText` widgets.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们获取了`DataManager`类的一个实例和每个UI小部件的引用。然后，在按钮的`onClick`函数中，我们使用`insert`函数向数据库添加新的名称和年龄。要插入的值来自两个`EditText`小部件。
- en: 'Add this highlighted code to the `DeleteFragment` class to update the `onCreateView`
    function:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将此突出显示的代码添加到`DeleteFragment`类中，以更新`onCreateView`函数：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `DeleteFragment` class, we create an instance of our `DataManager` class,
    and then get a reference to the `EditText` and the `Button` from our layout. When
    the button is clicked, the `delete` function is called, passing in the value of
    any text from the `EditText`. The delete function searches our database for a
    match and, if one is found, it deletes it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DeleteFragment`类中，我们创建了`DataManager`类的一个实例，然后从布局中获取了`EditText`和`Button`的引用。当点击按钮时，将调用`delete`函数，传入`EditText`中的任何文本值。删除函数会在我们的数据库中搜索匹配项，如果找到，则删除它。
- en: 'Add this highlighted code to the `SearchFragment` class to update the `onCreateView`
    function:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将此突出显示的代码添加到`SearchFragment`类中，以更新`onCreateView`函数：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we do for all our different `Fragment` classes, we create an instance of
    `DataManager` and get a reference to all the different UI widgets in the layout.
    In the `onClick` function of the button, the `searchName` function is used, passing
    in the value from the `EditText`. If the database returns a result in the `Cursor`,
    then the `TextView` uses its `text` property to output the results.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们为所有不同的`Fragment`类所做的一样，我们创建了`DataManager`的一个实例，并获取了布局中所有不同UI小部件的引用。在按钮的`onClick`函数中，使用`searchName`函数，传入`EditText`中的值。如果数据库在`Cursor`中返回结果，那么`TextView`使用其`text`属性来输出结果。
- en: 'Add this highlighted code to the `ResultsFragment` class to update the `onCreateView`
    function:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将此突出显示的代码添加到`ResultsFragment`类中，以更新`onCreateView`函数：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this class, the `Cursor` object is loaded up with data using the `selectAll`
    function before any interactions take place. The contents of the `Cursor` are
    then output into the `TextView` by concatenating the results. The `\n` in the
    concatenation is what creates a new line between each result in the `Cursor`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，在任何交互发生之前，使用`selectAll`函数将`Cursor`对象加载了数据。然后，通过连接结果将`Cursor`的内容输出到`TextView`中。连接中的`\n`是在`Cursor`中的每个结果之间创建新行的内容。
- en: Running the Age Database app
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行年龄数据库应用程序
- en: 'Let''s run through some of the functions of our app to make sure it is working
    as expected. First, I added a new name to the database using the **Insert** menu
    option:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一些我们的应用程序功能，以确保它按预期工作。首先，我使用**插入**菜单选项向数据库添加了一个新名称：
- en: '![Running the Age Database app](img/B12806_27_03.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![运行年龄数据库应用程序](img/B12806_27_03.jpg)'
- en: 'And then, I confirmed it was there by viewing the **Results** option:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我通过查看**结果**选项确认它确实存在：
- en: '![Running the Age Database app](img/B12806_27_04.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![运行年龄数据库应用程序](img/B12806_27_04.jpg)'
- en: 'Then, I used the **Delete** menu option and looked at the **Results** option
    again to check that my chosen name was, in fact, removed:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我使用**删除**菜单选项，再次查看**结果**选项，以检查我选择的名称是否确实被删除了：
- en: '![Running the Age Database app](img/B12806_27_05.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![运行年龄数据库应用程序](img/B12806_27_05.jpg)'
- en: 'Next, I searched for a name that I knew existed to test the **Search** function:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我搜索了一个我知道存在的名称来测试**搜索**功能：
- en: '![Running the Age Database app](img/B12806_27_06.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![运行年龄数据库应用程序](img/B12806_27_06.jpg)'
- en: Let's review what we have done in this chapter.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章中我们所做的事情。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have covered a lot in this chapter. We have learned about databases and,
    in particular, the database of Android apps, SQLite. We have practiced the basics
    of communicating with and querying a database using the SQL language.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容。我们学习了关于数据库，特别是Android应用程序的数据库SQLite。我们练习了使用SQL语言与数据库进行通信和查询的基础知识。
- en: We have seen how the Android API helps us use an SQLite database, and have implemented
    our first working app with a database.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了Android API如何帮助我们使用SQLite数据库，并实现了我们的第一个具有数据库的工作应用程序。
- en: That is just about it, but please look at the brief final chapter that follows.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样了，但请看接下来的简短最终章节。
