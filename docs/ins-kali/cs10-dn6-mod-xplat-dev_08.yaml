- en: 08
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 08
- en: Working with Common .NET Types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用常见的.NET类型
- en: This chapter is about some common types that are included with .NET. These include
    types for manipulating numbers, text, collections, network access, reflection,
    and attributes; improving working with spans, indexes, and ranges; manipulating
    images; and internationalization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了.NET中包含的一些常见类型。这些类型包括用于操作数字、文本、集合、网络访问、反射和属性的类型；改进了使用跨度、索引和范围进行工作；操作图像；以及国际化。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Working with numbers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数字
- en: Working with text
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理文本
- en: Working with dates and times
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理日期和时间
- en: Pattern matching with regular expressions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正则表达式进行模式匹配
- en: Storing multiple objects in collections
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合中存储多个对象
- en: Working with spans, indexes, and ranges
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用跨度、索引和范围进行工作
- en: Working with network resources
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理网络资源
- en: Working with reflection and attributes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用反射和属性进行工作
- en: Working with images
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理图像
- en: Internationalizing your code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化您的代码
- en: Working with numbers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理数字
- en: 'One of the most common types of data is numbers. The most common types in .NET
    for working with numbers are shown in the following table:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的最常见类型之一是数字。 .NET 中用于处理数字的最常见类型如下表所示：
- en: '| Namespace | Example type(s) | Description |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 命名空间 | 示例类型 | 描述 |'
- en: '| `System` | `SByte` , `Int16` , `Int32` , `Int64` | Integers; that is, zero
    and positive and negative whole numbers |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `System` | `SByte` , `Int16` , `Int32` , `Int64` | 整数；即零和正整数和负整数 |'
- en: '| `System` | `Byte` , `UInt16` , `UInt32` , `UInt64` | Cardinals; that is,
    zero and positive whole numbers |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `System` | `Byte` , `UInt16` , `UInt32` , `UInt64` | 无符号整数；即零和正整数 |'
- en: '| `System` | `Half` , `Single` , `Double` | Reals; that is, floating-point
    numbers |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `System` | `Half` , `Single` , `Double` | 实数；即浮点数 |'
- en: '| `System` | `Decimal` | Accurate reals; that is, for use in science, engineering,
    or financial scenarios |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `System` | `Decimal` | 精确的实数；即用于科学、工程或金融场景 |'
- en: '| `System.Numerics` | `BigInteger` , `Complex` , `Quaternion` | Arbitrarily
    large integers, complex numbers, and quaternion numbers |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `System.Numerics` | `BigInteger` , `Complex` , `Quaternion` | 任意大的整数、复数和四元数
    |'
- en: .NET has had the 32-bit float and 64-bit double types since .NET Framework 1.0\.
    The IEEE 754 specification also defines a 16-bit floating point standard. Machine
    learning and other algorithms would benefit from this smaller, lower-precision
    number type so Microsoft introduced the `System.Half` type with .NET 5 and later.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 自 .NET Framework 1.0 以来就有 32 位浮点和 64 位双精度类型。IEEE 754 规范还定义了 16 位浮点标准。机器学习和其他算法将受益于这种更小、低精度的数字类型，因此微软在
    .NET 5 及以后引入了 `System.Half` 类型。
- en: Currently, the C# language does not define a `half` alias so you must use the
    .NET type `System.Half` . This might change in the future.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，C#语言没有定义 `half` 别名，因此必须使用.NET类型 `System.Half` 。这在将来可能会改变。
- en: Working with big integers
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理大整数
- en: The largest whole number that can be stored in .NET types that have a C# alias
    is about eighteen and a half quintillion, stored in an unsigned `long` integer.
    But what if you need to store numbers larger than that?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以存储在具有C#别名的.NET类型中的最大整数约为十八万五千亿，存储在无符号的 `long` 整数中。但如果需要存储比这更大的数字怎么办？
- en: 'Let''s explore numerics:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索数字：
- en: Use your preferred code editor to create a new solution/workspace named `Chapter08`
    .
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建一个名为 `Chapter08` 的新解决方案/工作区。
- en: 'Add a console app project, as defined in the following list:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加控制台应用程序项目，如下列表所示：
- en: 'Project template: **Console Application** / `console`'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Workspace/solution file and folder: `Chapter08`'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`Chapter08`
- en: 'Project file and folder: `WorkingWithNumbers`'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`WorkingWithNumbers`
- en: 'In `Program.cs` , delete the existing statements and add a statement to import
    `System.Numerics` , as shown in the following code:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，删除现有语句并添加一个语句以导入 `System.Numerics` ，如下面的代码所示：
- en: '```cs'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Numerics;
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: System.Numerics;
- en: '```'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to output the maximum value of the `ulong` type, and a number
    with 30 digits using `BigInteger` , as shown in the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以输出 `ulong` 类型的最大值，以及使用 `BigInteger` 输出 30 位数字的数字，如下面的代码所示：
- en: '```cs'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine("Working with large integers:"
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("处理大整数："
- en: );
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("-----------------------------------"
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("-----------------------------------"
- en: );
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: ulong
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ulong
- en: big = ulong
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: big = ulong
- en: .MaxValue;
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: .MaxValue;
- en: WriteLine($"
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{big,'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '{big,'
- en: '40'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '40'
- en: :N0}
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: :N0}
- en: '"'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: BigInteger bigger =
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: BigInteger bigger =
- en: BigInteger.Parse("123456789012345678901234567890"
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: BigInteger.Parse("123456789012345678901234567890"
- en: );
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{bigger,'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '{bigger,'
- en: '40'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '40'
- en: :N0}
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: :N0}
- en: '"'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The `40` in the format code means right-align 40 characters, so both numbers
    are lined up to the right-hand edge. The `N0` means use thousand separators and
    zero decimal places.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 格式代码中的 `40` 表示右对齐 40 个字符，因此两个数字都对齐到右边缘。 `N0` 表示使用千位分隔符和零位小数。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Working with large integers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 处理大整数：
- en: '----------------------------------------'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '----------------------------------------'
- en: 18,446,744,073,709,551,615
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 18,446,744,073,709,551,615
- en: 123,456,789,012,345,678,901,234,567,890
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 123,456,789,012,345,678,901,234,567,890
- en: '```'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Working with complex numbers
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理复数
- en: A complex number can be expressed as *a + bi* , where *a* and *b* are real numbers,
    and *i* is an imaginary unit, where *i* ² *= −1* . If the real part *a* is zero,
    it is a pure imaginary number. If the imaginary part *b* is zero, it is a real
    number.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 复数可以表示为 *a + bi* ，其中 *a* 和 *b* 是实数，*i* 是一个虚数单位，其中 *i* ² *= −1* 。如果实部 *a* 为零，则为纯虚数。如果虚部
    *b* 为零，则为实数。
- en: 'Complex numbers have practical applications in many **STEM** (**science, technology,
    engineering, and mathematics** ) fields of study. Additionally, they are added
    by separately adding the real and imaginary parts of the summands; consider this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 复数在许多**STEM**（**科学、技术、工程和数学**）研究领域有实际应用。此外，它们是通过分别添加和实部和虚部的和数部分而添加的；考虑这个：
- en: '```cs'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: (a + bi) + (c + di) = (a + c) + (b + d)i
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: (a + bi) + (c + di) = (a + c) + (b + d)i
- en: '```'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Let''s explore complex numbers:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索复数：
- en: 'In `Program.cs` , add statements to add two complex numbers, as shown in the
    following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加语句以添加两个复数，如下面的代码所示：
- en: '```cs'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine("Working with complex numbers:"
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("使用复数："
- en: );
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Complex c1 = new
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Complex c1 = new
- en: '(real: 4'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: （实数：4
- en: ', imaginary: 2'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ，虚数：2
- en: );
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: Complex c2 = new
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Complex c2 = new
- en: '(real: 3'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: （实数：3
- en: ', imaginary: 7'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ，虚数：7
- en: );
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: Complex c3 = c1 + c2;
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Complex c3 = c1 + c2;
- en: // output using default ToString implementation
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用默认的ToString实现输出
- en: WriteLine($"
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{c1}'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '{c1}'
- en: added to
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 加上
- en: '{c2}'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '{c2}'
- en: is
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: '{c3}'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '{c3}'
- en: '"'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: // output using custom format
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用自定义格式输出
- en: WriteLine("{0} + {1}i added to {2} + {3}i is {4} + {5}i"
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0} + {1}i 加上 {2} + {3}i 是 {4} + {5}i"
- en: ','
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: c1.Real, c1.Imaginary,
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: c1.Real, c1.Imaginary,
- en: c2.Real, c2.Imaginary,
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: c2.Real, c2.Imaginary,
- en: c3.Real, c3.Imaginary);
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: c3.Real, c3.Imaginary);
- en: '```'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Working with complex numbers:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用复数：
- en: (4, 2) added to (3, 7) is (7, 9)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: （4, 2）加上（3, 7）是（7, 9）
- en: 4 + 2i added to 3 + 7i is 7 + 9i
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 4 + 2i 加上 3 + 7i 是 7 + 9i
- en: '```'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Understanding quaternions
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解四元数
- en: Quaternions are a number system that extends complex numbers. They form a four-dimensional
    associative normed division algebra over the real numbers, and therefore also
    a domain.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 四元数是一种扩展复数的数字系统。它们形成了一个四维的、关联的、规范的、除法代数，覆盖了实数，因此也是一个域。
- en: Huh? Yes, I know. I don't understand that either. Don't worry; we're not going
    to write any code using them! Suffice to say, they are good at describing spatial
    rotations, so video game engines use them, as do many computer simulations and
    flight control systems.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯？是的，我知道。我也不明白。别担心；我们不打算使用它们编写任何代码！可以说，它们擅长描述空间旋转，因此视频游戏引擎使用它们，许多计算机模拟和飞行控制系统也使用它们。
- en: Working with text
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文本
- en: 'One of the other most common types of data for variables is text. The most
    common types in .NET for working with text are shown in the following table:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的另一种最常见的数据类型是文本。在.NET中用于处理文本的最常见类型如下表所示：
- en: '| Namespace | Type | Description |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 命名空间 | 类型 | 描述 |'
- en: '| `System` | `Char` | Storage for a single text character |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `系统` | `Char` | 存储单个文本字符 |'
- en: '| `System` | `String` | Storage for multiple text characters |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `系统` | `String` | 存储多个文本字符 |'
- en: '| `System.Text` | `StringBuilder` | Efficiently manipulates strings |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `System.Text` | `StringBuilder` | 高效操作字符串 |'
- en: '| `System.Text.RegularExpressions` | `Regex` | Efficiently pattern-matches
    strings |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `System.Text.RegularExpressions` | `Regex` | 高效地匹配字符串 |'
- en: Getting the length of a string
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取字符串的长度
- en: 'Let''s explore some common tasks when working with text; for example, sometimes
    you need to find out the length of a piece of text stored in a `string` variable:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些处理文本时常见的任务；例如，有时您需要找出存储在`string`变量中的文本的长度：
- en: 'Use your preferred code editor to add a new console app named `WorkingWithText`
    to the `Chapter08` solution/workspace:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`WorkingWithText`的新控制台应用添加到`Chapter08`解决方案/工作空间中：
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: In Visual Studio Code, select `WorkingWithText` as the active OmniSharp project.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`WorkingWithText`作为活动的OmniSharp项目。
- en: 'In the `WorkingWithText` project, in `Program.cs` , add statements to define
    a variable to store the name of the city London, and then write its name and length
    to the console, as shown in the following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithText`项目中，在`Program.cs`中，添加语句来定义一个变量来存储城市伦敦的名称，然后将其名称和长度写入控制台，如下面的代码所示：
- en: '```cs'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: city = "London"
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: city = "伦敦"
- en: ;
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: WriteLine($"
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{city}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '{城市}'
- en: is
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: '{city.Length}'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '{city.Length}'
- en: characters long."
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 字符长。
- en: );
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: London is 6 characters long.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 伦敦有6个字符长。
- en: '```'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Getting the characters of a string
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取字符串的字符
- en: The `string` class uses an array of `char` internally to store the text. It
    also has an indexer, which means that we can use the array syntax to read its
    characters. Array indexes start at zero, so the third character will be at index
    2.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`string`类在内部使用`char`数组来存储文本。它还有一个索引器，这意味着我们可以使用数组语法来读取它的字符。数组索引从零开始，因此第三个字符将在索引2处。'
- en: 'Let''s see this in action:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的实际效果：
- en: 'Add a statement to write the characters at the first and third positions in
    the `string` variable, as shown in the following code:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个语句，以在`string`变量中的第一个和第三个位置写入字符，如下面的代码所示：
- en: '```cs'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine($"First char is
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"第一个字符是
- en: '{city['
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '{城市['
- en: '0'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: ']}'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ']}'
- en: and third is
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 和第三个是
- en: '{city['
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '{城市['
- en: '2'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: ']}'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ']}'
- en: ."
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '```'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: First char is L and third is n.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符是L，第三个是n。
- en: '```'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Splitting a string
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分割字符串
- en: 'Sometimes, you need to split some text wherever there is a character, such
    as a comma:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要在有字符的地方分割一些文本，比如逗号：
- en: 'Add statements to define a single `string` variable containing comma-separated
    city names, then use the `Split` method and specify that you want to treat commas
    as the separator, and then enumerate the returned array of `string` values, as
    shown in the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来定义一个包含逗号分隔的城市名称的单个`string`变量，然后使用`Split`方法并指定你想要将逗号作为分隔符，然后枚举返回的`string`值数组，如下面的代码所示：
- en: '```cs'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: cities = "Paris,Tehran,Chennai,Sydney,New York,Medellín"
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: cities = "巴黎，德黑兰，金奈，悉尼，纽约，麦德林"
- en: ;
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: string
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '[] citiesArray = cities.Split('','''
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[] citiesArray = cities.Split('','''
- en: );
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"There are
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"数组中有
- en: '{citiesArray.Length}'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '{citiesArray.Length}'
- en: items in the array."
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的项目。
- en: );
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: （字符串
- en: item in
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 项目在
- en: citiesArray)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: citiesArray)
- en: '{'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(item);
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(item);
- en: '}'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: There are 6 items in the array.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中有6个项目。
- en: Paris
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 巴黎
- en: Tehran
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 德黑兰
- en: Chennai
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 金奈
- en: Sydney
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 悉尼
- en: New York
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约
- en: Medellín
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 麦德林
- en: '```'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Later in this chapter, you will learn how to handle more complex scenarios.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，您将学习如何处理更复杂的情况。
- en: Getting part of a string
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取字符串的一部分
- en: 'Sometimes, you need to get part of some text. The `IndexOf` method has nine
    overloads that return the index position of a specified `char` or `string` within
    a `string` . The `Substring` method has two overloads, as shown in the following
    list:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要获取一些文本的一部分。`IndexOf`方法有九个重载，返回指定`char`或`string`在`string`中的索引位置。`Substring`方法有两个重载，如下列表所示：
- en: '`Substring(startIndex, length)` : returns a substring starting at `startIndex`
    and containing the next `length` characters.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Substring(startIndex, length)`：返回从`startIndex`开始并包含接下来的`length`个字符的子字符串。'
- en: '`Substring(startIndex)` : returns a substring starting at `startIndex` and
    containing all characters up to the end of the string.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Substring(startIndex)`：返回从`startIndex`开始并包含直到字符串结束的所有字符的子字符串。'
- en: 'Let''s explore a simple example:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探讨一个简单的例子：
- en: 'Add statements to store a person''s full name in a `string` variable with a
    space character between the first and last name, find the position of the space,
    and then extract the first name and last name as two parts so that they can be
    recombined in a different order, as shown in the following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句将一个人的全名存储在一个带有名字和姓氏之间的空格字符的`string`变量中，找到空格的位置，然后提取名字和姓氏作为两部分，以便它们可以以不同的顺序重新组合，如下代码所示：
- en: '```cs'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: fullName = "Alan Jones"
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: fullName = "Alan Jones"
- en: ;
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: int
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: indexOfTheSpace = fullName.IndexOf(' '
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: indexOfTheSpace = fullName.IndexOf(' '
- en: );
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: firstName = fullName.Substring(
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: firstName = fullName.Substring(
- en: 'startIndex: 0'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'startIndex: 0'
- en: ', length: indexOfTheSpace);'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ', length: indexOfTheSpace);'
- en: string
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: lastName = fullName.Substring(
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: lastName = fullName.Substring(
- en: 'startIndex: indexOfTheSpace + 1'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 'startIndex: indexOfTheSpace + 1'
- en: );
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Original:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"原始：
- en: '{fullName}'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '{fullName}'
- en: '"'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Swapped:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"交换：
- en: '{lastName}'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '{lastName}'
- en: ','
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '{firstName}'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '{firstName}'
- en: '"'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下输出所示：
- en: '```cs'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Original: Alan Jones'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 原始：Alan Jones
- en: 'Swapped: Jones, Alan'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 交换：Jones, Alan
- en: '```'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If the format of the initial full name was different, for example, `"LastName,
    FirstName"` , then the code would need to be different. As an optional exercise,
    try writing some statements that would change the input `"Jones, Alan"` into `"Alan
    Jones"` .
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果初始全名的格式不同，例如`"LastName, FirstName"`，那么代码将需要不同。作为一个可选的练习，尝试编写一些语句，将输入`"Jones,
    Alan"`更改为`"Alan Jones"`。
- en: Checking a string for content
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查字符串的内容
- en: 'Sometimes, you need to check whether a piece of text starts or ends with some
    characters or contains some characters. You can achieve this with methods named
    `StartsWith` , `EndsWith` , and `Contains` :'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要检查一段文本是否以某些字符开头或结尾，或者是否包含某些字符。您可以使用名为`StartsWith`、`EndsWith`和`Contains`的方法来实现这一点：
- en: 'Add statements to store a `string` value and then check if it starts with or
    contains a couple of different `string` values, as shown in the following code:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来存储一个`string`值，然后检查它是否以或包含一对不同的`string`值，如下代码所示：
- en: '```cs'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: company = "Microsoft"
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: company = "Microsoft"
- en: ;
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: bool
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: bool
- en: startsWithM = company.StartsWith("M"
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: startsWithM = company.StartsWith("M"
- en: );
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: bool
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: bool
- en: containsN = company.Contains("N"
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: containsN = company.Contains("N"
- en: );
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Text:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"文本：
- en: '{company}'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '{company}'
- en: '"'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Starts with M:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"以M开头：
- en: '{startsWithM}'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '{startsWithM}'
- en: ', contains an N:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: ，包含N：
- en: '{containsN}'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '{containsN}'
- en: '"'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下输出所示：
- en: '```cs'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Text: Microsoft'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 文本：Microsoft
- en: 'Starts with M: True, contains an N: False'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 以M开头：True，包含N：False
- en: '```'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Joining, formatting, and other string members
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接、格式化和其他字符串成员
- en: 'There are many other `string` members, as shown in the following table:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他`string`成员，如下表所示：
- en: '| Member | Description |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 成员 | 描述 |'
- en: '| `Trim` , `TrimStart` , `TrimEnd` | These methods trim whitespace characters
    such as space, tab, and carriage return from the beginning and/or end. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `Trim` , `TrimStart` , `TrimEnd` | 这些方法从开头和/或结尾修剪空格字符，例如空格、制表符和回车。 |'
- en: '| `ToUpper` , `ToLower` | These convert all the characters into uppercase or
    lowercase. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `ToUpper` , `ToLower` | 这些将所有字符转换为大写或小写。 |'
- en: '| `Insert` , `Remove` | These methods insert or remove some text. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `Insert` , `Remove` | 这些方法插入或删除一些文本。 |'
- en: '| `Replace` | This replaces some text with other text. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `Replace` | 这将一些文本替换为其他文本。 |'
- en: '| `string.Empty` | This can be used instead of allocating memory each time
    you use a literal `string` value using an empty pair of double quotes (`""` ).
    |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `string.Empty` | 这可以用来代替每次使用一个空的双引号(`""`)分配内存来使用一个文字`string`值。 |'
- en: '| `string.Concat` | This concatenates two `string` variables. The + operator
    does the equivalent when used between `string` operands. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `string.Concat` | 这将两个`string`变量连接起来。当在`string`操作数之间使用+运算符时，它会执行相同的操作。 |'
- en: '| `string.Join` | This concatenates one or more `string` variables with a character
    in between each one. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `string.Join` | 这将一个或多个`string`变量与一个字符连接起来。 |'
- en: '| `string.IsNullOrEmpty` | This checks whether a `string` variable is `null`
    or empty. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `string.IsNullOrEmpty` | 这检查一个`string`变量是否为`null`或空。 |'
- en: '| `string.IsNullOrWhitespace` | This checks whether a `string` variable is
    `null` or whitespace; that is, a mix of any number of horizontal and vertical
    spacing characters, for example, tab, space, carriage return, line feed, and so
    on. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `string.IsNullOrWhitespace` | 这检查一个`string`变量是否为`null`或空格；也就是说，任意数量的水平和垂直间距字符的混合，例如，制表符、空格、回车、换行等等。
    |'
- en: '| `string.Format` | An alternative method to string interpolation for outputting
    formatted `string` values, which uses positioned instead of named parameters.
    |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `string.Format` | 一种用于输出格式化`string`值的替代方法，它使用位置参数而不是命名参数。 |'
- en: Some of the preceding methods are static methods. This means that the method
    can only be called from the type, not from a variable instance. In the preceding
    table, I indicated the static methods by prefixing them with `string.` , as in
    `string.Format` .
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的一些方法是静态方法。这意味着该方法只能从类型调用，而不能从变量实例调用。在前面的表中，我通过在其前面加上`string.`来表示静态方法，如`string.Format`。
- en: 'Let''s explore some of these methods:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索其中一些方法：
- en: 'Add statements to take an array of string values and combine them back together
    into a single string variable with separators using the `Join` method, as shown
    in the following code:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以获取字符串值数组并使用`Join`方法将它们重新组合成单个字符串变量，如下面的代码所示：
- en: '```cs'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: recombined = string
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: recombined = 字符串
- en: .Join(" => "
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: .Join(" =>
- en: ', citiesArray);'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: ，citiesArray);
- en: WriteLine(recombined);
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(recombined);
- en: '```'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Paris => Tehran => Chennai => Sydney => New York => Medellín
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 巴黎=>德黑兰=>金奈=>悉尼=>纽约=>麦德林
- en: '```'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to use positioned parameters and interpolated string formatting
    syntax to output the same three variables twice, as shown in the following code:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以使用定位参数和插值字符串格式化语法两次输出相同的三个变量，如下面的代码所示：
- en: '```cs'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: fruit = "Apples"
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: fruit = "苹果"
- en: ;
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: decimal
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: price =  0.39
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 价格 = 0.39
- en: M;
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: M;
- en: DateTime when
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime when
- en: = DateTime.Today;
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: = DateTime.Today;
- en: 'WriteLine($"Interpolated:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"插值：
- en: '{fruit}'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '{水果}'
- en: cost
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 成本
- en: '{price:C}'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '{price:C}'
- en: 'on'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 上
- en: '{'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: when
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 何时
- en: :dddd}
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: :dddd}
- en: ."
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine(string
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(string
- en: '.Format("string.Format: {0} cost {1:C} on {2:dddd}."'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: .Format("string.Format：{0}在{2:dddd}花费{1:C}。"
- en: ','
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: fruit, arg1: price, arg2: when'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: 水果，arg1: 价格，arg2: 何时'
- en: ));
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: ））;
- en: '```'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Interpolated:  Apples cost £0.39 on Thursday.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 插值：苹果星期四花费£0.39。
- en: 'string.Format: Apples cost £0.39 on Thursday.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: string.Format：苹果星期四花费£0.39。
- en: '```'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note that we could have simplified the second statement because `WriteLine`
    supports the same format codes as `string.Format` , as shown in the following
    code:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以简化第二个语句，因为`WriteLine`支持与`string.Format`相同的格式代码，如下面的代码所示：
- en: '```cs'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'WriteLine("WriteLine: {0} cost {1:C} on {2:dddd}."'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("WriteLine：{0}在{2:dddd}花费{1:C}。"
- en: ','
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: fruit, arg1: price, arg2: when'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: 水果，arg1: 价格，arg2: 何时'
- en: );
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Building strings efficiently
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高效构建字符串
- en: You can concatenate two strings to make a new `string` using the `String.Concat`
    method or simply by using the `+` operator. But both of these choices are bad
    practice because .NET must create a completely new `string` in memory.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`String.Concat`方法将两个字符串连接起来，以创建一个新的`string`，或者只是使用`+`运算符。但这两种选择都是不好的做法，因为.NET必须在内存中创建一个全新的`string`。
- en: This might not be noticeable if you are only adding two `string` values, but
    if you concatenate inside a loop with many iterations, it can have a significant
    negative impact on performance and memory use. In *Chapter 12* , *Improving Performance
    and Scalability Using Multitasking* , you will learn how to concatenate `string`
    variables efficiently using the `StringBuilder` type.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只添加两个`string`值，则可能不会注意到这一点，但如果在具有许多迭代的循环中进行连接，它可能会对性能和内存使用产生重大负面影响。在*第12章*，*使用多任务改进性能和可伸缩性*，您将学习如何使用`StringBuilder`类型高效地连接`string`变量。
- en: Working with dates and times
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理日期和时间
- en: 'After numbers and text, the next most popular types of data to work with are
    dates and times. The two main types are as follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字和文本之后，要处理的下一个最受欢迎的数据类型是日期和时间。两种主要类型如下：
- en: '`DateTime` : represents a combined date and time value for a fixed point in
    time.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTime`：表示固定时间点的组合日期和时间值。'
- en: '`TimeSpan` : represents a duration of time.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimeSpan`：表示时间的持续时间。'
- en: These two types are often used together. For example, if you subtract one `DateTime`
    value from another, the result is a `TimeSpan` . If you add a `TimeSpan` to a
    `DateTime` then the result is a `DateTime` value.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种类型经常一起使用。例如，如果你从另一个`DateTime`值中减去一个`DateTime`值，结果就是一个`TimeSpan`。如果你将一个`TimeSpan`添加到一个`DateTime`中，结果就是一个`DateTime`值。
- en: Specifying date and time values
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定日期和时间值
- en: 'A common way to create a date and time value is to specify individual values
    for the date and time components like day and hour, as described in the following
    table:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 创建日期和时间值的常见方法是指定日期和时间组件的单独值，如下表所述：
- en: '| Date/time parameter | Value range |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: 日期/时间参数 | 值范围
- en: '| `year` | 1 to 9999 |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| `year` | 1到9999 |'
- en: '| `month` | 1 to 12 |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| `month` | 1到12 |'
- en: '| `day` | 1 to the number of days in that month |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| `day` | 1到该月的天数 |'
- en: '| `hour` | 0 to 23 |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| `hour` | 0到23 |'
- en: '| `minute` | 0 to 59 |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| `minute` | 0到59 |'
- en: '| `second` | 0 to 59 |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `second` | 0到59 |'
- en: An alternative is to provide the value as a `string` to be parsed, but this
    can be misinterpreted depending on the default culture of the thread. For example,
    in the UK, dates are specified as day/month/year, compared to the US, where dates
    are specified as month/day/year.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是将值提供为要解析的`string`，但这取决于线程的默认文化，可能会被误解。例如，在英国，日期是以日/月/年的方式指定的，而在美国，日期是以月/日/年的方式指定的。
- en: 'Let''s see what you might want to do with dates and times:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您可能想要处理日期和时间的内容：
- en: Use your preferred code editor to add a new console app named `WorkingWithTime`
    to the `Chapter08` solution/workspace.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`WorkingWithTime`的新控制台应用添加到`Chapter08`解决方案/工作区中。
- en: In Visual Studio Code, select `WorkingWithTime` as the active OmniSharp project.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`WorkingWithTime`选择为活动的OmniSharp项目。
- en: 'In `Program.cs` , delete the existing statements and then add statements to
    initialize some special date/time values, as shown in the following code:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除现有语句，然后添加语句以初始化一些特殊的日期/时间值，如下面的代码所示：
- en: '```cs'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'WriteLine("Earliest date/time value is: {0}"'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("最早的日期/时间值为：{0}"
- en: ','
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: DateTime.MinValue);'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: DateTime.MinValue);'
- en: 'WriteLine("UNIX epoch date/time value is: {0}"'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("UNIX纪元日期/时间值为：{0}"
- en: ','
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'arg0: DateTime.UnixEpoch);'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: DateTime.UnixEpoch);'
- en: 'WriteLine("Date/time value Now is: {0}"'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("日期/时间值现在是：{0}"
- en: ','
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: DateTime.Now);'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：DateTime.Now);
- en: 'WriteLine("Date/time value Today is: {0}"'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("今天的日期/时间值是：{0}"
- en: ','
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: DateTime.Today);'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：DateTime.Today);
- en: '```'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Earliest date/time value is: 01/01/0001 00:00:00'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 最早的日期/时间值是：01/01/0001 00:00:00
- en: 'UNIX epoch date/time value is: 01/01/1970 00:00:00'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX纪元日期/时间值是：01/01/1970 00:00:00
- en: 'Date/time value Now is: 23/04/2021 14:14:54'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的日期/时间值是：2021年4月23日14:14:54
- en: 'Date/time value Today is: 23/04/2021 00:00:00'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的日期/时间值是：23/04/2021 00:00:00
- en: '```'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to define Christmas Day in 2021 (if this is in the past then
    use a future year) and display it in various ways, as shown in the following code:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来定义2021年的圣诞节（如果这是过去的日期，则使用未来的年份），并以各种方式显示它，如下面的代码所示：
- en: '```cs'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: DateTime christmas = new
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime圣诞节=新的
- en: '(year: 2021'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: （年：2021
- en: ', month: 12'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: ，月：12
- en: ', day: 25'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: ，日：25
- en: );
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: 'WriteLine("Christmas: {0}"'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节：{0}"
- en: ','
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: christmas); // default format'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：圣诞节）；//默认格式
- en: 'WriteLine("Christmas: {0:dddd, dd MMMM yyyy}"'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节：{0:dddd, dd MMMM yyyy}"
- en: ','
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: christmas); // custom format'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：圣诞节）；//自定义格式
- en: WriteLine("Christmas is in month {0} of the year."
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节是一年中的第{0}个月。"
- en: ','
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: christmas.Month);'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：圣诞节月）;
- en: WriteLine("Christmas is day {0} of the year."
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节是一年中的第{0}天。"
- en: ','
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: christmas.DayOfYear);'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：圣诞节一年中的第一天）;
- en: WriteLine("Christmas {0} is on a {1}."
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节{0}是星期{1}。"
- en: ','
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: christmas.Year,'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：圣诞节年，
- en: 'arg1: christmas.DayOfWeek);'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：圣诞节星期几）;
- en: '```'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Christmas: 25/12/2021 00:00:00'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞节：2021年12月25日00:00:00
- en: 'Christmas: Saturday, 25 December 2021'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞节：星期六，2021年12月25日
- en: Christmas is in month 12 of the year.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞节是一年中的第12个月。
- en: Christmas is day 359 of the year.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞节是一年中的第359天。
- en: Christmas 2021 is on a Saturday.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年的圣诞节是在星期六。
- en: '```'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to perform addition and subtraction with Christmas, as shown
    in the following code:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以执行圣诞节的加法和减法，如下面的代码所示：
- en: '```cs'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: DateTime beforeXmas = christmas.Subtract(TimeSpan.FromDays(12
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime beforeXmas = christmas.Subtract(TimeSpan.FromDays(12
- en: ));
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: DateTime afterXmas = christmas.AddDays(12
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime afterXmas = christmas.AddDays(12
- en: );
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: 'WriteLine("12 days before Christmas is: {0}"'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节前12天是：{0}"
- en: ','
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: beforeXmas);'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：beforeXmas);
- en: 'WriteLine("12 days after Christmas is: {0}"'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节后12天是：{0}"
- en: ','
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: afterXmas);'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：afterXmas);
- en: TimeSpan untilChristmas = christmas - DateTime.Now;
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 直到圣诞节的时间跨度=圣诞节- DateTime.Now;
- en: WriteLine("There are {0} days and {1} hours until Christmas."
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("距离圣诞节还有{0}天{1}小时。"
- en: ','
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: untilChristmas.Days,'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：untilChristmas.Days，
- en: 'arg1: untilChristmas.Hours);'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：untilChristmas.Hours);
- en: WriteLine("There are {0:N0} hours until Christmas."
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("距离圣诞节还有{0:N0}小时。"
- en: ','
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: untilChristmas.TotalHours);'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：untilChristmas.TotalHours);
- en: '```'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '12 days before Christmas is: 13/12/2021 00:00:00'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞节前12天是：2021年12月13日00:00:00
- en: '12 days after Christmas is: 06/01/2022 00:00:00'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞节后12天是：2022年1月6日00:00:00
- en: There are 245 days and 9 hours until Christmas.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 距离圣诞节还有245天9小时。
- en: There are 5,890 hours until Christmas.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 距离圣诞节还有5,890小时。
- en: '```'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to define the time on Christmas Day that your children might
    wake up to open presents, and display it in various ways, as shown in the following
    code:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以定义您的孩子可能在圣诞节醒来开礼物的时间，并以各种方式显示它，如下面的代码所示：
- en: '```cs'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: DateTime kidsWakeUp = new
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime kidsWakeUp =新的
- en: (
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: 'year: 2021'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 年：2021
- en: ', month: 12'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: ，月：12
- en: ', day: 25'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: ，日：25
- en: ','
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'hour: 6'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 小时：6
- en: ', minute: 30'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: ，分钟：30
- en: ', second: 0'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: ，秒：0
- en: );
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: 'WriteLine("Kids wake up on Christmas: {0}"'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("孩子们在圣诞节醒来：{0}"
- en: ','
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: kidsWakeUp);'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：kidsWakeUp);
- en: WriteLine("The kids woke me up at {0}"
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("孩子们在{0}叫醒我"
- en: ','
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: kidsWakeUp.ToShortTimeString());'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：kidsWakeUp.ToShortTimeString());
- en: '```'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Kids wake up on Christmas: 25/12/2021 06:30:00'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 孩子们在圣诞节醒来：2021年12月25日06:30:00
- en: The kids woke me up at 06:30
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 孩子们在06:30叫醒我
- en: '```'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Globalization with dates and times
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全球化与日期和时间
- en: 'The current culture controls how dates and times are parsed:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 当前文化控制日期和时间的解析方式：
- en: At the top of `Program.cs` , import the `System.Globalization` namespace.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入`System.Globalization`命名空间。
- en: 'Add statements to show the current culture that is used to display date and
    time values, and then parse United States Independence Day and display it in various
    ways, as shown in the following code:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以显示用于显示日期和时间值的当前文化，然后解析美国独立日并以各种方式显示它，如下面的代码所示：
- en: '```cs'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'WriteLine("Current culture is: {0}"'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 当前文化是：en-GB
- en: ','
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: CultureInfo.CurrentCulture.Name);'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：CultureInfo.CurrentCulture.Name);
- en: string
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: textDate = "4 July 2021"
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: textDate = "2021年7月4日"
- en: ;
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: DateTime independenceDay = DateTime.Parse(textDate);
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime independenceDay = DateTime.Parse(textDate);
- en: 'WriteLine("Text: {0}, DateTime: {1:d MMMM}"'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("文本：{0}，日期时间：{1:d MMMM}"
- en: ','
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: textDate,'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：textDate，
- en: 'arg1: independenceDay);'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：独立日）;
- en: textDate = "7/4/2021"
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: textDate = "7/4/2021"
- en: ;
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: independenceDay = DateTime.Parse(textDate);
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 独立日 = DateTime.Parse(textDate);
- en: 'WriteLine("Text: {0}, DateTime: {1:d MMMM}"'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("文本：{0}，日期时间：{1:d MMMM}"
- en: ','
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: textDate,'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：textDate，
- en: 'arg1: independenceDay);'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：独立日）;
- en: independenceDay = DateTime.Parse(textDate,
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 独立日= DateTime.Parse(textDate，
- en: 'provider: CultureInfo.GetCultureInfo("en-US"'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 提供程序：CultureInfo.GetCultureInfo("en-US"
- en: ));
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: 'WriteLine("Text: {0}, DateTime: {1:d MMMM}"'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("文本：{0}，日期时间：{1:d MMMM}"
- en: ','
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: textDate,'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：textDate，
- en: 'arg1: independenceDay);'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：独立日）;
- en: '```'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Current culture is: en-GB'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 当前文化是：en-GB
- en: 'Text: 4 July 2021, DateTime: 4 July'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 文本：2021年7月4日，日期时间：7月4日
- en: 'Text: 7/4/2021, DateTime: 7 April'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 文本：7/4/2021，日期时间：7月4日
- en: 'Text: 7/4/2021, DateTime: 4 July'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 文本：7/4/2021，日期时间：7月4日
- en: '```'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: On my computer, the current culture is British English. If a date is given as
    4 July 2021, then it is correctly parsed regardless of whether the current culture
    is British or American. But if the date is given as 7/4/2021, then it is wrongly
    parsed as 7 April. You can override the current culture by specifying the correct
    culture as a provider when parsing, as shown in the third example above.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的计算机上，当前的文化是英式英语。如果日期是2021年7月4日，那么无论当前文化是英式还是美式，它都会被正确解析。但是，如果日期是7/4/2021，那么它会被错误解析为4月7日。您可以通过在解析时指定正确的文化作为提供程序来覆盖当前的文化，如上面的第三个示例所示。
- en: 'Add statements to loop from the year 2020 to 2025, displaying if the year is
    a leap year and how many days there are in February, and then show if Christmas
    and Independence Day are during daylight saving time, as shown in the following
    code:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句循环从2020年到2025年，显示该年是否为闰年以及2月有多少天，然后显示圣诞节和独立日是否在夏令时期间，如下面的代码所示：
- en: '```cs'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: for
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (int
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: year = 2020
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 年份=2020
- en: ; year < 2026
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: ；年份<2026
- en: ; year++)
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: ；年份++)
- en: '{'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Write($"
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: Write($"
- en: '{year}'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '{年份}'
- en: 'is a leap year:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 是闰年：
- en: '{DateTime.IsLeapYear(year)}'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '{DateTime.IsLeapYear(year)}'
- en: . "
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: WriteLine("There are {0} days in February {1}."
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("2月有{0}天。"
- en: ','
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: DateTime.DaysInMonth(year: year, month: 2'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0：DateTime.DaysInMonth(year: year, month: 2'
- en: '), arg1: year);'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: ），arg1：年份）;
- en: '}'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine("Is Christmas daylight saving time? {0}"
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("圣诞节是夏令时吗？{0}"
- en: ','
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: christmas.IsDaylightSavingTime());'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：christmas.IsDaylightSavingTime());
- en: WriteLine("Is July 4th daylight saving time? {0}"
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("7月4日是夏令时吗？{0}"
- en: ','
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: independenceDay.IsDaylightSavingTime());'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：independenceDay.IsDaylightSavingTime());
- en: '```'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '2020 is a leap year: True. There are 29 days in February 2020.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 2020是闰年：真。2020年2月有29天。
- en: '2021 is a leap year: False. There are 28 days in February 2021.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 2021不是闰年：假。2021年2月有28天。
- en: '2022 is a leap year: False. There are 28 days in February 2022.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 2022不是闰年：假。2022年2月有28天。
- en: '2023 is a leap year: False. There are 28 days in February 2023.'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 2023不是闰年：假。2023年2月有28天。
- en: '2024 is a leap year: True. There are 29 days in February 2024.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 2024是闰年：真。2024年2月有29天。
- en: '2025 is a leap year: False. There are 28 days in February 2025.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 2025不是闰年：假。2025年2月有28天。
- en: Is Christmas daylight saving time? False
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞节是夏令时吗？假
- en: Is July 4th daylight saving time? True
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 7月4日是夏令时吗？真
- en: '```'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Working with only a date or a time
  id: totrans-531
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅使用日期或时间
- en: .NET 6 introduces some new types for working with only a date value or only
    a time value named `DateOnly` and `TimeOnly` . These are better than using a `DateTime`
    value with a zero time to store a date-only value because it is type-safe and
    avoids misuse. `DateOnly` also maps better to database column types, for example,
    a `date` column in SQL Server. `TimeOnly` is good for setting alarms and scheduling
    regular meetings or events, and it maps to a `time` column in SQL Server.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6引入了一些新类型，用于处理仅日期值或仅时间值，命名为`DateOnly`和`TimeOnly`。这比使用带有零时间的`DateTime`值来存储仅日期值更好，因为它是类型安全的，避免了误用。`DateOnly`还更好地映射到数据库列类型，例如SQL
    Server中的`date`列。`TimeOnly`适用于设置闹钟和安排定期会议或活动，并映射到SQL Server中的`time`列。
- en: 'Let''s use them to plan a party for the Queen of England:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用它们来为英国女王计划一个派对：
- en: 'Add statements to define the Queen''s birthday, and a time for her party to
    start, and then combine the two values to make a calendar entry so we don''t miss
    her party, as shown in the following code:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来定义女王的生日，以及她的派对开始时间，然后将这两个值组合起来，以便我们不会错过她的派对，如下面的代码所示：
- en: '```cs'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: DateOnly queensBirthday = new
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: DateOnly queensBirthday = new
- en: '(year: 2022'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: （年份：2022
- en: ', month: 4'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: ，月份：4
- en: ', day: 21'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: ，日：21
- en: );
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: WriteLine($"The Queen's next birthday is on
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"女王的下一个生日是在
- en: '{queensBirthday}'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '{queensBirthday}'
- en: ."
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: TimeOnly partyStarts = new
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: TimeOnly partyStarts = new
- en: '(hour: 20'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: （小时：20
- en: ', minute: 30'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: ，分钟：30
- en: );
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: WriteLine($"The Queen's party starts at
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"女王的派对从
- en: '{partyStarts}'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '{partyStarts}'
- en: ."
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: DateTime calendarEntry = queensBirthday.ToDateTime(partyStarts);
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime calendarEntry = queensBirthday.ToDateTime(partyStarts);
- en: 'WriteLine($"Add to your calendar:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"添加到您的日历：
- en: '{calendarEntry}'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '{calendarEntry}'
- en: ."
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '```'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: The Queen's next birthday is on 21/04/2022.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 女王的下一个生日是在2022年4月21日。
- en: The Queen's party starts at 20:30.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 女王的派对从20:30开始。
- en: 'Add to your calendar: 21/04/2022 20:30:00.'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到您的日历：2022年4月21日20:30:00。
- en: '```'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Pattern matching with regular expressions
  id: totrans-565
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用正则表达式进行模式匹配
- en: Regular expressions are useful for validating input from the user. They are
    very powerful and can get very complicated. Almost all programming languages have
    support for regular expressions and use a common set of special characters to
    define them.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式对于验证用户输入非常有用。它们非常强大，可以变得非常复杂。几乎所有的编程语言都支持正则表达式，并使用一组常见的特殊字符来定义它们。
- en: 'Let''s try out some example regular expressions:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些示例正则表达式：
- en: Use your preferred code editor to add a new console app named `WorkingWithRegularExpressions`
    to the `Chapter08` solution/workspace.
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`WorkingWithRegularExpressions`的新控制台应用添加到`Chapter08`解决方案/工作区中。
- en: In Visual Studio Code, select `WorkingWithRegularExpressions` as the active
    OmniSharp project.
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`WorkingWithRegularExpressions`选择为活动的OmniSharp项目。
- en: 'In `Program.cs` , import the following namespace:'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入以下命名空间：
- en: '```cs'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Text.RegularExpressions;
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: System.Text.RegularExpressions;
- en: '```'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Checking for digits entered as text
  id: totrans-575
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查以文本形式输入的数字
- en: 'We will start by implementing the common example of validating number input:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先实现验证数字输入的常见示例：
- en: 'Add statements to prompt the user to enter their age and then check that it
    is valid using a regular expression that looks for a digit character, as shown
    in the following code:'
  id: totrans-577
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句提示用户输入他们的年龄，然后使用查找数字字符的正则表达式来检查其是否有效，如下面的代码所示：
- en: '```cs'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Write("Enter your age: "'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入您的年龄："
- en: );
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: string
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? input = ReadLine();'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: ？输入= ReadLine();
- en: Regex ageChecker = new
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: Regex ageChecker = new
- en: (@"\d"
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: (@"\d"
- en: );
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: if
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (ageChecker.IsMatch(input))
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: （ageChecker.IsMatch(input)）
- en: '{'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Thank you!"
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("谢谢！"
- en: );
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: '{'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'WriteLine($"This is not a valid age:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"这不是一个有效的年龄：
- en: '{input}'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '{input}'
- en: '"'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following about the code:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代码中的以下内容：
- en: The `@` character switches off the ability to use escape characters in the string.
    Escape characters are prefixed with a backslash. For example, `\t` means a tab
    and `\n` means a new line. When writing regular expressions, we need to disable
    this feature. To paraphrase the television show The West Wing, "Let backslash
    be backslash."
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@`字符关闭了在字符串中使用转义字符的能力。转义字符以反斜杠为前缀。例如，`\t`表示制表符，`\n`表示换行。在编写正则表达式时，我们需要禁用此功能。用《白宫风云》电视节目的话来说，“让反斜杠成为反斜杠。”'
- en: Once escape characters are disabled with `@` , then they can be interpreted
    by a regular expression. For example, `\d` means digit. You will learn more regular
    expressions that are prefixed with a backslash later in this topic.
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦使用`@`禁用了转义字符，它们就可以被正则表达式解释。例如，`\d`表示数字。您将在本主题后面学习更多以反斜杠为前缀的正则表达式。
- en: 'Run the code, enter a whole number such as `34` for the age, and view the result,
    as shown in the following output:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入一个整数，如年龄`34`，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter your age: 34'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的年龄：34
- en: Thank you!
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢！
- en: '```'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code again, enter `carrots` , and view the result, as shown in the
    following output:'
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，输入`carrots`，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter your age: carrots'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的年龄：carrots
- en: 'This is not a valid age: carrots'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个有效的年龄：carrots
- en: '```'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code again, enter `bob30smith` , and view the result, as shown in the
    following output:'
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，输入`bob30smith`，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter your age: bob30smith'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的年龄：bob30smith
- en: Thank you!
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢！
- en: '```'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The regular expression we used is `\d` , which means *one digit* . However,
    it does not specify what can be entered before and after that one digit. This
    regular expression could be described in English as "Enter any characters you
    want as long as you enter at least one digit character."
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的正则表达式是`\d`，意思是*一个数字*。但它没有指定在那一个数字之前和之后可以输入什么。这个正则表达式可以用英语描述为“输入任何字符，只要至少输入一个数字字符。”
- en: In regular expressions, you indicate the start of some input with the caret
    `^` symbol and the end of some input with the dollar `$` symbol. Let's use these
    symbols to indicate that we expect nothing else between the start and end of the
    input except for a digit.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中，您用插入符`^`符号表示输入的开始，用美元`$`符号表示输入的结束。让我们使用这些符号来表示我们期望在输入的开始和结束之间除了一个数字之外什么都不输入。
- en: 'Change the regular expression to `^\d$` , as shown highlighted in the following
    code:'
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将正则表达式更改为`^\d$`，如下面的代码中所示高亮显示：
- en: '```cs'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Regex ageChecker = new
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: Regex ageChecker = new
- en: (@"^
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: (@"^
- en: '**\d$"**'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '**\d$"**'
- en: );
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code again and note that it rejects any input except a single digit.
    We want to allow one or more digits. To do this, we add a `+` after the `\d` expression
    to modify the meaning to one or more.
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，并注意它拒绝除一个数字之外的任何输入。我们希望允许一个或多个数字。为此，我们在`\d`表达式后添加`+`以修改其含义为一个或多个。
- en: 'Change the regular expression, as shown highlighted in the following code:'
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将正则表达式更改，如下面的代码中所示高亮显示：
- en: '```cs'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Regex ageChecker = new
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: Regex ageChecker = new
- en: (@"^
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: (@"^
- en: '**\d+$"**'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '**\d+$"**'
- en: );
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code again and note the regular expression only allows zero or positive
    whole numbers of any length.
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，并注意正则表达式只允许零或正整数的任意长度。
- en: Regular expression performance improvements
  id: totrans-636
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式性能改进
- en: The .NET types for working with regular expressions are used throughout the
    .NET platform and many of the apps built with it. As such, they have a significant
    impact on performance, but until now, they have not received much optimization
    attention from Microsoft.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个.NET平台和许多使用.NET构建的应用程序中，使用正则表达式的.NET类型。因此，它们对性能有重大影响，但直到现在，它们并没有得到微软的太多优化关注。
- en: With .NET 5 and later, the `System.Text.RegularExpressions` namespace has rewritten
    internals to squeeze out maximum performance. Common regular expression benchmarks
    using methods like `IsMatch` are now five times faster. And the best thing is,
    you do not have to change your code to get the benefits!
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 5及以后，`System.Text.RegularExpressions`命名空间已重写内部以获得最大性能。使用`IsMatch`等方法的常见正则表达式基准现在快了五倍。最好的是，您无需更改代码即可获得这些好处！
- en: Understanding the syntax of a regular expression
  id: totrans-639
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解正则表达式的语法
- en: 'Here are some common regular expression symbols that you can use in regular
    expressions:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见的正则表达式符号，您可以在正则表达式中使用：
- en: '| Symbol | Meaning | Symbol | Meaning |'
  id: totrans-641
  prefs: []
  type: TYPE_TB
  zh: '| 符号 | 意义 | 符号 | 意义 |'
- en: '| `^` | Start of input | `$` | End of input |'
  id: totrans-642
  prefs: []
  type: TYPE_TB
  zh: '| `^` | 输入的开头 | `$` | 输入的结尾 |'
- en: '| `\d` | A single digit | `\D` | A single NON-digit |'
  id: totrans-643
  prefs: []
  type: TYPE_TB
  zh: '| `\d` | 一个数字 | `\D` | 一个非数字 |'
- en: '| `\s` | Whitespace | `\S` | NON-whitespace |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
  zh: '| `\s` | 空白字符 | `\S` | 非空白字符 |'
- en: '| `\w` | Word characters | `\W` | NON-word characters |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
  zh: '| `\w` | 单词字符 | `\W` | 非单词字符 |'
- en: '| `[A-Za-z0-9]` | Range(s) of characters | `\^` | ^ (caret) character |'
  id: totrans-646
  prefs: []
  type: TYPE_TB
  zh: '| `[A-Za-z0-9]` | 字符范围 | `\^` | ^（插入符）字符 |'
- en: '| `[aeiou]` | Set of characters | `[^aeiou]` | NOT in a set of characters |'
  id: totrans-647
  prefs: []
  type: TYPE_TB
  zh: '| `[aeiou]` | 字符集 | `[^aeiou]` | 非字符集中的字符 |'
- en: '| `.` | Any single character | `\.` | . (dot) character |'
  id: totrans-648
  prefs: []
  type: TYPE_TB
  zh: '| `.` | 任意单个字符 | `\.` | .（点）字符 |'
- en: 'In addition, here are some regular expression quantifiers that affect the previous
    symbols in a regular expression:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这里有一些影响正则表达式中先前符号的正则表达式量词：
- en: '| Symbol | Meaning | Symbol | Meaning |'
  id: totrans-650
  prefs: []
  type: TYPE_TB
  zh: '| 符号 | 意义 | 符号 | 意义 |'
- en: '| `+` | One or more | `?` | One or none |'
  id: totrans-651
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 一个或多个 | `?` | 一个或零个 |'
- en: '| `{3}` | Exactly three | `{3,5}` | Three to five |'
  id: totrans-652
  prefs: []
  type: TYPE_TB
  zh: '| `{3}` | 恰好三个 | `{3,5}` | 三到五个 |'
- en: '| `{3,}` | At least three | `{,3}` | Up to three |'
  id: totrans-653
  prefs: []
  type: TYPE_TB
  zh: '| `{3,}` | 至少三个 | `{,3}` | 最多三个 |'
- en: Examples of regular expressions
  id: totrans-654
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式示例
- en: 'Here are some examples of regular expressions with a description of their meaning:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些带有其含义描述的正则表达式示例：
- en: '| Expression | Meaning |'
  id: totrans-656
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 意义 |'
- en: '| `\d` | A single digit somewhere in the input |'
  id: totrans-657
  prefs: []
  type: TYPE_TB
  zh: '| `\d` | 输入中的单个数字 |'
- en: '| `a` | The character *a* somewhere in the input |'
  id: totrans-658
  prefs: []
  type: TYPE_TB
  zh: '| `a` | 输入中的字符*a* |'
- en: '| `Bob` | The word *Bob* somewhere in the input |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| `Bob` | 输入中的*Bob* |'
- en: '| `^Bob` | The word *Bob* at the start of the input |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| `^Bob` | 输入的开头是*Bob* |'
- en: '| `Bob$` | The word *Bob* at the end of the input |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| `Bob$` | 输入的结尾是*Bob* |'
- en: '| `^\d{2}$` | Exactly two digits |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| `^\d{2}$` | 正好两位数字 |'
- en: '| `^[0-9]{2}$` | Exactly two digits |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| `^[0-9]{2}$` | 正好两位数字 |'
- en: '| `^[A-Z]{4,}$` | At least four uppercase English letters in the ASCII character
    set only |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| `^[A-Z]{4,}$` | 至少四个大写英文字母，仅在ASCII字符集中 |'
- en: '| `^[A-Za-z]{4,}$` | At least four upper or lowercase English letters in the
    ASCII character set only |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| `^[A-Za-z]{4,}$` | ASCII字符集中至少四个大写或小写英文字母 |'
- en: '| `^[A-Z]{2}\d{3}$` | Two uppercase English letters in the ASCII character
    set and three digits only |'
  id: totrans-666
  prefs: []
  type: TYPE_TB
  zh: '| `^[A-Z]{2}\d{3}$` | ASCII字符集中的两个大写英文字母和三个数字 |'
- en: '| `^[A-Za-z\u00c0-\u017e]+$` | At least one uppercase or lowercase English
    letter in the ASCII character set or European letters in the Unicode character
    set, as shown in the following list:ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿıŒœŠšŸ
    Žž |'
  id: totrans-667
  prefs: []
  type: TYPE_TB
  zh: '| `^[A-Za-z\u00c0-\u017e]+$` | ASCII字符集中至少一个大写或小写英文字母，或Unicode字符集中的欧洲字母，如下列表所示：ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿıŒœŠšŸ
    Žž |'
- en: '| `^d.g$` | The letter *d* , then any character, and then the letter *g* ,
    so it would match both *dig* and *dog* or any single character between the *d*
    and *g* |'
  id: totrans-668
  prefs: []
  type: TYPE_TB
  zh: '| `^d.g$` | 字母*d*，然后是任何字符，然后是字母*g*，因此它将匹配*dig*和*dog*或*d*和*g*之间的任何单个字符 |'
- en: '| `^d\.g$` | The letter *d* , then a dot (.), and then the letter *g* , so
    it would match *d.g* only |'
  id: totrans-669
  prefs: []
  type: TYPE_TB
  zh: '| `^d\.g$` | 字母*d*，然后是一个点(.)，然后是字母*g*，因此它只匹配*d.g* |'
- en: '**Good Practice** : Use regular expressions to validate input from the user.
    The same regular expressions can be reused in other languages such as JavaScript
    and Python.'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：使用正则表达式验证用户输入。相同的正则表达式可以在JavaScript和Python等其他语言中重复使用。'
- en: Splitting a complex comma-separated string
  id: totrans-671
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拆分复杂的逗号分隔字符串
- en: Earlier in this chapter, you learned how to split a simple comma-separated string
    variable. But what about the following example of film titles?
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，您学习了如何拆分一个简单的逗号分隔的字符串变量。但是对于以下电影标题的示例呢？
- en: '```cs'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '"Monsters, Inc."'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '"怪物公司"'
- en: ',"I, Tonya"'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: ，“我，托尼娅”
- en: ',"Lock, Stock and Two Smoking Barrels"'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: ，"Lock, Stock and Two Smoking Barrels"
- en: '```'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The `string` value uses double quotes around each film title. We can use these
    to identify whether we need to split on a comma (or not). The `Split` method is
    not powerful enough, so we can use a regular expression instead.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '`string`值在每个电影标题周围使用双引号。我们可以使用这些来确定我们是否需要在逗号上拆分（或不拆分）。`Split`方法不够强大，因此我们可以使用正则表达式代替。'
- en: '**Good Practice** : You can read a fuller explanation in the Stack Overflow
    article that inspired this task at the following link: [https://stackoverflow.com/questions/18144431/regex-to-split-a-csv](https://stackoverflow.com/questions/18144431/regex-to-split-a-csv)'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：您可以在以下链接的Stack Overflow文章中阅读更详细的解释，该文章启发了此任务：[https://stackoverflow.com/questions/18144431/regex-to-split-a-csv](https://stackoverflow.com/questions/18144431/regex-to-split-a-csv)'
- en: 'To include double quotes inside a `string` value, we prefix them with a backslash:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在`string`值中包含双引号，我们使用反斜杠进行前缀处理：
- en: 'Add statements to store a complex comma-separated `string` variable, and then
    split it in a dumb way using the `Split` method, as shown in the following code:'
  id: totrans-681
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以存储一个复杂的逗号分隔的`string`变量，然后使用`Split`方法以愚蠢的方式拆分，如下面的代码所示：
- en: '```cs'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: films = "\"Monsters, Inc.\",\"I, Tonya\",\"Lock, Stock and Two Smoking Barrels\""
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 电影=“\“怪物公司\”，\“我，托尼娅\”，\“锁，库存和两根烟\””
- en: ;
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: 'WriteLine($"Films to split:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"要拆分的电影：
- en: '{films}'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '{电影}'
- en: '"'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '[] filmsDumb = films.Split('','''
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '[] filmsDumb = films.Split('','''
- en: );
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("Splitting with string.Split method:"
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("使用string.Split方法拆分："
- en: );
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: （字符串
- en: film in
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 电影在
- en: filmsDumb)
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: filmsDumb)
- en: '{'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(film);
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(film);
- en: '}'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to define a regular expression to split and write the film titles
    in a smart way, as shown in the following code:'
  id: totrans-703
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以定义一个正则表达式，以智能方式拆分并写入电影标题，如下面的代码所示：
- en: '```cs'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine();
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: Regex csv = new
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: Regex csv = 新
- en: (
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '"(?:^|,)(?=[^\"]|(\")?)\"?((?(1)[^\"]*|[^,\"]*))\"?(?=,|$)"'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '"(?:^|,)(?=[^\"]|(\")?)\"?((?(1)[^\"]*|[^,\"]*))\"?(?=,|$)"'
- en: );
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: MatchCollection filmsSmart = csv.Matches(films);
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: MatchCollection filmsSmart = csv.Matches(films);
- en: WriteLine("Splitting with regular expression:"
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("使用正则表达式拆分："
- en: );
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Match film in
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: (匹配电影
- en: filmsSmart)
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: filmsSmart)
- en: '{'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(film.Groups[2
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(film.Groups[2
- en: '].Value);'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: '].Value);'
- en: '}'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-721
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Splitting with string.Split method:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 使用string.Split方法拆分：
- en: '"Monsters'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '"怪物'
- en: Inc."
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 公司"
- en: '"I'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '"我'
- en: Tonya"
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 托尼娅"
- en: '"Lock'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '"锁'
- en: Stock and Two Smoking Barrels"
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 库存和两根烟"
- en: 'Splitting with regular expression:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正则表达式拆分：
- en: Monsters, Inc.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 怪物公司
- en: I, Tonya
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 我，托尼娅
- en: Lock, Stock and Two Smoking Barrels
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: Lock, Stock and Two Smoking Barrels
- en: '```'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Storing multiple objects in collections
  id: totrans-735
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集合中存储多个对象
- en: Another of the most common types of data is collections. If you need to store
    multiple values in a variable, then you can use a collection.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种最常见的数据类型是集合。如果需要在一个变量中存储多个值，那么可以使用集合。
- en: A collection is a data structure in memory that can manage multiple items in
    different ways, although all collections have some shared functionality.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是内存中的数据结构，可以以不同的方式管理多个项目，尽管所有集合都具有一些共享功能。
- en: 'The most common types in .NET for working with collections are shown in the
    following table:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: .NET中用于处理集合的最常见类型如下表所示：
- en: '| Namespace | Example type(s) | Description |'
  id: totrans-739
  prefs: []
  type: TYPE_TB
  zh: '| 命名空间 | 示例类型 | 描述 |'
- en: '| `System .Collections` | `IEnumerable` , `IEnumerable<T>` | Interfaces and
    base classes used by collections. |'
  id: totrans-740
  prefs: []
  type: TYPE_TB
  zh: '| `System .Collections` | `IEnumerable`，`IEnumerable<T>` | 集合使用的接口和基类。'
- en: '| `System .Collections .Generic` | `List<T>` , `Dictionary<T>` , `Queue<T>`
    , `Stack<T>` | Introduced in C# 2.0 with .NET Framework 2.0\. These collections
    allow you to specify the type you want to store using a generic type parameter
    (which is safer, faster, and more efficient). |'
  id: totrans-741
  prefs: []
  type: TYPE_TB
  zh: '| `System .Collections .Generic` | `List<T>`，`Dictionary<T>`，`Queue<T>`，`Stack<T>`
    | 在C# 2.0和.NET Framework 2.0中引入。这些集合允许您使用泛型类型参数指定要存储的类型（更安全，更快，更高效）。'
- en: '| `System .Collections .Concurrent` | `BlockingCollection` , `ConcurrentDictionary`
    , `ConcurrentQueue` | These collections are safe to use in multithreaded scenarios.
    |'
  id: totrans-742
  prefs: []
  type: TYPE_TB
  zh: '| `System .Collections .Concurrent` | `BlockingCollection`，`ConcurrentDictionary`，`ConcurrentQueue`
    | 这些集合在多线程场景中使用是安全的。'
- en: '| `System .Collections .Immutable` | `ImmutableArray` , `ImmutableDictionary`
    , `ImmutableList` , `ImmutableQueue` | Designed for scenarios where the contents
    of the original collection will never change, although they can create modified
    collections as a new instance. |'
  id: totrans-743
  prefs: []
  type: TYPE_TB
  zh: '| `System .Collections .Immutable` | `ImmutableArray`，`ImmutableDictionary`，`ImmutableList`，`ImmutableQueue`
    | 设计用于原始集合的内容永远不会更改的情况，尽管它们可以创建修改后的集合作为新实例。'
- en: Common features of all collections
  id: totrans-744
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所有集合的共同特征
- en: 'All collections implement the `ICollection` interface; this means that they
    must have a `Count` property to tell you how many objects are in them, as shown
    in the following code:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 所有集合都实现了`ICollection`接口；这意味着它们必须有一个`Count`属性来告诉您其中有多少个对象，如下面的代码所示：
- en: '```cs'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Collections
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections
- en: '{'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: interface
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 接口
- en: ICollection
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection
- en: ': IEnumerable'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: ': IEnumerable'
- en: '{'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: int
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: Count { get
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 计数{获取
- en: ; }
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: bool
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: IsSynchronized { get
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: IsSynchronized {获取
- en: ; }
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: object
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 对象
- en: SyncRoot { get
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: SyncRoot {获取
- en: ; }
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: void
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: CopyTo
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: CopyTo
- en: (
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: Array array,
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 数组数组，
- en: int
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: index
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 索引
- en: )
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'For example, if we had a collection named `passengers` , we could do this:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有一个名为`passengers`的集合，我们可以这样做：
- en: '```cs'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: int
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: howMany = passengers.Count;
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: howMany = passengers.Count;
- en: '```'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'All collections implement the `IEnumerable` interface, which means that they
    can be iterated using the `foreach` statement. They must have a `GetEnumerator`
    method that returns an object that implements `IEnumerator` ; this means that
    the returned `object` must have `MoveNext` and `Reset` methods for navigating
    through the collection and a `Current` property containing the current item in
    the collection, as shown in the following code:'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 所有集合都实现了`IEnumerable`接口，这意味着它们可以使用`foreach`语句进行迭代。它们必须有一个`GetEnumerator`方法，返回一个实现了`IEnumerator`的对象；这意味着返回的`object`必须有用于导航集合的`MoveNext`和`Reset`方法，以及包含集合中当前项的`Current`属性，如下面的代码所示：
- en: '```cs'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Collections
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections
- en: '{'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: interface
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 接口
- en: IEnumerable
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable
- en: '{'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: IEnumerator
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerator
- en: GetEnumerator
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: GetEnumerator
- en: ()
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: ;
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: namespace
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Collections
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections
- en: '{'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: interface
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 接口
- en: IEnumerator
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerator
- en: '{'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: object
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 对象
- en: Current { get
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 当前{获取
- en: ; }
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: bool
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: MoveNext
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: MoveNext
- en: ()
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: ;
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: void
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Reset
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 重置
- en: ()
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: ;
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'For example, to perform an action on each object in the `passengers` collection,
    we could write the following code:'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要对`passengers`集合中的每个对象执行操作，我们可以编写以下代码：
- en: '```cs'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: foreach
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Passenger p in
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: （乘客p in
- en: passengers)
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 乘客）
- en: '{'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // perform an action on each passenger
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: //对每个乘客执行操作
- en: '}'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As well as `object` -based collection interfaces, there are also generic interfaces
    and classes, where the generic type defines the type stored in the collection,
    as shown in the following code:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于`object`的集合接口外，还有泛型接口和类，其中泛型类型定义了集合中存储的类型，如下面的代码所示：
- en: '```cs'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Collections.Generic
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections.Generic
- en: '{'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: interface
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 接口
- en: ICollection
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection
- en: <T
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: <T
- en: ': IEnumerable'
  id: totrans-834
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ': IEnumerable'
- en: <T
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: <T
- en: '>, IEnumerable'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '>，IEnumerable'
- en: '{'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: int
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: Count { get
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 计数{获取
- en: ; }
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: bool
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: IsReadOnly { get
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: IsReadOnly {获取
- en: ; }
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: void
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Add
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 添加
- en: (
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: T item
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: T项
- en: )
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: void
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Clear
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 清除
- en: ()
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: ;
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: bool
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: Contains
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 包含
- en: (
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: T item
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: T项
- en: )
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: void
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: CopyTo
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: CopyTo
- en: (
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: T[] array,
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: T[]数组，
- en: int
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: index
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 索引
- en: )
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: bool
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: Remove
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 删除
- en: (
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: T item
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: T项
- en: )
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Improving performance by ensuring the capacity of a collection
  id: totrans-877
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过确保集合的容量来提高性能
- en: Since .NET 1.1, types like `StringBuilder` have had a method named `EnsureCapacity`
    that can presize its internal storage array to the expected final size of the
    `string` . This improves performance because it does not have to repeatedly increment
    the size of the array as more characters are appended.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 自.NET 1.1以来，像`StringBuilder`这样的类型已经有了一个名为`EnsureCapacity`的方法，可以将其内部存储数组的预期最终大小预先设置为`string`的大小。这样做可以提高性能，因为它不必在附加更多字符时重复增加数组的大小。
- en: Since .NET Core 2.1, types like `Dictionary<T>` and `HashSet<T>` have also had
    `EnsureCapacity` .
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 自.NET Core 2.1以来，像`Dictionary<T>`和`HashSet<T>`也有了`EnsureCapacity`。
- en: 'In .NET 6 and later, collections like `List<T>` , `Queue<T>` , and `Stack<T>`
    now have an `EnsureCapacity` method too, as shown in the following code:'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 6及更高版本中，像`List<T>`，`Queue<T>`和`Stack<T>`这样的集合现在也有`EnsureCapacity`方法，如下面的代码所示：
- en: '```cs'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: List<string
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: List<string
- en: names = new
  id: totrans-883
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: names = new
- en: ();
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: names.EnsureCapacity(10
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: names.EnsureCapacity(10
- en: _000);
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: _000);
- en: // load ten thousand names into the list
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: //将一万个名称加载到列表中
- en: '```'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Understanding collection choices
  id: totrans-889
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解集合选择
- en: 'There are several different choices of collection that you can use for different
    purposes: lists, dictionaries, stacks, queues, sets, and many other more specialized
    collections.'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的集合选择可供您用于不同的目的：列表、字典、堆栈、队列、集合以及许多其他更专业的集合。
- en: Lists
  id: totrans-891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表
- en: 'Lists, that is, a type that implements `IList<T>` , are **ordered collections**
    , as shown in the following code:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 列表，即实现`IList<T>`的类型，是**有序集合**，如下面的代码所示：
- en: '```cs'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Collections.Generic
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections.Generic
- en: '{'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '[DefaultMember('
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 默认成员（
- en: '"Item"'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '"Item"'
- en: )
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '] // aka this indexer'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '] //也称为此索引器'
- en: public
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: interface
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 接口
- en: IList
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: IList
- en: <T
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: <T
- en: ': ICollection'
  id: totrans-905
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ': ICollection'
- en: <T
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: <T
- en: '>, IEnumerable'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '>，IEnumerable'
- en: <T
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: <T
- en: '>, IEnumerable'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '>，IEnumerable'
- en: '{'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: T this
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: T this
- en: '[int'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '[int'
- en: index] { get
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 索引] {获取
- en: ; set
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: int
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: IndexOf
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: IndexOf
- en: (
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: T item
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: T项
- en: )
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: void
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Insert
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 插入
- en: (
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: int
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: index, T item
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 索引，T项
- en: )
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: void
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: RemoveAt
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: RemoveAt
- en: (
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: int
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: index
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 索引
- en: )
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`IList<T>` derives from `ICollection<T>` so it has a `Count` property, and
    an `Add` method to put an item at the end of the collection, as well as an `Insert`
    method to put an item in the list at a specified position, and `RemoveAt` to remove
    an item at a specified position.'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '`IList<T>`派生自`ICollection<T>`，因此它具有`Count`属性，以及`Add`方法将项目放在集合的末尾，以及`Insert`方法将项目放在列表中的指定位置，以及`RemoveAt`以删除指定位置的项目。'
- en: 'Lists are a good choice when you want to manually control the order of items
    in a collection. Each item in a list has a unique index (or position) that is
    automatically assigned. Items can be any type defined by `T` and items can be
    duplicated. Indexes are `int` types and start from `0` , so the first item in
    a list is at index `0` , as shown in the following table:'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要手动控制集合中项目的顺序时，列表是一个不错的选择。列表中的每个项目都有一个唯一的索引（或位置），该索引（或位置）会自动分配。项目可以是由`T`定义的任何类型，并且项目可以重复。索引是`int`类型，并且从`0`开始，因此列表中的第一个项目位于索引`0`，如下表所示：
- en: '| Index | Item |'
  id: totrans-941
  prefs: []
  type: TYPE_TB
  zh: '|索引|项目|'
- en: '| 0 | London |'
  id: totrans-942
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 伦敦 |'
- en: '| 1 | Paris |'
  id: totrans-943
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 巴黎 |'
- en: '| 2 | London |'
  id: totrans-944
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 伦敦 |'
- en: '| 3 | Sydney |'
  id: totrans-945
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 悉尼 |'
- en: 'If a new item (for example, Santiago) is inserted between London and Sydney,
    then the index of Sydney is automatically incremented. Therefore, you must be
    aware that an item''s index can change after inserting or removing items, as shown
    in the following table:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在伦敦和悉尼之间插入了一个新项目（例如，圣地亚哥），那么悉尼的索引会自动增加。因此，您必须意识到在插入或删除项目后，项目的索引可能会发生变化，如下表所示：
- en: '| Index | Item |'
  id: totrans-947
  prefs: []
  type: TYPE_TB
  zh: '|索引|项目|'
- en: '| 0 | London |'
  id: totrans-948
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 伦敦 |'
- en: '| 1 | Paris |'
  id: totrans-949
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 巴黎 |'
- en: '| 2 | London |'
  id: totrans-950
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 伦敦 |'
- en: '| 3 | Santiago |'
  id: totrans-951
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 圣地亚哥 |'
- en: '| 4 | Sydney |'
  id: totrans-952
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 悉尼 |'
- en: Dictionaries
  id: totrans-953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字典
- en: Dictionaries are a good choice when each **value** (or object) has a unique
    sub value (or a made-up value) that can be used as a **key** to quickly find a
    value in the collection later. The key must be unique. For example, if you are
    storing a list of people, you could choose to use a government-issued identity
    number as the key.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 当每个**值**（或对象）都有一个唯一的子值（或虚构的值）可以用作以后在集合中快速找到值的**键**时，字典是一个不错的选择。键必须是唯一的。例如，如果您正在存储人员列表，您可以选择使用政府颁发的身份证号作为键。
- en: Think of the key as being like an index entry in a real-world dictionary. It
    allows you to quickly find the definition of a word because the words (for example,
    keys) are kept sorted, and if we know we're looking for the definition of *manatee*
    , we would jump to the middle of the dictionary to start looking, because the
    letter *M* is in the middle of the alphabet.
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 将键视为真实世界字典中的索引条目。它允许您快速找到单词的定义，因为单词（例如键）被保持排序，如果我们知道我们正在寻找*manatee*的定义，我们会跳到字典的中间开始查找，因为字母*M*在字母表的中间。
- en: 'Dictionaries in programming are similarly smart when looking something up.
    They must implement the interface `IDictionary<TKey, TValue>` , as shown in the
    following code:'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，字典在查找东西时同样聪明。它们必须实现接口`IDictionary<TKey, TValue>`，如下面的代码所示：
- en: '```cs'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Collections.Generic
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections.Generic
- en: '{'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '[DefaultMember('
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '[DefaultMember('
- en: '"Item"'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: '"项目"'
- en: )
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '] // aka this indexer'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '] //也称为这个索引器'
- en: public
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: interface
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 接口
- en: IDictionary
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: IDictionary
- en: <TKey
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: <TKey
- en: ', TValue'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: ，TValue
- en: '>'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: ': ICollection'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: ：ICollection
- en: <KeyValuePair
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: <KeyValuePair
- en: <TKey
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: <TKey
- en: ', TValue'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: ，TValue
- en: '>>,'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: '>>,'
- en: IEnumerable
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable
- en: <KeyValuePair
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: <KeyValuePair
- en: <TKey
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: <TKey
- en: ', TValue'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: ，TValue
- en: '>>, IEnumerable'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: '>>, IEnumerable'
- en: '{'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: TValue this
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: TValue this
- en: '[TKey key] { get'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: '[TKey键] {获取'
- en: ; set
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: ICollection<TKey> Keys { get
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection<TKey>键 {获取
- en: ; }
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: ICollection<TValue> Values { get
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection<TValue>值 {获取
- en: ; }
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: void
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: Add
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 添加
- en: (
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: TKey key, TValue
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: TKey键，TValue
- en: value
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: )
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ;
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: bool
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值
- en: ContainsKey
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: ContainsKey
- en: (
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: TKey key
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: TKey键
- en: )
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ;
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: bool
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值
- en: Remove
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 删除
- en: (
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: TKey key
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: TKey键
- en: )
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ;
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: bool
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值
- en: TryGetValue
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: TryGetValue
- en: (
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: TKey key, [MaybeNullWhen(
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: TKey键，[MaybeNullWhen(
- en: 'false'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 假
- en: )]
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: )]
- en: out
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: out
- en: TValue
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: TValue
- en: value
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: )
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ;
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Items in a dictionary are instances of the `struct` , aka the value type `KeyValuePair<TKey,
    TValue>` , where `TKey` is the type of the key and `TValue` is the type of the
    value, as shown in the following code:'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的项目是`struct`的实例，也称为值类型`KeyValuePair<TKey, TValue>`，其中`TKey`是键的类型，`TValue`是值的类型，如下面的代码所示：
- en: '```cs'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Collections.Generic
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections.Generic
- en: '{'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: readonly
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 只读
- en: struct
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 结构
- en: KeyValuePair<TKey, TValue>
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: KeyValuePair<TKey, TValue>
- en: '{'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 公开
- en: KeyValuePair
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: KeyValuePair
- en: (
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: TKey key, TValue
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: TKey键，TValue
- en: value
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: )
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ;
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: TKey Key { get
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: TKey键 {获取
- en: ; }
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: TValue Value { get
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: TValue值 {获取
- en: ; }
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[EditorBrowsable(EditorBrowsableState.Never)'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: '[EditorBrowsable(EditorBrowsableState.Never)'
- en: ']'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: void
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: Deconstruct
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 解构
- en: (
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: out
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: out
- en: TKey key,
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: TKey键，
- en: out
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: out
- en: TValue
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: TValue
- en: value
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: )
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ;
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: override
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: string
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: ToString
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: ToString
- en: ()
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: ;
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'An example `Dictionary<string, Person>` uses a `string` as the key and a `Person`
    instance as the value. `Dictionary<string, string>` uses `string` values for both,
    as shown in the following table:'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`Dictionary<string, Person>`使用`string`作为键，`Person`实例作为值。`Dictionary<string,
    string>`使用`string`值，如下表所示：
- en: '| Key | Value |'
  id: totrans-1069
  prefs: []
  type: TYPE_TB
  zh: '|键|值|'
- en: '| BSA | Bob Smith |'
  id: totrans-1070
  prefs: []
  type: TYPE_TB
  zh: '| BSA | Bob Smith |'
- en: '| MW | Max Williams |'
  id: totrans-1071
  prefs: []
  type: TYPE_TB
  zh: '| MW | Max Williams |'
- en: '| BSB | Bob Smith |'
  id: totrans-1072
  prefs: []
  type: TYPE_TB
  zh: '| BSB | Bob Smith |'
- en: '| AM | Amir Mohammed |'
  id: totrans-1073
  prefs: []
  type: TYPE_TB
  zh: '| AM | Amir Mohammed |'
- en: Stacks
  id: totrans-1074
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 堆栈
- en: Stacks are a good choice when you want to implement **last-in, first-out** (**LIFO**
    ) behavior. With a stack, you can only directly access or remove the one item
    at the top of the stack, although you can enumerate to read through the whole
    stack of items. You cannot, for example, directly access the second item in a
    stack.
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要实现**后进先出**（**LIFO**）行为时，堆栈是一个不错的选择。使用堆栈，您只能直接访问或删除堆栈顶部的一个项目，尽管您可以枚举以读取整个项目堆栈。例如，您不能直接访问堆栈中的第二个项目。
- en: For example, word processors use a stack to remember the sequence of actions
    you have recently performed, and then when you press Ctrl + Z , it will undo the
    last action in the stack, and then the next-to-last action, and so on.
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，文字处理器使用堆栈来记住您最近执行的操作序列，然后当您按下Ctrl + Z时，它将撤消堆栈中的最后一个操作，然后是倒数第二个操作，依此类推。
- en: Queues
  id: totrans-1077
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 队列
- en: Queues are a good choice when you want to implement the **first-in, first-out**
    (**FIFO** ) behavior. With a queue, you can only directly access or remove the
    one item at the front of the queue, although you can enumerate to read through
    the whole queue of items. You cannot, for example, directly access the second
    item in a queue.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要实现**先进先出**（**FIFO**）行为时，队列是一个不错的选择。使用队列，您只能直接访问或移除队列前面的一个项目，尽管您可以枚举以读取整个项目队列。例如，您不能直接访问队列中的第二个项目。
- en: For example, background processes use a queue to process work items in the order
    that they arrive, just like people standing in line at the post office.
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，后台进程使用队列按照它们到达的顺序处理工作项，就像人们在邮局排队一样。
- en: .NET 6 introduces the `PriorityQueue` , where each item in the queue has a priority
    value assigned as well as their position in the queue.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6引入了`PriorityQueue`，队列中的每个项目都有一个分配的优先级值以及它们在队列中的位置。
- en: Sets
  id: totrans-1081
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合
- en: Sets are a good choice when you want to perform set operations between two collections.
    For example, you may have two collections of city names, and you want to know
    which names appear in both sets (known as the *intersect* between the sets). Items
    in a set must be unique.
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要在两个集合之间执行集合操作时，集合是一个不错的选择。例如，您可能有两个城市名称的集合，并且想知道哪些名称出现在两个集合中（称为集合之间的*交集*）。集合中的项目必须是唯一的。
- en: Collection methods summary
  id: totrans-1083
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合方法摘要
- en: 'Each collection has a different set of methods for adding and removing items,
    as shown in the following table:'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 每个集合都有一组不同的方法来添加和删除项目，如下表所示：
- en: '| Collection | Add methods | Remove methods | Description |'
  id: totrans-1085
  prefs: []
  type: TYPE_TB
  zh: '| 集合 | 添加方法 | 删除方法 | 描述 |'
- en: '| List | `Add` , `Insert` | `Remove` , `RemoveAt` | Lists are ordered so items
    have an integer index position. `Add` will add a new item at the end of the list.
    `Insert` will add a new item at the index position specified. |'
  id: totrans-1086
  prefs: []
  type: TYPE_TB
  zh: '| 列表 | `Add`，`Insert` | `Remove`，`RemoveAt` | 列表是有序的，因此项目具有整数索引位置。`Add`将在列表的末尾添加一个新项目。`Insert`将在指定的索引位置添加一个新项目。
    |'
- en: '| Dictionary | `Add` | `Remove` | Dictionaries are not ordered so items do
    not have integer index positions. You can check if a key has been used by calling
    the `ContainsKey` method. |'
  id: totrans-1087
  prefs: []
  type: TYPE_TB
  zh: '| 字典 | `Add` | `Remove` | 字典没有顺序，因此项目没有整数索引位置。您可以通过调用`ContainsKey`方法来检查是否使用了键。
    |'
- en: '| Stack | `Push` | `Pop` | Stacks always add a new item at the top of the stack
    using the `Push` method. The first item is at the bottom. Items are always removed
    from the top of the stack using the `Pop` method. Call the `Peek` method to see
    this value without removing it. |'
  id: totrans-1088
  prefs: []
  type: TYPE_TB
  zh: '| 栈 | `Push` | `Pop` | 栈总是使用`Push`方法在栈的顶部添加新项目。第一个项目在底部。使用`Pop`方法总是从栈的顶部移除项目。调用`Peek`方法可以查看该值而不移除它。'
- en: '| Queue | `Enqueue` | `Dequeue` | Queues always add a new item at the end of
    the queue using the `Enqueue` method. The first item is at the front of the queue.
    Items are always removed from the front of the queue using the `Dequeue` method.
    Call the `Peek` method to see this value without removing it. |'
  id: totrans-1089
  prefs: []
  type: TYPE_TB
  zh: '| 队列 | `Enqueue` | `Dequeue` | 队列总是使用`Enqueue`方法在队列的末尾添加新项目。第一个项目在队列的前面。使用`Dequeue`方法总是从队列的前面移除项目。调用`Peek`方法可以查看该值而不移除它。'
- en: Working with lists
  id: totrans-1090
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用列表
- en: 'Let''s explore lists:'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索列表：
- en: Use your preferred code editor to add a new console app named `WorkingWithCollections`
    to the `Chapter08` solution/workspace.
  id: totrans-1092
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器向`Chapter08`解决方案/工作区添加一个名为`WorkingWithCollections`的新控制台应用程序。
- en: In Visual Studio Code, select `WorkingWithCollections` as the active OmniSharp
    project.
  id: totrans-1093
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`WorkingWithCollections`选择为活动的OmniSharp项目。
- en: 'In `Program.cs` , delete the existing statements and then define a function
    to output a collection of `string` values with a title, as shown in the following
    code:'
  id: totrans-1094
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除现有的语句，然后定义一个函数来输出一个带有标题的`string`值集合，如下面的代码所示：
- en: '```cs'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Output
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: Output
- en: (
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: title, IEnumerable<
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 标题，IEnumerable<
- en: string
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: collection
  id: totrans-1103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 集合
- en: )
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(title);
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(title);
- en: foreach
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: (string
- en: item in
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 项目
- en: collection)
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 集合)
- en: '{'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{item}'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '{item}'
- en: '"'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Define a static method named `WorkingWithLists` to illustrate some of the common
    ways of defining and working with lists, as shown in the following code:'
  id: totrans-1119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`WorkingWithLists`的静态方法，以演示定义和使用列表的一些常见方法，如下面的代码所示：
- en: '```cs'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkingWithLists
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithLists
- en: ()
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // Simple syntax for creating a list and adding three items
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建列表并添加三个项目的简单语法
- en: List<string
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: List<string
- en: cities = new
  id: totrans-1128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cities = new
- en: ();
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: cities.Add("London"
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: cities.Add("London"
- en: );
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: cities.Add("Paris"
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: cities.Add("Paris"
- en: );
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: cities.Add("Milan"
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: cities.Add("Milan"
- en: );
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: /* Alternative syntax that is converted by the compiler into
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: /* 通过编译器转换的替代语法
- en: the three Add method calls above
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的三个Add方法调用
- en: List<string> cities = new()
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: List<string> cities = new()
- en: '{ "London", "Paris", "Milan" };'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "London", "Paris", "Milan" };'
- en: '*/'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: /* Alternative syntax that passes an
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: /* 通过编译器转换的替代语法
- en: array of string values to AddRange method
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串值的数组添加到AddRange方法
- en: List<string> cities = new();
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: List<string> cities = new();
- en: cities.AddRange(new[] { "London", "Paris", "Milan" });
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: cities.AddRange(new[] { "London", "Paris", "Milan" });
- en: '*/'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: Output("Initial list"
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 输出("初始列表"
- en: ', cities);'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: ', cities);'
- en: WriteLine($"The first city is
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"第一个城市是
- en: '{cities['
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: '{cities['
- en: '0'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: ']}'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: ']}'
- en: ."
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"The last city is
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"最后一个城市是
- en: '{cities[cities.Count -'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: '{cities[cities.Count -'
- en: '1'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: ']}'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: ']}'
- en: ."
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: cities.Insert(0
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: cities.Insert(0
- en: ', "Sydney"'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: ', "悉尼"'
- en: );
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output("After inserting Sydney at index 0"
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 输出("在索引0处插入悉尼后"
- en: ', cities);'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: ', cities);'
- en: cities.RemoveAt(1
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: cities.RemoveAt(1
- en: );
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: cities.Remove("Milan"
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: cities.Remove("Milan"
- en: );
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output("After removing two cities"
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: Output("移除两个城市后"
- en: ', cities);'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: ', cities);'
- en: '}'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the top of `Program.cs` , after the namespace imports, call the `WorkingWithLists`
    method, as shown in the following code:'
  id: totrans-1173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，在命名空间导入之后，调用`WorkingWithLists`方法，如下面的代码所示：
- en: '```cs'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WorkingWithLists();
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithLists();
- en: '```'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Initial list
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 初始列表
- en: London
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 伦敦
- en: Paris
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 巴黎
- en: Milan
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 米兰
- en: The first city is London.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个城市是伦敦。
- en: The last city is Milan.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个城市是米兰。
- en: After inserting Sydney at index 0
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引0处插入悉尼后
- en: Sydney
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 悉尼
- en: London
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 伦敦
- en: Paris
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 巴黎
- en: Milan
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 米兰
- en: After removing two cities
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 删除两个城市后
- en: Sydney
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 悉尼
- en: Paris
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 巴黎
- en: '```'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Working with dictionaries
  id: totrans-1194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字典
- en: 'Let''s explore dictionaries:'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索字典：
- en: 'In `Program.cs` , define a static method named `WorkingWithDictionaries` to
    illustrate some of the common ways of working with dictionaries, for example,
    looking up word definitions, as shown in the following code:'
  id: totrans-1196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，定义一个名为`WorkingWithDictionaries`的静态方法，以说明使用字典的一些常见方法，例如查找单词定义，如下所示：
- en: '```cs'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkingWithDictionaries
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithDictionaries
- en: ()
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Dictionary<string
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: Dictionary<string
- en: ', string'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: ', 字符串'
- en: keywords = new
  id: totrans-1205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键字 = 新的
- en: ();
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: // add using named parameters
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用命名参数添加
- en: 'keywords.Add(key: "int"'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '关键字.Add(key: "int"'
- en: ', value'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: ', value'
- en: ': "32-bit integer data type"'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: ': "32位整数数据类型"'
- en: );
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // add using positional parameters
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用位置参数添加
- en: keywords.Add("long"
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字.Add("long"
- en: ', "64-bit integer data type"'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: ', "64位整数数据类型"'
- en: );
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: keywords.Add("float"
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字.Add("float"
- en: ', "Single precision floating point number"'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: ', "单精度浮点数"'
- en: );
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: /* Alternative syntax; compiler converts this to calls to Add method
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: /* 替代语法；编译器将其转换为对Add方法的调用
- en: Dictionary<string, string> keywords = new()
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: Dictionary<string, string> 关键字 = 新的()
- en: '{'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '{ "int", "32-bit integer data type" },'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "int", "32位整数数据类型" },'
- en: '{ "long", "64-bit integer data type" },'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "long", "64位整数数据类型" },'
- en: '{ "float", "Single precision floating point number" },'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "float", "单精度浮点数" },'
- en: '}; */'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: '}; */'
- en: /* Alternative syntax; compiler converts this to calls to Add method
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: /* 替代语法；编译器将其转换为对Add方法的调用
- en: Dictionary<string, string> keywords = new()
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: Dictionary<string, string> 关键字 = 新的()
- en: '{'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '["int"] = "32-bit integer data type",'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: '["int"] = "32位整数数据类型",'
- en: '["long"] = "64-bit integer data type",'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '["long"] = "64位整数数据类型",'
- en: '["float"] = "Single precision floating point number", // last comma is optional'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '["float"] = "单精度浮点数", // 最后一个逗号是可选的'
- en: '}; */'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: '}; */'
- en: Output("Dictionary keys:"
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 输出("字典键："
- en: ', keywords.Keys);'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: ', 关键字.Keys);'
- en: Output("Dictionary values:"
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 输出("字典值："
- en: ', keywords.Values);'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: ', 关键字.Values);'
- en: WriteLine("Keywords and their definitions"
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("关键字及其定义"
- en: );
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (KeyValuePair<string
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: (KeyValuePair<string
- en: ', string'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: ', 字符串'
- en: item in
  id: totrans-1242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 项目在
- en: keywords)
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字)
- en: '{'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{item.Key}'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: '{item.Key}'
- en: ':'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: ':'
- en: '{item.Value}'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: '{item.Value}'
- en: '"'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // lookup a value using a key
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用键查找值
- en: string
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: key = "long"
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: key = "long"
- en: ;
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: WriteLine($"The definition of
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"int的定义
- en: '{key}'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '{key}'
- en: is
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: '{keywords[key]}'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: '{keywords[key]}'
- en: '"'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the top of `Program.cs` , comment out the previous method call and then
    call the `WorkingWithDictionaries` method, as shown in the following code:'
  id: totrans-1264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉先前的方法调用，然后调用`WorkingWithDictionaries`方法，如下所示：
- en: '```cs'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // WorkingWithLists();
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: // WorkingWithLists();
- en: WorkingWithDictionaries();
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithDictionaries();
- en: '```'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下所示：
- en: '```cs'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Dictionary keys:'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 字典键：
- en: int
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: long
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 长
- en: float
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: float
- en: 'Dictionary values:'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 字典值：
- en: 32-bit integer data type
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 32位整数数据类型
- en: 64-bit integer data type
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 64位整数数据类型
- en: Single precision floating point number
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: 单精度浮点数
- en: Keywords and their definitions
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字及其定义
- en: 'int: 32-bit integer data type'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: int：32位整数数据类型
- en: 'long: 64-bit integer data type'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: long：64位整数数据类型
- en: 'float: Single precision floating point number'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: float：单精度浮点数
- en: The definition of long is 64-bit integer data type
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: long的定义是64位整数数据类型
- en: '```'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Working with queues
  id: totrans-1285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用队列
- en: 'Let''s explore queues:'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索队列：
- en: 'In `Program.cs` , define a static method named `WorkingWithQueues` to illustrate
    some of the common ways of working with queues, for example, handling customers
    in a queue for coffee, as shown in the following code:'
  id: totrans-1287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，定义一个名为`WorkingWithQueues`的静态方法，以说明使用队列的一些常见方法，例如，在咖啡队列中处理顾客，如下所示：
- en: '```cs'
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkingWithQueues
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithQueues
- en: ()
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Queue<string
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: Queue<string
- en: coffee = new
  id: totrans-1295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 咖啡 = 新的
- en: ();
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: coffee.Enqueue("Damir"
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: coffee.Enqueue("达米尔"
- en: ); // front of queue
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: ); // 队列的前面
- en: coffee.Enqueue("Andrea"
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: coffee.Enqueue("安德烈"
- en: );
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: coffee.Enqueue("Ronald"
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: coffee.Enqueue("罗纳德"
- en: );
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: coffee.Enqueue("Amin"
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: coffee.Enqueue("阿敏"
- en: );
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: coffee.Enqueue("Irina"
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: coffee.Enqueue("伊琳娜"
- en: ); // back of queue
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: ); // 队列的后面
- en: Output("Initial queue from front to back"
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: 输出("从前到后的初始队列"
- en: ', coffee);'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: ', 咖啡);'
- en: // server handles next person in queue
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: // 服务器处理队列中的下一个人
- en: string
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: served = coffee.Dequeue();
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: 服务 = 咖啡.Dequeue();
- en: 'WriteLine($"Served:'
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"服务：
- en: '{served}'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: '{服务}'
- en: ."
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: ."
- en: );
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // server handles next person in queue
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: // 服务器处理队列中的下一个人
- en: served = coffee.Dequeue();
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 服务 = 咖啡.Dequeue();
- en: 'WriteLine($"Served:'
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"服务：
- en: '{served}'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: '{served}'
- en: ."
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: ."
- en: );
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output("Current queue from front to back"
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 输出("从前到后的当前队列"
- en: ', coffee);'
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: ', 咖啡);'
- en: WriteLine($"
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{coffee.Peek()}'
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: '{coffee.Peek()}'
- en: is next in line."
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 是下一个。"
- en: );
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output("Current queue from front to back"
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 输出("从前到后的当前队列"
- en: ', coffee);'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: ', 咖啡);'
- en: '}'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: At the top of `Program.cs` , comment out the previous method calls and call
    the `WorkingWithQueues` method.
  id: totrans-1332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉先前的方法调用，并调用`WorkingWithQueues`方法。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下所示：
- en: '```cs'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Initial queue from front to back
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 从前到后的初始队列
- en: Damir
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 达米尔
- en: Andrea
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 安德烈
- en: Ronald
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 罗纳德
- en: Amin
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 阿敏
- en: Irina
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 伊琳娜
- en: 'Served: Damir.'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 服务：达米尔。
- en: 'Served: Andrea.'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 服务：安德烈。
- en: Current queue from front to back
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 从前到后的当前队列
- en: Ronald
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 罗纳德
- en: Amin
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 阿敏
- en: Irina
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 伊琳娜
- en: Ronald is next in line.
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 罗纳德是下一个。
- en: Current queue from front to back
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 从前到后的当前队列
- en: Ronald
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 罗纳德
- en: Amin
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 阿敏
- en: Irina
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 伊琳娜
- en: '```'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Define a static method named `OutputPQ` , as shown in the following code:'
  id: totrans-1353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`OutputPQ`的静态方法，如下所示：
- en: '```cs'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OutputPQ
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: OutputPQ
- en: <
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: TElement
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: TElement
- en: ','
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: TPriority
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: TPriority
- en: '>('
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: string
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: title,
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 标题，
- en: IEnumerable<(TElement Element, TPriority Priority
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<(TElement Element, TPriority Priority
- en: )> collection)
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: )> 集合)
- en: '{'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(title);
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(title);
- en: foreach
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: ((TElement, TPriority) item in
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: ((TElement, TPriority) 项目在
- en: collection)
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 集合)
- en: '{'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{item.Item1}'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '{item.Item1}'
- en: ':'
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: ：
- en: '{item.Item2}'
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: '{item.Item2}'
- en: '"'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note that the `OutputPQ` method is generic. You can specify the two types used
    in the tuples that are passed in as `collection` .
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`OutputPQ`方法是通用的。您可以指定作为`collection`传入的元组中使用的两种类型。
- en: 'Define a static method named `WorkingWithPriorityQueues` , as shown in the
    following code:'
  id: totrans-1383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`WorkingWithPriorityQueues`的静态方法，如下所示：
- en: '```cs'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的
- en: void
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkingWithPriorityQueues
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithPriorityQueues
- en: ()
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: PriorityQueue<string
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: PriorityQueue<string
- en: ', int'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: ', int'
- en: vaccine = new
  id: totrans-1392
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: vaccine = new
- en: ();
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: // add some people
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: // 添加一些人
- en: // 1 = high priority people in their 70s or poor health
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: // 1 = 高优先级的70多岁或健康状况不佳的人
- en: // 2 = medium priority e.g. middle aged
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: // 2 = 中等优先级，例如中年人
- en: // 3 = low priority e.g. teens and twenties
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: // 3 = 低优先级，例如十几岁和二十几岁。
- en: vaccine.Enqueue("Pamela"
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: vaccine.Enqueue("Pamela"
- en: ', 1'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: ', 1'
- en: );  // my mum (70s)
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: );  // 我妈妈（70多岁）
- en: vaccine.Enqueue("Rebecca"
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: vaccine.Enqueue("Rebecca"
- en: ', 3'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: ', 3'
- en: ); // my niece (teens)
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: ); // 我的侄女（十几岁）
- en: vaccine.Enqueue("Juliet"
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: vaccine.Enqueue("Juliet"
- en: ', 2'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: ', 2'
- en: );  // my sister (40s)
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: );  // 我妹妹（40多岁）
- en: vaccine.Enqueue("Ian"
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: vaccine.Enqueue("Ian"
- en: ', 1'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: ', 1'
- en: );     // my dad (70s)
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: );     // 我爸爸（70多岁）
- en: OutputPQ("Current queue for vaccination:"
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: OutputPQ("当前接种疫苗的队列："
- en: ', vaccine.UnorderedItems);'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: ', vaccine.UnorderedItems);'
- en: WriteLine($"
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{vaccine.Dequeue()}'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: '{vaccine.Dequeue()}'
- en: has been vaccinated."
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: 已接种疫苗。"
- en: );
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{vaccine.Dequeue()}'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: '{vaccine.Dequeue()}'
- en: has been vaccinated."
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 已接种疫苗。"
- en: );
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: OutputPQ("Current queue for vaccination:"
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: OutputPQ("当前接种疫苗的队列："
- en: ', vaccine.UnorderedItems);'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: ', vaccine.UnorderedItems);'
- en: WriteLine($"
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{vaccine.Dequeue()}'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '{vaccine.Dequeue()}'
- en: has been vaccinated."
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 已接种疫苗。"
- en: );
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: vaccine.Enqueue("Mark"
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: vaccine.Enqueue("Mark"
- en: ', 2'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: ', 2'
- en: ); // me (40s)
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: ); // 我（40多岁）
- en: WriteLine($"
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{vaccine.Peek()}'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '{vaccine.Peek()}'
- en: will be next to be vaccinated."
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 将是下一个接种疫苗的人。"
- en: );
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: OutputPQ("Current queue for vaccination:"
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: OutputPQ("当前接种疫苗的队列："
- en: ', vaccine.UnorderedItems);'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: ', vaccine.UnorderedItems);'
- en: '}'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: At the top of `Program.cs` , comment out the previous method calls and call
    the `WorkingWithPriorityQueues` method.
  id: totrans-1437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉以前的方法调用，并调用`WorkingWithPriorityQueues`方法。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Current queue for vaccination:'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 当前接种疫苗的队列：
- en: 'Pamela: 1'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 帕梅拉：1
- en: 'Rebecca: 3'
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 丽贝卡：3
- en: 'Juliet: 2'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 朱丽叶：2
- en: 'Ian: 1'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: 伊恩：1
- en: Pamela has been vaccinated.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 帕梅拉已接种疫苗。
- en: Ian has been vaccinated.
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 伊恩已接种疫苗。
- en: 'Current queue for vaccination:'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 当前接种疫苗的队列：
- en: 'Juliet: 2'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 朱丽叶：2
- en: 'Rebecca: 3'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 丽贝卡：3
- en: Juliet has been vaccinated.
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 朱丽叶已接种疫苗。
- en: Mark will be next to be vaccinated.
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 马克将是下一个接种疫苗的人。
- en: 'Current queue for vaccination:'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: 当前接种疫苗的队列：
- en: 'Mark: 2'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 马克：2
- en: 'Rebecca: 3'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 丽贝卡：3
- en: '```'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Sorting collections
  id: totrans-1456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序集合
- en: A `List<T>` class can be sorted by manually calling its `Sort` method (but remember
    that the indexes of each item will change). Manually sorting a list of `string`
    values or other built-in types will work without extra effort on your part, but
    if you create a collection of your own type, then that type must implement an
    interface named `IComparable` . You learned how to do this in *Chapter 6* , *Implementing
    Interfaces and Inheriting Classes* .
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<T>`类可以通过手动调用其`Sort`方法进行排序（但请记住，每个项目的索引将发生变化）。手动对`string`值或其他内置类型的列表进行排序不需要额外的努力，但如果您创建了自己类型的集合，那么该类型必须实现一个名为`IComparable`的接口。您在*第6章*，*实现接口和继承类*中学习了如何做到这一点。'
- en: A `Stack<T>` or `Queue<T>` collection cannot be sorted because you wouldn't
    usually want that functionality; for example, you would probably never sort a
    queue of guests checking into a hotel. But sometimes, you might want to sort a
    dictionary or a set.
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: '`Stack<T>`或`Queue<T>`集合不能排序，因为通常不需要这种功能；例如，您可能永远不会对入住酒店的客人队列进行排序。但有时，您可能需要对字典或集合进行排序。'
- en: Sometimes it would be useful to have an automatically sorted collection, that
    is, one that maintains the items in a sorted order as you add and remove them.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，自动排序的集合会很有用，也就是说，当你添加和删除项目时，它会保持有序。
- en: There are multiple auto-sorting collections to choose from. The differences
    between these sorted collections are often subtle but can have an impact on the
    memory requirements and performance of your application, so it is worth putting
    effort into picking the most appropriate option for your requirements.
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个自动排序的集合可供选择。这些排序集合之间的差异通常很微妙，但可能会影响应用程序的内存需求和性能，因此值得努力选择最合适的选项来满足您的需求。
- en: 'Some common auto-sorting collections are shown in the following table:'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的自动排序集合如下表所示：
- en: '| Collection | Description |'
  id: totrans-1462
  prefs: []
  type: TYPE_TB
  zh: '| 集合 | 描述 |'
- en: '| `SortedDictionary<TKey, TValue>` | This represents a collection of key/value
    pairs that are sorted by key. |'
  id: totrans-1463
  prefs: []
  type: TYPE_TB
  zh: '`SortedDictionary<TKey, TValue>` | 这代表了一个按键排序的键/值对集合。'
- en: '| `SortedList<TKey, TValue>` | This represents a collection of key/value pairs
    that are sorted by key. |'
  id: totrans-1464
  prefs: []
  type: TYPE_TB
  zh: '`SortedList<TKey, TValue>` | 这代表了一个按键排序的键/值对集合。'
- en: '| `SortedSet<T>` | This represents a collection of unique objects that are
    maintained in a sorted order. |'
  id: totrans-1465
  prefs: []
  type: TYPE_TB
  zh: '| `SortedSet<T>` | 这代表了一个维护在有序顺序中的唯一对象的集合。|'
- en: More specialized collections
  id: totrans-1466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多专门的集合
- en: There are a few other collections for special situations.
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他用于特殊情况的集合。
- en: Working with a compact array of bit values
  id: totrans-1468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用紧凑的位值数组
- en: The `System.Collections.BitArray` collection manages a compact array of bit
    values, which are represented as Booleans, where `true` indicates that the bit
    is on (value is 1) and `false` indicates the bit is off (value is 0).
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.Collections.BitArray`集合管理一个紧凑的位值数组，这些位值被表示为布尔值，其中`true`表示位打开（值为1），`false`表示位关闭（值为0）。'
- en: Working with efficient lists
  id: totrans-1470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用高效的列表
- en: The `System.Collections.Generics.LinkedList<T>` collection represents a doubly
    linked list where every item has a reference to its previous and next items. They
    provide better performance compared to `List<T>` for scenarios where you will
    frequently insert and remove items from the middle of the list. In a `LinkedList<T>`
    the items do not have to be rearranged in memory.
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.Collections.Generics.LinkedList<T>`集合表示一个双向链表，其中每个项目都有对其前一个和后一个项目的引用。它们在频繁在列表中间插入和删除项目的场景中提供了比`List<T>`更好的性能。在`LinkedList<T>`中，项目不必在内存中重新排列。'
- en: Using immutable collections
  id: totrans-1472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用不可变集合
- en: Sometimes you need to make a collection immutable, meaning that its members
    cannot change; that is, you cannot add or remove them.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你需要让一个集合成为不可变的，也就是说它的成员不能改变；也就是说，你不能添加或删除它们。
- en: If you import the `System.Collections.Immutable` namespace, then any collection
    that implements `IEnumerable<T>` is given six extension methods to convert it
    into an immutable list, dictionary, hash set, and so on.
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你导入了`System.Collections.Immutable`命名空间，那么任何实现`IEnumerable<T>`的集合都会得到六个扩展方法，用于将其转换为不可变列表、字典、哈希集等。
- en: 'Let''s see a simple example:'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子：
- en: In the `WorkingWithCollections` project, in `Program.cs` , import the `System.Collections.Immutable`
    namespace.
  id: totrans-1476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithCollections`项目中的`Program.cs`中，导入`System.Collections.Immutable`命名空间。
- en: 'In the `WorkingWithLists` method, add statements to the end of the method to
    convert the `cities` list into an immutable list and then add a new city to it,
    as shown in the following code:'
  id: totrans-1477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithLists`方法中，添加语句到方法的末尾，将`cities`列表转换为不可变列表，然后向其中添加一个新的城市，如下面的代码所示：
- en: '```cs'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: ImmutableList<string
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: ImmutableList<string
- en: immutableCities = cities.ToImmutableList();
  id: totrans-1480
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: immutableCities = cities.ToImmutableList();
- en: ImmutableList<string
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: ImmutableList<string
- en: newList = immutableCities.Add("Rio"
  id: totrans-1482
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: newList = immutableCities.Add("里约"
- en: );
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output("Immutable list of cities:"
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: Output("不可变城市列表："
- en: ', immutableCities);'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: ', immutableCities);'
- en: Output("New list of cities:"
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: Output("新的城市列表："
- en: ', newList);'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: ', newList);'
- en: '```'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: At the top of `Program.cs` , comment the previous method calls and uncomment
    the call to the `WorkingWithLists` method.
  id: totrans-1489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉之前的方法调用，并取消注释对`WorkingWithLists`方法的调用。
- en: 'Run the code, view the result, and note that the immutable list of cities does
    not get modified when you call the `Add` method on it; instead, it returns a new
    list with the newly added city, as shown in the following output:'
  id: totrans-1490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，注意当你在不可变列表上调用`Add`方法时，不可变城市列表不会被修改；相反，它会返回一个新的列表，其中包含了新添加的城市，如下面的输出所示：
- en: '```cs'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Immutable list of cities:'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变城市列表：
- en: Sydney
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 悉尼
- en: Paris
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 巴黎
- en: 'New list of cities:'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 新的城市列表：
- en: Sydney
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 悉尼
- en: Paris
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 巴黎
- en: Rio
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 里约
- en: '```'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : To improve performance, many applications store a shared
    copy of commonly accessed objects in a central cache. To safely allow multiple
    threads to work with those objects knowing they won''t change, you should make
    them immutable or use a concurrent collection type that you can read about at
    the following link: [https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent)'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：为了提高性能，许多应用程序在中央缓存中存储常用对象的共享副本。为了安全地允许多个线程使用这些对象，你应该让它们成为不可变的，或者使用一个并发集合类型，你可以在以下链接中了解更多信息：[https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent)'
- en: Good practice with collections
  id: totrans-1501
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合的良好实践
- en: 'Let''s say you need to create a method to process a collection. For maximum
    flexibility, you could declare the input parameter to be `IEnumerable<T>` and
    make the method generic, as shown in the following code:'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要创建一个处理集合的方法。为了最大的灵活性，你可以声明输入参数为`IEnumerable<T>`，并且将方法声明为泛型，如下面的代码所示：
- en: '```cs'
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: void
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: ProcessCollection
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: ProcessCollection
- en: <
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: T
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: T
- en: '>('
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: IEnumerable<T> collection
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<T> collection
- en: )
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // process the items in the collection,
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理集合中的项目，
- en: // perhaps using a foreach statement
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: // 可能使用foreach语句
- en: '}'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: I could pass an array, a list, a queue, a stack, or anything else that implements
    `IEnumerable<T>` into this method and it will process the items. However, the
    flexibility to pass any collection to this method comes at a performance cost.
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以将数组、列表、队列、栈或任何其他实现`IEnumerable<T>`的东西传递给这个方法，它将处理这些项目。然而，将任何集合传递给这个方法的灵活性会带来性能成本。
- en: 'One of the performance problems with `IEnumerable<T>` is also one of its benefits:
    deferred execution, also known as lazy loading. Types that implement this interface
    do not have to implement deferred execution, but many do.'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEnumerable<T>`的性能问题之一也是它的好处之一：延迟执行，也称为惰性加载。实现这个接口的类型不必实现延迟执行，但很多类型都这样做。'
- en: 'But the worst performance problem with `IEnumerable<T>` is that the iteration
    has to allocate an object on the heap. To avoid this memory allocation, you should
    define your method using a concrete type, as shown highlighted in the following
    code:'
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 但是`IEnumerable<T>`的最糟糕的性能问题是迭代必须在堆上分配一个对象。为了避免这种内存分配，你应该使用一个具体的类型来定义你的方法，如下面代码中的高亮部分所示：
- en: '```cs'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: void
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: ProcessCollection
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: ProcessCollection
- en: <
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: T
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: T
- en: '>('
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: '**List<T>**'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '**List<T>**'
- en: collection
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: collection
- en: )
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // process the items in the collection,
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: // 处理集合中的项目，
- en: // perhaps using a foreach statement
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: // 可能使用foreach语句
- en: '}'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This will use the `List<T>.Enumerator GetEnumerator()` method that returns a
    `struct` instead of the `IEnumerator<T> GetEnumerator()` method that returns a
    reference type. Your code will be two to three times faster and require less memory.
    As with all recommendations related to performance, you should confirm the benefit
    by running performance tests on your actual code in a product environment. You
    will learn how to do this in *Chapter 12* , *Improving Performance and Scalability
    Using Multitasking* .
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用`List<T>.Enumerator GetEnumerator()`方法，该方法返回一个`struct`，而不是返回一个引用类型的`IEnumerator<T>
    GetEnumerator()`方法。你的代码将快两到三倍，并且需要更少的内存。与性能相关的所有建议一样，你应该在产品环境中运行性能测试来确认这种好处。你将在*第12章*中学习如何做到这一点，*使用多任务改进性能和可伸缩性*。
- en: Working with spans, indexes, and ranges
  id: totrans-1534
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用范围、索引和范围
- en: One of Microsoft's goals with .NET Core 2.1 was to improve performance and resource
    usage. A key .NET feature that enables this is the `Span<T>` type.
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在.NET Core 2.1中的一个目标是提高性能和资源使用率。实现这一目标的一个关键.NET功能是`Span<T>`类型。
- en: Using memory efficiently using spans
  id: totrans-1536
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用范围高效使用内存
- en: When manipulating arrays, you will often create new copies of subsets of existing
    ones so that you can process just the subset. This is not efficient because duplicate
    objects must be created in memory.
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作数组时，通常会创建现有子集的新副本，以便可以处理子集。这不是有效的，因为必须在内存中创建重复的对象。
- en: If you need to work with a subset of an array, use a **span** because it is
    like a window into the original array. This is more efficient in terms of memory
    usage and improves performance. Spans only work with arrays, not collections,
    because the memory must be contiguous.
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要处理数组的子集，请使用**span**，因为它就像是对原始数组的窗口。这在内存使用方面更有效，并提高了性能。Span只能用于数组，而不是集合，因为内存必须是连续的。
- en: 'Before we look at spans in more detail, we need to understand some related
    objects: indexes and ranges.'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 在更详细地查看范围之前，我们需要了解一些相关的对象：索引和范围。
- en: Identifying positions with the Index type
  id: totrans-1540
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用索引类型标识位置
- en: C# 8.0 introduced two features for identifying an item's index within an array
    and a range of items using two indexes.
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: C# 8.0引入了两个功能，用于使用两个索引标识数组中项目的索引和项目范围。
- en: 'You learned in the previous topic that objects in a list can be accessed by
    passing an integer into their indexer, as shown in the following code:'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 您在上一个主题中学到，可以通过将整数传递到它们的索引器中来访问列表中的对象，如下面的代码所示：
- en: '```cs'
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: int
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: index = 3
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: index = 3
- en: ;
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: Person p = people[index]; // fourth person in array
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: Person p = people[index]; //数组中的第四个人
- en: char
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: char
- en: letter = name[index]; // fourth letter in name
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: letter = name[index]; //名字中的第四个字母
- en: '```'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The `Index` value type is a more formal way of identifying a position, and
    supports counting from the end, as shown in the following code:'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index`值类型是一种更正式的标识位置的方式，并支持从末尾计数，如下面的代码所示：'
- en: '```cs'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // two ways to define the same index, 3 in from the start
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: //定义相同索引的两种方式，从开头开始的3
- en: Index i1 = new
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: Index i1 = new
- en: (value
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: (value
- en: ': 3'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: ); // counts from the start
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: ); //从开头计数
- en: Index i2 = 3
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: Index i2 = 3
- en: ; // using implicit int conversion operator
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: ; //使用隐式int转换操作符
- en: // two ways to define the same index, 5 in from the end
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: //定义相同索引的两种方式，从末尾开始的5
- en: Index i3 = new
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: Index i3 = new
- en: (value
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: (value
- en: ': 5'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: ': 5'
- en: ', fromEnd: true'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: ', fromEnd: true'
- en: );
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Index i4 = ^5
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: Index i4 = ^5
- en: ; // using the caret operator
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: ; //使用插入符操作符
- en: '```'
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Identifying ranges with the Range type
  id: totrans-1569
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用范围类型标识范围
- en: 'The `Range` value type uses `Index` values to indicate the start and end of
    its range, using its constructor, C# syntax, or its static methods, as shown in
    the following code:'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: '`Range`值类型使用`Index`值来指示其范围的开始和结束，使用其构造函数、C#语法或其静态方法，如下面的代码所示：'
- en: '```cs'
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Range r1 = new
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 范围r1 = new
- en: '(start: new'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: '(start: new'
- en: Index(3
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: Index(3
- en: '), end: new'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: '), end: new'
- en: Index(7
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: Index(7
- en: ));
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: ));
- en: Range r2 = new
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: 范围r2 = new
- en: '(start: 3'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: '(start: 3'
- en: ', end: 7'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: ', end: 7'
- en: ); // using implicit int conversion
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: ); //使用隐式int转换
- en: Range r3 = 3..7
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 范围r3 = 3..7
- en: ; // using C# 8.0 or later syntax
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: ; //使用C# 8.0或更高版本的语法
- en: Range r4 = Range.StartAt(3
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 范围r4 = Range.StartAt(3
- en: ); // from index 3 to last index
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: ); //从索引3到最后一个索引
- en: Range r5 = 3.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 范围r5 = 3.
- en: .; // from index 3 to last index
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: .; //从索引3到最后一个索引
- en: Range r6 = Range.EndAt(3
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 范围r6 = Range.EndAt(3
- en: ); // from index 0 to index 3
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: ); //从索引0到索引3
- en: Range r7 = ..3
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 范围r7 = ..3
- en: ; // from index 0 to index 3
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: ; //从索引0到索引3
- en: '```'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Extension methods have been added to `string` values (that internally use an
    array of `char` ), `int` arrays, and spans to make ranges easier to work with.
    These extension methods accept a range as a parameter and return a `Span<T>` .
    This makes them very memory efficient.
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加扩展方法到`string`值（内部使用`char`数组），`int`数组和范围，以使范围更容易使用。这些扩展方法接受范围作为参数并返回`Span<T>`。这使它们非常节省内存。
- en: Using indexes, ranges, and spans
  id: totrans-1594
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用索引、范围和范围
- en: 'Let''s explore using indexes and ranges to return spans:'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索使用索引和范围返回范围：
- en: Use your preferred code editor to add a new console app named `WorkingWithRanges`
    to the `Chapter08` solution/workspace.
  id: totrans-1596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将新的控制台应用命名为`WorkingWithRanges`添加到`Chapter08`解决方案/工作区中。
- en: In Visual Studio Code, select `WorkingWithRanges` as the active OmniSharp project.
  id: totrans-1597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`WorkingWithRanges`作为活动的OmniSharp项目。
- en: 'In `Program.cs` , type statements to compare using the `string` type''s `Substring`
    method using ranges to extract parts of someone''s name, as shown in the following
    code:'
  id: totrans-1598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，输入语句使用`string`类型的`Substring`方法进行比较，使用范围来提取某人姓名的部分，如下面的代码所示：
- en: '```cs'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: name = "Samantha Jones"
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: name = "Samantha Jones"
- en: ;
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: // Using Substring
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: //使用Substring
- en: int
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: lengthOfFirst = name.IndexOf(' '
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: lengthOfFirst = name.IndexOf(' '
- en: );
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: int
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: lengthOfLast = name.Length - lengthOfFirst - 1
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: lengthOfLast = name.Length - lengthOfFirst - 1
- en: ;
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: string
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: firstName = name.Substring(
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: firstName = name.Substring(
- en: 'startIndex: 0'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 'startIndex: 0'
- en: ','
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'length: lengthOfFirst);'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 'length: lengthOfFirst);'
- en: string
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: lastName = name.Substring(
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: lastName = name.Substring(
- en: 'startIndex: name.Length - lengthOfLast,'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 'startIndex: name.Length - lengthOfLast,'
- en: 'length: lengthOfLast);'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 'length: lengthOfLast);'
- en: 'WriteLine($"First name:'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: 'WriteLine($"名: '
- en: '{firstName}'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: '{firstName}'
- en: ', Last name:'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: ', 姓:'
- en: '{lastName}'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: '{lastName}'
- en: '"'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // Using spans
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: //使用范围
- en: ReadOnlySpan<char
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: ReadOnlySpan<char
- en: nameAsSpan = name.AsSpan();
  id: totrans-1627
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: nameAsSpan = name.AsSpan();
- en: ReadOnlySpan<char
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: ReadOnlySpan<char
- en: firstNameSpan = nameAsSpan[0.
  id: totrans-1629
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: firstNameSpan = nameAsSpan[0.
- en: .lengthOfFirst];
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: .lengthOfFirst];
- en: ReadOnlySpan<char
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: ReadOnlySpan<char
- en: lastNameSpan = nameAsSpan[^lengthOfLast..^0
  id: totrans-1632
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: lastNameSpan = nameAsSpan[^lengthOfLast..^0
- en: '];'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '];'
- en: 'WriteLine("First name: {0}, Last name: {1}"'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 'WriteLine("名: {0}, 姓: {1}"'
- en: ','
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'arg0: firstNameSpan.ToString(),'
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: firstNameSpan.ToString(),'
- en: 'arg1: lastNameSpan.ToString());'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: lastNameSpan.ToString());'
- en: '```'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1639
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'First name: Samantha, Last name: Jones'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: '名: Samantha, 姓: Jones'
- en: 'First name: Samantha, Last name: Jones'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: '名: Samantha, 姓: Jones'
- en: '```'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Working with network resources
  id: totrans-1644
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网络资源
- en: 'Sometimes you will need to work with network resources. The most common types
    in .NET for working with network resources are shown in the following table:'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您需要处理网络资源。在.NET中处理网络资源的最常见类型如下表所示：
- en: '| Namespace | Example type(s) | Description |'
  id: totrans-1646
  prefs: []
  type: TYPE_TB
  zh: '| 命名空间 | 示例类型 | 描述 |'
- en: '| `System.Net` | `Dns` , `Uri` , `Cookie` , `WebClient` , `IPAddress` | These
    are for working with DNS servers, URIs, IP addresses, and so on. |'
  id: totrans-1647
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net` | `Dns`，`Uri`，`Cookie`，`WebClient`，`IPAddress` | 这些用于与DNS服务器、URI、IP地址等进行交互。
    |'
- en: '| `System.Net` | `FtpStatusCode` , `FtpWebRequest` , `FtpWebResponse` | These
    are for working with FTP servers. |'
  id: totrans-1648
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net` | `FtpStatusCode`，`FtpWebRequest`，`FtpWebResponse` | 这些用于与FTP服务器进行交互。
    |'
- en: '| `System.Net` | `HttpStatusCode` , `HttpWebRequest` , `HttpWebResponse` |
    These are for working with HTTP servers; that is, websites and services. Types
    from `System.Net.Http` are easier to use. |'
  id: totrans-1649
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net` | `HttpStatusCode`，`HttpWebRequest`，`HttpWebResponse` | 这些用于与HTTP服务器进行交互；也就是网站和服务。`System.Net.Http`中的类型更容易使用。'
- en: '| `System.Net.Http` | `HttpClient` , `HttpMethod` , `HttpRequestMessage` ,
    `HttpResponseMessage` | These are for working with HTTP servers; that is, websites
    and services. You will learn how to use these in *Chapter 16* , *Building and
    Consuming Web Services* . |'
  id: totrans-1650
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net.Http` | `HttpClient`，`HttpMethod`，`HttpRequestMessage`，`HttpResponseMessage`
    | 这些用于与HTTP服务器进行交互；也就是网站和服务。您将在*第16章*中学习如何使用这些内容，*构建和使用Web服务*。'
- en: '| `System.Net.Mail` | `Attachment` , `MailAddress` , `MailMessage` , `SmtpClient`
    | These are for working with SMTP servers; that is, sending email messages. |'
  id: totrans-1651
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net.Mail` | `Attachment`，`MailAddress`，`MailMessage`，`SmtpClient`
    | 这些用于与SMTP服务器进行交互；也就是发送电子邮件消息。 |'
- en: '| `System.Net .NetworkInformation` | `IPStatus` , `NetworkChange` , `Ping`
    , `TcpStatistics` | These are for working with low-level network protocols. |'
  id: totrans-1652
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net .NetworkInformation` | `IPStatus`，`NetworkChange`，`Ping`，`TcpStatistics`
    | 这些用于处理低级网络协议。 |'
- en: Working with URIs, DNS, and IP addresses
  id: totrans-1653
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理URI、DNS和IP地址
- en: 'Let''s explore some common types for working with network resources:'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些用于处理网络资源的常见类型：
- en: Use your preferred code editor to add a new console app named `WorkingWithNetworkResources`
    to the `Chapter08` solution/workspace.
  id: totrans-1655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器向`Chapter08`解决方案/工作区添加一个名为`WorkingWithNetworkResources`的新控制台应用程序。
- en: In Visual Studio Code, select `WorkingWithNetworkResources` as the active OmniSharp
    project.
  id: totrans-1656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`WorkingWithNetworkResources`作为活动的OmniSharp项目。
- en: 'At the top of `Program.cs` , import the namespace for working with the network,
    as shown in the following code:'
  id: totrans-1657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入用于处理网络的命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Net; // IPHostEntry, Dns, IPAddress
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: System.Net; // IPHostEntry, Dns, IPAddress
- en: '```'
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Type statements to prompt the user to enter a website address, and then use
    the `Uri` type to break it down into its parts, including the scheme (HTTP, FTP,
    and so on), port number, and host, as shown in the following code:'
  id: totrans-1662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写语句提示用户输入网站地址，然后使用`Uri`类型将其分解为其部分，包括方案（HTTP、FTP等）、端口号和主机，如下面的代码所示：
- en: '```cs'
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Write("Enter a valid web address: "'
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入有效的网址："
- en: );
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string? url = ReadLine();
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: string? url = ReadLine();
- en: if
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (string
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: （字符串
- en: .IsNullOrWhiteSpace(url))
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: .IsNullOrWhiteSpace(url))
- en: '{'
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: url = "https://stackoverflow.com/search?q=securestring"
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: url = "https://stackoverflow.com/search?q=securestring"
- en: ;
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Uri uri = new
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: Uri uri = new
- en: (url);
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: (url);
- en: 'WriteLine($"URL:'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"URL：
- en: '{url}'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: '{url}'
- en: '"'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Scheme:'
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"方案：
- en: '{uri.Scheme}'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: '{uri.Scheme}'
- en: '"'
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Port:'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"端口：
- en: '{uri.Port}'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: '{uri.Port}'
- en: '"'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Host:'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"主机：
- en: '{uri.Host}'
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: '{uri.Host}'
- en: '"'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Path:'
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"路径：
- en: '{uri.AbsolutePath}'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: '{uri.AbsolutePath}'
- en: '"'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Query:'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"查询：
- en: '{uri.Query}'
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: '{uri.Query}'
- en: '"'
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: For convenience, the code also allows the user to press ENTER to use an example
    URL.
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 为方便起见，该代码还允许用户按ENTER键使用示例URL。
- en: 'Run the code, enter a valid website address or press ENTER , and view the result,
    as shown in the following output:'
  id: totrans-1702
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入有效的网站地址或按ENTER键，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter a valid web address:'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: 输入有效的网址：
- en: 'URL: https://stackoverflow.com/search?q=securestring'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL: https://stackoverflow.com/search?q=securestring'
- en: 'Scheme: https'
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 方案：https
- en: 'Port: 443'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 端口：443
- en: 'Host: stackoverflow.com'
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 主机：stackoverflow.com
- en: 'Path: /search'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 路径：/search
- en: 'Query: ?q=securestring'
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: 查询：?q=securestring
- en: '```'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to get the IP address for the entered website, as shown in the
    following code:'
  id: totrans-1712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以获取输入网站的IP地址，如下面的代码所示：
- en: '```cs'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: IPHostEntry entry = Dns.GetHostEntry(uri.Host);
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: IPHostEntry entry = Dns.GetHostEntry(uri.Host);
- en: WriteLine($"
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{entry.HostName}'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: '{entry.HostName}'
- en: has the following IP addresses:"
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 具有以下IP地址：
- en: );
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (IPAddress address in
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: （IPAddress address in
- en: entry.AddressList)
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: entry.AddressList)
- en: '{'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{address}'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: '{address}'
- en: (
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '{address.AddressFamily}'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: '{address.AddressFamily}'
- en: )"
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: )"
- en: );
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, enter a valid website address or press ENTER , and view the result,
    as shown in the following output:'
  id: totrans-1731
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入有效的网站地址或按ENTER键，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'stackoverflow.com has the following IP addresses:'
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: stackoverflow.com具有以下IP地址：
- en: 151.101.193.69 (InterNetwork)
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 151.101.193.69 (InterNetwork)
- en: 151.101.129.69 (InterNetwork)
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 151.101.129.69 (InterNetwork)
- en: 151.101.1.69 (InterNetwork)
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: 151.101.1.69 (InterNetwork)
- en: 151.101.65.69 (InterNetwork)
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 151.101.65.69 (InterNetwork)
- en: '```'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Pinging a server
  id: totrans-1739
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ping服务器
- en: 'Now you will add code to ping a web server to check its health:'
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将添加代码来ping一个Web服务器以检查其健康状况：
- en: 'Import the namespace to get more information about networks, as shown in the
    following code:'
  id: totrans-1741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入命名空间以获取有关网络的更多信息，如下面的代码所示：
- en: '```cs'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Net.NetworkInformation; // Ping, PingReply, IPStatus
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: System.Net.NetworkInformation; // Ping, PingReply, IPStatus
- en: '```'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to ping the entered website, as shown in the following code:'
  id: totrans-1746
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以ping输入的网站，如下面的代码所示：
- en: '```cs'
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: try
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: try
- en: '{'
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Ping ping = new
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: Ping ping = new
- en: ();
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: WriteLine("Pinging server. Please wait..."
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("正在ping服务器。请稍候..."
- en: );
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: PingReply reply = ping.Send(uri.Host);
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: PingReply reply = ping.Send(uri.Host);
- en: WriteLine($"
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{uri.Host}'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: '{uri.Host}'
- en: 'was pinged and replied:'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 被ping并回复：
- en: '{reply.Status}'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: '{reply.Status}'
- en: ."
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: ."
- en: );
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: if
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (reply.Status == IPStatus.Success)
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: (reply.Status == IPStatus.Success)
- en: '{'
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Reply from {0} took {1:N0}ms"
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("来自{0}的回复花费了{1:N0}毫秒"
- en: ','
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'arg0: reply.Address,'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: reply.Address,'
- en: 'arg1: reply.RoundtripTime);'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：reply.RoundtripTime);
- en: '}'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: catch (Exception ex)
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: catch (Exception ex)
- en: '{'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{ex.GetType().ToString()}'
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: '{ex.GetType().ToString()}'
- en: says
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: 说
- en: '{ex.Message}'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: '{ex.Message}'
- en: '"'
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, press ENTER , and view the result, as shown in the following
    output on macOS:'
  id: totrans-1780
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，按ENTER，并查看结果，如下面在macOS上的输出所示：
- en: '```cs'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Pinging server. Please wait...
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: 正在ping服务器。请稍候...
- en: 'stackoverflow.com was pinged and replied: Success.'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: stackoverflow.com被ping并回复：成功。
- en: Reply from 151.101.193.69 took 18ms took 136ms
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: 来自151.101.193.69的回复需要18ms，需要136ms
- en: '```'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code again but this time enter [http://google.com](http://google.com)
    , as shown in the following output:'
  id: totrans-1786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，但这次输入[http://google.com](http://google.com)，如下面的输出所示：
- en: '```cs'
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter a valid web address: http://google.com'
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: 输入有效的网址：http://google.com
- en: 'URL: http://google.com'
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: URL：http://google.com
- en: 'Scheme: http'
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 方案：http
- en: 'Port: 80'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: 端口：80
- en: 'Host: google.com'
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: 主机：google.com
- en: 'Path: /'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: 路径：/
- en: 'Query:'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: 查询：
- en: 'google.com has the following IP addresses:'
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: google.com具有以下IP地址：
- en: 2a00:1450:4009:807::200e (InterNetworkV6)
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: 2a00:1450:4009:807::200e（InterNetworkV6）
- en: 216.58.204.238 (InterNetwork)
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: 216.58.204.238（InterNetwork）
- en: Pinging server. Please wait...
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 正在ping服务器。请稍候...
- en: 'google.com was pinged and replied: Success.'
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: google.com被ping并回复：成功。
- en: Reply from 2a00:1450:4009:807::200e took 24ms
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 来自2a00:1450:4009:807::200e的回复需要24ms
- en: '```'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Working with reflection and attributes
  id: totrans-1802
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用反射和属性
- en: '**Reflection** is a programming feature that allows code to understand and
    manipulate itself. An assembly is made up of up to four parts:'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: '**反射**是一种编程特性，允许代码理解和操作自身。程序集由最多四部分组成：'
- en: '**Assembly metadata and manifest** : Name, assembly, and file version, referenced
    assemblies, and so on.'
  id: totrans-1804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**程序集元数据和清单**：名称、程序集和文件版本、引用的程序集等。'
- en: '**Type metadata** : Information about the types, their members, and so on.'
  id: totrans-1805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型元数据**：关于类型、它们的成员等的信息。'
- en: '**IL code** : Implementation of methods, properties, constructors, and so on.'
  id: totrans-1806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IL代码**：方法、属性、构造函数等的实现。'
- en: '**Embedded resources** (optional): Images, strings, JavaScript, and so on.'
  id: totrans-1807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式资源**（可选）：图像、字符串、JavaScript等。'
- en: The metadata comprises items of information about your code. The metadata is
    generated automatically from your code (for example, information about the types
    and members) or applied to your code using attributes.
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据包括有关您的代码的信息项。元数据是从您的代码自动生成的（例如，有关类型和成员的信息），或者使用属性应用于您的代码。
- en: 'Attributes can be applied at multiple levels: to assemblies, to types, and
    to their members, as shown in the following code:'
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以应用于多个级别：程序集，类型及其成员，如下面的代码所示：
- en: '```cs'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // an assembly-level attribute
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: // 一个程序集级属性
- en: '[assembly: AssemblyTitle('
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: '[assembly: AssemblyTitle('
- en: '"Working with Reflection"'
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: '"使用反射"'
- en: )
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: // a type-level attribute
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: //一个类型级属性
- en: '[Serializable'
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: '[Serializable'
- en: ']'
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Person
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 人
- en: '{'
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // a member-level attribute
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: //一个成员级属性
- en: '[Obsolete('
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: 过时的(
- en: '"Deprecated: use Run instead."'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: '"已弃用：请改用Run。"'
- en: )
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: void
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Walk
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: 步行
- en: ()
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Attribute-based programming is used a lot in app models like ASP.NET Core to
    enable features like routing, security, and caching.
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: 基于属性的编程在应用程序模型中被广泛使用，如ASP.NET Core，以启用路由、安全性和缓存等功能。
- en: Versioning of assemblies
  id: totrans-1836
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序集的版本控制
- en: 'Version numbers in .NET are a combination of three numbers, with two optional
    additions. If you follow the rules of semantic versioning, the three numbers denote
    the following:'
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: .NET中的版本号是三个数字的组合，还有两个可选的附加项。如果遵循语义版本控制的规则，这三个数字表示以下内容：
- en: '**Major** : Breaking changes.'
  id: totrans-1838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要**：破坏性更改。'
- en: '**Minor** : Non-breaking changes, including new features, and often bug fixes.'
  id: totrans-1839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要**：非破坏性更改，包括新功能，通常还包括错误修复。'
- en: '**Patch** : Non-breaking bug fixes.'
  id: totrans-1840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补丁**：非破坏性错误修复。'
- en: '**Good Practice** : When updating a NuGet package that you already use in a
    project, to be safe you should specify an optional flag to make sure that you
    only upgrade to the highest minor to avoid breaking changes, or to the highest
    patch if you are extra cautious and only want to receive bug fixes, as shown in
    the following commands: `Update-Package Newtonsoft.Json -ToHighestMinor` or `Update-Package
    Newtonsoft.Json -ToHighestPatch` .'
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当更新项目中已使用的NuGet包时，为了安全起见，您应该指定一个可选标志，以确保仅升级到最高的次要版本以避免破坏性更改，或者如果您特别谨慎并且只想接收错误修复，则升级到最高的补丁，如下面的命令所示：`Update-Package
    Newtonsoft.Json -ToHighestMinor`或`Update-Package Newtonsoft.Json -ToHighestPatch`。'
- en: 'Optionally, a version can include these:'
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，版本可以包括这些内容：
- en: '**Prerelease** : Unsupported preview releases.'
  id: totrans-1843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布**：不支持的预览版本。'
- en: '**Build number** : Nightly builds.'
  id: totrans-1844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建号**：每夜构建。'
- en: '**Good Practice** : Follow the rules of semantic versioning, as described at
    the following link: [http://semver.org](http://semver.org)'
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：遵循语义版本控制的规则，如下链接所述：[http://semver.org](http://semver.org)'
- en: Reading assembly metadata
  id: totrans-1846
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取程序集元数据
- en: 'Let''s explore working with attributes:'
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索使用属性：
- en: Use your preferred code editor to add a new console app named `WorkingWithReflection`
    to the `Chapter08` solution/workspace.
  id: totrans-1848
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器向`Chapter08`解决方案/工作区添加一个名为`WorkingWithReflection`的新控制台应用程序。
- en: In Visual Studio Code, select `WorkingWithReflection` as the active OmniSharp
    project.
  id: totrans-1849
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`WorkingWithReflection`作为活动的OmniSharp项目。
- en: 'At the top of `Program.cs` , import the namespace for reflection, as shown
    in the following code:'
  id: totrans-1850
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入反射的命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Reflection; // Assembly
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: System.Reflection; //程序集
- en: '```'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to get the console app''s assembly, output its name and location,
    and get all assembly-level attributes and output their types, as shown in the
    following code:'
  id: totrans-1855
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以获取控制台应用程序的程序集，输出其名称和位置，并获取所有程序集级属性并输出它们的类型，如下面的代码所示：
- en: '```cs'
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine("Assembly metadata:"
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("程序集元数据："
- en: );
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Assembly? assembly = Assembly.GetEntryAssembly();
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 程序集？assembly = Assembly.GetEntryAssembly();
- en: if
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (assembly is
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: （程序集是
- en: 'null'
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: )
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Failed to get entry assembly."
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("无法获取入口程序集。"
- en: );
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: return
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: ;
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'WriteLine($"  Full name:'
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"  全名：
- en: '{assembly.FullName}'
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: '{assembly.FullName}'
- en: '"'
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"  Location:'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"  位置：
- en: '{assembly.Location}'
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: '{assembly.Location}'
- en: '"'
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: IEnumerable<Attribute> attributes = assembly.GetCustomAttributes();
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<Attribute>属性= assembly.GetCustomAttributes();
- en: WriteLine($"  Assembly-level attributes:"
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"  程序集级别属性："
- en: );
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Attribute a in
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: （在属性a中
- en: attributes)
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 属性）
- en: '{'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{a.GetType()}'
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: '{a.GetType()}'
- en: '"'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1891
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Assembly metadata:'
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 程序集元数据：
- en: 'Full name: WorkingWithReflection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: 全名：WorkingWithReflection，版本=1.0.0.0，文化=中性，公钥令牌=null
- en: 'Location: /Users/markjprice/Code/Chapter08/WorkingWithReflection/bin/Debug/net6.0/WorkingWithReflection.dll'
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：/Users/markjprice/Code/Chapter08/WorkingWithReflection/bin/Debug/net6.0/WorkingWithReflection.dll
- en: 'Assembly-level attributes:'
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 程序集级别属性：
- en: System.Runtime.CompilerServices.CompilationRelaxationsAttribute
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: System.Runtime.CompilerServices.CompilationRelaxationsAttribute
- en: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。运行时。编译器。RuntimeCompatibilityAttribute
- en: System.Diagnostics.DebuggableAttribute
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。诊断。DebuggableAttribute
- en: System.Runtime.Versioning.TargetFrameworkAttribute
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。运行时。版本。TargetFrameworkAttribute
- en: System.Reflection.AssemblyCompanyAttribute
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: System.Reflection.AssemblyCompanyAttribute
- en: System.Reflection.AssemblyConfigurationAttribute
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。反射。AssemblyConfigurationAttribute
- en: System.Reflection.AssemblyFileVersionAttribute
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: System.Reflection.AssemblyFileVersionAttribute
- en: System.Reflection.AssemblyInformationalVersionAttribute
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。反射。AssemblyInformationalVersionAttribute
- en: System.Reflection.AssemblyProductAttribute
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。反射。AssemblyProductAttribute
- en: System.Reflection.AssemblyTitleAttribute
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 系统。反射。AssemblyTitleAttribute
- en: '```'
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note that because the full name of an assembly must uniquely identify the assembly,
    it is a combination of the following:'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，因为程序集的完整名称必须唯一标识程序集，它是以下内容的组合：
- en: '**Name** , for example, `WorkingWithReflection`'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**，例如，`WorkingWithReflection`'
- en: '**Version** , for example, `1.0.0.0`'
  id: totrans-1910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**，例如，`1.0.0.0`'
- en: '**Culture** , for example, `neutral`'
  id: totrans-1911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文化**，例如，`中性`'
- en: '**Public key token** , although this can be `null`'
  id: totrans-1912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公钥令牌**，尽管这可以是`null`'
- en: Now that we know some of the attributes decorating the assembly, we can ask
    for them specifically.
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道一些装饰程序集的属性，我们可以专门要求它们。
- en: 'Add statements to get the `AssemblyInformationalVersionAttribute` and `AssemblyCompanyAttribute`
    classes and then output their values, as shown in the following code:'
  id: totrans-1914
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以获取`AssemblyInformationalVersionAttribute`和`AssemblyCompanyAttribute`类，然后输出它们的值，如下面的代码所示：
- en: '```cs'
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: AssemblyInformationalVersionAttribute? version = assembly
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: AssemblyInformationalVersionAttribute?版本= assembly
- en: .GetCustomAttribute<AssemblyInformationalVersionAttribute>();
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: .GetCustomAttribute<AssemblyInformationalVersionAttribute>();
- en: 'WriteLine($"  Version:'
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"  版本：
- en: '{version?.InformationalVersion}'
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: '{version?.InformationalVersion}'
- en: '"'
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: AssemblyCompanyAttribute? company = assembly
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: AssemblyCompanyAttribute?公司= assembly
- en: .GetCustomAttribute<AssemblyCompanyAttribute>();
  id: totrans-1923
  prefs: []
  type: TYPE_NORMAL
  zh: .GetCustomAttribute<AssemblyCompanyAttribute>();
- en: 'WriteLine($"  Company:'
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"  公司：
- en: '{company?.Company}'
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: '{company?.Company}'
- en: '"'
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1929
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Version: 1.0.0'
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：1.0.0
- en: 'Company: WorkingWithReflection'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: 公司：WorkingWithReflection
- en: '```'
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Hmmm, unless you set the version, it defaults to 1.0.0, and unless you set
    the company, it defaults to the name of the assembly. Let''s explicitly set this
    information. The legacy .NET Framework way to set these values was to add attributes
    in the C# source code file, as shown in the following code:'
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，除非您设置版本，否则默认为1.0.0，除非您设置公司，否则默认为程序集的名称。让我们明确设置这些信息。设置这些值的传统.NET Framework方式是在C#源代码文件中添加属性，如下面的代码所示：
- en: '```cs'
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[assembly: AssemblyCompany('
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
  zh: '[程序集：公司('
- en: '"Packt Publishing"'
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: '"Packt Publishing"'
- en: )
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[assembly: AssemblyInformationalVersion('
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
  zh: '[程序集：AssemblyInformationalVersion('
- en: '"1.3.0"'
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: '"1.3.0"'
- en: )
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '```'
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The Roslyn compiler used by .NET sets these attributes automatically, so we
    can't use the old way. Instead, they must be set in the project file.
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
  zh: .NET使用的Roslyn编译器会自动设置这些属性，因此我们无法使用旧的方式。相反，它们必须在项目文件中设置。
- en: 'Edit the `WorkingWithReflection.csproj` project file to add elements for version
    and company, as shown highlighted in the following markup:'
  id: totrans-1946
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`WorkingWithReflection.csproj`项目文件，添加版本和公司元素，如下面标记中所示：
- en: '```cs'
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: '**<Version>**'
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: '**<版本>**'
- en: '**6.3.12**'
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: '**6.3.12**'
- en: '**</Version>**'
  id: totrans-1958
  prefs: []
  type: TYPE_NORMAL
  zh: '**</版本>**'
- en: '**<Company>Packt Publishing</Company>**'
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: '**<Company>Packt Publishing</Company>**'
- en: </PropertyGroup>
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: </Project>
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-1962
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1963
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Version: 6.3.12'
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：6.3.12
- en: 'Company: Packt Publishing'
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: 公司：Packt Publishing
- en: '```'
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Creating custom attributes
  id: totrans-1968
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义属性
- en: 'You can define your own attributes by inheriting from the `Attribute` class:'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过从`Attribute`类继承来定义自己的属性：
- en: Add a class file to your project named `CoderAttribute.cs` .
  id: totrans-1970
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个名为`CoderAttribute.cs`的类文件添加到您的项目中。
- en: 'Define an attribute class that can decorate either classes or methods with
    two properties to store the name of a coder and the date they last modified some
    code, as shown in the following code:'
  id: totrans-1971
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个属性类，可以用两个属性装饰类或方法，用于存储编码者的名称和他们最后修改某些代码的日期，如下面的代码所示：
- en: '```cs'
  id: totrans-1972
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Packt.Shared
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method,'
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
  zh: '[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method,'
- en: AllowMultiple = true)
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
  zh: AllowMultiple = true)
- en: ']'
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: CoderAttribute
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: CoderAttribute
- en: ': Attribute'
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
  zh: ：属性
- en: '{'
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: Coder { get
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
  zh: Coder {获取
- en: ; set
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: DateTime LastModified { get
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间LastModified {获取
- en: ; set
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: CoderAttribute
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
  zh: CoderAttribute
- en: (
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: coder,
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: 编码者，
- en: string
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: lastModified
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: lastModified
- en: )
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Coder = coder;
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: Coder = coder;
- en: LastModified = DateTime.Parse(lastModified);
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: LastModified = DateTime.Parse(lastModified);
- en: '}'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , import some namespaces, as shown in the following code:'
  id: totrans-2007
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入一些命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Runtime.CompilerServices; // CompilerGeneratedAttribute
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
  zh: System.Runtime.CompilerServices; // CompilerGeneratedAttribute
- en: using
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Packt.Shared; // CoderAttribute
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared; // CoderAttribute
- en: '```'
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the bottom of `Program.cs` , add a class with a method, and decorate the
    method with the `Coder` attribute with data about two coders, as shown in the
    following code:'
  id: totrans-2014
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，添加一个带有方法的类，并使用`Coder`属性装饰该方法，其中包含有关两个编码器的数据，如下面的代码所示：
- en: '```cs'
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: class
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Animal
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: 动物
- en: '{'
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '[Coder('
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: '[Coder（'
- en: '"Mark Price"'
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: “Mark Price”
- en: ','
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"22 August 2021"'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: “2021年8月22日”
- en: )
  id: totrans-2023
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ']'
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[Coder('
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: '[Coder（'
- en: '"Johnni Rasmussen"'
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: “Johnni Rasmussen”
- en: ','
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"13 September 2021"'
  id: totrans-2028
  prefs: []
  type: TYPE_NORMAL
  zh: “2021年9月13日”
- en: )
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ']'
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: void
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: Speak
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
  zh: 说
- en: ()
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Woof..."
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“Woof...”
- en: );
  id: totrans-2037
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2039
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , above the `Animal` class, add code to get the types, enumerate
    their members, read any `Coder` attributes on those members, and output the information,
    as shown in the following code:'
  id: totrans-2041
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在`Animal`类的上面，添加代码以获取类型，枚举其成员，读取这些成员上的任何`Coder`属性，并输出信息，如下面的代码所示：
- en: '```cs'
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine();
  id: totrans-2043
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（）;
- en: WriteLine($"* Types:"
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“*类型：”
- en: );
  id: totrans-2045
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Type[] types = assembly.GetTypes();
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: Type[] types = assembly.GetTypes（）;
- en: foreach
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Type type in
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: （Type type in
- en: types)
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
  zh: types）
- en: '{'
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine();
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（）;
- en: 'WriteLine($"Type:'
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“类型：
- en: '{type.FullName}'
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: '{type.FullName}'
- en: '"'
  id: totrans-2054
  prefs: []
  type: TYPE_NORMAL
  zh: “
- en: );
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: MemberInfo[] members = type.GetMembers();
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: MemberInfo[] members = type.GetMembers（）;
- en: foreach
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (MemberInfo member in
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: （MemberInfo member in
- en: members)
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: 成员）
- en: '{'
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'WriteLine("{0}: {1} ({2})"'
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“{0}：{1}（{2}）”）;
- en: ','
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: member.MemberType,'
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：member.MemberType，
- en: 'arg1: member.Name,'
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：member.Name，
- en: 'arg2: member.DeclaringType?.Name);'
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
  zh: arg2：member.DeclaringType？.Name）;
- en: IOrderedEnumerable<CoderAttribute> coders =
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
  zh: IOrderedEnumerable<CoderAttribute> coders =
- en: member.GetCustomAttributes<CoderAttribute>()
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
  zh: member.GetCustomAttributes<CoderAttribute>()
- en: .OrderByDescending(c => c.LastModified);
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderByDescending（c => c.LastModified）;
- en: foreach
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (CoderAttribute coder in
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
  zh: （CoderAttribute coder in
- en: coders)
  id: totrans-2071
  prefs: []
  type: TYPE_NORMAL
  zh: coders）
- en: '{'
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("-> Modified by {0} on {1}"
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“->由{0}于{1}修改”
- en: ','
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: coder.Coder, coder.LastModified.ToShortDateString());
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: coder.Coder，coder.LastModified.ToShortDateString（））;
- en: '}'
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following partial output:'
  id: totrans-2080
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的部分输出所示：
- en: '```cs'
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '* Types:'
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
  zh: '*类型：'
- en: '...'
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'Type: Animal'
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：Animal
- en: 'Method: Speak (Animal)'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：Speak（Animal）
- en: ->
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: ->
- en: Modified by Johnni Rasmussen on 13/09/2021
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
  zh: 由Johnni Rasmussen于2021年9月13日修改
- en: ->
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: ->
- en: Modified by Mark Price on 22/08/2021
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: 由Mark Price于2021年8月22日修改
- en: 'Method: GetType (Object)'
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：GetType（Object）
- en: 'Method: ToString (Object)'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：ToString（Object）
- en: 'Method: Equals (Object)'
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：Equals（Object）
- en: 'Method: GetHashCode (Object)'
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：GetHashCode（Object）
- en: 'Constructor: .ctor (Program)'
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数：.ctor（Program）
- en: '...'
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'Type: <Program>$+<>c'
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：<Program>$+<>c
- en: 'Method: GetType (Object)'
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：GetType（Object）
- en: 'Method: ToString (Object)'
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：ToString（Object）
- en: 'Method: Equals (Object)'
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：Equals（Object）
- en: 'Method: GetHashCode (Object)'
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：GetHashCode（Object）
- en: 'Constructor: .ctor (<>c)'
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数：.ctor（<>c）
- en: 'Field: <>9 (<>c)'
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: 字段：<>9（<>c）
- en: 'Field: <>9__0_0 (<>c)'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: 字段：<>9__0_0（<>c）
- en: '```'
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: What is the `<Program>$+<>c` type?
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
  zh: '`<Program>$+<>c`类型是什么？'
- en: It is a compiler-generated **display class** . `<>` indicates compiler-generated
    and `c` indicates a display class. They are undocumented implementation details
    of the compiler and could change at any time. You can ignore them, so as an optional
    challenge, add statements to your console application to filter compiler-generated
    types by skipping types decorated with `CompilerGeneratedAttribute` .
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个编译器生成的**显示类**。`<>`表示编译器生成，`c`表示显示类。它们是编译器的未记录的实现细节，随时可能更改。您可以忽略它们，因此作为一个可选的挑战，添加语句到您的控制台应用程序，通过跳过使用`CompilerGeneratedAttribute`装饰的类型来过滤编译器生成的类型。
- en: Doing more with reflection
  id: totrans-2107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用反射做更多事情
- en: 'This is just a taster of what can be achieved with reflection. We only used
    reflection to read metadata from our code. Reflection can also do the following:'
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是反射可以实现的一小部分。我们只使用反射从我们的代码中读取元数据。反射还可以做到以下事情：
- en: '**Dynamically load assemblies that are not currently referenced** : [https://docs.microsoft.com/en-us/dotnet/standard/assembly/unloadability](https://docs.microsoft.com/en-us/dotnet/standard/assembly/unloadability)'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态加载当前未引用的程序集**：[https://docs.microsoft.com/en-us/dotnet/standard/assembly/unloadability](https://docs.microsoft.com/en-us/dotnet/standard/assembly/unloadability)'
- en: '**Dynamically execute code** : [https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodbase.invoke](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodbase.invoke)'
  id: totrans-2110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态执行代码**：[https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodbase.invoke](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodbase.invoke)'
- en: '**Dynamically generate new code and assemblies** : [https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.assemblybuilder](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.assemblybuilder)'
  id: totrans-2111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态生成新代码和程序集**：[https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.assemblybuilder](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.assemblybuilder)'
- en: Working with images
  id: totrans-2112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理图像
- en: ImageSharp is a third-party cross-platform 2D graphics library. When .NET Core
    1.0 was in development, there was negative feedback from the community about the
    missing `System.Drawing` namespace for working with 2D images.
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: ImageSharp是一个第三方跨平台的2D图形库。当.NET Core 1.0正在开发时，社区对缺少用于处理2D图像的`System.Drawing`命名空间发出了负面反馈。
- en: The **ImageSharp** project was started to fill that gap for modern .NET applications.
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: '**ImageSharp**项目的开始是为了填补现代.NET应用程序的这一空白。'
- en: In their official documentation for `System.Drawing` , Microsoft says, "The
    `System.Drawing` namespace is not recommended for new development due to not being
    supported within a Windows or ASP.NET service, and it is not cross-platform. ImageSharp
    and SkiaSharp are recommended as alternatives."
  id: totrans-2115
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们对`System.Drawing`的官方文档中，微软表示：“不建议在Windows或ASP.NET服务中使用`System.Drawing`命名空间，因为它不受支持，也不跨平台。建议使用ImageSharp和SkiaSharp作为替代方案。”
- en: 'Let us see what can be achieved with ImageSharp:'
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看ImageSharp可以实现什么：
- en: Use your preferred code editor to add a new console app named `WorkingWithImages`
    to the `Chapter08` solution/workspace.
  id: totrans-2117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将新的控制台应用程序命名为`WorkingWithImages`添加到`Chapter08`解决方案/工作区中。
- en: In Visual Studio Code, select `WorkingWithImages` as the active OmniSharp project.
  id: totrans-2118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`WorkingWithImages`作为活动的OmniSharp项目。
- en: 'Create an `images` folder and download the nine images from the following link:
    [https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories](https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories)'
  id: totrans-2119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`images`文件夹，并从以下链接下载九张图片：[https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories](https://github.com/markjprice/cs10dotnet6/tree/master/Assets/Categories)
- en: 'Add a package reference for `SixLabors.ImageSharp` , as shown in the following
    markup:'
  id: totrans-2120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`SixLabors.ImageSharp`添加包引用，如下所示：
- en: '```cs'
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference Include="SixLabors.ImageSharp"
  id: totrans-2123
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="SixLabors.ImageSharp"
- en: Version="1.0.3"
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: Version="1.0.3"
- en: />
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: </ ItemGroup>
- en: '```'
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the `WorkingWithImages` project.
  id: totrans-2128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`WorkingWithImages`项目。
- en: 'At the top of `Program.cs` , import some namespaces for working with images,
    as shown in the following code:'
  id: totrans-2129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入一些用于处理图像的命名空间，如下所示：
- en: '```cs'
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: SixLabors.ImageSharp;
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: SixLabors.ImageSharp;
- en: using
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: SixLabors.ImageSharp.Processing;
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: SixLabors.ImageSharp.Processing;
- en: '```'
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , enter statements to convert all the files in the images folder
    into grayscale thumbnails at one-tenth size, as shown in the following code:'
  id: totrans-2136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，输入语句将图像文件夹中的所有文件转换为十分之一大小的灰度缩略图，如下所示：
- en: '```cs'
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: imagesFolder = Path.Combine(
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: imagesFolder = Path.Combine（
- en: Environment.CurrentDirectory, "images"
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
  zh: Environment.CurrentDirectory，"images"
- en: );
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: IEnumerable<string
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<string
- en: images =
  id: totrans-2143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 图像=
- en: Directory.EnumerateFiles(imagesFolder);
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: Directory.EnumerateFiles（imagesFolder）;
- en: foreach
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: （字符串
- en: imagePath in
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
  zh: imagePath中
- en: images)
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: 图像）
- en: '{'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: thumbnailPath = Path.Combine(
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: thumbnailPath = Path.Combine（
- en: Environment.CurrentDirectory, "images"
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: Environment.CurrentDirectory，"images"
- en: ','
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: Path.GetFileNameWithoutExtension(imagePath)
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: Path.GetFileNameWithoutExtension（imagePath）
- en: + "-thumbnail"
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: +“-thumbnail”
- en: + Path.GetExtension(imagePath));
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: + Path.GetExtension（imagePath））;
- en: using
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Image image = Image.Load(imagePath))
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: （Image image = Image.Load（imagePath））
- en: '{'
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: image.Mutate(x => x.Resize(image.Width / 10
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: image.Mutate（x => x.Resize（image.Width / 10
- en: ', image.Height / 10'
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: ，image.Height / 10
- en: ));
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: image.Mutate(x => x.Grayscale());
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: image.Mutate（x => x.Grayscale（））;
- en: image.Save(thumbnailPath);
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: image.Save（thumbnailPath）;
- en: '}'
  id: totrans-2165
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine("Image processing complete. View the images folder."
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（"图像处理完成。查看图像文件夹。"
- en: );
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '```'
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code.
  id: totrans-2170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。
- en: In the filesystem, open the `images` folder and note the much-smaller-in-bytes
    grayscale thumbnails, as shown in *Figure 8.1* :![A picture containing application
    Description automatically generated](img/Image00085.jpg)
  id: totrans-2171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件系统中，打开`images`文件夹，并注意以字节为单位要小得多的灰度缩略图，如*图8.1*所示：![包含应用程序描述的图片](img/Image00085.jpg)
- en: 'Figure 8.1: Images after processing'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：处理后的图像
- en: 'ImageSharp also has NuGet packages for programmatically drawing images and
    working with images on the web, as shown in the following list:'
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: ImageSharp还有用于以编程方式绘制图像和在Web上处理图像的NuGet包，如下列表所示：
- en: '`SixLabors.ImageSharp.Drawing`'
  id: totrans-2174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SixLabors.ImageSharp.Drawing`'
- en: '`SixLabors.ImageSharp.Web`'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SixLabors.ImageSharp.Web`'
- en: Internationalizing your code
  id: totrans-2176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 国际化您的代码
- en: 'Internationalization is the process of enabling your code to run correctly
    all over the world. It has two parts: **globalization** and **localization** .'
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化是使您的代码能够在全球范围内正确运行的过程。它有两个部分：**全球化**和**本地化**。
- en: Globalization is about writing your code to accommodate multiple languages and
    region combinations. The combination of a language and a region is known as a
    culture. It is important for your code to know both the language and region because,
    for example, the date and currency formats are different in Quebec and Paris,
    despite them both using the French language.
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: 全球化是关于编写代码以适应多种语言和区域组合的。语言和区域的组合称为文化。对于您的代码来说，知道语言和区域都很重要，因为例如，尽管魁北克和巴黎都使用法语，但日期和货币格式却不同。
- en: There are **International Organization for Standardization** (**ISO** ) codes
    for all culture combinations. For example, in the code `da-DK` , `da` indicates
    the Danish language and `DK` indicates the Denmark region, and in the code `fr-CA`
    , `fr` indicates the French language and `CA` indicates the Canada region.
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: 有关所有文化组合的**国际标准化组织**（**ISO**）代码。例如，在代码`da-DK`中，`da`表示丹麦语，`DK`表示丹麦地区，在代码`fr-CA`中，`fr`表示法语，`CA`表示加拿大地区。
- en: ISO is not an acronym. ISO is a reference to the Greek word *isos* (which means
    equal).
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: ISO不是一个首字母缩写词。 ISO是希腊词*isos*（意思是相等）的引用。
- en: Localization is about customizing the user interface to support a language,
    for example, changing the label of a button to be Close (`en` ) or Fermer (`fr`
    ). Since localization is more about the language, it doesn't always need to know
    about the region, although ironically enough, standardization (`en-US` ) and standardisation
    (`en-GB` ) suggest otherwise.
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化是关于定制用户界面以支持语言的，例如，将按钮的标签更改为Close（`en`）或Fermer（`fr`）。由于本地化更多关于语言，因此它并不总是需要了解区域，尽管具有讽刺意味的是，标准化（`en-US`）和标准化（`en-GB`）似乎表明了相反的情况。
- en: Detecting and changing the current culture
  id: totrans-2182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测和更改当前文化
- en: Internationalization is a huge topic on which several thousand-page books have
    been written. In this section, you will get a brief introduction to the basics
    using the `CultureInfo` type in the `System.Globalization` namespace.
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化是一个庞大的主题，已经写了几千页的书。在本节中，您将简要介绍使用`System.Globalization`命名空间中的`CultureInfo`类型的基础知识。
- en: 'Let''s write some code:'
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一些代码：
- en: Use your preferred code editor to add a new console app named `Internationalization`
    to the `Chapter08` solution/workspace.
  id: totrans-2185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将新的控制台应用程序命名为`Internationalization`添加到`Chapter08`解决方案/工作区中。
- en: In Visual Studio Code, select `Internationalization` as the active OmniSharp
    project.
  id: totrans-2186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`Internationalization`选择为活动的OmniSharp项目。
- en: 'At the top of `Program.cs` , import the namespace for using globalization types,
    as shown in the following code:'
  id: totrans-2187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入使用全球化类型的命名空间，如下所示：
- en: '```cs'
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Globalization; // CultureInfo
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: System.Globalization; // CultureInfo
- en: '```'
  id: totrans-2191
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to get the current globalization and localization cultures and
    output some information about them, and then prompt the user to enter a new culture
    code and show how that affects the formatting of common values such as dates and
    currency, as shown in the following code:'
  id: totrans-2192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以获取当前的全球化和本地化文化，并输出有关它们的一些信息，然后提示用户输入新的文化代码，并显示它如何影响常见值的格式，如日期和货币，如下面的代码所示：
- en: '```cs'
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: CultureInfo globalization = CultureInfo.CurrentCulture;
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
  zh: CultureInfo globalization = CultureInfo.CurrentCulture;
- en: CultureInfo localization = CultureInfo.CurrentUICulture;
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
  zh: CultureInfo localization = CultureInfo.CurrentUICulture;
- en: 'WriteLine("The current globalization culture is {0}: {1}"'
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("当前的全球化文化是{0}：{1}"
- en: ','
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: globalization.Name, globalization.DisplayName);
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: globalization.Name, globalization.DisplayName);
- en: 'WriteLine("The current localization culture is {0}: {1}"'
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("当前的本地化文化是{0}：{1}"
- en: ','
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: localization.Name, localization.DisplayName);
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: localization.Name, localization.DisplayName);
- en: WriteLine();
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: 'WriteLine("en-US: English (United States)"'
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("en-US：英语（美国）"
- en: );
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine("da-DK: Danish (Denmark)"'
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("da-DK：丹麦语（丹麦）"
- en: );
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine("fr-CA: French (Canada)"'
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("fr-CA：法语（加拿大）"
- en: );
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'Write("Enter an ISO culture code: "'
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入ISO文化代码："
- en: );
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? newCulture = ReadLine();'
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: ？newCulture= ReadLine();
- en: if
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (!string
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: (!字符串
- en: .IsNullOrEmpty(newCulture))
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: .IsNullOrEmpty(newCulture))
- en: '{'
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: CultureInfo ci = new
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
  zh: CultureInfo ci = new
- en: (newCulture);
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: （newCulture）;
- en: // change the current cultures
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
  zh: //更改当前的文化
- en: CultureInfo.CurrentCulture = ci;
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: CultureInfo.CurrentCulture = ci;
- en: CultureInfo.CurrentUICulture = ci;
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: CultureInfo.CurrentUICulture = ci;
- en: '}'
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine();
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: 'Write("Enter your name: "'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入您的名字："
- en: );
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? name = ReadLine();'
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: ？名字= ReadLine();
- en: 'Write("Enter your date of birth: "'
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入您的出生日期："
- en: );
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? dob = ReadLine();'
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: ？dob= ReadLine();
- en: 'Write("Enter your salary: "'
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入您的工资："
- en: );
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? salary = ReadLine();'
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: ？工资= ReadLine();
- en: DateTime date = DateTime.Parse(dob);
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime date = DateTime.Parse(dob);
- en: int
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: minutes = (int
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 分钟=（int
- en: )DateTime.Today.Subtract(date).TotalMinutes;
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
  zh: )DateTime.Today.Subtract(date).TotalMinutes;
- en: decimal
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: earns = decimal
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: earns=十进制
- en: .Parse(salary);
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
  zh: .Parse(工资);
- en: WriteLine(
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(
- en: '"{0} was born on a {1:dddd}, is {2:N0} minutes old, and earns {3:C}"'
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: '"{0}出生于{1:dddd}，已经{2:N0}分钟，工资为{3:C}"'
- en: ','
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: name, date, minutes, earns);
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: 名字，日期，分钟，赚取；
- en: '```'
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: When you run an application, it automatically sets its thread to use the culture
    of the operating system. I am running my code in London, UK, so the thread is
    set to English (United Kingdom).
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，它会自动将其线程设置为使用操作系统的文化。我在英国伦敦运行我的代码，所以线程被设置为英语（英国）。
- en: The code prompts the user to enter an alternative ISO code. This allows your
    applications to replace the default culture at runtime.
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: 代码提示用户输入替代的ISO代码。这允许您的应用程序在运行时替换默认的文化。
- en: The application then uses standard format codes to output the day of the week
    using format code `dddd` ; the number of minutes with thousand separators using
    format code `N0` ; and the salary with the currency symbol. These adapt automatically,
    based on the thread's culture.
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
  zh: 然后应用标准格式代码来输出星期几，使用格式代码`dddd`；使用格式代码`N0`输出带千位分隔符的分钟数；和带有货币符号的工资。这些会根据线程的文化自动调整。
- en: 'Run the code and enter `en-GB` for the ISO code and then enter some sample
    data including a date in a format valid for British English, as shown in the following
    output:'
  id: totrans-2251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并输入`en-GB`作为ISO代码，然后输入一些样本数据，包括一个符合英国英语格式的日期，如下面的输出所示：
- en: '```cs'
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter an ISO culture code: en-GB'
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: 输入ISO文化代码：en-GB
- en: 'Enter your name: Alice'
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的名字：爱丽丝
- en: 'Enter your date of birth: 30/3/1967'
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的出生日期：30/3/1967
- en: 'Enter your salary: 23500'
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的工资：23500
- en: Alice was born on a Thursday, is 25,469,280 minutes old, and earns
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: 爱丽丝出生于星期四，已经25,469,280分钟，工资为
- en: £23,500.00
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: £23,500.00
- en: '```'
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you enter `en-US` instead of `en-GB` , then you must enter the date using
    month/day/year.
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您输入`en-US`而不是`en-GB`，那么您必须使用月/日/年输入日期。
- en: 'Rerun the code and try a different culture, such as Danish in Denmark, as shown
    in the following output:'
  id: totrans-2261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行代码并尝试不同的文化，例如丹麦的丹麦语，如下面的输出所示：
- en: '```cs'
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter an ISO culture code: da-DK'
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: 输入ISO文化代码：da-DK
- en: 'Enter your name: Mikkel'
  id: totrans-2264
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的名字：米克尔
- en: 'Enter your date of birth: 12/3/1980'
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的出生日期：12/3/1980
- en: 'Enter your salary: 340000'
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的工资：340000
- en: Mikkel was born on a onsdag, is 18.656.640 minutes old, and earns 340.000,00
    kr.
  id: totrans-2267
  prefs: []
  type: TYPE_NORMAL
  zh: 米克尔出生于星期三，已经18,656,640分钟，工资为340,000.00 kr。
- en: '```'
  id: totrans-2268
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In this example, only the date and salary are globalized into Danish. The rest
    of the text is hardcoded as English. This book does not currently include how
    to translate text from one language to another. If you would like me to include
    that in the next edition, please let me know.
  id: totrans-2269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，只有日期和工资被全球化为丹麦语。其余的文本是硬编码为英语。本书目前不包括如何将文本从一种语言翻译成另一种语言。如果您希望我在下一版中包含这一点，请告诉我。
- en: '**Good Practice** : Consider whether your application needs to be internationalized
    and plan for that before you start coding! Write down all the pieces of text in
    the user interface that will need to be localized. Think about all the data that
    will need to be globalized (date formats, number formats, and sorting text behavior).'
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：在开始编码之前考虑您的应用程序是否需要国际化，并为此做好计划！记录下用户界面中需要本地化的所有文本片段。考虑所有需要全球化的数据（日期格式、数字格式和排序文本行为）。'
- en: Practicing and exploring
  id: totrans-2271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore with deeper research into the topics in this chapter.
  id: totrans-2272
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试您的知识和理解，进行一些实践，并深入研究本章主题。
- en: Exercise 8.1 – Test your knowledge
  id: totrans-2273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.1-测试您的知识
- en: 'Use the web to answer the following questions:'
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网络回答以下问题：
- en: What is the maximum number of characters that can be stored in a `string` variable?
  id: totrans-2275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`string`变量中最多可以存储多少个字符？
- en: When and why should you use a `SecureString` type?
  id: totrans-2276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时以及为什么应该使用`SecureString`类型？
- en: When is it appropriate to use a `StringBuilder` class?
  id: totrans-2277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时适合使用`StringBuilder`类？
- en: When should you use a `LinkedList<T>` class?
  id: totrans-2278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时应该使用`LinkedList<T>`类？
- en: When should you use a `SortedDictionary<T>` class rather than a `SortedList<T>`
    class?
  id: totrans-2279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时应该使用`SortedDictionary<T>`类而不是`SortedList<T>`类？
- en: What is the ISO culture code for Welsh?
  id: totrans-2280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 威尔士语的ISO文化代码是什么？
- en: What is the difference between localization, globalization, and internationalization?
  id: totrans-2281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地化、全球化和国际化之间有什么区别？
- en: In a regular expression, what does `$` mean?
  id: totrans-2282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在正则表达式中，$代表什么？
- en: In a regular expression, how can you represent digits?
  id: totrans-2283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在正则表达式中，如何表示数字？
- en: Why should you *not* use the official standard for email addresses to create
    a regular expression to validate a user's email address?
  id: totrans-2284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么*不*应该使用官方标准的电子邮件地址来创建用于验证用户电子邮件地址的正则表达式？
- en: Exercise 8.2 – Practice regular expressions
  id: totrans-2285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.2 – 练习正则表达式
- en: 'In the `Chapter08` solution/workspace, create a console application named `Exercise02`
    that prompts the user to enter a regular expression and then prompts the user
    to enter some input and compare the two for a match until the user presses *Esc*
    , as shown in the following output:'
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter08`解决方案/工作空间中，创建一个名为`Exercise02`的控制台应用程序，提示用户输入一个正则表达式，然后提示用户输入一些内容，并比较两者是否匹配，直到用户按下*Esc*，如下所示的输出：
- en: '```cs'
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: The default regular expression checks for at least one digit.
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的正则表达式检查是否至少有一个数字。
- en: 'Enter a regular expression (or press ENTER to use the default): ^[a-z]+$'
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个正则表达式（或按Enter键使用默认值）：^[a-z]+$
- en: 'Enter some input: apples'
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一些内容：apples
- en: apples matches ^[a-z]+$? True
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: apples匹配 ^[a-z]+$? True
- en: Press ESC to end or any key to try again.
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: 按ESC键结束或按任意键重试。
- en: 'Enter a regular expression (or press ENTER to use the default): ^[a-z]+$'
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个正则表达式（或按Enter键使用默认值）：^[a-z]+$
- en: 'Enter some input: abc123xyz'
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一些内容：abc123xyz
- en: abc123xyz matches ^[a-z]+$? False
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: abc123xyz匹配 ^[a-z]+$? False
- en: Press ESC to end or any key to try again.
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: 按ESC键结束或按任意键重试。
- en: '```'
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Exercise 8.3 – Practice writing extension methods
  id: totrans-2298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.3 – 练习编写扩展方法
- en: In the `Chapter08` solution/workspace, create a class library named `Exercise03`
    that defines extension methods that extend number types such as `BigInteger` and
    `int` with a method named `ToWords` that returns a `string` describing the number;
    for example, `18,000,000` would be eighteen million, and `18,456,002,032,011,000,007`
    would be eighteen quintillion, four hundred and fifty-six quadrillion, two trillion,
    thirty-two billion, eleven million, and seven.
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter08`解决方案/工作空间中，创建一个名为`Exercise03`的类库，定义扩展方法，扩展`BigInteger`和`int`等数字类型，其中包含一个名为`ToWords`的方法，返回描述该数字的`string`；例如，`18,000,000`将是一千八百万，`18,456,002,032,011,000,007`将是一千八百四十六万亿，二千零三十二亿，十一万，七。
- en: 'You can read more about names for large numbers at the following link: [https://en.wikipedia.org/wiki/Names_of_large_numbers](https://en.wikipedia.org/wiki/Names_of_large_numbers)'
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多关于大数字的名称：[https://en.wikipedia.org/wiki/Names_of_large_numbers](https://en.wikipedia.org/wiki/Names_of_large_numbers)
- en: Exercise 8.4 – Explore topics
  id: totrans-2301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习8.4 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖的主题的更多细节：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-8---working-with-common-net-types](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-8---working-with-common-net-types)'
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-8---working-with-common-net-types](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-8---working-with-common-net-types)'
- en: Summary
  id: totrans-2304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you explored some choices for types to store and manipulate
    numbers, dates and times, and text including regular expressions, and which collections
    to use for storing multiple items; worked with indexes, ranges, and spans; used
    some network resources; reflected on code and attributes; manipulated images using
    a Microsoft-recommended third-party library; and learned how to internationalize
    your code.
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您探讨了一些用于存储和操作数字、日期和时间以及文本的类型选择，包括正则表达式，以及用于存储多个项目的集合；使用索引、范围和跨度；使用了一些网络资源；反思了代码和属性；使用了一个微软推荐的第三方库来操作图像；并学会了如何国际化您的代码。
- en: In the next chapter, we will manage files and streams, encode and decode text,
    and perform serialization.
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将管理文件和流，对文本进行编码和解码，并执行序列化。
