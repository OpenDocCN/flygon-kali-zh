["```js\nclass Stack {\n    constructor() {\n\n    }\n}\n```", "```js\nconst sKey = {};\nconst items = new WeakMap();\n\nclass Stack {\n constructor() {\n items.set(sKey, [])\n    }\n}\n```", "```js\nconst sKey = {};\nconst items = new WeakMap();\n\nclass Stack {\n constructor() {\n items.set(sKey, []);\n    }\n\n push(element) {\n let stack = items.get(sKey);\n stack.push(element);\n    }\n\n pop() {\n let stack = items.get(sKey)\n return stack.pop()\n    }\n\n peek() {\n let stack = items.get(sKey);\n return stack[stack.length - 1];\n    }\n\n clear() {\n items.set(sKey, []);\n    }\n\n size() {\n return items.get(sKey).length;\n    }\n}\n```", "```js\nvar Stack = (() => {\n const sKey = {};\n const items = new WeakMap();\n\n class Stack {\n\n constructor() {\n items.set(sKey, []);\n        }\n\n push(element) {\n let stack = items.get(sKey);\n stack.push(element);\n        }\n\n pop() {\n let stack = items.get(sKey);\n return stack.pop();\n        }\n\n peek() {\n let stack = items.get(sKey);\n return stack[stack.length - 1];\n        }\n\n clear() {\n items.set(sKey, []);\n        }\n\n size() {\n return items.get(sKey).length;\n        }\n    }\n\n return Stack;\n})();\n```", "```js\n constructor() {\n        this.sKey = {};\n        this.items = new WeakMap();\n this.items.set(sKey, []);\n    }\n```", "```js\nvar stack = new Stack();\nstack.push(10);\nstack.push(20);\n\nconsole.log(stack.items); // prints undefined -> cannot be accessed directly   console.log(stack.size()); // prints 2\n\nconsole.log(stack.peek()); // prints 20   console.log(stack.pop()); // prints 20   console.log(stack.size()); // prints 1   stack.clear();\n\nconsole.log(stack.size()); // prints 0 \n```", "```js\n// AMD\nif (typeof define === 'function' && define.amd) {\n\n    define(function () { return Stack; });\n\n// NodeJS/CommonJS\n\n} else if (typeof exports === 'object') {\n\n    if (typeof module === 'object' && typeof module.exports ===\n    'object') {\n\n        exports = module.exports = Stack;\n    }\n\n// Browser\n\n} else {\n\n    window.Stack = Stack;\n}\n```", "```js\nnode -v\n```", "```js\nnode: command not found\n```", "```js\nnpm install -g @angular/cli\n```", "```js\nng\n```", "```js\nng new <project-name>\n```", "```js\n installing ng\n create .editorconfig\n create README.md\n create src/app/app.component.css\n create src/app/app.component.html\n create src/app/app.component.spec.ts\n create src/app/app.component.ts\n create src/app/app.module.ts\n create src/assets/.gitkeep\n create src/environments/environment.prod.ts\n create src/environments/environment.ts\n create src/favicon.ico\n create src/index.html\n create src/main.ts\n create src/polyfills.ts\n create src/styles.css\n create src/test.ts\n create src/tsconfig.app.json\n create src/tsconfig.spec.json\n create src/typings.d.ts\n create .angular-cli.json\n create e2e/app.e2e-spec.ts\n create e2e/app.po.ts\n create e2e/tsconfig.e2e.json\n create .gitignore\n create karma.conf.js\n create package.json\n create protractor.conf.js\n create tsconfig.json\n create tslint.json\n Installing packages for tooling via npm.\n Installed packages for tooling via npm.\n Project 'project-name' successfully created.\n```", "```js\nexport class Stack {\n private wmkey = {};\n private items = new WeakMap();\n\n constructor() {\n this.items.set(this.wmkey, []);\n    }\n\n push(element) {\n let stack = this.items.get(this.wmkey);\n stack.push(element);\n    }\n\n pop() {\n let stack = this.items.get(this.wmkey);\n return stack.pop();\n    }\n\n peek() {\n let stack = this.items.get(this.wmkey);\n return stack[stack.length - 1];\n    }\n\n clear() {\n this.items.set(this.wmkey, []);\n    }\n\n size() {\n return this.items.get(this.wmkey).length;\n    }\n}\n```", "```js\nng new back-button\n```", "```js\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'home',\n    template: 'home page' })\nexport class HomeComponent {\n\n}\n```", "```js\nimport { HomeComponent } from './home.component';\n\nexport const HomeRoutes = [\n    { path: 'home', component: HomeComponent },\n];\n\nexport const HomeComponents = [\n    HomeComponent\n];\n```", "```js\nimport { Routes } from '@angular/router';\nimport {AboutComponents, AboutRoutes} from \"./pages/about/about.routing\";\nimport {DashboardComponents, DashboardRoutes} from \"./pages/dashboard/dashboard.routing\";\nimport {HomeComponents, HomeRoutes} from \"./pages/home/home.routing\";\nimport {ProfileComponents, ProfileRoutes} from \"./pages/profile/profile.routing\";\n\nexport const routes: Routes = [\n    {\n path: '',\n redirectTo: '/home',\n pathMatch: 'full'\n  },\n    ...AboutRoutes,\n    ...DashboardRoutes,\n    ...HomeRoutes,\n    ...ProfileRoutes ];\n\nexport const navigatableComponents = [\n    ...AboutComponents,\n    ...DashboardComponents,\n    ...HomeComponents,\n    ...ProfileComponents ];\n```", "```js\n{\n path: '',\n redirectTo: '/home',\n pathMatch: 'full' }\n```", "```js\nimport { Router, NavigationEnd } from '@angular/router';\nimport { Stack } from './utils/stack';\n\n...\n...\n\nconstructor(private stack: Stack, private router: Router) {\n\n    // subscribe to the routers event\n this.router.events.subscribe((val) => {\n\n        // determine of router is telling us that it has ended\n        transition\n if(val instanceof NavigationEnd) {\n\n            // state change done, add to stack\n this.stack.push(val);\n        }\n    });\n}\n```", "```js\nnpm install --save @angular/material @angular/animations @angular/cdk\n```", "```js\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatButtonModule } from '@angular/material';\n\nimport { AppComponent } from './app.component';\nimport { RouterModule } from \"@angular/router\";\nimport { routes, navigatableComponents } from \"./app.routing\";\nimport { Stack } from \"./utils/stack\";\n\n// main angular module\n@NgModule({\n declarations: [\n        AppComponent,\n\n        // our components are imported here in the main module\n        ...navigatableComponents\n    ],\n imports: [\n        BrowserModule,\n        FormsModule,\n        HttpModule,\n\n        // our routes are used here\n        RouterModule.forRoot(routes),\n        BrowserAnimationsModule,\n\n // material module  MatButtonModule\n    ],\n providers: [\n        Stack\n    ],\n bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\n<nav>\n    <button mat-button \n        routerLink=\"/about\" \n        routerLinkActive=\"active\">\n      About\n    </button>\n    <button mat-button \n        routerLink=\"/dashboard\" \n        routerLinkActive=\"active\">\n      Dashboard\n    </button>\n    <button mat-button \n        routerLink=\"/home\" \n        routerLinkActive=\"active\">\n      Home\n    </button>\n    <button mat-button \n        routerLink=\"/profile\" routerLinkActive=\"active\">\n      Profile\n    </button>\n</nav>\n\n<router-outlet></router-outlet>\n\n<footer>\n    <button mat-fab (click)=\"goBack()\" >Back</button>\n</footer>\n```", "```js\ngoBack() {\n let current = this.stack.pop();\n let prev = this.stack.peek();\n\n if (prev) {\n this.stack.pop();\n\n        // angular provides nice little method to \n        // transition between the states using just the url if needed.\n this.router.navigateByUrl(prev.urlAfterRedirects);\n\n    } else {\n this.stack.push(current);\n    }\n}\n```", "```js\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {Router, NavigationEnd} from '@angular/router';\nimport {Stack} from \"./utils/stack\";\n\n@Component({\n selector: 'app-root',\n templateUrl: './app.component.html',\n styleUrls: ['./app.component.scss', './theme.scss'],\n encapsulation: ViewEncapsulation.None })\nexport class AppComponent {\n constructor(private stack: Stack, private router: Router) {\n this.router.events.subscribe((val) => {\n if(val instanceof NavigationEnd) {\n this.stack.push(val);\n            }\n        });\n    }\n\n goBack() {\n let current = this.stack.pop();\n let prev = this.stack.peek();\n\n if (prev) {\n this.stack.pop();\n this.router.navigateByUrl(prev.urlAfterRedirects);\n        } else {\n this.stack.push(current);\n        }\n    }\n}\n```", "```js\n.active {\n  color: red !important;\n}\n```", "```js\n@import '~@angular/material/theming';\n// Plus imports for other components in your app.   // Include the common styles for Angular Material. We include this here so that you only // have to load a single css file for Angular Material in your app. // Be sure that you only ever include this mixin once! @include mat-core();\n\n// Define the palettes for your theme using the Material Design palettes available in palette.scss // (imported above). For each palette, you can optionally specify a default, lighter, and darker // hue. $candy-app-primary: mat-palette($mat-indigo);\n$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);\n\n// The warn palette is optional (defaults to red). $candy-app-warn:    mat-palette($mat-red);\n\n// Create the theme object (a Sass map containing all of the palettes). $candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);\n\n// Include theme styles for core and each component used in your app. // Alternatively, you can import and @include the theme mixins for each component // that you are using. @include angular-material-theme($candy-app-theme);\n```", "```js\nng serve\n```", "```js\nng new parser\n```", "```js\ncd src/app\nmkdir utils\ntouch worker.js\n```", "```js\n...\n\"scripts\": [\n  \"app/utils/worker.js\" ],\n...\n```", "```js\nthis.worker = new Worker('scripts.bundle.js');\n```", "```js\nnpm install --save @angular/material @angular/animations @angular/cdk\n```", "```js\n<mat-grid-list cols=\"2\" rowHeight=\"2:1\">\n    <mat-grid-tile>\n        <textarea (keyup)=\"codeChange()\" [(ngModel)]=\"code\"></textarea>\n    </mat-grid-tile>\n    <mat-grid-tile>\n        <div>\n            Result: {{result}}\n        </div>\n    </mat-grid-tile>\n</mat-grid-list>\n```", "```js\nthis.worker = new Worker('scripts.bundle.js');\n\nthis.worker.addEventListener('message', (e) => {\n this.result = e.data;\n});\n```", "```js\ncodeChange() {\n this.worker.postMessage(this.code);\n}\n```", "```js\ninit();\n\nfunction init() {\n   self.addEventListener('message', function(e) {\n      var code = e.data;\n\n      if(typeof code !== 'string' || code.match(/.*[a-zA-Z]+.*/g)) {\n         respond('Error! Cannot evaluate complex expressions yet. Please try\n         again later');\n      } else {\n         respond(evaluate(convert(code)));\n      }\n   });\n}\n```", "```js\nnpm start\n```", "```js\nvar a = 100;\n```", "```js\n(1 + 1) * 2\n```", "```js\nvar operators = {\n \"^\": {\n priority: 4,\n associativity: \"rtl\" // right to left\n    },\n \"*\": {\n priority: 3,\n associativity: \"ltr\" // left to right\n    },\n \"/\": {\n priority: 3,\n associativity: \"ltr\"\n    },\n \"+\": {\n priority: 2,\n associativity: \"ltr\"\n    },\n \"-\": {\n priority: 2,\n associativity: \"ltr\"\n    }\n};\n```", "```js\n(1 + 1) * 2\n```", "```js\n[\"(\", \"1\", \"+\", \"1\", \")\", \"*\", \"2\"]\n```", "```js\nfunction clean(arr) {\n return arr.filter(function(a) {\n return a !== \"\";\n    });\n}\n```", "```js\nexpr = clean(expr.trim().replace(/\\s+/g, \"\").split(/([\\+\\-\\*\\/\\^\\(\\)])/));\n```", "```js\nvar Stack = (function () {\n   var wmkey = {};\n   var items = new WeakMap();\n\n   items.set(wmkey, []);\n\n   function Stack() { }\n\n   Stack.prototype.push = function (element) {\n      var stack = items.get(wmkey);\n      stack.push(element);\n   };\n   Stack.prototype.pop = function () {\n      var stack = items.get(wmkey);\n      return stack.pop();\n   };\n   Stack.prototype.peek = function () {\n      var stack = items.get(wmkey);\n      return stack[stack.length - 1];\n   };\n   Stack.prototype.clear = function () {\n      items.set(wmkey, []);\n   };\n   Stack.prototype.size = function () {\n      return items.get(wmkey).length;\n   };\n   return Stack;\n}());\n```", "```js\nfunction isBalanced(postfix) {\n   var count = 0;\n   postfix.forEach(function(op) {\n      if (op === ')') {\n         count++\n      } else if (op === '(') {\n         count --\n      }\n   });\n\n   return count === 0;\n}\n```", "```js\nexpr.forEach(function(exp) {\n if(!isNaN(parseFloat(exp))) {\n postfix += exp + \" \";\n    }\n});\n```", "```js\nexpr.forEach(function(exp) {\n if(!isNaN(parseFloat(exp))) {\n postfix += exp + \" \";\n    }  else if(exp === \"(\") {\n ops.push(exp);\n    } else if(exp === \")\") {\n while(ops.peek() !== \"(\") {\n postfix += ops.pop() + \" \";\n        }\n ops.pop();\n    }\n});\n```", "```js\nfunction convert(expr) {\n var postfix = \"\";\n var ops = new Stack();\n var operators = {\n \"^\": {\n priority: 4,\n associativity: \"rtl\"\n        },\n \"*\": {\n priority: 3,\n associativity: \"ltr\"\n        },\n \"/\": {\n priority: 3,\n associativity: \"ltr\"\n        },\n \"+\": {\n priority: 2,\n associativity: \"ltr\"\n        },\n \"-\": {\n priority: 2,\n associativity: \"ltr\"\n        }\n    };\n\n    expr = clean(expr.trim().replace(/\\s+/g, \"\").split(/([\\+\\-\\*\\/\\^\\(\\)])/));\n\n    if (!isBalanced(expr) {\n        return 'error';\n    }    \n\n    expr.forEach(function(exp) {\n if(!isNaN(parseFloat(exp))) {\n postfix += exp + \" \";\n        }  else if(exp === \"(\") {\n ops.push(exp);\n        } else if(exp === \")\") {\n while(ops.peek() !== \"(\") {\n postfix += ops.pop() + \" \";\n            }\n ops.pop();\n        } else if(\"*^+-/\".indexOf(exp) !== -1) {\n var currOp = exp;\n var prevOp = ops.peek();\n while(\"*^+-/\".indexOf(prevOp) !== -1 && ((operators[currOp].associativity === \"ltr\" && operators[currOp].priority <= operators[prevOp].priority) || (operators[currOp].associativity === \"rtl\" && operators[currOp].priority < operators[prevOp].priority)))\n            {\n postfix += ops.pop() + \" \";\n prevOp = ops.peek();\n            }\n ops.push(currOp);\n        }\n    });\n\n while(ops.size() > 0) {\n postfix += ops.pop() + \" \";\n    }\n return postfix;\n}\n```", "```js\nfunction evaluate(postfix) {\n var resultStack = new Stack();\n    postfix = clean(postfix.trim().split(\" \"));\n    postfix.forEach(function (op) {\n if(!isNaN(parseFloat(op))) {\n resultStack.push(op);\n        } else {\n var val1 = resultStack.pop();\n var val2 = resultStack.pop();\n var parseMethodA = getParseMethod(val1);\n var parseMethodB = getParseMethod(val2);\n if(op === \"+\") {\n resultStack.push(parseMethodA(val1) + parseMethodB(val2));\n            } else if(op === \"-\") {\n resultStack.push(parseMethodB(val2) - parseMethodA(val1));\n            } else if(op === \"*\") {\n resultStack.push(parseMethodA(val1) * parseMethodB(val2));\n            } else if(op === \"/\") {\n resultStack.push(parseMethodB(val2) / parseMethodA(val1));\n            } else if(op === \"^\") {\n resultStack.push(Math.pow(parseMethodB(val2), \n parseMethodA(val1)));\n            }\n       }\n    });\n\n if (resultStack.size() > 1) {\n return \"error\";\n    } else {\n return resultStack.pop();\n    }\n}\n```", "```js\nfunction init() {\n self.addEventListener('message', function(e) {\n var code = e.data;\n\n if(code.match(/.*[a-zA-Z]+.*/g)) {\n respond('Error! Cannot evaluate complex expressions yet. Please try\n            again later');\n        } else {\n respond(evaluate(convert(code)));\n        }\n    });\n}\n```"]