- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Building and Consuming Web Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和消费Web服务
- en: This chapter is about learning how to build web services (aka HTTP or REST services)
    using the ASP.NET Core Web API and consuming web services using HTTP clients that
    could be any other type of .NET app, including a website or a mobile or desktop
    app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于学习如何使用ASP.NET Core Web API构建Web服务（也称为HTTP或REST服务），以及使用HTTP客户端消费Web服务的内容，这些客户端可以是任何其他类型的.NET应用程序，包括网站、移动应用程序或桌面应用程序。
- en: This chapter requires knowledge and skills that you learned in *Chapter 10*
    , *Working with Data Using Entity Framework Core* , and *Chapters* *13* to *15*
    , about practical applications of C# and .NET and building websites using ASP.NET
    Core.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要你在*第10章*、*使用Entity Framework Core处理数据*和*第13到15章*中学到的C#和.NET的实际应用知识和技能，以及使用ASP.NET
    Core构建网站的知识。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Building web services using ASP.NET Core Web API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core Web API构建Web服务
- en: Documenting and testing web services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档化和测试Web服务
- en: Consuming web services using HTTP clients
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP客户端消费Web服务
- en: Implementing advanced features for web services
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现Web服务的高级功能
- en: Building web services using minimal APIs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最小API构建Web服务
- en: Building web services using ASP.NET Core Web API
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core Web API构建Web服务
- en: Before we build a modern web service, we need to cover some background to set
    the context for this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建现代Web服务之前，我们需要了解一些背景知识，以便为本章设定背景。
- en: Understanding web service acronyms
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Web服务的首字母缩写
- en: Although HTTP was designed originally to request and respond with HTML and other
    resources for humans to look at, it is also good for building services.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管HTTP最初是设计用于请求和响应HTML和其他资源供人类查看，但它也非常适合构建服务。
- en: 'Roy Fielding stated in his doctoral dissertation, describing the **Representational
    State Transfer** (**REST** ) architectural style, that the HTTP standard would
    be good for building services because it defines the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Roy Fielding在他的博士论文中描述了**表现状态转移**（**REST**）架构风格，指出HTTP标准非常适合构建服务，因为它定义了以下内容：
- en: URIs to uniquely identify resources, like `https://localhost:5001/api/products/23`
    .
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用URI唯一标识资源，比如`https://localhost:5001/api/products/23`。
- en: Methods to perform common tasks on those resources, like `GET` , `POST` , `PUT`
    , and `DELETE` .
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行这些资源上的常见任务的方法，比如`GET`、`POST`、`PUT`和`DELETE`。
- en: 'The ability to negotiate the media type of content exchanged in requests and
    responses, such as XML and JSON. Content negotiation happens when the client specifies
    a request header like `Accept: application/xml,*/*;q=0.8` . The default response
    format used by the ASP.NET Core Web API is JSON, which means one of the response
    headers would be `Content-Type: application/json; charset=utf-8` .'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '能够协商请求和响应中交换的内容的媒体类型，比如XML和JSON。内容协商发生在客户端指定请求头像`Accept: application/xml,*/*;q=0.8`。ASP.NET
    Core Web API使用的默认响应格式是JSON，这意味着响应头之一将是`Content-Type: application/json; charset=utf-8`。'
- en: '**Web services** use the HTTP communication standard, so they are sometimes
    called HTTP or RESTful services. HTTP or RESTful services are what this chapter
    is about.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web服务**使用HTTP通信标准，因此有时被称为HTTP或RESTful服务。HTTP或RESTful服务就是本章的内容。'
- en: Web services can also mean **Simple Object Access Protocol** (**SOAP** ) services
    that implement some of the **WS-* standards** . These standards enable clients
    and services implemented on different systems to communicate with each other.
    The WS-* standards were originally defined by IBM with input from other companies
    like Microsoft.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务也可以指实现一些**WS-*标准**的**简单对象访问协议**（**SOAP**）服务。这些标准使得在不同系统上实现的客户端和服务能够相互通信。WS-*标准最初由IBM定义，并得到了微软等其他公司的支持。
- en: Understanding Windows Communication Foundation (WCF)
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解Windows Communication Foundation（WCF）
- en: .NET Framework 3.0 and later includes a **remote procedure call** (**RPC** )
    technology named **Windows Communication Foundation** (**WCF** ). RPC technologies
    enable code on one system to execute code on another over a network.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework 3.0及更高版本包括名为**Windows Communication Foundation**（**WCF**）的**远程过程调用**（**RPC**）技术。RPC技术使一个系统上的代码能够在网络上执行另一个系统上的代码。
- en: WCF makes it easy for developers to create services, including SOAP services
    that implement WS-* standards. It later also supported building Web/HTTP/REST-style
    services, but it was rather over-engineered if that was all you needed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: WCF使开发人员能够轻松创建服务，包括实现WS-*标准的SOAP服务。它后来也支持构建Web/HTTP/REST风格的服务，但如果这是你所需要的全部内容，那么它可能有点过度设计。
- en: 'If you have existing WCF services and you would like to port them to modern
    .NET, then there is an open-source project that had its first **General Availability**
    (**GA** ) release in February 2021\. You can read about it at the following link:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有现有的WCF服务，并且想要将它们迁移到现代.NET，那么在2021年2月有一个开源项目发布了首个**正式版本**（**GA**）。你可以在以下链接阅读相关信息：
- en: '[https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release](https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release](https://corewcf.github.io/blog/2021/02/19/corewcf-ga-release)'
- en: An alternative to WCF
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WCF的替代方案
- en: The Microsoft recommended alternative to WCF is **gRPC** . gRPC is a modern
    cross-platform open-source RPC framework created by Google (unofficially the "g"
    in gRPC). You will learn more about gRPC in *Chapter 18* , *Building and Consuming
    Specialized Services* (available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ) .
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微软推荐的WCF替代方案是**gRPC**。gRPC是由Google创建的现代跨平台开源RPC框架（非官方的gRPC中的"g"）。你将在*第18章*中了解更多关于gRPC的内容，*构建和使用专门的服务*（可在[https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)找到）。
- en: Understanding HTTP requests and responses for Web APIs
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Web API的HTTP请求和响应
- en: HTTP defines standard types of requests and standard codes to indicate a type
    of response. Most of them can be used to implement Web API services.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP定义了标准类型的请求和标准代码来指示响应的类型。其中大多数可以用于实现Web API服务。
- en: 'The most common type of request is `GET` , to retrieve a resource identified
    by a unique path, with additional options like what media type is acceptable,
    set as request headers, as shown in the following example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的请求类型是`GET`，用于检索由唯一路径标识的资源，还可以设置额外选项，例如可接受的媒体类型，设置为请求标头，如下例所示：
- en: '```cs'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: GET /path/to/resource
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: GET /path/to/resource
- en: 'Accept: application/json'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'Accept: application/json'
- en: '```'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Common responses include success and multiple types of failure, as shown in
    the following table:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的响应包括成功和多种类型的失败，如下表所示：
- en: '| Status code | Description |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 状态码 | 描述 |'
- en: '| `200 OK` | The path was correctly formed, the resource was successfully found,
    serialized into an acceptable media type, and then returned in the response body.
    The response headers specify the `Content-Type` , `Content-Length` , and `Content-Encoding`
    , for example, GZIP. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `200 OK` | 路径正确形成，成功找到资源，序列化为可接受的媒体类型，然后在响应主体中返回。响应标头指定了`Content-Type`，`Content-Length`和`Content-Encoding`，例如GZIP。
    |'
- en: '| `301 Moved Permanently` | Over time a web service may change its resource
    model including the path used to identify an existing resource. The web service
    can indicate the new path by returning this status code and a response header
    named `Location` that has the new path. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `301 Moved Permanently` | 随着时间的推移，Web服务可能会更改其资源模型，包括用于标识现有资源的路径。Web服务可以通过返回此状态代码和名为`Location`的响应标头指示新路径。
    |'
- en: '| `302 Found` | Similar to `301` . |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `302 Found` | 类似于`301`。 |'
- en: '| `304 Not Modified` | If the request included the `If-Modified-Since` header,
    then the web service can respond with this status code. The response body is empty
    because the client should use its cached copy of the resource. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `304 Not Modified` | 如果请求包括`If-Modified-Since`标头，则Web服务可以使用此状态代码响应。响应主体为空，因为客户端应使用其缓存的资源副本。
    |'
- en: '| `400 Bad Request` | The request was invalid, for example, it used a path
    for a product using an integer ID where the ID value is missing. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `400 Bad Request` | 请求无效，例如，使用整数ID的产品路径，其中ID值丢失。 |'
- en: '| `401 Unauthorized` | The request was valid, the resource was found, but the
    client did not supply credentials or is not authorized to access that resource.
    Re-authenticating may enable access, for example, by adding or changing the `Authorization`
    request header. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `401 Unauthorized` | 请求有效，找到资源，但客户端未提供凭据或未被授权访问该资源。重新进行身份验证可能会启用访问，例如通过添加或更改`Authorization`请求标头。
    |'
- en: '| `403 Forbidden` | The request was valid, the resource was found, but the
    client is not authorized to access that resource. Re-authenticating will not fix
    the issue. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `403 Forbidden` | 请求有效，找到资源，但客户端未被授权访问该资源。重新进行身份验证将无法解决问题。 |'
- en: '| `404 Not Found` | The request was valid, but the resource was not found.
    The resource may be found if the request is repeated later. To indicate that a
    resource will never be found, return `410 Gone` . |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `404 Not Found` | 请求有效，但未找到资源。如果稍后重复请求，可能会找到资源。要指示永远找不到资源，请返回`410 Gone`。
    |'
- en: '| `406 Not Acceptable` | If the request has an `Accept` header that only lists
    media types that the web service does not support. For example, if the client
    requests JSON but the web service can only return XML. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `406 Not Acceptable` | 如果请求具有仅列出Web服务不支持的媒体类型的`Accept`标头。例如，如果客户端请求JSON，但Web服务只能返回XML。
    |'
- en: '| `451 Unavailable for Legal Reasons` | A website hosted in the USA might return
    this for requests coming from Europe to avoid having to comply with the General
    Data Protection Regulation (GDPR). The number was chosen as a reference to the
    novel Fahrenheit 451 in which books are banned and burned. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `451 Unavailable for Legal Reasons` | 美国托管的网站可能会针对来自欧洲的请求返回此代码，以避免不得不遵守《通用数据保护条例》（GDPR）。选择该数字是为了参考小说《华氏451度》，其中书籍被禁止和焚烧。
    |'
- en: '| `500 Server Error` | The request was valid, but something went wrong on the
    server side while processing the request. Retrying again later might work. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `500 Server Error` | 请求有效，但在处理请求时服务器端出现了问题。稍后重试可能会起作用。 |'
- en: '| `503 Service Unavailable` | The web service is busy and cannot handle the
    request. Trying again later might work. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `503 Service Unavailable` | Web服务繁忙，无法处理请求。稍后再试可能会起作用。 |'
- en: Other common types of HTTP requests include `POST` , `PUT` , `PATCH` , or `DELETE`
    that create, modify, or delete resources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常见类型的HTTP请求包括`POST`，`PUT`，`PATCH`或`DELETE`，用于创建，修改或删除资源。
- en: 'To create a new resource, you might make a `POST` request with a body that
    contains the new resource, as shown in the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新资源，您可以使用包含新资源的主体进行`POST`请求，如下所示：
- en: '```cs'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: POST /path/to/resource
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: POST /path/to/resource
- en: 'Content-Length: 123'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'Content-Length: 123'
- en: 'Content-Type: application/json'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'Content-Type: application/json'
- en: '```'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To create a new resource or update an existing resource, you might make a `PUT`
    request with a body that contains a whole new version of the existing resource,
    and if the resource does not exist, it is created, or if it does exist, it is
    replaced (sometimes called an **upsert** operation), as shown in the following
    code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新资源或更新现有资源，您可以使用包含现有资源的全新版本的主体进行`PUT`请求，如果资源不存在，则创建该资源，如果存在，则替换（有时称为**upsert**操作），如下所示：
- en: '```cs'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: PUT /path/to/resource
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: PUT /path/to/resource
- en: 'Content-Length: 123'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'Content-Length: 123'
- en: 'Content-Type: application/json'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 'Content-Type: application/json'
- en: '```'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To update an existing resource more efficiently, you might make a `PATCH` request
    with a body that contains an object with only the properties that need changing,
    as shown in the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要更有效地更新现有资源，您可以使用包含仅需要更改的属性的对象的主体进行`PATCH`请求，如下所示：
- en: '```cs'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: PATCH /path/to/resource
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: PATCH /path/to/resource
- en: 'Content-Length: 123'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'Content-Length: 123'
- en: 'Content-Type: application/json'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'Content-Type: application/json'
- en: '```'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To delete an existing resource, you might make a `DELETE` request, as shown
    in the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除现有资源，您可以发出`DELETE`请求，如下面的代码所示：
- en: '```cs'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: DELETE /path/to/resource
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: DELETE /path/to/resource
- en: '```'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As well as the responses shown in the table above for a `GET` request, all
    the types of requests that create, modify, or delete a resource have additional
    possible common responses, as shown in the following table:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以及上表中显示的`GET`请求的响应外，所有创建，修改或删除资源的请求类型都有额外可能的常见响应，如下表所示：
- en: '| Status code | Description |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|状态码|描述|'
- en: '| `201 Created` | The new resource was created successfully, the response header
    named `Location` contains its path, and the response body contains the newly created
    resource. Immediately `GET` -ing the resource should return `200` . |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `201 Created` | 新资源已成功创建，响应头名为`Location`包含其路径，响应体包含新创建的资源。立即`GET`资源应返回`200`。|'
- en: '| `202 Accepted` | The new resource cannot be created immediately so the request
    is queued for later processing and immediately `GET` -ing the resource might return
    `404` . The body can contain a resource that points to some form of status checker
    or an estimate of when the resource will become available. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `202 Accepted` | 新资源无法立即创建，因此请求被排队等待后续处理，并且立即`GET`资源可能会返回`404`。响应体可以包含指向某种状态检查器或资源何时可用的估计的资源。|'
- en: '| `204 No Content` | Commonly used in response to a `DELETE` request since
    returning the resource in the body after deleting it does not usually make sense!
    Sometimes used in response to `POST` , `PUT` , or `PATCH` requests if the client
    does not need to confirm that the request was processed correctly. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `204 No Content` | 通常用于对`DELETE`请求的响应，因为在删除资源后将其返回到响应体中通常没有意义！有时用于对`POST`，`PUT`或`PATCH`请求的响应，如果客户端不需要确认请求是否被正确处理。|'
- en: '| `405 Method Not Allowed` | Returned when the request used a method that is
    not supported. For example, a web service designed to be read-only may explicitly
    disallow `PUT` , `DELETE` , and so on. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `405 Method Not Allowed` | 当请求使用不受支持的方法时返回。例如，设计为只读的Web服务可能明确禁止`PUT`，`DELETE`等。|'
- en: '| `415 Unsupported Media Type` | Returned when the resource in the request
    body uses a media type that the web service cannot handle. For example, if the
    body contains a resource in XML format but the web service can only process JSON.
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `415 Unsupported Media Type` | 当请求体中的资源使用Web服务无法处理的媒体类型时返回。例如，如果请求体包含XML格式的资源，但Web服务只能处理JSON。|'
- en: Creating an ASP.NET Core Web API project
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建ASP.NET Core Web API项目
- en: 'We will build a web service that provides a way to work with data in the Northwind
    database using ASP.NET Core so that the data can be used by any client application
    on any platform that can make HTTP requests and receive HTTP responses:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个Web服务，该服务提供了一种使用ASP.NET Core处理Northwind数据库中的数据的方式，以便数据可以被任何可以发出HTTP请求并接收HTTP响应的客户端应用程序在任何平台上使用：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个新项目，如下列表中定义的：
- en: 'Project template: **ASP.NET Core Web API** / `webapi`'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core Web API** / `webapi`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作空间/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.WebApi`'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.WebApi`
- en: 'Other Visual Studio options: **Authentication Type** : None, **Configure for
    HTTPS** : selected, **Enable Docker** : cleared, **Enable** **OpenAPI support**
    : selected.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他Visual Studio选项：**身份验证类型**：无，**配置为HTTPS**：已选择，**启用Docker**：已清除，**启用OpenAPI支持**：已选择。
- en: In Visual Studio Code, select `Northwind.WebApi` as the active OmniSharp project.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`Northwind.WebApi`选择为活动的OmniSharp项目。
- en: Build the `Northwind.WebApi` project.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.WebApi`项目。
- en: 'In the `Controllers` folder, open and review `WeatherForecastController.cs`
    , as shown in the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，打开并查看`WeatherForecastController.cs`，如下面的代码所示：
- en: '```cs'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.AspNetCore.Mvc;
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.AspNetCore.Mvc;
- en: namespace
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Northwind.WebApi.Controllers
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind.WebApi.Controllers
- en: ;
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '[ApiController'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[ApiController'
- en: ']'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[Route('
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[Route('
- en: '"[controller]"'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"[controller]"'
- en: )
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 公共的
- en: class
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: WeatherForecastController
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: WeatherForecastController
- en: ': ControllerBase'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ': ControllerBase'
- en: '{'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: private
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 私人的
- en: static
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的
- en: readonly
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 只读的
- en: string
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '[] Summaries = new'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[] Summaries = new'
- en: '[]'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[]'
- en: '{'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"Freezing"'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '"冰冻"'
- en: ', "Bracing"'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ，"令人振奋"
- en: ', "Chilly"'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ，"寒冷"
- en: ', "Cool"'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: ，"凉爽"
- en: ', "Mild"'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ，"温和"
- en: ','
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"Warm"'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '"温暖"'
- en: ', "Balmy"'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ，"温暖"
- en: ', "Hot"'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ，"热"
- en: ', "Sweltering"'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ，"酷热"
- en: ', "Scorching"'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ，"灼热"
- en: '};'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: private
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 私人的
- en: readonly
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 只读的
- en: ILogger<WeatherForecastController> _logger;
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ILogger<WeatherForecastController> _logger;
- en: public
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 公共的
- en: WeatherForecastController
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: WeatherForecastController
- en: (
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ILogger<WeatherForecastController> logger
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ILogger<WeatherForecastController> logger
- en: )
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: _logger = logger;
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: _logger = logger;
- en: '}'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[HttpGet'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpGet'
- en: ']'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 公共的
- en: IEnumerable<WeatherForecast>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<WeatherForecast>
- en: Get
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 获取
- en: ()
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Enumerable.Range(1
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Enumerable.Range(1
- en: ', 5'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ，5
- en: ).Select(index =>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ).Select(index =>
- en: new
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: WeatherForecast
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: WeatherForecast
- en: '{'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Date = DateTime.Now.AddDays(index),
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 日期= DateTime.Now.AddDays(index),
- en: TemperatureC = Random.Shared.Next(-20
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: TemperatureC = Random.Shared.Next(-20
- en: ', 55'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ，55
- en: ),
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: Summary = Summaries[Random.Shared.Next(Summaries.Length)]
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要= Summaries[Random.Shared.Next(Summaries.Length)]
- en: '})'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .ToArray();
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: .ToArray();
- en: '}'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'While reviewing the preceding code, note the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查上述代码时，请注意以下内容：
- en: The `Controller` class inherits from `ControllerBase` . This is simpler than
    the `Controller` class used in MVC because it does not have methods like `View`
    to generate HTML responses by passing a view model to a Razor file.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controller`类继承自`ControllerBase`。这比MVC中使用的`Controller`类更简单，因为它没有像`View`这样的方法，通过将视图模型传递给Razor文件来生成HTML响应。'
- en: The `[Route]` attribute registers the `/weatherforecast` relative URL for clients
    to use to make HTTP requests that will be handled by this controller. For example,
    an HTTP request for `https://localhost:5001/weatherforecast/` would be handled
    by this controller. Some developers like to prefix the controller name with `api/`
    , which is a convention to differentiate between MVC and Web API in mixed projects.
    If you use `[controller]` as shown, it uses the characters before `Controller`
    in the class name, in this case, `WeatherForecast` , or you can simply enter a
    different name without the square brackets, for example, `[Route("api/forecast")]`
    .
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[Route]`属性为客户端注册了相对URL`/weatherforecast`，以便通过该控制器处理HTTP请求。例如，对`https://localhost:5001/weatherforecast/`的HTTP请求将由该控制器处理。一些开发人员喜欢在控制器名称前加上`api/`，这是一个在混合项目中区分MVC和Web
    API的约定。如果像所示使用`[controller]`，它将使用类名中`Controller`之前的字符，例如`WeatherForecast`，或者您可以简单地输入一个不带方括号的不同名称，例如`[Route("api/forecast")]`。'
- en: The `[ApiController]` attribute was introduced with ASP.NET Core 2.1 and it
    enables REST-specific behavior for controllers, like automatic HTTP `400` responses
    for invalid models, as you will see later in this chapter.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[ApiController]`属性是在ASP.NET Core 2.1中引入的，它为控制器启用了特定于REST的行为，例如对无效模型的自动HTTP`400`响应，您将在本章后面看到。'
- en: The `[HttpGet]` attribute registers the `Get` method in the `Controller` class
    to respond to HTTP `GET` requests, and its implementation uses the shared `Random`
    object to return an array of `WeatherForecast` objects with random temperatures
    and summaries like `Bracing` or `Balmy` for the next five days of weather.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpGet]`属性将`Controller`类中的`Get`方法注册为响应HTTP`GET`请求，并且其实现使用共享的`Random`对象返回具有随机温度和摘要的`WeatherForecast`对象数组，例如`Bracing`或`Balmy`，用于未来五天的天气。'
- en: 'Add a second `Get` method that allows the call to specify how many days ahead
    the forecast should be by implementing the following:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第二个`Get`方法，允许调用指定预测提前多少天，实现如下：
- en: Add a comment above the original method to show the action method and URL path
    that it responds to.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在原始方法上方添加注释，显示它响应的操作方法和URL路径。
- en: Add a new method with an integer parameter named `days` .
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个名为`days`的整数参数的新方法。
- en: Cut and paste the original `Get` method implementation code statements into
    the new `Get` method.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪切并粘贴原始的`Get`方法实现代码语句到新的`Get`方法中。
- en: Modify the new method to create an `IEnumerable` of integers up to the number
    of days requested, and modify the original `Get` method to call the new `Get`
    method and pass the value `5` .
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改新方法以创建一个到请求的天数的整数的`IEnumerable`，并修改原始的`Get`方法调用新的`Get`方法并传递值`5`。
- en: 'Your methods should be as shown highlighted in the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您的方法应如下代码中所示突出显示：
- en: '```cs'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**// GET /weatherforecast**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**// GET /weatherforecast**'
- en: '[HttpGet'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpGet'
- en: ']'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: IEnumerable<WeatherForecast>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<WeatherForecast>
- en: Get
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 获取
- en: ()
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '**// original method**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 原始方法**'
- en: '{'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**return**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**'
- en: '**Get(**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**Get(**'
- en: '**5**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**5**'
- en: '**);**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**// five day forecast**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 五天预测**'
- en: '}'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**// GET /weatherforecast/7**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**// GET /weatherforecast/7**'
- en: '**[**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**HttpGet(**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpGet(**'
- en: '**"{days:int}"**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**"{days:int}"**'
- en: '**)**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**]**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: '**public**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共**'
- en: '**IEnumerable<WeatherForecast>**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**IEnumerable<WeatherForecast>**'
- en: '**Get**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取**'
- en: '**(**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**(**'
- en: '**int**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**int**'
- en: '**days**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**days**'
- en: '**)**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**// new method**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 新方法**'
- en: '{'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**return**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**'
- en: '**Enumerable.Range(**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**Enumerable.Range(**'
- en: '**1**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**, days).Select(index =>**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**, days).Select(index =>**'
- en: new
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: WeatherForecast
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: WeatherForecast
- en: '{'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Date = DateTime.Now.AddDays(index),
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Date = DateTime.Now.AddDays(index),
- en: TemperatureC = Random.Shared.Next(-20
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: TemperatureC = Random.Shared.Next(-20
- en: ', 55'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ', 55'
- en: ),
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: Summary = Summaries[Random.Shared.Next(Summaries.Length)]
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要 = Summaries[Random.Shared.Next(Summaries.Length)]
- en: '})'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: .ToArray();
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: .ToArray();
- en: '}'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the `[HttpGet]` attribute, note the route format pattern `{days:int}` that
    constrains the `days` parameter to `int` values.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[HttpGet]`属性中，注意路由格式模式`{days:int}`，它将`days`参数限制为`int`值。
- en: Reviewing the web service's functionality
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查网络服务的功能
- en: 'Now, we will test the web service''s functionality:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将测试网络服务的功能：
- en: 'If you are using Visual Studio, in **Properties** , open the `launchSettings.json`
    file, and note that by default, it will launch the browser and navigate to the
    `/swagger` relative URL path, as shown highlighted in the following markup:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Visual Studio，在**属性**中，打开`launchSettings.json`文件，并注意默认情况下，它将启动浏览器并导航到`/swagger`相对URL路径，如下面的标记所示：
- en: '```cs'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '"profiles"'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '"profiles"'
- en: ': {'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"Northwind.WebApi"'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '"Northwind.WebApi"'
- en: ': {'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"commandName"'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '"commandName"'
- en: ': "Project"'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: ': "项目"'
- en: ','
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"dotnetRunMessages"'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '"dotnetRunMessages"'
- en: ': "true"'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: ': "true"'
- en: ','
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '**"launchBrowser"**'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**"launchBrowser"**'
- en: '**:**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**:**'
- en: '**true**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: '**,**'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**,**'
- en: '**"launchUrl"**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**"launchUrl"**'
- en: '**:**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**:**'
- en: '**"swagger"**'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**"swagger"**'
- en: '**,**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**,**'
- en: '"applicationUrl"'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '"applicationUrl"'
- en: ': "https://localhost:5001;http://localhost:5000"'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: ': "https://localhost:5001;http://localhost:5000"'
- en: ','
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"environmentVariables"'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '"environmentVariables"'
- en: ': {'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"ASPNETCORE_ENVIRONMENT"'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '"ASPNETCORE_ENVIRONMENT"'
- en: ': "Development"'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: ': "开发"'
- en: '}'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '},'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '```'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Modify the profile named `Northwind.WebApi` to set `launchBrowser` to `false`
    .
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改名为`Northwind.WebApi`的配置文件，将`launchBrowser`设置为`false`。
- en: For the `applicationUrl` , change the random port number for `HTTP` to `5000`
    and for `HTTPS` to `5001` .
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`applicationUrl`，将`HTTP`的随机端口号更改为`5000`，将`HTTPS`的随机端口号更改为`5001`。
- en: Start the web service project.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网络服务项目。
- en: Start Chrome.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: Navigate to `https://localhost:5001/` and note you will get a `404` status code
    response because we have not enabled static files and there is not an `index.html`
    , nor is there an MVC controller with a route configured, either. Remember that
    this project is not designed for a human to view and interact with, so this is
    expected behavior for a web service.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`https://localhost:5001/`，注意您将收到`404`状态码响应，因为我们尚未启用静态文件，也没有`index.html`，也没有配置路由的MVC控制器。请记住，此项目不是为人类查看和交互而设计的，因此这是Web服务的预期行为。
- en: The solution on GitHub is configured to use port `5002` because we will change
    its configuration later in the book.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的解决方案配置为使用端口`5002`，因为我们将在本书中稍后更改其配置。
- en: In Chrome, show **Developer tools** .
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，显示**开发者工具**。
- en: Navigate to `https://localhost:5001/weatherforecast` and note the Web API service
    should return a JSON document with five random weather forecast objects in an
    array, as shown in *Figure 16.1* :![](img/Image00129.jpg)
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`https://localhost:5001/weatherforecast`，并注意Web API服务应返回一个包含五个随机天气预报对象的JSON文档数组，如*图16.1*所示：！[](img/Image00129.jpg)
- en: 'Figure 16.1: A request and response from a weather forecast web service'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：天气预报Web服务的请求和响应
- en: Close **Developer tools** .
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**开发人员工具**。
- en: Navigate to `https://localhost:5001/weatherforecast/14` and note the response
    when requesting a two-week weather forecast, as shown in *Figure 16.2* :![](img/Image00130.jpg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`https://localhost:5001/weatherforecast/14`，并注意在请求两周天气预报时的响应，如*图16.2*所示：！[](img/Image00130.jpg)
- en: 'Figure 16.2: A two-week weather forecast as a JSON document'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2：作为JSON文档的两周天气预报
- en: Close Chrome and shut down the web server.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Creating a web service for the Northwind database
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Northwind数据库创建Web服务
- en: Unlike MVC controllers, Web API controllers do not call Razor views to return
    HTML responses for website visitors to see in browsers. Instead, they use content
    negotiation with the client application that made the HTTP request to return data
    in formats such as XML, JSON, or X-WWW-FORM-URLENCODED in their HTTP response.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 与MVC控制器不同，Web API控制器不会调用Razor视图以返回网站访问者在浏览器中看到的HTML响应。相反，它们使用内容协商与发出HTTP请求的客户端应用程序返回数据，格式如XML，JSON或X-WWW-FORM-URLENCODED。
- en: The client application must then deserialize the data from the negotiated format.
    The most commonly used format for modern web services is **JavaScript Object Notation**
    (**JSON** ) because it is compact and works natively with JavaScript in a browser
    when building **Single-Page Applications** (**SPAs** ) with client-side technologies
    like Angular, React, and Vue.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，客户端应用程序必须从协商的格式中反序列化数据。现代Web服务最常用的格式是**JavaScript对象表示法**（**JSON**），因为它紧凑且在使用客户端端技术（如Angular，React和Vue）构建**单页应用程序**（**SPA**）时与JavaScript原生工作。
- en: 'We will reference the Entity Framework Core entity data model for the Northwind
    database that you created in *Chapter 13* , *Introducing Practical Applications
    of C# and .NET* :'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引用您在*第13章*，*介绍C＃和.NET的实际应用*中创建的Northwind数据库的Entity Framework Core实体数据模型：
- en: 'In the `Northwind.WebApi` project, add a project reference to `Northwind.Common.DataContext`
    for either SQLite or SQL Server, as shown in the following markup:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，根据以下标记向`Northwind.Common.DataContext`添加对SQLite或SQL Server的项目引用：
- en: '```cs'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <!-- change Sqlite to SqlServer if
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: <!--如果更改Sqlite为SqlServer
- en: you prefer -->
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择的-->
- en: <ProjectReference Include=
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <ProjectReference Include =
- en: '"..\Northwind.Common.DataContext.Sqlite\Northwind.Common.DataContext.Sqlite.csproj"'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: “..\ Northwind.Common.DataContext.Sqlite \ Northwind.Common.DataContext.Sqlite.csproj”
- en: />
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the project and fix any compile errors in your code.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并修复代码中的任何编译错误。
- en: 'Open `Program.cs` and import namespaces for working with web media formatters
    and the shared Packt classes, as shown in the following code:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`并导入用于处理Web媒体格式化程序和共享Packt类的命名空间，如下所示：
- en: '```cs'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.AspNetCore.Mvc.Formatters;
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.AspNetCore.Mvc.Formatters;
- en: using
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Packt.Shared; // AddNorthwindContext extension method
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared; // AddNorthwindContext扩展方法
- en: using
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Console;
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: '```'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a statement before the call to `AddControllers` to register the `Northwind`
    database context class (it will use either SQLite or SQL Server depending on which
    database provider you referenced in the project file), as shown in the following
    code:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`AddControllers`之前添加一个语句，以注册`Northwind`数据库上下文类（它将使用SQLite或SQL Server，具体取决于您在项目文件中引用的数据库提供程序），如下所示：”
- en: '```cs'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // Add services to the container.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: //向容器添加服务。
- en: builder.Services.AddNorthwindContext();
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services.AddNorthwindContext（）;
- en: '```'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the call to `AddControllers` , add a lambda block with statements to write
    the names and supported media types of the default output formatters to the console,
    and then add XML serializer formatters, as shown in the following code:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对`AddControllers`的调用中，添加一个lambda块，其中包含语句，以将默认输出格式化程序的名称和支持的媒体类型写入控制台，然后添加XML序列化程序格式化程序，如下所示：
- en: '```cs'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: builder.Services.AddControllers(options =>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services.AddControllers（选项=>
- en: '{'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Default output formatters:"
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“默认输出格式化程序：”
- en: );
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: foreach
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (IOutputFormatter formatter in
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: （IOutputFormatter formatter in
- en: options.OutputFormatters)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: options.OutputFormatters）
- en: '{'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: OutputFormatter? mediaFormatter = formatter as
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: OutputFormatter？mediaFormatter =格式化程序为
- en: OutputFormatter;
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: OutputFormatter;
- en: if
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (mediaFormatter == null
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: （mediaFormatter == null
- en: )
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“
- en: '{formatter.GetType().Name}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '{formatter.GetType（）。Name}'
- en: '"'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: “
- en: );
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: // OutputFormatter class has SupportedMediaTypes
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: // OutputFormatter类有SupportedMediaTypes
- en: '{'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'WriteLine("  {0}, Media types: {1}"'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“ {0}，媒体类型：{1}”
- en: ','
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: mediaFormatter.GetType().Name,'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：mediaFormatter.GetType（）。Name，
- en: 'arg1: string'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 参数1：字符串
- en: .Join(", "
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: .Join（“，”
- en: ','
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: mediaFormatter.SupportedMediaTypes));
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: mediaFormatter.SupportedMediaTypes））;
- en: '}'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '})'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '}）'
- en: .AddXmlDataContractSerializerFormatters()
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: .AddXmlDataContractSerializerFormatters（）
- en: .AddXmlSerializerFormatters();
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: .AddXmlSerializerFormatters（）;
- en: '```'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Start the web service.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Web服务。
- en: 'In a command prompt or terminal, note that there are four default output formatters,
    including ones that convert `null` values into `204 No Content` and ones to support
    responses that are plain text, byte streams, and JSON, as shown in the following
    output:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，请注意有四个默认输出格式化程序，包括将`null`值转换为`204 No Content`的格式化程序，以及支持纯文本，字节流和JSON响应的格式化程序，如下所示：
- en: '```cs'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Default output formatters:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 默认输出格式化程序：
- en: HttpNoContentOutputFormatter
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: HttpNoContentOutputFormatter
- en: 'StringOutputFormatter, Media types: text/plain'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: StringOutputFormatter，媒体类型：text / plain
- en: StreamOutputFormatter
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: StreamOutputFormatter
- en: 'SystemTextJsonOutputFormatter, Media types: application/json, text/json, application/*+json'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: SystemTextJsonOutputFormatter，媒体类型：application / json，text / json，application
    / * + json
- en: '```'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Shut down the web server.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Web服务器。
- en: Creating data repositories for entities
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为实体创建数据存储库
- en: 'Defining and implementing a data repository to provide CRUD operations is good
    practice. The CRUD acronym includes the following operations:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 定义和实现数据存储库以提供CRUD操作是一个良好的实践。CRUD缩写包括以下操作：
- en: C for Create
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C for Create
- en: R for Retrieve (or Read)
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R for Retrieve (or Read)
- en: U for Update
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: U for Update
- en: D for Delete
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D for Delete
- en: We will create a data repository for the `Customers` table in Northwind. There
    are only 91 customers in this table, so we will store a copy of the whole table
    in memory to improve scalability and performance when reading customer records.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为Northwind的`Customers`表创建一个数据存储库。这个表中只有91个客户，所以我们将在内存中存储整个表的副本，以提高读取客户记录的可伸缩性和性能。
- en: '**Good Practice** : In a real web service, you should use a distributed cache
    like Redis, an open-source data structure store that can be used as a high-performance,
    high-availability database, cache, or message broker.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：在真实的Web服务中，您应该使用像Redis这样的分布式缓存，它是一个开源的数据结构存储，可以用作高性能、高可用性的数据库、缓存或消息代理。'
- en: 'We will follow modern good practice and make the repository API asynchronous.
    It will be instantiated by a `Controller` class using constructor parameter injection,
    so a new instance is created to handle every HTTP request:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循现代良好的实践，并使存储库API异步化。它将由`Controller`类使用构造函数参数注入实例化，因此将创建一个新实例来处理每个HTTP请求：
- en: In the `Northwind.WebApi` project, create a folder named `Repositories` .
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，创建一个名为`Repositories`的文件夹。
- en: Add two class files to the `Repositories` folder named `ICustomerRepository.cs`
    and `CustomerRepository.cs` .
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个类文件添加到`Repositories`文件夹中，命名为`ICustomerRepository.cs`和`CustomerRepository.cs`。
- en: 'The `ICustomerRepository` interface will define five methods, as shown in the
    following code:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ICustomerRepository`接口将定义五种方法，如下面的代码所示：'
- en: '```cs'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Packt.Shared; // Customer
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared; // Customer
- en: namespace
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Northwind.WebApi.Repositories
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind.WebApi.Repositories
- en: ;
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: interface
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: interface
- en: ICustomerRepository
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: ICustomerRepository
- en: '{'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Task<Customer?> CreateAsync(Customer c);
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: Task<Customer?> CreateAsync(Customer c);
- en: Task<IEnumerable<Customer>> RetrieveAllAsync();
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IEnumerable<Customer>> RetrieveAllAsync();
- en: Task<Customer?> RetrieveAsync(string
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: Task<Customer?> RetrieveAsync(string
- en: id);
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: id);
- en: Task<Customer?> UpdateAsync(string
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: Task<Customer?> UpdateAsync(string
- en: id, Customer c);
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: id, Customer c);
- en: Task<bool
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Task<bool
- en: ?> DeleteAsync(string
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: ?> DeleteAsync(string
- en: id);
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: id);
- en: '}'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The `CustomerRepository` class will implement the five methods, remembering
    that methods that use `await` inside them must be marked as `async` , as shown
    in the following code:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CustomerRepository`类将实现这五种方法，记住使用`await`的方法必须标记为`async`，如下面的代码所示：'
- en: '```cs'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore.ChangeTracking; // EntityEntry<T>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore.ChangeTracking; // EntityEntry<T>
- en: using
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Packt.Shared; // Customer
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared; // Customer
- en: using
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.Collections.Concurrent; // ConcurrentDictionary
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections.Concurrent; // ConcurrentDictionary
- en: namespace
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Northwind.WebApi.Repositories
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind.WebApi.Repositories
- en: ;
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: CustomerRepository
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: CustomerRepository
- en: ': ICustomerRepository'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: ': ICustomerRepository'
- en: '{'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // use a static thread-safe dictionary field to cache the customers
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用静态线程安全的字典字段缓存客户
- en: private
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: private
- en: static
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: ConcurrentDictionary
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: ConcurrentDictionary
- en: <string
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: <string
- en: ', Customer>? customersCache;'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: ', Customer>? customersCache;'
- en: // use an instance data context field because it should not be
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用实例数据上下文字段，因为它不应该是
- en: // cached due to their internal caching
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: // 由于其内部缓存而被缓存
- en: private
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: private
- en: NorthwindContext db;
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: NorthwindContext db;
- en: public
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: CustomerRepository
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: CustomerRepository
- en: (
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: NorthwindContext injectedContext
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: NorthwindContext injectedContext
- en: )
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: db = injectedContext;
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: db = injectedContext;
- en: // pre-load customers from database as a normal
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: // 从数据库中预加载客户作为正常
- en: // Dictionary with CustomerId as the key,
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: // 以CustomerId为键的字典，
- en: // then convert to a thread-safe ConcurrentDictionary
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: // 然后转换为线程安全的ConcurrentDictionary
- en: if
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (customersCache is
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: (customersCache is
- en: 'null'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: customersCache = new
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: customersCache = new
- en: ConcurrentDictionary<string
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: ConcurrentDictionary<string
- en: ', Customer>('
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: ', Customer>('
- en: db.Customers.ToDictionary(c => c.CustomerId));
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: db.Customers.ToDictionary(c => c.CustomerId));
- en: '}'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: async
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<Customer?>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: Task<Customer?>
- en: CreateAsync
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: CreateAsync
- en: (
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: Customer c
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: Customer c
- en: )
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // normalize CustomerId into uppercase
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: // 规范化CustomerId为大写
- en: c.CustomerId = c.CustomerId.ToUpper();
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: c.CustomerId = c.CustomerId.ToUpper();
- en: // add to database using EF Core
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用EF Core添加到数据库
- en: EntityEntry<Customer> added = await
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: EntityEntry<Customer> added = await
- en: db.Customers.AddAsync(c);
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: db.Customers.AddAsync(c);
- en: int
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: affected = await
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: affected = await
- en: db.SaveChangesAsync();
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: db.SaveChangesAsync();
- en: if
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (affected == 1
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: (affected == 1
- en: )
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (customersCache is
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: (customersCache is
- en: 'null'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: ) return
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: ) return
- en: c;
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: c;
- en: // if the customer is new, add it to cache, else
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: // 如果客户是新的，则将其添加到缓存，否则
- en: // call UpdateCache method
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: // 调用UpdateCache方法
- en: return
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: customersCache.AddOrUpdate(c.CustomerId, c, UpdateCache);
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: customersCache.AddOrUpdate(c.CustomerId, c, UpdateCache);
- en: '}'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'null'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: ;
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Task<IEnumerable<Customer>> RetrieveAllAsync()
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IEnumerable<Customer>> RetrieveAllAsync()
- en: '{'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // for performance, get from cache
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: // 为了性能，从缓存中获取
- en: return
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: Task.FromResult(customersCache is
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: Task.FromResult(customersCache is
- en: 'null'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: '? Enumerable.Empty<Customer>() : customersCache.Values);'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '? Enumerable.Empty<Customer>() : customersCache.Values);'
- en: '}'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Task<Customer?> RetrieveAsync(string
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: Task<Customer?> RetrieveAsync(string
- en: id)
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: id)
- en: '{'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // for performance, get from cache
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: // 为了性能，从缓存中获取
- en: id = id.ToUpper();
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: id = id.ToUpper();
- en: if
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (customersCache is
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: (customersCache is
- en: 'null'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: ) return
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: ) return
- en: 'null'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: '!;'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '!;'
- en: customersCache.TryGetValue(id, out
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: customersCache.TryGetValue(id, out
- en: Customer? c);
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: Customer? c);
- en: return
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: Task.FromResult(c);
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: Task.FromResult(c);
- en: '}'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: private
- en: Customer
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: Customer
- en: UpdateCache
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: UpdateCache
- en: (
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: id, Customer c
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: id, Customer c
- en: )
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Customer? old;
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: Customer? old;
- en: if
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (customersCache is
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: (customersCache is
- en: not
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: not
- en: 'null'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (customersCache.TryGetValue(id, out
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: (customersCache.TryGetValue(id, out
- en: old))
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: old))
- en: '{'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (customersCache.TryUpdate(id, c, old))
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: (customersCache.TryUpdate(id, c, old))
- en: '{'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: c;
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: c;
- en: '}'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'null'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: '!;'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '!;'
- en: '}'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: async
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<Customer?> UpdateAsync(string
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: Task<Customer?> UpdateAsync(string
- en: id, Customer c)
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: id, Customer c)
- en: '{'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // normalize customer Id
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: // 规范化客户Id
- en: id = id.ToUpper();
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: id = id.ToUpper();
- en: c.CustomerId = c.CustomerId.ToUpper();
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: c.CustomerId = c.CustomerId.ToUpper();
- en: // update in database
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: // 在数据库中更新
- en: db.Customers.Update(c);
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: db.Customers.Update(c);
- en: int
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: affected = await
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: affected = await
- en: db.SaveChangesAsync();
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: db.SaveChangesAsync();
- en: if
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (affected == 1
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: (affected == 1
- en: )
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // update in cache
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: // 在缓存中更新
- en: return
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: UpdateCache(id, c);
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: UpdateCache(id, c);
- en: '}'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'null'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ;
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: async
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<bool
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: Task<bool
- en: ?> DeleteAsync(string
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: ?> DeleteAsync(string
- en: id)
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: id)
- en: '{'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: id = id.ToUpper();
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: id = id.ToUpper();
- en: // remove from database
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: // 从数据库中删除
- en: Customer? c = db.Customers.Find(id);
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: Customer? c = db.Customers.Find(id);
- en: if
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (c is
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: (c is
- en: 'null'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ) return
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: ) 返回
- en: 'null'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ;
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: db.Customers.Remove(c);
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: db.Customers.Remove(c);
- en: int
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: affected = await
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: affected = await
- en: db.SaveChangesAsync();
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: db.SaveChangesAsync();
- en: if
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (affected == 1
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: (affected == 1
- en: )
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (customersCache is
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: (customersCache是
- en: 'null'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ) return
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: ) 返回
- en: 'null'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ;
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: // remove from cache
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: // 从缓存中删除
- en: return
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: customersCache.TryRemove(id, out
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: customersCache.TryRemove(id, out
- en: c);
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: c);
- en: '}'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: '{'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: 'null'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ;
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Implementing a Web API controller
  id: totrans-582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Web API控制器
- en: There are some useful attributes and methods for implementing a controller that
    returns data instead of HTML.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些有用的属性和方法，用于实现返回数据而不是HTML的控制器。
- en: With MVC controllers, a route like `/home/index` tells us the controller class
    name and the action method name, for example, the `HomeController` class and the
    `Index` action method.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MVC控制器，像`/home/index`这样的路由告诉我们控制器类名和操作方法名，例如`HomeController`类和`Index`操作方法。
- en: With Web API controllers, a route like `/weatherforecast` only tells us the
    controller class name, for example, `WeatherForecastController` . To determine
    the action method name to execute, we must map HTTP methods like `GET` and `POST`
    to methods in the controller class.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Web API控制器，像`/weatherforecast`这样的路由只告诉我们控制器类名，例如`WeatherForecastController`。要确定要执行的操作方法名称，我们必须将`GET`和`POST`等HTTP方法映射到控制器类中的方法。
- en: 'You should decorate controller methods with the following attributes to indicate
    the HTTP method that they will respond to:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 应该使用以下属性装饰控制器方法，以指示它们将响应的HTTP方法：
- en: '`[HttpGet]` , `[HttpHead]` : These action methods respond to `GET` or `HEAD`
    requests to retrieve a resource and return either the resource and its response
    headers or just the response headers.'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpGet]`，`[HttpHead]`：这些操作方法响应`GET`或`HEAD`请求，以检索资源并返回资源及其响应标头，或仅返回响应标头。'
- en: '`[HttpPost]` : This action method responds to `POST` requests to create a new
    resource or perform some other action defined by the service.'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpPost]`：此操作方法响应`POST`请求，以创建新资源或执行服务定义的其他操作。'
- en: '`[HttpPut]` , `[HttpPatch]` : These action methods respond to `PUT` or `PATCH`
    requests to update an existing resource either by replacing it or updating a subset
    of its properties.'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpPut]`，`[HttpPatch]`：这些操作方法响应`PUT`或`PATCH`请求，以更新现有资源，可以是替换它或更新其属性的子集。'
- en: '`[HttpDelete]` : This action method responds to `DELETE` requests to remove
    a resource.'
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpDelete]`：此操作方法响应`DELETE`请求，以删除资源。'
- en: '`[HttpOptions]` : This action method responds to `OPTIONS` requests.'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[HttpOptions]`：此操作方法响应`OPTIONS`请求。'
- en: Understanding action method return types
  id: totrans-592
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解操作方法返回类型
- en: An action method can return .NET types like a single `string` value, complex
    objects defined by a `class` , `record` , or `struct` , or collections of complex
    objects. The ASP.NET Core Web API will serialize them into the requested data
    format set in the HTTP request `Accept` header, for example, JSON, if a suitable
    serializer has been registered.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 操作方法可以返回.NET类型，如单个`string`值，由`class`，`record`或`struct`定义的复杂对象，或复杂对象的集合。ASP.NET
    Core Web API将根据HTTP请求的`Accept`标头中设置的请求数据格式（例如，如果已注册了合适的序列化程序，则为JSON）对它们进行序列化。
- en: For more control over the response, there are helper methods that return an
    `ActionResult` wrapper around the .NET type.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地控制响应，有一些辅助方法返回一个围绕.NET类型的`ActionResult`包装器。
- en: Declare the action method's return type to be `IActionResult` if it could return
    different return types based on inputs or other variables. Declare the action
    method's return type to be `ActionResult<T>` if it will only return a single type
    but with different status codes.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作方法根据输入或其他变量可能返回不同的返回类型，请将操作方法的返回类型声明为`IActionResult`。如果它只返回单个类型但具有不同的状态代码，请将操作方法的返回类型声明为`ActionResult<T>`。
- en: '**Good Practice** : Decorate action methods with the `[ProducesResponseType]`
    attribute to indicate all the known types and HTTP status codes that the client
    should expect in a response. This information can then be publicly exposed to
    document how a client should interact with your web service. Think of it as part
    of your formal documentation. Later in this chapter, you will learn how you can
    install a code analyzer to give you warnings when you do not decorate your action
    methods like this.'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：使用`[ProducesResponseType]`属性装饰操作方法，以指示客户端在响应中应该期望的所有已知类型和HTTP状态代码。然后可以公开此信息，以记录客户端应如何与您的网络服务进行交互。将其视为正式文档的一部分。在本章的后面，您将学习如何安装代码分析器，以在不像这样装饰操作方法时给出警告。'
- en: 'For example, an action method that gets a product based on an id parameter
    would be decorated with three attributes – one to indicate that it responds to
    `GET` requests and has an id parameter, and two to indicate what happens when
    it succeeds and when the client has supplied an invalid product ID, as shown in
    the following code:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，根据id参数获取产品的操作方法将被装饰为三个属性 - 一个用于指示它响应`GET`请求并具有id参数，另外两个用于指示成功时发生什么以及客户端提供无效产品ID时发生什么，如下面的代码所示：
- en: '```cs'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[HttpGet('
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpGet('
- en: '"{id}"'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '"{id}"'
- en: )
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(200, Type = typeof(Product))'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(200, Type = typeof(Product))'
- en: ']'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(404)'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(404)'
- en: ']'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: IActionResult
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: IActionResult
- en: Get
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 获取
- en: (
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: id
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: id
- en: )
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '```'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The `ControllerBase` class has methods to make it easy to return different
    responses, as shown in the following table:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '`ControllerBase`类具有使返回不同响应变得容易的方法，如下表所示：'
- en: '| Method | Description |'
  id: totrans-616
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| `Ok` | Returns a `200` status code and a resource converted to the client''s
    preferred format, like JSON or XML. Commonly used in response to a `GET` request.
    |'
  id: totrans-617
  prefs: []
  type: TYPE_TB
  zh: '| `Ok` | 返回`200`状态代码和转换为客户端首选格式（如JSON或XML）的资源。通常用于响应`GET`请求。 |'
- en: '| `CreatedAtRoute` | Returns a `201` status code and the path to the new resource.
    Commonly used in response to a `POST` request to create a resource that can be
    performed quickly. |'
  id: totrans-618
  prefs: []
  type: TYPE_TB
  zh: '| `CreatedAtRoute` | 返回`201`状态代码和新资源的路径。通常用于响应`POST`请求以快速创建资源。 |'
- en: '| `Accepted` | Returns a `202` status code to indicate the request is being
    processed but has not completed. Commonly used in response to a `POST` , `PUT`
    , `PATCH` , or `DELETE` request that triggers a background process that takes
    a long time to complete. |'
  id: totrans-619
  prefs: []
  type: TYPE_TB
  zh: '| `Accepted` | 返回`202`状态代码，表示请求正在处理但尚未完成。通常用于响应触发需要很长时间才能完成的后台进程的`POST`，`PUT`，`PATCH`或`DELETE`请求。
    |'
- en: '| `NoContentResult` | Returns a `204` status code and an empty response body.
    Commonly used in response to a `PUT` , `PATCH` , or `DELETE` request when the
    response does not need to contain the affected resource. |'
  id: totrans-620
  prefs: []
  type: TYPE_TB
  zh: '| `NoContentResult` | 返回`204`状态代码和空响应体。通常用于对`PUT`，`PATCH`或`DELETE`请求的响应，当响应不需要包含受影响的资源时。
    |'
- en: '| `BadRequest` | Returns a `400` status code and an optional message string
    with more details. |'
  id: totrans-621
  prefs: []
  type: TYPE_TB
  zh: '| `BadRequest` | 返回`400`状态代码和可选的消息字符串以提供更多细节。 |'
- en: '| `NotFound` | Returns a `404` status code and an automatically populated `ProblemDetails`
    body (requires a compatibility version of 2.2 or later). |'
  id: totrans-622
  prefs: []
  type: TYPE_TB
  zh: '| `NotFound` | 返回`404`状态代码和自动填充的`ProblemDetails`体（需要兼容版本为2.2或更高）。 |'
- en: Configuring the customer repository and Web API controller
  id: totrans-623
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置客户存储库和Web API控制器
- en: Now you will configure the repository so that it can be called from within a
    Web API controller.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将配置存储库，以便可以从Web API控制器中调用它。
- en: You will register a scoped dependency service implementation for the repository
    when the web service starts up and then use constructor parameter injection to
    get it in a new Web API controller for working with customers.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 当Web服务启动时，您将注册一个作用域依赖服务实现，然后使用构造函数参数注入在新的Web API控制器中获取它以处理客户。
- en: 'To show an example of differentiating between MVC and Web API controllers using
    routes, we will use the common `/api` URL prefix convention for the customers
    controller:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示使用路由区分MVC和Web API控制器的示例，我们将使用常见的`/api` URL前缀约定来为客户控制器：
- en: Open `Program.cs` and import the `Northwind.WebApi.Repositories` namespace.
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`并导入`Northwind.WebApi.Repositories`命名空间。
- en: 'Add a statement before the call to the `Build` method, which will register
    the `CustomerRepository` for use at runtime as a scoped dependency, as shown highlighted
    in the following code:'
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`Build`方法之前添加一条语句，该语句将注册`CustomerRepository`以在运行时作为作用域依赖项使用，如下面代码中的突出显示所示：
- en: '```cs'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**builder.Services.AddScoped<ICustomerRepository, CustomerRepository>();**'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '**builder.Services.AddScoped<ICustomerRepository, CustomerRepository>();**'
- en: var
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: app = builder.Build();
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: app = builder.Build();
- en: '```'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Our repository uses a database context that is registered
    as a scoped dependency. You can only use scoped dependencies inside other scoped
    dependencies, so we cannot register the repository as a singleton. You can read
    more about this at the following link: [https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped](https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped)'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：我们的存储库使用作为作用域依赖项注册的数据库上下文。您只能在其他作用域依赖项内使用作用域依赖项，因此我们不能将存储库注册为单例。您可以在以下链接中阅读更多信息：[https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped](https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#scoped)'
- en: In the `Controllers` folder, add a new class named `CustomersController.cs`
    .
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，添加一个名为`CustomersController.cs`的新类。
- en: 'In the `CustomersController` class file, add statements to define a Web API
    controller class to work with customers, as shown in the following code:'
  id: totrans-636
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CustomersController`类文件中，添加语句以定义一个与客户一起工作的Web API控制器类，如下面的代码所示：
- en: '```cs'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.AspNetCore.Mvc; // [Route], [ApiController], ControllerBase
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.AspNetCore.Mvc; // [Route], [ApiController], ControllerBase
- en: using
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Packt.Shared; // Customer
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared; // Customer
- en: using
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Northwind.WebApi.Repositories; // ICustomerRepository
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind.WebApi.Repositories; // ICustomerRepository
- en: namespace
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Northwind.WebApi.Controllers
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind.WebApi.Controllers
- en: ;
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '// base address: api/customers'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: // 基本地址：api/customers
- en: '[Route('
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '[Route('
- en: '"api/[controller]"'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: “api/[controller]”
- en: )
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ApiController'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '[ApiController'
- en: ']'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 公开的
- en: class
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: CustomersController
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: CustomersController
- en: ': ControllerBase'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: ：ControllerBase
- en: '{'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: private
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 私人的
- en: readonly
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 只读的
- en: ICustomerRepository repo;
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: ICustomerRepository repo;
- en: // constructor injects repository registered in Startup
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: // 构造函数注入在Startup中注册的存储库
- en: public
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 公开的
- en: CustomersController
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: CustomersController
- en: (
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ICustomerRepository repo
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: ICustomerRepository repo
- en: )
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: this
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 这个
- en: .repo = repo;
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: .repo = repo;
- en: '}'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '// GET: api/customers'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '// GET: api/customers'
- en: '// GET: api/customers/?country=[country]'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '// GET: api/customers/?country=[country]'
- en: // this will always return a list of customers (but it might be empty)
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: // 这将始终返回一个客户列表（但可能为空）
- en: '[HttpGet'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpGet'
- en: ']'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(200, Type = typeof(IEnumerable<Customer>))'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(200, Type = typeof(IEnumerable<Customer>))'
- en: ']'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 公开的
- en: async
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<IEnumerable<Customer>> GetCustomers(string
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IEnumerable<Customer>> GetCustomers(string
- en: '? country)'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '? country)'
- en: '{'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (string
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: (string
- en: .IsNullOrWhiteSpace(country))
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: .IsNullOrWhiteSpace(country))
- en: '{'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: await
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: await
- en: repo.RetrieveAllAsync();
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: repo.RetrieveAllAsync();
- en: '}'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: (await
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: (await
- en: repo.RetrieveAllAsync())
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: repo.RetrieveAllAsync())
- en: .Where(customer => customer.Country == country);
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: .Where(customer => customer.Country == country);
- en: '}'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '// GET: api/customers/[id]'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '// GET: api/customers/[id]'
- en: '[HttpGet('
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpGet('
- en: '"{id}"'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '"{id}"'
- en: ', Name = nameof(GetCustomer))'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: ，名称= nameof(GetCustomer))
- en: '] // named route'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '] // 命名路由'
- en: '[ProducesResponseType(200, Type = typeof(Customer))'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(200, Type = typeof(Customer))'
- en: ']'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(404)'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(404)'
- en: ']'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 公共的
- en: async
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<IActionResult>
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IActionResult>
- en: GetCustomer
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: GetCustomer
- en: (
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: id
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: id
- en: )
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Customer? c = await
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: Customer? c = await
- en: repo.RetrieveAsync(id);
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: repo.RetrieveAsync(id);
- en: if
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (c == null
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: (c == null
- en: )
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: NotFound(); // 404 Resource not found
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: NotFound(); // 404 Resource not found
- en: '}'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Ok(c); // 200 OK with customer in body
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: Ok(c); // 200 OK with customer in body
- en: '}'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '// POST: api/customers'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '// POST: api/customers'
- en: '// BODY: Customer (JSON, XML)'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '// BODY: Customer (JSON, XML)'
- en: '[HttpPost'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpPost'
- en: ']'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(201, Type = typeof(Customer))'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(201, Type = typeof(Customer))'
- en: ']'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(400)'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(400)'
- en: ']'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: async
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<IActionResult>
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IActionResult>
- en: Create
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: Create
- en: (
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '[FromBody] Customer c'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[FromBody] Customer c'
- en: )
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (c == null
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: (c == null
- en: )
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: BadRequest(); // 400 Bad request
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: BadRequest(); // 400 错误的请求
- en: '}'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Customer? addedCustomer = await
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: Customer? addedCustomer = await
- en: repo.CreateAsync(c);
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: repo.CreateAsync(c);
- en: if
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (addedCustomer == null
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: (addedCustomer == null?
- en: )
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: BadRequest("Repository failed to create customer."
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: BadRequest("Repository failed to create customer."
- en: );
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: CreatedAtRoute( // 201 Created
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: CreatedAtRoute( // 201 Created
- en: 'routeName: nameof'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 'routeName: nameof'
- en: (GetCustomer),
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: (GetCustomer),
- en: 'routeValues: new'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 'routeValues: new'
- en: '{ id = addedCustomer.CustomerId.ToLower() },'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '{ id = addedCustomer.CustomerId.ToLower() },'
- en: value
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: value
- en: ': addedCustomer);'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: ': addedCustomer);'
- en: '}'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '// PUT: api/customers/[id]'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '// PUT: api/customers/[id]'
- en: '// BODY: Customer (JSON, XML)'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '// BODY: Customer (JSON, XML)'
- en: '[HttpPut('
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpPut('
- en: '"{id}"'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '"{id}"'
- en: )
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(204)'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(204)'
- en: ']'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(400)'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(400)'
- en: ']'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(404)'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(404)'
- en: ']'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: async
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<IActionResult>
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IActionResult>
- en: Update
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: Update
- en: (
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: id, [FromBody] Customer c
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: id, [FromBody] Customer c
- en: )
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: id = id.ToUpper();
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: id = id.ToUpper();
- en: c.CustomerId = c.CustomerId.ToUpper();
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: c.CustomerId = c.CustomerId.ToUpper();
- en: if
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (c == null
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: (c == null
- en: '|| c.CustomerId != id)'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '|| c.CustomerId != id)'
- en: '{'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: BadRequest(); // 400 Bad request
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: BadRequest(); // 400 错误的请求
- en: '}'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Customer? existing = await
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: Customer? existing = await
- en: repo.RetrieveAsync(id);
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: repo.RetrieveAsync(id);
- en: if
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (existing == null
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: (existing == null
- en: )
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: NotFound(); // 404 Resource not found
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: NotFound(); // 404 资源未找到
- en: '}'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: await
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: await
- en: repo.UpdateAsync(id, c);
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: repo.UpdateAsync(id, c);
- en: return
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: new
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: NoContentResult(); // 204 No content
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: NoContentResult(); // 204 No content
- en: '}'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '// DELETE: api/customers/[id]'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '// DELETE: api/customers/[id]'
- en: '[HttpDelete('
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '[HttpDelete('
- en: '"{id}"'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '"{id}"'
- en: )
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(204)'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(204)'
- en: ']'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(400)'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(400)'
- en: ']'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[ProducesResponseType(404)'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '[ProducesResponseType(404)'
- en: ']'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: async
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<IActionResult>
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IActionResult>
- en: Delete
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: Delete
- en: (
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: id
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: id
- en: )
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Customer? existing = await
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: Customer? existing = await
- en: repo.RetrieveAsync(id);
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: repo.RetrieveAsync(id);
- en: if
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (existing == null
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: (existing == null
- en: )
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: NotFound(); // 404 Resource not found
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: NotFound(); // 404 资源未找到
- en: '}'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: bool
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: bool
- en: '? deleted = await'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '? deleted = await'
- en: repo.DeleteAsync(id);
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: repo.DeleteAsync(id);
- en: if
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (deleted.HasValue && deleted.Value) // short circuit AND
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: (deleted.HasValue && deleted.Value) // short circuit AND
- en: '{'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: new
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: NoContentResult(); // 204 No content
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: NoContentResult(); // 204 No content
- en: '}'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: BadRequest( // 400 Bad request
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: BadRequest( // 400 错误的请求
- en: $"Customer
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: $"Customer
- en: '{id}'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: '{id}'
- en: was found but failed to delete."
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: was found but failed to delete."
- en: );
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'While reviewing this Web API controller class, note the following:'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查此Web API控制器类时，请注意以下内容：
- en: The `Controller` class registers a route that starts with `api/` and includes
    the name of the controller, that is, `api/customers` .
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controller`类注册了一个以`api/`开头并包含控制器名称的路由，即`api/customers`。'
- en: The constructor uses dependency injection to get the registered repository for
    working with customers.
  id: totrans-873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数使用依赖注入来获取用于处理客户端的注册存储库。
- en: There are five action methods to perform CRUD operations on customers—two `GET`
    methods (for all customers or one customer), `POST` (create), `PUT` (update),
    and `DELETE` .
  id: totrans-874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有五个操作方法来执行客户端的CRUD操作——两个`GET`方法（用于所有客户端或一个客户端），`POST`（创建），`PUT`（更新）和`DELETE`。
- en: The `GetCustomers` method can have a `string` parameter passed with a country
    name. If it is missing, all customers are returned. If it is present, it is used
    to filter customers by country.
  id: totrans-875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetCustomers`方法可以传递一个`string`参数，其中包含一个国家名称。如果缺少，将返回所有客户端。如果存在，则用于按国家筛选客户端。'
- en: The `GetCustomer` method has a route explicitly named `GetCustomer` so that
    it can be used to generate a URL after inserting a new customer.
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetCustomer`方法具有显式命名为`GetCustomer`的路由，以便在插入新客户后生成URL。'
- en: The `Create` and `Update` methods both decorate the `customer` parameter with
    `[FromBody]` to tell the model binder to populate it with values from the body
    of the `POST` request.
  id: totrans-877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create`和`Update`方法都使用`[FromBody]`对`customer`参数进行装饰，以告知模型绑定器使用`POST`请求的主体中的值来填充它。'
- en: The `Create` method returns a response that uses the `GetCustomer` route so
    that the client knows how to get the newly created resource in the future. We
    are matching up two methods to create and then get a customer.
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create`方法返回一个使用`GetCustomer`路由的响应，以便客户端知道如何在将来获取新创建的资源。我们正在匹配两种方法来创建然后获取客户端。'
- en: The `Create` and `Update` methods do not need to check the model state of the
    customer passed in the body of the HTTP request and return a `400 Bad Request`
    containing details of the model validation errors if it is not valid because the
    controller is decorated with `[ApiController]` , which does this for you.
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create`和`Update`方法不需要检查HTTP请求主体中传递的客户端模型状态，并且如果无效，则返回包含模型验证错误详细信息的`400 Bad
    Request`，因为控制器已经使用`[ApiController]`进行了装饰，这样就可以为您完成这些操作。'
- en: When an HTTP request is received by the service, then it will create an instance
    of the `Controller` class, call the appropriate action method, return the response
    in the format preferred by the client, and release the resources used by the controller,
    including the repository and its data context.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务接收到HTTP请求时，它将创建`Controller`类的一个实例，调用适当的操作方法，以客户端首选的格式返回响应，并释放控制器使用的资源，包括存储库和其数据上下文。
- en: Specifying problem details
  id: totrans-881
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定问题详细信息
- en: A feature added in ASP.NET Core 2.1 and later is an implementation of a web
    standard for specifying problem details.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.1及更高版本中新增的一个功能是实现了一个用于指定问题详细信息的Web标准的实现。
- en: In Web API controllers decorated with `[ApiController]` in a project with ASP.NET
    Core 2.2 or later compatibility enabled, action methods that return `IActionResult`
    and return a client error status code, that is, `4xx` , will automatically include
    a serialized instance of the `ProblemDetails` class in the response body.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有`[ApiController]`的Web API控制器中，如果启用了ASP.NET Core 2.2或更高版本的兼容性，返回客户端错误状态码（即`4xx`）的操作方法将自动在响应主体中包含`ProblemDetails`类的序列化实例。
- en: If you want to take control, then you can create a `ProblemDetails` instance
    yourself and include additional information.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要控制，那么可以自己创建`ProblemDetails`实例并包含其他信息。
- en: 'Let''s simulate a bad request that needs custom data returned to the client:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们模拟一个需要返回自定义数据给客户端的错误请求：
- en: 'At the top of the implementation of the `Delete` method, add statements to
    check if the `id` matches the literal string value `"bad"` , and if so, then return
    a custom problem details object, as shown in the following code:'
  id: totrans-886
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Delete`方法的实现顶部，添加语句来检查`id`是否匹配字面字符串值`"bad"`，如果是，则返回一个自定义问题详细对象，如下面的代码所示：
- en: '```cs'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // take control of problem details
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: //控制问题详细信息
- en: if
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (id == "bad"
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: （id == "bad"
- en: )
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ProblemDetails problemDetails = new
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: ProblemDetails problemDetails = new
- en: ()
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Status = StatusCodes.Status400BadRequest,
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: Status = StatusCodes.Status400BadRequest,
- en: Type = "https://localhost:5001/customers/failed-to-delete"
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: Type = "https://localhost:5001/customers/failed-to-delete"
- en: ','
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: Title = $"Customer ID
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: Title = $"Customer ID
- en: '{id}'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '{id}'
- en: found but failed to delete."
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 找到但无法删除。"
- en: ','
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: Detail = "More details like Company Name, Country and so on."
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: Detail = "More details like Company Name, Country and so on."
- en: ','
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: Instance = HttpContext.Request.Path
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: Instance = HttpContext.Request.Path
- en: '};'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: return
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: BadRequest(problemDetails); // 400 Bad Request
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: BadRequest(problemDetails); // 400 Bad Request
- en: '}'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: You will test this functionality later.
  id: totrans-911
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将稍后测试此功能。
- en: Controlling XML serialization
  id: totrans-912
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制XML序列化
- en: In `Program.cs` , we added the `XmlSerializer` so that our Web API service can
    return XML as well as JSON if the client requests that.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，我们添加了`XmlSerializer`，以便我们的Web API服务可以在客户端请求时返回XML和JSON。
- en: 'However, the `XmlSerializer` cannot serialize interfaces, and our entity classes
    use `ICollection<T>` to define related child entities. This causes a warning at
    runtime, for example, for the `Customer` class and its `Orders` property, as shown
    in the following output:'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`XmlSerializer`无法序列化接口，我们的实体类使用`ICollection<T>`来定义相关的子实体。这会导致运行时出现警告，例如，对于`Customer`类及其`Orders`属性，如下面的输出所示：
- en: '```cs'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'warn: Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter[1]'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 'warn: Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter[1]'
- en: An error occurred while trying to create an XmlSerializer for the type 'Packt.Shared.Customer'.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试为类型'Packt.Shared.Customer'创建XmlSerializer时发生错误。
- en: 'System.InvalidOperationException: There was an error reflecting type ''Packt.Shared.Customer''.'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 'System.InvalidOperationException: There was an error reflecting type ''Packt.Shared.Customer''.'
- en: '--->'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '--->'
- en: 'System.InvalidOperationException: Cannot serialize member'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 系统无效操作异常：无法序列化成员
- en: '''Packt.'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: '''Packt.'
- en: Shared.Customer.Orders' of type 'System.Collections.Generic.ICollection`1[[Packt.
    Shared.Order, Northwind.Common.EntityModels, Version=1.0.0.0, Culture=neutral,
    PublicKeyToken=null]]', see inner exception for more details.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: Shared.Customer.Orders' of type 'System.Collections.Generic.ICollection`1[[Packt.
    Shared.Order, Northwind.Common.EntityModels, Version=1.0.0.0, Culture=neutral,
    PublicKeyToken=null]]', see inner exception for more details.
- en: '```'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'We can prevent this warning by excluding the `Orders` property when serializing
    a `Customer` to XML:'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在将`Customer`序列化为XML时排除`Orders`属性来防止此警告：
- en: In the `Northwind.Common.EntityModels.Sqlite` and the `Northwind.Common.EntityModels.SqlServer`
    projects, open `Customers.cs` .
  id: totrans-925
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.EntityModels.Sqlite`和`Northwind.Common.EntityModels.SqlServer`项目中，打开`Customers.cs`。
- en: Import the `System.Xml.Serialization` namespace so that we can use the `[XmlIgnore]`
    attribute.
  id: totrans-926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`System.Xml.Serialization`命名空间，以便我们可以使用`[XmlIgnore]`属性。
- en: 'Decorate the `Orders` property with an attribute to ignore it when serializing,
    as shown highlighted in the following code:'
  id: totrans-927
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Orders`属性上添加一个属性来忽略它在序列化时，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[InverseProperty(nameof(Order.Customer))'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '[InverseProperty(nameof(Order.Customer))'
- en: ']'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '**[**'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**XmlIgnore**'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '**XmlIgnore**'
- en: '**]**'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: public
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: virtual
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟
- en: ICollection<Order> Orders { get
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection<Order> Orders { get
- en: ; set
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the `Northwind.Common.EntityModels.SqlServer` project, decorate the `CustomerCustomerDemos`
    property with `[XmlIgnore]` too.
  id: totrans-940
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.EntityModels.SqlServer`项目中，也使用`[XmlIgnore]`装饰`CustomerCustomerDemos`属性。
- en: Documenting and testing web services
  id: totrans-941
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档化和测试Web服务
- en: You can easily test a web service by making HTTP `GET` requests using a browser.
    To test other HTTP methods, we need a more advanced tool.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用浏览器进行HTTP`GET`请求轻松测试Web服务。要测试其他HTTP方法，我们需要一个更高级的工具。
- en: Testing GET requests using a browser
  id: totrans-943
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用浏览器测试GET请求
- en: 'You will use Chrome to test the three implementations of a `GET` request –
    for all customers, for customers in a specified country, and for a single customer
    using their unique customer ID:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用Chrome测试`GET`请求的三种实现方式-所有客户，特定国家的客户以及使用其唯一客户ID的单个客户：
- en: Start the `Northwind.WebApi` web service.
  id: totrans-945
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi`网络服务。
- en: Start Chrome.
  id: totrans-946
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: Navigate to `https://localhost:5001/api/customers` and note the JSON document
    returned, containing all 91 customers in the Northwind database (unsorted), as
    shown in *Figure 16.3* :![](img/Image00131.jpg)
  id: totrans-947
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`https://localhost:5001/api/customers`，注意返回的JSON文档，其中包含Northwind数据库中的所有91个客户（未排序），如*图16.3*所示：![](img/Image00131.jpg)
- en: 'Figure 16.3: Customers from the Northwind database as a JSON document'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3：来自Northwind数据库的客户作为JSON文档
- en: Navigate to `https://localhost:5001/api/customers/?country=Germany` and note
    the JSON document returned, containing only the customers in Germany, as shown
    in *Figure 16.4* :![](img/Image00132.jpg)
  id: totrans-949
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`https://localhost:5001/api/customers/?country=Germany`，注意返回的JSON文档，其中只包含德国的客户，如*图16.4*所示：![](img/Image00132.jpg)
- en: 'Figure 16.4: A list of customers from Germany as a JSON document'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4：作为JSON文档的来自德国的客户列表
- en: If you get an empty array returned, then make sure you have entered the country
    name using the correct casing because the database query is case-sensitive. For
    example, compare the results of `uk` and `UK` .
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回一个空数组，则确保输入国家名称时使用正确的大小写，因为数据库查询是区分大小写的。例如，比较`uk`和`UK`的结果。
- en: Navigate to `https://localhost:5001/api/customers/alfki` and note the JSON document
    returned containing only the customer named **Alfreds Futterkiste** , as shown
    in *Figure 16.5* :![](img/Image00133.jpg)
  id: totrans-952
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`https://localhost:5001/api/customers/alfki`，并注意返回的JSON文档，其中只包含名为**Alfreds
    Futterkiste**的客户，如*图16.5*所示：![](img/Image00133.jpg)
- en: 'Figure 16.5: Specific customer information as a JSON document'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5：特定客户信息的JSON文档
- en: Unlike with country names, we do not need to worry about casing for the customer
    `id` value because inside the controller class, we normalized the `string` value
    to uppercase in code.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 与国家名称不同，对于客户`id`值，我们不需要担心大小写，因为在控制器类中，我们在代码中将`string`值标准化为大写。
- en: But how can we test the other HTTP methods, such as `POST` , `PUT` , and `DELETE`
    ? And how can we document our web service so it's easy for anyone to understand
    how to interact with it?
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们如何测试其他HTTP方法，比如`POST`，`PUT`和`DELETE`？我们如何记录我们的Web服务，以便任何人都能轻松理解如何与它交互？
- en: To solve the first problem, we can install a Visual Studio Code extension named
    **REST Client** . To solve the second, we can use **Swagger** , the world's most
    popular technology for documenting and testing HTTP APIs. But first, let's see
    what is possible with the Visual Studio Code extension.
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决第一个问题，我们可以安装一个名为**REST Client**的Visual Studio Code扩展。为了解决第二个问题，我们可以使用**Swagger**，这是全球最流行的用于记录和测试HTTP
    API的技术。但首先，让我们看看Visual Studio Code扩展可以实现什么。
- en: 'There are many tools for testing Web APIs, for example, **Postman** . Although
    Postman is popular, I prefer **REST Client** because it does not hide what is
    actually happening. I feel Postman is too GUI-y. But I encourage you to explore
    different tools and find the ones that fit your style. You can learn more about
    Postman at the following link: [https://www.postman.com/](https://www.postman.com/)'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多用于测试Web API的工具，例如**Postman**。尽管Postman很受欢迎，但我更喜欢**REST Client**，因为它不会隐藏实际发生的事情。我觉得Postman太过于图形化。但我鼓励您探索不同的工具，并找到适合您风格的工具。您可以在以下链接了解更多关于Postman的信息：[https://www.postman.com/](https://www.postman.com/)
- en: Testing HTTP requests with the REST Client extension
  id: totrans-958
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用REST Client扩展测试HTTP请求
- en: REST Client is an extension that allows you to send any type of HTTP request
    and view the response in Visual Studio Code. Even if you prefer to use Visual
    Studio as your code editor, it is useful to install Visual Studio Code to use
    an extension like REST Client.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: REST Client是一个扩展，允许您发送任何类型的HTTP请求并在Visual Studio Code中查看响应。即使您更喜欢使用Visual Studio作为您的代码编辑器，安装Visual
    Studio Code并使用REST Client等扩展也是有用的。
- en: Making GET requests using REST Client
  id: totrans-960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用REST Client进行GET请求
- en: 'We will start by creating a file for testing `GET` requests:'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个用于测试`GET`请求的文件：
- en: If you have not already installed REST Client by Huachao Mao (`humao.rest-client`
    ), then install it in Visual Studio Code now.
  id: totrans-962
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未安装Huachao Mao的REST Client（`humao.rest-client`），请立即在Visual Studio Code中安装它。
- en: In your preferred code editor, start the `Northwind.WebApi` project web service.
  id: totrans-963
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的代码编辑器中，启动`Northwind.WebApi`项目的Web服务。
- en: In Visual Studio Code, in the `PracticalApps` folder, create a `RestClientTests`
    folder, and then open the folder.
  id: totrans-964
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，在`PracticalApps`文件夹中，创建一个`RestClientTests`文件夹，然后打开该文件夹。
- en: 'In the `RestClientTests` folder, create a file named `get-customers.http` ,
    and modify its contents to contain an HTTP `GET` request to retrieve all customers,
    as shown in the following code:'
  id: totrans-965
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestClientTests`文件夹中，创建一个名为`get-customers.http`的文件，并修改其内容以包含一个HTTP `GET`请求，以检索所有客户，如下面的代码所示：
- en: '```cs'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: GET https://localhost:5001/api/customers/ HTTP/1.1
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: GET https://localhost:5001/api/customers/ HTTP/1.1
- en: '```'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In Visual Studio Code, navigate to **View** | **Command Palette** , enter `rest
    client` , select the command **Rest Client: Send Request** , and press Enter ,
    as shown in *Figure 16.6* :![](img/Image00134.jpg)'
  id: totrans-969
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在Visual Studio Code中，导航到**视图** | **命令面板**，输入`rest client`，选择命令**Rest Client:
    Send Request**，然后按Enter，如*图16.6*所示：![](img/Image00134.jpg)'
- en: 'Figure 16.6: Sending an HTTP GET request using REST Client'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.6：使用REST Client发送HTTP GET请求
- en: Note the **Response** is shown in a new tabbed window pane vertically and that
    you can rearrange the open tabs to a horizontal layout by dragging and dropping
    tabs.
  id: totrans-971
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意**响应**显示在一个新的选项卡窗格中，并且您可以通过拖放选项卡来重新排列打开的选项卡以获得水平布局。
- en: 'Enter more `GET` requests, each separated by three hash symbols, to test getting
    customers in various countries and getting a single customer using their ID, as
    shown in the following code:'
  id: totrans-972
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入更多的`GET`请求，每个请求之间用三个井号分隔，以测试获取不同国家的客户和使用其ID获取单个客户，如下面的代码所示：
- en: '```cs'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '###'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '###'
- en: GET https://localhost:5001/api/customers/?country=Germany HTTP/1.1
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: GET https://localhost:5001/api/customers/?country=Germany HTTP/1.1
- en: '###'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '###'
- en: GET https://localhost:5001/api/customers/?country=USA HTTP/1.1
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: GET https://localhost:5001/api/customers/?country=USA HTTP/1.1
- en: Accept
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 接受
- en: ': application/xml'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: ': application/xml'
- en: '###'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: '###'
- en: GET https://localhost:5001/api/customers/ALFKI HTTP/1.1
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: GET https://localhost:5001/api/customers/ALFKI HTTP/1.1
- en: '###'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '###'
- en: GET https://localhost:5001/api/customers/abcxy HTTP/1.1
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: GET https://localhost:5001/api/customers/abcxy HTTP/1.1
- en: '```'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Click the **Send Request** link above each request to send it; for example,
    the `GET` that has a request header to request customers in the USA as XML instead
    of JSON, as shown in *Figure 16.7* :![](img/Image00135.jpg)
  id: totrans-985
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击每个请求上方的**发送请求**链接以发送请求；例如，具有请求头以XML而不是JSON请求美国客户的`GET`，如*图16.7*所示：![](img/Image00135.jpg)
- en: 'Figure 16.7: Sending a request for XML and getting a response using REST Client'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7：使用REST Client发送XML请求并获取响应
- en: Making other requests using REST Client
  id: totrans-987
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用REST Client进行其他请求
- en: 'Next, we will create a file for testing other requests like `POST` :'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个用于测试其他请求的文件，比如`POST`：
- en: 'In the `RestClientTests` folder, create a file named `create-customer.http`
    and modify its contents to define a `POST` request to create a new customer, noting
    that REST Client will provide IntelliSense while you type common HTTP requests,
    as shown in the following code:'
  id: totrans-989
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestClientTests`文件夹中，创建一个名为`create-customer.http`的文件，并修改其内容以定义一个`POST`请求来创建一个新的客户，注意REST
    Client在您输入常见HTTP请求时会提供智能感知，如下面的代码所示：
- en: '```cs'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: POST https://localhost:5001/api/customers/ HTTP/1.1
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: POST https://localhost:5001/api/customers/ HTTP/1.1
- en: Content-Type
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 内容类型
- en: ': application/json'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: ': application/json'
- en: Content-Length
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: Content-Length
- en: ': 301'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: ': 301'
- en: '{'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"customerID": "ABCXY",'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '"customerID": "ABCXY",'
- en: '"companyName": "ABC Corp",'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: '"companyName": "ABC Corp",'
- en: '"contactName": "John Smith",'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: '"contactName": "John Smith",'
- en: '"contactTitle": "Sir",'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '"contactTitle": "先生",'
- en: '"address": "Main Street",'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '"地址": "Main Street",'
- en: '"city": "New York",'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '"city": "纽约",'
- en: '"region": "NY",'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '"地区": "纽约",'
- en: '"postalCode": "90210",'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '"邮政编码": "90210",'
- en: '"country":  "USA",'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: '"国家": "美国",'
- en: '"phone": "(123) 555-1234",'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: '"phone": "(123) 555-1234",'
- en: '"fax": null,'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '"fax": null,'
- en: '"orders": null'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: '"orders": null'
- en: '}'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Due to different line endings in different operating systems, the value for
    the `Content-Length` header will be different on Windows and macOS or Linux. If
    the value is wrong, then the request will fail. To discover the correct content
    length, select the body of the request and then look in the status bar for the
    number of characters, as shown in *Figure 16.8* :![](img/Image00136.jpg)
  id: totrans-1011
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于不同操作系统中的换行符不同，因此 `Content-Length` 标头的值在 Windows 和 macOS 或 Linux 上会有所不同。如果值错误，则请求将失败。要发现正确的内容长度，请选择请求的正文，然后在状态栏中查看字符数，如
    *图16.8* 所示：![](img/Image00136.jpg)
- en: 'Figure 16.8: Checking the correct content length'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.8：检查正确的内容长度
- en: Send the request and note the response is `201 Created` . Also note the location
    (that is, the URL) of the newly created customer is `https://localhost:5001/api/Customers/abcxy`
    , and includes the newly created customer in the response body, as shown in *Figure
    16.9* :![](img/Image00137.jpg)
  id: totrans-1013
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发送请求并注意响应是 `201 Created`。还要注意新创建的客户的位置（即 URL）是 `https://localhost:5001/api/Customers/abcxy`，并在响应正文中包含了新创建的客户，如
    *图16.9* 所示：![](img/Image00137.jpg)
- en: 'Figure 16.9: Adding a new customer'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9：添加新客户
- en: I will leave you an optional challenge to create REST Client files that test
    updating a customer (using `PUT` ) and deleting a customer (using `DELETE` ).
    Try them on customers that do exist as well as customers that do not. Solutions
    are in the GitHub repository for this book.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 我给你留下了一个可选的挑战，创建 REST 客户端文件来测试更新客户（使用 `PUT`）和删除客户（使用 `DELETE`）。尝试对现有客户和不存在的客户进行测试。本书的
    GitHub 存储库中有解决方案。
- en: Now that we've seen a quick and easy way to test our service, which also happens
    to be a great way to learn HTTP, what about external developers? We want it to
    be as easy as possible for them to learn and then call our service. For that purpose,
    we will use Swagger.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一种快速简单的测试服务的方法，这也是学习 HTTP 的好方法，那么外部开发人员呢？我们希望他们尽可能轻松地学习然后调用我们的服务。为此，我们将使用
    Swagger。
- en: Understanding Swagger
  id: totrans-1017
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Swagger
- en: The most important part of Swagger is the **OpenAPI Specification** , which
    defines a REST-style contract for your API, detailing all its resources and operations
    in a human- and machine-readable format for easy development, discovery, and integration.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger 最重要的部分是 **OpenAPI 规范**，它为您的 API 定义了一个 REST 风格的契约，详细说明了所有资源和操作，以人类和机器可读的格式进行易于开发、发现和集成。
- en: Developers can use the OpenAPI Specification for a Web API to automatically
    generate strongly-typed client-side code in their preferred language or library.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以使用 OpenAPI 规范为 Web API 自动生成其首选语言或库中的强类型客户端代码。
- en: For us, another useful feature is **Swagger UI** , because it automatically
    generates documentation for your API with built-in visual testing capabilities.
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，另一个有用的功能是 **Swagger UI**，因为它会自动生成 API 的文档，并具有内置的可视化测试功能。
- en: 'Let''s review how Swagger is enabled for our web service using the `Swashbuckle`
    package:'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下如何使用 `Swashbuckle` 包为我们的 Web 服务启用 Swagger：
- en: If the web service is running, shut down the web server.
  id: totrans-1022
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Web 服务正在运行，请关闭 Web 服务器。
- en: 'Open `Northwind.WebApi.csproj` and note the package reference for `Swashbuckle.AspNetCore`
    , as shown in the following markup:'
  id: totrans-1023
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Northwind.WebApi.csproj` 并注意 `Swashbuckle.AspNetCore` 的包引用，如下面的标记所示：
- en: '```cs'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference Include="Swashbuckle.AspNetCore"
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="Swashbuckle.AspNetCore"
- en: Version="6.1.5"
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 版本="6.1.5"
- en: />
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Update the version of the `Swashbuckle.AspNetCore` package to the latest, for
    example, at the time of writing in September 2021, it is `6.2.1` .
  id: totrans-1031
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Swashbuckle.AspNetCore` 包的版本更新为最新版本，例如，截至 2021 年 9 月的版本为 `6.2.1`。
- en: 'In `Program.cs` , note the import for Microsoft''s OpenAPI models namespace,
    as shown in the following code:'
  id: totrans-1032
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，请注意 Microsoft 的 OpenAPI 模型命名空间的导入，如下面的代码所示：
- en: '```cs'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.OpenApi.Models;
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.OpenApi.Models;
- en: '```'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Import Swashbuckle''s SwaggerUI namespace, as shown in the following code:'
  id: totrans-1037
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 Swashbuckle 的 SwaggerUI 命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Swashbuckle.AspNetCore.SwaggerUI; // SubmitMethod
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: Swashbuckle.AspNetCore.SwaggerUI; // SubmitMethod
- en: '```'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'About halfway down `Program.cs` , note the statement to add Swagger support
    including documentation for the Northwind service, indicating that this is the
    first version of your service, and change the title, as shown highlighted in the
    following code:'
  id: totrans-1042
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 的中间位置，请注意添加 Swagger 支持的语句，包括 Northwind 服务的文档，指示这是您的服务的第一个版本，并更改标题，如下面的代码中所示：
- en: '```cs'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: builder.Services.AddSwaggerGen(c =>
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services.AddSwaggerGen(c =>
- en: '{'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: c.SwaggerDoc("v1"
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: c.SwaggerDoc("v1"
- en: ', new'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: ', 新'
- en: ()
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{ Title = "'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '{ 标题 = "'
- en: '**Northwind Service API**'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: '**Northwind 服务 API**'
- en: '"'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: ', Version = "v1"'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: ', 版本 = "v1"'
- en: '});'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the section that configures the HTTP request pipeline, note the statements
    to use Swagger and Swagger UI when in development mode, and define an endpoint
    for the OpenAPI specification JSON document.
  id: totrans-1056
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置 HTTP 请求管道的部分，请注意在开发模式下使用 Swagger 和 Swagger UI 的语句，并为 OpenAPI 规范 JSON 文档定义一个端点。
- en: 'Add code to explicitly list the HTTP methods that we want to support in our
    web service and change the endpoint name, as shown highlighted in the following
    code:'
  id: totrans-1057
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码以明确列出我们希望在我们的 Web 服务中支持的 HTTP 方法，并更改端点名称，如下面的代码中所示：
- en: '```cs'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: app = builder.Build();
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: app = builder.Build();
- en: // Configure the HTTP request pipeline.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: // 配置 HTTP 请求管道。
- en: if
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (builder.Environment.IsDevelopment())
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: (builder.Environment.IsDevelopment())
- en: '{'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: app.UseSwagger();
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: app.UseSwagger();
- en: app.UseSwaggerUI(c =>
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: app.UseSwaggerUI(c =>
- en: '**{**'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**c.SwaggerEndpoint(**'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '**c.SwaggerEndpoint(**'
- en: '**"/swagger/v1/swagger.json"**'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '**"/swagger/v1/swagger.json"**'
- en: '**,**'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '**,**'
- en: '**"Northwind Service API Version 1"**'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '**"Northwind Service API Version 1"**'
- en: '**);**'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: '**});**'
- en: '**c.SupportedSubmitMethods(**'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '**c.SupportedSubmitMethods(**'
- en: '**new**'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: '**新**'
- en: '**[] {**'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '**[] {**'
- en: '**SubmitMethod.Get, SubmitMethod.Post,**'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: '**SubmitMethod.Get, SubmitMethod.Post,**'
- en: '**SubmitMethod.Put, SubmitMethod.Delete });**'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '**SubmitMethod.Put, SubmitMethod.Delete });**'
- en: '**});**'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: '**});**'
- en: '}'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Testing requests with Swagger UI
  id: totrans-1081
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Swagger UI测试请求
- en: 'You are now ready to test an HTTP request using Swagger:'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好使用Swagger测试HTTP请求：
- en: Start the `Northwind.WebApi` web service.
  id: totrans-1083
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi` Web服务。
- en: In Chrome, navigate to `https://localhost:5001/swagger/` and note that both
    the **Customers** and **WeatherForecast** Web API controllers have been discovered
    and documented, as well as **Schemas** used by the API.
  id: totrans-1084
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，导航至`https://localhost:5001/swagger/`，注意到**Customers**和**WeatherForecast**
    Web API控制器都已被发现和记录，以及API使用的**模式**。
- en: Click **GET /api/Customers/{id}** to expand that endpoint and note the required
    parameter for the **id** of a customer, as shown in *Figure 16.10* :![](img/Image00138.jpg)
  id: totrans-1085
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**GET /api/Customers/{id}**以展开该端点，并注意客户**id**的必需参数，如*图16.10*所示：![](img/Image00138.jpg)
- en: 'Figure 16.10: Checking the parameters for a GET request in Swagger'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.10：在Swagger中检查GET请求的参数
- en: Click **Try it out** , enter an **id** of `ALFKI` , and then click the wide
    blue **Execute** button, as shown in *Figure 16.11* :![](img/Image00139.jpg)
  id: totrans-1087
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**试一下**，输入`ALFKI`的**id**，然后点击宽蓝色的**执行**按钮，如*图16.11*所示：![](img/Image00139.jpg)
- en: 'Figure 16.11: Inputting a customer id before clicking the Execute button'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.11：在点击执行按钮之前输入客户id
- en: Scroll down and note the **Request URL** , **Server response** with **Code**
    , and **Details** including **Response body** and **Response headers** , as shown
    in *Figure 16.12* :![](img/Image00140.jpg)
  id: totrans-1089
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并注意**请求URL**，**服务器响应**与**代码**，以及包括**响应主体**和**响应头**在内的**详细信息**，如*图16.12*所示：![](img/Image00140.jpg)
- en: 'Figure 16.12: Information on ALFKI in a successful Swagger request'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.12：在成功的Swagger请求中关于ALFKI的信息
- en: Scroll back up to the top of the page, click **POST /api/Customers** to expand
    that section, and then click **Try it out** .
  id: totrans-1091
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动回到页面顶部，点击**POST /api/Customers**以展开该部分，然后点击**试一下**。
- en: 'Click inside the **Request body** box, and modify the JSON to define a new
    customer, as shown in the following JSON:'
  id: totrans-1092
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**请求主体**框内，并修改JSON以定义新客户，如下所示：
- en: '```cs'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '{'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"customerID"'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '"客户ID"'
- en: ': "SUPER"'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: ': "超级"'
- en: ','
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"companyName"'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: '"公司名称"'
- en: ': "Super Company"'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: ': "超级公司"'
- en: ','
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"contactName"'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '"联系人姓名"'
- en: ': "Rasmus Ibensen"'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: ': "拉斯姆斯·伊本森"'
- en: ','
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"contactTitle"'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: '"联系人职称"'
- en: ': "Sales Leader"'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: ': "销售主管"'
- en: ','
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"address"'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '"地址"'
- en: ': "Rotterslef 23"'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: ': "罗特斯莱夫23"'
- en: ','
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"city"'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '"城市"'
- en: ': "Billund"'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: ': "比伦德"'
- en: ','
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"region"'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '"地区"'
- en: ': null'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: ': null'
- en: ','
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"postalCode"'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: '"邮政编码"'
- en: ': "4371"'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: ': "4371"'
- en: ','
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"country"'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '"国家"'
- en: ': "Denmark"'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: ': "丹麦"'
- en: ','
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"phone"'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: '"电话"'
- en: ': "31 21 43 21"'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: ': "31 21 43 21"'
- en: ','
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"fax"'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '"传真"'
- en: ': "31 21 43 22"'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: ': "31 21 43 22"'
- en: '}'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Click **Execute** , and note the **Request URL** , **Server response** with
    **Code** , and **Details** including **Response body** and **Response headers**
    , noting that a response code of `201` means the customer was successfully created,
    as shown in *Figure 16.13* :![](img/Image00141.jpg)
  id: totrans-1129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行**，注意**请求URL**，**服务器响应**与**代码**，以及包括**响应主体**和**响应头**在内的**详细信息**，注意到`201`的响应代码意味着客户已成功创建，如*图16.13*所示：![](img/Image00141.jpg)
- en: 'Figure 16.13: Successfully adding a new customer'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.13：成功添加新客户
- en: Scroll back up to the top of the page, click **GET /api/Customers** , click
    **Try it out** , enter `Denmark` for the country parameter, and click **Execute**
    , to confirm that the new customer was added to the database, as shown in *Figure
    16.14* :![](img/Image00142.jpg)
  id: totrans-1131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动回到页面顶部，点击**GET /api/Customers**，点击**试一下**，为国家参数输入`丹麦`，然后点击**执行**，确认新客户已添加到数据库，如*图16.14*所示：![](img/Image00142.jpg)
- en: 'Figure 16.14: Successfully getting customers in Denmark including the newly
    added customer'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.14：成功获取包括新添加客户在内的丹麦客户
- en: Click **DELETE /api/Customers/{id}** , click **Try it out** , enter `super`
    for the **id** , click **Execute** , and note that the **Server response Code**
    is `204` , indicating that it was successfully deleted, as shown in *Figure 16.15*
    :![](img/Image00143.jpg)
  id: totrans-1133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**DELETE /api/Customers/{id}**，点击**试一下**，为**id**输入`super`，点击**执行**，注意**服务器响应代码**为`204`，表示已成功删除，如*图16.15*所示：![](img/Image00143.jpg)
- en: 'Figure 16.15: Successfully deleting a customer'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.15：成功删除客户
- en: Click **Execute** again, and note that the **Server response Code** is `404`
    , indicating that the customer does not exist anymore, and the **Response body**
    contains a problem details JSON document, as shown in *Figure 16.16* :![](img/Image00144.jpg)
  id: totrans-1135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**执行**，注意**服务器响应代码**为`404`，表示客户不再存在，而**响应主体**包含问题详细信息的JSON文档，如*图16.16*所示：![](img/Image00144.jpg)
- en: 'Figure 16.16: The deleted customer does not exist anymore'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.16：已删除的客户不再存在
- en: Enter `bad` for the **id** , click **Execute** again, and note that the **Server
    response Code** is `400` , indicating that the customer did exist but failed to
    be deleted (in this case, because the web service is simulating this error), and
    the **Response body** contains a custom problem details JSON document, as shown
    in *Figure 16.17* :![](img/Image00145.jpg)
  id: totrans-1137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次输入`bad`作为**id**，再次点击**执行**，注意**服务器响应代码**为`400`，表示客户确实存在但未能被删除（在这种情况下，是因为Web服务模拟了这个错误），而**响应主体**包含自定义问题详细信息的JSON文档，如*图16.17*所示：![](img/Image00145.jpg)
- en: 'Figure 16.17: The customer did exist but failed to be deleted'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.17：客户确实存在但未能被删除
- en: Use the `GET` methods to confirm that the new customer has been deleted from
    the database (there were originally only two customers in Denmark).
  id: totrans-1139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`GET`方法确认新客户已从数据库中删除（丹麦原本只有两个客户）。
- en: I will leave testing updates to an existing customer by using `PUT` to the reader.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把更新现有客户的测试留给读者，使用`PUT`。
- en: Close Chrome and shut down the web server.
  id: totrans-1141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Enabling HTTP logging
  id: totrans-1142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用HTTP日志记录
- en: 'HTTP logging is an optional middleware component that logs information about
    HTTP requests and HTTP responses including the following:'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP日志记录是一个可选的中间件组件，用于记录有关HTTP请求和HTTP响应的信息，包括以下内容：
- en: Information about the HTTP request
  id: totrans-1144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于HTTP请求的信息
- en: Headers
  id: totrans-1145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: Body
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正文
- en: Information about the HTTP response
  id: totrans-1147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于HTTP响应的信息
- en: This is valuable in web services for auditing and debugging scenarios but beware
    because it can negatively impact performance. You might also log **personally
    identifiable information** (**PII** ) which can cause compliance issues in some
    jurisdictions.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 这在Web服务中对审计和调试场景非常有价值，但要注意，它可能会对性能产生负面影响。您可能还会记录**个人身份信息**（PII），这可能会在某些司法管辖区引起合规问题。
- en: 'Let''s see HTTP logging in action:'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看HTTP日志记录的实际操作：
- en: 'In `Program.cs` , import the namespace for working with HTTP logging, as shown
    in the following code:'
  id: totrans-1150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入用于处理HTTP日志的命名空间，如下所示：
- en: '```cs'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.AspNetCore.HttpLogging; // HttpLoggingFields
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.AspNetCore.HttpLogging；// HttpLoggingFields
- en: '```'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the services configuration section, add a statement to configure HTTP logging,
    as shown in the following code:'
  id: totrans-1155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务配置部分，添加一个语句来配置HTTP日志记录，如下所示：
- en: '```cs'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: builder.Services.AddHttpLogging(options =>
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services.AddHttpLogging(options =>
- en: '{'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: options.LoggingFields = HttpLoggingFields.All;
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: options.LoggingFields = HttpLoggingFields.All;
- en: options.RequestBodyLogLimit = 4096
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: options.RequestBodyLogLimit = 4096
- en: ; // default is 32k
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: ; // 默认为32k
- en: options.ResponseBodyLogLimit = 4096
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: options.ResponseBodyLogLimit = 4096
- en: ; // default is 32k
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: ; // 默认为32k
- en: '});'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the HTTP pipeline configuration section, add a statement to add HTTP logging
    before the call to use routing, as shown in the following code:'
  id: totrans-1166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTTP管道配置部分，添加一个语句以在使用路由之前添加HTTP日志记录，如下所示：
- en: '```cs'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: app.UseHttpLogging();
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: app.UseHttpLogging();
- en: '```'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Start the `Northwind.WebApi` web service.
  id: totrans-1170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi` Web服务。
- en: Start Chrome.
  id: totrans-1171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: Navigate to `https://localhost:5001/api/customers` .
  id: totrans-1172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`https://localhost:5001/api/customers`。
- en: 'In a command prompt or terminal, note the request and response have been logged,
    as shown in the following output:'
  id: totrans-1173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，注意请求和响应已被记录，如下所示：
- en: '```cs'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]
- en: 'Request:'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 请求：
- en: 'Protocol: HTTP/1.1'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 协议：HTTP/1.1
- en: 'Method: GET'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：GET
- en: 'Scheme: https'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 方案：https
- en: 'PathBase:'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 路径基础：
- en: 'Path: /api/customers'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 路径：/api/customers
- en: 'QueryString:'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 查询字符串：
- en: 'Connection: keep-alive'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 连接：保持连接
- en: 'Accept: */*'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 接受：*/*
- en: 'Accept-Encoding: gzip, deflate, br'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 接受编码：gzip，deflate，br
- en: 'Host: localhost:5001'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 主机：localhost:5001
- en: 'info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]
- en: 'Response:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 响应：
- en: 'StatusCode: 200'
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码：200
- en: 'Content-Type: application/json; charset=utf-8'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 内容类型：application/json；charset=utf-8
- en: '...'
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'Transfer-Encoding: chunked'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 传输编码：分块
- en: '```'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Close Chrome and shut down the web server.
  id: totrans-1194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: You are now ready to build applications that consume your web service.
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经准备好构建消费您的Web服务的应用程序了。
- en: Consuming web services using HTTP clients
  id: totrans-1196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP客户端消费Web服务
- en: Now that we have built and tested our Northwind service, we will learn how to
    call it from any .NET app using the `HttpClient` class and its factory.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建并测试了我们的Northwind服务，我们将学习如何使用`HttpClient`类及其工厂从任何.NET应用程序中调用它。
- en: Understanding HttpClient
  id: totrans-1198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解HttpClient
- en: The easiest way to consume a web service is to use the `HttpClient` class. However,
    many people use it wrongly because it implements `IDisposable` and Microsoft's
    own documentation shows poor usage of it. See the book links in the GitHub repository
    for articles with more discussion of this.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 消费Web服务的最简单方法是使用`HttpClient`类。然而，许多人使用它的方式是错误的，因为它实现了`IDisposable`，而微软自己的文档显示了它的糟糕用法。请参阅GitHub存储库中的书籍链接，了解更多讨论。
- en: Usually, when a type implements `IDisposable` , you should create it inside
    a `using` statement to ensure that it is disposed of as soon as possible. `HttpClient`
    is different because it is shared, reentrant, and partially thread-safe.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当一个类型实现`IDisposable`时，您应该在`using`语句内创建它，以确保尽快将其处理掉。`HttpClient`不同，因为它是共享的、可重入的，并且部分线程安全。
- en: The problem has to do with how the underlying network sockets have to be managed.
    The bottom line is that you should use a single instance of it for each HTTP endpoint
    that you consume during the life of your application. This will allow each `HttpClient`
    instance to have defaults set that are appropriate for the endpoint it works with,
    while managing the underlying network sockets efficiently.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 问题涉及到底层网络套接字的管理方式。关键是，您应该在应用程序的生命周期内为每个HTTP端点使用单个实例。这将允许每个`HttpClient`实例设置适用于其工作的端点的默认值，同时有效地管理底层网络套接字。
- en: Configuring HTTP clients using HttpClientFactory
  id: totrans-1202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HttpClientFactory配置HTTP客户端
- en: Microsoft is aware of the issue, and in ASP.NET Core 2.1 they introduced `HttpClientFactory`
    to encourage best practice; that is the technique we will use.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 微软已经意识到了这个问题，在ASP.NET Core 2.1中引入了`HttpClientFactory`来鼓励最佳实践；这是我们将使用的技术。
- en: 'In the following example, we will use the Northwind MVC website as a client
    to the Northwind Web API service. Since both need to be hosted on a web server
    simultaneously, we first need to configure them to use different port numbers,
    as shown in the following list:'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将使用Northwind MVC网站作为Northwind Web API服务的客户端。由于两者需要同时托管在Web服务器上，我们首先需要配置它们使用不同的端口号，如下列表所示：
- en: The Northwind Web API service will listen on port `5002` using `HTTPS` .
  id: totrans-1205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Northwind Web API服务将使用`HTTPS`在端口`5002`上监听。
- en: The Northwind MVC website will continue to listen on port `5000` using `HTTP`
    and port `5001` using `HTTPS` .
  id: totrans-1206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Northwind MVC网站将继续使用`HTTP`在端口`5000`上监听，并使用`HTTPS`在端口`5001`上监听。
- en: 'Let''s configure those ports:'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置这些端口：
- en: 'In the `Northwind.WebApi` project, in `Program.cs` , add an extension method
    call to `UseUrls` to specify port `5002` for `HTTPS` , as shown highlighted in
    the following code:'
  id: totrans-1208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目的`Program.cs`中，添加一个扩展方法调用`UseUrls`来指定`HTTPS`的端口`5002`，如下所示：
- en: '```cs'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: builder = WebApplication.CreateBuilder(args);
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: builder = WebApplication.CreateBuilder(args);
- en: '**builder.WebHost.UseUrls(**'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: '**builder.WebHost.UseUrls(**'
- en: '**"https://localhost:5002/"**'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '**"https://localhost:5002/"**'
- en: '**);**'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '```'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the `Northwind.Mvc` project, open `Program.cs` and import the namespace
    for working with HTTP client factory, as shown in the following code:'
  id: totrans-1216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc`项目中，打开`Program.cs`并导入用于使用HTTP客户端工厂的命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Net.Http.Headers; // MediaTypeWithQualityHeaderValue
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: System.Net.Http.Headers; // MediaTypeWithQualityHeaderValue
- en: '```'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a statement to enable `HttpClientFactory` with a named client to make calls
    to the Northwind Web API service using HTTPS on port `5002` and request JSON as
    the default response format, as shown in the following code:'
  id: totrans-1221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个语句以启用`HttpClientFactory`，使用命名客户端调用Northwind Web API服务，使用HTTPS在端口`5002`上请求JSON作为默认响应格式，如下面的代码所示：
- en: '```cs'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'builder.Services.AddHttpClient(name: "Northwind.WebApi"'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 'builder.Services.AddHttpClient(name: "Northwind.WebApi"'
- en: ','
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'configureClient: options =>'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 'configureClient: options =>'
- en: '{'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: options.BaseAddress = new
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: options.BaseAddress = new
- en: Uri("https://localhost:5002/"
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: Uri("https://localhost:5002/"
- en: );
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: options.DefaultRequestHeaders.Accept.Add(
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: options.DefaultRequestHeaders.Accept.Add(
- en: new
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: MediaTypeWithQualityHeaderValue(
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: MediaTypeWithQualityHeaderValue(
- en: '"application/json"'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: '"application/json"'
- en: ', 1.0'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: ', 1.0'
- en: ));
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: ));
- en: '});'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Getting customers as JSON in the controller
  id: totrans-1238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在控制器中以JSON格式获取客户
- en: 'We can now create an MVC controller action method that uses the factory to
    create an HTTP client, makes a `GET` request for customers, and deserializes the
    JSON response using convenience extension methods introduced with .NET 5 in the
    `System.Net.Http.Json` assembly and namespace:'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个MVC控制器动作方法，使用工厂创建一个HTTP客户端，发出一个`GET`请求以获取客户，并使用.NET 5中引入的`System.Net.Http.Json`程序集和命名空间中的便利扩展方法对JSON响应进行反序列化：
- en: 'Open `Controllers/HomeController.cs` and declare a field to store the HTTP
    client factory, as shown in the following code:'
  id: totrans-1240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Controllers/HomeController.cs`并声明一个字段来存储HTTP客户端工厂，如下面的代码所示：
- en: '```cs'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: private
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 私人的
- en: readonly
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: readonly
- en: IHttpClientFactory clientFactory;
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: IHttpClientFactory clientFactory;
- en: '```'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Set the field in the constructor, as shown highlighted in the following code:'
  id: totrans-1246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中设置字段，如下面的代码中所示：
- en: '```cs'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: HomeController
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: HomeController
- en: (
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ILogger<HomeController> logger,
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: ILogger<HomeController> logger,
- en: NorthwindContext injectedContext
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: NorthwindContext injectedContext
- en: '**,**'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: '**,**'
- en: '**IHttpClientFactory httpClientFactory**'
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: '**IHttpClientFactory httpClientFactory**'
- en: )
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: _logger = logger;
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: _logger = logger;
- en: db = injectedContext;
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: db = injectedContext;
- en: '**clientFactory = httpClientFactory;**'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: '**clientFactory = httpClientFactory;**'
- en: '}'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Create a new action method for calling the Northwind Web API service, fetching
    all customers, and passing them to a view, as shown in the following code:'
  id: totrans-1262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为调用Northwind Web API服务、获取所有客户并将它们传递给视图创建一个新的动作方法，如下面的代码所示：
- en: '```cs'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 公共的
- en: async
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: async
- en: Task<IActionResult>
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: Task<IActionResult>
- en: Customers
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 顾客
- en: (
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: country
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 国家
- en: )
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: uri;
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: uri;
- en: if
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (string
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: (string
- en: .IsNullOrEmpty(country))
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: .IsNullOrEmpty(country))
- en: '{'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ViewData["Title"
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: ViewData["Title"
- en: '] = "All Customers Worldwide"'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: '] = "All Customers Worldwide"'
- en: ;
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: uri = "api/customers/"
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: uri = "api/customers/"
- en: ;
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: '{'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ViewData["Title"
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: ViewData["Title"
- en: '] = $"Customers in'
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: '] = $"Customers in'
- en: '{country}'
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: '{country}'
- en: '"'
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: ;
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: uri = $"api/customers/?country=
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: uri = $"api/customers/?country=
- en: '{country}'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: '{country}'
- en: '"'
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: ;
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: HttpClient client = clientFactory.CreateClient(
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: HttpClient client = clientFactory.CreateClient(
- en: 'name: "Northwind.WebApi"'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: "Northwind.WebApi"'
- en: );
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: HttpRequestMessage request = new
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: HttpRequestMessage request = new
- en: (
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: 'method: HttpMethod.Get, requestUri: uri);'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 'method: HttpMethod.Get, requestUri: uri);'
- en: HttpResponseMessage response = await
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: HttpResponseMessage response = await
- en: client.SendAsync(request);
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: client.SendAsync(request);
- en: IEnumerable<Customer>? model = await
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<Customer>? model = await
- en: response.Content
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: response.Content
- en: .ReadFromJsonAsync<IEnumerable<Customer>>();
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: .ReadFromJsonAsync<IEnumerable<Customer>>();
- en: return
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: View(model);
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: View(model);
- en: '}'
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the `Views/Home` folder, create a Razor file named `Customers.cshtml` .
  id: totrans-1312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`文件夹中，创建一个名为`Customers.cshtml`的Razor文件。
- en: 'Modify the Razor file to render the customers, as shown in the following markup:'
  id: totrans-1313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改Razor文件以呈现客户，如下面的标记所示：
- en: '```cs'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '@using Packt.Shared'
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: '@using Packt.Shared'
- en: '@model IEnumerable<Customer>'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: '@model IEnumerable<Customer>'
- en: <
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: h2
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: h2
- en: '>'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@ViewData["Title"]</'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '@ViewData["Title"]</'
- en: h2
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: h2
- en: '>'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: table
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 表
- en: class
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: '='
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"table"'
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: '"table"'
- en: '>'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: thead
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: thead
- en: '>'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: tr
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: tr
- en: '>'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: th
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Company Name</
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 公司名称</
- en: th
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: th
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Contact Name</
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人姓名</
- en: th
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: th
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Address</
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: Address</
- en: th
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: th
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Phone</
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 电话</
- en: th
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: th
- en: '>'
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: </
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: tr
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: tr
- en: '>'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: </
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: thead
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: thead
- en: '>'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: tbody
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: tbody
- en: '>'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@if (Model is not null)'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: '@if (Model is not null)'
- en: '{'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '@foreach (Customer c in Model)'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: '@foreach (Customer c in Model)'
- en: '{'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: <
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: tr
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: tr
- en: '>'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: td
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@Html.DisplayFor(modelItem => c.CompanyName)'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.CompanyName)'
- en: </
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: td
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: td
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@Html.DisplayFor(modelItem => c.ContactName)'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.ContactName)'
- en: </
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: td
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: td
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@Html.DisplayFor(modelItem => c.Address)'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.Address)'
- en: '@Html.DisplayFor(modelItem => c.City)'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.City)'
- en: '@Html.DisplayFor(modelItem => c.Region)'
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.Region)'
- en: '@Html.DisplayFor(modelItem => c.Country)'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.Country)'
- en: '@Html.DisplayFor(modelItem => c.PostalCode)'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.PostalCode)'
- en: </
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: td
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: td
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@Html.DisplayFor(modelItem => c.Phone)'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: '@Html.DisplayFor(modelItem => c.Phone)'
- en: </
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: td
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: </
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: tr
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: tr
- en: '>'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '}'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: tbody
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: tbody
- en: '>'
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: </
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: table
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 表
- en: '>'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '```'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Views/Home/Index.cshtml` , add a form after rendering the visitor count
    to allow visitors to enter a country and see the customers, as shown in the following
    markup:'
  id: totrans-1419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home/Index.cshtml`中，在呈现访客计数后添加一个表单，允许访客输入一个国家并查看客户，如下面的标记所示：
- en: '```cs'
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: h3
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: h3
- en: '>'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Query customers from a service</
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务中查询客户</
- en: h3
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: h3
- en: '>'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: form
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: form
- en: asp-action
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: asp-action
- en: '='
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"Customers"'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: '"Customers"'
- en: method
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: method
- en: '='
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"get"'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: '"get"'
- en: '>'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: input
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: input
- en: name
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: name
- en: '='
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"country"'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '"country"'
- en: placeholder
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: placeholder
- en: '='
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"Enter a country"'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: '"输入一个国家"'
- en: />
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: input
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: input
- en: type
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 类型
- en: '='
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"submit"'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: '"提交"'
- en: />
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: form
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: form
- en: '>'
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '```'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Enabling Cross-Origin Resource Sharing
  id: totrans-1455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用跨源资源共享
- en: '**Cross-Origin Resource Sharing** (**CORS** ) is an HTTP-header-based standard
    for protecting web resources when the client and server are on different domains
    (origins). It allows a server to indicate which origins (defined by a combination
    of domain, scheme, or port) other than its own it will permit the loading of resources
    from.'
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨源资源共享**（**CORS**）是基于HTTP头的标准，用于在客户端和服务器位于不同域（源）时保护Web资源。它允许服务器指示除自己之外的哪些来源（由域，方案或端口的组合定义）允许加载资源。'
- en: Since our web service is hosted on port `5002` and our MVC website is hosted
    on ports `5000` and `5001` , they are considered different origins and so resources
    cannot be shared.
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的Web服务托管在端口`5002`上，我们的MVC网站托管在端口`5000`和`5001`上，它们被视为不同的来源，因此资源不能共享。
- en: 'It would be useful to enable CORS on the server and configure our web service
    to only allow requests that originate from the MVC website:'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上启用CORS并配置我们的Web服务，以仅允许来自MVC网站的请求将是有用的：
- en: In the `Northwind.WebApi` project, open `Program.cs` .
  id: totrans-1459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，打开`Program.cs`。
- en: 'Add a statement in the services configuration section to add support for CORS,
    as shown in the following code:'
  id: totrans-1460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务配置部分中添加一条语句以添加对CORS的支持，如下面的代码所示：
- en: '```cs'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: builder.Services.AddCors();
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services.AddCors();
- en: '```'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a statement in the HTTP pipeline configuration section, before calling
    `UseEndpoints` , to use CORS and allow `GET` , `POST` , `PUT` , and `DELETE` requests
    from any website like Northwind MVC that has an origin of `https://localhost:5001`
    , as shown in the following code:'
  id: totrans-1464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用`UseEndpoints`之前，在HTTP管道配置部分中添加一条语句，以使用CORS并允许来自任何网站的`GET`，`POST`，`PUT`和`DELETE`请求，例如具有`https://localhost:5001`来源的Northwind
    MVC，如下面的代码所示：
- en: '```cs'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'app.UseCors(configurePolicy: options =>'
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 'app.UseCors(configurePolicy: options =>'
- en: '{'
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: options.WithMethods("GET"
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: options.WithMethods("GET"
- en: ', "POST"'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: ，"POST"
- en: ', "PUT"'
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: ，"PUT"
- en: ', "DELETE"'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: ，"DELETE"
- en: );
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: options.WithOrigins(
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: options.WithOrigins(
- en: '"https://localhost:5001"'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '"https://localhost:5001"'
- en: // allow requests from the MVC client
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: //允许来自MVC客户端的请求
- en: );
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '});'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Start the `Northwind.WebApi` project and confirm that the web service is listening
    only on port `5002` , as shown in the following output:'
  id: totrans-1479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.WebApi`项目，并确认Web服务仅在端口`5002`上侦听，如下面的输出所示：
- en: '```cs'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'info: Microsoft.Hosting.Lifetime[14]'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：Microsoft.Hosting.Lifetime[14]
- en: 'Now listening on: https://localhost:5002'
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 现在正在侦听：https://localhost:5002
- en: '```'
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Start the `Northwind.Mvc` project and confirm that the website is listening
    on ports `5000` and `5002` , as shown in the following output:'
  id: totrans-1484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Mvc`项目，并确认网站正在端口`5000`和`5002`上侦听，如下面的输出所示：
- en: '```cs'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'info: Microsoft.Hosting.Lifetime[14]'
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：Microsoft.Hosting.Lifetime[14]
- en: 'Now listening on: https://localhost:5001'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 现在正在侦听：https://localhost:5001
- en: 'info: Microsoft.Hosting.Lifetime[14]'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：Microsoft.Hosting.Lifetime[14]
- en: 'Now listening on: http://localhost:5000'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 现在正在侦听：http://localhost:5000
- en: '```'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Start Chrome.
  id: totrans-1491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome。
- en: In the customer form, enter a country like `Germany` , `UK` , or `USA` , click
    **Submit** , and note the list of customers, as shown in *Figure 16.18* :![](img/Image00146.jpg)
  id: totrans-1492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户表单中，输入国家，如`德国`，`英国`或`美国`，单击**提交**，并注意客户列表，如*图16.18*所示：![](img/Image00146.jpg)
- en: 'Figure 16.18: Customers in the UK'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.18：英国的客户
- en: Click the **Back** button in your browser, clear the country textbox, click
    **Submit** , and note the worldwide list of customers.
  id: totrans-1494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击浏览器中的**返回**按钮，清除国家文本框，单击**提交**，并注意全球客户列表。
- en: 'In a command prompt or terminal, note the `HttpClient` writes each HTTP request
    that it makes and HTTP response that it receives, as shown in the following output:'
  id: totrans-1495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，注意`HttpClient`写入它发出的每个HTTP请求和它接收到的HTTP响应，如下面的输出所示：
- en: '```cs'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[100]'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[100]
- en: Sending HTTP request GET https://localhost:5002/api/customers/?country=UK
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 发送HTTP请求GET https://localhost:5002/api/customers/?country=UK
- en: 'info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[101]'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[101]
- en: Received HTTP response headers after 931.864ms - 200
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 在931.864ms后收到HTTP响应头-200
- en: '```'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Close Chrome and shut down the web server.
  id: totrans-1502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: You have successfully built a web service and called it from an MVC website.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功构建了一个Web服务并从MVC网站调用它。
- en: Implementing advanced features for web services
  id: totrans-1504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Web服务的高级功能
- en: Now that you have seen the fundamentals of building a web service and then calling
    it from a client, let's look at some more advanced features.
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了构建Web服务然后从客户端调用它的基础知识，让我们看一些更高级的功能。
- en: Implementing a Health Check API
  id: totrans-1506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现健康检查API
- en: There are many paid services that perform site availability tests that are basic
    pings, some with more advanced analysis of the HTTP response.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多付费服务执行站点可用性测试，这些测试是基本的ping，有些还具有对HTTP响应的更高级分析。
- en: ASP.NET Core 2.2 and later makes it easy to implement more detailed website
    health checks. For example, your website might be live, but is it ready? Can it
    retrieve data from its database?
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2及更高版本使实现更详细的网站健康检查变得容易。例如，您的网站可能是活动的，但它准备好了吗？它能从数据库中检索数据吗？
- en: 'Let''s add basic health check capabilities to our web service:'
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的Web服务添加基本的健康检查功能：
- en: 'In the `Northwind.WebApi` project, add a project reference to enable Entity
    Framework Core database health checks, as shown in the following markup:'
  id: totrans-1510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.WebApi`项目中，添加项目引用以启用Entity Framework Core数据库健康检查，如下标记所示：
- en: '```cs'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PackageReference Include=
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include=
- en: '"Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore"'
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: '"Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore"'
- en: Version="6.0.0"
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '```'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the project.
  id: totrans-1517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。
- en: 'In `Program.cs` , at the bottom of the services configuration section, add
    a statement to add health checks, including to the Northwind database context,
    as shown in the following code:'
  id: totrans-1518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在服务配置部分的底部，添加一条语句以添加健康检查，包括对Northwind数据库上下文的检查，如下面的代码所示：
- en: '```cs'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: builder.Services.AddHealthChecks()
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services.AddHealthChecks()
- en: .AddDbContextCheck<NorthwindContext>();
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: .AddDbContextCheck<NorthwindContext>();
- en: '```'
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: By default, the database context check calls EF Core's `CanConnectAsync` method.
    You can customize what operation is run by calling the `AddDbContextCheck` method.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，数据库上下文检查调用 EF Core 的 `CanConnectAsync` 方法。您可以通过调用 `AddDbContextCheck`
    方法自定义要运行的操作。
- en: 'In the HTTP pipeline configuration section, before the call to `MapControllers`
    , add a statement to use basic health checks, as shown in the following code:'
  id: totrans-1524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 HTTP 管道配置部分，在调用 `MapControllers` 之前，添加一个语句以使用基本健康检查，如下面的代码所示：
- en: '```cs'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'app.UseHealthChecks(path: "/howdoyoufeel"'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 'app.UseHealthChecks(path: "/howdoyoufeel"'
- en: );
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Start the web service.
  id: totrans-1529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Web 服务。
- en: Start Chrome.
  id: totrans-1530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome。
- en: 'Navigate to `https://localhost:5002/howdoyoufeel` and note that the web service
    responds with a plain text response: `Healthy` .'
  id: totrans-1531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `https://localhost:5002/howdoyoufeel` 并注意到 Web 服务以纯文本响应“Healthy” 响应。
- en: 'At the command prompt or terminal, note the SQL statement that was executed
    to test the health of the database, as shown in the following output:'
  id: totrans-1532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，注意执行的 SQL 语句以测试数据库的健康状况，如下面的输出所示：
- en: '```cs'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType=''Text'',
    CommandTimeout=''30'']'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件 ID：20100，状态：执行 DbCommand [Parameters=[]，CommandType='Text'，CommandTimeout='30']
- en: SELECT 1
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT 1
- en: '```'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Close Chrome and shut down the web server.
  id: totrans-1537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 Web 服务器。
- en: Implementing Open API analyzers and conventions
  id: totrans-1538
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 Open API 分析器和约定
- en: In this chapter, you learned how to enable Swagger to document a web service
    by manually decorating a controller class with attributes.
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何通过手动为控制器类添加属性来启用 Swagger 来记录 Web 服务。
- en: In ASP.NET Core 2.2 or later, there are API analyzers that reflect over controller
    classes that have been annotated with the `[ApiController]` attribute to document
    it automatically. The analyzer assumes some API conventions.
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 2.2 或更高版本中，有 API 分析器，可以自动记录已用 `[ApiController]` 属性注释的控制器类。分析器假定了一些
    API 约定。
- en: 'To use it, your project must enable the OpenAPI Analyzers, as shown highlighted
    in the following markup:'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，您的项目必须启用 OpenAPI 分析器，如下面的标记所示：
- en: '```cs'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PropertyGroup>
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <TargetFramework>net6.0
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: '**<IncludeOpenAPIAnalyzers>**'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: '**<IncludeOpenAPIAnalyzers>**'
- en: '**true**'
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: '**</IncludeOpenAPIAnalyzers>**'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: '**</IncludeOpenAPIAnalyzers>**'
- en: </PropertyGroup>
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: '```'
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: After installing, controllers that have not been properly decorated should have
    warnings (green squiggles) and warnings when you compile the source code. For
    example, the `WeatherForecastController` class.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，未经适当装饰的控制器应该在编译源代码时出现警告（绿色波浪线）。例如，`WeatherForecastController` 类。
- en: Automatic code fixes can then add the appropriate `[Produces]` and `[ProducesResponseType]`
    attributes, although this only currently works in Visual Studio. In Visual Studio
    Code, you will see warnings about where the analyzer thinks you should add attributes,
    but you must add them yourself.
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，自动代码修复可以添加适当的 `[Produces]` 和 `[ProducesResponseType]` 属性，尽管这目前仅在 Visual Studio
    中有效。在 Visual Studio Code 中，您将看到分析器认为您应该添加属性的位置的警告，但您必须自己添加它们。
- en: Implementing transient fault handling
  id: totrans-1555
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现瞬态故障处理
- en: When a client app or website calls a web service, it could be from across the
    other side of the world. Network problems between the client and the server could
    cause issues that are nothing to do with your implementation code. If a client
    makes a call and it fails, the app should not just give up. If it tries again,
    the issue may now have been resolved. We need a way to handle these temporary
    faults.
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端应用程序或网站调用 Web 服务时，可能来自世界的另一边。客户端和服务器之间的网络问题可能导致与您的实现代码无关的问题。如果客户端发起调用并失败，应用程序不应该放弃。如果再次尝试，问题可能已经解决。我们需要一种处理这些临时故障的方法。
- en: To handle these transient faults, Microsoft recommends that you use the third-party
    library Polly to implement automatic retries with exponential backoff. You define
    a policy, and the library handles everything else.
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这些瞬态故障，Microsoft 建议您使用第三方库 Polly 来实现指数退避的自动重试。您定义一个策略，库会处理其他一切。
- en: '**Good Practice** : You can read more about how Polly can make your web services
    more reliable at the following link: [https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly)'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：您可以在以下链接中了解有关 Polly 如何使您的 Web 服务更可靠的更多信息：[https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly](https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/implement-http-call-retries-exponential-backoff-polly)'
- en: Adding security HTTP headers
  id: totrans-1559
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加安全 HTTP 标头
- en: ASP.NET Core has built-in support for common security HTTP headers like HSTS.
    But there are many more HTTP headers that you should consider implementing.
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 具有内置支持常见安全 HTTP 标头的功能，如 HSTS。但是还有许多其他 HTTP 标头，您应该考虑实现。
- en: 'The easiest way to add these headers is using a middleware class:'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 使用中间件类是添加这些标头的最简单方法：
- en: 'In the `Northwind.WebApi` project/folder, create a file named `SecurityHeadersMiddleware.cs`
    and modify its statements, as shown in the following code:'
  id: totrans-1562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.WebApi` 项目/文件夹中，创建一个名为 `SecurityHeadersMiddleware.cs` 的文件，并修改其语句，如下面的代码所示：
- en: '```cs'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.Extensions.Primitives; // StringValues
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.Extensions.Primitives; // StringValues
- en: public
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: SecurityHeaders
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: SecurityHeaders
- en: '{'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: private
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: private
- en: readonly
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: readonly
- en: RequestDelegate next;
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: RequestDelegate next;
- en: public
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: SecurityHeaders
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: SecurityHeaders
- en: (
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: RequestDelegate next
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: RequestDelegate next
- en: )
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: this
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: this
- en: .next = next;
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: .next = next;
- en: '}'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Task
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: Task
- en: Invoke
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: Invoke
- en: (
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: HttpContext context
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: HttpContext context
- en: )
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // add any HTTP response headers you want here
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: // 在这里添加任何 HTTP 响应标头
- en: context.Response.Headers.Add(
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: context.Response.Headers.Add(
- en: '"super-secure"'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: '"super-secure"'
- en: ', new'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: ', new'
- en: StringValues("enable"
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: StringValues("enable"
- en: ));
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: ));
- en: return
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: next(context);
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: next(context);
- en: '}'
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , in the HTTP pipeline configuration section, add a statement
    to register the middleware before the call to `UseEndpoints` , as shown in the
    following code:'
  id: totrans-1600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在 HTTP 管道配置部分，添加一个语句在调用 `UseEndpoints` 之前注册中间件，如下面的代码所示：
- en: '```cs'
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: app.UseMiddleware<SecurityHeaders>();
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: app.UseMiddleware<SecurityHeaders>();
- en: '```'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Start the web service.
  id: totrans-1604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网络服务。
- en: Start Chrome.
  id: totrans-1605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome。
- en: Show **Developer tools** and its **Network** tab to record requests and responses.
  id: totrans-1606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示**开发者工具**及其**网络**选项卡以记录请求和响应。
- en: Navigate to `https://localhost:5002/weatherforecast` .
  id: totrans-1607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `https://localhost:5002/weatherforecast`。
- en: Note the custom HTTP response header that we added named `super-secure` , as
    shown in *Figure 16.19* :![](img/Image00147.jpg)
  id: totrans-1608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意我们添加的名为 `super-secure` 的自定义 HTTP 响应标头，如 *图 16.19* 所示：![](img/Image00147.jpg)
- en: 'Figure 16.19: Adding a custom HTTP header named super-secure'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.19：添加名为 super-secure 的自定义 HTTP 标头
- en: Building web services using minimal APIs
  id: totrans-1610
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用最小的 API 构建网络服务
- en: For .NET 6, Microsoft put a lot of effort into adding new features to the C#
    10 language and simplifying the ASP.NET Core libraries to enable the creation
    of web services using minimal APIs.
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 .NET 6，微软付出了很多努力，添加了新功能到 C# 10 语言，并简化了 ASP.NET Core 库，以便使用最小的 API 创建网络服务。
- en: You might remember the weather forecast service that is provided in the Web
    API project template. It shows the use of a controller class to return a five-day
    weather forecast using faked data. We will now recreate that weather service using
    minimal APIs.
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得 Web API 项目模板中提供的天气预报服务。它展示了使用控制器类返回使用伪造数据的五天天气预报。我们现在将使用最小的 API 重新创建该天气服务。
- en: 'First, the weather service has a class to represent a single weather forecast.
    We will need to use this class in multiple projects, so let''s create a class
    library for that:'
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，天气服务有一个类来表示单个天气预报。我们将需要在多个项目中使用这个类，所以让我们为此创建一个类库：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-1614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个新项目，如下列表所示：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-1615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-1616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common`'
  id: totrans-1617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common`
- en: Rename `Class1.cs` to `WeatherForecast.cs` .
  id: totrans-1618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Class1.cs` 重命名为 `WeatherForecast.cs`。
- en: 'Modify `WeatherForecast.cs` , as shown in the following code:'
  id: totrans-1619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `WeatherForecast.cs`，如下面的代码所示：
- en: '```cs'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Northwind.Common
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind.Common
- en: '{'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: WeatherForecast
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: WeatherForecast
- en: '{'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: readonly
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: readonly
- en: string
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '[] Summaries = new'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: '[] 摘要 = 新'
- en: '[]'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '[]'
- en: '{'
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"Freezing"'
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: '"寒冷"'
- en: ', "Bracing"'
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: ', "清爽"'
- en: ', "Chilly"'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: ', "寒冷"'
- en: ', "Cool"'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: ', "凉爽"'
- en: ', "Mild"'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: ', "温和"'
- en: ','
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"Warm"'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: '"温暖"'
- en: ', "Balmy"'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: ', "温暖"'
- en: ', "Hot"'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: ', "炎热"'
- en: ', "Sweltering"'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: ', "酷热"'
- en: ', "Scorching"'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: ', "灼热"'
- en: '};'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: public
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DateTime Date { get
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime Date { get
- en: ; set
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: int
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: TemperatureC { get
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: TemperatureC { get
- en: ; set
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: int
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: TemperatureF => 32
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: TemperatureF => 32
- en: + (int
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: + (int
- en: )(TemperatureC / 0.5556
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: )(TemperatureC / 0.5556
- en: );
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: public
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '? Summary { get'
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: '? Summary { get'
- en: ; set
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Building a weather service using minimal APIs
  id: totrans-1670
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用最小的 API 构建天气服务
- en: 'Now let''s recreate that weather service using minimal APIs. It will listen
    on port `5003` and have CORS support enabled so that requests can only come from
    the MVC website and only `GET` requests are allowed:'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用最小的 API 重新创建该天气服务。它将在端口 `5003` 上监听，并启用 CORS 支持，以便请求只能来自 MVC 网站，并且只允许
    `GET` 请求：
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  id: totrans-1672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器添加一个新项目，如下列表所示：
- en: 'Project template: **ASP.NET Core Empty** / `web`'
  id: totrans-1673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**ASP.NET Core 空** / `web`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-1674
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Minimal.WebApi`'
  id: totrans-1675
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Minimal.WebApi`
- en: 'Other Visual Studio options: **Authentication Type** : None, **Configure for
    HTTPS** : selected, **Enable Docker** : cleared, **Enable OpenAPI support** :
    selected.'
  id: totrans-1676
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他 Visual Studio 选项：**身份验证类型**：无，**配置为 HTTPS**：已选择，**启用 Docker**：已清除，**启用 OpenAPI
    支持**：已选择。
- en: In Visual Studio Code, select `Minimal.WebApi` as the active OmniSharp project.
  id: totrans-1677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，选择 `Minimal.WebApi` 作为活动的 OmniSharp 项目。
- en: 'In the `Minimal.WebApi` project, add a project reference to the `Northwind.Common`
    project, as shown in the following markup:'
  id: totrans-1678
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Minimal.WebApi` 项目中，添加对 `Northwind.Common` 项目的项目引用，如下标记所示：
- en: '```cs'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <ProjectReference Include="..\Northwind.Common\Northwind.Common.csproj"
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: <ProjectReference Include="..\Northwind.Common\Northwind.Common.csproj"
- en: />
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the `Minimal.WebApi` project.
  id: totrans-1685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Minimal.WebApi` 项目。
- en: 'Modify `Program.cs` , as shown highlighted in the following code:'
  id: totrans-1686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `Program.cs`，如下面的代码中所示：
- en: '```cs'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**using**'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: '**using**'
- en: '**Northwind.Common;**'
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: '**Northwind.Common;**'
- en: '**// WeatherForecast**'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: '**// WeatherForecast**'
- en: var
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: builder = WebApplication.CreateBuilder(args);
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: builder = WebApplication.CreateBuilder(args);
- en: '**builder.WebHost.UseUrls(**'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: '**builder.WebHost.UseUrls(**'
- en: '**"https://localhost:5003"**'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: '**"https://localhost:5003"**'
- en: '**);**'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**builder.Services.AddCors();**'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: '**builder.Services.AddCors();**'
- en: var
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: app = builder.Build();
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: app = builder.Build();
- en: '**// only allow the MVC client and only GET requests**'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 仅允许 MVC 客户端，且仅允许 GET 请求**'
- en: '**app.UseCors(configurePolicy: options =>**'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: '**app.UseCors(configurePolicy: options =>**'
- en: '**{**'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**options.WithMethods(**'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: '**options.WithMethods(**'
- en: '**"GET"**'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: '**"GET"**'
- en: '**);**'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**options.WithOrigins(**'
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: '**options.WithOrigins(**'
- en: '**"https://localhost:5001"**'
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: '**"https://localhost:5001"**'
- en: '**);**'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**});**'
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: '**});**'
- en: '**app.MapGet(**'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: '**app.MapGet(**'
- en: '**"/api/weather"**'
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: '**"/api/weather"**'
- en: '**, () =>**'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: '**, () =>**'
- en: '**{**'
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**return**'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: '**return**'
- en: '**Enumerable.Range(**'
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: '**Enumerable.Range(**'
- en: '**1**'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: '**1**'
- en: '**,**'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: '**,**'
- en: '**5**'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: '**5**'
- en: '**).Select(index =>**'
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: '**).Select(index =>**'
- en: '**new**'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**WeatherForecast**'
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: '**WeatherForecast**'
- en: '**{**'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**Date = DateTime.Now.AddDays(index),**'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: '**Date = DateTime.Now.AddDays(index),**'
- en: '**TemperatureC = Random.Shared.Next(**'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: '**TemperatureC = Random.Shared.Next(**'
- en: '**-20**'
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: '**-20**'
- en: '**,**'
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: '**,**'
- en: '**55**'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: '**55**'
- en: '**),**'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: '**),**'
- en: '**Summary = WeatherForecast.Summaries[**'
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: '**摘要 = WeatherForecast.Summaries[**'
- en: '**Random.Shared.Next(WeatherForecast.Summaries.Length)]**'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: '**Random.Shared.Next(WeatherForecast.Summaries.Length)]**'
- en: '**})**'
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: '**})**'
- en: '**.ToArray();**'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: '**.ToArray();**'
- en: '**});**'
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: '**});**'
- en: app.Run();
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: app.Run();
- en: '```'
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : For simple web services, avoid creating a controller class,
    and instead use minimal APIs to put all the configuration and implementation in
    one place, `Program.cs` .'
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：对于简单的Web服务，避免创建控制器类，而是使用最小的API将所有配置和实现放在一个地方，即`Program.cs`。'
- en: 'In **Properties** , modify `launchSettings.json` to configure the `Minimal.WebApi`
    profile to launch the browser using port `5003` in the URL, as shown highlighted
    in the following markup:'
  id: totrans-1736
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**中，修改`launchSettings.json`以配置`Minimal.WebApi`配置文件，以使用URL中的端口`5003`启动浏览器，如下标记所示：
- en: '```cs'
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '"profiles"'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: '"profiles"'
- en: ': {'
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"Minimal.WebApi"'
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: '"Minimal.WebApi"'
- en: ': {'
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"commandName"'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: '"commandName"'
- en: ': "Project"'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: ': "Project"'
- en: ','
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"dotnetRunMessages"'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: '"dotnetRunMessages"'
- en: ': "true"'
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: ': "true"'
- en: ','
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"launchBrowser"'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: '"launchBrowser"'
- en: ': true'
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: ': true'
- en: ','
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '**"applicationUrl"**'
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: '**"applicationUrl"**'
- en: '**:**'
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: '**:**'
- en: '**"https://localhost:5003/api/weather"**'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: '**"https://localhost:5003/api/weather"**'
- en: '**,**'
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: '**，**'
- en: '"environmentVariables"'
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: '"environmentVariables"'
- en: ': {'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"ASPNETCORE_ENVIRONMENT"'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: '"ASPNETCORE_ENVIRONMENT"'
- en: ': "Development"'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: ': "Development"'
- en: '}'
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Testing the minimal weather service
  id: totrans-1761
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试最小天气服务
- en: 'Before creating a client to the service, let''s test that it returns forecasts
    as JSON:'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建服务的客户端之前，让我们测试它是否以JSON格式返回预测：
- en: Start the web service project.
  id: totrans-1763
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Web服务项目。
- en: If you are not using Visual Studio 2022, start Chrome and navigate to `https://localhost:5003/api/weather`
    .
  id: totrans-1764
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有使用Visual Studio 2022，请启动Chrome并导航到`https://localhost:5003/api/weather`。
- en: Note the Web API service should return a JSON document with five random weather
    forecast objects in an array.
  id: totrans-1765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意Web API服务应返回一个包含五个随机天气预报对象的JSON文档的数组。
- en: Close Chrome and shut down the web server.
  id: totrans-1766
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Adding weather forecasts to the Northwind website home page
  id: totrans-1767
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Northwind网站主页添加天气预报
- en: 'Finally, let''s add an HTTP client to the Northwind website so that it can
    call the weather service and show forecasts on the home page:'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们向Northwind网站添加一个HTTP客户端，以便它可以调用天气服务并在主页上显示预测：
- en: 'In the `Northwind.Mvc` project, add a project reference to `Northwind.Common`
    , as shown highlighted in the following markup:'
  id: totrans-1769
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Mvc`项目中，添加对`Northwind.Common`的项目引用，如下标记所示：
- en: '```cs'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <!-- change Sqlite to SqlServer if
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: <!-- 如果要更改Sqlite为SqlServer -->
- en: you prefer -->
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: you prefer -->
- en: <ProjectReference Include="..\Northwind.Common.DataContext.Sqlite\Northwind.Common.DataContext.Sqlite.csproj"
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: <ProjectReference Include="..\Northwind.Common.DataContext.Sqlite\Northwind.Common.DataContext.Sqlite.csproj"
- en: />
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '**<ProjectReference Include=**'
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: '**<ProjectReference Include=**'
- en: '**"..\Northwind.Common\Northwind.Common.csproj"**'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: '**"..\Northwind.Common\Northwind.Common.csproj"**'
- en: '**/>**'
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: </ItemGroup>
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , add a statement to configure an HTTP client to call the minimal
    service on port `5003` , as shown in the following code:'
  id: totrans-1781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加一个语句来配置一个HTTP客户端，以调用端口`5003`上的最小服务，如下所示的代码：
- en: '```cs'
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'builder.Services.AddHttpClient(name: "Minimal.WebApi"'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 'builder.Services.AddHttpClient(name: "Minimal.WebApi"'
- en: ','
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'configureClient: options =>'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 'configureClient: options =>'
- en: '{'
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: options.BaseAddress = new
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: options.BaseAddress = new
- en: Uri("https://localhost:5003/"
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: Uri("https://localhost:5003/"
- en: );
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: options.DefaultRequestHeaders.Accept.Add(
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: options.DefaultRequestHeaders.Accept.Add(
- en: new
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: MediaTypeWithQualityHeaderValue(
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: MediaTypeWithQualityHeaderValue(
- en: '"application/json"'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: '"application/json"'
- en: ', 1.0'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: ', 1.0'
- en: ));
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: ));
- en: '});'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `HomeController.cs` , import the `Northwind.Common` namespace, and in the
    `Index` method, add statements to get and use an HTTP client to call the weather
    service to get forecasts and store them in `ViewData` , as shown in the following
    code:'
  id: totrans-1798
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`中，导入`Northwind.Common`命名空间，并在`Index`方法中，添加语句以获取并使用HTTP客户端调用天气服务以获取预测并将它们存储在`ViewData`中，如下所示的代码：
- en: '```cs'
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: try
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: try
- en: '{'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: HttpClient client = clientFactory.CreateClient(
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: HttpClient client = clientFactory.CreateClient(
- en: 'name: "Minimal.WebApi"'
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: 名称："Minimal.WebApi"
- en: );
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: HttpRequestMessage request = new
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: HttpRequestMessage request = new
- en: (
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: 'method: HttpMethod.Get, requestUri: "api/weather"'
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 'method: HttpMethod.Get, requestUri: "api/weather"'
- en: );
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: HttpResponseMessage response = await
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: HttpResponseMessage response = await
- en: client.SendAsync(request);
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: client.SendAsync(request);
- en: ViewData["weather"
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: ViewData["weather"
- en: '] = await'
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: '] = await'
- en: response.Content
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: response.Content
- en: .ReadFromJsonAsync<WeatherForecast[]>();
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: .ReadFromJsonAsync<WeatherForecast[]>();
- en: '}'
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: catch (Exception ex)
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: catch (Exception ex)
- en: '{'
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '_logger.LogWarning($"The Minimal.WebApi service is not responding. Exception:'
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: '_logger.LogWarning($"The Minimal.WebApi service is not responding. Exception:'
- en: '{ex.Message}'
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: '{ex.Message}'
- en: '"'
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: ViewData["weather"
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: ViewData["weather"
- en: '] = Enumerable.Empty<WeatherForecast>().ToArray();'
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: '] = Enumerable.Empty<WeatherForecast>().ToArray();'
- en: '}'
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Views/Home` , in `Index.cshtml` , import the `Northwind.Common` namespace
    and then in the top code block get the weather forecasts from the `ViewData` dictionary,
    as shown in the following markup:'
  id: totrans-1826
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views/Home`中的`Index.cshtml`中，导入`Northwind.Common`命名空间，然后在顶部代码块中从`ViewData`字典中获取天气预报，如下标记所示：
- en: '```cs'
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '@{'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: '@{'
- en: ViewData["Title"
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: ViewData["Title"
- en: '] = "Home Page"'
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: '] = "主页"'
- en: ;
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: string
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: currentItem = ""
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: currentItem = ""
- en: ;
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '**WeatherForecast[]? weather = ViewData[**'
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: '**WeatherForecast[]? weather = ViewData[**'
- en: '**"weather"**'
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: '**"weather"**'
- en: '**]**'
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: '**as**'
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: '**as**'
- en: '**WeatherForecast[];**'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: '**WeatherForecast[];**'
- en: '}'
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the first `<div>` , after rendering the current time, add markup to enumerate
    the weather forecasts unless there aren''t any, and render them in a table, as
    shown in the following markup:'
  id: totrans-1842
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个`<div>`中，在呈现当前时间后，添加标记以列举天气预报，除非没有任何天气预报，并在表中呈现它们，如下标记所示：
- en: '```cs'
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: p
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: p
- en: '>'
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: h4
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: h4
- en: '>'
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: Five-Day Weather Forecast</
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: 五天天气预报</
- en: h4
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: h4
- en: '>'
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@if ((weather is null) || (!weather.Any()))'
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: '@if ((weather is null) || (!weather.Any()))'
- en: '{'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: <
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: p
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: p
- en: '>'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: No weather forecasts found.</
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: 未找到天气预报。</
- en: p
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: p
- en: '>'
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '}'
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: <
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: table
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: table
- en: class
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: '='
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"table table-info"'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: '"table table-info"'
- en: '>'
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: tr
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: tr
- en: '>'
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@foreach (WeatherForecast w in weather)'
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: '@foreach (WeatherForecast w in weather)'
- en: '{'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: <
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: td
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '@w.Date.ToString("ddd d MMM") will be @w.Summary</'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: '@w.Date.ToString("ddd d MMM") will be @w.Summary</'
- en: td
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: td
- en: '>'
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '}'
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: tr
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: tr
- en: '>'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: </
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: table
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: table
- en: '>'
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '}'
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: </
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: p
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: p
- en: '>'
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '```'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Start the `Minimal.WebApi` service.
  id: totrans-1893
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Minimal.WebApi`服务。
- en: Start the `Northwind.Mvc` website.
  id: totrans-1894
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Mvc`网站。
- en: Navigate to `https://localhost:5001/` , and note the weather forecast, as shown
    in *Figure 16.20* :![](img/Image00148.jpg)
  id: totrans-1895
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`https://localhost:5001/`，并注意天气预报，如*图16.20*所示：![](img/Image00148.jpg)
- en: 'Figure 16.20: A five-day weather forecast on the home page of the Northwind
    website'
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.20：Northwind 网站首页上的五天天气预报
- en: 'View the command prompt or terminal for the MVC website and note the info messages
    that indicate a request was sent to the minimal API web service `api/weather`
    endpoint in about 83ms, as shown in the following output:'
  id: totrans-1897
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 MVC 网站的命令提示符或终端，并注意信息消息，指示请求在约 83ms 内发送到 minimal API Web 服务的 `api/weather`
    端点，如下所示：
- en: '```cs'
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[100]'
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[100]
- en: Start processing HTTP request GET https://localhost:5003/api/weather
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: 开始处理 HTTP 请求 GET https://localhost:5003/api/weather
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[100]'
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[100]
- en: Sending HTTP request GET https://localhost:5003/api/weather
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 发送 HTTP 请求 GET https://localhost:5003/api/weather
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[101]'
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[101]
- en: Received HTTP response headers after 76.8963ms - 200
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 在 76.8963ms 后收到 HTTP 响应头 - 200
- en: 'info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[101]'
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 信息：System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[101]
- en: End processing HTTP request after 82.9515ms – 200
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 在 82.9515ms 后结束处理 HTTP 请求 – 200
- en: '```'
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Stop the `Minimal.WebApi` service, refresh the browser, and note that after
    a few seconds the MVC website home page appears without weather forecasts.
  id: totrans-1908
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止 `Minimal.WebApi` 服务，刷新浏览器，并注意几秒钟后 MVC 网站首页出现而没有天气预报。
- en: Close Chrome and shut down the web server.
  id: totrans-1909
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 Web 服务器。
- en: Practicing and exploring
  id: totrans-1910
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试您的知识和理解，进行一些实践，并通过深入研究探索本章的主题。
- en: Exercise 16.1 – Test your knowledge
  id: totrans-1912
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.1 – 测试您的知识
- en: 'Answer the following questions:'
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: Which class should you inherit from to create a controller class for an ASP.NET
    Core Web API service?
  id: totrans-1914
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该从哪个类继承以创建 ASP.NET Core Web API 服务的控制器类？
- en: If you decorate your controller class with the `[ApiController]` attribute to
    get default behavior like automatic `400` responses for invalid models, what else
    must you do?
  id: totrans-1915
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用 `[ApiController]` 属性装饰您的控制器类以获得默认行为，比如对无效模型自动返回 `400` 响应，您还必须做什么？
- en: What must you do to specify which controller action method will be executed
    in response to an HTTP request?
  id: totrans-1916
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须做什么来指定哪个控制器操作方法将在响应 HTTP 请求时执行？
- en: What must you do to specify what responses should be expected when calling an
    action method?
  id: totrans-1917
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调用操作方法时，您必须做什么来指定应该期望什么响应？
- en: List three methods that can be called to return responses with different status
    codes.
  id: totrans-1918
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出三种可以调用的方法，以返回具有不同状态代码的响应。
- en: List four ways that you can test a web service.
  id: totrans-1919
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出四种测试 Web 服务的方法。
- en: Why should you not wrap your use of `HttpClient` in a `using` statement to dispose
    of it when you are finished even though it implements the `IDisposable` interface,
    and what should you use instead?
  id: totrans-1920
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么不应该在使用 `HttpClient` 时将其包装在 `using` 语句中以在完成后处理它，即使它实现了 `IDisposable` 接口，而应该使用什么代替？
- en: What does the acronym CORS stand for and why is it important to enable it in
    a web service?
  id: totrans-1921
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CORS 是什么缩写，为什么在 Web 服务中启用它很重要？
- en: How can you enable clients to detect if your web service is healthy with ASP.NET
    Core 2.2 and later?
  id: totrans-1922
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使客户端能够检测您的 ASP.NET Core 2.2 及更高版本的 Web 服务是否健康？
- en: What benefits does endpoint routing provide?
  id: totrans-1923
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 端点路由提供了哪些好处？
- en: Exercise 16.2 – Practice creating and deleting customers with HttpClient
  id: totrans-1924
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.2 – 使用 HttpClient 练习创建和删除客户
- en: Extend the `Northwind.Mvc` website project to have pages where a visitor can
    fill in a form to create a new customer, or search for a customer and then delete
    them. The MVC controller should make calls to the Northwind web service to create
    and delete customers.
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 `Northwind.Mvc` 网站项目，使访问者可以在页面上填写表单以创建新客户，或搜索客户然后删除他们。MVC 控制器应调用 Northwind
    Web 服务来创建和删除客户。
- en: Exercise 16.3 – Explore topics
  id: totrans-1926
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.3 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，了解本章涵盖的主题的更多细节：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services)'
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-16---building-and-consuming-web-services)'
- en: Summary
  id: totrans-1929
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to build an ASP.NET Core Web API service that
    can be called by any app on any platform that can make an HTTP request and process
    an HTTP response.
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何构建一个 ASP.NET Core Web API 服务，可以被任何可以发出 HTTP 请求并处理 HTTP 响应的平台上的任何应用程序调用。
- en: You also learned how to test and document web service APIs with Swagger, as
    well as how to consume services efficiently.
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学会了如何使用 Swagger 测试和记录 Web 服务 API，以及如何高效地使用服务。
- en: In the next chapter, you will learn to build user interfaces using Blazor, Microsoft's
    cool new component technology that enables developers to build client-side, single-page
    applications (SPAs) for websites using C# instead of JavaScript, hybrid apps for
    desktop, and potentially mobile apps.
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用 Blazor 构建用户界面，这是微软的新组件技术，使开发人员能够使用 C# 而不是 JavaScript 为网站构建客户端单页应用程序（SPA）、桌面混合应用程序和潜在的移动应用程序。
