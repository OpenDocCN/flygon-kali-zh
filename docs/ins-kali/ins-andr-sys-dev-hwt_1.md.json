["```kt\n    JDK6\n    sudo add-apt-repository \"deb http://archive.canonical.com/ lucid partner\"\n    sudo apt-get update\n    sudo apt-get install sun-java6-jdk\n    JDK5\n    sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu hardy main multiverse\"\n    sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu hardy-updates main multiverse\"\n    sudo apt-get update\n    sudo apt-get install sun-java5-jdk\n\n    ```", "```kt\n    sudo apt-get install git-core gnupg flex bison gperf build-essential \\\n     zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs \\ \n     x11proto-core-dev libx11-dev lib32readline5-dev lib32z-dev \\ \n     libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown \\ \n     libxml2-utils xsltproc\n\n    ```", "```kt\n    sudo ln -s /usr/lib32/mesa/libGL.so.1 /usr/lib32/mesa/libGL.so\n\n    ```", "```kt\n    sudo apt-get install libx11-dev:i386\n\n    ```", "```kt\n    mkdir ~/bin \n    PATH=~/bin:$PATH \n    curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo \n    chmod a+x ~/bin/repo\n\n    ```", "```kt\n    mkdir android_src\n    cd android_src\n\n    ```", "```kt\n    repo init -u https://android.googlesource.com/platform/manifest\n\n    ```", "```kt\n    repo init -u https://android.googlesource.com/platform/manifest -b android-2.3.4_r1\n\n    ```", "```kt\n    repo sync -jX\n\n    ```", "```kt\n    repo sync -j16\n\n    ```", "```kt\n    repo init -u https://android.googlesource.com/a/platform/manifest\n\n    ```", "```kt\n    cd android_src/\n    source build/envsetup.sh\n\n    ```", "```kt\n    lunch full-eng\n\n    ```", "```kt\n    make -jX\n\n    ```", "```kt\n    make -j6\n\n    ```", "```kt\n    ...\n    target Dex: SystemUI \n    Copying: out/target/common/obj/APPS/SystemUI_intermediates/noproguard.classes.dex \n    target Package: SystemUI (out/target/product/generic/obj/APPS/SystemUI_intermediates/package.apk) \n     'out/target/common/obj/APPS/SystemUI_intermediates//classes.dex' as 'classes.dex'... \n    Install: out/target/product/generic/system/app/SystemUI.apk \n    Finding NOTICE files: out/target/product/generic/obj/NOTICE_FILES/hash-timestamp \n    Combining NOTICE files: out/target/product/generic/obj/NOTICE.html \n    Target system fs image: out/target/product/generic/obj/PACKAGING/systemimage_intermediates/system.img \n    Install system fs image: out/target/product/generic/system.img \n    Installed file list: out/target/product/generic/installed-files.txt \n    DroidDoc took 440 sec. to write docs to out/target/common/docs/doc-comment-check \n\n    ```", "```kt\n    emulator\n\n    ```", "```kt\n    export USE_CCACHE=1\n    export CCACHE_DIR=<PATH_TO_YOUR_CCACHE_DIR>\n\n    ```", "```kt\n    prebuilt/linux-x86/ccache/ccache -M 50G\n\n    ```", "```kt\n    watch -n1 -d prebuilt/linux-x86/ccache/ccache -s\n\n    ```", "```kt\n    mkdir kernel_code\n    cd kernel_code\n    git clone https://android.googlesource.com/kernel/goldfish.git\n    git branch -r\n\n    ```", "```kt\n    origin/HEAD -> origin/master \n     origin/android-goldfish-2.6.29 \n     origin/linux-goldfish-3.0-wip \n     origin/master\n\n    ```", "```kt\n    cd goldfish\n    git checkout --track -b android-goldfish-2.6.29 origin/android-goldfish-2.6.29\n\n    ```", "```kt\n    export PATH=<PATH_TO_YOUR_ANDROID_SRC_DIR>/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin:$PATH\n\n    ```", "```kt\n    source build/envsetup.sh\n    lunch full_eng\n    adb pull /proc/config.gz\n    gunzip config.gz \n    cp config .config\n\n    ```", "```kt\n    export ARCH=arm\n    export SUBARCH=arm \n    make\n\n    ```", "```kt\n    Misc devices (MISC_DEVICES) [Y/n/?] y \n     Android pmem allocator (ANDROID_PMEM) [Y/n] y \n     Enclosure Services (ENCLOSURE_SERVICES) [N/y/?] n \n     Kernel Debugger Core (KERNEL_DEBUGGER_CORE) [N/y/?] n \n     UID based statistics tracking exported to /proc/uid_stat (UID_STAT) [N/y] n \n     Virtual Device for QEMU tracing (QEMU_TRACE) [Y/n/?] y \n     Virtual Device for QEMU pipes (QEMU_PIPE) [N/y/?] (NEW)\n\n    ```", "```kt\n    ...\n     LD      vmlinux \n     SYSMAP  System.map \n     SYSMAP  .tmp_System.map \n     OBJCOPY arch/arm/boot/Image \n     Kernel: arch/arm/boot/Image is ready \n     AS      arch/arm/boot/compressed/head.o \n     GZIP    arch/arm/boot/compressed/piggy.gz \n     AS      arch/arm/boot/compressed/piggy.o \n     CC      arch/arm/boot/compressed/misc.o \n     LD      arch/arm/boot/compressed/vmlinux \n     OBJCOPY arch/arm/boot/zImage \n     Kernel: arch/arm/boot/zImage is ready\n\n    ```", "```kt\n    emulator -kernel zImage\n\n    ```", "```kt\n    adb shell \n    # cat /proc/version \n\n    ```", "```kt\n    Linux version 2.6.29-gef9c64a (earlence@earlence-Satellite-L650) (gcc version 4.4.3 (GCC) ) #1 Mon Jun 4 16:35:00 CEST 2012\n\n    ```", "```kt\n        LOCAL_CFLAGS += -m64 \n        LOCAL_LDFLAGS += -m64\n        ```", "```kt\n        LOCAL_CFLAGS += -m32 \n        LOCAL_LDFLAGS += -m32\n        ```", "```kt\n    sudo apt-get install lib64z1-dev libc6-dev-amd64 g++-multilib \n    lib64stdc++6 \n\n    ```", "```kt\n    sudo apt-get install sun-java6-jdk\n\n    ```", "```kt\n    # Write value must be consistent with the above properties. \n    # Note that the driver only supports 6 slots, so we have combined some of \n    # the classes into the same memory level; the associated processes of higher \n    # classes will still be killed first. \n     write /sys/module/lowmemorykiller/parameters/adj 0,1,2,4,7,15\n\n    ```", "```kt\nANDROID_SRC/system/core/init/readme.txt\n```", "```kt\nservice zygote /system/bin/app_process -Xzygote /system/bin --zygote \u2013start-system-server\n\n```", "```kt\nvoid AndroidRuntime::start(const char* className, const bool startSystemServer)\n```", "```kt\nString args[] = { \n            \"--setuid=1000\", \n            \"--setgid=1000\", \n            \"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,3001,3002,3003\",\n            \"--capabilities=130104352,130104352\", \n            \"--runtime-init\", \n            \"--nice-name=system_server\", \n            \"com.android.server.SystemServer\", \n        };\n```", "```kt\nnative public static void init1(String[] args);\n```", "```kt\nruntime->callStatic(\"com/android/server/SystemServer\", \"init2\");\n```", "```kt\ncom.android.phone \u2013 The phone app.\nandroid.process.acore \u2013 The home screen and core apps.\n```", "```kt\npackage android.os.packt; \n\ninterface IPacktCrypto \n{ \n  byte [] getMD5(String data); \n}\n```", "```kt\n\u2026\nvoip/java/android/net/sip/ISipSessionListener.aidl \\ \nvoip/java/android/net/sip/ISipService.aidl \\ \ncore/java/android/os/packt/IPacktCrypto.aidl\n```", "```kt\n    package com.android.packt; \n\n    import java.security.MessageDigest; \n    import java.io.UnsupportedEncodingException; \n    import java.security.NoSuchAlgorithmException; \n    import android.util.Log; \n    import android.os.packt.IPacktCrypto; \n    /* \n    Our system server provides a hashing service \n    */ \n    public class PacktCrypto extends IPacktCrypto.Stub\n    { \n      private static final String TAG = \"PacktCrypto\"; //use this for logging \n      private static PacktCrypto mSelf; \n\n      private PacktCrypto() \n      { \n        //perform one-time initialization here \n        //if needed. \n      } \n      /* \n      This is a singleton pattern. Only one instance of PacktCrypto may exist \n      in the entire system \n      */ \n      public static PacktCrypto getInstance() \n      { \n        if(mSelf == null) \n          mSelf = new PacktCrypto(); \n\n        return mSelf; \n      }\n    ```", "```kt\n      /* \n      The interface method specified in IPacktCrypto.aidl \n      */ \n      public byte [] getMD5(String data) \n      { \n        byte [] dataBytes = null; \n        MessageDigest md5 = null; \n\n        try { \n\n          dataBytes = data.getBytes(\"UTF-8\"); \n          md5 = MessageDigest.getInstance(\"MD5\");\n          Log.i(TAG, \"MD5 digestion invoked\"); \n\n        } catch(java.io.UnsupportedEncodingException uee) \n        { \n          Log.e(TAG, \"Unsupported Encoding UTF8\"); \n        } \n        catch(java.security.NoSuchAlgorithmException nsae) \n        { \n          Log.e(TAG, \"No Algorithm MD5\"); \n        } \n        catch(Exception e)\n\n        {\n     }\n        if(md5 != null) \n          return md5.digest(dataBytes); \n        else \n          return null; \n      } \n    }\n    ```", "```kt\n    cd android_src\n    . build/envsetup.sh\n    lunch\n    select option for generic-eng\n    make -jX where X = number of CPU cores + 2\n\n    ```", "```kt\n...\n//begin packt \nSlog.i(TAG, \"PacktCrypto service\"); \ncom.android.packt.PacktCrypto pcrypt = com.android.packt.PacktCrypto.getInstance(); \nServiceManager.addService(\"PacktCryptoService\", pcrypt); \n//end packt\n\u2026\n```", "```kt\n            //PacktCrypto Test start\n    android.os.packt.IPacktCrypto ipc = android.os.packt.IPacktCrypto.Stub.asInterface(ServiceManager.getService(\"PacktCryptoService\")); \n    try { \n                byte [] hash = ipc.getMD5(\"packttest\"); \n\n                StringBuffer sb = new StringBuffer(); \n              for (int i = 0; i < hash.length; i++) \n              { \n                  sb.append(Integer.toString((hash[i] & 0xff) + 0x100, 16).substring(1)); \n              } \n\n              Log.i(\"PacktTest\", \"MD5 sum: \" + sb.toString()); \n\n    } catch(RemoteException re1) \n    { \n                Log.e(\"PacktTest\", \"remote exception\"); \n    } \n    //PacktCrypto Test end\n    ```", "```kt\n    adb logcat *:S PacktCrypto:I PacktTest:I\n\n    ```", "```kt\n    I/PacktCrypto(69): MD5 digestion invoked\n    I/PacktTest(67): MD5 sum: 422164113c2fc595dd0ab44a18925ac5\n\n    ```", "```kt\n    shell@android:/ $ ls -l /dev/block/platform/omap/omap_hsmmc.0/by-name \n    lrwxrwxrwx root     root              2012-06-28 22:03 boot -> /dev/block/mmcblk0p7 \n    lrwxrwxrwx root     root              2012-06-28 22:03 cache -> /dev/block/mmcblk0p11 \n    lrwxrwxrwx root     root              2012-06-28 22:03 dgs -> /dev/block/mmcblk0p6 \n    lrwxrwxrwx root     root              2012-06-28 22:03 efs -> /dev/block/mmcblk0p3 \n    lrwxrwxrwx root     root              2012-06-28 22:03 metadata -> /dev/block/mmcblk0p13 \n    lrwxrwxrwx root     root              2012-06-28 22:03 misc -> /dev/block/mmcblk0p5 \n    lrwxrwxrwx root     root              2012-06-28 22:03 param -> /dev/block/mmcblk0p4 \n    lrwxrwxrwx root     root              2012-06-28 22:03 radio -> /dev/block/mmcblk0p9 \n    lrwxrwxrwx root     root              2012-06-28 22:03 recovery -> /dev/block/mmcblk0p8 \n    lrwxrwxrwx root     root              2012-06-28 22:03 sbl -> /dev/block/mmcblk0p2 \n    lrwxrwxrwx root     root              2012-06-28 22:03 system -> /dev/block/mmcblk0p10 \n    lrwxrwxrwx root     root              2012-06-28 22:03 userdata -> /dev/block/mmcblk0p12 \n    lrwxrwxrwx root     root              2012-06-28 22:03 xloader -> /dev/block/mmcblk0p1 \n\n    ```", "```kt\n    cat /proc/mtd\n\n    ```", "```kt\n    dev:    size   erasesize  name \n    mtd0: 00200000 00040000 \"bootloader\" \n    mtd1: 00140000 00040000 \"misc\" \n    mtd2: 00800000 00040000 \"boot\" \n    mtd3: 00800000 00040000 \"recovery\" \n    mtd4: 1d580000 00040000 \"cache\" \n    mtd5: 00d80000 00040000 \"radio\" \n    mtd6: 006c0000 00040000 \"efs\"\n\n    ```", "```kt\n    dev:    size   erasesize  name \n    mtd0: 00040000 00020000 \"misc\" \n    mtd1: 00500000 00020000 \"recovery\" \n    mtd2: 00280000 00020000 \"boot\" \n    mtd3: 04380000 00020000 \"system\" \n    mtd4: 04380000 00020000 \"cache\" \n    mtd5: 04ac0000 00020000 \"userdata\"\n\n    ```", "```kt\n    lunch\n    The output (for 2.3.4_r1) should look like:\n    You're building on Linux\n    Lunch menu... pick a combo:\n     1\\. generic-eng\n     2\\. simulator\n     3\\. full_passion-userdebug\n    full_crespo-userdebug\n\n    ```", "```kt\nmake clobber\n\n```", "```kt\n    adb reboot-bootloader\n\n    ```", "```kt\n    fastboot oem unlock\n\n    ```", "```kt\n    fastboot devices\n\n    ```", "```kt\n    fastboot erase userdata\n    fastboot erase cache\n    fastboot flash boot boot.img\n    fastboot flash recovery recovery.img\n    fastboot flash system system.img\n    fastboot reboot\n\n    ```", "```kt\n    fastboot reboot\n\n    ```", "```kt\n    package android.packt; \n    import android.os.packt.IPacktCrypto; \n    import android.os.packt.PacktCryptoNative; \n    import android.os.ServiceManager; \n    import android.os.RemoteException; \n    import android.util.Log; \n\n    /* \n    Custom Class Library PacktCrypto \n    The class library is linked into the Android application and this code \n    is executed as part of the applications process. It makes an IPC to the \n    custom system server. This is just one example of the use of a class library. \n    */ \n    public class PacktCrypto \n    { \n      IPacktCrypto pcRef; \n      private static final String SERVICE_NAME = \"PacktCryptoService\"; \n      private static final String TAG = \"PacktCryptoClassLibrary\"; \n\n      public PacktCrypto() \n      { \n        pcRef = PacktCryptoNative.asInterface(ServiceManager.getService(SERVICE_NAME));\n      }\n\n      public byte [] getMD5(String data) \n      { \n        byte [] hash = null; \n        try { \n          if(pcRef != null) \n            hash = pcRef.getMD5(data); \n        } catch(RemoteException re) \n        { \n          Log.e(TAG, Log.getStackTraceString(re));   \n        } \n\n        return hash; \n      } \n    }\n    ```", "```kt\n    make update-api\n\n    ```", "```kt\n    make sdk\n\n    ```", "```kt\n    [previous output lines omitted for brevity]\n    DroidDoc took 0 sec. to write docs to out/target/common/docs/dexdeps\n    Package SDK Stubs: out/target/common/obj/PACKAGING/android_jar_intermediates/android.jar\n    Package SDK: out/host/linux-x86/sdk/android-sdk_eng.earlence_linux-x86.zip\n\n    ```", "```kt\nro.build.version.sdk=10\n```", "```kt\nro.build.version.sdk=-20\n```", "```kt\n    package com.packt.test; \n    import android.app.Activity; \n    import android.os.Bundle; \n    import android.packt.PacktCrypto; \n    import android.util.Log; \n\n    public class PacktTestActivity extends Activity { \n        /** Called when the activity is first created. */ \n        @Override \n        public void onCreate(Bundle savedInstanceState) { \n            super.onCreate(savedInstanceState); \n            setContentView(R.layout.main); \n\n            PacktCrypto pc = new PacktCrypto(); \n\n            byte [] hash = pc.getMD5(\"packtest\"); \n\n            StringBuffer sb = new StringBuffer(); \n        for (int i = 0; i < hash.length; i++) \n        { \n            sb.append(Integer.toString((hash[i] & 0xff) + 0x100, 16).substring(1)); \n        } \n\n        Log.i(\"PacktTest\", \"MD5 sum: \" + sb.toString()); \n        } \n    }\n    ```", "```kt\n    include $(call all-subdir-makefiles)\n    ```", "```kt\n    package packt.platformlibrary;\n\n    import java.io.UnsupportedEncodingException;\n    import java.security.InvalidKeyException;\n    import java.security.NoSuchAlgorithmException;\n    import java.security.spec.InvalidKeySpecException;\n\n    import javax.crypto.BadPaddingException;\n    import javax.crypto.Cipher;\n    import javax.crypto.IllegalBlockSizeException;\n    import javax.crypto.NoSuchPaddingException;\n    import javax.crypto.SecretKey;\n    import javax.crypto.SecretKeyFactory;\n    import javax.crypto.spec.DESKeySpec;\n\n    import android.util.Log;\n\n    public class PacktPlatformLibrary\n    {\n      private static final String TAG = \"packt.PlatformLibrary\";\n\n             /* key has to be 8 bytes */\n        public static byte [] encryptDES(String key, String data)\n        {\n          byte [] encr = null;\n          DESKeySpec keySpec;\n        try {\n          keySpec = new DESKeySpec(key.getBytes(\"UTF8\"));\n          SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey skey = keyFactory.generateSecret(keySpec);\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(Cipher.ENCRYPT_MODE, skey);\n            encr = cipher.doFinal(data.getBytes(\"UTF8\"));\n        } catch (InvalidKeyException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n        } catch (UnsupportedEncodingException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n        } catch (NoSuchAlgorithmException e) {\n\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (InvalidKeySpecException e) {\n\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (NoSuchPaddingException e) {\n\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (IllegalBlockSizeException e) {\n\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (BadPaddingException e) {\n\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        }\n        return encr;\n\n        }\n    ```", "```kt\n     public static String decryptDES(String key, byte [] data)\n        {\n          DESKeySpec keySpec;\n          byte [] unencr = null;\n        try {\n          keySpec = new DESKeySpec(key.getBytes(\"UTF8\"));\n          SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            SecretKey skey = keyFactory.generateSecret(keySpec);\n            Cipher cipher = Cipher.getInstance(\"DES\");// cipher is not thread safe\n            cipher.init(Cipher.DECRYPT_MODE, skey);\n            unencr = cipher.doFinal(data);\n\n    } catch (InvalidKeyException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n\n    } catch (UnsupportedEncodingException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (NoSuchAlgorithmException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (InvalidKeySpecException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (NoSuchPaddingException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (IllegalBlockSizeException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        } catch (BadPaddingException e) {\n          Log.e(TAG, Log.getStackTraceString(e));\n\n        }\n        return new String(unencr);\n        }\n\n        public static void printHex(byte [] data)\n\n        {\n          StringBuffer sb = new StringBuffer(); \n\n          for (int i = 0; i < data.length; i++) \n          { \n\n              sb.append(Integer.toString((data[i] & 0xff) + 0x100, 16).substring(1)); \n\n          } \n          Log.i(\"PacktDESTest\", \"DES bytes: \" + sb.toString()); \n\n        }\n\n    }\n    ```", "```kt\n        <permissions>\n          <library name=\"PacktPlatformLibrary\" file=\"/system/framework/PacktPlatformLibrary.jar\"/>\n\n        </permissions>\n        ```", "```kt\n        This code is saved as Android.mk\n\n        #\n        # PacktPlatformLibrary\n\n        LOCAL_PATH := $(call my-dir)\n\n        # the library\n        # ============================================================\n        include $(CLEAR_VARS)\n        LOCAL_SRC_FILES := $(call all-subdir-java-files)\n        LOCAL_MODULE_TAGS := optional\n        # This is the target being built.\n        LOCAL_MODULE:= PacktPlatformLibrary\n        include $(BUILD_JAVA_LIBRARY)\n        # the documentation\n        # ============================================================\n        include $(CLEAR_VARS)\n        LOCAL_SRC_FILES := $(call all-subdir-java-files) $(call all-subdir-html-files)\n        LOCAL_MODULE:= PacktPlatformLibrary\n\n        LOCAL_DROIDDOC_OPTIONS := PacktPlatformLibrary\n\n        LOCAL_MODULE_CLASS := JAVA_LIBRARIES\n        LOCAL_DROIDDOC_USE_STANDARD_DOCLET := true\n        include $(BUILD_DROIDDOC)\n        ########################\n\n        include $(CLEAR_VARS)\n        LOCAL_MODULE := PacktPlatformLibrary.xml\n        LOCAL_MODULE_TAGS := optional\n        LOCAL_MODULE_CLASS := ETC\n        # This will install the file in /system/etc/permissions\n        #\n        LOCAL_MODULE_PATH := $(TARGET_OUT_ETC)/permissions\n        LOCAL_SRC_FILES := $(LOCAL_MODULE)\n        include $(BUILD_PREBUILT)\n\n        ```", "```kt\n    make PacktPlatformLibrary\n\n    ```", "```kt\n    make PacktPlatformLibrary.xml\n\n    ```", "```kt\n    package com.packtclient;\n    import packt.platformlibrary.PacktPlatformLibrary;\n    import android.app.Activity;\n    import android.os.Bundle;\n    /**\n     * utilize the packt DES encryption platform library\n     */\n\n    public class Client extends Activity {\n\n        @Override\n\n        public void onCreate(Bundle savedInstanceState) {\n\n            super.onCreate(savedInstanceState);\n            byte [] encr = PacktPlatformLibrary.encryptDES(\"password\", \"Packt\");\n\n            PacktPlatformLibrary.printHex(encr);        \n\n        }\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n    <!-- This is an example of writing a client application for a custom\n\n         platform library. -->\n\n    <manifest \n\n        package=\"com.packtclient\">\n        <application android:label=\"Packt Library Client\">\n            <!-- This tells the system about the custom library used by the\n\n                 application, so that it can be properly loaded and linked\n\n                 to the app when the app is initialized. -->\n\n            <uses-library android:name=\"PacktPlatformLibrary\" />\n            <activity android:name=\"Client\">\n\n                <intent-filter>\n\n                    <action android:name=\"android.intent.action.MAIN\"/>\n\n                    <category android:name=\"android.intent.category.LAUNCHER\"/>\n\n                </intent-filter>\n\n            </activity>\n\n        </application>\n\n    </manifest>\n    ```", "```kt\n    # This makefile is an example of writing an application that will link against\n    # a custom shared library included with an Android system.\n    LOCAL_PATH:= $(call my-dir)\n    include $(CLEAR_VARS)\n    LOCAL_MODULE_TAGS := optional\n    # This is the target being built.\n    LOCAL_PACKAGE_NAME := PacktLibraryClient\n    # Only compile source java files in this apk.\n    LOCAL_SRC_FILES := $(call all-java-files-under, src)\n    # Link against the current Android SDK.\n    #LOCAL_SDK_VERSION := current\n    # Also link against our own custom library.\n\n    LOCAL_JAVA_LIBRARIES := PacktPlatformLibrary\n    LOCAL_PROGUARD_ENABLED := disabled\n    include $(BUILD_PACKAGE)\n    ```", "```kt\n    make PacktLibraryClient\n\n    ```", "```kt\n    make\n\n    ```", "```kt\n            1978  /system/framework/PacktPlatformLibrary.jar\n             119  /system/etc/permissions/PacktPlatformLibrary.xml\n            3563  /system/app/PlatformLibraryClient.apk\n    ```", "```kt\n    I/PacktDESTest(  425): DES bytes: fd068bdc755be524\n\n    ```", "```kt\n    /* \n    Native code for System Servers \n    */ \n    #define LOG_TAG \"PacktCrypto\" \n\n    #include \"jni.h\" \n    #include \"JNIHelp.h\" \n    #include \"android_runtime/AndroidRuntime.h\" \n\n    #include <utils/misc.h> \n    #include <utils/Log.h> \n\n    namespace android \n    { \n\n    //taken from http://www.algorithmist.com/index.php/Quicksort.c \n    void qsort(int *data, int N) \n    { \n      int i, j; \n      int v, t; \n\n       if(N <= 1) \n          return; \n\n        // Partition elements \n        v = data[0]; \n        i = 0; \n        j = N; \n        for(;;) \n        { \n          while(data[++i] < v && i < N) { } \n          while(data[--j] > v) { } \n          if( i >= j ) \n              break; \n          t = data[i]; \n          data[i] = data[j]; \n          data[j] = t; \n        } \n        t = data[i-1]; \n        data[i-1] = data[0]; \n        data[0] = t; \n        qsort(data, i-1); \n        qsort(data+i, N-i); \n    } \n\n    jintArray quickSort(JNIEnv* env, jobject *clazz, jintArray data) \n    { \n      jsize len = env->GetArrayLength(data); \n      jint *arr = env->GetIntArrayElements(data, 0); \n      jintArray result = env->NewIntArray(len); \n\n      qsort(arr, len); \n\n      env->SetIntArrayRegion(result, 0, len, arr); \n      env->ReleaseIntArrayElements(data, arr, 0); \n\n      return result; \n    } \n\n    //specify the method table with pointers to our functions\n    static JNINativeMethod method_table[] = { \n      { \"quickSort\", \"([I)[I\", (void *) quickSort } \n    }; \n\n    //register the method table\n    int register_android_packt_PacktCrypto(JNIEnv *env) \n    { \n      return jniRegisterNativeMethods(env, \"com/android/packt/PacktCrypto\", method_table, NELEM(method_table)); \n    } \n\n    };\n    ```", "```kt\n    namespace android { \n    int register_android_server_AlarmManagerService(JNIEnv* env); \n    int register_android_server_BatteryService(JNIEnv* env); \n    int register_android_server_InputManager(JNIEnv* env); \n    int register_android_server_LightsService(JNIEnv* env); \n    int register_android_server_PowerManagerService(JNIEnv* env); \n    int register_android_server_UsbService(JNIEnv* env); \n    int register_android_server_VibratorService(JNIEnv* env); \n    int register_android_server_SystemServer(JNIEnv* env); \n    int register_android_server_location_GpsLocationProvider(JNIEnv* env);\n\n    };\n    ```", "```kt\n    //PacktCrypto \n    int register_android_packt_PacktCrypto(JNIEnv *env);\n    ```", "```kt\n    //PacktCrypto \n    register_android_packt_PacktCrypto(env);\n    ```", "```kt\n    com_android_packt_PacktCrypto.cpp\n    ```", "```kt\n    LOCAL_SRC_FILES:= \\ \n        com_android_server_AlarmManagerService.cpp \\ \n        com_android_server_BatteryService.cpp \\ \n        com_android_server_InputManager.cpp \\ \n        com_android_server_LightsService.cpp \\ \n        com_android_server_PowerManagerService.cpp \\ \n        com_android_server_SystemServer.cpp \\ \n        com_android_server_UsbService.cpp \\ \n        com_android_server_VibratorService.cpp \\ \n        com_android_server_location_GpsLocationProvider.cpp \\ \n        onload.cpp \\ \n        com_android_packt_PacktCrypto.cpp\n    ```", "```kt\n# define NELEM(x) ((int) (sizeof(x) / sizeof((x)[0])))\n```", "```kt\n    void sort(int [] data) \n      { \n        int [] sorted = quickSort(data); \n        for(int i = 0; i < data.length; i++) \n          Log.i(TAG, \"s: \" + sorted[i]); \n      } \n\n      native int [] quickSort(int [] data);\n    ```", "```kt\n    public byte [] getMD5(String data) \n      { \n        byte [] dataBytes = null; \n        MessageDigest md5 = null; \n\n        try { \n\n          dataBytes = data.getBytes(\"UTF-8\"); \n          md5 = MessageDigest.getInstance(\"MD5\"); \n          Log.i(TAG, \"MD5 digestion invoked\"); \n\n        } catch(java.io.UnsupportedEncodingException uee) \n        { \n          Log.e(TAG, \"Unsupported Encoding UTF8\"); \n        } \n        catch(java.security.NoSuchAlgorithmException nsae) \n        { \n          Log.e(TAG, \"No Algorithm MD5\"); \n        } \n        //quick hack to test our native method \n        int toSort [] = { 5, -1, 0, 30, 4, 0, 1, 3, 15, 3 }; \n        sort(toSort); \n\n        if(md5 != null) \n          return md5.digest(dataBytes); \n        else \n          return null; \n      }\n    ```", "```kt\n    I/SystemServer(   67): PacktCrypto service \n    I/PacktCrypto(   67): MD5 digestion invoked \n    I/PacktCrypto(   67): s: -1 \n    I/PacktCrypto(   67): s: 0 \n    I/PacktCrypto(   67): s: 0 \n    I/PacktCrypto(   67): s: 1 \n    I/PacktCrypto(   67): s: 3 \n    I/PacktCrypto(   67): s: 3 \n    I/PacktCrypto(   67): s: 4 \n    I/PacktCrypto(   67): s: 5 \n    I/PacktCrypto(   67): s: 15 \n    I/PacktCrypto(   67): s: 30 \n    I/PacktTest(   67): MD5 sum: 422164113c2fc595dd0ab44a18925ac5\n    ```", "```kt\n    static final int MAX_ACTIVITIES = 20;\n    ```", "```kt\n    static final int PROC_START_TIMEOUT = 10*1000;\n    ```", "```kt\n    static final int BROADCAST_TIMEOUT = 10*1000;\n    ```", "```kt\n    final Handler mHandler = new Handler() {\n    ```", "```kt\n    public int checkPermission(String permission, int pid, int uid)\n    ```", "```kt\n    public void systemReady(final Runnable goingCallback)\n    ```", "```kt\n    //Packt - Add this towards the end of the file\n    int PACKT_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION + 118;\n    public int packtSensitiveMethod(int data) throws RemoteException;\n    ```", "```kt\n     /* \n        Packt sensitive method demo \n        */ \n        public int packtSensitiveMethod(int data) \n        { \n          try { \n            return ActivityManagerNative.getDefault().packtSensitiveMethod(data); \n          } catch (RemoteException e) \n          { \n          } \n          return -1; \n        }\n    ```", "```kt\n        //Packt \n        public int packtSensitiveMethod(int data) throws RemoteException \n        { \n          Parcel out = Parcel.obtain(); \n          Parcel reply = Parcel.obtain(); \n\n          out.writeInterfaceToken(IActivityManager.descriptor); \n          out.writeInt(data); \n\n          mRemote.transact(PACKT_TRANSACTION, out, reply, 0); \n\n          int result = reply.readInt(); \n\n          out.recycle(); \n          reply.recycle(); \n\n          return result; \n        }\n    ```", "```kt\n      //Packt \n            case PACKT_TRANSACTION: \n              data.enforceInterface(IActivityManager.descriptor); \n              int param = data.readInt(); \n              int result = packtSensitiveMethod(param); \n              reply.writeInt(result); \n              reply.writeNoException(); \n              return true;\n    ```", "```kt\n    //===========================================================\n    // PACKT \n    //=========================================================== \n\n        public int packtSensitiveMethod(int data) throws RemoteException \n        { \n          if(checkCallingPermission(\"packt.PACKT_PERMISSION\") \n                           != PackageManager.PERMISSION_GRANTED) \n          { \n              throw new SecurityException(\"Requires permission packt.PACKT_PERMISSION\"); \n            } \n            else \n            { \n            Log.i(\"PACKTinAMS\", \"sensitive method called with parameter: \" + data); \n\n            return data * 2; \n          }\n        }\n    ```", "```kt\n    <!-- ==================================== --> \n         <!-- Packt system permissions             --> \n         <!-- ==================================== --> \n         <eat-comment /> \n\n         <permission-group android:name=\"android.permission-group.PACKT\" \n             android:label=\"@string/permgrouplab_packt\" \n             android:description=\"@string/permgroupdesc_packt\" /> \n\n         <!-- PACKT Test permission --> \n         <permission android:name=\"packt.PACKT_PERMISSION\" \n             android:permissionGroup=\"android.permission-group.PACKT\" \n             android:protectionLevel=\"signature\" \n             android:description=\"@string/packt_permDesc\" \n             android:label=\"@string/packt_label\" />\n    ```", "```kt\n    <!-- Packt Permission Strings --> \n        <string name=\"permgrouplab_packt\">Packt Permission Group Label</string> \n        <string name=\"permgroupdesc_packt\">Packt Permission Group Description</string> \n        <string name=\"packt_permDesc\">Packt Permission Description</string> \n        <string name=\"packt_label\">Packt Permission Label</string>\n    ```", "```kt\n    make update-api\n\n    ```", "```kt\n    package com.packtclient; \n\n    import packt.platformlibrary.PacktPlatformLibrary; \n    import android.app.Activity; \n    import android.app.ActivityManager; \n    import android.os.Bundle; \n    import android.util.Log; \n\n    public class Client extends Activity { \n        @Override \n        public void onCreate(Bundle savedInstanceState) { \n            super.onCreate(savedInstanceState); \n\n            //byte [] encr = PacktPlatformLibrary.encryptDES(\"password\", \"Packt\"); \n            //PacktPlatformLibrary.printHex(encr); \n\n            invokeNewPacktAMSMethod();       \n        } \n\n        void invokeNewPacktAMSMethod() \n        { \n          ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE); \n          int val = am.packtSensitiveMethod(2); \n          Log.i(\"CustomAMS\", \"return: \" + val); \n        } \n    }\n    ```", "```kt\n    I/ActivityManager(   63): Start proc com.packtclient for activity com.packtclient/.Client: pid=344 uid=10010 gids={} \n    I/dalvikvm(   63): Jit: resizing JitTable from 512 to 1024 \n    I/ARMAssembler(   63): generated scanline__00000177:03515104_00001002_00000000 [ 87 ipp] (110 ins) at [0x4386b6f0:0x4386b8a8] in 1311254 ns \n    D/AndroidRuntime(  344): Shutting down VM \n    W/dalvikvm(  344): threadid=1: thread exiting with uncaught exception (group=0x40015560) \n    E/AndroidRuntime(  344): FATAL EXCEPTION: main \n    E/AndroidRuntime(  344): java.lang.RuntimeException: Unable to start activity ComponentInfo{com.packtclient/com.packtclient.Client}: java.lang.SecurityException: Requires permission packt.PACKT_PERMISSION \n    E/AndroidRuntime(  344):   at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1647) \n    E/AndroidRuntime(  344):   at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1663) \n    E/AndroidRuntime(  344):   at android.app.ActivityThread.access$1500(ActivityThread.java:117) \n    E/AndroidRuntime(  344):   at android.app.ActivityThread$H.handleMessage(ActivityThread.java:931) \n    E/AndroidRuntime(  344):   at android.os.Handler.dispatchMessage(Handler.java:99) \n    E/AndroidRuntime(  344):   at android.os.Looper.loop(Looper.java:130) \n    E/AndroidRuntime(  344):   at android.app.ActivityThread.main(ActivityThread.java:3683) \n    E/AndroidRuntime(  344):   at java.lang.reflect.Method.invokeNative(Native Method) \n    E/AndroidRuntime(  344):   at java.lang.reflect.Method.invoke(Method.java:507) \n    E/AndroidRuntime(  344):   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:839) \n    E/AndroidRuntime(  344):   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:597) \n    E/AndroidRuntime(  344):   at dalvik.system.NativeStart.main(Native Method) \n    E/AndroidRuntime(  344): Caused by: java.lang.SecurityException: Requires permission packt.PACKT_PERMISSION \n    E/AndroidRuntime(  344):   at android.os.Parcel.readException(Parcel.java:1322) \n    E/AndroidRuntime(  344):   at android.os.Parcel.readException(Parcel.java:1276) \n    E/AndroidRuntime(  344):   at android.app.ActivityManagerProxy.packtSensitiveMethod(ActivityManagerNative.java:2918) \n    E/AndroidRuntime(  344):   at android.app.ActivityManager.packtSensitiveMethod(ActivityManager.java:1077) \n    E/AndroidRuntime(  344):   at com.packtclient.Client.invokeNewPacktAMSMethod(Client.java:28) \n    E/AndroidRuntime(  344):   at com.packtclient.Client.onCreate(Client.java:22) \n    E/AndroidRuntime(  344):   at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1047) \n    E/AndroidRuntime(  344):   at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1611) \n    E/AndroidRuntime(  344):   ... 11 more \n    W/ActivityManager(   63):   Force finishing activity com.packtclient/.Client\n    ```", "```kt\n            <uses-permission android:name=\"packt.PACKT_PERMISSION\" />\n            ```", "```kt\n            LOCAL_CERTIFICATE := platform\n\n            ```", "```kt\n            mmm packages/apps/PacktLibraryClient\n\n            ```", "```kt\n            mmm packages/apps/PacktLibraryClient snod\n\n            ```", "```kt\n            cat /proc/mtd\n\n            ```", "```kt\n            dev:    size   erasesize  name \n            mtd0: 3e100000 00020000 \"system\" \n            mtd1: 3e100000 00020000 \"userdata\" \n            mtd2: 04000000 00020000 \"cache\"\n            ```", "```kt\n            mount -o rw,remount -t yaffs2 /dev/block/mtd0 /system\n            chmod 777 /system/app\n\n            ```", "```kt\n            adb push PacktLibraryClient.apk /system/app\n            I/PACKTinAMS(   68): sensitive method called with parameter: 2 \n            I/CustomAMS(  372): return: 4 \n\n            ```", "```kt\n    final SparseArray<HashSet<String>> mSystemPermissions =\n                new SparseArray<HashSet<String>>();\n    ```", "```kt\n    adb pull /data/system/packages.xml\n\n    ```", "```kt\n    <package name=\"com.packtclient\" codePath=\"/system/app/PacktLibraryClient.apk\" nativeLibraryPath=\"/data/data/com.packtclient/lib\" flags=\"1\" ft=\"1389a1a82a8\" it=\"13879fbb780\" ut=\"1389a1b8ae2\" version=\"10\" userId=\"10010\">\n    <sigs count=\"1\">\n    <cert index=\"1\" />\n    </sigs>\n    </package>\n    ```", "```kt\nmmm frameworks/base/tests/AndroidTests\n\n```", "```kt\nadb install -r -f out/target/product/passion/data/app/AndroidTests.apk\n\n```", "```kt\nadb shell am instrument -w -e class com.android.unit_tests.PackageManagerTests com.android.unit_tests/android.test.InstrumentationTestRunner\n\n```", "```kt\n    #ifdef CONFIG_ANDROID_PARANOID_NETWORK\n    #include <linux/android_aid.h>\n\n    static inline int current_has_network(void)\n    {\n      return in_egroup_p(AID_INET) || capable(CAP_NET_RAW);\n    }\n    #else\n    static inline int current_has_network(void)\n    {\n      return 1;\n    }\n    #endif\n    ```", "```kt\n    <item android:drawable=\"@drawable/hint_google\" />\n    ```", "```kt\n    <item android:drawable=\"@drawable/packt\" />\n    ```", "```kt\n    mmm packages/app/QuickSearchWidget\n\n    ```", "```kt\n    cat /proc/mtd\n\n    ```", "```kt\n    dev:    size   erasesize  name\n\n    mtd0: 0c200000 00020000 \"system\"\n\n    mtd1: 0c200000 00020000 \"userdata\"\n\n    mtd2: 04000000 00020000 \"cache\"\n    ```", "```kt\n    mount -o rw,remount -t yaffs2 /dev/block/mtd0 /system\n    chmod 777 /system/app\n\n    ```", "```kt\n    adb push QuickSearchWidget.apk /system/app\n\n    ```", "```kt\n    export USE_CCACHE=1\n    export CCACHE_DIR=/<path_of_your_choice>/.ccache\n\n    ```", "```kt\n    prebuilt/linux-x86/ccache/ccache\n\n    ```", "```kt\n    ccache, a compiler cache. Version 2.4\n    Copyright Andrew Tridgell, 2002\n    Usage:\n     ccache [options]\n     ccache compiler [compile options]\n     compiler [compile options]    (via symbolic link)\n    Options:\n    -s                      show statistics summary\n    -z                      zero statistics\n    -c                      run a cache cleanup\n    -C                      clear the cache completely\n    -F <maxfiles>           set maximum files in cache\n    -M <maxsize>            set maximum size of cache (use G, M or K)\n    -h                      this help page\n    -V                      print version number\n\n    ```", "```kt\n    prebuilt/linux-x86/ccache/ccache -M 20G\n\n    ```", "```kt\n    watch -n1 -d prebuilt/linux-x86/ccache/ccache -s\n\n    ```", "```kt\n    #!/bin/sh\n    source build/envsetup.sh\n    export USE_CCACHE=1\n    export CCACHE_DIR=<YOUR_CACHE_PATH>/.ccache\n    prebuilt/linux-x86/ccache/ccache -M 20G\n    lunch $1\n    ```", "```kt\n    ./build_helper.sh 1\n\n    ```", "```kt\n    including device/htc/passion/vendorsetup.sh\n    including device/samsung/crespo/vendorsetup.sh\n    Set cache size limit to 20971520k\n\n    =========================================\n\n    PLATFORM_VERSION_CODENAME=REL\n    PLATFORM_VERSION=2.3.4\n    TARGET_PRODUCT=generic\n    TARGET_BUILD_VARIANT=eng\n    TARGET_SIMULATOR=false\n    TARGET_BUILD_TYPE=release\n    TARGET_BUILD_APPS=\n    TARGET_ARCH=arm\n    HOST_ARCH=x86\n    HOST_OS=linux\n    HOST_BUILD_TYPE=release\n    BUILD_ID=GRJ22\n\n    =========================================\n    ```", "```kt\n    mmm packages/apps/Phone\n\n    ```", "```kt\n#!/bin/sh\nmmm -j4 frameworks/base frameworks/base/core/res snod\nadb shell stop\nadb sync\nadb shell start\n\n```"]