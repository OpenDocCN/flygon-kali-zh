- en: Chapter 9. Using Asynchronous I/O
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 使用异步I/O
- en: 'In this chapter, we will review asynchronous input/output operations in detail.
    You will learn the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细讨论异步输入/输出操作。您将学到以下内容：
- en: Working with files asynchronously
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步处理文件
- en: Writing an asynchronous HTTP server and client
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写异步HTTP服务器和客户端
- en: Working with a database asynchronously
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步处理数据库
- en: Calling a WCF service asynchronously
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步调用WCF服务
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapters, we already discussed how important it is to use asynchronous
    input/output operations properly. Why does it matter so much? To have a solid
    understanding, let us consider two kinds of applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经讨论了正确使用异步输入/输出操作的重要性。为什么这么重要呢？为了有一个坚实的理解，让我们考虑两种应用程序。
- en: If we run an application on the client, one of the most important things is
    to have a responsive user interface. This means that no matter what is happening
    with the application, all user interface elements, such as buttons and progress
    bars, keep running fast, and the user gets an immediate reaction from the application.
    This is not easy to achieve! If you try to open the notepad text editor in Windows
    and try to load a text document that is several megabytes in size, the application
    window will be frozen for a significant amount of time because the whole text
    is being loaded from the disk first, and only then the program starts to process
    user input.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在客户端上运行应用程序，最重要的事情之一就是拥有一个响应迅速的用户界面。这意味着无论应用程序发生什么，所有用户界面元素，如按钮和进度条，都能快速运行，并且用户能够立即得到应用程序的反应。这并不容易实现！如果您尝试在Windows中打开记事本文本编辑器，并尝试加载一个几兆字节大小的文档，应用程序窗口将会在相当长的时间内冻结，因为整个文本首先要从磁盘加载，然后程序才开始处理用户输入。
- en: This is an extremely important issue, and in this situation, the only solution
    is to avoid blocking the UI thread at all costs. This in turn means that to prevent
    blocking the UI thread, every UI-related API must allow only asynchronous calls.
    This is the key reason behind redesigning the APIs in the Windows 8 operating
    system by replacing almost every method with asynchronous analogs. But does it
    affect the performance if our application uses multiple threads to achieve this
    goal? Of course it does! However, we could pay the price considering that we have
    only one user. It is good if the application could use all the power of the computer
    to be more effective as all this power is intended for the single user who runs
    the application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常重要的问题，在这种情况下，唯一的解决方案是尽一切可能避免阻塞UI线程。这反过来意味着为了防止阻塞UI线程，每个与UI相关的API都必须只允许异步调用。这是Windows
    8操作系统重新设计API的关键原因，几乎用异步模拟替换了几乎每个方法。但是，如果我们的应用程序使用多个线程来实现这个目标，会影响性能吗？当然会！然而，考虑到我们只有一个用户，我们可以付出代价。如果应用程序能够利用计算机的所有能力，以更有效的方式为运行应用程序的单个用户提供服务，那就很好。
- en: Let us look at the second case then. If we run the application on the server,
    we have a completely different situation. We have scalability as a top priority,
    which means that a single user should consume as little resource as possible.
    If we start to create many threads for each user, we simply cannot scale well.
    It is a very complex problem to balance our application resources consumption
    in an efficient way. For example, in ASP.NET, which is a web application platform
    from Microsoft, we use a pool of worker threads to serve clients' requests. This
    pool has a limited amount of worker threads, and we have to minimize the time
    of usage for each worker thread to achieve scalability. This means that we have
    to return it to the pool as soon as possible so that it could serve another request.
    If we start an asynchronous operation that requires computation, we will have
    a very inefficient workflow. First we take a worker thread from the thread pool
    to serve a client request. Then we take another worker thread and start an asynchronous
    operation on it. Now we have two worker threads serving our request, and it is
    good if the first thread is doing something useful! Unfortunately, the common
    situation is that we simply wait for the asynchronous operation to complete, and
    we consume two worker threads instead of one. In this scenario, asynchrony is
    actually worse than synchronous execution! We do not need to load all the CPU
    cores as we are already serving many clients and thus, are using all the CPU computing
    power. We do not need to keep the first thread responsive as we have no user interface.
    Then why should we use asynchrony in server applications?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看第二种情况。如果我们在服务器上运行应用程序，情况就完全不同了。我们把可扩展性作为首要任务，这意味着单个用户应尽可能少地消耗资源。如果我们为每个用户创建许多线程，那么我们就无法很好地扩展。在有效的方式中平衡应用程序资源消耗是一个非常复杂的问题。例如，在微软的Web应用程序平台ASP.NET中，我们使用一个工作线程池来为客户端请求提供服务。这个池有一定数量的工作线程，我们必须尽量减少每个工作线程的使用时间以实现可扩展性。这意味着我们必须尽快将其返回到池中，以便它可以为另一个请求提供服务。如果我们开始一个需要计算的异步操作，我们将会有一个非常低效的工作流程。首先我们从线程池中取出一个工作线程来为客户端请求提供服务。然后我们再取出另一个工作线程并在其上启动一个异步操作。现在我们有两个工作线程为我们的请求提供服务，如果第一个线程正在做一些有用的事情，那就很好了！不幸的是，通常情况是我们只是等待异步操作完成，我们消耗了两个工作线程而不是一个。在这种情况下，异步实际上比同步执行更糟糕！我们不需要加载所有的CPU核心，因为我们已经为许多客户端提供服务，因此正在使用所有的CPU计算能力。我们不需要保持第一个线程响应，因为我们没有用户界面。那么为什么我们要在服务器应用程序中使用异步呢？
- en: The answer is that we should use asynchrony when there is an asynchronous input/output
    operation. Today, modern computers usually have a hard-disk drive that stores
    the files and a network card that sends and receives data over the network. Both
    of these devices have their own microcomputers that manage input/output operations
    on a very low level and signal the operating system about the results. This is
    again quite a complicated topic; but to keep the concept clear we could say that
    there is a way for the programmer to start an input/output operation and provide
    the operating system with a code to call back when the operation is completed.
    Between starting an I/O task and its completion, there is no CPU work involved;
    it is done in the corresponding disk and network-controller microcomputers. This
    way of executing an I/O task is called an I/O thread; they are implemented using
    the .NET thread pool and in turn use an infrastructure from the operating system
    called the I/O completion ports.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是，当存在异步输入/输出操作时，我们应该使用异步处理。如今，现代计算机通常具有存储文件的硬盘驱动器和通过网络发送和接收数据的网络卡。这两个设备都有自己的微型计算机，用于在非常低的级别上管理输入/输出操作并向操作系统发出结果。这又是一个相当复杂的话题；但为了保持概念清晰，我们可以说程序员有一种方式来启动输入/输出操作，并在操作完成时向操作系统提供一个回调代码。在启动I/O任务和其完成之间，不涉及CPU工作；它是在相应的磁盘和网络控制器微型计算机中完成的。这种执行I/O任务的方式称为I/O线程；它们是使用.NET线程池实现的，并且反过来使用操作系统的I/O完成端口基础设施。
- en: In ASP.NET, as soon as an asynchronous I/O operation is started from a worker
    thread, it can be returned immediately to the thread pool! While the operation
    is going on, this thread can serve other clients. Finally, when the operation
    signals completion, the ASP.NET infrastructure gets a free worker thread from
    the thread pool (which could be different from the one that started the operation),
    and it finishes the operation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET中，一旦从工作线程启动了异步I/O操作，它就可以立即返回到线程池！在操作进行时，此线程可以为其他客户端提供服务。最后，当操作完成时，ASP.NET基础结构会从线程池中获取一个空闲的工作线程（可能与启动操作的线程不同），并完成操作。
- en: All right; we now understand how important I/O threads are for server applications.
    Unfortunately, it is very hard to see if any given API uses I/O threads under
    the hood. The only way besides studying the source code is simply to know which
    .NET Framework class library leverages the I/O threads. In this chapter, we will
    see how to use some of those APIs. We will learn how to work with files asynchronously,
    how to use network I/O to create an HTTP server and call Windows Communication
    Foundation service, and how to work with asynchronous API to query a database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们明白了I/O线程对服务器应用程序有多么重要。不幸的是，很难看出任何给定的API是否在后台使用I/O线程。除了研究源代码之外，唯一的方法就是知道.NET
    Framework类库利用了I/O线程。在本章中，我们将看到如何使用其中一些API。我们将学习如何异步处理文件，如何使用网络I/O创建HTTP服务器并调用Windows
    Communication Foundation服务，以及如何使用异步API查询数据库。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Another important issue to consider is parallelism. For a number of reasons,
    intensive parallel disk operation might have very poor performance. Please be
    aware that parallel I/O operations are often very ineffective, and it might be
    reasonable to work with I/O sequentially, but in an asynchronous manner.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的重要问题是并行性。由于许多原因，密集的并行磁盘操作可能会导致性能非常差。请注意，并行I/O操作通常非常低效，可能会合理地按顺序但是以异步方式处理I/O。
- en: Working with files asynchronously
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步处理文件
- en: This recipe walks us through how to create a file, and how to read and write
    data asynchronously.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将指导我们如何创建文件，以及如何异步读取和写入数据。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found at `BookSamples\Chapter9\Recipe1`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本教程，您需要Visual Studio 2012。没有其他先决条件。本教程的源代码可以在`BookSamples\Chapter9\Recipe1`中找到。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how to work with files asynchronously, perform the following
    steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何异步处理文件，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C# **控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the program.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When the program runs, we create four files in different manners and fill them
    up with random data. In the first case, we use the `FileStream` class and its
    methods, converting an Asynchronous Programming Model API to a task; in the second
    case, we do the same, but we provide `FileOptions.Asynchronous` to the `FileStream`
    constructor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 程序运行时，我们以不同的方式创建四个文件，并用随机数据填充它们。在第一种情况下，我们使用`FileStream`类及其方法，将异步编程模型API转换为任务；在第二种情况下，我们做同样的事情，但是我们为`FileStream`构造函数提供了`FileOptions.Asynchronous`。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is very important to use the `FileOptions.Asynchronous` option. If we omit
    this option, we can still work with the file in an asynchronous manner, but this
    is just an asynchronous delegate invocation on a thread pool! We use the I/O asynchrony
    with the `FileStream` class only if we provide this option (or `bool useAsync`
    in another constructor overload).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是使用`FileOptions.Asynchronous`选项。如果我们省略此选项，仍然可以以异步方式处理文件，但这只是线程池上的异步委托调用！只有在提供此选项（或另一个构造函数重载中的`bool
    useAsync`）时，我们才能使用`FileStream`类进行I/O异步处理。
- en: The third case uses some simplifying APIs such as the `File.Create` method and
    the `StreamWriter` class. It still uses I/O threads, which we are able to check
    by using the `stream.IsAsync` property. The last case illustrates that oversimplifying
    is also bad. Here we do not leverage the I/O asynchrony by imitating it with the
    help of asynchronous delegate invocation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种情况使用了一些简化的API，比如`File.Create`方法和`StreamWriter`类。它仍然使用I/O线程，我们可以通过使用`stream.IsAsync`属性来检查。最后一种情况说明了过度简化也是不好的。在这里，我们没有利用I/O的异步性，而是通过异步委托调用来模拟它。
- en: Now we perform parallel asynchronous reading from files, summing their content,
    and then sum it with each other. Finally, we delete all the files. As there is
    no asynchronous delete file in any non-Windows store application, we simulate
    the asynchrony using the `Task.Run` factory method.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们从文件中进行并行异步读取，对它们的内容进行求和，然后再将它们相加。最后，我们删除所有的文件。由于在任何非Windows存储应用程序中都没有异步删除文件的方法，我们使用`Task.Run`工厂方法来模拟异步。
- en: Writing an asynchronous HTTP server and client
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个异步HTTP服务器和客户端
- en: This recipe shows how to create a simple asynchronous HTTP server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤展示了如何创建一个简单的异步HTTP服务器。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. No other prerequisites
    are required. The source code for this recipe can be found at `BookSamples\Chapter9\Recipe2`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个步骤，你需要Visual Studio 2012。不需要其他先决条件。这个步骤的源代码可以在`BookSamples\Chapter9\Recipe2`中找到。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps demonstrate how to create a simple asynchronous HTTP server:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤演示了如何创建一个简单的异步HTTP服务器：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#控制台应用程序项目。
- en: Add a reference to the `System.Net.Http` framework library.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对`System.Net.Http`框架库的引用。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the program.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Here we implement a very simple web server by using the `HttpListener` class.
    There is also a `TcpListener` class for the TCP socket I/O operations. We configure
    our listener to accept connections from any host to the local machine on port
    `1234`. Then we start the listener in a separate worker thread so that we can
    control it from the main thread.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`HttpListener`类实现了一个非常简单的Web服务器。还有一个`TcpListener`类用于TCP套接字I/O操作。我们配置我们的监听器以接受来自本地机器上任何主机的连接，端口为`1234`。然后我们在一个单独的工作线程中启动监听器，这样我们就可以从主线程中控制它。
- en: The asynchronous I/O operation happens when we use the `GetContextAsync` method.
    Unfortunately, it does not accept `CancellationToken` for cancellation scenarios;
    so when we want to stop the server, we just call `_listener.Abort` method that
    abandons all the connection and stops the server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`GetContextAsync`方法时，异步I/O操作发生。不幸的是，它不接受`CancellationToken`用于取消场景；所以当我们想要停止服务器时，我们只需调用`_listener.Abort`方法，它会放弃所有连接并停止服务器。
- en: To perform an asynchronous request to this server, we use the `HttpClient` class
    located in the `System.Net.Http` assembly and the same namespace. We use the `GetAsync`
    method to issue an asynchronous HTTP `GET` request. There are methods for the
    other HTTP requests such as `POST`, `DELETE`, and `PUT`. `HttpClient` has many
    other options such as serializing and deserializing an object using different
    formats such as XML and JSON, specifying a proxy server address, credentials,
    and others.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要对这个服务器执行异步请求，我们使用`System.Net.Http`程序集中的`HttpClient`类和相同的命名空间。我们使用`GetAsync`方法来发出异步的HTTP
    `GET`请求。还有其他HTTP请求的方法，比如`POST`、`DELETE`和`PUT`。`HttpClient`还有许多其他选项，比如使用不同格式（如XML和JSON）对对象进行序列化和反序列化，指定代理服务器地址、凭据等。
- en: When you run the program, you can see that the server has been started up. In
    the server code, we use the `GetContextAsync` method to accept new client connections.
    This method returns when a new client connects, and we simply output a very basic
    HTML with the current date and time to the response. Then we request the server
    and print the response headers and content. You can also open your browser and
    browse to the `http://localhost:1234/` URL. You will see the same response displayed
    in the browser window.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行程序时，你会看到服务器已经启动。在服务器代码中，我们使用`GetContextAsync`方法来接受新的客户端连接。当一个新的客户端连接时，这个方法会返回，我们只是简单地输出一个包含当前日期和时间的基本HTML到响应中。然后我们请求服务器并打印响应头和内容。你也可以打开浏览器并浏览到`http://localhost:1234/`的URL。你会在浏览器窗口中看到相同的响应。
- en: Working with a database asynchronously
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步处理数据库
- en: This recipe walks us through the process of creating a database, populating
    it with data, and reading data asynchronously.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤将指导我们创建一个数据库，用数据填充它，并异步读取数据的过程。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need a running Visual Studio 2012\. No
    other prerequisites are required. The source code for this recipe can be found
    at `BookSamples\Chapter9\Recipe3`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个步骤，你需要运行Visual Studio 2012。不需要其他先决条件。这个步骤的源代码可以在`BookSamples\Chapter9\Recipe3`中找到。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand the process of creating a database, populating it with data,
    and reading data asynchronously, perform the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解创建数据库、填充数据和异步读取数据的过程，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#控制台应用程序项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the program.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This program works with a software called SQL Server 2012 LocalDb. It is installed
    with Visual Studio 2012 and should work fine. However in case of errors, you might
    want to repair this component from the installation wizard.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序使用一个名为SQL Server 2012 LocalDb的软件。它与Visual Studio 2012一起安装，应该可以正常工作。但是，如果出现错误，您可能需要从安装向导中修复此组件。
- en: 'We start with configuring paths to our database files. We place database files
    in the program-execution folder. There will be two files: one for the database
    itself and another for the transaction log file. We also configure two connection
    strings that define how we connect to our databases. The first one is to connect
    to the LocalDb engine to detach our database; if it already exists, delete and
    then recreate it. We leverage the I/O asynchrony while opening the connection
    and while executing the SQL commands using the `OpenAsync` and `ExecuteNonQueryAsync`
    methods respectively.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先配置到我们的数据库文件的路径。我们将数据库文件放在程序执行文件夹中。将有两个文件：一个用于数据库本身，另一个用于事务日志文件。我们还配置了两个连接字符串，定义了我们如何连接到我们的数据库。第一个是连接到LocalDb引擎以分离我们的数据库；如果它已经存在，则删除然后重新创建它。我们利用I/O异步性来打开连接，并使用`OpenAsync`和`ExecuteNonQueryAsync`方法分别执行SQL命令。
- en: After this task is complete, we are attaching a newly created database. Here
    we create a new table and insert a few data in it. In addition to the previously
    mentioned methods, we use `ExecuteScalarAsync` to asynchronously get a scalar
    value from the database engine, and we use the `SqlDataReader.ReadAsync` method
    to read a data row from the database table asynchronously.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此任务后，我们将附加一个新创建的数据库。在这里，我们创建一个新表并向其中插入一些数据。除了前面提到的方法之外，我们使用`ExecuteScalarAsync`来异步从数据库引擎获取标量值，并使用`SqlDataReader.ReadAsync`方法来异步从数据库表中读取数据行。
- en: If we had a large table with large binary values in its rows in our database,
    then we would use the `CommandBehavior.SequentialAcess` enumeration to create
    the data reader and the `GetFieldValueAsync` method to get large field values
    from the reader asynchronously.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的数据库中有一个包含大型二进制值的大表，那么我们将使用`CommandBehavior.SequentialAcess`枚举来创建数据读取器，并使用`GetFieldValueAsync`方法来异步从读取器中获取大字段值。
- en: Calling a WCF service asynchronously
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步调用WCF服务
- en: This recipe will describe how to create a WCF service, host it in a console
    application, make service metadata available to clients, and how to consume it
    in an asynchronous way.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将描述如何创建一个WCF服务，在控制台应用程序中托管它，使服务元数据可用于客户端，并以异步方式消费它。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need a running Visual Studio 2012\. There
    are no other prerequisites. The source code for this recipe can be found at `BookSamples\Chapter9\Recipe4`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本教程进行步骤，您需要运行Visual Studio 2012。没有其他先决条件。本教程的源代码可以在`BookSamples\Chapter9\Recipe4`中找到。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how to work with a WCF service, perform the following steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用WCF服务，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C# **控制台应用程序**项目。
- en: Add references to the `System.ServiceModel` library. Right-click on the `References`
    folder in the project and select the **Add reference…** menu option. Add references
    to the `System.ServiceModel` library. You can use the search function in the reference
    manager dialog as shown in the following screenshot:![How to do it...](img/7644OT_09_01.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对`System.ServiceModel`库的引用。在项目中右键单击`引用`文件夹，然后选择**添加引用...**菜单选项。添加对`System.ServiceModel`库的引用。您可以使用引用管理器对话框中的搜索功能，如下截图所示：![如何做...](img/7644OT_09_01.jpg)
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the program.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Windows Communication Foundation or WCF is a framework that allows us to call
    remote services in different ways. One of them, which was very popular some time
    ago, was used to call remote services via HTTP using an XML-based protocol called
    **Simple Object Access Protocol** (**SOAP)**. It is quite common when a server
    application calls another remote service, and it could be done using I/O threads
    as well.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Communication Foundation或WCF是一个框架，允许我们以不同的方式调用远程服务。其中一种曾经非常流行的方式是使用基于XML的协议**简单对象访问协议**（**SOAP**）通过HTTP调用远程服务。当服务器应用程序调用另一个远程服务时，这是相当常见的，也可以使用I/O线程来完成。
- en: Visual Studio 2012 has rich support for WCF services; for example, you can add
    references to such services with the **Add Service Reference** menu option. You
    could do it with our service as well because we provide service metadata.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2012对WCF服务有很好的支持；例如，您可以使用**添加服务引用**菜单选项添加对这些服务的引用。您也可以对我们的服务进行此操作，因为我们提供了服务元数据。
- en: To create such a service we need to use a `ServiceHost` class that will be hosting
    our service. We describe what service we will be hosting by providing a service
    implementation type and the base URI by which the service would be addressed.
    Then we configure the metadata endpoint and the service endpoint. Finally, we
    handle the `Faulted` event in case of errors and run the host service.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这样一个服务，我们需要使用`ServiceHost`类来托管我们的服务。我们通过提供服务实现类型和服务的基本URI来描述我们将托管的服务。然后我们配置元数据端点和服务端点。最后，我们处理`Faulted`事件以处理错误，并运行主机服务。
- en: To consume this service, we create a client, and here is where the main trick
    happens. On the server side, we have a service with the usual synchronous method
    called `Greet`. This method is defined in the service contract, `IHelloWorldService`.
    However, if we want to leverage an asynchronous network I/O, we have to call this
    method asynchronously. We can do that by creating a new service contract with
    matching namespace and service name, where we define both the synchronous and
    task-based asynchronous methods. In spite of the fact that we do not have an asynchronous
    method definition on a server side, we follow the naming convention, and the WCF
    infrastructure understands that we want to create an asynchronous proxy method.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了消费这个服务，我们创建一个客户端，这就是主要的技巧所在。在服务器端，我们有一个带有通常同步方法的服务，称为`Greet`。这个方法在服务契约`IHelloWorldService`中定义。然而，如果我们想利用异步网络I/O，我们必须异步调用这个方法。我们可以通过创建一个新的服务契约来做到这一点，其中包含匹配的命名空间和服务名称，在这里我们定义同步和基于任务的异步方法。尽管我们在服务器端没有异步方法的定义，但我们遵循命名约定，WCF基础设施会理解我们想要创建一个异步代理方法。
- en: Therefore, when we create an `IHelloWorldServiceClient` proxy channel, and WCF
    correctly routes an asynchronous call to the server-side synchronous method. If
    you leave the application running, you can open the browser and access the service
    using its URL that is `http://localhost:1234/HelloWorld`. There will be a service
    description opened, and you can browse to the XML metadata that allows us to add
    a service reference from Visual Studio 2012\. If you try to generate the reference,
    you will see a slightly more complicated code, but it is autogenerated and easy
    to use.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们创建一个`IHelloWorldServiceClient`代理通道时，WCF会正确地将异步调用路由到服务器端的同步方法。如果您让应用程序保持运行状态，您可以打开浏览器并使用其URL访问服务，即`http://localhost:1234/HelloWorld`。将打开一个服务描述，您可以浏览到允许我们从Visual
    Studio 2012添加服务引用的XML元数据。如果您尝试生成引用，您将看到稍微复杂一些的代码，但它是自动生成的并且易于使用。
