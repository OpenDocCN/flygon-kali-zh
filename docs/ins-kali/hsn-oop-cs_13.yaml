- en: Git - The Version Control System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git - 版本控制系统
- en: 'Nowadays, software development has reached a new level. It no longer only involves
    writing code—a software developer now also has to be familiar with a range of
    important tools. Without these tools, it becomes very difficult to work in a team
    or to work efficiently. Version control is one of these tools. Of the various
    version control systems available, Git is the most popular and powerful. Git version
    control has been in the industry for quite a long time, but has recently become
    a part of almost all software companies. Knowing Git is now essential for developers.
    In this chapter, we will learn about Git version control systems. Let''s take
    a look at the topics we are going to cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，软件开发已经达到了一个新的水平。它不再仅仅涉及编写代码——软件开发人员现在还必须熟悉一系列重要的工具。没有这些工具，要在团队中工作或高效工作就变得非常困难。版本控制就是其中之一。在众多可用的版本控制系统中，Git是最流行和强大的。Git版本控制已经在行业中存在了相当长的时间，但最近已经成为几乎所有软件公司的一部分。了解Git现在对开发人员来说是必不可少的。在本章中，我们将学习关于Git版本控制系统的知识。让我们来看看我们将要涵盖的主题：
- en: What is a version control system?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是版本控制系统？
- en: How Git works
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git的工作原理
- en: Installing Git in Windows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows中安装Git
- en: The basics of Git
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git的基础知识
- en: Branches in Git
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git中的分支
- en: What is version control?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是版本控制？
- en: A version control system is a system or application that keeps track of software
    code changes during development. Software developers used to keep backups of their
    code by copying the code into another folder or machine. If the developer or production
    machine crashed, they could take the code from the backup and run it. However,
    manually keeping and maintaining backups is troublesome and prone to error, and
    backup systems are vulnerable to corruption. For this reason, developers began
    looking for a system or application that could keep their code safe.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统是一种在开发过程中跟踪软件代码变化的系统或应用程序。软件开发人员过去通过将代码复制到另一个文件夹或机器中来备份他们的代码。如果开发人员或生产机器崩溃，他们可以从备份中取出代码并运行。然而，手动保留和维护备份是麻烦的，容易出错，备份系统容易受损。因此，开发人员开始寻找一个能够保护他们代码的系统或应用程序。
- en: Version control is also useful in situations where more than one programmer
    is working on a project. In the past, programmers had to either work on different
    files to avoid conflicts or carefully merge the code after some time. Manually
    merging code is very risky and time-consuming.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制在多个程序员共同开发项目的情况下也很有用。过去，程序员不得不要么在不同的文件上工作以避免冲突，要么在一段时间后仔细地合并代码。手动合并代码是非常危险和耗时的。
- en: In a version control system, every change in a code file is actually a new version
    of the code. In the software industry, there are many version control systems
    available, including Git, Subversion, Mercurial, and Perforce. Git, the most popular
    version control system, was developed by the software developer Linus Torvalds.
    It is a remarkable application that is now used in almost every software company
    in the world.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本控制系统中，代码文件的每一次更改实际上都是代码的一个新版本。在软件行业中，有许多版本控制系统可用，包括Git、Subversion、Mercurial和Perforce。Git是最流行和强大的版本控制系统，由软件开发人员Linus
    Torvalds开发。它是一个非常出色的应用程序，现在几乎在世界上每家软件公司中都在使用。
- en: How Git works
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git是如何工作的
- en: The main task of Git is to keep track of code versions and allow developers
    to go back to any previous state if necessary. This is done by taking a snapshot
    of every version and maintaining it in a local file storage system. Unlike other
    systems, Git uses local file storage to store snapshots, which means that Git
    can be used locally—even without an internet connection. With the local version
    of Git, you can do almost everything that you can do with an internet-connected
    version of Git.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Git的主要任务是跟踪代码版本并允许开发人员在必要时返回到任何先前的状态。这是通过对每个版本进行快照并将其保存在本地文件存储系统中来实现的。与其他系统不同，Git使用本地文件存储来存储快照，这意味着即使没有互联网连接，也可以在本地使用Git。有了Git的本地版本，你几乎可以做任何你可以用互联网连接版本的Git做的事情。
- en: After you install Git in your project, you can choose which directory of your
    filesystem you want to keep under Git version control. Normally, a project or
    directory—which is one entity in Git—is called a **repository**. A repository
    might contain different projects, one project, or just some of the project files,
    depending on what you want to keep in Git version control. There are two ways
    that you can have a Git repository on your local machine. Either you can initialize
    a Git repository by yourself, or you can clone a repository from a remote server.
    Either way, you will create a folder called `.git` in the same folder in which
    the repository was created or cloned. This `.git` file is the local storage file,
    and all the information related to that repository will be stored there. Git stores
    data in a very efficient manner, so the file won't get very big, even if you have
    tons of snapshots.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Git后，你可以选择将文件系统中的哪个目录纳入Git版本控制。通常，Git中的一个实体——项目或目录——被称为**存储库**。存储库可能包含不同的项目、一个项目或只是一些项目文件，具体取决于你想在Git版本控制中保留什么。你可以有两种方式在本地机器上拥有一个Git存储库。你可以自己初始化一个Git存储库，或者你可以从远程服务器克隆一个存储库。无论哪种方式，你都会在创建或克隆存储库的同一个文件夹中创建一个名为`.git`的文件夹。这个`.git`文件是本地存储文件，所有与该存储库相关的信息都将存储在那里。Git以非常高效的方式存储数据，所以即使有大量的快照，文件也不会变得很大。
- en: 'There are three main states in Git, which we will explore in the following
    sections:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Git有三种主要状态，我们将在接下来的部分中探讨：
- en: Modified
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改
- en: Staged
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂存
- en: Committed
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交
- en: Modified
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改
- en: When you have a Git repository initialized and then add a new file or edit an
    existing file, that particular file will be marked as Modified in Git. This means
    that the file contains some changes from the already stored snapshot that Git
    has in its local storage/database. For example, if you create a C# console app
    project in a Git repository, then all the files of that solution will be marked
    as Modified, as none of them are available in the Git repository history.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当您初始化了一个Git仓库，然后添加一个新文件或编辑一个现有文件时，该文件将在Git中标记为Modified。这意味着该文件包含了与Git在其本地存储/数据库中已存储的快照的一些更改。例如，如果您在Git仓库中创建一个C#控制台应用程序项目，那么该解决方案的所有文件都将被标记为Modified，因为它们都不在Git仓库历史记录中。
- en: Staged
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Staged
- en: In Git, Staged refers to files that are ready to be committed. To prevent accidental
    commits of unwanted files to the Git repository, Git introduced this step between
    Modified and Committed. When you mark files as Staged, this means that you want
    those files to be committed in the next commit. This also gives you the option
    to edit files and not make them Staged so that the changes won't be saved in the
    repository. This feature is very handy if you want to apply some configurations
    in your local machine, but don't want those changes in the repository.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，Staged指的是准备提交的文件。为了防止意外提交不需要的文件到Git仓库，Git在Modified和Committed之间引入了这一步骤。当您将文件标记为Staged时，这意味着您希望这些文件在下一次提交中被提交。这也给了您编辑文件并不使它们成为Staged的选项，这样更改就不会保存在仓库中。如果您想在本地机器上应用一些配置，但不希望这些更改出现在仓库中，这个功能非常方便。
- en: Committed
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已提交
- en: The Committed state is when a version of a file is saved in the local database.
    It means that a snapshot is taken and stored in the Git history for future reference.
    When working with the repository remotely, the code that you will push is actually only the
    committed code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Committed状态是指文件的一个版本已保存在本地数据库中。这意味着已经拍摄了一个快照，并将其存储在Git历史记录中以供将来参考。在远程使用仓库时，您将推送的代码实际上只是已提交的代码。
- en: 'Let''s take a look at the following diagram to understand the flow between
    these states:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下图表，以了解这些状态之间的流程：
- en: '![](img/b1dcec2a-3c29-49cb-a6ba-66f479de78ce.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1dcec2a-3c29-49cb-a6ba-66f479de78ce.png)'
- en: Installing Git on Windows
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Git
- en: Git was primarily developed for Linux- or Unix-based operating systems. When
    it grew in popularity and Windows users started to demand Git, Git for Windows
    was launched. Installing Git on Windows is now a very easy process. To install
    Git, go to [https://git-scm.com/download/win](https://git-scm.com/download/win).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Git最初是为基于Linux或Unix的操作系统开发的。当它在Windows用户中变得流行并开始要求Git时，Git for Windows应运而生。在Windows上安装Git现在是一个非常简单的过程。要安装Git，请转到[https://git-scm.com/download/win](https://git-scm.com/download/win)。
- en: 'You will be taken to the page shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被带到以下截图所示的页面：
- en: '![](img/e9c46f12-f598-401c-b98f-be26af4608c6.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9c46f12-f598-401c-b98f-be26af4608c6.png)'
- en: Git for Windows should start downloading automatically. If it doesn't start,
    you can click on the links given on the website. The download file will be an
    executable file, so to start installation, execute the executable file. During
    installation, if you are not sure what to choose, the best option here is to keep
    everything as default.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Git for Windows应该会自动开始下载。如果没有开始，您可以点击网站上提供的链接。下载文件将是一个可执行文件，所以要开始安装，执行可执行文件。在安装过程中，如果不确定要选择什么，最好的选择是保持一切默认。
- en: 'The following screenshot shows which components you can install:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了您可以安装哪些组件：
- en: '![](img/ad9369d6-e2e5-4c3a-9228-8f271256a146.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad9369d6-e2e5-4c3a-9228-8f271256a146.png)'
- en: 'There is a section in which you can choose the default editor to be used for
    Git. The default editor that is chosen is Vim, as shown in the following screenshot.
    If you are not used to using Vim, you can change it to your preferred one:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个部分可以选择用于Git的默认编辑器。选择的默认编辑器是Vim，如下面的截图所示。如果您不习惯使用Vim，可以将其更改为您喜欢的编辑器：
- en: '![](img/414ae3e5-f6db-4317-88ed-8c6832b39bfb.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/414ae3e5-f6db-4317-88ed-8c6832b39bfb.png)'
- en: 'Follow the steps. After Git is installed, to test whether the installation
    was successful, go to the command line or PowerShell and type the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按照步骤。安装Git后，要测试安装是否成功，请转到命令行或PowerShell，然后输入以下内容：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see an output similar to the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到类似以下内容的输出：
- en: '![](img/bcab6f8b-19bd-42a5-8411-ff126aa10c0c.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcab6f8b-19bd-42a5-8411-ff126aa10c0c.png)'
- en: If you can see the version number, this means that the installation was successful.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能看到版本号，这意味着安装成功了。
- en: The basics of Git
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git的基础知识
- en: As mentioned, Git was first developed for Linux systems, which is why the main
    way of using this tool is through the command line. On Windows, we don't use the
    command line as much as a Linux or Unix user, but using it gives you access to
    all the features of Git. For Windows, there are some GUI tools that can be used
    for Git actions, but they often have some limitations. As the command line is
    the preferred method for Git, we will cover only the command-line commands in
    this book.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '如前所述，Git最初是为Linux系统开发的，这就是为什么使用这个工具的主要方式是通过命令行。在Windows上，我们不像Linux或Unix用户那样经常使用命令行，但使用它可以让您访问Git的所有功能。对于Windows，有一些GUI工具可以用于Git操作，但它们通常有一些限制。由于命令行是Git的首选方法，因此我们将在本书中只涵盖命令行命令。 '
- en: Git config
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git config
- en: The `git config` command is a command that is used to configure your Git settings.
    The minimum setting for Git is to set a username and email address. You can either
    configure each Git repository differently or configure the settings globally.
    If you set the configuration globally, you don't have to configure the email address
    and username every time you initialize a Git repository. You can always override
    these in each repository if necessary.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`git config`命令是用来配置Git设置的命令。Git的最小设置是设置用户名和电子邮件地址。您可以为每个Git仓库单独配置，也可以全局配置设置。如果您全局设置配置，您就不必每次初始化Git仓库时都配置电子邮件地址和用户名。如果有必要，您可以在每个仓库中覆盖这些设置。'
- en: 'To configure your email address and username, run the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置您的电子邮件地址和用户名，请运行以下命令：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you want to set the configuration globally, you need to add the `--global`
    keyword, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要全局设置配置，需要添加`--global`关键字，如下所示：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you want to see what other global configuration settings are available,
    you can use the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要查看其他全局配置设置可用的内容，可以使用以下命令：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can then change the settings that you want to change.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以更改您想要更改的设置。
- en: Git init
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git init
- en: 'If you have a project that is not currently using Git version control, you
    can use the following command to initialize the project:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个当前未使用Git版本控制的项目，可以使用以下命令初始化项目：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When you run the preceding command, the Git program that you have installed
    in your machine creates a `.git` directory in the project directory and starts
    tracking the source code of that project. After you initialize Git in a new project,
    all the files are displayed as Modified and you have to stage those files to commit
    those changes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行上述命令时，您在计算机上安装的Git程序将在项目目录中创建一个`.git`目录，并开始跟踪该项目的源代码。在新项目中初始化Git后，所有文件都显示为已修改，您必须将这些文件暂存以提交这些更改。
- en: Git clone
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git clone
- en: 'If you want to use a project that is on a remote server, you have to clone
    the project. To clone a project, you have to use the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使用位于远程服务器上的项目，必须克隆该项目。要克隆项目，必须使用以下命令：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For example, if you want to clone the Angular project, you have to type the
    following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果要克隆Angular项目，必须键入以下内容：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you clone a repository to your local environment, the `.git` folder is
    downloaded. This includes the history of commits, branches, tags, and all other
    information contained in the remote server. It is basically a copy of a version
    of the remote server. If you commit a change in your local copy and then push
    it to the remote repository, then your local copy will sync with the remote copy.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将存储库克隆到本地环境时，将下载`.git`文件夹。这包括提交历史记录，分支，标签和远程服务器中包含的所有其他信息。基本上是远程服务器版本的副本。如果您在本地副本中提交更改，然后将其推送到远程存储库，则本地副本将与远程副本同步。
- en: Git status
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git status
- en: 'While working, you will want to check the status of your current code. This
    means finding out which files are Modified and which files are Staged. You can
    get all of this information by using the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作时，您会想要检查当前代码的状态。这意味着找出哪些文件已修改，哪些文件已暂存。您可以使用以下命令获取所有这些信息：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s take a look at an example. If we add a new file called `hello.txt` to
    our project, which is tracked by Git, and check its status, we will see something
    like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。如果我们向我们的项目中添加一个名为`hello.txt`的新文件，并且该文件已被Git跟踪，并检查其状态，我们将看到以下内容：
- en: '![](img/f99a31f5-fdff-4be7-98c6-d58b8ab02b59.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f99a31f5-fdff-4be7-98c6-d58b8ab02b59.png)'
- en: Here, we can see a file called `hello.txt` under `Untracked` files, which means
    that this file is not yet tracked by Git. The `git status` command also tells
    you which branch you are currently in. In this case, we are in the `master` branch.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到一个名为`hello.txt`的文件位于`Untracked`文件下，这意味着此文件尚未被Git跟踪。`git status`命令还会告诉您当前所在的分支。在这种情况下，我们在`master`分支中。
- en: Git add
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git add
- en: 'The `git add` command is a command that will add Modified files/folders to
    the Git tracking system. This means that the files and folders will be staged.
    The command looks as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`git add`命令是一个将已修改的文件/文件夹添加到Git跟踪系统的命令。这意味着文件和文件夹将被暂存。命令如下所示：'
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s continue with our example to see what happens when we add the `hello.txt`
    file in Git. To do this, we will execute the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续我们的示例，看看当我们在Git中添加`hello.txt`文件时会发生什么。为此，我们将执行以下命令：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/8032b4ee-0843-4aeb-b19b-a149a140fa86.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8032b4ee-0843-4aeb-b19b-a149a140fa86.png)'
- en: 'Here, we see a warning about **line feed** (**LF**) and **Carriage Return****,
    Line Feed** (**CR+LF**), which refer to some kind of formatting. The reason for
    the replacement is that we are using the Windows operating system here, but we
    don''t need to worry about that for the time being. The main point here is that
    the file has been staged properly. Now, if we check the status, we will see the
    following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到了关于**换行符**（**LF**）和**回车**，换行符**（**CR+LF**）的警告，这些都是某种格式。替换的原因是我们在这里使用的是Windows操作系统，但目前我们不需要担心这个问题。这里的主要问题是文件已经被正确暂存。现在，如果我们检查状态，我们将看到以下内容：
- en: '![](img/1a59cee9-dde1-42e9-a8ce-930e2605be3f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a59cee9-dde1-42e9-a8ce-930e2605be3f.png)'
- en: Here, we can see that the `hello.txt` file is placed in the `Changes to be committed` section.
    This means that the file has been staged.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`hello.txt`文件被放置在`Changes to be committed`部分。这意味着该文件已被暂存。
- en: 'In a real project, you might work on several different files at a time before
    you stage the files. It could be very tedious to add the files one by one, or
    even to write the file names separated by commas. If you want all your modified
    files to be staged, you can use the following command to add all files in the
    staged area:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实项目中，您可能会在暂存文件之前同时处理多个不同的文件。逐个添加文件或甚至用逗号分隔文件名可能非常繁琐。如果要将所有修改的文件暂存，可以使用以下命令将所有文件添加到暂存区域中：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Git commit
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git commit
- en: 'The `git commit` command is used when you want to commit your code to the Git
    history. This means taking a snapshot of your code base and storing it in the
    Git database for future reference. To commit files/folders, you have to use the
    following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要将代码提交到Git历史记录时，使用`git commit`命令。这意味着对代码库进行快照，并将其存储在Git数据库中以供将来参考。要提交文件/文件夹，您必须使用以下命令：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you execute the preceding code, the default editor that was set for Git
    will open up and ask you to enter a message for the commit. There is also a shorter
    way of doing this. If you want to enter a message directly with the commit, you
    can run the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行上述代码，Git设置的默认编辑器将打开并要求您输入提交的消息。还有一种更简洁的方法。如果要直接输入提交的消息，可以运行以下命令：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s now commit our `hello.txt` file in our Git repository. To do this, we''ll
    run the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们提交我们的`hello.txt`文件到Git存储库。为此，我们将运行以下命令：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output should look like the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下屏幕截图所示：
- en: '![](img/d6f675f4-c355-4775-9caf-5b231eb7ebee.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6f675f4-c355-4775-9caf-5b231eb7ebee.png)'
- en: 'After the successful commit, we will see the line `1 file changed, 1 insertion(+)`.
    If you check the status again, you will see that there is nothing to commit, as
    shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 成功提交后，我们将看到`1 file changed, 1 insertion(+)`。如果再次检查状态，将看到没有要提交的内容，如下面的屏幕截图所示：
- en: '![](img/06f99414-18c3-4c4d-9563-e8e392f14451.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06f99414-18c3-4c4d-9563-e8e392f14451.png)'
- en: Git log
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git log
- en: 'To check which commits have been made in the repository, you can use the following
    command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查在存储库中进行了哪些提交，可以使用以下命令：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will look as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/91189c17-7afe-4f05-8189-a4e5fc5facaa.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91189c17-7afe-4f05-8189-a4e5fc5facaa.png)'
- en: From the log, we can see that only one commit has been made so far. We can see
    the hash of the commit, which is the number next to the word `commit`. We can
    see that the `commit` was made on the `master` branch by `Raihan Taher`. We can
    also see the `commit` message in the log. This is a very helpful command to check
    what has been committed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从日志中，我们可以看到到目前为止只进行了一次提交。我们可以看到提交的哈希值，即紧跟在`commit`单词旁边的数字。我们可以看到`commit`是由`Raihan
    Taher`在`master`分支上进行的。我们还可以在日志中看到`commit`消息。这是一个非常有用的命令，可以检查已提交了什么。
- en: Git remote
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git remote
- en: 'The `git remote` command is used to see whether you have any connections with
    a remote repository. If you run the following command, it will show you the name
    of the remote repository. Normally, the remote name is set as `Origin`. You can
    have multiple remote repositories. Let''s take a look at the command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`git remote`命令用于查看是否与远程存储库建立了连接。如果运行以下命令，它将显示远程存储库的名称。通常，远程名称设置为`Origin`。您可以有多个远程存储库。让我们看一下这个命令：'
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we execute this command, we won''t see anything as there is no remote repository
    yet, as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行此命令，我们将看不到任何内容，因为还没有远程存储库，如下面的屏幕截图所示：
- en: '![](img/af4087a5-badb-455e-9239-cc7b52d4179d.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af4087a5-badb-455e-9239-cc7b52d4179d.png)'
- en: 'Let''s add a remote repository. We will use GitHub as our remote server. After
    creating a repository in GitHub, I have copied the URL of that repository. We
    will add it to our local repository. To do this, we use the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个远程存储库。我们将使用GitHub作为我们的远程服务器。在GitHub上创建存储库后，我复制了该存储库的URL。我们将把它添加到我们的本地存储库。为此，我们使用以下命令：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In our example, the command is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，命令如下：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After we add our remote repository, if we execute `git remote`, we will see
    that the `origin` is listed as a remote repository, as shown in the following
    screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了远程存储库后，如果执行`git remote`，我们将看到`origin`被列为远程存储库，如下面的屏幕截图所示：
- en: '![](img/75dade12-09c0-4fab-9c49-18cc47759a1b.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75dade12-09c0-4fab-9c49-18cc47759a1b.png)'
- en: 'If you want to see a little more detail about the remote repository, you can
    execute the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要查看有关远程存储库的更多详细信息，可以执行以下命令：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will display the URLs of the remote repositories that you have added,
    as shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示您添加的远程存储库的URL，如下面的屏幕截图所示：
- en: '![](img/b198c049-5136-47e6-bb2c-2365a95d3337.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b198c049-5136-47e6-bb2c-2365a95d3337.png)'
- en: Git push
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git push
- en: 'When you want to upload or push your local commits to the remote server, you
    can use the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要将本地提交上传或推送到远程服务器时，可以使用以下命令：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following is an example of how to use this command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用此命令的示例：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After you execute this command, should the push be successful, you will see
    a message that looks as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，如果推送成功，将看到以下消息：
- en: '![](img/ed93b671-65e1-4fe7-bc73-be880541f6d1.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed93b671-65e1-4fe7-bc73-be880541f6d1.png)'
- en: Git pull
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git pull
- en: 'The `git pull` command is used when you want to get the latest code from the
    remote repository. As Git is a distributed version control system and multiple
    people can work on a project, there is the possibility that someone else has updated
    the remote server with the latest code. To access the latest code, run the following
    command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`git pull`命令用于从远程存储库获取最新代码。由于Git是一个分布式版本控制系统，多人可以在一个项目上工作，有可能其他人已经使用最新代码更新了远程服务器。要访问最新代码，请运行以下命令：'
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following is an example of how to use this code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用此代码的示例：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we run this code, the message that pops up is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行此代码，弹出的消息如下：
- en: '![](img/e561a54b-2ebf-496b-a114-8ebf58e41f9f.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e561a54b-2ebf-496b-a114-8ebf58e41f9f.png)'
- en: This means that our local repository is up to date with the remote repository.
    If there were new commits in the remote repository, the `git pull` command would
    pull those changes to our local repository and indicate that changes have been
    pulled.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的本地存储库已经与远程存储库同步。如果远程存储库中有新的提交，`git pull`命令将把这些更改拉到我们的本地存储库，并指示已拉取更改。
- en: Git fetch
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git fetch
- en: 'The `git fetch` command is a very similar command to `git pull`, but, when
    you use `git fetch`, the code will be fetched from the remote repository to the
    local repository, but it won''t be merged with your code. After checking the remote
    code, if you feel like you want to merge it with your local code, you have to explicitly run
    a `git merge` command. The command to do this is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`git fetch`命令是一个与`git pull`非常相似的命令，但是当你使用`git fetch`时，代码将从远程仓库获取到本地仓库，但不会与你的代码合并。在检查了远程代码后，如果你觉得想要将其与本地代码合并，你必须显式运行`git
    merge`命令。执行此命令如下：'
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you run the preceding command, all the branches from the remote repository
    will be updated. If you specify a local branch, only that branch will be updated:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行上述命令，将更新来自远程仓库的所有分支。如果指定一个本地分支，只会更新该分支：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s try to execute a `git fetch` command in our example code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在我们的示例代码中执行`git fetch`命令：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will see the following output:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到以下输出：
- en: '![](img/032f5867-815b-48f5-be9d-d4d7a5048c59.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/032f5867-815b-48f5-be9d-d4d7a5048c59.png)'
- en: Branching in Git
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git中的分支
- en: Branching is often thought of as one of the best features of Git. Branching
    has made Git distinct from all other version control systems. It is very powerful
    and easy to use. Before we learn about the different branching commands, let me
    explain briefly how Git deals with commits, because that will help you understand
    Git branches. In Git, we already know that every commit has a unique hash, and
    that that hash is stored in the Git database. With the hash, every commit stores
    the hash of the earlier commit, which is known as the parent of that commit. As
    well as this, another hash that stores the files that were staged on that commit
    is also stored, along with the commit message and information about the committer
    and the author. For the first ever commit of a repository, the parent commit is
    empty.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 分支经常被认为是Git最好的特性之一。分支使Git与所有其他版本控制系统不同。它非常强大且易于使用。在我们学习不同的分支命令之前，让我简要解释一下Git如何处理提交，因为这将帮助你理解Git分支。在Git中，我们已经知道每个提交都有一个唯一的哈希值，并且该哈希值存储在Git数据库中。使用哈希值，每个提交都存储了先前提交的哈希值，这被称为该提交的父提交。除此之外，还存储了另一个哈希值，该哈希值存储了在该提交上暂存的文件，以及提交消息和有关提交者和作者的信息。对于存储库的第一个提交，父提交为空。
- en: 'The following diagram shows an example of hashing in Git:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了Git中哈希的示例：
- en: '![](img/3dcb22af-ba87-4a31-a293-9ac6079c582c.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3dcb22af-ba87-4a31-a293-9ac6079c582c.png)'
- en: 'We call all the information in a commit a snapshot. If we have made three commits,
    we can say that we have **Snapshot A**, **Snapshot B**, and **Snapshot C**, one
    after another, as shown in the following diagram:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称提交中的所有信息为快照。如果我们做了三次提交，我们可以说我们有**快照A**，**快照B**和**快照C**，如下图所示：
- en: '![](img/3df485a8-2ee2-4921-8b23-a4fde0b38713.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3df485a8-2ee2-4921-8b23-a4fde0b38713.png)'
- en: By default, when you initialize a local Git repository, a branch called `master` is
    created. This is the branch that most developers treat as the main branch in a
    Git tree. This is optional; you can treat any branch as your main branch or production
    branch, as all branches have the same capacity and power. If you create a branch
    from **Snapshot C** (**Commit 3**, or **C3** for short) and name it `feature`,
    a branch will start from **C3 **(**Commit 3**) and the next commit on the testing
    branch will treat C3 as the parent commit.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当你初始化一个本地Git仓库时，会创建一个名为`master`的分支。这是大多数开发人员将其视为Git树中的主分支的分支。这是可选的；你可以将任何分支视为你的主分支或生产分支，因为所有分支具有相同的能力和权限。如果你从**快照C**（**提交3**或**C3**简称）创建一个名为`feature`的分支，一个分支将从**C3**（**提交3**）开始，测试分支上的下一个提交将把C3视为父提交。
- en: 'The following diagram shows the branching:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了分支情况：
- en: '![](img/ce4743a5-97e8-4c76-aa3f-7a4ec0caaf3e.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce4743a5-97e8-4c76-aa3f-7a4ec0caaf3e.png)'
- en: '**HEAD** is a pointer that points to the active commit or branch. This is an
    indicator for the developer, as well as for Git version control. When you make
    a new commit, the HEAD moves to the latest commit, as that is the snapshot that
    will be created as a parent for the next commit.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**HEAD**是一个指针，指向活动的提交或分支。这是开发人员和Git版本控制的指示器。当你做一个新的提交时，HEAD会移动到最新的提交，因为这是将作为下一个提交的父提交的快照。'
- en: Creating a branch
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建分支
- en: 'Let''s now take a look at the command to create a branch in Git. Creating a
    branch is very easy, because it doesn''t copy the whole code base to a new place,
    but only keeps a relationship with the Git tree. There are a few ways to create
    a branch, but the most general way is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在来看一下在Git中创建分支的命令。创建分支非常容易，因为它不会将整个代码库复制到一个新的位置，而是只保持与Git树的关系。有几种创建分支的方法，但最常见的方法如下：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This should look as follows on the command line:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上应该如下所示：
- en: '![](img/b2404d53-01bc-4c4d-9803-5381da16d2b9.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2404d53-01bc-4c4d-9803-5381da16d2b9.png)'
- en: Viewing available branches
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看可用的分支
- en: 'To view which branches are available in the local Git repository, you can write
    the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看本地Git仓库中有哪些分支可用，可以输入以下命令：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After executing the preceding code, you should see the following output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述代码后，你应该看到以下输出：
- en: '![](img/fcca175f-04b5-490c-b504-b81c3b9a8ecc.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fcca175f-04b5-490c-b504-b81c3b9a8ecc.png)'
- en: We can see that we have two branches in our local repository. One is the `master`
    branch and the other is the `feature` branch. The `* `character indicates where
    the HEAD is pointing.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的本地仓库中有两个分支。一个是`master`分支，另一个是`feature`分支。`*`字符表示HEAD指向的位置。
- en: Changing branches
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换分支
- en: 'In the previous example, we saw that, even after creating the feature branch,
    the HEAD is still pointing to the master. The command to switch to another branch
    is as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们看到，即使创建了feature分支，HEAD仍然指向master。切换到另一个分支的命令如下：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In our example, if we want to change from the `master` to the `feature` branch,
    we have to write the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，如果我们想从`master`切换到`feature`分支，我们必须输入以下命令：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output is as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/a5034adf-dd2e-4103-afde-9d72df501e53.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5034adf-dd2e-4103-afde-9d72df501e53.png)'
- en: 'After running the command, we can see that Git has switched to the `feature`
    branch. Now we can run the `git` `branch` command again to see where the HEAD
    is pointing, as shown in the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，我们可以看到Git已经切换到了`feature`分支。现在我们可以再次运行`git` `branch`命令来查看HEAD指向的位置，如下截图所示：
- en: '![](img/a7e605d1-aa7c-48ae-a8a9-4296f745c73f.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7e605d1-aa7c-48ae-a8a9-4296f745c73f.png)'
- en: 'The likelihood is that, when you create a branch, you will want to work on
    that branch straight away, so there is a shortcut to create a branch and then
    switch to it, as shown in the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能的情况是，当您创建一个分支时，您会希望立即在该分支上工作，因此有一个快捷方式可以创建一个分支，然后切换到它，如下面的代码所示：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Deleting a branch
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除分支
- en: 'To delete a branch, you have to execute the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个分支，您必须执行以下命令：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If the branch is deleted successfully, you should see a message similar to
    the one shown in the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分支成功删除，您应该会看到类似于以下截图中显示的消息：
- en: '![](img/575435ef-b9ac-40f5-b244-bf367d2abe0c.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/575435ef-b9ac-40f5-b244-bf367d2abe0c.png)'
- en: Merging in Git
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Git中合并
- en: 'To merge one branch with another, you have to use the `merge` command. Remember
    that you need to be on the branch that you are going to merge the code with, not
    the branch that is going to be merged, or any other branch. The command is as
    follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个分支与另一个分支合并，您必须使用`merge`命令。请记住，您需要在要将代码合并的分支上，而不是将要合并的分支或任何其他分支上。命令如下：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output should be as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![](img/34f6e505-44e1-4d6d-b5f0-18bf24f25099.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34f6e505-44e1-4d6d-b5f0-18bf24f25099.png)'
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about a concept that is not directly related
    to the C# programming language, but which is nonetheless an essential tool for
    C# developers. Microsoft has recently purchased GitHub, the biggest remote code
    repository website based on Git, and integrated most of the Microsoft IDEs/editors
    with it, including the newest code editor, Visual Code. This shows just how important
    Git has become to our industry. I believe that every developer, new or senior,
    should use version control for their code. If you don't use Git, you can use any
    other version control system on the market. Git, however, is the best, even if
    you are not using Git in your workplace, I would recommend that you use it in
    your personal projects. Git commands are very simple, so you'll only need to practice
    with it a few times before you understand it completely.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一个与C#编程语言不直接相关，但对于C#开发人员来说仍然是一个必不可少的工具的概念。微软最近收购了GitHub，这是基于Git的最大远程代码存储库网站，并将大多数Microsoft的IDEs/编辑器与之集成，包括最新的代码编辑器Visual
    Code。这显示了Git对我们行业有多么重要。我相信每个开发人员，无论是新手还是资深人员，都应该为他们的代码使用版本控制。如果您不使用Git，您可以使用市场上的任何其他版本控制系统。然而，Git是最好的，即使您在工作中没有使用Git，我也建议您在个人项目中使用它。Git命令非常简单，所以您只需要练习几次就能完全理解它。
- en: The next chapter is a little different. We will look at some questions that
    are commonly asked in job interviews.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章有点不同。我们将看一些在求职面试中常被问到的问题。
