- en: Chapter 2. Lambdas Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。lambda介绍
- en: 'In this chapter, we''ll introduce the ideas of lambdas, we''ll:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍lambda的概念，我们将：
- en: Discuss some background to lambdas and functional programming in general
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论一些关于lambda和函数式编程的背景知识
- en: Talk about functions versus classes in Java
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论Java中函数与类的区别
- en: Look at the basic syntax for lambdas in Java
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看一下Java中lambda的基本语法
- en: λs in functional programming
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在函数式编程中的λs
- en: Before we look at things in more depth, let's look at some general background
    to lambdas.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们更深入地看问题之前，让我们先看一些关于lambda的一般背景。
- en: If you haven't seen it before, the Greek letter λ (**lambda**) is often used
    as shorthand when talking about lambdas.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前没有见过，希腊字母λ（**lambda**）在谈论lambda时经常被用作简写。
- en: 1930s and the lambda calculus
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20世纪30年代和lambda演算
- en: In computer science, lambdas go back to the lambda-calculus. A mathematical
    notation for functions introduced by **Alonzo Church** in the 1930s. It was a
    way to explore mathematics using functions and was later re-discovered as a useful
    tool in computer science.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，lambda演算可以追溯到lambda演算。这是20世纪30年代由**Alonzo Church**引入的函数的数学表示法。这是一种使用函数探索数学的方法，后来被重新发现为计算机科学中的有用工具。
- en: It formalized the notion of *lambda terms* and the rules to transform those
    terms. These rules or *functions* map directly into modern computer science ideas.
    All functions in the lambda-calculus are anonymous which again has been taken
    literally in computer science.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它正式化了*lambda项*的概念和转换这些项的规则。这些规则或*函数*直接映射到现代计算机科学的思想。lambda演算中的所有函数都是匿名的，这在计算机科学中再次被字面理解。
- en: 'Here''s an example of a lambda-calculus expression:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个lambda演算表达式的例子：
- en: '**A lambda-calculus expression**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个lambda演算表达式**'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This defines an anonymous function or *lambda* with a single argument `x`. The
    body follows the dot and adds one to that argument.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了一个带有单个参数`x`的匿名函数或*lambda*。主体跟在点后，将一个加到该参数。
- en: 1950s and LISP
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20世纪50年代和LISP
- en: In the 1950s, *John McCarthy* invented LISP whilst at MIT. This was a programming
    language designed to model mathematical problems and was heavily influenced by
    the lambda-calculus.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪50年代，*John McCarthy*在麻省理工学院发明了LISP。这是一种旨在模拟数学问题的编程语言，受到了lambda演算的重大影响。
- en: It used the word lambda as an operator to define an anonymous function.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用lambda这个词作为运算符来定义一个匿名函数。
- en: 'Here''s an example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子：
- en: '**A LISP expression**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个LISP表达式**'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This LISP expression evaluates to a function, that when applied will take a
    single argument, bind it to `arg` and then add `1` to it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个LISP表达式求值为一个函数，当应用时将接受一个参数，将其绑定到`arg`，然后加`1`。
- en: The two expressions produce the same thing, a function to increment a number.
    You can see the two are very similar.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个表达式产生相同的结果，一个增加数字的函数。你可以看到这两个非常相似。
- en: The lambda-calculus and LISP have had a huge influence on functional programming.
    The ideas of applying functions and reasoning about problems using functions has
    moved directly into programming languages. Hence the use of the term in our field.
    A lambda in the calculus is the same thing as in modern programming languages
    and is used in the same way.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: lambda演算和LISP对函数式编程产生了巨大影响。应用函数和使用函数推理问题的思想直接转移到了编程语言中。因此，在我们的领域中使用了这个术语。演算中的lambda与现代编程语言中的lambda是相同的，并且以相同的方式使用。
- en: What is a lambda
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是lambda
- en: In simple terms then, a lambda is just an anonymous function. That's it. Nothing
    special. It's just a compact way to define a function. Anonymous functions are
    useful when you want to pass around fragments of reusable functionality. For example,
    passing functions into other functions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，lambda只是一个匿名函数。就是这样。没有什么特别的。这只是一种定义函数的简洁方式。当您想要传递可重用功能片段时，匿名函数是有用的。例如，将函数传递到其他函数中。
- en: Many main stream languages already support lambdas including Scala, C#, Objective-C,
    Ruby, C++(11), Python and many others.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 许多主流语言已经支持lambda，包括Scala、C#、Objective-C、Ruby、C++(11)、Python等。
- en: Functions vs classes
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数与类
- en: Bear in mind that an anonymous *function* isn't the same as an anonymous *class*
    in Java. An anonymous class in Java still needs to be instantiated to an object.
    It may not have a proper name, but it can be useful only when it's an object.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Java中的匿名*函数*与Java中的匿名*类*不同。Java中的匿名类仍然需要实例化为对象。它可能没有一个适当的名称，但只有当它是一个对象时才有用。
- en: A *function* on the other hand has no instance associated with it. Functions
    are disassociated with the data they act on whereas an object is intimately associated
    with the data it acts upon.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，*函数*没有与之关联的实例。函数与它们所作用的数据是分离的，而对象与它所作用的数据是密切相关的。
- en: You can use lambdas in modern Java anywhere you would have previously used a
    single method interface so it may just look like syntactic sugar but it's not.
    Let's have a look at how they differ and compare anonymous classes to lambdas;
    classes vs. functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在现代Java中使用lambda的任何地方，以前您可能使用单方法接口，因此它可能看起来只是语法糖，但实际上并非如此。让我们看看它们的区别，并将匿名类与lambda进行比较；类与函数。
- en: Lambdas in modern Java
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代Java中的lambda
- en: 'A typical implementation of an anonymous class (a single method interface)
    in Java pre-8, might look something like this. The `anonymousClass` method is
    calling the `waitFor` method, passing in some implementation of `Condition`; in
    this case, it''s saying, wait for some server to shutdown:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 8之前，匿名类（单方法接口）的典型实现可能看起来像这样。`anonymousClass`方法调用`waitFor`方法，传入`Condition`的一些实现；在这种情况下，它在说，等待某个服务器关闭：
- en: '**Typical usage of an anonymous class**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**匿名类的典型用法**'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The functionally equivalent lambda would look like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 等效的lambda看起来是这样的：
- en: '**Equivalent functionality as a lambda**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**等效的lambda功能**'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Where in the interest of completeness, a naive polling `waitFor` method might
    look like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在完整性的利益上，一个天真的轮询`waitFor`方法可能看起来像这样：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Some theoretical differences
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些理论上的差异
- en: Firstly, both implementations are in-fact closures, the latter is also a lambda.
    We'll look at this distinction in more detail later in the *Lambdas vs closures*
    section. It means that both have to capture their "environment" at runtime. In
    Java pre-8, this means copying the things the closure needs into an instance of
    an class (an anonymous instances of Condition). In our example, the server variable
    would need to be copied into the instance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这两种实现实际上都是闭包，后者也是lambda。我们将在*Lambda与闭包*部分更详细地讨论这一区别。这意味着它们都必须在运行时捕获它们的“环境”。在Java
    8之前，这意味着将闭包需要的东西复制到一个类的实例中（Condition的匿名实例）。在我们的例子中，server变量需要被复制到实例中。
- en: As it's a copy, it has to be declared final to ensure that it can not be changed
    between when it's captured and when it's used. These two points in time could
    be very different given that closures are often used to defer execution until
    some later point (see [lazy evaluation](http://en.wikipedia.org/wiki/Lazy_evaluation)
    for example). Modern Java uses a neat trick whereby if it can reason that a variable
    is never updated, it might as well be final so it treats it as *effectively final*
    and you don't need to declare it as final explicitly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它是一个副本，必须声明为final，以确保它在被捕获和使用时不能被更改。这两个时间点可能非常不同，因为闭包通常用于推迟执行直到以后的某个时间点（例如，参见[惰性求值](http://en.wikipedia.org/wiki/Lazy_evaluation)）。现代Java使用了一个巧妙的技巧，即如果它可以推断出一个变量永远不会被更新，那么它可能就是final，因此它被视为*实际上是final*，你不需要显式地声明它为final。
- en: A lambda on the other hand, doesn't need to copy it's environment or capture
    any terms. This means it can be treated as a genuine function and not an instance
    of a class. What's the difference? Plenty.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，lambda不需要复制它的环境或捕获任何术语。这意味着它可以被视为真正的函数，而不是一个类的实例。有什么区别？很多。
- en: Functions vs classes
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数与类
- en: For a start, functions; [genuine functions](http://en.wikipedia.org/wiki/Pure_function),
    don't need to be instantiated many times. I'm not sure if instantiation is even
    the right word to use when talking about allocating memory and loading a chunk
    of machine code as a function. The point is, once it's available, it can be re-used,
    it's idempotent in nature as it retains no state. Static class methods are the
    closest thing Java has to functions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，函数；[真正的函数](http://en.wikipedia.org/wiki/Pure_function)，不需要多次实例化。当谈论分配内存和加载一块机器代码作为函数时，我甚至不确定实例化是否是正确的词。关键是，一旦它可用，它可以被重复使用，它的本质是幂等的，因为它不保留状态。静态类方法是Java中最接近函数的东西。
- en: For Java, this means that a lambda need not be instantiated every time it's
    evaluated which is a big deal. Unlike instantiating an anonymous class, the memory
    impact should be minimal.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java来说，这意味着lambda在每次评估时不需要被实例化，这是一个很大的问题。与实例化匿名类不同，内存影响应该是最小的。
- en: 'In terms of some conceptual differences then:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些概念上的区别方面：
- en: Classes must be instantiated, whereas functions are not.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类必须被实例化，而函数不需要。
- en: When classes are newed up, memory is allocated for the object.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当类被实例化时，内存被分配给对象。
- en: Memory need only be allocated once for functions. They are stored in the *permanent*
    area of the heap.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数只需要分配一次内存。它们存储在堆的*永久*区域。
- en: Objects act on their own data, functions act on unrelated data.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象作用于它们自己的数据，函数作用于不相关的数据。
- en: Static class methods in Java are roughly equivalent to functions.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java中，静态类方法大致相当于函数。
- en: Some concrete differences
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些具体的区别
- en: Some concrete differences between functions and classes include their capture
    semantics and how they shadow variables.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 函数和类之间的一些具体区别包括它们的捕获语义以及它们如何遮蔽变量。
- en: Capture semantics
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捕获语义
- en: Another difference is around capture semantics for this. In an anonymous class,
    this refers to the instance of the anonymous class. For example, `Foo$InnerClass`
    and not `Foo`. That's why you have slightly odd looking syntax like `Foo.this.x`
    when you refer to the enclosing scope from the anonymous class.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个区别在于对this的捕获语义。在匿名类中，this指的是匿名类的实例。例如，`Foo$InnerClass`而不是`Foo`。这就是为什么当你从匿名类引用封闭范围时，会出现略显奇怪的语法，比如`Foo.this.x`。
- en: In lambdas on the other hand, this refers to the enclosing scope (Foo directly
    in our example). In fact, lambdas are **entirely lexically scoped**, meaning they
    don't inherit any names from a super type or introduce a new level of scoping
    at all; you can directly access fields, methods and local variables from the enclosing
    scope.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在lambda中，this指的是封闭范围（在我们的例子中直接指的是Foo）。事实上，lambda是**完全词法作用域**，这意味着它们不继承任何名称来自超类型，也不引入新的作用域级别；你可以直接访问封闭范围的字段、方法和局部变量。
- en: For example, this class shows that the lambda can reference the `firstName`
    variable directly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个类表明lambda可以直接引用`firstName`变量。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `firstName` is shorthand for `this.firstName` and because this refers
    to the enclosing scope (the class `Example`), it's value will be "Jack".
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`firstName`是`this.firstName`的简写，因为this指的是封闭范围（类`Example`），它的值将是“Jack”。
- en: 'The anonymous class equivalent would need to explicitly refer to `firstName`
    from the enclosing scope. You can''t use this as in this context, this means the
    anonymous instance and there is no `firstName` there. So, the following will compile:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名类等效需要明确地引用来自封闭范围的`firstName`。在这种情况下，你不能使用this，因为这意味着匿名实例，那里没有`firstName`。因此，以下内容将编译：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: but this will not.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不会。
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You could still access the field directly (that is, simply calling return `firstName
    + " " + surname`) but you can't do so using this. The point here is to demonstrate
    the difference in capture schematics for this when used in lambdas vs. anonymous
    instances.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然可以直接访问字段（即简单地调用`return firstName + " " + surname`），但不能使用this。这里的重点是演示在lambda和匿名实例中使用this时捕获语义的差异。
- en: Shadowed variables
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遮蔽变量
- en: Referencing shadowed variables becomes much more straight forward to reason
    about with the simplified `this` semantics. For example,
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 引用遮蔽变量变得更加直接，可以通过简化的`this`语义来推理。例如，
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, because `this` is inside the lambda, it refers to the enclosing scope.
    So `this.firstName` will have the value `"Charlie"` and not the method parameter
    of the same name. The capture semantics make it clearer. If you use `firstName`
    (and drop the `this`), it will refer to the parameter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，因为`this`在lambda内部，它指的是外部范围。所以`this.firstName`将有值`"Charlie"`，而不是同名方法参数的值。捕获语义使其更清晰。如果你使用`firstName`（并且去掉`this`），它将指的是参数。
- en: 'In the next example, using an anonymous instance, `firstName` simply refers
    to the parameter. If you want to refer to the enclosing version, you''d use `Example.this.firstName`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，使用匿名实例，`firstName`只是指参数。如果你想引用外部版本，你会使用`Example.this.firstName`：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Functions in the academic sense are very different things from anonymous classes
    (which we often treat like functions in Java pre-8). It's useful to understand
    the distinctions to be able to justify the use of lambdas for something other
    than just their concise syntax. Of course, there's lots of additional advantages
    in using lambdas (not least the retrofit of the JDK to heavily use them).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 学术意义上的函数与匿名类（我们在Java 8之前经常将其视为函数）是非常不同的东西。了解这些区别是有用的，可以为了除了简洁的语法之外的其他原因来使用lambda。当然，使用lambda还有很多其他优势（至少是JDK的大量使用）。
- en: When we take a look at the new lambda syntax next, remember that although lambdas
    are used in a very similar way to anonymous classes in Java, they are technically
    different. Lambdas in Java need not be instantiated every time they're evaluated
    unlike an instance of an anonymous class.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看下新的lambda语法时，请记住，尽管lambda在Java中的使用方式与匿名类非常相似，但它们在技术上是不同的。Java中的lambda不需要在每次评估时实例化，不像匿名类的实例。
- en: This should serve to remind you that lambdas in Java are not just syntactic
    sugar.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该提醒你，Java中的lambda不仅仅是语法糖。
- en: λ basic syntax
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: λ基本语法
- en: Let's take a look at the basic lambda syntax.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下基本的lambda语法。
- en: A lambda is basically an anonymous block of functionality. It's a lot like using
    an anonymous class instance. For example, if we want to sort an array in Java,
    we can use the `Arrays.sort` method which takes an instance of the `Comparator`
    interface.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: lambda基本上是一个匿名的功能块。它很像使用匿名类实例。例如，如果我们想在Java中对数组进行排序，我们可以使用`Arrays.sort`方法，它接受`Comparator`接口的实例。
- en: 'It would look something like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它会看起来像这样：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `Comparator` instance here is a an abstract piece of the functionality;
    it means nothing on its own; it's only when it's used by the `sort` method that
    it has purpose.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`Comparator`实例是功能的一个抽象部分；它本身没有意义；只有当它被`sort`方法使用时才有目的。
- en: 'Using Java''s new syntax, you can replace this with a lambda which looks like
    this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Java的新语法，你可以用lambda替换它，看起来像这样：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It's a more succinct way of achieving the same thing. In fact, Java treats this
    as if it were an instance of the `Comparator` class. If we were to extract a variable
    for the lambda (the second parameter), it's type would be `Comparator<Integer>`
    just like the anonymous instance above.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种更简洁的实现相同功能的方式。事实上，Java将其视为`Comparator`类的实例。如果我们要提取lambda的变量（第二个参数），它的类型将是`Comparator<Integer>`，就像上面的匿名实例一样。
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Because `Comparator` has only a single abstract method on it; `compareTo`, the
    compiler can piece together that when we have an anonymous block like this, we
    really mean an instance of `Comparator`. It can do this thanks to a couple of
    the other new features that we'll talk about later; functional interfaces and
    improvements to type inference.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Comparator`上只有一个抽象方法；`compareTo`，编译器可以推断出当我们有一个这样的匿名块时，我们实际上是指`Comparator`的一个实例。它可以做到这一点，多亏了我们稍后将讨论的一些其他新特性；函数接口和类型推断的改进。
- en: Syntax breakdown
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法分解
- en: You can always convert from using a single abstract method to a using lambda.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你总是可以从使用单个抽象方法转换为使用lambda。
- en: 'Let''s say we have an an interface `Example` with a method `apply`, returning
    some type and taking some argument:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个接口`Example`，有一个方法`apply`，返回某种类型并接受某个参数：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We could instantiate an instance with something like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用这样的方式实例化一个实例：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And to convert to a lambda, we basically trim the fat. We drop the instantiation
    and annotation, drop the method details which leaves just the argument list and
    the body.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换为lambda，我们基本上是去掉多余的部分。我们去掉实例化和注释，去掉方法细节，只留下参数列表和主体。
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'we then introduce the new arrow symbol to indicate both that the whole thing
    is a lambda and that what follows is the body and that''s our basic lambda syntax:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们引入新的箭头符号来表示整个内容是lambda，并且接下来的部分是lambda的主体，这就是我们的基本lambda语法：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s take the sorting example from earlier through these steps. We start
    with the anonymous instance:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤来看之前的排序示例。我们从匿名实例开始：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'and trim the instantiation and method signature:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 并去掉实例化和方法签名：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: introduce the lambda
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 引入lambda
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: and we're done. There's a couple of optimizations we can do though. You can
    drop the types if the compiler knows enough to infer them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们完成了。不过我们还可以做一些优化。如果编译器足够聪明以推断类型，你可以省略类型。
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'and for simple expressions, you can drop the braces to produce a lambda expression:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的表达式，你可以去掉大括号来产生一个lambda表达式：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this case, the compiler can infer enough to know what you mean. The single
    statement returns a value consistent with the interface, so it says, "no need
    to tell me that you're going to return something, I can see that for myself".
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，编译器可以推断出足够的信息来知道你的意思。单个语句返回一个与接口一致的值，所以它说，“不需要告诉我你要返回什么，我自己就能看到”。
- en: For single argument interface methods, you can even drop the first brackets.
    For example the lambda taking an argument `x` and returning `x + 1`;
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单参数接口方法，甚至可以去掉第一个括号。例如，接受参数`x`并返回`x + 1`的lambda；
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: can be written without the brackets
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可以不带括号写
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Let's recap with a summary of the syntax options.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个语法选项的总结来回顾一下。
- en: 'Syntax Summary:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 语法总结：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The first example `((int x, int y) -> { return x + y; })` is the most verbose
    way to create a lambda. The arguments to the function along with their types are
    in parenthesis, followed by the new arrow syntax and then the body; the code block
    to be executed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子 `((int x, int y) -> { return x + y; })` 是创建lambda的最冗长的方式。函数的参数及其类型在括号内，然后是新的箭头语法，然后是代码块；要执行的代码块。
- en: You can often drop the types from the argument list, like `(x, y) -> { return
    x + y; }`. The compiler will use type inference here to try and guess the types.
    It does this based on the context that you're trying to use the lambda in.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您通常可以从参数列表中省略类型，比如 `(x, y) -> { return x + y; }`。编译器会在这里使用类型推断来尝试猜测类型。它会根据您尝试使用lambda的上下文来进行推断。
- en: If your code block returns something or is a single line expression, you can
    drop the braces and return statement, for example `(x, y) -> x + y;`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码块返回某些内容或是单行表达式，您可以省略大括号和返回语句，例如 `(x, y) -> x + y;`。
- en: In the case of only a single argument, you can drop the parentheses `x -> x
    * 2`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在只有一个参数的情况下，您可以省略括号 `x -> x * 2`。
- en: If you have no arguments at all, the "hamburger" symbol is needed,
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果根本没有参数，则需要使用“汉堡包”符号。
- en: '`() -> System.out.println("Hey there!");`.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`() -> System.out.println("Hey there!");`。'
- en: In the interest of completeness, there is another variation; a kind of shortcut
    to a lambda called a *method reference*. An example is something like `System.out::println;`,
    which is basically a short cut to the lambda `(value -> System.out.prinltn(value)`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，还有另一种变体；一种称为*方法引用*的lambda的快捷方式。例如，`System.out::println;`，基本上是对lambda
    `(value -> System.out.prinltn(value)` 的简写。
- en: We're going to talk about method references in more detail later, so for now,
    just be aware that they exist and can be used anywhere you can use a lambda.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后更详细地讨论方法引用，所以现在只需知道它们存在，并且可以在任何可以使用lambda的地方使用。
