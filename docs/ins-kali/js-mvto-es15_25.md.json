["```js\nclass CastleBuilder {\n  buildCastle(size) {\n    var castle = new Castle();\n    castle.size = size;\n    return castle;\n  }\n}\n```", "```js\nfunction When_building_a_castle_size_should_be_correctly_set() {\n  var castleBuilder = new CastleBuilder();\n  var expectedSize = 10;\n  var builtCastle = castleBuilder.buildCastle(10);\n  assertEqual(expectedSize, builtCastle.size);\n}\n```", "```js\nfunction assertEqual(expected, actual){\n  if(expected !== actual)\n  throw \"Got \" + actual + \" but expected \" + expected;\n}\n```", "```js\nvar SpyUpon = (function () {\n  function SpyUpon() {\n  }\n  SpyUpon.prototype.write = function (toWrite) {\n    console.log(toWrite);\n  };\n  return SpyUpon;\n})();\n```", "```js\nvar spyUpon = new SpyUpon();\nspyUpon._write = spyUpon.write;\nspyUpon.write = function (arg1) {\n  console.log(\"intercepted\");\n  this.called = true;\n  this.args = arguments;\n  this.result = this._write(arg1, arg2, arg3, arg4, arg5);\n  return this.result;\n};\n```", "```js\nconsole.log(spyUpon.write(\"hello world\"));\nconsole.log(spyUpon.called);\nconsole.log(spyUpon.args);\nconsole.log(spyUpon.result);\n```", "```js\nhello world\n7\ntrue\n{ '0': 'hello world' }\n7\n```", "```js\nclass Knight {\n  constructor(credentialFactory) {\n    this.credentialFactory = credentialFactory;\n  }\n  presentCredentials(toRoyalty) {\n    console.log(\"Presenting credentials to \" + toRoyalty);\n    toRoyalty.send(this.credentialFactory.Create());\n    return {};\n  }\n}\n```", "```js\nclass StubCredentialFactory {\n  constructor() {\n    this.callCounter = 0;\n  }\n  Create() {\n    //manually create a credential\n  };\n}\n```", "```js\nclass StubCredentialFactory {\n  constructor() {\n    this.callCounter = 0;\n  }\n  Create() {\n    if (this.callCounter == 0)\n      return new SimpleCredential();\n    if (this.callCounter == 1)\n      return new CredentialWithSeal();\n    if (this.callCounter == 2)\n      return null;\n    this.callCounter++;\n  }\n}\n```", "```js\nvar knight = new Knight(new StubCredentialFactory());\nknight.presentCredentials(\"Queen Cersei\");\n```", "```js\nvar knight = new Knight(new StubCredentialFactory());\nvar credentials = knight.presentCredentials(\"Lord Snow\");\nassert(credentials.type === \"SimpleCredentials\");\ncredentials = knight.presentCredentials(\"Queen Cersei\");\nassert(credentials.type === \"CredentialWithSeal\");\ncredentials = knight.presentCredentials(\"Lord Stark\");\nassert(credentials == null);\n```", "```js\nclass MockCredentialFactory {\n  constructor() {\n    this.timesCalled = 0;\n  }\n  Create() {\n    this.timesCalled++;\n  }\n  Verify() {\n    assert(this.timesCalled == 3);\n  }\n}\n```", "```js\nvar credentialFactory = new MockCredentialFactory();\nvar knight = new Knight(credentialFactory);\nvar credentials = knight.presentCredentials(\"Lord Snow\");\ncredentials = knight.presentCredentials(\"Queen Cersei\");\ncredentials = knight.presentCredentials(\"Lord Stark\");\ncredentialFactory.Verify();\n```", "```js\nvar mock = sinon.mock(myAPI);\nmock.expects(\"method\").once().throws();\n```", "```js\nvar casper = require('casper').create();\ncasper.start('http://google.com', function() {\n  assert.false($(\"#gbqfq\").attr(\"aria-haspopup\"));\n  $(\"#gbqfq\").val(\"redis\");\n  assert.true($(\"#gbqfq\").attr(\"aria-haspopup\"));\n});\n```", "```js\nvar jsdom = require(\"jsdom\");\njsdom.env( '<p><a class=\"the-link\" ref=\"https://github.com/tmpvar/jsdom\">jsdom!</a></p>',[\"http://code.jquery.com/jquery.js\"],\n  function (errors, window) {\n    assert.equal(window.$(\"a.the-link\").text(), \"jsdom!\");\n  }\n);\n```", "```js\nclass PageModel{\n  titleVisible: boolean;\n  users: Array<User>;\n}\n```", "```js\nvar model = new PageModel();\nmodel.titleVisible = false;\nvar controller = new UserListPageController(model);\ncontroller.AddUser(new User());\nassert.true(model.titleVisible);\n```", "```js\nfunction testMapping(){\n  //Arrange\n  \u2026\n  //Act\n  \u2026\n  //Assert\n  \u2026\n}\n```"]