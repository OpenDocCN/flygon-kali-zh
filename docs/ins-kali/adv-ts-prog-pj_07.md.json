["```ts\nexport class PinModel {\n  id: string;\n  lat: number;\n  long: number;\n  name: string;\n}\n```", "```ts\nexport interface PinModelData extends PinModel {\n storageId: string;\n}\n```", "```ts\nfirebase: {\n  apiKey: \"AIzaSyC0MzFxTtvt6cCvmTGE94xc5INFRYlXznw\",\n  authDomain: \"advancedtypescript3-mapapp.firebaseapp.com\",\n  databaseURL: \"https://advancedtypescript3-mapapp.firebaseio.com\",\n  projectId: \"advancedtypescript3-mapapp\",\n  storageBucket: \"advancedtypescript3-mapapp.appspot.com\",\n  messagingSenderId: \"6102469443\"\n}\n```", "```ts\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { AngularFireStorageModule } from '@angular/fire/storage';\n```", "```ts\nimports: [\n  BrowserModule,\n  HttpClientModule,\n  AngularFireModule.initializeApp(environment.firebase),\n  AngularFireStorageModule,\n  AngularFirestoreModule\n],\n```", "```ts\nexport class FirebaseMapPinsService {\n}\n```", "```ts\nprivate pins: AngularFirestoreCollection<PinModelData>;\n```", "```ts\nconstructor(private readonly db: AngularFirestore) { \n  this.pins = db.collection<PinModelData>('pins');\n  this.model = this.pins.valueChanges();\n}\n```", "```ts\nDelete(item: PinModelData) {\n  this.pins.doc(item.storageId).delete();\n}\n```", "```ts\nSave(item: PinModelData) {\n  if (item.storageId === '') {\n    item.storageId = this.db.createId();\n    this.pins.doc(item.storageId).set(item);\n  }\n  else {\n    this.pins.doc(item.storageId).update(item);\n  }\n}\n```", "```ts\nexport class PinsModel {\n  private pins: PinModelData[] = [];\n  constructor(private firebaseMapService: FirebaseMapService) { }\n}\n```", "```ts\npublic Add(...args: [string, string, ...number[]]);\n```", "```ts\npublic Add(arg_1: string, arg_2: string, ...number[]);\n```", "```ts\npublic Add(...args: [string, string, ...number[]]) {   const data: PinModelData = {   id: args[0],   name: args[1],   lat: args[2],   long: args[3],   storageId: ''   };   this.firebaseMapService.Save(data);   this.pins.push(data);  }\n```", "```ts\nthis.pinsModel.Add(guid.toString(), geocode, e.location.latitude, e.location.longitude);\n```", "```ts\npublic Move(...args: [string,string, ...number[]]) {   const pinModel: PinModelData = this.pins.find(x => x.id === args[0]);   if (pinModel) {   pinModel.name = args[1];   pinModel.lat = args[2];   pinModel.long = args[3];  }   this.firebaseMapService.Save(pinModel);  }\n```", "```ts\npublic Load(): Observable<PinModelData[]>{   return this.firebaseMapService.model;  }\n```", "```ts\npublic Remove(id: string) {\n  const pinModel: PinModelData = this.pins.find(x => x.id === id);\n  this.firebaseMapService.Delete(pinModel);\n  const index: number = this.pins.findIndex(x => x.id === id);\n  if (index >= 0) {\n    this.pins.splice(index,1);\n  }\n}\n```", "```ts\nexport class MapGeocode {\n}\n```", "```ts\nprivate searchManager: Microsoft.Maps.Search.SearchManager;\nconstructor(private map: Microsoft.Maps.Map) {\n  Microsoft.Maps.loadModule('Microsoft.Maps.Search', () => {\n    this.searchManager = new Microsoft.Maps.Search.SearchManager(this.map);\n  });\n}\n```", "```ts\npublic ReverseGeocode(location: Microsoft.Maps.Location): Promise<string> {\n  return new Promise<string>((callback) => {\n    const request = {\n      location: location,\n      callback: function (code) { callback(code.name); }\n    };\n    if (this.searchManager) {\n      this.searchManager.reverseGeocode(request);\n    }\n  });\n}\n```", "```ts\nexport class PointsOfInterestService {\n  constructor(private http: HttpClient) {}\n}\n```", "```ts\nexport interface PoiPoint {\n  lat: number,\n  long: number,\n  name: string\n}\n```", "```ts\npublic Search(location: location): Promise<PoiPoint[]> {\n  const endpoint = `https://dev.virtualearth.net/REST/v1/LocalSearch/?query=coffee&userLocation=${location[0]},${location[1]}&key=${environment.mapKey}`;\n  return new Promise<PoiPoint[]>((callback) => {\n    const subscription: Subscription = this.http.get(endpoint).pipe(map(this.MapData))\n    .subscribe((x: any) => {\n      const points: PoiPoint[] = [];\n      if (x.resourceSets && x.resourceSets.length > 0 && x.resourceSets[0].resources) {\n        x.resourceSets[0].resources.forEach(element => {\n          if (element.geocodePoints && element.geocodePoints.length > 0) {\n            const poi: PoiPoint = {\n              lat: element.geocodePoints[0].coordinates[0],\n              long: element.geocodePoints[0].coordinates[1],\n              name: element.name\n            };\n            points.push(poi)\n          }\n        });\n      }\n      subscription.unsubscribe();\n      callback(points);\n    })\n  });\n}\n```", "```ts\n<div #myMap style='width: 100%; height: 100%;'> </div> \n```", "```ts\n@Component({\n  selector: 'atp-map-view',\n  templateUrl: './map-view.component.html',\n  styleUrls: ['./map-view.component.scss'],\n  host: {\n  '(window:load)' : 'Loaded()'\n  } }) export class MapViewComponent implements OnInit {\n  @ViewChild('myMap') myMap: { nativeElement: string | HTMLElement; };    constructor() { }    ngOnInit() {  }\n}\n```", "```ts\nLoaded() {   // Bing has a nasty habit of not working properly in browsers like \n  // Chrome if we don't hook the map up \n // in the window.load event.   const map = new Microsoft.Maps.Map(this.myMap.nativeElement, {   credentials: environment.mapKey,   enableCORS: true,   zoom: 13   });\n  this.map.emit(map);\n}\n```", "```ts\nmapTypeId:Microsoft.Maps.MapTypeId.road\n```", "```ts\n@Output() map = new EventEmitter();\n```", "```ts\n<div class=\"container-fluid h-100\">\n <div class=\"row h-100\">\n <div class=\"col-12\">\n <atp-map-view (map)=\"MapLoaded($event)\"></atp-map-view>\n </div>\n </div> </div>\n```", "```ts\nexport class MappingcontainerComponent implements OnInit {   private map: Microsoft.Maps.Map;\n  private mapEvents: MapEvents;\n  constructor(private readonly firebaseMapPinService: FirebaseMapPinsService, \nprivate readonly poi: PointsOfInterestService) { }    ngOnInit() {\n }    MapLoaded(map: Microsoft.Maps.Map) {\n  this.map = map;\n  this.mapEvents = new MapEvents(this.map, new PinsModel(this.firebaseMapPinService), this.poi);\n } }\n```", "```ts\nhtml,body {\n  height: 100%; }\n```", "```ts\nexport class MapEvents {\n  private readonly geocode: MapGeocode;\n  private infoBox: Microsoft.Maps.Infobox;\n\n  constructor(private map: Microsoft.Maps.Map, private pinsModel: PinsModel, private poi: PointsOfInterestService) {\n\n  }\n}\n```", "```ts\nprivate SetInfoBox(title: string, description: string, pin: Microsoft.Maps.Pushpin): void {\n  if (!this.infoBox) {\n    this.infoBox = new Microsoft.Maps.Infobox(pin.getLocation(), { title: title, description: description });\n    this.infoBox.setMap(this.map);\n  return;\n  }\n  this.infoBox.setOptions({\n    title: title,\n    description: description,\n    location: pin.getLocation(),\n    visible: true\n  });\n}\n```", "```ts\nAddPoi(pois: PoiPoint[]): void {\n  pois.forEach(poi => {\n    const pin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(poi.lat, poi.long), {\n      color: Microsoft.Maps.Color.fromHex('#00ff00')\n    });\n    this.map.entities.push(pin);\n    Microsoft.Maps.Events.addHandler(pin, 'click', (x) => {\n      this.SetInfoBox('Point of interest', poi.name, pin);\n    });\n  })\n}\n```", "```ts\nAddPushPin(e: any): void {\n}\n```", "```ts\nconst guid: Guid = Guid.create();\nconst pin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(e.location, {\n  draggable: true\n});\n```", "```ts\nthis.geocode.GeoCode(e.location).then((geocode) => {\n  this.pinsModel.Add(guid.toString(), geocode, e.location.latitude, e.location.longitude);\n  this.map.entities.push(pin);\n  this.SetInfoBox('User location', geocode, pin);\n});\n```", "```ts\nconst dragHandler = Microsoft.Maps.Events.addHandler(pin, 'dragend', (args: any) => {\n  this.geocode.GeoCode(args.location).then((geocode) => {\n    this.pinsModel.Move(guid.toString(), geocode, args.location.latitude, args.location.longitude);\n    this.SetInfoBox('User location (Moved)', geocode, pin);\n  });\n});\n```", "```ts\nconst handler = Microsoft.Maps.Events.addHandler(pin, 'click', () => {\n  this.pinsModel.Remove(guid.toString());\n  this.map.entities.remove(pin);\n\n  // Tidy up our stray event handlers.\n  Microsoft.Maps.Events.removeHandler(handler);\n  Microsoft.Maps.Events.removeHandler(dragHandler);\n});\n```", "```ts\nthis.geocode = new MapGeocode(this.map);\nMicrosoft.Maps.Events.addHandler(map, 'click', (e: any) => {\n  this.AddPushPin(e);\n});\n```", "```ts\nMicrosoft.Maps.Events.addHandler(map, 'viewchangeend', () => {\n  const center = map.getCenter();\n  this.poi.Search([center.latitude, center.longitude]).then(pointsOfInterest => {\n    if (pointsOfInterest && pointsOfInterest.length > 0) {\n      this.AddPoi(pointsOfInterest);\n    }\n  })\n})\n```", "```ts\nconst subscription = this.pinsModel.Load().subscribe((data: PinModelData[]) => {\n  data.forEach(pinData => {\n    const pin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(pinData.lat, pinData.long), {\n      draggable: true\n    });\n    this.map.entities.push(pin);\n    const handler = Microsoft.Maps.Events.addHandler(pin, 'click', () => {\n      this.pinsModel.Remove(pinData.id);\n      this.map.entities.remove(pin);\n    Microsoft.Maps.Events.removeHandler(handler);\n      Microsoft.Maps.Events.removeHandler(dragHandler);\n    });\n    const dragHandler = Microsoft.Maps.Events.addHandler(pin, 'dragend', (args: any) => {\n      this.geocode.GeoCode(args.location).then((geocode) => {\n        this.pinsModel.Move(pinData.id, geocode, args.location.latitude, args.location.longitude);\n        this.map.entities.push(pin);\n    this.SetInfoBox('User location (moved)', geocode, pin);\n      });\n    });\n  });\n  subscription.unsubscribe();\n  this.pinsModel.AddFromStore(data);\n});\n```"]