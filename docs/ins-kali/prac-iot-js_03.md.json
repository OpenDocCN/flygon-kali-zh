["```js\n'use strict'; \n\nvar path = require('path'); \n\nmodule.exports = function(app) { \n  // Insert routes below \n  app.use('/api/v1/users', require('./api/user')); \n  app.use('/api/v1/devices', require('./api/device')); \n  app.use('/api/v1/data', require('./api/data')); \n\n  app.use('/auth', require('./auth')); \n}; \n```", "```js\n'use strict'; \n\nvar express = require('express'); \nvar controller = require('./device.controller'); \nvar config = require('../../config/environment'); \nvar auth = require('../../auth/auth.service'); \n\nvar router = express.Router(); \n\nrouter.get('/', auth.isAuthenticated(), controller.index); \nrouter.delete('/:id', auth.isAuthenticated(), controller.destroy); \nrouter.put('/:id', auth.isAuthenticated(), controller.update); \nrouter.get('/:id', auth.isAuthenticated(), controller.show); \nrouter.post('/', auth.isAuthenticated(), controller.create); \n\nmodule.exports = router; \n```", "```js\n'use strict'; \n\nvar mongoose = require('mongoose'); \nvar Schema = mongoose.Schema; \n\nvar DeviceSchema = new Schema({ \n    name: String, \n    macAddress: String, \n    createdBy: { \n        type: String, \n        default: 'user' \n    }, \n    createdAt: { \n        type: Date \n    }, \n    updatedAt: { \n        type: Date \n    } \n}); \n\nDeviceSchema.pre('save', function(next) { \n    var now = new Date(); \n    this.updatedAt = now; \n    if (!this.createdAt) { \n        this.createdAt = now; \n    } \n    next(); \n}); \n\nmodule.exports = mongoose.model('Device', DeviceSchema); \n```", "```js\n'use strict'; \n\nvar Device = require('./device.model'); \n\n/** \n * Get list of all devices for a user \n */ \nexports.index = function(req, res) { \n    var currentUser = req.user._id; \n    // get only devices related to the current user \n    Device.find({ \n        createdBy: currentUser \n    }, function(err, devices) { \n        if (err) return res.status(500).send(err); \n        res.status(200).json(devices); \n    }); \n}; \n\n/** \n * Add a new device \n */ \nexports.create = function(req, res, next) { \n    var device = req.body; \n    // this device is created by the current user \n    device.createdBy = req.user._id; \n    Device.create(device, function(err, device) { \n        if (err) return res.status(500).send(err); \n        res.json(device); \n    }); \n}; \n\n/** \n * Get a single device \n */ \nexports.show = function(req, res, next) { \n    var deviceId = req.params.id; \n    // the current user should have created this device \n    Device.findOne({ \n        _id: deviceId, \n        createdBy: req.user._id \n    }, function(err, device) { \n        if (err) return res.status(500).send(err); \n        if (!device) return res.status(404).end(); \n        res.json(device); \n    }); \n}; \n\n/** \n * Update a device \n */ \nexports.update = function(req, res, next) { \n    var device = req.body; \n    device.createdBy = req.user._id; \n\n    Device.findOne({ \n        _id: deviceId, \n        createdBy: req.user._id \n    }, function(err, device) { \n        if (err) return res.status(500).send(err); \n        if (!device) return res.status(404).end(); \n\n        device.save(function(err, updatedDevice) { \n            if (err) return res.status(500).send(err); \n            return res.status(200).json(updatedDevice); \n        }); \n    }); \n}; \n\n/** \n * Delete a device \n */ \nexports.destroy = function(req, res) { \n    Device.findOne({ \n        _id: req.params.id, \n        createdBy: req.user._id \n    }, function(err, device) { \n        if (err) return res.status(500).send(err); \n\n        device.remove(function(err) { \n            if (err) return res.status(500).send(err); \n            return res.status(204).end(); \n        }); \n    }); \n}; \n```", "```js\n'use strict'; \n\nvar express = require('express'); \nvar controller = require('./data.controller'); \nvar auth = require('../../auth/auth.service'); \n\nvar router = express.Router(); \n\nrouter.get('/:deviceId/:limit', auth.isAuthenticated(), controller.index); \nrouter.post('/', auth.isAuthenticated(), controller.create); \n\nmodule.exports = router; \n```", "```js\n'use strict'; \n\nvar mongoose = require('mongoose'); \nvar Schema = mongoose.Schema; \n\nvar DataSchema = new Schema({ \n    macAddress: { \n        type: String \n    }, \n    data: { \n        type: Schema.Types.Mixed \n    }, \n    createdBy: { \n        type: String, \n        default: 'raspberrypi3' \n    }, \n    createdAt: { \n        type: Date \n    }, \n    updatedAt: { \n        type: Date \n    } \n}); \n\nDataSchema.pre('save', function(next) { \n    var now = new Date(); \n    this.updatedAt = now; \n    if (!this.createdAt) { \n        this.createdAt = now; \n    } \n    next(); \n});\n```", "```js\nDataSchema.post('save', function(doc) { \n    //console.log('Post Save Called', doc); \n    require('./data.socket.js').onSave(doc) \n}); \n\nmodule.exports = mongoose.model('Data', DataSchema); \n```", "```js\n'use strict'; \n\nvar Data = require('./data.model'); \n\n/** \n * Get Data for a device \n */ \nexports.index = function(req, res) { \n    var macAddress = req.params.deviceId; \n    var limit = parseInt(req.params.limit) || 30; \n    Data.find({ \n        macAddress: macAddress \n    }).limit(limit).exec(function(err, devices) { \n        if (err) return res.status(500).send(err); \n        res.status(200).json(devices); \n    }); \n}; \n\n/** \n * Create a new data record \n */ \nexports.create = function(req, res, next) { \n    var data = req.body; \n    data.createdBy = req.user._id; \n    Data.create(data, function(err, _data) { \n        if (err) return res.status(500).send(err); \n        res.json(_data); \n        if(data.topic === 'led'){ \n            require('../../mqtt/index.js').sendLEDData(data.data.l);// send led value \n        } \n    }); \n}; \n```", "```js\n/** \n * Broadcast updates to client when the model changes \n */ \n\n'use strict'; \n\nvar data = require('./data.model'); \nvar socket = undefined; \n\nexports.register = function(_socket) { \n   socket = _socket; \n} \n\nfunction onSave(doc) { \n    // send data to only the intended device \n    socket.emit('data:save:' + doc.macAddress, doc); \n} \n\nmodule.exports.onSave = onSave; \n```", "```js\n'use strict'; \n\nvar config = require('./environment'); \n\n// When the user disconnects.. perform this \nfunction onDisconnect(socket) {} \n\n// When the user connects.. perform this \nfunction onConnect(socket) { \n    // Insert sockets below \n    require('../api/data/data.socket').register(socket); \n} \nmodule.exports = function(socketio) { \n    socketio.use(require('socketio-jwt').authorize({ \n        secret: config.secrets.session, \n        handshake: true \n    })); \n\n    socketio.on('connection', function(socket) { \n        var socketId = socket.id; \n        var clientIp = socket.request.connection.remoteAddress; \n\n        socket.address = socket.handshake.address !== null ? \n            socket.handshake.address.address + ':' + socket.handshake.address.port : \n            process.env.DOMAIN; \n\n        socket.connectedAt = new Date(); \n\n        // Call onDisconnect. \n        socket.on('disconnect', function() { \n            onDisconnect(socket); \n            // console.info('[%s] DISCONNECTED', socket.address); \n        }); \n\n        // Call onConnect. \n        onConnect(socket); \n        console.info('[%s] Connected on %s', socketId, clientIp); \n    }); \n}; \n```", "```js\nnpm start  \n```", "```js\nvar config = require('./config.js'); \nvar mqtt = require('mqtt'); \nvar GetMac = require('getmac'); \nvar rpiDhtSensor = require('rpi-dht-sensor'); \nvar rpio = require('rpio'); \nvar dht11 = new rpiDhtSensor.DHT11(2); \nvar temp = 0, \n    prevTemp = 0; \nvar humd = 0, \n    prevHumd = 0; \nvar macAddress; \nvar state = 0; \n\n// Set pin 12 as output pin and to low \nrpio.open(12, rpio.OUTPUT, rpio.LOW); \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    client.subscribe('rpi'); \n    client.subscribe('led'); \n    GetMac.getMac(function(err, mac) { \n        if (err) throw err; \n        macAddress = mac; \n        client.publish('api-engine', mac); \n    }); \n}); \n\nclient.on('message', function(topic, message) { \n    message = message.toString(); \n    if (topic === 'rpi') { \n        console.log('API Engine Response >> ', message); \n    } else if (topic === 'led') { \n        state = parseInt(message) \n        console.log('Turning LED', state ? 'On' : 'Off'); \n        // If we get a 1 we turn on the led, else off \n        rpio.write(12, state ? rpio.HIGH : rpio.LOW); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\n// infinite loop, with 3 seconds delay \nsetInterval(function() { \n    getDHT11Values(); \n    console.log('Temperature: ' + temp + 'C, ' + 'humidity: ' + humd + '%'); \n    // if the temperature and humidity values change \n    // then only publish the values \n    if (temp !== prevTemp || humd !== prevHumd) { \n        var data2Send = { \n            data: { \n                t: temp, \n                h: humd, \n                l: state \n            }, \n            macAddress: macAddress \n        }; \n        console.log('Data Published'); \n        client.publish('dht11', JSON.stringify(data2Send)); \n        // reset prev values to current \n        // for next loop \n        prevTemp = temp; \n        prevHumd = humd; \n    } // else chill! \n\n}, 3000); // every three second \n\nfunction getDHT11Values() { \n    var readout = dht11.read(); \n    // update global variable \n    temp = readout.temperature.toFixed(2); \n    humd = readout.humidity.toFixed(2); \n} \n```", "```js\nnpm install rpi-dht-sensor -save\nnpm install rpio -save  \n```", "```js\nvar Data = require('../api/data/data.model'); \nvar mqtt = require('mqtt'); \nvar config = require('../config/environment'); \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    console.log('Connected to Mosca at ' + config.mqtt.host + ' on port ' + config.mqtt.port); \n    client.subscribe('api-engine'); \n    client.subscribe('dht11'); \n}); \n\nclient.on('message', function(topic, message) { \n    // message is Buffer \n    // console.log('Topic >> ', topic); \n    // console.log('Message >> ', message.toString()); \n    if (topic === 'api-engine') { \n        var macAddress = message.toString(); \n        console.log('Mac Address >> ', macAddress); \n        client.publish('rpi', 'Got Mac Address: ' + macAddress); \n    } else if (topic === 'dht11') { \n        var data = JSON.parse(message.toString()); \n        // create a new data record for the device \n        Data.create(data, function(err, data) { \n            if (err) return console.error(err); \n            // if the record has been saved successfully,  \n            // websockets will trigger a message to the web-app \n            console.log('Data Saved :', data.data); \n        }); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\nexports.sendLEDData = function(data) { \n    console.log('Sending Data', data); \n    client.publish('led', data); \n} \n```", "```js\nnpm install ngx-ui-switch -save  \n```", "```js\nnpm install ng2-charts --save\nnpm install chart.js --save  \n```", "```js\nimport { UiSwitchModule } from 'ngx-ui-switch'; \nimport { ChartsModule } from 'ng2-charts'; \n```", "```js\n// snipp snipp \nimports: [ \n    RouterModule.forRoot(appRoutes), \n    BrowserModule, \n    BrowserAnimationsModule, \n    FormsModule, \n    HttpModule, \n    LocalStorageModule.withConfig({ \n      prefix: 'web-app', \n      storageType: 'localStorage' \n    }), \n    SimpleNotificationsModule.forRoot(), \n    UiSwitchModule, \n    ChartsModule \n  ], \n// snipp snipp \n```", "```js\n// snipp snipp  \n\"scripts\": [ \n        \"../node_modules/chart.js/dist/Chart.js\" \n      ], \n// snipp snipp  \n```", "```js\n<div class=\"container\"> \n    <br> \n    <div *ngIf=\"!device\"> \n        <h3 class=\"text-center\">Loading!</h3> \n    </div> \n    <div class=\"row\" *ngIf=\"lastRecord\"> \n        <div class=\"col-md-12\"> \n            <div class=\"panel panel-info\"> \n                <div class=\"panel-heading\"> \n                    <h3 class=\"panel-title\"> \n                        {{device.name}} \n                    </h3> \n                    <span class=\"pull-right btn-click\"> \n                        <i class=\"fa fa-chevron-circle-up\"></i> \n                    </span> \n                </div> \n                <div class=\"clearfix\"></div> \n                <div class=\"table-responsive\"> \n                    <table class=\"table table-striped\"> \n                        <tr> \n                            <td>Toggle LED</td> \n                            <td> \n                                <ui-switch [(ngModel)]=\"toggleState\" (change)=\"toggleChange($event)\"></ui-switch> \n                            </td> \n                        </tr> \n                        <tr *ngIf=\"lastRecord\"> \n                            <td>Temperature</td> \n                            <td>{{lastRecord.data.t}}</td> \n                        </tr> \n                        <tr *ngIf=\"lastRecord\"> \n                            <td>Humidity</td> \n                            <td>{{lastRecord.data.h}}</td> \n                        </tr> \n                        <tr *ngIf=\"lastRecord\"> \n                            <td>Received At</td> \n                            <td>{{lastRecord.createdAt | date: 'medium'}}</td> \n                        </tr> \n                    </table> \n                    <div class=\"col-md-10 col-md-offset-1\" *ngIf=\"lineChartData.length > 0\"> \n                        <canvas baseChart [datasets]=\"lineChartData\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\"></canvas> \n                    </div> \n                </div> \n            </div> \n        </div> \n    </div> \n</div> \n```", "```js\nimport { Component, OnInit, OnDestroy } from '@angular/core'; \nimport { DevicesService } from '../services/devices.service'; \nimport { Params, ActivatedRoute } from '@angular/router'; \nimport { SocketService } from '../services/socket.service'; \nimport { DataService } from '../services/data.service'; \nimport { NotificationsService } from 'angular2-notifications'; \n\n@Component({ \n   selector: 'app-device', \n   templateUrl: './device.component.html', \n   styleUrls: ['./device.component.css'] \n}) \nexport class DeviceComponent implements OnInit, OnDestroy { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   private subDevice: any; \n   private subData: any; \n   lastRecord: any; \n\n   // line chart config \n   public lineChartOptions: any = { \n         responsive: true, \n         legend: { \n               position: 'bottom', \n         }, hover: { \n               mode: 'label' \n         }, scales: { \n               xAxes: [{ \n                     display: true, \n                     scaleLabel: { \n                           display: true, \n                           labelString: 'Time' \n                     } \n               }], \n               yAxes: [{ \n                     display: true, \n                     ticks: { \n                           beginAtZero: true, \n                           steps: 10, \n                           stepValue: 5, \n                           max: 70 \n                     } \n               }] \n         }, \n         title: { \n               display: true, \n               text: 'Temperature & Humidity vs. Time' \n         } \n   }; \n   public lineChartLegend: boolean = true; \n   public lineChartType: string = 'line'; \n   public lineChartData: Array<any> = []; \n   public lineChartLabels: Array<any> = []; \n\n   constructor(private deviceService: DevicesService, \n         private socketService: SocketService, \n         private dataService: DataService, \n         private route: ActivatedRoute, \n         private notificationsService: NotificationsService) { } \n\n   ngOnInit() { \n         this.subDevice = this.route.params.subscribe((params) => { \n               this.deviceService.getOne(params['id']).subscribe((response) => { \n                     this.device = response.json(); \n                     this.getData(); \n                     this.socketInit(); \n               }); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               this.genChart(); \n               this.lastRecord = this.data[0]; // descending order data \n               if (this.lastRecord) { \n                     this.toggleState = this.lastRecord.data.l; \n               } \n         }); \n   } \n\n   toggleChange(state) { \n         let data = { \n               macAddress: this.device.macAddress, \n               data: { \n                     t: this.lastRecord.data.t, \n                     h: this.lastRecord.data.h, \n                     l: state ? 1 : 0 \n               }, \n               topic: 'led' \n         } \n\n         this.dataService.create(data).subscribe((resp) => { \n               if (resp.json()._id) { \n                     this.notificationsService.success('Device Notified!'); \n               } \n         }, (err) => { \n               console.log(err); \n               this.notificationsService.error('Device Notification Failed. Check console for the error!'); \n         }) \n   } \n\n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data) => { \n               if(this.data.length <= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n               this.genChart(); \n         }); \n   } \n\n   ngOnDestroy() { \n         this.subDevice.unsubscribe(); \n         this.subData ? this.subData.unsubscribe() : ''; \n   } \n\n   genChart() { \n\n         let data = this.data; \n         let _dtArr: Array<any> = []; \n         let _lblArr: Array<any> = []; \n\n         let tmpArr: Array<any> = []; \n         let humArr: Array<any> = []; \n\n         for (var i = 0; i < data.length; i++) { \n               let _d = data[i]; \n               tmpArr.push(_d.data.t); \n               humArr.push(_d.data.h); \n               _lblArr.push(this.formatDate(_d.createdAt)); \n         } \n\n         // reverse data to show the latest on the right side \n         tmpArr.reverse(); \n         humArr.reverse(); \n         _lblArr.reverse(); \n\n         _dtArr = [ \n               { \n                     data: tmpArr, \n                     label: 'Temperature' \n               }, \n               { \n                     data: humArr, \n                     label: 'Humidity %' \n               }, \n         ] \n\n         this.lineChartData = _dtArr; \n         this.lineChartLabels = _lblArr; \n   } \n\n   private formatDate(originalTime) { \n         var d = new Date(originalTime); \n         var datestring = d.getDate() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getFullYear() + \" \" + \n               d.getHours() + \":\" + d.getMinutes(); \n         return datestring;\n```", "```js\n   } \n} \n```", "```js\nnpm install yo generator-electron -g  \n```", "```js\nyo electron\n```", "```js\n.\n\n\u251c\u2500\u2500 index.css\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 index.js\n\n\u251c\u2500\u2500 license\n\n\u251c\u2500\u2500 package.json\n\n\u2514\u2500\u2500 readme.md\n```", "```js\nnpm start   \n```", "```js\nvar net = require('net') \nmodule.exports = function(cb) { \n    var server = net.createServer(), \n        port = 0; \n    server.on('listening', function() { \n        port = server.address().port \n        server.close() \n    }); \n    server.on('close', function() { \n        cb(null, port) \n    }) \n    server.on('error', function(err) { \n        cb(err, null) \n    }) \n    server.listen(0, '127.0.0.1') \n} \n```", "```js\nvar FreePort = require('./freeport.js'); \nvar http = require('http'), \n    fs = require('fs'), \n    html = ''; \n\nmodule.exports = function(cb) { \n    FreePort(function(err, port) { \n        console.log(port); \n        http.createServer(function(request, response) { \n            if (request.url === '/') { \n                html = fs.readFileSync('./app/index.html'); \n            } else { \n                html = fs.readFileSync('./app' + request.url); \n            } \n            response.writeHeader(200, { \"Content-Type\": \"text/html\" }); \n            response.write(html); \n            response.end(); \n        }).listen(port); \n        cb(port); \n    }); \n} \n```", "```js\n// snipp snipp \nfunction createMainWindow() { \n    const { width, height } = electron.screen.getPrimaryDisplay().workAreaSize; \n    const win = new electron.BrowserWindow({ width, height }) \n    const server = require(\"./server\")(function(port) { \n        win.loadURL('http://localhost:' + port); \n        win.on('closed', onClosed); \n        console.log('Desktop app started on port :', port); \n    }); \n\n    return win; \n} \n// snipp snipp \n```", "```js\nng build --env=prod\n```", "```js\n.\n\n\u251c\u2500\u2500 favicon.ico\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 inline.bundle.js\n\n\u251c\u2500\u2500 inline.bundle.js.map\n\n\u251c\u2500\u2500 main.bundle.js\n\n\u251c\u2500\u2500 main.bundle.js.map\n\n\u251c\u2500\u2500 polyfills.bundle.js\n\n\u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u251c\u2500\u2500 scripts.bundle.js\n\n\u251c\u2500\u2500 scripts.bundle.js.map\n\n\u251c\u2500\u2500 styles.bundle.js\n\n\u251c\u2500\u2500 styles.bundle.js.map\n\n\u251c\u2500\u2500 vendor.bundle.js\n\n\u2514\u2500\u2500 vendor.bundle.js.map\n```", "```js\n.\n\n\u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 favicon.ico\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 main.bundle.js\n\n\u2502 \u251c\u2500\u2500 main.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 vendor.bundle.js\n\n\u2502 \u2514\u2500\u2500 vendor.bundle.js.map\n\n\u251c\u2500\u2500 freeport.js\n\n\u251c\u2500\u2500 index.css\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 index.js\n\n\u251c\u2500\u2500 license\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 readme.md\n\n\u2514\u2500\u2500 server.js\n```", "```js\nnpm start \n```", "```js\nnpm install -g ionic cordova  \n```", "```js\ngit clone git@github.com:PacktPublishing/Practical-Internet-of-Things-with-JavaScript.git\n```", "```js\nnpm install\n```", "```js\nionic cordova platform add android \n```", "```js\n ionic cordova platform add ios \n```", "```js\n.\n\n\u251c\u2500\u2500 README.md\n\n\u251c\u2500\u2500 config.xml\n\n\u251c\u2500\u2500 hooks\n\n\u2502 \u2514\u2500\u2500 README.md\n\n\u251c\u2500\u2500 ionic.config.json\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 platforms\n\n\u2502 \u251c\u2500\u2500 android\n\n\u2502 \u2514\u2500\u2500 platforms.json\n\n\u251c\u2500\u2500 plugins\n\n\u2502 \u251c\u2500\u2500 android.json\n\n\u2502 \u251c\u2500\u2500 cordova-plugin-console\n\n\u2502 \u251c\u2500\u2500 cordova-plugin-device\n\n\u2502 \u251c\u2500\u2500 cordova-plugin-splashscreen\n\n\u2502 \u251c\u2500\u2500 cordova-plugin-statusbar\n\n\u2502 \u251c\u2500\u2500 cordova-plugin-whitelist\n\n\u2502 \u251c\u2500\u2500 fetch.json\n\n\u2502 \u2514\u2500\u2500 ionic-plugin-keyboard\n\n\u251c\u2500\u2500 resources\n\n\u2502 \u251c\u2500\u2500 android\n\n\u2502 \u251c\u2500\u2500 icon.png\n\n\u2502 \u251c\u2500\u2500 ios\n\n\u2502 \u2514\u2500\u2500 splash.png\n\n\u251c\u2500\u2500 src\n\n\u2502 \u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 assets\n\n\u2502 \u251c\u2500\u2500 declarations.d.ts\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 manifest.json\n\n\u2502 \u251c\u2500\u2500 pages\n\n\u2502 \u251c\u2500\u2500 service-worker.js\n\n\u2502 \u251c\u2500\u2500 services\n\n\u2502 \u2514\u2500\u2500 theme\n\n\u251c\u2500\u2500 tsconfig.json\n\n\u251c\u2500\u2500 tslint.json\n\n\u2514\u2500\u2500 www\n\n\u251c\u2500\u2500 assets\n\n\u251c\u2500\u2500 build\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 manifest.json\n\n\u2514\u2500\u2500 service-worker.js\n```", "```js\nionic serve  \n```", "```js\nionic cordova run android   \n```", "```js\nionic cordova run ios  \n```"]