- en: '*Chapter 5*: Updating and Deleting Applications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：更新和删除应用程序'
- en: In the previous chapter, we learned how to deploy an application and its service
    and how to scale deployment replicas up. Let's now learn about some more advanced
    ways to update your application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何部署应用程序及其服务，以及如何扩展部署副本。现在让我们学习一些更高级的方法来更新您的应用程序。
- en: In this chapter, we're going to learn how to update applications to new versions
    and, if the release was a bad one, how to roll it back. We will see how to assign
    an application to a particular node, running applications in high-availability
    mode, how to make applications available over the internet, and in cases where
    there is a need, how to delete an application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何将应用程序更新到新版本，以及如果发布是错误的，如何回滚。我们将看到如何将应用程序分配给特定节点，以高可用模式运行应用程序，如何使应用程序在互联网上可用，以及在需要的情况下如何删除应用程序。
- en: 'We''re going to cover the following main topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Releasing a new application version
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布新的应用程序版本
- en: Rolling back an application release
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚应用程序发布
- en: Assigning an application to a specific node (node affinity)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用分配给特定节点（节点亲和性）
- en: Scheduling application replicas to different nodes (pod affinity)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序副本调度到不同的节点（Pod亲和性）
- en: Exposing an application to the internet
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序暴露给互联网
- en: Deleting an application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个应用程序
- en: Deploying a new application version
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署新的应用程序版本
- en: 'In the previous chapter, we deployed an application using the `nginx v1.18.0`
    Docker image. In this section, let''s update it to `nginx v1.19.0`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了`nginx v1.18.0` Docker镜像部署了一个应用程序。在本节中，让我们将其更新为`nginx v1.19.0`：
- en: 'To update the `nginx` Docker image tag, run the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新`nginx` Docker镜像标签，请运行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `$ kubectl rollout status deployment nginx` command will show the rollout
    status as a success, failed, or waiting:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ kubectl rollout status deployment nginx`命令将显示滚动状态为成功、失败或等待：'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a handy way to check the deployment's rollout status.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查部署的滚动状态的一种方便方式。
- en: 'Let''s ensure that the deployment is updated to `nginx` v1.19.0 by running
    the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令来确保部署已更新为`nginx` v1.19.0：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output for the preceding command can be seen in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出可以在以下截图中看到：
- en: '![Figure 5.1 – Output for describe deployment'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 - 描述部署的输出'
- en: '](image/B16411_05_001.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_001.jpg)'
- en: Figure 5.1 – Output for describe deployment
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 - 描述部署的输出
- en: Yup, it was updated to v1.19.0, as we can see in the `Pod Template` part. Now,
    let's update the Docker image using the `deployment.yaml` file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，它已更新为v1.19.0，正如我们在`Pod Template`部分中所看到的。现在，让我们使用`deployment.yaml`文件更新Docker镜像。
- en: 'Update the `deployment.yaml` file with the new Docker `image` tag:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的Docker `image`标签更新`deployment.yaml`文件：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the `$ kubectl apply -f deployment.yaml` command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`$ kubectl apply -f deployment.yaml`命令：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running the `$ kubectl get pods` command shows that the pods haven't changed
    as we applied the same Docker image tag as before, so Kubernetes is clever enough
    not to make any unnecessary changes to the `nginx` deployment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`$ kubectl get pods`命令显示，由于我们应用了与之前相同的Docker镜像标签，因此Pods没有发生变化，因此Kubernetes足够聪明，不会对`nginx`部署进行任何不必要的更改。
- en: Rolling back an application release
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回滚应用程序发布
- en: There are always cases (such as bugs in the code, the wrong Docker tag supplied
    for the latest release, and more) when you need to roll back an application release
    to a previous version.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 总会有一些情况（例如代码中的错误、为最新发布提供了错误的Docker标签等），当您需要将应用程序发布回滚到先前的版本。
- en: 'This can be done using the `$ kubectl rollout undo deployment nginx` command
    followed by the `get` and `describe` commands:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过`$ kubectl rollout undo deployment nginx`命令，然后跟随`get`和`describe`命令来完成：
- en: '![Figure 5.2 – Deployment release rollback'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 - 部署发布回滚'
- en: '](image/B16411_05_002.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_002.jpg)'
- en: Figure 5.2 – Deployment release rollback
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 - 部署发布回滚
- en: 'The preceding output shows the version as `Image: nginx:1.18.0`, so the rollback
    was successful.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '上述输出显示版本为`Image: nginx:1.18.0`，因此回滚成功了。'
- en: 'We can also check the deployment rollout history:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查部署的回滚历史：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also roll back to a specific revision:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以回滚到特定的修订版本：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Nice, we have learned how to roll back a deployment's release.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我们已经学会了如何回滚部署的发布。
- en: Assigning an application to a specific node (node affinity)
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序分配给特定节点（节点亲和性）
- en: 'There are some use cases where Kubernetes clusters have different node pools
    with different specs, such as the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，Kubernetes集群具有不同规格的不同节点池，例如以下情况：
- en: Stateful applications
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有状态的应用程序
- en: Backend applications
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端应用程序
- en: Frontend applications
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端应用程序
- en: 'Let''s reschedule the `nginx` deployment to a dedicated node pool:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`nginx`部署重新调度到专用节点池：
- en: 'To get the nodes list, run the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取节点列表，请运行以下命令：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command gives the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令给出了以下输出：
- en: '![Figure 5.3 – Node pools list'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3 - 节点池列表'
- en: '](image/B16411_05_003.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_003.jpg)'
- en: Figure 5.3 – Node pools list
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 - 节点池列表
- en: 'Next, let''s check a node under the `gke-kubectl-lab-we-app-pool` name. Run
    the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们检查一个名为`gke-kubectl-lab-we-app-pool`的节点。运行以下命令：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding command is as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![Figure 5.4 – Node labels'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4 - 节点标签'
- en: '](image/B16411_05_004.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_004.jpg)'
- en: Figure 5.4 – Node labels
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 - 节点标签
- en: There, we have a `node-pool=web-app` label, which is the same for all nodes
    of the `gke-kubectl-lab-we-app-pool` pool.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们有一个`node-pool=web-app`标签，它对于`gke-kubectl-lab-we-app-pool`池的所有节点都是相同的。
- en: 'Let''s update the `deployment.yaml` file with the `nodeAffinity` rule, so the
    `nginx` application only gets scheduled to `gke-kubectl-lab-we-app-pool`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`nodeAffinity`规则更新`deployment.yaml`文件，这样`nginx`应用程序只会被调度到`gke-kubectl-lab-we-app-pool`：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To deploy the changes, run the `$ kubectl apply -f deployment.yaml` command
    followed by the `get` command as shown in the following screenshot:![Figure 5.5
    – Node affinity
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要部署更改，请运行`$ kubectl apply -f deployment.yaml`命令，然后按照以下截图中显示的`get`命令：![图5.5 -
    节点亲和性
- en: '](image/B16411_05_005.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_005.jpg)'
- en: Figure 5.5 – Node affinity
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 - 节点亲和性
- en: Nice, the pods were scheduled onto `gke-kubectl-lab-we-app-pool`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，Pod被调度到了`gke-kubectl-lab-we-app-pool`。
- en: Tip
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: We have used the `–o wide` flag, which allows us to show more information about
    a pod, such as its IP and the node it's scheduled on.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`-o wide`标志，它允许我们显示有关Pod的更多信息，例如其IP和所在的节点。
- en: 'Let''s delete one pod to verify that it gets scheduled onto `gke-kubectl-lab-we-app-pool`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们删除一个Pod来验证它是否被调度到`gke-kubectl-lab-we-app-pool`：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s get the pods list again:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次获取Pod列表：
- en: '![Figure 5.6 – Pods list with nodes'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6 - 带节点的Pod列表'
- en: '](image/B16411_05_006.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_006.jpg)'
- en: Figure 5.6 – Pods list with nodes
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 - 带节点的Pod列表
- en: The preceding screenshot shows the pods list with the nodes the pods were scheduled
    on. Good, the new pod was scheduled onto the right node pool.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了Pod列表，以及Pod所在的节点。很好，新的Pod被调度到了正确的节点池。
- en: Scheduling application replicas to different nodes (pod affinity)
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序副本调度到不同的节点（Pod亲和性）
- en: Using `nodeAffinity` does not ensure that pods will next time be scheduled onto
    separate nodes, and for real application high availability, the best practice
    is to ensure that application pods are scheduled onto separate nodes. If one of
    the nodes is down/rebooted/replaced, having all the pods running on that node
    will cause the application to go down and its services to be unavailable.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`nodeAffinity`不能确保下次pod被调度到不同的节点上，对于真正的应用程序高可用性，最佳实践是确保应用程序pod被调度到不同的节点上。如果其中一个节点宕机/重启/替换，所有的pod都运行在该节点上将导致应用程序崩溃，其服务不可用。
- en: 'Let''s update the `deployment.yaml` file with the `podAntiAffinity` rule so
    that the `nginx` application is only scheduled to `gke-kubectl-lab-we-app-pool`
    and onto separate nodes:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`podAntiAffinity`规则更新`deployment.yaml`文件，以便`nginx`应用程序只被调度到`gke-kubectl-lab-we-app-pool`上，并且被调度到不同的节点上：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To deploy the new changes, run the `$ kubectl apply -f deployment.yaml` command
    followed by the `get` command as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署新更改，运行`$ kubectl apply -f deployment.yaml`命令，然后运行`get`命令，如下截图所示：
- en: '![Figure 5.7 – Node affinity'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7 - 节点亲和力'
- en: '](image/B16411_05_007.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_007.jpg)'
- en: Figure 5.7 – Node affinity
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 - 节点亲和力
- en: 'As you can see, the pods are rescheduled again as we added the `podAntiAffinity`
    rule:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，pod再次被重新调度，因为我们添加了`podAntiAffinity`规则：
- en: '![Figure 5.8 – Node affinity pods are rescheduled'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8 - 节点亲和力pod被重新调度'
- en: '](image/B16411_05_008.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_008.jpg)'
- en: Figure 5.8 – Node affinity pods are rescheduled
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 - 节点亲和力pod被重新调度
- en: As you can see, the pods are running on separate nodes, and the `podAntiAffinity`
    rule will ensure that pods will not be scheduled onto the same node.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，pod正在运行在不同的节点上，并且`podAntiAffinity`规则将确保pod不会被调度到同一个节点上。
- en: Exposing an application to the internet
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序暴露给互联网
- en: Awesome job so far, so to finish this chapter, let's make our application available
    over the internet.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，工作得很好，为了完成本章，让我们使我们的应用程序可以通过互联网访问。
- en: 'We need to update `service.yaml` with `type: LoadBalancer`, which will create
    a LoadBalancer with an external IP.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要使用`type: LoadBalancer`更新`service.yaml`，这将创建一个带有外部IP的LoadBalancer。'
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The LoadBalancer capability is dependent on the vendor integration because an
    external LoadBalancer is created by the vendor. So, if you run locally with Minikube
    or Kind, you will never really get an external IP.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: LoadBalancer功能取决于供应商集成，因为外部LoadBalancer是由供应商创建的。因此，如果在Minikube或Kind上本地运行，你永远不会真正获得外部IP。
- en: 'Update the `service.yaml` file with the following content:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容更新`service.yaml`文件：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To deploy the new changes, run the `$ kubectl apply -f service.yaml` command
    followed by the `get` command as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署新更改，运行`$ kubectl apply -f service.yaml`命令，然后运行`get`命令，如下截图所示：
- en: '![ Figure 5.9 – Service with pending LoadBalancer'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.9 - 带有待处理LoadBalancer的服务'
- en: '](image/B16411_05_009.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_009.jpg)'
- en: Figure 5.9 – Service with pending LoadBalancer
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 - 带有待处理LoadBalancer的服务
- en: 'We are seeing `pending` as the status depends on the cloud provider, and it
    can take up to 5 minutes for the LoadBalancer to be provisioned. Running the `get`
    command again after some time, you can see that the IP is assigned, as shown in
    the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`pending`作为状态取决于云提供商，LoadBalancer的配置可能需要最多5分钟。一段时间后再次运行`get`命令，你会看到IP已经分配，如下截图所示：
- en: '![Figure 5.10 – The service with LoadBalancer'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10 - 带有LoadBalancer的服务'
- en: '](image/B16411_05_010.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_010.jpg)'
- en: Figure 5.10 – The service with LoadBalancer
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 - 带有LoadBalancer的服务
- en: 'To be sure that the application is working, let''s open IP `104.197.177.53`
    in the browser:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保应用程序正常工作，让我们在浏览器中打开IP `104.197.177.53`：
- en: '![Figure 5.11 – Application in the browser'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11 - 浏览器中的应用程序'
- en: '](image/B16411_05_011.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B16411_05_011.jpg)'
- en: Figure 5.11 – Application in the browser
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 - 浏览器中的应用程序
- en: Voila! Our application is accessible from the internet.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们的应用程序可以从互联网访问。
- en: Important note
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The preceding example showing how to expose the application to the internet
    is not secure, as it is using HTTP. To keep the example simple, we used HTTP,
    but real-world applications should use HTTPS only.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例显示了如何将应用程序暴露在互联网上，这并不安全，因为它使用的是HTTP。为了保持示例简单，我们使用了HTTP，但现实世界的应用程序应该只使用HTTPS。
- en: Deleting an application
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除应用程序
- en: Sometimes, you need to delete an application, so let's go over a few options
    for how to do that.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要删除一个应用程序，让我们看一下如何做到这一点的几种选项。
- en: In the previous sections, we deployed the deployment and service. Let's refresh
    our memory on what we deployed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们部署了部署和服务。让我们回顾一下我们部署了什么。
- en: 'To check the deployments, run the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查部署，请运行以下命令：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To check the active services, run the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查活动服务，请运行以下命令：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have a deployment called `nginx` and a service called `nginx`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个名为`nginx`的部署和一个名为`nginx`的服务。
- en: 'First, let''s delete the `nginx` service using the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用以下命令删除`nginx`服务：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see in the preceding screenshot, the `nginx` service was deleted,
    and the application is not exposed to the internet anymore and is safe to be deleted
    as well. To delete the `nginx` deployment, run the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的截图中所看到的，`nginx`服务已被删除，该应用程序不再暴露在互联网上，也可以安全地被删除。要删除`nginx`部署，请运行以下命令：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It is so easy to delete an application's deployed resources with a few commands.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用几个命令轻松删除应用程序的部署资源。
- en: But if you have an image where you have more than just two resources installed,
    would you run a deletion command for each resource? Of course not, there is an
    easier way to do that.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您有一个图像，其中安装了不止两个资源，您会为每个资源运行删除命令吗？当然不会，有一种更简单的方法可以做到这一点。
- en: As we have deleted the deployment and service, let's deploy them again so that
    we have something to delete again. You need to put `deployment.yaml` and `service.yaml`
    into some folder – for example, `code`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经删除了部署和服务，让我们再次部署它们，这样我们就有东西可以再次删除。您需要将`deployment.yaml`和`service.yaml`放入某个文件夹中，例如`code`。
- en: This will allow you to manage multiple resources together as multiple files
    in a directory.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您一起管理多个资源，就像在一个目录中有多个文件一样。
- en: Note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also have multiple YAML entries in a single YAML file (with the `---`
    divider).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在单个YAML文件中拥有多个YAML条目（使用`---`分隔符）。
- en: 'To install the deployment and service with the same command, run the following
    command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用相同的命令安装部署和服务，请运行以下命令：
- en: '[PRE17]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To check the deployment and service, run the following commands:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查部署和服务，请运行以下命令：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This time, we used one command to install the application, and in the same way,
    you can apply changes to the application as well, as Kubernetes is clever enough
    that it will only update the resource that was changed.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们使用了一个命令来安装应用程序，同样，您也可以对应用程序进行更改，因为Kubernetes足够聪明，它只会更新已更改的资源。
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also use one command to show a service and deployment:`kubectl get deployment`/`service`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用一个命令来显示服务和部署：`kubectl get deployment`/`service`。
- en: 'We can also use the same approach to delete the application. To delete the
    deployment and service with one command, run the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用相同的方法来删除应用程序。要使用一个命令删除部署和服务，请运行以下命令：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, we used just one command to clean up all of the application's
    installed resources.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们只使用了一个命令来清理所有已安装资源的应用程序。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to release a new application version, roll back
    an application version, assign an application to a particular node, schedule application
    replicas between different nodes, and expose an application to the internet. We
    also learned how to delete an application in a few different ways.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何发布新的应用程序版本，回滚应用程序版本，将应用程序分配给特定节点，在不同节点之间调度应用程序副本，并将应用程序暴露到互联网。我们还学习了如何以几种不同的方式删除应用程序。
- en: In the next chapter, we are going to learn how to debug an application, which
    is really important to know as it is not always the case that an application's
    releases go well.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何调试应用程序，这对于了解应用程序的发布并不总是顺利的情况非常重要。
