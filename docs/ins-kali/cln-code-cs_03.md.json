["```cs\nFakeCompany.Product.Wpf.Feature.Subnamespace {} // Product, technology and feature specific.\n```", "```cs\nFakeCompany.Wpf.Feature.Subnamespace {} /* Technology and feature specific. Can be used across multiple products. */\n```", "```cs\nFakeCompany.Core.Feature {} /* Technology agnostic and feature specific. Can be used across multiple products. */\n```", "```cs\npublic class MultipleResponsibilities() \n{\n    public string DecryptString(string text, \n     SecurityAlgorithm algorithm) \n    { \n        // ...implementation... \n    }\n\n    public string EncryptString(string text, \n     SecurityAlgorithm algorithm) \n    { \n        // ...implementation... \n    }\n\n    public string ReadTextFromFile(string filename) \n    { \n        // ...implementation... \n    }\n\n    public string SaveTextToFile(string text, string filename) \n    { \n        // ...implementation... \n    }\n}\n```", "```cs\nnamespace FakeCompany.Core.Security\n{\n    public class Cryptography\n    {    \n        public string DecryptString(string text, \n         SecurityAlgorithm algorithm) \n        { \n            // ...implementation... \n        }\n\n        public string EncryptString(string text, \n         SecurityAlgorithm algorithm) \n        { \n            // ...implementation... \n        }  \n    }\n}\n```", "```cs\nusing System;\n\nnamespace FakeCompany.Core.Security\n{\n    [Flags]\n    public enum SecurityAlgorithm\n    {\n        Aes,\n        AesCng,\n        MD5,\n        SHA5\n    }\n}\n\n```", "```cs\nnamespace FakeCompany.Core.FileSystem\n{\n    public class TextFile\n    {\n        public string ReadTextFromFile(string filename) \n        { \n            // ...implementation... \n        }\n\n        public string SaveTextToFile(string text, string filename) \n        { \n            // ...implementation... \n        }\n    }\n}\n```", "```cs\n/**********************************************************************************\n * Copyright 2019 PacktPub\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of \n * this software and associated documentation files (the \"Software\"), to deal in \n * the Software without restriction, including without limitation the rights to use, \n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \n * Software, and to permit persons to whom the Software is furnished to do so, \n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all \n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n * SOFTWARE. \n *********************************************************************************/\n\nusing System;\n\n/// <summary>\n/// The CH3.Core.Security namespace contains fundamental types used \n/// for the purpose of implementing application security.\n/// </summary>\nnamespace CH3.Core.Security\n{\n    /// <summary>\n    /// Encrypts and decrypts provided strings based on the selected \n    /// algorithm.\n    /// </summary>\n    public class Cryptography\n    {\n        /// <summary>\n        /// Decrypts a string using the selected algorithm.\n        /// </summary>\n        /// <param name=\"text\">The string to be decrypted.</param>\n        /// <param name=\"algorithm\">\n        /// The cryptographic algorithm used to decrypt the string.\n        /// </param>\n        /// <returns>Decrypted string</returns>\n        public string DecryptString(string text, \n         SecurityAlgorithm algorithm)\n        {\n            // ...implementation... \n            throw new NotImplementedException();\n        }\n\n        /// <summary>\n        /// Encrypts a string using the selected algorithm.\n        /// </summary>\n        /// <param name=\"text\">The string to encrypt.</param>\n        /// <param name=\"algorithm\">\n        /// The cryptographic algorithm used to encrypt the string.\n        /// </param>\n        /// <returns>Encrypted string</returns>\n        public string EncryptString(string text, \n         SecurityAlgorithm algorithm)\n        {\n            // ...implementation... \n            throw new NotImplementedException();\n        }\n    }\n}\n```", "```cs\nusing System.Diagnostics;\n\nnamespace CH3.Coupling\n{\n    public class TightCouplingA\n    {\n        public string _name;\n\n        public string Name\n        {\n            get\n            {\n                if (!_name.Equals(string.Empty))\n                    return _name;\n                else\n                    return \"String is empty!\";\n            }\n            set\n            {\n                if (value.Equals(string.Empty))\n                    Debug.WriteLine(\"String is empty!\");\n            }\n        }\n    }\n}\n```", "```cs\nusing System.Diagnostics;\n\nnamespace CH3.Coupling\n{\n    public class TightCouplingB\n    {\n        public TightCouplingB()\n        {\n            TightCouplingA tca = new TightCouplingA();\n            tca._name = null;\n            Debug.WriteLine(\"Name is \" + tca._name);\n        }\n    }\n}\n```", "```cs\nusing System.Diagnostics;\n\nnamespace CH3.Coupling\n{\n    public class LooseCouplingA\n    {\n        private string _name;\n        private readonly string _stringIsEmpty = \"String is empty\";\n\n        public string Name\n        {\n            get\n            {\n                if (_name.Equals(string.Empty))\n                    return _stringIsEmpty;\n                else\n                    return _name;\n            }\n\n            set\n            {\n                if (value.Equals(string.Empty))\n                    Debug.WriteLine(\"Exception: String length must be \n                     greater than zero.\");\n            }\n        }\n    }\n}\n```", "```cs\n\nusing System.Diagnostics;\n\nnamespace CH3.Coupling\n{\n    public class LooseCouplingB\n    {\n        public LooseCouplingB()\n        {\n            LooseCouplingA lca = new LooseCouplingA();\n            lca = null;\n            Debug.WriteLine($\"Name is {lca.Name}\");\n        }\n    }\n}\n```", "```cs\nnamespace CH3.Cohesion\n{\n    public class LowCohesion\n    {\n        public void ConnectToDatasource() { }\n        public void ExtractDataFromDataSource() { }\n        public void TransformDataForReport() { }\n        public void AssignDataAndGenerateReport() { }\n        public void PrintReport() { }\n        public void CloseConnectionToDataSource() { }\n    }\n}\n```", "```cs\nnamespace CH3.Cohesion\n{\n     public class Connection\n     {\n         public void ConnectToDatasource() { }\n         public void CloseConnectionToDataSource() { }\n     }\n}\n```", "```cs\nnamespace CH3.Cohesion\n{\n     public class DataProcessor\n     {\n         public void ExtractDataFromDataSource() { }\n         public void TransformDataForReport() { }\n     }\n}\n```", "```cs\nnamespace CH3.Cohesion\n{\n    public class ReportGenerator\n    {\n        public void AssignDataAndGenerateReport() { }\n        public void PrintReport() { }\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    var program = new Program();\n    program.InterfaceOrientedProgrammingExample();\n}\n\nprivate void InterfaceOrientedProgrammingExample()\n{\n    var mongoDb = new MongoDbConnection();\n    var sqlServer = new SqlServerConnection();\n    var db = new Database(mongoDb);\n    db.OpenConnection();\n    db.CloseConnection();\n    db = new Database(sqlServer);\n    db.OpenConnection();\n    db.CloseConnection();\n}\n```", "```cs\npublic interface IConnection\n{\n    void Open();\n    void Close();\n}\n```", "```cs\npublic class MongoDbConnection : IConnection\n{\n    public void Close()\n    {\n        Console.WriteLine(\"Closed MongoDB connection.\");\n    }\n\n    public void Open()\n    {\n        Console.WriteLine(\"Opened MongoDB connection.\");\n    }\n}\n```", "```cs\npublic class SqlServerConnection : IConnection\n{\n    public void Close()\n    {\n        Console.WriteLine(\"Closed SQL Server Connection.\");\n    }\n\n    public void Open()\n    {\n        Console.WriteLine(\"Opened SQL Server Connection.\");\n    }\n}\n```", "```cs\npublic class Database\n{\n    private readonly IConnection _connection;\n\n    public Database(IConnection connection)\n    {\n        _connection = connection;\n    }\n\n    public void OpenConnection()\n    {\n        _connection.Open();\n    }\n\n    public void CloseConnection()\n    {\n        _connection.Close();\n    }\n}\n```", "```cs\nOpened MongoDB connection.\nClosed MongoDB connection.\nOpened SQL Server Connection.\nClosed SQL Server Connection.\n```", "```cs\nnamespace CH3.DependencyInjection\n{\n     public interface ILogger\n     {\n         void OutputMessage(string message);\n     }\n}\n```", "```cs\nusing System;\n\nnamespace CH3.DependencyInjection\n{\n    public class TextFileLogger : ILogger\n    {\n        public void OutputMessage(string message)\n        {\n            System.IO.File.WriteAllText(FileName(), message);\n        }\n\n        private string FileName()\n        {\n            var timestamp = DateTime.Now.ToFileTimeUtc().ToString();\n            var path = Environment.GetFolderPath(Environment\n             .SpecialFolder.MyDocuments);\n            return $\"{path}_{timestamp}\";\n        }\n    }\n}\n```", "```cs\nnamespace CH3.DependencyInjection\n{\n     public class Worker\n     {\n         private ILogger _logger;\n\n         public Worker(ILogger logger)\n         {\n             _logger = logger;\n             _logger.OutputMessage(\"This constructor has been injected \n              with a logger!\");\n         }\n\n         public void DoSomeWork(ILogger logger)\n         {\n             logger.OutputMessage(\"This methods has been injected \n              with a logger!\");\n         }\n     }\n}\n```", "```cs\n        private void DependencyInject()\n        {\n            var logger = new TextFileLogger();\n            var di = new Worker(logger);\n            di.DoSomeWork(logger);\n        }\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace CH3.InversionOfControl\n{\n    public class Container\n    {\n        public delegate object Creator(Container container);\n\n        private readonly Dictionary<string, object> configuration = new \n         Dictionary<string, object>();\n        private readonly Dictionary<Type, Creator> typeToCreator = new \n         Dictionary<Type, Creator>();\n\n        public Dictionary<string, object> Configuration\n        {\n            get { return configuration; }\n        }\n\n        public void Register<T>(Creator creator)\n        {\n            typeToCreator.Add(typeof(T), creator);\n        }\n\n        public T Create<T>()\n        {\n            return (T)typeToCreator[typeof(T)](this);\n        }\n\n        public T GetConfiguration<T>(string name)\n        {\n            return (T)configuration[name];\n        }\n    }\n}\n```", "```cs\nprivate void InversionOfControl()\n{\n    Container container = new Container();\n    container.Configuration[\"message\"] = \"Hello World!\";\n    container.Register<ILogger>(delegate\n    {\n        return new TextFileLogger();\n    });\n    container.Register<Worker>(delegate\n    {\n        return new Worker(container.Create<ILogger>());\n    });\n}\n```", "```cs\nreport.Database.Connection.Open(); // Breaks the Law of Demeter.\n```", "```cs\nnamespace CH3.LawOfDemeter\n{\n    public class Connection\n    {\n        public void Open()\n        {\n            // ... implementation ...\n        }\n    }\n}\n```", "```cs\nnamespace CH3.LawOfDemeter\n{\n    public class Database\n    {\n        public Database()\n        {\n            Connection = new Connection();\n        }\n\n        public Connection Connection { get; set; }\n\n        public void OpenConnection()\n        {\n            Connection.Open();\n        }\n    }\n}\n```", "```cs\nnamespace CH3.LawOfDemeter\n{\n    public class Report\n    {\n        public Report()\n        {\n            Database = new Database();\n        }\n\n        public Database Database { get; set; }\n\n        public void OpenConnection()\n        {\n            Database.OpenConnection();\n        }\n    }\n}\n```", "```cs\nnamespace CH3.LawOfDemeter\n{\n    public class Example\n    {\n        public void BadExample_Chaining()\n        {\n            var report = new Report();\n            report.Database.Connection.Open();\n        }\n\n        public void GoodExample()\n        {\n            var report = new Report();\n            report.OpenConnection();\n        }\n    }\n}\n```", "```cs\nnamespace CH3.ImmutableObjectsAndDataStructures\n{\n    public class Person\n    {\n        private readonly int _id;\n        private readonly string _firstName;\n        private readonly string _lastName;\n\n        public int Id => _id;\n        public string FirstName => _firstName;\n        public string LastName => _lastName;\n        public string FullName => $\"{_firstName} {_lastName}\";\n        public string FullNameReversed => $\"{_lastName}, {_firstName}\";\n\n        public Person(int id, string firstName, string lastName)\n        {\n            _id = id;\n            _firstName = firstName;\n            _lastName = lastName;\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace CH3.Encapsulation\n{\n    public class Car\n    {\n        private string _make;\n        private string _model;\n        private int _year;\n\n        public Car(string make, string model, int year)\n        {\n            _make = ValidateMake(make);\n            _model = ValidateModel(model);\n            _year = ValidateYear(year);\n        }\n\n        private string ValidateMake(string make)\n        {\n            if (make.Length >= 3)\n                return make;\n            throw new ArgumentException(\"Make must be three \n             characters or more.\");\n        }\n\n        public string Make\n        {\n            get { return _make; }\n            set { _make = ValidateMake(value); }\n        }\n\n        // Other methods and properties omitted for brevity.\n    }\n}\n```", "```cs\nnamespace CH3.Encapsulation\n{\n    public struct Person\n    {\n        public int Id { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n\n        public Person(int id, string firstName, string lastName)\n        {\n            Id = id;\n            FirstName = firstName;\n            LastName = lastName;\n        }\n    }\n}\n```"]