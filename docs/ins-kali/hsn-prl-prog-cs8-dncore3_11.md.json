["```cs\nprivate static void Log(string message)\n{\n    //Simulate long running method\n    Thread.Sleep(5000);\n    //Log to file or database\n    Console.WriteLine(\"Logging done\");\n}\n```", "```cs\n  static void Main(string[] args)\n  {\n     Console.WriteLine(\"Starting program\");\n     Log(\"this information need to be logged\");\n     Console.WriteLine(\"Press any key to exit\");\n     Console.ReadLine();\n  }       \n```", "```cs\n//Log(\"this information need to be logged\");\nAction logAction = new Action(()=> Log(\"this information need to be logged\"));                 logAction.BeginInvoke(null,null);\n```", "```cs\n// Log(\"this information need to be logged\");\nTask.Factory.StartNew(()=> Log(\"this information need to be logged\"));\n```", "```cs\nAsyncCallback callback = new AsyncCallback(MyCallback);\n```", "```cs\nSumDelegate d = new SumDelegate(Add);\nd.BeginInvoke(100, 200, callback, state);\n```", "```cs\nAsyncResult ar = (AsyncResult)result;\n```", "```cs\nint i = d.EndInvoke(result);\n```", "```cs\nusing System.Runtime.Remoting.Messaging;\npublic delegate int SumDelegate(int x, int y);\n\nstatic void Main(string[] args)\n{\n    AsyncCallback callback = new AsyncCallback(MyCallback);\n    int state = 1000;\n    SumDelegate d = new SumDelegate(Add);\n    d.BeginInvoke(100, 200, callback, state);\n    Console.WriteLine(\"Press any key to exit\");\n    Console.ReadLine();\n}\npublic static int Add(int a, int b)\n{\n    return a + b;\n}\npublic static void MyCallback(IAsyncResult result)\n{\n    AsyncResult ar = (AsyncResult)result;\n    SumDelegate d = (SumDelegate)ar.AsyncDelegate;\n    int state = (int)ar.AsyncState;\n    int i = d.EndInvoke(result);\n    Console.WriteLine(i);\n    Console.WriteLine(state);\n    Console.ReadLine();\n}\n```", "```cs\nFileInfo fi = new FileInfo(\"test.txt\");\n            byte[] data = new byte[fi.Length];\n            FileStream fs = new FileStream(\"test.txt\", FileMode.Open, FileAccess.Read, FileShare.Read, data.Length, true);\n            // We still pass null for the last parameter because\n            // the state variable is visible to the continuation delegate.\n            Task<int> task = Task<int>.Factory.FromAsync(\n                    fs.BeginRead, fs.EndRead, data, 0, data.Length, null);\n            int result = task.Result;\n            Console.WriteLine(result);\n```"]