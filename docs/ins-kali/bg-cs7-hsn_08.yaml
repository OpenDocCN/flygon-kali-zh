- en: Anonymous Methods and Objects That Run Their Own Delegates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名方法和运行其自己委托的对象
- en: In this chapter, we will talk about anonymous functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论匿名函数。
- en: Adding a Show Results button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将“显示结果”按钮添加到HTML
- en: Open up a project and, inside the <html>, put in a single button that says `Show
    Results`. For this, go to the Toolbox and grab a `Button` control. Drag and drop
    it below the line beginning with `<form id=...`. You can delete the `<div>` lines,
    as you don't need them. Be sure to insert a `<br>` tag at the end of the Button
    line.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，在<html>标签内放入一个写着“显示结果”的按钮。为此，转到工具箱并获取一个“按钮”控件。将其拖放到以<form id=...开头的行下方。您可以删除<div>行，因为您不需要它们。确保在按钮行的末尾插入<br>标记。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we will display some results to the user. To do this, go to the Design
    view, and double-click on the Show Results button. This takes us into `Default.aspx.cs`.
    Delete the `Page_Load` block. The relevant portion of the starting code for this
    project should look like *Figure 8.3.1*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向用户显示一些结果。要做到这一点，请转到设计视图，并双击“显示结果”按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。该项目的起始代码的相关部分应如*图8.3.1*所示：
- en: '![](img/5c3e6ab4-f981-44b0-a56b-8fa6525375d9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c3e6ab4-f981-44b0-a56b-8fa6525375d9.png)'
- en: 'Figure 8.3.1: The starting code section for this project'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3.1：该项目的起始代码部分
- en: Streamlining writing functions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化编写函数
- en: 'Within the body, but above the line beginning with `protected void Button1_Click...`,
    enter the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在主体内，但在以`protected void Button1_Click...`开头的行之上，输入以下内容：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Remember, `=>` is an *expression member*. It's a function. In other words, it
    takes the form of a Lambda. At the end of the line, we return `x * x`. As you
    can see, this is a very streamlined way of writing functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`=>`是一个*表达式成员*。它是一个函数。换句话说，它采用Lambda的形式。在行的末尾，我们返回`x * x`。正如您所看到的，这是编写函数的一种非常简化的方式。
- en: 'Next, we need to add namespaces. So, after `using System`, enter the following
    lines:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加命名空间。因此，在“using System”之后，输入以下行：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, within the event for the button, we will place the following code list;
    so, enter this line between a set of curly braces underneath the line beginning
    with `protected void Button1_Click...`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在按钮的事件内，我们将放置以下代码列表；因此，在以`protected void Button1_Click...`开头的行下方的一组大括号之间输入此行：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this line, you are making a new list of `double` data type and then you will
    initialize it. You can do this a couple of ways, but you can just write an array
    and then enter some values. It doesn't really matter what they are. This will
    make a list of `double` data types.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，您正在创建一个新的`double`数据类型列表，然后将对其进行初始化。您可以以几种方式做到这一点，但您可以只需编写一个数组，然后输入一些值。这些值并不重要。这将创建一个`double`数据类型的列表。
- en: Performing an action on all of the values
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对所有值执行操作
- en: 'Now, one thing that you can do is to perform an action on all the values. So,
    the way to do that is to enter the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以对所有值执行操作。因此，要执行此操作，输入以下内容：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is how you can call `ShowSquare` on each value. Notice that, in this case,
    `ShowSquare` is named. `ShowSquare` represents this expression, `sampLabel.Text
    += "<br>" + (x * x)`; so it's a *named quantity*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何对每个值调用`ShowSquare`的方法。请注意，在这种情况下，`ShowSquare`是有名字的。`ShowSquare`代表这个表达式，`sampLabel.Text
    += "<br>" + (x * x)`；所以它是一个*有名字的数量*。
- en: Making an anonymous function or method
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建匿名函数或方法
- en: 'Now, if you want, you can also do stuff that does not involve names. For example,
    you can enter the following next:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您愿意，您还可以做一些不涉及名称的事情。例如，您可以输入以下内容：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we''ll define the body, or the logic, between a set of curly braces.
    This is a nameless or *anonymous* one. For example, you can enter the following
    below this line (notice that you close with a parenthesis and semicolon after
    the closed curly brace):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义一组大括号之间的主体或逻辑。这是一个无名或*匿名*的。例如，您可以在此行下方输入以下内容（请注意，在关闭大括号后用括号和分号结束）：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This one does something similar to the previous line. The only difference is
    that we are not calling anything named; we are just defining an *anonymous function*,
    a nameless function using a `delegate` keyword. This does accept one value, of
    course, the `x` value. Then you cube the `x` value; `Math.Pow(x, 3)` means, cube
    it and then display it on the label using `+=` to append and `<br>` to push down
    a line, as usual.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行与前一行做的事情类似。唯一的区别是我们没有调用任何有名字的东西；我们只是使用`delegate`关键字定义了一个*匿名函数*，一个无名函数。当然，这会接受一个值，即`x`值。然后你对`x`值进行立方；`Math.Pow(x,
    3)`的意思是，立方然后使用`+=`将其附加到标签上，并使用`<br>`将其推到下一行，如常规操作。
- en: 'Now, in the next stage, you can also do stuff such as the following, which
    is quite interesting:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一个阶段，您还可以执行以下操作，这是非常有趣的：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Believe it or not, though it isn't recommended, after `new Thread` you can even
    can type `dele` instead of `delegate`, in this case.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，虽然这并不被推荐，但在`new Thread`之后，您甚至可以输入`dele`而不是`delegate`。
- en: 'Now, when you make an object of this type, you can also create a delegate.
    So, when you make this `Thread` object, you''re also making an anonymous function.
    In other words, you''re sending a piece of processing so that it runs on its own
    thread, and then you can stick in stuff such as the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您创建这种类型的对象时，您还可以创建一个委托。因此，当您创建这个`Thread`对象时，您也在创建一个匿名函数。换句话说，您正在发送一段处理，以便它在自己的线程上运行，然后您可以插入以下内容：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note again that here you close with a parenthesis and semicolon after the closing
    curly brace.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，在这里，您在关闭大括号后用括号和分号结束。
- en: Starting a thread
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动线程
- en: 'Now, with threads like this, you get a thread started on the next line as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，像这样使用线程，您可以在下一行启动一个线程，如下所示：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will start the thread in its own little separate piece of processing, separate
    from the main program so to speak.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在自己的小独立处理中启动线程，与主程序分开。
- en: So, the big idea here is that this anonymous stuff is quite powerful. For example,
    you can build an anonymous function or method such as the preceding one we created.
    It runs, but it's not named, and basically, even when you make a new `Thread`
    object, you can make a delegate. In other words, it can do a bit of processing
    of its own and you don't have to put this off into other functions or anything
    like that.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这里的重要思想是，这种匿名的东西非常强大。例如，您可以构建一个匿名函数或方法，就像我们创建的前面的那个一样。它可以运行，但没有命名，基本上，即使您创建了一个新的`Thread`对象，也可以创建一个委托。换句话说，它可以进行一些自己的处理，您不必将其放入其他函数或任何其他地方。
- en: Running and modifying the program
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行和修改程序
- en: 'Now, let''s run the program. For this, crank it up in your browser and click
    on the Show Results button. Take a look at the results, as shown in *Figure 8.3.2*.
    There''s one slight issue with the program as it''s written. We will learn the
    reason for this problem momentarily and then fix it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行程序。为此，请在浏览器中启动并单击“显示结果”按钮。查看结果，如*图8.3.2*所示。程序存在一个小问题。我们将很快了解问题的原因，然后解决它：
- en: '![](img/29bb8c4b-27c0-43d0-840b-428fae631693.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29bb8c4b-27c0-43d0-840b-428fae631693.png)'
- en: 'Figure 8.3.2: The initial run of our program'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3.2：我们程序的初始运行
- en: 'Now, there''s one more function I want to tell you about, `Join`. Enter the
    following as the next line:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我还想告诉您另一个函数，`Join`。输入以下内容作为下一行：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, if you hover your mouse over `Join`, the pop-up tip says Blocks the calling
    thread until the thread terminates, while continuing to perform standard COM and
    Send, Message Pumping. If you hover your mouse over `Start`, the pop-up tip says
    Causes the operating system to change the state of the current instance to ThreadState.Running.
    In other words, in the `Thread td = new Thread(delegate ()` block, `Thread` is
    an object. In this case, you're making a new thread that has a delegate, so it
    runs off in its own thread of processing, away from the main program. So, it's
    kind of interesting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您将鼠标悬停在`Join`上，弹出提示会说阻止调用线程，直到线程终止，同时继续执行标准COM和Send，消息泵。如果您将鼠标悬停在`Start`上，弹出提示会说导致操作系统将当前实例的状态更改为ThreadState.Running。换句话说，在`Thread
    td = new Thread(delegate ()`块中，`Thread`是一个对象。在这种情况下，您正在创建一个具有委托的新线程，因此它在自己的处理线程中运行，远离主程序。所以，这有点有趣。
- en: 'Now, notice that, when we printed that stuff, there were only really two main
    lists, with the second one essentially appended to the first. So, let''s do it
    this way; otherwise, we will not be able to see the effect clearly. Under the
    preceding `vals.ForEach(ShowSquare)` line, enter the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请注意，当我们打印这些内容时，实际上只有两个主要列表，第二个列表基本上附加到第一个列表上。因此，让我们这样做；否则，我们将无法清楚地看到效果。在前面的`vals.ForEach(ShowSquare)`行下面，输入以下内容：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that I separated this with a long-dashed line in quotes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我用引号中的长破折号分隔了这一点。
- en: Next, after this one, let's do one more beneath the closing curly brace, parenthesis,
    and semicolon after the `sampLabel.Text += "<br>" + Math.Pow(x, 3)` line.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在这个之后，让我们在`sampLabel.Text += "<br>" + Math.Pow(x, 3)`行的闭合大括号、括号和分号下面再做一次。
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, if we remove `td.Join()` and run the program, there are only two lists,
    as shown in *Figure 8.3.3*. There should be three of them, however:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们删除`td.Join()`并运行程序，只有两个列表，如*图8.3.3*所示。然而应该有三个：
- en: '![](img/17558de6-54b0-4090-920b-9d6680e25bc4.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17558de6-54b0-4090-920b-9d6680e25bc4.png)'
- en: 'Figure 8.3.3: The modified run shows only two lists'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3.3：修改后的运行只显示两个列表
- en: 'So re-insert `td.Join();` and take a look at it again in your browser. Now,
    as you can see in *Figure 8.3.4*, there are three lists, as there should be:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，重新插入`td.Join();`并在浏览器中再次查看。现在，正如*图8.3.4*所示，有三个列表，正如应该有的那样：
- en: '![](img/edad6c9e-7354-4175-b7c8-4022410045a5.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edad6c9e-7354-4175-b7c8-4022410045a5.png)'
- en: 'Figure 8.3.4: The final program run shows three separate lists'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3.4：最终程序运行显示三个单独的列表
- en: 'Again to review, we did the following in this program:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 再次回顾，我们在本程序中做了以下工作：
- en: First, we called the `vals.ForEach(ShowSquare)` bit, which generates a list.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们调用了`vals.ForEach(ShowSquare)`，生成了一个列表。
- en: Then we called the block beginning with `vals.ForEach(delegate (double x)`,
    as an anonymous function or method that generates a list.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们调用了以`vals.ForEach(delegate (double x)`开头的块，作为生成列表的匿名函数或方法。
- en: Next, with the block beginning with `Thread td = new Thread(delegate ()`, we
    created this anonymous object called `td`, which is a `Thread` class that has
    its own anonymous method inside, which runs in its own separate thread.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用以`Thread td = new Thread(delegate ()`开头的块创建了这个匿名对象`td`，它是一个具有自己匿名方法的`Thread`类，运行在自己独立的线程中。
- en: Finally, we started it, and the `Join` function blocks the current thread, waiting
    for the `Thread td = new Thread(delegate ()` block to execute, and then it resumed,
    so that everything was displayed.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们启动了它，`Join`函数阻塞当前线程，等待`Thread td = new Thread(delegate ()`块执行，然后恢复，这样就显示了所有内容。
- en: These are the fundamentals of anonymous constructs of this kind.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是这种匿名构造的基础知识。
- en: Chapter review
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释的本章`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about anonymous functions. You streamlined writing
    functions, performed an action on all of the values, made an anonymous function
    or method, and started a thread.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了匿名函数。您简化了编写函数，对所有值执行了操作，创建了匿名函数或方法，并启动了一个线程。
- en: 'In the next chapter, we will take a look at the basics of languages: Language
    Integrated Query. It''s a powerful way of manipulating data directly within your
    C# code.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍语言的基础知识：语言集成查询。这是一种在C#代码中直接操作数据的强大方式。
