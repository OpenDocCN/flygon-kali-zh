["```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 90\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5)) \ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0 if price_hist[-1] > price_hist.mean() else 0.0) \ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2000-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 90 \n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0rolling_mean_short_term = \\\n\u00a0\u00a0\u00a0\u00a0price_hist.rolling(window=45, center=False).mean()\n\u00a0\u00a0\u00a0\u00a0rolling_mean_long_term = \\\n\u00a0\u00a0\u00a0\u00a0price_hist.rolling(window=90, center=False).mean()\n\n\u00a0\u00a0\u00a0\u00a0if rolling_mean_short_term[-1] > rolling_mean_long_term[-1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif rolling_mean_short_term[-1] < rolling_mean_long_term[-1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\u00a0\u00a0\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2000-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 90\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0rolling_mean_short_term = \\\n\u00a0\u00a0\u00a0\u00a0price_hist.ewm(span=5, adjust=True,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ignore_na=True).mean()\n\u00a0\u00a0\u00a0\u00a0rolling_mean_long_term = \\\n\u00a0\u00a0\u00a0\u00a0price_hist.ewm(span=30, adjust=True, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ignore_na=True).mean()\n\n\u00a0\u00a0\u00a0\u00a0if rolling_mean_short_term[-1] > rolling_mean_long_term[-1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif rolling_mean_short_term[-1] < rolling_mean_long_term[-1]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\u00a0\u00a0\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2000-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\npip install stockstats\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nfrom stockstats import StockDataFrame as sdf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 20\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"open\", \"high\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"low\",\"close\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0stock=sdf.retype(price_hist)\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0rsi = stock.get('rsi_12')\n\n\u00a0\u00a0\u00a0\u00a0if rsi[-1] > 90:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif rsi[-1] < 10:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\n\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2015-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nfrom stockstats import StockDataFrame as sdf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 20\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"open\",\"high\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"low\",\"close\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0stock=sdf.retype(price_hist)\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0signal = stock['macds']\n\u00a0\u00a0\u00a0\u00a0macd\u00a0\u00a0\u00a0= stock['macd'] \n\n\u00a0\u00a0\u00a0\u00a0if macd[-1] > signal[-1] and macd[-2] <= signal[-2]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif macd[-1] < signal[-1] and macd[-2] >= signal[-2]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\n\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2015-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nfrom stockstats import StockDataFrame as sdf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('MSFT')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 20\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"open\", \"high\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"low\",\"close\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0stock=sdf.retype(price_hist)\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0rsi = stock.get('rsi_12')\n\n\u00a0\u00a0\u00a0\u00a0signal = stock['macds']\n\u00a0\u00a0\u00a0\u00a0macd\u00a0\u00a0\u00a0= stock['macd'] \n\n\u00a0\u00a0\u00a0\u00a0if rsi[-1] < 50 and macd[-1] > signal[-1] and macd[-2] <= signal[-2]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif rsi[-1] > 50 and macd[-1] < signal[-1] and macd[-2] >= signal[-2]:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\n\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2015-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nfrom stockstats import StockDataFrame as sdf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('MSFT')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 20\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"open\",\"high\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"low\",\"close\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0stock=sdf.retype(price_hist)\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0trix = stock.get('trix')\n\n\u00a0\u00a0\u00a0\u00a0if trix[-1] > 0 and trix[-2] < 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif trix[-1] < 0 and trix[-2] > 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\n\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2015-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nfrom stockstats import StockDataFrame as sdf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('MSFT')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 20\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[\"open\", \"high\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"low\",\"close\"], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0stock=sdf.retype(price_hist)\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0wr = stock.get('wr_6')\n\n\u00a0\u00a0\u00a0\u00a0if wr[-1] < 10:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif wr[-1] > 90:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\n\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2015-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('DG')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 20 \n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0middle_base_line = price_hist.mean()\n\u00a0\u00a0\u00a0\u00a0std_line =\u00a0\u00a0price_hist.std()\n\u00a0\u00a0\u00a0\u00a0lower_band = middle_base_line - 2 * std_line\n\u00a0\u00a0\u00a0\u00a0upper_band = middle_base_line + 2 * std_line\n\n\u00a0\u00a0\u00a0\u00a0if price_hist[-1] < lower_band:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0)\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0elif price_hist[-1] > upper_band:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0)\u00a0\u00a0\u00a0\u00a0\u00a0\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2000-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nimport numpy as np\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import coint\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock_x = symbol('PEP')\n\u00a0\u00a0\u00a0\u00a0context.stock_y = symbol('KO')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 500\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0context.i = 0\n\ndef handle_data(context, data):\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0context.i += 1\n\u00a0\u00a0\u00a0\u00a0if context.i < context.rolling_window:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x_price = data.history(context.stock_x, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window,\"1d\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = np.log(x_price)\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y_price = data.history(context.stock_y, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window,\"1d\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = np.log(y_price)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_, p_value, _\u00a0\u00a0= coint(x, y)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if p_value < .9:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slope, intercept = sm.OLS(y, sm.add_constant(x, prepend=True)).fit().params\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spread = y - (slope * x + intercept)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0zscore = (\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spread[-1] - spread.mean()) / spread.std()\u00a0\u00a0\u00a0\u00a0\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if -1 < zscore < 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0side = np.copysign(0.5, zscore)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock_y, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-side * 100 / y_price[-1])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock_x,\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0side * slope*100/x_price[-1])\n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2015-1-1', utc=True)\nend_date = pd.to_datetime('2018-01-01', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission, schedule_function, date_rules, time_rules\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nfrom scipy.optimize import minimize\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stocks = [symbol('DIS'), symbol('WMT'), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('DOW'), symbol('CRM'), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('NKE'), symbol('HD'), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('V'), symbol('MSFT'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('MMM'), symbol('CSCO'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('KO'), symbol('AAPL'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('HON'), symbol('JNJ'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('TRV'), symbol('PG'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('CVX'), symbol('VZ'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('CAT'), symbol('BA'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('AMGN'), symbol('IBM'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('AXP'), symbol('JPM'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('WBA'), symbol('MCD'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('MRK'), symbol('GS'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol('UNH'), symbol('INTC')]\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 200\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\n\u00a0\u00a0\u00a0\u00a0schedule_function(handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0date_rules.month_end(), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time_rules.market_open(hours=1))\n\ndef minimum_vol_obj(wo, cov):\n\u00a0\u00a0\u00a0\u00a0w = wo.reshape(-1, 1)\n\u00a0\u00a0\u00a0\u00a0sig_p = np.sqrt(np.matmul(w.T, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.matmul(cov, w)))[0, 0]\n\u00a0\u00a0\u00a0\u00a0return sig_p\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0n_stocks = len(context.stocks)\n\u00a0\u00a0\u00a0\u00a0prices = None\n\n\u00a0\u00a0\u00a0\u00a0for i in range(n_stocks):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price_history = \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data.history(context.stocks[i], \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price = np.array(price_history)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if prices is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prices = price\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prices = np.c_[prices, price]\n\n\u00a0\u00a0\u00a0\u00a0rets = prices[1:,:]/prices[0:-1, :]-1.0\n\u00a0\u00a0\u00a0\u00a0mu = np.mean(rets, axis=0)\n\u00a0\u00a0\u00a0\u00a0cov = np.cov(rets.T)\u00a0\u00a0\u00a0\u00a0\n\n\u00a0\u00a0\u00a0\u00a0w0 = np.ones(n_stocks) / n_stocks\n\n\u00a0\u00a0\u00a0\u00a0cons = ({'type': 'eq', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'fun': lambda w: np.sum(w) - 1.0}, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'type': 'ineq', 'fun': lambda w: w})\n\u00a0\u00a0\u00a0\u00a0TOL = 1e-12\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0res = minimize(minimum_vol_obj, w0, args=cov, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0method='SLSQP', constraints=cons, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tol=TOL, options={'disp': False})\n\n\u00a0\u00a0\u00a0\u00a0if not res.success:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n\n\u00a0\u00a0\u00a0\u00a0w = res.x\n\n\u00a0\u00a0\u00a0\u00a0for i in range(n_stocks):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stocks[i], w[i])\u00a0\u00a0\u00a0\u00a0\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2010-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\npip install PyPortfolioOpt\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbols, set_commission, schedule_function, date_rules, time_rules\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nimport numpy as np\nfrom pypfopt.efficient_frontier import EfficientFrontier\nfrom pypfopt import risk_models\nfrom pypfopt import expected_returns\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stocks = \\\n\u00a0\u00a0\u00a0\u00a0symbols('DIS','WMT','DOW','CRM','NKE','HD','V','MSFT',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'MMM','CSCO','KO','AAPL','HON','JNJ','TRV',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'PG','CVX','VZ','CAT','BA','AMGN','IBM','AXP',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'JPM','WBA','MCD','MRK','GS','UNH','INTC')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 252\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5))\n\u00a0\u00a0\u00a0\u00a0schedule_function(handle_data, date_rules.month_end(), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time_rules.market_open(hours=1))\n\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0prices_history = data.history(context.stocks, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"1d\")\n\u00a0\u00a0\u00a0\u00a0avg_returns = \\\n\u00a0\u00a0\u00a0\u00a0expected_returns.mean_historical_return(prices_history)\n\u00a0\u00a0\u00a0\u00a0cov_mat = risk_models.sample_cov(prices_history)\n\u00a0\u00a0\u00a0\u00a0efficient_frontier = EfficientFrontier(avg_returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cov_mat)\n\u00a0\u00a0\u00a0\u00a0weights = efficient_frontier.max_sharpe()\n\u00a0\u00a0\u00a0\u00a0cleaned_weights = efficient_frontier.clean_weights()\n\n\u00a0\u00a0\u00a0\u00a0for stock in context.stocks:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(stock, cleaned_weights[stock])\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2010-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nimport pmdarima as pm\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 90\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5)) \ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0model = pm.auto_arima(price_hist, seasonal=True)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forecasts = model.predict(7)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0 if price_hist[-1] < forecasts[-1] else 0.0) \n\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2017-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\n%matplotlib inline\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol, set_commission\nfrom zipline.finance.commission import PerTrade\nimport pandas as pd\nimport pyfolio as pf\nfrom fbprophet import Prophet\nimport logging\nlogging.getLogger('fbprophet').setLevel(logging.WARNING)\nimport warnings\nwarnings.filterwarnings('ignore')\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 90\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5)) \ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\n\u00a0\u00a0\u00a0\u00a0price_df = pd.DataFrame({'y' : price_hist}).rename_axis('ds').reset_index()\n\u00a0\u00a0\u00a0\u00a0price_df['ds'] = price_df['ds'].dt.tz_convert(None)\n\n\u00a0\u00a0\u00a0\u00a0model = Prophet()\n\u00a0\u00a0\u00a0\u00a0model.fit(price_df)\n\u00a0\u00a0\u00a0\u00a0df_forecast = model.make_future_dataframe(periods=7, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq='D')\n\u00a0\u00a0\u00a0\u00a0df_forecast = model.predict(df_forecast)\n\n\u00a0\u00a0\u00a0\u00a0last_price=price_hist[-1]\n\u00a0\u00a0\u00a0\u00a0forecast_lower=df_forecast['yhat_lower'].iloc[-1]\n\u00a0\u00a0\u00a0\u00a0forecast_upper=df_forecast['yhat_upper'].iloc[-1]\n\n\u00a0\u00a0\u00a0\u00a0if last_price < forecast_lower:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0) \n\u00a0\u00a0\u00a0\u00a0elif last_price > forecast_upper:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 0.0) \ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('2017-1-1', utc=True)\nend_date = pd.to_datetime('2018-1-1', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```"]