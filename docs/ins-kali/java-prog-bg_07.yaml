- en: More Object-Oriented Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多面向对象的Java
- en: In this chapter, we're going to explore the topic of inheritance in Java by
    creating a superclass and subclass and understanding the relationship of "is-a"
    between them, using concepts such as overriding, data structures, the abstract
    method, and the protected method. We'll also delve into the concept of an Abstract
    class.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过创建超类和子类，理解它们之间的“is-a”关系，使用覆盖、数据结构、抽象方法和受保护方法等概念，来探讨Java中的继承。
- en: 'We''ll cover the following concepts in detail:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍以下概念：
- en: Inheritance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承
- en: Abstract
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象
- en: Inheritance
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: Rather than starting with a high-level description, I think it'll be best if
    we jump right into a problem.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与其从一个高层描述开始，我认为最好的方法是我们直接解决一个问题。
- en: 'To get us started, I''ve created a basic Java program, which we can access
    from the given code files. In this program, we declare two Java classes: a `Book`
    class and a `Poem` class. Both the `Book` and `Poem` classes store a number of
    attributes; for example, Book can have a title, an author, a publisher, and a
    genre. It takes all these attributes as constructor input and provides a single
    `public` method; we can use the `Print` method in our main program to print out
    information about any books we create.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们开始，我创建了一个基本的Java程序，我们可以从给定的代码文件中访问。在这个程序中，我们声明了两个Java类：一个`Book`类和一个`Poem`类。`Book`和`Poem`类都存储了许多属性；例如，Book可以有一个标题，一个作者，一个出版商和一个流派。它将所有这些属性作为构造函数输入，并提供一个`public`方法；我们可以在我们的主程序中使用`Print`方法来打印出我们创建的任何书籍的信息。
- en: 'The Poem method does something very similar. It has a couple of attributes
    and a `Print` method, and we set its attributes through its constructor. I''ve
    whipped up a really quick main function to utilize the `Book` and `Poem` classes.
    This function creates a new book and poem and then prints them out:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 诗歌方法做的事情非常相似。它有一些属性和一个`Print`方法，我们通过它的构造函数设置它的属性。我匆匆忙忙地写了一个利用`Book`和`Poem`类的主函数。这个函数创建了一本新书和一首新诗，然后将它们打印出来：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding program works fine, but it's much more complicated than it needs
    to be.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序运行良好，但比必要的要复杂得多。
- en: 'If we take a look at our `Book` and `Poem` classes side by side and just look
    at their member variables, we''ll see that both `Book` and `Poem` share two member
    variables, namely `title` and `author`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们一起看看我们的`Book`和`Poem`类，并只看它们的成员变量，我们会发现`Book`和`Poem`都共享两个成员变量，即`title`和`author`：
- en: '![](img/b9086a15-f8b6-4599-808e-fdf716624758.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9086a15-f8b6-4599-808e-fdf716624758.png)'
- en: 'The actions they take with the member variables, namely printing them to the
    screen, are performed and achieved in a very similar manner in both classes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 他们对成员变量所采取的操作，即将它们打印到屏幕上，都是以非常相似的方式在两个类中执行和实现的：
- en: '![](img/4816972c-9adc-4bb7-91d4-3ca04ae260cd.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4816972c-9adc-4bb7-91d4-3ca04ae260cd.png)'
- en: It's a good sign that `Book` and `Poem` inherit from one common class. This
    becomes easy for us to see when we think about books and poems as the physical
    objects that they represent. We can make the statement that both books and poems
    are forms of literature.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Book`和`Poem`从一个共同的类继承是一个好迹象。当我们将书籍和诗歌视为它们所代表的物体时，我们很容易看到这一点。我们可以说书籍和诗歌都是文学形式。'
- en: Creating a superclass
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个超类
- en: 'Once we''ve come to the conclusion that books and poems share certain fundamental
    attributes, the attributes of all literature, we can start breaking down these
    classes into component parts. Our `Book` class, for example, has two real variables.
    It has a `title` variable and an `author` variable, which are attributes we associate
    with all literature. It also has a `publisher` variable and a `genre` variable,
    which may not be unique only to books and which we don''t necessarily consider
    all forms of literature to have. So how can we exploit this knowledge? Well, we
    can build our `Book` and `Poem` classes so that they share their nature as pieces
    of literature at a fundamental level. But to make this happen, we''re first going
    to have to teach our program what a piece of literature is. The following is a
    step-by-step procedure for doing this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得出结论，即书籍和诗歌共享某些基本属性，所有文学作品的属性，我们就可以开始将这些类分解为组成部分。例如，我们的`Book`类有两个真实变量。它有一个`title`变量和一个`author`变量，这些是我们与所有文学作品相关联的属性。它还有一个`publisher`变量和一个`genre`变量，这些可能不仅仅是书籍独有的，我们也不一定认为所有形式的文学作品都具有这些属性。那么我们如何利用这些知识呢？嗯，我们可以构建我们的`Book`和`Poem`类，使它们在基本层面上共享它们作为文学作品的本质。但是，要实现这一点，我们首先需要教会我们的程序什么是一部文学作品。以下是一个逐步的过程：
- en: We'll create a brand new class and call it `Literature`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个全新的类，并将其命名为`Literature`。
- en: 'We''ll assign to this class the attributes that the pieces of literature share,
    which we''ve so far declared. In our case, books and poems are already declared
    as pieces, with shared titles and authors. It makes some logical sense to make
    a statement that all pieces of literature will have a title and an author:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为这个类分配我们迄今为止声明的文学作品共享的属性。在我们的情况下，书籍和诗歌已经被声明为作品，具有共享的标题和作者。将所有文学作品都具有标题和作者是有一定逻辑意义的：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'From here, we''ll flesh out our `Literature` class like we would any other.
    We''ll give it a constructor; in this case, our constructor will take two variables:
    `title` and `author`. Then, we''ll assign them to the fields, much like we did
    with our `Poem` and `Book` classes:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，我们将像处理任何其他类一样完善我们的`Literature`类。我们将给它一个构造函数；在这种情况下，我们的构造函数将接受两个变量：`title`和`author`。然后，我们将它们分配给字段，就像我们对`Poem`和`Book`类所做的那样：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'While we''re at it, let''s give `Literature` a similar `Print` method, as the
    one we assigned to the `Book` and `Poem` classes:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个过程中，让我们给`Literature`一个类似的`Print`方法，就像我们为`Book`和`Poem`类分配的那样：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now if we wanted to, we could go to our `main` method and declare an object
    of the `Literature` class, but that's not the point. This is not the reason we've
    created the `Literature` class. Rather, our goal is to make use of this `Literature`
    class as a base that we'll build on to declare more specific types of literature,
    such as poems or books. To make use of our `Literature` class, let's see how it
    applies to the existing `Poem` class.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们愿意，我们可以去我们的`main`方法，并声明一个`Literature`类的对象，但这不是重点。这不是我们创建`Literature`类的原因。相反，我们的目标是利用这个`Literature`类作为一个基础，我们将在其上声明更多特定类型的文学作品，比如诗歌或书籍。为了利用我们的`Literature`类，让我们看看它如何适用于现有的`Poem`类。
- en: The is-a relationship
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是一个关系
- en: 'Our `Literature` class contains the declarations and all of the functionality
    needed to manage a piece of literature''s title and author. If we let Java know
    that there is an inheritance relationship between `Poem` and `Literature`, we
    should be able to remove all the real references from the title and author of
    the following `Poem` class:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Literature`类包含了管理文学作品标题和作者的声明和所有功能。如果我们让Java知道`Poem`和`Literature`之间存在继承关系，我们应该能够删除以下`Poem`类的标题和作者的所有真实引用：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'First, let''s talk about the declaration of the `Poem` class that we''ve modified.
    When we say that one class extends another, we''re saying that there is an is-a
    relationship between them such that I can logically make the statement, "A poem
    is a piece of literature." In more Java terms, we''re saying that the `Poem` subclass
     extends or inherits from the `Literature` class. This means that when we create
    a `Poem` object, it will have all the members and functionality of the class that
    it extends:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们谈谈我们修改过的`Poem`类的声明。当我们说一个类扩展另一个类时，我们是在说它们之间存在一个是关系，以至于我可以逻辑地说出这样的陈述：“一首诗是一种文学作品。”更多的是Java术语，我们是在说`Poem`子类扩展或继承自`Literature`类。这意味着当我们创建一个`Poem`对象时，它将拥有它扩展的类的所有成员和功能：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our case, two of these members are `title` and `author`. The `Literature`
    class declares these members and does a good job of managing them throughout the
    class''s functionality. So, we can remove these members from our `Poem` class
    and we''ll still be able to access them within the `Poem` class''s methods. This
    is because the `Poem` class simply inherits its declaration from `Literature`.
    We do need to make a slight modification to get this `Poem` class working as intended,
    though. When we construct an object of a class that inherits from another class,
    by default the constructor of the subclass, as in the preceding screenshot, will
    begin by calling the constructor of the superclass:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，其中两个成员是`title`和`author`。`Literature`类声明了这些成员，并且在整个类的功能中很好地管理它们。因此，我们可以从我们的`Poem`类中删除这些成员，我们仍然可以在`Poem`类的方法中访问它们。这是因为`Poem`类只是从`Literature`继承了它的声明。但是，我们需要进行轻微修改，以使`Poem`类按预期工作。当我们构造从另一个类继承的类的对象时，默认情况下，子类的构造函数将首先调用超类的构造函数：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This confuses Java as we have it set up right now because the `Poem` constructor
    takes three variables as input whereas the `Literature` constructor is only expecting
    two. To solve this, explicitly call the `Literature` constructor within the `Poem`
    constructor, using the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这让Java感到困惑，因为我们现在设置的是`Poem`构造函数接受三个变量作为输入，而`Literature`构造函数只期望两个。为了解决这个问题，在`Poem`构造函数中显式调用`Literature`构造函数，使用以下步骤：
- en: 'When we''re in a subclass, we can call the methods of our superclass using
    the `super` keyword. So in this case, we''re going to begin our `Poem` constructor
    by simply calling the `super` constructor, or the `Literature` constructor, and
    passing to it the attributes that we''d like it to know about:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在子类中时，我们可以使用`super`关键字调用我们超类的方法。因此，在这种情况下，我们将通过简单地调用`super`构造函数，或者`Literature`构造函数来开始我们的`Poem`构造函数，并向它传递我们希望它知道的属性：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can do something very similar in our `Print` method because our `Literature`
    class, our superclass, knows how to print out a title and author already. There''s
    no reason for the `Poem` class to implement this functionality:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在我们的`Print`方法中做类似的事情，因为我们的`Literature`类，我们的超类，已经知道如何打印标题和作者。`Poem`类没有实现这个功能是没有理由的：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We'll get the same behavior from our `Print` method if we begin it by calling
    `super.Print`, instead of the original explicit printing lines shown in the preceding
    screenshot. Now, when the Poem's `Print` method runs, it will begin by calling
    the superclass's, that is, the `Literature.java` class's `Print` method. It will
    finally print out the `Poem` class's style, which is not shared across all pieces
    of literature.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们开始通过调用`super.Print`来开始`Print`方法，而不是在前面的截图中显示的原始显式打印行，我们将从我们的`Print`方法中获得相同的行为。现在，当`Poem`的`Print`方法运行时，它将首先调用超类的，也就是`Literature.java`类的`Print`方法。最后，它将打印出`Poem`类的风格，这种风格并不适用于所有文学作品。
- en: While our `Poem` constructor and `Literature` constructor have different names
    and even different styles of input, the two `Print` methods shared between `Poem`
    and `Literature` are exactly the same. We'll talk about this a little more later,
    but for now you should know that we've made use of a technique called **overriding**
    here.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的`Poem`构造函数和`Literature`构造函数具有不同的名称，甚至不同的输入样式，但`Poem`和`Literature`之间共享的两个`Print`方法是完全相同的。我们稍后会详细讨论这一点，但现在你应该知道我们在这里使用了一种叫做**覆盖**的技术。
- en: Overriding
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖
- en: 'When we declare that a subclass has a method that''s identical to one of its
    superclass methods, we''ve overridden the superclass method. When we do this,
    it''s a good idea to use the Java `Override` indicator:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们声明一个子类具有与其超类方法相同的方法时，我们已经覆盖了超类方法。当我们这样做时，最好使用Java的`Override`指示符：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is an indicator to future coders and some more arcane elements of our compiling
    suite that this particular method, given in the preceding screenshot, is hiding
    a method beneath it. When we actually run our code, Java gives preference to the
    lowest or subclassed version of a method.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对未来编码人员和我们编译套件的一些更深奥的元素的一个指示，即给定在前面的截图中的方法下隐藏了一个方法。当我们实际运行我们的代码时，Java会优先考虑方法的最低或子类版本。
- en: 'So let''s see whether we''ve declared our `Poem` and `Literature` relationship
    successfully. Let''s go back to the `main` method of our program in the `Inheritence.java`
    class and see whether the poem portion of this program executes as it did before:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看我们是否成功声明了我们的“Poem”和“Literature”关系。让我们回到我们程序的“Inheritence.java”类的“main”方法，看看这个程序的诗歌部分是否像以前一样执行：
- en: '![](img/a8018c55-7173-4c5e-aa28-0bf9b697cc82.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8018c55-7173-4c5e-aa28-0bf9b697cc82.png)'
- en: When we run this program, we get the exact same output as we did previously,
    which is a great sign that we've set up our `Poem` class to inherit from `Literature`
    in a logical manner.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个程序时，我们得到了与之前完全相同的输出，这表明我们已经以合理的方式设置了我们的“Poem”类从“Literature”继承。
- en: 'Now we can jump to our `Book` class. We''ll set it up as an is-a relationship
    between the `Book` and `Literature` class using the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以跳到我们的“Book”类。我们将按照以下步骤将其设置为“Book”和“Literature”类之间的is-a关系：
- en: 'First, we''ll declare that `Book` extends the `Literature` class; then, we''ll
    remove references to title and author in our `Book` class because now the `Literature`
    class, the superclass, will take care of this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将声明“Book”扩展“Literature”类；然后，我们将在我们的“Book”类中删除对标题和作者的引用，因为现在“Literature”类，即超类，将负责这一点：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As with the `Poem` class, we''re going to need to explicitly call the `Literature`
    class''s constructor and pass `title` and `author` to it:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与“Poem”类一样，我们需要显式调用“Literature”类的构造函数，并将“title”和“author”传递给它：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we can make use of our superclass''s `Print` method to simplify the printing
    of our `Book` class:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以利用我们的超类的“Print”方法来简化我们的“Book”类的打印：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once again, let's jump back to our `main` method and run it to make sure that
    we've done this successfully:![](img/269c7dd3-0d67-4a9f-99cd-9bdae0783358.png)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，让我们跳回到我们的“main”方法并运行它，以确保我们已经成功完成了这个任务！[](img/269c7dd3-0d67-4a9f-99cd-9bdae0783358.png)
- en: 'There we go: `The Lord of the Rings` output, just as we saw it before. Style-wise,
    this change is really great. By adding the `Literature` class and then subclassing
    it to create `Book` and `Poem` classes, we''ve made our `Book` and `Poem` classes
    much more bite-sized and easier for a programmer to go through and figure out
    what''s going on.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功了：“指环王”的输出，就像我们以前看到的那样。在风格上，这个改变真的很棒。通过添加“Literature”类，然后对其进行子类化以创建“Book”和“Poem”类，我们使得我们的“Book”和“Poem”类更加简洁，更容易让程序员理解发生了什么。
- en: However, this change is not purely stylistic. By declaring an is-a relationship
    between the `Book`, `Poem`, and `Literature` classes, where `Book` and `Poem`
    inherit from the `Literature` class, we've given ourselves actual functionality
    that we didn't have before. Let's take a look at this in action. If we go back
    to our `main` method, let's pretend that, rather than dealing with a single `Book`
    and `Poem` class, we're dealing with a vast network that we need to store in some
    sort of a data structure. With our original implementation, this would be a real
    challenge.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种改变不仅仅是风格上的。通过声明“Book”和“Poem”类继承自“Literature”类的is-a关系，我们给自己带来了实际上以前没有的功能。让我们看看这个功能。如果我们回到我们的“main”方法，假设我们不是处理单个“Book”和“Poem”类，而是处理一个需要存储在某种数据结构中的庞大网络。使用我们最初的实现，这将是一个真正的挑战。
- en: Data structure
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据结构
- en: 'There''s no easily accessible data structure that will happily store both books
    and poems. We''d probably have to use two data structures or break strong typing,
    which is the whole point of Java:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一个易于访问的数据结构可以愉快地存储书籍和诗歌。我们可能需要使用两种数据结构或打破强类型，这正是Java的全部意义所在：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, with our new implementation, where `Book` and `Poem` both inherit
    from `Literature`, we can store them in the same data structure. This is because
    inheritance is an is-a relationship, meaning that we can, once we''ve inherited
    from something, make claims such as book is literature and poem is a literature
    too. If that''s true, then an array of `Literature` objects should be able to
    store both `Book` and `Poem` within it. Let''s go through the following steps
    to illustrate this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过我们的新实现，“Book”和“Poem”都继承自“Literature”，我们可以将它们存储在相同的数据结构中。这是因为继承是一种is-a关系，这意味着一旦我们从某物继承了，我们可以宣称书是文学，诗歌也是文学。如果这是真的，那么“Literature”对象的数组应该能够在其中存储“Book”和“Poem”。让我们按照以下步骤来说明这一点：
- en: 'Create an array of `Literature` objects:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个“Literature”对象的数组：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The fact that we get no compile errors when we build this project is a really
    good sign that we're doing something legal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建这个项目时没有编译错误，这是一个非常好的迹象，表明我们正在做一些合法的事情。
- en: 'For the sake of our demonstration, let''s flesh out our array here to contain
    the number of books and poems:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进行演示，让我们在这里扩展我们的数组，以包含书籍和诗歌的数量：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We''ll modify our `main` method to print out directly from the array. Now,
    when we utilize our subclasses as though they were objects of their superclass,
    we do have to be aware that we''re now referencing them as objects of that superclass.
    For example, when we go through and acquire an element from our `Literature` array,
    irrespective of whether that element is a `Book` class, we will still not be able
    to access things such as its `genre` field even if this field is `public`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改我们的“main”方法，直接从数组中打印出来。现在，当我们像使用它们的超类对象一样使用我们的子类时，我们必须意识到我们现在是将它们作为该超类的对象引用。例如，当我们遍历并从我们的“Literature”数组中获取一个元素时，无论该元素是“Book”类，我们仍然无法访问诸如其“genre”字段之类的东西，即使这个字段是“public”：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is because the `Literature` class that we're now using as an object (as
    given in the preceding screenshot) does not have a `genre` member variable. But
    what we can do is call methods from our superclass that are overridden by the
    subclasses.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们现在使用的`Literature`类作为一个对象（如前面的截图所示）没有`genre`成员变量。但我们可以调用超类中被子类重写的方法。
- en: 'We can call the `Literature` class''s `Print` method within our `for` loop.
    Java will prioritize the `Print` methods of our subclasses:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在我们的`for`循环中调用`Literature`类的`Print`方法。Java将优先考虑我们子类的`Print`方法：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This means that, when we run this program, we''ll still get the specially formatted
    output that we have attributed to `Book` and `Poem`, not the simplified version
    that we stored in our `Literature` class:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，当我们运行这个程序时，我们仍然会得到我们归因于`Book`和`Poem`的特殊格式化输出，而不是我们存储在`Literature`类中的简化版本：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The abstract method
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象方法
- en: 'We may sometimes see methods that exist only to be overloaded by subclasses.
    These methods don''t do anything, and we can tag them with the `abstract` keyword,
    that is, `public abstract void Print()`, in the superclass (`Literature.java`).
    Of course, if a class has methods declared `abstract`, it''s probably a good sign
    that an instance of such a class should never be explicitly created. If our `Literature`
    class''s `Print` method is abstract, we should never declare objects that are
    only Literature. We should only use objects that are one of the subclasses of
    `Literature`. If we''re going to go down this route, we should declare `Literature`
    to be an `abstract` class as well:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有时会看到一些方法只存在于被子类重载。这些方法什么也不做，我们可以在超类（`Literature.java`）中使用`abstract`关键字标记它们，即`public
    abstract void Print()`。当然，如果一个类有声明为`abstract`的方法，这可能是一个好迹象，即这样的类的实例应该永远不会被显式创建。如果我们的`Literature`类的`Print`方法是抽象的，我们就不应该声明只是`Literature`的对象。我们应该只使用`Literature`的子类的对象。如果我们要走这条路，我们也应该将`Literature`声明为一个`abstract`类：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If we did this, of course, we'd have to get rid of the references to the Literature
    class's super method, so let's undo these changes for now.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果我们这样做，我们就必须摆脱对`Literature`类的超级方法的引用，所以现在让我们撤销这些更改。
- en: Let's take a look at a minor mistake we made when building this program initially.
    When creating our Literature class, we declared that title and author were `public`
    member variables. As you may know, generally we do not declare member variables
    public if we don't have a good reason to. It doesn't make a lot of sense for a
    piece of literature to change its author after it's been declared already, so
    `author` and `title` should be `private` member variables that are set in the
    `Literature` class's constructor whose values should never change. Unfortunately,
    if we make this change to our Literature class, we're going to limit the functionality
    of our Poem and Book classes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下我们在最初构建这个程序时犯的一个小错误。在创建我们的Literature类时，我们声明了`title`和`author`为`public`成员变量。你可能知道，通常情况下，如果没有充分的理由，我们不会声明成员变量为public。一旦宣布了，文学作品改变其作者并没有太多意义，所以`author`和`title`应该是`private`成员变量，它们在`Literature`类的构造函数中设置，其值不应该改变。不幸的是，如果我们对我们的Literature类进行这种更改，我们将限制我们的Poem和Book类的功能。
- en: 'Let''s say, for example, that we wanted to modify the `Print` function of our
    `Poem` class so that it wouldn''t have to explicitly call the `Print` function
    of the `Literature` class:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我们想要修改`Poem`类的`Print`函数，这样它就不必显式调用`Literature`类的`Print`函数了：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Maybe we want to start it by telling it that we''re declaring a `Poem` class
    here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们想要通过声明在这里创建一个`Poem`类来开始它：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Unfortunately, because we've made `title` and `author` private to the `Literature`
    class, the `Poem` class, even though it is a subclass of `Literature`, will not
    be able to access these member variables in its explicit code. This is kind of
    annoying, and it seems like there is some sort of protection setting between `private`
    and `public` where it's private for every class, except for the subclasses of
    the class. In fact, there is a protection setting available.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，因为我们已经将`title`和`author`私有化到`Literature`类中，即使`Poem`类是`Literature`的子类，也无法在其显式代码中访问这些成员变量。这有点烦人，似乎在`private`和`public`之间有一种保护设置，它对于类的子类来说是私有的。实际上，有一种保护设置可用。
- en: The protected method
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受保护的方法
- en: 'The `protected` method is the protected protection setting. If we declare that
    member variables are `protected`, it implies they''re private and not accessible
    by anyone, except the class and it''s subclasses:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`protected`方法是受保护的保护设置。如果我们声明成员变量为`protected`，那么它意味着它们是私有的，除了类和它的子类之外，其他人都无法访问：'
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Just to reassure ourselves, everything we've been doing here is legitimate.
    Let's run our program again and make sure the output looks good, which is the
    case. After this, we should have a pretty good grasp of inheritance. We can develop
    a lot of systems that really mimic their real-world counterparts, and we can write
    very elegant and functional code using inheritance and small classes that don't
    do a lot of complicated things in and of themselves.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了让自己放心，我们在这里所做的一切都是合法的。让我们再次运行我们的程序，确保输出看起来不错，事实也是如此。之后，我们应该对继承有相当好的理解。我们可以开发很多系统，这些系统真正模拟它们的现实世界对应物，并且我们可以使用继承和小类编写非常优雅和功能性的代码，这些小类本身并不做太多复杂的事情。
- en: Abstract
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象
- en: In this section, we'll take a quick look at an important idea that relates to
    inheritance in Java. To wrap our heads around what we're going to talk about,
    I think it's best if we start an existing project in the system. So let's take
    a look at the code we have in the code files.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将快速了解与Java中继承相关的一个重要概念。为了理解我们要讨论的内容，最好是从系统中的现有项目开始。让我们来看看代码文件中的代码。
- en: 'So far, we''ve done the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经做了以下工作：
- en: The `main` method of our program creates a list of objects. These objects are
    either of the type `Book` or `Poem`, but we've placed them in a list of `Literature`
    objects, leading us to believe that the `Book` and `Poem` classes must inherit
    from or extend the `Literature` class.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们程序的`main`方法创建了一个对象列表。这些对象要么是`Book`类型，要么是`Poem`类型，但我们将它们放在`Literature`对象的列表中，这让我们相信`Book`和`Poem`类必须继承或扩展`Literature`类。
- en: Once we've built this array, we simply iterate through it using a `for` loop
    and call the `Print` method of this `for` loop on each object.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦我们建立了这个数组，我们只需使用`for`循环迭代它，并在每个对象上调用这个`for`循环的`Print`方法。
- en: At this point, we're dealing with objects as `Literature` objects, not the Books
    or Poems that they are at the lowest level. This leads us to believe that the
    `Literature` class itself must implement a `Print` method; if we jump into the
    class, we'll see that this is true indeed.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这一点上，我们处理的是`Literature`对象，而不是它们在最低级别的书籍或诗歌。这让我们相信`Literature`类本身必须实现一个`Print`方法；如果我们跳进类，我们会看到这确实是真的。
- en: 'However, if we run our program, we will quickly see that Books and Poems execute
    their `Print` method slightly differently, displaying different information for
    each of them. This is explained when we look at the `Book` and `Poem` classes,
    which do indeed extend the `Literature` class, but each of these classes overrides
    the `Literature` class''s `Print` method to provide its own functionality. This
    is all well and good and is a pretty elegant solution, but there''s an interesting
    case that we should take a look at and discuss. Because `Literature` is itself
    a class, it''s perfectly valid for us to declare a new `Literature` object, just
    as we could for `Book` or `Poem`. The `Literature` class''s constructor first
    expects the `title` of the piece of literature and then the `author`. Once we''ve
    created a new instance of the `Literature` class, we could put that instance into
    our list of `Literature` classes, just like we''ve been doing with instances of
    the `Book` and `Poem` classes:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们运行我们的程序，我们很快就会看到书籍和诗歌以稍有不同的方式执行它们的`Print`方法，为每个类显示不同的信息。当我们查看`Book`和`Poem`类时，这一点得到了解释，它们确实扩展了`Literature`类，但每个类都覆盖了`Literature`类的`Print`方法，以提供自己的功能。这都很好，也是一个相当优雅的解决方案，但有一个有趣的案例我们应该看一看并讨论一下。因为`Literature`本身是一个类，我们完全可以声明一个新的`Literature`对象，就像我们可以为`Book`或`Poem`做的那样。`Literature`类的构造函数首先期望文学作品的`title`，然后是`author`。一旦我们创建了`Literature`类的新实例，我们可以将该实例放入我们的`Literature`类列表中，就像我们一直在做的`Book`和`Poem`类的实例一样：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When we do this and run our program, we''ll see the `Literature` class''s `Print`
    method get executed, and the new `Literature` object we have created will display
    alongside our list of books and poems:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们这样做并运行我们的程序时，我们将看到`Literature`类的`Print`方法被执行，我们创建的新`Literature`对象将显示在我们的书籍和诗歌列表旁边：
- en: '![](img/a451f7d1-909e-45b3-a3bc-52665ed6e47b.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a451f7d1-909e-45b3-a3bc-52665ed6e47b.png)'
- en: So what's the problem here? Well, depending on the true nature of the software
    we're trying to design, this may or may not make a lot of sense. Let's say we're
    doing this as part of a library system, providing someone with just the information
    that something called Java was written by some guy called Zach, without telling
    them whether it's a book or a poem or any other information that we've decided
    to associate with specific types of literature. This may simply not be useful
    at all and is something that should never be done.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 那么问题在哪里呢？嗯，这取决于我们试图设计的软件的真正性质，这可能有很多道理，也可能没有。假设我们正在作为图书馆系统的一部分进行这项工作，只提供某人所谓的Java是由某个叫Zach的人写的这样的信息，而不告诉他们它是一本书还是一首诗或者我们决定与特定类型的文学相关联的任何其他信息。这可能根本没有用，而且绝对不应该这样做。
- en: 'If this is the case, Java provides us with a system to create classes that
    we can use for inheritance purposes, but we will never be able to legally instantiate
    them on their own, as we''ve done before. If we want to mark a class to be of
    that type, we''re going to call it an `abstract` class, and in the class''s declaration,
    we simply use the `abstract` keyword:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样的话，Java为我们提供了一个可以用于继承目的的类创建系统，但我们将永远无法合法地单独实例化它们，就像我们以前做的那样。如果我们想标记一个类为那种类型，我们将称其为`abstract`类，并且在类的声明中，我们只需使用`abstract`关键字。
- en: '[PRE24]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Once we've marked a class `abstract`, it's no longer a legal operation to instantiate
    this class. At face value, this is a really simple thing and primarily a "protect
    our code from ourselves and other programmers" kind of deal, but that's not entirely
    true; rather, it is true but it's not the only purpose of declaring a class as `abstract`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将一个类标记为`abstract`，实例化这个类就不再是一个合法的操作。乍一看，这是一件非常简单的事情，主要是一种“保护我们的代码免受自己和其他程序员的侵害”的交易，但这并不完全正确；它是正确的，但这并不是将一个类声明为`abstract`的唯一目的。
- en: Once we've told Java that we can never create an instance of just `Literature`,
    of classes that use `Literature` as their superclass, we're no longer as restricted
    when setting up the `Literature` class. Because we've declared `Literature` to
    be an abstract class, we and Java will know that `Literature` will never be instantiated
    on its own, only when it is a superclass of a class being instantiated. When this
    is the case, we can get away without having portions of this class that most Java
    classes have to have. For example, we don't need to actually declare a constructor
    for `Literature`. If `Literature` was a standard Java class, Java would not be
    okay with this because if we did try to instantiate `Literature`, it would have
    no idea of what to do. There would be no constructor to call. But because `Literature`
    is abstract, we can be confident that Literature's subclasses will have constructors
    of their own. Of course, if we do make this change, we're going to have to get
    rid of the references to the `Literature` constructor in our subclasses, that
    is, by deleting the `super` method from the subclasses. Therefore, there's definitely
    a trade-off associated with this change. It requires more code in our subclasses
    to have less code in our `Literature` superclass. In this particular instance,
    this trade-off probably isn't worth it because we're duplicating code between
    our `Book` and `Poem` constructors, but if the constructors for `Literature` subclasses
    could be assumed to do very different things, not declaring a common base constructor
    would make a lot of sense.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们告诉Java，我们永远不能创建一个单独的`Literature`实例，只能使用`Literature`作为它们的超类的类，当设置`Literature`类时，我们就不再受到限制。因为我们声明`Literature`是一个抽象类，我们和Java都知道`Literature`永远不会单独实例化，只有当它是一个正在实例化的类的超类时才会实例化。在这种情况下，我们可以不需要大部分Java类必须具有的这个类的部分。例如，我们不需要为`Literature`实际声明构造函数。如果`Literature`是一个标准的Java类，Java不会接受这一点，因为如果我们尝试实例化`Literature`，它将不知道该怎么做。将没有构造函数可供调用。但是因为`Literature`是抽象的，我们可以确信`Literature`的子类将有自己的构造函数。当然，如果我们做出这个改变，我们将不得不摆脱子类中对`Literature`构造函数的引用，也就是删除子类中的`super`方法。因此，这个改变肯定是有所取舍的。这需要更多的代码在我们的子类中，以减少我们的`Literature`超类中的代码。在这种特定情况下，这种权衡可能不值得，因为我们在`Book`和`Poem`构造函数之间重复了代码，但如果可以假定`Literature`子类的构造函数做的事情非常不同，不声明一个共同的基础构造函数就是有意义的。
- en: So, in a nutshell, when we architect our program, or a larger solution, so that
    we have classes that make a lot of sense for architecture purposes but should
    never be created all on their own, we should declare those classes as `abstract`.
    Sometimes, we'll really know we've come across a class like this when certain
    common class functionalities, such as having a constructor, just don't make sense
    for this class.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，简而言之，当我们设计我们的程序或更大的解决方案时，我们应该将那些在架构目的上非常合理但永远不应该单独创建的类声明为`abstract`。有时，当某些常见的类功能，比如拥有构造函数，对于这个类来说根本就没有意义时，我们真的会知道我们遇到了这样的类。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we got to know some intricacies of object-oriented programming,
    using the concept of inheritance precisely by creating something called a superclass
    and subclass and establishing an "is-a" relationship between them. We also discussed
    the usage of some key aspects, such as overriding a subclass and superclass, data
    structures, and the `protected` method. We also got to know how an `abstract`
    method works in detail.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了面向对象编程的一些复杂性，通过精确地使用继承的概念，创建了一个称为超类和子类的东西，并在它们之间建立了“是一个”关系。我们还讨论了一些关键方面的用法，比如覆盖子类和超类、数据结构和`protected`方法。我们还详细了解了`abstract`方法的工作原理。
- en: In the next chapter, you'll learn about useful Java classes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解有用的Java类。
