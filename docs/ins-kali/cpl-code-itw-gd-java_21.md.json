["```java\npublic class Calculator {\n\u00a0\u00a0public int sum(int x, int y) {\n\u00a0\u00a0\u00a0\u00a0return x + y;\n\u00a0\u00a0}\n}\n```", "```java\nCollections.sort(list, (String x, String y) -> {\n\u00a0\u00a0return x.compareTo(y);\n});\n```", "```java\nstatic long factorial(long n) {\n\u00a0\u00a0long result = 1;\n\u00a0\u00a0for (; n > 0; n--) {\n\u00a0\u00a0\u00a0\u00a0result *= n;\n\u00a0\u00a0}\n\u00a0\u00a0return result;\n}\n```", "```java\nstatic long factorial(long n) {\n\u00a0\u00a0return n == 1 ? 1 : n * factorial(n - 1);\n}\n```", "```java\nstatic long factorialTail(long n) {\n\u00a0\u00a0return factorial(1, n);\n}\nstatic long factorial(long acc, long v) {\n\u00a0\u00a0return v == 1 ? acc : factorial(acc * v, v - 1);\n}\n```", "```java\nstatic long factorial(long n) {\n\u00a0\u00a0return LongStream.rangeClosed(1, n)\n\u00a0\u00a0\u00a0\u00a0 .reduce(1, (n1, n2) -> n1 * n2);\n}\n```", "```java\nFilenameFilter filter = new FilenameFilter() {\n\u00a0\u00a0@Override\n\u00a0\u00a0public boolean accept(File folder, String fileName) {\n\u00a0\u00a0\u00a0\u00a0return folder.canRead() && fileName.endsWith(\".pdf\");\n\u00a0\u00a0}\n};\n```", "```java\n@FunctionalInterface\npublic interface Callable<V> {\n\u00a0\u00a0V call() throws Exception;\n}\n```", "```java\nList<String> strList = Arrays.asList(\"1\", \"2\", \"3\");\nList<Integer> intList = strList.stream()\n\u00a0\u00a0.map(Integer::parseInt)\n\u00a0\u00a0.collect(Collectors.toList());\n```", "```java\nList<List<Object>> list = ...\nList<Object> flatList = list.stream()\n\u00a0\u00a0.flatMap(List::stream)\n\u00a0\u00a0.collect(Collectors.toList());\n```", "```java\nList<List<String>> melonLists = Arrays.asList(\n\u00a0\u00a0Arrays.asList(\"Gac\", \"Cantaloupe\"),\n\u00a0\u00a0Arrays.asList(\"Hemi\", \"Gac\", \"Apollo\"),\n\u00a0\u00a0Arrays.asList(\"Gac\", \"Hemi\", \"Cantaloupe\"));\n```", "```java\nmelonLists.stream()\n\u00a0\u00a0.map(Collection::stream) // Stream<Stream<String>>\n\u00a0\u00a0.distinct();\n```", "```java\nList<String> distinctNames = melonLists.stream()\n\u00a0\u00a0.flatMap(Collection::stream) // Stream<String>\n\u00a0\u00a0.distinct()\n\u00a0\u00a0.collect(Collectors.toList());\n```", "```java\nList<Integer> ints\n\u00a0\u00a0= Arrays.asList(1, 2, -4, 0, 2, 0, -1, 14, 0, -1);\n```", "```java\nList<Integer> result = ints.stream()\n\u00a0\u00a0.filter(i -> i != 0)\n\u00a0\u00a0.collect(Collectors.toList());\n```", "```java\naddresses.stream()\n\u00a0\u00a0.peek(p -> System.out.println(\"\\tstream(): \" + p))\n\u00a0\u00a0.filter(s -> s.startsWith(\"c\"))\n\u00a0\u00a0.sorted()\n\u00a0\u00a0.peek(p -> System.out.println(\"\\tsorted(): \" + p))\n\u00a0\u00a0.collect(Collectors.toList());\n```", "```java\n@FunctionalInterface\npublic interface Predicate<T> {\n\u00a0\u00a0boolean test(T t);\n\u00a0\u00a0// default and static methods omitted for brevity\n}\n```", "```java\n    public static <T> Stream<T> toStream(T[] arr) {\n    \u00a0\u00a0return Arrays.stream(arr);\n    }\n    ```", "```java\n    public static <T> Stream<T> toStream(T[] arr) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0return Stream.of(arr);\n    }\n    ```", "```java\npublic static <T> Stream<T> toStream(T[] arr) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0return Arrays.asList(arr).stream();\n}\n```", "```java\n    public static IntStream toStream(int[] arr) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n    \u00a0\u00a0return Arrays.stream(arr);\n    }\n    ```", "```java\npublic static IntStream toStream(int[] arr) {\n\u00a0\u00a0return IntStream.of(arr);\n}\n```", "```java\npublic interface Polygon {\n\u00a0\u00a0public double area();\n\u00a0\u00a0default double perimeter(double... segments) {\n\u00a0\u00a0\u00a0\u00a0return Arrays.stream(segments)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.sum();\n\u00a0\u00a0}\n}\n```", "```java\nSpliterators.spliteratorUnknownSize(\n\u00a0\u00a0your_Iterator, your_Properties);\n```", "```java\nOptional<User> userOptional = Optional.empty();\n```", "```java\nUser user = new User();\nOptional<User> userOptional = Optional.of(user);\n```"]