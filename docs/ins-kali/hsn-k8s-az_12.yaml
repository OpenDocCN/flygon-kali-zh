- en: 9\. Connecting to Azure Event Hubs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. 连接到Azure事件中心
- en: Event-based integration is a key pattern for implementing **microservices**.
    The idea of a microservices architecture is to decompose a monolithic application
    into a smaller set of services. Events are commonly used to coordinate between
    these different services. When you think about an event, it can be one of many
    things. Financial transactions can be an event, as well as IoT sensor data, web
    page clicks and views, and much more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基于事件的集成是实现微服务的关键模式。微服务架构的理念是将单体应用程序分解为一组较小的服务。事件通常用于协调这些不同的服务之间。当您考虑一个事件时，它可以是许多事物之一。金融交易可以是一个事件，同样的，IoT传感器数据、网页点击和浏览等也可以是事件。
- en: 'A piece of software that is commonly used to handle these types of events is
    Apache Kafka (Kafka for short). **Kafka** was originally developed by LinkedIn,
    and later donated to the Apache Software Foundation. It is a popular open-source
    streaming platform. A streaming platform is a platform that has three core capabilities:
    publishing and subscribing a stream of messages (similar to a queue), storing
    these streams in a durable fashion, and processing these streams as they occur.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这些类型事件的常用软件是Apache Kafka（简称Kafka）。Kafka最初由LinkedIn开发，后来捐赠给Apache软件基金会。它是一个流行的开源流平台。流平台具有三个核心能力：发布和订阅消息流（类似于队列），以持久方式存储这些流，并在发生时处理这些流。
- en: Azure has a similar offer to Apache Kafka, called Azure Event Hubs. **Event
    Hubs** is a managed service that offers real-time data ingestion. It is simple
    to set up and use, and can scale dynamically. Event hub is also integrated with
    other Azure services, such as stream analytics, functions, and databricks. These
    prebuilt integrations make it easier for you to build applications that consume
    events from event hubs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Azure有一个类似于Apache Kafka的服务，称为Azure事件中心。事件中心是一个提供实时数据摄入的托管服务。它易于设置和使用，并且可以动态扩展。事件中心还与其他Azure服务集成，如流分析、函数和databricks。这些预构建的集成使您更容易构建从事件中心消费事件的应用程序。
- en: Event hubs also provide a Kafka endpoint. This means that you can configure
    your existing Kafka-based applications and point them to Event Hubs instead. The
    benefit of using Event Hubs for your Kafka applications is that you no longer
    have to manage your Kafka cluster because you consume it as a managed service.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 事件中心还提供Kafka端点。这意味着您可以配置现有的基于Kafka的应用程序，并将其指向事件中心。使用事件中心来处理Kafka应用程序的好处是您不再需要管理Kafka集群，因为您可以将其作为托管服务来使用。
- en: In this chapter, you will learn how to implement microservices on AKS and use
    Event Hubs for loosely coupled integration between applications. You will deploy
    an application that uses Kafka to send events, and you will replace your own Kafka
    cluster with Azure Event Hubs. As you will learn in this chapter, event-based
    integration is one of the key differentiators between monolithic and microservice-based
    applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在AKS上实现微服务，并使用事件中心在应用程序之间实现松耦合集成。您将部署一个使用Kafka发送事件的应用程序，并用Azure事件中心替换您自己的Kafka集群。正如您将在本章中学到的，基于事件的集成是单体和基于微服务的应用程序之间的关键区别之一。
- en: Deploying a set of microservices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署一组微服务
- en: Using Azure Event Hubs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure事件中心
- en: We will start this chapter by deploying a set of microservices that builds a
    social network.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从部署一组构建社交网络的微服务开始本章。
- en: Deploying a set of microservices
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署一组微服务
- en: 'In this section, we will be deploying a set of microservices from a demo application
    called social network. The application is composed of two main microservices:
    **users** and **friends**. The users service stores all the users in its own data
    store. A user is represented by an ID, and their first and last names. The friends
    service stores the user''s friends. A friend relationship links the user IDs of
    both friends, and also has its own ID.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将部署一个来自名为社交网络的演示应用程序的一组微服务。该应用程序由两个主要的微服务组成：**用户**和**好友**。用户服务将所有用户存储在自己的数据存储中。用户由ID、名和姓表示。好友服务存储用户的好友。好友关系链接了两个好友的用户ID，并且还有自己的ID。
- en: The events of adding a user/adding a friend are sent to a message queue. This
    application uses Kafka as the message queue to store events related to users,
    friends, and recommendations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 添加用户/添加好友的事件被发送到消息队列。该应用程序使用Kafka作为消息队列，用于存储与用户、好友和推荐相关的事件。
- en: This queue is consumed by a recommendation service. This service is backed by
    a **Neo4j** database that can then be used to query relationships between users.
    Neo4j is a popular graph database platform. A graph database is different from
    a typical relational database such as MySQL. A graph database is a database that
    is focused on storing the relationship between different elements. You can query
    a graph database with questions, such as *give me the common friends of user X
    and user Y*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个队列被一个推荐服务所消费。这个服务由一个**Neo4j**数据库支持，可以用来查询用户之间的关系。Neo4j是一个流行的图形数据库平台。图形数据库不同于典型的关系数据库，如MySQL。图形数据库专注于存储不同元素之间的关系。您可以用问题查询图形数据库，比如*给我用户X和用户Y的共同好友*。
- en: In terms of data flow, you can create users and friendship relationships. Creating
    a user or a friendship relationship will generate a message on the message queue,
    which will result in the data being populated in the Neo4j database. The application
    doesn't have a web interface. You will mainly work with the application using
    the command line, although we can connect to the Neo4j database to verify that
    data was populated in the database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据流方面，您可以创建用户和友谊关系。创建用户或友谊关系将在消息队列上生成一条消息，这将导致数据在Neo4j数据库中填充。该应用程序没有Web界面。您主要将使用命令行与应用程序进行交互，尽管我们可以连接到Neo4j数据库以验证数据是否已填充到数据库中。
- en: 'In the following section, you will learn to do the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，您将学习以下内容：
- en: Use Helm to deploy a sample microservice-based application.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm部署一个示例基于微服务的应用程序。
- en: Test the service by sending events and watch objects being created and updated.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过发送事件并观察对象的创建和更新来测试服务。
- en: Let's start by deploying the application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从部署应用程序开始。
- en: Deploying the application using Helm
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Helm部署应用程序
- en: In this section, we will deploy the demo application using Helm. This will deploy
    the full application using a local Kafka instance. Once the application is deployed,
    we will generate a small social network and verify that we were able to create
    the social network.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Helm部署演示应用程序。这将使用本地Kafka实例部署完整的应用程序。应用程序部署后，我们将生成一个小型社交网络，并验证我们能够创建该社交网络。
- en: 'This example has a lot of resource requirements. To meet them, scale your cluster
    to four nodes:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个示例有很多资源需求。为了满足这些需求，将您的集群扩展到四个节点：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The code of this example has been included in the GitHub repo for this book.
    You can find the code in the `social-network` folder under `Chapter09`. Navigate
    to this folder:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个示例的代码已经包含在本书的GitHub存储库中。您可以在`Chapter09`文件夹下的`social-network`文件夹中找到代码。导航到这个文件夹：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To run Kafka, we also need to run **ZooKeeper**. ZooKeeper is another open-source
    software project by the Apache foundation. It provides naming, configuration management,
    synchronization, and the ability to group services. We will use Kafka and ZooKeeper
    Helm charts from `bitnami`, so let''s add the required Helm repository:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行Kafka，我们还需要运行**ZooKeeper**。ZooKeeper是Apache基金会的另一个开源软件项目。它提供命名、配置管理、同步和分组服务的能力。我们将使用`bitnami`的Kafka和ZooKeeper
    Helm图表，因此让我们添加所需的Helm存储库：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will generate the output shown in *Figure 9.1*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成如*图9.1*所示的输出：
- en: '![Output screen displays two Helm repositories,bitnami and incubator, being
    added to your repositories.](image/Figure_9.1.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![输出屏幕显示两个Helm存储库，bitnami和incubator，被添加到您的存储库中。](image/Figure_9.1.jpg)'
- en: 'Figure 9.1: Adding the Helm repositories'
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.1：添加Helm存储库
- en: 'Let''s update the dependencies to make the dependent charts available:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更新依赖项以使依赖图表可用：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will show you something similar to *Figure 9.2* four times:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示类似于*图9.2*的内容四次：
- en: '![In order to make the dependent charts available, the output screen will display
    individual messages of successfully receiving an update from dependencies such
    as svc-cat, incubator, azure, jetstack, bitnami, and stable four times.](image/Figure_9.2.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![为了使依赖图表可用，输出屏幕将显示成功接收来自svc-cat、incubator、azure、jetstack、bitnami和stable等四个依赖项更新的单独消息。](image/Figure_9.2.jpg)'
- en: 'Figure 9.2: Updating dependencies'
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.2：更新依赖项
- en: Note
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'During this example, you might see a warning similar to the following: `walk.go:74:
    found symbolic link in path:`. This is a warning that can safely be ignored.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '在此示例中，您可能会看到类似于以下内容的警告：`walk.go:74: found symbolic link in path:`。这是一个可以安全忽略的警告。'
- en: 'Next, create a new `namespace` for this application:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为此应用程序创建一个新的`namespace`：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will generate an output as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成如下输出：
- en: '![Using the kubectl create namespace social-network command, a new namespace
    is created.](image/Figure_9.3.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用kubectl create namespace social-network命令，创建一个新的命名空间。](image/Figure_9.3.jpg)'
- en: 'Figure 9.3: Creating a new namespace'
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.3：创建一个新的命名空间
- en: 'Now, go ahead and deploy the application:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，继续部署应用程序：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check the status of the Pods in the deployment using the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查部署中Pod的状态：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see in *Figure 9.4*, it takes about 5 minutes until all of the Pods
    are up and running:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在*图9.4*中所看到的，大约需要5分钟才能使所有的Pod都正常运行起来：
- en: '![The output showsa total of 20 Pods with a status of Running.](image/Figure_9.4.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示共有20个状态为Running的Pod。](image/Figure_9.4.jpg)'
- en: 'Figure 9.4: Output displaying all of the Pods with a Running status'
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.4：显示所有状态为Running的Pod的输出
- en: 'When the application has been successfully deployed, you can connect to the
    edge service. To get its IP, use the following command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序成功部署后，您可以连接到边缘服务。要获取其IP，请使用以下命令：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command will generate an output as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成如下输出：
- en: '![You can obtain the edge-service external IP using the kubectl get service
    -n social-network command.](image/Figure_9.5.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![您可以使用kubectl get service -n social-network命令获取edge-service的外部IP。](image/Figure_9.5.jpg)'
- en: 'Figure 9.5: Getting the edge service external IP'
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.5：获取边缘服务的外部IP
- en: You can do two tests to verify that the application is working correctly. Test
    1 is to connect the edge service on port `9000` in a browser. *Figure 9.6* displays
    the Whitelabel Error Page, showing that the application is running:![The Whitelabel
    Error Page will display a message that the application has no configured error
    view, so you are seeing this as a fallback. This indicates that the application
    is running.](image/Figure_9.6.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以进行两个测试来验证应用程序是否正常工作。测试1是在浏览器中连接端口`9000`上的边缘服务。*图9.6*显示了Whitelabel错误页面，显示应用程序正在运行：![Whitelabel错误页面将显示应用程序没有配置错误视图，因此您看到这个作为后备。这表明应用程序正在运行。](image/Figure_9.6.jpg)
- en: 'Figure 9.6: The Whitelabel Error Page, showing that the application is running'
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.6：Whitelabel错误页面，显示应用程序正在运行
- en: 'The second test to verify that the application is running, is to actually generate
    a small social network. This will verify that all services are working correctly.
    You can create this network using the following command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证应用程序是否运行的第二个测试是实际生成一个小型社交网络。这将验证所有服务是否正常工作。您可以使用以下命令创建这个网络：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command will generate a lot of output. The output will start with the
    elements shown in *Figure 9.7*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将生成大量输出。输出将以*图9.7*中显示的元素开头：
- en: '![While creating a new social network, the initial output screen will display
    the first name, the last name, the date and time it was created, the date and
    time it was last modified, and an ID.](image/Figure_9.7.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![在创建新的社交网络时，初始输出屏幕将显示名字、姓氏、创建日期和时间、上次修改日期和时间以及一个ID。](image/Figure_9.7.jpg)'
- en: 'Figure 9.7: Initial output when creating a new social network'
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.7：创建新的社交网络时的初始输出
- en: It will take about a minute to generate a 15-person network. To verify that
    the network has been created successfully, browse to [`http://<external-ip>:9000/user/v1/users/1`](http://<external-ip>:9000/user/v1/users/1)
    in your web browser. This should show you a small JSON object that represents
    a user in the social network, as shown in *Figure 9.8*:![Upon the successful creation
    of the user in the user service, the output screen accessed on <external-ip>:9000/user/v1/users/1
    displays the first and the last name of the user, the date and time it was created,
    and the date and time it was last modified.](image/Figure_9.8.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个15人的网络大约需要一分钟的时间。要验证网络是否已成功创建，请在您的网络浏览器中浏览到[`http://<external-ip>:9000/user/v1/users/1`](http://<external-ip>:9000/user/v1/users/1)。这应该会显示一个代表社交网络中用户的小JSON对象，如*图9.8*所示：![在用户服务中成功创建用户后，访问<external-ip>:9000/user/v1/users/1的输出屏幕将显示用户的名字和姓氏、创建日期和时间以及上次修改日期和时间。](image/Figure_9.8.jpg)
- en: 'Figure 9.8: Successful creation of the user in the user service'
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.8：用户服务中成功创建用户
- en: 'As a final validation, you can connect to the Neo4j database and visualize
    the social network you created. To be able to connect to Neo4j, you need to first
    expose it as a service. Use the `neo4j-service.yaml` file in the social network
    folder to expose it:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以连接到Neo4j数据库并可视化您创建的社交网络。要能够连接到Neo4j，您需要首先将其公开为一个服务。使用社交网络文件夹中的`neo4j-service.yaml`文件来公开它：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, get the service''s public IP address. This can take about a minute to
    be available:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，获取服务的公共IP地址。这可能需要大约一分钟才能使用：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding command will generate the output as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将生成以下输出：
- en: '![The output displays the external IP address of the Neo4j service.](image/Figure_9.9.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示了Neo4j服务的外部IP地址。](image/Figure_9.9.jpg)'
- en: 'Figure 9.9: Output displaying the external IP address of the Neo4j service'
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.9：显示Neo4j服务的外部IP地址的输出
- en: Note
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the external IP of the Neo4j service can differ from the external
    IP of the edge service.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Neo4j服务的外部IP可能与边缘服务的外部IP不同。
- en: 'Use your browser to connect to [`http://<external-ip>:7474`](http://<external-ip>:7474).
    This will open a login screen. Use the following information to log in:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器连接到[`http://<external-ip>:7474`](http://<external-ip>:7474)。这将打开一个登录屏幕。使用以下信息登录：
- en: '**Connect URL**: `bolt://<external-ip>:7678`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接URL**：`bolt://<external-ip>:7678`'
- en: '**Username**: `neo4j`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名**：`neo4j`'
- en: '**Password**: `neo4j`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：`neo4j`'
- en: 'Your connection information should look similar to *Figure 9.10.*:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您的连接信息应该类似于*图9.10*：
- en: '![To log in to the Neo4j service, the user must enter bolt://<external-ip>:7687
    in the Connect URL field,set the username as neo4j, and set the password as neo4j.
    Then they need to click on the connect tab below the password field. This will
    help them log in to the browser.](image/Figure_9.10.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![要登录Neo4j服务，用户必须在连接URL字段中输入bolt://<external-ip>:7687，将用户名设置为neo4j，密码设置为neo4j。然后他们需要点击密码字段下面的连接选项卡。这将帮助他们登录浏览器。](image/Figure_9.10.jpg)'
- en: 'Figure 9.10: Logging in to the Neo4j browser'
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.10：登录到Neo4j浏览器
- en: Once you're connected to the Neo4j browser, you can see the actual social network.
    Click on the **Database Information** icon, and then click on **User**. This will
    generate a query that will display the social network you just created. This will
    look similar to *Figure 9.11*:![The output screen of the social network is divided
    into two parts. The left section of the screen displays the Database Information
    such as Node Labels, Relationship Types, Property Keys, and the Database, while
    the remainder of the screen displays the names of User(14) and FRIEND(149). The
    output also contains a graph representation of the social network that was created.](image/Figure_9.11.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦连接到Neo4j浏览器，您可以看到实际的社交网络。点击**数据库信息**图标，然后点击**用户**。这将生成一个查询，显示您刚刚创建的社交网络。这将类似于*图9.11*：![社交网络的输出屏幕分为两部分。屏幕的左侧显示数据库信息，如节点标签、关系类型、属性键和数据库，而屏幕的其余部分显示用户(14)和朋友(149)的名称。输出还包含所创建的社交网络的图形表示。](image/Figure_9.11.jpg)
- en: 'Figure 9.11: A view of the social network you just created'
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.11：您刚刚创建的社交网络的视图
- en: 'In the current example, we have set up the end-to-end application, using Kafka
    running on our Kubernetes cluster as a message queue. Let''s remove that example
    before we move on the next section. To delete the local deployment, use the following
    commands:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前示例中，我们已经设置了端到端的应用程序，使用在我们的Kubernetes集群上运行的Kafka作为消息队列。在我们进入下一节之前，让我们删除该示例。要删除本地部署，请使用以下命令：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the next section, we will move away from storing events in the cluster and
    store them in Azure Event Hubs. By leveraging native Kafka support on Azure Event
    Hubs and switching to using a more production-ready event store, we will see that
    the process is straightforward.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将摆脱在集群中存储事件，并将它们存储在Azure事件中心。通过利用Azure事件中心上的本机Kafka支持，并切换到使用更适合生产的事件存储，我们将看到这个过程是简单的。
- en: Using Azure Event Hubs
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Azure事件中心
- en: Running Kafka by yourself on a cluster is possible but can be hard to run for
    production usage. In this section, we will transfer the responsibility of maintaining
    a Kafka cluster to Azure Event Hubs. Event Hubs is a fully managed, real-time
    data ingestion service. It has native support for the Kafka protocol, so, with
    minor modifications, we can update our application from using a local Kafka instance
    to the scalable Azure Event Hubs instance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 自己在集群上运行Kafka是可能的，但对于生产使用可能很难运行。在本节中，我们将把维护Kafka集群的责任转移到Azure事件中心。事件中心是一个完全托管的实时数据摄入服务。它原生支持Kafka协议，因此，通过轻微修改，我们可以将我们的应用程序从使用本地Kafka实例更新为可扩展的Azure事件中心实例。
- en: 'In the following sections, we will do the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将执行以下操作：
- en: Create the event hub via the portal and gather the required details to connect
    our microservice-based application
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过门户创建事件中心并收集连接我们基于微服务的应用程序所需的详细信息
- en: Modify the Helm chart to use the newly created event hub
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改Helm图表以使用新创建的事件中心
- en: Let's start by creating the event hub.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建事件中心。
- en: Creating the event hub
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建事件中心
- en: 'In this section, we will create the Azure event hub. We will use this event
    hub later to stream the new messages to. Perform the following steps to create
    the event hub:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建Azure事件中心。稍后我们将使用此事件中心来流式传输新消息。执行以下步骤创建事件中心：
- en: To create the event hub on the Azure portal, search for `event hub`, as shown
    in *Figure 9.12*:![In the search bar tab, the user needs to type "event hub" in
    order to create the event hub in the Azure portal.](image/Figure_9.12.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Azure门户上创建事件中心，请搜索`事件中心`，如*图9.12*所示：![在搜索栏选项卡中，用户需要输入“事件中心”以在Azure门户中创建事件中心。](image/Figure_9.12.jpg)
- en: 'Figure 9.12: Looking for Event Hubs in the search bar'
  id: totrans-92
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.12：在搜索栏中查找事件中心
- en: Click on **Event Hubs**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**事件中心**。
- en: On the **Event Hubs** tab, click on **Add**, as displayed in *Figure 9.13*:![To
    add a new event hub, the user needs to click on the +Add tab located towards the
    extreme left of the screen.](image/Figure_9.13.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**事件中心**选项卡上，点击**添加**，如*图9.13*所示：![要添加新的事件中心，用户需要点击屏幕最左侧的+添加选项卡。](image/Figure_9.13.jpg)
- en: 'Figure 9.13: Adding a new event hub'
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.13：添加新的事件中心
- en: 'Fill in the following details:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写以下细节：
- en: '**Name**: This name should be globally unique. Consider adding your initials
    to the name.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：此名称应是全局唯一的。考虑在名称中添加您的缩写。'
- en: '**Pricing tier**: Select the Standard pricing tier. The Basic pricing tier
    does not support Kafka.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定价层**：选择标准定价层。基本定价层不支持Kafka。'
- en: '**Makes this namespace zone redundant**: Disabled.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使此命名空间区域多余**：已禁用。'
- en: '**Azure Subscription**: Select the same subscription as the one hosting your
    Kubernetes cluster.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure订阅**：选择与托管Kubernetes集群的订阅相同的订阅。'
- en: '**Resource Group**: Select the resource group we created for the cluster, `rg-handsonaks`
    in our case.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源组**：选择我们为集群创建的资源组，在我们的情况下是`rg-handsonaks`。'
- en: '**Location**: Select the same location as your cluster. In our case, this is
    `West US 2`.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：选择与您的集群相同的位置。在我们的情况下，这是`West US 2`。'
- en: '**Throughput Unit**: 1 unit will suffice for this test.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吞吐量单位**：1个单位足以进行此测试。'
- en: '**Auto-inflate**: Disabled.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动膨胀**：已禁用。'
- en: 'This should give you the create view similar to *Figure 9.14*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给您一个类似于*图9.14*的创建视图：
- en: '![There are various fields that need to be filled in.The Pricing tier should
    be set to Standard, the Make this namespace zone redundant tab should be disabled,
    Throughput unit should be set to 1,the Auto-inflate tab should be disabled, and
    the Name,Subscription, Resource group, and Location fields need to filled in as
    well. At the bottom of these fields you''ll see the Create tab. This is whatthe
    creation of your event hub will look like.](image/Figure_9.14.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![有各种需要填写的字段。定价层应设置为标准，使此命名空间区域冗余选项应禁用，吞吐量单位应设置为1，自动膨胀选项应禁用，并且名称、订阅、资源组和位置字段也需要填写。在这些字段的底部，您将看到创建选项卡。这就是您的事件中心创建的样子。](image/Figure_9.14.jpg)'
- en: 'Figure 9.14: Your event hub creation should look like this'
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.14：您的事件中心创建应该是这样的
- en: Hit the **Create** button at the bottom of the wizard to create your event hub.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击向导底部的**创建**按钮来创建您的事件中心。
- en: Once the event hub is created, select it, as shown in *Figure 9.15*:![Once the
    event hub is created, you will be directed to a window where you can view the
    event hub on the portal. You need to select it by clicking on your event hub's
    name.](image/Figure_9.15.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦事件中心创建完成，选择它，如*图9.15*所示：![一旦事件中心创建完成，您将被引导到一个窗口，在那里您可以在门户上查看事件中心。您需要通过点击事件中心的名称来选择它。](image/Figure_9.15.jpg)
- en: 'Figure 9.15: Clicking on the event hub name once it is created'
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.15：一旦创建，点击事件中心名称
- en: Click on **Shared access policies**, select **RootManageSharedAccessKey**, and
    copy the **Connection string-primary key**, as shown in *Figure 9.16*:![This screen
    shows the process of getting the connection string to the event hub. The first
    step is to click on Shared access policies in the left-hand menu.Step 2 is selecting
    the RootManageSharedAccessKey policy, and step 3 is clicking on the copy icon
    next to the primary connecting string.](image/Figure_9.16.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**共享访问策略**，选择**RootManageSharedAccessKey**，并复制**连接字符串-主密钥**，如*图9.16*所示：![这个屏幕显示了获取事件中心连接字符串的过程。第一步是在左侧菜单中点击共享访问策略。第二步是选择RootManageSharedAccessKey策略，第三步是点击主连接字符串旁边的复制图标。](image/Figure_9.16.jpg)
- en: 'Figure 9.16: Copying the primary connection string'
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.16：复制主连接字符串
- en: Using the Azure portal, we have created an event hub that can store and process
    our events as they are generated. We needed to gather the connection strings so
    that we can hook up our microservice-based application. In the next section, we
    will redeploy our social network and configure it to connect to Event Hubs. To
    be able to deploy our social network, we will have to make a couple of changes
    to the Helm charts, in order to point our application to Event Hubs rather than
    to Kafka.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Azure门户，我们已经创建了一个事件中心，可以存储和处理生成的事件。我们需要收集连接字符串，以便连接我们的基于微服务的应用程序。在下一节中，我们将重新部署我们的社交网络，并配置它连接到事件中心。为了能够部署我们的社交网络，我们将不得不对Helm图表进行一些更改，以便将我们的应用程序指向事件中心而不是Kafka。
- en: Modifying the Helm files
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改Helm文件
- en: 'We are going to switch the microservice deployment from using the local Kafka
    instance to using the Azure-hosted, Kafka-compatible Event Hubs instance. To make
    this change, we will modify the Helm charts to use Event Hubs rather than Kafka:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把微服务部署从使用本地Kafka实例切换到使用Azure托管的、与Kafka兼容的事件中心实例。为了做出这个改变，我们将修改Helm图表，以使用事件中心而不是Kafka：
- en: 'Modify the `values.yaml` file for the social network deployment to disable
    Kafka in the cluster and include the connection details to your event hub:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`values.yaml`文件，以禁用集群中的Kafka，并包括连接细节到您的事件中心：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Make sure to change the following values:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保更改以下值：
- en: '**Lines 5, 18, 26, and 34**: Change this to `enabled: false`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**第5、18、26和34行**：将其更改为`enabled: false`。'
- en: '**Lines 20, 28, and 36**: Change this to your event hub''s name.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**第20、28和36行**：将其更改为您的事件中心名称。'
- en: '**Lines 21, 29, and 37:** Change this to your event hub''s connection string:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**第21、29和37行**：将其更改为您的事件中心连接字符串：'
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For our demo, we are storing the connection string in a Helm values file. This
    is not a best practice. For a production use case, you should store those values
    as a secret and reference them in your deployment. We will explore this in *Chapter
    10*, *Securing your AKS cluster*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的演示，我们将连接字符串存储在Helm值文件中。这不是最佳实践。对于生产用例，您应该将这些值存储为秘密，并在部署中引用它们。我们将在*第10章*，*保护您的AKS集群*中探讨这一点。
- en: 'Run the deployment as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式运行部署：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Wait for all the Pods to be up. You can verify that all Pods are up and running
    with the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待所有的Pod启动。您可以使用以下命令验证所有的Pod是否已经启动并正在运行：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will generate the following output:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '![14 Pods displayed on the screen show their status as Running.](image/Figure_9.17.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![屏幕上显示的14个Pod显示它们的运行状态为Running。](image/Figure_9.17.jpg)'
- en: 'Figure 9.17: Output displaying Running status for all the Pods'
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.17：输出显示所有Pod的运行状态
- en: To verify that you are connected to Event Hubs, and not to local Kafka, you
    can check the event hubs in the portal, and check the different topics. You should
    see a friend and a user topic, as shown in *Figure 9.18*:![When you scroll through
    the menu located on the left side of the screen, you'll see the Entities tab.
    Click on Event Hubs under it. You will see two topics created in your event hub.
    The names of these topics should read friend and user.](image/Figure_9.18.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证您是否连接到事件中心，而不是本地Kafka，您可以在门户中检查事件中心，并检查不同的主题。您应该会看到一个friend和一个user主题，如*图9.18*所示：![当您在屏幕左侧的菜单中滚动时，您会看到实体选项卡。点击其中的事件中心。您将看到在您的事件中心中创建的两个主题。这些主题的名称应该是friend和user。](image/Figure_9.18.jpg)
- en: 'Figure 9.18: Showing the two topics created in your event hub'
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.18：显示在您的事件中心创建的两个主题
- en: 'Keep watching the Pods. When all the Pods are up and running, get the external
    IP of the edge service. You can get that IP by using the following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续观察Pod。当所有的Pod都已启动并正在运行时，获取边缘服务的外部IP。您可以使用以下命令获取该IP：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, run the following command to verify the creation of the actual social
    network:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行以下命令验证实际社交网络的创建：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will again create a social network with 15 users, but will now use Event
    Hubs to send all the user-, friend-, and recommendation-related events.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这将再次创建一个包含15个用户的社交网络，但现在将使用事件中心来发送所有与用户、好友和推荐相关的事件。
- en: 'You can see that activity on the Azure portal. The Azure portal creates detailed
    monitoring graphs for Event Hubs. To access those, click on the **friend** event
    hub, as shown in *Figure 9.19*:![In the navigation pane located on the left side
    of the screen, scroll down to the Entities section. Click on the Event Hubs. You''ll
    see two topics: friend and user. Click on the friend topic to get more metrics.](image/Figure_9.19.jpg)'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在Azure门户上看到这些活动。Azure门户为事件中心创建了详细的监控图表。要访问这些图表，请点击**friend**事件中心，如*图9.19*所示：![在屏幕左侧的导航窗格中，向下滚动到实体部分。点击事件中心。您会看到两个主题：friend和user。点击friend主题以获取更多指标。](image/Figure_9.19.jpg)
- en: 'Figure 9.19: Clicking on the friend topic to get more metrics'
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.19：点击friend主题以获取更多指标
- en: 'In *Figure 9.20*, you can see that there are three graphs that the Azure portal
    provides you with out of the box: the number of requests, the number of messages,
    and the total throughput:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图9.20*中，您可以看到Azure门户为您提供了三个图表：请求的数量、消息的数量和总吞吐量：
- en: '![The Azure portal displays three graphs for the topic. These high-level graphs
    provide the number of requests, the number of messages, and the total throughput.
    Each of these graphs has a blue icon at the bottom that indicates the incoming
    requests, the incoming messages, and the incoming bytes. You will also see an
    orange icon that indicates the Successful Requests, Outgoing messages and the
    Outgoing Bytes. The graphs in the picture show an upwards spike.](image/Figure_9.20.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![Azure门户显示了主题的三个图表。这些高级图表提供了请求的数量，消息的数量和总吞吐量。这些图表的底部都有一个蓝色图标，表示传入请求，传入消息和传入字节。您还将看到一个橙色图标，表示成功的请求，传出消息和传出字节。图片中的图表显示了上升的尖峰。](image/Figure_9.20.jpg)'
- en: 'Figure 9.20: Display of the high-level graphs by default per topic'
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.20：默认情况下显示高级图表
- en: 'You can drill down further in the individual graphs. For example, click on
    the messages graph. This will bring you to an interactive graph editor in Azure
    monitor. You can see on a minute-by-minute basis how many messages were coming
    in and going out of your event hub, as shown in *Figure 9.21*:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以进一步深入研究各个图表。例如，单击消息图表。这将带您进入Azure监视器中的交互式图表编辑器。您可以按分钟查看事件中心的进出消息数量，如*图9.21*所示：
- en: '![Upon clicking on the second graph,which indicates the number of messages,
    you will see more details.Apart from the blue and orange icons, you will also
    see indigo and teal icons that indicate the captured messages and Capture backlog
    (Sum) respectively.](image/Figure_9.21.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![单击第二个图表，表示消息数量，您将看到更多详细信息。除了蓝色和橙色图标外，您还将看到靛蓝色和水绿色图标，分别表示捕获的消息和捕获积压（总和）。](image/Figure_9.21.jpg)'
- en: 'Figure 9.21: Clicking on the graph to get more details'
  id: totrans-146
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.21：单击图表以获取更多详细信息
- en: 'Let''s make sure to clean up the deployment we just created and scale our cluster
    back down:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保清理我们刚刚创建的部署，并将我们的集群缩减回去：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also delete the event hub in the Azure portal. To delete the Event
    Hub, go to the **Overview** page of the event hub and select the **Delete** button,
    as shown in *Figure 9.22*. You will be asked to repeat the event hub''s name to
    ensure that you don''t delete it accidentally:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Azure门户中删除事件中心。要删除事件中心，请转到事件中心的**概述**页面，并选择**删除**按钮，如*图9.22*所示。系统会要求您重复事件中心的名称，以确保您不会意外删除它：
- en: '![Click on Overview in the navigation pane located on the left side of the
    screen. You will see the details of the event hub you created. To delete this
    event hub, click on the Delete button located in the toolbar. This button is located
    to the left of the Refresh button.](image/Figure_9.22.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![单击左侧屏幕上的导航窗格中的概述。您将看到您创建的事件中心的详细信息。要删除此事件中心，请单击工具栏中的删除按钮。此按钮位于刷新按钮的左侧。](image/Figure_9.22.jpg)'
- en: 'Figure 9.22: Clicking the delete button to delete your event hub'
  id: totrans-151
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.22：单击删除按钮以删除您的事件中心
- en: This concludes our example of using Event Hubs with the Azure Kubernetes Service.
    In this example, we reconfigured a Kafka application to use Azure Event Hubs instead.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了我们使用Azure Kubernetes服务与事件中心的示例。在这个示例中，我们重新配置了一个Kafka应用程序，以使用Azure事件中心。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we deployed a microservices-based application that connects
    to Kafka. We used Helm to deploy this sample application. We were able to test
    the application by sending events to a locally created Kafka cluster and watching
    objects being created and updated.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们部署了一个基于微服务的应用程序，连接到Kafka。我们使用Helm部署了这个示例应用程序。我们能够通过向本地创建的Kafka集群发送事件并观察创建和更新的对象来测试应用程序。
- en: Finally, we covered storing events in Azure Event Hubs using Kafka support,
    and we were able to gather the required details to connect our microservice-based
    application and modify the Helm chart.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们介绍了使用Kafka支持在Azure事件中心存储事件，并且我们能够收集所需的细节来连接我们基于微服务的应用程序并修改Helm图表。
- en: The next chapter will cover cluster security. We will cover RBAC security, secret
    management, and network security using Istio.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将涵盖集群安全性。我们将涵盖RBAC安全性、秘钥管理以及使用Istio的网络安全。
