["```kt\nval randGenerator = Random()\n```", "```kt\nvar ourRandomNumber = randGenerator.nextInt(10)\n```", "```kt\nourRandomNumber ++\n```", "```kt\nvar note1 = Note()\nvar note2 = Note()\nvar note3 = Note()\n// 96 more lines like the above\nvar note100 = Note()\n```", "```kt\nvar topScore1: Int\nvar topScore2: Int\n// 96 more lines like the above\nvar topScore100: Int\n```", "```kt\ntopScore100 = topScore99;\ntopScore99 = topScore98;\ntopScore98 = topScore97;\n// 96 more lines like the above\ntopScore1 = score;\n```", "```kt\nvar myIntArray: IntArray\n```", "```kt\nvar myFloatArray: FloatArray\nvar myBooleanArray: BooleanArray\n```", "```kt\nmyIntArray = IntArray(100)\nmyFloatArray = FloatArray(100)\nmyBooleanArray = BooleanArray(100)\n```", "```kt\nmyIntArray [0] = 5\nmyIntArray [1] = 6\nmyIntArray [2] = 7\n```", "```kt\nmyIntArray [3] = \"John Carmack\" \n// Won't compile String not Int\n```", "```kt\nmyIntArray [3] = 123\n```", "```kt\nmyIntArray [10] = myIntArray [9] - myIntArray [4]\n```", "```kt\nVal myNamedInt = myIntArray[3]\n```", "```kt\nvar someStrings = Array<String>(5) { \"\" }\n// You can remove the String keyword because it can be inferred like \n// this\nvar someMoreStrings = Array(5) { \"\" }\n\nsomeStrings[0]= \"Hello \"\nsomeStrings[1]= \"from \"\nsomeStrings[2]= \"inside \"\nsomeStrings[3]= \"the \"\nsomeStrings[4]= \"array \"\nsomeStrings[5]= \"Oh dear \"\n// ArrayIndexOutOfBoundsException\n```", "```kt\n        var evenMoreStrings: Array<String> = \n                arrayOf(\"Houston\", \"we\", \"have\", \"an\", \"array\")\n```", "```kt\nval howBig = someArray.size\n```", "```kt\nval cities = arrayOf(\"London\", \"New York\", \"Yaren\")\nval countries = arrayOf(\"UK\", \"USA\", \"Nauru\")\n\nval countriesAndCities = arrayOf(countries, cities)\n\nLog.d(\"The capital of \" +\n   countriesAndCities[0][0],\n   \" is \" +\n   countriesAndCities[1][0])\n```", "```kt\nThe capital of UK:  is London\n\n```", "```kt\n// Declaring an array\n// Allocate memory for a maximum size of 5 elements\nval ourArray = IntArray(5)\n\n// Initialize ourArray with values\n// The values are arbitrary, but they must be Int\n// The indexes are not arbitrary. Use 0 through 4 or crash!\n\nourArray[0] = 25\nourArray[1] = 50\nourArray[2] = 125\nourArray[3] = 68\nourArray[4] = 47\n\n//Output all the stored values\nLog.i(\"info\", \"Here is ourArray:\")\nLog.i(\"info\", \"[0] = \" + ourArray[0])\nLog.i(\"info\", \"[1] = \" + ourArray[1])\nLog.i(\"info\", \"[2] = \" + ourArray[2])\nLog.i(\"info\", \"[3] = \" + ourArray[3])\nLog.i(\"info\", \"[4] = \" + ourArray[4])\n```", "```kt\n/*\n   We can do any calculation with an array element\n   provided it is appropriate to the contained type\n   Like this:\n*/\nval answer = ourArray[0] +\n      ourArray[1] +\n      ourArray[2] +\n      ourArray[3] +\n      ourArray[4]\n\nLog.i(\"info\", \"Answer = $answer\")\n```", "```kt\ninfo\ufe55 Here is ourArray:\ninfo\ufe55 [0] = 25\ninfo\ufe55 [1] = 50\ninfo\ufe55 [2] = 125\ninfo\ufe55 [3] = 68\ninfo\ufe55 [4] = 47\ninfo\ufe55 Answer = 315 \n\n```", "```kt\n// Declaring and allocating in one step\nval ourArray = IntArray(1000)\n\n// Let's initialize ourArray using a for loop\n// Because more than a few variables is allot of typing!\n\nfor (i in 0..999) {\n\n   // Put the value into ourArray\n   // At the position decided by i.\n   ourArray[i] = i * 5\n\n   //Output what is going on\n   Log.i(\"info\", \"i = $i\")\n   Log.i(\"info\", \"ourArray[i] = ${ ourArray[i]}\")\n}\n```", "```kt\ninfo\ufe55 i = 0\ninfo\ufe55 ourArray[i] = 0\ninfo\ufe55 i = 1\ninfo\ufe55 ourArray[i] = 5\ninfo\ufe55 i = 2\ninfo\ufe55 ourArray[i] = 10\n\n```", "```kt\ninfo\ufe55 ourArray[i] = 4985\ninfo\ufe55 i = 998\ninfo\ufe55 ourArray[i] = 4990\ninfo\ufe55 i = 999\ninfo\ufe55 ourArray[i] = 4995\n\n```", "```kt\nval ourArray = IntArray(1000)\n```", "```kt\nfor (i in 0..999) {\n```", "```kt\n   ourArray[i] = i * 5\n```", "```kt\n   //Output what is going on\n   Log.i(\"info\", \"i = $i\")\n   Log.i(\"info\", \"ourArray[i] = ${ ourArray[i]}\")\n```", "```kt\n// Declare a new ArrayList called myList \n// to hold Int variables\nval myList: ArrayList<Int>\n\n// Initialize myList ready for use\nmyList = ArrayList()\n```", "```kt\nval myList: ArrayList<Int> = ArrayList()\n```", "```kt\n// declare and initialize a new ArrayList\nval myList = ArrayList<String>()\n\n// Add a new String to myList in \n// the next available location\nmyList.add(\"Donald Knuth\")\n// And another\nmyList.add(\"Rasmus Lerdorf\")\n// We can also choose 'where' to add an entry\nmyList.add(1,\"Richard Stallman\")\n\n// Is there anything in our ArrayList?\nif (myList.isEmpty()) {\n   // Nothing to see here\n} else {\n   // Do something with the data\n}\n\n// How many items in our ArrayList?\nval numItems = myList.size\n\n// Now where did I put Richard?\nval position = myList.indexOf(\"Richard Stallman\")\n```", "```kt\nfor (String s : myList)\n```", "```kt\nfor (s in myList) {\n   Log.i(\"Programmer: \", \"$s\")\n}\n```", "```kt\nProgrammer:: Donald Knuth\nProgrammer:: Richard Stallman\nProgrammer:: Rasmus Lerdorf\n\n```", "```kt\n// This code assumes we have an Animal class\n// And we have a Cat and Dog class that \n// inherits from Animal\nval myAnimal = Animal()\nval myDog = Dog()\nval myCat = Cat()\nval myAnimals = arrayOfNulls<Animal>(10)\nmyAnimals[0] = myAnimal // As expected\nmyAnimals[1] = myDog // This is OK too\nmyAnimals[2] = myCat // And this is fine as well\n```", "```kt\n// 6 months later we need elephants\n// with its own unique aspects\n// If it extends Animal we can still do this\nval myElephant = Elephant()\nmyAnimals[3] = myElephant // And this is fine as well\n```", "```kt\nval characterMap: Map<String, Character>\n```", "```kt\ncharacterMap = HashMap()\n```", "```kt\ncharacterMap.put(\"Geralt\", Character())\ncharacterMap.put(\"Ciri\", Character())\ncharacterMap.put(\"Triss\", Character())\n```", "```kt\nval ciri = characterMap.get(\"Ciri\")\n```", "```kt\ncharacterMap.get(\"Geralt\").drawSilverSword()\n\n// Or maybe call some other hypothetical function\ncharacterMap.get(\"Triss\").openFastTravelPortal(\"Kaer Morhen\")\n```"]