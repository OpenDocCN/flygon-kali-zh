- en: Chapter 10. Taking an Action in C# Functional Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。在C#函数式编程中采取行动
- en: This is the most important chapter of this book since we will create a new application
    using a functional approach. We have already discussed functional programming
    in depth in the previous chapters, including functional programming concepts,
    **Language Integrated Query** ( **LINQ** ), recursion, optimizing, and patterns.
    What we are going to do now is develop an application with an imperative approach
    and then refactor it into a functional approach.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书最重要的一章，因为我们将使用函数式方法创建一个新的应用程序。我们已经在前几章中深入讨论了函数式编程，包括函数式编程概念、语言集成查询（**LINQ**）、递归、优化和模式。我们现在要做的是以命令式方法开发一个应用程序，然后将其重构为函数式方法。
- en: In this chapter, we will create a Windows forms application and explore how
    to create a form and then add the code to it. After finishing this chapter, we
    will be able to refactor the Windows form application from an imperative approach
    into a functional approach.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个Windows窗体应用程序，并探索如何创建一个窗体，然后向其添加代码。完成本章后，我们将能够将Windows窗体应用程序从命令式方法重构为函数式方法。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a Windows forms application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Windows窗体应用程序
- en: Exploring how to create a form and then add the code to it
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索如何创建一个窗体，然后向其添加代码
- en: Creating engine code in an imperative approach
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令式方法中创建引擎代码
- en: Transform the engine code from an imperative to a functional approach
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将引擎代码从命令式转换为函数式方法
- en: Developing functional programming in Windows forms
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows窗体中开发函数式编程
- en: 'Now, we are going to develop a calculator application in a Windows forms application.
    For this purpose, we have to create a new Windows forms project and a new form
    with several buttons to contain the numbers 0 to 9 and additional functionality,
    such as the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在Windows窗体应用程序中开发一个计算器应用程序。为此，我们必须创建一个新的Windows窗体项目和一个新的窗体，其中包含数字0到9和其他功能的多个按钮，如下面的屏幕截图所示：
- en: '![Developing functional programming in Windows forms](img/Image00113.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows窗体中开发函数式编程](img/Image00113.jpg)'
- en: 'As you can see, we have 10 buttons that represent the numbers 0 to 9 and standard
    mathematical operators such as add ( **+** ), subtract ( **-** ), multiply ( *****
    ), and divide ( **/** ). We also have some additional function buttons; they are
    square root ( **sqrt** ), percent ( **%** ) and inverse ( **1/x** ). The rest
    includes these buttons: switch sign ( **+/-** ), decimal ( **.** ), Clear Entry
    ( **CE** ), Clear All ( **C** ), and Backspace ( **del** ). We also have a textbox
    to display the number we entered and set at the top of the form. Last but not
    least, there is always an equal button in all calculator applications. We give
    names to all these controls, as shown in the following code snippet:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有10个按钮，代表数字0到9和标准数学运算符，如加（**+**），减（**-**），乘（*****）和除（**/**）。我们还有一些额外的功能按钮；它们是平方根（**sqrt**），百分比（**%**）和倒数（**1/x**）。其余包括这些按钮：切换符号（**+/-**），小数点（**.**），清除输入（**CE**），全部清除（**C**）和退格（**del**）。我们还有一个文本框来显示我们输入的数字，并设置在窗体的顶部。最后但并非最不重要的是，在所有计算器应用程序中都有一个等号按钮。我们给所有这些控件命名，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After we have all these controls, the following code snippet contains only
    the control''s name and click events, if any, that we have to set in order to
    ease the creation of this app since the control''s name is unchanged:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们拥有所有这些控件之后，以下代码片段仅包含控件的名称和单击事件（如果有的话），我们必须设置以便简化此应用程序的创建，因为控件的名称未更改：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Additional settings, such as the control's axis location, font, or alignment,
    don't matter since the settings won't affect the entire code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 附加设置，如控件的轴位置、字体或对齐方式，不重要，因为这些设置不会影响整个代码。
- en: Creating the code behind a form
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建窗体的代码后台
- en: 'All controls in the form are set and we are now ready to add some code to it.
    As you can see in all the event clicks in the previous code snippet, there are
    five functions that will be called for a specific button when pressed: `btnNumber_Click()`
    , `btnFunction_Click()` , `btnEquals_Click()` , `btnClear_Click()` , and `btnOperator_Click()`
    .'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 窗体中的所有控件都已设置好，现在我们准备向其添加一些代码。如前面代码片段中的所有事件点击中所示，当按下特定按钮时，将调用五个函数：`btnNumber_Click()`，`btnFunction_Click()`，`btnEquals_Click()`，`btnClear_Click()`和`btnOperator_Click()`。
- en: The `btnNumber_Click()` function is for the 0 to 9 button. The `btnFunction_Click()`
    function is for the `btnSwitchSign` , `btnDecimal` , `btnSqrt` , `btnPercent`
    , `btnInverse` , and `btnDelete` button. The `btnEquals_Click()` function is for
    the `btnEquals` buttons. The `btnClear_Click()` function is for the `btnClearAll`
    and `btnClearEntry` buttons. And `btnOperator_Click()` is for the `btnAdd` , `btnSubstract`
    , `btnDivide` , and `btnMultiply` buttons. Also, there will be some helper functions
    that we will discuss.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`btnNumber_Click()`函数用于0到9按钮。`btnFunction_Click()`函数用于`btnSwitchSign`，`btnDecimal`，`btnSqrt`，`btnPercent`，`btnInverse`和`btnDelete`按钮。`btnEquals_Click()`函数用于`btnEquals`按钮。`btnClear_Click()`函数用于`btnClearAll`和`btnClearEntry`按钮。`btnOperator_Click()`用于`btnAdd`，`btnSubstract`，`btnDivide`和`btnMultiply`按钮。还将有一些我们将讨论的辅助函数。'
- en: 'Now let''s look at the following code snippet, which contains the implementation
    of the `btnNumber_Click()` function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下以下代码片段，其中包含了`btnNumber_Click()`函数的实现：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see from the preceding code snippet, the `btnNumber_Click()` function
    will detect the pressed number button and then display it in the textbox. For
    now, let's skip the `CalcEngine.AppendNum()` and `UpdateScreen()` functions since
    we are going to discuss them later.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，`btnNumber_Click()`函数将检测按下的数字按钮，然后在文本框中显示它。现在，让我们暂时跳过`CalcEngine.AppendNum()`和`UpdateScreen()`函数，因为我们将在后面讨论它们。
- en: 'Let''s move on to the `btnFunction_Click()` function, which will take an action
    if one of the functional buttons is pressed. The implementation of the function
    is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续看`btnFunction_Click()`函数，它将在按下功能按钮时执行一个操作。该函数的实现如下：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see from the preceding code snippet, `btnFunction_Click()` will take
    action when the `btnSqrt` , `btnPercent` , `btnInverse` , `btnDelete` , `btnSwitchSign`
    , or `btnDecimal` buttons are pressed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段可以看出，`btnFunction_Click()`将在按下`btnSqrt`、`btnPercent`、`btnInverse`、`btnDelete`、`btnSwitchSign`或`btnDecimal`按钮时采取行动。
- en: 'For the function that is responsible when one of the operator buttons is pressed,
    here is the code snippet of the `btnOperator_Click()` function implementation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 负责当操作符按钮之一被按下时的函数，以下是`btnOperator_Click()`函数实现的代码片段：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding `btnOperator()` function will be used to run the operation of
    each operator: add, subtract, multiply, and divide. It then calls the `PrepareOperation()`
    method in the `CalcEngine` class, which we will discuss later.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`btnOperator()`函数将用于运行每个操作符的操作：加、减、乘、除。然后调用`CalcEngine`类中的`PrepareOperation()`方法，我们稍后会讨论。
- en: 'To clear an entry or all entries, we have two buttons: `btnClearEntry` and
    `btnClearAll` . These two buttons will call the `btnClear_Click()` method every
    time the press event is generated. The implementation of this function is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要清除一个条目或所有条目，我们有两个按钮：`btnClearEntry`和`btnClearAll`。这两个按钮每次生成按下事件时都会调用`btnClear_Click()`方法。该函数的实现如下：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There are two methods in the `CalcEngine` class, as well, which are called
    when these two clearing buttons are pressed: `CalcEngine.Clear()` for the `btnClearEntry`
    button and `CalcEngine.ClearAll()` for the `btnClearAll` button.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`CalcEngine`类中也有两个方法，当这两个清除按钮被按下时会被调用：`CalcEngine.Clear()`用于`btnClearEntry`按钮，`CalcEngine.ClearAll()`用于`btnClearAll`按钮。'
- en: 'The last button we have is the `btnEquals` button, which will call the `btnClear_Click()`
    method every time it is pressed; the implementation as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有的最后一个按钮是`btnEquals`按钮，每次按下时都会调用`btnClear_Click()`方法；实现如下：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From the preceding code snippet, when the `btnEquals` button is pressed, it
    tries to calculate the operation the user has given before calling the `CalcEngine.Solve()`
    method and then updating the textbox. If the calculation fails, it will clear
    the entries.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码片段可以看出，当按下`btnEquals`按钮时，它会尝试计算用户在调用`CalcEngine.Solve()`方法之前给出的操作，然后更新文本框。如果计算失败，它将清除条目。
- en: 'Now, let''s create the `UpdateScreen()` method, which is used to display the
    current digit to the `txtScreen` textbox. The implementation is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`UpdateScreen()`方法，用于将当前数字显示到`txtScreen`文本框中。实现如下：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Inside the `UpdateScreen()` method, the `FormatDisplay(` ) method is called
    to form the display on `txtScreen` . The implementation of the `FormatDisplay()`
    method is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UpdateScreen()`方法内，调用`FormatDisplay()`方法来在`txtScreen`上形成显示。`FormatDisplay()`方法的实现如下：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Based on the preceding `FormatDisplay()` function implementation, the first
    thing that happens is that the function checks whether it is a negative number.
    If it does, the negative will be removed first and then the `addNegative` flag
    will be `true` , as shown in the following code snippet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的`FormatDisplay()`函数实现，首先发生的是函数检查它是否为负数。如果是，首先将移除负号，然后`addNegative`标志将为`true`，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It then looks for the dot (`.` ) character to indicate that it''s a decimal
    number. If the dot is found, it will store the fraction in the `dec` variable
    and the rest in the `str` variable, as shown in the following code snippet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后查找小数点（`.`）字符以指示它是一个小数。如果找到小数点，它将把小数部分存储在`dec`变量中，其余部分存储在`str`变量中，如下面的代码片段所示：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, the function will make sure that the number is less than 10^(19) . If
    it is, the following code snippet will format the number:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，函数将确保数字小于10^(19)。如果是，以下代码片段将格式化数字：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result from the preceding format will be joined with the `dec` variable.
    If there''s no fraction in the `dec` variable, the dot character will be added
    to the last position, as shown in the following code snippet:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的格式中得到的结果将与`dec`变量连接。如果`dec`变量中没有小数部分，则小数点字符将被添加到最后位置，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If only the fraction number is available, the `0` character will be added at
    the first position, as shown in the following code snippet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有小数部分可用，则`0`字符将被添加到第一个位置，如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lastly, we check whether the `addNegative` flag is `true` . If it is, the negative
    mark (`-` ) will be added at the first position, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查`addNegative`标志是否为`true`。如果是，负号（`-`）将被添加到第一个位置，如下所示：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating the engine code in an imperative approach
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以命令式方法创建引擎代码
- en: We have successfully created the code behind the form. Now let's create the
    engine code in a wrapped class named `CalcEngine` . We will design it in a `CalcEngine.cs`
    file in the `CalculatorImperative.csproj` project.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功创建了表单的后台代码。现在让我们在名为`CalcEngine`的包装类中创建引擎代码。我们将在`CalculatorImperative.csproj`项目中的`CalcEngine.cs`文件中设计它。
- en: Preparing class properties
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备类属性
- en: 'In this calculator engine class, we need some properties to hold a particular
    value to be involved in the calculation process. The following code snippet is
    the class properties'' declaration we are going to use in the calculation process:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个计算器引擎类中，我们需要一些属性来保存参与计算过程的特定值。以下是我们将在计算过程中使用的类属性声明的代码片段：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, we have eight properties that will be involved in the calculation
    process. The `m_input` property will hold all the values we have inputted and
    the formatting number `m_sign` will store whether the number is `+` or `-` . The
    `m_operator` property will store the operator, which is `+` for addition, `-`
    for subtraction, `*` for multiplication, and `/` for division. The `m_lastNum`
    property will hold the result of the calculation. The `m_lastInput` property will
    save the last number the user has inputted. The `m_wait` property is a flag that
    indicates that the number has been inputted and it's time to wait for the operator
    and the next number. The `m_decimal` property flag indicates whether or not it's
    a decimal number. And the `m_lastHitEquals` property flag indicates whether `btnEquals`
    has been pressed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有八个属性将参与计算过程。`m_input`属性将保存我们输入的所有值和格式化数字`m_sign`将存储数字是`+`还是`-`。`m_operator`属性将存储运算符，即`+`表示加法，`-`表示减法，`*`表示乘法，`/`表示除法。`m_lastNum`属性将保存计算结果。`m_lastInput`属性将保存用户输入的最后一个数字。`m_wait`属性是一个标志，表示数字已经输入，现在是等待运算符和下一个数字的时间。`m_decimal`属性标志表示是否为小数。`m_lastHitEquals`属性标志表示`btnEquals`是否已被按下。
- en: Constructing the constructor
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造构造函数
- en: 'In every class, it''s best to have a constructor to prepare the properties
    of the class. It''s the same with this class as well. The following is the code
    snippet of the class constructor implementation:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个类中，最好有一个构造函数来准备类的属性。这个类也是一样。以下是类构造函数实现的代码片段：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see from the preceding code snippet, if we want to reset all the
    class properties we have to call the constructor, which is `CalcEngine()` . For
    `m_input` , we use the dot (`.` ) character to indicate that there is no user
    inputted. We also use the `static` modifier since the class will be called directly
    by stating the class name instead of the instance of the class.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码片段可以看出，如果我们想要重置所有类属性，我们必须调用构造函数，即`CalcEngine()`。对于`m_input`，我们使用点（`.`）字符表示没有用户输入。我们还使用`static`修饰符，因为类将直接通过类名而不是类的实例来调用。
- en: Clearing the properties
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清除属性
- en: 'Earlier, we discussed that we have two clearing methods: `ClearAll()` and `Clear()`
    , as shown in the following code snippet:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们讨论过我们有两个清除方法：`ClearAll()`和`Clear()`，如下所示：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code snippet is extracted from the `btnClear_Click()` method.
    Here is the implementation of the `ClearAll()` method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段是从`btnClear_Click()`方法中提取的。以下是`ClearAll()`方法的实现：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `ClearAll()` method will reset all properties the `CalcEngine` class has.
    This is similar to the class constructor implementation. So, we can modify the
    class constructor implementation as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClearAll()`方法将重置`CalcEngine`类的所有属性。这类似于类构造函数的实现。因此，我们可以修改类构造函数的实现如下：'
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also have the `Clear()` method to clear the last entry only. For this purpose,
    we just need to reset `m_sign` , `m_input` , and `m_decimal` . The implementation
    of the `Clear()` method is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有`Clear()`方法只清除最后一个条目。为此，我们只需要重置`m_sign`，`m_input`和`m_decimal`。`Clear()`方法的实现如下：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Appending the number to the display box
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数字附加到显示框
- en: 'As we know, we have a textbox to display the number we have inputted or to
    display the result of calculation. In the `btnNumber_Click()` method implementation,
    we call the `CalcEngine.AppendNum()` method, and here is its implementation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，我们有一个文本框来显示我们输入的数字或显示计算结果。在`btnNumber_Click()`方法的实现中，我们调用`CalcEngine.AppendNum()`方法，以下是其实现：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'From the preceding code, we can see that we have to distinguish the number
    with a negative sign or a decimal number with a dot mark. For this purpose, we
    use the following code snippet:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码可以看出，我们必须区分带有负号的数字或带有点号标记的小数。为此，我们使用以下代码片段：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If it''s a pure number without a negative number or decimal mark, we check
    whether `m_input` is empty or whether the `m_wait` flag is `true` . If it is,
    we can continue the process. If the decimal flag is on, we don''t need to insert
    the dot mark anymore; otherwise, we have to add the dot mark. The following code
    snippet will explain more about our explanation:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是一个没有负数或小数点的纯数字，我们检查`m_input`是否为空或`m_wait`标志是否为`true`。如果是，我们可以继续进程。如果小数标志打开，我们就不需要再插入点号了；否则，我们必须添加点号。以下代码片段将更详细地解释我们的解释：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see, we call the `IsEmpty()` function to check whether `m_input`
    is empty or the `m_wait` flag is true. The implementation of the function is as
    follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们调用`IsEmpty()`函数来检查`m_input`是否为空或`m_wait`标志是否为true。函数的实现如下：
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If `IsEmpty()` returns `true` , it will continue the process, as shown in the
    following code snippet:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`IsEmpty()`返回`true`，它将继续进程，如下所示：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: From the preceding code, first, we check whether the `m_lastHitEquals` flag
    is on. If it is, we reset all class properties and then set `m_lastHitEquals`
     to off. Then, we check whether the `m_decimal` flag is on. If it is, insert the
    dot mark in front of the number. If not, insert the dot mark behind the number.
    After that, turn off the `m_wait` flag.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码，首先，我们检查`m_lastHitEquals`标志是否打开。如果是，我们重置所有类属性，然后将`m_lastHitEquals`设置为关闭。然后，我们检查`m_decimal`标志是否打开。如果是，将点号插入数字前面。如果不是，在数字后面插入点号。之后，关闭`m_wait`标志。
- en: 'We also have to make sure there are no unnecessary zeroes that have been inserted
    using the following code snippet:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须确保没有插入不必要的零，使用以下代码片段：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding code will handle the user input if it doesn''t contain a negative
    mark (`-` ) or dot mark. If it does, we have to check whether it has these marks
    or not using the following code snippet:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将处理用户输入，如果不包含负号（`-`）或点号。如果有，我们必须使用以下代码片段来检查它是否有这些标记：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'However, before we perform the preceding process, we have to reset all the
    class properties and reformat the number as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在执行上述过程之前，我们必须重置所有类属性并重新格式化数字如下：
- en: '[PRE28]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Again, we remove unnecessary zeroes and turn off the `m_wait` flag as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们删除不必要的零并关闭`m_wait`标志，如下所示：
- en: '[PRE29]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Preparing the mathematical operation
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备数学运算
- en: 'When we press one of the operator buttons, the `btnOperator_Click()` function
    will be fired; inside the function, there is a `CalcEngine.PrepareOperation()`
    function to prepare the calculation. The implementation of the `CalcEngine.PrepareOperation()`
    function is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按下运算符按钮之一时，将触发`btnOperator_Click()`函数；在函数内部，有一个`CalcEngine.PrepareOperation()`函数来准备计算。`CalcEngine.PrepareOperation()`函数的实现如下：
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The explanation of the preceding code is straightforward. We just need to know
    which button is pressed, +, -, ***,** or /. Then, we check whether it is the first
    number that the user inputs by checking whether `m_lastNum` is null or not or
    whether `m_wait` is on. If it is, we solve the calculation after we make sure
    that `m_lastNum` is not null, `m_lastHitEquals` is off, `m_wait` is off, and the
    current `m_operator` is different from the operator, which was just pressed by
    a user. After this, we replace `m_operator` with the current operator that the
    user inputs and fill `m_lastNum` with `m_input` that has been formatted. Also,
    other settings will have to be applied. The following code snippet will explain
    this better:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的解释很简单。我们只需要知道用户按下了哪个按钮，+，-，***，**或/。然后，我们检查用户输入的是否是第一个数字，方法是检查`m_lastNum`是否为空，或者`m_wait`是否打开。如果是，我们在确保`m_lastNum`不为空，`m_lastHitEquals`关闭，`m_wait`关闭，并且当前`m_operator`与用户刚刚按下的运算符不同的情况下解决计算。之后，我们用用户输入的当前运算符替换`m_operator`，并用已格式化的`m_input`填充`m_lastNum`。还必须应用其他设置。以下代码片段将更好地解释这一点：
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Otherwise, if it''s not the first number the user inputs, we can perform the
    following process:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果这不是用户输入的第一个数字，我们可以执行以下过程：
- en: '[PRE32]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Formatting the input
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化输入
- en: 'Before we go to the `Solve()` function implementation we discussed in the previous
    `PrepareOperation()` function, let''s discuss the `FormatInput()` function first.
    The following is the implementation of the `FormatInput()` method:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入上一个`PrepareOperation()`函数中讨论的`Solve()`函数实现之前，让我们先讨论`FormatInput()`函数。以下是`FormatInput()`方法的实现：
- en: '[PRE33]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `FormatInput()` method is used to form the number that will be shown in
    the `txtScreen` textbox.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormatInput()`方法用于形成将显示在`txtScreen`文本框中的数字。'
- en: Solving the calculation
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决计算
- en: 'When we press the `btnEquals` button or the operator button that has the previous
    input, the `Solve()` method will be invoked to calculate the operation. The following
    is the implementation of the method:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按下`btnEquals`按钮或具有先前输入的运算符按钮时，将调用`Solve()`方法来计算操作。以下是该方法的实现：
- en: '[PRE34]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Calculating the additional operation
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算附加操作
- en: 'As we have discussed, we have other functional buttons: the `btnSqrt` , `btnPercent`
    , `btnInverse` , `btnDelete` , `btnSwitchSign` , and `btnDecimal` buttons. Here
    is the method that will be invoked if one of these buttons is pressed:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论过的，我们还有其他功能按钮：`btnSqrt`，`btnPercent`，`btnInverse`，`btnDelete`，`btnSwitchSign`和`btnDecimal`按钮。以下是如果按下其中一个按钮将被调用的方法：
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Creating the engine code in the functional approach
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在功能方法中创建引擎代码
- en: We have successfully created the calculator application in the imperative approach.
    Now, it's time to refactor all the imperative code into the functional code. We
    are going to refactor the engine first and then the code behind the form.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功使用命令式方法创建了计算器应用程序。现在，是时候将所有命令式代码重构为功能代码。我们将首先重构引擎，然后是表单后面的代码。
- en: Adding several new properties
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加几个新属性
- en: 'We will have exactly the same properties as with the imperative code, except
    that we add three new properties, as shown in the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将与命令式代码完全相同的属性，只是添加了三个新属性，如下所示：
- en: '[PRE36]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As you can see in the preceding code, `m_solve` , `m_answer` , and `m_funcSuccess`
    are the new properties we have just added. We will use these three additional
    properties in the `Solve()` function later.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上述代码中所看到的，`m_solve`，`m_answer`和`m_funcSuccess`是我们刚刚添加的新属性。我们稍后将在`Solve()`函数中使用这三个附加属性。
- en: Simplifying the pattern matching
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简化模式匹配
- en: 'As we discussed in Chapter 9, *Working with Pattern* , we will use the `Simplicity`
    class, which we can find in the `SimplicityLib.cs` file. The implementation of
    the class is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第9章“使用模式”中讨论的那样，我们将使用`Simplicity`类，我们可以在`SimplicityLib.cs`文件中找到。该类的实现如下：
- en: '[PRE37]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Assigning the properties
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分配属性
- en: 'To able to assign properties, we need to assign the properties'' extension
    method. The following code will explain this better:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够分配属性，我们需要分配属性的扩展方法。以下代码将更好地解释这一点：
- en: '[PRE38]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Every time we invoke one of the preceding methods, the method will return the
    `Calc` class in which the target property has been changed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用上述方法之一时，该方法将返回已更改目标属性的`Calc`类。
- en: Constructing the class by clearing the properties
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过清除属性构造类
- en: 'We will not construct the class in this functional approach; we will clear
    properties to make all the properties ready to run the process. There are two
    clearing methods that we will use: the `Clear()` and `ClearAll()` methods. The
    following code snippet is the implementation of these two methods:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种功能方法中，我们不会构造类；我们将清除属性以使所有属性准备好运行该过程。我们将使用两种清除方法：`Clear()`和`ClearAll()`方法。以下代码片段是这两种方法的实现：
- en: '[PRE39]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As we discussed in the imperative approach, the `Clear(` ) method is for the
    `btnClearEntry` button and `ClearAll()` is for the `btnClearAll` button.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论命令式方法时，`Clear()`方法是用于`btnClearEntry`按钮的，`ClearAll()`是用于`btnClearAll`按钮的。
- en: Appending the inputted number to the text box
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将输入的数字附加到文本框
- en: 'In this functional approach, we will refactor the `AppendNum()` method in the
    imperative approach into the functional approach, as shown in the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种功能性方法中，我们将把命令式方法中的`AppendNum()`方法重构为功能性方法，如下所示：
- en: '[PRE40]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Preparing the operation
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备操作
- en: 'To prepare the operation just after we press the operator button, here is the
    code that has been refactored from the `PreparingOperation()` method in the imperative
    approach:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在按下运算符按钮后准备操作，以下代码是从命令式方法中重构的`PreparingOperation()`方法：
- en: '[PRE41]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Formatting the input
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化输入
- en: 'To format the input that we use to form the input in `txtScreen` , we will
    use the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了格式化我们用来形成`txtScreen`输入的输入，我们将使用以下代码：
- en: '[PRE42]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As you can see in the preceding code, we use the `ModifyStringWhen()` extension
    method, which has the following implementation:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上述代码中所看到的，我们使用了`ModifyStringWhen()`扩展方法，其实现如下：
- en: '[PRE43]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Solving the calculation
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决计算
- en: 'The solving calculation can be done using the `Solve()` method in the imperative
    approach. The following code is the refactoring `Solve()` method from the imperative
    approach:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 解决计算可以使用命令式方法中的`Solve()`方法。以下代码是从命令式方法中重构的`Solve()`方法：
- en: '[PRE44]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For the implementation of the `CleanUp()` , `Answer()` , and `UpdateAnswerToCalc()`
    methods, we can use the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`CleanUp()`，`Answer()`和`UpdateAnswerToCalc()`方法的实现，我们可以使用以下代码：
- en: '[PRE45]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We also need to create the extension method for the `string` data type to accommodate
    the addition, subtraction, multiplication, and division operations, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为`string`数据类型创建扩展方法，以适应加法、减法、乘法和除法运算，如下所示：
- en: '[PRE46]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Calculating the additional operation
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算额外的操作
- en: 'For the additional button, which will invoke the `FunctionButton()` method
    every time the additional button is pressed, here is the refactoring code from
    the imperative `FunctionButton()` method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于附加按钮，每次按下附加按钮时都会调用`FunctionButton()`方法，以下是从命令式`FunctionButton()`方法中重构的代码：
- en: '[PRE47]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We successfully built a calculator application in Windows forms. We also refactored
    the imperative code into a functional approach. We created some extension methods
    to solve all refactoring processes so they can be functional.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地在Windows表单中构建了一个计算器应用程序。我们还将命令式代码重构为功能性方法。我们创建了一些扩展方法来解决所有重构过程，使它们可以是功能性的。
- en: In the next chapter, we will discuss code with best practices in the functional
    approach and perform a unit test for the application we built in this chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论功能性方法中的最佳实践代码，并为我们在本章中构建的应用程序执行单元测试。
