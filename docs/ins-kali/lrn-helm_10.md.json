["```\n    $ minikube delete\n    $ minikube start --memory=4g\n    ```", "```\n    $ kubectl create namespace chapter7\n    ```", "```\n    $ git clone https://github.com/$GITHUB_USERNAME/-Learn-Helm.git Learn-Helm\n    ```", "```\n    $ cd $LEARN_HELM_CHART_REPOSITORY_DIR\n    $ ls\n    guestbook-1.0.0.tgz\u00a0\u00a0 index.yaml\u00a0\u00a0 README.md\n    ```", "```\n    $ rm guestbook-1.0.0.tgz index.yaml\n    $ ls\n    README.md\n    ```", "```\n    $ git add --all\n    $ git commit -m 'Preparing for chapter 7'\n    $ git push origin master\n    ```", "```\n$ helm repo add codecentric https://codecentric.github.io/helm-charts\n```", "```\n{{- tpl .Values.fileContent }}\n```", "```\n$ helm install jenkins codecentric/jenkins \\\n\u00a0\u00a0-n chapter7 --version 1.5.1 \\\n\u00a0\u00a0--values Learn-Helm/jenkins/values.yaml \\\n\u00a0\u00a0--set githubUsername=$GITHUB_USERNAME \\\n\u00a0\u00a0--set githubPassword=$GITHUB_PASSWORD \\\n\u00a0\u00a0--set githubForkUrl=https://github.com/$GITHUB_USERNAME/-Learn-Helm.git \\\n\u00a0\u00a0--set githubPagesRepoUrl=https://github.com/$GITHUB_USERNAME/Learn-Helm-Chart-Repository.git\n```", "```\n$ kubectl get Pods -n chapter7 -w\n```", "```\n$ export NODE_PORT=$(kubectl get service --namespace chapter7 -o jsonpath='{.spec.ports[0].nodePort}' jenkins-master)\n$ export NODE_IP=$(kubectl get nodes --namespace chapter7 -o jsonpath='{.items[0].status.addresses[0].address}')\necho \"http://$NODE_IP:$NODE_PORT\"\n```", "```\nagent { label 'chart-testing-agent' }\n```", "```\nsh 'ct lint'\n```", "```\nsh 'ct install --upgrade'\n```", "```\nsh 'helm package --dependency-update helm-charts/charts/*'\n```", "```\n// Clone GitHub Pages repository to a folder called 'chart-repo'\nsh \"git clone ${env.GITHUB_PAGES_REPO_URL} chart-repo\"\n// Determine if these charts should be pushed to 'stable' or 'staging' based on the branch\ndef repoType\nif (env.BRANCH_NAME == 'master') {\n\u00a0\u00a0repoType = 'stable'\n} else {\n\u00a0\u00a0repoType = 'staging'\n}\n// Create the corresponding 'stable' or 'staging' folder if it does not exist\ndef files = sh(script: 'ls chart-repo', returnStdout: true)\nif (!files.contains(repoType)) {\n\u00a0\u00a0sh \"mkdir chart-repo/${repoType}\"\n}\n```", "```\nLearn-Helm-Repository/\n\u00a0\u00a0stable/\n\u00a0\u00a0staging/\n```", "```\n// Move charts from the packaged-charts folder to the corresponding 'stable' or 'staging' folder\nsh \"mv packaged-charts/*.tgz chart-repo/${repoType}\"\n// Generate the updated index.yaml\nsh \"helm repo index chart-repo/${repoType}\"\n// Update git config details\nsh \"git config --global user.email 'chartrepo-robot@example.com'\"\nsh \"git config --global user.name 'chartrepo-robot'\"\n```", "```\n// Add and commit the changes\nsh 'git add --all'\nsh \"git commit -m 'pushing charts from branch ${env.BRANCH_NAME}'\"\nwithCredentials([usernameColonPassword(credentialsId: 'github-auth', variable: 'USERPASS')]) {\n\u00a0\u00a0\u00a0\u00a0script {\n\u00a0\u00a0\u00a0\u00a0// Inject GitHub auth and push to the master branch, where the charts are being served\n\u00a0\u00a0\u00a0\u00a0def authRepo = env.GITHUB_PAGES_REPO_URL.replace('://', \"://${USERPASS}@\")\n\u00a0\u00a0\u00a0\u00a0sh \"git push ${authRepo} master\"\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```\nAll charts linted successfully\n----------------------------------\nNo chart changes detected.\n```", "```\nAll charts installed successfully\n-----------------------------------\nNo chart changes detected.\n```", "```\n+ helm package --dependency-update helm-charts/charts/guestbook helm-charts/charts/nginx\nSuccessfully packaged chart and saved it to: /home/jenkins/agent/workspace/t_and_Release_Helm_Charts_master/guestbook-1.0.0.tgz\nSuccessfully packaged chart and saved it to: /home/jenkins/agent/workspace/t_and_Release_Helm_Charts_master/nginx-1.0.0.tgz\n```", "```\n+ git commit -m 'pushing charts from branch master'\n[master 9769f5a] pushing charts from branch master\n 3 files changed, 32 insertions(+)\n create mode 100644 stable/guestbook-1.0.0.tgz\n create mode 100644 stable/index.yaml\n create mode 100644 stable/nginx-1.0.0.tgz\n```", "```\n$ cd $PACKT_FORK_DIR\n$ git checkout master\n$ git checkout -b chapter7\n```", "```\nversion: 1.0.1\n```", "```\n$ git status\nOn branch chapter7\nChanges not staged for commit:\n\u00a0\u00a0(use 'git add <file>...' to update what will be committed)\n\u00a0\u00a0(use 'git checkout -- <file>...' to discard changes in working directory)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0modified:\u00a0\u00a0 helm-charts/charts/nginx/Chart.yaml\nno changes added to commit (use 'git add' and/or 'git commit -a')\n```", "```\n$ git add helm-charts\n$ git commit -m 'bumping NGINX chart version to demonstrate chart testing pipeline'\n$ git push origin chapter7\n```", "```\nFinished: SUCCESS\n```", "```\nCharts to be processed:\n---------------------------------------------------------------\n nginx => (version: '1.0.1', path: 'helm-charts/charts/nginx')\n```", "```\n$ git checkout master\n$ git merge chapter7\n$ git push origin master\n```", "```\n$ helm repo remove learnhelm\n```", "```\n$ helm repo add learnhelm $GITHUB_PAGES_SITE_URL/stable\n```", "```\n$ helm search repo learnhelm --versions\n```", "```\n$ kubectl create ns dev\n$ kubectl create ns qa\n$ kubectl create ns prod\n```", "```\n$ git push -d origin chapter7\n$ git branch -D chapter7\n```", "```\n$ helm upgrade jenkins codecentric/jenkins \\\n\u00a0\u00a0-n chapter7 --version 1.5.1 \\\n\u00a0\u00a0--reuse-values --set githubPagesSiteUrl=$GITHUB_PAGES_SITE_URL\n```", "```\n$ kubectl get Pods -n chapter7 -w\n```", "```\nagent { label 'chart-testing-agent' }\n```", "```\nsh \"helm repo add learnhelm ${env.GITHUB_PAGES_SITE_URL}\"\n```", "```\ndir('nginx-cd') {\n\u00a0\u00a0sh \"helm upgrade --install nginx-${env.BRANCH_NAME} learnhelm/nginx --values common-values.yaml --values dev/values.yaml -n dev --wait\"\n}\n```", "```\nnginx-cd/\n\u00a0\u00a0dev/\n\u00a0\u00a0\u00a0\u00a0values.yaml\n\u00a0\u00a0qa/\n\u00a0\u00a0\u00a0\u00a0values.yaml\n\u00a0\u00a0prod/\n\u00a0\u00a0\u00a0\u00a0values.yaml\n\u00a0\u00a0common-values.yaml\n\u00a0\u00a0Jenkinsfile\n```", "```\nenv:\n - name: ENVIRONMENT\n\u00a0\u00a0 value: dev\n```", "```\nenv:\n - name: ENVIRONMENT\n\u00a0\u00a0 value: qa\n```", "```\nenv:\n - name: ENVIRONMENT\n\u00a0\u00a0 value: prod\n```", "```\nservice:\n type: NodePort\n```", "```\nsh 'helm test nginx -n dev'\n```", "```\nwhen {\n\u00a0\u00a0expression {\n\u00a0\u00a0\u00a0\u00a0return env.BRANCH_NAME == 'master'\n\u00a0\u00a0}\n}\n```", "```\ndir('nginx-cd') {\n\u00a0\u00a0\u00a0\u00a0sh \"helm upgrade --install nginx-${env.BRANCH_NAME} learnhelm/nginx --values common-values.yaml --values qa/values.yaml -n qa --wait\"\n}\n```", "```\nstage('Wait for Input') {\n\u00a0\u00a0\u00a0\u00a0when {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expression {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return env.BRANCH_NAME == 'master'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0steps {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container('chart-testing') {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0input 'Deploy to Prod?'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```\ndir('nginx-cd') {\n\u00a0\u00a0sh \"helm upgrade --install nginx-${env.BRANCH_NAME} learnhelm/nginx --values common-values.yaml --values prod/values.yaml -n prod --wait\"\n}\n```", "```\n+ helm upgrade --install nginx-master learnhelm/nginx --values common-values.yaml --values dev/values.yaml -n dev --wait\nRelease 'nginx-master' does not exist. Installing it now.\nNAME: nginx-master\nLAST DEPLOYED: Thu Apr 30 02:07:55 2020\nNAMESPACE: dev\nSTATUS: deployed\nREVISION: 1\nNOTES:\n1\\. Get the application URL by running these commands:\n\u00a0\u00a0export NODE_PORT=$(kubectl get --namespace dev -o jsonpath='{.spec.ports[0].nodePort}' services nginx-master)\n\u00a0\u00a0export NODE_IP=$(kubectl get nodes --namespace dev -o jsonpath='{.items[0].status.addresses[0].address}')\n\u00a0\u00a0echo http://$NODE_IP:$NODE_PORT\n```", "```\n+ helm test nginx-master -n dev\nPod nginx-master-test-connection pending\nPod nginx-master-test-connection pending\nPod nginx-master-test-connection succeeded\nNAME: nginx-master\nLAST DEPLOYED: Thu Apr 30 02:07:55 2020\nNAMESPACE: dev\nSTATUS: deployed\nREVISION: 1\nTEST SUITE:\u00a0\u00a0\u00a0\u00a0 nginx-master-test-connection\nLast Started:\u00a0\u00a0 Thu Apr 30 02:08:03 2020\nLast Completed: Thu Apr 30 02:08:05 2020\nPhase:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Succeeded\n```", "```\n+ helm upgrade --install nginx-master learnhelm/nginx --values common-values.yaml --values qa/values.yaml -n qa --wait\nRelease 'nginx-master' does not exist. Installing it now.\nNAME: nginx-master\nLAST DEPLOYED: Thu Apr 30 02:08:09 2020\nNAMESPACE: qa\nSTATUS: deployed\nREVISION: 1\n```", "```\n+ helm upgrade --install nginx-master learnhelm/nginx --values common-values.yaml --values prod/values.yaml -n prod --wait\nRelease 'nginx-master' does not exist. Installing it now.\nNAME: nginx-master\nLAST DEPLOYED: Thu Apr 30 03:46:22 2020\nNAMESPACE: prod\nSTATUS: deployed\nREVISION: 1\n```", "```\n[Pipeline] End of Pipeline\nFinished: SUCCESS\n```", "```\n$ helm list -n dev\n$ helm list -n qa\n$ helm list -n prod\n```", "```\nNAME \t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NAMESPACE\t\u00a0\u00a0\u00a0\u00a0REVISION\u00a0\u00a0\t\nnginx-master\t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dev\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\t\u00a0\u00a0\u00a0\u00a01\n```", "```\n$ kubectl get Pods -n dev\n$ kubectl get Pods -n qa\n$ kubectl get Pods -n prod\n```", "```\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0READY\u00a0\u00a0 STATUS\u00a0\u00a0\u00a0\u00a0RESTARTS\u00a0\u00a0 AGE\nnginx-fcb5d6b64-rmc2j\u00a0\u00a0 1/1\u00a0\u00a0\u00a0\u00a0 Running\u00a0\u00a0 0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a046m\n```", "```\n$ kubectl delete ns chapter7\n$ kubectl delete ns dev\n$ kubectl delete ns qa\n$ kubectl delete ns prod\n```", "```\n$ minikube stop\n```"]