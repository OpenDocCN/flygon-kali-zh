["```cs\nclass Program\n{\n   static void Main(string[] args)\n   {\n   }\n}\n\npublic class RegExDemo\n{\n\n}\n\n```", "```cs\n        using System.Text.RegularExpressions;\n\n```", "```cs\n        public void ValidDate(string stringToMatch) \n        { \n\n        }\n\n```", "```cs\n        string pattern = $@\"^(19|20)dd[-./](0[1-9]|1[0-2])\n                         [-./](0[1-9]|[12][0-9]|3[01])$\";\n\n```", "```cs\n        if (Regex.IsMatch(stringToMatch, pattern)) \n            Console.WriteLine($\"The string {stringToMatch} \n                              contains a valid date.\"); \n        else \n            Console.WriteLine($\"The string {stringToMatch} DOES \n                              NOT contain a valid date.\");\n\n```", "```cs\n        public void ValidDate(string stringToMatch) \n        { \n          string pattern = $@\"^(19|20)dd[-./](0[1-9]|1[0-2])\n                           [-./](0[1-9]|[12][0-9]|3[01])$\"; \n\n          if (Regex.IsMatch(stringToMatch, pattern)) \n              Console.WriteLine($\"The string {stringToMatch} contains\n                                a valid date.\"); \n          else \n              Console.WriteLine($\"The string {stringToMatch} DOES \n              NOT contain a valid date.\");             \n        }\n\n```", "```cs\n        RegExDemo oRecipe = new RegExDemo(); \n        oRecipe.ValidDate(\"1912-12-31\"); \n        oRecipe.ValidDate(\"2018-01-01\"); \n        oRecipe.ValidDate(\"1800-01-21\"); \n        oRecipe.ValidDate($\"{DateTime.Now.Year}\n                          .{DateTime.Now.Month}.{DateTime.Now.Day}\"); \n        oRecipe.ValidDate(\"2016-21-12\");  \n        Console.Read();\n\n```", "```cs\n        string pattern = $@\"^(19|20)dd[-./](0[1-9]|1[0-2]|[1-9])\n                         [-./](0[1-9]|[12][0-9]|3[01])$\";\n\n```", "```cs\nusing System.Text.RegularExpressions;\n\n```", "```cs\n        public string SanitizeInput(string input) \n        { \n\n        }\n\n```", "```cs\n        List<string> lstBad = new List<string>(new string[]\n        {  \"BadWord1\", \"BadWord2\", \"BadWord3\" });\n\n```", "```cs\n        string pattern = \"\"; \n        foreach (string badWord in lstBad) \n        pattern += pattern.Length == 0 ? $\"{badWord}\" \n          :  $\"|{badWord}\"; \n\n        pattern = $@\"b({pattern})b\";\n\n```", "```cs\n        return Regex.Replace(input, pattern, \"*****\", \n                             RegexOptions.IgnoreCase);\n\n```", "```cs\n        public string SanitizeInput(string input) \n        { \n          List<string> lstBad = new List<string>(new string[]\n          { \"BadWord1\", \"BadWord2\", \"BadWord3\" }); \n          string pattern = \"\"; \n          foreach (string badWord in lstBad) \n          pattern += pattern.Length == 0 ? $\"{badWord}\" : $\"|{badWord}\"; \n\n          pattern = $@\"b({pattern})b\"; \n\n          return Regex.Replace(input, pattern, \"*****\", \n                               RegexOptions.IgnoreCase);             \n        }\n\n```", "```cs\n        string textToSanitize = \"This is a string that contains a  \n          badword1, another Badword2 and a third badWord3\"; \n        RegExDemo oRecipe = new RegExDemo(); \n        textToSanitize = oRecipe.SanitizeInput(textToSanitize); \n        WriteLine(textToSanitize); \n        Read();\n\n```", "```cs\npattern = $\"b({pattern})b\";\n\n```", "```cs\npattern = $@\"b({pattern})b\";\n\n```", "```cs\nusing System.Text.RegularExpressions;\n\n```", "```cs\n        public static class CustomRegexHelper \n        { \n\n        }\n\n```", "```cs\n        public static bool ValidAcmeCompanyFilename(this string  value) \n        { \n\n        }\n\n```", "```cs\n        return Regex.IsMatch(value,  $@\"^acm[_]{DateTime.Now.Year}[_]\n          ({DateTime.Now.Month}|0[{DateTime.Now.Month}])[_]\n          ({DateTime.Now.Day}|0[{DateTime.Now.Day}])(.txt|.docx|.xlsx)$\");\n\n```", "```cs\n        public static class CustomRegexHelper \n        { \n          public static bool ValidAcmeCompanyFilename(this String value) \n          { \n            return Regex.IsMatch(value, $@\"^acm[_]{DateTime.Now.Year}[_]\n              ({DateTime.Now.Month}|0[{DateTime.Now.Month}])[_]\n              ({DateTime.Now.Day}|0[{DateTime.Now.Day}])(.txt|.docx|.xlsx)$\"); \n          } \n        }\n\n```", "```cs\n        public static void DemoExtensionMethod() \n        { \n\n        }\n\n```", "```cs\n        Console.WriteLine($\"Today's date is: {DateTime.Now.Year}-\n                          {DateTime.Now.Month}-{DateTime.Now.Day}\");\n        Console.WriteLine($\"The file must match:  acm_{DateTime.Now.Year}\n          _{DateTime.Now.Month}_{DateTime.Now.  Day}.txt including \n          leading month and day zeros\");\n        Console.WriteLine($\"The file must match:  acm_{DateTime.Now.Year}\n          _{DateTime.Now.Month}_{DateTime.Now.  Day}.docx including \n          leading month and day zeros\");\n        Console.WriteLine($\"The file must match:  acm_{DateTime.Now.Year}\n          _{DateTime.Now.Month}_{DateTime.Now.  Day}.xlsx including \n          leading month and day zeros\");\n\n```", "```cs\n        string filename = \"acm_2016_04_10.txt\"; \n        if (filename.ValidAcmeCompanyFilename()) \n          Console.WriteLine($\"{filename} is a valid file name\"); \n        else \n          Console.WriteLine($\"{filename} is not a valid file name\"); \n\n        filename = \"acm-2016_04_10.txt\"; \n        if (filename.ValidAcmeCompanyFilename()) \n          Console.WriteLine($\"{filename} is a valid file name\"); \n        else \n          Console.WriteLine($\"{filename} is not a valid file name\");\n\n```", "```cs\n        filename.ValidAcmeCompanyFilename()\n\n```", "```cs\n        public static void DemoExtensionMethod() \n        { \n          Console.WriteLine($\"Today's date is: {DateTime.Now.Year}-\n          {DateTime.Now.Month}-{DateTime.Now.Day}\");    \n          Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}\n            _{DateTime.Now.Month}_{DateTime.Now.Day}.txt including leading \n            month and day zeros\");    \n          Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}\n            _{DateTime.Now.Month}_{DateTime.Now.Day}.docx including leading\n            month and day zeros\");    \n          Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}\n            _{DateTime.Now.Month}_{DateTime.Now.Day}.xlsx including leading\n            month and day zeros\"); \n\n          string filename = \"acm_2016_04_10.txt\"; \n          if (filename.ValidAcmeCompanyFilename()) \n            Console.WriteLine($\"{filename} is a valid file name\"); \n          else \n            Console.WriteLine($\"{filename} is not a valid file name\"); \n\n          filename = \"acm-2016_04_10.txt\"; \n          if (filename.ValidAcmeCompanyFilename()) \n            Console.WriteLine($\"{filename} is a valid file name\"); \n          else \n            Console.WriteLine($\"{filename} is not a valid file name\"); \n        }\n\n```", "```cs\n        DemoExtensionMethod();\n\n```", "```cs\nreturn Regex.IsMatch(value,  $@\"^acm[_]{DateTime.Now.Year}[_]({DateTime.Now.Month}|0[{DateTime.  Now.Month}])[_]({DateTime.Now.Day}|0[{DateTime.Now.Day}])(.txt|.docx|.xlsx)$\");\n\n```"]