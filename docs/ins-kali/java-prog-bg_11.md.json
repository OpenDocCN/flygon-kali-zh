["```java\npackage loadinganxmlfile; \n\nimport java.io.*; \nimport javax.xml.parsers.*; \nimport javax.xml.transform.*; \nimport javax.xml.transform.dom.*; \nimport javax.xml.transform.stream.*; \nimport org.w3c.dom.*; \nimport org.xml.sax.*; \n\npublic class LoadingAnXMLFile { \n    public static void main(String[] args) { \n\n        try { \n            //Write code that can throw errors here \n        } \n        catch (ParserConfigurationException pce) { \n            System.out.println(pce.getMessage()); \n        } \n        catch (SAXException se) { \n            System.out.println(se.getMessage()); \n        } \n        catch (IOException ioe) { \n            System.err.println(ioe.getMessage()); \n        } \n    } \n\n    private static void PrintXmlDocument(Document xml) \n    { \n        try{ \n            Transformer transformer = \n             TransformerFactory.newInstance().newTransformer(); \n            StreamResult result = new StreamResult\n             (new StringWriter()); \n            DOMSource source = new DOMSource(xml); \n            transformer.transform(source, result); \n            System.out.println(result.getWriter().toString()); \n        } \n        catch(TransformerConfigurationException e) \n        { \n            System.err.println(\"XML Printing Failed\"); \n        } \n        catch(TransformerException e) \n        { \n            System.err.println(\"XML Printing Failed\"); \n        } \n    } \n} \n```", "```java\n        DocumentBuilderFactory factory = \n        DocumentBuilderFactory.newInstance(); \n```", "```java\n        DocumentBuilder builder = factory.newDocumentBuilder(); \n```", "```java\n        Document dom = builder.parse(\"cars.xml\"); \n```", "```java\n        public static void main(String[] args) { \n            DocumentBuilderFactory factory = \n            DocumentBuilderFactory.newInstance(); \n            try { \n                // Write code that can throw errors here... \n                DocumentBuilder builder = \n                factory.newDocumentBuilder(); \n                Document dom = builder.parse(\"cars.xml\"); \n\n                PrintXmlDocument(dom); \n            } \n            catch (ParserConfigurationException pce) { \n                System.out.println(pce.getMessage()); \n            }  \n            catch (SAXException se) { \n                System.out.println(se.getMessage()); \n            } \n            catch (IOException ioe) { \n                System.err.println(ioe.getMessage()); \n            } \n        } \n```", "```java\n<?xml version=\"1.0\"?> \n<cars> \n    <owner name=\"Billy\"> \n        <car vin=\"LJPCBLCX11000237\"> \n            <make>Ford</make> \n            <model>Fusion</model> \n            <year>2014</year> \n            <color>Blue</color> \n        </car> \n        <car vin=\"LGHIALCX89880011\"> \n            <make>Toyota</make> \n            <model>Tacoma</model> \n            <year>2013</year> \n            <color>Green</color> \n        </car> \n        <car vin=\"GJSIALSS22000567\"> \n            <make>Dodge</make> \n            <model>Charger</model> \n            <year>2013</year> \n            <color>Red</color> \n        </car> \n    </owner> \n    <owner name=\"Jane\"> \n        <car vin=\"LLOKAJSS55548563\"> \n            <make>Nissan</make> \n            <model>Altima</model> \n            <year>2000</year> \n            <color>Green</color> \n        </car> \n        <car vin=\"OOKINAFS98111001\"> \n            <make>Dodge</make> \n            <model>Challenger</model> \n            <year>2013</year> \n            <color>Red</color> \n        </car> \n    </owner> \n</cars> \n```", "```java\n        Element doc = dom.getDocumentElement(); \n```", "```java\n        NodeList ownersList = doc.getElementsByTagName(\"owner\"); \n```", "```java\n        for(int i = 0; i < ownersList.getLength(); i++) \n        { \n        } \n```", "```java\n            Element owner = (Element)ownersList.item(i); \n```", "```java\n            if(owner.getAttribute(\"name\").equals(\"Jane\")) \n            { \n                NodeList carsList = \n                owner.getElementsByTagName(\"car\"); \n```", "```java\n        PrintCars(carsList); \n```", "```java\n        public static void main(String[] args) { \n            DocumentBuilderFactory factory = \n            DocumentBuilderFactory.newInstance(); \n            try { \n                DocumentBuilder docBuilder = \n                factory.newDocumentBuilder(); \n                Document dom = docBuilder.parse(\"cars.xml\"); \n\n                // Now, print out all of Jane's cars \n                Element doc = dom.getDocumentElement(); \n                NodeList ownersList = \n                doc.getElementsByTagName(\"owner\"); \n\n                for(int i = 0; i < ownersList.getLength(); i++) \n                { \n                    Element owner = (Element)ownersList.item(i); \n                    if(owner.getAttribute(\"name\").equals(\"Jane\")) \n                    { \n                        NodeList carsList = \n                        owner.getElementsByTagName(\"car\"); \n                        PrintCars(carsList); \n                    } \n                } \n            } \n            catch (ParserConfigurationException pce) { \n                System.out.println(pce.getMessage()); \n            }  \n            catch (SAXException se) { \n                System.out.println(se.getMessage()); \n            }  \n            catch (IOException ioe) { \n                System.err.println(ioe.getMessage()); \n            } \n        } \n```", "```java\n        public static void PrintCars(NodeList cars) \n        { \n        } \n```", "```java\n        for(int i = 0; i < cars.getLength(); i++) \n        { \n        } \n```", "```java\n        Element carNode = (Element)cars.item(i); \n```", "```java\n        Car carObj = new Car(); \n```", "```java\n        package readingxml; \n\n        public class Car { \n            public String vin; \n            public String make; \n            public String model; \n            public int year; \n            public String color; \n            public Car() \n            { \n\n            } \n            @Override \n            public String toString() \n            { \n                return String.format(\"%d %s %s %s, vin:%s\", year, \n                color, make, model, vin); \n            } \n        } \n```", "```java\n        carObj.color = \n        carNode.getElementsByTagName(\"color\").item(0).getTextContent(); \n```", "```java\n        carObj.make = \n        carNode.getElementsByTagName(\"make\").item(0).getTextContent(); \n        carObj.model = \n        carNode.getElementsByTagName(\"model\").item(0).getTextContent(); \n```", "```java\n        carObj.year = \n        Integer.parseInt(carNode.getElementsByTagName\n        (\"year\").item(0).getTextContent()); \n```", "```java\n         carObj.vin = carNode.getAttribute(\"vin\"); \n```", "```java\n        System.out.println(carObj.toString()); \n```", "```java\npublic static void PrintCars(NodeList cars) \n{ \n    for(int i = 0; i < cars.getLength(); i++) \n    { \n        Element carNode = (Element)cars.item(i); \n        Car carObj = new Car(); \n        carObj.color = \n         carNode.getElementsByTagName\n         (\"color\").item(0).getTextContent(); \n        carObj.make = \n         carNode.getElementsByTagName\n         (\"make\").item(0).getTextContent(); \n        carObj.model = carNode.getElementsByTagName\n         (\"model\").item(0).getTextContent(); \n        carObj.year = \n         Integer.parseInt(carNode.getElementsByTagName\n         (\"year\").item(0).getTextContent()); \n        carObj.vin = carNode.getAttribute(\"vin\"); \n        System.out.println(carObj.toString()); \n    } \n} \n```", "```java\npackage writingxml; \n\nimport java.io.*; \nimport javax.xml.parsers.*; \nimport javax.xml.transform.*; \nimport javax.xml.transform.dom.*; \nimport javax.xml.transform.stream.*; \nimport org.w3c.dom.*; \nimport org.xml.sax.*; \n\npublic class WritingXML { \n    public static void main(String[] args) { \n        File xmlFile = new File(\"cars.xml\"); \n        Document dom = LoadXMLDocument(xmlFile);       \n        WriteXMLDocument(dom, xmlFile); \n    } \n\n    private static void WriteXMLDocument\n     (Document doc, File destination) \n    { \n        try{ \n            // Write doc to destination file here... \n        } \n        catch(TransformerConfigurationException e) \n        { \n            System.err.println(\"XML writing failed.\"); \n        } \n        catch(TransformerException e) \n        { \n            System.err.println(\"XML writing failed.\"); \n        } \n    } \n\n    private static Document LoadXMLDocument(File source) \n    { \n        try { \n            DocumentBuilderFactory factory = \n             DocumentBuilderFactory.newInstance(); \n            DocumentBuilder builder = \n             factory.newDocumentBuilder(); \n            Document dom = builder.parse(source); \n        } \n        catch (ParserConfigurationException e) { \n             System.err.println(\"XML loading failed.\"); \n        } \n        catch (SAXException e) { \n             System.err.println(\"XML loading failed.\"); \n        } \n        catch (IOException e) { \n            System.err.println(\"XML loading failed.\"); \n        } \n\n        return dom; \n    } \n} \n```", "```java\n        TransformerFactory tf = TransformerFactory.newInstance(); \n        Transformer transformer = tf.newTransformer(); \n```", "```java\n        StreamResult result = new StreamResult(destination); \n```", "```java\n        DOMSource source = new DOMSource(doc); \n```", "```java\n         transformer.transform(source, result); \n```", "```java\nprivate static void WriteXMLDocument\n(Document doc, File destination) \n{ \n    try{ \n        // Write doc to destination file here \n        TransformerFactory tf = \n         TransformerFactory.newInstance(); \n        Transformer transformer = tf.newTransformer(); \n        StreamResult result = new StreamResult(destination); \n        DOMSource source = new DOMSource(doc); \n\n        transformer.transform(source, result); \n    } \n    catch(TransformerConfigurationException e) \n    { \n        System.err.println(\"XML writing failed.\"); \n    } \n    catch(TransformerException e) \n    { \n        System.err.println(\"XML writing failed.\"); \n    } \n} \n```", "```java\n        NodeList owners = dom.getElementsByTagName(\"owner\"); \n```", "```java\n            for(int i = 0; i < owners.getLength(); i++) \n            { \n                Element owner = (Element)owners.item(i); \n                owner.setAttribute(\"name\", \"Mike\"); \n            } \n```", "```java\npublic static void main(String[] args) { \n    File xmlFile = new File(\"cars.xml\"); \n    Document dom = LoadXMLDocument(xmlFile); \n\n    NodeList owners = dom.getElementsByTagName(\"owner\"); \n    for(int i = 0; i < owners.getLength(); i++) \n    { \n        Element owner = (Element)owners.item(i); \n        owner.setAttribute(\"name\", \"Mike\"); \n    } \n    WriteXMLDocument(dom, xmlFile); \n} \n```"]