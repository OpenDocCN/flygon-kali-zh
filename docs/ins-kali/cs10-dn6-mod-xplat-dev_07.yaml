- en: '07'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '07'
- en: Packaging and Distributing .NET Types
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包和分发.NET类型
- en: This chapter is about how C# keywords are related to .NET types, and about the
    relationship between namespaces and assemblies. You'll also become familiar with
    how to package and publish your .NET apps and libraries for cross-platform use,
    how to use legacy .NET Framework libraries in .NET libraries, and the possibility
    of porting legacy .NET Framework code bases to modern .NET.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了C#关键字与.NET类型的关系，以及命名空间和程序集之间的关系。您还将熟悉如何打包和发布您的.NET应用程序和库以供跨平台使用，如何在.NET库中使用传统的.NET
    Framework库，以及将传统的.NET Framework代码库移植到现代.NET的可能性。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: The road to .NET 6
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通往.NET 6的道路
- en: Understanding .NET components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解.NET组件
- en: Publishing your applications for deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布您的应用程序以进行部署
- en: Decompiling .NET assemblies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反编译.NET程序集
- en: Packaging your libraries for NuGet distribution
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为NuGet分发打包您的库
- en: Porting from .NET Framework to modern .NET
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从.NET Framework迁移到现代.NET
- en: Working with preview features
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预览功能工作
- en: The road to .NET 6
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通往.NET 6的道路
- en: This part of the book is about the functionality in the **Base Class Library**
    (**BCL** ) APIs provided by .NET and how to reuse functionality across all the
    different .NET platforms using .NET Standard.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分介绍了.NET提供的**基类库**（**BCL**）API中的功能，以及如何使用.NET Standard在所有不同的.NET平台上重用功能。
- en: First, we will review the route to this point and why it is important to understand
    the past.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将回顾到达这一点的路线以及了解过去的重要性。
- en: .NET Core 2.0 and later's support for a minimum of .NET Standard 2.0 is important
    because it provides many of the APIs that were missing from the first version
    of .NET Core. The 15 years' worth of libraries and applications that .NET Framework
    developers had available to them that are relevant for modern development have
    now been migrated to .NET and can run cross-platform on macOS and Linux variants,
    as well as on Windows.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.0及更高版本对于最低.NET Standard 2.0的支持非常重要，因为它提供了许多在第一个版本的.NET Core中缺失的API。.NET
    Framework开发人员在过去15年中可用的库和应用程序现在已经迁移到.NET，并且可以在macOS和Linux变体上跨平台运行，以及在Windows上运行。
- en: .NET Standard 2.1 added about 3,000 new APIs. Some of those APIs need runtime
    changes that would break backward compatibility, so .NET Framework 4.8 only implements
    .NET Standard 2.0\. .NET Core 3.0, Xamarin, Mono, and Unity implement .NET Standard
    2.1.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard 2.1增加了大约3,000个新的API。其中一些API需要运行时更改，这将破坏向后兼容性，因此.NET Framework
    4.8只实现.NET Standard 2.0。.NET Core 3.0、Xamarin、Mono和Unity实现了.NET Standard 2.1。
- en: .NET 6 removes the need for .NET Standard if all your projects can use .NET
    6\. Since you might still need to create class libraries for legacy .NET Framework
    projects or legacy Xamarin mobile apps, there is still a need to create .NET Standard
    2.0 and 2.1 class libraries. In March 2021, I surveyed professional developers,
    and half still needed to create .NET Standard 2.0 compliant class libraries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的所有项目都可以使用.NET 6，.NET 6将不再需要.NET Standard。由于您可能仍然需要为传统的.NET Framework项目或传统的Xamarin移动应用程序创建类库，因此仍然需要创建.NET
    Standard 2.0和2.1类库。在2021年3月，我对专业开发人员进行了调查，一半的人仍然需要创建符合.NET Standard 2.0的类库。
- en: Now that .NET 6 has been released with preview support for mobile and desktop
    apps built using .NET MAUI, the need for .NET Standard has been further reduced.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在.NET 6已经发布，支持使用.NET MAUI构建移动和桌面应用程序的预览，因此进一步减少了对.NET Standard的需求。
- en: 'To summarize the progress that .NET has made over the past five years, I have
    compared the major .NET Core and modern .NET versions with the equivalent .NET
    Framework versions in the following list:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结过去五年中.NET的进展，我已经将主要的.NET Core和现代.NET版本与等效的.NET Framework版本进行了比较，具体如下：
- en: '**.NET Core 1.x** : much smaller API compared to .NET Framework 4.6.1, which
    was the current version in March 2016.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Core 1.x**：与2016年3月的当前版本.NET Framework 4.6.1相比，API要小得多。'
- en: '**.NET Core 2.x** : reached API parity with .NET Framework 4.7.1 for modern
    APIs because they both implement .NET Standard 2.0.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Core 2.x**：与.NET Framework 4.7.1相比，现代API达到了API的平等，因为它们都实现了.NET Standard
    2.0。'
- en: '**.NET Core 3.x** : larger API compared to .NET Framework for modern APIs because.NET Framework
    4.8 does not implement .NET Standard 2.1.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET Core 3.x**：与.NET Framework相比，现代API更大，因为.NET Framework 4.8没有实现.NET Standard
    2.1。'
- en: '**.NET 5** : even larger API compared to .NET Framework 4.8 for modern APIs,
    with much-improved performance.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET 5**：与现代API相比，与.NET Framework 4.8相比，API更大，性能得到了大幅提升。'
- en: '**.NET 6** : final unification with the support for mobile apps in .NET MAUI,
    expected by May 2022.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET 6**：预计将在2022年5月之前最终统一，并支持.NET MAUI中的移动应用程序。'
- en: .NET Core 1.0
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 1.0
- en: .NET Core 1.0 was released in June 2016 and focused on implementing an API suitable
    for building modern cross-platform apps, including web and cloud applications
    and services for Linux using ASP.NET Core.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 1.0于2016年6月发布，重点是实现适用于构建现代跨平台应用程序的API，包括使用ASP.NET Core为Linux构建的Web和云应用程序和服务。
- en: .NET Core 1.1
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 1.1
- en: .NET Core 1.1 was released in November 2016 and focused on fixing bugs, increasing
    the number of Linux distributions supported, supporting .NET Standard 1.6, and
    improving performance, especially with ASP.NET Core for web apps and services.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 1.1于2016年11月发布，重点是修复错误，增加支持的Linux发行版数量，支持.NET Standard 1.6，并提高性能，特别是对于Web应用程序和服务的ASP.NET
    Core。
- en: .NET Core 2.0
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 2.0
- en: .NET Core 2.0 was released in August 2017 and focused on implementing .NET Standard
    2.0, the ability to reference .NET Framework libraries, and more performance improvements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.0于2017年8月发布，重点是实现.NET Standard 2.0，引用.NET Framework库的能力，以及更多的性能改进。
- en: The third edition of this book was published in November 2017, so it covered
    up to .NET Core 2.0 and .NET Core for **Universal Windows Platform** (**UWP**
    ) apps.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的第三版于2017年11月出版，因此涵盖了.NET Core 2.0和**通用Windows平台**（**UWP**）应用程序。
- en: .NET Core 2.1
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 2.1
- en: '.NET Core 2.1 was released in May 2018 and focused on an extendable tooling
    system, adding new types like `Span<T>` , new APIs for cryptography and compression,
    a Windows Compatibility Pack with an additional 20,000 APIs to help port old Windows
    applications, Entity Framework Core value conversions, LINQ `GroupBy` conversions,
    data seeding, query types, and even more performance improvements, including the
    topics listed in the following table:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.1于2018年5月发布，重点是可扩展的工具系统，添加了新类型如`Span<T>`，新的加密和压缩API，一个Windows兼容包，其中包含额外的20,000个API，以帮助移植旧的Windows应用程序，Entity
    Framework Core值转换，LINQ `GroupBy`转换，数据种子，查询类型，以及更多性能改进，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| Spans | 8 | Working with spans, indexes, and ranges |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Spans | 8 | 使用spans、索引和范围 |'
- en: '| Brotli compression | 9 | Compressing with the Brotli algorithm |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Brotli压缩 | 9 | 使用Brotli算法进行压缩 |'
- en: '| Cryptography | 20 | What''s new in cryptography? |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 加密 | 20 | 加密的新功能是什么？ |'
- en: '| EF Core Lazy loading | 10 | Enabling lazy loading |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| EF Core 懒加载 | 10 | 启用延迟加载 |'
- en: '| EF Core Data seeding | 10 | Understanding data seeding |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| EF Core 数据种子 | 10 | 理解数据种子 |'
- en: .NET Core 2.2
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 2.2
- en: .NET Core 2.2 was released in December 2018 and focused on diagnostic improvements
    for the runtime, optional tiered compilation, and adding new features to ASP.NET
    Core and Entity Framework Core like spatial data support using types from the
    **NetTopologySuite** (**NTS** ) library, query tags, and collections of owned
    entities.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 2.2于2018年12月发布，重点是对运行时的诊断改进，可选的分层编译，并为ASP.NET Core和Entity Framework
    Core添加了新功能，如使用**NetTopologySuite**（**NTS**）库中的类型支持空间数据，查询标签和拥有实体的集合。
- en: .NET Core 3.0
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 3.0
- en: '.NET Core 3.0 was released in September 2019 and focused on adding support
    for building Windows desktop applications using Windows Forms (2001), **Windows
    Presentation Foundation** (**WPF** ; 2006), and Entity Framework 6.3, side-by-side
    and app-local deployments, a fast JSON reader, serial port access and other pinout
    access for **Internet of Things** (**IoT** ) solutions, and tiered compilation
    by default, including the topics listed in the following table:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.0于2019年9月发布，重点是添加对使用Windows窗体（2001）、**Windows Presentation Foundation**（**WPF**；2006）和Entity
    Framework 6.3构建Windows桌面应用程序的支持，同时支持应用程序本地部署，快速JSON读取器，串口访问和其他用于**物联网**（**IoT**）解决方案的引脚访问，以及默认情况下的分层编译，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| Embedding .NET in-app | 7 | Publishing your applications for deployment |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 将.NET嵌入应用程序中 | 7 | 发布您的应用程序以进行部署 |'
- en: '| `Index` and `Range` | 8 | Working with spans, indexes, and ranges |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `Index` 和 `Range` | 8 | 使用spans、索引和范围 |'
- en: '| `System.Text.Json` | 9 | High-performance JSON processing |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `System.Text.Json` | 9 | 高性能JSON处理 |'
- en: '| Async streams | 12 | Working with async streams |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 异步流 | 12 | 使用异步流 |'
- en: The fourth edition of this book was published in October 2019, so it covered
    some of the new APIs added in later versions up to .NET Core 3.0.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的第四版于2019年10月出版，因此涵盖了直到.NET Core 3.0版本后添加的一些新API。
- en: .NET Core 3.1
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core 3.1
- en: .NET Core 3.1 was released in December 2019 and focused on bug fixes and refinements
    so that it could be a **Long Term Support** (**LTS** ) release, not losing support
    until December 2022.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.1于2019年12月发布，重点是修复错误和改进，以便成为**长期支持**（**LTS**）版本，直到2022年12月才停止支持。
- en: .NET 5.0
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 5.0
- en: '.NET 5.0 was released in November 2020 and focused on unifying the various
    .NET platforms except mobile, refining the platform, and improving performance,
    including the topics listed in the following table:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 5.0于2020年11月发布，重点是统一各种.NET平台（除移动平台），完善平台，并提高性能，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| `Half` type | 8 | Working with numbers |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `Half`类型 | 8 | 处理数字 |'
- en: '| Regular expression performance improvements | 8 | Regular expression performance
    improvements |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 正则表达式性能改进 | 8 | 正则表达式性能改进 |'
- en: '| `System.Text.Json` improvements | 9 | High-performance JSON processing |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `System.Text.Json` 改进 | 9 | 高性能JSON处理 |'
- en: '| EF Core generated SQL | 10 | Getting the generated SQL |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| EF Core生成的SQL | 10 | 获取生成的SQL |'
- en: '| EF Core Filtered Include | 10 | Filtering included entities |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| EF Core Filtered Include | 10 | 过滤包含的实体 |'
- en: '| EF Core Scaffold-DbContext now singularizes using Humanizer | 10 | Scaffolding
    models using an existing database |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| EF Core Scaffold-DbContext 现在使用 Humanizer 进行单数化 | 10 | 使用现有数据库搭建模型 |'
- en: .NET 6.0
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 6.0
- en: '.NET 6.0 was released in November 2021 and focused on unifying with the mobile
    platform, adding more features to EF Core for data management, and improving performance,
    including the topics listed in the following table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6.0于2021年11月发布，重点是与移动平台统一，为EF Core添加更多数据管理功能，并提高性能，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | 章节 | 主题 |'
- en: '| Check .NET SDK status | 7 | Checking your .NET SDKs for updates |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 检查.NET SDK状态 | 7 | 检查.NET SDK是否有更新 |'
- en: '| Support for Apple Silicon | 7 | Creating a console application to publish
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| Apple Silicon支持 | 7 | 创建用于发布的控制台应用程序 |'
- en: '| Link trim mode as default | 7 | Reducing the size of apps using app trimming
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 将链接修剪模式设置为默认 | 7 | 使用应用修剪减小应用程序的大小 |'
- en: '| `DateOnly` and `TimeOnly` | 8 | Specifying date and time values |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `DateOnly` 和 `TimeOnly` | 8 | 指定日期和时间值 |'
- en: '| `EnsureCapacity` for `List<T>` | 8 | Improving performance by ensuring the
    capacity of a collection |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `List<T>` 的 `EnsureCapacity` | 8 | 通过确保集合的容量来提高性能 |'
- en: '| EF Core configure conventions | 10 | Configuring preconvention models |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| EF Core配置约定 | 10 | 配置预约定模型 |'
- en: '| New LINQ methods | 11 | Building LINQ expressions with the Enumerable class
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 新的LINQ方法 | 11 | 使用Enumerable类构建LINQ表达式 |'
- en: Improving performance from .NET Core 2.0 to .NET 5
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从.NET Core 2.0到.NET 5的性能改进
- en: 'Microsoft has made significant improvements to performance in the past few
    years. You can read a detailed blog post at the following link: [https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/)
    .'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，微软在性能方面取得了显著的改进。您可以在以下链接阅读详细的博客文章：[https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/)。
- en: Checking your .NET SDKs for updates
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查您的.NET SDK是否有更新
- en: 'With .NET 6, Microsoft added a command to check the versions of .NET SDKs and
    runtimes that you have installed and warn you if any need updating. For example,
    you enter the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 6中，微软添加了一个命令来检查您已安装的.NET SDK和运行时的版本，并在需要更新时提醒您。例如，您输入以下命令：
- en: '```cs'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet sdk check
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet sdk check
- en: '```'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You will then see results, including the status of available updates, as shown
    in the following partial output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将看到结果，包括可用更新的状态，如下面的部分输出所示：
- en: '```cs'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '.NET SDKs:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK：
- en: Version                         Status
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 版本                         状态
- en: '-----------------------------------------------------------------------------'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '-----------------------------------------------------------------------------'
- en: 3.1.412                         Up to date.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 3.1.412                         最新。
- en: 5.0.202                         Patch 5.0.206 is available.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 5.0.202                         补丁5.0.206可用。
- en: '...'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Understanding .NET components
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解.NET组件
- en: '.NET is made up of several pieces, which are shown in the following list:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: .NET由几个部分组成，如下列表所示：
- en: '**Language compilers** : These turn your source code written with languages
    such as C#, F#, and Visual Basic into **intermediate language** (**IL** ) code
    stored in assemblies. With C# 6.0 and later, Microsoft switched to an open-source
    rewritten compiler known as Roslyn that is also used by Visual Basic.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言编译器**：这些将您用C#、F#和Visual Basic等语言编写的源代码转换为存储在程序集中的**中间语言**（**IL**）代码。从C#
    6.0开始，微软切换到了一个名为Roslyn的开源重写编译器，它也被Visual Basic使用。'
- en: '**Common Language Runtime (CoreCLR)** : This runtime loads assemblies, compiles
    the IL code stored in them into native code instructions for your computer''s
    CPU, and executes the code within an environment that manages resources such as
    threads and memory.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共语言运行时（CoreCLR）**：这个运行时加载程序集，将它们中存储的IL代码编译成本地代码指令，然后在管理资源（如线程和内存）的环境中执行代码。'
- en: '**Base Class Libraries (BCL or CoreFX)** : These are prebuilt assemblies of
    types packaged and distributed using NuGet for performing common tasks when building
    applications. You can use them to quickly build anything you want, rather like
    combining LEGO™ pieces. .NET Core 2.0 implemented .NET Standard 2.0, which is
    a superset of all previous versions of .NET Standard, and lifted .NET Core up
    to parity with .NET Framework and Xamarin. .NET Core 3.0 implemented .NET Standard
    2.1, which added new capabilities and enables performance improvements beyond
    those available in .NET Framework. .NET 6 implements a unified BCL across all
    types of apps, including mobile.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础类库（BCL或CoreFX）**：这些是使用NuGet打包和分发的预构建类型程序集，用于构建应用程序时执行常见任务。您可以使用它们快速构建任何您想要的东西，就像组合LEGO™积木一样。.NET
    Core 2.0实现了.NET Standard 2.0，它是所有以前版本的.NET Standard的超集，并将.NET Core提升到了与.NET Framework和Xamarin的平等。.NET
    Core 3.0实现了.NET Standard 2.1，它增加了新的功能，并使性能优于.NET Framework。.NET 6实现了跨所有类型应用程序的统一BCL，包括移动应用程序。'
- en: Understanding assemblies, NuGet packages, and namespaces
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解程序集、NuGet包和命名空间
- en: An **assembly** is where a type is stored in the filesystem. Assemblies are
    a mechanism for deploying code. For example, the `System.Data.dll` assembly contains
    types for managing data. To use types in other assemblies, they must be referenced.
    Assemblies can be static (pre-created) or dynamic (generated at runtime). Dynamic
    assemblies are an advanced feature that we will not cover in this book. Assemblies
    can be compiled into a single file as a DLL (class library) or an EXE (console
    app).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序集**是类型存储在文件系统中的地方。程序集是部署代码的一种机制。例如，`System.Data.dll`程序集包含了管理数据的类型。要使用其他程序集中的类型，必须引用它们。程序集可以是静态的（预先创建的）或动态的（在运行时生成的）。动态程序集是我们在本书中不会涉及的高级功能。程序集可以编译成一个文件，作为DLL（类库）或EXE（控制台应用）。'
- en: Assemblies are distributed as **NuGet packages** , which are files downloadable
    from public online feeds and can contain multiple assemblies and other resources.
    You will also hear about **project SDKs** , **workloads** , and **platforms**
    , which are combinations of NuGet packages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 程序集以**NuGet包**的形式分发，这些文件可以从公共在线源下载，并且可以包含多个程序集和其他资源。您还会听到**项目SDK**、**工作负载**和**平台**，它们是NuGet包的组合。
- en: 'Microsoft''s NuGet feed is found here: [https://www.nuget.org/](https://www.nuget.org/)
    .'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的NuGet源可以在这里找到：[https://www.nuget.org/](https://www.nuget.org/)。
- en: What is a namespace?
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是命名空间？
- en: A namespace is the address of a type. Namespaces are a mechanism to uniquely
    identify a type by requiring a full address rather than just a short name. In
    the real world, *Bob of 34 Sycamore Street* is different from *Bob of 12 Willow
    Drive* .
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是类型的地址。命名空间是一种通过需要完整地址而不仅仅是一个简短名称来唯一标识类型的机制。在现实世界中，*34 Sycamore Street的Bob*和*12
    Willow Drive的Bob*是不同的。
- en: In .NET, the `IActionFilter` interface of the `System.Web.Mvc` namespace is
    different from the `IActionFilter` interface of the `System.Web.Http.Filters`
    namespace.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET中，`System.Web.Mvc`命名空间的`IActionFilter`接口与`System.Web.Http.Filters`命名空间的`IActionFilter`接口是不同的。
- en: Understanding dependent assemblies
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解依赖程序集
- en: If an assembly is compiled as a class library and provides types for other assemblies
    to use, then it has the file extension `.dll` (**dynamic link library** ), and
    it cannot be executed standalone.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个程序集被编译为类库并提供其他程序集使用的类型，那么它的文件扩展名是`.dll`（**动态链接库**），它不能独立执行。
- en: Likewise, if an assembly is compiled as an application, then it has the file
    extension `.exe` (**executable** ) and can be executed standalone. Before .NET
    Core 3.0, console apps were compiled to `.dll` files and had to be executed by
    the `dotnet run` command or a host executable.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果一个程序集被编译为应用程序，那么它的文件扩展名是`.exe`（**可执行文件**），可以独立执行。在.NET Core 3.0之前，控制台应用程序被编译为`.dll`文件，并且必须通过`dotnet
    run`命令或主机可执行文件来执行。
- en: Any assembly can reference one or more class library assemblies as dependencies,
    but you cannot have circular references. So, assembly *B* cannot reference assembly
    *A* if assembly *A* already references assembly *B* . The compiler will warn you
    if you attempt to add a dependency reference that would cause a circular reference.
    Circular references are often a warning sign of poor code design. If you are sure
    that you need a circular reference, then use an interface to solve it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 任何程序集都可以引用一个或多个类库程序集作为依赖项，但不能有循环引用。因此，如果程序集*A*已经引用了程序集*B*，那么程序集*B*就不能引用程序集*A*。如果您尝试添加一个会导致循环引用的依赖引用，编译器会警告您。循环引用通常是糟糕代码设计的警告信号。如果您确定需要循环引用，那么使用接口来解决它。
- en: Understanding the Microsoft .NET project SDKs
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Microsoft .NET项目SDK
- en: By default, console applications have a dependency reference on the Microsoft
    .NET project SDK. This platform contains thousands of types in NuGet packages
    that almost all applications would need, such as the `System.Int32` and `System.String`
    types.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，控制台应用程序依赖于Microsoft .NET项目SDK。该平台包含了几乎所有应用程序都需要的NuGet包中的成千上万的类型，例如`System.Int32`和`System.String`类型。
- en: When using .NET, you reference the dependency assemblies, NuGet packages, and
    platforms that your application needs in a project file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用.NET时，您需要在项目文件中引用依赖程序集、NuGet包和应用程序所需的平台。
- en: 'Let''s explore the relationship between assemblies and namespaces:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探讨程序集和命名空间之间的关系：
- en: Use your preferred code editor to create a new solution/workspace named `Chapter07`
    .
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建一个名为`Chapter07`的新解决方案/工作区。
- en: 'Add a console app project, as defined in the following list:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制台应用程序项目，如下列表所定义的：
- en: 'Project template: **Console Application** / `console`'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Workspace/solution file and folder: `Chapter07`'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`Chapter07`
- en: 'Project file and folder: `AssembliesAndNamespaces`'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`AssembliesAndNamespaces`
- en: 'Open `AssembliesAndNamespaces.csproj` and note that it is a typical project
    file for a .NET 6 application, as shown in the following markup:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AssembliesAndNamespaces.csproj`，注意它是一个典型的.NET 6应用程序的项目文件，如下标记所示：
- en: '```cs'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: </PropertyGroup>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: </Project>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Understanding namespaces and types in assemblies
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解程序集中的命名空间和类型
- en: 'Many common .NET types are in the `System.Runtime.dll` assembly. There is not
    always a one-to-one mapping between assemblies and namespaces. A single assembly
    can contain many namespaces and a namespace can be defined in many assemblies.
    You can see the relationship between some assemblies and the namespaces that they
    supply types for, as shown in the following table:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的.NET类型都在`System.Runtime.dll`程序集中。程序集和命名空间之间并不总是一一对应。一个程序集可以包含多个命名空间，一个命名空间可以在多个程序集中定义。您可以看到一些程序集与它们提供类型的命名空间之间的关系，如下表所示：
- en: '| Assembly | Example namespaces | Example types |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 程序集 | 示例命名空间 | 示例类型 |'
- en: '| `System.Runtime.dll` | `System` , `System.Collections` , `System.Collections.Generic`
    | `Int32` , `String` , `IEnumerable<T>` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `System.Runtime.dll` | `System` , `System.Collections` , `System.Collections.Generic`
    | `Int32` , `String` , `IEnumerable<T>` |'
- en: '| `System.Console.dll` | `System` | `Console` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `System.Console.dll` | `System` | `Console` |'
- en: '| `System.Threading.dll` | `System.Threading` | `Interlocked` , `Monitor` ,
    `Mutex` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `System.Threading.dll` | `System.Threading` | `Interlocked` , `Monitor` ,
    `Mutex` |'
- en: '| `System.Xml.XDocument.dll` | `System.Xml.Linq` | `XDocument` , `XElement`
    , `XNode` |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `System.Xml.XDocument.dll` | `System.Xml.Linq` | `XDocument` , `XElement`
    , `XNode` |'
- en: Understanding NuGet packages
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解NuGet包
- en: .NET is split into a set of packages, distributed using a Microsoft-supported
    package management technology named NuGet. Each of these packages represents a
    single assembly of the same name. For example, the `System.Collections` package
    contains the `System.Collections.dll` assembly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: .NET被分成一组包，使用名为NuGet的Microsoft支持的包管理技术进行分发。这些包中的每一个代表着同名的单个程序集。例如，`System.Collections`包包含了`System.Collections.dll`程序集。
- en: 'The following are the benefits of packages:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包的好处：
- en: Packages can be easily distributed on public feeds.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以轻松地在公共源上分发。
- en: Packages can be reused.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以被重用。
- en: Packages can ship on their own schedule.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以按照自己的时间表发布。
- en: Packages can be tested independently of other packages.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以独立于其他包进行测试。
- en: Packages can support different OSes and CPUs by including multiple versions
    of the same assembly built for different OSes and CPUs.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以通过包含为不同操作系统和CPU构建的同一程序集的多个版本来支持不同的操作系统和CPU。
- en: Packages can have dependencies specific to only one library.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包可以具有特定于一个库的依赖项。
- en: 'Apps are smaller because unreferenced packages aren''t part of the distribution.
    The following table lists some of the more important packages and their important
    types:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序更小，因为未引用的包不会成为分发的一部分。以下表列出了一些更重要的包及其重要的类型：
- en: '| Package | Important types |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 包 | 重要类型 |'
- en: '| `System.Runtime` | `Object` , `String` , `Int32` , `Array` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `System.Runtime` | `Object` , `String` , `Int32` , `Array` |'
- en: '| `System.Collections` | `List<T>` , `Dictionary<TKey, TValue>` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `System.Collections` | `List<T>` , `Dictionary<TKey, TValue>` |'
- en: '| `System.Net.Http` | `HttpClient` , `HttpResponseMessage` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `System.Net.Http` | `HttpClient` , `HttpResponseMessage` |'
- en: '| `System.IO.FileSystem` | `File` , `Directory` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `System.IO.FileSystem` | `File` , `Directory` |'
- en: '| `System.Reflection` | `Assembly` , `TypeInfo` , `MethodInfo` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `System.Reflection` | `Assembly` , `TypeInfo` , `MethodInfo` |'
- en: Understanding frameworks
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解框架
- en: There is a two-way relationship between frameworks and packages. Packages define
    the APIs, while frameworks group packages. A framework without any packages would
    not define any APIs.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 框架和包之间存在双向关系。包定义 API，而框架将包分组。没有任何包的框架将不定义任何 API。
- en: '.NET packages each support a set of frameworks. For example, the `System.IO.FileSystem`
    package version 4.3.0 supports the following frameworks:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 包各自支持一组框架。例如，`System.IO.FileSystem` 包版本 4.3.0 支持以下框架：
- en: .NET Standard, version 1.3 or later.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Standard，1.3 版或更高版本。
- en: .NET Framework, version 4.6 or later.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Framework，4.6 版或更高版本。
- en: Six Mono and Xamarin platforms (for example, Xamarin.iOS 1.0).
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六个 Mono 和 Xamarin 平台（例如，Xamarin.iOS 1.0）。
- en: '**More Information** : You can read the details at the following link: [https://www.nuget.org/packages/System.IO.FileSystem/](https://www.nuget.org/packages/System.IO.FileSystem/)
    .'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接阅读详细信息：[https://www.nuget.org/packages/System.IO.FileSystem/](https://www.nuget.org/packages/System.IO.FileSystem/)。'
- en: Importing a namespace to use a type
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入命名空间以使用类型
- en: 'Let''s explore how namespaces are related to assemblies and types:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨命名空间与程序集和类型的关系：
- en: 'In the `AssembliesAndNamespaces` project, in `Program.cs` , enter the following
    code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AssembliesAndNamespaces` 项目的 `Program.cs` 中，输入以下代码：
- en: '```cs'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: XDocument doc = new
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: XDocument doc = new
- en: ();
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: '```'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Build the project and note the compiler error message, as shown in the following
    output:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并注意编译器错误消息，如下所示：
- en: '```cs'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: The type or namespace name 'XDocument' could not be found (are you missing a
    using directive or an assembly reference?)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 类型或命名空间名称 'XDocument' 无法找到（您是否缺少 using 指令或程序集引用？）
- en: '```'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The `XDocument` type is not recognized because we have not told the compiler
    what the namespace of the type is. Although this project already has a reference
    to the assembly that contains the type, we also need to either prefix the type
    name with its namespace or import the namespace.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`XDocument` 类型未被识别，因为我们没有告诉编译器该类型的命名空间是什么。尽管该项目已经引用了包含该类型的程序集，但我们还需要使用其命名空间前缀类型名称，或者导入命名空间。'
- en: Click inside the `XDocument` class name. Your code editor displays a light bulb,
    showing that it recognizes the type and can automatically fix the problem for
    you.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `XDocument` 类名。您的代码编辑器会显示一个灯泡，表明它识别到了该类型，并可以自动为您修复问题。
- en: Click the light bulb, and select `using System.Xml.Linq;` from the menu.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击灯泡，并从菜单中选择 `using System.Xml.Linq;`。
- en: This will *import the namespace* by adding a `using` statement to the top of
    the file. Once a namespace is imported at the top of a code file, then all the
    types within the namespace are available for use in that code file by just typing
    their name without the type name needing to be fully qualified by prefixing it
    with its namespace.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过在文件顶部添加 `using` 语句*导入命名空间*。一旦命名空间在代码文件顶部被导入，那么命名空间中的所有类型都可以在该代码文件中使用，只需输入它们的名称，而不需要通过在其前缀中加上其命名空间来完全限定类型名称。
- en: 'Sometimes I like to add a comment with a type name after importing a namespace
    to remind me why I need to import that namespace, as shown in the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我喜欢在导入命名空间后添加一个带有类型名称的注释，以提醒我为什么需要导入该命名空间，如下所示：
- en: '```cs'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Xml.Linq; // XDocument
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: System.Xml.Linq; // XDocument
- en: '```'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Relating C# keywords to .NET types
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 C# 关键字与 .NET 类型相关联
- en: One of the common questions I get from new C# programmers is, "What is the difference
    between `string` with a lowercase s and `String` with an uppercase S?"
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我从新手 C# 程序员那里经常得到的一个常见问题是，“`string` 和大写 `String` 之间有什么区别？”
- en: 'The short answer is easy: none. The long answer is that all C# type keywords
    like `string` or `int` are aliases for a .NET type in a class library assembly.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 简短的答案很简单：没有。长答案是，所有 C# 类型关键字，如 `string` 或 `int`，都是类库程序集中 .NET 类型的别名。
- en: When you use the `string` keyword, the compiler recognizes it as a `System.String`
    type. When you use the `int` type, the compiler recognizes it as a `System.Int32`
    type.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 `string` 关键字时，编译器将其识别为 `System.String` 类型。当您使用 `int` 类型时，编译器将其识别为 `System.Int32`
    类型。
- en: 'Let''s see this in action with some code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些代码来看看这一点：
- en: 'In `Program.cs` , declare two variables to hold `string` values, one using
    lowercase `string` and one using uppercase `String` , as shown in the following
    code:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，声明两个变量来保存 `string` 值，一个使用小写的 `string`，一个使用大写的 `String`，如下所示：
- en: '```cs'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: s1 = "Hello"
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: s1 = "Hello"
- en: ;
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: String s2 = "World"
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: String s2 = "World"
- en: ;
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: WriteLine($"
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{s1}'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '{s1}'
- en: '{s2}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '{s2}'
- en: '"'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code, and note that at the moment, they both work equally well, and
    literally mean the same thing.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意目前它们都同样有效，并且字面上意思相同。
- en: 'In `AssembliesAndNamespaces.csproj` , add entries to prevent the `System` namespace
    from being globally imported, as shown in the following markup:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AssembliesAndNamespaces.csproj` 中，添加条目以防止全局导入 `System` 命名空间，如下所示：
- en: '```cs'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <Using Remove="System"
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <使用 Remove="System"
- en: />
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` note the compiler error message, as shown in the following
    output:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中注意编译器错误消息，如下所示：
- en: '```cs'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: The type or namespace name 'String' could not be found (are you missing a using
    directive or an assembly reference?)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 类型或命名空间名称 'String' 无法找到（您是否缺少 using 指令或程序集引用？）
- en: '```'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the top of `Program.cs` , import the `System` namespace with a `using` statement
    that will fix the error, as shown in the following code:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 的顶部，使用 `using` 语句导入 `System` 命名空间，以修复错误，如下所示：
- en: '```cs'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System; // String
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: System; // String
- en: '```'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : When you have a choice, use the C# keyword instead of the
    actual type because the keywords do not need the namespace imported.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当有选择时，使用 C# 关键字而不是实际类型，因为关键字不需要导入命名空间。'
- en: Mapping C# aliases to .NET types
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 C# 别名映射到 .NET 类型
- en: 'The following table shows the 18 C# type keywords along with their actual .NET
    types:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了 18 个 C# 类型关键字以及它们的实际 .NET 类型：
- en: '| Keyword | .NET type | Keyword | .NET type |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| 关键字 | .NET 类型 | 关键字 | .NET 类型 |'
- en: '| `string` | `System.String` | `char` | `System.Char` |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `string` | `System.String` | `char` | `System.Char` |'
- en: '| `sbyte` | `System.SByte` | `byte` | `System.Byte` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `sbyte` | `System.SByte` | `byte` | `System.Byte` |'
- en: '| `short` | `System.Int16` | `ushort` | `System.UInt16` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `short` | `System.Int16` | `ushort` | `System.UInt16` |'
- en: '| `int` | `System.Int32` | `uint` | `System.UInt32` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `int` | `System.Int32` | `uint` | `System.UInt32` |'
- en: '| `long` | `System.Int64` | `ulong` | `System.UInt64` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `long` | `System.Int64` | `ulong` | `System.UInt64` |'
- en: '| `nint` | `System.IntPtr` | `nuint` | `System.UIntPtr` |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `nint` | `System.IntPtr` | `nuint` | `System.UIntPtr` |'
- en: '| `float` | `System.Single` | `double` | `System.Double` |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `float` | `System.Single` | `double` | `System.Double` |'
- en: '| `decimal` | `System.Decimal` | `bool` | `System.Boolean` |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `decimal` | `System.Decimal` | `bool` | `System.Boolean` |'
- en: '| `object` | `System.Object` | `dynamic` | `System.Dynamic.DynamicObject` |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `object` | `System.Object` | `dynamic` | `System.Dynamic.DynamicObject` |'
- en: Other .NET programming language compilers can do the same thing. For example,
    the Visual Basic .NET language has a type named `Integer` that is its alias for
    `System.Int32` .
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 其他.NET编程语言编译器也可以做同样的事情。例如，Visual Basic .NET语言有一个名为`Integer`的类型，它是`System.Int32`的别名。
- en: Understanding native-sized integers
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 理解本机大小的整数
- en: C# 9 introduced `nint` and `nuint` keyword alias for **native-sized integers**
    , meaning that the storage size for the integer value is platform specific. They
    store a 32-bit integer in a 32-bit process and `sizeof()` returns 4 bytes; they
    store a 64-bit integer in a 64-bit process and `sizeof()` returns 8 bytes. The
    aliases represent pointers to the integer value in memory, which is why their
    .NET names are `IntPtr` and `UIntPtr` . The actual storage type will be either
    `System.Int32` or `System.Int64` depending on the process.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: C# 9引入了`nint`和`nuint`关键字别名，表示**本机大小的整数**，这意味着整数值的存储大小是特定于平台的。它们在32位进程中存储32位整数，并且`sizeof()`返回4个字节；它们在64位进程中存储64位整数，并且`sizeof()`返回8个字节。这些别名表示内存中整数值的指针，这就是它们的.NET名称为`IntPtr`和`UIntPtr`的原因。实际的存储类型将根据进程是`System.Int32`还是`System.Int64`。
- en: 'In a 64-bit process, the following code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在64位进程中，以下代码：
- en: '```cs'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine($"int.MaxValue =
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"int.MaxValue =
- en: '{'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: int
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: .MaxValue:N0}
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: .MaxValue:N0}
- en: '"'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"nint.MaxValue =
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"nint.MaxValue =
- en: '{'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: nint
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: nint
- en: .MaxValue:N0}
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: .MaxValue:N0}
- en: '"'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'produces this output:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 产生以下输出：
- en: '```cs'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: int.MaxValue = 2,147,483,647
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: int.MaxValue = 2,147,483,647
- en: nint.MaxValue = 9,223,372,036,854,775,807
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: nint.MaxValue = 9,223,372,036,854,775,807
- en: '```'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Revealing the location of a type
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 揭示类型的位置
- en: 'Code editors provide built-in documentation for .NET types. Let''s explore:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器为.NET类型提供了内置文档。让我们来探索一下：
- en: Right-click inside `XDocument` and choose **Go to Definition** .
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`XDocument`内部，然后选择**转到定义**。
- en: Navigate to the top of the code file and note the assembly filename is `System.Xml.XDocument.dll`
    , but the class is in the `System.Xml.Linq` namespace, as shown in *Figure 7.1*
    :![Graphical user interface, text, application, email Description automatically
    generated](img/Image00076.jpg)
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到代码文件的顶部，注意程序集文件名是`System.Xml.XDocument.dll`，但该类在`System.Xml.Linq`命名空间中，如*图7.1*所示：![图形用户界面，文本，应用程序，电子邮件描述自动生成](img/Image00076.jpg)
- en: 'Figure 7.1: Assembly and namespace that contains the XDocument type'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：包含XDocument类型的程序集和命名空间
- en: Close the **XDocument [from metadata]** tab.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**XDocument [from metadata]**标签。
- en: Right-click inside `string` or `String` and choose **Go to Definition** .
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`string`或`String`内部，然后选择**转到定义**。
- en: Navigate to the top of the code file and note the assembly filename is `System.Runtime.dll`
    but the class is in the `System` namespace.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到代码文件的顶部，注意程序集文件名是`System.Runtime.dll`，但该类在`System`命名空间中。
- en: Actually, your code editor is technically lying to you. If you remember when
    we wrote code in *Chapter 2* , *Speaking C#* , when we revealed the extent of
    the C# vocabulary, we discovered that the `System.Runtime.dll` assembly contains
    zero types.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您的代码编辑器在技术上是在欺骗您。如果您还记得我们在*第2章*，*说C#*中编写代码时，当我们揭示了C#词汇量的范围时，我们发现`System.Runtime.dll`程序集中不包含任何类型。
- en: What it does contain are type-forwarders. These are special types that appear
    to exist in an assembly but actually are implemented elsewhere. In this case,
    they are implemented deep inside the .NET runtime using highly optimized code.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含的是类型转发器。这些是特殊类型，看起来存在于一个程序集中，但实际上是在其他地方实现的。在这种情况下，它们是使用高度优化的代码在.NET运行时深处实现的。
- en: Sharing code with legacy platforms using .NET Standard
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用.NET Standard与旧平台共享代码
- en: Before .NET Standard, there were **Portable Class Libraries** (**PCLs** ). With
    PCLs, you could create a library of code and explicitly specify which platforms
    you want the library to support, such as Xamarin, Silverlight, and Windows 8\.
    Your library could then use the intersection of APIs that are supported by the
    specified platforms.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Standard之前，有**可移植类库**（**PCLs**）。使用PCLs，您可以创建一个代码库，并明确指定要支持该库的平台，例如Xamarin、Silverlight和Windows
    8。然后，您的库可以使用指定平台支持的API的交集。
- en: Microsoft realized that this is unsustainable, so they created .NET Standard—a
    single API that all future .NET platforms would support. There are older versions
    of .NET Standard, but .NET Standard 2.0 was an attempt to unify all important
    recent .NET platforms. .NET Standard 2.1 was released in late 2019 but only .NET
    Core 3.0 and that year's version of Xamarin support its new features. For the
    rest of this book, I will use the term .NET Standard to mean .NET Standard 2.0.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 微软意识到这是不可持续的，所以他们创建了.NET Standard——一个所有未来.NET平台都将支持的单一API。有较早版本的.NET Standard，但.NET
    Standard 2.0是统一所有重要的最近.NET平台的尝试。.NET Standard 2.1在2019年底发布，但只有.NET Core 3.0和当年的Xamarin版本支持其新功能。在本书的其余部分，我将使用术语.NET
    Standard来指代.NET Standard 2.0。
- en: .NET Standard is similar to HTML5 in that they are both standards that a platform
    should support. Just as Google's Chrome browser and Microsoft's Edge browser implement
    the HTML5 standard, .NET Core, .NET Framework, and Xamarin all implement .NET
    Standard. If you want to create a library of types that will work across variants
    of legacy .NET, you can do so most easily with .NET Standard.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard类似于HTML5，因为它们都是平台应该支持的标准。就像谷歌的Chrome浏览器和微软的Edge浏览器实现HTML5标准一样，.NET
    Core、.NET Framework和Xamarin都实现.NET Standard。如果您想要创建一个可以在各种旧版.NET上工作的类型库，那么最容易使用.NET
    Standard。
- en: '**Good Practice** : Since many of the API additions in .NET Standard 2.1 required
    runtime changes, and .NET Framework is Microsoft''s legacy platform that needs
    to remain as unchanging as possible, .NET Framework 4.8 remained on .NET Standard
    2.0 rather than implementing .NET Standard 2.1\. If you need to support .NET Framework
    customers, then you should create class libraries on .NET Standard 2.0 even though
    it is not the latest and does not support all the recent language and BCL new
    features.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：由于.NET Standard 2.1中的许多API添加需要运行时更改，而.NET Framework是微软的遗留平台，需要尽可能保持不变，因此.NET
    Framework 4.8仍然保持在.NET Standard 2.0上，而不是实现.NET Standard 2.1。如果您需要支持.NET Framework客户端，则应该在.NET
    Standard 2.0上创建类库，即使它不是最新的，也不支持所有最近的语言和BCL新功能。'
- en: Your choice of which .NET Standard version to target comes down to a balance
    between maximizing platform support and available functionality. A lower version
    supports more platforms but has a smaller set of APIs. A higher version supports
    fewer platforms but has a larger set of APIs. Generally, you should choose the
    lowest version that supports all the APIs that you need.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择要针对的.NET Standard版本取决于最大化平台支持和可用功能之间的平衡。较低版本支持更多平台，但具有较小的API集。较高版本支持较少的平台，但具有更大的API集。通常，您应该选择支持您需要的所有API的最低版本。
- en: Understanding defaults for class libraries with different SDKs
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解不同SDK的类库默认值
- en: 'When using the `dotnet` SDK tool to create a class library it might be useful
    to know which target framework will be used by default, as shown in the following
    table:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dotnet` SDK工具创建类库时，了解默认使用的目标框架可能是有用的，如下表所示：
- en: '| SDK | Default target framework for new class libraries |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| SDK | 新类库的默认目标框架 |'
- en: '| .NET Core 3.1 | `netstandard2.0` |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 3.1 | `netstandard2.0` |'
- en: '| .NET 5 | `net5.0` |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| .NET 5 | `net5.0` |'
- en: '| .NET 6 | `net6.0` |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| .NET 6 | `net6.0` |'
- en: Of course, just because a class library targets a specific version of .NET by
    default does not mean you cannot change it after creating a class library project
    using the default template.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，类库默认针对特定版本的.NET并不意味着您在使用默认模板创建类库项目后就不能更改它。
- en: 'You can manually set the target framework to a value that supports the projects
    that need to reference that library, as shown in the following table:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以手动设置目标框架的值，以支持需要引用该库的项目，如下表所示：
- en: '| Class library target framework | Can be used by projects that target |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| 类库目标框架 | 可被目标项目使用 |'
- en: '| `netstandard2.0` | .NET Framework 4.6.1 or later, .NET Core 2.0 or later,
    .NET 5.0 or later, Mono 5.4 or later, Xamarin.Android 8.0 or later, Xamarin.iOS
    10.14 or later |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `netstandard2.0` | .NET Framework 4.6.1或更高版本，.NET Core 2.0或更高版本，.NET 5.0或更高版本，Mono
    5.4或更高版本，Xamarin.Android 8.0或更高版本，Xamarin.iOS 10.14或更高版本 |'
- en: '| `netstandard2.1` | .NET Core 3.0 or later, .NET 5.0 or later, Mono 6.4 or
    later, Xamarin.Android 10.0 or later, Xamarin.iOS 12.16 or later |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `netstandard2.1` | .NET Core 3.0或更高版本，.NET 5.0或更高版本，Mono 6.4或更高版本，Xamarin.Android
    10.0或更高版本，Xamarin.iOS 12.16或更高版本 |'
- en: '| `net5.0` | .NET 5.0 or later |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `net5.0` | .NET 5.0或更高版本 |'
- en: '| `net6.0` | .NET 6.0 or later |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `net6.0` | .NET 6.0或更高版本 |'
- en: '**Good Practice** : Always check the target framework of a class library and
    then manually change it to something more appropriate if necessary. Make a conscious
    decision about what it should be rather than accept the default.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：始终检查类库的目标框架，然后根据需要手动更改它为更合适的内容。做出有意识的决定，而不是接受默认值。'
- en: Creating a .NET Standard 2.0 class library
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个.NET Standard 2.0类库
- en: 'We will create a class library using .NET Standard 2.0 so that it can be used
    across all important .NET legacy platforms and cross-platform on Windows, macOS,
    and Linux operating systems, while also having access to a wide set of .NET APIs:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用.NET Standard 2.0创建一个类库，以便它可以跨所有重要的.NET旧版平台和Windows、macOS和Linux操作系统上进行跨平台使用，同时还可以访问广泛的.NET
    API集：
- en: Use your preferred code editor to add a new class library named `SharedLibrary`
    to the `Chapter07` solution/workspace.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器向`Chapter07`解决方案/工作区添加一个名为`SharedLibrary`的新类库。
- en: If you use Visual Studio 2022, when prompted for the **Target Framework** ,
    select **.NET Standard 2.0** , and then set the startup project for the solution
    to the current selection.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Visual Studio 2022，在提示**目标框架**时，选择**.NET Standard 2.0**，然后将解决方案的启动项目设置为当前选择。
- en: 'If you use Visual Studio Code, include a switch to target .NET Standard 2.0,
    as shown in the following command:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Visual Studio Code，包括一个切换以针对.NET Standard 2.0，如下命令所示：
- en: '```cs'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new classlib -f netstandard2.0
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new classlib -f netstandard2.0
- en: '```'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you use Visual Studio Code, select `SharedLibrary` as the active OmniSharp
    project.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用Visual Studio Code，请将`SharedLibrary`选择为活动的OmniSharp项目。
- en: '**Good Practice** : If you need to create types that use new features in .NET
    6.0, as well as types that only use .NET Standard 2.0 features, then you can create
    two separate class libraries: one targeting .NET Standard 2.0 and one targeting
    .NET 6.0\. You will see this in action in *Chapter 10* , *Working with Data Using
    Entity Framework Core* .'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果您需要创建使用.NET 6.0新功能的类型，以及仅使用.NET Standard 2.0功能的类型，那么可以创建两个单独的类库：一个针对.NET
    Standard 2.0，一个针对.NET 6.0。您将在*第10章*，*使用Entity Framework Core处理数据*中看到这一点。'
- en: 'An alternative to manually creating two class libraries is to create one that
    supports multi-targeting. If you would like me to add a section about multi-targeting
    to the next edition, please let me know. You can read about multi-targeting here:
    [https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting](https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting)
    .'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 手动创建两个类库的替代方法是创建一个支持多目标的类库。如果您希望我在下一版中添加一个关于多目标的部分，请告诉我。您可以在这里阅读有关多目标的信息：[https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting](https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting#multi-targeting)。
- en: Controlling the .NET SDK
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制.NET SDK
- en: By default, executing `dotnet` commands uses the most recent installed .NET
    SDK. There may be times when you want to control which SDK is used.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，执行`dotnet`命令会使用最近安装的.NET SDK。有时您可能希望控制使用哪个SDK。
- en: For example, one reader of the fourth edition wanted their experience to match
    the book steps that use the .NET Core 3.1 SDK. But they had installed the .NET
    5.0 SDK as well and that was being used by default. As described in the previous
    section, the behavior when creating new class libraries changed to target .NET
    5.0 instead of .NET Standard 2.0, and that confused the reader.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，第四版的一位读者希望他们的体验与使用.NET Core 3.1 SDK的书中步骤相匹配。但他们还安装了.NET 5.0 SDK，并且默认情况下正在使用。如前一节所述，创建新类库时的行为已更改为以.NET
    5.0为目标，而不是.NET Standard 2.0，这让读者感到困惑。
- en: You can control the .NET SDK used by default by using a `global.json` file.
    The `dotnet` command searches the current folder and ancestor folders for a `global.json`
    file.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`global.json`文件来控制默认使用的.NET SDK。`dotnet`命令会在当前文件夹和祖先文件夹中搜索`global.json`文件。
- en: Create a subdirectory/folder in the `Chapter07` folder named `ControlSDK` .
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter07`文件夹中创建一个名为`ControlSDK`的子目录/文件夹。
- en: On Windows, start **Command Prompt** or **Windows Terminal** . On macOS, start
    **Terminal** . If you are using Visual Studio Code, then you can use the integrated
    terminal.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，启动**命令提示符**或**Windows终端**。在macOS上，启动**终端**。如果您使用Visual Studio Code，则可以使用集成终端。
- en: 'In the `ControlSDK` folder, at the command prompt or terminal, enter a command
    to create a `global.json` file that forces the use of the latest .NET Core 3.1
    SDK, as shown in the following command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ControlSDK`文件夹中，在命令提示符或终端中，输入一个命令来创建一个`global.json`文件，强制使用最新的.NET Core 3.1
    SDK，如下所示的命令：
- en: '```cs'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new globaljson --sdk-version 3.1.412
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new globaljson --sdk-version 3.1.412
- en: '```'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Open the `global.json` file and review its contents, as shown in the following
    markup:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`global.json`文件并查看其内容，如下标记所示：
- en: '```cs'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '{'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"sdk"'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '"sdk"'
- en: ': {'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ': {'
- en: '"version"'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '"版本"'
- en: ': "3.1.412"'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ': "3.1.412"'
- en: '}'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '```'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You can discover the version numbers of the latest .NET SDKs in the table at
    the following link: [https://dotnet.microsoft.com/download/visual-studio-sdks](https://dotnet.microsoft.com/download/visual-studio-sdks)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接的表格中发现最新.NET SDK的版本号：[https://dotnet.microsoft.com/download/visual-studio-sdks](https://dotnet.microsoft.com/download/visual-studio-sdks)
- en: 'In the `ControlSDK` folder, at the command prompt or terminal, enter a command
    to create a class library project, as shown in the following command:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ControlSDK`文件夹中，在命令提示符或终端中，输入一个命令来创建一个类库项目，如下所示的命令：
- en: '```cs'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new classlib
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new classlib
- en: '```'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If you do not have the .NET Core 3.1 SDK installed then you will see an error,
    as shown in the following output:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未安装.NET Core 3.1 SDK，则将看到一个错误，如下所示的输出：
- en: '```cs'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Could not execute because the application was not found or a compatible .NET
    SDK is not installed.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 无法执行，因为未找到应用程序或未安装兼容的.NET SDK。
- en: '```'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you do have the .NET Core 3.1 SDK installed, then a class library project
    will be created that targets .NET Standard 2.0 by default.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经安装了.NET Core 3.1 SDK，则将默认创建一个以.NET Standard 2.0为目标的类库项目。
- en: 'You do not need to complete the above steps, but if you want to try and do
    not already have .NET Core 3.1 SDK installed then you can install it from the
    following link:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要完成上述步骤，但如果您想尝试并且尚未安装.NET Core 3.1 SDK，则可以从以下链接安装：
- en: '[https://dotnet.microsoft.com/download/dotnet/3.1](https://dotnet.microsoft.com/download/dotnet/3.1)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dotnet.microsoft.com/download/dotnet/3.1](https://dotnet.microsoft.com/download/dotnet/3.1)'
- en: Publishing your code for deployment
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布您的代码以进行部署
- en: If you write a novel and you want other people to read it, you must publish
    it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您写了一本小说，希望其他人阅读，您必须将其发布。
- en: Most developers write code for other developers to use in their own code, or
    for users to run as an app. To do so, you must publish your code as packaged class
    libraries or executable applications.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员编写代码供其他开发人员在其自己的代码中使用，或供用户作为应用程序运行。为此，您必须将代码发布为打包的类库或可执行应用程序。
- en: 'There are three ways to publish and deploy a .NET application. They are:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以发布和部署.NET应用程序。它们是：
- en: '**Framework-dependent deployment** (**FDD** ).'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Framework-dependent deployment**（**FDD**）。'
- en: '**Framework-dependent executables** (**FDEs** ).'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Framework-dependent executables**（**FDEs**）。'
- en: Self-contained.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Self-contained.
- en: If you choose to deploy your application and its package dependencies, but not
    .NET itself, then you rely on .NET already being on the target computer. This
    works well for web applications deployed to a server because .NET and lots of
    other web applications are likely already on the server.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择部署应用程序及其包依赖项，但不包括.NET本身，则依赖于目标计算机上已经安装了.NET。这对于部署到服务器的Web应用程序非常有效，因为.NET和许多其他Web应用程序很可能已经在服务器上。
- en: '**Framework-dependent deployment** (**FDD** ) means you deploy a DLL that must
    be executed by the `dotnet` command-line tool. **Framework-dependent executables**
    (**FDE** ) means you deploy an EXE that can be run directly from the command line.
    Both require .NET to be already installed on the system.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**Framework-dependent deployment**（**FDD**）意味着您部署一个必须由`dotnet`命令行工具执行的DLL。**Framework-dependent
    executables**（**FDE**）意味着您部署一个可以直接从命令行运行的EXE。两者都需要系统上已经安装了.NET。'
- en: Sometimes, you want to be able to give someone a USB stick containing your application
    and know that it can execute on their computer. You want to perform a self-contained
    deployment. While the size of the deployment files will be larger, you'll know
    that it will work.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您希望能够给某人一个包含您的应用程序的 USB 硬盘，并知道它可以在他们的计算机上执行。您希望执行自包含部署。虽然部署文件的大小会更大，但您会知道它可以工作。
- en: Creating a console application to publish
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个控制台应用程序进行发布
- en: 'Let''s explore how to publish a console application:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何发布一个控制台应用程序：
- en: Use your preferred code editor to add a new console app named `DotNetEverywhere`
    to the `Chapter07` solution/workspace.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`DotNetEverywhere`的新控制台应用添加到`Chapter07`解决方案/工作区中。
- en: In Visual Studio Code, select `DotNetEverywhere` as the active OmniSharp project.
    When you see the pop-up warning message saying that required assets are missing,
    click **Yes** to add them.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，选择`DotNetEverywhere`作为活动的 OmniSharp 项目。当您看到弹出的警告消息说缺少所需的资源时，点击**是**进行添加。
- en: In `Program.cs` , delete the comment and statically import the `Console` class.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除注释并静态导入`Console`类。
- en: 'In `Program.cs` , add a statement to output a message saying the console app
    can run everywhere and some information about the operating system, as shown in
    the following code:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加一个语句输出一个消息，表明控制台应用可以在任何地方运行，并提供一些关于操作系统的信息，如下所示的代码：
- en: '```cs'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine("I can run everywhere!"
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("我可以在任何地方运行！"
- en: );
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"OS Version is
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"操作系统版本为
- en: '{Environment.OSVersion}'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '{Environment.OSVersion}'
- en: ."
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 。"
- en: );
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: if
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (OperatingSystem.IsMacOS())
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: (OperatingSystem.IsMacOS())
- en: '{'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("I am macOS."
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("我是 macOS。"
- en: );
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: if
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: '(OperatingSystem.IsWindowsVersionAtLeast(major: 10'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '(OperatingSystem.IsWindowsVersionAtLeast(major: 10'
- en: ))
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: ))
- en: '{'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("I am Windows 10 or 11."
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("我是 Windows 10 或 11。"
- en: );
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("I am some other mysterious OS."
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("我是其他神秘的操作系统。"
- en: );
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine("Press ENTER to stop me."
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("按 ENTER 停止我。"
- en: );
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: ReadLine();
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: ReadLine();
- en: '```'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Open `DotNetEverywhere.csproj` and add the runtime identifiers to target three
    operating systems inside the `<PropertyGroup>` element, as shown highlighted in
    the following markup:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`DotNetEverywhere.csproj`，并在`<PropertyGroup>`元素中添加运行时标识，如下所示：
- en: '```cs'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: '**<RuntimeIdentifiers>**'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**<RuntimeIdentifiers>**'
- en: '**win10-x64;osx-x64;osx**'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '**win10-x64;osx-x64;osx**'
- en: '**.11.0**'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '**.11.0**'
- en: '**-arm64;linux-x64;linux-arm64**'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '**-arm64;linux-x64;linux-arm64**'
- en: '**</RuntimeIdentifiers>**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**</RuntimeIdentifiers>**'
- en: </PropertyGroup>
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: </Project>
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The `win10-x64` RID value means Windows 10 or Windows Server 2016 64-bit. You
    could also use the `win10-arm64` RID value to deploy to a Microsoft Surface Pro
    X.
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`win10-x64` RID 值表示 Windows 10 或 Windows Server 2016 64 位。您还可以使用`win10-arm64`
    RID 值部署到 Microsoft Surface Pro X。'
- en: The `osx-x64` RID value means macOS Sierra 10.12 or later. You can also specify
    version-specific RID values like `osx.10.15-x64` (Catalina), `osx.11.0-x64` (Big
    Sur on Intel), or `osx.11.0-arm64` (Big Sur on Apple Silicon).
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`osx-x64` RID 值表示 macOS Sierra 10.12 或更高版本。您还可以指定特定版本的 RID 值，如`osx.10.15-x64`（Catalina）、`osx.11.0-x64`（Big
    Sur on Intel）或`osx.11.0-arm64`（Big Sur on Apple Silicon）。'
- en: The `linux-x64` RID value means most desktop distributions of Linux like Ubuntu,
    CentOS, Debian, or Fedora. Use `linux-arm` for Raspbian or Raspberry Pi OS 32-bit.
    Use `linux-arm64` for a Raspberry Pi running Ubuntu 64-bit.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`linux-x64` RID 值表示大多数桌面 Linux 发行版，如 Ubuntu、CentOS、Debian 或 Fedora。对于 Raspbian
    或 Raspberry Pi OS 32 位，请使用`linux-arm`。对于运行 Ubuntu 64 位的 Raspberry Pi，请使用`linux-arm64`。'
- en: Understanding dotnet commands
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 dotnet 命令
- en: When you install the .NET SDK, it includes a **command-line interface (CLI)**
    named `dotnet` .
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装.NET SDK时，它包括一个名为`dotnet`的**命令行界面（CLI）**。
- en: Creating new projects
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新项目
- en: 'The .NET CLI has commands that work on the current folder to create a new project
    using templates:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: .NET CLI 有命令可以在当前文件夹上工作，使用模板创建新项目：
- en: On Windows, start **Command Prompt** or **Windows Terminal** . On macOS, start
    **Terminal** . If you are using Visual Studio Code, then you can use the integrated
    terminal.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上，启动**命令提示符**或**Windows 终端**。在 macOS 上，启动**终端**。如果您正在使用 Visual Studio
    Code，则可以使用集成终端。
- en: Enter the `dotnet new --list` or `dotnet new -l` command to list your currently
    installed templates, as shown in *Figure 7.2* :![A picture containing text Description
    automatically generated](img/Image00077.jpg)
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`dotnet new --list`或`dotnet new -l`命令，列出当前安装的模板，如*图 7.2*所示：![包含文本描述的图片](img/Image00077.jpg)
- en: 'Figure 7.2: A list of installed dotnet new project templates'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：已安装的dotnet new项目模板列表
- en: Most `dotnet` command-line switches have a long and a short version. For example,
    `--list` or `-l` . The short ones are quicker to type but more likely to be misinterpreted
    by you or other humans. Sometimes more typing is clearer.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数`dotnet`命令行开关都有长版本和短版本。例如，`--list`或`-l`。短的更快，但更容易被您或其他人误解。有时候更多的输入更清晰。
- en: Getting information about .NET and its environment
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取有关.NET及其环境的信息
- en: 'It is useful to see what .NET SDKs and runtimes are currently installed, alongside
    information about the operating system, as shown in the following command:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 查看当前安装的.NET SDK和运行时，以及操作系统的信息，如下所示的命令非常有用：
- en: '```cs'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet --info
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet --info
- en: '```'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the results, as shown in the following partial output:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意结果，如下所示的部分输出：
- en: '```cs'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '.NET SDK (reflecting any global.json):'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK（反映任何 global.json）：
- en: 'Version:   6.0.100'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：   6.0.100
- en: 'Commit:    22d70b47bc'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 'Commit:    22d70b47bc'
- en: 'Runtime Environment:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时环境：
- en: 'OS Name:     Windows'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统名称：Windows
- en: 'OS Version:  10.0.19043'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统版本：10.0.19043
- en: 'OS Platform: Windows'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统平台：Windows
- en: 'RID:         win10-x64'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'RID:         win10-x64'
- en: 'Base Path:   C:\Program Files\dotnet\sdk\6.0.100\'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 基本路径：C:\Program Files\dotnet\sdk\6.0.100\
- en: 'Host (useful for support):'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 主机（用于支持）：
- en: 'Version: 6.0.0'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：6.0.0
- en: 'Commit:  91ba01788d'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'Commit:  91ba01788d'
- en: '.NET SDKs installed:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装的.NET SDK：
- en: 3.1.412 [C:\Program Files\dotnet\sdk]
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 3.1.412 [C:\Program Files\dotnet\sdk]
- en: 5.0.400 [C:\Program Files\dotnet\sdk]
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 5.0.400 [C:\Program Files\dotnet\sdk]
- en: 6.0.100 [C:\Program Files\dotnet\sdk]
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 6.0.100 [C:\Program Files\dotnet\sdk]
- en: '.NET runtimes installed:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装.NET运行时：
- en: Microsoft.AspNetCore.All 2.1.29 [...\dotnet\shared\Microsoft.AspNetCore.All]
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.AspNetCore.All 2.1.29 [...\dotnet\shared\Microsoft.AspNetCore.All]
- en: '...'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Managing projects
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理项目
- en: 'The .NET CLI has the following commands that work on the project in the current
    folder, to manage the project:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: .NET CLI具有以下命令，可在当前文件夹中管理项目：
- en: '`dotnet restore` : This downloads dependencies for the project.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet restore`：这将为项目下载依赖项。'
- en: '`dotnet build` : This builds, aka compiles, the project.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet build`：这将构建，也就是编译，项目。'
- en: '`dotnet test` : This builds and then runs unit tests for the project.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet test`：这将为项目构建然后运行单元测试。'
- en: '`dotnet run` : This builds and then runs the project.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet run`：这将构建然后运行项目。'
- en: '`dotnet pack` : This creates a NuGet package for the project.'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet pack`：为项目创建一个NuGet包。'
- en: '`dotnet publish` : This builds and then publishes the project, either with
    dependencies or as a self-contained application.'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet publish`：这将构建然后发布项目，可以是带有依赖项的，也可以是独立的应用程序。'
- en: '`dotnet add` : This adds a reference to a package or class library to the project.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet add`：向项目添加对包或类库的引用。'
- en: '`dotnet remove` : This removes a reference to a package or class library from
    the project.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet remove`：这将从项目中删除对包或类库的引用。'
- en: '`dotnet list` : This lists the package or class library references for the
    project.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet list`：列出项目的包或类库引用。'
- en: Publishing a self-contained app
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布一个独立的应用程序
- en: 'Now that you have seen some example `dotnet` tool commands, we can publish
    our cross-platform console app:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了一些示例`dotnet`工具命令，我们可以发布我们的跨平台控制台应用程序：
- en: At the command line, make sure that you are in the `DotNetEverywhere` folder.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，确保您在`DotNetEverywhere`文件夹中。
- en: 'Enter a command to build and publish the release version of the console application
    for Windows 10, as shown in the following command:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个命令来构建和发布Windows 10的控制台应用程序的发布版本，如下命令所示：
- en: '```cs'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet publish -c Release -r win10-x64
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish -c Release -r win10-x64
- en: '```'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the build engine restores any needed packages, compiles the project source
    code into an assembly DLL, and creates a `publish` folder, as shown in the following
    output:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，构建引擎会还原所需的包，将项目源代码编译成程序集DLL，并创建一个`publish`文件夹，如下输出所示：
- en: '```cs'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Microsoft (R) Build Engine version 17.0.0+073022eb4 for .NET
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft（R）构建引擎版本17.0.0+073022eb4 for .NET
- en: Copyright (C) Microsoft Corporation. All rights reserved.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有（C）Microsoft Corporation。保留所有权利。
- en: Determining projects to restore...
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 确定要还原的项目...
- en: Restored C:\Code\Chapter07\DotNetEverywhere\DotNetEverywhere.csproj (in 46.89
    sec).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 已恢复 C:\Code\Chapter07\DotNetEverywhere\DotNetEverywhere.csproj（46.89秒）。
- en: DotNetEverywhere -> C:\Code\Chapter07\DotNetEverywhere\bin\Release\net6.0\win10-x64\DotNetEverywhere.dll
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: DotNetEverywhere -> C:\Code\Chapter07\DotNetEverywhere\bin\Release\net6.0\win10-x64\DotNetEverywhere.dll
- en: DotNetEverywhere -> C:\Code\Chapter07\DotNetEverywhere\bin\Release\net6.0\win10-x64\publish\
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: DotNetEverywhere -> C:\Code\Chapter07\DotNetEverywhere\bin\Release\net6.0\win10-x64\publish\
- en: '```'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Enter the commands to build and publish the release versions for macOS and
    Linux variants, as shown in the following commands:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入命令以构建和发布macOS和Linux变体的发布版本，如下命令所示：
- en: '```cs'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet publish -c Release -r osx-x64
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish -c Release -r osx-x64
- en: dotnet publish -c Release -r osx.11.0-arm64
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish -c Release -r osx.11.0-arm64
- en: dotnet publish -c Release -r linux-x64
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish -c Release -r linux-x64
- en: dotnet publish -c Release -r linux-arm64
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish -c Release -r linux-arm64
- en: '```'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : You could automate these commands by using a scripting
    language like PowerShell and execute it on any operating system using the cross-platform
    PowerShell Core. Just create a file with the extension `.ps1` with the five commands
    on it. Then execute the file. Learn more about PowerShell at the following link:
    [https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell](https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：您可以使用脚本语言（如PowerShell）自动化这些命令，并在任何操作系统上使用跨平台PowerShell Core执行它。只需创建一个扩展名为`.ps1`的文件，其中包含这五个命令。然后执行该文件。在以下链接了解有关PowerShell的更多信息：[https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell](https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell)'
- en: Open a macOS **Finder** window or Windows **File Explorer** , navigate to `DotNetEverywhere\bin\Release\net6.0`
    , and note the output folders for the various operating systems.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开macOS **Finder**窗口或Windows **文件资源管理器**，导航到`DotNetEverywhere\bin\Release\net6.0`，并注意各种操作系统的输出文件夹。
- en: In the `win10-x64` folder, select the `publish` folder, note all the supporting
    assemblies like `Microsoft.CSharp.dll` .
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`win10-x64`文件夹中，选择`publish`文件夹，注意所有支持的程序集，如`Microsoft.CSharp.dll`。
- en: Select the `DotNetEverywhere` executable file, and note it is 161 KB, as shown
    in *Figure 7.3* :![Graphical user interface Description automatically generated](img/Image00078.jpg)
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`DotNetEverywhere`可执行文件，并注意它的大小为161 KB，如*图7.3*所示：![自动生成的图形用户界面描述](img/Image00078.jpg)
- en: 'Figure 7.3: The DotNetEverywhere executable file for Windows 10 64-bit'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：Windows 10 64位的DotNetEverywhere可执行文件
- en: 'If you are on Windows, then double-click to execute the program and note the
    result, as shown in the following output:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在Windows上，则双击执行该程序，并注意结果，如下输出所示：
- en: '```cs'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: I can run everywhere!
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在任何地方运行！
- en: OS Version is Microsoft Windows NT 10.0.19042.0.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统版本为Microsoft Windows NT 10.0.19042.0。
- en: I am Windows 10.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 我是Windows 10。
- en: Press ENTER to stop me.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 按ENTER键停止我。
- en: '```'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note that the total size of the `publish` folder and all its files is 64.8 MB.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意`publish`文件夹及其所有文件的总大小为64.8 MB。
- en: In the `osx.11.0-arm64` folder, select the `publish` folder, note all the supporting
    assemblies, and then select the `DotNetEverywhere` executable file, and note the
    executable is 126 KB, and the `publish` folder is 71.8 MB.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`osx.11.0-arm64`文件夹中，选择`publish`文件夹，注意所有支持的程序集，然后选择`DotNetEverywhere`可执行文件，并注意可执行文件为126
    KB，`publish`文件夹为71.8 MB。
- en: 'If you copy any of those `publish` folders to the appropriate operating system,
    the console application will run; this is because it is a self-contained deployable
    .NET application. For example, on macOS with Intel, as shown in the following
    output:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将这些`publish`文件夹中的任何一个复制到适当的操作系统上，控制台应用程序将运行；这是因为它是一个自包含的可部署.NET应用程序。例如，在具有英特尔处理器的macOS上，如下输出所示：
- en: '```cs'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: I can run everywhere!
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在任何地方运行！
- en: OS Version is Unix 11.2.3
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统版本是Unix 11.2.3
- en: I am macOS.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 我是macOS。
- en: Press ENTER to stop me.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 按ENTER键停止我。
- en: '```'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This example used a console app, but you could just as easily create an ASP.NET
    Core website or web service, or a Windows Forms or WPF app. Of course, you can
    only deploy Windows desktop apps to Windows computers, not Linux or macOS.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用了一个控制台应用程序，但您也可以很容易地创建一个ASP.NET Core网站或Web服务，或者一个Windows Forms或WPF应用程序。当然，您只能将Windows桌面应用程序部署到Windows计算机上，而不能部署到Linux或macOS。
- en: Publishing a single-file app
  id: totrans-476
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布单文件应用程序
- en: To publish as a "single" file, you can specify flags when publishing. With .NET
    5, single-file apps were primarily focused on Linux because there are limitations
    in both Windows and macOS that mean true single-file publishing is not technically
    possible. With .NET 6, you can now create proper single-file apps on Windows.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布为“单一”文件，您可以在发布时指定标志。在.NET 5中，单文件应用程序主要集中在Linux上，因为在Windows和macOS上都存在限制，这意味着真正的单文件发布在技术上不可能。在.NET
    6中，您现在可以在Windows上创建真正的单文件应用程序。
- en: 'If you can assume that .NET 6 is already installed on the computer on which
    you want to run your app, then you can use the extra flags when you publish your
    app for release to say that it does not need to be self-contained and that you
    want to publish it as a single file (if possible), as shown in the following command
    (that must be entered on a single line):'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以假设.NET 6已经安装在您要运行应用程序的计算机上，那么您可以在发布应用程序时使用额外的标志，以表示它不需要是自包含的，并且您希望将其发布为单个文件（如果可能的话），如下面的命令所示（必须在一行上输入）：
- en: '```cs'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet publish -r win10-x64 -c Release --self-contained=false
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish -r win10-x64 -c Release --self-contained=false
- en: /p:PublishSingleFile=true
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: /p:PublishSingleFile=true
- en: '```'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This will generate two files: `DotNetEverywhere.exe` and `DotNetEverywhere.pdb`
    . The `.exe` is the executable. The `.pdb` file is a **program debug database**
    file that stores debugging information.'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成两个文件：`DotNetEverywhere.exe`和`DotNetEverywhere.pdb`。`.exe`是可执行文件。`.pdb`文件是一个**程序调试数据库**文件，用于存储调试信息。
- en: There is no `.exe` file extension for published applications on macOS, so if
    you use `osx-x64` in the command above, the filename will not have an extension.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，发布的应用程序没有`.exe`文件扩展名，因此，如果您在上面的命令中使用`osx-x64`，文件名将没有扩展名。
- en: 'If you prefer the `.pdb` file to be embedded in the `.exe` file, then add a
    `<DebugType>` element to the `<PropertyGroup>` element in your `.csproj` file
    and set it to `embedded` , as shown highlighted in the following markup:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望将`.pdb`文件嵌入`.exe`文件中，那么请在`.csproj`文件的`<PropertyGroup>`元素中添加一个`<DebugType>`元素，并将其设置为`embedded`，如下标记所示：
- en: '```cs'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PropertyGroup>
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: <RuntimeIdentifiers>
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: <RuntimeIdentifiers>
- en: win10-x64;osx-x64;osx.11.0
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: win10-x64;osx-x64;osx.11.0
- en: -arm64;linux-x64;linux-arm64
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: -arm64;linux-x64;linux-arm64
- en: </RuntimeIdentifiers>
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: </RuntimeIdentifiers>
- en: '**<DebugType>embedded</DebugType>**'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '**<DebugType>embedded</DebugType>**'
- en: </PropertyGroup>
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: '```'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If you cannot assume that .NET 6 is already installed on a computer, then although
    Linux also only generates the two files, expect the following additional files
    for Windows: `coreclr.dll` , `clrjit.dll` , `clrcompression.dll` , and `mscordaccore.dll`
    .'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不能假设.NET 6已经安装在计算机上，那么尽管Linux也只生成两个文件，但是对于Windows，还会有以下额外的文件：`coreclr.dll`，`clrjit.dll`，`clrcompression.dll`和`mscordaccore.dll`。
- en: 'Let''s see an example for Windows:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个Windows的例子：
- en: 'At the command line, enter the command to build the release version of the
    console application for Windows 10, as shown in the following command:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，输入命令以构建Windows 10的控制台应用程序的发布版本，如下命令所示：
- en: '```cs'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet publish -c Release -r win10-x64 /p:PublishSingleFile=true
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish -c Release -r win10-x64 /p:PublishSingleFile=true```
- en: '```'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Navigate to the `DotNetEverywhere\bin\Release\net6.0\win10-x64\publish` folder,
    select the `DotNetEverywhere` executable file, and note the executable is now
    58.3 MB, and there is also a `.pdb` file that is 10 KB. The sizes on your system
    will vary.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`DotNetEverywhere\bin\Release\net6.0\win10-x64\publish`文件夹，选择`DotNetEverywhere`可执行文件，并注意可执行文件现在为58.3
    MB，还有一个大小为10 KB的`.pdb`文件。您的系统上的大小会有所不同。
- en: Reducing the size of apps using app trimming
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用应用程序修剪减小应用程序的大小
- en: One of the problems with deploying a .NET app as a self-contained app is that
    the .NET libraries take up a lot of space. One of the biggest needs for reduced
    size is Blazor WebAssembly components because all the .NET libraries need to be
    downloaded to the browser.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 将.NET应用程序部署为独立应用程序的问题之一是.NET库占用了大量空间。减小尺寸的最大需求之一是Blazor WebAssembly组件，因为所有.NET库都需要下载到浏览器中。
- en: Luckily, you can reduce this size by not packaging unused assemblies with your
    deployments. Introduced with .NET Core 3.0, the app trimming system can identify
    the assemblies needed by your code and remove those that are not needed.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，您可以通过不将未使用的程序集与部署一起打包来减小这个大小。从.NET Core 3.0开始，应用程序修剪系统可以识别代码所需的程序集，并删除不需要的程序集。
- en: With .NET 5, the trimming went further by removing individual types, and even
    members like methods from within an assembly if they are not used. For example,
    with a Hello World console app, the `System.Console.dll` assembly is trimmed from
    61.5 KB to 31.5 KB. For .NET 5, this is an experimental feature so it is disabled
    by default.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 5中，修剪进一步去除了单个类型，甚至是程序集中的方法等成员，如果它们没有被使用。例如，对于一个Hello World控制台应用程序，`System.Console.dll`程序集从61.5
    KB减小到31.5 KB。对于.NET 5，这是一个实验性功能，因此默认情况下是禁用的。
- en: With .NET 6, Microsoft added annotations to their libraries to indicate how
    they can be safely trimmed so the trimming of types and members was made the default.
    This is known as **link trim mode** .
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 6中，微软为其库添加了注释，指示它们如何安全地修剪，因此类型和成员的修剪成为默认设置。这被称为**链接修剪模式**。
- en: The catch is how well the trimming identifies unused assemblies, types, and
    members. If your code is dynamic, perhaps using reflection, then it might not
    work correctly, so Microsoft also allows manual control.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是修剪如何识别未使用的程序集、类型和成员。如果您的代码是动态的，可能使用反射，那么它可能无法正常工作，因此微软还允许手动控制。
- en: Enabling assembly-level trimming
  id: totrans-513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用程序集级修剪
- en: There are two ways to enable assembly-level trimming.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种启用程序集级修剪的方法。
- en: 'The first way is to add an element in the project file, as shown in the following
    markup:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是在项目文件中添加一个元素，如下标记所示：
- en: '```cs'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PublishTrimmed>true
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: <PublishTrimmed>true
- en: </PublishTrimmed>
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: </PublishTrimmed>
- en: '```'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The second way is to add a flag when publishing, as shown highlighted in the
    following command:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是在发布时添加一个标志，如下命令中突出显示的那样：
- en: '```cs'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet publish ...
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish ...
- en: '**-p:PublishTrimmed=True**'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '**-p:PublishTrimmed=True**'
- en: '```'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Enabling type-level and member-level trimming
  id: totrans-525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用类型级和成员级修剪
- en: There are two ways to enable type-level and member-level trimming.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种启用类型级和成员级修剪的方法。
- en: 'The first way is to add two elements in the project file, as shown in the following
    markup:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是在项目文件中添加两个元素，如下标记所示：
- en: '```cs'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PublishTrimmed>true
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: <PublishTrimmed>true
- en: </PublishTrimmed>
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: </PublishTrimmed>
- en: <TrimMode>Link</TrimMode>
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: <TrimMode>Link</TrimMode>
- en: '```'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The second way is to add two flags when publishing, as shown highlighted in
    the following command:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是在发布时添加两个标志，如下命令中突出显示的那样：
- en: '```cs'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet publish ...
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet publish ...
- en: '**-p:PublishTrimmed=True -p:TrimMode=Link**'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '**-p:PublishTrimmed=True -p:TrimMode=Link**'
- en: '```'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: For .NET 6, link trim mode is the default, so you only need to specify the switch
    if you want to set an alternative trim mode like `copyused` , which means assembly-level
    trimming.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET 6，链接修剪模式是默认的，因此您只需要指定开关，如果要设置替代修剪模式，如`copyused`，这意味着程序集级修剪。
- en: Decompiling .NET assemblies
  id: totrans-539
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反编译.NET程序集
- en: One of the best ways to learn how to code for .NET is to see how professionals
    do it.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何为.NET编写代码的最佳方法之一是看专业人士是如何做的。
- en: '**Good Practice** : You could decompile someone else''s assemblies for non-learning
    purposes like copying their code for use in your own production library or application,
    but remember that you are viewing their intellectual property, so please respect
    that.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的做法**：您可以为非学习目的反编译他人的程序集，例如复制他们的代码以在自己的生产库或应用程序中使用，但请记住您正在查看他们的知识产权，所以请尊重。'
- en: Decompiling using the ILSpy extension for Visual Studio 2022
  id: totrans-542
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022的ILSpy扩展进行反编译
- en: For learning purposes, you can decompile any .NET assembly with a tool like
    ILSpy.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 出于学习目的，您可以使用ILSpy等工具反编译任何.NET程序集。
- en: In Visual Studio 2022 for Windows, navigate to **Extensions** | **Manage Extensions**
    .
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows的Visual Studio 2022中，导航到**扩展** | **管理扩展**。
- en: In the search box, enter `ilspy` .
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`ilspy`。
- en: For the **ILSpy** extension, click **Download** .
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**ILSpy**扩展，点击**下载**。
- en: Click **Close** .
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**关闭**。
- en: Close Visual Studio to allow the extension to install.
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Visual Studio以允许扩展安装。
- en: Restart Visual Studio and reopen the `Chapter07` solution.
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Visual Studio并重新打开`Chapter07`解决方案。
- en: In **Solution Explorer** , right-click the **DotNetEverywhere** project and
    select **Open output in ILSpy** .
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击**DotNetEverywhere**项目，然后选择**在ILSpy中打开输出**。
- en: Navigate to **File** | **Open…** .
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** | **打开…**。
- en: 'Navigate to the following folder:'
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到以下文件夹：
- en: '```cs'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Code/Chapter07/DotNetEverywhere/bin/Release/net6.0
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: Code/Chapter07/DotNetEverywhere/bin/Release/net6.0
- en: /linux-x64
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: /linux-x64
- en: '```'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Select the `System.IO.FileSystem.dll` assembly and click **Open** .
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`System.IO.FileSystem.dll`程序集，然后点击**打开**。
- en: In the **Assemblies** tree, expand the **System.IO.FileSystem** assembly, expand
    the **System.IO** namespace, select the **Directory** class, and wait for it to
    decompile.
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**程序集**树中，展开**System.IO.FileSystem**程序集，展开**System.IO**命名空间，选择**Directory**类，等待其反编译。
- en: In the `Directory` class, click the **[+]** to expand the `GetParent` method,
    as shown in *Figure 7.4* :![Graphical user interface, text, application Description
    automatically generated](img/Image00079.jpg)
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Directory`类中，点击**[+]**展开`GetParent`方法，如*图7.4*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00079.jpg)
- en: 'Figure 7.4: Decompiled GetParent method of Directory class on Windows'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：在Windows上反编译的Directory类的GetParent方法
- en: Note the good practice of checking the `path` parameter and throwing an `ArgumentNullException`
    if it is `null` or an `ArgumentException` if it is zero length.
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意检查`path`参数并在其为`null`时抛出`ArgumentNullException`，在其长度为零时抛出`ArgumentException`的良好做法。
- en: Close ILSpy.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭ILSpy。
- en: Decompiling using the ILSpy extension for Visual Studio Code
  id: totrans-563
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code的ILSpy扩展进行反编译
- en: A similar capability is available cross-platform as an extension for Visual
    Studio Code.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的功能作为Visual Studio Code的扩展跨平台可用。
- en: If you have not already installed the **ILSpy .NET Decompiler** extension for
    Visual Studio Code, then search for it and install it now.
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有为Visual Studio Code安装**ILSpy .NET反编译器**扩展，请立即搜索并安装。
- en: 'On macOS or Linux the extension has a dependency on Mono so you will also need
    to install Mono from the following link: [https://www.mono-project.com/download/stable/](https://www.mono-project.com/download/stable/)
    .'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在macOS或Linux上，该扩展依赖于Mono，因此您还需要从以下链接安装Mono：[https://www.mono-project.com/download/stable/](https://www.mono-project.com/download/stable/)。
- en: In Visual Studio Code, navigate to **View** | **Command Palette…** .
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，导航到**视图** | **命令面板…**。
- en: 'Type `ilspy` and then select **ILSpy: Decompile IL Assembly (pick file)** .'
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`ilspy`，然后选择**ILSpy:反编译IL程序集（选择文件）**。
- en: 'Navigate to the following folder:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到以下文件夹：
- en: '```cs'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Code/Chapter07/DotNetEverywhere/bin/Release/net6.0
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: Code/Chapter07/DotNetEverywhere/bin/Release/net6.0
- en: /linux-x64
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: /linux-x64
- en: '```'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Select the `System.IO.FileSystem.dll` assembly and click **Select assembly**
    . Nothing will appear to happen, but you can confirm that ILSpy is working by
    viewing the **Output** window, selecting **ilspy-vscode** in the dropdown list,
    and seeing the processing, as shown in *Figure 7.5* :![Graphical user interface,
    text, application, email Description automatically generated](img/Image00080.jpg)
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`System.IO.FileSystem.dll`程序集，点击**选择程序集**。看起来没有任何反应，但可以通过查看**输出**窗口来确认ILSpy正在工作，选择下拉列表中的**ilspy-vscode**，并查看处理过程，如*图7.5*所示：![图形用户界面，文本，应用程序，电子邮件描述自动生成](img/Image00080.jpg)
- en: 'Figure 7.5: ILSpy extension output when selecting an assembly to decompile'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：选择要反编译的程序集时的ILSpy扩展输出
- en: In **EXPLORER** , expand **ILSPY DECOMPILED MEMBERS** , select the assembly,
    close the **Output** window, and note the two edit windows that open showing assembly
    attributes using C# code and external DLL and assembly references using IL code,
    as shown in *Figure 7.6* :![Graphical user interface, text, application Description
    automatically generated](img/Image00081.jpg)
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**资源管理器**中，展开**ILSPY反编译成员**，选择程序集，关闭**输出**窗口，注意打开的两个编辑窗口，显示使用C#代码的程序集属性和使用IL代码的外部DLL和程序集引用，如*图7.6*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00081.jpg)
- en: 'Figure 7.6: Expanding ILSPY DECOMPILED MEMBERS'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：扩展ILSPY反编译成员
- en: 'In the IL code on the right side, note the reference to the `System.Runtime`
    assembly, including the version number, as shown in the following code:'
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧的IL代码中，注意到对`System.Runtime`程序集的引用，包括版本号，如下所示：
- en: '```cs'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: .module extern
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: .module extern
- en: libSystem.Native
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: libSystem.Native
- en: .assembly extern
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: .assembly extern
- en: System.Runtime
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: System.Runtime
- en: '{'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: .publickeytoken = (
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: .publickeytoken = (
- en: b0 3f
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: b0 3f
- en: 5f
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 5f
- en: 7f
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 7f
- en: '11'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: d5 0
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: d5 0
- en: a 3
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: a 3
- en: a
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: a
- en: )
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .ver 6
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: .ver 6
- en: :0
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: :0
- en: :0
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: :0
- en: :0
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: :0
- en: '}'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`.module extern libSystem.Native` means this assembly makes function calls
    to Linux system APIs as you would expect from code that interacts with the filesystem.
    If we had decompiled the Windows equivalent of this assembly, it would use `.module
    extern kernel32.dll` instead, which is a Win32 API.'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '`.module extern libSystem.Native`表示该程序集调用Linux系统API，这与与文件系统交互的代码所期望的一样。如果我们反编译了该程序集的Windows等效版本，它将使用`.module
    extern kernel32.dll`，这是Win32 API。'
- en: In **EXPLORER** , in **ILSPY DECOMPILED MEMBERS** , expand the assembly, expand
    the **System.IO** namespace, select **Directory** , and note the two edit windows
    that open showing the decompiled `Directory` class using C# code on the left and
    IL code on the right, as shown in *Figure 7.7* :![](img/Image00082.jpg)
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**资源管理器**中，在**ILSPY反编译成员**中，展开程序集，展开**System.IO**命名空间，选择**Directory**，注意打开的两个编辑窗口，左边显示用C#代码反编译的`Directory`类，右边显示IL代码，如*图7.7*所示：![](img/Image00082.jpg)
- en: 'Figure 7.7: The decompiled Directory class in C# and IL code'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7：C#和IL代码中的反编译Directory类
- en: 'Compare the C# source code for the `GetParent` method, shown in the following
    code:'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较`GetParent`方法的C#源代码，如下所示：
- en: '```cs'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: DirectoryInfo? GetParent(string
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: DirectoryInfo? GetParent(string
- en: path)
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: path)
- en: '{'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (path == null
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: (path == null
- en: )
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: throw
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: throw
- en: new
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: ArgumentNullException("path"
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: ArgumentNullException("path"
- en: );
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (path.Length == 0
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: (path.Length == 0
- en: )
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: throw
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: throw
- en: new
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: ArgumentException(SR.Argument_PathEmpty, "path"
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: ArgumentException(SR.Argument_PathEmpty, "path"
- en: );
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: string
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: fullPath = Path.GetFullPath(path);
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: fullPath = Path.GetFullPath(path);
- en: string
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: directoryName = Path.GetDirectoryName(fullPath);
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: directoryName = Path.GetDirectoryName(fullPath);
- en: if
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (directoryName == null
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: (directoryName == null
- en: )
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'null'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: ;
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: new
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: DirectoryInfo(directoryName);
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: DirectoryInfo(directoryName);
- en: '}'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'With the equivalent IL source code of the `GetParent` method, as shown in the
    following code:'
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有`GetParent`方法的等效IL源代码，如下所示：
- en: '```cs'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: .method /* 06000067 */
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: .method /* 06000067 */
- en: public
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: hidebysig static
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: hidebysig static
- en: class
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: System.IO.DirectoryInfo
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.DirectoryInfo
- en: GetParent
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: GetParent
- en: (
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: path
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: path
- en: ) cil
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: ) cil
- en: managed
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: managed
- en: '{'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: .param [0
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: .param [0
- en: ']'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: .custom instance void
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: .custom instance void
- en: System.Runtime.CompilerServices
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: System.Runtime.CompilerServices
- en: .NullableAttribute::.ctor(uint8) = (
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: .NullableAttribute::.ctor(uint8) = (
- en: '01'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '01'
- en: '00'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '00'
- en: '02'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '02'
- en: '00'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '00'
- en: '00'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '00'
- en: )
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: // Method begins at RVA 0x62d4
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: // 方法开始于RVA 0x62d4
- en: // Code size 64 (0x40)
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: // 代码大小64（0x40）
- en: .maxstack 2
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: .maxstack 2
- en: .locals /* 1100000E */
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: .locals /* 1100000E */
- en: (
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '[0'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '[0'
- en: '] string'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '] string'
- en: ','
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '[1'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[1'
- en: '] string'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '] string'
- en: )
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'IL_0000: ldarg.0'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0000: ldarg.0'
- en: 'IL_0001: brtrue.s IL_000e'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0001: brtrue.s IL_000e'
- en: 'IL_0003: ldstr "path"'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0003: ldstr "path"'
- en: /* 700005CB */
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: /* 700005CB */
- en: 'IL_0008: newobj instance void'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0008: newobj instance void'
- en: '[System.Runtime]'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[System.Runtime]'
- en: System.ArgumentNullException::.ctor(string
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: System.ArgumentNullException::.ctor(string
- en: ) /* 0A000035 */
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: ) /* 0A000035 */
- en: 'IL_000d: throw'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_000d: throw'
- en: 'IL_000e: ldarg.0'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_000e: ldarg.0'
- en: 'IL_000f: callvirt instance int32 [System.Runtime]'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_000f: callvirt instance int32 [System.Runtime]'
- en: System.String::get_Length() /* 0A000022 */
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: System.String::get_Length() /* 0A000022 */
- en: 'IL_0014: brtrue.s IL_0026'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0014: brtrue.s IL_0026'
- en: 'IL_0016: call string'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0016: call string'
- en: System.SR::get_Argument_PathEmpty() /* 0600004C */
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: System.SR::get_Argument_PathEmpty() /* 0600004C */
- en: 'IL_001b: ldstr "path"'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_001b: ldstr "path"'
- en: /* 700005CB */
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: /* 700005CB */
- en: 'IL_0020: newobj instance void'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0020: newobj instance void'
- en: '[System.Runtime]'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '[System.Runtime]'
- en: System.ArgumentException::.ctor(string
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: System.ArgumentException::.ctor(string
- en: ', string'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: ', string'
- en: ) /* 0A000036 */
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: ) /* 0A000036 */
- en: 'IL_0025: throw'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0025: throw'
- en: 'IL_0026: ldarg.0'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0026: ldarg.0'
- en: 'IL_0027: call string'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0027: call string'
- en: '[System.Runtime.Extensions]'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[System.Runtime.Extensions]'
- en: System.IO.Path::GetFullPath(string
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.Path::GetFullPath(string
- en: ) /* 0A000037 */
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: ) /* 0A000037 */
- en: 'IL_002c: stloc.0'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_002c: stloc.0'
- en: 'IL_002d: ldloc.0'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_002d: ldloc.0'
- en: 'IL_002e: call string'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_002e: call string'
- en: '[System.Runtime.Extensions]'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '[System.Runtime.Extensions]'
- en: System.IO.Path::GetDirectoryName(string
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.Path::GetDirectoryName(string
- en: ) /* 0A000038 */
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: ) /* 0A000038 */
- en: 'IL_0033: stloc.1'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0033: stloc.1'
- en: 'IL_0034: ldloc.1'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0034: ldloc.1'
- en: 'IL_0035: brtrue.s IL_0039 IL_0037: ldnull'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0035: brtrue.s IL_0039 IL_0037: ldnull'
- en: 'IL_0038: ret IL_0039: ldloc.1'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_0038: ret IL_0039: ldloc.1'
- en: 'IL_003a: newobj instance void'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_003a: newobj instance void'
- en: System.IO.DirectoryInfo::.ctor(string
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.DirectoryInfo::.ctor(string
- en: ) /* 06000097 */
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: ) /* 06000097 */
- en: 'IL_003f: ret'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 'IL_003f: ret'
- en: '} // end of method Directory::GetParent'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '} // end of method Directory::GetParent'
- en: '```'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : The IL code edit windows are not especially useful unless
    you get very advanced with C# and .NET development when knowing how the C# compiler
    translates your source code into IL code can be important. The much more useful
    edit windows contain the equivalent C# source code written by Microsoft experts.
    You can learn a lot of good practices from seeing how professionals implement
    types. For example, the `GetParent` method shows how to check arguments for `null`
    and other argument exceptions.'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：IL 代码编辑窗口在你非常精通C#和.NET开发时才会有用，因为了解C#编译器如何将你的源代码转换为IL代码可能很重要。更有用的编辑窗口包含了由微软专家编写的等效C#源代码。你可以从专业人士如何实现类型中学到很多良好的实践。例如，`GetParent`
    方法展示了如何检查参数是否为 `null` 和其他参数异常。'
- en: Close the edit windows without saving changes.
  id: totrans-726
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭不保存更改的编辑窗口。
- en: In **EXPLORER** , in **ILSPY DECOMPILED MEMBERS** , right-click the assembly
    and choose **Unload Assembly** .
  id: totrans-727
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **EXPLORER** 中的 **ILSPY DECOMPILED MEMBERS** 中，右键单击程序集，然后选择 **Unload Assembly**
    。
- en: No, you cannot technically prevent decompilation
  id: totrans-728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不，从技术上讲，你无法阻止反编译
- en: I sometimes get asked if there is a way to protect compiled code to prevent
    decompilation. The quick answer is no, and if you think about it, you'll see why
    this has to be the case. You can make it harder using obfuscation tools like **Dotfuscator**
    , but ultimately you cannot completely prevent it.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候有人问我是否有办法保护编译后的代码以防止反编译。简短的答案是否定的，如果你仔细想想，你就会明白为什么必须这样。你可以使用诸如 **Dotfuscator**
    这样的混淆工具来增加难度，但最终你无法完全阻止它。
- en: All compiled applications contain instructions to the platform, operating system,
    and hardware on which it runs. Those instructions have to be functionally the
    same as the original source code but are just harder for a human to read. Those
    instructions must be readable to execute your code; they therefore must be readable
    to be decompiled. If you protect your code from decompilation using some custom
    technique, then you would also prevent your code from running!
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 所有编译后的应用程序都包含对平台、操作系统和硬件的指令。这些指令必须在功能上与原始源代码相同，但对人类来说更难阅读。这些指令必须是可读的才能执行你的代码；因此它们也必须是可读的才能被反编译。如果你使用某种自定义技术保护你的代码免受反编译，那么你也会阻止你的代码运行！
- en: Virtual machines simulate hardware and so can capture all interaction between
    your running application and the software and hardware that it thinks it is running
    on.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机模拟硬件，因此可以捕获你的运行应用程序与它认为正在运行的软件和硬件之间的所有交互。
- en: If you could protect your code, then you would also prevent attaching to it
    with a debugger and stepping through it. If the compiled application has a `pdb`
    file, then you can attach a debugger and step through the statements line-by-line.
    Even without the `pdb` file, you can still attach a debugger and get some idea
    of how the code works.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能保护你的代码，那么你也会阻止用调试器附加到它并逐步执行它。如果编译后的应用程序有一个 `pdb` 文件，那么你可以附加调试器并逐行执行语句。即使没有
    `pdb` 文件，你仍然可以附加调试器并大致了解代码的工作原理。
- en: 'This is true for all programming languages. Not just .NET languages like C#,
    Visual Basic, and F#, but also C, C++, Delphi, assembly language: all can be attached
    to for debugging or to be disassembled or decompiled. Some tools used by professionals
    are shown in the following table:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 这对所有编程语言都是适用的。不仅仅是.NET语言，如C#、Visual Basic和F#，还有C、C++、Delphi、汇编语言：所有这些都可以用于调试或者被反汇编或反编译。一些专业人员使用的工具如下表所示：
- en: '| Type | Product | Description |'
  id: totrans-734
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 产品 | 描述 |'
- en: '| Virtual Machine | VMware | Professionals like malware analysts always run
    software inside a VM. |'
  id: totrans-735
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟机 | VMware | 专业的恶意软件分析师总是在虚拟机中运行软件。 |'
- en: '| Debugger | SoftICE | Runs underneath the operating system usually in a VM.
    |'
  id: totrans-736
  prefs: []
  type: TYPE_TB
  zh: '| 调试器 | SoftICE | 通常在虚拟机中运行在操作系统下方。 |'
- en: '| Debugger | WinDbg | Useful for understanding Windows internals because it
    knows more about Windows data structures than other debuggers. |'
  id: totrans-737
  prefs: []
  type: TYPE_TB
  zh: '| 调试器 | WinDbg | 用于理解Windows内部的工具，因为它对Windows数据结构的了解比其他调试器更多。 |'
- en: '| Disassembler | IDA Pro | Used by professional malware analysts. |'
  id: totrans-738
  prefs: []
  type: TYPE_TB
  zh: '| 反汇编器 | IDA Pro | 由专业恶意软件分析师使用。 |'
- en: '| Decompiler | HexRays | Decompiles C apps. Plugin for IDA Pro. |'
  id: totrans-739
  prefs: []
  type: TYPE_TB
  zh: '| 反编译器 | HexRays | 反编译 C 应用程序。IDA Pro 的插件。 |'
- en: '| Decompiler | DeDe | Decompiles Delphi apps. |'
  id: totrans-740
  prefs: []
  type: TYPE_TB
  zh: '| 反编译器 | DeDe | 反编译 Delphi 应用程序。 |'
- en: '| Decompiler | dotPeek | .NET decompiler from JetBrains. |'
  id: totrans-741
  prefs: []
  type: TYPE_TB
  zh: '| 反编译器 | dotPeek | 来自JetBrains的.NET反编译器。 |'
- en: '**Good Practice** : Debugging, disassembling, and decompiling someone else''s
    software is likely against its license agreement and illegal in many jurisdictions.
    Instead of trying to protect your intellectual property with a technical solution,
    the law is sometimes your only recourse.'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：调试、反汇编和反编译他人的软件可能违反其许可协议，在许多司法管辖区都是非法的。与其试图用技术解决方案保护你的知识产权，法律有时是你唯一的救济。'
- en: Packaging your libraries for NuGet distribution
  id: totrans-743
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为NuGet分发打包你的库
- en: Before we learn how to create and package our own libraries, we will review
    how a project can use an existing package.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何创建和打包我们自己的库之前，我们将回顾项目如何使用现有的包。
- en: Referencing a NuGet package
  id: totrans-745
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用 NuGet 包
- en: 'Let''s say that you want to add a package created by a third-party developer,
    for example, `Newtonsoft.Json` , a popular package for working with the JavaScript
    Object Notation (JSON) serialization format:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要添加一个由第三方开发者创建的包，例如 `Newtonsoft.Json`，这是一个用于处理JavaScript对象表示（JSON）格式的流行包：
- en: In the `AssembliesAndNamespaces` project, add a reference to the `Newtonsoft.Json`
    NuGet package, either using the GUI for Visual Studio 2022 or the `dotnet add
    package` command for Visual Studio Code.
  id: totrans-747
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AssembliesAndNamespaces` 项目中，使用Visual Studio 2022的GUI或Visual Studio Code的
    `dotnet add package` 命令添加对 `Newtonsoft.Json` NuGet 包的引用。
- en: 'Open the `AssembliesAndNamespaces.csproj` file and note that a package reference
    has been added, as shown in the following markup:'
  id: totrans-748
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `AssembliesAndNamespaces.csproj` 文件，并注意已添加了一个包引用，如下标记所示：
- en: '```cs'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference Include="newtonsoft.json"
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="newtonsoft.json"
- en: Version="13.0.1"
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: Version="13.0.1"
- en: />
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you have a more recent version of the `newtonsoft.json` package, then it
    has been updated since this chapter was written.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个更新版本的`newtonsoft.json`软件包，那么自本章编写以来它已经更新。
- en: Fixing dependencies
  id: totrans-757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复依赖项
- en: 'To consistently restore packages and write reliable code, it''s important that
    you **fix dependencies** . Fixing dependencies means you are using the same family
    of packages released for a specific version of .NET, for example, SQLite for .NET
    6.0, as shown highlighted in the following markup:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 为了始终恢复软件包并编写可靠的代码，重要的是**修复依赖项**。修复依赖项意味着您正在使用针对特定版本的.NET发布的相同软件包系列，例如.NET 6.0的SQLite，如下面标记中突出显示的那样：
- en: '```cs'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: </PropertyGroup>
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: <ItemGroup>
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: '**<PackageReference**'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageReference**'
- en: '**Include=**'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '**包括=**'
- en: '**"Microsoft.EntityFrameworkCore.Sqlite"**'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '**"Microsoft.EntityFrameworkCore.Sqlite"**'
- en: '**Version=**'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本=**'
- en: '**"6.0.0"**'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '**"6.0.0"**'
- en: '**/>**'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: </ItemGroup>
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: </Project>
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: To fix dependencies, every package should have a single version with no additional
    qualifiers. Additional qualifiers include betas (`beta1` ), release candidates
    (`rc4` ), and wildcards (`*` ).
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复依赖项，每个软件包都应该有一个单独的版本，没有额外的修饰符。额外的修饰符包括beta（`beta1`），发布候选版（`rc4`）和通配符（`*`）。
- en: Wildcards allow future versions to be automatically referenced and used because
    they always represent the most recent release. But wildcards are therefore dangerous
    because they could result in the use of future incompatible packages that break
    your code.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符允许将来的版本自动引用和使用，因为它们始终代表最新版本。但是通配符因此是危险的，因为它们可能导致使用未来不兼容的软件包，从而破坏您的代码。
- en: 'This can be worth the risk while writing a book where new preview versions
    are released every month and you do not want to keep updating the package references,
    as I did during 2021, and as shown in the following markup:'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 这在编写一本书时可能是值得冒的风险，因为每个月都会发布新的预览版本，您不希望不断更新软件包引用，就像我在2021年所做的那样，如下面的标记所示：
- en: '```cs'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PackageReference
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.Sqlite"
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.Sqlite"
- en: Version="6.0.0-preview.*"
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0-preview.*"
- en: />
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '```'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you use the `dotnet add package` command, or Visual Studio's **Manage NuGet
    Packages** , then it will by default use the latest specific version of a package.
    But if you copy and paste configuration from a blog article or manually add a
    reference yourself, you might include wildcard qualifiers.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`dotnet add package`命令，或者使用Visual Studio的**管理NuGet软件包**，它将默认使用软件包的最新特定版本。但是，如果您从博客文章中复制并粘贴配置，或者手动添加引用，可能会包含通配符修饰符。
- en: 'The following dependencies are examples of NuGet package references that are
    *not* fixed and therefore should be avoided unless you know the implications:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 以下依赖项是NuGet软件包引用的示例，这些软件包引用*不*是固定的，因此应该避免使用，除非您知道其影响：
- en: '```cs'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PackageReference Include="System.Net.Http"
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="System.Net.Http"
- en: Version="4.1.0-*"
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: Version="4.1.0-*"
- en: />
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <PackageReference Include="Newtonsoft.Json"
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="Newtonsoft.Json"
- en: Version="12.0.3-beta1"
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: Version="12.0.3-beta1"
- en: />
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '```'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Microsoft guarantees that if you fixed your dependencies
    to what ships with a specific version of .NET, for example, 6.0.0, those packages
    will all work together. Almost always fix your dependencies.'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：微软保证，如果您将依赖项固定到特定版本的.NET，例如6.0.0，这些软件包将一起工作。几乎总是要修复您的依赖项。'
- en: Packaging a library for NuGet
  id: totrans-797
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为NuGet打包一个库
- en: 'Now, let''s package the `SharedLibrary` project that you created earlier:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打包之前创建的`SharedLibrary`项目：
- en: In the `SharedLibrary` project, rename the `Class1.cs` file to `StringExtensions.cs`
    .
  id: totrans-799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SharedLibrary`项目中，将`Class1.cs`文件重命名为`StringExtensions.cs`。
- en: 'Modify its contents to provide some useful extension methods for validating
    various text values using regular expressions, as shown in the following code:'
  id: totrans-800
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以提供一些有用的扩展方法，用于使用正则表达式验证各种文本值，如下面的代码所示：
- en: '```cs'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Text.RegularExpressions;
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: System.Text.RegularExpressions;
- en: namespace
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: '{'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: static
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: class
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: StringExtensions
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: StringExtensions
- en: '{'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: static
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: bool
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: IsValidXmlTag
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: IsValidXmlTag
- en: (
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: this
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: string
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: input
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 输入
- en: )
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Regex.IsMatch(input,
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: Regex.IsMatch(input,
- en: '@"^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$"'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '@"^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$"'
- en: );
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: static
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: bool
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: IsValidPassword
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: IsValidPassword
- en: (
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: this
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: string
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: input
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 输入
- en: )
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // minimum of eight valid characters
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: // 最少八个有效字符
- en: return
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Regex.IsMatch(input, "^[a-zA-Z0-9_-]{8,}$"
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: Regex.IsMatch(input, "^[a-zA-Z0-9_-]{8,}$"
- en: );
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: static
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: bool
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: IsValidHex
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: IsValidHex
- en: (
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: this
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: string
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: input
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 输入
- en: )
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // three or six valid hex number characters
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: // 三个或六个有效的十六进制数字字符
- en: return
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: Regex.IsMatch(input,
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: Regex.IsMatch(input,
- en: '"^#?([a-fA-F0-9]{3}|[a-fA-F0-9]{6})$"'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '"^#?([a-fA-F0-9]{3}|[a-fA-F0-9]{6})$"'
- en: );
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: You will learn how to write regular expressions in *Chapter 8* , *Working with
    Common .NET Types* .
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何在*第8章*，*使用常见的.NET类型*中编写正则表达式。
- en: 'In `SharedLibrary.csproj` , modify its contents, as shown highlighted in the
    following markup, and note the following:'
  id: totrans-862
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SharedLibrary.csproj`中，修改其内容，如下面标记中突出显示的那样，并注意以下内容：
- en: '`PackageId` must be globally unique, so you must use a different value if you
    want to publish this NuGet package to the [https://www.nuget.org/](https://www.nuget.org/)
    public feed for others to reference and download.'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PackageId`必须是全局唯一的，因此如果要将此NuGet软件包发布到[https://www.nuget.org/](https://www.nuget.org/)公共源以供其他人引用和下载，则必须使用不同的值。'
- en: '`PackageLicenseExpression` must be a value from the following link: [https://spdx.org/licenses/](https://spdx.org/licenses/)
    or you could specify a custom license.'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PackageLicenseExpression`必须是以下链接中的值：[https://spdx.org/licenses/](https://spdx.org/licenses/)，或者您可以指定自定义许可证。'
- en: 'All the other elements are self-explanatory:'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他元素都是不言自明的：
- en: '```cs'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <TargetFramework>netstandard2.0
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>netstandard2.0
- en: </TargetFramework>
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: '**<GeneratePackageOnBuild>**'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '**<GeneratePackageOnBuild>**'
- en: '**true**'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: '**</GeneratePackageOnBuild>**'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: '**</GeneratePackageOnBuild>**'
- en: '**<PackageId>Packt.CSdotnet.SharedLibrary</PackageId>**'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageId>Packt.CSdotnet.SharedLibrary</PackageId>**'
- en: '**<PackageVersion>**'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageVersion>**'
- en: '**6.0.0.0**'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '**6.0.0.0**'
- en: '**</PackageVersion>**'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '**</PackageVersion>**'
- en: '**<Title>C**'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '**<Title>C**'
- en: '**# 10 and .NET 6 Shared Library</Title>**'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '**# 10 and .NET 6 Shared Library</Title>**'
- en: '**<Authors>Mark J Price</Authors>**'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '**<Authors>Mark J Price</Authors>**'
- en: '**<PackageLicenseExpression>**'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageLicenseExpression>**'
- en: '**MS-PL**'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: '**MS-PL**'
- en: '**</PackageLicenseExpression>**'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '**</PackageLicenseExpression>**'
- en: '**<PackageProjectUrl>**'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageProjectUrl>**'
- en: '**https:**'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '**https:**'
- en: '**//github.com/markjprice/cs10dotnet6**'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '**//github.com/markjprice/cs10dotnet6**'
- en: '**</PackageProjectUrl>**'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '**</PackageProjectUrl>**'
- en: '**<PackageIcon>packt-csdotnet-sharedlibrary.png</PackageIcon>**'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageIcon>packt-csdotnet-sharedlibrary.png</PackageIcon>**'
- en: '**<PackageRequireLicenseAcceptance>**'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageRequireLicenseAcceptance>**'
- en: '**true**'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: '**</PackageRequireLicenseAcceptance>**'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '**</PackageRequireLicenseAcceptance>**'
- en: '**<PackageReleaseNotes>**'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageReleaseNotes>**'
- en: '**Example shared library packaged**'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例共享库打包**'
- en: '**for**'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '**for**'
- en: '**NuGet.**'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '**NuGet.**'
- en: '**</PackageReleaseNotes>**'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '**</PackageReleaseNotes>**'
- en: '**<Description>**'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '**<Description>**'
- en: '**Three extension methods to validate a**'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '**验证三个扩展方法**'
- en: '**string**'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '**string**'
- en: '**value**'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '**value**'
- en: '**.**'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: '**.**'
- en: '**</Description>**'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '**</Description>**'
- en: '**<Copyright>**'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: '**<Copyright>**'
- en: '**Copyright ©**'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '**版权所有 ©**'
- en: '**2016-2021**'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '**2016-2021**'
- en: '**Packt Publishing Limited**'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '**Packt Publishing Limited**'
- en: '**</Copyright>**'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '**</Copyright>**'
- en: '**<PackageTags>**'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackageTags>**'
- en: '**string**'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '**string**'
- en: '**extensions packt csharp dotnet</PackageTags>**'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展包 csharp dotnet packt**'
- en: </PropertyGroup>
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: '**<ItemGroup>**'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '**<ItemGroup>**'
- en: '**<None Include=**'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: '**<None Include=**'
- en: '**"packt-csdotnet-sharedlibrary.png"**'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '**"packt-csdotnet-sharedlibrary.png"**'
- en: '**>**'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '**>**'
- en: '**<Pack>True</Pack>**'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: '**<Pack>True</Pack>**'
- en: '**<PackagePath></PackagePath>**'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '**<PackagePath></PackagePath>**'
- en: '**</None>**'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '**</None>**'
- en: '**</ItemGroup>**'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '**</ItemGroup>**'
- en: </Project>
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Configuration property values that are `true` or `false`
    values cannot have any whitespace so the `<PackageRequireLicenseAcceptance>` entry
    cannot have a carriage return and indentation as shown in the preceding markup.'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：配置属性值为`true`或`false`值不能有任何空格，因此`<PackageRequireLicenseAcceptance>`条目不能有换行和缩进，如前面的标记所示。'
- en: 'Download the icon file and save it in the `SharedLibrary` folder from the following
    link: [https://github.com/markjprice/cs10dotnet6/blob/main/vs4win/Chapter07/SharedLibrary/packt-csdotnet-sharedlibrary.png](https://github.com/markjprice/cs10dotnet6/blob/main/vs4win/Chapter07/SharedLibrary/packt-csdotnet-sharedlibrary.png)
    .'
  id: totrans-924
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载图标文件，并将其保存在以下链接的`SharedLibrary`文件夹中：[https://github.com/markjprice/cs10dotnet6/blob/main/vs4win/Chapter07/SharedLibrary/packt-csdotnet-sharedlibrary.png](https://github.com/markjprice/cs10dotnet6/blob/main/vs4win/Chapter07/SharedLibrary/packt-csdotnet-sharedlibrary.png)
    。
- en: 'Build the release assembly:'
  id: totrans-925
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建发布程序集：
- en: In Visual Studio, select **Release** in the toolbar, and then navigate to **Build**
    | **Build SharedLibrary** .
  id: totrans-926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，选择工具栏中的**Release**，然后转到**生成** | **生成 SharedLibrary** 。
- en: In Visual Studio Code, in **Terminal** , enter `dotnet build -c Release`
  id: totrans-927
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，在**终端**中，输入`dotnet build -c Release`
- en: 'If we had not set `<GeneratePackageOnBuild>` to `true` in the project file,
    then we would have to create a NuGet package manually using the following additional
    steps:'
  id: totrans-928
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们没有在项目文件中将`<GeneratePackageOnBuild>`设置为`true`，那么我们将不得不手动创建NuGet包，使用以下附加步骤：
- en: In Visual Studio, navigate to **Build** | **Pack SharedLibrary** .
  id: totrans-929
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，转到**生成** | **打包 SharedLibrary**。
- en: In Visual Studio Code, in **Terminal** , enter `dotnet pack -c Release` .
  id: totrans-930
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，在**终端**中，输入`dotnet pack -c Release`。
- en: Publishing a package to a public NuGet feed
  id: totrans-931
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将包发布到公共NuGet feed
- en: 'If you want everyone to be able to download and use your NuGet package, then
    you must upload it to a public NuGet feed like Microsoft''s:'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望每个人都能够下载和使用您的NuGet包，则必须将其上传到公共NuGet feed，如Microsoft的：
- en: 'Start your favorite browser and navigate to the following link: [https://www.nuget.org/packages/manage/upload](https://www.nuget.org/packages/manage/upload)
    .'
  id: totrans-933
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您最喜欢的浏览器，转到以下链接：[https://www.nuget.org/packages/manage/upload](https://www.nuget.org/packages/manage/upload)
    。
- en: You will need to sign in with a Microsoft account at [https://www.nuget.org/](https://www.nuget.org/)
    if you want to upload a NuGet package for other developers to reference as a dependency
    package.
  id: totrans-934
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您希望为其他开发人员上传NuGet包作为依赖包的引用，则需要使用Microsoft帐户登录[https://www.nuget.org/](https://www.nuget.org/)。
- en: Click on **Browse...** and select the `.nupkg` file that was created by generating
    the NuGet package. The folder path should be `Code\Chapter07\SharedLibrary\bin\Release`
    and the file is named `Packt.CSdotnet.SharedLibrary.6.0.0.nupkg` .
  id: totrans-935
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**浏览...**，选择通过生成NuGet包创建的`.nupkg`文件。文件夹路径应为`Code\Chapter07\SharedLibrary\bin\Release`，文件名为`Packt.CSdotnet.SharedLibrary.6.0.0.nupkg`。
- en: Verify that the information you entered in the `SharedLibrary.csproj` file has
    been correctly filled in, and then click **Submit** .
  id: totrans-936
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`SharedLibrary.csproj`文件中输入的信息是否填写正确，然后单击**提交**。
- en: Wait a few seconds, and you will see a success message showing that your package
    has been uploaded, as shown in *Figure 7.8* :![](img/Image00083.jpg)
  id: totrans-937
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，您将看到一个成功消息，显示您的包已上传，如*图7.8*所示：![](img/Image00083.jpg)
- en: 'Figure 7.8: A NuGet package upload message'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8：NuGet包上传消息
- en: '**Good Practice** : If you get an error, then review the project file for mistakes,
    or read more information about the `PackageReference` format at [https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets](https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets)
    .'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：如果出现错误，请检查项目文件中的错误，或者阅读有关`PackageReference`格式的更多信息，网址为[https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets](https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets)。'
- en: Publishing a package to a private NuGet feed
  id: totrans-940
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将包发布到私有NuGet feed
- en: 'Organizations can host their own private NuGet feeds. This can be a handy way
    for many developer teams to share work. You can read more at the following link:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 组织可以托管自己的私有NuGet feed。这对于许多开发团队共享工作可能是一个方便的方式。您可以在以下链接阅读更多信息：
- en: '[https://docs.microsoft.com/en-us/nuget/hosting-packages/overview](https://docs.microsoft.com/en-us/nuget/hosting-packages/overview)'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/nuget/hosting-packages/overview](https://docs.microsoft.com/en-us/nuget/hosting-packages/overview)'
- en: Exploring NuGet packages with a tool
  id: totrans-943
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用工具探索NuGet包
- en: 'A handy tool named **NuGet Package Explorer** for opening and reviewing more
    details about a NuGet package was created by Uno Platform. As well as being a
    website, it can be installed as a cross-platform app. Let''s see what it can do:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: Uno Platform创建了一个名为**NuGet Package Explorer**的方便工具，用于打开和查看有关NuGet包的更多详细信息。除了作为网站外，它还可以作为跨平台应用程序安装。让我们看看它能做什么：
- en: 'Start your favorite browser and navigate to the following link: [https://nuget.info](https://nuget.info)
    .'
  id: totrans-945
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您喜欢的浏览器，然后导航到以下链接：[https://nuget.info](https://nuget.info)。
- en: In the search box, enter `Packt.CSdotnet.SharedLibrary` .
  id: totrans-946
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`Packt.CSdotnet.SharedLibrary`。
- en: Select the package **v6.0.0** published by **Mark J Price** and then click the
    **Open** button.
  id: totrans-947
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择由Mark J Price发布的v6.0.0包，然后点击“打开”按钮。
- en: In the **Contents** section, expand the **lib** folder and the **netstandard2.0**
    folder.
  id: totrans-948
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**内容**部分，展开**lib**文件夹和**netstandard2.0**文件夹。
- en: Select **SharedLibrary.dll** , and note the details, as shown in *Figure 7.9*
    :![](img/Image00084.jpg)
  id: totrans-949
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**SharedLibrary.dll**，并注意详细信息，如*图7.9*所示：![](img/Image00084.jpg)
- en: 'Figure 7.9: Exploring my package using NuGet Package Explorer from Uno Platform'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9：使用Uno Platform的NuGet Package Explorer探索我的包
- en: If you want to use this tool locally in the future, click the install button
    in your browser.
  id: totrans-951
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您将来想在本地使用此工具，请单击浏览器中的安装按钮。
- en: Close your browser.
  id: totrans-952
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭您的浏览器。
- en: Not all browsers support installing web apps like this. I recommend Chrome for
    testing and development.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有浏览器都支持像这样安装Web应用程序。我建议使用Chrome进行测试和开发。
- en: Testing your class library package
  id: totrans-954
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试您的类库包
- en: 'You will now test your uploaded package by referencing it in the `AssembliesAndNamespaces`
    project:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将通过在AssembliesAndNamespaces项目中引用它来测试您上传的包：
- en: 'In the `AssembliesAndNamespaces` project, add a reference to your (or my) package,
    as shown highlighted in the following markup:'
  id: totrans-956
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AssembliesAndNamespaces`项目中，添加对您（或我的）包的引用，如下面标记中所示：
- en: '```cs'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference Include="newtonsoft.json"
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="newtonsoft.json"
- en: Version="13.0.1"
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: Version="13.0.1"
- en: />
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '**<PackageReference Include=**'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include=
- en: '**"packt.csdotnet.sharedlibrary"**'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '**"packt.csdotnet.sharedlibrary"**'
- en: '**Version=**'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '**Version=**'
- en: '**"6.0.0"**'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: '**"6.0.0"**'
- en: '**/>**'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: '**/>**'
- en: </ItemGroup>
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the console app.
  id: totrans-969
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建控制台应用程序。
- en: In `Program.cs` , import the `Packt.Shared` namespace.
  id: totrans-970
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入`Packt.Shared`命名空间。
- en: 'In `Program.cs` , prompt the user to enter some `string` values, and then validate
    them using the extension methods in the package, as shown in the following code:'
  id: totrans-971
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，提示用户输入一些`string`值，然后使用包中的扩展方法进行验证，如下面的代码所示：
- en: '```cs'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Write("Enter a color value in hex: "'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入十六进制颜色值："
- en: );
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: string
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? hex = ReadLine(); // or "00ffc8"'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '? hex = ReadLine(); // 或 "00ffc8"'
- en: WriteLine("Is {0} a valid color value? {1}"
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("Is {0} a valid color value? {1}"
- en: ','
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: hex, arg1: hex.IsValidHex());'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: hex, arg1: hex.IsValidHex());'
- en: 'Write("Enter a XML element: "'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入XML元素："
- en: );
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: string
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? xmlTag = ReadLine(); // or "<h1 class=\"<\" />"'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: '? xmlTag = ReadLine(); // 或 "<h1 class=\"<\" />"'
- en: WriteLine("Is {0} a valid XML element? {1}"
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("Is {0} a valid XML element? {1}"
- en: ','
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: xmlTag, arg1: xmlTag.IsValidXmlTag());'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: xmlTag, arg1: xmlTag.IsValidXmlTag());'
- en: 'Write("Enter a password: "'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入密码："
- en: );
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: string
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? password = ReadLine(); // or "secretsauce"'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '? password = ReadLine(); // 或 "secretsauce"'
- en: WriteLine("Is {0} a valid password? {1}"
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("Is {0} a valid password? {1}"
- en: ','
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: password, arg1: password.IsValidPassword());'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: password, arg1: password.IsValidPassword());'
- en: '```'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, enter some values as prompted, and view the results, as shown
    in the following output:'
  id: totrans-995
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，按提示输入一些值，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter a color value in hex: 00ffc8'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 输入十六进制颜色值：00ffc8
- en: Is 00ffc8 a valid color value? True
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 00ffc8是有效的颜色值吗？True
- en: 'Enter an XML element: <h1 class="<" />'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个XML元素：<h1 class="<" />
- en: Is <h1 class="<" /> a valid XML element? False
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: <h1 class="<" />是有效的XML元素吗？False
- en: 'Enter a password: secretsauce'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 输入密码：secretsauce
- en: Is secretsauce a valid password? True
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: secretsauce是有效的密码吗？True
- en: '```'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Porting from .NET Framework to modern .NET
  id: totrans-1004
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从.NET Framework迁移到现代.NET
- en: If you are an existing .NET Framework developer, then you may have existing
    applications that you think you should port to modern .NET. But you should carefully
    consider if porting is the right choice for your code, because sometimes, the
    best choice is not to port.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是现有的.NET Framework开发人员，则可能有现有的应用程序，您认为应该将其迁移到现代.NET。但是，您应该仔细考虑迁移是否是您代码的正确选择，因为有时，最好的选择并不是迁移。
- en: For example, you might have a complex website project that runs on .NET Framework
    4.8 but is only visited by a small number of users. If it works and handles the
    visitor traffic on minimal hardware, then potentially spending months porting
    it to .NET 6 could be a waste of time. But if the website currently requires many
    expensive Windows servers, then the cost of porting could eventually pay off if
    you can migrate to fewer, less costly Linux servers.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能有一个复杂的网站项目，运行在.NET Framework 4.8上，但只被少数用户访问。如果它能够在最低硬件上运行并处理访问者流量，那么花费几个月的时间将其迁移到.NET
    6可能是浪费时间。但是，如果该网站目前需要许多昂贵的Windows服务器，那么如果您可以迁移到更少、成本更低的Linux服务器，迁移的成本最终可能会得到回报。
- en: Could you port?
  id: totrans-1007
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您能够迁移吗？
- en: 'Modern .NET has great support for the following types of applications on Windows,
    macOS, and Linux so they are good candidates for porting:'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 现代.NET在Windows、macOS和Linux上对以下类型的应用程序有很好的支持，因此它们是迁移的良好候选者：
- en: '**ASP.NET Core MVC** websites.'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core MVC网站。
- en: '**ASP.NET Core Web API** web services (REST/HTTP).'
  id: totrans-1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core Web API Web服务（REST/HTTP）。
- en: '**ASP.NET Core SignalR** services.'
  id: totrans-1011
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core SignalR服务。
- en: '**Console application** command-line interfaces.'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台应用程序**命令行界面。'
- en: 'Modern .NET has decent support for the following types of applications on Windows,
    so they are potential candidates for porting:'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 现代.NET在Windows上对以下类型的应用程序有良好的支持，因此它们是迁移的潜在候选者：
- en: '**Windows Forms** applications.'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Forms**应用程序。'
- en: '**Windows Presentation Foundation** (**WPF** ) applications.'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Presentation Foundation**（**WPF**）应用程序。'
- en: 'Modern .NET has good support for the following types of applications on cross-platform
    desktop and mobile devices:'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 现代.NET对跨平台桌面和移动设备上的以下类型的应用程序有很好的支持：
- en: '**Xamarin** apps for mobile iOS and Android.'
  id: totrans-1017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin**应用程序适用于移动iOS和Android。'
- en: '**.NET MAUI** for desktop Windows and macOS, or mobile iOS and Android.'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI** 用于桌面Windows和macOS，或移动iOS和Android。'
- en: 'Modern .NET does not support the following types of legacy Microsoft projects:'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 现代.NET不支持以下类型的传统Microsoft项目：
- en: '**ASP.NET Web Forms** websites. These might be best reimplemented using **ASP.NET
    Core Razor Pages** or **Blazor** .'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Web Forms**网站。这些可能最好使用**ASP.NET Core Razor Pages**或**Blazor**重新实现。'
- en: '**Windows Communication Foundation** (**WCF** ) services (but there is an open-source
    project named **CoreWCF** that you might be able to use depending on requirements).
    WCF services might be better reimplemented using **ASP.NET Core gRPC** services.'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Communication Foundation**（**WCF**）服务（但有一个名为**CoreWCF**的开源项目，根据需求可能可以使用）。WCF服务可能最好使用**ASP.NET
    Core gRPC**服务重新实现。'
- en: '**Silverlight** applications. These might be best reimplemented using **.NET
    MAUI** .'
  id: totrans-1022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Silverlight**应用程序。这些可能最好使用**.NET MAUI**重新实现。'
- en: Silverlight and ASP.NET Web Forms applications will never be able to be ported
    to modern .NET, but existing Windows Forms and WPF applications could be ported
    to .NET on Windows in order to benefit from the new APIs and faster performance.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: Silverlight和ASP.NET Web Forms应用程序永远无法迁移到现代.NET，但现有的Windows Forms和WPF应用程序可以迁移到Windows上的.NET，以从新的API和更快的性能中受益。
- en: Legacy ASP.NET MVC web applications and ASP.NET Web API web services currently
    on .NET Framework could be ported to modern .NET and then be hosted on Windows,
    Linux, or macOS.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在.NET Framework上的传统ASP.NET MVC Web应用程序和ASP.NET Web API Web服务可以迁移到现代.NET，然后托管在Windows、Linux或macOS上。
- en: Should you port?
  id: totrans-1025
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是否应该迁移？
- en: 'Even if you *could* port, *should* you? What benefits do you gain? Some common
    benefits include the following:'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您*可以*迁移，*应该*吗？您能获得什么好处？一些常见的好处包括以下内容：
- en: '**Deployment to Linux, Docker, or Kubernetes for websites and web services**
    : These OSes are lightweight and cost-effective as website and web service platforms,
    especially when compared to the more costly Windows Server.'
  id: totrans-1027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署到Linux、Docker或Kubernetes的网站和Web服务**：这些操作系统作为网站和Web服务平台轻量且具有成本效益，特别是与更昂贵的Windows
    Server相比。'
- en: '**Removal of dependency on IIS and System.Web.dll** : Even if you continue
    to deploy to Windows Server, ASP.NET Core can be hosted on lightweight, higher-performance
    Kestrel (or other) web servers.'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不依赖于IIS和System.Web.dll的移除：即使您继续部署到Windows Server，ASP.NET Core也可以托管在轻量级、性能更高的Kestrel（或其他）Web服务器上。
- en: '**Command-line tools** : Tools that developers and administrators use to automate
    their tasks are often built as console applications. The ability to run a single
    tool cross-platform is very useful.'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行工具**：开发人员和管理员用来自动化其任务的工具通常构建为控制台应用程序。跨平台运行单个工具的能力非常有用。'
- en: Differences between .NET Framework and modern .NET
  id: totrans-1030
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Framework和现代.NET之间的区别
- en: 'There are three key differences, as shown in the following table:'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 如下表所示，有三个关键区别：
- en: '| Modern .NET | .NET Framework |'
  id: totrans-1032
  prefs: []
  type: TYPE_TB
  zh: '|现代.NET|.NET Framework|'
- en: '| Distributed as NuGet packages, so each application can be deployed with its
    own app-local copy of the version of .NET that it needs. | Distributed as a system-wide,
    shared set of assemblies (literally, in the Global Assembly Cache (GAC)). |'
  id: totrans-1033
  prefs: []
  type: TYPE_TB
  zh: '|分发为NuGet包，因此每个应用程序都可以使用其自己的应用程序本地副本部署所需的.NET版本。|分发为系统范围的共享程序集（实际上是在全局程序集缓存（GAC）中）。'
- en: '| Split into small, layered components, so a minimal deployment can be performed.
    | Single, monolithic deployment. |'
  id: totrans-1034
  prefs: []
  type: TYPE_TB
  zh: '|拆分为小型、分层组件，以便执行最小部署。|单一的、单块的部署。|'
- en: '| Removes older technologies, such as ASP.NET Web Forms, and non-cross-platform
    features, such as AppDomains, .NET Remoting, and binary serialization. | As well
    as some similar technologies to those in modern .NET like ASP.NET Core MVC, it
    also retains some older technologies, such as ASP.NET Web Forms. |'
  id: totrans-1035
  prefs: []
  type: TYPE_TB
  zh: '|删除旧技术，如ASP.NET Web Forms，以及非跨平台功能，如AppDomains、.NET Remoting和二进制序列化。|以及现代.NET中类似的一些技术，如ASP.NET
    Core MVC，它还保留了一些旧技术，如ASP.NET Web Forms。|'
- en: Understanding the .NET Portability Analyzer
  id: totrans-1036
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解.NET可移植性分析器
- en: 'Microsoft has a useful tool that you can run against your existing applications
    to generate a report for porting. You can watch a demonstration of the tool at
    the following link: [https://channel9.msdn.com/Blogs/Seth-Juarez/A-Brief-Look-at-the-NET-Portability-Analyzer](https://channel9.msdn.com/Blogs/Seth-Juarez/A-Brief-Look-at-the-NET-Portability-Analyzer)
    .'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 微软有一个有用的工具，可以针对您现有的应用程序运行，生成一个迁移报告。您可以在以下链接观看该工具的演示：[https://channel9.msdn.com/Blogs/Seth-Juarez/A-Brief-Look-at-the-NET-Portability-Analyzer](https://channel9.msdn.com/Blogs/Seth-Juarez/A-Brief-Look-at-the-NET-Portability-Analyzer)。
- en: Understanding the .NET Upgrade Assistant
  id: totrans-1038
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解.NET升级助手
- en: Microsoft's latest tool for upgrading legacy projects to modern .NET is the
    .NET Upgrade Assistant.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 微软最新的用于将传统项目升级到现代.NET的工具是.NET升级助手。
- en: For my day job, I work for a company named Optimizely. We have an enterprise-scale
    Digital Experience Platform (DXP) based on .NET Framework comprising a Content
    Management System (CMS) and for building digital commerce websites. Microsoft
    needed a challenging migration project to design and test the .NET Upgrade Assistant
    with, so we worked with them to build a great tool.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的日常工作，我在一家名为Optimizely的公司工作。我们有一个基于.NET Framework的企业级数字体验平台（DXP），包括内容管理系统（CMS）和用于构建数字商务网站。微软需要一个具有挑战性的迁移项目来设计和测试.NET升级助手，因此我们与他们合作构建了一个很棒的工具。
- en: 'Currently, it supports the following .NET Framework project types and more
    will be added later:'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，它支持以下.NET Framework项目类型，以后将添加更多：
- en: ASP.NET MVC
  id: totrans-1042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET MVC
- en: Windows Forms
  id: totrans-1043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Forms
- en: WPF
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WPF
- en: Console Application
  id: totrans-1045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台应用程序
- en: Class Library
  id: totrans-1046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类库
- en: 'It is installed as a global `dotnet` tool, as shown in the following command:'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 它安装为全局`dotnet`工具，如下命令所示：
- en: '```cs'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet tool install -g upgrade-assistant
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet tool install -g upgrade-assistant
- en: '```'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You can read more about this tool and how to use it at the following link:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解有关此工具及其使用方法的更多信息：
- en: '[https://docs.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview](https://docs.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview)'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview](https://docs.microsoft.com/en-us/dotnet/core/porting/upgrade-assistant-overview)'
- en: Using non-.NET Standard libraries
  id: totrans-1053
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用非.NET标准库
- en: Most existing NuGet packages can be used with modern .NET, even if they are
    not compiled for .NET Standard or a modern version like .NET 6\. If you find a
    package that does not officially support .NET Standard, as shown on its [nuget.org](https://www.nuget.org/)
    web page, you do not have to give up. You should try it and see if it works.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现有的NuGet软件包都可以与现代.NET一起使用，即使它们没有为.NET标准或.NET 6等现代版本编译。如果您发现一个软件包在其[nuget.org](https://www.nuget.org/)网页上没有正式支持.NET标准，您不必放弃。您应该尝试一下，看看它是否有效。
- en: 'For example, there is a package of custom collections for handling matrices
    created by Dialect Software LLC, documented at the following link:'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有一个由Dialect Software LLC创建的处理矩阵的自定义集合软件包，文档在以下链接中：
- en: '[https://www.nuget.org/packages/DialectSoftware.Collections.Matrix/](https://www.nuget.org/packages/DialectSoftware.Collections.Matrix/)'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.nuget.org/packages/DialectSoftware.Collections.Matrix/](https://www.nuget.org/packages/DialectSoftware.Collections.Matrix/)'
- en: This package was last updated in 2013, which was long before .NET Core or .NET
    6 existed, so this package was built for .NET Framework. As long as an assembly
    package like this only uses APIs available in .NET Standard, it can be used in
    a modern .NET project.
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件包是在2013年最后更新的，那时.NET Core或.NET 6还不存在，因此这个软件包是为.NET Framework构建的。只要像这样的程序包只使用.NET标准中可用的API，它就可以在现代.NET项目中使用。
- en: 'Let''s try using it and see if it works:'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用它，看看它是否有效：
- en: 'In the `AssembliesAndNamespaces` project, add a package reference for Dialect
    Software''s package, as shown in the following markup:'
  id: totrans-1059
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AssembliesAndNamespaces`项目中，添加Dialect Software软件包的包引用，如下面的标记所示：
- en: '```cs'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PackageReference
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="dialectsoftware.collections.matrix"
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: Include="dialectsoftware.collections.matrix"
- en: Version="1.0.0"
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: Version="1.0.0"
- en: />
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '```'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the `AssembliesAndNamespaces` project to restore packages.
  id: totrans-1066
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`AssembliesAndNamespaces`项目以恢复包。
- en: In `Program.cs` , add statements to import the `DialectSoftware.Collections`
    and `DialectSoftware.Collections.Generics` namespaces.
  id: totrans-1067
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加语句以导入`DialectSoftware.Collections`和`DialectSoftware.Collections.Generics`命名空间。
- en: 'Add statements to create instances of `Axis` and `Matrix<T>` , populate them
    with values, and output them, as shown in the following code:'
  id: totrans-1068
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以创建`Axis`和`Matrix<T>`的实例，用值填充它们，并输出它们，如下面的代码所示：
- en: '```cs'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Axis x = new
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: Axis x = new
- en: ("x"
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: ("x"
- en: ', 0'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: ', 0'
- en: ', 10'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: ', 10'
- en: ', 1'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: ', 1'
- en: );
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Axis y = new
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: Axis y = new
- en: ("y"
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: ("y"
- en: ', 0'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: ', 0'
- en: ', 4'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: ', 4'
- en: ', 1'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: ', 1'
- en: );
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Matrix<long
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: Matrix<long
- en: matrix = new
  id: totrans-1083
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: matrix = new
- en: (new
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: （新
- en: '[] { x, y });'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '[] { x, y });'
- en: for
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: for
- en: (int
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: i = 0
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: i = 0
- en: ; i < matrix.Axes[0
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: ; i < matrix.Axes[0
- en: '].Points.Length; i++)'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '].Points.Length; i++)'
- en: '{'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: matrix.Axes[0
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: matrix.Axes[0
- en: '].Points[i].Label = "x"'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '].Points[i].Label = "x"'
- en: + i.ToString();
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: + i.ToString();
- en: '}'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: for
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: for
- en: (int
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: i = 0
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: i = 0
- en: ; i < matrix.Axes[1
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: ; i < matrix.Axes[1
- en: '].Points.Length; i++)'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '].Points.Length; i++)'
- en: '{'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: matrix.Axes[1
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: matrix.Axes[1
- en: '].Points[i].Label = "y"'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '].Points[i].Label = "y"'
- en: + i.ToString();
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: + i.ToString();
- en: '}'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: foreach
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (long
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: （长
- en: '[] c in'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: '[] c in'
- en: matrix)
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: matrix)
- en: '{'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: matrix[c] = c[0
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: matrix[c] = c[0
- en: '] + c[1'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '] + c[1'
- en: '];'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '];'
- en: '}'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: foreach
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (long
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: （长
- en: '[] c in'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '[] c in'
- en: matrix)
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: matrix)
- en: '{'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0},{1} ({2},{3}) = {4}"
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0},{1} ({2},{3}) = {4}"
- en: ','
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: matrix.Axes[0
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: matrix.Axes[0
- en: '].Points[c[0'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '].Points[c[0'
- en: ']].Label,'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: ']].Label，'
- en: matrix.Axes[1
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: matrix.Axes[1
- en: '].Points[c[1'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '].Points[c[1'
- en: ']].Label,'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: ']].Label，'
- en: c[0
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: c[0
- en: '], c[1'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: ']，c[1'
- en: '], matrix[c]);'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: ']，matrix[c]);'
- en: '}'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, noting the warning message and the results, as shown in the following
    output:'
  id: totrans-1133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，注意警告消息和结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'warning NU1701: Package ''DialectSoftware.Collections.Matrix'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 警告NU1701：软件包'DialectSoftware.Collections.Matrix
- en: 1.0.0' was restored using '.NETFramework,Version=v4.6.1,
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 1.0.0'已使用'.NETFramework，Version=v4.6.1，
- en: .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7,
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: .NETFramework，Version=v4.6.2，.NETFramework，Version=v4.7，
- en: .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2,
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: .NETFramework，Version=v4.7.1，.NETFramework，Version=v4.7.2，
- en: .NETFramework,Version=v4.8' instead of the project target framework 'net6.0'.
    This package may not be fully compatible with your project.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: .NETFramework，Version=v4.8'而不是项目目标框架'net6.0'。此软件包可能与您的项目不完全兼容。
- en: x0,y0 (0,0) = 0
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: x0，y0（0,0）= 0
- en: x0,y1 (0,1) = 1
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: x0，y1（0,1）= 1
- en: x0,y2 (0,2) = 2
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: x0，y2（0,2）= 2
- en: x0,y3 (0,3) = 3
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: x0，y3（0,3）= 3
- en: '...'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Even though this package was created before .NET 6 existed, and the compiler
    and runtime have no way of knowing if it will work and therefore show warnings,
    because it happens to only call .NET Standard-compatible APIs, it works.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个软件包是在.NET 6存在之前创建的，编译器和运行时无法知道它是否有效，因此会显示警告，但因为它只调用了.NET标准兼容的API，所以它有效。
- en: Working with preview features
  id: totrans-1147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预览功能
- en: It is a challenge for Microsoft to deliver some new features that have cross-cutting
    effects across many parts of .NET like the runtime, language compilers, and API
    libraries. It is the classic chicken and egg problem. What do you do first?
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于微软来说，要交付一些具有跨越.NET许多部分的影响的新功能是一个挑战，比如运行时、语言编译器和API库。这是一个经典的鸡和蛋问题。你先做什么？
- en: From a practical perspective, it means that although Microsoft might have completed
    the majority of the work needed for a feature, the whole thing might not be ready
    until very late in their now annual cycle of .NET releases, too late for proper
    testing in "the wild."
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际角度来看，这意味着尽管微软可能已经完成了大部分需要的功能，但整个功能可能直到他们现在的.NET发布周期的最后阶段才准备好，对于“野外”中的适当测试来说太晚了。
- en: So, from .NET 6 onward, Microsoft will include preview features in **general
    availability** (**GA** ) releases. Developers can opt into these preview features
    and provide Microsoft with feedback. In a later GA release, they can be enabled
    for everyone.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从.NET 6开始，微软将在**通用可用性**（**GA**）发布中包含预览功能。开发人员可以选择这些预览功能，并向微软提供反馈。在以后的GA发布中，它们可以为所有人启用。
- en: '**Good Practice** : Preview features are not supported in production code.
    Preview features are likely to have breaking changes before the final release.
    Enable preview features at your own risk.'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：预览功能不支持生产代码。预览功能在最终发布之前可能会有重大变化。启用预览功能需自担风险。'
- en: Requiring preview features
  id: totrans-1152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要预览功能
- en: The `[RequiresPreviewFeatures]` attribute is used to indicate assemblies, types,
    or members that use and therefore require warnings about preview features. A code
    analyzer then scans for this assembly and generates warnings if needed. If your
    code does not use any preview features, you will not see any warnings. If you
    use any preview features, then your code should warn consumers of your code that
    you use preview features.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: '`[RequiresPreviewFeatures]`属性用于指示使用并因此需要关于预览功能的警告的程序集、类型或成员。然后，代码分析器会扫描此程序集，并在需要时生成警告。如果您的代码不使用任何预览功能，则不会看到任何警告。如果您使用任何预览功能，则您的代码应该警告代码的使用者您使用了预览功能。'
- en: Enabling preview features
  id: totrans-1154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用预览功能
- en: 'Let''s look at an example of a preview feature available in .NET 6, the ability
    to define an interface with a static abstract method:'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个在.NET 6中可用的预览功能的例子，即定义一个带有静态抽象方法的接口的能力：
- en: Use your preferred code editor to add a new console app named `UsingPreviewFeatures`
    to the `Chapter07` solution/workspace.
  id: totrans-1156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`UsingPreviewFeatures`的新控制台应用程序添加到`Chapter07`解决方案/工作空间中。
- en: In Visual Studio Code, select `UsingPreviewFeatures` as the active OmniSharp
    project. When you see the pop-up warning message saying that required assets are
    missing, click **Yes** to add them.
  id: totrans-1157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`UsingPreviewFeatures`选择为活动的OmniSharp项目。当看到弹出的警告消息说需要的资产丢失时，点击**是**来添加它们。
- en: 'In the project file, add an element to enable preview features and an element
    to enable preview language features, as shown highlighted in the following markup:'
  id: totrans-1158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，添加一个元素来启用预览功能，并添加一个元素来启用预览语言功能，如下面的标记中所示：
- en: '```cs'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk="Microsoft.NET.Sdk"
- en: '>'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType>Exe</OutputType>
- en: <TargetFramework>net6.0
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: <TargetFramework>net6.0
- en: </TargetFramework>
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: </TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable>enable</Nullable>
- en: <ImplicitUsings>enable</ImplicitUsings>
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: <ImplicitUsings>enable</ImplicitUsings>
- en: '**<EnablePreviewFeatures>**'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: '**<EnablePreviewFeatures>**'
- en: '**true**'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: '**</EnablePreviewFeatures>**'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: '**</EnablePreviewFeatures>**'
- en: '**<LangVersion>preview</LangVersion>**'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: '**<LangVersion>preview</LangVersion>**'
- en: </PropertyGroup>
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: </PropertyGroup>
- en: </Project>
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , delete the comment and statically import the `Console` class.
  id: totrans-1175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除注释并静态导入`Console`类。
- en: 'Add statements to define an interface with a static abstract method, a class
    that implements it, and then call the method in the top-level program, as shown
    in the following code:'
  id: totrans-1176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来定义一个带有静态抽象方法的接口，一个实现它的类，然后在顶层程序中调用该方法，如下面的代码所示：
- en: '```cs'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: Doer.DoSomething();
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: Doer.DoSomething();
- en: public
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: interface
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 接口
- en: IWithStaticAbstract
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: IWithStaticAbstract
- en: '{'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: static
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: abstract
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象
- en: void
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: DoSomething
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: DoSomething
- en: ()
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: ;
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Doer
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: Doer
- en: ': IWithStaticAbstract'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: ': IWithStaticAbstract'
- en: '{'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: DoSomething
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: DoSomething
- en: ()
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("I am an implementation of a static abstract method."
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("我是一个静态抽象方法的实现。"
- en: );
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the console app and note that it outputs correctly.
  id: totrans-1209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，并注意它是否正确输出。
- en: Generic mathematics
  id: totrans-1210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用数学
- en: Why has Microsoft added the ability to define static abstract methods? What
    are they useful for?
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么微软添加了定义静态抽象方法的能力？它们有什么用处？
- en: For a long time, developers have asked Microsoft for the ability to use operators
    like * on generic types. This would enable a developer to define mathematical
    methods to perform operations like adding, averaging, and so on to any generic
    type rather than having to create dozens of overloaded methods for all the numeric
    types they want to support. Support for static abstract methods in interfaces
    is a foundational feature that would enable generic mathematics.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间以来，开发人员一直在要求微软能够在通用类型上使用像*这样的运算符。这将使开发人员能够定义数学方法来执行诸如加法、平均值等操作，而不是必须为他们想要支持的所有数值类型创建大量的重载方法。接口中对静态抽象方法的支持是一项基础功能，它将使通用数学成为可能。
- en: 'If you are interested, you can read more about this at the following link:'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您感兴趣，可以在以下链接中阅读更多：
- en: '[https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/](https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/)'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/](https://devblogs.microsoft.com/dotnet/preview-features-in-net-6-generic-math/)'
- en: Practicing and exploring
  id: totrans-1215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring with deeper research into topics of this chapter.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题，进行一些动手实践，并深入研究本章主题，来测试你的知识和理解。
- en: Exercise 7.1 – Test your knowledge
  id: totrans-1217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.1-测试你的知识
- en: 'Answer the following questions:'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What is the difference between a namespace and an assembly?
  id: totrans-1219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名空间和程序集之间有什么区别？
- en: How do you reference another project in a `.csproj` file?
  id: totrans-1220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在`.csproj`文件中引用另一个项目？
- en: What is the benefit of a tool like ILSpy?
  id: totrans-1221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像ILSpy这样的工具有什么好处？
- en: Which .NET type does the C# `float` alias represent?
  id: totrans-1222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C#中的`float`别名代表哪种.NET类型？
- en: When porting an application from .NET Framework to .NET 6, what tool should
    you run before porting, and what tool could you run to perform much of the porting
    work?
  id: totrans-1223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序从.NET Framework移植到.NET 6时，应该在移植之前运行什么工具，以及可以运行什么工具来执行大部分移植工作？
- en: What is the difference between framework-dependent and self-contained deployments
    of .NET applications?
  id: totrans-1224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET应用程序的依赖框架和自包含部署有什么区别？
- en: What is a RID?
  id: totrans-1225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是RID？
- en: What is the difference between the `dotnet pack` and `dotnet publish` commands?
  id: totrans-1226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dotnet pack`和`dotnet publish`命令之间有什么区别？'
- en: What types of applications written for the .NET Framework can be ported to modern
    .NET?
  id: totrans-1227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为.NET Framework编写的哪些类型的应用程序可以移植到现代.NET？
- en: Can you use packages written for .NET Framework with modern .NET?
  id: totrans-1228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能否使用为.NET Framework编写的软件包与现代.NET兼容？
- en: Exercise 7.2 – Explore topics
  id: totrans-1229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.2 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，了解本章涵盖的主题的更多细节：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-7---understanding-and-packaging-net-types](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-7---understanding-and-packaging-net-types)'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-7---understanding-and-packaging-net-types](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-7---understanding-and-packaging-net-types)'
- en: Exercise 7.3 – Explore PowerShell
  id: totrans-1232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习7.3 – 探索PowerShell
- en: PowerShell is Microsoft's scripting language for automating tasks on every operating
    system. Microsoft recommends Visual Studio Code with the PowerShell extension
    for writing PowerShell scripts.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell是微软用于在每个操作系统上自动执行任务的脚本语言。微软建议使用带有PowerShell扩展的Visual Studio Code来编写PowerShell脚本。
- en: 'Since PowerShell is its own extensive language there is not space in this book
    to cover it. Instead, I have created some supplementary pages on the books GitHub
    repository to introduce you to some key concepts and show some examples:'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PowerShell是一种独立的广泛语言，本书中没有空间来涵盖它。相反，我在书的GitHub存储库上创建了一些补充页面，介绍了一些关键概念并展示了一些示例：
- en: '[https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell](https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell)'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell](https://github.com/markjprice/cs10dotnet6/tree/main/docs/powershell)'
- en: Summary
  id: totrans-1236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed the journey to .NET 6, we explored the relationship
    between assemblies and namespaces, we saw options for publishing an app for distribution
    to multiple operating systems, packaged and distributed a class library, and we
    discussed options for porting existing .NET Framework code bases.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了通往.NET 6的旅程，探讨了程序集和命名空间之间的关系，看到了发布应用程序以分发到多个操作系统的选项，打包和分发了一个类库，并讨论了迁移现有.NET
    Framework代码库的选项。
- en: In the next chapter, you will learn about some common Base Class Library types
    that are included with modern .NET.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解一些包含在现代.NET中的常见基类库类型。
