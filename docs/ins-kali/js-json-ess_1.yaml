- en: Chapter 1. JavaScript Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。JavaScript基础知识
- en: JavaScript, which was introduced as LiveScript by Netscape Communications Corp,
    has grown leaps and bounds in the last few years. JavaScript was originally developed
    to make web pages more interactive, and control the behavior of the page. JavaScript
    programs are commonly embedded inside an HTML file. HTML is a markup language,
    and does not manipulate the behavior of a page once its loaded. Using JavaScript,
    web developers can set rules and verify if the rules were followed, avoiding any
    remote server resources for input validation or complex number crunching. Today
    JavaScript is not just used for basic input validation; it is used to access the
    browser's `Document` object, to make asynchronous calls to the web server, and
    to develop end-to-end web applications using software platforms such as `Node.JS`,
    which is powered by Google's v8 JavaScript engine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript最初由Netscape Communications Corp作为LiveScript引入，近年来取得了长足的发展。JavaScript最初是为了使网页更具交互性，并控制页面的行为而开发的。JavaScript程序通常嵌入在HTML文件中。HTML是一种标记语言，一旦加载，就不会操纵页面的行为。使用JavaScript，Web开发人员可以设置规则并验证是否遵循了规则，避免任何远程服务器资源进行输入验证或复杂的数字计算。今天，JavaScript不仅用于基本的输入验证；它还用于访问浏览器的`Document`对象，对Web服务器进行异步调用，并使用诸如`Node.JS`等软件平台开发端到端的Web应用程序，该平台由Google的v8
    JavaScript引擎提供支持。
- en: JavaScript is considered to be one of the three building blocks that are required
    to create interactive web pages; it is the only programming language in the trinity
    that is HTML, CSS, and JavaScript. JavaScript is a case sensitive and a space
    insensitive language, unlike Python and Ruby. A JavaScript program is a collection
    of statements and those statements have to be included inside the <script>> tags.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript被认为是创建交互式网页所需的三个构建块之一；它是HTML、CSS和JavaScript中唯一的编程语言。JavaScript是一种区分大小写且不敏感空格的语言，与Python和Ruby不同。JavaScript程序是一系列语句，这些语句必须包含在`<script>`标签内。
- en: '![JavaScript Basics](img/6034OS_01_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript Basics](img/6034OS_01_01.jpg)'
- en: Tip
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: JavaScript has to be invoked from another application such as a browser. Browsers
    have a built-in JavaScript engine that interprets and executes the JavaScript
    on the webpage. The interpretation of JavaScript is from top to bottom and goes
    from left to right. SpiderMonkey and Rhino are few of the early JavaScript engines
    that were implemented by different browsers, such as Netscape Navigator and Mozilla
    Firefox.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript必须从另一个应用程序（如浏览器）中调用。浏览器有一个内置的JavaScript引擎，用于解释和执行网页上的JavaScript。JavaScript的解释是从上到下，从左到右。SpiderMonkey和Rhino是早期由不同浏览器实现的几个JavaScript引擎，如Netscape
    Navigator和Mozilla Firefox。
- en: Next is our simple Hello World program; the JavaScript program is in between
    the `<script>` tags in the head section. The script tags can either be added to
    the head tag or to the body tag. As JavaScript is not non-blocking, the scripts
    hold the page until they are loaded. It is common to see the scripts being loaded
    at the end; this would work if there were no dependencies to other files or elements.
    One such example of a dependency would be a library that is used from a different
    location. We will be looking at a lot of these examples in the later chapters.
    We will be discussing the role of Unobtrusive JavaScript at a later point. For
    our Hello World program, use a text editor of your choice, and save this program
    with an HTML extension. Load the file in a web browser, and a pop-up box with
    the text **Hello World!** should be loaded on the page.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们简单的Hello World程序；JavaScript程序位于head部分的`<script>`标签之间。脚本标签可以添加到head标签或body标签中。由于JavaScript是非阻塞的，脚本会阻止页面加载直到它们被加载。通常可以看到脚本被加载到末尾；如果没有依赖其他文件或元素，这将起作用。一个这样的依赖的例子是从不同位置使用的库。我们将在后面的章节中看到很多这样的例子。我们将在以后讨论无侵入式JavaScript的作用。对于我们的Hello
    World程序，使用您选择的文本编辑器，并将此程序保存为HTML扩展名。在Web浏览器中加载文件，应该在页面上加载一个带有文本**Hello World!**的弹出框。
- en: 'The following code snippet is the `first_script.html` file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是`first_script.html`文件：
- en: '![JavaScript Basics](img/6034OS_01_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript Basics](img/6034OS_01_02.jpg)'
- en: 'The output is as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![JavaScript Basics](img/6034OS_01_03.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript Basics](img/6034OS_01_03.jpg)'
- en: Variables in JavaScript
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript中的变量
- en: Now that we have built a Hello World program, let us take the next step and
    perform a few arithmetic operations on two numbers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了一个Hello World程序，让我们迈出下一步，对两个数字进行一些算术运算。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The semi colon (`;`) is a statement terminator, it tellsthe JavaScript engine
    that a statement has ended.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 分号（`;`）是一个语句终止符，它告诉JavaScript引擎语句已经结束。
- en: 'Let us take a look at another program, `alert_script.html`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一个程序，`alert_script.html`：
- en: '![Variables in JavaScript](img/6034OS_01_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的变量](img/6034OS_01_04.jpg)'
- en: The previous program would run and produce four pop-up windows, one after the
    other, displaying their respective values. A glaring problem here is that we are
    repetitively using the same numbers in multiple places. If we had to perform these
    arithmetic operations on a different set of numbers, we would have had to replace
    them at multiple locations. To avoid this situation, we would assign those numbers
    to temporary storage locations; these storage locations are often referred to
    as variables.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的程序将运行并产生四个弹出窗口，依次显示它们的各自值。这里一个明显的问题是我们在多个地方重复使用相同的数字。如果我们必须对不同的数字集执行这些算术运算，我们将不得不在多个位置进行替换。为了避免这种情况，我们将这些数字分配给临时存储位置；这些存储位置通常被称为变量。
- en: 'The keyword `var` is used to declare a variable in JavaScript, followed by
    the name of that variable. The name is then implicitly provided with a piece of
    computer memory, which we will use throughout the program execution. Let us take
    a quick look at how variables will make the earlier program more flexible:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字`var`用于在JavaScript中声明变量，后面跟着变量的名称。然后，该名称将隐式提供计算机内存的一部分，我们将在整个程序执行过程中使用它。让我们快速看一下变量如何使之前的程序更加灵活：
- en: '![Variables in JavaScript](img/6034OS_01_05.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的变量](img/6034OS_01_05.jpg)'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Code commenting can be done in two ways: one is single line, and the other
    is multiline.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 代码注释可以通过两种方式进行：一种是单行，另一种是多行。
- en: 'Single line comments:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 单行注释：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Multiline comments:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 多行注释：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let us continue with the program:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续进行程序：
- en: '![Variables in JavaScript](img/6034OS_01_06.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的变量](img/6034OS_01_06.jpg)'
- en: 'Now let us alter the value from `5` to `6`; the amount of change that we will
    make here is minimal. We assign the value of `6` to our variable `a`, and that
    takes care of the rest of the process; unlike our earlier script where changes
    were made in multiple locations. This is shown as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将值从`5`改为`6`；我们将在这里进行的更改量是最小的。我们将值`6`赋给变量`a`，这样就完成了剩下的过程；不像我们之前的脚本在多个位置进行了更改。如下所示：
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Code commenting is a recurring and an extremely important step in the development
    life cycle of any application. It has to be used to explain any assumptions and/or
    any dependencies that our code contains.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 代码注释是任何应用程序开发生命周期中经常发生且非常重要的一步。必须用来解释代码中包含的任何假设和/或任何依赖关系。
- en: '![Variables in JavaScript](img/6034OS_01_07.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的变量](img/6034OS_01_07.jpg)'
- en: In JavaScript, we declare a variable by using the keyword `var` and until a
    value is assigned to it, the value of the variable will be implicitly set to `undefined`;
    that value is overwritten on variable initialization.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们使用关键字`var`声明变量，直到为其分配一个值，变量的值将被隐式设置为`undefined`；该值在变量初始化时被覆盖。
- en: Arrays
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: Variables are good to hold single values, but for cases where a variable should
    contain multiple values, we would have to rely on arrays. A JavaScript array is
    a collection of items arranged in an order, according to their index. Each item,
    in the array, is an element and has an index, which is used to access that element.
    Arrays are like a bookshelf that holds more than one book; each book having its
    unique location. Arrays are declared using the array literal notation `[]`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 变量很适合保存单个值，但对于变量应该包含多个值的情况，我们必须依赖数组。JavaScript数组是根据其索引顺序排列的项目集合。数组中的每个项目都是一个元素，并且具有用于访问该元素的索引。数组就像一个书架，可以放置多本书；每本书都有其独特的位置。数组使用数组文字表示法`[]`声明。
- en: 'Let us look at a simple array declaration:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的数组声明：
- en: '![Arrays](img/6034OS_01_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![数组](img/6034OS_01_08.jpg)'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Arrays in JavaScript are zero based.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的数组是从零开始的。
- en: 'Let us initialize the array:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们初始化数组：
- en: '![Arrays](img/6034OS_01_09.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![数组](img/6034OS_01_09.jpg)'
- en: 'To access the value of a specific element, the reference index of that element
    is used. Once the reference index is identified, it can be outputted using the
    alert statement, as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问特定元素的值，使用该元素的引用索引。一旦确定了引用索引，就可以使用alert语句输出它，如下面的屏幕截图所示：
- en: '![Arrays](img/6034OS_01_10.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![数组](img/6034OS_01_10.jpg)'
- en: 'Unlike variables, arrays are not typed, therefore, they can contain various
    types of data, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与变量不同，数组没有类型，因此可以包含各种类型的数据，如下面的屏幕截图所示：
- en: '![Arrays](img/6034OS_01_11.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![数组](img/6034OS_01_11.jpg)'
- en: 'A much more complex example of a JavaScript array is a multidimensional array,
    where there is a combination of arrays inside an array, as seen in the following
    screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript数组的一个更复杂的例子是多维数组，其中数组内部有数组的组合，如下面的屏幕截图所示：
- en: '![Arrays](img/6034OS_01_12.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![数组](img/6034OS_01_12.jpg)'
- en: 'To retrieve an element from a multidimensional array, we would have to use
    as many indexes as the levels in that array. If the multidimensional array contains
    an array that has the values that we want to access, we will have to choose the
    index where the array element exists, and then choose the index of the value inside
    the array that we are searching for. To retrieve the string `Three` from the `multidimensionalArray`
    example, we will have to first locate the index of the array containing the value
    `Three`, and then find the index of the value `Three` inside that array. This
    is shown as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要从多维数组中检索元素，我们必须使用与该数组中级别相同的索引。如果多维数组包含一个包含我们要访问的值的数组，我们将不得不选择数组元素存在的索引，然后选择要搜索的数组内部值的索引。要从`multidimensionalArray`示例中检索字符串`Three`，我们首先必须找到包含值`Three`的数组的索引，然后找到该数组内部值`Three`的索引。如下所示：
- en: '![Arrays](img/6034OS_01_13.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![数组](img/6034OS_01_13.jpg)'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The second way of declaring an array is by using the `Array` class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Array`类声明数组的第二种方法。
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Objects
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象
- en: 'Objects are another way of handling data. In arrays the indexes are commonly
    numerical; objects give us a robust way of assigning and retrieving data. Objects
    are derived from the object-oriented programming concept; a programming paradigm
    that is very popular. Objects are a virtual representation of real-time data;
    they allow us to organize our data into logical groups via properties and methods.
    Properties describe the state of the object, while methods describe the behavior
    of the object. Properties are a key-value pair that holds the information. Take
    a look at the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是处理数据的另一种方式。在数组中，索引通常是数字；对象为我们提供了一种强大的方式来分配和检索数据。对象源自面向对象编程的概念；这是一种非常流行的编程范式。对象是实时数据的虚拟表示；它们允许我们通过属性和方法将数据组织成逻辑组。属性描述对象的状态，而方法描述对象的行为。属性是保存信息的键值对。看一下下面的例子：
- en: '![Objects](img/6034OS_01_14.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![对象](img/6034OS_01_14.jpg)'
- en: 'In the previous example, we have instantiated a `person` object, and then added
    the `firstname` and `lastname` properties that described the object. We added
    behavior to the object by creating a method called `getFullName`, the method accessed
    the object properties, retrieved the data, and alerted the output onto the screen.
    In this example the properties are accessed by the dot notation; we could also
    access a property by putting the property name in square brackets similar to an
    array, but it is not popular. This is shown as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们实例化了一个`person`对象，然后添加了描述该对象的`firstname`和`lastname`属性。我们通过创建一个名为`getFullName`的方法为对象添加了行为，该方法访问了对象的属性，检索数据，并将输出警报到屏幕上。在这个例子中，属性是通过点表示法访问的；我们也可以通过将属性名称放在方括号中类似于数组来访问属性，但这并不常见。如下所示：
- en: '![Objects](img/6034OS_01_15.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![对象](img/6034OS_01_15.jpg)'
- en: 'The second way of creating an object is by using the curly braces. Here we
    are introduced to the `this` keyword, which provides a reference to the object''s
    properties and methods, as shown in the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建对象的第二种方式是使用大括号。在这里，我们介绍了`this`关键字，它提供了对对象属性和方法的引用，如下所示：
- en: '![Objects](img/6034OS_01_16.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![对象](img/6034OS_01_16.jpg)'
- en: The Carousel application
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Carousel应用程序
- en: We will be working on a Carousel application, which is powered by a JSON feed.
    We will be using HTML, JavaScript, and JSON to build this application. This application
    will have its very own navigation system coupled with a timer event in the background,
    which will rotate the items at a given interval. We will also be discussing how
    user experience plays an important role in developing such an application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将致力于开发一个由JSON提供支持的Carousel应用程序。我们将使用HTML、JavaScript和JSON来构建这个应用程序。这个应用程序将有自己的导航系统，配合后台的定时器事件，以在给定的间隔内旋转项目。我们还将讨论用户体验在开发这样一个应用程序中扮演的重要角色。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter is a basic introduction to the principles of JavaScript that we
    will be utilizing in our journey towards mastering JSON. Variables, arrays, and
    objects play a very important role in carrying the data across the network. If
    this is your first encounter with JavaScript, go through the examples another
    time and practice them. We will need a strong foundation in order to build a solid
    understanding of JSON, and how it can be used in real-time web applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是对我们将在掌握JSON的过程中利用的JavaScript原则的基本介绍。变量、数组和对象在跨网络传递数据中扮演着非常重要的角色。如果这是你第一次接触JavaScript，请再看一遍例子并加以练习。我们需要一个坚实的基础才能建立对JSON的深刻理解，以及它如何在实时网络应用中使用。
