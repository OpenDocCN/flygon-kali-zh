["```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void TaskMethod(string name){\n      Console.WriteLine(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n    }\n    ```", "```cs\n    var t1 = new Task(() =>TaskMethod(\"Task 1\"));\n    var t2 = new Task(() =>TaskMethod(\"Task 2\"));\n    t2.Start();\n    t1.Start();\n    Task.Run(() =>TaskMethod(\"Task 3\"));\n    Task.Factory.StartNew(() => TaskMethod(\"Task 4\"));\n    Task.Factory.StartNew(() => TaskMethod(\"Task 5\"),TaskCreationOptions.LongRunning);\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static Task<int>CreateTask(string name){\n      return new Task<int>(() =>TaskMethod(name));\n    }\n\n    static int TaskMethod(string name){\n      Console.WriteLine(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\",name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      return 42;\n    }\n    ```", "```cs\n    TaskMethod(\"Main Thread Task\");\n    Task<int> task = CreateTask(\"Task 1\");\n    task.Start();\n    int result = task.Result;\n    Console.WriteLine(\"Result is: {0}\", result);\n\n    task = CreateTask(\"Task 2\");\n    task.RunSynchronously();\n    result = task.Result;\n    Console.WriteLine(\"Result is: {0}\", result);\n\n    task = CreateTask(\"Task 3\");\n    task.Start();\n\n    while (!task.IsCompleted){\n      Console.WriteLine(task.Status);\n      Thread.Sleep(TimeSpan.FromSeconds(0.5));\n    } \n\n    Console.WriteLine(task.Status);\n    result = task.Result;\n    Console.WriteLine(\"Result is: {0}\", result);\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds){\n      Console.WriteLine(\"Task {0} is running on a thread id\n        {1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      return 42 * seconds;\n    }\n    ```", "```cs\n    var firstTask = new Task<int>(() =>TaskMethod(\"First Task\",3));\n    var secondTask = new Task<int>(() =>TaskMethod(\"SecondTask\", 2));\n\n    firstTask.ContinueWith(\n      t =>Console.WriteLine(\"The first answer is {0}. Thread id{1}, is thread pool thread: {2}\", t.Result,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread),TaskContinuationOptions.OnlyOnRanToCompletion);\n\n    firstTask.Start();\n    secondTask.Start();\n\n    Thread.Sleep(TimeSpan.FromSeconds(4));\n\n    Task continuation = secondTask.ContinueWith(\n      t =>Console.WriteLine(\"The second answer is {0}. Threadid {1}, is thread pool thread: {2}\", t.Result,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread),TaskContinuationOptions.OnlyOnRanToCompletion |TaskContinuationOptions.ExecuteSynchronously);\n\n    continuation.GetAwaiter().OnCompleted(\n      () =>Console.WriteLine(\"Continuation Task Completed!Thread id {0}, is thread pool thread: {1}\",Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread));\n\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    Console.WriteLine();\n\n    firstTask = new Task<int>(() => {varinnerTask = Task.Factory.StartNew(() =>TaskMethod(\"Second Task\", 5), TaskCreationOptions.AttachedToParent);\n      innerTask.ContinueWith(t =>TaskMethod(\"Third Task\", 2),TaskContinuationOptions.AttachedToParent);\n      return TaskMethod(\"First Task\", 2);\n    });\n\n    firstTask.Start();\n\n    while (!firstTask.IsCompleted){\n      Console.WriteLine(firstTask.Status);\n      Thread.Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    Console.WriteLine(firstTask.Status);\n\n    Thread.Sleep(TimeSpan.FromSeconds(10));\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private delegate string AsynchronousTask(stringthreadName);\n    private delegate string IncompatibleAsynchronousTask(outint threadId);\n\n    private static void Callback(IAsyncResultar){\n      Console.WriteLine(\"Starting a callback...\");\n      Console.WriteLine(\"State passed to a callback: {0}\",ar.AsyncState);\n      Console.WriteLine(\"Is thread pool thread: {0}\",Thread.CurrentThread.IsThreadPoolThread);\n      Console.WriteLine(\"Thread pool worker thread id: {0}\",Thread.CurrentThread.ManagedThreadId);\n    }\n\n    private static string Test(string threadName){\n      Console.WriteLine(\"Starting...\");\n      Console.WriteLine(\"Is thread pool thread: {0}\",Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      Thread.CurrentThread.Name = threadName;\n      return string.Format(\"Thread name: {0}\",Thread.CurrentThread.Name);\n    }\n\n    private static string Test(out int threadId){\n      Console.WriteLine(\"Starting...\");\n      Console.WriteLine(\"Is thread pool thread: {0}\",Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      threadId = Thread.CurrentThread.ManagedThreadId;\n      return string.Format(\"Thread pool worker thread id was:{0}\", threadId);\n    }\n    ```", "```cs\n    int threadId;\n    AsynchronousTask d = Test;\n    IncompatibleAsynchronousTask e = Test;\n\n    Console.WriteLine(\"Option 1\");\n    Task<string> task = Task<string>.Factory.FromAsync(\n      d.BeginInvoke(\"AsyncTaskThread\", Callback, \"a delegateasynchronous call\"), d.EndInvoke);\n\n    task.ContinueWith(t =>Console.WriteLine(\"Callback isfinished, now running a continuation! Result: {0}\",t.Result));\n\n    while (!task.IsCompleted){\n      Console.WriteLine(task.Status);\n      Thread.Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    Console.WriteLine(task.Status);\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n\n    Console.WriteLine(\"----------------------------------------\");\n    Console.WriteLine();\n    Console.WriteLine(\"Option 2\");\n\n    task = Task<string>.Factory.FromAsync(\n      d.BeginInvoke, d.EndInvoke, \"AsyncTaskThread\", \"adelegate asynchronous call\");\n    task.ContinueWith(t =>Console.WriteLine(\"Task is completed,now running a continuation! Result: {0}\",t.Result));\n    while (!task.IsCompleted){\n      Console.WriteLine(task.Status);\n      Thread.Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    Console.WriteLine(task.Status);\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n\n    Console.WriteLine(\"------------------------------------------\");\n    Console.WriteLine();\n    Console.WriteLine(\"Option 3\");\n\n    IAsyncResult ar = e.BeginInvoke(out threadId, Callback, \"adelegate asynchronous call\");\n    ar = e.BeginInvoke(out threadId, Callback, \"a delegateasynchronous call\");\n    task = Task<string>.Factory.FromAsync(ar, _ =>e.EndInvoke(out threadId, ar));\n    task.ContinueWith(t =>\n      Console.WriteLine(\"Task is completed, now running acontinuation! Result: {0}, ThreadId: {1}\",t.Result, threadId));\n\n    while (!task.IsCompleted){\n      Console.WriteLine(task.Status);\n      Thread.Sleep(TimeSpan.FromSeconds(0.5));\n    }\n    Console.WriteLine(task.Status);\n\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n    ```", "```cs\n    using System;\n    using System.ComponentModel;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds){\n      Console.WriteLine(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      return 42 * seconds;\n    }\n    ```", "```cs\n    var tcs = new TaskCompletionSource<int>();\n\n    var worker = new BackgroundWorker();\n    worker.DoWork += (sender, eventArgs) =>\n    {\n      eventArgs.Result = TaskMethod(\"Background worker\", 5);\n    };\n\n    worker.RunWorkerCompleted += (sender, eventArgs) =>{\n      if (eventArgs.Error != null) {\n        tcs.SetException(eventArgs.Error);\n      }\n      else if (eventArgs.Cancelled) {\n        tcs.SetCanceled();\n      }\n        else {\n          tcs.SetResult((int)eventArgs.Result);\n        }\n    };\n\n    worker.RunWorkerAsync();\n\n    int result = tcs.Task.Result;\n\n    Console.WriteLine(\"Result is: {0}\", result);\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static int TaskMethod(string name, int seconds,CancellationToken token){\n\n      Console.WriteLine(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      for (int i = 0; i< seconds; i ++) {\n        Thread.Sleep(TimeSpan.FromSeconds(1));\n        if (token.IsCancellationRequested)\n          return -1;\n      }\n      return 42*seconds;\n    }\n    ```", "```cs\n    var cts = new CancellationTokenSource();\n    var longTask = new Task<int>(() =>TaskMethod(\"Task 1\", 10,cts.Token), cts.Token);\n    Console.WriteLine(longTask.Status);\n    cts.Cancel();\n    Console.WriteLine(longTask.Status);\n    Console.WriteLine(\"First task has been cancelled beforeexecution\");\n    cts = new CancellationTokenSource();\n    longTask = new Task<int>(() =>TaskMethod(\"Task 2\", 10,cts.Token), cts.Token);\n    longTask.Start();\n    for (int i = 0; i< 5; i++ ){\n      Thread.Sleep(TimeSpan.FromSeconds(0.5));\n      Console.WriteLine(longTask.Status);\n    }\n    cts.Cancel();\n    for (int i = 0; i< 5; i++){\n      Thread.Sleep(TimeSpan.FromSeconds(0.5));\n      Console.WriteLine(longTask.Status);\n    }\n\n    Console.WriteLine(\"A task has been completed with result{0}.\", longTask.Result);\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds){\n      Console.WriteLine(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      throw new Exception(\"Boom!\");\n      return 42 * seconds;\n    }\n    ```", "```cs\n    Task<int> task;\n    try{\n      task = Task.Run(() =>TaskMethod(\"Task 1\", 2));\n      int result = task.Result;\n      Console.WriteLine(\"Result: {0}\", result);\n    }\n    catch (Exception ex){\n      Console.WriteLine(\"Exception caught: {0}\", ex);\n    }\n    Console.WriteLine(\"----------------------------------------------\");\n    Console.WriteLine();\n\n    try{\n      task = Task.Run(() =>TaskMethod(\"Task 2\", 2));\n      int result = task.GetAwaiter().GetResult();\n      Console.WriteLine(\"Result: {0}\", result);\n    }\n    catch (Exception ex){\n      Console.WriteLine(\"Exception caught: {0}\", ex);\n    }\n    Console.WriteLine(\"----------------------------------------------\");\n    Console.WriteLine();\n\n    var t1 = new Task<int>(() =>TaskMethod(\"Task 3\", 3));\n    var t2 = new Task<int>(() =>TaskMethod(\"Task 4\", 2));\n    var complexTask = Task.WhenAll(t1, t2);\n    var exceptionHandler = complexTask.ContinueWith(t =>Console.WriteLine(\"Exception caught: {0}\", t.Exception),TaskContinuationOptions.OnlyOnFaulted);\n    t1.Start();\n    t2.Start();\n\n    Thread.Sleep(TimeSpan.FromSeconds(5));\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static int TaskMethod(string name, int seconds){\n      Console.WriteLine(\"Task {0} is running on a thread id{1}. Is thread pool thread: {2}\", name,Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      return 42 * seconds;\n    }\n    ```", "```cs\n    var firstTask = new Task<int>(() =>TaskMethod(\"First Task\",3));\n    var secondTask = new Task<int>(() =>TaskMethod(\"SecondTask\", 2));\n    var whenAllTask = Task.WhenAll(firstTask, secondTask);\n\n    whenAllTask.ContinueWith(t =>\n      Console.WriteLine(\"The first answer is {0}, the second is{1}\", t.Result[0], t.Result[1]),TaskContinuationOptions.OnlyOnRanToCompletion);\n\n    firstTask.Start();\n    secondTask.Start();\n\n    Thread.Sleep(TimeSpan.FromSeconds(4));\n\n    var tasks = new List<Task<int>>();\n    for (int i = 1; i< 4; i++)\n    {\n      int counter = i;\n      var task = new Task<int>(() =>TaskMethod(string.Format(\"Task {0}\", counter), counter));\n      tasks.Add(task);\n      task.Start();\n    }\n\n    while (tasks.Count> 0){\n      var completedTask = Task.WhenAny(tasks).Result;\n      tasks.Remove(completedTask);\n      Console.WriteLine(\"A task has been completed with result{0}.\", completedTask.Result);\n    }\n\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n    ```", "```cs\n    <TextBlock Name=\"ContentTextBlock\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"44,134,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"425\"\n    Height=\"40\"/>\n    <Button Content=\"Sync\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"45,190,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"75\"\n    Click=\"ButtonSync_Click\"/>\n    <Button Content=\"Async\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"165,190,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"75\"\n    Click=\"ButtonAsync_Click\"/>\n    <Button Content=\"Async OK\"\n    HorizontalAlignment=\"Left\"\n    Margin=\"285,190,0,0\"\n    VerticalAlignment=\"Top\"\n    Width=\"75\"\n    Click=\"ButtonAsyncOK_Click\"/>\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using System.Windows;\n    using System.Windows.Input;\n    ```", "```cs\n    void ButtonSync_Click(object sender, RoutedEventArgs e){\n      ContentTextBlock.Text = string.Empty;\n      try {\n        //string result = TaskMethod(TaskScheduler.//FromCurrentSynchronizationContext()).Result;\n        string result = TaskMethod().Result;\n        ContentTextBlock.Text = result;\n      }\n      catch (Exception ex) {\n        ContentTextBlock.Text = ex.InnerException.Message;\n      }\n    }\n\n    void ButtonAsync_Click(object sender, RoutedEventArgs e) {\n      ContentTextBlock.Text = string.Empty;\n      Mouse.OverrideCursor = Cursors.Wait;\n      Task<string> task = TaskMethod();\n      task.ContinueWith(t => {\n        ContentTextBlock.Text = t.Exception.InnerException.Message;\n        Mouse.OverrideCursor = null;\n      }, \n      CancellationToken.None, TaskContinuationOptions.OnlyOnFaulted,\n      TaskScheduler.FromCurrentSynchronizationContext());\n    }\n\n    void ButtonAsyncOK_Click(object sender, RoutedEventArgs e){\n      ContentTextBlock.Text = string.Empty;\n      Mouse.OverrideCursor = Cursors.Wait;\n      Task<string> task = TaskMethod(TaskScheduler.FromCurrentSynchronizationContext());\n      task.ContinueWith(t =>Mouse.OverrideCursor = null,\n        CancellationToken.None,\n        TaskContinuationOptions.None,\n        TaskScheduler.FromCurrentSynchronizationContext());\n    }\n\n    Task<string> TaskMethod() {\n      return TaskMethod(TaskScheduler.Default);\n    }\n\n    Task<string> TaskMethod(TaskScheduler scheduler) {\n      Task delay = Task.Delay(TimeSpan.FromSeconds(5));\n\n      return delay.ContinueWith(t => {\n        string str = string.Format(\"Task is running on a threadid {0}. Is thread pool thread: {1}\",Thread.CurrentThread.ManagedThreadId,Thread.CurrentThread.IsThreadPoolThread);\n        ContentTextBlock.Text = str;\n        return str;\n      }, scheduler);\n    }\n    ```"]