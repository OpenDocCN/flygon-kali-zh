- en: Chapter 22. Particle Systems and Handling Screen Touches
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22章。粒子系统和处理屏幕触摸
- en: We already have our real-time system that we implemented in the previous chapter
    using a thread. In this chapter, we will create the entities that will exist and
    evolve in this real-time system as if they have a mind of their own.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中使用线程实现了我们的实时系统。在本章中，我们将创建将存在并在这个实时系统中演变的实体，就像它们有自己的思想一样。
- en: We will also look at how the user can draw these entities to the screen by learning
    how to set up the ability to interact with the screen. This is different than
    interacting with a widget in a UI layout.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习用户如何通过学习如何设置与屏幕交互的能力来将这些实体绘制到屏幕上。这与在UI布局中与小部件交互是不同的。
- en: 'Here is what is coming up in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的内容：
- en: Adding custom buttons to the screen
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向屏幕添加自定义按钮
- en: Coding the `Particle` class
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写`Particle`类的代码
- en: Coding the `ParticleSystem` class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写`ParticleSystem`类的代码
- en: Handling screen touches
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理屏幕触摸
- en: We will start by adding a custom UI to our app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先向我们的应用程序添加自定义UI。
- en: Adding custom buttons to the screen
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向屏幕添加自定义按钮
- en: We need to let the user control when to start another drawing and clear the
    screen of their previous work. We also need the user to be able to decide whether
    or when to bring the drawing to life. To achieve this, we will add two buttons
    to the screen, one for each of these tasks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要让用户控制何时开始另一个绘图并清除屏幕上的先前工作。我们还需要让用户能够决定何时将绘图带到生活中。为了实现这一点，我们将在屏幕上添加两个按钮，分别用于这些任务。
- en: 'Add these new properties to the code after the other properties in the `LiveDrawingView`
    class:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LiveDrawingView`类的其他属性之后，将以下新属性添加到代码中：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We now have two `RectF` instances. These objects hold four `Float` coordinates
    each, one coordinate for each corner of our two proposed buttons.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有两个`RectF`实例。这些对象每个都包含四个`Float`坐标，每个按钮的每个角都有一个坐标。
- en: 'We will now add an `init` block to the `LiveDrawingView` class and initialize
    the positions when the `LiveDrawingView` instance is first created, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将向`LiveDrawingView`类添加一个`init`块，并在首次创建`LiveDrawingView`实例时初始化位置，如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we have added actual coordinates for the buttons. If you visualize the coordinates
    on screen, then you will see that they are in the top left-hand corner, with the
    pause button just below the reset/clear button.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为按钮添加了实际坐标。如果你在屏幕上可视化这些坐标，你会看到它们在左上角，暂停按钮就在重置/清除按钮的下方。
- en: 'Now we can draw the buttons. Add the following two lines of code to the `draw`
    function of the `LiveDrawingView` class. The preexisting comment shows exactly
    where the new highlighted code should go:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绘制按钮。将以下两行代码添加到`LiveDrawingView`类的`draw`函数中。现有的注释准确显示了新突出显示的代码应该放在哪里：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The new code uses an overridden version of the `drawRect` function, and we simply
    pass our two `RectF` instances straight in alongside the usual `Paint` instance.
    Our buttons will now appear on the screen.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码使用了`drawRect`函数的重写版本，我们只需将我们的两个`RectF`实例直接传递给通常的`Paint`实例。我们的按钮现在将出现在屏幕上。
- en: We will see how the user can interact with these slightly crude buttons later
    in the chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面看到用户如何与这些略显粗糙的按钮交互。
- en: Implementing a particle system effect
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现粒子系统效果
- en: A particle system is a system that controls particles. In our case, `ParticleSystem`
    is a class we will write that will spawn instances (lots of instances) of the
    `Particle` class (also a class we will write) that together will create a simple
    explosion-like effect.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统是控制粒子的系统。在我们的情况下，`ParticleSystem`是一个我们将编写的类，它将产生`Particle`类的实例（许多实例），这些实例将一起创建一个简单的爆炸效果。
- en: 'Here is a screenshot of some particles controlled by a particle system as it
    may appear by the end of this chapter:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一些由粒子系统控制的粒子的屏幕截图，可能在本章结束时出现：
- en: '![Implementing a particle system effect](img/B12806_22_05.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![实现粒子系统效果](img/B12806_22_05.jpg)'
- en: Just for clarification, each of the colored squares is an instance of the `Particle`
    class, and all the `Particle` instances are controlled and held by the `ParticleSystem`
    class. In addition, the user will create multiple (hundreds) of `ParticleSystem`
    instances by drawing with their finger. The particle systems will appear as dots
    or blocks until the user taps the Pause button and they come to life. We will
    examine the code closely enough that you will be able to amend in code the size,
    color, speed, and quantities of `Particle` and `ParticleSystem` instances.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清，每个彩色方块都是`Particle`类的一个实例，所有`Particle`实例都由`ParticleSystem`类控制和持有。此外，用户将通过用手指绘制来创建多个（数百个）`ParticleSystem`实例。粒子系统将出现为点或块，直到用户点击暂停按钮并使其活动起来。我们将仔细检查代码，以便您能够在代码中修改`Particle`和`ParticleSystem`实例的大小、颜色、速度和数量。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is left as an exercise for the reader to add additional buttons to the screen
    to allow the user to change these properties as a feature of the app.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可以将额外的按钮添加到屏幕上，以允许用户更改这些属性作为应用程序的功能。
- en: We will start by coding the `Particle` class.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写`Particle`类的代码。
- en: Coding the Particle class
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写`Particle`类的代码
- en: 'Add the `import` statement, the member variables, the constructor, and the
    `init` block shown in the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`import`语句，成员变量，构造函数和以下代码中显示的`init`块：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have two properties—one for velocity and one for position. They are both
    `PointF` objects. `PointF` holds two `Float` values. The position of a particle
    is simple: it is just a horizontal and vertical value. The velocity is worth explaining
    a little more. Each of the two values in the `velocity` object `PointF` will be
    a speed, one horizontal and the other vertical. It is the combination of these
    two speeds that will create a direction.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个属性——一个用于速度，一个用于位置。它们都是`PointF`对象。`PointF`保存两个`Float`值。粒子的位置很简单：它只是一个水平和垂直值。速度值值得解释一下。`velocity`对象`PointF`中的两个值将是速度，一个是水平的，另一个是垂直的。这两个速度的组合将产生一个方向。
- en: 'Next, add the following `update` function; we will look at it in more detail
    in a moment:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加以下`update`函数；我们稍后将更详细地查看它：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each `Particle` instance's `update` function will be called for each frame of
    the app by the `ParticleSystem` object's `update` function, which, in turn, will
    be called by the `LiveDrawingView` class (again in the `update` function), which
    we will code later in the chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Particle`实例的`update`函数将由`ParticleSystem`对象的`update`函数在应用程序的每一帧中调用，而`ParticleSystem`对象的`update`函数将由`LiveDrawingView`类（再次在`update`函数中）调用，我们将在本章后面编写。
- en: Inside the `update` function, the horizontal and vertical values of `position`
    are updated using the corresponding values of `velocity`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`update`函数中，`position`的水平和垂直值将使用`velocity`的相应值进行更新。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we don't bother using the current frame rate in the update. You could
    amend this if you want to be certain that your particles will all fly at exactly
    the correct speed, but all the speeds are going to be random anyway. There is
    not much to gain from adding this extra calculation (for every particle). As we
    will soon see, however, the `ParticleSystem` class will need to take account of
    the current number of frames per second to measure how long it should run for.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在更新中没有使用当前的帧速率。如果您想确保您的粒子以确切的速度飞行，您可以修改这一点，但所有的速度都将是随机的。添加这个额外的计算并没有太多好处（对于每个粒子）。然而，正如我们很快会看到的，`ParticleSystem`类需要考虑每秒的帧数来测量它应该运行多长时间。
- en: Now we can move on to the `ParticleSysytem` class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续进行`ParticleSystem`类的学习。
- en: Coding the ParticleSystem class
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写ParticleSystem类
- en: 'The `ParticleSystem` class has a few more details than the `Particle` class,
    but it is still reasonably straightforward. Remember what we need to achieve with
    this class: hold, spawn, update, and draw a bunch (quite a big bunch) of `Particle`
    instances.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`ParticleSystem`类比`Particle`类有更多的细节，但仍然相当简单。记住我们需要用这个类来实现的功能：持有、生成、更新和绘制一堆（相当大的一堆）`Particle`实例。'
- en: 'Add the following constructor, properties, and import statements:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下构造函数、属性和导入语句：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We have four properties: first, a `Float` called `duration` that will be initialized
    to the number of seconds we want the effect to run for; the `ArrayList` instance
    called `particles`, holds `Particle` instances and will hold all the `Particle`
    objects we instantiate for this system.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有四个属性：首先是一个名为`duration`的`Float`，它将被初始化为我们希望效果运行的秒数；名为`particles`的`ArrayList`实例，它持有`Particle`实例，并将保存我们为该系统实例化的所有`Particle`对象。
- en: The `Random` instance called `random` is created because we need to generate
    so many random values that creating a new object each time would slow us down
    a bit.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建名为`random`的`Random`实例，因为我们需要生成如此多的随机值，每次创建一个新对象都会使我们的速度变慢一点。
- en: Finally, the `Boolean` called `isRunning` will track whether the particle system
    is currently being shown (updating and drawing).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，名为`isRunning`的`Boolean`将跟踪粒子系统当前是否正在显示（更新和绘制）。
- en: Now we can code the `initParticles` function. This function will be called each
    time we want a new `ParticleSystem`. Note that the one and only parameter is an
    `Int` called `numParticles`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写`initParticles`函数。每当我们想要一个新的`ParticleSystem`时，将调用此函数。请注意，唯一的参数是一个名为`numParticles`的`Int`。
- en: 'When we call `initParticles`, we can have some fun initializing crazy amounts
    of particles. Add the `initParticles` function as follows and then we will look
    more closely at the code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用`initParticles`时，我们可以有一些乐趣来初始化大量的粒子。添加以下`initParticles`函数，然后我们将更仔细地查看代码：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `initParticles` function consists of just one `for` loop that does all the
    work. The `for` loop runs from zero to `numParticles`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`initParticles`函数只包括一个`for`循环来完成所有工作。`for`循环从零到`numParticles`运行。'
- en: First, a random number between 0 and 359 is generated and stored in `Float angle`.
    Next, there is a little bit of math where we multiply `angle` by `3.14/180`. This
    turns the angle in degrees to radian-based measurements, which are required by
    the `Math` class that we will use in a moment.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先生成介于0和359之间的随机数，并将其存储在`Float angle`中。接下来，有一点数学运算，我们将`angle`乘以`3.14/180`。这将角度从度转换为弧度制的度量，这是`Math`类所需的度量单位，我们稍后将在其中使用。
- en: Then we generate another random number between 1 and 10 and assign the result
    to a `Float` variable called `speed`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们生成另一个介于1和10之间的随机数，并将结果分配给名为`speed`的`Float`变量。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that I have added comments to suggest different options for values in this
    part of the code. I do this in several places in the `ParticleSystem` class, and
    when we get to the end of the chapter, we will have some fun altering these values
    and see what effect this has on the drawing app.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我已经添加了注释，以建议代码中的不同值选项。我在`ParticleSystem`类的几个地方都这样做了，当我们到达章节的末尾时，我们将有一些乐趣改变这些值，并看看这对绘图应用程序的影响。
- en: Now that we have a random angle and speed, we can convert and combine them into
    a vector that can be used inside the `update` function in each frame.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个随机角度和速度，我们可以将它们转换并组合成一个向量，这个向量可以在每一帧的`update`函数中使用。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A vector is a value that determines both the direction and speed. Our vector
    is stored in the `direction` object until it is passed into the `Particle` constructor.
    Vectors can be of many dimensions. Ours consists of two dimensions, and therefore
    defines a heading between 0 and 359 degrees and a speed between 1 and 10\. You
    can read more about vectors, headings, sine and cosine on my website at [http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 向量是一个确定方向和速度的值。我们的向量存储在`direction`对象中，直到传递到`Particle`构造函数中。向量可以有许多维度。我们的向量由两个维度组成，因此定义了0到359度之间的方向和1到10之间的速度。您可以在我的网站上阅读更多关于向量、方向、正弦和余弦的内容：[http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/](http://gamecodeschool.com/essentials/calculating-heading-in-2d-games-using-trigonometric-functions-part-1/)。
- en: 'I have decided not to explain the single line of code that uses `Math.sin`
    and `Math.cos` to create a vector in full because the magic occurs partly in the
    following formulas:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定不解释使用`Math.sin`和`Math.cos`创建向量的单行代码，因为其中的魔法部分发生在以下公式中：
- en: Cosine of an angle x `speed`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角度x`速度`的余弦
- en: Sine of an angle x `speed`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角度x`速度`的正弦
- en: The rest of the magic takes place in the hidden calculations within the cosine
    and sine functions provided by the `Math` class. If you want to know their full
    details, then you can look at the previous tip.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的魔法发生在`Math`类提供的余弦和正弦函数的隐藏计算中。如果您想了解它们的全部细节，可以查看前面的提示。
- en: Finally, a new `Particle` is created and then added to the `particles ArrayList`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建一个新的`Particle`，然后将其添加到`particles ArrayList`中。
- en: 'Next, we will code the `update` function. Note that the `update` function needs
    the current frame rate as a parameter. Code the `update` function as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写`update`函数。请注意，`update`函数需要当前的帧速率作为参数。编写`update`函数如下：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first thing that happens inside the `update` function is that the elapsed
    time is taken off `duration`. Remember that `fps` means frames per second, so
    `1/fps` gives a value of a fraction of a second.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`update`函数内部的第一件事是从`duration`中减去经过的时间。请记住，`fps`表示每秒帧数，因此`1/fps`给出的是秒的一小部分值。'
- en: Next, there is a `for` loop, which calls the `update` function for every `Particle`
    instance in the `particles` `ArrayList`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个`for`循环，它为`particles`中的每个`Particle`实例调用`update`函数。
- en: Finally, the code checks whether the particle effect has run its course with
    `if(duration < 0)` and if it has then `isRunning` is set to `false`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码检查粒子效果是否已经完成，如果是，则将`isRunning`设置为`false`。
- en: Now we can code the `emitParticles` function, which will set each `Particle`
    instance running, and which is not to be confused with `initParticles`, which
    creates all the new particles and gives them their velocities. The `initParticles`
    function will be called once before the user gets to interact with the screen,
    whereas the `emitParticles` function will be called each time the effect needs
    to be started as the user draws on the screen.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写`emitParticles`函数，该函数将使每个`Particle`实例运行，不要与`initParticles`混淆，后者创建所有新粒子并赋予它们速度。`initParticles`函数将在用户开始与屏幕交互之前调用一次，而`emitParticles`函数将在每次效果需要启动时调用，用户在屏幕上绘制时。
- en: 'Add the `emitParticles` function using the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码添加`emitParticles`函数：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, note that a `PointF` where all the particles will start is passed in
    as a parameter. All the particles will start at the same position and then fan
    out every frame, based on their individual random velocities.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意将`PointF`作为参数传递，所有粒子将从同一位置开始，然后根据它们各自的随机速度在每一帧上扩散。
- en: The `isRunning` `Boolean` is set to `true` and `duration` is set to `30f`, so
    the effect will run for 30 seconds and the `for` loop will set the position of
    every particle to the starting coordinates.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`isRunning`布尔值设置为`true`，`duration`设置为`30f`，因此效果将持续30秒，`for`循环将将每个粒子的位置设置为起始坐标。'
- en: The final function for our `ParticleSysytem` is the `draw` function, which will
    reveal the effect in all its glory. The function receives a reference to `Canvas`
    and `Paint` so it can draw to the same `Canvas` instance that `LiveDrawingView`
    has just locked in its `draw` function.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`ParticleSysytem`的最终函数是`draw`函数，它将展示效果的全部荣耀。该函数接收对`Canvas`和`Paint`的引用，以便可以绘制到`LiveDrawingView`刚刚在其`draw`函数中锁定的相同`Canvas`实例上。
- en: 'Add the `draw` function as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 添加如下的`draw`函数：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, a `for` loop steps through each of the `Particle` instances
    in `particles`. Each `Particle`, in turn, is drawn using `drawRect` after the
    size and color of the rectangle are set.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`for`循环遍历`particles`中的每个`Particle`实例。然后使用`drawRect`绘制每个`Particle`。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note again how I have suggested different options for code changes so that we
    can have some fun when we have finished coding.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，我建议不同的代码更改选项，这样我们在完成编码后可以有些乐趣。
- en: We can now start to put the particle system to work.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始让粒子系统工作了。
- en: Spawning particle systems in the LiveDrawingView class
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在`LiveDrawingView`类中生成粒子系统
- en: 'Add an `ArrayList` instance full of systems and some more members to keep track
    of things. Add the highlighted code in the following code to the positions indicated
    by the existing comments:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个充满系统的`ArrayList`实例和一些其他成员来跟踪事物。在现有注释所指示的位置添加以下突出显示的代码：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can now keep track of up to 1,000 particle systems with 100 particles in
    each. Feel free to play with these numbers. On a modern device, you can run particles
    into the millions without any trouble, but on the emulator, it will begin to struggle
    with just a few hundred thousand.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以跟踪多达1,000个每个系统中有100个粒子的粒子系统。随意调整这些数字。在现代设备上，您可以运行数百万个粒子而不会遇到任何问题，但在模拟器上，当粒子数量达到几十万个时，它将开始出现问题。
- en: 'Initialize the systems in the `init` block by adding the following highlighted
    code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下突出显示的代码在`init`块中初始化系统：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The code loops through the `ArrayList`, calling the constructor followed by
    `initParticles` on each of the `ParticleSystem` instances.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 代码循环遍历`ArrayList`，对每个`ParticleSystem`实例调用构造函数，然后调用`initParticles`。
- en: 'Now we can update the systems on each frame of the loop by adding the highlighted
    code to the `update` function:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过将突出显示的代码添加到`update`函数中，在循环的每一帧中更新系统：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous code loops through each of the `ParticleSystem` instances, first
    checking whether they are active and then calling the `update` function and passing
    in the current frames per second.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码循环遍历每个`ParticleSystem`实例，首先检查它们是否活动，然后调用`update`函数并传入当前的每秒帧数。
- en: 'Now we can draw the systems in each frame of the loop by adding the highlighted
    code in the following snippet to the `draw` function:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过在`draw`函数中添加以下片段中的突出显示代码来在循环的每一帧中绘制系统：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The previous code loops through `particleSystems`, calling the `draw` function
    on each. Of course, we haven't actually spawned any instances yet; for that, we
    will need to learn how to respond to screen interactions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码循环遍历`particleSystems`，对每个调用`draw`函数。当然，我们实际上还没有生成任何实例；为此，我们需要学习如何响应屏幕交互。
- en: Handling touches
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理触摸
- en: 'To get started with screen interaction, add the `OnTouchEvent` function to
    the `LiveDrawingView` class as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始屏幕交互，将`OnTouchEvent`函数添加到`LiveDrawingView`类中，如下所示：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is an overridden function, and it is called by Android every time the user
    interacts with the screen. Look at the one and only parameter of `onTouchEvent`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个被覆盖的函数，并且每当用户与屏幕交互时，Android都会调用它。看看`onTouchEvent`的唯一参数。
- en: It turns out that `motionEvent` has a whole bunch of data tucked away inside
    it, and this data contains the details of the touch that just occurred. The operating
    system sent it to us because it knows we will probably need some of it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，`motionEvent`中隐藏了大量数据，这些数据包含了刚刚发生的触摸的详细信息。操作系统将其发送给我们，因为它知道我们可能需要其中的一些数据。
- en: Note that I said *some of it*. The `MotionEvent` class is quite extensive; it
    contains within it dozens of functions and properties.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我说的是*其中一部分*。`MotionEvent`类非常庞大；它包含了几十个函数和属性。
- en: For now, all we need to know is that the screen responds at the precise moment
    that the player's finger moves, touches the screen, or is removed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只需要知道屏幕会在玩家的手指移动、触摸屏幕或移开手指的精确时刻做出响应。
- en: 'Some of the variables and functions contained within `motionEvent` that we
    will use include the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`motionEvent`中包含的一些变量和函数，包括以下内容：
- en: The `action` property, which, unsurprisingly, holds the action that was performed.
    Unfortunately, it supplies this information in a slightly encoded format, which
    explains the need for some of these other variables.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`属性，不出所料，保存了执行的动作。不幸的是，它以稍微编码的格式提供了这些信息，这就解释了其他一些变量的必要性。'
- en: The `ACTION_MASK` variable, which provides a value known as a mask, which, with
    the help of a little bit more Kotlin trickery, can be used to filter the data
    from `action`.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACTION_MASK`变量提供了一个称为掩码的值，再加上一点Kotlin技巧，可以用来过滤`action`中的数据。'
- en: The `ACTION_UP` variable, which we can use to see whether the action performed
    (such as removing a finger) is the one we want to respond to.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACTION_UP`变量，我们可以用它来判断执行的动作（例如移开手指）是否是我们想要响应的动作。'
- en: The `ACTION_DOWN` variable, which we can use to see whether the action performed
    is the one we want to respond to.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACTION_DOWN`变量，我们可以用它来判断执行的动作是否是我们想要响应的动作。'
- en: The `ACTION_MOVE` variable, which we can use to see whether the action performed
    is a move/drag action.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ACTION_MOVE`变量，我们可以用它来判断执行的动作是否是移动/拖动动作。'
- en: The `x` property holds a horizontal floating-point coordinate where the event
    happened.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`属性保存事件发生的水平浮点坐标。'
- en: The `y` property holds a vertical floating-point coordinate where the event
    happened.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`属性保存事件发生的垂直浮点坐标。'
- en: As a specific example, say we need to filter the data in `action` using `ACTION_MASK`
    and see whether the result is the same as `ACTION_UP`. If it is, then we know
    that the user has just removed their finger from the screen, perhaps because they
    just tapped a button. Once we are sure that the event is of the correct type,
    we will need to find out where it happened using `x` and `y`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 举个具体的例子，假设我们需要使用`ACTION_MASK`过滤`action`中的数据，并查看结果是否与`ACTION_UP`相同。如果是，那么我们知道用户刚刚从屏幕上移开了手指，也许是因为他们刚刚点击了一个按钮。一旦我们确定事件是正确类型的，我们就需要使用`x`和`y`找出事件发生的位置。
- en: There is one final complication. The Kotlin trickery I referred to is the `&`
    bitwise operator, not to be confused with the logical `&&` operator we have been
    using in conjunction with the `if` keyword.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个最后的复杂情况。我提到的Kotlin技巧是`&`位运算符，不要与我们一直与`if`关键字一起使用的逻辑`&&`运算符混淆。
- en: The `&` bitwise operator checks to see whether each corresponding part in two
    values is true. This is the filter that is required when using `ACTION_MASK` with
    `action`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`&`位运算符用于检查两个值中的每个对应部分是否为真。这是在使用`ACTION_MASK`和`action`时所需的过滤器。'
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Sanity check: I was hesitant to go into detail about `MotionEvent` and bitwise
    operators. It is possible to complete this entire book and even make a professional-quality
    interactive app without ever needing to fully understand them. If you know that
    the line of code we will write in the next section determines the event type the
    player triggers, then that is all you need to know. I just thought that a discerning
    reader such as your would like to know the ins and outs of how the system works.
    In summary, if you understand bitwise operators, then great; you are good to go.
    If you don''t, it doesn''t matter; you are still good to go. If you are curious
    about bitwise operators (there are quite a few), you can read more about them
    at [https://en.wikipedia.org/wiki/Bitwise_operation](https://en.wikipedia.org/wiki/Bitwise_operation).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 理智检查：我不愿详细介绍`MotionEvent`和位运算。完全可以完成整本书的编写，甚至制作出专业质量的交互式应用，而无需完全理解它们。如果你知道我们将在下一节中编写的代码行确定了玩家触发的事件类型，那么这就是你需要知道的全部。我只是认为像你这样有洞察力的读者可能想了解系统的方方面面。总之，如果你理解位运算，那太好了；你可以继续。如果你不理解，也没关系；你仍然可以继续。如果你对位运算感兴趣（有很多），你可以在[https://en.wikipedia.org/wiki/Bitwise_operation](https://en.wikipedia.org/wiki/Bitwise_operation)上阅读更多关于它们的内容。
- en: Now we can code the `onTouchEvent` function and see all the `MotionEvent` stuff
    in action.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写`onTouchEvent`函数，并查看所有`MotionEvent`的相关内容。
- en: Coding the onTouchEvent function
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写`onTouchEvent`函数
- en: 'Respond to the user moving their finger on the screen by adding the highlighted
    code in the following snippet inside the `onTouchEvent` function to the code we
    already have:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`onTouchEvent`函数中添加以下片段中的突出显示代码来响应用户在屏幕上移动手指：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `if` condition checks to see whether the type of event was the user moving
    their finger. If it was, then the next particle system in `particleSystems` has
    its `emitParticles` function called. Afterward, the `nextSystem` variable is incremented
    and a test is performed to see whether it was the last particle system. If it
    was, then `nextSystem` is set to zero, ready to start reusing existing particle
    systems the next time one is required.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`条件检查是否事件类型是用户移动手指。如果是，则调用`particleSystems`中的下一个粒子系统的`emitParticles`函数。然后，增加`nextSystem`变量，并进行测试，看它是否是最后一个粒子系统。如果是，则将`nextSystem`设置为零，准备在下次需要时重新使用现有的粒子系统。'
- en: 'We can move on to making the system respond to the user pressing one of the
    buttons by adding the highlighted code in the following snippet right after the
    previous code we just discussed and before the `return` statement we have already
    coded:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续让系统响应用户按下按钮，通过在下面的片段中添加高亮显示的代码，紧接着我们刚刚讨论过的代码之后，在我们已经编码的`return`语句之前：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The condition of the `if` statement checks to see whether the user has tapped
    the screen. If they have, then the `contains` function of the `RectF` class is
    used in conjunction with `x` and `y` to see whether that press was inside one
    of our custom buttons. If the reset button was pressed, then all the particles
    will disappear when `nextSystem` is set to zero. If the paused button is pressed,
    then the value of `paused` is toggled causing the `update` function to stop/start
    being called inside the thread.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句的条件检查是否用户已经点击了屏幕。如果是，则`RectF`类的`contains`函数与`x`和`y`一起使用，以查看该按压是否在我们的自定义按钮之一内。如果按下了重置按钮，则当`nextSystem`设置为零时，所有粒子将消失。如果按下了暂停按钮，则切换`paused`的值，导致在线程内停止/开始调用`update`函数。'
- en: Finishing the HUD
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成HUD
- en: 'Edit the code in the `printDebuggingText` function to appear as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`printDebuggingText`函数中的代码，使其显示如下：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code will just print some interesting statistics to the screen
    to tell us how many particles and systems are currently being drawn.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将在屏幕上打印一些有趣的统计数据，告诉我们当前正在绘制多少粒子和系统。
- en: Running the app
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: Now we get to see the live drawing app in action and play with some of the different
    options we left commented out in the code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到实时绘图应用程序的运行情况，并尝试一些我们在代码中留下注释的不同选项。
- en: 'Run the app with small, round, colorful, fast particles. The following screenshot
    shows a screen that has been tapped in several places:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以小、圆、多彩、快速的粒子运行应用程序。下面的屏幕截图显示了屏幕上已经被点击了几次：
- en: '![Running the app](img/B12806_22_01.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B12806_22_01.jpg)'
- en: 'Then resume the drawing, as shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后恢复绘图，如下面的屏幕截图所示：
- en: '![Running the app](img/B12806_22_03.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B12806_22_03.jpg)'
- en: 'Make a kid-style drawing with particles that are small, white, square, slow,
    and of a long duration, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个儿童风格的绘图，粒子小、白色、方形、缓慢、持续时间长，如下面的屏幕截图所示：
- en: '![Running the app](img/B12806_22_02.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B12806_22_02.jpg)'
- en: 'Then resume the drawing and wait for 20 seconds while the drawing comes to
    life and changes:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后恢复绘图，并等待20秒，让绘图活跃起来并发生变化：
- en: '![Running the app](img/B12806_22_04.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B12806_22_04.jpg)'
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how we can add thousands of self-contained entities
    to our real-time system. The entities were controlled by the `ParticleSystem`
    class, which, in turn, interacted with, and was controlled by, the game loop.
    As the game loop was running in a thread, we learned that the user can still interact
    seamlessly with the screen and the operating system will send us the details of
    these interactions via the `onTouchEvent` function.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将成千上万个独立的实体添加到我们的实时系统中。这些实体由`ParticleSystem`类控制，而`ParticleSystem`类又与游戏循环进行交互和控制。由于游戏循环在一个线程中运行，我们了解到用户仍然可以无缝地与屏幕进行交互，操作系统将通过`onTouchEvent`函数向我们发送这些交互的详细信息。
- en: In the next chapter, our apps will finally get a bit noisier when we explore
    how to play sound effects.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，当我们探索如何播放音效时，我们的应用程序最终会变得有些喧闹。
