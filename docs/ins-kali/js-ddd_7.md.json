["```js\nvar ns = [1,2,3,4]\nfor(var i = ns.length-1, si = ns[i], s = 0; si = ns[i--];) s += si\nconsole.log(\"sum for \" + ns + \" is \" + s)\n```", "```js\nvar numbers = [1,2,3,4]\nsum = numbers.reduce(function (a, b) { return a + b }, 0)\nconsole.log(\"sum for \" + numbers + \" is \" + sum)\n```", "```js\nvar SATURDAY = 6\nvar SUNDAY = 7\n\nvar days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n\nvar transportTime = 11\n\nvar arrivalDay = days.filter(function (e) {\n  if (e % SATURDAY === 0) return false\n  if (e % SUNDAY === 0) return false\n  return true\n})[transportTime]\n```", "```js\nvar thing = {\n  state: 1,\n  update: function() {\n    this.state++\n  }\n}\n\nthing.update()\nthing.update()\nthing.state         // => 3\n```", "```js\nvar otherThing = Object.create(thing, {\n  more: { value: \"data\" }\n})\n\notherThing.update()\nthing.update()\n\nthing.state           // => 2\notherThing.state       // => 2\notherThing.more        // => data\nthing.more             // => undefined\n```", "```js\nvar counter = {\n  state: 1,\n  update: function() {\n    this.state++\n  }\n}\n\nvar jumpingCounter = Object.create(counter, {\n  update: { value: function() { this.state += 10 } }\n})\n\njumpingCounter.update()\njumpingCounter.state // => 11\n```", "```js\nvar Orc = {\n  init: function (name, weapon) {\n    this.name = name\n    this.weapon = weapon\n    return this\n  },\n\n  get isArmed () { return !!this.weapon },\n\n  attack: function (opponent) {\n    console.log(this.name + \" strikes \"\n        + opponent.name + \" with \" + this.weapon + \".\")\n  }\n}\n```", "```js\nvar Fight = {\n  init: function (orc, attacker) {\n    this.orc = orc\n    this.attacker = attacker\n    return this\n  },\n\n  round: function () {\n     if(this.orc.isArmed) {\n       this.orc.attack(this.attacker)\n     } else {\n       this.attacker.attack(this.orc)\n     }\n   }\n}\n```", "```js\nvar agronak = Object.create(Orc).init(\"Agronak\", \"sword\")\nvar traugh = Object.create(Orc).init(\"Traugh\")\n\nvar fight = Object.create(Fight).init(agronak, traugh)\nfight.round() // => Agronak strikes Traugh with sword.\n```", "```js\nvar util = require(\"util\")\n\nvar Fight = {\n  init: function (orc, attacker, audit) {\n    this.audit = audit\n    if (this.audit) {\n      console.log(\"Called init on \" + util.inspect(this) + \" with \" + util.inspect(arguments))\n    }\n    this.orc = orc\n    this.attacker = attacker\n    return this\n  },\n\n  round: function () {\n    if (this.audit) {\n      console.log(\"Called round on \" + util.inspect(this) + \" with \" + util.inspect(arguments))\n    }\n     if(this.orc.isArmed) {\n       this.orc.attack(this.attacker)\n     } else {\n       this.attacker.attack(this.orc)\n     }\n   }\n}\n```", "```js\nvar util = require(\"util\")\n\nvar asLoggable = function () {\n  Object.keys(this).forEach(function (key) {\n    if (this.hasOwnProperty(key) && typeof this[key] === ' function' ) {\n      var that = this\n      var fn = this[key]\n      this[key] = function () {\n        console.log(\"Called \" + key + \" on \" + util.inspect(that) + \" with \" + util.inspect(arguments))\n        return fn.apply(that, arguments)\n      }\n    }\n  }, this)\n  return this\n}\n```", "```js\nvar LoggableFight = asLoggable.call(Fight)\nvar fight = Object.create(LoggableFight).init(agronak, traugh)\nfight.round()\n```", "```js\nCalled init on { init:\u2026, round:\u2026} with { \u2026 }\nCalled round on {\u2026, orc: {\u2026}, attacker: {\u2026} } with {}\nAgronak strikes Traugh with sword.\n```", "```js\nfunction Orc(name) {\n  this.name = name\n}\n\nOrc.prototype.introduce = function () {\n  console.log(\"I AM \" + this.name + \"!\")\n}\n```", "```js\nvar $hiddenBox = $( \"#banner-message\" );\n$( \"#button-container button\" ).on( \"click\", function( event ) {\n  $hiddenBox.show();\n});\n```", "```js\nprisonerTransfer = function (prisoner, otherDungeon, ourDungeon, notifier, callback) {\n  var keeper = ourDungeon.getOrc()\n  var carriage = ourDungeon.getCarriage()\n  var transfer = prepareTransfer(carriage, keeper, prisoner)\n  if (transfer) {\n    notifier.message(otherDungeon, transfer)\n    callback()\n  } else {\n    callback(new Error(\"Transfer initiation failed.\"))\n  }\n}\n```", "```js\nvar numbers = [1,2,3,4,5,6]\n\nvar result = numbers.map(function(number) {\n  return (number * 2)\n}).filter(function(e) {\n  return (e % 2) === 0\n}).reduce(function(acc, val) {\n  return acc + val\n})\n\nresult // => a number, like 40\n```", "```js\nvar EventEmitter = require(\"events\").EventEmitter\nvar util = require(\"util\")\n\nfunction House() {\n  EventEmitter.call(this)\n\n  var that = this\n\n  this.pleaseOpen = function() {\n    // use the EventEmitter to send the ring event\n    that.emit(\"ring\")\n  }\n}\n\nutil.inherits(House, EventEmitter)\n\nvar me = {\n  onRing: function(ev) {\n            console.log(\"opening door\")\n          }\n}\n\nvar myHouse = new House()\n// subscribe to the ring event, and dispatch it\nmyHouse.on(\"ring\", me.onRing)\n\nmyHouse.pleaseOpen()\n```"]