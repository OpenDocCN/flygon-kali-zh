["```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\nnamespace CH07_Logon\n{\n    internal static class Program\n    {\n        private static void Main(string[] args)\n        {\n            DoLogin(\"Welcome to the test platform\");\n        }\n    }\n}\n```", "```cs\nprivate static void DoLogin(string message)\n{\n    Console.WriteLine(\"----------------------------\");\n    Console.WriteLine(message);\n    Console.WriteLine(\"----------------------------\");\n    Console.Write(\"Enter your username: \");\n    var usr = Console.ReadLine();\n    Console.Write(\"Enter your password: \");\n    var pwd = ReadPassword();\n    ValidateUser(usr, pwd);\n}\n```", "```cs\npublic static string ReadPassword()\n{\n    return ReadPassword('*');\n}\n```", "```cs\n        public static string ReadPassword(char mask)\n        {\n            const int enter = 13, backspace = 8, controlBackspace = 127;\n            int[] filtered = { 0, 27, 9, 10, 32 };\n            var pass = new Stack<char>();\n            char chr = (char)0;\n            while ((chr = Console.ReadKey(true).KeyChar) != enter)\n            {\n                if (chr == backspace)\n                {\n                    if (pass.Count > 0)\n                    {\n                        Console.Write(\"\\b \\b\");\n                        pass.Pop();\n                    }\n                }\n                else if (chr == controlBackspace)\n                {\n                    while (pass.Count > 0)\n                    {\n                        Console.Write(\"\\b \\b\");\n                        pass.Pop();\n                    }\n                }\n                else if (filtered.Count(x => chr == x) <= 0)\n                {\n                    pass.Push((char)chr);\n                    Console.Write(mask);\n                }\n            }\n            Console.WriteLine();\n            return new string(pass.Reverse().ToArray());\n        }\n```", "```cs\nprivate static void ValidateUser(string usr, string pwd)\n{\n    if (usr.Equals(\"admin\") && pwd.Equals(\"letmein\"))\n    {\n        var process = new Process();\n        process.StartInfo.FileName = @\"..\\..\\..\\CH07_Admin\\bin\\Debug\\CH07_Admin.exe\";\n        process.StartInfo.Arguments = \"admin\";\n        process.Start();\n    }\n    else if (usr.Equals(\"student\") && pwd.Equals(\"letmein\"))\n    {\n        var process = new Process();\n        process.StartInfo.FileName = @\"..\\..\\..\\CH07_Test\\bin\\Debug\\CH07_Test.exe\";\n        process.StartInfo.Arguments = \"test\";\n        process.Start();\n    }\n    else\n    {\n        Console.Clear();\n        DoLogin(\"Invalid username or password\");\n    }\n}\n```", "```cs\nprivate static void Main(string[] args)\n{\n    if ((args.Count() > 0) && (args[0].Equals(\"admin\")))\n    {\n        DisplayMainScreen();\n    }\n    else\n    {\n        DisplayMainScreenError();\n    }\n}\n```", "```cs\nprivate static void DisplayMainScreen()\n{\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"Test Platform Administrator Console\");\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"Press any key to exit\");\n    Console.ReadKey();\n    Process.Start(@\"..\\..\\..\\CH07_Logon\\bin\\Debug\\CH07_Logon.exe\");\n}\n```", "```cs\nprivate static void DisplayMainScreenError()\n{\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"Test Platform Administrator Console\");\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"You must login to use the admin module.\");\n    Console.WriteLine(\"Press any key to exit\");\n    Console.ReadKey();\n    Process.Start(@\"..\\..\\..\\CH07_Logon\\bin\\Debug\\CH07_Logon.exe\");\n}\n```", "```cs\n private static void Main(string[] args)\n {\n     if ((args.Count() > 0) && (args[0].Equals(\"test\")))\n     {\n         DisplayMainScreen();\n     }\n     else\n     {\n         DisplayMainScreenError();\n     }\n}\n```", "```cs\nprivate static void DisplayMainScreen()\n{\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"Test Platform Student Console\");\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"Press any key to exit\");\n    Console.ReadKey();\n    Process.Start(@\"..\\..\\..\\CH07_Logon\\bin\\Debug\\CH07_Logon.exe\");\n}\n```", "```cs\nprivate static void DisplayMainScreenError()\n{\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"Test Platform Student Console\");\n    Console.WriteLine(\"------------------------------------\");\n    Console.WriteLine(\"You must login to use the student module.\");\n    Console.WriteLine(\"Press any key to exit\");\n    Console.ReadKey();\n    Process.Start(@\"..\\..\\..\\CH07_Logon\\bin\\Debug\\CH07_Logon.exe\");\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <startup> \n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.8\" />\n  </startup>\n  <connectionStrings>\n    <clear />\n    <add name=\"SqlServer\"\n         connectionString=\"Data Source=SqlInstanceName;Initial Catalog=DbName;Integrated Security=True\"\n         providerName=\"System.Data.SqlClient\"\n    />\n    <add name=\"Oracle\"\n         connectionString=\"Data Source=OracleInstance;User Id=usr;Password=pwd;Integrated Security=no;\"\n         providerName=\"System.Data.OracleClient\"\n    />\n    <add name=\"MySQL\"\n         connectionString=\"Server=MySqlInstance;Database=MySqlDb;Uid=usr;Pwd=pwd;\"\n         providerName=\"System.Data.MySqlClient\"\n    />\n </connectionStrings>\n</configuration>\n```", "```cs\nnamespace CH07_Factories\n{\n    public abstract class Factory\n    {\n        public abstract IDatabaseConnection FactoryMethod();\n    }\n}\n```", "```cs\nnamespace CH07_Factories\n{\n    public interface IDatabaseConnection\n    {\n        string ConnectionString { get; }\n        void OpenConnection();\n        void CloseConnection();\n    }\n}\n```", "```cs\npublic class SqlServerDbConnection : IDatabaseConnection\n{\n    public string ConnectionString { get; }\n    public SqlServerDbConnection(string connectionString)\n    {\n        ConnectionString = connectionString;\n    }\n    public void CloseConnection()\n    {\n        Console.WriteLine(\"SQL Server Database Connection Closed.\");\n    }\n    public void OpenConnection()\n    {\n        Console.WriteLine(\"SQL Server Database Connection Opened.\");\n    }\n}\n```", "```cs\npublic class OracleDbConnection : IDatabaseConnection\n{\n    public string ConnectionString { get; }\n    public OracleDbConnection(string connectionString)\n    {\n        ConnectionString = connectionString;\n    }\n    public void CloseConnection()\n    {\n        Console.WriteLine(\"Oracle Database Connection Closed.\");\n    }\n    public void OpenConnection()\n    {\n        Console.WriteLine(\"Oracle Database Connection Closed.\");\n    }\n}\n```", "```cs\npublic class MySqlDbConnection : IDatabaseConnection\n{\n    public string ConnectionString { get; }\n    public MySqlDbConnection(string connectionString)\n    {\n        ConnectionString = connectionString;\n    }\n    public void CloseConnection()\n    {\n        Console.WriteLine(\"MySQL Database Connection Closed.\");\n    }\n    public void OpenConnection()\n    {\n        Console.WriteLine(\"MySQL Database Connection Closed.\");\n    }\n}\n```", "```cs\nusing System.Configuration;\n\nnamespace CH07_Factories\n{\n    public class ConcreteFactory : Factory\n    {\n        private static ConnectionStringSettings _connectionStringSettings;\n\n        public ConcreteFactory(string connectionStringName)\n        {\n            GetDbConnectionSettings(connectionStringName);\n        }\n\n        private static ConnectionStringSettings GetDbConnectionSettings(string connectionStringName)\n        {\n            return ConfigurationManager.ConnectionStrings[connectionStringName];\n        }\n    }\n}\n```", "```cs\npublic override IDatabaseConnection FactoryMethod()\n{\n    var providerName = _connectionStringSettings.ProviderName;\n    var connectionString = _connectionStringSettings.ConnectionString;\n    switch (providerName)\n    {\n        case \"System.Data.SqlClient\":\n            return new SqlServerDbConnection(connectionString);\n        case \"System.Data.OracleClient\":\n            return new OracleDbConnection(connectionString);\n        case \"System.Data.MySqlClient\":\n            return new MySqlDbConnection(connectionString);\n        default:\n            return null;\n    }\n}\n```", "```cs\n[Test]\npublic void IsSqlServerDbConnection()\n{\n    var factory = new ConcreteFactory(\"SqlServer\");\n    var connection = factory.FactoryMethod();\n    Assert.IsInstanceOf<SqlServerDbConnection>(connection);\n}\n```", "```cs\n[Test]\npublic void IsOracleDbConnection()\n{\n    var factory = new ConcreteFactory(\"Oracle\");\n    var connection = factory.FactoryMethod();\n    Assert.IsInstanceOf<OracleDbConnection>(connection);\n}\n```", "```cs\n[Test]\npublic void IsMySqlDbConnection()\n{\n    var factory = new ConcreteFactory(\"MySQL\");\n    var connection = factory.FactoryMethod();\n    Assert.IsInstanceOf<MySqlDbConnection>(connection);\n}\n```", "```cs\npublic ConcreteFactory(string connectionStringName)\n{\n    _connectionStringSettings = GetDbConnectionSettings(connectionStringName);\n}\n```", "```cs\nvar filepath = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None).FilePath;\n```", "```cs\nxcopy \"$(ProjectDir)App.config\" \"$(ProjectDir)bin\\Debug\\netcoreapp3.1\\\" /Y /I /R\n```", "```cs\npublic static readonly IDictionary<Type, Type> Types = new Dictionary<Type, Type>();\npublic static readonly IDictionary<Type, object> Instances = new Dictionary<Type, object>();\n\npublic static void Register<TContract, TImplementation>()\n{\n    Types[typeof(TContract)] = typeof(TImplementation);\n}\n\npublic static void Register<TContract, TImplementation>(TImplementation instance)\n{\n    Instances[typeof(TContract)] = instance;\n}\n```", "```cs\npublic static T Resolve<T>()\n{\n    return (T)Resolve(typeof(T));\n}\n```", "```cs\npublic static object Resolve(Type contract)\n{\n    if (Instances.ContainsKey(contract))\n    {\n        return Instances[contract];\n    }\n    else\n    {\n        Type implementation = Types[contract];\n        ConstructorInfo constructor = implementation.GetConstructors()[0];\n        ParameterInfo[] constructorParameters = constructor.GetParameters();\n        if (constructorParameters.Length == 0)\n        {\n            return Activator.CreateInstance(implementation);\n        }\n        List<object> parameters = new List<object>(constructorParameters.Length);\n        foreach (ParameterInfo parameterInfo in constructorParameters)\n        {\n            parameters.Add(Resolve(parameterInfo.ParameterType));\n        }\n        return constructor.Invoke(parameters.ToArray());\n    }\n}\n```", "```cs\npublic interface IService\n{\n    string WhoAreYou();\n}\n```", "```cs\npublic class ServiceOne : IService\n{\n    public string WhoAreYou()\n    {\n        return \"CH07_DependencyInjection.ServiceOne()\";\n    }\n}\n```", "```cs\npublic class ServiceTwo : IService\n{\n    public string WhoAreYou()\n    {\n        return \"CH07_DependencyInjection.ServiceTwo()\";\n    }\n}\n```", "```cs\nprivate IService _service;\n\npublic Client() { }\n```", "```cs\npublic Client (IService service) \n{\n    _service = service;\n}\n```", "```cs\npublic IService Service\n{\n    get { return _service; }\n    set\n    {\n        _service = value;\n    }\n}\n```", "```cs\npublic string GetServiceName(IService service)\n{\n    return service.WhoAreYou();\n}\n```", "```cs\n[TestInitialize]\npublic void Setup()\n{\n    DependencyContainer.Register<ServiceOne, ServiceOne>();\n    DependencyContainer.Register<ServiceTwo, ServiceTwo>();\n}\n```", "```cs\n[TestMethod]\npublic void DependencyContainerTestServiceOne()\n{\n    var serviceOne = DependencyContainer.Resolve<ServiceOne>();\n    Assert.IsInstanceOfType(serviceOne, typeof(ServiceOne));\n}\n\n[TestMethod]\npublic void DependencyContainerTestServiceTwo()\n{\n    var serviceTwo = DependencyContainer.Resolve<ServiceTwo>();\n    Assert.IsInstanceOfType(serviceTwo, typeof(ServiceTwo));\n}\n```", "```cs\n[TestMethod]\npublic void ConstructorInjectionTestServiceOne()\n{\n    var serviceOne = DependencyContainer.Resolve<ServiceOne>();\n    var client = new Client(serviceOne);\n    Assert.IsInstanceOfType(client.Service, typeof(ServiceOne));\n}\n\n[TestMethod]\npublic void ConstructorInjectionTestServiceTwo()\n{\n    var serviceTwo = DependencyContainer.Resolve<ServiceTwo>();\n    var client = new Client(serviceTwo);\n    Assert.IsInstanceOfType(client.Service, typeof(ServiceTwo));\n}\n```", "```cs\n[TestMethod]\npublic void PropertyInjectTestServiceOne()\n{\n    var serviceOne = DependencyContainer.Resolve<ServiceOne>();\n    var client = new Client();\n    client.Service = serviceOne;\n    Assert.IsInstanceOfType(client.Service, typeof(ServiceOne));\n}\n\n[TestMethod]\npublic void PropertyInjectTestServiceTwo()\n{\n    var serviceTwo = DependencyContainer.Resolve<ServiceTwo>();\n    var client = new Client();\n    client.Service = serviceTwo;\n    Assert.IsInstanceOfType(client.Service, typeof(ServiceOne));\n}\n```", "```cs\n[TestMethod]\npublic void MethodInjectionTestServiceOne()\n{\n    var serviceOne = DependencyContainer.Resolve<ServiceOne>();\n    var client = new Client();\n    Assert.AreEqual(client.GetServiceName(serviceOne), \"CH07_DependencyInjection.ServiceOne()\");\n}\n\n[TestMethod]\npublic void MethodInjectionTestServiceTwo()\n{\n    var serviceTwo = DependencyContainer.Resolve<ServiceTwo>();\n    var client = new Client();\n    Assert.AreEqual(client.GetServiceName(serviceTwo), \"CH07_DependencyInjection.ServiceTwo()\");\n}\n```"]