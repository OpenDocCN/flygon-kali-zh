- en: Chapter 1. JavaScript Primer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 JavaScript入门
- en: It is always difficult to pen the first few words, especially on a subject like
    JavaScript. This difficulty arises primarily because so many things have been
    said about this language. JavaScript has been the *Language of the Web*—lingua
    franca, if you will, since the earliest days of the Netscape Navigator. JavaScript
    went from a tool of the amateur to the weapon of the connoisseur in a shockingly
    short period of time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在像JavaScript这样的主题上写下最初的几个字总是困难的。这主要是因为关于这种语言已经说了很多。JavaScript一直是*网络语言*——早期的网景Navigator以来，它就是通用语言。JavaScript在极短的时间内从业余者的工具变成了专家的武器。
- en: JavaScript is the most popular language on the web and open source ecosystem.
    [http://githut.info/](http://githut.info/) charts the number of active repositories
    and overall popularity of the language on GitHub for the last few years. JavaScript's
    popularity and importance can be attributed to its association with the browser.
    Google's V8 and Mozilla's SpiderMonkey are extremely optimized JavaScript engines
    that power Google Chrome and Mozilla Firefox browsers, respectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是网络和开源生态系统中最流行的语言。[http://githut.info/](http://githut.info/) 统计了过去几年GitHub上活跃存储库的数量和语言的整体受欢迎程度。JavaScript的受欢迎程度和重要性可以归因于它与浏览器的关联。谷歌的V8和Mozilla的SpiderMonkey是极其优化的JavaScript引擎，分别驱动着谷歌Chrome和Mozilla
    Firefox浏览器。
- en: Although web browsers are the most widely used platforms for JavaScript, modern
    databases such as MongoDB and CouchDB use JavaScript as their scripting and query
    language. JavaScript has become an important platform outside browsers as well.
    Projects such as **Node.js** and **io.js** provide powerful platforms to develop
    scalable server environments using JavaScript. Several interesting projects are
    pushing the language capabilities to its limits, for example, **Emscripten** ([http://kripken.github.io/emscripten-site/](http://kripken.github.io/emscripten-site/))
    is a **Low-Level Virtual Machine** (**LLVM**)-based project that compiles C and
    C++ into highly optimizable JavaScript in an **asm.js** format. This allows you
    to run C and C++ on the web at near native speed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管网络浏览器是JavaScript最广泛使用的平台，现代数据库如MongoDB和CouchDB也使用JavaScript作为它们的脚本和查询语言。JavaScript在浏览器之外也成为一个重要的平台。像**Node.js**和**io.js**这样的项目提供了强大的平台，使用JavaScript开发可扩展的服务器环境。一些有趣的项目正在将语言的能力推向极限，例如**Emscripten**（[http://kripken.github.io/emscripten-site/](http://kripken.github.io/emscripten-site/)）是一个基于**LLVM**的项目，将C和C++编译成高度可优化的**asm.js**格式的JavaScript。这使得你可以在网络上以接近本地速度运行C和C++。
- en: JavaScript is built around solid foundations regarding, for example, functions,
    dynamic objects, loose typing, prototypal inheritance, and a powerful object literal
    notation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript建立在关于函数、动态对象、松散类型、原型继承和强大的对象字面量表示等方面的坚实基础之上。
- en: While JavaScript is built on sound design principles, unfortunately, the language
    had to evolve along with the browser. Web browsers are notorious in the way they
    support various features and standards. JavaScript tried to accommodate all the
    whims of the browsers and ended up making some very bad design decisions. These
    bad parts (the term made famous by Douglas Crockford) overshadowed the good parts
    of the language for most people. Programmers wrote bad code, other programmers
    had nightmares trying to debug that bad code, and the language eventually got
    a bad reputation. Unfortunately, JavaScript is one of the most misunderstood programming
    languages ([http://javascript.crockford.com/javascript.html](http://javascript.crockford.com/javascript.html)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript建立在良好的设计原则之上，不幸的是，这种语言不得不随着浏览器的发展而发展。网络浏览器在它们支持各种功能和标准的方式上臭名昭著。JavaScript试图适应浏览器的一切变化，结果做出了一些非常糟糕的设计决定。这些糟糕的部分（由道格拉斯·克罗克福德所著名的术语）掩盖了大多数人对这种语言的好印象。程序员写了糟糕的代码，其他程序员在试图调试这些糟糕的代码时做噩梦，这使得这种语言最终声名狼藉。不幸的是，JavaScript是最被误解的编程语言之一（[http://javascript.crockford.com/javascript.html](http://javascript.crockford.com/javascript.html)）。
- en: Another criticism leveled at JavaScript is that it lets you get things done
    without you being an expert in the language. I have seen programmers write exceptionally
    bad JavaScript code just because they wanted to get the things done quickly and
    JavaScript allowed them to do just this. I have spent hours debugging very bad
    quality JavaScript written by someone who clearly was not a programmer. However,
    the language is a tool and cannot be blamed for sloppy programming. Like all crafts,
    programming demands extreme dedication and discipline.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对JavaScript提出的另一个批评是，它让你在不是语言专家的情况下完成工作。我见过程序员写了极其糟糕的JavaScript代码，只是因为他们想快速完成工作，而JavaScript允许他们这样做。我花了几个小时来调试由显然不是程序员写的非常糟糕的JavaScript代码。然而，这种语言只是一个工具，不能因为编程粗糙而受到责备。像所有手艺一样，编程需要极端的奉献和纪律。
- en: A little bit of history
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点历史
- en: In 1993, the **Mosaic** browser of **National Center for Supercomputing Applications**
    (**NCSA**) was one of the first popular web browsers. A year later, Netscape Communications
    created the proprietary web browser, **Netscape Navigator**. Several original
    Mosaic authors worked on Navigator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1993年，**国家超级计算应用中心**（**NCSA**）的**Mosaic**浏览器是最早流行的网络浏览器之一。一年后，网景通讯公司创建了专有的网络浏览器**Netscape
    Navigator**。几位最初的Mosaic作者参与了Navigator的开发。
- en: In 1995, Netscape Communications hired Brendan Eich with the promise of letting
    him implement **Scheme** (a Lisp dialect) in the browser. Before this happened,
    Netscape got in touch with Sun Microsystems (now Oracle) to include Java in the
    Navigator browser.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 1995年，网景通讯公司聘请了布兰登·艾奇，并承诺让他在浏览器中实现**Scheme**（一种Lisp方言）。在此之前，网景与Sun Microsystems（现在是Oracle）联系，以在Navigator浏览器中包含Java。
- en: Due to the popularity and easy programming of Java, Netscape decided that a
    scripting language had to have a syntax similar to that of Java. This ruled out
    adopting existing languages such as Python, **Tool Command Language** (**TCL**),
    or Scheme. Eich wrote the initial prototype in just 10 days ([http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf](http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf)),
    in May 1995\. JavaScript's first code name was **Mocha**, coined by Marc Andreessen.
    Netscape later changed it to **LiveScript**, for trademark reasons. In early December
    1995, Sun licensed the trademark Java to Netscape. The language was renamed to
    its final name, JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java的流行和易编程性，Netscape决定脚本语言必须具有与Java类似的语法。这排除了采用现有的语言，如Python、**工具命令语言**（**TCL**）或Scheme。Eich在短短10天内编写了最初的原型（[http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf](http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf)），即1995年5月。JavaScript的第一个代号是**Mocha**，由Marc
    Andreessen创造。后来，Netscape因商标原因将其更名为**LiveScript**。1995年12月初，Sun将Java商标授权给Netscape。该语言被更名为最终名称JavaScript。
- en: How to use this module
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用这个模块
- en: This module is not going to help if you are looking to get things done quickly.
    This module is going to focus on the correct ways to code in JavaScript. We are
    going to spend a lot of time understanding how to avoid the bad parts of the language
    and build reliable and readable code in JavaScript. We will skirt away from sloppy
    features of the language just to make sure that you are not getting used to them—if
    you have already learned to code using these habits, this module will try to nudge
    you away from this. There will be a lot of focus on the correct style and tools
    to make your code better.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想快速完成任务，这个模块不会帮助您。这个模块将专注于正确的JavaScript编码方式。我们将花费大量时间了解如何避免语言的不良部分，并在JavaScript中构建可靠且可读的代码。我们将远离语言的松散特性，以确保您不会习惯于它们——如果您已经学会了使用这些习惯来编码，这个模块将试图将您引开。我们将非常关注正确的风格和工具，以使您的代码更好。
- en: Most of the concepts in this module are going to be examples and patterns from
    real-world problems. I will insist that you code each of the snippets to make
    sure that your understanding of the concept is getting programmed into your muscle
    memory. Trust me on this, there is no better way to learn programming than writing
    a lot of code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块中的大多数概念都将是来自真实世界问题的例子和模式。我会坚持让您编写每个片段，以确保您对概念的理解被编程到您的肌肉记忆中。相信我，没有比写更多的代码更好的学习编程的方法了。
- en: 'Typically, you will need to create an HTML page to run an embedded JavaScript
    code as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您需要创建一个HTML页面来运行嵌入的JavaScript代码，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This sample code shows two ways in which JavaScript is embedded into the HTML
    page. First, the `<script>` tag in `<head>` imports JavaScript, while the second
    `<script>` tag is used to embed inline JavaScript.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例代码展示了JavaScript嵌入到HTML页面中的两种方式。首先，`<head>`中的`<script>`标签导入JavaScript，而第二个`<script>`标签用于嵌入内联JavaScript。
- en: 'You can save this HTML page locally and open it in a browser. On Firefox, you
    can open the **Developer** console (Firefox menu | **Developer** | **Web Console**)
    and you can see the **"Hello World"** text on the **Console** tab. Based on your
    OS and browser version, the screen may look different:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这个HTML页面保存在本地并在浏览器中打开。在Firefox上，您可以打开**开发者**控制台（Firefox菜单|**开发者**|**Web控制台**），您可以在**控制台**选项卡上看到**“Hello
    World”**文本。根据您的操作系统和浏览器版本，屏幕可能会有所不同：
- en: '![How to use this module](img/00002.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用这个模块](img/00002.jpeg)'
- en: 'You can run the page and inspect it using Chrome''s **Developer Tool**:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以运行页面并使用Chrome的**开发者工具**进行检查：
- en: '![How to use this module](img/00003.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用这个模块](img/00003.jpeg)'
- en: 'A very interesting thing to notice here is that there is an error displayed
    on the console regarding the missing `.js` file that we are trying to import using
    the following line of code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里非常有趣的一点是，控制台显示了一个关于缺少`.js`文件的错误，我们试图使用以下代码行导入它：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using browser developer consoles or an extension such as **Firebug** can be
    very useful in debugging error conditions in the code. We will discuss in detail
    the debugging techniques in later chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试错误条件的代码中，使用浏览器开发者控制台或类似**Firebug**的扩展非常有用。我们将在后面的章节中详细讨论调试技术。
- en: Creating such HTML scaffolds can be tedious for every exercise in this module.
    Instead, we want to use a **Read-Eval-Print-Loop** (**REPL**) for JavaScript.
    Unlike Python, JavaScript does not come packaged with an REPL. We can use Node.js
    as an REPL. If you have Node.js installed on your machine, you can just type `node`
    on the command line and start experimenting with it. You will observe that Node
    REPL errors are not very elegantly displayed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模块的每个练习中创建这样的HTML框架可能会很繁琐。相反，我们希望使用JavaScript的**读取-求值-打印-循环**（**REPL**）。与Python不同，JavaScript不包含REPL。我们可以使用Node.js作为REPL。如果您的计算机上安装了Node.js，您只需在命令行上输入`node`，然后开始尝试。您会发现Node
    REPL错误的显示并不是非常优雅的。
- en: 'Let''s see the following example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的例子：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After this error, you will have to restart. Still, it can help you try out small
    fragments of code a lot faster.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个错误之后，您将不得不重新开始。不过，它可以帮助您更快地尝试小片段的代码。
- en: 'Another tool that I personally use a lot is **JS Bin** ([http://jsbin.com/](http://jsbin.com/)).
    JS Bin provides you with a great set of tools to test JavaScript, such as syntax
    highlighting and runtime error detection. The following is a screenshot of JS
    Bin:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我个人经常使用的工具是**JS Bin**（[http://jsbin.com/](http://jsbin.com/)）。JS Bin为您提供了一套很棒的工具来测试JavaScript，比如语法高亮和运行时错误检测。以下是JS
    Bin的截图：
- en: '![How to use this module](img/00004.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用这个模块](img/00004.jpeg)'
- en: Based on your preference, you can pick the tool that makes it easier to try
    out the code samples. Regardless of which tool you use, make sure that you type
    out every exercise in this module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的偏好，您可以选择使尝试代码样本变得更容易的工具。无论您使用哪种工具，请确保您在这个模块中键入每个练习。
- en: Hello World
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World
- en: No programming language should be published without a customary Hello World
    program—why should this book be any different?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 没有编程语言应该在没有传统的Hello World程序的情况下发布——为什么这本书要有所不同呢？
- en: 'Type (don''t copy and paste) the following code in JS Bin:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在JS Bin中键入（不要复制粘贴）以下代码：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your screen should look something as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你的屏幕应该看起来像下面这样：
- en: '![Hello World](img/00005.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Hello World](img/00005.jpeg)'
- en: An overview of JavaScript
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript概述
- en: In a nutshell, JavaScript is a prototype-based scripting language with dynamic
    typing and first-class function support. JavaScript borrows most of its syntax
    from Java, but is also influenced by Awk, Perl, and Python. JavaScript is case-sensitive
    and white space-agnostic.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，JavaScript是一种基于原型的脚本语言，具有动态类型和一流函数支持。JavaScript大部分语法借鉴自Java，但也受到Awk、Perl和Python的影响。JavaScript区分大小写，对空格不敏感。
- en: Comments
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'JavaScript allows single line or multiple line comments. The syntax is similar
    to C or Java:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript允许单行或多行注释。语法类似于C或Java：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Variables
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are symbolic names for values. The names of variables, or identifiers,
    must follow certain rules.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是值的符号名称。变量的名称，或标识符，必须遵循某些规则。
- en: A JavaScript variable name must start with a letter, underscore (_), or dollar
    sign ($); subsequent characters can also be digits (0-9). As JavaScript is case
    sensitive, letters include the characters *A* through *Z* (uppercase) and the
    characters *a* through *z* (lowercase).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript变量名必须以字母、下划线(_)或美元符($)开头；后续字符也可以是数字（0-9）。由于JavaScript区分大小写，字母包括*A*到*Z*（大写）和*a*到*z*（小写）。
- en: You can use ISO 8859-1 or Unicode letters in variable names.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在变量名中使用ISO 8859-1或Unicode字母。
- en: 'New variables in JavaScript should be defined with the **var** keyword. If
    you declare a variable without assigning a value to it, its type is undefined
    by default. One terrible thing is that if you don''t declare your variable with
    the var keyword, they become implicit globals. Let me reiterate that implicit
    globals are a terrible thing—we will discuss this in detail later in the module
    when we discuss variable scopes and closures, but it''s important to remember
    that you should always declare a variable with the var keyword unless you know
    what you are doing:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的新变量应该使用**var**关键字来定义。如果你声明一个变量但没有给它赋值，那么它的类型默认是undefined。一个可怕的事情是，如果你不用var关键字声明变量，它们就会变成隐式全局变量。让我再重申一遍，隐式全局变量是一件可怕的事情——我们将在模块中讨论变量作用域和闭包时详细讨论这一点，但重要的是要记住，除非你知道自己在做什么，否则你应该总是用var关键字声明变量：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `NaN` value is a special value that indicates that the entity is *not a
    number*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`值是一个特殊值，表示该实体*不是一个数字*。'
- en: Constants
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量
- en: 'You can create a read-only named constant with the **const** keyword. The constant
    name must start with a letter, underscore, or dollar sign and can contain alphabetic,
    numeric, or underscore characters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用**const**关键字创建一个只读的命名常量。常量名称必须以字母、下划线或美元符号开头，可以包含字母、数字或下划线字符：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A constant cannot change the value through assignment or be redeclared, and
    it has to be initialized to a value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 常量不能通过赋值改变值或重新声明，并且必须初始化为一个值。
- en: 'JavaScript supports the standard variations of types:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript支持标准类型的变化：
- en: Number
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: String
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Boolean
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔
- en: Symbol (new in ECMAScript 6)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号（ECMAScript 6中的新功能）
- en: 'Object:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象：
- en: Function
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Array
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Date
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期
- en: RegExp
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式
- en: 'Null'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空值
- en: Undefined
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未定义
- en: Number
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字
- en: 'The **Number** type can represent both 32-bit integer and 64-bit floating point
    values. For example, the following line of code declares a variable to hold an
    integer value, which is defined by the literal 555:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Number**类型可以表示32位整数和64位浮点值。例如，以下代码行声明一个变量来保存整数值，该值由文字555定义：'
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To define a floating point value, you need to include a decimal point and one
    digit after the decimal point:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个浮点值，你需要包括一个小数点和小数点后的一位数字：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Essentially, there's no such thing as an integer in JavaScript. JavaScript uses
    a 64-bit floating point representation, which is the same as Java's double.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，在JavaScript中没有整数这种东西。JavaScript使用64位浮点表示，这与Java的double相同。
- en: 'Hence, you would see something as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你会看到以下内容：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I recommend that you read the exhaustive answer on Stack Overflow ([http://stackoverflow.com/questions/588004/is-floating-point-math-broken](http://stackoverflow.com/questions/588004/is-floating-point-math-broken))
    and ([http://floating-point-gui.de/](http://floating-point-gui.de/)), which explains
    why this is the case. However, it is important to understand that floating point
    arithmetic should be handled with due care. In most cases, you will not have to
    rely on extreme precision of decimal points but if you have to, you can try using
    libraries such as **big.js** ([https://github.com/MikeMcl/big.js](https://github.com/MikeMcl/big.js))
    that try to solve this problem.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你阅读Stack Overflow上详尽的答案（[http://stackoverflow.com/questions/588004/is-floating-point-math-broken](http://stackoverflow.com/questions/588004/is-floating-point-math-broken)）和（[http://floating-point-gui.de/](http://floating-point-gui.de/)），解释了为什么会出现这种情况。然而，重要的是要理解，浮点运算应该谨慎处理。在大多数情况下，你不必依赖于小数点的极端精度，但如果必须这样做，你可以尝试使用**big.js**等库（[https://github.com/MikeMcl/big.js](https://github.com/MikeMcl/big.js)）来解决这个问题。
- en: If you intend to code extremely precise financial systems, you should represent
    $ values as cents to avoid rounding errors. One of the systems that I worked on
    used to round off the **Value Added Tax** (**VAT**) amount to two decimal points.
    With thousands of orders a day, this rounding off amount per order became a massive
    accounting headache. We needed to overhaul the entire Java web service stack and
    JavaScript frontend for this.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算编写极其精确的金融系统，你应该将美元值表示为分，以避免舍入误差。我曾经工作过的一个系统每天要处理成千上万的订单，每个订单的增值税（VAT）金额都要舍入到两位小数。这个舍入金额对会计工作造成了巨大的困扰。我们需要彻底改造整个Java
    Web服务栈和JavaScript前端来解决这个问题。
- en: A few special values are also defined as part of the Number type. The first
    two are `Number.MAX_VALUE` and `Number.MIN_VALUE`, which define the outer bounds
    of the Number value set. All ECMAScript numbers must fall between these two values,
    without exception. A calculation can, however, result in a number that does not
    fall in between these two numbers. When a calculation results in a number greater
    than `Number.MAX_VALUE`, it is assigned a value of `Number.POSITIVE_INFINITY`,
    meaning that it has no numeric value anymore. Likewise, a calculation that results
    in a number less than `Number.MIN_VALUE` is assigned a value of `Number.NEGATIVE_INFINITY`,
    which also has no numeric value. If a calculation returns an infinite value, the
    result cannot be used in any further calculations. You can use the `isInfinite()`
    method to verify if the calculation result is an infinity.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些特殊值也被定义为Number类型的一部分。前两个是`Number.MAX_VALUE`和`Number.MIN_VALUE`，它们定义了Number值集的外部边界。所有ECMAScript数字必须在这两个值之间，没有例外。然而，计算可能会得出一个不在这两个数字之间的数字。当计算结果大于`Number.MAX_VALUE`时，它被赋予一个值`Number.POSITIVE_INFINITY`，意味着它不再具有数值。同样，计算结果小于`Number.MIN_VALUE`的数字被赋予一个值`Number.NEGATIVE_INFINITY`，它也没有数值。如果计算返回一个无限值，结果不能用于任何进一步的计算。您可以使用`isInfinite()`方法来验证计算结果是否为无穷大。
- en: 'Another peculiarity of JavaScript is a special value called NaN (short for
    *Not a Number*). In general, this occurs when conversion from another type (String,
    Boolean, and so on) fails. Observe the following peculiarity of NaN:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的另一个特点是一个称为NaN（*Not a Number*）的特殊值。一般来说，当从另一种类型（String、Boolean等）转换失败时会出现这种情况。观察NaN的以下特点：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second line is strange—NaN is not equal to NaN. If NaN is part of any mathematical
    operation, the result also becomes NaN. As a general rule, stay away from using
    NaN in any expression. For any advanced mathematical operations, you can use the
    `Math` global object and its methods:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行很奇怪——NaN不等于NaN。如果NaN是任何数学运算的一部分，结果也会变成NaN。一般来说，要避免在任何表达式中使用NaN。对于任何高级数学运算，您可以使用`Math`全局对象及其方法：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can use the `parseInt()` and `parseFloat()` methods to convert a string
    expression to an integer or float:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`parseInt()`和`parseFloat()`方法将字符串表达式转换为整数或浮点数：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With `parseInt()`, you should provide an explicit base to prevent nasty surprises
    on older browsers. The last trick is just using a `+` sign to auto-convert the
    `"42"` string to a number, `42`. It is also prudent to handle the `parseInt()`
    result with `isNaN()`. Let''s see the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`parseInt()`时，应提供一个明确的基数，以防止在旧浏览器上出现不愉快的惊喜。最后的技巧只是使用`+`号将`"42"`字符串自动转换为数字`42`。处理`parseInt()`结果时使用`isNaN()`也是明智的。让我们看看以下示例：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, you are not sure of the type of the value that the `underterminedValue`
    variable can hold if the value is being set from an external interface. If `isNaN()`
    is not handled, `parseInt()` will cause an exception and the program can crash.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您不确定`underterminedValue`变量可以保存的值的类型，如果该值是从外部接口设置的。如果没有处理`isNaN()`，`parseInt()`将导致异常，程序可能会崩溃。
- en: String
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: String
- en: 'In JavaScript, strings are a sequence of Unicode characters (each character
    takes 16 bits). Each character in the string can be accessed by its index. The
    first character index is zero. Strings are enclosed inside `"` or `''`—both are
    valid ways to represent strings. Let''s see the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，字符串是Unicode字符序列（每个字符占16位）。字符串中的每个字符都可以通过其索引访问。第一个字符的索引是零。字符串被包含在`"`或`'`中——这两种表示字符串的方式都是有效的。让我们看看以下内容：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The last line shows you how certain character literals when escaped with a
    backslash `\` can be used as special characters. The following is a list of such
    special characters:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行向您展示了当使用反斜杠`\`转义时，某些字符文字可以作为特殊字符使用。以下是这样的特殊字符的列表：
- en: '`\n`: Newline'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 换行符
- en: '`\t`: Tab'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制表符
- en: '`\b`: Backspace'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退格
- en: '`\r`: Carriage return'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回车符
- en: '`\\`: Backslash'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\\`: 反斜杠'
- en: '`\''`: Single quote'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单引号
- en: '`\"`: Double quote'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"`: 双引号'
- en: 'You get default support for special characters and Unicode literals with JavaScript
    strings:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用JavaScript字符串默认支持的特殊字符和Unicode文字：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'One important thing about JavaScript Strings, Numbers, and Booleans is that
    they actually have wrapper objects around their primitive equivalent. The following
    example shows the usage of the wrapper objects:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JavaScript字符串、数字和布尔值的一个重要事情是，它们实际上在它们的原始等价物周围有包装对象。以下示例显示了包装对象的用法：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: JavaScript allows multiline strings also. Strings enclosed within [PRE17]
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript也允许多行字符串。字符串包含在[PRE17]
- en: console.log(`string text on first line
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: console.log(`第一行的字符串文本
- en: string text on second line `);
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行的字符串文本`);
- en: '"string text on first line'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"第一行的字符串文本'
- en: string text on second line "
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行的字符串文本"
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: var a=1, b=2;
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: var a=1, b=2;
- en: console.log("Sum of values is :" + (a+b) + " and multiplication is :" + (a*b));
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("值的和为：" + (a+b) + " 乘积为：" + (a*b));
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'console.log(`Sum of values is :${a+b} and multiplication is : ${a*b}`);'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(`值的和为：${a+b} 乘积为：${a*b}`);
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: var xl;
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var xl;
- en: console.log(typeof xl);
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: console.log(typeof xl);
- en: undefined
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 未定义
- en: console.log(null==undefined);
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: console.log(null==undefined);
- en: 'true'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'true'
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: var pBooleanTrue = true;
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: var pBooleanTrue = true;
- en: var pBooleanFalse = false;
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: var pBooleanFalse = false;
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: var fBooleanTrue = Boolean(true);
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: var fBooleanTrue = Boolean(true);
- en: var fBooleanFalse = Boolean(false);
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: var fBooleanFalse = Boolean(false);
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: var oBooleanTrue = new Boolean(true);
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: var oBooleanTrue = new Boolean(true);
- en: var oBooleanFalse = new Boolean(false);
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: var oBooleanFalse = new Boolean(false);
- en: console.log(oBooleanTrue); //true
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(oBooleanTrue); //true
- en: console.log(typeof oBooleanTrue); //object
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof oBooleanTrue); //object
- en: if(oBooleanFalse){
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: if(oBooleanFalse){
- en: console.log("I am seriously truthy, don't believe me");
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("我是真实的，别不相信我");
- en: '}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '>"I am seriously truthy, don''t believe me"'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '>"我是真实的，别不相信我"'
- en: if(oBooleanTrue){
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: if(oBooleanTrue){
- en: console.log("I am also truthy, see ?");
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("我也是真实的，看见了吗？");
- en: '}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '>"I am also truthy, see ?"'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '>"我也是真实的，看见了吗？"'
- en: //Use valueOf() to extract real value within the Boolean object
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: //使用valueOf()来提取布尔对象中的真实值
- en: if(oBooleanFalse.valueOf()){
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: if(oBooleanFalse.valueOf()){
- en: console.log("With valueOf, I am false");
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("有valueOf，我是假的");
- en: '}else{'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '}else{'
- en: console.log("Without valueOf, I am still truthy");
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("没有valueOf，我仍然是真实的");
- en: '}'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '>"Without valueOf, I am still truthy"'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 没有valueOf，我仍然是真实的
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: var aStringObject = new String("string");
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: var aStringObject = new String("string");
- en: console.log(typeof aStringObject);        //"object"
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof aStringObject); //"object"
- en: console.log(aStringObject instanceof String);    //true
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(aStringObject instanceof String); //true
- en: var aString = "This is a string";
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: var aString = "This is a string";
- en: console.log(aString instanceof String);     //false
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(aString instanceof String); //false
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: var dataObject = new Date([parameters]);
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: var dataObject = new Date([parameters]);
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: var today = new Date();
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: var today = new Date();
- en: console.log(today.getDate()); //27
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getDate()); //27
- en: console.log(today.getMonth()); //4
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getMonth()); //4
- en: console.log(today.getFullYear()); //2015
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getFullYear()); //2015
- en: console.log(today.getHours()); //23
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getHours()); //23
- en: console.log(today.getMinutes()); //13
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getMinutes()); //13
- en: console.log(today.getSeconds()); //10
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getSeconds()); //10
- en: //number of milliseconds since January 1, 1970, 00:00:00 UTC
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: //自1970年1月1日00:00:00 UTC以来的毫秒数
- en: console.log(today.getTime()); //1432748611392
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getTime()); //1432748611392
- en: console.log(today.getTimezoneOffset()); //-330 Minutes
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getTimezoneOffset()); //-330分钟
- en: //Calculating elapsed time
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: //计算经过的时间
- en: var start = Date.now();
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: var start = Date.now();
- en: // loop for a long time
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: //循环很长时间
- en: for (var i=0;i<100000;i++);
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: for (var i=0;i<100000;i++);
- en: var end = Date.now();
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: var end = Date.now();
- en: var elapsed = end - start; // elapsed time in milliseconds
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: var elapsed = end - start; //毫秒为单位的经过时间
- en: console.log(elapsed); //71
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(elapsed); //71
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: var a=25;
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: var a=25;
- en: a=+a;            //No impact on a's value
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: a=+a; //对a的值没有影响
- en: console.log(a);  //25
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(a); //25
- en: var b="70";
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: var b="70";
- en: console.log(typeof b); //string
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof b); //string
- en: b=+b;           //converts string to number
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: b=+b; //将字符串转换为数字
- en: console.log(b); //70
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(b); //70
- en: console.log(typeof b); //number
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof b); //number
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: var c="foo";
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: var c="foo";
- en: c=+c;            //Converts foo to number
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: c=+c; //将foo转换为数字
- en: console.log(c);  //NaN
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(c); //NaN
- en: console.log(typeof c);  //number
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof c); //number
- en: var zero="";
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: var zero="";
- en: zero=+zero; //empty strings are converted to 0
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: zero=+zero; //空字符串转换为0
- en: console.log(zero);
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(zero);
- en: console.log(typeof zero);
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof zero);
- en: '[PRE29]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: var a= 1;
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: var a= 1;
- en: var b= a++;
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: var b= a++;
- en: console.log(a); //2
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(a); //2
- en: console.log(b); //1
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(b); //1
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: var a= 1;
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: var a= 1;
- en: var b= ++a;
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: var b= ++a;
- en: console.log(a);  //2
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(a); //2
- en: console.log(b);  //2
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(b); //2
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: var a, b, c;
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: var a, b, c;
- en: a = b = c = 0;
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: a = b = c = 0;
- en: '[PRE32]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: var a = b = 0;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: var a = b = 0;
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: console.log(true  && true); // true AND true returns true
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(true  && true); // true AND true returns true
- en: console.log(true  && false);// true AND false returns false
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(true  && false);// true AND false returns false
- en: console.log(false && true);// false AND true returns false
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(false && true);// false AND true returns false
- en: console.log("Foo" && "Bar");// Foo(true) AND Bar(true) returns Bar
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Foo" && "Bar");// Foo(true) AND Bar(true) returns Bar
- en: console.log(false && "Foo");// false && Foo(true) returns false
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(false && "Foo");// false && Foo(true) returns false
- en: console.log("Foo" && false);// Foo(true) && false returns false
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Foo" && false);// Foo(true) && false returns false
- en: console.log(false && (1 == 2));// false && false(1==2) returns false
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(false && (1 == 2));// false && false(1==2) returns false
- en: '[PRE34]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: console.log(true  || true); // true AND true returns true
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(true  || true); // true AND true returns true
- en: console.log(true  || false);// true AND false returns true
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(true  || false);// true AND false returns true
- en: console.log(false || true);// false AND true returns true
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(false || true);// false AND true returns true
- en: console.log("Foo" || "Bar");// Foo(true) AND Bar(true) returns Foo
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Foo" || "Bar");// Foo(true) AND Bar(true) returns Foo
- en: console.log(false || "Foo");// false && Foo(true) returns Foo
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(false || "Foo");// false && Foo(true) returns Foo
- en: console.log("Foo" || false);// Foo(true) && false returns Foo
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Foo" || false);// Foo(true) && false returns Foo
- en: console.log(false || (1 == 2));// false && false(1==2) returns false
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(false || (1 == 2));// false && false(1==2) returns false
- en: '[PRE35]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: console.log (0 && "Foo");  //First operand is falsy - return it
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: console.log (0 && "Foo"); //第一个操作数是虚假的 - 返回它
- en: console.log ("Foo" && "Bar"); //First operand is truthy, return the second operand
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: console.log ("Foo" && "Bar"); //第一个操作数是真实的，返回第二个操作数
- en: '[PRE36]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: console.log (0 || "Foo");  //First operand is falsy - return second operand
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: console.log (0 || "Foo"); //第一个操作数是虚假的 - 返回第二个操作数
- en: console.log ("Foo" || "Bar"); //First operand is truthy, return it
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: console.log ("Foo" || "Bar"); //第一个操作数是真实的，返回它
- en: console.log (0 || false); //First operand is falsy, return second operand
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: console.log (0 || false); //第一个操作数是虚假的，返回第二个操作数
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: function greeting(name){
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: function greeting(name){
- en: name = name || "John";
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: name = name || "John";
- en: console.log("Hello " + name);
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("Hello " + name);
- en: '}'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: greeting("Johnson"); // alerts "Hi Johnson";
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: greeting("Johnson"); //警报“嗨约翰”;
- en: greeting(); //alerts "Hello John"
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: greeting(); //警报“你好约翰”
- en: '[PRE38]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: //If the operand is an object, false is returned.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: //如果操作数是对象，则返回false。
- en: var s = new String("string");
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: var s = new String("string");
- en: console.log(!s);              //false
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(!s); //false
- en: //If the operand is the number 0, true is returned.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: //如果操作数是数字0，则返回true
- en: var t = 0;
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: var t = 0;
- en: console.log(!t);              //true
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(!t); //true
- en: //If the operand is any number other than 0, false is returned.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: //如果操作数是0以外的任何数字，则返回false。
- en: var x = 11;
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: var x = 11;
- en: console.log(!x);              //false
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(!x); //false
- en: //If operand is null or NaN, true is returned
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: //如果操作数为null或NaN，则返回true
- en: var y =null;
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: var y =null;
- en: var z = NaN;
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: var z = NaN;
- en: console.log(!y);              //true
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(!y); //true
- en: console.log(!z);              //true
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(!z); //true
- en: //If operand is undefined, you get true
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: //如果操作数未定义，则返回true
- en: var foo;
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: var foo;
- en: console.log(!foo);            //true
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(!foo); //true
- en: '[PRE39]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'var allowedToDrive = (age > 21) ? "yes" : "no";'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'var allowedToDrive = (age > 21) ? "yes" : "no";'
- en: '[PRE40]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: function isAllowedToDrive(age){
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: function isAllowedToDrive(age){
- en: if(age>21){
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: if(age>21){
- en: return true;
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: return true;
- en: '}else{'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '}else{'
- en: return false;
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: return false;
- en: '}'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(isAllowedToDrive(22));
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(isAllowedToDrive(22));
- en: '[PRE41]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: if (condition1) {
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: if (condition1) {
- en: statement1
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: statement1
- en: '} else if (condition2) {'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '} else if (condition2) {'
- en: statement2
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: statement2
- en: '} else if (condition3) {'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '} else if (condition3) {'
- en: statement3
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: statement3
- en: '}'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ..
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: ..
- en: '} else {'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: statementN
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: statementN
- en: '}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE42]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: if (condition1) {
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: if (condition1) {
- en: statement1
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: statement1
- en: '} else'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '} else'
- en: if (condition2) {
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: if (condition2) {
- en: '[PRE43]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: if(a=b) {
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: if(a=b) {
- en: //do something
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: //做一些事情
- en: '}'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE44]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: if((a=b)){
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: if((a=b)){
- en: //this is really something you want to do
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: //这真的是你想做的事情
- en: '}'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE45]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: function sayDay(day){
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: function sayDay（day）{
- en: switch(day){
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 开关（天）{
- en: 'case 1: console.log("Sunday");'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 情况1：console.log（"星期日"）;
- en: break;
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 休息;
- en: 'case 2: console.log("Monday");'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 情况2：console.log（"星期一"）;
- en: break;
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 休息;
- en: 'default:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 默认：
- en: console.log("We live in a binary world. Go to Pluto");
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（"我们生活在一个二进制世界。去冥王星"）;
- en: '}'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: sayDay(1); //Sunday
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: sayDay（1）; //星期日
- en: sayDay(3); //We live in a binary world. Go to Pluto
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: sayDay（3）; //我们生活在一个二进制世界。去冥王星
- en: '[PRE46]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '>sayDay(1);'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '> sayDay（1）;'
- en: Sunday
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 星期日
- en: Monday
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 星期一
- en: '[PRE47]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: function debug(level,msg){
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: function debug（level，msg）{
- en: switch(level){
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 开关（级别）{
- en: 'case "INFO": //intentional fall-through'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 情况"INFO"：//有意的穿透
- en: 'case "WARN" :'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 情况"WARN"：
- en: 'case "DEBUG": console.log(level+ ": " + msg);'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 情况"DEBUG"：console.log（level + "：" + msg）;
- en: break;
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 休息;
- en: 'case "ERROR": console.error(msg);'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 情况"ERROR"：console.error（msg）;
- en: '}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: debug("INFO","Info Message");
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: debug("INFO"，"信息消息");
- en: debug("DEBUG","Debug Message");
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: debug("DEBUG"，"调试消息");
- en: debug("ERROR","Fatal Exception");
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: debug("ERROR"，"致命异常");
- en: '[PRE48]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: var i=0;
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: var i = 0;
- en: while(i<10){
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当（i <10）{
- en: i=i+1;
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: i = i + 1;
- en: console.log(i);
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（i）;
- en: '}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE49]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: //infinite loop
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: //无限循环
- en: while(true){
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 当（真）{
- en: //keep doing this
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: //继续这样做
- en: '}'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE50]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: var choice;
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: var选择;
- en: do {
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 做{
- en: choice=getChoiceFromUserInput();
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: choice = getChoiceFromUserInput（）;
- en: '} while(!isInputValid(choice));'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '} while（！isInputValid（choice））;'
- en: '[PRE51]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: for (var i=0;i<5;i++){
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（var i = 0; i < 5; i ++）{
- en: console.log("Hello");
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（"你好"）;
- en: '}'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE52]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: var x=0;
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: var x = 0;
- en: //Omit initialitzation
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: //省略初始化
- en: for (;x<5;x++){
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（; x <5; x ++）{
- en: console.log("Hello");
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（"你好"）;
- en: '}'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: //Omit exit condition
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: //省略退出条件
- en: for (var j=0;;j++){
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（var j = 0;; j ++）{
- en: //exit condition
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: //退出条件
- en: if(j>=5){
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（j> = 5）{
- en: break;
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 休息;
- en: '}else{'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '}else{'
- en: console.log("Hello");
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（"你好"）;
- en: '}'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: //Omit increment
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: //省略增量
- en: for (var k=0; k<5;){
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（var k = 0; k <5;）{
- en: console.log("Hello");
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（"你好"）;
- en: k++;
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: k ++;
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE53]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: var arr = [10, 20, 30];
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: var arr = [10,20,30];
- en: // Assign all array values to 100
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: //将所有数组值分配为100
- en: for (i = 0; i < arr.length; arr[i++] = 100);
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（i = 0; i <arr.length; arr [i ++] = 100）;
- en: console.log(arr);
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（arr）;
- en: '[PRE54]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: var n = 0;
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: var n = 0;
- en: var o = new String("0");
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: var o = new String（"0"）;
- en: var s = "0";
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: var s = "0";
- en: var b = false;
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: var b = false;
- en: console.log(n === n); // true - same values for numbers
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n === n）; // true-数字的值相同
- en: console.log(o === o); // true - non numbers are compared for their values
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（o === o）; // true-非数字比较它们的值
- en: console.log(s === s); // true - ditto
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（s === s）; // true-同上
- en: console.log(n === o); // false - no implicit type conversion, types are different
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n === o）; // false-没有隐式类型转换，类型不同
- en: console.log(n === s); // false - types are different
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（n === s）; // false-类型不同
- en: console.log(o === s); // false - types are different
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（o === s）; // false-类型不同
- en: console.log(null === undefined); // false
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（null === undefined）; // false
- en: console.log(o === null); // false
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（o === null）; // false
- en: console.log(o === undefined); // false
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（o === undefined）; // false
- en: '[PRE55]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: var fortyTwo = 42;
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: var四十二=42;
- en: console.log(fortyTwo.toString()[1]); //prints "2"
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（fortyTwo.toString（）[1]）; //打印"2"
- en: '[PRE56]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: typeof 1             === "number";    // true
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: typeof 1 === "number"; // true
- en: typeof "1"           === "string";    // true
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: typeof "1" === "string"; // true
- en: 'typeof { age: 39 }   === "object";    // true'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: typeof {age：39} === "object"; // true
- en: typeof Symbol()      === "symbol";    // true
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: typeof Symbol（）=== "symbol"; // true
- en: typeof undefined     === "undefined"; // true
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: typeof undefined === "undefined"; // true
- en: typeof true          === "boolean";   // true
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: typeof true === "boolean"; // true
- en: '[PRE57]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: var t=1;
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: var t = 1;
- en: var u=""+t; //implicit coercion
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: var u = "" + t; //隐式转换
- en: console.log(typeof t);  //"number"
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（typeof t）; //"number"
- en: console.log(typeof u);  //"string"
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（typeof u）; //"string"
- en: var v=String(t);  //Explicit coercion
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: var v = String（t）; //显式转换
- en: console.log(typeof v);  //"string"
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（typeof v）; //"string"
- en: var x=null
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: var x = null
- en: console.log(""+x); //"null"
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（"" + x）; //"null"
- en: '[PRE58]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: var a="abc";
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: var a = "abc";
- en: console.log(a.length);
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（a.length）;
- en: console.log(a.toUpperCase());
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（a.toUpperCase（））;
- en: '[PRE59]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: As we discussed earlier, JavaScript kindly wraps these primitives in their wrappers
    by default thus making it possible for us to directly access the wrapper's methods
    and properties as if they were of the primitives themselves.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的那样，JavaScript默认情况下很好地包装了这些原语，因此我们可以直接访问包装器的方法和属性，就好像它们是原语本身一样。
- en: '[PRE60]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: typeof null ==="object" //true
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: typeof null ==="object" //true
- en: '[PRE61]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: var x = null;
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: var x = null;
- en: if (!x && typeof x === "object"){
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（！x && typeof x === "object"）{
- en: console.log("100% null");
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（"100％null"）;
- en: '}'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE62]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: f = function test() {
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: f = function test（）{
- en: return 12;
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 返回12;
- en: '}'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(typeof f === "function");  //prints "true"
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（typeof f === "function"）; //打印"true"
- en: '[PRE63]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: console.log (typeof [1,2,3,4]); //"object"
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: console.log（typeof [1,2,3,4]）; //"object"
- en: '[PRE64]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: var a = 1;
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: var a = 1;
- en: typeof a; // "number"
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: typeof a; // "number"
- en: a = false;
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: a = false;
- en: typeof a; // "boolean"
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: typeof a; // "boolean"
- en: '[PRE65]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: typeof typeof 1; // "string"
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: typeof typeof 1; // "string"
- en: '[PRE66]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: if (a < 1) a = 1 console.log(a)
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（a <1）a = 1 console.log（a）
- en: '[PRE67]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: if (a < 1) a = 1; console.log(a);
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（a <1）a = 1; console.log（a）;
- en: '[PRE68]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: function add(a,b) { return a+b }
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: function add（a，b）{返回a + b}
- en: '[PRE69]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: function add(a,b) { return a+b; }
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: function add（a，b）{返回a + b; }
- en: '[PRE70]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: //Cramped style (Bad)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: //狭窄的风格（不好）
- en: if(condition) doSomeTask();
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（条件）doSomeTask（）;
- en: while(condition) i++;
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 当（条件）i ++;
- en: for(var i=0;i<10;i++) iterate();
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（var i = 0; i <10; i ++）迭代（）;
- en: //Use whitespace for better readability (Good)
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: //使用空格以提高可读性（好）
- en: //Place 1 space before the leading brace.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: //在左大括号之前放置1个空格。
- en: if (condition) {
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（条件）{
- en: // statements
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '}'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: while ( condition ) {
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 当（条件）{
- en: // statements
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '}'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: for ( var i = 0; i < 100; i++ ) {
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（var i = 0; i <100; i ++）{
- en: // statements
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '}'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '// Better:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: //更好：
- en: var i,
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: var i，
- en: length = 100;
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 长度=100;
- en: for ( i = 0; i < length; i++ ) {
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（i = 0; i <length; i ++）{
- en: // statements
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '}'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Or...
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: //或...
- en: var i = 0,
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: var i = 0，
- en: length = 100;
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 长度=100;
- en: for ( ; i < length; i++ ) {
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（; i <length; i ++）{
- en: // statements
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '}'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: var value;
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: var值;
- en: for ( value in object ) {
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（值在对象中）{
- en: // statements
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '}'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if ( true ) {
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（真的）{
- en: // statements
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '} else {'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '}否则{'
- en: // statements
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: //语句
- en: '}'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: //Set off operators with spaces.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: //用空格分隔运算符。
- en: // bad
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: //坏的
- en: var x=y+5;
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: var x = y + 5;
- en: // good
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: //好的
- en: var x = y + 5;
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: var x = y + 5;
- en: //End files with a single newline character.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: //以单个换行符结束文件。
- en: // bad
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: //坏的
- en: (function(global) {
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: （function（全局）{
- en: // ...stuff...
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: // ...东西...
- en: '})(this);'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '}）（这个）;'
- en: // bad
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: //坏的
- en: (function(global) {
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: （function（全局）{
- en: // ...stuff...
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: // ...东西...
- en: '})(this);↵'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '}）（这个）;↵'
- en: ↵
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: ↵
- en: // good
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: //好的
- en: (function(global) {
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: （function（全局）{
- en: // ...stuff...
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: // ...东西...
- en: '})(this);↵'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '}）（这个）;↵'
- en: '[PRE71]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '//String:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: //字符串：
- en: typeof variable === "string"
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: typeof variable === "string"
- en: '//Number:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: //数字：
- en: typeof variable === "number"
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: typeof variable === "number"
- en: '//Boolean:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '//Boolean:'
- en: typeof variable === "boolean"
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: typeof variable === "boolean"
- en: '//Object:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '//Object:'
- en: typeof variable === "object"
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: typeof variable === "object"
- en: '//null:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '//null:'
- en: variable === null
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: variable === null
- en: '//null or undefined:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '//null or undefined:'
- en: variable == null
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: variable == null
- en: '[PRE72]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: // bad
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: const totalScore = this.reviewScore + '';
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: const totalScore = this.reviewScore + '';
- en: // good
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: // good
- en: const totalScore = String(this.reviewScore);
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: const totalScore = String(this.reviewScore);
- en: '[PRE73]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: const inputValue = '4';
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: const inputValue = '4';
- en: // bad
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: const val = new Number(inputValue);
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: const val = new Number(inputValue);
- en: // bad
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: const val = +inputValue;
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: const val = +inputValue;
- en: // bad
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: const val = inputValue >> 0;
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: const val = inputValue >> 0;
- en: // bad
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: const val = parseInt(inputValue);
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: const val = parseInt(inputValue);
- en: // good
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: // good
- en: const val = Number(inputValue);
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: const val = Number(inputValue);
- en: // good
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: // good
- en: const val = parseInt(inputValue, 10);
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: const val = parseInt(inputValue, 10);
- en: '[PRE74]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: const age = 0;  // bad
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: const age = 0;  // bad
- en: const hasAge = new Boolean(age);  // good
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: const hasAge = new Boolean(age);  // good
- en: const hasAge = Boolean(age); // good
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: const hasAge = Boolean(age); // good
- en: const hasAge = !!age;
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: const hasAge = !!age;
- en: '[PRE75]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: // When evaluating that array has length,
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: // When evaluating that array has length,
- en: '// WRONG:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '// WRONG:'
- en: if ( array.length > 0 ) ...
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: if ( array.length > 0 ) ...
- en: '// evaluate truthiness(GOOD):'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '// evaluate truthiness(GOOD):'
- en: if ( array.length ) ...
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: if ( array.length ) ...
- en: // When evaluating that an array is empty,
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: // When evaluating that an array is empty,
- en: '// (BAD):'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '// (BAD):'
- en: if ( array.length === 0 ) ...
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: if ( array.length === 0 ) ...
- en: '// evaluate truthiness(GOOD):'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '// evaluate truthiness(GOOD):'
- en: if ( !array.length ) ...
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: if ( !array.length ) ...
- en: // When checking if string is not empty,
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: // When checking if string is not empty,
- en: '// (BAD):'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '// (BAD):'
- en: if ( string !== "" ) ...
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: if ( string !== "" ) ...
- en: '// evaluate truthiness (GOOD):'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '// evaluate truthiness (GOOD):'
- en: if ( string ) ...
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: if ( string ) ...
- en: // When checking if a string is empty,
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: // When checking if a string is empty,
- en: '// BAD:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '// BAD:'
- en: if ( string === "" ) ...
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: if ( string === "" ) ...
- en: '// evaluate falsy-ness (GOOD):'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '// evaluate falsy-ness (GOOD):'
- en: if ( !string ) ...
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: if ( !string ) ...
- en: // When checking if a reference is true,
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: // When checking if a reference is true,
- en: '// BAD:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '// BAD:'
- en: if ( foo === true ) ...
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: if ( foo === true ) ...
- en: // GOOD
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: // GOOD
- en: if ( foo ) ...
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: if ( foo ) ...
- en: // When checking if a reference is false,
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: // When checking if a reference is false,
- en: '// BAD:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '// BAD:'
- en: if ( foo === false ) ...
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: if ( foo === false ) ...
- en: // GOOD
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: // GOOD
- en: if ( !foo ) ...
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: if ( !foo ) ...
- en: '// this will also match: 0, "", null, undefined, NaN'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '// this will also match: 0, "", null, undefined, NaN'
- en: // If you MUST test for a boolean false, then use
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: // If you MUST test for a boolean false, then use
- en: if ( foo === false ) ...
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: if ( foo === false ) ...
- en: // a reference that might be null or undefined, but NOT false, "" or 0,
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: // a reference that might be null or undefined, but NOT false, "" or 0,
- en: '// BAD:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '// BAD:'
- en: if ( foo === null || foo === undefined ) ...
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: if ( foo === null || foo === undefined ) ...
- en: // GOOD
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: // GOOD
- en: if ( foo == null ) ...
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: if ( foo == null ) ...
- en: // Don't complicate matters
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: // Don't complicate matters
- en: 'return x === 0 ? ''sunday'' : x === 1 ? ''Monday'' : ''Tuesday'';'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 'return x === 0 ? ''sunday'' : x === 1 ? ''Monday'' : ''Tuesday'';'
- en: '// Better:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '// Better:'
- en: if (x === 0) {
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: if (x === 0) {
- en: return 'Sunday';
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: return 'Sunday';
- en: '} else if (x === 1) {'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '} else if (x === 1) {'
- en: return 'Monday';
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: return 'Monday';
- en: '} else {'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: return 'Tuesday';
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: return 'Tuesday';
- en: '}'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '// Even Better:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '// Even Better:'
- en: switch (x) {
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: switch (x) {
- en: 'case 0:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 0:'
- en: return 'Sunday';
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: return 'Sunday';
- en: 'case 1:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 1:'
- en: return 'Monday';
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: return 'Monday';
- en: 'default:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 'default:'
- en: return 'Tuesday';
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: return 'Tuesday';
- en: '}'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE76]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: //Avoid single letter names. Be descriptive with your naming.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: //Avoid single letter names. Be descriptive with your naming.
- en: // bad
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: function q() {
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: function q() {
- en: '}'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // good
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: // good
- en: function query() {
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: function query() {
- en: '}'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: //Use camelCase when naming objects, functions, and instances.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: //Use camelCase when naming objects, functions, and instances.
- en: // bad
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: const OBJEcT = {};
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: const OBJEcT = {};
- en: const this_is_object = {};
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: const this_is_object = {};
- en: function c() {}
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: function c() {}
- en: // good
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: // good
- en: const thisIsObject = {};
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: const thisIsObject = {};
- en: function thisIsFunction() {}
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: function thisIsFunction() {}
- en: //Use PascalCase when naming constructors or classes.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: //Use PascalCase when naming constructors or classes.
- en: // bad
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: function user(options) {
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: function user(options) {
- en: this.name = options.name;
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: this.name = options.name;
- en: '}'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const bad = new user({
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: const bad = new user({
- en: 'name: ''nope'','
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ''nope'','
- en: '});'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // good
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: // good
- en: class User {
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: class User {
- en: constructor(options) {
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(options) {
- en: this.name = options.name;
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: this.name = options.name;
- en: '}'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const good = new User({
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: const good = new User({
- en: 'name: ''yup'','
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ''yup'','
- en: '});'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // Use a leading underscore _ when naming private properties.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: // Use a leading underscore _ when naming private properties.
- en: // bad
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: // bad
- en: this.__firstName__ = 'Panda';
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: this.__firstName__ = 'Panda';
- en: this.firstName_ = 'Panda';
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: this.firstName_ = 'Panda';
- en: // good
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: // good
- en: this._firstName = 'Panda';
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: this._firstName = 'Panda';
- en: '[PRE77]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'eval():'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 'eval():'
- en: '[PRE78]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: console.log(typeof eval(new String("1+1"))); // "object"
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof eval(new String("1+1"))); // "object"
- en: console.log(eval(new String("1+1")));        //1+1
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(eval(new String("1+1")));        //1+1
- en: console.log(eval("1+1"));                    // 2
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(eval("1+1"));                    // 2
- en: console.log(typeof eval("1+1"));             // returns "number"
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof eval("1+1"));             // returns "number"
- en: var expression = new String("1+1");
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: var expression = new String("1+1");
- en: console.log(eval(expression.toString()));    //2
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(eval(expression.toString()));    //2
- en: '[PRE79]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '''use strict'';'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: '[PRE80]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: function foo() {
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: function foo() {
- en: '''use strict'';'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: '}'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE81]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: function sloppyFunc() {
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: function sloppyFunc() {
- en: sloppyVar = 123;
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: sloppyVar = 123;
- en: '} sloppyFunc();  // creates global variable `sloppyVar`'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '} sloppyFunc();  // creates global variable `sloppyVar`'
- en: console.log(sloppyVar);  // 123
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(sloppyVar);  // 123
- en: '[PRE82]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: function strictFunc() {
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: function strictFunc() {
- en: '''use strict'';'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: strictVar = 123;
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: strictVar = 123;
- en: '}'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'strictFunc();  // ReferenceError: strictVar is not defined'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 'strictFunc();  // ReferenceError: strictVar is not defined'
- en: '[PRE83]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 010 === 8 true
  id: totrans-645
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 010 === 8 true
- en: '[PRE84]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: function f() {
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: function f() {
- en: '''use strict'';'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: return 010
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: return 010
- en: '}'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '//SyntaxError: Octal literals are not allowed in'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '//SyntaxError: Octal literals are not allowed in'
- en: '[PRE85]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: npm install jshint –g
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: npm install jshint –g
- en: '[PRE86]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'test.js file:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 'test.js file:'
- en: '[PRE87]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: function f(condition) {
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: function f(condition) {
- en: switch (condition) {
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: switch (condition) {
- en: 'case 1:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 1:'
- en: console.log(1);
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(1);
- en: 'case 2:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 'case 2:'
- en: console.log(1);
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(1);
- en: '}'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE88]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '>jshint test.js'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '>jshint test.js'
- en: 'test.js: line 4, col 19, Expected a ''break'' statement before ''case''.'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 'test.js: line 4, col 19, Expected a ''break'' statement before ''case''.'
- en: 1 error
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 1 error
- en: '[PRE89]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '{'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"asi": false,'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '"asi": false,'
- en: '"expr": true,'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '"expr": true,'
- en: '"loopfunc": true,'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '"loopfunc": true,'
- en: '"curly": false,'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '"curly": false,'
- en: '"evil": true,'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '"evil": true,'
- en: '"white": true,'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '"white": true,'
- en: '"undef": true,'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '"undef": true,'
- en: '"indent": 4'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '"indent": 4'
- en: '}'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Summary
  id: totrans-681
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: In this chapter, we set some foundations around JavaScript grammar, types, and
    stylistic considerations. We have consciously not talked about other important
    aspects such as functions, variable scopes, and closures primarily because they
    deserve their own place in this module. I am sure that this chapter helps you
    understand some of the primary concepts of JavaScript. With these foundations
    in place, we will take a look at how we can write professional quality JavaScript
    code.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们围绕JavaScript语法、类型和风格考虑建立了一些基础。我们有意没有讨论其他重要方面，比如函数、变量作用域和闭包，主要是因为它们应该在这个模块中有自己的位置。我相信这一章会帮助你理解JavaScript的一些基本概念。有了这些基础，我们将看看如何编写专业质量的JavaScript代码。
