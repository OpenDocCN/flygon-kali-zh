["```cs\n    <StackPanel Spacing=\"10\" Padding=\"10\" \n    \u00a0\u00a0\u00a0\u00a0toolkit:VisibleBoundsPadding.PaddingMask=\"All\" \n    \u00a0\u00a0\u00a0\u00a0Background=\"{ThemeResource \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ApplicationPageBackgroundThemeBrush}\">\n    \u00a0\u00a0\u00a0\u00a0<StackPanel x:Name=\"SignInForm\" Spacing=\"10\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<TextBox x:Name=\"UsernameInput\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AutomationProperties.AutomationId=\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"UsernameInput\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TextChanged=\"Username_TextChanged\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Header=\"Username\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<PasswordBox x:Name=\"PasswordInput\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AutomationProperties.AutomationId=\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"PasswordInput\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PasswordChanged=\"Password_PasswordChanged\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Header=\"Password\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<TextBlock x:Name=\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"SignInErrorMessageTextBlock\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AutomationProperties.AutomationId=\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SignInErrorMessageTextBlock\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Foreground=\"{ThemeResource \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SystemErrorTextColor}\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Visibility=\"Collapsed\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Button x:Name=\"SignInButton\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AutomationProperties.AutomationId=\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"SignInButton\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Click=\"SignInButton_Click\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Content=\"Sign in\" IsEnabled=\"False\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HorizontalAlignment=\"Center\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BorderThickness=\"1\"/>\n    \u00a0\u00a0\u00a0\u00a0</StackPanel>\n    \u00a0\u00a0\u00a0\u00a0<TextBlock x:Name=\"SignedInLabel\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AutomationProperties.AutomationId=\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"SignedInLabel\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Text=\"Successfully signed in!\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Visibility=\"Collapsed\"/>\n    </StackPanel>\n    ```", "```cs\n    using UnoBookRail.Common.Auth;\n    ...\n    private void Username_TextChanged(object sender, TextChangedEventArgs e)\n    {\n    \u00a0\u00a0\u00a0\u00a0SignInButton.IsEnabled = UsernameInput.Text.Length\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0> 0 && PasswordInput.Password.Length > 0;\n    }\n    private void Password_PasswordChanged(object sender, RoutedEventArgs e)\n    {\n    \u00a0\u00a0\u00a0\u00a0SignInButton.IsEnabled = UsernameInput.Text.Length\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0> 0 && PasswordInput.Password.Length > 0;\n    }\n    private void SignInButton_Click(object sender, RoutedEventArgs args)\n    {\n    \u00a0\u00a0\u00a0\u00a0var signInResult = Authentication.SignIn(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UsernameInput.Text, PasswordInput.Password);\n    \u00a0\u00a0\u00a0\u00a0if(!signInResult.IsSuccessful && \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0signInResult.Messages.Count > 0)\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SignInErrorMessageTextBlock.Text = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0signInResult.Messages[0];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SignInErrorMessageTextBlock.Visibility = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Visibility.Visible;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SignInErrorMessageTextBlock.Visibility = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Visibility.Collapsed;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SignInForm.Visibility = Visibility.Collapsed;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SignedInLabel.Visibility = Visibility.Visible;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cs\n    <PropertyGroup Condition=\"'$(Configuration)'=='Debug' or '$(IsUiAutomationMappingEnabled)'=='True'\"> \n    \u00a0\u00a0\u00a0\u00a0<IsUiAutomationMappingEnabled>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0True</IsUiAutomationMappingEnabled>\n    \u00a0\u00a0\u00a0\u00a0<DefineConstants>$(DefineConstants);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0USE_UITESTS</DefineConstants>\n     </PropertyGroup>\n    ```", "```cs\n    #if __IOS__ && USE_UITESTS\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Launches Xamarin Test Cloud Agent\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Xamarin.Calabash.Start();\n     #endif\n    ```", "```cs\n    dotnet new unoapp-uitest\n    ```", "```cs\n    public readonly static string iOSAppName = \"UnoBook.UnoAutomatedTestsApp\";\n    public readonly static string AndroidAppName = \"UnoBook.UnoAutomatedTestsApp\";\n    public readonly static string WebAssemblyDefaultUri = \"http://localhost:[PORT]/\";\n    ```", "```cs\n<!-- Setting AutomationId to reference button from UI test -->\n<Button AutomationProperties.AutomationId=\"SignInButton Content=\"Sign in\"/>\n```", "```cs\nApp.Tap(\"SignInButton\");\n```", "```cs\nusing Query=System.Func<Uno.UITest.IAppQuery,Uno.UITest.IAppQuery>;\n```", "```cs\nQuery signInButton = q => q.Marked(\"SignInButton\");\nApp.Tap(signInButton);\n```", "```cs\n    using NUnit.Framework;\n    using Query = System.Func<Uno.UITest.IAppQuery, Uno.UITest.IAppQuery>;\n    namespace UnoAutomatedTestsApp.UITests.Tests\n    {\n    \u00a0\u00a0\u00a0\u00a0public class SignInTests : TestBase\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cs\n    App.WaitForElement(\"UsernameInput\");\n    App.WaitForElement(\"PasswordInput\");\n    App.WaitForElement(\"SignInButton\");\n    ```", "```cs\npublic class SignInTests : TestBase\n{\n\u00a0\u00a0\u00a0\u00a0[Test]\n\u00a0\u00a0\u00a0\u00a0public void VerifySignInRenders()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App.WaitForElement(\"UsernameInput\", \"Username input \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wasn't found.\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App.WaitForElement(\"PasswordInput\", \"Password input \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wasn't found.\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App.WaitForElement(\"SignInButton\", \"Sign in button \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wasn't found.\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n    Query usernameInput = q => q.Marked(\"UsernameInput\");\n    Query passwordInput = q => q.Marked(\"PasswordInput\");\n    Query signInButton = q => q.Marked(\"SignInButton\");\n    ```", "```cs\n    App.ClearText(usernameInput);\n    App.EnterText(usernameInput, \"test\"); App.ClearText(passwordInput);\n    App.EnterText(passwordInput, \"test\");\n    ```", "```cs\n    var signInButtonResult = App.WaitForElement(signInButton);\n    Assert.IsTrue(signInButtonResult[0].Enabled, \"Sign in button was not enabled.\"); \n    ```", "```cs\n    Query errorMessageLabel = q => q.Marked(\"SignInErrorMessageTextBlock\");\n    ```", "```cs\n    App.ClearText(usernameInput);\n    App.EnterText(usernameInput, \"invalid\");\n    App.ClearText(passwordInput);\n    App.EnterText(passwordInput, \"invalid\");\n    App.Tap(signInButton);\n    ```", "```cs\n    using System.Linq;\n    using Uno.UITest.Helpers.Queries;\n    ```", "```cs\n    var errorMessage = App.Query(q => errorMessageLabel (q).GetDependencyPropertyValue(\"Text\").Value<string>()).First();\n    Assert.AreEqual(errorMessage, \"Username or password invalid or user does not exist.\", \"Error message not correct.\"); \n    ```", "```cs\n    App.ClearText(usernameInput);\n    App.EnterText(usernameInput, \"demo\");\n    App.ClearText(passwordInput);\n    App.EnterText(passwordInput, \"1234\");\n    App.Tap(signInButton);\n    ```", "```cs\n    var signedInMessage = App.Query(q => signedInLabel(q).GetDependencyPropertyValue(\"Text\").Value<string>()).First();\n    Assert.AreEqual(signedInMessage, \"Successfully signed in!\", \"Success message not correct.\"); \n    ```", "```cs\n    using OpenQA.Selenium.Appium;\n    using OpenQA.Selenium.Appium.Windows;\n    ```", "```cs\n    private static WindowsDriver<WindowsElement> session;\n    [AssemblyInitialize]\n    public static void InitializeTests(TestContext _)\n    {\n    \u00a0\u00a0\u00a0\u00a0AppiumOptions appiumOptions = new AppiumOptions();\n    \u00a0\u00a0\u00a0\u00a0appiumOptions.AddAdditionalCapability(\"app\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"WindowsDriver object to interact with the app, we store a reference to it. Note that the highlighted section will be different for your app. To get the correct value, open the Package.appxmanifest file and open the Packaging tab. Then, replace the highlighted part with the Package family name value.\n    ```", "```cs\n    [TestMethod]\n    public void VerifyButtonIsEnabledWithUsernameAndPasswordUWP()\n    {\n    \u00a0\u00a0\u00a0\u00a0var usernameInput = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session.FindElementByAccessibilityId(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"usernameInput\");\n    \u00a0\u00a0\u00a0\u00a0usernameInput.SendKeys(\"test\");\n    \u00a0\u00a0\u00a0\u00a0var passwordInput = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session.FindElementByAccessibilityId(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"passwordInput\");\n    \u00a0\u00a0\u00a0\u00a0passwordInput.SendKeys(\"test\");\n    \u00a0\u00a0\u00a0\u00a0var signInButton = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session.FindElementByAccessibilityId(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"signInButton\");\n    \u00a0\u00a0\u00a0\u00a0Assert.IsTrue(signInButton.Enabled, \"Sign in \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0button should be enabled.\");\n    }\n    ```", "```cs\n    using Axe.Windows.Automation;\n    using System.Diagnostics;\n    ```", "```cs\n    [TestMethod]\n    public void VerifySignInInterfaceIsAccessible()\n    {\n    \u00a0\u00a0\u00a0\u00a0var processes = Process.GetProcessesByName(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"UnoAutomatedTestsApp\");\n    \u00a0\u00a0\u00a0\u00a0Assert.IsTrue(processes.Length > 0);\n    \u00a0\u00a0\u00a0\u00a0var config = Config.Builder.ForProcessId(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0processes[0].Id).Build();\n    \u00a0\u00a0\u00a0\u00a0var scanner = ScannerFactory.CreateScanner(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0config);\n    \u00a0\u00a0\u00a0\u00a0Assert.IsTrue(scanner.Scan().ErrorCount == 0, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Accessibility issues found.\");\n    }\n    ```", "```cs\n    namespace UnoAutomatedTestsApp\n    {\n    \u00a0\u00a0\u00a0\u00a0public class DemoUtils\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static bool IsEven(int number)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return number % 2 == 0; \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cs\n    using UnoAutomatedTestsApp;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    namespace UnoAutomatedTests.UWPUnitTests\n    {\n    \u00a0\u00a0\u00a0\u00a0[TestClass]\n    \u00a0\u00a0\u00a0\u00a0public class DemoUtilsTests\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[TestMethod]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void VerifyEvenNumberIsEven()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Assert.IsTrue(DemoUtils.IsEven(2), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Number 2 should be even\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```"]