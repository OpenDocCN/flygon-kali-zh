- en: 09
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 09
- en: Working with Files, Streams, and Serialization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文件、流和序列化
- en: This chapter is about reading and writing to files and streams, text encoding,
    and serialization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及文件和流的读写、文本编码和序列化。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Managing the filesystem
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理文件系统
- en: Reading and writing with streams
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用流进行读写
- en: Encoding and decoding text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码和解码文本
- en: Serializing object graphs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列化对象图
- en: Controlling JSON processing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制JSON处理
- en: Managing the filesystem
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文件系统
- en: Your applications will often need to perform input and output operations with
    files and directories in different environments. The `System` and `System.IO`
    namespaces contain classes for this purpose.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序经常需要在不同的环境中执行文件和目录的输入和输出操作。`System`和`System.IO`命名空间包含了用于此目的的类。
- en: Handling cross-platform environments and filesystems
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理跨平台环境和文件系统
- en: 'Let''s explore how to handle cross-platform environments like the differences
    between Windows and Linux or macOS. Paths are different for Windows, macOS, and
    Linux, so we will start by exploring how .NET handles this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何处理跨平台环境，比如Windows和Linux或macOS之间的差异。Windows、macOS和Linux的路径是不同的，所以我们将从探索.NET如何处理这一点开始：
- en: Use your preferred code editor to create a new solution/workspace named `Chapter09`
    .
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建一个名为`Chapter09`的新解决方案/工作空间。
- en: 'Add a console app project, as defined in the following list:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制台应用程序项目，如下列表所示：
- en: 'Project template: **Console Application** /`console`'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板:**控制台应用程序**/`console`
- en: 'Workspace/solution file and folder: `Chapter09`'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作空间/解决方案文件和文件夹：`Chapter09`
- en: 'Project file and folder: `WorkingWithFileSystems`'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`WorkingWithFileSystems`
- en: 'In `Program.cs` , add statements to statically import the `System.Console`
    , `System.IO.Directory` , `System.Environment` , and `System.IO.Path` types, as
    shown in the following code:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加语句来静态导入`System.Console`、`System.IO.Directory`、`System.Environment`和`System.IO.Path`类型，如下面的代码所示：
- en: '```cs'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Console;
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: using
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.IO.Directory;
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.Directory;
- en: using
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.IO.Path;
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.Path;
- en: using
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Environment;
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: System.Environment;
- en: '```'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , create a static `OutputFileSystemInfo` method, and write
    statements in it to do the following:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，创建一个静态的`OutputFileSystemInfo`方法，并在其中编写语句来执行以下操作：
- en: Output the path and directory separation characters.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出路径和目录分隔符。
- en: Output the path of the current directory.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出当前目录的路径。
- en: Output some special paths for system files, temporary files, and documents.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出一些系统文件、临时文件和文档的特殊路径。
- en: '```cs'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OutputFileSystemInfo
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: OutputFileSystemInfo
- en: ()
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0,-33} {1}"
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: "Path.PathSeparator"'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0："Path.PathSeparator"
- en: ','
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: PathSeparator);'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:PathSeparator);
- en: WriteLine("{0,-33} {1}"
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: "Path.DirectorySeparatorChar"'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:"Path.DirectorySeparatorChar"
- en: ','
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: DirectorySeparatorChar);'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:DirectorySeparatorChar);
- en: WriteLine("{0,-33} {1}"
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: "Directory.GetCurrentDirectory()"'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0："Directory.GetCurrentDirectory()"
- en: ','
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: GetCurrentDirectory());'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:GetCurrentDirectory());
- en: WriteLine("{0,-33} {1}"
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: "Environment.CurrentDirectory"'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:"Environment.CurrentDirectory"
- en: ','
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: CurrentDirectory);'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:CurrentDirectory);
- en: WriteLine("{0,-33} {1}"
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: "Environment.SystemDirectory"'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:"Environment.SystemDirectory"
- en: ','
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: SystemDirectory);'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:SystemDirectory);
- en: WriteLine("{0,-33} {1}"
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: "Path.GetTempPath()"'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:"Path.GetTempPath()"
- en: ','
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: GetTempPath());'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:GetTempPath());
- en: WriteLine("GetFolderPath(SpecialFolder"
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("GetFolderPath(SpecialFolder"
- en: );
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("{0,-33} {1}"
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: " .System)"'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:".System)"
- en: ','
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: GetFolderPath(SpecialFolder.System));'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:GetFolderPath(SpecialFolder.System));
- en: WriteLine("{0,-33} {1}"
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: " .ApplicationData)"'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:".ApplicationData)"
- en: ','
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: GetFolderPath(SpecialFolder.ApplicationData));'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:GetFolderPath(SpecialFolder.ApplicationData));
- en: WriteLine("{0,-33} {1}"
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: " .MyDocuments)"'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:".MyDocuments)"
- en: ','
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: GetFolderPath(SpecialFolder.MyDocuments));'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:GetFolderPath(SpecialFolder.MyDocuments));
- en: WriteLine("{0,-33} {1}"
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-33} {1}"
- en: ', arg0: " .Personal)"'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ，arg0:".Personal)"
- en: ','
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: GetFolderPath(SpecialFolder.Personal));'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: arg1:GetFolderPath(SpecialFolder.Personal));
- en: '}'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The `Environment` type has many other useful members that we did not use in
    this code, including the `GetEnvironmentVariables` method and the `OSVersion`
    and `ProcessorCount` properties.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Environment`类型还有许多其他有用的成员，我们在这段代码中没有使用，包括`GetEnvironmentVariables`方法和`OSVersion`和`ProcessorCount`属性。'
- en: 'In `Program.cs` , above the function, call the `OutputFileSystemInfo` method,
    as shown in the following code:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在函数上方，调用`OutputFileSystemInfo`方法，如下面的代码所示：
- en: '```cs'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: OutputFileSystemInfo();
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: OutputFileSystemInfo();
- en: '```'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code and view the result, as shown in *Figure 9.1* :![Text Description
    automatically generated](img/Image00086.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如*图9.1*所示：![自动生成的文本描述](img/Image00086.jpg)
- en: 'Figure 9.1: Running your application to show filesystem information on Windows'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：运行应用程序以在Windows上显示文件系统信息
- en: When running the console app using `dotnet run` with Visual Studio Code, the
    `CurrentDirectory` will be the project folder, not a folder inside `bin` .
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Visual Studio Code的`dotnet run`运行控制台应用程序时，`CurrentDirectory`将是项目文件夹，而不是`bin`文件夹中的文件夹。
- en: '**Good Practice** : Windows uses a backslash `\` for the directory separator
    character. macOS and Linux use a forward slash `/` for the directory separator
    character. Do not assume what character is used in your code when combining paths.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：Windows使用反斜杠`\`作为目录分隔符。macOS和Linux使用正斜杠`/`作为目录分隔符。在组合路径时，不要假设在您的代码中使用哪个字符。'
- en: Managing drives
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理驱动器
- en: To manage drives, use the `DriveInfo` type, which has a static method that returns
    information about all the drives connected to your computer. Each drive has a
    drive type.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理驱动器，请使用`DriveInfo`类型，该类型具有一个静态方法，返回有关连接到计算机的所有驱动器的信息。每个驱动器都有一个驱动器类型。
- en: 'Let''s explore drives:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索驱动器：
- en: 'Create a `WorkWithDrives` method, and write statements to get all the drives
    and output their name, type, size, available free space, and format, but only
    if the drive is ready, as shown in the following code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`WorkWithDrives`方法，并编写语句来获取所有驱动器并输出它们的名称、类型、大小、可用空间和格式，但仅当驱动器准备就绪时，如下面的代码所示：
- en: '```cs'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: static
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WorkWithDrives
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如*图9.2*所示：![](img/Image00087.jpg)
- en: ()
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: // 为新文件夹定义一个目录路径
- en: WriteLine("{0,-30} | {1,-10} | {2,-7} | {3,18} | {4,18}"
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭文件以释放系统资源和文件锁（这通常在`try-finally`语句块内完成，以确保即使在写入时发生异常，文件也会关闭）。
- en: ','
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '"NAME"'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉先前的方法调用，并添加对`WorkWithDirectories`的调用。
- en: ', "TYPE"'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: // 删除目录
- en: ', "FORMAT"'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ', "格式"'
- en: ', "SIZE (BYTES)"'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: GetFolderPath(SpecialFolder.Personal),
- en: ', "FREE SPACE"'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理文件时，您可以像处理目录类型一样静态导入文件类型，但是，对于下一个示例，我们不会这样做，因为它具有与目录类型相同的一些方法，并且它们会发生冲突。文件类型的名称足够短，在这种情况下并不重要。步骤如下：
- en: );
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文本文件。
- en: (DriveInfo drive in
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: DriveInfo.GetDrives()中
- en: DriveInfo.GetDrives())
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: DriveInfo驱动器）
- en: '{'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，并使用您喜欢的文件管理工具确认目录已创建后，再按Enter键将其删除，如下面的输出所示：
- en: (drive.IsReady)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("删除它..."
- en: '{'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(
- en: '"{0,-30} | {1,-10} | {2,-7} | {3,18:N0} | {4,18:N0}"'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: // 从用户文件夹开始
- en: ','
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: drive.Name, drive.DriveType, drive.DriveFormat,
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ', drive.Name, drive.DriveType);'
- en: drive.TotalSize, drive.AvailableFreeSpace);
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 管理目录
- en: '}'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: else
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-30} | {1,-10} | {2,-7} | {3,18} | {4,18}"
- en: WriteLine("{0,-30} | {1,-10}"
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理目录，请使用`Directory`，`Path`和`Environment`静态类。这些类型包括许多成员，用于处理文件系统。
- en: ', drive.Name, drive.DriveType);'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '"代码"'
- en: '}'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: （驱动器已准备就绪）
- en: '```'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Check that a drive is ready before reading properties such
    as `TotalSize` or you will see an exception thrown with removable drives.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: ', "大小（字节）"'
- en: 'In `Program.cs` , comment out the previous method call and add a call to `WorkWithDrives`
    , as shown highlighted in the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉先前的方法调用，并添加对`WorkWithDrives`的调用，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '{newFolder}'
- en: '**// OutputFileSystemInfo();**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**// OutputFileSystemInfo();**'
- en: '**WorkWithDrives();**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: '```'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Run the code and view the result, as shown in *Figure 9.2* :![](img/Image00087.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: );
- en: 'Figure 9.2: Showing drive information on Windows'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: Managing directories
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '{'
- en: To manage directories, use the `Directory` , `Path` , and `Environment` static
    classes. These types include many members for working with the filesystem.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建自定义路径时，必须小心编写代码，以便不对平台（例如，用于目录分隔符字符）做任何假设：
- en: 'When constructing custom paths, you must be careful to write your code so that
    it makes no assumptions about the platform, for example, what to use for the directory
    separator character:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ReadLine();
- en: 'Create a `WorkWithDirectories` method, and write statements to do the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '```'
- en: Define a custom path under the user's home directory by creating an array of
    strings for the directory names, and then properly combining them with the `Path`
    type's `Combine` method.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过创建字符串数组来定义用户主目录下的自定义路径名称，然后使用`Path`类型的`Combine`方法正确组合它们。
- en: Check for the existence of the custom directory path using the `Exists` method
    of the `Directory` class.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Directory`类的`Exists`方法检查自定义目录路径是否存在。
- en: 'Create and then delete the directory, including files and subdirectories within
    it, using the `CreateDirectory` and `Delete` methods of the `Directory` class:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建然后删除目录，包括其中的文件和子目录，使用`Directory`类的`CreateDirectory`和`Delete`方法：
- en: '```cs'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ', "可用空间"'
- en: WorkWithDirectories
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ()
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: '{'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: drive.TotalSize, drive.AvailableFreeSpace);
- en: // define a directory path for a new folder
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("创建它..."
- en: // starting in the user's folder
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: ', "类型"'
- en: string
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：在Windows上显示驱动器信息
- en: newFolder = Combine(
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: newFolder = Combine(
- en: GetFolderPath(SpecialFolder.Personal),
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: drive.Name, drive.DriveType, drive.DriveFormat,
- en: '"Code"'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: ', "Chapter09"'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建目录
- en: ', "NewFolder"'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ', "NewFolder"'
- en: );
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Working with:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '{newFolder}'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件复制到备份。
- en: '"'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-30} | {1,-10}"
- en: );
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // check if it exists
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`WorkWithFiles`方法，并编写语句来执行以下操作：
- en: WriteLine($"Does it exist?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"它存在吗？
- en: '{Exists(newFolder)}'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**WorkWithDrives();**'
- en: '"'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // create directory
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: WriteLine("Creating it..."
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: // 检查它是否存在
- en: );
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 检查文件是否存在。
- en: CreateDirectory(newFolder);
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"Does it exist?
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '{Exists(newFolder)}'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '{Exists(newFolder)}'
- en: '"'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 向文件写入一行文本。
- en: );
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: 'Write("Confirm the directory exists, and then press ENTER: "'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`WorkWithDirectories`方法，并编写语句来执行以下操作：
- en: );
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 确认目录存在，然后按ENTER键：
- en: ReadLine();
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: // delete directory
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ', "第九章"'
- en: WriteLine("Deleting it..."
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithDirectories
- en: );
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在读取`TotalSize`等属性之前，请检查驱动器是否准备就绪，否则将看到异常抛出可移动驱动器。'
- en: 'Delete(newFolder, recursive: true'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: );
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'Delete(newFolder, recursive: true'
- en: WriteLine($"Does it exist?
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: '{Exists(newFolder)}'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '{Exists(newFolder)}'
- en: '"'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"它存在吗？
- en: );
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 它存在吗？ False
- en: '}'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment out the previous method call, and add a call to `WorkWithDirectories`
    .
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '{Exists(newFolder)}'
- en: 'Run the code and view the result, and use your favorite file management tool
    to confirm that the directory has been created before pressing Enter to delete
    it, as shown in the following output:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '}'
- en: '```cs'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Write("确认目录存在，然后按ENTER键："
- en: 'Working with: /Users/markjprice/Code/Chapter09/NewFolder Does it exist? False'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Creating it...
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 创建它...
- en: Does it exist? True
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 它存在吗？ True
- en: 'Confirm the directory exists, and then press ENTER:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: Deleting it...
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 删除它...
- en: Does it exist? False
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '```'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: CreateDirectory(newFolder);
- en: Managing files
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理文件
- en: 'When working with files, you could statically import the file type, just as
    we did for the directory type, but, for the next example, we will not, because
    it has some of the same methods as the directory type and they would conflict.
    The file type has a short enough name not to matter in this case. The steps are
    as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithDrives
- en: 'Create a `WorkWithFiles` method, and write statements to do the following:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在处理：/Users/markjprice/Code/Chapter09/NewFolder 它存在吗？ False
- en: Check for the existence of a file.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"名称"'
- en: Create a text file.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WriteLine($"正在处理：
- en: Write a line of text to the file.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"{0,-30} | {1,-10} | {2,-7} | {3,18:N0} | {4,18:N0}"'
- en: Close the file to release system resources and file locks (this would normally
    be done inside a `try-finally` statement block to ensure that the file is closed
    even if an exception occurs when writing to it).
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WriteLine($"它存在吗？
- en: Copy the file to a backup.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （在
- en: Delete the original file.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除原始文件。
- en: 'Read the backup file''s contents and then close it:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取备份文件的内容，然后关闭它：
- en: '```cs'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkWithFiles
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithFiles
- en: ()
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // define a directory path to output files
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义一个输出文件的目录路径
- en: // starting in the user's folder
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: // 从用户文件夹开始
- en: string
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: dir = Combine(
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: dir = Combine(
- en: GetFolderPath(SpecialFolder.Personal),
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: GetFolderPath(SpecialFolder.Personal),
- en: '"Code"'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '"代码"'
- en: ', "Chapter09"'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ，"Chapter09"
- en: ', "OutputFiles"'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: ，"OutputFiles"
- en: );
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: CreateDirectory(dir);
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: CreateDirectory(dir);
- en: // define file paths
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义文件路径
- en: string
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: textFile = Combine(dir, "Dummy.txt"
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: textFile = Combine(dir, "Dummy.txt"
- en: );
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: string
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: backupFile = Combine(dir, "Dummy.bak"
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: backupFile = Combine(dir，"Dummy.bak"
- en: );
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Working with:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"正在处理：
- en: '{textFile}'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '{textFile}'
- en: '"'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // check if a file exists
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: // 检查文件是否存在
- en: WriteLine($"Does it exist?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"它存在吗？
- en: '{File.Exists(textFile)}'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '{File.Exists(textFile)}'
- en: '"'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // create a new text file and write a line to it
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个新的文本文件并向其写入一行
- en: StreamWriter textWriter = File.CreateText(textFile);
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter textWriter = File.CreateText(textFile);
- en: textWriter.WriteLine("Hello, C#!"
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: textWriter.WriteLine("Hello, C#!"
- en: );
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: textWriter.Close(); // close file and release resources
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: textWriter.Close(); //关闭文件并释放资源
- en: WriteLine($"Does it exist?
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"它存在吗？
- en: '{File.Exists(textFile)}'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '{File.Exists(textFile)}'
- en: '"'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // copy the file, and overwrite if it already exists
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: // 复制文件，并覆盖如果已存在
- en: 'File.Copy(sourceFileName: textFile,'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'File.Copy(sourceFileName: textFile,'
- en: 'destFileName: backupFile, overwrite: true'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 'destFileName: backupFile, overwrite: true'
- en: );
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine(
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(
- en: $"Does
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: $"是否存在
- en: '{backupFile}'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '{backupFile}'
- en: exist?
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 存在吗？
- en: '{File.Exists(backupFile)}'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '{File.Exists(backupFile)}'
- en: '"'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'Write("Confirm the files exist, and then press ENTER: "'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Write("确认文件存在，然后按ENTER键："
- en: );
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: ReadLine();
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: ReadLine();
- en: // delete file
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: // 删除文件
- en: File.Delete(textFile);
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: File.Delete(textFile);
- en: WriteLine($"Does it exist?
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"它存在吗？
- en: '{File.Exists(textFile)}'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '{File.Exists(textFile)}'
- en: '"'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // read from the text file backup
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: // 从文本文件备份中读取
- en: WriteLine($"Reading contents of
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"读取
- en: '{backupFile}'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '{backupFile}'
- en: :"
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: :"
- en: );
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: StreamReader textReader = File.OpenText(backupFile);
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: StreamReader textReader = File.OpenText(backupFile);
- en: WriteLine(textReader.ReadToEnd());
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(textReader.ReadToEnd());
- en: textReader.Close();
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: textReader.Close();
- en: '}'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment out the previous method call, and add a call to `WorkWithFiles`
    .
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉先前的方法调用，并添加对`WorkWithFiles`的调用。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下输出所示：
- en: '```cs'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Working with: /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.txt'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 正在处理：/Users/markjprice/Code/Chapter09/OutputFiles/Dummy.txt
- en: Does it exist? False
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 它存在吗？ False
- en: Does it exist? True
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 它存在吗？ True
- en: Does /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak exist? True
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak存在吗？ True
- en: 'Confirm the files exist, and then press ENTER:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 确认文件存在，然后按ENTER键：
- en: Does it exist? False
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 它存在吗？ False
- en: 'Reading contents of /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 读取/Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak的内容：
- en: Hello, C#!
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Hello, C#!
- en: '```'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Managing paths
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理路径
- en: 'Sometimes, you need to work with parts of a path; for example, you might want
    to extract just the folder name, the filename, or the extension. Sometimes, you
    need to generate temporary folders and filenames. You can do this with static
    methods of the `Path` class:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要处理路径的部分；例如，您可能只想提取文件夹名称、文件名或扩展名。有时，您需要生成临时文件夹和文件名。您可以使用`Path`类的静态方法来实现这一点：
- en: 'Add the following statements to the end of the `WorkWithFiles` method:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkWithFiles`方法的末尾添加以下语句：
- en: '```cs'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // Managing paths
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: // 管理路径
- en: 'WriteLine($"Folder Name:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"文件夹名称：
- en: '{GetDirectoryName(textFile)}'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '{GetDirectoryName(textFile)}'
- en: '"'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"File Name:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"文件名：
- en: '{GetFileName(textFile)}'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '{GetFileName(textFile)}'
- en: '"'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine("File Name without Extension: {0}"'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("没有扩展名的文件名：{0}"
- en: ','
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: GetFileNameWithoutExtension(textFile));
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: GetFileNameWithoutExtension(textFile));
- en: 'WriteLine($"File Extension:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"文件扩展名：
- en: '{GetExtension(textFile)}'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '{GetExtension(textFile)}'
- en: '"'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Random File Name:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"随机文件名：
- en: '{GetRandomFileName()}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '{GetRandomFileName()}'
- en: '"'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'WriteLine($"Temporary File Name:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"临时文件名：
- en: '{GetTempFileName()}'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '{GetTempFileName()}'
- en: '"'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下输出所示：
- en: '```cs'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Folder Name: /Users/markjprice/Code/Chapter09/OutputFiles'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹名称：/Users/markjprice/Code/Chapter09/OutputFiles
- en: 'File Name: Dummy.txt'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名：Dummy.txt
- en: 'File Name without Extension: Dummy'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 没有扩展名的文件名：Dummy
- en: 'File Extension: .txt'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 文件扩展名：.txt
- en: 'Random File Name: u45w1zki.co3'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 随机文件名：u45w1zki.co3
- en: 'Temporary File Name:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 临时文件名：
- en: /var/folders/tz/xx0y_wld5sx0nv0fjtq4tnpc0000gn/T/tmpyqrepP.tmp
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: /var/folders/tz/xx0y_wld5sx0nv0fjtq4tnpc0000gn/T/tmpyqrepP.tmp
- en: '```'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`GetTempFileName` creates a zero-byte file and returns its name, ready for
    you to use. `GetRandomFileName` just returns a filename; it doesn''t create the
    file.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetTempFileName`创建一个零字节的文件并返回其名称，准备供您使用。`GetRandomFileName`只返回一个文件名；它不会创建文件。'
- en: Getting file information
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取文件信息
- en: To get more information about a file or directory, for example, its size or
    when it was last accessed, you can create an instance of the `FileInfo` or `DirectoryInfo`
    class.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关文件或目录的更多信息，例如其大小或上次访问时间，可以创建`FileInfo`或`DirectoryInfo`类的实例。
- en: '`FileInfo` and `DirectoryInfo` both inherit from `FileSystemInfo` , so they
    both have members such as `LastAccessTime` and `Delete` , as well as extra members
    specific to themselves, as shown in the following table:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileInfo`和`DirectoryInfo`都继承自`FileSystemInfo`，因此它们都有诸如`LastAccessTime`和`Delete`之类的成员，以及特定于自身的额外成员，如下表所示：'
- en: '| Class | Members |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| 类 | 成员 |'
- en: '| `FileSystemInfo` | Fields: `FullPath` , `OriginalPath`Properties: `Attributes`
    , `CreationTime` , `CreationTimeUtc` , `Exists` , `Extension` , `FullName` , `LastAccessTime`
    , `LastAccessTimeUtc` , `LastWriteTime` , `LastWriteTimeUtc` , `Name`Methods:
    `Delete` , `GetObjectData` , `Refresh` |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| `FileSystemInfo` | Fields: `FullPath`，`OriginalPath`Properties: `Attributes`，`CreationTime`，`CreationTimeUtc`，`Exists`，`Extension`，`FullName`，`LastAccessTime`，`LastAccessTimeUtc`，`LastWriteTime`，`LastWriteTimeUtc`，`Name`Methods:
    `Delete`，`GetObjectData`，`Refresh` |'
- en: '| `DirectoryInfo` | Properties: `Parent` , `Root`Methods: `Create` , `CreateSubdirectory`
    , `EnumerateDirectories` , `EnumerateFiles` , `EnumerateFileSystemInfos` , `GetAccessControl`
    , `GetDirectories` , `GetFiles` , `GetFileSystemInfos` , `MoveTo` , `SetAccessControl`
    |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `DirectoryInfo` | 属性：`Parent`，`Root`方法：`Create`，`CreateSubdirectory`，`EnumerateDirectories`，`EnumerateFiles`，`EnumerateFileSystemInfos`，`GetAccessControl`，`GetDirectories`，`GetFiles`，`GetFileSystemInfos`，`MoveTo`，`SetAccessControl`
    |'
- en: '| `FileInfo` | Properties: `Directory` , `DirectoryName` , `IsReadOnly` , `Length`Methods:
    `AppendText` , `CopyTo` , `Create` , `CreateText` , `Decrypt` , `Encrypt` , `GetAccessControl`
    , `MoveTo` , `Open` , `OpenRead` , `OpenText` , `OpenWrite` , `Replace` , `SetAccessControl`
    |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| `FileInfo` | 属性：`Directory`，`DirectoryName`，`IsReadOnly`，`Length`方法：`AppendText`，`CopyTo`，`Create`，`CreateText`，`Decrypt`，`Encrypt`，`GetAccessControl`，`MoveTo`，`Open`，`OpenRead`，`OpenText`，`OpenWrite`，`Replace`，`SetAccessControl`
    |'
- en: 'Let''s write some code that uses a `FileInfo` instance for efficiently performing
    multiple actions on a file:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些使用`FileInfo`实例的代码，以便有效地对文件执行多个操作：
- en: 'Add statements to the end of the `WorkWithFiles` method to create an instance
    of `FileInfo` for the backup file and write information about it to the console,
    as shown in the following code:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkWithFiles`方法的末尾添加语句，为备份文件创建一个`FileInfo`实例，并将有关它的信息写入控制台，如下所示的代码：
- en: '```cs'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: FileInfo info = new
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo info = new
- en: (backupFile);
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: (backupFile);
- en: WriteLine($"
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{backupFile}'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '{backupFile}'
- en: :"
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: :"
- en: );
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"Contains
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"包含
- en: '{info.Length}'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '{info.Length}'
- en: bytes"
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 字节"
- en: );
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"Last accessed
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"上次访问
- en: '{info.LastAccessTime}'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '{info.LastAccessTime}'
- en: '"'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"Has readonly set to
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"具有只读设置为
- en: '{info.IsReadOnly}'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '{info.IsReadOnly}'
- en: '"'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下所示：
- en: '```cs'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '/Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/OutputFiles/Dummy.bak：
- en: Contains 11 bytes
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 包含11个字节
- en: Last accessed 26/10/2021 09:08:26
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 上次访问 26/10/2021 09:08:26
- en: Has readonly set to False
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 具有只读设置为False
- en: '```'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The number of bytes might be different on your operating system because operating
    systems can use different line endings.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 字节数可能因您的操作系统而异，因为操作系统可以使用不同的换行符。
- en: Controlling how you work with files
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制如何处理文件
- en: When working with files, you often need to control how they are opened. The
    `File.Open` method has overloads to specify additional options using `enum` values.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理文件时，通常需要控制它们的打开方式。`File.Open`方法有多个重载，可以使用`enum`值指定附加选项。
- en: 'The `enum` types are as follows:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`enum`类型如下：'
- en: '`FileMode` : This controls what you want to do with the file, like `CreateNew`
    , `OpenOrCreate` , or `Truncate` .'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileMode`：这控制您要对文件执行的操作，比如`CreateNew`，`OpenOrCreate`或`Truncate`。'
- en: '`FileAccess` : This controls what level of access you need, like `ReadWrite`
    .'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileAccess`：这控制您需要的访问级别，比如`ReadWrite`。'
- en: '`FileShare` : This controls locks on the file to allow other processes the
    specified level of access, like `Read` .'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileShare`：这控制文件上的锁定，以允许其他进程指定级别的访问，比如`Read`。'
- en: 'You might want to open a file and read from it, and allow other processes to
    read it too, as shown in the following code:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想要打开一个文件并从中读取，并允许其他进程也读取它，如下所示的代码：
- en: '```cs'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: FileStream file = File.Open(pathToFile,
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: FileStream file = File.Open(pathToFile，
- en: FileMode.Open, FileAccess.Read, FileShare.Read);
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: FileMode.Open, FileAccess.Read, FileShare.Read);
- en: '```'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'There is also an `enum` for attributes of a file as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个文件属性的`enum`如下：
- en: '`FileAttributes` : This is to check a `FileSystemInfo` -derived types'' `Attributes`
    property for values like `Archive` and `Encrypted` .'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileAttributes`：这是为了检查`FileSystemInfo` -派生类型的`Attributes`属性的值，如`Archive`和`Encrypted`。'
- en: 'You could check a file or directory''s attributes, as shown in the following
    code:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查文件或目录的属性，如下所示的代码：
- en: '```cs'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: FileInfo info = new
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo info = new
- en: (backupFile);
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: (backupFile);
- en: WriteLine("Is the backup file compressed? {0}"
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("备份文件是否压缩？{0}"
- en: ','
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: info.Attributes.HasFlag(FileAttributes.Compressed));
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: info.Attributes.HasFlag(FileAttributes.Compressed));
- en: '```'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Reading and writing with streams
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流进行读写
- en: A **stream** is a sequence of bytes that can be read from and written to. Although
    files can be processed rather like arrays, with random access provided by knowing
    the position of a byte within the file, it can be useful to process files as a
    stream in which the bytes can be accessed in sequential order.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**流**是可以从中读取和写入的字节序列。尽管文件可以像数组一样进行处理，通过知道文件中的字节位置提供随机访问，但将文件作为可以按顺序访问的流进行处理可能是有用的。'
- en: Streams can also be used to process terminal input and output and networking
    resources such as sockets and ports that do not provide random access and cannot
    seek (that is, move) to a position. You can write code to process some arbitrary
    bytes without knowing or caring where it comes from. Your code simply reads or
    writes to a stream, and another piece of code handles where the bytes are actually
    stored.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 流还可以用于处理终端输入和输出以及不提供随机访问并且不能寻找（即移动）到位置的网络资源，如套接字和端口。您可以编写代码来处理一些任意字节，而不知道或关心它来自何处。您的代码只需读取或写入流，另一段代码处理字节实际存储的位置。
- en: Understanding abstract and concrete streams
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解抽象和具体流
- en: There is an `abstract` class named `Stream` that represents any type of stream.
    Remember that an `abstract` class cannot be instantiated using `new` ; they can
    only be inherited.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`Stream`的`abstract`类，代表任何类型的流。请记住，`abstract`类不能使用`new`实例化；它们只能被继承。
- en: There are many concrete classes that inherit from this base class, including
    `FileStream` , `MemoryStream` , `BufferedStream` , `GZipStream` , and `SslStream`
    , so they all work the same way. All streams implement `IDisposable` , so they
    have a `Dispose` method to release unmanaged resources.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多具体的类从这个基类继承，包括`FileStream`，`MemoryStream`，`BufferedStream`，`GZipStream`和`SslStream`，所以它们都以相同的方式工作。所有流都实现了`IDisposable`，因此它们有一个`Dispose`方法来释放非托管资源。
- en: 'Some of the common members of the `Stream` class are described in the following
    table:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`Stream`类的一些常见成员描述在下表中：'
- en: '| Member | Description |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| 成员 | 描述 |'
- en: '| `CanRead` , `CanWrite` | These properties determine if you can read from
    and write to the stream. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '`CanRead`，`CanWrite` | 这些属性确定是否可以从流中读取和写入。'
- en: '| `Length` , `Position` | These properties determine the total number of bytes
    and the current position within the stream. These properties may throw an exception
    for some types of streams. |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '`Length`，`Position` | 这些属性确定流中的总字节数和当前位置。这些属性对某些类型的流可能会抛出异常。'
- en: '| `Dispose` | This method closes the stream and releases its resources. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '`Dispose` | 这个方法关闭流并释放其资源。'
- en: '| `Flush` | If the stream has a buffer, then this method writes the bytes in
    the buffer to the stream and the buffer is cleared. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '`Flush` | 如果流有缓冲区，则此方法将缓冲区中的字节写入流，并清除缓冲区。'
- en: '| `CanSeek` | This property determines if the `Seek` method can be used. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '`CanSeek` | 此属性确定是否可以使用`Seek`方法。'
- en: '| `Seek` | This method moves the current position to the one specified in its
    parameter. |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '`Seek` | 这个方法将当前位置移动到其参数中指定的位置。'
- en: '| `Read` , `ReadAsync` | These methods read a specified number of bytes from
    the stream into a byte array and advance the position. |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '`Read`，`ReadAsync` | 这些方法从流中读取指定数量的字节到一个字节数组中，并推进位置。'
- en: '| `ReadByte` | This method reads the next byte from the stream and advances
    the position. |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '`ReadByte` | 这个方法读取流中的下一个字节并推进位置。'
- en: '| `Write` , `WriteAsync` | These methods write the contents of a byte array
    into the stream. |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '`Write`，`WriteAsync` | 这些方法将字节数组的内容写入流中。'
- en: '| `WriteByte` | This method writes a byte to the stream. |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '`WriteByte` | 这个方法向流中写入一个字节。'
- en: Understanding storage streams
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解存储流
- en: 'Some storage streams that represent a location where the bytes will be stored
    are described in the following table:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 一些表示将存储字节的位置的存储流在下表中描述：
- en: '| Namespace | Class | Description |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: 命名空间 | 类 | 描述
- en: '| `System.IO` | `FileStream` | Bytes stored in the filesystem. |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '`System.IO` | `FileStream` | 在文件系统中存储的字节。'
- en: '| `System.IO` | `MemoryStream` | Bytes stored in memory in the current process.
    |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '`System.IO` | `MemoryStream` | 在当前进程中存储的字节。'
- en: '| `System.Net.Sockets` | `NetworkStream` | Bytes stored at a network location.
    |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '`System.Net.Sockets` | `NetworkStream` | 存储在网络位置的字节。'
- en: '`FileStream` has been re-written in .NET 6 to have much higher performance
    and reliability on Windows.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileStream`在.NET 6中已经重写，以在Windows上具有更高的性能和可靠性。'
- en: Understanding function streams
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解功能流
- en: 'Some function streams that cannot exist on their own, but can only be "plugged
    onto" other streams to add functionality, are described in the following table:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能流不能单独存在，但只能“插入”到其他流中以添加功能，这些流在下表中描述：
- en: '| Namespace | Class | Description |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: 命名空间 | 类 | 描述
- en: '| `System.Security.Cryptography` | `CryptoStream` | This encrypts and decrypts
    the stream. |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '`System.Security.Cryptography` | `CryptoStream` | 这个加密和解密流。'
- en: '| `System.IO.Compression` | `GZipStream` , `DeflateStream` | These compress
    and decompress the stream. |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '`System.IO.Compression` | `GZipStream`，`DeflateStream` | 这些压缩和解压缩流。'
- en: '| `System.Net.Security` | `AuthenticatedStream` | This sends credentials across
    the stream. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '`System.Net.Security` | `AuthenticatedStream` | 这在流中发送凭据。'
- en: Understanding stream helpers
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解流助手
- en: Although there will be occasions where you need to work with streams at a low
    level, most often, you can plug helper classes into the chain to make things easier.
    All the helper types for streams implement `IDisposable` , so they have a `Dispose`
    method to release unmanaged resources.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有时您需要以低级别处理流，但大多数情况下，您可以将辅助类插入到链中以使事情变得更容易。所有流的辅助类型都实现了`IDisposable`，因此它们具有`Dispose`方法来释放非托管资源。
- en: 'Some helper classes to handle common scenarios are described in the following
    table:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 一些处理常见情况的辅助类在下表中描述：
- en: '| Namespace | Class | Description |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: 命名空间 | 类 | 描述
- en: '| `System.IO` | `StreamReader` | This reads from the underlying stream as plain
    text. |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '`System.IO` | `StreamReader` | 这以纯文本形式从基础流中读取。'
- en: '| `System.IO` | `StreamWriter` | This writes to the underlying stream as plain
    text. |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '`System.IO` | `StreamWriter` | 这以纯文本形式写入基础流。'
- en: '| `System.IO` | `BinaryReader` | This reads from streams as .NET types. For
    example, the `ReadDecimal` method reads the next 16 bytes from the underlying
    stream as a `decimal` value and the `ReadInt32` method reads the next 4 bytes
    as an `int` value. |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '`System.IO` | `BinaryReader` | 这以.NET类型从流中读取。例如，`ReadDecimal`方法将作为`decimal`值的下一个16个字节从基础流中读取，`ReadInt32`方法将作为`int`值的下一个4个字节读取。'
- en: '| `System.IO` | `BinaryWriter` | This writes to streams as .NET types. For
    example, the `Write` method with a `decimal` parameter writes 16 bytes to the
    underlying stream and the `Write` method with an `int` parameter writes 4 bytes.
    |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '`System.IO` | `BinaryWriter` | 这将以.NET类型写入流。例如，带有`decimal`参数的`Write`方法将16个字节写入基础流，带有`int`参数的`Write`方法将写入4个字节。'
- en: '| `System.Xml` | `XmlReader` | This reads from the underlying stream using
    XML format. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '`System.Xml` | `XmlReader` | 这以XML格式从基础流中读取。'
- en: '| `System.Xml` | `XmlWriter` | This writes to the underlying stream using XML
    format. |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '`System.Xml` | `XmlWriter` | 这以XML格式写入基础流。'
- en: Writing to text streams
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入文本流
- en: 'Let''s type some code to write text to a stream:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们输入一些代码来向流中写入文本：
- en: 'Use your preferred code editor to add a new console app named `WorkingWithStreams`
    to the `Chapter09` solution/workspace:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将名为`WorkingWithStreams`的新控制台应用添加到`Chapter09`解决方案/工作空间中：
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: In Visual Studio Code, select `WorkingWithStreams` as the active OmniSharp project.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`WorkingWithStreams`选择为活动的OmniSharp项目。
- en: In the `WorkingWithStreams` project, in `Program.cs` , import the `System.Xml`
    namespace and statically import the `System.Console` , `System.Environment` ,
    and `System.IO.Path` types.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithStreams`项目的`Program.cs`中，导入`System.Xml`命名空间，并静态导入`System.Console`，`System.Environment`和`System.IO.Path`类型。
- en: 'At the bottom of `Program.cs` , define a static class named `Viper` with a
    static array of `string` values named `Callsigns` , as shown in the following
    code:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，定义一个名为`Viper`的静态类，其中包含名为`Callsigns`的静态`string`值数组，如下面的代码所示：
- en: '```cs'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: class
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Viper
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: Viper
- en: '{'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // define an array of Viper pilot call signs
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: //定义Viper飞行员呼号数组
- en: public
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: string
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '[] Callsigns = new'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '[] Callsigns = new'
- en: '[]'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '[]'
- en: '{'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"Husker"'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: “Husker”
- en: ', "Starbuck"'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Starbuck”
- en: ', "Apollo"'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Apollo”
- en: ', "Boomer"'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Boomer”
- en: ','
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"Bulldog"'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: “牛头犬”
- en: ', "Athena"'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Athena”
- en: ', "Helo"'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Helo”
- en: ', "Racetrack"'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Racetrack”```
- en: '};'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Above the `Viper` class, define a `WorkWithText` method that enumerates the
    Viper call signs, writing each one on its own line in a single text file, as shown
    in the following code:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Viper`类的上方，定义一个`WorkWithText`方法，该方法枚举Viper呼号，将每个呼号单独写入单个文本文件的一行，如下面的代码所示：
- en: '```cs'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkWithText
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithText
- en: ()
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // define a file to write to
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: //定义要写入的文件
- en: string
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: textFile = Combine(CurrentDirectory, "streams.txt"
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: textFile = Combine(CurrentDirectory, "streams.txt"
- en: );
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // create a text file and return a helper writer
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: //创建一个文本文件并返回一个辅助写入器
- en: StreamWriter text = File.CreateText(textFile);
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter text = File.CreateText(textFile);
- en: // enumerate the strings, writing each one
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: //枚举字符串，写入每个字符串
- en: // to the stream on a separate line
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: //在单独的行上写入流
- en: foreach
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: (string
- en: item in
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: item in
- en: Viper.Callsigns)
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: Viper.Callsigns)
- en: '{'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: text.WriteLine(item);
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: text.WriteLine(item);
- en: '}'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: text.Close(); // release resources
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: text.Close(); //释放资源
- en: // output the contents of the file
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: //输出文件的内容
- en: WriteLine("{0} contains {1:N0} bytes."
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0} 包含 {1:N0} 字节。"
- en: ','
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: textFile,'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: textFile,'
- en: 'arg1: new'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: new'
- en: FileInfo(textFile).Length);
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(textFile).Length);
- en: WriteLine(File.ReadAllText(textFile));
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(textFile));
- en: '}'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Below the namespace imports, call the `WorkWithText` method.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命名空间导入下方，调用`WorkWithText`方法。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.txt contains
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.txt 包含
- en: 60 bytes.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 60 字节。
- en: Husker
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: Husker
- en: Starbuck
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: Starbuck
- en: Apollo
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: Apollo
- en: Boomer
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: Boomer
- en: Bulldog
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: Bulldog
- en: Athena
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: Athena
- en: Helo
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: Helo
- en: Racetrack
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: Racetrack
- en: '```'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Open the file that was created and check that it contains the list of call signs.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开已创建的文件并检查其中是否包含呼号列表。
- en: Writing to XML streams
  id: totrans-516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入XML流
- en: 'There are two ways to write an XML element, as follows:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以写入XML元素，如下所示：
- en: '`WriteStartElement` and `WriteEndElement` : Use this pair when an element might
    have child elements.'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WriteStartElement`和`WriteEndElement`：当元素可能有子元素时使用此对。'
- en: '`WriteElementString` : Use this when an element does not have children.'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WriteElementString`：当元素没有子元素时使用。'
- en: 'Now, let''s try storing the Viper pilot call signs array of `string` values
    in an XML file:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将“string”值的Viper飞行员呼号数组存储在XML文件中：
- en: 'Create a `WorkWithXml` method that enumerates the call signs, writing each
    one as an element in a single XML file, as shown in the following code:'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`WorkWithXml`方法，该方法枚举呼号，并将每个呼号作为单个XML文件中的元素写入，如下面的代码所示：
- en: '```cs'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkWithXml
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithXml
- en: ()
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // define a file to write to
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: //定义要写入的文件
- en: string
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: xmlFile = Combine(CurrentDirectory, "streams.xml"
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: xmlFile = Combine(CurrentDirectory, "streams.xml"
- en: );
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // create a file stream
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: //创建文件流
- en: FileStream xmlFileStream = File.Create(xmlFile);
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: FileStream xmlFileStream = File.Create(xmlFile);
- en: // wrap the file stream in an XML writer helper
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: //将文件流包装在XML写入器助手中
- en: // and automatically indent nested elements
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: //并自动缩进嵌套元素
- en: XmlWriter xml = XmlWriter.Create(xmlFileStream,
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: XmlWriter xml = XmlWriter.Create(xmlFileStream,
- en: new
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: XmlWriterSettings { Indent = true
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: XmlWriterSettings { Indent = true
- en: '});'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // write the XML declaration
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: //写入XML声明
- en: xml.WriteStartDocument();
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartDocument();
- en: // write a root element
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: //写入根元素
- en: xml.WriteStartElement("callsigns"
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartElement("callsigns"
- en: );
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // enumerate the strings writing each one to the stream
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: //枚举字符串，将每个字符串写入流
- en: foreach
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: (string
- en: item in
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: item in
- en: Viper.Callsigns)
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: Viper.Callsigns)
- en: '{'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: xml.WriteElementString("callsign"
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteElementString("callsign"
- en: ', item);'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: ，item);
- en: '}'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // write the close root element
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: //写入关闭根元素
- en: xml.WriteEndElement();
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteEndElement();
- en: // close helper and stream
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: //关闭辅助和流
- en: xml.Close();
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: xml.Close();
- en: xmlFileStream.Close();
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: xmlFileStream.Close();
- en: // output all the contents of the file
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: //输出文件的所有内容
- en: WriteLine("{0} contains {1:N0} bytes."
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0} 包含 {1:N0} 字节。"
- en: ','
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: xmlFile,'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: xmlFile,'
- en: 'arg1: new'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: new'
- en: FileInfo(xmlFile).Length);
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(xmlFile).Length);
- en: WriteLine(File.ReadAllText(xmlFile));
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(xmlFile));
- en: '}'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment out the previous method call, and add a call to the
    `WorkWithXml` method.
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉先前的方法调用，并添加对`WorkWithXml`方法的调用。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml contains
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml 包含
- en: 310 bytes.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 310 字节。
- en: <?xml version="1.0" encoding="utf-8"?>
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: <?xml version="1.0" encoding="utf-8"?>
- en: <callsigns>
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: <callsigns>
- en: <callsign>Husker</callsign>
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Husker </callsign>
- en: <callsign>Starbuck</callsign>
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Starbuck </callsign>
- en: <callsign>Apollo</callsign>
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Apollo </callsign>
- en: <callsign>Boomer</callsign>
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Boomer </callsign>
- en: <callsign>Bulldog</callsign>
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Bulldog </callsign>
- en: <callsign>Athena</callsign>
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Athena </callsign>
- en: <callsign>Helo</callsign>
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Helo </callsign>
- en: <callsign>Racetrack</callsign>
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: <callsign> Racetrack </callsign>
- en: </callsigns>
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: </callsigns>
- en: '```'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Disposing of file resources
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理文件资源
- en: When you open a file to read or write to it, you are using resources outside
    of .NET. These are called **unmanaged resources** and must be disposed of when
    you are done working with them. To deterministically control when they are disposed
    of, we can call the `Dispose` method inside of a `finally` block.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开文件以读取或写入文件时，您正在使用.NET之外的资源。这些被称为**非托管资源**，在完成工作后必须将其处理掉。为了确定性地控制它们何时被处理掉，我们可以在`finally`块内调用`Dispose`方法。
- en: 'Let''s improve our previous code that works with XML to properly dispose of
    its unmanaged resources:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改进之前处理XML的代码，以正确处理其非托管资源：
- en: 'Modify the `WorkWithXml` method, as shown highlighted in the following code:'
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`WorkWithXml`方法，如下面的代码所示：
- en: '```cs'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkWithXml
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithXml
- en: ()
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**FileStream? xmlFileStream =**'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '**FileStream? xmlFileStream =**'
- en: '**null**'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '**null**'
- en: '**;**'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '**;**'
- en: '**XmlWriter? xml =**'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '**XmlWriter? xml =**'
- en: '**null**'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '**null**'
- en: '**;**'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '**;**'
- en: '**try**'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '**try**'
- en: '**{**'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: // define a file to write to
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: // 定义要写入的文件
- en: string
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: xmlFile = Combine(CurrentDirectory, "streams.xml"
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: xmlFile = Combine(CurrentDirectory, "streams.xml"
- en: );
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // create a file stream
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建文件流
- en: '**xmlFileStream = File.Create(xmlFile);**'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '**xmlFileStream = File.Create(xmlFile);**'
- en: // wrap the file stream in an XML writer helper
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: // 将文件流包装在XML写入器助手中
- en: // and automatically indent nested elements
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: // 并自动缩进嵌套元素
- en: '**xml = XmlWriter.Create(xmlFileStream,**'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '**xml = XmlWriter.Create(xmlFileStream,**'
- en: '**new**'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**XmlWriterSettings { Indent =**'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '**XmlWriterSettings { Indent =**'
- en: '**true**'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: '**});**'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '**});**'
- en: // write the XML declaration
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: // 写入XML声明
- en: xml.WriteStartDocument();
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartDocument();
- en: // write a root element
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: // 写入根元素
- en: xml.WriteStartElement("callsigns"
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartElement("callsigns"
- en: );
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // enumerate the strings writing each one to the stream
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: // 枚举字符串，将每个字符串写入流
- en: foreach
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: (string
- en: item in
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 项目
- en: Viper.Callsigns)
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: Viper.Callsigns)
- en: '{'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: xml.WriteElementString("callsign"
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteElementString("callsign"
- en: ', item);'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: ', item);'
- en: '}'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // write the close root element
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: // 写入关闭根元素
- en: xml.WriteEndElement();
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteEndElement();
- en: // close helper and stream
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: // 关闭辅助程序和流
- en: xml.Close();
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: xml.Close();
- en: xmlFileStream.Close();
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: xmlFileStream.Close();
- en: // output all the contents of the file
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: // 输出文件的所有内容
- en: WriteLine($"
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '0'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: '}'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: contains
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 包含
- en: '{'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '1'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: :N0}
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: :N0}
- en: bytes."
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 字节。"
- en: ','
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'arg0: xmlFile,'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: xmlFile,'
- en: 'arg1: new'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: new'
- en: FileInfo(xmlFile).Length);
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(xmlFile).Length);
- en: WriteLine(File.ReadAllText(xmlFile));
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(xmlFile));
- en: '**}**'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**catch (Exception ex)**'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '**catch (Exception ex)**'
- en: '**{**'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**// if the path doesn''t exist the exception will be caught**'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 如果路径不存在，异常将被捕获**'
- en: '**WriteLine(**'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine(**'
- en: '**$"**'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '**$"**'
- en: '**{ex.GetType()}**'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '**{ex.GetType()}**'
- en: '**says**'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '**说**'
- en: '**{ex.Message}**'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '**{ex.Message}**'
- en: '**"**'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '**"**'
- en: '**);**'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**}**'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**finally**'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '**finally**'
- en: '**{**'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**if**'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果**'
- en: '**(xml !=**'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '**(xml !=**'
- en: '**null**'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '**null**'
- en: '**)**'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**{**'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**xml.Dispose();**'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '**xml.Dispose();**'
- en: '**WriteLine(**'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine(**'
- en: '**"The XML writer''s unmanaged resources have been disposed."**'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '**"XML写入器的非托管资源已被处理。"**'
- en: '**);**'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**if**'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '**if**'
- en: '**(xmlFileStream !=**'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '**(xmlFileStream !=**'
- en: '**null**'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '**null**'
- en: '**)**'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**{**'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**xmlFileStream.Dispose();**'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '**xmlFileStream.Dispose();**'
- en: '**WriteLine(**'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine(**'
- en: '**"The file stream''s unmanaged resources have been disposed."**'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '**"文件流的非托管资源已被处理。"**'
- en: '**);**'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '**);**'
- en: '**}**'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**}**'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**}**'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '}'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: You could also go back and modify the other methods you previously created but
    I will leave that as an optional exercise for you.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以返回并修改先前创建的其他方法，但我将把它作为一个可选练习留给您。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下所示：
- en: '```cs'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: The XML writer's unmanaged resources have been disposed.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: XML写入器的非托管资源已被处理。
- en: The file stream's unmanaged resources have been disposed.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 文件流的非托管资源已被处理。
- en: '```'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Before calling the `Dispose` method, check that the object
    is not null.'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：在调用`Dispose`方法之前，检查对象是否为空。'
- en: Simplifying disposal by using the using statement
  id: totrans-694
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过使用`using`语句简化处理
- en: You can simplify the code that needs to check for a `null` object and then call
    its `Dispose` method by using the `using` statement. Generally, I would recommend
    using `using` rather than manually calling `Dispose` unless you need a greater
    level of control.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用`using`语句简化需要检查`null`对象然后调用其`Dispose`方法的代码。通常，我建议使用`using`而不是手动调用`Dispose`，除非您需要更高级别的控制。
- en: 'Confusingly, there are two uses for the `using` keyword: importing a namespace
    and generating a `finally` statement that calls `Dispose` on an object that implements
    `IDisposable` .'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 令人困惑的是，`using`关键字有两种用法：导入命名空间和生成调用实现`IDisposable`的对象的`Dispose`的`finally`语句。
- en: 'The compiler changes a `using` statement block into a `try` -`finally` statement
    without a `catch` statement. You can use nested `try` statements; so, if you do
    want to catch any exceptions, you can, as shown in the following code example:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器将`using`语句块更改为`try`-`finally`语句，而不带`catch`语句。您可以使用嵌套的`try`语句；因此，如果确实想要捕获任何异常，可以像下面的代码示例中所示的那样捕获异常：
- en: '```cs'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (FileStream file2 = File.OpenWrite(
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: (FileStream file2 = File.OpenWrite(
- en: Path.Combine(path, "file2.txt"
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: Path.Combine(path, "file2.txt"
- en: )))
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: )))
- en: '{'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (StreamWriter writer2 = new
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: (StreamWriter writer2 = new
- en: StreamWriter(file2))
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter(file2))
- en: '{'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: try
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: try
- en: '{'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: writer2.WriteLine("Welcome, .NET!"
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: writer2.WriteLine("欢迎，.NET!"
- en: );
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: catch(Exception ex)
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: catch(Exception ex)
- en: '{'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{ex.GetType()}'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '{ex.GetType()}'
- en: says
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 说
- en: '{ex.Message}'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: '{ex.Message}'
- en: '"'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} // automatically calls Dispose if the object is not null'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '} // 如果对象不为空，则自动调用Dispose'
- en: '} // automatically calls Dispose if the object is not null'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '} // 如果对象不为空，则自动调用Dispose'
- en: '```'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You can even simplify the code further by not explicitly specifying the braces
    and indentation for the `using` statements, as shown in the following code:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以通过不明确指定`using`语句的大括号和缩进来进一步简化代码，如下面的代码所示：
- en: '```cs'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: FileStream file2 = File.OpenWrite(
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: FileStream file2 = File.OpenWrite(
- en: Path.Combine(path, "file2.txt"
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: Path.Combine(path, "file2.txt"
- en: ));
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: ));
- en: using
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: StreamWriter writer2 = new
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter writer2 = new
- en: (file2);
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: (file2);
- en: try
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: try
- en: '{'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: writer2.WriteLine("Welcome, .NET!"
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: writer2.WriteLine("欢迎，.NET!"
- en: );
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: catch(Exception ex)
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: catch(Exception ex)
- en: '{'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{ex.GetType()}'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '{ex.GetType()}'
- en: says
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 说
- en: '{ex.Message}'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '{ex.Message}'
- en: '"'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Compressing streams
  id: totrans-749
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 压缩流
- en: 'XML is relatively verbose, so it takes up more space in bytes than plain text.
    Let''s see how we can squeeze the XML using a common compression algorithm known
    as GZIP:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: XML相对冗长，因此占用的字节数比纯文本多。让我们看看如何使用一种称为GZIP的常见压缩算法来压缩XML：
- en: 'At the top of `Program.cs` , import the namespace for working with compression,
    as shown in the following code:'
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入用于处理压缩的命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.IO.Compression; // BrotliStream, GZipStream, CompressionMode
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.Compression; // BrotliStream, GZipStream, CompressionMode
- en: '```'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a `WorkWithCompression` method, which uses instances of `GZipStream` to
    create a compressed file containing the same XML elements as before and then decompresses
    it while reading it and outputting to the console, as shown in the following code:'
  id: totrans-756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`WorkWithCompression`方法，该方法使用`GZipStream`的实例创建一个包含与以前相同的XML元素的压缩文件，然后在读取并输出到控制台时对其进行解压缩，如下面的代码所示：
- en: '```cs'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkWithCompression
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithCompression
- en: ()
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: fileExt = "gzip"
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: fileExt = "gzip"
- en: ;
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: // compress the XML output
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: // 压缩XML输出
- en: string
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: filePath = Combine(
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: filePath = Combine(
- en: CurrentDirectory, $"streams.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: CurrentDirectory, $"streams.
- en: '**{fileExt}**'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '**{fileExt}**'
- en: '"'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: FileStream file = File.Create(filePath);
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: FileStream file = File.Create(filePath);
- en: Stream compressor = new
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: Stream compressor = new
- en: GZipStream(file, CompressionMode.Compress);
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: GZipStream(file, CompressionMode.Compress);
- en: using
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (compressor)
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: （compressor）
- en: '{'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (XmlWriter xml = XmlWriter.Create(compressor))
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: （XmlWriter xml = XmlWriter.Create(compressor))
- en: '{'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: xml.WriteStartDocument();
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartDocument();
- en: xml.WriteStartElement("callsigns"
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartElement("callsigns"
- en: );
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: （字符串
- en: item in
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: item in
- en: Viper.Callsigns)
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: Viper.Callsigns)
- en: '{'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: xml.WriteElementString("callsign"
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteElementString("callsign"
- en: ', item);'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: ， item);
- en: '}'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // the normal call to WriteEndElement is not necessary
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: // 正常调用WriteEndElement不是必要的
- en: // because when the XmlWriter disposes, it will
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: // 因为当XmlWriter释放时，它将
- en: // automatically end any elements of any depth
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: // 自动结束任何深度的元素
- en: '}'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} // also closes the underlying stream'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '} // 也关闭底层流'
- en: // output all the contents of the compressed file
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: // 输出压缩文件的所有内容
- en: WriteLine("{0} contains {1:N0} bytes."
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0} contains {1:N0} bytes."
- en: ','
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: filePath, new
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: filePath, new
- en: FileInfo(filePath).Length);
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(filePath).Length);
- en: WriteLine($"The compressed contents:"
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"The compressed contents:"
- en: );
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: WriteLine(File.ReadAllText(filePath));
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(filePath));
- en: // read a compressed file
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: // 读取压缩文件
- en: WriteLine("Reading the compressed XML file:"
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("Reading the compressed XML file:"
- en: );
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: file = File.Open(filePath, FileMode.Open);
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: file = File.Open(filePath, FileMode.Open);
- en: Stream decompressor = new
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: Stream decompressor = new
- en: GZipStream(file,
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: GZipStream(file,
- en: CompressionMode.Decompress);
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: CompressionMode.Decompress);
- en: using
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (decompressor)
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: （decompressor）
- en: '{'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (XmlReader reader = XmlReader.Create(decompressor))
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: (XmlReader reader = XmlReader.Create(decompressor))
- en: '{'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: while
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: while
- en: (reader.Read()) // read the next XML node
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: （reader.Read()） // 读取下一个XML节点
- en: '{'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // check if we are on an element node named callsign
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: // 检查我们是否在名为callsign的元素节点上
- en: if
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: ((reader.NodeType == XmlNodeType.Element)
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: ((reader.NodeType == XmlNodeType.Element)
- en: '&& (reader.Name == "callsign"'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '&& (reader.Name == "callsign"'
- en: ))
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: ))
- en: '{'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: reader.Read(); // move to the text inside element
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: reader.Read(); // 移动到元素内部的文本
- en: WriteLine($"
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{reader.Value}'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '{reader.Value}'
- en: '"'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: ); // read its value
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: ）； // 读取其值
- en: '}'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , leave the call to `WorkWithXml` , and add a call to `WorkWithCompression`
    , as shown highlighted in the following code:'
  id: totrans-839
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，保留对`WorkWithXml`的调用，并添加对`WorkWithCompression`的调用，如下面代码中突出显示的那样：
- en: '```cs'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // WorkWithText();
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: // WorkWithText();
- en: '**WorkWithXml();**'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '**WorkWithXml();**'
- en: '**WorkWithCompression();**'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '**WorkWithCompression();**'
- en: '```'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and compare the sizes of the XML file and the compressed XML file.
    It is less than half the size of the same XML without compression, as shown in
    the following edited output:'
  id: totrans-845
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并比较XML文件和压缩的XML文件的大小。它比没有压缩的相同XML文件的大小少一半，如下编辑后的输出所示：
- en: '```cs'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml contains 310
    bytes.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.xml 包含310字节。
- en: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip contains 150
    bytes.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip 包含150字节。
- en: '```'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Compressing with the Brotli algorithm
  id: totrans-850
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Brotli算法压缩
- en: 'In .NET Core 2.1, Microsoft introduced an implementation of the Brotli compression
    algorithm. In performance, Brotli is like the algorithm used in DEFLATE and GZIP,
    but the output is about 20% denser. The steps are as follows:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core 2.1中，微软引入了Brotli压缩算法的实现。在性能上，Brotli类似于DEFLATE和GZIP中使用的算法，但输出约密度高20%。步骤如下：
- en: 'Modify the `WorkWithCompression` method to have an optional parameter to indicate
    if Brotli should be used and to use Brotli by default, as shown highlighted in
    the following code:'
  id: totrans-852
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`WorkWithCompression`方法，使其具有一个可选参数，指示是否应使用Brotli，并默认使用Brotli，如下面代码中突出显示的那样：
- en: '```cs'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: WorkWithCompression
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithCompression
- en: (
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: '**bool**'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '**bool**'
- en: '**useBrotli =**'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '**useBrotli =**'
- en: '**true**'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '**true**'
- en: )
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: fileExt =
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: fileExt =
- en: '**useBrotli ?**'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '**useBrotli ?**'
- en: '**"brotli"**'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '**"brotli"**'
- en: '**:**'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '**：**'
- en: '**"gzip"**'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '**"gzip"**'
- en: '**;**'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '**;**'
- en: // compress the XML output
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: // 压缩XML输出
- en: string
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: filePath = Combine(
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: filePath = Combine(
- en: CurrentDirectory, $"streams.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: CurrentDirectory, $"streams.
- en: '{fileExt}'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: '{fileExt}'
- en: '"'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: FileStream file = File.Create(filePath);
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: FileStream file = File.Create(filePath);
- en: '**Stream compressor;**'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '**Stream compressor;**'
- en: '**if**'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '**if**'
- en: '**(useBrotli)**'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '**（useBrotli）**'
- en: '**{**'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**compressor =**'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: '**compressor =**'
- en: '**new**'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**BrotliStream(file, CompressionMode.Compress);**'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '**BrotliStream(file, CompressionMode.Compress);**'
- en: '**}**'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**else**'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '**else**'
- en: '**{**'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**compressor =**'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '**compressor =**'
- en: '**new**'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**GZipStream(file, CompressionMode.Compress);**'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: '**GZipStream(file, CompressionMode.Compress);**'
- en: '**}**'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: using
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (compressor)
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: （compressor）
- en: '{'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (XmlWriter xml = XmlWriter.Create(compressor))
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: (XmlWriter xml = XmlWriter.Create(compressor))
- en: '{'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: xml.WriteStartDocument();
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartDocument();
- en: xml.WriteStartElement("callsigns"
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteStartElement("callsigns"
- en: );
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: foreach
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (string
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: （字符串
- en: item in
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: item in
- en: Viper.Callsigns)
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: Viper.Callsigns)
- en: '{'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: xml.WriteElementString("callsign"
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: xml.WriteElementString("callsign"
- en: ', item);'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: ， item);
- en: '}'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} // also closes the underlying stream'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '} // 也关闭底层流'
- en: // output all the contents of the compressed file
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: // 输出压缩文件的所有内容
- en: WriteLine("{0} contains {1:N0} bytes."
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0} contains {1:N0} bytes."
- en: ','
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: filePath, new
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: filePath, new
- en: FileInfo(filePath).Length);
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(filePath).Length);
- en: WriteLine($"The compressed contents:"
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"The compressed contents:"
- en: );
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: WriteLine(File.ReadAllText(filePath));
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(filePath));
- en: // read a compressed file
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: // 读取压缩文件
- en: WriteLine("Reading the compressed XML file:"
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("Reading the compressed XML file:"
- en: );
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: file = File.Open(filePath, FileMode.Open);
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: file = File.Open(filePath, FileMode.Open);
- en: '**Stream decompressor;**'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '**Stream decompressor;**'
- en: '**if**'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: '**if**'
- en: '**(useBrotli)**'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: '**（useBrotli）**'
- en: '**{**'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**decompressor =**'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '**decompressor =**'
- en: '**new**'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**BrotliStream(**'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '**BrotliStream(**'
- en: '**file, CompressionMode.Decompress);**'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: '**file, CompressionMode.Decompress);**'
- en: '**}**'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '**else**'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '**else**'
- en: '**{**'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**decompressor =**'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 解压器 =
- en: '**new**'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**GZipStream(**'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: '**GZipStream(**'
- en: '**file, CompressionMode.Decompress);**'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '**file, CompressionMode.Decompress);**'
- en: '**}**'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: using
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (decompressor)
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: (decompressor)
- en: '{'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (XmlReader reader = XmlReader.Create(decompressor))
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: (XmlReader reader = XmlReader.Create(decompressor))
- en: '{'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: while
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: while
- en: (reader.Read())
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: (reader.Read())
- en: '{'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // check if we are on an element node named callsign
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: // 检查是否在名为callsign的元素节点上
- en: if
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: ((reader.NodeType == XmlNodeType.Element)
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: ((reader.NodeType == XmlNodeType.Element)
- en: '&& (reader.Name == "callsign"'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: '&& (reader.Name == "callsign"'
- en: ))
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: ))
- en: '{'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: reader.Read(); // move to the text inside element
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: reader.Read(); // 移动到元素内部的文本
- en: WriteLine($"
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{reader.Value}'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: '{reader.Value}'
- en: '"'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: ); // read its value
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: ); // 读取其值
- en: '}'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Near the top of `Program.cs` , call `WorkWithCompression` twice, once with
    the default using Brotli and once with GZIP, as shown in the following code:'
  id: totrans-965
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部附近，调用`WorkWithCompression`两次，一次使用默认的Brotli，一次使用GZIP，如下面的代码所示：
- en: '```cs'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WorkWithCompression();
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: WorkWithCompression();
- en: 'WorkWithCompression(useBrotli: false'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 'WorkWithCompression(useBrotli: false'
- en: );
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and compare the sizes of the two compressed XML files. Brotli
    is more than 21% denser, as shown in the following edited output:'
  id: totrans-971
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并比较两个压缩的XML文件的大小。如下编辑后的输出所示，Brotli比GZIP更密集，超过21%：
- en: '```cs'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.brotli contains
    118 bytes.
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.brotli 包含118个字节。
- en: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip contains 150
    bytes.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/WorkingWithStreams/streams.gzip 包含150个字节。
- en: '```'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Encoding and decoding text
  id: totrans-976
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码和解码文本
- en: Text characters can be represented in different ways. For example, the alphabet
    can be encoded using Morse code into a series of dots and dashes for transmission
    over a telegraph line.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 文本字符可以用不同的方式表示。例如，字母表可以使用莫尔斯电码编码成一系列点和破折号，以在电报线上传输。
- en: In a similar way, text inside a computer is stored as bits (ones and zeros)
    representing a code point within a code space. Most code points represent a single
    character, but they can also have other meanings like formatting.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，计算机内部的文本以位（1和0）的形式存储，表示代码空间内的代码点。大多数代码点代表一个字符，但它们也可以有其他含义，比如格式化。
- en: For example, ASCII has a code space with 128 code points. .NET uses a standard
    called **Unicode** to encode text internally. Unicode has more than one million
    code points.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ASCII具有128个代码点的代码空间。.NET使用一种称为**Unicode**的标准来内部编码文本。Unicode有一百多万个代码点。
- en: Sometimes, you will need to move text outside .NET for use by systems that do
    not use Unicode or use a variation of Unicode, so it is important to learn how
    to convert between encodings.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要将文本移出.NET以供不使用Unicode或使用Unicode变体的系统使用，因此学习如何在编码之间转换是很重要的。
- en: 'The following table lists some alternative text encodings commonly used by
    computers:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了计算机常用的一些替代文本编码：
- en: '| Encoding | Description |'
  id: totrans-982
  prefs: []
  type: TYPE_TB
  zh: '| 编码 | 描述 |'
- en: '| ASCII | This encodes a limited range of characters using the lower seven
    bits of a byte. |'
  id: totrans-983
  prefs: []
  type: TYPE_TB
  zh: '| ASCII | 这使用字节的低7位来编码有限范围的字符。 |'
- en: '| UTF-8 | This represents each Unicode code point as a sequence of one to four
    bytes. |'
  id: totrans-984
  prefs: []
  type: TYPE_TB
  zh: '| UTF-8 | 这将每个Unicode代码点表示为一个到四个字节的序列。 |'
- en: '| UTF-7 | This is designed to be more efficient over 7-bit channels than UTF-8
    but it has security and robustness issues, so UTF-8 is recommended over UTF-7.
    |'
  id: totrans-985
  prefs: []
  type: TYPE_TB
  zh: '| UTF-7 | 这是为了在7位通道上比UTF-8更有效而设计的，但它存在安全性和健壮性问题，因此建议使用UTF-8而不是UTF-7。 |'
- en: '| UTF-16 | This represents each Unicode code point as a sequence of one or
    two 16-bit integers. |'
  id: totrans-986
  prefs: []
  type: TYPE_TB
  zh: '| UTF-16 | 这将每个Unicode代码点表示为一个或两个16位整数的序列。 |'
- en: '| UTF-32 | This represents each Unicode code point as a 32-bit integer and
    is therefore a fixed-length encoding unlike the other Unicode encodings, which
    are all variable-length encodings. |'
  id: totrans-987
  prefs: []
  type: TYPE_TB
  zh: '| UTF-32 | 这将每个Unicode代码点表示为一个32位整数，因此是一种固定长度编码，不同于其他Unicode编码，它们都是可变长度编码。
    |'
- en: '| ANSI/ISO encodings | This provides support for a variety of code pages that
    are used to support a specific language or group of languages. |'
  id: totrans-988
  prefs: []
  type: TYPE_TB
  zh: '| ANSI/ISO编码 | 这提供了对用于支持特定语言或语言组的各种代码页的支持。 |'
- en: '**Good Practice** : In most cases today, UTF-8 is a good default, which is
    why it is literally the default encoding, that is, `Encoding.Default` .'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在大多数情况下，UTF-8是一个很好的默认选择，这就是为什么它实际上是默认编码，即`Encoding.Default`。'
- en: Encoding strings as byte arrays
  id: totrans-990
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将字符串编码为字节数组
- en: 'Let''s explore text encodings:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索文本编码：
- en: Use your preferred code editor to add a new console app named `WorkingWithEncodings`
    to the `Chapter09` solution/workspace.
  id: totrans-992
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`WorkingWithEncodings`的新控制台应用添加到`Chapter09`解决方案/工作区中。
- en: In Visual Studio Code, select `WorkingWithEncodings` as the active OmniSharp
    project.
  id: totrans-993
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`WorkingWithEncodings`选择为活动的OmniSharp项目。
- en: In `Program.cs` , import the `System.Text` namespace and statically import the
    `Console` class.
  id: totrans-994
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入`System.Text`命名空间并静态导入`Console`类。
- en: 'Add statements to encode a `string` using an encoding chosen by the user, loop
    through each byte, and then decode it back into a `string` and output it, as shown
    in the following code:'
  id: totrans-995
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句，使用用户选择的编码对`string`进行编码，循环遍历每个字节，然后将其解码回`string`并输出，如下面的代码所示：
- en: '```cs'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine("Encodings"
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("编码"
- en: );
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("[1] ASCII"
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("[1] ASCII"
- en: );
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("[2] UTF-7"
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("[2] UTF-7"
- en: );
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("[3] UTF-8"
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("[3] UTF-8"
- en: );
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("[4] UTF-16 (Unicode)"
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("[4] UTF-16 (Unicode)"
- en: );
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("[5] UTF-32"
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("[5] UTF-32"
- en: );
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("[any other key] Default"
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("[任意其他键] 默认"
- en: );
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // choose an encoding
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: // 选择一个编码
- en: 'Write("Press a number to choose an encoding: "'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: Write("按数字选择编码："
- en: );
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: 'ConsoleKey number = ReadKey(intercept: false'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 'ConsoleKey number = ReadKey(intercept: false'
- en: ).Key;
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: ).Key;
- en: WriteLine();
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: WriteLine();
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: Encoding encoder = number switch
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 编码编码器 = 数字开关
- en: '{'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ConsoleKey.D1 => Encoding.ASCII,
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleKey.D1 => Encoding.ASCII,
- en: ConsoleKey.D2 => Encoding.UTF7,
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleKey.D2 => Encoding.UTF7,
- en: ConsoleKey.D3 => Encoding.UTF8,
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleKey.D3 => Encoding.UTF8,
- en: ConsoleKey.D4 => Encoding.Unicode,
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleKey.D4 => Encoding.Unicode,
- en: ConsoleKey.D5 => Encoding.UTF32,
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleKey.D5 => Encoding.UTF32,
- en: _             => Encoding.Default
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: _             => Encoding.Default
- en: '};'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: // define a string to encode
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个要编码的字符串
- en: string
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: 'message = "Café cost: £4.39"'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 'message = "Café cost: £4.39"'
- en: ;
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: // encode the string into a byte array
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: // 将字符串编码为字节数组
- en: byte
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 字节
- en: '[] encoded = encoder.GetBytes(message);'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '[] encoded = encoder.GetBytes(message);'
- en: // check how many bytes the encoding needed
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: // 检查编码需要多少字节
- en: WriteLine("{0} uses {1:N0} bytes."
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0} 使用 {1:N0} 字节。"
- en: ','
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: encoder.GetType().Name, encoded.Length);
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: encoder.GetType().Name, encoded.Length);
- en: WriteLine();
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: // enumerate each byte
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: // 枚举每个字节
- en: WriteLine($"BYTE HEX CHAR"
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"BYTE HEX CHAR"
- en: );
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (byte
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: (byte
- en: b in
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: b in
- en: encoded)
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: encoded)
- en: '{'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{b,'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: '{b,'
- en: '4'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '}'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '{b.ToString('
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: '{b.ToString('
- en: '"X"'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '"X"'
- en: ),
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: '4'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '}'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '{('
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '{('
- en: char
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: char
- en: )b,
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: )b,
- en: '5'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '}'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '"'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // decode the byte array back into a string and display it
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: // 将字节数组解码回字符串并显示它
- en: string
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: decoded = encoder.GetString(encoded);
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: decoded = encoder.GetString(encoded);
- en: WriteLine(decoded);
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(decoded);
- en: '```'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code and note the warning to avoid using `Encoding.UTF7` because it
    is insecure. Of course, if you need to generate text using that encoding for compatibility
    with another system, it needs to remain an option in .NET.
  id: totrans-1069
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意警告，避免使用`Encoding.UTF7`，因为它是不安全的。当然，如果您需要使用该编码生成文本以与另一个系统兼容，则需要将其保留为.NET中的一个选项。
- en: Press 1 to choose ASCII and note that when outputting the bytes, the pound sign
    (£) and accented e (é) cannot be represented in ASCII, so it uses a question mark
    instead.
  id: totrans-1070
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按1选择ASCII并注意，当输出字节时，英镑符号（£）和重音e（é）无法用ASCII表示，因此它使用问号代替。
- en: '```cs'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: BYTE  HEX  CHAR
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: BYTE  HEX  CHAR
- en: 67   43     C
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 67   43     C
- en: 97   61     a
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 97   61     a
- en: 102   66     f
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 102   66     f
- en: 63   3F     ?
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 63   3F     ?
- en: 32   20
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 32   20
- en: 111   6F     o
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 111   6F     o
- en: 115   73     s
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 115   73     s
- en: 116   74     t
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 116   74     t
- en: '58   3A     :'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '58   3A     :'
- en: 32   20
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 32   20
- en: 63   3F     ?
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 63   3F     ?
- en: 52   34     4
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 52   34     4
- en: 46   2E     .
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 46   2E     .
- en: 51   33     3
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 51   33     3
- en: 57   39     9
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 57   39     9
- en: 'Caf? cost: ?4.39'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 'Caf? cost: ?4.39'
- en: '```'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Rerun the code and press 3 to choose UTF-8 and note that UTF-8 requires two
    extra bytes for the two characters that need 2 bytes each (18 bytes instead of
    16 bytes total) but it can encode and decode the é and £ characters.
  id: totrans-1090
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行代码并按3选择UTF-8，并注意UTF-8需要两个额外的字节来存储每个需要2个字节的字符（总共18个字节而不是16个字节），但它可以编码和解码é和£字符。
- en: '```cs'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: UTF8EncodingSealed uses 18 bytes.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: UTF8EncodingSealed 使用 18 个字节。
- en: BYTE  HEX  CHAR
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: BYTE  HEX  CHAR
- en: 67   43     C
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 67   43     C
- en: 97   61     a
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 97   61     a
- en: 102   66     f
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 102   66     f
- en: 195   C3     Ã
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 195   C3     Ã
- en: 169   A9     ©
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 169   A9     ©
- en: 32   20
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 32   20
- en: 111   6F     o
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 111   6F     o
- en: 115   73     s
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 115   73     s
- en: 116   74     t
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 116   74     t
- en: '58   3A     :'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '58   3A     :'
- en: 32   20
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 32   20
- en: 194   C2     Â
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 194   C2     Â
- en: 163   A3     £
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 163   A3     £
- en: 52   34     4
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 52   34     4
- en: 46   2E     .
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 46   2E     .
- en: 51   33     3
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 51   33     3
- en: 57   39     9
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 57   39     9
- en: 'Café cost: £4.39'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 'Café cost: £4.39'
- en: '```'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Rerun the code and press 4 to choose Unicode (UTF-16) and note that UTF-16 requires
    two bytes for every character, so 32 bytes in total, and it can encode and decode
    the é and £ characters. This encoding is used internally by .NET to store `char`
    and `string` values.
  id: totrans-1113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行代码并按4选择Unicode（UTF-16），注意UTF-16对每个字符需要两个字节，因此总共需要32个字节，并且它可以编码和解码é和£字符。这种编码在.NET内部用于存储`char`和`string`值。
- en: Encoding and decoding text in files
  id: totrans-1114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在文件中编码和解码文本
- en: When using stream helper classes, such as `StreamReader` and `StreamWriter`
    , you can specify the encoding you want to use. As you write to the helper, the
    text will automatically be encoded, and as you read from the helper, the bytes
    will be automatically decoded.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用流辅助类（如`StreamReader`和`StreamWriter`）时，可以指定要使用的编码。当您写入辅助程序时，文本将自动编码，当您从辅助程序读取时，字节将自动解码。
- en: 'To specify an encoding, pass the encoding as a second parameter to the helper
    type''s constructor, as shown in the following code:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定编码，请将编码作为辅助类型的构造函数的第二个参数传递，如下面的代码所示：
- en: '```cs'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: StreamReader reader = new
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: StreamReader reader = new
- en: (stream, Encoding.UTF8);
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: (stream, Encoding.UTF8);
- en: StreamWriter writer = new
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: StreamWriter writer = new
- en: (stream, Encoding.UTF8);
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: (stream, Encoding.UTF8);
- en: '```'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Often, you won''t have the choice of which encoding to
    use, because you will be generating a file for use by another system. However,
    if you do, pick one that uses the least number of bytes, but can store every character
    you need.'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：通常，您无法选择要使用的编码，因为您将生成供另一个系统使用的文件。但是，如果您可以选择，请选择使用最少数量的字节但可以存储您需要的每个字符的编码。'
- en: Serializing object graphs
  id: totrans-1124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化对象图
- en: '**Serialization** is the process of converting a live object into a sequence
    of bytes using a specified format. **Deserialization** is the reverse process.
    You would do this to save the current state of a live object so that you can recreate
    it in the future. For example, saving the current state of a game so that you
    can continue at the same place tomorrow. Serialized objects are usually stored
    in a file or database.'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '**序列化** 是将活动对象转换为使用指定格式的字节序列的过程。**反序列化** 是相反的过程。您可以这样做来保存活动对象的当前状态，以便将来可以重新创建它。例如，保存游戏的当前状态，以便您可以在明天继续。序列化的对象通常存储在文件或数据库中。'
- en: There are dozens of formats you can specify, but the two most common ones are
    **eXtensible Markup Language** (**XML** ) and **JavaScript Object Notation** (**JSON**
    ).
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以指定数十种格式，但最常见的两种格式是**可扩展标记语言**（**XML**）和**JavaScript对象表示**（**JSON**）。
- en: '**Good Practice** : JSON is more compact and is best for web and mobile applications.
    XML is more verbose but is better supported in more legacy systems. Use JSON to
    minimize the size of serialized object graphs. JSON is also a good choice when
    sending object graphs to web applications and mobile applications because JSON
    is the native serialization format for JavaScript and mobile apps often make calls
    over limited bandwidth, so the number of bytes is important.'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：JSON更紧凑，最适合Web和移动应用程序。XML更冗长，但在更多的旧系统中得到更好的支持。使用JSON来最小化序列化对象图的大小。JSON也是将对象图发送到Web应用程序和移动应用程序的良好选择，因为JSON是JavaScript和移动应用程序的本机序列化格式，这些应用程序通常通过有限的带宽进行调用，因此字节数量很重要。'
- en: .NET has multiple classes that will serialize to and from XML and JSON. We will
    start by looking at `XmlSerializer` and `JsonSerializer` .
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: .NET有多个类可以将XML和JSON序列化和反序列化。我们将首先看看`XmlSerializer`和`JsonSerializer`。
- en: Serializing as XML
  id: totrans-1129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将XML序列化
- en: 'Let''s start by looking at XML, probably the world''s most used serialization
    format (for now). To show a typical example, we will define a custom class to
    store information about a person and then create an object graph using a list
    of `Person` instances with nesting:'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看XML，可能是世界上最常用的序列化格式（目前）。为了展示一个典型的例子，我们将定义一个自定义类来存储有关一个人的信息，然后使用`Person`实例的列表创建一个对象图并进行嵌套：
- en: Use your preferred code editor to add a new console app named `WorkingWithSerialization`
    to the `Chapter09` solution/workspace.
  id: totrans-1131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`WorkingWithSerialization`的新控制台应用添加到`Chapter09`解决方案/工作区中。
- en: In Visual Studio Code, select `WorkingWithSerialization` as the active OmniSharp
    project.
  id: totrans-1132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`WorkingWithSerialization`作为活动的OmniSharp项目。
- en: 'Add a class named `Person` with a `Salary` property that is `protected` , meaning
    it is only accessible to itself and derived classes. To populate the salary, the
    class has a constructor with a single parameter to set the initial salary, as
    shown in the following code:'
  id: totrans-1133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Person`的类，其中包含一个`Salary`属性，该属性是`protected`，意味着它只能被自身和派生类访问。为了填充工资，该类有一个带有单个参数的构造函数来设置初始工资，如下面的代码所示：
- en: '```cs'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Packt.Shared
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Person
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: Person
- en: '{'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Person
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: Person
- en: (
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: decimal
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: initialSalary
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: initialSalary
- en: )
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Salary = initialSalary;
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: Salary = initialSalary;
- en: '}'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '? FirstName { get'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: '? FirstName { get'
- en: ; set
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '? LastName { get'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '? LastName { get'
- en: ; set
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DateTime DateOfBirth { get
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime DateOfBirth { get
- en: ; set
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: HashSet<Person>? Children { get
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: HashSet<Person>? Children { get
- en: ; set
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: protected
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: protected
- en: decimal
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: Salary { get
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: Salary { get
- en: ; set
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , import namespaces for working with XML serialization and
    statically import the `Console` , `Environment` , and `Path` classes, as shown
    in the following code:'
  id: totrans-1176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入用于处理XML序列化的命名空间，并静态导入`Console`，`Environment`和`Path`类，如下面的代码所示：
- en: '```cs'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.Xml.Serialization; // XmlSerializer
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: System.Xml.Serialization; // XmlSerializer
- en: using
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Packt.Shared; // Person
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared; // Person
- en: using
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: using
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Environment;
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: System.Environment;
- en: using
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.IO.Path;
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.Path;
- en: '```'
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to create an object graph of `Person` instances, as shown in
    the following code:'
  id: totrans-1192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来创建一个`Person`实例的对象图，如下面的代码所示：
- en: '```cs'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // create an object graph
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个对象图
- en: List<Person> people = new
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person> people = new
- en: ()
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: new
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: (30000
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: (30000
- en: M)
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: M)
- en: '{'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: FirstName = "Alice"
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName = "Alice"
- en: ','
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: LastName = "Smith"
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: LastName = "Smith"
- en: ','
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: DateOfBirth = new
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: DateOfBirth = new
- en: (1974
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: (1974
- en: ', 3'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: ', 3'
- en: ', 14'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: ', 14'
- en: )
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '},'
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: (40000
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: (40000
- en: M)
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: M)
- en: '{'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: FirstName = "Bob"
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName = "Bob"
- en: ','
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: LastName = "Jones"
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: LastName = "Jones"
- en: ','
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: DateOfBirth = new
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: DateOfBirth = new
- en: (1969
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: (1969
- en: ', 11'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: ', 11'
- en: ', 23'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: ', 23'
- en: )
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '},'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: (20000
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: (20000
- en: M)
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: M)
- en: '{'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: FirstName = "Charlie"
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName = "Charlie"
- en: ','
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: LastName = "Cox"
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: LastName = "Cox"
- en: ','
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: DateOfBirth = new
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: DateOfBirth = new
- en: (1984
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: (1984
- en: ', 5'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: ', 5'
- en: ', 4'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: ', 4'
- en: ),
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: Children = new
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: Children = new
- en: ()
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: new
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: (0
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: (0
- en: M)
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: M)
- en: '{'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: FirstName = "Sally"
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName = "Sally"
- en: ','
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: LastName = "Cox"
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: LastName = "Cox"
- en: ','
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: DateOfBirth = new
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: DateOfBirth = new
- en: (2000
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: (2000
- en: ', 7'
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: ', 7'
- en: ', 12'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: ', 12'
- en: )
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: // create object that will format a List of Persons as XML
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个将List of Persons格式化为XML的对象
- en: XmlSerializer xs = new
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: XmlSerializer xs = new
- en: (people.GetType());
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: (people.GetType());
- en: // create a file to write to
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个要写入的文件
- en: string
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: path = Combine(CurrentDirectory, "people.xml"
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: path = Combine(CurrentDirectory, "people.xml"
- en: );
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: using
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (FileStream stream = File.Create(path))
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: (FileStream stream = File.Create(path))
- en: '{'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // serialize the object graph to the stream
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: // 将对象图序列化到流中
- en: xs.Serialize(stream, people);
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: xs.Serialize(stream, people);
- en: '}'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine("Written {0:N0} bytes of XML to {1}"
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("已将{0:N0}字节的XML写入到{1}"
- en: ','
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: new'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: new'
- en: FileInfo(path).Length,
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(path).Length,
- en: 'arg1: path);'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: path);'
- en: WriteLine();
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: // Display the serialized object graph
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: // 显示序列化的对象图
- en: WriteLine(File.ReadAllText(path));
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(path));
- en: '```'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, view the result, and note that an exception is thrown, as shown
    in the following output:'
  id: totrans-1281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，注意会抛出异常，如下面的输出所示：
- en: '```cs'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Unhandled Exception: System.InvalidOperationException: Packt.Shared.Person
    cannot be serialized because it does not have a parameterless constructor.'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: '未处理的异常: System.InvalidOperationException: Packt.Shared.Person无法序列化，因为它没有无参数的构造函数。'
- en: '```'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Person` , add a statement to define a parameterless constructor, as shown
    in the following code:'
  id: totrans-1285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Person`中，添加一个语句来定义一个无参数的构造函数，如下面的代码所示：
- en: '```cs'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Person
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: Person
- en: ()
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{ }'
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: '{ }'
- en: '```'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The constructor does not need to do anything, but it must exist so that the
    `XmlSerializer` can call it to instantiate new `Person` instances during the deserialization
    process.
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数不需要做任何事情，但必须存在，以便`XmlSerializer`在反序列化过程中调用它来实例化新的`Person`实例。
- en: 'Rerun the code and view the result, and note that the object graph is serialized
    as XML elements like `<FirstName>Bob</FirstName>` and that the `Salary` property
    is not included because it is not a `public` property, as shown in the following
    output:'
  id: totrans-1293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行代码并查看结果，注意对象图被序列化为XML元素，如`<FirstName>Bob</FirstName>`，并且`Salary`属性未包括在内，因为它不是一个`public`属性，如下面的输出所示：
- en: '```cs'
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Written 752 bytes of XML to
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 已将752字节的XML写入
- en: /Users/markjprice/Code/Chapter09/WorkingWithSerialization/people.xml
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: /Users/markjprice/Code/Chapter09/WorkingWithSerialization/people.xml
- en: <?xml version="1.0"?>
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: <?xml version="1.0"?>
- en: <ArrayOfPerson  >
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: <ArrayOfPerson  >
- en: <Person>
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: <Person>
- en: <FirstName>Alice</FirstName>
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: <FirstName>Alice</FirstName>
- en: <LastName>Smith</LastName>
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: <LastName>Smith</LastName>
- en: <DateOfBirth>1974-03-14T00:00:00</DateOfBirth>
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: <DateOfBirth>1974-03-14T00:00:00</DateOfBirth>
- en: </Person>
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: </Person>
- en: <Person>
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: <Person>
- en: <FirstName>Bob</FirstName>
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: <FirstName>Bob</FirstName>
- en: <LastName>Jones</LastName>
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: <LastName>Jones</LastName>
- en: <DateOfBirth>1969-11-23T00:00:00</DateOfBirth>
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: <DateOfBirth>1969-11-23T00:00:00</DateOfBirth>
- en: </Person>
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: </Person>
- en: <Person>
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: <Person>
- en: <FirstName>Charlie</FirstName>
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: <FirstName>Charlie</FirstName>
- en: <LastName>Cox</LastName>
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: <LastName>Cox</LastName>
- en: <DateOfBirth>1984-05-04T00:00:00</DateOfBirth>
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: <DateOfBirth>1984-05-04T00:00:00</DateOfBirth>
- en: <Children>
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: <Children>
- en: <Person>
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: <Person>
- en: <FirstName>Sally</FirstName>
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: <FirstName>Sally</FirstName>
- en: <LastName>Cox</LastName>
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: <LastName>Cox</LastName>
- en: <DateOfBirth>2000-07-12T00:00:00</DateOfBirth>
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: <DateOfBirth>2000-07-12T00:00:00</DateOfBirth>
- en: </Person>
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: </Person>
- en: </Children>
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: </Children>
- en: </Person>
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: </Person>
- en: </ArrayOfPerson>
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: </ArrayOfPerson>
- en: '```'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Generating compact XML
  id: totrans-1323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成紧凑的XML
- en: 'We could make the XML more compact using attributes instead of elements for
    some fields:'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用属性而不是元素使XML更紧凑：
- en: In `Person` , import the `System.Xml.Serialization` namespace so that you can
    decorate some properties with the `[XmlAttribute]` attribute.
  id: totrans-1325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Person`中，导入`System.Xml.Serialization`命名空间，以便可以使用`[XmlAttribute]`属性装饰一些属性。
- en: 'Decorate the first name, last name, and date of birth properties with the `[XmlAttribute]`
    attribute, and set a short name for each property, as shown highlighted in the
    following code:'
  id: totrans-1326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 装饰名、姓和出生日期属性与`[XmlAttribute]`属性，并为每个属性设置一个简短的名称，如下面的代码中所示：
- en: '```cs'
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**[**'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**XmlAttribute(**'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: '**XmlAttribute(**'
- en: '**"fname"**'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '**"fname"**'
- en: '**)**'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**]**'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: public
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: FirstName { get
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName { get
- en: ; set
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '**[**'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**XmlAttribute(**'
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: '**XmlAttribute(**'
- en: '**"lname"**'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: '**"lname"**'
- en: '**)**'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**]**'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: public
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: LastName { get
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: LastName { get
- en: ; set
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '**[**'
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**XmlAttribute(**'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: '**XmlAttribute(**'
- en: '**"dob"**'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '**"dob"**'
- en: '**)**'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**]**'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: public
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DateTime DateOfBirth { get
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime DateOfBirth { get
- en: ; set
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note that the size of the file has been reduced from 752 to
    462 bytes, a space-saving of more than a third, by outputting property values
    as XML attributes, as shown in the following output:'
  id: totrans-1358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意文件的大小已从752减少到462字节，通过将属性值输出为XML属性，节省了超过三分之一的空间，如下面的输出所示：
- en: '```cs'
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Written 462 bytes of XML to /Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.xml
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 已将 462 字节的XML写入到/Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.xml
- en: <?xml version="1.0"?>
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: <?xml version="1.0"?>
- en: <ArrayOfPerson  >
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: <ArrayOfPerson  >
- en: <Person fname="Alice" lname="Smith" dob="1974-03-14T00:00:00" />
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: <Person fname="Alice" lname="Smith" dob="1974-03-14T00:00:00" />
- en: <Person fname="Bob" lname="Jones" dob="1969-11-23T00:00:00" />
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: <Person fname="Bob" lname="Jones" dob="1969-11-23T00:00:00" />
- en: <Person fname="Charlie" lname="Cox" dob="1984-05-04T00:00:00">
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: <Person fname="Charlie" lname="Cox" dob="1984-05-04T00:00:00">
- en: <Children>
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: <Children>
- en: <Person fname="Sally" lname="Cox" dob="2000-07-12T00:00:00" />
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: <Person fname="Sally" lname="Cox" dob="2000-07-12T00:00:00" />
- en: </Children>
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: </Children>
- en: </Person>
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: </Person>
- en: </ArrayOfPerson>
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: </ArrayOfPerson>
- en: '```'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Deserializing XML files
  id: totrans-1372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反序列化XML文件
- en: 'Now let''s try deserializing the XML file back into live objects in memory:'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试将XML文件反序列化为内存中的实时对象：
- en: 'Add statements to open the XML file and then deserialize it, as shown in the
    following code:'
  id: totrans-1374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来打开XML文件，然后对其进行反序列化，如下面的代码所示：
- en: '```cs'
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (FileStream xmlLoad = File.Open(path, FileMode.Open))
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: (FileStream xmlLoad = File.Open(path, FileMode.Open))
- en: '{'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // deserialize and cast the object graph into a List of Person
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: // 反序列化并将对象图转换为Person列表
- en: List<Person>? loadedPeople =
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person>? loadedPeople =
- en: xs.Deserialize(xmlLoad) as
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: xs.Deserialize(xmlLoad) as
- en: List<Person>;
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person>;
- en: if
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (loadedPeople is
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: (loadedPeople is
- en: not
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: not
- en: 'null'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: foreach
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Person p in
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: (Person p in
- en: loadedPeople)
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: loadedPeople)
- en: '{'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0} has {1} children."
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0}有{1}个孩子。"
- en: ','
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: p.LastName, p.Children?.Count ?? 0
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: p.LastName, p.Children?.Count ?? 0
- en: );
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note that the people are loaded successfully from the XML
    file and then enumerated, as shown in the following output:'
  id: totrans-1401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意人们已成功从XML文件加载，然后被枚举，如下面的输出所示：
- en: '```cs'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Smith has 0 children.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: Smith has 0 children.
- en: Jones has 0 children.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: Jones has 0 children.
- en: Cox has 1 children.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: Cox has 1 children.
- en: '```'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are many other attributes that can be used to control the XML generated.
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他属性可以用来控制生成的XML。
- en: If you don't use any annotations, `XmlSerializer` performs a case-insensitive
    match using the property name when deserializing.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用任何注释，`XmlSerializer`在反序列化时使用属性名称进行不区分大小写的匹配。
- en: '**Good Practice** : When using `XmlSerializer` , remember that only the public
    fields and properties are included, and the type must have a parameterless constructor.
    You can customize the output with attributes.'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：使用`XmlSerializer`时，请记住只有公共字段和属性会被包括在内，并且类型必须具有无参数的构造函数。您可以使用属性自定义输出。'
- en: Serializing with JSON
  id: totrans-1410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JSON进行序列化
- en: 'One of the most popular .NET libraries for working with the JSON serialization
    format is Newtonsoft.Json, known as Json.NET. It is mature and powerful. Let''s
    see it in action:'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: .NET中最受欢迎的用于处理JSON序列化格式的库之一是Newtonsoft.Json，也称为Json.NET。它是成熟且功能强大的。让我们看看它的作用：
- en: 'In the `WorkingWithSerialization` project, add a package reference for the
    latest version of `Newtonsoft.Json` , as shown in the following markup:'
  id: totrans-1412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithSerialization`项目中，添加对`Newtonsoft.Json`最新版本的包引用，如下标记所示：
- en: '```cs'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference Include="Newtonsoft.Json"
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="Newtonsoft.Json"
- en: Version="13.0.1"
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: Version="13.0.1"
- en: />
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the `WorkingWithSerialization` project to restore packages.
  id: totrans-1420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`WorkingWithSerialization`项目以还原包。
- en: 'In `Program.cs` , add statements to create a text file and then serialize the
    people into the file as JSON, as shown in the following code:'
  id: totrans-1421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加语句创建一个文本文件，然后将人们序列化为JSON格式写入文件，如下面的代码所示：
- en: '```cs'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // create a file to write to
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个要写入的文件
- en: string
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: jsonPath = Combine(CurrentDirectory, "people.json"
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: jsonPath = Combine(CurrentDirectory, "people.json"
- en: );
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: using
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (StreamWriter jsonStream = File.CreateText(jsonPath))
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: (StreamWriter jsonStream = File.CreateText(jsonPath))
- en: '{'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // create an object that will format as JSON
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个将格式化为JSON的对象
- en: Newtonsoft.Json.JsonSerializer jss = new
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: Newtonsoft.Json.JsonSerializer jss = new
- en: ();
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: // serialize the object graph into a string
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: // 将对象图序列化为字符串
- en: jss.Serialize(jsonStream, people);
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: jss.Serialize(jsonStream, people);
- en: '}'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine();
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: 'WriteLine("Written {0:N0} bytes of JSON to: {1}"'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("已将 {0:N0} 字节的JSON写入到：{1}"
- en: ','
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'arg0: new'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: new'
- en: FileInfo(jsonPath).Length,
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(jsonPath).Length,
- en: 'arg1: jsonPath);'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: jsonPath);'
- en: // Display the serialized object graph
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: // 显示序列化的对象图
- en: WriteLine(File.ReadAllText(jsonPath));
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(jsonPath));
- en: '```'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note that JSON requires less than half the number of bytes
    compared to XML with elements. It''s even smaller than the XML file, which uses
    attributes, as shown in the following output:'
  id: totrans-1445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意，与使用元素的XML相比，JSON所需的字节数少了一半。它甚至比使用属性的XML文件还要小，如下面的输出所示：
- en: '```cs'
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Written 366 bytes of JSON to: /Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.json
    [{"FirstName":"Alice","LastName":"Smith","DateOfBirth":"1974-03-'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 已将366字节的JSON写入：/Users/markjprice/Code/Chapter09/ WorkingWithSerialization/people.json[{"FirstName":"Alice"，"LastName":"Smith"，"DateOfBirth":"1974-03-
- en: 14T00:00:00","Children":null},{"FirstName":"Bob","LastName":"Jones","Date
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 14T00:00:00"，"Children":null}，{"FirstName":"Bob"，"LastName":"Jones"，"Date
- en: OfBirth":"1969-11-23T00:00:00","Children":null},{"FirstName":"Charlie","L astName":"Cox","DateOfBirth":"1984-05-04T00:00:00","Children":[{"FirstNam
    e":"Sally","LastName":"Cox","DateOfBirth":"2000-07-12T00:00:00","Children ":null}]}]
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: OfBirth"："1969-11-23T00:00:00"，"Children"：null}，{"FirstName"："Charlie"，"L astName"："Cox"，"DateOfBirth"："1984-05-04T00:00:00"，"Children"：[{"FirstNam
    e"："Sally"，"LastName"："Cox"，"DateOfBirth"："2000-07-12T00:00:00"，"Children "：null}]}]
- en: '```'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: High-performance JSON processing
  id: totrans-1451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高性能JSON处理
- en: .NET Core 3.0 introduced a new namespace for working with JSON, `System.Text.Json`
    , which is optimized for performance by leveraging APIs like `Span<T>` .
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.0引入了一个新的用于处理JSON的命名空间`System.Text.Json`，通过利用`Span<T>`等API进行了性能优化。
- en: Also, older libraries like Json.NET are implemented by reading UTF-16\. It would
    be more performant to read and write JSON documents using UTF-8 because most network
    protocols, including HTTP, use UTF-8 and you can avoid transcoding UTF-8 to and
    from Json.NET's Unicode `string` values.
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，像Json.NET这样的旧库是通过读取UTF-16来实现的。使用UTF-8来读写JSON文档会更高效，因为大多数网络协议，包括HTTP，都使用UTF-8，你可以避免将UTF-8转码为Json.NET的Unicode
    `string`值。
- en: With the new API, Microsoft achieved between 1.3x and 5x improvement, depending
    on the scenario.
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新API，微软在不同的场景中实现了1.3倍到5倍的性能提升。
- en: 'The original author of Json.NET, James Newton-King, joined Microsoft and has
    been working with them to develop their new JSON types. As he says in a comment
    discussing the new JSON APIs, "Json.NET isn''t going away," as shown in *Figure
    9.3* :'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: Json.NET的原始作者James Newton-King加入了微软，并一直与他们合作开发他们的新JSON类型。正如他在讨论新的JSON API时所说的那样，“Json.NET不会消失”，如*图9.3*所示：
- en: '![Graphical user interface, text, application, email Description automatically
    generated](img/Image00088.jpg)'
  id: totrans-1456
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件描述自动生成](img/Image00088.jpg)'
- en: 'Figure 9.3: A comment by the original author of Json.NET'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：Json.NET的原始作者的评论
- en: 'Let''s see how to use the new JSON APIs to deserialize a JSON file:'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用新的JSON API来反序列化JSON文件：
- en: 'In the `WorkingWithSerialization` project, in `Program.cs` , import the new
    JSON class for performing serialization using an alias to avoid conflicting names
    with the Json.NET one we used before, as shown in the following code:'
  id: totrans-1459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithSerialization`项目的`Program.cs`中，导入新的JSON类以使用别名执行序列化，以避免与之前使用的Json.NET发生冲突，如下面的代码所示：
- en: '```cs'
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: NewJson = System.Text.Json.JsonSerializer;
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: NewJson = System.Text.Json.JsonSerializer;
- en: '```'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add statements to open the JSON file, deserialize it, and output the names
    and counts of the children of the people, as shown in the following code:'
  id: totrans-1464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以打开JSON文件，对其进行反序列化，并输出人员的姓名和孩子的数量，如下面的代码所示：
- en: '```cs'
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (FileStream jsonLoad = File.Open(jsonPath, FileMode.Open))
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: (FileStream jsonLoad = File.Open(jsonPath，FileMode.Open))
- en: '{'
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // deserialize object graph into a List of Person
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: // 将对象图反序列化为Person列表
- en: List<Person>? loadedPeople =
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person>? loadedPeople =
- en: await
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 等待
- en: 'NewJson.DeserializeAsync(utf8Json: jsonLoad,'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: NewJson.DeserializeAsync(utf8Json：jsonLoad，
- en: 'returnType: typeof'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 'returnType: typeof'
- en: (List<Person>)) as
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: (List<Person>)) as
- en: List<Person>;
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: List<Person>;
- en: if
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (loadedPeople is
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: (loadedPeople是
- en: not
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 不
- en: 'null'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: )
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: foreach
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: foreach```
- en: (Person p in
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: (Person p in
- en: loadedPeople)
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: loadedPeople)
- en: '{'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0} has {1} children."
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0}有{1}个孩子。"
- en: ','
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: p.LastName, p.Children?.Count ?? 0
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: p.LastName，p.Children?.Count ?? 0
- en: );
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '}'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Smith has 0 children.
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: Smith有0个孩子。
- en: Jones has 0 children.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: Jones有0个孩子。
- en: Cox has 1 children.
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: Cox有1个孩子。
- en: '```'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Choose Json.NET for developer productivity and a large
    feature set or `System.Text.Json` for performance.'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：选择Json.NET以提高开发人员的生产力和丰富的功能集，或者选择`System.Text.Json`以获得更好的性能。'
- en: Controlling JSON processing
  id: totrans-1501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制JSON处理
- en: 'There are many options for taking control of how JSON is processed, as shown
    in the following list:'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可以控制JSON的处理方式，如下面的列表所示：
- en: Including and excluding fields.
  id: totrans-1503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括和排除字段。
- en: Setting a casing policy.
  id: totrans-1504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置大小写策略。
- en: Selecting a case-sensitivity policy.
  id: totrans-1505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择大小写敏感策略。
- en: Choosing between compact and prettified whitespace.
  id: totrans-1506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择紧凑和美化的空格。
- en: 'Let''s see some in action:'
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些实际操作：
- en: Use your preferred code editor to add a new console app named `WorkingWithJson`
    to the `Chapter09` solution/workspace.
  id: totrans-1508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器向`Chapter09`解决方案/工作区添加一个名为`WorkingWithJson`的新控制台应用程序。
- en: In Visual Studio Code, select `WorkingWithJson` as the active OmniSharp project.
  id: totrans-1509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`WorkingWithJson`选择为活动的OmniSharp项目。
- en: 'In the `WorkingWithJson` project, in `Program.cs` , delete the existing code,
    import the two main namespaces for working with JSON, and then statically import
    the `System.Console` , `System.Environment` , and `System.IO.Path` types, as shown
    in the following code:'
  id: totrans-1510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithJson`项目的`Program.cs`中，删除现有的代码，导入处理JSON的两个主要命名空间，然后静态导入`System.Console`，`System.Environment`和`System.IO.Path`类型，如下面的代码所示：
- en: '```cs'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Text.Json; // JsonSerializer
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: System.Text.Json; // JsonSerializer
- en: using
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.Text.Json.Serialization; // [JsonInclude]
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: System.Text.Json.Serialization; // [JsonInclude]
- en: using
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Console;
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: using
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Environment;
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: System.Environment;
- en: using
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.IO.Path;
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: System.IO.Path;
- en: '```'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the bottom of `Program.cs` , define a class named `Book` , as shown in the
    following code:'
  id: totrans-1526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，定义一个名为`Book`的类，如下面的代码所示：
- en: '```cs'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Book
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 书
- en: '{'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // constructor to set non-nullable property
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: // 构造函数设置非空属性
- en: public
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: Book
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 书
- en: (
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: title
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 标题
- en: )
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Title = title;
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: Title = title;
- en: '}'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // properties
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: // 属性
- en: public
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: Title { get
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: Title { get
- en: ; set
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? Author { get'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: ？作者{获取
- en: ; set
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: // fields
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: // 字段
- en: '[JsonInclude'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: '[JsonInclude'
- en: '] // include this field'
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: '] // 包括此字段'
- en: public
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: DateOnly PublishDate;
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: DateOnly PublishDate;
- en: '[JsonInclude'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: '[JsonInclude'
- en: '] // include this field'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: '] // 包括此字段'
- en: public
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: DateTimeOffset Created;
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: DateTimeOffset Created;
- en: public
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: ushort
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: ushort
- en: Pages;
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: Pages;
- en: '}'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Above the `Book` class, add statements to create an instance of the `Book`
    class and serialize it to JSON, as shown in the following code:'
  id: totrans-1567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Book`类上方，添加语句以创建`Book`类的实例并将其序列化为JSON，如下面的代码所示：
- en: '```cs'
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Book csharp10 = new
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: Book csharp10 = new
- en: '(title:'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: （标题：
- en: '"C# 10 and .NET 6 - Modern Cross-platform Development"'
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: '"C# 10 and .NET 6 - Modern Cross-platform Development"'
- en: )
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Author = "Mark J Price"
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: Author = "Mark J Price"
- en: ','
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: PublishDate = new
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: PublishDate = new
- en: '(year: 2021'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: （年：2021
- en: ', month: 11'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: ，月：11
- en: ', day: 9'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: ，日：9
- en: ),
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: ），
- en: Pages = 823
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: Pages = 823
- en: ','
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: Created = DateTimeOffset.UtcNow,
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: Created = DateTimeOffset.UtcNow,
- en: '};'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: JsonSerializerOptions options = new
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: JsonSerializerOptions options = new
- en: ()
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: IncludeFields = true
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: IncludeFields = true
- en: ', // includes all fields'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: ', // 包括所有字段'
- en: PropertyNameCaseInsensitive = true
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: PropertyNameCaseInsensitive = true
- en: ','
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: WriteIndented = true
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: WriteIndented = true
- en: ','
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
- en: '};'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: string
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: filePath = Combine(CurrentDirectory, "book.json"
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: filePath = Combine(CurrentDirectory, "book.json"
- en: );
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: using
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Stream fileStream = File.Create(filePath))
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: （使用文件流= File.Create(filePath))
- en: '{'
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: JsonSerializer.Serialize<Book>(
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: JsonSerializer.Serialize<Book>(
- en: 'utf8Json: fileStream, value'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: utf8Json：fileStream，value
- en: ': csharp10, options);'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: ：csharp10，选项）;
- en: '}'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine("Written {0:N0} bytes of JSON to {1}"
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("Written {0:N0} bytes of JSON to {1}"
- en: ','
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'arg0: new'
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: new'
- en: FileInfo(filePath).Length,
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: FileInfo(filePath).Length,
- en: 'arg1: filePath);'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: filePath);'
- en: WriteLine();
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: // Display the serialized object graph
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: // 显示序列化的对象图
- en: WriteLine(File.ReadAllText(filePath));
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(File.ReadAllText(filePath));
- en: '```'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Written 315 bytes of JSON to C:\Code\Chapter09\WorkingWithJson\bin\Debug\net6.0\book.json
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 将315字节的JSON写入C:\Code\Chapter09\WorkingWithJson\bin\Debug\net6.0\book.json
- en: '{'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"title": "C# 10 and .NET 6 - Modern Cross-platform Development",'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: '"title": "C# 10 and .NET 6 - Modern Cross-platform Development",'
- en: '"author": "Mark J Price",'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: '"author": "Mark J Price",'
- en: '"publishDate": {'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: '"publishDate": {'
- en: '"year": 2021,'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: '"year": 2021,'
- en: '"month": 11,'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: '"month": 11,'
- en: '"day": 9,'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: '"day": 9,'
- en: '"dayOfWeek": 2,'
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: '"dayOfWeek": 2,'
- en: '"dayOfYear": 313,'
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: '"dayOfYear": 313,'
- en: '"dayNumber": 738102'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: '"dayNumber": 738102'
- en: '},'
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '"created": "2021-08-20T08:07:02.3191648+00:00",'
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: '"created": "2021-08-20T08:07:02.3191648+00:00",'
- en: '"pages": 823'
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: '"pages": 823'
- en: '}'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下内容：
- en: The JSON file is 315 bytes.
  id: totrans-1634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON文件为315字节。
- en: The member names use camelCasing, for example, `publishDate` . This is best
    for subsequent processing in a browser with JavaScript.
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员名称使用驼峰命名，例如`publishDate`。这对于在浏览器中使用JavaScript进行后续处理最佳。
- en: All fields are included due to the options set, including `pages` .
  id: totrans-1636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于设置的选项，所有字段都包括在内，包括`pages`。
- en: JSON is prettified for easier human legibility.
  id: totrans-1637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON经过美化以便于人类阅读。
- en: '`DateTimeOffset` values are stored as a single standard string format.'
  id: totrans-1638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTimeOffset`值以单个标准字符串格式存储。'
- en: '`DateOnly` values are stored as an object with sub-properties for date parts
    like `year` and `month` .'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateOnly`值存储为具有日期部分的子属性的对象，例如`year`和`month`。'
- en: In `Program.cs` , when setting the `JsonSerializerOptions` , comment out the
    setting of casing policy, write indented, and include fields.
  id: totrans-1640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，设置`JsonSerializerOptions`时，注释掉设置大小写策略，写入缩进，并包括字段。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1641
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Written 230 bytes of JSON to C:\Code\Chapter09\WorkingWithJson\bin\Debug\net6.0\book.json
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 将230字节的JSON写入C:\Code\Chapter09\WorkingWithJson\bin\Debug\net6.0\book.json
- en: '{"Title":"C# 10 and .NET 6 - Modern Cross-platform Development","Author":"Mark
    J Price","PublishDate":{"Year":2021,"Month":11,"Day":9,"DayOfWeek":2,"DayOfYear":313,"DayNumber":738102},"Created":"2021-08-20T08:12:31.6852484+00:00"}'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: '{"Title":"C# 10 and .NET 6 - Modern Cross-platform Development","Author":"Mark
    J Price","PublishDate":{"Year":2021,"Month":11,"Day":9,"DayOfWeek":2,"DayOfYear":313,"DayNumber":738102},"Created":"2021-08-20T08:12:31.6852484+00:00"}'
- en: '```'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下内容：
- en: The JSON file is 230 bytes, a more than 25% reduction.
  id: totrans-1647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON文件为230字节，减少了25%以上。
- en: The member names use normal casing, for example, `PublishDate` .
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员名称使用正常大小写，例如`PublishDate`。
- en: The `Pages` field is missing. The other fields are included due to the `[JsonInclude]`
    attribute on `PublishDate` and `Created` field.
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pages`字段缺失。其他字段由于`PublishDate`和`Created`字段上的`[JsonInclude]`属性而包含在内。'
- en: JSON is compact with minimal whitespace to save bandwidth for transmission or
    storage.
  id: totrans-1650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON紧凑，最小化空白以节省传输或存储的带宽。
- en: New JSON extension methods for working with HTTP responses
  id: totrans-1651
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于处理HTTP响应的新JSON扩展方法
- en: In .NET 5, Microsoft added refinements to the types in the `System.Text.Json`
    namespace like extension methods for `HttpResponse` , which you will see in *Chapter
    16* , *Building and Consuming Web Services* .
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 5中，微软对`System.Text.Json`命名空间中的类型进行了改进，例如为`HttpResponse`添加了扩展方法，您将在*第16章*，*构建和使用Web服务*中看到。
- en: Migrating from Newtonsoft to new JSON
  id: totrans-1653
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Newtonsoft迁移到新JSON
- en: 'If you have existing code that uses the Newtonsoft Json.NET library and you
    want to migrate to the new `System.Text.Json` namespace, then Microsoft has specific
    documentation for that, which you will find at the following link:'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有现有代码使用Newtonsoft Json.NET库，并且想要迁移到新的`System.Text.Json`命名空间，那么微软有专门的文档，您可以在以下链接找到：
- en: '[https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to)'
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to)'
- en: Practicing and exploring
  id: totrans-1656
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with more in-depth research.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试您的知识和理解，进行一些实践，并通过更深入的研究来探索本章的主题。
- en: Exercise 9.1 – Test your knowledge
  id: totrans-1658
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.1-测试您的知识
- en: 'Answer the following questions:'
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What is the difference between using the `File` class and the `FileInfo` class?
  id: totrans-1660
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`File`类和`FileInfo`类有什么区别？
- en: What is the difference between the `ReadByte` method and the `Read` method of
    a stream?
  id: totrans-1661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流的`ReadByte`方法和`Read`方法之间有什么区别？
- en: When would you use the `StringReader` , `TextReader` , and `StreamReader` classes?
  id: totrans-1662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时使用`StringReader`，`TextReader`和`StreamReader`类？
- en: What does the `DeflateStream` type do?
  id: totrans-1663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DeflateStream`类型是做什么的？'
- en: How many bytes per character does UTF-8 encoding use?
  id: totrans-1664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UTF-8编码每个字符使用多少字节？
- en: What is an object graph?
  id: totrans-1665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是对象图？
- en: What is the best serialization format to choose for minimizing space requirements?
  id: totrans-1666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最佳序列化格式以减少空间要求是什么？
- en: What is the best serialization format to choose for cross-platform compatibility?
  id: totrans-1667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最佳序列化格式以实现跨平台兼容性是什么？
- en: Why is it bad to use a `string` value like `"\Code\Chapter01"` to represent
    a path, and what should you do instead?
  id: totrans-1668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么使用`string`值如`"\Code\Chapter01"`来表示路径是不好的，你应该做什么？
- en: Where can you find information about NuGet packages and their dependencies?
  id: totrans-1669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在哪里可以找到有关NuGet软件包及其依赖关系的信息？
- en: Exercise 9.2 – Practice serializing as XML
  id: totrans-1670
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.2-练习将XML序列化
- en: 'In the `Chapter09` solution/workspace, create a console application named `Exercise02`
    that creates a list of shapes, uses serialization to save it to the filesystem
    using XML, and then deserializes it back:'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter09`解决方案/工作区中，创建一个名为`Exercise02`的控制台应用程序，该应用程序创建一个形状列表，使用XML进行序列化并将其保存到文件系统，然后再次进行反序列化：
- en: '```cs'
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // create a list of Shapes to serialize
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: //创建一个要序列化的形状列表
- en: List<Shape> listOfShapes = new
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: List<Shape> listOfShapes = new
- en: ()
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: new
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: Circle { Colour = "Red"
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形{颜色="红色"
- en: ', Radius = 2.5'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: ，半径=2.5
- en: '},'
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: Rectangle { Colour = "Blue"
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形{颜色="蓝色"
- en: ', Height = 20.0'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: ，高度=20.0
- en: ', Width = 10.0'
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: ，宽度=10.0
- en: '},'
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: Circle { Colour = "Green"
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形{颜色="绿色"
- en: ', Radius = 8.0'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: ，半径=8.0
- en: '},'
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: Circle { Colour = "Purple"
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形{颜色="紫色"
- en: ', Radius = 12.3'
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: ，半径=12.3
- en: '},'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 新
- en: Rectangle { Colour = "Blue"
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形{颜色="蓝色"
- en: ', Height = 45.0'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: ，高度=45.0
- en: ', Width = 18.0'
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: ，宽度=18.0
- en: '}'
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Shapes should have a read-only property named `Area` so that when you deserialize,
    you can output a list of shapes, including their areas, as shown here:'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 形状应该有一个名为`Area`的只读属性，这样当你反序列化时，你可以输出形状的列表，包括它们的面积，如下所示：
- en: '```cs'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: List<Shape> loadedShapesXml =
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: List<Shape> loadedShapesXml =
- en: serializerXml.Deserialize(fileXml) as
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: serializerXml.Deserialize(fileXml) as
- en: List<Shape>;
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: List<Shape>;
- en: foreach
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Shape item in
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 形状项目中
- en: loadedShapesXml)
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: loadedShapesXml)
- en: '{'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0} is {1} and has an area of {2:N2}"
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0}是{1}，面积为{2:N2}"
- en: ','
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: item.GetType().Name, item.Colour, item.Area);
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: item.GetType().Name，item.Colour，item.Area);
- en: '}'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This is what your output should look like when you run your console application:'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行控制台应用程序时，您的输出应该如下所示：
- en: '```cs'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Loading shapes from XML:'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 从XML加载形状：
- en: Circle is Red and has an area of 19.63
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形是红色的，面积为19.63
- en: Rectangle is Blue and has an area of 200.00
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形是蓝色的，面积为200.00
- en: Circle is Green and has an area of 201.06
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形是绿色的，面积为201.06
- en: Circle is Purple and has an area of 475.29
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形是紫色的，面积为475.29
- en: Rectangle is Blue and has an area of 810.00
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形是蓝色的，面积为810.00
- en: '```'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Exercise 9.3 – Explore topics
  id: totrans-1724
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习9.3-探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，了解本章涵盖的主题的更多细节：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-9---working-with-files-streams-and-serialization](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-9---working-with-files-streams-and-serialization)'
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-9---working-with-files-streams-and-serialization](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-9---working-with-files-streams-and-serialization)'
- en: Summary
  id: totrans-1727
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to read from and write to text files and XML
    files, how to compress and decompress files, how to encode and decode text, and
    how to serialize an object into JSON and XML (and deserialize it back again).
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何从文本文件和XML文件中读取和写入，如何压缩和解压文件，如何编码和解码文本，以及如何将对象序列化为JSON和XML（以及再次反序列化）。
- en: In the next chapter, you will learn how to work with databases using Entity
    Framework Core.
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用Entity Framework Core处理数据库。
