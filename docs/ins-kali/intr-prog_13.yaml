- en: Java Standard and External Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java标准库和外部库
- en: Even the first program we wrote in this book used a library included in the
    JDK, called a standard library. It is not possible to write a non-trivial program
    without using the standard libraries. That is why a solid familiarity with such
    libraries is as vital for successful programming as the knowledge of the language
    itself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们在本书中编写的第一个程序也使用了JDK中包含的库，称为标准库。不使用标准库无法编写非平凡程序。这就是为什么对这些库的熟悉程度对于成功编程与语言本身的知识一样重要。
- en: There are also non-standard libraries, which are called external libraries or
    third-party libraries because they are not included in JDK distribution, but they
    are used almost as often. They have long become permanent members of any programmer's
    toolkit. Meanwhile, keeping track of all the functionality available in these
    libraries is not as easy as staying abreast with Java itself. That is because
    IDE gives you a hint about the language possibilities, but it cannot advise about
    the functionality of a package that's not been imported yet. The only package
    that is imported automatically and does not require importing is `java.lang`,
    and that will be the first we are going to overview in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 还有非标准库，被称为外部库或第三方库，因为它们不包含在JDK发行版中，但它们几乎和标准库一样经常被使用。它们早已成为任何程序员工具包的固定成员。与Java本身保持同步并不容易跟踪这些库中所有可用的功能。这是因为IDE可以提示您有关语言功能，但无法提供有关尚未导入的包的功能的建议。唯一自动导入且无需导入的包是`java.lang`，这将是我们在本章中首先要概述的内容。
- en: 'The topics discussed in this chapter are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的主题有：
- en: What are standard and external libraries?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是标准库和外部库？
- en: Java standard libraries overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java标准库概述
- en: Package `java.lang`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包`java.lang`
- en: Package `java.util`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包`java.util`
- en: Packages `java.io` and `java.nio`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包`java.io`和`java.nio`
- en: Packages `java.sql` and `javax.sql`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包`java.sql`和`javax.sql`
- en: Package `java.net`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包`java.net`
- en: Package ``java.math``
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包`java.math`
- en: Packages `java.awt`, `javax.swing`, and `javafx`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包`java.awt`，`javax.swing`和`javafx`
- en: Java external libraries overview
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java外部库概述
- en: Library `org.junit`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库`org.junit`
- en: Library `org.mockito`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库`org.mockito`
- en: Libraries `org.log4j` and `org.slf4j`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库`org.log4j`和`org.slf4j`
- en: Libraries `org.apache.commons`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库`org.apache.commons`
- en: Exercise – Using `java.time.LocalDateTime`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习-使用`java.time.LocalDateTime`
- en: What are standard and external libraries?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是标准库和外部库？
- en: A standard library (also called a class standard library) is a collection of
    classes and interfaces available for all implementations of the language. In simpler
    terms, this means that, it is a collection of `.class` files included in the JDK
    and ready to be used. Once you have installed Java, you get them as part of the
    installation and can start building your application code up using the classes
    of the standard library as building blocks that take care of a lot of low-level
    plumbing. The standard library's richness and ease of usage substantially contributed
    to Java's popularity.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库（也称为类标准库）是一组对语言的所有实现都可用的类和接口。简单来说，这意味着它是包含在JDK中的`.class`文件的集合，并且可以立即使用。一旦安装了Java，您就可以将它们作为安装的一部分，并且可以开始使用标准库的类作为构建块来构建应用程序代码，这些类可以处理许多低级管道。标准库的丰富性和易用性大大促进了Java的流行。
- en: These collections are organized by packages. That's why instead of saying Java
    standard library, which would be the correct way to refer to all these collections
    together, programmers call them Java standard libraries – because, in order to
    use them, you have to import the library packages as needed, so they are perceived
    as many libraries.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些集合是按包组织的。这就是为什么程序员称它们为Java标准库，因为为了使用它们，您必须根据需要导入库包，因此它们被视为许多库。
- en: They are also standard because Maven adds them to the classpath automatically,
    so we do not need to list them in the `pom.xml` file as dependencies. And that
    is what separates standard libraries and external libraries; if you need to add
    a library (typically, a `.jar` file) as a dependency in the Maven configuration
    file `pom.xml`, this library is an external one, also called a third-party library.
    Otherwise, it is a standard library.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也是标准库，因为Maven会自动将它们添加到类路径中，因此我们不需要在`pom.xml`文件中列出它们作为依赖项。这就是标准库和外部库的区别；如果您需要将库（通常是`.jar`文件）作为依赖项添加到Maven配置文件`pom.xml`中，这个库就是外部库，也称为第三方库。否则，它就是标准库。
- en: In the following sections, we will provide an overview for each category and
    look closer at a few of the most popular standard and external libraries.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将为每个类别提供概述，并更仔细地查看一些最受欢迎的标准和外部库。
- en: Java standard libraries
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java标准库
- en: If you search "Java API" on the internet, you will find an online description
    of all the packages included in JDK. Some package names start with `java`. They
    are traditionally called core Java packages, while those that start with `javax`
    used to be called extensions. This was done so probably because the extensions
    were thought to be optional and maybe even released independently of JDK. There
    was also an attempt to promote former extension libraries to become a core package,
    but that would require the package's name to change from Java to Javax, which
    would have broken the already existing applications. So, the idea was abandoned,
    the extensions became as standard part of JDK as the core, and the distinction
    between core and extensions gradually disappeared.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在互联网上搜索“Java API”，您将找到JDK中包含的所有包的在线描述。一些包名称以`java`开头。它们传统上被称为核心Java包，而以`javax`开头的包曾被称为扩展。这样做可能是因为扩展被认为是可选的，甚至可能独立于JDK发布。还有一次尝试将以前的扩展库提升为核心包，但这将需要将包的名称从Java更改为Javax，这将破坏已经存在的应用程序。因此，这个想法被放弃了，扩展成为JDK的标准部分，核心和扩展之间的区别逐渐消失。
- en: That is why if you look at the official Java API on the Oracle website you will
    see listed as standard not only `java` and `javax` packages, but also `jdk`, `com.sun`,
    `org.xml`, and some other packages, too. These extra packages are primarily used
    by the tools or other specialized applications. In our book, we will concentrate
    mostly on the mainstream Java programming and talk only about `java` and `javax` packages.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么如果你在Oracle网站上查看官方Java API，你会看到标准不仅列出了`java`和`javax`包，还列出了`jdk`、`com.sun`、`org.xml`和其他一些包。这些额外的包主要被工具或其他专门的应用程序使用。在我们的书中，我们将主要集中讨论主流的Java编程，并且只谈论`java`和`javax`包。
- en: java.lang
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.lang
- en: 'This package is so fundamental for all the Java class libraries that it is
    not only not required to be listed in the Maven configuration `pom.xml` file as
    a dependency (all other packages of the Java standard library are not required
    to be listed as a dependency too), but its members are even not required to be
    imported in order to use them. Any member of any package, whether standard are
    not, has to be imported or used with its fully qualified name, except classes
    and interfaces of the `java.lang` package. The reason for that is that it contains
    the two most important and the most used classes of Java:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包对于所有Java类库来说是如此基础，以至于不仅不需要在Maven配置的`pom.xml`文件中列出它作为依赖项（Java标准库的所有其他包也不需要列出作为依赖项），而且其成员甚至不需要被导入才能使用。任何包的任何成员，无论是标准的还是非标准的，都必须被导入或者使用其完全限定名，除了`java.lang`包的类和接口。原因是它包含了Java中最重要和最常用的两个类：
- en: '`Object`: The base class of any other Java class (see [Chapter 2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml), *Java
    Language Basics*)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object`：任何其他Java类的基类（参见[第2章](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml)，*Java语言基础*）'
- en: '`Class`: Its instances carry metadata of every loaded class at runtime (see [Chapter
    11](e8c37d86-291d-4500-84ea-719683172477.xhtml), *JVM Processes and Garbage Collection*)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Class`：其实例在运行时携带每个加载类的元数据（参见[第11章](e8c37d86-291d-4500-84ea-719683172477.xhtml)，*JVM进程和垃圾回收*）'
- en: 'In addition, the `java.lang` package includes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`java.lang`包包括：
- en: The classes `String`, `StringBuffer`, and `StringBuilders`, which support operations
    with type `String` (see [Chapter 15](42b614c0-4302-4b71-8a1d-fa74d2943a2a.xhtml),
    *Manage Objects, Strings, Time, and Random Numbers* for more details and examples
    of usage)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String`、`StringBuffer`和`StringBuilders`类，支持`String`类型的操作（有关更多详细信息和用法示例，请参见[第15章](42b614c0-4302-4b71-8a1d-fa74d2943a2a.xhtml)，*管理对象、字符串、时间和随机数*）'
- en: 'The wrapper classes of all primitive types: `Byte`, `Boolean`, `Short`, `Character`,
    `Integer`, `Long`, `Float`, and `Double` (see [Chapter 9](33ed1fb4-36e0-499b-8156-4d5e88a2c404.xhtml),
    *Operators, Expressions, and Statements* for more details about wrapper classes
    and their usage)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有基本类型的包装类：`Byte`、`Boolean`、`Short`、`Character`、`Integer`、`Long`、`Float`和`Double`（有关包装类及其用法的更多详细信息，请参见[第9章](33ed1fb4-36e0-499b-8156-4d5e88a2c404.xhtml)，*运算符、表达式和语句*）
- en: The `Number` class, the base class for the numeral wrapper classes listed previously
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number`类，前面列出的数字包装类的基类'
- en: The `System` class, which provides access to important system operations and
    the standard input and output (we have used the `System.out` object in every code
    example in this book)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`类，提供对重要系统操作和标准输入输出的访问（我们在本书的每个代码示例中都使用了`System.out`对象）'
- en: The `Runtime` class, which provides access to the execution environment
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Runtime`类，提供对执行环境的访问'
- en: The `Thread` class and the `Runnable` interface, fundamental for creating Java
    threads
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Thread`类和`Runnable`接口，用于创建Java线程的基础'
- en: The `Iterable` interface used by the iteration statements (see [Chapter 9](33ed1fb4-36e0-499b-8156-4d5e88a2c404.xhtml),
    *Operators, Expressions, and Statements**)*
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Iterable`接口，用于迭代语句（参见[第9章](33ed1fb4-36e0-499b-8156-4d5e88a2c404.xhtml)，*运算符、表达式和语句*）'
- en: The `Math` class, which provides methods for basic numeric operations
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math`类，提供基本数值操作的方法'
- en: The `Throwable` class – the base class for all exceptions
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Throwable`类 - 所有异常的基类'
- en: The exception class `Error` and all its children, used to communicate system
    errors that should not be caught by an application
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常类`Error`及其所有子类，用于传达不应被应用程序捕获的系统错误
- en: The `Exception` class and its many children, which represent checked exceptions (see [Chapter
    10](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml), *Control Flow Statements*)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exception`类及其许多子类，代表已检查的异常（参见[第10章](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml)，*控制流语句*）'
- en: The `RuntimeException` class and its many children, which represent unchecked
    exceptions, also called runtime exceptions (see [Chapter 10](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml), *Control
    Flow Statements*)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RuntimeException`类及其许多子类，代表未经检查的异常，也称为运行时异常（参见[第10章](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml)，*控制流语句*）'
- en: The `ClassLoader` class, which allows loading classes and can be used to build
    customized classloaders
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClassLoader`类，允许加载类并可用于构建自定义类加载器'
- en: The `Process` and `ProcessBuilder` classes, which allow creating external processes
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Process`和`ProcessBuilder`类，允许创建外部进程'
- en: Many other useful classes and interfaces
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多其他有用的类和接口
- en: java.util
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.util
- en: 'This is another very commonly used package. Most of its content is dedicated
    to support collections:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个非常常用的包。它的大部分内容都是用于支持集合：
- en: 'The `Collection` interface – the base interface of many collection interfaces.
    It contains all the basic methods necessary to manage collection elements: `size()`,
    `add()`, `remove()`, `contains()`, `iterator()`, `stream()`, and others. Notice
    that the `Collection` interface extends the `Iterable` interface and inherits
    the `iterator()` method from it. This means that any implementation of the `Collection`
    interface can be used in iteration statements.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collection`接口 - 许多集合接口的基本接口。它包含管理集合元素所需的所有基本方法：`size()`、`add()`、`remove()`、`contains()`、`iterator()`、`stream()`等。请注意，`Collection`接口扩展了`Iterable`接口，并从中继承了`iterator()`方法。这意味着`Collection`接口的任何实现都可以在迭代语句中使用。'
- en: 'Interfaces that extend the `Collection` interface: `List`, `Set`, `Queue`,
    `Deque`, and many others.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展“Collection”接口的接口：“List”、“Set”、“Queue”、“Deque”等。
- en: 'Many classes that implement the forementioned interfaces: `ArrayList`, `LinkedList`,
    `HashSet`, `AbstractQueue`, `ArrayDeque`, and others.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现上述接口的许多类：“ArrayList”、“LinkedList”、“HashSet”、“AbstractQueue”、“ArrayDeque”等。
- en: 'The `Map` interface and the classes that implement it: `HashMap`, `TreeMap`, and
    others.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Map”接口及其实现它的类：“HashMap”、“TreeMap”等。
- en: The `Collections` class, which provides many static methods for manipulating
    and converting collections.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Collections”类提供了许多用于操作和转换集合的静态方法。
- en: Many other collection interfaces, classes, and the related utilities.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多其他集合接口、类和相关实用程序。
- en: We will talk more about collections and see examples of their usage in [Chapter
    13](3d6ae5fa-f48e-44e2-ae03-62dae2f78401.xhtml), *Java Collections*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在《第13章》《Java集合》中更多地讨论集合，并查看它们的使用示例。
- en: 'The `java.util` package also includes several other useful classes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “java.util”包还包括其他几个有用的类：
- en: The `Objects` class provides various objects-related utility methods, including
    null-safe `equals()` of two objects
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Objects”类提供了各种与对象相关的实用方法，包括两个对象的空安全“equals()”方法
- en: The `Arrays` class contains more than 200 static methods to manipulate arrays
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Arrays”类包含200多个静态方法来操作数组
- en: The `Formatter` class allows formatting of any primitive type, such as `String`,
    `Date`, and other types
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Formatter”类允许格式化任何原始类型，如“String”、“Date”和其他类型
- en: The classes `Optional`, `OptionalInt`, `OptionalLong`, and `OptionalDouble` ,
    which help avoid `NullPointerException` by wrapping the actual value, nullable
    or not
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类“Optional”、“OptionalInt”、“OptionalLong”和“OptionalDouble”通过包装实际值（可空或非空）来帮助避免“NullPointerException”
- en: The `Properties` class helps to read and create key-value pairs used for configuration
    and similar purposes
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Properties”类有助于读取和创建用于配置和类似目的的键值对
- en: The `Random` class complements the `Math.random()` method by generating streams
    of pseudorandom numbers
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Random”类通过生成伪随机数流来补充“Math.random()”方法
- en: The `Stack` class allows creating a **last-in-first-out** (**LIFO**) stack of
    objects
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Stack”类允许创建对象的**后进先出**（**LIFO**）堆栈
- en: The `StringTokeneizer` class breaks `String` objects into the tokens separated
    by the specified delimiter
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “StringTokeneizer”类将“String”对象分解为由指定分隔符分隔的标记
- en: The `StringJoiner` class constructs a sequence of characters separated by the
    specified delimiter and optionally surrounded by the specified prefix and suffix
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “StringJoiner”类构造由指定分隔符分隔并可选地由指定前缀和后缀包围的字符序列
- en: Many other useful utility classes, including internationalization support classes
    and base64 encoding and decoding
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多其他有用的实用程序类，包括国际化支持类和base64编码和解码
- en: java.time
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.time
- en: 'That is the main Java API for managing dates, times, instants, and durations.
    The package includes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是管理日期、时间、瞬间和持续时间的主要Java API。该包包括：
- en: enum `Month`
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举“Month”
- en: enum `DayOfWeek`
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举“DayOfWeek”
- en: The `Clock` class, which instantly returns the current date and time using a
    time zone
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Clock”类可以立即返回使用时区的当前日期和时间
- en: The `Duration` and `Period` classes represent and compare amounts of time in
    different time units
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Duration”和“Period”类表示和比较不同时间单位的时间量
- en: The `LocalDate`, `LocalTime`, `LocalDateTime` classes represent dates and times
    without time zones
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “LocalDate”、“LocalTime”、“LocalDateTime”类表示没有时区的日期和时间
- en: The `ZonedDateTime` class represents date-time with a time zone
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “ZonedDateTime”类表示带有时区的日期时间
- en: The `ZoneId` class identifies a time zone such as America/Chicago
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “ZoneId”类标识诸如America/Chicago之类的时区
- en: Some other classes that support date and time manipulation
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持日期和时间处理的其他一些类
- en: The `java.time.format.DateTimeFormatter` class allows you to present date and
    time in accordance with **International Standards Organization** (**ISO**) formats
    and is based on patterns such as YYYY-MM-DD and others.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “java.time.format.DateTimeFormatter”类允许您按照**国际标准化组织**（**ISO**）格式呈现日期和时间，并基于诸如YYYY-MM-DD等模式。
- en: We will talk more about date and time processing and see code examples in [Chapter
    15](42b614c0-4302-4b71-8a1d-fa74d2943a2a.xhtml), *Manage Objects, Strings, Time,
    and Random Numbers*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在《第15章》《管理对象、字符串、时间和随机数》中更多地讨论日期和时间处理，并查看代码示例。
- en: java.io and java.nio
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.io和java.nio
- en: 'The `java.io` and `java.nio` packages contain classes that support reading
    and writing data using streams, serialization, and the file system. The differences
    between these two packages are as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “java.io”和“java.nio”包含支持使用流、序列化和文件系统读写数据的类。这两个包之间的区别如下：
- en: '`java.io` allows us to read/write data as they go without caching'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “java.io”允许我们在读写数据时不进行缓存
- en: '`java.nio` creates a buffer and allows the program to move back and forth in
    the buffer'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “java.nio”创建一个缓冲区，并允许程序在缓冲区中来回移动
- en: The class methods of `java.io` block the stream until all the data is read or
    written
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “java.io”的类方法阻塞流，直到所有数据都被读取或写入
- en: '`java.nio` stands for a non-blocking style of the data reading and writing'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “java.nio”代表一种非阻塞式的数据读写方式
- en: java.sql and javax.sql
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.sql和javax.sql
- en: 'These two packages compose the **Java Database Connectivity** (**JDBC**) API,
    which allows accessing and processing data stored in a data source, typically
    a relational database. The package `javax.sql` complements the `java.sql` package
    by providing support for:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个包组成了**Java数据库连接**（**JDBC**）API，它允许访问和处理存储在数据源中的数据，通常是关系数据库。包“javax.sql”通过提供对以下内容的支持来补充包“java.sql”：
- en: '`DataSource` interface as an alternative to the `DriverManager`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “DataSource”接口作为“DriverManager”的替代方案
- en: Connection pooling and statement pooling
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接池和语句池
- en: Distributed transactions
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式事务
- en: Rowsets
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行集
- en: We will talk more about using these packages and see code examples in [Chapter
    16](d77f1f16-0aa6-4d13-b9a8-f2b6e195f0f1.xhtml), *Database Programming*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在《第16章》《数据库编程》中更多地讨论使用这些包，并查看代码示例。
- en: java.net
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.net
- en: 'The `java.net` package contains classes that support applications networking
    on two levels:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.net`包含支持两个级别的应用程序网络的类：'
- en: 'Low-level networking, based on:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于低级网络：
- en: IP addresses
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP地址
- en: Sockets, which are basic bidirectional data communication mechanisms
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 套接字，这是基本的双向数据通信机制
- en: Various network interfaces
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种网络接口
- en: 'High-level networking, based on:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于高级网络：
- en: '**Universal Resource Identifier** (**URI**)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一资源标识符**（**URI**）'
- en: '**Universal Resource Locator** (**URL**)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一资源定位符**（**URL**）'
- en: Connections to the resource pointed to by URLs
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与URL指向的资源的连接
- en: java.math
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.math
- en: This package complements Java primitive types and the wrapper classes of the `java.lang`
    package by allowing working with much bigger numbers using the classes `BigDecimal`
    and `BigInteger`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包通过允许使用`BigDecimal`和`BigInteger`类来处理更大的数字，来补充Java原始类型和`java.lang`包的包装类。
- en: java.awt,  javax.swing, and  javafx
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.awt、javax.swing和javafx
- en: The first Java library that supported building a **Graphical User Interface**
    (**GUI**) for desktop applications was **Abstract Window Toolkit** (**AWT**) in
    the `java.awt` package. It provided an interface to the native system of the executing
    platform that allowed the creation and management of windows, layouts, and events.
    It also had the basic GUI widgets (like text fields, buttons, and menus), provided
    an access to the system tray, and allowed users to launch a web browser and email
    client from the Java code. Its heavy dependence on the native code made AWT-based
    GUI look different on different platforms.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 支持为桌面应用程序构建**图形用户界面**（**GUI**）的第一个Java库是`java.awt`包中的**抽象窗口工具包**（**AWT**）。它提供了一个接口到执行平台的本地系统，允许创建和管理窗口、布局和事件。它还具有基本的GUI小部件（如文本字段、按钮和菜单），提供对系统托盘的访问，并允许用户从Java代码中启动Web浏览器和电子邮件客户端。它对本地代码的重度依赖使得基于AWT的GUI在不同平台上看起来不同。
- en: In 1997, Sun Microsystems and Netscape Communication Corporation introduced
    Java Foundation Classes, later called Swing and were put in the package `javax.swing`.
    The GUI components built with Swing could emulate the look and feel of some native
    platforms but also allowed users to plug in a look and feel that did not depend
    on the platform it was running on. It expanded the list of widgets the GUI could
    have by adding tabbed panels, scroll panes, tables, and lists. Swing components
    are called lightweight because they do not depend on the native code and are fully
    implemented in Java.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 1997年，Sun Microsystems和Netscape Communication Corporation推出了Java基础类，后来称为Swing，并放在`javax.swing`包中。使用Swing构建的GUI组件可以模拟一些本地平台的外观和感觉，但也允许用户插入不依赖于其运行的平台的外观和感觉。它通过添加选项卡面板、滚动窗格、表格和列表扩展了GUI可以拥有的小部件列表。Swing组件被称为轻量级，因为它们不依赖于本地代码，完全由Java实现。
- en: In 2007, Sun Microsystems announced JavaFX, which has eventually become a software
    platform for creating and delivering desktop applications across many different
    devices that is intended to replace Swing as the standard GUI library for Java
    SE. It is located in the packages that start with `javafx` and supports all major
    desktop OS and multiple mobile OS systems, including Symbian OS, Windows Mobile,
    and some proprietary real-time OS.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 2007年，Sun Microsystems宣布了JavaFX，它最终成为一个用于在许多不同设备上创建和交付桌面应用程序的软件平台，旨在取代Swing成为Java
    SE的标准GUI库。它位于以`javafx`开头的包中，支持所有主要的桌面操作系统和多个移动操作系统，包括塞班操作系统、Windows Mobile和一些专有的实时操作系统。
- en: JavaFX adds to the arsenal of a GUI developer the support of smooth animation,
    web views, audio and video playback, and styles based on **Cascading Style Sheets**
    (**CSS**). However, Swing has more components and third-party libraries, so using
    JavaFX may require creating custom components and plumbing that was implemented
    in Swing long time ago already. That's why, although JavaFX is recommended as
    the first choice for desktop GUI implementation, Swing will remain part of Java
    for the foreseeable future, according to the official response on the Oracle website
    ([http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6)).
    So, it is possible to continue using Swing, but, if possible, it's better to switch
    to JavaFX.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX为GUI开发人员增加了对平滑动画、Web视图、音频和视频播放以及基于**层叠样式表**（**CSS**）的样式的支持。然而，Swing具有更多的组件和第三方库，因此使用JavaFX可能需要创建自定义组件和在Swing中长时间前已实现的管道。这就是为什么，尽管JavaFX被推荐为桌面GUI实现的首选，但根据Oracle网站上的官方回应（[http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6)），Swing将在可预见的未来仍然是Java的一部分。因此，可以继续使用Swing，但如果可能的话，最好切换到JavaFX。
- en: Java external libraries
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java外部库
- en: Various statistics include different names in the list of the 20 or 100 most
    used third-party libraries. In this section, we are going to discuss those of
    them that are included in most of these lists. All of them are open source projects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 各种统计数据在20或100个最常用的第三方库的列表中包含不同的名称。在本节中，我们将讨论其中大多数都包含在这些列表中的库。所有这些都是开源项目。
- en: org.junit
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: org.junit
- en: 'JUnit is an open source testing framework that has the root package name `org.junit`.
    It was used throughout this book in several of our code examples. As you could
    see, it is very easy to set up and use (we have described the steps in [Chapter
    4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml), *Your First Java Project*):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit是一个开源的测试框架，其根包名称为`org.junit`。它在本书中的多个代码示例中都有使用。正如你所看到的，它非常容易设置和使用（我们在[第4章](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml)
    *你的第一个Java项目*中描述了步骤）。
- en: Add a dependency to the Maven configuration file `pom.xml`
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向Maven配置文件`pom.xml`添加依赖
- en: Create a test manually or right-click on the class name you would like to test,
    select Go To, then Test, then Create New Test, and then check the methods of the
    class you would like to test
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动创建一个测试，或右键单击您想要测试的类名，选择Go To，然后选择Test，然后选择Create New Test，然后检查您想要测试的类的方法
- en: Write code for the generated test methods with the annotation `@Test`
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为生成的测试方法编写带有注解`@Test`的代码
- en: Add methods with the annotations `@Before` and `@After` if necessary
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要添加带有注解`@Before`和`@After`的方法
- en: A "unit" is a minimal piece of code that can be tested, thus the name. The best
    testing practices consider a method as a minimal testable unit. That's why the
    unit tests are usually test methods.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “单元”是可以进行测试的最小代码片段，因此得名。最佳的测试实践将方法视为最小可测试单元。这就是为什么单元测试通常是测试方法。
- en: org.mockito
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: org.mockito
- en: One of the problems a unit test often faces is the need to test a method that
    uses a third-party library, a data source, or a method of another class. While
    testing, you want to control all the inputs so that you can predict the expected
    results of the tested code exactly.  That is where the technique of simulating
    or mocking the behavior of the objects the tested code interacts with comes in
    handy.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试经常面临的问题之一是需要测试使用第三方库、数据源或另一个类的方法。在测试时，您希望控制所有输入，以便可以准确预测所测试代码的预期结果。这就是模拟或模拟所测试代码与之交互的对象的行为技术派上用场的地方。
- en: 'The open source framework Mockito (root package name `org.mockito`) allows
    you to accomplish exactly that – the creation of mock objects. It is quite easy
    and straightforward to use. Here is one simple case:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 开源框架Mockito（根包名称为`org.mockito`）允许您正是这样做 - 创建模拟对象。它非常容易和直接。以下是一个简单的案例：
- en: Add a dependency to the Maven configuration file `pom.xml`
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Maven配置文件`pom.xml`中添加依赖项
- en: Call the `mock()` method for the class you need to simulate: `SomelClass mo
    = Mockito.mock(SomeClass.class)`
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`mock()`方法以模拟您需要模拟的类：`SomeClass mo = Mockito.mock(SomeClass.class)`
- en: Set the value you need to be returned from a method: `Mockito.when(mo.doSomething(10)).thenReturn(20)`
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您需要从方法返回的值：`Mockito.when(mo.doSomething(10)).thenReturn(20)`
- en: Now, pass the mocked object as a parameter into the method you are testing that
    calls the mocked method
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，将模拟对象作为参数传递到您正在测试的方法中，该方法调用了模拟的方法
- en: The mocked method returns the result you have predefined
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟的方法返回您预定义的结果
- en: Mockito has certain limitations. For example, you cannot mock static methods
    and private methods. Otherwise, it is a great way to isolate the code you are
    testing by reliably predicting the results of the used methods. The framework's
    name and logo are based on the word *mojitos* – a type of drink.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito有一些限制。例如，您不能模拟静态方法和私有方法。否则，这是一种可靠地预测所使用方法的结果来隔离您正在测试的代码的绝佳方式。该框架的名称和标志基于单词*mojitos*
    - 一种饮料。
- en: org.apache.log4j and org.slf4j
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: org.apache.log4j和org.slf4j
- en: Throughout this book, we have used the `System.out` object to display an output
    of the intermediate and final results. In the real-life application, one can do
    it too and redirect the output to a file, for example, for later analysis. After
    doing it for some time, you will notice that you need more details about each
    output – the date and time of each statement, or the class name where this statement
    was generated, for example. As the code base grows, you will find that it would
    be nice to send output from different subsystems or packages to different files,
    or turn off some messages when everything works as expected and turn them back
    on when an issue has been detected and more detailed information about code behavior
    is needed.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用`System.out`对象来显示中间和最终结果的输出。在实际应用程序中，也可以这样做，并将输出重定向到文件，例如，以供以后分析。做了一段时间后，您会注意到您需要更多关于每个输出的细节
    - 每个语句的日期和时间，或生成此语句的类名，例如。随着代码库的增长，您会发现希望将来自不同子系统或包的输出发送到不同的文件，或在一切正常工作时关闭一些消息，并在检测到问题并需要更详细的代码行为信息时重新打开它们。
- en: It is possible to write your own program that accomplishes all that, but there
    are several frameworks that do it based on the settings in a configuration file,
    which you can change every time you need to change the messages behavior. Such
    messages are called application logging messages, or application log, or log messages,
    and the two most popular frameworks used for that are called `log4j` (pronounced
    as *LOG-FOUR-JAY*) and `slf4j` (pronounced as *S-L-F-FOUR-JAY*).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可以编写自己的程序来完成所有这些，但是有几个框架可以根据配置文件中的设置来实现，您可以在需要更改消息行为时随时更改配置文件。这些消息称为应用程序日志消息，或应用程序日志，或日志消息，用于此目的最流行的两个框架称为`log4j`（发音为*LOG-FOUR-JAY*）和`slf4j`（发音为*S-L-F-FOUR-JAY*）。
- en: In fact, these two frameworks are not rivals. The `slf4j` is a facade that provides
    a unified access to an underlying actually logging framework – one of them can
    be `log4j` too. Such a facade is especially helpful during a library development
    when programmers do not know in advance what kind of logging framework will be
    used by the application that uses the library. By writing code using `slf4j`,
    programmers allow users to later configure it to use any logging system.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这两个框架并不是竞争对手。`slf4j`是一个外观，提供对底层实际日志框架的统一访问 - 其中之一也可以是`log4j`。在库开发期间，这样的外观特别有帮助，因为程序员事先不知道使用库的应用程序将使用什么样的日志框架。通过使用`slf4j`编写代码，程序员允许用户以后配置它以使用任何日志系统。
- en: So, if your code is going to be used only by the application that your team
    develops and is going to support in production, using just `log4j` is quite enough.
    Otherwise, consider using `slf4j`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您的代码只会被您的团队开发的应用程序使用，并且将在生产中得到支持，那么只使用`log4j`就足够了。否则，请考虑使用`slf4j`。
- en: And, as in the case of any third-party library, before you can use any of the
    logging frameworks, you have to add a corresponding dependency to the Maven configuration
    file `pom.xml`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，与任何第三方库一样，在您可以使用任何日志框架之前，您必须向Maven配置文件`pom.xml`添加相应的依赖项。
- en: org.apache.commons
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: org.apache.commons
- en: In the previous section, we talked about one package with the `org.apache` root
    name - the package `org.apache.log4j`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们谈到了一个带有`org.apache`根名称的包 - 包`org.apache.log4j`。
- en: 'The package `org.apache.commons` is another popular library, representing a
    project called Apache Commons that is maintained by open source community of programmers
    called Apache Software Foundation. This organization was formed from the Apache
    Group in 1999\. The Apache Group has grown around the development of Apache HTTP
    Server since 1993.  The Apache HTTP Server is an open source cross-platform web
    server that has remained the most popular since April 1996\. From a Wikipedia
    article:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.apache.commons`包是另一个流行的库，代表了一个名为Apache Commons的项目，由名为Apache Software Foundation的开源程序员社区维护。该组织于1999年从Apache
    Group成立。Apache Group自1993年以来一直围绕Apache HTTP服务器的开发而成长。Apache HTTP服务器是一个开源跨平台的网络服务器，自1996年4月以来一直保持最受欢迎的地位。来自维基百科的一篇文章：'
- en: '"As of July 2016, it was estimated to serve 46% of all active websites and
    43% of the top million websites. The name "Apache" was chosen from respect for
    the Native American Apache Nation, well known for their superior skills in warfare
    strategy and their inexhaustible endurance. It also makes a pun on "a patchy web
    server"—a server made from a series of patches—but this was not its origin"'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: “截至2016年7月，据估计，它为所有活跃网站的46%和前100万个网站的43%提供服务。名称“Apache”是出于对美洲印第安纳州阿帕奇族的尊重，他们以卓越的战争策略和不竭的耐力而闻名。它也对“一个补丁式的网络服务器”进行了双关语——一个由一系列补丁组成的服务器——但这并不是它的起源”
- en: 'The Apache Commons project has three parts:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Commons项目有三个部分：
- en: '**Commons Sandbox**: A workspace for Java component development; you can contribute
    to the open source working there'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Commons Sandbox**：Java组件开发的工作空间；您可以在那里为开源做出贡献'
- en: '**Commons Dormant**: A repository of components that are currently inactive; you
    can use the code there, but have to build the components yourselves since these
    components probably will not be released in the near future'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Commons Dormant**：一个存储当前不活跃组件的仓库；您可以使用那里的代码，但必须自己构建组件，因为这些组件可能在不久的将来不会发布'
- en: '**Commons Proper**: The reusable Java components, which compose the actual
    library `org.apache.commons`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Commons Proper**：可重用的Java组件，构成了实际的`org.apache.commons`库'
- en: 'In the following subsections, we will discuss only four of Commons Proper''s
    most popular packages:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的小节中，我们将只讨论Commons Proper最受欢迎的四个包：
- en: '`org.apache.commons.io`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.io`'
- en: '`org.apache.commons.lang`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang`'
- en: '`org.apache.commons.lang3`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3`'
- en: '`org.apache.commons.codec.binary`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.codec.binary`'
- en: There are, however, many more packages under `org.apache.commons` that contain
    thousands of useful classes that can easily be used and can help make your code
    elegant and efficient.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`org.apache.commons`下还有许多包，其中包含了成千上万个有用的类，可以轻松使用，并且可以帮助使您的代码更加优雅和高效。
- en: org.apache.commons.io
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: org.apache.commons.io
- en: 'All classes of the `org.apache.commons.io` package are contained in the root
    package and five subpackages:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.apache.commons.io`包的所有类都包含在根包和五个子包中：'
- en: 'The root package, `org.apache.commons.io`, contains utility classes with static
    methods to perform common tasks, like a popular `FileUtils` class, for example,
    that allows doing all possible operations with files one can ever need:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根包`org.apache.commons.io`包含了一些实用类，其中包含了执行常见任务的静态方法，比如一个叫做`FileUtils`的流行类，它允许执行所有可能需要的文件操作：
- en: Writing to a file
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入文件
- en: Reading from a file
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中读取
- en: Make a directory, including parent directories
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建目录，包括父目录
- en: Copying files and directories
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制文件和目录
- en: Deleting files and directories
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除文件和目录
- en: Converting to and from a URL
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换为URL和从URL转换
- en: Listing files and directories by filter and extension
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过过滤器和扩展名列出文件和目录
- en: Comparing file content
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较文件内容
- en: File last changed date
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件最后更改日期
- en: Calculating a checksum
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算校验和
- en: The `org.apache.commons.io.input` package contains classes that support data input
    based on `InputStream` and `Reader` implementations, such as `XmlStreamReader`
    or `ReversedLinesFileReader`
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.io.input`包包含支持基于`InputStream`和`Reader`实现的数据输入的类，例如`XmlStreamReader`或`ReversedLinesFileReader`'
- en: The `org.apache.commons.io.output` package contains classes that support data output
    based on `OutputStream` and `Writer` implementations, such as `XmlStreamWriter`
    or `StringBuilderWriter`
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.io.output`包包含支持基于`OutputStream`和`Writer`实现的数据输出的类，例如`XmlStreamWriter`或`StringBuilderWriter`'
- en: The `org.apache.commons.io.filefilter` package contains classes that serve as file
    filters, such as `DirectoryFileFilter` or `RegexFileFilter`
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.io.filefilter`包包含作为文件过滤器的类，例如`DirectoryFileFilter`或`RegexFileFilter`'
- en: The `org.apache.commons.io.comparato` package contains various implementations
    of `java.util.Comparator` for files, such as `NameFileComparator`
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.io.comparato`包包含`java.util.Comparator`的各种实现，例如`NameFileComparator`'
- en: The `org.apache.commons.io.monitor` package provides a component for monitoring
    file system events (directory and file create, update, and delete events), such
    as `FileAlterationMonitor`, which implements `Runnable` and spawns a monitoring
    thread triggering any registered `FileAlterationObserver` at a specified interval
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.io.monitor`包提供了一个用于监视文件系统事件（目录和文件创建、更新和删除事件）的组件，例如`FileAlterationMonitor`，它实现了`Runnable`并生成一个监视线程，在指定的间隔触发任何注册的`FileAlterationObserver`'
- en: org.apache.commons.lang and lang3
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: org.apache.commons.lang和lang3
- en: The package `org.apache.commons.lang3` is actually version 3 of the package
    `org.apache.commons.lang`. The decision to create a new package was forced by
    the fact that changes introduced in version 3 were backwardly incompatible. This
    means that existing applications that used the previous version of the `org.apache.commons.lang` package
    may stop working after the upgrade to version 3\. But, in the majority of mainstream
    programming, adding 3 to an import statement (as the way to migrate to the new
    version) will probably not break anything.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3`包实际上是`org.apache.commons.lang`包的第3个版本。创建新包的决定是由于第3版引入的更改是不向后兼容的。这意味着使用先前版本的`org.apache.commons.lang`包的现有应用程序在升级到第3版后可能会停止工作。但是，在大多数主流编程中，将3添加到导入语句（作为迁移到新版本的方式）可能不会破坏任何东西。'
- en: 'According to the documentation <q>"the package org.apache.commons.lang3 provides
    highly reusable static utility methods, chiefly concerned with adding value to
    the java.lang classes</q>.<q>"</q> Here are a few notable examples:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 根据文档 <q>"the package org.apache.commons.lang3 provides highly reusable static
    utility methods, chiefly concerned with adding value to the java.lang classes</q>.<q>"</q>
    这里有一些值得注意的例子：
- en: The `ArrayUtils` class allows searching and manipulating arrays.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArrayUtils`类允许搜索和操作数组。'
- en: The `ClassUtils` class provides some metadata about a class.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClassUtils`类提供有关类的一些元数据。'
- en: The `ObjectUtils` class checks for `null` in an array of objects, compares objects,
    and calculates median and min/max of an array of objects in a null-safe manner.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObjectUtils`类在数组对象中检查`null`，比较对象，并以空安全的方式计算数组对象的中位数和最小/最大值。'
- en: The `SystemUtils` class provides information about the execution environment.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SystemUtils`类提供有关执行环境的信息。'
- en: The `ThreadUtils` class finds information about currently running threads.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ThreadUtils`类查找有关当前运行线程的信息。'
- en: 'The `Validate` class validates individual values and collections: compares
    them, checks for `null`, matches, and performs many other validations.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Validate`类验证单个值和集合：比较它们，检查`null`，匹配，并执行许多其他验证。'
- en: The `RandomStringUtils` class generates `String` objects from the characters
    of various character sets.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RandomStringUtils`类从各种字符集的字符生成`String`对象。'
- en: 'The `StringUtils` class is the favorite of many programmers. Here is the list
    of null-safe operations it provides:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringUtils`类是许多程序员的最爱。以下是它提供的空安全操作列表：'
- en: '`isEmpty`/`isBlank`: This checks if a `String` value contains text'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isEmpty`/`isBlank`：检查`String`值是否包含文本'
- en: '`trim`/`strip`: This removes leading and trailing whitespace'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trim`/`strip`：删除前导和尾随空格'
- en: '`equals`/`compare`: This compares two strings null-safe'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals`/`compare`：空安全地比较两个字符串'
- en: '`startsWith`: This checks if a `String` value starts with a certain prefix
    null-safe'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startsWith`：空安全地检查`String`值是否以特定前缀开头'
- en: '`endsWith`: This checks if a `String` value ends with a certain suffix null-safe'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`endsWith`：空安全地检查`String`值是否以特定后缀结尾'
- en: '`indexOf`/`lastIndexOf`/`contains`: This provides null-safe index-of checks'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexOf`/`lastIndexOf`/`contains`：提供空安全的索引检查'
- en: '`indexOfAny`/`lastIndexOfAny`/`indexOfAnyBut`/`lastIndexOfAnyBut`: This provides
    index-of any of a set of `String` values'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indexOfAny`/`lastIndexOfAny`/`indexOfAnyBut`/`lastIndexOfAnyBut`：提供一组`String`值中任何一个的索引'
- en: '`containsOnly`/`containsNone`/`containsAny`: This checks if a `String` value
    contains only/none/any of certain characters'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`containsOnly`/`containsNone`/`containsAny`：检查`String`值是否仅包含/不包含/包含任何特定字符'
- en: '`substring`/`left`/`right`/`mid`: This supports null-safe substring extractions'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substring`/`left`/`right`/`mid`：支持空安全的子字符串提取'
- en: '`substringBefore`/`substringAfter`/`substringBetween`: This performs substring
    extraction relative to other strings'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substringBefore`/`substringAfter`/`substringBetween`：相对于其他字符串执行子字符串提取'
- en: '`split`/`join`: This splits a `String` value into an array of substrings by
    certain delimiter and vice versa'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`split`/`join`：将`String`值按特定分隔符拆分为子字符串数组，反之亦然'
- en: '`remove`/`delete`: This removes part of a `String` value'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`/`delete`：删除`String`值的一部分'
- en: '`replace`/`overlay`: This searches a `String` value and replaces one `String`
    value with another'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replace`/`overlay`：搜索`String`值并用另一个`String`值替换'
- en: '`chomp`/`chop`: This removes the last part of a `String` value'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chomp`/`chop`：删除`String`值的最后一部分'
- en: '`appendIfMissing`: This appends a suffix to the end of the `String` value if
    not present'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appendIfMissing`：如果不存在，则将后缀附加到`String`值的末尾'
- en: '`prependIfMissing`: This prepends a prefix to the start of the `String` value
    if not present'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prependIfMissing`：如果不存在，则将前缀添加到`String`值的开头'
- en: '`leftPad`/`rightPad`/`center`/`repeat`: This pads a `String` value'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leftPad`/`rightPad`/`center`/`repeat`：填充`String`值'
- en: '`upperCase`/`lowerCase`/`swapCase`/`capitalize`/`uncapitalize`: This changes
    the case of a `String` value'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upperCase`/`lowerCase`/`swapCase`/`capitalize`/`uncapitalize`：更改`String`值的大小写'
- en: '`countMatches`: This counts the number of occurrences of one `String` value
    in another'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`countMatches`：计算另一个`String`值在另一个中出现的次数'
- en: '`isAlpha`/`isNumeric`/`isWhitespace`/`isAsciiPrintable`: This checks the characters
    in a `String` value'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isAlpha`/`isNumeric`/`isWhitespace`/`isAsciiPrintable`：检查`String`值中的字符'
- en: '`defaultString`: This protects against a `null` input of `String` value'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaultString`：保护免受`null`输入的`String`值'
- en: '`rotate`: This rotates (circular shift) characters in a `String` value'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rotate`：旋转（循环移位）`String`值中的字符'
- en: '`reverse`/`reverseDelimited`: This reverses characters or delimited groups
    of characters in a `String` value'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse`/`reverseDelimited`：反转`String`值中的字符或分隔的字符组'
- en: '`abbreviate`: This abbreviates a `String` value using an ellipsis or another
    given `String` value'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abbreviate`：使用省略号或另一个给定的`String`值缩写`String`值'
- en: '`difference`: This compares `String` values and reports their differences'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`difference`：比较`String`值并报告它们的差异'
- en: '`levenshteinDistance`: The number of changes needed to change one `String`
    value to another'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`levenshteinDistance`：将一个`String`值更改为另一个所需的更改次数'
- en: org.apache.commons.codec.binary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: org.apache.commons.codec.binary
- en: The content of this library is outside the scope of this introductory course.
    So, we will just mention that this library provides support for Base64, Base32,
    Binary, and Hexadecimal String encoding and decoding.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此库的内容超出了本入门课程的范围。因此，我们只会提到该库提供对Base64、Base32、二进制和十六进制字符串编码和解码的支持。
- en: The encoding is necessary to make sure that the data you sent across different
    systems will not be changed on the way, due to the restrictions on the range of
    characters in different protocols. Besides, some systems interpret the sent data
    as control characters (a modem, for example).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 编码是必要的，以确保您在不同系统之间发送的数据不会因不同协议中字符范围的限制而在传输过程中发生更改。此外，一些系统将发送的数据解释为控制字符（例如调制解调器）。
- en: Exercise – Comparing String.indexOf() and StringUtils.indexOf()
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习-比较String.indexOf()和StringUtils.indexOf()
- en: What is the difference between the `indexOf()` method of the `String` class
    and the `indexOf()` method of the `StringUtils` class?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`类的`indexOf()`方法和`StringUtils`类的`indexOf()`方法有什么区别？'
- en: Answer
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'The `indexOf()` method of the `String` class does not handle `null`. Here is
    some demo code:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`类的`indexOf()`方法不处理`null`。这是一些演示代码：'
- en: '```java'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: String s = null;
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: String s = null;
- en: int i = StringUtils.indexOf(s, "abc");     //return -1
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: int i = StringUtils.indexOf(s, "abc");     //返回-1
- en: s.indexOf("abc");                          //throws NullPointerException
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: s.indexOf("abc");                          //抛出NullPointerException
- en: '```'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, the reader has learned about the content of Java standard libraries included
    in the JDK and some of the most popular external libraries or third-party libraries.
    In particular, we have looked closely into the standard packages `java.lang` and
    `java.util`; compared the packages `java.io` and `java.nio`, `java.sql` and `javax.sql`,
    `java.awt`, `javax.swing` and `javafx`; and reviewed the packages `java.net` and
    `java.math`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，读者已经了解了JDK中包含的Java标准库的内容，以及一些最受欢迎的外部库或第三方库。特别是，我们仔细研究了标准包`java.lang`和`java.util`；比较了包`java.io`和`java.nio`，`java.sql`和`javax.sql`，`java.awt`，`javax.swing`和`javafx`；并回顾了包`java.net`和`java.math`。
- en: 'We have also made an overview of such popular external libraries as `org.junit`, `org.mockito`, `org.apache.log4j`,
    `org.slf4j`, and several packages of the Apache Commons project: `org.apache.commons.io`, `org.apache.commons.lang`
    and `org.apache.commons.lang3`, and `org.apache.commons.codec.binary`.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还概述了一些流行的外部库，如`org.junit`，`org.mockito`，`org.apache.log4j`，`org.slf4j`，以及Apache
    Commons项目的几个包：`org.apache.commons.io`，`org.apache.commons.lang`和`org.apache.commons.lang3`，以及`org.apache.commons.codec.binary`。
- en: 'The next chapter will help the reader to become familiar with the most widely
    used Java classes in more detail. The code examples will illustrate the discussion
    of the functionality of the classes called collections: `List` and `ArrayList`, `Set`
    and `HashSet`, and `Map` and `HashMap`. We will also discuss the classes `Arrays`
    and `ArrayUtils`, `Objects` and `ObjectUtils`, `StringBuilder` and `StringBuffer`, `LocalDate`,
    `LocalTime`, and `LocalDateTime`.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将帮助读者更详细地了解最常用的Java类。代码示例将说明对集合类的功能进行讨论：`List`和`ArrayList`，`Set`和`HashSet`，以及`Map`和`HashMap`。我们还将讨论类`Arrays`和`ArrayUtils`，`Objects`和`ObjectUtils`，`StringBuilder`和`StringBuffer`，`LocalDate`，`LocalTime`和`LocalDateTime`。
