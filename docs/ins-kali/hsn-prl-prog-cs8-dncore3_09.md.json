["```cs\n class _1Eager\n {\n     //Declare a private variable to hold data\n     Data _cachedData;\n     public _1Eager()\n     {\n         //Load data as soon as object is created\n         _cachedData = GetDataFromDatabase();\n     }\n     public Data GetOrCreate()\n     {\n         return _cachedData;\n     }\n     //Create a dummy data object every time this method gets called\n     private Data GetDataFromDatabase()\n     {\n         //Dummy Delay\n         Thread.Sleep(5000);\n         return new Data();\n     }\n }\n\n```", "```cs\n class _2SimpleLazy\n {\n    //Declare a private variable to hold data\n     Data _cachedData;\n\n     public _2SimpleLazy()\n     {\n         //Removed initialization logic from constructor\n         Console.WriteLine(\"Constructor called\");\n     }\n\n     public Data GetOrCreate()\n     {\n         //Check is data is null else create and store for later use\n         if (_cachedData == null)\n         {\n             Console.WriteLine(\"Initializing object\");\n             _cachedData = GetDataFromDatabase();\n         }        \n         Console.WriteLine(\"Data returned from cache\");\n         //Returns cached data\n         return _cachedData;\n     }\n\n     private Data GetDataFromDatabase()\n     {\n         //Dummy Delay\n         Thread.Sleep(5000);\n         return new Data();\n     }\n }\n```", "```cs\npublic static void Main(){\n    _2SimpleLazy lazy = new _2SimpleLazy();\n     var data = lazy.GetOrCreate();\n     data = lazy.GetOrCreate();\n}\n```", "```cs\n class _2ThreadSafeSimpleLazy\n {\n     Data _cachedData;\n     static object _locker = new object();\n\n     public Data GetOrCreate()\n     {\n         //Try to Load cached data\n         var data = _cachedData;\n         //If data not created yet\n         if (data == null)\n         {\n             //Lock the shared resource\n             lock (_locker)\n             {\n                 //Second try to load data from cache as it might have been \n                 //populate by another thread while current thread was \n                 // waiting for lock\n                 data = _cachedData;\n                 //If Data not cached yet\n                 if (data == null)\n                 {\n                     //Load data from database and cache for later use\n                     data = GetDataFromDatabase();\n                     _cachedData = data;\n                 }\n             }\n         }\n         return _cachedData;\n     }\n\n     private Data GetDataFromDatabase()\n     {\n         //Dummy Delay\n         Thread.Sleep(5000);\n         return new Data();\n     }\n     public void ResetCache()\n     {\n         _cachedData = null;\n     }\n }\n\n```", "```cs\n class DataWrapper\n {\n     public DataWrapper()\n     {\n         CachedData = GetDataFromDatabase();\n         Console.WriteLine(\"Object initialized\");\n     }\n     public Data CachedData { get; set; }\n     private Data GetDataFromDatabase()\n     {\n         //Dummy Delay\n         Thread.Sleep(5000);\n         return new Data();\n     }\n }\n```", "```cs\n DataWrapper dataWrapper = new DataWrapper();\n\n```", "```cs\n Console.WriteLine(\"Creating Lazy object\");\n Lazy<DataWrapper> lazyDataWrapper = new Lazy<DataWrapper>();\n Console.WriteLine(\"Lazy Object Created\");\n Console.WriteLine(\"Now we want to access data\");\n var data = lazyDataWrapper.Value.CachedData;\n Console.WriteLine(\"Finishing up\");\n```", "```cs\n class _5LazyUsingDelegate\n {\n     public Data CachedData { get; set; }\n     static Data GetDataFromDatabase()\n     {\n         Console.WriteLine(\"Fetching data\");\n         //Dummy Delay\n         Thread.Sleep(5000);\n         return new Data();\n     }\n }\n```", "```cs\n Console.WriteLine(\"Creating Lazy object\");\n Func<Data> dataFetchLogic = new Func<Data>(()=> GetDataFromDatabase());\n Lazy<Data> lazyDataWrapper = new Lazy<Data>(dataFetchLogic);\n Console.WriteLine(\"Lazy Object Created\");\n Console.WriteLine(\"Now we want to access data\");\n var data = lazyDataWrapper.Value;\n Console.WriteLine(\"Finishing up\");\n```", "```cs\nFunc<Data> dataFetchLogic = new Func<Data>(() => GetDataFromDatabase());\nLazy<Data> lazyDataWrapper = new Lazy<Data>(dataFetchLogic);\n```", "```cs\n try\n {\n     data = lazyDataWrapper.Value;\n     Console.WriteLine(\"Data Fetched on Attempt 1\");\n }\n catch (Exception)\n {\n     Console.WriteLine(\"Exception 1\");\n }\n```", "```cs\n class _6_1_ExceptionsWithLazyWithCaching\n {\n     static int counter = 0;\n     public Data CachedData { get; set; }\n     static Data GetDataFromDatabase()\n     {\n         if ( counter == 0)\n         {\n             Console.WriteLine(\"Throwing exception\");\n             throw new Exception(\"Some Error has occurred\");\n         }\n         else\n         {\n             return new Data();\n         }\n     }\n\n     public static void Main()\n     {\n         Console.WriteLine(\"Creating Lazy object\");\n         Func<Data> dataFetchLogic = new Func<Data>(() => \n          GetDataFromDatabase());\n         Lazy<Data> lazyDataWrapper = new \n          Lazy<Data>(dataFetchLogic);\n         Console.WriteLine(\"Lazy Object Created\");\n         Console.WriteLine(\"Now we want to access data\");\n         Data data = null;\n         try\n         {\n             data = lazyDataWrapper.Value;\n             Console.WriteLine(\"Data Fetched on Attempt 1\");\n         }\n         catch (Exception)\n         {\n             Console.WriteLine(\"Exception 1\");\n         }\n         try\n         {\n             counter++;\n             data = lazyDataWrapper.Value;\n             Console.WriteLine(\"Data Fetched on Attempt 1\");\n         }\n         catch (Exception)\n         {\n             Console.WriteLine(\"Exception 2\");\n             // throw;\n         }\n         Console.WriteLine(\"Finishing up\");\n         Console.ReadLine();\n     }\n }\n```", "```cs\nLazy<Data> lazyDataWrapper = new Lazy<Data>(dataFetchLogic,System.Threading.LazyThreadSafetyMode.None);\n```", "```cs\nLazy<Data> lazyDataWrapper = new Lazy<Data>(dataFetchLogic,System.Threading.LazyThreadSafetyMode.PublicationOnly);\n\n```", "```cs\n [ThreadStatic]\n static int counter = 1;\n public static void Main()\n {\n     for (int i = 0; i < 10; i++)\n     {\n         Task.Factory.StartNew(() => Console.WriteLine(counter));\n     }\n     Console.ReadLine();\n }\n\n```", "```cs\n static ThreadLocal<int> counter = new ThreadLocal<int>(() => 1);\n public static void Main()\n {\n     for (int i = 0; i < 10; i++)\n     {\n         Task.Factory.StartNew(() => Console.WriteLine($\"Thread with \n          id {Task.CurrentId} has counter value as {counter.Value}\"));\n     }\n     Console.ReadLine();\n }\n```", "```cs\n static Data _data;\n public static void Main()\n {\n     for (int i = 0; i < 10; i++)\n     {\n         Console.WriteLine($\"Iteration {i}\");\n         // Lazily initialize _data\n         LazyInitializer.EnsureInitialized(ref _data, () =>\n         {\n             Console.WriteLine(\"Initializing data\");\n             // Returns value that will be assigned in the ref parameter.\n             return new Data();\n         });\n     }\n     Console.ReadLine();\n }\n```", "```cs\nstatic Data _data;\nstatic void Initializer()\n{\n     LazyInitializer.EnsureInitialized(ref _data, () =>\n     {\n         Console.WriteLine($\"Task with id {Task.CurrentId} is \n          Initializing data\");\n         // Returns value that will be assigned in the ref parameter.\n         return new Data();\n     });\n\n    public static void Main()\n     {\n         Parallel.For(0, 10, (i) => Initializer());\n         Console.ReadLine();\n     }\n}\n```", "```cs\n static Data _data;\n static bool _initialized;\n static object _locker = new object();\n static void Initializer()\n {\n     Console.WriteLine(\"Task with id {0}\", Task.CurrentId);\n     LazyInitializer.EnsureInitialized(ref _data,ref _initialized, \n      ref _locker, () =>\n     {\n         Console.WriteLine($\"Task with id {Task.CurrentId} is \n          Initializing data\");\n         // Returns value that will be assigned in the ref parameter.\n         return new Data();\n     });\n }\n public static void Main()\n {\n     Parallel.For(0, 10, (i) => Initializer());\n     Console.ReadLine();\n }\n```"]