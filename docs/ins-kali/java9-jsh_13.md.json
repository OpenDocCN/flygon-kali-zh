["```java\n// The following code doesn't follow best practices\n// Please, do not use this code as a baseline\n// We will refactor it to generate object-oriented code\npublic class Renderer {\n    public static void renderCube(int x, int y, int z, int edgeLength,\n        int cameraX, int cameraY, int cameraZ,\n        int cameraDirectionX, int cameraDirectionY, int cameraDirectionZ,\n        int cameraVectorX, int cameraVectorY, int cameraVectorZ,\n        int cameraPerspectiveFieldOfView,\n        int cameraNearClippingPlane,\n        int cameraFarClippingPlane,\n        int directionalLightX, int directionalLightY, int directionalLightZ,\n        String directionalLightColor) {\n            System.out.println(\n                String.format(\"Created camera at (x:%d, y:%d, z:%d)\",\n                    cameraX, cameraY, cameraZ));\n            System.out.println(\n                String.format(\"Set camera direction to (x:%d, y:%d, z:%d)\",\n                    cameraDirectionX, cameraDirectionY, cameraDirectionZ));\n            System.out.println(\n                String.format(\"Set camera vector to (x:%d, y:%d, z:%d)\",\n                    cameraVectorX, cameraVectorY, cameraVectorZ));\n            System.out.println(\n                String.format(\"Set camera perspective field of view to: %d\",\n                    cameraPerspectiveFieldOfView));\n            System.out.println(\n                String.format(\"Set camera near clipping plane to: %d\", \n                    cameraNearClippingPlane));\n            System.out.println(\n                String.format(\"Set camera far clipping plane to: %d\",\n                    cameraFarClippingPlane));\n            System.out.println(\n                String.format(\"Created directional light at (x:%d, y:%d, z:%d)\",\n                    directionalLightX, directionalLightY, directionalLightZ));\n            System.out.println(\n                String.format(\"Set light color to %s\",\n                    directionalLightColor));\n            System.out.println(\n                String.format(\"Drew cube at (x:%d, y:%d, z:%d) with edge length equal to %d\" +\n                    \"considering light at (x:%d, y:%d, z:%d) \" +\n                    \"and light's color equal to %s\", \n                    x, y, z, edgeLength,\n                    directionalLightX, directionalLightY, directionalLightZ,\n                    directionalLightColor));\n    }\n\n    public static void renderSphere(int x, int y, int z, int radius,\n        int cameraX, int cameraY, int cameraZ,\n        int cameraDirectionX, int cameraDirectionY, \n        int cameraDirectionZ,\n        int cameraVectorX, int cameraVectorY, int cameraVectorZ,\n        int cameraPerspectiveFieldOfView,\n        int cameraNearClippingPlane,\n        int cameraFarClippingPlane,\n        int directionalLightX, int directionalLightY, \n        int directionalLightZ,\n        String directionalLightColor) {\n            System.out.println(\n                String.format(\"Created camera at (x:%d, y:%d, z:%d)\",\n                    cameraX, cameraY, cameraZ));\n            System.out.println(\n                String.format(\"Set camera direction to (x:%d, y:%d, z:%d)\",\n                    cameraDirectionX, cameraDirectionY, cameraDirectionZ));\n            System.out.println(\n                String.format(\"Set camera vector to (x:%d, y:%d, z:%d)\",\n                    cameraVectorX, cameraVectorY, cameraVectorZ));\n            System.out.println(\n                String.format(\"Set camera perspective field of view to: %d\",\n                    cameraPerspectiveFieldOfView));\n            System.out.println(\n                String.format(\"Set camera near clipping plane to: %d\", \n                    cameraNearClippingPlane));\n            System.out.println(\n                String.format(\"Set camera far clipping plane to: %d\",\n                    cameraFarClippingPlane));\n            System.out.println(\n                String.format(\"Created directional light at (x:%d, y:%d, z:%d)\",\n                    directionalLightX, directionalLightY, directionalLightZ));\n            System.out.println(\n                String.format(\"Set light color to %s\",\n                    directionalLightColor));\n            // Render the sphere\n            System.out.println(\n                String.format(\"Drew sphere at (x:%d, y:%d z:%d) with radius equal to %d\",\n                    x, y, z, radius));\n            System.out.println(\n                String.format(\"considering light at (x:%d, y:%d, z:%d)\",\n                    directionalLightX, directionalLightY, directionalLightZ));\n            System.out.println(\n                String.format(\"and the light's color equal to %s\",\n                    directionalLightColor));\n    }\n}\n```", "```java\n\u251c\u2500\u2500\u2500com.renderer\n\u2502   \u2502   module-info.java\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502               Example01.java\n\u2502               Scene.java\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.cameras\n\u2502   \u2502   module-info.java\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500cameras\n\u2502                   Camera.java\n\u2502                   PerspectiveCamera.java\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.lights\n\u2502   \u2502   module-info.java\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500lights\n\u2502                   DirectionalLight.java\n\u2502                   Light.java\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.math\n\u2502   \u2502   module-info.java\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500math\n\u2502                   Vector3d.java\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.sceneelements\n\u2502   \u2502   module-info.java\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500sceneelements\n\u2502                   Rendereable.java\n\u2502                   SceneElement.java\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.shapes\n\u2502   \u2502   module-info.java\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500shapes\n\u2502                   Shape.java\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.shapes.curvededges\n\u2502   \u2502   module-info.java\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500shapes\n\u2502               \u2514\u2500\u2500\u2500curvededges\n\u2502                       Sphere.java\n\u2502\n\u2514\u2500\u2500\u2500com.renderer.shapes.polyhedrons\n \u2502   module-info.java\n    \u2502\n    \u2514\u2500\u2500\u2500com\n        \u2514\u2500\u2500\u2500renderer\n            \u2514\u2500\u2500\u2500shapes\n                \u2514\u2500\u2500\u2500polyhedrons\n Cube.java\n\n```", "```java\nmodule com.renderer.math {\n    exports com.renderer.math;\n}\n```", "```java\npackage com.renderer.math;\n\npublic class Vector3d {\n    public int x;\n    public int y;\n    public int z;\n\n    public Vector3d(int x, \n        int y, \n        int z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public Vector3d(int valueForXYZ) {\n        this(valueForXYZ, valueForXYZ, valueForXYZ);\n    }\n\n    public Vector3d() {\n        this(0);\n    }\n\n    public void absolute() {\n        x = Math.abs(x);\n        y = Math.abs(y);\n        z = Math.abs(z);\n    }\n\n    public void negate() {\n        x = -x;\n        y = -y;\n        z = -z;\n    }\n\n    public void add(Vector3d vector) {\n        x += vector.x;\n        y += vector.y;\n        z += vector.z;\n    }\n\n    public void sub(Vector3d vector) {\n        x -= vector.x;\n        y -= vector.y;\n        z -= vector.z;\n    }\n\n    public String toString() {\n        return String.format(\n            \"(x: %d, y: %d, z: %d)\",\n            x,\n            y,\n            z);\n    }\n}\n```", "```java\nmodule com.renderer.sceneelements {\n    requires com.renderer.math;\n    exports com.renderer.sceneelements;\n}\n```", "```java\npackage com.renderer.sceneelements;\n\nimport com.renderer.math.Vector3d;\n\npublic interface Rendereable {\n    Vector3d getLocation();\n    void setLocation(Vector3d newLocation);\n    void render();\n}\n```", "```java\npackage com.renderer.sceneelements;\n\nimport com.renderer.math.Vector3d;\n\npublic abstract class SceneElement implements Rendereable {\n    protected Vector3d location;\n\n    public SceneElement(Vector3d location) {\n        this.location = location;\n    }\n\n    public Vector3d getLocation() {\n        return location;\n    }\n\n    public void setLocation(Vector3d newLocation) {\n        location = newLocation;\n    }\n}\n```", "```java\nmodule com.renderer.lights {\n    requires com.renderer.math;\n    requires com.renderer.sceneelements;\n    exports com.renderer.lights;\n}\n```", "```java\npackage com.renderer.lights;\n\nimport com.renderer.sceneelements.SceneElement;\nimport com.renderer.math.Vector3d;\n\npublic abstract class Light extends SceneElement {\n    public Light(Vector3d location) {\n        super(location);\n    }\n\n    public abstract String getPropertiesDescription();\n}\n```", "```java\npackage com.renderer.lights;\n\nimport com.renderer.math.Vector3d;\n\npublic class DirectionalLight extends Light {\n    public final String color;\n\n    public DirectionalLight(Vector3d location, \n        String color) {\n        super(location);\n        this.color = color;\n    }\n\n    @Override\n    public void render() {\n        System.out.println(\n            String.format(\"Created directional light at %s\",\n                location));\n        System.out.println(\n            String.format(\"Set light color to %s\",\n                color));\n    }\n\n    @Override\n    public String getPropertiesDescription() {\n        return String.format(\n            \"light's color equal to %s\",\n            color);\n    }\n}\n```", "```java\nmodule com.renderer.cameras {\n    requires com.renderer.math;\n    requires com.renderer.sceneelements;\n    exports com.renderer.cameras;\n}\n```", "```java\npackage com.renderer.cameras;\n\nimport com.renderer.math.Vector3d;\nimport com.renderer.sceneelements.SceneElement;\n\npublic abstract class Camera extends SceneElement {\n    public Camera(Vector3d location) {\n        super(location);\n    }\n}\n```", "```java\npackage com.renderer.cameras;\n\nimport com.renderer.math.Vector3d;\n\npublic class PerspectiveCamera extends Camera {\n    protected Vector3d direction;\n    protected Vector3d vector;\n    protected int fieldOfView;\n    protected int nearClippingPlane;\n    protected int farClippingPlane;\n\n    public Vector3d getDirection() {\n        return direction;\n    }\n\n    public void setDirection(Vector3d newDirection) {\n        direction = newDirection;\n    }\n\n    public Vector3d getVector() {\n        return vector;\n    }\n\n    public void setVector(Vector3d newVector) {\n        vector = newVector;\n    }\n\n    public int getFieldOfView() {\n        return fieldOfView;\n    }\n\n    public void setFieldOfView(int newFieldOfView) {\n        fieldOfView = newFieldOfView;\n    }\n\n    public int nearClippingPlane() {\n        return nearClippingPlane;\n    }\n\n    public void setNearClippingPlane(int newNearClippingPlane) {\n        this.nearClippingPlane = newNearClippingPlane;\n    }\n\n    public int farClippingPlane() {\n        return farClippingPlane;\n    }\n\n    public void setFarClippingPlane(int newFarClippingPlane) {\n        this.farClippingPlane = newFarClippingPlane;\n    }\n\n    public PerspectiveCamera(Vector3d location, \n        Vector3d direction, \n        Vector3d vector, \n        int fieldOfView, \n        int nearClippingPlane, \n        int farClippingPlane) {\n        super(location);\n        this.direction = direction;\n        this.vector = vector;\n        this.fieldOfView = fieldOfView;\n        this.nearClippingPlane = nearClippingPlane;\n        this.farClippingPlane = farClippingPlane;\n    }\n\n    @Override\n    public void render() {\n        System.out.println(\n            String.format(\"Created camera at %s\",\n                location));\n        System.out.println(\n            String.format(\"Set camera direction to %s\",\n                direction));\n        System.out.println(\n            String.format(\"Set camera vector to %s\",\n                vector));\n        System.out.println(\n            String.format(\"Set camera perspective field of view to: %d\",\n                fieldOfView));\n        System.out.println(\n            String.format(\"Set camera near clipping plane to: %d\", \n                nearClippingPlane));\n        System.out.println(\n            String.format(\"Set camera far clipping plane to: %d\",\n                farClippingPlane));\n    }\n}\n```", "```java\nmodule com.renderer.shapes {\n    requires com.renderer.math;\n    requires com.renderer.sceneelements;\n    requires com.renderer.lights;\n    requires com.renderer.cameras;\n    exports com.renderer.shapes;\n}\n```", "```java\npackage com.renderer.shapes;\n\nimport com.renderer.math.Vector3d;\nimport com.renderer.sceneelements.SceneElement;\nimport com.renderer.lights.Light;\nimport com.renderer.cameras.Camera;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic abstract class Shape extends SceneElement {\n    protected Camera activeCamera;\n    protected List<Light> lights;\n\n    public Shape(Vector3d location) {\n        super(location);\n        lights = new ArrayList<>();\n    }\n\n    public void setActiveCamera(Camera activeCamera) {\n        this.activeCamera = activeCamera;\n    }\n\n    public void setLights(List<Light> lights) {\n        this.lights = lights;\n    }\n\n    protected boolean isValidForRender() {\n        return !((activeCamera == null) && lights.isEmpty());\n    }\n\n    protected String generateConsideringLights() {\n        return lights.stream()\n            .map(light -> String.format(\n                \"considering light at %s\\nand %s\",\n                    light.getLocation(), \n                    light.getPropertiesDescription()))\n            .collect(Collectors.joining());\n    }\n}\n```", "```java\nmodule com.renderer.shapes.curvededges {\n    requires com.renderer.math;\n    requires com.renderer.lights;\n    requires com.renderer.shapes;\n    exports com.renderer.shapes.curvededges;\n}\n```", "```java\npackage com.renderer.shapes.curvededges;\n\nimport com.renderer.math.Vector3d;\nimport com.renderer.shapes.Shape;\nimport com.renderer.lights.Light;\n\npublic class Sphere extends Shape {\n    protected int radius;\n\n    public Sphere(Vector3d location, int radius) {\n        super(location);\n        this.radius = radius;\n    }\n\n    public int getRadius() {\n        return radius;\n    }\n\n    public void setRadius(int newRadius) { \n        radius = newRadius;\n    }\n\n    @Override\n    public void render() {\n        if (!isValidForRender()) {\n            System.out.println(\n                \"Setup wasn't completed to render the sphere.\");\n            return;\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(String.format(\n            \"Drew sphere at %s with radius equal to %d\\n\",\n            location, \n            radius));\n        String consideringLights = \n            generateConsideringLights();\n        sb.append(consideringLights);\n        System.out.println(sb.toString());\n    }\n}\n```", "```java\nmodule com.renderer.shapes.polyhedrons {\n    requires com.renderer.math;\n    requires com.renderer.lights;\n    requires com.renderer.shapes;\n    exports com.renderer.shapes.polyhedrons;\n}\n```", "```java\npackage com.renderer.shapes.polyhedrons;\n\nimport com.renderer.math.Vector3d;\nimport com.renderer.shapes.Shape;\nimport com.renderer.lights.Light;\nimport java.util.stream.Collectors;\n\npublic class Cube extends Shape {\n    protected int edgeLength;\n\n    public Cube(Vector3d location, int edgeLength) {\n        super(location);\n        this.edgeLength = edgeLength;\n    }\n\n    public int getEdgeLength() {\n        return edgeLength;\n    }\n\n    public void setEdgeLength(int newEdgeLength) { \n        edgeLength = newEdgeLength;\n    }\n\n    @Override\n    public void render() {\n        if (!isValidForRender()) {\n            System.out.println(\n                \"Setup wasn't completed to render the cube.\");\n            return;\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(String.format(\n            \"Drew cube at %s with edge length equal to %d\\n\",\n            location,\n            edgeLength));\n        String consideringLights = \n            generateConsideringLights();\n        sb.append(consideringLights);\n        System.out.println(sb.toString());\n    }\n}\n```", "```java\nmodule com.renderer {\n    exports com.renderer;\n    requires com.renderer.math;\n    requires com.renderer.cameras;\n    requires com.renderer.lights;\n    requires com.renderer.shapes;\n    requires com.renderer.shapes.curvededges;\n    requires com.renderer.shapes.polyhedrons;\n}\n```", "```java\npackage com.renderer;\n\nimport com.renderer.math.Vector3d;\nimport com.renderer.cameras.Camera;\nimport com.renderer.lights.Light;\nimport com.renderer.shapes.Shape;\nimport java.util.*;\n\npublic class Scene {\n    protected List<Light> lights;\n    protected List<Shape> shapes;\n    protected Camera activeCamera;\n\n    public Scene(Camera activeCamera) {\n        this.activeCamera = activeCamera;\n        this.lights = new ArrayList<>();\n        this.shapes = new ArrayList<>();\n    }\n\n    public void addLight(Light light) {\n        this.lights.add(light);\n    }\n\n    public void addShape(Shape shape) {\n        this.shapes.add(shape);\n    }\n\n    public void render() {\n        activeCamera.render();\n        lights.forEach(Light::render);\n        shapes.forEach(shape -> {\n            shape.setActiveCamera(activeCamera);\n            shape.setLights(lights);\n            shape.render();\n        });\n    }\n}\n```", "```java\npackage com.renderer;\n\nimport com.renderer.math.Vector3d;\nimport com.renderer.cameras.PerspectiveCamera;\nimport com.renderer.lights.DirectionalLight;\nimport com.renderer.shapes.curvededges.Sphere;\nimport com.renderer.shapes.polyhedrons.Cube;\n\npublic class Example01 {\n    public static void main(String[] args){\n        PerspectiveCamera camera = new PerspectiveCamera(\n            new Vector3d(30),\n            new Vector3d(50, 0, 0),\n            new Vector3d(4, 5, 2),\n            90,\n            20,\n            40);\n        Sphere sphere = new Sphere(new Vector3d(20), 8);\n        Cube cube = new Cube(new Vector3d(10), 5);\n        DirectionalLight light = new DirectionalLight(\n            new Vector3d(2, 2, 5), \"Cornflower blue\");\n        Scene scene = new Scene(camera);\n        scene.addShape(sphere);\n        scene.addShape(cube);\n        scene.addLight(light);\n        scene.render();\n    }\n}\n```", "```java\njavac -d mods --module-source-path src src/com.renderer.math/module-info.java src/com.renderer.math/com/renderer/math/Vector3d.java src/com.renderer.sceneelements/module-info.java src/com.renderer.sceneelements/com/renderer/sceneelements/Rendereable.java src/com.renderer.sceneelements/com/renderer/sceneelements/SceneElement.java src/com.renderer.cameras/module-info.java src/com.renderer.cameras/com/renderer/cameras/Camera.java src/com.renderer.cameras/com/renderer/cameras/PerspectiveCamera.java src/com.renderer.lights/module-info.java src/com.renderer.lights/com/renderer/lights/DirectionalLight.java src/com.renderer.lights/com/renderer/lights/Light.java src/com.renderer.shapes/module-info.java src/com.renderer.shapes/com/renderer/shapes/Shape.java src/com.renderer.shapes.curvededges/module-info.java src/com.renderer.shapes.curvededges/com/renderer/shapes/curvededges/Sphere.java src/com.renderer.shapes.polyhedrons/module-info.java src/com.renderer.shapes.polyhedrons/com/renderer/shapes/polyhedrons/Cube.java src/com.renderer/module-info.java src/com.renderer/com/renderer/Example01.java src/com.renderer/com/renderer/Scene.java\n\n```", "```java\njavac -d mods --module-source-path src src\\com.renderer.math\\module-info.java src\\com.renderer.math\\com\\renderer\\math\\Vector3d.java src\\com.renderer.sceneelements\\module-info.java src\\com.renderer.sceneelements\\com\\renderer\\sceneelements\\Rendereable.java src\\com.renderer.sceneelements\\com\\renderer\\sceneelements\\SceneElement.java src\\com.renderer.cameras\\module-info.java src\\com.renderer.cameras\\com\\renderer\\cameras\\Camera.java src\\com.renderer.cameras\\com\\renderer\\cameras\\PerspectiveCamera.java src\\com.renderer.lights\\module-info.java src\\com.renderer.lights\\com\\renderer\\lights\\DirectionalLight.java src\\com.renderer.lights\\com\\renderer\\lights\\Light.java src\\com.renderer.shapes\\module-info.java src\\com.renderer.shapes\\com\\renderer\\shapes\\Shape.java src\\com.renderer.shapes.curvededges\\module-info.java src\\com.renderer.shapes.curvededges\\com\\renderer\\shapes\\curvededges\\Sphere.java src\\com.renderer.shapes.polyhedrons\\module-info.java src\\com.renderer.shapes.polyhedrons\\com\\renderer\\shapes\\polyhedrons\\Cube.java src\\com.renderer\\module-info.java src\\com.renderer\\com\\renderer\\Example01.java src\\com.renderer\\com\\renderer\\Scene.java\n\n```", "```java\n\u251c\u2500\u2500\u2500com.renderer\n\u2502   \u2502   module-info.class\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502               Example01.class\n\u2502               Scene.class\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.cameras\n\u2502   \u2502   module-info.class\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500cameras\n\u2502                   Camera.class\n\u2502                   PerspectiveCamera.class\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.lights\n\u2502   \u2502   module-info.class\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500lights\n\u2502                   DirectionalLight.class\n\u2502                   Light.class\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.math\n\u2502   \u2502   module-info.class\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500math\n\u2502                   Vector3d.class\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.sceneelements\n\u2502   \u2502   module-info.class\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500sceneelements\n\u2502                   Rendereable.class\n\u2502                   SceneElement.class\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.shapes\n\u2502   \u2502   module-info.class\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500shapes\n\u2502                   Shape.class\n\u2502\n\u251c\u2500\u2500\u2500com.renderer.shapes.curvededges\n\u2502   \u2502   module-info.class\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500com\n\u2502       \u2514\u2500\u2500\u2500renderer\n\u2502           \u2514\u2500\u2500\u2500shapes\n\u2502               \u2514\u2500\u2500\u2500curvededges\n\u2502                       Sphere.class\n\u2502\n\u2514\u2500\u2500\u2500com.renderer.shapes.polyhedrons\n \u2502   module-info.class\n    \u2502\n    \u2514\u2500\u2500\u2500com\n        \u2514\u2500\u2500\u2500renderer\n            \u2514\u2500\u2500\u2500shapes\n                \u2514\u2500\u2500\u2500polyhedrons\n Cube.class\n\n```", "```java\njava --module-path mods -m com.renderer/com.renderer.Example01\n\n```", "```java\nCreated camera at (x: 30, y: 30, z: 30)\nSet camera direction to (x: 50, y: 0, z: 0)\nSet camera vector to (x: 4, y: 5, z: 2)\nSet camera perspective field of view to: 90\nSet camera near clipping plane to: 20\nSet camera far clipping plane to: 40\nCreated directional light at (x: 2, y: 2, z: 5)\nSet light color to Cornflower blue\nDrew sphere at (x: 20, y: 20, z: 20) with radius equal to 8\nconsidering light at (x: 2, y: 2, z: 5)\nand light's color equal to Cornflower blue\nDrew cube at (x: 10, y: 10, z: 10) with edge length equal to 5\nconsidering light at (x: 2, y: 2, z: 5)\nand light's color equal to Cornflower blue\n\n```"]