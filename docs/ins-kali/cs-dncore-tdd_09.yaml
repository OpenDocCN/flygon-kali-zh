- en: Testing and Packaging the Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和打包应用程序
- en: In [Chapter 8](a63afc21-65f0-4d5d-9329-e4e69da1ed64.xhtml), *Creating Continuous
    Integration Build Processes*, we walked through the installation and setup of
    the Cake automation building tool. Also, we extensively demonstrated the process
    of writing build scripts using Cake with its rich, C# domain-specific languages.
    We also covered installing Cake Extension for Visual Studio and running Cake scripts
    using the *Task Explorer* window.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](a63afc21-65f0-4d5d-9329-e4e69da1ed64.xhtml)中，*创建持续集成构建流程*，我们介绍了Cake自动化构建工具的安装和设置过程。此外，我们广泛演示了使用Cake编写构建脚本的过程，以及其丰富的C#领域特定语言。我们还介绍了在Visual
    Studio中安装Cake扩展，并使用*任务资源管理器*窗口运行Cake脚本。
- en: The benefits of CI process brings to software development cannot be overemphasized;
    it facilitates the easy fixing of bugs in project's code base through early and
    quick detection. Using CI, running and reporting test coverage of unit tests projects
    can be automated alongside the project build and deployment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CI流程为软件开发带来的好处不言而喻；它通过早期和快速检测，促进了项目代码库中错误的轻松修复。使用CI，可以自动化运行和报告单元测试项目的测试覆盖率，以及项目构建和部署。
- en: In order to utilize the features of the CI process effectively, the unit test
    projects in a code base should run and test coverage reports that should be generated
    by the CI tool. In this chapter, we will modify the Cake build script to run our
    suite of xUnit.net tests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地利用CI流程的功能，代码库中的单元测试项目应该运行，并且应该由CI工具生成测试覆盖报告。在本章中，我们将修改Cake构建脚本，以运行我们的一系列xUnit.net测试。
- en: Later in this chapter, we will explore .NET Core versioning and how it can affect
    application development. We will finish up the chapter by packaging the `LoanApplication`
    project for distribution on the various platforms .NET Core supports. Later, we
    will explore how to package the .NET Core application for sharing on NuGet.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面，我们将探讨.NET Core版本控制以及它对应用程序开发的影响。最后，我们将为在.NET Core支持的各种平台上分发的`LoanApplication`项目进行打包。之后，我们将探讨如何将.NET
    Core应用程序打包以在NuGet上共享。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Executing xUnit.net tests with Cake
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cake执行xUnit.net测试
- en: .NET Core versioning
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core版本控制
- en: .NET Core packages and metapackages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core包和元包
- en: Packaging for NuGet distribution
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于NuGet分发的打包
- en: Executing xUnit.net tests with Cake
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cake执行xUnit.net测试
- en: In [Chapter 8](a63afc21-65f0-4d5d-9329-e4e69da1ed64.xhtml), *Creating Continuous
    Integration Build Processes*, in the *LoanApplication build script* section, we
    walked through the process of creating and running build steps using the Cake
    automation build script. Running unit tests and getting the test results and coverage
    from Visual Studio IDE, Visual Studio Code, or any other suitable IDE for building
    .NET and .NET Core applications is easier with the assistance of the xUnit console
    runner and xUnit adapter. However, for the CI process and the build process to
    be complete and effective, unit test projects should be compiled and executed
    as part of the build steps.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](a63afc21-65f0-4d5d-9329-e4e69da1ed64.xhtml)中，*创建持续集成构建流程*，在*LoanApplication构建脚本*部分，我们介绍了使用Cake自动化构建脚本创建和运行构建步骤的过程。使用xUnit控制台运行程序和xUnit适配器，可以更轻松地从Visual
    Studio IDE、Visual Studio Code或任何其他适合构建.NET和.NET Core应用程序的IDE中获取单元测试的测试结果和覆盖率。然而，为了使CI流程和构建流程完整和有效，单元测试项目应该作为构建步骤的一部分进行编译和执行。
- en: Executing xUnit.net tests in .NET projects
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在.NET项目中执行xUnit.net测试
- en: Cake has a rich support for running xUnit.net tests. Cake has two aliases for
    running the different versions of xUnit.net tests—xUnit for running earlier versions
    of xUnit.net and xUnit2 for Version 2 of xUnit.net. To use commands for the alias,
    the **ToolPath** to xUnit.net must be specified within the `XUnit2Settings` class
    or include the tool directive in the `build.cake` file, to instruct Cake to get
    the binaries required to run xUnit.net tests from NuGet.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Cake对运行xUnit.net测试有很好的支持。Cake有两个别名，用于运行不同版本的xUnit.net测试——xUnit用于运行早期版本的xUnit.net，xUnit2用于xUnit.net的版本2。要使用别名的命令，必须在`XUnit2Settings`类中指定到xUnit.net的**ToolPath**，或者在`build.cake`文件中包含工具指令，以指示Cake从NuGet获取运行xUnit.net测试所需的二进制文件。
- en: 'Here is the syntax for including the tool directive for xUnit.net:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包含xUnit.net工具指令的语法：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Cake''s `XUnit2Alias` is overloaded with different forms for running the xUnit.net
    version tests in the specified assemblies. The alias resides in Cake''s `Cake.Common.Tools.XUnit`
    namespace. The first form is `XUnit2(ICakeContext, IEnumerable<FilePath>)`, which
    is used to run all xUnit.net tests in the specified assemblies in the `IEnumerable`
    parameter. The following script shows how to get the test assemblies to be executed
    into the `IEnumerable` object using the `GetFiles` method and passing it to the
    `XUnit2` method:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Cake的`XUnit2Alias`有不同形式的重载，用于运行指定程序集中的xUnit.net版本测试。该别名位于Cake的`Cake.Common.Tools.XUnit`命名空间中。第一种形式是`XUnit2(ICakeContext,
    IEnumerable<FilePath>)`，用于在`IEnumerable`参数中运行指定程序集中的所有xUnit.net测试。以下脚本显示了如何使用`GetFiles`方法将要执行的测试程序集获取到`IEnumerable`对象，并将其传递给`XUnit2`方法：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `XUnit2(ICakeContext, IEnumerable<FilePath>, XUnit2Settings)` alias is
    similar to the first form, with the addition of the `XUnit2Settings` class for
    specifying options of how Cake should execute the xUnit.net tests. The following
    snippet describes the usage:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`XUnit2(ICakeContext, IEnumerable<FilePath>, XUnit2Settings)`别名类似于第一种形式，还增加了`XUnit2Settings`类，用于指定Cake应该如何执行xUnit.net测试的选项。以下代码片段描述了用法：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, the `XUnit2` alias allows the passing of the `IEnumerable` of
    string, which is expected to contain the paths to the assemblies of the xUnit.net
    Version 2 test projects to be executed. The form is `XUnit2(ICakeContext, IEnumerable<string>)`
    and the following snippet describes the usage:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，`XUnit2`别名允许传递字符串的`IEnumerable`，该字符串应包含要执行的xUnit.net版本2测试项目的程序集路径。形式为`XUnit2(ICakeContext,
    IEnumerable<string>)`，以下代码片段描述了用法：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Executing xUnit.net tests in .NET Core projects
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在.NET Core项目中执行xUnit.net测试
- en: In order to complete a build process successfully, it is important to run test
    projects in a solution to verify that the code works correctly. Running xUnit.net
    tests in a .NET Core project is relatively easy, by using the dotnet test command
    through the `DotNetCoreTest` alias. To have access to some other features of the
    **dotnet-xunit** tool, it is preferred to run the test using `DotNetCoreTool`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功完成构建过程，重要的是在解决方案中运行测试项目，以验证代码是否正常工作。通过使用`DotNetCoreTest`别名，相对容易地在.NET Core项目中运行xUnit.net测试，使用`dotnet
    test`命令。为了访问**dotnet-xunit**工具的其他功能，最好使用`DotNetCoreTool`运行测试。
- en: Unit tests in .NET Core projects are executed by running the `dotnet test` command.
    This command supports all the major unit test frameworks available for writing
    .NET Core tests, provided that the framework has a test adapter that the `dotnet
    test` command can integrate to expose available unit test features.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core项目中，通过运行`dotnet test`命令来执行单元测试。该命令支持编写.NET Core测试的所有主要单元测试框架，前提是该框架具有测试适配器，`dotnet
    test`命令可以集成以公开可用的单元测试功能。
- en: 'Using the dotnet-xunit framework tool to run .NET Core tests provides access
    to features and settings in xUnit.net and is the preferred way of executing .NET
    Core tests. To get started, the dotnet-xunit tool should be installed into a .NET
    Core test project by editing the `.csproj` file and including the `DotNetCliToolReference`
    entry in the `ItemGroup` section. The `xunit.runner.visualstudio` and `Microsoft.NET.Test.Sdk`
    packages should be added so as to be able to execute the tests using the `dotnet
    test` or `dotnet xunit` commands:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用dotnet-xunit框架工具运行.NET Core测试可以访问xUnit.net中的功能和设置，并且是执行.NET Core测试的首选方式。要开始，应该通过编辑`.csproj`文件并在`ItemGroup`部分包含`DotNetCliToolReference`条目，将dotnet-xunit工具安装到.NET
    Core测试项目中。还应该添加`xunit.runner.visualstudio`和`Microsoft.NET.Test.Sdk`包，以便能够使用`dotnet
    test`或`dotnet xunit`命令执行测试：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Additionally, there are other arguments which can be used to customize the behavior
    of xUnit.net framework during .NET Core unit tests execution when the `dotnet
    xunit` command is used. These  arguments and their usages can be displayed by
    running `dotnet xunit --help` command on the terminal.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有其他参数可用于在使用`dotnet xunit`命令执行.NET Core单元测试时自定义xUnit.net框架的行为。可以通过在终端上运行`dotnet
    xunit --help`命令来显示这些参数及其用法。
- en: Cake has aliases that can be used to invoke the dotnet SDK commands to execute
    xUnit.net tests. The `DotNetCoreRestore` alias restores NuGet packages used in
    a solution using the `dotnet restore` command. Also, `DotNetCoreBuild` alias is
    responsible for building a .NET Core solution by using the `dotnet build` command.
    Unit tests in test project are executed using the `DotNetCoreTest` alias which
    uses the `dotnet test` command. See the following Cake snippet for the usage of
    the aliases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Cake具有别名，可用于调用dotnet SDK命令来执行xUnit.net测试。`DotNetCoreRestore`别名使用`dotnet restore`命令还原解决方案中使用的NuGet包。此外，`DotNetCoreBuild`别名负责使用`dotnet
    build`命令构建.NET Core解决方案。使用`DotNetCoreTest`别名执行测试项目中的单元测试，该别名使用`dotnet test`命令。请参见以下Cake片段，了解别名的用法。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, the `DotNetCoreTool` alias can be used to execute xUnit.net
    tests for .NET Core projects. `DotNetCoreTool` is a general purpose alias in Cake
    that can be used to execute any dotnet tool. This is done by supplying the tool
    name and the required arguments, if any. `DotNetCoreTool` exposes the additional
    features available in the `dotnet xunit` command, which gives the flexibility
    of effectively tweaking the way the unit tests are executed. When the `DotNetCoreTool`
    alias is used, command-line arguments are to be passed manually into the alias.
    See the usage of the alias in the following snippet:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，可以使用`DotNetCoreTool`别名来执行.NET Core项目的xUnit.net测试。`DotNetCoreTool`是Cake中的通用别名，可用于执行任何dotnet工具。这是通过提供工具名称和必要的参数（如果有）来完成的。`DotNetCoreTool`公开了`dotnet
    xunit`命令中可用的其他功能，从而灵活地调整单元测试的执行方式。使用`DotNetCoreTool`别名时，需要手动将命令行参数传递给别名。请参见以下片段中别名的用法：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: .NET Core versioning
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core版本
- en: Versioning the .NET Core SDK and runtime makes the platform easy to understand
    and allows better agility. The .NET Core platform essentially is distributed as
    a unit that consists of the different distributions of the frameworks, tools,
    installer, and NuGet packages. Also, versioning the .NET Core platform gives great
    flexibility as regards side-by-side application development on different platforms
    of .NET Core.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对.NET Core SDK和运行时进行版本控制使得平台易于理解，并且具有更好的灵活性。.NET Core平台本质上是作为一个单元分发的，其中包括不同发行版的框架、工具、安装程序和NuGet包。此外，对.NET
    Core平台进行版本控制可以在不同的.NET Core平台上实现并行应用程序开发，具有很大的灵活性。
- en: Beginning from .NET Core 2.0, a top-level version number that is easy to comprehend
    was used to version .NET Core. Some components of .NET Core version together while
    some do not. However, starting from Version 2.0, there is a consistent versioning
    strategy adopted for .NET Core distributions and components, these include the
    web pages, installers, and NuGet packages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从.NET Core 2.0开始，使用了易于理解的顶级版本号来对.NET Core进行版本控制。一些.NET Core版本组件一起进行版本控制，而另一些则不是。然而，从2.0版本开始，对.NET
    Core发行版和组件采用了一致的版本控制策略，其中包括网页、安装程序和NuGet包。
- en: The versioning model used in .NET Core is based on the framework's runtime component
    `[major].[minor]` version numbers. Similar to the runtime versioning, the SDK
    version uses `[major].[minor]` version numbers with an additional independent
    `[patch]` that combines features and patch semantics for the SDK.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core使用的版本模型基于框架的运行时组件`[major].[minor]`版本号。与运行时版本号类似，SDK版本使用带有额外独立`[patch]`的`[major].[minor]`版本号，该版本号结合了SDK的功能和补丁语义。
- en: Versioning principle
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本原则
- en: 'As of Version 2.0 of .NET Core, the following principles were adopted:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 截至.NET Core 2.0版本，采用了以下原则：
- en: Version all .NET Core distributions as *x.0.0*, for example 2.0.0 for the first
    release and then move forward together
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有.NET Core发行版版本化为*x.0.0*，例如第一个版本为2.0.0，然后一起向前发展
- en: File and package names should clearly represent the component or collection
    and its version, leaving version divergence reconciliation to minor and major
    version boundaries
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件和软件包名称应清楚地表示组件或集合及其版本，将版本分歧调和留给次要和主要版本边界
- en: Clear communication should exist between the high-order versions and installers
    that chain multiple components
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高阶版本和链接多个组件的安装程序之间应存在清晰的沟通。
- en: Also, beginning from .NET Core 2.0, the version numbers were unified for the
    shared framework and associated runtime, the .NET Core SDK and the associated
    .NET Core CLI and `Microsoft.NETCore.App` metapackage. Using single version numbers
    makes it easier to identify the version of the SDK to install on the development
    machine and what version the shared framework should be when moving application
    production environments.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从.NET Core 2.0开始，共享框架和相关运行时、.NET Core SDK和相关.NET Core CLI以及`Microsoft.NETCore.App`元包的版本号被统一了。使用单个版本号可以更容易地确定在开发机器上安装的SDK版本以及在将应用程序移动到生产环境时应该使用的共享框架版本。
- en: Installer
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装程序
- en: 'Downloads for the daily builds and releases conforms to the new naming scheme.
    The installer UI available in the downloads was also modified to display both
    the names and versions of the components being installed as from .NET Core 2.0\.
    The naming scheme format is here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每日构建和发布的下载符合新的命名方案。从.NET Core 2.0开始，下载中提供的安装程序UI也已修改，以显示正在安装的组件的名称和版本。命名方案格式如下：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Also, the format shows in detail what is being downloaded, the version it is,
    on what OS it can be used, and whether it is readable. See the examples of the
    format as shown below:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，格式详细显示了正在下载的内容，其版本，可以在哪种操作系统上使用，以及它是否可读。请参见下面显示的格式示例：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Descriptions of the website and UI strings contained in the installers are maintained
    and kept simple, accurate, and consistent. Sometimes an SDK release can contain
    more than one version of the runtime. In that case, the installer UX shows only
    the SDK version and installed runtime on the summary page when the installation
    process completes. This is applicable to the installers for both Windows and macOS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序中包含的网站和UI字符串的描述保持简单、准确和一致。有时，SDK版本可能包含多个运行时版本。在这种情况下，当安装过程完成时，安装程序UX仅在摘要页面上显示SDK版本和已安装的运行时版本。这适用于Windows和macOS的安装程序。
- en: Also, .NET Core Tools might be required to be updated, without  necessarily
    updating the runtime. In which case, the SDK version is incremented, for example,
    to 2.1.2\. The Runtime version will be incremented when next there is an update,
    while for example, both the Runtime and SDK, when updated the next time, will
    be shipped as 2.1.3.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可能需要更新.NET Core工具，而不一定需要更新运行时。在这种情况下，SDK版本会增加，例如到2.1.2。下次更新时，运行时版本将增加，例如，下次更新时，运行时和SDK都将作为2.1.3进行发布。
- en: Package manager
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件包管理器
- en: The flexibility of the .NET Core platform allows the distribution not to be
    done solely by Microsoft; the platform can be distributed by other entities. The
    platform's flexibility makes it easy to distribute installers and packages for
    Linux distribution owners. As well making it seamless for package maintainers
    to add .NET Core packages to their package managers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core平台的灵活性使得分发不仅仅由微软完成；其他实体也可以分发该平台。该平台的灵活性使得为Linux发行版所有者分发安装程序和软件包变得容易。同时，也使得软件包维护者可以轻松地将.NET
    Core软件包添加到其软件包管理器中。
- en: The minimum package set details include `dotnet-runtime-[major].[minor]` which
    is the .NET runtime with the specific major+minor version combination indicated
    and available in the package manager for this package. The `dotnet-sdk` includes
    forward major, minor, patch versions as well as update rolls. Also included in
    the package set is the `dotnet-sdk-[major].[minor]` which is the SDK with the
    highest specified version of the shared frameworks and the latest host which is `dotnet-host`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最小软件包集的详细信息包括`dotnet-runtime-[major].[minor]`，这是具有特定major+minor版本组合的.NET运行时，并且在软件包管理器中可用。`dotnet-sdk`包括前向major、minor、patch版本以及更新卷。软件包集中还包括`dotnet-sdk-[major].[minor]`，这是具有最高指定版本的共享框架和最新主机的SDK，即`dotnet-host`。
- en: Docker
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker
- en: 'Similar to the installer and package manager, the docker tag takes the naming
    convention in which the version number is placed before the component name. The
    available docker tags include the runtime versions listed here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与安装程序和软件包管理器类似，docker标签采用命名约定，其中版本号放在组件名称之前。可用的docker标签包括以下运行时版本：
- en: '`1.0.8-runtime`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1.0.8-runtime`'
- en: '`1.0.8-sdk`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1.0.8-sdk`'
- en: '`2.0.4-runtime`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2.0.4-runtime`'
- en: '`2.0.4-sdk`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2.0.4-sdk`'
- en: '`2.1.1-runtime`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2.1.1-runtime`'
- en: '`2.1.1-sdk`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2.1.1-sdk`'
- en: The SDK version is increased when the .NET Core CLI tools that are included
    in the SDK are fixed and reshipped with an existing Runtime, for example, when
    the version is increased from Version 2.1.1 to version 2.1.2\. Also, it is important
    to note that the SDK tags are updated to represent the SDK version and not the
    Runtime. Based on this, the Runtime will catch up with the SDK version numbering
    the next time it ships, for example, both the SDK and Runtime will take Version
    number 2.1.3 in the next release.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当包含在SDK中的.NET Core CLI工具被修复并重新发布时，SDK版本会增加，例如，当版本从2.1.1增加到版本2.1.2。此外，重要的是要注意，SDK标签已更新以表示SDK版本而不是运行时。基于此，运行时将在下次发布时赶上SDK版本编号，例如，下次发布时，SDK和运行时将都采用版本号2.1.3。
- en: Semantic Versioning
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义版本控制
- en: 'Semantic Versioning is used in .NET Core to provide descriptions of the type
    and and degree of change that occur in a version of .NET Core. **Semantic Versioning**
    (**SemVer**) uses the `MAJOR.MINOR.PATCH` versioning pattern:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core使用语义版本控制来描述.NET Core版本中发生的更改的类型和程度。**语义版本控制**（**SemVer**）使用`MAJOR.MINOR.PATCH`版本模式：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `PRERELEASE` and `BUILDNUMBER` parts of SemVer are optional and not part
    of supported releases. They are used specifically for nightly builds, local builds
    from source targets, and unsupported preview releases.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: SemVer的`PRERELEASE`和`BUILDNUMBER`部分是可选的，不是受支持的版本的一部分。它们专门用于夜间构建、从源目标进行本地构建和不受支持的预览版本。
- en: The `MAJOR` part of the versioning is incremented when an old version is not
    being supported anymore, there is an adoption of a newer `MAJOR` version of an
    existing dependency, or the setting of a compatibility quirk is toggled off. `MINOR`
    is incremented whenever there is a newer `MINOR` version of an existing dependency
    or there is a new dependency, a Public API surface area, or a new behavior is
    added. `PATCH` is incremented whenever there is a newer `PATCH` version of an
    existing dependency, support for a newer platform, or there are bug fixes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当旧版本不再受支持时，采用现有依赖项的较新`MAJOR`版本，或者切换兼容性怪癖的设置时，将递增版本的`MAJOR`部分。每当现有依赖项有较新的`MINOR`版本，或者有新的依赖项、公共API表面积或新行为添加时，将递增`MINOR`。每当现有依赖项有较新的`PATCH`版本、对较新平台的支持或有错误修复时，将递增`PATCH`。
- en: When `MAJOR` is incremented, `MINOR` and `PATCH` are reset to zero. Similarly,
    when `MINOR` is incremented, `PATCH` is reset to zero while `MAJOR` is not affected.
    This implies that whenever there are multiple changes, the highest element affected
    by the resulting changes is incremented while the other parts are reset to zero.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当`MAJOR`被递增时，`MINOR`和`PATCH`被重置为零。同样，当`MINOR`被递增时，`PATCH`被重置为零，而`MAJOR`不受影响。这意味着每当有多个更改时，受影响的最高元素会被递增，而其他部分会被重置为零。
- en: Usually, preview versions have `-preview[number]-([build]|"final")` appended
    to the version, for example, 2.1.1-preview1-final. Developers can select the desired
    features and level of stability based on the two types of releases of .NET Core
    available, which are **Long-Term Support** (**LTS**) and **Current**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，预览版本的版本会附加`-preview[number]-([build]|"final")`，例如，2.1.1-preview1-final。开发人员可以根据.NET
    Core的两种可用发布类型**长期支持**（**LTS**）和**当前**，选择所需的功能和稳定级别。
- en: The LTS version is a relatively more stable platform, supported for a longer
    period while new features are added less frequently. The Current version adds
    new features and APIs more frequently, but there is a shorter allowed duration
    to install updates with more frequent updates being made available and a shorter
    support period than for LTS.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: LTS版本是一个相对更稳定的平台，支持时间更长，而新功能添加得更少。当前版本更频繁地添加新功能和API，但允许安装更新的时间较短，提供更频繁的更新，并且支持时间比LTS更短。
- en: .NET Core packages and metapackages
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core软件包和metapackages
- en: The .NET Core platform is shipped as a set of packages that are typically called
    metapackages. The platform is essentially made of NuGet packages, this contributes
    to it being lightweight and easily distributable. The packages in .NET Core provide
    both primitives and higher level data types and common utilities available in
    the platform. Also, each package directly maps to an assembly both with the same
    name; `System.IO.FileSystem.dll` assembly is the package for `System.IO.FileSystem`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core平台是作为一组通常称为metapackages的软件包进行发布的。该平台基本上由NuGet软件包组成，这有助于使其轻量级且易于分发。.NET
    Core中的软件包提供了平台上可用的原语和更高级别的数据类型和常用实用程序。此外，每个软件包直接映射到一个具有相同名称的程序集；`System.IO.FileSystem.dll`程序集是`System.IO.FileSystem`软件包。
- en: Packages in .NET Core are defined as fine-grained. This comes with great benefits
    as the resulting application developed on the platform has small print and only
    contains packages that are referenced and used in the project. Unreferenced packages
    are not shipped as part of the application distribution. Additionally, fine-grained
    packages can provide differing OS and CPU support as well as dependencies peculiar
    to only one library. .NET Core packages usually ship using the same schedule as
    the platform support. This allows fixes to be distributed and installed as lightweight
    package updates.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core中的软件包被定义为细粒度。这带来了巨大的好处，因为在该平台上开发的应用程序的结果是印刷小，只包含在项目中引用和使用的软件包。未引用的软件包不会作为应用程序分发的一部分进行发布。此外，细粒度软件包可以提供不同的操作系统和CPU支持，以及仅适用于一个库的特定依赖关系。.NET
    Core软件包通常与平台支持一起发布。这允许修复作为轻量级软件包更新进行分发和安装。
- en: 'Some of the NuGet packages available for .NET Core are listed here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是.NET Core可用的一些NuGet软件包：
- en: '`System.Runtime`: This is the .NET Core package, which includes `Object`, `String`,
    `Array`, `Action`, and `IList<T>`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Runtime`：这是.NET Core软件包，包括`Object`、`String`、`Array`、`Action`和`IList<T>`。'
- en: '`System.Reflection`: This package contains the types for loading, inspecting,
    and activating types, including `Assembly`, `TypeInfo`, and `MethodInfo`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Reflection`：此软件包包含用于加载、检查和激活类型的类型，包括`Assembly`、`TypeInfo`和`MethodInfo`。'
- en: '`System.Linq`: A set of types for querying objects, including `Enumerable`
    and `ILookup<TKey,TElement>`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Linq`：用于查询对象的一组类型，包括`Enumerable`和`ILookup<TKey,TElement>`。'
- en: '`System.Collections`: Types for generic collections, including `List<T>` and
    `Dictionary<TKey,TValue>`.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Collections`：用于通用集合的类型，包括`List<T>`和`Dictionary<TKey,TValue>`。'
- en: '`System.Net.Http`: Types for HTTP network communication, including `HttpClient`
    and `HttpResponseMessage`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Net.Http`：用于HTTP网络通信的类型，包括`HttpClient`和`HttpResponseMessage`。'
- en: '`System.IO.FileSystem`: Types for reading and writing to local or networked,
    disk-based storage, including **file** and **directory**.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.IO.FileSystem`：用于读取和写入本地或网络磁盘存储的类型，包括**文件**和**目录**。'
- en: 'Referencing a package in your .Net Core project is relatively easy. For example,
    if you include `System.Reflection` in your project, you can reference it in the
    project, as shown here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的.Net Core项目中引用软件包相对容易。例如，如果您在项目中包含`System.Reflection`，则可以在项目中引用它，如下所示：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Metapackage
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metapackage
- en: '**Metapackage** is a reference or dependency that is added to a .NET Core project
    in addition to the already referenced target framework in the project. For example,
    you can add `Microsoft.NETCore.App` or `NetStandard.Library` to a .NET Core project.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**元包**是除了项目中已引用的目标框架之外，添加到.NET Core项目中的引用或依赖关系。例如，您可以将`Microsoft.NETCore.App`或`NetStandard.Library`添加到.NET
    Core项目中。'
- en: At times, it is required to use a set of packages in a project. This is done
    through the use of metapackages. Metapackages are groups of packages that are
    often used together. Also, metapackages are NuGet packages that describe a group
    or set of packages. Metapackages can create a framework for the packages when
    the framework is specified.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，需要在项目中使用一组包。这是通过使用元包来完成的。元包是经常一起使用的一组包。此外，元包是描述一组或一套包的NuGet包。当指定框架时，元包可以为这些包创建一个框架。
- en: When you reference a metapackage, essentially a reference is made to all the
    packages contained in the metapackage. In essence, this makes the libraries in
    the packages available for IntelliSense during project development with Visual
    Studio. Also, the libraries will be available when the project is being published.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当您引用一个元包时，实质上是引用了元包中包含的所有包。实质上，这使得这些包中的库在使用Visual Studio进行项目开发时可以进行智能感知。此外，这些库在项目发布时也将可用。
- en: In a .NET Core project, a metapackage is referenced by the framework targeted
    in the project, which implies that a metapackage is strongly associated or tied
    to a specific framework. Metapackages give access to groups of packages that have
    already been confirmed and tested to work together.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core项目中，元包是由项目中的目标框架引用的，这意味着元包与特定框架强烈关联或绑定在一起。元包可以访问已经确认和测试过可以一起工作的一组包。
- en: 'The .NET Standard metapackage is the `NETStandard.Library`, which constitutes
    a set of libaries in the .NET Standard. This is applicable to the different variants
    of the .NET platforms: .NET Core, .NET Framework and Mono framework.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard元包是`NETStandard.Library`，它构成了.NET标准中的一组库。这适用于.NET平台的不同变体：.NET Core、.NET
    Framework和Mono框架。
- en: '`Microsoft.NETCore.App` and `Microsoft.NETCore.Portable.Compatibility` are
    the main .NET Core metapackages. `Microsoft.NETCore.App` describes the set of
    libraries that constitute the .NET Core distribution and depends on `NETStandard.Library`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Microsoft.NETCore.App`和`Microsoft.NETCore.Portable.Compatibility`是主要的.NET
    Core元包。`Microsoft.NETCore.App`描述了构成.NET Core分发的库集，并依赖于`NETStandard.Library`。'
- en: '`Microsoft.NETCore.Portable.Compatibility` describes the set of facades that
    enable the mscorlib-based **Portable Class Libraries** (**PCLs**) to work on .NET
    Core.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Microsoft.NETCore.Portable.Compatibility`描述了一组facade，使得基于mscorlib的**可移植类库**（**PCLs**）可以在.NET
    Core上工作。'
- en: Microsoft.AspNetCore.All metapackage
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft.AspNetCore.All元包
- en: '`Microsoft.AspNetCore.All` is the metapackage for ASP.NET Core. The metapackage
    comprises packages supported and maintained by the ASP.NET Core team, supported
    packages by Entity Framework Core, as well as the internal and third-party dependencies
    used by both ASP.NET Core and Entity Framework Core.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.All`是ASP.NET Core的元包。该元包包括由ASP.NET Core团队支持和维护的包，Entity
    Framework Core支持的包，以及ASP.NET Core和Entity Framework Core都使用的内部和第三方依赖项。'
- en: The available default project templates that target ASP.NET Core 2.0 use the
    `Microsoft.AspNetCore.All` package. The version numbers of ASP.NET Core version
    and Entity Framework Core are similar to that of the `Microsoft.AspNetCore.All`
    metapackage. All available features in ASP.NET Core 2.x and Entity Framework Core
    2.x are included in the `Microsoft.AspNetCore.All` package.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 针对ASP.NET Core 2.0的可用默认项目模板使用`Microsoft.AspNetCore.All`包。ASP.NET Core版本号和Entity
    Framework Core版本号与`Microsoft.AspNetCore.All`元包的版本号相似。ASP.NET Core 2.x和Entity Framework
    Core 2.x中的所有可用功能都包含在`Microsoft.AspNetCore.All`包中。
- en: When you create an ASP.NET Core application that references the `Microsoft.AspNetCore.All`
    metapackage, .NET Core Runtime Store is made available for your usage. .NET Core
    Runtime Store exposes the required runtime assets to run ASP.NET Core 2.x applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个引用`Microsoft.AspNetCore.All`元包的ASP.NET Core应用程序时，.NET Core Runtime Store将可供您使用。.NET
    Core Runtime Store公开了运行ASP.NET Core 2.x应用程序所需的运行时资源。
- en: During deployment, assets from the referenced ASP.NET Core NuGet packages are
    not deployed together with the application, the assets are in the .NET Core Runtime
    Store. These assets are precompiled for performance gain, to speed up application
    startup time. Also, it is desirable to exclude packages that are not used. This
    is done  by using the package-trimming process.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署过程中，引用的ASP.NET Core NuGet包中的资源不会与应用程序一起部署，这些资源位于.NET Core Runtime Store中。这些资源经过预编译以提高性能，加快应用程序启动时间。此外，排除未使用的包是可取的。这是通过使用包修剪过程来完成的。
- en: 'To use `Microsoft.AspNetCore.All` packages, it should be added as a reference
    to the .NET Core `.csproj` project file, like in the following XML config:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`Microsoft.AspNetCore.All`包，应将其添加为.NET Core的`.csproj`项目文件的引用，就像以下XML配置中所示：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Packaging for NuGet distribution
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NuGet分发的打包
- en: .NET Core's flexibility is not only limited to the application's development,
    it extends to the deployment process. Deploying .NET Core applications can take
    two forms—**framework-dependent deployment** (**FDD**) and **self-contained deployment**
    (**SCD**).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core的灵活性不仅限于应用程序的开发，还延伸到部署过程。部署.NET Core应用程序可以采用两种形式——**基于框架的部署**（**FDD**）和**独立部署**（**SCD**）。
- en: Using the FDD approach requires that there is a system-wide .NET Core installed
    on the machine where the application will be developed. The installed .NET Core
    runtime will be shared by your application and other applications deployed on
    the machine.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FDD方法需要在开发应用程序的计算机上安装系统范围的.NET Core。安装的.NET Core运行时将被应用程序和在该计算机上部署的其他应用程序共享。
- en: This allows your application to be portable between the versions or installations
    of the .NET Core framework. Also, with this approach, your deployment will be
    lightweight and only contain your application's code and the third-party libraries
    used. When using this approach, `.dll` files are created for your application,
    which allows it to be launched from the command line.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得应用程序可以在不同版本或安装的 .NET Core 框架之间轻松移植。此外，使用此方法时，部署将是轻量级的，只包含应用程序的代码和使用的第三方库。使用此方法时，为应用程序创建了
    `.dll` 文件，以便可以从命令行启动。
- en: SCD allows you to package your application together with the .NET Core libraries
    and .NET Core runtime that are required to make it run. Essentially, your application
    does not rely on the presence of installed .NET Core on the deployment machine.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: SCD 允许您将应用程序与运行所需的 .NET Core 库和 .NET Core 运行时一起打包。实质上，您的应用程序不依赖于部署计算机上已安装的 .NET
    Core 的存在。
- en: When using this approach, an executable file, which essentially is a renamed
    version of the platform-specific .NET Core host will be packaged as part of the
    application. This executable file is `app.exe` on Windows or `app` on Linux and
    macOS. Similar to when the application is deployed using the *framework-dependent
    approach*, `.dll` files are created for your application that allows it to be
    launched.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法时，可执行文件（本质上是平台特定的 .NET Core 主机的重命名版本）将作为应用程序的一部分打包。在 Windows 上，此可执行文件为
    `app.exe`，在 Linux 和 macOS 上为 `app`。与使用 *依赖于框架的方法* 部署应用程序时一样，为应用程序创建了 `.dll` 文件，以便启动应用程序。
- en: dotnet publish command
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dotnet publish 命令
- en: 'The `dotnet publish` command is used to compile the application, and to check
    the application''s dependencies before copying the application and the dependencies
    into a folder in preparation for deployment. The execution of the command is the
    only officially supported way of preparing the .NET Core application for deployment.
    The synopsis is here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet publish` 命令用于编译应用程序，并在将应用程序和依赖项复制到准备部署的文件夹之前检查应用程序的依赖项。执行该命令是准备 .NET
    Core 应用程序进行部署的唯一官方支持的方式。概要在此处：'
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When the command is run, the output will contain the **Intermediate Language**
    (**IL**) code contained in a `.dll` assembly, a `.deps.json` file that contains
    the project's dependencies, a `.runtime.config.json` file that specifies the expected
    shared runtime, and the application's dependencies copied from the NuGet cache
    into the output folder.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令时，输出将包含 `.dll` 程序集中包含的**中间语言**（**IL**）代码，包含项目依赖项的 `.deps.json` 文件，指定预期共享运行时的
    `.runtime.config.json` 文件，以及从 NuGet 缓存中复制到输出文件夹中的应用程序依赖项。
- en: 'The command''s argument and options are explained here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的参数和选项在此处解释：
- en: '`PROJECT`: To specify the project to be compiled and published, it defaults
    to the current folder.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PROJECT`：用于指定要编译和发布的项目，默认为当前文件夹。'
- en: '`-c|--configuration`: This option is used to specify the build configuration,
    it takes the `Debug` and `Release` values, the default value is `Debug`.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -c|--configuration：用于指定构建配置的选项，可取 `Debug` 和 `Release` 值，默认值为 `Debug`。
- en: '`-f|--framework <FRAMEWORK>`: The target framework option, when specified with
    the command, will publish the application for the target framework.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -f|--framework <FRAMEWORK>：目标框架选项，与命令一起指定时，将为目标框架发布应用程序。
- en: '`--force`: Used to force dependencies to be resolved, similar to deleting the
    `project.assets.json` file.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --force：用于强制解析依赖项，类似于删除 `project.assets.json` 文件。
- en: '`-h|--help`: Displays the help for the command.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -h|--help：显示命令的帮助信息。
- en: '`--manifest <PATH_TO_MANIFEST_FILE>`: For specifying one or more target manifests
    to be used in trimming the packages published with the application.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --manifest <PATH_TO_MANIFEST_FILE>：用于指定要在修剪应用程序发布的软件包时使用的一个或多个目标清单。
- en: '`--no-dependencies`: This option is used to ignore project-to-project references
    but restores the root project.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --no-dependencies：此选项用于忽略项目对项目的引用，但会还原根项目。
- en: '`--no-restore`: This is to instruct the command not to perform an implicit
    restore.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --no-restore：指示命令不执行隐式还原。
- en: '`-o|--output <OUTPUT_DIRECTORY>`: This is for specifying the path of the output
    directory. If the option is not specified, it defaults to `./bin/[configuration]/[framework]/`
    for an FDD or `./bin/[configuration]/[framework]/[runtime]` for an SCD.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -o|--output <OUTPUT_DIRECTORY>：用于指定输出目录的路径。如果未指定该选项，则默认为 FDD 的 `./bin/[configuration]/[framework]/`
    或 SCD 的 `./bin/[configuration]/[framework]/[runtime]`。
- en: '`-r|--runtime <RUNTIME_IDENTIFIER>`: The option is for publishing the application
    for a given runtime, used only when creating an SCD.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -r|--runtime <RUNTIME_IDENTIFIER>：用于为特定运行时发布应用程序，仅在创建 SCD 时使用。
- en: '`--self-contained`: Is for specifying an SCD. When a runtime identifier is
    specified, its default value is true.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --self-contained：用于指定 SCD。当指定运行时标识符时，默认值为 true。
- en: '`-v|--verbosity <LEVEL>`: For specifying the verbosity level of the `dotnet
    publish` command. The allowed values are `q[uiet]`, `n[ormal]`, `m[inimal]`, `diag[nostic]`,
    and `d[etailed]`.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -v|--verbosity <LEVEL>：用于指定 `dotnet publish` 命令的详细程度。允许的值为 `q[uiet]`、`n[ormal]`、`m[inimal]`、`diag[nostic]`
    和 `d[etailed]`。
- en: '`--version-suffix <VERSION_SUFFIX>`: For specifying the version suffix to be
    used when replacing the asterisk (`*`) in the version field of the project file.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: --version-suffix <VERSION_SUFFIX>：用于指定在项目文件的版本字段中替换星号 (`*`) 时要使用的版本后缀。
- en: 'An example of the command usage is running `dotnet publish` on the command
    line. This publishes the project in the current folder. To publish the `LoanApplication`
    project that was used in this book, you can run the `dotnet publish` command.
    This will publish the application using the framework specified in the project.
    The projects in the solution that the ASP.NET Core application depends on will
    be built alongside. See the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的使用示例是在命令行上运行 `dotnet publish`。这将发布当前文件夹中的项目。要发布本书中使用的 `LoanApplication` 项目，可以运行
    `dotnet publish` 命令。这将使用项目中指定的框架发布应用程序。ASP.NET Core 应用程序依赖的解决方案中的项目将与之一起构建。请参阅以下屏幕截图：
- en: '![](img/6e3b3ee4-f49d-48dd-aefc-4d7c53f9f986.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e3b3ee4-f49d-48dd-aefc-4d7c53f9f986.png)'
- en: 'A `publish` folder is created in the `netcoreapp2.0` folder where all the compiled
    files and the dependencies will be copied to:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在`netcoreapp2.0`文件夹中创建了一个`publish`文件夹，其中将复制所有编译文件和依赖项：
- en: '![](img/71dacc7f-c199-41f2-a5bb-a3985c070d53.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71dacc7f-c199-41f2-a5bb-a3985c070d53.png)'
- en: Creating a NuGet package
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个NuGet软件包
- en: '**NuGet** is the package manager for .NET, it is an open source package manager
    that provides an easier way of versioning and distributing libraries for applications
    built on both .NET Framework and the .NET Core platform. The NuGet gallery is
    the .NET central package repository for hosting all packages used by both package
    authors and consumers.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**NuGet**是.NET的软件包管理器，它是一个开源的软件包管理器，为构建在.NET Framework和.NET Core平台上的应用程序提供了更简单的版本控制和分发库的方式。NuGet库是.NET的中央软件包存储库，用于托管包作者和消费者使用的所有软件包。'
- en: 'Using the .NET Core''s `dotnet pack` command makes it easy to create NuGet
    packages. When this command is run, it builds a .NET Core project and creates
    a NuGet package from it. NuGet dependencies of a packed .NET Core project will
    be added to the `.nuspec` file, to ensure they''re resolved when the package is
    installed. The following command synopsis is shown:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET Core的`dotnet pack`命令可以轻松创建NuGet软件包。运行此命令时，它会构建.NET Core项目，并从中创建一个NuGet软件包。打包的.NET
    Core项目的NuGet依赖项将被添加到`.nuspec`文件中，以确保在安装软件包时它们被解析。显示以下命令概要：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The command''s argument and options are explained here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里解释了命令的参数和选项：
- en: '`PROJECT` is to specify the project to pack, which can be a path to a directory
    or a `.csproj` file. It defaults to the current folder.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PROJECT`用于指定要打包的项目，可以是目录的路径或`.csproj`文件。默认为当前文件夹。'
- en: '`c|--configuration`: This option is used to define the build configuration.
    It takes the `Debug` and `Release` values. The default value is `Debug`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c|--configuration`：此选项用于定义构建配置。它接受`Debug`和`Release`值。默认值为`Debug`。'
- en: '`--force`: Used to force dependencies to be resolved similar to deleting the
    `project.assets.json` file.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--force`：用于强制解析依赖项，类似于删除`project.assets.json`文件。'
- en: '`-h|--help`: Displays the help for the command.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-h|--help`：显示命令的帮助信息。'
- en: '`-include-source`: It''s to specify that the source files be included in the
    `src` folder in the NuGet package.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-include-source`：用于指定源文件包含在NuGet软件包的`src`文件夹中。'
- en: '`--include-symbols`: To generate the `nupkg` symbols.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--include-symbols`：生成`nupkg`符号。'
- en: '`--no-build`: This is to instruct the command to not build the project before
    packing.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-build`：这是为了指示命令在打包之前不要构建项目。'
- en: '`--no-dependencies`: This option is used to ignore project-to-project references
    but restores the root project.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-dependencies`：此选项用于忽略项目对项目的引用，但恢复根项目。'
- en: '`--no-restore`: This is to instruct the command not to perform an implicit
    restore.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--no-restore`：这是为了指示命令不执行隐式还原。'
- en: '`-o|--output <OUTPUT_DIRECTORY>`: This is for specifying the path of the output
    directory to place the built packages.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o|--output <OUTPUT_DIRECTORY>`：用于指定输出目录的路径，以放置构建的软件包。'
- en: '`-r|--runtime <RUNTIME_IDENTIFIER>`: This option is to specify the target runtime
    to restore the packages for.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r|--runtime <RUNTIME_IDENTIFIER>`：此选项用于指定要为其还原软件包的目标运行时。'
- en: '`-s|--serviceable`: Is for setting the serviceable flag in the package.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s|--serviceable`：用于在软件包中设置可服务标志。'
- en: '`-v|--verbosity <LEVEL>`: For specifying the verbosity level of the command.
    The allowed values are `q[uiet]`, `m[inimal]`, `n[ormal]`, `d[etailed]`, and `diag[nostic]`.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v|--verbosity <LEVEL>`：用于指定命令的详细程度。允许的值为`q[uiet]`、`m[inimal]`、`n[ormal]`、`d[etailed]`和`diag[nostic]`。'
- en: '`--version-suffix <VERSION_SUFFIX>`: For specifying the version suffix to be
    used when replacing the asterisk (`*`) in the version field of the project file.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--version-suffix <VERSION_SUFFIX>`：用于指定在项目文件的版本字段中替换星号(`*`)时要使用的版本后缀。'
- en: 'Running the `dotnet pack` command will pack the project in the current directory.
    To pack the `LoanApplication.Core` project, we can run the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`dotnet pack`命令将打包当前目录中的项目。要打包`LoanApplication.Core`项目，可以运行以下命令：
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When the command is run, the `LoanApplication.Core` project will be built and
    packed into the `nupkgs` file in the project folder. The `LoanApplication.Core.1.0.0.nupkg`
    file will be created, which is an archive file containing the packed project''s
    libraries:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令时，`LoanApplication.Core`项目将被构建并打包到项目文件夹中的`nupkgs`文件中。将创建`LoanApplication.Core.1.0.0.nupkg`文件，其中包含打包项目的库：
- en: '![](img/15b74cee-dd94-4076-b5dc-faa7f6040573.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15b74cee-dd94-4076-b5dc-faa7f6040573.png)'
- en: After the application has been packed, it can be published to the NuGet gallery
    by using the `dotnet nuget push` command. In order to be able to push packages
    to NuGet, you need to register for NuGet API keys. These keys are to be specified
    as options with the `dotnet nuget push` command when uploading packages to NuGet.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序打包后，可以使用`dotnet nuget push`命令将其发布到NuGet库。为了能够将软件包推送到NuGet，您需要注册NuGet API密钥。在上传软件包到NuGet时，这些密钥需要作为`dotnet
    nuget push`命令的选项进行指定。
- en: 'Run the `dotnet nuget push LoanApplication.Core.1.0.0.nupkg -k <api-key> -s
    https://www.nuget.org/` command to push the created NuGet package to the gallery,
    which will make it available for use by other developers. When the command is
    run, a connection will be established to the NuGet server to push the package
    under your account:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`dotnet nuget push LoanApplication.Core.1.0.0.nupkg -k <api-key> -s https://www.nuget.org/`命令将创建的NuGet软件包推送到库中，从而使其他开发人员可以使用。运行该命令时，将建立到NuGet服务器的连接，以在您的帐户下推送软件包：
- en: '![](img/601521bb-89f1-45a2-bf67-f262cb128c78.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/601521bb-89f1-45a2-bf67-f262cb128c78.png)'
- en: 'After the package has been pushed to NuGet gallery, when you log in to your
    account, you can find the pushed package in the list of published packages:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将软件包推送到NuGet库后，登录您的帐户，您可以在已发布软件包的列表中找到推送的软件包：
- en: '![](img/680b6ae6-3f27-4c89-af9b-224ae44623d1.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/680b6ae6-3f27-4c89-af9b-224ae44623d1.png)'
- en: When you upload your package to the NuGet gallery, other programmers can search
    for your package directly from Visual Studio by using the NuGet package manager
    and add a reference to the libraries in their projects.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将软件包上传到NuGet库时，其他程序员可以直接从Visual Studio使用NuGet软件包管理器搜索您的软件包，并在其项目中添加对库的引用。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by executing the xUnit.net test with Cake. Also,
    we extensively discussed .NET Core versioning, the concepts, and how it affects
    application development on the .NET Core platform. Later, we packaged the `LoanApplication`
    project that was used in this book for NuGet distribution.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先使用Cake执行了xUnit.net测试。此外，我们广泛讨论了.NET Core的版本控制、概念以及它对.NET Core平台应用开发的影响。之后，我们为NuGet分发打包了本书中使用的`LoanApplication`项目。
- en: You have been taken through an exciting TDD journey in this book. Using the
    xUnit.net unit test framework, the concept of TDD was introduced and discussed
    extensively. Data-driven unit tests were covered, which allow you to test your
    code with data from different data sources.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您已经经历了一次激动人心的TDD之旅。使用xUnit.net单元测试框架，TDD的概念被介绍并进行了广泛讨论。还涵盖了数据驱动的单元测试，这使您能够使用不同数据源的数据来测试您的代码。
- en: The Moq framework was used to introduce and explain how to unit test code with
    dependencies. The TeamCity CI server was used to explain the concepts of CI. Cake,
    a cross-platform build system was explored and used to create build steps executed
    in TeamCity. Also, Microsoft VSTS, another CI tool, was used to execute Cake scripts.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Moq框架被用来介绍和解释如何对具有依赖关系的代码进行单元测试。TeamCity CI服务器被用来解释CI的概念。Cake，一个跨平台构建系统被探讨并用于创建在TeamCity中执行的构建步骤。此外，另一个CI工具Microsoft
    VSTS被用来执行Cake脚本。
- en: Finally, effective use of TDD is greatly rewarding in terms of the quality of
    code and resulting application. With continuous practices, all the concepts explained
    in this book can become part of your day-to-day programming routine.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有效地使用TDD在代码质量和最终应用方面是非常有益的。通过持续的实践，本书中解释的所有概念都可以成为您日常编程例行的一部分。
