["```cs\nInvoke-WebRequest https://cakebuild.net/download/bootstrapper/windows -OutFile build.ps1\n```", "```cs\ncurl -Lsfo build.sh https://cakebuild.net/download/bootstrapper/osx\n```", "```cs\ncurl -Lsfo build.sh https://cakebuild.net/download/bootstrapper/linux\n```", "```cs\nvar target = Argument(\"target\", \"Default\");\n\nTask(\"Default\")\n  .Does(() =>\n{\n  Information(\"Installation Successful\");\n});\n\nRunTarget(target);\n```", "```cs\n./build.ps1\n```", "```cs\nchmod +x build.sh\n```", "```cs\n./build.sh\n```", "```cs\nTask(\"Action\")\n    .Does(() =>\n{\n    // Task code goes here\n});\n```", "```cs\nvar debugFolder = Directory(\"./bin/Debug\");\n\nTask(\"CleanFolder\")\n    .Does(() =>\n{\n    CleanDirectory(debugFolder);\n});\n```", "```cs\nTask(\"LongRunningTask\")\n    .Does(async () => \n    {\n        // use await keyword to multi thread code\n    }); \n```", "```cs\nTask(\"ProcessCsv\")\n    .Does(() => \n{ \n})\n.DoesForEach(GetFiles(\"**/*.csv\"), (file) => \n{ \n    // Process each csv file. \n});\n```", "```cs\nTaskSetup(setupContext =>\n{\n    var taskName =setupContext.Task.Name;\n    // perform action\n});\n\nTaskTeardown(teardownContext =>\n{\n    var taskName =teardownContext.Task.Name;\n    // perform action\n});\n```", "```cs\nSetup(context =>\n{\n    // This will be executed BEFORE the first task.\n});\n\nTeardown(context =>\n{\n    // This will be executed AFTER the last task.\n});\n```", "```cs\n[Paths]\nTools=./tools\n```", "```cs\ncake.exe --paths_tools=./tools\n```", "```cs\nTask(\"Task1\")\n    .Does(() =>\n{\n});\n\nTask(\"Task2\")\n    .IsDependentOn(\"Task1\")\n    .Does(() =>\n{\n});\n\nRunTarget(\"Task2\");\n```", "```cs\nTask(\"Task1\")\n    .IsDependeeOf(\"Task2\")\n    .Does(() =>\n{\n});\n\nTask(\"Task2\")\n    .Does(() =>\n{\n});\n\nRunTarget(\"Task2\");\n```", "```cs\nvar debugFolder = Directory(\"./bin/Debug\");\n\nTask(\"CleanFolder\")\n    .WithCriteria(DateTime.Now.Hour >= 12)\n    .Does(() =>\n{\n    CleanDirectory(debugFolder);\n});\n\nRunTarget(\"CleanFolder\");\n```", "```cs\nvar debugFolder = Directory(\"./bin/Debug\");\n\nTask(\"CleanFolder\")\n    .WithCriteria(DateTime.Now.Hour >= 12)\n    .Does(() =>\n{\n    CleanDirectory(debugFolder);\n});\n\nTask(\"ProcessCsv\")\n    .WithCriteria(DateTime.Now.Hour >= 12)\n    .IsDependentOn(\"CleanFolder\")\n    .Does(() => \n{ \n})\n.DoesForEach(GetFiles(\"**/*.csv\"), (file) => \n{ \n    // Process each csv file. \n});\n\nRunTarget(\"ProcessCsv\");\n```", "```cs\nvar isLocalBuild = BuildSystem.IsLocalBuild\nTask(\"Clean\")\n    .WithCriteria(isLocalBuild)\n    .Does(() =>\n    {\n        // clean all projects in the soution\n    });\n\nTask(\"Build\")   \n    .WithCriteria(isLocalBuild)\n    .Does(() =>\n    {    \n        // build all projects in the soution\n    });\n\nTask(\"Deploy\")    \n    .WithCriteria(isLocalBuild)\n    .Does(() => \n    {\n        // Deploy to test server\n    });    \n\nTask(\"Main\")\n    .IsDependentOn(\"Clean\")\n    .IsDependentOn(\"Build\")\n    .IsDependentOn(\"Deploy\")    \n    .Does(() => \n    {\n    });\nRunTarget(\"Main\");\n```", "```cs\nTask(\"Task1\")\n.Does(() =>\n{\n})\n.OnError(exception =>\n{\n    // Code to handle exception.\n});\n```", "```cs\nTask(\"Task1\")\n    .ContinueOnError()\n    .Does(() =>\n{\n});\n```", "```cs\nTask(\"Task1\")\n    .Does(() =>\n{\n})\n.ReportError(exception =>\n{  \n    // Report generated exception.\n});\n```", "```cs\nTask(\"Task1\")\n    .Does(() => \n{ \n})\n.DeferOnError();\n```", "```cs\nTask(\"Task1\")\n    .Does(() =>\n{\n})\n.Finally(() =>\n{  \n    // Perform action.\n});\n```", "```cs\n//Arguments\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\nvar solution = \"./LoanApplication.sln\";\n\n// Define directories.\nvar buildDir = Directory(\"./LoanApplication.Core/bin\") + Directory(configuration);\n\n//Tasks\nTask(\"Clean\")\n    .Does(() =>\n{\n    CleanDirectory(buildDir);\n});\n\nTask(\"Restore-NuGet-Packages\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =>\n{\n    Information(\"Restoring NuGet Packages\");\n    DotNetCoreRestore();\n});\n```", "```cs\nTask(\"Build\")\n    .IsDependentOn(\"Restore-NuGet-Packages\")\n    .Does(() =>\n{\n    Information(\"Build Solution\");\n    DotNetCoreBuild(solution,\n           new DotNetCoreBuildSettings()\n                {\n                    Configuration = configuration\n                });    \n});\n\nTask(\"Run-Tests\")\n    .IsDependentOn(\"Build\")\n    .Does(() =>\n{\n     var testProjects = GetFiles(\"./LoanApplication.Tests.Units/*.csproj\");\n        foreach(var project in testProjects)\n        {\n            DotNetCoreTool(\n                projectPath: project.FullPath, \n                command: \"xunit\", \n                arguments: $\"-configuration {configuration} -diagnostics -stoponfail\"\n            );\n        }        \n});\n\nTask(\"Default\")\n    .IsDependentOn(\"Run-Tests\");\n\nRunTarget(target);\n```"]