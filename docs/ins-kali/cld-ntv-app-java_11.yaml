- en: Platform Deployment – Azure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台部署 - Azure
- en: This chapter discusses application design and deployment for Azure—a Microsoft
    public cloud platform. The essence of cloud-native development is the ability
    to integrate your application with PaaS platforms provided by the cloud provider.
    You, as a developer, focus on creating value (solving customer problems), and
    allow the cloud provider to do the heavy lifting for your application's infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了 Azure 的应用程序设计和部署——这是微软的公共云平台。云原生开发的本质是能够将您的应用程序与云提供商提供的 PaaS 平台集成。作为开发人员，您专注于创造价值（解决客户问题），并允许云提供商为您的应用程序的基础设施进行繁重的工作。
- en: 'In this chapter, we will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Different categories of PaaS services provided by Azure. We will delve a little
    deeper into services that will be used by our sample applications.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 提供的不同类别的 PaaS 服务。我们将深入研究将被我们的样例应用程序使用的服务。
- en: Migrate our sample application to Azure and understand the various options available.
    We will also evaluate all the options and understand the pros and cons for each
    option.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的样例应用程序迁移到 Azure，并了解各种可用选项。我们还将评估所有选项，并了解每个选项的利弊。
- en: We are covering the Azure platform with the intention of showing how to build
    and deploy applications. We are not going to cover Azure in depth, and we expect
    the reader to use the Azure documentation ([https://docs.microsoft.com/en-us/azure/](https://docs.microsoft.com/en-us/azure/))
    to explore additional options.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在介绍 Azure 平台，目的是展示如何构建和部署应用程序。我们不打算深入研究 Azure，并期望读者使用 Azure 文档（[https://docs.microsoft.com/en-us/azure/](https://docs.microsoft.com/en-us/azure/)）来探索其他选项。
- en: Azure supports multiple programming languages, but for the purpose of this book
    we are looking at support for Java applications in Azure.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 支持多种编程语言，但出于本书的目的，我们将关注 Azure 对 Java 应用程序的支持。
- en: Azure platform
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 平台
- en: Azure provides an ever-increasing set of PaaS and IaaS across a spectrum of
    technology areas. For our purpose, we will look at the subset of areas and services
    that are directly applicable and used by our application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了越来越多的 PaaS 和 IaaS，涵盖了各种技术领域。对于我们的目的，我们将关注直接适用于我们应用程序的子集领域和服务。
- en: 'For ease of use, I have created this service categorization model across technology
    areas that are most relevant to typical business applications:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便使用，我已经在最相关的技术领域中创建了这个服务分类模型：
- en: '![](img/0be37779-2ac3-4fe6-b8b0-0177c19149f4.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0be37779-2ac3-4fe6-b8b0-0177c19149f4.jpg)'
- en: '*This is just an indicative list and by no means an exhaustive list. Refer
    to the Azure portal for a complete list.*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*这只是一个指示性列表，绝不是一个详尽的列表。请参考 Azure 门户以获取完整列表。*'
- en: 'In the preceding categorization models, we have divided the services into the
    following areas:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述分类模型中，我们将服务分为以下领域：
- en: '**Infrastructure**: This is an all-encompassing list of services provided by
    Azure to deploy and host our applications. We have combined services across compute,
    storage, and networking in this category. We will be looking at the following
    set of services for the purpose of our sample Java applications.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施**：这是 Azure 提供的一系列服务，用于部署和托管我们的应用程序。我们已经将计算、存储和网络等服务结合在这个类别中。为了我们样例 Java
    应用程序的目的，我们将研究以下一系列服务。'
- en: '**App Services**: How can we take the existing Spring Boot applications and
    deploy them in our Azure platform? This is more of a lift and shift scenario.
    Here the application is not refactored, but the dependencies are deployed on App
    Services. Using one of the database services, the application can be deployed
    and hosted. Azure provides PostgreSQL and MySQL as hosted database models among
    a variety of other options.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用服务**：我们如何将现有的 Spring Boot 应用程序部署到我们的 Azure 平台？这更像是一个搬迁和部署的场景。在这里，应用程序没有重构，但依赖项被部署在应用服务上。使用其中一个数据库服务，应用程序可以被部署和托管。Azure
    提供了 PostgreSQL 和 MySQL 作为托管数据库模型，还有其他各种选项。'
- en: '**Container Services**: For applications packaged as Docker containers, we
    can explore how to deploy Docker containers to the platform.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器服务**：对于打包为 Docker 容器的应用程序，我们可以探索如何将 Docker 容器部署到平台上。'
- en: '**Functions**: This is the serverless platform model, where you need not worry
    about application hosting and deployment. You create a function and let the platform
    do the heavy lifting for you. As of now, Java-based Azure cloud functions are
    in beta. We will explore how to create one in a development environment and test
    locally.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：这是无服务器平台模型，您无需担心应用程序的托管和部署。您创建一个函数，让平台为您进行繁重的工作。截至目前，基于 Java 的 Azure
    云函数处于测试阶段。我们将探讨如何在开发环境中创建一个函数并进行本地测试。'
- en: '**Service Fabric**: Service Fabric is a distributed systems platform for deploying
    and managing microservices and container applications. We will explore how we
    can deploy our sample `product` API in Service Fabric.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务布局**：服务布局是一个用于部署和管理微服务和容器应用程序的分布式系统平台。我们将探讨如何在服务布局中部署我们的样例“产品”API。'
- en: '**Application**: This is a list of services that help build distributed applications.
    As we move to a distributed microservices model, we need to decouple our application
    component and services. Features such as Queue, EventHub, EventGrid, and API management
    help build a cohesive set of robust APIs and services.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序**：这是一个帮助构建分布式应用程序的服务列表。随着我们转向分布式微服务模型，我们需要解耦我们的应用程序组件和服务。队列、事件中心、事件网格和
    API 管理等功能有助于构建一组稳健的 API 和服务。'
- en: '**Database**: This is a list of data store options provided by the Azure platform.
    This includes relational, key value, redis cache, and data warehouse among others.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：这是 Azure 平台提供的数据存储选项列表。其中包括关系型、键值、Redis 缓存和数据仓库等。'
- en: '**DevOps**: For building and deploying applications in the cloud, we need the
    support of robust CI/CD toolsets. Visual Studio team services are provided for
    hosting code, issue tracking, and automated builds. Again, open source tools are
    still not first-class citizens in the Azure portal. You can always use hosted
    versions of the required software.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevOps**：对于在云中构建和部署应用程序，我们需要强大的CI/CD工具集的支持。Visual Studio团队服务用于托管代码、问题跟踪和自动构建。同样，开源工具在Azure门户中仍然不是一流的公民。您可以随时使用所需软件的托管版本。'
- en: '**Security**: Another key factor for cloud applications are security services.
    Active directory, rights management, key vault, and multi-factor authentication
    are some of the key services provided in this area.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：云应用程序的另一个关键因素是安全服务。在这一领域，提供了Active Directory、权限管理、密钥保管库和多重身份验证等关键服务。'
- en: '**Mobile**: If you are building mobile applications, the platform provides
    key services such as application services for mobile, media services, and mobile
    engagement services, among others in this area.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动**：如果您正在构建移动应用程序，该平台提供了关键服务，如移动应用程序服务、媒体服务和移动参与服务等。'
- en: '**Analytics**: In the area of analytics, the platform provides robust services
    in the areas of MapReduce, Storm, Spark through HDInsight and Data Lake services
    for analytics and a data repository.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：在分析领域，该平台通过HDInsight和数据湖服务提供了MapReduce、Storm、Spark等领域的强大服务，用于分析和数据存储库。'
- en: In addition, there are multiple other technology areas where Azure provides
    services—**internet of things** (**IoT**), monitoring, management, **artificial
    intelligence** (**AI**), and cognitive and enterprise integration areas.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Azure还提供了多个其他技术领域的服务——**物联网**（**IoT**）、监控、管理、**人工智能**（**AI**）以及认知和企业集成领域。
- en: Azure platform deployment options
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure平台部署选项
- en: As we saw in the previous section, Azure provides a number of options to build
    and deploy applications on the platform. We will use our example of the `product`
    API REST service to examine the various options provided by Azure to deploy and
    run our application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中看到的，Azure提供了许多选项来构建和部署平台上的应用程序。我们将使用我们的“产品”API REST服务的示例来检查Azure提供的各种选项，以部署和运行我们的应用程序。
- en: Before we begin, I am assuming you are familiar with the Azure platform and
    have already signed up in the portal.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我假设您熟悉Azure平台，并已经在门户中注册。
- en: Azure supports multiple programming languages and provides SDKs to support development
    in the respective areas. For our purpose, we are primarily exploring support for
    Java applications within the Azure platform.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Azure支持多种编程语言，并提供SDK以支持各自领域的开发。对于我们的目的，我们主要探索Azure平台内对Java应用程序的支持。
- en: 'We will explore application hosting services in the following four areas:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下四个领域探索应用程序托管服务：
- en: App Services
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用服务
- en: Container Services
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器服务
- en: Service Fabric
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务织物
- en: Functions
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能
- en: Refer to the following link for more details and getting started: [https://azure.microsoft.com/en-in/downloads/](https://azure.microsoft.com/en-in/downloads/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和入门，请参考以下链接：[https://azure.microsoft.com/en-in/downloads/](https://azure.microsoft.com/en-in/downloads/)。
- en: Deploying Spring Boot API to Azure App Service
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring Boot API部署到Azure应用服务
- en: In this section, we are taking our `product` API service and migrating it to
    an Azure App Service. We will look at the additional changes made to the application
    to adhere to the requirements of the Azure App Service.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把我们的“产品”API服务迁移到Azure应用服务。我们将查看应用程序为满足Azure应用服务的要求所做的额外更改。
- en: 'I have taken the `product` API REST service that we built in [Chapter 3](dba50b25-08ed-48b1-9d28-6f0faff42ecb.xhtml),
    *Designing Your Cloud-Native Application*. In the service, we make the following
    changes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经拿取了我们在[第3章](dba50b25-08ed-48b1-9d28-6f0faff42ecb.xhtml)中构建的“产品”API REST服务，*设计您的云原生应用程序*。在服务中，我们做出以下更改：
- en: 'Add a file `web.config` in the root folder of the project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的根文件夹中添加一个名为`web.config`的文件：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The file is added with the following change, `product-0.0.1-SNAPSHOT.jar`, which
    is the package name of our application. In case your application name differs,
    you will need to make that change.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 文件添加了以下更改，`product-0.0.1-SNAPSHOT.jar`，这是我们应用程序的包名称。如果您的应用程序名称不同，您将需要进行更改。
- en: We start with checking out the `product` API code here: [https://azure.microsoft.com/en-in/downloads/](https://azure.microsoft.com/en-in/downloads/).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查这里的“产品”API代码：[https://azure.microsoft.com/en-in/downloads/](https://azure.microsoft.com/en-in/downloads/)。
- en: '![](img/698bfbdf-e24d-4703-83cb-1b21d38d35d6.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/698bfbdf-e24d-4703-83cb-1b21d38d35d6.png)'
- en: 'We run the `mvn clean package` command to package the project as a fat JAR:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行`mvn clean package`命令将项目打包为一个fat JAR：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, we log in to the Azure portal ([https://portal.azure.com/](https://portal.azure.com/)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们登录到Azure门户（[https://portal.azure.com/](https://portal.azure.com/)）。
- en: 'Click on the App Services menu item in the left-hand column as shown in the
    following screenshot:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧列中单击“应用服务”菜单项，如下截图所示：
- en: '![](img/5c64f4a0-c9ab-449a-b532-60689a27ebee.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c64f4a0-c9ab-449a-b532-60689a27ebee.png)'
- en: Select App Services in Azure portal
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure门户中选择应用服务
- en: 'Click on the Add link:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加”链接：
- en: '![](img/e6202b0e-c4fd-4cfa-a12d-ee7ccaea74c1.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6202b0e-c4fd-4cfa-a12d-ee7ccaea74c1.png)'
- en: 'Next, click on the Web App link as indicated:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，单击所示的“Web应用”链接：
- en: '![](img/57ceb8b3-0323-43aa-a803-952ff68d76b0.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57ceb8b3-0323-43aa-a803-952ff68d76b0.png)'
- en: Select Web App by navigating through Azure Portal | App Services | Add.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Azure门户 | 应用服务 | 添加导航选择Web应用。
- en: Click on the Create button link and you should see the following page
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建”按钮链接，您应该会看到以下页面
- en: '![](img/96ccf874-4146-47f3-a6ab-61dea5d877f9.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96ccf874-4146-47f3-a6ab-61dea5d877f9.png)'
- en: We fill in the details for our `product` API. I have filled in App name as `ch10product`
    and left the other options at the default.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们填写我们的“产品”API的详细信息。我已经填写了应用程序名称为`ch10product`，并将其他选项保留为默认。
- en: Next, click the Create button at the bottom of the page.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，单击页面底部的“创建”按钮。
- en: '![](img/528a954f-768a-4c27-b9bf-621c7a73c88a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/528a954f-768a-4c27-b9bf-621c7a73c88a.png)'
- en: This leads to the creation of the App Service.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建应用服务。
- en: 'We click on the `ch10product` under App Services, which takes us to the menu:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们点击App Services下的`ch10product`，这将带我们到菜单：
- en: '![](img/0b09eccf-5511-4d37-afbc-0dccd115d72d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b09eccf-5511-4d37-afbc-0dccd115d72d.png)'
- en: 'Notice the URL and the FTP hostname where the application is deployed. We need
    to make changes in two places—Application settings and Deployment credentials:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意部署应用程序的URL和FTP主机名。我们需要在两个地方进行更改——应用程序设置和部署凭据：
- en: '![](img/9ee26222-3971-4748-9a66-eb98829c466e.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ee26222-3971-4748-9a66-eb98829c466e.png)'
- en: 'We click on the Application settings link and select the following options
    in the drop-down menu:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们点击“应用程序设置”链接，并在下拉菜单中选择以下选项：
- en: Choose Java 8 for the Java version
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Java 8作为Java版本
- en: Choose Newest for the Java Minor version
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Java次要版本为最新
- en: Choose Newest Tomcat 9.0 for the Web container(This container will not actually
    be used; Azure uses the container bundled as part of the Spring Boot application.)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最新的Tomcat 9.0作为Web容器（实际上不会使用此容器；Azure使用作为Spring Boot应用程序一部分捆绑的容器。）
- en: Click Save
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存
- en: '![](img/4f3d3759-f319-4833-8895-7cb58e3e9f81.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f3d3759-f319-4833-8895-7cb58e3e9f81.png)'
- en: 'Next, we click on the Deployment credentials link on the left-hand side. Here
    we capture the FTP/deployment username and Password in order to be able to push
    our application to the host and click on Save as shown in the following screenshot:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们点击左侧的“部署凭据”链接。在这里，我们捕获FTP/部署用户名和密码，以便能够将我们的应用程序推送到主机，并点击保存，如下截图所示：
- en: '![](img/58881a11-bdbb-4016-af39-bc577133c1e6.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58881a11-bdbb-4016-af39-bc577133c1e6.png)'
- en: 'Connect to the FTP hostname we saw in *Step 8* and use your credentials saved
    in *Step 10* to log in:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到我们在*步骤8*中看到的FTP主机名，并使用*步骤10*中保存的凭据登录：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we change directory to `site/wwwroot` on the remote server and transfer
    the fat JAR and `web.config` to the folder:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们切换到远程服务器上的`site/wwwroot`目录，并将fat JAR和`web.config`传输到该文件夹：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We go back to the overview section and restart the application. We should be
    able to start the application and see our REST API working.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们返回到概述部分并重新启动应用程序。我们应该能够启动应用程序并看到我们的REST API正常工作。
- en: '![](img/e713d0dd-11a7-45b5-8ed9-c05e45d445be.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e713d0dd-11a7-45b5-8ed9-c05e45d445be.png)'
- en: In this section, we saw how to take an existing REST API application and deploy
    it in Azure. It is not the easiest and best way to deploy. This option is more
    of a lift and shift, where we take existing applications and try to move the workloads
    to the cloud. For deploying web applications, Azure provides a Maven plugin that
    can push your application directly to the cloud. Refer to the following link for
    more details: [https://docs.microsoft.com/en-in/java/azure/spring-framework/deploy-spring-boot-java-app-with-maven-plugin](https://docs.microsoft.com/en-in/java/azure/spring-framework/deploy-spring-boot-java-app-with-maven-plugin).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何将现有的REST API应用程序部署到Azure。这不是部署的最简单和最佳方式。这个选项更多的是一种搬迁，我们将现有的应用程序迁移到云中。对于部署Web应用程序，Azure提供了一个Maven插件，可以直接将您的应用程序推送到云中。有关更多详细信息，请参阅以下链接：[https://docs.microsoft.com/en-in/java/azure/spring-framework/deploy-spring-boot-java-app-with-maven-plugin](https://docs.microsoft.com/en-in/java/azure/spring-framework/deploy-spring-boot-java-app-with-maven-plugin)。
- en: The REST API is deployed on a Windows Server VM. Azure is adding support for
    Java applications, but their forte remains .NET applications.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: REST API部署在Windows Server VM上。Azure正在增加对Java应用程序的支持，但它们的长处仍然是.NET应用程序。
- en: If you want to make use of Linux and deploy your REST API applications, you
    have the option of using Docker-based deployments. We will cover Docker-based
    deployment in the next section.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用Linux并部署REST API应用程序，您可以选择使用基于Docker的部署。我们将在下一节介绍基于Docker的部署。
- en: Deploying Docker containers to Azure Container Service
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Docker容器部署到Azure容器服务
- en: 'Let''s deploy our Docker container applications. I have created Docker images
    for the `product` API example used in the previous section. The Docker image can
    be pulled from the Docker hub through the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们部署我们的Docker容器应用程序。我已经为上一节中使用的“产品”API示例创建了Docker镜像。可以通过以下命令从Docker hub拉取Docker镜像：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s get started and log into the Azure portal. We should see the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始并登录到Azure门户。我们应该看到以下内容：
- en: 'Click on the App Services menu item in the left-hand column. We should see
    the following screen. Click on New as indicated in the screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧栏的“应用服务”菜单项。我们应该看到以下屏幕。点击“新建”，如截图所示：
- en: '![](img/ddabfc10-2db1-410f-b43b-25921443cd22.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddabfc10-2db1-410f-b43b-25921443cd22.png)'
- en: 'Under New search for `Web App for Containers`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建”中搜索“Web App for Containers”：
- en: '![](img/22d28f9f-ef11-48b2-864d-19bb66be4724.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22d28f9f-ef11-48b2-864d-19bb66be4724.png)'
- en: 'Once the Web App for Containers is selected, click on Create as indicated:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Web App for Containers后，点击“创建”如指示的那样：
- en: '![](img/72ab0c88-bdfe-4b2c-9cf0-f4f6a8e158ea.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72ab0c88-bdfe-4b2c-9cf0-f4f6a8e158ea.png)'
- en: Select Create by navigating through App Services | Add | Web App
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过App Services | 添加 | Web App导航选择创建
- en: 'We will fill in the details for our `product` API container:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将填写我们的`product` API容器的详细信息：
- en: I have filled in the App Name and Resource Group as `ch10productContainer` and
    left the other options at the default.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我已经填写了应用程序名称和资源组为`ch10productContainer`，并将其他选项保持默认。
- en: In the Configure container section, we select the container repository. If there
    is already a Docker image in Docker hub, provide the image pull tag, `cloudnativejava/ch10productapi`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“配置容器”部分，我们选择容器存储库。如果Docker hub中已经有Docker镜像，请提供镜像拉取标签`cloudnativejava/ch10productapi`。
- en: Click OK at the bottom of the page. It validates the image.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的“确定”。它会验证图像。
- en: 'Next, we click Create at the bottom of the page:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们点击页面底部的“创建”：
- en: '![](img/6112a303-5635-4575-91b3-cad71f75e9b7.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6112a303-5635-4575-91b3-cad71f75e9b7.png)'
- en: Select Create by navigating through Azure portal | New | search for `Web App
    for Containers`
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Azure门户导航选择创建|新建|搜索“Web App for Containers”
- en: 'This leads to the creation of the App Service:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建应用服务：
- en: '![](img/3e41b4f7-c4cf-400e-ae94-2a12bdd29694.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e41b4f7-c4cf-400e-ae94-2a12bdd29694.png)'
- en: Select Newly created app container by navigating through Azure portal | App
    Services
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Azure门户导航选择新创建的应用程序容器|应用服务
- en: We click on `ch10productcontainer` under App Services, which takes us to the
    menu where we can see the marked URL, `https://ch10productcontainer.azurewebsites.net`, where
    the container is available.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们点击App Services下的`ch10productcontainer`，这将带我们到菜单，我们可以看到标记的URL，`https://ch10productcontainer.azurewebsites.net`，容器可用的地方。
- en: '![](img/94c17e67-6c28-4522-be1d-2fd4c65f88d9.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94c17e67-6c28-4522-be1d-2fd4c65f88d9.png)'
- en: The URL where the host docker application can be accessed
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 主机Docker应用程序可以访问的URL
- en: 'We can see our `product` API running in the browser:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在浏览器中看到我们的`product` API正在运行：
- en: '![](img/b933045b-f5a6-4d37-8d26-f7c24d7e92e4.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b933045b-f5a6-4d37-8d26-f7c24d7e92e4.png)'
- en: This is an easy way to deploy your application to the cloud platform. In both
    the previous scenarios we have not used any of the specialized applications or
    data store services. For a true cloud-native application, we need to make use
    of the platform services provided by the provider. The whole idea is that the
    heavy lifting in terms of application scalability and availability is handled
    by the native platform. We, as developers, focus on building the key business
    functionality and integration with other components.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将您的应用程序部署到云平台的一种简单方法。在前面的两种情况下，我们都没有使用任何专门的应用程序或数据存储服务。对于真正的云原生应用程序，我们需要利用提供者提供的平台服务。整个想法是应用程序的可扩展性和可用性方面的重要工作由本地平台处理。我们作为开发人员，专注于构建关键的业务功能和与其他组件的集成。
- en: Deploying Spring Boot API to Azure Service Fabric
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring Boot API部署到Azure Service Fabric
- en: Building and deploying applications to the underlying IaaS platform is how most
    organizations start working with public cloud providers. As the level of comfort
    and maturity of cloud processes increases, the application starts getting built
    with PaaS features. So, applications start consisting of queuing, eventing, hosted
    data stores, security, and other features of the platform services.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和部署应用程序到基础IaaS平台是大多数组织开始与公共云提供商合作的方式。随着云流程的舒适度和成熟度的提高，应用程序开始具备PaaS功能。因此，应用程序开始包括排队、事件处理、托管数据存储、安全性和其他平台服务的功能。
- en: But a key question remains with regards to non-functional requirements. Who
    will think of the abilities of the application?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，关于非功能需求，一个关键问题仍然存在。谁会考虑应用程序的能力？
- en: How do I make sure there are enough application instances running?
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确保有足够的应用程序实例在运行？
- en: What happens when an instance goes down?
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当实例宕机时会发生什么？
- en: How does the application scale up/down depending on the incoming traffic?
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序如何根据流量的增减而扩展/缩减？
- en: How do we monitor all the running instances?
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何监视所有运行的实例？
- en: How do we manage distributed stateful services?
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何管理分布式有状态服务？
- en: How do we perform rolling upgrades to the deployed services?
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何对部署的服务执行滚动升级？
- en: In comes the orchestration engines. Products such as Kubernetes, Mesos, and
    the Docker swarm provide the ability to manage the application containers. Azure
    has released Service Fabric, which is application/container management software
    for your application. It can be run on-premises or in the cloud.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 编排引擎登场。诸如Kubernetes、Mesos和Docker Swarm等产品提供了管理应用程序容器的能力。Azure发布了Service Fabric，这是用于应用程序/容器管理的软件。它可以在本地或云中运行。
- en: 'Service Fabric provides the following key functions:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Service Fabric提供以下关键功能：
- en: Allows you to deploy applications that can scale massively and provide a self-healing
    platform
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许您部署可以大规模扩展并提供自愈平台的应用程序
- en: Allows you to install/deploy both stateful and stateless microservice-based
    applications
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许您安装/部署有状态和无状态的基于微服务的应用程序
- en: Provides dashboards to monitor and diagnose the health of applications
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供监视和诊断应用程序健康状况的仪表板
- en: Defines policies for automatic repair and upgrades
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义自动修复和升级的策略
- en: In the current version, Service Fabric supports two underlying operating systems—flavors
    of Windows Server and Ubuntu 16.04 only. Your best bet is a Windows Server cluster,
    as the support, tooling, and documentation is the best.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本中，Service Fabric支持两种基础操作系统——Windows Server和Ubuntu 16.04的版本。最好选择Windows
    Server集群，因为支持、工具和文档是最好的。
- en: For demoing the features and usage of the Service Fabric, I will make use of
    an Ubuntu image for local testing, and Service Fabric party cluster for online
    deployment of our `product` API example in the Service Fabric cluster. We will
    also examine how to scale the application instances, and self-healing features
    of the Service Fabric.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示Service Fabric的功能和用法，我将使用Ubuntu镜像进行本地测试，并使用Service Fabric party集群将我们的`product`
    API示例在线部署到Service Fabric集群。我们还将研究如何扩展应用程序实例和Service Fabric的自愈功能。
- en: Basic environment setup
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本环境设置
- en: 'For the environment, I am using a macOS machine. We need to set up the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是macOS机器。我们需要设置以下内容：
- en: 'Local Service Fabric cluster setup—pull a Docker image:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地Service Fabric集群设置——拉取Docker镜像：
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Update the Docker daemon configuration on your host with the following additional
    settings and restart the Docker daemon:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机上更新Docker守护程序配置，并重新启动Docker守护程序：
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Start the Docker image pulled down from Docker hub:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动从Docker Hub拉取的Docker镜像：
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following commands within the container shell:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在容器shell中添加以下命令：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After the last step is complete, a development Service Fabric cluster is started
    that can be accessed at `http://localhost:19080` from the browser.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 完成最后一步后，将启动一个可以从浏览器访问的开发Service Fabric集群，地址为`http://localhost:19080`。
- en: 'Now we need to set up Yeoman generators for containers and guest executables:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为容器和客户可执行文件设置Yeoman生成器：
- en: 'First, we need to make sure Node.js and **Node Package Manager** (**NPM**)
    are installed. The software can be installed by using HomeBrew, as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要确保Node.js和Node Package Manager（NPM）已安装。可以使用HomeBrew安装该软件，如下所示：
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we install the Yeoman template generator from NPM:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们从NPM安装Yeoman模板生成器：
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we install the Yeoman generator that will be used to create Service Fabric
    applications by using Yeoman. Follow these steps:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们安装将用于使用Yeoman创建Service Fabric应用程序的Yeoman生成器。按照以下步骤进行：
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To build a Service Fabric Java application on macOS, JDK version 1.8, and Gradle,
    the software must be installed on the host machine. The software can be installed
    by using Homebrew, as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在macOS上构建Service Fabric Java应用程序，主机机器必须安装JDK版本1.8和Gradle。可以使用Homebrew安装该软件，方法如下：
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That completes the environment setup. Next, we will package our `product` API
    application as a Service Fabric application to enable deployment in the cluster.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了环境设置。接下来，我们将把我们的`product` API应用程序打包为Service Fabric应用程序，以便在集群中进行部署。
- en: Packaging the product API application
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包产品API应用程序
- en: 'We log into the `product` API project (full code available at: [https://github.com/PacktPublishing/Cloud-Native-Applications-in-Java](https://github.com/PacktPublishing/Cloud-Native-Applications-in-Java))
    and run the following command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们登录到`product` API项目（完整代码可在[https://github.com/PacktPublishing/Cloud-Native-Applications-in-Java](https://github.com/PacktPublishing/Cloud-Native-Applications-in-Java)找到），并运行以下命令：
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We should get the following screen:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下屏幕：
- en: '![](img/c73b090b-cac7-4dc8-97cf-82ac59cb3602.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c73b090b-cac7-4dc8-97cf-82ac59cb3602.png)'
- en: 'We enter the following values:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入以下值：
- en: '![](img/6d4da0c7-148a-496c-b4c4-5ee8fa099559.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d4da0c7-148a-496c-b4c4-5ee8fa099559.png)'
- en: 'This will create an application package with a set of files:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含一组文件的应用程序包：
- en: '[PRE14]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we go to the `/ProductServiceFabric/ProductServiceFabric/ProductAPIPkg`
    folder.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们转到`/ProductServiceFabric/ProductServiceFabric/ProductAPIPkg`文件夹。
- en: 'Create a directory `code` and in it, create a file called `entryPoint.sh` with
    the following content:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`code`的目录，并在其中创建一个名为`entryPoint.sh`的文件，其中包含以下内容：
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Also, make sure we copy our packaged JAR (`product-0.0.1-SNAPSHOT.jar`) in this
    folder.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保将我们打包的JAR（`product-0.0.1-SNAPSHOT.jar`）复制到此文件夹中。
- en: The value of `Number of instances of guest binary` should be `1` for local environment
    developments and can be a higher number for Service Fabric clusters in the cloud.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`Number of instances of guest binary`的值应该是`1`，用于本地环境开发，对于云中的Service Fabric集群，可以是更高的数字。'
- en: Next, we will host our application in the Service Fabric cluster. We will make
    use of the Service Fabric party cluster.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在Service Fabric集群中托管我们的应用程序。我们将利用Service Fabric party集群。
- en: Starting the Service Fabric cluster
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Service Fabric集群
- en: 'We will log into [http://try.servicefabric.azure.com](https://try.servicefabric.azure.com/)
    using our Facebook or GitHub ID:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的Facebook或GitHub ID登录[http://try.servicefabric.azure.com](https://try.servicefabric.azure.com)：
- en: '![](img/762646ef-8399-4f28-bdfc-49974a7a83d8.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/762646ef-8399-4f28-bdfc-49974a7a83d8.png)'
- en: 'Join a Linux cluster:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 加入Linux集群：
- en: '![](img/af50ebad-5369-40ef-8aa6-ff410a3c9442.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af50ebad-5369-40ef-8aa6-ff410a3c9442.png)'
- en: We will be directed to the page with the cluster details. The cluster is available
    for one hour.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将被引导到包含集群详细信息的页面。该集群可用时间为一小时。
- en: 'By default, there are certain ports that are open. When we deploy our `product`
    API application, we can access the same on port `8080`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，某些端口是开放的。当我们部署我们的`product` API应用程序时，我们可以在端口`8080`上访问相同的应用程序：
- en: '![](img/35514f7b-5a6a-4802-9d95-b424e11c1b36.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35514f7b-5a6a-4802-9d95-b424e11c1b36.png)'
- en: The Service Fabric cluster explorer is available at the previously mentioned
    URL. Since the cluster uses certificate-based authentication, you will need to
    import the PFX file to your keychain.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Service Fabric集群资源管理器可在先前提到的URL上找到。由于集群使用基于证书的身份验证，您需要将PFX文件导入到您的钥匙链中。
- en: If you visit the URL, you can see the Service Fabric cluster explorer. The cluster,
    by default, comes up with three nodes. You can deploy multiple applications to
    the cluster. Based on the application settings, the cluster will manage your application
    availability.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问该URL，您可以看到Service Fabric集群资源管理器。默认情况下，该集群有三个节点。您可以将多个应用程序部署到集群中。根据应用程序设置，集群将管理您的应用程序可用性。
- en: '![](img/87f2fbfc-96ce-4174-8c61-ad8d59454d50.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87f2fbfc-96ce-4174-8c61-ad8d59454d50.png)'
- en: Azure Party Cluster default view
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Party集群默认视图
- en: Deploying the product API application to the Service Fabric cluster
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将产品API应用程序部署到Service Fabric集群
- en: For deploying our application to the cluster, we need to log into the `ProductServiceFabric`
    folder for the Service Fabric scaffolding created for the application.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的应用程序部署到为应用程序创建的Service Fabric脚手架的`ProductServiceFabric`文件夹中，我们需要登录。
- en: Connecting to the local cluster
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到本地集群
- en: 'We can connect to the local cluster here by using the following command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令在此处连接到本地集群：
- en: '[PRE16]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will connect with the Service Fabric cluster running within the Docker
    container.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这将连接到在Docker容器中运行的Service Fabric集群。
- en: Connecting to the Service Fabric party cluster
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Service Fabric party集群
- en: Since the Service Fabric party cluster uses certificate-based authentication,
    we need to download the PFX file in our working folder in `/ProductServiceFabric`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Service Fabric party集群使用基于证书的身份验证，我们需要在`/ProductServiceFabric`工作文件夹中下载PFX文件。
- en: 'Run the following commands:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE17]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we make use of the **Privacy Enhanced Mail** (**PEM**) file to connect
    to the Service Fabric party cluster:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用**隐私增强邮件**（**PEM**）文件连接到Service Fabric party集群：
- en: '[PRE18]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once we are connected to the Service Fabric cluster, we need to install our
    application by running the following command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们连接到Service Fabric集群，我们需要通过运行以下命令来安装我们的应用程序：
- en: '[PRE19]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We should see our application getting uploaded and deployed in the cluster:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到我们的应用程序被上传并部署到集群中：
- en: '![](img/8fbdad95-5b1d-4667-903d-c8739bc29670.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fbdad95-5b1d-4667-903d-c8739bc29670.png)'
- en: Install and start the Service Fabric Cluster within Docker container
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并启动Docker容器中的Service Fabric集群
- en: 'Once the application is uploaded, we can see the application in the Service
    Fabric explorer and the functionality of the application can be accessed:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序被上传，我们可以在Service Fabric资源管理器中看到应用程序，并且可以访问应用程序的功能：
- en: '![](img/6c70ae23-b56c-4978-a32f-19a49107ff02.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c70ae23-b56c-4978-a32f-19a49107ff02.png)'
- en: Observe the application deployed in the Azure Party Cluster
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 观察在Azure Party Cluster中部署的应用程序
- en: The API functionality is available at: `http://zlnxyngsvzoe.westus.cloudapp.azure.com:8080/product/2`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: API功能可在以下网址找到：`http://zlnxyngsvzoe.westus.cloudapp.azure.com:8080/product/2`。
- en: '![](img/3e6a7184-3987-4437-a48d-e06478a47f92.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e6a7184-3987-4437-a48d-e06478a47f92.png)'
- en: Verify if the API is working
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 验证API是否正常工作
- en: 'We can see how the application is deployed on one node (`_lnxvm_2`) currently.
    If we bring down that node, the application instance is automatically deployed
    on another node instance:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到应用程序当前部署在一个节点（`_lnxvm_2`）上。如果我们关闭该节点，应用程序实例将自动部署在另一个节点实例上：
- en: '![](img/75c02b81-c7ec-4d6d-b0e6-d8f13f672cf3.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75c02b81-c7ec-4d6d-b0e6-d8f13f672cf3.png)'
- en: Observe the application deployed on single node out of the available three hosts
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 观察应用程序部署在三个可用主机中的单个节点上
- en: 'Bring down the node (`_lnxvm_2`) by selecting the option in the node menu (highlighted
    in the following screenshot):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择节点菜单中的选项（在下面的截图中突出显示）来关闭节点（`_lnxvm_2`）：
- en: '![](img/4a64c641-6097-46c4-9b4f-e070cbce95a3.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a64c641-6097-46c4-9b4f-e070cbce95a3.png)'
- en: Observe the options available to disable application on the host in the Azure
    Party Cluster
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 观察在Azure Party Cluster上禁用主机的选项
- en: 'Immediately, we can see the application getting deployed on node `_lnxvm_0`
    as a self-healing model of the Cluster:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，我们可以看到应用程序作为集群的自愈模型部署在节点`_lnxvm_0`上：
- en: '![](img/89ca78f9-b18d-40fb-b61f-8d350178b27f.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89ca78f9-b18d-40fb-b61f-8d350178b27f.png)'
- en: Application getting disabled on one mode is brought up on another node with
    Service Fabric Cluster
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个节点上禁用应用程序后，它会在Service Fabric Cluster的另一个节点上启动
- en: Again, I hope the reader is intrigued enough to go ahead and explore the capabilities
    of the cluster. The support for Java applications and multiple versions of Linux
    is limited. Azure is working toward adding additional support to the platform
    to support all kinds of applications.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我希望读者足够好奇，继续探索集群的功能。对Java应用程序和多个版本的Linux的支持有限。Azure正在努力增加对平台的额外支持，以支持各种类型的应用程序。
- en: Azure cloud functions
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure云函数
- en: As we move applications to the cloud, we are using platform services to improve
    our focus on business functionality, and not worrying about application scalability.
    Serverless applications are the next frontier. The developer focus is on building
    applications, without worrying about server provisioning, availability, and scalability.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们将应用程序迁移到云端，我们正在使用平台服务来提高我们对业务功能的关注，而不用担心应用程序的可伸缩性。无服务器应用程序是下一个前沿。开发人员的重点是构建应用程序，而不用担心服务器的配置、可用性和可伸缩性。
- en: Java functions are currently in beta and are not available on the Azure portal.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Java函数目前处于测试阶段，不在Azure门户上提供。
- en: We can download and try to create Java functions on our local machines. We will
    see a brief preview of the functionality.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以下载并尝试在本地机器上创建Java函数。我们将看到功能的简要预览。
- en: Environment setup
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境设置
- en: 'The Azure Functions Core Tools SDK provides a local development environment
    for writing, running, and debugging your Java Azure Functions:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions Core Tools SDK为编写、运行和调试Java Azure Functions提供了本地开发环境：
- en: '[PRE20]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating a new Java functions project
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Java函数项目
- en: 'Let''s create a sample Java functions project. We will make use of the following
    Maven archetype to generate the dummy project structure:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例Java函数项目。我们将利用以下Maven原型来生成虚拟项目结构：
- en: '[PRE21]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We run the `mvn` command to provide the requisite inputs:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行`mvn`命令来提供必要的输入：
- en: '[PRE22]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Building and running the Java function
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和运行Java函数
- en: 'Let''s go ahead and build the package:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续构建包：
- en: '[PRE23]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we can run the function as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以按以下方式运行函数：
- en: '[PRE24]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can see the function getting started in the following image:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下图像中看到函数的启动：
- en: '![](img/e4fbf658-89f7-4ef1-91c7-c66006a45afa.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4fbf658-89f7-4ef1-91c7-c66006a45afa.png)'
- en: Building your Java cloud function
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 构建您的Java云函数
- en: 'The default function is available at the following URL:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 默认函数可在以下网址找到：
- en: '[PRE25]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we go to `http://localhost:7071/api/hello?name=cloudnative` we can see the
    output from the function:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问`http://localhost:7071/api/hello?name=cloudnative`，我们可以看到函数的输出：
- en: '![](img/dcabf483-0ca5-42dc-8ca1-0ad0a1bf313b.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcabf483-0ca5-42dc-8ca1-0ad0a1bf313b.png)'
- en: Diving into code
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入代码
- en: 'If we delve into the code, we can see the main code file where the default
    function `hello` is defined:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们深入代码，我们可以看到主要的代码文件，其中定义了默认函数`hello`：
- en: '![](img/7bf8fd82-eea1-4f5f-915e-4dc7ccf22afd.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bf8fd82-eea1-4f5f-915e-4dc7ccf22afd.png)'
- en: The method is annotated with `@HttpTrigger`, where we have defined the name
    of the trigger, methods allowed, authorization model used, and so on.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法使用`@HttpTrigger`进行注释，我们在其中定义了触发器的名称、允许的方法、使用的授权模型等。
- en: 'When the function is compiled, it results in a `function.json` where the function
    bindings are defined:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数编译时，会生成一个`function.json`文件，其中定义了函数绑定。
- en: '[PRE26]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can see both input and output data bindings. Functions have exactly one
    trigger. Triggers are fired with some associated data, which is usually the payload
    that triggers the function.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到输入和输出数据绑定。函数只有一个触发器。触发器会携带一些相关数据触发函数，通常是触发函数的有效负载。
- en: Input and output bindings are a declarative way to connect to data from within
    your code. Bindings are optional and a function can have multiple input and output
    bindings.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 输入和输出绑定是一种声明性的方式，用于在代码内部连接数据。绑定是可选的，一个函数可以有多个输入和输出绑定。
- en: You can develop functions by using the Azure portal. Triggers and bindings are
    directly configured in a `function.json` file.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过Azure门户开发函数。触发器和绑定直接在`function.json`文件中配置。
- en: Java functions are still a preview feature. The feature set is still under beta
    and documentation is scant. We will need to wait for Java to become a first-class
    citizen in the world of Azure Functions.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Java函数仍然是一个预览功能。功能集仍处于测试阶段，文档很少。我们需要等待Java在Azure Functions的世界中成为一流公民。
- en: That brings us to the end of platform development using Azure.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们使用Azure进行平台开发的结束。
- en: Summary
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw the various features and services provided by the Azure
    cloud platform. As we take our applications into a cloud-native model, we move
    from App Service | Container Service | Service Fabric | serverless model (Cloud
    Functions). When we build greenfield applications, we skip the initial steps and
    directly adopt platform services, allowing automatic application scalability and
    availability management.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了Azure云平台提供的各种功能和服务。当我们将应用程序转移到云原生模型时，我们从应用服务|容器服务|服务布置|无服务器模型（云函数）中转移。当我们构建全新的应用程序时，我们跳过初始步骤，直接采用平台服务，实现自动应用程序可伸缩性和可用性管理。
- en: In the next chapter, we will cover the various types of XaaS APIs, which includes
    IaaS, PaaS, iPaaS, and DBaaS. We will cover the architecture and design concerns
    when building your own XaaS.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍各种类型的XaaS API，包括IaaS、PaaS、iPaaS和DBaaS。我们将介绍在构建自己的XaaS时涉及的架构和设计问题。
