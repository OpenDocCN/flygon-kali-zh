- en: Improving Performance with Lazy Initialization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用懒惰初始化提高性能
- en: In the last chapter, we discussed thread-safe concurrent collections in C#.
    Concurrent collections help to improve the performance of parallel code without
    having a developer worry about synchronization overheads.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了C#中线程安全的并发集合。并发集合有助于提高并行代码的性能，而不需要开发人员担心同步开销。
- en: 'In this chapter, we will discuss some more concepts that help to improve the
    performance of code, both using custom implementations as well as using built-in
    constructs. Here are the topics we are going to discuss during this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论一些更多的概念，这些概念有助于改善代码的性能，既可以使用自定义实现，也可以使用内置结构。以下是本章将讨论的主题：
- en: Introduction to lazy initialization concepts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 懒惰初始化概念介绍
- en: Introduction to `System.Lazy<T>`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍`System.Lazy<T>`
- en: How to handle exceptions with the lazy pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理懒惰模式下的异常
- en: Lazy initialization with thread-local storage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用线程本地存储进行懒惰初始化
- en: Reducing the overhead with lazy initializations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过懒惰初始化减少开销
- en: Let's get started by introducing the lazy initialization pattern.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过引入懒惰初始化模式开始。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a good understanding of TPL and C#. The source code for
    this chapter is available on GitHub at [https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter07](https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter07).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该对TPL和C#有很好的理解。本章的源代码可在GitHub上找到：[https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter07](https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter07)。
- en: Introducing lazy initialization concepts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍懒惰初始化概念
- en: Lazy loading is a commonly used design pattern in application programming wherein
    we defer the creation of an object until it is actually required in an application.
    Proper use of the lazy load pattern can significantly improve the performance
    of the application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载是应用程序编程中常用的设计模式，其中我们推迟对象的创建，直到在应用程序中实际需要它。正确使用懒加载模式可以显著提高应用程序的性能。
- en: 'One of the common usages of this pattern can be seen in cache aside patterns.
    We use the cache aside pattern for objects whose creation is expensive either
    in terms of resources or memory. Instead of creating them multiple times, we create
    objects once and cache them for future use. This pattern is possible when the
    initialization of an object is moved out of the constructor to the method or properties.
    The object will only be initialized when the method or property is called for
    the first time by code. It will then be cached for subsequent calls. Take a look
    at the following code sample that initializes the underlying data member in the
    constructor:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式的常见用法之一可以在缓存旁路模式中看到。我们使用缓存旁路模式来创建对象，这些对象的创建在资源或内存方面都很昂贵。我们不是多次创建它们，而是创建一次并将它们缓存以供将来使用。当对象的初始化从构造函数移动到方法或属性时，这种模式就成为可能。只有在代码首次调用方法或属性时，对象才会被初始化。然后它将被缓存以供后续调用。看一下以下代码示例，它在构造函数中初始化底层数据成员：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The problem with the preceding code is that the underlying data is initialized
    as soon as the object is created, even though the underlying object can only be
    accessed by calling the `GetOrCreate()` method. The program might not even call
    the method in some scenarios and so memory gets wasted.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码问题在于，即使只有通过调用`GetOrCreate()`方法才能访问底层对象，但底层数据在对象创建时就被初始化了。在某些情况下，程序甚至可能不会调用该方法，因此会浪费内存。
- en: 'Lazy loading can be implemented entirely using custom code, as shown in the
    following code sample:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载可以完全使用自定义代码实现，如下面的代码示例所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see from the preceding code, we moved the initialization logic out
    from the constructor to the `GetOrCreate()` method, which checks whether the item
    is in the cache before returning it to the caller. Data is initialized if it is
    not present in the cache.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中可以看出，我们将初始化逻辑从构造函数移出到`GetOrCreate()`方法中，该方法在返回给调用者之前检查项目是否在缓存中。如果缓存中不存在，数据将被初始化。
- en: 'Here is the code calling the preceding method:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是调用前面方法的代码：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will be as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/faf9b818-9c45-4d43-934f-72ff2a95e511.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faf9b818-9c45-4d43-934f-72ff2a95e511.png)'
- en: The preceding code, although lazy, has the potential problem of multiloading.
    This means the call to the database might run multiple times if the `GetOrCreate()`
    method is called by multiple threads at the same time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码虽然懒惰，但可能存在多重加载的问题。这意味着如果多个线程同时调用`GetOrCreate()`方法，数据库的调用可能会运行多次。
- en: 'This can be improved by introducing locking, as shown in the following code
    example. For the cache aside pattern, it makes sense to use another pattern, double-checked
    locking:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过引入锁定来改进，如下面的代码示例所示。对于缓存旁路模式，使用另一种模式，双重检查锁定，是有意义的：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code is self-explanatory. We can see that it is complex to create
    a lazy pattern from scratch. Fortunately, .NET Framework provides data structures
    for the lazy pattern.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码是自解释的。我们可以看到从头开始创建懒惰模式是复杂的。幸运的是，.NET Framework提供了懒惰模式的数据结构。
- en: Introducing System.Lazy<T>
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入System.Lazy<T>
- en: .NET Framework provides a `System.Lazy<T>` class that has all of the benefits
    of lazy initialization without the need to worry about synchronization overheads.
    Objects created using `System.Lazy<T>` are deferred until they are accessed for
    the first time. With the custom lazy code explained in previous sections, we can
    see that we moved the initialization part from the constructor to the method/property
    to support lazy initialization. With `Lazy<T>`, we don't need to modify any code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework提供了`System.Lazy<T>`类，具有懒惰初始化的所有好处，而无需担心同步开销。使用`System.Lazy<T>`创建的对象直到首次访问时才被延迟创建。通过前面部分解释的自定义懒惰代码，我们可以看到，我们将初始化部分从构造函数移动到方法/属性以支持懒惰初始化。使用`Lazy<T>`，我们不需要修改任何代码。
- en: 'There are multiple ways to implement lazy initialization patterns in C#. These
    include the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中有多种实现延迟初始化模式的方法。其中包括以下内容：
- en: Construction logic encapsulated inside a constructor
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装在构造函数中的构造逻辑
- en: Construction logic passed as a delegate to `Lazy<T>`
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将构造逻辑作为委托传递给`Lazy<T>`
- en: In the subsequent sections, we will try to understand these scenarios in depth.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将深入了解这些情景。
- en: Construction logic encapsulated inside a constructor
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 封装在构造函数中的构造逻辑
- en: 'Let''s first try to implement the lazy initialization pattern with classes
    that encapsulate construction logic in the constructor. Let''s say we have a `Data`
    class:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先尝试使用封装构造逻辑的类来实现延迟初始化模式。假设我们有一个`Data`类：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, the initialization happens inside the constructor. If we use
    this class normally, using the following code, the object is initialized at the
    moment the `DataWrapper` object is created:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，初始化发生在构造函数内部。如果我们正常使用这个类，使用以下代码，对象在创建`DataWrapper`对象时被初始化：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/10b3be2a-9ff6-4517-b948-a390238f9752.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10b3be2a-9ff6-4517-b948-a390238f9752.png)'
- en: 'The preceding code can be converted using `Lazy<T>` as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`Lazy<T>`将上述代码转换如下：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, rather than creating an object directly, we wrapped it inside
    the lazy class. The constructor won''t be called until we access the `Value` property
    of the `Lazy` object, as you can see from the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们将对象包装在延迟类中，而不是直接创建对象。在访问`Lazy`对象的`Value`属性之前，构造函数不会被调用，如下面的输出所示：
- en: '![](img/c95f76e1-5465-41e6-b32b-742810896655.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c95f76e1-5465-41e6-b32b-742810896655.png)'
- en: Construction logic passed as a delegate to Lazy<T>
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将构造逻辑作为委托传递给Lazy<T>
- en: 'Objects often don''t hold construction logic as they are plain data models.
    We need to fetch data the first time the lazy objects are accessed while also
    passing the logic to fetch the data. This can be made possible using another overload
    of `System.Lazy<T>`, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对象通常不包含构造逻辑，因为它们只是简单的数据模型。我们需要在首次访问延迟对象时获取数据，同时还要传递获取数据的逻辑。这可以通过`System.Lazy<T>`的另一个重载来实现，如下所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following code, we are creating a `Lazy<Data>` object by passing the `Func<Data>`
    delegate:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们通过传递`Func<Data>`委托来创建一个`Lazy<Data>`对象：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see from the preceding code, we passed `Func<T>` to the `Lazy<T>`
    constructor. The logic gets called on the first access to the `Value` property
    of the `Lazy<T>` instance, as shown in the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码中可以看出，我们将`Func<T>`传递给`Lazy<T>`构造函数。逻辑在第一次访问`Lazy<T>`实例的`Value`属性时被调用，如下面的输出所示：
- en: '![](img/b0b1007b-a213-4b55-93ed-3b66ef79176e.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0b1007b-a213-4b55-93ed-3b66ef79176e.png)'
- en: In addition to having a good idea about how to construct and use lazy objects
    in .NET, we also need to understand how to handle exceptions with lazy initialization
    patterns! Let's see the following section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对.NET中的延迟对象进行构造和使用有一个好的理解之外，我们还需要了解如何处理延迟初始化模式中的异常！让我们看看下一节。
- en: Handling exceptions with the lazy initialization pattern
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用延迟初始化模式处理异常
- en: 'Lazy objects are immutable by design. This means that they always return the
    same instance that they were initialized with. We have seen that we can pass initialization
    logic to `Lazy<T>` and that we can have initialization logic in the underlying
    object''s constructor. What will happen if the construction/initialization logic
    is faulty and throws an exception? The behavior of `Lazy<T>` in this scenario
    depends on the value of the `LazyThreadSafetyMode` enumeration and your choice
    of `Lazy<T>` constructor. There are many ways to handle exceptions while working
    with lazy patterns. Some of these are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Lazy对象是不可变的。这意味着它们总是返回与初始化时相同的实例。我们已经看到可以将初始化逻辑传递给`Lazy<T>`，并且可以在底层对象的构造函数中有初始化逻辑。如果构造/初始化逻辑有错误并抛出异常会发生什么？在这种情况下，`Lazy<T>`的行为取决于`LazyThreadSafetyMode`枚举的值和您选择的`Lazy<T>`构造函数。在使用延迟模式时，有许多处理异常的方法。其中一些如下：
- en: No exceptions occur during initialization
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在初始化过程中不会发生异常
- en: Random exception while initialization with exception caching
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在异常缓存的情况下进行初始化时发生随机异常
- en: Not caching exceptions
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不缓存异常
- en: In the subsequent sections, we will try to understand these scenarios in depth.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将深入了解这些情景。
- en: No exceptions occur during initialization
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在初始化过程中不会发生异常
- en: The initialization logic runs once and the object is cached to be returned with
    subsequent access to the `Value` property. We have already seen this behavior
    while explaining `Lazy<T>` in a previous section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化逻辑只运行一次，并且对象被缓存以便在后续访问`Value`属性时返回。我们在前面的部分已经看到了这种行为，解释了`Lazy<T>`。
- en: Random exception while initialization with exception caching
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在异常缓存的情况下进行初始化时发生随机异常
- en: In this case, since the underlying object is not created, the initialization
    logic will run on every call to the `Value` property. This is helpful in scenarios
    where the construction logic depends on external factors such as an internet connection
    while calling the external service. If the internet goes down momentarily, then
    the initialization call will fail, but subsequent calls can return the data. By
    default, `Lazy<T>` will cache exceptions for all parameterized constructor implementations,
    but it will not cache exceptions for the parameter less constructor implementation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于底层对象没有被创建，所以初始化逻辑将在每次调用`Value`属性时运行。这在构造逻辑依赖于外部因素（如调用外部服务时的互联网连接）的情况下非常有用。如果互联网暂时中断，那么初始化调用将失败，但后续调用可以返回数据。默认情况下，`Lazy<T>`将为所有带参数的构造函数实现缓存异常，但不会为不带参数的构造函数实现缓存异常。
- en: 'Let''s try to understand what happens when `Lazy<T>` initialization logic throws
    a random exception:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试理解当`Lazy<T>`初始化逻辑抛出随机异常时会发生什么：
- en: 'First, we create `Lazy<Data>` with the initialization logic provided by the
    `GetDataFromDatabase()` function, as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用`GetDataFromDatabase()`函数提供的初始化逻辑创建`Lazy<Data>`，如下所示：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we access the `Value` property of `Lazy<Data>`, which will execute the
    initialization logic and throw an exception since the value of the counter is
    `0`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们访问`Lazy<Data>`的`Value`属性，这将执行初始化逻辑并抛出异常，因为计数器的值为`0`：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we increment the counter by one and again try to access the `Value` property.
    According to the logic, this time, it should return the `Data` object, but we
    see that the code again throws an exception:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将计数器加一，然后再次尝试访问`Value`属性。根据逻辑，这次应该返回`Data`对象，但我们看到代码再次抛出异常：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, the exception is thrown a second time, even though we increased
    the counter by one. This is because the exception value was cached and returned
    the next time the `Value` property is accessed. The output is shown as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，即使我们将计数器增加了一次，异常仍然被抛出第二次。这是因为异常值被缓存，并在下次访问`Value`属性时返回。输出如下所示：
- en: '![](img/1dd3d59a-bef7-47ac-8e3c-522c395924db.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1dd3d59a-bef7-47ac-8e3c-522c395924db.png)'
- en: 'The preceding behavior is the same as creating `Lazy<T>` by passing `System.Threading.LazyThreadSafetyMode.None`
    as a second parameter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述行为与通过将`System.Threading.LazyThreadSafetyMode.None`作为第二个参数创建`Lazy<T>`相同：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Not caching exceptions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不缓存异常
- en: 'Let''s change the initialization of `Lazy<Data>` in the preceding code to the
    following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将上述代码中`Lazy<Data>`的初始化更改为以下内容：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will allow the initialization logic to be run multiple times by different
    threads until one of the threads succeeds in running the initialization without
    any errors. If any thread throws an error during the initialization process in
    a multithreaded scenario, then all instances of the underlying object created
    by the completed threads are discarded and the exception is propagated to the
    `Value` property. In the case of a single thread, an exception will return when
    the initialization logic is re-run upon subsequent access of the `Value` property.
    The exceptions are not cached.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许初始化逻辑在不同线程中多次运行，直到其中一个线程成功运行初始化而没有任何错误。如果在多线程场景中的初始化过程中任何线程抛出错误，则由已完成的线程创建的基础对象的所有实例都将被丢弃，并且异常将传播到`Value`属性。在单线程的情况下，当再次访问`Value`属性时，初始化逻辑重新运行时会返回异常。异常不会被缓存。
- en: 'The output is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](img/4570a390-8e22-42d4-945b-8f097b577765.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4570a390-8e22-42d4-945b-8f097b577765.png)'
- en: After seeing how to handle exceptions with the lazy initialization pattern,
    let's now learn about the usage of thread-local storage for lazy initialization.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了延迟初始化模式处理异常的方法之后，现在让我们学习一下使用线程本地存储进行延迟初始化。
- en: Lazy initialization with thread-local storage
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用线程本地存储进行延迟初始化
- en: 'In multithreaded programming, we often want to create a variable that is local
    to a thread, which means that each thread will have its own copy of the data.
    This holds true for all local variables, but global variables are always shared
    across threads. In old versions of .NET, we used the `ThreadStatic` attribute
    to make a static variable behave as a thread-local variable. However, this is
    not foolproof and doesn''t work well with initialization. If we are initializing
    a `ThreadStatic` variable, then only the first thread gets the initialized value,
    whereas the rest of the threads get the default value of the variable, which is
    0 in the case of an integer. This can be demonstrated using the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程编程中，我们经常希望创建一个局部于线程的变量，这意味着每个线程都将拥有数据的自己的副本。这对于所有局部变量都成立，但全局变量始终在各个线程之间共享。在旧版本的.NET中，我们使用`ThreadStatic`属性使静态变量表现为线程本地变量。然而，这并不是绝对可靠的，并且在初始化方面效果不佳。如果我们初始化一个`ThreadStatic`变量，那么只有第一个线程获得初始化的值，而其余线程获得变量的默认值，在整数的情况下为0。可以使用以下代码进行演示：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding code, we initialized a static `counter` variable with a value
    of `1` and made it thread static so that every thread can have its own copy. For
    demonstration purposes, we created 10 tasks that print the value of the counter.
    According to the logic, all threads should print 1, but as you can see from the
    following output, only one thread prints 1, and the rest print 0:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用值为`1`的静态`counter`变量进行初始化，并将其线程静态化，以便每个线程都可以拥有自己的副本。为了演示目的，我们创建了10个任务，打印计数器的值。根据逻辑，所有线程应该打印1，但如下输出所示，只有一个线程打印1，其余线程打印0：
- en: '![](img/dcd89412-e4cb-4589-b82e-fc44809811c3.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcd89412-e4cb-4589-b82e-fc44809811c3.png)'
- en: '.NET Framework 4 provides `System.Threading.ThreadLocal<T>` as an alternative
    to `ThreadStatic` and works more like `Lazy<T>`. Using `ThreadLocal<T>`, we can
    create a thread-local variable that can be initialized by passing an initialization
    function, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework 4提供了`System.Threading.ThreadLocal<T>`作为`ThreadStatic`的替代方案，并且更像`Lazy<T>`。使用`ThreadLocal<T>`，我们可以创建一个可以通过传递初始化函数进行初始化的线程本地变量，如下所示：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output is as expected:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如预期的那样：
- en: '![](img/9dcdd5eb-679d-4f1a-a805-70f919680586.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dcdd5eb-679d-4f1a-a805-70f919680586.png)'
- en: 'The differences between `Lazy<T>` and `ThreadLocal<T>` are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Lazy<T>`和`ThreadLocal<T>`之间的区别如下：'
- en: Each thread initializes the `ThreadLocal` variable using its own private data
    whereas, in the case of `Lazy<T>`, the initialization logic only runs once.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个线程都使用自己的私有数据初始化`ThreadLocal`变量，而在`Lazy<T>`的情况下，初始化逻辑只运行一次。
- en: Unlike `Lazy<T>`, the `Value` property in `ThreadLocal<T>` is read/write.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与`Lazy<T>`不同，`ThreadLocal<T>`中的`Value`属性是可读/写的。
- en: In the absence of any initialization logic, the default value of `T` will be
    assigned to the `ThreadLocal` variable.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在没有任何初始化逻辑的情况下，默认值`T`将被分配给`ThreadLocal`变量。
- en: Reducing the overhead with lazy initializations
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过延迟初始化减少开销
- en: '`Lazy<T>` uses a level of indirection by wrapping the underlying object. This
    can cause computational as well as memory issues. To avoid wrapping objects, we
    can use the static variant of `Lazy<T>` class, which is the `LazyInitializer`
    class.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Lazy<T>`通过包装底层对象使用了一定程度的间接性。这可能会导致计算和内存问题。为了避免包装对象，我们可以使用`Lazy<T>`类的静态变体，即`LazyInitializer`类。'
- en: We can use `LazyInitializer.EnsureInitialized` to initialize a data member that
    is passed via a reference as well as an initialization function, like we did with
    `Lazy<T>`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`LazyInitializer.EnsureInitialized`来初始化通过引用传递的数据成员以及初始化函数，就像我们使用`Lazy<T>`一样。
- en: 'The method can be called via multiple threads, but once a value is initialized,
    it will be used as a result for all of the threads. For the sake of demonstration,
    I have added a line to the console inside the initialization logic. Though the
    loop runs 10 times, the initialization will happen only once for single-thread
    execution:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法可以通过多个线程调用，但一旦值被初始化，它将作为所有线程的结果使用。为了演示起见，我在初始化逻辑中添加了一行到控制台。虽然循环运行10次，但初始化将仅在单线程执行一次：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is the output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/d3ec9d21-2259-45d7-9a8b-bfb5f6bf8355.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3ec9d21-2259-45d7-9a8b-bfb5f6bf8355.png)'
- en: 'This is good for sequential execution. Let''s try to modify the code and run
    it via multiple threads:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于顺序执行是很好的。让我们尝试修改代码并通过多个线程运行它：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is the output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![](img/6585d753-f0d7-47f2-a557-44db26b953d8.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6585d753-f0d7-47f2-a557-44db26b953d8.png)'
- en: 'As you can see, with multiple threads, there is a race condition and all threads
    end up initializing the data. We can avoid this race condition by modifying the
    program as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用多个线程会出现竞争条件，所有线程最终都会初始化数据。我们可以通过修改程序来避免这种竞争条件：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see from the preceding code, we have used an overload of the `EnsureInitialized`
    method and passed a Boolean variable and a `SyncLock` object as a parameter. This
    will ensure that the initialization logic can be executed only by one thread at
    a time, as demonstrated in the following output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码中可以看出，我们使用了`EnsureInitialized`方法的一个重载，并传递了一个布尔变量和一个`SyncLock`对象作为参数。这将确保初始化逻辑只能由一个线程执行，如下面的输出所示：
- en: '![](img/ca623fb2-493a-4413-b709-f6e1202bd876.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca623fb2-493a-4413-b709-f6e1202bd876.png)'
- en: In this section, we discussed how we can work around the overheads associated
    with `Lazy<T>` by utilizing another built-in static variant of `Lazy<T>` known
    as the `LazyInitializer` class.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何通过利用另一个内置的静态变体`Lazy<T>`，即`LazyInitializer`类，来解决与`Lazy<T>`相关的开销问题。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed various aspects of lazy loading and the data structures
    provided by .NET Framework to make lazy loading easier to implement.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了延迟加载的各个方面，以及.NET Framework提供的数据结构，使延迟加载更容易实现。
- en: Lazy loading can significantly improve the performance of applications by reducing
    memory footprints as well as saving on computing resources by stopping duplicate
    initialization. We have a choice to either create lazy from scratch using `Lazy<T>`
    or avoid complexity by using the static `LazyInitializer` class. With optimal
    usage of thread storages and good exception handling logic, these are certainly
    great tools for developers.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟加载可以通过减少内存占用和节省计算资源来显著提高应用程序的性能，因为它可以阻止重复初始化。我们可以选择使用`Lazy<T>`从头开始创建延迟加载，也可以使用静态的`LazyInitializer`类来避免复杂性。通过最佳的线程存储使用和良好的异常处理逻辑，这些工具对开发人员来说确实是很好的工具。
- en: In the next chapter, we will start discussing asynchronous programming approaches
    available in C#.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始讨论C#中可用的异步编程方法。
- en: Questions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Lazy initialization always involves creation object in the constructor.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 延迟初始化总是涉及在构造函数中创建对象。
- en: 'True'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'True'
- en: 'False'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'False'
- en: In the lazy initialization pattern, object creation is deferred until it's actually
    needed.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在延迟初始化模式中，对象的创建被推迟，直到实际需要它。
- en: 'True'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'True'
- en: 'False'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'False'
- en: Which of these can be used to create lazy objects that do not cache exceptions?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项可以用来创建不缓存异常的延迟对象？
- en: '`LazyThreadSafetyMode.DoNotCacheException`'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LazyThreadSafetyMode.DoNotCacheException`'
- en: '`LazyThreadSafetyMode.PublicationOnly`'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LazyThreadSafetyMode.PublicationOnly`'
- en: Which attribute can be used to create a variable that's local to a thread?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个属性可以用来创建一个只对线程本地的变量？
- en: '`ThreadLocal`'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ThreadLocal`'
- en: '`ThreadStatic`'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ThreadStatic`'
- en: Both
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两者
