- en: Messaging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息
- en: In this chapter, we will work with Android broadcasts and use it as a mechanism
    to receive and send messages. We will comprehend it in several steps. First, we
    will explain the mechanism that lies beneath and how to use Android broadcast
    messages. Then, we will listen for some of the most common messages. Since it's
    not enough just to listen, we will create new ones and broadcast them. Finally,
    we will meet with boot, shutdown, and network broadcast messages, so our application
    is aware of this important system event.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Android广播，并将其用作接收和发送消息的机制。我们将分步理解它。首先，我们将解释底层机制以及如何使用Android广播消息。然后，我们将监听一些最常见的消息。因为仅仅监听是不够的，我们将创建新的消息并进行广播。最后，我们将了解启动、关闭和网络广播消息，以便我们的应用程序意识到这一重要的系统事件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Android broadcasts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android广播
- en: Listening for broadcasts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听广播
- en: Creating broadcasts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建广播
- en: Listening for network events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听网络事件
- en: Understanding Android broadcasts
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Android广播
- en: Android applications can send or receive messages. Messages can be system-related
    events or custom ones defined by us. Interested parties are registered for certain
    messages by defining a proper intent filter and broadcast receiver. When a message
    is broadcast, all interested parties are notified. It is important to note that
    once you subscribe for broadcast messages (especially from the `Activity` class),
    you must unsubscribe at some point. When can we use broadcast messages? We use
    broadcast messages when we need a messaging system across our application. For
    example, imagine you started a long running process in the background. At some
    point, you want to notify multiple contexts about processing results. Broadcast
    messages are a perfect solution for this.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序可以发送或接收消息。消息可以是系统相关事件，也可以是我们定义的自定义事件。感兴趣的各方通过定义适当的意图过滤器和广播接收器来注册特定的消息。当广播消息时，所有感兴趣的各方都会收到通知。重要的是要注意，一旦你订阅了广播消息（特别是从`Activity`类），你必须在某个时候取消订阅。我们什么时候可以使用广播消息？我们在应用程序需要跨应用程序的消息系统时使用广播消息。例如，想象一下你在后台启动了一个长时间运行的进程。在某个时候，你想通知多个上下文处理结果。广播消息是这个问题的完美解决方案。
- en: System broadcasts
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统广播
- en: 'System broadcasts are the ones that are sent by the Android system when various
    system events happen. Every message we send and finally receive is wrapped in
    the `Intent` class containing information about that particular event. Each `Intent`
    must have a proper action set. For example--`android.intent.action.ACTION_POWER_CONNECTED`.
    Information about the event is represented with bundled extra data. For example,
    we may have bundled an extra string field representing particular data related
    to the event we are interested in. Let''s consider an example of charging and
    battery information. Each time the battery status changes, interested parties
    will be notified and receive a broadcast message with information about the battery
    level:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 系统广播是在发生各种系统事件时由Android系统发送的广播。我们发送和最终接收的每条消息都包装在包含有关特定事件信息的`Intent`类中。每个`Intent`必须设置适当的操作。例如--`android.intent.action.ACTION_POWER_CONNECTED`。有关事件的信息用捆绑的额外数据表示。例如，我们可能捆绑了一个额外的字符串字段，表示与我们感兴趣的事件相关的特定数据。让我们考虑一个充电和电池信息的例子。每当电池状态发生变化时，感兴趣的各方将收到通知，并接收包含电池电量信息的广播消息：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, we registered the intent filter for battery information. However,
    we did not pass an instance of broadcast receiver. Why? This is because that battery
    data is sticky. **Sticky intents** are intents that stay around for some time
    after the broadcast is performed. Registering to this data will immediately return
    the intent containing the latest data. We could also pass an instance of a broadcast
    receiver. Let''s do it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们注册了电池信息的意图过滤器。然而，我们没有传递广播接收器的实例。为什么？因为电池数据是粘性的。**粘性意图**是在广播执行后一段时间内保持存在的意图。注册到这些数据将立即返回包含最新数据的意图。我们也可以传递广播接收器的实例。让我们来做一下：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Every time the battery information changes, the receiver will perform a code
    we defined in its implementation; we could also define our receiver in the Android
    Manifest:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每当电池信息发生变化时，接收器将执行我们在其实现中定义的代码；我们也可以在Android清单中定义我们的接收器：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Listening for broadcasts
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听广播
- en: 'As we displayed in the previous example, we can receive broadcasts in one of
    the two following ways:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的例子所示，我们可以以以下两种方式之一接收广播：
- en: Registering the broadcast receiver through Android Manifest
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Android清单注册广播接收器
- en: Registering the broadcast using the `registerBroadcast()` method in the contexts
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`registerBroadcast()`方法在上下文中注册广播
- en: 'Declaring through Manifest requires the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过清单声明需要以下内容：
- en: The `<receiver>` element with `android:name` and `android:exported` parameters.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`android:name`和`android:exported`参数的`<receiver>`元素。
- en: 'The receiver must contain `intent` filters for the actions we subscribe. Take
    a look at the following example:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收器必须包含我们订阅的操作的`intent`过滤器。看看下面的例子：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the `name` attribute represents a name of our broadcast receiver
    class. Exported means that the application can or can't receive messages from
    sources outside the receiver's application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`name`属性代表我们广播接收器类的名称。导出意味着应用程序可以或不能接收来自接收器应用程序外部的消息。
- en: 'If you subclass `BroadcastReceiver`, it should look like this example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你子类化`BroadcastReceiver`，它应该像这个例子一样：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pay attention that the operations you perform in `onReceive()` method implementation
    should not take too much time. Otherwise ANR can occur!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`onReceive()`方法实现中执行的操作不应该花费太多时间。否则会发生ANR！
- en: Registering from the context
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从上下文注册
- en: 'Now we will show you an example of registering a broadcast receiver from the
    Android Context. To register the receiver you need an instance of it. Let''s say
    that our instance is `myReceiver`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将向您展示一个从Android上下文注册广播接收器的示例。要注册接收器，你需要它的一个实例。假设我们的实例是`myReceiver`：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This example will register a receiver that will listen for connectivity information.
    Since this receiver is registered from the context, it will be valid as long as
    the context from which we registered is valid. You can also use the `LocalBroadcastManager`
    class. `LocalBroadcastManager` has a purpose to register for and send broadcasts
    of intents to local objects within your process. This is the example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将注册一个接收者，用于监听连接信息。由于此接收者是从上下文中注册的，只要我们注册的上下文有效，它就是有效的。您还可以使用`LocalBroadcastManager`类。`LocalBroadcastManager`的目的是注册并向您进程中的本地对象发送意图的广播。这是例子：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To unregister, perform the following code snippet:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消注册，请执行以下代码片段：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For context subscribed receivers, it's important to pay attention to unregistering.
    For example, if we register a receiver in the `onCreate()` method of activity,
    we must unregister it in the `onDestroy()` method. If we do not do so, we will
    have a receiver leaking! Similarly, if we register in `onResume()` of our activity,
    we must unregister in `onPause()`. If we do not do this, we will register multiple
    times!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上下文订阅的接收者，重点要注意取消注册。例如，如果我们在活动的`onCreate()`方法中注册接收者，我们必须在`onDestroy()`方法中取消注册。如果我们不这样做，就会出现接收者泄漏！同样，如果我们在活动的`onResume()`中注册，我们必须在`onPause()`中取消注册。如果我们不这样做，就会多次注册！
- en: Receivers execution
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收者执行
- en: 'Code we execute in the `onReceive()` implementation is considered a foreground
    process. The broadcast receiver is active until we return from the method. The
    system will always run your code defined in the implementation, except if extreme
    memory pressure occurs. As we mentioned, you should perform short operations only!
    Otherwise, ANR can occur! A good example of executing a long running operation
    when a message is received is by starting `AsyncTask` and performing all the work
    there. Next, we will show you an example demonstrating this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`onReceive()`实现中执行的代码被视为前台进程。广播接收器在我们从该方法返回之前是活动的。系统将始终运行您在实现中定义的代码，除非发生极端的内存压力。正如我们提到的，您应该只执行短操作！否则，可能会发生ANR！当接收到消息时执行长时间运行的操作的一个很好的例子是启动`AsyncTask`并在那里执行所有工作。接下来，我们将向您展示一个演示这一点的例子：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we introduced the use of the `goAsync()` method. What does
    it do? The method returns an object of the `PendingResult` type, which represents
    a pending result from calling an `API` method. The Android system considers the
    receiver alive until we call the `finish()` method on this instance. Using this
    mechanism, it's possible to do asynchronous processing in a broadcast receiver.
    After we finish our intensive work, we call `finish()` to indicate to the Android
    system that this component can be recycled.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们介绍了`goAsync()`方法的使用。它是做什么的？该方法返回一个`PendingResult`类型的对象，表示调用`API`方法的待定结果。Android系统认为接收者在调用此实例的`finish()`方法之前是活动的。使用这种机制，可以在广播接收器中进行异步处理。在完成繁重的工作后，我们调用`finish()`来指示Android系统可以回收此组件。
- en: Sending broadcasts
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送广播
- en: 'Android has the following three ways of sending broadcast messages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Android有以下三种发送广播消息的方式：
- en: Using the `sendOrderedBroadcast(Intent, String)` method sends messages to one
    receiver at a time. Since receivers execute in order, it's possible to propagate
    a result to the next receiver. Also, it's possible to abort the broadcast so that
    it won't be passed to the rest of the receivers. We can control the order in which
    receivers are executed. We can use the `android:priority` attribute of the matching
    intent filter to prioritize.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sendOrderedBroadcast(Intent, String)`方法一次向一个接收者发送消息。由于接收者按顺序执行，可以将结果传播给下一个接收者。此外，还可以中止广播，使其不会传递给其他接收者。我们可以控制接收者执行的顺序。我们可以使用匹配意图过滤器的`android:priority`属性来设置优先级。
- en: Using the `sendBroadcast(Intent)` method sends broadcast messages to all receivers.
    The sending is not ordered.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sendBroadcast(Intent)`方法向所有接收者发送广播消息。发送是无序的。
- en: Using the `LocalBroadcastManager.sendBroadcast(Intent)` method sends broadcasts
    to receivers that are in the same application as the sender.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`LocalBroadcastManager.sendBroadcast(Intent)`方法向与发送方相同应用程序中的接收者发送广播。
- en: 'Let''s take a look at an example of sending a broadcast message to all interested
    parties:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个向所有感兴趣的方发送广播消息的例子：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We created a broadcast message containing extra data about `note` a  we created
    (title and message). All interested parties will need a proper `IntentFilter`
    instance for the action:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个包含有关我们创建的`note`（标题和消息）的额外数据的广播消息。所有感兴趣的方都需要一个适当的`IntentFilter`实例来执行操作：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Don''t get confused with starting activities and sending broadcast messages.
    The `Intent` class is used just as a wrapper for our information. These two operations
    are completely different! You can achieve the same using the local broadcast mechanism:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不要混淆启动活动和发送广播消息。`Intent`类只是用作我们信息的包装器。这两个操作完全不同！您可以使用本地广播机制来实现相同的功能：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, when we showed you the most important aspects of broadcast messaging, we
    will continue with extending our application. Journaler will send and receive
    our custom broadcast messages containing data and interact with system broadcasts,
    such as system boot, shutdown, and network.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们向您展示了广播消息的最重要方面后，我们将继续扩展我们的应用程序。Journaler将发送和接收包含数据的自定义广播消息，并与系统广播进行交互，例如系统启动、关闭和网络。
- en: Creating your own broadcast messages
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的广播消息
- en: 'As you probably remember, we did code refactoring for the `NoteActivity` class.
    Let''s show the last state we had in important parts for our further demonstration:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能记得的，我们对`NoteActivity`类进行了代码重构。让我们展示我们在重要部分的最后状态，以便进行进一步的演示：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you take a look at this again, you will notice that we sent `intent` to
    our service on the execution, but since we don''t get a return value, we just
    execute the `sendMessage()` method with Boolean `true` as its parameter. Here,
    we expected a value that represents the result of a CRUD operation, that is, success
    or failure. We will connect our service with `NoteActivity` using broadcast messages.
    Each time we insert or update the `note` broadcast, a message will be fired. Our
    listener defined in `NoteActivity` will respond to this message and trigger the
    `sendMessage()` method. Let''s update our code! Open the `Crud` interface and
    extend it with a `companion` object containing constants for an action and a CRUD
    operation result:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次查看这个，您会注意到我们在执行时向我们的服务发送了`intent`，但由于我们没有得到返回值，我们只是用布尔值`true`作为其参数执行了`sendMessage()`方法。在这里，我们期望一个代表CRUD操作结果的值，即成功或失败。我们将使用广播消息将我们的服务与`NoteActivity`连接起来。每次插入或更新`note`广播时，都会触发一个消息。我们在`NoteActivity`中定义的监听器将对此消息做出响应并触发`sendMessage()`方法。让我们更新我们的代码！打开`Crud`接口并使用包含操作和CRUD操作结果常量的`companion`对象进行扩展：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, open `DatabaseService` and extend it with a method responsible for sending
    broadcast messages on CRUD operation execution:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`DatabaseService`并扩展它，负责在执行CRUD操作时发送广播消息的方法：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We introduced a new method. Everything else is the same. We take the CRUD operation
    result and broadcast it as a message. `NoteActivity` will listen for it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了一个新方法。其他一切都一样。我们将获取CRUD操作结果并将其作为消息广播。`NoteActivity`将监听它：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This was simple and easy! We reconnected the original `sendMessage()` method
    with the CRUD operation result. In the next sections, we will consider some significant
    improvements our application can have by listening to boot, shutdown, and network
    broadcast messages.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单！我们重新连接了原始的`sendMessage()`方法与CRUD操作结果。在接下来的章节中，我们将考虑应用程序可以通过监听启动、关机和网络广播消息来进行一些重大改进。
- en: Using on boot and on shutdown broadcasts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用启动和关闭广播
- en: 'Sometimes, it''s crucial for services to run as the application starts. Also,
    sometimes it is important to do some cleanup work before we terminate it. In the
    following example, we will extend the Journaler application to listen for these
    broadcast messages and do some work. First thing that we will do is create two
    classes that extend the `BroadcastReceiver` class:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，服务在应用程序启动时运行至关重要。有时，在终止之前进行一些清理工作也很重要。在下面的示例中，我们将扩展Journaler应用程序以监听这些广播消息并进行一些工作。我们要做的第一件事是创建两个扩展`BroadcastReceiver`类的类：
- en: '`BootReceiver`: This is to handle the system boot event'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BootReceiver`：这是处理系统启动事件的'
- en: '`ShutdownReceiver`: This is to handle the system shutdown event'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ShutdownReceiver`：这是处理系统关机事件的'
- en: 'Register them in your `manifest` file as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`manifest`文件中注册它们如下：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `BootReceiver` class will be triggered when we boot or replace the application.
    Shutdown will be triggered when we turn off the device. Let''s create proper implementations.
    Open the `BootReceiver` class and define it like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`BootReceiver`类将在启动或替换应用程序时触发。关闭将在关闭设备时触发。让我们创建适当的实现。打开`BootReceiver`类并定义如下：'
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, we defined the `receiver` package for these two classes. For
    `ShutdownReceiver`, define the class like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们为这两个类定义了`receiver`包。对于`ShutdownReceiver`，请像这样定义类：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To make this work, we need to apply one more change; otherwise, the application
    will crash. Move by starting the `main` service from the `Application` class into
    the main activity `onCreate()` method. This is the first update `Journaler` class:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其工作，我们需要进行一次更改；否则，应用程序将崩溃。从`Application`类中启动`main`服务移动到主活动`onCreate()`方法中。这是`Journaler`类的第一个更新：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then extend the `MainActivity` class by appending lines at the end of the `onCreate()`
    method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过在`onCreate()`方法的末尾添加行来扩展`MainActivity`类：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Build your application and run it. First, shut down your phone and then power
    it on. Filter your Logcat so it displays only logs for your application. You should
    have this output:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用程序。首先关闭手机，然后再次开机。过滤您的Logcat，使其仅显示应用程序的日志。您应该有以下输出：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Keep in mind that, sometimes, it requires more than two minutes to receive on
    an boot event!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，有时需要超过两分钟才能接收到启动事件！
- en: Listening for network events
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听网络事件
- en: 'The last improvement we want is the ability for our application to execute
    synchronization when connectivity is established. Create a new class called in
    the same `NetworkReceiver` package. Make sure you have the implementation like
    this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要的最后一个改进是在建立连接时使我们的应用程序能够执行同步。在相同的`NetworkReceiver`包中创建一个名为的新类。确保您有以下实现：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This receiver will receive messages when a connectivity event occurs. Each
    time when we have a context and connectivity, we will bind to the service and
    trigger synchronization. Do not bother with frequent synchronization triggering
    as, in the next chapters, we will protect ourselves from it in the synchronization
    method implementation itself. Register your listener by updating the Journaler
    application class as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生连接事件时，此接收器将接收消息。每当我们有上下文和连接时，我们将绑定到服务并触发同步。不要担心频繁的同步触发，因为在接下来的章节中，我们将在同步方法的实现中保护自己免受它的影响。通过更新Journaler应用程序类来注册您的监听器如下：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Build and run your application. Turn off your connections (Wi-Fi, Mobile) and
    turn it on again. Observe the following Logcat output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用程序。关闭您的连接（Wi-Fi、移动数据）然后再次打开。观察以下Logcat输出：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use broadcast messages. We also learned how
    to listen for the system broadcast messages and the ones we create on our own.
    The Journaler application is significantly improved and has become more flexible.
    We will not stop there, but we will continue our progress through the Android
    Framework by learning new stuff and extending our code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用广播消息。我们还学习了如何监听系统广播消息以及我们自己创建的广播消息。Journaler 应用程序得到了显著改进，变得更加灵活。我们不会止步于此，而是将通过学习新知识和扩展我们的代码来继续在
    Android 框架中取得进展。
