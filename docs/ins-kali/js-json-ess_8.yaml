- en: Chapter 8. Debugging JSON
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。调试JSON
- en: JSON has grown leaps and bounds in the last few years, due to which there is
    an abundance of freely available resources to understand the JSON object we are
    working with. As we have discussed earlier, JSON can be used for multiple purposes,
    and it is important to understand the simple things that might break JSON, such
    as ignoring double quotes, or a trailing comma on the last item in the JSON object,
    or the wrong content-type being sent over by the web server. In this chapter,
    let us go over the different ways, in which we can debug, validate, and format
    JSON.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JSON在过去几年里取得了长足的发展，因此有大量免费资源可供我们了解我们正在使用的JSON对象。正如我们之前讨论过的，JSON可以用于多种目的，重要的是要了解可能破坏JSON的简单事情，比如忽略双引号，或在JSON对象中的最后一项上使用尾随逗号，或者Web服务器发送错误的内容类型。在本章中，让我们讨论一下我们可以调试、验证和格式化JSON的不同方法。
- en: Using the developer tools
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用开发者工具
- en: Almost all of the top browsers, such as Mozilla Firefox, Google Chrome, Safari,
    and Internet Explorer, have powerful debugging tools that help us understand the
    requests that are being made, and the responses that are coming back. JSON could
    either be part of the request, or be part of the response. Google Chrome, Safari
    and newer versions of Internet Explorer are shipped out with built-in developer
    tools. Firebug is a very popular web development toolkit that is available for
    Mozilla Firefox. Firebug is an external plugin and has to be installed on the
    browser; it is one of the earliest web development toolkits that was built to
    assist web developers while using Firefox.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有主流浏览器，如Mozilla Firefox，Google Chrome，Safari和Internet Explorer，都有强大的调试工具，帮助我们了解正在进行的请求和返回的响应。JSON可以是请求的一部分，也可以是响应的一部分。Google
    Chrome，Safari和较新版本的Internet Explorer都内置了开发者工具。Firebug是一个非常受欢迎的Web开发工具包，适用于Mozilla
    Firefox。Firebug是一个外部插件，必须安装在浏览器上；它是最早为了帮助Web开发人员使用Firefox而构建的Web开发工具包之一。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To install Firebug, please visit [http://getfirebug.com/](http://getfirebug.com/),
    and click on **Install Firebug** on the landing page.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Firebug，请访问[http://getfirebug.com/](http://getfirebug.com/)，并在登陆页面上点击**安装Firebug**。
- en: 'These developer tools provide access to the HTML DOM tree, and give us a real-time
    understanding of how the HTML elements are arranged on the page. The developer
    tools come with a network (or **Net**) tab that allows us to keep a track of all
    the resources such as the images, JavaScript files, CSS files, flash media, and
    any asynchronous calls that the client is making. The console window is another
    popular feature that is built into the developer tools. As the name suggests,
    this window provides us a runtime JavaScript console to test any on-the-fly scripts.
    To fire up the developer tools on Firefox, load the web page into a web browser,
    and right-click on the web page; this will give us a list of options, choose **Inspect
    Element** **with Firebug**. To load the developer tools on Google Chrome and Safari,
    right-click on a web page and click on **Inspect Element** from the list of the
    options. When working on Safari, keep in mind that the developer tools have to
    be enabled; to enable the developer tools, click on the **Safari** menu item,
    choose **Preferences** and click on the **Advanced** tab, and check **Show develop
    menu in menu Bar** to view the developer tools. On Internet Explorer, hit the
    *F12* key on your keyboard to fire up the developer tools window. In [Chapter
    4](ch04.xhtml "Chapter 4. AJAX Calls with JSON Data"), *AJAX Calls with JSON Data*,
    we made our first asynchronous call to a live web server to request the JSON data
    using jQuery. Let us use that program and debug the data using developer tools;
    for this example we will be using the Firefox web browser:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些开发者工具提供对HTML DOM树的访问，并实时了解HTML元素在页面上的排列方式。开发者工具配备了一个网络（或**Net**）选项卡，允许我们跟踪所有资源，如图像、JavaScript文件、CSS文件、Flash媒体以及客户端正在进行的任何异步调用。控制台窗口是开发者工具中的另一个受欢迎的功能。顾名思义，这个窗口为我们提供了一个运行时JavaScript控制台，用于测试任何即时脚本。要在Firefox上启动开发者工具，加载网页到浏览器中，右键单击网页；这将给我们一个选项列表，选择**使用Firebug检查元素**。要在Google
    Chrome和Safari上加载开发者工具，右键单击网页，然后从选项列表中选择**检查元素**。在使用Safari时，请记住必须启用开发者工具；要启用开发者工具，点击**Safari**菜单项，选择**首选项**，然后点击**高级**选项卡，并勾选**在菜单栏中显示开发菜单**以查看开发者工具。在Internet
    Explorer上，按下键盘上的*F12*键即可启动开发者工具窗口。在[第4章](ch04.xhtml "第4章。使用JSON数据进行AJAX调用")中，我们首次对一个实时Web服务器进行了异步调用，以请求JSON数据使用jQuery。让我们使用该程序并使用开发者工具调试数据；在本例中，我们将使用Firefox网页浏览器：
- en: '![Using the developer tools](img/6034OS_08_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: ！[使用开发者工具](img/6034OS_08_01.jpg)
- en: jquery-ajax.html
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: jquery-ajax.html
- en: 'On page load, when a user right-clicks and chooses the **Inspect Element with
    Firebug** option, the **HTML** tab is loaded up by default and the user gets to
    see the HTML DOM. In our example, we had bound a `click` event handler to the
    **Get Feed** button. Let us look at the console output after the button was clicked;
    to view the output in the console window, click on the **Console** tab:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载时，当用户右键单击并选择**使用Firebug检查元素**选项时，默认加载**HTML**选项卡，并且用户可以看到HTML DOM。在我们的示例中，我们已经将`click`事件处理程序绑定到**获取Feed**按钮。让我们看看在点击按钮后控制台输出的内容；要在控制台窗口中查看输出，点击**控制台**选项卡：
- en: '![Using the developer tools](img/6034OS_08_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: ！[使用开发者工具](img/6034OS_08_02.jpg)
- en: 'Once the response is retrieved, the JSON feed is logged into the **Response**
    tab on the console window. It is important to understand the JSON feed in order
    to parse it, and the developer tools'' console window provides us a simple way
    to analyze the JSON feed. Let us continue our research on the developer tools
    and visit the **Net** tab in Firefox, to understand how the client and the server
    communicate the content type of data that the client is expecting:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到响应，JSON源将被记录到控制台窗口的**Response**选项卡中。了解JSON源以解析它是很重要的，开发人员工具的控制台窗口为我们提供了分析JSON源的简单方法。让我们继续研究开发人员工具，并访问Firefox中的**Net**选项卡，以了解客户端和服务器如何通信以及客户端期望的数据内容类型：
- en: '![Using the developer tools](img/6034OS_08_03.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![使用开发人员工具](img/6034OS_08_03.jpg)'
- en: In the Net window, we should begin by clicking on the URL for the asynchronous
    call, which is being made to `index.php`. Once that link is clicked, in the **Headers**
    section we should observe the **Accept** header, which is expecting the `application/json`
    **Multipurpose Internet Mail Extensions** (**MIME**) type, and the **X-Requested-With**
    header is **XMLHttpRequest**, which notifies that this is an asynchronous request.
    The **Response** tab in the Net window is the same as the **Response** tab in
    the console window, and it will display the JSON feed for this request. Throughout
    this book, we have extensively used the `console.log` method that prints the data
    onto the console window, which is another helpful feature of the developer tools.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Net窗口中，我们应该首先点击异步调用的URL，该调用是向`index.php`发出的。一旦点击了该链接，在**Headers**部分，我们应该观察到**Accept**头部，它期望`application/json`的**MIME**类型，以及**X-Requested-With**头部是**XMLHttpRequest**，这表明这是一个异步请求。Net窗口中的**Response**选项卡与控制台窗口中的**Response**选项卡相同，它将显示此请求的JSON源。在本书中，我们广泛使用了`console.log`方法，该方法将数据打印到控制台窗口，这是开发人员工具的另一个有用功能。
- en: Validating JSON
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证JSON
- en: Similar to our debugging resources, there are a lot of popular web tools that
    help us with validating JSON that we build. **JSONLint** is one of the most popular
    web tools that are available for validating our JSON feeds.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的调试资源类似，有很多流行的网络工具可以帮助我们验证我们构建的JSON。**JSONLint**是最受欢迎的网络工具之一，可用于验证我们的JSON源。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we are using a server-side program such as PHP, Python, or Java, the built-in
    JSON encoding libraries generate the JSON feed, and normally the feed will be
    a valid JSON feed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用诸如PHP、Python或Java之类的服务器端程序时，内置的JSON编码库会生成JSON源，通常该源将是有效的JSON源。
- en: 'JSONLint has a very straightforward interface that allows the user to paste
    the JSON they want to validate, and returns either a success message or an error
    message based on the JSON feed that we paste. Let us begin by validating a bad
    piece of JSON to see the error message that would be returned, and then let us
    fix it to view the success message. For this example, I will copy the `students`
    feed from the previous example, and add a trailing comma at the end of the second
    element:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: JSONLint具有非常直观的界面，允许用户粘贴要验证的JSON，并根据我们粘贴的JSON源返回成功消息或错误消息。让我们从验证一个错误的JSON开始，看看会返回什么错误消息，然后让我们修复它以查看成功消息。在这个例子中，我将复制上一个例子中的`students`源，并在第二个元素的末尾添加一个逗号：
- en: '![Validating JSON](img/6034OS_08_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![验证JSON](img/6034OS_08_04.jpg)'
- en: Notice that we have added a trailing comma to the last item in our JSON object,
    and the best part about JSONLint is the descriptive error message. We have encountered
    a **Parse error**, and to make life simple, the message also gives us the line
    number where the error could be. The parser is expecting a string, or a number,
    or a null, or a Boolean value, and because we have supplied none, we are encountering
    this error. In order to fix this error, we will either have to add a new item
    to that JSON object to justify the comma, or we will have to get rid of the comma,
    as there are no items ahead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在JSON对象的最后一项中添加了一个逗号，而JSONLint最好的部分是提供了描述性的错误消息。我们遇到了一个**解析错误**，为了简化生活，消息还告诉我们错误可能出现的行号。解析器期望一个字符串、一个数字、一个空值或一个布尔值，因为我们没有提供任何值，所以我们遇到了这个错误。为了修复这个错误，我们要么必须向该JSON对象添加一个新项以证明逗号的存在，要么就必须去掉逗号，因为后面没有任何项了。
- en: '![Validating JSON](img/6034OS_08_05.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![验证JSON](img/6034OS_08_05.jpg)'
- en: As soon as we remove the trailing comma and validate it, we get the success
    message. Ease of use and descriptive messages have made JSONLint one of the goto
    websites for JSON validation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们去掉了末尾的逗号并进行验证，我们就会收到成功消息。易用性和描述性消息使JSONLint成为JSON验证的首选网站之一。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To work with JSONLint, please visit [http://www.jsonlint.com](http://www.jsonlint.com).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用JSONLint，请访问[http://www.jsonlint.com](http://www.jsonlint.com)。
- en: Formatting JSON
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化JSON
- en: JSONLint is not just an online JSON validator, it also helps us format JSON
    and makes it look pretty. Often JSON feeds are big in size, and an online editor
    that provides a tree structure to traverse through the JSON object is always helpful.
    **JSON Editor Online** is one of my favorite online editors to work with and format
    the big JSON objects, as it provides an easy to navigate tree structure.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JSONLint不仅是一个在线JSON验证器，它还可以帮助我们格式化JSON并使其看起来漂亮。通常JSON源的大小都很大，提供树形结构以遍历JSON对象的在线编辑器总是很有帮助。**JSON
    Editor Online**是我最喜欢的在线编辑器之一，它提供了一个易于导航的树形结构，可以处理和格式化大型JSON对象。
- en: '![Formatting JSON](img/6034OS_08_06.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![格式化JSON](img/6034OS_08_06.jpg)'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To work with JSON Editor Online, please visit [http://www.jsoneditoronline.org](http://www.jsoneditoronline.org).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用JSON Editor Online，请访问[http://www.jsoneditoronline.org](http://www.jsoneditoronline.org)。
- en: We begin by pasting our JSON example code into the window on the left-hand side,
    and click on the right arrow button in the middle to generate our tree structure.
    Once we make the changes to the tree structure, we can click on the left arrow
    button to format our data, making it ready to use elsewhere.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将我们的JSON示例代码粘贴到左侧窗口中，然后点击中间的右箭头按钮生成我们的树结构。一旦我们对树结构进行更改，我们可以点击左箭头按钮格式化我们的数据，使其准备在其他地方使用。
- en: Summary
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Debugging, validating, and formatting are three things that developers can never
    ignore. In this chapter, we have looked at resources such as the developer tool
    kits for the browsers for debugging, how we can utilize these developer tool kits,
    and also saw how to use JSONLint for validation and JSON Editor Online for formatting.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 调试、验证和格式化是开发人员永远不能忽视的三件事。在本章中，我们看了一些资源，比如用于浏览器的开发者工具包进行调试，以及如何利用这些开发者工具包，还了解了如何使用JSONLint进行验证和JSON
    Editor Online进行格式化。
- en: This is the end of *JavaScript and JSON Essentials*, targeted to provide you
    with an in-depth insight of how data can be stored and transferred in the JSON
    data format. We have had hands-on experience of transferring JSON via HTTP asynchronous
    requests within the same domain, and HTTP asynchronous requests across domains.
    We have also looked at alternative implementations of how the JSON data format
    can be used. This is a solid start to a long journey of understanding JSON to
    develop interactive and responsive web applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*JavaScript和JSON基础*的结尾，旨在为您提供关于数据如何以JSON数据格式存储和传输的深入了解。我们已经亲身体验了在同一域内通过HTTP异步请求传输JSON，以及跨域的HTTP异步请求。我们还研究了JSON数据格式的替代实现。这是理解JSON并开发交互式和响应式网络应用的长期旅程的坚实开端。
