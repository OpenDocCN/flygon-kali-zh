["```cs\n    dotnet new --list \n\n    ```", "```cs\n    dotnet new --install \"Microsoft.AspNetCore.SpaTemplates\"\n    dotnet new vue \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\"\n\n        Version=\"6.0.0\"\n\n     />\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.Design\"\n\n        Version=\"6.0.0\"\n\n    >\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>  \n    </ItemGroup> \n\n    ```", "```cs\n    sqlite3 Northwind.db -init Northwind4SQLite.sql \n\n    ```", "```cs\n    -- Loading resources from Northwind4SQLite.sql \n    SQLite version 3.35.5 2021-04-19 14:49:49\n    Enter \".help\" for usage hints.\n    sqlite> \n\n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Filename=../Northwind.db\" Microsoft.EntityFrameworkCore.Sqlite --namespace Packt.Shared --data-annotations \n\n    ```", "```cs\n    Build started...\n    Build succeeded.\n    To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263. \n\n    ```", "```cs\n // SQLite database provider-generated code\n\n[Column(TypeName = \n\n\"nvarchar (15)\"\n\n)\n\n] \npublic\n\n string\n\n CategoryName { get\n\n; set\n\n; } = null\n\n!;\n// SQL Server database provider-generated code \n\n[StringLength(15)\n\n]\npublic\n\n string\n\n CategoryName { get\n\n; set\n\n; } = null\n\n!; \n\n```", "```cs\n // no runtime validation of non-nullable property\n\npublic\n\n string\n\n CategoryName { get\n\n; set\n\n; } = null\n\n!;\n// nullable property\n\npublic\n\n string\n\n? Description { get\n\n; set\n\n; }\n// decorate with attribute to perform runtime validation\n\n[Required\n\n]\npublic\n\n string\n\n CategoryName { get\n\n; set\n\n; } = null\n\n!; \n\n```", "```cs\n    [Key\n\n    ]\n    [Column(TypeName = \n\n    \"nchar (5)\"\n\n    )\n\n    ]\n\n    **[**\n\n    **RegularExpression(**\n\n    **\"[A-Z]{5}\"**\n\n    **)**\n\n    **]**\n\n    public\n\n     string\n\n     CustomerId { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n    \\[Column\\(TypeName = \"(nchar|nvarchar) \\((.*)\\)\"\n\n    \\)\\] \n\n    ```", "```cs\n    $&\\n    [StringLength($2\n\n    )] \n\n    ```", "```cs\n     // before\n\n    [Column(TypeName = \n\n    \"datetime\"\n\n    )\n\n    ] \n    public\n\n     byte\n\n    [] BirthDate { get\n\n    ; set\n\n    ; }\n    // after\n\n    [Column(TypeName = \n\n    \"datetime\"\n\n    )\n\n    ]\n    public\n\n     DateTime? BirthDate { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n     // before\n\n    [Column(TypeName =  \n\n    \"money\"\n\n    )\n\n    ] \n    public\n\n     byte\n\n    [] Freight { get\n\n    ; set\n\n    ; }\n    // after\n\n    [Column(TypeName = \n\n    \"money\"\n\n    )\n\n    ]\n    public\n\n     decimal\n\n    ? Freight { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n     // before\n\n    [Column(TypeName = \n\n    \"bit\"\n\n    )\n\n    ]\n    public\n\n     byte\n\n    [] Discontinued { get\n\n    ; set\n\n    ; } = null\n\n    !;\n    // after\n\n    [Column(TypeName = \n\n    \"bit\"\n\n    )\n\n    ]\n    public\n\n     bool\n\n     Discontinued { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n    [Key\n\n    ]\n    public\n\n    **int**\n\n     CategoryId { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n     **[**\n\n    **Required**\n\n    **]**\n\n    [Column(TypeName = \n\n    \"nvarchar (15)\"\n\n    )\n\n    ]\n    [StringLength(15)\n\n    ]\n    public\n\n     string\n\n     CategoryName { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n     **[**\n\n    **Required**\n\n    **]**\n\n    [Column(TypeName = \n\n    \"nvarchar (40)\"\n\n    )\n\n    ]\n    [StringLength(40)\n\n    ]\n    public\n\n     string\n\n     CompanyName { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.SQLite\"\n\n        Version=\"6.0.0\"\n\n     />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\Northwind.Common.EntityModels.Sqlite\\Northwind.Common\n\n    .EntityModels.Sqlite.csproj\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     public\n\n     NorthwindContext\n\n    (DbContextOptions<NorthwindContext> options)\n      : base\n\n    (options)\n    {\n    } \n\n    ```", "```cs\n    modelBuilder.Entity<Supplier>(entity =>\n    {\n      entity.Property(e => e.SupplierId).ValueGeneratedNever();\n    }); \n\n    ```", "```cs\n     protected\n\n    override\n\n    void\n\n    OnModelCreating\n\n    (\n\n    ModelBuilder modelBuilder\n\n    )\n\n    {\n      modelBuilder.Entity<OrderDetail>(entity =>\n      {\n        entity.HasKey(e => new\n\n     { e.OrderId, e.ProductId });\n        entity.HasOne(d => d.Order)\n          .WithMany(p => p.OrderDetails)\n          .HasForeignKey(d => d.OrderId)\n          .OnDelete(DeleteBehavior.ClientSetNull);\n        entity.HasOne(d => d.Product)\n          .WithMany(p => p.OrderDetails)\n          .HasForeignKey(d => d.ProductId)\n          .OnDelete(DeleteBehavior.ClientSetNull);\n      });\n      modelBuilder.Entity<Product>()\n        .Property(product => product.UnitPrice)\n        .HasConversion<double\n\n    >();\n      OnModelCreatingPartial(modelBuilder);\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; // UseSqlite\n\n    using\n\n     Microsoft.Extensions.DependencyInjection; // IServiceCollection\n\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     static\n\n     class\n\n     NorthwindContextExtensions\n\n    {\n      ///\n\n    <summary>\n\n      ///\n\n     Adds NorthwindContext to the specified IServiceCollection. Uses the Sqlite database provider.\n\n      ///\n\n    </summary>\n\n      ///\n\n    <param name=\"services\"></param>\n\n      ///\n\n    <param name=\"relativePath\">\n\n    Set to override the default of \"..\"\n\n    </param>\n\n      ///\n\n    <returns>\n\n    An IServiceCollection that can be used to add more services.\n\n    </returns>\n\n      public\n\n    static\n\n     IServiceCollection \n\n    AddNorthwindContext\n\n    (\n\n    this\n\n     IServiceCollection services, \n\n    string\n\n     relativePath = \n\n    \"..\"\n\n    )\n\n      {\n        string\n\n     databasePath = Path.Combine(relativePath, \"Northwind.db\"\n\n    );\n        services.AddDbContext<NorthwindContext>(options =>\n          options.UseSqlite($\"Data Source=\n\n    {databasePath}\n\n    \"\n\n    )\n        );\n        return\n\n     services;\n      }\n    } \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\"\n\n        Version=\"6.0.0\"\n\n     />\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.Design\"\n\n        Version=\"6.0.0\"\n\n    >\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>  \n    </ItemGroup> \n\n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;\" Microsoft.EntityFrameworkCore.SqlServer --namespace Packt.Shared --data-annotations \n\n    ```", "```cs\n    [Key\n\n    ]\n    [StringLength(5)\n\n    ]\n\n    **[**\n\n    **RegularExpression(**\n\n    **\"[A-Z]{5}\"**\n\n    **)**\n\n    **]** \n\n    public\n\n     string\n\n     CustomerId { get\n\n    ; set\n\n    ; } = null\n\n    !; \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\"\n\n        Version=\"6.0.0\"\n\n     />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\Northwind.Common.EntityModels.SqlServer\\Northwind.Common\n\n    .EntityModels.SqlServer.csproj\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; // UseSqlServer\n\n    using\n\n     Microsoft.Extensions.DependencyInjection; // IServiceCollection\n\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     static\n\n     class\n\n     NorthwindContextExtensions\n\n    {\n      ///\n\n    <summary>\n\n      ///\n\n     Adds NorthwindContext to the specified IServiceCollection. Uses the SqlServer database provider.\n\n      ///\n\n    </summary>\n\n      ///\n\n    <param name=\"services\"></param>\n\n      ///\n\n    <param name=\"connectionString\">\n\n    Set to override the default.\n\n    </param>\n\n      ///\n\n    <returns>\n\n    An IServiceCollection that can be used to add more services.\n\n    </returns>\n\n      public\n\n    static\n\n     IServiceCollection \n\n    AddNorthwindContext\n\n    (\n\n    this\n\n     IServiceCollection services, \n\n    string\n\n     connectionString = \n\n    \"Data Source=.;Initial Catalog=Northwind;\"\n\n          + \n\n    \"Integrated Security=true;MultipleActiveResultsets=true;\"\n\n    )\n\n      {\n        services.AddDbContext<NorthwindContext>(options =>\n          options.UseSqlServer(connectionString));\n        return\n\n     services;\n      }\n    } \n\n    ```"]