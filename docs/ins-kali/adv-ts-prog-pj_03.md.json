["```ts\nnpx create-react-app chapter03 --scripts-version=react-scripts-ts\n```", "```ts\nnpm start\n```", "```ts\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"theme-color\" content=\"#000000\">\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    <title>Advanced TypeScript - Personal Contacts Manager</title>\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n```", "```ts\n{\n  \"extends\": [],\n  \"defaultSeverity\" : \"warning\",\n  \"linterOptions\": {\n    \"exclude\": [\n      \"config/**/*.js\",\n      \"node_modules/**/*.ts\",\n      \"coverage/lcov-report/*.js\"\n    ]\n  }\n}\n```", "```ts\nnpm install --save bootstrap\n```", "```ts\nnpm install --save reactstrap react react-dom\n```", "```ts\nnpm install --save @types/reactstrap\nnpm install --save @types/bootstrap\n```", "```ts\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n```", "```ts\nimport './index.css'\n```", "```ts\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n```", "```ts\nimport * as React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n\n}\n```", "```ts\nimport * as React from 'react';\nimport './App.css';\nimport Container from 'reactstrap/lib/Container';\nimport PersonalDetails from './PersonalDetails';\nexport default class App extends React.Component {\n  public render() {\n    return (\n      <Container>\n        <PersonalDetails />\n      </Container>\n    );\n  }\n}\n```", "```ts\nimport * as React from 'react';\nimport Button from 'reactstrap/lib/Button';\nimport Col from 'reactstrap/lib/Col';\nimport Row from 'reactstrap/lib/Row';\n\nexport default class PersonalDetails extends React.Component {\n\n  public render() {\n    return (\n      <Row>\n        <Col lg=\"8\">\n          <Row>\n            <Col><h4 className=\"mb-3\">Personal details</h4></Col>\n          </Row>\n          <Row>\n            <Col><label htmlFor=\"firstName\">First name</label></Col>\n            <Col><label htmlFor=\"lastName\">Last name</label></Col>\n          </Row>\n          <Row>\n            <Col>\n              <input type=\"text\" id=\"firstName\" className=\"form-control\" placeholder=\"First name\" />\n            </Col>\n            <Col><input type=\"text\" id=\"lastName\" className=\"form-control\" placeholder=\"Last name\" /></Col>\n          </Row>\n... Code omitted for brevity\n        <Col>\n          <Col>\n            <Row>\n              <Col lg=\"6\"><Button size=\"lg\" color=\"success\">Load</Button></Col>\n              <Col lg=\"6\"><Button size=\"lg\" color=\"info\">New Person</Button></Col>\n            </Row>\n          </Col>\n        </Col>\n      </Row>\n    );\n  }\n}\n```", "```ts\n<Row>\n  <Col lg=\"3\"><label htmlFor=\"postcode\">Postal/ZipCode</label></Col>\n  <Col lg=\"4\"><label htmlFor=\"phoneNumber\">Phone number</label></Col>\n</Row>\n<Row>\n  <Col lg=\"3\"><input type=\"text\" id=\"postcode\" className=\"form-control\" /></Col>\n  <Col lg=\"4\"><input type=\"text\" id=\"phoneNumber\" className=\"form-control\" /></Col>\n</Row>\n```", "```ts\nexport interface IPersonState {\n  FirstName: string,\n  LastName: string,\n  Address1: string,\n  Address2: StringOrNull,\n  Town: string,\n  County: string,\n  PhoneNumber: string;\n  Postcode: string,\n  DateOfBirth: StringOrNull,\n  PersonId : string\n}\n```", "```ts\nexport type StringOrNull = string | null;\n```", "```ts\nexport default class PersonalDetails extends React.Component<IProps, IPersonState>\n```", "```ts\ninterface IProps {\n  DefaultState : IPersonState\n}\n```", "```ts\nimport * as React from 'react';\nimport Container from 'reactstrap/lib/Container';\nimport './App.css';\nimport PersonalDetails from './PersonalDetails';\nimport { IPersonState } from \"./State\";\n\nexport default class App extends React.Component {\n  private defaultPerson : IPersonState = {\n    Address1: \"\",\n    Address2: null,\n    County: \"\",\n    DateOfBirth : new Date().toISOString().substring(0,10),\n    FirstName: \"\",\n    LastName: \"\",\n    PersonId : \"\",\n    PhoneNumber: \"\",\n    Postcode: \"\",\n    Town: \"\"\n  }\n  public render() {\n    return (\n      <Container>\n        <PersonalDetails DefaultState={this.defaultPerson} />\n      </Container>\n    );\n  }\n}\n```", "```ts\nprivate defaultState: Readonly<IPersonState>;\nconstructor(props: IProps) {\n  super(props);\n  this.defaultState = props.DefaultState;\n  this.state = props.DefaultState;\n}\n```", "```ts\n<Row>\n  <Col><input type=\"text\" id=\"firstName\" className=\"form-control\" value={this.state.FirstName} placeholder=\"First name\" /></Col>\n  <Col><input type=\"text\" id=\"lastName\" className=\"form-control\" value={this.state.LastName} placeholder=\"Last name\" /></Col>\n</Row>\n```", "```ts\nprivate updateBinding = (event: any) => {\n  switch (event.target.id) {\n    case `firstName`:\n      this.setState({ FirstName: event.target.value });\n      break;\n    case `lastName`:\n      this.setState({ LastName: event.target.value });\n      break;\n  }\n}\n```", "```ts\n<Row>\n  <Col>\n    <input type=\"text\" id=\"firstName\" className=\"form-control\" value={this.state.FirstName} onChange={this.updateBinding} placeholder=\"First name\" />\n  </Col>\n  <Col><input type=\"text\" id=\"lastName\" className=\"form-control\" value={this.state.LastName} onChange={this.updateBinding} placeholder=\"Last name\" /></Col>\n</Row>\n```", "```ts\nprivate updateBinding = (event: any) => {\n  switch (event.target.id) {\n    case `firstName`:\n      this.setState({ FirstName: event.target.value });\n      break;\n    case `lastName`:\n      this.setState({ LastName: event.target.value });\n      break;\n    case `addr1`:\n      this.setState({ Address1: event.target.value });\n      break;\n    case `addr2`:\n      this.setState({ Address2: event.target.value });\n      break;\n    case `town`:\n      this.setState({ Town: event.target.value });\n      break;\n    case `county`:\n      this.setState({ County: event.target.value });\n      break;\n    case `postcode`:\n      this.setState({ Postcode: event.target.value });\n      break;\n    case `phoneNumber`:\n      this.setState({ PhoneNumber: event.target.value });\n      break;\n    case `dateOfBirth`:\n      this.setState({ DateOfBirth: event.target.value });\n      break;\n  }\n}\n```", "```ts\ninterface IValidator<T> {\n  IsValid(input : T) : boolean;\n}\n```", "```ts\nexport class MinLengthValidator implements IValidator<StringOrNull> {\n  private minLength : number;\n  constructor(minLength : number) {\n    this.minLength = minLength;\n  }\n  public IsValid(input : StringOrNull) : boolean {\n    if (!input) {\n      return false;\n    }\n    return input.length >= this.minLength;\n  }\n}\n```", "```ts\nimport { StringOrNull } from 'src/Types';\n\nexport class RegularExpressionValidator implements IValidator<StringOrNull> {\n  private regex : RegExp;\n  constructor(expression : string) {\n    this.regex = new RegExp(expression);\n  }\n  public IsValid (input : StringOrNull) : boolean {\n    if (!input) {\n      return false;\n    }\n    return this.regex.test(input);\n  } \n}\n```", "```ts\nexport interface IValidation {\n  Validate(state : IPersonState, errors : string[]) : void;\n}\n```", "```ts\nexport class AddressValidation implements IValidation {\n  private readonly minLengthValidator : MinLengthValidator = new MinLengthValidator(5);\n  private readonly zipCodeValidator : RegularExpressionValidator \n    = new RegularExpressionValidator(\"^[0-9]{5}(?:-[0-9]{4})?$\");\n}\n```", "```ts\npublic Validate(state: IPersonState, errors: string[]): void {\n  if (!this.minLengthValidator.IsValid(state.Address1)) {\n    errors.push(\"Address line 1 must be greater than 5 characters\");\n  }\n  if (!this.minLengthValidator.IsValid(state.Town)) {\n    errors.push(\"Town must be greater than 5 characters\");\n  }\n  if (!this.minLengthValidator.IsValid(state.County)) {\n    errors.push(\"County must be greater than 5 characters\");\n  }\n  if (!this.zipCodeValidator.IsValid(state.Postcode)) {\n    errors.push(\"The postal/zip code is invalid\");\n  }\n}\n```", "```ts\nexport class PersonValidation implements IValidation {\n  private readonly firstNameValidator : MinLengthValidator = new MinLengthValidator(1);\n  private readonly lastNameValidator : MinLengthValidator = new MinLengthValidator(2);\n  public Validate(state: IPersonState, errors: string[]): void {\n    if (!this.firstNameValidator.IsValid(state.FirstName)) {\n      errors.push(\"The first name is a minimum of 1 character\");\n    }\n    if (!this.lastNameValidator.IsValid(state.FirstName)) {\n      errors.push(\"The last name is a minimum of 2 characters\");\n    }\n  }\n}\n```", "```ts\nexport class PhoneValidation implements IValidation {\n\n  private readonly regexValidator : RegularExpressionValidator = new RegularExpressionValidator(`^(?:\\\\((?:[0-9]{3})\\\\)|(?:[0-9]{3}))[-. ]?(?:[0-9]{3})[-. ]?(?:[0-9]{4})$`);\n  private readonly minLengthValidator : MinLengthValidator = new MinLengthValidator(1);\n\n  public Validate(state : IPersonState, errors : string[]) : void {\n    if (!this.minLengthValidator.IsValid(state.PhoneNumber)) {\n      errors.push(\"You must enter a phone number\")\n    } else if (!this.regexValidator.IsValid(state.PhoneNumber)) {\n      errors.push(\"The phone number format is invalid\");\n    }\n  }\n}\n```", "```ts\ninterface IValidationProps {\n  CurrentState : IPersonState;\n  CanSave : (canSave : boolean) => void;\n}\n```", "```ts\nexport default class FormValidation extends React.Component<IValidationProps> {\n  private failures : string[];\n  private validation : IValidation[];\n\n  constructor(props : IValidationProps) {\n    super(props);\n    this.validation = new Array<IValidation>();\n    this.validation.push(new PersonValidation());\n    this.validation.push(new AddressValidation());\n    this.validation.push(new PhoneValidation());\n  }\n\n  private Validate() {\n    this.failures = new Array<string>();\n    this.validation.forEach(validation => {\n      validation.Validate(this.props.CurrentState, this.failures);\n    });\n\n    this.props.CanSave(this.failures.length === 0);\n  }\n}\n```", "```ts\n<Row><FormValidation CurrentState={this.state} CanSave={this.userCanSave} /></Row>\n```", "```ts\nprivate userCanSave = (hasErrors : boolean) => {\n  this.canSave = hasErrors;\n}\n```", "```ts\npublic render() {\n  this.Validate();\n  const errors = this.failures.map(function it(failure) {\n    return (<Row key={failure}><Col><label>{failure}</label></Col></Row>);\n  });\n  return (<Col>{errors}</Col>)\n}\n```", "```ts\nexport interface ITableBuilder {\n  WithDatabase(databaseName : string) : ITableBuilder;\n  WithVersion(version : number) : ITableBuilder;\n  WithTableName(tableName : string) : ITableBuilder;\n  WithPrimaryField(primaryField : string) : ITableBuilder;\n  WithIndexName(indexName : string) : ITableBuilder;\n}\n```", "```ts\nexport interface ITable {\n  Database() : string;\n  Version() : number;\n  TableName() : string;\n  IndexName() : string;\n  Build(database : IDBDatabase) : void;\n}\n```", "```ts\nexport class TableBuilder implements ITableBuilder, ITable {\n}\n```", "```ts\nprivate database : StringOrNull;\nprivate tableName : StringOrNull;\nprivate primaryField : StringOrNull;\nprivate indexName : StringOrNull;\nprivate version : number = 1;\npublic WithDatabase(databaseName : string) : ITableBuilder {\n  this.database = databaseName;\n  return this;\n}\npublic WithVersion(versionNumber : number) : ITableBuilder {\n  this.version = versionNumber;\n  return this;\n}\npublic WithTableName(tableName : string) : ITableBuilder {\n  this.tableName = tableName;\n  return this;\n}\npublic WithPrimaryField(primaryField : string) : ITableBuild\n  this.primaryField = primaryField;\n  return this;\n}\npublic WithIndexName(indexName : string) : ITableBuilder {\n  this.indexName = indexName;\n  return this;\n}\n```", "```ts\nexport class PersonalDetailsTableBuilder {\n  public Build() : TableBuilder {\n    const tableBuilder : TableBuilder = new TableBuilder();\n    tableBuilder\n      .WithDatabase(\"packt-advanced-typescript-ch3\")\n      .WithTableName(\"People\")\n      .WithPrimaryField(\"PersonId\")\n      .WithIndexName(\"personId\")\n      .WithVersion(1);\n    return tableBuilder;\n  }\n}\n```", "```ts\npublic Database() : string {\n  return this.database;\n}\n\npublic Version() : number {\n  return this.version;\n}\n\npublic TableName() : string {\n  return this.tableName;\n}\n\npublic IndexName() : string {\n  return this.indexName;\n}\n\npublic Build(database : IDBDatabase) : void {\n  const parameters : IDBObjectStoreParameters = { keyPath : this.primaryField };\n  const objectStore = database.createObjectStore(this.tableName, parameters);\n  objectStore!.createIndex(this.indexName, this.primaryField);\n}\n```", "```ts\nexport interface IRecordState {\n  IsActive : boolean;\n}\n\nexport class RecordState implements IRecordState {\n  public IsActive: boolean;\n}\n\nexport type PersonRecord = RecordState & IPersonState;\n```", "```ts\nexport class Database<T extends RecordState> {\n\n}\n```", "```ts\nprivate OpenDatabase(): void {\n    const open = this.indexDb.open(this.table.Database(), this.table.Version());\n    open.onupgradeneeded = (e: any) => {\n        this.UpgradeDatabase(e.target.result);\n    }\n    open.onsuccess = (e: any) => {\n        this.database = e.target.result;\n    }\n}\n\nprivate UpgradeDatabase(database: IDBDatabase) {\n    this.database = database;\n    this.table.Build(this.database);\n}\n```", "```ts\nprivate readonly indexDb: IDBFactory;\nprivate database: IDBDatabase | null = null;\nprivate readonly table: ITable;\n\nconstructor(table: ITable) {\n    this.indexDb = window.indexedDB;\n    this.table = table;\n    this.OpenDatabase();\n}\n```", "```ts\nprivate GetObjectStore(): IDBObjectStore | null {\n    try {\n        const transaction: IDBTransaction = this.database!.transaction(this.table.TableName(), \"readwrite\");\n        const dbStore: IDBObjectStore = transaction.objectStore(this.table.TableName());\n        return dbStore;\n    } catch (Error) {\n        return null;\n    }\n}\n```", "```ts\npublic Create(state: T): void {\n    const dbStore = this.GetObjectStore();\n    dbStore!.add(state);\n}\n```", "```ts\npublic Read(callback: (value: T[]) => void) {\n    const dbStore = this.GetObjectStore();\n        const items : T[] = new Array<T>();\n        const request: IDBRequest = dbStore!.openCursor();\n        request.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = e.target.result;\n            if (cursor) {\n                const result: T = cursor.value;\n                if (result.IsActive) {\n                    items.push(result);\n                }\n                cursor.continue();\n            } else {\n                // When cursor is null, that is the point that we want to \n                // return back to our calling code. \n                callback(items);\n            }\n    }\n}\n```", "```ts\npublic Read() : Promise<T[]> {\n    return new Promise((response) => {\n        const dbStore = this.GetObjectStore();\n        const items : T[] = new Array<T>();\n        const request: IDBRequest = dbStore!.openCursor();\n        request.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = e.target.result;\n            if (cursor) {\n                const result: T = cursor.value;\n                if (result.IsActive) {\n                    items.push(result);\n                }\n                cursor.continue();\n            } else {\n                // When cursor is null, that is the point that we want to \n                // return back to our calling code. \n                response(items);\n            }\n        }\n    });\n}\n```", "```ts\nprivate loadPeople = () => {\n  this.people = new Array<PersonRecord>();\n  this.dataLayer.Read().then(people => {\n    this.people = people;\n    this.setState(this.state);\n  });\n}\n```", "```ts\npublic Update(state: T) : Promise<void> {\n    return new Promise((resolve) =>\n    {\n        const dbStore = this.GetObjectStore();\n        const innerRequest : IDBRequest = dbStore!.put(state);\n        innerRequest.onsuccess = () => {\n          resolve();\n        } \n    });\n}\n```", "```ts\npublic Delete(idx: number | string) : Promise<void> {\n    return new Promise((resolve) =>\n    {\n        const dbStore = this.GetObjectStore();\n        const innerRequest : IDBRequest = dbStore!.delete(idx.toString());\n        innerRequest.onsuccess = () => {\n          resolve();\n        } \n    });\n}\n```", "```ts\nprivate readonly dataLayer: Database<PersonRecord>;\nprivate people: IPersonState[];\n```", "```ts\nconst tableBuilder : PersonalDetailsTableBuilder = new PersonalDetailsTableBuilder();\nthis.dataLayer = new Database(tableBuilder.Build());\n```", "```ts\nlet people = null;\nif (this.people) {\n  const copyThis = this;\n  people = this.people.map(function it(p) {\n  return (<Row key={p.PersonId}><Col lg=\"6\"><label >{p.FirstName} {p.LastName}</label></Col>\n  <Col lg=\"3\">\n    <Button value={p.PersonId} color=\"link\" onClick={copyThis.setActive}>Edit</Button>\n  </Col>\n  <Col lg=\"3\">\n    <Button value={p.PersonId} color=\"link\" onClick={copyThis.delete}>Delete</Button>\n  </Col></Row>)\n  }, this);\n}\n```", "```ts\n<Col>\n  <Col>\n  <Row>\n    <Col>{people}</Col>\n  </Row>\n  <Row>\n    <Col lg=\"6\"><Button size=\"lg\" color=\"success\" onClick={this.loadPeople}>Load</Button></Col>\n    <Col lg=\"6\"><Button size=\"lg\" color=\"info\" onClick={this.clear}>New Person</Button></Col>\n  </Row>\n  </Col>\n</Col>\n```", "```ts\nprivate async DeletePerson(person : string) {\n  const foundPerson = this.people.find((element : IPersonState) => {\n    return element.PersonId === person;\n  });\n  if (!foundPerson) {\n    return;\n  }\n}\n```", "```ts\n  const personState : IRecordState = new RecordState();\n  personState.IsActive = false;\n```", "```ts\n  const state : PersonRecord = {...foundPerson, ...personState};\n  await this.dataLayer.Update(state);\n  this.loadPeople();\n  this.clear();\n```", "```ts\nprivate clear = () => {\n  this.setState(this.defaultState);\n}\n```", "```ts\nprivate delete = (event : any) => {\n  const person : string = event.target.value;\n  this.DeletePerson(person);\n}\n\nprivate async DeletePerson(person : string) {\n  const foundPerson = this.people.find((element : IPersonState) => {\n    return element.PersonId === person;\n  });\n  if (!foundPerson) {\n    return;\n  }\n  const personState : IRecordState = new RecordState();\n  personState.IsActive = false;\n  const state : PersonRecord = {...foundPerson, ...personState};\n  await this.dataLayer.Update(state);\n  this.loadPeople();\n  this.clear();\n}\n```", "```ts\nprivate savePerson = () => {\n  if (!this.canSave) {\n    alert(`Cannot save this record with missing or incorrect items`);\n    return;\n  }\n}\n```", "```ts\nconst personState : IRecordState = new RecordState();\npersonState.IsActive = true;\nconst state : PersonRecord = {...this.state, ...personState};\n```", "```ts\n  if (state.PersonId === \"\") {\n    state.PersonId = Date.now().toString();\n    this.dataLayer.Create(state);\n    this.loadPeople();\n    this.clear();\n  }\n```", "```ts\n  else {\n    this.dataLayer.Update(state).then(rsn => this.loadPeople());\n  }\n```", "```ts\nprivate savePerson = () => {\n  if (!this.canSave) {\n    alert(`Cannot save this record with missing or incorrect items`);\n    return;\n  }\n  if (state.PersonId === \"\") {\n    state.PersonId = Date.now().toString();\n    this.dataLayer.Create(state);\n    this.loadPeople();\n    this.clear();\n  }\n  else {\n    this.dataLayer.Update(state).then(rsn => this.loadPeople());\n  }\n}\n```", "```ts\nprivate setActive = (event : any) => {\n  const person : string = event.target.value;\n  const state = this.people.find((element : IPersonState) => {\n    return element.PersonId === person;\n  });\n  if (state) {\n    this.setState(state);\n  }\n}\n```"]