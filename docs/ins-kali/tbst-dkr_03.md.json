["```\n**$ sudo docker search centos**\n\n```", "```\nFROM cloudconsulted/ubuntu-dockerbase:latest \n\n```", "```\n**$ sudo docker build -t mynew-ubuntu**\n\n```", "```\n**$ sudo docker images**\n\n```", "```\n**$ sudo docker tag 1d4bf9f2c9c0 cloudconsulted/mynew-ubuntu:latest**\n\n```", "```\n**$ sudo docker images**\n\n```", "```\n**$ sudo docker push cloudconsulted/mynew-ubuntu**\n\n```", "```\n$ sudo debootstrap raring raring > /dev/null \n$ sudo tar -c raring -c . |  docker import - raring a29c15f1bf7a \n$ sudo docker run raring cat /etc/lsb-release \nDISTRIB_ID=Ubuntu \nDISTRIB_RELEASE=14.04 \nDISTRIB_CODENAME=raring \nDISTRIB_DESCRIPTION=\"Ubuntu 14.04\" \n\n```", "```\nFROM <image> \nFROM <image>:<tag> \nFROM <image>@<digest> \n\n```", "```\n# Image for container base \nFROM ubuntu \n\n```", "```\nMAINTAINER <name><email> \n\n```", "```\n# Add name of image author \nMAINTAINER John Wooten <jwooten@cloudconsulted.com> \n\n```", "```\nENV <key> <value> \n\n```", "```\nENV <key1>=<value1> <key2>=<value2> \n\n```", "```\nENV key1=\"env value with space\" \n\n```", "```\n# Set the environment variables \nENV DEBIAN_FRONTEND noninteractive \nENV JOOMLA_VERSION 3.4.1 \n\n```", "```\nRUN <command> \n\n```", "```\nRUN [\"executable\", \"parameter1\", \"parameter2\"] \n\n```", "```\nRUN [\"/bin/bash\", \"-c\", \"echo True!\"] \nRUN <command1>;<command2> \n\n```", "```\n# Update package manager and install required dependencies \nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\ \n    mysql-server \\ \n    apache2 \\ \n    php5 \\ \n    php5-imap \\ \n    php5-mcrypt \\ \n    php5-gd \\ \n    php5-curl \\ \n    php5-apcu \\ \n    php5-mysqlnd \\ \n    supervisor \n\n```", "```\n# Clean up any files used by apt-get \nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \n\n```", "```\nADD  <source_file>  <destination_directory> \n\n```", "```\nADD  <file1> <file2> <file3> <destination_directory> \n\n```", "```\nADD <source_directory> <destination_directory> \n\n```", "```\nADD text_* /text_files\n```", "```\nADD [\"filename with space\",...,  \"<dest>\"] \n\n```", "```\n# Download joomla and put it default apache web root \nADD https://github.com/joomla/joomla-cms/releases/download/$JOOMLA_VERSION/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz /tmp/joomla/ \nRUN tar -zxvf /tmp/joomla/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz -C /tmp/joomla/ \nRUN rm -rf /var/www/html/* \nRUN cp -r /tmp/joomla/* /var/www/html/ \n\n# Put default htaccess in place \nRUN mv /var/www/html/htaccess.txt /var/www/html/.htaccess \n\nRUN chown -R www-data:www-data /var/www \n\n# Expose HTTP and MySQL \nEXPOSE 80 3306 \n\n```", "```\n# Use supervisord to start apache / mysql \nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf \nCMD [\"/usr/bin/supervisord\", \"-n\"] \n\n```", "```\nFROM ubuntu \nMAINTAINER John Wooten <jwooten@cloudconsulted.com> \n\nENV DEBIAN_FRONTEND noninteractive \nENV JOOMLA_VERSION 3.4.1 \n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\ \n    mysql-server \\ \n    apache2 \\ \n    php5 \\ \n    php5-imap \\ \n    php5-mcrypt \\ \n    php5-gd \\ \n    php5-curl \\ \n    php5-apcu \\ \n    php5-mysqlnd \\ \n    supervisor \n\n# Clean up any files used by apt-get \nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \n\n# Download joomla and put it default apache web root \nADD https://github.com/joomla/joomla-cms/releases/download/$JOOMLA_VERSION/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz /tmp/joomla/ \nRUN tar -zxvf /tmp/joomla/Joomla_$JOOMLA_VERSION-Stable-Full_Package.tar.gz -C /tmp/joomla/ \nRUN rm -rf /var/www/html/* \nRUN cp -r /tmp/joomla/* /var/www/html/ \n\n# Put default htaccess in place \nRUN mv /var/www/html/htaccess.txt /var/www/html/.htaccess \n\nRUN chown -R www-data:www-data /var/www \n\n# Expose HTTP and MySQL \nEXPOSE 80 3306 \n\n# Use supervisord to start apache / mysql \nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf \nCMD [\"/usr/bin/supervisord\", \"-n\"] \n\n```", "```\ndocker run -i -t --rm -p 80:80 nginx \n\n```", "```\nLABEL <key>=<value>  <key>=<value>  <key>=<value> \n\n```", "```\nLABEL  \"key\"=\"value with spaces\" \n\n```", "```\nLABEL LongDescription=\"This label value extends over new \\ \nline.\" \n\n```", "```\nLABEL key1=value1 \nLABEL key2=value2 \n\n```", "```\nWORKDIR /opt/myapp \n\n```", "```\nWORKDIR /opt/ \nWORKDIR myapp \nRUN pwd \n\n```", "```\nENV SOURCEDIR /opt/src \nWORKDIR $SOURCEDIR/myapp \n\n```", "```\nUSER myappuser \n\n```", "```\n**$ sudo docker version**\n\n```", "```\n**$ sudo docker info**\n\n```", "```\n**WARNING: No memory limit support \nWARNING: No swap limit support**\n\n```", "```\n**cgroup_enable=memory swapaccount=1**\n\n```", "```\nGRUB_CMDLINE_LINUX=\"\" \n\n```", "```\nGRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\" \n\n```", "```\n**$ sudo docker images**\n\n```", "```\n**curl [need to add in path to registry!]**\n\n```", "```\n**$ sudo docker run -it [need to add in path to registry/latest bin!]**\n\n```", "```\n**$ sudo docker ps**\n\n```", "```\nFROM centos \nRUN echo 'trouble' > /tmp/trouble.txt \nRUN echo 'shoot' >> /tmp/shoot.txt \n\n```", "```\n**$ docker build -force-rm -t so26220957 .**\n\n```", "```\n**Sending build context to Docker daemon 3.584 kB \nSending build context to Docker daemon \nStep 0 : FROM ubuntu \n   ---> b750fe79269d \nStep 1 : RUN echo 'trouble' > /tmp/trouble.txt \n   ---> Running in d37d756f6e55 \n   ---> de1d48805de2 \nRemoving intermediate container d37d756f6e55 \nStep 2 : RUN echo 'bar' >> /tmp/shoot.txt \nRemoving intermediate container a180fdacd268 \nSuccessfully built 40fd00ee38e1**\n\n```", "```\n**$ docker run -rm b750fe79269d cat /tmp/trouble.txt \ncat: /tmp/trouble.txt No such file or directory \n$ docker run -rm de1d48805de2 cat /tmp/trouble.txt \ntrouble \n$ docker run -rm 40fd00ee38e1 cat /tmp/trouble.txt \ntrouble \nshoot**\n\n```", "```\n**$ sudo docker run --rm -it <id_last_working_layer> bash -il**\n\n```", "```\n**$ docker run -rm -it de1d48805de2 bash -il \nroot@ecd3ab97cad4:/# ls -l /tmp \ntotal 4 \n-rw-r-r-- 1 root root 4 Jul 3 12:14 trouble.txt \nroot@ecd3ab97cad4:/# cat /tmp/trouble.txt \ntrouble \nroot@ecd3ab97cad4:/#**\n\n```", "```\nRUN trouble \nRUN shoot \nRUN debug \n\n```", "```\nRUN trouble \n# RUN shoot \n# RUN debug \n\n```", "```\n**$ docker build -t trouble . \n$ docker run -it trouble bash \ncontainer# shoot \n...grep logs...**\n\n```", "```\n**$ sudo docker ps -a**\n\n```", "```\n$ **sudo docker inspect <containerId>**\n\n```", "```\n**$ sudo docker logs <containerId>**\n\n```", "```\n**curl -s https://s3.amazonaws.com/download.draios.com/stable/install-sysdig | sudo bash**\n\n```", "```\n**$ sudo sysdig -pc -c topprocs_cpu container.name=zany_torvalds**\n\n```", "```\n**CPU%          Process       container.name   \n------------------------------------------ \n02.49%        bash          zany_torvalds \n37.06%        curl          zany_torvalds \n0.82%         sleep         zany_torvalds**\n\n```", "```\n**$ sudo sysdig -pc -c topprocs_cpu container.name contains wordpress \n\nCPU%           Process         container.name   \n-------------------------------------------------- \n5.38%          apache2         wordpress3 \n4.37%          apache2         wordpress2 \n6.89%          apache2         wordpress4 \n7.96%          apache2         wordpress1**\n\n```", "```\n**[# install composer to a specific directory \ncurl -sS https://getcomposer.org/installer | php -- --install-dir=bin \n# use composer to install phpunit \ncomposer global require \"phpunit/phpunit=4.1.*\"]**\n\n```", "```\n**[# install phpunit \nwget https://phar.phpunit.de/phpunit.phar \nchmod +x phpunit.phar \nmv phpunit.phar /usr/local/bin/phpunit \n# might also need to put the phpunit executable placed here? test this: \ncp /usr/local/bin/phpunit /usr/bin/phpunit]**\n\n```", "```\n# discover and run any tests within the source code \nRUN phpunit \n\n```", "```\n# copy unit tests to assets \nCOPY test /root/test \n\n```", "```\n# clean up test files \nRUN rm -rf test \n\n```", "```\nwget https://phar.phpunit.de/phpunit.phar \nchmod +x phpunit.phar \nmv phpunit.phar /usr/local/bin/phpunit \n\nRUN phpunit   \nCOPY test /root/test \nRUN rm -rf test \n\n```"]