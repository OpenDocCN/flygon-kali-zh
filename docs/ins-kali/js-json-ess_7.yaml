- en: Chapter 7. Alternate Implementations of JSON
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 JSON的替代实现
- en: In the chapters until now, we have worked with JSON as an HTTP data interchange
    format; now let's look at the popular alternate methods in which JSON is being
    used. In the last few years, there has been a sharp rise in the number of software
    modules and packages across all programming and scripting languages. Crowdsourcing
    software development has been on an upward climb. Web-based hosting services such
    as SourceForge, Pastebin, and GitHub have gained popularity in the last few years,
    and they have opened up doors for developers to collaborate and contribute back
    to the community. These modules and packages can be independently integrated or
    can be used as dependent programs with an existing software framework. This behavior
    has been a common practice in the open source community where developers can work
    independently to contribute software packages that enhance the frameworks that
    they are working with.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经将JSON作为HTTP数据交换格式进行了处理；现在让我们看看JSON被使用的流行替代方法。在过去的几年中，各种编程和脚本语言中的软件模块和包的数量急剧增加。众包软件开发一直在上升。像SourceForge、Pastebin和GitHub这样的基于网络的托管服务在过去几年中变得越来越受欢迎，并为开发人员合作和回馈社区打开了大门。这些模块和包可以独立集成，也可以作为现有软件框架的依赖程序使用。这种行为在开源社区中是一种常见做法，开发人员可以独立工作，贡献增强他们正在使用的框架的软件包。
- en: Scripting languages such as PHP, Python, and JavaScript have a huge number of
    contributed software packages and modules. The advantage here is to use a prebuilt
    software package that provides certain functionality out of the box and has been
    heavily tested by the community. The flip side of introducing a single framework
    or multiple frameworks into a software project is having to understand how these
    frameworks are loaded into the project, how they can be accessed from different
    sections in the current project, whether these frameworks have any dependencies,
    and finally, how they affect the whole project. These issues can be addressed
    by using a **dependency manager**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如PHP、Python和JavaScript之类的脚本语言拥有大量的贡献软件包和模块。这里的优势是使用预构建的软件包，它提供了某些功能，并且已经经过社区的大量测试。引入单个框架或多个框架到软件项目中的反面是必须了解这些框架如何加载到项目中，它们如何从当前项目的不同部分访问，这些框架是否有任何依赖关系，最后，它们如何影响整个项目。这些问题可以通过使用**依赖管理器**来解决。
- en: A dependency manager is a software program that keeps track of all the necessary
    base programs that are required for a dependent program to run. A common practice
    in a software development life cycle is to perform unit tests by using a unit-testing
    framework; the unit-testing framework in turn might need some base libraries to
    be installed or there might be a few settings to enable the use of that framework.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖管理器是一个软件程序，它跟踪所有必要的基本程序，这些程序是依赖程序运行所必需的。在软件开发生命周期中的一个常见做法是使用单元测试框架进行单元测试；单元测试框架可能需要安装一些基本库，或者可能需要一些设置来启用该框架的使用。
- en: These operations are often handled by writing up quick scripts, but as the project
    grows bigger, the dependencies grow along with the project. Along the same lines,
    tracking these changes and making sure different teams working on the project
    get these updates, which is done by scripts, is a tough task. By introducing a
    dependency manager, we will be automating the whole process, which adds consistency
    and saves time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作通常通过编写快速脚本来处理，但随着项目规模的增长，依赖项也随着项目的增长而增加。同样，跟踪这些变化并确保不同团队在项目上的更新，这是通过脚本完成的，是一项艰巨的任务。通过引入依赖管理器，我们将自动化整个过程，这将增加一致性并节省时间。
- en: Dependency management
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖管理
- en: Dependency management has often been a little rocky, and for new developers
    who are coming in, adding new frameworks into their projects, setting up their
    projects, and getting them to run can be daunting. A dependency manager like Composer
    for PHP solves this issue. It is considered the "glue between all projects", and
    there is a good reason for that. Composer uses JSON to keep a track of all the
    dependencies for a given project. Composer's primary job is to download libraries
    from remote locations and store them locally. To inform Composer as to what libraries
    we need, we would need to set up the `composer.json` file. This file keeps a track
    of all the specific libraries, their versions, and the environments that a given
    library should be deployed to. For example, a unit-testing framework library should
    never make it to production. There was an instance in an old company where a colleague
    of mine who was randomly testing our production instance deleted the whole user
    table by running a unit test; we had to recover the whole user table from the
    previous night's database back ups.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖管理通常有点困难，对于新加入的开发人员来说，将新框架添加到他们的项目中，设置项目并使其运行可能是令人生畏的。像Composer for PHP这样的依赖管理器解决了这个问题。它被认为是所有项目之间的“粘合剂”，这是有充分理由的。Composer使用JSON来跟踪给定项目的所有依赖关系。Composer的主要工作是从远程位置下载库并将其存储在本地。为了告诉Composer我们需要哪些库，我们需要设置`composer.json`文件。这个文件跟踪所有特定的库、它们的版本以及给定库应该部署到的环境。例如，一个单元测试框架库永远不应该进入生产环境。在一个旧公司中，有一个同事随机测试我们的生产实例，通过运行一个单元测试删除了整个用户表；我们不得不从前一晚的数据库备份中恢复整个用户表。
- en: Let's quickly dive in and see how JSON is being used to handle dependency management.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速深入了解JSON是如何用于处理依赖管理的。
- en: '![Dependency management](img/6034OS_07_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![依赖管理](img/6034OS_07_01.jpg)'
- en: composer.json
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: composer.json
- en: In the `composer.json` file, we are adding two requirements to install a specific
    version of PHP and PHPUnit. Once the file is added to the project, we can use
    Composer's `install` command to install these dependencies. Composer also comes
    with an `update` command that takes care of any updates that are made for a given
    package.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在`composer.json`文件中，我们添加了两个要求，以安装特定版本的PHP和PHPUnit。一旦文件添加到项目中，我们可以使用Composer的`install`命令来安装这些依赖项。Composer还带有一个`update`命令，负责对给定包进行的任何更新。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about Composer, please visit [http://www.getcomposer.org](http://www.getcomposer.org).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Composer的更多信息，请访问[http://www.getcomposer.org](http://www.getcomposer.org)。
- en: '`Node.js` is a popular software platform that uses the JSON data format for
    tracking dependencies. **Node Packaged Modules** (**NPM**) is the package manager
    that developers use for installing and integrating external modules into their
    code. For every `Node.js` project, there is a `package.json` file in the document
    root that keeps track of all the metadata, such as the name of the project, the
    name of the author, the version number, the required modules to run that project,
    and the underlying daemons or engines that are required to run the project. Let''s
    take a peek at an example `package.json` file from one of my `Node.js` projects.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Node.js`是一个流行的软件平台，使用JSON数据格式来跟踪依赖关系。**Node Packaged Modules**（**NPM**）是开发人员用于安装和集成外部模块到他们的代码中的包管理器。对于每个`Node.js`项目，在文档根目录中都有一个`package.json`文件，用于跟踪所有元数据，如项目名称、作者名称、版本号、运行该项目所需的必需模块，以及运行该项目所需的底层守护程序或引擎。让我们来看一个我`Node.js`项目中的`package.json`文件的示例。'
- en: '![Dependency management](img/6034OS_07_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![依赖管理](img/6034OS_07_02.jpg)'
- en: package.json
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: package.json
- en: The `package.json` file is a big JSON object that keeps a track of metadata,
    such as the project's name, author's details, and the required modules.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件是一个大的JSON对象，用于跟踪元数据，如项目的名称、作者的详细信息和所需的模块。'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about NPM, please visit [https://www.npmjs.org](https://www.npmjs.org).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有关NPM的更多信息，请访问[https://www.npmjs.org](https://www.npmjs.org)。
- en: JSON for storing metadata
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储元数据的JSON
- en: 'On the same line as dependency managers, JSON is also used to store metadata
    for software projects. Prior to JSON becoming popular, the configurations and
    metadata were either stored in a text file or in language-specific files, such
    as `config.php` for PHP, `config.py` for Python, and `config.js` for JavaScript.
    All these can now be replaced by a language-independent `config.json` file; use
    a JSON library for non-JavaScript libraries to parse it. Let''s take a quick look
    at an example `config.json` file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与依赖管理器相同，JSON也用于存储软件项目的元数据。在JSON变得流行之前，配置和元数据要么存储在文本文件中，要么存储在特定于语言的文件中，例如PHP的`config.php`，Python的`config.py`和JavaScript的`config.js`。所有这些现在都可以被一个与语言无关的`config.json`文件替代；对于非JavaScript库，请使用JSON库来解析它。让我们快速看一个示例`config.json`文件：
- en: '![JSON for storing metadata](img/6034OS_07_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![用于存储元数据的JSON](img/6034OS_07_03.jpg)'
- en: config.json
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: config.json
- en: In the `config.json` file, we store the metadata as a JSON object. We are specifying
    important information such as the project name, the environment of the project
    (which varies based on the server that the file is located on), any classes that
    have to be autoloaded during bootstrapping the application, and any classes or
    folders that we would want to exclude. Finally, using the `RECURSIVE` key, we
    also specify that there are folders and those folders have files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`config.json`文件中，我们将元数据存储为JSON对象。我们指定了一些重要信息，如项目名称，项目的环境（根据文件所在的服务器而变化），在引导应用程序期间必须自动加载的任何类，以及我们想要排除的任何类或文件夹。最后，使用`RECURSIVE`键，我们还指定了有文件夹和这些文件夹有文件。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Bootstrapping is the startup process for an application, in which we prepare
    that application to serve its purpose.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 引导是应用程序的启动过程，在这个过程中，我们准备该应用程序以实现其目的。
- en: Once we have the `config.json` file available, we can use the `json.loads` method
    in Python or we can use the `json_decode` method in PHP to parse through the config
    object to retrieve the data. The JSON objects can also be used to store the database
    schema; this helps the rest of the development team to update their database schema
    when one developer on the team makes a change to the database. A smart way to
    handle this would be by writing a trigger on this `schema.json` file, and if there
    is an update to that file, the schema in the database has to be updated to reflect
    the new changes via the database migration scripts. Let's take a quick look at
    an example `schema.json` file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了`config.json`文件，我们可以使用Python中的`json.loads`方法，或者我们可以使用PHP中的`json_decode`方法来解析配置对象以检索数据。JSON对象也可以用来存储数据库模式；这有助于开发团队的其他成员在团队中的一个开发人员对数据库进行更改时更新他们的数据库模式。处理这个的一个聪明方法是在`schema.json`文件上编写一个触发器，如果该文件有更新，数据库中的模式必须通过数据库迁移脚本反映新的更改。让我们快速看一个示例`schema.json`文件。
- en: '![JSON for storing metadata](img/6034OS_07_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![用于存储元数据的JSON](img/6034OS_07_04.jpg)'
- en: schema.json
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: schema.json
- en: In the `schema.json` example, we are building the schema JSON object that will
    store the database schema information. `client` is the name of the table in our
    schema. The `client` table has three columns—the ID, name, and status of the client,
    that is, whether the client is enabled or disabled. Each of the columns contains
    the column JSON object that provides the schema information, such as the datatype
    and size of the column, whether it has a default value or a primary key constraint.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`schema.json`示例中，我们正在构建将存储数据库模式信息的模式JSON对象。`client`是我们模式中表的名称。`client`表有三列——客户端的ID、名称和状态，即客户端是否启用或禁用。每个列都包含列JSON对象，提供模式信息，如列的数据类型和大小，是否具有默认值或主键约束。
- en: Comparisons with YAML
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与YAML的比较
- en: YAML is another software language-agnostic data interchange format that is slowly
    gaining popularity. **YAML** is a recursive acronym for **YAML Ain't Markup Language**,
    and is commonly used to store metadata such as configurations, schemas, and properties.
    YAML is considered a human-readable data serialization standard and depends on
    white spaces, positioning, and simple characters for line terminators, similar
    to popular scripting languages such as Ruby and Python. YAML is particular about
    the spacing between the elements and is not tab friendly. Similar to JSON, YAML
    key/value pairs are separated by a colon. Similar to text formatting, hyphens
    are used to indicate list items, unlike JSON where the list items are placed in
    an array or a child object. Since YAML is software language-agnostic, we would
    need parsers to understand the contents in that file. Such parsers are available
    for most of the popular languages such as PHP, Python, C++, Ruby, and JavaScript.
    Let's build the `config.json` file in YAML to understand what YAML is.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: YAML是另一种软件语言无关的数据交换格式，正在逐渐流行起来。**YAML**是**YAML Ain't Markup Language**的递归缩写，通常用于存储配置、模式和属性等元数据。YAML被认为是一种人类可读的数据序列化标准，依赖于空格、定位和简单字符作为行终止符，类似于流行的脚本语言如Ruby和Python。YAML对元素之间的间距要求很严格，不友好地使用制表符。与JSON类似，YAML的键/值对由冒号分隔。与文本格式类似，使用连字符来表示列表项，不同于JSON，其中列表项放在数组或子对象中。由于YAML是软件语言无关的，我们需要解析器来理解文件中的内容。大多数流行的语言，如PHP、Python、C++、Ruby和JavaScript，都有这样的解析器。让我们构建一个YAML格式的`config.json`文件来了解YAML是什么。
- en: '![Comparisons with YAML](img/6034OS_07_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![与YAML的比较](img/6034OS_07_05.jpg)'
- en: config.yaml
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: config.yaml
- en: Similar to our config JSON object, the YAML file contains all the data; the
    difference is in how the data is being arranged—as a list of items—and in how
    spacing and positioning are used to arrange lists of data. There are multiple
    YAML resources that are available on the Internet to validate, serialize, and
    unserialize the YAML data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的config JSON对象类似，YAML文件包含所有数据；不同之处在于数据的排列方式——作为一系列项目——以及如何使用间距和定位来排列数据列表。互联网上有多个YAML资源可用于验证、序列化和反序列化YAML数据。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about YAML, please visit [http://www.yaml.org](http://www.yaml.org),
    which is represented in YAML format.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有关YAML的更多信息，请访问[http://www.yaml.org](http://www.yaml.org)，该网站以YAML格式表示。
- en: Summary
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: JSON is quickly becoming the most popular data interchange format on the Internet,
    but it is not limited to data exchange. We can also use JSON to store metadata
    for dependency managers, package managers, configuration managers, and schema
    data stores. We were introduced to YAML, which is considered as an alternative
    to JSON. In the next chapter, we will look at the different resources that we
    can use to debug, validate, and format JSON.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: JSON迅速成为互联网上最流行的数据交换格式，但它并不仅限于数据交换。我们还可以使用JSON来存储依赖管理器、包管理器、配置管理器和模式数据存储的元数据。我们介绍了YAML，它被认为是JSON的一种替代方案。在下一章中，我们将看看可以用来调试、验证和格式化JSON的不同资源。
