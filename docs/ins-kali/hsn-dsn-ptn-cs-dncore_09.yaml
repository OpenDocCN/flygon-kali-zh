- en: Implementing Design Patterns for Web Applications - Part 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施Web应用程序的设计模式-第2部分
- en: In the previous chapter, we extended our FlixOne inventory management console
    application to a web application while illustrating different patterns. We also
    covered **User Interface** (**UI**) architectural patterns such as **Model-View-Controller**
    (**MVC**), **Model View Presenter** (**MVP**), and others. The previous chapter
    aimed to discuss patterns such as MVC. We now need to extend our existing application
    to incorporate more patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们将我们的FlixOne库存管理控制台应用程序扩展为Web应用程序，同时说明了不同的模式。我们还涵盖了**用户界面**（**UI**）架构模式，如**模型-视图-控制器**（**MVC**）、**模型视图呈现器**（**MVP**）等。上一章旨在讨论MVC等模式。现在我们需要扩展我们现有的应用程序，以纳入更多模式。
- en: In this chapter, we will continue with our existing FlixOne web application
    and extend the application by working on code to see the implementation of authentication
    and authorization. In addition to this, we will discuss **Test-Driven Development**
    (**TDD**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续使用我们现有的FlixOne Web应用程序，并通过编写代码来扩展应用程序，以查看认证和授权的实现。除此之外，我们还将讨论**测试驱动开发**（**TDD**）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Authentication and authorization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证和授权
- en: Creating a .NET Core web test project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个.NET Core Web测试项目
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter contains various code examples to explain the concepts. The code
    is kept simple and is just for demonstration purposes. Most of the examples involve
    a .NET Core console application that is written in C#.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种代码示例，以解释概念。代码保持简单，仅用于演示目的。大多数示例涉及使用C#编写的.NET Core控制台应用程序。
- en: To run and execute the code, Visual Studio 2019 is a prerequisite (you can also
    use Visual Studio 2017 to run the application).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和执行代码，Visual Studio 2019是必需的（您也可以使用Visual Studio 2017来运行应用程序）。
- en: Installing Visual Studio
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Visual Studio
- en: 'To run these code examples, you need to install Visual Studio (the preferred
    **Integrated Development Environment **(**IDE**)). To do so, follow these instructions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些代码示例，您需要安装Visual Studio（首选**集成开发环境**（**IDE**））。要做到这一点，请按照以下说明进行操作：
- en: Download Visual Studio from the following download link, which contains installation
    instructions: [https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下下载链接下载Visual Studio，其中包含安装说明：[https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio)。
- en: Follow the installation instructions you find there. Multiple versions are available
    for Visual Studio installation. Here, we are using Visual Studio for Windows.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照您在那里找到的安装说明进行操作。Visual Studio有多个版本可供安装。在这里，我们使用的是Windows版的Visual Studio。
- en: Setting up .NET Core
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置.NET Core
- en: 'If you do not have .NET Core installed, you need to follow these instructions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有安装.NET Core，则需要按照以下说明进行操作：
- en: Download .NET Core for Windows using [https://www.microsoft.com/net/download/windows](https://www.microsoft.com/net/download/windows).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[https://www.microsoft.com/net/download/windows](https://www.microsoft.com/net/download/windows)下载Windows版.NET
    Core。
- en: For multiple versions and a related library, visit [https://dotnet.microsoft.com/download/dotnet-core/2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有关多个版本和相关库，请访问[https://dotnet.microsoft.com/download/dotnet-core/2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2)。
- en: Installing SQL Server
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装SQL Server
- en: 'If you do not have SQL Server installed, you need to follow these instructions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有安装SQL Server，则需要按照以下说明进行操作：
- en: Download SQL Server from the following link: [https://www.microsoft.com/en-in/download/details.aspx?id=1695](https://www.microsoft.com/en-in/download/details.aspx?id=1695).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载SQL Server：[https://www.microsoft.com/en-in/download/details.aspx?id=1695](https://www.microsoft.com/en-in/download/details.aspx?id=1695)。
- en: You can find installation instructions here: [https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在这里找到安装说明：[https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017)。
- en: For troubleshooting and for more information, refer to the following link: [https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm](https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有关故障排除和更多信息，请参考以下链接：[https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm](https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm)。
- en: The complete source code is available from the following link: [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter7](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter7).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码可以从以下链接获得：[https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter7](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter7)。
- en: Extending the .NET Core web application
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展.NET Core Web应用程序
- en: In this chapter, we will continue with our FlixOne inventory application. Throughout
    this chapter, we will discuss web application patterns and extend the web application
    that we developed in the previous chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续使用我们的FlixOne库存应用程序。在本章中，我们将讨论Web应用程序模式，并扩展我们在上一章中开发的Web应用程序。
- en: This chapter continues with the web application developed in the previous chapter.
    If you skipped the previous chapter, please revisit it to Synchronization with
    the current chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将继续上一章开发的Web应用程序。如果您跳过了上一章，请返回查看，以与当前章节同步。
- en: In this section, we will go through the process of requirement gathering, and
    then discuss the various challenges with our web application that we developed
    before now.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍需求收集的过程，然后讨论我们之前开发的Web应用程序所面临的各种挑战。
- en: Project kickoff
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目启动
- en: 'In [Chapter 6](8e089021-1efb-4b88-8bf2-e26f69f883b9.xhtml), *Implementing Design
    Patterns for Web Applications – Part 1*, we extended our FlixOne inventory console
    application and developed a web application. We extended the application after
    considering the following points:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](8e089021-1efb-4b88-8bf2-e26f69f883b9.xhtml)中，*为Web应用程序实现设计模式-第1部分*，我们扩展了我们的FlixOne库存控制台应用程序并开发了一个Web应用程序。在考虑了以下几点后，我们扩展了该应用程序：
- en: Our business needs a rich UI.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的业务需要一个丰富的用户界面。
- en: New opportunities demand a responsive web application.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的机会需要一个响应式的Web应用程序。
- en: Requirements
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求
- en: After several meetings and discussions with the management, **Business Analysts**
    (**BAs**), and presales folks, management decided to work on the following high-level
    requirements: **business requirements** and **technical requirements**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 经过几次会议和与管理层、业务分析师（BAs）和售前人员的讨论后，管理层决定着手处理以下高级需求：**业务需求**和**技术需求**。
- en: Business requirements
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务需求
- en: 'The business team eventually came up with the following business requirements:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 业务团队最终提出了以下业务需求：
- en: '**Product categorization**: There are several products, but if a user wants
    to search for a specific product, they can do so by filtering all products by
    their categories. For example, products such as mangoes, bananas, and more should
    come under a category called `Fruits`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品分类**：有多种产品，但如果用户想要搜索特定产品，他们可以通过按类别筛选所有产品来实现。例如，像芒果、香蕉等产品应该属于名为“水果”的类别。'
- en: '**Product addition**: There should be an interface that provides us with a
    feature to add new products. This feature should only be available to users who
    have the `Add Products` privilege.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品添加**：应该有一个界面，提供给我们添加新产品的功能。这个功能只能提供给具有“添加产品”权限的用户。'
- en: '**Product updation**: There should be a new interface where product updates
    should be possible.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品更新**：应该有一个新的界面，可以进行产品更新。'
- en: '**Product deletion**: There is a requirement for administrators to delete products.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品删除**：管理员需要删除产品。'
- en: Technical requirements
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The actual requirements for meeting the business needs are now ready for development.
    After several discussions with business folks, we concluded that the following
    are the requirements:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 满足业务需求的实际需求现在已经准备好进行开发。经过与业务人员的多次讨论，我们得出以下需求：
- en: '**You should have a landing or home page**:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应该有一个着陆页或主页**：'
- en: Should be a dashboard that contains various widgets
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该有一个包含各种小部件的仪表板
- en: Should show an at-a-glance picture of the store
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该显示商店的一览图片
- en: '**You should have a product page**:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应该有一个产品页面**：'
- en: Should have the capability to add, update, and delete products
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该具备添加、更新和删除产品的能力
- en: Should have the capability to add, update, and delete product categories
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该具备添加、更新和删除产品类别的能力
- en: The FlixOne Inventory Management web application is an imaginary product. We
    are creating this application to discuss the various design patterns required/used
    in web projects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: FlixOne库存管理Web应用程序是一个虚构的产品。我们正在创建此应用程序来讨论Web项目中所需/使用的各种设计模式。
- en: Challenges
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: Although we have extended our existing console application to a new web application,
    it has various challenges for both developers and businesses. In this section,
    we will discuss these challenges, and then we will find out the solution to overcome
    these challenges.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已将现有的控制台应用程序扩展为新的Web应用程序，但对开发人员和企业来说都存在各种挑战。在本节中，我们将讨论这些挑战，然后找出克服这些挑战的解决方案。
- en: Challenges for developers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发人员面临的挑战
- en: 'The following are the challenges that arose due to a big change in the application.
    These were also a result of major extensions to upgrading a console application
    to a web application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序发生了重大变化而出现的挑战。这也是将控制台应用程序升级为Web应用程序的主要扩展的结果：
- en: '**No support for TDD**: Currently, there is no test project incorporated in
    the solution. Consequently, developers can''t follow the TDD approach, which could
    lead to more bugs in the application.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不支持TDD**：目前解决方案中没有包含测试项目。因此，开发人员无法遵循TDD方法，这可能会导致应用程序中出现更多的错误。'
- en: '**Security**: In the current application, there is no mechanism to restrict
    or permit the user from providing access to a particular screen or module of the
    application. There is also nothing related to authentication and authorization.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：在当前应用程序中，没有机制来限制或允许用户访问特定屏幕或模块。也没有与身份验证和授权相关的内容。'
- en: '**UI and User Experience (UX)**: Our app is promoted from a console-based application,
    so the UI is not very rich.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI和用户体验（UX）**：我们的应用程序是从基于控制台的应用程序推广而来，因此UI并不是非常丰富。'
- en: Challenges for businesses
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业面临的挑战
- en: 'It takes time to achieve the final output, which delays the product, resulting
    in a loss for the business. The following challenges occur as we adapt a new technology
    stack, and there are plenty of changes in the code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 实现最终输出需要时间，这延迟了产品，导致业务损失。在我们采用新技术栈并对代码进行大量更改时，出现了以下挑战：
- en: '**Loss of clients**: Here, we are still in the stage of development but the
    demand for our business is very high; however, the development team is taking
    longer than expected to deliver the product.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户流失**：在这里，我们仍处于开发阶段，但对我们业务的需求非常高；然而，开发团队花费的时间比预期的要长，以交付产品。'
- en: '**It takes more time to roll out the production updates**: Development efforts
    are time-consuming at the moment, which delays the subsequent activities and leads
    to a delay in production.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产更新需要更多时间**：目前开发工作非常耗时，这延迟了后续活动，并导致生产延迟。'
- en: Finding a solution to the problems/challenges
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 找到解决问题/挑战的解决方案
- en: After several meetings and brainstorming sessions, the development team came
    to the conclusion that we have to stabilize our web-based solution. To overcome
    these challenges and provide the solution, the tech team and the business team
    got together to identify the various solutions and points.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 经过数次会议和头脑风暴后，开发团队得出结论，我们必须稳定我们的基于Web的解决方案。为了克服这些挑战并提供解决方案，技术团队和业务团队联合起来确定了各种解决方案和要点。
- en: 'The following points are supported by the solution:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案支持以下要点：
- en: Implementing authentication and authorization
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施身份验证和授权
- en: Following TDD
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循TDD
- en: Redesigning the UI to meet the UX
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新设计UI以满足UX
- en: Authentication and authorization
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证和授权
- en: 'In the previous chapter—where we started upgrading our console application
    to a web application—we added **Create, Read, Update, and Delete **(**CRUD**)
    operations, which are available publicly to any user who is able to perform them.
    There is nothing coded to restrict a particular user from performing these operations.
    The risk with this is that users who are not supposed to perform these operations
    can easily do so. The consequences of this are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们开始将控制台应用程序升级为Web应用程序，我们添加了**创建、读取、更新和删除**（CRUD）操作，这些操作对任何能够执行它们的用户都是公开可用的。没有编写任何代码来限制特定用户执行这些操作的权限。这样做的风险是，不应执行这些操作的用户可以轻易执行。其后果如下：
- en: Unattended access
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无人值守访问
- en: An open door for hackers/attackers
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑客/攻击者的开放大门
- en: Data leakage issues
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据泄漏问题
- en: Now, if we are keen to safeguard our application and restrict the operations
    to permitted users only, then we have to implement a design that only allows these
    users to perform operations. There may be scenarios in which we could allow open
    access for a few operations. In our case, most operations are only for restricted
    access. In simple terms, we can try something that tells our application that
    the incoming user is the one who belongs to our application and can perform the
    specified task.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们渴望保护我们的应用程序并将操作限制为允许的用户，那么我们必须实施一个设计，只允许这些用户执行操作。可能有一些情况下，我们可以允许一些操作的开放访问。在我们的情况下，大多数操作仅限于受限访问。简而言之，我们可以尝试一些方法，告诉我们的应用程序，传入的用户是属于我们的应用程序并且可以执行指定的任务。
- en: '**Authentication** is simply a process in which a system verifies or identifies
    the incoming requests through credentials (generally a user ID and password).
    If the system finds that the provided credentials are wrong, then it notifies
    the user (generally via a message on the GUI screen) and terminates the authorization
    process.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份验证**只是一个系统通过凭据（通常是用户ID和密码）验证或识别传入请求的过程。如果系统发现提供的凭据错误，那么它会通知用户（通常通过GUI屏幕上的消息）并终止授权过程。'
- en: '**Authorization** always comes after authentication. This is a process that
    allows the authenticated user who raised the request to access resources or data
    after verifying that they have access to the specific resources or data.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**授权**始终在身份验证之后。这是一个过程，允许经过验证的用户在验证其对特定资源或数据的访问权限后访问资源或数据。'
- en: 'In the previous paragraph, we have discussed some mechanisms that stop unattended
    access to our application''s operations. Let''s refer to the following diagram
    and discuss what it shows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的段落中，我们已经讨论了一些机制，阻止了对我们应用程序操作的无人值守访问。让我们参考下图并讨论它显示了什么：
- en: '![](img/00ea38bd-deaf-44bf-ae88-d05a91e2597e.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00ea38bd-deaf-44bf-ae88-d05a91e2597e.png)'
- en: 'The preceding diagram depicts a scenario in which the system does not allow
    unattended access. This is simply defined as follows: an incoming request is received
    and the internal system (an authentication mechanism) checks whether a request
    is authenticated or not. If a request is authenticated, then a user is allowed
    to perform the operations for which they are authorized. This is not only the
    single check, but for a typical system, authorization comes in place after authentication.
    We will discuss this in the upcoming sections.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上图描述了一个场景，即系统不允许无人值守访问。这简单地定义为：接收到一个请求，内部系统（身份验证机制）检查请求是否经过身份验证。如果请求经过身份验证，那么用户被允许执行他们被授权的操作。这不仅是单一的检查，但对于典型的系统来说，授权在身份验证之后生效。我们将在接下来的章节中讨论这一点。
- en: 'To understand this in a better way, let''s write a simple login application.
    Let''s follow the steps given here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们编写一个简单的登录应用程序。让我们按照这里给出的步骤进行：
- en: Open Visual Studio 2018.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2018。
- en: Open File | New | New project.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件 | 新建 | 新项目。
- en: From the Project window, give a name to your project.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目窗口，为您的项目命名。
- en: 'Select ASP.NET Core 2.2 for the Web Application (Model-View-Controller) template:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择ASP.NET Core 2.2的Web应用程序（模型-视图-控制器）模板：
- en: '![](img/e1b73f2c-6bb3-472c-83fa-148167c195de.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1b73f2c-6bb3-472c-83fa-148167c195de.png)'
- en: You can choose various authentications that are available as part of the selected
    template.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择所选模板的各种身份验证。
- en: 'By default, the template provides an option named No Authentication, as shown
    here:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，模板提供了一个名为无身份验证的选项，如下所示：
- en: '![](img/56f9fe22-d905-4a1c-aaa3-9967f6e3011f.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56f9fe22-d905-4a1c-aaa3-9967f6e3011f.png)'
- en: 'Press *F5* and run the application. From here, you will see the default home
    page:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F5*并运行应用程序。从这里，您将看到默认的主页：
- en: '![](img/36015566-2dc3-4f85-a9a6-5479287ae8ef.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36015566-2dc3-4f85-a9a6-5479287ae8ef.png)'
- en: You will now notice that you can navigate every page without any restrictions.
    This is obvious and makes sense as these pages are available as open access. The Home
    and Privacy pages are open access and do not require any authentication, meaning
    that anyone can access/view these pages. On the other hand, we may have a few
    pages that are meant for unattended access, such as the User Profile, and Admin
    pages.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你会注意到你可以在没有任何限制的情况下浏览每个页面。这是显而易见的，并且有道理，因为这些页面是作为开放访问的。主页和隐私页面是开放访问的，不需要任何身份验证，这意味着任何人都可以访问/查看这些页面。另一方面，我们可能有一些页面是为无人值守访问而设计的，比如用户资料和管理员页面。
- en: Refer to the GitHub repository for the chapter at [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6),
    and go through the entire application that we have built using ASP.NET Core MVC.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅GitHub存储库，了解该章节的应用程序，网址为[https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6)，并浏览我们使用ASP.NET
    Core MVC构建的整个应用程序。
- en: 'To continue with our SimpleLogin application, let''s add a screen that is meant
    for restricted access: the Products screen. In this chapter, we are not going
    to discuss how to add a new controller or views to an existing project. If you
    want to know how we can add these to our project, revisit [Chapter 6](8e089021-1efb-4b88-8bf2-e26f69f883b9.xhtml),
    *Implementing Design Patterns for Web Applications – Part 1*.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用我们的SimpleLogin应用程序，让我们添加一个专门用于受限访问的屏幕：Products屏幕。在本章中，我们不会讨论如何向现有项目添加新的控制器或视图。如果您想知道如何将这些添加到我们的项目中，请重新访问[第6章](8e089021-1efb-4b88-8bf2-e26f69f883b9.xhtml)，*实现Web应用程序的设计模式-第1部分*。
- en: 'We have added new functionality to our project to showcase products with CRUD
    operations. Now, hit *F5* and check the output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们的项目添加了新功能，以展示具有CRUD操作的产品。现在，按下*F5*并检查输出：
- en: '![](img/e1323798-b41f-4647-91e2-9b02aee64b03.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1323798-b41f-4647-91e2-9b02aee64b03.png)'
- en: You will get the output that is shown in the previous screenshot. You might
    notice that we now have a new menu named Products.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到前面截图中显示的输出。您可能会注意到我们现在有一个名为Products的新菜单。
- en: 'Let''s navigate through the new menu options. Click on the Products menu:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览一下新的菜单选项。点击Products菜单：
- en: '![](img/e4d9a790-7ca3-413c-953e-c7ffd7085696.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4d9a790-7ca3-413c-953e-c7ffd7085696.png)'
- en: The previous screenshot shows our Product page. This page is available to all
    and anyone can view it without any restrictions. You might have a look and observe
    that this page has the feature to Create New products, and to Edit and Delete
    existing products. Now, imagine a scenario where one unknown user came and deleted
    a specific product that is very important and attracts a high sales volume. You
    can imagine the scenario and how much this hampers a business. There might even
    be a chance that customers are lost.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了我们的产品页面。这个页面对所有人都是可用的，任何人都可以在没有任何限制的情况下查看它。您可以看一看并观察到这个页面具有创建新产品、编辑和删除现有产品的功能。现在，想象一个情景，一个未知的用户来了并删除了一个非常重要并吸引高销量的特定产品。您可以想象这种情景以及这对业务造成了多大的影响。甚至可能会有顾客流失。
- en: 'In our scenario, we can protect our Product page in two ways:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情景中，我们可以通过两种方式保护我们的产品页面：
- en: '**Prior Authenticate**: On this page, the link to Products is not available
    for everyone; it is only available for authenticated requests/users.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先前认证**：在这个页面上，产品的链接对所有人都不可用；它只对经过身份验证的请求/用户可用。'
- en: '**Post Authenticate**: On this page, the link to Products is available for
    everyone. However, once someone requests to access the page, the system performs
    an authentication check.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后续认证**：在这个页面上，产品的链接对所有人都是可用的。但是，一旦有人请求访问页面，系统就会进行身份验证检查。'
- en: Authentication in action
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证进行中。
- en: In this section, we will see how to implement authentication and make our web
    pages restricted for unauthenticated requests.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到如何实现身份验证，并使我们的网页对未经身份验证的请求受限。
- en: To achieve authentication, we should adopt some sort of mechanism that provides
    us with a way to authenticate a user. In general cases, if a user is logged in,
    that means they are already authenticated.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现身份验证，我们应该采用某种机制，为我们提供一种验证用户的方式。一般情况下，如果用户已登录，那就意味着他们已经经过身份验证。
- en: 'In our web application, we will also follow the same approach and make sure
    that the user is logged in before accessing the restricted pages, views, and operations:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Web应用程序中，我们也会遵循相同的方法，并确保用户在访问受限页面、视图和操作之前已登录：
- en: '[PRE0]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous class is a typical `User` model/entity that represents our database
    `User` table. This table will persist all the information regarding `User`. Here
    is what every field looks like:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的类是一个典型的`User`模型/实体，代表我们的数据库`User`表。这个表将保存关于`User`的所有信息。每个字段的样子如下：
- en: '`Id` is a **Globally Unique Identifier** (**GUID**) and primary key in the
    table.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Id` 是一个**全局唯一标识符**（**GUID**）和表中的主键。'
- en: '`UserName` is typically used during login and other related operations. It
    is a programmatically generated field.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserName` 通常在登录和其他相关操作中使用。它是一个程序生成的字段。'
- en: '`FirstName` and `LastName` combine the full name of the user.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FirstName` 和 `LastName` 组合了用户的全名。'
- en: '`Emailid` is the valid email ID of the user. It should be a valid email because
    we will validate this after/during the registration process.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Emailid` 是用户的有效电子邮件地址。它应该是一个有效的电子邮件，因为我们将在注册过程中/之后验证它。'
- en: '`PasswordHash` and `PasswordSalt` are the byte arrays that are based on a **Hash-Based
    Message Authentication Code, Secure Hash Algorithm** (**HMAC****SHA**) 512\. A
    value for `PasswordHash` attribute is 64 bytes and `PasswordSalt` is 128 bytes.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordHash` 和 `PasswordSalt` 是基于**哈希消息认证码，安全哈希算法**（**HMAC****SHA**）512的字节数组。`PasswordHash`属性的值为64字节，`PasswordSalt`为128字节。'
- en: '`SecretKey` is a Base64-encoded string.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecretKey` 是一个Base64编码的字符串。'
- en: '`Mobilie` is a valid mobile number that depends on the validity check by the
    system.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mobilie` 是一个有效的手机号码，取决于系统的有效性检查。'
- en: '`EmailToken` and `OTP` are the **One-Time Passwords** (**OTPs**) that are randomly
    generated to validate `emailId` and `Mobile number`.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailToken` 和 `OTP` 是随机生成的**一次性密码**（**OTPs**），用于验证`emailId`和`Mobile number`。'
- en: '`EmailTokenDateTime` and `OtpDateTime` are the properties of the `datetime` data
    type; they represent the date and time in which `EmailToken` and `OTP` are issued
    for the user.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailTokenDateTime` 和 `OtpDateTime` 是`datetime`数据类型的属性；它们表示为用户发出`EmailToken`和`OTP`的日期和时间。'
- en: '`IsMobileVerified` and `IsEmailverified` are Boolean values (`true`/`false`)
    that tell the system whether the mobile number and/or email ID are verified or
    not.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsMobileVerified`和`IsEmailverified`是布尔值（`true`/`false`），告诉系统手机号和/或电子邮件ID是否已验证。'
- en: '`IsActive` is a Boolean value (`true`/`false`) that tells the system whether
    a `User` model is active or not.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsActive`是布尔值（`true`/`false`），告诉系统`User`模型是否处于活动状态。'
- en: '`Image` is a Base64-encoded string of an image. It represents the profile picture
    of a user.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image`是图像的Base64编码字符串。它代表用户的个人资料图片。'
- en: 'We need to add our new class/entity to our `Context` class. Let''s add what
    we can see in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的新类/实体添加到我们的`Context`类中。让我们添加我们在下面截图中看到的内容：
- en: '![](img/e66ab985-bf29-4c24-a451-510908e88c54.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e66ab985-bf29-4c24-a451-510908e88c54.png)'
- en: 'By adding the previous line in our `Context` class, we can access our `User`
    table directly using **Entity Framework** (**EF**) functionality:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的`Context`类中添加上一行，我们可以直接使用**Entity Framework**（**EF**）功能访问我们的`User`表：
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`LoginViewModel` is used to authenticate the user. The values of this `viewmodel`
    come from the Login page (we will discuss and create this page in the upcoming
    section). It contains the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginViewModel`用于验证用户。这个`viewmodel`的值来自登录页面（我们将在接下来的部分讨论和创建此页面）。它包含以下内容：'
- en: '`UserName`: This is a unique name that is used to identify the user. This is
    a human-readable value that can be easily identified. It is not like the GUID
    value.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserName`：这是用于识别用户的唯一名称。这是一个易于识别的人类可读值。它不像GUID值。'
- en: '`Password`: This is a secret and sensitive value for any user.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Password`：这是任何用户的秘密和敏感值。'
- en: '`RememberMe`: This tells us whether the user wants to allow the current system
    to persist cookies which store values in cookies at the client browser.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RememberMe`：这告诉我们用户是否希望允许当前系统持久化存储在客户端浏览器的cookie中的值。'
- en: 'To perform the CRUD operations, let''s add the following code to the `UserManager`
    class:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 执行CRUD操作，让我们将以下代码添加到`UserManager`类中：
- en: '[PRE2]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is the code snippet from the rest of the methods of the `UserManager`
    class:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`UserManager`类其余方法的代码片段：
- en: '[PRE3]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code is the `UserManager` class, which gives us the ability to
    interact with our `User` table using EF:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是`UserManager`类，它使我们能够使用EF与我们的`User`表进行交互：
- en: 'The following code shows the View of the Login screen:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了登录屏幕的视图：
- en: '[PRE4]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous code snippet is from our `Login.cshtml` page/view. This page provides
    a form to enter the `Login` details. These details come to our `Account` controller
    and are then validated to authenticate the user:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段来自我们的`Login.cshtml`页面/视图。该页面提供了一个表单来输入`Login`详细信息。这些详细信息传递到我们的`Account`控制器，然后进行验证以认证用户：
- en: 'The following is the `Login` action method:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Login`操作方法：
- en: '[PRE5]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code snippet is a `Get /Account/Login` request that displays
    the empty login page, which is shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段是一个`Get /Account/Login`请求，显示空的登录页面，如下截图所示：
- en: '![](img/49b3bb00-4948-47d3-a661-8124331d513d.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49b3bb00-4948-47d3-a661-8124331d513d.png)'
- en: The previous screenshot appears as soon as the user clicks on the Login menu
    option. This is a simple form used to enter the Login details.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 用户点击登录菜单选项后立即出现上一个截图。这是一个用于输入登录详细信息的简单表单。
- en: 'The following code shows the `Login` action method that handles the `Login`
    functionality of the application:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了处理应用程序`Login`功能的`Login`操作方法：
- en: '[PRE6]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code snippet is a `Post /Account/Login` request from a login
    page that posts the entire `LoginViewModel` class:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段是从登录页面发出的`Post /Account/Login`请求，发布整个`LoginViewModel`类：
- en: 'The following is the screenshot of our Login view:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们登录视图的截图：
- en: '![](img/f6723286-de50-440c-8d2b-5a2dafc67aa9.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6723286-de50-440c-8d2b-5a2dafc67aa9.png)'
- en: 'In the previous screenshot, we are trying to log in using our default user
    credentials (Username: `aroraG` and Password: `test123`). The information related
    to this login is being persisted in cookies, but only if the Remember Me checkbox
    is checked by the user. The system remembers the logged-in session on the current
    computer until the user hits the Logout button.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个截图中，我们尝试使用默认用户凭据（用户名：`aroraG`和密码：`test123`）登录。与此登录相关的信息将被持久化在cookie中，但仅当用户勾选了“记住我”复选框时。系统会在当前计算机上记住用户登录会话，直到用户点击“注销”按钮。
- en: 'As soon as the user hits the Login button, the system authenticates their login
    details and redirects them to the home page, as shown in the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 用户一点击登录按钮，系统就会验证他们的登录详细信息，并将他们重定向到主页，如下截图所示：
- en: '![](img/dd11bc73-c8d1-4c6b-b7bc-7e33fd058cd7.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd11bc73-c8d1-4c6b-b7bc-7e33fd058cd7.png)'
- en: 'You might observe text in the menu, such as `Welcome Gaurav`. This welcome
    text is not coming automatically, but we did instruct our system to show this
    text by adding a few lines of code, as shown in the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会在菜单中看到文本，例如`欢迎Gaurav`。这个欢迎文本不是自动显示的，而是我们通过添加几行代码来指示系统显示这个文本，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The previous code snippet is taken from the `_Layout.cshtml` view/page. In
    the previous code snippet, we are checking whether `IsAuthenticated` returns true.
    If so, then the welcome message is displayed. This welcome message comes along
    with the Logout option, but it displays the `Login` menu when `IsAuthenticated`
    returns the `false` value:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个代码片段来自`_Layout.cshtml`视图/页面。在上一个代码片段中，我们正在检查`IsAuthenticated`是否返回true。如果是，那么欢迎消息将被显示。这个欢迎消息伴随着“注销”选项，但当`IsAuthenticated`返回`false`值时，它显示`Login`菜单：
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`IsAuthenticated` is a `ReadOnly` property of the `AuthManager` class that
    checked whether the request is authenticated or not. Before we move ahead, let''s
    revisit our `Login` method:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`IsAuthenticated`是`AuthManager`类的`ReadOnly`属性，用于检查请求是否已经认证。在我们继续之前，让我们重新审视一下我们的`Login`方法：'
- en: '[PRE9]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous `Login` method simply validates the user. Take a look at this
    statement—`var result = _authManager.Login(model);`. This calls a `Login` method
    from `AuthManager`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`Login`方法只是简单地验证用户。看看这个声明——`var result = _authManager.Login(model);`。这调用了`AuthManager`中的`Login`方法：
- en: '![](img/dde59675-3690-45ac-8590-ca3a459137f8.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dde59675-3690-45ac-8590-ca3a459137f8.png)'
- en: 'If the `Login` method returns `true`, then it redirects the current Login page
    to the Home page. Otherwise, it remains on the same Login page by complaining
    about an Invalid login attempt. The following is the code of the `Login` method:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Login`方法返回`true`，那么它将当前的登录页面重定向到主页。否则，它将保持在相同的登录页面上，抱怨登录尝试无效。以下是`Login`方法的代码：
- en: '[PRE10]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `Login` method is a typical method of the `AuthManager` class, which calls
    the `FindBy(model)` method of `UserManager` and checks whether it exists or not.
    If it exists, then it further calls the `SignInCookie(model,user)` method of the
    `AuthManager` class, otherwise, it simply returns as `false`, meaning that the Login
    is unsuccessful:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`Login`方法是`AuthManager`类的典型方法，它调用`UserManager`的`FindBy(model)`方法并检查是否存在。如果存在，那么它进一步调用`AuthManager`类的`SignInCookie(model,user)`方法，否则，它简单地返回`false`，意味着登录不成功：'
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following code snippet makes sure that if the user is authenticated, then
    their details should be persisted in `HttpContext` so that the system can authenticate
    each and every incoming request from users. You might observe the `_httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
    principal, props).Wait();` statement that actually signed in and enabled the cookie
    authentication:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段确保如果用户经过身份验证，那么他们的详细信息应该被持久化在`HttpContext`中，这样系统就可以对来自用户的每个传入请求进行身份验证。你可能会注意到`_httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
    principal, props).Wait();`语句实际上签署并启用了cookie身份验证：
- en: '[PRE12]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous statements help us to enable cookie authentication and claims for
    incoming requests for our application. Finally, the `app.UseAuthentication();` statement adds
    the authentication mechanism ability into our application. These statements should
    be added to the `Startup.cs` class.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的声明帮助我们为我们的应用程序启用cookie身份验证和声明的传入请求。最后，`app.UseAuthentication();`语句将身份验证机制能力添加到我们的应用程序中。这些语句应该添加到`Startup.cs`类中。
- en: Why does it make a difference?
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这有什么区别吗？
- en: 'We have added plenty of code into our web application, but does this really
    help us to restrict our pages/views from unattended requests? The **Products**
    page/view is still open; therefore, I can perform any available actions from the
    Products page/view:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的Web应用程序中添加了大量代码，但这真的有助于我们限制我们的页面/视图免受未经许可的请求吗？**产品**页面/视图仍然是开放的；因此，我可以从产品页面/视图执行任何可用的操作：
- en: '![](img/503ea6e8-df37-4c0b-b2bd-d0ae1a348a07.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/503ea6e8-df37-4c0b-b2bd-d0ae1a348a07.png)'
- en: 'As a user, I can see the Products option whether I am logged in or not:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我无论是否登录都可以看到产品选项：
- en: '![](img/5e25140c-009d-4976-8bee-da343dc28458.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e25140c-009d-4976-8bee-da343dc28458.png)'
- en: The previous screenshot shows the same Products menu option after login as before
    login.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了登录后与登录前相同的产品菜单选项。
- en: 'We can restrict the access of the Products page like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样限制对产品页面的访问：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following is the home screen of the application:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是应用程序的主屏幕：
- en: '![](img/bf5954af-e1af-4505-958e-413ae4cfd1bd.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf5954af-e1af-4505-958e-413ae4cfd1bd.png)'
- en: The previous code helps systems to only display the Products menu option once
    the user is logged in/authenticated. The Products menu options will not get displayed
    on the screen. Like this, we can restrict the unattended access. However, this
    approach has its own cons. The biggest one is that if someone knows the URL of
    the Products page—which will lead you to `/Product/Index`—then they can perform
    restricted operations. These operations are restricted as they are not meant to
    be used by a user who is not logged in.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码帮助系统只在用户登录/经过身份验证后显示产品菜单选项。产品菜单选项将不会显示在屏幕上。像这样，我们可以限制未经许可的访问。然而，这种方法也有其缺点。最大的缺点是，如果有人知道产品页面的URL——它将引导您到`/Product/Index`——那么他们可以执行受限制的操作。这些操作是受限制的，因为它们不是供未登录用户使用的。
- en: Authorization in action
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权的实际应用
- en: In the previous section, we discussed how to avoid unattended access to a particular
    or restricted screen/page. We have seen that Login actually authenticates the
    user and allows them to make a request to the system. On the other hand, authentication
    does not mean that if a user is authenticated, then they are authorized to access
    a particular section, page, or screen.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们讨论了如何避免对特定或受限制的屏幕/页面的未经许可访问。我们已经看到登录实际上对用户进行身份验证，并允许他们向系统发出请求。另一方面，身份验证并不意味着如果用户经过身份验证，那么他们就被授权访问特定的部分、页面或屏幕。
- en: 'The following depicts a typical authorization and authentication process:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下描述了典型的授权和身份验证过程：
- en: '![](img/8ce628c8-963b-4240-a461-128fba886d7e.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ce628c8-963b-4240-a461-128fba886d7e.png)'
- en: In this process, the first request/user gets authenticated (typically, it is
    a login form), then a request is authorized to perform a particular/requested
    operation(s). There may be many scenarios where a request is authenticated but
    not authorized to access a specific resource or perform a specific operation.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，第一个请求/用户得到了身份验证（通常是登录表单），然后授权请求执行特定/请求的操作。可能有许多情况，其中请求经过身份验证，但未经授权访问特定资源或执行特定操作。
- en: In our application (created in the previous section), we have a `Products` page
    with CRUD operations. The `Products` page is not a public page, which means that
    this page is not available for all; it is available with restricted access.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序（在上一节中创建）中，我们有一个带有CRUD操作的`Products`页面。`Products`页面不是公共页面，这意味着这个页面不是所有人都可以访问的；它是受限访问的。
- en: 'We come back to the following main problem that we left within the previous
    section: "What if a user is authenticated but they are not authorized to access
    a particular page/resource? It does not matter whether we hide the page from the
    unauthorized user because they can easily access or view it by entering its URL.*"* To
    overcome this challenge/issue, we can implement the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回到了前一节中留下的主要问题：“如果用户经过身份验证，但未被授权访问特定页面/资源怎么办？无论我们是否将页面从未经授权的用户隐藏起来，因为他们可以通过输入其URL轻松访问或查看它。”为了克服这一挑战/问题，我们可以实施以下步骤：
- en: Check the authorization on each access of the restricted resource, which means
    that whenever a user tries to access the resource (by entering a direct URL in
    the browser), the system checks for authorization, so that incoming requests to
    access the resource can be authorized. If the incoming request of the user is
    not authorized, then they would not be able to perform the specified operation.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查对受限资源的每次访问的授权，这意味着每当用户尝试访问资源（通过在浏览器中输入直接URL），系统都会检查授权，以便授权来访的请求。如果用户的来访请求未经授权，则他们将无法执行指定的操作。
- en: Checking authorization on each operation of the restricted resource means that
    if the user is authenticated, they would be able to access the restricted page/view,
    but the operations of this page/view can only be accessible if the user is authorized.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在受限资源的每次操作上检查授权意味着如果用户经过身份验证，他们将能够访问受限页面/视图，但只有在用户经过授权时才能访问此页面/视图的操作。
- en: The `Microsoft.AspNetCore.Authorization` namespace provides built-in functions
    to authorize specific resources.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`Microsoft.AspNetCore.Authorization`命名空间提供了授权特定资源的内置功能。'
- en: 'To restrict access and avoid unattended access to a particular resource, we
    can use the `Authorize` attribute:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制访问并避免对特定资源的未经监控的访问，我们可以使用`Authorize`属性：
- en: '![](img/4d449cc2-19f6-4522-8811-b1b9a59ef4af.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d449cc2-19f6-4522-8811-b1b9a59ef4af.png)'
- en: The previous screenshot shows that we are putting the `Authorize` attribute
    into our `ProductController`. Now, hit *F5* and run the application.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示我们将`Authorize`属性放入了我们的`ProductController`中。现在，按下*F5*并运行应用程序。
- en: If the user is not logged in to the system, they would not able to see the Product
    page as we have already added the condition. If the user is validated, then display Products
    in the menu bar.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未登录到系统，则他们将无法看到产品页面，因为我们已经添加了条件。如果用户经过验证，则在菜单栏中显示产品。
- en: Do not log in to the system and enter the product URL, `http://localhost:56229/Product`,
    directly to your browser. This will redirect the user to the Login screen. Please
    see the following screenshot and check the URL; you might notice that the URL
    contains a ReturnUrl part that will instruct the system on where to be redirected
    upon a successful login attempt.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 不要登录到系统并直接在浏览器中输入产品URL，`http://localhost:56229/Product`。这将重定向用户到登录屏幕。请查看以下截图并检查URL；您可能会注意到URL包含一个`ReturnUrl`部分，该部分将指示系统在成功登录尝试后重定向到何处。
- en: 'See the following screenshot; note that the URL contains the ReturnUrl part.
    The system redirects the application to this URL once the user is logged in:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下截图；请注意URL包含`ReturnUrl`部分。一旦用户登录，系统将重定向应用程序到此URL：
- en: '![](img/c7be2aef-4be7-4eb3-acbc-ff8900abfcf1.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7be2aef-4be7-4eb3-acbc-ff8900abfcf1.png)'
- en: 'The following screenshot shows Product Listing:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了产品列表：
- en: '![](img/ecde544b-f171-4a84-ab26-ccb3fda4cb3b.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecde544b-f171-4a84-ab26-ccb3fda4cb3b.png)'
- en: 'Our Product Listing screen provides operations such as Create New, Edit, Delete,
    and Details. The current application allows the user to perform these operations.
    Therefore, does it make sense that any visiting and authenticated user can create,
    update, and delete a product? If we allow this for every user, the consequences
    can be as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的产品列表屏幕提供了诸如创建新产品、编辑、删除和详细信息等操作。当前应用程序允许用户执行这些操作。因此，是否有意义让任何访问和经过身份验证的用户都可以创建、更新和删除产品？如果我们允许每个用户这样做，后果可能如下：
- en: We can have many products that have been already added to the system.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以有许多已经添加到系统中的产品。
- en: Unavoidable removal/deletion of products.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品的不可避免的移除/删除。
- en: Unavoidable updating of products.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品的不可避免的更新。
- en: Can we have something such as user types that differentiate all users of the `Admin`
    type from normal users, allowing only users with admin rights—not the normal users—to perform
    these operations? A better idea is to add roles for users; therefore, we would
    need to make a user of a specific type.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否可以有一些用户类型，可以将`Admin`类型的所有用户与普通用户区分开来，只允许具有管理员权限的用户而不是普通用户执行这些操作？更好的想法是为用户添加角色；因此，我们需要使特定类型的用户成为用户。
- en: 'Let''s add a new entity into our project and name it `Role`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目中添加一个新的实体并命名为`Role`：
- en: '[PRE14]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The previous code snippet that defines the `Role` class for a user has properties,
    as explained in the following list:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 定义用户的`Role`类的前面的代码片段具有以下列表中解释的属性：
- en: '`Id`: This uses `GUID` as a primary key.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Id`：这使用`GUID`作为主键。'
- en: '`Name`: A `Role` name of a `string` type.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name`：`string`类型的`Role`名称。'
- en: '`ShortName`: A short or abbreviated name of the role that is of a `string`
    type.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ShortName`：`string`类型的角色的简短或缩写名称。'
- en: 'We need to add our new class/entity to our `Context` class. Let''s add this
    as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的新类/实体添加到我们的`Context`类中。让我们按照以下方式添加：
- en: '![](img/41ec1447-9387-4dad-900d-b7264329c630.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41ec1447-9387-4dad-900d-b7264329c630.png)'
- en: 'The previous code provides the ability to work various DB operations using
    EF:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码提供了使用EF进行各种DB操作的能力：
- en: '[PRE15]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The three methods of the `UserManager` class that appeared in the previous
    code snippet provide us with the ability to get `Roles` from the database:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中出现的`UserManager`类的三种方法为我们提供了从数据库中获取`Roles`的能力：
- en: '[PRE16]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We have added `Roles` to our `Claims` by modifying the `SigningCookie` method
    of the `AuthManager` class:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过修改`AuthManager`类的`SigningCookie`方法，将`Roles`添加到我们的`Claims`中：
- en: '![](img/b2f40509-4128-4d60-864b-84b5bc9fc064.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2f40509-4128-4d60-864b-84b5bc9fc064.png)'
- en: 'The previous screenshot shows that a user named `Gaurav` has two roles: `Admin`
    and `Manager`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了一个名为`Gaurav`的用户有两个角色：`Admin`和`Manager`：
- en: '![](img/7dff3042-7c28-4700-a762-c9d3dbab96ac.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7dff3042-7c28-4700-a762-c9d3dbab96ac.png)'
- en: 'We restrict `ProductController` for the user(s) with the `Admin` and `Manager`
    roles only. Now, try to log in with user `aroraG` and you will see `Product Listing`,
    as shown in the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们限制`ProductController`仅供具有`Admin`和`Manager`角色的用户使用。现在，尝试使用用户`aroraG`登录，您将看到`Product
    Listing`，如下截图所示：
- en: '![](img/f3bb9f93-2966-43f8-a046-9632d5670f63.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3bb9f93-2966-43f8-a046-9632d5670f63.png)'
- en: 'Now, let''s try to log in with a second user, `aroraG1`, which has the role
    of `Editor`. This will throw an `AccessDenied` error. For this, see the following
    screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试用第二个用户`aroraG1`登录，该用户具有`Editor`角色。这将引发`AccessDenied`错误。请参见以下截图：
- en: '![](img/edba9b44-843e-42d3-8a6b-ea4845d3e9e3.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edba9b44-843e-42d3-8a6b-ea4845d3e9e3.png)'
- en: In this way, we can safeguard our restricted resources. There are a lot of ways
    to achieve this. .NET Core MVC provides built-in functionality to achieve this,
    and you can also do so in a customizable way. If you do not want to use these
    available built-in features, you can easily draft your own functionality of required
    features by adding to the existing code. If you want to do this, you need to start
    from scratch. Furthermore, if something is available, then there is no sense in
    creating something similar again. If you do not find the functionality for available
    components, then you should customize the existing functionality/features rather
    than writing the entire code from scratch.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以保护我们的受限资源。有很多方法可以实现这一点。.NET Core MVC提供了内置功能来实现这一点，您也可以以可定制的方式实现。如果您不想使用这些可用的内置功能，您可以通过添加到现有代码中来轻松起草所需功能的自己的功能。如果您想这样做，您需要从头开始。此外，如果某样东西已经存在，那么再次创建类似的东西就没有意义。如果您找不到可用组件的功能，那么您应该定制现有的功能/特性，而不是从头开始编写整个代码。
- en: '**A developer should implement an authentication mechanism that can''t be tampered
    with. **In this section, we have discussed a lot to do with authentication and
    authorization, as well as writing code and creating our web application. In regard
    to authentication, we should use a good mechanism for the authentication so that
    no one can tamper with or bypass it. There are two more designs you can start
    with:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发人员应该实现一个不可篡改的身份验证机制。**在本节中，我们已经讨论了很多关于身份验证和授权，以及编写代码和创建我们的Web应用程序。关于身份验证，我们应该使用一个良好的身份验证机制，这样就不会有人篡改或绕过它。您可以从以下两种设计开始：'
- en: Authentication filters
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证过滤器
- en: Authenticating individual requests/endpoints
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证个别请求/端点
- en: 'After the implementation of the previous steps, every request that comes via
    any mode should be authenticated and authorized before the system responds to
    the user or the client that made the call. This process mainly includes the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施了前面的步骤之后，每个通过任何模式发出的请求在系统响应给用户或发出调用的客户端之前都应经过身份验证和授权。这个过程主要包括以下内容：
- en: '**Confidentiality**: The secured system makes sure that any sensitive data
    is not exposed to unauthenticated and unauthorized access requests.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保密性**：安全系统确保任何敏感数据不会暴露给未经身份验证和未经授权的访问请求。'
- en: '**Availability**: The security measures in the system make sure that the system
    is available for users who are genuine, as confirmed through the system''s authentication
    and authorization mechanism.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：系统中的安全措施确保系统对通过系统的身份验证和授权机制确认为真实用户的用户可用。'
- en: '**Integrity**: In a secured system, data tampering is not possible, so the
    data is secure.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整性**：在一个安全的系统中，数据篡改是不可能的，因此数据是安全的。'
- en: Creating a web test project
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Web测试项目
- en: Unit testing is the one that checks code health. This means that if the code
    is buggy (unhealthy), that would be the basis of many unknown and unwanted issues
    in the application. To overcome this approach, we could follow the TDD approach.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是检查代码健康的一种方法。这意味着如果代码有错误（不健康），那么这将成为应用程序中许多未知和不需要的问题的基础。为了克服这种方法，我们可以遵循TDD方法。
- en: 'You can practice TDD with Katas. You can refer to [https://www.codeproject.com/Articles/886492/Learning-Test-Driven-Development-with-TDD-Katas](https://www.codeproject.com/Articles/886492/Learning-Test-Driven-Development-with-TDD-Katas)
    to find out more about TDD katas. If you want to practice this approach, use this
    repository: [https://github.com/garora/TDD-Katas](https://github.com/garora/TDD-Katas).'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过Katas练习TDD。您可以参考[https://www.codeproject.com/Articles/886492/Learning-Test-Driven-Development-with-TDD-Katas](https://www.codeproject.com/Articles/886492/Learning-Test-Driven-Development-with-TDD-Katas)了解更多关于TDD
    katas的信息。如果您想要练习这种方法，请使用这个存储库：[https://github.com/garora/TDD-Katas](https://github.com/garora/TDD-Katas)。
- en: 'We have already discussed a lot about TDD in previous chapters, so we are not
    going to discuss this in detail here. Instead, let''s create a test project as
    follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前几章讨论了很多关于TDD，所以我们不打算在这里详细讨论。相反，让我们按照以下步骤创建一个测试项目：
- en: Open our web application.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的Web应用程序。
- en: 'From Solution Explorer in Visual Studio, right-click on Solution and click
    on Add | New Project..., as shown in the following screenshot:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio的解决方案资源管理器中，右键单击解决方案，然后单击添加 | 新建项目...，如下截图所示：
- en: '![](img/7fce068c-4813-4bfd-b558-c91398c93cfb.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fce068c-4813-4bfd-b558-c91398c93cfb.png)'
- en: 'From the Add New Project template, select .NET Core and xUnit Test Project
    (.NET Core) and provide a meaningful name:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从添加新项目模板中，选择.NET Core和xUnit测试项目（.NET Core），并提供一个有意义的名称：
- en: '![](img/68d046c1-29af-4cb9-a4c1-c6a62a091e86.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68d046c1-29af-4cb9-a4c1-c6a62a091e86.png)'
- en: 'You will get a default unit `test` class with an empty test code, as shown
    in the following code snippet:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到一个默认的单元`test`类，其中包含空的测试代码，如下代码片段所示：
- en: '[PRE17]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can change the name of this class or discard this class if you want to
    write your own `test` class:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改此类的名称，或者如果您想编写自己的`test`类，可以放弃此类：
- en: '[PRE18]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The previous code is from our newly added `ProductDate` class. Please add this
    to a new folder called `Fake`. This class just creates dummy data so that we can
    test our web application for the product:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先前的代码来自我们新添加的`ProductDate`类。请将其添加到名为`Fake`的新文件夹中。这个类只是创建虚拟数据，以便我们可以测试产品的Web应用程序：
- en: '[PRE19]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Add a new file called `ProductTests` in the `Services` folder. Please note that
    we are using `Stubs` and `Mocks` in this code.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Services`文件夹中添加一个名为`ProductTests`的新文件。请注意，我们在这段代码中使用了`Stubs`和`Mocks`。
- en: 'Our previous code will complain about the error using red squiggly lines, as
    shown in the following screenshot:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的先前代码将通过红色波浪线抱怨错误，如下截图所示：
- en: '![](img/de3be8e2-682c-40e9-a3ac-2c5f2bc64507.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de3be8e2-682c-40e9-a3ac-2c5f2bc64507.png)'
- en: 'The previous code has errors as we did not add certain packages that were required
    for us to perform tests. To overcome these errors, we should install `moq` support
    to our `test` project. Pass the following command in your Package Manager Console:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先前的代码存在错误，因为我们没有添加一些必需的包来执行测试。为了克服这些错误，我们应该在我们的`test`项目中安装`moq`支持。在您的包管理器控制台中输入以下命令：
- en: '[PRE20]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding command will install the `moq` framework in the test project.
    Please note that while firing the preceding command, you should select the test
    project that we have created:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述命令将在测试项目中安装`moq`框架。请注意，在执行上述命令时，您应该选择我们创建的测试项目：
- en: '![](img/0f6d860c-70f3-447d-b6a2-e3bdd6e3ec46.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f6d860c-70f3-447d-b6a2-e3bdd6e3ec46.png)'
- en: Once `moq` is installed, you can go ahead and start testing.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`moq`，您就可以开始测试了。
- en: 'Important points to note while you''re working with the `xUnit` test projects
    are as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`xUnit`测试项目时需要注意的重要点如下：
- en: '**Fact** is an attribute and is used for a normal test method that is without
    parameters.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fact**是一个属性，用于没有参数的普通测试方法。'
- en: '**Theory** is an attribute and is used for a parameterized test method.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Theory**是一个属性，用于带参数的测试方法。'
- en: 'All set. Now, click on Test explorer and run your tests:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪。现在，点击“测试资源管理器”并运行您的测试：
- en: '![](img/f0688d2c-d36b-46e4-9c3f-a397ad044b51.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0688d2c-d36b-46e4-9c3f-a397ad044b51.png)'
- en: Finally, our tests have passed! This means that our controller methods are good,
    and we do not have any issues or bugs in our code that can break the functionality
    of the application/system.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的测试通过了！这意味着我们的控制器方法很好，我们的代码中没有任何问题或错误，可以破坏应用程序/系统的功能。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The main goal of this chapter was to make it possible for our web application
    to safeguard against unattended requests. This chapter covered a step-by-step
    creation of a web application using Visual Studio and discussed authentication
    and authorization. We also discussed TDD and created a new xUnit web test project
    where we used `Stubs` and `Mocks`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是使我们的Web应用程序能够防范未经授权的请求。本章介绍了使用Visual Studio逐步创建Web应用程序，并讨论了身份验证和授权。我们还讨论了TDD，并创建了一个新的xUnit
    Web测试项目，其中我们使用了`Stubs`和`Mocks`。
- en: In the next chapter, we will discuss the best practices and patterns while using
    concurrent programming in .NET Core.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论在.NET Core中使用并发编程时的最佳实践和模式。
- en: Questions
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions will allow you to consolidate the information contained
    in this chapter:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题将帮助您巩固本章中包含的信息：
- en: What are authentication and authorization?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是身份验证和授权？
- en: Is it safe to use authentication at the first level of request and then allow
    incoming requests for restricted areas?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一级请求中使用身份验证然后允许受限区域的传入请求是否安全？
- en: How can you prove that authorization always comes after authentication?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何证明授权始终在身份验证之后进行？
- en: What is TDD and why do developers care about it?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是TDD，为什么开发人员关心它？
- en: Define TDD katas. How do they help us to improve our TDD approach?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义TDD katas。它们如何帮助我们改进TDD方法？
- en: Further reading
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Congratulations, you''ve completed this chapter! To learn more about the topics
    covered in this chapter, refer to the following books:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您已经完成了本章！要了解本章涵盖的主题，请参考以下书籍：
- en: '*Building RESTful Web services with .NET Core*, by *Gaurav Aroraa, Tadit Dash*,
    published by *Packt Publishing*: [https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用.NET Core构建RESTful Web服务*，作者*Gaurav Aroraa, Tadit Dash*，由*Packt Publishing*出版：[https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)'
- en: '*C# and .NET Core Test Driven Development*, by *Ayobami Adewole*, published
    by *Packt Publishing*: [https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C#和.NET Core测试驱动开发*，作者*Ayobami Adewole*，由*Packt Publishing*出版：[https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/in/application-development/c-and-net-core-test-driven-development)'
