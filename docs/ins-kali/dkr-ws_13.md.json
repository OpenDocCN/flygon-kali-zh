["```\n    wget https://github.com/prometheus/prometheus/releases/download/v2.15.1/prometheus-2.15.1.<operating-system>-amd64.tar.gz\n    ```", "```\n    tar zxvf prometheus-2.15.1.<operating-system>-amd64.tar.gz\n    ```", "```\n    cd prometheus-2.15.1.<operating-system>-amd64\n    ```", "```\n    ls\n    ```", "```\n    LICENSE    console_libraries    data    prometheus.yml    tsdb\n    NOTICE    consoles    prometheus    promtool\n    ```", "```\n    ./prometheus --version\n    ```", "```\n    prometheus, version 2.15.1 (branch: HEAD, revision: 8744510c6391d3ef46d8294a7e1f46e57407ab13)\n    \u00a0\u00a0build user:       root@4b1e33c71b9d\n    \u00a0\u00a0build date:       20191225-01:12:19\n    \u00a0\u00a0go version:       go1.13.5\n    ```", "```\n    cat prometheus.yml \n    ```", "```\n    # my global config\n    global:\n    \u00a0\u00a0scrape_interval:     15s # Set the scrape interval to every \n    15 seconds. Default is every 1 minute.\n    \u00a0\u00a0evaluation_interval: 15s # Evaluate rules every 15 seconds. \n    The default is every 1 minute.\n    \u00a0\u00a0# scrape_timeout is set to the global default (10s).\n    \u2026\n    ```", "```\n    ./prometheus --config.file=prometheus.yml\n    ```", "```\n    \u2026\n    msg=\"Server is ready to receive web requests.\"\n    ```", "```\n    # HELP go_gc_duration_seconds A summary of the GC invocation \n    durations.\n    # TYPE go_gc_duration_seconds summary\n    go_gc_duration_seconds{quantile=\"0\"} 9.268e-06\n    go_gc_duration_seconds{quantile=\"0.25\"} 1.1883e-05\n    go_gc_duration_seconds{quantile=\"0.5\"} 1.5802e-05\n    go_gc_duration_seconds{quantile=\"0.75\"} 2.6047e-05\n    go_gc_duration_seconds{quantile=\"1\"} 0.000478339\n    go_gc_duration_seconds_sum 0.002706392\n    \u2026\n    ```", "```\n1\u00a0{\n2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"experimental\": true,\n3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"metrics-addr\": \"0.0.0.0:9191\"\n4\u00a0}\n```", "```\ndocker run \\\n\u00a0\u00a0--volume=<host_directory>:<container_directory> \\\n\u00a0\u00a0--publish=8080:8080 \\\n\u00a0\u00a0--detach=true \\\n\u00a0\u00a0--name=cadvisor \\\n\u00a0\u00a0gcr.io/google-containers/cadvisor:latest\n```", "```\n\u00a0\u00a0\u00a0\u00a0- job_name: '<scrap_job_name>'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0static_configs:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- targets: ['<ip_address>:<port>']\n```", "```\n    1\u00a0{\n    2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"experimental\": true,\n    3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"metrics-addr\": \"0.0.0.0:9191\"\n    4\u00a0}\n    ```", "```\n    # HELP builder_builds_failed_total Number of failed image builds\n    # TYPE builder_builds_failed_total counter\n    builder_builds_failed_total{reason=\"build_canceled\"} 0\n    builder_builds_failed_total{reason=\"build_target_not_reachable\n    _error\"} 0\n    builder_builds_failed_total{reason=\"command_not_supported_\n    error\"} 0\n    builder_builds_failed_total{reason=\"dockerfile_empty_error\"} 0\n    builder_builds_failed_total{reason=\"dockerfile_syntax_error\"} 0\n    builder_builds_failed_total{reason=\"error_processing_commands_\n    error\"} 0\n    builder_builds_failed_total{reason=\"missing_onbuild_arguments_\n    error\"} 0\n    builder_builds_failed_total{reason=\"unknown_instruction_error\"} 0\n    \u2026\n    ```", "```\n    level=info ts=2020-04-28T04:49:39.435Z caller=main.go:718 \n    msg=\"Notifier manager stopped\"\n    level=info ts=2020-04-28T04:49:39.436Z caller=main.go:730 \n    msg=\"See you next time!\"\n    ```", "```\n    21\u00a0scrape_configs:\n    22\u00a0\u00a0\u00a0# The job name is added as a label 'job=<job_name>' to any        timeseries scraped from this config.\n    23\u00a0\u00a0\u00a0- job_name: 'prometheus'\n    24\n    25\u00a0\u00a0\u00a0\u00a0\u00a0# metrics_path defaults to '/metrics'\n    26\u00a0\u00a0\u00a0\u00a0\u00a0# scheme defaults to 'http'.\n    27\u00a0\n    28\u00a0\u00a0\u00a0\u00a0\u00a0static_configs:\n    29\u00a0\u00a0\u00a0\u00a0\u00a0- targets: ['localhost:9090']\n    30\u00a0\n    31\u00a0\u00a0\u00a0- job_name: 'docker_daemon'\n    32\u00a0\u00a0\u00a0\u00a0\u00a0static_configs:\n    33\u00a0\u00a0\u00a0\u00a0\u00a0- targets: ['0.0.0.0:9191']\n    34\n    ```", "```\n    ./prometheus --config.file=prometheus.yml\n    ```", "```\n    docker run \\\n    \u00a0\u00a0--volume=/:/rootfs:ro \\\n    \u00a0\u00a0--volume=/var/run:/var/run:ro \\\n    \u00a0\u00a0--volume=/sys:/sys:ro \\\n    \u00a0\u00a0--volume=/var/lib/docker/:/var/lib/docker:ro \\\n    \u00a0\u00a0--volume=/dev/disk/:/dev/disk:ro \\\n    \u00a0\u00a0--publish=8080:8080 \\\n    \u00a0\u00a0--detach=true \\\n    \u00a0\u00a0--name=cadvisor \\\n    \u00a0\u00a0gcr.io/google-containers/cadvisor:latest\n    ```", "```\n    35\u00a0\u00a0\u00a0- job_name: 'cadvisor'\n    36\u00a0\u00a0\u00a0\u00a0\u00a0scrape_interval: 5s\n    37\u00a0\u00a0\u00a0\u00a0\u00a0static_configs:\n    38\u00a0\u00a0\u00a0\u00a0\u00a0- targets: ['0.0.0.0:8080']\n    ```", "```\n    ./prometheus --config.file=prometheus.yml\n    ```", "```\n    (time() - process_start_time_seconds{instance=\"0.0.0.0:8080\",job=\"cadvisor\"})\n    ```", "```\n# HELP container_cpu_system_seconds_total Cumulative system cpu time \nconsumed in seconds.\n# TYPE container_cpu_system_seconds_total counter\ncontainer_cpu_system_seconds_total{id=\"/\",image=\"\",name=\"\"} \n195.86 1579481501131\n\u2026\n```", "```\n# HELP container_cpu_load_average_10s Value of container cpu load \naverage over the last 10 seconds.\n# TYPE container_cpu_load_average_10s gauge\ncontainer_cpu_load_average_10s{id=\"/\",image=\"\",name=\"\"} 0 \n1579481501131\n\u2026\n```", "```\n# HELP engine_daemon_container_actions_seconds The number of seconds \nit takes to process each container action\n# TYPE engine_daemon_container_actions_seconds histogram\nengine_daemon_container_actions_seconds_bucket{action=\"changes\",\nle=\"0.005\"} 1\n\u2026\n```", "```\n# HELP http_request_duration_microseconds The HTTP request latencies in microseconds.\n# TYPE http_request_duration_microseconds summary\nhttp_request_duration_microseconds{handler=\"prometheus\",quantile=\n\"0.5\"} 3861.5\n\u2026\n```", "```\ncontainer_cpu_system_seconds_total{ name=\"cadvisor\"}\n```", "```\ncontainer_cpu_system_seconds_total{ name=~\"ca.+\"} \n```", "```\ncontainer_cpu_system_seconds_total{ name!=\"\"}\n```", "```\nrate(container_cpu_system_seconds_total{name=\"cadvisor\"}[1m])\n```", "```\nsum(rate(container_cpu_system_seconds_total[1m])) by (name)\n```", "```\n(time() - process_start_time_seconds{instance=\"localhost:9090\",job=\"prometheus\"})\n```", "```\n    mkdir web-nginx; cd web-nginx\n    ```", "```\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    </head>\n    <body>\n    \u00a0\u00a0\u00a0\u00a0<h1>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Hello Prometheus\n    \u00a0\u00a0\u00a0\u00a0</h1>\n    </body>\n    </html>\n    ```", "```\n    docker run --name web-nginx --rm -v ${PWD}/index.html:/usr/share/nginx/html/index.html -p 80:80 -d nginx\n    ```", "```\n    ./prometheus --config.file=prometheus.yml\n    ```", "```\n    count(container_memory_usage_bytes)\n    ```", "```\n    scalar(count(container_memory_usage_bytes{image!=\"\"}) > 0)\n    ```", "```\n    container_start_time_seconds{name=\"web-nginx\"}\n    ```", "```\n    (time() - container_start_time_seconds{name=\"web-nginx\"})\n    ```", "```\n    rate(prometheus_http_request_duration_seconds_count[1m])\n    ```", "```\n    rate(prometheus_http_request_duration_seconds_sum[1m]) / rate(prometheus_http_request_duration_seconds_count[1m])\n    ```", "```\n    sum by (name) (container_memory_usage_bytes{name!=\"\"})\n    ```", "```\n    docker kill web-nginx\n    ```", "```\n    docker pull mhowlett/ngx-stub-status-prometheus\n    ```", "```\n    daemon off;\n    events {\n    }\n    http {\n    \u00a0\u00a0server {\n    \u00a0\u00a0\u00a0\u00a0listen 80;\n    \u00a0\u00a0\u00a0\u00a0location / {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index  index.html;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0location /metrics {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stub_status_prometheus;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    }\n    ```", "```\n    docker run --name web-nginx --rm -v ${PWD}/index.html:/usr/html/index.html -v ${PWD}/nginx.conf:/etc/nginx/nginx.conf -p 80:80 -d mhowlett/ngx-stub-status-prometheus\n    ```", "```\n    # HELP nginx_active_connections_current Current number of \n    active connections\n    # TYPE nginx_active_connections_current gauge\n    nginx_active_connections_current 2\n    # HELP nginx_connections_current Number of connections currently \n    being processed by nginx\n    # TYPE nginx_connections_current gauge\n    nginx_connections_current{state=\"reading\"} 0\n    nginx_connections_current{state=\"writing\"} 1\n    nginx_connections_current{state=\"waiting\"} 1\n    \u2026\n    ```", "```\n    40\u00a0\u00a0\u00a0- job_name: 'web-nginx'\n    41\u00a0\u00a0\u00a0\u00a0\u00a0scrape_interval: 5s\n    42\u00a0\u00a0\u00a0\u00a0\u00a0static_configs:\n    43\u00a0\u00a0\u00a0\u00a0\u00a0- targets: ['0.0.0.0:80']\n    ```", "```\n    ./prometheus --config.file=prometheus.yml\n    ```", "```\n    ./prometheus --config.file=prometheus.yml\n    ```", "```\n    1\u00a0127.0.0.1       localhost prometheus\n    ```", "```\n    mkdir -p provisioning/dashboards provisioning/datasources provisioning/plugins provisioning/notifiers\n    ```", "```\n    apiVersion: 1\n    datasources:\n    - name: Prometheus\n    \u00a0\u00a0type: prometheus\n    \u00a0\u00a0url: http://prometheus:9090\n    \u00a0\u00a0access: direct\n    ```", "```\n    apiVersion: 1\n    providers:\n    - name: 'Prometheus'\n    \u00a0\u00a0orgId: 1\n    \u00a0\u00a0folder: ''\n    \u00a0\u00a0type: file\n    \u00a0\u00a0disableDeletion: false\n    \u00a0\u00a0editable: true\n    \u00a0\u00a0options:\n    \u00a0\u00a0\u00a0\u00a0path: /etc/grafana/provisioning/dashboards\n    ```", "```\n    docker run --rm -d --name grafana -p 3000:3000 -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/grafana\n    ```", "```\n    docker kill grafana\n    ```", "```\n    cp /tmp/ContainerMonitoring-1579130313205.json provisioning/dashboards/ContainerMonitoring.json\n    ```", "```\n    docker run --rm -d --name grafana -p 3000:3000 -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" -v ${PWD}/provisioning:/etc/grafana/provisioning grafana/grafana\n    ```"]