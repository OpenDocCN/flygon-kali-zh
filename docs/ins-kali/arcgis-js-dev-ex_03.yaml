- en: Chapter 3. Writing Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。编写查询
- en: '|   | *"The art and science of asking questions is the source of all knowledge."*
    |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *"提问的艺术和科学是所有知识的源泉。"* |   |'
- en: '|   | --*Thomas Berger* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*托马斯·伯格* |'
- en: 'Queries are the gateways to asking questions to the map through the API. They
    are considered as a *task* in the API terminology because the process of forming
    queries and getting the answers is a sequence of operations that must be carried
    out properly. In this chapter, we will be developing a Wildfire Location app to
    understand the following concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 查询是通过API向地图提出问题的门户。它们在API术语中被视为*任务*，因为形成查询并获取答案的过程是一系列必须正确执行的操作。在本章中，我们将开发一个野火位置应用程序，以了解以下概念：
- en: Building and executing the Query task
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和执行查询任务
- en: Building and executing the Identify task
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和执行识别任务
- en: Building and executing the Find task
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和执行查找任务
- en: Promises, deferred, and the result objects for the Query, Find, and Identify
    tasks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询、查找和识别任务的承诺、延迟和结果对象
- en: Using `FeatureTable dijit`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`FeatureTable dijit`
- en: Using `Infotemplates`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Infotemplates`
- en: Developing the Wildfire application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发野火应用程序
- en: 'In this chapter, we will be developing an app that will display Active Wildfire
    Locations in the United States with a background map showing the Wildfire Potential
    for any location. We will also try to provide search/query functionalities by
    harnessing the components provided by the API. The following screenshot provides
    a rough rendition of our final application that we will have developed by the
    end of this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发一个应用程序，该应用程序将显示美国的活跃野火位置，并显示任何位置的野火潜在风险的背景地图。我们还将尝试通过利用API提供的组件来提供搜索/查询功能。以下屏幕截图提供了我们在本章结束时将开发的最终应用程序的大致呈现：
- en: '![Developing the Wildfire application](graphics/B04959_03_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![开发野火应用程序](graphics/B04959_03_01.jpg)'
- en: 'The application will have the following components:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将具有以下组件：
- en: Dark gray basemap
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深灰色底图
- en: Two operational map services, one displaying the Wildfire potential for the
    United States (raster data) and the other displaying Active Wildfire Locations
    (point data)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个操作地图服务，一个显示美国的野火潜在风险（栅格数据），另一个显示活跃的野火位置（点数据）
- en: A legend dijit (dojo widget) displaying the symbology of the layers added to
    the map
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个图例dijit（dojo小部件），显示添加到地图上的图层的符号
- en: A report widget that shows all the records of the Active Wildfire Locations
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个报告小部件，显示所有活跃野火位置的记录
- en: A query widget where you can query Active Wildfire Locations based on the areal
    extent of Wildfire (this information is available in a field in the data)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个查询小部件，您可以根据数据中的区域范围查询活跃的野火位置（此信息在数据的一个字段中可用）
- en: A Find widget where you can enter any text, and all the States or Fire Names
    matching the search text will be fetched
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个查找小部件，您可以在其中输入任何文本，所有与搜索文本匹配的州或火灾名称都将被获取
- en: A map click event that will identify and conspicuously display Wildfire Potential
    at the map click location
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个地图点击事件，将在地图点击位置标识并显着显示野火潜在风险
- en: There are two operational data sources; one is the Wildfire Hazard Potential
    map service available at [http://maps7.arcgisonline.com/arcgis/rest/services/USDA_USFS_2014_Wildfire_Hazard_Potential/MapServer](http://maps7.arcgisonline.com/arcgis/rest/services/USDA_USFS_2014_Wildfire_Hazard_Potential/MapServer)
    and the other is Active Wildfire Data available at [http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两个操作数据源；一个是位于[http://maps7.arcgisonline.com/arcgis/rest/services/USDA_USFS_2014_Wildfire_Hazard_Potential/MapServer](http://maps7.arcgisonline.com/arcgis/rest/services/USDA_USFS_2014_Wildfire_Hazard_Potential/MapServer)的野火潜在风险地图服务，另一个是位于[http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer)的活跃野火数据
- en: 'The latter map service is a *secured* map service, meaning that we need an
    ArcGIS Online account or an ArcGIS Developer account to use it. Apart from the
    preceding data sources, to access the vast pool of ArcGIS Online Data and the
    ones published in the Living Atlas of the World ([http://doc.arcgis.com/en/living-atlas/](http://doc.arcgis.com/en/living-atlas/)),
    we need to do the following:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后一个地图服务是一个*安全*地图服务，这意味着我们需要一个ArcGIS Online帐户或ArcGIS开发者帐户来使用它。除了前述数据源，要访问ArcGIS
    Online数据的大量数据以及发布在世界生活地图集（[http://doc.arcgis.com/en/living-atlas/](http://doc.arcgis.com/en/living-atlas/)）中的数据，我们需要执行以下操作：
- en: Register the app in ArcGIS Developer Portal and get a token for the app
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ArcGIS开发者门户中注册应用程序并获取应用程序的令牌
- en: Incorporate ArcGIS Proxy Code in our application
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的应用程序中加入ArcGIS代理代码
- en: Registering the application in the developer portal
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在开发者门户中注册应用程序
- en: Using our ArcGIS Developer credentials (which we created as part of the *Setting
    up the development environment* section in [Chapter 1](ch01.html "Chapter 1. Foundation
    for the API"), *Foundation for the API*), sign into the ArcGIS Developer portal
    ([https://developers.arcgis.com/](https://developers.arcgis.com/)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的ArcGIS开发者凭据（我们在[第1章](ch01.html "第1章。API基础")的*设置开发环境*部分中创建的）登录到ArcGIS开发者门户（[https://developers.arcgis.com/](https://developers.arcgis.com/)）。
- en: Next, navigate to the **Applications** page of the developer portal by clicking
    the appropriate icon as highlighted in the following screenshot. You can even
    do so by visiting [https://developers.arcgis.com/applications/](https://developers.arcgis.com/applications/).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过单击以下屏幕截图中突出显示的适当图标，导航到开发者门户的**应用程序**页面。您甚至可以通过访问[https://developers.arcgis.com/applications/](https://developers.arcgis.com/applications/)来实现。
- en: '![Registering the application in the developer portal](graphics/B04959_03_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![在开发者门户中注册应用程序](graphics/B04959_03_02.jpg)'
- en: When we click on the **Register New Application** button, we will be prompted
    to enter the details about our application, as shown in the following screenshot.
    After providing the required details, if we click on the **Register New Application**
    button again, we will be led to another screen that displays the token for the
    app. This short-lived token can be used to access any secured ArcGIS Online map
    services. For example, try accessing the this in your browser—[http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击**注册新应用程序**按钮时，我们将被提示输入关于我们的应用程序的详细信息，如下图所示。提供所需的详细信息后，如果我们再次点击**注册新应用程序**按钮，我们将被带到另一个屏幕，显示应用程序的令牌。这个短暂的令牌可以用于访问任何受ArcGIS
    Online地图服务保护的服务。例如，尝试在浏览器中访问这个—[http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer)。
- en: 'You''ll be redirected to a page that requires you to enter a token. When you
    provide the token that you got in the previous screen, you can see Service Catalog
    for the map service that we intend to see. The following screenshot explains this
    process:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被重定向到一个需要您输入令牌的页面。当您提供在上一个屏幕中获得的令牌时，您可以看到我们打算查看的地图服务的服务目录。以下屏幕截图解释了这个过程：
- en: '![Registering the application in the developer portal](graphics/B04959_03_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![在开发者门户中注册应用程序](graphics/B04959_03_03.jpg)'
- en: Using a proxy in the application
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用程序中使用代理
- en: In this project, we need to use an Esri resource proxy to access secure ArcGIS
    Online data sources. The resource proxy is the server-side code that handles the
    request from the client to ArcGIS Server and forwards the response back from ArcGIS
    Server to the client. Esri has provided a proxy implementation that is specifically
    suitable for ArcGIS Server and ArcGIS Online. The Github code can be found at
    [https://github.com/Esri/resource-proxy](https://github.com/Esri/resource-proxy).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们需要使用Esri资源代理来访问安全的ArcGIS Online数据源。资源代理是处理来自客户端到ArcGIS Server的请求并将来自ArcGIS
    Server的响应转发回客户端的服务器端代码。Esri提供了一个专门适用于ArcGIS Server和ArcGIS Online的代理实现。Github代码可以在[https://github.com/Esri/resource-proxy](https://github.com/Esri/resource-proxy)找到。
- en: 'We will only be using the ASP.NET variant of the resource proxy that contains
    the following important files:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只使用包含以下重要文件的资源代理的ASP.NET变体：
- en: '`proxy.ashx`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy.ashx`'
- en: '`proxy.config`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy.config`'
- en: '`Web.config`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Web.config`'
- en: 'The `proxy.ashx` file contains the server-side code logic for making the request
    and forwarding the response back to the client. We need to configure `proxy.config`
    and include our ArcGIS Developer credentials in it. A sample `proxy.config` page
    is shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`proxy.ashx`文件包含用于发出请求并将响应转发回客户端的服务器端代码逻辑。我们需要配置`proxy.config`并在其中包含我们的ArcGIS开发者凭据。以下是`proxy.config`页面的示例截图：'
- en: '![Using a proxy in the application](graphics/B04959_03_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![在应用程序中使用代理](graphics/B04959_03_04.jpg)'
- en: 'To configure the `proxy.config` file, perform the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置`proxy.config`文件，请执行以下步骤：
- en: In the `proxy.config` file, modify the property values for `url`, `username`,
    and `password` in the `serverUrl` tag. For the `tokenServiceUri` property, the
    value should always be `https://www.arcgis.com/sharing/generateToken`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`proxy.config`文件中，修改`serverUrl`标签中`url`、`username`和`password`的属性值。对于`tokenServiceUri`属性，值应始终为`https://www.arcgis.com/sharing/generateToken`。
- en: For the `url` property, the value will be the location of the ArcGIS Server
    service. Specify either the specific URL (in this case, you will set `matchAll="false"`)
    or just the root URL (as shown in the preceding screenshot; in this case, the
    `matchAll` value will be `"true"`).
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`url`属性，值将是ArcGIS Server服务的位置。指定特定的URL（在这种情况下，您将设置`matchAll="false"`）或只是根URL（如前面的屏幕截图所示；在这种情况下，`matchAll`值将是`"true"`）。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more details on configuring the `proxy.config` file, refer to [https://github.com/Esri/resource-proxy/blob/master/README.md#proxy-configuration-settings](https://github.com/Esri/resource-proxy/blob/master/README.md#proxy-configuration-settings).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置`proxy.config`文件的更多详细信息，请参阅[https://github.com/Esri/resource-proxy/blob/master/README.md#proxy-configuration-settings](https://github.com/Esri/resource-proxy/blob/master/README.md#proxy-configuration-settings)。
- en: 'After configuring the proxy pages, we need to add a few more lines of code
    to our application. We need to load the `esri/config` module and use the following
    lines in our app code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置代理页面后，我们需要在应用程序中添加几行代码。我们需要加载`esri/config`模块，并在我们的应用程序代码中使用以下行：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In our application, the `proxy.ashx` page is located in the `proxy` folder
    at the application root. If the proxy pages are at a different application, we
    need to change the value for the `esriConfig.defaults.io.proxyUrl` variable. When
    we set the `esriConfig.defaults.io.alwaysUseProxy` value as `true`, all requests
    are handled by the proxy. If we need only specific URLs to be handled by the proxy,
    we may need to add a few more lines of code like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，`proxy.ashx`页面位于应用程序根目录下的`proxy`文件夹中。如果代理页面位于不同的应用程序中，我们需要更改`esriConfig.defaults.io.proxyUrl`变量的值。当我们将`esriConfig.defaults.io.alwaysUseProxy`值设置为`true`时，所有请求都将由代理处理。如果我们只需要特定的URL由代理处理，我们可能需要添加几行代码，如下所示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `urlUtils` function is provided by the `esri/urlUtils` module.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`urlUtils`函数由`esri/urlUtils`模块提供。'
- en: 'The following diagram shows the flow of a HTTP REST request from the client
    to a secure ArcGIS Server service:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了从客户端到安全ArcGIS Server服务的HTTP REST请求的流程：
- en: '![Using a proxy in the application](graphics/B04959_03_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在应用程序中使用代理](graphics/B04959_03_05.jpg)'
- en: Bootstrapping the application
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引导应用程序
- en: All the applications throughout this book are styled and bootstrapped using
    Bootstrap map libraries. The source code for these libraries can be found at [https://github.com/Esri/bootstrap-map-js](https://github.com/Esri/bootstrap-map-js).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有应用程序都使用Bootstrap地图库进行样式设置和引导。这些库的源代码可以在[https://github.com/Esri/bootstrap-map-js](https://github.com/Esri/bootstrap-map-js)找到。
- en: 'Once you download the required libraries, we will need to add the following
    CSS and JavaScript libraries to our application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下载所需的库后，我们需要将以下CSS和JavaScript库添加到我们的应用程序中：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once these libraries are added, we need to add one more JavaScript file as a
    dojo module and not as a script reference. In our application, the JavaScript
    library under discussion is located at `/js/lib/bootstrapmap.js`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些库后，我们需要添加另一个JavaScript文件作为dojo模块，而不是作为脚本引用。在我们的应用程序中，讨论中的JavaScript库位于`/js/lib/bootstrapmap.js`。
- en: 'When adding this library as a module in the require function, we need to omit
    the file extension. The following screenshot illustrates this statement:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将此库作为require函数中的模块添加时，我们需要省略文件扩展名。以下屏幕截图说明了这一说法：
- en: '![Bootstrapping the application](graphics/B04959_03_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![引导应用程序](graphics/B04959_03_06.jpg)'
- en: So, instead of using the `esri/map` module, we will be using the `bootstrapmap`
    module to create the map. The `bootstrapmap` module accepts all the properties
    and methods that the `esri/map` provides, since the `bootstrapmap` module is just
    a wrap around the `esri/map` module.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用`bootstrapmap`模块而不是`esri/map`模块来创建地图。`bootstrapmap`模块接受`esri/map`提供的所有属性和方法，因为`bootstrapmap`模块只是`esri/map`模块的包装。
- en: Types of querying operations
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询操作类型
- en: 'Various types of querying operations are possible on the ArcGIS Server provided
    data. We will be dealing with the three most important querying operations provided
    by the API in this chapter:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArcGIS Server提供的数据上可以进行各种类型的查询操作。在本章中，我们将处理API提供的三种最重要的查询操作：
- en: Query task
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询任务
- en: Find task
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找任务
- en: Identify task
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别任务
- en: Query task
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询任务
- en: Query task lets us operate just one layer, so the constructor for a Query task
    requires us to provide the URL of a feature layer. Query task lets us query the
    data using the attributes (field values; for example, query cities whose population
    is greater than 2 million) or using the location (for example, find all the gas
    stations that are within the current extent of the map or a custom-drawn extent).
    When the number of features satisfying the query conditions is greater than the
    limit set by the server (the `maxRecordCount` setting in ArcGIS Server), we can
    use a feature named *paging* to retrieve all the features on a batch mode.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 查询任务让我们只操作一个图层，因此查询任务的构造函数要求我们提供要素图层的URL。查询任务让我们使用属性（字段值；例如，查询人口超过200万的城市）或使用位置（例如，查找所有位于地图当前范围或自定义绘制范围内的加油站）。当满足查询条件的要素数量大于服务器设置的限制（ArcGIS
    Server中的`maxRecordCount`设置）时，我们可以使用名为*分页*的功能以批处理模式检索所有要素。
- en: Find task
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找任务
- en: Find task can operate on multiple layers in a map service and multiple fields.
    Find task basically searches for a given text in all the fields throughout all
    the layers in a given map service. When we don't know which field we are searching
    for and thus can't construct a proper SQL `where` clause to query the data, this
    is an ideal operation to rely upon.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 查找任务可以在地图服务和多个字段上操作。查找任务基本上在给定地图服务中的所有图层的所有字段中搜索给定的文本。当我们不知道要搜索的字段，因此无法构造适当的SQL“where”子句来查询数据时，这是一个理想的操作依赖。
- en: Identify task
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别任务
- en: Identify task is predominantly a location-based search operation that returns
    all the data from all the layers in a given map service that intersect with a
    given geometry (such as a map-click point).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 识别任务主要是基于位置的搜索操作，返回与给定几何图形（例如地图点击点）相交的给定地图服务中所有图层的所有数据。
- en: 'In all the preceding tasks, we can restrict the fields or layers upon which
    the search operation is being performed. The following matrix summarizes all the
    options available with the three different types of query operations:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有前面的任务中，我们可以限制进行搜索操作的字段或图层。以下矩阵总结了三种不同类型的查询操作可用的所有选项：
- en: '![Identify task](graphics/B04959_03_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![识别任务](graphics/B04959_03_07.jpg)'
- en: Building and executing a Query task
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和执行查询任务
- en: '**Query tasks** are designed to query `featureLayer`. Thus, to instantiate
    `querytask`, we need to provide the URL of `featurelayer`. In version 3.15 of
    the API, the module is named `esri/tasks/QueryTask`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**查询任务**旨在查询`featureLayer`。因此，要实例化`querytask`，我们需要提供`featurelayer`的URL。在API的3.15版本中，该模块被命名为`esri/tasks/QueryTask`。'
- en: The QueryTask constructor
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QueryTask构造函数
- en: 'The syntax for the `QueryTask` constructor is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryTask`构造函数的语法如下：'
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The example for the `QueryTask` constructor is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryTask`构造函数的示例如下：'
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Constructor parameters
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造函数参数
- en: The URL of a feature layer that has query functionality is enabled, to verify
    that the query functionality on a feature layer is enabled, we have to visit the
    Service Catalog of the map service and check that `Query` is among the supported
    operations for the feature layer we'd like to query upon.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 启用查询功能的要素图层的URL，以验证要素图层上的查询功能是否已启用，我们必须访问地图服务的服务目录，并检查“查询”是否是我们想要查询的要素图层支持的操作之一。
- en: For example, in the Active Wildfire map service that we were dealing with, we'd
    like to query the layer containing data about Active Wildfire layers. There's
    just one layer in the map service, hence the layer index for the feature layer
    is `0`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们处理的Active Wildfire地图服务中，我们想要查询包含有关Active Wildfire图层的数据的图层。地图服务中只有一个图层，因此要素图层的图层索引为`0`。
- en: The URL of the feature layer is [http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer/0](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer/0).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层的URL是[http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer/0](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/Wildfire_Activity/MapServer/0)。
- en: 'When we visit this link and scroll down to the bottom of the page where the
    **Supported Operations** section is found, we will see the Query operation being
    listed there:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问此链接并滚动到页面底部找到**支持的操作**部分时，我们将看到查询操作被列在那里：
- en: '![Constructor parameters](graphics/B04959_03_08.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![构造函数参数](graphics/B04959_03_08.jpg)'
- en: 'Executing a query using a Query task involves the following steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Query任务执行查询涉及以下步骤：
- en: '![Constructor parameters](graphics/B04959_03_09.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![构造函数参数](graphics/B04959_03_09.jpg)'
- en: Instantiating the QueryTask object
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化QueryTask对象
- en: 'A Query task is based on the Active Wildfire feature layer. Hence, we will
    be using the feature layer''s URL to instantiate the `QueryTask` object. The following
    lines of code explain how to instantiate `QueryTask`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 查询任务基于Active Wildfire要素图层。因此，我们将使用要素图层的URL来实例化`QueryTask`对象。以下代码行解释了如何实例化`QueryTask`：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Building the Query object
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建查询对象
- en: The `QueryTask` object just defines which layer or data you want to query, but
    we need to use the `Query` object to define what the actual query is. The Query
    object is provided by the `esri/tasks/Query` module.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryTask`对象只是定义要查询的图层或数据，但我们需要使用`Query`对象来定义实际的查询是什么。`Query`对象由`esri/tasks/Query`模块提供。'
- en: 'The Query object does the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 查询对象执行以下操作：
- en: It forms a SQL `where` clause to query by attributes.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它形成一个SQL`where`子句来按属性查询。
- en: It uses a spatial geometry to perform the query.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用空间几何体执行查询。
- en: It indicates the spatial relationship with which the query has to be executed.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它指示查询执行时的空间关系。
- en: It requests an array of feature fields from the server.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它请求从服务器获取要素字段的数组。
- en: It indicates whether the query result needs to return geometric information.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它指示查询结果是否需要返回几何信息。
- en: The Query object has a property named `where`. This property accepts SQL's `where`
    clauses and fetches the data that satisfies the `where` clause.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查询对象有一个名为`where`的属性。该属性接受SQL的`where`子句，并获取满足`where`子句的数据。
- en: 'The format of the `where` clause is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`where`子句的格式如下：'
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Where `Query Expression` is `"<FieldName><operator><value>";`. And `<FieldName>`
    is the name of the field in the feature that we would like to query.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`Query Expression`是`"<FieldName><operator><value>";`。`<FieldName>`是要查询的要素中字段的名称。
- en: '`<operator>` is a kind of SQL operator, such as `LIKE`, `=`, `>`, `<`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`<operator>`是一种SQL运算符，例如`LIKE`，`=`,`>`,`<`。'
- en: 'The following snippet demonstrates the use of the `where` clause:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了`where`子句的使用：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When we would like to retrieve all the features from the `feature` class, the
    `where` clause needs to be set to a **truthy** expression, such as `1=1`. A truthy
    expression is something that evaluates to `true` under all circumstances.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要从`feature`类中检索所有要素时，`where`子句需要设置为**真**表达式，例如`1=1`。真表达式是在所有情况下都评估为`true`的表达式。
- en: 'You can use a truthy expression to retrieve all features:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用真表达式检索所有要素：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In practice, the number of features returned using this expression is determined
    by the server setting known as `MaxRecordCount`, as shown in the following screenshot.
    The default value is `1000`. This limit can be changed in the ArcGIS server settings.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，使用此表达式返回的要素数量由服务器设置`MaxRecordCount`确定，如下截图所示。默认值为`1000`。可以在ArcGIS服务器设置中更改此限制。
- en: 'When evaluating strings, do remember to enclose the string value within single
    quotes:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估字符串时，请记住将字符串值括在单引号内：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The fields required in the output feature set can be passed as an array of
    field names to the `query` object parameter called `outFields`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 输出要素集中所需的字段可以作为字段名称数组传递给`query`对象参数`outFields`：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can indicate whether we need the geometric information of the features by
    passing the value `true` or `false` to the `query` object parameter called `returnGeometry`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将值`true`或`false`传递给`query`对象参数`returnGeometry`来指示是否需要要素的几何信息：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows how to construct a complete `Query` object that
    can retrieve all the features from the feature layer set in the `Query` task object:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何构造一个完整的`Query`对象，该对象可以从`Query`任务对象中设置的要素图层中检索所有要素：
- en: '![Building the Query object](graphics/B04959_03_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![构建查询对象](graphics/B04959_03_10.jpg)'
- en: Querying by spatial geometry
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过空间几何体查询
- en: We can fetch features from a feature layer that has a spatial relationship with
    another input geometry. We need to define what the spatial relationship between
    the input geometry and the features to be retrieved are. When not defined, the
    default spatial relationship becomes an intersection. This means that we are trying
    to fetch features that intersect with an input geometry.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从具有与另一个输入几何体的空间关系的要素图层中获取要素。我们需要定义输入几何体和要检索的要素之间的空间关系。当未定义时，默认空间关系变为交集。这意味着我们正在尝试获取与输入几何体相交的要素。
- en: '![Querying by spatial geometry](graphics/B04959_03_11.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![通过空间几何体查询](graphics/B04959_03_11.jpg)'
- en: 'There are other types of spatial relationship provided by the Query object
    as constants:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 查询对象还提供了其他类型的空间关系作为常量：
- en: '`Query.SPATIAL_REL_CONTAINS`: This retrieves all the features that are entirely
    contained by the input geometry'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Query.SPATIAL_REL_CONTAINS`：这将检索完全包含在输入几何体中的所有要素'
- en: '`Query.SPATIAL_REL_INTERSECTS`: This is the default spatial relationship where
    all features that intersect with the input feature are fetched'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Query.SPATIAL_REL_INTERSECTS`：这是默认的空间关系，获取与输入要素相交的所有要素'
- en: '`Query.SPATIAL_REL_TOUCHES`: Here, all the features that touch the input geometry
    are fetched'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Query.SPATIAL_REL_TOUCHES`：在这里，获取所有与输入几何体相接触的要素'
- en: 'Normally, the input geometry maybe a selected feature from another feature,
    class, or geometry from the `draw` object, or in our case, the current map''s
    extent, as shown in the following code snippet:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，输入几何体可能是来自另一个要素、类或`draw`对象的几何体，或者在我们的情况下，当前地图的范围，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Executing the query
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行查询
- en: 'When we need to execute a query and retrieve the results, we need to invoke
    the query execution methods in the Query task object. A Query task can be executed
    for getting the actual features that satisfy the query. In some cases, we may
    only need the count of features that satisfy the query or the spatial extent of
    the query result. There are five types of query operation that can be performed
    on the query task object:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要执行查询并检索结果时，我们需要在查询任务对象中调用查询执行方法。可以执行查询任务以获取满足查询条件的实际特征。在某些情况下，我们可能只需要满足查询条件的特征数量或查询结果的空间范围。可以在查询任务对象上执行五种类型的查询操作：
- en: Query for Features
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询特征
- en: Query for Count
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询数量
- en: Query for Extent
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询范围
- en: Query for Object IDs
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询对象ID
- en: Query for Relationship
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系查询
- en: 'All operations accepts the Query object as the first argument and return a
    deferred object. Let''s understand the use of the three most important query task
    operations: Query for Count, Query for Extent and Query for Features.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 所有操作都接受查询对象作为第一个参数，并返回一个延迟对象。让我们了解三个最重要的查询任务操作的用途：查询数量，查询范围和查询特征。
- en: Querying for Count
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询数量
- en: 'When we just want the count of the features that satisfy the query condition,
    we can use this operation. The following screenshot shows the Query for Count
    operation on a set of Query Features, given a Query object (with a Query Extent).
    The result will be the count of features that satisfy the Query object:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们只想要满足查询条件的特征数量时，可以使用这个操作。以下屏幕截图显示了在一组查询特征上进行数量查询操作，给定一个查询对象（带有查询范围）。结果将是满足查询对象的特征数量：
- en: '![Querying for Count](graphics/B04959_03_12.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![查询数量](graphics/B04959_03_12.jpg)'
- en: Diagram illustrating Feature Querying by Count
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过数量查询特征的图示
- en: When we use the `executeForCount()` method of the query task, we still use the
    query object as the method argument. This can be an attribute query, a spatial
    query, or a combination of both. The main purpose of this method is to quickly
    assess the number of features a query operation returns. Sometimes, this may be
    the only information you need to display to the user.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用查询任务的`executeForCount()`方法时，仍然使用查询对象作为方法参数。这可以是属性查询、空间查询或两者的组合。这个方法的主要目的是快速评估查询操作返回的特征数量。有时，这可能是您需要向用户显示的唯一信息。
- en: Let's go ahead and create a UI to fetch the count of features that satisfy our
    query condition. The following screenshot shows a bootstrap panel with a text
    box to input the query text and the **Get Count** button. We have also provided
    another `div`, which is hidden. The `div` contains a label that shows the count
    of features.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个用户界面来获取满足我们查询条件的特征数量。以下屏幕截图显示了一个带有文本框输入查询文本和**获取数量**按钮的引导面板。我们还提供了另一个隐藏的`div`。`div`包含一个显示特征数量的标签。
- en: '![Querying for Count](graphics/B04959_03_13.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![查询数量](graphics/B04959_03_13.jpg)'
- en: 'Query execution should happen on clicking the **Get Count** button. When no
    input is provided in the query text box, the query will evaluate to a truthy expression;
    that is, the count of all the features within the map extent will be returned.
    The following code accomplishes just that:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**获取数量**按钮时应该执行查询操作。当在查询文本框中没有提供输入时，查询将评估为真值表达式；也就是说，将返回地图范围内所有特征的数量。以下代码就是实现这一点的：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code snippet, `on` is the event handler module provided by
    dojo (`dojo/on`). The `byId()` method of the `dom` module is used to get the reference
    of the `dom` element with the ID—`queryBtn`. We are executing the preceding piece
    of code on the `click` event of `queryBtn`. Notice that in the highlighted code,
    we handle the situation when we receive no input from the query textbox. The `executeForCount()`
    method returns a deferred. When the `Deferred` object is resolved, the `.then()`
    method is used to trigger the callback. Within the `.then` method, we have defined
    two functions; the first function is fired when the operation is successful, and
    the second function is fired when the operation throws an error. We can also use
    the `execute-for-count-complete` event on the `queryTask` object to retrieve the
    results.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，`on`是由dojo提供的事件处理程序模块（`dojo/on`）。`dom`模块的`byId()`方法用于获取具有ID—`queryBtn`的`dom`元素的引用。我们在`queryBtn`的`click`事件上执行了上述代码片段。请注意，在突出显示的代码中，我们处理了当查询文本框没有输入时的情况。`executeForCount()`方法返回一个延迟对象。当`Deferred`对象被解析时，使用`.then()`方法触发回调。在`.then`方法中，我们定义了两个函数；第一个函数在操作成功时触发，第二个函数在操作抛出错误时触发。我们还可以在`queryTask`对象上使用`execute-for-count-complete`事件来检索结果。
- en: The `result` object just returns the count number.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`result`对象只返回数量。'
- en: Refer to the following API documentation to get more information on the result
    object returned by this method—[https://developers.arcgis.com/javascript/jsapi/querytask-amd.html#event-execute-for-count-complete](https://developers.arcgis.com/javascript/jsapi/querytask-amd.html#event-execute-for-count-complete).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下API文档，以获取有关此方法返回的结果对象的更多信息—[https://developers.arcgis.com/javascript/jsapi/querytask-amd.html#event-execute-for-count-complete](https://developers.arcgis.com/javascript/jsapi/querytask-amd.html#event-execute-for-count-complete)。
- en: 'The result of our operation on the map will look like the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在地图上的操作结果将如下屏幕截图所示：
- en: '![Querying for Count](graphics/B04959_03_14.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![查询数量](graphics/B04959_03_14.jpg)'
- en: We have also introduced the **Get Features** button in the UI to retrieve the
    actual feature records that satisfy the query condition and display them in an
    HTML table. We will be executing the `execute()` method on the `queryTask` object
    to do this.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在用户界面中引入了**获取特征**按钮，以检索满足查询条件的实际特征记录，并在HTML表格中显示它们。我们将在`queryTask`对象上执行`execute()`方法来实现这一点。
- en: Query for Features
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询特征
- en: This method provides the maximum information about the features being queried.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法提供了有关正在查询的特征的最大信息。
- en: 'A figure illustrating the Query for Features operation is shown here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 查询特征操作的图示如下：
- en: '![Query for Features](graphics/B04959_03_15.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![查询要素](graphics/B04959_03_15.jpg)'
- en: The `execute()` method in the `QueryTask` object is used to Query for Features.
    This method returns a `Deferred` object. This success event handler returns a
    `Featureset` object. The `Featureset` object returns an array of features along
    with other ancillary information regarding the geometry type and the spatial reference
    of the features.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryTask`对象中的`execute()`方法用于查询要素。此方法返回一个`Deferred`对象。此成功事件处理程序返回一个`Featureset`对象。`Featureset`对象返回一个包含要素数组的数组，以及有关要素的几何类型和空间参考的其他辅助信息。'
- en: 'The feature set contains the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要素集包含以下内容：
- en: '**features**: The graphic array. Each item in the graphic array has the following
    properties:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**features**：图形数组。图形数组中的每个项目都具有以下属性：'
- en: '**attributes**: Name value pairs of fields and field values associated with
    the graphic'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**attributes**：与图形关联的字段和字段值的名称值对'
- en: '**geometry**: The geometry that defines the graphic'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**geometry**：定义图形的几何'
- en: '**geometryType**: The geometry type of the features.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**geometryType**：要素的几何类型。'
- en: '**spatialReference**: The Spatial Reference of the features.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**spatialReference**：要素的空间参考。'
- en: 'In our application, we will try to call the `execute` method on the click of
    a button, and we will construct an HTML string that will use the result called
    `FeatureSet` to display it as an HTML table. The following screenshot demonstrates
    how to iterate through the result feature set and create the HTML table string:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将尝试在单击按钮时调用`execute`方法，并构造一个HTML字符串，该字符串将使用称为`FeatureSet`的结果将其显示为HTML表。以下屏幕截图演示了如何遍历结果要素集并创建HTML表字符串：
- en: '![Query for Features](graphics/B04959_03_16.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![查询要素](graphics/B04959_03_16.jpg)'
- en: 'On clicking on the **Get Features** button, the Query object that was used
    to get the count of the features is used to execute this query operation too.
    So ideally, every time we change the query text or the map extent, the **Get Features**
    button and the HTML query results will be hidden, and we need to click on the
    **Get Count** button before clicking on the **Get Features** button. We have written
    a function that hides the div that shows the feature count as well as clear the
    HTML table. The code is shown as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**获取要素**按钮时，用于获取要素计数的查询对象也用于执行此查询操作。因此，理想情况下，每次更改查询文本或地图范围时，**获取要素**按钮和HTML查询结果将被隐藏，我们需要在单击**获取要素**按钮之前单击**获取计数**按钮。我们编写了一个函数，隐藏显示要素计数的div，并清除HTML表。代码如下所示：
- en: '[PRE14]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot illustrates our code in action on the map:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图展示了我们在地图上的代码运行情况：
- en: '![Query for Features](graphics/B04959_03_17.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![查询要素](graphics/B04959_03_17.jpg)'
- en: Query for Extent
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询范围
- en: 'When we would like to know the extent of the features satisfying a query, we
    can use this method. This will help us in many ways:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要知道满足查询的要素的范围时，我们可以使用这种方法。这将在许多方面帮助我们：
- en: We can get an idea about the spatial extent of the phenomena
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以了解现象的空间范围
- en: We can zoom the map to the extent of the features without actually receiving
    the features
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将地图缩放到要素的范围，而无需实际接收要素
- en: 'The following diagram illustrates the Query for the `Extent` operation:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了“范围”操作的查询：
- en: '![Query for Extent](graphics/B04959_03_18.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![查询范围](graphics/B04959_03_18.jpg)'
- en: Building and executing IdentifyTask
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和执行IdentifyTask
- en: '`IdentifyTask` can operate on multiple layers in a map service and fetch information
    from all the features intersecting with a given geometry. We will use IdentifyTask
    to click on the map and get the value of the wildfire potential at the clicked
    location. To execute `IdentifyTask`, we need to follow three steps:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`IdentifyTask`可以在地图服务中操作多个图层，并从与给定几何图形相交的所有要素中获取信息。我们将使用IdentifyTask在地图上单击并获取单击位置处的潜在野火价值。要执行`IdentifyTask`，我们需要遵循三个步骤：'
- en: Instantiate IdentifyTask.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化IdentifyTask。
- en: Construct the Identify parameters.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造Identify参数。
- en: Execute IdentifyTask.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行IdentifyTask。
- en: Instantiating IdentifyTask
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化IdentifyTask
- en: 'Instantiating IdentifyTask involves loading the required module and instantiating
    it with a map service URL. The modules required for executing `IdentifyTask` are
    the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化IdentifyTask涉及加载所需的模块并使用地图服务URL进行实例化。执行`IdentifyTask`所需的模块如下：
- en: '`esri/tasks/IdentifyTask`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`esri/tasks/IdentifyTask`'
- en: '`esri/tasks/IdentifyParameters`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`esri/tasks/IdentifyParameters`'
- en: 'We will be operating IdentifyTask on the Wildfire Potential Map service. The
    map service contains a single raster layer and pixel values representing wildfire
    potential levels. The following snippet shows how IdentifyTask is instantiated:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在野火潜力地图服务上操作IdentifyTask。地图服务包含单个栅格图层和表示野火潜力级别的像素值。以下代码片段显示了如何实例化IdentifyTask：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Constructing the identify parameters object
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造识别参数对象
- en: Identify parameters provides a lot of properties to define the identify operation
    being performed. While dealing with multiple layers, we can restrict the layers
    upon which identify can be performed by using the `layerIds` property. The `geometry`
    property lets us set the geometry that is used to select features in the map service
    upon which identify operates. In our application, we are using the map `click`
    point as the input geometry for the IdentifyParameter. When using a point geometry,
    we also need to define the value for the tolerance property in the IdentifyParameters.
    The tolerance value refers to the number of pixels around the input point geometry
    that can be considered as part of the input geometry.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Identify参数提供了许多属性来定义正在执行的识别操作。在处理多个图层时，我们可以使用`layerIds`属性来限制可以执行识别的图层。`geometry`属性让我们设置用于选择地图服务中的要素的几何图形。在我们的应用程序中，我们使用地图`click`点作为IdentifyParameter的输入几何图形。当使用点几何时，我们还需要为IdentifyParameters中的容差属性定义值。容差值是指可以被视为输入几何的一部分的输入点几何周围的像素数。
- en: 'In the following screenshot, we construct an identify parameter object, which
    is wrapped around by the map `click` event handler. The `mapPoint` property of
    the map `click` event handler provides the input geometry for the identify operation:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们构造了一个识别参数对象，该对象被地图`click`事件处理程序包裹。地图`click`事件处理程序的`mapPoint`属性为识别操作提供了输入几何对象：
- en: '![Constructing the identify parameters object](graphics/B04959_03_19.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![构造识别参数对象](graphics/B04959_03_19.jpg)'
- en: Executing IdentifyTask
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行IdentifyTask
- en: The `execute()` method of IdentifyTask can be used to execute the task. The
    `execute()` method returns the `Deferred` object, and the success callback of
    the `Deferred` object returns the `IdentifyResult` array object.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute()`方法可以用于执行IdentifyTask。`execute()`方法返回`Deferred`对象，`Deferred`对象的成功回调返回`IdentifyResult`数组对象。'
- en: 'An identify result represents a single identified feature from one of the layers
    in the map service. The object has the following properties:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 识别结果表示地图服务中一个图层中的单个已识别要素。该对象具有以下属性：
- en: '`displayFieldName`: This is the name of the layer''s primary display field'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`displayFieldName`：这是图层的主要显示字段的名称'
- en: '`feature`: A `feature` object contains an array object and a geometry object'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature`：`feature`对象包含一个数组对象和一个几何对象'
- en: '`layerId`: This is the unique ID of the layer that contains the feature'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layerId`：这是包含要素的图层的唯一ID'
- en: '`layerName`: This is the name of the layer'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layerName`：这是图层的名称'
- en: 'Since the identify result is an array object, and we are only showing one value,
    we will be taking only the first value from the identify result object (`result[0]`),
    as shown in the following screenshot. The value that we need to show is in an
    attribute field named `CLASS_DESC`. Since this value is prefixed by a class code
    separated from the class description by a colon (`:`) (for example, `5`: Very
    High), we will be separating the string based on the colon and use the description
    part alone.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于识别结果是一个数组对象，我们只显示一个值，我们将从识别结果对象中取出第一个值（`result[0]`），如下截图所示。我们需要显示的值在一个名为`CLASS_DESC`的属性字段中。由于这个值是由一个以冒号（`:`）分隔的类代码前缀和类描述组成的（例如，`5`：非常高），我们将根据冒号分隔字符串并仅使用描述部分。
- en: 'The following screenshot shows the code that is used to perform the identify
    operation as well as showing the identify result as a label for the `map` click
    location, which is represented by a pointer cursor:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了用于执行识别操作以及将识别结果显示为`map`点击位置的标签的代码，该位置由指针光标表示：
- en: '![Executing IdentifyTask](graphics/B04959_03_20.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![执行IdentifyTask](graphics/B04959_03_20.jpg)'
- en: Building and executing a Find task
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和执行查找任务
- en: 'A Find task is pretty much an attribute-based search on all the fields in a
    map service. Find task results are identical to IdentifyTask results with an extra
    value for `foundFieldName`, which indicates the field name in which the search
    text was found. Similar to Query task and IdentifyTask, the three steps to execute
    Find task are as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 查找任务基本上是对地图服务中所有字段进行基于属性的搜索。查找任务的结果与IdentifyTask的结果相同，只是多了一个`foundFieldName`的值，表示搜索文本所在的字段名称。与Query任务和IdentifyTask类似，执行查找任务的三个步骤如下：
- en: Instantiate a Find task.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个查找任务。
- en: Build Find parameters.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建查找参数。
- en: Executing a Find task.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行查找任务。
- en: Let's discuss these three steps one by one.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一讨论这三个步骤。
- en: Instantiating a Find task
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化查找任务
- en: 'To perform a Find task, the following modules need to be loaded:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行查找任务，需要加载以下模块：
- en: '`esri/tasks/FindTask`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`esri/tasks/FindTask`'
- en: '`esri/tasks/FindParameters`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`esri/tasks/FindParameters`'
- en: 'We need to provide the URL of a map service to instantiate a Find task. The
    following snippet shows how we will do this in our application:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要提供地图服务的URL来实例化查找任务。以下代码段显示了我们将如何在应用程序中执行此操作：
- en: '[PRE16]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Building the Find parameters
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建查找参数
- en: 'To construct the Find parameters, we need to use the `esri/task/FindParameters`
    module. The Find parameter module has properties such as `searchText`, `layerIds`,
    and `seachFields`, which let us define the Find task. The `searchText` property
    is the text that needs to be searched. This needs to come from a UI textbox. `layerIds`
    lets us define the `layerIds` upon which the Find task should operate. We can
    also restrict the fields upon which the search is performed. The following screenshot
    shows how we built the UI for the Find task and constructed the Find parameter
    object:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建查找参数，我们需要使用`esri/task/FindParameters`模块。查找参数模块具有诸如`searchText`、`layerIds`和`seachFields`之类的属性，让我们定义查找任务。`searchText`属性是需要搜索的文本，这需要来自UI文本框。`layerIds`让我们定义查找任务应该操作的`layerIds`。我们还可以限制进行搜索的字段。以下截图显示了我们如何构建查找任务的UI并构造查找参数对象：
- en: '![Building the Find parameters](graphics/B04959_03_21.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![构建查找参数](graphics/B04959_03_21.jpg)'
- en: Executing a Find task
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行查找任务
- en: 'The `execute()` method of `Find` task can be used to execute it. Calling this
    method will return a `Deferred` object, which will return a Find results object
    in its success callback function. We will try to build an HTML table, as we did
    for the Query task result, and display it in `FindTbl div`. The following lines
    of code were used to accomplish this:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`Find`任务的`execute()`方法可用于执行它。调用此方法将返回一个`Deferred`对象，在其成功回调函数中返回一个查找结果对象。我们将尝试构建一个HTML表格，就像我们为Query任务结果所做的那样，并在`FindTbl
    div`中显示它。以下代码行用于完成此操作：'
- en: '[PRE17]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the following screenshot, we can see that the search text has fetched that
    from two different fields, **Fire Name** and **State** when we inserted the search
    text `W`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到当我们插入搜索文本`W`时，搜索文本已从两个不同的字段**Fire Name**和**State**中获取：
- en: '![Executing a Find task](graphics/B04959_03_22.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![执行查找任务](graphics/B04959_03_22.jpg)'
- en: Building a feature table
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建要素表
- en: 'A feature table constructs a table, displays all the information of a given
    feature layer, and places it in a given `dom` element. A feature table is an Esri
    widget can be used by loading the `esri/dijit/FeatureTable` module. The module
    lets us choose the fields to display. The following screenshot shows how a feature
    table should be constructed and how it appears in the application:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要素表构建一个表，显示给定要素图层的所有信息，并将其放置在给定的`dom`元素中。要素表是Esri小部件，可以通过加载`esri/dijit/FeatureTable`模块来使用。该模块允许我们选择要显示的字段。下面的截图显示了如何构建要素表以及它在应用程序中的显示方式：
- en: '![Building a feature table](graphics/B04959_03_23.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![构建要素表](graphics/B04959_03_23.jpg)'
- en: Building popups
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建弹出窗口
- en: When users of your web application click on a feature of interest, they should
    be shown a bundle of useful information about the feature that they clicked on.
    Popups are the medium through which context-specific attribute information is
    shown to users. Popups complement the map's spatial information.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的Web应用程序的用户点击感兴趣的要素时，他们应该看到有关他们点击的要素的一系列有用信息。弹出窗口是向用户显示特定上下文属性信息的媒介。弹出窗口补充了地图的空间信息。
- en: The simplest popups just show all or selected attribute values. More advanced
    and intuitive popups make use of charts and images in the pop-up window.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的弹出窗口只显示所有或选定的属性值。更高级和直观的弹出窗口在弹出窗口中使用图表和图像。
- en: The modules that help to create popups are `esri/InfoTemplate`, `esri/dijit/PopupTemplate`,
    `esri/dijit/InfoWindow`, and `esri/dijit/Popup`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助创建弹出窗口的模块包括`esri/InfoTemplate`、`esri/dijit/PopupTemplate`、`esri/dijit/InfoWindow`和`esri/dijit/Popup`。
- en: '`esri/dijit/PopupTemplate` extends `esri/InfoTemplate`, and `esri/dijit/Popup`
    extends `esri/dijit/InfoWindow`. So, let''s deal with `InfoTemplate` briefly and
    move on to the `Popup` templates.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`esri/dijit/PopupTemplate`扩展了`esri/InfoTemplate`，而`esri/dijit/Popup`扩展了`esri/dijit/InfoWindow`。因此，让我们简要介绍一下`InfoTemplate`，然后转向`Popup`模板。'
- en: Building InfoTemplates
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建Infotemplates
- en: An `InfoTemplate` object can be created using placeholders. A placeholder is
    usually the attribute field name, starting off with a dollar (`$`) sign and surrounded
    by curly braces (`{}`), for example, `${Fieldname}`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用占位符创建`InfoTemplate`对象。占位符通常是属性字段名，以美元符号（`$`）开头，用大括号（`{}`）括起来，例如`${Fieldname}`。
- en: When we need to retrieve all the fields provided by the feature of interest,
    the fieldname can be substituted by `*`, for example, `${*}`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要检索感兴趣要素提供的所有字段时，字段名可以被`*`替换，例如`${*}`。
- en: 'The feature layers and Graphics object have the `InfoTemplate` property. `infotemplate`
    created could be set to these layers. The `InfoTemplate` constructor takes two
    arguments, title and content:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层和图形对象都有`InfoTemplate`属性。创建的`infotemplate`可以设置为这些图层。`InfoTemplate`构造函数接受两个参数，标题和内容：
- en: '| Modules | Values |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Module name | `esri/InfoTemplate` |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | `esri/InfoTemplate` |'
- en: '| Parent object | Feature layer, Graphic object, dynamic layer, and the Info
    window of the map |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 父对象 | 要素图层、图形对象、动态图层和地图的信息窗口 |'
- en: '| Constructor | `new InfoTemplate (title, content)` |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | `new InfoTemplate (title, content)` |'
- en: 'The following screenshot creates `infotemplate` for the `Active wildfire` feature
    layer, and it displays fields such as state name, fire name, and the areal extent
    of the wildfire feature being clicked in a popup. The title of `Infotemplate`
    is also created by the placeholders:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图为`Active wildfire`要素图层创建了`infotemplate`，并在弹出窗口中显示了州名、火灾名称和被点击的野火要素的面积范围等字段。`Infotemplate`的标题也是由占位符创建的：
- en: '![Building InfoTemplates](graphics/B04959_03_24.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![构建Infotemplates](graphics/B04959_03_24.jpg)'
- en: The code listings for this chapter can be found in the code folder named `B04959_03_CODE`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码清单可以在名为`B04959_03_CODE`的代码文件夹中找到。
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explained the different methods for searching and querying data.
    We built an application that could perform a Query task, a Find task, as well
    as Identify task. We also discovered the utility of the feature table called `dijit`
    along with `Infotemplates`. In the next chapter, we will see how to organize all
    the code into modularized widgets and use it in our application. We will also
    be discussing how to construct spatial queries that involve using the draw toolbar,
    and we will create input geometries that are defined by the user of the app.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了搜索和查询数据的不同方法。我们构建了一个应用程序，可以执行查询任务、查找任务，以及识别任务。我们还发现了名为`dijit`的要素表以及`Infotemplates`的实用性。在下一章中，我们将看到如何将所有代码组织成模块化小部件，并在应用程序中使用它。我们还将讨论涉及使用绘图工具栏的空间查询的构造，以及创建由应用程序用户定义的输入几何体。
