- en: Putting It All Together
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: At last! We can now build both the front- and backend of a website and use JavaScript
    on both sides! To bring it all together, let's build a small web application that
    uses an Express API with a React frontend and MongoDB.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 终于！我们现在可以构建网站的前端和后端，并在两侧使用JavaScript！为了将所有内容整合在一起，让我们构建一个小型Web应用程序，该应用程序使用带有React前端和MongoDB的Express
    API。
- en: 'For our final project, we''ll use our skills to create a database-backed travelogue
    or travel journal, complete with photos and stories. Our approach will be to take
    this from an initial visual layout, all the way through to the front- and backend
    code. If your HTML/CSS skills aren''t great, don''t worry: the code is provided
    for you at multiple instances so you can begin working on your project where you''d
    like.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最终项目，我们将利用我们的技能创建一个基于数据库的旅行日志或旅行日志，包括照片和故事。我们的方法是从最初的视觉布局一直到前端和后端代码。如果您的HTML/CSS技能不太好，不用担心：代码已经为您提供了多个实例，因此您可以从任何地方开始处理项目。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The project brief
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目简介
- en: Scaffolding – React
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚手架 - React
- en: The backend – setting up our API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端 - 设置我们的API
- en: The database – all CRUD operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库 - 所有CRUD操作
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be prepared to work with the code provided in the `chapter-19` directory of
    the repository, at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-19](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-19).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好使用存储库的`chapter-19`目录中提供的代码，网址为[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-19](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-19)。由于我们将使用命令行工具，还需要准备终端或命令行shell。我们需要一个现代浏览器和一个本地代码编辑器。
- en: The project brief
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目简介
- en: 'When beginning a real-world web project from start to finish, it''s important
    to gather the **requirements** up front. This can be presented in many forms:
    a verbal description, a bulleted list of features, a visual wireframe, a complete
    design document, or any combination of these. When examining requirements, it''s
    important to be as explicit as possible in order to minimize miscommunication,
    redundant or abandoned work, and a streamlined workflow. For this project, we''ll
    begin with visual comps.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从头到尾开始一个真实的Web项目时，重要的是要提前收集**要求**。这可以以许多形式呈现：口头描述，功能的项目列表，视觉线框图，完整的设计文档，或者这些的任何组合。在审查要求时，重要的是要尽可能明确，以减少误传、冗余或被放弃的工作，以及简化的工作流程。对于这个项目，我们将从视觉comp开始。
- en: If you've ever worked with a graphic designer, you're probably familiar with
    the term comp. A visual comp, short for *comprehensive layout*, is a design artifact
    that is a high-fidelity visual representation of the desired end state for a project.
    For example, a print project's comp would be a digital file with all the required
    assets ready to send to the printer for immediate use. For digital work, you may
    receive Adobe Photoshop, XD, or Sketch files, or many other types of design document
    formats.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经与平面设计师合作过，您可能熟悉术语comp。视觉comp，简称*全面布局*，是设计工件，是所需项目最终状态的高保真视觉表示。例如，印刷项目的comp将是一个数字文件，其中包含所有所需的资产，可立即发送给打印机使用。对于数字作品，您可能会收到Adobe
    Photoshop、XD或Sketch文件，或者许多其他类型的设计文档格式。
- en: 'Let''s take a look at the visuals so that we can then ascertain our requirements:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看一下视觉效果，以便随后确定我们的要求：
- en: '![](assets/781c2632-8646-488c-9b09-baf75f1b05cb.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/781c2632-8646-488c-9b09-baf75f1b05cb.png)'
- en: Figure 19.1 – Main page
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1 - 主页
- en: Our application will have *logged in* and *logged out* states. When logged out,
    the user will see a cover page and will be able to explore the travelogue's entries
    with navigation buttons. For a challenge, display a random entry on page load.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将具有*已登录*和*已注销*状态。注销时，用户将看到封面页面，并可以使用导航按钮浏览旅行日志的条目。作为挑战，在页面加载时显示一个随机条目。
- en: 'The login button in the top-left corner will lead to the next screen, the Log
    In screen:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 左上角的登录按钮将引导到下一个屏幕，即登录屏幕：
- en: '![](assets/87a4dcee-47fe-43d5-8a46-ce5ae7731142.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/87a4dcee-47fe-43d5-8a46-ce5ae7731142.png)'
- en: Figure 19.2 – Log In
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.2 - 登录
- en: The login page can be as simple or as complex as you'd like. Perhaps entering
    any username and password combination will work, or for an extra challenge, you
    could incorporate Google or Facebook authentication. You could even write your
    own authentication using your database to store credentials.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面可以简单也可以复杂。也许输入任何用户名和密码组合都可以工作，或者为了增加挑战，您可以整合Google或Facebook身份验证。您甚至可以编写自己的身份验证，使用您的数据库存储凭据。
- en: 'Once authenticated, we have a new button in the left bar: the dashboard button.
    This is what takes us to the various parts of the application:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦经过身份验证，我们在左侧栏有一个新按钮：仪表板按钮。这是带我们到应用程序的各个部分的地方：
- en: '![](assets/e5444286-3830-41b0-9a67-c5066473e8f6.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e5444286-3830-41b0-9a67-c5066473e8f6.png)'
- en: Figure 19.3 – Dashboard
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.3 - 仪表板
- en: 'When the Countries Visited button is clicked, we''ll display this vector map
    powered by the D3.js graphics library:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当单击“访问过的国家”按钮时，我们将显示由D3.js图形库提供支持的矢量地图：
- en: '![](assets/d9585ee2-43c7-49ee-a756-39fb460bd72c.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d9585ee2-43c7-49ee-a756-39fb460bd72c.png)'
- en: Figure 19.4 – Travel map
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.4 - 旅行地图
- en: The countries highlighted are controlled via a JSON manifest, fed by the database
    of entries.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的国家由数据库提供的JSON清单控制。
- en: 'And last but not least, the user needs to be able to write entries and insert
    photos:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，用户需要能够撰写条目并插入照片：
- en: '![](assets/ac1ad9cf-8341-409b-99e1-4477665ec581.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac1ad9cf-8341-409b-99e1-4477665ec581.png)'
- en: Figure 19.5 – New entry/edit entry screen
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.5 - 新条目/编辑条目屏幕
- en: We'll be using a JavaScript WYSIWYG (What you see is what you get) editor called
    Quill.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为Quill的JavaScript所见即所得（WYSIWYG）编辑器。
- en: As you build the app, feel free to take some liberties with the look and feel
    of it—customize it to make it your own! You might also want to add a few more
    features, such as a media library to manage uploaded photos, or a search function.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用程序时，可以随意对其外观和感觉进行一些自定义-使其成为您自己的！您可能还想添加一些其他功能，例如媒体库来管理上传的照片，或者搜索功能。
- en: Now that we have an idea of our visual layout, let's get started on the frontend
    of our project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了关于我们的视觉布局的想法，让我们开始着手项目的前端。
- en: Scaffolding – React
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚手架 - React
- en: 'Our project is a prime candidate for using React for our frontend, so let''s
    outline our requirements for the frontend: *One single React application with
    reusable components and **Hooks and context** for state saving*. Hooks are a new
    concept compared to our previous use of React. Added in React 16.8, Hooks are
    functions that allow you to manipulate the state and context for state management
    within a functional component.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目非常适合使用React来进行前端开发，因此让我们为前端制定我们的要求：*一个单一的React应用程序，具有可重用的组件和**Hooks和context**用于状态保存*。与我们以前使用React的方式相比，Hooks是一个新概念。在React
    16.8中添加的Hooks是允许您在函数组件中操作状态和上下文以进行状态管理的函数。
- en: In addition to our handcrafted React app, we'll incorporate a few additional
    pre-built libraries to simplify our project and to utilize ready-made tools. D3.js
    is a powerful graphics and data visualization library that we'll leverage for
    our map. Quill is a rich text editor that will allow you to write the entries
    with text formatting, and upload and place photos.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们手工制作的React应用程序，我们还将整合一些额外的预构建库，以简化我们的项目并利用现成的工具。D3.js是一个强大的图形和数据可视化库，我们将利用它来制作我们的地图。Quill是一个富文本编辑器，它将允许您使用文本格式编写条目，并上传和放置照片。
- en: It's up to you to decide whether you'd like to start with `npx create-react-app`
    or use the scaffolded code provided in the `Step 1` folder in the `chapter-19`
    directory of the GitHub repository.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由您决定是要从`npx create-react-app`开始，还是使用GitHub存储库的`chapter-19`目录中的`Step 1`文件夹中提供的脚手架代码。
- en: 'I''m going to make a few recommendations on additional packages to use; as
    you go through the project, feel free to add or subtract packages. I''ll be using
    the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我将对要使用的其他包提出一些建议；在项目进行过程中，可以随意添加或删除包。我将使用以下内容：
- en: Bootstrap (for layout)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引导（用于布局）
- en: '`d3`, `d3-queue`, and `topojson-client` (for our map)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3`，`d3-queue`和`topojson-client`（用于我们的地图）'
- en: '`node-sass` (for more efficient stylesheets using Sass)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node-sass`（使用Sass创建更高效的样式表）'
- en: '`quill` and `react-quilljs` (a WYSIWYG editor)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quill`和`react-quilljs`（一个所见即所得的编辑器）'
- en: '`react-router-dom` (a React extension for URL pathing made easy)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-router-dom`（一个使URL路径设置变得容易的React扩展）'
- en: '`react-cookie` (a package to easily use cookies)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`react-cookie`（一个方便使用cookie的包）'
- en: If you're starting from scratch, feel free to get set up with the `create-react-app`
    scaffold now, or begin using the `Step 1` directory. For the rest of this chapter,
    instructions are provided for you to follow along step by step.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从头开始，现在可以使用`create-react-app`脚手架进行设置，或者开始使用`Step 1`目录。在本章的其余部分，将为您提供逐步跟随的说明。
- en: 'Inside the `Step 1` directory, you''ll find the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Step 1`目录中，您将找到以下内容：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s a standard `create-react-app` scaffold, with a few differences from what
    we''ve done before. Let''s examine one component: the header.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准的`create-react-app`脚手架，与我们以前所做的有一些不同。让我们来看一个组件：标题。
- en: Functional components
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数组件
- en: 'Here''s the code for our `Header.js` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`Header.js`文件的代码：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should notice a few things: first of all, the filename ends in `js`, *not*
    `jsx`. Next, our component is a function that returns HTML, versus a class extending
    `React.Component`. While both class-based and functional components are valid
    in React, functional components are considered more modern when using React, especially
    with the latest methods to leverage state and context. We won''t get into the
    difference between functional and object-oriented programming right now, but suffice
    to say there are differences to be aware of. You can find a useful resource on
    these differences at the end of the chapter.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意到一些事情：首先，文件名以`js`结尾，而不是`jsx`。其次，我们的组件是一个返回HTML的函数，而不是扩展`React.Component`的类。虽然在React中，基于类和函数的组件都是有效的，但在使用React时，特别是使用最新的方法来利用状态和上下文时，函数组件被认为更现代。我们现在不会深入讨论函数和面向对象编程之间的区别，但可以说有一些需要注意的区别。您可以在本章末找到有关这些区别的有用资源。
- en: Next steps
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步
- en: To progress the app to the next stage, consider the functional requirements
    we laid out. A good next step may be to implement a login system. At this point,
    you probably would neither want nor need to actually validate credentials, so
    a dummy login page will suffice. You have the markup in `Login/Login.js`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要将应用程序推进到下一个阶段，考虑我们制定的功能要求。一个很好的下一步可能是实现一个登录系统。在这一点上，您可能既不想也不需要实际验证凭据，因此一个虚拟的登录页面就足够了。您可以在`Login/Login.js`中找到标记。
- en: 'The approach we''re going to take is to use **Hooks** and **context**. Since
    this is a fairly involved topic, we won''t get into all the details here, but
    there are plenty of articles explaining the concepts. Here''s one: [https://www.digitalocean.com/community/tutorials/react-crud-context-hooks](https://www.digitalocean.com/community/tutorials/react-crud-context-hooks).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要采取的方法是使用**Hooks**和**context**。由于这是一个相当复杂的主题，我们在这里不会详细介绍所有细节，但有很多文章解释了这些概念。这是其中一个：[https://www.digitalocean.com/community/tutorials/react-crud-context-hooks](https://www.digitalocean.com/community/tutorials/react-crud-context-hooks)。
- en: 'We''ll go through one example of context and a couple of examples of Hooks
    to get you started:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个上下文示例和一些Hooks示例来帮助您入门：
- en: 'First, we need to create a `UserContext.js` file, which will help track our
    login state throughout the life cycle of our user interaction. The code itself
    is quite simple:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个`UserContext.js`文件，它将帮助我们在用户交互的整个生命周期中跟踪我们的登录状态。代码本身非常简单：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'React''s **Context API** is a method of providing stateful information to multiple
    components. Notice how I said "provide"? That''s exactly what we need to do next:
    provide our `App.js` context. We wrap the component as such:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: React的**Context API**是一种向多个组件提供有状态信息的方法。注意我说的“提供”？这正是我们接下来需要做的：提供我们的`App.js`上下文。我们将组件包装如下：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice how we've imported `UserContext` and wrapped our `App` component in the
    `UserContext.Provider` tags with the `loginHook` stateful value provided to it,
    and thereby to its children.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何导入`UserContext`并在`UserContext.Provider`标签中包装我们的`App`组件，并向其提供`loginHook`有状态值，从而传递给其子组件。
- en: 'Our `Main.js` file needs some changes too. Take a look at this snippet:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`Main.js`文件也需要一些更改。看一下这段代码：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We need to import `useContext` and `useCookies` from React and `react-cookies`,
    respectively, and then we can use these **Hooks** to work with our login state.
    In addition to the internal context, we''re also going to store our login status
    within a cookie to allow returning sessions to remain logged in. We also want
    to import `useEffect` from React for our next step:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从React和`react-cookies`中分别导入`useContext`和`useCookies`，然后我们可以使用这些**Hooks**来处理我们的登录状态。除了内部上下文之外，我们还将在cookie中存储我们的登录状态，以便返回会话时保持登录状态。我们还需要从React中导入`useEffect`作为下一步：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Do you remember how, in previous chapters, we reacted to the mount states of
    React components directly with `componentDidMount()`? With React Hooks, we can
    use the `useEffect` Hook to work with the state of our component. Here, we're
    going to ensure that our user context (`loggedIn`) and the `logged-in` cookie are
    set appropriately.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否还记得在以前的章节中，我们是如何直接使用`componentDidMount()`来对React组件的挂载状态做出反应的？使用React Hooks，我们可以使用`useEffect`
    Hook来处理我们组件的状态。在这里，我们将确保我们的用户上下文（`loggedIn`）和`logged-in` cookie被适当设置。
- en: Our `setOrCheckLoggedIn` function also needs to be passed to other components,
    namely `Toolbar` and `Login`. Set it as the `doLogin` prop.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`setOrCheckLoggedIn`函数还需要传递给其他组件，即`Toolbar`和`Login`。将其设置为`doLogin`属性。
- en: 'From this point forward, when we include the context of `UserContext`, we can
    rely on the `loggedIn` state variable to determine whether or not our user is
    logged in. For example, our simple `Login` component''s logic could utilize these
    Hooks as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，当我们包括`UserContext`的上下文时，我们可以依赖`loggedIn`状态变量来确定我们的用户是否已登录。例如，我们简单的`Login`组件的逻辑可以利用这些Hooks如下：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Fairly straightforward! First, we get our context and upon clicking the `Go` button,
    we flip the context. You should incorporate similar logic in the `Toolbar.js` file
    for the login icon to also handle logging out.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 相当简单！首先，我们获取我们的上下文，并在点击“Go”按钮时，翻转上下文。您应该在`Toolbar.js`文件中也加入类似的逻辑，以便登录图标也能处理登出。
- en: Now, we're going to need a backend to interact with our frontend and broker
    the transactions with the MongoDB database, which will store our story entries
    and possibly our user authentication data. It will also be necessary to create
    an endpoint to upload images, as frontend code alone *cannot* write to a server's
    filesystem.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个后端与我们的前端进行交互，并与MongoDB数据库进行交易，该数据库将存储我们的故事条目和可能的用户身份验证数据。还需要创建一个端点来上传图像，因为仅有前端代码是*无法*写入服务器文件系统的。
- en: The backend – setting up our API
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后端 - 设置我们的API
- en: 'Let''s catalog the endpoints we''ll need to make our travelogue work:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出我们需要使我们的旅行日志工作的端点：
- en: '*Read (GET):* Like most APIs, we''ll need an endpoint to read entries. We won''t
    force authentication or being logged in for this.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*读取（GET）：*像大多数API一样，我们需要一个端点来读取条目。对于这一点，我们不会强制进行身份验证或登录。'
- en: '*Write (POST):* This endpoint will be used for both creating a new trip and
    editing existing ones.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*写入（POST）：*此端点将用于创建新的旅行和编辑现有的旅行。'
- en: '*Upload (POST):* We''ll need an endpoint to call from our frontend in order
    to upload photos.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*上传（POST）：*我们需要一个端点从我们的前端调用以上传照片。'
- en: '*Login (POST) (Optional):* If you''d like to take your authentication into
    your own hands, create a login endpoint that can use credentials from the database
    or a social-media login endpoint.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*登录（POST）（可选）：*如果您想自己处理身份验证，创建一个登录端点，可以使用数据库或社交媒体登录端点的凭据。'
- en: '*Media (GET) (Optional):* It will be useful to have an API that lists all of
    the media files uploaded to your server.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*媒体（GET）（可选）：*有一个列出所有上传到服务器的媒体文件的API将是有用的。'
- en: '*Countries (GET) (Optional):* It will also be a good idea to have an endpoint
    specifically for listing the countries you''ve visited to power your world map.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*国家（GET）（可选）：*为列出您访问过的国家提供一个特定的端点也是一个好主意，以支持您的世界地图。'
- en: You may find yourself creating more endpoints as you work, and that's fine!
    It's always a good idea to plan your API from start to finish, but if you need
    to make changes along the way to make your life easier with helper endpoints or
    other parts, feel free.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作过程中，您可能会发现自己创建更多的端点，这很正常！从头到尾规划您的API总是一个好主意，但如果您需要在途中进行更改以便通过辅助端点或其他部分更轻松地完成工作，那也是可以的。
- en: We're ready to move on to the `Step 3` directory in our repository.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好进入我们存储库中的`Step 3`目录了。
- en: API as a proxy – Step 3
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API作为代理 - 第3步
- en: 'Because we''re using a React frontend, we''ll revisit the idea of using Express
    as a backend with React proxying our API requests, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在使用React前端，我们将重新考虑使用Express作为后端，React代理我们的API请求，如下所示：
- en: 'The first thing we need to do is to tell our system to use a proxy by adding
    this line to our `package.json`: `"proxy": "http://localhost:5000"`.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们需要做的第一件事是告诉我们的系统通过在我们的`package.json`中添加这一行来使用代理：`"proxy": "http://localhost:5000"`。'
- en: After adding that, restart React (you'll notice that our frontend homepage has
    changed; we'll get to that in a moment) and then, in the `api` directory, execute
    `npm install` in the `api` directory and then `npm start`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加后，重新启动React（您会注意到我们的前端主页已经改变；我们马上就会解决这个问题），然后在`api`目录中，执行`npm install`，然后在`api`目录中执行`npm
    start`。
- en: 'We should test our backend to be sure our API is responding. Add this as a
    test to the `App.js` file after the imports:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该测试我们的后端，确保我们的API有响应。将这作为一个测试添加到`App.js`文件的导入后：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This very basic `fetch` call should call the `routes/index.js` component''s `get`
    method in our API:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个非常基本的`fetch`调用应该调用我们API中的`routes/index.js`组件的`get`方法：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point, our console should display `OK`. If you have any problems at
    this stage, it would be advisable to debug them now.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的控制台应该显示`OK`。如果你在这个阶段遇到任何问题，最好现在调试它们。
- en: 'We know we''ll be setting up a database to handle our data, but for the time
    being, we can scaffold our API''s methods, as you can see in `routes/index.js`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们知道我们将设置一个数据库来处理我们的数据，但目前，我们可以搭建我们的API方法，就像你在`routes/index.js`中看到的那样：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that we've made the scaffold of our login system in **Step 2**, I've made
    a few alterations to the `Step 3` directory. As mentioned before, our homepage
    is a little different in that it's the index page of the travelogue, used to display
    a story while the user is logged out.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在**步骤2**中搭建了我们的登录系统，我对`步骤3`目录进行了一些修改。如前所述，我们的主页有点不同，因为它是旅行日志的首页，用于在用户注销时显示故事。
- en: 'Examine the `Story/Story.js` component next:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来检查`Story/Story.js`组件：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Yes, another dummy API call to our backend! This call is also a simple GET request,
    so let's do something a bit more involved.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，另一个虚拟API调用到我们的后端！这个调用也是一个简单的GET请求，所以让我们做一些更复杂的事情。
- en: 'Go ahead and log in to the site and you''ll see something different on your
    dashboard:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续登录到网站，你会在你的仪表板上看到一些不同的东西：
- en: '![](assets/316b7bc5-3a97-4cac-a510-5695764d85c1.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/316b7bc5-3a97-4cac-a510-5695764d85c1.png)'
- en: Figure 19.6 – Our dashboard is taking shape...
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.6 - 我们的仪表板正在成形...
- en: 'Great, now we have a full dashboard. Click the ADD TRIP button and you''ll
    be presented with an editor, as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很好，现在我们有一个完整的仪表板。点击“添加行程”按钮，你将看到一个编辑器，如下所示：
- en: '![](assets/906c1808-d284-4f62-beaa-176587980d84.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/906c1808-d284-4f62-beaa-176587980d84.png)'
- en: Figure 19.7 – Our text editor
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.7 - 我们的文本编辑器
- en: If you enter rich text in the editor and save it, you'll see a response in your
    console from the API with the submitted data. From there, we need to work with
    our API to save the data to our database. So... last, but not least, we'll need
    to set up our database.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在编辑器中输入富文本并保存它，你会在控制台中看到来自API的提交数据的响应。从那里，我们需要与我们的API一起工作，将数据保存到我们的数据库中。所以...最后，但并非最不重要的，我们需要设置我们的数据库。
- en: The database – all CRUD operations
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库 - 所有CRUD操作
- en: We will, of course, need a datastore for our create, read, update, and delete
    functionality, so let's return to MongoDB in order to store these documents. You
    can refer back to [Chapter 18](b36b27d1-f6cf-4382-ac73-f21a1aeabd3d.xhtml), *Node.js
    and MongoDB,* if you need to refresh your memory on getting set up.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要一个数据存储库来进行创建、读取、更新和删除功能，所以让我们返回到MongoDB来存储这些文档。如果需要刷新你在设置方面的记忆，你可以参考[第18章](b36b27d1-f6cf-4382-ac73-f21a1aeabd3d.xhtml)，*Node.js和MongoDB*。
- en: To get started with setting up a database from scratch, it helps to think of
    the database structure that you intend to use. While MongoDB doesn't require a
    schema, it's still a good idea to plan your MongoDB documents so that you're not
    being arbitrary with functionality or naming between sections.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要从头开始设置数据库，有助于考虑你打算使用的数据库结构。虽然MongoDB不需要模式，但计划你的MongoDB文档仍然是一个好主意，这样你就不会在各个部分之间的功能或命名上随意。
- en: 'Here''s an idea of what each collection might look like:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每个集合可能看起来像的一个想法：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It's good to keep your database simple, but remember that you can always expand
    on it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 保持数据库简单是好的，但记住你总是可以扩展它。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Now, of course, I couldn''t just *hand* you a final project, could I? In this
    chapter, we scaffolded our travelogue—the rest is up to you. There are a few pieces
    yet to do to have a fully functional project. After all, we haven''t fully adhered
    to our visual comps, have we? Here are some ideas of what kinds of functionalities
    to implement in order to complete the project:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我不能只是*交给*你一个最终项目，对吧？在这一章中，我们搭建了我们的旅行日志 - 其余的就看你了。还有一些功能尚未完成，以便拥有一个完全功能的项目。毕竟，我们还没有完全遵守我们的视觉设计，对吧？以下是一些关于要实现哪些功能的想法，以完成项目：
- en: Persist information to the database.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将信息持久化到数据库。
- en: Work on image uploading and saving.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作在图像上传和保存上。
- en: Edit existing articles.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑现有文章。
- en: Create the `countries` endpoint to populate the D3.js map.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`countries`端点以填充D3.js地图。
- en: Enable true login.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用真正的登录。
- en: Streamline the user journey.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化用户旅程。
- en: When complete, this project will be a piece for your portfolio to show how *you*,
    a Python developer, mastered JavaScript. From the beginnings of datatypes, grammar,
    loops, and Node.js, to finally creating a fully functional project, you've come
    a long way.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，这个项目将成为你的作品集中的一个作品，展示了*你*，一个Python开发者，如何掌握JavaScript。从数据类型、语法、循环和Node.js的开始，到最终创建一个完全功能的项目，你已经走了很长的路。
- en: It's with gratitude that I thank you for accompanying me on this journey! Keep
    learning, and **live long and prosper**.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我由衷地感谢你陪伴我走过这段旅程！继续学习，**长寿繁荣**。
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: A useful resource on the differences between functional programming and object-oriented
    programming can be found at [https://www.geeksforgeeks.org/difference-between-functional-programming-and-object-oriented-programming/](https://www.geeksforgeeks.org/difference-between-functional-programming-and-object-oriented-programming/).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 关于函数式编程和面向对象编程之间的区别的有用资源可以在[https://www.geeksforgeeks.org/difference-between-functional-programming-and-object-oriented-programming/](https://www.geeksforgeeks.org/difference-between-functional-programming-and-object-oriented-programming/)找到。
