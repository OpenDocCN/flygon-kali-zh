["```js\n// TextDropdown.js\nclass TextDropdown extends GenericDropdownComponent {\n  //...\n}\n\n// ImageDropdown.js\nclass ImageDropdown extends GenericDropdownComponent {\n\n}\n```", "```js\nclass IssuerOOIDExtractor {\n  static makeExtractor(issuerInfoInterface) {\n    return raw => {\n      const infos = [];\n      const cleansed = raw\n        .replace(/[_\\-%*]/g, '')\n        .replace(/\\bo(\\d+?)\\b/g, ($0, id) => {\n          if (issuerInfoInterface) {\n            infos.push(issuerInfoInterface.get(id));\n          }\n          return `[[ ${id} ]]`;\n        })\n        .replace(/^[\\s\\S]*?(\\[\\[.+\\]\\])[\\s\\S]*$/, '$1');\n      return { raw, cleansed, data: infos };\n    };\n  }\n}\n```", "```js\ndescribe('IssuerOOIDExtractor.makeExtractor', () => {\n  it('Creates a function (the extractor)', () => {\n    expect(typeof IssuerOOIDExtractor.makeExtractor()).toBe('function');\n  });\n});\n```", "```js\nconst extractor = IssuerOOIDExtractor.makeExtractor();\n\nit('Extracts a single OOID of the form oNNNN', () => {\n  expect(extractor('o1234')).toEqual({\n    raw: 'o1234',\n    cleansed: '[[ 1234 ]]',\n    data: []\n  });\n});\n```", "```js\nit('Extracts multiple OOIDs of the form oNNNN', () => {\n  expect(extractor('o0012 o0034 o0056 o0078')).toEqual({\n    raw: 'o0012 o0034 o0056 o0078',\n    cleansed: '[[ 0012 ]] [[ 0034 ]] [[ 0056 ]] [[ 0078 ]]',\n    data: []\n  });\n});\n```", "```js\n PASS ./IssuerOOIDExtractor.test.js\n  IssuerOOIDExtractor.makeExtracator\n    \u2713 Creates a function (the extractor) (3ms)\n    The extractor\n      \u2713 Extracts a single OOID of the form oNNNN (1ms)\n      \u2713 Extracts multiple OOIDs of the form oNNNN (1ms)\n```", "```js\n@@ -17,6 +17,10 @@ class GalleryImage {\n  render() {\n\n+   if (/\\/VIDEO\\//.test(this.props.url)) {\n+     return <video src={this.props.url} />;\n+   }\n+\n    return <img src={this.props.url} />\n\n  }\n```", "```js\nimport { mount } from 'enzyme';\nimport GalleryImage from './GalleryImage';\n\ndescribe('GalleryImage', () => {\n  it('Renders a <VIDEO> when URL contains \"/VIDEO/\"', () => {\n    const rendered = mount(\n      <GalleryImage url=\"https://cdn.example.org/VIDEO/1234\" />\n    );\n    expect(rendered.find('video')).to.have.lengthOf(1);\n  });\n  it('Renders a <IMG> when URL contains \"/IMAGE/\"', () => {\n    const rendered = mount(\n      <GalleryImage url=\"https://cdn.example.org/IMAGE/1234\" />\n    );\n    expect(rendered.find('img')).to.have.lengthOf(1);\n  });\n});\n```", "```js\nimport YOORL from 'yoorl';\nYOORL.parse(\n  new YOORL.URL.String('http://foo.com/abc/?x=123'),\n  { parseSearch: true }\n).parts();\n```", "```js\n{\n  protocol: 'http',\n  hostname: 'foo.com',\n  pathname: '/abc',\n  search: { x: 123 }\n}\n```", "```js\n// URLUtils.js\nimport YOORL from 'yoorl';\nexport default {\n  parse(url) {\n    return YOORL.parse(\n      new YOORL.URL.String(url)\n    ).parts();\n  }\n};\n```", "```js\nimport URLUtils from './URLUtils';\n\nURLUtils.parse('http://foo.com/abc/?x=123'); // Easy!\n```"]