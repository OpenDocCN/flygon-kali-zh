- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Querying and Manipulating Data Using LINQ
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ查询和操作数据
- en: This chapter is about **Language INtegrated Query** (**LINQ** ) expressions.
    LINQ is a set of language extensions that add the ability to work with sequences
    of items and then filter, sort, and project them into different outputs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了**语言集成查询**（**LINQ**）表达式。LINQ是一组语言扩展，它增加了处理项目序列的能力，然后将它们过滤、排序和投影到不同的输出中。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Writing LINQ expressions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写LINQ表达式
- en: Working with sets using LINQ
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LINQ处理集合
- en: Using LINQ with EF Core
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LINQ与EF Core
- en: Sweetening LINQ syntax with syntactic sugar
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用语法糖使LINQ语法更加美观
- en: Using multiple threads with parallel LINQ
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用并行LINQ的多个线程
- en: Creating your own LINQ extension methods
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自己的LINQ扩展方法
- en: Working with LINQ to XML
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LINQ处理XML
- en: Writing LINQ expressions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写LINQ表达式
- en: Although we wrote a few LINQ expressions in *Chapter 10* , *Working with Data
    Using Entity Framework Core* , they weren't the focus, and so I didn't properly
    explain how LINQ works, so let's now take time to properly understand them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在*第10章*，*使用Entity Framework Core处理数据*中写了一些LINQ表达式，但它们不是重点，所以我没有正确解释LINQ的工作原理，所以现在让我们花时间来正确理解它们。
- en: What makes LINQ?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是LINQ？
- en: 'LINQ has several parts; some are required, and some are optional:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: LINQ有几个部分；一些是必需的，一些是可选的：
- en: '**Extension methods (required)** : These include examples such as `Where` ,
    `OrderBy` , and `Select` . These are what provide the functionality of LINQ.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展方法（必需）**：这些包括`Where`，`OrderBy`和`Select`等示例。这些是提供LINQ功能的内容。'
- en: '**LINQ providers (required)** : These include LINQ to Objects for processing
    in-memory objects, LINQ to Entities for processing data stored in external databases
    and modeled with EF Core, and LINQ to XML for processing data stored as XML. These
    providers are what execute LINQ expressions in a way specific to different types
    of data.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LINQ提供程序（必需）**：这些包括用于处理内存中对象的LINQ to Objects，用于处理存储在外部数据库中并使用EF Core建模的数据的LINQ
    to Entities，以及用于处理存储为XML的数据的LINQ to XML。这些提供程序以特定于不同类型数据的方式执行LINQ表达式。'
- en: '**Lambda expressions (optional)** : These can be used instead of named methods
    to simplify LINQ queries, for example, for the conditional logic of the `Where`
    method for filtering.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lambda表达式（可选）**：这可以用来简化LINQ查询，例如用于`Where`方法的条件逻辑的命名方法。'
- en: '**LINQ query comprehension syntax (optional)** : These include C# keywords
    like `from` , `in` , `where` , `orderby` , `descending` , and `select` . These
    are aliases for some of the LINQ extension methods, and their use can simplify
    the queries you write, especially if you already have experience with other query
    languages, such as **Structured Query Language** (**SQL** ).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LINQ查询理解语法（可选）**：这些包括C#关键字，如`from`，`in`，`where`，`orderby`，`descending`和`select`。这些是一些LINQ扩展方法的别名，它们的使用可以简化您编写的查询，特别是如果您已经有其他查询语言（如**结构化查询语言**（**SQL**））的经验。'
- en: When programmers are first introduced to LINQ, they often believe that LINQ
    query comprehension syntax is LINQ, but ironically, that is one of the parts of
    LINQ that is optional!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序员首次接触LINQ时，他们经常认为LINQ查询理解语法就是LINQ，但具有讽刺意味的是，那是LINQ的可选部分之一！
- en: Building LINQ expressions with the Enumerable class
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Enumerable类构建LINQ表达式
- en: The LINQ extension methods, such as `Where` and `Select` , are appended by the
    `Enumerable` static class to any type, known as a **sequence** , that implements
    `IEnumerable<T>` .
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如`Where`和`Select`之类的LINQ扩展方法是由`Enumerable`静态类附加到任何实现`IEnumerable<T>`的类型（称为**序列**）上的。
- en: For example, an array of any type implements the `IEnumerable<T>` class, where
    `T` is the type of item in the array. This means that all arrays support LINQ
    to query and manipulate them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，任何类型的数组都实现了`IEnumerable<T>`类，其中`T`是数组中的项目类型。这意味着所有数组都支持LINQ来查询和操作它们。
- en: All generic collections, such as `List<T>` , `Dictionary<TKey, TValue>` , `Stack<T>`
    , and `Queue<T>` , implement `IEnumerable<T>` , so they can be queried and manipulated
    with LINQ too.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有泛型集合，如`List<T>`，`Dictionary<TKey, TValue>`，`Stack<T>`和`Queue<T>`，都实现了`IEnumerable<T>`，因此它们也可以使用LINQ进行查询和操作。
- en: '`Enumerable` defines more than 50 extension methods, as summarized in the following
    table:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Enumerable`定义了50多个扩展方法，如下表所总结的：'
- en: '| Method(s) | Description |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| `First` , `FirstOrDefault` , `Last` , `LastOrDefault` | Get the first or
    last item in the sequence or throw an exception, or return the default value for
    the type, for example, `0` for an `int` and `null` for a reference type, if there
    is not a first or last item. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `First`，`FirstOrDefault`，`Last`，`LastOrDefault` | 获取序列中的第一个或最后一个项目，或抛出异常，或者如果没有第一个或最后一个项目，则返回类型的默认值，例如`int`的`0`和引用类型的`null`。
    |'
- en: '| `Where` | Return a sequence of items that match a specified filter. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `Where` | 返回与指定过滤器匹配的项目序列。 |'
- en: '| `Single` , `SingleOrDefault` | Return an item that matches a specific filter
    or throw an exception, or return the default value for the type if there is not
    exactly one match. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `Single`，`SingleOrDefault` | 返回与特定过滤器匹配的项目，或抛出异常，或者如果没有完全匹配，则返回类型的默认值。 |'
- en: '| `ElementAt` , `ElementAtOrDefault` | Return an item at a specified index
    position or throw an exception, or return the default value for the type if there
    is not an item at that position. New in .NET 6 are overloads that can be passed
    an `Index` instead of an `int` , which is more efficient when working with `Span<T>`
    sequences. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `ElementAt`，`ElementAtOrDefault` | 返回指定索引位置的项目或抛出异常，或者如果该位置没有项目，则返回类型的默认值。在.NET
    6中，新增了可以传递`Index`而不是`int`的重载，这在使用`Span<T>`序列时更有效。'
- en: '| `Select` , `SelectMany` | Project items into a different shape, that is,
    a different type, and flatten a nested hierarchy of items. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `Select`，`SelectMany` | 将项目投影到不同的形状，即不同的类型，并展平嵌套的项目层次结构。 |'
- en: '| `OrderBy` , `OrderByDescending` , `ThenBy` , `ThenByDescending` | Sort items
    by a specified field or property. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `OrderBy`，`OrderByDescending`，`ThenBy`，`ThenByDescending` | 按指定字段或属性对项目进行排序。
    |'
- en: '| `Reverse` | Reverse the order of the items. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `Reverse` | 反转项目的顺序。 |'
- en: '| `GroupBy` , `GroupJoin` , `Join` | Group and/or join two sequences. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `GroupBy` , `GroupJoin` , `Join` | 对两个序列进行分组和/或连接。 |'
- en: '| `Skip` , `SkipWhile` | Skip a number of items; or skip while an expression
    is `true` . |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `Skip` , `SkipWhile` | 跳过一定数量的项目；或者在表达式为`true`时跳过。 |'
- en: '| `Take` , `TakeWhile` | Take a number of items; or take while an expression
    is `true` . New in .NET 6 is a `Take` overload that can be passed a `Range` ,
    for example, `Take(range: 3..^5)` meaning take a subset starting 3 items in from
    the start and ending 5 items in from the end, or instead of `Skip(4)` you could
    use `Take(4..)` . |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `Take` , `TakeWhile` | 取一定数量的项目；或者在表达式为`true`时取。在.NET 6中，新增了一个可以传递`Range`的`Take`重载，例如，`Take(range:
    3..^5)`表示从开头开始取3个项目，从末尾结束取5个项目，或者可以使用`Take(4..)`代替`Skip(4)`。 |'
- en: '| `Aggregate` , `Average` , `Count` , `LongCount` , `Max` , `Min` , `Sum` |
    Calculate aggregate values. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `Aggregate` , `Average` , `Count` , `LongCount` , `Max` , `Min` , `Sum` |
    计算聚合值。 |'
- en: '| `TryGetNonEnumeratedCount` | `Count()` checks if a `Count` property is implemented
    on the sequence and returns its value, or it enumerates the entire sequence to
    count its items. New in .NET 6 is this method that only checks for `Count` and
    if it is missing it returns `false` and sets the `out` parameter to `0` to avoid
    a potentially poor-performing operation. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `TryGetNonEnumeratedCount` | `Count()`检查序列上是否实现了`Count`属性并返回其值，或者枚举整个序列以计算其项目数。在.NET
    6中，新增了这个方法，它只检查`Count`，如果缺少它，则返回`false`并将`out`参数设置为`0`，以避免潜在的性能低下的操作。 |'
- en: '| `All` , `Any` , `Contains` | Return `true` if all or any of the items match
    the filter, or if the sequence contains a specified item. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `All` , `Any` , `Contains` | 如果所有项目或任何项目与过滤器匹配，或者序列包含指定项目，则返回`true`。 |'
- en: '| `Cast` | Cast items into a specified type. It is useful to convert non-generic
    objects to a generic type in scenarios where the compiler would otherwise complain.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `Cast` | 将项目转换为指定类型。在编译器会报错的情况下，将非泛型对象转换为泛型类型非常有用。 |'
- en: '| `OfType` | Remove items that do not match a specified type. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `OfType` | 删除不匹配指定类型的项目。 |'
- en: '| `Distinct` | Remove duplicate items. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `Distinct` | 删除重复的项目。 |'
- en: '| `Except` , `Intersect` , `Union` | Perform operations that return sets. Sets
    cannot have duplicate items. Although the inputs can be any sequence and so the
    inputs can have duplicates, the result is always a set. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `Except` , `Intersect` , `Union` | 执行返回集合的操作。集合不能有重复的项目。虽然输入可以是任何序列，因此输入可以有重复项，但结果始终是一个集合。
    |'
- en: '| `Chunk` | Divide a sequence into sized batches. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `Chunk` | 将序列分成指定大小的批次。 |'
- en: '| `Append` , `Concat` , `Prepend` | Perform sequence-combining operations.
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `Append` , `Concat` , `Prepend` | 执行序列组合操作。 |'
- en: '| `Zip` | Perform a match operation on two sequences based on the position
    of items, for example, the item at position 1 in the first sequence matches the
    item at position 1 in the second sequence. New in .NET 6 is a match operation
    on three sequences. Previously you would have had to run the two sequences overload
    twice to achieve the same goal. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `Zip` | 根据项目的位置执行两个序列的匹配操作，例如，第一个序列中位置1的项目与第二个序列中位置1的项目匹配。在.NET 6中，新增了对三个序列进行匹配操作。以前，您需要两次运行两个序列的重载才能实现相同的目标。
    |'
- en: '| `ToArray` , `ToList` , `ToDictionary` , `ToHashSet` , `ToLookup` | Convert
    the sequence into an array or collection. These are the only extension methods
    that execute the LINQ expression. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `ToArray` , `ToList` , `ToDictionary` , `ToHashSet` , `ToLookup` | 将序列转换为数组或集合。这些是唯一执行LINQ表达式的扩展方法。
    |'
- en: '| `DistinctBy` , `ExceptBy` , `IntersectBy` , `UnionBy` , `MinBy` , `MaxBy`
    | New in .NET 6 are the `By` extension methods. They allow the comparison to be
    performed on a subset of the item rather than the entire item. For example, instead
    of removing duplicates by comparing an entire `Person` object, you could remove
    duplicates by comparing just their `LastName` and `DateOfBirth` . |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `DistinctBy` , `ExceptBy` , `IntersectBy` , `UnionBy` , `MinBy` , `MaxBy`
    | 在.NET 6中新增了`By`扩展方法。它们允许在子集上执行比较，而不是在整个项目上执行比较。例如，不是通过比较整个`Person`对象来删除重复项，而是通过比较他们的`LastName`和`DateOfBirth`来删除重复项。
    |'
- en: 'The `Enumerable` class also has some methods that are not extension methods,
    as shown in the following table:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Enumerable`类还有一些不是扩展方法的方法，如下表所示：'
- en: '| Method | Description |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| `Empty<T>` | Returns an empty sequence of the specified type `T` . It is
    useful for passing an empty sequence to a method that requires an `IEnumerable<T>`
    . |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `Empty<T>` | 返回指定类型`T`的空序列。将空序列传递给需要`IEnumerable<T>`的方法非常有用。 |'
- en: '| `Range` | Returns a sequence of integers from the `start` value with `count`
    items. For example, `Enumerable.Range(start: 5, count: 3)` would contain the integers
    5, 6, and 7. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `Range` | 从`start`值开始返回`count`个整数的序列。例如，`Enumerable.Range(start: 5, count:
    3)`将包含整数5、6和7。 |'
- en: '| `Repeat` | Returns a sequence that contains the same `element` repeated `count`
    times. For example, `Enumerable.Repeat(element: "5", count: 3)` would contain
    the `string` values "5", "5", and "5". |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `Repeat` | 返回包含相同`element`重复`count`次的序列。例如，`Enumerable.Repeat(element: "5",
    count: 3)`将包含字符串值"5"，"5"和"5"。 |'
- en: Understanding deferred execution
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解延迟执行
- en: 'LINQ uses **deferred execution** . It is important to understand that calling
    most of these extension methods does not execute the query and get the results.
    Most of these extension methods return a LINQ expression that represents a *question*
    , not an *answer* . Let''s explore:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: LINQ使用**延迟执行**。重要的是要理解，调用大多数这些扩展方法并不执行查询并获取结果。大多数这些扩展方法返回一个代表*问题*而不是*答案*的LINQ表达式。让我们来探索一下：
- en: Use your preferred code editor to create a new solution/workspace named `Chapter11`
    .
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建一个名为`Chapter11`的新解决方案/工作空间。
- en: 'Add a console app project, as defined in the following list:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制台应用程序项目，如下列表所示：
- en: 'Project template: **Console Application** / `console`'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Workspace/solution file and folder: `Chapter11`'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作空间/解决方案文件和文件夹：`Chapter11`
- en: 'Project file and folder: `LinqWithObjects`'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`LinqWithObjects`
- en: In `Program.cs` , delete the existing code and statically import `Console` .
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除现有代码并静态导入`Console`。
- en: 'Add statements to define a sequence of `string` values for people who work
    in an office, as shown in the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以定义办公室工作人员的`string`值序列，如下面的代码所示：
- en: '```cs'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // a string array is a sequence that implements IEnumerable<string>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: //字符串数组是实现IEnumerable<string>的序列
- en: string
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '[] names = new'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[] names = new'
- en: '[] { "Michael"'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[] {“Michael”'
- en: ', "Pam"'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Pam”
- en: ', "Jim"'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ，“吉姆”
- en: ', "Dwight"'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Dwight”
- en: ','
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"Angela"'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “Angela”
- en: ', "Kevin"'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Kevin”
- en: ', "Toby"'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Toby”
- en: ', "Creed"'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ，“Creed”
- en: '};'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: WriteLine("Deferred execution"
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“延迟执行”
- en: );
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '// Question: Which names end with an M?'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: //问题：哪些名称以M结尾？
- en: // (written using a LINQ extension method)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: //（使用LINQ扩展方法编写）
- en: var
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query1 = names.Where(name => name.EndsWith("m"
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: query1 = names.Where（name => name.EndsWith（“m”
- en: ));
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '// Question: Which names end with an M?'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: //问题：哪些名称以M结尾？
- en: // (written using LINQ query comprehension syntax)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: //（使用LINQ查询理解语法编写）
- en: var
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query2 = from
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: query2 = from
- en: name in
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 名字在
- en: names where
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 名字在
- en: name.EndsWith("m"
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: name.EndsWith（“m”
- en: ) select
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ）选择
- en: name;
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 名字;
- en: '```'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To ask the question and get the answer, i.e. execute the query, you must **materialize**
    it by either calling one of the "To" methods like `ToArray` or `ToLookup` or by
    enumerating the query, as shown in the following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要提出问题并获得答案，即执行查询，必须通过调用`ToArray`或`ToLookup`之类的“To”方法之一来**实现**它，或者通过枚举查询，如下面的代码所示：
- en: '```cs'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // Answer returned as an array of strings containing Pam and Jim
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: //答案作为包含Pam和Jim的字符串数组返回
- en: string
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '[] result1 = query1.ToArray();'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[] result1 = query1.ToArray();'
- en: // Answer returned as a list of strings containing Pam and Jim
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: //答案作为包含Pam和Jim的字符串列表返回
- en: List<string
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: List<string
- en: result2 = query2.ToList();
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: result2 = query2.ToList();
- en: // Answer returned as we enumerate over the results
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: //枚举结果时返回的答案
- en: foreach
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (string
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: （字符串
- en: name in
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 名字在
- en: query1)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: query1）
- en: '{'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(name); // outputs Pam
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(name); //输出Pam
- en: names[2
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: names [2
- en: '] = "Jimmy"'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '] =“Jimmy”'
- en: ; // change Jim to Jimmy
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ; //将Jim更改为Jimmy
- en: // on the second iteration Jimmy does not end with an M
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: //在第二次迭代时，吉米不以M结尾
- en: '}'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the console app and note the result, as shown in the following output:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，如下面的输出所示：
- en: '```cs'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Deferred execution
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟执行
- en: Pam
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Pam
- en: '```'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Due to deferred execution, after outputting the first result, `Pam` , if the
    original array values change, then by the time we loop back around, there are
    no more matches because `Jim` has become `Jimmy` and does not end with an `M`
    , so only `Pam` is outputted.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于延迟执行，在输出第一个结果“Pam”后，如果原始数组值发生更改，那么当我们再次循环时，就没有更多匹配项，因为“吉姆”已经变成了“吉米”，并且不以“M”结尾，因此只输出“Pam”。
- en: Before we get too deep into the weeds, let's slow down and look at some common
    LINQ extension methods and how to use them, one at a time.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究之前，让我们放慢脚步，逐一查看一些常见的LINQ扩展方法以及如何使用它们。
- en: Filtering entities with Where
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Where过滤实体
- en: 'The most common reason for using LINQ is to filter items in a sequence using
    the `Where` extension method. Let''s explore filtering by defining a sequence
    of names and then applying LINQ operations to it:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LINQ的最常见原因是使用`Where`扩展方法过滤序列中的项目。让我们通过定义一系列名称然后应用LINQ操作来探索过滤：
- en: 'In the project file, comment out the element that enables implicit usings,
    as shown highlighted in the following markup:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，取消注释启用隐式使用的元素，如下标记中突出显示的那样：
- en: '```cs'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <Project Sdk="Microsoft.NET.Sdk"
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <Project Sdk=“Microsoft.NET.Sdk”
- en: '>'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PropertyGroup>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <PropertyGroup>
- en: <OutputType>Exe</OutputType>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <OutputType> Exe </ OutputType>
- en: <TargetFramework>net6.0
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 目标框架> net6.0
- en: </TargetFramework>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: </ TargetFramework>
- en: <Nullable>enable</Nullable>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <Nullable> enable </ Nullable>
- en: '**<!--<ImplicitUsings>enable</ImplicitUsings>-->**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**<!--<ImplicitUsings> enable </ ImplicitUsings>-->**'
- en: </PropertyGroup>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: </ PropertyGroup>
- en: </Project>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: </Project>
- en: '```'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , attempt to call the `Where` extension method on the array
    of names, as shown in the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，尝试调用名称数组上的`Where`扩展方法，如下面的代码所示：
- en: '```cs'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine("Writing queries"
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“编写查询”
- en: );
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: var
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query = names.W
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 查询= names.W
- en: '```'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: As you try to type the `Where` method, note that it is missing from the IntelliSense
    list of members of a string array, as shown in *Figure 11.1* :![](img/Image00095.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试键入`Where`方法时，请注意它在字符串数组的成员的IntelliSense列表中丢失，如*图11.1*所示：！[](img/Image00095.jpg)
- en: 'Figure 11.1: IntelliSense with the Where extension method missing'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：缺少Where扩展方法的智能感知
- en: This is because `Where` is an extension method. It does not exist on the array
    type. To make the `Where` extension method available, we must import the `System.Linq`
    namespace. This is implicitly imported by default in new .NET 6 projects, but
    we disabled it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`Where`是一个扩展方法。它不存在于数组类型上。要使`Where`扩展方法可用，我们必须导入`System.Linq`命名空间。这在新的.NET
    6项目中默认情况下是隐式导入的，但我们已禁用它。
- en: In the project file, uncomment out the element that enables implicit usings.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，取消注释启用隐式使用的元素。
- en: Retype the `Where` method and note that the IntelliSense list now includes the
    extension methods added by the `Enumerable` class, as shown in *Figure 11.2* :![](img/Image00096.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新输入`Where`方法，并注意IntelliSense列表现在包括`Enumerable`类添加的扩展方法，如*图11.2*所示：！[](img/Image00096.jpg)
- en: 'Figure 11.2: IntelliSense showing LINQ Enumerable extension methods now'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：IntelliSense显示LINQ Enumerable扩展方法现在
- en: As you type the parentheses for the `Where` method, IntelliSense tells us that
    to call `Where` , we must pass in an instance of a `Func<string, bool>` delegate.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您为`Where`方法键入括号时，IntelliSense告诉我们要调用`Where`，我们必须传递`Func<string，bool>`委托的实例。
- en: 'Enter an expression to create a new instance of a `Func<string, bool>` delegate,
    and for now note that we have not yet supplied a method name because we will define
    it in the next step, as shown in the following code:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入表达式以创建`Func<string，bool>`委托的新实例，并且现在请注意我们尚未提供方法名称，因为我们将在下一步中定义它，如下面的代码所示：
- en: '```cs'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query = names.Where(new
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 查询= names.Where(new
- en: Func<string
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Func<string
- en: ', bool'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ，布尔
- en: '>( ))'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '>（））'
- en: '```'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The `Func<string, bool>` delegate tells us that for each `string` variable passed
    to the method, the method must return a `bool` value. If the method returns `true`
    , it indicates that we should include the `string` in the results, and if the
    method returns `false` , it indicates that we should exclude it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`Func<string，bool>`委托告诉我们，对于传递给方法的每个`string`变量，方法必须返回一个`bool`值。如果方法返回`true`，则表示我们应该在结果中包含`string`，如果方法返回`false`，则表示我们应该将其排除。'
- en: Targeting a named method
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位命名方法
- en: 'Let''s define a method that only includes names that are longer than four characters:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个只包含超过四个字符的名称的方法：
- en: 'At the bottom of `Program.cs` , define a method that will include only names
    longer than four characters, as shown in the following code:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`底部，定义一个方法，该方法将仅包含超过四个字符的名称，如下面的代码所示：
- en: '```cs'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: bool
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: NameLongerThanFour
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: NameLongerThanFour
- en: (
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: string
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: name
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 名称
- en: )
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: name.Length > 4
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 名称。长度> 4
- en: ;
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ；
- en: '}'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Above the `NameLongerThanFour` method, pass the method''s name into the `Func<string,
    bool>` delegate, and then loop through the query items, as shown highlighted in
    the following code:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NameLongerThanFour`方法之上，将方法的名称传递给`Func<string，bool>`委托，然后循环遍历查询项，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query = names.Where(
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称。其中（
- en: new
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: Func<string
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Func<string
- en: ', bool'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ，布尔
- en: '>('
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '>（'
- en: '**NameLongerThanFour**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**NameLongerThanFour**'
- en: ));
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ））;
- en: '**foreach**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**foreach**'
- en: '**(**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**（**'
- en: '**string**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符串**'
- en: '**item**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目**'
- en: '**in**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**在**'
- en: '**query)**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**查询）**'
- en: '**{**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**WriteLine(item);**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine（item）;**'
- en: '**}**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '```'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the results, noting that only names longer than four
    letters are listed, as shown in the following output:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，注意只有超过四个字母的名称才会列出，如下面的输出所示：
- en: '```cs'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Writing queries
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 编写查询
- en: Michael
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克尔
- en: Dwight
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 德怀特
- en: Angela
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 安吉拉
- en: Kevin
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 凯文
- en: Creed
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 克里德
- en: '```'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Simplifying the code by removing the explicit delegate instantiation
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过删除显式委托实例化来简化代码
- en: 'We can simplify the code by deleting the explicit instantiation of the `Func<string,
    bool>` delegate because the C# compiler can instantiate the delegate for us:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过删除`Func<string，bool>`委托的显式实例化来简化代码，因为C#编译器可以为我们实例化委托：
- en: To help you learn by seeing progressively improved code, copy and paste the
    query
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了帮助您通过逐步改进的代码来学习，复制并粘贴查询
- en: 'Comment out the first example, as shown in the following code:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉第一个示例，如下面的代码所示：
- en: '```cs'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // var query = names.Where(
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: // var query = names.Where(
- en: //   new Func<string, bool>(NameLongerThanFour));
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: //   new Func<string，bool>（NameLongerThanFour））;
- en: '```'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Modify the copy to remove the explicit instantiation of the delegate, as shown
    in the following code:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改副本以删除委托的显式实例化，如下面的代码所示：
- en: '```cs'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query = names.Where(NameLongerThanFour);
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称。其中（NameLongerThanFour）;
- en: '```'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code and note that it has the same behavior.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意它具有相同的行为。
- en: Targeting a lambda expression
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位lambda表达式
- en: We can simplify our code even further using a **lambda expression** in place
    of a named method.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步简化我们的代码，使用**lambda表达式**代替命名方法。
- en: 'Although it can look complicated at first, a lambda expression is simply a
    *nameless function* . It uses the `=>` (read as "goes to") symbol to indicate
    the return value:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一开始看起来可能很复杂，但lambda表达式只是一个*无名称的函数*。它使用`=>`（读作“转到”）符号来指示返回值：
- en: 'Copy and paste the query, comment the second example, and modify the query,
    as shown in the following code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴查询，注释第二个示例，并修改查询，如下面的代码所示：
- en: '```cs'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query = names.Where(name => name.Length > 4
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称。其中（名称=>名称。长度> 4
- en: );
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '```'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note that the syntax for a lambda expression includes all the important parts
    of the `NameLongerThanFour` method, but nothing more. A lambda expression only
    needs to define the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，lambda表达式的语法包括`NameLongerThanFour`方法的所有重要部分，但没有其他内容。 Lambda表达式只需要定义以下内容：
- en: 'The names of input parameters: `name`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入参数的名称：`name`
- en: 'A return value expression: `name.Length > 4`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值表达式：`name.Length> 4`
- en: The type of the `name` input parameter is inferred from the fact that the sequence
    contains `string` values, and the return type must be a `bool` value as defined
    by the delegate for `Where` to work, so the expression after the `=>` symbol must
    return a `bool` value.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`输入参数的类型是从序列包含`string`值以及返回类型必须是`bool`值（由`Where`的委托定义）推断出的，因此`=>`符号后面的表达式必须返回`bool`值。'
- en: The compiler does most of the work for us, so our code can be as concise as
    possible.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器为我们做了大部分工作，因此我们的代码可以尽可能简洁。
- en: Run the code and note that it has the same behavior.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意它具有相同的行为。
- en: Sorting entities
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序实体
- en: Other commonly used extension methods are `OrderBy` and `ThenBy` , used for
    sorting a sequence.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 其他常用的扩展方法是`OrderBy`和`ThenBy`，用于对序列进行排序。
- en: Extension methods can be chained if the previous method returns another sequence,
    that is, a type that implements the `IEnumerable<T>` interface.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前一个方法返回另一个序列，即实现`IEnumerable<T>`接口的类型，则可以链接扩展方法。
- en: Sorting by a single property using OrderBy
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用OrderBy按单个属性排序
- en: 'Let''s continue working with the current project to explore sorting:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用当前项目来探索排序：
- en: 'Append a call to `OrderBy` to the end of the existing query, as shown in the
    following code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有查询的末尾附加一个对`OrderBy`的调用，如下面的代码所示：
- en: '```cs'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: query = names
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称
- en: .Where(name => name.Length > 4
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 。其中（名称=>名称。长度> 4
- en: )
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: .OrderBy(name => name.Length);
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderBy（name=>name.Length）;
- en: '```'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Format the LINQ statement so that each extension method
    call happens on its own line to make them easier to read.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的做法**：格式化LINQ语句，使每个扩展方法调用发生在自己的一行上，以便更容易阅读它们。'
- en: 'Run the code and note that the names are now sorted by shortest first, as shown
    in the following output:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意名称现在按最短的顺序排列，如下面的输出所示：
- en: '```cs'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Kevin
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 凯文
- en: Creed
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 克里德
- en: Dwight
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 德怀特
- en: Angela
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 安吉拉
- en: Michael
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克尔
- en: '```'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: To put the longest name first, you would use `OrderByDescending` .
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 要将最长的名称放在第一位，您将使用`OrderByDescending`。
- en: Sorting by a subsequent property using ThenBy
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ThenBy按后续属性排序
- en: 'We might want to sort by more than one property, for example, to sort names
    of the same length in alphabetical order:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望按多个属性进行排序，例如按字母顺序对相同长度的名称进行排序：
- en: 'Add a call to the `ThenBy` method at the end of the existing query, as shown
    highlighted in the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有查询的末尾添加对`ThenBy`方法的调用，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: query = names
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称
- en: .Where(name => name.Length > 4
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: .Where(name => name.Length > 4
- en: )
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .OrderBy(name => name.Length)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderBy(name => name.Length)
- en: '**.ThenBy(name => name);**'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**.ThenBy(name => name);**'
- en: '```'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note the slight difference in the following sort order. Within
    a group of names of the same length, the names are sorted alphabetically by the
    full value of the `string` , so `Creed` comes before `Kevin` , and `Angela` comes
    before `Dwight` , as shown in the following output:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意以下排序顺序的轻微差异。在相同长度的名称组中，名称按照`string`的完整值按字母顺序排序，因此`Creed`在`Kevin`之前，`Angela`在`Dwight`之前，如下面的输出所示：
- en: '```cs'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Creed
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Creed
- en: Kevin
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 凯文
- en: Angela
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 安吉拉
- en: Dwight
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Dwight
- en: Michael
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克尔
- en: '```'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Declaring a query using var or a specified type
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用var或指定类型声明查询
- en: 'While writing a LINQ expression it is convenient to use `var` to declare the
    query object. This is because the type frequently changes as you work on the LINQ
    expression. For example, our query started as an `IEnumerable<string>` and is
    currently an `IOrderedEnumerable<string>` :'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写LINQ表达式时，使用`var`声明查询对象很方便。这是因为随着您在LINQ表达式上的工作，类型经常会发生变化。例如，我们的查询起初是`IEnumerable<string>`，目前是`IOrderedEnumerable<string>`：
- en: Hover your mouse over the `var` keyword and note that its type is `IOrderedEnumerable<string>`
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在`var`关键字上，并注意其类型为`IOrderedEnumerable<string>`
- en: 'Replace `var` with the actual type, as shown highlighted in the following code:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用实际类型替换`var`，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**IOrderedEnumerable<**'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**IOrderedEnumerable<**'
- en: '**string**'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**string**'
- en: '**>**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**>**'
- en: query = names
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称
- en: .Where(name => name.Length > 4
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: .Where(name => name.Length > 4
- en: )
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .OrderBy(name => name.Length)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderBy(name => name.Length)
- en: .ThenBy(name => name);
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: .ThenBy(name => name);
- en: '```'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Once you have finished working on a query, you could change
    the declared type from `var` to the actual type to make it clearer what the type
    is. This is easy because your code editor can tell you what it is.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：一旦完成对查询的工作，您可以将声明的类型从`var`更改为实际类型，以清楚地表明类型是什么。这很容易，因为您的代码编辑器可以告诉您它是什么。'
- en: Filtering by type
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按类型过滤
- en: The `Where` extension method is great for filtering by values, such as text
    and numbers. But what if the sequence contains multiple types, and you want to
    filter by a specific type and respect any inheritance hierarchy?
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`Where`扩展方法非常适合按值过滤，例如文本和数字。但是，如果序列包含多种类型，并且您想按特定类型过滤并尊重任何继承层次结构，该怎么办？'
- en: 'Imagine that you have a sequence of exceptions. There are hundreds of exception
    types that form a complex hierarchy, as partially shown in *Figure 11.3* :'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您有一系列异常。有数百种异常类型构成一个复杂的层次结构，部分显示在*图11.3*中：
- en: '![Diagram Description automatically generated](img/Image00097.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的图表描述](img/Image00097.jpg)'
- en: 'Figure 11.3: A partial exception inheritance hierarchy'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：部分异常继承层次结构
- en: 'Let''s explore filtering by type:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索按类型过滤：
- en: 'In `Program.cs` , define a list of exception-derived objects, as shown in the
    following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，定义一个异常派生对象的列表，如下面的代码所示：
- en: '```cs'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine("Filtering by type"
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("按类型过滤"
- en: );
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: List<Exception> exceptions = new
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: List<Exception> exceptions = new
- en: ()
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: new
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: ArgumentException(),
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: ArgumentException(),
- en: new
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: SystemException(),
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: SystemException(),
- en: new
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: IndexOutOfRangeException(),
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: IndexOutOfRangeException(),
- en: new
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: InvalidOperationException(),
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: InvalidOperationException(),
- en: new
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: NullReferenceException(),
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: NullReferenceException(),
- en: new
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: InvalidCastException(),
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: InvalidCastException(),
- en: new
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: OverflowException(),
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: OverflowException(),
- en: new
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: DivideByZeroException(),
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: DivideByZeroException(),
- en: new
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: ApplicationException()
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: ApplicationException()
- en: '};'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Write statements using the `OfType<T>` extension method to remove exceptions
    that are not arithmetic exceptions and write only the arithmetic exceptions to
    the console, as shown in the following code:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`OfType<T>`扩展方法编写语句，以删除不是算术异常的异常，并将仅算术异常写入控制台，如下面的代码所示：
- en: '```cs'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: IEnumerable<ArithmeticException> arithmeticExceptionsQuery =
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<ArithmeticException> arithmeticExceptionsQuery =
- en: exceptions.OfType<ArithmeticException>();
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: exceptions.OfType<ArithmeticException>();
- en: foreach
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (ArithmeticException exception in
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: (ArithmeticException exception in
- en: arithmeticExceptionsQuery)
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: arithmeticExceptionsQuery)
- en: '{'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(exception);
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(exception);
- en: '}'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and note that the results only include exceptions of the `ArithmeticException`
    type, or the `ArithmeticException` -derived types, as shown in the following output:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果仅包括`ArithmeticException`类型的异常，或`ArithmeticException` -派生类型，如下面的输出所示：
- en: '```cs'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'System.OverflowException: Arithmetic operation resulted in an overflow.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: System.OverflowException:算术运算导致溢出。
- en: 'System.DivideByZeroException: Attempted to divide by zero.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: System.DivideByZeroException:尝试除以零。
- en: '```'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Working with sets and bags using LINQ
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用LINQ处理集合和袋
- en: Sets are one of the most fundamental concepts in mathematics. A **set** is a
    collection of one or more unique objects. A **multiset** , aka **bag** , is a
    collection of one or more objects that can have duplicates.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是数学中最基本的概念之一。**集合**是一个或多个唯一对象的集合。**多重集**，又称**袋**，是一个或多个可以重复的对象的集合。
- en: You might remember being taught about Venn diagrams in school. Common set operations
    include the **intersect** or **union** between sets.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得在学校学习文氏图。常见的集合操作包括集合之间的**交集**或**并集**。
- en: 'Let''s create a console application that will define three arrays of `string`
    values for cohorts of apprentices and then perform some common set and multiset
    operations on them:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个控制台应用程序，为学徒的三个`string`值数组定义一些常见的集合和多重集合操作：
- en: 'Use your preferred code editor to add a new console app named `LinqWithSets`
    to the `Chapter11` solution/workspace:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将一个名为`LinqWithSets`的新控制台应用程序添加到`Chapter11`解决方案/工作区中：
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: In Visual Studio Code, select `LinqWithSets` as the active OmniSharp project.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`LinqWithSets`选择为活动的OmniSharp项目。
- en: 'In `Program.cs` , delete the existing code and statically import the `Console`
    type, as shown in the following code:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除现有的代码，并静态导入`Console`类型，如下面的代码所示：
- en: '```cs'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: '```'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the bottom of `Program.cs` , add the following method that outputs any sequence
    of `string` variables as a comma-separated single `string` to the console output,
    along with an optional description, as shown in the following code:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，添加以下方法，将任何`string`变量序列作为逗号分隔的单个`string`输出到控制台输出，以及一个可选的描述，如下面的代码所示：
- en: '```cs'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Output
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: (
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: IEnumerable<
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<
- en: string
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: cohort,
  id: totrans-361
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cohort,
- en: string
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: description =
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: description =
- en: '""'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '""'
- en: )
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (!string
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: (!string
- en: .IsNullOrEmpty(description))
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: .IsNullOrEmpty(description))
- en: '{'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(description);
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(description);
- en: '}'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Write(" "
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: Write(" "
- en: );
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine(string
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(string
- en: .Join(", "
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: .Join(", "
- en: ', cohort.ToArray()));'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: ', cohort.ToArray()));'
- en: WriteLine();
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: '}'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Above the `Output` method, add statements to define three arrays of names,
    output them, and then perform various set operations on them, as shown in the
    following code:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Output`方法上方，添加语句来定义三个名称数组，输出它们，然后对它们执行各种集合操作，如下面的代码所示：
- en: '```cs'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '[] cohort1 = new'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[] cohort1 = new'
- en: '[]'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '[]'
- en: '{ "Rachel"'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "Rachel"'
- en: ', "Gareth"'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Gareth"'
- en: ', "Jonathan"'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Jonathan"'
- en: ', "George"'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: ', "George"'
- en: '};'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: string
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '[] cohort2 = new'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[] cohort2 = new'
- en: '[]'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[]'
- en: '{ "Jack"'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "Jack"'
- en: ', "Stephen"'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Stephen"'
- en: ', "Daniel"'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Daniel"'
- en: ', "Jack"'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Jack"'
- en: ', "Jared"'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Jared"'
- en: '};'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: string
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '[] cohort3 = new'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[] cohort3 = new'
- en: '[]'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[]'
- en: '{ "Declan"'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "Declan"'
- en: ', "Jack"'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Jack"'
- en: ', "Jack"'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Jack"'
- en: ', "Jasmine"'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Jasmine"'
- en: ', "Conor"'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: ', "Conor"'
- en: '};'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Output(cohort1, "Cohort 1"
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort1, "Cohort 1"
- en: );
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort2, "Cohort 2"
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort2, "Cohort 2"
- en: );
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort3, "Cohort 3"
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort3, "Cohort 3"
- en: );
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort2.Distinct(), "cohort2.Distinct()"
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort2.Distinct(), "cohort2.Distinct()"
- en: );
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort2.DistinctBy(name => name.Substring(0
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort2.DistinctBy(name => name.Substring(0
- en: ', 2'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: ', 2'
- en: )),
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: )),
- en: '"cohort2.DistinctBy(name => name.Substring(0, 2)):"'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '"cohort2.DistinctBy(name => name.Substring(0, 2)):"'
- en: );
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort2.Union(cohort3), "cohort2.Union(cohort3)"
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort2.Union(cohort3), "cohort2.Union(cohort3)"
- en: );
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort2.Concat(cohort3), "cohort2.Concat(cohort3)"
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort2.Concat(cohort3), "cohort2.Concat(cohort3)"
- en: );
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort2.Intersect(cohort3), "cohort2.Intersect(cohort3)"
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort2.Intersect(cohort3), "cohort2.Intersect(cohort3)"
- en: );
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort2.Except(cohort3), "cohort2.Except(cohort3)"
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort2.Except(cohort3), "cohort2.Except(cohort3)"
- en: );
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Output(cohort1.Zip(cohort2,(c1, c2) => $"
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: Output(cohort1.Zip(cohort2,(c1, c2) => $"
- en: '{c1}'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '{c1}'
- en: matched with
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: matched with
- en: '{c2}'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '{c2}'
- en: '"'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: ),
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: '"cohort1.Zip(cohort2)"'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '"cohort1.Zip(cohort2)"'
- en: );
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the results, as shown in the following output:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Cohort 1
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: Cohort 1
- en: Rachel, Gareth, Jonathan, George
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: Rachel, Gareth, Jonathan, George
- en: Cohort 2
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: Cohort 2
- en: Jack, Stephen, Daniel, Jack, Jared
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: Jack, Stephen, Daniel, Jack, Jared
- en: Cohort 3
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: Cohort 3
- en: Declan, Jack, Jack, Jasmine, Conor
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: Declan, Jack, Jack, Jasmine, Conor
- en: cohort2.Distinct()
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: cohort2.Distinct()
- en: Jack, Stephen, Daniel, Jared
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: Jack, Stephen, Daniel, Jared
- en: 'cohort2.DistinctBy(name => name.Substring(0, 2)):'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 'cohort2.DistinctBy(name => name.Substring(0, 2)):'
- en: Jack, Stephen, Daniel
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: Jack，Stephen，Daniel
- en: cohort2.Union(cohort3)
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: cohort2.Union(cohort3)
- en: Jack, Stephen, Daniel, Jared, Declan, Jasmine, Conor
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: Jack, Stephen, Daniel, Jared, Declan, Jasmine, Conor
- en: cohort2.Concat(cohort3)
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: cohort2.Concat(cohort3)
- en: Jack, Stephen, Daniel, Jack, Jared, Declan, Jack, Jack, Jasmine, Conor
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: Jack, Stephen, Daniel, Jack, Jared, Declan, Jack, Jack, Jasmine, Conor
- en: cohort2.Intersect(cohort3)
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: cohort2.Intersect(cohort3)
- en: Jack
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: Jack
- en: cohort2.Except(cohort3)
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: cohort2.Except(cohort3)
- en: Stephen, Daniel, Jared
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: Stephen，Daniel，Jared
- en: cohort1.Zip(cohort2)
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: cohort1.Zip(cohort2)
- en: Rachel matched with Jack, Gareth matched with Stephen, Jonathan matched with
    Daniel, George matched with Jack
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: Rachel与Jack匹配，Gareth与Stephen匹配，Jonathan与Daniel匹配，George与Jack匹配
- en: '```'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: With `Zip` , if there are unequal numbers of items in the two sequences, then
    some items will not have a matching partner. Those without a partner, like `Jared`
    , will not be included in the result.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Zip`，如果两个序列中的项目数量不相等，则一些项目将没有匹配的伙伴。像`Jared`这样没有伙伴的人将不会包含在结果中。
- en: For the `DistinctBy` example, instead of removing duplicates by comparing the
    whole name, we define a lambda key selector to remove duplicates by comparing
    the first two characters, so `Jared` is removed because `Jack` already is a name
    that starts with `Ja` .
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`DistinctBy`的示例，我们不是通过比较整个名称来删除重复项，而是定义一个lambda键选择器来删除重复项，通过比较前两个字符，因此`Jared`被删除，因为`Jack`已经是以`Ja`开头的名称。
- en: So far, we have used the LINQ to Objects provider to work with in-memory objects.
    Next, we will use the LINQ to Entities provider to work with entities stored in
    a database.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了LINQ to Objects提供程序来处理内存中的对象。接下来，我们将使用LINQ to Entities提供程序来处理存储在数据库中的实体。
- en: Using LINQ with EF Core
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EF Core的LINQ
- en: We have looked at LINQ queries that filter and sort, but none that change the
    shape of the items in the sequence. This is called **projection** because it's
    about projecting items of one shape into another shape. To learn about projection,
    it is best to have some more complex types to work with, so in the next project,
    instead of using `string` sequences, we will use sequences of entities from the
    Northwind sample database.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了LINQ查询来过滤和排序，但没有改变序列中项目的形状。这被称为**投影**，因为它是将一个形状的项目投影到另一个形状的项目。要了解投影，最好使用一些更复杂的类型来工作，因此在下一个项目中，我们将使用来自Northwind示例数据库的实体序列，而不是使用`string`序列。
- en: I will give instructions to use SQLite because it is cross-platform but if you
    prefer to use SQL Server then feel free to do so. I have included some commented
    code to enable SQL Server if you choose.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提供使用SQLite的说明，因为它是跨平台的，但如果您更喜欢使用SQL Server，那么请随意这样做。我已经包含了一些注释代码，以便在您选择时启用SQL
    Server。
- en: Building an EF Core model
  id: totrans-468
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建EF Core模型
- en: 'We must define an EF Core model to represent the database and tables that we
    will work with. We will define the model manually to take complete control and
    to prevent a relationship from being automatically defined between the `Categories`
    and `Products` tables. Later, you will use LINQ to join the two entity sets:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须定义一个EF Core模型来表示我们将使用的数据库和表。我们将手动定义模型，以完全控制并防止`Categories`和`Products`表之间自动定义关系。稍后，您将使用LINQ来连接这两个实体集：
- en: Use your preferred code editor to add a new console app named `LinqWithEFCore`
    to the `Chapter11` solution/workspace.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将新的控制台应用程序命名为`LinqWithEFCore`，并将其添加到`Chapter11`解决方案/工作区中。
- en: In Visual Studio Code, select `LinqWithEFCore` as the active OmniSharp project.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`LinqWithEFCore`选择为活动的OmniSharp项目。
- en: 'In the `LinqWithEFCore` project, add a package reference to the EF Core provider
    for SQLite and/or SQL Server, as shown in the following markup:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LinqWithEFCore`项目中，添加对SQLite和/或SQL Server的EF Core提供程序的包引用，如下标记所示：
- en: '```cs'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.Sqlite"
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.Sqlite"
- en: Version="6.0.0"
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <PackageReference
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.SqlServer"
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.SqlServer"
- en: Version="6.0.0"
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the project to restore packages.
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以恢复包。
- en: Copy the `Northwind4Sqlite.sql` file into the `LinqWithEFCore` folder.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Northwind4Sqlite.sql`文件复制到`LinqWithEFCore`文件夹中。
- en: 'At a command prompt or terminal, create the Northwind database by executing
    the following command:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端上，通过执行以下命令创建Northwind数据库：
- en: '```cs'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: sqlite3 Northwind.db -init Northwind4Sqlite.sql
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3 Northwind.db -init Northwind4Sqlite.sql
- en: '```'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Be patient because this command might take a while to create the database structure.
    Eventually you will see the SQLite command prompt, as shown in the following output:'
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请耐心等待，因为此命令可能需要一段时间来创建数据库结构。最终，您将看到SQLite命令提示符，如下输出所示：
- en: '```cs'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: -- Loading resources from Northwind.sql
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: --从Northwind.sql加载资源
- en: SQLite version 3.36.0 2021-08-02 15:20:15
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite版本3.36.0 2021-08-02 15:20:15
- en: Enter ".help" for usage hints.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 输入“.help”以获取使用提示。
- en: sqlite>
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite>
- en: '```'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Press cmd + D on macOS or Ctrl + C on Windows to exit SQLite command mode.
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在macOS上按cmd + D或在Windows上按Ctrl + C退出SQLite命令模式。
- en: Add three class files to the project, named `Northwind.cs` , `Category.cs` ,
    and `Product.cs` .
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向项目添加三个名为`Northwind.cs`，`Category.cs`和`Product.cs`的类文件。
- en: 'Modify the class file named `Northwind.cs` , as shown in the following code:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改名为`Northwind.cs`的类文件，如下所示：
- en: '```cs'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.EntityFrameworkCore; // DbContext, DbSet<T>
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore; // DbContext，DbSet<T>
- en: namespace
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: // this manages the connection to the database
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: //这管理着与数据库的连接
- en: public
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Northwind
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind
- en: ': DbContext'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: ': DbContext'
- en: '{'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // these properties map to tables in the database
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: //这些属性映射到数据库中的表
- en: public
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DbSet<Category>? Categories { get
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Category>? 类别 { 获取
- en: ; set
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DbSet<Product>? Products { get
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Product>? 产品 { 获取
- en: ; set
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: protected
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的
- en: override
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: OnConfiguring
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: OnConfiguring
- en: (
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: DbContextOptionsBuilder optionsBuilder
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: DbContextOptionsBuilder optionsBuilder
- en: )
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: path = Path.Combine(
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 路径=Path.Combine（
- en: Environment.CurrentDirectory, "Northwind.db"
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: Environment.CurrentDirectory，"Northwind.db"
- en: );
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: optionsBuilder.UseSqlite($"Filename=
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: optionsBuilder.UseSqlite（$“文件名=
- en: '{path}'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '{路径}'
- en: '"'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: /*
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: /*
- en: string connection = "Data Source=.;" +
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串连接=“数据源=。;”+
- en: '"Initial Catalog=Northwind;" +'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: “Initial Catalog=Northwind;”+
- en: '"Integrated Security=true;" +'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: “集成安全性=true;”+
- en: '"MultipleActiveResultSets=true;";'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '"MultipleActiveResultSets=true;";'
- en: optionsBuilder.UseSqlServer(connection);
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: optionsBuilder.UseSqlServer(connection);
- en: '*/'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: '}'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: protected
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的
- en: override
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: OnModelCreating
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreating
- en: (
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: ModelBuilder modelBuilder
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: ModelBuilder modelBuilder
- en: )
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: modelBuilder.Entity<Product>()
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Product>()
- en: .Property(product => product.UnitPrice)
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: .Property（产品=>产品.UnitPrice）
- en: .HasConversion<double
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: .HasConversion<double
- en: '>();'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: （）;
- en: '}'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Modify the class file named `Category.cs` , as shown in the following code:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改名为`Category.cs`的类文件，如下所示：
- en: '```cs'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.ComponentModel.DataAnnotations;
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations;
- en: namespace
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Category
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 类别
- en: '{'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: int
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: CategoryId { get
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryId { 获取
- en: ; set
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Required'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '[必需'
- en: ']'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(15)'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength（15）'
- en: ']'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: CategoryName { get
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName { 获取
- en: ; set
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; } = null
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: ！;
- en: public
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? Description { get'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '? 描述 { 获取'
- en: ; set
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Modify the class file named `Product.cs` , as shown in the following code:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改名为`Product.cs`的类文件，如下所示：
- en: '```cs'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.ComponentModel.DataAnnotations;
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations;
- en: using
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.ComponentModel.DataAnnotations.Schema;
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations.Schema;
- en: namespace
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Product
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: Product
- en: '{'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: int
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: ProductId { get
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: ProductId { 获取
- en: ; set
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Required'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '[必需'
- en: ']'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(40)'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength（40）'
- en: ']'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: ProductName { get
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: ProductName { 获取
- en: ; set
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; } = null
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: ！;
- en: public
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: int
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: '? SupplierId { get'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '? 供应商Id { 获取'
- en: ; set
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: int
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: '? CategoryId { get'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '? 类别Id { 获取'
- en: ; set
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[StringLength(20)'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength（20）'
- en: ']'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? QuantityPerUnit { get'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '? 每单位数量 { 获取'
- en: ; set
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Column(TypeName ='
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column（TypeName ='
- en: '"money"'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '"money"'
- en: )
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '] // required for SQL Server provider'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '] // SQL Server提供程序所需'
- en: public
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: decimal
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? UnitPrice { get'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '? 单价 { 获取'
- en: ; set
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: short
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 短
- en: '? UnitsInStock { get'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '? 库存单位 { 获取'
- en: ; set
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: short
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 短
- en: '? UnitsOnOrder { get'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '? 订购单位 { 获取'
- en: ; set
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: short
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 短
- en: '? ReorderLevel { get'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '? 重新订购级别 { 获取'
- en: ; set
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: bool
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: Discontinued { get
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 已停产{获取
- en: ; set
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the project and fix any compiler errors.
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并修复任何编译器错误。
- en: If you are using Visual Studio 2022 for Windows, then the compiled application
    executes in the `LinqWithEFCore\bin\Debug\net6.0` folder so it will not find the
    database file unless we indicate that it should always be copied to the output
    directory.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Windows的Visual Studio 2022，那么编译后的应用程序将在`LinqWithEFCore\bin\Debug\net6.0`文件夹中执行，因此它不会找到数据库文件，除非我们指示它应该始终复制到输出目录。
- en: In **Solution Explorer** , right-click the `Northwind.db` file and select **Properties**
    .
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击`Northwind.db`文件，然后选择**属性**。
- en: In **Properties** , set **Copy to Output Directory** to **Copy always** .
  id: totrans-673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**中，将**复制到输出目录**设置为**始终复制**。
- en: Filtering and sorting sequences
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤和排序序列
- en: 'Now let''s write statements to filter and sort sequences of rows from the tables:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写语句来过滤和排序表中的行序列：
- en: 'In `Program.cs` , statically import the `Console` type and namespaces for working
    with EF Core and your entity model using LINQ, as shown in the following code:'
  id: totrans-676
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，使用静态导入`Console`类型和用于使用LINQ处理EF Core和实体模型的命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Packt.Shared; // Northwind, Category, Product
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared; // Northwind, Category, Product
- en: using
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore; // DbSet<T>
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore; // DbSet<T>
- en: using
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: '```'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the bottom of `Program.cs` , write a method to filter and sort products,
    as shown in the following code:'
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，编写一个方法来过滤和排序产品，如下面的代码所示：
- en: '```cs'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: FilterAndSort
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: FilterAndSort
- en: ()
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (Northwind db = new
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: DbSet<Product> allProducts = db.Products;
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Product> allProducts = db.Products;
- en: IQueryable<Product> filteredProducts =
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product> filteredProducts =
- en: allProducts.Where(product => product.UnitPrice < 10
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: allProducts.Where(product => product.UnitPrice < 10
- en: M);
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: M);
- en: IOrderedQueryable<Product> sortedAndFilteredProducts =
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: IOrderedQueryable<Product> sortedAndFilteredProducts =
- en: filteredProducts.OrderByDescending(product => product.UnitPrice);
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: filteredProducts.OrderByDescending(product => product.UnitPrice);
- en: WriteLine("Products that cost less than $10:"
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("成本低于$10的产品："
- en: );
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Product p in
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: (Product p in
- en: sortedAndFilteredProducts)
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: sortedAndFilteredProducts)
- en: '{'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'WriteLine("{0}: {1} costs {2:$#,##0.00}"'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 'WriteLine("{0}: {1}的成本是{2:$#,##0.00}"'
- en: ','
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: p.ProductId, p.ProductName, p.UnitPrice);
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: p.ProductId, p.ProductName, p.UnitPrice);
- en: '}'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine();
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 调用WriteLine();
- en: '}'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '`DbSet<T>` implements `IEnumerable<T>` , so LINQ can be used to query and manipulate
    collections of entities in models built for EF Core. (Actually, I should say `TEntity`
    instead of `T` but the name of this generic type has no functional effect. The
    only requirement is that the type is a `class` . The name just indicates the class
    is expected to be an entity model.)'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbSet<T>`实现了`IEnumerable<T>`，因此LINQ可以用于查询和操作为EF Core构建的实体模型中的实体集合。（实际上，我应该说`TEntity`而不是`T`，但是这个泛型类型的名称没有功能效果。唯一的要求是类型是一个`class`。名称只是指示这个类预期是一个实体模型。）'
- en: You might have also noticed that the sequences implement `IQueryable<T>` (or
    `IOrderedQueryable<T>` after a call to an ordering LINQ method) instead of `IEnumerable<T>`
    or `IOrderedEnumerable<T>` .
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也注意到序列实现了`IQueryable<T>`（或在调用排序LINQ方法后实现了`IOrderedQueryable<T>`），而不是`IEnumerable<T>`或`IOrderedEnumerable<T>`。
- en: This is an indication that we are using a LINQ provider that builds the query
    in memory using expression trees. They represent code in a tree-like data structure
    and enable the creation of dynamic queries, which is useful for building LINQ
    queries for external data providers like SQLite.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们正在使用一个在内存中使用表达式树构建查询的LINQ提供程序。它们代表树状数据结构中的代码，并且能够创建动态查询，这对于构建外部数据提供程序（如SQLite）的LINQ查询非常有用。
- en: The LINQ expression will be converted into another query language, such as SQL.
    Enumerating the query with `foreach` or calling a method such as `ToArray` will
    force the execution of the query and materialize the results.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: LINQ表达式将被转换为另一种查询语言，比如SQL。使用`foreach`枚举查询或调用`ToArray`等方法将强制执行查询并实现结果。
- en: After the namespace imports in `Program.cs` , call the `FilterAndSort` method.
  id: totrans-721
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中的命名空间导入之后，调用`FilterAndSort`方法。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Products that cost less than $10:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 成本低于$10的产品：
- en: '41: Jack''s New England Clam Chowder costs $9.65'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '41: Jack''s New England Clam Chowder的成本是$9.65'
- en: '45: Rogede sild costs $9.50'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '45: Rogede sild的成本是$9.50'
- en: '47: Zaanse koeken costs $9.50'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '47: Zaanse koeken的成本是$9.50'
- en: '19: Teatime Chocolate Biscuits costs $9.20'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '19: Teatime Chocolate Biscuits的成本是$9.20'
- en: '23: Tunnbröd costs $9.00'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '23: Tunnbröd的成本是$9.00'
- en: '75: Rhönbräu Klosterbier costs $7.75'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '75: Rhönbräu Klosterbier的成本是$7.75'
- en: '54: Tourtière costs $7.45'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '54: Tourtière的成本是$7.45'
- en: '52: Filo Mix costs $7.00'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '52: Filo Mix的成本是$7.00'
- en: '13: Konbu costs $6.00'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '13: Konbu的成本是$6.00'
- en: '24: Guaraná Fantástica costs $4.50'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '24: Guaraná Fantástica的成本是$4.50'
- en: '33: Geitost costs $2.50'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '33: Geitost的成本是$2.50'
- en: '```'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Although this query outputs the information we want, it does so inefficiently
    because it gets all columns from the `Products` table instead of just the three
    columns we need, which is the equivalent of the following SQL statement:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个查询输出了我们想要的信息，但它效率低下，因为它从`Products`表中获取了所有列，而不仅仅是我们需要的三列，这相当于以下SQL语句：
- en: '```cs'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: SELECT * FROM Products;
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT * FROM Products;
- en: '```'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In *Chapter 10* , *Working with Data Using Entity Framework Core* , you learned
    how to log the SQL commands executed against SQLite so that you could see this
    for yourself.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第10章*，*使用Entity Framework Core处理数据*中，您学会了如何记录针对SQLite执行的SQL命令，以便您自己查看。
- en: Projecting sequences into new types
  id: totrans-742
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将序列投影到新类型中
- en: 'Before we look at projection, we need to review object initialization syntax.
    If you have a class defined, then you can instantiate an object using the class
    name, `new()` , and curly braces to set initial values for fields and properties,
    as shown in the following code:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看投影之前，我们需要复习对象初始化语法。如果你有一个已定义的类，那么你可以使用类名、`new()`和大括号来实例化一个对象，为字段和属性设置初始值，如下面的代码所示：
- en: '```cs'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public class
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: public class
- en: Person
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 人
- en: '{'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: Name { get
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: Name { get
- en: ; set
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DateTime DateOfBirth { get
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime DateOfBirth { get
- en: ; set
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Person knownTypeObject = new
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 已知类型对象 = new
- en: ()
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Name = "Boris Johnson"
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: Name = "Boris Johnson"
- en: ','
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: DateOfBirth = new
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: DateOfBirth = new
- en: '(year: 1964'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '(year: 1964'
- en: ', month: 6'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: ', month: 6'
- en: ', day: 19'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: ', day: 19'
- en: )
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '};'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'C# 3.0 and later allow instances of **anonymous types** to be instantiated
    using the `var` keyword, as shown in the following code:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: C# 3.0及更高版本允许使用`var`关键字实例化**匿名类型**，如下面的代码所示：
- en: '```cs'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: anonymouslyTypedObject = new
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: anonymouslyTypedObject = new
- en: '{'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Name = "Boris Johnson"
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: Name = "Boris Johnson"
- en: ','
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: DateOfBirth = new
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: DateOfBirth = new
- en: 'DateTime(year: 1964'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 'DateTime(year: 1964'
- en: ', month: 6'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: ', month: 6'
- en: ', day: 19'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: ', day: 19'
- en: )
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '};'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Although we did not specify a type, the compiler can infer an anonymous type
    from the setting of two properties named `Name` and `DateOfBirth` . The compiler
    can infer the types of the two properties from the values assigned: a literal
    `string` and a new instance of a date/time value.'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们没有指定类型，但编译器可以从两个名为`Name`和`DateOfBirth`的属性的设置中推断出匿名类型。编译器可以从分配的值推断出两个属性的类型：一个文字`string`和一个新的日期/时间值实例。
- en: This capability is especially useful when writing LINQ queries to project an
    existing type into a new type without having to explicitly define the new type.
    Since the type is anonymous, this can only work with `var` -declared local variables.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写LINQ查询以将现有类型投影到新类型时，此功能特别有用，而无需明确定义新类型。由于类型是匿名的，因此只能使用`var`声明的本地变量。
- en: 'Let''s make the SQL command executed against the database table more efficient
    by adding a call to the `Select` method to project instances of the `Product`
    class into instances of a new anonymous type with only three properties:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`Select`方法中添加调用来使针对数据库表执行的SQL命令更有效，以将`Product`类的实例投影为仅具有三个属性的新匿名类型的实例：
- en: 'In `FilterAndSort` , add a statement to extend the LINQ query to use the `Select`
    method to return only the three properties (that is, table columns) that we need,
    and modify the `foreach` statement to use the `var` keyword and the projection
    LINQ expression, as shown highlighted in the following code:'
  id: totrans-787
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FilterAndSort`中，添加一个语句来扩展LINQ查询，使用`Select`方法仅返回我们需要的三个属性（即表列），并修改`foreach`语句以使用`var`关键字和投影LINQ表达式，如下面的代码中突出显示的那样：
- en: '```cs'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: IOrderedQueryable<Product> sortedAndFilteredProducts =
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: IOrderedQueryable<Product> sortedAndFilteredProducts =
- en: filteredProducts.OrderByDescending(product => product.UnitPrice);
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: filteredProducts.OrderByDescending(product => product.UnitPrice);
- en: '**var**'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '**var**'
- en: '**projectedProducts = sortedAndFilteredProducts**'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '**projectedProducts = sortedAndFilteredProducts**'
- en: '**.Select(product =>**'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '**.Select(product =>**'
- en: '**new**'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**// anonymous type**'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '**// 匿名类型**'
- en: '**{**'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**product.ProductId,**'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '**product.ProductId,**'
- en: '**product.ProductName,**'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: '**product.ProductName,**'
- en: '**product.UnitPrice**'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '**product.UnitPrice**'
- en: '**});**'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '**});**'
- en: WriteLine("Products that cost less than $10:"
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("Products that cost less than $10:"
- en: );
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '**var**'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '**var**'
- en: '**p**'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '**p**'
- en: '**in**'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '**in**'
- en: '**projectedProducts**'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '**projectedProducts**'
- en: )
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '```'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Hover your mouse over the `new` keyword in the `Select` method call and the
    `var` keyword in the `foreach` statement and note that it is an anonymous type,
    as shown in *Figure 11.4* :![](img/Image00098.jpg)
  id: totrans-812
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在`Select`方法调用中的`new`关键字和`foreach`语句中的`var`关键字上，并注意它是一个匿名类型，如*图11.4*所示：![](img/Image00098.jpg)
- en: 'Figure 11.4: An anonymous type used during LINQ projection'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：在LINQ投影期间使用的匿名类型
- en: Run the code and confirm that the output is the same as before.
  id: totrans-814
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并确认输出与以前相同。
- en: Joining and grouping sequences
  id: totrans-815
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接和分组序列
- en: 'There are two extension methods for joining and grouping:'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个用于连接和分组的扩展方法：
- en: '**Join** : This method has four parameters: the sequence that you want to join
    with, the property or properties on the *left* sequence to match on, the property
    or properties on the *right* sequence to match on, and a projection.'
  id: totrans-817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Join**：此方法有四个参数：要与之连接的序列，左侧序列上要匹配的属性，右侧序列上要匹配的属性，以及一个投影。'
- en: '**GroupJoin** : This method has the same parameters, but it combines the matches
    into a group object with a `Key` property for the matching value and an `IEnumerable<T>`
    type for the multiple matches.'
  id: totrans-818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GroupJoin**：此方法具有相同的参数，但它将匹配项组合成一个具有匹配值的`Key`属性和一个`IEnumerable<T>`类型的多个匹配项的组对象。'
- en: Joining sequences
  id: totrans-819
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接序列
- en: 'Let''s explore these methods when working with two tables: `Categories` and
    `Products` :'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在处理两个表`Categories`和`Products`时探索这些方法：
- en: 'At the bottom of `Program.cs` , create a method to select categories and products,
    join them, and output them, as shown in the following code:'
  id: totrans-821
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，创建一个方法来选择类别和产品，将它们连接起来，并输出它们，如下面的代码所示：
- en: '```cs'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: void
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: JoinCategoriesAndProducts
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: JoinCategoriesAndProducts
- en: ()
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (Northwind db = new
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: (Northwind db = new
- en: ())
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: ())
- en: '{'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // join every product to its category to return 77 matches
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: // 将每个产品与其类别连接以返回77个匹配项
- en: var
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: queryJoin = db.Categories.Join(
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: queryJoin = db.Categories.Join(
- en: 'inner: db.Products,'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 'inner: db.Products,'
- en: 'outerKeySelector: category => category.CategoryId,'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 'outerKeySelector: category => category.CategoryId,'
- en: 'innerKeySelector: product => product.CategoryId,'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 'innerKeySelector: product => product.CategoryId,'
- en: 'resultSelector: (c, p) =>'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 'resultSelector: (c, p) =>'
- en: new
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: '{ c.CategoryName, p.ProductName, p.ProductId });'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '{ c.CategoryName, p.ProductName, p.ProductId });'
- en: foreach
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (var
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: (var
- en: item in
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: item in
- en: queryJoin)
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: queryJoin)
- en: '{'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'WriteLine("{0}: {1} is in {2}."'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 'WriteLine("{0}: {1} is in {2}."'
- en: ','
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: 'arg0: item.ProductId,'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: item.ProductId,'
- en: 'arg1: item.ProductName,'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: item.ProductName,'
- en: 'arg2: item.CategoryName);'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg2: item.CategoryName);'
- en: '}'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In a join, there are two sequences, *outer* and *inner* . In the previous example,
    `categories` is the outer sequence and `products` is the inner sequence.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接中，有两个序列，*outer*和*inner*。在前面的示例中，`categories`是外部序列，`products`是内部序列。
- en: At the top of `Program.cs` , comment out the call to `FilterAndSort` and call
    `JoinCategoriesAndProducts` .
  id: totrans-856
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉对`FilterAndSort`的调用，并调用`JoinCategoriesAndProducts`。
- en: 'Run the code and view the results. Note that there is a single line of output
    for each of the 77 products, as shown in the following output (edited to only
    include the first 10 items):'
  id: totrans-857
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果。请注意，每个77个产品都有一行输出，如下面的输出所示（编辑为仅包括前10个项目）：
- en: '```cs'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '1: Chai is in Beverages.'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '1: Chai is in Beverages.'
- en: '2: Chang is in Beverages.'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '2: Chang is in Beverages.'
- en: '3: Aniseed Syrup is in Condiments.'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '3: Aniseed Syrup is in Condiments.'
- en: '4: Chef Anton''s Cajun Seasoning is in Condiments.'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 4：厨师安东的卡真调味料在调味品中。
- en: '5: Chef Anton''s Gumbo Mix is in Condiments.'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 5：厨师安东的浓汤混合物在调味品中。
- en: '6: Grandma''s Boysenberry Spread is in Condiments.'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 6：Grandma's Boysenberry Spread在调味品中。
- en: '7: Uncle Bob''s Organic Dried Pears is in Produce.'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 7：Uncle Bob's有机干梨在生产中。
- en: '8: Northwoods Cranberry Sauce is in Condiments.'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 8：北森林蔓越莓酱在调味品中。
- en: '9: Mishi Kobe Niku is in Meat/Poultry.'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 9：Mishi Kobe Niku在肉类/家禽中。
- en: '10: Ikura is in Seafood.'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 10：Ikura在海鲜中。
- en: '...'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the end of the existing query, call the `OrderBy` method to sort by `CategoryName`
    , as shown in the following code:'
  id: totrans-871
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有查询的末尾，调用`OrderBy`方法按`CategoryName`排序，如下面的代码所示：
- en: '```cs'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: .OrderBy(cp => cp.CategoryName);
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderBy(cp => cp.CategoryName);
- en: '```'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the results. Note that there is a single line of output
    for each of the 77 products, and the results show all products in the `Beverages`
    category first, then the `Condiments` category, and so on, as shown in the following
    partial output:'
  id: totrans-875
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果。注意每个77个产品都有一行输出，并且结果首先显示所有`饮料`类别中的产品，然后是`调味品`类别，依此类推，如下面的部分输出所示：
- en: '```cs'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '1: Chai is in Beverages.'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 1：柴在饮料中。
- en: '2: Chang is in Beverages.'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 2：Chang在饮料中。
- en: '24: Guaraná Fantástica is in Beverages.'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 24：Guaraná Fantástica在饮料中。
- en: '34: Sasquatch Ale is in Beverages.'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 34：Sasquatch Ale在饮料中。
- en: '35: Steeleye Stout is in Beverages.'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 35：Steeleye Stout在饮料中。
- en: '38: Côte de Blaye is in Beverages.'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 38：Côte de Blaye在饮料中。
- en: '39: Chartreuse verte is in Beverages.'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 39：Chartreuse verte在饮料中。
- en: '43: Ipoh Coffee is in Beverages.'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 43：怡保咖啡在饮料中。
- en: '67: Laughing Lumberjack Lager is in Beverages.'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 67：Laughing Lumberjack Lager在饮料中。
- en: '70: Outback Lager is in Beverages.'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 70：澳洲啤酒在饮料中。
- en: '75: Rhönbräu Klosterbier is in Beverages.'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 75：Rhönbräu Klosterbier在饮料中。
- en: '76: Lakkalikööri is in Beverages.'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 76：Lakkalikööri在饮料中。
- en: '3: Aniseed Syrup is in Condiments.'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 3：茴香糖浆在调味品中。
- en: '4: Chef Anton''s Cajun Seasoning is in Condiments.'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 4：厨师安东的卡真调味料在调味品中。
- en: '...'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Group-joining sequences
  id: totrans-893
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组合连接序列
- en: 'At the bottom of `Program.cs` , create a method to group and join, show the
    group name, and then show all the items within each group, as shown in the following
    code:'
  id: totrans-894
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，创建一个方法来分组和连接，显示组名，然后显示每个组内的所有项目，如下面的代码所示：
- en: '```cs'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 空白
- en: GroupJoinCategoriesAndProducts
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: GroupJoinCategoriesAndProducts
- en: ()
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // group all products by their category to return 8 matches
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: //按类别分组所有产品以返回8个匹配项
- en: var
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: queryGroup = db.Categories.AsEnumerable().GroupJoin(
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: queryGroup = db.Categories.AsEnumerable().GroupJoin（```
- en: 'inner: db.Products,'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 内部：db.Products，
- en: 'outerKeySelector: category => category.CategoryId,'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: outerKeySelector：category => category.CategoryId，
- en: 'innerKeySelector: product => product.CategoryId,'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: innerKeySelector：product => product.CategoryId，
- en: 'resultSelector: (c, matchingProducts) => new'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: resultSelector：（c，matchingProducts）=> new
- en: '{'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: c.CategoryName,
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: c.CategoryName，
- en: Products = matchingProducts.OrderBy(p => p.ProductName)
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 产品=matchingProducts.OrderBy(p => p.ProductName)
- en: '});'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: foreach
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一个
- en: (var
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: （var
- en: category in
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 类别在
- en: queryGroup)
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: queryGroup）
- en: '{'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0} has {1} products."
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0}有{1}个产品。"
- en: ','
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: category.CategoryName,'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: arg0：category.CategoryName，
- en: 'arg1: category.Products.Count());'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：category.Products.Count（））;
- en: foreach
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一个
- en: (var
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: （var
- en: product in
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 产品在
- en: category.Products)
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 类别。产品）
- en: '{'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{product.ProductName}'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '{product.ProductName}'
- en: '"'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If we had not called the `AsEnumerable` method, then a runtime exception would
    have been thrown, as shown in the following output:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有调用`AsEnumerable`方法，那么会抛出运行时异常，如下面的输出所示：
- en: '```cs'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Unhandled exception. System.ArgumentException:  Argument type ''System.Linq.IOrderedQueryable`1[Packt.Shared.Product]''
    does not match the corresponding member type ''System.Linq.IOrderedEnumerable`1[Packt.Shared.Product]''
    (Parameter ''arguments[1]'')'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 未处理的异常。System.ArgumentException：参数类型'System.Linq.IOrderedQueryable`1[Packt.Shared.Product]'与相应的成员类型'System.Linq.IOrderedEnumerable`1[Packt.Shared.Product]'不匹配（参数'arguments[1]'）
- en: '```'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This is because not all LINQ extension methods can be converted from expression
    trees into some other query syntax like SQL. In these cases, we can convert from
    `IQueryable<T>` to `IEnumerable<T>` by calling the `AsEnumerable` method, which
    forces query processing to use LINQ to EF Core only to bring the data into the
    application and then use LINQ to Objects to execute more complex processing in
    memory. But, often, this is less efficient.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为并非所有的LINQ扩展方法都可以从表达式树转换为SQL等其他查询语法。在这些情况下，我们可以通过调用`AsEnumerable`方法从`IQueryable<T>`转换为`IEnumerable<T>`，这将强制查询处理仅使用LINQ到EF
    Core将数据带入应用程序，然后使用LINQ到对象在内存中执行更复杂的处理。但通常这样做效率较低。
- en: At the top of `Program.cs` , comment out the previous method call and call `GroupJoinCategoriesAndProducts`
    .
  id: totrans-944
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉先前的方法调用，并调用`GroupJoinCategoriesAndProducts`。
- en: 'Run the code, view the results, and note that the products inside each category
    have been sorted by their name, as defined in the query and as shown in the following
    partial output:'
  id: totrans-945
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，并注意每个类别内的产品已按其名称排序，如查询中定义的那样，并如下部分输出所示：
- en: '```cs'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Beverages has 12 products.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 饮料有12种产品。
- en: Chai
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 柴
- en: Chang
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: Chang
- en: Chartreuse verte
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: Chartreuse verte
- en: Côte de Blaye
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: Côte de Blaye
- en: Guaraná Fantástica
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: Guaraná Fantástica
- en: Ipoh Coffee
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 怡保咖啡
- en: Lakkalikööri
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: Lakkalikööri
- en: Laughing Lumberjack Lager
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: Laughing Lumberjack Lager
- en: Outback Lager
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: Outback Lager
- en: Rhönbräu Klosterbier
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: Rhönbräu Klosterbier
- en: Sasquatch Ale
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: Sasquatch Ale
- en: Steeleye Stout
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: Steeleye Stout
- en: Condiments has 12 products.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 调味品有12种产品。
- en: Aniseed Syrup
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 茴香糖浆
- en: Chef Anton's Cajun Seasoning
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 厨师安东的卡真调味料
- en: Chef Anton's Gumbo Mix
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 厨师安东的浓汤混合物
- en: '...'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Aggregating sequences
  id: totrans-966
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合序列
- en: 'There are LINQ extension methods to perform aggregation functions, such as
    `Average` and `Sum` . Let''s write some code to see some of these methods in action
    aggregating information from the `Products` table:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 有LINQ扩展方法来执行聚合函数，比如`Average`和`Sum`。让我们编写一些代码来看到这些方法中的一些在`Products`表中聚合信息的操作：
- en: 'At the bottom of `Program.cs` , create a method to show the use of the aggregation
    extension methods, as shown in the following code:'
  id: totrans-968
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，创建一个方法来展示聚合扩展方法的使用，如下面的代码所示：
- en: '```cs'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 空白
- en: AggregateProducts
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: AggregateProducts
- en: ()
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0,-25} {1,10}"
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-25} {1,10}"
- en: ','
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: "Product count:"'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: "产品数量："'
- en: ','
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: db.Products.Count());'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: db.Products.Count());'
- en: WriteLine("{0,-25} {1,10:$#,##0.00}"
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-25} {1,10:$#,##0.00}"
- en: ','
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: "Highest product price:"'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: "最高产品价格："'
- en: ','
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: db.Products.Max(p => p.UnitPrice));'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: db.Products.Max(p => p.UnitPrice));'
- en: WriteLine("{0,-25} {1,10:N0}"
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-25} {1,10:N0}"
- en: ','
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: "Sum of units in stock:"'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: "库存单位总和："'
- en: ','
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: db.Products.Sum(p => p.UnitsInStock));'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: db.Products.Sum(p => p.UnitsInStock));'
- en: WriteLine("{0,-25} {1,10:N0}"
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-25} {1,10:N0}"
- en: ','
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: "Sum of units on order:"'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: "库存订单总和："'
- en: ','
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: db.Products.Sum(p => p.UnitsOnOrder));'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: db.Products.Sum(p => p.UnitsOnOrder));'
- en: WriteLine("{0,-25} {1,10:$#,##0.00}"
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-25} {1,10:$#,##0.00}"
- en: ','
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: "Average unit price:"'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: "平均单价："'
- en: ','
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: db.Products.Average(p => p.UnitPrice));'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: arg1：db.Products.Average(p => p.UnitPrice));
- en: WriteLine("{0,-25} {1,10:$#,##0.00}"
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-25} {1,10:$#,##0.00}"
- en: ','
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: "Value of units in stock:"'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: "库存单位的价值："'
- en: ','
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg1: db.Products'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg1: db.Products'
- en: .Sum(p => p.UnitPrice * p.UnitsInStock));
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: .Sum(p => p.UnitPrice * p.UnitsInStock));
- en: '}'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: At the top of `Program.cs` , comment out the previous method and call `AggregateProducts`
  id: totrans-1013
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉以前的方法并调用`AggregateProducts`
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1014
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Product count:                    77'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 产品数量：77
- en: 'Highest product price:       $263.50'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 最高产品价格：$263.50
- en: 'Sum of units in stock:         3,119'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 库存单位总和：3,119
- en: 'Sum of units on order:           780'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 库存订单总和：780
- en: 'Average unit price:           $28.87'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 平均单价：$28.87
- en: 'Value of units in stock:  $74,050.85'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 库存单位的价值：$74,050.85
- en: '```'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Sweetening LINQ syntax with syntactic sugar
  id: totrans-1023
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用语法糖使LINQ语法更加美观
- en: C# 3.0 introduced some new language keywords in 2008 to make it easier for programmers
    with experience with SQL to write LINQ queries. This syntactic sugar is sometimes
    called the **LINQ query comprehension syntax** .
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: C# 3.0在2008年引入了一些新的语言关键字，以使具有SQL经验的程序员更容易编写LINQ查询。这种语法糖有时被称为**LINQ查询理解语法**。
- en: 'Consider the following array of `string` values:'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的`string`值数组：
- en: '```cs'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: string
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '[] names = new'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: '[] names = new'
- en: '[] { "Michael"'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: '[] { "迈克尔"'
- en: ', "Pam"'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: ，“帕姆”
- en: ', "Jim"'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: ，“吉姆”
- en: ', "Dwight"'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: ，“德怀特”
- en: ','
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"Angela"'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: “安吉拉”
- en: ', "Kevin"'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: ，“凯文”
- en: ', "Toby"'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: ，“托比”
- en: ', "Creed"'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: ，“克里德”
- en: '};'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To filter and sort the names, you could use extension methods and lambda expressions,
    as shown in the following code:'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 要过滤和排序名称，您可以使用扩展方法和lambda表达式，如下面的代码所示：
- en: '```cs'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: query = names
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称
- en: .Where(name => name.Length > 4
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: .Where(name => name.Length > 4
- en: )
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: .OrderBy(name => name.Length)
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderBy(name => name.Length)
- en: .ThenBy(name => name);
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: .ThenBy(name => name);
- en: '```'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Or you could achieve the same results by using query comprehension syntax,
    as shown in the following code:'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以通过使用查询理解语法来实现相同的结果，如下面的代码所示：
- en: '```cs'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: query = from
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=从
- en: name in
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 名称在
- en: names
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: names
- en: where
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 在
- en: name.Length > 4
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: name.Length > 4
- en: orderby
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: orderby
- en: name.Length, name
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: name.Length, name
- en: select
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 选择
- en: name;
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 名称；
- en: '```'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The compiler changes the query comprehension syntax to the equivalent extension
    methods and lambda expressions for you.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器会为您更改查询理解语法，以便使用等效的扩展方法和lambda表达式。
- en: The `select` keyword is always required for LINQ query comprehension syntax.
    The `Select` extension method is optional when using extension methods and lambda
    expressions because if you do not call `Select` , then the whole item is implicitly
    selected.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: '`select`关键字在LINQ查询理解语法中总是必需的。如果使用扩展方法和lambda表达式，则`Select`扩展方法是可选的，因为如果您不调用`Select`，则整个项目将被隐式选择。'
- en: Not all extension methods have a C# keyword equivalent, for example, the `Skip`
    and `Take` extension methods, which are commonly used to implement paging for
    lots of data.
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有扩展方法都有C#关键字等效，例如`Skip`和`Take`扩展方法，它们通常用于为大量数据实现分页。
- en: 'A query that skips and takes cannot be written using only the query comprehension
    syntax, so we could write the query using all extension methods, as shown in the
    following code:'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过和获取的查询不能仅使用查询理解语法编写，因此我们可以使用所有扩展方法编写查询，如下面的代码所示：
- en: '```cs'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: query = names
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=名称
- en: .Where(name => name.Length > 4
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: .Where(name => name.Length > 4
- en: )
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: .Skip(80
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: .Skip(80
- en: )
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: .Take(10
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: .Take(10
- en: );
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '```'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Or you can wrap query comprehension syntax in parentheses and then switch to
    using extension methods, as shown in the following code:'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以将查询理解语法括在括号中，然后切换到使用扩展方法，如下面的代码所示：
- en: '```cs'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: var
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: query = (from
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 查询=（从
- en: name in
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 名称在
- en: names
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: names
- en: where
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 在
- en: name.Length > 4
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: name.Length > 4
- en: select
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 选择
- en: name)
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: name)
- en: .Skip(80
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: .Skip(80
- en: )
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: .Take(10
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: .Take(10
- en: );
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '```'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Learn both extension methods with lambda expressions and
    the query comprehension syntax ways of writing LINQ queries, because you are likely
    to have to maintain code that uses both.'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：学习使用扩展方法和lambda表达式以及查询理解语法编写LINQ查询的两种方式，因为您可能需要维护使用这两种方式的代码。'
- en: Using multiple threads with parallel LINQ
  id: totrans-1092
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用并行LINQ使用多个线程
- en: By default, only one thread is used to execute a LINQ query. **Parallel LINQ**
    (**PLINQ** ) is an easy way to enable multiple threads to execute a LINQ query.
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，只使用一个线程来执行LINQ查询。**并行LINQ**（**PLINQ**）是启用多个线程执行LINQ查询的简单方法。
- en: '**Good Practice** : Do not assume that using parallel threads will improve
    the performance of your applications. Always measure real-world timings and resource
    usage.'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：不要假设使用并行线程会提高应用程序的性能。始终测量实际的时间和资源使用情况。'
- en: Creating an app that benefits from multiple threads
  id: totrans-1095
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个从多个线程中受益的应用程序
- en: To see it in action, we will start with some code that only uses a single thread
    to calculate Fibonacci numbers for 45 integers. We will use the `StopWatch` type
    to measure the change in performance.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到它的作用，我们将从只使用单个线程来计算45个整数的斐波那契数的代码开始。我们将使用`StopWatch`类型来测量性能的变化。
- en: We will use operating system tools to monitor the CPU and CPU core usage. If
    you do not have multiple CPUs or at least multiple cores, then this exercise won't
    show much!
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用操作系统工具来监视CPU和CPU核使用情况。如果您没有多个CPU或至少多个核心，那么这个练习就不会显示出太多！
- en: Use your preferred code editor to add a new console app named `LinqInParallel`
    to the `Chapter11` solution/workspace.
  id: totrans-1098
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器向 `Chapter11` 解决方案/工作区添加一个名为 `LinqInParallel` 的新控制台应用。
- en: In Visual Studio Code, select `LinqInParallel` as the active OmniSharp project.
  id: totrans-1099
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，选择 `LinqInParallel` 作为活动的 OmniSharp 项目。
- en: In `Program.cs` , delete the existing statements and then import the `System.Diagnostics`
    namespace so that we can use the `StopWatch` type, and statically import the `System.Console`
    type.
  id: totrans-1100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，删除现有语句，然后导入 `System.Diagnostics` 命名空间，以便我们可以使用 `StopWatch`
    类型，并静态导入 `System.Console` 类型。
- en: 'Add statements to create a stopwatch to record timings, wait for a keypress
    before starting the timer, create 45 integers, calculate the last Fibonacci number
    for each of them, stop the timer, and display the elapsed milliseconds, as shown
    in the following code:'
  id: totrans-1101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句创建一个秒表来记录时间，等待按键后开始计时器，创建45个整数，计算每个整数的最后一个斐波那契数，停止计时器，并显示经过的毫秒数，如下面的代码所示：
- en: '```cs'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Stopwatch watch = new
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 秒表监视 = 新的
- en: ();
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: ();
- en: Write("Press ENTER to start. "
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 写("按 ENTER 开始。"
- en: );
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: ReadLine();
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: ReadLine();
- en: watch.Start();
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: watch.Start();
- en: int
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: max = 45
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 最大 = 45
- en: ;
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: IEnumerable<int
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<int
- en: 'numbers = Enumerable.Range(start: 1'
  id: totrans-1113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '数字 = Enumerable.Range(start: 1'
- en: ', count: max);'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: ，计数：最大);
- en: WriteLine($"Calculating Fibonacci sequence up to
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 写行($"计算斐波那契序列直到
- en: '{max}'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: '{最大}'
- en: . Please wait..."
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 。 请稍候..."
- en: );
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: int
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: '[] fibonacciNumbers = numbers'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: '[] fibonacciNumbers = 数字'
- en: .Select(number => Fibonacci(number)).ToArray();
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: .Select(number => Fibonacci(number)).ToArray();
- en: watch.Stop();
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: watch.Stop();
- en: WriteLine("{0:#,##0} elapsed milliseconds."
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 写行("{0:#,##0} 经过的毫秒。"
- en: ','
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'arg0: watch.ElapsedMilliseconds);'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 'arg0: watch.ElapsedMilliseconds);'
- en: Write("Results:"
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 写("结果："
- en: );
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (int
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: （int
- en: number in
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 数字在
- en: fibonacciNumbers)
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: fibonacciNumbers)
- en: '{'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Write($"
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 写($"
- en: '{number}'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '{数字}'
- en: '"'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: static
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: int
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: Fibonacci
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: Fibonacci
- en: (
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: int
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: term
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 术语
- en: )
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: =>
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: =>
- en: term switch
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 术语开关
- en: '{'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '1'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: => 0
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: => 0
- en: ','
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '2'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: => 1
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: => 1
- en: ','
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: _ => Fibonacci(term - 1
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: _ => 斐波那契（项 - 1
- en: ) + Fibonacci(term - 2
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: ) + Fibonacci(term - 2
- en: )
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '};'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '```'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Run the code, but do not press Enter to start the stopwatch yet because we need
    to make sure a monitoring tool is showing processor activity.
  id: totrans-1159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，但不要按 Enter 开始秒表，因为我们需要确保监视工具显示处理器活动。
- en: Using Windows
  id: totrans-1160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Windows
- en: If you are using Windows, then right-click on the Windows **Start** button or
    press Ctrl + Alt + Delete , and then click on **Task Manager** .
  id: totrans-1161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，则右键单击Windows **开始** 按钮或按Ctrl + Alt + Delete，然后单击 **任务管理器**。
- en: At the bottom of the **Task Manager** window, click **More details** .
  id: totrans-1162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **任务管理器** 窗口底部，单击 **详细信息**。
- en: At the top of the **Task Manager** window, click on the **Performance** tab.
  id: totrans-1163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **任务管理器** 窗口顶部，单击 **性能** 选项卡。
- en: Right-click on the **CPU Utilization** graph, select **Change graph to** , and
    then select **Logical processors** .
  id: totrans-1164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 **CPU 利用率** 图表，选择 **更改图表为**，然后选择 **逻辑处理器**。
- en: Using macOS
  id: totrans-1165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用macOS
- en: If you are using macOS, then launch **Activity Monitor** .
  id: totrans-1166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是macOS，则启动 **活动监视器**。
- en: Navigate to **View** | **Update Frequency Very often (1 sec)** .
  id: totrans-1167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **查看** | **更新频率非常频繁（1秒）**。
- en: To see the CPU graphs, navigate to **Window** | **CPU History** .
  id: totrans-1168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 CPU 图表，请导航到 **窗口** | **CPU 历史记录**。
- en: For all operating systems
  id: totrans-1169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于所有操作系统
- en: Rearrange your monitoring tool and your code editor so that they are side by
    side.
  id: totrans-1170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新排列您的监视工具和代码编辑器，使它们并排。
- en: 'Wait for the CPUs to settle and then press Enter to start the stopwatch and
    run the query. The result should be a number of elapsed milliseconds, as shown
    in the following output:'
  id: totrans-1171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待 CPU 稳定下来，然后按 Enter 开始秒表并运行查询。结果应该是经过的毫秒数，如下面的输出所示：
- en: '```cs'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Press ENTER to start.
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 按 ENTER 开始。
- en: Calculating Fibonacci sequence up to 45\. Please wait...
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 计算斐波那契序列直到45\. 请稍候...
- en: 17,624 elapsed milliseconds.
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 17,624 经过的毫秒。
- en: 'Results: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765
    10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309
    3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141
    267914296 433494437 701408733'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946
    17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578
    5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296
    433494437 701408733
- en: '```'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The monitoring tool will probably show that one or two CPUs were used the most,
    alternating over time. Others may execute background tasks at the same time, such
    as the garbage collector, so the other CPUs or cores won't be completely flat,
    but the work is certainly not being evenly spread among all the possible CPUs
    or cores. Also, note that some of the logical processors are maxing out at 100%.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 监视工具可能会显示一个或两个 CPU 最多被使用，随着时间的推移交替。其他可能同时执行后台任务，例如垃圾回收器，因此其他 CPU 或核心不会完全平坦，但工作肯定不会均匀分布在所有可能的
    CPU 或核心之间。还要注意，一些逻辑处理器的使用率达到了100%。
- en: 'In `Program.cs` , modify the query to make a call to the `AsParallel` extension
    method and to sort the resulting sequence because when processing in parallel
    the results can become misordered, as shown highlighted in the following code:'
  id: totrans-1179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，修改查询以调用 `AsParallel` 扩展方法，并对生成的序列进行排序，因为在并行处理时，结果可能会变得无序，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: int
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: '[] fibonacciNumbers = numbers.'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: '[] fibonacciNumbers = 数字。'
- en: '**AsParallel()**'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '**AsParallel()**'
- en: .Select(number => Fibonacci(number))
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: .Select(number => Fibonacci(number))
- en: '**.OrderBy(number => number)**'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '**.OrderBy(number => number)**'
- en: .ToArray();
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: .ToArray();
- en: '```'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Never call `AsParallel` at the end of a query. This does
    nothing. You must perform at least one operation after the call to `AsParallel`
    for that operation to be parallelized. .NET 6 introduces a code analyzer that
    will warn about this type of misuse.'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：永远不要在查询的末尾调用 `AsParallel`。这样做没有任何作用。您必须在调用 `AsParallel` 后执行至少一个操作，以便对该操作进行并行化。.NET
    6 引入了一个代码分析器，将警告此类误用。'
- en: 'Run the code, wait for CPU charts in your monitoring tool to settle, and then
    press Enter to start the stopwatch and run the query. This time, the application
    should complete in less time (although it might not be as less as you might hope
    for—managing those multiple threads takes extra effort!):'
  id: totrans-1189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，等待CPU图表在您的监控工具中稳定，然后按Enter键启动秒表并运行查询。这次，应用程序应该在更短的时间内完成（尽管可能不像您希望的那样少-管理这些多个线程需要额外的努力！）：
- en: '```cs'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Press ENTER to start.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 按Enter键开始。
- en: Calculating Fibonacci sequence up to 45\. Please wait...
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 计算Fibonacci序列直到45\. 请稍等...
- en: 9,028 elapsed milliseconds.
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 9,028毫秒已过去。
- en: 'Results: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765
    10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309
    3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141
    267914296 433494437 701408733'
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946
    17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578
    5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296
    433494437 701408733
- en: '```'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The monitoring tool should show that all CPUs were used equally to execute the
    LINQ query, and note that none of the logical processors max out at 100% because
    the work is more evenly spread.
  id: totrans-1196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控工具应显示所有CPU均被用于执行LINQ查询，并注意到没有一个逻辑处理器达到100%的最大值，因为工作更加均匀。
- en: You will learn more about managing multiple threads in *Chapter 12* , *Improving
    Performance and Scalability Using Multitasking* .
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在*第12章*中了解更多关于管理多个线程的内容，*通过多任务改进性能和可伸缩性*。
- en: Creating your own LINQ extension methods
  id: totrans-1198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的LINQ扩展方法
- en: In *Chapter 6* , *Implementing Interfaces and Inheriting Classes* , you learned
    how to create your own extension methods. To create LINQ extension methods, all
    you must do is extend the `IEnumerable<T>` type.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第6章*，*实现接口和继承类*中，您学会了如何创建自己的扩展方法。要创建LINQ扩展方法，您所需做的就是扩展`IEnumerable<T>`类型。
- en: '**Good Practice** : Put your own extension methods in a separate class library
    so that they can be easily deployed as their own assembly or NuGet package.'
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：将您自己的扩展方法放在一个单独的类库中，以便它们可以轻松部署为它们自己的程序集或NuGet包。'
- en: 'We will improve the `Average` extension method as an example. A well-educated
    school child will tell you that *average* can mean one of three things:'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改进`Average`扩展方法作为一个例子。 一个受过良好教育的学童会告诉你*average*可以表示三种意思：
- en: '**Mean** : Sum the numbers and divide by the count.'
  id: totrans-1202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mean**：求和并除以计数。'
- en: '**Mode** : The most common number.'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mode**：最常见的数字。'
- en: '**Median** : The number in the middle of the numbers when ordered.'
  id: totrans-1204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Median**：当排序时，数字中间的数字。'
- en: 'Microsoft''s implementation of the `Average` extension method calculates the
    *mean* . We might want to define our own extension methods for `Mode` and `Median`
    :'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的`Average`扩展方法的实现计算*mean*。我们可能想要为`Mode`和`Median`定义我们自己的扩展方法：
- en: In the `LinqWithEFCore` project, add a new class file named `MyLinqExtensions.cs`
    .
  id: totrans-1206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LinqWithEFCore`项目中，添加一个名为`MyLinqExtensions.cs`的新类文件。
- en: 'Modify the class, as shown in the following code:'
  id: totrans-1207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改类，如下所示的代码：
- en: '```cs'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: System.Linq
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: System.Linq
- en: ; // extend Microsoft's namespace
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: ; //扩展微软的命名空间
- en: public
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: class
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: MyLinqExtensions
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: MyLinqExtensions
- en: '{'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // this is a chainable LINQ extension method
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: // 这是一个可链接的LINQ扩展方法
- en: public
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: IEnumerable
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable
- en: <
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: T
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: T
- en: '>'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: ProcessSequence
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: ProcessSequence
- en: <
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: T
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: T
- en: '>('
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: this
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IEnumerable<T> sequence
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<T>序列
- en: )
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // you could do some processing here
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: //你可以在这里做一些处理
- en: return
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: sequence;
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: sequence;
- en: '}'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: IQueryable
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable
- en: <
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: T
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: T
- en: '>'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: ProcessSequence
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: ProcessSequence
- en: <
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: T
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: T
- en: '>('
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: this
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IQueryable<T> sequence
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<T>序列
- en: )
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // you could do some processing here
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: //你可以在这里做一些处理
- en: return
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: sequence;
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: sequence;
- en: '}'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // these are scalar LINQ extension methods
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: //这些是标量LINQ扩展方法
- en: public
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: int
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: '? Median('
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: '? Median('
- en: this
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IEnumerable<int
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<int
- en: ?> sequence)
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: ?>序列)
- en: '{'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: var
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: ordered = sequence.OrderBy(item => item);
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: ordered = sequence.OrderBy(item => item);
- en: int
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: middlePosition = ordered.Count() / 2
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: middlePosition = ordered.Count() / 2
- en: ;
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: return
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: ordered.ElementAt(middlePosition);
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: ordered.ElementAt(middlePosition);
- en: '}'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: int
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: '? Median<T>('
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: '? Median<T>('
- en: this
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IEnumerable<T> sequence, Func<T, int
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<T>序列，Func<T，int
- en: ?> selector)
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: ?>选择器)
- en: '{'
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: sequence.Select(selector).Median();
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.Select(selector).Median();
- en: '}'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: decimal
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? Median('
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: '? Median('
- en: this
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IEnumerable<decimal
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<decimal
- en: ?> sequence)
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: ?>序列)
- en: '{'
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: var
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: ordered = sequence.OrderBy(item => item);
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: ordered = sequence.OrderBy(item => item);
- en: int
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: middlePosition = ordered.Count() / 2
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: middlePosition = ordered.Count() / 2
- en: ;
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: return
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: ordered.ElementAt(middlePosition);
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: ordered.ElementAt(middlePosition);
- en: '}'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: decimal
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? Median<T>('
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: '? Median<T>('
- en: this
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IEnumerable<T> sequence, Func<T, decimal
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<T>序列，Func<T，decimal
- en: ?> selector)
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: ?>选择器)
- en: '{'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: sequence.Select(selector).Median();
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.Select(selector).Median();
- en: '}'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: int
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: '? Mode('
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: '? Mode('
- en: this
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IEnumerable<int
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<int
- en: ?> sequence)
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: ?>序列)
- en: '{'
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: var
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: grouped = sequence.GroupBy(item => item);
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: grouped = sequence.GroupBy(item => item);
- en: var
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: orderedGroups = grouped.OrderByDescending(
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: orderedGroups = grouped.OrderByDescending(
- en: group
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: group
- en: => group
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: => group
- en: .Count());
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: .Count());
- en: return
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: orderedGroups.FirstOrDefault()?.Key;
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: orderedGroups.FirstOrDefault()?.Key;
- en: '}'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: int
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: '? Mode<T>('
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '? Mode<T>('
- en: this
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: this
- en: IEnumerable<T> sequence, Func<T, int
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<T>序列，Func<T，int
- en: ?> selector)
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: ?>选择器)
- en: '{'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: sequence.Select(selector)?.Mode();
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.Select(selector)?.Mode();
- en: '}'
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: decimal
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? Mode('
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: '? Mode('
- en: this
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IEnumerable<decimal
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<decimal
- en: ?> sequence)
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: ?>序列)
- en: '{'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: var
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: grouped = sequence.GroupBy(item => item);
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: grouped = sequence.GroupBy(item => item);
- en: var
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: var
- en: orderedGroups = grouped.OrderByDescending(
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: orderedGroups = grouped.OrderByDescending(
- en: group
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: group
- en: => group
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: => group
- en: .Count());
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: .Count());
- en: return
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: orderedGroups.FirstOrDefault()?.Key;
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: orderedGroups.FirstOrDefault()?.Key;
- en: '}'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: decimal
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? Mode<T>('
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: '? Mode<T>('
- en: this
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: this
- en: IEnumerable<T> sequence, Func<T, decimal
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: IEnumerable<T>序列，Func<T，decimal
- en: ?> selector)
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: ?>选择器)
- en: '{'
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: sequence.Select(selector).Mode();
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: sequence.Select(selector).Mode();
- en: '}'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If this class was in a separate class library, to use your LINQ extension methods,
    you simply need to reference the class library assembly because the `System.Linq`
    namespace is already implicitly imported.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个类在一个单独的类库中，要使用你的LINQ扩展方法，你只需要引用类库程序集，因为`System.Linq`命名空间已经隐式导入。
- en: '**Warning!** All but one of the above extension methods cannot be used with
    `IQueryable` sequences like those used by LINQ to SQLite or LINQ to SQL Server
    because we have not implemented a way to translate our code into the underlying
    query language like SQL.'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**除了一个以上的扩展方法不能与`IQueryable`序列一起使用，就像LINQ到SQLite或LINQ到SQL Server所使用的那样，因为我们还没有实现将我们的代码转换成底层查询语言如SQL的方法。'
- en: Trying the chainable extension method
  id: totrans-1371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试可链式扩展方法
- en: 'First, we will try chaining the `ProcessSequence` method with other extension
    methods:'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将尝试将`ProcessSequence`方法与其他扩展方法链接起来：
- en: 'In `Program.cs` , in the `FilterAndSort` method, modify the LINQ query for
    `Products` to call your custom chainable extension method, as shown highlighted
    in the following code:'
  id: totrans-1373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在`FilterAndSort`方法中，修改`Products`的LINQ查询，调用你的自定义可链式扩展方法，如下面代码中的高亮部分所示：
- en: '```cs'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: DbSet<Product>? allProducts = db.Products;
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Product>? allProducts = db.Products;
- en: if
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (allProducts is
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: （allProducts is
- en: 'null'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: )
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("No products found."
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("未找到产品。"
- en: );
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: return
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: ;
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: ；
- en: '}'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**IQueryable<Product> processedProducts = allProducts.ProcessSequence();**'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product> processedProducts = allProducts.ProcessSequence();
- en: IQueryable<Product> filteredProducts =
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product> filteredProducts =
- en: '**processedProducts**'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 已处理的产品
- en: .Where(product => product.UnitPrice < 10
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: .Where(product => product.UnitPrice < 10
- en: M);
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: M);
- en: '```'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , uncomment the `FilterAndSort` method and comment out any calls
    to other methods.
  id: totrans-1392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，取消注释`FilterAndSort`方法，并注释掉对其他方法的调用。
- en: Run the code and note that you see the same output as before because your method
    doesn't modify the sequence. But you now know how to extend a LINQ expression
    with your own functionality.
  id: totrans-1393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意到你看到与之前相同的输出，因为你的方法不修改序列。但是现在你知道如何用自己的功能扩展LINQ表达式了。
- en: Trying the mode and median methods
  id: totrans-1394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试使用众数和中位数方法
- en: 'Second, we will try using the `Mode` and `Median` methods to calculate other
    kinds of average:'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们将尝试使用`Mode`和`Median`方法来计算其他类型的平均值：
- en: 'At the bottom of `Program.cs` , create a method to output the mean, median,
    and mode, for `UnitsInStock` and `UnitPrice` for products, using your custom extension
    methods and the built-in `Average` extension method, as shown in the following
    code:'
  id: totrans-1396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，创建一个方法来输出`UnitsInStock`和`UnitPrice`的平均值、中位数和众数，使用你自定义的扩展方法和内置的`Average`扩展方法，如下面的代码所示：
- en: '```cs'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的
- en: void
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: CustomExtensionMethods
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: CustomExtensionMethods
- en: ()
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'WriteLine("Mean units in stock: {0:N0}"'
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("平均库存量：{0:N0}"
- en: ','
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: db.Products.Average(p => p.UnitsInStock));
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.Average(p => p.UnitsInStock));
- en: 'WriteLine("Mean unit price: {0:$#,##0.00}"'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("平均单价：{0:$#,##0.00}"
- en: ','
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: db.Products.Average(p => p.UnitPrice));
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.Average(p => p.UnitPrice));
- en: 'WriteLine("Median units in stock: {0:N0}"'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("中位数库存量：{0:N0}"
- en: ','
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: db.Products.Median(p => p.UnitsInStock));
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.Median(p => p.UnitsInStock));
- en: 'WriteLine("Median unit price: {0:$#,##0.00}"'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("中位数单价：{0:$#,##0.00}"
- en: ','
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: db.Products.Median(p => p.UnitPrice));
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.Median(p => p.UnitPrice));
- en: 'WriteLine("Mode units in stock: {0:N0}"'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("众数库存量：{0:N0}"
- en: ','
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: db.Products.Mode(p => p.UnitsInStock));
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.Mode(p => p.UnitsInStock));
- en: 'WriteLine("Mode unit price: {0:$#,##0.00}"'
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("众数单价：{0:$#,##0.00}"
- en: ','
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: db.Products.Mode(p => p.UnitPrice));
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.Mode(p => p.UnitPrice));
- en: '}'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment any previous method calls and call `CustomExtensionMethods`
    .
  id: totrans-1428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉之前的方法调用，并调用`CustomExtensionMethods`。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Mean units in stock: 41'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 平均库存量：41
- en: 'Mean unit price: $28.87'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 平均单价：$28.87
- en: 'Median units in stock: 26'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 中位数库存量：26
- en: 'Median unit price: $19.50'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 中位数单价：$19.50
- en: 'Mode units in stock: 0'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 众数库存量：0
- en: 'Mode unit price: $18.00'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 众数单价：$18.00
- en: '```'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: There are four products with a unit price of $18.00\. There are five products
    with 0 units in stock.
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种单价为$18.00的产品。有五种产品库存为0。
- en: Working with LINQ to XML
  id: totrans-1439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ to XML
- en: '**LINQ to XML** is a LINQ provider that allows you to query and manipulate
    XML.'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '**LINQ to XML**是一个LINQ提供程序，允许你查询和操作XML。'
- en: Generating XML using LINQ to XML
  id: totrans-1441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用LINQ to XML生成XML
- en: 'Let''s create a method to convert the `Products` table into XML:'
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个方法将`Products`表转换成XML：
- en: In the `LinqWithEFCore` project, at the top of `Program.cs` , import the `System.Xml.Linq`
    namespace.
  id: totrans-1443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LinqWithEFCore`项目中，在`Program.cs`的顶部，导入`System.Xml.Linq`命名空间。
- en: 'At the bottom of `Program.cs` , create a method to output the products in XML
    format, as shown in the following code:'
  id: totrans-1444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，创建一个方法以XML格式输出产品，如下面的代码所示：
- en: '```cs'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的
- en: void
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OutputProductsAsXml
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: OutputProductsAsXml
- en: ()
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Product[] productsArray = db.Products.ToArray();
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: Product[] productsArray = db.Products.ToArray();
- en: XElement xml = new
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: XElement xml = new
- en: ("products"
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: ("products"
- en: ','
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: from
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 从
- en: p
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: p
- en: in
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 在
- en: productsArray
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: productsArray
- en: select
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: select
- en: new
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: XElement
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: XElement
- en: (
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '"product"'
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: '"产品"'
- en: ','
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: new
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: XAttribute(
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: XAttribute(
- en: '"id"'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: '"id"'
- en: ',  p.ProductId'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: ，  p.ProductId
- en: ),
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: ），
- en: new
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: XAttribute
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: XAttribute
- en: (
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '"price"'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '"price"'
- en: ', p.UnitPrice'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: ， p.UnitPrice
- en: ),
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: ），
- en: new
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: 新的
- en: XElement
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: XElement
- en: (
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '"name"'
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: '"name"'
- en: ', p.ProductName'
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: ， p.ProductName
- en: )))
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: )))
- en: ;
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: WriteLine(xml.ToString());
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(xml.ToString());
- en: '}'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment the previous method call and call `OutputProductsAsXml`
    .
  id: totrans-1491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉之前的方法调用，并调用`OutputProductsAsXml`。
- en: 'Run the code, view the result, and note that the structure of the XML generated
    matches the elements and attributes that the LINQ to XML statement declaratively
    described in the preceding code, as shown in the following partial output:'
  id: totrans-1492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，并注意生成的XML结构与LINQ to XML语句中声明的元素和属性匹配，如下面部分输出所示：
- en: '```cs'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <products>
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: <products>
- en: <product id="1" price="18">
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: <product id="1" price="18">
- en: <name>Chai</name>
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: <name>Chai</name>
- en: </product>
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: </product>
- en: <product id="2" price="19">
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: <product id="2" price="19">
- en: <name>Chang</name>
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: <name>Chang</name>
- en: </product>
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: </product>
- en: '...'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Reading XML using LINQ to XML
  id: totrans-1503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用LINQ to XML读取XML
- en: 'You might want to use LINQ to XML to easily query or process XML files:'
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望使用LINQ to XML轻松查询或处理XML文件：
- en: In the `LinqWithEFCore` project, add a file named `settings.xml` .
  id: totrans-1505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LinqWithEFCore`项目中，添加一个名为`settings.xml`的文件。
- en: 'Modify its contents, as shown in the following markup:'
  id: totrans-1506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容，如下标记所示：
- en: '```cs'
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <?xml version="1.0" encoding="utf-8" ?>
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: <?xml version="1.0" encoding="utf-8"?>
- en: <
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: appSettings
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序设置
- en: '>'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: add
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 添加
- en: key
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 键
- en: '='
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"color"'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '"颜色"'
- en: value
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: '='
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"red"'
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: “红色”
- en: />
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: add
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 添加
- en: key
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 键
- en: '='
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"size"'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '"大小"'
- en: value
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: '='
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"large"'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '"大"'
- en: />
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: add
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 添加
- en: key
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: 键
- en: '='
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"price"'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: '"价格"'
- en: value
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: '='
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: '='
- en: '"23.99"'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: '"23.99"'
- en: />
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: </
- en: appSettings
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序设置
- en: '>'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '```'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you are using Visual Studio 2022 for Windows, then the compiled application
    executes in the `LinqWithEFCore\bin\Debug\net6.0` folder so it will not find the
    `settings.xml` file unless we indicate that it should always be copied to the
    output directory.
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Windows的Visual Studio 2022，则编译的应用程序将在`LinqWithEFCore\bin\Debug\net6.0`文件夹中执行，因此它将无法找到`settings.xml`文件，除非我们指示它应始终复制到输出目录。
- en: In **Solution Explorer** , right-click the `settings.xml` file and select **Properties**
    .
  id: totrans-1544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击`settings.xml`文件，然后选择**属性**。
- en: In **Properties** , set **Copy to Output Directory** to **Copy always** .
  id: totrans-1545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**中，将**复制到输出目录**设置为**始终复制**。
- en: 'At the bottom of `Program.cs` , create a method to complete these tasks, as
    shown in the following code:'
  id: totrans-1546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，创建一个方法来完成这些任务，如下面的代码所示：
- en: Load the XML file.
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载XML文件。
- en: Use LINQ to XML to search for an element named `appSettings` and its descendants
    named `add` .
  id: totrans-1548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LINQ to XML搜索名为`appSettings`及其后代名为`add`的元素。
- en: Project the XML into an array of an anonymous type with `Key` and `Value` properties.
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将XML投影到具有`Key`和`Value`属性的匿名类型数组中。
- en: 'Enumerate through the array to show the results:'
  id: totrans-1550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举数组以显示结果：
- en: '```cs'
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ProcessSettings
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: ProcessSettings
- en: ()
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: XDocument doc = XDocument.Load("settings.xml"
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: XDocument doc = XDocument.Load("settings.xml"
- en: );
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: var
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: 变量
- en: appSettings = doc.Descendants("appSettings"
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: appSettings = doc.Descendants("appSettings"
- en: )
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .Descendants("add"
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: .Descendants("add"
- en: )
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .Select(node => new
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: .Select(node => new
- en: '{'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Key = node.Attribute("key"
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 键 = 节点.属性("键"
- en: )?.Value,
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: )?.Value,
- en: Value = node.Attribute("value"
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: 值 = 节点.属性("值"
- en: )?.Value
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: )?.Value
- en: '}).ToArray();'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: '}).ToArray();'
- en: foreach
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (var
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: （var
- en: item in
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中
- en: appSettings)
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: appSettings)
- en: '{'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{item.Key}'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: '{item.Key}'
- en: ':'
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: ：
- en: '{item.Value}'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: '{item.Value}'
- en: '"'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment the previous method call and call `ProcessSettings`
    .
  id: totrans-1585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉先前的方法调用，然后调用`ProcessSettings`。
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-1586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'color: red'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色：红色
- en: 'size: large'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 大小：大
- en: 'price: 23.99'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 价格：23.99
- en: '```'
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Practicing and exploring
  id: totrans-1592
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore with deeper research into the topics covered in
    this chapter.
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试您的知识和理解，进行一些动手实践，并深入研究本章涵盖的主题。
- en: Exercise 11.1 – Test your knowledge
  id: totrans-1594
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.1-测试您的知识
- en: 'Answer the following questions:'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What are the two required parts of LINQ?
  id: totrans-1596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LINQ的两个必需部分是什么？
- en: Which LINQ extension method would you use to return a subset of properties from
    a type?
  id: totrans-1597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用哪个LINQ扩展方法来返回类型的属性子集？
- en: Which LINQ extension method would you use to filter a sequence?
  id: totrans-1598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用哪个LINQ扩展方法来过滤序列？
- en: List five LINQ extension methods that perform aggregation.
  id: totrans-1599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出执行聚合的五个LINQ扩展方法。
- en: What is the difference between the `Select` and `SelectMany` extension methods?
  id: totrans-1600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “Select”和“SelectMany”扩展方法之间有什么区别？
- en: What is the difference between `IEnumerable<T>` and `IQueryable<T>` ? And how
    do you switch between them?
  id: totrans-1601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “IEnumerable<T>”和“IQueryable<T>”之间有什么区别？如何在它们之间切换？
- en: What does the last type parameter `T` in generic `Func` delegates like `Func<T1,
    T2, T>` represent?
  id: totrans-1602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泛型`Func`委托中的最后一个类型参数`T`代表什么？
- en: What is the benefit of a LINQ extension method that ends with `OrDefault` ?
  id: totrans-1603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`OrDefault`结尾的LINQ扩展方法有什么好处？
- en: Why is query comprehension syntax optional?
  id: totrans-1604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么查询理解语法是可选的？
- en: How can you create your own LINQ extension methods?
  id: totrans-1605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建自己的LINQ扩展方法？
- en: Exercise 11.2 – Practice querying with LINQ
  id: totrans-1606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.2-使用LINQ进行查询
- en: 'In the `Chapter11` solution/workspace, create a console application, named
    `Exercise02` , that prompts the user for a city and then lists the company names
    for Northwind customers in that city, as shown in the following output:'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter11`解决方案/工作区中，创建一个控制台应用程序，名为`Exercise02`，提示用户输入一个城市，然后列出该城市的Northwind客户的公司名称，如下面的输出所示：
- en: '```cs'
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter the name of a city: London'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个城市的名称：伦敦
- en: 'There are 6 customers in London:'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 伦敦有6位客户：
- en: Around the Horn
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 环绕角
- en: B's Beverages
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: B的饮料
- en: Consolidated Holdings
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 合并控股
- en: Eastern Connection
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 东方连接
- en: North/South
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 北/南
- en: Seven Seas Imports
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 七海进口
- en: '```'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Then, enhance the application by displaying a list of all unique cities that
    customers already reside in as a prompt to the user before they enter their preferred
    city, as shown in the following output:'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，增强应用程序，通过显示客户已经居住的所有唯一城市的列表，作为用户输入其首选城市之前的提示，如下面的输出所示：
- en: '```cs'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Aachen, Albuquerque, Anchorage, Århus, Barcelona, Barquisimeto, Bergamo, Berlin,
    Bern, Boise, Bräcke, Brandenburg, Bruxelles, Buenos Aires, Butte, Campinas, Caracas,
    Charleroi, Cork, Cowes, Cunewalde, Elgin, Eugene, Frankfurt a.M., Genève, Graz,
    Helsinki, I. de Margarita, Kirkland, Kobenhavn, Köln, Lander, Leipzig, Lille,
    Lisboa, London, Luleå, Lyon, Madrid, Mannheim, Marseille, México D.F., Montréal,
    München, Münster, Nantes, Oulu, Paris, Portland, Reggio Emilia, Reims, Resende,
    Rio de Janeiro, Salzburg, San Cristóbal, San Francisco, Sao Paulo, Seattle, Sevilla,
    Stavern, Strasbourg, Stuttgart, Torino, Toulouse, Tsawassen, Vancouver, Versailles,
    Walla Walla, Warszawa
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: Aachen，Albuquerque，Anchorage，Århus，Barcelona，Barquisimeto，Bergamo，Berlin，Bern，Boise，Bräcke，Brandenburg，Bruxelles，Buenos
    Aires，Butte，Campinas，Caracas，Charleroi，Cork，Cowes，Cunewalde，Elgin，Eugene，Frankfurt
    a.M.，Genève，Graz，Helsinki，I. de Margarita，Kirkland，Kobenhavn，Köln，Lander，Leipzig，Lille，Lisboa，London，Luleå，Lyon，Madrid，Mannheim，Marseille，México
    D.F.，Montréal，München，Münster，Nantes，Oulu，Paris，Portland，Reggio Emilia，Reims，Resende，Rio
    de Janeiro，Salzburg，San Cristóbal，San Francisco，Sao Paulo，Seattle，Sevilla，Stavern，Strasbourg，Stuttgart，Torino，Toulouse，Tsawassen，Vancouver，Versailles，Walla
    Walla，Warszawa
- en: '```'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Exercise 11.3 – Explore topics
  id: totrans-1622
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.3 - 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，了解本章涵盖的主题的更多细节：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-11---querying-and-manipulating-data-using-linq](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-11---querying-and-manipulating-data-using-linq)'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-11---querying-and-manipulating-data-using-linq](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-11---querying-and-manipulating-data-using-linq)'
- en: Summary
  id: totrans-1625
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to write LINQ queries to select, project, filter,
    sort, join, and group data in many different formats, including XML, which are
    tasks you will perform every day.
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何编写LINQ查询来选择、投影、过滤、排序、连接和分组数据，这些是您每天都会执行的任务。
- en: In the next chapter, you will use the `Task` type to improve the performance
    of your applications.
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将使用`Task`类型来提高应用程序的性能。
