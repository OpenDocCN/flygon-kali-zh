["```cs\n<configuration>  \n    <system.web>     \n        <processModel minWorkerThreads=\"25\" minIoThreads=\"25\" />  \n    </system.web> \n</configuration>\n```", "```cs\n<system.web>\n  <applicationPool\n    maxConcurrentRequestPerCPU=\"5000\"\n    maxConcurrentThreadsPerCPU=\"0\"\n    requestQueueLimit=\"5000\" />\n</system.web>\n```", "```cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateWebHostBuilder(args).Build().Run();\n    }\n    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>    \n     WebHost.CreateDefaultBuilder(args).UseStartup<Startup>();\n    }\n```", "```cs\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n            .UseLibuv(opts => opts.ThreadCount = 4)\n            .UseStartup<Startup>();\n```", "```cs\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n```", "```cs\nHost.CreateDefaultBuilder(args)\n.ConfigureKestrel((context, options) =>\n{\n    options.Limits.MaxConcurrentConnections = 100;\n    options.Limits.MaxConcurrentUpgradedConnections = 100;\n}\n```", "```cs\n[HttpGet]\npublic ActionResult<IEnumerable<string>> Get()\n{\n    var filePath = System.IO.Path.Combine(\n     HostingEnvironment.ContentRootPath,\"Files\",\"data.txt\");\n    var text = System.IO.File.ReadAllText(filePath);\n    return Content(text);\n}\n```", "```cs\n[HttpGet]\npublic async Task<ActionResult<IEnumerable<string>>> GetAsync()\n{\n    var filePath = System.IO.Path.Combine(\n      HostingEnvironment.ContentRootPath, \"Files\", \"data.txt\");\n    var text = await System.IO.File.ReadAllTextAsync(filePath);\n    return Content(text);\n}\n```", "```cs\npublic interface IAsyncEnumerable<T>\n{\n  public IAsyncEnumerator<T> GetEnumerator();\n}\npublic interface IAsyncEnumerator<out T>\n{\n  public T Current { get; }\n  public Task<bool> MoveNextAsync();\n}\n```", "```cs\nclass OddIndexEnumerator : IAsyncEnumerator<int>\n{\n    List<int> _numbers;\n    int _currentIndex = 1;\n    public OddIndexEnumerator(IEnumerable<int> numbers)\n    {\n        _numbers = numbers.ToList();\n    }\n    public int Current\n    {\n        get\n        {\n            Task.Delay(2000);\n            return _numbers[_currentIndex];\n        }\n    }\n    public ValueTask DisposeAsync()\n    {\n        return new ValueTask(Task.CompletedTask);\n    }\n    public ValueTask<bool> MoveNextAsync()\n    {\n        Task.Delay(2000);\n        if (_currentIndex < _numbers.Count() - 2)\n        {\n            _currentIndex += 2;\n            return new ValueTask<bool>(Task.FromResult<bool>(true));\n        }\n        return new ValueTask<bool>(Task.FromResult<bool>(false));\n    }\n}\n```", "```cs\nclass CustomAsyncIntegerCollection : IAsyncEnumerable<int>\n{\n    List<int> _numbers;\n    public CustomAsyncIntegerCollection(IEnumerable<int> numbers)\n    {\n        _numbers = numbers.ToList();\n    }\n    public IAsyncEnumerator<int> GetAsyncEnumerator(\n     CancellationToken cancellationToken = default)\n    {\n        return new OddIndexEnumerator(_numbers);\n    }\n}\n```", "```cs\npublic static class CollectionExtensions\n{\n    public static IAsyncEnumerable<int> AsEnumerable(this \n     IEnumerable<int> source) => new CustomAsyncIntegerCollection(source);\n}\n```", "```cs\nstatic async IAsyncEnumerable<int> GetBigResultsAsync()\n{\n    var list = Enumerable.Range(1, 20);\n    await foreach (var item in list.AsEnumerable())\n    {\n        yield return item;\n    }\n}\n```", "```cs\nasync static Task Main(string[] args)\n{\n    await foreach (var dataPoint in GetBigResultsAsync())\n    {\n        Console.WriteLine(dataPoint);\n    }\n    Console.WriteLine(\"Hello World!\");\n}\n```"]