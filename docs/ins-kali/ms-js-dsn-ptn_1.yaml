- en: Chapter 1. Designing for Fun and Profit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。为了乐趣和利润而设计
- en: JavaScript is an evolving language that has come a long way from its inception.
    Possibly more than any other programming language, it has grown and changed with
    the growth of the World Wide Web. The exploration of how JavaScript can be written
    using good design principles is the topic of this book. The preface of this book
    contains a detailed explanation of the sections of the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种不断发展的语言，从诞生以来已经走过了很长的路。可能比其他任何一种编程语言都更随着万维网的发展而成长和变化。本书的主题是探索如何使用良好的设计原则编写JavaScript。本书的前言包含了对书中各节的详细解释。
- en: In the first half of this chapter, we'll explore the history of JavaScript and
    how it came to be the important language that it is today. As JavaScript has evolved
    and grown in importance, the need to apply rigorous methods to its construction
    has also grown. Design patterns can be a very useful tool to assist in developing
    maintainable code. The second half of the chapter will be dedicated to the theory
    of design patterns. Finally, we'll look briefly at anti-patterns.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前半部分，我们将探讨JavaScript的历史，以及它如何成为今天重要的语言。随着JavaScript的发展和重要性的增长，对其构建应用严格方法的需求也在增长。设计模式可以是一个非常有用的工具，帮助开发可维护的代码。本章的后半部分将专门讨论设计模式的理论。最后，我们将简要地看一下反模式。
- en: 'The topics in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题如下：
- en: History of JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript的历史
- en: What is a design pattern?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是设计模式？
- en: Anti-patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反模式
- en: The road to JavaScript
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通往JavaScript的道路
- en: We'll never know how language first came into being. Did it slowly evolve from
    a series of grunts and guttural sounds made during grooming rituals? Perhaps it
    developed to allow mothers and their offspring to communicate. Both of these are
    theories, all but impossible to prove. Nobody was around to observe our ancestors
    during that important period. In fact, the general lack of empirical evidence
    led the Linguistic Society of Paris to ban further discussions on the topic, seeing
    it as unsuitable for serious study.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们永远不会知道语言最初是如何产生的。它是从一系列在梳理仪式中发出的咕哝声和喉音慢慢演变而来的吗？也许它是为了让母亲和她们的后代进行交流而发展起来的。这两种理论都是不可能证明的。在那个重要的时期，没有人在场观察我们的祖先。事实上，缺乏经验证据导致巴黎语言学会禁止进一步讨论这个话题，认为它不适合进行严肃的研究。
- en: The early days
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 早期
- en: Fortunately, programming languages have developed in recent history and we've
    been able to watch them grow and change. JavaScript has one of the more interesting
    histories of modern programming languages. During what must have been an absolutely
    frantic 10 days in May of 1995, a programmer at Netscape wrote the foundation
    for what would grow up to be modern JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，编程语言在最近的历史中得到了发展，我们能够看到它们的成长和变化。JavaScript是现代编程语言中历史最有趣的之一。在1995年5月的10天里，网景的一名程序员写下了现代JavaScript的基础。
- en: 'At the time, Netscape was involved in the first of the browser wars with Microsoft.
    The vision for Netscape was far grander than simply developing a browser. They
    wanted to create an entire distributed operating system making use of Sun Microsystems''
    recently-released Java programming language. Java was a much more modern alternative
    to the C++ Microsoft was pushing. However, Netscape didn''t have an answer to
    Visual Basic. Visual Basic was an easier to use programming language, which was
    targeted at developers with less experience. It avoided some of the difficulties
    around memory management that make C and C++ notoriously difficult to program.
    Visual Basic also avoided strict typing and overall allowed more leeway. Here
    is an illustration of the timeline of JavaScript:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，网景正参与与微软的浏览器战争。网景的愿景远不止于开发一个浏览器。他们想要创建一个完整的分布式操作系统，利用Sun Microsystems最近发布的Java编程语言。Java是C++的更现代的替代品。然而，网景没有对Visual
    Basic有所回应。Visual Basic是一种更容易使用的编程语言，面向经验较少的开发人员。它避开了C和C++编程中的一些困难，如内存管理。Visual
    Basic也避免了严格的类型检查，总体上更加灵活。下面是JavaScript的时间线图：
- en: '![The early days](Image00001.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![早期](Image00001.jpg)'
- en: Brendan Eich was tasked with developing Netscape repartee to VB. The project
    was initially codenamed Mocha, but was renamed LiveScript before Netscape 2.0
    beta was released. By the time the full release was available, Mocha/LiveScript
    had been renamed JavaScript to tie it into the Java applet integration. Java Applets
    were small applications which ran in the browser. They had a different security
    model from the browser itself and so were limited in how they could interact with
    both the browser and the local system. It is quite rare to see applets these days,
    as much of their functionality has become part of the browser. Java was riding
    a popular wave at the time and any relationship to it was played up.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Brendan Eich被委托开发网景的回应VB。该项目最初被命名为Mocha，但在网景2.0测试版发布之前被更名为LiveScript。到全面发布时，Mocha/LiveScript已更名为JavaScript，以便与Java小程序集成。Java小程序是在浏览器中运行的小型应用程序。它们与浏览器本身有不同的安全模型，因此在与浏览器和本地系统的交互方面受到限制。如今很少见到小程序，因为它们的许多功能已经成为浏览器的一部分。当时Java正处于流行的浪潮中，与之有关的任何关系都被夸大了。
- en: The name has caused much confusion over the years. JavaScript is a very different
    language from Java. JavaScript is an interpreted language with loose typing, which
    runs primarily on the browser. Java is a language that is compiled to bytecode,
    which is then executed on the Java Virtual Machine. It has applicability in numerous
    scenarios, from the browser (through the use of Java applets), to the server (Tomcat,
    JBoss, and so on), to full desktop applications (Eclipse, OpenOffice, and so on).
    In most laypersons' minds, the confusion remains.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，这个名称引起了很多混淆。JavaScript是一种与Java非常不同的语言。JavaScript是一种解释性语言，具有松散的类型，主要在浏览器上运行。Java是一种编译成字节码的语言，然后在Java虚拟机上执行。它在许多场景中都有适用性，从浏览器（通过Java小程序的使用）到服务器（Tomcat，JBoss等），到完整的桌面应用程序（Eclipse，OpenOffice等）。在大多数外行人的想法中，混淆仍然存在。
- en: JavaScript turned out to be really quite useful for interacting with the web
    browser. It was not long until Microsoft had also adopted JavaScript into their
    Internet Explorer to complement VBScript. The Microsoft implementation was known
    as JScript.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript原来真的非常有用，可以与Web浏览器进行交互。很快，微软也将JavaScript引入其Internet Explorer中，以补充VBScript。微软的实现被称为JScript。
- en: By late 1996, it was clear that JavaScript was going to be the winning web language
    for the near future. In order to limit the amount of language deviation between
    implementations, Sun and Netscape began working with the **European Computer Manufacturers**
    **Association** ( **ECMA** ) to develop a standard to which future versions of
    JavaScript would need to comply. The standard was released very quickly (very
    quickly in terms of how rapidly standards organizations move), in July of 1997\.
    On the off chance that you have not seen enough names yet for JavaScript, the
    standard version was called **ECMAScript** , a name which still persists in some
    circles.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到1996年末，很明显JavaScript将成为不久的将来的获胜网络语言。为了限制实现之间的语言偏差，Sun和Netscape开始与**欧洲计算机制造商协会**（**ECMA**）合作，制定了未来版本的JavaScript需要遵守的标准。标准很快发布（从标准组织的运作速度来看，非常快），于1997年7月发布。如果你还没有看到JavaScript的足够多的名称，标准版本被称为**ECMAScript**，这个名称在一些圈子里仍然存在。
- en: Unfortunately, the standard only specified the very core parts of JavaScript.
    With the browser wars raging, it was apparent that any vendor that stuck with
    only the basic implementation of JavaScript would quickly be left behind. At the
    same time, there was much work going on to establish a standard **Document Object
    Model** ( **DOM** ) for browsers. The DOM was, in effect, an API for a web page
    that could be manipulated using JavaScript.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，标准只规定了JavaScript的核心部分。在浏览器战争激烈的同时，很明显，任何坚持只使用JavaScript基本实现的供应商都会很快被抛在后面。与此同时，还在进行大量工作，以建立浏览器的标准**文档对象模型**（**DOM**）。DOM实际上是一个可以使用JavaScript进行操作的网页API。
- en: For many years, every JavaScript script would start by attempting to determine
    the browser on which it was running. This would dictate how to address elements
    in the DOM, as there were dramatic deviations between each browser. The spaghetti
    of code that was required to perform simple actions was legendary. I remember
    reading a year-long 20-part series on developing a **Dynamic HTML** ( **DHTML**
    ) drop down menu such that it would work on both Internet Explorer and Netscape
    Navigator. The same functionally can now be achieved with pure CSS without even
    having to resort to JavaScript.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，每个JavaScript脚本都会尝试确定其运行的浏览器。这将决定如何处理DOM中的元素，因为每个浏览器之间存在显著的差异。执行简单操作所需的代码混乱程度是传奇的。我记得曾经阅读过一篇为期一年的20篇系列文章，介绍如何开发一个在Internet
    Explorer和Netscape Navigator上都能工作的**Dynamic HTML**（**DHTML**）下拉菜单。现在，可以通过纯CSS实现相同的功能，甚至无需使用JavaScript。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: DHTML was a popular term in the late 1990s and early 2000s. It really referred
    to any web page that had some sort of dynamic content that was executed on the
    client side. It has fallen out of use, as the popularity of JavaScript has made
    almost every page a dynamic one.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: DHTML在20世纪90年代末和21世纪初是一个流行的术语。它实际上指的是在客户端执行某种动态内容的任何网页。随着JavaScript的流行，几乎每个页面都变得动态化，这个术语已经不再使用。
- en: Fortunately, the efforts to standardize JavaScript continued behind the scenes.
    Versions 2 and 3 of ECMAScript were released in 1998 and 1999\. It looked like
    there might finally be some agreement between the various parties interested in
    JavaScript. Work began in early 2000 on ECMAScript 4, which was to be a major
    new release.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，JavaScript标准化的努力在幕后继续进行。ECMAScript的第2版和第3版分别在1998年和1999年发布。看起来各方对JavaScript感兴趣的各方可能终于达成了一些共识。2000年初开始了ECMAScript
    4的工作，这将是一个重大的新版本。
- en: A pause
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂停
- en: Then, disaster struck. The various groups involved in the ECMAScript effort
    had major disagreements about the direction JavaScript was to take. Microsoft
    seemed to have lost interest in the standardization effort. It was somewhat understandable,
    as it was around that time that Netscape self-destructed and Internet Explorer
    became the de-facto standard. Microsoft implemented parts of ECMAScript 4 but
    not all of it. Others implemented more fully-featured support, but without the
    market leader on-board, developers didn't bother using them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，灾难来临了。ECMAScript工作中涉及的各个团体对JavaScript的发展方向存在重大分歧。微软似乎对标准化工作失去了兴趣。这在一定程度上是可以理解的，因为那个时候Netscape自毁了，Internet
    Explorer成为了事实上的标准。微软实现了ECMAScript 4的部分内容，但并非全部。其他人实现了更全面的支持，但由于市场领导者不支持，开发人员也不愿意使用它们。
- en: Years passed without consensus and without a new release of ECMAScript. However,
    as frequently happens, the evolution of the Internet could not be stopped by a
    lack of agreement between major players. Libraries such as jQuery, Prototype,
    Dojo, and Mootools, papered over the major differences in browsers, making cross-browser
    development far easier. At the same time, the amount of JavaScript used in applications
    increased dramatically.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 多年过去了，没有达成共识，也没有新的ECMAScript发布。然而，正如经常发生的那样，互联网的发展无法被主要参与者之间的意见分歧所阻止。诸如jQuery，Prototype，Dojo和Mootools等库弥合了浏览器之间的主要差异，使跨浏览器开发变得更加容易。与此同时，应用程序中使用的JavaScript数量大幅增加。
- en: The way of GMail
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GMail的方式
- en: The turning point was, perhaps, the release of Google's GMail application in
    2004\. Although XMLHTTPRequest, the technology behind **Asynchronous JavaScript
    and XML** ( **AJAX** ), had been around for about five years when GMail was released,
    it had not been well-used. When GMail was released, I was totally knocked off
    my feet by how smooth it was. We've grown used to applications that avoid full
    reloads, but at the time, it was a revolution. To make applications like that
    work, a great deal of JavaScript is needed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 转折点也许是2004年Google发布GMail应用程序。尽管**异步JavaScript和XML**（**AJAX**）背后的技术在GMail发布时已经存在了大约五年，但它并没有被广泛使用。当GMail发布时，我完全被它的流畅度所震撼。我们已经习惯了避免完整重新加载的应用程序，但在当时，这是一场革命。为了使这样的应用程序工作，需要大量的JavaScript。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: AJAX is a method by which small chunks of data are retrieved from the server
    by a client instead of refreshing the entire page. The technology allows for more
    interactive pages that avoid the jolt of full page reloads.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX是一种通过客户端从服务器检索小数据块而不是刷新整个页面的方法。这种技术允许更具交互性的页面，避免了完整页面重新加载的冲击。
- en: The popularity of GMail was the trigger for a change that had been brewing for
    a while. Increasing JavaScript acceptance and standardization pushed us past the
    tipping point for the acceptance of JavaScript as a proper language. Up until
    that point, much of the use of JavaScript was for performing minor changes to
    the page and for validating form input. I joke with people that, in the early
    days of JavaScript, the only function name which was used was `Validate()` .
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: GMail的流行是一个正在酝酿已久的变革的触发器。不断增加的JavaScript接受度和标准化推动我们超越了JavaScript作为一种合适语言的临界点。直到那时，JavaScript的使用大多用于对页面进行微小更改和验证表单输入。我和人们开玩笑说，在JavaScript的早期，唯一使用的函数名称是`Validate()`。
- en: Applications such as GMail that have a heavy reliance on AJAX and avoid full
    page reloads are known as **Single Page Applications** or **SPAs** . By minimizing
    the changes to the page contents, users have a more fluid experience. By transferring
    only a **JavaScript Object Notation** ( **JSON** ) payload instead of HTML, the
    amount of bandwidth required is also minimized. This makes applications appear
    to be snappier. In recent years, there have been great advances in frameworks
    that ease the creation of SPAs. AngularJS, backbone.js, and ember are all Model
    View Controller style frameworks. They have gained great popularity in the past
    two to three years and provide some interesting use of patterns. These frameworks
    are the evolution of years of experimentation with JavaScript best practices by
    some very smart people.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如GMail这样对AJAX有很大依赖并且避免完整页面重新加载的应用程序被称为**单页面应用**或**SPA**。通过最小化页面内容的更改，用户可以获得更流畅的体验。通过仅传输**JavaScript对象表示**（**JSON**）负载而不是HTML，还可以最小化所需的带宽。这使得应用程序看起来更加敏捷。近年来，关于简化SPA创建的框架取得了巨大进步。AngularJS，backbone.js和ember都是模型视图控制器风格的框架。它们在过去两三年里获得了极大的流行，并提供了一些有趣的模式使用。这些框架是多年来一些非常聪明的人对JavaScript最佳实践进行实验的演变。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: JSON is a human-readable serialization format for JavaScript. It has become
    very popular in recent years, as it is easier and less cumbersome than previously
    popular formats such as XML. It lacks many of the companion technologies and strict
    grammatical rules of XML, but makes up for it in simplicity.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: JSON是JavaScript的一种人类可读的序列化格式。近年来它变得非常流行，因为它比以前流行的XML格式更容易和不那么繁琐。它缺少XML的许多伴随技术和严格的语法规则，但在简单性方面弥补了这一点。
- en: At the same time as the frameworks using JavaScript are evolving, the language
    is too. 2015 saw the release of a much-vaunted new version of JavaScript that
    had been under development for some years. Initially called ECMAScript 6, the
    final name ended up being ECMAScript-2015\. It brought with it some great improvements
    to the ecosystem. Browser vendors are rushing to adopt the standard. Because of
    the complexity of adding new language features to the code base, coupled with
    the fact that not everybody is on the cutting edge of browsers, a number of other
    languages that transcompile to JavaScript are gaining popularity. CoffeeScript
    is a Python-like language that strives to improve the readability and brevity
    of JavaScript. Developed by Google, Dart is being pushed by Google as an eventual
    replacement for JavaScript. Its construction addresses some of the optimizations
    that are impossible in traditional JavaScript. Until a Dart runtime is sufficiently
    popular, Google provides a Dart to the JavaScript transcompiler. TypeScript is
    a Microsoft project that adds some ECMAScript-2015 and even some ECMAScript-201X
    syntax, as well as an interesting typing system, to JavaScript. It aims to address
    some of the issues that large JavaScript projects present.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用JavaScript的框架同时，语言本身也在不断发展。2015年发布了一个备受瞩目的JavaScript新版本，这个版本已经在开发了一些年头。最初被称为ECMAScript
    6，最终的名称变成了ECMAScript-2015。它带来了一些对生态系统的重大改进。浏览器供应商们正在争相采用这一标准。由于向代码库添加新的语言特性的复杂性，再加上并非所有人都在浏览器的前沿，一些其他编译成JavaScript的语言正在变得流行。CoffeeScript是一种类似Python的语言，旨在提高JavaScript的可读性和简洁性。由Google开发的Dart被谷歌推广为JavaScript的最终替代品。它的构造解决了传统JavaScript中不可能的一些优化。在Dart运行时足够流行之前，谷歌提供了一个Dart到JavaScript的转换器。TypeScript是微软的一个项目，它向JavaScript添加了一些ECMAScript-2015甚至一些ECMAScript-201X的语法，以及一个有趣的类型系统。它旨在解决大型JavaScript项目所面临的一些问题。
- en: 'The point of this discussion about the history of JavaScript is twofold: first,
    it is important to remember that languages do not develop in a vacuum. Both human
    languages and computer programming languages mutate based on the environments
    in which they are used. It is a popularly held belief that the Inuit people have
    a great number of words for "snow", as it was so prevalent in their environment.
    This may or may not be true, depending on your definition for the word and exactly
    who makes up the Inuit people. There are, however, a great number of examples
    of domain-specific lexicons evolving to meet the requirements for exact definitions
    in narrow fields. One need look no further than a specialty cooking store to see
    the great number of variants of items which a layperson such as myself would call
    a pan.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论JavaScript历史的目的有两个：首先，重要的是要记住语言不是在真空中发展的。人类语言和计算机编程语言都会根据使用环境而发生变异。人们普遍认为因纽特人有很多词来描述“雪”，因为在他们的环境中雪是如此普遍。这可能是真的，也可能不是，这取决于你对这个词的定义，以及谁构成了因纽特人。然而，在狭窄领域中，有很多例子表明特定领域的词汇会不断演变以满足精确定义的要求。我们只需看一下专业烹饪店，就会看到许多我们这样的外行人会称之为平底锅的各种变体。
- en: The Sapir–Whorf hypothesis is a hypothesis within the linguistics domain, which
    suggests that not only is language influenced by the environment in which it is
    used, but also that language influences its environment. Also known as linguistic
    relativity, the theory is that one's cognitive processes differ based on how the
    language is constructed. Cognitive psychologist Keith Chen has proposed a fascinating
    example of this. In a very highly-viewed TED talk, Dr. Chen suggested that there
    is a strong positive correlation between languages that lack a future tense and
    those that have high savings rates ([https://www.ted.com/talks/keith_chen_could_your_language_affect_your_ability_to_save_money/transcript](https://www.ted.com/talks/keith_chen_could_your_language_affect_your_ability_to_save_money/transcript)
    ). The hypothesis at which Dr. Chen arrived is that when your language does not
    have a strong sense of connection between the present and the future, this leads
    to more reckless behavior in the present.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 萨皮尔-沃夫假说是语言学领域内的一种假设，它认为语言不仅受到使用环境的影响，而且语言也会影响其环境。也被称为语言相对论，该理论认为一个人的认知过程会因语言的构造方式而有所不同。认知心理学家基思·陈提出了一个引人入胜的例子。在一次观看量极高的TED演讲中，陈博士提出了一种有力的正相关关系，即缺乏未来时态的语言与高储蓄率之间存在着强烈的正相关关系（[https://www.ted.com/talks/keith_chen_could_your_language_affect_your_ability_to_save_money/transcript](https://www.ted.com/talks/keith_chen_could_your_language_affect_your_ability_to_save_money/transcript)）。陈博士得出的假设是，当你的语言没有很强的将现在和未来联系起来的意识时，这会导致更加鲁莽的行为。
- en: Thus, understanding the history of JavaScript puts one in a better position
    to understand how and where to make use of JavaScript.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，了解JavaScript的历史将使人更好地理解何时何地使用JavaScript。
- en: The second reason I explored the history of JavaScript is because it is absolutely
    fascinating to see how quickly such a popular tool has evolved. At the time of
    writing, it has been about 20 years since JavaScript was first built and its rise
    to popularity has been explosive. What more exciting thing is there than to work
    in an ever-evolving language?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我探索JavaScript历史的第二个原因是，看到如此受欢迎的工具如何迅速地发展是非常迷人的。在撰写本文时，距离JavaScript首次构建已经大约20年了，它的流行程度增长迅猛。还有什么比在一个不断发展的语言中工作更令人兴奋的呢？
- en: JavaScript everywhere
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript无处不在
- en: Since the GMail revolution, JavaScript has grown immensely. The renewed browser
    wars, which pit Internet Explorer and Edge against Chrome and against Firefox,
    have lead to building a number of very fast JavaScript interpreters. Brand new
    optimization techniques have been deployed and it is not unusual to see JavaScript
    compiled to machine-native code for the added performance it gains. However, as
    the speed of JavaScript has increased, so has the complexity of the applications
    built using it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自GMail革命以来，JavaScript已经大幅增长。重新燃起的浏览器战争，将Internet Explorer和Edge对抗Chrome和Firefox，导致了构建许多非常快速的JavaScript解释器。全新的优化技术已经部署，不足以看到JavaScript编译为机器本地代码以获得额外的性能。然而，随着JavaScript的速度增加，使用它构建的应用程序的复杂性也在增加。
- en: JavaScript is no longer simply a language for manipulating the browser, either.
    The JavaScript engine behind the popular Chrome browser has been extracted and
    is now at the heart of a number of interesting projects such as Node.js. Node.js
    started off as a highly asynchronous method of writing server-side applications.
    It has grown greatly and has a very active community supporting it. A wide variety
    of applications have been built using the Node.js runtime. Everything from build
    tools to editors have been built on the base of Node.js. Recently, the JavaScript
    engine for Microsoft Edge, ChakraCore, was also open sourced and can be embedded
    in Node.js as an alternative to Google's V8\. SpiderMonkey, the Firefox equivalent,
    is also open source and is making its way into more tools.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript不再仅仅是用于操作浏览器的语言。流行的Chrome浏览器背后的JavaScript引擎已经被提取出来，现在是许多有趣项目的核心，比如Node.js。Node.js最初是一种高度异步的编写服务器端应用程序的方法。它已经大大发展，并有一个非常活跃的社区支持。使用Node.js运行时已经构建了各种各样的应用程序。从构建工具到编辑器都是基于Node.js构建的。最近，微软Edge的JavaScript引擎ChakraCore也开源，并可以嵌入Node.js作为Google的V8的替代品。Firefox的等效物SpiderMonkey也是开源的，并正在进入更多的工具中。
- en: JavaScript can even be used to control microcontrollers. The Johnny-Five framework
    is a programming framework for the very popular Arduino. It brings a much simpler
    approach to programming devices than the traditional low-level languages used
    for programming these devices. Using JavaScript and Arduino opens up a world of
    possibilities, from building robots to interacting with real-world sensors.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript甚至可以用来控制微控制器。Johnny-Five框架是非常流行的Arduino的编程框架。它为编程这些设备带来了比传统的低级语言更简单的方法。使用JavaScript和Arduino打开了一系列可能性，从构建机器人到与现实世界的传感器进行交互。
- en: 'All of the major smartphone platforms (iOS, Android, and Windows Phone) have
    an option to build applications using JavaScript. The tablet space is much the
    same, with tablets supporting programming using JavaScript. Even the latest version
    of Windows provides a mechanism for building applications using JavaScript. This
    illustration shows some of the things possible with JavaScript:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要的智能手机平台（iOS、Android和Windows Phone）都有使用JavaScript构建应用程序的选项。平板电脑领域也大同小异，支持使用JavaScript进行编程。甚至最新版本的Windows提供了使用JavaScript构建应用程序的机制。这个插图展示了JavaScript可能的一些事情：
- en: '![JavaScript everywhere](Image00002.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript无处不在](Image00002.jpg)'
- en: 'JavaScript is becoming one of the most important languages in the world. Although
    language usage statistics are notoriously difficult to calculate, every single
    source which attempts to develop a ranking puts JavaScript in the top 10:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript正在成为世界上最重要的语言之一。尽管语言使用统计数据 notoriously difficult to calculate，但每一个试图开发排名的来源都将JavaScript列在前十名中：
- en: '| Language index | Rank of JavaScript |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 语言指数 | JavaScript的排名 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Langpop.com | 4 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| Langpop.com | 4 |'
- en: '| Statisticbrain.com | 4 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Statisticbrain.com | 4 |'
- en: '| Codeval.com | 6 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Codeval.com | 6 |'
- en: '| TIOBE | 8 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| TIOBE | 8 |'
- en: What is more interesting is that most of of these rankings suggest that the
    usage of JavaScript is on the rise.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的是，大多数这些排名表明JavaScript的使用正在上升。
- en: 'The long and short of it is that JavaScript is going to be a major language
    in the next few years. More and more applications are being written in JavaScript
    and it is the lingua franca for any sort of web development. Developer of the
    popular Stack Overflow website Jeff Atwood created Atwood''s Law regarding the
    wide adoption of JavaScript:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，JavaScript将在未来几年成为一种重要的语言。越来越多的应用程序是用JavaScript编写的，它是任何类型的Web开发的通用语言。流行的Stack
    Overflow网站的开发者Jeff Atwood创建了Atwood's Law，关于JavaScript的广泛应用：
- en: '*"Any application that can be written in JavaScript, will eventually be written
    in JavaScript" – Atwood''s Law, Jeff Atwood*'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"任何可以用JavaScript编写的应用程序，最终都会用JavaScript编写" - Atwood''s Law, Jeff Atwood*'
- en: This insight has been proven to be correct time and time again. There are now
    compilers, spreadsheets, word processors—you name it—all written in JavaScript.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这一观点一次又一次地被证明是正确的。现在有编译器、电子表格、文字处理器——你说的都有——都是用JavaScript编写的。
- en: 'As the applications which make use of JavaScript increase in complexity, the
    developer may stumble upon many of the same issues as have been encountered in
    traditional programming languages: how can we write this application to be adaptable
    to change?'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随着使用JavaScript的应用程序变得越来越复杂，开发人员可能会遇到许多与传统编程语言中相同的问题：我们如何编写这个应用程序以适应变化？
- en: This brings us to the need for properly designing applications. No longer can
    we simply throw a bunch of JavaScript into a file and hope that it works properly.
    Nor can we rely on libraries such as jQuery to save ourselves. Libraries can only
    provide additional functionality and contribute nothing to the structure of an
    application. At least some attention must now be paid to how to construct the
    application to be extensible and adaptable. The real world is ever-changing and
    any application that is unable to change to suit the changing world is likely
    to be left in the dust. Design patterns provide some guidance in building adaptable
    applications, which can shift with changing business needs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了对应用程序进行适当设计的需求。我们不能再简单地把一堆JavaScript放入一个文件中，然后希望它能正常工作。我们也不能依赖于jQuery等库来拯救自己。库只能提供额外的功能，对应用程序的结构没有任何贡献。现在必须要注意如何构建应用程序以使其具有可扩展性和适应性。现实世界是不断变化的，任何不能适应变化世界的应用程序都可能被抛在脑后。设计模式在构建适应性强的应用程序方面提供了一些指导，这些应用程序可以随着业务需求的变化而变化。
- en: What is a design pattern?
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是设计模式？
- en: For the most part, ideas are only applicable in one place. Adding peanut butter
    is really only a great idea in cooking and not in sewing. However, from time to
    time it is possible to find applicability for a great idea outside of its original
    purpose. This is the story behind design patterns.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，想法只适用于一个地方。例如，在烹饪中添加花生酱确实只是一个好主意，而在缝纫中不是。然而，偶尔也可能会发现一个好主意在原始用途之外也有适用性。这就是设计模式背后的故事。
- en: 'In 1977, Christopher Alexander, Sara Ishikawa, and Murray Silverstein authored
    a seminal book on what they called design patterns in urban planning, called *A
    Pattern Language: Towns, Buildings, Construction* .'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 1977年，克里斯托弗·亚历山大、Sara Ishikawa和Murray Silverstein撰写了一本关于城市规划中所谓的设计模式的重要书籍，名为《模式语言：城镇、建筑、建筑》。
- en: 'The book described a language for talking about the commonalities of design.
    In the book, a pattern is described thusly:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书描述了一种用于讨论设计共性的语言。在书中，模式被描述如下：
- en: '*"The elements of this language are entities called patterns. Each pattern
    describes a problem that occurs over and over again in our environment, and then
    describes the core of the solution to that problem, in such a way that you can
    use this solution a million times over, without ever doing it the same way twice."
    — Christopher Alexander*'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “这种语言的元素被称为模式实体。每个模式描述了我们环境中反复出现的问题，然后以这样一种方式描述了解决这个问题的核心，以便您可以使用这个解决方案一百万次，而不必两次以相同的方式做。”
    ——克里斯托弗·亚历山大
- en: 'These design patterns were such things as how to layout cities to provide a
    mixture of city and country living, or how to build roads in loops as a traffic-calming
    measure in residential areas, as is shown in the following picture taken from
    the book:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设计模式是如何布局城市以提供城市和乡村生活的混合，或者如何在住宅区中建造环路道路作为交通缓和措施的，如下图所示。
- en: '![What is a design pattern?](Image00003.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![什么是设计模式？](Image00003.jpg)'
- en: Even for those without a strong interest in urban planning, the book presents
    some fascinating ideas about how to structure our world to promote healthy societies.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对于那些对城市规划不感兴趣的人来说，这本书也提出了一些关于如何构建我们的世界以促进健康社会的迷人想法。
- en: 'Using the work of Christopher Alexander and the other authors as a source of
    inspiration, Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides wrote
    a book called *Design Patterns: Elements of Reusable Object-Oriented Software*
    . When a book is very influential in a computer science curriculum, it is often
    given a pet name. For instance, most computer science graduates will know of which
    book you mean if you talk about *The Dragon Book* ( *Principles of Compiler Design*
    , 1986). In enterprise software, *The Blue Book* is well known to be Eric Evan''s
    book on domain-driven design. The design patterns book has been so important that
    it is commonly referred do as the GoF book, or *Gang of Four* book, for its four
    authors.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides利用克里斯托弗·亚历山大和其他作者的作品作为灵感来源，写了一本名为《设计模式：可重用面向对象软件的元素》的书。当一本书在计算机科学课程中非常有影响力时，通常会被赋予一个昵称。例如，大多数计算机科学毕业生会知道，如果你谈论《龙书》（《编译原理》,
    1986），你指的是哪本书。在企业软件中，《蓝皮书》是众所周知的埃里克·埃文斯关于领域驱动设计的书。设计模式书是如此重要，以至于通常被称为GoF书，或者四人帮书，因为它有四位作者。
- en: 'This book outlined 23 patterns for use in object-oriented design. It is divided
    the patterns into three major groups:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书概述了23种用于面向对象设计的模式。它将这些模式分为三大类：
- en: '**Creational** : These patterns outlined a number of ways in which objects
    could be created and their lifecycles managed'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：这些模式概述了对象可以被创建和它们的生命周期如何被管理的多种方式'
- en: '**Behavioral** : These patterns describe how objects interact with each other'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为**：这些模式描述了对象如何相互交互'
- en: '**Structural** : These patterns describe a variety of different ways to add
    functionality to existing objects'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构**：这些模式描述了向现有对象添加功能的各种不同方式'
- en: The purpose of design patterns is not to instruct you on how to build software,
    but rather to give guidance on ways in which to solve common problems. For instance,
    many applications have a need to provide some sort of an undo function. The problem
    is common to text editors, drawing programs, and even e-mail clients. Solving
    this problem has been done many times before so it would be great to have a common
    solution. The command pattern provides just such a common solution. It suggests
    keeping track of all the actions performed in an application as instances of a
    command. This command will have forward and reverse actions. Every time a command
    is processed it is placed onto a queue. When it comes time to undo a command it
    is as simple as popping the top command off of the command queue and executing
    the undo action on it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式的目的不是指导你如何构建软件，而是提供解决常见问题的方法。例如，许多应用程序需要提供某种撤销功能。这个问题在文本编辑器、绘图程序甚至电子邮件客户端中都很常见。解决这个问题已经做过很多次了，因此有一个通用的解决方案会很好。命令模式提供了这样一个通用解决方案。它建议跟踪应用程序中执行的所有操作，作为命令的实例。这个命令将有前进和后退操作。每次处理一个命令时，它都会被放入队列中。当需要撤销一个命令时，只需简单地从命令队列中弹出顶部的命令并执行其撤销操作。
- en: Design patterns provide some hints about how to solve common problems like the
    undo problem. They have been distilled from performing hundreds of iterations
    of solving the same problem. The design pattern may not be exactly the correct
    solution for the problem you have, but it should, at the very least, provide some
    guidance to implement a solution more easily.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式提供了一些关于如何解决常见问题的提示，比如撤销问题。它们是从解决同一个问题的数百次迭代中提炼出来的。设计模式可能并不完全是你所面临问题的正确解决方案，但至少应该提供一些指导，以更轻松地实现解决方案。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A consultant friend of mine once told me a story about starting an assignment
    at a new company. The manager told them that he didn't think there would be a
    lot of work to do with the team because they had bought the GoF design pattern
    book for the developers early on and they'd implemented every last design pattern.
    My friend was delighted about hearing this because he charges by the hour. The
    misapplication of design patterns paid for much of his first-born's college education.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一位顾问朋友曾经告诉我一个关于在新公司开始任务的故事。经理告诉他们，他认为团队没有太多工作要做，因为他们早早地为开发人员购买了《设计模式》一书，并且他们实现了每一个设计模式。我的朋友听到这个消息很高兴，因为他按小时收费。错误应用设计模式支付了他的长子大学教育的大部分费用。
- en: Since the GoF book, there has been a great proliferation of literature dealing
    with enumerating and describing design patterns. There are books on design patterns
    which are specific to a certain domains and books which deal with patterns for
    large enterprise systems. The Wikipedia category for software design patterns
    contains 130 entries for different design patterns. I would, however, argue that
    many of the entries are not true design patterns but rather programming paradigms.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 自《设计模式》一书出版以来，有大量文献涉及列举和描述设计模式。有关特定领域的设计模式的书籍，也有涉及大型企业系统模式的书籍。维基百科的软件设计模式类别包含了130种不同的设计模式。然而，我认为许多条目并不是真正的设计模式，而是编程范式。
- en: For the most part, design patterns are simple constructs that don't need complicated
    support from libraries. While there do exist pattern libraries for most languages,
    you need not go out and spend a lot of money to purchase the libraries. Implement
    the patterns as you find the need. Having an expensive library burning a hole
    in your pocket encourages blindly applying patterns just to justify having spent
    the money. Even if you did have the money, I'm not aware of any libraries for
    JavaScript whose sole purpose is to provide support for patterns. Of course, GitHub
    is a wealth of interesting JavaScript projects, so there may well be a library
    on there of which I'm unaware.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，设计模式是简单的构造，不需要复杂的库支持。虽然大多数语言都有模式库，但你不需要花大量金钱购买这些库。根据需要实现模式。拥有一本昂贵的库会让你盲目地应用模式，只是为了证明花了钱。即使你有钱，我也不知道有任何用于提供模式支持的JavaScript库。当然，GitHub上有大量有趣的JavaScript项目，所以可能有一些我不知道的库。
- en: There are some who suggest that design patterns should be emergent. That is
    to say, that by simply writing software in an intelligent way, one can see the
    patterns emerge from the implementation. I think that may be an accurate statement,
    however, it ignores the actual cost of getting to those implementations by trial
    and error. Those with an awareness of design patterns are much more likely to
    spot the emergent pattern early on. Teaching junior programmers about patterns
    is a very useful exercise. Knowing early on which pattern or patterns can be applied
    acts as a shortcut. The full solution can be arrived at earlier and with fewer
    missteps.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有人建议设计模式应该是自发的。也就是说，通过以智能的方式编写软件，可以看到模式从实现中出现。我认为这可能是一个准确的说法，但它忽略了通过试错来实现这些实现的实际成本。了解设计模式的人更有可能早期发现自发的模式。教导初级程序员有关模式是一个非常有用的练习。早期了解可以应用哪种模式或模式作为一种捷径。完整的解决方案可以更早地到达，并且减少错误。
- en: Anti-patterns
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反模式
- en: If there are common patterns to be found in good software design, are there
    also patterns that can be found in bad software design? Absolutely! There are
    any number of ways to do things incorrectly, but most of them have been done before.
    It takes real creativity to screw up in a hitherto unknown way.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在良好的软件设计中可以找到常见模式，那么在糟糕的软件设计中也可以找到模式吗？当然可以！有许多方法可以做错事情，但大多数都已经做过。要以前所未有的方式搞砸，需要真正的创造力。
- en: The shame of it is that it is very difficult to remember all the ways in which
    people have gone wrong over the years. At the end of many major projects, the
    team will sit down and put together a document called *Lessons Learned* . This
    document contains a list of things that could have gone better on the project
    and may even outline some suggestions as to how these issues can be avoided in
    the future. That these documents are only constructed at the end of a project
    is unfortunate. By that time, many of the key players have moved on and those
    who are left must try to remember lessons from the early stages of the project,
    which could be years ago. It is far better to construct the document as the project
    progresses.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜的是，很难记住多年来人们犯过的所有错误。在许多重大项目结束时，团队会坐下来撰写一份名为“经验教训”的文件。这份文件包含了项目中可能出现的问题，甚至可能概述了如何避免这些问题的建议。不幸的是，这些文件只在项目结束时才被制作。到那时，许多关键人员已经离开，剩下的人必须试图记住项目早期的经验教训，这可能是几年前的事了。最好在项目进行过程中制作这份文件。
- en: Once complete, the document is filed away ready for the next project to make
    use of. At least, that is the theory. For the most part, the document is filed
    away and never used again. It is difficult to create lessons that are globally
    applicable. The lessons learned tend to only be useful for the current project
    or an exactly identical project, which almost never happens.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，文件就会被归档，准备供下一个项目使用。至少，这是理论。大部分情况下，文件被归档后就再也没有被使用过。很难创造出全球适用的经验教训。所学到的经验教训往往只对当前项目或完全相同的项目有用，而这几乎不会发生。
- en: 'However, by looking at a number of these documents from various projects, patterns
    start to emerge. It was by following such an approach that William Brown, Raphael
    Malveau, Skip McCormick, and Tom Mowbray, collectively known as the Upstart Gang
    of Four in reference to the original Gang of Four, wrote the initial book on anti-patterns.
    The book, *AntiPatterns: Refactoring Software, Architectures, and Projects in
    Crisis* , outlined anti-patterns not just for issues in code, but also in the
    management process which surrounds code.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过查看来自各种项目的多份文件，模式开始显现。正是通过这种方法，威廉·布朗、拉斐尔·马尔沃、斯基普·麦考密克和汤姆·莫布雷，合称为“新生四杰”，参照了最初的四杰，撰写了关于反模式的最初著作。这本书《反模式：重构软件、架构和危机项目》不仅概述了代码问题，还概述了围绕代码的管理过程中的反模式。
- en: Patterns outlined include such humorously named patterns as *The Blob and Lava
    Flow* . The Blob, also known as the God object, is the pattern where one object
    grows to take on the responsibility for vast swathes of the application logic.
    Lava Flow is a pattern that emerges as a project ages and nobody knows if code
    is still used. Developers are nervous about deleting the code because it might
    be used somewhere or may become useful again. There are many other patterns described
    in the book that are worth exploring. Just as with patterns, anti-patterns are
    emergent from writing code, but in this case, code which gets out of hand.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 概述的模式包括一些幽默命名的模式，如“Blob和Lava Flow”。Blob，也被称为上帝对象，是指一个对象不断增长，承担了应用程序逻辑的大部分责任。Lava
    Flow是一种随着项目变老而出现的模式，没有人知道代码是否仍在使用。开发人员不敢删除代码，因为它可能在某处被使用，或者将来可能会再次有用。书中还描述了许多其他值得探索的模式。与模式一样，反模式也是从编写代码中出现的，但在这种情况下，是失控的代码。
- en: This book will not cover JavaScript anti-patterns, but it is useful to remember
    that one of the anti-patterns is an over-application of design patterns.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涵盖JavaScript反模式，但值得记住的是，过度应用设计模式是一种反模式之一。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Design patterns have a rich and interesting history. From their origin as tools
    for helping to describe how to build the structures to allow people to live together,
    they have grown to be applicable to a number of domains.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式有着丰富而有趣的历史。从最初作为帮助描述如何构建结构以让人们共同生活的工具，它们已经发展成适用于许多领域。
- en: It has now been a decade since the seminal work on applying design patterns
    to programming. Since then, a vast number of new patterns have been developed.
    Some of these patterns are general-purpose patterns such as those outlined in
    the GoF book, but a larger number are very specific patterns which are designed
    for use in a narrow domain.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 自从将设计模式应用于编程的开创性工作以来已经过去了十年。此后，已经开发出了大量新的模式。其中一些模式是通用模式，如《设计模式》一书中概述的那些，但更多的是非常具体的模式，专为在狭窄领域中使用而设计。
- en: JavaScript also has an interesting history and is really coming of age. With
    server-side JavaScript taking off and large JavaScript applications becoming common,
    there is a need for more diligence in building JavaScript applications. It is
    rare to see patterns being properly exploited in most modern JavaScript code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript也有着有趣的历史，正在迎来成熟。随着服务器端JavaScript的兴起和大型JavaScript应用程序变得普遍，构建JavaScript应用程序需要更多的细心。在大多数现代JavaScript代码中很少看到模式被正确地应用。
- en: 'Leaning on the teachings provided by design patterns to build modern JavaScript
    patterns gives one the best of both worlds. As Isaac Newton famously wrote:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 依靠设计模式提供的教导来构建现代JavaScript模式，可以让我们兼得两全。正如艾萨克·牛顿所说：
- en: '*"If I have seen further it is by standing on ye shoulders of Giants."*'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “如果我看得更远一些，那是因为我站在巨人的肩膀上。”
- en: Patterns give us easily-accessible shoulders on which to stand.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '模式为我们提供了易于访问的支持。 '
- en: In the next chapter we will look at some techniques for building structure into
    JavaScript. The inheritance system in JavaScript is unlike that of most other
    object-oriented languages and that provides us both opportunities and limits.
    We'll see how to build classes and modules in the JavaScript world.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨一些在JavaScript中构建结构的技术。JavaScript的继承系统与大多数其他面向对象的语言不同，这为我们提供了机会和限制。我们将看到如何在JavaScript世界中构建类和模块。
