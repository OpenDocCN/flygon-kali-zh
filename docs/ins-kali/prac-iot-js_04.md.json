["```js\n.\n\n\u251c\u2500\u2500 api-engine\n\n\u2502 \u251c\u2500\u2500 package.json\n\n\u2502 \u2514\u2500\u2500 server\n\n\u251c\u2500\u2500 broker\n\n\u2502 \u251c\u2500\u2500 certs\n\n\u2502 \u2514\u2500\u2500 index.js\n\n\u251c\u2500\u2500 desktop-app\n\n\u2502 \u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 freeport.js\n\n\u2502 \u251c\u2500\u2500 index.css\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 index.js\n\n\u2502 \u251c\u2500\u2500 license\n\n\u2502 \u251c\u2500\u2500 package.json\n\n\u2502 \u251c\u2500\u2500 readme.md\n\n\u2502 \u2514\u2500\u2500 server.js\n\n\u251c\u2500\u2500 mobile-app\n\n\u2502 \u251c\u2500\u2500 config.xml\n\n\u2502 \u251c\u2500\u2500 hooks\n\n\u2502 \u251c\u2500\u2500 ionic.config.json\n\n\u2502 \u251c\u2500\u2500 package.json\n\n\u2502 \u251c\u2500\u2500 platforms\n\n\u2502 \u251c\u2500\u2500 plugins\n\n\u2502 \u251c\u2500\u2500 resources\n\n\u2502 \u251c\u2500\u2500 src\n\n\u2502 \u251c\u2500\u2500 tsconfig.json\n\n\u2502 \u251c\u2500\u2500 tslint.json\n\n\u2502 \u2514\u2500\u2500 www\n\n\u2514\u2500\u2500 web-app\n\n\u251c\u2500\u2500 README.md\n\n\u251c\u2500\u2500 e2e\n\n\u251c\u2500\u2500 karma.conf.js\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 protractor.conf.js\n\n\u251c\u2500\u2500 src\n\n\u251c\u2500\u2500 tsconfig.json\n\n\u2514\u2500\u2500 tslint.json\n```", "```js\nvar config = require('./config.js');\n\nvar mqtt = require('mqtt');\n\nvar GetMac = require('getmac');\n\nvar async = require('async');\n\nvar rpiDhtSensor = require('rpi-dht-sensor');\n\nvar McpAdc = require('mcp-adc');\n\nvar adc = new McpAdc.Mcp3208();\n\nvar dht11 = new rpiDhtSensor.DHT11(2);\n\nvar temp = 0,\n\nprevTemp = 0;\n\nvar humd = 0,\n\nprevHumd = 0;\n\nvar macAddress;\n\nvar state = 0;\n\nvar moistureVal = 0,\n\nprevMoistureVal = 0;\n\nvar rainVal = 0,\n\nprevRainVal = 0;\n\nvar client = mqtt.connect({\n\nport: config.mqtt.port,\n\nprotocol: 'mqtts',\n\nhost: config.mqtt.host,\n\nclientId: config.mqtt.clientId,\n\nreconnectPeriod: 1000,\n\nusername: config.mqtt.clientId,\n\npassword: config.mqtt.clientId,\n\nkeepalive: 300,\n\nrejectUnauthorized: false\n\n});\n\nclient.on('connect', function() {\n\nclient.subscribe('rpi');\n\nGetMac.getMac(function(err, mac) {\n\nif (err) throw err;\n\nmacAddress = mac;\n\nclient.publish('api-engine', mac);\n\n});\n\n});\n\nclient.on('message', function(topic, message) {\n\nmessage = message.toString();\n\nif (topic === 'rpi') {\n\nconsole.log('API Engine Response >> ', message);\n\n} else {\n\nconsole.log('Unknown topic', topic);\n\n}\n\n});\n\n// infinite loop, with 3 seconds delay\n\nsetInterval(function() {\n\nreadSensorValues(function(results) {\n\nconsole.log('Temperature: ' + temp + 'C, ' + 'humidity: ' + humd + '%, ' + ' Rain level (%):' + rainVal + ', ' + 'moistureVal (%): ' + moistureVal);\n\n// if the temperature and humidity values change\n\n// then only publish the values\n\nif (temp !== prevTemp || humd !== prevHumd || moistureVal !== prevMoistureVal || rainVal != prevRainVal) {\n\nvar data2Send = {\n\ndata: {\n\nt: temp,\n\nh: humd,\n\nr: rainVal,\n\nm: moistureVal\n\n},\n\nmacAddress: macAddress\n\n};\n\n// console.log('Data Published');\n\nclient.publish('weather-status', JSON.stringify(data2Send));\n\n// reset prev values to current\n\n// for next loop\n\nprevTemp = temp;\n\nprevHumd = humd;\n\nprevMoistureVal = moistureVal;\n\nprevRainVal = rainVal;\n\n}\n\n});\n\n}, 3000); // every three second\n\n// `CB` expects {\n\n// dht11Values: val,\n\n// rainLevel: val,\n\n// moistureLevel: val\n\n// }\n\nfunction readSensorValues(CB) {\n\nasync.parallel({\n\ndht11Values: function(callback) {\n\nvar readout = dht11.read();\n\n// update global variable\n\ntemp = readout.temperature.toFixed(2);\n\nhumd = readout.humidity.toFixed(2);\n\ncallback(null, { temp: temp, humidity: humd });\n\n},\n\nrainLevel: function(callback) {\n\n// we are going to connect rain sensor\n\n// on channel 0, hence 0 is the first arg below\n\nadc.readRawValue(0, function(value) {\n\n// update global variable\n\nrainVal = value;\n\nrainVal = (100 - parseFloat((rainVal / 4096) * 100)).toFixed(2);\n\ncallback(null, { rain: rainVal });\n\n});\n\n},\n\nmoistureLevel: function(callback) {\n\n// we are going to connect moisture sensor\n\n// on channel 1, hence 1 is the first arg below\n\nadc.readRawValue(1, function(value) {\n\n// update global variable\n\nmoistureVal = value;\n\nmoistureVal = (100 - parseFloat((moistureVal / 4096) * 100)).toFixed(2);\n\ncallback(null, { moisture: moistureVal });\n\n});\n\n}\n\n}, function done(err, results) {\n\nif (err) {\n\nthrow err;\n\n}\n\n// console.log(results);\n\nif (CB) CB(results);\n\n});\n\n}\n```", "```js\nmosca -c index.js -v | pino\n```", "```js\nsudo node index.js\n```", "```js\nvar Data = require('../api/data/data.model'); \nvar mqtt = require('mqtt'); \nvar config = require('../config/environment'); \n\nvar client = mqtt.connect({ \nport: config.mqtt.port, \nprotocol: 'mqtts', \nhost: config.mqtt.host, \nclientId: config.mqtt.clientId, \nreconnectPeriod: 1000, \nusername: config.mqtt.clientId, \npassword: config.mqtt.clientId, \nkeepalive: 300, \nrejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \nconsole.log('Connected to Mosca at ' + config.mqtt.host + ' on port ' + config.mqtt.port); \nclient.subscribe('api-engine'); \nclient.subscribe('weather-status'); \n}); \n\nclient.on('message', function(topic, message) { \n    // message is Buffer \n    // console.log('Topic >> ', topic); \n    // console.log('Message >> ', message.toString()); \nif (topic === 'api-engine') { \nvarmacAddress = message.toString(); \nconsole.log('Mac Address >> ', macAddress); \nclient.publish('rpi', 'Got Mac Address: ' + macAddress); \n    } else if (topic === 'weather-status') { \nvar data = JSON.parse(message.toString()); \n        // create a new data record for the device \nData.create(data, function(err, data) { \nif (err) return console.error(err); \n            // if the record has been saved successfully,  \n            // websockets will trigger a message to the web-app \nconsole.log('Data Saved :', data.data); \n        }); \n    } else { \nconsole.log('Unknown topic', topic); \n    } \n}); \n```", "```js\nnpm start  \n```", "```js\n<div class=\"container\">\n    <br>\n    <div *ngIf=\"!device\">\n        <h3 class=\"text-center\">Loading!</h3>\n    </div>\n    <div class=\"row\" *ngIf=\"lastRecord\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-info\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">\n                        {{device.name}}\n                    </h3>\n                    <span class=\"pull-right btn-click\">\n                        <i class=\"fa fa-chevron-circle-up\"></i>\n                    </span>\n                </div>\n                <div class=\"clearfix\"></div>\n                <div class=\"table-responsive\">\n                    <table class=\"table table-striped\">\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Temperature</td>\n                            <td>{{lastRecord.data.t}}</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Humidity</td>\n                            <td>{{lastRecord.data.h}} %</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Rain Level</td>\n                            <td>{{lastRecord.data.r}} %</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Mositure Level</td>\n                            <td>{{lastRecord.data.m}} %</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Received At</td>\n                            <td>{{lastRecord.createdAt | date: 'medium'}}</td>\n                        </tr>\n                    </table>\n                    <div class=\"col-md-6\" *ngIf=\"tempHumdData.length > 0\">\n                        <canvas baseChart [datasets]=\"tempHumdData\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\"></canvas>\n                    </div>\n\n                    <div class=\"col-md-6\" *ngIf=\"rainMoisData.length > 0\">\n                        <canvas baseChart [datasets]=\"rainMoisData\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\"></canvas>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n```", "```js\nimport { Component, OnInit, OnDestroy } from '@angular/core'; \nimport { DevicesService } from '../services/devices.service'; \nimport { Params, ActivatedRoute } from '@angular/router'; \nimport { SocketService } from '../services/socket.service'; \nimport { DataService } from '../services/data.service'; \nimport { NotificationsService } from 'angular2-notifications'; \n\n@Component({ \n   selector: 'app-device', \n   templateUrl: './device.component.html', \n   styleUrls: ['./device.component.css'] \n}) \nexport class DeviceComponent implements OnInit, OnDestroy { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   privatesubDevice: any; \n   privatesubData: any; \n   lastRecord: any; \n\n   // line chart config \n   publiclineChartOptions: any = { \n         responsive: true, \n         legend: { \n               position: 'bottom', \n         }, hover: { \n               mode: 'label' \n         }, scales: { \n               xAxes: [{ \n                     display: true, \n                     scaleLabel: { \n                           display: true, \n                           labelString: 'Time' \n                     } \n               }], \n               yAxes: [{ \n                     display: true, \n                     ticks: { \n                           beginAtZero: true, \n                           // steps: 10, \n                           // stepValue: 5, \n                           // max: 70 \n                     } \n               }] \n         }, \n         title: { \n               display: true, \n               text: 'Sensor Data vs. Time' \n         } \n   }; \n   publiclineChartLegend: boolean = true; \n   publiclineChartType: string = 'line'; \n   publictempHumdData: Array<any> = []; \n   publicrainMoisData: Array<any> = []; \n   publiclineChartLabels: Array<any> = []; \n\n   constructor(private deviceService: DevicesService, \n         privatesocketService: SocketService, \n         privatedataService: DataService, \n         private route: ActivatedRoute, \n         privatenotificationsService: NotificationsService) { } \n\n   ngOnInit() { \n         this.subDevice = this.route.params.subscribe((params) => { \n               this.deviceService.getOne(params['id']).subscribe((response) => { \n                     this.device = response.json(); \n                     this.getData(); \n                     this.socketInit(); \n               }); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               this.lastRecord = this.data[0]; // descending order data \n               this.genChart(); \n         }); \n   } \n\n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data) => { \n               if (this.data.length<= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n               this.genChart(); \n         }); \n   } \n\n   ngOnDestroy() { \n         this.subDevice.unsubscribe(); \n         this.subData ? this.subData.unsubscribe() : ''; \n   } \n\n   genChart() { \n         let data = this.data; \n         let _thArr: Array<any> = []; \n         let _rmArr: Array<any> = []; \n         let _lblArr: Array<any> = []; \n\n         lettmpArr: Array<any> = []; \n         lethumArr: Array<any> = []; \n         letraiArr: Array<any> = []; \n         letmoiArr: Array<any> = []; \n\n         for (vari = 0; i<data.length; i++) { \n               let _d = data[i]; \n               tmpArr.push(_d.data.t); \n               humArr.push(_d.data.h); \n               raiArr.push(_d.data.r); \n               moiArr.push(_d.data.m); \n               _lblArr.push(this.formatDate(_d.createdAt)); \n         } \n\n         // reverse data to show the latest on the right side \n         tmpArr.reverse(); \n         humArr.reverse(); \n         raiArr.reverse(); \n         moiArr.reverse(); \n         _lblArr.reverse(); \n\n         _thArr = [ \n               { \n                     data: tmpArr, \n                     label: 'Temperature' \n               }, \n               { \n                     data: humArr, \n                     label: 'Humidity %' \n               } \n         ] \n\n         _rmArr = [ \n               { \n                     data: raiArr, \n                     label: 'Rain Levels' \n               }, \n               { \n                     data: moiArr, \n                     label: 'Moisture Levels' \n               } \n         ] \n\n         this.tempHumdData = _thArr; \n         this.rainMoisData = _rmArr; \n\n         this.lineChartLabels = _lblArr; \n   } \n\n   privateformatDate(originalTime) { \n         var d = new Date(originalTime); \n         vardatestring = d.getDate() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getFullYear() + \" \" + \n               d.getHours() + \":\" + d.getMinutes(); \n         returndatestring; \n   } \n\n} \n```", "```js\nng server\n```", "```js\nng build --env=prod\n```", "```js\n.\n\n\u251c\u2500\u2500 favicon.ico\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 inline.bundle.js\n\n\u251c\u2500\u2500 inline.bundle.js.map\n\n\u251c\u2500\u2500 main.bundle.js\n\n\u251c\u2500\u2500 main.bundle.js.map\n\n\u251c\u2500\u2500 polyfills.bundle.js\n\n\u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u251c\u2500\u2500 scripts.bundle.js\n\n\u251c\u2500\u2500 scripts.bundle.js.map\n\n\u251c\u2500\u2500 styles.bundle.js\n\n\u251c\u2500\u2500 styles.bundle.js.map\n\n\u251c\u2500\u2500 vendor.bundle.js\n\n\u2514\u2500\u2500 vendor.bundle.js.map\n```", "```js\n.\n\n\u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 favicon.ico\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 main.bundle.js\n\n\u2502 \u251c\u2500\u2500 main.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 vendor.bundle.js\n\n\u2502 \u2514\u2500\u2500 vendor.bundle.js.map\n\n\u251c\u2500\u2500 freeport.js\n\n\u251c\u2500\u2500 index.css\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 index.js\n\n\u251c\u2500\u2500 license\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 readme.md\n\n\u2514\u2500\u2500 server.js\n```", "```js\nnpm start\n```", "```js\n<ion-header>\n    <ion-navbar>\n        <ion-title>Mobile App</ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content padding>\n    <div *ngIf=\"!lastRecord\">\n        <h3 class=\"text-center\">Loading!</h3>\n    </div>\n    <div *ngIf=\"lastRecord\">\n        <ion-list>\n            <ion-item>\n                <ion-label>Name</ion-label>\n                <ion-label>{{device.name}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Temperature</ion-label>\n                <ion-label>{{lastRecord.data.t}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Humidity</ion-label>\n                <ion-label>{{lastRecord.data.h}} %</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Rain Level</ion-label>\n                <ion-label>{{lastRecord.data.r}} %</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Moisture Level</ion-label>\n                <ion-label>{{lastRecord.data.m}} %</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Received At</ion-label>\n                <ion-label>{{lastRecord.createdAt | date: 'medium'}}</ion-label>\n            </ion-item>\n        </ion-list>\n    </div>\n</ion-content>\n```", "```js\nimport { Component } from '@angular/core'; \nimport { IonicPage, NavController, NavParams } from 'ionic-angular'; \n\nimport { DevicesService } from '../../services/device.service'; \nimport { DataService } from '../../services/data.service'; \nimport { ToastService } from '../../services/toast.service'; \nimport { SocketService } from '../../services/socket.service'; \n\n@IonicPage() \n@Component({ \n   selector: 'page-view-device', \n   templateUrl: 'view-device.html', \n}) \nexport class ViewDevicePage { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   privatesubData: any; \n   lastRecord: any; \n\n   constructor(private navCtrl: NavController, \n         privatenavParams: NavParams, \n         privatesocketService: SocketService, \n         privatedeviceService: DevicesService, \n         privatedataService: DataService, \n         privatetoastService: ToastService) { \n         this.device = navParams.get(\"device\"); \n         console.log(this.device); \n   } \n\n   ionViewDidLoad() { \n         this.deviceService.getOne(this.device._id).subscribe((response) => { \n               this.device = response.json(); \n               this.getData(); \n               this.socketInit(); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               this.lastRecord = this.data[0]; // descending order data \n         }); \n   } \n\n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data) => { \n               if(this.data.length<= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n         }); \n   } \n\n   ionViewDidUnload() { \n         this.subData&&this.subData.unsubscribe&&this.subData.unsubscribe(); //unsubscribe if subData is defined \n   } \n} \n```", "```js\nionic serve\n```", "```js\nionic run android \n```", "```js\n ionic run ios\n```"]