- en: Chapter 9. Kotlin Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。Kotlin函数
- en: Functions are the building blocks of our apps. We write functions that do specific
    tasks, and then call them when we need to execute that specific task. As the tasks
    we need to perform in our apps will be quite varied, our functions need to cater
    to this and be very flexible. Kotlin functions are very flexible, more so than
    the other Android-related languages. We therefore need to spend a whole chapter
    learning about them. Functions are intimately related to object-oriented programming,
    and once we understand the basics of functions, we will be in a good position
    to take on the wider learning of object-oriented programming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是我们应用程序的构建模块。我们编写执行特定任务的函数，然后在需要执行该特定任务时调用它们。由于我们应用程序中需要执行的任务将会非常多样化，我们的函数需要适应这一点并且非常灵活。Kotlin函数非常灵活，比其他与Android相关的语言更灵活。因此，我们需要花费一个完整的章节来学习它们。函数与面向对象编程密切相关，一旦我们理解了函数的基础知识，我们就能够很好地掌握更广泛的面向对象编程学习。
- en: 'This is what we have in store for this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章的内容：
- en: Function basics and recap
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数基础和回顾
- en: Function return types and the return keyword
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数返回类型和return关键字
- en: Single-expression functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单表达式函数
- en: Default arguments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认参数
- en: More function-related topics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多与函数相关的主题
- en: We know a little bit about functions already, so a recap is in order.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经对函数有了一些了解，所以需要回顾一下。
- en: Function basics and recap
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数基础和回顾
- en: We have already seen and used functions. Some were provided for us by the Android
    API, such as `onCreate` and the other lifecycle functions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到并使用了函数。一些是由Android API为我们提供的，比如`onCreate`和其他生命周期函数。
- en: We wrote others ourselves; for example, `topClick` and `bottomClick`. However,
    we haven't explained them properly, and there is more to functions than we have
    seen so far.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自己编写了其他函数；例如，`topClick`和`bottomClick`。但是，我们还没有适当地解释它们，函数还有更多我们还没有看到的内容。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You will often hear another term that is closely related and almost synonymous
    with functions. This is especially the case if you have previously learned Java
    or another object-oriented language. The word I am referring to is **method**.
    The distinction between a method and a function is rarely important from a technical
    point of view, and the difference is, in part, where in our code the function/method
    is declared. If you want to be programmatically correct, you can read this article,
    which goes into some depth and provides multiple opinions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您经常会听到另一个与函数密切相关且几乎与函数同义的术语。如果您之前学过Java或其他面向对象的语言，情况就是如此。我指的是**方法**。从技术角度来看，方法和函数之间的区别很少重要，部分区别在于我们的代码中声明函数/方法的位置。如果您想在编程上正确，可以阅读这篇文章，其中深入探讨了这个问题，并提供了多种观点：
- en: '[https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function](https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function](https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function)'
- en: In this book, I will refer to all methods/functions as functions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将所有方法/函数都称为函数。
- en: The basic function declaration
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本函数声明
- en: 'Here is an example of a very simple function:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单函数的例子：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We could call the `printHello` function like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样调用`printHello`函数：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result would be this output in the logcat window:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将在logcat窗口中输出如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first line of the function is the **declaration**, and all the code contained
    within the opening and closing curly brackets is the function **body**. We use
    the `fun` keyword, followed by the name of the function, followed by an opening
    and closing bracket. The name is arbitrary, but it is good practice to use names
    that describe what the function does.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的第一行是**声明**，大括号内包含的所有代码是函数的**主体**。我们使用`fun`关键字，后面跟着函数的名称，然后是一个开括号和闭括号。名称是任意的，但最好使用描述函数功能的名称。
- en: Function parameter lists
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数参数列表
- en: 'The declaration can take many forms, and this gives us lots of flexibility
    and power. Let''s look at some more examples:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 声明可以采用多种形式，这给了我们很大的灵活性和权力。让我们看一些更多的例子：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding `printSum` function could be called as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`printSum`函数可以这样调用：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result of calling the `printSum` function is that the following message
    would be output to the logcat window:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`printSum`函数的结果是，以下消息将输出到logcat窗口：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that the `2` and `3` values that are passed to the function are arbitrary.
    We could pass any values we like, provided they are of the `Int` type.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，传递给函数的`2`和`3`值是任意的。我们可以传递任何我们喜欢的值，只要它们是`Int`类型的。
- en: 'This part of the declaration `(a: Int, b: Int)` is called the **parameter list**,
    or just **parameters**. It is a list of types that the function expects and needs
    in order to execute successfully. The parameter list can take many forms, and
    any Kotlin type can be part of the parameter list, including having no parameters
    at all (as we saw in the first example).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '声明的这部分`(a: Int, b: Int)`称为**参数列表**，或者只是**参数**。这是函数期望并需要的类型列表，以便成功执行。参数列表可以采用多种形式，任何Kotlin类型都可以成为参数列表的一部分，包括根本没有参数（正如我们在第一个例子中看到的）。'
- en: 'When we call a function with a parameter list, we must supply arguments that
    match whenever we call it. Here are a few other possible ways we could call the
    preceding `printSum` function example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用带有参数列表的函数时，我们必须在调用时提供匹配的参数。以下是我们可以调用前面的`printSum`函数示例的几种可能方式：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As shown in the previous examples, any combination of values that amount to
    two `Int` values are acceptable as arguments. We can even use expressions as arguments,
    provided they are equal to an `Int` value. This call is also fine, for example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的例子所示，任何组合的值，其总和为两个`Int`值，都可以作为参数。我们甚至可以使用表达式作为参数，只要它们等于一个`Int`值。例如，这个调用也是可以的：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the previous example, 50 is subtracted from 100, the result (50) is passed
    as the first argument, and `number1` is added to `number2` and the result is passed
    as the second argument.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，从100中减去50，将结果（50）作为第一个参数传递，然后将`number1`加到`number2`，并将结果作为第二个参数传递。
- en: 'Here is another couple of functions with various parameters, followed by examples
    of how we might call them:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另外两个带有各种参数的函数，以及我们可能调用它们的示例：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before we discuss the code, let''s have a look at the output we get from it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论代码之前，让我们看一下我们从中得到的输出：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, we declare two functions. The first is called `printName`,
    and it has two `String` parameters. The declaration, along with highlighted parameter
    names, is shown again next. The names are arbitrary, but using meaningful names
    will make the code easier to understand:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们声明了两个函数。第一个叫做`printName`，它有两个`String`参数。声明与突出显示的参数名称再次显示如下。名称是任意的，但使用有意义的名称将使代码更容易理解：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Attempting to call the function with anything other than two `String` values
    as arguments will result in an error. When we call this function, the `first`
    and `second` parameters are initialized as variables that we then use in a String
    template to print the joined-up name to the logcat window. The line of code that
    achieves this is shown again as follows, with the variables highlighted:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用除两个`String`值以外的任何内容调用该函数将导致错误。当我们调用这个函数时，`first`和`second`参数被初始化为变量，然后我们使用字符串模板将连接的名称打印到logcat窗口中。下面再次显示了实现这一点的代码行，其中突出显示了变量：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note the space in between `$first` and `$second` in the code. Note that this
    space is also present in the output we saw previously.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意代码中`$first`和`$second`之间的空格。请注意，这个空格也存在于我们之前看到的输出中。
- en: 'The second function is `printAreaCircle`. It has one `Float` parameter called
    `radius`. Here it is again for easy reference:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数是`printAreaCircle`。它有一个名为`radius`的`Float`参数。这里是它的声明，以便参考：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The function uses the `radius` variable, which is initialized when the function
    is called to calculate the area of a circle using the formula `3.14 * (radius
    * radius)`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用初始化为函数调用时的`radius`变量，使用公式`3.14 * (radius * radius)`来计算圆的面积。
- en: 'The code then proceeds to call the first function twice and the second function
    once. This is shown again in the following code snippet (with helpful comments
    removed for focus):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码继续调用第一个函数两次，第二个函数一次。以下是代码片段中再次显示的内容（为了便于理解，已删除了有用的注释）：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice that we can call functions with literal values or variables, provided
    they are of the correct type that matches the declared parameters.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以使用文字值或变量调用函数，只要它们是与声明的参数匹配的正确类型。
- en: To be clear, the function declarations are outside of any other functions, but
    are inside the class opening and closing curly brackets. The function calls are
    inside the `onCreate` function. As our apps get more complex, we will call functions
    from all over our code (even other code files). The `onCreate` function is just
    a handy place to use while discussing these topics.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要清楚地说明，函数声明位于任何其他函数之外，但位于类的开放和关闭大括号内。函数调用位于`onCreate`函数内。随着我们的应用程序变得更加复杂，我们将从代码的各个部分调用函数（甚至是其他代码文件）。`onCreate`函数只是一个方便的地方，用于讨论这些主题。
- en: Tip
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to examine the code structure more closely, the file that contains
    this code is in the `Chapter09/Functions Demo` folder. Create a new Empty Activity
    project and you can copy and paste the code to play around with it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更仔细地检查代码结构，包含此代码的文件位于`Chapter09/Functions Demo`文件夹中。创建一个新的Empty Activity项目，您可以复制并粘贴代码进行操作。
- en: Another point, which is perhaps obvious but is well worth mentioning, is that
    when we write functions for real apps, they can contain as much code as is practical;
    they won't just be a single line of code like these examples. Any code we learned
    about in the previous chapters can go into our functions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个观点，可能显而易见，但很值得一提的是，当我们为真实应用编写函数时，它们可以包含尽可能多的代码；它们不会像这些示例一样只是一行代码。我们在之前章节学到的任何代码都可以放入我们的函数中。
- en: Now, let's move on to another function-related topic that gives us even more
    options.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讨论另一个与函数相关的主题，它给我们更多的选择。
- en: The return type and the return keyword
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回类型和返回关键字
- en: 'Very often, we will need to get a result from a function. It is not always
    enough just to have the function know the result. Functions can be declared to
    have a **return type**. Look at this next function declaration:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要从函数中获得一个结果。仅仅让函数知道结果是不够的。函数可以声明具有**返回类型**。看看下一个函数声明：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code, look at the highlighted part after the closing bracket
    of the parameter list. The `:Int` code means the function can and must return
    a value of the `Int` type to the code that called it. The line of code inside
    the function body uses the `return` keyword to achieve this. The `return a + b`
    code returns the sum of `a` and `b`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，看一下参数列表的括号后面的突出部分。`：Int`代码表示函数可以并且必须向调用它的代码返回`Int`类型的值。函数体内的代码行使用`return`关键字来实现这一点。`return
    a + b`代码返回`a`和`b`的和。
- en: 'We can call the `getSum` function in the same way we do a function without
    a return type:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像调用没有返回类型的函数一样调用`getSum`函数：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding line of code will work, but is a little pointless because we
    don''t do anything with the returned value. This next code shows a more likely
    call to the `getSum` function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码行可以工作，但有点无意义，因为我们没有对返回的值做任何处理。下面的代码显示了更有可能的对`getSum`函数的调用：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding function, the value returned from the function is used to initialize
    the `answer` variable. As the return type is `Int`, Kotlin infers that `answer`
    is also of type `Int`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述函数中，从函数返回的值用于初始化`answer`变量。由于返回类型是`Int`，Kotlin推断`answer`也是`Int`类型。
- en: 'We could also use `getSum` in other ways – one such example is shown next:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以以其他方式使用`getSum`——下面显示了一个示例：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code uses the `getSum` function in another way, by printing the
    returned value using a String template to print to the logcat window.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码以另一种方式使用了`getSum`函数，通过使用字符串模板打印返回的值到logcat窗口。
- en: 'Any type can be returned from a function. Here are a few examples; first the
    declarations, followed by some of the ways we might call them:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型都可以从函数中返回。以下是一些例子；首先是声明，然后是一些我们可能调用它们的方式：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is the output that those two function calls would produce:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这两个函数调用将产生的输出：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can see that the area of a circle is retrieved and printed, and the first
    and last names joined together are retrieved and printed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到圆的面积被检索并打印出来，名字被连接在一起被检索并打印出来。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As a quick sanity check, it is worth pointing out that we don't actually need
    to write functions just to add numbers together or join Strings. It is just a
    useful way to demonstrate various aspects of functions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个快速的健全检查，值得指出的是，我们实际上不需要编写函数来将数字相加或连接字符串。这只是一种展示函数各个方面的有用方式。
- en: It is also worth noting that the `return` keyword has its uses even when the
    function doesn't have a return type.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，即使函数没有返回类型，`return`关键字也有其用途。
- en: 'For example, we can use the `return` keyword to return from a function early.
    All our previous function examples (without return types) automatically returned
    to the calling code when the last line of code in the body had executed. Here
    is an example where we use the `return` keyword:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用`return`关键字提前从函数返回。我们之前的所有函数示例（没有返回类型）在主体中的最后一行代码执行时自动返回到调用代码。下面是一个使用`return`关键字的例子：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Look at the output when we run the preceding code, and then we will discuss
    how it works:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们运行前面的代码时的输出，然后我们将讨论它是如何工作的：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the function body, the `if` expression checks whether `aNumber` is bigger
    than three, and, if it is, prints a disgruntled comment and uses the `return`
    keyword to go back to the calling code and avoid printing the value to the logcat.
    From the program output, we can see that when `aNUmber` was one, two, or three,
    it was dutifully printed by the `printUpTo3` function, but as soon as we passed
    in the value of four, we got the alternative result.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数体中，`if`表达式检查`aNumber`是否大于三，如果是，就打印一个不满的评论，并使用`return`关键字返回到调用代码，并避免将值打印到logcat。从程序输出中，我们可以看到当`aNUmber`为一、二或三时，它被`printUpTo3`函数忠实地打印出来，但是一旦我们传入了四的值，我们得到了另一种结果。
- en: Function bodies and single-expression functions
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数体和单表达式函数
- en: The function body can be as complex or simple as we need it to be. All the examples
    I have shown so far were deliberately overly simplistic, so that we could concentrate
    on functions specifically rather than the code within them. As the book progresses
    through more real-world examples, we will see the code in the function bodies
    grow longer and more complex. However, function bodies should stick to performing
    one specific task. If you have a function that takes up a whole screen in Android
    Studio, it is likely a sign that it should be split into multiple functions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 函数体可以是复杂的或简单的，我们需要它是什么样的。到目前为止，我展示的所有例子都是故意过于简单，这样我们就可以专注于函数本身而不是其中的代码。随着本书在更多真实世界的例子中的进展，我们将看到函数体中的代码变得更长更复杂。然而，函数体应该坚持执行一个特定的任务。如果你有一个函数在Android
    Studio中占据了整个屏幕，那很可能是它应该被拆分成多个函数的迹象。
- en: 'When you have a function with a very simple body containing just a single expression,
    Kotlin allows us to shorten the code by using a single-expression syntax. As an
    example, the `getSum` function could be changed to the following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数的主体非常简单，只包含一个表达式时，Kotlin允许我们使用单表达式语法来缩短代码。例如，`getSum`函数可以改为以下代码：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding example, we have shed the curly brackets that usually wrap
    the code in the body, and we have inferred the return type, because adding `a`
    to `b` could only result in an `Int` variable because `a` and `b` are, themselves,
    `Int` variables.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们去掉了通常包裹在函数体中的花括号，并推断了返回类型，因为将`a`加到`b`只能得到一个`Int`变量，因为`a`和`b`本身就是`Int`变量。
- en: Making functions flexible
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使函数灵活
- en: As functions are the building blocks of our code, they need to be versatile
    to cater for anything we might need to do. We have already seen how we can create
    very varied parameter lists and return types, as well as deciding in code when
    to return to the calling code. As we progress, you will see that we need even
    more options. What follows is a quick glance at some more Kotlin function options
    that we will introduce now, and then get around to using for real at various points
    throughout the book.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于函数是我们代码的构建块，它们需要具有多样性，以满足我们可能需要做的任何事情。我们已经看到了如何创建非常多样的参数列表和返回类型，以及在代码中决定何时返回到调用代码。随着我们的进展，你会发现我们需要更多的选项。接下来是一些我们现在将介绍的更多Kotlin函数选项的快速概览，然后在本书的各个部分真正开始使用。
- en: Default and named arguments
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认和命名参数
- en: 'A **default parameter** is where we the programmers provide a value (default)
    for a parameter that will be used if the code that calls the function does not
    provide it. A **named argument** is when the code calling a function specifies
    a name along with a value. Note that providing a value is optional. Just because
    a default value for a parameter is given does not prevent the calling code from
    overriding it by providing it. Have a look at the following example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认参数**是指我们程序员为参数提供一个值（默认值），如果调用函数的代码没有提供该值，则将使用该值。**命名参数**是指调用函数的代码指定名称以及值。请注意，提供值是可选的。只因为为参数提供了默认值并不意味着调用代码不能通过提供值来覆盖它。看下面的例子：'
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the preceding code, we first declare a function called `orderProduct`. Observe
    that amongst the parameter list, we have declared two default values, as reprinted
    and highlighted next for clarity:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先声明了一个名为`orderProduct`的函数。请注意，在参数列表中，我们声明了两个默认值，如下所示：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When we call the function, we can do so without specifying values for `giftwrap`
    and/or `postalService`. The first function call in the following code makes this
    clear:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用函数时，可以在不指定`giftwrap`和/或`postalService`的情况下这样做。以下代码中的第一个函数调用清楚地表明了这一点：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note that, when we do so, we need to specify the name of the argument, which
    must match the name in the parameter list as well as the type. In the second function
    call, we specify a value for `giftwrap` and `product`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当我们这样做时，需要指定参数的名称，它必须与参数列表中的名称以及类型匹配。在第二个函数调用中，我们为`giftwrap`和`product`指定了一个值：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the third, we specify a value for all three arguments, as seen again in
    the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个中，我们为所有三个参数指定了一个值，如下面的代码中再次看到的：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, in the fourth, we specify the final two arguments:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第四个中，我们指定了最后两个参数：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The code inside the function itself starts by declaring a `var` variable called
    `details`, which is a `String` value. If the value of `giftwrap` is true, then
    `Gift Wrapped` is appended to `Product details`. Next, the value of `product`
    is appended to `details`, and finally the value of `postalService` is appended
    with a literal `String` value on either side.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 函数本身的代码从声明一个名为`details`的`var`变量开始，它是一个`String`值。如果`giftwrap`的值为true，则将`Gift
    Wrapped`附加到`Product details`。接下来，将`product`的值附加到`details`，最后将`postalService`的值与字面`String`值附加在两侧。
- en: 'If we run the code, this is the output in the logcat window:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行代码，这是在logcat窗口中的输出：
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The varied ways we can call the function are extremely useful. In other programming
    languages, when you want to be able to call the same named function in different
    ways, you must supply multiple versions of the function. While learning about
    named arguments and default parameters might add a little complexity, it certainly
    beats having to write four versions of the `orderProduct` function. This, along
    with type inference, are just two of the reasons you will often hear programmers
    extolling Kotlin's succinct nature.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以多种方式调用函数，这非常有用。在其他编程语言中，当您希望以不同方式调用相同命名的函数时，必须提供多个版本的函数。虽然学习命名参数和默认参数可能会增加一些复杂性，但它肯定比不得不编写`orderProduct`函数的四个版本要好。这，连同类型推断，只是您经常会听到程序员赞扬Kotlin简洁性的两个原因之一。
- en: Using named arguments and default parameters, we can choose to supply as much
    or as little data as the function allows. Simply put, if we provide values for
    all parameters without default values, it will work.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名参数和默认参数，我们可以选择提供尽可能多或尽可能少的数据，只要函数允许。简而言之，如果我们提供了所有没有默认值的参数的值，它将起作用。
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to play with this code, then all the examples from this chapter
    are in the `Chapter09` folder. Create an Empty Activity project, then copy and
    paste the functions into the `MainActivity` class and the function calls into
    the `onCreate` function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要使用这段代码进行操作，那么本章中的所有示例都在`Chapter09`文件夹中。创建一个空活动项目，然后将函数复制粘贴到`MainActivity`类中，将函数调用复制粘贴到`onCreate`函数中。
- en: There are some caveats when we do this, and we will see them as we progress
    with some more real-world examples throughout the book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行这些操作时，会有一些注意事项，随着我们在整本书中进行更多的实际示例，我们将会看到它们。
- en: Even more on functions
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于函数的内容
- en: There is more to functions, such as top-level functions, local functions, and
    variable argument functions, as well as function access levels, but these are
    best discussed alongside or after the topic of classes and object-oriented programming.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 函数还有更多内容，例如顶级函数、局部函数和可变参数函数，以及函数访问级别，但最好是在类和面向对象编程的主题旁边或之后讨论这些内容。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we made good progress with learning about functions. Although
    functions have been lurking in our code since the first chapter, we finally got
    to study and understand them formally. We learned about the different parts of
    a function: the name, the parameters, and the return type. We have seen that what
    the function actually does goes inside the opening and closing curly brackets,
    and is called the function body.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在学习函数方面取得了良好的进展。虽然函数自第一章以来一直潜伏在我们的代码中，但我们终于正式学习和理解了它们。我们了解了函数的不同部分：名称、参数和返回类型。我们已经看到函数实际上是在开放和关闭的大括号内部执行的，称为函数体。
- en: We also saw that we can return from a function at any time by using the `return`
    keyword, and that we can also use the return type in conjunction with the `return`
    keyword to make data from the function available to the code that called the function
    in the first place.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，我们可以使用`return`关键字随时从函数中返回，并且我们还可以将返回类型与`return`关键字结合使用，以使函数中的数据可用于首次调用函数的代码。
- en: We learned how we can use default and named arguments to provide different versions
    of the same function without writing multiple functions. This makes our code more
    succinct and manageable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何使用默认和命名参数来提供同一函数的不同版本，而无需编写多个函数。这使我们的代码更加简洁和可管理。
- en: We also discovered that there is even more to functions than we covered in this
    chapter, but that it is best to learn about these topics as they arise in the
    various projects sprinkled throughout this book.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还发现，在本章中，函数还有更多内容，但最好是在整本书中的各种项目中学习这些主题。
- en: Next, we will move on to the most trailed chapter. I have constantly referred
    and deferred to [Chapter 10](ch10.html "Chapter 10. Object-Oriented Programming"),
    *Object-Oriented Programming*. Finally, it is here, and we will see the real power
    of classes and objects combined with Kotlin. We will quickly see over the next
    few chapters that classes and objects are the key to unleashing the power of the
    Android API. We will soon be able to make our user interfaces come to life, and
    will build some real, usable apps that we can publish to the Play store.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将转向最受关注的章节。我一直在参考和推迟到[第10章](ch10.html "第10章 面向对象编程")，“面向对象编程”。最后，它来了，我们将看到类和对象与Kotlin结合的真正力量。在接下来的几章中，我们很快就会看到类和对象是释放Android
    API力量的关键。我们很快就能让我们的用户界面栩栩如生，并且将构建一些真正可用的应用程序，我们可以发布到Play商店。
