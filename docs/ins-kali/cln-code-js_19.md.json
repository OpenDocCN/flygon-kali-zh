["```js\n{\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n     }\n  },\n  \"extends\": \"eslint:recommended\",\n  \"rules\": {\n    \"semi\": \"error\",\n    \"quotes\": \"single\"\n  }\n}\n```", "```js\nconst message = \"hello\"\nconst another = `what`\n\nif (true) {}\n```", "```js\n/Users/me/code/example.js\n 1:7 error 'message' is assigned a value but never used \n 1:17 error Strings must use singlequote \n 1:24 error Missing semicolon\n 2:7 error 'another' is assigned a value but never used\n 2:17 error Strings must use singlequote\n 2:23 error Missing semicolon\n 4:5 error Unexpected constant condition \n 4:11 error Empty block statement\n\n 8 problems (8 errors, 0 warnings)\n 4 errors and 0 warnings potentially fixable with the `--fix` option.\n```", "```js\nfunction reverse( str ) {\n  return ( String( str ).split( '' ).reverse().join( '' ) );\n}\n```", "```js\nfunction reverse(str) {\n  return String(str)\n    .split(\"\")\n    .reverse()\n    .join(\"\");\n}\n```", "```js\nfunction addRating(productName: string, rating: number) {\n  console.log(\n    `Adding rating for product ${productName} of ${rating}`\n  );\n}\n```", "```js\nimport puppeteer from 'puppeteer';\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n\n  const titleElement = await page.$('title');\n  const title = await page.evaluate(el => el.textContent, titleElement);\n\n  console.log('Title of example.com is ', title);\n\n  await browser.close();\n})();\n```", "```js\nimport puppeteer from 'puppeteer';\n\ndescribe('Google.com', () => {\n\n  let page;\n\n  beforeAll(async () => {\n      const browser = await puppeteer.launch();\n      page = await browser.newPage();\n      await page.goto('https://google.com');\n  });\n\n  afterAll(async () => await browser.close());\n\n  it('has a <title> of \"Google\"', async () => {\n    const titleElement = await page.$('title');\n    const title = await page.evaluate(el => el.textContent, titleElement);\n    expect(title).toBe('Google');\n  });\n});\n```"]