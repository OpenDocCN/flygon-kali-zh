["```\n// launch a busybox container with `top` command, also, expose container port 8080 to host port 8000.\n# docker run -d -p 8000:8080 --name=busybox busybox top\n737e4d87ba86633f39b4e541f15cd077d688a1c8bfb83156d38566fc5c81f469 \n```", "```\n// show all the network interfaces in busybox container\n// docker exec <container_name> <command>\n# docker exec busybox ip link list\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: sit0@NONE: <NOARP> mtu 1480 qdisc noop qlen 1\n link/sit 0.0.0.0 brd 0.0.0.0\n**53**: **eth0@if54**: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> \n    mtu 1500 qdisc noqueue\n link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff  \n```", "```\n// show all the network interfaces from the host\n# ip link list\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue  \n   state UNKNOWN mode DEFAULT group default qlen 1\n link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc \n   pfifo_fast state UP mode DEFAULT group default qlen  \n   1000\n link/ether 08:00:27:ca:fd:37 brd ff:ff:ff:ff:ff:ff\n...\n**54**: **vethfeec36a@if53**: <BROADCAST,MULTICAST,UP,LOWER_UP> \n    mtu 1500 qdisc noqueue master docker0 state UP mode  \n    DEFAULT group default\n link/ether ce:25:25:9e:6c:07 brd ff:ff:ff:ff:ff:ff link-netnsid 5  \n```", "```\n// list iptables nat rules. Showing only POSTROUTING rules which allows packets to be altered before they leave the host.\n# sudo iptables -t nat -nL POSTROUTING\nChain POSTROUTING (policy ACCEPT)\ntarget     prot opt source               destination\n...\nMASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0\n...  \n```", "```\n// list iptables nat rules\n# sudo iptables -t nat -nL\nChain PREROUTING (policy ACCEPT)\ntarget     prot opt source               destination\n...\nDOCKER     all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n...\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\nDOCKER     all  --  0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n...\nChain DOCKER (2 references)\ntarget     prot opt source               destination\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0\n...\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8000 to:172.17.0.7:8080\n...  \n```", "```\n#cat 5-1-1_pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: example\nspec:\n containers:\n - name: web\n image: nginx\n - name: centos\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do curl http://localhost:80/; sleep 10; done\"]\n\n// create the Pod\n#kubectl create -f 5-1-1_pod.yaml\npod \"example\" created  \n```", "```\n# kubectl describe pods example\nName:       example\nNode:       minikube/192.168.99.100\n...\nContainers:\n web:\n Container ID: docker:// **d9bd923572ab186870284535044e7f3132d5cac11ecb18576078b9c7bae86c73**\n Image:        nginx\n...\ncentos:\n Container ID: docker: **//f4c019d289d4b958cd17ecbe9fe22a5ce5952cb380c8ca4f9299e10bf5e94a0f**\n Image:        centos\n...  \n```", "```\n# docker ps\nCONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS                                      NAMES\nf4c019d289d4        36540f359ca3                               \"/bin/sh -c 'while : \"   2 minutes ago        Up 2 minutes k8s_centos_example_default_9843fc27-677b-11e7-9a8c-080027cafd37_1\nd9bd923572ab        e4e6d42c70b3                               \"nginx -g 'daemon off\"   2 minutes ago        Up 2 minutes k8s_web_example_default_9843fc27-677b-11e7-9a8c-080027cafd37_1\n4ddd3221cc47        gcr.io/google_containers/pause-amd64:3.0   \"/pause\"                 2 minutes ago        Up 2 minutes  \n```", "```\n# docker inspect d9bd923572ab | grep NetworkMode\n\"NetworkMode\": \"container:4ddd3221cc4792207ce0a2b3bac5d758a5c7ae321634436fa3e6dd627a31ca76\",  \n```", "```\n// start minikube with cni option\n# minikube start --network-plugin=cni\n...\nKubectl is now configured to use the cluster.  \n```", "```\n# minikube ssh\n$ ifconfig \n...\nmybridge  Link encap:Ethernet  HWaddr 0A:58:0A:01:00:01\n inet addr:10.1.0.1  Bcast:0.0.0.0  \n          Mask:255.255.0.0\n...  \n```", "```\n# kubectl create -f 5-1-1_pod.yaml\npod \"example\" created\n# kubectl describe po example\nName:       example\nNamespace:  default\nNode:       minikube/192.168.99.100\nStart Time: Sun, 23 Jul 2017 14:24:24 -0400\nLabels:           <none>\nAnnotations:      <none>\nStatus:           Running\nIP:         10.1.0.4  \n```", "```\n# cat /etc/cni/net.d/k8s.conf\n{\n \"name\": \"rkt.kubernetes.io\",\n \"type\": \"bridge\",\n \"bridge\": \"mybridge\",\n \"mtu\": 1460,\n \"addIf\": \"true\",\n \"isGateway\": true,\n \"ipMasq\": true,\n \"ipam\": {\n \"type\": \"host-local\",\n \"subnet\": \"10.1.0.0/16\",\n \"gateway\": \"10.1.0.1\",\n \"routes\": [\n      {\n       \"dst\": \"0.0.0.0/0\"\n      }\n ]\n }\n}\n```", "```\n// check the rules in iptables \n# sudo iptables -t nat -nL\n... \nChain POSTROUTING (policy ACCEPT)\ntarget     prot opt source               destination\nKUBE-POSTROUTING  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */\nMASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0\nCNI-25df152800e33f7b16fc085a  all  --  10.1.0.0/16          0.0.0.0/0            /* name: \"rkt.kubernetes.io\" id: \"328287949eb4d4483a3a8035d65cc326417ae7384270844e59c2f4e963d87e18\" */\nCNI-f1931fed74271104c4d10006  all  --  10.1.0.0/16          0.0.0.0/0            /* name: \"rkt.kubernetes.io\" id: \"08c562ff4d67496fdae1c08facb2766ca30533552b8bd0682630f203b18f8c0a\" */  \n```", "```\n// create two pods with nginx and one service to observe default networking. Users are free to use any other kind of solution.\n# kubectl create -f 3-2-3_rc1.yaml\nreplicationcontroller \"nginx-1.12\" created\n# kubectl create -f 3-2-3_nodeport.yaml\nservice \"nginx-nodeport\" created  \n```", "```\n// kubectl describe svc nginx-nodeport\nName:             nginx-nodeport\nNamespace:        default\nSelector:         project=chapter3,service=web\nType:             NodePort\nIP:               10.0.0.167\nPort:             <unset>     80/TCP\nNodePort:         <unset>     32261/TCP\nEndpoints:        10.1.0.4:80,10.1.0.5:80\n...  \n```", "```\n# sudo iptables -t nat -nL\n...\nChain KUBE-SERVICES (2 references)\ntarget     prot opt source               destination\nKUBE-SVC-37ROJ3MK6RKFMQ2B  tcp  --  0.0.0.0/0            **10.0.0.167**           /* default/nginx-nodeport: cluster IP */ tcp dpt:80\nKUBE-NODEPORTS  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL\n\nChain **KUBE-SVC-37ROJ3MK6RKFMQ2B** (2 references)\ntarget     prot opt source               destination\n**KUBE-SEP-SVVBOHTYP7PAP3J5**  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */ statistic mode random probability 0.50000000000\n**KUBE-SEP-AYS7I6ZPYFC6YNNF**  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */\nChain **KUBE-SEP-SVVBOHTYP7PAP3J5** (1 references)\ntarget     prot opt source               destination\nKUBE-MARK-MASQ  all  --  10.1.0.4             0.0.0.0/0            /* default/nginx-nodeport: */\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */ tcp to:10.1.0.4:80\nChain KUBE-SEP-AYS7I6ZPYFC6YNNF (1 references)\ntarget     prot opt source               destination\nKUBE-MARK-MASQ  all  --  10.1.0.5             0.0.0.0/0            /* default/nginx-nodeport: */\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */ tcp to:10.1.0.5:80\n...  \n```", "```\n// start over our minikube local\n# minikube delete && minikube start\n\n// enable ingress in minikube\n# minikube addons enable ingress\ningress was successfully enabled \n\n// check current setting for addons in minikube\n# minikube addons list\n- registry: disabled\n- registry-creds: disabled\n- addon-manager: enabled\n- dashboard: enabled\n- default-storageclass: enabled\n- kube-dns: enabled\n- heapster: disabled\n- ingress: **enabled** \n```", "```\n# cat 5-2-1_nginx.yaml\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: nginx\nspec:\n replicas: 2\n template:\n metadata:\n labels:\n project: chapter5\n service: nginx\n spec:\n containers:\n - name: nginx\n image: nginx\n ports:\n - containerPort: 80\n---\nkind: Service\napiVersion: v1\nmetadata:\n name: nginx\nspec:\n type: NodePort\n  selector:\n project: chapter5\n service: nginx\n ports:\n - protocol: TCP\n port: 80\n targetPort: 80\n// create nginx RS and service\n# kubectl create -f 5-2-1_nginx.yaml\ndeployment \"nginx\" created\nservice \"nginx\" created\n```", "```\n// another backend named echoserver\n# cat 5-2-1_echoserver.yaml\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: echoserver\nspec:\n replicas: 1\n template:\n metadata:\n name: echoserver\n labels:\n project: chapter5\n service: echoserver\n spec:\n containers:\n - name: echoserver\n image: gcr.io/google_containers/echoserver:1.4\n ports:\n - containerPort: 8080\n---\n\nkind: Service\napiVersion: v1\nmetadata:\n name: echoserver\nspec:\n type: NodePort\n selector:\n project: chapter5\n service: echoserver\n ports:\n - protocol: TCP\n port: 8080\n targetPort: 8080\n\n// create RS and SVC by above configuration file\n# kubectl create -f 5-2-1_echoserver.yaml\ndeployment \"echoserver\" created\nservice \"echoserver\" created  \n```", "```\n# cat 5-2-1_ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n name: ingress-example\n annotations:\n ingress.kubernetes.io/rewrite-target: /\nspec:\n rules:\n - host: devops.k8s\n http:\n paths:\n - path: /welcome\n backend:\n serviceName: nginx\n servicePort: 80\n - path: /echoserver\n backend:\n serviceName: echoserver\n servicePort: 8080\n\n// create ingress\n# kubectl create -f 5-2-1_ingress.yaml\ningress \"ingress-example\" created\n```", "```\n// normally host file located in /etc/hosts in linux\n# sudo sh -c \"echo `minikube ip` devops.k8s >> /etc/hosts\"  \n```", "```\n# curl http://devops.k8s/welcome\n...\n<title>Welcome to nginx!</title>\n...\n// check echoserver \n# curl http://devops.k8s/echoserver\nCLIENT VALUES:\nclient_address=172.17.0.4\ncommand=GET\nreal path=/\nquery=nil\nrequest_version=1.1\nrequest_uri=http://devops.k8s:8080/  \n```", "```\n// find out etcd ip\n# minikube ssh -- \"sudo /usr/local/bin/localkube --host-ip\"\n2017-07-27 04:10:58.941493 I | proto: duplicate proto type registered: google.protobuf.Any\n2017-07-27 04:10:58.941822 I | proto: duplicate proto type registered: google.protobuf.Duration\n2017-07-27 04:10:58.942028 I | proto: duplicate proto type registered: google.protobuf.Timestamp\nlocalkube host ip:  10.0.2.15  \n```", "```\n// launch calico\n# kubectl apply -f calico.yaml\nconfigmap \"calico-config\" created\nsecret \"calico-etcd-secrets\" created\ndaemonset \"calico-node\" created\ndeployment \"calico-policy-controller\" created\njob \"configure-calico\" created\n\n// list the pods in kube-system\n# kubectl get pods --namespace=kube-system\nNAME                                        READY     STATUS    RESTARTS   AGE\ncalico-node-ss243                           2/2       Running   0          1m\ncalico-policy-controller-2249040168-r2270   1/1       Running   0          1m  \n```", "```\n# kubectl create -f 5-2-1_nginx.yaml\nreplicaset \"nginx\" created\nservice \"nginx\" created\n// list the services\n# kubectl get svc\nNAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE\nkubernetes   10.0.0.1     <none>        443/TCP        47m\nnginx        10.0.0.42    <nodes>       80:31071/TCP   5m\n```", "```\n# kubectl run busybox -i -t --image=busybox /bin/sh\nIf you don't see a command prompt, try pressing enter.\n/ # wget --spider 10.0.0.42 \nConnecting to 10.0.0.42 (10.0.0.42:80)  \n```", "```\n// declare a network policy\n# cat 5-3-1_networkpolicy.yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n name: nginx-networkpolicy\nspec:\n podSelector:\n matchLabels:\n service: nginx\n ingress:\n - from:\n - podSelector:\n matchLabels:\n project: chapter5  \n```", "```\n// in busybox pod, or you could use `kubectl attach <pod_name> -c busybox -i -t` to re-attach to the pod \n# wget --spider --timeout=1 10.0.0.42\nConnecting to 10.0.0.42 (10.0.0.42:80)\nwget: download timed out  \n```", "```\n// inside busybox pod\n/ # wget --spider 10.0.0.42 \nConnecting to 10.0.0.42 (10.0.0.42:80)  \n```", "```\n# cat 5-3-1_np_denyall.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n name: default-deny\nspec:\n podSelector:  \n```", "```\n# cat 5-3-1_np_allowall.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n name: allow-all\nspec:\n podSelector:\n ingress:\n - {}  \n```"]