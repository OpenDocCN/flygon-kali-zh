- en: Chapter 2. The Skeleton Cardboard Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。Cardboard项目的骨架
- en: 'In this chapter, you will learn how to build a skeleton Cardboard project which
    can be a starting point for other projects in this book. We will begin with an
    introduction to Android Studio, the Cardboard SDK, and Java programming. We want
    to make sure that you''re up to speed on the tools and Android projects in general.
    Then, we will walk you through setting up a new Cardboard project so that we don''t
    need to repeat these details in each project. If some or all of this is already
    familiar to you, great! You might be able to skim it. In this chapter, we will
    cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何构建一个Cardboard项目的骨架，这可以成为本书中其他项目的起点。我们将首先介绍Android Studio、Cardboard
    SDK和Java编程。我们希望确保你对工具和Android项目有所了解。然后，我们将指导你设置一个新的Cardboard项目，这样我们就不需要在每个项目中重复这些细节。如果这些内容对你来说已经很熟悉了，太好了！你可能可以略过它。在本章中，我们将涵盖以下主题：
- en: What's in an Android app?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Android应用程序中有什么？
- en: The Android project structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android项目结构
- en: Getting started with Android Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Android Studio
- en: Creating a new Cardboard project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的Cardboard项目
- en: Adding the Cardboard Java SDK
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Cardboard Java SDK
- en: Editing the manifest, layout, and `MainActivity`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑清单、布局和`MainActivity`
- en: Building and running the app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和运行应用程序
- en: What's in an Android app?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个Android应用程序中有什么？
- en: For our projects, we're going to use the powerful Android Studio IDE (an integrated
    development environment) to build Google Cardboard virtual reality applications
    that run on Android devices. *Woot!* Android Studio integrates a number of different
    tools and processes under one roof.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们将使用强大的Android Studio IDE（集成开发环境）来构建在Android设备上运行的Google Cardboard虚拟现实应用程序。*哇哦！*
    Android Studio在一个平台下整合了许多不同的工具和流程。
- en: The result of all your hard work to develop an Android app is an Android application
    package or an `.apk` file, which is distributed to users via the Google Play Store
    or however you choose to distribute your app. This file gets installed on their
    Android device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Android应用程序的所有辛勤工作的结果是一个Android应用程序包或`.apk`文件，通过Google Play商店或其他方式分发给用户。这个文件会安装在他们的Android设备上。
- en: We'll jump to Android Studio itself in a moment. However, in order to shed some
    light on what's going on here, let's consider this end result `.apk` file first.
    What is it really? How'd we get it? Understanding the build process will help.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们马上就会跳到Android Studio本身。然而，为了阐明这里发生了什么，让我们先考虑这个最终结果`.apk`文件。它到底是什么？我们是如何得到它的？了解构建过程将有所帮助。
- en: Keeping this in mind, for fun and to gain perspective, let's start from the
    end and work our way backward from the APK through the build pipeline to our app
    source code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点，为了好玩和获得视角，让我们从最后开始，从APK文件通过构建管道到我们的应用源代码。
- en: APK files
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APK文件
- en: The APK file is actually a compressed zipped package of a bunch of different
    files, including the compiled Java code and non-compiled resources, such as images.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: APK文件实际上是一堆不同文件的压缩包，包括编译后的Java代码和非编译资源，比如图片。
- en: An APK file is built for a specific *target* version of Android, but it also
    indicates a *minimum* version. An app built for an older version of Android, in
    general, will run on newer Android versions but not vice versa. To build for an
    older version of Android, however, means that newer features will not be available
    to the app. You want to choose the minimum version of Android that supports the
    features you need in order to target as many devices as possible. Or, if you want
    to support a smaller subset of devices for, say, performance reasons, you might
    choose an artificially high minimum API version.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: APK文件是为特定的Android *目标*版本构建的，但它也指示了一个*最低*版本。一般来说，为较旧版本的Android构建的应用程序将在更新的Android版本上运行，但反之则不然。然而，为较旧版本的Android构建意味着新功能将不可用于该应用程序。你需要选择支持你需要的功能的最低Android版本，以便能够针对尽可能多的设备。或者，如果出于性能原因，你想要支持较小的设备子集，你可能会选择一个人为设定的较高的最低API版本。
- en: To build your project and create an APK file in Android Studio, you need to
    click on the **Build menu** option and select **Make Project**, (or click on the
    green arrow icon to build, deploy, and run the app on a device or within an **Android
    Virtual Device** (**AVD**)), which kicks off a Gradle build process. You can build
    a version to develop and debug or build a more optimized release version of the
    application for distribution. You can choose to do this by clicking on the **Build**
    menu and selecting **Select Build Variant...**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中构建项目并创建APK文件，你需要点击**Build菜单**选项并选择**Make Project**（或者点击绿色箭头图标来构建、部署和在设备上或**Android虚拟设备**（**AVD**）中运行应用程序），这将启动Gradle构建过程。你可以构建一个版本来开发和调试，或者构建一个更优化的发布版本的应用程序。你可以通过点击**Build**菜单并选择**Select
    Build Variant...**来选择这样做。
- en: A Gradle build process
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle构建过程
- en: Android Studio uses a tool named **Gradle** to build the APK file from your
    project files. The following is a flow diagram of the Gradle build process taken
    from the Android documentation ([http://developer.android.com/sdk/installing/studio-build.html](http://developer.android.com/sdk/installing/studio-build.html)).
    Actually, most of the illustrated details aren't so important for us. What is
    important is to see the many pieces and how they fit together.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio使用一个名为**Gradle**的工具从项目文件中构建APK文件。以下是从Android文档中获取的Gradle构建过程的流程图（[http://developer.android.com/sdk/installing/studio-build.html](http://developer.android.com/sdk/installing/studio-build.html)）。实际上，大部分图示细节对我们来说并不重要。重要的是看到这么多部分以及它们如何组合在一起。
- en: '![A Gradle build process](img/B05144_02_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Gradle构建过程](img/B05144_02_01.jpg)'
- en: In the bottom-most box in the preceding diagram, you can see that the result
    of the build is a signed and aligned `.apk` file, which is the final version of
    our app that has been compiled (converted from the source code), zipped (compressed),
    and signed (for authentication) from the earlier build process. The final step,
    zipalign, aligns the compressed resources along 4-byte boundaries in order to
    quickly access them at runtime. Basically, this last step makes the app load faster.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面图表的最底部方框中，您可以看到构建的结果是一个经过签名和对齐的`.apk`文件，这是我们应用程序的最终版本，已经从之前的构建过程中编译（从源代码转换）、压缩（压缩）和签名（用于认证）。最后一步，zipalign，将压缩资源沿着4字节边界对齐，以便在运行时快速访问它们。基本上，这最后一步使应用程序加载更快。
- en: In the middle of the diagram, you'll see that the `.apk` (unsigned, uncompressed)
    file is assembled from `.dex` files, compiled Java classes, and other resources
    (such as images and media files).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表的中间，您将看到`.apk`（未签名，未压缩）文件是由`.dex`文件、编译的Java类和其他资源（如图像和媒体文件）组装而成。
- en: A `.dex` file is the Java code, which has been compiled into a format (Dalvik
    bytecode) that runs on the **Dalvik** **virtual machine** (**DVM**) on your device.
    This is an executable file of your program. Any third-party libraries and compiled
    Java source code files (`.class`) that you have included in your module build
    are converted to `.dex` files in order to be packaged into the final `.apk` file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dex`文件是Java代码，已经编译成在您设备上的**Dalvik** **虚拟机**（**DVM**）上运行的格式（Dalvik字节码）。这是您程序的可执行文件。您在模块构建中包含的任何第三方库和编译的Java源代码文件（`.class`）都会被转换为`.dex`文件，以便打包到最终的`.apk`文件中。'
- en: Again, don't sweat the details if this is new to you. The important thing is
    that we're going to be working with a lot of different files in our Google Cardboard
    projects. It will be helpful for us to have a context of where they're used in
    the build process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对您来说是新的，不要太在意细节。重要的是，我们将在我们的Google Cardboard项目中使用许多不同的文件。了解它们在构建过程中的使用情况将对我们有所帮助。
- en: For example, the `common.aar` file (binary Android Library Archive) with the
    Cardboard SDK is one of the third-party libraries which we will use. The contents
    of your project's `res/` directory, such as `layout/activity_main.xml`, are passed
    through the **Android Asset Packaging Tool** **(aapt)**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，带有Cardboard SDK的`common.aar`文件（二进制Android库存档）是我们将使用的第三方库之一。您项目的`res/`目录的内容，例如`layout/activity_main.xml`，会通过**Android资产打包工具**（aapt）进行处理。
- en: A Java compiler
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个Java编译器
- en: 'What feeds into the `.dex` file? A Java compiler takes the Java language source
    code and generates an `.dex` file containing bytecode. By referring to the preceding
    Gradle build flow diagram, at the top of the diagram, you will see that the inputs
    to the Java compiler include the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dex`文件的输入是什么？Java编译器将Java语言源代码生成包含字节码的`.dex`文件。通过参考前面的Gradle构建流程图，在图表的顶部，您将看到Java编译器的输入包括以下内容：'
- en: Your application's Java source code
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应用程序的Java源代码
- en: Your application's XML resources, such as the `AndroidManifest.xml` file, compiled
    using the **aapt**, and used to generate the `R.java` file
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应用程序的XML资源，例如使用**aapt**编译的`AndroidManifest.xml`文件，并用于生成`R.java`文件
- en: Your application's Java interfaces (**Android Interface Definition Language**
    `.aidl` files), compiled using the **aidl** tool
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的应用程序的Java接口（**Android接口定义语言**`.aidl`文件），使用**aidl**工具编译
- en: In the rest of this book, we're going to talk a lot about these source code
    files. That's the stuff you write! That's the place where you do your magic! That's
    the world where we programmers live.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将大量讨论这些源代码文件。那就是你写的东西！那就是你施展魔法的地方！那就是我们程序员生活的世界。
- en: Let's now take a look at the directory structure of your Android project source
    code.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看你的Android项目源代码的目录结构。
- en: The Android project structure
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android项目结构
- en: The root directory of your Android project contains various files and subdirectories.
    Or, should I say, the root folder of your Android project contains various files
    and *subfolders.* *Ha ha*. We'll use the words "folder" and "directory" interchangeably
    throughout this book, just as Android Studio also seems to do (actually, there
    is a difference, as discussed at [http://stackoverflow.com/questions/29454427/new-directory-vs-new-folder-in-android-studio](http://stackoverflow.com/questions/29454427/new-directory-vs-new-folder-in-android-studio)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Android项目的根目录包含各种文件和子目录。或者，我应该说，您的Android项目的根文件夹包含各种文件和*子文件夹*。*哈哈*。在本书中，我们将在整个过程中交替使用“文件夹”和“目录”这两个词，就像Android
    Studio似乎也在做的一样（实际上，这是有区别的，如[http://stackoverflow.com/questions/29454427/new-directory-vs-new-folder-in-android-studio](http://stackoverflow.com/questions/29454427/new-directory-vs-new-folder-in-android-studio)中所讨论的那样）。
- en: 'As shown in the Android hierarchy, in the following sample Cardboard project,
    the root directory contains an `app/` subdirectory, which, in turn, contains the
    following subdirectories:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如Android层次结构所示，在以下示例Cardboard项目中，根目录包含一个`app/`子目录，该子目录又包含以下子目录：
- en: '`app/manifests/`: This contains the `AndroidManifest.xml` manifest file that
    specifies the components of the application, including activities (UI), device
    permissions, and other configurations'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/manifests/`：这包含了指定应用程序组件（包括活动（UI）、设备权限和其他配置）的`AndroidManifest.xml`清单文件'
- en: '`app/java/`: This contains subfolders with your application Java files that
    implement the application''s `MainActivity` and other classes'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/java/`：这包含了实现应用程序`MainActivity`和其他类的应用程序Java文件的子文件夹'
- en: '`app/res/`: This contains subfolders with resources, including the layout XML
    definition files, values definitions (`strings.xml`, `styles.xml`, and so on),
    icons, and other resource files![The Android project structure](img/B05144_02_02.jpg)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app/res/`：这包含了包括布局XML定义文件、值定义（`strings.xml`、`styles.xml`等）、图标和其他资源文件在内的资源子文件夹！[Android项目结构](img/B05144_02_02.jpg)'
- en: It's not a coincidence that these directories correspond to the boxes in the
    topmost row of the preceding Gradle build process diagram; they supply the source
    files that are run through the Java compiler.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些目录与前面Gradle构建过程图表最上面一行中的方框相对应并不是巧合；它们提供了要通过Java编译器运行的源文件。
- en: Also, there are Gradle scripts under the root directory, which do not need to
    be edited directly since the Android Studio IDE provides convenient dialog boxes
    to manage the settings. In some cases, you might find it to be easier to modify
    these files directly.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在根目录下有Gradle脚本，不需要直接编辑，因为Android Studio IDE提供了方便的对话框来管理设置。在某些情况下，直接修改这些文件可能更容易。
- en: Notice that in the upper-left corner of the hierarchy pane is a tab select menu.
    In the preceding screenshot, it is set to **Android**, which just shows the Android-specific
    files. There are other views that might also be useful, such as **Project**, which
    lists all the files and subdirectories under your project root directory, as shown
    in the following screenshot, for the same app. The **Project** hierarchy shows
    the files as they are structured on the actual filesystem. The other hierarchies
    artificially restructure your project to make it easier to work with.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意层次结构窗格左上角有一个选项卡选择菜单。在前面的屏幕截图中，它设置为**Android**，只显示Android特定的文件。还有其他视图可能也很有用，比如**Project**，它列出了项目根目录下的所有文件和子目录，如下一个屏幕截图所示，用于同一个应用程序。**Project**层次结构显示文件的实际文件系统结构。其他层次结构会人为地重新构造项目，以便更容易处理。
- en: '![The Android project structure](img/B05144_02_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Android项目结构](img/B05144_02_03.jpg)'
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: From time to time, you'll need to switch between the **Android** view and **Project**
    view.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要在**Android**视图和**Project**视图之间切换。
- en: Getting started with Android Studio
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Android Studio
- en: When developing Cardboard apps for Android, there's tons of stuff that you need
    to track, including all your files and folders, Java classes and objects, and
    functions and variables. You need a properly organized Java program structure
    and valid language syntax. You need to set options and manage processes to build
    and debug your applications. *Whew!*
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在为Android开发Cardboard应用程序时，有很多东西需要跟踪，包括所有文件和文件夹、Java类和对象、函数和变量。您需要一个正确组织的Java程序结构和有效的语言语法。您需要设置选项并管理进程以构建和调试应用程序。*哇！*
- en: Thank goodness we have Android Studio, a powerful **IDE** (**integrated development
    environment**). It's built on top of IntelliJ IDEA by JetBrains, a popular intelligent
    Java development suite of tools.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 谢天谢地，我们有Android Studio，一个功能强大的**IDE**（**集成开发环境**）。它是基于JetBrains的IntelliJ IDEA构建的，后者是一套受欢迎的智能Java开发工具套件。
- en: It's intelligent because it actually gives you relevant suggestions as you write
    your code (*Ctrl* + *Space*), helps navigate between related references and files
    (*Ctrl* + *B*, *Alt* + *F7*) as well as automates refactor operations, such as
    renaming a class or method (*Alt* + *Enter*). In some ways, it may know what you're
    trying to do, even if you don't. *How smart is that?*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它是智能的，因为它在您编写代码时实际上会给出相关的建议（*Ctrl* + *Space*），帮助在相关引用和文件之间导航（*Ctrl* + *B*，*Alt*
    + *F7*），并自动执行重构操作，比如重命名类或方法（*Alt* + *Enter*）。在某些方面，它可能知道您正在尝试做什么，即使您自己不知道。*多么聪明啊！*
- en: Installing Android Studio
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Android Studio
- en: If you don't already have Android Studio installed on your development machine,
    what are you waiting for? Head on over to the Android developers page ([http://developer.android.com/develop/index.html](http://developer.android.com/develop/index.html))
    and download it to your system. It's available for Windows, Mac OS X, or Linux.
    You can install the full Android Studio package and not just the SDK tools. Then,
    obediently follow the installation instructions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的开发机器上尚未安装Android Studio，您还在等什么？前往Android开发者页面（[http://developer.android.com/develop/index.html](http://developer.android.com/develop/index.html)）并将其下载到您的系统。它适用于Windows、Mac
    OS X或Linux。您可以安装完整的Android Studio软件包，而不仅仅是SDK工具。然后，遵循安装说明。
- en: The Android Studio user interface
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android Studio用户界面
- en: There's a lot to Android Studio. In most cases, we'll just explain with the
    help of examples as we go along. But let's take a little time to review a few
    features, especially the ones that are relevant to Cardboard development. Just
    make sure that you read the documentation available at the Android developer tools
    page if needed ([http://developer.android.com/tools/studio/index.html](http://developer.android.com/tools/studio/index.html)).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio有很多功能。在大多数情况下，我们将在实例的帮助下进行解释。但让我们花点时间来回顾一些功能，特别是与Cardboard开发相关的功能。只要确保在需要时阅读Android开发工具页面上提供的文档（[http://developer.android.com/tools/studio/index.html](http://developer.android.com/tools/studio/index.html)）。
- en: For a beginner, the Android Studio user interface can seem daunting. And the
    default interface is only the beginning; editor themes and layouts can be customized
    to your liking. Worse, it has a tendency to change with new releases, so tutorials
    can seem out of date. While this can make it challenging for you to find what
    you need on a particular occasion, the underlying functionality does not change
    a whole lot. An Android app is an Android app is an Android app, in most cases.
    We used Android Studio 2.1 for Windows for this book (although some screen captures
    are from an earlier version, the interface is essentially identical).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者来说，Android Studio的用户界面可能看起来令人生畏。而默认界面只是开始；编辑器主题和布局可以根据您的喜好进行自定义。更糟糕的是，随着新版本的发布，界面往往会发生变化，因此教程可能会显得过时。虽然这可能会使您在特定场合难以找到所需的内容，但基本功能并没有发生太大变化。在大多数情况下，Android应用程序就是Android应用程序。我们在本书中使用的是Windows版的Android
    Studio 2.1（尽管一些屏幕截图来自早期版本，但界面基本相同）。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While using Android Studio, you may get notifications of the new updates available.
    We recommend that you do not upgrade in the middle of a project, unless you know
    that you really need the new improvements. Even so, make sure that you have backups
    if compatibility issues are introduced.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Android Studio时，您可能会收到新的更新通知。我们建议您不要在项目进行中升级，除非您确实需要新的改进。即便如此，确保您有备份以防兼容性问题。
- en: 'Let''s take a brief tour of the Android Studio window, as shown in the following
    screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地浏览一下Android Studio窗口，如下图所示：
- en: '![The Android Studio user interface](img/B05144_02_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio用户界面](img/B05144_02_04.jpg)'
- en: 'The menus of Android Studio are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio的菜单有：
- en: At the top is the main menu bar (**#1**) with a drop-down menu and pull out
    menus for just about all the features available.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部是主菜单栏（**＃1**），其中包含下拉菜单和拉出菜单，几乎包括所有可用功能。
- en: Under the menu bar is a convenient main toolbar (**#2**) with shortcuts to common
    functions. Hovering over an icon shows a tooltip hint of what it does.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在菜单栏下方是一个方便的主工具栏（**＃2**），其中包含常用功能的快捷方式。将鼠标悬停在图标上会显示工具提示，说明其功能。
- en: Under the toolbar is the main editor pane (**#3**). When no file is open, it
    says **No files are open**. The main editor panes are tabbed along the top when
    multiple files are open.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具栏下方是主编辑窗格（**＃3**）。当没有文件打开时，它会显示**没有打开的文件**。当打开多个文件时，主编辑窗格在顶部有选项卡。
- en: The hierarchy navigator pane is on the left-hand side (**#4**).
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层次结构导航器窗格位于左侧（**＃4**）。
- en: The hierarchy navigator pane has tabs along the left-hand side (vertical tabs,
    **#5**) to select between the various views of your project.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层次结构导航器窗格在左侧有选项卡（垂直选项卡，**＃5**），用于在项目的各种视图之间进行选择。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice the select menu on the top left-hand side of the hierarchy pane. In the
    preceding screenshot, it is set to **Android**, which just shows the Android-specific
    files. There are other views that might also be useful, such as **Project**, which
    shows all the files and subdirectories under your project root directory, as mentioned
    earlier.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意层次结构窗格左上角的选择菜单。在前面的截图中，它设置为**Android**，只显示特定于Android的文件。还有其他视图可能也很有用，比如**项目**，它显示项目根目录下的所有文件和子目录，就像前面提到的那样。
- en: Along the bottom is an additional tool bar (**#6**) used to choose other dynamic
    tools you might need, including a Terminal window, build messages, debugging information,
    and even a to-do list. Perhaps the most important one is the Android Monitor **logcat**
    tab that provides a window to the Android logging system to collect and view the
    system debug output.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部是另一个工具栏（**＃6**），用于选择您可能需要的其他动态工具，包括终端窗口、构建消息、调试信息，甚至待办事项列表。也许最重要的是Android
    Monitor的**logcat**选项卡，它提供了一个窗口，用于收集和查看系统调试输出的Android日志系统。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It will be helpful for you to pay attention to the **Debuggable Application**
    drop-down menu, **Log Level** and other filters within **logcat** in order to
    filter out the "log spam" that will make it hard for you to find the output that
    you are looking for. Also, note that even on a high-end computer with a fast CPU,
    this log view can slow down Android Studio to a crawl. It is recommended that
    you hide this view when not in use, especially if you have multiple instances
    of Android Studio open.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您来说，注意**可调试应用程序**下拉菜单、**日志级别**和**logcat**中的其他过滤器将是有帮助的，以便过滤掉会使您难以找到所需输出的“日志垃圾”。另外，请注意，即使在高端计算机上使用快速CPU，这个日志视图也会使Android
    Studio变得非常缓慢。建议您在不使用时隐藏此视图，特别是如果您打开了多个Android Studio实例。
- en: Controls in the corners of each pane generally pertain to managing the IDE panes
    themselves.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个窗格的角落中的控件通常用于管理IDE窗格本身。
- en: It can be fun to poke around and browse all the different things Android Studio
    provides. To learn more, click on the **Help** | **Help Topics** menu items (or
    the **?** icon on the toolbar) to open the IntelliJ IDEA help documentation ([https://www.jetbrains.com/idea/help/intellij-idea.html](https://www.jetbrains.com/idea/help/intellij-idea.html)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览一下Android Studio提供的各种不同功能会很有趣。要了解更多，请单击**帮助** | **帮助主题**菜单项（或工具栏上的**?**图标）以打开IntelliJ
    IDEA帮助文档（[https://www.jetbrains.com/idea/help/intellij-idea.html](https://www.jetbrains.com/idea/help/intellij-idea.html)）。
- en: Keep in mind that Android Studio is built on top of the IntelliJ IDE, which
    can be used for more than just the Android development. So, there's a lot here;
    some of which you'll never use; others you'll need but might have to hunt for.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Android Studio是建立在IntelliJ IDE之上的，它不仅可以用于Android开发。因此，这里有很多功能；有些您可能永远不会使用；其他一些您可能需要，但可能需要搜索。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Here''s a bit of advice: with great power comes great responsibility (*where
    have I heard this before?*). Actually, with so many user interface things, a little
    tunnel vision will come in handy (*yeah, I just made that one up*). Focus on the
    ones you need to use when you need to use them, and don''t sweat the other details.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个建议：伴随着强大的力量而来的是巨大的责任（我以前在哪里听过这句话？）。实际上，对于如此多的用户界面功能，一点点的专注会很有用（是的，我刚刚编造了这句话）。当您需要使用时，专注于您需要使用的功能，不要为其他细节而烦恼。
- en: 'Before we move on, let''s take a glance at the main menu bar. It looks like
    the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们来看一下主菜单栏。它看起来像下面的截图：
- en: '![The Android Studio user interface](img/B05144_02_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio用户界面](img/B05144_02_05.jpg)'
- en: 'Reading from left to right, the menu items are organized somewhat parallel
    to your application development process itself: create, edit, refactor, build,
    debug, and manage.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右阅读，菜单项的组织方式与应用程序开发过程本身有些类似：创建、编辑、重构、构建、调试和管理。
- en: '**File**: These are project files and settings'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：这些是项目文件和设置'
- en: '**Edit**: This includes the cut, copy, paste, and macros options, and so on'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑**：这包括剪切、复制、粘贴和宏选项等'
- en: '**View**: This allows us to view windows, toolbars, and UI modes'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这允许我们查看窗口、工具栏和UI模式'
- en: '**Navigate**: This refers to content-based navigation between files'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航**：这指的是基于内容的文件之间的导航'
- en: '**Code**: These are code editing shortcuts'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**：这些是代码编辑的快捷方式'
- en: '**Analyze**: This is used to inspect and analyze code for errors and inefficiencies'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：这用于检查和分析代码中的错误和低效。'
- en: '**Refactor**: This is used to edit code across semantically related files'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：用于跨语义相关文件编辑代码'
- en: '**Build**: This builds the project'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：构建项目'
- en: '**Run**: This is used to run and debug'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：用于运行和调试'
- en: '**Tools**: This is an interface with external and third-party tools'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：这是与外部和第三方工具进行交互的界面。'
- en: '**VCS**: The refers to version-control (that is, `git`) commands'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VCS**：指的是版本控制（即`git`）命令'
- en: '**Window**: This manages the IDE user interface'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**窗口**：管理IDE用户界面'
- en: '**Help**: This includes documentation and help links'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助**：包括文档和帮助链接'
- en: There now, was that so scary?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是不是很可怕？
- en: If you haven't already, you might want to try and build the Cardboard Android
    demo app available from the Google Developers website's Android SDK Getting Started
    page (refer to [https://developers.google.com/cardboard/android/get-started](https://developers.google.com/cardboard/android/get-started)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，您可能希望尝试构建来自Google Developers网站Android SDK入门页面的Cardboard Android演示应用程序（参考[https://developers.google.com/cardboard/android/get-started](https://developers.google.com/cardboard/android/get-started)）。
- en: At the time of writing this book, the demo app is called **Treasure Hunt**,
    and there are instructions on how to clone the project from its GitHub repository.
    Just clone it, open it in Android Studio, then click on the green play button
    to build it, and run it. The rest of the **Getting Started** page walks you through
    the code that explains the key elements.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，演示应用程序称为**寻宝**，并且有关如何从其GitHub存储库克隆项目的说明。只需克隆它，打开Android Studio，然后点击绿色播放按钮进行构建和运行。**入门**页面的其余部分将引导您了解解释关键元素的代码。
- en: '*Cool!* In the next chapter, we will start and rebuild pretty much the same
    project but from scratch.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！在下一章中，我们将从头开始并重建几乎相同的项目。
- en: Creating a new Cardboard project
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Cardboard项目
- en: 'With Android Studio installed, let''s create a new project. These are the steps
    you''ll follow for any of the projects in this book. We''ll just make an empty
    skeleton and make sure that it can be built and run:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Android Studio后，让我们创建一个新项目。这是本书中任何项目都会遵循的步骤。我们只需创建一个空的框架，并确保它可以构建和运行：
- en: After opening the IDE, you'll see a **Welcome** screen, as shown in the following
    screenshot:![Creating a new Cardboard project](img/B05144_02_06.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开IDE后，您将看到一个**欢迎**屏幕，如下图所示：![创建一个新的Cardboard项目](img/B05144_02_06.jpg)
- en: Select **Start a new Android Studio project**, and the **New Project** screen
    appears, as follows:![Creating a new Cardboard project](img/B05144_02_07.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开始一个新的Android Studio项目**，然后会出现**新项目**屏幕，如下所示：![创建一个新的Cardboard项目](img/B05144_02_07.jpg)
- en: Fill in your **Application name:**, such as `Skeleton`, and your **Company Domain:**,
    for example, `cardbookvr.com`. You can also change the **Project location**. Then,
    click on **Next**:![Creating a new Cardboard project](img/B05144_02_08.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写您的**应用程序名称**，例如`Skeleton`，和您的**公司域**，例如`cardbookvr.com`。您还可以更改**项目位置**。然后，点击“下一步”：![创建一个新的Cardboard项目](img/B05144_02_08.jpg)
- en: 'On the **Target Android Devices** screen, ensure that the **Phone and Tablet**
    checkbox is checked. In the **Minimum SDK**, select **API 19: Android 4.4 (KitKat)**.
    Then, click on **Next**:![Creating a new Cardboard project](img/B05144_02_09.jpg)'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“目标Android设备”屏幕上，确保“手机和平板电脑”复选框已选中。在“最低SDK”中，选择“API 19：Android 4.4（KitKat）”。然后，点击“下一步”：![创建一个新的Cardboard项目](img/B05144_02_09.jpg)
- en: On the **Add an activity to Mobile** screen, select **Empty Activity**. We're
    going to build this project from scratch. Then, click on **Next**:![Creating a
    new Cardboard project](img/B05144_02_10.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“为移动添加活动”屏幕上，选择“空活动”。我们将从头开始构建这个项目。然后，点击“下一步”：![创建一个新的Cardboard项目](img/B05144_02_10.jpg)
- en: Keep the suggested name, `MainActivity`. Then, click on **Finish**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留建议的名称`MainActivity`。然后，点击“完成”。
- en: Your brand new project comes up on Studio. If required, press *Alt* + *1* to
    open the **Project View** (*Command* + *1* on the Mac).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您全新的项目将在Studio上显示。如果需要，按*Alt* + *1*打开**项目视图**（Mac上为*Command* + *1*）。
- en: Adding the Cardboard Java SDK
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Cardboard Java SDK
- en: 'Now''s a good time to add the Cardboard SDK library `.aar` files to your project.
    For the basic projects in this book the libraries you need (at the time of writing
    v0.7) are:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是将Cardboard SDK库`.aar`文件添加到您的项目中的好时机。在本书的基本项目中，您需要的库（撰写时为v0.7）是：
- en: '`common.aar`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common.aar`'
- en: '`core.aar`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core.aar`'
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note the SDK includes additional libraries that we do not use in the projects
    in this book but could be useful for your projects. The `audio.aar` file is for
    spatialized audio support. The `panowidget` and `videowidget` libraries are meant
    for 2D apps that want to drop-into VR for things such as viewing a 360-degree
    image or video.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，SDK包括我们在本书中未使用但对您的项目可能有用的其他库。`audio.aar`文件用于支持空间音频。`panowidget`和`videowidget`库用于希望进入VR的2D应用程序，例如查看360度图像或视频。
- en: 'At the time of writing, to obtain the Cardboard Android SDK client libraries,
    you can clone the `cardboard-java` GitHub repository, as explained on the Google
    Developers Cardboard Getting Started page, **Start your own project** topic at
    [https://developers.google.com/cardboard/android/get-started#start_your_own_project](https://developers.google.com/cardboard/android/get-started#start_your_own_project).
    Clone the `cardboard-java` GitHub repository by running the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，要获取Cardboard Android SDK客户端库，您可以克隆`cardboard-java` GitHub存储库，如Google
    Developers Cardboard入门页面上所述的那样，[https://developers.google.com/cardboard/android/get-started#start_your_own_project](https://developers.google.com/cardboard/android/get-started#start_your_own_project)上的**开始您自己的项目**主题。通过运行以下命令克隆`cardboard-java`
    GitHub存储库：
- en: '[PRE0]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To use the exact commit with the same SDK version 0.7 we''re using here, `checkout`
    the commit:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用与此处使用的相同SDK版本0.7的确切提交，`checkout`提交：
- en: '[PRE1]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Alternatively, the SDK 0.7 library files are included with each of the download
    projects `.zip` files from Packt Publishing, and on this book's GitHub projects
    at [https://github.com/cardbookvr](https://github.com/cardbookvr).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，SDK 0.7库文件包含在Packt Publishing的每个下载项目的`.zip`文件中，并且在本书的GitHub项目中[https://github.com/cardbookvr](https://github.com/cardbookvr)。
- en: 'Once you have local copies of the libraries, be sure to locate them on your
    filesystem. To add the libraries to our project, take the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在本地拥有库的副本，请确保在文件系统中找到它们。要将库添加到我们的项目中，请执行以下步骤：
- en: For each of the required libraries, create new modules. In Android Studio, select
    **File** | **New** | **New Module…**. Select **Import .JAR/.AAR Package**:![Adding
    the Cardboard Java SDK](img/B05144_02_14.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于所需的每个库，创建新模块。在Android Studio中，选择**文件**|**新建**|**新模块...**。选择**导入.JAR/.AAR包**：![添加Cardboard
    Java SDK](img/B05144_02_14.jpg)
- en: Locate one of the AARs and import it.![Adding the Cardboard Java SDK](img/B05144_02_15.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到其中一个AAR并导入它。![添加Cardboard Java SDK](img/B05144_02_15.jpg)
- en: Add the new modules as dependencies to your main app by navigating to **File**
    | **Project** **Structure** | **Modules** (on the left hand side) | **app** (your
    app name) | **Dependencies** | **+** | **Module Dependency**:![Adding the Cardboard
    Java SDK](img/B05144_02_16.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**文件**|**项目****结构**|**模块**（在左侧）|**应用程序**（您的应用程序名称）|**依赖项**|**+**|**模块依赖项**，将新模块作为主应用程序的依赖项添加进去：![添加Cardboard
    Java SDK](img/B05144_02_16.jpg)
- en: Now we can use the Cardboard SDK in our app.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在我们的应用程序中使用Cardboard SDK。
- en: The AndroidManifest.xml file
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AndroidManifest.xml文件
- en: The new empty app includes a handful of default files, including the `manifests/AndroidManifest.xml`
    file (this is if you have the **Android** view activated. In the **Project** view,
    it is in `app/src/main`). Every application must have an `AndroidManifest.xml`
    file in its manifest directory that tells the Android system what it needs in
    order to run the app's code, along with other metadata.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 新的空应用程序包括一些默认文件，包括`manifests/AndroidManifest.xml`文件（如果您已激活**Android**视图。在**Project**视图中，它在`app/src/main`）。每个应用程序必须在其清单目录中有一个`AndroidManifest.xml`文件，告诉Android系统运行应用程序代码所需的内容，以及其他元数据。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information on this can be found at [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此信息的更多信息，请访问[http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html)。
- en: 'Let''s set this up first. Open your `AndroidManifest.xml` file in the editor.
    Modify it to read it as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先设置这个。在编辑器中打开您的`AndroidManifest.xml`文件。修改它以读取如下内容：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The package name show in the preceding listing, `package="com.cardbookvr.skeleton"`,
    may be different for your project. The `<uses-permission>` tag indicates that
    the project may be using the NFC sensor, which the Cardboard SDK can use to detect
    the smartphone that has been inserted into a Cardboard viewer device. The Internet
    and read/write storage permissions are needed for the SDK to download, read, and
    write the configure setup options. We will need to do a little more work in order
    to handle permissions properly, but that happens in another file, which we will
    discuss later.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的清单中显示的软件包名称`package="com.cardbookvr.skeleton"`可能与您的项目不同。`<uses-permission>`标签表示项目可能正在使用NFC传感器，Cardboard
    SDK可以使用该传感器来检测已插入Cardboard查看器设备的智能手机。互联网和读/写存储权限是SDK下载、读取和写入配置设置选项所需的。我们需要做更多工作来正确处理权限，但这将在另一个文件中进行讨论。
- en: The `<uses-feature>` tag specifies that we'll be using the OpenGL ES 2.0 graphics
    processing library ([http://developer.android.com/guide/topics/graphics/opengl.html](http://developer.android.com/guide/topics/graphics/opengl.html)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`<uses-feature>`标签指定我们将使用OpenGL ES 2.0图形处理库（[http://developer.android.com/guide/topics/graphics/opengl.html](http://developer.android.com/guide/topics/graphics/opengl.html)）。'
- en: It's also strongly recommended that you include the accelerometer and gyroscope
    sensor `uses-feature` tags. Too many users have phones lacking one or both of
    these sensors. When the app fails to track their head motions correctly, they
    may think that the app is to blame rather than their phone. Within the `<application>`
    tag (the default attributes of which were generated when we created the file),
    there's an `<activity>` definition named `.MainActivity` and screen settings.
    Here, we specify the `android:screenOrientation` attribute as our Cardboard app
    uses the normal (left) landscape orientation. We also specify `android:configChanges`
    that the activity will handle itself.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 还强烈建议包括加速计和陀螺仪传感器`uses-feature`标签。太多用户的手机缺少这两个传感器中的一个或两个。当应用程序无法正确跟踪他们的头部运动时，他们可能会认为是应用程序的问题而不是他们的手机的问题。在`<application>`标签（在创建文件时生成的默认属性）中，有一个名为`.MainActivity`的`<activity>`定义和屏幕设置。在这里，我们将`android:screenOrientation`属性指定为我们的Cardboard应用程序使用正常（左）横向方向。我们还指定`android:configChanges`，表示活动将自行处理。
- en: These and other attribute settings may vary based on your application's requirements.
    For example, using `android:screenOrientation="sensorLandscape"` instead will
    allow either normal or reverse landscape orientations based on the phone's sensor
    (and trigger the `onSurfaceChanged` callback when the screen flips).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这些和其他属性设置可能会根据您的应用程序要求而变化。例如，使用`android:screenOrientation="sensorLandscape"`将允许基于手机传感器的正常或反向横向方向（并在屏幕翻转时触发`onSurfaceChanged`回调）。
- en: We specify our *intent* metadata in the `<intent-filter>` tag. In Android, an
    **intent** is a messaging object used to facilitate communication between applications'
    components. It can also be used to query the apps that are installed and match
    certain intent filters, as defined in the app's manifest file. For example, an
    app that wants to take a picture will broadcast an intent with the `ACTION_IMAGE_CAPTURE`
    action filter. The OS will respond with a list of apps installed which contain
    activities that can respond to such an action.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`<intent-filter>`标签中指定了我们的*intent*元数据。在Android中，**intent**是一种消息对象，用于促进应用程序组件之间的通信。它还可以用于查询已安装的应用程序并匹配某些意图过滤器，如在应用程序清单文件中定义的那样。例如，想要拍照的应用程序将广播一个带有`ACTION_IMAGE_CAPTURE`动作过滤器的意图。操作系统将响应一个包含可以响应此类动作的活动的已安装应用程序列表。
- en: Having defined the `MainActivity` class, we'll specify that it can respond to
    the standard `MAIN` action and match the `LAUNCHER` category. `MAIN` means that
    this activity is the entry point of the application; that is, when you launch
    the app, this activity is created. `LAUNCHER` means that the app should appear
    in the home screen's launcher as a top-level application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`MainActivity`类之后，我们将指定它可以响应标准的`MAIN`动作并匹配`LAUNCHER`类别。`MAIN`表示此活动是应用程序的入口点；也就是说，当您启动应用程序时，将创建此活动。`LAUNCHER`表示应用程序应该出现在主屏幕的启动器中，作为顶级应用程序。
- en: We've added an intent so that this activity will also match the `CARDBOARD`
    category because we want the other apps to see this as a Cardboard app!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个意图，以便此活动也匹配`CARDBOARD`类别，因为我们希望其他应用程序将其视为Cardboard应用程序！
- en: Google made major changes to the permissions system in Android 6.0 Marshmallow
    (API 23). While you still must include the permissions you want within the `AndroidManifest.xml`
    file, you must now also call a special API function to request permissions at
    runtime. There are a variety of reasons for this, but the idea is to give the
    user finer control of app permissions, and avoid having to ask for a long list
    of permissions during install and at runtime. This new feature also allows users
    to selectively revoke permissions after they have been granted. This is great
    for the user, but unfortunate for us app developers, as it means that we need
    to do significantly more work when we need access to these protected features.
    Essentially, you need to introduce a step which checks if a particular permission
    is granted, and prompts the user if it is not. Once the user grants permission,
    a callback method is called, and you are free to do whatever it was that needed
    permission. Alternatively, if the permission was granted the whole time, you can
    proceed to use the restricted feature.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Google在Android 6.0 Marshmallow（API 23）中对权限系统进行了重大更改。虽然您仍然必须在`AndroidManifest.xml`文件中包含您想要的权限，但现在您还必须调用一个特殊的API函数来在运行时请求权限。这样做有很多原因，但其想法是给用户更精细的控制应用程序权限，并避免在安装和运行时请求长列表的权限。这一新功能还允许用户在授予权限后有选择地撤销权限。这对用户来说很好，但对我们应用程序开发人员来说很不幸，因为这意味着当我们需要访问这些受保护的功能时，我们需要做更多的工作。基本上，您需要引入一个步骤来检查特定权限是否已被授予，并在没有授予时提示用户。一旦用户授予权限，将调用回调方法，然后您可以自由地执行需要权限的任何操作。或者，如果权限一直被授予，您可以继续使用受限功能。
- en: At the time of writing, our project code and the current version of the Cardboard
    SDK do not implement this new permission system. Instead, we will force Android
    Studio to build our projects against an older version of the SDK (API 22) so that
    we side-step the new features. It is possible that, in the future, Android might
    break backwards compatibility with the old permissions system. However, you can
    read a very clear guide on how to use the new permissions system in the Android
    documentation (refer to [http://developer.android.com/training/permissions/requesting.html](http://developer.android.com/training/permissions/requesting.html)).
    We hope to address this, and any future issues in the online GitHub repositories,
    but bear in mind that the code in the text, and the provided zip files, may not
    work on the newest version of Android. Such is the nature of software maintenance.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，我们的项目代码和当前版本的Cardboard SDK尚未实现这个新的权限系统。相反，我们将强制Android Studio针对较旧版本的SDK（API
    22）构建我们的项目，以便我们绕过新功能。未来，Android可能会破坏与旧权限系统的向后兼容性。但是，您可以在Android文档中阅读有关如何使用新权限系统的非常清晰的指南（参见[http://developer.android.com/training/permissions/requesting.html](http://developer.android.com/training/permissions/requesting.html)）。我们希望在在线GitHub存储库中解决这个问题和任何未来问题，但请记住，文本中的代码和提供的zip文件可能无法在最新版本的Android上运行。这就是软件维护的性质。
- en: 'Let''s apply that workaround to build against version 22 of the SDK. Odds are
    that you just installed Android Studio 2.1 or above, which comes with SDK 23 or
    above. Whenever you create a new project, Android Studio does ask what minimum
    SDK you would like to target, but does not let you choose the SDK used for compilation.
    That''s OK, because we can manually set this in the `build.gradle` file. Don''t
    be afraid; the build toolset is big and scary, but we''re only tweaking the project
    settings a little bit. Bear in mind that there are a couple of `build.gradle`
    files in your project. Each one will be within its corresponding module folder
    on the filesystem, and will be labeled accordingly within the Gradle scripts section
    of the Android flavor of the project view. Were looking to change `build.gradle`
    for the `app` module. Modify it to look like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个解决方法应用到针对SDK版本22的构建中。很可能您刚刚安装了Android Studio 2.1或更高版本，其中包含SDK 23或更高版本。每当您创建一个新项目时，Android
    Studio确实会询问您想要针对哪个最低SDK版本，但不会让您选择用于编译的SDK。这没关系，因为我们可以在`build.gradle`文件中手动设置这一点。不要害怕；构建工具集很庞大且复杂，但我们只是稍微调整了项目设置。请记住，您的项目中有几个`build.gradle`文件。每个文件都将位于文件系统中相应的模块文件夹中，并且将在项目视图的Gradle脚本部分中相应地标记。我们要修改`app`模块的`build.gradle`。将其修改为如下所示：
- en: '[PRE3]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The important changes are to compileSdkVersion, minSdkVersion, targetSdkVersion,
    and that last one in dependencies, where we changed the version of the support
    repository we are linking to. Technically, we could eliminate this dependency
    entirely, but the project template includes a bunch of references to it, which
    are a pain to remove. However, if we leave the default setting, Gradle will most
    likely yell at us about mismatching versions. Once you've made these changes,
    there should be a yellow bar at the top of the editor with a link that says **Sync
    now**. Sync now. If you're lucky, the Gradle sync will finish successfully, and
    you can go on your merry way. If not, you might be missing the SDK platform or
    other dependencies. The **Messages** window should have clickable links to install
    and update the Android system appropriately. If you hit an error, try restarting
    Android Studio.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的更改是compileSdkVersion、minSdkVersion、targetSdkVersion以及依赖项中的最后一个，在那里我们更改了我们链接到的支持存储库的版本。从技术上讲，我们可以完全消除这种依赖关系，但项目模板包括了一堆对它的引用，这些引用很难删除。然而，如果我们保留默认设置，Gradle很可能会因为版本不匹配而向我们抱怨。一旦您进行了这些更改，编辑器顶部应该会出现一个黄色的条，上面有一个写着**立即同步**的链接。立即同步。如果幸运的话，Gradle同步将成功完成，您就可以继续愉快地进行下去了。如果不幸的话，您可能会缺少SDK平台或其他依赖项。**消息**窗口应该有可点击的链接，可以适当地安装和更新Android系统。如果遇到错误，请尝试重新启动Android
    Studio。
- en: From this point on, you might want to avoid updating Android Studio or your
    SDK platform versions. Pay special attention to what happens when you import your
    project on another computer or after updates to Android Studio. You will likely
    need to let the IDE manipulate your Gradle files, and it may modify your compile
    version. This permissions issue is sneaky, in that it will only reveal itself
    at runtime on phones running 6.0 and above. Your app may appear to work just fine
    on a device running an older version of Android, but actually run into trouble
    on newer devices.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，您可能希望避免更新Android Studio或您的SDK平台版本。特别注意当您在另一台计算机上导入项目或在更新Android Studio后发生的情况。您可能需要让IDE操作您的Gradle文件，并且它可能会修改您的编译版本。这个权限问题很隐蔽，它只会在运行时在运行6.0及以上版本的手机上显露出来。您的应用程序可能在运行旧版本的Android的设备上看起来运行良好，但实际上在新设备上可能会遇到麻烦。
- en: The activity_main.xml file
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: activity_main.xml文件
- en: Our app needs a layout where we'll define a canvas to paint our graphics. The
    new project created by Android Studio makes a default layout file in the `app/res/layout/`
    folder (using the Android view or `app/src/main/res/layout` using the **Project**
    view). Find the `activity_main.xml` file and double-click on it to edit it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序需要一个布局，我们将在其中定义一个画布来绘制我们的图形。Android Studio创建的新项目在`app/res/layout/`文件夹中创建了一个默认的布局文件（使用Android视图或`app/src/main/res/layout`使用**项目**视图）。找到`activity_main.xml`文件并双击打开进行编辑。
- en: 'There are two views of a layout file in the Android Studio editor: **Design**
    versus **Text**, selected by tabs on the lower-left hand side of the window pane.
    If the **Design** view tab is selected, you''ll see an interactive editor with
    a simulated smartphone image, a palette of UI components on the left-hand side,
    and a **Properties** editor on the right-hand side. We''re not going to use this
    view. If necessary, select the **Text** tab at the bottom of the `activity_main.xml`
    editor pane to use text mode.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio编辑器中，布局文件有两种视图：**设计**和**文本**，通过窗格左下角的选项卡进行选择。如果选择了**设计**视图选项卡，您将看到一个交互式编辑器，其中包括一个模拟的智能手机图像，左侧是UI组件的调色板，右侧是**属性**编辑器。我们不会使用这个视图。如果需要，选择`activity_main.xml`编辑窗格底部的**文本**选项卡以使用文本模式。
- en: 'Cardboard apps should run on the full screen, so we remove any padding. We
    will also remove the default `TextView` that we''re not going to use. Instead,
    we replace it with a `CardboardView`, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Cardboard应用程序应该在全屏上运行，因此我们会删除任何填充。我们还将删除默认的我们不打算使用的`TextView`。而是用`CardboardView`来替换它，如下所示：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `AndroidManifest.xml` file references the main activity named `MainActivity`.
    Let's take a look at that now.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`文件引用了名为`MainActivity`的主要活动。现在让我们来看看。'
- en: The MainActivity class
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MainActivity类
- en: The default project generated with `Empty Activity` also created a default `MainActivity.java`
    file. In the hierarchy pane, locate the `app/java/` directory that contains a
    subdirectory named `com.cardbookvr.skeleton`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Empty Activity`生成的默认项目还创建了一个默认的`MainActivity.java`文件。在层次结构窗格中，找到包含名为`com.cardbookvr.skeleton`的子目录的`app/java/`目录。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note, this is different than the `androidTest` version of the directory, we're
    not using that one! (Your name may vary based on the actual project and domain
    names given when you created the project.)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与`androidTest`版本的目录不同，我们不使用那个！（根据您创建项目时给定的实际项目和域名，您的名称可能会有所不同。）
- en: 'In this folder, double-click on the `MainActivity.java` file to open it for
    editing. The default file looks like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件夹中，双击`MainActivity.java`文件以进行编辑。默认文件如下所示：
- en: '[PRE5]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first thing you should notice is the extends `AppCompatActivity` class
    (or `ActionBarActivity`) for the built-in Android action bar. We do not need this.
    We will rather define the activity to the extends `CardboardActivity` and implements
    the `CardboardView.StereoRenderer` interfaces. Modify the class declaration line
    of code, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意到的第一件事是扩展`AppCompatActivity`类（或`ActionBarActivity`）以使用内置的Android操作栏。我们不需要这个。我们将把活动定义为扩展`CardboardActivity`并实现`CardboardView.StereoRenderer`接口。修改代码中的类声明行，如下所示：
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As this is a Google Cardboard application, we need to define the `MainActivity`
    class as a child class of the `CardboardActivity` class given by the SDK. We do
    this using the `extends` keyword.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个Google Cardboard应用程序，我们需要将`MainActivity`类定义为SDK提供的`CardboardActivity`类的子类。我们使用`extends`关键字来实现这一点。
- en: '`MainActivity` needs to also implement, at a minimum, the stereo renderer interface
    defined as `CardboardView.StereoRender`. We do this using the `implements` keyword.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivity`还需要实现至少一个被定义为`CardboardView.StereoRender`的立体渲染器接口。我们使用`implements`关键字来实现这一点。'
- en: One of the nice things about Android Studio is how it does work for you as you
    write the code. When you enter `extends CardboardActivity`, the IDE automatically
    adds an `import` statement for the `CardboardActivity` class at the top of the
    file. When you enter `implements CardboardView.StereoRenderer`, it adds an `import`
    statement to the `CardboardView` class.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio的一个好处是在编写代码时为你自动完成工作。当你输入`extends CardboardActivity`时，IDE会自动在文件顶部添加`CardboardActivity`类的`import`语句。当你输入`implements
    CardboardView.StereoRenderer`时，它会添加一个`import`语句到`CardboardView`类。
- en: As we continue to add code, Android Studio will identify when we need additional
    import statements and automatically add them for us. Therefore, I won't bother
    to show you the `import` statements in the code that follows. On occasion it may
    find the wrong one when, for example, there's multiple `Camera` or `Matrix` classes
    among your libraries, and you'll need to resolve it to the correct reference.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续添加代码，Android Studio将识别出我们需要额外的导入语句，并自动为我们添加它们。因此，我不会在接下来的代码中显示`import`语句。偶尔它可能会找到错误的引用，例如，在你的库中有多个`Camera`或`Matrix`类时，你需要将其解析为正确的引用。
- en: We'll now fill in the body of the `MainActivity` class with stubs for the functions
    that we're going to need. The `CardboardView.StereoRenderer` interface that we're
    using defines a number of abstract methods that we can override, as documented
    in the Android API Reference for the interface (refer to [https://developers.google.com/cardboard/android/latest/reference/com/google/vrtoolkit/cardboard/CardboardView.StereoRenderer](https://developers.google.com/cardboard/android/latest/reference/com/google/vrtoolkit/cardboard/CardboardView.StereoRenderer)).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将用一些函数存根填充`MainActivity`类的主体，这些函数是我们将需要的。我们使用的`CardboardView.StereoRenderer`接口定义了许多抽象方法，我们可以重写这些方法，如Android
    API参考中对该接口的文档所述（参见[https://developers.google.com/cardboard/android/latest/reference/com/google/vrtoolkit/cardboard/CardboardView.StereoRenderer](https://developers.google.com/cardboard/android/latest/reference/com/google/vrtoolkit/cardboard/CardboardView.StereoRenderer)）。
- en: 'This is quickly accomplished in Studio in a number of ways. Either use the
    intellisense context menu (the light bulb icon) or go to **Code** | **Implement
    Methods…** (or *Ctrl* + *I*). By placing your cursor at the red error underline
    and pressing *Alt* + *Enter*, you will also be able to accomplish the same goal.
    Do it now. You will be asked to confirm the methods to implement, as shown in
    the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Studio中可以通过多种方式快速完成。可以使用智能感知上下文菜单（灯泡图标）或转到**代码** | **实现方法…**（或*Ctrl* + *I*）。将光标放在红色错误下划线处，按*Alt*
    + *Enter*，你也可以达到同样的目标。现在就做吧。系统会要求你确认要实现的方法，如下面的截图所示：
- en: '![The MainActivity class](img/B05144_02_12.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![MainActivity类](img/B05144_02_12.jpg)'
- en: Ensure that all are selected and click on **OK**.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 确保所有都被选中，然后点击**确定**。
- en: 'Stubs for the following methods will be added to the `MainActivity` class:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法的存根将被添加到`MainActivity`类中：
- en: '`onSurfaceCreated`: This is called when the surface is created or recreated.
    It should create buffers and variables needed to display graphics.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSurfaceCreated`：在表面被创建或重新创建时调用此方法。它应该创建需要显示图形的缓冲区和变量。'
- en: '`onNewFrame`: This is called when a new frame is about to be drawn. It should
    update the application data that changes from one frame to the next, such as animations.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onNewFrame`：在准备绘制新帧时调用此方法。它应该更新从一个帧到下一个帧变化的应用程序数据，比如动画。'
- en: '`onDrawEye`: This renders the scene for one eye for the current camera viewpoint
    (called twice per frame, unless you have three eyes!).'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDrawEye`：为当前相机视点渲染一个眼睛的场景（每帧调用两次，除非你有三只眼睛！）。'
- en: '`onFinishFrame`: This is called before a frame is finished.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFinishFrame`：在帧完成之前调用此方法。'
- en: '`onRenderShutdown`: This is called when the renderer thread is shutting down
    (rarely used).'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRenderShutdown`：当渲染器线程关闭时调用此方法（很少使用）。'
- en: '`onSurfaceChanged`: This is called when there is a change in the surface dimensions
    (for example, when a portrait/landscape rotation is detected).'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onSurfaceChanged`：当表面尺寸发生变化时（例如检测到纵向/横向旋转）调用此方法。'
- en: I've listed these methods in an order that mirrors the life cycle of a Cardboard
    Android application.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我按照Cardboard Android应用程序的生命周期顺序列出了这些方法。
- en: The `@Override` directive means that these functions are originally defined
    in the `CardboardView.StereoRenderer` interface and we're replacing (overriding)
    them in our `MainActivity` class here.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Override`指令表示这些函数最初是在`CardboardView.StereoRenderer`接口中定义的，我们在这里的`MainActivity`类中替换（覆盖）它们。'
- en: Default onCreate
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认的`onCreate`
- en: All Android activities expose an `onCreate()` method that is called when the
    activity is first created. This is where you should do all your normal static
    setups and bindings. The stereo renderer interface and Cardboard activity class
    are the foundations of the Cardboard SDK.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android活动都公开一个`onCreate()`方法，在活动第一次创建时调用。这是你应该做所有正常的静态设置和绑定的地方。立体渲染器接口和Cardboard活动类是Cardboard
    SDK的基础。
- en: The default `onCreate` method makes a standard `onCreate` call to the parent
    activity. Then, it registers the `activity_main` layout as the current content
    view.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`onCreate`方法对父活动进行了标准的`onCreate`调用。然后，它将`activity_main`布局注册为当前内容视图。
- en: 'Edit `onCreate()` by adding the `CardboadView` instance, as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`CardboadView`实例来编辑`onCreate()`，如下所示：
- en: '[PRE7]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To set up the `CardboardView` instance for the app, we get its instance by looking
    it up by the resource ID given in `activity_main.xml` and then set it up with
    a couple of function calls.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置应用程序的`CardboardView`实例，我们通过在`activity_main.xml`中给定的资源ID查找其实例，然后使用一些函数调用设置它。
- en: This object is going to do the stereoscopic rendering to the display, so we
    call `setRenderer(this)` to specify it as the receiver of the `StereoRenderer`
    interface methods.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象将对显示进行立体渲染，所以我们调用`setRenderer(this)`来指定它作为`StereoRenderer`接口方法的接收者。
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that your activity doesn't have to implement the interface. You can have
    any class define these methods, such as an abstracted renderer as we'll see later
    in this book.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的活动不必实现该接口。您可以让任何类定义这些方法，比如我们将在本书后面看到的抽象渲染器。
- en: Then we associate the `CardboardView` class with this activity by calling `setCardboardView(cardboardView)`
    so that we'll be able to receive any required life cycle notifications, including
    the `StereoRenderer` interface methods, such as `onSurfaceCreated` and `onDrawEye`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们通过调用`setCardboardView(cardboardView)`将`CardboardView`类与这个活动关联起来，这样我们就能接收到任何必需的生命周期通知，包括`StereoRenderer`接口方法，比如`onSurfaceCreated`和`onDrawEye`。
- en: Building and running
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和运行
- en: 'Let''s build and run it:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建并运行它：
- en: Go to **Run** | **Run 'app'**, or simply use the green-triangle **Run** icon
    on the toolbar.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**Run** | **Run 'app'**，或者简单地使用工具栏上的绿色三角形**Run**图标。
- en: If you've made changes, Gradle will do its build thing.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您进行了更改，Gradle将进行构建。
- en: Select the **Gradle Console** tab at the bottom of the Android Studio window
    to view the Gradle build messages. Then, assuming that all goes well, the APK
    will be installed on your connected phone (it's connected and turned on, right?).
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Android Studio窗口底部的**Gradle Console**选项卡以查看Gradle构建消息。然后，假设一切顺利，APK将安装在您连接的手机上（连接并打开了吗？）。
- en: Select the **Run** tab at the bottom to view the upload and launch messages.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择底部的**Run**选项卡以查看上传和启动消息。
- en: 'You shouldn''t get any build errors. But of course, the app doesn''t actually
    do anything or draw anything on the screen. Well, that''s not entirely true! The
    Cardboard SDK, via `CardboardView.StereoRenderer`, provides a stereoscopic split
    screen with a vertical line in between and a gear icon, as shown in the following
    screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您不应该收到任何构建错误。但当然，该应用实际上并没有做任何事情或在屏幕上绘制任何东西。嗯，这并不完全正确！通过`CardboardView.StereoRenderer`，Cardboard
    SDK提供了一个带有垂直线和齿轮图标的立体分屏，如下截图所示：
- en: '![Building and running](img/B05144_02_13.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![构建和运行](img/B05144_02_13.jpg)'
- en: The vertical line will be used to align your phone properly on the Cardboard
    viewer device.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直线将用于在Cardboard查看器设备上正确放置您的手机。
- en: The gear icon opens the standard configuration settings utility which includes
    the ability to scan a QR code to configure the SDK for the lenses and other physical
    attributes of your specific device (as explained in [Chapter 1](ch01.html "Chapter 1. Virtual
    Reality for Everyone"), *Virtual Reality for Everyone*, in the *Configuring your
    Cardboard viewer* section).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 齿轮图标打开标准配置设置实用程序，其中包括扫描QR码以配置SDK以适应镜片和您特定设备的其他物理属性的功能（如[第1章](ch01.html "第1章。每个人的虚拟现实")中所解释的，“每个人的虚拟现实”，在“配置Cardboard查看器”部分）。
- en: Now, we've built a skeleton Google Cardboard app for Android. You'll follow
    similar steps to start each project in this book.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为Android构建了一个Google Cardboard应用的框架。您将遵循类似的步骤来启动本书中的每个项目。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we examined the structure of a Cardboard app for Android and
    many of the files involved, including the Java source code, XML manifest, `.aar`
    libraries, and final built APK, which runs on your Android device. We installed
    and took a brief tour of the Android Studio development environment. Then, we
    walked you through the steps to create a new Android project, add the Cardboard
    Java SDK, and define the `AndroidManifest.xml` file and layout, as well as a stubbed
    `MainActivity` Java class file. You will follow similar steps to start each Cardboard
    project in this book.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了Android上Cardboard应用的结构以及涉及的许多文件，包括Java源代码、XML清单、`.aar`库和最终构建的APK，该APK在您的Android设备上运行。我们安装并简要介绍了Android
    Studio开发环境。然后，我们将引导您完成创建新的Android项目、添加Cardboard Java SDK以及定义`AndroidManifest.xml`文件和布局，以及一个存根的`MainActivity`
    Java类文件的步骤。在本书中，您将遵循类似的步骤来启动每个Cardboard项目。
- en: In the next chapter, we will build a Google Cardboard project from scratch called
    `CardboardBox` with a scene containing some simple geometry (a triangle and a
    cube), 3D transformations, and shaders that render graphics to your Cardboard
    device.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从头开始构建一个名为`CardboardBox`的Google Cardboard项目，其中包含一些简单几何图形（三角形和立方体）、3D变换和渲染图形到您的Cardboard设备的着色器。
