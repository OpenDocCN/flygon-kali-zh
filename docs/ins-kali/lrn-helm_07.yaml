- en: '*Chapter 5*: Building Your First Helm Chart'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：构建您的第一个Helm图表'
- en: In the previous chapter, you learned about the various aspects that comprise
    a Helm chart. Now, it is time to put this knowledge to the test by building a
    Helm chart. Learning to build a Helm chart will allow you to package a complex
    Kubernetes application in a way that makes it simple to deploy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了组成Helm图表的各个方面。现在，是时候将这些知识付诸实践，构建一个Helm图表了。学会构建Helm图表将使您能够以简单的方式打包复杂的Kubernetes应用程序。
- en: In this chapter, you will learn how to build a Helm chart that deploys the `guestbook`
    application, a common quickstart application used throughout the Kubernetes community.
    This chart will be built by following best practices around Kubernetes and Helm
    chart development, to provide a well-written and easily maintainable piece of
    automation. Throughout the process of developing this chart, you will learn many
    different skills that you can apply toward building your own Helm charts. At the
    end of the chapter, you will learn how to package your Helm chart and deploy it
    to a chart repository, where it can be easily accessible to end users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何构建一个Helm图表，用于部署`guestbook`应用程序，这是Kubernetes社区中广泛使用的快速入门应用程序。通过遵循Kubernetes和Helm图表开发的最佳实践，构建此图表将提供一个编写良好且易于维护的自动化部分。在开发此图表的过程中，您将学习许多不同的技能，可以应用于构建自己的Helm图表。在本章结束时，您将学习如何打包您的Helm图表并将其部署到图表存储库，以便最终用户可以轻松访问。
- en: 'Here are the main topics covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要主题如下：
- en: Understanding the Guestbook application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Guestbook应用程序
- en: Creating a Guestbook Helm chart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Guestbook Helm图表
- en: Improving the Guestbook Helm chart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进Guestbook Helm图表
- en: Publishing the Guestbook chart to a chart repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Guestbook图表发布到图表存储库
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter requires the following technologies:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下技术：
- en: '`minikube`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube`'
- en: '`kubectl`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: '`helm`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: In addition to the preceding tooling, you will find the GitHub repository for
    this book located at [https://github.com/PacktPublishing/-Learn-Helm](https://github.com/PacktPublishing/-Learn-Helm).
    We will reference the `helm-charts/charts/guestbook` folder contained in this
    chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的工具之外，您还会发现本书的GitHub存储库位于[https://github.com/PacktPublishing/-Learn-Helm](https://github.com/PacktPublishing/-Learn-Helm)。我们将引用本章中包含的`helm-charts/charts/guestbook`文件夹。
- en: It is recommended that you have your own GitHub account in order to complete
    the final section of this chapter, *Creating a chart repository.* Instructions
    on how to create your own account will be provided in that section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您拥有自己的GitHub帐户，以便完成本章的最后一节*创建图表存储库*。有关如何创建您自己的帐户的说明将在该部分提供。
- en: Understanding the Guestbook application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Guestbook应用程序
- en: 'In this chapter, you will create a Helm chart to deploy the Guestbook tutorial
    application provided by the Kubernetes community. This application is introduced
    in the Kubernetes documentation at the following page[: https://kubernetes.io/docs/tutorials/stateless-application/guestboo](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)k/'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将创建一个Helm图表，用于部署Kubernetes社区提供的Guestbook教程应用程序。该应用程序在Kubernetes文档的以下页面中介绍：[https://kubernetes.io/docs/tutorials/stateless-application/guestbook/](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)
- en: 'The Guestbook application is a simple **PHP: Hypertext Preprocessor** (**PHP**)
    frontend designed to persist messages to a Redis backend. The frontend consists
    of a dialog box and a **Submit** button, as illustrated in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Guestbook应用程序是一个简单的**PHP：超文本预处理器**（**PHP**）前端，旨在将消息持久保存到Redis后端。前端包括对话框和**提交**按钮，如下截图所示：
- en: '![Figure 5.1: The Guestbook PHP frontend'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1：Guestbook PHP前端'
- en: '](image/Figure_5.1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.1.jpg)'
- en: 'Figure 5.1: The Guestbook PHP frontend'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：Guestbook PHP前端
- en: 'To interact with this application, users can follow these next steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以按照以下步骤与该应用程序进行交互：
- en: Type a message in the **Messages** dialog box.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**消息**对话框中输入一条消息。
- en: Click the **Submit** button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**提交**按钮。
- en: When the **Submit** button is clicked, the message will be saved to a Redis
    database.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当单击**提交**按钮时，消息将被保存到Redis数据库中。
- en: Redis is an in-memory, key-value data store that, in this chapter, will be clustered
    for data replication. The cluster will consist of one master node that the Guestbook
    frontend will write to. Once written to, the master node will replicate the data
    across multiple slave nodes, from which the Guestbook frontend will read.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是一个内存中的键值数据存储，本章中将被用于数据复制的集群。该集群将包括一个主节点，Guestbook前端将向其写入数据。一旦写入，主节点将在多个从节点之间复制数据，Guestbook前端将从中读取。
- en: 'The following diagram describes how the Guestbook frontend interacts with the
    Redis backend:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图描述了Guestbook前端与Redis后端的交互方式：
- en: '![Figure 5.2: Guestbook frontend and Redis interaction'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2：Guestbook前端和Redis交互'
- en: '](image/Figure_5.2.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.2.jpg)'
- en: 'Figure 5.2: Guestbook frontend and Redis interaction'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：Guestbook前端和Redis交互
- en: With a basic understanding of how the Guestbook frontend and Redis backend interact,
    let's set up a Kubernetes environment to begin developing a Helm chart. Before
    we begin, let's first start minikube and create a dedicated namespace for this
    chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在对Guestbook前端和Redis后端的交互有了基本了解之后，让我们设置一个Kubernetes环境来开始开发Helm图表。在开始之前，让我们首先启动minikube并为本章创建一个专用的命名空间。
- en: Setting up the environment
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'In order to see your chart in action, you''ll need to create your minikube
    environment by following these steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到您的图表运行情况，您需要按照以下步骤创建您的minikube环境：
- en: 'Start minikube by running the `minikube start` command, as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`minikube start`命令来启动minikube，如下所示：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new namespace called `chapter5,` like this:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter5`的新命名空间，如下所示：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We'll use this namespace when the Guestbook chart is deployed. Now that the
    environment is prepared, let's begin writing the chart.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署Guestbook图表时，我们将使用这个命名空间。现在环境已经准备好，让我们开始编写图表。
- en: Creating a Guestbook Helm chart
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Guestbook Helm图表
- en: In this section, we will create a Helm chart to deploy the Guestbook application.
    The final chart has been published under the `helm-charts/charts/guestbook` folder
    of the Packt repository. Feel free to reference this location as you follow along
    with the examples.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个Helm图表来部署Guestbook应用程序。最终的图表已经发布在Packt存储库的`helm-charts/charts/guestbook`文件夹下。随时参考这个位置，以便您可以跟随示例。
- en: We will begin development by first scaffolding the Guestbook Helm chart to create
    the chart's initial file structure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先搭建Guestbook Helm图表，以创建图表的初始文件结构。
- en: Scaffolding the initial file structure
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搭建初始文件结构
- en: 'As you may recall from [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203),
    *Understanding Helm Charts*, Helm charts must follow a particular file structure
    in order to be considered valid. Namely, a chart must contain the following required
    files:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能还记得的[*第4章*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203)，*理解Helm图表*，Helm图表必须遵循特定的文件结构才能被视为有效。换句话说，一个图表必须包含以下必需文件：
- en: '`Chart.yaml`: Used to define chart metadata'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`：用于定义图表元数据'
- en: '`values.yaml`: Used to define default chart values'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values.yaml`：用于定义默认图表值'
- en: '`templates/`: Used to define chart templates and Kubernetes resources to be
    created'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates/`：用于定义图表模板和要创建的Kubernetes资源'
- en: We provided a list of each of the possible files a chart can contain in [*Chapter
    4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203), *Understanding Helm Charts*,
    but the three preceding files are the files that are necessary in order to begin
    developing a new chart. While these three files can be created from scratch, Helm
    provides a `helm create` command that can be used to more quickly scaffold a new
    chart. In addition to creating the files listed previously, the `helm create`
    command will also generate many different boilerplate templates that can be leveraged
    to more quickly write your Helm chart. Let's use this command to scaffold out
    a new Helm chart called `guestbook`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第4章*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203)，*理解Helm图表*中提供了图表可能包含的每个文件的列表，但前面提到的三个文件是开始开发新图表所必需的文件。虽然这三个文件可以从头开始创建，但Helm提供了`helm
    create`命令，可以更快地搭建一个新的图表。除了创建之前列出的文件外，`helm create`命令还会生成许多不同的样板模板，可以更快地编写您的Helm图表。让我们使用这个命令来搭建一个名为`guestbook`的新Helm图表。
- en: 'The `helm create` command takes the name of the Helm chart (`guestbook`) as
    an argument. Run the following command on your local command line to scaffold
    this chart:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm create`命令将Helm图表的名称（`guestbook`）作为参数。在本地命令行上运行以下命令来搭建这个图表：'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Upon running this command, you will see a new directory on your machine called
    `guestbook/`. This is the directory that contains your Helm chart. Inside the
    directory, you will see the following four files:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您将在您的机器上看到一个名为`guestbook/`的新目录。这是包含您Helm图表的目录。在目录中，您将看到以下四个文件：
- en: '`charts/`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charts/`'
- en: '`Chart.yaml`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`'
- en: '`templates/`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates/`'
- en: '`values.yaml`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values.yaml`'
- en: As you can see, the `helm create` command created a `charts/` directory, in
    addition to the required `Chart.yaml`, `values.yaml`, and `templates/` files.
    The `charts/` directory is currently blank, but will later become automatically
    populated when we declare a chart dependency. You may also notice that the other
    mentioned files have been automatically populated with default settings. We will
    leverage many of these defaults throughout this chapter while developing the `guestbook`
    chart.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`helm create`命令创建了一个`charts/`目录，除了必需的`Chart.yaml`、`values.yaml`和`templates/`文件。`charts/`目录目前是空的，但以后当我们声明一个图表依赖时，它将自动填充。您可能还注意到其他提到的文件已经自动填充了默认设置。在本章的开发`guestbook`图表过程中，我们将利用许多这些默认设置。
- en: 'If you explore the contents underneath the `templates/` directory, you will
    find that many different template resources have been included by default. These
    resources will save time that would have otherwise been spent creating these from
    scratch. While many useful templates were generated, we will remove the `templates/tests/`
    folder. This folder is used to contain the tests for your Helm chart, but we will
    focus on writing your own tests in [*Chapter 6*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292),
    *Testing Helm Charts*. Run the following command to remove the `templates/tests/`
    folder:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您探索`templates/`目录下的内容，您会发现许多不同的模板资源已经默认包含在内。这些资源将节省创建这些资源所需的时间。虽然生成了许多有用的模板，我们将删除`templates/tests/`文件夹。这个文件夹用于包含您Helm图表的测试，但我们将专注于在[*第6章*](B15458_06_Final_JM_ePub.xhtml#_idTextAnchor292)，*测试Helm图表*中编写您自己的测试。运行以下命令来删除`templates/tests/`文件夹：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that the `guestbook` chart has been scaffolded, let's proceed by evaluating
    the `Chart.yaml` file that has been generated.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`guestbook`图表已经被搭建好了，让我们继续评估生成的`Chart.yaml`文件。
- en: Evaluating the chart definition
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估图表定义
- en: 'The chart definition, or `Chart.yaml` file, is used to contain the metadata
    of a Helm chart. We discussed each of the possible options of a `Chart.yaml` file
    in [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203), *Understanding
    Helm Charts*, but let''s recap on some of the primary settings contained within
    a typical chart definition, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图定义，或`Chart.yaml`文件，用于包含Helm图的元数据。我们在[*第4章*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203)中讨论了`Chart.yaml`文件的每个可能选项，*了解Helm图*，但让我们回顾一下典型图定义中包含的一些主要设置，如下所示：
- en: '`apiVersion`: Set to either the `v1` or `v2` (`v2` is the preferred option
    for Helm 3)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiVersion`：设置为`v1`或`v2`（`v2`是Helm 3的首选选项）'
- en: '`version`: The version of the Helm chart. This should be a version that adheres
    to **Semantic Versioning specifications** (**SemVer**).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：Helm图的版本。这应该是符合**语义化版本规范**（**SemVer**）的版本。'
- en: '`appVersion`: The version of the application being deployed by the Helm chart'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appVersion`：Helm图部署的应用程序的版本'
- en: '`name`: The name of the Helm chart'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：Helm图的名称'
- en: '`description`: A brief description of the Helm chart and what it is designed
    to deploy'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：Helm图的简要描述及其设计部署的内容'
- en: '`type`: Set to either `application` or `library`. `Application` charts are
    used to deploy a specific application. `Library` charts contain a set of helper
    functions (also called ''named templates'') that can be used across other charts
    to reduce boilerplate.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：设置为`application`或`library`。`Application`图用于部署特定应用程序。`Library`图包含一组辅助函数（也称为“命名模板”），可在其他图中使用，以减少样板文件。'
- en: '`dependencies`: A list of charts that the Helm chart depends on'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependencies`：Helm图依赖的图列表'
- en: 'If you observe your scaffolded `Chart.yaml` file, you will notice that each
    of these fields (except for dependencies) has already been set. This file can
    be seen in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察你的脚手架`Chart.yaml`文件，你会注意到每个字段（除了dependencies）已经被设置。这个文件可以在以下截图中看到：
- en: '![Figure 5.3: The scaffolded Chart.yaml file'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3：脚手架Chart.yaml文件'
- en: '](image/Figure_5.3.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.3.jpg)'
- en: 'Figure 5.3: The scaffolded Chart.yaml file'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：脚手架Chart.yaml文件
- en: We will leave each of the settings contained within this file at their defaults
    for now (though feel free to write a more creative description if you would like).
    We'll update a couple of these default values when they become relevant, later
    on in the chapter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时将文件中包含的每个设置保持为默认值（尽管如果你愿意，可以随意编写更有创意的描述）。在本章后面，当这些默认值变得相关时，我们将更新其中的一些默认值。
- en: An additional setting that is not included in the default chart definition,
    but should be considered, is `dependencies`. We will discuss this in greater detail
    in the next section, where a Redis dependency will be added to simplify the development
    effort.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 默认图定义中未包含的另一个设置是`dependencies`。我们将在下一节中更详细地讨论这一点，其中将添加一个Redis依赖项，以简化开发工作。
- en: Adding a Redis chart dependency
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Redis图依赖
- en: As mentioned in the *Understanding the Guestbook application* section, this
    Helm chart must be able to deploy a Redis database that will be used to save the
    state of the application. If you were creating this chart completely from scratch,
    you would need to have a proper understanding of how Redis works and how it can
    be properly deployed to Kubernetes. You would also need to create the corresponding
    chart templates required to deploy Redis.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在*了解留言板应用程序*部分提到的，这个Helm图必须能够部署一个Redis数据库，用来保存应用程序的状态。如果你完全从头开始创建这个图，你需要对Redis的工作原理和如何正确部署到Kubernetes有适当的了解。你还需要创建相应的图模板来部署Redis。
- en: Alternatively, by including a Redis dependency that already contains the logic
    and required chart templates, you can greatly reduce the amount of effort involved
    in creating the `guestbook` Helm chart. Let's modify the scaffolded `Chart.yaml`
    file by adding a Redis dependency to simplify chart development.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，通过包含已包含逻辑和所需图表模板的Redis依赖项，您可以大大减少创建`guestbook` Helm图表所涉及的工作量。让我们通过添加Redis依赖项来修改生成的`Chart.yaml`文件，以简化图表开发。
- en: 'The process to add a Redis chart dependency can be performed by following these
    steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 添加Redis图表依赖的过程可以通过以下步骤完成：
- en: 'Search the Helm Hub repository for Redis charts by running the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令在Helm Hub存储库中搜索Redis图表：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One of the charts that will be displayed is Bitnami''s Redis chart. This is
    the chart we will use as the dependency. If you have not already added the `bitnami`
    chart repository in [*Chapter 3*](B15458_03_Final_JM_ePub.xhtml#_idTextAnchor147),
    *Installing Your First Helm Chart,* add this chart repository now by using the
    `helm add repo` command. Note that the repository **Uniform Resource Locator**
    (**URL**) was retrieved from the Redis chart''s page in the Helm Hub repository.
    The code can be seen in the following snippet:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示的图表之一是Bitnami的Redis图表。这是我们将用作依赖项的图表。如果您尚未在[*第3章*](B15458_03_Final_JM_ePub.xhtml#_idTextAnchor147)中添加`bitnami`图表存储库，请使用`helm
    add repo`命令立即添加此图表存储库。请注意，存储库**统一资源定位符**（**URL**）是从Helm Hub存储库中Redis图表的页面中检索的。代码可以在以下片段中看到：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Determine the version of the Redis chart you would like to use. A list of version
    numbers can be found by running the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定您想要使用的Redis图表的版本。可以通过运行以下命令找到版本号列表：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The version that you must select is a chart version, not an app version. The
    app version only describes the Redis version, while the chart version describes
    the version of the actual Helm chart.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须选择的版本是图表版本，而不是应用程序版本。应用程序版本仅描述Redis版本，而图表版本描述实际Helm图表的版本。
- en: Dependencies allow you to choose a particular chart version, or a wildcard such
    as `10.5.x`. Using a wildcard allows you to easily keep your chart updated with
    the latest Redis version matching that wildcard (which, in this case, is version
    `10.5.14`). In this example, we will use version `10.5.x`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项允许您选择特定的图表版本，或者使用诸如`10.5.x`之类的通配符。使用通配符可以轻松地使您的图表与匹配该通配符的最新Redis版本保持更新（在本例中，该版本为`10.5.14`）。在本例中，我们将使用版本`10.5.x`。
- en: 'Add the `dependencies` field to the `Chart.yaml` file. For the `guestbook`
    chart, we will configure this field with the following minimum required fields
    (additional fields are discussed in [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203),
    *Understanding Helm Charts*):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`dependencies`字段添加到`Chart.yaml`文件中。对于`guestbook`图表，我们将使用以下最低要求字段配置此字段（其他字段在[*第4章*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203)，*了解Helm图表*中讨论）：
- en: '`name`: The name of the dependency chart'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`：依赖图的名称'
- en: '`version` : The version of the dependency chart'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`version`：依赖图的版本'
- en: '`repository`: The repository URL of the dependency chart'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`repository`：依赖图的存储库URL'
- en: 'Add the following **YAML Ain''t Markup Language** (**YAML**) code to the end
    of your `Chart.yaml` file, providing the information you have gathered about the
    Redis chart to configure the dependency''s settings:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下**YAML不是标记语言**（**YAML**）代码添加到您的`Chart.yaml`文件的末尾，提供您已收集的有关Redis图表的信息以配置依赖项的设置：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have added your dependency, your full `Chart.yaml` file should appear
    as follows (comments and empty lines have been removed for brevity):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 添加依赖项后，您的完整`Chart.yaml`文件应如下所示（为简洁起见，已删除注释和空行）：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This file can also be reviewed in the P[ackt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/g](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/Chart.yaml)uestbook/Chart.yaml
    (be aware that the version and `appVersion` fields may differ, as we will modify
    these later in the chapter).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件也可以在P[ackt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/g](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/Chart.yaml)uestbook/Chart.yaml中进行查看（请注意，版本和`appVersion`字段可能不同，因为我们将在本章后面修改这些字段）。
- en: Now that your dependency has been added to the chart definition, let's download
    this dependency to ensure that it has been configured properly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的依赖已经添加到图表定义中，让我们下载这个依赖，以确保它已经正确配置。
- en: Downloading the Redis chart dependency
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载Redis图表依赖
- en: When downloading a dependency for the first time, you should use the `helm dependency
    update` command. This command will download your dependency to the `charts/` directory
    and will generate the `Chart.lock` file, which specifies metadata about the chart
    that was downloaded.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首次下载依赖时，应使用`helm dependency update`命令。此命令将下载您的依赖到`charts/`目录，并将生成`Chart.lock`文件，该文件指定了已下载的图表的元数据。
- en: 'Run the `helm dependency update` command to download your Redis dependency.
    The command takes as an argument the location of your Helm chart, and can be seen
    in the following snippet:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`helm dependency update`命令来下载您的Redis依赖。该命令以Helm图表的位置作为参数，并可以在以下代码片段中看到：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can validate the fact that the download was successful by ensuring that
    the Redis chart appears under the `charts/` folder, as illustrated here:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过确保Redis图表出现在`charts/`文件夹下来验证下载是否成功，如下所示：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that the Redis dependency has been included, let's proceed by modifying
    the `values.yaml` file. Here, we will override values specific to configuring
    Redis, as well as the Guestbook frontend application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Redis依赖已经包含，让我们继续修改`values.yaml`文件。在这里，我们将覆盖特定于配置Redis以及Guestbook前端应用程序的值。
- en: Modifying the values.yaml file
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改values.yaml文件
- en: A Helm chart's `values.yaml` file is used to provide a set of default parameters
    that are referenced throughout the chart's templates. When users interact with
    the Helm chart, they can override these defaults if necessary, using the `--set`
    or `--values` flags. In addition to providing a set of default parameters, a well-written
    Helm chart should be self-documenting, containing intuitive names for each value
    and comments that explain difficult values to implement. Writing a self-documenting
    `value.yaml` file allows users and maintainers alike to simply refer to this file
    if they need to understand the chart's values.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Helm chart的`values.yaml`文件用于提供一组默认参数，这些参数在整个图表模板中被引用。当用户与Helm图表交互时，他们可以使用`--set`或`--values`标志覆盖这些默认值。除了提供一组默认参数外，一个写得好的Helm图表应该是自说明的，包含每个值的直观名称和解释难以实现的值的注释。编写一个自说明的`value.yaml`文件允许用户和维护者简单地参考这个文件，以便了解图表的值。
- en: The `helm create` command generates a values file that contains many boilerplate
    values commonly used throughout Helm chart development. Let's finish configuring
    the Redis dependency by adding a few additional values at the end of this file.
    Afterward, we'll focus on modifying some of the boilerplate values to configure
    the Guestbook frontend resources.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm create`命令生成一个值文件，其中包含许多在Helm图表开发中常用的样板值。让我们通过在文件末尾添加一些额外的值来完成配置Redis依赖。之后，我们将专注于修改一些样板值，以配置Guestbook前端资源。'
- en: Adding values to configure the Redis chart
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加值以配置Redis图表
- en: Although adding a dependency prevents you from needing to create its chart templates,
    you may still need to override some of its values in order to configure it. In
    this case, it will be necessary to override a few of the Redis chart's values
    to allow it to work seamlessly with the rest of the `guestbook` chart.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然添加依赖项可以防止您需要创建其图表模板，但您可能仍然需要覆盖一些值以对其进行配置。在这种情况下，需要覆盖一些Redis图表的值，以使其能够与`guestbook`图表的其余部分无缝配合。
- en: 'Let''s begin by first learning about the Redis chart''s values. This can be
    done by running the `helm show values` command against the downloaded Redis chart,
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解一下Redis图表的值。这可以通过对下载的Redis图表运行`helm show values`命令来完成，如下所示：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Be sure to modify the command to match the Redis chart version that you downloaded.
    With a list of values displayed, let''s identify those that will need to be overridden,
    as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保修改命令以匹配您下载的Redis图表版本。显示值列表后，让我们识别需要被覆盖的值，如下所示：
- en: 'The first value that will need to be overridden in the Redis chart is `fullnameOverride`.
    This value appears in the `helm show values` output, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Redis图表中需要被覆盖的第一个值是`fullnameOverride`。此值显示在`helm show values`输出中，如下所示：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Charts often use this value in a named template called `$CHART_NAME.fullname`
    to easily generate their Kubernetes resource names. When `fullnameOverride` is
    set, the named template will evaluate to this value. Otherwise, the result of
    this template will be based on the `.Release.Name` object, or the name of the
    Helm release provided at installation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图表通常在一个名为`$CHART_NAME.fullname`的命名模板中使用这个值，以便轻松生成它们的Kubernetes资源名称。当设置了`fullnameOverride`时，命名模板将评估为这个值。否则，此模板的结果将基于`.Release.Name`对象，或者安装时提供的Helm发布的名称。
- en: The Redis dependency uses the `redis.fullname` template to help set the Redis
    master and Redis slave service names.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Redis依赖项使用`redis.fullname`模板来帮助设置Redis主和Redis从服务的名称。
- en: 'The following snippet shows an example of how the Redis master service name
    is generated in the Redis chart:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段显示了在Redis图表中生成Redis主服务名称的示例：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The Guestbook application requires the Redis services to be named `redis-master`
    and `redis-slave`. As a result, the `fullnameOverride` value should be set to
    `redis`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Guestbook应用程序需要将Redis服务命名为`redis-master`和`redis-slave`。因此，`fullnameOverride`值应设置为`redis`。
- en: If you are interested in learning more about how the `redis.fullname` template
    works and how it is applied throughout the Redis chart, you can unarchive the
    Redis dependency under the `charts/` folder. In that folder, you will find the
    `redis.fullname` template in the `templates/_helpers.tpl` file and note its invocations
    throughout each YAML template. (It turns out that your generated `guestbook` chart
    also contains a similar template in the `_helpers.tpl` file, but in general, it's
    safer to refer to the dependency's resources in case their maintainer customized
    the template.)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解`redis.fullname`模板的工作原理以及它在整个Redis图表中的应用方式，您可以在`charts/`文件夹下解压Redis依赖项。在该文件夹中，您将在`templates/_helpers.tpl`文件中找到`redis.fullname`模板，并注意其在每个YAML模板中的调用。
    （事实证明，您生成的`guestbook`图表中也包含一个类似的模板在`_helpers.tpl`文件中，但一般来说，最好参考依赖项的资源，以防其维护者定制了模板。）
- en: 'If you are interested in learning more about how the Guestbook application
    works, the source code can be found on GitHub. The following file defines the
    required Redis service names:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解Guestbook应用程序的工作原理，可以在GitHub上找到源代码。以下文件定义了所需的Redis服务名称：
- en: https://github.com/kubernetes/examples/blob/master/guestbook/php-redis/guestbook.php
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: https://github.com/kubernetes/examples/blob/master/guestbook/php-redis/guestbook.php
- en: 'The next value that needs to be overridden from the Redis chart is `usePassword`.
    The following code snippet shows what this value looks like in the `helm show
    values` output:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要从Redis图表中覆盖的下一个值是`usePassword`。以下代码片段显示了`helm show values`输出中这个值的样子：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The Guestbook application has been written for unauthenticated access to the
    Redis database, so we will want to set this value to `false`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Guestbook应用程序已经编写为无需身份验证即可访问Redis数据库，因此我们将希望将此值设置为`false`。
- en: 'The final value that we need to override is `configmap`. Here is how this value
    appears in the `helm show values` output:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要覆盖的最后一个值是`configmap`。以下是`helm show values`输出中此值的样子：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The default `configmap` value will enable both types of persistence that Redis
    can employ, **Append Only File** (**AOF**) and **Redis Database File** (**RDF**)
    persistence. AOF persistence in Redis works by adding new data entries to a changelog-style
    file to provide a history of changes. RDF persistence works by copying data to
    a file on certain intervals, so as to create data snapshots.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`configmap`值将启用Redis可以使用的两种持久性类型，**追加日志文件**（**AOF**）和**Redis数据库文件**（**RDF**）持久性。Redis中的AOF持久性通过将新数据条目添加到类似于更改日志的文件中来提供更改历史。RDF持久性通过在一定间隔内将数据复制到文件中，以创建数据快照。
- en: Later in this chapter, we will create simple life cycle hooks that allow users
    to back up and restore the Redis database to a previous snapshot. Because only
    RDB persistence works with snapshot files, we will overwrite the `configmap` value
    to read `appendonly no`, which will disable AOF persistence.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面，我们将创建简单的生命周期钩子，允许用户将Redis数据库备份和恢复到先前的快照。因为只有RDB持久性与快照文件一起工作，我们将覆盖`configmap`值以读取`appendonly
    no`，这将禁用AOF持久性。
- en: 'With each Redis value identified, add these values to the end of your chart''s
    `values.yaml` file, as shown in the following code block:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 识别每个Redis值后，将这些值添加到图表的`values.yaml`文件的末尾，如下面的代码块所示：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Remember from [*Chapter 4*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203)*,*
    *Understanding Helm Charts,* that values overridden from a chart dependency must
    be scoped underneath that chart name. That is why each of these values will be
    added underneath a `redis:` stanza.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住[*第4章*](B15458_04_Final_JM_ePub.xhtml#_idTextAnchor203)*,* *理解Helm图表*，从图表依赖中覆盖的值必须在该图表名称下进行范围限定。这就是为什么每个这些值将被添加到`redis:`段下面。
- en: You can check that you have configured your Redis values properly by referencing
    the `v`[`alues.yaml` file located at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/c](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/values.yaml)harts/guestbook/values.yaml
    in the Packt repository.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过参考位于https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/values.yaml的Packt存储库中的`values.yaml`文件，检查是否正确配置了Redis值。
- en: Important note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Some values unrelated to Redis may differ from your `values.yaml` file, as we
    will be modifying these in the next section.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与Redis无关的一些值可能与您的`values.yaml`文件不同，因为我们将在下一节中修改这些值。
- en: With the Redis dependency's values configured, let's proceed to modify the default
    values generated by `helm create` to deploy the Guestbook frontend.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 配置了Redis依赖项的值后，让我们继续修改`helm create`生成的默认值，以部署Guestbook前端。
- en: Modifying values to deploy the Guestbook frontend
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改值以部署Guestbook前端
- en: When you ran the `helm create` command at the beginning of the chapter, some
    of the items that it created were default templates under the `templates/` directory
    and default values in the `values.yaml` file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在本章开头运行`helm create`命令时，它创建的一些项目是`templates/`目录下的默认模板和`values.yaml`文件中的默认值。
- en: 'Here is a list of the default templates that were created:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建的默认模板列表：
- en: '`deployment.yaml`: Used to deploy the Guestbook application to Kubernetes.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deployment.yaml`：用于将Guestbook应用程序部署到Kubernetes。'
- en: '`ingress.yaml`: Provides one option to access the Guestbook application from
    outside the Kubernetes cluster.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ingress.yaml`：提供了一种从Kubernetes集群外部访问Guestbook应用程序的选项。'
- en: '`serviceaccount.yaml`: Used to create a dedicated `serviceaccount` for the
    Guestbook application.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serviceaccount.yaml`：用于为Guestbook应用程序创建一个专用的`serviceaccount`。'
- en: '`service.yaml`: Used to load-balance between multiple instances of the Guestbook
    application. Can also provide an option to access the Guestbook application from
    outside the Kubernetes cluster.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service.yaml`：用于在Guestbook应用程序的多个实例之间进行负载平衡。还可以提供一种从Kubernetes集群外部访问Guestbook应用程序的选项。'
- en: '`_helpers.tp`: Provides a set of common templates used throughout the Helm
    chart.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: _helpers.tp：提供了一组在Helm图表中广泛使用的常见模板。
- en: '`NOTES.txt`: Provides a set of instructions used to access the application
    after it is installed.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOTES.txt`：提供了安装后访问应用程序所使用的一组说明。'
- en: Each of these templates is configured by the chart's values. While the `helm
    create` command gave a great starting point toward deploying the Guestbook application,
    it did not provide each of the default values needed. In order to replace the
    defaults with their required values, we can observe the generated chart templates
    and modify their parameters accordingly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模板都由图表的值配置。虽然`helm create`命令为部署Guestbook应用程序提供了一个很好的起点，但它没有提供所需的每个默认值。为了用所需的值替换默认值，我们可以观察生成的图表模板并相应地修改它们的参数。
- en: Let's walk through the template locations that indicate where modifications
    need to be made.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解指示需要进行修改的模板位置。
- en: 'The first location is in the `deployment.yaml` chart template. Within that
    file, there is a line that indicates the container image to deploy, as illustrated
    here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个位置在`deployment.yaml`图表模板中。在该文件中，有一行指示要部署的容器映像，如下所示：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, the image is determined by the `image.repository` value and
    the `AppVersion` chart setting. If you look in your `values.yaml` file, you can
    see that the `image.repository` value is currently configured to deploy the `nginx`
    image by default, as illustrated here:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，image由`image.repository`值和`AppVersion`图表设置确定。如果您查看您的`values.yaml`文件，您会看到`image.repository`值当前配置为默认部署`nginx`映像，如下所示：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Similarly, if you look in the `Chart.yaml` file, you can see that the `AppVersion`
    is currently set to `1.16.0`, as illustrated here:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您查看`Chart.yaml`文件，您会看到`AppVersion`目前设置为`1.16.0`，如下所示：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Since the Guestbook application originated as a Kubernetes tutorial, you can
    find the specific image that needs to be deployed in the Kubernetes documentation
    at https://kubernetes.io/docs/tutorials/stateless-application/guestbook/#creating-the-guestbook-frontend-deployment.
    In the documentation, you can see that the image must be specified as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Guestbook应用程序起源于Kubernetes教程，您可以在Kubernetes文档中找到需要部署的特定映像，网址为https://kubernetes.io/docs/tutorials/stateless-application/guestbook/#creating-the-guestbook-frontend-deployment。在文档中，您可以看到必须指定映像如下：
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As a result, in order for the image field to be properly generated, the `image.repository`
    value must be set to `gcr.io/google-samples/gb-frontend`, and the `AppVersion`
    chart setting must be set to `v4`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了正确生成image字段，`image.repository`值必须设置为`gcr.io/google-samples/gb-frontend`，并且`AppVersion`图表设置必须设置为`v4`。
- en: 'The second location where a modification must be made is in the `service.yaml`
    chart template. In this file, there is a line that determines the service type,
    as illustrated here:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 必须进行修改的第二个位置是`service.yaml`图表模板。在这个文件中，有一行确定服务类型的代码，如下所示：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'According to the `service.type` value, this service will default to having
    a `ClusterIP` service type, shown in the `values.yaml` file as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`service.type`的值，该服务将默认为`ClusterIP`服务类型，如`values.yaml`文件中所示：
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For the `guestbook` chart, we will modify this value to instead create a `NodePort`
    service. This will allow the application to be accessed easier in a minikube environment
    by exposing a port on the minikube **virtual machine** (**VM**). Once connected
    to the port, we can access the Guestbook frontend.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`guestbook`图表，我们将修改此值，以创建一个`NodePort`服务。这将允许在minikube环境中更容易地访问应用程序，通过在minikube虚拟机（VM）上暴露一个端口。连接到端口后，我们可以访问Guestbook前端。
- en: Note that while `helm create` generated an `ingress.yaml` template that would
    also allow access, `NodePort` services are more commonly recommended when working
    in minikube environments because add-ons or enhancements are not required. Luckily,
    the generated chart disables the ingress resource creation by default, so no action
    is required to disable this feature.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然`helm create`生成了一个`ingress.yaml`模板，也允许访问，但在minikube环境中工作时，更常见的建议是使用`NodePort`服务，因为不需要附加组件或增强功能。幸运的是，生成的图表默认禁用了入口资源的创建，因此无需禁用此功能。
- en: 'Now that we have determined the default settings that need to be changed, let''s
    proceed by first updating the `values.yaml` file, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了需要更改的默认设置，让我们首先按照以下方式更新`values.yaml`文件：
- en: 'Replace the `image.repository` value so that it is set to `gcr.io/google-samples/gb-frontend`.
    The entire `image:` stanza should now read as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`image.repository`值替换为`gcr.io/google-samples/gb-frontend`。整个`image:`部分现在应该如下所示：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Replace the `service.type` value so that it is set to `NodePort`. The entire
    `service:` stanza should now read as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`service.type`值替换为`NodePort`。整个`service:`部分现在应该如下所示：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can verify that your `values.yaml` file has been modified correctly by referring
    to the fi[le in the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-chart](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/values.yaml)s/charts/guestbook/values.yaml.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过参考Packt存储库中的文件来验证您的`values.yaml`文件是否已正确修改。
- en: 'Next, let''s update the `Chart.yaml` file so that the correct Guestbook application
    version is deployed, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更新`Chart.yaml`文件，以便部署正确的Guestbook应用程序版本，如下所示：
- en: 'Replace the `appVersion` field so that it is set to `v4`. The `appVersion`
    field should now read as follows:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`appVersion`字段替换为`v4`。`appVersion`字段现在应该如下所示：
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You can verify that your `Chart.yaml` file has been modified correctly by referring
    to the fi[le in the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-char](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/Chart.yaml)ts/charts/guestbook/Chart.yaml.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过参考Packt存储库中的文件来验证您的`Chart.yaml`文件是否已正确修改。
- en: Now that the chart has been updated with the proper values and settings, let's
    see this chart in action by deploying it to the minikube environment.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图表已经使用正确的值和设置进行了更新，让我们通过将其部署到minikube环境中来看看这个图表的运行情况。
- en: Installing the Guestbook chart
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Guestbook图表
- en: 'To install your `guestbook` chart, run the following command outside of your
    `guestbook/` directory:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装您的`guestbook`图表，请在`guestbook/`目录之外运行以下命令：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following message will be displayed if the installation was successful:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，将显示以下消息：
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: While the installation was successful, you may find that the Guestbook and Redis
    pods are not immediately in the `Ready` state. When a Pod is not ready, it cannot
    be accessed yet.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，您可能会发现留言板和Redis pods并不立即处于“准备就绪”状态。当一个Pod没有准备就绪时，它还不能被访问。
- en: You can also force Helm to wait until these pods become ready by passing in
    the `--wait` flag. The `--wait` flag can be accompanied by the `--timeout` flag
    to increase the amount of time in seconds that Helm will wait for pods to become
    ready. The default is set to 5 minutes, which would be more than enough time for
    this application.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过传入“--wait”标志来强制Helm等待这些Pod准备就绪。“--wait”标志可以与“--timeout”标志一起使用，以增加Helm等待Pod准备就绪的时间（以秒为单位）。默认设置为5分钟，这对于这个应用程序来说已经足够了。
- en: 'You can ensure that all pods are ready without the `--wait` flag by checking
    each Pod''s status, as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过检查每个Pod的状态来确保所有的Pod都已准备就绪，而不使用“--wait”标志，如下所示：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When each Pod is ready, you will be able to observe that each Pod reports `1/1`
    under the `READY` column, as illustrated here:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当每个Pod准备就绪时，您将能够观察到每个Pod在“READY”列下报告为“1/1”，如下所示：
- en: '![Figure 5.4: Output of kubectl get pods –n chapter5 when each Pod is ready'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4：当每个Pod准备就绪时，kubectl get pods –n chapter5的输出'
- en: '](image/Figure_5.4.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.4.jpg)'
- en: 'Figure 5.4: Output of kubectl get pods –n chapter5 when each Pod is ready'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：当每个Pod准备就绪时，kubectl get pods –n chapter5的输出
- en: 'Once the pods are ready, you can run the commands that were displayed by the
    release notes. If necessary, they can be displayed again by running the following
    code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Pod准备就绪，您可以运行发布说明中显示的命令。如果需要，可以通过运行以下代码再次显示它们：
- en: '[PRE29]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Copy and paste the Guestbook URL (output from the `echo` command) into your
    browser, and the Guestbook **user interface** (**UI**) should be displayed, as
    illustrated in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将留言板URL（从“echo”命令的输出中复制并粘贴）到您的浏览器中，留言板**用户界面**（**UI**）应该显示出来，如下截图所示：
- en: '![Figure 5.5: The Guestbook frontend'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5：留言板前端'
- en: '](image/Figure_5.5.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.5.jpg)'
- en: 'Figure 5.5: The Guestbook frontend'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：留言板前端
- en: 'Try to type a message in the dialog box and click **Submit**. The Guestbook
    frontend will display the message under the **Submit** button, which indicates
    that the message has been saved to the Redis database, as illustrated in the following
    screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在对话框中输入一条消息，然后单击**提交**。留言板前端将在**提交**按钮下显示消息，这表明消息已保存到Redis数据库，如下截图所示：
- en: '![Figure 5.6: The Guestbook frontend displaying a previously sent message'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6：留言板前端显示先前发送的消息'
- en: '](image/Figure_5.6.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.6.jpg)'
- en: 'Figure 5.6: The Guestbook frontend displaying a previously sent message'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：留言板前端显示先前发送的消息
- en: If you are able to write a message and see it displayed on your screen, then
    you have successfully built and deployed your first Helm chart! If you are not
    able to see your messages, your Redis dependency may not have been set up correctly.
    In that case, make sure that your Redis values have been configured properly and
    that your Redis dependency has been properly declared in the `Chart.yaml` file.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能够编写一条消息并在屏幕上看到它显示出来，那么您已成功构建和部署了您的第一个Helm图表！如果您无法看到您的消息，那么您的Redis依赖项可能没有正确设置。在这种情况下，请确保您的Redis值已经正确配置，并且您的Redis依赖已经在“Chart.yaml”文件中正确声明。
- en: 'When you are ready, uninstall this chart with the `helm uninstall` command,
    like this:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备好时，使用“helm uninstall”命令卸载此图表，就像这样：
- en: '[PRE30]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You will also need to manually remove the Redis **PersistentVolumeClaims** (**PVCs**),
    since the Redis dependency made the database persistent by using `StatefulSet`
    (which does not automatically remove PVCs when deleted).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要手动删除Redis **PersistentVolumeClaims**（**PVCs**），因为Redis依赖于使用`StatefulSet`使数据库持久化（在删除时不会自动删除PVCs）。
- en: 'Run the following command to remove the Redis PVCs:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以删除Redis PVCs：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the next section, we will explore ways in which the `guestbook` chart can
    be improved.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨改进`guestbook`图表的方法。
- en: Improving the Guestbook Helm chart
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进Guestbook Helm图表
- en: 'The chart created in the previous section was able to successfully deploy the
    Guestbook application. However, as is the case with any type of software, the
    Helm chart can always be improved. In this section, we will focus on the following
    two features that will improve the `guestbook` chart:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中创建的图表成功部署了Guestbook应用程序。然而，与任何类型的软件一样，Helm图表总是可以改进的。在本节中，我们将专注于以下两个功能，以改进`guestbook`图表：
- en: Life cycle hooks to back up and restore the Redis database
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生命周期钩子备份和恢复Redis数据库
- en: Input validation to ensure only valid values are provided
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入验证以确保只提供有效的值
- en: Let's focus first on adding life cycle hooks.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先专注于添加生命周期钩子。
- en: Creating pre-upgrade and pre-rollback life cycle hooks
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建pre-upgrade和pre-rollback生命周期钩子
- en: 'In this section, we will create two life cycle hooks, as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建两个生命周期钩子，如下：
- en: The first hook will occur in the `pre-upgrade` life cycle phase. This phase
    takes place immediately after the `helm upgrade` command is run, but before any
    Kubernetes resources become modified. This hook will be used to take a data snapshot
    of the Redis database before performing the upgrade, ensuring that the database
    is backed up in case the upgrade is errant.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个钩子将出现在`pre-upgrade`生命周期阶段。这个阶段发生在运行`helm upgrade`命令之后，但在任何Kubernetes资源被修改之前。这个钩子将用于在执行升级之前对Redis数据库进行数据快照，确保在升级出现错误时可以备份数据库。
- en: The second hook will occur in the `pre-rollback` life cycle phase. This phase
    takes place immediately after the `helm rollback` command is run but before any
    Kubernetes resources are reverted. This hook will restore the Redis database to
    a previously taken data snapshot and will ensure that the Kubernetes resource
    configuration is reverted to match the way it was at the point the snapshot was
    taken.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个钩子将出现在`pre-rollback`生命周期阶段。这个阶段发生在运行`helm rollback`命令之后，但在任何Kubernetes资源被回滚之前。这个钩子将把Redis数据库恢复到先前的数据快照，并确保Kubernetes资源配置被恢复到快照被拍摄时的状态。
- en: By the end of this section, you will become more familiar with life cycle hooks
    and some of the powerful capabilities that can be performed with them. Be sure
    to keep in mind that the hooks created in this section are very simple and are
    only there for exploring the basic capabilities of Helm hooks. It is not advised
    to try to use these hooks verbatim in a production environment.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节结束时，您将更加熟悉生命周期钩子以及它们可以执行的一些强大功能。请记住，本节中创建的钩子非常简单，仅用于探索Helm钩子的基本功能。不建议尝试在生产环境中直接使用这些钩子。
- en: Let's walk through how the `pre-upgrade` life cycle hook can be created.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何创建`pre-upgrade`生命周期钩子。
- en: Creating the pre-upgrade hook to take a data snapshot
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建pre-upgrade钩子以进行数据快照
- en: In Redis, data snapshots are contained inside a `dump.rdb` file. We can back
    this file up by creating a hook that first creates a new PVC in the Kubernetes
    namespace. The hook can then create a `job` resource that copies the `dump.rdb`
    file to the new `PersistentVolumeClaim`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在Redis中，数据快照包含在`dump.rdb`文件中。我们可以通过创建一个钩子来备份这个文件，该钩子首先在Kubernetes命名空间中创建一个新的PVC。然后，该钩子可以创建一个`job`资源，将`dump.rdb`文件复制到新的`PersistentVolumeClaim`中。
- en: 'While the `helm create` command generates some powerful resource templates
    that allow the initial `guestbook` chart to be created quickly, it does not scaffold
    out any hooks that can be used for this task. As a result, you can create the
    pre-upgrade hook from scratch by following these steps:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`helm create`命令生成了一些强大的资源模板，可以快速创建初始的`guestbook`图表，但它没有生成任何可用于此任务的钩子。因此，您可以通过以下步骤从头开始创建预升级钩子：
- en: First, you should create a new folder to contain the hook templates. While this
    is not a technical requirement, it does help keep your hook templates separate
    from the regular chart templates. It also allows you to group the hook templates
    by function.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您应该创建一个新的文件夹来包含钩子模板。虽然这不是技术要求，但它有助于将钩子模板与常规图表模板分开。它还允许您按功能对钩子模板进行分组。
- en: 'Create a new folder called `templates/backup` in your `guestbook` file structure,
    as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`guestbook`文件结构中创建一个名为`templates/backup`的新文件夹，如下所示：
- en: '[PRE32]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Next, you should scaffold the two templates required to perform the backup.
    The first template required is a `PersistentVolumeClaim` template that will be
    used to contain the copied `dump.rdb` file. The second template will be a job
    template that will be used to perform the copy.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您应该创建两个模板，以执行备份所需的两个模板。所需的第一个模板是`PersistentVolumeClaim`模板，将用于包含复制的`dump.rdb`文件。第二个模板将是一个作业模板，用于执行复制操作。
- en: 'Create two empty template files to serve as placeholders, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 创建两个空模板文件作为占位符，如下所示：
- en: '[PRE33]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You can double-check your work by referencing the Packt repository. Your file
    structure should appear [identical to the structure found at https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-cha](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook/templates/backup)rts/charts/guestbook/templates/backup.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过参考Packt存储库来仔细检查您的工作。您的文件结构应该与https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook/templates/backup中找到的结构完全相同。
- en: 'Next, let''s create the `persistentvolumeclaim.yaml` template. Copy the contents
    of the file below to your `backup/persistentvolumeclaim.yaml` file (this file
    can also be copied from the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/backup/persistentvolumeclaim.yaml.
    Keep in mind that whitespace consists of `spaces`, not tabs, as per valid YAML
    syntax. The contents of the file can be seen here:![Figure 5.7: The backup/persistentvolumeclaim.yaml
    template'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们创建`persistentvolumeclaim.yaml`模板。将下面文件的内容复制到您的`backup/persistentvolumeclaim.yaml`文件中（此文件也可以从Packt存储库https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/backup/persistentvolumeclaim.yaml中复制。请注意，空格由`空格`组成，而不是制表符，符合有效的YAML语法。文件的内容可以在这里看到：![图5.7：备份/persistentvolumeclaim.yaml模板
- en: '](image/Figure_5.7.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.7.jpg)'
- en: 'Figure 5.7: The backup/persistentvolumeclaim.yaml template'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：备份/persistentvolumeclaim.yaml模板
- en: Before proceeding, let's walk through part of the `persistentvolumeclaim.yaml`
    file to help understand how it was created.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们浏览`persistentvolumeclaim.yaml`文件的一部分，以帮助理解它是如何创建的。
- en: '*Lines 1* and *17* of this file consist of an `if` action. Since the action
    encapsulates the whole file, it indicates that this resource will only be included
    if the `redis.master.persistence.enabled` value is set to `true`. This value defaults
    to `true` in the Redis dependency chart and can be observed using the `helm show
    values` command.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的*第1*行和*第17*行由一个`if`操作组成。由于该操作封装了整个文件，这表明只有在`redis.master.persistence.enabled`值设置为`true`时，才会包括此资源。在Redis依赖图中，此值默认为`true`，可以使用`helm
    show values`命令观察到。
- en: '*Line 5* determines the name of the new PVC backup. Its name is based on the
    name given to the Redis master PVC created by the Redis dependency chart, which
    is `redis-data-redis-master-0`, so that it is obvious which PVC this is designed
    to be a backup of. Its name is also based on the revision number. Because this
    hook is run as a pre-upgrade hook, it will try to use the revision number being
    upgraded to. The `sub` function is used to subtract `1` from this revision number,
    so it is obvious that this PVC contains the data snapshot of the previous revision.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '*第5行*确定新PVC备份的名称。其名称基于Redis依赖图创建的Redis主PVC的名称，即`redis-data-redis-master-0`，以便明确指出这是设计为备份的PVC。其名称还基于修订号。因为此钩子作为预升级钩子运行，它将尝试使用正在升级的修订号。`sub`函数用于从此修订号中减去`1`，以便明确指出此PVC包含先前修订的数据快照。'
- en: '*Line 9* creates an annotation to declare this resource as a `pre-upgrade`
    hook. *Line 10* creates a `helm.sh/hook-weight` annotation to determine the order
    in which this resource should be created compared to other pre-upgrade hooks.
    Weights are run in ascending order, so this resource will be created before other
    pre-upgrade resources.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '*第9行*创建一个注释，将此资源声明为`pre-upgrade`钩子。*第10行*创建一个`helm.sh/hook-weight`注释，以确定此资源应与其他预升级钩子相比的创建顺序。权重按升序运行，因此此资源将在其他预升级资源之前创建。'
- en: 'After the `persistentvolumeclaim.yaml` file is created, we will create the
    final pre-upgrade template, `job.yaml`. Copy the following content to your `backup/job.yaml`
    file (this file can also [be copied from the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/cha](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/backup/job.yaml)rts/guestbook/templates/backup/job.yaml):'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`persistentvolumeclaim.yaml`文件后，我们将创建最终的预升级模板`job.yaml`。将以下内容复制到您的`backup/job.yaml`文件中（此文件也可以从Packt存储库https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/backup/job.yaml中复制）：
- en: '![](image/Figure_5.8.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_5.8.jpg)'
- en: 'Figure 5.8: The backup/job.yaml template'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：备份/job.yaml模板
- en: Let's walk through part of this `job.yaml` template to understand how it was
    created.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解`job.yaml`模板的部分内容，以了解它是如何创建的。
- en: '*Line 9* once again defines this template to be a pre-upgrade hook. *Line 11*
    sets the hook weight to `1,` indicating that this resource will be created after
    the other pre-upgrade `PersistentVolumeClaim`.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '*第9行*再次定义此模板为预升级钩子。*第11行*将钩子权重设置为`1`，表示此资源将在其他预升级`PersistentVolumeClaim`之后创建。'
- en: '*Line 10* sets a new annotation to determine when this job should be deleted.
    By default, Helm does not manage hooks beyond their initial creation, meaning
    that they will not be deleted when the `helm uninstall` command is run. The `helm.sh/hook-delete-policy`
    annotation is used to determine the conditions in which a resource should be deleted.
    This job contains the `before-hook-creation` delete policy, which indicates it
    will be removed during a `helm upgrade` command if it already exists in the namespace,
    allowing a fresh job to be created in its place. This job will also have the `hook-succeeded`
    delete policy, which will result in its deletion if it is run successfully.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 第10行设置了一个新的注释，以确定何时应删除此作业。默认情况下，Helm不管理钩子的创建之外的内容，这意味着当运行`helm uninstall`命令时，它们不会被删除。`helm.sh/hook-delete-policy`注释用于确定资源应该在何种条件下被删除。该作业包含`before-hook-creation`删除策略，这表明如果它已经存在于命名空间中，它将在`helm
    upgrade`命令期间被删除，从而允许创建一个新的作业。该作业还将具有`hook-succeeded`删除策略，如果成功运行，则将导致其被删除。
- en: '*Line 19* performs the backup of the `dump.rdb` file. It connects to the Redis
    master, saves the state of the database, and copies the file to the backup PVC.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 第19行执行`dump.rdb`文件的备份。它连接到Redis主服务器，保存数据库的状态，并将文件复制到备份PVC。
- en: '*Lines 29* and *32* define the Redis master PVC and backup PVC, respectively.
    These PVCs are mounted by the job in order to copy the `dump.rdb` file.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 第29行和第32行分别定义了Redis主PVC和备份PVC。这些PVC被作业挂载，以便复制`dump.rdb`文件。
- en: If you have followed along with each of the preceding steps, then you have created
    your pre-upgrade hooks for your Helm chart. Let's continue to the next section
    to create the pre-rollback hook. Afterward, we will redeploy the `guestbook` chart
    to see these hooks in action.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经按照前面的每个步骤进行操作，那么您已经为Helm图表创建了预升级钩子。让我们继续下一节，创建预回滚钩子。之后，我们将重新部署`guestbook`图表，以查看这些钩子的作用。
- en: Creating the pre-rollback hook to restore the database
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建预回滚钩子以恢复数据库
- en: Whereas the pre-upgrade hook was written to copy the `dump.rdb` file from the
    Redis master PVC to the backup PVC, the `pre-rollback` hook can be written to
    perform the reverse action to restore the database to a previous snapshot.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 而预升级钩子是用来从Redis主PVC复制`dump.rdb`文件到备份PVC，`pre-rollback`钩子可以编写以执行相反的操作，将数据库恢复到先前的快照。
- en: 'Follow these steps to create the pre-rollback hook:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建预回滚钩子：
- en: 'Create the `templates/restore` folder, which will be used to contain the pre-rollback
    hook, as follows:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`templates/restore`文件夹，用于包含预回滚钩子，如下所示：
- en: '[PRE34]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, scaffold an empty `job.yaml` template, which will be used to restore
    the database, as follows:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个空的`job.yaml`模板，用于恢复数据库，如下所示：
- en: '[PRE35]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You can check that you have created the correct structu[re by referencing the
    Packt repository at https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook/templates/restore)-charts/charts/guestbook/templates/restore.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过引用Packt存储库来检查是否已创建了正确的结构[https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook/templates/restore)-charts/charts/guestbook/templates/restore。
- en: 'Next, let''s add content to the `job.yaml` file. Copy the following content
    to your `restore/job.yaml` file (this file can al[so be copied from the Packt
    repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/c](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/restore/job.yaml)harts/guestbook/templates/restore/job.yaml):'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们向`job.yaml`文件添加内容。将以下内容复制到您的`restore/job.yaml`文件中（此文件也可以从Packt存储库https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/c](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/restore/job.yaml)harts/guestbook/templates/restore/job.yaml)中复制）：
- en: '![Figure 5.9: The rollback/job.yaml template'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.9：回滚/job.yaml模板'
- en: '](image/Figure_5.9.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.9.jpg)'
- en: 'Figure 5.9: The rollback/job.yaml template'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9：回滚/job.yaml模板
- en: '*Line 7* of this template declares this resource as a `pre-rollback` hook.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板的*第7行*将此资源声明为`pre-rollback`钩子。
- en: The actual data restore is performed on *lines 18* and *19*. *Line 18* copies
    the `dump.rdb` file from the backup PVC to the Redis master PVC. Once copied,
    *line 19* restarts the database so that the snapshot can be reloaded. The command
    used to restart the Redis database will return a failed exit code because the
    connection to the database will be terminated unexpectedly, but this can be resolved
    by appending `|| true` to the command, which will negate the exit code.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的数据恢复在*第18行*和*第19行*执行。*第18行*将`dump.rdb`文件从备份PVC复制到Redis主PVC。复制后，*第19行*重新启动数据库，以便重新加载快照。用于重新启动Redis数据库的命令将返回失败的退出代码，因为与数据库的连接将意外终止，但可以通过在命令后添加`||
    true`来解决这个问题，这将否定退出代码。
- en: '*Line 29* defines the Redis master volume, and *line 32* defines the desired
    backup volume, which is determined by the revision that it is being rolled back
    to.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*第29行*定义了Redis主卷，*第32行*定义了所需的备份卷，这取决于要回滚到的修订版本。'
- en: With the pre-upgrade and pre-rollback life cycle hooks created, let's see them
    in action by running them in the minikube environment.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了升级前和回滚前的生命周期钩子后，让我们在minikube环境中运行它们，看看它们的作用。
- en: Executing the life cycle hooks
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行生命周期钩子
- en: 'In order to run the life cycle hooks you created, you must first install your
    chart again by running the `helm install` command, as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行您创建的生命周期钩子，您必须首先通过运行`helm install`命令再次安装您的图表，如下所示：
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When each Pod reports the `1/1` `Ready` state, access your Guestbook application
    by following the displayed release notes. Note that the port to access the application
    will be different than it was previously.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 当每个Pod报告`1/1` `Ready`状态时，通过遵循显示的发布说明访问您的Guestbook应用程序。请注意，访问应用程序的端口将与以前不同。
- en: 'Write a message once you access the Guestbook frontend. An example message
    can be seen in the following screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Guestbook前端后写一条消息。示例消息可以在以下截图中看到：
- en: '![Figure 5.10: The Guestbook frontend upon installing the Guestbook chart and
    entering a message'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10：安装Guestbook图表并输入消息后的Guestbook前端'
- en: '](image/Figure_5.10.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.10.jpg)'
- en: 'Figure 5.10: The Guestbook frontend upon installing the Guestbook chart and
    entering a message'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10：安装Guestbook图表并输入消息后的Guestbook前端
- en: 'Once a message has been written and its text is displayed under the **Submit**
    button, run the `helm upgrade` command to trigger the pre-upgrade hook. The `helm
    upgrade` command will hang briefly until the backup has finished, and can be seen
    here:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦写入消息并且其文本显示在**提交**按钮下方，运行`helm upgrade`命令触发pre-upgrade钩子。`helm upgrade`命令将暂时挂起，直到备份完成，并且可以在这里看到：
- en: '[PRE37]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'When the command returns, you should find the Redis master PVC along with a
    new PVC created, called `redis-data-redis-master-0-backup-1`, which can be seen
    here:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令返回时，您应该会发现Redis主PVC以及一个新创建的PVC，名为`redis-data-redis-master-0-backup-1`，可以在这里看到：
- en: '[PRE38]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This PVC contains a data snapshot that can be used to restore the database during
    the pre-rollback life cycle phase.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此PVC包含一个数据快照，可用于在预回滚生命周期阶段恢复数据库。
- en: 'Let''s now proceed to add an additional message to the Guestbook frontend.
    You should have two messages appear under the **Submit** button, as illustrated
    in the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续向Guestbook前端添加额外的消息。您应该在**提交**按钮下看到两条消息，如下面的截图所示：
- en: '![Figure 5.11: Guestbook messages before running the rollback'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11：运行回滚前的Guestbook消息'
- en: '](image/Figure_5.11.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.11.jpg)'
- en: 'Figure 5.11: Guestbook messages before running the rollback'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11：运行回滚前的Guestbook消息
- en: 'Now, run the `helm rollback` command to revert back to the first revision.
    This command will hang briefly until the restore process is finished, and can
    be seen here:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行`helm rollback`命令以恢复到第一个修订版。此命令将暂时挂起，直到恢复过程完成，并且可以在这里看到：
- en: '[PRE39]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When this command returns, refresh your Guestbook frontend in the browser.
    You will see the message you added after the upgrade disappear because it did
    not exist before the data backup was taken, as illustrated in the following screenshot:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当此命令返回时，请在浏览器中刷新您的Guestbook前端。您会看到您在升级后添加的消息消失，因为在进行数据备份之前它不存在，如下面的截图所示：
- en: '![Figure 5.12: The Guestbook frontend after the pre-rollback life cycle phase
    is complete'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12：在预回滚生命周期阶段完成后的Guestbook前端'
- en: '](image/Figure_5.12.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.12.jpg)'
- en: 'Figure 5.12: The Guestbook frontend after the pre-rollback life cycle phase
    is complete'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12：在预回滚生命周期阶段完成后的Guestbook前端
- en: While this backup-and-restore scenario served as a simple use case, it demonstrates
    one of many possibilities that adding Helm life cycle hooks to your charts can
    provide.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个备份和恢复场景只是一个简单的用例，但它演示了向图表添加Helm生命周期钩子可以提供的许多可能性之一。
- en: Important note
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Hooks can be skipped by adding the `--no-hooks` flag to the corresponding life
    cycle command (`helm install`, `helm upgrade`, `helm rollback`, or `helm uninstall`).
    The command to which this command is applied will skip the hooks for that life
    cycle.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在相应的生命周期命令（`helm install`、`helm upgrade`、`helm rollback`或`helm uninstall`）中添加`--no-hooks`标志，可以跳过钩子。应用此命令的命令将跳过该生命周期的钩子。
- en: We will now focus on user input validation and how the Guestbook chart can be
    further improved upon to help prevent improper values from being provided.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于用户输入验证以及如何进一步改进Guestbook图表以帮助防止提供不当值。
- en: Adding input validation
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加输入验证
- en: When working with Kubernetes and Helm, input validation is automatically performed
    by the Kubernetes **application programming interface** (**API**) server when
    a new resource is created. This means that if an invalid resource is created by
    Helm, an error message will be returned by the API server, resulting in a failed
    installation. Although Kubernetes performs native input validation, there may
    still be cases in which chart developers will want to perform validation before
    the resources reach the API server.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Kubernetes和Helm时，当创建新资源时，Kubernetes **应用程序编程接口**（**API**）服务器会自动执行输入验证。这意味着如果Helm创建了无效的资源，API服务器将返回错误消息，导致安装失败。尽管Kubernetes执行原生输入验证，但图表开发人员仍可能希望在资源到达API服务器之前执行验证。
- en: Let's begin exploring how input validation can be performed by using the `fail`
    function in the `guestbook` Helm chart.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始探索如何使用`guestbook` Helm图表中的`fail`函数执行输入验证。
- en: Using the fail function
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用fail函数
- en: The `fail` function is used to immediately fail template rendering. This function
    can be used in cases where users have provided a value that is invalid. In this
    section, we will implement an example use case to restrict user input.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`fail`函数用于立即失败模板渲染。这个函数可以用在用户提供了无效值的情况下。在本节中，我们将实现一个限制用户输入的示例用例。'
- en: 'Your `guestbook` chart''s `values.yaml` file contains a value called `service.type`,
    which is used for determining the type of service that should be created for the
    frontend. This value can be seen here:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`guestbook`图表的`values.yaml`文件包含一个名为`service.type`的值，用于确定应该为前端创建什么类型的服务。这个值可以在这里看到：
- en: '[PRE40]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We set this value to default to `NodePort`, but technically, other service types
    can be used. Imagine you wanted to restrict the service type to only `NodePort`
    and `ClusterIP` services. This action can be performed by using the `fail` function.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个值默认设置为`NodePort`，但从技术上讲，也可以使用其他服务类型。假设你想将服务类型限制为只有`NodePort`和`ClusterIP`服务。这个操作可以通过使用`fail`函数来执行。
- en: 'Follow these steps to restrict the service type in your `guestbook` chart:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤来限制`guestbook`图表中的服务类型：
- en: 'Locate the `templates/service.yaml` service template. This file contains a
    line that sets the service type depending on the `service.type` value, as illustrated
    here:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`templates/service.yaml`服务模板。这个文件包含一行，根据`service.type`值设置服务类型，如下所示：
- en: '[PRE41]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We should check that the `service.type` value first equals `ClusterIP` or `NodePort`
    before setting the service type. This can be done by setting a variable to the
    list of proper settings. Then, a check can be performed to ascertain that the
    `service.type` value is included in the list of valid settings. If it is, then
    proceed to set the service type. Otherwise, chart rendering should be halted and
    an error message should be returned to the user, notifying them of the valid `service.type`
    inputs.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该首先检查`service.type`值是否等于`ClusterIP`或`NodePort`，然后再设置服务类型。这可以通过将一个变量设置为正确设置的列表来实现。然后，可以进行检查以确定`service.type`值是否包含在有效设置的列表中。如果是，那么就继续设置服务类型。否则，图表渲染应该被停止，并向用户返回错误消息，通知他们有效的`service.type`输入。
- en: 'Copy the `service.yaml` file illustrated next to implement the logic described
    in *Step 1*. This file can also be copied from the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/service.yaml:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制下面的`service.yaml`文件来实现*步骤1*中描述的逻辑。这个文件也可以从Packt仓库https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/service.yaml中复制：
- en: '![](image/Figure_5.13.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_5.13.jpg)'
- en: 'Figure 5.13: The service.type validation implemented in the service.yaml template'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13：在service.yaml模板中实现的service.type验证
- en: '*Lines 8* through *13* represent the input validation. *Line 8* creates a variable
    called `serviceTypes` that equals a list of proper service types. *Lines 9* through
    *13* represent an `if` action. The `has` function in *line 9* will check whether
    the `service.type` value is included in `serviceTypes`. If it is, then rendering
    will proceed to *line 10* to set the service''s type. Otherwise, rendering will
    proceed to *line 12*. *Line 12* uses the `fail` function to halt template rendering
    and displays a message to the user about the valid service types.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '*第8行*到*第13行*代表了输入验证。*第8行*创建了一个名为`serviceTypes`的变量，它等于正确的服务类型列表。*第9行*到*第13行*代表了一个`if`操作。*第9行*中的`has`函数将检查`service.type`值是否包含在`serviceTypes`中。如果是，那么渲染将继续到*第10行*来设置服务的类型。否则，渲染将继续到*第12行*。*第12行*使用`fail`函数来停止模板渲染，并向用户显示关于有效服务类型的消息。'
- en: 'Attempt to upgrade your `my-guestbook` release by providing an invalid service
    type (if you have uninstalled your release, an installation will suffice as well).
    To do so, run the following command:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过提供无效的服务类型来升级你的`my-guestbook`发布（如果你已经卸载了你的发布，重新安装也可以）。为此，请运行以下命令：
- en: '[PRE42]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If your changes in the preceding *Step 2* were successful, you should see a
    message similar to the following:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在前面的*步骤2*中的更改成功了，你应该会看到类似以下的消息：
- en: '[PRE43]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: While validating a user's input with `fail` is a good way to ensure that provided
    values fit within a certain set of constraints, there are also occasions where
    you need to ensure that users have even provided certain values in the first place.
    This can be accomplished by using the `required` function, explained in the next
    section.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`fail`验证用户输入是确保提供的值符合一定约束的好方法，但也有时候需要确保用户首先提供了某些值。这可以通过使用下一节中解释的`required`函数来实现。
- en: Using the required function
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`required`函数
- en: The `required` function, like `fail`, is also used to halt template rendering.
    The difference is that, unlike `fail`, the `required` function is used to ensure
    that a value is not left blank when the chart's templates are rendered.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`required`函数和`fail`一样，也用于停止模板渲染。不同之处在于，`required`函数用于确保在图表模板渲染时值不为空。'
- en: 'Recall that your chart contains a value called `image.repository`, as illustrated
    here:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，你的图表中包含一个名为`image.repository`的值，如下所示：
- en: '[PRE44]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This value is used to determine the image that will be deployed. Given this
    value's importance to the Helm chart, we can back it with the `required` function
    to ensure that it always has a value when the chart is installed. Although we
    provide a default in this chart currently, adding the `required` function would
    allow you to remove this default if you wanted to ensure that users always provided
    their own container image.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值用于确定将部署的镜像。考虑到这个值对Helm图表的重要性，我们可以用`required`函数来确保在安装图表时它始终有一个值。虽然我们目前在这个图表中提供了一个默认值，但添加`required`函数可以让你在需要确保用户始终提供自己的容器镜像时删除这个默认值。
- en: 'Follow these steps to implement the `required` function against the `image.repository`
    value:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤对`image.repository`值实施`required`函数：
- en: 'Locate the `templates/deployment.yaml` chart template. The file contains a
    line that sets the container image based on the `image.repository` value (the
    `appName` chart setting also helps to set the container image, but for this example,
    we will focus only on `image.repository`), as illustrated here:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`templates/deployment.yaml`图表模板。该文件包含一行，根据`image.repository`的值设置容器镜像（`appName`图表设置也有助于设置容器镜像，但在这个例子中，我们只关注`image.repository`），如下所示：
- en: '[PRE45]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `required` function takes the following two arguments:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`required`函数接受以下两个参数：'
- en: An error message to display whether the value is provided The value that must
    be provided
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示错误消息，指出是否提供了该值 必须提供的值
- en: Given these two arguments, modify the `deployment.yaml` file so that the `image.repository`
    value is required.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这两个参数，修改`deployment.yaml`文件，使`image.repository`的值是必需的。
- en: 'To add this validation, you can copy from the followi[ng code snippet or reference
    the Packt repository at https://github.com/PacktPublishing/-Learn-Helm/blob/master/h](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/deployment.yaml)elm-charts/charts/guestbook/templates/deployment.yaml:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加这个验证，你可以从以下代码片段中复制，或者参考Packt仓库https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/deployment.yaml中的内容：
- en: '![](image/Figure_5.14.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_5.14.jpg)'
- en: 'Figure 5.14: The deployment.yaml snippet that uses the required function on
    line 28'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14：使用第28行上所需功能的deployment.yaml片段
- en: 'Attempt to upgrade your `my-guestbook` release by providing an empty `image.repository`
    value, as follows:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试通过提供空的`image.repository`值来升级您的`my-guestbook`发布，如下所示：
- en: '[PRE46]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If your changes were successful, you should see an error message similar to
    the following:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的更改成功，您应该会看到类似以下的错误消息：
- en: '[PRE47]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: At this point, you have successfully written your first Helm chart, complete
    with life cycle hooks and input validation!
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已成功编写了您的第一个Helm图表，包括生命周期挂钩和输入验证！
- en: In the next section, you will learn how to create a simple chart repository
    using GitHub Pages, which can be used to make your `guestbook` chart available
    to the world.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何使用GitHub Pages创建一个简单的图表存储库，该存储库可用于使您的`guestbook`图表对世界可用。
- en: Publishing the Guestbook chart to a chart repository
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Guestbook图表发布到图表存储库
- en: Now that you have completed the development of the Guestbook chart, the chart
    can be published to a repository so that it is easily accessible for other users.
    Let's begin by first creating the chart repository.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了Guestbook图表的开发，该图表可以发布到存储库，以便其他用户可以轻松访问。让我们首先创建图表存储库。
- en: Creating a chart repository
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建图表存储库
- en: 'Chart repositories are servers containing two different components, as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图表存储库是包含两个不同组件的服务器，如下所示：
- en: Helm charts, packaged as `tgz` archives
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm图表，打包为`tgz`存档
- en: An `index.yaml` file, containing metadata about the charts contained in the
    repository
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含存储库中包含的图表的元数据的`index.yaml`文件
- en: Basic chart repositories require maintainers to generate their own `index.yaml`
    files, while more complex solutions such as the Helm community's `ChartMuseum`
    tool dynamically generate the `index.yaml` file when new charts are pushed to
    the repository. In this example, we will create a simple chart repository using
    GitHub Pages. GitHub Pages allows maintainers to create a simple static hosting
    site out of a GitHub repository, which can be used to create a basic chart repository
    to serve Helm charts.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的图表存储库要求维护者生成自己的`index.yaml`文件，而更复杂的解决方案，如Helm社区的`ChartMuseum`工具，在推送新图表到存储库时动态生成`index.yaml`文件。在这个例子中，我们将使用GitHub
    Pages创建一个简单的图表存储库。GitHub Pages允许维护者从GitHub存储库创建一个简单的静态托管站点，该站点可用于创建一个基本的图表存储库来提供Helm图表。
- en: You will need to have a GitHub account to create a GitHub Pages chart repository.
    [If you already have a Gi](https://github.com/login)tHub account, you can log
    in at https://githu[b.com/login. Otherwise,](https://github.com/join) you can
    create a new account at https://github.com/join.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个GitHub帐户来创建GitHub Pages图表存储库。[如果您已经有一个Gi](https://github.com/login)tHub帐户，您可以在https://githu[b.com/login登录。否则，](https://github.com/join)您可以在https://github.com/join创建一个新帐户。
- en: 'Once you have logged in to GitHub, follow [these steps to create](https://github.com/new)
    your chart repository:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录GitHub，按照[这些步骤创建](https://github.com/new)您的图表存储库：
- en: Follow the https://github.com/new link to access the **Create a new repository**
    page.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟随https://github.com/new链接访问**创建新存储库**页面。
- en: Provide a name for your chart repository. We suggest the name `Learn-Helm-Chart-Repository`.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的图表存储库提供一个名称。我们建议使用名称`Learn-Helm-Chart-Repository`。
- en: Select the checkbox next to **Initialize this repository with a README**. This
    is required because GitHub does not allow you to create a static site if it does
    not contain any content.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用README初始化此存储库**旁边的复选框。这是必需的，因为GitHub不允许您创建静态站点，如果它不包含任何内容。
- en: You can leave the rest of the settings at their default values. Note that in
    order to leverage GitHub Pages, you must leave the privacy setting set to **Public**
    unless you have a paid GitHub Pro account.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以将其余设置保留为默认值。请注意，为了利用GitHub Pages，除非您拥有付费的GitHub Pro帐户，否则必须将隐私设置保留为**公共**。
- en: Click the **Create Repository** button to finish the repository creation process.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**创建存储库**按钮完成存储库创建过程。
- en: Although your repository has been created, it is not ready to serve Helm charts
    until GitHub Pages is enabled. Click the **Settings** tab within your repository
    to access your repository settings.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管您的存储库已创建，但在启用GitHub Pages之前，它无法提供Helm图表的服务。单击存储库内的**设置**选项卡以访问存储库设置。
- en: Locate the **GitHub Pages** section of the **Settings** page (and **Options**
    tab). It appears toward the bottom of the page.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置**页面（和**选项**选项卡）的**GitHub Pages**部分中找到它，它出现在页面底部。
- en: Under **Source**, select the option in the drop-down list called **master branch**.
    This will allow GitHub to create a static site that serves the contents of your
    master branch.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**来源**下，从下拉列表中选择**主分支**选项。这将允许GitHub创建一个提供主分支内容的静态站点。
- en: 'If you have successfully configured GitHub Pages, you will receive a message
    at the top of the screen that says **GitHub Pages source saved**. You will also
    be able to see the URL to your static site, as displayed in the following example
    screenshot:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您成功配置了GitHub Pages，您将收到屏幕顶部显示的消息，上面写着**GitHub Pages源已保存**。您还将能够看到您静态站点的URL，如下面的示例截图所示：
- en: '![](image/Figure_5.15.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_5.15.jpg)'
- en: 'Figure 5.15: The GitHub Pages settings and example URL'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15：GitHub Pages设置和示例URL
- en: 'Once you have configured your GitHub repository, you should clone it to your
    local machine. Follow these steps to clone your repository:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好GitHub存储库后，您应该将其克隆到本地计算机。按照以下步骤克隆存储库：
- en: Navigate to the root of your repository by selecting the **Code** tab at the
    top of the page.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择页面顶部的**Code**选项卡导航到存储库的根目录。
- en: Select the green **Clone or download** button. This will reveal the URL to your
    GitHub repository. Note that this URL is not the same as your GitHub Pages static
    site.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择绿色的**克隆或下载**按钮。这将显示您的GitHub存储库的URL。请注意，此URL与您的GitHub Pages静态站点不同。
- en: 'You can use the following example screenshot as a reference to find your GitHub
    repository URL, if necessary:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您可以使用以下示例截图来查找您的GitHub存储库URL：
- en: '![Figure 5.16: Your GitHub repository URL can be found by clicking the Clone
    or download button'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.16：单击克隆或下载按钮即可找到您的GitHub存储库URL'
- en: '](image/Figure_5.16.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.16.jpg)'
- en: 'Figure 5.16: Your GitHub repository URL can be found by clicking the Clone
    or download button'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16：单击克隆或下载按钮即可找到您的GitHub存储库URL
- en: 'Once you have acquired your repository''s `git` reference, clone the repository
    to your local machine. Make sure you are not inside your `guestbook` directory
    when running the following command, as we want this repository to be separate
    from the `guestbook` chart:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您获得了存储库的`git`引用，就将存储库克隆到本地计算机。确保在运行以下命令时不在`guestbook`目录内，因为我们希望该存储库与`guestbook`图表分开。
- en: '[PRE48]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Once you have cloned the repository, continue to the next section to publish
    your `guestbook` chart to your chart repository.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您克隆了存储库，继续下一节将`guestbook`图表发布到您的图表存储库。
- en: Publishing the Guestbook Helm chart
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布Guestbook Helm图表
- en: Helm provides a couple of different commands to make publishing a Helm chart
    a simple task. However, before running these commands, you may find it necessary
    to increment your chart's `version` field in the `Chart.yaml` file. Versioning
    your charts is an important part of the release process, as is the case in other
    types of software.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: Helm提供了几个不同的命令来使发布Helm图表成为一个简单的任务。然而，在运行这些命令之前，您可能会发现需要增加您的图表的`version`字段在`Chart.yaml`文件中。对您的图表进行版本控制是发布过程的重要部分，就像其他类型的软件一样。
- en: 'Modify the version field in your chart''s `Chart.yaml` file to 1.0.0, as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 修改您的图表的`Chart.yaml`文件中的版本字段为1.0.0，如下所示：
- en: '[PRE49]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Once your `guestbook` chart''s version has been incremented, you can proceed
    by packaging your chart into a `tgz` archive. This can be accomplished using the
    `helm package` command. Run this command from one level above your local `guestbook`
    directory, as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的`guestbook`图表的版本已经增加，您可以继续将您的图表打包成一个`tgz`存档。这可以通过使用`helm package`命令来完成。从您本地`guestbook`目录的上一级运行此命令，如下所示：
- en: '[PRE50]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: If successful, this will create a file called `guestbook-1.0.0.tgz`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，这将创建一个名为`guestbook-1.0.0.tgz`的文件。
- en: Important note
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When working with charts that contain dependencies, the `helm package` command
    requires those dependencies to be downloaded to the `charts/` directory in order
    to successfully package the chart. If your `helm package` command failed, check
    that your Redis dependency has been downloaded to the `charts/` directory. If
    it has not, you can add the `--dependency-update` flag to `helm package`, which
    will download the dependency and package your Helm chart in the same command.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理包含依赖关系的图表时，`helm package`命令需要将这些依赖关系下载到`charts/`目录中，以便成功打包图表。如果您的`helm package`命令失败了，请检查您的Redis依赖是否已经下载到`charts/`目录中。如果没有，您可以在`helm
    package`中添加`--dependency-update`标志，这将在同一命令中下载依赖并打包您的Helm图表。
- en: 'Once your chart is packaged, the resulting `tgz` file should be copied to the
    clone of your GitHub chart repository by running the following command:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的图表被打包，通过运行以下命令将生成的`tgz`文件复制到您的GitHub图表仓库的克隆中：
- en: '[PRE51]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'When this file is copied, you can use the `helm repo index` command to generate
    the `index.yaml` file for your Helm repository. This command takes as an argument
    the location of your chart repository clone. Run the following command to generate
    your `index.yaml` file:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个文件被复制后，您可以使用`helm repo index`命令为您的Helm仓库生成`index.yaml`文件。这个命令以您的图表仓库克隆的位置作为参数。运行以下命令来生成您的`index.yaml`文件：
- en: '[PRE52]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This command will succeed quietly, but you will see the new `index.yaml` file
    inside the `Learn-Helm-Chart-Repository` folder. The contents of this file provide
    the `guestbook` chart metadata. If there were other charts contained in this repository,
    their metadata would appear in this file as well.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会悄悄地成功，但是你会在`Learn-Helm-Chart-Repository`文件夹内看到新的`index.yaml`文件。这个文件的内容提供了`guestbook`图表的元数据。如果这个仓库中还包含其他图表，它们的元数据也会出现在这个文件中。
- en: 'Your Helm chart repository should now contain the `tgz` archive and the `index.yaml`
    file. Push these files to GitHub by using the following `git` commands:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Helm图表仓库现在应该包含`tgz`存档和`index.yaml`文件。通过使用以下`git`命令将这些文件推送到GitHub：
- en: '[PRE53]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You may be prompted to enter your GitHub credentials. Once provided, your local
    contents will be pushed to the remote repository, and your `guestbook` Helm chart
    will be served from the GitHub Pages static site.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会被提示输入您的GitHub凭据。一旦提供，您的本地内容将被推送到远程仓库，您的`guestbook` Helm图表将从GitHub Pages静态站点提供服务。
- en: Next, let's add your chart repository to your local Helm client.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将您的图表仓库添加到本地的Helm客户端中。
- en: Adding your chart repository
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加您的图表仓库
- en: Similar to the process for other chart repositories, you must first know the
    URL to your GitHub Pages chart repository in order to add it locally. This URL
    was displayed in the **Settings** tab, as described in the *Creating a chart repository*
    section.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他图表存储库的过程类似，您必须首先知道您的GitHub Pages图表存储库的URL，以便将其添加到本地。 此URL显示在“设置”选项卡中，如“创建图表存储库”部分所述。
- en: 'Once you know your chart repository''s URL, you can add this repository locally
    with the `helm repo add` command, as follows:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您知道您的图表存储库的URL，您可以使用`helm repo add`命令将此存储库添加到本地，如下所示：
- en: '[PRE54]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This command will allow your local Helm client to interact with your repository
    with the name `learnhelm`. You can verify that your chart was published by searching
    for the `guestbook` chart against your locally configured repos. This can be done
    by running the following command:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将允许您的本地Helm客户端与名为`learnhelm`的存储库进行交互。 您可以通过搜索您的本地配置的存储库来验证您的图表是否已发布。 可以通过运行以下命令来完成此操作：
- en: '[PRE55]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You should find the `learnhelm/guestbook` chart returned in the search output.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在搜索输出中找到`learnhelm/guestbook`图表。
- en: With your `guestbook` chart successfully published, let's finish by cleaning
    up your minikube environment.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 成功发布`guestbook`图表后，让我们通过清理minikube环境来结束。
- en: Cleaning up
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'You can clean up your environment by deleting the `chapter5` namespace, as
    follows:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过删除`chapter5`命名空间来清理环境，方法如下：
- en: '[PRE56]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: If you have finished working, you can also stop your minikube cluster with the
    `minikube stop` command.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经完成工作，还可以使用`minikube stop`命令停止您的minikube集群。
- en: Summary
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to build a Helm chart from scratch by writing
    a chart to deploy the Guestbook application. You began by creating a chart that
    deployed the Guestbook frontend and a Redis dependency chart, and you later improved
    upon this chart by writing life cycle hooks and adding input validation. You concluded
    this chapter by building your own chart repository with GitHub Pages and publishing
    your `guestbook` chart to this location.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何通过编写一个部署Guestbook应用程序的图表来从头开始构建Helm图表。 您首先创建了一个部署Guestbook前端和Redis依赖图表的图表，然后通过编写生命周期挂钩和添加输入验证来改进了此图表。
    最后，通过使用GitHub Pages构建自己的图表存储库并将`guestbook`图表发布到此位置来结束了本章。
- en: In the next chapter, you will learn strategies around testing and debugging
    a Helm chart, to enable you to further strengthen your chart development skills.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关测试和调试Helm图表的策略，以帮助您进一步加强图表开发技能。
- en: Further reading
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For additional information on the Guestbook application, please refer to the
    *Deploying PHP Guestbook applica*[*tion with Redis* tutorial from the Kubernetes
    documentation, at https:](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)//kubernetes.io/docs/tutorials/stateless-application/guestbook/.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Guestbook应用程序的其他信息，请参阅Kubernetes文档中的“使用Redis部署PHP Guestbook应用程序”教程，网址为https://kubernetes.io/docs/tutorials/stateless-application/guestbook/。
- en: To learn more about developing Helm chart templates, please refer to the followi[ng
    links:](https://helm.sh/docs/chart_template_guide/getting_started/)
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关开发Helm图表模板的更多信息，请参考以下链接：
- en: '[*Chart Development Guide from the Helm documentat*](https://helm.sh/docs/chart_template_guide/getting_started/)*ion*:
    https://helm.sh/docs/chart_template_guide/gettin[g_started/](https://helm.sh/docs/topics/chart_best_practices/conventions/)'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm文档中的图表开发指南：https://helm.sh/docs/chart_template_guide/getting_started/
- en: '[*List of best practices from the Helm documentation*](https://helm.sh/docs/topics/chart_best_practices/conventions/):
    https://helm.sh/docs/topics/chart_best[_practices/conventions/](https://helm.sh/docs/topics/charts_hooks/)'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Helm文档的最佳实践列表：https://helm.sh/docs/topics/chart_best_practices/conventions/
- en: '[Additional inform](https://helm.sh/docs/topics/charts_hooks/)ation on chart
    hooks: https://helm.s[h/docs/topics/charts_hooks/](https://helm.sh/docs/topics/chart_repository/)'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关图表钩子的附加信息：https://helm.sh/docs/topics/charts_hooks/
- en: '[Information on ch](https://helm.sh/docs/topics/chart_repository/)art repositories:
    https://helm.sh/docs/topics/chart_repository/'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表存储库的信息：https://helm.sh/docs/topics/chart_repository/
- en: Questions
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which command can be used to scaffold a new Helm chart?
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用哪个命令来创建一个新的Helm图表脚手架？
- en: Which key advantages did declaring a Redis chart dependency provide when developing
    the `guestbook` chart?
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发“guestbook”图表时，声明Redis图表依赖提供了哪些关键优势？
- en: What annotation can be used to set the execution order of hooks for a given
    life cycle phase?
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用哪个注释来设置给定生命周期阶段的钩子的执行顺序？
- en: What are the common use cases for using the `fail` function? What about the
    `required` function?
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“fail”函数的常见用例是什么？“required”函数呢？
- en: Which Helm commands are involved in order to publish a Helm chart to a GitHub
    Pages chart repository?
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将Helm图表发布到GitHub Pages图表存储库，涉及哪些Helm命令？
- en: What is the purpose of the `index.yaml` file in a chart repository?
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图表存储库中的“index.yaml”文件的目的是什么？
