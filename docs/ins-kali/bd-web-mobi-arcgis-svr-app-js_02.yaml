- en: Chapter 2. Creating Maps and Adding Layers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。创建地图和添加图层
- en: Now that we've got some of the basics of HTML, CSS, and JavaScript out of the
    way, it's time to actually get to work and learn how to build some great GIS web
    applications! The material in this chapter will introduce you to some of the fundamental
    concepts that define how you create a map and add information to it in the form
    of layers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了HTML、CSS和JavaScript的一些基础知识，现在是时候真正开始工作，学习如何构建一些出色的GIS Web应用程序了！本章的内容将向您介绍一些基本概念，这些概念定义了您如何创建地图并以图层的形式添加信息。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The ArcGIS API for JavaScript Sandbox
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript API for ArcGIS沙盒
- en: Basic steps to create an application with the ArcGIS API for JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ArcGIS JavaScript API创建应用程序的基本步骤
- en: More about the map
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于地图的更多信息
- en: Working with map service layers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用地图服务图层
- en: Tiled map service layers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片地图服务图层
- en: Dynamic map service layers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态地图服务图层
- en: Map navigation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图导航
- en: Working with the map extent
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用地图范围
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: We all have to start somewhere when learning a new programming language or **application
    programming interface** (**API**). The same applies to creating web-mapping applications
    with the ArcGIS API for JavaScript. Not only do you need to understand some basic
    JavaScript concepts, but you also need to have a grasp of HTML, CSS, and of course
    the ArcGIS API for JavaScript, which is actually built on top of the Dojo JavaScript
    framework. That's a lot to put on your plate all at once, so in this chapter,
    I'm going to have you create a very basic application, which will serve as a foundation
    that you can build on in the coming chapters. Mimicry is an excellent way to learn
    programming skills, so in this chapter, I'm just going to have you type in the
    code that you see and I'll provide some explanation along the way. I'll save the
    detailed descriptions of the code for later chapters.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习新的编程语言或应用程序编程接口（API）时，我们都必须从某个地方开始。在使用ArcGIS JavaScript API创建Web地图应用程序时也是如此。您不仅需要了解一些基本的JavaScript概念，还需要掌握HTML、CSS，当然还有ArcGIS
    JavaScript API，它实际上是建立在Dojo JavaScript框架之上的。一下子就要掌握这么多知识，所以在本章中，我将让您创建一个非常基本的应用程序，这将成为您在接下来的章节中可以构建的基础。模仿是学习编程技能的一种绝佳方式，因此在本章中，我只会让您输入您看到的代码，并且我会在途中提供一些解释。我将把对代码的详细描述留到以后的章节中。
- en: To get your feet wet with the ArcGIS API for JavaScript, you're going to create
    a simple mapping application in this chapter, which creates a map, adds a couple
    of data layers, and provides some basic map navigation capabilities.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您对ArcGIS JavaScript API有所了解，您将在本章中创建一个简单的地图应用程序，该应用程序创建地图，添加了一些数据图层，并提供了一些基本的地图导航功能。
- en: There are some basic steps that you must follow to create any web-mapping application
    with the ArcGIS API for JavaScript. You'll see each of these steps for the first
    time in this chapter, and we'll describe them in greater detail later in the book.
    These basic steps will be followed each time you create a new application using
    the API for JavaScript. The first few times that you create an application, these
    steps will seem a little strange but you'll quickly gain an understanding of what
    they do and why they are necessary. Pretty soon you can just think of these steps
    as a template you use with every application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ArcGIS JavaScript API创建任何Web地图应用程序都必须遵循一些基本步骤。您将在本章中首次看到这些步骤的每一个，并且我们将在本书的后面更详细地描述它们。每次使用JavaScript
    API创建新应用程序时，都将遵循这些基本步骤。在创建应用程序的最初几次，这些步骤可能会显得有些奇怪，但您很快就会理解它们的作用和必要性。很快，您就可以将这些步骤视为您在每个应用程序中使用的模板。
- en: Let's get started!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: The ArcGIS API for JavaScript Sandbox
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArcGIS JavaScript API沙盒
- en: 'In this book, you''re going to use the ArcGIS API for JavaScript Sandbox to
    write and test your code. The Sandbox can be found at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)
    and will appear as seen in the following screenshot, when loaded. You''ll write
    your code in the left pane and click the **Run** button to see the results in
    the right pane, as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将使用ArcGIS JavaScript API沙盒来编写和测试您的代码。沙盒可以在[http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)找到，并且加载后将显示如下屏幕截图所示。您将在左窗格中编写代码，并单击“运行”按钮以在右窗格中查看结果，如下屏幕截图所示：
- en: '![The ArcGIS API for JavaScript Sandbox](graphics/7965OT_02_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![ArcGIS JavaScript API沙盒](graphics/7965OT_02_01.jpg)'
- en: Basic steps for creating an application with the ArcGIS API for JavaScript
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ArcGIS JavaScript API创建应用程序的基本步骤
- en: 'There are several steps that you''ll need to follow to create any GIS web application
    with the ArcGIS API for JavaScript. These steps will always need to be performed
    if you intend to have a map as part of your application. And I can''t imagine
    that you wouldn''t want to do that, given that you''re reading this book! In a
    nutshell, there are several steps you need to follow:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任何GIS Web应用程序都需要遵循几个步骤，这些步骤将始终需要执行，如果您打算将地图作为应用程序的一部分。考虑到您正在阅读本书，我无法想象您不想这样做！简而言之，您需要遵循以下几个步骤：
- en: Creating the HTML code for the page.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为页面创建HTML代码。
- en: Referencing the ArcGIS API for JavaScript and stylesheets.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用ArcGIS JavaScript API和样式表。
- en: Loading modules.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载模块。
- en: Making sure the DOM is available.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保DOM可用。
- en: Creating the map.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建地图。
- en: Defining the page content.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义页面内容。
- en: Styling the page.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面样式。
- en: This was just a brief description of what needs to be done. We'll examine each
    of these steps in greater detail in the coming pages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是对需要做的事情的简要描述。我们将在接下来的页面中更详细地讨论这些步骤。
- en: Creating HTML code for a web page
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Web页面创建HTML代码
- en: 'In the previous chapter, you learned the basic concepts of HTML, CSS, and JavaScript.
    Now, you''re going to start putting those skills to work. You first need to create
    a simple HTML document that will ultimately serve as the container for your map.
    Since we''re using the ArcGIS API for JavaScript Sandbox, this step has already
    been done for you. However, I do want you to spend some time examining the code
    so that you have a good grasp of the concepts. In the left pane of the Sandbox,
    the code you see highlighted in the following code example references the basic
    HTML code for the web page. There''s obviously some other HTML and JavaScript
    code in there as well, but the following code forms the basic components of the
    web page. This code includes several basic tags, including `<html>`, `<head>`,
    `<title>`, `<body>`, and a few others:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了HTML、CSS和JavaScript的基本概念。现在，您将开始将这些技能付诸实践。您首先需要创建一个简单的HTML文档，最终将作为地图的容器。由于我们使用ArcGIS
    API for JavaScript Sandbox，这一步已经为您完成。但是，我希望您花一些时间来检查代码，以便对概念有一个良好的理解。在Sandbox的左窗格中，您可以看到以下代码示例中突出显示的代码引用了网页的基本HTML代码。显然，其中还有其他HTML和JavaScript代码，但以下代码构成了网页的基本组件。这段代码包括了几个基本标签，包括`<html>`、`<head>`、`<title>`、`<body>`和其他一些标签：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Referencing the ArcGIS API for JavaScript
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用ArcGIS API for JavaScript
- en: 'To begin working with the ArcGIS API for JavaScript, you need to add references
    to the stylesheet and API. In the Sandbox, the following lines of code have been
    added inside the `<head>` tag:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用ArcGIS API for JavaScript，您需要添加对样式表和API的引用。在Sandbox中，以下代码已经添加到`<head>`标签内：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `<script>` tag loads the ArcGIS API for JavaScript. At the time of writing
    this chapter, the current version is 3.7\. When new versions of the API are released,
    you'll want to update this number accordingly. The `<link>` tag loads the `esri.css`
    stylesheet, which contains styles specific to Esri widgets and components.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`<script>`标签加载了ArcGIS API for JavaScript。在撰写本章时，当前版本为3.7。当API的新版本发布时，您需要相应地更新这个数字。`<link>`标签加载了`esri.css`样式表，其中包含了Esri小部件和组件的特定样式。'
- en: 'Optionally, you can include a reference to one of the stylesheets for a Dojo
    Dijit theme. The ArcGIS API for JavaScript is built directly on the Dojo JavaScript
    framework. Dojo comes with four predefined themes that control the look of user
    interface widgets that are added to your application: Claro, Tundra, Soria, and
    Nihilo. In the following code example, I''m referencing the Claro theme:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，您可以包含对Dojo Dijit主题之一的样式表的引用。ArcGIS API for JavaScript直接构建在Dojo JavaScript框架上。Dojo带有四个预定义的主题，控制着添加到您的应用程序中的用户界面小部件的外观：Claro、Tundra、Soria和Nihilo。在以下代码示例中，我引用了Claro主题：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The other available stylesheets can be referenced as seen in the following
    code example. You don''t have to reference any of the style sheets, but if you
    intend to add Dojo user interface components (Dijits), then you''ll want to load
    one of the stylesheets to control the styling of the components:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可用的样式表可以像以下代码示例中所示进行引用。您不必引用任何样式表，但如果您打算添加Dojo用户界面组件（Dijits），那么您需要加载其中一个样式表来控制组件的样式：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The website [www.dojotoolkit.org](http://www.dojotoolkit.org) provides a theme
    tester that you can use to get a feel for how each of the themes affect the display
    of the user interface components. The theme tester is located at [http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html](http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html).
    The following screenshot shows the Dijit Theme Tester interface:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 网站[www.dojotoolkit.org](http://www.dojotoolkit.org)提供了一个主题测试器，您可以使用它来感受每个主题对用户界面组件显示的影响。主题测试器位于[http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html](http://archive.dojotoolkit.org/nightly/dojotoolkit/dijit/themes/themeTester.html)。以下截图显示了Dijit主题测试器界面：
- en: '![Referencing the ArcGIS API for JavaScript](graphics/7965OT_02_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![引用ArcGIS API for JavaScript](graphics/7965OT_02_02.jpg)'
- en: Loading modules
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载模块
- en: Before you can create a `Map` object, you must first reference the resource
    that provides the map. This is accomplished through the use of a `require()` function.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Map`对象之前，您必须首先引用提供地图的资源。这是通过使用`require()`函数来实现的。
- en: Legacy or AMD Dojo?
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遗留样式还是AMD Dojo？
- en: Whether to use the older legacy style of Dojo or the new AMD is currently a
    source of frustration for many developers. **Asynchronous Model Definition** (**AMD**)
    was introduced in Version 1.7 of Dojo. The Version 3.4 release of the ArcGIS Server
    API for JavaScript was the first version to have all modules rewritten using the
    new AMD style. For the time being, both the legacy and AMD style will work just
    fine, but it is advised that any new applications be written using the new AMD
    style. We'll follow that convention in this book but keep in mind that applications
    written prior to the release of Version 3.4 of the API and some Esri samples still
    reflect the older style of coding.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用旧的Dojo遗留样式还是新的AMD目前是许多开发人员的挫折之源。**异步模型定义**（**AMD**）是在Dojo的1.7版本中引入的。ArcGIS
    Server API for JavaScript的3.4版本发布是第一个使用新的AMD样式重写所有模块的版本。目前，旧的遗留样式和AMD样式都可以正常工作，但建议使用新的AMD样式编写任何新的应用程序。我们将在本书中遵循这个惯例，但请记住，在3.4版本发布之前编写的应用程序和一些Esri示例仍反映了旧的编码风格。
- en: 'The `require()` function is used to import resources into your web page. Various
    resources are provided by the ArcGIS API for JavaScript, including the `esri/map`
    resource, which must be provided before you can create a map or work with geometry,
    graphics, and symbols. Once a reference to the resource has been provided, you
    can use the `Map` constructor to create the `Map`. The following points show how
    to run the code in Sandbox:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`require()`函数用于将资源导入到您的网页中。ArcGIS API for JavaScript提供了各种资源，包括`esri/map`资源，必须在创建地图或处理几何、图形和符号之前提供。一旦提供了对资源的引用，您就可以使用`Map`构造函数来创建`Map`。以下几点展示了如何在Sandbox中运行代码：'
- en: 'Before you begin adding code to the Sandbox, remove the following highlighted
    code, if necessary. The code I''m having you remove is from a legacy style of
    coding the ArcGIS API for JavaScript. We''re going to use the new AMD style. In
    future versions of the Sandbox, it may not be necessary to remove these lines
    of code. I expect that Esri will eventually migrate this basic code block to the
    newer AMD style:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始向沙盒添加代码之前，如果需要，请删除以下突出显示的代码。我让您删除的代码来自对ArcGIS API for JavaScript的传统编码风格。我们将使用新的AMD风格。在将来的Sandbox版本中，可能不需要删除这些代码行。我预计Esri最终将基本代码块迁移到更新的AMD风格：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The resources you import need to be contained within a new `<script>` tag.
    Add the following highlighted lines of code to the Sandbox inside the `<script>`
    tag. The argument names used inside the `require()` function can be named anything
    you like. However, both Esri and Dojo provide a list of preferred arguments. I
    recommend using the Esri list of preferred arguments when naming arguments passed
    to the `require` callback function. Dojo also does the same with their list of
    preferred argument aliases. For example, in the following code you add, we provide
    a reference to the `esri/map` resource and then inside the anonymous function,
    we provide a preferred argument of `Map`. Each resource that you reference in
    the `require()` function will have an associated argument, which will provide
    a hook into the object for that resource:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您导入的资源需要包含在新的`<script>`标签中。将以下突出显示的代码行添加到`<script>`标签内的沙盒中。`require()`函数内部使用的参数名称可以是任何您喜欢的名称。但是，Esri和Dojo都提供了一组首选参数。我建议在为`require`回调函数传递参数时使用Esri首选参数列表。Dojo也使用其首选参数别名。例如，在您添加的以下代码中，我们提供了对`esri/map`资源的引用，然后在匿名函数内部，我们提供了一个首选参数`Map`。在`require()`函数中引用的每个资源都将有一个相关的参数，这将为该资源提供一个对象的钩子：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Making sure Document Object Model is available
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保文档对象模型可用
- en: When a web page loads, all the HTML elements that compose the page are loaded
    and interpreted. This is known as **Document Object Model** (**DOM**). It is imperative
    that your JavaScript does not attempt to access any of these elements until all
    the elements have loaded. Obviously, if your JavaScript code attempted to access
    an element that hasn't been loaded yet, it would cause an error. To control this,
    Dojo has a `ready()` function that you can include inside the `require()` function,
    which will execute only after all the HTML elements and any modules have loaded.
    Alternatively, you can use the `dojo/domReady!` plugin to ensure that all the
    HTML elements have been loaded. We'll use the second method for this exercise.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当网页加载时，组成页面的所有HTML元素都会被加载和解释。这被称为**文档对象模型**（**DOM**）。非常重要的是，您的JavaScript在所有元素加载之前不要尝试访问任何这些元素。显然，如果您的JavaScript代码尝试访问尚未加载的元素，将会导致错误。为了控制这一点，Dojo有一个`ready()`函数，您可以将其包含在`require()`函数内部，这样它将仅在所有HTML元素和任何模块加载后执行。或者，您可以使用`dojo/domReady!`插件来确保所有HTML元素都已加载。我们将使用第二种方法进行此练习。
- en: In the previous code, we have used the plugin with `dojo/domReady!` having been
    added to the `require()` function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已经使用了带有`dojo/domReady!`的插件添加到`require()`函数中。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although it is certainly possible to add JavaScript code directly inside your
    basic HTML file, it is a better practice to create a separate JavaScript file
    (`.js`). Most of the code that we write in this book will be done inside an HTML
    file for simplicity, but as your applications become more complex, you'll want
    to adhere to the practice of writing your JavaScript code in a separate file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在基本的HTML文件中直接添加JavaScript代码是完全可能的，但最好的做法是创建一个单独的JavaScript文件（.js）。我们在本书中编写的大部分代码都将在HTML文件中完成，以简化操作，但随着您的应用程序变得更加复杂，您将希望遵循将JavaScript代码编写到单独文件的做法。
- en: Creating the map
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建地图
- en: The creation of a new map is done through `esri/map`, which is a reference to
    the `Map` class found in the `esri/map` module you imported in a previous step.
    Inside the `require()` function, you're going to create a new `Map` object using
    a constructor function. This constructor for the `Map` object accepts two parameters,
    including a reference to the `<div>` tag where the map will be placed on the web
    page as well as an options parameter that can be used to define various map setup
    options. The `options` parameter is defined as a JSON object that contains a set
    of key/value pairs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`esri/map`创建新地图，这是您在先前步骤中导入的`esri/map`模块中找到的`Map`类的引用。在`require()`函数内部，您将使用构造函数创建一个新的`Map`对象。`Map`对象的构造函数接受两个参数，包括一个引用到网页上放置地图的`<div>`标签以及一个可用于定义各种地图设置选项的选项参数。`options`参数被定义为一个包含一组键/值对的JSON对象。
- en: Perhaps the most visible option is `basemap`, which allows you to select a predefined
    basemap from [ArcGIS.com](http://ArcGIS.com) and can include `streets`, `satellite`,
    `hybrid`, `topo`, `gray`, `oceans`, `national-geographic`, or `osm`. The `zoom`
    option is used to define a starting zoom level for the map and can be an integer
    value that corresponds to a predefined zoom scale level. The `minZoom` and `maxZoom`
    options define the smallest and largest-scale zoom levels for the map. The `center`
    option defines the center point of the map that will initially be displayed and
    uses a `Point` object containing a latitude/longitude coordinate pair. There are
    a number of additional options that you pass in as parameters to the constructor
    for the `Map` object.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最显眼的选项是`basemap`，它允许您从[ArcGIS.com](http://ArcGIS.com)选择预定义的底图，可以包括`streets`、`satellite`、`hybrid`、`topo`、`gray`、`oceans`、`national-geographic`或`osm`。`zoom`选项用于定义地图的起始缩放级别，可以是与预定义缩放比例级别对应的整数值。`minZoom`和`maxZoom`选项定义地图的最小和最大比例缩放级别。`center`选项定义地图的中心点，最初将显示并使用包含纬度/经度坐标对的`Point`对象。还有许多其他选项，您可以将其作为参数传递给`Map`对象的构造函数。
- en: 'First, we''ll create a global variable called `map` as well as the `require()`
    function by adding the highlighted line of the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将通过添加以下代码的突出显示行来创建一个名为`map`的全局变量以及`require()`函数：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following highlighted code block to the `require()` function. This
    line of code is the constructor for the new `Map` object. The first parameter
    passed into the constructor is a reference to the ID of the `<div>` tag where
    the map will be placed. We haven''t defined this `<div>` tag yet, but we''ll do
    so in the next step. The second parameter passed into the `Map` constructor is
    a JSON object that defines options including the geographic coordinate that will
    serve as the center of the map, a zoom level, and the `topo` basemap:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下突出显示的代码块添加到`require()`函数中。这行代码是新`Map`对象的构造函数。传递给构造函数的第一个参数是指向地图将放置的`<div>`标签的ID的引用。我们还没有定义这个`<div>`标签，但我们将在下一步中这样做。传递给`Map`构造函数的第二个参数是一个定义选项的JSON对象，包括将作为地图中心的地理坐标、缩放级别和`topo`底图。
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Creating the page content
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建页面内容
- en: One of the final steps is to create the HTML `<div>` tag that will serve as
    the container for the map. You always want to assign a unique ID to the `<div>`
    tag so that your JavaScript code can reference the location. In the Sandbox this
    `<div>` tag with a unique identifier of `mapDiv` has already been created for
    you. You can see this in the highlighted line of following code. In addition,
    you will also want to define the class attribute for the `<body>` tag, which should
    reference the Dojo stylesheet that you referenced.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步之一是创建HTML `<div>`标签，作为地图的容器。您总是希望为`<div>`标签分配一个唯一的ID，以便您的JavaScript代码可以引用该位置。在Sandbox中，这个带有唯一标识符`mapDiv`的`<div>`标签已经为您创建。您可以在下面的代码的突出显示行中看到这一点。此外，您还需要为`<body>`标签定义类属性，该属性应引用您引用的Dojo样式表。
- en: 'In the following code, you can see the `<body>` tag that is already created
    in the Sandbox accomplishes the preceding two tasks:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，您可以看到Sandbox中已经创建的`<body>`标签完成了前面两个任务：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Styling the page
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为页面添加样式
- en: 'You can add styling information to the `<head>` tag that will define various
    styling aspects for the web page. In this case, the styling has already been created
    for you in the Sandbox, as shown in the following code. In this case, the styling
    includes setting the map so that it fills the entire browser window:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向`<head>`标签添加样式信息，以定义网页的各种样式方面。在这种情况下，样式已经在Sandbox中为您创建，如下面的代码所示。在这种情况下，样式包括设置地图以填满整个浏览器窗口：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The complete code
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整的代码
- en: 'The code for this simple application should appear as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单应用程序的代码应该如下所示：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Execute the code by clicking on the **Run** button and you should see the following
    output, if everything has been coded correctly:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Run**按钮执行代码，如果一切编码正确，您应该看到以下输出：
- en: '![The complete code](graphics/7965OT_02_16.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![完整的代码](graphics/7965OT_02_16.jpg)'
- en: More about the map
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于地图的更多信息
- en: In the process described earlier, we introduced the process that you'll need
    to follow for each application that you build with the ArcGIS API for JavaScript.
    You learned how to create an initialization JavaScript function. The purpose of
    the initialization script is to create your map, add layers, and perform any other
    setup routines necessary to get your application started. Creating a map is invariably
    one of the first things that you'll do and in this section, we'll take a closer
    look at the various options you have to create an instance of the `Map` class.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面描述的过程中，我们介绍了使用ArcGIS API for JavaScript构建每个应用程序时需要遵循的流程。您学会了如何创建一个初始化JavaScript函数。初始化脚本的目的是创建地图，添加图层，并执行任何其他必要的设置例程，以启动应用程序。创建地图通常是您要做的第一件事，在本节中，我们将更仔细地看看您创建`Map`类实例的各种选项。
- en: In object-oriented programming, the creation of a class instance is often done
    through the use of a constructor. A constructor is a function that is used to
    create or initialize a new object. In this case, the constructor is used to create
    a new `Map` object. Constructors frequently take one or more parameters that can
    be used to set the initial state of an object.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程中，通过构造函数来创建类实例是经常通过构造函数来完成的。构造函数是用于创建或初始化新对象的函数。在这种情况下，构造函数用于创建新的`Map`对象。构造函数通常接受一个或多个参数，这些参数可用于设置对象的初始状态。
- en: The `Map` constructor can take two parameters including the container where
    the map should reside and various options for the map. However, before you can
    call the constructor for a map, you must first reference the resource that provides
    the map. This is accomplished by importing the `esri/map` resource. Once a reference
    to the resource has been provided, you can use the constructor to create the map.
    A `<div>` ID is a required parameter for the constructor and is used to specify
    the container for the map. In addition, you can also pass multiple options that
    control various aspects of the map, including the basemap layer, the initial display
    of the map center, display of navigation controls, graphic display during panning,
    control of the slider, levels of detail, and many more.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map`构造函数可以接受两个参数，包括地图应该驻留的容器和地图的各种选项。但是，在调用地图的构造函数之前，您必须首先引用提供地图的资源。这是通过导入`esri/map`资源来实现的。一旦提供了对资源的引用，您就可以使用构造函数来创建地图。`<div>`
    ID是构造函数的必需参数，用于指定地图的容器。此外，您还可以传递多个选项，以控制地图的各个方面，包括底图图层、地图中心的初始显示、导航控件的显示、平移期间的图形显示、滑块的控制、详细级别等等。'
- en: 'Let''s take a closer look at how options are specified in the map constructor.
    Options, the second parameter in the constructor, are always enclosed with brackets.
    This defines the contents of a JSON object. Inside the brackets, each option has
    a specific name and is followed by a colon and then the data value that controls
    the option. In the event that you need to submit multiple options to the constructor,
    each option is separated by a comma. The following code example shows how options
    are submitted to the `Map` constructor:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下在地图构造函数中如何指定选项。选项是构造函数中的第二个参数，总是用括号括起来。这定义了JSON对象的内容。在括号内，每个选项都有一个特定的名称，后面跟着一个冒号，然后是控制该选项的数据值。如果您需要向构造函数提交多个选项，每个选项之间用逗号分隔。以下代码示例显示了如何向`Map`构造函数提交选项：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, we are defining options for the map coordinate that will serve
    as the center of the map, along with a zoom level and a basemap layer of streets.
    These options are enclosed with curly braces and are separated by commas.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在为地图坐标定义选项，该坐标将作为地图的中心，以及缩放级别和街道的底图图层。这些选项用花括号括起来，并用逗号分隔。
- en: Working with map service layers
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用地图服务层
- en: 'A map without data layers is sort of like an artist with a blank canvas. The
    data layers that you add to your map give it meaning and set the stage for analysis.
    There are two primary types of map services that provide data layers that can
    be added to your map: dynamic map service layers and tiled map service layers.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 没有数据层的地图有点像一块空白的画布。您添加到地图上的数据层赋予了它意义，并为分析设置了舞台。提供可以添加到地图上的数据层的两种主要类型的地图服务：动态地图服务层和瓦片地图服务层。
- en: 'Dynamic map service layers reference map services that create a map image on
    the fly and then return the image to the application. This type of map service
    may be composed of one or more layers of information. For example, the demographics
    map service displayed in the following screenshot is composed of nine different
    layers, representing demographic information at various levels of geography:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 动态地图服务层引用创建地图图像并将图像返回给应用程序的地图服务。这种地图服务可能由一个或多个信息层组成。例如，以下屏幕截图中显示的人口统计地图服务由九个不同的图层组成，代表不同地理级别的人口统计信息：
- en: '![Working with map service layers](graphics/7965OT_02_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![使用地图服务层](graphics/7965OT_02_03.jpg)'
- en: While they can take somewhat longer to display in a client application as they
    must be generated *on the fly*, dynamic map service layers are more versatile
    than tiled map service layers. In dynamic map service layers, you can control
    the features displayed through layer definitions, set the visibility of various
    layers within the service, and define temporal information for the layer. For
    example, in the **Demographics** map service layer detailed in the preceding screenshot,
    you might choose to display only **Census Block Group** in your application. This
    is the type of versatility provided by dynamic map service layers that you don't
    get with tiled map service layers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们在客户端应用程序中显示可能需要更长的时间，因为它们必须*即时生成*，但动态地图服务层比瓦片地图服务层更灵活。在动态地图服务层中，您可以通过图层定义控制显示的要素，设置服务内各个图层的可见性，并为图层定义时间信息。例如，在前面屏幕截图中详细介绍的**人口统计**地图服务层中，您可能选择在应用程序中仅显示**人口普查区组**。这就是动态地图服务层提供的灵活性，而这是瓦片地图服务层所不具备的。
- en: Tiled map service layers reference a predefined cache of map tiles instead of
    dynamically rendered images. The easiest way to understand the concept of tiled
    map services is to think about a grid that has been draped across the surface
    of a map. Each cell within the grid has the same size and will be used to cut
    the map into individual image files called tiles. The individual tiles are stored
    as image files on a server and are retrieved as needed, depending upon the map
    extent and scale. This same process is often repeated at various map scales. The
    end result is a cache of tilesets that have been generated for various map scales.
    When the map is displayed in the application, it will appear to be seamless even
    though it is composed of many individual tiles.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片地图服务层引用预定义的地图瓦片缓存，而不是动态渲染的图像。理解瓦片地图服务的概念最简单的方法是将其想象成覆盖在地图表面上的网格。网格中的每个单元格大小相同，并将用于将地图切割成称为瓦片的单个图像文件。这些单独的瓦片作为图像文件存储在服务器上，并根据地图范围和比例尺的需要进行检索。这个过程通常在各种地图比例尺上重复。最终结果是生成了各种地图比例尺的瓦片集缓存。当地图在应用程序中显示时，它看起来是无缝的，即使它由许多单独的瓦片组成。
- en: '![Working with map service layers](graphics/7965OT_02_04.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![使用地图服务层](graphics/7965OT_02_04.jpg)'
- en: These tiled or cached map layers are often used as basemaps that include imagery,
    street maps, topographic maps, or for data layers that don't change often. Tiled
    map services tend to display faster as they don't have the overhead of creating
    images on the fly each time there is a request for a map.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些瓦片或缓存地图层通常用作包括图像、街道地图、地形图在内的底图，或者用于不经常更改的数据层。瓦片地图服务往往显示更快，因为它们没有每次请求地图时都要创建图像的开销。
- en: Operational layers are then draped on top of the tiled basemaps and these are
    often dynamic layers. While they can be somewhat slower in terms of performance,
    dynamic map service layers have the advantage of being able to define their appearance
    on the fly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 操作层通常覆盖在瓦片地图的顶部，这些层通常是动态层。虽然它们在性能方面可能会慢一些，但动态地图服务层具有能够动态定义外观的优势。
- en: Using layer classes
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图层类
- en: Using the layer classes from the API for JavaScript, you can reference map services
    hosted by ArcGIS Server and other map servers. All layer classes inherit from
    the `Layer` base class. The `Layer` class has no constructor, so you can't specifically
    create an object from this class. This class simply defines properties, methods,
    and events that are inherited by all classes that inherit from `Layer`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript API中的图层类，您可以引用由ArcGIS Server和其他地图服务器托管的地图服务。所有图层类都继承自`Layer`基类。`Layer`类没有构造函数，因此您不能从这个类中专门创建对象。这个类只是定义了所有从`Layer`继承的类的属性、方法和事件。
- en: As indicated in the following figure, `DynamicMapServiceLayer`, `TiledMapServiceLayer`,
    and `GraphicsLayer` all inherit directly from the `Layer` class. `DynamicMapServiceLayer`
    and `TiledMapserviceLayer` also act as base classes. `DynamicMapServiceLayer`
    is the base class for dynamic map services while `TiledMapServiceLayer` is the
    base class for tiled map services. [Chapter 3](ch03.html "Chapter 3. Adding Graphics
    to the Map"), *Adding Graphics to the Map*, is devoted entirely to graphics and
    the `GraphicsLayer`, so we'll save our discussion on this type of layer for later
    on in the book. `Layer`, `DynamicMapServiceLayer`, and `TiledMapServiceLayer`
    are all base classes, meaning that you can't specifically create an object from
    these classes in your application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，`DynamicMapServiceLayer`、`TiledMapServiceLayer`和`GraphicsLayer`都直接继承自`Layer`类。`DynamicMapServiceLayer`和`TiledMapserviceLayer`也充当基类。`DynamicMapServiceLayer`是动态地图服务的基类，而`TiledMapServiceLayer`是平铺地图服务的基类。[第3章](ch03.html
    "第3章。向地图添加图形")，“向地图添加图形”，完全致力于图形和`GraphicsLayer`，因此我们将在本书的后面讨论这种类型的图层。`Layer`、`DynamicMapServiceLayer`和`TiledMapServiceLayer`都是基类，这意味着您不能在应用程序中从这些类中专门创建对象。
- en: '![Using layer classes](graphics/7965OT_02_05.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![使用图层类](graphics/7965OT_02_05.jpg)'
- en: Tiled map service layers
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平铺地图服务图层
- en: As mentioned earlier, tiled map service layers reference a cache of predefined
    images that are tiled together to create a seamless map display. These are often
    used as base maps.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，平铺地图服务图层引用了预定义图像的缓存，这些图像被平铺在一起以创建无缝的地图显示。这些通常用作基础地图。
- en: '![Tiled map service layers](graphics/7965OT_02_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![平铺地图服务图层](graphics/7965OT_02_06.jpg)'
- en: The `ArcGISTiledMapServiceLayer` class is used when referencing a tiled (cached)
    map service exposed by ArcGIS Server. As this type of object works against a tiled
    set of maps that have been cached, performance is often improved. The constructor
    for `ArcGISTiledMapServiceLayer` takes a URL pointer to the map service, along
    with options that allow you to assign an ID to the map service and control transparency
    and visibility.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当引用由ArcGIS Server公开的平铺（缓存）地图服务时，使用`ArcGISTiledMapServiceLayer`类。由于这种类型的对象针对已缓存的平铺地图集工作，因此通常可以提高性能。`ArcGISTiledMapServiceLayer`的构造函数需要一个指向地图服务的URL指针，以及允许您为地图服务分配ID并控制透明度和可见性的选项。
- en: 'In the following code example, notice that the constructor for `ArcGISTiledMapServiceLayer`
    takes a parameter that references a map service. After an instance of a layer
    has been created, it is added to the map using the `Map.addLayer()` method that
    accepts a variable that contains a reference to the tiled map service layer:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，请注意`ArcGISTiledMapServiceLayer`的构造函数需要一个参数，该参数引用地图服务。在创建图层实例后，可以使用`Map.addLayer()`方法将其添加到地图中，该方法接受一个包含对平铺地图服务图层的引用的变量：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`ArcGISTiledMapServiceLayer` is used primarily for the fast display of cached
    map data. You can also control the levels at which the data will be displayed.
    For instance, you may want to display data from a generalized `ArcGISTiledMapService`,
    showing interstates and highways while your users are zoomed out at levels 0-6
    and then switch to a more detailed `ArcGISTiledMapService` once the user zooms
    in further. You can also control the transparency of each layer added to the map.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArcGISTiledMapServiceLayer`主要用于快速显示缓存的地图数据。您还可以控制数据显示的级别。例如，您可能希望在用户缩放到0-6级时显示来自概括的`ArcGISTiledMapService`的数据，显示州际和高速公路，然后在用户进一步放大时切换到更详细的`ArcGISTiledMapService`。您还可以控制添加到地图的每个图层的透明度。'
- en: Dynamic map service layers
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态地图服务图层
- en: As the name suggests, the `ArcGISDynamicMapServiceLayer` class is used to create
    dynamic maps served by ArcGIS Server. Just as with `ArcGISTiledMapServiceLayer`,
    the constructor for `ArcGISDynamicMapServiceLayer` takes a URL that points to
    the map service along with optional parameters that are used to assign an ID to
    the service, determine the transparency of the map image, and a visibility option
    that sets the initial visibility of the layer to true or false. The class name
    `ArcGISDynamicMapServiceLayer` can be somewhat misleading. Although it appears
    to reference an individual data layer, this is in fact not the case. It refers
    to a map service rather than a data layer. Individual layers inside the map service
    can be turned on/off through the `setVisibleLayers()` method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`ArcGISDynamicMapServiceLayer`类用于创建由ArcGIS Server提供的动态地图。与`ArcGISTiledMapServiceLayer`一样，`ArcGISDynamicMapServiceLayer`的构造函数需要一个指向地图服务的URL，以及可选参数，用于为服务分配ID，确定地图图像的透明度，以及设置图层的初始可见性为true或false的可见性选项。`ArcGISDynamicMapServiceLayer`类名可能有些误导。尽管它似乎是指一个单独的数据图层，但实际上并非如此。它指的是地图服务而不是数据图层。地图服务内的单独图层可以通过`setVisibleLayers()`方法打开/关闭。
- en: '![Dynamic map service layers](graphics/7965OT_02_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![动态地图服务图层](graphics/7965OT_02_07.jpg)'
- en: 'Creating an instance of `ArcGISDynamicMapServiceLayer` will look very similar
    to `ArcGISTiledMapServiceLayer`. The following code example illustrates this.
    The constructor accepts a URL that points to the map service. The second parameter
    defines the optional parameters that you can supply to control transparency, visibility,
    and image parameters:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`ArcGISDynamicMapServiceLayer`的实例看起来与`ArcGISTiledMapServiceLayer`非常相似。以下代码示例说明了这一点。构造函数接受一个指向地图服务的URL。第二个参数定义了可选参数，您可以提供以控制透明度、可见性和图像参数：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the preceding two lines of code to the ArcGIS API for JavaScript Sandbox
    as shown in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述两行代码添加到ArcGIS API for JavaScript Sandbox中，如下所示的代码：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the preceding code to see the dynamic layer added to the map, as seen in
    the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码，查看动态图层添加到地图中，如下截图所示：
- en: '![Dynamic map service layers](graphics/7965OT_02_08.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![动态地图服务图层](graphics/7965OT_02_08.jpg)'
- en: With an instance of `ArcGISDynamicMapServiceLayer`, you can perform a number
    of operations. Obviously, you can create maps that display the data in the service,
    but you can also query data from layers in the service, control feature display
    through layer definitions, control individual layer visibility, set time-related
    information, export maps as images, control background transparency, and much
    more.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ArcGISDynamicMapServiceLayer`的实例，您可以执行许多操作。显然，您可以创建显示服务中数据的地图，但您还可以从服务中的图层查询数据，通过图层定义控制要素显示，控制单个图层的可见性，设置与时间相关的信息，将地图导出为图像，控制背景透明度等等。
- en: Adding layers to the map
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向地图添加图层
- en: The `addLayer()` method takes an instance of a layer (`ArcGISDynamicMapServiceLayer`
    or `ArcGISTiledMapServiceLayer`) as the first parameter, and an optional index
    that specifies where it should be placed. In the following code example, we have
    created a new instance of `ArcGISDynamicMapServiceLayer` pointing to a URL for
    the service. We then call `Map.addLayer()` to pass the new instance of the layer.
    The layers in the service will now be visible on the map.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`addLayer()`方法将图层的实例（`ArcGISDynamicMapServiceLayer`或`ArcGISTiledMapServiceLayer`）作为第一个参数，并且可选的索引指定它应该放置在哪里。在下面的代码示例中，我们创建了一个指向服务URL的`ArcGISDynamicMapServiceLayer`的新实例。然后调用`Map.addLayer()`来传递图层的新实例。服务中的图层现在将在地图上可见。'
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `addLayers()` method takes an array of layer objects and adds them all at
    once.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`addLayers()`方法接受一个图层对象数组，并一次性添加它们。'
- en: In addition to being able to add layers to a map, you can also remove layers
    from a map using `Map.removeLayer()` or `Map.removeAllLayers()`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够向地图添加图层，您还可以使用`Map.removeLayer()`或`Map.removeAllLayers()`从地图中删除图层。
- en: Setting visible layers from a map service
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从地图服务设置可见图层
- en: You can control the visibility of individual layers within a dynamic map service
    layer using the `setVisibleLayers()` method. This applies only to dynamic map
    service layers, not tiled map service layers. This method takes an array of integers,
    corresponding to the data layers in the map service.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`setVisibleLayers()`方法控制动态地图服务图层中各个图层的可见性。这仅适用于动态地图服务图层，而不适用于瓦片地图服务图层。该方法接受一个整数数组，对应于地图服务中的数据图层。
- en: 'This array is zero based so the first layer in the map service occupies position
    `0`. In the **Demographics** map service illustrated in the following screenshot,
    `Demographics/ESRI_Census_USA` occupies index `0`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数组是从零开始的，所以地图服务中的第一个图层占据位置`0`。在下面的截图中，**人口统计**地图服务中的`Demographics/ESRI_Census_USA`占据索引`0`：
- en: '![Setting visible layers from a map service](graphics/7965OT_02_09.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![设置地图服务中可见图层](graphics/7965OT_02_09.jpg)'
- en: 'Therefore, in the event that we''d like to display only the **Census Block
    Points** and **Census Block Group** features from this service, we can use `setVisibleLayers()`
    as seen in the following code example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们只想显示来自该服务的**人口普查区块点**和**人口普查区块组**要素，我们可以使用`setVisibleLayers()`，如下面的代码示例所示：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Setting a definition expression
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置定义表达式
- en: 'In ArcGIS for Desktop, you can use a definition expression to limit the features
    in a data layer that will be displayed. A definition expression is simply a SQL
    query set against the columns and rows in a layer. Only the features whose attributes
    meet the query are displayed. For example, if you only wanted to display cities
    with a population greater than one million, the expression would be something
    like `POPULATION > 1000000`. The ArcGIS API for JavaScript contains a `setLayerDefinitions(
    )` method that accepts an array of definitions that can be applied against `ArcGISDynamicMapServiceLayer`
    to control the display of features in the resulting map. The following code example
    shows how this is done:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArcGIS for Desktop中，您可以使用定义表达式来限制将显示的数据图层中的要素。定义表达式只是针对图层中的列和行设置的SQL查询。只有满足查询的属性的要素才会显示。例如，如果您只想显示人口超过一百万的城市，表达式将是类似于`POPULATION
    > 1000000`。ArcGIS API for JavaScript包含一个`setLayerDefinitions()`方法，接受一个可以应用于`ArcGISDynamicMapServiceLayer`的定义数组，以控制生成地图中要素的显示。下面的代码示例显示了如何做到这一点：
- en: '![Setting a definition expression](graphics/7965OT_02_10.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![设置定义表达式](graphics/7965OT_02_10.jpg)'
- en: You first create an array that will hold multiple `where` clauses, which will
    serve as the definition expressions for each layer. In this case, we are defining
    layer definitions for the first and sixth layer. The array is zero based, so the
    first array is at index `0`. The `where` clauses are placed into the array and
    then passed into the `setLayerDefinitions()` method. ArcGIS Server then renders
    the features that match the `where` clauses for each layer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个数组，用于保存多个`where`子句，这些子句将作为每个图层的定义表达式。在这种情况下，我们为第一层和第六层定义了图层定义。数组是从零开始的，所以第一个数组位于索引`0`。然后将`where`子句放入数组中，然后传递到`setLayerDefinitions()`方法中。然后ArcGIS
    Server会根据每个图层的`where`子句渲染匹配的要素。
- en: Map navigation
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图导航
- en: Now that you know a little about maps and the layers that reside within those
    maps, it's time to learn how to control map navigation in your application. In
    most cases, your users will need to be able to navigate around the map using the
    panning and zooming features. The ArcGIS API for JavaScript provides a number
    of user interface widgets and toolbars that you can use in order to allow your
    user to change the current map extent using the zooming and panning features.
    Map navigation can also occur through keyboard navigation and mouse navigation.
    In addition to these user interface components and hardware interfaces, map navigation
    can also be controlled programmatically.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了一些关于地图和驻留在其中的图层的知识，是时候学习如何在应用程序中控制地图导航了。在大多数情况下，您的用户将需要能够使用平移和缩放功能在地图周围导航。ArcGIS
    API for JavaScript提供了许多用户界面小部件和工具栏，您可以使用这些小部件和工具栏来允许用户使用缩放和平移功能更改当前地图范围。地图导航也可以通过键盘导航和鼠标导航进行。除了这些用户界面组件和硬件接口之外，地图导航也可以通过编程方式进行控制。
- en: Map navigation widgets and toolbars
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地图导航小部件和工具栏
- en: 'The simplest way to provide map navigation control to your application is through
    the addition of various widgets and toolbars. When you create a new map and add
    layers, a zoom slider is included with the map by default. This slider allows
    the user to zoom in and out of the map. The zoom slider is illustrated in the
    following screenshot. You don''t have to do anything programmatically to have
    the zoom slider appear on your map; it is present by default. However, you can
    remove the slider for your application simply by setting the slider option to
    `false` when creating an instance of the `Map` object, if necessary:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 向您的应用程序提供地图导航控制的最简单方法是通过添加各种小部件和工具栏。创建新地图并添加图层时，默认情况下会包括一个缩放滑块。此滑块允许用户放大和缩小地图。缩放滑块如下截图所示。您无需在程序上做任何事情即可使缩放滑块出现在地图上；它默认存在。但是，如果需要，您可以通过在创建`Map`对象的实例时将滑块选项设置为`false`来简单地删除应用程序中的滑块：
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshot shows the map with the zoom slider:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有缩放滑块的地图：
- en: '![Map navigation widgets and toolbars](graphics/7965OT_02_11.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![地图导航小部件和工具栏](graphics/7965OT_02_11.jpg)'
- en: 'You can also add pan buttons that will pan the map in the direction that the
    arrow points towards, when clicked. By default, pan buttons will not appear on
    the map. You must specifically set the `nav` option to `true` when creating your
    `Map` object:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加平移按钮，单击时将地图平移到箭头指向的方向。默认情况下，平移按钮不会出现在地图上。创建`Map`对象时，必须明确将`nav`选项设置为`true`：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows the pan options:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了平移选项：
- en: '![Map navigation widgets and toolbars](graphics/7965OT_02_12.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![地图导航小部件和工具栏](graphics/7965OT_02_12.jpg)'
- en: The ArcGIS API for JavaScript also gives you the ability to add several types
    of toolbars to your application, including a navigation toolbar containing buttons
    to zoom in and out, panning, full extent, next extent, and previous extent. Toolbar
    creation is covered in detail in a later chapter, so we'll save that discussion
    for later.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript还为您提供了向应用程序添加几种类型的工具栏的能力，包括包含放大和缩小、平移、全范围、下一个范围和上一个范围按钮的导航工具栏。工具栏的创建将在后面的章节中详细介绍，因此我们将保存该讨论以供以后讨论。
- en: '![Map navigation widgets and toolbars](graphics/7965OT_02_13.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![地图导航小部件和工具栏](graphics/7965OT_02_13.jpg)'
- en: Map navigation using the mouse and keyboard
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用鼠标和键盘进行地图导航
- en: 'Users can also control map navigation using the mouse and/or keyboard devices.
    By default, users can do the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以使用鼠标和/或键盘设备控制地图导航。默认情况下，用户可以执行以下操作：
- en: Drag the mouse to pan
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖动鼠标进行平移
- en: Use the forward mouse scroll to zoom in
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用鼠标向前滚动以放大
- en: Use the backward mouse scroll to zoom out
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用鼠标向后滚动以缩小
- en: Press *Shift* and drag the mouse to zoom in
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Shift*并拖动鼠标以放大
- en: Press *Shift* + *Ctrl* and drag the mouse to zoom out
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Shift* + *Ctrl*并拖动鼠标以缩小
- en: Press *Shift* and click to restore to the center
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Shift*并单击以恢复到中心
- en: Double-click to center and zoom in
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双击以居中和放大
- en: Press *Shift* and double-click to center and zoom in
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Shift*并双击以居中和放大
- en: Use the arrow keys to pan
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用箭头键进行平移
- en: Use the *+* key to zoom in to a level
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*+*键放大到某个级别
- en: Use the *-* key to zoom out of a level
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*-*键缩小一个级别
- en: The preceding options can be disabled using one of several `Map` methods. For
    example, to disable scroll wheel zooming, you would use the `Map.disableScrollWheelZoom()`
    method. These navigation features can also be removed after the map has been loaded.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用多个`Map`方法之一来禁用前述选项。例如，要禁用滚轮缩放，您将使用`Map.disableScrollWheelZoom()`方法。这些导航功能也可以在地图加载后移除。
- en: Getting and setting the map extent
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取和设置地图范围
- en: One of the first things you'll want to master is getting and setting the map
    extent. By default, the initial extent of a map within your application is the
    extent of the map when it was last saved in the map document file (`.mxd`) used
    to create the map service. In some cases, this may be exactly what you want, but
    in the event that you need to set a map extent other than the default, you will
    have several options.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您要掌握的第一件事情之一是获取和设置地图范围。默认情况下，应用程序中地图的初始范围是创建地图服务时地图文档文件（`.mxd`）上次保存时的地图范围。在某些情况下，这可能正是您想要的，但是如果您需要设置除默认值之外的地图范围，您将有几个选项。
- en: 'One of the optional parameters that can be defined in the constructor for the
    `Map` object is the center parameter. You can use this optional parameter in conjunction
    with the zoom object to set the initial map extent. You''ll see this illustrated
    in the following code example, where we define a coordinate pair for the center
    of the map, along with a zoom level of `3`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`Map`对象的构造函数中定义的可选参数之一是中心参数。您可以将此可选参数与缩放对象一起使用，以设置初始地图范围。在下面的代码示例中，您将看到这一点，我们为地图的中心定义了一个坐标对，以及一个缩放级别为`3`：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The initial extent of the map is not a required parameter, and thus if you
    leave out this information, the map will simply use the default extent. This is
    shown in the following code example, where only the ID of the container is specified:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 地图的初始范围不是必需的参数，因此如果您省略此信息，地图将简单地使用默认范围。在下面的代码示例中，只指定了容器的ID：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After a `Map` object has been created, you can also use the `Map.setExtent()`
    method to change the extent by passing in an `Extent` object as seen in the following
    code example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`Map`对象后，还可以使用`Map.setExtent()`方法来更改范围，方法是传入一个`Extent`对象，如下面的代码示例所示：
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Alternatively, you could set the `Extent` properties individually as seen in
    the following code example:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以像下面的代码示例中那样单独设置`Extent`属性。
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There may be times when you are using multiple map services in your application.
    In this case, setting the initial map extent can be done either through the constructor
    for your map or by using the `Map.fullExtent` method on one of the services. For
    example, it is common to use a map service that provides base layer capabilities
    containing aerial imagery along with a map service containing your own local operational
    data sources. The following code example uses the `fullExtent()` method:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中使用多个地图服务时，可以通过地图的构造函数或使用其中一个服务的`Map.fullExtent`方法来设置初始地图范围。例如，通常使用提供基础图层功能的地图服务，其中包含航空影像以及包含自己本地操作数据源的地图服务。下面的代码示例使用了`fullExtent()`方法：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The current extent can be obtained either through the `Map.extent` property
    or the `onExtentChange` event. Note that the `Map.setExtent` property is read
    only, so don't attempt to set the map extent through this property.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当前范围可以通过`Map.extent`属性或`onExtentChange`事件来获取。请注意，`Map.setExtent`属性是只读的，因此不要尝试通过此属性设置地图范围。
- en: Map events
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图事件
- en: In the world of programming, events are actions that take place within an application.
    Normally, these events are triggered by the end user and can include things such
    as mouse clicks, mouse drags, and keyboard actions, but it can also include the
    sending and receiving of data, component modification, and others.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程世界中，事件是应用程序中发生的动作。通常，这些事件是由最终用户触发的，可以包括鼠标点击、鼠标拖动和键盘操作，但也可以包括数据的发送和接收、组件修改等。
- en: The ArcGIS API for JavaScript is an asynchronous API that follows a publish/subscribe
    pattern wherein an application registers (publishes) events with listeners (subscribers).
    The following diagram illustrates this process. Listeners are responsible for
    monitoring the application for these events and then triggering a `handler` function
    that responds to the event. Multiple events can be registered to the same listener.
    The `dojo on()` method functions as an event to a handler.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的ArcGIS API是一个异步API，遵循发布/订阅模式，应用程序向监听器注册（发布）事件。下图说明了这个过程。监听器负责监视应用程序的这些事件，然后触发响应事件的`handler`函数。可以将多个事件注册到同一个监听器上。`dojo
    on()`方法作为事件到处理程序的功能。
- en: '![Map events](graphics/7965OT_02_14.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![地图事件](graphics/7965OT_02_14.jpg)'
- en: 'As you may recall, the ArcGIS Server JavaScript API is built on top of Dojo.
    With Dojo, events are registered to handlers through the `dojo on()` method. This
    method takes three parameters. Take a look at the code example shown in the following
    screenshot to get a better understanding of how events are registered:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能记得的那样，ArcGIS Server JavaScript API是建立在Dojo之上的。使用Dojo，事件通过`dojo on()`方法注册到处理程序。此方法需要三个参数。请看下面截图中显示的代码示例，以更好地理解如何注册事件：
- en: '![Map events](graphics/7965OT_02_15.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![地图事件](graphics/7965OT_02_15.jpg)'
- en: We call the `on()` method with parameters including `map`, `click`, and `displayCoordinates`.
    The first two parameters indicate the object and the event that we would like
    to register. In this case, it means we are registering the `click` event found
    on the `Map` object. This event is fired every time the user clicks the mouse
    within the confines of the map. The final parameter, `displayCoordinates`, indicates
    the listener for the event. Therefore, each time the `click` event on the `Map`
    object is fired, it will trigger the `displayCoordinates` function, which will
    run and report the current extent of the map. Although the events and the handlers
    they are registered to will change depending upon your circumstance, the method
    of registration is the same.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`on()`方法并传入`map`、`click`和`displayCoordinates`等参数。前两个参数表示我们要注册的对象和事件。在这种情况下，这意味着我们正在注册`Map`对象上找到的`click`事件。每次用户在地图范围内点击鼠标时，都会触发此事件。最后一个参数`displayCoordinates`表示事件的监听器。因此，每当`Map`对象上的`click`事件被触发时，它将触发`displayCoordinates`函数，该函数将运行并报告地图的当前范围。尽管事件和它们注册的处理程序会根据您的情况而改变，但注册的方法是相同的。
- en: 'Each time an event occurs, an `Event` object is generated. This `Event` object
    contains additional event information such as the mouse button that was clicked
    or perhaps the key on the keyboard that was pressed. This object is automatically
    passed into the event handler, where it can be examined. In the following code
    example, you can see that the `Event` object is passed into the handler as a parameter.
    This is a dynamic object whose properties will change depending upon the type
    of event that was triggered:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 每次事件发生时，都会生成一个`Event`对象。这个`Event`对象包含额外的事件信息，比如点击的鼠标按钮或者按下的键盘按键。这个对象会自动传递到事件处理程序中，可以进行检查。在下面的代码示例中，您可以看到`Event`对象作为参数传递到处理程序中。这是一个动态对象，其属性将根据触发的事件类型而改变。
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There are many different events that are available on a number of different
    objects in the API. However, it is important to keep in mind that you do not have
    to register every event with a listener. Only the events that are necessary for
    your application should be registered. When an event that hasn't been registered
    with a listener occurs, the event is simply ignored.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: API中许多不同的对象上都有许多不同的事件可用。但是，重要的是要记住，您不必为每个事件注册监听器。只有对应用程序必要的事件才应该注册。当发生一个未注册监听器的事件时，该事件将被简单地忽略。
- en: The `Map` object contains many different events that you can respond to, including
    various mouse events, extent change events, basemap change events, keyboard events,
    layer events, pan and zoom events, and more. Your application can respond to any
    of these events. In coming chapters, we'll examine events that are available on
    other objects.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map`对象包含许多不同的事件，您可以对其做出响应，包括各种鼠标事件、范围更改事件、底图更改事件、键盘事件、图层事件、平移和缩放事件等。您的应用程序可以对任何这些事件做出响应。在接下来的章节中，我们将研究其他对象上可用的事件。'
- en: 'It is a good programming practice to always disconnect your events from their
    handler when no longer needed. This is normally done when the user navigates away
    from the page or closes the browser window. The following code example shows how
    this can be done by simply calling the `remove()` method:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在不再需要时，将事件与其处理程序断开连接是一种良好的编程实践。通常在用户从页面导航离开或关闭浏览器窗口时执行此操作。以下代码示例显示了如何通过简单调用`remove()`方法来实现这一点：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We covered a lot of ground in this chapter. All applications created with the
    ArcGIS API for JavaScript require a certain set of steps. We refer to this as
    boilerplate code. This includes defining references to the API and stylesheet,
    loading modules, creating an initialization function, and some other steps. In
    the `initialization` function, you will most likely create a map, add various
    layers, and perform other setup operations that need to be performed before the
    application is used. In this chapter, you learned how to perform these tasks.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容。使用ArcGIS API for JavaScript创建的所有应用程序都需要一定的步骤。我们将其称为样板代码。这包括定义对API和样式表的引用、加载模块、创建初始化函数以及其他一些步骤。在`initialization`函数中，您很可能会创建地图、添加各种图层，并执行其他在应用程序使用之前需要执行的设置操作。在本章中，您学会了如何执行这些任务。
- en: In addition, we examined the various types of layers that can be added to a
    map, including tiled map service layers and dynamic map service layers. Tiled
    map service layers are precreated and cached on the server and are most often
    used as basemaps in an application. Dynamic map service layers must be created
    on the fly each time a request is made and thus may take longer to generate. However,
    dynamic map service layers can be used to perform many types of operations, including
    queries, setting definition expressions, and much more.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还研究了可以添加到地图的各种图层类型，包括切片地图服务图层和动态地图服务图层。切片地图服务图层是预先创建并缓存在服务器上的，通常用作应用程序中的底图。动态地图服务图层必须在每次请求时动态创建，因此可能需要更长时间来生成。但是，动态地图服务图层可以用于执行许多类型的操作，包括查询、设置定义表达式等。
- en: In addition, you learned how to programmatically control the map extent. Finally,
    we introduced the topic of events and you learned how to connect an event to an
    event handler, which is simply a JavaScript function that runs any time a particular
    event is triggered. In the next chapter, we'll closely examine how you can add
    graphics to your application.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还学习了如何以编程方式控制地图范围。最后，我们介绍了事件的主题，您学会了如何将事件连接到事件处理程序，这只是一个在特定事件触发时运行的JavaScript函数。在下一章中，我们将仔细研究如何向应用程序添加图形。
