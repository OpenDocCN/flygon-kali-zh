["```kt\nvar sp: SoundPool\nvar idFX1 = -1\nnowPlaying = -1\nvolume = .1f\n```", "```kt\nval audioAttributes = AudioAttributes.Builder()\n         .setUsage(AudioAttributes.\n                     USAGE_ASSISTANCE_SONIFICATION)\n         .setContentType(AudioAttributes.\n                     CONTENT_TYPE_SONIFICATION)\n         .build()\n\nsp = SoundPool.Builder()\n         .setMaxStreams(5)\n         .setAudioAttributes(audioAttributes)\n         .build()\n```", "```kt\ntry {\n    // Create objects of the 2 required classes\n    val assetManager = this.assets\n    var descriptor: AssetFileDescriptor\n\n    // Load our fx in memory ready for use\n    descriptor = assetManager.openFd(\"fx1.ogg\")\n    idFX1 = sp.load(descriptor, 0)\n\n}  catch (e: IOException) {\n    // Print an error message to the console\n    Log.e(\"error\", \"failed to load sound files\")\n}\n```", "```kt\nnowPlaying = sp.play(idFX2,\n  volume, volume, 0, repeats, 1f)\n```", "```kt\nsp.stop(nowPlaying)\n```", "```kt\n       <resources>\n           <string name=\"app_name\">Sound Demo</string>\n\n           <string name=\"hello_world\">Hello world!</string>\n           <string name=\"action_settings\">Settings</string>\n\n           <string-array name=\"spinner_options\">\n             <item>0</item>\n             <item>1</item>\n             <item>3</item>\n             <item>5</item>\n             <item>10</item>\n           </string-array>\n\n        </resources>\n    ```", "```kt\nclass MainActivity : AppCompatActivity(), \n  View.OnClickListener {\n```", "```kt\nvar sp: SoundPool   \n\nprivate var idFX1 = -1\nprivate var idFX2 = -1\nprivate var idFX3 = -1\n\nvar nowPlaying = -1\nvar volume = .1f\nvar repeats = 2\n\ninit{\n\n  val audioAttributes = AudioAttributes.Builder()\n        .setUsage(AudioAttributes.\n              USAGE_ASSISTANCE_SONIFICATION)\n        .setContentType(AudioAttributes.\n              CONTENT_TYPE_SONIFICATION)\n        .build()\n\n  sp = SoundPool.Builder()\n        .setMaxStreams(5)\n        .setAudioAttributes(audioAttributes)\n        .build()\n}\n```", "```kt\nimport android.media.AudioAttributes\nimport android.media.AudioManager\nimport android.media.SoundPool\nimport android.os.Build\n\nimport android.view.View\nimport android.widget.Button\n```", "```kt\nbtnFX1.setOnClickListener(this)\nbtnFX2.setOnClickListener(this)\nbtnFX3.setOnClickListener(this)\nbtnStop.setOnClickListener(this)\n```", "```kt\nimport kotlinx.android.synthetic.main.content_main.*\n```", "```kt\ntry {\n    // Create objects of the 2 required classes\n    val assetManager = this.assets\n    var descriptor: AssetFileDescriptor\n\n    // Load our fx in memory ready for use\n    descriptor = assetManager.openFd(\"fx1.ogg\")\n    idFX1 = sp.load(descriptor, 0)\n\n    descriptor = assetManager.openFd(\"fx2.ogg\")\n    idFX2 = sp.load(descriptor, 0)\n\n    descriptor = assetManager.openFd(\"fx3.ogg\")\n    idFX3 = sp.load(descriptor, 0)\n\n}   catch (e: IOException) {\n    // Print an error message to the console\n    Log.e(\"error\", \"failed to load sound files\")\n}\n```", "```kt\nimport android.content.res.AssetFileDescriptor\nimport android.content.res.AssetManager\nimport android.util.Log\nimport java.io.IOException\n```", "```kt\nseekBar.setOnSeekBarChangeListener(\n         object : SeekBar.OnSeekBarChangeListener {\n\n   override fun onProgressChanged(\n         seekBar: SeekBar, value: Int, fromUser: Boolean) {\n\n         volume = value / 10f\n         sp.setVolume(nowPlaying, volume, volume)\n  }\n\n   override fun onStartTrackingTouch(seekBar: SeekBar) {}\n\n   override fun onStopTrackingTouch(seekBar: SeekBar) {\n\n  }\n})\n```", "```kt\nimport android.widget.SeekBar\n```", "```kt\n spinner.onItemSelectedListener =\n         object : AdapterView.OnItemSelectedListener {\n\n   override fun onItemSelected(\n         parentView: AdapterView<*>,\n         selectedItemView: View,\n         position: Int, id: Long) {\n\n         val temp = spinner.selectedItem.toString()\n         repeats = Integer.valueOf(temp)\n  }\n\n   override fun onNothingSelected(\n         parentView: AdapterView<*>) {\n  }\n}\n```", "```kt\nimport android.widget.AdapterView\nimport android.widget.Spinner\n```", "```kt\n override fun onClick(v: View) {\n   when (v.id) {\n         R.id.btnFX1 -> {\n               sp.stop(nowPlaying)\n               nowPlaying = sp.play(idFX1, volume,\n                           volume, 0, repeats, 1f)\n    }\n\n         R.id.btnFX2 -> {\n               sp.stop(nowPlaying)\n               nowPlaying = sp.play(idFX2,\n                           volume, volume, 0, repeats, 1f)\n    }\n\n         R.id.btnFX3 -> {\n               sp.stop(nowPlaying)\n               nowPlaying = sp.play(idFX3,\n                           volume, volume, 0, repeats, 1f)\n    }\n\n         R.id.btnStop -> sp.stop(nowPlaying)\n   }\n}\n```"]