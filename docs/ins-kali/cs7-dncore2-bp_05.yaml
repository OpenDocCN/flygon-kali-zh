- en: ASP.NET SignalR Chat Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET SignalR聊天应用程序
- en: Imagine having the ability to have your server-side code push data to your web
    page in real time, without the user needing to refresh the page. As they say,
    there are many ways to skin a cat, but the ASP.NET SignalR library provides developers
    with a simplified method to add real-time web functionality to applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您有能力让服务器端代码实时推送数据到您的网页，而无需用户刷新页面。他们说，有很多种方法可以解决问题，但ASP.NET SignalR库为开发人员提供了一种简化的方法，可以向应用程序添加实时网络功能。
- en: To showcase the capabilities of SignalR, we'll build a simple ASP.NET Core SignalR
    chat application. This will include the use of NuGet and **Node Package Manager**
    (**npm**) to add the required package files to the project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示SignalR的功能，我们将构建一个简单的ASP.NET Core SignalR聊天应用程序。这将包括使用NuGet和**Node Package
    Manager**（**npm**）将所需的包文件添加到项目中。
- en: 'In this chapter, we will look into the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将研究以下内容：
- en: Overall project layout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整体项目布局
- en: Setting up the project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目
- en: Adding the SignalR libraries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加SignalR库
- en: Building the server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建服务器
- en: Creating a client
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建客户端
- en: Solution overview
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案概述
- en: Running the application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: Let's dive in.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Project layout
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目布局
- en: 'For this project, we''ll need the following elements:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们需要以下元素：
- en: '**Chat Server**: This will be our server-side C# code that will process and
    direct the messages sent from the client(s)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天服务器**：这将是我们的服务器端C#代码，用于处理和指导从客户端发送的消息'
- en: '**Chat Client(s)**: A client will consist of JavaScript functions for sending
    messages to and receiving messages from the server, and HTML elements for display'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天客户端**：客户端将包括用于向服务器发送消息和接收消息的JavaScript函数，以及用于显示的HTML元素'
- en: We'll start with the server code and move over to the client, building a simple
    bootstrap layout and calling some JavaScript functions from there.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从服务器端代码开始，然后转移到客户端，构建一个简单的引导布局，并从那里调用一些JavaScript函数。
- en: As a bonus, we'll include a method to archive our conversation history to a
    text file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为奖励，我们将包括一种方法来将我们的对话历史存档到文本文件中。
- en: Setting up the project
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'Let''s set up this project:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置这个项目：
- en: 'Using Visual Studio 2017, we will create an ASP.NET Core Web Application. You
    can call the application anything you like, but I called mine `Chapter5`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2017，我们将创建一个ASP.NET Core Web应用程序。您可以随意命名应用程序，但我将其命名为`Chapter5`：
- en: '![](img/3557b025-a04f-4f72-8743-84ab52c8f8e8.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3557b025-a04f-4f72-8743-84ab52c8f8e8.png)'
- en: 'We''ll go with an empty project template. Be sure to select ASP.NET Core 2.0
    from the dropdown:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个空项目模板。确保从下拉菜单中选择ASP.NET Core 2.0：
- en: '![](img/e4c9d023-7cfa-418b-8c99-d1cbb69f8fb5.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4c9d023-7cfa-418b-8c99-d1cbb69f8fb5.png)'
- en: 'The project will be created and will look as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 项目将被创建，并将如下所示：
- en: '![](img/0cfa0d0f-3d72-4ff5-9cca-bd328d2b6eda.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cfa0d0f-3d72-4ff5-9cca-bd328d2b6eda.png)'
- en: Adding the SignalR libraries
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加SignalR库
- en: Next, we need to add the SignalR package files to our project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将SignalR包文件添加到我们的项目中。
- en: At the time of writing, the package for ASP.NET Core SignalR could not be found
    when browsing in the NuGet Package Manager, so we'll use the Package Manager Console
    to add the packages needed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，通过NuGet包管理器浏览时找不到ASP.NET Core SignalR的包，因此我们将使用包管理器控制台添加所需的包。
- en: 'Go to Tools | NuGet Package Manager | Package Manager Console:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到工具 | NuGet包管理器 | 包管理器控制台：
- en: '![](img/491113b9-d5af-4c63-9948-b5064f3f4b70.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/491113b9-d5af-4c63-9948-b5064f3f4b70.png)'
- en: 'In the console window type the following command and hit enter:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台窗口中输入以下命令并按回车键：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should see a few response lines showing the items that were Successfully
    installed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一些响应行，显示成功安装的项目。
- en: We also need the SignalR client JavaScript library for our project. For this
    we'll use an `npm` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要SignalR客户端JavaScript库。为此，我们将使用一个`npm`命令。
- en: npm is a package manager, like NuGet, but for JavaScript. Feel free to check
    it out at [https://www.npmjs.com](https://www.npmjs.com).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: npm是一个包管理器，类似于NuGet，但用于JavaScript。欢迎访问[https://www.npmjs.com](https://www.npmjs.com)查看。
- en: 'In the console window type the following command and hit *enter*:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台窗口中输入以下命令并按*回车*键：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will download a host of js files to a `node_modules` folder within your
    project's root directory. The output may show some warnings, but fear not. You
    can confirm that the download was successful if the `node_modules` directory exists.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载一堆js文件到项目根目录下的`node_modules`文件夹中。输出可能会显示一些警告，但不用担心。如果`node_modules`目录存在，您可以确认下载成功。
- en: With our packages in place, we can (finally) start writing some code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的包，我们可以（终于）开始编写一些代码了。
- en: Building the server
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建服务器
- en: We'll need to build a server for our chat program, which will contain the methods
    we want to call from our connected clients. We'll use the SignalR Hubs API, which
    provides the methods needed for connected clients to communicate with our chat
    server.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的聊天程序构建一个服务器，其中包含我们想要从连接的客户端调用的方法。我们将使用SignalR Hubs API，该API提供了连接的客户端与我们的聊天服务器通信所需的方法。
- en: SignalR Hub subclass
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SignalR Hub子类
- en: 'We now need to create the SignalR Hub. To do this, perform the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建SignalR Hub。为此，请执行以下步骤：
- en: 'Add a class to your project to handle the server-side of the chat. We''ll call
    it `Chat`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中添加一个类来处理聊天的服务器端。我们将其称为`Chat`：
- en: '![](img/c2a31c66-7397-4722-b6ce-e727742fd17a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2a31c66-7397-4722-b6ce-e727742fd17a.png)'
- en: 'This will need to be a subclass of the SignalR `Hub` class. Make sure to add
    the using directive for `Micosoft.AspNetCore.SignalR`. Visual Studio''s *Quick
    Actions* works well for this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要是SignalR `Hub`类的子类。确保添加`Micosoft.AspNetCore.SignalR`的使用指令。Visual Studio的*快速操作*对此效果很好：
- en: '![](img/9d53e3e5-5541-47e5-afe1-dd58541b9a74.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d53e3e5-5541-47e5-afe1-dd58541b9a74.png)'
- en: 'Now add a `Task` method to the class to handle the sending of the messages:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在向类添加一个`Task`方法来处理消息的发送：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This method will be called through any of the connected clients and will invoke
    all connected clients' `Send` function, passing through the sender and message
    parameters.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将通过任何连接的客户端调用，并调用所有连接的客户端的`Send`函数，传递发送者和消息参数。
- en: 'Now add a `Task` method to handle the archive functionality:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加一个`Task`方法来处理存档功能：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, this method simply takes the value of the messages string parameter,
    writes it to a new text file named `ChatArchive_[date].txt`, which is saved to
    the given path, and invoke the client(s) `Archived` function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个方法只是简单地获取消息字符串参数的值，将其写入一个名为`ChatArchive_[date].txt`的新文本文件中，保存到给定路径，并调用客户端的`Archived`函数。
- en: For these two tasks to actually work we need to do some more scaffolding.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这两个任务真正起作用，我们需要做一些更多的脚手架工作。
- en: Configuration changes
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置更改
- en: In the `Startup.cs` file, we need to add the SignalR service to the container
    as well as configure the HTTP request pipeline.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Startup.cs`文件中，我们需要将SignalR服务添加到容器中，并配置HTTP请求管道。
- en: 'In the `ConfigureServices` method, add the following code:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ConfigureServices`方法中，添加以下代码：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `Configure` method, add the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Configure`方法中，添加以下代码：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Your code window will now look as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码窗口现在如下所示：
- en: '![](img/5021442e-5018-4ccb-ab30-91330c32d075.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5021442e-5018-4ccb-ab30-91330c32d075.png)'
- en: That's our server done.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的服务器完成了。
- en: You will note that I have added the following line of code, `app.UseStaticFiles()`
    to the `Configure` method. Static files are assets that an ASP.NET Core app serves
    directly to clients. Examples of static files are HTML, CSS, JavaScript, and images.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我已经在`Configure`方法中添加了以下代码行，`app.UseStaticFiles()`。静态文件是ASP.NET Core应用程序直接提供给客户端的资产。静态文件的示例包括HTML、CSS、JavaScript和图像。
- en: We can (and will) extend our server's functionality a bit later, but, for now,
    let's head over to our client.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以（也将）稍后扩展我们服务器的功能，但是现在，让我们前往我们的客户端。
- en: Creating a client
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建客户端
- en: As mentioned in our Project Layout, the client will consist of JavaScript functions
    for sending messages to and receiving message from the server, and HTML elements
    for display.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们的项目布局中所述，客户端将包括用于向服务器发送消息和接收消息的JavaScript函数，以及用于显示的HTML元素。
- en: 'In your project, add a new folder under `wwwroot`, called `scripts`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目中，在`wwwroot`下添加一个新的文件夹，名为`scripts`：
- en: '![](img/2e8d92dd-0328-41d7-b3f8-2552bd212de3.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e8d92dd-0328-41d7-b3f8-2552bd212de3.png)'
- en: Remember that the `node_modules` directory that was created for us by our `npm`
    command earlier?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得之前由我们的`npm`命令创建的`node_modules`目录吗？
- en: 'Navigate to the following path within the `node_modules` directory:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`node_modules`目录中的以下路径：
- en: '`\@aspnet\signalr-client\dist\browser`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`\@aspnet\signalr-client\dist\browser`'
- en: 'Take a look at the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下截图：
- en: '![](img/22acf021-0aa0-44fa-b909-b8c6fdf2fa1a.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22acf021-0aa0-44fa-b909-b8c6fdf2fa1a.png)'
- en: Copy the `signalr-client-1.0.0-alpha2-final.min.js` file to the scripts folder
    we just created in our project. We will be referencing this library within our
    HTML file, which we will create now.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`signalr-client-1.0.0-alpha2-final.min.js`文件复制到我们项目中刚创建的`scripts`文件夹中。我们将在我们的HTML文件中引用这个库，现在我们将创建这个文件。
- en: 'Add an HTML page to the `wwwroot` folder. I''ve named mine `index.html`. I''ll
    recommend naming yours the same. I''ll explain later:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wwwroot`文件夹中添加一个HTML页面。我把我的命名为`index.html`。我建议您也这样命名。稍后我会解释：
- en: '![](img/7fadb9f8-a9fc-4621-ad12-40dacf9fd110.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fadb9f8-a9fc-4621-ad12-40dacf9fd110.png)'
- en: We'll keep the client page really simple. I'm using `div` tags as panels to
    show and hide the different sections on the page. I'm also using bootstrap to
    make it look nice, but you can design it whichever way you like. I'm also not
    going to bore you with the basics like where to specify your page title. We'll
    stick to the relevant elements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保持客户端页面非常简单。我使用`div`标签作为面板，在页面上显示和隐藏不同的部分。我还使用bootstrap使其看起来漂亮，但您可以按自己的喜好设计它。我也不会让您对基础知识感到厌烦，比如在哪里指定页面标题。我们将坚持相关的元素。
- en: 'Let me show you the entire HTML layout code as well as the JavaScript and we''ll
    break it down from there:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我展示整个HTML布局代码以及JavaScript，然后我们将从那里开始分解：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Included libraries
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包括的库
- en: 'Add `link` and `script` tags to include the required libraries:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`link`和`script`标签以包含所需的库：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you do not want to use bootstrap for the look and feel, you don't need the
    bootstrap JavaScript library or CSS, but note that we will be using jQuery in
    our scripts, so leave that one in.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用bootstrap来进行外观和感觉，您就不需要bootstrap JavaScript库或CSS，但请注意我们将在我们的脚本中使用jQuery，所以请留下它。
- en: Naming section
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名部分
- en: 'We''ll need to know who our chatroom attendee is. Add an input element to capture
    the username and a button to call the `enterChat` function:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道谁是我们的聊天室参与者。添加一个输入元素来捕获用户名，以及一个按钮来调用`enterChat`函数：
- en: '`<input id="username" type="text" class="form-control" />`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input id="username" type="text" class="form-control" />`'
- en: '`<button class="btn btn-default" onclick="enterChat()">Enter</button>`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button class="btn btn-default" onclick="enterChat()">Enter</button>`'
- en: Chat input
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聊天输入
- en: 'Add the required elements to enable our user to type a message (input) and
    post it to the server (event button for `sendMessage`):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 添加所需的元素，使我们的用户能够输入消息（输入）并将其发送到服务器（`sendMessage`的事件按钮）：
- en: '`<input id="message" type="text" class="form-control" />`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input id="message" type="text" class="form-control" />`'
- en: '`<button class="btn btn-info" onclick="sendMessage()">Send</button>`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button class="btn btn-info" onclick="sendMessage()">Send</button>`'
- en: Conversation panel
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话面板
- en: 'Add a `div` tag with ID `"chat"`. We will use this as a container for our conversation
    (chat history):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个带有ID`"chat"`的`div`标签。我们将使用这个作为我们对话的容器（聊天历史）：
- en: '`<div id="chat" class="well well-lg"></div>`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<div id="chat" class="well well-lg"></div>`'
- en: Archive function
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存档功能
- en: 'Add the required elements to enable our user to specify a path where the archive
    file needs to be saved (input) and post the messages to the server (event button
    for `archiveChat`):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 添加所需的元素，使我们的用户能够指定存档文件需要保存的路径（输入），并将消息发送到服务器（`archiveChat`的事件按钮）：
- en: '`<input id="archivePath" type="text" class="form-control" />`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<input id="archivePath" type="text" class="form-control" />`'
- en: '`<button class="btn btn-info" onclick="archiveChat()">Archive Chat</button>`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button class="btn btn-info" onclick="archiveChat()">Archive Chat</button>`'
- en: JavaScript functions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript函数
- en: 'Our client will need some code to send and consume messages to and from the
    server. I''ve tried to keep the JavaScript as simple as possible, opting for jQuery
    code for readability:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的客户端需要一些代码来向服务器发送和接收消息。我尽量保持JavaScript尽可能简单，选择了jQuery代码以提高可读性：
- en: 'Create a variable (I''ve named mine `connection`) for our SignalR Hub Server
    and call its start function:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的SignalR Hub服务器创建一个变量（我命名为`connection`）并调用其start函数：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `'/chat'` parameter for `signalR.HubConnection` refers to our `Chat.cs`
    class, which inherits the Hub interface from SignalR.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`''/chat''`参数用于`signalR.HubConnection`，指的是我们的`Chat.cs`类，它继承了SignalR的Hub接口。'
- en: 'Add the `UpdateChat` and `Archived` methods, which will be invoked by the server:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`UpdateChat`和`Archived`方法，这些方法将由服务器调用：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We simply pass the parameters we get from the server onto our `updateChat` method.
    We'll define that method in a bit.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是将从服务器获取的参数传递给我们的`updateChat`方法。我们稍后会定义这个方法。
- en: 'Define the `enterChat` function:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`enterChat`函数：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We set the text of our `user` label from the value of the username input element,
    pass it through to our `sendWelcomeMessage` method (which we'll define in a bit),
    and toggle the display of the relevant panels.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从用户名输入元素的值中设置`user`标签的文本，将其传递给我们的`sendWelcomeMessage`方法（我们稍后会定义），并切换相关面板的显示。
- en: 'Define the `sendMessage` method:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`sendMessage`方法：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We set the `message` variable from the message input element, before clearing
    it for the next message, and the `user` variable from the user label. Then we
    call the `Send` method on our server by using the `connection.invoke` method and
    pass through our variables as parameters.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从消息输入元素中设置`message`变量，然后清除它以便下一条消息使用，并从用户标签中设置`user`变量。然后我们使用`connection.invoke`方法调用服务器上的`Send`方法，并将我们的变量作为参数传递。
- en: 'Define the `sendWelcomeMessage` function:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`sendWelcomeMessage`函数：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Just like the `sendMessage` function described in step 4, we will use the `connection.invoke`
    function to call the `Send` method on our server. This time though we pass through
    the string `'system'` as the user parameter and a little informational message
    about the user that just joined.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 就像步骤4中描述的`sendMessage`函数一样，我们将使用`connection.invoke`函数调用服务器上的`Send`方法。不过这次我们将字符串`'system'`作为用户参数传递，以及有关刚刚加入的用户的一些信息性消息。
- en: 'Define the `updateChat` method:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`updateChat`方法：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`updateChat` is just our custom function used to update the chat history panel.
    We could have done this inline in the two `connection.on` functions, but that
    means we would have repeated ourselves. As a general rule in any coding you should
    try not to repeat code.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateChat`只是我们用来更新聊天历史面板的自定义函数。我们本可以在两个`connection.on`函数中内联执行这个操作，但这样就意味着我们会重复自己。在任何编码中，通常的规则是尽量避免重复代码。'
- en: 'In this function, we set the `chat` variable to however we want each chat history
    line to look in terms of styling. In this case, we simply style our user (with
    a colon) bold with the message un-styled afterwards and a line-break at the end.
    A few lines of chat will look something like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们将`chat`变量设置为我们希望每条聊天历史记录的样式。在这种情况下，我们只是将我们的用户（带有冒号）加粗显示，然后消息不加样式，最后换行。几行聊天看起来会像这样：
- en: '**John**: Hello people'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**John**: 大家好'
- en: '**Sarah**: Hi John'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sarah**: 你好 John'
- en: '**server**: Peter joined the chat'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**server**: Peter加入了聊天'
- en: '**John**: Hi Sarah, Hello Peter'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**John**: 你好 Sarah，你好 Peter'
- en: '**Peter**: Hello Everyone'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Peter**: 大家好'
- en: I also check the chat div `innerText` property to determine if the chat history
    and archive panels should be visible.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我还检查了聊天div的`innerText`属性，以确定聊天历史和存档面板是否可见。
- en: 'Define the `archiveChat` function:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`archiveChat`函数：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Like everything else, I've tried to keep this as simple as possible. We take
    the `innerText` of our chat panel (div) and the path specified in the `archivePath`
    input and pass it through to the server's `ArchiveChat` method.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他一切一样，我尽量保持简单。我们获取聊天面板（div）的`innerText`和`archivePath`输入中指定的路径，然后将它们传递给服务器的`ArchiveChat`方法。
- en: 'Of course we have a small window for error here: if the user does not type
    in a valid path for the file to be saved, the code will throw an exception. I''ll
    leave it to your own creativity to sort that one out. I''m just here for the SignalR
    functionality.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里我们有一个小错误的窗口：如果用户没有输入有效的文件保存路径，代码将抛出异常。我会留给你自己的创造力来解决这个问题。我只是在这里为了SignalR功能。
- en: Solution overview
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案概述
- en: 'Now you should have a complete, buildable solution. Let''s have a quick look
    at the solution in Solution Explorer:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该有一个完整的、可构建的解决方案。让我们快速查看一下解决方案资源管理器中的解决方案：
- en: '![](img/01b3c3b0-90b7-4bc6-b9d5-130e1430940f.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01b3c3b0-90b7-4bc6-b9d5-130e1430940f.png)'
- en: 'Starting at the top, let me list the changes we''ve made to our `Chapter5`
    project:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始，让我列出我们对`Chapter5`项目所做的更改：
- en: 'The following is the SignalR Asp.NET Core library we added through NuGet:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我们通过NuGet添加的SignalR Asp.NET Core库：
- en: '`Dependencies/NuGet/Microsoft.AspNetCore.SignalR (1.0.0-alpha2-final)`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dependencies/NuGet/Microsoft.AspNetCore.SignalR (1.0.0-alpha2-final)`'
- en: 'We copied this JavaScript library manually from the `node_modules` folder after
    we downloaded it using `npm`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们手动从`node_modules`文件夹中复制了这个JavaScript库，之后使用`npm`下载了它：
- en: '`wwwroot/scripts/signalr-client-1.0.0-alpha2-final.min.js`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`wwwroot/scripts/signalr-client-1.0.0-alpha2-final.min.js`'
- en: Our client page with HTML markup, styling and JavaScript all in one:  `one.wwwroot/index.html`
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的客户端页面包含了HTML标记、样式和JavaScript：`one.wwwroot/index.html`
- en: If you are going to use this application as a base and extend it, I recommend
    moving the JavaScript code to a separate `.js` file. It is easier to manage and
    is another good coding standard to follow.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要将这个应用程序作为基础并进行扩展，我建议将JavaScript代码移到一个单独的`.js`文件中。这样更容易管理，也是另一个良好的编码标准。
- en: '`Chat.cs`: This is our chat server code—or rather any custom Task methods that
    we declared'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Chat.cs`：这是我们的聊天服务器代码，或者说是我们声明的任何自定义任务方法'
- en: '`Startup.cs`: This file is standard in an Asp.NET Code web application, but
    we changed the configuration to make sure SignalR is added as a service'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Startup.cs`：这个文件在Asp.NET Code web应用程序中是标准的，但我们改变了配置以确保SignalR被添加为服务'
- en: 'Let''s build our project. On the top menu in Visual Studio, click the Build
    menu button:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们构建我们的项目。在Visual Studio的顶部菜单中，单击“构建”菜单按钮：
- en: '![](img/4640cf57-8c48-48e4-905e-c13e61731f40.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4640cf57-8c48-48e4-905e-c13e61731f40.png)'
- en: You can choose to either build the entire solution, or in individual project.
    Seeing that we only have one project in our solution, we can choose either. You
    can also use the keyboard shortcut *Ctrl* + *Shift* + *B*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择构建整个解决方案，也可以选择单独的项目。鉴于我们的解决方案中只有一个项目，我们可以选择任何一个。您还可以使用键盘快捷键*Ctrl* + *Shift*
    + *B*。
- en: 'You should see some (hopefully successful) build messages in the Output window:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在输出窗口中看到一些（希望成功的）构建消息：
- en: '![](img/3ea60140-3380-4d22-88ce-b05b988eb1dc.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ea60140-3380-4d22-88ce-b05b988eb1dc.png)'
- en: If you get any errors, go through the chapter again and see whether you have
    missed something. A small thorn can cause a lot of discomfort.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到任何错误，请再次查看本章，看看您是否漏掉了什么。一个小刺可以引起很多不适。
- en: Showing and telling
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示和告知
- en: It's time. You've created the project, added the libraries, and wrote the code.
    Now let's see this thing in action.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候了。您已经创建了项目，添加了库，并编写了代码。现在让我们看看这个东西的表现。
- en: Running the application
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To run the app, hit *F5* (or *Ctrl* + *F5* to start without debugging). The
    app will open in your default browser and you should see this:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，请按*F5*（或*Ctrl* + *F5*以无调试模式启动）。应用程序将在默认浏览器中打开，您应该看到这个：
- en: '![](img/c3c3dad3-aa48-4ecb-931a-b904edf99865.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3c3dad3-aa48-4ecb-931a-b904edf99865.png)'
- en: Wait. What? We must be missing something here.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。什么？我们一定是漏掉了什么。
- en: Now we could just navigate to the index.html page by changing our URL to `localhost:12709/index.html`
    (just check your port number) and we'll be all good.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需通过将我们的URL更改为`localhost:12709/index.html`（只需检查您的端口号），我们就可以导航到index.html页面了。
- en: Instead, let's specify our `index.html` page as our default launch page.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们将我们的`index.html`页面指定为默认启动页面。
- en: 'In the `Startup.cs` class, in the `Configure` method, add this line at the
    top:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Startup.cs`类的`Configure`方法中，在顶部添加这一行：
- en: '`app.UseDefaultFiles();`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.UseDefaultFiles();`'
- en: 'With this little gem, any request to the `wwwroot` folder (which at any time
    navigates to your website) will search for one of the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个小宝石，对`wwwroot`文件夹的任何请求（随时导航到您的网站）都将搜索以下之一：
- en: '`default.htm`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default.htm`'
- en: '`default.html`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default.html`'
- en: '`index.htm`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.htm`'
- en: '`index.html`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: The first file found will be the file served as your default page. Great!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 找到的第一个文件将作为您的默认页面提供。太棒了！
- en: 'Now let''s run our app again:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次运行我们的应用程序：
- en: '![](img/a1bfe8fc-a929-49ad-95b2-670f290432ff.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1bfe8fc-a929-49ad-95b2-670f290432ff.png)'
- en: Even though our URL still does not show the `/index.html` part, our web app
    now knows which page to serve. Now we can start chatting. Type a username and
    hit *Enter:*
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '即使我们的URL仍然不显示`/index.html`部分，我们的Web应用程序现在知道要提供哪个页面。现在我们可以开始聊天了。输入用户名并按*Enter*： '
- en: '![](img/d709f6ac-7698-4d04-8c10-bbf889d243f4.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d709f6ac-7698-4d04-8c10-bbf889d243f4.png)'
- en: As you can see, our name panel is now hidden and our chat and archive panels
    are showing.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的名称面板现在被隐藏，我们的聊天和存档面板正在显示。
- en: Our server was also kind enough to inform us that we joined the chat, thanks
    to our `sendWelcomeMessage(user)` function.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务器还友好地通知我们加入了聊天，感谢我们的`sendWelcomeMessage(user)`函数。
- en: 'Every time we send a message, our Chat History will be updated:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们发送消息，我们的聊天历史都会更新：
- en: '![](img/6b43327e-ef9d-455d-89bc-b6540065f0ab.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b43327e-ef9d-455d-89bc-b6540065f0ab.png)'
- en: Getting the party started
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始派对
- en: A conversation is only a conversation if multiple parties are involved. So let's
    start a party.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 只有多方参与，对话才是对话。所以让我们开始一个派对。
- en: If you publish the app on a network you can use actual network clients to chat
    with, but I'm not on a network (not in that sense), so we use another trick. We
    can use various browsers to represent our different party guests (network clients).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在网络上发布应用程序，可以使用实际的网络客户端进行聊天，但我不在网络上（不是那个意思），所以我们使用另一个技巧。我们可以使用各种浏览器来代表我们不同的派对客人（网络客户端）。
- en: Copy your application URL (once again, check the port number) and paste it into
    a few other browsers.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 复制您的应用程序URL（再次检查端口号）并粘贴到其他几个浏览器中。
- en: '![](img/a22f7279-49d4-4b86-9e0e-ce876ad1c5c8.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a22f7279-49d4-4b86-9e0e-ce876ad1c5c8.png)'
- en: For each new guest (browser) you will need to specify a username. To make it
    easier to follow, I'll call my additional guests the different browser names.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个新客人（浏览器），您需要指定一个用户名。为了更容易跟踪，我将称我的其他客人为不同的浏览器名称。
- en: 'As each of them enter the chat and start sending messages, you''ll see our
    Chat History grow:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们每个人进入聊天并开始发送消息时，您将看到我们的聊天历史增长：
- en: '![](img/2dbcf2c4-7279-4912-9bbe-6a1fe131277f.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dbcf2c4-7279-4912-9bbe-6a1fe131277f.png)'
- en: You can tile the browsers (or move them to other monitors if you have extra)
    to see how many message sent by one, gets delivered to all instantaneously, which
    is the whole point of SignalR.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将浏览器平铺（或将它们移动到其他显示器，如果您有额外的显示器）以查看由一个人发送的消息立即传递给所有人的数量，这正是SignalR的全部意义所在。
- en: 'We started with John Doe in Microsoft Edge, so we''ll continue with him there:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Microsoft Edge中的John Doe开始，所以我们将在那里继续：
- en: '![](img/85bad280-d76b-4bb9-9c8b-312f268c9c5c.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85bad280-d76b-4bb9-9c8b-312f268c9c5c.png)'
- en: 'Opera was the first to join the party:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Opera是第一个加入派对的：
- en: '![](img/131e397c-c19f-4f7e-ad53-4e7edf88b91e.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/131e397c-c19f-4f7e-ad53-4e7edf88b91e.png)'
- en: 'Then Chrome arrived:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后Chrome到达：
- en: '![](img/320084a0-9cc5-4017-90ce-6a6053b87f93.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/320084a0-9cc5-4017-90ce-6a6053b87f93.png)'
- en: 'And finally, Firefox joined as well:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Firefox也加入了：
- en: '![](img/e09e7e15-e27f-4078-a751-a895b7e3b77b.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e09e7e15-e27f-4078-a751-a895b7e3b77b.png)'
- en: You'll also notice that each guest's chat history only starts when they join
    the chat. This is by design. We don't send historical chats to clients when they
    join.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到每个客人的聊天历史只有在他们加入聊天时才开始。这是有意设计的。我们不会在客户端加入时发送历史聊天记录。
- en: Archiving the chat
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存档聊天
- en: 'To save the chat history to a text file, enter a valid local folder path in
    the `archivePath` input element and hit the Archive Chat button:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要将聊天记录保存到文本文件中，请在`archivePath`输入元素中输入有效的本地文件夹路径，然后点击“存档聊天”按钮：
- en: '![](img/8b97673f-55c3-4f9c-8811-6da042913545.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b97673f-55c3-4f9c-8811-6da042913545.png)'
- en: 'As mentioned earlier, we haven''t built in proper validation for our path,
    so make sure you test it using a valid path. If successful, you should see a message
    in the chat window like this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们尚未为我们的路径构建适当的验证，因此请确保使用有效路径进行测试。如果成功，您应该在聊天窗口中看到这样的消息：
- en: '[PRE15]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You will also find the newly created text file in the specified path with the
    `ChatArchive_[date].txt` naming convention.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将在指定路径中找到新创建的文本文件，文件名采用`ChatArchive_[date].txt`的命名约定。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As shown in this chapter, SignalR is really easy to implement. We created a
    chat application, but there are a number of apps that can benefit from real-time
    experiences. These include stock exchange, social media, multiplayer games, auctions,
    e-commerce, financial reporting, and weather notifications
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章所示，SignalR非常容易实现。我们创建了一个聊天应用程序，但有许多应用程序可以从实时体验中受益。这些包括股票交易、社交媒体、多人游戏、拍卖、电子商务、财务报告和天气通知。
- en: The list can go on. Even if the need for real-time data is not a requirement,
    SignalR can still be beneficial for any app to make communication between nodes
    seamless.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以继续。即使实时数据的需求不是必需的，SignalR仍然可以使任何应用程序受益，使节点之间的通信变得无缝。
- en: Glancing at the GitHub page for Asp.NET SignalR ([https://github.com/aspnet/SignalR](https://github.com/aspnet/SignalR)),
    it is obvious that the library is constantly being worked on and improved, which
    is great news.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览Asp.NET SignalR的GitHub页面（[https://github.com/aspnet/SignalR](https://github.com/aspnet/SignalR)），显然该库正在不断地进行改进和完善，这是个好消息。
- en: With the need for quick, relevant, and accurate information becoming more critical,
    SignalR is a great player to have on your team.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 随着对快速、相关和准确信息的需求变得更加关键，SignalR是您团队中的重要成员。
