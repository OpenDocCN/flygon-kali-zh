["```php\nfunction addImperative( arr ) {\n\u00a0let result = 0;\n\u00a0for ( let i = 0; i < arr.length; i++ ) {\n\u00a0\u00a0\u00a0result += arr[ i ];\n\u00a0}\n\u00a0return result;\n}\nfunction addDeclarative( arr ) {\n\u00a0return arr.reduce( ( red, val ) => red + val, 0 );\n}\n```", "```php\nfunction imperative( arr ) {\n\u00a0const filtered = [];\n\u00a0for ( let i = 0; i < arr.length; i++ ) {\n\u00a0\u00a0\u00a0if ( arr[ i ] > 0 ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0filtered.push( arr[ i ] );\n\u00a0\u00a0\u00a0}\n\u00a0}\n\u00a0for ( let j = 0; j < filtered.length; j++ ) {\n\u00a0\u00a0\u00a0filtered[ j ] = 2 * filtered[ j ];\n\u00a0}\n\u00a0return filtered;\n}\nfunction declarative( arr ) {\n\u00a0return arr.filter( v => v > 0 ).map( v => 2 * v );\n}\n```", "```php\nconst state = { prop1: 5 };\nfunction notPure () {\n\u00a0\u00a0return state.prop1 > 0 ? 'Valid': 'Invalid';\n}\nfunction pure( val ) {\n\u00a0\u00a0return val > 0 ? 'Valid': 'Invalid';\n}\nnotPure(); // Expected output: 'Valid'\npure( state.prop ); // Expected output: 'Valid'\n```", "```php\nfunction notPure( input ) {\n\u00a0\u00a0input.prop2 = 'test';\n}\nfunction pure( input ) {\n\u00a0\u00a0input = JSON.parse( JSON.stringify( input ) );\n\u00a0\u00a0input.prop2 = 'test';\n\u00a0\u00a0return input;\n}\n```", "```php\nfunction addItem( cart, item, quantity ) {\n\u00a0// Duplicate cart\n\u00a0const newCart = JSON.parse( JSON.stringify( cart ) );\n\u00a0newCart.push( ...Array( quantity ).fill( item ) );\n\u00a0return newCart;\n}\n```", "```php\nfunction sortObjField1( field ) {\n\u00a0return function ( v1, v2 ) {\n\u00a0\u00a0\u00a0return v1[ field ] > v2[ field ];\n\u00a0}\n}\nfunction sortObjField2( field, v1, v2 ) {\n\u00a0return v1[ field ] > v2[ field ];\n}\n```", "```php\nconst data = [ { f1: 6, f2: 3 }, { f1: 12, f2: 0 }, { f1: 9, f2: 1 }, { f1: 6, f2: 7 } ];\nfunction swap( key1, key2 ) {\n\u00a0return obj => {\n\u00a0\u00a0\u00a0[ obj[ key1 ], obj[ key2 ] ] = [ obj[ key2 ], obj[ key1 ] ];\n\u00a0\u00a0\u00a0return obj;\n\u00a0}\n}\nconsole.log( data.map( swap( 'f1', 'f2' ) ) );\n```", "```php\nconst state = { age: 15 }\nfunction doSomething( name ) {\n\u00a0\u00a0return state.age > 13 ? '${name} is old enough' : '${name} is not old enough';\n}\n```", "```php\nconst person = { age: 10, firstName: 'Sandra', lastName: 'Jeffereys' };\nfunction getOlder( age ) {\n\u00a0return ++age;\n}\nfunction formatName( first, last ) {\n\u00a0return 'Mrs. ${first} ${last}';\n}\nconsole.log( person );\nperson.age = getOlder( person.age );\nperson.name = formatName( person.firstName, person.lastName );\nconsole.log( person );\n```", "```php\nconst data  = {\n\u00a0\u00a0prop1: 'value1',\n\u00a0\u00a0objectProp: { p1: 'v1', p2: 'v2' },\n\u00a0\u00a0arrayProp: [ 1, 'test' , { p1: 'v1' }, [ 1, 2, 3 ] ]\n};\nObject.freeze( data );\nObject.freeze( data.objectProp );\nObject.freeze( data.arrayProp );\nObject.freeze( data.arrayProp[2] );\nObject.freeze( data.arrayProp[3] );\n```", "```php\nfunction multiplyBy2( c ) {\n\u00a0return 2 * c;\n}\nfunction sumNumbers( a, b ) {\n\u00a0return a + b;\n}\nconst v1 = sumNumbers( 2, 4 ); // 2 + 4 = 6\nconst v2 = multiplyBy2( v2 ); // 2 * 6 = 12\nconst v3 = multiplyBy2( sumNumbers( 2, 4 ) ); // 2 * ( 2 + 4 ) = 12\n```"]