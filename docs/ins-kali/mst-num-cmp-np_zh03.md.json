["```py\nIn [1]: import numpy as np\nIn [2]: example_array = np.arange(12).reshape(3,4)\nIn [3]: example_array\nOut[3]: array([[ 0, 1, 2, 3],\n               [ 4, 5, 6, 7],\n               [ 8, 9, 10, 11]])\nIn [4]: np.save('example.npy',example_array)\nIn [5]: d = np.load('example.npy')\nIn [6]: np.shape(d)\nOut[6]: (3, 4)\nIn [7]: d\nOut[7]: array([[ 0, 1, 2, 3],\n               [ 4, 5, 6, 7],\n               [ 8, 9, 10, 11]])\n```", "```py\nIn [8]: x = np.arange(10)\n        y = np.arange(12)\n        np.savez('second_example.npz',x, y)\n        npzfile = np.load('second_example.npz')\n        npzfile.files\nOut[8]: ['arr_0', 'arr_1']\nIn [9]: npzfile['arr_0']\nOut[9]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nIn [10]: npzfile['arr_1']\nOut[10]: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nIn [11]: np.savez_compressed('compressed_example.npz', first_array = x , second_array = y)\n         npzfile = np.load('compressed_example.npz')\n         npzfile.files\nOut[11]: ['first_array', 'second_array']\nIn [12]: npzfile['first_array']\nOut[12]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nIn [13]: npzfile['second_array']\nOut[13]: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n```", "```py\nIn [15]: a = np.loadtxt(\"My_file.txt\", delimiter='\\t', skiprows=4)\n         a\nOut[15]: array([ 0., 1., 2., 3., 4., 5., 6., 7., 8.,\n                 9., 10., 11., 12., 13., 14., 15., 16., 17.,\n                 18., 19., 20., 21., 22., 23., 24., 25., 26.,\n                 27., 28., 29., 30., 31., 32., 33., 34., 35.,\n                 36., 37., 38., 39., 40., 41., 42., 43., 44.,\n                 45., 46., 47., 48., 49., 50., 51., 52., 53.,\n                 54., 55., 56., 57., 58., 59., 60., 61., 62.,\n                 63., 64., 65., 66., 67., 68., 69., 70., 71.,\n                 72., 73., 74., 75., 76., 77., 78., 79., 80.,\n                 81., 82., 83., 84., 85., 86., 87., 88., 89.,\n                 90., 91., 92., 93., 94., 95., 96., 97., 98.,\n                 99., 100., 101., 102., 103., 104., 105., 106., 107.,\n                 108., 109., 110., 111., 112., 113., 114., 115., 116.,\n                 117., 118., 119., 120., 121., 122., 123., 124., 125.,\n                 126., 127., 128., 129., 130., 131., 132., 133., 134.,\n                 135., 136., 137., 138., 139., 140., 141., 142., 143.,\n                 144., 145., 146., 147., 148., 149., 150., 151., 152.,\n                 153., 154., 155., 156., 157., 158., 159., 160., 161.,\n                 162., 163., 164., 165., 166., 167., 168., 169., 170.,\n                 171., 172., 173., 174., 175., 176., 177., 178., 179.,\n                 180., 181., 182., 183., 184., 185., 186., 187., 188.,\n                 189., 190., 191., 192., 193., 194., 195., 196., 197.,\n                 198., 199., 200., 201., 202., 203., 204., 205., 206.,\n                 207., 208., 209., 210., 211., 212., 213., 214., 215.,\n                 216., 217., 218., 219., 220., 221., 222., 223., 224.,\n                 225., 226., 227., 228., 229., 230., 231., 232., 233.,\n                 234., 235., 236., 237., 238., 239., 240., 241., 242.,\n                 243., 244., 245., 246., 247., 248., 249.])\n```", "```py\nIn [16]: b = np.genfromtxt(\"My_file.txt\", delimiter='\\t')\n         b\nOut[16]: array([ nan, nan, nan, nan, 0., 1., 2., 3., 4.,\n                 5., 6., 7., 8., 9., 10., 11., 12., 13.,\n                 14., 15., 16., 17., 18., 19., 20., 21., 22.,\n                 23., 24., 25., 26., 27., 28., 29., 30., 31.,\n                 32., 33., 34., 35., 36., 37., 38., 39., 40.,\n                 41., 42., 43., 44., 45., 46., 47., 48., 49.,\n                 50., 51., 52., 53., 54., 55., 56., 57., 58.,\n                 59., 60., 61., 62., 63., 64., 65., 66., 67.,\n                 68., 69., 70., 71., 72., 73., 74., 75., 76.,\n                 77., 78., 79., 80., 81., 82., 83., 84., 85.,\n                 86., 87., 88., 89., 90., 91., 92., 93., 94.,\n                 95., 96., 97., 98., 99., 100., 101., 102., 103.,\n                 104., 105., 106., 107., 108., 109., 110., 111., 112.,\n                 113., 114., 115., 116., 117., 118., 119., 120., 121.,\n                 122., 123., 124., 125., 126., 127., 128., 129., 130.,\n                 131., 132., 133., 134., 135., 136., 137., 138., 139.,\n                 140., 141., 142., 143., 144., 145., 146., 147., 148.,\n                 149., 150., 151., 152., 153., 154., 155., 156., 157.,\n                 158., 159., 160., 161., 162., 163., 164., 165., 166.,\n                 167., 168., 169., 170., 171., 172., 173., 174., 175.,\n                 176., 177., 178., 179., 180., 181., 182., 183., 184.,\n                 185., 186., 187., 188., 189., 190., 191., 192., 193.,\n                 194., 195., 196., 197., 198., 199., 200., 201., 202.,\n                 203., 204., 205., 206., 207., 208., 209., 210., 211.,\n                 212., 213., 214., 215., 216., 217., 218., 219., 220.,\n                 221., 222., 223., 224., 225., 226., 227., 228., 229.,\n                 230., 231., 232., 233., 234., 235., 236., 237., 238.,\n                 239., 240., 241., 242., 243., 244., 245., 246., 247.,\n                 248., 249.])\n```", "```py\nIn [17]: data_csv = np.loadtxt(\"MyData.csv\", delimiter=',')\nIn [18]: data_csv[1:3]\nOut[18]: array([[ 0.21982, 0.31271, 0.66934, 0.06072, 0.77785, 0.59984,\n                  0.82998, 0.77428, 0.73216, 0.29968],\n                [ 0.78866, 0.61444, 0.0107 , 0.37351, 0.77391, 0.76958,\n                  0.46845, 0.76387, 0.70592, 0.0851 ]])\nIn [19]: np.shape(data_csv)\nOut[19]: (15, 10)\nIn [20]: np.savetxt('MyData1.csv',data_csv, delimiter = ',')\nIn [21]: data_csv1 = np.genfromtxt(\"MyData1.csv\", delimiter = ',')\nIn [22]: data_csv1[1:3]\nOut[22]: array([[ 0.21982, 0.31271, 0.66934, 0.06072, 0.77785, 0.59984,\n                  0.82998, 0.77428, 0.73216, 0.29968],\n                [ 0.78866, 0.61444, 0.0107 , 0.37351, 0.77391, 0.76958,\n                  0.46845, 0.76387, 0.70592, 0.0851 ]])\nIn [23]: np.shape(data_csv1)\nOut[23]: (15, 10)\n```", "```py\nIn [24]: print (type(a))\n         print (type(b))\n         <class 'numpy.ndarray'>\n         <class 'numpy.ndarray'>\n```", "```py\nIn [25]: c = a.tolist()\n         c\nOut[25]: [0.0,\n         1.0,\n         2.0,\n         3.0,\n         4.0,\n         5.0,\n         6.0,\n         7.0,\n         8.0,\n         9.0,\n         10.0,\n         11.0,\n         12.0,\n         13.0,\n         14.0,\n         15.0,\n         16.0,\n         17.0,\n         18.0,\n         ...\nIn [26]: np.savetxt('My_List.txt',c, delimiter=';')\nIn [27]: myList = np.loadtxt(\"My_List.txt\", delimiter=';')\n         type(myList)\nOut[27]: numpy.ndarray\n```", "```py\nIn [28]: d = np.array_str(a,precision=1)\n         d\nOut[28]: '[ 0\\. 1\\. 2\\. 3\\. 4\\. 5\\. 6\\. 7\\. 8\\. 9\\. 10\\. 11.\\n 12\\. 13\\. 14\\. 15\\. 16\\. 17\\. 18\\. 19\\. 20\\. 21\\. 22\\. 23.\n          24\\. 25\\. 26\\. ... ]' \n```", "```py\nIn [29]: from sklearn.datasets import load_boston\n         dataset = load_boston()\n         dataset\n```", "```py\nIn [30]: from sklearn.datasets import load_boston\n         dataset = load_boston()\n         samples,label, feature_names = dataset.data , dataset.target , dataset.feature_names\nIn [31]: samples.shape\nOut[31]: (506, 13)\nIn [32]: label.shape\nOut[32]: (506,)\nIn [33]: feature_names\nOut[33]: array(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD',\n                'TAX', 'PTRATIO', 'B', 'LSTAT'],\n                dtype='<U7')\n```", "```py\nIn [35]: print(samples.dtype)\n         print(label.dtype)\n         float64\n         float64\n```", "```py\nIn [36]: np.isnan(samples)\nOut[36]: array([[False, False, False, ..., False, False, False],\n                [False, False, False, ..., False, False, False],\n                [False, False, False, ..., False, False, False],\n                ...,\n                [False, False, False, ..., False, False, False],\n                [False, False, False, ..., False, False, False],\n                [False, False, False, ..., False, False, False]], dtype=bool)\nIn [37]: np.isnan(np.sum(samples))\nOut[37]: False\nIn [38]: np.isnan(np.sum(label))\nOut[38]: False\n```", "```py\nIn [39]: np.set_printoptions(suppress=True, linewidth=125)\n         minimums = np.round(np.amin(samples, axis=0), decimals=1)\n         maximums = np.round(np.amax(samples, axis=0), decimals=1)\n         range_column = np.round(np.ptp(samples, axis=0), decimals=1)\n         mean = np.round(np.mean(samples, axis=0), decimals=1)\n         median = np.round(np.median(samples, axis=0), decimals=1)\n         variance = np.round(np.var(samples, axis=0), decimals=1)\n         tenth_percentile = np.round(np.percentile(samples, 10, axis=0), decimals = 1)\n         ninety_percentile = np.round(np.percentile(samples, 90 ,axis=0), decimals = 1)\nIn [40]: range_column\nOut[40]: array([ 89\\. , 100\\. ,  27.3,   1\\. ,   0.5,   5.2,  97.1,  11\\. ,  23\\. , 524\\. ,   9.4, 396.6,                                                                           36.2])\n```", "```py\nIn [45]: minimum = arr.minmax[0]\n         maximum = arr.minmax[1]\n         mean = arr.mean\n         median = np.round(np.median(samples,axis = 0), decimals = 1)\n         variance = arr.variance\n         tenth_percentile = stats.scoreatpercentile(samples, per = 10, axis = 0)\n         ninety_percentile = stats.scoreatpercentile(samples, per =90, axis = 0)\n         rng = stats.iqr(samples, rng = (20,80), axis = 0)\n         np.set_printoptions(suppress = True, linewidth = 125)\n         Basic_Statistics1 = np.round(np.vstack((minimum,maximum,rng,                                                     mean,median,variance,tenth_percentile,ninety_percentile)), Basic_Statistics1.shape\nOut[45]: (8, 13)\nIn [46]: stat_labels1 = ['minm', 'maxm', 'rang', 'mean', 'medi', 'vari', '50%t', '90%t']\n```", "```py\nIn [48]: %matplotlib notebook\n         %matplotlib notebook\n         import matplotlib.pyplot as plt\n         NOX = samples[:,5:6]\n         plt.hist(NOX,bins ='auto')\n         plt.title(\"Distribution nitric oxides concentration (parts per 10 million)\")\n         plt.show()\n```", "```py\nIn [49]: plt.hist(NOX,bins ='auto', normed = True)\n         plt.title(\"Distribution nitric oxides concentration (parts per 10 million)\")\n         plt.show()\n```", "```py\nIn [50]: import matplotlib.pyplot as plt\n         NOX = samples[:,5:6]\n         n, bins, patches = plt.hist(NOX, bins='auto')\n         print('Bin Sizes')\n         print(n)\n         print('Bin Edges')\n         print(bins)\n```", "```py\nIn [51]: bins_string = bins.astype(np.str)\n         n_string = n.astype(np.str)\n         lists = []\n         for i in range(0, len(bins_string)-1):\n             c = bins_string[i]+ \"-\" + bins_string[i+1]\n             lists.append(c)\n        new_bins = np.asarray(lists)\n        Stacked_Bins = np.vstack((new_bins, n_string)).T\n        Stacked_Bins\n```", "```py\nIn [52]: fig, ((ax1, ax2, ax3),(ax4,ax5,ax6)) = plt.subplots(2,3,sharex=True)\n         axs = [ax1,ax2,ax3,ax4,ax5,ax6]\n         list_methods = ['fd','doane', 'scott', 'rice', 'sturges','sqrt']\n         plt.tight_layout(pad=1.1, w_pad=0.8, h_pad=1.0)\n         for n in range(0, len(axs)):\n             axs[n].hist(NOX,bins = list_methods[n])\n             axs[n].set_title('{}'.format(list_methods[n]))\n```", "```py\nIn [53]: import numpy as np\n         samples_new = np.delete(samples, 3 , axis=1)\n         samples_new.shape\nOut[53]: (506, 12)\nIn [54]: %matplotlib notebook\n         %matplotlib notebook\n         import matplotlib.pyplot as plt\n         fig,((ax1, ax2 , ax3),(ax4, ax5, ax6), (ax7, ax8, ax9), (ax10, ax11, ax12)) = plt.subplots(4,3,                                 figsize = (10,15))                   \n         axs =[ax1, ax2 , ax3, ax4, ax5, ax6, ax7, ax8, ax9, ax10, ax11, ax12]\n         feature_names_new = np.delete(feature_names,3)\n         for n in range(0, len(axs)):\n             axs[n].hist(samples_new[:,n:n+1], bins ='auto', normed = True)\n             axs[n].set_title('{}'.format(feature_names[n]))\n```", "```py\nIn [55]: %matplotlib notebook\n         %matplotlib notebook\n         from scipy.stats import skewnorm\n         fig, (ax1, ax2, ax3) = plt.subplots(1,3 ,figsize=(10,2.5))\n         x1 = np.linspace(skewnorm.ppf(0.01,-3), skewnorm.ppf(0.99,-3),100)\n         x2 = np.linspace(skewnorm.ppf(0.01,0), skewnorm.ppf(0.99,0),100)\n         x3 = np.linspace(skewnorm.ppf(0.01,3), skewnorm.ppf(0.99,3),100)\n         ax1.plot(skewnorm(-3).pdf(x1),'k-', lw=4)\n         ax2.plot(skewnorm(0).pdf(x2),'k-', lw=4)\n         ax3.plot(skewnorm(3).pdf(x3),'k-', lw=4)\n         ax1.set_title('Left Skew')\n         ax2.set_title('Normal Dist')\n         ax3.set_title('Right Skew')\n```", "```py\nIn [56]: %matplotlib notebook\n         %matplotlib notebook\n         import scipy\n         from scipy import stats\n         import matplotlib.pyplot as plt\n         fig, (ax1, ax2, ax3) = plt.subplots(1, 3 , figsize=(10,2))\n         axs= [ax1, ax2, ax3]\n         Titles = ['Mesokurtic', 'Lebtokurtic', 'Platykurtic']\n         #Mesokurtic Distribution - Normal Distribution\n         dist = scipy.stats.norm(loc=100, scale=5)\n         sample_norm = dist.rvs(size = 10000)\n         #leptokurtic Distribution\n         dist2 = scipy.stats.laplace(loc= 100, scale= 5)\n         sample_laplace = dist2.rvs(size= 10000)\n         #platykurtic Distribution\n         dist3 = scipy.stats.cosine(loc= 100, scale= 5)\n         sample_cosine = dist3.rvs(size= 10000)\n         samples = [sample_norm, sample_laplace, sample_cosine]\n\n         for n in range(0, len(axs)):\n             axs[n].hist(samples[n],bins= 'auto', normed= True)\n             axs[n].set_title('{}'.format(Titles[n]))\n             print (\"kurtosis of\" + Titles[n])\n             print(scipy .stats.describe(samples[n])[5])\n```", "```py\nIn [57]: samples,label, feature_names = dataset.data , dataset.target , dataset.feature_names\n         for n in range(0, len(feature_names_new)):\n             kurt = scipy.stats.describe(samples[n])[5]\n             skew = scipy.stats.describe(samples[n])[4]\n             print (feature_names_new[n] + \"-Kurtosis: {} Skewness: {}\" .format(kurt, skew))\n\n         CRIM-Kurtosis: 2.102090573040533 Skewness: 1.9534138515494224\n         ZN-Kurtosis: 2.8706349006925134 Skewness: 2.0753333576721893\n         INDUS-Kurtosis: 2.9386308786131767 Skewness: 2.1061627843164086\n         NOX-Kurtosis: 3.47131446484547 Skewness: 2.2172838215060517\n         RM-Kurtosis: 3.461596258869246 Skewness: 2.2086627738768234\n         AGE-Kurtosis: 3.395079726813977 Skewness: 2.1917520072643533\n         DIS-Kurtosis: 1.9313625761956317 Skewness: 1.924572804475305\n         RAD-Kurtosis: 1.7633603556547106 Skewness: 1.8601991629604233\n         TAX-Kurtosis: 1.637076772210217 Skewness: 1.8266096199819994\n         PTRATIO-Kurtosis: 1.7459544645159752 Skewness: 1.8679592455694167\n         B-Kurtosis: 1.7375702020429316 Skewness: 1.8566444885400044\n         LSTAT-Kurtosis: 1.8522036606250456 Skewness: 1.892802610207445\n```", "```py\nIn [58]: np.set_printoptions(suppress= True, linewidth= 125)\n         samples = dataset.data\n         CRIM = samples[:,0:1]\n         minimum = np.round(np.amin(CRIM), decimals=1)\n         maximum = np.round(np.amax(CRIM), decimals=1)\n         variance = np.round(np.var(CRIM), decimals=1)\n         mean = np.round(np.mean(CRIM), decimals=1)\n         Before_Trim = np.vstack((minimum, maximum, variance, mean))\n         minimum_trim = stats.tmin(CRIM, 1)\n         maximum_trim = stats.tmax(CRIM, 40)\n         variance_trim = stats.tvar(CRIM, (1,40))\n         mean_trim = stats.tmean(CRIM, (1,40))\n         After_Trim = np.round(np.vstack((minimum_trim,maximum_trim,variance_trim,mean_trim)), decimals=1) \n         stat_labels1 = ['minm', 'maxm', 'vari', 'mean']\n         Basic_Statistics1 = np.hstack((Before_Trim, After_Trim))\n         print (\"     Before     After\")\n         for stat_labels1, row1 in zip(stat_labels1, Basic_Statistics1):\n             print ('%s [%s]' % (stat_labels1, ''.join('%07s' % a for a in row1)))\n\n               Before   After\n        minm [ 0.0       1.0]\n        maxm [ 89.0     38.4]\n        vari [ 73.8     48.1]\n        mean [ 3.6       8.3]\n```", "```py\nIn [59]: %matplotlib notebook\n         %matplotlib notebook\n         import matplotlib.pyplot as plt\n         CRIM_TRIMMED = stats.trimboth(CRIM, 0.2)\n         fig, (ax1, ax2) = plt.subplots(1,2 , figsize =(10,2))\n         axs = [ax1, ax2]\n         df = [CRIM, CRIM_TRIMMED]\n         list_methods = ['Before Trim', 'After Trim']\n         for n in range(0, len(axs)):\n             axs[n].hist(df[n], bins = 'auto')\n             axs[n].set_title('{}'.format(list_methods[n]))\n```", "```py\nIn [60]: %matplotlib notebook\n         %matplotlib notebook\n         import matplotlib.pyplot as plt\n         from scipy import stats\n         samples = dataset.data\n         fig, (ax1,ax2) = plt.subplots(1,2, figsize =(8,3))\n         axs = [ax1, ax2]\n         list_features = ['CRIM', 'RM']\n         ax1.boxplot(stats.trimboth(samples[:,0:1],0.2))\n         ax1.set_title('{}'.format(list_features[0]))\n         ax2.boxplot(stats.trimboth(samples[:,5:6],0.2))\n         ax2.set_title('{}'.format(list_features[1]))\n```", "```py\nIn [61]: np.set_printoptions(suppress= True, linewidth = 125)\n         CorrelationCoef_Matrix = np.round(np.corrcoef(samples, rowvar= False), decimals= 1)\n         CorrelationCoef_Matrix\n```", "```py\nIn [62]: CorrelationCoef_Matrix1 = np.round(np.corrcoef(samples, rowvar= False), decimals= 1)\n         CorrelationCoef_Matrix1\n         import seaborn as sns; sns.set()\n         ax = sns.heatmap(CorrelationCoef_Matrix1, cmap= \"YlGnBu\")\n```", "```py\nIn [64]: %matplotlib notebook\n         %matplotlib notebook\n         import matplotlib.pyplot as plt\n         from scipy import stats\n         fig, (ax1, ax2, ax3) = plt.subplots(1,3 ,figsize= (10,4))\n         axs =[ax1,ax2,ax3]\n         feature_list = [samples[:,5:6], samples[:,7:8], samples[:,12:13]]\n         feature_names = [\"RM\", \"DIS\", \"LSTAT\"]\n         for n in range(0, len(feature_list)):\n             axs[n].scatter(label, feature_list[n], edgecolors=(0, 0, 0))\n             axs[n].set_ylabel(feature_names[n])\n             axs[n].set_xlabel('label')\n```", "```py\nIn [65]: %matplotlib notebook\n         %matplotlib notebook\n         import matplotlib.pyplot as plt\n         from scipy import stats\n         fig, (ax1, ax2, ax3) = plt.subplots(1,3 ,figsize= (9,4))\n         axs = [ax1, ax2, ax3]\n         RM_tr = stats.trimboth(samples[:,5:6],0.1)\n         label_tr = stats.trimboth(label, 0.1)\n         LSTAT_tr = stats.trimboth(samples[:,12:13],0.1)\n         DIS_tr = stats.trimboth(samples[:,7:8],0.1)\n         feature_names = [\"RM\", \"DIS\", \"LSTAT\"]\n         feature_list = [RM_tr, DIS_tr, LSTAT_tr]\n         for n in range(0, len(feature_list)):\n             axs[n].scatter(label_tr,feature_list[n], edgecolors=(0, 0, 0))\n             axs[n].set_ylabel(feature_names[n])\n             axs[n].set_xlabel('label')\n```"]