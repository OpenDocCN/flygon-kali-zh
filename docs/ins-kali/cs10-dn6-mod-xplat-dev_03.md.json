["```cs\n var\n\n resultOfOperation = firstOperand operator\n\n secondOperand; \n\n```", "```cs\n int\n\n x = 5\n\n;\nint\n\n y = 3\n\n;\nint\n\n resultOfAdding = x + y;\nint\n\n resultOfMultiplying = x * y; \n\n```", "```cs\n var\n\n resultOfOperation = onlyOperand operator\n\n; \nvar\n\n resultOfOperation2 = operator\n\n onlyOperand; \n\n```", "```cs\n int\n\n x = 5\n\n;\nint\n\n postfixIncrement = x++;\nint\n\n prefixIncrement = ++x;\nType theTypeOfAnInteger = typeof\n\n(int\n\n); \nint\n\n howManyBytesInAnInteger = sizeof\n\n(int\n\n); \n\n```", "```cs\n var\n\n resultOfOperation = firstOperand firstOperator \n  secondOperand secondOperator thirdOperand; \n\n```", "```cs\n     int\n\n     a = 3\n\n    ; \n    int\n\n     b = a++;\n    WriteLine($\"a is \n\n    {a}\n\n    , b is \n\n    {b}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    a is 4, b is 3 \n\n    ```", "```cs\n     int\n\n     c = 3\n\n    ;\n    int\n\n     d = ++c; // increment c before assigning it\n\n    WriteLine($\"c is \n\n    {c}\n\n    , d is \n\n    {d}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    a is 4, b is 3\n    c is 4, d is 4 \n\n    ```", "```cs\n     int\n\n     e = 11\n\n    ; \n    int\n\n     f = 3\n\n    ;\n    WriteLine($\"e is \n\n    {e}\n\n    , f is \n\n    {f}\n\n    \"\n\n    ); \n    WriteLine($\"e + f = \n\n    {e + f}\n\n    \"\n\n    ); \n    WriteLine($\"e - f = \n\n    {e - f}\n\n    \"\n\n    ); \n    WriteLine($\"e * f = \n\n    {e * f}\n\n    \"\n\n    ); \n    WriteLine($\"e / f = \n\n    {e / f}\n\n    \"\n\n    ); \n    WriteLine($\"e % f = \n\n    {e % f}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    e is 11, f is 3 \n    e + f = 14\n    e - f = 8 \n    e * f = 33 \n    e / f = 3 \n    e % f = 2 \n\n    ```", "```cs\n     double\n\n     g = 11.0\n\n    ;\n    WriteLine($\"g is \n\n    {g:N1}\n\n    , f is \n\n    {f}\n\n    \"\n\n    ); \n    WriteLine($\"g / f = \n\n    {g / f}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    g is 11.0, f is 3\n    g / f = 3.6666666666666665 \n\n    ```", "```cs\n int\n\n p = 6\n\n;\np += 3\n\n; // equivalent to p = p + 3;\n\np -= 3\n\n; // equivalent to p = p - 3;\n\np *= 3\n\n; // equivalent to p = p * 3;\n\np /= 3\n\n; // equivalent to p = p / 3; \n\n```", "```cs\n     bool\n\n     a = true\n\n    ;\n    bool\n\n     b = false\n\n    ;\n    WriteLine($\"AND  | a     | b    \"\n\n    );\n    WriteLine($\"a    | \n\n    {a & a,\n\n    -5\n\n    }\n\n     | \n\n    {a & b,\n\n    -5\n\n    }\n\n     \"\n\n    );\n    WriteLine($\"b    | \n\n    {b & a,\n\n    -5\n\n    }\n\n     | \n\n    {b & b,\n\n    -5\n\n    }\n\n     \"\n\n    );\n    WriteLine();\n    WriteLine($\"OR   | a     | b    \"\n\n    );\n    WriteLine($\"a    | \n\n    {a | a,\n\n    -5\n\n    }\n\n     | \n\n    {a | b,\n\n    -5\n\n    }\n\n     \"\n\n    );\n    WriteLine($\"b    | \n\n    {b | a,\n\n    -5\n\n    }\n\n     | \n\n    {b | b,\n\n    -5\n\n    }\n\n     \"\n\n    );\n    WriteLine();\n    WriteLine($\"XOR  | a     | b    \"\n\n    );\n    WriteLine($\"a    | \n\n    {a ^ a,\n\n    -5\n\n    }\n\n     | \n\n    {a ^ b,\n\n    -5\n\n    }\n\n     \"\n\n    );\n    WriteLine($\"b    | \n\n    {b ^ a,\n\n    -5\n\n    }\n\n     | \n\n    {b ^ b,\n\n    -5\n\n    }\n\n     \"\n\n    ); \n\n    ```", "```cs\n    AND  | a     | b    \n    a    | True  | False \n    b    | False | False \n    OR   | a     | b    \n    a    | True  | True  \n    b    | True  | False \n    XOR  | a     | b    \n    a    | False | True  \n    b    | True  | False \n\n    ```", "```cs\n     static\n\n    bool\n\n    DoStuff\n\n    ()\n\n    {\n      WriteLine(\"I am doing some stuff.\"\n\n    );\n      return\n\n     true\n\n    ;\n    } \n\n    ```", "```cs\n    WriteLine();\n    WriteLine($\"a & DoStuff() = \n\n    {a & DoStuff()}\n\n    \"\n\n    ); \n    WriteLine($\"b & DoStuff() = \n\n    {b & DoStuff()}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    I am doing some stuff. \n    a & DoStuff() = True\n    I am doing some stuff. \n    b & DoStuff() = False \n\n    ```", "```cs\n    WriteLine($\"a && DoStuff() = \n\n    {a && DoStuff()}\n\n    \"\n\n    ); \n    WriteLine($\"b && DoStuff() = \n\n    {b && DoStuff()}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    I am doing some stuff. \n    a && DoStuff() = True\n    b && DoStuff() = False // DoStuff function was not executed! \n\n    ```", "```cs\n     int\n\n     a = 10\n\n    ; // 00001010\n\n    int\n\n     b = 6\n\n    ;  // 00000110\n\n    WriteLine($\"a = \n\n    {a}\n\n    \"\n\n    );\n    WriteLine($\"b = \n\n    {b}\n\n    \"\n\n    );\n    WriteLine($\"a & b = \n\n    {a & b}\n\n    \"\n\n    ); // 2-bit column only \n\n    WriteLine($\"a | b = \n\n    {a | b}\n\n    \"\n\n    ); // 8, 4, and 2-bit columns \n\n    WriteLine($\"a ^ b = \n\n    {a ^ b}\n\n    \"\n\n    ); // 8 and 4-bit columns \n\n    ```", "```cs\n    a = 10\n    b = 6\n    a & b = 2 \n    a | b = 14\n    a ^ b = 12 \n\n    ```", "```cs\n     // 01010000 left-shift a by three bit columns\n\n    WriteLine($\"a << 3 = \n\n    {a << \n\n    3\n\n    }\n\n    \"\n\n    );\n    // multiply a by 8\n\n    WriteLine($\"a * 8 = \n\n    {a * \n\n    8\n\n    }\n\n    \"\n\n    );\n    // 00000011 right-shift b by one bit column\n\n    WriteLine($\"b >> 1 = \n\n    {b >> \n\n    1\n\n    }\n\n    \"\n\n    ); \n\n    ```", "```cs\n    a << 3 = 80\n    a * 8 = 80\n    b >> 1 = 3 \n\n    ```", "```cs\n     static\n\n    string\n\n    ToBinaryString\n\n    (\n\n    int\n\n    value\n\n    )\n\n    {\n      return\n\n     Convert.ToString(value\n\n    , toBase: 2\n\n    ).PadLeft(8\n\n    , '0'\n\n    );\n    } \n\n    ```", "```cs\n    WriteLine();\n    WriteLine(\"Outputting integers as binary:\"\n\n    );\n    WriteLine($\"a =     \n\n    {ToBinaryString(a)}\n\n    \"\n\n    );\n    WriteLine($\"b =     \n\n    {ToBinaryString(b)}\n\n    \"\n\n    );\n    WriteLine($\"a & b = \n\n    {ToBinaryString(a & b)}\n\n    \"\n\n    );\n    WriteLine($\"a | b = \n\n    {ToBinaryString(a | b)}\n\n    \"\n\n    );\n    WriteLine($\"a ^ b = \n\n    {ToBinaryString(a ^ b)}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Outputting integers as binary:\n    a =     00001010\n    b =     00000110\n    a & b = 00000010\n    a | b = 00001110\n    a ^ b = 00001100 \n\n    ```", "```cs\n int\n\n age = 47\n\n;\n// How many operators in the following statement?\n\nchar\n\n firstDigit = age.ToString()[0\n\n];\n// There are four operators:\n\n// = is the assignment operator\n\n// . is the member access operator\n\n// () is the invocation operator\n\n// [] is the indexer access operator \n\n```", "```cs\n if\n\n (expression1)\n{\n  // runs if expression1 is true\n\n}\nelse\n\n if\n\n (expression2)\n{\n  // runs if expression1 is false and expression2 if true\n\n}\nelse\n\n if\n\n (expression3)\n{\n  // runs if expression1 and expression2 are false\n\n  // and expression3 is true\n\n}\nelse\n\n{\n  // runs if all expressions are false\n\n} \n\n```", "```cs\n     string\n\n     password = \"ninja\"\n\n    ;\n    if\n\n     (password.Length < 8\n\n    )\n    {\n      WriteLine(\"Your password is too short. Use at least 8 characters.\"\n\n    );\n    }\n    else\n\n    {\n      WriteLine(\"Your password is strong.\"\n\n    );\n    } \n\n    ```", "```cs\n     Your password is too short. Use at least 8 characters. \n\n    ```", "```cs\n if\n\n (password.Length < 8\n\n)\n  WriteLine(\"Your password is too short. Use at least 8 characters.\"\n\n); \nelse\n\n  WriteLine(\"Your password is strong.\"\n\n); \n\n```", "```cs\n     // add and remove the \"\" to change the behavior\n\n    object\n\n     o = \"3\"\n\n    ; \n    int\n\n     j = 4\n\n    ;\n    if\n\n     (o is\n\n     int\n\n     i)\n    {\n      WriteLine($\"\n\n    {i}\n\n     x \n\n    {j}\n\n     = \n\n    {i * j}\n\n    \"\n\n    );\n    }\n    else\n\n    {\n      WriteLine(\"o is not an int so it cannot multiply!\"\n\n    );\n    } \n\n    ```", "```cs\n    o is not an int so it cannot multiply! \n\n    ```", "```cs\n    3 x 4 = 12 \n\n    ```", "```cs\n     int\n\n     number = (new\n\n     Random()).Next(1\n\n    , 7\n\n    ); \n    WriteLine($\"My random number is \n\n    {number}\n\n    \"\n\n    );\n    switch\n\n     (number)\n    {\n      case\n\n     1\n\n    : \n        WriteLine(\"One\"\n\n    );\n        break\n\n    ; // jumps to end of switch statement\n\n      case\n\n     2\n\n    :\n        WriteLine(\"Two\"\n\n    );\n        goto\n\n     case\n\n     1\n\n    ;\n      case\n\n     3\n\n    : // multiple case section\n\n      case\n\n     4\n\n    :\n        WriteLine(\"Three or four\"\n\n    );\n        goto\n\n     case\n\n     1\n\n    ;\n      case\n\n     5\n\n    :\n        goto\n\n     A_label;\n      default\n\n    :\n        WriteLine(\"Default\"\n\n    );\n        break\n\n    ;\n    } // end of switch statement\n\n    WriteLine(\"After end of switch\"\n\n    );\n    A_label:\n    WriteLine($\"After A_label\"\n\n    ); \n\n    ```", "```cs\n    // first random run\n    My random number is 4 \n    Three or four\n    One\n    After end of switch\n    After A_label\n    // second random run\n    My random number is 2 \n    Two\n    One\n    After end of switch\n    After A_label\n    // third random run\n    My random number is 6\n    Default\n    After end of switch\n    After A_label\n    // fourth random run\n    My random number is 1 \n    One\n    After end of switch\n    After A_label\n    // fifth random run\n    My random number is 5\n    After A_label \n\n    ```", "```cs\n     // string path = \"/Users/markjprice/Code/Chapter03\";\n\n    string\n\n     path = @\"C:\\Code\\Chapter03\"\n\n    ;\n    Write(\"Press R for read-only or W for writeable: \"\n\n    ); \n    ConsoleKeyInfo key = ReadKey();\n    WriteLine();\n    Stream? s;\n    if\n\n     (key.Key == ConsoleKey.R)\n    {\n      s =  File.Open(\n        Path.Combine(path, \"file.txt\"\n\n    ), \n        FileMode.OpenOrCreate, \n        FileAccess.Read);\n    }\n    else\n\n    {\n      s =  File.Open( \n        Path.Combine(path, \"file.txt\"\n\n    ), \n        FileMode.OpenOrCreate, \n        FileAccess.Write);\n    }\n    string\n\n     message; \n    switch\n\n     (s)\n    {\n      case\n\n     FileStream writeableFile when\n\n     s.CanWrite:\n        message = \"The stream is a file that I can write to.\"\n\n    ;\n        break\n\n    ;\n      case\n\n     FileStream readOnlyFile:\n        message = \"The stream is a read-only file.\"\n\n    ;\n        break\n\n    ;\n      case\n\n     MemoryStream ms:\n        message = \"The stream is a memory address.\"\n\n    ;\n        break\n\n    ;\n      default\n\n    : // always evaluated last despite its current position\n\n        message = \"The stream is some other type.\"\n\n    ;\n        break\n\n    ;\n      case\n\n     null\n\n    :\n        message = \"The stream is null.\"\n\n    ;\n        break\n\n    ;\n    }\n    WriteLine(message); \n\n    ```", "```cs\n    The stream is a file that I can write to. \n\n    ```", "```cs\n    message = s switch\n\n    {\n      FileStream writeableFile when\n\n     s.CanWrite\n        => \"The stream is a file that I can write to.\"\n\n    , \n      FileStream readOnlyFile\n        => \"The stream is a read-only file.\"\n\n    , \n      MemoryStream ms\n        => \"The stream is a memory address.\"\n\n    , \n      null\n\n        => \"The stream is null.\"\n\n    ,\n      _\n        => \"The stream is some other type.\"\n\n    };\n    WriteLine(message); \n\n    ```", "```cs\n     int\n\n     x = 0\n\n    ;\n    while\n\n     (x < 10\n\n    )\n    {\n      WriteLine(x);\n      x++;\n    } \n\n    ```", "```cs\n    0\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9 \n\n    ```", "```cs\n     string\n\n    ? password;\n    do\n\n    {\n      Write(\"Enter your password: \"\n\n    ); \n      password = ReadLine();\n    }\n    while\n\n     (password != \"Pa$$w0rd\"\n\n    );\n    WriteLine(\"Correct!\"\n\n    ); \n\n    ```", "```cs\n    Enter your password: password \n    Enter your password: 12345678 \n    Enter your password: ninja\n    Enter your password: correct horse battery staple \n    Enter your password: Pa$$w0rd\n    Correct! \n\n    ```", "```cs\n     for\n\n     (int\n\n     y = 1\n\n    ; y <= 10\n\n    ; y++)\n    {\n      WriteLine(y);\n    } \n\n    ```", "```cs\n     string\n\n    [] names = { \"Adam\"\n\n    , \"Barry\"\n\n    , \"Charlie\"\n\n     };\n    foreach\n\n     (string\n\n     name in\n\n     names)\n    {\n      WriteLine($\"\n\n    {name}\n\n     has \n\n    {name.Length}\n\n     characters.\"\n\n    );\n    } \n\n    ```", "```cs\n    Adam has 4 characters. \n    Barry has 5 characters. \n    Charlie has 7 characters. \n\n    ```", "```cs\nIEnumerator e = names.GetEnumerator();\nwhile\n\n (e.MoveNext())\n{\n  string\n\n name = (string\n\n)e.Current; // Current is read-only!\n\n  WriteLine($\"\n\n{name}\n\n has \n\n{name.Length}\n\n characters.\"\n\n);\n} \n\n```", "```cs\n     int\n\n     a = 10\n\n    ;\n    double\n\n     b = a; // an int can be safely cast into a double\n\n    WriteLine(b); \n\n    ```", "```cs\n     double\n\n     c = 9.8\n\n    ;\n    int\n\n     d = c; // compiler gives an error for this line\n\n    WriteLine(d); \n\n    ```", "```cs\n    Error: (6,9): error CS0266: Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?) \n\n    ```", "```cs\n     int\n\n     d = (int\n\n    )c;\n    WriteLine(d); // d is 9 losing the .8 part \n\n    ```", "```cs\n    10\n    9 \n\n    ```", "```cs\n     long\n\n     e = 10\n\n    ; \n    int\n\n     f = (int\n\n    )e;\n    WriteLine($\"e is \n\n    {e:N0}\n\n     and f is \n\n    {f:N0}\n\n    \"\n\n    ); \n    e = long\n\n    .MaxValue;\n    f = (int\n\n    )e;\n    WriteLine($\"e is \n\n    {e:N0}\n\n     and f is \n\n    {f:N0}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    e is 10 and f is 10\n    e is 9,223,372,036,854,775,807 and f is -1 \n\n    ```", "```cs\n    e = 5\n\n    _000_000_000; \n\n    ```", "```cs\n    e is 5,000,000,000 and f is 705,032,704 \n\n    ```", "```cs\n     using\n\n     static\n\n     System.Convert; \n\n    ```", "```cs\n     double\n\n     g = 9.8\n\n    ;\n    int\n\n     h = ToInt32(g); // a method of System.Convert\n\n    WriteLine($\"g is \n\n    {g}\n\n     and h is \n\n    {h}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    g is 9.8 and h is 10 \n\n    ```", "```cs\n     double\n\n    [] doubles = new\n\n    []\n      { 9.49\n\n    , 9.5\n\n    , 9.51\n\n    , 10.49\n\n    , 10.5\n\n    , 10.51\n\n     };\n    foreach\n\n     (double\n\n     n in\n\n     doubles)\n    {\n      WriteLine($\"ToInt32(\n\n    {n}\n\n    ) is \n\n    {ToInt32(n)}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    ToInt32(9.49) is 9\n    ToInt32(9.5) is 10\n    ToInt32(9.51) is 10\n    ToInt32(10.49) is 10\n    ToInt32(10.5) is 10\n    ToInt32(10.51) is 11 \n\n    ```", "```cs\n     foreach\n\n     (double\n\n     n in\n\n     doubles)\n    {\n      WriteLine(format:\n        \"Math.Round({0}, 0, MidpointRounding.AwayFromZero) is {1}\"\n\n    ,\n        arg0: n,\n        arg1: Math.Round(value\n\n    : n, digits: 0\n\n    ,\n                mode: MidpointRounding.AwayFromZero));\n    } \n\n    ```", "```cs\n    Math.Round(9.49, 0, MidpointRounding.AwayFromZero) is 9\n    Math.Round(9.5, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(9.51, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(10.49, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(10.5, 0, MidpointRounding.AwayFromZero) is 11\n    Math.Round(10.51, 0, MidpointRounding.AwayFromZero) is 11 \n\n    ```", "```cs\n     int\n\n     number = 12\n\n    ; \n    WriteLine(number.ToString());\n    bool\n\n     boolean = true\n\n    ; \n    WriteLine(boolean.ToString());\n    DateTime now = DateTime.Now; \n    WriteLine(now.ToString());\n    object\n\n     me = new\n\n    (); \n    WriteLine(me.ToString()); \n\n    ```", "```cs\n    12\n    True\n    02/28/2021 17:33:54\n    System.Object \n\n    ```", "```cs\n     // allocate array of 128 bytes\n\n    byte\n\n    [] binaryObject = new\n\n     byte\n\n    [128\n\n    ];\n    // populate array with random bytes\n\n    (new\n\n     Random()).NextBytes(binaryObject); \n    WriteLine(\"Binary Object as bytes:\"\n\n    );\n    for\n\n    (int\n\n     index = 0\n\n    ; index < binaryObject.Length; index++)\n    {\n      Write($\"\n\n    {binaryObject[index]:X}\n\n     \"\n\n    );\n    }\n    WriteLine();\n    // convert to Base64 string and output as text\n\n    string\n\n     encoded = ToBase64String(binaryObject);\n    WriteLine($\"Binary Object as Base64: \n\n    {encoded}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Binary Object as bytes:\n    B3 4D 55 DE 2D E BB CF BE 4D E6 53 C3 C2 9B 67 3 45 F9 E5 20 61 7E 4F 7A 81 EC 49 F0 49 1D 8E D4 F7 DB 54 AF A0 81 5 B8 BE CE F8 36 90 7A D4 36 42\n    4 75 81 1B AB 51 CE 5 63 AC 22 72 DE 74 2F 57 7F CB E7 47 B7 62 C3 F4 2D\n    61 93 85 18 EA 6 17 12 AE 44 A8 D B8 4C 89 85 A9 3C D5 E2 46 E0 59 C9 DF\n    10 AF ED EF 8AA1 B1 8D EE 4A BE 48 EC 79 A5 A 5F 2F 30 87 4A C7 7F 5D C1 D\n    26 EE\n    Binary Object as Base64: s01V3i0Ou8++TeZTw8KbZwNF +eUgYX5PeoHsSfBJHY7U99tU r6CBBbi+zvg2kHrUNkIEdYEbq1HOBWOsInLedC9Xf8vnR7diw/QtYZOFGOoGFxKuRKgNuEyJha k81eJG4FnJ3xCv7e+KobGN7kq+SO x5pQpfLzCHSsd/XcENJu4= \n\n    ```", "```cs\n     int\n\n     age = int\n\n    .Parse(\"27\"\n\n    );\n    DateTime birthday = DateTime.Parse(\"4 July 1980\"\n\n    );\n    WriteLine($\"I was born \n\n    {age}\n\n     years ago.\"\n\n    ); \n    WriteLine($\"My birthday is \n\n    {birthday}\n\n    .\"\n\n    ); \n    WriteLine($\"My birthday is \n\n    {birthday:D}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    I was born 27 years ago.\n    My birthday is 04/07/1980 00:00:00\\. \n    My birthday is 04 July 1980. \n\n    ```", "```cs\n     int\n\n     count = int\n\n    .Parse(\"abc\"\n\n    ); \n\n    ```", "```cs\n    Unhandled Exception: System.FormatException: Input string was not in a correct format. \n\n    ```", "```cs\n    Write(\"How many eggs are there? \"\n\n    ); \n    string\n\n    ? input = ReadLine(); // or use \"12\" in notebook\n\n    if\n\n     (int\n\n    .TryParse(input, out\n\n     int\n\n     count))\n    {\n      WriteLine($\"There are \n\n    {count}\n\n     eggs.\"\n\n    );\n    }\n    else\n\n    {\n      WriteLine(\"I could not parse the input.\"\n\n    );\n    } \n\n    ```", "```cs\n    How many eggs are there? 12\n    There are 12 eggs. \n\n    ```", "```cs\n    How many eggs are there? twelve\n    I could not parse the input. \n\n    ```", "```cs\n    WriteLine(\"Before parsing\"\n\n    ); \n    Write(\"What is your age? \"\n\n    ); \n    string\n\n    ? input = ReadLine(); // or use \"49\" in a notebook\n\n    try\n\n    {\n      int\n\n     age = int\n\n    .Parse(input); \n      WriteLine($\"You are \n\n    {age}\n\n     years old.\"\n\n    );\n    }\n    catch\n    {\n    }\n    WriteLine(\"After parsing\"\n\n    ); \n\n    ```", "```cs\n    Before parsing\n    What is your age? 49\n    You are 49 years old. \n    After parsing \n\n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    After parsing \n\n    ```", "```cs\n    catch (Exception ex)\n    {\n      WriteLine($\"\n\n    {ex.GetType()}\n\n     says \n\n    {ex.Message}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    System.FormatException says Input string was not in a correct format. \n    After parsing \n\n    ```", "```cs\n     **catch (FormatException)**\n\n    **{**\n\n     **WriteLine(**\n\n    **\"The age you entered is not a valid number format.\"**\n\n    **);**\n\n    **}**\n\n    catch (Exception ex)\n    {\n      WriteLine($\"\n\n    {ex.GetType()}\n\n     says \n\n    {ex.Message}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    The age you entered is not a valid number format. \n    After parsing \n\n    ```", "```cs\n    Before parsing\n    What is your age? 9876543210\n    System.OverflowException says Value was either too large or too small for an Int32.\n    After parsing \n\n    ```", "```cs\n     **catch (OverflowException)**\n\n    **{**\n\n     **WriteLine(**\n\n    **\"Your age is a valid number format but it is either too big or small.\"**\n\n    **);**\n\n    **}**\n\n    catch (FormatException)\n    {\n      WriteLine(\"The age you entered is not a valid number format.\"\n\n    );\n    } \n\n    ```", "```cs\n    Before parsing\n    What is your age? 9876543210\n    Your age is a valid number format but it is either too big or small. \n    After parsing \n\n    ```", "```cs\nWrite(\"Enter an amount: \"\n\n);\nstring\n\n? amount = ReadLine();\ntry\n\n{\n  decimal\n\n amountValue = decimal\n\n.Parse(amount);\n}\ncatch (FormatException) when\n\n (amount.Contains(\"$\"\n\n))\n{\n  WriteLine(\"Amounts cannot use the dollar sign!\"\n\n);\n}\ncatch (FormatException)\n{\n  WriteLine(\"Amounts must only contain digits!\"\n\n);\n} \n\n```", "```cs\n     int\n\n     x = int\n\n    .MaxValue - 1\n\n    ; \n    WriteLine($\"Initial value: \n\n    {x}\n\n    \"\n\n    ); \n    x++;\n    WriteLine($\"After incrementing: \n\n    {x}\n\n    \"\n\n    ); \n    x++;\n    WriteLine($\"After incrementing: \n\n    {x}\n\n    \"\n\n    ); \n    x++;\n    WriteLine($\"After incrementing: \n\n    {x}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    After incrementing: -2147483648\n    After incrementing: -2147483647 \n\n    ```", "```cs\n     **checked**\n\n    **{**\n\n      int\n\n     x = int\n\n    .MaxValue - 1\n\n    ; \n      WriteLine($\"Initial value: \n\n    {x}\n\n    \"\n\n    ); \n      x++;\n      WriteLine($\"After incrementing: \n\n    {x}\n\n    \"\n\n    ); \n      x++;\n      WriteLine($\"After incrementing: \n\n    {x}\n\n    \"\n\n    ); \n      x++;\n      WriteLine($\"After incrementing: \n\n    {x}\n\n    \"\n\n    );\n\n    **}** \n\n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    Unhandled Exception: System.OverflowException: Arithmetic operation resulted in an overflow. \n\n    ```", "```cs\n     try\n\n    {\n      // previous code goes here\n\n    }\n    catch (OverflowException)\n    {\n      WriteLine(\"The code overflowed but I caught the exception.\"\n\n    );\n    } \n\n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    The code overflowed but I caught the exception. \n\n    ```", "```cs\n     int\n\n     y = int\n\n    .MaxValue + 1\n\n    ; \n\n    ```", "```cs\n     unchecked\n\n    {\n      int\n\n     y = int\n\n    .MaxValue + 1\n\n    ; \n      WriteLine($\"Initial value: \n\n    {y}\n\n    \"\n\n    ); \n      y--;\n      WriteLine($\"After decrementing: \n\n    {y}\n\n    \"\n\n    ); \n      y--;\n      WriteLine($\"After decrementing: \n\n    {y}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Initial value: -2147483648\n    After decrementing: 2147483647\n    After decrementing: 2147483646 \n\n    ```", "```cs\n     for\n\n     ( ; true\n\n    ; ) ; \n\n    ```", "```cs\n int\n\n max = 500\n\n;\nfor\n\n (byte\n\n i = 0\n\n; i < max; i++)\n{\n  WriteLine(i);\n} \n\n```", "```cs\nEnter a number between 0 and 255: 100\nEnter another number between 0 and 255: 8\n100 divided by 8 is 12 \n\n```", "```cs\nEnter a number between 0 and 255: apples\nEnter another number between 0 and 255: bananas \nFormatException: Input string was not in a correct format. \n\n```", "```cs\n    x = 3\n\n    ;\n    y = 2\n\n     + ++x; \n\n    ```", "```cs\n    x = 3\n\n     << 2\n\n    ;\n    y = 10\n\n     >> 1\n\n    ; \n\n    ```", "```cs\n    x = 10\n\n     & 8\n\n    ;\n    y = 10\n\n     | 7\n\n    ; \n\n    ```"]