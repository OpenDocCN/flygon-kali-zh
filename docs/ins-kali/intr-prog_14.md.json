["```java\n       List list = new ArrayList();\n       list.add(42);\n\n```", "```java\nList listOfNames = new ArrayList();\n```", "```java\nArrayList listOfNames = new ArrayList();\n```", "```java\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\npublic ArrayList() {\n  this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n```", "```java\npublic boolean add(E e) {\n  modCount++;\n  add(e, elementData, size);\n  return true;\n}\nprivate void add(E e, Object[] elementData, int s) {\n  if (s == elementData.length)\n    elementData = grow();\n  elementData[s] = e;\n  size = s + 1;\n}\n```", "```java\nprivate Object[] grow() {  return grow(size + 1); }\n\nprivate Object[] grow(int minCapacity) {\n  return elementData = Arrays.copyOf(elementData,\n                                    newCapacity(minCapacity));\n}\nprivate static final int DEFAULT_CAPACITY = 10;\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\nprivate int newCapacity(int minCapacity) {\n  // overflow-conscious code\n  int oldCapacity = elementData.length;\n  int newCapacity = oldCapacity + (oldCapacity >> 1);\n  if (newCapacity - minCapacity <= 0) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n      return Math.max(DEFAULT_CAPACITY, minCapacity);\n    if (minCapacity < 0) // overflow\n      throw new OutOfMemoryError();\n    return minCapacity;\n  }\n  return (newCapacity - MAX_ARRAY_SIZE <= 0)\n            ? newCapacity\n            : hugeCapacity(minCapacity);\n}\n```", "```java\nList list = new ArrayList();\nlist.add(null);\nlist.add(1);\nlist.add(\"ss\");\nlist.add(new A());\nlist.add(new B());\nSystem.out.println(list);  //prints: [null, 1, ss, A, B]\nlist.add(2, 42);\nSystem.out.println(list);  //prints: [null, 1, 42, ss, A, B]\n\n```", "```java\nclass A {\n  @Override\n  public String toString() { return \"A\"; }\n}\nclass B extends A {\n  @Override\n  public String toString() { return \"B\"; }\n}\n```", "```java\nList list = new ArrayList();\nlist.add(null);\nlist.add(1);\nlist.add(\"ss\");\nlist.add(new A());\nlist.add(new B());\nfor(Object o: list){\n  //code that does something with each element   \n} \n```", "```java\nlist.forEach(System.out::println);\n\n```", "```java\nList list = new ArrayList();\nlist.add(null);\nlist.add(1);\nlist.add(\"ss\");\nlist.add(new A());\nlist.add(new B());\n\n```", "```java\nfor(Object o: list){\n  System.out.println(o);\n  if(o instanceof String){\n    list.remove(o);\n  }\n}\n```", "```java\nSystem.out.println(list);  //prints: [null, 1, ss, A, B]\nIterator iter = list.iterator();\nwhile(iter.hasNext()){\n  Object o = iter.next();\n  if(o instanceof String){\n    iter.remove();\n  }\n}\nSystem.out.println(list);  //prints: [null, 1, A, B]\n\n```", "```java\nList<Integer> list1 = new ArrayList<>();\nlist1.add(null);\nlist1.add(1);\n//list1.add(\"ss\");          //compilation error\n//list1.add(new A());       //compilation error\n//list1.add(new B());       //compilation error\nSystem.out.println(list1);  //prints: [null, 1]\nlist1.add(2, 42);\nSystem.out.println(list1);  //prints: [null, 1, 42]\n\n```", "```java\nList<Object> list2= new ArrayList<>();\nlist2.add(null);\nlist2.add(1);\nlist2.add(\"ss\");\nlist2.add(new A());\nlist2.add(new B());\nSystem.out.println(list2);    //prints: [null, 1, ss, A, B]\nlist2.add(2, 42);\nSystem.out.println(list2);    //prints: [null, 1, 42, ss, A, B]\n\n```", "```java\nList<A> list3= new ArrayList<>();\nlist3.add(null);\n//list3.add(1);            //compilation error\n//list3.add(\"ss\");         //compilation error\nlist3.add(new A());\nlist3.add(new B());\nSystem.out.println(list3); //prints: [null, A, B]\nlist3.add(2, new A());\nSystem.out.println(list3); //prints: [null, A, A, B]\n\nList<B> list4= new ArrayList<>();\nlist4.add(null);\n//list4.add(1);            //compilation error\n//list4.add(\"ss\");         //compilation error\n//list4.add(new A());      //compilation error\nlist4.add(new B());\nSystem.out.println(list4); //prints: [null, B]\nlist4.add(2, new B());\nSystem.out.println(list4); //prints: [null, B, B]\n\n```", "```java\nList list = new ArrayList();\nList<Integer> list1 = new ArrayList<>();\nList<Object> list2= new ArrayList<>();\nlist = list1;\n//list2 = list1;   //compilation error\n\n```", "```java\nList<?> list5= new ArrayList<>();\nlist5.add(null);\n//list5.add(1);            //compilation error\n//list5.add(\"ss\");         //compilation error\n//list5.add(new A());      //compilation error\n//list5.add(new B());      //compilation error\nSystem.out.println(list5); //prints: [null]\n//list5.add(1, 42);        //compilation error\n\n```", "```java\nvoid doSomething(List<B> list){\n  //some othe code goes here\n  list.add(null);\n  list.add(new B());\n  list.add(0, new B());\n  //some other code goes here\n}\n```", "```java\nList<B> list= new ArrayList<>();\nSystem.out.println(list); //prints: [B]\nlist.add(0, null);\nSystem.out.println(list); //prints: [null, B]\ndoSomething(list);\nSystem.out.println(list); //[B, null, B, null, B]\n\n```", "```java\nvoid doSomething(List<?> list){\n  list.add(null);\n  //list.add(1);            //compilation error\n  //list.add(\"ss\");         //compilation error\n  //list.add(new A());      //compilation error\n  //list.add(new B());      //compilation error\n  //list.add(0, 42);        //compilation error\n}\n```", "```java\nclass A {\n  @Override\n  public String toString() { return \"A\"; }\n}\nclass B extends A {\n  @Override\n  public String toString() { return \"B\"; }\n}\n```", "```java\nList<A> list = new ArrayList<>();\nlist.add(new A());\nList<B> list1 = new ArrayList<>();\nlist1.add(new B());\nlist.addAll(list1);\nSystem.out.println(list);    //prints: [A, B]\n```", "```java\nclass Person{\n  private int age;\n  private String name, currentAddress;\n  public Person(int age, String name, String currAddr) {\n    this.age = age;\n    this.name = name;\n    this.currentAddress = currAddr;\n  }\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null) return false;\n    if(!(o instanceof Person)) return false;\n      Person person = (Person)o;\n      return age == person.getAge() &&\n                Objects.equals(name, person.getName());\n  }\n  @Override\n  public int hashCode(){\n    return Objects.hash(age, name);\n  }\n}\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\nlist.add(\"s1\");\n\nSystem.out.println(list.contains(\"s1\"));    //prints: true\nSystem.out.println(list.indexOf(\"s1\"));     //prints: 0\nSystem.out.println(list.lastIndexOf(\"s1\")); //prints: 2\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\nlist.add(\"s3\");\n\nSystem.out.println(list.get(1));       //prints: s2\nSystem.out.println(list.subList(0,2)); //prints: [s1, s2]\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\nlist.add(\"s3\");\nlist.add(\"s1\");\n\nSystem.out.println(list.remove(1));    //prints: s2\nSystem.out.println(list);              //prints: [s1, s3, s1]\n//System.out.println(list.remove(5));  //throws IndexOutOfBoundsException\nSystem.out.println(list.remove(\"s1\")); //prints: true\nSystem.out.println(list);              //prints: [s3, s1]\nSystem.out.println(list.remove(\"s5\")); //prints: false\nSystem.out.println(list);              //prints: [s3, s1]\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\nlist.add(\"s3\");\nlist.add(\"s1\");\n\nSystem.out.println(list.removeAll(List.of(\"s1\", \"s2\", \"s5\")));   //true\nSystem.out.println(list);                                        //[s3]\nSystem.out.println(list.removeAll(List.of(\"s5\")));               //false\nSystem.out.println(list);                                        //[s3]\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\nlist.add(\"s3\");\nlist.add(\"s1\");\n\nSystem.out.println(list.retainAll(List.of(\"s1\",\"s2\",\"s5\"))); //true\nSystem.out.println(list);                                    //[s1, s2, s1]\nSystem.out.println(list.retainAll(List.of(\"s1\",\"s2\",\"s5\"))); //false\nSystem.out.println(list);                                    //[s1, s2, s1]\nSystem.out.println(list.retainAll(List.of(\"s5\")));           //true\nSystem.out.println(list);                                    //[]\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\n\nlist.set(1, null);\nSystem.out.println(list);    //prints: [s1, null]\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\nlist.add(\"s3\");\nlist.add(\"s1\");\n```", "```java\nlist.replaceAll(s -> s.toUpperCase()); //cannot process null\nSystem.out.println(list);    //prints: [S1, S2, S3, S1]\n\nlist.replaceAll(s -> (\"S1\".equals(s) ? \"S5\" : null));\nSystem.out.println(list);    //prints: [S5, null, null, S5]\n\nlist.replaceAll(s -> \"a\");\nSystem.out.println(list);    //prints: [a, a, a, a]\n\nlist.replaceAll(s -> {\n  String result;\n  //write here any code you need to get the value\n  // for the variable result based in the value of s\n  System.out.println(s);   //prints \"a\" four times\n  result = \"42\";\n  return result;\n});\nSystem.out.println(list);    //prints: [42, 42, 42, 42]\n\n```", "```java\nUnaryOperator<String> function = s -> s.toUpperCase();\nlist.replaceAll(function);\n\nfunction = s -> (\"S1\".equals(s) ? \"S5\" : null);\nlist.replaceAll(function);\n\nfunction = s -> \"a\";\nlist.replaceAll(function);\n\nfunction = s -> {\n  String result;\n  //write here any code you need to get the value\n  // for the variable result based in the value of s\n  System.out.println(s);   //prints \"a\" four times\n  result = \"42\";\n  return result;\n};\nlist.replaceAll(function);\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s3\");\nlist.add(\"s2\");\nlist.add(\"ab\");\n//list.add(null); //throws NullPointerException for sorting\n                  //     String.CASE_INSENSITIVE_ORDER\n                  //     Comparator.naturalOrder()\n                  //     Comparator.reverseOrder()\nlist.add(\"a\");\nlist.add(\"Ab\");\nSystem.out.println(list);                //[s3, s2, ab, a, Ab]\n\n```", "```java\nlist.sort(String.CASE_INSENSITIVE_ORDER);\nSystem.out.println(list);                //[a, ab, Ab, s2, s3]\n\nlist.sort(Comparator.naturalOrder());\nSystem.out.println(list);               //[Ab, a, ab, s2, s3]\n\nlist.sort(Comparator.reverseOrder());\nSystem.out.println(list);               //[Ab, a, ab, s2, s3]\n```", "```java\nlist.add(null);\n\nlist.sort(Comparator.nullsFirst(Comparator.naturalOrder()));\nSystem.out.println(list);              //[null, Ab, a, ab, s2, s3]\n\nlist.sort(Comparator.nullsLast(Comparator.naturalOrder()));\nSystem.out.println(list);              //[Ab, a, ab, s2, s3, null]\n\n```", "```java\nComparator<String> comparator = (s1, s2) ->{\n  String s = (s1 == null ? \"null\" : s1);\n  return s.compareTo(s2);\n};\nlist.sort(comparator);\nSystem.out.println(list);              //[Ab, a, ab, null, s2, s3]\n```", "```java\nclass Person implements Comparable<Person> {\n  private int age;\n  private String name, address;\n  public Person(int age, String name, String address) {\n    this.age = age;\n    this.name = name == null ? \"\" : name;\n    this.address = address;\n  }\n  @Override\n  public int compareTo(Person p){\n    return name.compareTo(p.getName());\n  }\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null) return false;\n    if(!(o instanceof Person)) return false;\n      Person person = (Person)o;\n      return age == person.getAge() &&\n                Objects.equals(name, person.getName());\n  }\n  @Override\n  public int hashCode(){ return Objects.hash(age, name); }\n  @Override\n  public String toString() { return \"Person{age=\" + age +\n                                   \", name=\" + name + \"}\";\n  }\n}\n```", "```java\nclass PersonWithHair extends Person {\n  private String hairstyle;\n  public PersonWithHair(int age, String name, \n                        String address, String hairstyle) {\n    super(age, name, address);\n    this.hairstyle = hairstyle;\n  }\n}\n\nclass PersonWithHairDressed extends PersonWithHair{\n  private String dress;\n  public PersonWithHairDressed(int age, String name, \n           String address, String hairstyle, String dress) {\n    super(age, name, address, hairstyle);\n    this.dress = dress;\n  }\n}\n```", "```java\nList<Person> list = new ArrayList<>();\nlist.add(new PersonWithHair(45, \"Bill\", \"27 Main Street\", \n                                                       \"Pompadour\"));\nlist.add(new PersonWithHair(42, \"Kelly\",\"15 Middle Street\",  \n                                                        \"Ponytail\"));\nlist.add(new PersonWithHairDressed(34, \"Kelly\", \"10 Central Square\",  \n                                               \"Pompadour\", \"Suit\"));\nlist.add(new PersonWithHairDressed(25, \"Courtney\", \"27 Main Street\",  \n                                              \"Ponytail\", \"Tuxedo\"));\n\nlist.forEach(System.out::println);\n\n```", "```java\nPerson{age=45, name=Bill}\nPerson{age=42, name=Kelly}\nPerson{age=34, name=Kelly}\nPerson{age=25, name=Courtney}\n```", "```java\nlist.sort(Comparator.naturalOrder());\nlist.forEach(System.out::println);\n\n```", "```java\nPerson{age=45, name=Bill}\nPerson{age=25, name=Courtney}\nPerson{age=42, name=Kelly}\nPerson{age=34, name=Kelly}\n```", "```java\nlist.sort(Comparator.reverseOrder());\nlist.forEach(System.out::println);\n\n```", "```java\nPerson{age=42, name=Kelly}\nPerson{age=34, name=Kelly}\nPerson{age=25, name=Courtney}\nPerson{age=45, name=Bill}\n```", "```java\n@Override\npublic int compareTo(Person p){\n  return age - p.getAge();\n}\n```", "```java\n@Override\npublic int compareTo(Person p){\n  int result = this.name.compareTo(p.getName());\n  if (result != 0) {\n    return result;\n  }\n  return this.age - p.getAge();\n}\n```", "```java\nPerson{age=45, name=Bill}\nPerson{age=25, name=Courtney}\nPerson{age=34, name=Kelly}\nPerson{age=42, name=Kelly}\n```", "```java\nlist.sort(Comparator.comparing(Person::getName));\nlist.forEach(System.out::println);\n\n```", "```java\nlist.sort(Comparator.comparing(Person::getAge));\nlist.forEach(System.out::println);\n\n```", "```java\nlist.sort(Comparator.comparing(Person::getName).thenComparing(Person::getAge));\nlist.forEach(System.out::println);\n\n```", "```java\nList<String> list1 = new ArrayList<>();\nlist1.add(\"s1\");\nlist1.add(\"s2\");\n\nList<String> list2 = new ArrayList<>();\nlist2.add(\"s1\");\nlist2.add(\"s2\");\n\nSystem.out.println(list1.equals(list2)); //prints: true\nlist2.sort(Comparator.reverseOrder());\nSystem.out.println(list2);               //prints: [s2, s1]\nSystem.out.println(list1.equals(list2)); //prints: false\n\n```", "```java\nList<String> list1 = new ArrayList<>();\nlist1.add(\"s1\");\nlist1.add(\"s1\");\nlist1.add(\"s2\");\nlist1.add(\"s3\");\nlist1.add(\"s4\");\n\nList<String> list2 = new ArrayList<>();\nlist2.add(\"s1\");\nlist2.add(\"s2\");\nlist2.add(\"s2\");\nlist2.add(\"s5\");\n\n```", "```java\nList<String> list = new ArrayList<>(list1);\nlist.removeAll(list2);\nSystem.out.println(list);    //prints: [s3, s4]\n\nlist = new ArrayList<>(list2);\nlist.removeAll(list1);\nSystem.out.println(list);    //prints: [s5]\n\n```", "```java\nList<String> list = new ArrayList<>(list1);\nlist.retainAll(list2);\nSystem.out.println(list);    //prints: [s1, s1, s2]\n\nlist = new ArrayList<>(list2);\nlist.retainAll(list1);\nSystem.out.println(list);    //prints: [s1, s2, s2]\n\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\nlist.add(\"s2\");\n\nObject[] arr1 = list.toArray();\nfor(Object o: arr1){\n  System.out.print(o);       //prints: s1s2\n}\n\nString[] arr2 = list.toArray(new String[list.size()]);\nfor(String s: arr2){\n  System.out.print(s);      //prints: s1s2\n}\n```", "```java\nObject[] arr3 = list.stream().toArray();\nfor (Object o : arr3) {\n  System.out.print(o);       //prints: s1s2\n}\n\nString[] arr4 = list.stream().toArray(String[]::new);\nfor (String s : arr4) {\n  System.out.print(s);       //prints: s1s2\n}\n```", "```java\nSet<String> set = new HashSet<>();\nSystem.out.println(set.add(\"s1\"));  //prints: true\nSystem.out.println(set.add(\"s1\"));  //prints: false\nSystem.out.println(set.add(\"s2\"));  //prints: true\nSystem.out.println(set.add(\"s3\"));  //prints: true\nSystem.out.println(set);            //prints: [s3, s1, s2]  \n\n```", "```java\nSet set = new HashSet();\nset.add(null);\nset.add(1);\nset.add(\"ss\");\nset.add(new A());\nset.add(new B());\nfor(Object o: set){\n  System.out.println(o);\n}\nset.forEach(System.out::println);\n```", "```java\nSet<String> set1 = new HashSet<>();\nset1.add(\"s1\");\nset1.add(\"s2\");\nset1.add(\"s3\");\n\nList<String> list = new ArrayList<>();\nlist.add(\"s1\");\n\nSystem.out.println(set1.addAll(list)); //prints: false\nSystem.out.println(set1);              //prints: [s3, s1, s2]\n\nlist.add(\"s4\");\nSystem.out.println(set1.addAll(list)); //prints: true\nSystem.out.println(set1);              //prints: [s3, s4, s1, s2] \n```", "```java\nSet<String> set = new HashSet();\nset.add(null);\nset.add(\"s1\");\nset.add(\"s1\");\nset.add(\"s2\");\nset.add(\"s3\");\nset.add(\"s4\");\nSystem.out.println(set);    //[null, s3, s4, s1, s2]\n\nset.removeIf(e -> \"s1\".equals(e));\nSystem.out.println(set);   //[null, s3, s4, s2]\n\nset.removeIf(e -> e == null);\nSystem.out.println(set);    //[s3, s4, s2] \n```", "```java\nSet<String> set = new HashSet();\nset.add(null);\nset.add(\"s2\");\nset.add(\"s3\");\nSystem.out.println(set);    //[null, s3, s2]\n\n//We want to replace s2 with s5\nSet<String> newSet = new HashSet<>();\nset.forEach(s -> {\n  if(\"s2\".equals(s)){\n    newSet.add(\"s5\");\n  } else {\n     newSet.add(s);\n  }\n});\nset = newSet;\nSystem.out.println(set);    //[null, s3, s5]\n\n```", "```java\nSet<String> set1 = new HashSet<>();\nset1.add(\"s1\");\nset1.add(\"s2\");\n\nList<String> list = new ArrayList<>();\nlist.add(\"s2\");\nlist.add(\"s1\");\n\nSystem.out.println(set1.equals(list)); //prints: false \n```", "```java\nSet<String> set2 = new HashSet<>();\nset2.add(\"s3\");\nset2.add(\"s1\");\n\nSystem.out.println(set1.equals(set2)); //prints: false\n\nset2.remove(\"s3\");\nset2.add(\"s2\");\nSystem.out.println(set1.equals(set2)); //prints: true\n```", "```java\nSet<String> set1 = new HashSet<>();\nset1.add(\"s1\");\nset1.add(\"s1\");\nset1.add(\"s2\");\nset1.add(\"s3\");\nset1.add(\"s4\");\n\nSet<String> set2 = new HashSet<>();\nset2.add(\"s1\");\nset2.add(\"s2\");\nset2.add(\"s2\");\nset2.add(\"s5\"); \n\n```", "```java\nSet<String> set = new HashSet<>(set1);\nset.removeAll(set2);\nSystem.out.println(set);    //prints: [s3, s4]\n\nset = new HashSet<>(set2);\nset.removeAll(set1);\nSystem.out.println(set);    //prints: [s5] \n```", "```java\nSet<String> set = new HashSet<>(set1);\nset.retainAll(set2);\nSystem.out.println(set);    //prints: [s1, s2]\n\nset = new HashSet<>(set2);\nset.retainAll(set1);\nSystem.out.println(set);    //prints: [s1, s2]\n```", "```java\nSet<String> set = new HashSet<>();\nset.add(\"s1\");\nset.add(\"s2\");\n\nObject[] arr1 = set.toArray();\nfor(Object o: arr1){\n  System.out.print(o);       //prints: s1s2\n}\n\nString[] arr2 = set.toArray(new String[set.size()]);\n\nfor(String s: arr2){\n  System.out.print(s);     //prints: s1s2\n}\n```", "```java\nObject[] arr3 = set.stream().toArray();\nfor (Object o : arr3) {\n  System.out.print(o);       //prints: s1s2\n}\n\nString[] arr4 = set.stream().toArray(String[]::new);\nfor (String s : arr4) {\n  System.out.print(s);       //prints: s1s2\n}\n```", "```java\nmap.put(42, \"whatever\");        //42 is the key for the value \"whatever\"\n```", "```java\nString v = map.get(42);\nSystem.out.println(v);     //prints: whatever\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nSystem.out.println(map.put(1, null));  //prints: null\nSystem.out.println(map.put(1, \"s1\"));  //prints: null\nSystem.out.println(map.put(2, \"s1\"));  //prints: null\nSystem.out.println(map.put(2, \"s2\"));  //prints: s1\nSystem.out.println(map.put(3, \"s3\"));  //prints: null\nSystem.out.println(map);               //prints: {1=s1, 2=s2, 3=s3}\n\nSystem.out.println(map.putIfAbsent(1, \"s4\"));  //prints: s1\nSystem.out.println(map);               //prints: {1=s1, 2=s2, 3=s3}\n\nSystem.out.println(map.put(1, null));  //prints: s1\nSystem.out.println(map);               //prints: {1=null, 2=s2, 3=s3}\n\nSystem.out.println(map.putIfAbsent(1, \"s4\"));  //prints: null\nSystem.out.println(map);               //prints: {1=s4, 2=s2, 3=s3}\n\nSystem.out.println(map.putIfAbsent(4, \"s4\"));  //prints: null\nSystem.out.println(map);               //prints: {1=s4, 2=s2, 3=s3, 4=s4}\n\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, null);\nmap.put(2, \"s2\");\nmap.put(3, \"s3\");\n```", "```java\nfor(Integer key: map.keySet()){\n  System.out.println(\"key=\" + key + \", value=\" + map.get(key));\n}\nmap.keySet().stream()\n   .forEach(k->System.out.println(\"key=\" + k + \", value=\" + map.get(k)));\nfor(String value: map.values()){\n  System.out.println(\"value=\" + value);\n}\nmap.values().stream().forEach(System.out::println);\nmap.forEach((k,v) -> System.out.println(\"key=\" + k + \", value=\" + v));\nmap.entrySet().forEach(e -> System.out.println(\"key=\" + e.getKey() + \n                                          \", value=\" + e.getValue()));\n\n```", "```java\nMap<Integer, String> map1 = new HashMap<>();\nmap1.put(1, null);\nmap1.put(2, \"s2\");\nmap1.put(3, \"s3\");\n\nMap<Integer, String> map2 = new HashMap<>();\nmap2.put(1, \"s1\");\nmap2.put(2, null);\nmap2.put(4, \"s4\");\n\nmap1.putAll(map2);\nSystem.out.println(map1); //prints: {1=s1, 2=null, 3=s3, 4=s4}\n\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, null);\nmap.put(2, \"s2\");\nmap.put(3, \"s3\");\n\nSystem.out.println(map.get(2));                 //prints: s2\nSystem.out.println(map.getOrDefault(2, \"s4\"));  //prints: s2\nSystem.out.println(map.getOrDefault(4, \"s4\"));  //prints: s4\n\nMap.Entry<Integer, String> entry = Map.entry(42, \"s42\");\nSystem.out.println(entry);      //prints: 42=s42\n\nMap<Integer, String> entries = \n                Map.ofEntries(entry, Map.entry(43, \"s43\"));   \nSystem.out.println(entries);   //prints: {42=s42, 43=s43}\n\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, null);\nmap.put(2, \"s2\");\nmap.put(3, \"s3\");\nSystem.out.println(map.remove(2));        //prints: s2\nSystem.out.println(map);                  //prints: {1=null, 3=s3}\nSystem.out.println(map.remove(4));        //prints: null\nSystem.out.println(map);                  //prints: {1=null, 3=s3}\nSystem.out.println(map.remove(3, \"s4\"));  //prints: false\nSystem.out.println(map);                  //prints: {1=null, 3=s3}\nSystem.out.println(map.remove(3, \"s3\"));  //prints: true\nSystem.out.println(map);                  //prints: {1=null}\n\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, null);\nmap.put(2, \"s2\");\nmap.put(3, \"s3\");\n\nSet<Integer> keys = map.keySet();\n\nSystem.out.println(keys.remove(2));      //prints: true\nSystem.out.println(map);                 //prints: {1=null, 3=s3}\n\nSystem.out.println(keys.remove(4));      //prints: false\nSystem.out.println(map);                 //prints: {1=null, 3=s3}\n\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, null);\nmap.put(2, \"s2\");\nmap.put(3, \"s3\");\n\n```", "```java\nSystem.out.println(map.replace(1, \"s1\"));   //prints: null\nSystem.out.println(map);                    //prints: {1=s1, 2=s2, 3=s3}\n\nSystem.out.println(map.replace(4, \"s1\"));   //prints: null\nSystem.out.println(map);                    //prints: {1=s1, 2=s2, 3=s3}\n\nSystem.out.println(map.replace(1, \"s2\", \"s1\"));   //prints: false\nSystem.out.println(map);                    //prints: {1=s1, 2=s2, 3=s3}\n\nSystem.out.println(map.replace(1, \"s1\", \"s2\"));   //prints: true\nSystem.out.println(map);                    //prints: {1=s2, 2=s2, 3=s3}\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, null);\nmap.put(2, null);\nmap.put(3, \"s3\");\n\nmap.replaceAll((k,v) -> v == null? \"s\" + k : v);\nSystem.out.println(map);                 //prints: {1=s1, 2=s2, 3=s3}\n\nmap.replaceAll((k,v) -> k == 2? \"n2\" : v);\nSystem.out.println(map);                 //prints: {1=s1, 2=n2, 3=s3}\n\nmap.replaceAll((k,v) -> v.startsWith(\"s\") ? \"s\" + (k + 10) : v);\nSystem.out.println(map);                 //prints: {1=s11, 2=n2, 3=s13}\n\n```", "```java\nmap.replaceAll((k,v) -> (v != null && v.startsWith(\"s\")) ? \n                                          \"s\" + (k + 10) : v);\n\n```", "```java\nMap<Integer, String> map1 = new HashMap<>();\nmap1.put(1, null);\nmap1.put(2, \"s2\");\nmap1.put(3, \"s3\");\n\nMap<Integer, String> map2 = new HashMap<>();\nmap2.put(1, null);\nmap2.put(2, \"s2\");\nmap2.put(3, \"s3\");\n\nSystem.out.println(map2.equals(map1)); //prints: true\n\nmap2.put(1, \"s1\");\nSystem.out.println(map2.equals(map1)); //prints: false\n\n```", "```java\nmap1.entrySet().containsAll(map2.entrySet());\nmap1.entrySet().retainAll(map2.entrySet());\nmap1.entrySet().removeAll(map2.entrySet());\n\nmap1.keySet().containsAll(map2.keySet());\nmap1.keySet().retainAll(map2.keySet());\nmap1.keySet().removeAll(map2.keySet());\n\nmap1.values().containsAll(map2.values());\nmap1.values().retainAll(map2.values());\nmap1.values().removeAll(map2.values());\n```", "```java\nenum Transport { AIRPLANE, BUS, CAR, TRAIN, TRUCK }\n```", "```java\nEnumSet<Transport> set1 = EnumSet.allOf(Transport.class);\nSystem.out.println(set1);   //prints: [AIRPLANE, BUS, CAR, TRAIN, TRUCK]\n\nEnumSet<Transport> set2 = EnumSet.range(Transport.BUS, Transport.TRAIN);\nSystem.out.println(set2);   //prints: [BUS, CAR, TRAIN]\n\nEnumSet<Transport> set3 = EnumSet.of(Transport.BUS, Transport.TRUCK);\nSystem.out.println(set3);   //prints: [BUS, TRUCK]\n\nEnumSet<Transport> set4 = EnumSet.complementOf(set3);\nSystem.out.println(set4);   //prints: [AIRPLANE, CAR, TRAIN]\n\n```"]