["```cs\n    dotnet --version \n\n    ```", "```cs\n    6.0.100 \n\n    ```", "```cs\n<LangVersion>7.3\n\n</LangVersion> \n\n```", "```cs\n<LangVersion>10.1\n\n</LangVersion> \n\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\"\n\n>\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net6.0\n\n</TargetFramework>\n\n **<LangVersion>preview</LangVersion>**\n\n  </PropertyGroup>\n</Project> \n\n```", "```cs\n     #\n\n    error\n\n     version \n\n    ```", "```cs\n     // #error version \n\n    ```", "```cs\n var\n\n totalPrice = subtotal + salesTax; \n\n```", "```cs\n // sales tax must be added to the subtotal\n\nvar\n\n totalPrice = subtotal + salesTax; \n\n```", "```cs\n /*\n\nThis is a multi-line comment.\n\n*/ \n\n```", "```cs\n using\n\n System; // a semicolon indicates the end of a statement\n\nnamespace\n\n Basics\n\n{ // an open brace indicates the start of a block\n\n  class\n\n Program\n\n  {\n    static\n\nvoid\n\nMain\n\n(\n\nstring\n\n[] args\n\n)\n\n    {\n      Console.WriteLine(\"Hello World!\"\n\n); // a statement\n\n    }\n  }\n} // a close brace indicates the end of a block \n\n```", "```cs\n using\n\n System; // import the System namespace \n\n```", "```cs\n using\n\n System;\nusing\n\n System.Linq;\nusing\n\n System.Collections.Generic; \n\n```", "```cs\n global\n\n using\n\n System;\nglobal\n\n using\n\n System.Linq;\nglobal\n\n using\n\n System.Collections.Generic; \n\n```", "```cs\n     // <autogenerated />\n\n    global\n\n     using\n\n     global\n\n    ::System;\n    global\n\n     using\n\n     global\n\n    ::System.Collections.Generic;\n    global\n\n     using\n\n     global\n\n    ::System.IO;\n    global\n\n     using\n\n     global\n\n    ::System.Linq;\n    global\n\n     using\n\n     global\n\n    ::System.Net.Http;\n    global\n\n     using\n\n     global\n\n    ::System.Threading;\n    global\n\n     using\n\n     global\n\n    ::System.Threading.Tasks; \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n\n     **<ItemGroup>**\n\n     **<Using Remove=**\n\n    **\"System.Threading\"**\n\n     **/>**\n\n     **<Using Include=**\n\n    **\"System.Numerics\"**\n\n     **/>**\n\n     **</ItemGroup>**\n\n    </Project> \n\n    ```", "```cs\n     // <autogenerated />\n\n    global\n\n     using\n\n     global\n\n    ::System;\n    global\n\n     using\n\n     global\n\n    ::System.Collections.Generic;\n    global\n\n     using\n\n     global\n\n    ::System.IO;\n    global\n\n     using\n\n     global\n\n    ::System.Linq;\n    global\n\n     using\n\n     global\n\n    ::System.Net.Http;\n    global\n\n     using\n\n     global\n\n    ::System.Threading.Tasks;\n\n    **global**\n\n    **using**\n\n    **global**\n\n    **::System.Numerics;** \n\n    ```", "```cs\n<ImplicitUsings>enable</ImplicitUsings> \n\n```", "```cs\n // outputs the current line terminator string\n\n// by default, this is a carriage-return and line feed\n\nConsole.WriteLine();\n// outputs the greeting and the current line terminator string\n\nConsole.WriteLine(\"Hello Ahmed\"\n\n);\n// outputs a formatted number and date and the current line terminator string\n\nConsole.WriteLine(\"Temperature on {0:D} is {1}\u00b0C.\"\n\n, \n  DateTime.Today, 23.4\n\n); \n\n```", "```cs\n     using\n\n     System.Reflection; \n\n    ```", "```cs\n    Assembly? assembly = Assembly.GetEntryAssembly();\n    if\n\n     (assembly == null\n\n    ) return\n\n    ;\n    // loop through the assemblies that this app references\n\n    foreach\n\n     (AssemblyName name in\n\n     assembly.GetReferencedAssemblies())\n    {\n      // load the assembly so we can read its details\n\n      Assembly a = Assembly.Load(name);\n      // declare a variable to count the number of methods\n\n      int\n\n     methodCount = 0\n\n    ;\n      // loop through all the types in the assembly\n\n      foreach\n\n     (TypeInfo t in\n\n     a.DefinedTypes)\n      {\n        // add up the counts of methods\n\n        methodCount += t.GetMethods().Count();\n      }\n      // output the count of types and their methods\n\n      Console.WriteLine(\n        \"{0:N0} types with {1:N0} methods in {2} assembly.\"\n\n    ,\n        arg0: a.DefinedTypes.Count(),\n        arg1: methodCount, arg2: name.Name);\n    } \n\n    ```", "```cs\n    // Output on Windows\n    0 types with 0 methods in System.Runtime assembly.\n    106 types with 1,126 methods in System.Linq assembly.\n    44 types with 645 methods in System.Console assembly.\n    // Output on macOS\n    0 types with 0 methods in System.Runtime assembly.\n    103 types with 1,094 methods in System.Linq assembly.\n    57 types with 701 methods in System.Console assembly. \n\n    ```", "```cs\n     using\n\n     System.Reflection;\n\n    **// declare some unused variables using types**\n\n    **// in additional assemblies**\n\n    **System.Data.DataSet ds;**\n\n    **HttpClient client;** \n\n    ```", "```cs\n    // Output on Windows\n    0 types with 0 methods in System.Runtime assembly.\n    383 types with 6,854 methods in System.Data.Common assembly.\n    456 types with 4,590 methods in System.Net.Http assembly.\n    106 types with 1,126 methods in System.Linq assembly.\n    44 types with 645 methods in System.Console assembly.\n    // Output on macOS\n    0 types with 0 methods in System.Runtime assembly.\n    376 types with 6,763 methods in System.Data.Common assembly.\n    522 types with 5,141 methods in System.Net.Http assembly.\n    103 types with 1,094 methods in System.Linq assembly.\n    57 types with 701 methods in System.Console assembly. \n\n    ```", "```cs\n // let the heightInMetres variable become equal to the value 1.88\n\ndouble\n\n heightInMetres = 1.88\n\n;\nConsole.WriteLine($\"The variable \n\n{\n\nnameof\n\n(heightInMetres)}\n\n has the value\n\n{heightInMetres}\n\n.\"\n\n); \n\n```", "```cs\n char\n\n letter = 'A'\n\n; // assigning literal characters\n\nchar\n\n digit = '1'\n\n; \nchar\n\n symbol = '$'\n\n;\nchar\n\n userChoice = GetSomeKeystroke(); // assigning from a fictitious function \n\n```", "```cs\n string\n\n firstName = \"Bob\"\n\n; // assigning literal strings\n\nstring\n\n lastName = \"Smith\"\n\n;\nstring\n\n phoneNumber = \"(215) 555-4256\"\n\n;\n// assigning a string returned from a fictitious function\n\nstring\n\n address = GetAddressFromDatabase(id: 563\n\n); \n\n```", "```cs\n string\n\n fullNameWithTabSeparator = \"Bob\\tSmith\"\n\n; \n\n```", "```cs\n string\n\n filePath = \"C:\\televisions\\sony\\bravia.txt\"\n\n; \n\n```", "```cs\n string\n\n filePath = @\"C:\\televisions\\sony\\bravia.txt\"\n\n; \n\n```", "```cs\n     // unsigned integer means positive whole number or 0\n\n    uint naturalNumber = 23\n\n    ;\n    // integer means negative or positive whole number or 0\n\n    int\n\n     integerNumber = -23\n\n    ;\n    // float means single-precision floating point\n\n    // F suffix makes it a float literal\n\n    float\n\n     realNumber = 2.3F\n\n    ;\n    // double means double-precision floating point\n\n    double\n\n     anotherRealNumber = 2.3\n\n    ; // double literal \n\n    ```", "```cs\n     // three variables that store the number 2 million\n\n    int\n\n     decimalNotation = 2\n\n    _000_000;\n    int\n\n     binaryNotation = 0b\n\n    _0001_1110_1000_0100_1000_0000; \n    int\n\n     hexadecimalNotation = 0\n\n    x_001E_8480;\n    // check the three variables have the same value\n\n    // both statements output true \n\n    Console.WriteLine($\"\n\n    {decimalNotation == binaryNotation}\n\n    \"\n\n    ); \n    Console.WriteLine(\n      $\"\n\n    {decimalNotation == hexadecimalNotation}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    True\n    True \n\n    ```", "```cs\n    Console.WriteLine($\"int uses \n\n    {\n\n    sizeof\n\n    (\n\n    int\n\n    )}\n\n     bytes and can store numbers in the range \n\n    {\n\n    int\n\n    .MinValue:N0}\n\n     to \n\n    {\n\n    int\n\n    .MaxValue:N0}\n\n    .\"\n\n    ); \n    Console.WriteLine($\"double uses \n\n    {\n\n    sizeof\n\n    (\n\n    double\n\n    )}\n\n     bytes and can store numbers in the range \n\n    {\n\n    double\n\n    .MinValue:N0}\n\n     to \n\n    {\n\n    double\n\n    .MaxValue:N0}\n\n    .\"\n\n    ); \n    Console.WriteLine($\"decimal uses \n\n    {\n\n    sizeof\n\n    (\n\n    decimal\n\n    )}\n\n     bytes and can store numbers in the range \n\n    {\n\n    decimal\n\n    .MinValue:N0}\n\n     to \n\n    {\n\n    decimal\n\n    .MaxValue:N0}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    Console.WriteLine(\"Using doubles:\"\n\n    ); \n    double\n\n     a = 0.1\n\n    ;\n    double\n\n     b = 0.2\n\n    ;\n    if\n\n     (a + b == 0.3\n\n    )\n    {\n      Console.WriteLine($\"\n\n    {a}\n\n     + \n\n    {b}\n\n     equals \n\n    {\n\n    0.3\n\n    }\n\n    \"\n\n    );\n    }\n    else\n\n    {\n      Console.WriteLine($\"\n\n    {a}\n\n     + \n\n    {b}\n\n     does NOT equal \n\n    {\n\n    0.3\n\n    }\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Using doubles:\n    0.1 + 0.2 does NOT equal 0.3 \n\n    ```", "```cs\n0,1 + 0,2 does NOT equal 0,3 \n\n```", "```cs\n    Console.WriteLine(\"Using decimals:\"\n\n    );\n    decimal\n\n     c = 0.1\n\n    M; // M suffix means a decimal literal value\n\n    decimal\n\n     d = 0.2\n\n    M;\n    if\n\n     (c + d == 0.3\n\n    M)\n    {\n      Console.WriteLine($\"\n\n    {c}\n\n     + \n\n    {d}\n\n     equals \n\n    {\n\n    0.3\n\n    M}\n\n    \"\n\n    );\n    }\n    else\n\n    {\n      Console.WriteLine($\"\n\n    {c}\n\n     + \n\n    {d}\n\n     does NOT equal \n\n    {\n\n    0.3\n\n    M}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Using decimals:\n    0.1 + 0.2 equals 0.3 \n\n    ```", "```cs\n bool\n\n happy = true\n\n; \nbool\n\n sad = false\n\n; \n\n```", "```cs\n     object\n\n     height = 1.88\n\n    ; // storing a double in an object \n\n    object\n\n     name = \"Amir\"\n\n    ; // storing a string in an object\n\n    Console.WriteLine($\"\n\n    {name}\n\n     is \n\n    {height}\n\n     metres tall.\"\n\n    );\n    int\n\n     length1 = name.Length; // gives compile error!\n\n    int\n\n     length2 = ((string\n\n    )name).Length; // tell compiler it is a string\n\n    Console.WriteLine($\"\n\n    {name}\n\n     has \n\n    {length2}\n\n     characters.\"\n\n    ); \n\n    ```", "```cs\n    Amir is 1.88 metres tall. \n    Amir has 4 characters. \n\n    ```", "```cs\n     // storing a string in a dynamic object\n\n    // string has a Length property\n\n    dynamic\n\n     something = \"Ahmed\"\n\n    ;\n    // int does not have a Length property\n\n    // something = 12;\n\n    // an array of any type has a Length property\n\n    // something = new[] { 3, 5, 7 }; \n\n    ```", "```cs\n     // this compiles but would throw an exception at run-time\n\n    // if you later store a data type that does not have a\n\n    // property named Length\n\n    Console.WriteLine($\"Length is \n\n    {something.Length}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Length is 5 \n\n    ```", "```cs\n    Unhandled exception. Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: 'int' does not contain a definition for 'Length' \n\n    ```", "```cs\n    Length is 3 \n\n    ```", "```cs\n     int\n\n     population = 66\n\n    _000_000; // 66 million in UK\n\n    double\n\n     weight = 1.88\n\n    ; // in kilograms\n\n    decimal\n\n     price = 4.99\n\n    M; // in pounds sterling\n\n    string\n\n     fruit = \"Apples\"\n\n    ; // strings use double-quotes\n\n    char\n\n     letter = 'Z'\n\n    ; // chars use single-quotes\n\n    bool\n\n     happy = true\n\n    ; // Booleans have value of true or false \n\n    ```", "```cs\n     var\n\n     population = 66\n\n    _000_000; // 66 million in UK\n\n    var\n\n     weight = 1.88\n\n    ; // in kilograms\n\n    var\n\n     price = 4.99\n\n    M; // in pounds sterling\n\n    var\n\n     fruit = \"Apples\"\n\n    ; // strings use double-quotes\n\n    var\n\n     letter = 'Z'\n\n    ; // chars use single-quotes\n\n    var\n\n     happy = true\n\n    ; // Booleans have value of true or false \n\n    ```", "```cs\n     using\n\n     System.Xml; \n\n    ```", "```cs\n     // good use of var because it avoids the repeated type\n\n    // as shown in the more verbose second statement\n\n    var\n\n     xml1 = new\n\n     XmlDocument(); \n    XmlDocument xml2 = new\n\n     XmlDocument();\n    // bad use of var because we cannot tell the type, so we\n\n    // should use a specific type declaration as shown in\n\n    // the second statement\n\n    var\n\n     file1 = File.CreateText(\"something1.txt\"\n\n    ); \n    StreamWriter file2 = File.CreateText(\"something2.txt\"\n\n    ); \n\n    ```", "```cs\nXmlDocument xml3 = new\n\n(); // target-typed new in C# 9 or later \n\n```", "```cs\n class\n\n Person\n\n{\n  public\n\n DateTime BirthDate;\n}\nPerson kim = new\n\n();\nkim.BirthDate = new\n\n(1967\n\n, 12\n\n, 26\n\n); // instead of: new DateTime(1967, 12, 26) \n\n```", "```cs\n    Console.WriteLine($\"default(int) = \n\n    {\n\n    default\n\n    (\n\n    int\n\n    )}\n\n    \"\n\n    ); \n    Console.WriteLine($\"default(bool) = \n\n    {\n\n    default\n\n    (\n\n    bool\n\n    )}\n\n    \"\n\n    ); \n    Console.WriteLine($\"default(DateTime) = \n\n    {\n\n    default\n\n    (DateTime)}\n\n    \"\n\n    ); \n    Console.WriteLine($\"default(string) = \n\n    {\n\n    default\n\n    (\n\n    string\n\n    )}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    default(int) = 0 \n    default(bool) = False\n    default(DateTime) = 01/01/0001 00:00:00 \n    default(string) = \n\n    ```", "```cs\n     int\n\n     number = 13\n\n    ;\n    Console.WriteLine($\"number has been set to: \n\n    {number}\n\n    \"\n\n    );\n    number = default\n\n    ;\n    Console.WriteLine($\"number has been reset to its default: \n\n    {number}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    number has been set to: 13\n    number has been reset to its default: 0 \n\n    ```", "```cs\n     string\n\n    [] names; // can reference any size array of strings\n\n    // allocating memory for four strings in an array\n\n    names = new\n\n     string\n\n    [4\n\n    ];\n    // storing items at index positions\n\n    names[0\n\n    ] = \"Kate\"\n\n    ;\n    names[1\n\n    ] = \"Jack\"\n\n    ; \n    names[2\n\n    ] = \"Rebecca\"\n\n    ; \n    names[3\n\n    ] = \"Tom\"\n\n    ;\n    // looping through the names\n\n    for\n\n     (int\n\n     i = 0\n\n    ; i < names.Length; i++)\n    {\n      // output the item at index position i\n\n      Console.WriteLine(names[i]);\n    } \n\n    ```", "```cs\n    Kate \n    Jack \n    Rebecca \n    Tom \n\n    ```", "```cs\n string\n\n[] names2 = new\n\n[] { \"Kate\"\n\n, \"Jack\"\n\n, \"Rebecca\"\n\n, \"Tom\"\n\n }; \n\n```", "```cs\ndotnet new console -lang \"F#\" --name \"ExploringConsole\" \n\n```", "```cs\n     int\n\n     numberOfApples = 12\n\n    ; \n    decimal\n\n     pricePerApple = 0.35\n\n    M;\n    Console.WriteLine(\n      format: \"{0} apples costs {1:C}\"\n\n    , \n      arg0: numberOfApples,\n      arg1: pricePerApple * numberOfApples);\n    string\n\n     formatted = string\n\n    .Format(\n      format: \"{0} apples costs {1:C}\"\n\n    ,\n      arg0: numberOfApples,\n      arg1: pricePerApple * numberOfApples);\n    //WriteToFile(formatted); // writes the string into a file \n\n    ```", "```cs\n    Console.WriteLine($\"\n\n    {numberOfApples}\n\n     apples costs \n\n    {pricePerApple * numberOfApples:C}\n\n    \"\n\n    ); \n\n    ```", "```cs\n     12 apples costs \u00a34.20 \n\n    ```", "```cs\n private\n\n const\n\n string\n\n firstname = \"Omar\"\n\n;\nprivate\n\n const\n\n string\n\n lastname = \"Rudberg\"\n\n;\nprivate\n\n const\n\n string\n\n fullname = firstname + \" \"\n\n + lastname; \n\n```", "```cs\n private\n\n const\n\n string\n\n fullname = \"{firstname} {lastname}\"\n\n; \n\n```", "```cs\n{ index [, alignment ] [ : formatString ] } \n\n```", "```cs\n     string\n\n     applesText = \"Apples\"\n\n    ; \n    int\n\n     applesCount = 1234\n\n    ;\n    string\n\n     bananasText = \"Bananas\"\n\n    ; \n    int\n\n     bananasCount = 56789\n\n    ;\n    Console.WriteLine(\n      format: \"{0,-10} {1,6:N0}\"\n\n    ,\n      arg0: \"Name\"\n\n    ,\n      arg1: \"Count\"\n\n    );\n    Console.WriteLine(\n      format: \"{0,-10} {1,6:N0}\"\n\n    ,\n      arg0: applesText,\n      arg1: applesCount);\n    Console.WriteLine(\n      format: \"{0,-10} {1,6:N0}\"\n\n    ,\n      arg0: bananasText,\n      arg1: bananasCount); \n\n    ```", "```cs\n    Name          Count\n    Apples        1,234\n    Bananas      56,789 \n\n    ```", "```cs\n    Console.Write(\"Type your first name and press ENTER: \"\n\n    ); \n    string\n\n    ? firstName = Console.ReadLine();\n    Console.Write(\"Type your age and press ENTER: \"\n\n    ); \n    string\n\n    ? age = Console.ReadLine();\n    Console.WriteLine(\n      $\"Hello \n\n    {firstName}\n\n    , you look good for \n\n    {age}\n\n    .\"\n\n    ); \n\n    ```", "```cs\n    Type your name and press ENTER: Gary \n    Type your age and press ENTER: 34 \n    Hello Gary, you look good for 34. \n\n    ```", "```cs\n     using\n\n     static\n\n     System.Console; \n\n    ```", "```cs\n    Write(\"Press any key combination: \"\n\n    ); \n    ConsoleKeyInfo key = ReadKey(); \n    WriteLine();\n    WriteLine(\"Key: {0}, Char: {1}, Modifiers: {2}\"\n\n    ,\n      arg0: key.Key, \n      arg1: key.KeyChar,\n      arg2: key.Modifiers); \n\n    ```", "```cs\n    Press any key combination: k \n    Key: K, Char: k, Modifiers: 0 \n\n    ```", "```cs\n    Press any key combination: K  \n    Key: K, Char: K, Modifiers: Shift \n\n    ```", "```cs\n    Press any key combination: \n    Key: F12, Char: , Modifiers: 0 \n\n    ```", "```cs\n using\n\n System;\nnamespace\n\n Arguments\n\n{\n  class\n\n Program\n\n  {\n    static\n\nvoid\n\nMain\n\n(\n\nstring\n\n[] args\n\n)\n\n    {\n      Console.WriteLine(\"Hello World!\"\n\n);\n    }\n  }\n} \n\n```", "```cs\n     using\n\n     static\n\n     System.Console;\n    WriteLine($\"There are \n\n    {args.Length}\n\n     arguments.\"\n\n    ); \n\n    ```", "```cs\n    There are 0 arguments. \n\n    ```", "```cs\n    dotnet run firstarg second-arg third:arg \"fourth arg\" \n\n    ```", "```cs\n    There are 4 arguments. \n\n    ```", "```cs\n     foreach\n\n     (string\n\n     arg in\n\n     args)\n    {\n      WriteLine(arg);\n    } \n\n    ```", "```cs\n    There are 4 arguments. \n    firstarg\n    second-arg \n    third:arg \n    fourth arg \n\n    ```", "```cs\n     if\n\n     (args.Length < 3\n\n    )\n    {\n      WriteLine(\"You must specify two colors and cursor size, e.g.\"\n\n    );\n      WriteLine(\"dotnet run red yellow 50\"\n\n    );\n      return\n\n    ; // stop running\n\n    }\n    ForegroundColor = (ConsoleColor)Enum.Parse(\n      enumType: typeof\n\n    (ConsoleColor),\n      value\n\n    : args[0\n\n    ],\n      ignoreCase: true\n\n    );\n    BackgroundColor = (ConsoleColor)Enum.Parse(\n      enumType: typeof\n\n    (ConsoleColor),\n      value\n\n    : args[1\n\n    ],\n      ignoreCase: true\n\n    );\n    CursorSize = int\n\n    .Parse(args[2\n\n    ]); \n\n    ```", "```cs\n    dotnet run red yellow 50 \n\n    ```", "```cs\n     try\n\n    {\n      CursorSize = int\n\n    .Parse(args[2\n\n    ]);\n    }\n    catch (PlatformNotSupportedException)\n    {\n      WriteLine(\"The current platform does not support changing the size of the cursor.\"\n\n    );\n    } \n\n    ```", "```cs\n if\n\n (OperatingSystem.IsWindows())\n{\n  // execute code that only works on Windows\n\n}\nelse\n\n if\n\n (OperatingSystem.IsWindowsVersionAtLeast(major: 10\n\n))\n{\n  // execute code that only works on Windows 10 or later\n\n}\nelse\n\n if\n\n (OperatingSystem.IsIOSVersionAtLeast(major: 14\n\n, minor: 5\n\n))\n{\n  // execute code that only works on iOS 14.5 or later\n\n}\nelse\n\n if\n\n (OperatingSystem.IsBrowser())\n{\n  // execute code that only works in the browser with Blazor\n\n} \n\n```", "```cs\n #\n\ndefine\n\n MYSYMBOL \n\n```", "```cs\n #\n\nif\n\n NET6_0_ANDROID\n\n// compile statements that only works on Android\n\n#\n\nelif\n\n NET6_0_IOS\n\n// compile statements that only works on iOS\n\n#\n\nelse\n\n// compile statements that work everywhere else\n\n#\n\nendif \n\n```"]