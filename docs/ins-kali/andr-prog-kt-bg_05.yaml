- en: Chapter 5. Beautiful Layouts with CardView and ScrollView
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用CardView和ScrollView创建美丽的布局
- en: 'This is the last chapter on layouts before we spend some time focusing on Kotlin
    and object-oriented programming. We will formalize our learning on some of the
    different attributes we have already seen, and we will also introduce two more
    cool layouts: `ScrollView` and `CardView`. To finish the chapter off, we will
    run the `CardView` project on a tablet emulator.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在专注于Kotlin和面向对象编程之前关于布局的最后一章。我们将对我们已经看到的一些不同属性进行正式学习，并且还将介绍两种更酷的布局：`ScrollView`和`CardView`。最后，我们将在平板模拟器上运行`CardView`项目。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Compiling a quick summary of UI attributes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译UI属性的快速总结
- en: Building our prettiest layout so far using `ScrollView` and `CardView`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ScrollView`和`CardView`构建迄今为止最漂亮的布局
- en: Switching and customizing themes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换和自定义主题
- en: Creating and using a tablet emulator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和使用平板模拟器
- en: Let's start by recapping some attributes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先回顾一些属性。
- en: Attributes – a quick summary
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性-快速总结
- en: In the last few chapters, we have used and discussed quite a few different attributes.
    I thought it would be worth a quick summary and further investigation of a few
    of the more common ones.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们已经使用和讨论了相当多不同的属性。我认为值得对一些更常见的属性进行快速总结和进一步调查。
- en: Sizing using dp
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用dp进行大小调整
- en: As we know, there are thousands of different Android devices. Android uses **density-independent
    pixels**, or **dp**, as a unit of measurement to try and have a system of measurement
    that works across different devices. The way this works is by first calculating
    the density of the pixels on the device an app is running on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，有成千上万种不同的Android设备。Android使用**密度无关像素**或**dp**作为测量单位，以尝试拥有一个可以跨不同设备工作的测量系统。其工作原理是首先计算应用程序运行的设备上的像素密度。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We can calculate density by dividing the horizontal resolution by the horizontal
    size, in inches, of the screen. This is all done on the fly on the device on which
    our app is running.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将屏幕的水平分辨率除以屏幕的水平尺寸（以英寸为单位）来计算密度。这一切都是在我们的应用程序运行的设备上动态完成的。
- en: All we have to do is use `dp` in conjunction with a number when setting the
    size of the various attributes of our widgets. Using density-independent measurements,
    we can design layouts that scale to create a uniform appearance on as many different
    screens as possible.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在设置小部件的各种属性的大小时，使用`dp`与数字结合即可。使用密度无关的测量，我们可以设计布局，使其在尽可能多的不同屏幕上呈现统一的外观。
- en: So, problem solved then? We just use `dp` everywhere and our layouts will work
    everywhere? Unfortunately, density independence is only part of the solution.
    We will see more of how we can make our apps look great on a range of different
    screens throughout the rest of the book.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么问题解决了吗？我们只需在所有地方使用`dp`，我们的布局就能在任何地方正常工作了吗？不幸的是，密度独立性只是解决方案的一部分。在本书的其余部分中，我们将看到如何使我们的应用程序在各种不同的屏幕上看起来很棒。
- en: 'As an example, we can affect the height and width of a widget by adding the
    following code to its attributes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过向其属性添加以下代码来影响小部件的高度和宽度：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Alternatively, we can use the attributes window and add them through the comfort
    of the appropriate edit boxes. Which option you use will depend on your personal
    preference, but sometimes one way will feel more appropriate than another in a
    given situation. Either way is correct and, as we go through the book making apps,
    I will usually point out if one way is *better* than another.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用属性窗口，并通过适当的编辑框的舒适性来添加它们。您使用哪种选项将取决于您的个人偏好，但有时在特定情况下，一种方式会感觉比另一种方式更合适。无论哪种方式都是正确的，当我们在制作应用程序时，我通常会指出一种方式是否比另一种方式*更好*。
- en: We can also use the same `dp` units to set other attributes, such as margin
    and padding. We will look more closely at margins and padding in a minute.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用相同的`dp`单位来设置其他属性，例如边距和填充。我们将在一分钟内更仔细地研究边距和填充。
- en: Sizing fonts using sp
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用sp调整字体大小
- en: Another device-dependent unit of measurement used for sizing Android fonts is
    **scalable pixels**, or **sp**. The `sp` unit of measurement is used for fonts,
    and is pixel density-dependent in the exact same way that `dp` is.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于调整Android字体大小的设备相关单位是**可伸缩像素**或**sp**。`sp`测量单位用于字体，并且与`dp`完全相同，具有像素密度相关性。
- en: The extra calculation that an Android device will use when deciding how big
    your font will be based on the value of `sp` you use is the user's own font size
    settings. So, if you test your app on devices and emulators with normal-size fonts,
    then a user who has a sight impairment (or just likes big fonts) and has their
    font setting set to large will see something different to what you saw during
    testing.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Android设备在决定您的字体大小时将使用额外的计算，这取决于您使用的`sp`值和用户自己的字体大小设置。因此，如果您在具有正常大小字体的设备和模拟器上测试应用程序，那么视力受损的用户（或者只是喜欢大字体的用户）并且将其字体设置为大号的用户将看到与您在测试期间看到的内容不同。
- en: 'If you want to try playing with your Android device''s font size settings,
    you can do so by selecting **Settings | Display | Font s** **e**:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试调整Android设备的字体大小设置，可以通过选择**设置 | 显示 | 字体大小**来进行调整：
- en: '![Sizing fonts using sp](img/B12806_05_21.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![使用sp调整字体大小](img/B12806_05_21.jpg)'
- en: As we can see in the preceding screenshot, there are quite a few settings, and
    if you try it on **Huge,** the difference is, well, huge!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的屏幕截图中看到的，有相当多的设置，如果您尝试在**巨大**上进行设置，差异是巨大的！
- en: 'We can set the size of fonts using `sp` in any widget that has text. This includes
    `Button`, `TextView,` and all the UI elements under the **Text** category in the
    palette, as well as some others. We do so by setting the `textSize` property as
    follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在任何具有文本的小部件中使用`sp`设置字体大小。这包括`Button`，`TextView`以及调色板中**Text**类别下的所有UI元素，以及其他一些元素。我们可以通过设置`textSize`属性来实现：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As usual, we can also use the attributes window to achieve the same thing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，我们也可以使用属性窗口来实现相同的效果。
- en: Determining size with wrap or match
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用wrap或match确定大小
- en: We can also decide how the size of UI elements, and many other UI elements,
    behave in relation to the containing/parent element. We can do so by setting the
    `layoutWidth` and `layoutHeight` attributes to either `wrap_content` or `match_parent`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以决定UI元素的大小以及许多其他UI元素与包含/父元素的关系。我们可以通过将`layoutWidth`和`layoutHeight`属性设置为`wrap_content`或`match_parent`来实现。
- en: 'For example, say we set the attributes of a lone button on a layout to the
    following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们将布局上的一个孤立按钮的属性设置为以下内容：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, the button will expand in both height and width to **match** the **parent**.
    We can see that the button in the next image fills the entire screen:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按钮将在高度和宽度上扩展以匹配父级。我们可以看到下一张图片中的按钮填满了整个屏幕：
- en: '![Determining size with wrap or match](img/B12806_05_22.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用wrap或match确定大小](img/B12806_05_22.jpg)'
- en: 'More common for a button is `wrap_content`, as shown in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮更常见的是`wrap_content`，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This causes the button to be as big as it needs to be to **wrap** its **content**
    (width and height in `dp` and text in `sp`).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致按钮的大小与其需要的内容一样大（宽度和高度为`dp`，文本为`sp`）。
- en: Using padding and margin
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用填充和边距
- en: 'If you have ever done any web design, you will be very familiar with the next
    two attributes. **Padding** is the space from the edge of the widget to the start
    of the content in the widget. The **margin** is the space outside of the widget
    that is left between other widgets – including the margin of other widgets, should
    they have any. Here is a visual representation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经做过任何网页设计，您将非常熟悉接下来的两个属性。**填充**是从小部件的边缘到小部件中内容的开始的空间。**边距**是留在小部件外的空间，用于其他小部件之间的间隔-包括其他小部件的边距，如果它们有的话。这是一个可视化表示：
- en: '![Using padding and margin](img/B12806_05_23.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用填充和边距](img/B12806_05_23.jpg)'
- en: 'We can set padding and margin in a straightforward way, equally for all sides,
    like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地为所有边指定填充和边距，如下所示：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Look at the slight difference in naming convention for margin and padding. The
    padding value is just called `padding,` but the margin value is referred to as
    `layout_margin`. This reflects the fact that padding only affects the UI element
    itself, but margin can affect other widgets in the layout.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意边距和填充的命名约定略有不同。填充值只称为`padding`，但边距值称为`layout_margin`。这反映了填充只影响UI元素本身，但边距可以影响布局中的其他小部件。
- en: 'Or, we can specify different top, bottom, left, and right margins and padding,
    as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以指定不同的顶部、底部、左侧和右侧的边距和填充，如下所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Specifying the margin and padding values for a widget is optional, and a value
    of zero will be assumed if nothing is specified. We can also choose to specify
    some of the different side's margins and padding but not others, as in the earlier
    example.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为小部件指定边距和填充值是可选的，如果没有指定任何值，将假定为零。我们还可以选择指定一些不同边的边距和填充，但不指定其他边，就像前面的示例一样。
- en: It is probably becoming obvious that the way we design our layouts is extremely
    flexible, but also that it is going to take some practice to achieve precise results
    with these many options. We can even specify negative margin values to create
    overlapping widgets.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们设计布局的方式非常灵活，但要精确地使用这些选项，需要一些练习。我们甚至可以指定负边距值来创建重叠的小部件。
- en: Let's look at a few more attributes, and then we will go ahead and play around
    with a stylish layout, `CardView`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看一些属性，然后我们将继续玩一个时尚布局`CardView`。
- en: Using the layout_weight property
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`layout_weight`属性
- en: Weight refers to a relative amount compared to other UI elements. So, for `layout_weight`
    to be useful, we need to assign a value to the `layout_weight` property on two
    or more elements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 权重是相对于其他UI元素的相对量。因此，要使`layout_weight`有用，我们需要在两个或更多元素上为`layout_weight`属性分配一个值。
- en: We can then assign portions that add up to 100% in total. This is especially
    useful for dividing up screen space between parts of the UI where we want the
    relative space they occupy to remain the same regardless of screen size.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以分配总共加起来为100%的部分。这对于在UI的各个部分之间划分屏幕空间特别有用，我们希望它们占用的相对空间在屏幕大小不同的情况下保持不变。
- en: 'Using `layout_weight` in conjunction with the `sp` and `dp` units can make
    for a simple and flexible layout. For example, look at this code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将`layout_weight`与`sp`和`dp`单位结合使用可以创建简单灵活的布局。例如，看看这段代码：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is what this code will do:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将会做什么：
- en: '![Using the layout_weight property](img/B12806_05_24.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![使用layout_weight属性](img/B12806_05_24.jpg)'
- en: Notice that all the `layout_height` attributes are set to `0dp`. Effectively,
    the `layout_weight` attribute is replacing the `layout_height` property. The context
    in which we use `layout_weight` is important (or it won't work), and we will see
    this in a real project soon. Also note that we don't have to use fractions of
    one; we can use whole numbers, percentages, and any other number. As long as they
    are relative to each other, they will probably achieve the effect you are after.
    Note that `layout_weight` only works in certain contexts, and we will get to see
    where as we build more layouts.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，所有`layout_height`属性都设置为`0dp`。实际上，`layout_weight`属性正在替换`layout_height`属性。我们使用`layout_weight`的上下文很重要（否则它不起作用），我们很快就会在一个真实的项目中看到这一点。还要注意，我们不必使用一的分数；我们可以使用整数、百分比和任何其他数字。只要它们相对于彼此，它们可能会实现您想要的效果。请注意，`layout_weight`仅在某些上下文中起作用，随着我们构建更多的布局，我们将看到它在哪些上下文中起作用。
- en: Using gravity
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用重力
- en: '**Gravity** can be our friend, and can be used in so many ways in our layouts.
    Just like gravity in the solar system, it affects the position of items by moving
    them in a given direction as if they were being acted upon by gravity. The best
    way to see what gravity can do is to look at some example code and diagrams:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 重力可以成为我们的朋友，并且可以在布局中以许多方式使用。就像太阳系中的重力一样，它通过将物品朝特定方向移动来影响物品的位置，就好像它们受到重力的作用一样。了解重力的作用最好的方法是查看一些示例代码和图表：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the `gravity` property on a button (or another widget) is set to `left|center_vertical`
    as shown in the preceding code, it will have an effect that looks like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按钮（或其他小部件）的`gravity`属性设置为`left|center_vertical`，就像前面的代码所示，它将产生以下效果：
- en: '![Using gravity](img/B12806_05_26.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![使用重力](img/B12806_05_26.jpg)'
- en: Notice that the content of the widget (in this case the button's text) is indeed
    aligned left and centrally vertical.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意小部件的内容（在本例中为按钮的文本）确实是左对齐和垂直居中的。
- en: 'In addition, a widget can influence its own position within a layout element
    with the `layout_gravity` element, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，小部件可以通过`layout_gravity`元素影响其在布局元素中的位置，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This would set the widget within its layout, as expected, like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置小部件在其布局中，如预期的那样：
- en: '![Using gravity](img/B12806_05_25.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用重力](img/B12806_05_25.jpg)'
- en: The previous code allows different widgets within the same layout to be affected
    as if the layout has multiple different gravities.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码允许同一布局中的不同小部件受到影响，就好像布局具有多个不同的重力一样。
- en: 'The content of all the widgets in a layout can be affected by the `gravity`
    property of their parent layout by using the same code as a widget:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用与小部件相同的代码，可以通过其父布局的`gravity`属性来影响布局中所有小部件的内容：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are, in fact, many more attributes than those we have discussed. Many
    we won't need in this book, and some are quite obscure, so you might never need
    them in your entire Android career. But others are quite commonly used and include
    `background`, `textColor`, `alignment`, `typeface`, `visibility`, and `shadowColor`.
    Let's explore some more attributes and layouts now.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有许多属性超出了我们讨论的范围。我们在本书中不需要的属性很多，有些相当晦涩，所以您可能在整个 Android 生涯中都不需要它们。但其他一些属性是相当常用的，包括`background`、`textColor`、`alignment`、`typeface`、`visibility`和`shadowColor`。让我们现在探索一些更多的属性和布局。
- en: Building a UI with CardView and ScrollView
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CardView 和 ScrollView 构建 UI
- en: Create a new project in the usual way. Name the project `CardView Layout` and
    choose the **Empty Activity** project template. Leave all the rest of the settings
    the same as all the previous projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以通常的方式创建一个新项目。将项目命名为`CardView Layout`，并选择**空活动**项目模板。将其余所有设置保持与之前的所有项目相同。
- en: To be able to edit our theme and properly test the result, we need to generate
    our layout file and edit the Kotlin code to display it by calling the `setContentView`
    function from the `onCreate` function. We will design our `CardView` masterpiece
    inside a `ScrollView` layout, which, as the name suggests, allows the user to
    scroll through the content of the layout.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够编辑我们的主题并正确测试结果，我们需要生成我们的布局文件，并编辑 Kotlin 代码，通过调用 `onCreate` 函数中的 `setContentView`
    函数来显示它。我们将在 `ScrollView` 布局内设计我们的 `CardView` 杰作，正如其名字所示，允许用户滚动布局内容。
- en: Right-click the `layout` folder and select **New**. Notice that there is an
    option for **Layout resource** **file**. Select **Layout resource file** and you
    will see the **New Resource File** dialog window.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`layout`文件夹，然后选择**新建**。注意有一个**布局资源文件**的选项。选择**布局资源文件**，然后您将看到**新资源文件**对话框窗口。
- en: In the **File name** field, enter `main_layout`. The name is arbitrary, but
    this layout is going to be our main layout, so the name makes that plain.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在**文件名**字段中输入 `main_layout`。名称是任意的，但这个布局将是我们的主要布局，所以名称很明显。
- en: Notice that it is set to **LinearLayout** as the **Root** element option. Change
    it to `ScrollView`. This layout type appears to work just like `LinearLayout,`
    except that, when there is too much content to display on screen, it will allow
    the user to scroll the content by swiping with their finger.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它被设置为**LinearLayout**作为**根**元素选项。将其更改为 `ScrollView`。这种布局类型似乎就像 `LinearLayout`
    一样工作，除了当屏幕上有太多内容要显示时，它将允许用户通过用手指滑动来滚动内容。
- en: Click the **OK** button and Android Studio will generate a new `ScrollView`
    layout in an XML file called `main_layout` and place it in the `layout` folder
    ready for us to build our `CardView`-based UI.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**按钮，Android Studio 将在名为 `main_layout` 的 XML 文件中生成一个新的 `ScrollView` 布局，并将其放置在
    `layout` 文件夹中，准备好为我们构建基于 `CardView` 的 UI。
- en: 'You can see our new file in this next screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下一个截图中看到我们的新文件：
- en: '![Building a UI with CardView and ScrollView](img/B12806_05_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![使用 CardView 和 ScrollView 构建 UI](img/B12806_05_03.jpg)'
- en: Android Studio will also open the UI designer ready for action.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 还将打开准备就绪的 UI 设计器。
- en: Setting the view with Kotlin code
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Kotlin 代码设置视图
- en: As we have done previously, we will now load the `main_layout.xml` file as the
    layout for our app by calling the `setContentView` function in the `MainActivity.kt`
    file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，我们现在将通过在`MainActivity.kt`文件中调用`setContentView`函数来加载`main_layout.xml`文件作为我们应用程序的布局。
- en: Select the `MainActivity.kt` tab. In the unlikely event the tab isn't there
    by default, you can find it in the project explorer under `app/java/your_package_name`,
    where `your_package_name` is equal to the package name that you chose when you
    created the project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`MainActivity.kt`选项卡。如果选项卡不是默认显示的，您可以在项目资源管理器中找到它，路径为`app/java/your_package_name`，其中`your_package_name`等于您创建项目时选择的包名称。
- en: 'Amend the code in the `onCreate` function to look exactly like this next code.
    I have highlighted the line that you need to add:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`onCreate`函数中的代码，使其与下面的代码完全一样。我已经突出显示了您需要添加的行：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You could now run the app, but there is nothing to see except an empty `ScrollView`
    layout.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以运行该应用程序，但除了一个空的`ScrollView`布局外，没有其他可见的内容。
- en: Adding image resources
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图像资源
- en: We are going to need some images for this project. This is so we can demonstrate
    how to add them into the project (this section) and neatly display and format
    them in a `CardView` layout (next section).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一些图像来完成这个项目。这样我们就可以演示如何将它们添加到项目中（本节），并在`CardView`布局中整洁地显示和格式化它们（下一节）。
- en: It doesn't really matter where you get your images from. It is the practical
    hands-on experience that is the purpose of this exercise. To avoid copyright and
    royalty issues, I am going to use some book images from the Packt Publishing website.
    This also makes it easy for me to provide you with all the resources you need
    to complete the project should you not want to go to the bother of acquiring your
    own images. Feel free to swap the images in the `Chapter05/CardViewLayout/res/drawable`
    folder.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您从哪里获取图像并不重要。这个练习的目的是实际的动手经验。为了避免版权和版税问题，我将使用Packt Publishing网站上的一些书籍图像。这也使我能够为您提供完成项目所需的所有资源，如果您不想麻烦获取自己的图像的话。请随意在`Chapter05/CardViewLayout/res/drawable`文件夹中更换图像。
- en: 'There are three images: `image_1.png`, `image_2.png`, and `image_3.png`. To
    add them to the project, follow these steps.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个图像：`image_1.png`，`image_2.png`和`image_3.png`。要将它们添加到项目中，请按照以下步骤操作。
- en: Find the image files using your operating system's file explorer.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用操作系统的文件浏览器查找图像文件。
- en: Highlight them all and press *Ctrl* + *C* to copy them.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们全部高亮显示，然后按*Ctrl* + *C*进行复制。
- en: In the Android Studio project explorer, select the `res/drawable` folder by
    left-clicking it.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio项目资源管理器中，通过左键单击选择`res/drawable`文件夹。
- en: Right-click the `drawable` folder and select **Paste.**
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`drawable`文件夹，选择**粘贴。**
- en: In the pop-up window that asks you to **Choose Destination Directory**, click
    **OK** to accept the default destination, which is the `drawable` folder.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中询问您**选择目标目录**，单击**确定**接受默认目标，即`drawable`文件夹。
- en: Click **OK** again to **Copy Specified Files.**
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次单击**确定**以**复制指定的文件**。
- en: 'You should now be able to see your images in the `drawable` folder along with
    a couple of other files that Android Studio placed there when the project was
    created, as shown in this next screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够在`drawable`文件夹中看到您的图像，以及Android Studio在创建项目时放置在那里的其他一些文件，如下一个截图所示：
- en: '![Adding image resources](img/B12806_05_04.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![添加图像资源](img/B12806_05_04.jpg)'
- en: Before we move on to `CardView,` let's design what we will put inside them.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行`CardView`之前，让我们设计一下我们将放在其中的内容。
- en: Creating the content for the cards
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为卡片创建内容
- en: The next thing we need to do is create the content for our cards. It makes sense
    to separate the content from the layout. What we will do is create three separate
    layouts, called `card_contents_1`, `card_contents_2,` and `card_contents_3`. They
    will each contain a `LinearLayout`, which will contain the actual image and text.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要做的是为我们的卡片创建内容。将内容与布局分开是有意义的。我们将创建三个单独的布局，称为`card_contents_1`，`card_contents_2`和`card_contents_3`。它们将分别包含一个`LinearLayout`，其中将包含实际的图像和文本。
- en: 'Let''s create three more layouts with `LinearLayout` at their root:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再创建三个带有`LinearLayout`的布局：
- en: Right-click the `layout` folder and select **New layout resource file**.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`layout`文件夹，选择**新建布局资源文件**。
- en: Name the file `card_contents_1` and make sure that **LinearLayout** is selected
    as the **Root element**
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`card_contents_1`，并确保**LinearLayout**被选为**根元素**
- en: Click **OK** to add the file to the `layout` folder
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**将文件添加到`layout`文件夹
- en: Repeat steps one through three two more times, changing the filename each time
    to `card_contents_2` and then `card_contents_3`
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤一到三两次，每次更改文件名为`card_contents_2`和`card_contents_3`
- en: 'Now, select the `card_contents_1.xml` tab and make sure you are in design view.
    We will drag and drop some elements to the layout to get the basic structure and
    then we will add some `sp`, `dp`, and gravity attributes to make them look nice:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择`card_contents_1.xml`选项卡，并确保您处于设计视图中。我们将拖放一些元素到布局中以获得基本结构，然后我们将添加一些`sp`，`dp`和gravity属性使它们看起来漂亮：
- en: Drag a `TextView` widget on to the top of the layout.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`TextView`小部件拖放到布局的顶部。
- en: Drag an `ImageView` widget on to the layout below `TextView` widget.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`ImageView`小部件拖放到`TextView`小部件下方的布局中。
- en: In the **Resources** pop-up window, select **Project** | **image_1** and then
    click **OK.**
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**资源**弹出窗口中，选择**项目** | **image_1**，然后单击**确定**。
- en: Drag another two **TextView** widgets below the image.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像下方再拖放两个**TextView**小部件。
- en: This is how your layout should now appear:![Creating the content for the cards](img/B12806_05_05.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的布局应该是这样的：![为卡片创建内容](img/B12806_05_05.jpg)
- en: Now, let's use some material design guidelines to make the layout look more
    appealing.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用一些材料设计指南使布局看起来更吸引人。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is possible that, as you proceed through these modifications, the UI elements
    on the bottom of the layout might disappear from the bottom of the design view.
    If this happens to you, remember you can always select any UI element from the
    **Component Tree** window underneath the palette. Or, refer to the next tip.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您进行这些修改时，底部布局的UI元素可能会从设计视图的底部消失。如果这种情况发生在您身上，请记住您可以随时从调色板下方的**组件树**窗口中选择任何UI元素。或者，参考下一个提示。
- en: 'Another way of minimizing the problem is to use a bigger screen, as explained
    in the following instructions:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种减少问题的方法是使用更大的屏幕，如下面的说明所述：
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'I changed the default device for the design view to **Pixel 2 XL** to create
    the previous screenshot. I will leave this setting for the rest of the book unless
    I specifically mention that I am changing it. It allows a few more pixels on the
    layout and means this layout is easier to complete. If you want to do the same,
    look at the menu bar above the design view, click the device dropdown, and choose
    your design view device, as shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我将默认设备更改为**Pixel 2 XL**以创建上一个截图。我会保持这个设置，除非我特别提到我正在更改它。它允许在布局上多出一些像素，这样布局就更容易完成。如果您想做同样的事情，请查看设计视图上方的菜单栏，单击设备下拉菜单，并选择您的设计视图设备，如下截图所示：
- en: '![Creating the content for the cards](img/B12806_05_08.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![为卡片创建内容](img/B12806_05_08.jpg)'
- en: Set the `textSize` attribute for the `TextView` widget at the top to `24sp.`
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TextView`小部件的`textSize`属性设置为`24sp`。
- en: Set the **Layout_Margin** | **all** attribute to `16dp.`
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Layout_Margin** | **all**属性设置为`16dp`。
- en: Set the `text` attribute to **Learning Java by Building Android Games** (or
    whatever title suits your image).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`text`属性设置为**通过构建Android游戏学习Java**（或者适合您图像的标题）。
- en: On the `ImageView`, set `layout_width` and `layout_height` to `wrap_content.`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ImageView`上，将`layout_width`和`layout_height`设置为`wrap_content`。
- en: On the `ImageView`, set `layout_gravity` to `center_horizontal.`
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ImageView`上，将`layout_gravity`设置为`center_horizontal`。
- en: On the `TextView` beneath the `ImageView,` set `textSize` to `16sp.`
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ImageView`下方的`TextView`上，将`textSize`设置为`16sp`。
- en: On the same `TextView,` set **Layout_Margin** | **all** to `16dp.`
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`上，将**Layout_Margin** | **all**设置为`16dp`。
- en: On the same `TextView,` set the `text` attribute to `Learn Java and Android
    from scratch by building 6 playable games` (or something that describes your image).
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`上，将`text`属性设置为`通过构建6个可玩游戏从零开始学习Java和Android`（或者描述您的图像的内容）。
- en: On the bottom `TextView,` change the `text` attribute to `BUY NOW.`
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部的`TextView`上，将`text`属性更改为`立即购买`。
- en: On the same `TextView,` set **Layout_Margin** | **all** to `16dp.`
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`上，将**Layout_Margin** | **all**设置为`16dp`。
- en: On the same `TextView,` set the `textSize` attribute to `24sp.`
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`上，将`textSize`属性设置为`24sp`。
- en: On the same `TextView,` set the `textColor` attribute to `@color/colorAccent.`
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`上，将`textColor`属性设置为`@color/colorAccent`。
- en: On the `LinearLayout` holding all the other elements, set `padding` to `15dp`.
    Note that it is easiest to select `LinearLayout` from the **Component Tree** window.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含所有其他元素的`LinearLayout`上，将`padding`设置为`15dp`。请注意，从**Component Tree**窗口中选择`LinearLayout`是最容易的。
- en: At this point, your layout will look very similar to the following screenshot:![Creating
    the content for the cards](img/B12806_05_06.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，您的布局将非常类似于以下截图：![为卡片创建内容](img/B12806_05_06.jpg)
- en: Now, lay out the other two files (`card_contents_2` and `card_contents_3)` with
    the exact same dimensions and colors. When you get the **Resources** popup to
    choose an image, use `image_2` and `image_3` respectively. Also, change all the
    `text` attributes on the first two `TextView` elements so that the titles and
    descriptions are unique. The titles and descriptions don't really matter; it is
    layout and appearance that we are learning about.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用完全相同的尺寸和颜色布局其他两个文件（`card_contents_2`和`card_contents_3`）。当您收到**资源**弹出窗口以选择图像时，分别使用`image_2`和`image_3`。还要更改前两个`TextView`元素上的所有`text`属性，以使标题和描述是唯一的。标题和描述并不重要；我们学习的是布局和外观。
- en: Tip
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that all the sizes and colors were derived from the material design website
    at [https://material.io/design/introduction](https://material.io/design/introduction),
    and the Android specific UI guideline at [https://developer.android.com/guide/topics/ui/look-and-feel](https://developer.android.com/guide/topics/ui/look-and-feel).
    It is well worth studying alongside this book, or soon after you complete it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有尺寸和颜色都来自[https://material.io/design/introduction](https://material.io/design/introduction)上的材料设计网站，以及[https://developer.android.com/guide/topics/ui/look-and-feel](https://developer.android.com/guide/topics/ui/look-and-feel)上的Android特定UI指南。与本书一起学习或在完成本书后不久进行学习都是非常值得的。
- en: We can now move on to `CardView`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以转向`CardView`。
- en: Defining dimensions for CardView
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为CardView定义尺寸
- en: Right-click the `values` folder and select **New** | **Values resource file**.
    In the **New Resource File** pop-up window, name the file `dimens.xml` (short
    for dimensions) and click **OK**. We will use this file to create some common
    values that our `CardView` object will use by referring to them.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`values`文件夹，然后选择**New** | **Values resource file**。在**New Resource File**弹出窗口中，将文件命名为`dimens.xml`（表示尺寸）并单击**OK**。我们将使用这个文件来创建一些常见的值，我们的`CardView`对象将通过引用它们来使用。
- en: 'To achieve this, we will edit the XML directly. Edit the `dimens.xml` file
    to be the same as the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将直接编辑XML。编辑`dimens.xml`文件，使其与以下代码相同：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Be sure to make it exactly the same because a small omission or mistake could
    cause an error and prevent the project from working.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 确保它完全相同，因为一个小的遗漏或错误可能导致错误并阻止项目工作。
- en: We have defined two resources, the first called `card_corner_radius,` with a
    value of `16dp,` and the second called `card_margin,` with a value of `10dp`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了两个资源，第一个称为`card_corner_radius`，值为`16dp`，第二个称为`card_margin`，值为`10dp`。
- en: We will refer to these resources in the `main_layout` file and use them to consistently
    configure our three `CardView` elements.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`main_layout`文件中引用这些资源，并使用它们来一致地配置我们的三个`CardView`元素。
- en: Adding CardView to our layout
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将CardView添加到我们的布局
- en: Switch to the `main_layout.xml` tab and make sure you are in the design view.
    You probably recall that we are now working with a `ScrollView` that will scroll
    the content of our app, rather like a web browser scrolls the content of a web
    page that doesn't fit on one screen.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到`main_layout.xml`选项卡，并确保您处于设计视图中。您可能还记得，我们现在正在使用一个`ScrollView`，它将滚动我们应用的内容，就像Web浏览器滚动网页内容一样，内容无法适应一个屏幕。
- en: '`ScrollView` has a limitation – it can only have one direct child layout. We
    want it to contain three `CardView` elements.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScrollView`有一个限制 - 它只能有一个直接的子布局。我们希望它包含三个`CardView`元素。'
- en: 'To overcome this problem, drag a `LinearLayout` from the `Layouts` category
    of the palette. Be sure to pick **LinearLayout (vertical),** as represented by
    this icon in the palette:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，从调色板的`Layouts`类别中拖动一个`LinearLayout`。确保选择**LinearLayout (vertical)**，如调色板中的图标所示：
- en: '![Adding CardView to our layout](img/B12806_05_07.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![将CardView添加到我们的布局](img/B12806_05_07.jpg)'
- en: We will add our three `CardView` objects inside `LinearLayout` and then the
    whole thing will scroll nice and smoothly without any errors.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`LinearLayout`内添加我们的三个`CardView`对象，然后整个内容将平稳滚动，没有任何错误。
- en: '`CardView` can be found in the **Containers** category of the palette, so switch
    to that and locate `CardView`.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardView`可以在调色板的**Containers**类别中找到，所以切换到那里并找到`CardView`。'
- en: 'Drag a `CardView` object onto the `LinearLayout` on the design and you will
    get a pop-up message in Android Studio. This is the message pictured here:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将`CardView`对象拖放到设计中的`LinearLayout`上，您将在Android Studio中收到一个弹出消息。这是这里所示的消息：
- en: '![Adding CardView to our layout](img/B12806_05_09.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![将CardView添加到我们的布局](img/B12806_05_09.jpg)'
- en: Click the **OK** button, and Android Studio will do some work behind the scenes
    and add the necessary parts to the project. Android Studio has added some more
    classes to the project, specifically, classes that provide `CardView` features
    to older versions of Android that wouldn't otherwise have them.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**按钮，Android Studio将在后台进行一些工作，并向项目添加必要的部分。Android Studio已经向项目添加了一些更多的类，具体来说，这些类为旧版本的Android提供了`CardView`功能，否则这些功能是不具备的。
- en: You should now have a `CardView` object on the design. Until there is some content
    in it, the `CardView` object is only easily visible in the **Component Tree**
    window.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该在设计中有一个`CardView`对象。在它里面没有内容的情况下，`CardView`对象只能在**组件树**窗口中轻松地看到。
- en: 'Select the `CardView` object via the **Component Tree** window and configure
    the following attributes:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**组件树**窗口选择`CardView`对象，并配置以下属性：
- en: Set `layout_width` to `wrap_content`
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`layout_width`设置为`wrap_content`
- en: Set `layout_gravity` to `center`
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`layout_gravity`设置为`center`
- en: Set **Layout_Margin** | **all** to `@dimens/card_margin`
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**Layout_Margin** | **all**设置为`@dimens/card_margin`
- en: Set `cardCornerRadius` to `@dimens/card_corner_radius`
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`cardCornerRadius`设置为`@dimens/card_corner_radius`
- en: Set `cardEleveation` to `2dp`
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`cardEleveation`设置为`2dp`
- en: 'Now, switch to the **Text** tab and you will find you have something very similar
    to this next code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到**文本**选项卡，你会发现你有一个非常类似于下面代码的东西：
- en: '[PRE12]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous code listing only shows the code for the `CardView` object.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码列表只显示了`CardView`对象的代码。
- en: The current problem is that our `CardView` object is empty. Let's fix that by
    adding the content of `card_contents_1.xml`. Here is how to do it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当前问题是我们的`CardView`对象是空的。让我们通过添加`card_contents_1.xml`的内容来解决这个问题。以下是如何做到这一点。
- en: Including layout files inside another layout
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在另一个布局中包含布局文件
- en: 'We need to edit the code very slightly, and here is why. We need to add an
    `include` element to the code. The `include` element is the code that will insert
    the content from the `card_contents_1.xml` layout. The problem is that, to add
    this code, we need to slightly alter the format of the `CardView` XML. The current
    format starts and concludes the `CardView` object with one single tag, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微编辑代码，原因如下。我们需要向代码中添加一个`include`元素。`include`元素是将从`card_contents_1.xml`布局中插入内容的代码。问题在于，要添加这段代码，我们需要稍微改变`CardView`
    XML的格式。当前的格式是用一个单一的标签开始和结束`CardView`对象，如下所示：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We need to change the format to a separate opening and closing tag like this
    (don''t change anything just yet):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将格式更改为像这样的单独的开放和关闭标签（暂时不要更改任何内容）：
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This change in format will enable us to add the `include…` code, and our first
    `CardView` object will be complete. With this in mind, edit the code of `CardView`
    to be exactly the same as the following code. I have highlighted the two new lines
    of code, but also note that the forward slash that was after the `cardElevation`
    attribute has also been removed:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式的改变将使我们能够添加`include…`代码，我们的第一个`CardView`对象将完成。考虑到这一点，编辑`CardView`的代码，确保与以下代码完全相同。我已经突出显示了两行新代码，但也请注意，`cardElevation`属性后面的斜杠也已经被移除：
- en: '[PRE15]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can now view the `main_layout` file in the visual designer and see the
    layout inside the `CardView` object. The visual designer does not reveal the real
    aesthetics of `CardView`. We will see all the `CardView` widgets scrolling nicely
    in the completed app shortly. Here is a screenshot of where we are up to so far:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以在可视化设计师中查看`main_layout`文件，并查看`CardView`对象内的布局。可视化设计师无法展现`CardView`的真实美感。我们很快就会在完成的应用程序中看到所有`CardView`小部件很好地滚动。以下是我们目前的进度截图：
- en: '![Including layout files inside another layout](img/B12806_05_10.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![在另一个布局中包含布局文件](img/B12806_05_10.jpg)'
- en: Add two more `CardView` widgets to the layout and configure them the same as
    the first, with one exception. On the second `CardView` object, set `cardElevation`
    to `22dp` and, on the third `CardView` object, set `cardElevation` to `42dp`.
    Also, change the `include` code to reference `card_contents_2` and `card_contents_3`
    respectively.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局中再添加两个`CardView`小部件，并将它们配置成与第一个相同，只有一个例外。在第二个`CardView`对象上，将`cardElevation`设置为`22dp`，在第三个`CardView`对象上，将`cardElevation`设置为`42dp`。同时，将`include`代码更改为分别引用`card_contents_2`和`card_contents_3`。
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You could do this very quickly by copying and pasting the `CardView` XML and
    simply amending the elevation and the `include` code, as mentioned in the previous
    paragraph.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过复制和粘贴`CardView` XML并简单修改高程和`include`代码来快速完成这一步，就像前面的段落中提到的那样。
- en: 'Now we can run the app and see our three beautiful, elevated `CardView` widgets
    in action. In this next screenshot, I have photoshopped two screenshots to be
    side by side, so you can see one full `CardView` layout in action (on the left)
    and, in the image on the right, the effect the elevation setting has, which creates
    a very pleasing depth with a shadow effect:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行应用程序，看到我们三个漂亮的、高架的`CardView`小部件在运行中的效果。在下面的截图中，我将两个截图并排放置，这样你就可以看到一个完整的`CardView`布局的效果（在左边），以及右边的图像中，高程设置产生的效果，产生了非常令人愉悦的深度和阴影效果：
- en: '![Including layout files inside another layout](img/B12806_05_11.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![在另一个布局中包含布局文件](img/B12806_05_11.jpg)'
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The image will likely be slightly unclear in the black and white printed version
    of this book. Be sure to build and run the app for yourself to see this cool effect.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片在黑白印刷版本的书中可能会有些不清晰。一定要构建并运行应用程序，以查看这个很酷的效果。
- en: Now we can play around with editing the theme of the app.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试编辑应用程序的主题。
- en: Themes and material design
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题和材料设计
- en: Creating a new theme, technically speaking, is very easy, and we will see how
    to do it in a minute. From an artistic point of view, however, it is more difficult.
    Choosing which colors work well together, let alone suit your app and the imagery,
    is much more difficult. Fortunately, we can turn to material design for help.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，创建一个新主题非常容易，我们很快就会看到如何做到这一点。然而，从艺术角度来看，这更加困难。选择哪些颜色能很好地搭配在一起，更不用说适合你的应用程序和图像，这更加困难。幸运的是，我们可以求助于材料设计。
- en: Material design has guidelines for every aspect of UI design and all the guidelines
    are very well documented. Even the sizes for text and padding that we used for
    the `CardView` project were all taken from material design guidelines.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计为UI设计的每个方面都提供了指南，所有这些指南都有很好的文档。甚至我们在`CardView`项目中使用的文本和填充的大小都是从材料设计指南中获取的。
- en: Not only does material design make it possible for you to design your very own
    color schemes, but it also provides palettes of ready-made color schemes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计不仅使您能够设计自己的配色方案，而且还提供了现成的配色方案调色板。
- en: Tip
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This book is not about design, although it is about implementing design. To
    get you started, the goal of our designs might be to make our UI unique and to
    stand out at the exact same time as making it comfortable for, even familiar to,
    the user.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书不是关于设计，尽管它是关于实施设计。为了让您开始，我们设计的目标可能是使我们的UI独特并在同一时间脱颖而出，同时使其对用户来说舒适甚至熟悉。
- en: Themes are constructed from XML `style` items. We saw the `styles.xml` file
    in [Chapter 3](ch03.html "Chapter 3. Exploring Android Studio and the Project
    Structure"), *Exploring Android Studio and the Project Structure*. Each item in
    the `styles` file defined the appearance and gave it a name such as `colorPrimary`
    or `colorAccent`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 主题是由XML `style`项构建的。我们在[第3章](ch03.html "第3章。探索Android Studio和项目结构")中看到了`styles.xml`文件，*探索Android
    Studio和项目结构*。`styles`文件中的每个项目都定义了外观并为其命名，例如`colorPrimary`或`colorAccent`。
- en: The questions that remain are, how do we choose our colors and how do we implement
    them in our theme? The answer to the first question has two possible options.
    The first answer is to enroll on a design course and spend the next few years
    studying UI design. The more useful answer is to use one of the built-in themes
    and make customizations based on the material design guidelines, discussed in
    depth for every UI element at [https://developer.android.com/guide/topics/ui/look-and-feel/](https://developer.android.com/guide/topics/ui/look-and-feel/).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的问题是，我们如何选择颜色，以及如何在主题中实现它们？第一个问题的答案有两种可能的选择。第一个答案是参加设计课程，并花费接下来的几年时间学习UI设计。更有用的答案是使用内置主题之一，并根据材料设计指南进行自定义，该指南在[https://developer.android.com/guide/topics/ui/look-and-feel/](https://developer.android.com/guide/topics/ui/look-and-feel/)中对每个UI元素进行了深入讨论。
- en: We will do the latter now.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将执行后者。
- en: Using the Android Studio theme designer
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Android Studio主题设计师
- en: 'From the Android Studio main menu, select **Tools** | **Theme Editor**. On
    the left-hand side, notice the UI examples that show what the theme will look
    like, and on the right are the controls to edit aspects of the theme:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android Studio主菜单中，选择**工具** | **主题编辑器**。在左侧，注意显示主题外观的UI示例，右侧是编辑主题方面的控件：
- en: '![Using the Android Studio theme designer](img/B12806_05_12.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio主题设计师](img/B12806_05_12.jpg)'
- en: 'As mentioned, the easiest way to create your own theme is to start with, and
    then edit, an existing theme. In the **Theme** dropdown, select a theme you like
    the look of. I chose **AppCompat** **Dark**:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，创建自己的主题最简单的方法是从现有主题开始，然后进行编辑。在**主题**下拉菜单中，选择您喜欢外观的主题。我选择了**AppCompat**
    **Dark**：
- en: '![Using the Android Studio theme designer](img/B12806_05_13.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio主题设计师](img/B12806_05_13.jpg)'
- en: 'Select any items on the right-hand side that you want to change the color of,
    and choose a color in the screen that follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 选择右侧要更改颜色的任何项目，并在随后的屏幕中选择颜色：
- en: '![Using the Android Studio theme designer](img/B12806_05_14.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio主题设计师](img/B12806_05_14.jpg)'
- en: 'You will be prompted to choose a name for your new theme. I called mine `Theme.AppCompat.MyDarkTheme`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示为新主题选择一个名称。我称我的为`Theme.AppCompat.MyDarkTheme`：
- en: '![Using the Android Studio theme designer](img/B12806_05_15.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio主题设计师](img/B12806_05_15.jpg)'
- en: 'Now, click the **fix** text to apply your theme to the current app, as indicated
    in the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，单击**修复**文本以将您的主题应用于当前应用程序，如下图所示：
- en: '![Using the Android Studio theme designer](img/B12806_05_16.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio主题设计师](img/B12806_05_16.jpg)'
- en: 'You can then run your app on the emulator to see the theme in action:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在模拟器上运行应用程序，查看主题的效果：
- en: '![Using the Android Studio theme designer](img/B12806_05_17.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio主题设计师](img/B12806_05_17.jpg)'
- en: So far, all our apps have been run on a phone. Obviously, a huge part of the
    Android device ecosystem is tablets. Let's see how we can test our apps on a tablet
    emulator, as well as get an advanced look at some of the problems this diverse
    ecosystem is going to cause us, and then we can begin to learn to overcome these
    problems.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的应用都在手机上运行。显然，Android设备生态系统的一个重要部分是平板电脑。让我们看看如何在平板电脑模拟器上测试我们的应用程序，以及预览这个多样化生态系统可能会给我们带来的一些问题，然后我们可以开始学习如何克服这些问题。
- en: Creating a tablet emulator
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建平板电脑模拟器
- en: 'Select **Tools** | **AVD Manager** and then click the **Create Virtual Device…**
    button on the **Your Virtual Devices** window. You will see the **Select Hardware**
    window in the following screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**工具** | **AVD管理器**，然后单击**创建虚拟设备...**按钮在**您的虚拟设备**窗口上。您将在以下屏幕截图中看到**选择硬件**窗口：
- en: '![Creating a tablet emulator](img/B12806_05_18.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![创建平板电脑模拟器](img/B12806_05_18.jpg)'
- en: Select the **Tablet** option from the **Category** list and then highlight the
    **Pixel C** tablet from the choice of available tablets. These choices are highlighted
    in the previous screenshot.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从**类别**列表中选择**平板电脑**选项，然后从可用平板电脑选择中突出显示**Pixel C**平板电脑。这些选择在上一个屏幕截图中突出显示。
- en: Tip
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are reading this sometime in the future, the Pixel C option might have
    been updated. The choice of tablet is less important than practicing this process
    of creating a tablet emulator and then testing your apps.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在将来某个时候阅读此内容，Pixel C选项可能已经更新。选择平板电脑的重要性不如练习创建平板电脑模拟器并测试您的应用程序。
- en: Click the **Next** button. On the **System Image** window that follows, just
    click **Next**, because this will select the default system image. It is possible
    that choosing your own image will cause the emulator not to work properly.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮。在接下来的**系统映像**窗口中，只需点击**下一步**，因为这将选择默认的系统映像。选择自己的映像可能会导致模拟器无法正常工作。
- en: 'Finally, on the **Android Virtual Device** screen, you can leave all the default
    options as they are. Feel free to change the **AVD Name** for your emulator or
    the **Startup Orientation** (portrait or landscape) if you want to:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在**Android虚拟设备**屏幕上，您可以将所有默认选项保持不变。如果愿意，可以更改模拟器的**AVD名称**或**启动方向**（纵向或横向）：
- en: '![Creating a tablet emulator](img/B12806_05_19.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: 创建平板模拟器
- en: Click the **Finish** button when you are ready.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备好时，点击**完成**按钮。
- en: 'Now, whenever you run one of your apps from Android Studio, you will be given
    the option to choose **Pixel C** (or whatever tablet you created). Here is a screenshot
    of my Pixel C emulator running the `CardView` app:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当您从Android Studio运行您的应用程序时，您将有选择**Pixel C**（或您创建的任何平板电脑）的选项。这是我Pixel C模拟器运行`CardView`应用程序的屏幕截图：
- en: '![Creating a tablet emulator](img/B12806_05_20.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![创建平板模拟器](img/B12806_05_20.jpg)'
- en: Not too bad, but there is quite a large amount of wasted space and it looks
    a bit sparse. Let's try it in landscape mode. If you try running the app with
    the tablet in landscape mode, the results are worse. What we can learn from this
    is that we are going to have to design our layouts for different size screens
    and for different orientations. Sometimes, these will be clever designs that scale
    to suit different sizes or orientations, but often they will be completely different
    designs.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 还不错，但有相当多的浪费空间，看起来有点稀疏。让我们尝试横向模式。如果您尝试在平板电脑上以横向模式运行应用程序，结果会更糟。我们可以从中学到的是，我们将不得不为不同大小的屏幕和不同方向设计我们的布局。有时，这些将是智能设计，可以适应不同的大小或方向，但通常它们将是完全不同的设计。
- en: Frequently asked question
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Q) Do I need to master all this stuff about material design?
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 问：我需要掌握关于材料设计的所有知识吗？
- en: A) No. Unless you want to be a professional designer. If you just want to make
    your own apps and sell them or give them away on the Play store, then knowing
    just the basics is good enough.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 答：不需要。除非你想成为专业设计师。如果你只想制作自己的应用程序并在Play商店上出售或免费提供它们，那么只知道基础知识就足够了。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built aesthetically pleasing `CardView` layouts and put
    them in a `ScrollView` layout so that the user can swipe through the content of
    the layout a bit like browsing a web page. To conclude the chapter, we launched
    a tablet emulator and saw that we are going to need to get smart with how we design
    our layouts if we want to cater for different device sizes and orientations. In
    [Chapter 24](ch24.html "Chapter 24. Design Patterns, Multiple Layouts, and Fragments"),
    *Design Patterns, Multiple Layouts, and Fragments*, we will begin to take our
    layouts to the next level and learn how to cope with such a diverse array of devices
    by using Android Fragments.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了美观的`CardView`布局，并将它们放在`ScrollView`布局中，以便用户可以通过布局的内容进行滑动，有点像浏览网页。最后，我们启动了一个平板模拟器，并看到如果我们想要适应不同的设备大小和方向，我们需要在布局设计上变得聪明起来。在[第24章](ch24.html
    "第24章。设计模式，多个布局和片段")中，*设计模式，多个布局和片段*，我们将开始将我们的布局提升到下一个水平，并学习如何通过使用Android片段来应对如此多样化的设备。
- en: Before we do so, however, it will serve us well to learn more about Kotlin and
    how we can use it to control our UI and interact with the user. This will be the
    focus of the next seven chapters.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这样做之前，更好地了解Kotlin以及如何使用它来控制我们的UI并与用户交互将对我们有所裨益。这将是接下来七章的重点。
- en: Of course, the elephant in the room at this point is that, despite learning
    lots about layouts, project structure, the connection between Kotlin and XML,
    and much more besides, our UIs, no matter how pretty, don't actually do anything!
    We need to seriously upgrade our Kotlin skills while also learning more about
    how to apply them in an Android context.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，此时的悬而未决的问题是，尽管学到了很多关于布局、项目结构、Kotlin和XML之间的连接以及其他许多内容，但是我们的UI，无论多么漂亮，实际上并没有做任何事情！我们需要严肃地提升我们的Kotlin技能，同时学习如何在Android环境中应用它们。
- en: In the next chapter, we will do exactly that. We will look at how we can add
    Kotlin code that executes at exactly the moment we need it to by working with
    the **Android Activity lifecycle**.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将做到这一点。我们将看看如何通过与**Android Activity生命周期**一起工作，添加Kotlin代码，以便在我们需要的确切时刻执行它。
