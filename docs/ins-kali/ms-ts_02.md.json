["```ts\nvar myString = \"test\";\nvar myNumber = 1;\nvar myBoolean = true;\n```", "```ts\nmyString = myNumber;\nmyBoolean = myString;\nmyNumber = myBoolean;\n```", "```ts\nvar myString : string = \"test\";\nvar myNumber: number = 1;\nvar myBoolean : boolean = true;\n```", "```ts\nmyString = myNumber;\nmyBoolean = myString;\nmyNumber = myBoolean;\n```", "```ts\nmyString = myNumber.toString();\nmyBoolean = (myString === \"test\");\nif (myBoolean) {\n    myNumber = 1;\n}\n```", "```ts\nvar myString = \"this is a string\";\nvar myNumber = 1;\nmyNumber = myString;\n```", "```ts\nerror TS2011: Build: Cannot convert 'string' to 'number'\n\n```", "```ts\nvar complexType = { name: \"myName\", id: 1 };\ncomplexType = { id: 2, name: \"anotherName\" };\n```", "```ts\nvar complexType = { name: \"myName\", id: 1 };\ncomplexType = { id: 2 };\ncomplexType = { name: \"anotherName\" };\ncomplexType = { address: \"address\" };\n```", "```ts\nerror TS2012: Build: Cannot convert '{ id: number; }' to '{ name: string; id: number; }':\nerror TS2012: Build: Cannot convert '{ name: string; }' to '{ name: string; id: number; }':\nerror TS2012: Build: Cannot convert '{ address: string; }' to '{ name: string; id: number; }':\n\n```", "```ts\nvar complexType = { name: \"myName\", id: 1 };\ncomplexType = { name: \"name\", id: 2, address: \"address\" };\n```", "```ts\nvar arrayOfNumbers: number[] = [1, 2, 3];\narrayOfNumbers = [3, 4, 5];\narrayOfNumbers = [\"one\", \"two\", \"three\"];\n```", "```ts\nerror TS2012: Build: Cannot convert 'string[]' to 'number[]':\n\n```", "```ts\nvar item1 = { id: 1, name: \"item 1\" };\nitem1 = { id: 2 };\n```", "```ts\nerror TS2012: Build: Cannot convert '{ id: number; }' to '{ id: number; name: string; }'\n\n```", "```ts\nvar item1 : any = { id: 1, name: \"item 1\" };\nitem1 = { id: 2 };\n```", "```ts\nvar item1 = <any>{ id: 1, name: \"item 1\" };\nitem1 = { id: 2 };\n```", "```ts\nenum DoorState {\n    Open,\n    Closed,\n    Ajar\n}\n```", "```ts\nwindow.onload = () => {\n    var myDoor = DoorState.Open;\n    console.log(\"My door state is \" + myDoor.toString());\n};\n```", "```ts\nMy door state is 0\n\n```", "```ts\nwindow.onload = () => {\n    var openDoor = DoorState[\"Closed\"];\n    console.log(\"My door state is \" + openDoor.toString());\n};\n```", "```ts\nMy door state is 1\n\n```", "```ts\nwindow.onload = () => {\n    var ajarDoor = DoorState[2];\n    console.log(\"My door state is \" + ajarDoor.toString());\n};\n```", "```ts\nMy door state is Ajar\n\n```", "```ts\nvar DoorState;\n(function (DoorState) {\n    DoorState[DoorState[\"Open\"] = 0] = \"Open\";\n    DoorState[DoorState[\"Closed\"] = 1] = \"Closed\";\n    DoorState[DoorState[\"Ajar\"] = 2] = \"Ajar\";\n})(DoorState || (DoorState = {}));\n```", "```ts\nDoorState\n{...}\n    [prototype]: {...}\n    [0]: \"Open\"\n    [1]: \"Closed\"\n    [2]: \"Ajar\"\n    [prototype]: []\n    Ajar: 2\n    Closed: 1\n    Open: 0\n```", "```ts\nenum DoorState {\n    Open = 3,\n    Closed = 7,\n    Ajar = 10\n}\n```", "```ts\nconst enum DoorStateConst {\n    Open,\n    Closed,\n    Ajar\n}\n\nvar myState = DoorStateConst.Open;\n```", "```ts\nvar myState = 0 /* Open */;\n```", "```ts\n// generates an error\nconsole.log(DoorStateConst[0]);\n// valid usage\nconsole.log(DoorStateConst[\"Open\"]);\n```", "```ts\nconsole.log(0 /* \"Open\" */);\n```", "```ts\nfunction addNumbers(a, b) {\n    return a + b;\n}\n\nvar result = addNumbers(1, 2);\nvar result2 = addNumbers(\"1\", \"2\");\n```", "```ts\nfunction addNumbers(a: number, b: number): number {\n    return a + b;\n};\n\nvar result = addNumbers(1, 2);\nvar result2 = addNumbers(\"1\", \"2\");\n```", "```ts\nerror TS2082: Build: Supplied parameters do not match any signature of call target:\n\n```", "```ts\nvar addVar = function(a, b) {\n    return a + b;\n};\n\nvar result = addVar(1, 2);\n```", "```ts\nvar addVar = function(a: number, b: number): number {\n    return a + b;\n}\n\nvar result = addVar(1, 2);\nvar result2 = addVar(\"1\", \"2\");\n```", "```ts\nerror TS2082: Build: Supplied parameters do not match any signature of call target:\n\n```", "```ts\nvar concatStrings = function(a, b, c) {\n    return a + b + c;\n}\n\nconsole.log(concatStrings(\"a\", \"b\", \"c\"));\nconsole.log(concatStrings(\"a\", \"b\"));\n```", "```ts\nvar concatStrings = function(a: string, b: string, c?: string) {\n    return a + b + c;\n}\n\nconsole.log(concatStrings(\"a\", \"b\", \"c\"));\nconsole.log(concatStrings(\"a\", \"b\"));\nconsole.log(concatStrings(\"a\"));\n```", "```ts\nerror TS2081: Build: Supplied parameters do not match any signature of call target.\n\n```", "```ts\nvar concatStrings = function(a: string, b: string, c: string = \"c\") {\n    return a + b + c;\n}\n\nconsole.log(concatStrings(\"a\", \"b\", \"c\"));\nconsole.log(concatStrings(\"a\", \"b\"));\n```", "```ts\nfunction testParams() {\n    if (arguments.length > 0) {\n        for (var i = 0; i < arguments.length; i++) {\n            console.log(\"Argument \" + i + \" = \" + arguments[i]);\n        }\n    }\n}\n\ntestParams(1, 2, 3, 4);\ntestParams(\"first argument\");\n```", "```ts\nArgument 0 = 1\nArgument 1 = 2\nArgument 2 = 3\nArgument 3 = 4\nArgument 0 = first argument\n\n```", "```ts\nfunction testParams(...argArray: number[]) {\n    if (argArray.length > 0) {\n        for (var i = 0; i < argArray.length; i++) {\n            console.log(\"argArray \" + i + \" = \" + argArray[i]);\n            console.log(\"arguments \" + i + \" = \" + arguments[i]);\n        }\n    }\n\n}\n\ntestParams(1);\ntestParams(1, 2, 3, 4);\ntestParams(\"one\", \"two\");\n```", "```ts\nfunction testParamsTs2(arg1: string,\n    arg2: number, ...ArgArray: number[]) {\n}\n```", "```ts\nfunction myCallBack(text) {\n    console.log(\"inside myCallback \" + text);\n}\n\nfunction callingFunction(initialText, callback) {\n    console.log(\"inside CallingFunction\");\n    callback(initialText);\n}\n\ncallingFunction(\"myText\", myCallBack);\n```", "```ts\ninside CallingFunction\ninside myCallback myText\n\n```", "```ts\ncallingFunction(\"myText\", \"this is not a function\");\n```", "```ts\n0x800a138a - JavaScript runtime error: Function expected\n\n```", "```ts\nfunction callingFunction(initialText, callback) {\n    console.log(\"inside CallingFunction\");\n    if (typeof callback === \"function\") {\n        callback(initialText);\n    } else {\n        console.log(callback + \" is not a function\");\n    }\n}\n\ncallingFunction(\"myText\", \"this is not a function\");\n```", "```ts\ninside CallingFunction\nthis is not a function is not a function\n\n```", "```ts\nfunction myCallBack(text: string) {\n    console.log(\"inside myCallback \" + text);\n}\n\nfunction callingFunction(initialText: string,\n    callback: (text: string) => void)\n{\n    callback(initialText);\n}\n\ncallingFunction(\"myText\", myCallBack);\ncallingFunction(\"myText\", \"this is not a function\");\n```", "```ts\ncallback: (text: string) => void\n```", "```ts\nerror TS2082: Build: Supplied parameters do not match any signature of call target:\nType '(text: string) => void' requires a call signature, but type 'String' lacks one\n\n```", "```ts\nfunction myCallBackNumber(arg1: number) {\n    console.log(\"arg1 = \" + arg1);\n}\n\ncallingFunction(\"myText\", myCallBackNumber);\n```", "```ts\nCall signatures of types 'typeof myCallBackNumber' and '(text: string) => void' are incompatible.\n\n```", "```ts\nfunction testScope() {\n    var testVariable = \"myTestVariable\";\n    function print() {\n        console.log(testVariable);\n    }\n}\n\nconsole.log(testVariable);\n```", "```ts\nerror TS2095: Build: Could not find symbol 'testVariable'.\n\n```", "```ts\nvar testVariable = \"testValue\";\n\nfunction getData() {\n    var testVariable_2 = \"testValue_2\";\n    $.ajax(\n        {\n            url: \"/sample_json.json\",\n            success: (data, status, jqXhr) => {\n                console.log(\"success : testVariable is \"\n                    + testVariable);\n                console.log(\"success : testVariable_2 is\" \n                    + testVariable_2);\n            },\n            error: (message, status, stack) => {\n                alert(\"error \" + message);\n            }\n        }\n   );\n}\n\ngetData();\n```", "```ts\nsuccess : testVariable is :testValue\nsuccess : testVariable_2 is :testValue_2\n\n```", "```ts\nvar testVariable = \"testValue\";\n\nfunction getData() {\n    var testVariable_2 = \"testValue_2\";\n    $.ajax(\n        {\n            url: \"/sample_json.json\",\n            success: successCallback,\n            error: (message, status, stack) => {\n                alert(\"error \" + message);\n            }\n        }\n   );\n}\n\nfunction successCallback(data, status, jqXhr) {\n    console.log(\"success : testVariable is :\" + testVariable);\n    console.log(\"success : testVariable_2 is :\" + testVariable_2);\n}\n\ngetData();\n```", "```ts\nerror TS2095: Build: Could not find symbol ''testVariable_2''.\n\n```", "```ts\nfunction add(x, y) {\n    return x + y;\n}\n\nconsole.log(\"add(1,1)=\" + add(1,1));\nconsole.log(\"add(''1'',''1'')=\" + add(\"1\", \"1\"));\nconsole.log(\"add(true,false)=\" + add(true, false));\n```", "```ts\nadd(1,1)=2\nadd('1','1')=11\nadd(true,false)=1\n\n```", "```ts\nfunction add(arg1: string, arg2: string): string;\nfunction add(arg1: number, arg2: number): number;\nfunction add(arg1: boolean, arg2: boolean): boolean;\nfunction add(arg1: any, arg2: any): any {\n    return arg1 + arg2;\n}\n\nconsole.log(\"add(1,1)=\" + add(1, 1));\nconsole.log(\"add(''1'',''1'')=\" + add(\"1\", \"1\"));\nconsole.log(\"add(true,false)=\" + add(true, false));\n```", "```ts\nconsole.log(\"add(true,''1'')\", add(true, \"1\"));\n```", "```ts\nerror TS2082: Build: Supplied parameters do not match any signature of call target:\nerror TS2087: Build: Could not select overload for ''call'' expression.\n\n```", "```ts\nfunction addWithUnion(\n    arg1: string | number | boolean,\n    arg2: string | number | boolean\n     ): string | number | boolean\n    {\n    if (typeof arg1 === \"string\") {\n        // arg1 is treated as a string here\n        return arg1 + \"is a string\";\n    }\n    if (typeof arg1 === \"number\") {\n        // arg1 is treated as a number here\n        return arg1 + 10;\n    }\n    if (typeof arg1 === \"boolean\") {\n        // arg1 is treated as a boolean here\n        return arg1 && false;\n    }\n}\n```", "```ts\ntype StringNumberOrBoolean = string | number | boolean;\n\nfunction addWithAliases(\n    arg1: StringNumberOrBoolean,\n    arg2: StringNumberOrBoolean\n     ): StringNumberOrBoolean {\n\n}\n```", "```ts\ntype CallbackWithString = (string) => void;\n\nfunction usingCallback(callback: CallbackWithString) {\n    callback(\"this is a string\");\n}\n```"]