["```kt\n    // SomeFile.kt \n    fun main(args: Array<String>) {     // 1 \n        println(\"Hello, World!\")        // 2, Prints: Hello, World! \n    } \n```", "```kt\n    fun double(i: Int): Int { \n        return 2 * i \n    } \n```", "```kt\n    val a = double(5) \n```", "```kt\n    fun findDuplicates(list: List<Int>): Set<Int> { \n        var list = list.sorted() \n        //... \n    } \n```", "```kt\n    fun printSum(a: Int, b: Int) { \n        val sum = a + b \n        print(sum) \n    }   \n```", "```kt\n    fun presentGently(v: Any) { \n        println(\"Hello. I would like to present you: $v\") \n    } \n\n    presentGently(\"Duck\")  \n\n    // Hello. I would like to present you: Duck \n    presentGently(42)      \n\n    // Hello. I would like to present you: 42 \n```", "```kt\n    fun presentGently(v: Any?) { \n        println(\"Hello. I would like to present you: $v\") \n    } \n\n    presentGently(null) \n\n    // Prints: Hello. I would like to present you: null \n    presentGently(1) \n\n    // Prints: Hello. I would like to present you: 1 \n    presentGently(\"Str\") \n\n    // Prints: Hello. I would like to present you: Str \n```", "```kt\n    fun printSum(a: Int, b: Int): Unit { // 1 \n        val sum = a + b \n        print(sum) \n    } \n```", "```kt\n    val p = printSum(1, 2) \n    println(p is Unit) // Prints: true \n```", "```kt\n    fun printSum(a: Int, b: Int) { \n        val sum = a + b \n        print(sum) \n    } \n```", "```kt\n    fun printSum(a: Int, b: Int) {  // 1 \n        if(a < 0 || b < 0) { \n            return                  // 2 \n        } \n        val sum = a + b \n        print(sum) \n        // 3 \n    }  \n```", "```kt\n    fun sumPositive(a: Int, b: Int): Int { \n        if(a > 0 && b > 0) { \n            return a + b \n        } \n        // Error, 1 \n    } \n```", "```kt\n    fun sumPositive(a: Int, b: Int): Int { \n        if(a >= 0 && b >= 0) { \n            return a + b \n        } \n        return 0 \n    } \n```", "```kt\n    fun printSum(vararg numbers: Int) { \n        val sum = numbers.sum() \n        print(sum) \n    } \n\n    printSum(1,2,3,4,5) // Prints: 15 \n    printSum()          // Prints: 0 \n```", "```kt\n    fun printAll(vararg texts: String) {\n\n    //Inferred type of texts is Array<String>\n        val allTexts = texts.joinToString(\",\") \n        println(\"Texts are $allTexts\") \n    } \n\n    printAll(\"A\", \"B\", \"C\") // Prints: Texts are A,B,C \n```", "```kt\nfun printAll(prefix: String, postfix: String, vararg texts: String) \n\n{ \n    val allTexts = texts.joinToString(\", \") \n    println(\"$prefix$allTexts$postfix\") \n} \n\nprintAll(\"All texts: \", \"!\") // Prints: All texts: ! \nprintAll(\"All texts: \",\"!\" , \"Hello\", \"World\")  \n\n// Prints: All texts: Hello, World! \n```", "```kt\n    fun printAll(vararg texts: Any) { \n        val allTexts = texts.joinToString(\",\") // 1 \n        println(allTexts) \n    } \n\n    // Usage \n    printAll(\"A\", 1, 'c') // Prints: A,1,c \n```", "```kt\n    val texts = arrayOf(\"B\", \"C\", \"D\") \n    printAll(*texts) // Prints: Texts are: B,C,D \n    printAll(\"A\", *texts, \"E\") // Prints: Texts are: A,B,C,D,E \n```", "```kt\n    fun square(x: Int): Int { \n        return x * x \n    } \n```", "```kt\n    fun getEmail(): String { \n        return emailView.text.toString() \n    } \n```", "```kt\n    fun square(x: Int) = x * x \n```", "```kt\nclass AddressAdapter : ItemAdapter<AddressAdapter.ViewHolder>() { \n    override fun getLayoutId() = R.layout.choose_address_view \n    override fun onCreateViewHolder(itemView: View) = ViewHolder(itemView) \n\n    // Rest of methods \n} \n```", "```kt\nfun valueFromBooking(key: String, booking: Booking?) = when(key) { \n\n    // 1 \n    \"patient.nin\" -> booking?.patient?.nin \n    \"patient.email\" -> booking?.patient?.email \n    \"patient.phone\" -> booking?.patient?.phone \n    \"comment\" -> booking?.comment \n    else -> null \n} \n```", "```kt\noverride fun onOptionsItemSelected(item: MenuItem): Boolean = when \n\n{ \n    item.itemId == android.R.id.home -> { \n        onBackPressed() \n        true \n    } \n    else -> super.onOptionsItemSelected(item) \n} \n```", "```kt\n    fun textFormatted(text: String, name: String) = text \n                      .trim() \n                      .capitalize() \n                      .replace(\"{name}\", name) \n\n    val formatted = textFormatted(\"hello, {name}\", \"Marcin\") \n    println(formatted) // Hello, Marcin \n```", "```kt\n    fun getState(state: State, n: Int): State = \n        if (n <= 0) state // 1 \n        else getState(nextState(state), n - 1) \n```", "```kt\n    fun getState(state: State, n: Int): State { \n        var state = state \n        for (i in 1..n) { \n            state = state.nextState() \n        } \n        return state \n    } \n```", "```kt\n    tailrec fun getState(state: State, n: Int): State = \n        if (n <= 0) state\n        else getState(state.nextState(), n - 1) \n```", "```kt\n    public static final State getState(@NotNull State state, int n) \n\n    { \n        while(true) { \n            if(n <= 0) { \n                return state; \n            } \n            state = state.nextState(); \n            n = n - 1; \n        } \n    } \n```", "```kt\n    // Java \n    printValue(\"abc\", null, null, \"!\"); \n```", "```kt\n    fun printValue(value: String, inBracket: Boolean = true, \n\n                   prefix: String = \"\", suffix: String = \"\") { \n        print(prefix) \n        if (inBracket) { \n            print(\"(${value})\") \n        } else { \n            print(value) \n        } \n        println(suffix) \n    } \n```", "```kt\n    printValue(\"str\", true, \"\",\"\")  // Prints: (str) \n```", "```kt\n    printValue(\"str\")  // Prints: (str) \n```", "```kt\n    printValue(\"str\", false)  // Prints: str \n```", "```kt\n    printValue(\"str\", true, true, \"!\") // Prints: (str) \n```", "```kt\n    printValue(\"str\", suffix = \"!\") // Prints: (str)! \n```", "```kt\n    printValue(\"str\", inBracket = true) // Prints: (str) \n    printValue(\"str\", prefix = \"Value is \") // Prints: Value is str \n    printValue(\"str\", prefix = \"Value is \", suffix = \"!! \") \n\n    // Prints:   Value is str!! \n```", "```kt\n    printValue(\"str\", inBracket= true, prefix = \"Value is \") \n\n    // Prints: Value is (str) \n\n    printValue(\"str\", prefix = \"Value is \", inBracket= true) \n\n    // Prints: Value is (str) \n```", "```kt\n    printValue (\"str\", true, \"\") \n    printValue (\"str\", true, prefix = \"\") \n    printValue (\"str\", inBracket = true, prefix = \"\") \n    printValue (\"str\", inBracket = true, \"\") // Error \n    printValue (\"str\", inBracket = true, prefix = \"\", \"\") // Error \n```", "```kt\n    // Test.kt \n    package com.example \n\n    fun printTwo() { \n        print(2) \n    } \n```", "```kt\n    // Test.kt \n    package com.example \n\n    fun printTwo() { \n        print(2) \n    } \n\n    // Main.kt \n    import com.example.printTwo \n\n    fun main(args: Array<String>) { \n        printTwo() \n    } \n```", "```kt\n    // Printer.kt \n    fun printTwo() { \n        print(2) \n    } \n```", "```kt\n    //Java \n    public final class PrinterKt { // 1 \n        public static void printTwo() { // 2 \n            System.out.print(2); // 3 \n        } \n    } \n```", "```kt\n    //Java file, call inside some method \n    PrinterKt.printTwo() \n```", "```kt\n    @file:JvmName(\"Printer\") \n```", "```kt\n    //Java \n    Printer.printTwo() \n```", "```kt\n    @file:JvmMultifileClass \n```", "```kt\n    // Max.kt\n\n    @file:JvmName(\"Math\") \n    @file:JvmMultifileClass \n    package com.example.math \n\n    fun max(n1: Int, n2: Int): Int = if(n1 > n2) n1 else n2 \n\n    // Min.kt \n    @file:JvmName(\"Math\") \n    @file:JvmMultifileClass \n    package com.example.math \n\n    fun min(n1: Int, n2: Int): Int = if(n1 < n2) n1 else n2 \n```", "```kt\n    Math.min(1, 2) \n    Math.max(1, 2) \n```", "```kt\n    fun printTwoThreeTimes() { \n        fun printThree() { // 1 \n            print(3) \n        } \n        printThree() // 2 \n        printThree() // 2 \n    } \n```", "```kt\n    fun loadUsers(ids: List<Int>) { \n        var downloaded: List<User> = emptyList() \n\n        fun printLog(comment: String) { \n            Log.i(\"loadUsers (with ids $ids): $comment\\nDownloaded: \n\n                                              $downloaded\") // 1 \n        } \n        for(id in ids) { \n            printLog(\"Start downloading for id $id\")  \n            downloaded += loadUser(id) \n            printLog(\"Finished downloading for id $id\") \n        } \n    } \n```", "```kt\nfun loadUsers(ids: List<Int>) { \n    var downloaded: List<User> = emptyList() \n\n    for(id in ids) { \n        printLog(\"Start downloading for id $id\", downloaded, ids)   \n        downloaded += loadUser(id) \n        printLog(\"Finished downloading for \n\n                  id $id\", downloaded, ids)) \n    } \n} \n\nfun printLog(state: String, downloaded: List<User>, ids: List<Int>) \n\n{ \n    Log.i(\"loadUsers (with ids $ids): \n\n    $state\\nDownloaded: downloaded\") \n} \n```", "```kt\n    fun makeStudentList(): List<Student> { \n        var students: List<Student> = emptyList() \n        fun addStudent(name: String, state: Student.State = \n\n                       Student.State.New) { \n            students += Student(name, state, courses = emptyList()) \n        } \n        // ... \n        addStudent(\"Adam Smith\") \n        addStudent(\"Donald Duck\") \n        // ... \n        return students \n    } \n```", "```kt\n    fun fail(): Nothing = throw Error() \n```", "```kt\nfun processElement(element: Element) { \n    fun throwError(message: String): Nothing \n    = throw ProcessingError(\"Error in element $element: $message\") \n\n    // ... \n    if (element.kind != ElementKind.METHOD) \n\n        throwError(\"Not a method\") \n    // ... \n} \n```", "```kt\n    fun getFirstCharOrFail(str: String): Char \n        = if(str.isNotEmpty()) str[0] else fail() \n\n    val name: String = getName() ?: fail() \n\n    val enclosingElement = element.enclosingElement ?: throwError (\"Lack of enclosing element\") \n```"]