["```\n$ docker container run -d --name mysql --read-only -v /var/lib/mysql -v /tmp -v /var/run/mysqld -e MYSQL_ROOT_PASSWORD=password mysql\n```", "```\n$ docker container exec mysql touch /trying_to_write_a_file\n```", "```\ntouch: cannot touch '/trying_to_write_a_file': Read-only file system\n```", "```\n$ docker container run -d -v /local/path/to/html/:/var/www/html/:ro nginx\n```", "```\n$ docker container diff mysql\n```", "```\n$ docker container stop mysql\n$ docker container rm mysql\n$ docker volume prune\n```", "```\n$ docker container run -d --name mysql -e MYSQL_ROOT_PASSWORD=password mysql\n$ docker container exec mysql touch /trying_to_write_a_file\n$ docker container diff mysql\n```", "```\nA /trying_to_write_a_file\nC /run\nC /run/mysqld\nA /run/mysqld/mysqld.pid\nA /run/mysqld/mysqld.sock\nA /run/mysqld/mysqld.sock.lock\nA /run/mysqld/mysqlx.sock\nA /run/mysqld/mysqlx.sock.lock\n```", "```\n$ docker run -it --net host --pid host --cap-add audit_control \\\n -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n -v /var/lib:/var/lib \\\n -v /var/run/docker.sock:/var/run/docker.sock \\\n -v /etc:/etc --label docker_bench_security \\\n docker/docker-bench-security\n```", "```\n$ DOTOKEN=0cb54091fecfe743920d0e6d28a29fe325b9fc3f2f6fccba80ef4b26d41c7224\n$ docker-machine create \\\n --driver digitalocean \\\n --digitalocean-access-token $DOTOKEN \\\n docker-digitalocean\n```", "```\n$ docker container run -d --name root-nginx -v /:/mnt nginx\n$ docker container run -d --name priv-nginx --privileged=true nginx\n```", "```\nFROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y openssh-server\nRUN mkdir /var/run/sshd\nRUN echo 'root:screencast' | chpasswd\nRUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```", "```\n$ docker image build --tag sshd .\n$ docker container run -d -P --name sshd sshd\n```", "```\n$ docker run -it --net host --pid host --cap-add audit_control \\\n -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n -v /var/lib:/var/lib \\\n -v /var/run/docker.sock:/var/run/docker.sock \\\n -v /usr/lib/systemd:/usr/lib/systemd \\\n -v /etc:/etc --label docker_bench_security \\\n docker/docker-bench-security\n```", "```\n[WARN] 1.1 - Ensure a separate partition for containers has been created\n```", "```\n[WARN] 1.5 - Ensure auditing is configured for the Docker daemon\n[WARN] 1.6 - Ensure auditing is configured for Docker files and directories - /var/lib/docker\n[WARN] 1.7 - Ensure auditing is configured for Docker files and directories - /etc/docker\n[WARN] 1.10 - Ensure auditing is configured for Docker files and directories - /etc/default/docker\n```", "```\n[WARN] 2.1 - Ensure network traffic is restricted between containers on the default bridge\n```", "```\n[WARN] 2.5 - Ensure aufs storage driver is not used\n```", "```\n[WARN] 2.8 - Enable user namespace support\n```", "```\n[WARN] 2.11 - Ensure that authorization for Docker client commands is enabled\n```", "```\n[WARN] 2.12 - Ensure centralized and remote logging is configured\n```", "```\n[WARN] 2.14 - Ensure live restore is Enabled\n```", "```\n[WARN] 2.15 - Ensure Userland Proxy is Disabled\n```", "```\n[WARN] 2.18 - Ensure containers are restricted from acquiring new privileges\n```", "```\n[WARN] 4.1 - Ensure a user for the container has been created\n[WARN]     * Running as root: sshd\n[WARN]     * Running as root: priv-nginx\n[WARN]     * Running as root: root-nginx\n```", "```\n[WARN] 4.5 - Ensure Content trust for Docker is Enabled\n```", "```\n[WARN] 4.6 - Ensure HEALTHCHECK instructions have been added to the container image\n[WARN]     * No Healthcheck found: [sshd:latest]\n[WARN]     * No Healthcheck found: [nginx:latest]\n[WARN]     * No Healthcheck found: [ubuntu:16.04]\n```", "```\n[WARN] 5.2 - Ensure SELinux security options are set, if applicable\n[WARN]     * No SecurityOptions Found: sshd\n[WARN]     * No SecurityOptions Found: root-nginx\n```", "```\n[PASS] 5.1  - Ensure AppArmor Profile is Enabled\n```", "```\n[WARN] 5.4 - Ensure privileged containers are not used\n[WARN]     * Container running in Privileged mode: priv-nginx\n```", "```\n[WARN] 5.6 - Ensure ssh is not run within containers\n[WARN]     * Container running sshd: sshd\n```", "```\n[WARN] 5.10 - Ensure memory usage for container is limited\n[WARN]      * Container running without memory restrictions: sshd\n[WARN]      * Container running without memory restrictions: priv-nginx\n[WARN]      * Container running without memory restrictions: root-nginx [WARN] 5.11 - Ensure CPU priority is set appropriately on the container [WARN]      * Container running without CPU restrictions: sshd\n[WARN]      * Container running without CPU restrictions: priv-nginx\n[WARN]      * Container running without CPU restrictions: root-nginx\n```", "```\n[WARN] 5.12 - Ensure the container's root filesystem is mounted as read only\n[WARN]      * Container running with root FS mounted R/W: sshd\n[WARN]      * Container running with root FS mounted R/W: priv-nginx\n[WARN]      * Container running with root FS mounted R/W: root-nginx\n```", "```\n[WARN] 5.13 - Ensure incoming container traffic is binded to a specific host interface\n[WARN] * Port being bound to wildcard IP: 0.0.0.0 in sshd\n```", "```\n[WARN] 5.14 - Ensure 'on-failure' container restart policy is set to '5'\n[WARN]      * MaximumRetryCount is not set to 5: sshd\n[WARN]      * MaximumRetryCount is not set to 5: priv-nginx\n[WARN]      * MaximumRetryCount is not set to 5: root-nginx\n```", "```\n[WARN] 5.25 - Ensure the container is restricted from acquiring additional privileges\n[WARN]      * Privileges not restricted: sshd\n[WARN]      * Privileges not restricted: priv-nginx\n[WARN]      * Privileges not restricted: root-nginx\n```", "```\n[WARN] 5.26 - Ensure container health is checked at runtime\n[WARN]      * Health check not set: sshd\n[WARN]      * Health check not set: priv-nginx\n[WARN]      * Health check not set: root-nginx\n```", "```\n[WARN] 5.28 - Ensure PIDs cgroup limit is used\n[WARN]      * PIDs limit not set: sshd\n[WARN]      * PIDs limit not set: priv-nginx\n[WARN]      * PIDs limit not set: root-nginx\n```", "```\n[INFO] 6.1 - Perform regular security audits of your host system and containers\n[INFO] 6.2 - Monitor Docker containers usage, performance and metering\n[INFO] 6.3 - Backup container data\n[INFO] 6.4 - Avoid image sprawl\n[INFO]     * There are currently: 4 images\n[INFO] 6.5 - Avoid container sprawl\n[INFO]     * There are currently a total of 8 containers, with 4 of them currently running\n```", "```\n[PASS] 7.1 - Ensure swarm mode is not Enabled, if not needed\n[PASS] 7.2 - Ensure the minimum number of manager nodes have been created in a swarm (Swarm mode not enabled)\n[PASS] 7.3 - Ensure swarm services are binded to a specific host interface (Swarm mode not enabled)\n[PASS] 7.5 - Ensure Docker's secret management commands are used for managing secrets in a Swarm cluster (Swarm mode not enabled)\n[PASS] 7.6 - Ensure swarm manager is run in auto-lock mode (Swarm mode not enabled)\n[PASS] 7.7 - Ensure swarm manager auto-lock key is rotated periodically (Swarm mode not enabled)\n[PASS] 7.8 - Ensure node certificates are rotated as appropriate (Swarm mode not enabled)\n[PASS] 7.9 - Ensure CA certificates are rotated as appropriate (Swarm mode not enabled)\n[PASS] 7.10 - Ensure management plane traffic has been separated from data plane traffic (Swarm mode not enabled)\n```", "```\n$ mkdir anchore anchore/config\n$ cd anchore\n$ curl https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/docker-compose.yaml -o docker-compose.yaml\n$ curl https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/config.yaml -o config/config.yaml\n```", "```\n$ docker-compose pull\n$ docker-compose up -d\n```", "```\n$ sudo easy_install pip\n$ pip install --user anchorecli\n$ export PATH=${PATH}:${HOME}/Library/Python/2.7/bin\n```", "```\n$ sudo apt-get update\n$ sudo apt-get install python-pip\n$ sudo pip install anchorecli\n```", "```\n$ anchore-cli --u admin --p foobar system status\n```", "```\n$ anchore-cli --u admin --p foobar system feeds list\n```", "```\n$ anchore-cli --u admin --p foobar image add docker.io/russmckendrick/moby-counter:old\n```", "```\n$ anchore-cli --u admin --p foobar image list\n```", "```\n$ anchore-cli --u admin --p foobar image get docker.io/russmckendrick/moby-counter:old\n```", "```\n$ anchore-cli --u admin --p foobar image vuln docker.io/russmckendrick/moby-counter:old os\n```", "```\n$ docker-compose stop\n$ docker-compose rm\n```"]