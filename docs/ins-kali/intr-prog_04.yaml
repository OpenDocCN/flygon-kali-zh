- en: Your Development Environment Setup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的开发环境设置
- en: By now, you probably have a pretty good idea of how to compile and execute a
    Java program on your computer. Now, it is time to learn how to write a program.
    This chapter is the last step before you can do it. Because you need to set up
    your development environment first, this chapter is going to explain what a development
    environment is, and why you need it. Then, it will guide you through configuration
    and tuning, including the setting of a classpath. On the way, an overview of popular
    editors and specific advice on IntelliJ IDEA will be provided.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能已经对如何在计算机上编译和执行Java程序有了相当好的了解。现在，是时候学习如何编写程序了。在你能够做到这一点之前，这一章是最后一步。因为你需要先设置好你的开发环境，所以这一章将解释什么是开发环境，以及为什么你需要它。然后，它将引导你进行配置和调整，包括设置类路径。在此过程中，我们将提供流行编辑器的概述和IntelliJ
    IDEA的具体建议。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: What is a development environment?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是开发环境？
- en: Setting the classpath
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置类路径
- en: IDEs overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE概述
- en: How to install and configure IntelliJ IDEA
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装和配置IntelliJ IDEA
- en: Exercise – Installing NetBeans
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习 - 安装NetBeans
- en: What is the development environment?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是开发环境？
- en: The development environment is a set of tools installed on your computer that
    allows you to write Java programs (applications) and tests for them, to share
    the source code with your colleagues, and to compile the source and run it. We
    will discuss each of the development tools and stages of the development process
    in this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境是安装在你的计算机上的一组工具，它允许你编写Java程序（应用程序）和测试它们，与同事分享源代码，并对源代码进行编译和运行。我们将在本章讨论每个开发工具和开发过程的各个阶段。
- en: Java editor is your main tool
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java编辑器是你的主要工具
- en: A Java-supporting editor is the center of a development environment. In principle,
    you can use any text editor to write a program and store it in a `.java` file.
    Unfortunately, a regular text editor does not warn you about Java language syntax
    errors. That is why a specialized editor that supports Java is a better choice
    for writing Java programs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个支持Java的编辑器是开发环境的中心。原则上，你可以使用任何文本编辑器来编写程序并将其存储在`.java`文件中。不幸的是，普通文本编辑器不会警告你有关Java语言语法错误。这就是为什么支持Java的专门编辑器是编写Java程序的更好选择。
- en: A modern Java language editor is not just a writing tool. It also has the ability
    to integrate with the JVM installed on the same computer, and use it to compile
    the application, execute it, and much more. That is why it is called not just
    an editor, but an IDE. It can integrate with other development tools, too, so
    you do not need to exit the IDE in order to store the source code on the remote
    server of a source control system, for example.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Java语言编辑器不仅仅是一个写作工具。它还具有与同一台计算机上安装的JVM集成的能力，并使用它来编译应用程序，执行它，等等。这就是为什么它不仅仅被称为编辑器，而是IDE。它还可以与其他开发工具集成，因此你不需要退出IDE来将源代码存储在远程服务器上，例如源代码控制系统。
- en: Another huge advantage of Java IDEs is that they can remind you about language
    possibilities and help you to find a better way to implement the required functionality.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java IDE的另一个巨大优势是它可以提醒你有关语言的可能性，并帮助你找到实现所需功能的更好方法。
- en: IDE also supports code refactoring. This term means a code change for better
    readability, reusability, or maintainability, without affecting its functionality.
    For example, if there is a block of code used in several methods, one can extract
    it in a separate method and use it everywhere, instead of duplicating code. Another
    example is when the name of a class, method, or variable is changed to a more
    descriptive one. Using a regular editor would require you to find all of the places
    where the old name is used manually. An IDE does it for you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: IDE还支持代码重构。这个术语意味着改变代码以获得更好的可读性、可重用性或可维护性，而不影响其功能。例如，如果有一段代码在多个方法中使用，可以将其提取到一个单独的方法中，并在所有地方使用它，而不是复制代码。另一个例子是当类、方法或变量的名称更改为更具描述性的名称。使用普通编辑器需要你手动查找旧名称使用的所有地方。而IDE会为你完成这项工作。
- en: Another helpful feature of an IDE is the ability to generate the boilerplate
    code of a class, and standard methods, such as a constructor, getters, setters,
    or the `toString()` method. It increases programmer productivity by keeping their
    focus on what is important.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: IDE的另一个有用功能是能够生成类的样板代码和标准方法，比如构造函数、getter、setter或`toString()`方法。它通过让程序员专注于重要的事情来提高程序员的生产力。
- en: So, make sure that you are comfortable with the IDE of your choice. As a programmer,
    you're going to work with your IDE editor for most of your working hours.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请确保你对所选择的IDE感到舒适。作为程序员，你将在大部分工作时间内与你的IDE编辑器一起工作。
- en: Source code compilation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码编译
- en: An IDE uses the `javac` compiler installed on your computer to find all Java-language
    syntax errors. Caught early, such errors are much easier to correct than if they
    are found after the application is already running in the production environment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集成开发环境（IDE）使用计算机上安装的`javac`编译器来查找所有Java语言的语法错误。早期发现这些错误比在应用程序已经在生产环境中运行后发现要容易得多。
- en: Not all programming languages can be supported this way. It is possible for
    Java, because Java is a strictly-typed language, which means that it needs to
    declare a type for every variable before one can use it. You saw `int` and `String` types
    in the examples in [Chapter 2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml), *Java
    Language Basics*. After that, if you try to do something that is not allowed with
    the variable for its declared type, or try to assign another type to it, the IDE
    will warn you, and you can revisit it or insist on the way you have written the
    code (when you know what you are doing).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有编程语言都可以通过这种方式支持。Java可以，因为Java是一种严格类型的语言，这意味着在使用变量之前需要为每个变量声明类型。在[第2章](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml)中的示例中，您看到了`int`和`String`类型。之后，如果尝试对变量进行不允许的操作，或者尝试为其分配另一种类型，IDE将警告您，您可以重新查看或坚持您编写代码的方式（当您知道自己在做什么时）。
- en: Despite the similar name, JavaScript, by contrast, is a dynamically-typed language,
    which allows for declaring a variable without defining its type. That's why a
    Java novice can develop a much more complex and fully functional application from
    the very beginning, while a complex JavaScript code remains a challenge, even
    for an experienced programmer, and still does not reach the level of complexity
    that Java code can.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名称相似，JavaScript与之相反，是一种动态类型的语言，允许在不定义其类型的情况下声明变量。这就是为什么Java新手可以从一开始就开发一个更复杂和完全功能的应用程序，而复杂的JavaScript代码即使对于经验丰富的程序员来说也仍然是一个挑战，并且仍然无法达到Java代码的复杂程度。
- en: By the way, one of the reasons for Java's popularity, although it was introduced
    later than C++, was—paradoxically—the limitation it imposed on object type manipulation.
    In Java, the risk of making difficult-to-trace runtime errors is much smaller
    than in C++. The runtime errors are those code issues that cannot be found by
    the IDE at compile-time, based on the language syntax only.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，尽管Java是在C++之后引入的，但它之所以受欢迎，却是因为它对对象类型操作施加的限制。在Java中，与C++相比，难以追踪的运行时错误的风险要小得多。运行时错误是那些不能仅根据语言语法在编译时由IDE找到的代码问题。
- en: Code sharing
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码共享
- en: IDE integrates with code sharing systems, too. Collaboration on the same code
    requires placing the code in a common shared location, called a **source code
    repository** or version control repository, where it can be accessed by all the
    team members. One of the most well-known shared repositories is a web-based version-control
    repository—GitHub ([https://github.com/](https://github.com/)). It is based on
    the Git version-control system ([https://en.wikipedia.org/wiki/Git](https://en.wikipedia.org/wiki/Git)). Other
    popular source control systems include CVS, ClearCase, Subversion, and Mercurial,
    to name a few.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: IDE集成了代码共享系统。在相同代码上的协作需要将代码放置在一个称为**源代码存储库**或版本控制存储库的共享位置，所有团队成员都可以访问。最著名的共享存储库之一是基于Git版本控制系统的基于Web的版本控制存储库GitHub（[https://github.com/](https://github.com/)）。其他流行的源代码控制系统包括CVS、ClearCase、Subversion和Mercurial等。
- en: An overview and guidance on such systems are outside of the scope of this book.
    We mention because they are being an important part of the development environment.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些系统的概述和指导超出了本书的范围。我们提到它们是因为它们是开发环境的重要组成部分。
- en: Code and test execution
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码和测试执行
- en: Using an IDE, you can even execute an application, or its tests. To accomplish
    that, IDE first compiles the code using the `javac` tool, then executes it using
    JVM (the `java` tool).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IDE，甚至可以执行应用程序或其测试。为了实现这一点，IDE首先使用`javac`工具编译代码，然后使用JVM（`java`工具）执行它。
- en: An IDE also allows us to run an application in a debug mode, when the execution
    can be paused at any statement. It allows the programmer to examine the current
    values of the variables, which is often the most efficient way to find dreaded
    runtime errors. Such errors usually are caused by unexpected intermediate values
    assigned to a variable during execution. The debug mode allows us to walk along
    the offensive execution path slowly, and see the conditions that cause the problem.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: IDE还允许我们以调试模式运行应用程序，当执行可以在任何语句处暂停。这允许程序员检查变量的当前值，这通常是查找可怕的运行时错误的最有效方式。这些错误通常是由执行过程中分配给变量的意外中间值引起的。调试模式允许我们缓慢地沿着有问题的执行路径走，并查看导致问题的条件。
- en: One of the most helpful aspects of IDE functionality is its ability to maintain
    the classpath or manage dependencies, which we are going to discuss in the next
    section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: IDE功能中最有帮助的一个方面是它能够维护类路径或管理依赖关系，我们将在下一节中讨论。
- en: Setting the classpath
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置类路径
- en: In order for `javac` to compile the code and for `java` to execute it, they
    need to know the location of the files that compose the application. In [Chapter
    2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml), *Java Language Basics*, while
    explaining the format of the `javac` and `java` commands, we described how the `-classpath` option
    allows you to list all of the classes and third-party libraries your application
    is using (or, in other words, depends on). Now, we will talk about setting this
    list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`javac`编译代码并使`java`执行它，它们需要知道组成应用程序的文件的位置。在[第2章](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml)中，*Java语言基础*，在解释`javac`和`java`命令的格式时，我们描述了`-classpath`选项允许您列出应用程序使用的所有类和第三方库（或者说依赖的）的方式。现在，我们将讨论如何设置这个列表。
- en: Manual setting
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动设置
- en: 'There are two ways to set it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种设置方式：
- en: Via the `-classpath` command-line option
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`-classpath`命令行选项
- en: Via the `CLASSPATH` environment variable
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`CLASSPATH`环境变量
- en: 'We will describe how to use the `-classpath` option first. It has the same
    format in the `javac` and `java` commands:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先描述如何使用`-classpath`选项。它在`javac`和`java`命令中具有相同的格式：
- en: '```java'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: -classpath dir1;dir2\*;dir3\alibrary.jar  (for Windows)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: -classpath dir1;dir2\*;dir3\alibrary.jar  (适用于Windows)
- en: javac -classpath dir1:dir2/*:dir3/alibrary.jar   (for Lunix)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: javac -classpath dir1:dir2/*:dir3/alibrary.jar   (适用于Lunix)
- en: '```'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the preceding example, `dir1`, `dir2`, and `dir3` are folders that contain
    the files of the application and the third-party `.jar` files the application
    depends on. Each can include a path to the directory, too. The path can be absolute
    or relative to the current location where you run this command.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`dir1`、`dir2`和`dir3`是包含应用程序文件和应用程序依赖的第三方`.jar`文件的文件夹。每个文件夹也可以包括对目录的路径。路径可以是绝对路径，也可以是相对于运行此命令的当前位置的路径。
- en: If a folder does not contain `.jar` files (it has only `.class` files, for example),
    it is enough to have only the folder name listed. Both tools—`javac` and `java`—will
    look inside the folder when searching for a particular file. A `dir1` folder provides
    such an example.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文件夹不包含`.jar`文件（例如只有`.class`文件），那么只需要列出文件夹名称即可。两个工具`javac`和`java`在搜索特定文件时都会查看文件夹内的内容。`dir1`文件夹提供了这样一个例子。
- en: 'If a folder contains `.jar` files (with `.class` files inside), then you can
    do one of two things:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文件夹包含`.jar`文件（其中包含`.class`文件），则可以执行以下两种操作之一：
- en: Specify a wildcard, `*`, so that all the `.jar` files in that folder will be
    searched for a requested `.class` file (the preceding `dir2` folder is such an
    example)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定通配符`*`，以便在该文件夹中搜索所有`.jar`文件以查找所请求的`.class`文件（前面的`dir2`文件夹就是这样一个例子）
- en: List each `.jar` file separately (the `alibrary.jar` file stored in the `dir3` folder
    is such an example)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单独列出每个`.jar`文件（存储在`dir3`文件夹中的`alibrary.jar`文件就是一个例子）
- en: The `CLASSPATH` environment variable serves the same purpose as the `-classpath` command
    option. The format of the list of file locations, specified as a value of the `CLASSPATH`
    variable, is the same as the list set with the `-classpath` option described earlier.  If
    you use `CLASSPATH`, you can run the `javac` and `java` commands without the `-classpath` option. If
    you use both, then the value of `CLASSPATH` is ignored.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLASSPATH`环境变量与`-classpath`命令选项具有相同的目的。作为`CLASSPATH`变量的值指定的文件位置列表的格式与前面描述的`-classpath`选项设置的列表相同。如果使用`CLASSPATH`，则可以在不使用`-classpath`选项的情况下运行`javac`和`java`命令。如果两者都使用，则`CLASSPATH`的值将被忽略。'
- en: To see the current value of the `CLASSPATH` variable, open a Command Prompt
    or Terminal and type `echo %CLASSPATH%` for Windows OS or `echo $CLASSPATH` for
    Linux. Chances are you will get back nothing, which means that the `CLASSPATH` variable
    is not used on your computer. You can assign a value to it using the `set` command.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`CLASSPATH`变量的当前值，请打开命令提示符或终端，然后在Windows OS中键入`echo %CLASSPATH%`，在Linux中键入`echo
    $CLASSPATH`。很可能你什么都不会得到，这意味着`CLASSPATH`变量在您的计算机上没有使用。您可以使用`set`命令为其分配一个值。
- en: 'It is possible to include the `CLASSPATH` value with the `-classpath` option:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`-classpath`选项包括`CLASSPATH`值：
- en: '```java'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: -classpath %CLASSPATH%;dir1;dir2\*;dir3\alibrary.jar (for Windows)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: -classpath %CLASSPATH%;dir1;dir2\*;dir3\alibrary.jar（适用于Windows）
- en: -classpath $CLASSPATH:dir1:dir2/*:dir3/alibrary.jar (for Lunix)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: -classpath $CLASSPATH:dir1:dir2/*:dir3/alibrary.jar（适用于Lunix）
- en: '```'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Notice that the `javac` and `java` tools are part of JDK, so they know where
    to find the Java standard libraries coming with JDK, and there is no need to specify
    the standard libraries' `.jar` files on the classpath.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`javac`和`java`工具是JDK的一部分，因此它们知道在JDK中附带的Java标准库的位置，并且无需在类路径上指定标准库的`.jar`文件。
- en: An Oracle tutorial for how to set a classpath is provided at  [https://docs.oracle.com/javase/tutorial/essential/environment/paths.html](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle提供了如何设置类路径的教程，网址为[https://docs.oracle.com/javase/tutorial/essential/environment/paths.html](https://docs.oracle.com/javase/tutorial/essential/environment/paths.html)。
- en: Searching on the classpath
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在类路径上搜索
- en: Whether `-classpath` or `CLASSPATH` is used, the classpath value presents the
    list of `.class` and `.jar` files. The `javac` and `java` tools always search
    the list from left to right. If the same `.class` file is listed several times
    (inside several folders or `.jar` files, for example), then only its first copy
    will be found. If several versions of the same library are included in the classpath,
    it may cause a problem. For example, a newer version of a library might never
    be found if it is listed in the classpath after the older version.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用`-classpath`还是`CLASSPATH`，类路径值都表示`.class`和`.jar`文件的列表。`javac`和`java`工具总是从左到右搜索列表。如果同一个`.class`文件被列在多个位置（例如在多个文件夹或`.jar`文件中），那么只会找到它的第一个副本。如果类路径中包含同一库的多个版本，可能会导致问题。例如，如果在旧版本之后列出了库的新版本，则可能永远找不到库的新版本。
- en: Also, the libraries themselves can depend on other `.jar` files and their particular
    versions. Two different libraries may require the same `.jar` file, but of different
    versions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，库本身可能依赖于其他`.jar`文件及其特定版本。两个不同的库可能需要相同的`.jar`文件，但版本不同。
- en: As you can see, with many files listed on the classpath, their management can
    quickly become a full-time job.  The good news is that you probably don't need
    to worry about it, because IDE will set the classpath for you.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，当类路径上列出了许多文件时，它们的管理可能很快就会成为一项全职工作。好消息是，您可能不需要担心这个问题，因为IDE会为您设置类路径。
- en: IDE sets the classpath automatically
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE会自动设置类路径
- en: As we already mentioned, the `javac` and `java` tools know where to find the
    standard libraries that come with the JDK installation. If your code uses other
    libraries, you need to tell IDE which libraries you need, so IDE can find them
    and set the classpath.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，`javac`和`java`工具知道在JDK安装中附带的标准库的位置。如果您的代码使用其他库，您需要告诉IDE您需要哪些库，以便IDE可以找到它们并设置类路径。
- en: To accomplish that, IDE uses a dependency-managing tool. The most popular dependency-managing
    tools today are Maven and Gradle. Since Maven has been around longer than Gradle,
    all major IDEs have this tool, either built-in or integrated via a plug-in. A
    plug-in is a piece of software that can be added to an application (IDE, in this
    case) to extend its functionality.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，IDE使用了一个依赖管理工具。如今最流行的依赖管理工具是Maven和Gradle。由于Maven的历史比Gradle长，所有主要的IDE都有这个工具，无论是内置的还是通过插件集成的。插件是可以添加到应用程序（在这种情况下是IDE）中以扩展其功能的软件。
- en: Maven has an extensive online repository that stores practically all existing
    libraries and frameworks.  To tell an IDE with a built-in Maven capability which
    third-party libraries your application needs, you have to identify them in the
    file called `pom.xml`. IDE reads what you need from the `pom.xml` file and downloads
    the required libraries from the Maven repository to your computer. Then, IDE can
    list them on the classpath while executing the `javac` or `java` command. We will
    show you how to write `pom.xml` content in [Chapter 4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml), *Your
    First Java Project*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Maven有一个广泛的在线存储库，存储了几乎所有现有的库和框架。要告诉具有内置Maven功能的IDE您的应用程序需要哪些第三方库，您必须在名为`pom.xml`的文件中标识它们。IDE从`pom.xml`文件中读取您需要的内容，并从Maven存储库下载所需的库到您的计算机。然后，IDE可以在执行`javac`或`java`命令时将它们列在类路径上。我们将向您展示如何在[第4章](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml)中编写`pom.xml`内容，*您的第一个Java项目*。
- en: Now is the time to choose your IDE, install it, and configure it. In the next
    section, we will describe the most popular IDEs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是选择你的IDE，安装它并配置它的时候了。在下一节中，我们将描述最流行的IDE。
- en: There are many IDEs out there
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有许多IDE
- en: There are many IDEs available that you can use free of charge: NetBeans, Eclipse,
    IntelliJ IDEA, BlueJ, DrJava, JDeveloper, JCreator, jEdit, JSource, jCRASP, and
    jEdit, to name a few. Each of them has followers who are convinced that their
    choice is the best, so we are not going to argue. It is a matter of preference,
    after all. We will concentrate on the three most popular ones—NetBeans, Eclipse,
    and IntelliJ IDEA. We will use the IntelliJ IDEA free Community Edition for our
    demonstrations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可免费使用的IDE：NetBeans、Eclipse、IntelliJ IDEA、BlueJ、DrJava、JDeveloper、JCreator、jEdit、JSource、jCRASP和jEdit等。每个都有一些追随者，他们坚信自己的选择是最好的，所以我们不打算争论。毕竟这是一个偏好问题。我们将集中在三个最流行的IDE上
    - NetBeans、Eclipse和IntelliJ IDEA。我们将使用IntelliJ IDEA免费的Community Edition进行演示。
- en: We recommend reading the documentation about these and other IDEs, and even
    trying them out, before making your final choice. For your initial research, you
    can use the Wikipedia article at [https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java](https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java),
    which has a table comparing many modern IDEs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在最终选择之前阅读有关这些和其他IDE的文档，甚至尝试它们。对于您的初步研究，您可以使用维基百科文章[https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java](https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java)，其中有一张表比较了许多现代IDE。
- en: NetBeans
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetBeans
- en: NetBeans was first created in 1996 as a Java IDE student project at Charles
    University in Prague. In 1997, a company was created around the project, and produced
    commercial versions of the NetBeans IDE. In 1999, it was acquired by Sun Microsystems.
    In 2010, after the acquisition of Sun Microsystems by Oracle, NetBeans became
    part of the open source Java products produced by Oracle, with a contribution
    from a large community of developers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans最初是在1996年作为布拉格查理大学的Java IDE学生项目创建的。1997年，围绕该项目成立了一家公司，并生产了NetBeans IDE的商业版本。1999年，它被Sun
    Microsystems收购。2010年，在Oracle收购Sun Microsystems后，NetBeans成为由Oracle生产的开源Java产品的一部分，并得到了大量开发人员的贡献。
- en: NetBeans IDE became the official IDE for Java 8 and could be downloaded together
    with JDK 8 in the same bundle; see [http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans IDE成为Java 8的官方IDE，并可以与JDK 8一起下载在同一个捆绑包中；请参阅[http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html)。
- en: In 2016, Oracle decided to donate the NetBeans project to the Apache Software
    Foundation, stating that it was *opening up the NetBeans governance model to give
    NetBeans constituents a greater voice in the project's direction and future success
    through the upcoming release of Java 9 and NetBeans 9 and beyond*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年，Oracle决定将NetBeans项目捐赠给Apache软件基金会，并表示*通过即将发布的Java 9和NetBeans 9以及未来的成功，开放NetBeans治理模型，使NetBeans成员在项目的方向和未来成功中发挥更大的作用*。
- en: There are NetBeans IDE versions for Windows, Linux, Mac, and Oracle Solaris.
    It enables coding, compiling, analysis, running, testing, profiling, debugging,
    and deployment of all Java application types – Java SE, JavaFX, Java ME, web,
    EJB, and mobile applications. Besides Java, it supports multiple programming languages
    in particular, C/C++, XML, HTML5, PHP, Groovy, Javadoc, JavaScript, and JSP. Because
    the editor is extensible, it is possible to plug in support for many other languages.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans IDE有Windows、Linux、Mac和Oracle Solaris版本。它可以编码、编译、分析、运行、测试、分析、调试和部署所有Java应用程序类型
    - Java SE、JavaFX、Java ME、Web、EJB和移动应用程序。除了Java，它还支持多种编程语言，特别是C/C++、XML、HTML5、PHP、Groovy、Javadoc、JavaScript和JSP。由于编辑器是可扩展的，可以插入对许多其他语言的支持。
- en: It also includes an Ant-based project system, support for Maven, refactoring,
    version control (supports CVS, Subversion, Git, Mercurial, and ClearCase), and
    can be used for working with cloud applications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包括基于Ant的项目系统、对Maven的支持、重构、版本控制（支持CVS、Subversion、Git、Mercurial和ClearCase），并可用于处理云应用程序。
- en: Eclipse
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse
- en: Eclipse is the most widely used Java IDE. It has an extensive plug-in system
    that grows all the time, so it is not possible to list all its features. Its primary
    use is for developing Java applications, but plugins also allow us to write code
    in Ada, ABAP, C, C++, C#, COBOL, D, Fortran, Haskell, JavaScript, Julia, Lasso,
    Lua, NATURAL, Perl, PHP, Prolog, Python, R, Ruby, Rust, Scala, Clojure, Groovy,
    Scheme, and Erlang. Development environments include the Eclipse **Java development
    tools** (**JDT**) for Java and Scala, Eclipse CDT for C/C++, and Eclipse PDT for
    PHP, among others.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse是最广泛使用的Java IDE。它有一个不断增长的广泛插件系统，因此不可能列出其所有功能。它的主要用途是开发Java应用程序，但插件也允许我们用Ada、ABAP、C、C++、C#、COBOL、D、Fortran、Haskell、JavaScript、Julia、Lasso、Lua、NATURAL、Perl、PHP、Prolog、Python、R、Ruby、Rust、Scala、Clojure、Groovy、Scheme和Erlang编写代码。开发环境包括Eclipse
    **Java开发工具**（**JDT**）用于Java和Scala，Eclipse CDT用于C/C++，Eclipse PDT用于PHP等。
- en: 'The name *Eclipse* was invented in reference to the competition with Microsoft
    Visual Studio, which Eclipse was to eclipse. The subsequent versions were named
    after the moons of Jupiter—Callisto, Europa, and Ganymede. A version named after
    Galileo—the discoverer of those moons—followed. Then, two sun-themed names—Helios
    of Greek mythology, and Indigo, one of the seven colors of the rainbow (which
    is produced by the sun)—were used. The version after that, Juno, has a triple
    meaning: a Roman mythological figure, an asteroid, and a spacecraft to Jupiter.
    Kepler, Luna, and Mars continued the astronomy theme, and then Neon and Oxygen
    came from the names of chemical elements. Photon represents a return to sun-themed
    names.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*Eclipse*这个名字是在与微软Visual Studio的竞争中创造出来的，Eclipse的目标是超越Visual Studio。随后的版本以木星的卫星——卡利斯托、欧罗巴和迦尼米德的名字命名。之后，以发现这些卫星的伽利略的名字命名了一个版本。然后，使用了两个与太阳有关的名字——希腊神话中的太阳神赫利俄斯和彩虹的七种颜色之一——靛蓝。之后的版本，朱诺，有三重含义：罗马神话中的人物、一个小行星和前往木星的宇宙飞船。开普勒、月球和火星延续了天文主题，然后是来自化学元素名称的氖和氧。光子代表了对太阳主题名称的回归。'
- en: Eclipse also enables coding, compiling, analysis, running, testing, profiling,
    debugging, and deployment of all Java application types and all major platforms.
    It also supports Maven, refactoring, major version control systems, and cloud
    applications.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse还可以编码、编译、分析、运行、测试、分析、调试和部署所有Java应用程序类型和所有主要平台。它还支持Maven、重构、主要版本控制系统和云应用程序。
- en: 'The huge variety of available plugins may be a challenge for a novice, and,
    occasionally, even to a more experienced user, for two reasons:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 可用插件的种类繁多可能对新手构成挑战，甚至对更有经验的用户也是如此，原因有两个：
- en: There is usually more than one way to add the same functionality to the IDE,
    by combining similar plug-ins of different authors
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常有多种方法可以向IDE添加相同的功能，通过组合不同作者的类似插件
- en: Some plug-ins are incompatible, which may create a difficult-to-solve problem
    and force us to rebuild the IDE installation again, especially when a new release
    comes out
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些插件是不兼容的，这可能会导致难以解决的问题，并迫使我们重新构建IDE安装，特别是在新版本发布时
- en: IntelliJ IDEA
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IntelliJ IDEA
- en: 'The IntelliJ IDEA paid version is definitely the best Java IDE on the market
    today. But even the free Community Edition has a strong position among the three
    leading IDEs. In the following Wikipedia article, you can see a table that nicely
    summarizes the difference between paid Ultimate and free Community Editions: [https://en.wikipedia.org/wiki/IntelliJ_IDEA](https://en.wikipedia.org/wiki/IntelliJ_IDEA)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA付费版本绝对是当今市场上最好的Java IDE。但即使是免费的Community Edition在三大主要IDE中也占据着强势地位。在下面的维基百科文章中，您可以看到一个表格，它很好地总结了付费的Ultimate和免费的Community
    Edition之间的区别：[https://en.wikipedia.org/wiki/IntelliJ_IDEA](https://en.wikipedia.org/wiki/IntelliJ_IDEA)
- en: It was developed by the JetBrains (formerly known as IntelliJ) software company,
    which has around 700 employees (as of 2017) in six offices in Prague, Saint Petersburg,
    Moscow, Munich, Boston, and Novosibirsk. The first version, released in January
    2001, was one of the first available Java IDEs with integrated advanced code-navigation
    and code-refactoring capabilities. Since then, this IDE has been known for its
    *Deep insight into your code*, as the authors state when describing the product
    features on their website at [https://www.jetbrains.com/idea/features](https://www.jetbrains.com/idea/features).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它是由JetBrains（以前被称为IntelliJ）软件公司开发的，该公司在布拉格、圣彼得堡、莫斯科、慕尼黑、波士顿和新西伯利亚拥有约700名员工（截至2017年）。第一个版本于2001年1月发布，是最早具有集成高级代码导航和代码重构功能的Java
    IDE之一。从那时起，这个IDE以其对代码的深入洞察而闻名，正如作者在其网站上描述产品特性时所说的那样：[https://www.jetbrains.com/idea/features](https://www.jetbrains.com/idea/features)。
- en: Like the other two IDEs described earlier, it enables coding, compiling, analysis,
    running, testing, profiling, debugging, and the deployment of all Java application
    types and all major platforms. Like the two previous IDEs, it also supports Ant,
    Maven, and Gradle, as well as refactoring, major version-control systems, and
    cloud applications.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面描述的另外两个IDE一样，它可以编码、编译、分析、运行、测试、分析、调试和部署所有Java应用程序类型和所有主要平台。与前两个IDE一样，它还支持Ant、Maven和Gradle，以及重构、主要版本控制系统和云应用程序。
- en: In the next section, we will walk you through the installation and configuration
    of IntelliJ IDEA Community Edition.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将为您介绍IntelliJ IDEA Community Edition的安装和配置过程。
- en: Installing and configuring IntelliJ IDEA
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置IntelliJ IDEA
- en: The following steps and screenshots will demonstrate the IntelliJ IDEA Community
    Edition installation on Windows, though the installation is not much different
    for Linux or macOS.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤和截图将演示在Windows上安装IntelliJ IDEA Community Edition，尽管对于Linux或macOS，安装并没有太大的不同。
- en: Downloading and installing
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装
- en: 'You can download the IntelliJ IDEA Community Edition installer from [https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download). After
    the installer has downloaded, launch it by double-clicking on it or right-clicking
    and selecting the Open option from the menu. Then, walk through the following
    screens, accepting all of the default settings by clicking the Next> button, unless
    you need to do something different. Here is the first screen:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://www.jetbrains.com/idea/download](https://www.jetbrains.com/idea/download)下载IntelliJ
    IDEA社区版安装程序。下载安装程序后，通过双击它或右键单击并从菜单中选择“打开”选项来启动它。然后，通过单击“下一个>”按钮，接受所有默认设置，除非您需要执行其他操作。这是第一个屏幕：
- en: '![](img/083f337d-e31d-4c5f-8ef3-3b47ed77ae82.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/083f337d-e31d-4c5f-8ef3-3b47ed77ae82.png)'
- en: 'You can use the Browse... button and select any location  for a Destination
    Folder, or just click Next> and accept the default location on the following screen:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用“浏览...”按钮并选择“任何位置”作为目标文件夹，或者只需单击“下一个>”并在下一个屏幕上接受默认位置：
- en: '![](img/73637610-0090-44dc-b563-5ac944c7bbf5.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73637610-0090-44dc-b563-5ac944c7bbf5.png)'
- en: 'Check 64-bit launcher (unless your computer supports 32-bits only) and `.java` on
    the following screen:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上选中64位启动器（除非您的计算机仅支持32位）和“.java”：
- en: '![](img/c37f9a10-2e34-462e-9eee-cfb193def702.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c37f9a10-2e34-462e-9eee-cfb193def702.png)'
- en: We will assume that you have JDK installed already, so there is no need to check
    Download and install JRE on the previous screenshot. If you have not installed
    JDK yet, you can check Download and install JRE, or install JDK by following the
    steps described in [Chapter 1](40b2d539-5f9c-4923-87ac-803c281a5ba7.xhtml), *Java
    Virtua**l Machine (JVM) on Your Computer*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经安装了JDK，因此在前一个屏幕上不需要检查“下载并安装JRE”。如果您尚未安装JDK，可以检查“下载并安装JRE”，或者按照[第1章](40b2d539-5f9c-4923-87ac-803c281a5ba7.xhtml)中描述的步骤安装JDK，*计算机上的Java虚拟机（JVM）*。
- en: 'The following screen allows you to customize the entry in your start menu,
    or you can just accept the default options by clicking on the Install button:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个屏幕允许您自定义启动菜单中的条目，或者您可以通过单击“安装”按钮接受默认选项：
- en: '![](img/4e10a0e1-d7b3-4424-ab4a-1292c86330f2.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e10a0e1-d7b3-4424-ab4a-1292c86330f2.png)'
- en: 'It will take the installer some time to finish the installation. The progress
    bar on the following screen will give you an idea of how much time is left for
    the process to complete:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序将花费一些时间来完成安装。下一个屏幕上的进度条将让您了解还有多少时间才能完成整个过程：
- en: '![](img/3f37f576-ed3a-4f44-a4ea-b12ff990e562.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f37f576-ed3a-4f44-a4ea-b12ff990e562.png)'
- en: After the installation has complete, and the Next> button becomes clickable,
    use it to get to the next screen.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，下一个>按钮变为可点击时，请使用它转到下一个屏幕。
- en: 'Check the Run IntelliJ IDEA box on the next screen, and click the Finish button:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上选中“运行IntelliJ IDEA”框，并单击“完成”按钮：
- en: '![](img/6200e762-07d4-4d8e-ba4a-ef78f523136e.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6200e762-07d4-4d8e-ba4a-ef78f523136e.png)'
- en: The installation is completed and we can now start configuring the IDE.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 安装已完成，现在我们可以开始配置IDE。
- en: Configuring IntelliJ IDEA
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置IntelliJ IDEA
- en: 'When IntelliJ IDEA starts for the very first time, it asks you about the settings
    you might have from the previous IDE version:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当IntelliJ IDEA第一次启动时，它会询问您是否有来自先前IDE版本的设置：
- en: '![](img/bcb7a32a-81d8-4270-a2df-f313c8a2ca1a.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcb7a32a-81d8-4270-a2df-f313c8a2ca1a.png)'
- en: Since it is your first IntelliJ IDEA installation, click Do not import settings.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是您第一次安装IntelliJ IDEA，请单击“不导入设置”。
- en: The next screen or two also show only once – at the first launch of the newly
    installed IDE. They will ask whether you accept the JetBrains privacy policy,
    and whether you would like to pay for the license or prefer to continue using
    the free Community Edition or free trial (this depends on the particular download
    you get). Answer the questions whichever way you prefer, and, if you accept the
    privacy policy, the following screen will ask you to chose a theme—white (*IntelliJ*)
    or dark (*Darcula*).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一个或两个屏幕也只会显示一次——在新安装的IDE首次启动时。它们将询问您是否接受JetBrains的隐私政策，以及您是否愿意支付许可证费用，还是希望继续使用免费的社区版或免费试用版（这取决于您获得的特定下载）。以您喜欢的方式回答问题，如果您接受隐私政策，下一个屏幕将要求您选择主题——白色（*IntelliJ*）或黑色（*Darcula*）。
- en: 'We have chosen the dark theme, as you will see on our demo screens. But you
    can select whatever you prefer and then, change it later, if you so desire:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了暗色主题，正如您将在我们的演示屏幕上看到的那样。但您可以选择任何您喜欢的，然后以后再更改：
- en: '![](img/00e514db-230d-43fa-98e8-951346c40cec.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00e514db-230d-43fa-98e8-951346c40cec.png)'
- en: 'On the above screen, at the bottom, you can see two buttons:  Skip Remaining
    and Set Deafults and Next: Default plugins. If you click Skip Remaining and Set
    Defaults, you will skip the chance to configure some settings now, but you can
    do it later. For this demo, we will click the Next: Default plugins button and
    then show you how to revisit the settings later.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕上，底部可以看到两个按钮：跳过剩余和设置默认和下一个：默认插件。如果您单击“跳过剩余并设置默认”，您将跳过现在配置一些设置的机会，但以后可以进行配置。对于此演示，我们将单击“下一个：默认插件”按钮，然后向您展示如何稍后重新访问设置。
- en: 'Here is the screen with the default settings options:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认设置选项的屏幕：
- en: '![](img/8505312b-c990-423c-b0f9-1bd306a96acb.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8505312b-c990-423c-b0f9-1bd306a96acb.png)'
- en: 'You can click any Customize... link on the preceding screen and see the possible
    options, then return back. We will use only three of them—Build Tools, Version
    Control, and Test Tools. We will start with Build Tools by clicking Customize...:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击前面屏幕上的任何“自定义...”链接，查看可能的选项，然后返回。我们将仅使用其中的三个——构建工具、版本控制和测试工具。我们将首先通过单击“自定义...”来开始构建工具：
- en: '![](img/eb0e3b40-3b53-45e3-b1ec-0aae96cc54fe.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb0e3b40-3b53-45e3-b1ec-0aae96cc54fe.png)'
- en: We are going to leave the Maven option checked, but the presence of other checks
    does not hurt , and can even help, if you would like to explore the related functionality
    later.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留Maven选项的选择，但其他选项的存在不会有害，甚至可以帮助您以后探索相关功能。
- en: 'Click Save Changes and Go Back, then click the Customize... link under the
    Version Controls symbol:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存更改并返回，然后点击版本控制符号下的自定义...链接：
- en: '![](img/10e08611-46bc-44d6-8cb1-a998cc75a008.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10e08611-46bc-44d6-8cb1-a998cc75a008.png)'
- en: We will talk a bit about source control tools (or version control tool, as they
    are also called) later, but full treatment of this subject is outside the scope
    of this book. On the preceding screen, you can check the box with the version-control
    system you know you are going to use. Otherwise, leave all of the boxes checked,
    so the version-control system will be integrated automatically, as soon as you
    open a code-source tree checked out from one of the listed tools.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会谈一下源代码控制工具（或版本控制工具，它们也被称为），但是本书不涵盖这个主题的完整内容。在前面的屏幕上，您可以勾选您知道将要使用的版本控制系统的复选框。否则，请保持所有复选框都被勾选，这样一旦您打开从列出的工具之一检出的代码源树，版本控制系统就会自动集成。
- en: 'Click Save Changes and Go Back, then click the Customize... link under the
    Test Tools symbol:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存更改并返回，然后点击测试工具符号下的自定义...链接：
- en: '![](img/d7b8cedd-969c-49ca-b0b4-fea988a7f917.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7b8cedd-969c-49ca-b0b4-fea988a7f917.png)'
- en: On the preceding screen, we are going to leave only the JUnit checkbox checked,
    because we would like to have our demo configuration clear of unnecessary distractions.
    But you can leave everything checked. It does not hurt to have other options available.
    Besides, you may decide to use other options in the future.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕上，我们将只保留JUnit复选框被选中，因为我们希望我们的演示配置清除不必要的干扰。但您可以保持所有复选框都被选中。拥有其他选项也没有坏处。此外，您可能决定在将来使用其他选项。
- en: As you have seen, in principle, we did not need to change any of the default
    settings. We have only done it to show you the available capabilities.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，原则上，我们不需要更改任何默认设置。我们只是为了向您展示可用的功能。
- en: 'Click Save Changes and Go Back, then click the Next: Featured plugins button,
    and then the Start using IntelliJ IDEA button.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存更改并返回，然后点击“下一步：特色插件”按钮，然后点击“开始使用IntelliJ IDEA”按钮。
- en: If you have not configured IDE at the installation time or did something different
    and would like to change the configuration, you can do so later.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在安装时没有配置IDE，或者做了一些不同的事情并希望更改配置，可以稍后进行更改。
- en: We will explain how to access the configuration settings in IntelliJ IDEA after
    installation and provide the corresponding screenshots in [Chapter 4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml),
    *Your First Java Project*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在安装后解释如何访问IntelliJ IDEA中的配置设置，并在[第4章](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml)《您的第一个Java项目》中提供相应的屏幕截图。
- en: Exercise – Installing NetBeans IDE
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 - 安装NetBeans IDE
- en: Download and install NetBeans IDE.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装NetBeans IDE。
- en: Answer
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: As of the time of writing, the page for downloading the latest version of NetBeans
    is [https://netbeans.org/features/index.html](https://netbeans.org/features/index.html).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本文时，下载最新版本的NetBeans页面为[https://netbeans.org/features/index.html](https://netbeans.org/features/index.html)。
- en: After the download is complete, launch the installer. You might get a message
    that advises you to use the `--javahome` option when launching the installer.
    Find the corresponding installation instructions, and do that. The NetBeans version
    expected a certain version of Java, and a mismatch may cause installation or running
    problems.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，启动安装程序。您可能会收到一条消息，建议您在启动安装程序时使用“--javahome”选项。找到相应的安装说明，并执行。NetBeans版本需要特定版本的Java，不匹配可能会导致安装或运行问题。
- en: If the installer launches without warning, you can just follow the wizard until
    the screen states Installation completed successfully and has the Finish button.
    Click the Finish button, then run NetBeans. You are ready to start writing Java
    code using the NetBeans IDE. After reading [Chapter 4](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml),
    *Your First Java Project*, try to create a similar project in NetBeans, and see
    how you like it compared to IntelliJ IDEA.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装程序启动而没有警告，您可以按照向导进行操作，直到屏幕显示安装成功完成并有“完成”按钮。点击“完成”按钮，然后运行NetBeans。您现在可以开始使用NetBeans
    IDE编写Java代码。阅读完[第4章](64574f55-0e95-4eda-9ddb-b05da6c41747.xhtml)《您的第一个Java项目》后，尝试在NetBeans中创建一个类似的项目，并看看与IntelliJ
    IDEA相比您是否喜欢它。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now you know what the development environment is and what tools you need on
    your computer to start coding. You have learned how to configure an IDE and what
    it does for you behind the scenes. You now have an idea of what to look for when
    selecting your IDE.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道开发环境是什么，以及您在计算机上需要哪些工具来开始编码。您已经学会了如何配置IDE以及它在幕后为您做了什么。您现在知道在选择IDE时要寻找什么。
- en: In the next chapter, you will start using it to write and compile code and test
    for it. You will learn what a Java project is, how to create and configure one,
    and how to execute your code and test it without leaving your IDE, which means
    that you will become a Java programmer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将开始使用它来编写和编译代码并进行测试。您将学习什么是Java项目，如何创建和配置一个项目，以及如何在不离开IDE的情况下执行代码和测试代码，这意味着您将成为一名Java程序员。
