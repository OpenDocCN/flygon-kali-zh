["```cs\n    <NavigationView\n    \u00a0\u00a0\u00a0\u00a0PaneDisplayMode=\"Top\"\n    \u00a0\u00a0\u00a0\u00a0SelectionChanged=\"NavItemSelected\"\n    \u00a0\u00a0\u00a0\u00a0IsBackEnabled=\"{Binding Path=CanGoBack, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ElementName=InnerFrame}\"\n    \u00a0\u00a0\u00a0\u00a0BackRequested=\"NavBackRequested\"\n    \u00a0\u00a0\u00a0\u00a0IsSettingsVisible=\"False\">\n    \u00a0\u00a0\u00a0\u00a0<NavigationView.MenuItems>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<NavigationViewItem Content=\"Finance\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<NavigationViewItem Content=\"Operations\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<NavigationViewItem Content=\"Network\" />\n    \u00a0\u00a0\u00a0\u00a0</NavigationView.MenuItems>\n    \u00a0\u00a0\u00a0\u00a0<Frame x:Name=\"InnerFrame\" />\n    </NavigationView>\n    ```", "```cs\n    using Dashboard.Views;\n    private void NavItemSelected(NavigationView sender, NavigationViewSelectionChangedEventArgs args) \n    {\n    \u00a0\u00a0var item = (args.SelectedItem as \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NavigationViewItem).Content.ToString();\n    \u00a0\u00a0Type page = null;\n    \u00a0\u00a0switch (item) {\n    \u00a0\u00a0\u00a0\u00a0case \"Finance\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0page = typeof(FinancePage);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0case \"Operations\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0page = typeof(OperationsPage);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0case \"Network\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0page = typeof(NetworkPage);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0}\n    \u00a0\u00a0if (page != null && InnerFrame.CurrentSourcePageType\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!= page) {\n    \u00a0\u00a0\u00a0\u00a0InnerFrame.Navigate(page);\n    \u00a0\u00a0}\n    }\n    ```", "```cs\n    private void NavBackRequested(object sender, NavigationViewBackRequestedEventArgs e) \n    {\n    \u00a0\u00a0\u00a0\u00a0InnerFrame.GoBack();\n    }\n    ```", "```cs\n    InnerFrame.Navigate(typeof(FinancePage));\n    ```", "```cs\n    xmlns:sf=\"using:Syncfusion.UI.Xaml.Charts\"\n    ```", "```cs\n    <RelativePanel HorizontalAlignment=\"Center\">\n    \u00a0\u00a0<sf:SfChart class we can specify. We define a PrimaryAxis class (for the X-axis), which reflects the hours of the day, with a SecondaryAxis class (for the Y-axis) representing the numeric values and a set of data as a LineSeries class.We also specify a `TextBlock` element to appear below the chart but be horizontally aligned. This will display arrows indicating trend information relating to the graph.\n    ```", "```cs\n    public List<HourlySales> DailySales\n    \u00a0\u00a0\u00a0\u00a0=> FinanceInfo.DailySales\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(s => new HourlySales(s.Hour, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s.Sales)).ToList();\n    public string TrendArrows => FinanceInfo.TrendArrows;\n    ```", "```cs\n    using UnoBookRail.Common.DashboardData;\n    ```", "```cs\n    public class HourlySales\n    {\n    \u00a0\u00a0\u00a0\u00a0public HourlySales(string hour, double totalSales) \n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Hour = hour;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TotalSales = totalSales;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public string Hour { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public double TotalSales { get; set; }\n    }\n    ```", "```cs\n    Install-Package Infragistics.Uno.Charts -Version 20.2.59-alpha\n    ```", "```cs\n    Install-Package Infragistics.Uno.Wasm.Charts -Version 20.2.59-alpha\n    ```", "```cs\n    Install-Package Uno.SkiaSharp.Views -Version 2.80.0-uno.493\n    Install-Package Uno.SkiaSharp.Wasm -Version 2.80.0-uno.493\n    ```", "```cs\n    xmlns:ig=\"using:Infragistics.Controls.Charts\"\n    ```", "```cs\n    <Grid>\n    \u00a0\u00a0<Grid.RowDefinitions>\n    \u00a0\u00a0\u00a0\u00a0<RowDefinition Height=\"*\" />\n    \u00a0\u00a0\u00a0\u00a0<RowDefinition Height=\"*\" />\n    \u00a0\u00a0</Grid.RowDefinitions>\n    \u00a0\u00a0<Grid.ColumnDefinitions>\n    \u00a0\u00a0\u00a0\u00a0<ColumnDefinition Width=\"*\" />\n    \u00a0\u00a0\u00a0\u00a0<ColumnDefinition Width=\"*\" />\n    \u00a0\u00a0</Grid.ColumnDefinitions>\n    \u00a0\u00a0<ig:XamDataChart class. Within this, we specify the *x* and *y* axes and the data to display as a StackedColumnSeries element. Within the series, we detail the paths to the data for each fragment of the stack.Finally, we added the `TextBlock` element that displays the current passenger count.\n    ```", "```cs\n    using UnoBookRail.Common.DashboardData;\n    ```", "```cs\n    public string PsngrCount => OperationsInfo.CurrentPassengers;\n    private List<PersonCount> Passengers\n    \u00a0\u00a0\u00a0=> OperationsInfo.Passengers.Select(p \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> new PersonCount(p.Hour, p.Children,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p.Adults, p.Seniors)).ToList();\n    ```", "```cs\n    public class PersonCount \n    {\n    \u00a0\u00a0\u00a0\u00a0public PersonCount(string hour, double child,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0double adult, double senior) \n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Hour = hour;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Children = child;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Adults = adult;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Seniors = senior;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public string Hour { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public double Children { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public double Adults { get; set; }\n    \u00a0\u00a0\u00a0\u00a0public double Seniors { get; set; }\n    }\n    ```", "```cs\n    Install-Package Uno.SkiaSharp.Views -Version 2.80.0-uno.493\n    Install-Package Uno.SkiaSharp.Wasm -Version 2.80.0-uno.493\n    ```", "```cs\n    <skia:SKXamlCanvas xmlns:skia=\"using:SkiaSharp.Views.UWP\" PaintSurface=\"OnPaintSurface\" />\n    ```", "```cs\n    using SkiaSharp;\n    using SkiaSharp.Views.UWP;\n    using UnoBookRail.Common.Mapping;\n    using UnoBookRail.Common.Network;\n    ```", "```cs\n    private void OnPaintSurface(object sender, SKPaintSurfaceEventArgs e) \n    {\n    \u00a0\u00a0\u00a0\u00a0var canvas = SetUpCanvas(e);\n    \u00a0\u00a0\u00a0\u00a0DrawLines(canvas);\n    \u00a0\u00a0\u00a0\u00a0DrawStations(canvas);\n    \u00a0\u00a0\u00a0\u00a0DrawTrains(canvas);\n    }\n    ```", "```cs\n    private SKCanvas SetUpCanvas(SKPaintSurfaceEventArgs e) \n    {\n    \u00a0\u00a0var canvas = e.Surface.Canvas;\n    \u00a0\u00a0var relativeWidth = e.Info.Width / ImageMap.Width;\n    \u00a0\u00a0var relativeHeight = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.Info.Height / ImageMap.Height;\n    \u00a0\u00a0canvas.Scale(Math.Min(relativeWidth, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0relativeHeight));\n    \u00a0\u00a0var x = 0f;\n    \u00a0\u00a0var y = 0f;\n    \u00a0\u00a0if (relativeWidth > relativeHeight) \n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0x = (e.Info.Width - (ImageMap.Width * \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0relativeHeight)) / 2f / relativeHeight;\n    \u00a0\u00a0}\n    \u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0y = (e.Info.Height - (ImageMap.Height * \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0relativeWidth)) / 2f / relativeWidth;\n    \u00a0\u00a0}\n    \u00a0\u00a0canvas.Translate(x, y);\n    \u00a0\u00a0canvas.Clear();\n    \u00a0\u00a0return canvas;\n    }\n    ```", "```cs\n    void DrawLines(SKCanvas canvas) \n    {\n    \u00a0\u00a0\u00a0\u00a0var paint = new SKPaint \n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Color = SKColors.Black, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StrokeWidth = 1,\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0var northPnts = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ImageMap.GetStations(Branch.NorthBranch);\n    \u00a0\u00a0\u00a0\u00a0var mainPnts = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ImageMap.GetStations(Branch.MainLine);\n    \u00a0\u00a0\u00a0\u00a0var southPnts = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ImageMap.GetStations(Branch.SouthBranch);\n    \u00a0\u00a0\u00a0\u00a0SKPoint[] ToSKPointArray(List<(float X, float Y)> \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> list.Select(p => new SKPoint(p.X, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p.Y)).ToArray();\n    \u00a0\u00a0\u00a0\u00a0void DrawBranch(SKPoint[] stnPoints)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> canvas.DrawPoints(SKPointMode.Polygon, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stnPoints, paint);\n    \u00a0\u00a0\u00a0\u00a0DrawBranch(ToSKPointArray(northPnts));\n    \u00a0\u00a0\u00a0\u00a0DrawBranch(ToSKPointArray(mainPnts));\n    \u00a0\u00a0\u00a0\u00a0DrawBranch(ToSKPointArray(southPnts));\n    }\n    ```", "```cs\n    void DrawStations(SKCanvas canvas) \n    {\n    \u00a0\u00a0\u00a0\u00a0var paint = new SKPaint \n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Color = SKColors.Black,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Style = SKPaintStyle.Fill,\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0foreach (var (X, Y) in ImageMap.Stations) \n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0canvas.DrawCircle(new SKPoint(X, Y), 2, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paint);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cs\n    void DrawTrains(SKCanvas canvas) \n    {\n    \u00a0\u00a0\u00a0\u00a0var trainPaint = new SKPaint \n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Color = SKColors.Cyan,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Style = SKPaintStyle.Fill,\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0foreach (var train in ImageMap.GetTrainsInNetwork()) \n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0canvas.DrawCircle(new SKPoint(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0train.MapPosition.X, train.MapPosition.Y),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.8f, trainPaint);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```cs\n    <VisualStateManager.VisualStateGroups>\n    \u00a0\u00a0<VisualStateGroup>\n    \u00a0\u00a0\u00a0\u00a0<VisualState>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<VisualState.StateTriggers>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<AdaptiveTrigger element that's applied when the panel is at least 1,200 relative pixels wide. When this visual state is triggered, the TextBlock element is set to the right of the chart and has its alignment adjusted accordingly. The left-hand side of *Figure 6.4* shows how this looks.\n    ```", "```cs\n    <VisualStateManager.VisualStateGroups>\n    \u00a0\u00a0<VisualStateGroup>\n    \u00a0\u00a0\u00a0\u00a0<VisualState>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<VisualState.StateTriggers>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<AdaptiveTrigger MinWindowWidth=\"1200\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</VisualState.StateTriggers>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<VisualState.Setters>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Setter Target=\"PassengerChart.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(Grid.ColumnSpan)\" Value=\"1\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Setter Target=\"PassengerChart.(Grid.RowSpan)\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value=\"2\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Setter Target=\"CurrentCount.(Grid.Row)\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value=\"0\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Setter Target=\"CurrentCount.(Grid.Column)\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value=\"1\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Setter Target=\"CurrentCount.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(Grid.ColumnSpan)\" Value=\"1\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Setter Target=\"CurrentCount.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(Grid.RowSpan)\" Value=\"2\"/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</VisualState.Setters>\n    \u00a0\u00a0\u00a0\u00a0</VisualState>\n    \u00a0\u00a0</VisualStateGroup>\n    </VisualStateManager.VisualStateGroups>\n    ```"]