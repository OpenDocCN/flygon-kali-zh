["```py\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport scipy\n```", "```py\n    $ git clone https://github.com/scipy/scipy.git\n\n    $ python setup.py build\n    $ python setup.py install --user\n\n    ```", "```py\n        $ yum install python-scipy\n\n        ```", "```py\n        $ urpmi python-scipy\n\n        ```", "```py\n        $ sudo emerge scipy\n\n        ```", "```py\n        $ sudo apt-get install python-scipy\n\n        ```", "```py\n    $ [sudo] pip install scipy\n    $ [sudo] easy_install scipy\n\n    ```", "```py\n    import scipy\n    print(scipy.__version__)\n    print(scipy.__file__)\n    ```", "```py\n    $ sudo apt-get install python-imaging\n\n    ```", "```py\n    $ easy_install PIL\n    $ sudo pip install PIL\n\n    ```", "```py\n    lena = scipy.misc.lena()\n\n    ```", "```py\n    lena = scipy.lena()\n    ```", "```py\n    np.testing.assert_equal((LENA_X, LENA_Y), lena.shape)\n    ```", "```py\n    resized = lena.repeat(yfactor, axis=0).repeat(xfactor, axis=1)\n    ```", "```py\n    plt.subplot(211)\n    plt.title(\"Lena\")\n    plt.axis(\"off\")\n    plt.imshow(lena)\n    ```", "```py\n    plt.subplot(212)\n    plt.title(\"Resized\")\n    plt.axis(\"off\")\n    plt.imshow(resized)\n    plt.show()\n    ```", "```py\n    import scipy.misc\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    # This script resizes the Lena image from Scipy.\n\n    # Loads the Lena image into an array\n    lena = scipy.misc.lena()\n\n    #Lena's dimensions\n    LENA_X = 512\n    LENA_Y = 512\n\n    #Check the shape of the Lena array\n    np.testing.assert_equal((LENA_X, LENA_Y), lena.shape)\n\n    # Set the resize factors\n    yfactor = 2\n    xfactor = 3\n\n    # Resize the Lena array\n    resized = lena.repeat(yfactor, axis=0).repeat(xfactor, axis=1)\n\n    #Check the shape of the resized array\n    np.testing.assert_equal((yfactor * LENA_Y, xfactor * LENA_Y), resized.shape)\n\n    # Plot the Lena array\n    plt.subplot(211)\n    plt.title(\"Lena\")\n    plt.axis(\"off\")\n    plt.imshow(lena)\n\n    #Plot the resized array\n    plt.subplot(212)\n    plt.title(\"Resized\")\n    plt.axis(\"off\")\n    plt.imshow(resized)\n    plt.show()\n    ```", "```py\n    acopy = lena.copy()\n\n    ```", "```py\n    aview = lena.view()\n\n    ```", "```py\n    aview.flat = 0\n\n    ```", "```py\n    import scipy.misc\n    import matplotlib.pyplot as plt\n\n    lena = scipy.misc.lena()\n    acopy = lena.copy()\n    aview = lena.view()\n\n    # Plot the Lena array\n    plt.subplot(221)\n    plt.imshow(lena)\n\n    #Plot the copy\n    plt.subplot(222)\n    plt.imshow(acopy)\n\n    #Plot the view\n    plt.subplot(223)\n    plt.imshow(aview)\n\n    # Plot the view after changes\n    aview.flat = 0\n    plt.subplot(224)\n    plt.imshow(aview)\n\n    plt.show()\n    ```", "```py\n    plt.imshow(lena[:,::-1])\n\n    ```", "```py\n    plt.imshow(lena[:lena.shape[0]/2,:lena.shape[1]/2])\n\n    ```", "```py\n    mask = lena % 2 == 0\n    masked_lena = lena.copy()\n    masked_lena[mask] = 0\n\n    ```", "```py\n    import scipy.misc\n    import matplotlib.pyplot as plt\n\n    # Load the Lena array\n    lena = scipy.misc.lena()\n\n    # Plot the Lena array\n    plt.subplot(221)\n    plt.title('Original')\n    plt.axis('off')\n    plt.imshow(lena)\n\n    #Plot the flipped array\n    plt.subplot(222)\n    plt.title('Flipped')\n    plt.axis('off')\n    plt.imshow(lena[:,::-1])\n\n    #Plot a slice array\n    plt.subplot(223)\n    plt.title('Sliced')\n    plt.axis('off')\n    plt.imshow(lena[:lena.shape[0]/2,:lena.shape[1]/2])\n\n    # Apply a mask\n    mask = lena % 2 == 0\n    masked_lena = lena.copy()\n    masked_lena[mask] = 0\n    plt.subplot(224)\n    plt.title('Masked')\n    plt.axis('off')\n    plt.imshow(masked_lena)\n\n    plt.show()\n    ```", "```py\n    lena[range(xmax), range(ymax)] = 0\n\n    ```", "```py\n    lena[range(xmax-1,-1,-1), range(ymax)] = 0\n\n    ```", "```py\n    import scipy.misc\n    import matplotlib.pyplot as plt\n\n    # This script demonstrates fancy indexing by setting values\n    # on the diagonals to 0.\n\n    # Load the Lena array\n    lena = scipy.misc.lena()\n    xmax = lena.shape[0]\n    ymax = lena.shape[1]\n\n    # Fancy indexing\n    # Set values on diagonal to 0\n    # x 0-xmax\n    # y 0-ymax\n    lena[range(xmax), range(ymax)] = 0\n\n    # Set values on other diagonal to 0\n    # x xmax-0\n    # y 0-ymax\n    lena[range(xmax-1,-1,-1), range(ymax)] = 0\n\n    # Plot Lena with diagonal lines set to 0\n    plt.imshow(lena)\n    plt.show()\n    ```", "```py\n    def shuffle_indices(size):\n       arr = np.arange(size)\n       np.random.shuffle(arr)\n\n       return arr\n    ```", "```py\n    plt.imshow(lena[np.ix_(xindices, yindices)])\n\n    ```", "```py\n    import scipy.misc\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    # Load the Lena array\n    lena = scipy.misc.lena()\n    xmax = lena.shape[0]\n    ymax = lena.shape[1]\n\n    def shuffle_indices(size):\n       '''\n       Shuffles an array with values 0 - size\n       '''\n       arr = np.arange(size)\n       np.random.shuffle(arr)\n\n       return arr\n\n    xindices = shuffle_indices(xmax)\n    np.testing.assert_equal(len(xindices), xmax)\n    yindices = shuffle_indices(ymax)\n    np.testing.assert_equal(len(yindices), ymax)\n\n    # Plot Lena\n    plt.imshow(lena[np.ix_(xindices, yindices)])\n    plt.show()\n    ```", "```py\n    def get_indices(size):\n       arr = np.arange(size)\n       return arr % 4 == 0\n    ```", "```py\n    lena1 = lena.copy() \n    xindices = get_indices(lena.shape[0])\n    yindices = get_indices(lena.shape[1])\n    lena1[xindices, yindices] = 0\n    plt.subplot(211)\n    plt.imshow(lena1)\n    ```", "```py\n    lena2[(lena > lena.max()/4) & (lena < 3 * lena.max()/4)] = 0\n    ```", "```py\n    import scipy.misc\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    # Load the Lena array\n    lena = scipy.misc.lena()\n\n    def get_indices(size):\n       arr = np.arange(size)\n       return arr % 4 == 0\n\n    # Plot Lena\n    lena1 = lena.copy() \n    xindices = get_indices(lena.shape[0])\n    yindices = get_indices(lena.shape[1])\n    lena1[xindices, yindices] = 0\n    plt.subplot(211)\n    plt.imshow(lena1)\n\n    lena2 = lena.copy() \n    # Between quarter and 3 quarters of the max value\n    lena2[(lena > lena.max()/4) & (lena < 3 * lena.max()/4)] = 0\n    plt.subplot(212)\n    plt.imshow(lena2)\n\n    plt.show()\n    ```", "```py\n    sudoku = np.array([\n        [2, 8, 7, 1, 6, 5, 9, 4, 3],\n        [9, 5, 4, 7, 3, 2, 1, 6, 8],\n        [6, 1, 3, 8, 4, 9, 7, 5, 2],\n        [8, 7, 9, 6, 5, 1, 2, 3, 4],\n        [4, 2, 1, 3, 9, 8, 6, 7, 5],\n        [3, 6, 5, 4, 2, 7, 8, 9, 1],\n        [1, 9, 8, 5, 7, 3, 4, 2, 6],\n        [5, 4, 2, 9, 1, 6, 3, 8, 7],\n        [7, 3, 6, 2, 8, 4, 5, 1, 9]\n        ])\n    ```", "```py\n    strides = sudoku.itemsize * np.array([27, 3, 9, 1])\n    ```", "```py\n    squares = np.lib.stride_tricks.as_strided(sudoku, shape=shape, strides=strides)\n    print(squares)\n    ```", "```py\n    [[[[2 8 7]\n        [9 5 4]\n        [6 1 3]]\n\n      [[1 6 5]\n        [7 3 2]\n        [8 4 9]]\n\n      [[9 4 3]\n        [1 6 8]\n        [7 5 2]]]\n\n     [[[8 7 9]\n        [4 2 1]\n        [3 6 5]]\n\n      [[6 5 1]\n        [3 9 8]\n        [4 2 7]]\n\n      [[2 3 4]\n        [6 7 5]\n        [8 9 1]]]\n\n     [[[1 9 8]\n        [5 4 2]\n        [7 3 6]]\n\n      [[5 7 3]\n        [9 1 6]\n        [2 8 4]]\n\n      [[4 2 6]\n        [3 8 7]\n        [5 1 9]]]]\n    ```", "```py\n    import numpy as np\n\n    sudoku = np.array([\n       [2, 8, 7, 1, 6, 5, 9, 4, 3],\n       [9, 5, 4, 7, 3, 2, 1, 6, 8],\n       [6, 1, 3, 8, 4, 9, 7, 5, 2],\n       [8, 7, 9, 6, 5, 1, 2, 3, 4],\n       [4, 2, 1, 3, 9, 8, 6, 7, 5],\n       [3, 6, 5, 4, 2, 7, 8, 9, 1],\n       [1, 9, 8, 5, 7, 3, 4, 2, 6],\n       [5, 4, 2, 9, 1, 6, 3, 8, 7],\n       [7, 3, 6, 2, 8, 4, 5, 1, 9]\n       ])\n\n    shape = (3, 3, 3, 3)\n\n    strides = sudoku.itemsize * np.array([27, 3, 9, 1])\n\n    squares = np.lib.stride_tricks.as_strided(sudoku, shape=shape, strides=strides)\n    print(squares)\n    ```", "```py\n    sample_rate, data = scipy.io.wavfile.read(WAV_FILE)\n    ```", "```py\n    plt.subplot(2, 1, 1)\n    plt.title(\"Original\")\n    plt.plot(data)\n    ```", "```py\n    newdata = data * 0.2\n    newdata = newdata.astype(np.uint8)\n    ```", "```py\n    scipy.io.wavfile.write(\"quiet.wav\",\n        sample_rate, newdata)\n    ```", "```py\n    plt.subplot(2, 1, 2)\n    plt.title(\"Quiet\")\n    plt.plot(newdata)\n\n    plt.show()\n    ```", "```py\n    import scipy.io.wavfile\n    import matplotlib.pyplot as plt\n    import urllib2\n    import numpy as np\n\n    # Download audio file\n    response = urllib2.urlopen('http://www.thesoundarchive.com/austinpowers/smashingbaby.wav')\n    print(response.info())\n    WAV_FILE = 'smashingbaby.wav'\n    filehandle = open(WAV_FILE, 'w')\n    filehandle.write(response.read())\n    filehandle.close()\n    sample_rate, data = scipy.io.wavfile.read(WAV_FILE)\n    print(\"Data type\", data.dtype, \"Shape\", data.shape)\n\n    # Plot values original audio\n    plt.subplot(2, 1, 1)\n    plt.title(\"Original\")\n    plt.plot(data)\n\n    # Create quieter audio\n    newdata = data * 0.2\n    newdata = newdata.astype(np.uint8)\n    print(\"Data type\", newdata.dtype, \"Shape\", newdata.shape)\n\n    # Save quieter audio file\n    scipy.io.wavfile.write(\"quiet.wav\",\n        sample_rate, newdata)\n\n    # Plot values quieter file\n    plt.subplot(2, 1, 2)\n    plt.title(\"Quiet\")\n    plt.plot(newdata)\n\n    plt.show()\n    ```"]