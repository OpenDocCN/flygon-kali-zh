["```cs\nThread thread = new Thread(new ThreadStart(() =>\n{\nThread.Sleep(1000);\nConsole.WriteLine(\"Hello, from the Thread\");\n    }));\nthread.Start();\n\nConsole.WriteLine(\"Hello, from the main thread\");\nthread.Join();\n```", "```cs\nint[] numbers = { 1, 2, 3, 4 };\n\nforeach (var number in numbers)\n{\nThreadPool.QueueUserWorkItem(new WaitCallback(o =>\n        {\nThread.Sleep(500);\n            string tabs = new String('\\t', (int)o);\nConsole.WriteLine(\"{0}processing #{1}\", tabs, o);\n        }), number);\n}\n```", "```cs\nTask task = Task.Factory.StartNew(() =>\n    {\nThread.Sleep(1000);\nConsole.WriteLine(\"Hello, from the Task\");\n    });\n\nConsole.WriteLine(\"Hello, from the main thread\");\n\ntask.Wait();\n```", "```cs\nint[] numbers = { 1, 2, 3, 4 };\n```", "```cs\nvar tasks = numbers.Select(number =>\nTask.Factory.StartNew(() =>\n    {\nThread.Sleep(500);\n        string tabs = new String('\\t', number);\nConsole.WriteLine(\"{0}processing #{1}\", tabs, number);\n    }));\n```", "```cs\nTask.WaitAll(tasks.ToArray());\n```", "```cs\nvarwebTask = Task.Factory.StartNew(() =>\n    {\nWebClient client = new WebClient();\n        return client.DownloadString(\"http://bing.com\");\n    });\n\nvardbTask = Task.Factory.StartNew(() =>\n    {\n        // do a lengthy database query\n        return new\n        {\nWriteToConsole=true\n        };\n    });\n\nif (dbTask.Result.WriteToConsole)\n{\nConsole.WriteLine(webTask.Result);\n}\nelse\n{\nProcessWebResult(webTask.Result);\n}\n```", "```cs\nTask<string> task = Task.Factory.StartNew(() =>\n{\nWebClient client = new WebClient();\n    return client.DownloadString(\"http://bing.com\");\n});\n\ntask.ContinueWith(webTask =>\n    {\nConsole.WriteLine(webTask.Result);\n    });\n```", "```cs\nint[] numbers = { 1, 2, 3, 4, 5, 6 };\n\nvarmainTask = Task.Factory.StartNew(() =>\n    {\n        // create a new child task\nforeach (intnum in numbers)\n        {\nint n = num;\nTask.Factory.StartNew(() =>\n                {\nThread.SpinWait(1000);\nint multiplied = n * 2;\nConsole.WriteLine(\"Child Task #{0}, result {1}\", n, multiplied);\n                });\n        }\n    });\nmainTask.Wait();\nConsole.WriteLine(\"done\");\n```", "```cs\nChild Task #1, result 2\nChild Task #2, result 4\ndone\nChild Task #3, result 6\nChild Task #6, result 12\nChild Task #5, result 10\nChild Task #4, result 8\n\n```", "```cs\nint n = num;\nTask.Factory.StartNew(() =>\n    {\t\nint multiplied = n * 2;\n```", "```cs\nTask.Factory.StartNew(\n    () =>DoSomething(),\nTaskCreationOptions.AttachedToParent);\n```", "```cs\nTask t = Task.Factory.StartNew(() =>\n{\n    throw new Exception(\"fail\");\n});\n```", "```cs\ntry\n{\nt.Wait();\n}\ncatch (Exception ex)\n{\nConsole.WriteLine(ex.Message);\n}\n```", "```cs\ncatch (AggregateException ex)\n{\nforeach (var inner in ex.InnerExceptions)\n    {\nConsole.WriteLine(inner.Message);\n    }\n}\n```", "```cs\nTask.Factory.StartNew(() =>\n    {\n        throw new Exception(\"Fail\");\n    }).ContinueWith(t =>\n        {\n            // log the exception\nConsole.WriteLine(t.Exception.ToString());\n        }, TaskContinuationOptions.OnlyOnFaulted);\n```", "```cs\npublic async void DoSomethingAsync()\n{\nConsole.WriteLine(\"Async: method starting\");\n\nawaitTask.Delay(1000);\n\nConsole.WriteLine(\"Async: method completed\");\n}\n```", "```cs\nConsole.WriteLine(\"Parent: Starting async method\");\n\nDoSomethingAsync();\n\nConsole.WriteLine(\"Parent: Finished calling async method\");\n```", "```cs\nParent: Starting async method\nChild: Async method starting\nParent: Finished calling async method\nChild: Async method completed\n```", "```cs\npublic void DoSomethingAsyncWithTasks()\n{\nConsole.WriteLine(\"Child: Async method starting\");\n\nvar context = TaskScheduler.FromCurrentSynchronizationContext();\n\nTask.Delay(1000)\n        .ContinueWith(t =>\n            {\nConsole.WriteLine(\"Child: Async method completed\");\n            }, context);\n}\n```", "```cs\npublic asyncTask<string>GetStringAsynchronously()\n{\n    await Task.Delay(1000);\n\nreturn \"This string was delayed\";\n}\n```", "```cs\npublic async void CallAsynchronousStringMethod ()\n{\nstring value = await GetStringAsynchronously();\n\nConsole.WriteLine(value);\n}\n```", "```cs\nvar context = TaskScheduler.FromCurrentSynchronizationContext();\n\nGetStringAsynchronously()\n    .ContinueWith(task =>\n        {\nstring value = task.Result;\nConsole.WriteLine(value);\n        }, context);\n```", "```cs\nprivate async void Sample_04()\n{\n    Task<string>firstTask = GetAsyncString(\"first task\");\n    Task<string>secondTask = GetAsyncString(\"second task\");\n\n    await Task.WhenAll(firstTask, secondTask);\n\nConsole.WriteLine(\"done with both tasks\");\n}\n\npublic async Task<string>GetAsyncString(string value)\n{\nConsole.WriteLine(\"Starting task for '{0}'\", value);\n\n    await Task.Delay(1000);\n\n    return value;\n}\n```", "```cs\nprivate async Task ThisWillThrowAnException()\n{\nConsole.WriteLine(\"About to start an async task that throws an exception\");\n\n    await Task.Factory.StartNew(() =>\n    {\n        throw new Exception(\"fail\");\n    });\n}\n```", "```cs\ntry\n{\n    await ThisWillThrowAnException();\n}\ncatch (Exception ex)\n{\nConsole.WriteLine(ex.ToString());\n}\n```", "```cs\nvar block = new ActionBlock<string>(s =>\n{\nConsole.WriteLine(s);\n});\n```", "```cs\nfor (inti = 0; i< 30; i++)\n{\nblock.Post(\"Processing #\" + i.ToString());\n}\n```", "```cs\nTransformBlock<int, string> transform = new TransformBlock<int, string>(i =>\n    {\n        // take the integer input, and convert to a string\n        return string.Format(\"squared = {0}\", i * i);\n    });\n\nActionBlock<string> target = new ActionBlock<string>(value =>\n    {\n        // now use the string generated by the transform block\nConsole.WriteLine(value);\n    });\n\ntransform.LinkTo(target);\n\n```", "```cs\nfor (inti = 0; i< 30; i++) transform.Post(i);\n```", "```cs\nvar batch = new BatchBlock<string>(5);\n\nvar processor = new ActionBlock<string[]>(values =>\n    {\nConsole.WriteLine(\"Processing {0} items:\", values.Length);\nforeach (var item in values)\n      {\nConsole.WriteLine(\"\\titem: {0}\", item);\n      }\n    });\n\nbatch.LinkTo(processor);\n\nfor (inti = 0; i< 32; i++)\n{\nbatch.Post(i.ToString());\n}\n```", "```cs\n// manually trigger\nbatch.TriggerBatch();\n```", "```cs\nvar broadcast = new BroadcastBlock<string>(value =>\n{\n    return value;\n});\n\nbroadcast.LinkTo(new ActionBlock<string>(value =>Console.WriteLine(\"receiver #1: {0}\", value)));\nbroadcast.LinkTo(new ActionBlock<string>(value =>Console.WriteLine(\"receiver #2: {0}\", value)));\nbroadcast.LinkTo(new ActionBlock<string>(value =>Console.WriteLine(\"receiver #3: {0}\", value)));\nbroadcast.LinkTo(new ActionBlock<string>(value =>Console.WriteLine(\"receiver #4: {0}\", value)));\n\nbroadcast.Post(\"value posted\");\n```", "```cs\nprivate static async void WriteNumbersToStream(Stream stream, IEnumerable<int> numbers)\n{   \nStreamWriter writer = new StreamWriter(stream);\n\nforeach (intnum in numbers)\n    {\n        await writer.WriteLineAsync(num.ToString());   \n    }\n}\n```", "```cs\nprivate static async void WriteContentstoConsoleAsync(string filename)\n{\nFileStream file = File.OpenRead(filename);\n\nStreamReader reader = new StreamReader(file);\n    while (!reader.EndOfStream)\n    {\n        string line = await reader.ReadLineAsync();\nConsole.WriteLine(line);\n    }\n}\n```", "```cs\nprivate static final String TAG = \"NameOfThisClass\";\n```", "```cs\nLog.e(TAG, \"some log message\");\n```", "```cs\npublic void Log([CallerMemberName]string name = null)\n{\nConsole.WriteLine(\"The caller is named {0}\", name);\n}\n```"]