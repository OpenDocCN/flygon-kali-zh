- en: '*Chapter 8*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*'
- en: Advanced Data Structures in Java
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java中的高级数据结构
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this lesson, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课结束时，您将能够：
- en: Implement a linked list
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个链表
- en: Implement a Binary Search Tree
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现二叉搜索树
- en: Use enumerations to handle constants better
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用枚举更好地处理常量
- en: Explain the logic behind uniqueness in HashSet
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释HashSet中唯一性背后的逻辑
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous lessons, you learned about various data structures in Java,
    such as lists, sets, and maps. You also learned about how to iterate on the many
    data structures, compare objects in many different ways; and sort these collections
    in an efficient way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的课程中，您学习了Java中各种数据结构，如列表、集合和映射。您还学习了如何在许多不同的方式上迭代这些数据结构，比较对象；以及如何以高效的方式对这些集合进行排序。
- en: In this lesson, you will learn the implementation details of advanced data structures
    such as linked lists and binary search trees. As we progress, you'll also learn
    about a powerful concept called enumerations and explore how to use them effectively
    instead of constants. At the end of the lesson, you will gain an understanding
    of the magic and mystery behind `equals()` and `hashCode()`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，您将学习高级数据结构的实现细节，如链表和二叉搜索树。随着我们的进展，您还将了解一个称为枚举的强大概念，并探索如何有效地使用它们而不是常量。在课程结束时，您将了解`equals()`和`hashCode()`背后的魔力和神秘。
- en: Implementing a Custom Linked List
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现自定义链表
- en: 'A list has two implementations:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 列表有两种实现方式：
- en: '**ArrayList**: This is implemented using arrays as the underlying data structure.
    It comes with the same limitations as arrays.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ArrayList**：这是使用数组作为底层数据结构实现的。它具有与数组相同的限制。'
- en: '**Linked List**: Elements in linked lists are distributed across the memory,
    contrary to in an array, where they are contiguous.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链表**：链表中的元素分布在内存中，与数组不同，数组中的元素是连续的。'
- en: Disadvantages of ArrayList
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArrayList的缺点
- en: 'Disadvantages of ArrayList are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ArrayList的缺点如下：
- en: Though ArrayList is dynamic and the size need not be mentioned during creation.
    However as the size of arrays is fixed, therefore ArrayLists often need to be
    implicitly resized when more elements are added to the list. Resizing follows
    the procedure of creating a new array and adding all the elements of the previous
    array into a new array.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然ArrayList是动态的，创建时不需要指定大小。但是由于数组的大小是固定的，因此当向列表添加更多元素时，ArrayList通常需要隐式调整大小。调整大小遵循创建新数组并将先前数组的所有元素添加到新数组的过程。
- en: Inserting a new element at the end of the ArrayList is often faster than adding
    in between, however, it's expensive when elements are added in between the list,
    because room has to be created for the new elements, and to create room existing
    elements have to shift.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ArrayList的末尾插入新元素通常比在中间添加要快，但是当在列表中间添加元素时，代价很高，因为必须为新元素创建空间，并且为了创建空间，现有元素必须移动。
- en: Deleting the last element of the ArrayList is often faster, however, it's expensive
    when elements are deleted in between, because the element has to be adjusted,
    shifting elements to the left.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除ArrayList的最后一个元素通常更快，但是当在中间删除元素时，代价很高，因为元素必须进行调整，将元素向左移动。
- en: Advantages of Linked List over Arrays
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链表优于数组的优点
- en: 'The following are the advantages of linked lists over arrays:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是链表优于数组的优点：
- en: Dynamic sizing, as the size is not fixed, there are no resizing problems. Every
    node holds a reference to the next.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态大小，大小不固定，没有调整大小的问题。每个节点都持有对下一个节点的引用。
- en: Adding and deleting elements at random places within a linked list, is much
    simpler as compared to vectors and arrays.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在链表中随机位置添加和删除元素，与向量和数组相比要简单得多。
- en: In this topic, you will learn how to build a custom linked list for specific
    purposes. By doing this, we will appreciate the power of linked list and understand
    the implementation details as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本主题中，您将学习如何为特定目的构建自定义链表。通过这样做，我们将欣赏链表的强大之处，并了解实现细节。
- en: 'Here is a diagrammatic representation of a linked list:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是链表的图示表示：
- en: '![Figure 8.1: Representation of a linked list](img/C09581_09_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：链表的表示](img/C09581_09_01.jpg)'
- en: 'Figure 8.1: Representation of a linked list'
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.1：链表的表示
- en: Dynamic memory allocation is a popular application of linked lists. Other applications
    of linked lists include implementation of data structures such as stacks, various
    implementations of queues, graphs, trees and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 动态内存分配是链表的一个常见应用。链表的其他应用包括实现数据结构，如栈、各种队列的实现、图、树等。
- en: 'Exercise 31: Adding Elements to a Linked list'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习31：向链表添加元素
- en: 'Let''s create a simple linked list that allows us to add integers, and print
    the elements in the list:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的链表，允许我们添加整数，并打印列表中的元素：
- en: 'Create a class `SimpleIntLinkedList` as follow:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`SimpleIntLinkedList`的类如下：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create another class `Node` that represents each element in a linked list.
    Each node will have data (an Integer value) that it needs to hold; and it will
    have a reference to the next `Node`. Implement getters and setter for the data
    and the `next` variable:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个代表链表中每个元素的`Node`类。每个节点都有数据（一个整数值）需要保存；它将有一个对下一个`Node`的引用。实现数据和`next`变量的getter和setter：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Implement the `add(Object item)` method so that any item/object can be added
    into this list. Construct a new `Node` object by passing the `newItem = new Node(item)`
    item. Start with the `head` node, and move towards the end of the list, visiting
    each node. In the last node, set the next node as our newly created node (`newItem`).
    Increment the index by invoking `incrementIndex()` to keep track of the index:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`add(Object item)`方法，以便可以将任何项目/对象添加到此列表中。通过传递`newItem = new Node(item)`项目构造一个新的`Node`对象。从`head`节点开始，向列表的末尾移动，访问每个节点。在最后一个节点中，将下一个节点设置为我们新创建的节点（`newItem`）。通过调用`incrementIndex()`来增加索引以跟踪索引：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Implement a `toString()` method to represent this object. Starting from the
    `head` node, iterate all the nodes until the last node is found. On each iteration,
    construct a string representation of an Integer stored in each node. The representation
    will look similar to this: `[Input1,Input2,Input3]`'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个toString()方法来表示这个对象。从头节点开始，迭代所有节点直到找到最后一个节点。在每次迭代中，构造存储在每个节点中的整数的字符串表示。表示将类似于这样：[Input1,Input2,Input3]
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create a member attribute of type `Node` (pointing to the `head` node) for the
    `SimpleIntLinkedList`. In the `main` method, create an object of `SimpleIntLinkedList`
    and add five integers one after the other (13, 39, 41, 93, 98) into it respectively.
    Print the `SimpleIntLinkedList` object.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为SimpleIntLinkedList创建一个类型为Node的成员属性（指向头节点）。在main方法中，创建一个SimpleIntLinkedList对象，并依次添加五个整数（13,
    39, 41, 93, 98）到其中。打印SimpleIntLinkedList对象。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will be as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Activity 32: Creating a Custom Linked List in Java'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动32：在Java中创建自定义链表
- en: In our exercise, we created a Linked list that could take Integer values. As
    an activity, let's create a custom linked list that can take any object into it
    and display all the elements added to the list. Additionally, let's add two more
    methods to get and remove the values from the linked list.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的练习中，我们创建了一个可以接受整数值的链表。作为一个活动，让我们创建一个自定义链表，可以将任何对象放入其中，并显示添加到列表中的所有元素。此外，让我们添加另外两种方法来从链表中获取和删除值。
- en: 'These steps will help you complete this activity:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤将帮助您完成此活动：
- en: Create a class name `SimpleObjLinkedList` and create a member attribute of type
    Node (pointing to the head node). Add a member attribute of type `int` (pointing
    to the current index or position in a node)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为SimpleObjLinkedList的类，并创建一个类型为Node的成员属性（指向头节点）。添加一个类型为int的成员属性（指向节点中的当前索引或位置）
- en: Create a class Node that represents each element in a Linked List. Each node
    will have an object that it needs to hold and it will have the reference to the
    next Node. The `LinkedList` class will have a reference to the head node and will
    be able to traverse to the next Node by using `Node.getNext()`. Because `head`
    is the first element, we could traverse to the next element by moving next in
    the `current` node. Like this, we could traverse till the last element of the
    list.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个表示链表中每个元素的Node类。每个节点将有一个需要保存的对象，并且它将有对下一个节点的引用。LinkedList类将有一个对头节点的引用，并且可以使用Node.getNext()来遍历到下一个节点。因为头是第一个元素，我们可以通过在当前节点中移动next来遍历到下一个元素。这样，我们可以遍历到列表的最后一个元素。
- en: Implement the `add(Object item)` method so that any item/object could be added
    to this list. Construct a new `Node` object by passing the `newItem = new Node(item)`
    item. Starting at the `head` node, crawl to the end of the list. In the last node,
    set the `next` node as our newly created node (`newItem`). Increment the index.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现add(Object item)方法，以便可以向该列表添加任何项目/对象。通过传递newItem = new Node(item)项目来构造一个新的Node对象。从头节点开始，爬行到列表的末尾。在最后一个节点中，将next节点设置为我们新创建的节点(newItem)。增加索引。
- en: Implement the `get(Integer index)` method to retrieve the item from the list
    based on the index. Index must not be less than 0\. Write logic to crawl to the
    specified index and identify the node and return the value from the node.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现get(Integer index)方法，根据索引从列表中检索项目。索引不能小于0。编写逻辑来爬行到指定的索引并识别节点并从节点返回值。
- en: Implement the `remove(Integer index)` method to remove the item from the list
    based on the index. Write logic to crawl to the one node before the specified
    index and identify the node. In this node, set the next as `getNext()`.Return
    true if the element was found and deleted. If element not found, return false.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现remove(Integer index)方法，根据索引从列表中删除项目。编写逻辑来爬行到指定索引的前一个节点并识别节点。在此节点中，将下一个设置为getNext()。如果找到并删除元素，则返回true。如果未找到元素，则返回false。
- en: Implement a `toString()` method to represent this object. Starting from head
    Node, iterate all the nodes until the last node is found. On each iteration construct
    a string representation of the object stored in each node.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个toString()方法来表示这个对象。从头节点开始，迭代所有节点直到找到最后一个节点。在每次迭代中，构造存储在每个节点中的对象的字符串表示。
- en: Write a `main` method and add create an object of `SimpleObjLinkedList` and
    add five Strings one after the other ("INPUT-1", "INPUT-2", "INPUT-3", "INPUT-4","INPUT-5")
    into it respectively. Print the `SimpleObjLinkedList` object. In the main method,
    get the item from the list using `get(2)` and print the value of the item retrieved,
    also remove the item from the list `remove(2)` and print the value of the list.
    One element should have been deleted from the list.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个main方法，创建一个SimpleObjLinkedList对象，并依次添加五个字符串（"INPUT-1"，"INPUT-2"，"INPUT-3"，"INPUT-4"，"INPUT-5"）到其中。打印SimpleObjLinkedList对象。在main方法中，使用get(2)从列表中获取项目并打印检索到的项目的值，还从列表中删除项目remove(2)并打印列表的值。列表中应该已经删除了一个元素。
- en: 'The output will be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 356.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第356页找到。
- en: Drawbacks of Linked List
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链表的缺点
- en: 'The drawbacks of linked lists are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 链表的缺点如下：
- en: The only way to access elements is starting from the first element, and moving
    sequentially; accessing an element at random is not possible.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问元素的唯一方法是从第一个元素开始，然后顺序移动；无法随机访问元素。
- en: Searching is slow.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索速度慢。
- en: Linked lists require extra space in the memory.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链表需要额外的内存空间。
- en: Implementing Binary Search Tree
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现二叉搜索树
- en: We already had a brief look at trees in *Lesson 7*, *The Java Collections Framework
    and Generics* let's look at a special implementation of trees known as **binary
    search trees (BSTs)**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第7课中已经简要介绍了树，Java集合框架和泛型，让我们看看树的一种特殊实现，称为二叉搜索树（BSTs）。
- en: To understand BSTs, let's take a look at what binary tree is. A tree in which
    each node in the tree has at most two child nodes, is a **binary tree**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解BSTs，让我们看看什么是二叉树。树中每个节点最多有两个子节点的树是**二叉树**。
- en: 'A BST is a special implementation of a binary tree, where the left-child node
    is always less than or equal to the parent node, and the right-child node is always
    greater than or equal to the parent node. This unique structure of the binary
    search tree makes it easier to add, delete, and search for elements of the tree.
    The following diagram represents a BST:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: BST是二叉树的一种特殊实现，其中左子节点始终小于或等于父节点，右子节点始终大于或等于父节点。二叉搜索树的这种独特结构使得更容易添加、删除和搜索树的元素。以下图表表示了BST：
- en: '![Figure 8.2: Representation of a binary search tree](img/C09581_09_02.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：二叉搜索树的表示](img/C09581_09_02.jpg)'
- en: 'Figure 8.2: Representation of a binary search tree'
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.2：二叉搜索树的表示
- en: 'The applications of binary search tree are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉搜索树的应用如下：
- en: To implement a dictionary.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现字典。
- en: To implement multilevel indexing in a database.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中实现多级索引。
- en: To implement a searching algorithm.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现搜索算法。
- en: 'Exercise 32: Creating a Binary Search Tree in Java'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习32：在Java中创建二叉搜索树
- en: In this exercise, we will create a binary search tree and implement left and
    right traversal.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个二叉搜索树并实现左右遍历。
- en: Create a `BinarySearchTree` class with a `Node` class in it. The `Node` class
    should have two elements pointing to its left and right node.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中创建一个`BinarySearchTree`类，其中包含一个`Node`类。`Node`类应该有两个指向其左节点和右节点的元素。
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will create a `add(int data)` function, which will check whether the parent
    node is empty. If it is empty, it will add the value to the parent node. If the
    parent node has data, we need to create a new `Node(data)` and find the right
    node (according to the BST rule) to attach this new node.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个`add(int data)`函数，它将检查父节点是否为空。如果为空，它将将值添加到父节点。如果父节点有数据，我们需要创建一个新的`Node(data)`并找到正确的节点（根据BST规则）将此新节点附加到。
- en: To help find the right node, a method, `add(Node root, Node newNode)`, has been
    implemented to use the recursive logic to go deeper and find the actual node to
    which this new node should belong.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助找到正确的节点，已经实现了一个方法`add(Node root, Node newNode)`，使用递归逻辑深入查找实际应该属于这个新节点的节点。
- en: 'As per BST rules, if the root data is greater than the `newNode` data, then
    `newNode` has to be added to the left Node. Again, recursively check whether it
    has child nodes, and the same logic of BST applies until it reaches the leaf node
    to add a value. If the root data is less than the `newNode` data, `newNode` has
    to be added to the right node. Again, recursively check whether it has child nodes,
    and the same logic of BST applies until it reaches the leaf node to add a value:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根据BST规则，如果根数据大于`newNode`数据，则`newNode`必须添加到左节点。再次递归检查是否有子节点，并且BST的相同逻辑适用，直到达到叶节点以添加值。如果根数据小于`newNode`数据，则`newNode`必须添加到右节点。再次递归检查是否有子节点，并且BST的相同逻辑适用，直到达到叶节点以添加值：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a `traverseLeft()` function to traverse and print all the values of
    the BST in the left-hand side of the root node:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`traverseLeft()`函数来遍历并打印BST根节点左侧的所有值：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `traverseRight()` function to traverse and print all the values of
    the BST on the right-hand side of the root node:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`traverseRight()`函数来遍历并打印BST根节点右侧的所有值：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s create an example program to test the functionality of the BST:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个示例程序来测试BST的功能：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Activity 33: Implementing the Methods in the BinarySearchTree Class to Find
    the Highest and Lowest Value in the BST'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动33：在BinarySearchTree类中实现查找BST中最高和最低值的方法
- en: Create a method, `getLow()`, that implements a `while` loop to iteratively check
    whether the parent node has any left children, and returns the node with no left
    child in the left BST as the lowest value.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实现`while`循环的`getLow()`方法，以迭代检查父节点是否有左子节点，并将左侧BST中没有左子节点的节点作为最低值返回。
- en: Create a method, `getHigh()`, that implements a `while` loop to iteratively
    check if the parent node has any right children, and returns the node with no
    right child in the right BST as the highest value.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个实现`while`循环的`getHigh()`方法，以迭代检查父节点是否有右子节点，并将右侧BST中没有右子节点的节点作为最高值返回。
- en: In the `main` method, add elements to the binary search tree, using the `add`
    method implemented earlier and call the `getLow()` and the `getHigh()` methods
    to identify the highest and the lowest values.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，使用之前实现的`add`方法向二叉搜索树添加元素，并调用`getLow()`和`getHigh()`方法来识别最高和最低值。
- en: 'The output will be as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 360.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第360页找到。
- en: Enumerations
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 枚举
- en: Enumeration in Java (or enum) is a special type in Java whose fields consist
    of constants. It is used to impose compile-time safety.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Java中的枚举（或枚举）是Java中的一种特殊类型，其字段由常量组成。它用于强制编译时安全性。
- en: 'For example, consider the days of the week, they are a set of fixed constants,
    therefore we can have an enum defined:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一周的天数，它们是一组固定的常量，因此我们可以定义一个枚举：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can simply check if a variable that stores a day is part of the declared
    enum. We can also declare enums for non-universal constants, such as:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以简单地检查存储一天的变量是否是声明的枚举的一部分。我们还可以为非通用常量声明枚举，例如：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will enforce the job-type to be the constants declared in the `Jobs` enum.
    Here''s an example enum holding currencies:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将强制将作业类型设置为`Jobs`枚举中声明的常量。这是一个持有货币的示例枚举：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Exercise 33: Using Enum to Store Directions'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习33：使用枚举存储方向
- en: We will create an enum and will find values and compare enums.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个枚举并找到值并比较枚举。
- en: 'Create a class `EnumExample` and in the `main` method. Get and print the enum
    using the value as enum. Get and print enum using the values as String:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类`EnumExample`，并在`main`方法中。使用值作为枚举获取并打印枚举。使用值作为字符串获取并打印枚举：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s create a enum holding directions with an integer value representing
    the directions:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个枚举，其中包含具有表示方向的整数值：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Activity 34: Using an Enum to Hold College Department Details'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动34：使用枚举保存学院部门详情
- en: Let's build a full-fledged enum to hold college departments and their numbers
    `(BE ("Bachelor of Engineering", 100))`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个完整的枚举来保存学院部门及其编号（BE（“工程学士”，100））。
- en: 'Perform the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Create a `DeptEnum` enum using the `enum` keyword. Add two private attributes
    (String `deptName` and int `deptNo`) to hold the values to be kept in the enum.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`enum`关键字创建`DeptEnum`枚举。添加两个私有属性（String `deptName`和int `deptNo`）来保存枚举中的值。
- en: . Override a constructor to take an acronym and `deptNo` and place it in the
    member variables. Add enum constants adhering to the constructor.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 。重写一个构造函数以接受缩写和`deptNo`并将其放入成员变量中。添加符合构造函数的枚举常量。
- en: Add getter methods for `deptName` and `deptNo`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`deptName`和`deptNo`的getter方法。
- en: 'Let''s write a `main` method and sample program to demonstrate the use of enums:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写一个`main`方法和示例程序来演示枚举的使用：
- en: 'Output will be as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 362.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这项活动的解决方案可以在第362页找到。
- en: 'Activity 35: Implementing Reverse Lookup'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动35：实现反向查找
- en: Write an application that takes in a value of
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个应用程序，接受一个值
- en: Create an enum `App`, that declares constants BE, BCOM, BSC and BARC, along
    with their full forms and department numbers.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个枚举`App`，声明常量BE、BCOM、BSC和BARC，以及它们的全称和部门编号。
- en: Also declare two private variables `accronym` and `deptNo`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还声明两个私有变量`accronym`和`deptNo`。
- en: Create a parameterized constructor and assign the variables `accronym` and `deptNo`
    with values passed as arguments.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有缩写和`deptNo`的参数化构造函数，并将它们分配给作为参数传递的变量。
- en: Declare a public method `getAccronym()` that returns the variable `accronym`
    and a public method `getDeptNo()` that returns the variable `deptNo`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个公共方法`getAccronym（）`，返回变量`accronym`，以及一个公共方法`getDeptNo（）`，返回变量`deptNo`。
- en: Implement reverse look up that takes in the course name, and searches the corresponding
    acronym in the `App` enum.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现反向查找，接受课程名称，并在`App`枚举中搜索相应的缩写。
- en: Implement the main method, and run the program.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`main`方法，并运行程序。
- en: 'Your output should be similar to:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出应该类似于：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 363.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这项活动的解决方案可以在第363页找到。
- en: Set and Uniqueness in Set
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合和集合中的唯一性
- en: In this topic, we are going to learn the logic behind a set that finds the uniqueness
    of an object being added and understand the importance of two object-level methods.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将学习集合背后找到正在添加的对象的唯一性的逻辑，并理解两个对象级方法的重要性。
- en: The magic lies in two methods of the `Object` class
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 魔术在于`Object`类的两个方法
- en: '`hashCode()`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashCode（）`'
- en: '`equals()`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals（）`'
- en: Basic Rules for the equals() and hashCode() Methods
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: equals（）和hashCode（）方法的基本规则
- en: Two objects can be identical only when the value returned using the `hashcode()`
    method is identical and the `equal()` method returns true.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当使用`hashcode（）`方法返回的值相同并且`equal（）`方法返回true时，两个对象才能相同。
- en: If the two objects return the same `hashCode()` value, it doesn't necessarily
    mean both objects are the same (as hash values may collide with other objects
    as well). In that case, it's necessary to find the equality by calling `equals()`
    and verifying the identity.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个对象返回相同的`hashCode（）`值，并不一定意味着两个对象相同（因为哈希值也可能与其他对象发生冲突）。在这种情况下，需要调用`equals（）`并验证身份来找到相等性。
- en: We can't use `hashCode()` alone to find out the equality; we need to use `equals()`
    as well to do this. However, `hashCode()` alone is enough to find the inequality.
    If the `hashCode()` returns different values, it's safe to consider the objects
    different.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能仅仅使用`hashCode（）`来找到相等性；我们需要同时使用`equals（）`来做到这一点。然而，仅仅使用`hashCode（）`就足以找到不相等性。如果`hashCode（）`返回不同的值，可以肯定这些对象是不同的。
- en: Adding an Object to a Set
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向集合添加对象
- en: 'Though many things happen when we add an object into a set, we will just look
    at details related to our subject of study:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管当我们将一个对象添加到集合中时会发生许多事情，但我们只会关注与我们的研究主题相关的细节：
- en: The method first calls the `hashCode()` method on that object and gets the `hashCode`,
    then `Set` compares it to the `hashCode` of other objects and checks whether any
    object matches that `hashCode`.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法首先调用该对象的`hashCode（）`方法并获取`hashCode`，然后`Set`将其与其他对象的`hashCode`进行比较，并检查是否有任何对象匹配该`hashCode`。
- en: If none of the objects in the set match the `hashCode` of the added object,
    then we can be 100% confident that no other object is available with the same
    identity. A newly added object will be added safely to the set (without needing
    to check `equals()`).
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果集合中没有任何对象与添加对象的`hashCode`匹配，那么我们可以百分之百地确定没有其他对象具有相同的身份。新添加的对象将安全地添加到集合中（无需检查`equals（）`）。
- en: If any of the objects match the `hashCode` of the object added, it means it
    might be an identical object added (as `hashCode` may be the same for two different
    objects). In this case, to confirm the suspicion, it will use the `equals()` method
    to see if the objects are really equal. If equal, the newly added object will
    not be rejected, else newly added objected will be rejected.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果任何对象与添加的对象的`hashCode`匹配，这意味着可能添加了相同的对象（因为`hashCode`可能对于两个不同的对象是相同的）。在这种情况下，为了确认怀疑，它将使用`equals（）`方法来查看对象是否真的相等。如果相等，则新添加的对象将不被拒绝，否则新添加的对象将被拒绝。
- en: 'Exercise 34: Understanding the Behavior of equals() and hashCode()'
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习34：了解equals（）和hashCode（）的行为
- en: 'Let''s create a new class and walk through the behavior of `Set` before implementing
    `equals()` and `hashCode()`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的类，并在实现`equals（）`和`hashCode（）`之前了解`Set`的行为：
- en: 'Create a Student class with three attributes: `Name` (`String`), `Age` (`int`),
    and `Year of passing` (`int`). Also create getters and setters for these private
    members:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有三个属性的Student类：`Name`（`String`），`Age`（`int`）和`Year of passing`（`int`）。还为这些私有成员创建getter和setter：
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Write a sample class, `HashCodeExample`, to demonstrate the set behavior. In
    the main method, create three objects of `Students` with different names and other
    details (Raymonds, Allen, and Maggy):'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个示例类`HashCodeExample`，以演示集合的行为。在主方法中，创建三个具有不同名称和其他详细信息的`Students`对象（Raymonds，Allen和Maggy）：
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a `HashSet` to hold these students'' objects (`set`). Add the three
    objects, one after the other, to the `HashSet`. Then, print the values in the
    `HashSet`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`HashSet`来保存这些学生对象（`set`）。一个接一个地将三个对象添加到`HashSet`中。然后，打印`HashSet`中的值：
- en: '[PRE24]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `main` method, create another `Student` object resembling one of the
    three objects created (for example: let''s create a student, similar to Allen).
    Add this newly created `Student` object to the `HashSet` in which three students
    have already been `added(set)`. Then, print the values in the `HashSet`. You will
    notice that Allen has been added into the set twice (which means duplicates were
    not handled in the Set):'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，创建另一个类似于已创建的三个对象的`Student`对象（例如：让我们创建一个类似于Allen的学生）。将这个新创建的`Student`对象添加到已经`添加（set）`了三个学生的`HashSet`中。然后，打印`HashSet`中的值。您会注意到Allen已经被添加到集合中两次（这意味着集合中未处理重复项）：
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`Allen` has indeed been added to the set twice (which means duplicates have
    not been handled in the Set yet). It needs to be handled in `Student` class.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`Allen`确实已经被添加到集合中两次（这意味着集合中尚未处理重复项）。这需要在`Student`类中处理。'
- en: 'Exercise 35: Overriding equals() and hashCode()'
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习35：重写equals()和hashCode()
- en: 'Let''s override `equals()` and `hashCode()` for `Student` and see how the behavior
    of Set changes after this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写`Student`的`equals()`和`hashCode()`，看看这之后`Set`的行为如何改变：
- en: 'In the `Students` class, let''s override the `equals()` method by checking
    each attribute of the `Student` object (`name`, `age`, and `yearOfPassing` are
    of equal importance to verify the identity). The `equals()` method in the `Object`
    level takes `Object` as an argument. To override the method, we need to provide
    logic with which we compare the self-attribute (`this`) to the `object o` argument.
    The logic of equality here is that two students are said be identical if, and
    only if, their `name`, `age`, and `yearOfPassing` is the same:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Students`类中，让我们通过检查`Student`对象的每个属性（`name`，`age`和`yearOfPassing`同等重要）来重写`equals()`方法。`Object`级别的`equals()`方法以`Object`作为参数。要重写该方法，我们需要提供逻辑，用于比较自身属性（`this`）和`object
    o`参数。这里的相等逻辑是，只有当他们的`name`，`age`和`yearOfPassing`相同时，两个学生才被认为是相同的：
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `Student` class, let''s override the `hashCode()` method. The basic
    requirement is it should return the same integer for identical objects. One simple
    way to implement `hashCode` is taking the `hashCode` of each attribute in the
    object and summing it up. The rationale behind this is, if the `name`, `age`,
    or `yearOfPassing` is different, then `hashCode` will return different values,
    and it will be evident that no two objects are the same:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Student`类中，让我们重写`hashCode()`方法。基本要求是对于相同的对象应该返回相同的整数。实现`hashCode`的一种简单方法是获取对象中每个属性的`hashCode`并将其相加。其背后的原理是，如果`name`，`age`或`yearOfPassing`不同，那么`hashCode`将返回不同的值，这将表明没有两个对象是相同的：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Let's run the main method of `HashCodeExample` to demonstrate the behavior of
    the set after overriding `equals()` and `hashCode()` in the Student object.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行`HashCodeExample`的主方法，以演示在`Student`对象中重写`equals()`和`hashCode()`之后集合的行为。
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output is as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: After adding `hashCode()` and `equals()`, our `HashSet` has the intelligence
    to identify and remove duplicates.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加`hashCode()`和`equals()`之后，我们的`HashSet`有智能识别和删除重复项的能力。
- en: If we don't override `equals()` and `hashCode()`, JVM assigns a unique hash
    code value to each object when they are created in memory, and if developers don't
    override the `hashcode` method, then there is no guarantee that the two objects
    return the same hash code value.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不重写`equals()`和`hashCode()`，JVM在内存中创建对象时为每个对象分配一个唯一的哈希码值，如果开发人员不重写`hashcode`方法，那么就无法保证两个对象返回相同的哈希码值。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this lesson, we learned what a BST is and the steps to implement the basic
    functionalities of a BST in Java. We also learned a technique to traverse a BST
    to the right and left. We looked at the use of enums over constants and gained
    an understanding of the types of problems they solve. We also built our own enums
    and wrote code to fetch and compare the values of enums.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这节课中，我们学习了BST是什么，以及在Java中实现BST的基本功能的步骤。我们还学习了一种遍历BST向右和向左的技巧。我们看了枚举在常量上的用法，并了解了它们解决的问题类型。我们还建立了自己的枚举，并编写了代码来获取和比较枚举的值。
- en: We also learned how `HashSet` is able to identify duplicates and looked at the
    significance of overriding `equals()` and `hashCode()`. Also, we learned how to
    correctly implement `equals()` and `hashCode()`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了`HashSet`如何识别重复项，并看了重写`equals()`和`hashCode()`的重要性。此外，我们学会了如何正确实现`equals()`和`hashCode()`。
