- en: Chapter 3. Exploring Android Studio and the Project Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。探索Android Studio和项目结构
- en: In this chapter, we will create and run two more Android projects. The purpose
    of these exercises is to explore Android Studio and the structure of Android projects
    more deeply.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建并运行另外两个Android项目。这些练习的目的是更深入地探索Android Studio和Android项目的结构。
- en: When we build our apps ready for deployment, the code and the resource files
    need to be packed away as they are in the APK file. Therefore, all the layout
    files and other resources, which we will be looking at soon, need to be in the
    correct structures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建应用程序准备部署时，代码和资源文件需要像在APK文件中那样打包起来。因此，所有布局文件和其他资源（我们很快将要看到的）都需要处于正确的结构中。
- en: Fortunately, Android Studio handles this for us when we create a project from
    a template. However, we still need to know how to find and amend these files,
    how to add our own and sometimes remove the files created by Android Studio, and
    how the resource files are interlinked – sometimes with each other, and sometimes
    with the Kotlin code (that is, the autogenerated Kotlin code, as well as our own).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，当我们从模板创建项目时，Android Studio会为我们处理这些。然而，我们仍然需要知道如何找到和修改这些文件，如何添加我们自己的文件，有时还需要删除Android
    Studio创建的文件，以及资源文件如何相互关联 - 有时是彼此之间，有时是与Kotlin代码（即自动生成的Kotlin代码以及我们自己的代码）之间。
- en: Along with understanding the composition of our projects, it will also be beneficial
    to make sure that we get the most from the emulator.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了了解我们项目的组成，确保我们充分利用模拟器也将是有益的。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Emulators are particularly useful when you want to make sure that your app will
    work on hardware that you don't own. Also, learning about some of the latest features
    (as we will in this book) often requires the latest handset, and an emulator is
    a cost-effective way of following along with all the mini-apps without buying
    the latest phone.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器在您希望确保您的应用程序在您未拥有的硬件上运行时特别有用。此外，了解一些最新功能（正如我们将在本书中了解到的）通常需要最新的手机，模拟器是一种经济有效的方式，可以让您在不购买最新手机的情况下跟随所有迷你应用程序。
- en: 'In this chapter, we will do the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将执行以下操作：
- en: Explore the file and folder structure of the **Empty Activity** project template.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索**空活动**项目模板的文件和文件夹结构。
- en: See the difference between the **Empty Activity** and the **Basic Activity**
    templates.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看**空活动**和**基本活动**模板之间的区别。
- en: Find out how to get the most from the emulator.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何充分利用模拟器。
- en: This chapter will leave us in a good position to build and deploy multiple different
    layouts in the next chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使我们能够在下一章中构建和部署多个不同的布局。
- en: A quick guided tour of Android Studio
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Studio快速导览
- en: 'To get started, take a look at this annotated diagram of Android Studio. We
    will reacquaint ourselves with the parts that we have already seen, and learn
    about the parts that we have not yet discussed:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请查看Android Studio的这个带注释的图解。我们将重新熟悉我们已经看过的部分，并了解我们尚未讨论的部分：
- en: '![A quick guided tour of Android Studio](img/B12806_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio快速导览](img/B12806_03_01.jpg)'
- en: 'It will be useful to formally point out and name the various parts of the Android
    Studio **User Interface** (**UI**), so that I can refer to them by name, rather
    than describing their location and showing screenshots all the time. So, let''s
    run through them from number **1**:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正式指出并命名Android Studio**用户界面**（**UI**）的各个部分将是有益的，这样我就可以按名称引用它们，而不是一直描述它们的位置并展示截图。因此，让我们从**1**开始逐个介绍它们：
- en: This is the **Project** window and will be the main focus of this chapter. It
    enables us to explore the folders, code, and resources of the project and is also
    referred to as the Project Explorer window. Double-click on a file here to open
    the file and add a new tab to area **3** on the diagram. The structure of the
    files and folders here closely resembles the structure that will eventually end
    up in the finished APK file.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是**项目**窗口，也是本章的主要焦点。它使我们能够探索项目的文件夹、代码和资源，并且也被称为项目资源管理器窗口。在这里双击一个文件以打开文件并在图中的区域**3**添加一个新标签。这里的文件和文件夹结构与最终打包到完成的APK文件中的结构非常相似。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As we will see, while the structure of folders for an Android project remains
    the same, the files, filenames, and contents of the files vary considerably. Therefore,
    we will explore two projects in this chapter, and then look at more projects as
    we progress through the book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将看到的，虽然Android项目的文件夹结构保持不变，但文件、文件名和文件内容差异很大。因此，在本章中，我们将探索两个项目，然后随着我们在本书中的进展，再看更多的项目。
- en: This is the **Editor** window. As we have already seen, the **Editor** window
    takes on a few different forms depending on what it is that we are editing. If
    we are editing Kotlin, then we can see our code neatly formatted and ready for
    editing; if we are designing a UI, then it offers us either a visual editing view
    or a text/XML code view. You can also view and edit graphics and other files in
    this window.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是**编辑器**窗口。正如我们已经看到的，**编辑器**窗口会根据我们正在编辑的内容而呈现出不同的形式。如果我们正在编辑Kotlin，那么我们可以看到我们的代码被整齐地格式化并准备好进行编辑；如果我们正在设计UI，则它会为我们提供可视化编辑视图或文本/XML代码视图。您还可以在此窗口中查看和编辑图形和其他文件。
- en: These tabs allow us switch between the different files in our project. The **Editor**
    window will display the file we select here. We can add another tab to this section
    by double-clicking on the file in the **Project** window.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些标签允许我们在项目中不同的文件之间切换。**编辑器**窗口将显示我们在这里选择的文件。我们可以通过在**项目**窗口中双击文件来在此部分添加另一个标签。
- en: This allows us to switch between the **Design** and **Text** (code) view on
    the file that is currently being edited.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使我们能够在当前正在编辑的文件的**设计**和**文本**（代码）视图之间切换。
- en: This window varies depending upon the option selected in part **6** of the diagram.
    Typically, in this book, we will switch between the **Build** window to see that
    our project has been compiled and launched without errors, and the **Logcat**
    window to view the debugging output and any errors or crash reports from our apps.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个窗口根据图表第6部分中选择的选项而有所不同。通常，在本书中，我们会在**构建**窗口和**Logcat**窗口之间切换，以查看我们的项目是否已经编译和启动，以及调试输出和应用程序的任何错误或崩溃报告。
- en: This area of the UI is used to switch between the different displays described
    in part **5**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个UI区域用于在第5部分描述的不同显示之间进行切换。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are even more tabs in Android Studio, but we won't need them in the context
    of this book.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中有更多的选项卡，但在本书的上下文中我们不需要它们。
- en: Now that we know how to unambiguously refer to the various parts of the UI,
    let's turn our attention to the **Project**/**Project Explorer** window.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何明确地引用UI的各个部分，让我们把注意力转向**项目**/**项目资源管理器**窗口。
- en: Project Explorer and project anatomy
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目资源管理器和项目解剖
- en: When we create a new Android project, we most often do so with a project template,
    just as we did in [Chapter 1](ch01.html "Chapter 1. Getting Started with Android
    and Kotlin"), *Getting Started with Android and Kotlin*. The template that we
    use determines the exact selection and contents of the files that Android Studio
    will generate. While there are big similarities across all projects that are worth
    noting, seeing the differences can also help. Let's build two different template
    projects and examine the files, their contents, and how they are all linked together
    through the code (XML and Kotlin).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个新的Android项目时，我们通常会使用项目模板，就像我们在[第1章](ch01.html "第1章。开始使用Android和Kotlin")中所做的那样，*开始使用Android和Kotlin*。我们使用的模板决定了Android
    Studio将生成的文件的精确选择和内容。虽然所有项目之间存在很大的相似之处值得注意，但了解差异也有帮助。让我们构建两个不同的模板项目，并检查文件、它们的内容以及通过代码（XML和Kotlin）如何链接在一起。
- en: The Empty Activity project
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空活动项目
- en: The simplest project type with an autogenerated UI is the **Empty Activity**
    project. Here, the UI is empty, but it is ready to be added to. It is also possible
    to generate a project without a UI at all. When we create a project, even with
    an empty UI, Android Studio autogenerates the Kotlin code to display the UI. Therefore,
    when we add to it, it is ready to be displayed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的项目类型是自动生成UI的**空活动**项目。在这里，UI是空的，但可以添加内容。也可以生成一个完全没有UI的项目。当我们创建一个项目时，即使UI为空，Android
    Studio也会自动生成Kotlin代码来显示UI。因此，当我们添加内容时，它已经准备好显示。
- en: 'Let''s create an **Empty Activity** project. This is almost the same process
    as we did in [Chapter 1](ch01.html "Chapter 1. Getting Started with Android and
    Kotlin"), *Getting Started with Android and Kotlin*, but with one slight difference
    that I will point out:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个**空活动**项目。这几乎与我们在[第1章](ch01.html "第1章。开始使用Android和Kotlin")中所做的过程相同，*开始使用Android和Kotlin*，但有一个我会指出的细微差别：
- en: In Android Studio, select **File** | **New** | **New Project…**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中，选择**文件** | **新建** | **新项目…**。
- en: On the **Choose your project** screen, select the **Empty Activity** template
    and click on **Next**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择您的项目**屏幕上，选择**空活动**模板，然后点击**下一步**。
- en: Change the **Name** field to `Empty Activity App`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**名称**字段更改为`空活动应用`。
- en: Choose the same package name and save location as the previous project.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择与上一个项目相同的包名称和保存位置。
- en: Be sure to select **Kotlin** as the language.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择**Kotlin**作为语言。
- en: Check the **Use AndroidX artifacts** checkbox as we did previously.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**使用AndroidX构件**复选框，就像我们之前做的那样。
- en: The remaining settings can be left to their default settings, so just click
    on **Next**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其余设置可以保留为默认设置，所以只需点击**下一步**。
- en: Android Studio will generate all the code and other project resources. Now we
    can see what has been generated and compare it to what we expected in the project
    explorer window.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio将生成所有代码和其他项目资源。现在我们可以看到已生成的内容，并将其与项目资源管理器窗口中的预期内容进行比较。
- en: 'If the emulator is not already running, launch it by selecting **Tools** |
    **AVD Manager** and then start your emulator in the **Android Virtual Devices**
    window. Run the app on the emulator by clicking on the play button in the quick
    launch bar:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模拟器尚未运行，请通过选择**工具** | **AVD管理器**来启动它，然后在**Android虚拟设备**窗口中启动您的模拟器。通过在快速启动栏中点击播放按钮在模拟器上运行应用程序：
- en: '![The Empty Activity project](img/B12806_03_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![空活动项目](img/B12806_03_03.jpg)'
- en: 'Take a look at the app and notice how it is a little bit different to that
    of the first project. It is, well, empty; there is no menu at the top, and no
    floating button at the bottom. It does, however, still have the **Hello World!**
    text:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个应用程序，注意它与第一个项目有些不同。它是空的；顶部没有菜单，底部没有浮动按钮。但是，它仍然有**Hello World!**文本：
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't worry about referring to the first project; we will build another one
    just like it soon.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心参考第一个项目；我们很快就会再建立一个类似的项目。
- en: '![The Empty Activity project](img/B12806_03_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![空活动项目](img/B12806_03_04.jpg)'
- en: Now that we have a brand new **Empty Activity App** project, let's explore the
    files and folders that Android Studio has generated for us.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个全新的**空活动应用**项目，让我们探索Android Studio为我们生成的文件和文件夹。
- en: Exploring the Empty Activity project
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索空活动项目
- en: Now, it is time to go on a deep dive into the files and folders of our app.
    This will save us lots of time and head-scratching later in the book. Please note,
    however, that there is no need to memorize where all these files go, and there
    is even less need to understand the code within the files. In fact, parts of the
    XML code will remain a mystery at the end of the book, but it will not stop you
    from designing, coding, and releasing amazing apps.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候深入了解我们应用程序的文件和文件夹了。这将节省我们很多时间和困惑，以后在书中。请注意，无需记住所有这些文件的位置，甚至更不需要理解文件中的代码。事实上，XML代码的部分内容在书的最后仍然是个谜，但这不会阻止您设计、编码和发布令人惊叹的应用程序。
- en: 'Take a look at the project explorer window after the project is created:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，请查看项目资源管理器窗口：
- en: '![Exploring the Empty Activity project](img/B12806_03_05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![探索空白活动项目](img/B12806_03_05.jpg)'
- en: Notice the two arrows indicated in the previous screenshot. These, as you probably
    can guess, allow us to expand the `app` and `Gradle Scripts` folders.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前面截图中指示的两个箭头。你可能已经猜到，这些箭头允许我们展开`app`和`Gradle Scripts`文件夹。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We do not need to explore the `Gradle Scripts` folder in the context of this
    book. Gradle is a significant part of Android Studio, but its role is to hide
    the quite-complicated processes that Android Studio performs from the user, such
    as adding resource files, and compiling and building projects. Therefore, we don't
    need to dig into this any further. If, however, you decide to take Android to
    the next level, then gaining a good understanding of Gradle and its relationship
    with Android Studio is time well invested.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的背景下，我们不需要探索`Gradle Scripts`文件夹。Gradle是Android Studio的重要组成部分，但其作用是隐藏用户不需要了解的复杂过程，例如添加资源文件，编译和构建项目。因此，我们不需要深入研究这一点。然而，如果您决定将Android提升到下一个水平，那么深入了解Gradle及其与Android
    Studio的关系是值得投资时间的。
- en: 'We will explore the `app` folder in more detail. Click on the arrow next to
    the `app` folder to expand its contents and we will begin exploring. The first
    level of contents is displayed in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地探索`app`文件夹。单击`app`文件夹旁边的箭头以展开其内容，我们将开始探索。第一级内容显示在以下截图中：
- en: '![Exploring the Empty Activity project](img/B12806_03_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![探索空白活动项目](img/B12806_03_06.jpg)'
- en: 'We have revealed three more folders: `manifests`, `java`, and `res`. Let''s
    take a closer look in all three, starting at the top.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经揭示了另外三个文件夹：`manifests`、`java`和`res`。让我们从顶部开始仔细查看这三个文件夹。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will keep our Kotlin code in the `java` folder. Additionally, since the release
    of Android Studio version 3.3, there is also a folder named `generatedjava` ,
    but we don't need to explore it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的Kotlin代码放在`java`文件夹中。此外，自从Android Studio 3.3版本发布以来，还有一个名为`generatedjava`的文件夹，但我们不需要探索它。
- en: The manifests folder
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: manifests文件夹
- en: 'The `manifests` folder has just one file inside it. Expand the `manifests`
    folder and double-click on the `AndroidManifest.xml` file. Notice that the file
    has been opened in the editor window and a tab has been added so that we can easily
    switch between this and other files. The following screenshot shows the new tab
    that has been added, as well as the XML code contained in the `AndroidManifest.xml`
    file within the `manifests` folder:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`manifests`文件夹里面只有一个文件。展开`manifests`文件夹，双击`AndroidManifest.xml`文件。注意文件已在编辑窗口中打开，并添加了一个选项卡，以便我们可以轻松地在此文件和其他文件之间切换。以下截图显示了新添加的选项卡，以及`manifests`文件夹中`AndroidManifest.xml`文件中包含的XML代码：'
- en: '![The manifests folder](img/B12806_03_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![manifests文件夹](img/B12806_03_07.jpg)'
- en: We don't need to understand everything in this file, but it is worth pointing
    out that we will make occasional amendments here, for example, when we need to
    ask the user for permission to access some features of their device, such as the
    messaging app or the images folder. We will also edit this file when we want to
    make a fullscreen app for immersion, such as for a game.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要理解文件中的所有内容，但值得指出的是，我们将偶尔在这里进行修改，例如，当我们需要请求用户许可以访问其设备的某些功能时，例如消息应用或图像文件夹。当我们想要为游戏等全屏应用进行沉浸式体验时，我们也会编辑此文件。
- en: Notice that the structure of the file is very similar to the structure of the
    layout file that we saw in the previous chapter. For instance, there are clearly
    denoted sections that start with `<section name` and end with `</section name>`.
    Real examples of this are `<application` and `</application>`, and `<activity`
    and `</activity>`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意文件的结构与我们在上一章中看到的布局文件的结构非常相似。例如，有明确定义的部分，以`<section name`开头，以`</section name>`结尾。这样的真实示例包括`<application`和`</application>`，以及`<activity`和`</activity>`。
- en: Indeed, the entire file contents, apart from the first line, are wrapped in
    `<manifest` and `</manifest>`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，除了第一行之外，整个文件内容都包含在`<manifest`和`</manifest>`中。
- en: In the same way that we enter the brackets of a calculation into a calculator,
    these opening and closing parts must match or the file will cause an error in
    our project. Android Studio indents (that is, places tabs) in front of the lines
    to make the sections and their depth in this structure clearer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们将计算的括号输入计算器一样，这些开放和关闭部分必须匹配，否则文件将在我们的项目中引起错误。Android Studio会在行前缩进（即放置制表符），以使结构中的各个部分及其深度更清晰。
- en: A number of specific parts of this code are worth noting, so I will point out
    some of the lines.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的一些特定部分值得注意，所以我将指出其中的一些行。
- en: 'The following line tells Android that the icon that we want to show the user
    in their app drawer/home screen, and with which they can launch the app, is contained
    in the `mipmap` folder and is called `ic_launcher`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行告诉Android，我们希望在他们的应用抽屉/主屏幕中向用户显示的图标，并且用户可以使用它来启动应用，它包含在`mipmap`文件夹中，名为`ic_launcher`：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will verify this for ourselves as we continue our exploration.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续探索，我们将自己验证这一点。
- en: 'The next line has two aspects that are worth discussing. First, it denotes
    the name that we gave our app; and second, this name is contained as a **String**
    with a label of `app_name`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行有两个值得讨论的方面。首先，它表示我们给我们的应用的名称；其次，这个名称作为一个**字符串**包含在`app_name`标签中：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In programming, including Kotlin and XML, a String can be any alphanumeric value.
    We will learn more about Strings throughout the book, starting in [Chapter 7,](ch07.html
    "Chapter 7. Kotlin Variables, Operators, and Expressions") *Kotlin Variables,
    Operators, and Expressions*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，包括Kotlin和XML，字符串可以是任何字母数字值。我们将在整本书中学习更多关于字符串的知识，从[第7章](ch07.html "第7章 Kotlin变量、运算符和表达式")开始。
- en: We can, therefore, guess that the alphanumeric value of the label of `app_name`
    is `Empty Activity App`, because that is what we called the app when we created
    it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以猜测`app_name`标签的字母数字值是`Empty Activity App`，因为这是我们创建应用程序时的名称。
- en: This might sound unusual, but we will see this file shortly along with its label.
    And, in later projects, we will add more labels and values to it. We will also
    come to understand the reasons why we add text to our apps in what might, at this
    stage, seem like a convoluted manner.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来很不寻常，但我们很快就会看到这个文件以及它的标签。在以后的项目中，我们还会为其添加更多的标签和值。我们也会明白为什么我们以这种看似复杂的方式向我们的应用程序添加文本的原因。
- en: 'We could discuss every line in the `AndroidManifest.xml` file, but we don''t
    need to. Let''s take a look at another two lines as they are related to each other.
    The following line indicates the name of our Activity, which was auto-generated
    when we created the project. I have highlighted the Activity name just to make
    it stand out:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以讨论`AndroidManifest.xml`文件中的每一行，但我们不需要这样做。让我们看看另外两行，因为它们是相关的。下一行指示了我们的Activity的名称，这是在创建项目时自动生成的。我已经突出显示了Activity名称，以使其更加突出：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following line, which appears within the `<activity` and `</activity>`
    tags, denotes that it is an attribute of the `activity` file. This tells us that
    this Activity is the one that should run when the app is started; it is the `LAUNCHER`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在`<activity`和`</activity>`标签内的下一行表示它是`activity`文件的属性。这告诉我们，这个Activity是在应用程序启动时应该运行的Activity；它是`LAUNCHER`。
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This implies that our apps can have more than one Activity. Very often, if you
    have an app with multiple screens, such as a home screen or settings screen, those
    screens are built from multiple Activity class **instances**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的应用程序可以有多个Activity。很多时候，如果你的应用程序有多个屏幕，比如主屏幕或设置屏幕，这些屏幕是由多个Activity类的实例构建的。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In XML, such as the `AndroidManifest` file, `activity` is in lowercase; but
    in Kotlin, the `Activity` class has an uppercase `A`. This is just convention
    and it is nothing to be concerned about.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在XML中，比如`AndroidManifest`文件，`activity`是小写的；但在Kotlin中，`Activity`类的`A`是大写的。这只是一种约定，不需要担心。
- en: As you have just seen, `activity` in XML has a `name` attribute with a value
    that refers to an instance of a Kotlin `Activity`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你刚刚看到的，XML中的`activity`具有一个`name`属性，其值指向Kotlin `Activity`的一个实例。
- en: Let's now dig into the `java` folder.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们深入`java`文件夹。
- en: The java folder
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: java文件夹
- en: 'Here, we will find all the Kotlin code. To begin with, this consists of just
    one file, but as our projects grow further, we will add more. Expand the `java`
    folder and you will find three more folders, as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将找到所有的Kotlin代码。起初，这只包括一个文件，但随着我们的项目进一步发展，我们会添加更多文件。展开`java`文件夹，你会发现另外三个文件夹，如下截图所示：
- en: '![The java folder](img/B12806_03_08.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![java文件夹](img/B12806_03_08.jpg)'
- en: For this book, we will only need one of these three folders; that is, the top
    one. The names of these folders are composed of the package name (chosen when
    we created the app), and the app name, presented in lowercase and with no spaces
    (this was also chosen when we created the app).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们只需要这三个文件夹中的一个；也就是顶层文件夹。这些文件夹的名称由包名（在创建应用程序时选择）和应用程序名称组成，以小写形式呈现，没有空格（这也是在创建应用程序时选择的）。
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The reason there is more than one folder with the same name is due to automated
    testing, which is beyond the scope of this book. Therefore, you can safely ignore
    the folders that end with `(androidTest)` and `(test)`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个同名文件夹的原因是由于自动化测试，这超出了本书的范围。因此，你可以安全地忽略以`(androidTest)`和`(test)`结尾的文件夹。
- en: The only folder that we are interested in for this book is the top folder, which
    for this app (on my screen) is `com.gamecodeschool.emptyactivityapp`. Depending
    on your chosen package name and the name of the app that we are currently working
    on, the folder name will change, but it will always be the top folder that we
    need to access and add or edit the contents of.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中感兴趣的唯一文件夹是顶层文件夹，对于我的屏幕上的这个应用程序来说，它是`com.gamecodeschool.emptyactivityapp`。根据你选择的包名和我们当前正在工作的应用程序的名称，文件夹的名称会发生变化，但我们始终需要访问并添加或编辑其内容的是顶层文件夹。
- en: 'Expand the `com.gamecodeschool.emptyactivityapp` (or whatever yours is called)
    folder now to view its contents. In the following screenshot, you can see that
    the folder has just one file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在展开`com.gamecodeschool.emptyactivityapp`（或者你的应用程序名称）文件夹以查看其内容。在下面的截图中，你可以看到该文件夹只有一个文件：
- en: '![The java folder](img/B12806_03_09.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![java文件夹](img/B12806_03_09.jpg)'
- en: It is the `MainActivity.kt` file, although the file extension isn't shown in
    the project window, even though it is in the tab above the editor window. In fact,
    all the files in the `java/packagename.appname` folder for this book will have
    the `.kt` extension.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`MainActivity.kt`文件，尽管项目窗口中没有显示文件扩展名，但在编辑器窗口上方的标签中是有的。事实上，本书中`java/packagename.appname`文件夹中的所有文件都将有`.kt`扩展名。
- en: If you double-click on the `MainActivity.kt` file, it will open in the editor
    window, although we could have just clicked on the `MainActivity.kt` tab above
    the editor window. As we add more Kotlin files to our project, knowing where they
    are kept will be useful.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你双击`MainActivity.kt`文件，它会在编辑器窗口中打开，尽管我们也可以直接点击编辑器窗口上方的`MainActivity.kt`标签。随着我们向项目中添加更多的Kotlin文件，知道它们的存放位置将会很有用。
- en: Examine the `MainActivity.kt` file and you will see that it is a simplified
    version of the Kotlin file that we worked with in the first project. It is the
    same, except that there are fewer functions and less code in the `onCreate` function.
    The functions are missing because the UI is simpler, and they are not needed;
    therefore, Android Studio didn't generate them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`MainActivity.kt`文件，你会发现它是第一个项目中我们使用的Kotlin文件的简化版本。它是一样的，只是在`onCreate`函数中有更少的函数和更少的代码。函数缺失是因为UI更简单，不需要它们；因此，Android
    Studio没有生成它们。
- en: 'For reference, take a look at the contents of the `MainActivity.kt` file in
    the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 参考一下以下截图中`MainActivity.kt`文件的内容：
- en: '![The java folder](img/B12806_03_10.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![java文件夹](img/B12806_03_10.jpg)'
- en: 'The file still has the `onCreate` function, which runs when the app is run,
    but there is much less code in it, and `onCreate` is the only function. Take a
    look at the last line of code in the `onCreate` function, which we will discuss
    before moving on to explore the `res` folder. Here is the line of code under discussion:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 文件仍然有`onCreate`函数，在应用程序运行时运行，但代码更少，`onCreate`是唯一的函数。在`onCreate`函数的最后一行代码上看一下，我们将在继续探索`res`文件夹之前讨论这行代码：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code is calling a function named `setContentView` and is passing some data
    into `setContentView` for the code in the `setContentView` function to make use
    of. The data being passed to `setContentView` is `R.layout.activity.main`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 代码调用了一个名为`setContentView`的函数，并将一些数据传递给`setContentView`，以便`setContentView`函数中的代码可以使用。传递给`setContentView`的数据是`R.layout.activity.main`。
- en: For now, I will just mention that the `setContentView` function is provided
    by the Android API and is the function that prepares and displays the UI to the
    user. So, what exactly is `R.layout.activity_main`?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我只是提一下`setContentView`函数是由Android API提供的，它是准备并向用户显示UI的函数。那么，`R.layout.activity_main`到底是什么？
- en: Let's find out by exploring the `res` folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过探索`res`文件夹来找出答案。
- en: The res folder
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: res文件夹
- en: 'The `res` folder is where all the resources go. Left-click to expand the `res`
    folder and we will examine what''s inside. Here is a screenshot of the top level
    of folders inside the `res` folder:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`res`文件夹是所有资源的存放地。左键单击展开`res`文件夹，我们将检查里面的内容。这是`res`文件夹内顶层文件夹的截图：'
- en: '![The res folder](img/B12806_03_11.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![res文件夹](img/B12806_03_11.jpg)'
- en: Let's begin with the top of the list; that is, the `drawable` folder.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从列表的顶部开始；也就是说，从`drawable`文件夹开始。
- en: The res/drawable folder
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: res/drawable文件夹
- en: The name gives things away a little bit, but the `drawable` folder holds much
    more than just graphics. As we progress through this book, we will indeed add
    graphics to this folder; however, for now, it holds just two files.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 名称有点透露了一些，但`drawable`文件夹中不仅仅包含图形。随着我们在本书中的进展，我们确实会向这个文件夹中添加图形；但是，目前它只包含两个文件。
- en: These files are `ic_launcher_foreground` and `ic_launcher_background`. We will
    not examine these files because we will never need to alter them, but I will quickly
    mention what they are.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是`ic_launcher_foreground`和`ic_launcher_background`。我们不会检查这些文件，因为我们永远不需要修改它们，但我会快速提一下它们是什么。
- en: If you open the files, you will see that they are quite long and technical.
    They include lists of coordinates, colors, and more. They are what is known as
    a **graphical mask**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开这些文件，你会发现它们非常长且技术性很强。它们包括坐标、颜色等列表。它们被称为**图形蒙版**。
- en: They are used by Android to adapt or mask other graphics; in this case, the
    launcher icon of the app. The files are instructions to Android on how to adapt
    the app launcher icon.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被Android用来适应或蒙版其他图形；在这种情况下，是应用程序的启动器图标。这些文件是给Android的指令，告诉它如何调整应用程序的启动器图标。
- en: This system is made available so that different device manufacturers can create
    their own masks to suit their own Android devices. The masks, which are in the
    `drawable` folder by default (`ic_launcher_foreground` and `ic_launcher_background`),
    are default adaptive masks that add visually pleasing shadows and depth to the
    launcher icon.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统是为了让不同的设备制造商可以创建适合自己Android设备的蒙版。这些蒙版默认位于`drawable`文件夹中（`ic_launcher_foreground`和`ic_launcher_background`），是默认的自适应蒙版，可以为启动器图标添加视觉上令人愉悦的阴影和深度。
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If the concept of adaptive icons is interesting to you, then you can refer to
    a full and a very visual explanation on the Android developer's website at [https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自适应图标的概念对你有吸引力，那么你可以参考Android开发者网站上关于自适应图标的完整且非常直观的解释。
- en: Now that we know enough about `drawable`, let's move on to `layout`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对`drawable`有了足够的了解，让我们继续学习`layout`。
- en: The res/layout folder
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: res/layout文件夹
- en: Expand the `layout` folder and you will see our familiar layout file that we
    edited in the previous chapter. There is less in it this time because we generated
    an Empty Activity project. It is not entirely empty, as it still holds a `ConstraintLayout`
    layout wrapping a `TextView` widget that says `Hello World!`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 展开`layout`文件夹，你会看到我们在上一章中编辑过的熟悉的布局文件。这次内容更少，因为我们生成了一个空活动项目。它并不完全为空，因为它仍然包含一个`ConstraintLayout`布局，包裹着一个显示`Hello
    World!`的`TextView`小部件。
- en: 'Be sure to look at the contents – you should find that it looks as you might
    expect, but it is not the contents that are of interest here. Take a closer look
    at the name of the file (without the XML file extension): `activity_main`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保查看内容-你会发现它看起来如你所料，但这里感兴趣的不是内容。仔细看一下文件的名称（不包括XML文件扩展名）：`activity_main`。
- en: 'Now think back to the Kotlin code in the `MainActivity.kt` file. Here is the
    line of code that sets up the UI; I have highlighted a portion of the code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回想一下`MainActivity.kt`文件中的Kotlin代码。以下是设置UI的代码行；我已经突出显示了代码的一部分：
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `R.layout.activity_main` code is indeed a reference to the `activity_main`
    file within the `res`/`layout` folder. This is the connection between our Kotlin
    code and our XML layout/design.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.layout.activity_main`代码确实是对`res`/`layout`文件夹中的`activity_main`文件的引用。这是我们的Kotlin代码和XML布局/设计之间的连接。'
- en: There is a difference in the first project; in the `layout` folder of the first
    project, there is an additional file. Later in this chapter, we will build another
    project using the same template (Basic Activity) that we used in the first chapter
    to understand why.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个项目中有一个不同之处；在第一个项目的`layout`文件夹中，有一个额外的文件。在本章后面，我们将使用相同的模板（基本活动）构建另一个项目，以理解为什么。
- en: Before doing that, let's explore the final two folders and all their subfolders,
    starting with the next in the list, `mipmap`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之前，让我们探索最后两个文件夹及其所有子文件夹，从列表中的下一个`mipmap`开始。
- en: The res/mipmap folder
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: res/mipmap文件夹
- en: 'The `mipmap` folder is straightforward – that is, *fairly* straightforward.
    Expand the folder to see its contents, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`mipmap`文件夹很简单 - *相当*简单。展开文件夹，查看其内容，如下截图所示：'
- en: '![The res/mipmap folder](img/B12806_03_12.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![res/mipmap文件夹](img/B12806_03_12.jpg)'
- en: 'Here, you can see two subfolders; they are `ic_launcher` and `ic_launcher_round`.
    The contents of `ic_launcher` include the graphics for the regular launcher icon
    we see in the app drawer/home screen of the device, while `ic_launcher_round`
    holds the graphics for the devices that use round icons, as opposed to square
    icons. Double-click on one of the `.png` files from each folder to have a look.
    I have photoshopped one of each side by side in this screenshot to aid our discussion:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到两个子文件夹；它们是`ic_launcher`和`ic_launcher_round`。`ic_launcher`的内容包括我们在设备的应用抽屉/主屏幕中看到的常规启动器图标的图形，而`ic_launcher_round`则包含使用圆形图标的设备的图形，而不是方形图标。双击每个文件夹中的一个`.png`文件，我在这个截图中将它们并排放置，以帮助我们的讨论：
- en: '![The res/mipmap folder](img/B12806_03_13.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![res/mipmap文件夹](img/B12806_03_13.jpg)'
- en: You are probably also wondering why there are five `ic_launcher….png` files
    in each folder. The reason for this is that it is good practice to provide icons
    that are suitably scaled for different sizes and resolutions of the screen. Providing
    an image with the `hdpi`, `mdpi`, `xhdpi`, `xxhdpi`, and `xxxhdpi` qualifications
    allows different Android devices to choose the icon that will look best for the
    user.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也想知道为什么每个文件夹中都有五个`ic_launcher….png`文件。原因是为不同尺寸和分辨率的屏幕提供合适比例的图标是一个良好的做法。使用`hdpi`、`mdpi`、`xhdpi`、`xxhdpi`和`xxxhdpi`资格的图像允许不同的Android设备选择最适合用户的图标。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The letters `dpi` stands for **dots-per-inch**, and the `h`, `m`, `xh`, `xxh`,
    and `xxxh` prefixes stand for high, medium, extra high, extra extra high, and
    so on. These are known as **qualifiers** and you will see as you progress throughout
    this book that Android has lots of qualifiers, which help us to build our apps
    to suit the wide range of different devices available for users to choose from.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`dpi`代表**每英寸点数**，`h`、`m`、`xh`、`xxh`和`xxxh`前缀代表高、中、超高、超超高等。这些被称为**限定符**，随着你在本书中的学习，你会发现Android有很多限定符，这些限定符帮助我们构建适合用户选择的各种不同设备的应用程序。'
- en: The final conundrum from the `mipmap` folder is that there is also an XML file
    in each of the two subfolders. Open one of them up and you will see that they
    refer to the `ic_launcher_foreground` and `ic_launcher_background` files that
    we looked at in the `drawable` folder. This tells the Android device where to
    get the details for the adaptive icons. These files are not required, but they
    make the icons look better, as well as add flexibility to the appearance.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`mipmap`文件夹中的最后一个谜团是每个子文件夹中还有一个XML文件。打开其中一个，你会看到它们引用了我们在`drawable`文件夹中看到的`ic_launcher_foreground`和`ic_launcher_background`文件。这告诉Android设备从哪里获取自适应图标的详细信息。这些文件不是必需的，但它们使图标看起来更好，并增加了外观的灵活性。'
- en: We have one more folder and all its files to explore, and then we will finally
    understand the structure of an Android app.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个文件夹及其所有文件要探索，然后我们将最终理解Android应用程序的结构。
- en: The res/values folder
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: res/values文件夹
- en: Open the `res`/`values` folder to reveal three files that we will talk about
    briefly in turn. All these files interlink and refer to each other and other files
    that we have seen already.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`res`/`values`文件夹，可以看到三个文件，我们将依次简要讨论。所有这些文件相互关联，并引用了我们已经看过的其他文件。
- en: 'For the sake of completeness, here is a screenshot of the three files in the
    `res`/`values` folder:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，这里是`res`/`values`文件夹中三个文件的截图：
- en: '![The res/values folder](img/B12806_03_14.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![res/values文件夹](img/B12806_03_14.jpg)'
- en: The key to understanding is not in memorizing the connections, and certainly
    not in trying to memorize or even understand the code in the files, but rather
    to get an appreciation of the interlinked nature of all the files and code we
    have seen so far.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 理解的关键不在于记住连接，当然也不在于试图记住或理解文件中的代码，而是要欣赏到目前为止我们所看到的所有文件和代码之间相互关联的本质。
- en: Let's glance inside the files one at a time.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个查看文件的内容。
- en: The colors.xml file
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: colors.xml文件
- en: 'Next, take a look at the contents of the `colors.xml` file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，看一下`colors.xml`文件的内容：
- en: '[PRE6]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that the starting and closing tags take the usual pattern we have come
    to expect from XML files. There is an opening `<resources>` tag and a closing
    `</resources>` tag. As children of resources, there are three pairs of `<color>
    … </color>` tags.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，起始和结束标签采用了我们从XML文件中期望的通常模式。作为资源的子元素，有三对`<color> … </color>`标签。
- en: Within each `color` tag is contained a `name` attribute and some curious-looking
    code consisting of numbers and letters. The `name` attribute is the name of a
    color. We will see, in another file that follows, that the various names in this
    file are referred to from another file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`color`标签中都包含一个`name`属性和一些由数字和字母组成的奇怪代码。`name`属性是颜色的名称。我们将在接下来的另一个文件中看到，这个文件中的各种名称是从另一个文件中引用的。
- en: The code is what defines an actual color itself. Therefore, when the name is
    referred to, the color defined by the related code is what is produced on the
    screen.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 代码是定义实际颜色的内容。因此，当引用名称时，屏幕上显示的是相关代码定义的颜色。
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code is called a hexadecimal code, because in each position of the code,
    the values `0` through `9` and the letters `a` through to `f` can be used, giving
    16 possible values. If you want to find out more about hex `colors`, visit [http://www.color-hex.com/color-wheel/](http://www.color-hex.com/color-wheel/).
    If you are intrigued about number bases, such as hexadecimal (base 16), binary
    (base 2), and others, then look at this article, which explains them and discusses
    why humans typically use base 10: [https://betterexplained.com/articles/numbers-and-bases/](https://betterexplained.com/articles/numbers-and-bases/).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码被称为十六进制代码，因为在代码的每个位置上，可以使用值`0`到`9`和字母`a`到`f`，共16个可能的值。如果您想了解更多关于十六进制`颜色`的信息，请访问[http://www.color-hex.com/color-wheel/](http://www.color-hex.com/color-wheel/)。如果您对十六进制（基数16）、二进制（基数2）和其他数字基数感到好奇，请查看这篇文章，该文章解释了它们，并讨论了为什么人类通常使用十进制：[https://betterexplained.com/articles/numbers-and-bases/](https://betterexplained.com/articles/numbers-and-bases/)。
- en: We will see where these names are referred to later.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后看到这些名称是如何被引用的。
- en: The strings.xml file
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: strings.xml文件
- en: Most modern apps are made for as wide an audience as possible. Furthermore,
    if the app is of significant size or complexity, then the roles in the software
    company are often divided up into many different teams. For example, the person
    writing the Kotlin code for an Android app very possibly had little to do with
    designing the layout of the UI.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代应用程序都是为尽可能广泛的受众而制作的。此外，如果应用程序规模或复杂度较大，则软件公司中的角色通常被划分为许多不同的团队。例如，为Android应用程序编写Kotlin代码的人很可能与设计UI布局的人几乎没有关系。
- en: By separating the content of the app from the programming of the app, it is
    easier to make changes at any time, and it is also possible to create content
    for multiple different languages without altering the Kotlin code for each.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将应用程序的内容与应用程序的编程分开，可以更容易地随时进行更改，并且还可以为多种不同的语言创建内容，而无需为每种语言修改Kotlin代码。
- en: 'Take a look at the following contents of the `strings.xml` file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下`strings.xml`文件的以下内容：
- en: '[PRE7]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see that, within the now familiar `<resources>…</resources>` tags, there
    is a `<string>…</string>` tag. Within the `string` tag, there is an attribute
    called `name` with an `app_name` value and then a further value of `Empty Activity
    App`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在现在熟悉的`<resources>…</resources>`标签内，有一个`<string>…</string>`标签。在`string`标签内，有一个名为`name`的属性，其值为`app_name`，然后是`Empty
    Activity App`的进一步值。
- en: 'Let''s look at one more line from the `AndroidManifest.xml` file that we explored
    earlier in The manifests folder section. The line in question is displayed in
    the following code, but refer to the file itself in Android Studio if you want
    to see the line in its full context:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一下我们之前在清单文件夹部分探讨过的`AndroidManifest.xml`文件中的一行。所讨论的行显示在以下代码中，但如果您想要查看完整的上下文中的行，请参考Android
    Studio中的文件本身：
- en: '[PRE8]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `android:label` attribute is being assigned a value of `@string/app_name`.
    In Android, `@string` refers to all the strings in the `strings.xml` file. In
    this specific app, the `string` attribute with the `app_name` label has the `Empty
    Activity App` value.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`android:label`属性被赋予了`@string/app_name`的值。在Android中，`@string`指的是`strings.xml`文件中的所有字符串。在这个特定的应用程序中，具有`app_name`标签的`string`属性具有`Empty
    Activity App`的值。'
- en: 'Therefore, the line of code in the `AndroidManifest.xml` file shown previously
    has the following effect on the screen when the app is running:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，先前在`AndroidManifest.xml`文件中显示的代码行在应用程序运行时对屏幕产生以下影响：
- en: '![The strings.xml file](img/B12806_03_15.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![strings.xml文件](img/B12806_03_15.jpg)'
- en: While this system might seem convoluted at first, in practice, it separates
    design and content from coding, which is very efficient to do. If the designers
    want to change the name of the app, they simply edit the `strings.xml` file. There
    is no need to interact with the Kotlin programmers, and, if all the text in an
    app is provided as string resources, then all of it can be easily altered and
    adapted as the project proceeds.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个系统起初可能看起来很复杂，但在实践中，它将设计和内容与编码分离开来，这样做非常高效。如果设计人员想要更改应用程序的名称，他们只需编辑`strings.xml`文件。无需与Kotlin程序员互动，而且，如果应用程序中的所有文本都以字符串资源的形式提供，那么在项目进行过程中所有这些文本都可以轻松地进行更改和调整。
- en: Android takes the flexibility further by allowing developers to use different
    files for string resources for each language and locale. This means that a developer
    can cater to a planet full of happy users with exactly the same Kotlin code. The
    Kotlin programmer just needs to refer to the `name` attribute of a string resource
    instead of **hardcoding** the text itself, and then the other departments can
    design the text content and handle tasks such as translation. We will make an
    app multilingual in [Chapter 18,](ch18.html "Chapter 18. Localization") *Localization*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Android通过允许开发人员为每种语言和区域设置使用不同的文件来存储字符串资源，进一步提高了灵活性。这意味着开发人员可以使用完全相同的Kotlin代码来满足整个星球上的快乐用户。Kotlin程序员只需引用字符串资源的`name`属性，而不是将文本本身硬编码，然后其他部门可以设计文本内容并处理诸如翻译之类的任务。我们将在[第18章](ch18.html
    "第18章 本地化")*本地化*中使应用程序支持多种语言。
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to hardcode the actual text directly into the Kotlin code, instead
    of using string resources, and most of the time, we will do so for the sake of
    easily demonstrating some Kotlin code without getting bogged down with editing
    or adding to the `strings.xml` file.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能直接在Kotlin代码中硬编码实际文本，而不是使用字符串资源，大多数情况下，我们会这样做，以便轻松演示一些Kotlin代码，而不必陷入编辑或添加到`strings.xml`文件中。
- en: We know enough about `strings.xml` to move on to the final file that we will
    explore for the Empty project template.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了关于`strings.xml`的足够信息，可以继续探索空项目模板的最终文件。
- en: The styles.xml file
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: styles.xml文件
- en: 'Here, you can see the pieces of the interconnectivity puzzle for this project
    template finally come together. Study the code in the `styles.xml` file and we
    can then discuss it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到这个项目模板的互连拼图的各个部分最终汇聚在一起。研究`styles.xml`文件中的代码，然后我们可以讨论它：
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is yet another resource file, but it is referring to the `colors.xml` file
    that we saw earlier. Notice that there is a `style` tag, which is enclosing multiple
    `item` tags; each `item` tag has a name, such as `colorPrimary`, `colorPrimaryDark`,
    or `colorAccent`. Then, each of these names is assigned a value, such as `@color/colorPrimary`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个资源文件，但它是在引用我们之前看到的`colors.xml`文件。请注意，这里有一个`style`标签，它包含多个`item`标签；每个`item`标签都有一个名称，比如`colorPrimary`，`colorPrimaryDark`或`colorAccent`。然后，每个名称都被赋予一个值，比如`@color/colorPrimary`。
- en: You are probably wondering what is going on; `@color` refers to the `colors.xml`
    file, and `colorPrimary`, `colorPrimaryDark`, and `colorAccent` refer to the actual
    colors defined with their hexadecimal values in that file. But why bother to create
    the colors and give them names, and then in another file define `item` instances
    and assign those colors to `item` instances? Why not just assign hexadecimal color
    values directly to each `item`?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道发生了什么；`@color`指的是`colors.xml`文件，`colorPrimary`，`colorPrimaryDark`和`colorAccent`指的是在该文件中用十六进制值定义的实际颜色。但为什么要创建颜色并给它们命名，然后在另一个文件中定义`item`实例并将这些颜色分配给`item`实例呢？为什么不直接将十六进制颜色值分配给每个`item`呢？
- en: 'Take a look at the top of the code block to understand the reason behind this
    apparently unnecessary convolutedness. I have shown the relevant lines of code
    again, so that we can discuss them more easily:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下代码块的顶部，了解这种看似不必要的复杂性背后的原因。我再次展示了相关的代码行，这样我们可以更容易地讨论它们：
- en: '[PRE10]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What is going on is that items have been defined and the items are contained
    within a `style` element. As you can see, the style is called `AppTheme`. Furthermore,
    the style has a parent called `Theme.AppCompat.Light.DarkActionBar`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 正在进行的是已经定义了项目，并且这些项目包含在`style`元素中。正如你所看到的，样式被称为`AppTheme`。此外，该样式有一个名为`Theme.AppCompat.Light.DarkActionBar`的父级。
- en: The system allows designers to choose a selection of colors and then define
    them in the `colors.xml` file. They can then further build up styles that use
    those colors in different combinations – there will often be more than one style
    per app. A style can further be associated with a theme (`parent = "…"`). This
    parent theme can be one completely designed by the styles and colors of the app
    designers, or it can be one of the default themes of Android, such as `Theme.AppCompat.Light.DarkActionBar`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统允许设计师选择一系列颜色，然后在`colors.xml`文件中定义它们。然后他们可以进一步构建使用这些颜色的不同组合的样式 - 通常每个应用程序会有多个样式。样式还可以与主题（`parent
    = "..."`）相关联。这个父主题可以是完全由应用设计师的样式和颜色设计的，也可以是Android的默认主题之一，比如`Theme.AppCompat.Light.DarkActionBar`。
- en: 'The UI designers can then simply refer to a style in the `AndroidManifest.xml`
    file, like in this line:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: UI设计师可以简单地在`AndroidManifest.xml`文件中引用样式，就像这一行：
- en: '[PRE11]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: UI designers can then happily tweak the colors and where they are used (items)
    without interfering with the Kotlin code. This also allows for different styles
    to be created for different regions of the world without any changes to the actual
    layout file (in this case, `activity_main.xml`).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: UI设计师可以愉快地调整颜色和它们的使用方式（项目），而不会干扰Kotlin代码。这也允许为世界不同地区创建不同的样式，而不需要对实际布局文件（在本例中为`activity_main.xml`）进行任何更改。
- en: For example, in Western culture, green can represent themes such as nature and
    correctness; and in many Middle Eastern countries, green represents fertility
    and is the color associated with Islam. While you might just get away with distributing
    green in both of these regions, your app will be perceived very differently.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在西方文化中，绿色可以代表自然和正确性等主题；在许多中东国家，绿色代表生育，是与伊斯兰教相关的颜色。虽然你可能会在这两个地区都使用绿色，但你的应用将被认为是非常不同的。
- en: If you then roll your app out in Indonesia, you will find that green is culturally
    despised among many (although not all) Indonesians. Next, if you launch in China,
    you will find that green has potential negative connotations to do with unfaithful
    spouses. It is a minefield that the typical programmer will never learn to navigate.
    And, fortunately, because of the way we can divide up responsibilities in Android
    Studio, they don't need to learn.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在印度尼西亚推出你的应用，你会发现绿色在许多（尽管不是所有）印尼人中是受到文化鄙视的。接下来，如果你在中国推出，你会发现绿色可能会带有与不忠的配偶有关的负面含义。这是典型程序员永远不会学会应对的困难。而且，幸运的是，由于我们可以在Android
    Studio中分配责任的方式，他们不需要学会。
- en: Therefore, colors, styles, and themes are very specialized topics. While we
    won't be exploring any more deeply than that quick foray into green, hopefully
    you can see the benefit of a system that separates responsibility for programming,
    layout, color, and textual content.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，颜色、样式和主题是非常专业的主题。虽然我们不会深入探讨比绿色更深入的内容，但希望你能看到一个分离了编程、布局、颜色和文本内容责任的系统的好处。
- en: Tip
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I thought it is also worth mentioning at this point that images can also be
    divided up into different locales so that users in different regions see different
    images within the same app. And, if you are wondering, yes, that will mean supplying
    different resolutions (such as `hdpi` and `xhdpi`, and so on) for each locale
    as well.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为在这一点上值得一提的是，图片也可以根据不同的区域划分，以便在同一个应用程序中，不同地区的用户看到不同的图片。而且，如果你在想，是的，这将意味着为每个区域提供不同的分辨率（比如`hdpi`和`xhdpi`等）。
- en: It is also worth mentioning that it is entirely possible to produce a fantastic
    app that is enjoyed by thousands or even millions of users without catering individually
    to every region. However, even if we are not going to employ teams of designers,
    translators, and cultural experts, we must still work within this system that
    was designed to enable them, and that is why we are going into such depth.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，完全有可能制作出一款受到成千上万甚至数百万用户喜爱的应用，而不需要为每个地区单独定制。然而，即使我们不打算雇佣设计师、翻译人员和文化专家，我们仍然必须在这个旨在使他们能够工作的系统中工作，这就是为什么我们要深入探讨。
- en: At this stage, we have a good grasp of what goes in an Android project and how
    it all links together. Let's now build one more app to see the differences that
    different app templates make to the underlying files that Android Studio generates.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经很好地掌握了Android项目中的内容以及它们之间的联系。现在让我们构建另一个应用程序，以查看不同应用程序模板对Android Studio生成的基础文件的影响。
- en: The Basic Activity project
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本活动项目
- en: The next simplest project type with an autogenerated UI is the Basic Activity
    project. This is the same type of project that we created in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Android and Kotlin"), *Getting Started with Android
    and Kotlin*. Feel free to open that project up now, but it is recommended to generate
    a new one so that we can examine it without any of our alterations and additions
    clouding the discussions.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个最简单的项目类型是自动生成UI的基本活动项目。这是我们在[第1章](ch01.html "第1章。开始使用Android和Kotlin")中创建的相同类型的项目，*开始使用Android和Kotlin*。现在可以打开该项目，但建议生成一个新项目，以便我们可以在没有任何修改和添加干扰讨论的情况下进行检查。
- en: 'Let''s create a Basic Activity project, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个基本活动项目，如下所示：
- en: In Android Studio, select **File** | **New** | **New Project…**.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中，选择**文件** | **新建** | **新项目…**。
- en: On the **Choose your project** screen, select the **Basic Activity** template
    and click on **Next**.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择您的项目**屏幕上，选择**基本活动**模板，然后点击**下一步**。
- en: Change the **Name** field to `Basic Activity App`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**名称**字段更改为`基本活动应用`。
- en: Choose the same package name and save the location as in the previous project.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择与上一个项目相同的包名称，并将位置保存为之前的项目。
- en: Be sure to select **Kotlin** as the language.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择**Kotlin**作为语言。
- en: Check the **Use AndroidX artifacts** checkbox as we did previously.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像之前一样，勾选**使用AndroidX构件**复选框。
- en: The rest of the settings can be left at their defaults, so just click on **Next**.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其余设置可以保持默认，所以只需点击**下一步**。
- en: Now we can dig into the files. We won't look at everything in the same detail
    that we did for the Empty Activity project; we will just look at the differences
    and extra bits.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以深入研究文件。我们不会像我们在空活动项目中那样详细地查看所有内容；我们只会查看差异和额外的部分。
- en: Exploring the Basic Activity project
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索基本活动项目
- en: Let's compare the Kotlin code first. Take a look at the `MainActivity.kt` tab
    in the code editor. They both contain a class called `MainActivity`. The difference
    is in the number of functions and the content of the `onCreate` function.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先比较Kotlin代码。查看代码编辑器中的`MainActivity.kt`选项卡。它们都包含一个名为`MainActivity`的类。不同之处在于函数的数量和`onCreate`函数的内容。
- en: As already stated, the Basic Activity project has more to it than the Empty
    Activity project.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，基本活动项目比空活动项目更复杂。
- en: Tip
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can open as many instances of Android Studio as you like. If you want to
    compare projects side by side, select **File** | **Open** and choose the project,
    then when prompted, select **New Window** to open the project without closing
    any that are already open.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以打开尽可能多的Android Studio实例。如果要并排比较项目，请选择**文件** | **打开**，然后选择项目，然后在提示时选择**新建窗口**，以打开项目而不关闭已经打开的任何项目。
- en: The first difference is that there is some extra code in the `onCreate` function.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个不同之处在于`onCreate`函数中有一些额外的代码。
- en: The MainActivity.kt file
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MainActivity.kt文件
- en: I mentioned very briefly, back in [Chapter 2](ch02.html "Chapter 2. Kotlin,
    XML, and the UI Designer"), *Kotlin, XML, and the UI Designer*, the interconnections
    that exist in the Kotlin code and the XML code. Let's look through the resources
    files and point out the XML files that this Kotlin code points to.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第2章](ch02.html "第2章。Kotlin、XML和UI设计师")中非常简要地提到了存在于Kotlin代码和XML代码中的相互关系。让我们浏览资源文件，并指出这段Kotlin代码指向的XML文件。
- en: 'Here is the relevant Kotlin code from the `onCreate` function; I have slightly
    reformatted it to make it more readable in a book:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`onCreate`函数中相关的Kotlin代码；我稍微重新格式化了它，以便在书中更易读：
- en: '[PRE12]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Understanding this code fully will take quite a few more chapters, but to point
    out where this code uses files in the resources will only take a moment, and will
    then leave us even more aware of the components that make up our projects.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 完全理解这段代码需要更多的章节，但只需指出这段代码使用资源文件的地方只需要一会儿，然后我们就会更加了解构成我们项目的组件。
- en: The code refers to two more resources compared to the Empty Activity project.
    The first is `toolbar`, the second is `fab`, and both refer to an XML file that
    we will see next.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 与空活动项目相比，该代码引用了两个更多的资源。第一个是`工具栏`，第二个是`浮动操作按钮`，两者都引用了我们将在下一步中看到的XML文件。
- en: 'If you open the `res`/`layout` folder in the project window, you can see that
    things look slightly differently to how they did in the Empty Activity project:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在项目窗口中打开`res`/`layout`文件夹，您会发现它们看起来与空活动项目中的情况有些不同：
- en: '![The MainActivity.kt file](img/B12806_03_16.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![MainActivity.kt文件](img/B12806_03_16.jpg)'
- en: There are now two files that were autogenerated. We will explore the `content_main.xml`
    file and gain an understanding of why it is required shortly.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有两个自动生成的文件。我们将探索`content_main.xml`文件，并很快理解为什么需要它。
- en: The activity_main.xml file
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: activity_main.xml文件
- en: For now, open up the `activity_main.xml` file and you will see there are some
    elements to represent both `toolbar` and `fab`. By referring to these elements,
    the Kotlin code is setting up the toolbar and the floating action bar ready for
    use. The XML code, as we have come to expect, describes what they look like.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`activity_main.xml`文件，您会看到一些元素代表`工具栏`和`浮动操作按钮`。通过引用这些元素，Kotlin代码正在设置工具栏和浮动操作按钮以供使用。正如我们所期望的那样，XML代码描述了它们的外观。
- en: 'Here is the XML code for the toolbar:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是工具栏的XML代码：
- en: '[PRE13]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice that it refers to a `Toolbar`, a color, and a style, as well as some
    others. It is the line that starts with `android:id…`, which declares a widget
    of type `Toolbar` and its `@+id/toolbar` value, which makes it accessible via
    the `toolbar` instance name in the Kotlin code.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它引用了`Toolbar`、颜色和样式，以及其他一些内容。它是以`android:id…`开头的那一行，它声明了一个类型为`Toolbar`的小部件及其`@+id/toolbar`值，这使得它可以通过Kotlin代码中的`toolbar`实例名称访问。
- en: 'For clarity, this is the toolbar in the actual working app:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，这是实际工作中应用中的工具栏：
- en: '![The activity_main.xml file](img/B12806_03_17.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![activity_main.xml文件](img/B12806_03_17.jpg)'
- en: 'Here is the XML code for the floating action button. I have slightly reformatted
    the first line of the code onto two lines:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这是浮动操作按钮的XML代码。我稍微重新格式化了代码的第一行为两行：
- en: '[PRE14]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that it has an `id` attribute of `fab`. It is through this `id` attribute
    that we gain access to the floating action button in our Kotlin code.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它具有`fab`的`id`属性。通过这个`id`属性，我们可以在我们的Kotlin代码中访问浮动操作按钮。
- en: Now, `fab` in our Kotlin code can directly control the floating action button
    and all its attributes. In [Chapter 13,](ch13.html "Chapter 13. Bringing Android
    Widgets to Life") *Bringing Android Widgets to Life*, we will learn how to do
    this in detail.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的Kotlin代码中的`fab`可以直接控制浮动操作按钮及其所有属性。在[第13章](ch13.html "第13章。让Android小部件活起来")*让Android小部件活起来*中，我们将详细学习如何做到这一点。
- en: 'Here is the floating action button in the actual app:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实际应用中的浮动操作按钮：
- en: '![The activity_main.xml file](img/B12806_03_18.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![activity_main.xml文件](img/B12806_03_18.jpg)'
- en: 'It is evident that I haven''t explained the code in detail; there is no point
    at this stage. Instead, make a mental note of the interconnections, as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我还没有详细解释代码；在这个阶段没有意义。相反，要注意这些相互关联，如下所示：
- en: XML files can refer to other XML files.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML文件可以引用其他XML文件。
- en: Kotlin can refer to XML files (and, as we will see soon, other Kotlin files).
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin可以引用XML文件（以及，正如我们将很快看到的，其他Kotlin文件）。
- en: In Kotlin, we can grab control of a specific part of the UI in an XML file via
    its `id` attribute.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kotlin中，我们可以通过其`id`属性控制XML文件中的特定部分。
- en: We have seen enough from this file; let's move on and dip into the remaining
    files.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从这个文件中看到足够了；让我们继续并深入了解剩下的文件。
- en: The extra functions in MainActivity.kt
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MainActivity.kt中的额外函数
- en: So, what do the functions do, when are they called, and who exactly calls them?
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些函数是做什么的，它们何时被调用，以及谁确切地调用它们呢？
- en: 'The next difference is this extra function, as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个不同之处是这个额外的函数，如下所示：
- en: '[PRE15]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This code prepares (inflates) the menu that is defined in the `menu_main.xml`
    file. And, just as with `onCreate`, the function is overridden and it is called
    by the operating system directly.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码准备（膨胀）了在`menu_main.xml`文件中定义的菜单。和`onCreate`一样，这个函数也被重写，并且直接由操作系统调用。
- en: 'Then there is yet another function, as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有另一个函数，如下所示：
- en: '[PRE16]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This function is also overridden and is called directly by the operating system.
    It handles what happens `when` an item (or option) from the menu is selected by
    the user. At the moment, it handles just one option, which is the settings option,
    and it currently takes no action.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也被重写，并且直接由操作系统调用。它处理用户选择菜单中的项目（或选项）时发生的情况。目前，它只处理一个选项，即设置选项，目前不执行任何操作。
- en: The preceding code determines whether the settings menu option was clicked on;
    if it was, then the `return` when code executes, and control is returned to whatever
    part of the app was executing before it was interrupted by the user clicking on
    the **Settings** menu option. We will learn more about the Kotlin `when` keyword
    in [Chapter 8](ch08.html "Chapter 8. Kotlin Decisions and Loops"), *Kotlin Decisions
    and Loops*.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码确定了是否单击了设置菜单选项；如果是，那么`return`代码执行，控制返回到被用户单击**设置**菜单选项中断之前执行的应用程序的任何部分。我们将在[第8章](ch08.html
    "第8章。Kotlin决策和循环")*Kotlin决策和循环*中更多地了解Kotlin的`when`关键字。
- en: We nearly know enough for now; don't worry about memorizing all these connections.
    We will be coming back to each connection, investigating more deeply, and cementing
    our understanding of each.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在几乎知道足够了；不要担心记住所有这些连接。我们将回到每个连接，深入调查，并巩固我们对每个连接的理解。
- en: So, why do we need that second file in the `res`/`layout` folder?
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们需要`res`/`layout`文件夹中的第二个文件呢？
- en: The content_main.xml file
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: content_main.xml文件
- en: 'The `MainActivity.kt` file calls `setContentView` on `R.layout.activity_main`.
    Then, in turn, `activity_main` has this line of code highlighted:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivity.kt`文件在`R.layout.activity_main`上调用了`setContentView`。然后，`activity_main`有这行代码被突出显示：'
- en: '[PRE17]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The highlighted line of code does `include` the `content_main` file. So, just
    after the app bar is added to the layout, the execution branches to `content_main`,
    where all its XML code is turned into the UI; then, the execution goes back to
    `activity_main` and the floating action bar is added to the layout. We will use
    `include` in [Chapter 5,](ch05.html "Chapter 5. Beautiful Layouts with CardView
    and ScrollView") *Beautiful Layouts with CardView and ScrollView*, when we build
    some neat scrolling `CardView` layouts and separate the code that defines `CardView`
    from the actual contents of `CardView`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的高亮行确实`include`了`content_main`文件。因此，在应用栏添加到布局后，执行分支到`content_main`，在那里，所有的XML代码都转换为UI；然后，执行返回到`activity_main`，并且浮动操作栏添加到布局中。在[第5章](ch05.html
    "第5章。使用CardView和ScrollView创建美丽的布局")*使用CardView和ScrollView创建美丽的布局*中，我们将使用`include`，当我们构建一些整洁的滚动`CardView`布局并将定义`CardView`的代码与`CardView`的实际内容分开时。
- en: Exploring the Android emulator
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Android模拟器
- en: As we progress, it helps to be familiar with exactly how to use the Android
    emulator. If you haven't used the latest version of Android, some of the ways
    to achieve even simple tasks (such as viewing all the apps) can be different to
    how your current device works. In addition, we want to know how to use the extra
    controls that come with all emulators.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的进展，熟悉如何使用Android模拟器确实有所帮助。如果您还没有使用过最新版本的Android，甚至执行简单任务（如查看所有应用程序）的方式可能与您当前的设备工作方式不同。此外，我们还想知道如何使用所有模拟器附带的额外控件。
- en: The emulator control panel
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟器控制面板
- en: 'You probably noticed the mini control panel that appears beside the emulator
    when you run it. Let''s go through some of the most useful controls. Take a look
    at this screenshot of the emulator control panel. I have annotated it to aid the
    discussion:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到了当您运行模拟器时，旁边会出现一个迷你控制面板。让我们看一下一些最有用的控件。看一下这个模拟器控制面板的截图。我已经做了标注以帮助讨论：
- en: '![The emulator control panel](img/B12806_03_19.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![模拟器控制面板](img/B12806_03_19.jpg)'
- en: 'I will just mention the more obvious controls and go into a bit more depth
    when necessary:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我只会提到一些更明显的控件，并在必要时深入一些：
- en: These are the window controls. They minimize or close the emulator window.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些是窗口控件。它们最小化或关闭模拟器窗口。
- en: From top to bottom, the first button is used to power-off the emulator, to simulate
    powering off the actual device. The next two icons raise and lower the volume.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上到下，第一个按钮用于关闭模拟器，模拟关闭实际设备的电源。接下来的两个图标分别是调高和调低音量。
- en: These two buttons allow you to rotate the emulator both left and right. This
    means that you can test what your app looks like in all orientations, as well
    as how it handles orientation changes while the app is running. The icons immediately
    underneath these take a screenshot and zoom in, respectively. Here is the emulator
    after being rotated horizontally:![The emulator control panel](img/B12806_03_20.jpg)
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这两个按钮允许您将模拟器向左和向右旋转。这意味着您可以测试您的应用在所有方向上的外观，以及应用在运行时如何处理方向变化。这两个按钮下面的图标分别是截图和放大。这是模拟器在水平旋转后的样子：![模拟器控制面板](img/B12806_03_20.jpg)
- en: These icons simulate the back button, home button, and view running apps button.
    Have a play with these buttons – we will need to use them from time to time, including
    in [Chapter 6](ch06.html "Chapter 6. The Android Lifecycle"), *The Android Lifecycle*.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些图标模拟返回按钮、主页按钮和查看运行中应用程序按钮。尝试一下这些按钮-我们有时需要使用它们，包括在[第6章](ch06.html "第6章。Android生命周期")中，*Android生命周期*。
- en: Press the button labelled **5** in the annotated image to launch the advanced
    settings menu, where you can interact with things such as sensors, GPS, the battery,
    and the fingerprint reader. Have a play around with some of these settings if
    you are curious:![The emulator control panel](img/B12806_03_21.jpg)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照标注图像中标有**5**的按钮，启动高级设置菜单，您可以与传感器、GPS、电池和指纹识别器等进行交互。如果您感兴趣，可以尝试一些这些设置：![模拟器控制面板](img/B12806_03_21.jpg)
- en: Let's play around with the emulator itself.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们玩一下模拟器本身。
- en: Using the emulator as a real device
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模拟器作为真实设备
- en: The emulator can emulate every feature of a real phone, so it is possible to
    write a whole book on it alone. If you want to write apps that your users love,
    then understanding a whole range of Android devices is well worth taking the time
    to do. I just want to point out a few of the most basic features here, because
    without these basic interactions, it will be hard to follow along with the book.
    Furthermore, if you have an old Android device, then some essential basics (such
    as accessing the app drawer) have changed and you might be left a little baffled.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器可以模拟真实手机的每个功能，因此可以单独撰写一本关于它的书。如果您想编写用户喜爱的应用程序，那么了解各种Android设备是值得花时间去做的。我只想在这里指出一些最基本的功能，因为没有这些基本交互，将很难跟上本书的内容。此外，如果您有一部旧的Android设备，那么一些基本的操作（如访问应用抽屉）已经发生了变化，您可能会感到有些困惑。
- en: Accessing the app drawer
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问应用抽屉
- en: 'Hold the mouse cursor on the bottom of the home screen and drag upward to access
    the app drawer (with all the apps); the following screenshot shows this action
    halfway through:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标光标放在主屏幕底部并向上拖动，以访问应用抽屉（包括所有应用程序）；以下截图显示了这个动作进行到一半的情况：
- en: '![Accessing the app drawer](img/B12806_03_22.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![访问应用抽屉](img/B12806_03_22.jpg)'
- en: Now you can run any app installed on the emulator. Note that when you run one
    of your apps through Android Studio, it remains installed on the emulator and,
    therefore, is runnable from the app drawer. However, every change you make to
    the app in Android Studio will require you to run or install the app again by
    clicking on the play button on the Android Studio quick launch bar, as we have
    been doing.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行模拟器上安装的任何应用。请注意，当您通过Android Studio运行您的应用程序之一时，它将保留在模拟器上安装，并且可以从应用抽屉中运行。但是，您在Android
    Studio中对应用程序所做的每一次更改都需要您再次运行或安装应用程序，方法是单击Android Studio快速启动栏上的播放按钮，就像我们一直在做的那样。
- en: Viewing active apps and switching between apps
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看活动应用程序和在应用程序之间切换
- en: 'To view active apps, you can use the emulator control panel, that is, the square
    labelled as number **4** on the screenshot of the emulator control panel. To access
    the same option using the phone screen (as you will have to do on a real device),
    swipe up, just as with accessing the app drawer, but do so only for about one
    quarter of the length of the screen, as shown in following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看活动应用程序，您可以使用模拟器控制面板，也就是截图上标有数字**4**的方块。要使用手机屏幕访问相同的选项（就像您在真实设备上所做的那样），向上滑动，就像访问应用抽屉一样，但只需滑动屏幕长度的四分之一，如下截图所示：
- en: '![Viewing active apps and switching between apps](img/B12806_03_23.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![查看活动应用程序和在应用程序之间切换](img/B12806_03_23.jpg)'
- en: You can now swipe left and right through the recent apps, swipe an app up to
    close it, or tap the back button to return to what you were doing before you viewed
    this option. Do try this out, as we will use these basic features quite often
    in this book.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以通过最近的应用程序向左或向右滑动，向上滑动应用程序以关闭它，或者点击返回按钮返回到您在查看此选项之前所做的事情。请尝试一下，因为我们在本书中经常会使用这些基本功能。
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Remember that the goal of this chapter was to familiarize ourselves with the
    system and structure of Android and an Android project. Android projects are an
    elaborate interweaving of Kotlin and a multitude of resource files. Resource files
    can contain XML to describe our layouts, textual content, styles, and colors,
    as well as images. Resources can be produced to target different languages and
    regions of the world. Other resource types that we will see and use throughout
    the book include themes and sound effects.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，本章的目标是熟悉Android系统和Android项目的结构。Android项目是Kotlin和大量资源文件的复杂交织。资源文件可以包含XML来描述我们的布局、文本内容、样式和颜色，以及图像。资源可以针对世界各地的不同语言和地区进行生产。我们将在整本书中看到并使用的其他资源类型包括主题和音效。
- en: It is not important to remember all the different ways in which the different
    resource files and Kotlin files are interconnected. It is only important to realize
    that they *are* interconnected, and also be able to examine files of various types
    and realize when they are dependent on code in another file. Whenever we create
    connections from our Kotlin code to the XML code, I will always point out the
    details of the connection again.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 记住不同资源文件和Kotlin文件相互关联的不同方式并不重要。重要的是意识到它们是相互关联的，并且能够检查各种类型的文件，并意识到它们何时依赖于另一个文件中的代码。每当我们从Kotlin代码创建连接到XML代码时，我都会再次指出连接的细节。
- en: We do not need to learn XML in addition to Kotlin, but we will become a little
    bit familiar with it over the next 25 chapters. Kotlin will be the focus of this
    book, but our Kotlin code will frequently refer to the XML code, so understanding
    and having seen some examples of the interconnections will put you in good stead
    to make quicker progress.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要额外学习XML，而是会在接下来的25章中对其有一些了解。Kotlin将是本书的重点，但我们的Kotlin代码将经常涉及XML代码，因此理解并看到一些相互关联的示例将使您更快地取得进展。
- en: We have also explored the emulator to get the most out of it when testing our
    apps.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探索了模拟器，以便在测试我们的应用程序时充分利用它。
- en: In the next chapter, we will build three custom layouts using three different
    Android layout schemes. We will also write some Kotlin code so that we can switch
    between them with the tap of a button.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用三种不同的Android布局方案构建三个自定义布局。我们还将编写一些Kotlin代码，以便我们可以通过点击按钮在它们之间进行切换。
