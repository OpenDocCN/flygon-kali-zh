["```js\nconsole.log(['Hello', 'world'].join(' ')) // normal way\nconsole.log(Array.prototype.join.call(['Hello', 'world'], ' ')); // using call\n```", "```js\nconsole.log((function(){console.log(this.length)}).call([1,2,3]));\n```", "```js\nconsole.log(Math.max(1,2,3)); // returns 3\nconsole.log(Math.max([1,2,3])); // won't work for arrays though\nconsole.log(Math.max.apply(null, [1,2,3])); // but this will work\n```", "```js\n// these two lines are equivalent\nfunc.call(thisValue);\nFunction.prototype.call.call(func, thisValue);\n```", "```js\nfunction Drum(){\n  this.noise = 'boom';\n  this.duration = 1000;\n  this.goBoom = function(){console.log(this.noise)};\n}\nvar drum = new Drum();\nsetInterval(drum.goBoom.bind(drum), drum.duration);\n```", "```js\nfunction bindFirstArg(func, a) {\n  return function(b) {\n    return func(a, b);\n  };\n}\n```", "```js\nvar powersOfTwo = bindFirstArg(Math.pow, 2);\nconsole.log(powersOfTwo(3)); // 8\nconsole.log(powersOfTwo(5)); // 32\n```", "```js\nfunction bindSecondArg(func, b) {\n  return function(a) {\n    return func(a, b);\n  };\n}\nvar squareOf = bindSecondArg(Math.pow, 2);\nvar cubeOf = bindSecondArg(Math.pow, 3);\nconsole.log(squareOf(3)); // 9\nconsole.log(squareOf(4)); // 16\nconsole.log(cubeOf(3));   // 27\nconsole.log(cubeOf(4));   // 64\n```", "```js\nvar makePowersOf = bindFirstArg(bindFirstArg, Math.pow);\nvar powersOfThree = makePowersOf(3);\nconsole.log(powersOfThree(2)); // 9\nconsole.log(powersOfThree(3)); // 27\n```", "```js\nFunction.prototype.partialApply = function(){\n  var func = this; \n  args = Array.prototype.slice.call(arguments);\n  return function(){\n    return func.apply(this, args.concat(\n      Array.prototype.slice.call(arguments)\n    ));\n  };\n};\n```", "```js\nfunction nums2hex() {\n  function componentToHex(component) {\n    var hex = component.toString(16);\n    // make sure the return value is 2 digits, i.e. 0c or 12\n    if (hex.length == 1) {\n      return \"0\" + hex;\n    }\n    else {\n      return hex;\n    }\n  }\n  return Array.prototype.map.call(arguments, componentToHex).join('');\n}\n\n// the function works on any number of inputs\nconsole.log(nums2hex()); // ''\nconsole.log(nums2hex(100,200)); // '64c8'\nconsole.log(nums2hex(100, 200, 255, 0, 123)); // '64c8ff007b'\n\n// but we can use the partial function to partially apply\n// arguments, such as the OUI of a mac address\nvar myOUI = 123;\nvar getMacAddress = nums2hex.partialApply(myOUI);\nconsole.log(getMacAddress()); // '7b'\nconsole.log(getMacAddress(100, 200, 2, 123, 66, 0, 1)); // '7b64c8027b420001'\n\n// or we can convert rgb values of red only to hexadecimal\nvar shadesOfRed = nums2hex.partialApply(255);\nconsole.log(shadesOfRed(123, 0));   // 'ff7b00'\nconsole.log(shadesOfRed(100, 200)); // 'ff64c8'\n```", "```js\nFunction.prototype.partialApplyRight = function(){\n  var func = this; \n  args = Array.prototype.slice.call(arguments);\n  return function(){\n    return func.apply(\n      this,\n      [].slice.call(arguments, 0)\n      .concat(args));\n  };\n};\n\nvar shadesOfBlue = nums2hex.partialApplyRight(255);\nconsole.log(shadesOfBlue(123, 0));   // '7b00ff'\nconsole.log(shadesOfBlue(100, 200)); // '64c8ff'\n\nvar someShadesOfGreen = nums2hex.partialApplyRight(255, 0);\nconsole.log(shadesOfGreen(123));   // '7bff00'\nconsole.log(shadesOfGreen(100));   // '64ff00'\n```", "```js\nFunction.prototype.curry = function (numArgs) {\n  var func = this;\n  numArgs = numArgs || func.length;\n\n  // recursively acquire the arguments\n  function subCurry(prev) {\n    return function (arg) {\n      var args = prev.concat(arg);\n      if (args.length < numArgs) {\n        // recursive case: we still need more args\n        return subCurry(args);\n      }\n      else {\n        // base case: apply the function\n        return func.apply(this, args);\n      }\n    };\n  }\n  return subCurry([]);\n};\n```", "```js\nfunction rgb2hex(r, g, b) {\n  // nums2hex is previously defined in this chapter\n  return '#' + nums2hex(r) + nums2hex(g) + nums2hex(b);\n}\nvar hexColors = rgb2hex.curry();\nconsole.log(hexColors(11)) // returns a curried function\nconsole.log(hexColors(11,12,123)) // returns a curried function\nconsole.log(hexColors(11)(12)(123)) // returns #0b0c7b\nconsole.log(hexColors(210)(12)(0))  // returns #d20c00\n```", "```js\nvar reds = function(g,b){return hexColors(255)(g)(b)};\nvar greens = function(r,b){return hexColors(r)(255)(b)};\nvar blues  = function(r,g){return hexColors(r)(g)(255)};\nconsole.log(reds(11, 12))   // returns #ff0b0c\nconsole.log(greens(11, 12)) // returns #0bff0c\nconsole.log(blues(11, 12))  // returns #0b0cff\n```", "```js\nvar hexs = nums2hex.curry(2);\nconsole.log(hexs(11)(12));     // returns 0b0c\nconsole.log(hexs(11));         // returns function\nconsole.log(hexs(110)(12)(0)); // incorrect\n```", "```js\nvar roundedSqrt = Math.round.compose(Math.sqrt)\nconsole.log( roundedSqrt(5) ); // Returns: 2\n\nvar squaredDate =  roundedSqrt.compose(Date.parse)\nconsole.log( squaredDate(\"January 1, 2014\") ); // Returns: 1178370 \n```", "```js\nvar compose = function(f, g) {\n  return function(x) {\n    return f(g(x));\n  };\n};\n```", "```js\nFunction.prototype.compose = function(prevFunc) {\n  var nextFunc = this;\n  return function() {\n    return nextFunc.call(this,prevFunc.apply(this,arguments));\n  }\n}\n```", "```js\nfunction function1(a){return a + ' 1';}\nfunction function2(b){return b + ' 2';}\nfunction function3(c){return c + ' 3';}\nvar composition = function3.compose(function2).compose(function1);\nconsole.log( composition('count') ); // returns 'count 1 2 3'\n```", "```js\nFunction.prototype.sequence  = function(prevFunc) {\n  var nextFunc = this;\n  return function() {\n    return prevFunc.call(this,nextFunc.apply(this,arguments));\n  }\n}\n```", "```js\nvar sequences = function1.sequence(function2).sequence(function3);\nconsole.log( sequences('count') ); // returns 'count 1 2 3'\n```", "```js\nfunction floorSqrt1(num) {\n  var sqrtNum = Math.sqrt(num);\n  var floorSqrt = Math.floor(sqrtNum);\n  var stringNum = String(floorSqrt);\n  return stringNum;\n}\n\nfunction floorSqrt2(num) {\n  return String(Math.floor(Math.sqrt(num)));\n}\n\nfunction floorSqrt3(num) {\n  return [num].map(Math.sqrt).map(Math.floor).toString();\n}\nvar floorSqrt4 = String.compose(Math.floor).compose(Math.sqrt);\nvar floorSqrt5 = Math.sqrt.sequence(Math.floor).sequence(String);\n\n// all functions can be called like this:\nfloorSqrt<N>(17); // Returns: 4\n```", "```js\n// getStringLength :: String -> Intfunction getStringLength(s){return s.length};\n// concatDates :: Date -> Date -> [Date]function concatDates(d1,d2){return [d1, d2]};\n// pureFunc :: (int -> Bool) -> [int] -> [int]pureFunc(func, arr){return arr.filter(func)} \n```", "```js\n// stringToArray :: String -> [Char]\nfunction stringToArray(s) { return s.split(''); }\n\n// arrayToString :: [Char] -> String\nfunction arrayToString(a) { return a.join(''); }\n\n// nextChar :: Char -> Char\nfunction nextChar(c) { \n  return String.fromCharCode(c.charCodeAt(0) + 1); }\n\n// previousChar :: Char -> Char\nfunction previousChar(c) {\n  return String.fromCharCode(c.charCodeAt(0)-1); }\n\n// higherColorHex :: Char -> Char\nfunction higherColorHex(c) {return c >= 'f' ? 'f' :\n                                   c == '9' ? 'a' :\n                                   nextChar(c)}\n\n// lowerColorHex :: Char -> Char\nfunction lowerColorHex(c) { return c <= '0' ? '0' : \n                                   c == 'a' ? '9' : \n                                   previousChar(c); }\n\n// raiseColorHexes :: String -> String\nfunction raiseColorHexes(arr) { return arr.map(higherColorHex); }\n\n// lowerColorHexes :: String -> String\nfunction lowerColorHexes(arr) { return arr.map(lowerColorHex); }\n```", "```js\nvar lighterColor = arrayToString\n  .compose(raiseColorHexes)\n  .compose(stringToArray)\n  var darkerColor = arrayToString\n  .compose(lowerColorHexes)\n  .compose(stringToArray)\n\nconsole.log( lighterColor('af0189') ); // Returns: 'bf129a'\nconsole.log( darkerColor('af0189')  );  // Returns: '9e0078'\n```", "```js\n// component2hex :: Ints -> Int\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\n// nums2hex :: Ints* -> Int\nfunction nums2hex() {\n  return Array.prototype.map.call(arguments, componentToHex).join('');\n}\n```", "```js\nvar lighterColors = lighterColor\n  .compose(nums2hex.curry());\nvar darkerRed = darkerColor\n  .compose(nums2hex.partialApply(255));\nVar lighterRgb2hex = lighterColor\n  .compose(nums2hex.partialApply());\n\nconsole.log( lighterColors(123, 0, 22) ); // Returns: 8cff11 \nconsole.log( darkerRed(123, 0) ); // Returns: ee6a00 \nconsole.log( lighterRgb2hex(123,200,100) ); // Returns: 8cd975\n```", "```js\n// lighterColorNumSteps :: string -> num -> string\nfunction lighterColorNumSteps(color, n) {\n  for (var i = 0; i < n; i++) {\n    color = lighterColor(color);\n  }\n  return color;\n}\n\n// now we can create functions like this:\nvar lighterRedNumSteps = lighterColorNumSteps.curry().compose(reds)(0,0);\n\n// and use them like this:\nconsole.log( lighterRedNumSteps(5) ); // Return: 'ff5555'\nconsole.log( lighterRedNumSteps(2) ); // Return: 'ff2222'\n```", "```js\nfunction Receptor(name, available){\n  this.name = name;\n  this.available = available; // mutable state\n  this.render = function(){\n    output = '<li>';\n    output += this.available ? \n      this.name + ' is available' : \n      this.name + ' is not available';\n    output += '</li>';\n    return output;\n  }\n}\nvar me = new Receptor;\nvar receptors = app.getReceptors().push(me);\napp.container.innerHTML = receptors.map(function(r){\n  return r.render();\n}).join('');\n```", "```js\nvar lazyReceptors = Lazy(receptors).map(function(r){\n  return r.render();\n});\napp.container.innerHTML = lazyReceptors.toArray().join('');\n```", "```js\napp.onUserLogin = function(){\n  this.available = true;\n  app.container.innerHTML = lazyReceptors.toArray().join('');\n};\napp.onUserLogout = function(){\n  this.available = false;\n  app.container.innerHTML = lazyReceptors.toArray().join('');\n};\n```", "```js\nwindow.addEventListener('focus', function(event) {\n  me.available = true;\n  app.setReceptor(me.name, me.available); // just go with it\n  container.innerHTML = lazyReceptors.toArray().join('');\n});\nwindow.addEventListener('blur', function(event) {\n  me.available = false;\n  app.setReceptor(me.name, me.available);\n  container.innerHTML = lazyReceptors.toArray().join('');\n});\n```", "```js\nvar focusedReceptors = Lazy.events(window, \"focus\").each(function(e){\n  me.available = true;\n  app.setReceptor(me.name, me.available);\n  container.innerHTML = lazyReceptors.toArray().join('');\n});\nvar blurredReceptors = Lazy.events(window, \"blur\").each(function(e){\n  me.available = false;\n  app.setReceptor(me.name, me.available);\n  container.innerHTML = lazyReceptors.toArray().join('');\n});\n```", "```js\nvar timeout = null;\nvar inputs = Lazy.events(window, \"mousemove\").each(function(e){\n  me.available = true;\n  container.innerHTML = lazyReceptors.toArray().join('');\n  clearTimeout(timeout);\n  timeout = setTimeout(function(){\n    me.available = false;\n    container.innerHTML = lazyReceptors.toArray().join('');\n  }, 1800000); // 30 minutes\n});\n```", "```js\nfunction Region(name, percent, parties){\n  // mutable properties:\n  this.name = name;\n  this.percent = percent; // % of precincts reported\n  this.parties = parties; // political parties\n\n  // return an HTML representation\n  this.render = function(){\n    var lis = this.parties.map(function(p){\n      return '<li>' + p.name + ': ' + p.votes + '</li>';\n    });\n    var output = '<h2>' + this.name + '</h2>';\n    output += '<ul>' + lis.join('') + '</ul>'; \n    output += 'Percent reported: ' + this.percent; \n    return output;\n  }\n}\nfunction getRegions(data) {\n  return JSON.parse(data).map(function(obj){\n    return new Region(obj.name, obj.percent, obj.parties);\n  });\n}\nvar url = 'http://api.server.com/election-data?format=json';\nvar data = jQuery.ajax(url);\nvar regions = getRegions(data);\napp.container.innerHTML = regions.map(function(r){\n  return r.render();\n}).join('');\n```", "```js\nvar eventStream = Bacon.fromPoll(10000, function(){\n  return Bacon.Next;\n});\nvar subscriber = eventStream.subscribe(function(){\n  var url = 'http://api.server.com/election-data?format=json';\n  var data = jQuery.ajax(url);\n  var newRegions = getRegions(data);\t\n  container.innerHTML = newRegions.map(function(r){\n    return r.render();\n  }).join('');\n});\n```", "```js\nvar url = 'http://api.server.com/election-data?format=json';\nvar eventStream = Bacon.fromPromise(jQuery.ajax(url));\nvar subscriber = eventStream.onValue(function(data){\n  newRegions = getRegions(data);\n  container.innerHTML = newRegions.map(function(r){\n    return r.render();\n  }).join('');\n}\n```", "```js\n// create the eventStream out side of the functions\nvar eventStream = Bacon.onPromise(jQuery.ajax(url));\nvar subscribe = null;\nvar url = 'http://api.server.com/election-data?format=json';\n\n// our un-modified subscriber\n$('button#showAll').click(function() {\n  var subscriber = eventStream.onValue(function(data) {\n    var newRegions = getRegions(data).map(function(r) {\n      return new Region(r.name, r.percent, r.parties);\n    });\n    container.innerHTML = newRegions.map(function(r) {\n      return r.render();\n    }).join('');\n  });\n});\n\n// a button for showing the total votes\n$('button#showTotal').click(function() {\n  var subscriber = eventStream.onValue(function(data) {\n    var emptyRegion = new Region('empty', 0, [{\n      name: 'Republican', votes: 0\n    }, {\n      name: 'Democrat', votes: 0\n    }]);\n    var totalRegions = getRegions(data).reduce(function(r1, r2) {\n      newParties = r1.parties.map(function(x, i) {\n      return {\n        name: r1.parties[i].name,\n        votes: r1.parties[i].votes + r2.parties[i].votes\n      };\n    });\n    newRegion = new Region('Total', (r1.percent + r2.percent) / 2, newParties);\n    return newRegion;\n    }, emptyRegion);\n    container.innerHTML = totalRegions.render();\n  });\n});\n\n// a button for only displaying regions that are reporting > 50%\n$('button#showMostlyReported').click(function() {\n  var subscriber = eventStream.onValue(function(data) {\n    var newRegions = getRegions(data).map(function(r) {\n      if (r.percent > 50) return r;\n      else return null;\n    }).filter(function(r) {return r != null;});\n    container.innerHTML = newRegions.map(function(r) {\n      return r.render();\n    }).join('');\n  });\n});\n```"]