["```cs\nWebClient client = new WebClient();\nstring reply = client.DownloadString(\"http://www.aspnet.com\"); \nConsole.WriteLine(reply);\n```", "```cs\nprivate static void DownloadAsynchronously()\n {\n     WebClient client = new WebClient(); \n     client.DownloadStringCompleted += new \n     DownloadStringCompletedEventHandler(DownloadComplete); \n     client.DownloadStringAsync(new Uri(\"http://www.aspnet.com\"));\n }\n```", "```cs\nprivate static void DownloadComplete(object sender, DownloadStringCompletedEventArgs e)\n{\n     if (e.Error != null)\n     {\n         Console.WriteLine(\"Some error has occurred.\");\n         return;\n     }\n     Console.WriteLine(e.Result);\n     Console.ReadLine();\n }\n```", "```cs\n public static void Main()\n        {\n         DownloadAsynchronously();   \n        }\n```", "```cs\nprivate static void DownloadComplete(object sender, DownloadStringCompletedEventArgs e)\n        {\n            \u2026\n            \u2026\n            \u2026\n            Console.ReadLine() ;//Added this line\n        }\n```", "```cs\npublic IActionResult Index()\n{\n    WebClient client = new WebClient();\n    string content = client.DownloadString(new \n     Uri(\"http://www.aspnet.com\"));\n    return Content(content,\"text/html\");\n}\n```", "```cs\npublic async Task<IActionResult> Index()\n        {\n            HttpClient client = new HttpClient();\n            HttpResponseMessage response = await \n             client.GetAsync(\"http://www.aspnet.com\");\n            string content = await response.Content.ReadAsStringAsync();\n            return Content(content,\"text/html\");\n        }\n```", "```cs\nFunc<int, int> square = (x) => {return x * x;};\n```", "```cs\nFunc<int, Task<int>> square =async (x) => {return x * x;};\n```", "```cs\nFunc<int, Task<int>> square =async (x) => x * x;\n```", "```cs\npublic static Task<int> ReadFromFileTask(this FileStream stream, byte[] buffer, int offset, int count, object state)\n{\n    var taskCompletionSource = new TaskCompletionSource<int>();\n    stream.BeginRead(buffer, offset, count, ar =>\n    {\n         try \n         { \n               taskCompletionSource.SetResult(stream.EndRead(ar));\n         }\n         catch (Exception exc) \n         { \n               taskCompletionSource.SetException(exc); \n         }\n     }, state);\n     return taskCompletionSource.Task;\n}\n```", "```cs\n private static Task DoSomethingFaulty()\n {\n      Task.Delay(2000);\n      throw new Exception(\"This is custom exception.\");\n }\n```", "```cs\n  private static Task DoSomethingFaulty()\n  {\n      Task.Delay(2000);\n      throw new Exception(\"This is custom exception.\");\n  }\n```", "```cs\nprivate async static Task AsyncReturningTaskExample()\n {\n      Task<string> task = DoSomethingFaulty();\n      Console.WriteLine(\"This should not execute\");\n      try\n      {\n           task.ContinueWith((s) =>\n           {\n             Console.WriteLine(s);\n           });\n      }\n      catch (Exception ex)\n      {\n       Console.WriteLine(ex.Message);\n       Console.WriteLine(ex.StackTrace);\n      }\n  }\n```", "```cs\n public static void Main()\n {\n     Console.WriteLine(\"Main Method Starts\");\n     var task = AsyncReturningTaskExample();\n     Console.WriteLine(\"In Main Method After calling method\");\n     Console.ReadLine();\n }\n```", "```cs\nvar task = AsyncReturningTaskExample();\nif (task.IsFaulted)\n    Console.WriteLine(task.Exception.Flatten().Message.ToString());\n```", "```cs\npublic static void Main()\n{\n    Console.WriteLine(\"Main Method Started\");\n    var task = Scenario2CallAsyncWithoutAwaitFromInsideTryCatch();\n    if (task.IsFaulted)\n        Console.WriteLine(task.Exception.Flatten().Message.ToString());\n    Console.WriteLine(\"In Main Method After calling method\");\n    Console.ReadLine();\n}       \n```", "```cs\nprivate async static Task Scenario2CallAsyncWithoutAwaitFromInsideTryCatch()\n{\n     try\n     {\n         var task = DoSomethingFaulty();\n         Console.WriteLine(\"This should not execute\"); \n         task.ContinueWith((s) =>\n         {\n             Console.WriteLine(s);\n         });\n     }\n     catch (Exception ex)\n     {\n         Console.WriteLine(ex.Message);\n         Console.WriteLine(ex.StackTrace);\n     }\n}\n```", "```cs\nprivate async static Task Scenario3CallAsyncWithAwaitFromOutsideTryCatch()\n{\n    await DoSomethingFaulty();\n    Console.WriteLine(\"This should not execute\"); \n}\n```", "```cs\npublic static void Main()\n{\n      Console.WriteLine(\"Main Method Starts\");\n      var task = Scenario3CallAsyncWithAwaitFromOutsideTryCatch();\n      if (task.IsFaulted)\n          Console.WriteLine(task.Exception.Flatten().Message.ToString());\n      Console.WriteLine(\"In Main Method After calling method\");\n      Console.ReadLine();\n}\n```", "```cs\nprivate async static void Scenario4CallAsyncWithoutAwaitFromOutsideTryCatch()\n{\n    Task task = DoSomethingFaulty();\n    Console.WriteLine(\"This should not execute\");\n}\n```", "```cs\npublic static void Main()\n{\n    Console.WriteLine(\"Main Method Started\"); \n    Scenario4CallAsyncWithoutAwaitFromOutsideTryCatch();\n    Console.WriteLine(\"In Main Method After calling method\"); \n    Console.ReadLine();\n}\n```", "```cs\nAppDomain.CurrentDomain.UnhandledException += (s, e) => Console.WriteLine(\"Program Crashed\", \"Unhandled Exception Occurred\");\nTaskScheduler.UnobservedTaskException += (s, e) => Console.WriteLine(\"Program Crashed\", \"Unhandled Exception Occurred\");\n```", "```cs\n public async static void Main()\n        {\n            var urls =  Enumerable.Repeat(\"http://www.dummyurl.com\", 100);\n            foreach (var url in urls)\n            {\n                HttpClient client = new HttpClient();\n                HttpResponseMessage response = await \n                 client.GetAsync(\"http://www.aspnet.com\");\n                string content = await \n                  response.Content.ReadAsStringAsync();\n                Console.WriteLine();\n            }\n```", "```cs\n     Parallel.ForEach(urls, url =>\n            {\n                HttpClient client = new HttpClient();\n                HttpResponseMessage response = await \n                 client.GetAsync(\"http://www.aspnet.com\");\n                string content = await \n                 response.Content.ReadAsStringAsync();\n            });\n```", "```cs\nParallel.ForEach(urls,async url =>\n            {\n                HttpClient client = new HttpClient();\n                HttpResponseMessage response = await \n                 client.GetAsync(\"http://www.aspnet.com\");\n                string content = await \n                 response.Content.ReadAsStringAsync();\n            });\n```", "```cs\npublic static void Main(string[] args)\n{\n    MainAsync(args).GetAwaiter().GetResult();\n    Console.ReadLine();\n}\npublic static async Task MainAsync(string[] args)\n{\n    Stopwatch stopwatch = Stopwatch.StartNew();\n    var value1 = await Task1();\n    var value2 = await Task2();\n    var value3 = await Task3();\n    stopwatch.Stop();\n    Console.WriteLine($\"Total time taken is \n     {stopwatch.ElapsedMilliseconds}\");\n}\npublic static async Task<int> Task1()\n{\n    await Task.Delay(2000);\n    return 100;\n}\npublic static async Task<int> Task2()\n{\n    await Task.Delay(2000);\n    return 200;\n}\npublic static async Task<int> Task3()\n{\n    await Task.Delay(2000);\n    return 300;\n}\n```", "```cs\nStopwatch stopwatch = Stopwatch.StartNew();\n       await Task.WhenAll(Task1(), Task2(), Task3());\n       stopwatch.Stop();\n       Console.WriteLine($\"Total time taken is {stopwatch.ElapsedMilliseconds}\");\n```", "```cs\nHttpClient client = new HttpClient();\nHttpResponseMessage response = await client.GetAsync(url).ConfigureAwait(false);\n```", "```cs\nprivate async Task DelayAsync()\n{\n    await Task.Delay(2000);\n}\npublic void Deadlock()\n{\n    var task = DelayAsync();\n    task.Wait();\n}\n```", "```cs\nprivate async Task DelayAsync()\n{\nawait Task.Delay(2000);\n}\npublic void Deadlock()\n{\nvar task = DelayAsync().ConfigureAwait(false);\ntask.Wait();\n}\n```"]