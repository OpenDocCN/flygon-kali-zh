["```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void TestCounter(CounterBase c)\n    {\n      for (int i = 0; i < 100000; i++)\n      {\n        c.Increment();\n        c.Decrement();\n      }\n    }\n\n    class Counter : CounterBase\n    {\n      private int _count;\n      public int Count { get { return _count; } }\n\n      public override void Increment()\n      {\n        _count++;\n      }\n\n      public override void Decrement()\n      {\n        _count--;\n      }\n    }\n\n    class CounterNoLock : CounterBase\n    {\n      private int _count;\n\n      public int Count { get { return _count; } }\n\n      public override void Increment()\n      {\n        Interlocked.Increment(ref _count);\n      }\n\n      public override void Decrement()\n      {\n        Interlocked.Decrement(ref _count);\n      }\n    }\n\n    abstract class CounterBase\n    {\n      public abstract void Increment();\n\n      public abstract void Decrement();\n    }\n    ```", "```cs\n    Console.WriteLine(\"Incorrect counter\");\n\n    var c = new Counter();\n\n    var t1 = new Thread(() => TestCounter(c));\n    var t2 = new Thread(() => TestCounter(c));\n    var t3 = new Thread(() => TestCounter(c));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    t1.Join();\n    t2.Join();\n    t3.Join();\n\n    Console.WriteLine(\"Total count: {0}\", c.Count);\n    Console.WriteLine(\"--------------------------\");\n    Console.WriteLine(\"Correct counter\");\n\n    var c1 = new CounterNoLock();\n\n    t1 = new Thread(() => TestCounter(c1));\n    t2 = new Thread(() => TestCounter(c1));\n    t3 = new Thread(() => TestCounter(c1));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    t1.Join();\n    t2.Join();\n    t3.Join();\n    Console.WriteLine(\"Total count: {0}\", c1.Count);\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    const string MutexName = \"CSharpThreadingCookbook\";\n\n    using (var m = new Mutex(false, MutexName))\n    {\n      if (!m.WaitOne(TimeSpan.FromSeconds(5), false))\n      {\n        Console.WriteLine(\"Second instance is running!\");\n      }\n      else\n      {\n        Console.WriteLine(\"Running!\");\n        Console.ReadLine();\n        m.ReleaseMutex();\n      }\n    }\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static SemaphoreSlim _semaphore = new SemaphoreSlim(4);\n    ```", "```cs\n    static void AccessDatabase(string name, int seconds)\n    {\n      Console.WriteLine(\"{0} waits to access a database\", name);\n      _semaphore.Wait();\n      Console.WriteLine(\"{0} was granted an access to a database\",name);\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      Console.WriteLine(\"{0} is completed\", name);\n      _semaphore.Release();\n\n    }\n    ```", "```cs\n    for (int i = 1; i <= 6; i++)\n    {\n      string threadName = \"Thread \" + i;\n      int secondsToWait = 2 + 2*i;\n      var t = new Thread(() => AccessDatabase(threadName, secondsToWait));\n      t.Start();\n    }\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    private static AutoResetEvent _workerEvent = newAutoResetEvent(false);\n    private static AutoResetEvent _mainEvent = newAutoResetEvent(false);\n\n    static void Process(int seconds)\n    {\n      Console.WriteLine(\"Starting a long running work...\");\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      Console.WriteLine(\"Work is done!\");\n      _workerEvent.Set();\n      Console.WriteLine(\"Waiting for a main thread to completeits work\");\n      _mainEvent.WaitOne();\n      Console.WriteLine(\"Starting second operation...\");\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      Console.WriteLine(\"Work is done!\");\n      _workerEvent.Set();\n    }\n    ```", "```cs\n    var t = new Thread(() => Process(10));\n    t.Start();\n\n    Console.WriteLine(\"Waiting for another thread to completework\");\n    _workerEvent.WaitOne();\n    Console.WriteLine(\"First operation is completed!\");\n    Console.WriteLine(\"Performing an operation on a mainthread\");\n    Thread.Sleep(TimeSpan.FromSeconds(5));\n    _mainEvent.Set();\n    Console.WriteLine(\"Now running the second operation on asecond thread\");\n    _workerEvent.WaitOne();\n    Console.WriteLine(\"Second operation is completed!\");\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static ManualResetEventSlim _mainEvent = new ManualResetEventSlim(false);\n\n    static void TravelThroughGates(string threadName,int seconds)\n    {\n      Console.WriteLine(\"{0} falls to sleep\", threadName);\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      Console.WriteLine(\"{0} waits for the gates to open!\",threadName);\n      _mainEvent.Wait();\n      Console.WriteLine(\"{0} enters the gates!\", threadName);\n    }\n    ```", "```cs\n    var t1 = new Thread(() => TravelThroughGates(\"Thread 1\",5));\n    var t2 = new Thread(() => TravelThroughGates(\"Thread 2\",6));\n    var t3 = new Thread(() => TravelThroughGates(\"Thread 3\",12));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    Thread.Sleep(TimeSpan.FromSeconds(6));\n    Console.WriteLine(\"The gates are now open!\");\n    _mainEvent.Set();\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    _mainEvent.Reset();\n    Console.WriteLine(\"The gates have been closed!\");\n    Thread.Sleep(TimeSpan.FromSeconds(10));\n    Console.WriteLine(\"The gates are now open for the secondtime!\");\n    _mainEvent.Set();\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    Console.WriteLine(\"The gates have been closed!\");\n    _mainEvent.Reset();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static CountdownEvent _countdown = new CountdownEvent(2);\n\n    static void PerformOperation(string message, int seconds)\n    {\n      Thread.Sleep(TimeSpan.FromSeconds(seconds));\n      Console.WriteLine(message);\n      _countdown.Signal();\n    }\n    ```", "```cs\n    Console.WriteLine(\"Starting two operations\");\n    var t1 = new Thread(() => PerformOperation(\"Operation 1 iscompleted\", 4));\n    var t2 = new Thread(() => PerformOperation(\"Operation 2 iscompleted\", 8));\n    t1.Start();\n    t2.Start();\n    _countdown.Wait();\n    Console.WriteLine(\"Both operations have been completed.\");\n    _countdown.Dispose();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static Barrier _barrier = new Barrier(2, \n      b => Console.WriteLine(\"End of phase {0}\",b.CurrentPhaseNumber + 1));\n\n    static void PlayMusic(string name, string message,int seconds)\n    {\n      for (int i = 1; i < 3; i++)\n      {\n        Console.WriteLine(\"----------------------------------------------\");\n        Thread.Sleep(TimeSpan.FromSeconds(seconds));\n        Console.WriteLine(\"{0} starts to {1}\", name, message);\n        Thread.Sleep(TimeSpan.FromSeconds(seconds));\n        Console.WriteLine(\"{0} finishes to {1}\", name,message);\n        _barrier.SignalAndWait();\n      }\n    }\n    ```", "```cs\n    var t1 = new Thread(() => PlayMusic(\"the guitarist\",\"play an amazing solo\", 5));\n    var t2 = new Thread(() => PlayMusic(\"the singer\",\"sing his song\", 2));\n\n    t1.Start();\n    t2.Start();\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading;\n    ```", "```cs\n    static ReaderWriterLockSlim _rw = newReaderWriterLockSlim();\n    static Dictionary<int, int> _items =new Dictionary<int, int>();\n\n    static void Read()\n    {\n      Console.WriteLine(\"Reading contents of a dictionary\");\n      while (true)\n      {\n        try\n        {\n          _rw.EnterReadLock();\n          foreach (var key in _items.Keys)\n          {\n            Thread.Sleep(TimeSpan.FromSeconds(0.1));\n          }\n        }\n        finally\n        {\n          _rw.ExitReadLock();\n        }\n      }\n    }\n\n    static void Write(string threadName)\n    {\n      while (true)\n      {\n        try\n        {\n          int newKey = new Random().Next(250);\n          _rw.EnterUpgradeableReadLock();\n          if (!_items.ContainsKey(newKey))\n          {\n            try\n            {\n              _rw.EnterWriteLock();\n              _items[newKey] = 1;\n              Console.WriteLine(\"New key {0} is added to adictionary by a {1}\", newKey, threadName);\n            }\n            finally\n            {\n              _rw.ExitWriteLock();\n            }\n          }\n          Thread.Sleep(TimeSpan.FromSeconds(0.1));\n        }\n        finally\n        {\n          _rw.ExitUpgradeableReadLock();\n        }\n      }\n    }\n    ```", "```cs\n    new Thread(Read){ IsBackground = true }.Start();\n    new Thread(Read){ IsBackground = true }.Start();\n    new Thread(Read){ IsBackground = true }.Start();\n\n    new Thread(() => Write(\"Thread 1\")){ IsBackground =true }.Start();\n    new Thread(() => Write(\"Thread 2\")){ IsBackground =true }.Start();\n\n    Thread.Sleep(TimeSpan.FromSeconds(30)); \n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static volatile bool _isCompleted = false;\n\n    static void UserModeWait()\n    {\n      while (!_isCompleted)\n      {\n        Console.Write(\".\");\n      }\n      Console.WriteLine();\n      Console.WriteLine(\"Waiting is complete\");\n    }\n\n    static void HybridSpinWait()\n    {\n      var w = new SpinWait();\n      while (!_isCompleted)\n      {\n        w.SpinOnce();\n        Console.WriteLine(w.NextSpinWillYield);\n      }\n      Console.WriteLine(\"Waiting is complete\");\n    }\n    ```", "```cs\n    var t1 = new Thread(UserModeWait);\n    var t2 = new Thread(HybridSpinWait);\n\n    Console.WriteLine(\"Running user mode waiting\");\n    t1.Start();\n    Thread.Sleep(20);\n    _isCompleted = true;\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n    _isCompleted = false;\n    Console.WriteLine(\"Running hybrid SpinWait constructwaiting\");\n    t2.Start();\n    Thread.Sleep(5);\n    _isCompleted = true;\n    ```"]