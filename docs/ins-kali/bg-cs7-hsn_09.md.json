["```cs\nusing System.Linq;\nusing System.Collections.Generic;\n```", "```cs\nIEnumerable<string> names = new string[] { \"john\", \"job\", \"janet\", \"mary\", \"steve\" };\n```", "```cs\nList<int> lst = new int[] { 1, 2, 12, 4, 5, -10, 5, 25, 54 }.ToList();\n```", "```cs\nIEnumerable<int> valuesMoreThanTen = lst.Where(x => x >10);\n```", "```cs\nvaluesMoreThanTen.ToList().ForEach(x => sampLabel.Text += $\"<br>x={x}\");\n```", "```cs\nsampLabel.Text += \"<br><hr/>\";\n```", "```cs\nIEnumerable<string> namesWithJSorted = names.Where(name => name.Contains(\"j\")).OrderBy(name => name.Length);\n```", "```cs\nforeach(var str in namesWithJSorted)\n{\n    sampLabel.Text += $\"<br>{str}\";\n}\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        //line 16 creates array of names\n        IEnumerable<string> names = new string[] { \"john\", \"job\", \"janet\",\n        \"mary\", \"steve\" };\n        //line 18 creates array of integers, and converts to \n        //list of integers\n        List<int> lst = new int[] { 1, 2, 12, 4, 5, -10, 5, 25, 54 }.ToList();\n        //line below puts a lambda expression inside Where to \n        //create a query\n        IEnumerable<int> valuesMoreThanTen = lst.Where(x => x > 10);\n        //line 22 prints the results from lines 20 above\n        valuesMoreThanTen.ToList().ForEach(x => sampLabel.Text += $\"<br>x={x}\");\n        sampLabel.Text += \"<br><hr/>\";\n        //line 25 below chains functions, going from left to right, to \n        //produce a list of names with j, sorted by length\n        IEnumerable<string> namesWithJSorted = \n        names.Where(name => name.Contains( \"j\")).OrderBy\n        (name => name.Length);\n        //lines below display the names that are generated line 25 above\n        foreach (var str in namesWithJSorted)\n        {\n            sampLabel.Text += $\"<br>{str}\";\n        }\n    }\n}\n```"]