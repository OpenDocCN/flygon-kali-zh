- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: 1\. Running My First Docker Container
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 运行我的第一个Docker容器
- en: 'Activity 1.01: Pulling and Running the PostgreSQL Container Image from Docker
    Hub'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1.01：从Docker Hub拉取并运行PostgreSQL容器映像
- en: '**Solution**:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'To start the Postgres Docker container, first determine what environment variables
    are required to set the default username and password credentials for the database.
    Reading through the official Docker Hub page, you can see that you have configuration
    options for the `POSTGRES_USER` and `POSTGRES_PASSWORD` environment variables.
    Pass the environment variables using the `-e` flag. The final command to start
    our Postgres Docker container will be as follows:'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动Postgres Docker容器，首先确定需要设置数据库的默认用户名和密码凭据的环境变量。通过阅读官方Docker Hub页面，您可以看到`POSTGRES_USER`和`POSTGRES_PASSWORD`环境变量的配置选项。使用`-e`标志传递环境变量。启动我们的Postgres
    Docker容器的最终命令如下：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Running this command will start the container.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将启动容器。
- en: 'Execute the `docker ps` command to verify that it is running and healthy:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`docker ps`命令以验证其正在运行并且健康：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The command should return output like the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回如下输出：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It can be seen from the preceding output that the container with the ID `29f115af8cdd`
    is up and running.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以看出，具有ID`29f115af8cdd`的容器正在运行。
- en: In this activity, you have successfully started a PostgreSQL version 12 container
    that is part of the Panoramic Trekking App, which will be built over the course
    of this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您已成功启动了一个PostgreSQL版本12容器，该容器是Panoramic Trekking App的一部分，该应用程序将在本书的过程中构建。
- en: 'Activity 1.02: Accessing the Panoramic Trekking App Database'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1.02：访问Panoramic Trekking App数据库
- en: '**Solution**:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Log in to the database instance using `docker exec` to start the PSQL shell
    inside the container, passing in the `--username` flag and leaving the `--password`
    flag empty:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker exec`登录到数据库实例，启动容器内的PSQL shell，传递`--username`标志并将`--password`标志留空：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This should prompt you for the password and start a PSQL shell.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这应提示您输入密码并启动PSQL shell。
- en: 'Use the `\l` command to list all the databases:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`\l`命令列出所有数据库：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A list of databases running in the container will be returned:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回在容器中运行的数据库列表：
- en: '![Figure 1.4: List of databases'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4：数据库列表'
- en: '](image/B15021_01_04.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_01_04.jpg)'
- en: 'Figure 1.4: List of databases'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：数据库列表
- en: Finally, use the `\q` shortcut to exit from the shell.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`\q`快捷方式退出shell。
- en: Use the `docker stop` and `docker rm` commands to stop and clean up the container
    instance.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker stop`和`docker rm`命令停止和清理容器实例。
- en: In this activity, you accessed the database running in the container by logging
    in using the credentials that were set up in *Activity 1.01*, *Pulling and Running
    the PostgreSQL Container Image from Docker Hub*. You also listed the databases
    running in the container. The activity gave you hands-on experience of how to
    access the database running in any container using a PSQL shell.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您通过使用在*Activity 1.01*中设置的凭据登录到容器中运行的数据库。您还列出了在容器中运行的数据库。该活动让您亲身体验了如何使用PSQL
    shell访问在任何容器中运行的数据库。
- en: 2\. Getting Started with Dockerfiles
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 使用Dockerfiles入门
- en: 'Activity 2.01: Running a PHP Application on a Docker Container'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动2.01：在Docker容器上运行PHP应用程序
- en: '**Solution**:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Create a new directory named `activity-02-01` for this activity:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此活动创建一个名为`activity-02-01`的新目录：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Navigate to the newly created `activity-02-01` directory:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到新创建的`activity-02-01`目录：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Within the `activity-02-01` directory, create a file named `welcome.php`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity-02-01`目录中，创建一个名为`welcome.php`的文件：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, open `welcome.php` using your favorite text editor:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用您喜欢的文本编辑器打开`welcome.php`：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the `welcome.php` file with the content provided at the beginning of
    the activity, and then save and exit from the `welcome.php` file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `welcome.php` 文件，并使用活动开始时提供的内容，然后保存并退出 `welcome.php` 文件：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Within the `activity-02-01` directory, create a file named `Dockerfile`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `activity-02-01` 目录中，创建一个名为 `Dockerfile` 的文件：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, open the `Dockerfile` using your favorite text editor:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用您喜爱的文本编辑器打开 `Dockerfile`：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following content to the `Dockerfile`, and then save and exit from
    the `Dockerfile`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `Dockerfile` 中，然后保存并退出 `Dockerfile`：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We are starting this `Dockerfile` using the `ubuntu` base image followed by
    setting a couple of labels. Next, the `DEBIAN_FRONTEND` environment variable is
    set to `noninteractive` to make the package installations non-interactive. Then,
    the `apache2`, `php`, and `curl` packages are installed, and PHP files are copied
    to the `/var/www/html` directory. Next, the health check is configured and port
    `80` is exposed. Finally, the `apache2ctl` command is used to start the Apache
    web server.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `ubuntu` 基础镜像开始这个 `Dockerfile`，然后设置一些标签。接下来，将 `DEBIAN_FRONTEND` 环境变量设置为
    `noninteractive`，以使包安装变为非交互式。然后安装 `apache2`、`php` 和 `curl` 包，并将 PHP 文件复制到 `/var/www/html`
    目录。接下来，配置健康检查并暴露端口 `80`。最后，使用 `apache2ctl` 命令启动 Apache web 服务器。
- en: 'Now, build the Docker image:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，构建 Docker 镜像：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should get the following output after running the `build` command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `build` 命令后，您应该会得到以下输出：
- en: '![Figure 2.22: Building the activity-02-01 Docker image'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.22：构建活动-02-01 Docker 镜像'
- en: '](image/B15021_02_22.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_02_22.jpg)'
- en: 'Figure 2.22: Building the activity-02-01 Docker image'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22：构建活动-02-01 Docker 镜像
- en: 'Execute the `docker container run` command to start a new container from the
    Docker image that you built in the previous step:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `docker container run` 命令以从您在上一步中构建的 Docker 镜像启动新容器：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since you are starting the Docker container in detached mode (with the `-d`
    flag), the preceding command will output the ID of the resulting Docker container.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您是以分离模式（使用 `-d` 标志）启动 Docker 容器，上述命令将输出生成的 Docker 容器的 ID。
- en: 'Now, you should be able to view the Apache home page. Go to the `http://127.0.0.1/welcome.php`
    endpoint from your favorite web browser:![Figure 2.23: PHP application page'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该能够查看 Apache 主页。在您喜爱的网络浏览器中转到 `http://127.0.0.1/welcome.php` 终端节点：![图 2.23：PHP
    应用程序页面
- en: '](image/B15021_02_23.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_02_23.jpg)'
- en: 'Figure 2.23: PHP application page'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23：PHP 应用程序页面
- en: Note that the default Apache home page is visible. In the preceding output,
    you received the output as `Good Morning`. This output may differ, appearing as
    either `Good Afternoon` or `Good Evening` based on the time you run this container.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，默认的 Apache 主页是可见的。在前面的输出中，您收到了 `Good Morning` 的输出。此输出可能会有所不同，根据您运行此容器的时间，可能会显示为
    `Good Afternoon` 或 `Good Evening`。
- en: 'Now, clean up the container. First, stop the Docker container with the docker
    container stop command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，清理容器。首先，使用 `docker container stop` 命令停止 Docker 容器：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, remove the Docker container with the `docker container rm` command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 `docker container rm` 命令移除 Docker 容器：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this activity, we learned how to use the `Dockerfile` directives that we
    have learned so far in this chapter to dockerize a sample PHP application. We
    used multiple `Dockerfile` directives, including `FROM`, `LABEL`, `ENV`, `RUN`,
    `COPY`, `WORKDIR`, `HEALTHCHECK`, `EXPOSE`, and `ENTRYPOINT`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们学习了如何使用本章中迄今为止学到的 `Dockerfile` 指令来将示例 PHP 应用程序 docker 化。我们使用了多个 `Dockerfile`
    指令，包括 `FROM`、`LABEL`、`ENV`、`RUN`、`COPY`、`WORKDIR`、`HEALTHCHECK`、`EXPOSE` 和 `ENTRYPOINT`。
- en: 3\. Managing Your Docker Images
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 管理您的 Docker 镜像
- en: 'Activity 3.01: Build Scripts Using Git Hash Versioning'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 3.01：使用 Git 哈希版本控制构建脚本
- en: '**Solution**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'There are a variety of ways you could complete this activity. Here is one example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以完成这个活动。以下是一个例子：
- en: 'Create a new build script. The first line, showing the set `–ex` command, prints
    each step to the screen and will fail the script if any of the steps fail. *Lines
    3* and *4* set the variables for your registry and service names:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的构建脚本。第一行显示设置`–ex`命令，将每个步骤打印到屏幕上，并且如果任何步骤失败，脚本将失败。*第3行*和*第4行*设置了你的注册表和服务名称的变量：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In *line 6*, set the `GIT_VERSION` variable to point to your short Git commit
    hash. The build script then prints this value to the screen in *line 7*:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*第6行*，将`GIT_VERSION`变量设置为指向你的短Git提交哈希。构建脚本然后在*第7行*将这个值打印到屏幕上：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use the `docker build` command in *line 9* to create your new image and add
    the `docker push` command in *line 11* to push the image to your local Docker registry:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*第9行*使用`docker build`命令创建你的新镜像，并在*第11行*添加`docker push`命令将镜像推送到你的本地Docker注册表：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The script file will look like the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本文件将如下所示：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the following command to ensure that the script has been built and runs successfully:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来确保脚本已构建并成功运行：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should get output like the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到以下输出：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Activity 3.02: Configuring Your Local Docker Registry Storage'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动3.02：配置本地Docker注册表存储
- en: '**Solution**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'The following steps describe one of the ways of achieving the goal of the activity:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了实现活动目标的一种方式：
- en: 'Create the `test_registry` directory in your home directory:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的主目录中创建`test_registry`目录：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the local registry, but in this instance, include the `-v` option, which
    connects the directory you created in the preceding step to the container directory
    of `/var/lib/registry`. Also, use the `:rw` option to make sure you can both read
    and write to the directory:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行本地注册表，但在这种情况下，包括`-v`选项，将你在前一步创建的目录连接到`/var/lib/registry`容器目录。还要使用`:rw`选项确保你可以读写该目录：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, push the image to your newly mounted registry as you normally would:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，像往常一样将镜像推送到新挂载的注册表中：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: To verify that the images are now being stored in your newly mounted directory,
    list the files in the `registry/docker/registry/v2/repositories/` directory.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证镜像现在是否存储在你新挂载的目录中，列出`registry/docker/registry/v2/repositories/`目录中的文件。
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see the new images you have just pushed in the previous step:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到你刚刚在上一步推送的新镜像：
- en: '[PRE27]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This activity has allowed us to start working with some more advanced Docker
    options. Don't worry, there will be further chapters dedicated to helping you
    understand volume mounts and storage when running your containers.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动让我们开始使用一些更高级的Docker选项。别担心，将会有更多章节专门帮助你理解在运行容器时的卷挂载和存储。
- en: 4\. Multi-Stage Dockerfiles
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 多阶段Docker文件
- en: 'Activity 4.01: Deploying a Golang HTTP Server with a Multi-Stage Docker Build'
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动4.01：使用多阶段Docker构建部署Golang HTTP服务器
- en: '**Solution**:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Create a new directory named `activity-04-01` for this activity:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个活动创建一个名为`activity-04-01`的新目录：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Navigate to the newly created `activity-04-01` directory:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到新创建的`activity-04-01`目录：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Within the `activity-04-01` directory, create a file named `main.go`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity-04-01`目录中，创建一个名为`main.go`的文件：
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, open the `main.go` file using your favorite text editor:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用你喜欢的文本编辑器打开`main.go`文件：
- en: '[PRE31]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following content to the `main.go` file, and then save and exit this
    file:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`main.go`文件中，然后保存并退出该文件：
- en: '[PRE32]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Within the `activity-04-01` directory, create a file named `Dockerfile`. This
    file will be the multi-stage `Dockerfile`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity-04-01`目录中，创建一个名为`Dockerfile`的文件。这个文件将是多阶段`Dockerfile`：
- en: '[PRE33]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, open the `Dockerfile` using your favorite text editor:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用你喜欢的文本编辑器打开`Dockerfile`：
- en: '[PRE34]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following content to the `Dockerfile` and save the file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`Dockerfile`并保存文件：
- en: '[PRE35]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This `Dockerfile` has two stages, named `builder` and `runtime`. The builder
    stage uses the Golang Docker image as the parent and is responsible for creating
    the executable from the Golang source file. The runtime stage uses the `alpine`
    Docker image as the parent image and executes the executable file copied from
    the `builder` stage.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Dockerfile`有两个阶段，名为`builder`和`runtime`。构建阶段使用Golang Docker镜像作为父镜像，负责从Golang源文件创建可执行文件。运行时阶段使用`alpine`
    Docker镜像作为父镜像，并执行从`builder`阶段复制的可执行文件。
- en: 'Now, build the Docker image with the `docker build` command:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`docker build`命令构建Docker镜像：
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should get the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到以下输出：
- en: '![Figure 4.14: Building the Docker image'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.14：构建Docker镜像'
- en: '](image/B15021_04_14.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_04_14.jpg)'
- en: 'Figure 4.14: Building the Docker image'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14：构建Docker镜像
- en: 'Use the `docker image` ls command to list all the Docker images available on
    your computer. Verify the size of the image:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker image` ls命令列出计算机上所有可用的Docker镜像。验证镜像的大小：
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The command will return the list of all available Docker images:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将返回所有可用的Docker镜像列表：
- en: '![Figure 4.15: Listing all Docker images'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.15：列出所有Docker镜像'
- en: '](image/B15021_04_15.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_04_15.jpg)'
- en: 'Figure 4.15: Listing all Docker images'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15：列出所有Docker镜像
- en: In the preceding output, you can see that the size of the optimized Docker image
    named `activity-04-01` is 13.1 MB, while the parent image used at the builder
    stage (the Golang image) was 370 MB in size.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，您可以看到名为`activity-04-01`的优化Docker镜像的大小为13.1 MB，而在构建阶段使用的父镜像（Golang镜像）的大小为370
    MB。
- en: 'Execute the `docker container run` command to start a new container from the
    Docker image that you built in the previous step:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`docker container run`命令，从您在上一步中构建的Docker镜像启动一个新的容器：
- en: '[PRE38]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should get an output similar to the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到类似以下的输出：
- en: '[PRE39]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'View the application at the following URL in your favorite web browser:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的网络浏览器中查看以下URL的应用程序：
- en: '[PRE40]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following image shows the home page when we navigate to the URL `http://127.0.0.1:8080/`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导航到URL `http://127.0.0.1:8080/`时，以下图片显示了主页：
- en: '![Figure 4.16: Golang application – Home Page'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.16：Golang应用程序-主页'
- en: '](image/B15021_04_16.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_04_16.jpg)'
- en: 'Figure 4.16: Golang application – Home Page'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16：Golang应用程序-主页
- en: 'Now, browse to the following URL on your favorite web browser:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您喜欢的网络浏览器中浏览以下URL：
- en: '[PRE41]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following image shows the contact page when we navigate to the URL `http://127.0.0.1:8080/contact`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导航到URL `http://127.0.0.1:8080/contact`时，以下图片显示了联系页面：
- en: '![Figure 4.17: Golang application – Contact Us page'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.17：Golang应用程序-联系我们页面'
- en: '](image/B15021_04_17.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_04_17.jpg)'
- en: 'Figure 4.17: Golang application – Contact Us page'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17：Golang应用程序-联系我们页面
- en: 'Now, enter the following URL in your favorite web browser:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您喜欢的网络浏览器中输入以下URL：
- en: '[PRE42]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following image shows the login page when we navigate to the URL `http://127.0.0.1:8080/login`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导航到URL `http://127.0.0.1:8080/login`时，以下图片显示了登录页面：
- en: '![Figure 4.18: Golang application – Login Page'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.18：Golang应用程序-登录页面'
- en: '](image/B15021_04_18.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_04_18.jpg)'
- en: 'Figure 4.18: Golang application – Login Page'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.18：Golang应用程序-登录页面
- en: In this activity, we learned how to deploy a Golang HTTP server that can return
    different responses based on the invoke URL. We used the multi-stage Docker builds
    in this activity to create a minimal-sized Docker image.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们学习了如何部署一个Golang HTTP服务器，它可以根据调用URL返回不同的响应。在这个活动中，我们使用了多阶段的Docker构建来创建一个最小尺寸的Docker镜像。
- en: 5\. Composing Environments with Docker Compose
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 使用Docker Compose组合环境
- en: 'Activity 5.01: Installing WordPress Using Docker Compose'
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动5.01：使用Docker Compose安装WordPress
- en: '**Solution**:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'It is possible to create a database and install WordPress with the following
    steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下步骤创建数据库并安装WordPress：
- en: 'Create the required directory and navigate into it using `cd` command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所需的目录并使用`cd`命令进入其中：
- en: '[PRE43]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a `docker-compose.yaml` file with the following content:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`docker-compose.yaml`的文件，内容如下：
- en: '[PRE44]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Start the application with the `docker-compose up --detach` command:![Figure
    5.22: Start of the application'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose up --detach`命令启动应用程序：![图5.22：应用程序的启动
- en: '](image/B15021_05_22.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_22.jpg)'
- en: 'Figure 5.22: Start of the application'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.22：应用程序的启动
- en: 'Check for the running containers with the `docker-compose ps` command. You
    should get the following output:![Figure 5.23: WordPress and database containers'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose ps`命令检查正在运行的容器。您应该会得到以下输出：![图5.23：WordPress和数据库容器
- en: '](image/B15021_05_23.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_23.jpg)'
- en: 'Figure 5.23: WordPress and database containers'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.23：WordPress和数据库容器
- en: 'Open `http://localhost:8080` in your browser to check the WordPress setup screen:![Figure
    5.24: WordPress setup screen'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:8080`以检查WordPress设置屏幕：![图5.24：WordPress设置屏幕
- en: '](image/B15021_05_24.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_24.jpg)'
- en: 'Figure 5.24: WordPress setup screen'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.24：WordPress设置屏幕
- en: In this activity, you have created a deployment for a real-life application
    using Docker Compose. The application consists of a database container and a WordPress
    container. Both container services are configured using environment variables,
    connected via Docker Compose networking and volumes.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您使用Docker Compose创建了一个真实应用程序的部署。该应用程序包括一个数据库容器和一个WordPress容器。这两个容器服务都使用环境变量进行配置，通过Docker
    Compose网络和卷进行连接。
- en: 'Activity 5.02: Installing the Panoramic Trekking App Using Docker Compose'
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动5.02：使用Docker Compose安装全景徒步应用程序
- en: '**Solution**:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'It is possible to create the database and Panoramic Trekking App with the following steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下步骤创建数据库和全景徒步应用程序：
- en: 'Create the required directory and change into it:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建所需的目录并切换到其中：
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a `docker-compose.yaml` file with the following content:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`docker-compose.yaml`的文件，内容如下：
- en: '[PRE46]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Start the application with the `docker-compose up --detach` command. You should
    get output similar to the following:![Figure 5.25: Start of the application'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose up --detach`命令启动应用程序。您应该会得到类似以下的输出：![图5.25：应用程序的启动
- en: '](image/B15021_05_25.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_25.jpg)'
- en: 'Figure 5.25: Start of the application'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.25：应用程序的启动
- en: Note
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also use `docker-compose up -d` command to start the application.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用`docker-compose up -d`命令来启动应用程序。
- en: Check for the running containers with the `docker-compose ps` command. You should
    get output similar to the following:![Figure 5.26 Application, database, and nginx
    containers
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-compose ps`命令检查正在运行的容器。您应该会得到类似以下的输出：![图5.26 应用程序、数据库和nginx容器
- en: '](image/B15021_05_26.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_26.jpg)'
- en: Figure 5.26 Application, database, and nginx containers
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.26 应用程序、数据库和nginx容器
- en: 'Open the administration section of the Panoramic Trekking App in the browser
    with the address of `http://0.0.0.0:8000/admin`:![Figure 5.27: Admin setup logon'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用地址`http://0.0.0.0:8000/admin`在浏览器中打开全景徒步应用程序的管理部分：![图5.27：管理员设置登录
- en: '](image/B15021_05_27.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_27.jpg)'
- en: 'Figure 5.27: Admin setup logon'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.27：管理员设置登录
- en: Note
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also run `firefox http://0.0.0.0:8000/admin` command to open the administration
    section of the Panoramic Trekking App.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以运行`firefox http://0.0.0.0:8000/admin`命令来打开全景徒步应用程序的管理部分。
- en: 'Log in with the username `admin` and password `changeme` and add new photos
    and countries. The following screen will appear:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户名`admin`和密码`changeme`登录，并添加新的照片和国家。将出现以下屏幕：
- en: '![Figure 5.28: Admin setup view'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.28：管理员设置视图'
- en: '](image/B15021_05_28.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_28.jpg)'
- en: 'Figure 5.28: Admin setup view'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.28：管理员设置视图
- en: 'Open the Panoramic Trekking App at the address `http://0.0.0.0:8000/photo_viewer`
    in the browser:![Figure 5.29: Application view'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开全景徒步应用程序，地址为`http://0.0.0.0:8000/photo_viewer`：![图5.29：应用程序视图
- en: '](image/B15021_05_29.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_05_29.jpg)'
- en: 'Figure 5.29: Application view'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.29：应用程序视图
- en: In this activity, you have created a three-tier application using Docker Compose,
    with tiers for a PostgreSQL database, a backend, and a proxy service. All services
    are configured and connected using Docker Compose with its networking and storage capabilities.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，您使用Docker Compose创建了一个三层应用程序，其中包括用于PostgreSQL数据库、后端和代理服务的层。所有服务都使用Docker
    Compose进行配置和连接，具有其网络和存储功能。
- en: 6\. Introduction to Docker Networking
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. Docker网络简介
- en: 'Activity 6.01: Leveraging Docker Network Drivers'
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动6.01：利用Docker网络驱动程序
- en: '**Solution**:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'The following is the most common way to complete this activity according to
    best practices:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是根据最佳实践完成此活动的最常见方法：
- en: 'Use the `docker network create` command to create a network for the NGINX web
    server. Call it `webservernet` and give it a subnet of `192.168.1.0/24` and a
    gateway of `192.168.1.1`:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker network create`命令为NGINX Web服务器创建一个网络。将其命名为`webservernet`，并为其分配子网`192.168.1.0/24`和网关`192.168.1.1`：
- en: '[PRE47]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This should create the `bridge` network, `webservernet`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该创建`bridge`网络`webservernet`。
- en: 'Use the `docker run` command to create an NGINX web server. Use the `-p` flag
    to forward port `8080` on the host to port `80` on the container instance:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker run`命令创建一个NGINX Web服务器。使用`-p`标志将主机上的端口`8080`转发到容器实例上的端口`80`：
- en: '[PRE48]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This will start the `webserver1` container in the `webservernet` network.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`webservernet`网络中启动`webserver1`容器。
- en: 'Use the `docker run` command to start an Alpine Linux container named `monitor`
    in `host` networking mode. This way, you will know that the container has access
    to the host ports of the main system as well as access to the `bridge` network
    IP address:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker run`命令以`host`网络模式启动名为`monitor`的Alpine Linux容器。这样，您将知道容器可以访问主系统的主机端口以及`bridge`网络的IP地址：
- en: '[PRE49]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This will start an Alpine Linux container instance in `host` networking mode.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`host`网络模式下启动一个Alpine Linux容器实例。
- en: 'Use `docker inspect` to find the IP address of the `webserver1` container:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker inspect`查找`webserver1`容器的IP地址：
- en: '[PRE50]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The verbose details of the container will be displayed in JSON format; get
    the IP address from the `IPAddress` parameter:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的详细信息将以JSON格式显示；从`IPAddress`参数中获取IP地址：
- en: '![Figure 6.27: Inspecting the webserver1 container instance'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.27：检查webserver1容器实例'
- en: '](image/B15021_06_27.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_06_27.jpg)'
- en: 'Figure 6.27: Inspecting the webserver1 container instance'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.27：检查webserver1容器实例
- en: 'Access an `sh` shell inside the monitoring container using the `docker exec` command:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker exec`命令在监控容器内部启动`sh` shell：
- en: '[PRE51]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This should drop you into a root shell.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该将您放入根shell。
- en: 'Use the `apk install` command to install the `curl` command inside this container:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`apk install`命令在此容器内安装`curl`命令：
- en: '[PRE52]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This should install the `curl` utility:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该安装`curl`实用程序：
- en: '[PRE53]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Use the `curl` command to validate connectivity works at the host level, by
    calling port `8080` on the host machine:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`命令验证主机级别的连接是否正常工作，调用主机机器上的端口`8080`：
- en: '[PRE54]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'You should receive a `200 OK` response from NGINX, indicating successful connectivity
    at the host level:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该收到来自NGINX的`200 OK`响应，表示在主机级别成功连接：
- en: '![Figure 6.28: Accessing the webserver1 container from the exposed ports on
    the host'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.28：从主机上的暴露端口访问webserver1容器'
- en: '](image/B15021_06_28.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_06_28.jpg)'
- en: 'Figure 6.28: Accessing the webserver1 container from the exposed ports on the
    host'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.28：从主机上的暴露端口访问webserver1容器
- en: 'Likewise, use the `curl` command to access the IP address of the container
    in the Docker `bridge` network directly over port `80`:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，使用`curl`命令直接通过端口`80`访问Docker`bridge`网络中容器的IP地址：
- en: '[PRE55]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You should similarly receive another `200 OK` response, indicating a successful connection:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该同样收到另一个`200 OK`响应，表明连接成功：
- en: '![Figure 6.29: Accessing the NGINX web server from the IP'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.29：从IP访问NGINX Web服务器'
- en: address of the container instance
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 容器实例的地址
- en: '](image/B15021_06_29.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_06_29.jpg)'
- en: 'Figure 6.29: Accessing the NGINX web server from the IP address of the container
    instance'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.29：从容器实例的IP地址访问NGINX Web服务器
- en: In this activity, we were able to illustrate the connectivity between containers
    using different Docker networking drivers. This scenario applies to real-world
    production infrastructure because, when deploying a containerized solution, engineers
    will strive to deploy an infrastructure that is as immutable as possible. With
    the ability to deploy containers in Docker that exactly mimic the networking at
    the host level, infrastructure can be designed that requires very minimal configuration
    on the host OS. This makes it very easy to deploy and scale the host that Docker
    is deployed on. Packages such as `curl` and other monitoring tools can be deployed
    into containers that run on the Docker hosts instead of being installed on the
    hosts themselves. This guarantees ease of deployment and maintenance, as well
    as increasing the speed at which additional hosts can be deployed to meet increasing
    demand.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们能够说明使用不同的Docker网络驱动程序在容器之间建立连接。这种情况适用于真实的生产基础设施，因为在部署容器化解决方案时，工程师们将努力部署尽可能不可变的基础设施。通过在Docker中部署容器，确切地模拟主机级别的网络，可以设计出需要在主机操作系统上进行非常少量配置的基础设施。这使得在部署和扩展Docker部署的主机时非常容易。诸如`curl`和其他监控工具的软件包可以部署到在Docker主机上运行的容器中，而不是安装在主机上。这保证了部署和维护的便利性，同时提高了满足不断增长的需求所需的主机部署速度。
- en: 'Activity 6.02: Overlay Networking in Action'
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动6.02：叠加网络实践
- en: '**Solution**:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Create a Docker `overlay` network called `panoramic-net` on `Machine1` in the
    Docker swarm cluster, using the `docker network create` command, by passing the
    custom `subnet`, `gateway`, and `overlay` network driver:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker swarm集群中的`Machine1`上使用`docker network create`命令创建一个名为`panoramic-net`的Docker`overlay`网络，通过传递自定义的`subnet`、`gateway`和`overlay`网络驱动程序：
- en: '[PRE56]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Use the `docker service create` command on `Machine1` to create a service named
    `trekking-app` in the `panoramic-net` network:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Machine1`上使用`docker service create`命令创建一个名为`trekking-app`的服务，加入`panoramic-net`网络：
- en: '[PRE57]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This will start a service called `trekking-app` in the `panoramic-net` `overlay`
    network.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`panoramic-net` `overlay`网络中启动一个名为`trekking-app`的服务。
- en: 'Use the `docker service create` command on `Machine1` to create a service named
    `database-app` in the `panoramic-net` network. Set default credentials and specify
    the `postgres:12` version of the Docker image:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Machine1`上使用`docker service create`命令创建一个名为`database-app`的服务，加入`panoramic-net`网络。设置默认凭据并指定`postgres:12`版本的Docker镜像：
- en: '[PRE58]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Use `docker exec` to access an `sh` shell inside the `trekking-app` service container:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker exec`访问`trekking-app`服务容器内的`sh` shell：
- en: '[PRE59]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This should drop you into a root shell inside the `trekking-app` container instance.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该将您放入`trekking-app`容器实例内的根shell中。
- en: 'Use the `ping` command to validate network connectivity to the `database-app` service:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ping`命令验证对`database-app`服务的网络连接：
- en: '[PRE60]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The ICMP replies should indicate the connectivity is successful:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: ICMP回复应指示连接成功：
- en: '[PRE61]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In this activity, we leveraged a custom Docker `overlay` network across a Docker
    swarm cluster to illustrate connectivity between two Docker swarm services using
    Docker DNS. In a real-world multi-tier application, many microservices can be
    deployed in large Docker swarm clusters that use an `overlay` network mesh to
    directly talk to each other. Understanding how `overlay` networking works in tandem
    with Docker DNS is vital to achieving efficient scalability as your containerized
    infrastructure continues to grow.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们利用了Docker集群中的自定义Docker`overlay`网络，以说明两个Docker集群服务之间的连接性，使用Docker DNS。在真实的多层应用程序中，许多微服务可以部署在使用`overlay`网络网格直接相互通信的大型Docker集群中。了解`overlay`网络如何与Docker
    DNS协同工作对于实现容器化基础设施的高效可扩展性至关重要。
- en: 7\. Docker Storage
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. Docker存储
- en: 'Activity 7.01: Storing Container Event (State) Data on a PostgreSQL Database'
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动7.01：将容器事件（状态）数据存储在PostgreSQL数据库中
- en: '**Solution**:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Run the following commands to remove all the objects in your host:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以删除主机中的所有对象：
- en: '[PRE62]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Get the volume names, and then remove all the volumes using the following commands:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取卷名称，然后使用以下命令删除所有卷：
- en: '[PRE63]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Get the network names and then remove all the networks using the following commands:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取网络名称，然后使用以下命令删除所有网络：
- en: '[PRE64]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Open two terminals, one dedicated to seeing `docker events --format '{{json
    .}}'` in effect. The other one should be opened to execute the previously mentioned
    high-level steps.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开两个终端，一个专门用于查看`docker events --format '{{json .}}'`的效果。另一个应该打开以执行先前提到的高级步骤。
- en: 'In the first terminal, run the following command:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个终端中，运行以下命令：
- en: '[PRE65]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You should get an output like the following:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![Figure 7.11: Output of the docker events command'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.11：docker events命令的输出'
- en: '](image/B15021_07_11.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_11.jpg)'
- en: 'Figure 7.11: Output of the docker events command'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11：docker events命令的输出
- en: 'Run the following command to start the `ubuntu` container in the second terminal:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令在第二个终端中启动`ubuntu`容器：
- en: '[PRE66]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'You should get an output like the following:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![Figure 7.12: Output of the docker run command'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.12：docker run命令的输出'
- en: '](image/B15021_07_12.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_12.jpg)'
- en: 'Figure 7.12: Output of the docker run command'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：docker run命令的输出
- en: 'Create a volume named `vol1` using the following command in the second terminal:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用第二个终端中的以下命令创建名为`vol1`的卷：
- en: '[PRE67]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create a network named `net1` using the following command in the second terminal:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用第二个终端中的以下命令创建名为`net1`的网络：
- en: '[PRE68]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Remove the container using the following command:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令删除容器：
- en: '[PRE69]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Remove the volume and the network using the following commands:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令删除卷和网络：
- en: '[PRE70]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Click *Ctrl* + *C* in the `docker events` terminal to terminate it.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`docker events`终端中单击*Ctrl* + *C*以终止它。
- en: 'Check the following two examples to understand the JSON output:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查以下两个示例以了解JSON输出：
- en: '**Example 1**:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例1**：'
- en: '[PRE71]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '**Example 2**:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例2**：'
- en: '[PRE72]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: You will find that there are different attributes and structures depending on
    the object.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现根据对象的不同属性和结构而有所不同。
- en: 'Run a PostgreSQL container with a volume. Name the container `db1`:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行带有卷的PostgreSQL容器。将容器命名为`db1`：
- en: '[PRE73]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Run the `exec` command so that bash is replaced with the command to be executed.
    The shell will change to `posgres=#` to indicate that you are inside the container:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`exec`命令，以便bash被要执行的命令替换。shell将更改为`posgres=#`，表示您在容器内部：
- en: '[PRE74]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create a table with two columns: `ID` of the `serial` type and `info` of the
    `json` type:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有两列的表：`ID`为`serial`类型，`info`为`json`类型：
- en: '[PRE75]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Insert the first row of the `JSON` output from the first example into the table:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个示例的`JSON`输出的第一行插入表中：
- en: '[PRE76]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Verify that the row is saved in the database by typing the following SQL statement:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下SQL语句验证数据库中是否保存了行：
- en: '[PRE77]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'You should get an output like the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![Figure 7.13: Verifying that the row is saved in the database'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.13：验证数据库中是否保存了行'
- en: '](image/B15021_07_13.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_13.jpg)'
- en: 'Figure 7.13: Verifying that the row is saved in the database'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13：验证数据库中是否保存了行
- en: Insert Docker events into the `events` table using the SQL `insert` command.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SQL的`insert`命令将Docker事件插入`events`表中。
- en: Note
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to the `events.txt` file at [https://packt.live/2ZKfGgB](https://packt.live/2ZKfGgB)
    to insert Docker events using the `insert` command.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[https://packt.live/2ZKfGgB](https://packt.live/2ZKfGgB)上的`events.txt`文件，使用`insert`命令插入Docker事件。
- en: 'You should get an output like the following:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![Figure 7.14: Inserting multiple rows in the database'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.14：在数据库中插入多行'
- en: '](image/B15021_07_14.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_14.jpg)'
- en: 'Figure 7.14: Inserting multiple rows in the database'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14：在数据库中插入多行
- en: From this output, it is clear that 11 events have been inserted successfully
    into the PostgreSQL database.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个输出中，可以清楚地看到已成功将11个事件插入到PostgreSQL数据库中。
- en: Run the following three queries one by one.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依次运行以下三个查询。
- en: '**Query 1**:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**查询1**：'
- en: '[PRE78]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The output will be as in the following:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.15: Output of Query 1'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.15：查询1的输出'
- en: '](image/B15021_07_08.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_08.jpg)'
- en: 'Figure 7.15: Output of Query 1'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15：查询1的输出
- en: '**Query 2**:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**查询2**：'
- en: '[PRE79]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The output will be as in the following:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.16: Output of Query 2'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.16：查询2的输出'
- en: '](image/B15021_07_16.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_16.jpg)'
- en: 'Figure 7.16: Output of Query 2'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16：查询2的输出
- en: '**Query 3**:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**查询3**：'
- en: '[PRE80]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output will be as in the following:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.17: Output of Query 3'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.17：查询3的输出'
- en: '](image/B15021_07_17.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_17.jpg)'
- en: 'Figure 7.17: Output of Query 3'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17：查询3的输出
- en: In this activity, you learned how to log and monitor a container and query the
    container's events using SQL statements, as well as how to get a JSON output of
    the events and save in a PostgreSQL database. You also studied the JSON output
    structure and learned how to query it.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您学习了如何记录和监视容器，并使用SQL语句查询容器的事件，以及如何获得事件的JSON输出并保存在PostgreSQL数据库中。您还学习了JSON输出结构以及如何查询它。
- en: 'Activity 7.02: Sharing NGINX Log Files with the Host'
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动7.02：与主机共享NGINX日志文件
- en: '**Solution**:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Verify that you do not have the `/var/mylogs` folder on your host by running
    the following command:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令验证您的主机上是否没有`/var/mylogs`文件夹：
- en: '[PRE81]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'You should get an output like the following:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE82]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Run a container based on the NGINX image. Specify the path of the shared volumes
    on the host and inside the container in the `run` command. Inside the container,
    NGINX uses the `/var/log/nginx` path for the log files. Specify the path on the
    host as `/var/mylogs`:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于NGINX镜像运行一个容器。在`run`命令中指定主机和容器内共享卷的路径。在容器内，NGINX使用`/var/log/nginx`路径存储日志文件。在主机上指定路径为`/var/mylogs`：
- en: '[PRE83]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The Docker Engine will pull the image automatically if you do not have it locally:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您本地没有该镜像，Docker引擎将自动拉取该镜像：
- en: '![Figure 7.18: Output of the docker run command'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.18：运行docker run命令的输出'
- en: '](image/B15021_07_18.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_07_18.jpg)'
- en: 'Figure 7.18: Output of the docker run command'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18：运行docker run命令的输出
- en: 'Go to the path of `/var/mylogs`. List all the files in that directory:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`/var/mylogs`路径。列出该目录中的所有文件：
- en: '[PRE84]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'You should find two files there:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在那里找到两个文件：
- en: '[PRE85]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '(Optional) If no errors were generated, the two files will be empty. You check
    the contents by using the `cat` Linux command or by using the `tail` Linux command.
    As we used the `cat` command before, let''s use the `tail` command for this example:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）如果没有生成错误，这两个文件将是空的。你可以使用`cat` Linux命令或者使用`tail` Linux命令来检查内容。因为我们之前使用了`cat`命令，所以让我们在这个例子中使用`tail`命令：
- en: '[PRE86]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'You should get an output like the following:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下的输出：
- en: '[PRE87]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: As this NGINX server did not generate any errors or was not accessed, the files
    are currently empty. However, if NGINX crashes at any instant, the errors generated
    will be saved in `error.log`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个NGINX服务器没有生成任何错误或者没有被访问，这些文件目前是空的。然而，如果NGINX在任何时刻崩溃，生成的错误将会保存在`error.log`中。
- en: In this activity, you learned how to share the log files of a container to the
    host. You used the NGINX server, so if it crashes, you can trackback what happened
    from its log files.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，你学会了如何将容器的日志文件共享到主机上。你使用了NGINX服务器，所以如果它崩溃了，你可以从它的日志文件中追溯发生了什么。
- en: 8\. Service Discovery
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 服务发现
- en: 'Activity 8.01: Utilizing Jenkins and SonarQube'
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动8.01：利用Jenkins和SonarQube
- en: '**Solution**:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'Install SonarQube and run it as a container using the following command:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装SonarQube并使用以下命令作为容器运行：
- en: '[PRE88]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'You should get the container ID as the output:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到容器ID作为输出：
- en: '[PRE89]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Log in to SonarQube by using `admin/admin` credentials:![Figure 8.38: Log in
    to SonarQube'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`admin/admin`凭据登录到SonarQube：![图8.38：登录到SonarQube
- en: '](image/B15021_08_38.jpg)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_38.jpg)'
- en: 'Figure 8.38: Log in to SonarQube'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.38：登录到SonarQube
- en: 'After the successful login, a screen similar to the following should appear:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，应该出现类似以下的屏幕：
- en: '![Figure 8.39: The SonarQube dashboard'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.39：SonarQube仪表板'
- en: '](image/B15021_08_39.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_39.jpg)'
- en: 'Figure 8.39: The SonarQube dashboard'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.39：SonarQube仪表板
- en: 'At the top right, click on the user. A drop-down menu will appear. Click on
    `My Account`:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，点击用户。会出现一个下拉菜单。点击`我的账户`：
- en: 'Scroll down and click on `Generate` under `Security` to generate a token. You
    must copy it now because you will not be able to access it later:![Figure 8.40:
    Generating the token'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并点击`安全`下的`生成`来生成一个令牌。你现在必须复制它，因为以后将无法访问它：![图8.40：生成令牌
- en: '](image/B15021_08_40.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_40.jpg)'
- en: 'Figure 8.40: Generating the token'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.40：生成令牌
- en: 'In Jenkins, click on `Manage Jenkins` > `Plugin Manager`. Search for `Sonar`
    in the `Available` list. Install the `SonarQube Scanner` plugin.![Figure 8.41:
    Installing the SonarQube Scanner plugin'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中，点击`管理Jenkins` > `插件管理器`。在`可用`列表中搜索`Sonar`。安装`SonarQube Scanner`插件。![图8.41：安装SonarQube
    Scanner插件
- en: '](image/B15021_08_41.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_41.jpg)'
- en: 'Figure 8.41: Installing the SonarQube Scanner plugin'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.41：安装SonarQube Scanner插件
- en: 'Verify that the installation is correct by clicking on the `hit_count` project
    and then clicking the `Configure` option. Click on `Add build step` and then `Execute
    SonarQube Scanner` on the `Build` tab, as in *Figure 8.43*:![Figure 8.42: Selecting
    Execute SonarQube Scanner'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击`hit_count`项目，然后点击`配置`选项来验证安装是否正确。在`构建`选项卡上点击`添加构建步骤`，然后点击`执行SonarQube Scanner`，就像*图8.43*中那样：![图8.42：选择执行SonarQube
    Scanner
- en: '](image/B15021_08_42.jpg)'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_42.jpg)'
- en: 'Figure 8.42: Selecting Execute SonarQube Scanner'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.42：选择执行SonarQube Scanner
- en: 'However, the new box will generate errors, like the one shown in the following
    screenshot. To rectify that, integrate SonarQube and Jenkins through the `system
    configuration` and `global tool configuration` options:![Figure 8.43: Errors generated
    since SonarQube is not configured yet'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，新的框将会生成错误，就像下面截图中显示的那样。为了纠正这个问题，通过`系统配置`和`全局工具配置`选项将SonarQube和Jenkins集成起来：![图8.43：由于SonarQube尚未配置而生成的错误
- en: '](image/B15021_08_43.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_43.jpg)'
- en: 'Figure 8.43: Errors generated since SonarQube is not configured yet'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.43：由于SonarQube尚未配置而生成的错误
- en: 'In Jenkins, click on `Manage Jenkins`. Click the `Global Tool Configuration`
    option and then click `Add SonarQube Scanner`:![Figure 8.44: Adding SonarQube
    Scanner on the Global Tool Configuration page'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中，点击“管理Jenkins”。点击“全局工具配置”选项，然后点击“添加SonarQube扫描仪”：![图8.44：在全局工具配置页面上添加SonarQube扫描仪
- en: '](image/B15021_08_44.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_44.jpg)'
- en: 'Figure 8.44: Adding SonarQube Scanner on the Global Tool Configuration page'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.44：在全局工具配置页面上添加SonarQube扫描仪
- en: Enter the name `SonarQube Scanner`. Check `Install automatically`. Under `Install
    from Maven Central`, in `Version`, select `SonarQube Scanner 3.2.0.1227`. Click
    on `Add Installer`. In the `Label` field, enter `SonarQube`. In the `Download
    URL for binary archive` field, enter the link `https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip`.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称“SonarQube扫描仪”。勾选“自动安装”。在“从Maven中央安装”下，在“版本”中选择“SonarQube Scanner 3.2.0.1227”。点击“添加安装程序”。在“标签”字段中，输入“SonarQube”。在“二进制存档的下载URL”字段中，输入链接“https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip”。
- en: Click on `Save`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”。
- en: '![Figure 8.45: Adding details for SonarQube Scanner](image/B15021_08_45.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![图8.45：为SonarQube扫描仪添加详细信息](image/B15021_08_45.jpg)'
- en: 'Figure 8.45: Adding details for SonarQube Scanner'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.45：为SonarQube扫描仪添加详细信息
- en: You are now done with the `Global Tool Configuration` option, so it is time
    to go to the `Configure System` option.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已完成“全局工具配置”选项，现在是时候转到“配置系统”选项了。
- en: 'In `Manage Jenkins`, click `Configure System`:![Figure 8.46: Click on Configure
    System on the Manage Jenkins page'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“管理Jenkins”中，点击“配置系统”：![图8.46：在管理Jenkins页面上点击配置系统
- en: '](image/B15021_08_46.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_46.jpg)'
- en: 'Figure 8.46: Click on Configure System on the Manage Jenkins page'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.46：在管理Jenkins页面上点击配置系统
- en: 'You cannot enter the system configuration right now as it asks for `Server
    Authentication Token`. When you click the `Add` button, it will do nothing. Enter
    the token as secret text in the following steps, and then return to `Manage Jenkins`:![Figure
    8.47: Inserting the SonarQube token in Jenkins configuration'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在无法进入系统配置，因为它要求“服务器身份验证令牌”。当您点击“添加”按钮时，它将不起作用。在以下步骤中将令牌输入为秘密文本，然后返回到“管理Jenkins”：![图8.47：在Jenkins配置中插入SonarQube令牌
- en: '](image/B15021_08_47.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_47.jpg)'
- en: 'Figure 8.47: Inserting the SonarQube token in Jenkins configuration'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.47：在Jenkins配置中插入SonarQube令牌
- en: 'Click on `Manage Credentials`:![Figure 8.48: The Manage Jenkins page'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“管理凭据”：![图8.48：管理Jenkins页面
- en: '](image/B15021_08_48.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_48.jpg)'
- en: 'Figure 8.48: The Manage Jenkins page'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.48：管理Jenkins页面
- en: 'Click on `Jenkins`:![Figure 8.49: The Jenkins Credentials page'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Jenkins”：![图8.49：Jenkins凭据页面
- en: '](image/B15021_08_49.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_49.jpg)'
- en: 'Figure 8.49: The Jenkins Credentials page'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.49：Jenkins凭据页面
- en: 'Click on `Global credentials (unrestricted)`:![Figure 8.50: The Global credentials
    (unrestricted) domain'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“全局凭据（不受限制）”：![图8.50：全局凭据（不受限制）域
- en: '](image/B15021_08_50.jpg)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_50.jpg)'
- en: 'Figure 8.50: The Global credentials (unrestricted) domain'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.50：全局凭据（不受限制）域
- en: 'Click on `adding some credentials`:![Figure 8.51: Adding some credentials'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加一些凭据”：![图8.51：添加一些凭据
- en: '](image/B15021_08_51.jpg)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_51.jpg)'
- en: 'Figure 8.51: Adding some credentials'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.51：添加一些凭据
- en: 'In the `Kind` drop-down menu, click on `Secret text`:![Figure 8.52: Selecting
    Secret text for Kind'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“类型”下拉菜单中，点击“秘密文本”：![图8.52：选择类型为秘密文本
- en: '](image/B15021_08_52.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_52.jpg)'
- en: 'Figure 8.52: Selecting Secret text for Kind'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.52：选择类型为秘密文本
- en: 'In the `Secret` textbox, paste the token that you copied in *Step 5* in this
    activity. In the `ID` field, enter `SonarQubeToken`. Click `OK`:![Figure 8.53:
    Adding the token to the Secret textbox'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“秘密”文本框中，粘贴您在本活动的*步骤5*中复制的令牌。在“ID”字段中，输入“SonarQubeToken”。点击“确定”：![图8.53：将令牌添加到秘密文本框
- en: '](image/B15021_08_53.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_53.jpg)'
- en: 'Figure 8.53: Adding the token to the Secret textbox'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.53：将令牌添加到秘密文本框
- en: '`SonarQubeToken` will be saved in the `Global credentials` option. You will
    see a screen similar to the following:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`SonarQubeToken`将保存在“全局凭据”选项中。您将看到类似以下内容的屏幕：'
- en: '![Figure 8.54: SonarQubeToken saved in the Global credentials'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.54：SonarQubeToken保存在全局凭据中'
- en: '](image/B15021_08_54.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_54.jpg)'
- en: 'Figure 8.54: SonarQubeToken saved in the Global credentials'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.54：SonarQubeToken保存在全局凭据中
- en: 'Return to `Manage Jenkins`. Click `Configuration System` and then `Refresh`.
    Now, in the `Server Authentication Token` drop-down menu, you will find `SonarQubeToken`.
    Check `Enable injection of SonarQube server configuration as build environment
    variables`. Enter `SonarQube` in the `Name` field. Enter `http://<your IP>:9000`
    in the `Server URL` field. Then click `Save`:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到“管理Jenkins”。点击“配置系统”，然后点击“刷新”。现在，在“服务器身份验证令牌”下拉菜单中，您将找到“SonarQubeToken”。勾选“启用将SonarQube服务器配置注入构建环境变量”。在“名称”字段中输入“SonarQube”。在“服务器URL”字段中输入“http://<您的IP>:9000”。然后点击“保存”：
- en: 'You can run the `ifconfig` command to fetch your IP. You will find the IP in
    the `en0` section of the output:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以运行`ifconfig`命令来获取您的IP。您将在输出的`en0`部分找到IP：
- en: '[PRE90]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: This is the last step in integrating Jenkins with SonarQube. Let's return to
    the project.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将Jenkins与SonarQube集成的最后一步。让我们返回到项目中。
- en: 'In `Build Environment`, check `Prepare SonarQube Scanner environment`. Set
    `Server authentication token` to `SonarQubeToken`:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建环境”中，勾选“准备SonarQube扫描器环境”。将“服务器身份验证令牌”设置为“SonarQubeToken”：
- en: 'Now, click on the project name and then `Configure`. In the `Build` step, enter
    the following code in the `Analysis Properties` field:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击项目名称，然后点击“配置”。在“构建”步骤中，在“分析属性”字段中输入以下代码：
- en: '[PRE91]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Click `Save`.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”。
- en: 'After saving, you will find the SonarQube logo showing on the project page,
    as in *Figure 8.55*. Click on `Build Now`:![Figure 8.55: The SonarQube option
    showing on our project''s dashboard'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存后，您将在项目页面上看到SonarQube标志，如*图8.55*所示。点击“立即构建”：![图8.55：我们项目仪表板上显示SonarQube选项
- en: '](image/B15021_08_55.jpg)'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_55.jpg)'
- en: 'Figure 8.55: The SonarQube option showing on our project''s dashboard'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.55：我们项目仪表板上显示SonarQube选项
- en: 'In `Build History`, click on `Console Output`. You should get the screen similar
    to the following:![Figure 8.56: Console Output'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建历史”中，点击“控制台输出”。您应该会看到类似以下内容的屏幕：![图8.56：控制台输出
- en: '](image/B15021_08_56.jpg)'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_56.jpg)'
- en: 'Figure 8.56: Console Output'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.56：控制台输出
- en: 'Check the report on `SonarQube`. In the browser, type `http://<ip>:9000` or
    `http://localhost:9000`. You will find that Jenkins added your `hit_count` project
    automatically to SonarQube:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中检查“SonarQube”的报告。输入“http://<ip>:9000”或“http://localhost:9000”。您将发现Jenkins自动将您的“hit_count”项目添加到SonarQube中：
- en: Click `hit_count`. You will find a detailed report. Whenever Jenkins builds
    the project, SonarQube will analyze the code automatically
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“hit_count”。您将找到一个详细的报告。每当Jenkins构建项目时，SonarQube将自动分析代码。
- en: In this activity, you learned how to integrate Jenkins with SonarQube and install
    the required plugins, which you verified by checking SonarQube in the browser.
    You also applied SonarQube to your simple web application, `hit_counter`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在本活动中，您学习了如何将Jenkins与SonarQube集成并安装所需的插件，通过在浏览器中检查SonarQube进行验证。您还将SonarQube应用于您的简单Web应用程序“hit_counter”。
- en: 'Activity 8.02: Utilizing Jenkins and SonarQube in the Panoramic Trekking Application'
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动8.02：在全景徒步应用程序中利用Jenkins和SonarQube
- en: '**Solution**:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: Create a new item named `trekking` in Jenkins. Select it as a `FREESTYLE` project.
    Click `OK`.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins中创建一个名为“trekking”的新项目。将其选择为“FREESTYLE”项目。点击“确定”。
- en: In the `General` tab, select `Discard old builds`.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“常规”选项卡中，选择“丢弃旧构建”。
- en: 'In the `Source Code Management` tab, select `GIT`. Then enter the URL `http://github.com/efoda/trekking_app`:![Figure
    8.57: Inserting the GitHub URL'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“源代码管理”选项卡中，选择“GIT”。然后输入URL“http://github.com/efoda/trekking_app”：![图8.57：插入GitHub
    URL
- en: '](image/B15021_08_57.jpg)'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_57.jpg)'
- en: 'Figure 8.57: Inserting the GitHub URL'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.57：插入GitHub URL
- en: 'In `Build Triggers`, select `Poll SCM` and enter `H/15 * * * *`:![Figure 8.58:
    Inserting the scheduling code'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建触发器”中，选择“轮询SCM”，并输入“H/15 * * * *”：![图8.58：插入调度代码
- en: '](image/B15021_08_58.jpg)'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_58.jpg)'
- en: 'Figure 8.58: Inserting the scheduling code'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.58：插入调度代码
- en: 'In the `Build Environment` tab, select `Prepare SonarQube Scanner environment`.
    Select the `Server authentication token` from the drop-down menu:![Figure 8.59:
    Selecting SonarQubeToken as the Server authentication token'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建环境”选项卡中，选择“准备SonarQube扫描器环境”。从下拉菜单中选择“服务器身份验证令牌”：![图8.59：选择SonarQubeToken作为服务器身份验证令牌
- en: '](image/B15021_08_59.jpg)'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_59.jpg)'
- en: 'Figure 8.59: Selecting SonarQubeToken as the Server authentication token'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.59：选择SonarQubeToken作为服务器身份验证令牌
- en: 'In the `Build` tab, enter the following code in `Analysis properties`:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“构建”选项卡中，在“分析属性”中输入以下代码：
- en: '[PRE92]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Click `Save`.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“保存”。
- en: 'Select `Build Now`. When the build is done successfully, select `Console Output`.
    The following output will indicate that it finished successfully:![Figure 8.60:
    Verifying Jenkins has built the image successfully'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“立即构建”。当构建成功完成时，选择“控制台输出”。以下输出将指示它已成功完成：![图8.60：验证Jenkins已成功构建镜像
- en: '](image/B15021_08_60.jpg)'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_60.jpg)'
- en: 'Figure 8.60: Verifying Jenkins has built the image successfully'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.60：验证Jenkins已成功构建镜像
- en: 'Switch to the `SonarQube` tab in the browser and check the output. The following
    report indicates that the trekking app has two bugs and zero security vulnerabilities:![Figure
    8.61: Report shown in the SonarQube browser tab'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到浏览器中的“SonarQube”选项卡，并检查输出。以下报告表明徒步应用程序有两个错误和零个安全漏洞：![图8.61：在SonarQube浏览器选项卡中显示的报告
- en: '](image/B15021_08_61.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_08_61.jpg)'
- en: 'Figure 8.61: Report shown in the SonarQube browser tab'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.61：在SonarQube浏览器选项卡中显示的报告
- en: If you click on `New Code`, it will be blank as you built the project only once.
    When Jenkins builds it another time, you will find a comparison between the two builds.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击“新代码”，它将为空，因为您只构建了项目一次。当Jenkins再次构建它时，您将找到两次构建之间的比较。
- en: If you want to edit the project's code, fork the GitHub code to your account
    and edit the code to fix the bugs and the vulnerabilities. Edit the project's
    configuration to have your GitHub code instead of the code provided in the `Source
    Code` tab.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想编辑项目的代码，请将GitHub代码fork到您的帐户，并编辑代码以修复错误和漏洞。编辑项目的配置，使其使用您的GitHub代码，而不是“源代码”选项卡中提供的代码。
- en: In this activity, you integrated Jenkins with SonarQube and applied it to the
    Panoramic Trekking application. At the end of the activity, you inspected the
    reports that SonarQube generated showing the bugs and the vulnerabilities in the
    code.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您将Jenkins与SonarQube集成，并将其应用于全景徒步应用程序。在活动结束时，您将检查SonarQube生成的报告，显示代码中的错误和漏洞。
- en: 9\. Docker Swarm
  id: totrans-460
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9. Docker Swarm
- en: 'Activity 9.01: Deploying the Panoramic Trekking App to a Single-Node Docker
    Swarm'
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动9.01：将全景徒步应用部署到单节点Docker Swarm
- en: '**Solution**:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'There are a number of ways in which you can perform this activity. These steps
    are one way to do it:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以执行此活动。以下步骤是其中一种方法：
- en: 'Create a directory for the application. In this instance, you will create a
    directory called `Activity1` and move into the new directory using the `cd` command:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为应用程序创建一个目录。在这种情况下，您将创建一个名为`Activity1`的目录，并使用`cd`命令进入新目录：
- en: '[PRE93]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Clone the application from its GitHub repository to ensure that you will have
    all the relevant information and applications needed for the Panoramic Trekking
    App services you want to deploy to your swarm:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从其GitHub存储库克隆应用程序，以确保您拥有部署到Swarm的Panoramic Trekking App服务所需的所有相关信息和应用程序：
- en: '[PRE94]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'You won''t need any of the supporting directories for NGINX, but ensure that
    your web service and database running are listed here, including the `panoramic_trekking_app`
    and `photo_viewer` directories and the `Dockerfile`, `entrypoint.sh`, `manage.py`,
    and `requirements.txt` scripts and files:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不需要NGINX的任何支持目录，但请确保您的Web服务和运行的数据库在此处列出，包括`panoramic_trekking_app`和`photo_viewer`目录以及`Dockerfile`、`entrypoint.sh`、`manage.py`和`requirements.txt`脚本和文件：
- en: '[PRE95]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The command should return output similar to the following:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回类似以下的输出：
- en: '[PRE96]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Create the `.env.dev` file in the directory and add in the following details
    for `panoramic_trekking_app` to use in its `settings.py` file. These environment
    variables will set up the database name, user, password, and other database settings:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目录中创建`.env.dev`文件，并添加以下详细信息，供`panoramic_trekking_app`在其`settings.py`文件中使用。这些环境变量将设置数据库名称、用户、密码和其他数据库设置：
- en: '[PRE97]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Create a new `docker-compose.yml` file and open it with your text editor and
    add in the following details:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`docker-compose.yml`文件，并用文本编辑器打开它，并添加以下详细信息：
- en: '[PRE98]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: As you can see from the highlighted line in the `docker-compose.yml` file, the
    `web` service relies on the `activity_web:latest` Docker image.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从`docker-compose.yml`文件中的突出显示的行中所见，`web`服务依赖于`activity_web:latest` Docker镜像。
- en: 'Run the following `docker build` command to build the image and tag it appropriately:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下`docker build`命令来构建镜像并适当地标记它：
- en: '[PRE99]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'It''s now time to deploy the stack to Swarm. Run the following `stack deploy`
    command using `the docker-compose.yml` file you have created:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候将堆栈部署到Swarm了。使用您创建的`docker-compose.yml`文件运行以下`stack deploy`命令：
- en: '[PRE100]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Once the network has been created, you should see the `activity_swarm_web`
    and `activity_swarm_db` services made available:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 创建网络后，您应该看到`activity_swarm_web`和`activity_swarm_db`服务可用：
- en: '[PRE101]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Run the `service ls` command:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`service ls`命令：
- en: '[PRE102]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Verify that all the services have started successfully and are showing `1/1`
    replicas, as we have here:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 验证所有服务是否已成功启动，并显示`1/1`副本，就像我们这里一样：
- en: '[PRE103]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Finally, open your web browser and verify that you are able to access the site
    from `http://localhost:8000/admin/` and `http://localhost:8000/photo_viewer/`.
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开您的网络浏览器，并验证您能够从`http://localhost:8000/admin/`和`http://localhost:8000/photo_viewer/`访问该网站。
- en: The Panoramic Trekking App is created and set up in a similar way to some of
    the other services you have already completed in this chapter.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: Panoramic Trekking App的创建和设置方式与本章中已经完成的一些其他服务类似。
- en: 'Activity 9.02: Performing an Update to the App While the Swarm Is Running'
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动9.02：在Swarm运行时执行应用程序更新
- en: '**Solution**:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'There are a number of ways in which we can perform this activity. The following
    steps detail one way to do this:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种方法可以执行此活动。以下步骤详细说明了一种方法：
- en: 'If you do not have a Swarm running, deploy the `docker-compose.yml` file you
    created in *Activity 9.01*, *Deploying the Panoramic Trekking App to a Single-Node
    Docker Swarm*:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有运行Swarm，请部署您在*活动9.01*中创建的`docker-compose.yml`文件，*将Panoramic Trekking App部署到单节点Docker
    Swarm*：
- en: '[PRE104]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'As you can see, all three services are now running:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，现在所有三个服务都在运行：
- en: '[PRE105]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'In the same directory where you have performed the `stack deploy` command,
    open the `photo_viewer/templates/photo_index.html` file with your text editor
    and change line four to match the following details, basically adding the word
    `Patch` to the main heading:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行`stack deploy`命令的同一目录中，使用文本编辑器打开`photo_viewer/templates/photo_index.html`文件，并将第四行更改为与以下详细信息匹配，基本上是在主标题中添加单词`Patch`：
- en: photo_index.html
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: photo_index.html
- en: '[PRE106]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: You can find the complete code here [https://packt.live/3ceYnta](https://packt.live/3ceYnta).
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到完整的代码[https://packt.live/3ceYnta](https://packt.live/3ceYnta)。
- en: 'Build a new image, this time tagging the image as `patch_1` with the following command:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个新图像，这次使用以下命令将图像标记为`patch_1`：
- en: '[PRE107]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Deploy the patch to your Swarm web service using the `service update` command.
    Provide the image name and the service the update is going to be applied to as
    well:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`service update`命令将补丁部署到您的Swarm Web服务。还提供要应用更新的图像名称和服务：
- en: '[PRE108]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The output should look like the following:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE109]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'List the services running and verify that the new image is running as part
    of the `activity_swarm_web` service:'
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出正在运行的服务，并验证新图像是否作为`activity_swarm_web`服务的一部分正在运行：
- en: '[PRE110]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'As you can see from the output, the web service is no longer tagged with the
    `latest` tag. It is now displaying the `patch_1` image tag:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，Web服务不再使用`latest`标记。它现在显示`patch_1`图像标记：
- en: '[PRE111]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Verify that the changes have been applied to the image by accessing `http://localhost:8000/photo_viewer/`
    and seeing that the heading now shows `Patch Panoramic Trekking App`:![Figure
    9.10: Patch version of the Panoramic Trekking App'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问`http://localhost:8000/photo_viewer/`并查看标题现在显示为`Patch Panoramic Trekking
    App`来验证更改是否已应用于图像：![图9.10：全景徒步应用程序的Patch版本
- en: '](image/B15021_09_10.jpg)'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_09_10.jpg)'
- en: 'Figure 9.10: Patch version of the Panoramic Trekking App'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：全景徒步应用程序的Patch版本
- en: In this activity, you made a minor change to the Panoramic Trekking App so that
    a rolling update can be made to the service. You then deployed the image into
    the running environment and performed a rolling update to verify that the changes
    were successful. The change in the heading showed that the rolling update was
    performed successfully.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，您对全景徒步应用程序进行了微小更改，以便可以对服务进行滚动更新。然后，您将图像部署到运行环境中，并执行滚动更新以验证更改是否成功。标题中的更改表明滚动更新已成功执行。
- en: 10\. Kubernetes
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. Kubernetes
- en: 'Activity 10.01: Installing the Panoramic Trekking App on Kubernetes'
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动10.01：在Kubernetes上安装全景徒步应用程序
- en: '**Solution**:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'It is possible to create the database and Panoramic Trekking App with the following steps:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下步骤创建数据库和全景徒步应用程序：
- en: 'Install the database with the following `helm` command:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`helm`命令安装数据库：
- en: '[PRE112]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'This will install multiple Kubernetes resources for PostgreSQL and show a summary
    as follows:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为PostgreSQL安装多个Kubernetes资源，并显示摘要如下：
- en: '![Figure 10.23: Database installation'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.23：数据库安装'
- en: '](image/B15021_10_23.jpg)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_23.jpg)'
- en: 'Figure 10.23: Database installation'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.23：数据库安装
- en: This output first lists Helm chart-related information such as name, deployment
    time, status, and revision, followed by information related to the PostgreSQL
    instance and how to access it. This is a widely accepted method in Helm charts
    to give such information following the installation of a chart. Otherwise, it
    would be difficult to learn how to connect to the applications installed by Helm.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出首先列出与Helm图表相关的信息，例如名称、部署时间、状态和修订版本，然后是与PostgreSQL实例相关的信息以及如何访问它。这是Helm图表中广泛接受的方法，在安装图表后提供此类信息。否则，将很难学习如何连接到Helm安装的应用程序。
- en: 'Create a `statefulset.yaml` file with the following content:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`statefulset.yaml`文件，其中包含以下内容：
- en: '[PRE113]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: This file creates a Statefulset with the name `panoramic-trekking-app`. There
    are two containers defined in the `spec` section with the names `nginx` and `pta`.
    In addition, a volume claim is defined with the name `static` and is mounted to
    both the containers.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件创建了一个名为`panoramic-trekking-app`的Statefulset。在`spec`部分定义了两个名为`nginx`和`pta`的容器。此外，还定义了一个名为`static`的卷索赔，并将其挂载到两个容器上。
- en: 'Deploy the `panoramic-trekking-app` StatefulSet with the following command:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令部署`panoramic-trekking-app` StatefulSet：
- en: '[PRE114]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'This will create a StatefulSet for our application:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们的应用程序创建一个StatefulSet：
- en: '[PRE115]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Create a `service.yaml` file with the following content:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`service.yaml`文件，内容如下：
- en: '[PRE116]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'This Service definition has a `LoadBalancer` type to access the Pods with the
    label `app: panoramic-trekking-app`. Port `80` will be made available to access
    the `web` port of the Pods.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '此服务定义具有`LoadBalancer`类型，以访问具有标签`app: panoramic-trekking-app`的Pod。端口`80`将可用于访问Pod的`web`端口。'
- en: 'Deploy the `panoramic-trekking-app` Service with the following command:'
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令部署`panoramic-trekking-app`服务：
- en: '[PRE117]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'This will create a Service resource as follows:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建以下Service资源：
- en: '[PRE118]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Get the IP of the Service with the following command:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令获取Service的IP：
- en: '[PRE119]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Store the IP to access the Panoramic Trekking App in the following steps.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下步骤中存储IP以访问Panoramic Trekking App。
- en: 'Open the administration section of the Panoramic Trekking App in the browser
    with `http://$SERVICE_IP/admin`:![Figure 10.24: Admin login view'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开Panoramic Trekking App的管理部分，网址为`http://$SERVICE_IP/admin`：![图10.24：管理员登录视图
- en: '](image/B15021_10_24.jpg)'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_24.jpg)'
- en: 'Figure 10.24: Admin login view'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.24：管理员登录视图
- en: 'Log in with the username `admin` and the password `changeme` and add new photos
    and countries:![Figure 10.25: Admin setup view'
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用用户名`admin`和密码`changeme`登录，并添加新的照片和国家：![图10.25：管理员设置视图
- en: '](image/B15021_10_25.jpg)'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_25.jpg)'
- en: 'Figure 10.25: Admin setup view'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.25：管理员设置视图
- en: 'Open the Panoramic Trekking App at `http://$SERVICE_IP/photo_viewer` in the
    browser:![Figure 10.26: Application view'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开Panoramic Trekking App，网址为`http://$SERVICE_IP/photo_viewer`：![图10.26：应用程序视图
- en: '](image/B15021_10_26.jpg)'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_10_26.jpg)'
- en: 'Figure 10.26: Application view'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.26：应用程序视图
- en: The Photo Viewer application shows that the photos and countries have been retrieved
    from the database. It also indicates that the application is set up correctly
    and is running flawlessly.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 照片查看器应用程序显示已从数据库中检索到照片和国家。它还表明应用程序已正确设置并且正常运行。
- en: In this activity, you have deployed the Panoramic Trekking App to a Kubernetes
    cluster. You started with a database using its Helm chart and then created Kubernetes
    resources for the application. Finally, you accessed the app from the browser
    and tested it with the addition of new photos. By the end of this activity, you
    have discovered how to deploy a database by using its official Helm chart, created
    a series of Kubernetes resources to connect to the database and deploy your application,
    and gathered information from the cluster to access the application. The steps
    in the activity covered the life cycle of a containerized application being deployed
    in a Kubernetes cluster.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您已经将Panoramic Trekking App部署到了Kubernetes集群。您首先使用其Helm图表创建了一个数据库，然后为应用程序创建了Kubernetes资源。最后，您从浏览器访问了应用程序，并通过添加新的照片进行了测试。在这个活动结束时，您已经了解了如何使用官方Helm图表部署数据库，创建一系列Kubernetes资源来连接数据库并部署应用程序，并从集群中收集信息以访问应用程序。该活动中的步骤涵盖了在Kubernetes集群中部署容器化应用程序的生命周期。
- en: 11\. Docker Security
  id: totrans-553
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11\. Docker安全
- en: 'Activity 11.01: Setting up a seccomp Profile for the Panoramic Trekking App'
  id: totrans-554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动11.01：为Panoramic Trekking App设置seccomp配置文件
- en: '**Solution**:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'There are a number of ways in which you can create a `seccomp` profile that
    will stop users from performing the `mkdir`, `kill`, and `uname` commands. These
    steps show one way that this can be done:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以创建一个`seccomp`配置文件，阻止用户执行`mkdir`、`kill`和`uname`命令。以下步骤展示了如何完成这一操作：
- en: 'If you don’t already have `postgres` image locally, execute the following command:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你本地没有`postgres`镜像，请执行以下命令：
- en: '[PRE120]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Use the `wget` command on your system to obtain a copy of the default `seccomp`
    profile. Name the file you are downloading as `activity1.json`:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的系统上使用`wget`命令获取默认的`seccomp`配置文件的副本。将你下载的文件命名为`activity1.json`：
- en: '[PRE121]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Remove the following three commands from the profile to allow us to further
    lock down our image. Open the `activity1.json` file with your favorite text editor
    and remove the following lines from the file. You should look to remove *lines
    1500* to *1504* to remove the `uname` command, *669* to *673* to remove the `mkdir`
    command, and *lines 579* to *583* to remove the `kill` command from being available:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从配置文件中删除以下三个命令，以允许我们进一步锁定我们的镜像。用你喜欢的文本编辑器打开`activity1.json`文件，并从文件中删除以下行。你应该删除*行1500*到*1504*以删除`uname`命令，*669*到*673*以删除`mkdir`命令，以及*行579*到*583*以删除`kill`命令的可用性：
- en: '[PRE122]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'You can find the modified `activity1.json` file at the following link: [https://packt.live/32BI3PK](https://packt.live/32BI3PK).'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接找到修改后的`activity1.json`文件：[https://packt.live/32BI3PK](https://packt.live/32BI3PK)。
- en: 'Test the new profile with the `postgres` image by assigning a new profile as
    it is running, using the `–-security-opt seccomp=activity1.json` option when we
    are running the image:'
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`–-security-opt seccomp=activity1.json`选项在运行镜像时为`postgres`镜像分配一个新配置文件：
- en: '[PRE123]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'As you are now logged on to the running container, test the new permissions
    of the profile you have now assigned to the container. Perform a `mkdir` command
    to create a new directory on the system:'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经登录到正在运行的容器中，测试你已经分配给容器的新配置文件的权限。执行`mkdir`命令在系统上创建一个新目录：
- en: '[PRE124]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The command should show an `Operation not permitted` output:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应该显示一个`Operation not permitted`的输出：
- en: '[PRE125]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'To test that you are no longer able to kill the running processes, you need
    to start something up. Start the `top` process and run it in the background. Do
    this by typing `top` into the command line and then adding `&`, before pressing
    *Enter* to run the process in the background. The following command then provides
    the process command (`ps`) to see what processes are running on the container:'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试你不再能够杀死正在运行的进程，你需要启动一些东西。启动`top`进程并在后台运行。在命令行中输入`top`，然后添加`&`，然后按*Enter*在后台运行该进程。接下来的命令提供了进程命令(`ps`)，以查看容器上正在运行的进程：
- en: '[PRE126]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'As you can see from the following output, the `top` process is running as `PID
    8`:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 如下输出所示，`top`进程正在以`PID 8`运行：
- en: '[PRE127]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Note
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `ps` and `top` commands aren't available in a container based on `postgres`
    image. However, this doesn't cause any issues, as running `kill` command with
    any random pid number is sufficient to demonstrate that the command is not permitted
    to run.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`postgres`镜像的容器中不可用`ps`和`top`命令。然而，这不会造成任何问题，因为用任意随机的pid号运行`kill`命令足以证明该命令不被允许运行。
- en: 'Kill the top process by using the `kill -9` command followed by the PID number
    of the process you want to kill. The `kill -9` command will try to force the command
    to stop:'
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kill -9`命令杀死`top`进程，后面跟着你想要杀死的进程的PID号。`kill -9`命令将尝试强制停止命令：
- en: '[PRE128]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'You should see `Operation not permitted`:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到`Operation not permitted`：
- en: '[PRE129]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Test the `uname` command. This is a little different from the other commands:'
  id: totrans-580
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试`uname`命令。这与其他命令有些不同：
- en: '[PRE130]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'You will get an `Operation not permitted` output:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到一个`Operation not permitted`的输出：
- en: '[PRE131]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: This has been a good activity to show that there is still a lot we can do to
    limit what can be done to our images if they are accessed by an attacker.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的活动，表明如果我们的镜像被攻击者访问，我们仍然可以采取很多措施来限制对它们的操作。
- en: 'Activity 11.02: Scanning Your Panoramic Trekking App Images for Vulnerabilities'
  id: totrans-585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动11.02：扫描您的全景徒步应用镜像的漏洞
- en: '**Solution:**'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'There are a number of ways in which we can scan our images for vulnerabilities.
    The following steps are one way to do this, using Anchore to verify whether the
    `postgres-app` image is safe for use by our application:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以扫描我们的镜像以查找漏洞。以下步骤是使用Anchore来验证`postgres-app`镜像是否对我们的应用程序安全的一种方法：
- en: 'Tag the image and push it to your Docker Hub repository. In this case, tag
    the `postgres-app` image with our repository name and tag it as `activity2`. We
    are also pushing it to our Docker Hub repository:'
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给镜像打标签并将其推送到您的Docker Hub仓库。在这种情况下，使用我们的仓库名称给`postgres-app`镜像打标签，并将其标记为`activity2`。我们还将其推送到我们的Docker
    Hub仓库：
- en: '[PRE132]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'You should still have the `docker-compose.yaml` file you were using originally
    in this chapter. If you don''t have Anchore running already, run the `docker-compose`
    command and export the `ANCHORE_CLI_URL`, `ANCHORE_CLI_URL`, and `ANCHORE_CLI_URL`
    variables, as you did previously, to allow us to run the `anchore-cli` commands:'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该仍然拥有您在本章最初使用的`docker-compose.yaml`文件。如果您还没有运行Anchore，请运行`docker-compose`命令并导出`ANCHORE_CLI_URL`、`ANCHORE_CLI_URL`和`ANCHORE_CLI_URL`变量，就像您之前做的那样，以便我们可以运行`anchore-cli`命令：
- en: '[PRE133]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Check the status of the Anchore application by running the `anchore-cli system
    status` command:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`anchore-cli system status`命令来检查Anchore应用的状态：
- en: '[PRE134]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Use the `feeds list` command to check whether the feeds lists are all updated:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`feeds list`命令来检查feeds列表是否都已更新：
- en: '[PRE135]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Once all the feeds have been updated, add the `postgres-app` image that we''ve
    pushed to Docker Hub. Use the `image add` command provided by `anchore-cli`, and
    provide the repository, image, and tag of the image we want to scan. This will
    add the image to our Anchore database, ready for it to be scanned:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有的feeds都已经更新，添加我们推送到Docker Hub的`postgres-app`镜像。使用`anchore-cli`提供的`image
    add`命令，并提供我们想要扫描的镜像的仓库、镜像和标签。这将把镜像添加到我们的Anchore数据库中，准备进行扫描：
- en: '[PRE136]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Use the `image list` command to allow us to verify that our image has been
    analyzed. Once it is complete, you should see the word `analyzed` displayed in
    the `Analysis Status` column:'
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`image list`命令来验证我们的镜像是否已经被分析。一旦完成，您应该在`Analysis Status`列中看到`analyzed`这个词：
- en: '[PRE137]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Use the `image vuln` command with our image name to see a list of all the vulnerabilities
    found on our `postgres-app` image. This image is a lot larger and a lot more complex
    than the images we have tested previously, so there is a long list of vulnerabilities
    found when we use the `all` option. Fortunately, most of the vulnerabilities present
    either `Negligible` or `Unknown`. Run the `image vuln` command and pipe out the
    results to the `wc -l` command:'
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的镜像名称执行`image vuln`命令，以查看在我们的`postgres-app`镜像上发现的所有漏洞的列表。这个镜像比我们之前测试过的镜像要大得多，也要复杂得多，所以当我们使用`all`选项时，会发现很长的漏洞列表。幸运的是，大多数漏洞要么是`Negligible`，要么是`Unknown`。运行`image
    vuln`命令并将结果传输到`wc -l`命令：
- en: '[PRE138]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'This will give us a count of the numbers of vulnerabilities found. There are
    over 100 values in this case:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个漏洞数量的统计。在这种情况下有超过100个值：
- en: '[PRE139]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Finally, use the `evaluate check` command to see whether the vulnerabilities
    found will give us a pass or fail:'
  id: totrans-604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`evaluate check`命令来查看发现的漏洞是否会给我们通过或失败：
- en: '[PRE140]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Fortunately, as you can see from the following output, we have a pass:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，正如您从以下输出中看到的，我们通过了：
- en: '[PRE141]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: As the image is provided by a large organization, it is in their best interests
    to make sure it is safe for you to use, but as it is so easy to scan the images,
    we should be still scanning them to verify that they are 100% safe for use.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该镜像由一个大型组织提供，他们有责任确保您可以安全使用它，但由于扫描镜像如此容易，我们仍然应该扫描它们以验证它们是否100%安全可用。
- en: 12\. Best Practices
  id: totrans-609
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12\. 最佳实践
- en: 'Activity 12.01: Viewing the Resources Used by the Panoramic Trekking App'
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动12.01：查看Panoramic Trekking App使用的资源
- en: '**Solution:**'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'There are a number of ways in which we perform the first activity in this chapter.
    The following steps are one way to do this by using the `docker stats` command
    to view the resources being used by a service in the Panoramic Trekking App. For
    this example, we are going to use the `postgresql-app` service, which is running
    as part of the Panoramic Trekking App:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中执行第一个活动的方式有很多种。以下步骤是通过使用`docker stats`命令查看Panoramic Trekking App中服务使用的资源的一种方法。在本例中，我们将使用作为Panoramic
    Trekking App的一部分运行的`postgresql-app`服务：
- en: 'Create a script that will create a new table and fill it with random values.
    The following script does exactly what we want in this situation as we want to
    create a long processing query and see how it affects the resources on our container.
    Add in the following details and save the file as `resource_test.sql` using your
    favorite editor:'
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个脚本，将创建一个新表并用随机值填充它。以下脚本正是我们在这种情况下想要的，因为我们想创建一个长时间的处理查询，并查看它如何影响我们容器上的资源。添加以下细节，并使用您喜欢的编辑器将文件保存为`resource_test.sql`：
- en: '[PRE142]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '*Lines 1* to *6* create the new table and set up the three different rows it
    includes, while *lines* *8 to 14* run through a new table, populating it with
    random values.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '*第1行*到*第6行*创建新表并设置它包含的三行，而*第8行到第14行*遍历一个新表，用随机值填充它。'
- en: 'If you have not got a copy of the PostgreSQL Docker image already, pull the
    image from the supported PostgreSQL Docker Hub repository using the following
    command:'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有PostgreSQL Docker镜像的副本，请使用以下命令从受支持的PostgreSQL Docker Hub存储库中拉取镜像：
- en: '[PRE143]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Move into a new terminal window and run the `docker stats` command to view
    the `CPU` percentage being used, as well as the memory and memory percentage being
    used:'
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新的终端窗口并运行`docker stats`命令，查看正在使用的`CPU`百分比，以及正在使用的内存和内存百分比：
- en: '[PRE144]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'In the following command, we are not displaying the container ID as we wanted
    to limit the amount of data showing on our output:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下命令中，我们没有显示容器ID，因为我们希望限制输出中显示的数据量：
- en: '[PRE145]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'To simply test this image, you don''t need to have the running container mounted
    on a specific volume to use the data you have previously used for this image.
    Move into a different terminal to the one monitoring your CPU and memory. Start
    the container and name it `postgres-test` and ensure that the database is accessible
    from your host system by exposing the ports needed to run a `psql` command. We
    have also specified a temporary password of `docker` in this instance using the
    environment variable (`-e`) option:'
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要简单测试这个镜像，您不需要将运行的容器挂载到特定卷上，以使用您先前为此镜像使用的数据。切换到另一个终端来监视您的CPU和内存。启动容器并将其命名为`postgres-test`，确保数据库可以从主机系统访问，通过暴露运行`psql`命令所需的端口。我们还在此示例中使用环境变量（`-e`）选项指定了临时密码为`docker`：
- en: '[PRE146]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Before you run your test script, move to the terminal where you are monitoring
    the CPU and memory usage. You can see that our container is already using some
    of the resources without even really doing anything:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行测试脚本之前，切换到监视CPU和内存使用情况的终端。您可以看到我们的容器已经在没有真正做任何事情的情况下使用了一些资源：
- en: '[PRE147]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'Enter the terminal inside your container using the following command:'
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令进入容器内的终端：
- en: '[PRE148]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Use the `psql` command to send the `postgres-test` container command to create
    a new database called `resource_test`:'
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`psql`命令发送`postgres-test`容器命令以创建名为`resource_test`的新数据库：
- en: '[PRE149]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Run the script you created earlier. Make sure you include the `time` command
    before you run the script as this will allow you to see the time it takes to complete:'
  id: totrans-630
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您之前创建的脚本。确保在运行脚本之前包括`time`命令，因为这将允许您查看完成所需的时间：
- en: '[PRE150]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'We have reduced the output of the command in the following code block. It took
    50 seconds to fill up the `resource_database` tables with data:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经减少了以下代码块中命令的输出。用数据填充`resource_database`表花费了50秒：
- en: '[PRE151]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Move to the terminal where your `docker stats` command is running. You will
    see an output depending on the number of cores your system is running and the
    memory it has available. The script being run doesn''t seem to be very memory-intensive,
    but it is pushing up the CPU available to the container to 100%:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到运行`docker stats`命令的终端。您将看到一个输出，取决于系统运行的核心数量和可用的内存。正在运行的脚本似乎不太耗费内存，但它正在将容器可用的CPU推高到100%：
- en: '[PRE152]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Before you can run the container with the changes to the CPU and memory configuration,
    delete the running container to make sure you have a fresh database running by
    using the following command:'
  id: totrans-636
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对CPU和内存配置进行更改后运行容器之前，删除正在运行的容器，以确保您有一个新的数据库运行，使用以下命令：
- en: '[PRE153]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Run the container again. In this instance, you will limit the CPU available
    to only half of one core on the host system, and as the test was not too memory-intensive,
    set the memory limit to `256MB`:'
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行容器。在这种情况下，您将将可用的CPU限制为主机系统上一半的一个核心，并且由于测试不太耗费内存，将内存限制设置为`256MB`：
- en: '[PRE154]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Enter the container using the `exec` command:'
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`exec`命令进入容器：
- en: '[PRE155]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Again, before running your tests, create the `resource_test` database:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在运行测试之前，创建`resource_test`数据库：
- en: '[PRE156]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Now, to see what changes have been made to our resources, limit what can be
    used by the container. Run the `resource_test.sql` script again and by limiting
    the resources, specifically the CPU, we can see that it now takes more than 1
    minute to complete:'
  id: totrans-644
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了查看对我们的资源所做的更改，限制容器可以使用的资源。再次运行`resource_test.sql`脚本，并通过限制资源，特别是CPU，我们可以看到现在完成需要超过1分钟：
- en: '[PRE157]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Move to the terminal where your `docker stats` command is running. It should
    also look different as the percentage of CPU available to be used will be halved.
    The change you have made to the CPU slows the running of the script and, as a
    result, seems to reduce the memory being used as well:'
  id: totrans-646
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到运行`docker stats`命令的终端。它看起来也会有所不同，因为可用于使用的CPU百分比将减半。您对CPU所做的更改减慢了脚本的运行，并且似乎也减少了内存的使用：
- en: '[PRE158]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: This activity gave you a good indication of the balancing act you sometimes
    need to perform when you are monitoring and configuring your container resources.
    It does clarify that you need to be aware of the tasks your services are performing,
    as well as how changes to configurations will then affect how your services will
    operate.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 这项活动为您提供了一个很好的指示，有时您需要执行平衡的行为，当您监视和配置容器资源时。它确实澄清了您需要了解您的服务正在执行的任务，以及对配置的更改将如何影响您的服务的运行方式。
- en: 'Activity 12.02: Using hadolint to Improve the Best Practices on Dockerfiles'
  id: totrans-649
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动12.02：使用hadolint改进Dockerfile的最佳实践
- en: '**Solution**'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'There are a number of ways in which we can perform this activity. The following
    steps show one way to do this:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种方法可以执行此活动。以下步骤展示了一种方法：
- en: 'Pull the image from the `hadolint` repository with the following `docker pull` command:'
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`docker pull`命令从`hadolint`存储库中拉取镜像：
- en: '[PRE159]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Use `hadolint` to lint the `docker-stress` `Dockerfile` we have been using
    throughout this chapter and document the warnings presented:'
  id: totrans-654
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`hadolint`来检查我们在本章中一直在使用的`docker-stress` `Dockerfile`并记录所呈现的警告：
- en: '[PRE160]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'You will get warnings such as the following:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 你会收到以下警告：
- en: '[PRE161]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: There are no real changes from when you originally tested the image. However,
    there are only three lines of code in the `Dockerfile`, so see whether you can
    reduce the number of warnings being presented by `hadolint`.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 与你最初测试镜像时没有真正的变化。然而，在`Dockerfile`中只有三行代码，所以看看是否可以减少`hadolint`呈现的警告数量。
- en: 'As mentioned earlier in this chapter, the `hadolint` wiki page will provide
    you with details on how to resolve each of the warnings presented. However, if
    you move through each line, you should be able to resolve all these warnings.
    The first one presented, `DL3006`, asks to tag the version of the Docker image
    you are using, which is a new version of the Ubuntu image. Change *line 1* of
    your `Dockerfile` to now include the `18.08` image version, as shown:'
  id: totrans-659
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如本章前面提到的，`hadolint`维基页面将为你提供如何解决所呈现的每个警告的详细信息。然而，如果你逐行进行，应该能够解决所有这些警告。首先呈现的`DL3006`要求标记你正在使用的Docker镜像版本，这是Ubuntu镜像的新版本。将你的`Dockerfile`的*行1*更改为现在包括`18.08`镜像版本，如下所示：
- en: '[PRE162]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'The next four warnings are all related to the second line of our `Dockerfile`.
    `DL3008` asks to pin the version of the application being installed. In the following
    case, pin the stress application to version 1.0.3\. `DL3009` states that you should
    delete any lists. This is where we have added *lines 4* and *5* in the following
    code. `DL3015` states that you should also use `--no-install-recommends`, making
    sure you don''t install applications you don''t need. Lastly, `DL3014` is suggesting
    you include the `-y` option to make sure you are not prompted to verify the installation
    of your application. Edit the `Dockerfile` to look as follows:'
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的四个警告都与我们`Dockerfile`的第二行有关。`DL3008`要求固定安装的应用程序版本。在下面的情况下，将stress应用程序固定到1.0.3版本。`DL3009`指出你应该删除任何列表。这就是我们在下面的代码中添加*行4*和*行5*的地方。`DL3015`指出你还应该使用`--no-install-recommends`，确保你不安装不需要的应用程序。最后，`DL3014`建议你包括`-y`选项，以确保你不会被提示验证应用程序的安装。编辑`Dockerfile`如下所示：
- en: '[PRE163]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '`DL3025` is your last warning and states that you need to have your `CMD` instruction
    in JSON format. This could cause issues as you are trying to use environment variables
    with your stress application. To clear up this warning, run the `stress` command
    with the `sh -c` option. This should still allow you to run the command with environment
    variables:'
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DL3025`是你的最后警告，并且指出你需要将`CMD`指令以JSON格式编写。这可能会导致问题，因为你正在尝试在stress应用程序中使用环境变量。为了消除这个警告，使用`sh
    -c`选项运行`stress`命令。这样应该仍然允许你使用环境变量运行命令：'
- en: '[PRE164]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Your complete `Dockerfile`, now adhering to the best practices, should look
    as follows:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 你的完整`Dockerfile`，现在遵循最佳实践，应该如下所示：
- en: '[PRE165]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Now, lint the `Dockerfile` again using `hadolint`, with no more warnings presented:'
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次使用`hadolint`对`Dockerfile`进行检查，不再呈现任何警告：
- en: '[PRE166]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'If you want to be 100% sure that the `Dockerfile` is looking as good as it
    can be, perform one final test. Open `FROM:latest` in your browser and you will
    see the `Dockerfile` with the latest changes showing `No problems or suggestions
    found!`:![Figure 12.4: The docker-stress Dockerfile now adhering to the best practices'
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想百分之百确定`Dockerfile`看起来尽可能好，进行最后一次测试。在浏览器中打开`FROM:latest`，你会看到`Dockerfile`显示最新更改时的`没有找到问题或建议！`：![图12.4：docker-stress
    Dockerfile现在遵循最佳实践
- en: '](image/B15021_12_04.jpg)'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_12_04.jpg)'
- en: 'Figure 12.4: The docker-stress Dockerfile now adhering to the best practices'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：docker-stress Dockerfile现在遵循最佳实践
- en: Your `Dockerfiles` may be a lot larger than the ones presented in this chapter,
    but as you can see, a systematic line-by-line approach will help you correct any
    issues that your `Dockerfiles` may have. Using applications such as `hadolint`
    and `FROM latest`, with their suggestions on how to resolve warnings, will familiarize
    you with the best practices as you go along. This brings us to the end of our
    activities and this chapter, but there is still more interesting content to go,
    so don't stop now.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`Dockerfiles`可能比本章中呈现的要大得多，但是正如您所看到的，逐行系统地处理将帮助您纠正`Dockerfiles`可能存在的任何问题。使用诸如`hadolint`和`FROM
    latest`之类的应用程序，以及它们关于如何解决警告的建议，将使您熟悉随着实践而来的最佳实践。这就是我们活动和本章的结束，但是还有更多有趣的内容要学习，所以现在不要停下来。
- en: 13\. Monitoring Docker Metrics
  id: totrans-673
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13.监控Docker指标
- en: 'Activity 13.01: Creating a Grafana Dashboard to Monitor System Memory'
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动13.01：创建Grafana仪表板以监控系统内存
- en: '**Solution**:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'There are a number of ways in which you can perform this activity. The following
    steps are one such method:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以执行此活动。以下步骤是一种方法：
- en: Make sure that Prometheus is running and collecting data, Docker and `cAdvisor`
    are configured to expose metrics, and Grafana is running and configured with Prometheus
    as a data source.
  id: totrans-677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Prometheus正在运行和收集数据，Docker和`cAdvisor`已配置为公开指标，并且Grafana正在运行并配置为使用Prometheus作为数据源。
- en: 'Open the Grafana web interface and the `Container Monitoring` dashboard you
    created in *Exercise 13.05: Installing and Running Grafana on Your System*'
  id: totrans-678
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Grafana Web界面和您在*练习13.05：在您的系统上安装和运行Grafana*中创建的`Container Monitoring`仪表板
- en: 'There is an `Add panel` option at the top of the dashboard and to the right
    of the dashboard name. Click the `Add panel` icon to add in your new dashboard panel:![Figure
    13.26: Adding a new panel to the container monitoring dashboard'
  id: totrans-679
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表板顶部和仪表板名称右侧有一个“添加面板”的选项。单击“添加面板”图标以添加新的仪表板面板：![图13.26：向容器监控仪表板添加新面板
- en: '](image/B15021_13_26.jpg)'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_26.jpg)'
- en: 'Figure 13.26: Adding a new panel to the container monitoring dashboard'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.26：向容器监控仪表板添加新面板
- en: Select `Prometheu`s from the drop-down list as the data source we will be using
    to produce the new dashboard panel.
  id: totrans-682
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择`Prometheus`作为我们将使用的数据源，以生成新的仪表板面板。
- en: 'In the `metrics` section, add the following PromQL query, `container_memory_usage_bytes`,
    searching only for entries that have a name value. Then, sum by each name to provide
    a line graph for each container:'
  id: totrans-683
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`metrics`部分，添加以下PromQL查询，`container_memory_usage_bytes`，仅搜索具有名称值的条目。然后，按每个名称求和，为每个容器提供一条线图：
- en: '[PRE167]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Depending on the amount of data you have available in your time-series database,
    adjust the relative time if needed. Perhaps set the relative time to `15m`. The
    previous three steps are captured in the following diagram:![Figure 13.27: Adding
    a new panel to the Container Monitoring dashboard'
  id: totrans-685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据时间序列数据库中可用的数据量进行调整相对时间（如果需要）。也许将相对时间设置为`15m`。前三个步骤如下图所示：![图13.27：向容器监控仪表板添加新面板
- en: '](image/B15021_13_27.jpg)'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_27.jpg)'
- en: 'Figure 13.27: Adding a new panel to the Container Monitoring dashboard'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.27：向容器监控仪表板添加新面板
- en: Select `Show options` and add the title of `Memory Container Usage`.
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“显示选项”并添加“内存容器使用”作为标题。
- en: 'If you click on `Save`, you will notice that you cannot save the panel as the
    dashboard has been provisioned on startup. You can export the JSON, which you
    can then add to your provisioning directory. Click the `Share Dashboard` button
    and export the JSON. Select `Save JSON to file` and store the dashboard file in
    the `/tmp directory`:![Figure 13.28: Warning that we cannot save the new dashboard'
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果单击“保存”，您会注意到无法保存面板，因为仪表板已在启动时进行了配置。您可以导出JSON，然后将其添加到您的配置目录中。单击“共享仪表板”按钮并导出JSON。选择“将JSON保存到文件”并将仪表板文件存储在“/tmp目录”中：![图13.28：警告，我们无法保存新的仪表板
- en: '](image/B15021_13_28.jpg)'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_28.jpg)'
- en: 'Figure 13.28: Warning that we cannot save the new dashboard'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.28：警告，我们无法保存新的仪表板
- en: 'Stop your Grafana container from running so that you can add to the provisioning
    file in your environment. Do this with the following `docker kill` command:'
  id: totrans-692
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止运行Grafana容器，以便您可以添加到环境中的配置文件。使用以下“docker kill”命令执行此操作：
- en: '[PRE168]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'You already have a file named `ContainerMonitoring.json` in the `provisioning/dashboards`
    directory. Copy the JSON file you have just created from your `tmp` directory
    and replace the original file in the `provisioning/dashboards` directory:'
  id: totrans-694
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经在“provisioning/dashboards”目录中有一个名为“ContainerMonitoring.json”的文件。从您的“tmp”目录中复制刚创建的JSON文件，并替换“provisioning/dashboards”目录中的原始文件：
- en: '[PRE169]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Start the Grafana image again and log in to the application using the default
    administration password:'
  id: totrans-696
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次启动Grafana图像，并使用默认管理密码登录应用程序：
- en: '[PRE170]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Log in to Grafana one more time and move to the `Container Monitoring` dashboard
    you have been provisioning. You should now see the newly created `Memory Container
    usage` panel at the top of our dashboard, similar to the following screenshot:![Figure
    13.29: New dashboard panel displaying memory usage'
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次登录到Grafana，并转到您一直在配置的“容器监控”仪表板。您现在应该在我们的仪表板顶部看到新创建的“内存容器使用情况”面板，类似于以下屏幕截图：![图13.29：显示内存使用情况的新仪表板面板
- en: '](image/B15021_13_24.jpg)'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_24.jpg)'
- en: 'Figure 13.29: New dashboard panel displaying memory usage'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.29：显示内存使用情况的新仪表板面板
- en: This should now make it a lot easier to monitor the memory and CPU usage of
    containers running on your system. The dashboard provides an easier interface
    than looking through the `docker stats` command, especially when you start to
    run a few more containers on your system.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该更容易监视系统上运行的容器的内存和CPU使用情况。仪表板提供了比查看“docker stats”命令更简单的界面，特别是当您开始在系统上运行更多容器时。
- en: 'Activity 13.02: Configuring the Panoramic Trekking App to Expose Metrics to
    Prometheus'
  id: totrans-702
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动13.02：配置全景徒步应用程序向Prometheus公开指标
- en: '**Solution**:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'There are a number of ways in which we can perform this activity. Here, we
    have chosen to add an exporter to the PostgreSQL container we have running as
    part of the panoramic trekking app:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以多种方式执行此活动。在这里，我们选择向全景徒步应用程序的PostgreSQL容器添加导出器：
- en: 'If you don''t have the panoramic trekking app running, make sure that at least
    the PostgreSQL container is running so that you can complete this activity. You
    won''t need to have Prometheus running yet as you will need to make some changes
    to the configuration file first. Run the following command to verify that the
    PostgreSQL database is running:'
  id: totrans-705
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有全景徒步应用程序在运行，请确保至少PostgreSQL容器正在运行，以便您可以完成此活动。您还不需要运行Prometheus，因为您需要先对配置文件进行一些更改。运行以下命令以验证PostgreSQL数据库是否正在运行：
- en: '[PRE171]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'To gather further metrics from your PostgreSQL container, you can locate an
    exporter already created by the user `albertodonato` on GitHub. Using one that
    someone has already created makes it a lot easier than having to create your own.
    Documentation and details can be found at the following URL: [https://github.com/albertodonato/query-exporter](https://github.com/albertodonato/query-exporter).'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 要从您的 PostgreSQL 容器中收集更多指标，您可以在 GitHub 上找到用户`albertodonato`已经创建的导出器。使用其他人已经创建的导出器比自己创建要容易得多。文档和详细信息可以在以下网址找到：[https://github.com/albertodonato/query-exporter](https://github.com/albertodonato)。
- en: 'The aforementioned GitHub account has a good breakdown of how to set up the
    configuration and metrics. Set up a basic configuration file to get started. Find
    the IP address that the PostgreSQL container is running on by running the following
    `docker inspect` command. This gives you the internal IP address your container
    is running on. You''ll also need to substitute the container name you have running
    for `<container_name>`:'
  id: totrans-708
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述的 GitHub 帐户有一个很好的分解如何设置配置和指标。设置一个基本的配置文件以开始。通过运行以下`docker inspect`命令找到 PostgreSQL
    容器正在运行的 IP 地址。这会给出容器正在运行的内部 IP 地址。您还需要替换您正在运行的容器名称为`<container_name>`：
- en: '[PRE172]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Your IP address might be different to the one here:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 您的IP地址可能与此处的不同：
- en: '[PRE173]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: For this exporter, you need to set up some extra configurations to feed into
    the exporter. To start with, create a configuration file named `psql_exporter_config.yml`
    in your working directory and open the file with your text editor.
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个导出器，您需要设置一些额外的配置来输入到导出器中。首先，在您的工作目录中创建一个名为`psql_exporter_config.yml`的配置文件，并用文本编辑器打开该文件。
- en: 'Enter the first four lines into your configuration file below. This is how
    the exporter connects to the database. You will need to provide the password with
    which the database can be accessed and the IP address that you obtained in the
    previous step or if a domain is assigned to the database:'
  id: totrans-713
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的配置文件中输入前四行。这是导出器连接到数据库的方式。您需要提供可以访问数据库的密码以及在上一步中获得的IP地址，或者如果为数据库分配了域，则需要提供域：
- en: '[PRE174]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'Add your first metric to the configuration file. Enter the following lines
    to add your metric name, type of gauge, description, and a label:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的第一个指标添加到配置文件中。输入以下行以添加指标名称、规模类型、描述和标签：
- en: '[PRE175]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Set up a database query to gather the metric details you want for the `pg_process`
    gauge. *Line 13* shows that you want to create a database query with *lines 14*
    and *15,* assigning the results to the metric you created earlier. *Lines 16*
    to *23* are the query we want to run on our database in order to create a gauge
    for the number of processes running on the database:'
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个数据库查询，以收集您想要用于`pg_process`规模的指标详细信息。*第13行*显示您想要创建一个数据库查询，*第14*和*15行*将结果分配给您之前创建的指标。*第16*至*23行*是我们想要在数据库上运行的查询，以便为数据库上运行的进程数量创建一个规模：
- en: psql_exporter_config.yml
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: psql_exporter_config.yml
- en: '[PRE176]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: You can find the complete code here [https://packt.live/32C47K3](https://packt.live/32C47K3).
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到完整的代码[https://packt.live/32C47K3](https://packt.live/32C47K3)。
- en: 'Save the configuration file and run the exporter from the command line. The
    exporter will expose its metrics on port `9560`. Mount the configuration file
    you created earlier in this activity. You are also getting the latest version
    of the `adonato/query-exporter` image:'
  id: totrans-721
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存配置文件并从命令行运行导出器。导出器将在端口`9560`上公开其指标。挂载您在此活动中创建的配置文件。您还将获得`adonato/query-exporter`图像的最新版本：
- en: '[PRE177]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Open a web browser and use the URL `http://0.0.0.0:9560/metrics` to view the
    new metrics you have set up for the PostgreSQL container running as part of the
    panoramic trekking app:'
  id: totrans-723
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器，使用URL`http://0.0.0.0:9560/metrics`来查看您为全景徒步应用程序运行的 PostgreSQL 容器设置的新指标：
- en: '[PRE178]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'Move into the directory where you have Prometheus installed, open the `prometheus.yml`
    file with your text editor, and add in the exporter details to allow Prometheus
    to start collecting the data:'
  id: totrans-725
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入您安装了Prometheus的目录，用您喜欢的文本编辑器打开`prometheus.yml`文件，并添加导出器详细信息，以允许Prometheus开始收集数据：
- en: '[PRE179]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'Save the changes you''ve made to the `prometheus.yml` file and start the Prometheus
    application again from the command line, as shown here:'
  id: totrans-727
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您对`prometheus.yml`文件所做的更改，并再次从命令行启动Prometheus应用程序，如下所示：
- en: '[PRE180]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'If everything has worked as it should, you should now see the `postgres-web`
    target displayed on the Prometheus `Targets` page, as demonstrated here:![Figure
    13.30: New postgres-web Targets page displayed on Prometheus'
  id: totrans-729
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切都按照应该的方式进行了，您现在应该在Prometheus的“Targets”页面上看到`postgres-web`目标，如图所示：![图13.30：在Prometheus上显示的新的postgres-web目标页面
- en: '](image/B15021_13_25.jpg)'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_13_25.jpg)'
- en: 'Figure 13.30: New postgres-web Targets page displayed on Prometheus'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.30：在Prometheus上显示的新的postgres-web目标页面
- en: That brings us to the end of the activities and the end of this chapter. The
    activities should have helped to solidify the knowledge learned earlier on and
    provided you with experience in gathering metrics for your applications and running
    systems and displaying them in a more user-friendly fashion.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是活动的结束，也是本章的结束。这些活动应该有助于巩固之前学到的知识，并为您提供了在更加用户友好的方式中收集应用程序和运行系统的指标的经验。
- en: 14\. Collecting Container Logs
  id: totrans-733
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14. 收集容器日志
- en: 'Activity 14.01: Creating a docker-compose.yml File for Your Splunk Installation'
  id: totrans-734
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动14.01：为您的Splunk安装创建一个docker-compose.yml文件
- en: '**Solution**:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: There are a number of ways in which we can perform this activity. The following
    steps outline one possible method.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以执行这项活动。以下步骤概述了一种可能的方法。
- en: 'Here, you will set up a `docker-compose.yml` file that will at least run your
    Splunk container the same way it has been running throughout this chapter. You
    will set up two volumes in order to mount the `/opt/splunk/etc` directory, as
    well as the `/opt/splunk/var` directory. You need to expose ports `8000`, `9997`,
    and `8088` to allow access to your web interface and allow data to be forwarded
    to the Splunk instance. Finally, you will need to set up some environment variables
    that will accept the Splunk license and add the Administrator password. Let''s
    get started:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将设置一个`docker-compose.yml`文件，该文件至少会以与本章中一直运行的方式运行您的Splunk容器。您将设置两个卷，以便挂载`/opt/splunk/etc`目录，以及`/opt/splunk/var`目录。您需要公开端口`8000`、`9997`和`8088`，以允许访问您的Web界面并允许数据转发到Splunk实例。最后，您需要设置一些环境变量，以接受Splunk许可证并添加管理员密码。让我们开始吧：
- en: Create a new file called `docker-compose.yml` and open it with your favorite
    text editor.
  id: totrans-738
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`docker-compose.yml`的新文件，并用您喜欢的文本编辑器打开它。
- en: 'Start with the version of `Docker Compose` you prefer and create the volumes
    you are going to use in order to mount the `var` and `ext` directories:'
  id: totrans-739
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您喜欢的`Docker Compose`版本开始，并创建要用于挂载`var`和`ext`目录的卷：
- en: '[PRE181]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'Set up the service for the Splunk installation, using `splunk` as the hostname
    and `splunk/splunk` as the image you have been using as your installation. Also,
    set up the environment variables for `SPLUNK_START_ARGS` and `SPLUNK_PASSWORD`,
    as shown here:'
  id: totrans-741
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`splunk`作为主机名和`splunk/splunk`作为您安装的镜像来设置Splunk安装的服务。此外，设置`SPLUNK_START_ARGS`和`SPLUNK_PASSWORD`的环境变量，如下所示：
- en: '[PRE182]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Finally, mount the volumes and expose the ports your installation will need
    to access the web interface and forward data from a forwarder and the containers:'
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，挂载卷并公开安装所需的访问Web界面和从转发器和容器转发数据的端口：
- en: '[PRE183]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Run the `docker-compose up` command to make sure it is all working correctly.
    Use the `-d` option to make sure it is running as a daemon in the background of
    our system:'
  id: totrans-745
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`docker-compose up`命令，确保一切都正常工作。使用`-d`选项确保它作为后台守护程序在我们系统中运行：
- en: '[PRE184]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'The command should return an output similar to the following:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回类似以下的输出：
- en: '[PRE185]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Once your Splunk installation is running again, it''s time to get one of your
    services from the Panoramic Trekking App running so that you can forward logs
    to Splunk to be indexed. When using the `docker run` command, add the log driver
    details, as you did previously in this chapter, and make sure you include the
    correct token for your `HTTP Event Collector`:'
  id: totrans-749
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的Splunk安装再次运行，就该是让Panoramic Trekking App中的一个服务运行起来，这样您就可以将日志转发到Splunk进行索引。在使用`docker
    run`命令时，添加日志驱动程序的详细信息，就像您在本章中之前所做的那样，并确保您包括了正确的`HTTP事件收集器`的令牌：
- en: '[PRE186]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Note
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意
- en: Observe that we are using `-c log_statement=all` in the `docker run` command
    as this will make sure all of our PostgreSQL queries will be logged and sent to
    Splunk.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`docker run`命令中使用了`-c log_statement=all`，这将确保我们所有的PostgreSQL查询都被记录并发送到Splunk。
- en: 'Log in to the Splunk web interface and access the `Search & Reporting` app.
    Enter the `source="http:docker logs" AND postgres-test` query into the interface
    and press *Enter*. Since you have tagged our container, you should see your containers
    tagged with the name and full ID, so adding `postgres-test` to your search will
    make sure only your PostgreSQL logs are visible:![Figure 14.48: PostgreSQL logs
    displaying in Splunk'
  id: totrans-753
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录Splunk Web界面并访问`搜索和报告`应用程序。在界面中输入`source="http:docker logs" AND postgres-test`查询，然后按*Enter*。由于您已经给我们的容器打了标签，您应该会看到您的容器带有名称和完整ID的标签，因此在搜索中添加`postgres-test`将确保只有您的PostgreSQL日志可见：![图14.48：Splunk中显示的PostgreSQL日志
- en: '](image/B15021_14_46.jpg)'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_46.jpg)'
- en: 'Figure 14.48: PostgreSQL logs displaying in Splunk'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.48：Splunk中显示的PostgreSQL日志
- en: As you can see from the preceding screenshot, our logs are flowing through Splunk
    successfully. Make note of the tag that was added to the log entries, as shown
    in the preceding screenshot.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中可以看出，我们的日志已经成功地通过Splunk流动。请注意在日志条目中添加的标签，就像前面的屏幕截图中所示的那样。
- en: This activity taught us how to implement the logging procedures in our development
    projects using Docker Compose.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 这项活动教会了我们如何在开发项目中使用Docker Compose实施日志记录程序。
- en: 'Activity 14.02: Creating a Splunk App to Monitor the Panoramic Trekking App'
  id: totrans-758
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动14.02：创建一个Splunk应用程序来监视Panoramic Trekking App
- en: '**Solution**:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：'
- en: 'There are a number of ways in which you can perform this activity. The following
    steps are one way to do this. Here, you will add an exporter to the `PostgreSQL`
    container you have running as part of the Panoramic Trekking App:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以执行这项活动。以下步骤是一种方法。在这里，您将向作为Panoramic Trekking App的一部分正在运行的`PostgreSQL`容器添加一个导出器：
- en: Make sure Splunk is running and that the service you have been monitoring has
    been running for a little while to make sure you are collecting some logs for
    this activity.
  id: totrans-761
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Splunk正在运行，并且您一直在监视的服务已经运行了一段时间，以确保您正在为这项活动收集一些日志。
- en: 'Log in to the Splunk web interface. From the Splunk home screen, click on the
    cog icon next to the `Apps` menu; you will be presented with the `Apps` page for
    your Splunk environment:![Figure 14.49: Apps page of the Splunk environment'
  id: totrans-762
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录Splunk Web界面。从Splunk主屏幕上，点击`应用程序`菜单旁边的齿轮图标；您将看到您的Splunk环境的`应用程序`页面：![图14.49：Splunk环境的应用程序页面
- en: '](image/B15021_14_49.jpg)'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_49.jpg)'
- en: 'Figure 14.49: Apps page of the Splunk environment'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.49：Splunk环境的应用程序页面
- en: 'Click the `Create` app button and fill in the form. It will be similar to the
    following, in which `Name` is set to `Panoramic Trekking App`, `Folder name` is
    set to `panoramic_trekking_app`, and `Version` is set to `1.0.0`. Click `Save`
    to create the new app:![Figure 14.50: Creating your new app in Splunk'
  id: totrans-765
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”应用按钮并填写表格。表格将类似于以下内容，其中“名称”设置为“全景徒步应用”，“文件夹名称”设置为“panoramic_trekking_app”，“版本”设置为“1.0.0”。点击“保存”以创建新应用：![图14.50：在Splunk中创建您的新应用
- en: '](image/B15021_14_50.jpg)'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_50.jpg)'
- en: 'Figure 14.50: Creating your new app in Splunk'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.50：在Splunk中创建您的新应用
- en: 'Return to the Splunk home page and make sure your `Panoramic Trekking App`
    is visible from the `Apps` menu. Click `Panoramic Trekking App` to bring up the
    `Search & Reporting` page so that you can start querying your data:![Figure 14.51:
    Selecting Panoramic Trekking App'
  id: totrans-768
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Splunk主页，并确保您的“全景徒步应用”从“应用”菜单中可见。点击“全景徒步应用”以打开“搜索和报告”页面，以便您可以开始查询您的数据：![图14.51：选择全景徒步应用
- en: '](image/B15021_14_51.jpg)'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_51.jpg)'
- en: 'Figure 14.51: Selecting Panoramic Trekking App'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.51：选择全景徒步应用
- en: 'Type `source="http:docker logs" AND postgres-test AND INSERT AND is_superuser
    | stats count` into the query bar and press *Enter*. The search will look for
    any `Super Users` that were created as part of the application. When your data
    comes up, click the `Visualization` tab and change it to display a single-value
    visualization:![Figure 14.52: Entering a query in the query bar'
  id: totrans-771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在查询栏中输入“source="http:docker logs" AND postgres-test AND INSERT AND is_superuser
    | stats count”，然后按Enter键。搜索将查找作为应用程序的一部分创建的任何“超级用户”。当您的数据出现时，点击“可视化”选项卡，并将其更改为显示单个值的可视化：![图14.52：在查询栏中输入查询
- en: '](image/B15021_14_52.jpg)'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_52.jpg)'
- en: 'Figure 14.52: Entering a query in the query bar'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.52：在查询栏中输入查询
- en: 'Click the `Save As` button at the top of the screen and select the `Dashboards`
    panel. When you are presented with this screen, select the panel to be added to
    a new dashboard and give it the name `PTA Monitoring`. Also, give the panel the
    title `Super User Access` and click `Save`:![Figure 14.53: Adding details to the
    dashboard panel'
  id: totrans-774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕顶部的“另存为”按钮，然后选择“仪表板”面板。当您看到此屏幕时，选择要添加到新仪表板的面板，并将其命名为“PTA监控”。还要给面板命名为“超级用户访问”，然后点击“保存”：![图14.53：向仪表板面板添加详细信息
- en: '](image/B15021_14_53.jpg)'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_53.jpg)'
- en: 'Figure 14.53: Adding details to the dashboard panel'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.53：向仪表板面板添加详细信息
- en: 'When you are presented with your new dashboard, click the `Edit` and `Add`
    panel buttons. Select `New` and then `Single Value` as the visualization type.
    Set `Content Title` to `Database Creation`. Add the `source="http:docker logs"
    AND postgres-test AND CREATE DATABASE | stats count` source string and click `Save`.
    This will search through your logs to show if anyone has created any databases
    on the PostgreSQL database, which should only happen when the app is set up and created:![Figure
    14.54: Editing the dashboard panel'
  id: totrans-777
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您看到新的仪表板时，点击“编辑”和“添加”面板按钮。选择“新建”，然后选择“单个值”作为可视化类型。将“内容标题”设置为“数据库创建”。添加“source="http:docker
    logs" AND postgres-test AND CREATE DATABASE | stats count”源字符串，然后点击“保存”。这将通过日志搜索以显示是否有人在PostgreSQL数据库上创建了任何数据库，这应该只在设置和创建应用程序时发生：![图14.54：编辑仪表板面板
- en: '](image/B15021_14_54.jpg)'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_54.jpg)'
- en: 'Figure 14.54: Editing the dashboard panel'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.54：编辑仪表板面板
- en: Again, click the `New Panel` button and select `New` and then `Column Chart`
    from the visualizations. Add a `Content Title` of `App Usage`, add the `source="http:docker
    logs" AND postgres-test AND SELECT AND photo_viewer_photo earliest=-60m | timechart
    span=1m count` search query, and click `Save`. This search will provide you with
    a count over time of people who are using the app to view your photos.
  id: totrans-780
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击“新面板”按钮，选择“新建”，然后从可视化中选择“柱状图”。添加一个“内容标题”为“应用使用情况”，添加“source="http:docker
    logs" AND postgres-test AND SELECT AND photo_viewer_photo earliest=-60m | timechart
    span=1m count”搜索查询，并点击“保存”。这个搜索将为您提供一段时间内使用应用程序查看照片的人数。
- en: 'Feel free to move the panels around the dashboard. When you are happy with
    the changes, click the `Save` button. Your dashboard should look similar to the following:![Figure
    14.55: New dashboard panel used to monitor PostgreSQL usage'
  id: totrans-781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随意移动仪表板上的面板。当您对更改感到满意时，点击“保存”按钮。您的仪表板应该看起来类似于以下内容：![图14.55：用于监视PostgreSQL使用情况的新仪表板面板
- en: '](image/B15021_14_55.jpg)'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_14_55.jpg)'
- en: 'Figure 14.55: New dashboard panel used to monitor PostgreSQL usage'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.55：用于监视PostgreSQL使用情况的新仪表板面板
- en: This activity helped you gather log data for your Panoramic Trekking App and
    display it in a more user-friendly fashion using Splunk.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动帮助您收集Panoramic Trekking App的日志数据，并使用Splunk以更用户友好的方式显示它。
- en: 15\. Extending Docker with Plugins
  id: totrans-785
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. 使用插件扩展Docker
- en: 'Activity 15.01: Installing WordPress with Network and Volume Plugins'
  id: totrans-786
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动15.01：使用网络和卷插件安装WordPress
- en: '**Solution:**'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'It is possible to create containers for the database and the WordPress blog
    using volume and networking plugins with the following steps:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下步骤使用卷和网络插件为数据库和WordPress博客创建容器：
- en: 'Create a network with the following command:'
  id: totrans-789
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个网络：
- en: '[PRE187]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'This command creates a network using the Weave Net plugin, specified with the
    `driver` flag. In addition, the volume is specified as `attachable`, which means
    you can connect to Docker containers in the future. Finally, the name of the container
    will be `wp-network`. You should get output like the following:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令使用Weave Net插件创建一个网络，并使用`driver`标志进行指定。此外，卷被指定为`attachable`，这意味着您可以在将来连接到Docker容器。最后，容器的名称将是`wp-network`。您应该得到以下输出：
- en: '[PRE188]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Create a volume with the following command:'
  id: totrans-793
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个卷：
- en: '[PRE189]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'This command creates a volume over SSH using the `vieux/sshfs` plugin. The
    name of the volume is `wp-content` and additional options are passed for the `ssh`
    command, port, and password:'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令使用`vieux/sshfs`插件通过SSH创建一个卷。卷的名称是`wp-content`，并传递了`ssh`命令、端口和密码的额外选项：
- en: '[PRE190]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'Create the `mysql` container with the following command:'
  id: totrans-797
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`mysql`容器：
- en: '[PRE191]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: This command runs the `mysql` container in detached mode, with the environment
    variables and the `wp-network` connection.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令以分离模式运行`mysql`容器，并使用环境变量和`wp-network`连接。
- en: 'Create the `wordpress` container with the following command:'
  id: totrans-800
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建`wordpress`容器：
- en: '[PRE192]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: This command runs the `wordpress` container in detached mode with the environment
    variables and the `wp-network` connection. In addition, port `80` of the container
    is available at port `8080` of the host system.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令以分离模式运行`wordpress`容器，并使用环境变量和`wp-network`连接。此外，容器的端口`80`在主机系统的端口`8080`上可用。
- en: 'With the successful start, you will have two containers running for `mysql`
    and `wordpress`:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 成功启动后，您将有两个运行中的`mysql`和`wordpress`容器：
- en: '[PRE193]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '![Figure 15.17: The WordPress and database containers'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.17：WordPress和数据库容器'
- en: '](image/B15021_15_15.jpg)'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_15.jpg)'
- en: 'Figure 15.17: The WordPress and database containers'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.17：WordPress和数据库容器
- en: 'Open `http://localhost:8080` in your browser to check the WordPress setup screen:![Figure
    15.18: WordPress setup screen'
  id: totrans-808
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:8080`，以检查WordPress设置屏幕：![图15.18：WordPress设置屏幕
- en: '](image/B15021_15_18.jpg)'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_18.jpg)'
- en: 'Figure 15.18: WordPress setup screen'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.18：WordPress设置屏幕
- en: The WordPress setup screen verifies that WordPress is installed using the network
    and volume plugins.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress设置屏幕验证了WordPress是否使用了网络和卷插件。
- en: In this activity, you have created a custom network using the Weave Net plugin
    and a custom volume using the `sshfs` plugin. You created a database container
    that uses the custom network and a WordPress container that uses the custom network
    and the custom volume. With a successful setup, your Docker containers connect
    with each other over custom networking and use the volume over SSH. With this
    activity, you have used Docker extensions for a real-life application. You can
    now confidently extend Docker with your custom business requirements and technologies.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，您使用Weave Net插件创建了一个自定义网络，并使用`sshfs`插件创建了一个自定义卷。您创建了一个使用自定义网络的数据库容器，以及一个使用自定义网络和自定义卷的WordPress容器。通过成功的设置，您的Docker容器可以通过自定义网络相互连接，并通过SSH使用卷。通过这个活动，您已经为一个真实的应用程序使用了Docker扩展。现在您可以自信地根据自己的业务需求和技术扩展Docker。
