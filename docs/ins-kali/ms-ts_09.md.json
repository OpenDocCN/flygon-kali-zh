["```ts\nInstall-package bootstrap\nInstall-package bootstrap.TypeScript.DefinitelyTyped\n\n```", "```ts\n{\n\"manufacturer\": \"JP Australia\",\n\"manufacturer_logo\": \"jp_australia_logo.png\",\n\"logo_class\" : \"\",\n\"boards\": [\n    {\n        \"name\": \"Radical Quad\",\n        \"board_types\": [ { \"board_type\": \"Wave\" } ],\n\n        \"description\": \"Radical Wave Board\",\n        \"image\": \"jp_windsurf_radicalquad_ov.png\",\n        \"long_description\": \"long desc goes here\",\n        \"sizes\": [\n            { \"volume\": 68, \"length\": 227, \n              \"width\": 53, \"sail_min\": \"< 5.0\", \"sail_max\": \"< 5.2\" }\n        ]\n    }]\n}\n```", "```ts\nexport interface IBoardType {\n    board_type: string;\n}\nexport interface IBoardSize {\n    volume: number;\n    length: number;\n    width: number;\n    sail_min: string;\n    sail_max: string;\n}\nexport interface IBoardModel {\n    name: string;\n    board_types: IBoardType[];\n    description: string;\n    image: string;\n    long_description: string;\n    sizes: IBoardSize[];\n}\nexport interface IManufacturerModel {\n    manufacturer: string;\n    manufacturer_logo: string;\n    logo_class: string;\n    boards: IBoardModel[];\n}\n```", "```ts\nexport class BoardType extends Backbone.Model\n    implements IBoardType {\n    get board_type() { return this.get('board_type'); }\n    set board_type(val: string) { this.set('board_type', val); }\n}\nexport class BoardSize extends Backbone.Model \n    implements IBoardSize {\n    get volume() { return this.get('volume');}\n    set volume(val: number) { this.set('volume', val); }\n    // more properties\n}\nexport class BoardModel extends Backbone.Model implements IBoardModel {\n    get name() { return this.get('name'); }\n    set name(val: string) { this.set('name', val); }\n    // more properties\n    get sizes() { return this.get('sizes'); }\n    set sizes(val: IBoardSize[]) { this.set('sizes', val); }\n}\nexport class ManufacturerModel extends Backbone.Model implements IManufacturerModel {\n    get manufacturer() { return this.get('manufacturer'); }\n    set manufacturer(val: string) { this.set('manufacturer', val); }\n    // more properties\n    get boards() { return this.get('boards'); }\n    set boards(val: IBoardModel[]) { this.set('boards', val); }\n}\n```", "```ts\nit(\"should build a BoardType\", () => {\n    var boardType = new bm.BoardType(\n        { board_type: \"testBoardType\" });\n    expect(boardType.board_type).toBe(\"testBoardType\");\n});\n```", "```ts\ndescribe(\"BoardSize tests\", () => {\n    var boardSize: bm.IBoardSize;\n    beforeAll(() => {\n        boardSize = new bm.BoardSize(\n          { \"volume\": 74, \"length\": 227,\n            \"width\": 55, \"sail_min\": \"4.0\", \"sail_max\": \"5.2\" });\n    });\n    it(\"should build a board size object\",() => {\n        expect(boardSize.volume).toBe(74);\n    });\n});\n```", "```ts\ndescribe(\"BoardModel tests\",() => {\n    var board: bm.IBoardModel;\n    beforeAll(() => {\n        board = new bm.BoardModel({\n            \"name\": \"Thruster Quad\",\n            \"board_types\": [{ \"board_type\": \"Wave\" }],\n            \"description\": \"Allround Wave Board\",\n            \"image\": \"windsurf_thrusterquad_ov.png\",\n            \"long_description\": \n                \"Shaper Werner Gnigler and pro riders Robby Swift\",\n            \"sizes\": [\n                { \"volume\": 73, \"length\": 228, \"width\": 55.5,\n                     \"sail_min\": \"4.0\", \"sail_max\": \"5.2\" }\n            ]\n        });\n    });\n\n    it(\"should find name property\",() => {\n        expect(board.name).toBe(\"Thruster Quad\");\n    });\n    it(\"should find sizes[0].volume property\",() => {\n        expect(board.sizes[0].volume).toBe(73);\n    });\n    it(\"should find sizes[0].sail_max property\",() => {\n        expect(board.sizes[0].sail_max).toBe(\"5.2\");\n    });\n    it(\"should find board_types[0].sail_max property\",() => {\n        expect(board.board_types[0].board_type).toBe(\"Wave\");\n    });\n});\n```", "```ts\nexport class ManufacturerCollection \n    extends Backbone.Collection<ManufacturerModel>\n{\n    model = ManufacturerModel;\n    url = \"/tscode/boards.json\";\n}\n```", "```ts\ndescribe(\"ManufacturerCollection tests\", () => {\n    var manufacturers: bm.ManufacturerCollection;\n\n    beforeAll(() => {\n        manufacturers = new bm.ManufacturerCollection();\n        manufacturers.fetch({ async: false });\n    });\n\n    it(\"should load 3 manufacturers\", () => {\n        expect(manufacturers.length).toBe(3);\n    });\n\n    it(\"should find manufacturers.at(2)\",() => {\n        expect(manufacturers.at(2).manufacturer)\n           .toBe(\"Starboard\");\n    });\n}\n```", "```ts\nexport enum FilterType {\n    Manufacturer,\n    BoardType,\n    None\n}\nexport interface IFilterValue {\n    filterValue: string;\n}\nexport interface IFilterModel {\n    filterType: FilterType;\n    filterName: string;\n    filterValues: IFilterValue[];\n}\n```", "```ts\nexport interface IFilterProvider {\n    findManufacturerNames(): bm.IManufacturerName[];\n    findBoardTypes(): string[]\n}\n```", "```ts\nexport interface IManufacturerName {\n    manufacturer: string;\n    manufacturer_logo: string;\n}\n```", "```ts\nit(\"should return manufacturer names \",() => {\n    var results: bm.IManufacturerName[] = \n        manufacturers.findManufacturerNames();\n    expect(results.length).toBe(3);\n    expect(results[0].manufacturer).toBe(\"JP Australia\");\n});\n```", "```ts\npublic findManufacturerNames(): IManufacturerName[] {\n    var items = _(this.models).map((iterator) => {\n        return {\n            'manufacturer': iterator.manufacturer,\n            'manufacturer_logo': iterator.manufacturer_logo\n        };\n    });\n    return items;\n}\n```", "```ts\nit(\"should find board types \",() => {\n    var results: string[] = manufacturers.findBoardTypes();\n    expect(results.length).toBe(3);\n    expect(results).toContain(\"Wave\");\n    expect(results).toContain(\"Freestyle\");\n    expect(results).toContain(\"Slalom\");\n});\n```", "```ts\npublic findBoardTypes(): string[] {\n    var boardTypes = new Array<string>();\n    _(this.models).each((manufacturer) => {\n        _(manufacturer.boards).each((board) => {\n            _(board.board_types).each((boardType) => {\n                if (! _.contains(\n                    boardTypes, boardType.board_type)) {\n                        boardTypes.push(boardType.board_type);\n                }\n            });\n        });\n    });\n    return boardTypes;\n}\n```", "```ts\nit(\"should filter by manufacturer name \",() => {\n    var results = manufacturers.filterByManufacturer(\"RRD\");\n    expect(results.length).toBe(1);\n});\n```", "```ts\npublic filterByManufacturer(manufacturer_name: string) {\n    return _(this.models).filter((item) => {\n        return item.manufacturer === manufacturer_name;\n    });\n}\n```", "```ts\nit(\"should only return Slalom boards \",() => {\n    var results = manufacturers.filterByBoardType(\"Slalom\");\n    expect(results.length).toBe(2);\n    _(results).each((manufacturer) => {\n        _(manufacturer.boards).each((board) => {\n            expect(_(board.board_types).some((boardType) => {\n                return boardType.board_type == 'Slalom';\n            })).toBeTruthy(); \n\n        });\n    });\n});\n```", "```ts\npublic filterByBoardType(board_type: string) {\n    var manufWithBoard = new Array();\n    _(this.models).each((manuf) => { \n        var hasBoardtype = false;\n        var boardMatches = new Array();\n        _(manuf.boards).each((board) => {\n            var match = _(board.board_types).some((item) => {\n                return item.board_type == board_type;\n            });\n            if (match) {\n                boardMatches.push(new BoardModel(board));\n                hasBoardtype = true;\n            }\n        });\n\n        if (hasBoardtype) {\n            var manufFiltered = new ManufacturerModel(manuf);\n            manufFiltered.set('boards', boardMatches);\n            manufWithBoard.push(manufFiltered);\n        }\n    });\n    return manufWithBoard;\n}\n```", "```ts\nexport class BoardSalesApp extends Marionette.Application {\n    viewLayout: pvl.PageViewLayout;\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n        super();\n        this.viewLayout = new pvl.PageViewLayout();\n    }\n    onStart() {\n        this.viewLayout.render();\n    }\n}\n```", "```ts\nexport class PageViewLayout extends Marionette.LayoutView<Backbone.Model> {\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n        options.el = '#page_wrapper';\n        var snippetService: ISnippetService = \n            TypeScriptTinyIoC.resolve(IISnippetService);\n        options.template = snippetService.retrieveSnippet(\n            SnippetKey.PAGE_VIEW_LAYOUT_SNIPPET);\n        super(options);\n    }\n}\n```", "```ts\n<!DOCTYPE html>\n<html >\n<head>\n    <title>BoardSales</title>\n    <link rel=\"stylesheet\" href=\"/Content/bootstrap.css\" />\n    <link rel=\"stylesheet\" type=\"text/css\"\n          href=\"/Content/app.css\">\n    <script type=\"text/javascript\"\n            src=\"img/head-1.0.3.js\"></script>\n    <script data-main=\"/tscode/app/AppConfig\"\n            type=\"text/javascript\"\n            src=\"img/require.js\"></script>\n</head>\n<body>\n    <div id=\"page_wrapper\">\n\n    </div>\n    <footer class=\"footer footer_style\">\n        <div class=\"container\">\n            <p class=\"text-muted\"><small>Footer</small></p>\n        </div>\n\n    </footer>\n</body>\n</html>\n```", "```ts\n<div id=\"page_wrapper\">\n    <div id=\"main_panel_div\">\n            <div class=\"carousel-inner\" >\n                <div id=\"carousel_panel_1\" >\n                    <div id=\"content_panel_left\" >\n                            <!--filter panel goes here-->\n                    </div>\n                    <div id=\"content_panel_main\">\n                      <div id=\"manufacturer_collection\">\n                            <!--board list goes here-->\n                        </div>\n                    </div>\n                </div>\n                <div id=\"carousel_panel_2\">\n                        <!--board detail panel goes here-->\n                </div>\n            </div>\n    </div>\n</div>\n```", "```ts\nrequire([\n    'BoardSalesApp', 'tinyioc', 'snippetservice'\n    ,'text!/tscode/app/views/PageViewLayout.html' ],\n    (app, tinyioc, snippetservice, pageViewLayoutSnippet) => {\n\n     var snippetService = new SnippetService();\n     snippetService.storeSnippet(\n          SnippetKey.PAGE_VIEW_LAYOUT_SNIPPET,\n          pageViewLayoutSnippet);\n     TypeScriptTinyIoC.register(snippetService, IISnippetService);\n\n     var boardSalesApp = new app.BoardSalesApp();\n     boardSalesApp.start();\n\n    });\n```", "```ts\nexport class BoardSalesApp extends Marionette.Application {\n    viewLayout: pvl.PageViewLayout;\n    _manufCollection: bm.ManufacturerCollection;\n\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n        super();\n        _.bindAll(this, 'CollectionLoaded');\n        _.bindAll(this, 'CollectionLoadError');\n        this.viewLayout = new pvl.PageViewLayout();\n    }\n\n    onStart() {\n        this.viewLayout.render();\n        this._manufCollection = new bm.ManufacturerCollection();\n        TypeScriptTinyIoC.register(this._manufCollection, \n            bm.IIManufacturerCollection);\n        this._manufCollection.fetch({ \n            success: this.CollectionLoaded, \n            error: this.CollectionLoadError });\n    }\n\n    CollectionLoaded() {\n        TypeScriptTinyIoC.raiseEvent(\n            new ev.NotifyEvent(\n                ev.EventType.ManufacturerDataLoaded), ev.IINotifyEvent);\n    }\n\n    CollectionLoadError(err) {\n        TypeScriptTinyIoC.raiseEvent(\n           new ev.ErrorEvent(err), ev.IIErrorEvent);\n    }\n}\n```", "```ts\nexport interface IManufacturerCollection {\n    models: ManufacturerModel[];\n}\nexport class IIManufacturerCollection implements IInterfaceChecker {\n    propertyNames = ['models'];\n    className = 'IIManufacturerCollection';\n}\n```", "```ts\nexport class ManufacturerCollection extends Backbone.Collection<ManufacturerModel>\n    implements IManufacturerCollection\n{\n    // existing code\n}\n```", "```ts\nexport enum EventType {\n    ManufacturerDataLoaded,\n    ErrorEvent\n}\nexport interface INotifyEvent {\n    eventType: EventType;\n}\nexport interface INotifyEvent_Handler {\n    handle_NotifyEvent(event: INotifyEvent): void;\n}\n```", "```ts\nexport interface IErrorEvent extends INotifyEvent {\n    errorMessage: string;\n}\nexport interface IErrorEvent_Handler {\n    handle_ErrorEvent(event: IErrorEvent);\n}\n```", "```ts\nexport class PageViewLayout extends Marionette.LayoutView<Backbone.Model>\n    implements ev.INotifyEvent_Handler\n{\n\n    private _manufacturerView: mv.ManufacturerCollectionView;\n\n    constructor(options?: any) {\n        // exising code\n        _.bindAll(this, 'handle_NotifyEvent');\n        TypeScriptTinyIoC.registerHandler(\n            this, ev.IINotifyEvent_Handler, ev.IINotifyEvent);\n    }\n    handle_NotifyEvent(event: ev.INotifyEvent) {\n        if (event.eventType == ev.EventType.ManufacturerDataLoaded) \n        {\n            this._manufacturerView =\n                new mv.ManufacturerCollectionView();\n            this._manufacturerView.render();\n        }\n    }\n}\n```", "```ts\nexport class ManufacturerCollectionView\n    extends Marionette.CollectionView<bm.ManufacturerModel> {\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n        options.el = '#manufacturer_collection';\n        options.className = \"row board_row\";\n\n        super(options);\n        this.childView = ManufacturerView;\n\n        var manufColl: bm.IManufacturerCollection = \n           TypeScriptTinyIoC.resolve(bm.IIManufacturerCollection);\n        if (!options.collection) {\n            this.collection = <Backbone.Collection<bm.ManufacturerModel>> manufColl;\n        } else {\n            this.collection = options.collection;\n        }\n    }\n}\n```", "```ts\nexport class ManufacturerView\n    extends Marionette.CompositeView<Backbone.Model> {\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n        options.template = _.template('<div></div>');\n        super(options);\n        this.collection = new Backbone.Collection(\n            this.model.get('boards')\n        );\n        this.childView = BoardView;\n        this.childViewOptions = { \n            parentIcon: this.model.get('manufacturer_logo')\n        };\n    }\n}\n```", "```ts\nexport class BoardView\n    extends Marionette.CompositeView<bm.BoardModel> {\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n            var snippetService: ISnippetService =\n               TypeScriptTinyIoC.resolve(IISnippetService);\n            options.template = _.template(\n               snippetService.retrieveSnippet(\n                  SnippetKey.BOARD_VIEW_SNIPPET)\n            );\n        super(options);\n\n        this.model.set('parentIcon', options.parentIcon);\n\n         this.collection =\n            <any>(new Backbone.Collection(\n                this.model.get('sizes')));\n        this.childView = BoardSizeView;\n        this.childViewContainer = 'tbody';\n\n        var snippetService: ISnippetService = \n             TypeScriptTinyIoC.resolve(IISnippetService);\n        this.childViewOptions = { \n             template: _.template(\n                  snippetService.retrieveSnippet(\n                      SnippetKey.BOARD_SIZE_MINI_VIEW_SNIPPET)\n                )\n        };\n\n    }\n\n}\n```", "```ts\nexport class BoardSizeView\n    extends Marionette.ItemView<bm.BoardSize> {\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n        super(options);\n    }\n}\n```", "```ts\n<div class=\"col-sm-4 board_panel\">\n    <div class=\"board_inner_panel\">\n         <div class=\"row board_title_row\">\n         <!- -some divs just for styling here -->\n            <%= name %>\n         <!- -some divs just for styling here -->\n            <%= description %>\n            <img src=\"img/<%= parentIcon %>\" />\n         </div>\n         <div class=\"row board_details_row\">\n            <a >\n                <img src=\"img/<%= image %>\" />\n            </a>\n         <!- -some divs just for styling here -->\n             Sizes:\n             <table>\n                <tbody></tbody>\n             </table>\n         </div>\n    </div>\n</div>\n```", "```ts\n<tr>\n    <td>&nbsp;</td>\n    <td><%= volume %> L</td>\n</tr>\n```", "```ts\nrequire([\n    'BoardSalesApp', 'tinyioc', 'snippetservice'\n    , 'text!/tscode/app/views/PageViewLayout.html'\n    , 'text!/tscode/app/views/BoardViewSnippet.html'\n    , 'text!/tscode/app/views/BoardSizeMiniViewSnippet.html'\n    ],(app, tinyioc, snippetservice, pageViewLayoutSnippet\n      , boardViewSnippet, bsMiniViewSnippet) => {\n\n        var snippetService = new SnippetService();\n        snippetService.storeSnippet(\n            SnippetKey.PAGE_VIEW_LAYOUT_SNIPPET,\n                pageViewLayoutSnippet);\n        snippetService.storeSnippet(\n            SnippetKey.BOARD_VIEW_SNIPPET, boardViewSnippet);\n        snippetService.storeSnippet(\n            SnippetKey.BOARD_SIZE_MINI_VIEW_SNIPPET,\n                bsMiniViewSnippet);\n\n        var boardSalesApp = new app.BoardSalesApp();\n        boardSalesApp.start();\n\n    });\n```", "```ts\nexport interface IFilterProvider {\n    findManufacturerNames(): bm.IManufacturerName[];\n    findBoardTypes(): string[]\n}\nexport class IIFilterProvider implements IInterfaceChecker {\n    methodNames = ['findManufacturerNames', 'findBoardTypes'];\n    className = 'IIFilterProvider';\n}\n```", "```ts\nexport class ManufacturerCollection extends Backbone.Collection<ManufacturerModel>\n    implements IManufacturerCollection, fm.IFilterProvider\n{\n    // existing code\n}\n```", "```ts\nonStart() {\n        this.viewLayout.render();\n        this._manufCollection = new bm.ManufacturerCollection();\n        TypeScriptTinyIoC.register(this._manufCollection, bm.IIManufacturerCollection);\n        TypeScriptTinyIoC.register(this._manufCollection,\n            fm.IIFilterProvider);\n        this._manufCollection.fetch({ \n            success: this.CollectionLoaded, error: this.CollectionLoadError });\n}\n```", "```ts\nexport class FilterCollection extends Backbone.Collection<FilterModel> {\n    model = FilterModel;\n\n    private _filterProvider: IFilterProvider;\n    constructor(options?: any) {\n        super(options);\n        try {\n            this._filterProvider = \n            TypeScriptTinyIoC.resolve(IIFilterProvider);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}\n```", "```ts\nclass MockFilterProvider implements fm.IFilterProvider {\n    findManufacturerNames(): bm.IManufacturerName[] {\n        return [ \n        { manufacturer: 'testManuf1',\n          manufacturer_logo: 'testLogo1'}, { manufacturer: 'testManuf2',\n          manufacturer_logo: 'testLogo2' }\n        ];\n    }\n    findBoardTypes(): string[] {\n        return ['boardType1', 'boardType2', 'boardType3'];\n    }\n}\ndescribe('/tscode/tests/models/FilterModelTests',() => {\n    beforeAll(() => {\n        var mockFilterProvider = new MockFilterProvider();\n        TypeScriptTinyIoC.register(\n            mockFilterProvider, fm.IIFilterProvider);\n    });\n});\n```", "```ts\ndescribe(\"FilterCollection tests\",() => {\n    var filterCollection: fm.FilterCollection;\n    beforeAll(() => {\n        filterCollection = new fm.FilterCollection();\n        filterCollection.buildFilterCollection();\n    });\n\n    it(\"should have two manufacturers\", () => {\n        var manufFilter = filterCollection.at(0);\n        expect(manufFilter.filterType)\n           .toBe(fm.FilterType.Manufacturer);\n        expect(manufFilter.filterValues[0].filterValue)\n           .toContain('testManuf1');\n    });\n\n    it(\"should have two board types\",() => {\n        var manufFilter = filterCollection.at(1);\n        expect(manufFilter.filterType)\n           .toBe(fm.FilterType.BoardType);\n        expect(manufFilter.filterValues[0].filterValue)\n           .toContain('boardType1');\n    });\n});\n```", "```ts\nbuildFilterCollection() {\n    // build Manufacturer filter.\n    var manufFilter = new FilterModel({\n        filterType: FilterType.Manufacturer,\n        filterName: \"Manufacturer\"\n    });\n    var manufArray = new Array<FilterValue>();\n    if (this._filterProvider) {\n        _(this._filterProvider.findManufacturerNames())\n            .each((manuf) => {\n                manufArray.push(new FilterValue(\n                    { filterValue: manuf.manufacturer }));\n        });\n        manufFilter.filterValues = manufArray;\n    }\n    this.push(manufFilter);\n    // build Board filter.\n    var boardFilter = new FilterModel({\n        filterType: FilterType.BoardType,\n        filterName: \"Board Type\"\n    });\n\tvar boardTypeArray = new Array<FilterValue>();\n    if (this._filterProvider) {\n        _(this._filterProvider.findBoardTypes()).each((boardType) =>\n        {\n            boardTypeArray.push(new FilterValue(\n                { filterValue: boardType }));\n        });\n        boardFilter.filterValues = boardTypeArray;\n    }\n    this.push(boardFilter);\n    // build All filter to clear filters.\n    var noFilter = new FilterModel({\n        filterType: FilterType.None,\n        filterName: \"All\"\n    });\n    var noTypeArray = new Array<FilterValue>();\n    noTypeArray.push(new FilterValue({ filterValue: \"Show All\" }));\n    noFilter.filterValues = noTypeArray;\n    this.push(noFilter);\n}\n```", "```ts\nexport class FilterItemView\n    extends Marionette.ItemView<fm.FilterValue> {\n    private _filterType: number;\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n        options.tagName = \"li\";\n        options.template = \n            _.template('<a><%= filterValue %></a>');\n\n        options.events = { click: 'filterClicked' };\n        this._filterType = options.filterType;\n        super(options);\n        _.bindAll(this, 'filterClicked');\n\n    }\n    filterClicked() {\n        TypeScriptTinyIoC.raiseEvent(\n            new bae.FilterEvent(\n                this.model.get('filterValue'),\n                    this._filterType),\n            bae.IIFilterEvent);\n    }\n}\n```", "```ts\nexport interface IFilterEvent {\n    filterType: fm.FilterType;\n    filterName: string;\n}\nexport interface IFilterEvent_Handler {\n    handle_FilterEvent(event: IFilterEvent);\n}\n```", "```ts\nhandle_FilterEvent(event: ev.IFilterEvent) {\n\n    var mainCollection: bm.ManufacturerCollection =\n        TypeScriptTinyIoC.resolve(bm.IIManufacturerCollection);\n    var filteredCollection;\n    if (event.filterType == fm.FilterType.BoardType)\n        filteredCollection = new bm.ManufacturerCollection(\n            mainCollection.filterByBoardType(event.filterName));\n    else if (event.filterType == fm.FilterType.Manufacturer)\n        filteredCollection = new bm.ManufacturerCollection(\n            mainCollection.filterByManufacturer(event.filterName));\n    else if (event.filterType == fm.FilterType.None)\n        filteredCollection = mainCollection;\n\n    this._manufacturerView.collection = filteredCollection;\n    this._manufacturerView.render();\n}\n```", "```ts\nexport class BoardView\n    extends Marionette.CompositeView<bm.BoardModel> {\n    constructor(options?: any) {\n        // existing code\n        options.events = {\n            \"click\": this.onClicked,\n        };\n\n        super(options);\n\n        // existing code\n        _.bindAll(this, 'onClicked');\n    }\n\n    onClicked() {\n        this.$el.find('.board_inner_panel').flip({\n            direction: 'lr',\n            speed: 100,\n            onEnd: () => {\n            TypeScriptTinyIoC.raiseEvent(\n                new bae.BoardSelectedEvent(this.model),\n                    bae.IIBoardSelectedEvent);\n            }\n        });\n    }\n}\n```", "```ts\nexport interface IBoardSelectEvent {\n    selectedBoard: bm.BoardModel;\n}\nexport interface IBoardSelectedEvent_Handler {\n    handle_BoardSelectedEvent(event: IBoardSelectEvent);\n}\n```", "```ts\nexport class PageViewLayout extends Marionette.LayoutView<Backbone.Model>\n    implements ev.INotifyEvent_Handler,\n    ev.IBoardSelectedEvent_Handler,\n    ev.IFilterEvent_Handler\n{\n    // existing code\n    constructor(options?: any) {\n        // existing code\n        _.bindAll(this, 'handle_NotifyEvent');\n        _.bindAll(this, 'handle_BoardSelectedEvent');\n        TypeScriptTinyIoC.registerHandler(this, ev.IINotifyEvent_Handler, ev.IINotifyEvent);\n        TypeScriptTinyIoC.registerHandler(this,\n            ev.IIBoardSelectedEvent_Handler,\n            ev.IIBoardSelectedEvent);\n    }\n    handle_BoardSelectedEvent(event: ev.IBoardSelectEvent) {\n        var boardDetailView = new bdv.BoardDetailView(\n            { model: event.selectedBoard });\n        boardDetailView.render();\n    }\n}\n```", "```ts\nexport class BoardDetailView\n    extends Marionette.CompositeView<bm.BoardSize> {\n    constructor(options?: any) {\n        if (!options)\n            options = {};\n\n        options.el = \"#board_detail_view\";\n        var snippetService: ISnippetService = \n            TypeScriptTinyIoC.resolve(IISnippetService);\n        options.template = _.template(\n            snippetService.retrieveSnippet(\n                SnippetKey.BOARD_DETAIL_VIEW_SNIPPET));\n\n        super(options);\n\n        this.collection = <any>(\n            new Backbone.Collection(this.model.get('sizes')));\n        this.childView = mv.BoardSizeView;\n        this.childViewContainer = 'tbody';\n\n        var snippetService: ISnippetService = \n            TypeScriptTinyIoC.resolve(IISnippetService);\n        this.childViewOptions = { \n               template: _.template(\n                  snippetService.retrieveSnippet(\n                    SnippetKey.BOARD_SIZE_VIEW_SNIPPET)), tagName: 'tr'\n        };\n    }\n\n}\n```", "```ts\nexport enum StateType {\n    BoardListOnly,\n    BoardListWithFilter,\n    BoardDetail,\n}\nexport enum PanelType { Initial, Secondary }\nexport interface IState {\n    getPanelType(): PanelType;\n    getStateType(): StateType;\n    getShowFilterClass(): string;\n    isFilterPanelVisible(): boolean;\n}\nexport class State {\n    private _mediator: sm.Mediator;\n    constructor(mediator: sm.Mediator) {\n        this._mediator = mediator;\n    }\n}\n```", "```ts\nexport class BoardListOnlyState\n    extends ss.State\n    implements ss.IState {\n    constructor(mediator: sm.Mediator) {\n        super(mediator);\n    }\n    getPanelType(): ss.PanelType {\n        return ss.PanelType.Initial;\n    }\n    getShowFilterClass() {\n        return \"glyphicon-chevron-right\";\n    }\n    isFilterPanelVisible(): boolean {\n        return false;\n    }\n    getStateType(): ss.StateType {\n        return ss.StateType.BoardListOnly;\n    }\n}\n```", "```ts\nexport class BoardListWithFilterPanelState\n    extends ss.State \n    implements ss.IState {\n    constructor(mediator: sm.Mediator) {\n        super(mediator);\n    }\n    getPanelType(): ss.PanelType {\n        return ss.PanelType.Initial;\n    }\n    getShowFilterClass() {\n        return \"glyphicon-chevron-left\";\n    }\n    isFilterPanelVisible(): boolean {\n        return true;\n    }\n    getStateType(): ss.StateType {\n        return ss.StateType.BoardListWithFilter;\n    }\n}\n```", "```ts\nexport class DetailPanelState\n    extends ss.State\n    implements ss.IState {\n    constructor(mediator: sm.Mediator) {\n        super(mediator);\n    }\n    getPanelType(): ss.PanelType {\n        return ss.PanelType.Secondary;\n    }\n    getShowFilterClass() {\n        return \"\";\n    }\n    isFilterPanelVisible(): boolean {\n        return false;\n    }\n    getStateType(): ss.StateType {\n        return ss.StateType.BoardDetail;\n    }\n}\n```", "```ts\nexport interface IMediatorFunctions {\n    showLeftPanel();\n    hideLeftPanel();\n    cyclePanels(forwardOrNext: string);\n    showFilterButtonChangeClass(\n        fromClass: string, toClass: string\n    );\n}\n```", "```ts\nexport class Mediator {\n    private _currentState: ss.IState;\n    private _currentMainPanelState: ss.IState;\n    private _pageViewLayout: IMediatorFunctions;\n    private _isMobile: boolean;\n\n    private _mainPanelState: as.BoardListOnlyState;\n    private _detailPanelState: as.DetailPanelState;\n    private _filterPanelState: as.BoardListWithFilterPanelState;\n\n    constructor(pageViewLayout: IMediatorFunctions,\n        isMobile: boolean) {\n        this._pageViewLayout = pageViewLayout;\n        this._isMobile = isMobile;\n\n        this._mainPanelState = new as.BoardListOnlyState(this);\n        this._detailPanelState = new as.DetailPanelState(this);\n        this._filterPanelState = new as.BoardListWithFilterPanelState(this);\n\n        if (this._isMobile)\n            this._currentState = this._mainPanelState;\n        else\n            this._currentState = this._filterPanelState;\n        this._currentMainPanelState = this._currentState;\n    }\n}\n```", "```ts\nprivate getNextState(stateType: ss.StateType): ss.IState {\n    var nextState: ss.IState;\n    switch (stateType) {\n       case ss.StateType.BoardDetail:\n            nextState = this._detailPanelState;\n            break;\n        case ss.StateType.BoardListOnly:\n            nextState = this._mainPanelState;\n            break;\n        case ss.StateType.BoardListWithFilter:\n            nextState = this._filterPanelState;\n    }\n    return nextState;\n}\n```", "```ts\npublic moveToState(stateType: ss.StateType) {\n    var previousState = this._currentState;\n    var nextState = this.getNextState(stateType);\n\n    if (previousState.getPanelType() == ss.PanelType.Initial &&\n        nextState.getPanelType() == ss.PanelType.Secondary) {\n        this._pageViewLayout.hideLeftPanel();\n        this._pageViewLayout.cyclePanels('next');\n    }\n\n    if (previousState.getPanelType() == ss.PanelType.Secondary &&\n        nextState.getPanelType() == ss.PanelType.Initial) {\n        this._pageViewLayout.cyclePanels('prev');\n    }\n\n    this._pageViewLayout.showFilterButtonChangeClass(\n        previousState.getShowFilterClass(),\n        nextState.getShowFilterClass()\n    );\n\n    if (nextState.isFilterPanelVisible())\n        this._pageViewLayout.showLeftPanel();\n    else\n        this._pageViewLayout.hideLeftPanel();\n\n    this._currentState = nextState;\n    if (this._currentState.getStateType() == ss.StateType.BoardListOnly \n       || this._currentState.getStateType() == ss.StateType.BoardListWithFilter)\n        this._currentMainPanelState = this._currentState;\n}\n```", "```ts\npublic showHideFilterButtonClicked() {\n    switch (this._currentState.getStateType()) {\n        case ss.StateType.BoardListWithFilter:\n            this.moveToState(ss.StateType.BoardListOnly);\n            break;\n        case ss.StateType.BoardListOnly:\n            this.moveToState(ss.StateType.BoardListWithFilter);\n            break;\n    }\n}\n\npublic getCurrentMainPanelState(): ss.IState {\n    return this._currentMainPanelState;\n}\n```", "```ts\nexport class PageViewLayout extends\n    Marionette.LayoutView<Backbone.Model>\n    implements ev.INotifyEvent_Handler,\n    ev.IBoardSelectedEvent_Handler,\n    ev.IFilterEvent_Handler,\n    sm.IMediatorFunctions\n{\n    private _mediator: sm.Mediator;\n    constructor(options?: any) {\n        // existing code\n        options.events = {\n             \"click #show_filter_button\": \n             this.showHideFilterButtonClicked\n           };\n        // existing code\n        var isMobile = $('html').hasClass('mobile');\n        this._mediator = new sm.Mediator(this, isMobile);\n        // existing code\n    }\n    // existing functions\n    showLeftPanel() {\n        $('#content_panel_left')\n            .removeClass('sidebar_panel_push_to_left');\n        $('#content_panel_main')\n            .removeClass('main_panel_push_to_left');\n    }\n    hideLeftPanel() {\n        $('#content_panel_left')\n            .addClass('sidebar_panel_push_to_left');\n        $('#content_panel_main')\n            .addClass('main_panel_push_to_left');\n    }\n    cyclePanels(forwardOrNext: string) {\n      $('#carousel-main-container').carousel(forwardOrNext);\n    }\n    showFilterButtonChangeClass(\n       fromClass: string, toClass: string) {\n           $('#show_filter_button')\n            .removeClass(fromClass).addClass(toClass);\n    }\n    showHideFilterButtonClicked() {\n      this._mediator.showHideFilterButtonClicked();\n    }\n    // existing functions\n}\n```", "```ts\nhandle_NotifyEvent(event: ev.INotifyEvent) {\n    if (event.eventType == ev.EventType.ManufacturerDataLoaded) {\n        // existing code\n        this._manufacturerView =\n            new mv.ManufacturerCollectionView();\n        this._manufacturerView.render();\n\n        this._mediator.moveToState(\n            this._mediator\n                .getCurrentMainPanelState().getStateType()\n              );\n    }\n    if (event.eventType == ev.EventType.BoardDetailBackClicked) {\n        this._mediator.moveToState(\n            this._mediator.getCurrentMainPanelState()\n               .getStateType()\n            );\n    }\n}\n```", "```ts\nhandle_BoardSelectedEvent(event: ev.IBoardSelectEvent) {\n    var boardDetailView = new bdv.BoardDetailView(\n       { model: event.selectedBoard });\n    boardDetailView.render();\n\n    this._mediator.moveToState(ss.StateType.BoardDetail);\n}\n```", "```ts\nexport class BoardDetailView\n    extends Marionette.CompositeView<bm.BoardSize> {\n    constructor(options?: any) {\n        // existing code\n        options.events = {\n            \"click #prev_button\": this.onPrev\n           };\n        super(options);\n        // existing code\n    }\n\n    onPrev() {\n        TypeScriptTinyIoC.raiseEvent(\n            new bae.NotifyEvent(bae.EventType.BoardDetailBackClicked),\n            bae.IINotifyEvent);\n    }\n}\n```"]