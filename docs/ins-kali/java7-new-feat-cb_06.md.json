["```java\n    public static void main(String[] args) throws IOException {\n    Path path = Paths.get(\"/home/docs/users.txt\");\n    byte[] contents = Files.readAllBytes(path);\n    for (byte b : contents) {\n    System.out.print((char)b);\n    }\n    }\n\n    ```", "```java\nPath newPath = Paths.get(\"/home/docs/newUsers.txt\");\nbyte[] newContents = \"Christopher\".getBytes();\n\n```", "```java\nFiles.write(newPath, contents, StandardOpenOption.CREATE);\nFiles.write(newPath, newContents, StandardOpenOption.APPEND);\n\n```", "```java\ntry {\nPath path = Paths.get(\"/home/docs/users.txt\");\nList<String> contents = Files.readAllLines(path, Charset.defaultCharset());\nfor (String b : contents) {\nSystem.out.println(b);\n}\n} catch (IOException e) {\ne.printStackTrace();\n}\n\n```", "```java\nBob\nMary\nSally\nTom\nTed\n\n```", "```java\n    public static void main(String[] args) throws IOException {\n    Path path = Paths.get(\"/home/docs/users.txt\");\n    Charset charset = Charset.forName(\"ISO-8859-1\");\n    try (BufferedReader reader = Files.newBufferedReader(path, charset)) {\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n    System.out.println(line);\n    }\n    }\n\n    ```", "```java\n    Bob\n    Mary\n    Sally\n    Tom\n    Ted\n\n    ```", "```java\nString newName = \"Vivian\";\nPath file = Paths.get(\"/home/docs/users.txt\");\ntry (BufferedWriter writer = Files.newBufferedWriter(file, Charset.defaultCharset(), StandardOpenOption.APPEND)) {\nwriter.newLine();\nwriter.write(newName, 0, newName.length());\n}\n\n```", "```java\nPath file = Paths.get(\"/home/docs/users.txt\");\nPath newFile = Paths.get(\"/home/docs/newUsers.txt\");\ntry (InputStream in = Files.newInputStream(file);\nOutputStream out = Files.newOutputStream( newFile,StandardOpenOption.CREATE, StandardOpenOption.APPEND)) {\nint data = in.read();\nwhile (data != -1){\nout.write(data);\ndata = in.read();\nfileunbuffered IO}\n}\n\n```", "```java\n    public static void main(String[] args) throws IOException {\n    int bufferSize = 8;\n    Path path = Paths.get(\"/home/docs/users.txt\");\n    try (SeekableByteChannel sbc = Files.newByteChannel(path)) {\n    ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n    sbc.position(4);\n    sbc.read(buffer);\n    for(int i=0; i<5; i++) {\n    System.out.print((char)buffer.get(i));\n    }\n    System.out.println();\n    buffer.clear();\n    sbc.position(0);\n    sbc.read(buffer);\n    for(int i=0; i<4; i++) {\n    System.out.print((char)buffer.get(i));\n    }\n    System.out.println();\n    }\n    }\n\n    ```", "```java\n    Bob\n    Mary\n    Sally\n    Tom\n    Ted\n\n    ```", "```java\n    Mary\n    Bob\n\n    ```", "```java\n// Read the entire file\nSystem.out.println(\"Contents of File\");\nsbc.position(0);\nbuffer = ByteBuffer.allocate(bufferSize);\nString encoding = System.getProperty(\"file.encoding\");\nint numberOfBytesRead = sbc.read(buffer);\nSystem.out.println(\"Number of bytes read: \" + numberOfBytesRead);\nwhile (numberOfBytesRead > 0) {\nbuffer.rewind();\nSystem.out.print(\"[\" + Charset.forName(encoding). decode(buffer) + \"]\");\nbuffer.flip();\nnumberOfBytesRead = sbc.read(buffer);\nSystem.out.println(\"\\nNumber of bytes read: \" + numberOfBytesRead);\n}\n\n```", "```java\nContents of File\nNumber of bytes read: 8\n[Bob\nMar]\nNumber of bytes read: 8\n[y\nSally]\nNumber of bytes read: 8\n[\nTom\nT]\nNumber of bytes read: 2\n[edTom\nT]\nNumber of bytes read: -1\n\n```", "```java\nfinal String newLine = System.getProperty(\"line.separator\");\ntry (SeekableByteChannel sbc = Files.newByteChannel(path, StandardOpenOption.APPEND)) {\nString output = newLine + \"Paul\" + newLine + \"Carol\" + newLine + \"Fred\";\nByteBuffer buffer = ByteBuffer.wrap(output.getBytes());\nsbc.write(buffer);\n}\n\n```", "```java\nBob\nMary\nSally\nTom\nTed\n\n```", "```java\nBob\nMary\nSally\nTom\nTed\nPaul\nCarol\nFred \n\n```", "```java\nPath path = Paths.get(\"/home/docs/users.txt\");\nfinal String newLine = System.getProperty(\"line.separator\");\ntry (SeekableByteChannel sbc = Files.newByteChannel(path, StandardOpenOption.WRITE)) {\nByteBuffer buffer;\nlong position = sbc.size();\nsbc.position(position);\nSystem.out.println(\"Position: \" + sbc.position());\nbuffer = ByteBuffer.wrap((newLine + \"Paul\").getBytes());\nsbc.write(buffer);\nSystem.out.println(\"Position: \" + sbc.position());\nbuffer = ByteBuffer.wrap((newLine + \"Carol\").getBytes());\nsbc.write(buffer);\nSystem.out.println(\"Position: \" + sbc.position());\nbuffer = ByteBuffer.wrap((newLine + \"Fred\").getBytes());\nsbc.write(buffer);\nSystem.out.println(\"Position: \" + sbc.position());\n}\n\n```", "```java\nBob\nMary\nSally\nTom\nTed\n\n```", "```java\n    public static void main(String[] args) {throws Exception final AsynchronousServerSocketChannel listener = AsynchronousServerSocketChannel.open();\n    InetSocketAddress address = new InetSocketAddress(\"localhost\", 5000);\n    listener.bind(address);\n    listener.accept(null, new CompletionHandler<AsynchronousSocketChannel, Void>() {\n    public void completed(AsynchronousSocketChannel channel, Void attribute) {\n    AsynchronousServerSocketChannel classasynchronous communication, managingtry {\n    System.out.println(\"Server: completed method executing\");\n    while(true) {\n    ByteBuffer buffer = ByteBuffer.allocate(32);\n    Future<Integer> readFuture = channel.read(buffer);\n    Integer number = readFuture.get();\n    System.out.println(\"Server: Message received: \" + new String(buffer.array()));\n    }\n    } catch (InterruptedException | ExecutionException ex) {\n    ex.printStackTrace();\n    }\n    }\n    public void failed(Throwable ex, Void atttribute) {\n    System.out.println(\"Server: CompletionHandler exception\");\n    ex.printStackTrace();\n    }\n    });\n    while(true) {\n    // wait \u2014 Prevents the program from\n    // terminating before the client can connect\n    }\n    } catch (IOException ex) {\n    ex.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {throws Exception try {\n    AsynchronousSocketChannel client = AsynchronousSocketChannel.open();\n    InetSocketAddress address = new InetSocketAddress(\"localhost\", 5000);\n    Future<Void> future = client.connect(address);\n    System.out.println(\"Client: Waiting for the connection to complete\");\n    future.get();\n    AsynchronousServerSocketChannel classasynchronous communication, managingString message;\n    do {\n    System.out.print(\"Enter a message: \");\n    Scanner scanner = new Scanner(System.in);\n    message = scanner.nextLine();\n    System.out.println(\"Client: Sending ...\");\n    ByteBuffer buffer = ByteBuffer.wrap(message.getBytes());\n    System.out.println(\"Client: Message sent: \" + new String(buffer.array()));\n    client.write(buffer);\n    } while(!\"quit\".equals(message)) {\n    }\n    }\n\n    ```", "```java\ntry {\nFuture<AsynchronousSocketChannel> future = listener.accept();\nAsynchronousSocketChannel worker = future.get();\nwhile (true) {\n// Wait\nstem.out.println(\"Server: Receiving ...\");\nByteBuffer buffer = ByteBuffer.allocate(32);\nFuture<Integer> readFuture = worker.read(buffer);\nInteger number = readFuture.get();\nystem.out.println(\"Server: Message received: \" + new String(buffer.array()));\n}\n} catch (IOException | InterruptedException | ExecutionException ex) {\nex.printStackTrace();\n}\n\n```", "```java\nSet<SocketOption<?>> options = listener.supportedOptions();\nfor (SocketOption<?> socketOption : options) {\nSystem.out.println(socketOption.toString() + \": \" + listener.getOption(socketOption));\n}\n\n```", "```java\nSO_RCVBUF: 8192\nSO_REUSEADDR: false\n\n```", "```java\nlistener.setOption(StandardSocketOptions.SO_RCVBUF, 16384);\n\n```", "```java\n    public static void main(String[] args) {throws Exception try (AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(Paths.get( \"/home/docs/asynchronous.txt\"),\n    READ, WRITE,\n    StandardOpenOption.CREATE)) {\n    CompletionHandler<Integer, Object> handler = new CompletionHandler<Integer, Object>() {\n    @Override\n    public void completed(Integer result, Object attachment) {\n    System.out.println(\"Attachment: \" + attachment + \" \" + result + \" bytes written\");\n    System.out.println(\"CompletionHandler Thread ID: \" + Thread.currentThread().getId());\n    }\n    @Override\n    public void failed(Throwable e, Object attachment) {\n    System.err.println(\"Attachment: \" + attachment + \" failed with:\");\n    e.printStackTrace();\n    }\n    };\n    AsynchronousFileChannel classfile, writing toSystem.out.println(\"Main Thread ID: \" + Thread.currentThread().getId());\n    fileChannel.write(ByteBuffer.wrap(\"Sample\".getBytes()), 0, \"First Write\", handler);\n    fileChannel.write(ByteBuffer.wrap(\"Box\".getBytes()), 0, \"Second Write\", handler);\n    }\n    }\n\n    ```", "```java\n    Main Thread ID: 1\n    Attachment: Second Write 3 bytes written\n    Attachment: First Write 6 bytes written\n    CompletionHandler Thread ID: 13\n    CompletionHandler Thread ID: 12\n\n    ```", "```java\nFuture<Integer> writeFuture1 = fileChannel.write(ByteBuffer.wrap(\"Sample\".getBytes()), 0);\nFuture<Integer> writeFuture2 = fileChannel.write(ByteBuffer.wrap(\"Box\".getBytes()), 0);\nint result = writeFuture1.get();\nSystem.out.println(\"Sample write completed with \" + result + \" bytes written\");\nresult = writeFuture2.get();\nSystem.out.println(\"Box write completed with \" + result + \" bytes written\");\n\n```", "```java\nMain Thread ID: 1\nSample write completed with 6 bytes written\nBox write completed with 3 bytes written \n\n```", "```java\n    ExecutorService pool = new ScheduledThreadPoolExecutor(3);\n\n    ```", "```java\n    try (AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open( Paths.get(\"/home/docs/items.txt\"), EnumSet.of(StandardOpenOption.READ), pool)) {\n\n    ```", "```java\n    System.out.println(\"Main Thread ID: \" + Thread.currentThread().getId());\n    CompletionHandler<Integer, ByteBuffer> handler = new CompletionHandler<Integer, ByteBuffer>() {\n    @Override\n    public synchronized void completed(Integer result, ByteBuffer attachment) {\n    for (int i = 0; i < attachment.limit(); i++) {\n    System.out.print((char) attachment.get(i));\n    }\n    System.out.println(\"\");\n    System.out.println(\"CompletionHandler Thread ID: \" + Thread.currentThread().getId());\n    System.out.println(\"\");\n    }\n    @Override\n    public void failed(Throwable e, ByteBuffer attachment) {\n    System.out.println(\"Failed\");\n    }\n    };\n\n    ```", "```java\n    final int bufferCount = 5;\n    ByteBuffer buffers[] = new ByteBuffer[bufferCount];\n    for (int i = 0; i < bufferCount; i++) {\n    buffers[i] = ByteBuffer.allocate(10);\n    fileChannel.read(buffers[i], i * 10, buffers[i], handler);\n    }\n\n    ```", "```java\n    pool.awaitTermination(1, TimeUnit.SECONDS);\n    System.out.println(\"Byte Buffers\");\n    for (ByteBuffer byteBuffer : buffers) {\n    for (int i = 0; i < byteBuffer.limit(); i++) {\n    System.out.print((char) byteBuffer.get(i));\n    }\n    System.out.println();\n    }\n\n    ```", "```java\n    Nail 34Bolt 12Drill 22Hammer 24Auger 24\n\n    ```", "```java\n    Main Thread ID: 1\n    Nail 34\n    CompletionHandler Thread ID: 10\n    Drill 22\n    CompletionHandler Thread ID: 12\n    Bolt 12\n    CompletionHandler Thread ID: 11\n    Auger 24\n    CompletionHandler Thread ID: 12\n    Hammer 24\n    CompletionHandler Thread ID: 10\n    Byte Buffers\n    Nail 34\n    Bolt 12\n    Drill 22\n    Hammer 24\n    Auger 24 \n\n    ```", "```java\n    public static void main(String args[]) throws IOException {\n    Path path = Paths.get(\"home/docs\");\n    SecureDirectoryStream<Path> sds = (SecureDirectoryStream) Files.newDirectoryStream(path);\n    PosixFileAttributeView view = sds.getFileAttributeView(PosixFileAttributeView.class);\n    PosixFileAttributes attributes = view.readAttributes();\n    Set<PosixFilePermission> permissions = attributes.permissions();\n    for (PosixFilePermission permission : permissions) {\n    System.out.print(permission.toString() + ' ');\n    }\n    System.out.println();\n    }\n\n    ```", "```java\n    GROUP_EXECUTE OWNER_WRITE OWNER_READ OTHERS_EXECUTE GROUP_READ OWNER_EXECUTE OTHERS_READ \n\n    ```"]