["```ts\nnpm install -g @vue/cli\n```", "```ts\nvue create chapter09\n```", "```ts\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\nimport HelloWorld from '@/components/HelloWorld.vue';\n</script>\n```", "```ts\n@Component\nexport default class Home extends Vue {}\n```", "```ts\n@Component({\n  components: {\n    HelloWorld,\n  },\n})\nexport default class Home extends Vue {}\n```", "```ts\n<template>\n  <div class=\"home\">\n    <HelloWorld />\n  </div>\n</template>\n```", "```ts\nexport class ImageClassifier {\n}\n```", "```ts\nconstructor() {\n  tf.ENV.set('WEBGL_PACK', false);\n}\n```", "```ts\nprivate model: MobileNet | null = null;\n```", "```ts\npublic async Classify(image: tf.Tensor3D | ImageData | HTMLImageElement | \nHTMLCanvasElement | HTMLVideoElement):   Promise<TensorInformation[] | null> {\n}\n```", "```ts\nexport interface TensorInformation {\n  className: string;\n  probability: number; }\n```", "```ts\nif (!this.model) {   this.model = await mobilenet.load();  }\n```", "```ts\nif (this.model) {   const result = await this.model.classify(image);   return {   ...result,  };  }\n```", "```ts\nconst result = await this.model.classify(image, 5);\n```", "```ts\npublic async Classify(image: tf.Tensor3D | ImageData | HTMLImageElement | \nHTMLCanvasElement | HTMLVideoElement):   Promise<TensorInformation[] | null> {   if (!this.model) {   this.model = await mobilenet.load();  }   if (this.model) {   const result = await this.model.classify(image);   return {   ...result,  };  }   return null;  }\n```", "```ts\n@Component export default class HelloWorld extends Vue {\n}\n```", "```ts\nprivate readonly classifier: ImageClassifier = new ImageClassifier();  private tensors : TensorInformation[] | null = null;\n```", "```ts\n<template>\n <div class=\"container\">\n </div> </template>\n```", "```ts\n<img crossorigin=\"anonymous\" id=\"img\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ0ucPLLnB4Pu1kMEs2uRZISegG5W7Icsb7tq27blyry0gnYhVOfg\" alt=\"Dog\" ref=\"dogId\" >\n```", "```ts\n<div class=\"row\">  <div class=\"col\">  </div>  </div>\n```", "```ts\n<b-list-group>  </b-list-group>\n```", "```ts\n<b-list-group-item v-for=\"tensor in tensors\" v-bind:key=\"tensor.className\">   {{ tensor.className }} - {{ tensor.probability }}\n</b-list-group-item>\n```", "```ts\n<template>\n <div class=\"container\">\n <img crossorigin=\"anonymous\" id=\"img\" src=\"https://encrypted-  \n      tbn0.gstatic.com/imagesq=tbn:ANd9GcQ0ucPLLnB4Pu1kMEs2uRZ\n      ISegG5W7Icsb7tq27blyry0gnYhVOfg\" alt=\"Dog\" ref=\"dogId\" >\n <div class=\"row\">\n <div class=\"col\">\n <b-list-group>\n <b-list-group-item v-for=\"tensor in tensors\" \n              v-bind:key=\"tensor.className\">\n  {{ tensor.className }} - {{ tensor.probability }}\n          </b-list-group-item>\n </b-list-group>\n </div>\n </div>\n </div> </template>\n```", "```ts\npublic Classify(): void {\n}\n```", "```ts\npublic Classify(): void {   this.$nextTick().then(async () => {  });  }\n```", "```ts\n/* tslint:disable:no-string-literal */  const dog = this.$refs['dogId'];  /* tslint:enable:no-string-literal */\n```", "```ts\nif (dog !== null && !this.tensors) {   const image = dog as HTMLImageElement;   this.tensors = await this.classifier.Classify(image);  }\n```", "```ts\n@Component export default class HelloWorld extends Vue {\n  private readonly classifier: ImageClassifier = new ImageClassifier();\n  private tensors: TensorInformation[] | null = null;    constructor() {\n  super();\n  this.Classify();\n }  public Classify(): void {\n  this.$nextTick().then(async () => {\n  /* tslint:disable:no-string-literal */\n  const dog = this.$refs['dogId'];\n  /* tslint:enable:no-string-literal */\n  if (dog !== null && !this.tensors) {\n  const image = dog as HTMLImageElement;\n  this.tensors = await this.classifier.Classify(image);\n } }); } }\n```", "```ts\n<!DOCTYPE html> <html lang=\"en\">\n <head>\n <meta charset=\"utf-8\">\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n <meta name=\"viewport\" content=\"width=device-width,\n      initial-scale=1.0\">\n <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n <title>Advanced TypeScript - Machine Learning</title>\n </head>\n <body>\n <noscript>\n <strong>We're sorry but chapter09 doesn't work properly without \n        JavaScript enabled. Please enable it to continue.</strong>\n </noscript>\n <div id=\"app\"></div>\n  <!-- built files will be auto injected -->\n  </body> </html>\n```", "```ts\nimport 'bootstrap/dist/css/bootstrap.css'; import 'bootstrap-vue/dist/bootstrap-vue.css';  Vue.use(BootstrapVue); \n```", "```ts\nnew Vue({\n  router,\n  store,\n  render: (h) => h(App), }).$mount('#app'); \n```", "```ts\n<template>\n <div id=\"app\">\n  </div>\n</template>\n```", "```ts\n<b-navbar toggleable=\"lg\" type=\"dark\" variant=\"info\">  <b-collapse id=\"nav-collapse\" is-nav>  <b-navbar-nav>  <b-nav-item to=\"/\">Classifier</b-nav-item>  <b-nav-item to=\"/pose\">Pose</b-nav-item>  </b-navbar-nav>  </b-collapse>  </b-navbar>\n```", "```ts\n<router-view/>\n```", "```ts\n<template>\n <div id=\"app\">\n <b-navbar toggleable=\"lg\" type=\"dark\" variant=\"info\">\n <b-collapse id=\"nav-collapse\" is-nav>\n <b-navbar-nav>\n <b-nav-item to=\"/\">Classifier</b-nav-item>\n <b-nav-item to=\"/pose\">Pose</b-nav-item>\n </b-navbar-nav>\n </b-collapse>\n </b-navbar>\n <router-view/>\n </div> </template>\n```", "```ts\nVue.use(Router);\n```", "```ts\nexport default new Router({ });\n```", "```ts\nmode: 'history',\n```", "```ts\nbase: process.env.BASE_URL,\n```", "```ts\nroutes: [  {   path: '/',   name: 'home',   component: Home,  },  {   path: '/pose',   name: 'Pose',   component: Pose,  }, {\n    path: '*',\n    component: Home,\n  } ],\n```", "```ts\n<template>\n  <div class=\"container\">\n  </div>\n</template>\n<script lang=\"ts\">\n</script>\n<style scoped>\n</style>\n```", "```ts\n<div class=\"outsideWrapper\">  <div class=\"insideWrapper\">  </div>\n</div>\n```", "```ts\n.outsideWrapper{   width:1200px; height:675px;  }  .insideWrapper{   width:100%; height:100%;   position:relative;  }\n```", "```ts\n<img crossorigin=\"anonymous\" class=\"coveredImage\" id=\"img\" src=\"https://www.yogajournal.com/.image/t_share/MTQ3MTUyNzM1MjQ1MzEzNDg2/mountainhp2_292_37362_cmyk.jpg\" alt=\"Pose\" ref=\"poseId\" >\n```", "```ts\n<canvas ref=\"posecanvas\" id=\"canvas\" class=\"coveringCanvas\" width=1200 height=675></canvas>\n```", "```ts\n<template>\n <div class=\"container\">\n <div class=\"outsideWrapper\">\n <div class=\"insideWrapper\">\n <img crossorigin=\"anonymous\" class=\"coveredImage\" \n          id=\"img\" src=\"https://www.yogajournal.com/.image/t_share/\n          MTQ3MTUyNzM1MjQ1MzEzNDg2/mountainhp2_292_37362_cmyk.jpg\" \n          alt=\"Pose\" ref=\"poseId\" >\n <canvas ref=\"posecanvas\" id=\"canvas\" \n          class=\"coveringCanvas\" width=\"1200\" height=\"675\"></canvas>\n </div>\n </div>\n </div> </template> \n```", "```ts\n.coveredImage{   width:100%; height:100%;   position:absolute; \n  top:0px; \n  left:0px;  }  .coveringCanvas{   width:100%; height:100%;   position:absolute; \n  top:0px; left:0px;  }\n```", "```ts\n<style scoped>\n .outsideWrapper{\n  width:1200px; height:675px;\n } .insideWrapper{\n  width:100%; height:100%;\n  position:relative;\n } .coveredImage{\n  width:100%; height:100%;\n  position:absolute; \n top:0px; \n left:0px;\n } .coveringCanvas{\n  width:100%; height:100%;\n  position:absolute; \n top:0px; \n left:0px;\n } </style> \n```", "```ts\nexport class DrawPose { }\n```", "```ts\nconstructor(private canvas: HTMLCanvasElement, private context = canvas.getContext('2d')) {   this.context!.clearRect(0, 0, this.canvas.offsetWidth, this.canvas.offsetHeight);   this.context!.fillStyle = '#ff0300';  }\n```", "```ts\npublic Draw(keys: Keypoint[]): void {   keys.forEach((kp: Keypoint) => {   this.context!.fillRect(kp.position.x - 2.5, \n                           kp.position.y - 2.5, 5, 5);  });  }\n```", "```ts\nexport class DrawPose {\n  constructor(private canvas: HTMLCanvasElement, private context = \n    canvas.getContext('2d')) {\n  this.context!.clearRect(0, 0, this.canvas.offsetWidth, \n        this.canvas.offsetHeight);\n  this.context!.fillStyle = '#ff0300';\n }    public Draw(keys: Keypoint[]): void {\n  keys.forEach((kp: Keypoint) => {\n  this.context!.fillRect(kp.position.x - 2.5, \n                             kp.position.y - 2.5, 5, 5);\n }); } }\n```", "```ts\nexport class PoseClassifier {\n}\n```", "```ts\nprivate model: PoseNet | null = null;  private drawPose: DrawPose | null = null;\n```", "```ts\nconstructor() {   // If running on Windows, there can be issues \n  // loading WebGL textures properly.  // Running the following command solves this.   tf.ENV.set('WEBGL_PACK', false);  }\n```", "```ts\npublic async Pose(image: HTMLImageElement, canvas: HTMLCanvasElement): Promise<Keypoint[] | null> {   return null;  }\n```", "```ts\nif (!this.model) {   this.model = await posenet.load();   this.drawPose = new DrawPose(canvas);  }\n```", "```ts\nif (this.model) {   const result: Pose = await this.model.estimateSinglePose(image);   if (result) {   this.drawPose!.Draw(result.keypoints);   return result.keypoints;  }  }\n```", "```ts\nexport class PoseClassifier {\n  private model: PoseNet | null = null;\n  private drawPose: DrawPose | null = null;\n  constructor() {\n  // If running on Windows, there can be \n    // issues loading WebGL textures properly.\n // Running the following command solves this.  tf.ENV.set('WEBGL_PACK', false);\n }    public async Pose(image: HTMLImageElement, canvas: \n    HTMLCanvasElement): Promise<Keypoint[] | null> {\n  if (!this.model) {\n  this.model = await posenet.load();\n  this.drawPose = new DrawPose(canvas);\n }    if (this.model) {\n  const result: Pose = await \n             this.model.estimateSinglePose(image);\n  if (result) {\n  this.drawPose!.Draw(result.keypoints);\n  return result.keypoints;\n } }  return null;\n } }\n```", "```ts\nimport { Component, Vue } from 'vue-property-decorator';  import {PoseClassifier} from '@/Models/PoseClassifier';  import {Keypoint} from '@tensorflow-models/posenet';  @Component  export default class Pose extends Vue {\n}\n```", "```ts\nprivate readonly classifier: PoseClassifier = new PoseClassifier();  private keypoints: Keypoint[] | null;\n```", "```ts\npublic Classify(): void {   this.$nextTick().then(async () => {   /* tslint:disable:no-string-literal */   const pose = this.$refs['poseId'];   const poseCanvas = this.$refs['posecanvas'];   /* tslint:enable:no-string-literal */  });  }\n```", "```ts\nif (pose !== null) {   const image: HTMLImageElement = pose as HTMLImageElement;   const canvas: HTMLCanvasElement = poseCanvas as HTMLCanvasElement   this.keypoints = await this.classifier.Pose(image, canvas);  }\n```", "```ts\n<div class=\"row\">  <div class=\"col\">  </div>  </div>\n```", "```ts\n<b-table striped hover :items=\"keypoints\"></b-table>\n```", "```ts\nprivate fields =  {'score':  { label: 'Confidence', sortable: true},   'part':  { label: 'Part', sortable: true},   'position.x':  {label:'X'},   'position.y': {label: 'Y'}};\n```", "```ts\n<b-table striped hover :items=\"keypoints\" :fields=\"fields\"></b-table>\n```"]