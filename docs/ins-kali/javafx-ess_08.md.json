["```java\nprivate final BooleanProperty doneList= new\nSimpleBooleanProperty(false);\nprivate final List<Bone> bones=new ArrayList<>();\nprivate final List<Arm> arms=new ArrayList<>();\nprivate final List<Pair> joints=new ArrayList<>();\nprivate final List<WritableImage> raw =new ArrayList<>();\n```", "```java\n@Override\npublic void onInit(Controller controller){\n controller.setPolicy(Controller.PolicyFlag.POLICY_IMAGES);\n}\n```", "```java\n@Override\npublic void onFrame(Controller controller) {\n  Frame frame = controller.frame();\n  doneList.set(false);\n  doneList.set(!bones.isEmpty() || !arms.isEmpty());\n}\npublic BooleanProperty doneListProperty() {\n  return doneList;\n}\n```", "```java\n(newPixels[i*width+(width-j-1)]).raw.clear();\nImageList images = frame.images();\nfor(Image image : images){\n  int width = (int)image.width();\n  int height = (int)image.height();\n  int[] newPixels = new int[width * height];\n  WritablePixelFormat<IntBuffer> pixelFormat = PixelFormat.getIntArgbPreInstance();\n  WritableImage wi=new WritableImage(width, height);\n  PixelWriter pw = wi.getPixelWriter();\n  //Get byte array containing the image data from Image object\n  byte[] imageData = image.data();\n\n  //Copy image data into display object\n  for(int i = 0; i < height; i++){\n  for(int j = 0; j < width; j++){\n    //convert to unsigned and shift into place\n    int r = (imageData[i*width+j] & 0xFF) << 16;\n    int g = (imageData[i*width+j] & 0xFF) << 8;\n    int b = imageData[i*width+j] & 0xFF;\n    // reverse image\n    newPixels[i*width+(width-j-1)] = 1- (r | g | b);\n  }\n  }\n  pw.setPixels(0, 0, width, height, pixelFormat, newPixels, 0,width);\n  raw.add(wi);\n}\n```", "```java\nbones.clear();\narms.clear();\njoints.clear();\nif (!frame.hands().isEmpty()) {\nScreen screen = controller.locatedScreens().get(0);\nif (screen != null && screen.isValid()){\n```", "```java\nfor(Finger finger : frame.fingers()){\n  if(finger.isValid()){\n  for(Bone.Type b : Bone.Type.values()) {\n    if((!finger.type().equals(Finger.Type.TYPE_RING) &&!finger.type().equals(Finger.Type.TYPE_MIDDLE)) ||!b.equals(Bone.Type.TYPE_METACARPAL)){\n          bones.add(finger.bone(b));\n      }\n    }\n  }\n}\n```", "```java\nfor(Hand h: frame.hands()){\n  if(h.isValid()){\n  // arm\n  arms.add(h.arm());\n```", "```java\nFingerList fingers = h.fingers();\nFinger index=null, middle=null, ring=null, pinky=null;\nfor(Finger f: fingers){\n  if(f.isFinger() && f.isValid()){\n    switch(f.type()){\n    case TYPE_INDEX: index=f; break;\n    case TYPE_MIDDLE: middle=f; break;\n    case TYPE_RING: ring=f; break;\n    case TYPE_PINKY: pinky=f; break;\n    }\n  }\n}\n```", "```java\n// joints\nif(index!=null && middle!=null){\n  Pair p=new Pair(index.bone(Bone.Type.TYPE_METACARPAL).nextJoint(),middle.bone(Bone.Type.TYPE_METACARPAL).nextJoint());\n  joints.add(p);\n  }\n  if(middle!=null && ring!=null){\n    Pair p=new Pair(middle.bone(Bone.Type.TYPE_METACARPAL).nextJoint(),\n    ring.bone(Bone.Type.TYPE_METACARPAL).nextJoint());\n    joints.add(p);\n  }\n  if(ring!=null && pinky!=null){\n    Pair p=new Pair(ring.bone(Bone.Type.TYPE_METACARPAL).nextJoint(),\n    pinky.bone(Bone.Type.TYPE_METACARPAL).nextJoint());\n    joints.add(p);\n  }\n  if(index!=null && pinky!=null){\n    Pair p=new Pair(index.bone(Bone.Type.TYPE_METACARPAL).prevJoint(),pinky.bone(Bone.Type.TYPE_METACARPAL).prevJoint());\n    joints.add(p);\n  }\n```", "```java\npublic List<Bone> getBones(){\n return bones.stream().collect(Collectors.toList());\n}\n```", "```java\nOverride\n  public void start(Stage primaryStage) {\n    listener = new LeapListener();\n    controller = new Controller();\n    controller.addListener(listener);\n```", "```java\nfinal PerspectiveCamera camera = new PerspectiveCamera();\ncamera.setFieldOfView(60);\ncamera.getTransforms().addAll(new Translate(-320,-480,-100));\nfinal PointLight pointLight = new PointLight(Color.ANTIQUEWHITE);\npointLight.setTranslateZ(-500);\nroot.getChildren().addAll(pointLight);\n```", "```java\nrawView=new ImageView();\nrawView.setScaleY(2);\n```", "```java\nGroup root3D=new Group();\nroot3D.getChildren().addAll(camera, root);\nSubScene subScene = new SubScene(root3D, 640, 480, true,\nSceneAntialiasing.BALANCED);\nsubScene.setCamera(camera);\nStackPane pane=new StackPane(rawView,subScene);\nScene scene = new Scene(pane, 640, 480);\n```", "```java\nfinal PhongMaterial materialFinger = new PhongMaterial(Color.BURLYWOOD);\nfinal PhongMaterial materialArm = new PhongMaterial(Color.CORNSILK);\n```", "```java\nlistener.doneListProperty().addListener((ov,b,b1)->{\n  if(b1){\n    ...\n  }\n});\n```", "```java\nList<Bone> bones=listener.getBones();\nList<Arm> arms=listener.getArms();\nList<Pair> joints=listener.getJoints();\nList<WritableImage> images=listener.getRawImages();\n```", "```java\nPlatform.runLater(()->{\n    if(images.size()>0){\n    // left camera\n    rawView.setImage(images.get(0));\n  }\n  if(root.getChildren().size()>1){\n    // clean old bones\n    root.getChildren().remove(1,root.getChildren().size()-1);\n}\n```", "```java\nbones.stream().filter(bone -> bone.isValid() && bone.length()>0).forEach(bone -> {\n```", "```java\nfinal Vector p=bone.center();\n// create bone as a vertical cylinder and locate it at its center position\nCylinder c=new Cylinder(bone.width()/2,bone.length());\nc.setMaterial(materialFinger);\n```", "```java\n// translate and rotate the cylinder towards its direction\nfinal Vector v=bone.direction();\nVector cross = (new Vector(v.getX(),-v.getY(), v.getZ())).cross(new Vector(0,-1,0));\ndouble ang=(new Vector(v.getX(),-v.getY(),-v.getZ())).angleTo(new Vector(0,-1,0));\nc.getTransforms().addAll(new Translate(p.getX(),-p.getY(),-p.getZ()),new Rotate(-Math.toDegrees(ang), 0, 0, 0, new Point3D(cross.getX(),-cross.getY(),cross.getZ())));\n  // add bone to scene\nroot.getChildren().add(c);\n```", "```java\n// add sphere at the end of the bone\nSphere s=new Sphere(bone.width()/2f);\ns.setMaterial(materialFinger);\ns.getTransforms().addAll(new Translate(p.getX(),-p.getY()+bone.length()/2d,-p.getZ()),new Rotate(-Math.toDegrees(ang), 0, -bone.length()/2d, 0, new Point3D(cross.getX(),-cross.getY(),cross.getZ())));\n  // add sphere to scene\n  root.getChildren().add(s);\n  // add sphere at the beginning of the bone\n  Sphere s2=new Sphere(bone.width()/2f);\n  s2.setMaterial(materialFinger);\n  s2.getTransforms().addAll(new Translate(p.getX(),-p.getY()-bone.length()/2d,-p.getZ()),new Rotate(Math.toDegrees(ang), 0, bone.length()/2d, 0, new Point3D(cross.getX(),-cross.getY(),cross.getZ())));\n  // add sphere to scene\n  root.getChildren().add(s2);\n});\n```", "```java\njoints.stream().forEach(joint->{\n  double length=joint.getV0().distanceTo(joint.getV1());\n  Cylinder c=new Cylinder(bones.get(0).width()/3,length);\n  c.setMaterial(materialArm);\n  final Vector p=joint.getCenter();\n  final Vector v=joint.getDirection();\n  Vector cross = (new Vector(v.getX(),-v.getY(), v.getZ())).cross(new Vector(0,-1,0));\n  double ang = (new Vector(v.getX(),-v.getY(),-v.getZ())).angleTo(new Vector(0,-1,0));\n  c.getTransforms().addAll(new Translate(p.getX(),-p.getY(),-p.getZ()), new Rotate(-Math.toDegrees(ang), 0, 0, 0, new Point3D(cross.getX(),-cross.getY(),cross.getZ())));\n  // add joint to scene\n  root.getChildren().add(c);\n});\n```", "```java\narms.stream().\nfilter(arm->arm.isValid()).\nforEach(arm->{\n  final Vector p=arm.center();\n  // create arm as a cylinder and locate it at its center position\n  Cylinder c=new Cylinder(arm.width()/2,arm.elbowPosition().\n  minus(arm.wristPosition()).magnitude());\n  c.setMaterial(materialArm);\n  // rotate the cylinder towards its direction\n  final Vector v=arm.direction();\n  Vector cross = (new Vector(v.getX(),-v.getY(),-v.getZ())).cross(new Vector(0,-1,0));\n  double ang=(new Vector(v.getX(),-v.getY(),-v.getZ())).\n  angleTo(new Vector(0,-1,0));\n  c.getTransforms().addAll(new Translate(p.getX(),-p.getY(),-p.getZ()),new Rotate(- Math.toDegrees(ang), 0, 0, 0, new Point3D(cross.getX(),- cross.getY(),cross.getZ())));\n  // add arm to scene\n  root.getChildren().add(c);\n});\n```"]