["```cs\n    using System;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static string EmulateProcessing(string taskName)\n    {\n      Thread.Sleep(TimeSpan.FromMilliseconds(new Random(DateTime.Now.Millisecond).Next(250, 350)));\n      Console.WriteLine(\"{0} task was processed on a thread id {1}\",taskName, Thread.CurrentThread.ManagedThreadId);\n      return taskName;\n    }\n    ```", "```cs\n    Parallel.Invoke(() => EmulateProcessing(\"Task1\"),() => EmulateProcessing(\"Task2\"),() => EmulateProcessing(\"Task3\")\n    );\n\n    var cts = new CancellationTokenSource();\n\n    var result = Parallel.ForEach(\n      Enumerable.Range(1, 30),\n      new ParallelOptions\n      {\n        CancellationToken = cts.Token,\n        MaxDegreeOfParallelism = Environment.ProcessorCount,\n        TaskScheduler = TaskScheduler.Default\n      },\n      (i, state) =>\n      {\n        Console.WriteLine(i);\n        if (i == 20)\n        {\n          state.Break();\n          Console.WriteLine(\"Loop is stopped: {0}\", state.IsStopped);\n        }\n      });\n\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"IsCompleted: {0}\", result.IsCompleted);\n    Console.WriteLine(\"Lowest break iteration: {0}\", result.LowestBreakIteration);\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading;\n    ```", "```cs\n    static void PrintInfo(string typeName)\n    {\n      Thread.Sleep(TimeSpan.FromMilliseconds(150));\n      Console.WriteLine(\"{0} type was printed on a thread id {1}\", typeName, Thread.CurrentThread.ManagedThreadId);\n    }\n\n    static string EmulateProcessing(string typeName)\n    {\n      Thread.Sleep(TimeSpan.FromMilliseconds(150));\n      Console.WriteLine(\"{0} type was processed on a thread id {1}\",typeName, Thread.CurrentThread.ManagedThreadId);\n      return typeName;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      return from assembly in AppDomain.CurrentDomain.GetAssemblies()from type in assembly.GetExportedTypes()where type.Name.StartsWith(\"Web\")select type.Name;\n    }\n    ```", "```cs\n    var sw = new Stopwatch();\n    sw.Start();\n    var query = from t in GetTypes()select EmulateProcessing(t);\n\n    foreach (string typeName in query)\n    {\n      PrintInfo(typeName);\n    }\n    sw.Stop();\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Sequential LINQ query.\");\n    Console.WriteLine(\"Time elapsed: {0}\", sw.Elapsed);\n    Console.WriteLine(\"Press ENTER to continue....\");\n    Console.ReadLine();\n    Console.Clear();\n    sw.Reset();\n\n    sw.Start();\n    var parallelQuery = from t in ParallelEnumerable.AsParallel(GetTypes())select EmulateProcessing(t);\n\n    foreach (string typeName in parallelQuery)\n    {\n      PrintInfo(typeName);\n    }\n    sw.Stop();\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Parallel LINQ query. The results are being merged on a single thread\");\n    Console.WriteLine(\"Time elapsed: {0}\", sw.Elapsed);\n    Console.WriteLine(\"Press ENTER to continue....\");\n    Console.ReadLine();\n    Console.Clear();\n    sw.Reset();\n\n    sw.Start();\n    parallelQuery = from t in GetTypes().AsParallel()select EmulateProcessing(t);\n\n    parallelQuery.ForAll(PrintInfo);\n\n    sw.Stop();\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Parallel LINQ query. The results are being processed in parallel\");\n    Console.WriteLine(\"Time elapsed: {0}\", sw.Elapsed);\n    Console.WriteLine(\"Press ENTER to continue....\");\n    Console.ReadLine();\n    Console.Clear();\n    sw.Reset();\n\n    sw.Start();\n    query = from t in GetTypes().AsParallel().AsSequential()select EmulateProcessing(t);\n\n    foreach (var typeName in query)\n    {\n      PrintInfo(typeName);\n    }\n\n    sw.Stop();\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Parallel LINQ query, transformed into sequential.\");\n    Console.WriteLine(\"Time elapsed: {0}\", sw.Elapsed);\n    Console.WriteLine(\"Press ENTER to continue....\");\n    Console.ReadLine();\n    Console.Clear();\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading;\n    ```", "```cs\n    static string EmulateProcessing(string typeName)\n    {\n      Thread.Sleep(TimeSpan.FromMilliseconds(new Random(DateTime.Now.Millisecond).Next(250,350)));\n      Console.WriteLine(\"{0} type was processed on a thread id {1}\",typeName, Thread.CurrentThread.ManagedThreadId);\n      return typeName;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      return from assembly in AppDomain.CurrentDomain.GetAssemblies()from type in assembly.GetExportedTypes()where type.Name.StartsWith(\"Web\")orderby type.Name.Lengthselect type.Name;\n    }\n    ```", "```cs\n    var parallelQuery = from t in GetTypes().AsParallel()select EmulateProcessing(t);\n\n    var cts = new CancellationTokenSource();\n    cts.CancelAfter(TimeSpan.FromSeconds(3));\n\n    try\n    {\n      parallelQuery.WithDegreeOfParallelism(Environment.ProcessorCount).WithExecutionMode(ParallelExecutionMode.ForceParallelism).WithMergeOptions (ParallelMergeOptions.Default).WithCancellation(cts.Token).ForAll(Console.WriteLine);\n    }\n    catch (OperationCanceledException)\n    {\n      Console.WriteLine(\"---\");\n      Console.WriteLine(\"Operation has been canceled!\");\n    }\n\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Unordered PLINQ query execution\");\n    var unorderedQuery = from i in ParallelEnumerable.Range(1, 30) select i;\n\n    foreach (var i in unorderedQuery)\n    {\n      Console.WriteLine(i);\n    }\n\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Ordered PLINQ query execution\");\n    var orderedQuery = from i in ParallelEnumerable.Range(1, 30).AsOrdered() select i;\n\n    foreach (var i in orderedQuery)\n    {\n      Console.WriteLine(i);\n    }\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    ```", "```cs\n    IEnumerable<int> numbers = Enumerable.Range(-5, 10);\n\n    var query = from number in numbersselect 100 / number;\n\n    try\n    {\n      foreach(var n in query)\n        Console.WriteLine(n);\n    }\n    catch (DivideByZeroException)\n    {\n      Console.WriteLine(\"Divided by zero!\");\n    }\n\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Sequential LINQ query processing\");\n    Console.WriteLine();\n\n    var parallelQuery = from number in numbers.AsParallel()select 100 / number;\n\n    try\n    {\n      parallelQuery.ForAll(Console.WriteLine);\n    }\n    catch (DivideByZeroException)\n    {\n      Console.WriteLine(\"Divided by zero - usual exception handler!\");\n    }\n    catch (AggregateException e)\n    {\n      e.Flatten().Handle(ex =>\n      {\n        if (ex is DivideByZeroException)\n          {\n          Console.WriteLine(\"Divided by zero - aggregate exception handler!\");\n          return true;\n          }\n\n        return false;\n      });\n    }\n\n    Console.WriteLine(\"---\");\n    Console.WriteLine(\"Parallel LINQ query processing and results merging\");\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading;\n    ```", "```cs\n    static void PrintInfo(string typeName)\n    {\n      Thread.Sleep(TimeSpan.FromMilliseconds(150));\n      Console.WriteLine(\"{0} type was printed on a thread id {1}\",typeName, Thread.CurrentThread.ManagedThreadId);\n    }\n\n    static string EmulateProcessing(string typeName)\n    {\n      Thread.Sleep(TimeSpan.FromMilliseconds(150));\n      Console.WriteLine(\"{0} type was processed on a thread id {1}. Has {2} length.\",typeName, Thread.CurrentThread.ManagedThreadId, typeName.Length % 2 == 0 ? \"even\" : \"odd\");\n      return typeName;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      var types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetExportedTypes());\n\n      return from type in types where type.Name.StartsWith(\"Web\")select type.Name;\n    }\n\n    public class StringPartitioner : Partitioner<string>\n    {\n      private readonly IEnumerable<string> _data;\n\n      public StringPartitioner(IEnumerable<string> data)\n      {\n        _data = data;\n      }\n\n      public override bool SupportsDynamicPartitions\n      {\n        get\n        {\n         return false;\n        }\n      }\n\n      public override IList<IEnumerator<string>> GetPartitions(int partitionCount)\n      {\n        var result = new List<IEnumerator<string>>(2);\n        result.Add(CreateEnumerator(true));\n        result.Add(CreateEnumerator(false));\n\n        return result;\n      }\n\n      IEnumerator<string> CreateEnumerator(bool isEven)\n      {\n        foreach (var d in _data)\n        {\n          if (!(d.Length % 2 == 0 ^ isEven))\n          yield return d;\n        }\n      }\n    }\n    ```", "```cs\n    var partitioner = new StringPartitioner(GetTypes());\n    var parallelQuery = from t in partitioner.AsParallel()select EmulateProcessing(t);\n\n    parallelQuery.ForAll(PrintInfo);\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading;\n    ```", "```cs\n    static ConcurrentDictionary<char, int> AccumulateLettersInformation(ConcurrentDictionary<char, int> taskTotal , string item)\n    {\n      foreach (var c in item)\n      {\n        if (taskTotal.ContainsKey(c))\n        {\n          taskTotal[c] = taskTotal[c] + 1;\n        }\n        else\n        {\n          taskTotal[c] = 1;\n        }\n      }\n      Console.WriteLine(\"{0} type was aggregated on a thread id {1}\",item, Thread.CurrentThread.ManagedThreadId);\n      return taskTotal;\n    }\n\n    static ConcurrentDictionary<char, int> MergeAccumulators(ConcurrentDictionary<char, int> total, ConcurrentDictionary<char, int> taskTotal)\n    {\n      foreach (var key in taskTotal.Keys)\n      {\n        if (total.ContainsKey(key))\n        {\n          total[key] = total[key] + taskTotal[key];\n        }\n        else\n        {\n          total[key] = taskTotal[key];\n        }\n      }\n      Console.WriteLine(\"---\");\n      Console.WriteLine(\"Total aggregate value was calculated on a thread id {0}\",Thread.CurrentThread.ManagedThreadId);\n      return total;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      var types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetExportedTypes());\n\n      return from type in typeswhere type.Name.StartsWith(\"Web\")select type.Name;\n    }\n    ```", "```cs\n    var parallelQuery = from t in GetTypes().AsParallel() select t;\n\n    var parallelAggregator = parallelQuery.Aggregate(() => new ConcurrentDictionary<char, int>(),(taskTotal, item) => AccumulateLettersInformation(taskTotal, item), (total, taskTotal) => MergeAccumulators(total, taskTotal), total => total);\n\n    Console.WriteLine();\n    Console.WriteLine(\"There were the following letters in type names:\");\n    var orderedKeys = from k in parallelAggregator.Keysorderby parallelAggregator[k] descending select k;\n\n    foreach (var c in orderedKeys)\n    {\n      Console.WriteLine(\"Letter '{0}' ---- {1} times\", c, parallelAggregator[c]);\n    }\n    ```"]