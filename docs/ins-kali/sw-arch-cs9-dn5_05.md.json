["```cs\nvar myPolicy = Policy\n  .Handle<HttpRequestException>()\n  .Or<OperationCanceledException>()\n  .Retry(3);\n....\n....\nmyPolicy.Execute(()=>{\n    //your code here\n}); \n```", "```cs\nvar erPolicy= Policy\n    ...\n    //Exceptions to handle here\n    .WaitAndRetry(6, \n        retryAttempt => TimeSpan.FromSeconds(Math.Pow(2,\n            retryAttempt))); \n```", "```cs\nvar cbPolicy=Policy\n    .Handle<SomeExceptionType>()\n    .CircuitBreaker(6, TimeSpan.FromMinutes(1)); \n```", "```cs\nPolicy\n  .Bulkhead(10, 15) \n```", "```cs\nvar combinedPolicy = Policy\n  .Wrap(erPolicy, cbPolicy); \n```", "```cs\nvar myHost=new HostBuilder()\n    //Several chained calls\n    //defining Host configuration\n    .Build(); \n```", "```cs\nhost.Start(); \n```", "```cs\nawait host.RunAsync(cancellationToken) \n```", "```cs\nvar myHost = new HostBuilder()\n    .ConfigureServices((hostContext, services) =>\n    {\n        services.Configure<HostOptions>(option =>\n        {\n            option.ShutdownTimeout = System.TimeSpan.FromSeconds(10);\n        });\n        ....\n        ....\n        //further configuration\n    })\n    .Build(); \n```", "```cs\nservices.AddHostedService<MyHostedService>(); \n```", "```cs\nusing Microsoft.Extensions.DependencyInjection; \n```", "```cs\npublic class MyHostedService: BackgroundService \n{\n    private readonly IHostApplicationLifetime applicationLifetime;\n    public MyHostedService(IHostApplicationLifetime applicationLifetime)\n    {\n        this.applicationLifetime=applicationLifetime;\n    }\n    protected Task ExecuteAsync(CancellationToken token) \n    {\n        ...\n        applicationLifetime.StopApplication();\n        ...\n    }\n} \n```", "```cs\nPublic MyClass(MyResource x, IResourceInterface1 y)\n{\n    ...\n} \n```", "```cs\nservices.AddTransient<MyResource>();\nservices.AddTransient<IResourceInterface1, MyResource1>();\nservices.AddSingleton<MyResource>();\nservices.AddSingleton<IResourceInterface1, MyResource1>(); \n```", "```cs\n.UseContentRoot(\"c:\\\\<deault path>\") \n```", "```cs\n.ConfigureLogging((hostContext, configLogging) =>\n    {\n        configLogging.AddConsole();\n        configLogging.AddDebug();\n    }) \n```", "```cs\n.ConfigureHostConfiguration(configHost =>\n    {\n        configHost.AddJsonFile(\"settings.json\", optional: true);\n        configHost.AddEnvironmentVariables(prefix: \"PREFIX_\");\n        configHost.AddCommandLine(args);\n    }) \n```", "```cs\nFROM mcr.microsoft.com/dotnet/aspnet:x.x AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443 \n```", "```cs\nFROM mcr.microsoft.com/dotnet/core/sdk:x  AS build\nWORKDIR /src\nCOPY [\"MvcDockerTest/MvcDockerTest.csproj\", \"MvcDockerTest/\"]\nRUN dotnet restore MvcDockerTest/MvcDockerTest.csproj\nCOPY . .\nWORKDIR /src/MvcDockerTest\nRUN dotnet build MvcDockerTest.csproj -c Release -o /app/build\nFROM build AS publish\nRUN dotnet publish MvcDockerTest.csproj -c Release -o /app/publish \n```", "```cs\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"MvcDockerTest.dll\"] \n```", "```cs\nversion: '3.4'\nservices:\n  mvcdockertest:\n    image: ${DOCKER_REGISTRY-}mvcdockertest\n    build:\n      context: .\n      dockerfile: MvcDockerTest/Dockerfile\n  mvcdockertest1:\n    image: ${DOCKER_REGISTRY-}mvcdockertest1\n    build:\n      context: .\n      dockerfile: MvcDockerTest1/Dockerfile \n```", "```cs\nversion: '3.4'\nservices:\n  mvcdockertest:\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ASPNETCORE_URLS=https://+:443;http://+:8 \n    ports:\n      - \"3150:80\"\n      - \"44355:443\"\n    volumes:\n      - ${APPDATA}/Asp.NET/Https:/root/.aspnet/https:ro\n  mvcdockertest1:\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n      - ASPNETCORE_URLS=https://+:443;http://+:80\n      - ASPNETCORE_HTTPS_PORT=44317\n    ports:\n      - \"3172:80\"\n      - \"44317:443\"\n    volumes:\n      - ${APPDATA}/Asp.NET/Https:/root/.aspnet/https:ro \n```", "```cs\nsql.data:\n  image: mssql-server-linux:latest\n  environment:\n  - SA_PASSWORD=Pass@word\n  - ACCEPT_EULA=Y\n  ports:\n  - \"5433:1433\" \n```", "```cs\ndocker-compose -f docker-compose.yml -f docker-compose-staging.override.yml \n```", "```cs\ndocker-compose -f docker-compose.yml -f docker-compose.test.staging.yml down \n```", "```cs\naz login \n```", "```cs\naz acr login --name {registryname} \n```", "```cs\ndocker pull other.registry.io/samples/myimage \n```", "```cs\ndocker pull other.registry.io/samples/myimage:version1.0 \n```", "```cs\ndocker images \n```", "```cs\ndocker tag myimage myregistry.azurecr.io/testpath/myimage \n```", "```cs\ndocker push myregistry.azurecr.io/testpath/myimage \n```", "```cs\ndocker rmi myregistry.azurecr.io/testpath/myimage \n```"]