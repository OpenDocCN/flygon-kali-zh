- en: 15\. Extending Docker with Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. 通过插件扩展Docker
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you will learn how to extend the capabilities of Docker Engine
    by creating and installing plugins. You will see how to implement your advanced
    and custom requirements while using Docker containers. By the end of the chapter,
    you will be able to identify the basics of extending Docker. You will also be
    able to install and configure different Docker plugins. Moving ahead, you will
    work with the Docker plugin API to develop custom plugins and use various Docker
    plugins to extend the capabilities of volumes, networking, and authorization in
    Docker.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何通过创建和安装插件来扩展Docker Engine的功能。您将了解如何在使用Docker容器时实现高级和自定义需求。在本章结束时，您将能够识别扩展Docker的基础知识。您还将能够安装和配置不同的Docker插件。此外，您将使用Docker插件API来开发自定义插件，并使用各种Docker插件来扩展Docker中卷、网络和授权的功能。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In previous chapters, you ran multiple Docker containers with **Docker Compose**
    and **Docker Swarm**. In addition, you monitored the metrics from containers and
    collected the logs. Docker allows you to manage the complete life cycle of containers,
    including networking, volumes, and process isolations. If you want to customize
    the operations of Docker to work with your custom storage, network provider, or
    authentication server, you need to extend the capabilities of Docker.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您使用Docker Compose和Docker Swarm运行了多个Docker容器。此外，您监控了容器的指标并收集了日志。Docker允许您管理容器的完整生命周期，包括网络、卷和进程隔离。如果您想要定制Docker的操作以适应您的自定义存储、网络提供程序或身份验证服务器，您需要扩展Docker的功能。
- en: For instance, if you have a custom cloud-based storage system and you want to
    mount it to your Docker containers, you can implement a storage plugin. Similarly,
    you can authenticate your users from your enterprise user management system using
    authorization plugins and allow them to work with Docker containers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个自定义的基于云的存储系统，并希望将其挂载到Docker容器中，您可以实现一个存储插件。同样，您可以使用授权插件从企业用户管理系统对用户进行身份验证，并允许他们与Docker容器一起工作。
- en: 'In this chapter, you will learn how to extend Docker with its plugins. You
    will start with plugin management and APIs, followed by the most advanced and
    requested plugin types: authorization, network, and volume. The next section will
    cover the installation and operation of plugins in Docker.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何通过插件扩展Docker。您将从插件管理和API开始，然后学习最先进和最受欢迎的插件类型：授权、网络和卷。接下来的部分将涵盖在Docker中安装和操作插件。
- en: Plugin Management
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件管理
- en: 'Plugins in Docker are external processes that run independently of Docker Engine.
    This means that Docker Engine does not rely on plugins and vice versa. We just
    need to inform Docker Engine about the plugin location and its capabilities. Docker
    provides the following CLI commands to manage the life cycle of plugins:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Docker中的插件是独立于Docker Engine运行的外部进程。这意味着Docker Engine不依赖于插件，反之亦然。我们只需要告知Docker
    Engine有关插件位置和其功能。Docker提供以下CLI命令来管理插件的生命周期：
- en: '`docker plugin create`: This command creates a new plugin and its configuration.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker plugin create`：此命令创建新的插件及其配置。'
- en: '`docker plugin enable/disable`: These commands enable or disable a plugin.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker plugin enable/disable`：这些命令启用或禁用插件。'
- en: '`docker plugin install`: This command installs a plugin.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker plugin install`：此命令安装插件。'
- en: '`docker plugin upgrade`: This command upgrades an existing plugin to a newer
    version.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker plugin upgrade`：此命令将现有插件升级到更新版本。'
- en: '`docker plugin rm`: This command removes plugins by removing their information
    from Docker Engine.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker plugin rm`：此命令通过从Docker Engine中删除其信息来删除插件。'
- en: '`docker plugin ls`: This command lists the installed plugins.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker plugin ls`：此命令列出已安装的插件。'
- en: '`docker plugin inspect`: This command displays detailed information on plugins.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker plugin inspect`：此命令显示有关插件的详细信息。'
- en: In the following section, you will learn how plugins are implemented in Docker
    with the plugin API.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，您将学习如何使用插件API在Docker中实现插件。
- en: Plugin API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件API
- en: Docker maintains a plugin API to help the community write their plugins. This
    means that anyone can develop new plugins as long as they implement it in accordance
    with the plugin API. This approach makes Docker an open and extensible platform.
    The plugin API is a **Remote Procedure Call** (**RPC**)-style JSON API that works
    over HTTP. Docker Engine sends HTTP POST requests to the plugin and uses the responses
    to continue its operations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker维护插件API，以帮助社区编写他们的插件。这意味着只要按照插件API的规定实现，任何人都可以开发新的插件。这种方法使Docker成为一个开放和可扩展的平台。插件API是一种**远程过程调用**（**RPC**）风格的JSON
    API，通过HTTP工作。Docker引擎向插件发送HTTP POST请求，并使用响应来继续其操作。
- en: 'Docker also provides an official open-source SDK for creating new plugins and
    **helper packages** to extend Docker Engine. The helper packages are boilerplate
    templates if you want to easily create and run new plugins. Currently, there are
    only helper packages in Go since Go is the main implementation language of Docker
    Engine itself. It is located at [https://github.com/docker/go-plugins-helpers](https://github.com/docker/go-plugins-helpers)
    and provides helpers for every kind of plugin supported by Docker:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker还提供了一个官方的开源SDK，用于创建新的插件和**辅助包**以扩展Docker引擎。辅助包是样板模板，如果您想轻松创建和运行新的插件。目前，由于Go是Docker引擎本身的主要实现语言，因此只有Go中的辅助包。它位于[https://github.com/docker/go-plugins-helpers](https://github.com/docker/go-plugins-helpers)，并为Docker支持的每种插件提供辅助程序：
- en: '![Figure 15.1: Go plugin helpers'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.1：Go插件助手'
- en: '](image/B15021_15_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_01.jpg)'
- en: 'Figure 15.1: Go plugin helpers'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：Go插件助手
- en: You can check each folder listed in the repository to create and run different
    types of plugins easily. In this chapter, you will explore the supported plugin
    types—namely, authorization, network, and volume plugins—through several practical
    exercises. The plugins enable Docker Engine to implement custom business requirements
    by providing additional functionalities along with the default Docker functionalities.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查存储库中列出的每个文件夹，以便轻松创建和运行不同类型的插件。在本章中，您将通过几个实际练习来探索支持的插件类型，即授权、网络和卷插件。这些插件使Docker引擎能够通过提供额外的功能来实现自定义业务需求，同时还具有默认的Docker功能。
- en: Authorization Plugins
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 授权插件
- en: 'Docker authorization is based on two modes: **all kinds of actions are enabled**
    or **all kinds of actions are disabled**. In other words, if a user can access
    the Docker daemon, they can run any command and consume the API or Docker client
    commands. If you need more granular access control methods, you need to use authorization
    plugins in Docker. Authorization plugins enhance authentication and permission
    for Docker Engine operations. They enable more granular access to control who
    can take specific actions on Docker Engine.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Docker授权基于两种模式：**启用所有类型的操作**或**禁用所有类型的操作**。换句话说，如果用户可以访问Docker守护程序，他们可以运行任何命令并使用API或Docker客户端命令。如果需要更细粒度的访问控制方法，则需要在Docker中使用授权插件。授权插件增强了Docker引擎操作的身份验证和权限。它们使得可以更细粒度地控制谁可以在Docker引擎上执行特定操作。
- en: 'Authorization plugins approve or deny the requests forwarded by Docker daemons
    using the request context. Therefore, the plugins should implement the following
    two methods:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 授权插件通过请求上下文批准或拒绝Docker守护程序转发的请求。因此，插件应实现以下两种方法：
- en: '`AuthZReq`: This method is called before the Docker daemon processes the request.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthZReq`：在Docker守护程序处理请求之前调用此方法。'
- en: '`AuthZRes`: This method is called before the response is returned from the
    Docker daemon to the client.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthZRes`：在从Docker守护程序返回响应给客户端之前调用此方法。'
- en: 'In the following exercise, you will learn how to configure and install an authorization
    plugin. You will install the **policy-based authorization** plugin created and
    maintained by Open Policy Agent ([https://www.openpolicyagent.org/](https://www.openpolicyagent.org/)).
    **Policy-based access** is based on the idea of granting access to the users based
    on some rules, namely **policies**. The source code of the plugin is available
    on GitHub at [https://github.com/open-policy-agent/opa-docker-authz](https://github.com/open-policy-agent/opa-docker-authz),
    and it works with policy files similar to the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将学习如何配置和安装授权插件。您将安装由Open Policy Agent创建和维护的**基于策略的授权**插件（[https://www.openpolicyagent.org/](https://www.openpolicyagent.org/)）。**基于策略的访问**是基于根据一些规则（即**策略**）授予用户访问权限的想法。插件的源代码可在GitHub上找到（[https://github.com/open-policy-agent/opa-docker-authz](https://github.com/open-policy-agent/opa-docker-authz)），它与类似以下的策略文件一起使用：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The policy files are stored in the host system where the Docker daemon can read.
    For instance, the policy file shown here only allows `GET` as the method of the
    request. It actually makes the Docker daemon read-only by disallowing any other
    methods, such as `POST`, `DELETE`, or `UPDATE`. In the following exercise, you
    will use a policy file and configure the Docker daemon to communicate with the
    authorization plugin and limit some requests.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 策略文件存储在Docker守护程序可以读取的主机系统中。例如，这里显示的策略文件只允许`GET`作为请求的方法。它实际上通过禁止任何其他方法（如`POST`、`DELETE`或`UPDATE`）使Docker守护程序变为只读。在接下来的练习中，您将使用一个策略文件并配置Docker守护程序与授权插件通信并限制一些请求。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Plugins and the commands in the following exercises work best in Linux environments,
    considering the installation and the configuration of the Docker daemon. If you
    are using a custom or toolbox Docker installation, you may want to complete the
    exercises in this chapter using a virtual machine.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，插件和命令在Linux环境中效果最佳，考虑到Docker守护程序的安装和配置。如果您使用的是自定义或工具箱式的Docker安装，您可能希望使用虚拟机来完成本章的练习。
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用`touch`命令创建文件，并使用`vim`命令在vim编辑器中处理文件。
- en: 'Exercise 15.01: Read-Only Docker Daemon with Authorization Plugins'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.01：具有授权插件的只读Docker守护程序
- en: In this exercise, you are required to create a read-only Docker daemon. This
    is a common approach if you want to limit the access and changes to your production
    environment. To achieve this, you will install and configure the plugin with a
    policy file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您需要创建一个只读的Docker守护程序。如果您想限制对生产环境的访问和更改，这是一种常见的方法。为了实现这一点，您将安装并配置一个带有策略文件的插件。
- en: 'To complete the exercise, perform the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成练习，请执行以下步骤：
- en: 'Create a file located at `/etc/docker/policies/authz.rego` by running the following
    commands:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令在`/etc/docker/policies/authz.rego`位置创建一个文件：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These commands create a file located at `/etc/docker/policies`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令创建一个位于`/etc/docker/policies`的文件：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the file with an editor and insert the following data:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用编辑器打开文件并插入以下数据：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can write the content into the file with the following commands:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令将内容写入文件中：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `cat` command is used to make the file content editable in the terminal.
    Unless you are running Ubuntu in headless mode, you may skip using CLI-based commands
    to edit the content of files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令用于在终端中使文件内容可编辑。除非您在无头模式下运行Ubuntu，否则可以跳过使用基于CLI的命令来编辑文件内容。'
- en: The policy file only allows `GET` methods in the Docker daemon; in other words,
    it makes the Docker daemon read-only.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 策略文件仅允许Docker守护程序中的`GET`方法；换句话说，它使Docker守护程序变为只读。
- en: 'Install the plugin by running the following command in your terminal and enter
    *y* when it prompts for permissions:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行以下命令安装插件，并在提示权限时输入*y*：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command installs the plugin located at `openpolicyagent/opa-docker-authz-v2:0.5`
    with the alias `opa-docker-authz:readonly`. In addition, the policy file from
    *Step 1* is passed as `opa-args`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令安装位于`openpolicyagent/opa-docker-authz-v2:0.5`的插件，并使用别名`opa-docker-authz:readonly`。此外，来自*步骤1*的策略文件被传递为`opa-args`：
- en: '![Figure 15.2: Plugin installation'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.2：插件安装'
- en: '](image/B15021_15_02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_02.jpg)'
- en: 'Figure 15.2: Plugin installation'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：插件安装
- en: 'Check for the installed plugins using the following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查已安装的插件：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This command lists the plugins:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出插件：
- en: '![Figure 15.3: Plugin listing'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.3：插件列表'
- en: '](image/B15021_15_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_03.jpg)'
- en: 'Figure 15.3: Plugin listing'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：插件列表
- en: 'Edit the Docker daemon configuration at `/etc/docker/daemon.json` with the
    following edition:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下版本编辑Docker守护程序配置位于`/etc/docker/daemon.json`：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can check the contents of the file with the `cat /etc/docker/daemon.json`
    command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`cat /etc/docker/daemon.json`命令检查文件的内容。
- en: 'Reload the Docker daemon with the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新加载Docker守护程序：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command kills the process of `dockerd` by getting its process ID with
    the `pidof` command. In addition, it sends the `HUP` signal, which is the signal
    sent to Linux processes to update their configuration. In short, you are reloading
    the Docker daemon with the new authorization plugin configuration. Run the following
    listing command to check whether the listing action is allowed:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令通过使用`pidof`命令获取`dockerd`的进程ID来终止`dockerd`的进程。此外，它发送`HUP`信号，这是发送给Linux进程以更新其配置的信号。简而言之，您正在使用新的授权插件配置重新加载Docker守护程序。运行以下列出命令以检查列出操作是否被允许：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This command lists the running containers, and it shows that the listing action
    is allowed:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令列出正在运行的容器，并显示列出操作是允许的：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command to check whether creating new containers is permitted:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以检查是否允许创建新容器：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This command creates and runs a container; however, since the action is not
    read-only, it is not allowed:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令创建并运行一个容器；但是，由于该操作不是只读的，因此不被允许：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Check for the logs of the Docker daemon for any plugin-related lines:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Docker守护程序的日志是否有任何与插件相关的行：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`journalctl` is a command-line tool for displaying logs from `systemd` processes.
    `systemd` processes store the logs in binary format. `journalctl` is required
    to read the log texts.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`journalctl`是用于显示来自`systemd`进程的日志的命令行工具。`systemd`进程以二进制格式存储日志。需要`journalctl`来读取日志文本。'
- en: 'The following output shows that the tested actions in *Step 7* and *Step 8*
    passed through the authorization plugin with the `"Returning OPA policy decision:
    true"` and `"Returning OPA policy decision: false"` lines. It shows that our plugin
    has allowed the first action and declined the second one:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '以下输出显示*步骤7*和*步骤8*中测试的操作通过授权插件，并显示了`"Returning OPA policy decision: true"`和`"Returning
    OPA policy decision: false"`行。它显示我们的插件已允许第一个操作并拒绝了第二个操作：'
- en: '![Figure 15.4: Plugin logs'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.4：插件日志'
- en: '](image/B15021_15_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_04.jpg)'
- en: 'Figure 15.4: Plugin logs'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：插件日志
- en: 'Stop using the plugin by removing the `authorization-plugins` part from `/etc/docker/daemon.json`
    and reload the Docker daemon similar to what was done in *Step 6*:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从`/etc/docker/daemon.json`中删除`authorization-plugins`部分并重新加载Docker守护程序，停止使用插件，类似于*步骤6*中所做的操作：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Disable and remove the plugin with the following commands:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令禁用和删除插件：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These commands disable and remove the plugin from Docker by returning the names
    of the plugins.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令通过返回插件的名称来禁用和删除Docker中的插件。
- en: In this exercise, you have configured and installed an authorization plugin
    into Docker. In the next section, you will learn more about networking plugins
    in Docker.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经配置并安装了一个授权插件到Docker中。在下一节中，您将学习更多关于Docker中的网络插件。
- en: Network Plugins
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络插件
- en: 'Docker supports a wide range of networking technologies with the help of Docker
    networking plugins. Although it supports container-to-container and host-to-container
    networking with full functionality, the plugins enable us to extend networking
    to further technologies. The networking plugins implement a remote driver as a
    part of different network topologies, such as virtual extensible LAN (`vxlan`)
    and MAC virtual LAN (`macvlan)`. You can install and enable networking plugins
    with the Docker plugin commands. Also, you need to specify the name of the network
    driver with `--driver` flags. For instance, if you have installed an enabled `my-new-network-technology`
    driver and want your new network to be a part of it, you need to set a `driver`
    flag:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Docker通过Docker网络插件支持各种网络技术。虽然它支持容器对容器和主机对容器的完整功能的网络，但插件使我们能够将网络扩展到更多的技术。网络插件实现了远程驱动程序作为不同网络拓扑的一部分，比如虚拟可扩展局域网（`vxlan`）和MAC虚拟局域网（`macvlan`）。您可以使用Docker插件命令安装和启用网络插件。此外，您需要使用`--driver`标志指定网络驱动程序的名称。例如，如果您已经安装并启用了`my-new-network-technology`驱动程序，并且希望您的新网络成为其中的一部分，您需要设置一个`driver`标志：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command creates a network named `mynet`, and the `my-new-network-technology`
    plugin manages all networking operations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令创建了一个名为`mynet`的网络，而`my-new-network-technology`插件管理所有网络操作。
- en: 'The community and third-party companies develop networking plugins. However,
    there are currently only two certified networking plugins in Docker Hub – Weave
    Net and Infoblox IPAM Plugin:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 社区和第三方公司开发了网络插件。然而，目前在Docker Hub上只有两个经过认证的网络插件 - Weave Net和Infoblox IPAM Plugin。
- en: '![Figure 15.5: Networking plugins in Docker Hub'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.5：Docker Hub中的网络插件'
- en: '](image/B15021_15_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_05.jpg)'
- en: 'Figure 15.5: Networking plugins in Docker Hub'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5：Docker Hub中的网络插件
- en: '**Infoblox IPAM Plugin** focuses on providing IP address management services,
    such as writing DNS records and configuring DHCP settings. **Weave Net** focuses
    on creating resilient networking for Docker containers with encryption, service
    discovery, and multicast networking.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Infoblox IPAM Plugin**专注于提供IP地址管理服务，比如编写DNS记录和配置DHCP设置。**Weave Net**专注于为Docker容器创建弹性网络，具有加密、服务发现和组播网络。'
- en: 'The official SDK provided in `go-plugin-helpers` has Go handlers to create
    network extensions for Docker. The `Driver` interface is defined as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在`go-plugin-helpers`提供的官方SDK中，有用于为Docker创建网络扩展的Go处理程序。`Driver`接口定义如下：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The complete code is available at [https://github.com/docker/go-plugins-helpers/blob/master/network/api.go](https://github.com/docker/go-plugins-helpers/blob/master/network/api.go).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可在[https://github.com/docker/go-plugins-helpers/blob/master/network/api.go](https://github.com/docker/go-plugins-helpers/blob/master/network/api.go)找到。
- en: When you check the interface functions, the networking plugins should provide
    operations for networking, endpoints, and external connectivity. For instance,
    a network plugin should implement a network life cycle with the `CreateNetwork`,
    `AllocateneNetwork`, `DeleteNetwork`, and `FreeNetwork` functions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当您检查接口功能时，网络插件应提供网络、端点和外部连接的操作。例如，网络插件应使用`CreateNetwork`、`AllocateneNetwork`、`DeleteNetwork`和`FreeNetwork`函数实现网络生命周期。
- en: Similarly, the endpoint life cycle should be implemented by the `CreateEndpoint`,
    `DeleteEndpoint`, and `EndpointInfo` functions. In addition, there are some extension
    integration and management functions to implement, including `GetCapabilities`,
    `Leave`, and `Join`. The services also need their specific request and response
    types to work in a managed plugin environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，端点生命周期应该由`CreateEndpoint`、`DeleteEndpoint`和`EndpointInfo`函数实现。此外，还有一些扩展集成和管理函数需要实现，包括`GetCapabilities`、`Leave`和`Join`。服务还需要它们特定的请求和响应类型以在托管插件环境中工作。
- en: In the following exercise, you will create a new network using the Weave Net
    plugin and let containers connect using the new network.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将使用Weave Net插件创建一个新网络，并让容器使用新网络连接。
- en: 'Exercise 15.02: Docker Network Plugins in Action'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.02：Docker网络插件实战
- en: Docker network plugins take over the network operations for specific network
    instances and implement custom technologies. In this exercise, you will install
    and configure a network plugin to create a Docker network. You will then create
    a three-replica application of a Docker image and use the plugin to connect these
    three instances. You can use the Weave Net plugin to achieve this goal.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Docker网络插件接管特定网络实例的网络操作并实现自定义技术。在这个练习中，您将安装和配置一个网络插件来创建一个Docker网络。然后，您将创建一个Docker镜像的三个副本应用程序，并使用插件连接这三个实例。您可以使用Weave
    Net插件来实现这个目标。
- en: 'To complete the exercise, perform the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成练习，请执行以下步骤：
- en: 'Initialize a Docker swarm (if you have not enabled one before) by running the
    following command in the terminal:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行以下命令初始化Docker swarm（如果之前未启用）：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command creates a Docker swarm to deploy multiple instances of the application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建一个Docker swarm以部署多个应用程序实例：
- en: '![Figure 15.6: Swarm initialization'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.6：Swarm初始化'
- en: '](image/B15021_15_06.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_06.jpg)'
- en: 'Figure 15.6: Swarm initialization'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：Swarm初始化
- en: 'Install the **Weave Net** plugin by running the following command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装**Weave Net**插件：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This command installs the plugin from the store and grants all permissions:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令从商店安装插件并授予所有权限：
- en: '![Figure 15.7: Plugin installation'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.7：插件安装'
- en: '](image/B15021_15_07.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_07.jpg)'
- en: 'Figure 15.7: Plugin installation'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：插件安装
- en: 'Create a new network using the driver with the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令使用驱动程序创建新网络：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This command creates a new network named `weave-custom-net` using the driver
    provided with the plugin:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用插件提供的驱动程序创建名为`weave-custom-net`的新网络：
- en: '![Figure 15.8: Creating the network'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.8：创建网络'
- en: '](image/B15021_15_08.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_08.jpg)'
- en: 'Figure 15.8: Creating the network'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：创建网络
- en: Following the successful creation of the network, a randomly generated network
    name will be printed as shown in the preceding code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建网络后，将打印出随机生成的网络名称，如前面的代码所示。
- en: 'Create a three-replica application with the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个三个副本的应用程序：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This command creates three replicas of the `onuryilmaz/hello-plain-text` image
    and uses `the weave-custom-net` network to connect the instances. In addition,
    it uses the name `workshop` and publishes to the port `80`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令创建了`onuryilmaz/hello-plain-text`镜像的三个副本，并使用`the weave-custom-net`网络连接实例。此外，它使用名称`workshop`并发布到端口`80`：
- en: '![Figure 15.9: Application creation'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.9：应用程序创建'
- en: '](image/B15021_15_09.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_09.jpg)'
- en: 'Figure 15.9: Application creation'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9：应用程序创建
- en: 'Get the names of the containers by running the following commands:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令获取容器的名称：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'These commands list the running Docker container names and filter by `workshop`
    instances. You will need the name of the containers to test the connection between
    them:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令列出了正在运行的Docker容器名称，并按`workshop`实例进行过滤。您将需要容器的名称来测试它们之间的连接：
- en: '![Figure 15.10: Container names'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.10：容器名称'
- en: '](image/B15021_15_10.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_10.jpg)'
- en: 'Figure 15.10: Container names'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10：容器名称
- en: 'Run the following command to connect the first container to the second one:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令将第一个容器连接到第二个容器：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This command connects the first and second containers using the `curl` command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令使用`curl`命令连接第一个和第二个容器：
- en: '![Figure 15.11: Connection between containers'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.11：容器之间的连接'
- en: '](image/B15021_15_11.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_11.jpg)'
- en: 'Figure 15.11: Connection between containers'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.11：容器之间的连接
- en: The preceding command is running inside the first container and the `curl` command
    reaches the second container. The output shows the server and the request information.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令在第一个容器内运行，并且`curl`命令到达第二个容器。输出显示了服务器和请求信息。
- en: 'Similar to *Step 6*, connect the first container to the third one:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于*步骤6*，将第一个容器连接到第三个容器：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As expected, different server names and addresses are retrieved in *Step 6*
    and *Step 7*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，在*步骤6*和*步骤7*中检索到了不同的服务器名称和地址：
- en: '![Figure 15.12: Connection between containers'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.12：容器之间的连接'
- en: '](image/B15021_15_12.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_12.jpg)'
- en: 'Figure 15.12: Connection between containers'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.12：容器之间的连接
- en: This shows that the containers created using the custom Weave Net network are
    working as expected.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明使用自定义Weave Net网络创建的容器正在按预期工作。
- en: 'You can delete the application and network with the following commands:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令删除应用程序和网络：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this exercise, you have installed and used a networking plugin in Docker.
    Besides that, you have created a containerized application that connects using
    a custom network driver. In the next section, you will learn more about the volume
    plugins in Docker.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经在Docker中安装并使用了一个网络插件。除此之外，您还创建了一个使用自定义网络驱动程序连接的容器化应用程序。在下一节中，您将学习更多关于Docker中的卷插件。
- en: Volume Plugins
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷插件
- en: Docker volumes are mounted to containers to allow stateful applications to run
    in containers. By default, volumes are created in the filesystem of the host machine
    and managed by Docker. In addition, while creating a volume, it is possible to
    specify a volume driver. For instance, you can mount volumes over network or storage
    providers such as **Google**, **Azure**, or **AWS**. You can also run your database
    locally in Docker containers while the data volumes are persistent in AWS storage
    services. This way, your data volumes can be reused in the future with other database
    instances running in any other location. To use different volume drivers, you
    need to enhance Docker with volume plugins.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Docker卷被挂载到容器中，以允许有状态的应用程序在容器中运行。默认情况下，卷是在主机文件系统中创建并由Docker管理的。此外，在创建卷时，可以指定卷驱动程序。例如，您可以挂载网络或存储提供程序（如Google、Azure或AWS）的卷。您还可以在Docker容器中本地运行数据库，而数据卷在AWS存储服务中是持久的。这样，您的数据卷可以在将来与在任何其他位置运行的其他数据库实例一起重用。要使用不同的卷驱动程序，您需要使用卷插件增强Docker。
- en: 'Docker volume plugins control the life cycle of volumes, including the `Create`,
    `Mount`, `Unmount`, `Path`, and `Remove` functions. In the plugin SDK, the volume
    driver interface is defined as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Docker卷插件控制卷的生命周期，包括`Create`、`Mount`、`Unmount`、`Path`和`Remove`等功能。在插件SDK中，卷驱动程序接口定义如下：
- en: '[PRE26]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The complete driver code is available at [https://github.com/docker/go-plugins-helpers/blob/master/volume/api.go](https://github.com/docker/go-plugins-helpers/blob/master/volume/api.go).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的驱动程序代码可在[https://github.com/docker/go-plugins-helpers/blob/master/volume/api.go](https://github.com/docker/go-plugins-helpers/blob/master/volume/api.go)找到。
- en: The functions of the driver interface show that volume drivers focus on basic
    operations, such as `Create`, `List`, `Get`, and `Remove` operations, of the volumes.
    The plugins are responsible for mounting and unmounting volumes to and from containers.
    If you want to create a new volume driver, you need to implement this interface
    with the corresponding request and response types.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序接口的功能显示，卷驱动程序专注于卷的基本操作，如`Create`、`List`、`Get`和`Remove`操作。插件负责将卷挂载到容器中并从容器中卸载。如果要创建新的卷驱动程序，需要使用相应的请求和响应类型实现此接口。
- en: 'There are numerous volume plugins already available from Docker Hub and the
    open-source community. For instance, there are currently 18 volume plugins categorized
    and verified on Docker Hub:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub和开源社区已经提供了大量的卷插件。例如，目前在Docker Hub上已经分类和验证了18个卷插件：
- en: '![Figure 15.13: Volume plugins in Docker Hub'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.13：Docker Hub上的卷插件'
- en: '](image/B15021_15_13.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_13.jpg)'
- en: 'Figure 15.13: Volume plugins in Docker Hub'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.13：Docker Hub上的卷插件
- en: Most of the plugins focus on providing storage from different sources, such
    as cloud providers and storage technologies. Based on your business requirements
    and technology stack, you may consider volume plugins in your Docker setup.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数插件专注于从不同来源提供存储，如云提供商和存储技术。根据您的业务需求和技术堆栈，您可以在Docker设置中考虑卷插件。
- en: In the following exercise, you will create volumes in remote systems using SSH
    connections and volumes in containers. For the volumes created and used over SSH
    connections, you will use the `open-source docker-volume-sshfs` plugin available
    at [https://github.com/vieux/docker-volume-sshfs](https://github.com/vieux/docker-volume-sshfs).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，您将使用SSH连接在远程系统中创建卷，并在容器中创建卷。对于通过SSH连接创建和使用的卷，您将使用[https://github.com/vieux/docker-volume-sshfs](https://github.com/vieux/docker-volume-sshfs)上提供的`open-source
    docker-volume-sshfs`插件。
- en: 'Exercise 15.03: Volume Plugins in Action'
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.03：卷插件的实际应用
- en: Docker volume plugins manage the life cycle of volumes by providing storage
    from different providers and technologies. In this exercise, you will install
    and configure a volume plugin to create volumes over an SSH connection. Following
    the successful creation of the volumes, you will use them in containers and ensure
    that the files are persisted. You can use the `docker-volume-sshfs` plugin to
    achieve this goal.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Docker卷插件通过从不同提供商和技术提供存储来管理卷的生命周期。在这个练习中，您将安装和配置一个卷插件，以通过SSH连接创建卷。在成功创建卷之后，您将在容器中使用它们，并确保文件被持久化。您可以使用`docker-volume-sshfs`插件来实现这个目标。
- en: 'To complete the exercise, perform the following steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个练习，请执行以下步骤：
- en: 'Install the `docker-volume-sshfs` plugin by running the following command in
    your terminal:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令安装`docker-volume-sshfs`插件：
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This command installs the plugin by granting all the permissions:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令通过授予所有权限来安装插件：
- en: '![Figure 15.14: Plugin installation'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.14：插件安装'
- en: '](image/B15021_15_14.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_14.jpg)'
- en: 'Figure 15.14: Plugin installation'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.14：插件安装
- en: 'Create a Docker container with an SSH connection to provide volumes to other
    containers with the following command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个带有SSH连接的Docker容器，以便为其他容器提供卷：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This command creates and runs an `sshd` container named `volume_provider`. Port
    `2222` is published and will be used to connect to this container in the following
    steps.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建并运行一个名为`volume_provider`的`sshd`容器。端口`2222`被发布，并将在接下来的步骤中用于连接到此容器。
- en: 'You should get an output like the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到以下输出：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a new volume, named `volume-over-ssh`, by running the following command:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令创建一个名为`volume-over-ssh`的新卷：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This command creates a new volume using the `vieux/sshfs` driver and the `ssh`
    connection specified with `sshcmd` and the `password` and `port` parameters:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令使用`vieux/sshfs`驱动程序和`sshcmd`、`password`和`port`参数指定的`ssh`连接创建一个新卷：
- en: '[PRE31]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a new file and save it in the volume created in *Step 3* by running
    the following command:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令在*步骤3*中创建的卷中创建一个新文件并保存：
- en: '[PRE32]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This command runs a container by mounting `volume-over-ssh`. It then creates
    a file and writes into it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令通过挂载`volume-over-ssh`来运行一个容器。然后创建一个文件并写入其中。
- en: 'Check the contents of the file created in *Step 4* by running the following command:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查*步骤4*中创建的文件的内容：
- en: '[PRE33]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This command runs a container by mounting the same volume and reads the file
    from it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令通过挂载相同的卷来运行一个容器，并从中读取文件：
- en: '[PRE34]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '(Optional) Delete the volume by running the following command:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）通过运行以下命令删除卷：
- en: '[PRE35]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this exercise, you have installed and used a volume plugin in Docker. Furthermore,
    you have created a volume and used it from multiple containers for writing and reading.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经在Docker中安装并使用了卷插件。此外，您已经创建了一个卷，并从多个容器中用于写入和读取。
- en: In the next activity, you will install WordPress in Docker using networking
    and volume plugins.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的活动中，您将使用网络和卷插件在Docker中安装WordPress。
- en: 'Activity 15.01: Installing WordPress with Network and Volume Plugins'
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动15.01：使用网络和卷插件安装WordPress
- en: 'You are tasked with designing and deploying a blog and its database as microservices
    in Docker using networking and volume plugins. You will be using **WordPress**
    since it is the most popular **Content Management System** (**CMS**), being used
    by more than one-third of all websites on the internet. The storage team requires
    you to use volumes over **SSH** for the WordPress content. In addition, the network
    team wants you to use **Weave Net** for networking between the containers. With
    these tools, you will create networks and volumes using Docker plugins and use
    them for WordPress and its database:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您的任务是在Docker中使用网络和卷插件设计和部署博客及其数据库作为微服务。您将使用WordPress，因为它是最流行的内容管理系统，被超过三分之一的网站使用。存储团队要求您使用SSH来进行WordPress内容的卷。此外，网络团队希望您在容器之间使用Weave
    Net进行网络连接。使用这些工具，您将使用Docker插件创建网络和卷，并将它们用于WordPress及其数据库：
- en: Create a Docker network (namely, `wp-network`) using the **Weave Net** plugin.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Weave Net插件创建一个名为`wp-network`的Docker网络。
- en: Create a volume with the name `wp-content`, using the `vieux/sshfs` driver.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`vieux/sshfs`驱动程序创建名为`wp-content`的卷。
- en: Create a container with the name `mysql` to run the `mysql:5.7` image. Ensure
    that the `MYSQL_ROOT_PASSWORD`, `MYSQL_DATABASE`, `MYSQL_USER`, and `MYSQL_PASSWORD`
    environment variables are set. In addition, the container should use `wp-network`
    from *Step 1*.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mysql`的容器来运行`mysql:5.7`镜像。确保设置`MYSQL_ROOT_PASSWORD`、`MYSQL_DATABASE`、`MYSQL_USER`和`MYSQL_PASSWORD`环境变量。此外，容器应该使用*步骤1*中的`wp-network`。
- en: Create a container with the name `wordpress` and use the volume from *Step 2*
    mounted at `/var/www/html/wp-content`. For the configuration of WordPress, do
    not forget to set the `WORDPRESS_DB_HOST`, `WORDPRESS_DB_USER`, `WORDPRESS_DB_PASSWORD`,
    and `WORDPRESS_DB_NAME` environment variables in accordance with *Step 3*. In
    addition, you need to publish port `80` to port `8080`, reachable from the browser.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`wordpress`的容器，并使用*步骤2*中挂载在`/var/www/html/wp-content`的卷。对于WordPress的配置，不要忘记根据*步骤3*设置`WORDPRESS_DB_HOST`、`WORDPRESS_DB_USER`、`WORDPRESS_DB_PASSWORD`和`WORDPRESS_DB_NAME`环境变量。此外，您需要将端口`80`发布到端口`8080`，可以从浏览器访问。
- en: 'You should have the `wordpress` and `mysql` containers running:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该运行`wordpress`和`mysql`容器：
- en: '![Figure 15.15: The WordPress and database containers'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.15：WordPress和数据库容器'
- en: '](image/B15021_15_15.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_15.jpg)'
- en: 'Figure 15.15: The WordPress and database containers'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.15：WordPress和数据库容器
- en: 'In addition, you should be able to reach the WordPress setup screen in the browser:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该能够在浏览器中访问WordPress设置屏幕：
- en: '![Figure 15.16: WordPress setup screen'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.16：WordPress设置屏幕'
- en: '](image/B15021_15_16.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15021_15_16.jpg)'
- en: 'Figure 15.16: WordPress setup screen'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.16：WordPress设置屏幕
- en: Note
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor359).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以通过[此链接](B15021_Solution_Final_SMP.xhtml#_idTextAnchor359)找到。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on extending Docker with plugins. Docker operations can
    be enhanced by custom storage, network, or authorization methods by installing
    and using the Docker plugins. You first considered plugin management in Docker
    and the plugin API. With the plugin API, you are free to extend Docker by writing
    new plugins and make Docker work for you.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了使用插件扩展Docker。通过安装和使用Docker插件，可以通过自定义存储、网络或授权方法增强Docker操作。您首先考虑了Docker中的插件管理和插件API。通过插件API，您可以通过编写新插件来扩展Docker，并使Docker为您工作。
- en: The chapter then covered authorization plugins and how the Docker daemon is
    configured to work with the plugins. If you are using Docker in production or
    enterprise environments, authorization plugins are essential tools to control
    who can access your containers. You then explored network plugins and how they
    extend communication between containers.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 本章然后涵盖了授权插件以及Docker守护程序如何配置以与插件一起工作。如果您在生产或企业环境中使用Docker，授权插件是控制谁可以访问您的容器的重要工具。然后您探索了网络插件以及它们如何扩展容器之间的通信。
- en: Although basic networking is already covered by Docker, we looked at how networking
    plugins are the gateway to new networking capabilities. This led to the final
    section, in which volume plugins were presented to show how custom storage options
    are enabled in Docker. If your business environment or technology stack requires
    you to extend Docker's capabilities, it is essential to learn the plugins and
    how to use them.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Docker已经涵盖了基本的网络功能，但我们看了一下网络插件如何成为新网络功能的入口。这导致了最后一部分，其中介绍了卷插件，以展示如何在Docker中启用自定义存储选项。如果您的业务环境或技术堆栈要求您扩展Docker的功能，学习插件以及如何使用它们是至关重要的。
- en: The end of this chapter also brings us to the end of this book. You began this
    journey all the way back in the first chapter learning the basics of Docker and
    running your very first containers on your system and look at how far you have
    come. Just in the course of this book, you have worked with Dockerfiles to create
    your images and learned how to publish these images using a public repository
    such as Docker Hub or to store your images on a repository running on your system.
    You have learned to use multi-stage Dockerfiles and implement your services using
    docker-compose. You have even mastered the finer details of networking and container
    storage, as well as the implementation of CI/CD pipelines as part of your projects
    and testing as part of your Docker image builds.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结尾也标志着本书的结束。你从第一章开始学习Docker的基础知识，运行了你的第一个容器，看看你已经走了多远。在本书的学习过程中，你使用Dockerfile创建了自己的镜像，并学会了如何使用Docker
    Hub等公共仓库发布这些镜像，或者将它们存储在你的系统上运行的仓库中。你学会了使用多阶段的Dockerfile，并使用docker-compose来实现你的服务。你甚至掌握了网络和容器存储的细节，以及在项目中实施CI/CD流水线和在Docker镜像构建中进行测试。
- en: You practiced orchestrating your Docker environments using applications such
    as Docker Swarm and Kubernetes, before taking a closer look at Docker security
    and container best practices. Your journey then continued with real-world monitoring
    of your service metrics and container logs, before finishing up with Docker plugins
    to help extend your container service functionality. We've covered a lot of work
    to improve your skills and knowledge of Docker. Hopefully, it has taken your experience
    with the application to the next level. Please refer to the interactive version
    to learn how to troubleshoot and report issues when things do go wrong. You will
    also get to know about the current state of Docker Enterprise and the next big
    moves that will be made when it comes to the usage and development of Docker.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你练习了使用Docker Swarm和Kubernetes等应用程序编排你的Docker环境，然后更深入地了解了Docker安全和容器最佳实践。你的旅程继续进行，监控你的服务指标和容器日志，最后使用Docker插件来帮助扩展你的容器服务功能。我们涵盖了大量内容，以提高你对Docker的技能和知识。希望这将使你的应用经验达到一个新的水平。请参考交互式版本，了解如何在出现问题时进行故障排除和报告。你还将了解Docker
    Enterprise的当前状态以及在Docker的使用和开发方面即将迈出的重要步伐。
