["```java\nint topScore1;\nint topScore2;\nint topScore3;\n//96 more lines like the above\nint topScore100;\n```", "```java\ntopScore100 = topScore99;\ntopScore99 = topScore98;\ntopScore98 = topScore97;\n//96 more lines like the above\ntopScore1 = score;\n```", "```java\nint [] intArray;\n```", "```java\nString [] classNames;\nboolean [] bankOfSwitches;\nfloat [] closingBalancesInMarch;\n```", "```java\nintArray = new int [100];\n```", "```java\nintArray[0] = 5;\nintArray[1] = 6;\nintArray[2] = 7;\n```", "```java\nintArray[3]= \"John Carmack\";//Won't compile\n```", "```java\nintArray[3] = 123;\n```", "```java\nintArray[10] = intArray[9] - intArray[4];\n```", "```java\nint myNamedInt = intArray [3];\n```", "```java\nint lengthOfSomeArray = someArray.length;\n```", "```java\nString[][] countriesAndCities;\n```", "```java\nsomeArray[someLocation];\n```", "```java\n    //Declaring an array\n    int[] ourArray;\n\n    //Allocate memory for a maximum size of 5 elements\n    ourArray = new int[5];\n\n    //Initialize ourArray with values\n    //The values are arbitrary as long as they are int\n    //The indexes are not arbitrary 0 through 4 or crash!\n\n    ourArray[0] = 25;\n    ourArray[1] = 50;\n    ourArray[2] = 125;\n    ourArray[3] = 68;\n    ourArray[4] = 47;\n    ```", "```java\n    //Output all the stored values\n    Log.i(\"info\", \"Here is ourArray:\");\n    Log.i(\"info\", \"[0] = \"+ourArray[0]);\n    Log.i(\"info\", \"[1] = \"+ourArray[1]);\n    Log.i(\"info\", \"[2] = \"+ourArray[2]);\n    Log.i(\"info\", \"[3] = \"+ourArray[3]);\n    Log.i(\"info\", \"[4] = \"+ourArray[4]);\n\n    //We can do any calculation with an array element\n    //As long as it is appropriate to the contained type\n    //Like this:\n    int answer = ourArray[0] +\n        ourArray[1] +\n        ourArray[2] +\n        ourArray[3] +\n        ourArray[4];\n\n    Log.i(\"info\", \"Answer = \"+ answer);\n    ```", "```java\ninfo\ufe55 Here is ourArray:\ninfo\ufe55 [0] = 25\ninfo\ufe55\n [1] = 50\ninfo\ufe55 [2] = 125\ninfo\ufe55 [3] = 68\ninfo\ufe55 [4] = 47\ninfo\ufe55 Answer = 315 \n\n```", "```java\n    //Declaring and allocating in one step\n    int[] ourArray = new int[1000];\n\n    //Let's initialize ourArray using a for loop\n    //Because more than a few variables is allot of typing!\n    for(int i = 0; i < 1000; i++){\n       //Put the value of ourValue into our array\n       //At the position determined by i.\n       ourArray[i] = i*5;\n\n                //Output what is going on\n                Log.i(\"info\", \"i = \" + i);\n                Log.i(\"info\", \"ourArray[i] = \" + ourArray[i]);\n    }\n    ```", "```java\n    info\ufe55 i = 0\n    info\ufe55 ourArray[i] = 0\n    info\ufe55 i = 1\n    info\ufe55 ourArray[i] = 5\n    info\ufe55 i = 2\n    info\ufe55\n     ourArray[i] = 10\n\n    ```", "```java\n    info\ufe55 ourArray[i] = 4985\n    info\ufe55 i = 998\n    info\ufe55 ourArray[i] = 4990\n    info\ufe55 i = 999\n    info\ufe55 ourArray[i] = 4995\n\n    ```", "```java\nint[] ourArray = new int[1000];\n```", "```java\n(int i = 0; i < 1000; i++){\n```", "```java\nourArray[i] = i*5;\n```", "```java\nLog.i(\"info\", \"i = \" + i);\nLog.i(\"info\", \"ourArray[i] = \" + ourArray[i]);\n```", "```java\n    //A Random object for generating question numbers later\n    Random randInt = new Random();\n    //And a variable to hold the random value generated\n    int questionNumber;\n\n    //We declare and allocate in separate stages for clarity\n    //but we don't have to\n    String[][] countriesAndCities;\n    //Here we have a 2 dimensional array\n\n    //Specifically 5 arrays with 2 elements each\n    //Perfect for 5 \"What's the capital city\" questions\n    countriesAndCities = new String[5][2];\n\n    //Now we load the questions and answers into our arrays\n    //You could do this with less questions to save typing\n    //But don't do more or you will get an exception\n    countriesAndCities [0][0] = \"United Kingdom\";\n    countriesAndCities [0][1] = \"London\";\n\n    countriesAndCities [1][0] = \"USA\";\n    countriesAndCities [1][1] = \"Washington\";\n\n    countriesAndCities [2][0] = \"India\";\n    countriesAndCities [2][1] = \"New Delhi\";\n\n    countriesAndCities [3][0] = \"Brazil\";\n    countriesAndCities [3][1] = \"Brasilia\";\n\n    countriesAndCities [4][0] = \"Kenya\";\n    countriesAndCities [4][1] = \"Nairobi\";\n    ```", "```java\n    //Now we know that the country is stored at element 0\n    //The matching capital at element 1\n    //Here are two variables that reflect this\n    int country = 0;\n    int capital = 1;\n\n    //A quick for loop to ask 3 questions\n    for(int i = 0; i < 3; i++){\n       //get a random question number between 0 and 4\n       questionNumber = randInt.nextInt(5);\n\n       //and ask the question and in this case just\n       //give the answer for the sake of brevity\n      Log.i(\"info\", \"The capital of \" +countriesAndCities[questionNumber][country]);\n\n      Log.i(\"info\", \"is \" +countriesAndCities[questionNumber][capital]);\n\n    }//end of for loop\n    ```", "```java\ninfo\ufe55 The capital of USA\ninfo\ufe55 is Washington\ninfo\ufe55 The capital of India\ninfo\ufe55 is New Delhi\ninfo\ufe55 The capital of United Kingdom\ninfo\ufe55 is London\n\n```", "```java\nRandom randInt = new Random();\n```", "```java\nint questionNumber;\n```", "```java\nString[][] countriesAndCities;\n```", "```java\ncountriesAndCities = new String[5][2];\n```", "```java\ncountriesAndCities [0][0] = \"United Kingdom\";\ncountriesAndCities [0][1] = \"London\";\n\ncountriesAndCities [1][0] = \"USA\";\ncountriesAndCities [1][1] = \"Washington\";\n\ncountriesAndCities [2][0] = \"India\";\ncountriesAndCities [2][1] = \"New Delhi\";\n\ncountriesAndCities [3][0] = \"Brazil\";\ncountriesAndCities [3][1] = \"Brasilia\";\n\ncountriesAndCities [4][0] = \"Kenya\";\ncountriesAndCities [4][1] = \"Nairobi\";\n```", "```java\nint country = 0;\nint capital = 1;\n```", "```java\nfor(int i = 0; i < 3; i++){\n```", "```java\nquestionNumber = randInt.nextInt(5);\n```", "```java\n  Log.i(\"info\", \"The capital of \" +countriesAndCities[questionNumber][country]);\n\n  Log.i(\"info\", \"is \" +countriesAndCities[questionNumber][capital]);\n\n}//end of for loop\n```", "```java\nint[] ourArray = new int[1000];\nint someValue = 1;//Arbitrary value\nourArray[1000] = someValue;//Won't compile as compiler knows this won't work.\n//Only locations 0 through 999 are valid\n```", "```java\nint[] ourArray = new int[1000];\nint someValue = 1;//Arbitrary value\nint x = 999;\nif(userDoesSomething){x++;//x now equals 1000\n}\nourArray[x] = someValue;\n//Array out of bounds exception if userDoesSomething evaluates to true! This is because we end up referencing position 1000 when the array only has positions 0 through 999\n//Compiler can't spot it and game will crash on player - yuck!\n```", "```java\n    public class MainActivity extends Activity {\n\n        private Handler myHandler;\n     boolean gameOn;\n     long startTime;\n\n    ```", "```java\n    //How many milliseconds is it since the UNIX epoch\n            startTime = System.currentTimeMillis();\n\n            myHandler = new Handler() {\n                public void handleMessage(Message msg) {\n                    super.handleMessage(msg);\n\n                    if (gameOn) {\n                        long seconds = ((System.currentTimeMillis() - startTime)) / 1000;\n                        Log.i(\"info\", \"seconds = \" + seconds);\n                    }\n\n                    myHandler.sendEmptyMessageDelayed(0, 1000);\n                }\n\n            };\n\n            gameOn = true;\n            myHandler.sendEmptyMessage(0);\n        }\n    ```", "```java\ninfo\ufe55 seconds = 1\ninfo\ufe55 seconds = 2\ninfo\ufe55 seconds = 3\ninfo\ufe55 seconds = 4\ninfo\ufe55 seconds = 5\ninfo\ufe55 seconds = 6\n\n```", "```java\nprivate Handler myHandler;\nboolean gameOn;\nlong startTime;\n```", "```java\nstartTime = System.currentTimeMillis();\n```", "```java\nmyHandler = new Handler() {\n     public void handleMessage(Message msg) {\n       super.handleMessage(msg);\n\n       if (gameOn) {\n         long seconds = ((System.currentTimeMillis() - startTime)) / 1000;\n             Log.i(\"info\", \"seconds = \" + seconds);\n         }\n\n       myHandler.sendEmptyMessageDelayed(0, 1000);\n      }\n\n };\n```", "```java\nlong seconds = ((System.currentTimeMillis() - startTime)) / 1000;\n```", "```java\nLog.i(\"info\", \"seconds = \" + seconds);\n```", "```java\nmyHandler.sendEmptyMessageDelayed(0, 1000);\n```", "```java\ngameOn = true;\n```", "```java\nmyHandler.sendEmptyMessage(0);\n```", "```java\n    public class MainActivity extends Activity implements View.\n        OnClickListener {\n    ```", "```java\n    private SoundPool soundPool;\n    int sample1 = -1;\n    int sample2 = -1;\n    int sample3 = -1;\n    ```", "```java\n    soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC,0);\n      try{\n        //Create objects of the 2 required classes\n              AssetManager assetManager = getAssets();\n              AssetFileDescriptor descriptor;\n\n              //create our three fx in memory ready for use\n              descriptor = assetManager.openFd(\"sample1.ogg\");\n              sample1 = soundPool.load(descriptor, 0);\n\n              descriptor = assetManager.openFd(\"sample2.ogg\");\n              sample2 = soundPool.load(descriptor, 0);\n\n              descriptor = assetManager.openFd(\"sample3.ogg\");\n              sample3 = soundPool.load(descriptor, 0);\n\n            }catch(IOException e){\n                //catch exceptions here\n            }\n    ```", "```java\n      //Make a button from each of the buttons in our layout\n         Button button1 =(Button) findViewById(R.id.button);\n         Button button2 =(Button) findViewById(R.id.button2);\n         Button button3 =(Button) findViewById(R.id.button3);\n\n         //Make each of them listen for clicks\n         button1.setOnClickListener(this);\n         button2.setOnClickListener(this);\n         button3.setOnClickListener(this);\n    ```", "```java\n    switch (view.getId()) {\n\n      case R.id.button://when the first button is pressed\n        //Play sample 1\n              soundPool.play(sample1, 1, 1, 0, 0, 1);\n              break;\n\n              //Now the other buttons\n              case R.id.button2:\n              soundPool.play(sample2, 1, 1, 0, 0, 1);\n              break;\n\n              case R.id.button3:\n              soundPool.play(sample3, 1, 1, 0, 0, 1);\n              break;\n            }\n    ```", "```java\nprivate SoundPool soundPool;\n```", "```java\nint sample1 = -1;\nint sample2 = -1;\nint sample3 = -1;\n```", "```java\nsoundPool = new SoundPool(10, AudioManager.STREAM_MUSIC,0);\n```", "```java\n  try{\n    //Create objects of the 2 required classes\n          AssetManager assetManager = getAssets();\n          AssetFileDescriptor descriptor;\n\n          //create our three fx in memory ready for use\n          descriptor = assetManager.openFd(\"sample1.ogg\");\n          sample1 = soundPool.load(descriptor, 0);\n\n          descriptor = assetManager.openFd(\"sample2.ogg\");\n          sample2 = soundPool.load(descriptor, 0);\n\n          descriptor = assetManager.openFd(\"sample3.ogg\");\n          sample3 = soundPool.load(descriptor, 0);\n\n        }catch(IOException e){\n            //catch exceptions here\n        }\n```", "```java\n          descriptor = assetManager.openFd(\"sample1.ogg\");\n          sample1 = soundPool.load(descriptor, 0);\n```", "```java\nsoundPool.play(sample1, 1, 1, 0, 0, 1);\n```", "```java\n    SharedPreferences prefs;\n    SharedPreferences.Editor editor;\n    String dataName = \"MyData\";\n    String stringName = \"MyString\";\n    String defaultString = \":-(\";\n    String currentString = \"\";//empty\n    Button button1;\n    ```", "```java\n    //initialize our two SharedPreferences objects\n    prefs = getSharedPreferences(dataName,MODE_PRIVATE);\n    editor = prefs.edit();\n\n    //Either load our string or\n    //if not available our default string\n    currentString = prefs.getString(stringName, defaultString);\n\n     //Make a button from the button in our layout\n     button1 =(Button) findViewById(R.id.button);\n\n     //Make each it listen for clicks\n     button1.setOnClickListener(this);\n\n     //load currentString to the button\n     button1.setText(currentString);\n    ```", "```java\n    //we don't need to switch here!\n    //There is only one button\n    //so only the code that actually does stuff\n\n    //Get a random number between 0 and 9\n    Random randInt = new Random();\n    int ourRandom = randInt.nextInt(10);\n\n    //Add the random number to the end of currentString\n    currentString = currentString + ourRandom;\n\n    //Save currentString to a file in case the user \n    //suddenly quits or gets a phone call\n    editor.putString(stringName, currentString);\n    editor.commit();\n\n     //update the button text\n     button1.setText(currentString);\n    ```", "```java\nSharedPreferences prefs;\nSharedPreferences.Editor editor;\n```", "```java\nString dataName = \"MyData\";\nString stringName = \"MyString\";\nString defaultString = \":-(\";\nString currentString = \"\";//empty\nButton button1;\n```", "```java\nprefs = getSharedPreferences(dataName,MODE_PRIVATE);\neditor = prefs.edit();\n\ncurrentString = prefs.getString(stringName, defaultString);\n```", "```java\nRandom randInt = new Random();\nint ourRandom = randInt.nextInt(10);\ncurrentString = currentString + ourRandom;\n```", "```java\neditor.putString(stringName, currentString);\neditor.commit();\n```", "```java\nbutton1.setText(currentString);\n```", "```java\n      public class MainActivity extends Activity implements View.OnClickListener {\n    ```", "```java\n      //Make a button from the button in our layout\n       Button button =(Button) findViewById(R.id.button);\n\n       //Make each it listen for clicks\n       button.setOnClickListener(this);\n    ```", "```java\n      Intent i;\n       i = new Intent(this, GameActivity.class);\n       startActivity(i);\n    ```", "```java\n      public class GameActivity extends Activity implements View.OnClickListener {\n    ```", "```java\n    public class GameActivity extends Activity implements View.OnClickListener {\n\n    //Prepare objects and sound references\n\n        //initialize sound variables\n        private SoundPool soundPool;\n        int sample1 = -1;\n        int sample2 = -1;\n        int sample3 = -1;\n        int sample4 = -1;\n\n        //for our UI\n        TextView textScore;\n        TextView textDifficulty;\n        TextView textWatchGo;\n\n        Button button1;\n        Button button2;\n        Button button3;\n        Button button4;\n        Button buttonReplay;\n    ```", "```java\n    //Some variables for our thread\n    int difficultyLevel = 3;\n    //An array to hold the randomly generated sequence\n    int[] sequenceToCopy = new int[100];\n\n    private Handler myHandler;\n    //Are we playing a sequence at the moment?\n    boolean playSequence = false;\n    //And which element of the sequence are we on\n    int elementToPlay = 0;\n\n    //For checking the players answer\n    int playerResponses;\n    int playerScore;\n    boolean isResponding;\n    ```", "```java\n    soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC,0);\n    try{\n      //Create objects of the 2 required classes\n      AssetManager assetManager = getAssets();\n      AssetFileDescriptor descriptor;\n\n      //create our three fx in memory ready for use\n      descriptor = assetManager.openFd(\"sample1.ogg\");\n      sample1 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample2.ogg\");\n            sample2 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample3.ogg\");\n            sample3 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample4.ogg\");\n            sample4 = soundPool.load(descriptor, 0);\n\n            }catch(IOException e){\n                //catch exceptions here\n            }\n    ```", "```java\n    //Reference all the elements of our UI \n    //First the TextViews\n    textScore = (TextView)findViewById(R.id.textScore);\n    textScore.setText(\"Score: \" + playerScore);\n    textDifficulty = (TextView)findViewById(R.id.textDifficulty);\n\n    textDifficulty.setText(\"Level: \" + difficultyLevel);\n    textWatchGo = (TextView)findViewById(R.id.textWatchGo);\n\n    //Now the buttons\n    button1 = (Button)findViewById(R.id.button);\n    button2 = (Button)findViewById(R.id.button2);\n    button3 = (Button)findViewById(R.id.button3);\n    button4 = (Button)findViewById(R.id.button4);\n    buttonReplay = (Button)findViewById(R.id.buttonReplay);\n\n    //Now set all the buttons to listen for clicks\n    button1.setOnClickListener(this);\n    button2.setOnClickListener(this);\n    button3.setOnClickListener(this);\n    button4.setOnClickListener(this);\n    buttonReplay.setOnClickListener(this);\n    ```", "```java\n    //This is the code which will define our thread\n    myHandler = new Handler() {\n      public void handleMessage(Message msg) {\n        super.handleMessage(msg);\n\n              if (playSequence) {\n              //All the thread action will go here\n\n              }\n\n              myHandler.sendEmptyMessageDelayed(0, 900);\n      }\n    };//end of thread\n\n    myHandler.sendEmptyMessage(0);\n    ```", "```java\n    public void createSequence(){\n      //For choosing a random button\n       Random randInt = new Random();\n       int ourRandom;\n       for(int i = 0; i < difficultyLevel; i++){\n       //get a random number between 1 and 4\n             ourRandom = randInt.nextInt(4);\n             ourRandom ++;//make sure it is not zero\n             //Save that number to our array\n             sequenceToCopy[i] = ourRandom;\n       }\n\n    }\n    ```", "```java\n    public void playASequence(){\n        createSequence();\n        isResponding = false;\n        elementToPlay = 0;\n        playerResponses = 0;\n        textWatchGo.setText(\"WATCH!\");\n        playSequence = true;\n    }\n    ```", "```java\n    public void sequenceFinished(){\n            playSequence = false;\n            //make sure all the buttons are made visible\n            button1.setVisibility(View.VISIBLE);\n            button2.setVisibility(View.VISIBLE);\n            button3.setVisibility(View.VISIBLE);\n            button4.setVisibility(View.VISIBLE);\n            textWatchGo.setText(\"GO!\");\n            isResponding = true;\n        }\n    ```", "```java\n    if (playSequence) {\n      //All the thread action will go here\n      //make sure all the buttons are made visible\n      button1.setVisibility(View.VISIBLE);\n      button2.setVisibility(View.VISIBLE);\n      button3.setVisibility(View.VISIBLE);\n      button4.setVisibility(View.VISIBLE);\n\n      switch (sequenceToCopy[elementToPlay]){\n        case 1:\n          //hide a button \n    button1.setVisibility(View.INVISIBLE);\n           //play a sound\n           soundPool.play(sample1, 1, 1, 0, 0, 1);\n           break;\n\n        case 2:\n          //hide a button \n    button2.setVisibility(View.INVISIBLE)\n          //play a sound\n          soundPool.play(sample2, 1, 1, 0, 0, 1);\n          break;\n\n        case 3:\n          //hide a button button3.setVisibility(View.INVISIBLE);\n          //play a sound\n          soundPool.play(sample3, 1, 1, 0, 0, 1);\n          break;\n\n      case 4:\n          //hide a button \n    button4.setVisibility(View.INVISIBLE);\n          //play a sound\n          soundPool.play(sample4, 1, 1, 0, 0, 1);\n             break;\n       }\n\n       elementToPlay++;\n       if(elementToPlay == difficultyLevel){\n       sequenceFinished();\n       }\n    }\n\n        myHandler.sendEmptyMessageDelayed(0, 900);\n    }\n\n    };\n    ```", "```java\nplayASequence();\n```", "```java\npublic void createSequence(){\n        //For choosing a random button\n        Random randInt = new Random();\n        int ourRandom;\n        for(int i = 0; i < difficultyLevel; i++){\n            //get a random number between 1 and 4\n            ourRandom = randInt.nextInt(4);\n            ourRandom ++;//make sure it is not zero\n            //Save that number to our array\n            sequenceToCopy[i] = ourRandom;\n        }\n\n    }\n```", "```java\npublic void playASequence(){\n        createSequence();\n        isResponding = false;\n        elementToPlay = 0;\n        playerResponses = 0;\n        textWatchGo.setText(\"WATCH!\");\n        playSequence = true;\n\n    }\n```", "```java\npublic void sequenceFinished(){\n        playSequence = false;\n        //make sure all the buttons are made visible\n        button1.setVisibility(View.VISIBLE);\n        button2.setVisibility(View.VISIBLE);\n        button3.setVisibility(View.VISIBLE);\n        button4.setVisibility(View.VISIBLE);\n        textWatchGo.setText(\"GO!\");\n        isResponding = true;\n    }\n```", "```java\nif (playSequence) {\n  //All the thread action will go here\n  //make sure all the buttons are made visible\n  button1.setVisibility(View.VISIBLE);\n  button2.setVisibility(View.VISIBLE);\n  button3.setVisibility(View.VISIBLE);\n  button4.setVisibility(View.VISIBLE);\n```", "```java\nswitch (sequenceToCopy[elementToPlay]){\n  case 1:\n    //hide a buttonbutton1.setVisibility(View.INVISIBLE);\n         //play a sound\n         soundPool.play(sample1, 1, 1, 0, 0, 1);\n         break;\n\n    //case 2, 3 and go here\n   }\n```", "```java\n   elementToPlay++;\n```", "```java\n   if(elementToPlay == difficultyLevel){\n   sequenceFinished();\n   }\n}\n```", "```java\n    myHandler.sendEmptyMessageDelayed(0, 900);\n}\n\n};\n```", "```java\n    if(!playSequence) {//only accept input if sequence not playing\n                switch (view.getId()) {\n                    //case statements here...\n                }\n    }\n    ```", "```java\n    case R.id.button:\n      //play a sound\n       soundPool.play(sample1, 1, 1, 0, 0, 1);\n       checkElement(1);\n       break;\n    ```", "```java\n    case R.id.button2:\n      //play a sound\n       soundPool.play(sample2, 1, 1, 0, 0, 1);\n       checkElement(2);\n       break;\n\n    case R.id.button3:\n       //play a sound\n       soundPool.play(sample3, 1, 1, 0, 0, 1);\n       checkElement(3);\n       break;\n\n    case R.id.button4:\n       //play a sound\n       soundPool.play(sample4, 1, 1, 0, 0, 1);\n       checkElement(4);\n       break;\n    ```", "```java\n    case R.id.buttonReplay:\n       difficultyLevel = 3;\n       playerScore = 0;\n       textScore.setText(\"Score: \" + playerScore);\n       playASequence();\n       break;\n    ```", "```java\n    public void checkElement(int thisElement){\n\n    if(isResponding) {\n      playerResponses++;\n       if (sequenceToCopy[playerResponses-1] == thisElement) { //Correct\n       playerScore = playerScore + ((thisElement + 1) * 2);\n       textScore.setText(\"Score: \" + playerScore);\n       if (playerResponses == difficultyLevel) {//got the whole sequence\n       //don't checkElement anymore\n       isResponding = false;\n       //now raise the difficulty\n       difficultyLevel++;\n       //and play another sequence\n       playASequence();\n        }\n\n    } else {//wrong answer\n      textWatchGo.setText(\"FAILED!\");\n        //don't checkElement anymore\n        isResponding = false;\n    }\n    }\n    ```", "```java\npublic void checkElement(int thisElement){\n```", "```java\nif(isResponding) {\n```", "```java\nplayerResponses++;\n```", "```java\n   if (sequenceToCopy[playerResponses-1] == thisElement) {  //Correct\n      playerScore = playerScore + ((thisElement + 1) * 2);\n      textScore.setText(\"Score: \" + playerScore);\n\n```", "```java\n      if (playerResponses == difficultyLevel) {\n```", "```java\n//got the whole sequence\n         //don't checkElement anymore\n         isResponding = false;\n         //now raise the difficulty\n         difficultyLevel++;\n         //and play another sequence\n         playASequence();\n   }\n```", "```java\n} else {\n  //wrong answer\n  textWatchGo.setText(\"FAILED!\");\n  //don't checkElement anymore\n  isResponding = false;\n  }\n}\n```", "```java\n    public class MainActivity extends Activity implements View.OnClickListener{\n\n        //for our hiscore (phase 4)\n     SharedPreferences prefs;\n     String dataName = \"MyData\";\n     String intName = \"MyString\";\n     int defaultInt = 0;\n     //both activities can see this\n     public static int hiScore;\n\n    ```", "```java\n    //for our high score (phase 4)\n    //initialize our two SharedPreferences objects\n    prefs = getSharedPreferences(dataName,MODE_PRIVATE);\n\n    //Either load our High score or\n    //if not available our default of 0\n    hiScore = prefs.getInt(intName, defaultInt);\n\n    //Make a reference to the Hiscore textview in our layout\n    TextView textHiScore =(TextView) findViewById(R.id.textHiScore);\n    //Display the hi score\n    textHiScore.setText(\"Hi: \"+ hiScore);\n    ```", "```java\n    //for our hiscore (phase 4)\n    SharedPreferences prefs;\n    SharedPreferences.Editor editor;\n    String dataName = \"MyData\";\n    String intName = \"MyInt\";\n    int defaultInt = 0;\n    int hiScore;\n    ```", "```java\n    //phase 4\n    //initialize our two SharedPreferences objects\n    prefs = getSharedPreferences(dataName,MODE_PRIVATE);\n    editor = prefs.edit();\n    hiScore = prefs.getInt(intName, defaultInt);\n    ```", "```java\n    } else {//wrong answer\n\n      textWatchGo.setText(\"FAILED!\");\n        //don't checkElement anymore\n        isResponding = false;\n\n     //for our high score (phase 4)\n     if(playerScore > hiScore) {\n     hiScore = playerScore;\n     editor.putInt(intName, hiScore);\n     editor.commit();\n     Toast.makeText(getApplicationContext(), \"New Hi-score\", Toast.LENGTH_LONG).show();\n     }\n\n    }\n    ```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rotate \n    android:duration=\"100\"\n    android:fromDegrees=\"-5\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:repeatCount=\"8\"\n    android:repeatMode=\"reverse\"\n    android:toDegrees=\"5\" />\n```", "```java\nAnimation wobble = AnimationUtils.loadAnimation(this, R.anim.wobble);\n```", "```java\nbutton1.startAnimation(wobble);\n```", "```java\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <rotate \n     android:duration=\"100\"\n     android:fromDegrees=\"-5\"\n     android:pivotX=\"50%\"\n     android:pivotY=\"50%\"\n     android:repeatCount=\"8\"\n     android:repeatMode=\"reverse\"\n     android:toDegrees=\"5\" />\n\n    ```", "```java\n    //phase 5 - our animation object\n    Animation wobble;\n    ```", "```java\n    //phase5 - animation\n    wobble = AnimationUtils.loadAnimation(this, R.anim.wobble);\n    ```", "```java\n    //code not needed as using animations\n    //make sure all the buttons are made visible\n    //button1.setVisibility(View.VISIBLE);\n    //button2.setVisibility(View.VISIBLE);\n    //button3.setVisibility(View.VISIBLE);\n    //button4.setVisibility(View.VISIBLE);\n    ```", "```java\n    switch (sequenceToCopy[elementToPlay]){\n      case 1:\n        //hide a button - not any more\n        //button1.setVisibility(View.INVISIBLE);\n     button1.startAnimation(wobble);\n       ...\n       ...\n      case 2:\n        //hide a button - not any more\n        //button2.setVisibility(View.INVISIBLE);\n     button2.startAnimation(wobble);\n       ...\n       ...\n      case 3:\n        //hide a button - not any more\n        //button3.setVisibility(View.INVISIBLE);\n     button3.startAnimation(wobble);\n       ...\n       ...\n      case 4:\n        //hide a button - not any more\n        //button4.setVisibility(View.INVISIBLE);\n     button4.startAnimation(wobble);\n\n    ```", "```java\n    //button1.setVisibility(View.VISIBLE);\n    //button2.setVisibility(View.VISIBLE);\n    //button3.setVisibility(View.VISIBLE);\n    //button4.setVisibility(View.VISIBLE);\n    ```"]