["```js\nfunction extractPhoneNumbers(string) {\n  return string.match(/(?:[0-9][- ]?)+/g);\n}\n```", "```js\nexpect(\n  extractPhoneNumbers('my number is 0899192032')\n).toEqual([\n  '0899192032'\n]);\n```", "```js\nexpect(\n  extractPhoneNumbers('123')\n).toEqual([/* empty */]);\n```", "```js\nfunction extractPhoneNumbers(string) {\n  return string.match(/([0-9][- ]?){9,12}/g);\n}\n```", "```js\nconst activeUsers = getActiveUsers([\n  { name: 'Bob', active: false },\n  { name: 'Sue', active: true },\n  { name: 'Yin', active: true }\n]);\n\nassert(activeUsers.length === 2);\nassert(activeUsers[0].name === 'Sue');\nassert(activeUsers[1].name === 'Yin');\n```", "```js\nassert('foo' !== 'bar', 'foo is not bar');\nassert(Array.isArray([]), 'empty arrays are arrays');\n```", "```js\nchai.expect( someValue ).to.not.be.an('array').that.is.not.empty;\n```", "```js\nchai.expect( someValue ).to.not.be.an('array');\nchai.expect( someValue ).to.have.a.lengthOf.above(0);\n```", "```js\nassert(!Array.isArray(someValue), \"someValue is not an array\");\nassert(someValue.length > 0, \"someValue has a length greater than zero\");\n```", "```js\n// A singular test or \"spec\":\ndescribe('sum()', () => {\n  it('adds two numbers together', () => {\n    expect( sum(8, 9) ).toEqual( 17 );\n  });\n});\n```", "```js\ntest('sum()', () => {\n  test('addition works correctly', () => {\n    assert(sum(8, 9) == 17, '8 + 9 is equal to 17');\n  });\n});\n```", "```js\nmyMathLib\n  add()\n    \u2713 can add two integers\n    \u2713 can add two fractions\n    \u2713 returns NaN for non-numeric inputs\n  subtract()\n    \u2713 can subtract two integers\n    \u2713 can subtract two fractions\n    \u2713 returns NaN for non-numeric inputs\n  PI\n    \u2713 is equal to PI at fifteen decimal places\n```", "```js\ndescribe('AnalogClockComponent', () => {\n  it('works', () => {\n    const r = render(AnalogClockComponent, { time: \"02:50:30\" });\n    expect(rendered.querySelector('.mm-h').style.transform)\n      .toBe('rotate(210deg)');\n    expect(rendered.querySelector('.hh-h').style.transform)\n      .toBe('rotate(-30deg)');\n    expect(rendered.querySelector('.ss-h').style.transform)\n      .toBe('rotate(90deg)');\n    expect(/\\btheme-default\\b/).test(rendered.className)).toBe(true);\n  });\n});\n```", "```js\ndescribe('AnalogClockComponent', () => {\n\n  const analogClockDOM = render(AnalogClockComponent, {\n    time: \"02:50:30\"\n  });\n\n  const [\n    hourHandTransform,\n    minuteHandTransform,\n    secondHandTransform\n  ] = [\n    analogClockDOM.querySelector('.hh-h').style.transform,\n    analogClockDOM.querySelector('.mm-h').style.transform,\n    analogClockDOM.querySelector('.ss-h').style.transform\n  ];\n\n  describe('Hands', () => {\n\n    // Note: the nature of rotate/deg in CSS means that a\n    // time of 03:00:00 would render its hour-hand at 0deg.\n\n    describe('Hour', () => {\n      it('Renders at -30 deg reflecting 2/12 hours', () => {\n        expect(hourHandTransform).toBe('rotate(-30deg)');\n      });\n    });\n    describe('Minute', () => {\n      it('Renders at 210 deg reflecting 50/60 minutes', () => {\n        expect(minuteHandTransform).toBe('rotate(210deg)');\n      });\n    });\n    describe('Second', () => {\n      it('Renders at 90deg reflecting 30/60 seconds', () => {\n        expect(secondHandTransform).toBe('rotate(90deg)');\n      });\n    });\n  });\n\n  describe('Theme', () => {\n    it('Has the default theme set', () => {\n      expect(\n        /\\btheme-default\\b/).test(analogClockDOM.className)\n      ).toBe(true);\n    });\n  });\n\n});\n```", "```js\napp/\n  components/\n    ClockComponent.js\n    GalleryComponent.js\n  utilities/\n    timer.js\n    urlParser.js\n```", "```js\napp/\n  components/\n    ClockComponent.js\n    GalleryComponent.js\n    tests/\n      ClockComponent.test.js\n      GalleryComponent.test.js\n  utilities/\n    timer.js\n    urlParser.js\n    tests/\n      timer.test.js\n      urlParser.test.js\n```"]