["```\n> touch stack.yml\n> tree .\n.\n\u251c\u2500\u2500 ecr.yml\n\u2514\u2500\u2500 stack.yml\n\n0 directories, 2 files\n```", "```\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: Todobackend Application\n\nResources:\n  ApplicationCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: todobackend-cluster\n```", "```\n> export AWS_PROFILE=docker-in-aws\n> aws cloudformation deploy --template-file stack.yml --stack-name todobackend\nEnter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - todobackend\n> aws ecs list-clusters\n{\n    \"clusterArns\": [\n        \"arn:aws:ecs:us-east-1:385605022855:cluster/todobackend-cluster\"\n    ]\n}\n```", "```\nAWSTemplateFormatVersion: \"2010-09-09\"\n\nDescription: Todobackend Application\n\nParameters:\n  ApplicationDesiredCount:\n Type: Number\n Description: Desired EC2 instance count\n  ApplicationSubnets:\n Type: List<AWS::EC2::Subnet::Id>\n Description: Target subnets for EC2 instances\n\nResources:\n  ApplicationCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: todobackend-cluster\n  ApplicationAutoscaling:\n Type: AWS::AutoScaling::AutoScalingGroup\n Properties:\n LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration\n MinSize: 0\n MaxSize: 4\n DesiredCapacity: !Ref ApplicationDesiredCount\n VPCZoneIdentifier: !Ref ApplicationSubnets\n Tags:\n - Key: Name\n Value: !Sub ${AWS::StackName}-ApplicationAutoscaling-instance\n PropagateAtLaunch: \"true\"\n```", "```\n> aws ec2 describe-subnets --query \"Subnets[].[SubnetId,AvailabilityZone]\" --output table\n-----------------------------------\n| DescribeSubnets                 |\n+------------------+--------------+\n| subnet-a5d3ecee  | us-east-1a   |\n| subnet-c2abdded  | us-east-1d   |\n| subnet-aae11aa5  | us-east-1f   |\n| subnet-fd3a43c2  | us-east-1e   |\n| subnet-324e246f  | us-east-1b   |\n| subnet-d281a2b6  | us-east-1c   |\n+------------------+--------------+\n```", "```\nApplicationDesiredCount=1\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\n```", "```\n...\n...\nParameters:\n  ApplicationDesiredCount:\n    Type: Number\n    Description: Desired EC2 instance count\n  ApplicationImageId:\n Type: String\n Description: ECS Amazon Machine Image (AMI) ID\n  ApplicationSubnets:\n    Type: List<AWS::EC2::Subnet::Id>\n    Description: Target subnets for EC2 instances\n\nResources:\n  ApplicationAutoscalingLaunchConfiguration:\n    Type: AWS::AutoScaling::LaunchConfiguration\n Properties:\n ImageId: !Ref ApplicationImageId\n InstanceType: t2.micro\n KeyName: admin\n IamInstanceProfile: !Ref ApplicationAutoscalingInstanceProfile\n SecurityGroups:\n - !Ref ApplicationAutoscalingSecurityGroup\n UserData:\n Fn::Base64:\n Fn::Sub: |\n #!/bin/bash\n /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} \\\n --resource ApplicationAutoscalingLaunchConfiguration \\\n --region ${AWS::Region}\n /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \\\n --resource ApplicationAutoscaling \\\n --region ${AWS::Region}\n  ApplicationCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      ClusterName: todobackend-cluster\n  ApplicationAutoscaling:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    Properties:\n      LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration\n      MinSize: 0\n      MaxSize: 4\n      DesiredCapacity: !Ref ApplicationDesiredCount\n      VPCZoneIdentifier: !Ref ApplicationSubnets\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-ApplicationAutoscaling-instance\n          PropagateAtLaunch: \"true\"\n```", "```\nApplicationDesiredCount=1 ApplicationImageId=ami-ec957491\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\n```", "```\n...\n...\nResources:\n  ...\n  ...\n  ApplicationAutoscalingLaunchConfiguration:\n    Type: AWS::AutoScaling::LaunchConfiguration\n    Metadata:\n AWS::CloudFormation::Init:\n config:\n commands:            05_public_volume:\n command: mkdir -p /data/public\n 06_public_volume_permissions:\n command: chown -R 1000:1000 /data/public\n 10_first_run:\n command: sh firstrun.sh\n cwd: /home/ec2-user\n env:\n                ECS_CLUSTER: !Ref ApplicationCluster\n STACK_NAME: !Ref AWS::StackName\n AUTOSCALING_GROUP: ApplicationAutoscaling\n AWS_DEFAULT_REGION: !Ref AWS::Region\n    Properties:\n      ImageId: !Ref ApplicationImageId\n      InstanceType: t2.micro\n      KeyName: admin\n      IamInstanceProfile: !Ref ApplicationAutoscalingInstanceProfile\n      SecurityGroups:\n        - !Ref ApplicationAutoscalingSecurityGroup\n      UserData:\n        Fn::Base64:\n          Fn::Sub: |\n            #!/bin/bash\n            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} \\\n              --resource ApplicationAutoscalingLaunchConfiguration \\\n              --region ${AWS::Region}\n            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \\\n              --resource ApplicationAutoscaling \\\n              --region ${AWS::Region}\n  ...\n  ...\n```", "```\n#!/usr/bin/env bash\nset -e\n\n# Configure ECS Agent\necho \"ECS_CLUSTER=${ECS_CLUSTER}\" > /etc/ecs/ecs.config\n...\n...\n```", "```\n...\n...\n# Write AWS Logs region\nsudo tee /etc/awslogs/awscli.conf << EOF > /dev/null\n[plugins]\ncwlogs = cwlogs\n[default]\nregion = ${AWS_DEFAULT_REGION}\nEOF\n\n# Write AWS Logs config\nsudo tee /etc/awslogs/awslogs.conf << EOF > /dev/null\n[general]\nstate_file = /var/lib/awslogs/agent-state \n\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/dmesg\nlog_stream_name = {instance_id}\n...\n...\n```", "```\nResources:\n  ...\n  ...\n  ApplicationAutoscaling:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    CreationPolicy:\n ResourceSignal:\n Count: !Ref ApplicationDesiredCount\n Timeout: PT15M\n    Properties:\n      LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration\n      MinSize: 0\n      MaxSize: 4\n      DesiredCapacity: !Ref ApplicationDesiredCount\n      VPCZoneIdentifier: !Split [\",\", !Ref ApplicationSubnets]\n      Tags:\n        - Key: Name\n          Value: !Sub ${AWS::StackName}-ApplicationAutoscaling-instance\n          PropagateAtLaunch: \"true\"\n```", "```\n\nResources:\n  ...\n  ...\n  ApplicationAutoscalingInstanceProfile:\n Type: AWS::IAM::InstanceProfile\n Properties:\n Roles:\n - Ref: ApplicationAutoscalingInstanceRole\n ApplicationAutoscalingInstanceRole:\n Type: AWS::IAM::Role\n Properties:\n AssumeRolePolicyDocument:\n Version: \"2012-10-17\"\n Statement:\n - Effect: Allow\n Principal:\n Service:\n - ec2.amazonaws.com\n Action:\n - sts:AssumeRole\n Policies:\n - PolicyName: ECSContainerInstancePermissions\n PolicyDocument: \n Version: \"2012-10-17\"\n Statement:\n - Effect: Allow\n Action:\n - ecs:RegisterContainerInstance\n - ecs:DeregisterContainerInstance\n                  - ecs:UpdateContainerInstancesState\n Resource: !Sub ${ApplicationCluster.Arn}\n - Effect: Allow\n Action:\n - ecs:DiscoverPollEndpoint\n - ecs:Submit*\n - ecs:Poll\n - ecs:StartTelemetrySession\n Resource: \"*\"\n - Effect: Allow\n Action: \n - ecr:BatchCheckLayerAvailability\n - ecr:BatchGetImage\n - ecr:GetDownloadUrlForLayer\n - ecr:GetAuthorizationToken\n Resource: \"*\"\n - Effect: Allow\n Action:\n - logs:CreateLogGroup\n - logs:CreateLogStream\n - logs:PutLogEvents\n - logs:DescribeLogStreams\n Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${AWS::StackName}*\n...\n...\n```", "```\nParameters:\n  ApplicationDesiredCount:\n    Type: Number\n    Description: Desired EC2 instance count\n  ApplicationImageId:\n    Type: String\n    Description: ECS Amazon Machine Image (AMI) ID\n  ApplicationSubnets:\n    Type: List<AWS::EC2::Subnet::Id>\n    Description: Target subnets for EC2 instances\n  VpcId:\n Type: AWS::EC2::VPC::Id\n Description: Target VPC\n\nResources:\n  ApplicationAutoscalingSecurityGroup:\n Type: AWS::EC2::SecurityGroup\n Properties:\n GroupDescription: !Sub ${AWS::StackName} Application Autoscaling Security Group\n VpcId: !Ref VpcId\n SecurityGroupIngress:\n - IpProtocol: tcp\n FromPort: 22\n ToPort: 22\n CidrIp: 0.0.0.0/0\n SecurityGroupEgress:\n - IpProtocol: udp\n FromPort: 53\n ToPort: 53\n CidrIp: 0.0.0.0/0\n - IpProtocol: tcp\n FromPort: 80\n ToPort: 80\n CidrIp: 0.0.0.0/0\n - IpProtocol: tcp\n FromPort: 443\n ToPort: 443\n CidrIp: 0.0.0.0/0\n...\n...\n```", "```\n> aws ec2 describe-vpcs\n{\n    \"Vpcs\": [\n        {\n            \"CidrBlock\": \"172.31.0.0/16\",\n            \"DhcpOptionsId\": \"dopt-a037f9d8\",\n            \"State\": \"available\",\n            \"VpcId\": \"vpc-f8233a80\",\n            \"InstanceTenancy\": \"default\",\n            \"CidrBlockAssociationSet\": [\n                {\n                    \"AssociationId\": \"vpc-cidr-assoc-32524958\",\n                    \"CidrBlock\": \"172.31.0.0/16\",\n                    \"CidrBlockState\": {\n                        \"State\": \"associated\"\n                    }\n                }\n```", "```\n            ],\n            \"IsDefault\": true\n        }\n    ]\n}\n```", "```\nApplicationDesiredCount=1ApplicationImageId=ami-ec957491\nApplicationSubnets=subnet-a5d3ecee,subnet-324e246f\nVpcId=vpc-f8233a80\n```", "```\n> aws cloudformation deploy --template-file stack.yml \\\n --stack-name todobackend --parameter-overrides $(cat dev.cfg) \\\n --capabilities CAPABILITY_NAMED_IAM\n\nWaiting for changeset to be created..\nWaiting for stack create/update to complete\nSuccessfully created/updated stack - todobackend\n```", "```\n> aws ecs describe-clusters --cluster todobackend-cluster\n{\n    \"clusters\": [\n        {\n            \"clusterArn\": \"arn:aws:ecs:us-east-1:385605022855:cluster/todobackend-cluster\",\n            \"clusterName\": \"todobackend-cluster\",\n \"status\": \"ACTIVE\",\n \"registeredContainerInstancesCount\": 1,\n            \"runningTasksCount\": 0,\n            \"pendingTasksCount\": 0,\n            \"activeServicesCount\": 0,\n            \"statistics\": []\n        }\n    ],\n    \"failures\": []\n}\n```"]