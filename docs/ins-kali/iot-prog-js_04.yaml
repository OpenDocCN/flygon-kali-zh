- en: Chapter 4. Control-Connected Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。控制连接的设备
- en: 'In this chapter, we will look at how to control devices from remote sites using
    our Raspberry Pi Zero and Arduino UNO, using the following modules to communicate
    in a network: Wi-Fi shield and Ethernet shield. We will cover the following topics
    in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何使用我们的Raspberry Pi Zero和Arduino UNO从远程站点控制设备，使用以下模块在网络中进行通信：Wi-Fi
    shield和Ethernet shield。我们将在本章中涵盖以下主题：
- en: Making a simple web server with Node.js
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js创建一个简单的Web服务器
- en: Controlling a relay from a Raspberry Pi Zero using Restful API and Node.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Restful API和Node.js从Raspberry Pi Zero控制继电器
- en: Configuring Node.js in a computer as a web server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在计算机上配置Node.js作为Web服务器
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js和Arduino Wi-Fi监控温度、湿度和光线
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Ethernet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js和Arduino Ethernet监控温度、湿度和光线
- en: Making a simple web server with Node.js
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js创建一个简单的Web服务器
- en: One of the most important aspect of having a Raspberry Pi is that we have a
    real computer configured with services and servers. In this section, we will explain
    how to install Node.js, which is a powerful framework that we will use to run
    most of the applications we are going to see in this book. Luckily for us, installing
    Node.js on Raspberry Pi is really simple.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有Raspberry Pi最重要的一个方面是我们有一个配置了服务和服务器的真正的计算机。在本节中，我们将解释如何安装Node.js，这是一个强大的框架，我们将用它来运行我们将在本书中看到的大多数应用程序。幸运的是，我们在Raspberry
    Pi上安装Node.js非常简单。
- en: 'In the folder for this chapter, open the file called `webserver.js`. We will
    create a server on port *8056*. To test the program and see the results we have
    to open the Node.js terminal on your MS-DOS interface and run this file with the
    following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的文件夹中，打开名为`webserver.js`的文件。我们将在端口*8056*上创建一个服务器。要测试程序并查看结果，我们必须在MS-DOS界面上打开Node.js终端，并使用以下命令运行此文件：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following lines to `webserver.js` file to declare the HTTP request
    commands:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下行到`webserver.js`文件中声明HTTP请求命令：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We create the server with the following function:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下函数创建服务器：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We define the content of the file that we will show in the HTML code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义将在HTML代码中显示的文件内容：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We send the response from the server:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从服务器发送响应：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It''s important to define the port that is going to be opened:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要定义要打开的端口：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Display the message of the server:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 显示服务器的消息：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To test this program, open the browser on your local computer and navigate
    to the following link: `http://192.168.1.105:8056`. If you see the following screen;
    your Node.js server is running perfectly on your computer; you need to change
    the IP address of your computer:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此程序，请在本地计算机上打开浏览器，导航到以下链接：`http://192.168.1.105:8056`。如果您看到以下屏幕；您的Node.js服务器在您的计算机上运行正常；您需要更改计算机的IP地址：
- en: '![Making a simple web server with Node.js](graphics/B05170_04_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![使用Node.js创建一个简单的Web服务器](graphics/B05170_04_01.jpg)'
- en: Controlling a relay from a Raspberry Pi Zero using Restful API and Node.js
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Restful API和Node.js从Raspberry Pi Zero控制继电器
- en: In this section, we will show you how to control a relay module connected to
    an Arduino UNO board, a relay for sending commands from a web browser. Let's do
    it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何控制连接到Arduino UNO板的继电器模块，以及用于从Web浏览器发送命令的继电器。让我们开始吧。
- en: JSON structure
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON结构
- en: '**JavaScript Object Notation**  **(JSON)** is a lightweight data-interchange
    format. It is easy for humans to read and write. It is easy for machines to parse
    and generate. It is based on a subset of the JavaScript Programming Language.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript对象表示法** **(JSON)** 是一种轻量级的数据交换格式。它易于人类阅读和编写。它易于机器解析和生成。它基于JavaScript编程语言的一个子集。'
- en: 'JSON is built on two structures:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JSON建立在两种结构上：
- en: A collection of name/value pairs. In various languages, this is realized as
    an object, record, struct, dictionary, hash table, keyed list, or associative
    array.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组名称/值对。在各种语言中，这被实现为对象、记录、结构、字典、哈希表、键控列表或关联数组。
- en: An ordered list of values. In most languages, this is realized as an array,
    vector, list, or sequence.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列值的有序列表。在大多数语言中，这被实现为数组、向量、列表或序列。
- en: 'First, we need to know how to apply the JSON format that we use to describe
    this structure, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要知道如何应用我们用来描述这个结构的JSON格式，如下所示：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is the format that we need to follow and make responsive:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要遵循并使响应的格式：
- en: '**Data:** Defines the number of the command and then describes the definition
    of the command'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据：**定义命令的编号，然后描述命令的定义'
- en: '**Name:** Follows the name of the device'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称：**跟随设备的名称'
- en: '**Connected:** Confirms if the device is connected or not'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已连接：**确认设备是否已连接'
- en: All the data that is between the `{ }` defines our JSON format.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在`{ }`之间的数据定义了我们的JSON格式。
- en: Commands with the aREST API
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用aREST API的命令
- en: 'Using the `aREST` command like this, we can define our Arduino and the devices,
    and then control them from a web browser. The following are examples of the commands
    from the `aREST` API:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`aREST`命令，我们可以定义我们的Arduino和设备，然后从Web浏览器控制它们。以下是`aREST` API的命令示例：
- en: '`IP_Address_of the device/mode/6/o`: This configures the digital pin 6 like
    an output pin'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`设备的IP地址/模式/6/o`：这将配置数字引脚6为输出引脚'
- en: '`IP_Address_of the device /digital/6/1`: Configures output 6 and makes the
    function like a digitalwrite. For example: `http://192.168.1.100/digital/6/1`;
    we define the IP address of the device and the number of the pin that will be
    activated.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`设备的IP地址/digital/6/1`：配置输出6并使函数像数字写入一样。例如：`http://192.168.1.100/digital/6/1`；我们定义设备的IP地址和将被激活的引脚的编号。'
- en: Installing Node.js on your Raspberry Pi Zero
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您的Raspberry Pi Zero上安装Node.js
- en: Node.js is a tool that will allow us to create servers running in the device,
    using code in JavaScript. The most important thing is that we will apply this
    framework to build a web server using this code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个工具，它将允许我们使用JavaScript代码在设备上创建运行的服务器。最重要的是，我们将应用这个框架来使用这段代码构建一个Web服务器。
- en: Using Node.js means that we configure a web server that will open a port and
    the devices can be connected to the web server.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Node.js意味着我们配置了一个将打开端口并连接到Web服务器的设备的Web服务器。
- en: 'With the following command, you will install Node.js in your Raspberry Pi Zero:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令，您将在树莓派Zero上安装Node.js：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'NPM is the default package manager for the JavaScript runtime environment with
    Node.js. To configure and install the `aREST` module, type the following line
    in your terminal:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: NPM是Node.js的JavaScript运行时环境的默认包管理器。要配置和安装`aREST`模块，请在终端中输入以下命令：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Express philosophy is to provide small, robust tooling for HTTP servers,
    making it a great solution for single-page applications, websites, hybrids, or
    public HTTP APIs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Express的理念是为HTTP服务器提供小巧、强大的工具，使其成为单页应用程序、网站、混合应用程序或公共HTTP API的绝佳解决方案。
- en: 'We can also need to configure the express module with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要使用以下命令配置express模块：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Controlling the relay using aREST commands from a web browser
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用aREST命令从Web浏览器控制继电器
- en: 'In the next section, we will see how to control a digital output from a web
    browser using `Rest` commands. Let''s dive into it, to see more details:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看到如何使用`Rest`命令从Web浏览器控制数字输出。让我们深入了解一下，以了解更多细节：
- en: Configuring the web server
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Web服务器
- en: 'You can now either copy the code inside a file called outputcontrol.js, or
    just get the complete code from the folder for this project and execute it with
    Node.js. Open the terminal on your Raspberry Pi and type the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将代码复制到名为outputcontrol.js的文件中，或者只需从此项目的文件夹中获取完整的代码并使用Node.js执行它。在树莓派上打开终端并输入以下命令：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We define the GPIO of the device importing the commands, by using the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过以下方式定义设备的GPIO来导入命令：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we will create our web server using Node.js using the following lines.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用以下代码使用Node.js创建我们的Web服务器。
- en: 'We import the require packages that are necessary to run. We declare the libraries
    using the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入运行所需的require包。我们使用以下声明库：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Define the body parser and open the port, in this case, *8099*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 定义body解析器并打开端口，在本例中为*8099*：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Use the body-parser:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用body-parser：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Configure **GPIO 11**, which we will control:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 配置**GPIO 11**，我们将控制它：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We define the functions that we will call from the web browser.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义将从Web浏览器调用的函数。
- en: 'The name of the function is `ledon`; it activates the **GPIO 11** and sends
    the message `led1 is on` to the screen:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的名称是`ledon`；它激活**GPIO 11**并向屏幕发送消息`led1 is on`：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The name of the function is `ledoff`; it turns off the **GPIO 11** and sends
    the message `led1 is off` to the screen:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的名称是`ledoff`；它关闭**GPIO 11**并向屏幕发送消息`led1 is off`：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We define the function `GET`, which means that we are making a request to the
    server when the browser receives the function called `ledon`; it responds with
    following format:  `{status:"connected",led:"on"}`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`GET`函数，这意味着当浏览器接收到名为`ledon`的函数时，它会向服务器发出请求；服务器以以下格式做出响应：`{status:"connected",led:"on"}`。
- en: 'We will now declare the app function for the incoming requests from the clients:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将声明用于来自客户端的传入请求的app函数：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We define the function `GET` .which means that we are making a request to the
    server when the browser receives  the function called `/ledoff`, it responds with
    following format: `{status:"connected",led:"off"}. `'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义`GET`函数。这意味着当浏览器接收到名为`/ledoff`的函数时，它会向服务器发出请求；服务器以以下格式做出响应：`{status:"connected",led:"off"}`。
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We now open the port from the web server:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们打开Web服务器的端口：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If everything is correct, we open our favorite browser and type `http://IP_address
    of your Raspberry_PI_zero:port/command`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正确，我们打开我们喜爱的浏览器并输入`http://您的Raspberry_PI_zero的IP地址:端口/命令`。
- en: '`In this case, we type 192.168.1.105:8099/ledon`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`在这种情况下，我们输入192.168.1.105:8099/ledon`。'
- en: 'The following screenshot shows you the response of the JSON request:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了JSON请求的响应：
- en: '![Configuring the web server](graphics/B05170_04_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![配置Web服务器](graphics/B05170_04_02.jpg)'
- en: 'After that, we will see the final result, as shown in the following image:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到最终结果，如下图所示：
- en: '![Configuring the web server](graphics/B05170_04_03.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![配置Web服务器](graphics/B05170_04_03.jpg)'
- en: Configuring Node.js on a computer as a web server
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在计算机上配置Node.js作为Web服务器
- en: Node.js is an open-source, cross-platform runtime environment for developing
    server-side and networking applications. Node.js applications are written in JavaScript,
    and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个开源的跨平台运行时环境，用于开发服务器端和网络应用程序。Node.js应用程序是用JavaScript编写的，并可以在OS X、Microsoft
    Windows和Linux上的Node.js运行时环境中运行。
- en: Node.js also provides a rich library of various JavaScript modules that simplify
    the development of web applications using Node.js to a great extent.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js还提供了丰富的各种JavaScript模块库，极大地简化了使用Node.js开发Web应用程序的过程。
- en: In the last section, we configured Node.js in Raspberry Pi Zero, now in this
    section we will do the same thing using a Windows operating system and configure
    our web server Node.js running on it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们在树莓派Zero上配置了Node.js，现在在本节中，我们将使用Windows操作系统执行相同的操作，并配置我们的Web服务器Node.js在其上运行。
- en: The main purpose of this section is to explain how to control our Arduino boards
    from a web server running in the Node.js framework. For that, it's important to
    install it; our system will run on Windows computer.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的主要目的是解释如何从在Node.js框架中运行的Web服务器控制我们的Arduino板。为此，安装它非常重要；我们的系统将在Windows计算机上运行。
- en: In this section, we will explain how to install Node.js in Windows.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将解释如何在Windows上安装Node.js。
- en: Downloading Node.js
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载Node.js
- en: 'First we need to download Node.js for Windows 64 bit - it depends of the version
    of your operating system to download it, you just need to go to the following
    link: [https://nodejs.org/es/download/](https://nodejs.org/es/download/):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载Windows 64位的Node.js-它取决于您的操作系统版本，您只需要转到以下链接进行下载：[https://nodejs.org/es/download/](https://nodejs.org/es/download/)：
- en: '![Downloading Node.js](graphics/B05170_04_04.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![下载Node.js](graphics/B05170_04_04.jpg)'
- en: Installing Node.js
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: 'After we have downloaded the software, follow these steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载了软件之后，按照以下步骤进行：
- en: Click on the **N****ext** button:![Installing Node.js](graphics/B05170_04_05.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮：![安装Node.js](graphics/B05170_04_05.jpg)
- en: Click on the **Next** button:![Installing Node.js](graphics/B05170_04_06.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮：![安装Node.js](graphics/B05170_04_06.jpg)
- en: Select where to install it:![Installing Node.js](graphics/B05170_04_07.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择安装位置：![安装Node.js](graphics/B05170_04_07.jpg)
- en: Select the default configuration:![Installing Node.js](graphics/B05170_04_08.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认配置：![安装Node.js](graphics/B05170_04_08.jpg)
- en: To finish the configuration, we click on **Install**:![Installing Node.js](graphics/B05170_04_09.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成配置后，点击**安装**：![安装Node.js](graphics/B05170_04_09.jpg)
- en: After the installation is complete we will see the following:![Installing Node.js](graphics/B05170_04_10.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后我们将看到以下内容：![安装Node.js](graphics/B05170_04_10.jpg)
- en: Configuring web server port 8080 with Node.js
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Node.js配置web服务器端口8080
- en: Now we need to configure the port that will be expected to listen to the opening
    connection from the remote browsers. Open the file that is in the folder of this
    chapter, and then execute the file with Node.js.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要配置将要监听来自远程浏览器的打开连接的端口。打开本章文件夹中的文件，然后使用Node.js执行该文件。
- en: You can now either copy the code inside a file called `server.js`, or just get
    the complete code from the folder for this project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以把代码复制到一个名为`server.js`的文件中，或者直接从这个项目的文件夹中获取完整的代码。
- en: 'First we need to create our server with the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们需要使用以下代码创建我们的服务器：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a function named `loadServer` that has the code to respond to the browser:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`loadServer`的函数，其中包含响应浏览器的代码：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If this function responds with the number 200 , it means that the connection
    is established, the server works perfectly:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个函数响应数字200，那么意味着连接已经建立，服务器工作正常：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create and open the server port:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并打开服务器端口：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the Terminal with the Node.js server installed on your computer, and then
    in your MS-DOS interface, type the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的计算机上打开安装了Node.js服务器的终端，然后在MS-DOS界面中输入以下命令：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, to test weather the server is running, we will go the web browser and
    type `localhost:number_of_port`; and you should see on your screen similar to
    the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试服务器是否运行，我们将在网页浏览器中输入`localhost:端口号`；你应该在屏幕上看到类似以下截图的内容：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![Configuring web server port 8080 with Node.js](graphics/B05170_04_11.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![使用Node.js配置web服务器端口8080](graphics/B05170_04_11.jpg)'
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js和Arduino Wi-Fi监控温度、湿度和光线
- en: 'In this part of the chapter, we will explain the code for the Wi-Fi shield
    with Arduino:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这部分，我们将解释Arduino的Wi-Fi shield的代码：
- en: '![Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi](graphics/B05170_04_12.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![使用Node.js和Arduino Wi-Fi监控温度、湿度和光线](graphics/B05170_04_12.jpg)'
- en: 'We define the number of variables; in this case we will monitor three variables
    (`temperature`, `humidity`, and `light`):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义变量的数量；在这种情况下，我们将监控三个变量（`温度`、`湿度`和`光线`）：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here we have to include the library for the sensor:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们必须包含传感器的库：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We define the pin for the sensor:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义传感器的引脚：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We define the instance of the sensor:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义传感器的实例：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We import the libraries for the module:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入模块的库：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We define the pins for connecting the module:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义连接模块的引脚：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We create the instance of the module that will be connected:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建将要连接的模块的实例：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We define the aREST instance:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义aREST实例：
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then we define the SSID and password, which you need to change:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义SSID和密码，你需要进行更改：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We configure the port to listen for incoming TCP connections:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置端口以监听传入的TCP连接：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We define the server instance of the module:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义模块的服务器实例：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We define the variables that will be published:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义将要发布的变量：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We have here the setup that defines the configuration of serial communications:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个设置，定义了串行通信的配置：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We begin the variables that will be published:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始将要发布的变量：
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We define the ID and the name of the device:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义设备的ID和名称：
- en: '[PRE42]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We connect to the network:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接到网络：
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here we define the function to get the device connected:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们定义了连接设备的函数：
- en: '[PRE44]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We display the connections in the serial interface:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在串行接口中显示连接：
- en: '[PRE45]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In this part, we declare the variables that will be acquired:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们声明将要获取的变量：
- en: '[PRE46]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We then measure light level:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们测量光线水平：
- en: '[PRE47]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We declare the function for requesting:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明请求的函数：
- en: '[PRE48]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We need to execute the requests from the server:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行来自服务器的请求：
- en: '[PRE49]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We display the networking configuration from the device:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显示设备的网络配置：
- en: '[PRE50]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Download the sketch of code in your Arduino board, and then go to the serial
    monitor to see the configuration of the IP address taken from your router. After
    that, we can display the configuration IP address of the Wi-Fi shield:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Arduino板上下载代码草图，然后转到串行监视器以查看从路由器获取的IP地址配置。之后，我们可以显示Wi-Fi shield的IP地址配置：
- en: '![Monitoring temperature, humidity, and light using Node.js with Arduino Wi-Fi](graphics/B05170_04_13.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![使用Node.js和Arduino Wi-Fi监控温度、湿度和光线](graphics/B05170_04_13.jpg)'
- en: Connecting to the Wi-Fi network
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到Wi-Fi网络
- en: 'Now that we can see the IP address of your Arduino Wi-Fi shield, we can now
    connect our computer to the same network as the Arduino board. Look at the following
    screenshot to see more details:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到你的Arduino Wi-Fi shield的IP地址，我们现在可以将我们的计算机连接到与Arduino板相同的网络。查看以下截图以获取更多细节：
- en: '![Connecting to the Wi-Fi network](graphics/B05170_01_23.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![连接到Wi-Fi网络](graphics/B05170_01_23.jpg)'
- en: 'To test the application, we need to go to the following path and run the following
    commands on the computer that you have installed your Node.js server, on as shown
    in the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试应用程序，我们需要转到以下路径，并在安装了Node.js服务器的计算机上运行以下命令，或者如下截图所示：
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_15.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![连接到Wi-Fi网络](graphics/B05170_04_15.jpg)'
- en: In this folder, we have the file in JavaScript and type the command node app.js
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件夹中，我们有JavaScript文件，输入命令node app.js
- en: 'After entering the interface folder type the following command `node app.js`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入接口文件夹后，输入以下命令`node app.js`：
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_16.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![连接到Wi-Fi网络](graphics/B05170_04_16.jpg)'
- en: 'Now that you have launched the web server, application, switch over to a browser,
    on the same machine to see the results by entering the IP address of the machine:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经启动了Web服务器应用程序，切换到浏览器，在同一台机器上输入机器的IP地址以查看结果：
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_17.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![连接到Wi-Fi网络](graphics/B05170_04_17.jpg)'
- en: 'After the server is listening on port 300, it establishes communication with
    the Wi-Fi module sending a request to the IP address of the device:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器监听端口300后，它与Wi-Fi模块建立通信，向设备的IP地址发送请求：
- en: '![Connecting to the Wi-Fi network](graphics/B05170_04_18.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![连接到Wi-Fi网络](graphics/B05170_04_18.jpg)'
- en: Monitoring temperature, humidity, and light using Node.js with Arduino Ethernet
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js与Arduino Ethernet监控温度、湿度和光照
- en: 'In the preceding section, we showed how to monitor our Arduino via Wi-Fi using
    the *CC3000* module; now we will use another important module: Ethernet Shield.
    The hardware connection of the part is similar to the following image:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们展示了如何使用*CC3000*模块通过Wi-Fi监视我们的Arduino；现在我们将使用另一个重要模块：以太网盾。部分的硬件连接类似于以下图像：
- en: '![Monitoring temperature, humidity, and light using Node.js with Arduino Ethernet](graphics/B05170_04_19.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![使用Node.js与Arduino Ethernet监控温度、湿度和光照](graphics/B05170_04_19.jpg)'
- en: Code for the application of the Arduino Ethernet shield
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino Ethernet盾应用程序代码
- en: You can now either copy the code inside a file called `Monitor_Ethernet.ino`,
    or just get the complete code from the folder for this project; you need to use
    the Arduino  IDE.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以将代码复制到名为`Monitor_Ethernet.ino`的文件中，或者只需从此项目的文件夹中获取完整的代码；您需要使用Arduino IDE。
- en: 'The following are the libraries included in the program:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是程序中包含的库：
- en: '[PRE51]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Include the library for the DHT11 sensor:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 包括DHT11传感器的库：
- en: '[PRE52]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We define the pins for the temperature and humidity sensor:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义温度和湿度传感器的引脚：
- en: '[PRE53]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We have the instance of the sensor:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有传感器的实例：
- en: '[PRE54]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We register the MAC address for the device:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注册设备的MAC地址：
- en: '[PRE55]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We now create an instance of the `aREST` API:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在创建`aREST` API的实例：
- en: '[PRE56]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We publish the variables that will be monitored:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发布将被监视的变量：
- en: '[PRE57]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We now configure serial communication and start the instance of the sensor:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在配置串行通信并启动传感器的实例：
- en: '[PRE58]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We start the variables to publish:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始发布变量：
- en: '[PRE59]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'It is very important to give the ID and the name of the device that we are
    using:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是给出我们正在使用的设备的ID和名称：
- en: '[PRE60]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We begin the Ethernet connection:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始以太网连接：
- en: '[PRE61]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We display the IP address on the serial monitor:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在串行监视器上显示IP地址：
- en: '[PRE62]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We read the temperature and humidity sensor:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取温度和湿度传感器：
- en: '[PRE63]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'We measure the light level of the sensor:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们测量传感器的光照水平：
- en: '[PRE64]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We listen for the incoming clients that will be connected:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们监听将连接的传入客户端：
- en: '[PRE65]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now that we have finished the configurations, we open a web browser and type
    the IP address of your Arduino Ethernet shield: `http://192.168.1.153`. If everything
    goes perfectly it will display the following screen with the JSON response from
    the board:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了配置，打开一个网络浏览器并输入您的Arduino Ethernet盾的IP地址：`http://192.168.1.153`。如果一切顺利，它将显示以下屏幕，并显示来自板的JSON响应：
- en: '![Code for the application of the Arduino Ethernet shield](graphics/B05170_04_20.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![Arduino Ethernet盾应用程序代码](graphics/B05170_04_20.jpg)'
- en: The preceding screenshot shows the results of the JSON request.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了JSON请求的结果。
- en: Configuring the device in Node.js
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Node.js中配置设备
- en: In this section, we will explain the code for configuring the devices that we
    can control from a web page.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将解释配置我们可以从网页控制的设备的代码。
- en: 'We installed the express package in the previous section; if you have any difficulty,
    just open a terminal and type the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们安装了express包；如果遇到任何困难，只需打开终端并输入以下内容：
- en: '[PRE66]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We define the node express and create the app:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义节点express并创建应用程序：
- en: '[PRE67]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We then define the port to listen:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义要监听的端口：
- en: '[PRE68]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We define the instance of Jade application, using the view engine:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义Jade应用程序的实例，使用视图引擎：
- en: '[PRE69]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We configure the public folder:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置公共文件夹：
- en: '[PRE70]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We now define the devices to monitor:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在定义要监视的设备：
- en: '[PRE71]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'We serve the application:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供应用程序：
- en: '[PRE72]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We start the server and send the message when the device is connected:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动服务器并在设备连接时发送消息：
- en: '[PRE73]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Open your terminal in MS-DOS and execute `app.js` in your Node.js server
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在MS-DOS中打开终端并在Node.js服务器中执行`app.js`
- en: 'To test the application, open your web browser and type `http://localhost:3000`;
    if a screen like the following, congratulations appears, you just configured your
    server properly:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，请打开您的网络浏览器并输入`http://localhost:3000`；如果出现以下屏幕，恭喜，您已正确配置了服务器：
- en: '![Configuring the device in Node.js](graphics/B05170_04_21.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![在Node.js中配置设备](graphics/B05170_04_21.jpg)'
- en: 'Here we have the screen where we see the execution of `app.js` in the Node.js
    server:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们在Node.js服务器中看到`app.js`执行的屏幕：
- en: '![Configuring the device in Node.js](graphics/B05170_04_22.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![在Node.js中配置设备](graphics/B05170_04_22.jpg)'
- en: Summary
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to control your Arduino board, using modules
    of communication in a networking area from the Raspberry Pi Zero in a central
    interface Dashboard. We have looked at how to control and monitor devices from
    a central interface; you can use other sensors, for example, a sensor barometric
    pressure.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用树莓派Zero中的网络通信模块来控制Arduino板，在中央界面仪表板中。我们已经看到了如何从中央界面控制和监视设备；您可以使用其他传感器，例如气压传感器。
- en: In the next chapter, you will do more interesting projects such as configuring
    and connecting a web camera to your Arduino board that can be monitored from your
    Raspberry Pi Zero.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将进行更多有趣的项目，例如将网络摄像头配置和连接到您的Arduino板，从您的Raspberry Pi Zero上进行监控。
