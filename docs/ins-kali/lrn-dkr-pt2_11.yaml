- en: Chapter 11. Securing Docker Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。保护Docker容器
- en: So far, we have talked a lot about the fast emerging Docker technology in this
    book. It is not a nice and neat finish if Docker-specific security issues and
    solution approaches are not articulated in detail to you. Hence, this chapter
    is specially crafted and incorporated in this book in order to explain about the
    growing security challenges of Docker-inspired containers. We also wanted to throw
    more light on how lingering security concerns are being addressed through a host
    of pioneering technologies, high-quality algorithms, enabling tools, and best
    practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在本书中已经谈了很多关于快速兴起的Docker技术。如果不详细阐述Docker特定的安全问题和解决方法，这本书就不会有一个完美的结局。因此，本章是专门为了向您详细解释Docker启发的容器的不断增长的安全挑战而精心制作和纳入本书的。我们还希望更多地阐明，通过一系列开创性技术、高质量算法、启用工具和最佳实践，如何解决悬而未决的安全问题。
- en: 'In this chapter, we are going to deal with the following topics in detail:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细讨论以下主题：
- en: Are Docker containers secure?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker容器安全吗？
- en: The security features of containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器的安全特性
- en: The emerging security approaches
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新兴的安全方法
- en: The best practices for container security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器安全的最佳实践
- en: Ensuring unbreakable and impenetrable security for any IT system and business
    services has been one of the prime needs and predominant challenges in the IT
    field for decades. Brilliant minds can identify and exploit all kinds of security
    holes and flaws being carelessly and unknowingly introduced at the system conceptualization
    and concretization stages. This loophole ultimately brings innumerable breaches
    and havocs during IT service delivery. Security experts and engineers, on the
    other hand, try out every kind of trick and technique in order to stop hackers
    in their evil journey. However, it has not been an outright victory so far. Here
    and there, there are some noteworthy intrusions from unknown sources, resulting
    in highly disconcerting IT slowdown and sometimes breakdown. Organizations and
    governments across the globe are, therefore, investing heavily in security research
    endeavors in order to completely decimate all security and safety-related incidents
    and accidents.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 确保任何IT系统和业务服务的不可破坏和无法渗透的安全性，是IT领域数十年来的主要需求和主要挑战之一。聪明的头脑可以识别和利用在系统构思和具体化阶段被漫不经心和无意识引入的各种安全漏洞和缺陷。这个漏洞最终在IT服务交付过程中带来无数的违规和破坏。另一方面，安全专家和工程师尝试各种技巧和技术，以阻止黑客的邪恶行程。然而，到目前为止，这并不是一场彻底的胜利。在各个地方，都有一些来自未知来源的引人注目的入侵，导致高度令人不安的IT减速，有时甚至崩溃。因此，全球各个组织和政府正在大力投资于安全研究工作，以完全消灭所有与安全和安全相关的事件和事故。
- en: There are plenty-of security-specific product vendors and managed security service
    providers in order to minimize the irreparable and indescribable consequences
    of security threats and vulnerabilities on IT systems. Precisely speaking, for
    any existing and emerging technologies, security is the most crucial and critical
    aspect, which is not to be taken lightly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大程度地减少安全威胁和漏洞对IT系统造成的不可挽回和难以描述的后果，有大量专门的安全产品供应商和托管安全服务提供商。确切地说，对于任何现有和新兴的技术来说，安全性都是最关键和最重要的方面，不能轻视。
- en: Docker is a fast-maturing containerization technology in the IT space, and in
    the recent past, the aspect of security is being given prime importance, considering
    the fact that the adoption and adaption of Docker containers is consistently on
    the rise. Furthermore, a stream of purpose-specific and generic containers are
    moving into production environments and hence, the security conundrum acquires
    a special significance. Undoubtedly, there will be a lot focus on the security
    parameters in future Docker platform releases, as the market and mind shares for
    this open source Docker initiative are consistently on the climb.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是IT领域快速成熟的容器化技术，最近，安全方面被赋予了首要重要性，考虑到Docker容器的采用和适应性不断上升。此外，一系列特定目的和通用容器正在进入生产环境，因此安全难题具有特殊意义。毫无疑问，未来Docker平台发布将会有很多关注安全参数的内容，因为这个开源Docker倡议的市场份额和思想份额一直在上升。
- en: Are Docker containers secure enough?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker容器安全吗？
- en: With Docker containers being meticulously evaluated for production IT environments,
    there are questions being asked in different quarters about the security vulnerabilities
    of containers. Therefore, there is a clarion call to researchers and security
    experts for substantially strengthening container security in order to boost the
    confidence of service providers and consumers. In this section, we are going to
    describe where Docker containers stand as far as the security imbroglio is concerned.
    As containers are being closely examined in synchronization with virtual machines,
    we will start with a few security-related points of **virtual machines** (**VMs**)
    and containers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Docker容器在生产IT环境中受到精心评估，不同领域对容器的安全漏洞提出了质疑。因此，有人呼吁研究人员和安全专家大力加强容器安全，以提高服务提供商和消费者的信心。在本节中，我们将描述Docker容器在安全方面的立场。由于容器正在与虚拟机同步进行密切审查，我们将从几个与虚拟机和容器相关的安全要点开始。
- en: The security facets – virtual machines versus Docker containers
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全方面 - 虚拟机与Docker容器
- en: Let's start with understanding how virtual machines differ from containers.
    Typically, virtual machines are heavyweight, and hence bloated, whereas containers
    are lightweight, and hence, slim and sleek.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从理解虚拟机与容器的区别开始。通常，虚拟机是笨重的，因此臃肿，而容器是轻量级的，因此苗条而时尚。
- en: 'The following table captures the renowned qualities of VMs and containers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格概括了虚拟机和容器的著名特性：
- en: '| Virtual Machines | Containers |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: 虚拟机 | 容器
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| A few VMs can run together on a single physical machine (low density). |
    Tens of containers can run on a single physical or virtual machine (high density).
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 几个虚拟机可以在单个物理机上运行（低密度）。 | 几十个容器可以在单个物理或虚拟机上运行（高密度）。 |'
- en: '| This ensures the complete isolation of VMs for security. | This enables isolation
    at the process level and provides additional isolation using features, such as
    namespaces and cgroups. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 这确保了虚拟机的完全隔离以确保安全。 | 这使得在进程级别进行隔离，并使用命名空间和cgroups等功能提供额外的隔离。 |'
- en: '| Each VM has its own OS and the physical resources are managed by an underlying
    hypervisor. | Containers share the same kernel as their Docker host. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 每个虚拟机都有自己的操作系统，物理资源由底层的hypervisor管理。 | 容器与其Docker主机共享相同的内核。 |'
- en: '| For networking, VMs can be linked to virtual or physical switches. Hypervisors
    have buffer for I/O performance improvement, NIC bonding, and so on. | Containers
    leverage standard IPC mechanisms, such as signals, pipes, sockets, and so on,
    for networking. Each container gets its own network stack. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: 对于网络，虚拟机可以连接到虚拟或物理交换机。Hypervisors具有用于I/O性能改进的缓冲区，NIC绑定等。容器利用标准的IPC机制，如信号，管道，套接字等进行网络连接。每个容器都有自己的网络堆栈。
- en: 'The following diagram clearly illustrates the structural differences between
    the matured virtualization paradigm and the fast-evolving containerization idea:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下图清楚地说明了成熟的虚拟化范式和快速发展的容器化理念之间的结构差异。
- en: '![The security facets – virtual machines versus Docker containers](graphics/7937OT_11_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: 安全方面-虚拟机与Docker容器
- en: The debate on the security-side of VMs and containers is heating up. There are
    arguments and counter arguments in favor of one or the other. The preceding diagram
    helps us visualize, compare, and contrast the security implications in both paradigms.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于VM和容器安全方面的辩论正在加剧。有人支持其中一种，也有人反对。前面的图表帮助我们可视化、比较和对比了两种范式中的安全影响。
- en: In the case of the virtualization paradigm, the hypervisors are the centralized
    and core controllers of the virtual machines. Any kind of access to freshly provisioned
    virtual machines needs to go through this hypervisor solution, which stands as
    a solid wall for any kind of unauthenticated, unauthorized, and unethical purposes.
    Therefore, the attack surface of a virtual machine is smaller in comparison to
    containers. The hypervisor has to be hacked or broken into in order to impact
    other VMs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟化范式中，hypervisors是虚拟机的集中和核心控制器。对于新提供的虚拟机的任何访问都需要通过这个hypervisor解决方案，它是任何未经身份验证、未经授权和不道德目的的坚实墙。因此，与容器相比，虚拟机的攻击面更小。必须破解或攻破hypervisor才能影响其他虚拟机。
- en: In contrast to the virtualization paradigm, the containers are placed directly
    on top of the kernel of the host system. This lean and mean architecture gives
    a much higher efficiency because it completely eliminates the emulation layer
    of a hypervisor and also offers a much higher container density. However, unlike
    the virtual machine paradigm, the container paradigm does not have many layers,
    so one can easily gain access to the host and other containers if any of the containers
    is compromised. Therefore, the attack surface of a container is larger in comparison
    to virtual machines.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟化范式相比，容器直接放置在主机系统的内核之上。这种精简高效的架构大大提高了效率，因为它完全消除了hypervisor的仿真层，并且提供了更高的容器密度。然而，与虚拟机范式不同，容器范式没有太多的层，因此如果任何一个容器受到损害，就可以轻松地访问主机和其他容器。因此，与虚拟机相比，容器的攻击面更大。
- en: However, the designers of the Docker platform have given due consideration to
    this security risk and designed the system to thwart most security risks. In the
    ensuing sections, we will discuss the security that is innately designed in the
    system, the solutions being prescribed to substantially enhance the container
    security, and the best practices and guidelines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Docker平台的设计者已经充分考虑了这种安全风险，并设计了系统来阻止大多数安全风险。在接下来的部分中，我们将讨论系统中固有设计的安全性，所提出的大幅增强容器安全性的解决方案，以及最佳实践和指南。
- en: The security features of containers
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器的安全特性
- en: Linux containers, especially Docker containers, have a few interesting innate
    security-fulfilling features. Therefore, the containerization movement is blessed
    with decent security. In this section, we will discuss these security-related
    features in detail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Linux容器，特别是Docker容器，具有一些有趣的固有安全功能。因此，容器化运动在安全方面是受到了良好的保护。在本节中，我们将详细讨论这些与安全相关的功能。
- en: 'The Docker platform promotes a layered security approach to bring in more decisive
    and deft security for containers, as shown in the following diagram:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Docker平台提倡分层安全方法，以为容器带来更果断和灵巧的安全性，如下图所示：
- en: '![The security features of containers](graphics/7937OT_11_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![容器的安全功能](graphics/7937OT_11_02.jpg)'
- en: As discussed, Docker uses a host of security barricades to stop breaches. That
    is, if one security mechanism gets broken, other mechanisms quickly come in the
    way of containers being hacked. There are a few key areas that are to be examined
    when evaluating the security implications of Docker containers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论中，Docker使用了一系列安全屏障来阻止入侵。也就是说，如果一个安全机制被破坏，其他机制会迅速阻止容器被黑客攻击。在评估Docker容器的安全影响时，有一些关键领域需要进行检查。
- en: Resource isolation
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源隔离
- en: As we all know, containers are being positioned for the era of the microservices
    architecture. That is, in a single system, there can be multiple generic, as well
    as purpose-specific, services that dynamically collaborate with one another for
    realizing easy-to-sustain distributed applications. With the multiplicity and
    heterogeneity of services in a physical system on the climb, it is unsurprising
    that security complexity is bound to shoot up. Therefore, resources need to be
    clearly demarcated and isolated in order to escape from any kind of perilous security
    breach. The widely accepted security approach is to leverage the kernel feature
    of namespaces.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，容器被定位为微服务架构时代的产物。也就是说，在单个系统中，可以有多个通用的、以及特定目的的服务，它们动态地相互协作，实现易于维护的分布式应用程序。随着物理系统中服务的多样性和异构性不断增加，安全复杂性必然会上升。因此，资源需要明确定界并隔离，以避免任何危险的安全漏洞。被广泛接受的安全方法是利用命名空间的内核特性。
- en: 'The kernel namespaces guarantee the much-needed isolation feature for Linux
    containers. The Docker project has added a few additional namespaces for Docker
    containers, and each distinct aspect of a container runs in its own namespace
    and hence, does not have access outside it. The following is a list of namespaces
    that Docker uses:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 内核命名空间为Linux容器提供了必要的隔离功能。Docker项目为Docker容器添加了一些额外的命名空间，容器的每个独立方面都在自己的命名空间中运行，因此无法在外部访问。以下是Docker使用的命名空间列表：
- en: '**The PID namespace**: This is used for a series of actions taken in order
    to achieve process-level isolation'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PID命名空间**：用于一系列操作，以实现进程级别的隔离'
- en: '**The Network namespace**: This is used to have executive control over the
    network interfaces'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络命名空间**：用于对网络接口进行执行控制'
- en: '**The IPC namespace**: This is used to maintain control over access to IPC
    resources'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IPC命名空间**：用于控制对IPC资源的访问'
- en: '**The Mount namespace**: This is used to manage mount points'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挂载命名空间**：用于管理挂载点'
- en: '**The UTS namespace**: This is used to segregate the kernel and version identifiers'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UTS命名空间**：用于隔离内核和版本标识符'
- en: Kernel namespaces provide the first and foremost form of isolation. Processes
    running in a container don't affect processes running in another container or
    in the host system. The network namespace ensures that each container gets its
    own network stack, thus restricting access to the interfaces of other containers.
    From the network architecture point of view, all the containers on a given Docker
    host are sitting on bridge interfaces. This means that they are just like physical
    machines connected to a common Ethernet switch.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 内核命名空间提供了首要的隔离形式。在一个容器中运行的进程不会影响在另一个容器或主机系统中运行的进程。网络命名空间确保每个容器都有自己的网络堆栈，从而限制对其他容器接口的访问。从网络架构的角度来看，给定Docker主机上的所有容器都位于桥接接口上。这意味着它们就像连接到共同以太网交换机的物理机器一样。
- en: Resource accounting and control
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源会计和控制
- en: Containers consume different physical resources in order to deliver their unique
    capabilities. However, the resource consumption has to be disciplined, orderly,
    and hence, critically regulated. When there is a deviation, there is a greater
    possibility of invalidating the containers from performing their assigned tasks
    in time. For example, **Denial of Service** (**DoS**) results if the resource
    usage is not systematically synchronized.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 容器消耗不同的物理资源以提供其独特的功能。然而，资源消耗必须受到纪律、有序和严格的监管。一旦出现偏差，容器执行其分配的任务的可能性就会更大。例如，如果资源使用没有系统地同步，就会导致**拒绝服务**（DoS）攻击。
- en: The Linux containers leverage control groups (cgroups) to implement resource
    accounting and auditing to run applications in a frictionless manner. As we all
    know, there are multiple resources that contribute to running the containers successfully.
    They provide many useful metrics and ensure that each container gets its fair
    share of memory, CPU, and disk I/O.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Linux容器利用控制组（cgroups）来实现资源会计和审计，以便以无摩擦的方式运行应用程序。众所周知，有多种资源有助于成功运行容器。它们提供了许多有用的指标，并确保每个容器都能公平地分享内存、CPU和磁盘I/O。
- en: Furthermore, they guarantee that a single container cannot bring the system
    down by exhausting any one of these resources. This feature helps you fend off
    some DoS attacks. This feature helps in running containers as multi-tenant citizens
    in cloud environments to ensure their uptime and performance. Any kind of exploitation
    by other containers are identified proactively and nipped in the bud so that any
    kind of misadventure gets avoided.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它们保证单个容器不能通过耗尽任何一个资源来使系统崩溃。这个特性有助于抵御一些DoS攻击。这个特性有助于在云环境中以多租户身份运行容器，以确保它们的正常运行和性能。任何其他容器的任何利用都会被及时识别和制止，以避免任何不良事件的发生。
- en: The root privilege – impacts and best practices
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根权限-影响和最佳实践
- en: The Docker engine efficiently protects the containers from any malicious activities
    by leveraging the recently mentioned resource isolation and control techniques.
    Nonetheless, Docker exposes a few potential security threats because the Docker
    daemon runs with the root privilege. Here, in this section, we list a few security
    risks and the best practices to mitigate them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Docker引擎通过利用最近提到的资源隔离和控制技术有效地保护容器免受任何恶意活动的影响。尽管如此，Docker暴露了一些潜在的安全威胁，因为Docker守护程序以根权限运行。在这一部分，我们列出了一些安全风险和减轻它们的最佳实践。
- en: The trusted user control
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 受信任的用户控制
- en: Since the Docker daemon runs with the root privilege, it has the capability
    to mount any directory from the Docker host to the container, without limiting
    any access rights. That is, you can start a container, where the `/host` directory
    will be the `/` directory on your host, and the container will be able to alter
    your host filesystem without any restriction. This is just an example among a
    myriad of malicious uses. Considering these activities, latter versions of Docker
    restrict access to the Docker daemon through a Unix socket. Docker can be configured
    to access the daemon through the REST API over HTTP, if you explicitly decide
    to do so. However, you should ensure that it will be reachable only from a trusted
    network or VPN or protected with stunnel and client SSL certificates. You can
    also secure them with HTTPS and certificates.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker守护程序以根权限运行，它有能力将Docker主机的任何目录挂载到容器中，而不限制任何访问权限。也就是说，您可以启动一个容器，其中`/host`目录将是主机上的`/`目录，容器将能够在没有任何限制的情况下修改您的主机文件系统。这只是恶意用途中的一个例子。考虑到这些活动，Docker的后续版本限制了通过Unix套接字访问Docker守护程序的权限。如果您明确决定这样做，Docker可以配置为通过HTTP上的REST
    API访问守护程序。但是，您应该确保它只能从受信任的网络或VPN访问，或者用stunnel和客户端SSL证书保护。您还可以使用HTTPS和证书来保护它们。
- en: Non-root containers
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非根容器
- en: As mentioned previously, the Docker containers, by default, run with the root
    privilege and so does the application that runs inside the container. This is
    another major concern from a security perspective because hackers can gain root
    access to the Docker host by hacking the application running inside the container.
    Do not despair, Docker provides a simple yet powerful solution to change the container's
    privilege to a non-root user, thus, thwarting malicious root access to the Docker
    host. This change to non-root user can be accomplished using the `-u` or `--user`
    option of the `docker run` subcommand or the `USER` instruction in the `Dockerfile`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker容器默认情况下以根权限运行，容器内运行的应用程序也是如此。从安全的角度来看，这是另一个重要问题，因为黑客可以通过入侵容器内运行的应用程序来获得对Docker主机的根访问权限。不要绝望，Docker提供了一个简单而强大的解决方案，可以将容器的权限更改为非根用户，从而阻止对Docker主机的恶意根访问。可以使用`docker
    run`子命令的`-u`或`--user`选项，或者在`Dockerfile`中使用`USER`指令来实现将用户更改为非根用户。
- en: In this section, we will demonstrate this concept by showing you the default
    root privilege of the Docker container and then, continue to modify the root privilege
    to a non-root user using the `USER` instruction in the `Dockerfile`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过展示Docker容器的默认根权限来演示这个概念，然后继续使用`Dockerfile`中的`USER`指令将根权限修改为非根用户。
- en: 'First, we demonstrate the default root privilege of the Docker container by
    running a simple `id` command in a `docker run` subcommand, as shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过在`docker run`子命令中运行简单的`id`命令来演示Docker容器的默认根权限，如下所示：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s perform the following steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行以下步骤：
- en: 'Craft a `Dockerfile` that creates a non-root privilege user and modify the
    default root user to the newly-created non-root privilege user, as shown here:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作一个`Dockerfile`，创建一个非根权限用户，并将默认的根用户修改为新创建的非根权限用户，如下所示：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Proceed to build the Docker image using the `docker build` subcommand, as depicted
    here:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用`docker build`子命令构建Docker镜像，如下所示：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, let''s verify the current user of the container, using the `id` command
    in a `docker run` subcommand:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用`docker run`子命令中的`id`命令来验证容器的当前用户：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Evidently, the container's user, group, the groups are now changed to a non-root
    user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，容器的用户、组和组现在已更改为非根用户。
- en: Modifying the default root privilege to a non-root privilege is a very effective
    way of containing malevolent penetration into the Docker host kernel.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认的根特权修改为非根特权是遏制恶意渗透进入Docker主机内核的一种非常有效的方法。
- en: Loading the Docker images and the security implications
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载Docker镜像和安全影响
- en: Docker typically pulls images from the network, which are usually curated and
    verified at the source. However, for the purpose of backup and restore, the Docker
    images can be saved using the `docker save` subcommand and loaded back using the
    `docker load` subcommand. This mechanism can also be used to load third-party
    images through unconventional means. Unfortunately, in such a practice, the Docker
    engine cannot verify the source and hence, the images can carry malicious code.
    So, as a first shield of safety, Docker extracts the image in a chrooted subprocess
    for privilege separation. Even though Docker ensures the privilege separation,
    it is not recommended to load arbitrary images.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Docker通常从网络中拉取镜像，这些镜像通常在源头进行筛选和验证。然而，为了备份和恢复，Docker镜像可以使用`docker save`子命令保存，并使用`docker
    load`子命令加载回来。这种机制也可以用于通过非常规手段加载第三方镜像。不幸的是，在这种做法中，Docker引擎无法验证源头，因此这些镜像可能携带恶意代码。因此，作为第一道安全屏障，Docker在特权分离的chrooted子进程中提取镜像。即使Docker确保了特权分离，也不建议加载任意镜像。
- en: The emerging security approaches
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新兴的安全方法
- en: So far, we have discussed the unique security-related kernel characteristics
    and capabilities. Most security holes can be closed down by understanding and
    applying those kernel capabilities. Security experts and exponents, having considered
    the faster and widespread adoption of the raging containerization idea in production
    environments, have brought forth a few more additional security solutions, which
    we will describe in detail. These security methods need to be given utmost importance
    by developers as well as system administrators while developing, deploying, and
    delivering enterprise-class containers in order to nullify any kind of inside
    or outside security attack.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了与安全相关的内核特性和能力。通过理解和应用这些内核能力，大多数安全漏洞可以得到关闭。安全专家和倡导者考虑到了容器化理念在生产环境中更快更广泛的采用，提出了一些额外的安全解决方案，我们将详细描述这些安全方法。在开发、部署和交付企业级容器时，开发人员和系统管理员需要极为重视这些安全方法，以消除任何内部或外部的安全攻击。
- en: Security-Enhanced Linux for container security
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于容器安全的安全增强型Linux
- en: '**Security-Enhanced Linux** (**SELinux**) is a brave attempt to clean up the
    security holes in Linux containers and is an implementation of a **Mandatory Access
    Control** (**MAC**) mechanism, **Multi-Level security** (**MLS**), and **Multi-Category
    security** (**MCS**) in the Linux kernel. A new collaborative initiative referred
    to as Virtproject, is being built on SELinux, and this is getting integrated with
    Libvirt to provide an adaptable MAC framework for virtual machines, as well as
    containers. This new architecture provides a sheltered separation and safety net
    for containers, as it primarily prevents root processes within the container from
    interfacing and interfering with other processes running outside this container.
    Docker containers are automatically assigned to an SELinux context specified in
    the SELinux policy.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 安全增强型Linux（SELinux）是清理Linux容器中的安全漏洞的一次勇敢尝试，它是Linux内核中强制访问控制（MAC）机制、多级安全（MLS）和多类别安全（MCS）的实现。一个名为Virtproject的新的协作倡议正在基于SELinux构建，并且正在与Libvirt集成，为虚拟机和容器提供一个可适应的MAC框架。这种新的架构为容器提供了一个安全的隔离和安全网，因为它主要阻止容器内的根进程与容器外运行的其他进程进行接口和干扰。Docker容器会自动分配到SELinux策略中指定的SELinux上下文中。
- en: SELinux always checks for all the allowed operations after the standard **discretionary
    access control** (**DAC**) is completely checked. SELinux can establish and enforce
    rules on files and processes in a Linux system and on their actions based on defined
    policies. As per SELinux specification, files, including directories and devices,
    are referred to as objects. Similarly, processes, such as a user running a command,
    are being termed as subjects. Most operating systems use a DAC system that controls
    how subjects interact with objects and one another. Using DAC on operating systems,
    users can control the permissions of their own objects. For example, on a Linux
    OS, users can make their home directories readable, giving users and subjects
    a handle to steal potentially sensitive information. However, DAC alone is not
    a fool-proof security method and DAC access decisions are solely based on user
    identity and ownership. Generally, DAC simply ignores other security enabling
    parameters, such as the role of the user, the function, the trustworthiness of
    the program, and the sensitivity and integrity of the data.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全检查**自由裁量访问控制**（**DAC**）之后，SELinux始终检查所有允许的操作。SELinux可以根据定义的策略在Linux系统中的文件和进程以及它们的操作上建立和强制执行规则。根据SELinux规范，文件（包括目录和设备）被称为对象。同样，进程，比如运行命令的用户，被称为主体。大多数操作系统使用DAC系统来控制主体如何与对象和彼此交互。在操作系统上使用DAC，用户可以控制自己对象的权限。例如，在Linux操作系统上，用户可以使他们的主目录可读，从而给用户和主体窃取潜在敏感信息的机会。然而，单独使用DAC并不是一个绝对安全的方法，DAC访问决策仅基于用户身份和所有权。通常，DAC简单地忽略其他安全启用参数，如用户的角色、功能、程序的可信度以及数据的敏感性和完整性。
- en: As each user typically has complete discretion over their files, ensuring a
    system-wide security policy is difficult. Furthermore, every program run by a
    user simply inherits all the permissions granted to the user, and the user is
    free to change the access to his/her files. All these lead to a minimal protection
    against malicious software. Many system services and privileged programs run with
    coarse-grained privileges so that any flaw in any one of these programs can be
    easily exploited and extended to gain catastrophic access to the system.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个用户通常对其文件拥有完全自由裁量权，确保系统范围的安全策略是困难的。此外，用户运行的每个程序都只是继承了用户被授予的所有权限，用户可以自由更改对他/她的文件的访问权限。所有这些都导致对恶意软件的最小保护。许多系统服务和特权程序以粗粒度权限运行，因此这些程序中的任何缺陷都可以轻松利用并扩展以获得对系统的灾难性访问。
- en: As mentioned at the beginning, SELinux adds **Mandatory Access Control** (**MAC**)
    to the Linux kernel. This means that the owners of an object have no control or
    discretion over access to an object. The kernel enforces MAC which is a general-purpose
    MAC mechanism and it needs the ability to enforce administratively-set security
    policies to all the processes and files in the system. These files and processes
    will be used to base decisions on labels containing a variety of security-centric
    information. MAC has the inherent capability to sufficiently protect the system.
    Furthermore, MAC ensures application security against any willful hacking and
    tampering. MAC also provides a strong separation of applications so that any attacked
    and compromised application runs separately.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在开头提到的，SELinux将**强制访问控制**（**MAC**）添加到Linux内核中。这意味着对象的所有者对对象的访问没有控制或自由裁量权。内核强制执行MAC，这是一种通用的MAC机制，它需要能够对系统中的所有进程和文件强制执行管理设置的安全策略。这些文件和进程将用于基于包含各种安全信息的标签做出决策。MAC具有足够保护系统的固有能力。此外，MAC确保应用程序安全，防止任何恶意入侵和篡改。MAC还提供了强大的应用程序隔离，以便任何受攻击和受损的应用程序都可以独立运行。
- en: Next in line is the **Multi-Category Security** (**MCS**). MCS is mainly used
    to protect containers from other containers. That is, any affected container does
    not have the capability to bring down other containers in the same Docker host.
    MCS is based on the Multi-Level Security (MLS) capability and uniquely takes advantage
    of the last component of the SELinux label, *the MLS Field*. In general, when
    containers are launched, the Docker daemon picks a random MCS label. The Docker
    daemon labels all of the content in the container with that MCS label.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是**多类别安全**（**MCS**）。MCS主要用于保护容器免受其他容器的影响。也就是说，任何受影响的容器都无法使同一Docker主机中的其他容器崩溃。MCS基于多级安全（MLS）功能，并独特地利用SELinux标签的最后一个组件，*MLS字段*。一般来说，当容器启动时，Docker守护程序会选择一个随机的MCS标签。Docker守护程序会使用该MCS标签为容器中的所有内容打上标签。
- en: When the daemon launches the container process, it tells the kernel to label
    the processes with the same MCS label. The kernel only allows container processes
    to read/write their own content as long as the process MCS label matches the filesystem
    content MCS label. The kernel blocks the container processes from reading/writing
    content that is labeled with a different MCS label. This way, a hacked container
    process is prevented from attacking different containers. The Docker daemon is
    responsible for guaranteeing that no containers use the same MCS label. The cascading
    of errors among containers is prohibited through the adroit usage of MCS.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当守护程序启动容器进程时，它告诉内核使用相同的MCS标签为进程打标签。只要进程的MCS标签与文件系统内容的MCS标签匹配，内核就只允许容器进程读取/写入自己的内容。内核会阻止容器进程读取/写入使用不同MCS标签标记的内容。这样，被黑客入侵的容器进程就无法攻击其他容器。Docker守护程序负责确保没有容器使用相同的MCS标签。通过巧妙地使用MCS，禁止了容器之间的错误级联。
- en: SELinux-inspired benefits
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受SELinux启发的好处
- en: 'SELinux is being positioned as one of the major improvements to bring foolproof
    security to Docker containers. It is abundantly clear that there are several security-related
    advantages with SELinux. As Docker containers natively run on Linux systems, the
    core and critical advancements being made in Linux systems through the elegant
    SELinux approach are easily replicated for Docker containers too. All processes
    and files are accordingly labeled with a type. A type is capable of defining and
    differentiating a domain for processes and a distinct domain for files. Processes
    are fully separated from each other by running them in their own domains, and
    any incursion into others is stringently monitored and nipped in the budding stage
    itself. SELinux empowers us to establish and enforce policy rules to define how
    processes interact with files and with each other. For example, any access is
    allowed only if there is a clearly articulated SELinux policy to allow the desired
    and demarcated access. Precisely speaking, SELinux can come handy in enforcing
    data confidentiality and integrity. SELinux is also beneficial for protecting
    processes from untrusted inputs. It comes with the following benefits:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux被定位为将绝对安全带给Docker容器的主要改进之一。很明显，SELinux具有几个与安全相关的优势。由于Docker容器原生运行在Linux系统上，通过优雅的SELinux方法在Linux系统中进行的核心和关键改进也可以轻松地复制到Docker容器中。所有进程和文件都被标记为一种类型。一种类型能够定义和区分进程的域和文件的不同域。通过在它们自己的域中运行它们，进程彼此之间完全分离，对其他进程的任何侵入都受到严格监控并在萌芽阶段被制止。SELinux赋予我们建立和执行策略规则的权力，以定义进程如何与文件和彼此交互。例如，只有在有明确阐述的SELinux策略允许所需和划定的访问时，才允许任何访问。确切地说，SELinux在强制执行数据保密性和完整性方面非常方便。SELinux还有助于保护进程免受不受信任的输入。它具有以下好处：
- en: '**Fine-grained access control**: SELinux access decisions are based on considering
    all kinds of security-impacting information, such as a SELinux user, role, type,
    and level. SELinux policy can be administratively defined, enforced, and enacted
    at a system level. User discretion in loosening and lightening security and access
    policies is totally eliminated with the comprehensive leverage of the SELinux
    upgrade.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 细粒度访问控制：SELinux访问决策是基于考虑各种安全影响信息，比如SELinux用户、角色、类型和级别。SELinux策略可以在系统级别进行管理定义、执行和实施。通过全面利用SELinux升级，用户在放宽和减轻安全和访问策略方面的自由裁量权完全被消除。
- en: '**Reduced vulnerability to privilege escalation attacks**: These processes
    generally run in domains and are therefore cleanly separated from each other.
    SELinux policy rules define how processes can access files and other processes.
    That is, if a process is advertently or unknowingly compromised, the attacker
    only has access to the standard functions of that process and to the files the
    process has been configured to have access to. For example, if a web server is
    brought down, an attacker cannot use that process to read other files, unless
    a specific SELinux policy rule was incorporated to allow such access.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少特权升级攻击的漏洞性：这些进程通常在域中运行，因此彼此之间干净地分离。SELinux策略规则定义了进程如何访问文件和其他进程。也就是说，如果一个进程被有意或无意地破坏，攻击者只能访问该进程的标准功能和该进程被配置为访问的文件。例如，如果一个Web服务器被关闭，攻击者不能使用该进程来读取其他文件，除非特定的SELinux策略规则被纳入以允许这样的访问。
- en: '**Process separation in SELinux**: These processes are slated to run in their
    own domains, preventing processes from accessing files used by other processes,
    as well as preventing processes from accessing other processes. For example, when
    running SELinux, an attacker cannot compromise a server module (for instance,
    Samba Server) and then use that as an attack vector to read and write to files
    used by other processes, such as backend databases. SELinux comes in handy in
    substantially limiting the damage made by improper configuration mistakes. Domain
    Name System (DNS) servers often replicate information between each other and this
    is called as a zone transfer. Attackers can use zone transfers to update DNS servers
    with false information. SELinux prevents zone files being misused by any hackers.
    We use two types of SELinux enforcement for Docker containers.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux中的进程分离：这些进程被安排在自己的域中运行，防止进程访问其他进程使用的文件，同时也防止进程访问其他进程。例如，在运行SELinux时，攻击者无法破坏服务器模块（例如Samba服务器），然后利用它作为攻击向量来读写其他进程使用的文件，比如后端数据库。SELinux在大大限制了由不当配置错误造成的损害方面非常有用。域名系统（DNS）服务器经常在彼此之间复制信息，这被称为区域传输。攻击者可以使用区域传输来向DNS服务器更新虚假信息。SELinux防止区域文件被任何黑客滥用。我们对Docker容器使用两种类型的SELinux执行。
- en: '**Type enforcement**: This protects the host from the processes within the
    container. The default type for running Docker containers is `svirt_lxc_net_t`.
    All container processes run with this type, and all the content within the container
    is labeled with the `svirt_sandbox_file_t` type. The `svirt_lxc_net_t` default
    type is allowed to manage any content labeled with `svirt_sandbox_file_t`. Furthermore,
    `svirt_lxc_net_t` is also able to read/execute most labels under `/usr` on the
    host.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型强制：这保护主机免受容器内部的进程的影响。运行Docker容器的默认类型是`svirt_lxc_net_t`。所有容器进程都以这种类型运行，容器内的所有内容都标记有`svirt_sandbox_file_t`类型。`svirt_lxc_net_t`默认类型被允许管理任何标记为`svirt_sandbox_file_t`的内容。此外，`svirt_lxc_net_t`还能够读取/执行主机上`/usr`目录下的大多数标签。
- en: '**A security problem**: If all container processes are run with `svirt_lxc_net_t`
    and all the content is labeled with `svirt_sandbox_file_t`, container processes
    may be allowed to attack processes running in other containers and content owned
    by other containers. This is where Multi Category Security (MCS) enforcement comes
    in handy.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全问题**：如果所有容器进程都以`svirt_lxc_net_t`运行，并且所有内容都标记为`svirt_sandbox_file_t`，则容器进程可能被允许攻击运行在其他容器中的进程和其他容器拥有的内容。这就是多类别安全（MCS）执行变得很有用的地方。'
- en: '**Multi-Category Security (MCS)**: This is a solid enhancement to SELinux that
    allows users to label files with categories. These categories are actually used
    to further constrain **Discretionary Access Control** (**DAC**) and **Type Enforcement**
    (**TE**) logic. An example of a category is *Company_Confidential*. Only users
    with access to this category can access files labeled with the category, assuming
    that the existing DAC and TE rules also permit access. The term *categories* refers
    to the same nonhierarchical categories used by **Multi-Level Security** (**MLS**).
    Under MLS, objects and subjects are labeled with security levels. These security
    levels consist of a hierarchical sensitivity value, such as *Top Secret*, and
    zero or more nonhierarchical categories, such as *Crypto*. Categories provide
    compartments within the sensitivity levels and enforce the need-to-know security
    principle. MCS is an adaptation of MLS and represents a policy change. Beyond
    the access control, MCS can be used to display the MCS categories at the top and
    bottom of the printed pages. This may also include a cover sheet to indicate the
    document handling procedures.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多类别安全（MCS）**：这是对SELinux的一个实质性增强，允许用户为文件打上类别标签。这些类别实际上用于进一步限制**自主访问控制**（**DAC**）和**类型强制**（**TE**）逻辑。一个类别的例子是*公司机密*。只有有权访问该类别的用户才能访问带有该类别标签的文件，假设现有的DAC和TE规则也允许访问。术语*类别*指的是**多级安全**（**MLS**）中使用的非层次化类别。在MLS下，对象和主体被标记有安全级别。这些安全级别包括一个分层敏感值，比如*绝密*，以及零个或多个非层次化类别，比如*加密*。类别提供了敏感级别内的隔间，并强制实施需要知道的安全原则。MCS是对MLS的一种改编，代表了一种政策变化。除了访问控制，MCS还可以用于在打印页面的顶部和底部显示MCS类别。这可能还包括一张封面，以指示文件处理程序。'
- en: '**AppArmor**: This is an effective and easy-to-use Linux application security
    system. AppArmor proactively protects the OS and applications from any external
    or internal threats, even zero-day attacks, by enforcing good behavior and preventing
    even unknown application flaws from being exploited. AppArmor security policies
    completely define what system resources individual applications can access and
    with what privileges. A number of default policies are included in AppArmor, and
    using a combination of advanced static analysis and learning-based tools, AppArmor
    policies, for even very complex applications, can be deployed successfully in
    a matter of hours. AppArmor is available for Docker containers, on systems that
    support it. AppArmor provides enterprise-class, host-intrusion prevention, and
    protects the operating system and applications from the harmful effects of internal
    or external attacks, malicious applications, and viruses. As a result, businesses
    can protect mission-critical data, reduce system administration costs, and ensure
    compliance with government regulations. Comprehensive enterprise-wide network
    application security requires attention to both users and applications. This is
    one prominent option available to bring in impenetrable security for Docker containers
    and applications present inside the containers. Policies are turning out to be
    a powerful mechanism in ensuring container security. Policy formulation and the
    automated enforcement of policies go a long way in guaranteeing the safety of
    containers.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AppArmor**：这是一个有效且易于使用的Linux应用程序安全系统。AppArmor通过强制执行良好的行为并防止甚至未知的应用程序缺陷被利用，主动保护操作系统和应用程序免受任何外部或内部威胁，甚至零日攻击。AppArmor安全策略完全定义了个别应用程序可以访问的系统资源以及权限。AppArmor包含了许多默认策略，并且使用高级静态分析和基于学习的工具的组合，即使是非常复杂的应用程序，也可以在几小时内成功部署AppArmor策略。AppArmor适用于支持它的系统上的Docker容器。AppArmor提供企业级主机入侵防范，并保护操作系统和应用程序免受内部或外部攻击、恶意应用程序和病毒的有害影响。因此，企业可以保护关键数据，降低系统管理成本，并确保符合政府法规。全面的企业范围网络应用程序安全需要关注用户和应用程序。这是一个突出的选择，可为Docker容器和容器内的应用程序带来无法渗透的安全性。策略正在成为确保容器安全的强大机制。策略制定和自动执行策略在保证容器安全方面起着重要作用。'
- en: The best practices for container security
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器安全的最佳实践
- en: 'There are robust and resilient security solutions to boost the confidence of
    providers, as well as users, toward embracing the containerization journey with
    all the clarity and alacrity. In this section, we provide a number of tips, best
    practices, and key guidelines collected from different sources in order to enable
    security administrators and consultants to tightly secure Docker containers. Essentially,
    if containers are running in a multitenant system and you are not using the proven
    security practices, then there are definite dangers lurking around the security
    front. As mentioned previously, security breaches can happen at different service
    levels and hence, security architects need to figure out what can go wrong and
    prescribe proven and pioneering security-preserving methods. Security visionaries
    and luminaries advise the following easy-to-understand-and-follow practices to
    reap the originally envisaged benefits of containers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有强大而有韧性的安全解决方案，可以增强服务提供者和用户对容器化旅程的信心，以及对其有清晰和敏捷的态度。在本节中，我们提供了许多提示、最佳实践和关键指南，这些来自不同来源，旨在使安全管理员和顾问能够严密地保护Docker容器。基本上，如果容器在多租户系统中运行，并且您没有使用经过验证的安全实践，那么安全前方肯定存在着明显的危险。如前所述，安全漏洞可能发生在不同的服务级别，因此安全架构师需要弄清楚可能出现的问题，并规定经过验证和开创性的安全保护方法。安全领域的先驱和权威建议采用以下易于理解和遵循的做法，以实现最初设想的容器益处：
- en: Do away with the privileged access
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摒弃特权访问
- en: Run your containers and services as non-root as much as possible
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量以非root用户身份运行您的容器和服务
- en: 'The first and foremost advice is not to run random and untested Docker images
    on your system. Strategize and leverage trusted repositories of Docker images
    and containers to subscribe and use applications and data containers for application
    development, packaging, shipping, deployment, and delivery. It is clear from past
    experiences that any untrusted containers that are downloaded from the public
    domain may result in malevolent and messy situations. Linux distributions, such
    as **Red Hat Enterprise Linux** (**RHEL**), have the following mechanisms in place
    in order to assist administrators to ensure the utmost security:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首要建议是不要在系统上运行随机和未经测试的Docker镜像。制定策略，利用受信任的Docker镜像和容器存储库来订阅和使用应用程序和数据容器，用于应用程序开发、打包、装运、部署和交付。从过去的经验来看，从公共领域下载的任何不受信任的容器可能会导致恶意和混乱的情况。Linux发行版，如**Red
    Hat Enterprise Linux**（**RHEL**），已经采取了以下机制，以帮助管理员确保最高的安全性：
- en: A trusted repository of software to be downloaded and used
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可信赖的软件存储库可供下载和使用
- en: Security updates and patches to fix vulnerabilities
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全更新和补丁来修复漏洞
- en: A security response team to find and manage vulnerabilities
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全响应团队来查找和管理漏洞
- en: A team of engineers to manage/maintain packages and work on security enhancements
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个工程团队来管理/维护软件包并致力于安全增强
- en: Common criteria certification to check the security of the operating system
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见标准认证来检查操作系统的安全性
- en: As mentioned previously, the biggest problem is that not everything in Linux
    is namespaced. Currently, Docker uses five namespaces to alter the process' view
    of any system—process, network, mount, hostname, and shared memory. While these
    give the users some level of security, it is by no means a comprehensive one such
    as KVM. In a KVM environment, processes in a virtual machine do not talk to the
    host kernel directly. They do not have any access to kernel filesystems. Device
    nodes can talk to the VMs kernel, but not to hosts. Therefore, in order to have
    a privilege escalation out of a VM, the process has to subvert the VM's kernel,
    find an enabling vulnerability in the hypervisor, break through SELinux Controls
    (sVirt), and attack the host's kernel. In the container landscape, the approach
    is to protect the host from the processes within the container and to protect
    containers from other containers. It is all about the combination or clustering
    together of multiple security controls to defend containers and their contents.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，最大的问题是并非所有 Linux 都有命名空间。目前，Docker 使用五个命名空间来改变进程对系统的视图——进程、网络、挂载、主机名和共享内存。虽然这些给用户一定程度的安全性，但绝不像
    KVM 那样全面。在 KVM 环境中，虚拟机中的进程不直接与主机内核通信。它们无法访问内核文件系统。设备节点可以与虚拟机内核通信，但不能与主机通信。因此，为了从虚拟机中提升权限，进程必须破坏虚拟机内核，找到超级监视器中的漏洞，突破
    SELinux 控制（sVirt），并攻击主机内核。在容器环境中，方法是保护主机免受容器内进程的影响，并保护容器免受其他容器的影响。这就是将多个安全控制组合或聚合在一起，以保护容器及其内容。
- en: Basically, we want to put in as many security barriers as possible to prevent
    any sort of break out. If a privileged process can break out of one containment
    mechanism, the idea is to block them with the next barrier in the hierarchy. With
    Docker, it is possible to take advantage of as many security mechanisms of Linux
    as possible.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们希望尽可能设置多个安全屏障，以防止任何形式的突破。如果特权进程能够突破一个封闭机制，那么就要用层次结构中的下一个屏障来阻止它们。使用 Docker，可以尽可能利用
    Linux 的多个安全机制。
- en: 'The following are possible security measures that can be taken:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能采取的安全措施：
- en: '**Filesystem protections**: Filesystems need to be read-only in order to escape
    from any kind of unauthorized write. That is, privileged container processes cannot
    write to them and do not affect the host system either. Generally, most of the
    applications need not write anything to their filesystems. There are several Linux
    distributions with read-only filesystems. It is therefore possible to block the
    ability of the privileged container processes from remounting filesystems as read
    and write. It is all about blocking the ability to mount any filesystems within
    the container.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统保护：为了避免任何未经授权的写入，文件系统需要是只读的。也就是说，特权容器进程不能向其写入，也不会影响主机系统。一般来说，大多数应用程序不需要向其文件系统写入任何内容。有几个
    Linux 发行版使用只读文件系统。因此，可以阻止特权容器进程重新挂载文件系统为读写模式。这就是阻止容器内挂载任何文件系统的能力。
- en: '**Copy-on-write filesystems**: Docker has been using **Advanced Multi-layered
    unification Filesystem** (**AuFS**) as a filesystem for containers. AuFS is a
    layered filesystem that can transparently overlay one or more existing filesystems.
    When a process needs to modify a file, AuFS first creates a copy of that file
    and is capable of merging multiple layers into a single representation of a filesystem.
    This process is called copy-on-write, and this prevents one container from seeing
    the changes of another container even if they write to the same filesystem image.
    One container cannot change the image content to affect the processes in another
    container.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写时复制文件系统**：Docker一直在使用**高级多层统一文件系统**（**AuFS**）作为容器的文件系统。AuFS是一个分层文件系统，可以透明地覆盖一个或多个现有的文件系统。当一个进程需要修改一个文件时，AuFS首先创建该文件的副本，并能够将多个层合并成一个文件系统的单一表示。这个过程称为写时复制，这可以防止一个容器看到另一个容器的更改，即使它们写入相同的文件系统镜像。一个容器不能改变镜像内容以影响另一个容器中的进程。'
- en: '**The choice of capabilities**: Typically, there are two ways to perform permission
    checks: privileged processes and unprivileged processes. Privileged processes
    bypass all sorts of kernel permission checks, while unprivileged processes are
    subject to full permission checking based on the process''s credentials. The recent
    Linux kernel divides the privileges traditionally associated with the super-user
    into distinct units known as capabilities, which can be independently enabled
    and disabled. Capabilities are a per-thread attribute. Removing capabilities can
    bring forth several positive changes in Docker containers. Invariably, capabilities
    decide the Docker functionality, accessibility, usability, security, and so on.
    Therefore, it requires much thought while embarking on the journey of addition,
    as well as removal of capabilities.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能的选择**：通常有两种方法来执行权限检查：特权进程和非特权进程。特权进程可以绕过所有类型的内核权限检查，而非特权进程则根据进程的凭据进行完整的权限检查。最近的Linux内核将传统上与超级用户相关联的特权划分为称为功能的不同单元，这些功能可以独立启用和禁用。功能是每个线程的属性。删除功能可以在Docker容器中带来几个积极的变化。无论如何，功能决定了Docker的功能、可访问性、可用性、安全性等等。因此，在增加或删除功能的过程中需要仔细考虑。'
- en: '**Keeping systems and data secure**: Some security issues need to be addressed
    before enterprises and service providers use containers in production environments.
    Containerization will eventually make it easier to secure applications for the
    following three reasons:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持系统和数据的安全**：在企业和服务提供商在生产环境中使用容器之前，需要解决一些安全问题。出于以下三个原因，容器化最终将使得更容易保护应用程序：'
- en: A smaller payload reduces the surface area for security flaws
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较小的有效负载减少了安全漏洞的表面积
- en: Instead of incrementally patching the operating system, you can update it
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以更新操作系统而不是逐步打补丁
- en: By allowing a clear separation of concerns, containers help IT and application
    teams collaborate purposefully
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过允许明确的关注分离，容器有助于IT和应用团队有目的地合作。
- en: The IT department is responsible for the security flaws associated with the
    infrastructure. The application team fixes flaws inside the container and is also
    responsible for runtime dependencies. Easing the tension between IT and applications
    development teams helps smooth the transition to a hybrid cloud model. The responsibilities
    of each team are clearly demarcated in order to secure both containers and their
    runtime infrastructures. With such a clear segregation, proactively identifying
    any visible and invisible endangering security ordeals and promptly eliminating
    it in time, policy engineering and enforcement, precise and perfect configuration,
    leveraging appropriate security-unearthing and mitigation tools, and so on, are
    being systematically accomplished.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: IT部门负责基础设施相关的安全漏洞。应用团队修复容器内部的缺陷，也负责运行时依赖关系。缓解IT和应用开发团队之间的紧张关系有助于平稳过渡到混合云模型。每个团队的责任都清晰地划分，以确保容器及其运行时基础设施的安全。通过这样清晰的分工，积极地识别任何可见和不可见的危害安全的事件，并及时消除，制定和执行策略，精确和完美的配置，利用适当的安全发现和缓解工具等，都在系统地完成。
- en: '**Leverage linux kernel capabilities**: An average server (bare metal or virtual
    machine) needs to run a bunch of processes as root. These typically include `ssh`,
    `cron`, `syslogd`, hardware management tools (for example, load modules), network
    configuration tools (for example, handling DHCP, WPA, or VPNs), and so on. A container
    is very different because almost all of these tasks are being handled by the infrastructures
    on which containers are to be hosted and run. There are several best practices,
    key guidelines, technical knowhow, and so on, on various blogs authored by security
    experts. You can find some of the most interesting and inspiring security-related
    details at [https://docs.docker.com/articles/security/](https://docs.docker.com/articles/security/).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用Linux内核功能**：一个普通的服务器（裸机或虚拟机）需要以root身份运行一堆进程。这些通常包括`ssh`、`cron`、`syslogd`、硬件管理工具（例如加载模块）、网络配置工具（例如处理DHCP、WPA或VPN）等。容器非常不同，因为几乎所有这些任务都由容器所托管和运行的基础设施处理。安全专家撰写的各种博客上有一些最有趣和鼓舞人心的安全相关细节的最佳实践、关键指南、技术知识等。您可以在[https://docs.docker.com/articles/security/](https://docs.docker.com/articles/security/)找到一些最有趣和鼓舞人心的安全相关细节。'
- en: Digital signature verification
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字签名验证
- en: Docker, the popular open source container company, has announced that it has
    added the digital signature verification to Docker images. This will ensure that
    when you download a containerized application from an official Docker repository,
    you get the real version. At this point in time, the Docker engine automatically
    checks the provenance and integrity of all the images in the official repository
    using digital signatures. A digital signature brings on an additional trust on
    Docker images. That is, the particular Docker image was not tampered or twisted,
    and hence, it is ready to be fully used with all the confidence and clarity.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Docker，这家知名的开源容器公司，宣布已将数字签名验证添加到Docker镜像中。这将确保当您从官方Docker仓库下载一个容器化应用时，您得到的是真实版本。此时，Docker引擎会自动使用数字签名检查官方仓库中所有镜像的来源和完整性。数字签名为Docker镜像带来了额外的信任。也就是说，特定的Docker镜像没有被篡改或扭曲，因此可以放心和清晰地完全使用。
- en: This newly-added cryptographic verification is used to provide users with an
    additional assurance of security. In the future, there will be features, such
    as publisher authentication, image integrity and authorization, **public key infrastructure**
    (**PKI**) management, and many more for both image publishers, as well as consumers.
    If an official image is corrupted or tampered with, Docker will instantaneously
    issue a warning. At this point in time, the Docker engine will not prevent any
    affected images from running and nonofficial images are not verified either. This
    will change the future versions as the Docker community hardens the code and irons
    out the inevitable usability quirks.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新添加的加密验证用于为用户提供额外的安全保证。将来，将会有一些功能，比如发布者认证、镜像完整性和授权、公钥基础设施（PKI）管理等，供镜像发布者和消费者使用。如果官方镜像被损坏或篡改，Docker将立即发出警告。目前，Docker引擎不会阻止任何受影响的镜像运行，非官方镜像也不会被验证。随着Docker社区加固代码并解决不可避免的可用性问题，未来版本将会改变这一点。
- en: When developing an application, you sometimes need to take a look at it while
    it is running. A number of tools, such as `nsinit` and `nsenter`, have sprung
    up recently to help developers debug their containerized applications. Some users
    have taken to running an init process to spawn `sshd` along with their application
    to allow them access, which creates risk and overhead.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时，有时需要在其运行时查看它。最近出现了一些工具，如`nsinit`和`nsenter`，以帮助开发人员调试其容器化的应用程序。一些用户已经开始运行一个init进程，以在他们的应用程序中生成`sshd`，以允许他们访问，这会带来风险和开销。
- en: Secure deployment guidelines for Docker
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker的安全部署指南
- en: Docker containers are increasingly hosted in production environments to be publicly
    discovered and used by many. Especially, with the faster adoption of cloud technologies,
    the IT environments of worldwide organizations and institutions are getting methodically
    optimized and transformed to deftly and decisively host a wider variety of virtual
    machines and containers. There are new improvements and enablements, such as Flocker
    and Clocker, in order to speed up the process of taking containers to cloud environments
    (private, public, hybrid, and community). There are recommendations that have
    to be followed while deploying containers. As we all know, containers remarkably
    reduce the overhead by allowing developers and system administrators to seamlessly
    deploy containers for applications and services required for business operations.
    However, because Docker leverages the same kernel as the host system to reduce
    the need for resources, containers can be exposed to significant security risks
    if not adequately configured. There are a few carefully annotated guidelines to
    be strictly followed by both developers and system administrators while deploying
    containers. For example, [https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)
    elaborates in a tabular form with all the right details.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器越来越多地托管在生产环境中，可以被公开发现和被许多人使用。特别是随着云技术的更快采用，全球组织和机构的IT环境正在被系统地优化和转变，以灵活和果断地托管更多种类的虚拟机和容器。有一些新的改进和功能，比如Flocker和Clocker，可以加快将容器部署到云环境（私有、公共、混合和社区）的过程。在部署容器时必须遵循一些建议。众所周知，容器通过允许开发人员和系统管理员无缝部署应用程序和服务，显著减少了开销。然而，由于Docker利用与主机系统相同的内核来减少资源需求，如果配置不足，容器可能面临重大安全风险。在部署容器时，开发人员和系统管理员必须严格遵循一些仔细注释的指南。例如，[https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines](https://github.com/GDSSecurity/Docker-Secure-Deployment-Guidelines)以表格形式详细阐述了所有正确的细节。
- en: It is an indisputable truth that the software flaws in distributed and complex
    applications open the way for intelligent attackers and hackers to break into
    systems that host critical, confidential, and customer data. Therefore, security
    solutions are being insisted and ingrained across all the layers in the IT stack,
    and hence, there arises many types of security vulnerabilities at different levels
    and layers. For example, perimeter security solves only part of the problem because
    the changing requirements are mandate for allowing network access to employees,
    customers, and partners. Similarly, there are firewalls, intrusion detection and
    prevention systems, application delivery controllers (ADCs), access controls,
    multifactor authentication and authorization, patching, and so on. Then, for securing
    data while in transit, persistence, and being used by applications, there are
    encryption, steganography, and hybrid security models. All these are reactive
    and realistic mechanisms, but the increasing tendency is all about virtual businesses
    insisting on proactive and preemptive security methods. As IT is tending and trending
    toward the much-anticipated virtual IT world, the security issues and implications
    are being given extra importance by security experts.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，分布式和复杂应用程序中的软件缺陷为智能攻击者和黑客打开了入侵托管关键、机密和客户数据的系统的大门。因此，安全解决方案被坚持并融入到IT堆栈的所有层中，因此在不同级别和层次上出现了许多类型的安全漏洞。例如，周界安全只解决了部分问题，因为不断变化的要求要求允许员工、客户和合作伙伴访问网络。同样，还有防火墙、入侵检测和预防系统、应用交付控制器（ADC）、访问控制、多因素身份验证和授权、打补丁等。然后，为了在传输、持久性和应用程序使用数据时保护数据，有加密、隐写术和混合安全模型。所有这些都是反应性和现实的机制，但趋势增长的是虚拟业务坚持采用积极主动的安全方法。随着IT趋向和趋势向着备受期待的虚拟IT世界发展，安全问题和影响正在受到安全专家的额外重视。
- en: The future
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来
- en: 'There will be many more noteworthy improvisations, transformations, and disruptions
    in the containerization space in the days to come. Through a host of innovations
    and integrations, the Docker platform is being positioned as the leading one for
    strengthening the containerization journey. The following are the prime accomplishments
    through the smart leverage of the Docker technology:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的日子里，容器化领域将会有更多值得注意的即兴创新、转型和颠覆。通过一系列创新和整合，Docker平台正在被定位为加强容器化旅程的领先平台。以下是通过巧妙利用Docker技术取得的主要成就：
- en: '**Strengthening the distributed paradigm**: While computing is going to be
    increasingly distributed and federated, the microservices architecture (MSA) will
    play a very decisive and deeper role in IT. Docker containers are emerging as
    the most efficient ones for hosting and delivering a growing array of microservices.
    With container orchestration technologies and tools gaining greater recognition,
    microservices (specific, as well as generic) get identified, matched, orchestrated,
    and choreographed to form business-aware composite services.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加强分布式范式**：随着计算越来越分布和联合，微服务架构（MSA）将在IT中发挥非常决定性和更深层次的作用。Docker容器正日益成为托管和交付日益增长的微服务数组的最有效方式。随着容器编排技术和工具获得更广泛的认可，微服务（特定的和通用的）被识别、匹配、编排和编排，形成业务感知的复合服务。'
- en: '**Empowering the cloud paradigm**: The cloud idea is strongly gripping the
    IT world to bring in the much-insisted IT infrastructure rationalization, simplification,
    standardization, automation, and optimization. The abstraction and virtualization
    concepts, which are the key to the unprecedented success of the cloud paradigm,
    are penetrating into every kind of IT module. Originally, it started with server
    virtualization and now, it is all about storage and networking virtualization.
    With all the technological advancements around us, there is a widespread keenness
    to realize software-defined infrastructures (software-defined compute, storage,
    and networking). The Docker engine, the core and critical portion of the Docker
    platform, is duly solidified in order to bring in the necessary eligibility for
    containers to run on software-defined environments without any hitch or hurdle.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**赋能云范式**：云理念正在牢牢抓住IT世界，以实现迫切需要的IT基础设施合理化、简化、标准化、自动化和优化。抽象和虚拟化概念是云范式取得空前成功的关键，正在渗透到各种IT模块中。最初，它始于服务器虚拟化，现在已经涉及存储和网络虚拟化。随着我们周围所有技术的进步，人们普遍渴望实现软件定义基础设施（软件定义计算、存储和网络）。Docker引擎，作为Docker平台的核心和关键部分，已经得到充分巩固，以使容器在软件定义环境中无障碍地运行。'
- en: '**Enabling the IT elasticity, portability, agility, and adaptability**: Containers
    are emerging as the flexible and futuristic IT building blocks for bringing in
    more resiliency, versatility, elegance, and suppleness. The faster provisioning
    of IT resources to ensure higher availability and real-time scalability, the easy
    elimination of all kinds of frictions between development and operation teams,
    the guarantee of native performance of IT, the realization of organized and optimized
    IT for enhanced IT productivity, and so on are some of the exemplary things being
    visualized for Docker containers toward the smarter IT.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现IT弹性、可移植性、敏捷性和适应性**：容器正逐渐成为灵活和未来化的IT构建模块，为实现更强韧性、多功能性、优雅和柔韧性做出贡献。更快速地提供IT资源以确保更高的可用性和实时可伸缩性，轻松消除开发和运营团队之间的各种摩擦，保证IT的原生性能，实现组织化和优化的IT以提高IT生产力等，这些都是对Docker容器的一些典型设想，以实现更智能的IT。'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Containers will be a strategic addition to virtual machines (VMs) and bare metal
    servers in order to bring in deeper IT automation, acceleration, and augmentation,
    thereby the much-hyped and hoped business agility, autonomy, and affordability
    will be achieved.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 容器将成为虚拟机（VM）和裸金属服务器的战略补充，以实现更深层次的IT自动化、加速和增强，从而实现备受炒作和期望的业务敏捷性、自主性和可负担性。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Security is definitely a challenge and an important aspect not to be sidestepped.
    If a container gets compromised, then bringing down the container host is not
    a difficult task. Thus, ensuring security for containers and then hosts is indispensable
    to the flourishing of the containerization concept, especially when the centralization
    and federation of IT systems is on the rise. In this chapter, we specifically
    focused on the sickening and devastating security issues of Docker containers
    and explained the ways and means of having foolproof security solutions for containers
    that host dynamic, enterprise-class, and mission-critical applications. In the
    days to come, there will be fresh security approaches and solutions in order to
    ensure impenetrable and unbreakable security for Docker containers and hosts,
    as the security of containers and their contents is of utmost importance to service
    providers, as well as consumers.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性绝对是一个挑战，也是一个重要的方面，不容忽视。如果一个容器被 compromise，那么让容器主机垮掉就不是一件困难的事情。因此，确保容器和主机的安全对于容器化概念的蓬勃发展至关重要，特别是在IT系统的集中化和联邦化日益增长的情况下。在本章中，我们特别关注了Docker容器的令人作呕和毁灭性的安全问题，并解释了为容纳动态、企业级和关键任务应用程序的容器提供无懈可击的安全解决方案的方法和手段。在未来的日子里，将会有新的安全方法和解决方案，以确保
    Docker 容器和主机的安全无法被渗透和破坏，因为容器及其内容的安全对于服务提供商和消费者来说至关重要。
