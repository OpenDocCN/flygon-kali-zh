["```cs\npublic class SomeClass\n{\n\u00a0\u00a0\u00a0\u00a0private string _name;\n\u00a0\u00a0\u00a0\u00a0public SomeClass() { }\n\u00a0\u00a0\u00a0\u00a0public SomeClass(string name) { _name = name; }\n\u00a0\u00a0\u00a0\u00a0public int NameLength\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get { return _name.Length; }\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nAssert.ThrowsException<NullReferenceException>(() => new SomeClass().NameLength);\nAssert.IsTrue(new SomeClass(\"Raf\").NameLength >= 0);\n```", "```cs\nprivate string _name;\t// must be initialized at construction time\n```", "```cs\nprivate string? _name;\n```", "```cs\nvar len = _name!.Length;\n```", "```cs\n<PropertyGroup>\n\u00a0\u00a0<TargetFramework>netcoreapp3.0</TargetFramework>\n\u00a0\u00a0<Nullable>enable</Nullable>\n</PropertyGroup>\n```", "```cs\n#nullable enable\npublic class SomeClass\n{\n\u00a0\u00a0\u00a0\u00a0private string? _name;\n\u00a0\u00a0\u00a0\u00a0public SomeClass() { }\n\u00a0\u00a0\u00a0\u00a0public SomeClass(string name) { _name = name; }\n\u00a0\u00a0\u00a0\u00a0public int NameLength\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// you should see a green squiggle below _name\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get { return _name.Length; }\n\u00a0\u00a0\u00a0\u00a0}\n}\n#nullable restore\n```", "```cs\n    Csproj: <Nullable>enable</Nullable>\n    Code: #nullable enable\n    ```", "```cs\n    Csproj: <Nullable>disable</Nullable>\n    Code: #nullable disable\n    ```", "```cs\n    Csproj: <Nullable>annotations</Nullable>\n    Code: #nullable enable annotations\n    ```", "```cs\n    Csproj: <Nullable>warnings</Nullable>\n    Code: #nullable enable warnings\n    ```", "```cs\n    #nullable restore annotations\n    #nullable restore warnings\n    ```", "```cs\n    #nullable disable annotations\n    #nullable disable warnings\n    ```", "```cs\nprivate string _name;\n```", "```cs\nprivate string? _name;\n```", "```cs\npublic int NameLength2\n{\n\u00a0\u00a0\u00a0\u00a0get\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (_name == null) return 0; else return _name.Length;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic int NameLength2 => _name?.Length ?? 0;\n```", "```cs\nprivate string[]?\u00a0\u00a0_names; // array can be null\nprivate string?[]\u00a0\u00a0_names; // items in the array can be null\nprivate string?[]? _names; // both the array and its items can\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// be null\nprivate string[]\u00a0\u00a0\u00a0_names; // neither of the two can be null\n```", "```cs\npublic class OtherClass\n{\n\u00a0\u00a0\u00a0\u00a0private string?[]? _names;\n\u00a0\u00a0\u00a0\u00a0public OtherClass() { }\n\u00a0\u00a0\u00a0\u00a0public int Count => _names?.Length ?? 0;\n\u00a0\u00a0\u00a0\u00a0public string GetItemLength(int index)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (_names == null) return string.Empty;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var name = _names[index];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (name == null) return string.Empty;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return name;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic interface ICalc\n{\n\u00a0\u00a0\u00a0\u00a0int Add(int x, int y) => x + y;\n\u00a0\u00a0\u00a0\u00a0int Mul(int x, int y) => x * y;\n}\n```", "```cs\npublic interface IWelcome\n{\n\u00a0\u00a0\u00a0\u00a0string FirstName { get; }\n\u00a0\u00a0\u00a0\u00a0string LastName { get; }\n}\npublic class Person : IWelcome\n{\n\u00a0\u00a0\u00a0\u00a0public Person(string firstName, string lastName)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.FirstName = firstName;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.LastName = lastName;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public string FirstName { get; }\n\u00a0\u00a0\u00a0\u00a0public string LastName { get; }\n}\n```", "```cs\npublic interface IWelcome\n{\n\u00a0\u00a0\u00a0\u00a0string FirstName { get; }\n\u00a0\u00a0\u00a0\u00a0string LastName { get; }\n\u00a0\u00a0\u00a0\u00a0string Greet() => $\"Welcome {FirstName}\";\n}\n```", "```cs\nvar p = new Person(\"John\", \"Doe\");\np.Greet(); // Wrong, Greet() is not available in Person\n```", "```cs\nIWelcome p = new Person(\"John\", \"Doe\");\nAssert.AreEqual(\"Welcome John\", p.Greet()); // valid code\n```", "```cs\npublic interface IDog // defined in Assembly1\n{\n\u00a0\u00a0\u00a0\u00a0string Name { get; }\n\u00a0\u00a0\u00a0\u00a0string Noise => \"barks\";\n}\npublic interface ILabrador : IDog // defined in Assembly1\n{\n\u00a0\u00a0\u00a0\u00a0int RetrieverAbility { get; }\n}\npublic class Labrador : ILabrador // defined in Assembly2\n{\n\u00a0\u00a0\u00a0\u00a0public Labrador(string name)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.Name = name;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0public int RetrieverAbility { get; set; }\n}\n```", "```cs\nIDog archie = new Labrador(\"Archie\");\nAssert.AreEqual(\"barks\", archie.Noise);\n```", "```cs\npublic interface ILabrador : IDog\n{\n\u00a0\u00a0\u00a0\u00a0int RetrieverAbility { get; }\n\u00a0\u00a0\u00a0\u00a0string IDog.Noise => \"woofs\"; // Version 2\n}\n```", "```cs\nIDog archie = new Labrador(\"Archie\");\nAssert.AreEqual(\"woofs\", archie.Noise); \n```", "```cs\npublic interface IYellowLabrador : ILabrador\n{\n\u00a0\u00a0\u00a0\u00a0abstract string IDog.Noise { get; }\n}\n```", "```cs\npublic class YellowLabrador : IYellowLabrador\n{\n\u00a0\u00a0\u00a0\u00a0public YellowLabrador(string name)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.Name = name;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0public int RetrieverAbility { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string Noise { get; set; }\n}\n```", "```cs\npublic interface ICyrillicToLatin\n{\n\u00a0\u00a0public string Convert(string input)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0return Transliteration.CyrillicToLatin(input, Language.Russian);\n\u00a0\u00a0}\n}\npublic interface ILatinToCyrillic\n{\n\u00a0\u00a0public string Convert(string input)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0return Transliteration.LatinToCyrillic(input, Language.Russian);\n\u00a0\u00a0}\n}\n```", "```cs\nclass CompositeTransliterator : ICyrillicToLatin, ILatinToCyrillic\n{\n\u00a0\u00a0// ...\n}\n```", "```cs\npublic string TransliterateCyrillic(string input)\n{\n\u00a0\u00a0\u00a0\u00a0string result;\n\u00a0\u00a0\u00a0\u00a0return this switch\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ICyrillicToLatin c when (result = c.Convert(input)) != input => result,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ILatinToCyrillic l when (result = l.Convert(input)) != input => result,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_ => throw new NotImplementedException(\"N/A\"),\n\u00a0\u00a0\u00a0\u00a0};\n}\n```", "```cs\ninterface IProgram\n{\n\u00a0\u00a0\u00a0\u00a0static void Main() => Console.WriteLine(\"Hello, world\");\n}\n```", "```cs\nvar countries = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar length = countries.Length;\n```", "```cs\nAssert.IsTrue(countries[0] == \"Italy\");\n```", "```cs\nvar italyIndex = new Index(0);\nAssert.IsTrue(countries[0] == countries[italyIndex]);\n```", "```cs\n// first item from the end is length - 1\nAssert.IsTrue(countries[length - 1] == \"England\");\nvar englandIndex = new Index(1, true);\nAssert.IsTrue(countries[length - 1] == countries[englandIndex]);\n```", "```cs\nAssert.IsTrue(countries[^1] == countries[englandIndex]);\n```", "```cs\nAssert.ThrowsException<IndexOutOfRangeException>(() => countries[^0]);\n```", "```cs\nvar countries = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar expected = countries.ToArray();\nvar all1 = countries[..];\nvar all2 = countries[0..^0];\nvar allRange = new Range(0, new Index(0, true));\nvar all3 = countries[allRange];\nAssert.IsTrue(expected.SequenceEqual(all1));\nAssert.IsTrue(expected.SequenceEqual(all2));\nAssert.IsTrue(expected.SequenceEqual(all3));\n```", "```cs\nvar countries = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar expected = new[] { \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar skipFirst1 = countries[1..];\nvar skipFirst2 = countries[1..^0];\nvar skipFirstRange = new Range(1, new Index(0, true));\nvar skipFirst3 = countries[skipFirstRange];\nAssert.IsTrue(expected.SequenceEqual(skipFirst1));\nAssert.IsTrue(expected.SequenceEqual(skipFirst2));\nAssert.IsTrue(expected.SequenceEqual(skipFirst3));\n```", "```cs\nvar countries = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar expected = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\" };\nvar skipLast1 = countries[..^1];\nvar skipLast2 = countries[0..^1];\nvar skipLastRange = new Range(0, new Index(1, true));\nvar skipLast3 = countries[skipLastRange];\nAssert.IsTrue(expected.SequenceEqual(skipLast1));\nAssert.IsTrue(expected.SequenceEqual(skipLast2));\nAssert.IsTrue(expected.SequenceEqual(skipLast3));\n```", "```cs\nvar countries = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar expected = new[] { \"Romania\", \"Switzerland\", \"Germany\", \"France\" };\nvar skipFirstAndLast1 = countries[1..^1];\nvar skipFirstAndLastRange = new Range(1, new Index(1, true));\nvar skipFirstAndLast2 = countries[skipFirstAndLastRange];\nAssert.IsTrue(expected.SequenceEqual(skipFirstAndLast1));\nAssert.IsTrue(expected.SequenceEqual(skipFirstAndLast2));\n```", "```cs\nvar countries = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar expected = new[] { \"Romania\", \"Switzerland\" };\nvar skipSecondAndThird1 = countries[1..3];\nvar skipSecondAndThirdRange = new Range(1, 3);\nvar skipSecondAndThird2 = countries[skipSecondAndThirdRange];\nAssert.IsTrue(expected.SequenceEqual(skipSecondAndThird1));\nAssert.IsTrue(expected.SequenceEqual(skipSecondAndThird2));\n```", "```cs\nvar countries = new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" };\nvar expected = new[] { \"Germany\", \"France\" };\nvar fromEnd1 = countries[^3..^1];\nvar fromEndRange = new Range(new Index(3, true), new Index(1, true));\nvar fromEnd2 = countries[fromEndRange];\nAssert.IsTrue(expected.SequenceEqual(fromEnd1));\nAssert.IsTrue(expected.SequenceEqual(fromEnd2));\n```", "```cs\nvar countries = new MyList<string>(new[] { \"Italy\", \"Romania\", \"Switzerland\", \"Germany\", \"France\", \"England\" });\nvar expected = new[] { \"Romania\", \"Switzerland\", \"Germany\", \"France\" };\nMyList<string> sliced = countries[1..^1];\nAssert.IsTrue(expected.SequenceEqual(sliced));\n```", "```cs\npublic class MyList<T> : List<T>\n{\n\u00a0\u00a0public MyList() { }\n\u00a0\u00a0public MyList(IEnumerable<T> items) : base(items) { }\n\u00a0\u00a0public MyList<T> this[Range range]\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0get\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(var from, var count) = range.GetOffsetAndLength(this.Count);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new MyList<T>(this.GetRange(from, count));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```cs\npublic class MyList<T> : List<T>\n{\n\u00a0\u00a0\u00a0\u00a0public MyList() { }\n\u00a0\u00a0\u00a0\u00a0public MyList(IEnumerable<T> items) : base(items) { }\n\u00a0\u00a0\u00a0\u00a0public MyList<T> Slice(int offset, int count)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new MyList<T>(this.GetRange(offset, count));\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic static class CollectionExtensions\n{\n\u00a0\u00a0\u00a0\u00a0public static IEnumerable<T> Slice<T>(this ICollection<T> items, Range range)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(var offset, var count) = range.GetOffsetAndLength(items.Count);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return items.Skip(offset).Take(count);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic Color ToColor(ConsoleKey key) \n{\n\u00a0\u00a0\u00a0\u00a0return key switch\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConsoleKey.R => Color.Red,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConsoleKey.G => Color.Green,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConsoleKey.B => Color.Blue,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_ => throw new ArgumentException($\"Invalid {nameof(key)}\"),\n\u00a0\u00a0\u00a0\u00a0};\n}\n```", "```cs\npublic Color ToColor(ConsoleKey key) => key switch\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConsoleKey.R => Color.Red,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConsoleKey.G => Color.Green,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConsoleKey.B => Color.Blue,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_ => throw new ArgumentException($\"Invalid {nameof(key)}\"),\n\u00a0\u00a0\u00a0\u00a0};\n```", "```cs\nstring GetString(object o) => o switch\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0string s\u00a0\u00a0\u00a0=> $\"string '{s}'\",\n\u00a0\u00a0\u00a0\u00a0\u00a0int i\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> $\"integer {i:d4}\",\n\u00a0\u00a0\u00a0\u00a0\u00a0double d\u00a0\u00a0\u00a0=> $\"double {d:n}\",\n\u00a0\u00a0\u00a0\u00a0\u00a0Derived d\u00a0\u00a0=> $\"Derived: {d.Other}\",\n\u00a0\u00a0\u00a0\u00a0\u00a0Base b\u00a0\u00a0\u00a0\u00a0\u00a0=> $\"Base: {b.Name}\",\n\u00a0\u00a0\u00a0\u00a0\u00a0null\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0\u00a0\"null\",\n\u00a0\u00a0\u00a0\u00a0\u00a0_\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> $\"Fallback: {o}\",\n\u00a0\u00a0\u00a0};\n```", "```cs\nvar weekDays = Enum.GetNames(typeof(DayOfWeek));\nvar expected = new[] { \"Sunday\", \"Monday\", \"Friday\", };\nvar six = weekDays\n\u00a0\u00a0\u00a0\u00a0.Where(w => w is string { Length: 6 })\n\u00a0\u00a0\u00a0\u00a0.ToArray();\nAssert.IsTrue(six.SequenceEqual(expected));\n```", "```cs\npublic class Order\n{\n\u00a0\u00a0\u00a0\u00a0public Guid Id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public bool IsMadeOnWeb { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Customer Customer { get; set; }\n\u00a0\u00a0\u00a0\u00a0public decimal Quantity { get; set; }\n}\npublic class Customer\n{\n\u00a0\u00a0\u00a0\u00a0public Guid Id { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string Country { get; set; }\n}\n```", "```cs\npublic decimal GetDiscount(Order order) => order switch\n{\n\u00a0\u00a0\u00a0\u00a0var o when o.Quantity > 100 => 7.5m,\n\u00a0\u00a0\u00a0\u00a0{ IsMadeOnWeb: true } => 5.0m,\n\u00a0\u00a0\u00a0\u00a0{ Customer: { Country: \"Italy\" } } => 2.0m,\n\u00a0\u00a0\u00a0\u00a0_ => 0,\n};\n```", "```cs\nstruct Point\n{\n\u00a0\u00a0\u00a0\u00a0public Point(int x, int y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X = x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Y = y;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public int X { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int Y { get; set; }\n}\n```", "```cs\nbool IsOnAxis(Point p) => (p.X, p.Y) switch\n{\n\u00a0\u00a0\u00a0\u00a0(0, _) => true,\n\u00a0\u00a0\u00a0\u00a0(_, 0) => true,\n\u00a0\u00a0\u00a0\u00a0(_, _) => false,\n};\n```", "```cs\npublic struct Point\n{\n\u00a0\u00a0\u00a0\u00a0public Point(int x, int y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0X = x;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Y = y;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public int X { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int Y { get; set; }\n\u00a0\u00a0\u00a0\u00a0public void Deconstruct(out int x, out int y)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = X;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = Y;\n\u00a0\u00a0\u00a0\u00a0}\n}\npublic bool IsOnAnyAxis(Point p) => p switch\n{\n\u00a0\u00a0\u00a0\u00a0(0, _) => true,\n\u00a0\u00a0\u00a0\u00a0(_, 0) => true,\n\u00a0\u00a0\u00a0\u00a0_ => false,\n};\n```", "```cs\nenum SpecialPosition\n{\n\u00a0\u00a0\u00a0\u00a0None,\n\u00a0\u00a0\u00a0\u00a0Origin,\n\u00a0\u00a0\u00a0\u00a0XAxis,\n\u00a0\u00a0\u00a0\u00a0YAxis,\n\u00a0\u00a0\u00a0\u00a0MainDiagonal,\n\u00a0\u00a0\u00a0\u00a0AntiDiagonal,\n}\nSpecialPosition GetSpecialPosition(Point p) => p switch\n{\n\u00a0\u00a0\u00a0\u00a0(0, 0) => SpecialPosition.Origin,\n\u00a0\u00a0\u00a0\u00a0(0, _) => SpecialPosition.YAxis,\n\u00a0\u00a0\u00a0\u00a0(_, 0) => SpecialPosition.XAxis,\n\u00a0\u00a0\u00a0\u00a0var (x, y) when x ==\u00a0\u00a0y => SpecialPosition.MainDiagonal,\n\u00a0\u00a0\u00a0\u00a0var (x, y) when x == -y => SpecialPosition.AntiDiagonal,\n\u00a0\u00a0\u00a0\u00a0_ => SpecialPosition.None,\n};\n```", "```cs\nclass DisposableClass : IDisposable\n{\n\u00a0\u00a0\u00a0\u00a0public void Dispose() => Console.WriteLine(\"Dispose!\");\n}\n```", "```cs\nvoid SomeMethod()\n{\n\u00a0\u00a0\u00a0\u00a0using (var x = new DisposableClass())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//...\n\u00a0\u00a0\u00a0\u00a0}\t// Dispose is called\n}\n```", "```cs\nusing (var x = new Disposable1())\n{\n\u00a0\u00a0\u00a0\u00a0using (var y = new Disposable2())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (var z = new Disposable3())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvoid SomeMethod()\n{\n\u00a0\u00a0\u00a0\u00a0using (var x = new Disposable1());\n\u00a0\u00a0\u00a0\u00a0using (var y = new Disposable2());\n\u00a0\u00a0\u00a0\u00a0using (var z = new Disposable3());\n\u00a0\u00a0\u00a0\u00a0//...\n} // Dispose methods are called\n```", "```cs\npublic class AsyncDisposableClass : IAsyncDisposable\n{\n\u00a0\u00a0\u00a0\u00a0public ValueTask DisposeAsync()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Dispose called\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new ValueTask();\n\u00a0\u00a0\u00a0\u00a0}\n}\nprivate async Task SomeMethodAsync()\n{\n\u00a0\u00a0\u00a0\u00a0await using (var x = new AsyncDisposableClass())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// ...\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nprivate async Task SomeMethodAsync()\n{\n\u00a0\u00a0\u00a0\u00a0await using (var x = new AsyncDisposableClass());\n}\n```", "```cs\nref struct MyRefStruct\n{\n\u00a0\u00a0\u00a0\u00a0public void Dispose() => Debug.WriteLine(\"Dispose\");\n\u00a0\u00a0\u00a0\u00a0public ValueTask DisposeAsync()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Debug.WriteLine(\"DisposeAsync\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return default(ValueTask);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic void TestMethod1()\n{\n\u00a0\u00a0\u00a0\u00a0using var s1 = new MyRefStruct();\n}\n```", "```cs\npublic async Task TestMethod2()\n{\n\u00a0\u00a0\u00a0\u00a0//await using var s2 = new MyRefStruct(); // Error!\n}\n```", "```cs\npublic Task TestMethod3()\n{\n\u00a0\u00a0\u00a0\u00a0var s2 = new MyRefStruct();\n\u00a0\u00a0\u00a0\u00a0Task result;\n\u00a0\u00a0\u00a0\u00a0try { /*...*/ }\n\u00a0\u00a0\u00a0\u00a0finally\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = s2.DisposeAsync().AsTask();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return result;\n}\n```", "```cs\nstatic IEnumerable<int> SyncIterator()\n{\n\u00a0\u00a0\u00a0\u00a0foreach (var item in Enumerable.Range(0, 10))\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(500);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield return item;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nforeach (var item in SyncIterator())\n{\n\u00a0\u00a0\u00a0\u00a0// ...\n}\n```", "```cs\npublic class SyncSequence : IEnumerable<int>\n{\n\u00a0\u00a0\u00a0\u00a0private int[] _data = Enumerable.Range(0, 10).ToArray();\n\u00a0\u00a0\u00a0\u00a0public IEnumerator<int> GetEnumerator() => new SyncSequenceEnumerator<int>(_data);\n\u00a0\u00a0\u00a0\u00a0IEnumerator IEnumerable.GetEnumerator() => new SyncSequenceEnumerator<int>(_data);\n\u00a0\u00a0\u00a0\u00a0private class SyncSequenceEnumerator<T> : IEnumerator<T>, IEnumerator, IDisposable\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private T[] _sequence;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private int _index;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public SyncSequenceEnumerator(T[] sequence)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_sequence = sequence;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_index = -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0object IEnumerator.Current => _sequence[_index];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public T Current => _sequence[_index];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void Dispose() { }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void Reset() => _index = -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public bool MoveNext()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(500);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_index++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (_sequence.Length <= _index) return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nforeach (var item in new SyncSequence())\n{\n\u00a0\u00a0\u00a0\u00a0// ...\n}\n```", "```cs\nasync IAsyncEnumerable<int> AsyncIterator()\n{\n\u00a0\u00a0\u00a0\u00a0foreach (var item in Enumerable.Range(0, 10))\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await Task.Delay(500);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield return item;\n\u00a0\u00a0\u00a0\u00a0}\n}\nawait foreach (var item in AsyncIterator())\n{\n\u00a0\u00a0\u00a0\u00a0// ...\n}\n```", "```cs\npublic class AsyncSequence : IAsyncEnumerable<int>\n{\n\u00a0\u00a0\u00a0\u00a0private int[] _data = Enumerable.Range(0, 10).ToArray();\n\u00a0\u00a0\u00a0\u00a0public IAsyncEnumerator<int> GetAsyncEnumerator(CancellationToken cancellationToken = default)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new MyAsyncEnumerator<int>(_data);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private class MyAsyncEnumerator<T> : IAsyncEnumerator<T>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private T[] _sequence;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private int _index;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public MyAsyncEnumerator(T[] sequence)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_sequence = sequence;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_index = -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public T Current => _sequence[_index];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public ValueTask DisposeAsync() => default(ValueTask);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public async ValueTask<bool> MoveNextAsync()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await Task.Delay(500);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_index++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (_sequence.Length <= _index) return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nawait foreach (var item in new AsyncSequence())\n{\n\u00a0\u00a0\u00a0\u00a0// ...\n} \n```", "```cs\nvar sequence = new AsyncSequence();\nIAsyncEnumerator<int> enumerator = sequence.GetAsyncEnumerator();\ntry\n{\n\u00a0\u00a0\u00a0\u00a0while (await enumerator.MoveNextAsync())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// some code using enumerator.Current\n\u00a0\u00a0\u00a0\u00a0}\n}\nfinally { await enumerator.DisposeAsync(); }\n```", "```cs\npublic readonly int Num0\n{\n\u00a0\u00a0\u00a0\u00a0get => _i;\n\u00a0\u00a0\u00a0\u00a0set { } // not useful but valid\n}\npublic readonly int Num1\n{\n\u00a0\u00a0\u00a0\u00a0get => _i;\n\u00a0\u00a0\u00a0\u00a0//set => _i = value; // not valid\n}\npublic int Num2\n{\n\u00a0\u00a0\u00a0\u00a0readonly get => _i;\n\u00a0\u00a0\u00a0\u00a0set => _i = value; // ok\n}\npublic int Num3\n{\n\u00a0\u00a0\u00a0\u00a0get => ++_i;\u00a0\u00a0\u00a0\u00a0\u00a0// strongly discouraged but it works\n\u00a0\u00a0\u00a0\u00a0readonly set { } // does not make sense but it works\n}\n```", "```cs\npublic struct Vector\n{\n\u00a0\u00a0\u00a0\u00a0public float x;\n\u00a0\u00a0\u00a0\u00a0public float y;\n\u00a0\u00a0\u00a0\u00a0private readonly float SquaredRo => (x * x) + (y * y);\n\u00a0\u00a0\u00a0\u00a0public readonly float GetLengthRo() => MathF.Sqrt(SquaredRo);\n\u00a0\u00a0\u00a0\u00a0public float GetLength() => MathF.Sqrt(SquaredRo);\n}\n```", "```cs\npublic static float SomeMethod(in Vector vector)\n{\n\u00a0\u00a0\u00a0\u00a0// a local copy is done because GetLength is not readonly\n\u00a0\u00a0\u00a0\u00a0return vector.GetLength();\n}\n```", "```cs\npublic static float ReadonlyBehavior(in Vector vector)\n{\n\u00a0\u00a0\u00a0\u00a0// no local copy is done because GetLengthRo is readonly\n\u00a0\u00a0\u00a0\u00a0return vector.GetLengthRo();\n}\n```", "```cs\n\"Call to a non readonly member '...' from a 'readonly' member results in an implicit copy of 'this'\".\n```", "```cs\nstruct Undetected\n{\n\u00a0\u00a0\u00a0\u00a0private IDictionary<string, object> _bag;\n\u00a0\u00a0\u00a0\u00a0public Undetected(IDictionary<string, object> bag)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_bag = bag;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public readonly string Description\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0get => (string)_bag[\"Description\"];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0set => _bag[\"Description\"] = value;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Person\n{\n\u00a0\u00a0\u00a0\u00a0public Person(string firstName, string lastName, int age)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.FirstName = firstName ?? throw new ArgumentNullException(nameof(firstName));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.LastName = lastName ?? throw new ArgumentNullException(nameof(lastName));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.Age = age;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public string FirstName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string LastName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public int Age { get; set; }\n}\n```", "```cs\nvoid Accumulate(ref List<string> list, params string[] words)\n{\n\u00a0\u00a0\u00a0\u00a0list ??= new List<string>();\n\u00a0\u00a0\u00a0\u00a0list.AddRange(words);\n}\n```", "```cs\nList<string> x = null;\nAccumulate(ref x, \"one\", \"two\");\nAccumulate(ref x, \"three\");\nAssert.IsTrue(x.Count == 3);\n```", "```cs\nvoid PrintName(Person person)\n{\n\u00a0\u00a0\u00a0\u00a0var p = person ?? throw new ArgumentNullException(nameof(person));\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(Obfuscated());\n\u00a0\u00a0\u00a0\u00a0string Obfuscated()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (p.Age < 18) return $\"{p.FirstName[0]}. {p.LastName[0]}.\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $\"{p.FirstName} {p.LastName}\"; \n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nprivate void PrintName(Person person)\n{\n\u00a0\u00a0\u00a0\u00a0var p = person ?? throw new ArgumentNullException(nameof(person));\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(Obfuscated(p));\n\u00a0\u00a0\u00a0\u00a0static string Obfuscated(Person p)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (p.Age < 18) return $\"{p.FirstName[0]}. {p.LastName[0]}.\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $\"{p.FirstName} {p.LastName}\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nstring s1 = \"c:\\\\temp\";\nstring s2 = @\"c:\\temp\";\nAssert.AreEqual(s1, s2);\n```", "```cs\nvar s3 = $\"The path for {folder} is c:\\\\{folder}\";\n```", "```cs\nvar s4 = $@\"The path for {folder} is c:\\{folder}\";\nAssert.AreEqual(s3, s4);\n```", "```cs\nvar s5 = @$\"The path for {folder} is c:\\{folder}\";\nAssert.AreEqual(s3, s5);\n```", "```cs\nSpan<int> nums = stackalloc int[10];\n```", "```cs\nstring input = \" this string can be trimmed \\r\\n\";\nvar expected = \"this string can be trimmed\";\nReadOnlySpan<char> trimmedSpan = input.AsSpan()\n\u00a0\u00a0\u00a0\u00a0.Trim(stackalloc[] { ' ', '\\r', '\\n' });\nstring result = trimmedSpan.ToString();\nAssert.AreEqual(expected, result);\n```", "```cs\nstruct Header<T>\n{\n\u00a0\u00a0\u00a0\u00a0T Word1;\n\u00a0\u00a0\u00a0\u00a0T Word2;\n\u00a0\u00a0\u00a0\u00a0T Word3;\n}\n```", "```cs\nSpan<Header<int>> records1 = stackalloc Header<int>[10];\nSpan<Header<long>> records2 = stackalloc Header<long>[10];\n```", "```cs\n    var orders ??= GetOrders();\n    ```"]