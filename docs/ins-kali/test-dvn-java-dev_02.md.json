["```java\n  config.vm.box = \"ubuntu/trusty64\" \n\n  config.vm.provider \"virtualbox\" do |vb| \n  vb.memory = \"1024\" \n  end \n```", "```java\n  config.vm.network \"forwarded_port\", guest: 27017, host: 27017 \n  config.vm.provision \"docker\" do |d| \n    d.run \"mongoDB\", image: \"mongo:2\", args: \"-p 27017:27017\" \n  end \n```", "```java\n  if Vagrant.has_plugin?(\"vagrant-cachier\") \n    config.cache.scope = :box \n  end \n```", "```java\n$> vagrant plugin install vagrant-cachier\n$> git clone https://bitbucket.org/vfarcic/tdd-java-ch02-example-vagrant.git\n$> cd tdd-java-ch02-example-vagrant$> vagrant up\n```", "```java\n$> vagrant status\nCurrent machine states:\ndefault                   running (virtualbox)\n\n```", "```java\n$> vagrant ssh\nWelcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-46-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com/\n\n System information disabled due to load higher than 1.0\n\n Get cloud support with Ubuntu Advantage Cloud Guest:\n http://www.ubuntu.com/business/services/cloud\n\n 0 packages can be updated.\n 0 updates are security updates.\n\nvagrant@vagrant-ubuntu-trusty-64:~$  \n```", "```java\n$> exit\n$> vagrant halt\n ==> default: Attempting graceful shutdown of VM...\n$>  \n```", "```java\n$> vagrant up\n$> vagrant ssh\nvagrant@vagrant-ubuntu-trusty-64:~$ docker start mongoDB\nmongoDB\nvagrant@vagrant-ubuntu-trusty-64:~$ docker ps\nCONTAINER ID        IMAGE           COMMAND                    CREATED\n360f5340d5fc        mongo:2         \"/entrypoint.sh mong...\"   4 minutes ago\n\nSTATUS              PORTS                      NAMES\nUp 4 minutes        0.0.0.0:27017->27017/tcp   mongoDB\nvagrant@vagrant-ubuntu-trusty-64:~$ exit\n\n```", "```java\napply plugin: 'java'\nsourceCompatibility = 1.7\nversion = '1.0'\n```", "```java\nrepositories { \n    mavenCentral() \n} \n```", "```java\ndependencies { \n    testCompile group: 'junit', name: 'junit', version: '4.12' \n} \n```", "```java\ngradle test  \n```", "```java\npublic class Friendships { \n  private final Map<String, List<String>> friendships = \n     new HashMap<>(); \n\n  public void makeFriends(String person1, String person2) { \n    addFriend(person1, person2); \n    addFriend(person2, person1); \n  } \n\n  public List<String> getFriendsList(String person) { \n    if (!friendships.containsKey(person)) { \n      return Collections.emptyList(); \n    } \n    return friendships.get(person)\n  } \n\n  public boolean areFriends(String person1, String person2) { \n    return friendships.containsKey(person1) &&  \n        friendships.get(person1).contains(person2); \n  } \n\n  private void addFriend(String person, String friend) { \n    if (!friendships.containsKey(person)) { \n      friendships.put(person, new ArrayList<String>()); \n    } \n    List<String> friends = friendships.get(person); \n    if (!friends.contains(friend)) { \n      friends.add(friend); \n    } \n  } \n} \n```", "```java\nFriendships friendships; \n\n@BeforeClass \npublic static void beforeClass() { \n  // This method will be executed once on initialization time \n} \n\n@Before \npublic void before() { \n  friendships = new Friendships(); \n  friendships.makeFriends(\"Joe\",\",,\" \"Audrey\"); \n  friendships.makeFriends(\"Joe\", \"Peter\"); \n  friendships.makeFriends(\"Joe\", \"Michael\"); \n  friendships.makeFriends(\"Joe\", \"Britney\"); \n  friendships.makeFriends(\"Joe\", \"Paul\"); \n}\n```", "```java\n@Test \npublic void alexDoesNotHaveFriends() { \n  Assert.assertTrue(\"Alex does not have friends\", \n     friendships.getFriendsList(\"Alex\").isEmpty()); \n} \n\n@Test \npublic void joeHas5Friends() { \n  Assert.assertEquals(\"Joe has 5 friends\", 5, \n     friendships.getFriendsList(\"Joe\").size()); \n} \n\n@Test \npublic void joeIsFriendWithEveryone() { \n  List<String> friendsOfJoe =  \n    Arrays.asList(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\"); \n  Assert.assertTrue(friendships.getFriendsList(\"Joe\")\n     .containsAll(friendsOfJoe)); \n} \n```", "```java\n@AfterClass \npublic static void afterClass() { \n  // This method will be executed once when all test are executed \n} \n\n@After \npublic void after() { \n  // This method will be executed once after each test execution \n} \n```", "```java\ndependencies { \n   testCompile group: 'org.testng', name: 'testng', version: '6.8.21' \n} \n\ntest.useTestNG() { \n// Optionally you can filter which tests are executed using \n//    exclude/include filters \n// excludeGroups 'complex' \n} \n```", "```java\n@BeforeClass \npublic static void beforeClass() { \n  // This method will be executed once on initialization time \n} \n\n@BeforeMethod \npublic void before() { \n  friendships = new Friendships(); \n  friendships.makeFriends(\"Joe\", \"Audrey\"); \n  friendships.makeFriends(\"Joe\", \"Peter\"); \n  friendships.makeFriends(\"Joe\", \"Michael\"); \n  friendships.makeFriends(\"Joe\", \"Britney\"); \n  friendships.makeFriends(\"Joe\", \"Paul\"); \n} \n```", "```java\npublic void alexDoesNotHaveFriends() { \n  Assert.assertTrue(friendships.getFriendsList(\"Alex\").isEmpty(), \n      \"Alex does not have friends\"); \n} \n\npublic void joeHas5Friends() { \n  Assert.assertEquals(friendships.getFriendsList(\"Joe\").size(), \n      5, \"Joe has 5 friends\"); \n} \n\npublic void joeIsFriendWithEveryone() { \n  List<String> friendsOfJoe = \n    Arrays.asList(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\");\n  Assert.assertTrue(friendships.getFriendsList(\"Joe\")\n      .containsAll(friendsOfJoe)); \n} \n```", "```java\ntestCompile 'org.hamcrest:hamcrest-all:1.3' \n```", "```java\nList<String> friendsOfJoe = \n  Arrays.asList(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\");\nAssert.assertTrue( friendships.getFriendsList(\"Joe\")\n    .containsAll(friendsOfJoe)); \n```", "```java\nassertThat( \n  friendships.getFriendsList(\"Joe\"), \n  containsInAnyOrder(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\") \n); \n```", "```java\nAssert.assertEquals(5, friendships.getFriendsList(\"Joe\").size()); \n```", "```java\nassertThat(friendships.getFriendsList(\"Joe\"), hasSize(5)); \n```", "```java\ntestCompile 'org.assertj:assertj-core:2.0.0' \n```", "```java\nAssert.assertEquals(5, friendships.getFriendsList(\"Joe\").size()); \nList<String> friendsOfJoe = \n   Arrays.asList(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\");\nAssert.assertTrue(  friendships.getFriendsList(\"Joe\")\n   .containsAll (friendsOfJoe) \n); \n```", "```java\nassertThat(friendships.getFriendsList(\"Joe\")) \n  .hasSize(5) \n  .containsOnly(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\");\n```", "```java\napply plugin: 'jacoco'\n```", "```java\ngradle test jacocoTestReport\n```", "```java\npublic class Person { \n  @Id\n  private String name; \n\n  private List<String> friends; \n\n  public Person() { } \n\n  public Person(String name) { \n    this.name = name; \n    friends = new ArrayList<>(); \n  } \n\n  public List<String> getFriends() { \n    return friends; \n  } \n\n  public void addFriend(String friend) { \n    if (!friends.contains(friend)) friends.add(friend); \n  }\n}\n```", "```java\npublic class FriendsCollection { \n  private MongoCollection friends; \n\n  public FriendsCollection() { \n    try { \n      DB db = new MongoClient().getDB(\"friendships\"); \n      friends = new Jongo(db).getCollection(\"friends\"); \n    } catch (UnknownHostException e) { \n      throw new RuntimeException(e.getMessage()); \n    } \n  } \n\n  public Person findByName(String name) { \n    return friends.findOne(\"{_id: #}\", name).as(Person.class); \n  } \n\n  public void save(Person p) { \n    friends.save(p); \n  } \n} \n```", "```java\ndependencies { \n    compile 'org.mongodb:mongo-java-driver:2.13.2' \n    compile 'org.jongo:jongo:1.1' \n} \n```", "```java\npublic class FriendshipsMongo { \n  private FriendsCollection friends; \n\n  public FriendshipsMongo() { \n    friends = new FriendsCollection(); \n  } \n\n  public List<String> getFriendsList(String person) { \n    Person p = friends.findByName(person); \n    if (p == null) return Collections.emptyList(); \n    return p.getFriends(); \n  } \n\n  public void makeFriends(String person1, String person2) { \n    addFriend(person1, person2); \n    addFriend(person2, person1); \n  } \n\n  public boolean areFriends(String person1, String person2) { \n    Person p = friends.findByName(person1); \n    return p != null && p.getFriends().contains(person2); \n  } \n\n  private void addFriend(String person, String friend) {\n    Person p = friends.findByName(person); \n    if (p == null) p = new Person(person); \n    p.addFriend(friend); \n    friends.save(p); \n  } \n} \n```", "```java\ndependencies { \n  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.+' \n} \n```", "```java\n@RunWith(MockitoJUnitRunner.class) \npublic class FriendshipsTest { \n... \n} \n```", "```java\n@InjectMocks \nFriendshipsMongo friendships; \n```", "```java\n@Mock \nFriendsCollection friends; \n```", "```java\nPerson joe = new Person(\"Joe\"); \ndoReturn(joe).when(friends).findByName(\"Joe\"); \nassertThat(friends.findByName(\"Joe\")).isEqualTo(joe); \n```", "```java\n@Test \npublic void joeHas5Friends() { \n  List<String> expected = \n    Arrays.asList(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\"); \n  Person joe = spy(new Person(\"Joe\")); \n\n  doReturn(joe).when(friends).findByName(\"Joe\"); \n  doReturn(expected).when(joe).getFriends(); \n\n  assertThat(friendships.getFriendsList(\"Joe\")) \n    .hasSize(5) \n    .containsOnly(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\"); \n} \n```", "```java\n@RunWith(EasyMockRunner.class) \npublic class FriendshipsTest { \n  @TestSubject \n  FriendshipsMongo friendships = new FriendshipsMongo(); \n  @Mock(type = MockType.NICE) \n  FriendsCollection friends;\n}\n```", "```java\n@TestSubject \nFriendshipsMongo friendships = new FriendshipsMongo(); \n\n@Mock(type = MockType.NICE) \nFriendsCollection friends; \n```", "```java\n@Test \npublic void mockingWorksAsExpected() { \n  Person joe = new Person(\"Joe\"); \n  expect(friends.findByName(\"Joe\")).andReturn(joe); \n  replay(friends); \n  assertThat(friends.findByName(\"Joe\")).isEqualTo(joe); \n} \n```", "```java\n@Test \npublic void joeHas5Friends() { \n  List<String> expected = \n  Arrays.asList(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\"); \n  Person joe = createMock(Person.class); \n\n  expect(friends.findByName(\"Joe\")).andReturn(joe); \n  expect(joe.getFriends()).andReturn(expected); \n  replay(friends); \n  replay(joe); \n\n  assertThat(friendships.getFriendsList(\"Joe\")) \n    .hasSize(5)\n    .containsOnly(\"Audrey\", \"Peter\", \"Michael\", \"Britney\", \"Paul\"); \n}\n```", "```java\ndependencies { \n  testCompile 'org.seleniumhq.selenium:selenium-java:2.45.0' \n} \n```", "```java\nWebDriver driver = new FirefoxDriver(); \n```", "```java\ndriver.get(\"http://en.wikipedia.org/wiki/Main_Page\");\n```", "```java\nWebElement query = driver.findElement(By.name(\"search\")); \nquery.sendKeys(\"Test-driven development\"); \n```", "```java\nWebElement goButton = driver.findElement(By.name(\"go\")); \ngoButton.click();\n```", "```java\nassertThat(driver.getTitle(), \n  startsWith(\"Test-driven development\"));\n```", "```java\ndriver.quit(); \n```", "```java\ndependencies { \n    testCompile 'com.codeborne:selenide:2.17' \n}\n```", "```java\npublic class SelenideTest { \n  @Test \n  public void wikipediaSearchFeature() throws \n      InterruptedException { \n\n    // Opening Wikipedia page \n    open(\"http://en.wikipedia.org/wiki/Main_Page\"); \n\n    // Searching TDD \n    $(By.name(\"search\")).setValue(\"Test-driven development\"); \n\n    // Clicking search button \n    $(By.name(\"go\")).click(); \n\n    // Checks \n    assertThat(title(),\n      startsWith(\"Test-driven development\")); \n  } \n} \n```", "```java\ndependencies { \n    testCompile 'org.jbehave:jbehave-core:3.9.5' \n}\n```", "```java\n@Given(\"I go to Wikipedia homepage\") \npublic void goToWikiPage() { \n  open(\"http://en.wikipedia.org/wiki/Main_Page\"); \n} \n```", "```java\n@When(\"I enter the value $value on a field named $fieldName\")\npublic void enterValueOnFieldByName(String value, String fieldName) { \n  $(By.name(fieldName)).setValue(value); \n} \n@When(\"I click the button $buttonName\") \npublic void clickButonByName(String buttonName){ \n  $(By.name(buttonName)).click(); \n} \n```", "```java\n@Then(\"the page title contains $title\") \npublic void pageTitleIs(String title) { \n  assertThat(title(), containsString(title)); \n} \n```", "```java\nScenario: TDD search on wikipedia \n```", "```java\nGiven I go to Wikipedia homepage \nWhen I enter the value Test-driven development on a field named search \nWhen I click the button go \nThen the page title contains Test-driven development \n```", "```java\n$> gradle testJBehave\n```", "```java\ndependencies { \n    testCompile 'info.cukes:cucumber-java:1.2.2' \n    testCompile 'info.cukes:cucumber-junit:1.2.2' \n} \n```", "```java\n@Given(\"^I go to Wikipedia homepage$\") \npublic void goToWikiPage() { \n  open(\"http://en.wikipedia.org/wiki/Main_Page\"); \n} \n\n@When(\"^I enter the value (.*) on a field named (.*)$\") \npublic void enterValueOnFieldByName(String value, \n    String fieldName) { \n  $(By.name(fieldName)).setValue(value); \n} \n\n@When(\"^I click the button (.*)$\") \npublic void clickButonByName(String buttonName) { \n  $(By.name(buttonName)).click(); \n} \n\n@Then(\"^the page title contains (.*)$\") \npublic void pageTitleIs(String title) { \n  assertThat(title(), containsString(title)); \n} \n```", "```java\nFeature: Wikipedia Search \n\n  Scenario: TDD search on wikipedia \n    Given I go to Wikipedia homepage \n    When I enter the value Test-driven development on a field named search \n    When I click the button go \n    Then the page title contains Test-driven development \n```", "```java\n$> gradle testCucumber\n```"]