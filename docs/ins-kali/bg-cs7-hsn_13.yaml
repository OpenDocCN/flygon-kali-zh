- en: Using LINQ to Summarize Tuples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ对元组进行总结
- en: In this chapter, you will learn about tuples. These are basically collections
    of several values.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解元组。这些基本上是几个值的集合。
- en: Adding a show tuple summary values button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加显示元组摘要值按钮
- en: Bring up a project and put in a button below the line beginning with `<form
    id=....`. Replace the button text with `Show Tuple Summary Values`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，并在以`<form id=....`开头的行下放置一个按钮。将按钮文本替换为`显示元组摘要值`。
- en: 'Now, switch to the Design view and double-click on the Show Tuple Summary Values
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The
    relevant portion of the starting code for this project should look like *Figure
    13.8.1*:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到设计视图，并双击显示元组摘要值按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。该项目的起始代码的相关部分应该看起来像*图13.8.1*：
- en: '![](img/6581fa35-4585-454e-987f-74c68a0b8fab.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6581fa35-4585-454e-987f-74c68a0b8fab.png)'
- en: 'Figure 13.8.1: The starting code section for this project'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8.1：该项目的起始代码部分
- en: Introducing tuples
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍元组
- en: 'Now, first we will make a function that returns tuple values. So, what is a
    tuple? Let''s define them. As I said earlier, it''s basically a collection of
    several values. Now, in C#, this means that you''ll enter the following below
    the closed curly brace under the line that begins with `public partial class...`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，首先我们将创建一个返回元组值的函数。那么，什么是元组？让我们定义它们。正如我之前所说，它基本上是几个值的集合。现在，在C#中，这意味着您将在以`public
    partial class...`开头的行下的封闭大括号下方输入以下内容：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding line, `Tuple` is a class. Then, to define the number of values
    that the tuple stores, remember our work with vectors. We did two or three values
    to a vector. This is a similar concept. If you hover your mouse over `Tuple`,
    it says that *Tuple represents n-tuple* where *n* is eight or greater, so T1,
    T2, T3, up to TRest. Wow, so you can make eight or more tuples!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一行中，`Tuple`是一个类。然后，要定义元组存储的值的数量，请记住我们与向量的工作。我们向向量添加了两个或三个值。这是一个类似的概念。如果您将鼠标悬停在`Tuple`上，它会说*Tuple表示n元组*，其中*n*是八或更多，因此T1、T2、T3，一直到TRest。哇，所以您可以创建八个或更多的元组！
- en: Adding namespaces
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加命名空间
- en: 'In our case, we put `<double, double, double, double>`. So, this is a tuple
    that can hold four values. Notice that as you type, `List<double>` is not showing,
    so you need to add some namespaces. Under `using System` at the top of the file,
    enter the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们放置了`<double, double, double, double>`。所以，这是一个可以容纳四个值的元组。请注意，当您输入时，`List<double>`没有显示，因此您需要添加一些命名空间。在文件顶部的`using
    System`下，输入以下内容：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we use generic collections and LINQ, and now `List<double>` shows up highlighted
    as it should be and we'll call it `listDoubles`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了通用集合和LINQ，现在`List<double>`显示为高亮显示，应该称为`listDoubles`。
- en: Making a list with a tuple
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用元组制作列表
- en: 'In the next stage in the process, you''ll make this list. So, enter the following
    between a set of curly braces below this line:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在过程的下一个阶段，您将创建此列表。因此，在以下行的大括号之间输入以下内容：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To form the tuple, you say `Tuple.Create(listDoubles.Sum()`. `Tuple` is the
    name of the class, and one of the members inside this class is the `Create` function,
    so select it. Now, we can create a tuple with four entries. Next, we say `listDoubles.Sum()`.
    Notice that, when you type `Sum`, it's an extension method. If you remove `Sum`,
    you'll notice that `Linq` becomes grayed out. This again confirms why `Linq` is
    needed—for the `Sum` function.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要形成元组，您说`Tuple.Create(listDoubles.Sum()`。`Tuple`是类的名称，该类内的成员之一是`Create`函数，因此选择它。现在，我们可以创建一个具有四个条目的元组。接下来，我们说`listDoubles.Sum()`。请注意，当您输入`Sum`时，它是一个扩展方法。如果您删除`Sum`，您会注意到`Linq`变为灰色。这再次确认了为什么需要`Linq`——用于`Sum`函数。
- en: The first entry in this tuple is the Sum of the list. Remember, we're calling
    `summary`. So, it would be like a statistical summary, so to speak, of the entries
    in the list. Beyond `listDoubles.Sum()` you can, of course, also have some other
    ones. You can have an average, `listDoubles.Average()`, and you can also add `listDoubles.Max()`
    and `listDoubles.Min()`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个元组中的第一个条目是列表的总和。记住，我们正在调用`summary`。所以，这就像是列表中条目的统计摘要。除了`listDoubles.Sum()`，您当然也可以有其他一些。您可以有一个平均值，`listDoubles.Average()`，您还可以添加`listDoubles.Max()`和`listDoubles.Min()`。
- en: Returning the tuples
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回元组
- en: 'At the end, you can return the tuples. To do this, enter the following below
    this line:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以返回元组。为此，请在以下行下输入以下内容：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the first line you wrote earlier, remember `private` means accessible only
    there, `static` indicates that it runs on the class level, which means that you
    can call `SummarizeList` directly with a name—you don't need an object to put
    it on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在您之前写的第一行中，记住`private`表示只有在那里可访问，`static`表示它在类级别上运行，这意味着您可以直接使用名称调用`SummarizeList`——您不需要将其放在对象上。
- en: Now, in this particular case, it will return this construct, `Tuple<double,
    double, double, double>`, known as a tuple, which here is just a way of storing
    four double values. Then, to create a tuple for the first entry, you use LINQ.
    Then you use LINQ for the second entry, LINQ for the third entry, and finally,
    LINQ for the fourth entry. So, `Sum`, `Min`, `Max`, and `Average` are extension
    methods and then you `return` it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这种特殊情况下，它将返回这个结构，`Tuple<double, double, double, double>`，称为元组，在这里只是一种存储四个双精度值的方式。然后，要为第一个条目创建一个元组，您使用LINQ。然后您使用LINQ来获取第二个条目，LINQ来获取第三个条目，最后，LINQ来获取第四个条目。因此，`Sum`，`Min`，`Max`和`Average`都是扩展方法，然后您将其`return`。
- en: Making a list of doubles
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个双精度列表
- en: 'Now, for the next stage, take a look at the Button click event. This code here
    is quite straightforward. Start by entering the following within the set of curly
    braces under the line that begins with `protected void Button1_Click...`. You
    will make a list of doubles, called `lst`, as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于下一阶段，看一下按钮单击事件。这里的代码非常简单。首先，在以`protected void Button1_Click...`开头的行下的大括号内输入以下内容。您将创建一个名为`lst`的双精度列表，如下所示：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After the `new List of double` values, you specify the initializer between curly
    braces by throwing in some numbers—it doesn't matter what they are, right? Put
    in some negatives, some decimals, some integers, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`new List of double`值之后，通过在大括号中添加一些数字来指定初始化程序——不管它们是什么，对吧？放一些负数、一些小数、一些整数等等。
- en: Summarizing the list
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结列表
- en: 'Next, we will call `SummarizeList`. So, enter the following below this line:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将调用`SummarizeList`。因此，请在此行下面输入以下内容：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this case, to be honest, `var` is easy, right? If you don't use that, you'll
    have to type `Tuple<double, double, double, double>`, which would be the data
    type. That's really long-winded, in other words, and it takes a lot of space.
    So, remember, `var` signifies implicit data typing but it is smart enough to know
    what the data type is.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，老实说，`var`很容易，对吧？如果你不使用它，你将不得不输入`Tuple<double, double, double, double>`，这将是数据类型。换句话说，那真的很啰嗦，而且占用了很多空间。所以，请记住，`var`表示隐式数据类型，但它足够聪明，知道数据类型是什么。
- en: Displaying the results
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示结果
- en: 'Then once you return it, you can go to the item store there. So, you can enter
    the following next:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后一旦你返回它，你可以去那里的项目商店。因此，你可以输入以下内容：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the next stage, copy this line and paste it in directly below it. Edit the
    text for the `Average` function to read as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，复制这行并直接粘贴到下面。编辑`Average`函数的文本如下：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make sure that the way you call these lines correspond to the functions; so,
    `Sum`, `Average`, `Max`, and `Min`. Again, copy the preceding line and paste it
    directly below, so you don''t have to append. Since the next one is for `Max`,
    edit the text to read as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你调用这些行的方式与函数对应；所以，`Sum`、`Average`、`Max`和`Min`。再次复制上一行并直接粘贴到下面，这样你就不必追加了。由于下一个是为`Max`，编辑文本如下：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will be `Item3` and the tuple that you can extract.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是`Item3`和你可以提取的元组。
- en: 'Finally, let''s do one more. So again, copy the preceding line and paste it
    directly below. Since the last one is for `Min`, edit the text to read as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们再做一次。因此，再次复制上一行并直接粘贴到下面。由于最后一个是为`Min`，编辑文本如下：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This, of course, is `Item4` and the tuple that you can extract.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是`Item4`和你可以提取的元组。
- en: Running the program
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now, let''s crank it up in your browser. Click on the Show Tuple Summary Values
    button. The results are shown in *Figure 13.8.2*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在浏览器中加速。点击显示元组摘要值按钮。结果显示在*图13.8.2*中：
- en: '![](img/f410621e-d778-4afc-8ae5-8fef0f74b4e0.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f410621e-d778-4afc-8ae5-8fef0f74b4e0.png)'
- en: 'Figure 13.8.2: The results of running our program for this chapter'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8.2：运行本章程序的结果
- en: You see Sum, Average, Max, and Min, so it's working as expected.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了Sum、Average、Max和Min，所以它的工作符合预期。
- en: 'Now, as a more realistic extension of this, imagine a list of tuples. You can
    definitely do that, so you can add something like this below the last line:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为对此更现实的扩展，想象一个元组列表。你肯定可以做到，所以你可以在最后一行下面添加类似以下内容：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can have a list of Tuples. Each Tuple represents, for example, information
    about a person, and then you would have a list of people. This is something for
    you to think about: how to construct it and make a project out of it for yourself.
    However, these are the fundamentals here.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以有一个元组列表。每个元组代表，例如，关于一个人的信息，然后你会有一个人的列表。这是让你思考的事情：如何构建它并为自己做一个项目。然而，这些都是基础。
- en: Chapter review
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释的本章`Default.aspx.cs`的完整版本在以下代码块中显示：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about tuples, which are basically collections of
    several values. You made a list with a tuple, returned tuples, and summarized
    a list.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了关于元组的知识，它基本上是几个值的集合。你创建了一个带有元组的列表，返回了元组，并对列表进行了总结。
- en: In the next chapter, we will talk about using LINQ to group related results.
    Grouping is a fundamental thing that you do in databases to categorize results.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论使用LINQ来对相关结果进行分组。分组是在数据库中对结果进行分类的基本操作。
