["```java\n    Path path = FileSystems.getDefault().getPath(\"/home/docs/status.txt\");\n    System.out.println();\n    System.out.printf(\"toString: %s\\n\", path.toString());\n    System.out.printf(\"getFileName: %s\\n\", path.getFileName());\n    System.out.printf(\"getRoot: %s\\n\", path.getRoot());\n    System.out.printf(\"getNameCount: %d\\n\", path.getNameCount());\n    for(int index=0; index<path.getNameCount(); index++) {\n    System.out.printf(\"getName(%d): %s\\n\", index, path.getName(index));\n    }\n    System.out.printf(\"subpath(0,2): %s\\n\", path.subpath(0, 2));\n    System.out.printf(\"getParent: %s\\n\", path.getParent());\n    System.out.println(path.isAbsolute());\n    }\n\n    ```", "```java\n    Path path = FileSystems.getDefault().getPath(\"\\\\home\\\\docs\\\\status.txt\");\n\n    ```", "```java\nIterator iterator = path.iterator();\nwhile(iterator.hasNext()) {\nSystem.out.println(iterator.next());\n}\n\n```", "```java\ntry {\npath = Paths.get(\"/home\", \"docs\", \"users.txt\");\nSystem.out.printf(\"Absolute path: %s\", path.toAbsolutePath());\n}\ncatch (InvalidPathException ex) {\nSystem.out.printf(\"Bad path: [%s] at position %s\",\nex.getInput(), ex.getIndex());\n}\n\n```", "```java\npath = Paths.get(\"/home\\0\", \"docs\", \"users.txt\");\n\n```", "```java\npath = Paths.get(\"users.txt\");\n\n```", "```java\npath = path.subpath(0,path.getNameCount()-1));\n\n```", "```java\n    public static void main(String[] args) {\n    try {\n    Path path =\n    Paths.get(new URI(\"file:///C:/home/docs/users.txt\"));\n    File file = new File(\"C:\\\\home\\\\docs\\\\users.txt\");\n    Path toPath = file.toPath();\n    System.out.println(toPath.equals(path));\n    }\n    catch (URISyntaxException e) {\n    System.out.println(\"Bad URI\");\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    String separator = FileSystems.getDefault().getSeparator();\n    System.out.println(\"The separator is \" + separator);\n    try {\n    Path path = Paths.get(new URI(\"file:///C:/home/docs/users.txt\"));\n    System.out.println(\"subpath: \" + path.subpath(0, 3));\n    path = Paths.get(\"/home\", \"docs\", \"users.txt\");\n    System.out.println(\"Absolute path: \" + path.toAbsolutePath());\n    System.out.println(\"URI: \" + path.toUri());\n    }\n    catch (URISyntaxException ex) {\n    System.out.println(\"Bad URI\");\n    }\n    catch (InvalidPathException ex) {\n    System.out.println(\"Bad path: [\" + ex.getInput() + \"] at position \" + ex.getIndex());\n    }\n    }\n\n    ```", "```java\nPath path = Paths.get(new URI(\"file:///C:/home/docs/bogusfile.txt\"));\nSystem.out.println(\"File exists: \" + Files.exists(path));\npath = Paths.get(\"/home\", \"docs\", \"bogusfile.txt\");\nSystem.out.println(\"File exists: \" + Files.exists(path));\n\n```", "```java\n/home/docs/../music/ Space Machine A.mp3\n/home/./music/ Robot Brain A.mp3\n\n```", "```java\n    public static void main(String[] args) {\n    Path path = Paths.get(\"/home/docs/../music/Space Machine A.mp3\");\n    System.out.println(\"Absolute path: \" + path.toAbsolutePath());\n    System.out.println(\"URI: \" + path.toUri());\n    System.out.println(\"Normalized Path: \" + path.normalize());\n    System.out.println(\"Normalized URI: \" + path.normalize().toUri());\n    System.out.println();\n    path = Paths.get(\"/home/./music/ Robot Brain A.mp3\");\n    System.out.println(\"Absolute path: \" + path.toAbsolutePath());\n    System.out.println(\"URI: \" + path.toUri());\n    System.out.println(\"Normalized Path: \" + path.normalize());\n    System.out.println(\"Normalized URI: \" + path.normalize().toUri());\n    }\n\n    ```", "```java\ntry\nPath path = Paths.get(\"/home/docs/../music/NonExistentFile.mp3\");\nSystem.out.println(\"Absolute path: \" + path.toAbsolutePath());\nSystem.out.println(\"Real path: \" + path.toRealPath());\n}\ncatch (IOException ex) {\nSystem.out.println(\"The file does not exist!\");\n}\n\n```", "```java\n    public static void main(String[] args) {\n    Path rootPath = Paths.get(\"/home/docs\");\n    Path partialPath = Paths.get(\"users.txt\");\n    Path resolvedPath = rootPath.resolve(partialPath);\n    System.out.println(\"rootPath: \" + rootPath);\n    System.out.println(\"partialPath: \" + partialPath);\n    System.out.println(\"resolvedPath: \" + resolvedPath);\n    System.out.println(\"Resolved absolute path: \" + resolvedPath.toAbsolutePath());\n    }\n\n    ```", "```java\nPath resolvedPath = rootPath.resolve(\"users.txt\");\n\n```", "```java\nPath resolvedPath = rootPath.resolve(\"backup/users.txt\");\n\n```", "```java\nPath resolvedPath = partialPath.resolve(rootPath);\n\n```", "```java\nPath resolvedPath = partialPath.resolve(partialPath);\n\n```", "```java\nPath resolvedPath = rootPath.resolve(rootPath);\n\n```", "```java\nPath rootPath = Paths.get(\"/home/music/\");\nresolvedPath = rootPath.resolve(\"tmp/Robot Brain A.mp3\");\nSystem.out.println(\"rootPath: \" + rootPath);\nSystem.out.println(\"resolvedPath: \" + resolvedPath);\nSystem.out.println();\nresolvedPath = rootPath.resolveSibling(\"tmp/Robot Brain A.mp3\");\nSystem.out.println(\"rootPath: \" + rootPath);\nSystem.out.println(\"resolvedPath: \" + resolvedPath);\n\n```", "```java\n    public static void main(String[] args) {\n    Path firstPath;\n    Path secondPath;\n    firstPath = Paths.get(\"music/Future Setting A.mp3\");\n    secondPath = Paths.get(\"docs\");\n    System.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\n    System.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\n    System.out.println();\n    firstPath = Paths.get(\"music/Future Setting A.mp3\");\n    secondPath = Paths.get(\"music\");\n    System.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\n    System.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\n    System.out.println();\n    firstPath = Paths.get(\"music/Future Setting A.mp3\");\n    secondPath = Paths.get(\"docs/users.txt\");\n    System.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\n    System.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\n    System.out.println();\n    }\n\n    ```", "```java\nfirstPath = Paths.get(\"music/Future Setting A.mp3\");\nsecondPath = Paths.get(\"docs/tmp/users.txt\");\nSystem.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\nSystem.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\n\n```", "```java\nfirstPath = Paths.get(\"music/Future Setting A.mp3\");\nsecondPath = Paths.get(\"music/Future Setting A.mp3\");\nSystem.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\nSystem.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\nSystem.out.println();\n\n```", "```java\nfirstPath = Paths.get(\"c:/music/Future Setting A.mp3\");\nsecondPath = Paths.get(\"docs/users.txt\");\nSystem.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\nSystem.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\nSystem.out.println();\n\n```", "```java\nfirstPath = Paths.get(\"c:/music/Future Setting A.mp3\");\nsecondPath = Paths.get(\"c:/docs/users.txt\");\nSystem.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\nSystem.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\nSystem.out.println();\n\n```", "```java\n    public static void main(String[] args) {\n    try {\n    Path path;\n    path = Paths.get(\"users.txt\");\n    System.out.println(\"URI path: \" + path.toUri());\n    System.out.println(\"Absolute path: \" + path.toAbsolutePath());\n    System.out.println(\"Real path: \" + path.toRealPath(LinkOption.NOFOLLOW_LINKS));\n    }\n    catch (IOException ex) {\n    Logger.getLogger(ConvertingPathsExample.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    }\n\n    ```", "```java\npath = Paths.get(\"invalidFileName.txt\");\n\n```", "```java\nif(Files.exists(path)) {\nSystem.out.println(\"Real path: \" + path.toRealPath(LinkOption.NOFOLLOW_LINKS));\n}\nelse {\nSystem.out.println(\"The file does not exist\");\n}\n\n```", "```java\n    public class ComparingPathsExample {\n    public static void main(String[] args) {\n    Path path1 = null;\n    Path path2 = null;\n    Path path3 = null;\n    path1 = Paths.get(\"/home/docs/users.txt\");\n    path2 = Paths.get(\"/home/docs/users.txt\");\n    path3 = Paths.get(\"/home/music/Future Setting A.mp3\");\n    testEquals(path1, path2);\n    testEquals(path1, path3);\n    testCompareTo(path1, path2);\n    testCompareTo(path1, path3);\n    testSameFile(path1, path2);\n    testSameFile(path1, path3);\n    }\n\n    ```", "```java\n    private static void testEquals(Path path1, Path path2) {\n    if (path1.equals(path2)) {\n    System.out.printf(\"%s and %s are equal\\n\",\n    path1, path2);\n    }\n    else {\n    System.out.printf(\"%s and %s are NOT equal\\n\",\n    path1, path2);\n    }\n    }\n    private static void testCompareTo(Path path1, Path path2) {\n    if (path1.compareTo(path2) == 0) {\n    System.out.printf(\"%s and %s are identical\\n\",\n    path1, path2);\n    }\n    else {\n    System.out.printf(\"%s and %s are NOT identical\\n\",\n    path1, path2);\n    }\n    }\n    private static void testSameFile(Path path1, Path path2) {\n    try {\n    if (Files.isSameFile(path1, path2)) {\n    System.out.printf(\"%s and %s are the same file\\n\",\n    path1, path2);\n    }\n    else {\n    System.out.printf(\"%s and %s are NOT the same file\\n\",\n    path1, path2);\n    }\n    }\n    catch (IOException e) {\n    e.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    Path path1 = null;\n    Path path2 = null;\n    path1 = Paths.get(\"/home/docs/users.txt\");\n    path2 = Paths.get(\"/home/music/users.txt\");\n    System.out.println(Files.isSymbolicLink(path1));\n    System.out.println(Files.isSymbolicLink(path2));\n    try {\n    Path path = Paths.get(\"C:/home/./music/users.txt\");\n    System.out.println(\"Normalized: \" + path.normalize());\n    System.out.println(\"Absolute path: \" + path.toAbsolutePath());\n    System.out.println(\"URI: \" + path.toUri());\n    System.out.println(\"toRealPath (Do not follow links): \" + path.toRealPath(LinkOption.NOFOLLOW_LINKS));\n    System.out.println(\"toRealPath: \" + path.toRealPath());\n    Path firstPath = Paths.get(\"/home/music/users.txt\");\n    Path secondPath = Paths.get(\"/docs/status.txt\");\n    System.out.println(\"From firstPath to secondPath: \" + firstPath.relativize(secondPath));\n    System.out.println(\"From secondPath to firstPath: \" + secondPath.relativize(firstPath));\n    System.out.println(\"exists (Do not follow links): \" + Files.exists(firstPath, LinkOption.NOFOLLOW_LINKS));\n    System.out.println(\"exists: \" + Files.exists(firstPath));\n    System.out.println(\"notExists (Do not follow links): \" + Files.notExists(firstPath, LinkOption.NOFOLLOW_LINKS));\n    System.out.println(\"notExists: \" + Files.notExists(firstPath));\n    }\n    catch (IOException ex) {\n    Logger.getLogger(SymbolicLinkExample.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    catch (InvalidPathException ex) {\n    System.out.println(\"Bad path: [\" + ex.getInput() + \"] at position \" + ex.getIndex());\n    }\n    }\n\n    ```"]