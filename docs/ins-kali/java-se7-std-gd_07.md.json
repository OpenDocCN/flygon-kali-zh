["```java\nclass Employee {\n   // Implementation of Employee class\n}\n```", "```java\nclass SalaryEmployee extends Employee  {\n   // Implementation of SalaryEmployee class\n}\n```", "```java\nimport java.awt.Graphics;\n\npublic class HelloWorldApplet extends java.applet.Applet {\n\n   public void paint (Graphics g) {\n      g.drawString (\"Hello World!\", 5, 15);\n   }\n\n}\n```", "```java\nclass Employee {\n   private String name;\n   private int zip;\n   private int age;\n   \u2026\n\n   public int getAge() {\n      return age;\n   }\n\n   public void setAge(int age) {\n      this.age = age;\n   }\n\n   \u2026\n}\n```", "```java\nclass SalaryEmployee extends Employee  {\n   // Implementation of SalaryEmployee class\n}\n```", "```java\npublic static void main(String[] args) {\n   Employee employee1 = new Employee();\n   SalaryEmployee employee2 = new SalaryEmployee();\n\n   employee1.setAge(25);\n   employee2.setAge(35);\n\n   System.out.println(\"Employee1 age: \" +\n      employee1.getAge());\n   System.out.println(\"Employee2 age: \" + \n      employee2.getAge());\n}\n```", "```java\nEmployee1 age: 25\nEmployee2 age: 35\n\n```", "```java\nemployee2.age = 35;\n```", "```java\nage has private access in Employee\n\n```", "```java\npublic class SalaryEmployee extends Employee{\n\n   public SalaryEmployee() {\n      age = 35;\n   }\n\n}\n```", "```java\nage has private access in Employee\n\n```", "```java\nclass Employee {\n   protected int age;\n   \u2026\n\n   public int getAge() {\n      return age;\n   }\n\n   public void setAge(int age) {\n      this.age = age;\n   }\n\n   \u2026\n}\n```", "```java\npublic SalaryEmployee() {\n   age = 35;\n}\n```", "```java\nemployee2.age = 35;\n```", "```java\nclass Employee {\n   protected int age;\n   \u2026\n\n   public int getAge() {\n      return age;\n   }\n\n   protected void setAge(int age) {\n      this.age = age;\n   }\n\n   \u2026\n}\n```", "```java\nclass Employee {\n   private float pay = 500.0f;\n\n   public float computePay() {\n      return pay;\n   }\n\n  \u2026\n}\n```", "```java\npublic class HourlyEmployee extends Employee{\n   private float hoursWorked;\n   private float payRate;\n\n   public HourlyEmployee() {\n      this.hoursWorked = 40.0f;\n      this.payRate = 22.25f;\n   }\n\n   public float computePay() {\n      return hoursWorked * payRate;\n   }\n\n}\n```", "```java\nEmployee employee1 = new Employee();\nHourlyEmployee employee3 = new HourlyEmployee();\n\nSystem.out.println(\"Employee1 pay: \" + employee1.computePay());\nSystem.out.println(\"Employee3 pay: \" + employee3.computePay());\n```", "```java\nEmployee1 pay: 500.0\nEmployee3 pay: 890.0\n\n```", "```java\npublic float computPay() {\n     return hoursWorked * payRate;\n}\n```", "```java\nEmployee employee1 = new Employee();\nHourlyEmployee employee3 = new HourlyEmployee();\n\nSystem.out.println(\"Employee1 pay: \" + \n   employee1.computePay());\nSystem.out.println(\"Employee3 pay: \" + \n   employee3.computePay());\n```", "```java\nEmployee1 pay: 500.0\nEmployee3 pay: 500.0\n\n```", "```java\n@Override\npublic float computPay() {\n   return hoursWorked * payRate;\n}\n```", "```java\nmethod does not override or implement a method from a supertype\n\n```", "```java\nfinal class Employee {\n   \u2026\n}\n```", "```java\npublic class Employee {\n   ...\n   public final int getAge() {\n      return age;\n   }\n}\n```", "```java\ngetAge() in SalaryEmployee cannot override getAge() in Employee\n overridden method is final\n\n```", "```java\npublic abstract class Employee {\n   ...\n}\n```", "```java\npublic abstract class Employee {\n   ...\n   public abstract float computePay();\n   ...\n}\n```", "```java\npublic class Employee {\n   private String name;\n   private int age;\n\n   ...\n\n}\n\npublic class SalaryEmployee extends Employee {\n   private float stock;\n   \u2026\n}\n```", "```java\nEmployee employee;\nemployee = new Employee();\n```", "```java\nemployee = new SalaryEmployee();\n```", "```java\nEmployee employee = new SalaryEmployee();\nSystem.out.println(employee.computePay());\n```", "```java\nEmployee employees[] = new Employee[10];\nfloat sum = 0;\n\n// initialize array\nemployees[0] = new Employee();\nemployees[1] = new SalaryEmployee();\nemployees[2] = new HourlyEmployee();\n...\n\nfor(Employee employee : employees) {\n   sum += employee.computePay();\n}\n```", "```java\nEmployee employee1 = new Employee();\nSalaryEmployee employee2 = new SalaryEmployee();\nemployee1 = new SalaryEmployee();\nemployee1 = employee2;\n```", "```java\npublic class Employee {\n   private String name;\n   private int zip;\n   private int age;\n   ...\n\n   public Employee() {\n      this(\"Default name\", 12345, 21);\n   }\n\n   public Employee(String name, int age, int zip) {\n      this.name = name;\n      this.zip = zip;\n      this.age = age;\n   }\n\n   ...\n}\n```", "```java\npublic class SalaryEmployee extends Employee {\n   private int age;\n   \u2026\n   public SalaryEmployee() {\n      age = 35;\n   }\n}\n```", "```java\npublic SalaryEmployee() {\n   super();\n   age = 35;\n}\n```", "```java\npublic SalaryEmployee(String name, int age, int zip, \n         float stock) {\n   super(name, age, zip);\n   this.stock = stock;\n}\n```", "```java\npublic SalaryEmployee(String name, int age, int zip, \n         float stock) {\n   this.setName(name);\n   this.setAge(age);\n   this.setZip(zip);\n   this.stock = stock;\n}\n```", "```java\npublic class Employee {\n   \u2026\n   @Override\n   public String toString() {\n      return \"Name: \" + this.name +\n             \"  Age: \" + this.age;\n   }\n}\n```", "```java\npublic class SalaryEmployee extends Employee {\n   \u2026\n   @Override\n   public String toString() {\n      return \"Name: \" + this.getName() +\n             \"  Age: \" + this.getAge() +\n             \"  Stock: \" + this.stock;\n   }\n}\n```", "```java\npublic class SalaryEmployee extends Employee {\n   \u2026\n   @Override\n   public String toString() {\n      // Results in a recursive call to the current method\n      return toString() + \"  Stock: \" + this.stock;\n   }\n}\n```", "```java\npublic class SalaryEmployee extends Employee {\n   \u2026\n   @Override\n   public String toString() {\n      return super.toString() + \"  Stock: \" + this.stock;\n   }\n}\n```", "```java\n   Employee employee1 = new Employee(\"Paula\", 23, 12345);\n   SalaryEmployee employee2 = \n      new SalaryEmployee(\"Phillip\", 31, 54321, 32);\n\n   System.out.println(employee1);\n   System.out.println(employee2);\n```", "```java\nName: Paula  Age: 23\nName: Phillip  Age: 31  Stock: 32.0\n\n```", "```java\npublic class SalaryEmployee extends Employee {\n   \u2026\n   public void display() {\n      System.out.println(\"Employee Base Data\");\n      System.out.println(super.toString());\n      System.out.println(\"SalaryEmployee Data\");\n      System.out.println(\"Stock: \" + this.stock);\n    }\n}\n```", "```java\nSalaryEmployee employee2 = new SalaryEmployee();\nemployee2.display();\n```", "```java\nEmployee Base Data\nName: Phillip  Age: 31\nSalaryEmployee Data\nStock: 32.0\n\n```", "```java\nsuper.super.toString();  //illegal\n```", "```java\nEmployee employee1 = new Employee();\nSalaryEmployee employee2 = new SalaryEmployee();\n\nClass object = employee1.getClass();\nSystem.out.println(\"Employee1 type: \" + object.getName());\nobject = employee2.getClass();\nSystem.out.println(\"Employee2 type: \" + object.getName());\n```", "```java\nEmployee1 type: packt.Employee\nEmployee2 type: packt.SalaryEmployee\n\n```", "```java\nSystem.out.println(\"Employee1 is an Employee: \" + (employee1 instanceof Employee));\nSystem.out.println(\"Employee1 is a SalaryEmployee: \" + (employee1 instanceof SalaryEmployee));   \nSystem.out.println(\"Employee1 is an HourlyEmployee: \" + (employee1 instanceofHourlyEmployee));  \nSystem.out.println(\"Employee2 is an Employee: \" + (employee2 instanceof Employee));\nSystem.out.println(\"Employee2 is a SalaryEmployee: \" + (employee2 instanceof SalaryEmployee)); \n```", "```java\nEmployee1 is an Employee: true\nEmployee1 is a SalaryEmployee: false\nEmployee1 is an HourlyEmployee: false\nEmployee2 is an Employee: true\nEmployee2 is a SalaryEmployee: true\n\n```", "```java\npublic class Employee {\n   // Implementation of Employee class\n}\n```", "```java\nEmployee employee1 = new Employee();\nSystem.out.println(\"Employee1 is an Object: \" + (employee1 instanceof Object)); \n```", "```java\nEmployee1 is an Object: true\n\n```", "```java\npublic class Employee extends Object  {\n   // Implementation of Employee class\n}\n```", "```java\nEmployee employee1;\nSalaryEmployee employee2;\n```", "```java\nemployee1 = new SalaryEmployee();\n```", "```java\nemployee2 = new Employee(); // Syntax error\n```", "```java\nemployee2 = (SalaryEmployee) new Employee(); \n```", "```java\njava.lang.ClassCastException: packt.Employee cannot be cast to packt.SalaryEmployee\n\n```", "```java\nemployee1.setStock(35.0f);\n```", "```java\ncannot find symbol\nsymbol:   method setStock(float)\n location: variable employee1 of type Employee\n\n```", "```java\npublic class A {\n   public int v1;\n   private int v2;\n   protected int v3;\n   int v4;\n}\n```", "```java\nA a = new A();\na.v1 = 35;\n\u2026\n```", "```java\n    public class ClassA {\n       public ClassA() {\n          System.out.println(\"ClassA constructor\");\n       }\n\n       public void someMethod() {\n          System.out.println(\"ClassA someMethod\");\n       }\n    }\n\n    class ClassB extends ClassA {\n       public ClassB() {\n          System.out.println(\"ClassB constructor\");\n       }\n\n       public void someMethod() {\n          // comment\n          System.out.println(\"ClassB someMethod\");\n       }    \n       public static void main(String args[]) {\n          ClassB b = new ClassB();\n          b.someMethod();\n\n       }\n    }\n    ```", "```java\n    ClassA constructor\n    ClassB constructor\n    ClassA someMethod\n    ClassB someMethod\n    ```"]