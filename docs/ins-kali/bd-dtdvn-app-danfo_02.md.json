["```js\nvar population_count = 490; \nvar new_count = 10; \n\n//along the line; you mistakenly re-declare the variable \nvar population_count = \"490\"\n\n//do some arithmetic operation with the variable \nvar total_count = population_count + new_count \n\n//output: \"49010\" \n```", "```js\nlet population_count = 490;\n// ...some other code goes here \nlet population_count = \"490\"\n\n//output: Error: Identifier population count as already being declared \n```", "```js\nvar estimate = 6000;\nfunction calculate_estimate() {\n\u00a0\u00a0console.log(estimate);\n}\ncalculate_estimate() // output 6000\n\nif(true){\n console.log(estimate);\n}\n```", "```js\nif(true){\n var estimate = 6000;\n}\nconsole.log(estimate)\n```", "```js\nif(true){\n let estimate = 6000;\n}\nconsole.log(estimate)\n//output: ReferenceError: estimate is not defined\n```", "```js\nlet data2 = [20, \"John\", \"Doe\", \"2019\"];\nlet [ age1, firstName1, lastName1, year1] = data2\n```", "```js\n//Old method of accessing an array\nlet data = [20, \"John\", \"Doe\", \"2019\"];\n\nlet firstName = data[1];\nlet age = data[0];\nlet lastName = data[2];\nlet year = data[3];\n```", "```js\nlet data3 = {\n\u00a0\u00a0\u00a0\u00a0age: 20,\n\u00a0\u00a0\u00a0\u00a0firstName: \"john\",\n\u00a0\u00a0\u00a0\u00a0lastName: \"Doe\",\n\u00a0\u00a0\u00a0\u00a0year: 2019\n}\nlet { age2, firstName2, lastName2, year2 } = data3\n```", "```js\nlet name = \"stephen\"\nlet name_array = [...name];\n```", "```js\nlet name = \"stephen\"\nlet name_array = [...name, 1,2,3]\nconsole.log(name_array)\n// output ['s', 't', 'e','p', 'h', 'e','n',1,2,3]\n```", "```js\nlet series = [1,2,3,4,5,6,7,8]\nlet new_array = [...series, 100, 200]\nconsole.log(new_array)\n// output [1, 2, 3, 4, 5,6, 7, 8, 100, 200]\n```", "```js\nLet data = {\n\u00a0\u00a0age: 20,\n\u00a0\u00a0firstName: \"john\",\n\u00a0\u00a0lastName: \"Doe\",\n\u00a0\u00a0year:\u00a0\u00a02019\n}\nlet\u00a0\u00a0new_data = {...data}\n```", "```js\nlet data = {\n\u00a0\u00a0\u00a0\u00a0age: 20,\n\u00a0\u00a0\u00a0\u00a0firstName: \"john\",\n\u00a0\u00a0\u00a0\u00a0lastName: \"Doe\",\n\u00a0\u00a0\u00a0\u00a0year: 2019\n}\n\nlet new_data = { ...data, degree: \"Bsc\", level: \"expert\" }\nconsole.log(new_data)\n//output \n// {\n//\u00a0\u00a0\u00a0\u00a0\u00a0age: 20,\n//\u00a0\u00a0\u00a0\u00a0\u00a0Degree: \"Bsc\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0FirstName: \"John\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0lastName: \"Doe\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0Level: \"expert\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0Year: 2019\n// }\n```", "```js\nfunction data_func(age, firstName, lastName, year) {\n\u00a0\u00a0\u00a0\u00a0console.log(`Age: ${age}, FirstName: ${firstName}, LastName: ${lastName}, Year: ${year}`);\n}\nlet data = [30, \"John\", \"Neumann\", '1948']\ndata_func(...data)\n//output Age: 30, FirstName: John, LastName: Neumann, Year: 1984\nAge: 30, FirstName: John, LastName: Neumann, Year: 1984\n```", "```js\nlet food = \"sandwich\" \nfunction data() {\n}\n```", "```js\nfunction func_scope(){\n// function scope exist here\n}\n```", "```js\nif(true){\n// if block scope\n}\n```", "```js\nfor(let i=0; i< 5; i++){\n//for loop's block scope\n}\n```", "```js\nlet estimate = 6000;\nfunction add_1() {\n\u00a0\u00a0\u00a0\u00a0return estimate + 1\n}\nfunction add_2() {\n\u00a0\u00a0\u00a0\u00a0return estimate + 2;\n}\nconsole.log(add_1()) // 60001 \nconsole.log(add_2()) // 60002\n```", "```js\nfunction calc_estimate(value) { \n\u00a0\u00a0let estimate = value; \n\u00a0\u00a0function add_2() { \n\u00a0\u00a0\u00a0\u00a0console.log('add two', estimate + 2); \n\u00a0\u00a0} \n\u00a0\u00a0function add_1() { \n\u00a0\u00a0\u00a0\u00a0console.log('add one', estimate + 1) \n\u00a0\u00a0} \n\u00a0\u00a0add_2(); \n\u00a0\u00a0add_1(); \n}\ncalc_estimate(6000) //output: add two 60002 , add one 60001\n```", "```js\nfunction calc_estimate(value) { \n\u00a0\u00a0let estimate = value; \n\u00a0\u00a0function add_2() { \n\u00a0\u00a0\u00a0\u00a0estimate += 2 \n\u00a0\u00a0\u00a0\u00a0console.log('add 2 to estimate', estimate); \n\u00a0\u00a0} \n\u00a0\u00a0return add_2; \n}\nlet add_2 = calc_estimate(50);\n// we have the choice to add two to the value at any time in our code \nadd_2() // add 2 to estimate 52 \nadd_2() // add 2 to estimate 54 \nadd_2() // add 2 to estimate 56\n```", "```js\nfunction calc_estimate(value){ \n\u00a0\u00a0let estimate = value; \n\u00a0\u00a0function add_2(value2){ \n\u00a0\u00a0\u00a0\u00a0estimate +=value2 \n\u00a0\u00a0\u00a0\u00a0console.log('add 2 to estimate', estimate); \n\u00a0\u00a0} \n\u00a0\u00a0return add_2; \n}\nlet add_2 = calc_estimate(50);\n// we have the choice to add two to the value at any time in our code\n\nadd_2(2) // add 2 to estimate 52\nadd_2(4) // add 2 to estimate 56\nadd_2(1) // add 2 to estimate 5\n```", "```js\nlet data = []\n// or\nlet data = new Array()\n```", "```js\nlet data = new Array(5)\nconsole.log(data.length) // 5 \nconsole.log(data) //\u00a0\u00a0[empty \u00d7 5]\n```", "```js\ndata[0] = \"20\"\ndata[1] = \"John\"\ndata[2] = \"Doe\"\ndata[3] = \"1948\"\nconsole.log(data) // [\"20\", \"John\",\"Doe\",\"1948\", empty] \n// try access index 4\u00a0\u00a0\nconsole.log(data[4]) //\u00a0\u00a0undefined\n```", "```js\nlet data = [] \ndata.length = 5; // create an empty array of size 5\nconsole.log(data)\u00a0\u00a0// [empty \u00d7 5]\n```", "```js\nlet data = [1,2,3,4,5,6];\ndelete data[4];\nconsole.log(data) // [1,2,3,4 empty, 6]\n```", "```js\nconsole.log(data[4]) // undefined\n```", "```js\nlet data = [1,2,3,4,5,6]\ndata.splice(4,1) // delete index 4\nconsole.log(data) // [1,2,3,4,6]\n```", "```js\nlet data = [1,2,3,4,5,6]\ndata.splice(4,0,10,20) // add values between 5 and 6\nconsole.log(data) // [1,2,3,4,5,10,20,6]\n```", "```js\nlet data = [1,2,3,4,5,6]\ndata.includes(6) // true\n```", "```js\nlet data = [1,2,3,4,5,6]\ndata.slice(2,4) \n//output [3,4]\n```", "```js\nlet data = [1,2,3,4,5,6]\nlet data2 = data.map((value, index)=>{\nreturn value + index;\n});\nconsole.log(data2) // [1,3,5,7,9,11]\n```", "```js\nlet data = [1,2,3,4,5,6]\nlet data2 = data.filter((elem, index)=>{\nreturn (index %2 == 0)\n})\nconsole.log(data2) // [1,3,5]\n```", "```js\nfor (key in object) {\n\u00a0\u00a0// run some action with keys\n}\n```", "```js\nlet user_profile = { \n\u00a0\u00a0name: 'Mary', \n\u00a0\u00a0sex: 'Female', \n\u00a0\u00a0age: 25, \n\u00a0\u00a0img_link: 'https://some-image-link.png', \n}\nfor (key in user_profile) {\n\u00a0\u00a0\u00a0\u00a0console.log(key, user_profile[key]);\n}\n//output:\n// name Mary\n// sex Female\n// age 25\n// img_link https://some-image-link.png\n```", "```js\nlet user_profile = { \n\u00a0\u00a0name: 'Mary', \n\u00a0\u00a0sex: 'Female', \n\u00a0\u00a0age: 25, \n\u00a0\u00a0img_link: 'https://some-image-link.png', \n}\nconsole.log(\"age\" in user_profile)\n//outputs: true \n\nif (\"rank\" in user_profile) {\n\u00a0\u00a0\u00a0\u00a0console.log(\"Your rank is\", user_profile.rank)\n} else {\n\u00a0\u00a0\u00a0\u00a0console.log(\"rank is not a key\")\n}\n//outputs: rank is not a key\n```", "```js\nlet user_profile = {\n\u00a0\u00a0\u00a0\u00a0name: 'Mary',\n\u00a0\u00a0\u00a0\u00a0sex: 'Female',\n\u00a0\u00a0\u00a0\u00a0age: 25,\n\u00a0\u00a0\u00a0\u00a0img_link: 'https://some-image-link.png',\n}\ndelete user_profile.age\nconsole.log(user_profile)\n//output:\n// {\n//\u00a0\u00a0\u00a0\u00a0\u00a0img_link: \"https://some-image-link.png\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0name: \"Mary\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0sex: \"Female\"\n// }\n```", "```js\nlet user_profile = {\n\u00a0\u00a0\u00a0\u00a0name: 'Mary',\n\u00a0\u00a0\u00a0\u00a0sex: 'Female',\n\u00a0\u00a0\u00a0\u00a0age: 25,\n\u00a0\u00a0\u00a0\u00a0img_link: 'https://some-image-link.png',\n}\nlet new_user_profile = user_profile\ndelete new_user_profile.age\n\nconsole.log(\"new_user_profile\", new_user_profile)\nconsole.log(\"user_profile\", user_profile)\n//output:\n// \"new_user_profile\" Object {\n//\u00a0\u00a0\u00a0\u00a0\u00a0img_link: \"https://some-image-link.png\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0name: \"Mary\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0sex: \"Female\"\n// }\n\n// \"user_profile\" Object {\n//\u00a0\u00a0\u00a0\u00a0\u00a0img_link: \"https://some-image-link.png\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0name: \"Mary\",\n//\u00a0\u00a0\u00a0\u00a0\u00a0sex: \"Female\"\n// }\n```", "```js\nlet new_user_profile = {}\nObject.assign(new_user_profile, user_profile)\n\ndelete new_user_profile.age\n\nconsole.log(\"new_user_profile\", new_user_profile)\nconsole.log(\"user_profile\", user_profile)\n\n//output\n\"new_user_profile\" Object {\n\u00a0\u00a0img_link: \"https://some-image-lik.png\",\n\u00a0\u00a0name: \"Mary\",\n\u00a0\u00a0sex: \"Female\"\n}\n\"user_profile\" Object {\n\u00a0\u00a0age: 25,\n\u00a0\u00a0img_link: \"https://some-image-lik.png\",\n\u00a0\u00a0name: \"Mary\",\n\u00a0\u00a0sex: \"Female\"\n}\n```", "```js\nlet user_profile = {\n\u00a0\u00a0name: 'Mary',\n\u00a0\u00a0sex: 'Female',\n\u00a0\u00a0age: 25,\n\u00a0\u00a0img_link: 'https://some-image-lik.png',\n}\nlet education = { graduated: true, degree: 'BSc' }\nlet permissions = { isAdmin: true }\n\nObject.assign(user_profile, education, permissions);\nconsole.log(user_profile)\n//output:\n// {\n//\u00a0\u00a0\u00a0\u00a0\u00a0name: 'Mary',\n//\u00a0\u00a0\u00a0\u00a0\u00a0sex: 'Female',\n//\u00a0\u00a0\u00a0\u00a0\u00a0img_link: 'https://some-image-link.png',\n//\u00a0\u00a0\u00a0\u00a0\u00a0graduated: true,\n//\u00a0\u00a0\u00a0\u00a0\u00a0degree: 'BSc',\n//\u00a0\u00a0\u00a0\u00a0\u00a0isAdmin: true\n//\u00a0\u00a0\u00a0}\n```", "```js\nallObjects. This syntax is easier and quicker than the object.assign method and is largely used today.\n```", "```js\nname = \"Dale\"\nfunction print() {\n\u00a0\u00a0\u00a0\u00a0console.log(\"global\")\n}\n// using the browser as our environment \nconsole.log(window.name) // Dale \nwindow.print() // global\n```", "```js\nname\u00a0\u00a0= \"Dale\"\nobject_name = \"window\"\nfunction print(){\n\u00a0\u00a0console.log(`${this.name} is accessed from\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${this.object_name}`) \n}\nconsole.log(print.call(window)) // Dale is accessed from window\n```", "```js\n\nlet custom_object = {\nname: Dale,\nObject_name: \"custom_object\"\n}\n\nprint.call(custom_object) // Dale is accessed from custom_object\n```", "```js\ndata = {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: 'Dale',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj_name: 'data',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print: function () {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(`${this.name} is accessed from ${this.obj_name}`);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\ndata.print() // Dale is accessed from data \n// don't forget we can also call print like this \ndata.print.call(data) // Dale is accessed from data\n```", "```js\nlet data2 = {\n name: \"Dale D\"\n Object_name: \"data2\"\n}\ndata.print.call(data2) // Dale D is accessed from data2\n```", "```js\n( args ) => { // function body }\n```", "```js\n    const unnamed = (x) => {\n    console.log(x)\n    }\n    unnamed(10) //\u00a0\u00a010\n    ```", "```js\n    ((x) => { \n    \u00a0\u00a0\u00a0\u00a0console.log(x) \n    })(\"unnamed function as IIFE\") // output: unnamed function as IIFE\n    ```", "```js\n    function processed(arg, callback) {\n    \u00a0\u00a0\u00a0\u00a0let x = arg * 2;\n    \u00a0\u00a0\u00a0\u00a0return callback(x);\n    }\n    processed(2, (x) => {\n    \u00a0\u00a0\u00a0\u00a0console.log(x + 2)\n    });\u00a0\u00a0\u00a0// output:\u00a0\u00a06\n    ```", "```js\nconst Obj = {\n\u00a0\u00a0\u00a0\u00a0\u00a0name: \"just an object\",\n\u00a0\u00a0\u00a0\u00a0\u00a0func: function(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(this.name);\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\nObj.func() // just an object\n```", "```js\nconst Obj = {\n\u00a0\u00a0\u00a0\u00a0\u00a0name: \"just an object\",\n\u00a0\u00a0\u00a0\u00a0\u00a0func:\u00a0\u00a0() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(this.name);\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\nObj.func() // undefined\n```", "```js\nlet name = \"in the global scope\"\nconst Obj = {\n\u00a0\u00a0\u00a0\u00a0\u00a0name: \"just an object\",\n\u00a0\u00a0\u00a0\u00a0\u00a0func:\u00a0\u00a0() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(this.name);\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\n\nObj.func() // in the global \n```", "```js\nlet syncarray = [\"1\", \"2\", \"3\", \"4\", \"5\"]\nfunction addB() {\n\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index)=>{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+B\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"done running\")\n\u00a0\u00a0\u00a0\u00a0}, 1000)\n}\naddB()\nconsole.log(syncarray);\n// output \n// [\"1\", \"2\", \"3\", \"4\", \"5\"]\n// \"done running\"\n```", "```js\nlet syncarray = [\"1\", \"2\", \"3\", \"4\", \"5\"]\nfunction addB(callback) {\n\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index)=>{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+B\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0callback() //call the callback function here\n\u00a0\u00a0\u00a0\u00a0}, 1000)\n}\naddB(()=>{\n\u00a0\u00a0// here we can do anything with the updated syncarray \n\u00a0\u00a0console.log(syncarray);\u00a0\u00a0\n})\n// output \n// [ '1+B', '2+B', '2+B', '4+B', '5+B' ]\n```", "```js\nlet syncarray = [\"1\", \"2\", \"3\", \"4\", \"5\"]\nfunction addB(callback) {\n\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+B\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0callback() //call the callback function here\n\u00a0\u00a0\u00a0\u00a0}, 1000)\n}\naddB(() => {\n\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+A\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(syncarray);\n\u00a0\u00a0\u00a0\u00a0}, 1000)\n})\n// output\n// [ '1+B+A', '2+B+A', '3+B+A', '4+B+A', '5+B+A' ]\n```", "```js\nlet syncarray = [\"1\", \"2\", \"3\", \"4\", \"5\"]\nfunction addA(callback) {\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+A\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 1000);\n\u00a0\u00a0\u00a0\u00a0})\n}\naddA().then(() => console.log(syncarray)); \n//output\n//[ '1+A', '2+A', '2+A', '4+A', '5+A' ]\n```", "```js\nNew Promise((resolve, rejection) => {\n})\n```", "```js\nlet syncarray = [\"1\", \"2\", \"3\", \"4\", \"5\"]\nfunction addA(callback) {\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+A\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let error = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (error) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reject(\"just testing promise rejection\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 1000);\n\u00a0\u00a0\u00a0\u00a0})\n}\naddA().catch(e => console.log(e)) // just testing promise rejection\n```", "```js\naddA.then(doB)\n\u00a0\u00a0\u00a0\u00a0\u00a0.then(doC)\n\u00a0\u00a0\u00a0\u00a0\u00a0.then(doD)\n\u00a0\u00a0\u00a0\u00a0\u00a0.then(doF)\n\u00a0\u00a0\u00a0\u00a0\u00a0.catch(e= > console.log(e));\n```", "```js\nlet syncarray = [\"1\", \"2\", \"2\", \"4\", \"5\"]\nfunction addA() {\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+A\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 1000);\n\u00a0\u00a0\u00a0\u00a0})\n}\nfunction addB() {\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+B\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 2000);\n\u00a0\u00a0\u00a0\u00a0})\n}\nPromise.all([addA(), addB()])\n.then(() => console.log(syncarray)); // [ '1+A+B', '2+A+B', '2+A+B', '4+A+B', '5+A+B' ]\n```", "```js\nAsync function anyName() {\n\u00a0\u00a0\u00a0\u00a0await anyPromiseFunction()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await anyPromiseFunction()\n}\n```", "```js\nAsync function someFunction() {\n\u00a0\u00a0\u00a0\u00a0await anyPromiseFunction()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await anotherPromiseFunction()\n\u00a0\u00a0\u00a0\u00a0return \"done\"\n}\n// To get the returned value, we can use .then()\nanyName().then(value => console.log(value)) // \"done\"\n// we can also call the function inside another Async/await function\nAsync function resolveAnyName() {\n\u00a0\u00a0\u00a0const result = await anyName()\n\u00a0\u00a0\u00a0console.log(result)\n}\nresolveAnyName() // \"done\"\n```", "```js\nlet syncarray = [\"1\", \"2\", \"2\", \"4\", \"5\"] \nfunction addA(callback) {\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+A\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 1000);\n\u00a0\u00a0\u00a0\u00a0})\n}\nfunction addB(callback) {\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray.forEach((value, index) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0syncarray[index] = value + \"+B\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 2000);\n\u00a0\u00a0\u00a0\u00a0})\n}\nAsync function runPromises(){ \n\u00a0\u00a0\u00a0\u00a0await addA() \n\u00a0\u00a0\u00a0\u00a0await\u00a0\u00a0addB() \n\u00a0\u00a0\u00a0\u00a0console.log(syncarray); \n\u00a0\u00a0} \nrunPromises() \n//output: [ '1+A+B', '2+A+B', '2+A+B', '4+A+B', '5+A+B' ]\n```", "```js\nclass User {\n\u00a0\u00a0\u00a0\u00a0constructor(firstName, lastName, email) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.firstName = firstName;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.lastName = lastName;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.email = email;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getFirstName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.firstName;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getLastName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.lastName;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getFullName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `${this.firstName} ${this.lastName}`;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getEmail() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.email;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0setEmail(email) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.email = email;\n\u00a0\u00a0\u00a0\u00a0}\n}\nlet Person1 = new User(\"John\", \"Benjamin\", \"john@some-email.com\")\nconsole.log(Person1.getFullName());\nconsole.log(Person1.getEmail());\n// outputs \n// \"John Benjamin\"\n// \"john@someemail.com\"\n```", "```js\nlet Person2 = new User(\"John\", \"Benjamin\", \"john@some-email.com\")\nlet Person3 = new User(\"Hannah\", \"Joe\", \"hannah@some-email.com\")\nconsole.log(Person2.getFullName());\nconsole.log(Person3.getFullName());\n//outputs \n// \"John Benjamin\"\n// \"Hannah Montanna\"\n```", "```js\nPerson1.getFullName()\n```", "```js\nclass Teacher extends User {\n}\n```", "```js\nlet teacher1 = new Teacher(\"John\", \"Benjamin\", \"john@someemail.com\")\nconsole.log(teacher1.getFullName());\n//outputs\n// \"John Benjamin\"\n```", "```js\nclass Teacher extends User {\n\u00a0\u00a0getUserType(){\n\u00a0\u00a0\u00a0\u00a0return \"Teacher\"\n\u00a0\u00a0}\n}\n```", "```js\nclass User {\n\u00a0\u00a0\u00a0\u00a0constructor(firstName, lastName, email) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.firstName = firstName;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.lastName = lastName;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.email = email;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getFirstName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.firstName;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getLastName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.lastName;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getFullName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `${this.firstName} ${this.lastName}`;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getEmail() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.email;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0setEmail(email) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.email = email;\n\u00a0\u00a0\u00a0\u00a0}\n}\nclass Teacher extends User { \n\u00a0\u00a0\u00a0\u00a0getFullName(){ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `Teacher: ${this.firstName} ${this.lastName}`; \n\u00a0\u00a0\u00a0\u00a0} \n\u00a0\u00a0\u00a0\u00a0getUserType(){ \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Teacher\" \n\u00a0\u00a0\u00a0\u00a0} \n\u00a0\u00a0} \nlet teacher1 = new Teacher(\"John\", \"Benjamin\", \"john@someemail.com\") \nconsole.log(teacher1.getFullName()); \n//output \n// \"Teacher: John Benjamin\"\n```", "```js\n// class User{\n// previous User class goes here\n//\u00a0\u00a0\u00a0\u00a0\u00a0... \n// }\n\nclass Teacher extends User {\n\u00a0\u00a0\u00a0\u00a0constructor(firstName, lastName, email, userType, subject) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(firstName, lastName, email) //calls parent class constructor \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.userType = userType\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.subject = subject\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getFullName() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `Teacher: ${this.firstName} ${this.lastName}`;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0getUserType() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Teacher\"\n\u00a0\u00a0\u00a0\u00a0}\n}\nlet teacher1 = new Teacher(\"Johnny\", \"Benjamin\", \"john@someemail.com\", \"Teacher\", \"Mathematics\")\nconsole.log(teacher1.getFullName());\nconsole.log(teacher1.userType);\nconsole.log(teacher1.subject);\n//outputs \n// \"Teacher: Johnny Benjamin\"\n// \"Teacher\"\n// \"Mathematics\"\n```", "```js\n// Babel Input: ES2015 arrow function\n[\"Lion\", \"Tiger\", \"Shark\"].map((animal) => console.log(animal));\n\n// Babel Output: ES5 equivalent\n[\"Lion\", \"Tiger\", \"Shark\"].map(function(animal) {\n\u00a0\u00a0console.log(animal)\n});\n```", "```js\n    cross-env-js, in your directory, and then change the directory as well.\n    ```", "```js\n    package.json file and accept all default options. Ideally, this should output the following:![Figure 1.1 \u2013 Output from running the npm init \u2013y command\n    ](img/B17076_01_01.jpg)Figure 1.1 \u2013 Output from running the npm init \u2013y command\n    ```", "```js\n    package.json file should look like this:\n\n    ```", "```js\n\n    ```", "```js\n    \u251c\u2500\u2500 dist\n    \u2502\u00a0\u00a0\u00a0\u2514\u2500\u2500 index.html\n    \u251c\u2500\u2500 src\n    \u2502\u00a0\u00a0\u00a0\u251c\u2500\u2500 index.js\n    \u2502\u00a0\u00a0\u00a0\u251c\u2500\u2500 utils.js\n    ```", "```js\n    \u251c\u2500\u2500 dist\n    \u2502\u00a0\u00a0\u00a0\u2514\u2500\u2500 index.html\n    \u251c\u2500\u2500 node_modules\n    \u251c\u2500\u2500 package-lock.json\n    \u251c\u2500\u2500 package.json\n    \u2514\u2500\u2500 src\n    \u00a0\u00a0\u00a0\u00a0\u251c\u2500\u2500 index.js\n    \u00a0\u00a0\u00a0\u00a0\u2514\u2500\u2500 utils.js\n    ```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n    \u00a0\u00a0\u00a0\u00a0<meta charset=\"UTF-8\">\n    \u00a0\u00a0\u00a0\u00a0<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \u00a0\u00a0\u00a0\u00a0<script src=\"img/bundle.js\"></script>\n    \u00a0\u00a0\u00a0\u00a0<title>Cross Environment Support</title>\n    </head>\n    <body>\n\n    </body>\n    </html>\n    ```", "```js\n    const subjects = {\n    \u00a0\u00a0\u00a0\u00a0John: \"English Language\",\n    \u00a0\u00a0\u00a0\u00a0Mabel: \"Mathematics\",\n    \u00a0\u00a0\u00a0\u00a0Mary: \"History\",\n    \u00a0\u00a0\u00a0\u00a0Joe: \"Geography\"\n    }\n\n    export const names = [\"John\", \"Mabel\", \"Mary\", \"Joe\"]\n    export const getSubject = (name) =>{\n    \u00a0\u00a0\u00a0\u00a0return subjects[name]\n    }\n    ```", "```js\n    import { names, getSubject } from \"./utils\";\n    names.forEach((name) =>{\n    \u00a0\u00a0\u00a0\u00a0console.log(`Teacher Name: ${name}, Teacher Subject: ${getSubject(name)}`)\n    })\n    ```", "```js\n    const path = require('path');\n    module.exports = {\n    \u00a0\u00a0entry: './src/index.js',\n    \u00a0\u00a0output: {\n    \u00a0\u00a0\u00a0\u00a0filename: 'bundle.js',\n    \u00a0\u00a0\u00a0\u00a0path: path.resolve(__dirname, 'dist'),\n    \u00a0\u00a0\u00a0\u00a0publicPath: '/dist'\n    \u00a0\u00a0},\n    \u00a0\u00a0module: {\n    \u00a0\u00a0\u00a0\u00a0rules: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0test: /\\.js$/,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exclude: /(node_modules)/,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0use: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loader: 'babel-loader',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0]\n    \u00a0\u00a0}\n    };\n    ```", "```js\n    {\n    \u00a0\u00a0...\n    \u00a0\u00a0\"scripts\": {\n    \u00a0\u00a0\u00a0\u00a0\"build\": \"webpack --mode=production\",\n    \u00a0\u00a0\u00a0\u00a0\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    \u00a0\u00a0},\n\n    \u00a0\u00a0...\n    }\n    ```", "```js\n    package.json file, and this, in turn, will ask webpack to bundle your code referencing the config file you created earlier.Following successful compilation, you should have the following output in your terminal:\n    ```", "```js\n    $ mkdir unit-testing\n    $ cd unit-testing\n    ```", "```js\n    $ npm init -y\n    ```", "```js\n    $ npm install mocha chai --save-dev\n    ```", "```js\n    {\n     ...\n\n    \u00a0\u00a0\"scripts\": {\n    \u00a0\u00a0\u00a0\u00a0\"test\": \"mocha\"\n    \u00a0\u00a0},\n     ...\n    }\n    ```", "```js\n    \u251c\u2500\u2500 package-lock.json\n    \u251c\u2500\u2500 package.json\n    \u251c\u2500\u2500 src\n     \u2514\u2500\u2500 test\n    ```", "```js\n    exports.addTwoNumbers = function (num1, num2) {\n    \u00a0\u00a0if (typeof num1 == \"string\" || typeof num2 == \"string\"){\n    \u00a0\u00a0\u00a0\u00a0throw new Error(\"Cannot add string type to number\")\n    \u00a0\u00a0}\n    \u00a0\u00a0return num1 + num2;\n    };\n    exports.mean = function (numArray) {\n    \u00a0\u00a0let n = numArray.length;\n    \u00a0\u00a0let sum = 0;\n    \u00a0\u00a0numArray.forEach((num) => {\n    \u00a0\u00a0\u00a0\u00a0sum += num;\n    \u00a0\u00a0});\n    \u00a0\u00a0return sum / n;\n    };\n    ```", "```js\n    const chai = require(\"chai\");\n    const expect = chai.expect;\n    const utils = require(\"../src/utils\"); \n    describe(\"Test addition of two numbers\", () => {\n    \u00a0\u00a0it(\"should return 20 for addition of 15 and 5\", () => {\n    \u00a0\u00a0\u00a0\u00a0expect(utils.addTwoNumbers(15, 5)).equals(20);\n    \u00a0\u00a0});\n\n    \u00a0\u00a0it(\"should return -2 for addition of 10 and -12\", () => {\n    \u00a0\u00a0\u00a0\u00a0expect(utils.addTwoNumbers(10, -12)).equals(-2);\n    \u00a0\u00a0});\n\n    \u00a0\u00a0it(\"should throw an error when string data type is passed\", () => {\n    \u00a0\u00a0\u00a0\u00a0expect(() => utils.addTwoNumbers(\"One\", -12)).to.throw(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Error,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cannot add string type to number\"\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0});\n    });\n\n    describe(\"Test mean computation of an array\", () => {\n    \u00a0\u00a0it(\"should return 25 as mean of array [50, 25, 15, 10]\", () => {\n    \u00a0\u00a0\u00a0\u00a0expect(utils.mean([50, 25, 15, 10])).equals(25);\n    \u00a0\u00a0});\n    \u00a0\u00a0it(\"should return 2.2 as mean of array [5, 2, 1, 0, 3]\", () => {\n    \u00a0\u00a0\u00a0\u00a0expect(utils.mean([5, 2, 1, 0, 3])).equals(2.2);\n    \u00a0\u00a0});\n    });\n    ```", "```js\n    package.json file, and outputs a formatted test case report, as shown in the following screenshot:\n    ```", "```js\n...\n it(\"should throw error on empty array arg\", () => {\n\u00a0\u00a0\u00a0\u00a0expect(() => utils.mean([])).to.throw(Error, \"Cannot compute mean of empty array\")\n\u00a0\u00a0});\n...\n```", "```js\nexports.mean = function (numArray) {\n\u00a0\u00a0if (numArray.length == 0){\n\u00a0\u00a0\u00a0\u00a0throw new Error(\"Cannot compute mean of empty array\")\n\u00a0\u00a0}\n\u00a0\u00a0let n = numArray.length;\n\u00a0\u00a0let sum = 0;\n\u00a0\u00a0numArray.forEach((num) => {\n\u00a0\u00a0\u00a0\u00a0sum += num;\n\u00a0\u00a0});\n\n\u00a0\u00a0return sum / n;\n};\n```"]