- en: Chapter 9. Physics Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 物理编程
- en: The CryENGINE physics system is an extensible physics implementation that allows
    for the creation of a truly dynamic world. With a sizeable API, developers will
    find that there's plenty of wiggle room when it comes to implementing physical
    simulations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE物理系统是一个可扩展的物理实现，允许创建真正动态的世界。开发人员将发现，在实现物理模拟时有很大的灵活性。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn the workings of the physics system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解物理系统的工作原理
- en: Discover how to debug our physicalized geometry
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现如何调试我们的物理化几何体
- en: Learn how to ray cast and intersect primitives to discover contact points, ground
    normal, and more
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何进行射线投射和相交基元，以发现接触点、地面法线等
- en: Create our own physicalized entity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们自己的物理化实体
- en: Make things go boom by using simulated explosions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过模拟爆炸使事物爆炸
- en: CryPhysics
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CryPhysics
- en: The physical entity system is oriented around the concepts of physical entities,
    which are accessible via the `IPhysicalEntity` interface. A physical entity represents
    geometry with a physical proxy that can affect and be affected by intersections,
    collisions, and other events.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 物理实体系统围绕物理实体的概念而设计，可以通过`IPhysicalEntity`接口访问。物理实体代表具有物理代理的几何体，可以影响和受到交叉、碰撞和其他事件的影响。
- en: Although it is possible to create physical entities without an underlying entity
    (`IEntity`) via the `IPhysicalWorld::CreatePhysicalEntity` function, it is most
    common to call `IEntity::Physicalize` in order to enable the physics proxy of
    the model currently loaded by the entity.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以通过`IPhysicalWorld::CreatePhysicalEntity`函数创建没有基础实体（`IEntity`）的物理实体，但通常会调用`IEntity::Physicalize`以启用当前由实体加载的模型的物理代理。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The physics proxy is a simplified model of the render mesh. This is used to
    decrease the strain on the physics system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 物理代理是渲染网格的简化模型。这用于减少物理系统的负担。
- en: When `IEntity::Physicalize` is called, a new entity proxy is created that will
    handle its physicalized representation via a call to `IPhysicalWorld::CreatePhysicalEntity`.
    The CryENGINE allows for a number of physical entity types to be created, depending
    on the purpose of the physicalized object.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`IEntity::Physicalize`时，将创建一个新的实体代理，通过调用`IPhysicalWorld::CreatePhysicalEntity`来处理其物理化表示。CryENGINE允许创建多种物理实体类型，具体取决于物理化对象的目的。
- en: Physicalized entity types
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理化实体类型
- en: 'Following are the types of physicalized entities currently implemented by the
    CryENGINE:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CryENGINE当前实现的物理化实体类型：
- en: '**PE_NONE**: This is used when the entity should not be physicalized, or passed
    to `IEntity::Physicalize` when we want to dephysicalize. While not physicalized,
    the entity will not have a physics proxy and can therefore not physically interact
    with other objects.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_NONE**：当实体不应物理化时使用，或者当我们想要去物理化时传递给`IEntity::Physicalize`。在未物理化时，实体将没有物理代理，因此无法与其他对象进行物理交互。'
- en: '**PE_STATIC**: This tells the physics system to utilize the entity''s physics
    proxy, but never allows it to be moved or rotated through the use of physical
    interactions.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_STATIC**：这告诉物理系统利用实体的物理代理，但永远不允许通过物理交互移动或旋转它。'
- en: '**PE_RIGID**: This applies the rigid body type to the object, which allows
    foreign objects to collide and move the target.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_RIGID**：将刚体类型应用于对象，允许外部对象发生碰撞并移动目标。'
- en: '**PE_WHEELEDVEHICLE**: This is a specialized type used for vehicles.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_WHEELEDVEHICLE**：用于车辆的专用类型。'
- en: '**PE_LIVING**: This is used for living actors, such as humans, that require
    ground alignment and ground contact queries.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_LIVING**：用于生物演员，例如需要地面对齐和地面接触查询的人类。'
- en: '**PE_PARTICLE**: This physicalizes based on the particle passed in `SEntityPhysicalizeParams`,
    and is useful for avoiding issues with fast moving objects such as projectiles.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_PARTICLE**：这是基于`SEntityPhysicalizeParams`中传递的粒子进行物理化的，对于避免快速移动物体（如抛射物）的问题非常有用。'
- en: '**PE_ARTICULATED**: This is used for articulated structures consisting of several
    rigid bodies connected by joints, and is used on, for example, ragdolls.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_ARTICULATED**：用于由几个刚体通过关节连接的关节结构，例如布娃娃。'
- en: '**PE_ROPE**: This is used for creating physicalized rope objects that can tie
    together two physical entities, or hang freely. It is also used for the Sandbox
    rope tool.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_ROPE**：用于创建可以将两个物理实体绑在一起或自由悬挂的物理化绳索对象。也用于Sandbox绳索工具。'
- en: '**PE_SOFT**: This is a a collection of connected vertices that can interact
    with the environment, for example, cloth.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PE_SOFT**：这是一组连接的顶点，可以与环境进行交互，例如布料。'
- en: Introducing physical entity identifiers
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入物理实体标识符
- en: All physical entities are assigned unique identifiers which can be retrieved
    via `IPhysicalWorld::GetPhysicalEntityId`, and used to obtain the physical entity
    via `IPhysicalWorld::GetPhysicalEntityById`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有物理实体都被分配唯一的标识符，可以通过`IPhysicalWorld::GetPhysicalEntityId`检索，并用于通过`IPhysicalWorld::GetPhysicalEntityById`获取物理实体。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The physical entity ID is serialized as a way to associate data with specific
    physical entities, and should therefore be consistent between reloads.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 物理实体ID被序列化为一种将数据与特定物理实体关联的方式，因此在重新加载时应保持一致。
- en: Drawing entity proxies
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制实体代理
- en: We can make use of the `p_draw_helpers` CVar to get visual feedback on the various
    physicalized objects present in the level.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用`p_draw_helpers` CVar来获得关卡中各种物理化对象的视觉反馈。
- en: To draw all physicalized objects, simply set the CVar to 1.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制所有物理化对象，只需将CVar设置为1。
- en: '![Drawing entity proxies](img/5909_09_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![绘制实体代理](img/5909_09_01.jpg)'
- en: For more complex usage, use `p_draw_helpers [Entity_Types]_[Helper_Types]`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的用法，请使用`p_draw_helpers [Entity_Types]_[Helper_Types]`。
- en: 'For example, to draw the terrain proxy geometry:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要绘制地形代理几何：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Drawing entity proxies](img/5909_09_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![绘制实体代理](img/5909_09_02.jpg)'
- en: Entity types
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实体类型
- en: 'Following is a list of entity types:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实体类型的列表：
- en: '**t**: This shows terrain'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**t**：这显示地形'
- en: '**s**: This shows static entities'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**s**：这显示静态实体'
- en: '**r**: This shows sleeping rigid bodies'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**r**：这显示休眠刚体'
- en: '**R**: This shows active rigid bodies'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**R**：这显示活动刚体'
- en: '**l**: This shows living entities'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**l**：这显示生物实体'
- en: '**i**: This shows independent entities'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**i**：这显示独立实体'
- en: '**g**: This shows triggers'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**g**：这显示触发器'
- en: '**a**: This shows areas'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**a**：这显示区域'
- en: '**y**: This shows the `RayWorldIntersection` rays'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**y**：这显示`RayWorldIntersection`射线'
- en: '**e**: This shows explosion occlusion maps'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**e**：这显示爆炸遮挡地图'
- en: Helper types
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 辅助类型
- en: 'Following is a list of helper types:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是辅助类型列表：
- en: '**g**: This shows geometry'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**g**：这显示几何体'
- en: '**c**: This shows contact points'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**c**：这显示接触点'
- en: '**b**: This shows bounding boxes'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**b**：这显示边界框'
- en: '**l**: This shows tetrahedral lattices for breakable objects'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**l**：这显示可破碎物体的四面体晶格'
- en: '**j**: This shows structural joints (will force translucency on the main geometry)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**j**：这显示结构关节（将在主几何体上强制半透明）'
- en: '**t(#)**: This shows bounding volume trees up to the level #'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**t(#)**：这显示直到级别#的边界体积树'
- en: '**f(#)**: This only shows geometries with this bit flag set (multiple f''s
    stack)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**f(#)**：这只显示设置了此位标志的几何体（多个f叠加）'
- en: Physical entity actions, parameters, and status
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理实体动作、参数和状态
- en: 'The `IPhysicalEntity` interface provides three methods of altering and obtaining
    the physical state of the entity:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`IPhysicalEntity`接口提供了三种改变和获取实体物理状态的方法：'
- en: Parameters
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: Physical entity parameters determine how the physical representation of the
    geometry should behave in the world. Parameters can be retrieved via the `IPhysicalEntity::GetParams`
    function, and set by using `IPhysicalEntity::SetParams`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 物理实体参数确定几何体的物理表示应在世界中如何行为。可以通过`IPhysicalEntity::GetParams`函数检索参数，并通过使用`IPhysicalEntity::SetParams`设置。
- en: 'All parameters are passed as structs that derive from `pe_params`. For example,
    to modify what gravity the entity is affected by, we can use `pe_simulation_params`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有参数都作为从`pe_params`派生的结构传递。例如，要修改实体受到的重力，我们可以使用`pe_simulation_params`：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code will change the gravitational pull that is applied to the entity to
    -9.81f.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将更改应用于实体的重力加速度为-9.81f。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most of the physical entity parameter struct's default constructors mark certain
    data as unused; this way we don't have to worry about overriding parameters we
    did not set.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数物理实体参数结构的默认构造函数标记某些数据为未使用；这样我们就不必担心覆盖我们未设置的参数。
- en: Actions
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动作
- en: Similar in usage to parameters, actions allow the developer to force certain
    physical events, such as impulses or resetting entity velocity.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与参数类似，动作允许开发人员强制执行某些物理事件，例如脉冲或重置实体速度。
- en: All actions are derived from the `pe_action` struct, and can be applied via
    the `IPhysicalEntity::Action` function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所有动作都源自`pe_action`结构，并可以通过`IPhysicalEntity::Action`函数应用。
- en: 'For example, to apply a simple impulse to our entity which launches it into
    the air, use:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要对我们的实体施加一个简单的冲量，将其发射到空中，请使用：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Status
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态
- en: It is also possible to get various status data from the entity, to, for example,
    determine where its center of mass is, or to get its velocity.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以从实体获取各种状态数据，例如确定其质心位置或获取其速度。
- en: All statuses are derived from the `pe_status` struct, and can be retrieved via
    the `IPhysicalEntity::GetStatus` function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有状态都源自`pe_status`结构，并可以通过`IPhysicalEntity::GetStatus`函数检索。
- en: 'For example, to get the velocity of a living physical entity such as a player,
    use:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要获取玩家等生物实体的速度，请使用：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Physicalized entity type details
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理化实体类型详细信息
- en: 'There are a number of parameters, actions, and statuses for the default physicalized
    entity implementation. We have listed a selection of their most commonly used
    types:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认物理化实体实现有许多参数、动作和状态。我们列出了它们最常用的类型的一些选择：
- en: Common parameters
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见参数
- en: '**pe_params_pos**: This is used to set the position and orientation of the
    physical entity.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_pos**：用于设置物理实体的位置和方向。'
- en: '**pe_params_bbox**: This allows forcing an entity''s bounding box to a specific
    value, or querying it when used with `GetParams`, as well as querying intersections.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_bbox**：这允许将实体的边界框强制为特定值，或在与`GetParams`一起使用时查询它，以及查询交集。'
- en: '**pe_params_outer_entity**: This allows specifying an outer physical entity.
    Collisions with the outer entity will be ignored if they occur within the bounding
    box of it.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_outer_entity**：这允许指定外部物理实体。如果在其边界框内发生碰撞，则将忽略与外部实体的碰撞。'
- en: '**pe_simulation_params**: This sets simulation parameters for compatible entities.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_simulation_params**：为兼容实体设置模拟参数。'
- en: Common actions
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见动作
- en: '**pe_action_impulse**: This applies a one-time impulse to the entity.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_action_impulse**：这对实体施加一次性冲量。'
- en: '**pe_action_add_constraint**: This is used to add a constraint between two
    physical entities. For example, an ignore constraint could be used to make a ghost
    walk through walls.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_action_add_constraint**：用于在两个物理实体之间添加约束。例如，可以使用忽略约束使幽灵穿过墙壁。'
- en: '**pe_action_set_velocity**: This is used to force the velocity of a physical
    entity.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_action_set_velocity**：用于强制物理实体的速度。'
- en: Common statuses
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见状态
- en: '**pe_status_pos**: This requests the current transformation of an entity or
    an entity part'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_status_pos**：请求实体或实体部分的当前变换'
- en: '**pe_status_dynamics**: This is used to get entity movement stats such as acceleration,
    angular acceleration, and velocity'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_status_dynamics**：用于获取实体运动统计数据，如加速度、角加速度和速度'
- en: Static
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态
- en: Physicalizing an entity with the static type results in the creation of the
    base physicalized entity type, from which all extensions such as rigid or living
    are derived.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将实体物理化为静态类型会创建基本物理化实体类型，从中派生所有扩展，如刚性或生物。
- en: Static entities are physicalized, but will not move. For example, if a ball
    is thrown at a static object, it will bounce back without moving the target object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 静态实体是物理化的，但不会移动。例如，如果将球扔向静态物体，它将在不移动目标物体的情况下反弹回来。
- en: Rigid
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刚性
- en: This refers to basic physicalized entity that can be moved in the world when
    affected by external forces.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这指的是基本的物理实体，当受到外部力的影响时可以在世界中移动。
- en: If we use the same previous example, throwing a ball at a rigid object will
    result in the rigid object being pushed away
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用相同的先前示例，向刚性物体投掷球将导致刚性物体被推开
- en: Wheeled vehicle
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轮式车辆
- en: This represents a wheeled vehicle, putting it simply, the implementation is
    a rigid body with added vehicle functionality such as wheels, brakes, and the
    CryENGINE.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这代表了一个轮式车辆，简单地说，实现是一个刚体，具有车轮、刹车和CryENGINE等车辆功能。
- en: Unique parameters
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特参数
- en: '**pe_params_car**: This is used to get or set vehicle-specific parameters,
    such as CryENGINE power, RPM, and the number of gears'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_car**：用于获取或设置特定于车辆的参数，例如CryENGINE功率、RPM和齿轮数'
- en: '**pe_params_wheel**: This is used to get or set parameters specific to one
    of the vehicle''s wheels, such as friction, surface ID, and damping'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_wheel**：用于获取或设置车辆车轮的特定参数，例如摩擦、表面ID和阻尼'
- en: Unique statuses
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特状态
- en: '**pe_status_vehicle**: This is used to get vehicle stats, allows getting velocity,
    current gear, and more'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_status_vehicle**：用于获取车辆统计信息，允许获取速度、当前档位等'
- en: '**pe_status_wheel**: This gets the status of a specific wheel, for example,
    contact normal, torque, and surface ID'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_status_wheel**：获取特定车轮的状态，例如接触法线、扭矩和表面ID'
- en: '**pe_status_vehicle_abilities**: This allows checking of the maximum possible
    velocity for a specific turn'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_status_vehicle_abilities**：这允许检查特定转弯的最大可能速度'
- en: Unique actions
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特动作
- en: '**pe_action_drive**: This is used on vehicle events such as brakes, pedals,
    and gear switches.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_action_drive**：用于车辆事件，如刹车、踏板和换挡。'
- en: Living
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生物
- en: The living entity implementation is a specialized setup for handling actors
    and their movement requests.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 生物实体实现是处理演员及其移动请求的专门设置。
- en: 'Living entities have two states: on ground and in air. When on ground, the
    player will be "glued" to the ground until an attempt to detach it is made (by
    applying significant velocity away from the ground).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 生物实体有两种状态：在地面上和在空中。在地面上，玩家将被“粘”在地面上，直到尝试将其与地面分离（通过施加远离地面的显著速度）。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember the animated character movement requests from [Chapter 5](ch05.html
    "Chapter 5. Creating Custom Actors"), *Creating Custom Actors*? The system uses
    living entity `pe_action_move` requests in the core.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得来自[第5章](ch05.html "第5章。创建自定义演员")*创建自定义演员*的动画角色移动请求吗？该系统在核心中使用生物实体`pe_action_move`请求。
- en: Unique parameters
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特参数
- en: '**pe_player_dimensions**: This is used to set parameters related to the living
    entity''s static properties, such as sizeCollider, and whether it should use a
    capsule or cylinder for the collision geometry'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_player_dimensions**：用于设置与生物实体的静态属性相关的参数，例如sizeCollider，以及是否应该使用胶囊或圆柱体作为碰撞几何体'
- en: '**pe_player_dynamics**: This is used to set dynamic parameters related to the
    living entity, such as inertia, gravity, and mass'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_player_dynamics**：用于设置与生物实体相关的动态参数，例如惯性、重力和质量'
- en: Unique statuses
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特状态
- en: '**pe_status_living**: This gets the current living entity status, including
    stats such as time flying, velocity, and ground normal'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_status_living**：获取当前生物实体状态，包括飞行时间、速度和地面法线等统计信息'
- en: '**pe_status_check_stance**: This is used to check whether new dimensions cause
    collisions. Parameters have the same meaning as in pe_player_dimensions'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_status_check_stance**：用于检查新尺寸是否引起碰撞。参数的含义与pe_player_dimensions中的相同'
- en: Unique actions
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特动作
- en: '**pe_action_move**: This is used to submit move requests for the entity.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_action_move**：用于提交实体的移动请求。'
- en: Particle
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子
- en: It is also possible to use particle representations of objects. This is commonly
    done for objects that should move at high speeds, for example, projectiles. Essentially,
    this means that the physics representation of our entity is simply a two-dimensional
    plane.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用对象的粒子表示。这通常用于应该以高速移动的对象，例如抛射物。基本上，这意味着我们实体的物理表示只是一个二维平面。
- en: Unique parameters
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特参数
- en: '**pe_params_particle**: This is used to set particle-specific parameters'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_particle**：用于设置特定于粒子的参数'
- en: Articulated
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关节
- en: Articulated structures consist of several rigid bodies connected by joints,
    for example, a ragdoll. This approach allows for setting tearing limits and more.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 关节结构由几个刚体通过关节连接而成，例如布娃娃。这种方法允许设置撕裂限制等。
- en: Unique parameters
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特参数
- en: '**pe_params_joint**: This is used to create a joint between two rigid bodies
    when setting, and queries an existing joint when used together with `GetParams`.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_joint**：用于在设置时在两个刚体之间创建关节，并在与`GetParams`一起使用时查询现有关节。'
- en: '**pe_params_articulated_body**: This is used to set parameters specific to
    the articulated type.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_articulated_body**：用于设置特定于关节类型的参数。'
- en: Rope
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绳索
- en: When you want to create ropes that tie multiple physicalized objects together,
    you should utilize ropes. This system allows ropes to attach to dynamic or static
    surfaces.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要创建将多个物理化对象绑在一起的绳索时，应该使用绳索。该系统允许绳索附着到动态或静态表面。
- en: Unique parameters
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特参数
- en: '**pe_params_rope**: This is used to alter or get physics rope parameters'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_rope**：用于更改或获取物理绳索参数'
- en: Soft
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软
- en: Soft is a system of non-rigidly connected vertices that can interact with the
    environment, for example, cloth objects.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 软是一种非刚性连接的顶点系统，可以与环境进行交互，例如布料物体。
- en: Unique parameters
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特参数
- en: '**pe_params_softbody**: This is used to configure a physicalized soft body'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_params_softbody**：用于配置物理软体'
- en: Unique actions
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独特动作
- en: '**pe_action_attach_points**: This is used to attach some of the soft entity''s
    vertices to another physical entity'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pe_action_attach_points**：用于将软实体的一些顶点附加到另一个物理实体'
- en: Ray world intersections
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 射线世界交叉
- en: Using the `IPhysicalWorld::RayWorldIntersection` function, we can cast a ray
    from one point of our world to another to detect distance to specific objects,
    surface types, normal of ground, and more.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`IPhysicalWorld::RayWorldIntersection`函数，我们可以从世界的一个点向另一个点投射射线，以检测到特定对象的距离、表面类型、地面的法线等。
- en: '`RayWorldIntersection` is pretty easy to use, and we can prove it! To start
    off, see the following example of a ray cast:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`RayWorldIntersection`很容易使用，我们可以证明它！首先，看一个射线投射的例子：'
- en: '[PRE4]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The ray_hit struct
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ray_hit结构
- en: A reference to our `ray_hit hit` variable is passed to `RayWorldIntersection`,
    and is where we'll be able to retrieve all of the information about the ray hit.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`ray_hit hit`变量的引用传递给`RayWorldIntersection`，这是我们将能够检索有关射线命中的所有信息的地方。
- en: Commonly used member variables
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常用的成员变量
- en: '**float dist**: This is the distance from the origin (in our case the position
    of our entity) to the place where the ray hit.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**float dist**：这是从原点（在我们的例子中是实体的位置）到射线命中位置的距离。'
- en: '**IPhysicalEntity *pCollider**: This is the pointer to the physical entity
    that our ray collided with.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IPhysicalEntity *pCollider**：这是指向我们的射线碰撞的物理实体的指针。'
- en: '**short surface_idx**: This is the surface identifier of the surface type of
    the material our ray collided with (see `IMaterialManager::GetSurfaceType` to
    get its `ISurfaceType` pointer).'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**short surface_idx**：这是我们的射线碰撞的材料表面类型的表面标识符（请参见`IMaterialManager::GetSurfaceType`以获取其`ISurfaceType`指针）。'
- en: '**Vec3 pt**: This is the point of contact, in world coordinates.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vec3 pt**：这是接触点的世界坐标。'
- en: '**Vec3 n**: This is the surface normal at the point of contact.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vec3 n**：这是接触点的表面法线。'
- en: '**ray_hit *next**: This points to the next `ray_hit` structure if our ray hit
    multiple times. See the *Allowing multiple ray hits* section for more information.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ray_hit *next**：如果我们的射线多次命中，这将指向下一个`ray_hit`结构。有关更多信息，请参阅*允许多次射线命中*部分。'
- en: Origin and direction
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 起点和方向
- en: The first and second parameters of the `RayWorldIntersection` function define
    from where the ray should be cast, and how far in a specific direction.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`RayWorldIntersection`函数的第一个和第二个参数定义了射线应该从哪里投射，以及在特定方向上的距离。'
- en: In our case, we shoot the ray from the current position of our entity, one unit
    downwards.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们从实体的当前位置向下移动一个单位来发射射线。
- en: Object types and ray flags
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象类型和射线标志
- en: Notice how after `dir`, we passed two types of flags to the `RayWorldIntersection`
    function. These indicate how the ray should intersect objects, and which collisions
    to ignore.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`dir`之后，我们向`RayWorldIntersection`函数传递了两种类型的标志。这些标志指示射线应该如何与对象相交，以及要忽略哪些碰撞。
- en: Object types
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象类型
- en: The object types parameter expects flags based on the `entity_query_flags` enum,
    and is used to determine what types of objects we want to allow our ray to collide
    with. If the ray collides with an object type that we did not define, it will
    simply ignore it and pass through.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型参数需要基于`entity_query_flags`枚举的标志，并用于确定我们希望允许射线与哪种类型的对象发生碰撞。如果射线与我们未定义的对象类型发生碰撞，它将简单地忽略并穿过。
- en: '**ent_static**: This refers to static objects'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ent_static**：这指的是静态对象'
- en: '**ent_sleeping_rigid**: This indicates sleeping rigid bodies'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ent_sleeping_rigid**：这表示睡眠刚体'
- en: '**ent_rigid**: This indicates active rigid bodies'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ent_rigid**：这表示活动刚体'
- en: '**ent_living**: This refers to living objects, for example, players'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ent_living**：这指的是生物体，例如玩家'
- en: '**ent_independent**: This indicates independent objects'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ent_independent**：这表示独立对象'
- en: '**ent_terrain**: This indicates terrain'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ent_terrain**：这表示地形'
- en: '**ent_all**: This refers to all types of objects'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ent_all**：这指的是所有类型的对象'
- en: Ray flags
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 射线标志
- en: The ray flags parameter is based on the `rwi_flags` enum, and is used to determine
    how the cast should behave.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 射线标志参数基于`rwi_flags`枚举，并用于确定投射应该如何行为。
- en: Allowing multiple ray hits
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许多次射线命中
- en: 'As mentioned earlier, it''s also possible to allow the ray to hit objects multiple
    times. To do so, we simply create a `ray_hit` array and pass it to the `RayWorldIntersection`
    function along with the number of hits:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，也可以允许射线多次命中对象。为此，我们只需创建一个`ray_hit`数组，并将其与命中次数一起传递给`RayWorldIntersection`函数：
- en: '[PRE5]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a physicalized entity
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个物理实体
- en: 'Now that we know how the physics system works, we can create our own physicalized
    entity that can collide with other physicalized geometry in our scene:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了物理系统是如何工作的，我们可以创建自己的物理实体，可以与场景中的其他物理几何体发生碰撞：
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This section assumes that you have read [Chapter 3](ch03.html "Chapter 3. Creating
    and Utilizing Custom Entities"), *Creating and Utilizing Custom Entities*.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本节假设您已阅读了[第3章](ch03.html "第3章。创建和使用自定义实体")，*创建和使用自定义实体*。
- en: In C++
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C++
- en: 'Based on what we learned earlier, we know that we can physicalize a static
    entity via the `PE_STATIC` type:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们之前学到的，我们知道可以通过`PE_STATIC`类型来使静态实体物理化：
- en: '[PRE6]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Assuming that geometry had been loaded for the entity prior to calling `IEntity::Physicalize`,
    other physicalized objects will now be able to collide with our entity.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在调用`IEntity::Physicalize`之前已为实体加载了几何体，现在其他物理化的对象将能够与我们的实体发生碰撞。
- en: 'But what if we want to allow collisions to move our object in the world? That''s
    where the `PE_RIGID` type comes into play:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们想要允许碰撞来移动我们的物体呢？这就是`PE_RIGID`类型发挥作用的地方：
- en: '[PRE7]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, CryENGINE will know that our object weighs 10 kilograms, and will be moved
    when it collides with another physicalized entity.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，CryENGINE将知道我们的对象重10千克，并且在与另一个物理化实体发生碰撞时将被移动。
- en: In C#
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C#
- en: 'We can also do this in C#, by using the `EntityBase.Physicalize` function,
    along with the `PhysicalizationParams` struct. For example, if we want to physicalize
    a static object, we would use the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在C#中使用`EntityBase.Physicalize`函数以及`PhysicalizationParams`结构来做到这一点。例如，如果我们想要给一个静态对象添加物理属性，我们可以使用以下代码：
- en: '[PRE8]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Of course, this assumes that an object has been loaded via the `EntityBase.LoadObject`
    method.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这假设通过`EntityBase.LoadObject`方法加载了一个对象。
- en: 'Now, if we want to make a rigid entity, we can use:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要创建一个刚性实体，我们可以使用：
- en: '[PRE9]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our entity now weighs 50 kilograms and can be moved when collisions with other
    physicalized objects occur.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实体现在重50公斤，当与其他物理化的物体发生碰撞时可以移动。
- en: Simulating explosions
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟爆炸
- en: We know you're thinking, "What good is all this physics knowledge if we can't
    blow stuff up?", and we've got you covered!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道你在想，“如果我们不能炸毁东西，所有这些物理知识有什么用？”，我们已经为你准备好了！
- en: The physical world implementation provides a simple function for simulating
    explosions in the world, with a wide range of parameters to allow customization
    of the blast area.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 物理世界实现提供了一个简单的函数，用于在世界中模拟爆炸，具有广泛的参数范围，允许自定义爆炸区域。
- en: 'To demonstrate, we''ll create an explosion with a maximum radius of 100:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将创建一个最大半径为100的爆炸：
- en: '[PRE10]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `SimulateExplosion` function will merely simulate an explosion and generate
    a force that pushes entities away, it will not create any particle effects.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: “SimulateExplosion”函数仅仅模拟爆炸并产生一个推动实体远离的力，不会产生任何粒子效果。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned the basic workings of the physical world implementation
    and how to visually debug physics proxies.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学习了物理世界实现的基本工作原理，以及如何在视觉上调试物理代理。
- en: With your new knowledge, you should be aware of how you can use ray world intersections
    to gather knowledge about the surrounding game world. Oh, and we've blown stuff
    up.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 有了你的新知识，你应该知道如何使用射线世界交叉点来收集关于周围游戏世界的信息。哦，我们已经炸毁了一些东西。
- en: If you don't feel ready to move on, why not create an extended physicalized
    entity or physics modifier such as a gravity gun, or a trampoline?
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得还不准备好继续前进，为什么不创建一个扩展的物理实体或物理修改器，比如重力枪或蹦床呢？
- en: In the next chapter, we'll be covering the rendering pipeline, including how
    to author custom shaders, and how to modify materials at runtime.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖渲染管线，包括如何编写自定义着色器，以及如何在运行时修改材质。
