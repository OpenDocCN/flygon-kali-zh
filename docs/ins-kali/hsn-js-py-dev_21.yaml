- en: Security and Keys
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 安全和密钥
- en: Security is no simple matter. It's important to keep security in mind when designing
    your applications from the beginning. For example, if you accidentally committed
    your keys to your repository, you'd have to do some trickery to either remove
    that from the repository's history or, more likely, you'd have to revoke those
    credentials and generate new ones.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性并不是一件简单的事情。在设计应用程序时，从一开始就牢记安全性是很重要的。例如，如果您意外地将您的密钥提交到存储库中，您将不得不进行一些技巧，要么从存储库的历史记录中删除它，要么更有可能的是，您将不得不撤销这些凭据并生成新的凭据。
- en: We simply can't have our database credentials visible to the world in our frontend
    JavaScript, but there are ways for the frontend to work with databases. The first
    step is to implement the proper security and understand where we can put our credentials,
    both for the frontend and the backend.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能让我们的数据库凭据在前端JavaScript中对世界可见，但是前端可以与数据库进行交互的方法。第一步是实施适当的安全措施，并了解我们可以将凭据放在哪里，无论是前端还是后端。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Authentication versus authorization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证与授权
- en: Using Firebase
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firebase
- en: '`.gitignore` and environment variables for credentials'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.gitignore`和凭据的环境变量'
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Be prepared to work with the code provided in the `Chapter-17` directory of
    the repository: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-17](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-17).
    As we''ll be working with command-line tools, also have your terminal or command-line
    shell available. We''ll need a modern browser and a local code editor.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好使用存储库的`Chapter-17`目录中提供的代码：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-17](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-17)。由于我们将使用命令行工具，还需要准备您的终端或命令行shell。我们需要一个现代浏览器和一个本地代码编辑器。
- en: Authentication versus authorization
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证与授权
- en: 'As we begin our exploration of security with JavaScript, it''s important to
    understand the vital difference between **authentication** and **authorization**.
    In a nutshell, *authentication* is a process whereby a system affirms and acknowledges
    that you are who you say you are. Think of going to the store to buy a bottle
    of wine. You may be asked to provide identification that proves you are of or
    above the legal consumption age of your locale. The clerk has *authenticated*
    you with your photo ID to say that *yes, you are **you** because I, the clerk,
    have matched your face to the photo in the I.D.* A second case is when you fly
    on an airline. When you pass through security, they''re also going to check your
    ID for the same reason: are you who you say you are?'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探讨JavaScript安全性时，了解**身份验证**和**授权**之间的重要区别至关重要。简而言之，*身份验证*是一个系统确认和承认您是您所说的人的过程。想象一下去商店买一瓶葡萄酒。您可能会被要求提供证明您达到或超过当地法定饮酒年龄的身份证明。店员通过您的身份证对您进行了*身份验证*，以证明*是的，您就是**您**，因为我，店员，已经将您的面孔与身份证中的照片相匹配*。第二种情况是当您乘坐航空公司的飞机时。当您通过安检时，他们也会出于同样的原因检查您的身份证：您是否是您所说的人？
- en: 'These two use cases end, however, with *authorization*. Authorization says:
    *I know you are who you say you are*. Now, are you allowed to do what you want?
    In our wine example, if you are above the age of 21 in the United States, or 18
    in most other parts of the world, you are *authorized* to consume alcoholic beverages.
    Now, the security agent at the airport does not really care about your age for
    any real reason; they are only concerned about whether you are who you say you
    are and whether you have a valid ticket for the flight you''re about to board.
    You are then *authorized* to enter the secure area of the airport and board your
    flight.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这两种用例最终都与*授权*有关。授权表示：*我知道你就是你所说的那个人*。现在，你是否被允许做你想做的事情？在我们的葡萄酒例子中，如果你在美国年满21岁，或者在世界上大多数其他地方年满18岁，你就被*授权*消费酒精饮料。现在，机场的安全人员并不真正关心你的年龄有任何真正的原因；他们只关心你是否是你所说的那个人，以及你是否有一张有效的登机牌。然后你就被*授权*进入机场的安全区并登机。
- en: 'Let''s continue our airline example a step further. In today''s age of enhanced
    security for travel, the authentication and authorization process neither begins
    nor ends with the security agent. The process looks more like this if you book
    a commercial airline ticket online:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步延伸我们的航空公司例子。在当今旅行安全加强的时代，身份验证和授权过程既不是开始也不是结束于安全人员。如果您在线预订商业航班机票，该过程看起来更像是这样：
- en: '![](assets/2cfb4f4c-323b-4ea0-9294-f881a660a623.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2cfb4f4c-323b-4ea0-9294-f881a660a623.png)'
- en: Figure 17.1 – Airline website authentication and authorization
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1 - 航空公司网站的身份验证和授权
- en: When using an airline's website, you may have an account and be *authorized*
    to proceed to log in, or you may already be logged in and *authorized* to search
    flights. If you are logged out, you must *authenticate* to search for flights.
    To book a flight, you may have to have certain details, such as a visa, in order
    to be *authorized* to book that flight. You may also be on a watchlist or blacklist
    for traveling to a country, so your journey would end before it even began. There
    are so many steps, but many of these happen behind the scenes; for example, you
    may not know that when you entered your name to book a ticket, your name was searched
    against global records to see whether you are authorized to fly. Your visa number
    may have been cross-referenced to see whether you are authorized to fly to that
    country.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用航空公司的网站时，您可能拥有一个帐户并被*授权*继续登录，或者您可能已经登录并被*授权*搜索航班。如果您已经登出，您必须*验证*才能搜索航班。要预订航班，您可能需要一些特定的细节，比如签证，以便被*授权*预订该航班。您可能也被列入旅行到某个国家的观察名单或黑名单，因此您的旅程可能会在开始之前就结束。有很多步骤，但其中许多是在幕后发生的；例如，当您输入您的姓名预订机票时，您可能不知道您的姓名已被搜索对全球记录，以查看您是否被授权飞行。您的签证号码可能已被交叉引用，以查看您是否被授权飞往该国家。
- en: 'Just as you need to be authenticated and authorized to fly, your web application
    should also be designed to allow authentication and authorization. Consider our
    restaurant finder application from [Chapter 15](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml), *Combining
    Node.js with the Frontend*, that allowed us to search for and save different restaurants
    in Firebase:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你需要经过身份验证和授权才能飞行一样，你的网络应用程序也应该被设计成允许身份验证和授权。考虑一下我们在[第15章](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml)中的餐厅查找应用，*将Node.js与前端结合使用*，它允许我们在Firebase中搜索并保存不同的餐厅：
- en: '![](assets/ef4dd2ef-aa5c-4dcd-b4bc-06f34822670c.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef4dd2ef-aa5c-4dcd-b4bc-06f34822670c.png)'
- en: Figure 17.2 – Our restaurant app
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2 - 我们的餐厅应用
- en: 'If you remember, we started our Firebase app with *open permissions *in the
    Real-Time Database section:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，我们在实时数据库部分以*开放权限*启动了我们的Firebase应用：
- en: '![](assets/743e5363-57b0-422c-a1f7-a2170c413910.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/743e5363-57b0-422c-a1f7-a2170c413910.png)'
- en: Figure 17.3 – Our Firebase security rules
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3 - 我们的Firebase安全规则
- en: This is obviously *not a good idea* for a production website. So, to mitigate
    this, let's return to Firebase and set up some authentication and authorization!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这对于生产网站来说*不是一个好主意*。因此，为了缓解这个问题，让我们返回Firebase并设置一些身份验证和授权！
- en: Using Firebase
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Firebase
- en: For ease of use, I've replicated our restaurant finder app in the `Chapter-17` directory
    in the GitHub repository. Don't forget to include your own environment variables
    in the `.env` file from [Chapter 15](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml), *Combining
    Node.js with the Frontend*, restaurant finder. Take a moment to get this set up
    and working before we move on.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我在GitHub存储库的`Chapter-17`目录中复制了我们的餐厅查找应用。不要忘记在[第15章](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml)中的餐厅查找应用中的`.env`文件中包含你自己的环境变量。在我们继续之前，花点时间来设置和运行它。
- en: The next thing we'll need to do is go to Firebase and configure it to use authentication.
    In the Firebase console, access the Authentication section and set up a sign-in
    method; for example, you can set up Google authentication. There's a list of methods
    you can use here, so go ahead and add one or more.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是去Firebase配置它以使用身份验证。在Firebase控制台中，访问身份验证部分并设置一个登录方法；例如，你可以设置Google身份验证。这里有一系列你可以使用的方法，所以继续添加一个或多个。
- en: 'Next, we''re going to set our rules in the Real-Time Database section, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在实时数据库部分设置我们的规则，如下所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What we're saying here is that the user is allowed to read and write from the
    `restaurants/<user id>` section of your database if the authenticated data is
    not `null` and if the user ID matches the user ID of the location in the database
    to which you are attempting to write and read.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里说的是，如果经过身份验证的数据不是`null`，并且用户ID与你尝试写入和读取的数据库位置的用户ID匹配，那么用户就被允许从你的数据库的`restaurants/<user
    id>`部分读取和写入。
- en: 'Now that our rules are set up, let''s try to save a restaurant:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的规则已经设置好了，让我们尝试保存一个餐厅：
- en: Start the app by executing `npm start` in the root directory and access `http://localhost:3000`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在根目录执行`npm start`来启动应用，并访问`http://localhost:3000`。
- en: Search for a restaurant.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索餐厅。
- en: Attempt to save the restaurant.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试保存这个餐厅。
- en: Witness an epic fail.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 见证一个史诗般的失败。
- en: 'What you should see is an error screen that looks something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个类似以下的错误页面：
- en: '![](assets/5d501fa1-013e-4b2b-9f37-670e0a5b4579.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d501fa1-013e-4b2b-9f37-670e0a5b4579.png)'
- en: Figure 17.4 – Error, error!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4 - 错误，错误！
- en: 'Additionally, if we go to our developer tools and inspect the Network tab''s
    WS tab (**WS** for **WebSockets**, which is how Firebase communicates), we might
    see something like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果我们进入开发者工具并检查网络选项卡的WS选项卡（**WS**代表**WebSockets**，这是Firebase通信的方式），我们可能会看到类似以下的内容：
- en: '![](assets/99c9094a-e1c5-423b-afe7-d2e1453c136d.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/99c9094a-e1c5-423b-afe7-d2e1453c136d.png)'
- en: Figure 17.5 – WebSockets communication inspector
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5 - WebSockets通信检查器
- en: Great! We've now proven that our Firebase rules work and will not allow saving
    to `/restaurants/<user_id>` because we are not authenticated. It's time to set
    that up.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们现在证明了我们的Firebase规则起作用，并且不允许保存到`/restaurants/<user_id>`，因为我们没有经过身份验证。是时候设置这个了。
- en: 'The first thing we''re going to do is change our `App.js` script a bit. There
    are a few different conventions when writing React, and we''re going to continue
    moving forward with the class-based method. Here''s what our `App.js` script will
    look like:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是稍微改变我们的`App.js`脚本。在编写React时有一些不同的约定，我们将继续使用基于类的方法。我们的`App.js`脚本将如下所示：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first piece to notice is that we''ve included a new `npm` module: `react-cookies`.
    While cookies are easy to read from a browser, there are modules that make it
    just a little bit easier. When we retrieve the user''s ID, we''re going to store
    it in a cookie so that the browser remembers that the user is authenticated.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，我们包含了一个新的`npm`模块：`react-cookies`。虽然从浏览器中读取cookie很容易，但有一些模块可以让它变得更容易一点。当我们检索用户的ID时，我们将把它存储在一个cookie中，这样浏览器就记住了用户已经经过身份验证。
- en: Why do we need to use a cookie? If you remember, the web is inherently *stateless*,
    so cookies are one means of transferring information from one part of an application
    to another and from session to session. It's a basic example, but it's important
    to remember not to store any sensitive information in a cookie; a token or username
    is probably the most that you'd want to put in one for an auth workflow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要使用cookie？如果你还记得，网络本质上是*无状态*的，所以cookie是一种从应用程序的一个部分传递信息到另一个部分，从一个会话到另一个会话的手段。这是一个基本的例子，但重要的是要记住不要在cookie中存储任何敏感信息；在身份验证工作流程中，令牌或用户名可能是你想要放入其中的最多的信息。
- en: 'We''ve also introduced a new component, `SignIn`, which is conditionally rendered
    if the user variable doesn''t exist—that is, if the user isn''t logged in. Let''s
    take a look at that component:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还引入了一个新组件`SignIn`，如果用户变量不存在，也就是说，如果用户没有登录，它会有条件地渲染。让我们来看看这个组件：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are two things to note here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两件事需要注意：
- en: We're using `GoogleAuthProvider` for our `SignIn` mechanism. If you chose a
    different authentication method when setting up Firebase, this provider may be
    different, but the rest of the code should be the same or similar.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用`GoogleAuthProvider`来进行我们的`SignIn`机制。如果你在设置Firebase时选择了不同的认证方法，这个提供者可能会有所不同，但代码的其余部分应该是相同或相似的。
- en: The `signInWithPopup` method is copied almost directly from the Firebase documentation.
    The only change made here is to create the `self` variable so that we can maintain
    the scope to `this` inside another method.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signInWithPopup`方法几乎直接从Firebase文档中复制过来。这里唯一的改变是创建`self`变量，这样我们就可以在另一个方法中保持对`this`的作用域。'
- en: When this is rendered, it'll be a simple button stating **Sign In** if the user
    isn't already logged in. It will activate a popup to log in with your Google account,
    and then proceed as before. Not so scary, right?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个被渲染时，如果用户还没有登录，它将是一个简单的按钮，上面写着**登录**。它将激活一个弹出窗口，用你的Google账号登录，然后像以前一样继续。不是很可怕，对吧？
- en: 'Next, we need to deal with our user. Did you notice in `App.js` that we''re
    passing the `user` prop to Finder? That''ll make it easy to pass a reference to
    our user in our basic application, as follows in `Finder.jsx`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要处理我们的用户。你是否注意到在`App.js`中，我们将`user`传递给了Finder？这将使在我们的基本应用程序中轻松地传递一个对我们用户的引用，就像在`Finder.jsx`中一样：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the only method that''s changed in this instance, and if you look closely,
    the change is to destructure `user` from `this.props` and use it in our database
    reference. If you remember our security rules, we''ve had to change our database
    structure a bit to accommodate easy *authorization* of our authenticated user:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在这种情况下唯一改变的方法，如果你仔细看，改变是从`this.props`中解构`user`并在我们的数据库引用中使用它。如果你记得我们的安全规则，我们不得不稍微改变我们的数据库结构，以适应我们认证用户的简单*授权*：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What we stated in our security rules is that the node of the format `restaurants.$uid`
    is where we''ll store each individual user''s restaurants. Our Firebase structure
    now looks something like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在安全规则中所说的是，格式为`restaurants.$uid`的节点是我们将存储每个单独用户的餐厅的地方。我们的Firebase结构现在看起来像这样：
- en: '![](assets/3d6e776b-1525-41b9-8c24-00ab97d6d99e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d6e776b-1525-41b9-8c24-00ab97d6d99e.png)'
- en: Figure 17.6 – An example of how our Firebase structure could look
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6 - 我们的Firebase结构可能是这样的一个例子
- en: In this construction, we see the `TT8PYnjX6FP1YikssoHnINIpukZ2` node inside
    `restaurants`. That's the **uid** (**user ID**) of the authenticated user, and
    within that node, we find the user's saved restaurants.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个结构中，我们看到`restaurants`内部的`TT8PYnjX6FP1YikssoHnINIpukZ2`节点。那是认证用户的**uid**（**用户ID**），在那个节点内，我们找到用户保存的餐厅。
- en: This database structure is simple but provides easy authorization. Our rules
    state "give the user TT8 permission to see and alter the data within their own
    node and nothing more."
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据库结构很简单，但提供了简单的授权。我们的规则规定“给用户TT8权限查看和修改他们自己节点内的数据，仅此而已。”
- en: We've discussed our `.env` variables a bit previously, so let's take a bit of
    a deeper look into them. We'll be deploying our app to Heroku to create a publicly
    visible website.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经讨论了我们的`.env`变量，所以让我们更深入地看一下它们。我们将把我们的应用部署到Heroku，创建一个公开可见的网站。
- en: .gitignore and environment variables for credentials
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .gitignore和凭据的环境变量
- en: As we've been working with `.env` files, I've made it a point to note that these
    files should *never* be committed to the repository. In fact, a good practice
    is to add an entry to your `.gitignore` file before you create any sensitive files
    to ensure you never accidentally commit your credentials. Even if you later delete
    it from your repository, the file history is maintained and you'll have to invalidate
    (or *cycle*) those keys so that they are not exposed in history.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们一直在使用`.env`文件，我特意指出这些文件*绝对不应该*提交到仓库中。事实上，一个好的做法是在创建任何敏感文件之前向你的`.gitignore`文件添加一个条目，以确保你永远不会意外提交你的凭据。即使你后来从仓库中删除它，文件历史仍然保留，你将不得不使这些密钥失效（或*循环使用*），以便它们不会在历史中暴露出来。
- en: 'While a full section on Git is beyond the scope of our work here, let''s take
    a look at an example of a `.gitignore` file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Git的完整部分超出了我们在这里的工作范围，但让我们看一个`.gitignore`文件的例子：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Several of these are entries created by the `create-react-app` scaffold. Note
    specifically `.env*`. The asterisk (or *star*, or *splat*) is a regular expression
    wildcard to specify that any file that starts with `.env` is ignored. You can
    have `.env.prod` and it will be ignored. **Be sure to ignore your credential files!**
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 其中有几个是由`create-react-app`脚手架创建的条目。特别注意`.env*`。星号（或*星号*，或*通配符*）是一个正则表达式通配符，指定任何以`.env`开头的文件都被忽略。你可以有`.env.prod`，它也会被忽略。**一定要忽略你的凭据文件！**
- en: I also like to change `/node_modules` to `*node_modules*` in case you have subdirectories
    with their own node modules.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我还喜欢将`/node_modules`改为`*node_modules*`，以防你有自己的子目录和它们自己的node模块。
- en: 'Storing variables in `.env` files is convenient, but there are also in-memory
    environment variables that can be created. To demonstrate this functionality,
    we''re going to deploy our project to Heroku, a cloud application platform. Let''s
    get set up:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.env`文件中存储变量很方便，但也可以创建内存中的环境变量。为了演示这个功能，我们将把项目部署到Heroku，一个云应用平台。让我们开始吧：
- en: Create a new account at [https://heroku.com](https://heroku.com).
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://heroku.com](https://heroku.com)创建一个新账户。
- en: Install the Heroku **Command-Line Interface** (**CLI**) as per the documentation
    provided. Be sure to follow the login instructions as well.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据提供的文档安装Heroku **命令行界面**（**CLI**）。一定要遵循登录说明。
- en: 'Initialize a new repository in the restaurant finder directory: `git init`.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在餐厅查找器目录中初始化一个新的仓库：`git init`。
- en: 'Execute `heroku create --ssh-git`. It''ll provide the Git URL of your Heroku
    endpoint, as well as the `https://` URL. Go ahead and access the HTTPS URL. You
    should see a welcome message:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`heroku create --ssh-git`。它会提供你的Heroku端点的Git URL，以及`https://` URL。继续访问HTTPS
    URL。你应该会看到一个欢迎消息：
- en: '![](assets/02fa5a98-733f-46d6-a767-9c4d892a0684.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02fa5a98-733f-46d6-a767-9c4d892a0684.png)'
- en: Figure 17.7 – Hooray! We have a blank Heroku application!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7 - 哦耶！我们有一个空白的Heroku应用程序！
- en: We can now continue with organizing our application's logic.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续组织我们应用的逻辑。
- en: Reorganizing our application
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新组织我们的应用
- en: 'The next thing we''re going to do that''s different than in [Chapter 15](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml), *Combining
    Node.js with the Frontend*, is reorganize our files just a touch. This isn''t
    completely necessary, but it provides a nice logical distinction between the frontend
    and backend, which is especially useful when deploying production-level code.
    There''s an additional semantic difference between our previous application and
    what we''re going to create here: we''re not going to serve a running development
    React application, but rather a static production build.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要做的与[第15章](d2381f64-cc55-4359-8edf-d51da338b4e1.xhtml)中的*将Node.js与前端结合*不同的事情，就是稍微重新组织我们的文件。这并不是完全必要的，但在部署生产级别的代码时，它提供了前端和后端之间的一个很好的逻辑区分。我们之前的应用和我们要在这里创建的应用之间还有一个语义上的区别：我们不会提供一个正在运行的开发React应用，而是一个静态的生产版本。
- en: 'If you recall, our previous restaurant had a structure that looked like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，我们之前的餐厅结构是这样的：
- en: '![](assets/744d7cfd-6930-474e-b548-d96918240d23.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/744d7cfd-6930-474e-b548-d96918240d23.png)'
- en: Figure 17.8 – Proxy versus apps, explained.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.8 – 代理与应用的区别，解释。
- en: We were actually using the React app as the web server and proxying through
    it to the Express backend in order to use the Yelp API. Now, however, we're going
    to use Express as the main web server and serve a production-level build of our
    React application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前实际上是使用React应用作为Web服务器，并通过它代理到Express后端，以便使用Yelp API。然而，现在我们将使用Express作为主要的Web服务器，并提供一个React应用的生产级别构建。
- en: 'Our application logic previously looked as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的应用逻辑如下：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We''re going to turn that logic on its head and state the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要颠倒这个逻辑，并声明以下内容：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s what to do:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是要做的事情：
- en: Create a new `client` directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`client`目录。
- en: Delete the `yarn.lock` file if you still have it. We're going to focus on using
    NPM instead of `yarn`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还有`yarn.lock`文件，请删除它。我们将专注于使用NPM而不是`yarn`。
- en: Move all of the files into the client directory, except for the API directory.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有文件移动到client目录中，除了API目录。
- en: 'Next, we''re going to make a new `package.json` at our root level: `npm install
    dotenv express yelp-fusion`.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们要在根目录下创建一个新的`package.json`：`npm install dotenv express yelp-fusion`。
- en: If you noticed, we also installed Express, which we didn't do before. We're
    going to use this to make routing our requests much easier.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，我们还安装了Express，这是之前没有做的。我们将使用它来更轻松地路由我们的请求。
- en: 'In our `package.json`, at the *root* level, add these scripts:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`package.json`中，在*根*级别，添加这些脚本：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since we're dealing with Heroku, we can also remove the `proxy` line from `package.json`,
    as everything will be running on the same server and will not need a proxy. Now,
    how about the `postinstall` line in our `package.json`? What we're going to do
    is make a *production-ready* build of our application. `create-react-app` gives
    us that functionality for free with the `npm run build` script. When we deploy
    to Heroku, it will run `npm install` and then, `postinstall`, to create a production
    build of our React application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在处理Heroku，我们还可以从`package.json`中删除`proxy`行，因为一切都将在同一服务器上运行，不需要代理。现在，我们的`package.json`中的`postinstall`行怎么样？我们要做的是创建我们应用的*生产就绪*版本。`create-react-app`通过`npm
    run build`脚本免费为我们提供了这个功能。当我们部署到Heroku时，它将运行`npm install`，然后运行`postinstall`，以创建我们的React应用的生产版本。
- en: 'We''re now ready to add a new piece of metadata to our project so that Heroku
    will serve up our application: the **Procfile**.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备向我们的项目添加一个新的元数据，以便Heroku可以提供我们的应用：**Procfile**。
- en: 'A Procfile will tell Heroku what to do with our code. Your Procfile will look
    like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Procfile会告诉Heroku如何处理我们的代码。你的Procfile会是这样的：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In essence, all it''s doing is telling Heroku where to begin the program: run
    `npm start`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，它所做的就是告诉Heroku从哪里开始运行程序：运行`npm start`。
- en: 'Our directory structure should now look like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目录结构现在应该是这样的：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our next important step is to modify our `api.js` file, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的重要步骤是修改我们的`api.js`文件，如下所示：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So far, this looks pretty similar to before, except for the addition of Express.
    But take a look at the next line:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这看起来与之前相似，只是增加了Express。但是看看接下来的一行：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Aha! Here''s our secret sauce: this line states to use the `client/build` directory
    as static assets as opposed to Node.js code.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！这是我们的秘密酱：这行表示使用`client/build`目录作为静态资源，而不是Node.js代码。
- en: 'Continuing on, we''re defining our Express routing to handle requests of the
    format `/search`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 继续，我们正在定义我们的Express路由来处理格式为`/search`的请求：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For the next part of our secret sauce, if the route does *not* match `/search`,
    send it along to the static React build:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们秘密酱的下一部分，如果路由*不*匹配`/search`，将其发送到静态的React构建：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Add everything to your Git repository: `git add`. Now you can execute `git status`
    to be sure that your `.env` file is not *included*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容添加到你的Git仓库：`git add`。现在你可以执行`git status`来确保你的`.env`文件没有被*包含*。
- en: 'Next, commit your code: `git commit -m "Initial commit`. If you need some help
    with Git, the Heroku documentation provides references. Next, deploy to Heroku:
    `git push heroku master`. This will take a little while, as Heroku is going to
    not only deploy your code with Git but also create a production build of your
    code.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，提交你的代码：`git commit -m "Initial commit`。如果你需要关于Git的帮助，Heroku文档提供了参考资料。接下来，部署到Heroku：`git
    push heroku master`。这会花一些时间，因为Heroku不仅会使用Git部署你的代码，还会创建你的代码的生产版本。
- en: 'Access the URL provided by the build script and hopefully, you''ll see a fantastic
    error message:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 访问构建脚本提供的URL，希望你会看到一个很棒的错误消息：
- en: '![](assets/43161e56-8693-4b56-806a-6bb334d483a3.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43161e56-8693-4b56-806a-6bb334d483a3.png)'
- en: Figure 17.9 – Oh no! An error! Actually it's not a bad thing!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.9 – 哦不！一个错误！实际上这不是坏事！
- en: 'Great! What this is telling us is that the application is running, but we don''t
    have some important pieces: our environment variables. Execute `heroku config:set
    <entry>` for each entry in your `.env` files (both the root and in `client`).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！这告诉我们的是应用程序正在运行，但我们缺少一些重要的部分：我们的环境变量。对您`.env`文件中的每个条目执行`heroku config:set
    <entry>`（根目录和`client`中）。
- en: When you refresh the page, you'll see the Sign In button. However, if you click
    it, nothing will happen. It may spawn a popup for a second, but it won't bring
    up the authentication window. We need to go back to the Firebase console to add
    our Firebase URL as an *authorized* URL.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您刷新页面时，您将看到“登录”按钮。但是，如果您单击它，将不会发生任何事情。它可能会在一秒钟内弹出一个弹出窗口，但不会弹出身份验证窗口。我们需要返回到Firebase控制台，将我们的Firebase
    URL添加为*已授权*URL。
- en: In the Firebase console, navigate to the authentication section and enter your
    Heroku URL to the Authorized domains section. Return to your Heroku app, refresh,
    and lo and behold! The authentication panel works. If you go to Saved!, you'll
    even see your saved restaurants.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firebase控制台中，转到身份验证部分，并将您的Heroku URL输入到已授权域部分。返回到您的Heroku应用程序，刷新，然后瞧！身份验证面板可以正常工作。如果您转到Saved！，甚至会看到您保存的餐馆。
- en: 'That wasn''t so bad! Heroku''s method of storing environment variables doesn''t
    vary too much from our `.env` file, but it handles it for us without needing to
    do much work. However, there''s one last piece we''ll need to configure: our search
    *does not work*. If you look at the console error messages, you should see a note
    indicating that a connection to `localhost:3000` is refused. We need to take one
    last step to abstract our code away from using `localhost`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不难！Heroku存储环境变量的方法与我们的`.env`文件并没有太大的不同，但它可以在不需要太多工作的情况下为我们处理。但是，我们还需要配置最后一个部分：我们的搜索*不起作用*。如果您查看控制台错误消息，您应该会看到一条说明拒绝连接到`localhost:3000`的提示。我们需要采取最后一步来将我们的代码从使用`localhost`抽象出来。
- en: 'In `src/components/search/Search.jsx`, you may recognize this method:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components/search/Search.jsx`中，您可能会认出这种方法：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'OK! We''ve hardcoded our `fetch` call to `localhost` and our proxied path.
    Let''s change it to the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！我们已经将我们的`fetch`调用硬编码为`localhost`和我们的代理路径。让我们将其更改为以下内容：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Commit your changes and push to Heroku again. As you're developing, you can
    also use `heroku local web` to spawn a browser and test your changes without committing
    and deploying.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 提交您的更改并再次推送到Heroku。在开发过程中，您还可以使用`heroku local web`来生成一个浏览器并测试您的更改，而无需提交和部署。
- en: With any luck, you should have a fully functional front-to-back application
    with credentials secured in Heroku environment variables! Congratulations!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的话，您应该拥有一个完全功能的前后端应用程序，并且凭据已经安全存储在Heroku环境变量中！恭喜！
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned about authentication, authorization, and the difference
    between the two. Remember that it''s usually not enough to only do one or the
    other: most applications that need credentials need a combination of both.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了身份验证、授权以及两者之间的区别。请记住，通常仅执行其中一个是不够的：大多数需要凭据的应用程序需要两者的组合。
- en: 'Firebase is a useful cloud storage database that you can use with existing
    login systems and can not only be useful as a development resource but can also scale
    to production-level usage. Lastly, remember these points: because JavaScript is
    client-side, we have to protect sensitive information in different manners than
    a purely backend application:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase是一个有用的云存储数据库，您可以将其与现有的登录系统一起使用，不仅可以作为开发资源，还可以扩展到生产级别的使用。最后，请记住这些要点：因为JavaScript是客户端的，我们必须以不同的方式保护敏感信息，而不是纯粹的后端应用程序：
- en: Authenticate and authorize to determine who can use which resources.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行身份验证和授权以确定谁可以使用哪些资源。
- en: Separate our sensitive data from our public data.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的敏感数据与我们的公共数据分开。
- en: '**Never commit keys and sensitive data to a repository!**'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**永远不要将密钥和敏感数据提交到存储库中！**'
- en: It's up to all of us to be good digital citizens, but there are bad actors out
    there. Protect yourself and your code!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每个人都有责任成为良好的数字公民，但也存在不良行为者。保护自己和您的代码！
- en: In the next chapter, we'll be tying together Node.js and MongoDB to persist
    our data. We'll be revisiting our starship game, but this time with persistent
    storage.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把Node.js和MongoDB联系在一起，以持久化我们的数据。我们将重新审视我们的星际飞船游戏，但这次将使用持久存储。
