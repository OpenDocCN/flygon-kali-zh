["```\n{\n  Source:      \"sysfs\",\n  Destination: \"/sys\",\n  Device:      \"sysfs\",\n  Flags:       defaultMountFlags | syscall.MS_RDONLY,\n},\n```", "```\n{\n  Source:      \"proc\",\n  Destination: \"/proc\",\n  Device:      \"proc\",\n  Flags:       defaultMountFlags,\n},\n```", "```\nReadonlyPaths: []string{\n  \"/proc/asound\",\n  \"/proc/bus\",\n  \"/proc/fs\",\n  \"/proc/irq\",\n  \"/proc/sys\",\n  \"/proc/sysrq-trigger\",\n}\n```", "```\n{\n  Source:      \"devpts\",\n  Destination: \"/dev/pts\",\n  Device:      \"devpts\",\n  Flags:       syscall.MS_NOSUID | syscall.MS_NOEXEC,\n  Data:        \"newinstance,ptmxmode=0666,mode=0620,gid=5\",\n},\n```", "```\n{\n  Source:      \"cgroup\",\n  Destination: \"/sys/fs/cgroup\",\n  Device:      \"cgroup\",\n  Flags:       defaultMountFlags | syscall.MS_RDONLY,\n},\n```", "```\n    **docker run --cap-add=NET_ADMIN busybox sh -c \"ip link eth0 down\"**\n\n    ```", "```\n    **docker run --cap-drop=CHOWN ...**\n\n    ```", "```\n    **docker run --cap-add=ALL --cap-drop=MKNOD ...**\n\n    ```", "```\n    Capabilities: []string{\n      \"CHOWN\",\n      \"DAC_OVERRIDE\",\n      \"FSETID\",\n      \"FOWNER\",\n      \"MKNOD\",\n      \"NET_RAW\",\n      \"SETGID\",\n      \"SETUID\",\n      \"SETFCAP\",\n      \"SETPCAP\",\n      \"NET_BIND_SERVICE\",\n      \"SYS_CHROOT\",\n      \"KILL\",\n      \"AUDIT_WRITE\",\n    },\n    ```", "```\n    **$ sudo yum install -y git**\n    **$ git clone https://github.com/awslabs/ecs-demo-php-simple-app**\n\n    ```", "```\n    **$ cd ecs-demo-php-simple-app**\n\n    ```", "```\n    **$ cat Dockerfile**\n\n    ```", "```\n    **$ docker build -t my-dockerhub-username/amazon-ecs-sample.**\n\n    ```", "```\n    **$ docker login**\n\n    ```", "```\n    **$ docker info**\n\n    ```", "```\n    **$ docker push my-dockerhub-username/amazon-ecs-sample**\n\n    ```", "```\n    **$ mkdir proxy-container**\n    **$ cd proxy-container**\n    **$ nano Dockerfile**\n    **FROM ubuntu**\n    **RUN apt-get update && apt-get install -y nginx**\n    **COPY nginx.conf /etc/nginx/nginx.conf**\n    **RUN echo \"daemon off;\" >> /etc/nginx/nginx.conf**\n    **EXPOSE 80**\n    **CMD service nginx start**\n\n    ```", "```\n    **user www-data;**\n    **worker_processes 4;**\n    **pid /var/run/nginx.pid;**\n\n    **events {**\n     **worker_connections 768;**\n     **# multi_accept on;**\n    **}**\n\n    **http {**\n     **server {**\n     **listen           80;**\n\n     **# Proxy pass to servlet container**\n     **location / {**\n     **proxy_pass      http://application-container:80;**\n     **}**\n     **}**\n    **}**\n\n    ```", "```\n    **$ docker build -t my-dockerhub-username/proxy-image.**\n    **$ docker push my-dockerhub-username/proxy-image**\n\n    ```", "```\n    **Proxy-container:**\n    **Container Name: proxy-container**\n    **Image: username/proxy-image**\n    **Memory: 256**\n    **Port Mappings**\n    **Host port: 80**\n    **Container port: 80**\n    **Protocol: tcp**\n    **CPU: 256**\n    **Links: application-container**\n    **Application container:**\n    **Container Name: application-container**\n    **Image: username/amazon-ecs-sample**\n    **Memory: 256**\n    **CPU: 256**\n\n    ```", "```\n**# ip netns add netns1**\n\n```", "```\n**# ip netns exec netns1 ip link list**\n**1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00**\n\n```", "```\n**# ip netns delete netns1**\n\n```", "```\n**# ip netns exec netns1 ping 127.0.0.1**\n**connect: Network is unreachable**\n\n```", "```\n**# pid=`docker inspect -f '{{.State.Pid}}' $container_id`**\n**# ln -s /proc/$pid/ns/net /var/run/netns/$container_id**\n\n```", "```\n**# ip netns exec netns1 ip link set dev lo up**\n**# ip netns exec netns1 ping 127.0.0.1**\n **PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.**\n**64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.052 ms**\n**64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.042 ms**\n**64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.044 ms**\n**64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.031 ms**\n**64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.042 ms**\n\n```", "```\n**# ip link add veth0 type veth peer name veth1**\n**# ip link set veth1 netns netns1**\n\n```", "```\n**# ip netns exec netns1 ifconfig veth1 10.0.0.1/24 up**\n**# ifconfig veth0 10.0.0.2/24 up**\n\n```", "```\n**# ping 10.0.0.1**\n**# ip netns exec netns1 ping 10.0.0.2**\n\n```", "```\n**# ip netns exec netns1 route**\n**Kernel IP routing table**\n**Destination   Gateway    Genmask        Flags    Metric Ref    Use Iface**\n**10.0.0.0         *      255.255.255.0     U        0  0  0       veth1**\n\n**# ip netns exec netns1 iptables -L**\n**Chain INPUT (policy ACCEPT)**\n**target     prot opt source               destination**\n**Chain FORWARD (policy ACCEPT)**\n**target     prot opt source               destination**\n**Chain OUTPUT (policy ACCEPT)**\n**target     prot opt source               destination**\n\n```", "```\n**docker run -it --net=host ubuntu /bin/bash**\n**$ ifconfig**\n**docker0   Link encap:Ethernet  HWaddr 02:42:1d:36:0d:0d**\n **inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0**\n **inet6 addr: fe80::42:1dff:fe36:d0d/64 Scope:Link**\n **UP BROADCAST MULTICAST  MTU:1500  Metric:1**\n **RX packets:24 errors:0 dropped:0 overruns:0 frame:0**\n **TX packets:38 errors:0 dropped:0 overruns:0 carrier:0**\n **collisions:0 txqueuelen:0**\n **RX bytes:1608 (1.6 KB)  TX bytes:5800 (5.8 KB)**\n\n**eno16777736 Link encap:Ethernet  HWaddr 00:0c:29:02:b9:13**\n **inet addr:192.168.218.129  Bcast:192.168.218.255  Mask:255.255.255.0**\n **inet6 addr: fe80::20c:29ff:fe02:b913/64 Scope:Link**\n **UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1**\n **RX packets:4934 errors:0 dropped:0 overruns:0 frame:0**\n **TX packets:4544 errors:0 dropped:0 overruns:0 carrier:0**\n **collisions:0 txqueuelen:1000**\n **RX bytes:2909561 (2.9 MB)  TX bytes:577079 (577.0 KB)**\n\n**$ docker ps -q | xargs docker inspect --format '{{ .Id }}: NetworkMode={{ .HostConfig.NetworkMode }}'**\n**52afb14d08b9271bd96045bebd508325a2adff98dbef8c10c63294989441954d: NetworkMode=host**\n\n```", "```\n**$ docker ps -q | xargs docker inspect --format '{{ .Id }}: NetworkMode={{ .HostConfig.NetworkMode }}'**\n**1aca7fe47882da0952702c383815fc650f24da2c94029b5ad8af165239b78968: NetworkMode=default**\n\n```", "```\n**$ pip install nsenter**\n\n```", "```\n**$ sudo nsenter --net --target=PID /bin/ip a**\n**1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default**\n **link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00**\n **inet 127.0.0.1/8 scope host lo**\n **valid_lft forever preferred_lft forever**\n **inet6 ::1/128 scope host**\n **valid_lft forever preferred_lft forever**\n**14: eth0: <BROADCAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default**\n **link/ether 02:42:ac:11:00:06 brd ff:ff:ff:ff:ff:ff**\n **inet 172.17.0.6/16 scope global eth0**\n **valid_lft forever preferred_lft forever**\n **inet6 fe80::42:acff:fe11:6/64 scope link**\n **valid_lft forever preferred_lft forever**\n\n```", "```\n    **$ docker run -d --name=nginx -t nginx**\n\n    ```", "```\n    **PID=$(docker inspect --format {{.State.Pid}} nginx)**\n\n    ```", "```\n    **$ nsenter --target $PID --uts --ipc --net \u2013pid**\n\n    ```", "```\n**import subprocess**\n**from nsenter import Namespace**\n**with Namespace(mypid, 'net'):**\n**# output network interfaces as seen from within the mypid's net NS:**\n **subprocess.check_output(['ip', 'a'])**\n\n```", "```\n**# mount -t tmpfs cgroup_root /sys/fs/cgroup**\n\n```", "```\n**# mkdir /sys/fs/cgroup/cpuset**\n**# mount -t cgroup -ocpuset cpuset /sys/fs/cgroup/cpuset**\n**# cd /sys/fs/cgroup/cpuset**\n**# mkdir Charlie**\n**# cd Charlie**\n**# ls**\n**cgroup.clone_children  cpuset.cpu_exclusive  cpuset.mem_hardwall     cpuset.memory_spread_page  cpuset.sched_load_balance  tasks**\n**cgroup.event_control   cpuset.cpus           cpuset.memory_migrate   cpuset.memory_spread_slab  cpuset.sched_relax_domain_level**\n**cgroup.procs           cpuset.mem_exclusive  cpuset.memory_pressure  cpuset.mems                notify_on_release**\n\n```", "```\n**# /bin/echo 2-3 > cpuset.cpus**\n**# /bin/echo 0 > cpuset.mems**\n**# /bin/echo $$ > tasks**\n\n```", "```\n**# cat /proc/self/cgroup**\n**11:name=systemd:/user/1000.user/c2.session**\n**10:hugetlb:/user/1000.user/c2.session**\n**9:perf_event:/user/1000.user/c2.session**\n**8:blkio:/user/1000.user/c2.session**\n**7:freezer:/user/1000.user/c2.session**\n**6:devices:/user/1000.user/c2.session**\n**5:memory:/user/1000.user/c2.session**\n**4:cpuacct:/user/1000.user/c2.session**\n**3:cpu:/user/1000.user/c2.session**\n**2:cpuset:/Charlie**\n\n```", "```\n**# /bin/echo PID > tasks**\n\n```", "```\n**# /bin/echo PID1 > tasks**\n**# /bin/echo PID2 > tasks**\n**...**\n**# /bin/echo PIDn > tasks**\n\n```", "```\n**# echo 0 > tasks**\n\n```", "```\n**type Manager interface {**\n **// Apply cgroup configuration to the process with the specified pid**\n **Apply(pid int) error**\n **// Returns the PIDs inside the cgroup set**\n **GetPids() ([]int, error)**\n **// Returns statistics for the cgroup set**\n **GetStats() (*Stats, error)**\n **// Toggles the freezer cgroup according with specified state**\n **Freeze(state configs.FreezerState) error**\n **// Destroys the cgroup set**\n **Destroy() error**\n **// Paths maps cgroup subsystem to path at which it is mounted.**\n **// Cgroups specifies specific cgroup settings for the various subsystems**\n **// Returns cgroup paths to save in a state file and to be able to**\n **// restore the object later.**\n **GetPaths() map[string]string**\n **// Set the cgroup as configured.**\n **Set(container *configs.Config) error**\n**}**\n\n```", "```\n    **$ git clone https://github.com/jfrazelle/bane**\n\n    ```", "```\n    **$ go get github.com/BurntSushi/toml**\n\n    ```", "```\n    **$ go install**\n\n    ```", "```\n    **Name = \"nginx-sample\"**\n    **[Filesystem]**\n    **# read only paths for the container**\n    **ReadOnlyPaths = [**\n     **\"/bin/**\",**\n     **\"/boot/**\",**\n     **\"/dev/**\",**\n     **\"/etc/**\",**\n     **\u2026**\n    **]**\n    **AllowExec = [**\n     **\"/usr/sbin/nginx\"**\n    **]**\n    **# denied executable files**\n    **DenyExec = [**\n     **\"/bin/dash\",**\n     **\"/bin/sh\",**\n     **\"/usr/bin/top\"**\n    **]**\n\n    ```", "```\n    **$ sudo bane sample.toml**\n    **# Profile installed successfully you can now run the profile with # `docker run --security-opt=\"apparmor:docker-nginx-sample\"`**\n\n    ```", "```\n    **$ docker run --security-opt=\"apparmor:docker-nginx-sample\" -p 80:80 --rm -it nginx bash**\n\n    ```", "```\n    **$ sudo invoke-rc.d apparmor reload**\n\n    ```", "```\n    **ubuntu@ubuntu:~/go/src/github.com$ docker run --security-opt=\"apparmor:docker-nginx-sample\" -p 80:80 --rm -it nginx bash**\n    **root@84d617972e04:/# ping 8.8.8.8**\n    **ping: Lacking privilege for raw socket.**\n\n    ```", "```\n**$ apt-get install auditd**\n**Reading package lists... Done**\n**Building dependency tree**\n**Reading state information... Done**\n**The following extra packages will be installed:**\n **libauparse0**\n**Suggested packages:**\n **audispd-plugins**\n**The following NEW packages will be installed:**\n **auditd libauparse0**\n**0 upgraded, 2 newly installed, 0 to remove and 50 not upgraded.**\n**Processing triggers for libc-bin (2.21-0ubuntu4) ...**\n**Processing triggers for ureadahead (0.100.0-19) ...**\n**Processing triggers for systemd (225-1ubuntu9) ...**\n\n```", "```\n**$ cd /etc/audit/**\n**$ ls**\n**audit.log**\n**$ nano audit.log**\n**$ rm -rf audit.log**\n\n```", "```\n**$ nano audit.rules**\n**-w /usr/bin/docker -k docker**\n**$ service auditd restart**\n**$ ausearch -k docker**\n**<no matches>**\n**$ docker ps**\n**CONTAINER ID    IMAGE      COMMAND    CREATED    STATUS   PORTS     NAMES**\n**$ ausearch -k docker**\n**----**\n**time->Fri Nov 27 02:29:50 2015**\n**type=PROCTITLE msg=audit(1448620190.716:79): proctitle=646F636B6572007073**\n**type=PATH msg=audit(1448620190.716:79): item=1 name=\"/lib64/ld-linux-x86-64.so.2\" inode=398512 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL**\n**type=PATH msg=audit(1448620190.716:79): item=0 name=\"/usr/bin/docker\" inode=941134 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL**\n**type=CWD msg=audit(1448620190.716:79):  cwd=\"/etc/audit\"**\n**type=EXECVE msg=audit(1448620190.716:79): argc=2 a0=\"docker\" a1=\"ps\"**\n**type=SYSCALL msg=audit(1448620190.716:79): arch=c000003e syscall=59 success=yes exit=0 a0=ca1208 a1=c958c8 a2=c8**\n\n```", "```\n**$ docker inspect centos**\n**[**\n **{**\n **\"Id\": \"e9fa5d3a0d0e19519e66af2dd8ad6903a7288de0e995b6eafbcb38aebf2b606d\",**\n **\"RepoTags\": [**\n **\"centos:latest\"**\n **],**\n **\"RepoDigests\": [],**\n **\"Parent\": \"c9853740aa059d078b868c4a91a069a0975fb2652e94cc1e237ef9b961afa572\",**\n **\"Comment\": \"\",**\n **\"Created\": \"2015-10-13T23:29:04.138328589Z\",**\n **\"Container\": \"eaa200e2e187340f0707085b9b4eab5658b13fd190af68c71a60f6283578172f\",**\n **\"ContainerConfig\": {**\n **\"Hostname\": \"7aa5783a47d5\",**\n **\"Domainname\": \"\",**\n **\"User\": \"\",**\n **contd**\n\n```", "```\n**$ cd**\n**$ mkdir test-container**\n**$ cd test-container/**\n**$ cat Dockerfile**\n**FROM centos:latest**\n**RUN useradd test**\n**USER test**\n**root@ubuntu:~/test-container# docker build -t vkohli .**\n**Sending build context to Docker daemon 2.048 kB**\n**Step 1 : FROM centos:latest**\n **---> e9fa5d3a0d0e**\n**Step 2 : RUN useradd test**\n **---> Running in 0c726d186658**\n **---> 12041ebdfd3f**\n**Removing intermediate container 0c726d186658**\n**Step 3 : USER test**\n **---> Running in 86c5e0599c72**\n **---> af4ba8a0fec5**\n**Removing intermediate container 86c5e0599c72**\n**Successfully built af4ba8a0fec5**\n**$ docker images | grep vkohli**\n**vkohli    latest     af4ba8a0fec5      9 seconds ago     172.6 MB**\n\n```", "```\n**$ docker run -it vkohli /bin/bash**\n**[test@2ff11ee54c5f /]$ whoami**\n**test**\n**[test@2ff11ee54c5f /]$ exit**\n**$ docker inspect vkohli**\n**[**\n **{**\n **\"Id\": \"af4ba8a0fec558d68b4873e2a1a6d8a5ca05797e0bfbab0772bcedced15683ea\",**\n **\"RepoTags\": [**\n **\"vkohli:latest\"**\n **],**\n **\"RepoDigests\": [],**\n **\"Parent\": \"12041ebdfd3f38df3397a8961f82c225bddc56588e348761d3e252eec868d129\",**\n **\"Comment\": \"\",**\n **\"Created\": \"2015-11-27T14:10:49.206969614Z\",**\n **\"Container\": \"86c5e0599c72285983f3c5511fdec940f70cde171f1bfb53fab08854fe6d7b12\",**\n **\"ContainerConfig\": {**\n **\"Hostname\": \"7aa5783a47d5\",**\n **\"Domainname\": \"\",**\n **\"User\": \"test\",**\n **Contd..**\n\n```", "```\n**$ docker run -ti -v /run/systemd:/run/systemd centos /bin/bash**\n**[root@1aca7fe47882 /]# systemctl status docker**\n**docker.service - Docker Application Container Engine**\n **Loaded: loaded (/lib/systemd/system/docker.service; enabled)**\n **Active: active (running) since Sun 2015-11-29 12:22:50 UTC; 21min ago**\n **Docs: https://docs.docker.com**\n **Main PID: 758**\n **CGroup: /system.slice/docker.service**\n**[root@1aca7fe47882 /]# shutdown**\n\n```", "```\n**$ docker ps -q | xargs docker inspect --format '{{ .Id }}: Volumes={{ .Volumes }} VolumesRW={{ .VolumesRW }}'**\n\n```", "```\n**$ docker run -it centos /bin/bash**\n**[root@7e1b1fa4fb89 /]#  sysctl -w net.ipv4.ip_forward=0**\n**sysctl: setting key \"net.ipv4.ip_forward\": Read-only file system**\n**$ docker run --privileged -it centos /bin/bash**\n**[root@930aaa93b4e4 /]#  sysctl -a | wc -l**\n**sysctl: reading key \"net.ipv6.conf.all.stable_secret\"**\n**sysctl: reading key \"net.ipv6.conf.default.stable_secret\"**\n**sysctl: reading key \"net.ipv6.conf.eth0.stable_secret\"**\n**sysctl: reading key \"net.ipv6.conf.lo.stable_secret\"**\n**638**\n**[root@930aaa93b4e4 /]# sysctl -w net.ipv4.ip_forward=0**\n**net.ipv4.ip_forward = 0**\n\n```", "```\n**$ docker ps -q | xargs docker inspect --format '{{ .Id }}: Privileged={{ .HostConfig.Privileged }}'**\n**930aaa93b4e44c0f647b53b3e934ce162fbd9ef1fd4ec82b826f55357f6fdf3a: Privileged=true**\n\n```"]