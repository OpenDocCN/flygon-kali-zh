["```java\npublic abstract class VirtualAnimal {\n    public final int age;\n\n    public VirtualAnimal(int age) {\n        this.age = age;\n        System.out.println(\"VirtualAnimal created.\");\n    }\n\n    public abstract boolean isAbleToFly();\n\n    public abstract boolean isRideable();\n\n    public abstract boolean isHerbivore();\n\n    public abstract boolean isCarnivore();\n\n    public abstract int getAverageNumberOfBabies();\n\n    public abstract String getBaby();\n\n    public abstract String getAsciiArt();\n\n    public void printAsciiArt() {\n        System.out.println(getAsciiArt());\n    }\n\n    public void printAverageNumberOfBabies() {\n        System.out.println(new String(\n            new char[getAverageNumberOfBabies()]).replace(\n                \"\\0\", getBaby()));\n    }\n\n    public void printAge() {\n        System.out.println(\n            String.format(\"I am %d years old\", age));\n    }\n\n    public boolean isYoungerThan(VirtualAnimal otherAnimal) {\n        return age < otherAnimal.age; \n    }\n\n    public boolean isOlderThan(VirtualAnimal otherAnimal) {\n        return age > otherAnimal.age;\n    }\n}\n```", "```java\nVirtualAnimal virtualAnimal1 = new VirtualAnimal(5);\n```", "```java\npublic abstract class VirtualMammal extends VirtualAnimal {\n    public boolean isPregnant;\n\n    public VirtualMammal(int age, boolean isPregnant) {\n super(age);\n        this.isPregnant = isPregnant;\n        System.out.println(\"VirtualMammal created.\");\n    }\n\n    public VirtualMammal(int age) {\n        this(age, false);\n    }\n}\n```", "```java\npublic abstract class VirtualDomesticMammal extends VirtualMammal {\n    public final String name;\n    public String favoriteToy;\n\n    public VirtualDomesticMammal(\n        int age, \n        boolean isPregnant, \n        String name, \n        String favoriteToy) {\n super(age, isPregnant);\n        this.name = name;\n        this.favoriteToy = favoriteToy;\n        System.out.println(\"VirtualDomesticMammal created.\");\n    }\n\n    public VirtualDomesticMammal(\n        int age, \n        String name, \n        String favoriteToy) {\n        this(age, false, name, favoriteToy);\n    }\n\n    public void talk() {\n        System.out.println(\n            String.format(\"%s: says something\", name));\n    }\n}\n```", "```java\nVirtualHorse abstract class that extends the VirtualDomesticMammal class. Note the abstract class keywords followed by the class name, VirtualHorse, the extends keyword, and VirtualDomesticMammal, that is, the superclass. We will split the code for this class in many snippets to make it easier to analyze. The code file for the sample is included in the java_9_oop_chapter_06_01 folder, in the example06_05.java file.\n```", "```java\npublic abstract class VirtualHorse extends VirtualDomesticMammal {\n    public VirtualHorse(\n        int age, \n        boolean isPregnant, \n        String name, \n        String favoriteToy) {\n super(age, isPregnant, name, favoriteToy);\n        System.out.println(\"VirtualHouse created.\");        \n    }\n\n    public VirtualHorse(\n        int age, \n        String name, \n        String favoriteToy) {\n        this(age, false, name, favoriteToy);\n    }\n\n    public boolean isAbleToFly() {\n        return false;\n    }\n\n    public boolean isRideable() {\n        return true;\n    }\n\n    public boolean isHerbivore() {\n        return true;\n    }\n\n    public boolean isCarnivore() {\n        return false;\n    }\n\n    public int getAverageNumberOfBabies() {\n        return 1;\n    }\n```", "```java\nVirtualHorse abstract class that extends the VirtualDomesticMammal class. The code file for the sample is included in the java_9_oop_chapter_06_01 folder, in the example06_05.java file.\n```", "```java\n    public abstract String getBreed();\n\n    public void printBreed() {\n        System.out.println(getBreed());\n    }\n\n    protected void printSoundInWords(\n        String soundInWords, \n        int times, \n        VirtualDomesticMammal otherDomesticMammal,\n        boolean isAngry) {\n        String message = String.format(\"%s%s: %s%s\",\n            name,\n            otherDomesticMammal == null ? \n                \"\" : String.format(\" to %s \", otherDomesticMammal.name),\n            isAngry ?\n                \"Angry \" : \"\",\n            new String(new char[times]).replace(\"\\0\", soundInWords));\n        System.out.println(message);\n    }\n```", "```java\nVirtualHorse abstract class that extends the VirtualDomesticMammal class. The code file for the sample is included in the java_9_oop_chapter_06_01 folder, in the example06_05.java file.\n```", "```java\n    public void printNeigh(int times, \n        VirtualDomesticMammal otherDomesticMammal,\n        boolean isAngry) {\n        printSoundInWords(\"Neigh \", times, otherDomesticMammal, isAngry);\n    }\n\n    public void neigh() {\n        printNeigh(1, null, false);\n    }\n\n    public void neigh(int times) {\n        printNeigh(times, null, false);\n    }\n\n    public void neigh(int times, \n        VirtualDomesticMammal otherDomesticMammal) {\n        printNeigh(times, otherDomesticMammal, false);\n    }\n\n    public void neigh(int times, \n        VirtualDomesticMammal otherDomesticMammal, \n        boolean isAngry) {\n        printNeigh(times, otherDomesticMammal, isAngry);\n    }\n\n    public void printNicker(int times, \n        VirtualDomesticMammal otherDomesticMammal,\n        boolean isAngry) {\n        printSoundInWords(\"Nicker \", times, otherDomesticMammal, isAngry);\n    }\n\n    public void nicker() {\n        printNicker(1, null, false);\n    }\n\n    public void nicker(int times) {\n        printNicker(times, null, false);\n    }\n\n    public void nicker(int times, \n        VirtualDomesticMammal otherDomesticMammal) {\n        printNicker(times, otherDomesticMammal, false);\n    }\n\n    public void nicker(int times, \n        VirtualDomesticMammal otherDomesticMammal, \n        boolean isAngry) {\n        printNicker(times, otherDomesticMammal, isAngry);\n    }\n\n @Override\n public void talk() {\n nicker();\n }\n}\n```", "```java\npublic void nicker()\npublic void nicker(int times) \npublic void nicker(int times, \n    VirtualDomesticMammal otherDomesticMammal) \npublic void nicker(int times, \n    VirtualDomesticMammal otherDomesticMammal, \n    boolean isAngry)\n```", "```java\npublic void neigh()\npublic void neigh(int times) \npublic void neigh(int times, \n    VirtualDomesticMammal otherDomesticMammal) \npublic void neigh(int times, \n    VirtualDomesticMammal otherDomesticMammal, \n    boolean isAngry)\n```"]