- en: Chapter 11. What is next?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。接下来是什么？
- en: The Docker ecosystem is converging towards a bigger picture, of which Swarm
    will be one of the core components. Let's hypothesize a roadmap.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker生态系统正在朝着更大的方向发展，其中Swarm将是核心组件之一。让我们假设一个路线图。
- en: The challenge of provisioning
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应的挑战
- en: There are no official tools to create a big Swarm at a scale yet. At the moment,
    operators use internal scripts, ad hoc tools (such as Belt), configuration managers
    (such as Puppet or Ansible), or orchestration templates (such as CloudFormation
    for AWS or Heat for OpenStack), as we have seen in the previous chapters. Recently,
    Docker For AWS and Azure came as alternatives.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有官方工具可以在规模上创建一个大型的Swarm。目前，运营商使用内部脚本，临时工具（如Belt），配置管理器（如Puppet或Ansible），或编排模板（如AWS的CloudFormation或OpenStack的Heat），正如我们在前几章中所看到的。最近，Docker
    For AWS和Azure成为了替代方案。
- en: But this use case will be probably addressed in a unified way with software-defined
    infrastructure toolkits.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种用例可能会以软件定义基础设施工具包的统一方式来解决。
- en: Software defined infrastructure
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件定义基础设施
- en: Starting from containers as building blocks to then creating systems to architect,
    orchestrate, scale, secure, and deploy not only apps but also infrastructures,
    as a long-term goal there is probably the *programmable Internet*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从容器作为构建模块开始，然后创建系统来设计、编排、扩展、保护和部署不仅仅是应用程序，还有基础设施，长期目标可能是*可编程互联网*。
- en: After SwarmKit, that's the kit for orchestration, Docker open sourced in October
    2016 **Infrakit**, the kit for infrastructures.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在SwarmKit之后，Docker于2016年10月开源了**Infrakit**，这是用于基础设施的工具包。
- en: Infrakit
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Infrakit
- en: 'While the focus of Docker Engine is containers and the focus of Docker Swarm
    is orchestration, the focus of Infrakit is on *groups* as primitives. Groups are
    intended of any object: Pets, cattle, unikernels, and Swarm clusters.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Docker Engine的重点是容器，Docker Swarm的重点是编排，但Infrakit的重点是*组*作为基元。组意味着任何对象：宠物、牲畜、unikernels和Swarm集群。
- en: 'Infrakit is the answer to the problem of managing Docker in different infrastructures.
    Before Infrakit, this was difficult and not portable. The idea is to provide a
    consistent user experience from architecting data centers to run bare containers.
    Infrakit is the current highest level abstraction for creating programmable infrastructures
    by Docker and it describes itself as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Infrakit是解决在不同基础设施中管理Docker的问题的答案。在Infrakit之前，这是困难的，而且不可移植。其想法是提供一致的用户体验，从设计数据中心到运行裸容器。Infrakit是由Docker创建可编程基础设施的当前最高级抽象，并且它自己描述为：
- en: '*"InfraKit is a toolkit for creating and managing declarative, self-healing
    infrastructure. It breaks infrastructure automation down into simple, pluggable
    components. These components work together to actively ensure the infrastructure
    state matches the user''s specifications."*'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"InfraKit是一个用于创建和管理声明式、自愈基础设施的工具包。它将基础设施自动化分解为简单的、可插拔的组件。这些组件共同工作，积极确保基础设施状态与用户的规格说明相匹配。"*'
- en: Infrakit in the stack leans against the flank of container engines.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在堆栈中的Infrakit靠在容器引擎的侧面。
- en: '![Infrakit](images/image_11_001.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Infrakit](images/image_11_001.jpg)'
- en: The organization is per groups. There is a group for the Infrakit itself structure,
    made of managers keeping a configuration. There is exactly one leader at a time,
    and some followers, for instance, have two. Every manager includes some group
    declarations. Groups may be of cattle, pets, swarms, unikernels, and so on. Every
    group is defined with instances (the real resources, for example, containers),
    and flavors (the type of resource, for example, Ubuntu Xenial or a MySQL Docker
    image).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 组织是按组来划分的。有一个用于Infrakit自身结构的组，由保持配置的管理器组成。每次只有一个领导者，例如，有两个追随者。每个管理器都包括一些组声明。组可以是牛群、宠物、蜂群、unikernels等。每个组都用实例（例如容器这样的真实资源）和flavor（资源类型，例如Ubuntu
    Xenial或MySQL Docker镜像）来定义。
- en: Infrakit is declarative. It relies on a JSON configuration and internally uses
    the well-known patterns of encapsulation and composition to make configurations
    as inputs to process and make infrastructures to converge to a specific configuration.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Infrakit是声明性的。它依赖于JSON配置，并在内部使用封装和组合的众所周知的模式，以使配置成为处理和使基础设施收敛到特定配置的输入。
- en: 'The goals of Infrakit are to:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Infrakit的目标是：
- en: Provide a unified toolkit to manage groups
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供统一的工具包来管理组
- en: Be pluggable
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可插拔
- en: Provide self healing
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供自我修复
- en: Release rolling updates
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布滚动更新
- en: Groups abstract the notion of objects. They can be groups of any size and scale
    up, and down, they can be groups of named pets, unnamed cattle, Infrakit managers
    itself and/or all the above together. At the moment, in Infrakit there is only
    one default group configuration (the default plugin), but new group definitions
    may come later. The default group is an interface exposing actions such as watch/unwatch
    (start and stop groups), perform/stop updates, change group size.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 组抽象了对象的概念。它们可以是任何大小和规模的组，并且可以扩展和缩小，它们可以是具有命名宠物的组、无名牛群、Infrakit管理器本身和/或所有上述内容的组。目前，在Infrakit中只有一个默认的组配置（默认插件），但以后可能会出现新的组定义。默认组是一个接口，公开了诸如观察/取消观察（启动和停止组）、执行/停止更新、更改组大小等操作。
- en: Groups are made of instances. They may be physical resources such as VMs or
    containers, or interfaces to other services, such as Terraform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 组由实例组成。它们可以是诸如VM或容器之类的物理资源，也可以是其他服务的接口，例如Terraform。
- en: On instances you can run flavors, for example, Zookeeper, MySQL, or Ubuntu Xenial.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例上可以运行flavor，例如Zookeeper、MySQL或Ubuntu Xenial。
- en: 'Groups, instances, and flavors are pluggable: They run in fact as plugins that
    can be written in any language. At the moment, Infrakit ships some Go code, that
    when compiled gives a set of binaries, such as cli, which can be used to control,
    inspect, and perform operations on groups, instances, and flavors, and plugin
    binaries, such as terraform, swarm, or zookeeper.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 组、实例和flavor是可插拔的：它们实际上作为可以用任何语言编写的插件运行。目前，Infrakit提供了一些Go代码，编译后会生成一组二进制文件，例如cli，可用于控制、检查和执行组、实例和flavor的操作，以及插件二进制文件，例如terraform、swarm或zookeeper。
- en: Infrakit is thought to be able to manage inconsistencies, by continuously monitoring,
    detecting anomalies, and triggering actions. This propriety is called self-healing
    and can be used to create more robust systems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Infrakit被认为能够管理不一致性，通过持续监控、检测异常并触发操作。这种特性称为自我修复，可以用来创建更健壮的系统。
- en: One of the major operations supported by Infrakit will be releasing rolling
    updates to update instances. For example, update a package in a container, update
    a container image, or others maybe by using **TUF** (**The Update Framework**),
    a project described in the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Infrakit支持的主要操作之一将是发布滚动更新以更新实例。例如，更新容器中的软件包、更新容器镜像，或者可能通过使用**TUF**（**The Update
    Framework**）来实现，这是下一节中描述的一个项目。
- en: Infrakit is so early and young at the time of writing that we can't show any
    example that's not a Hello World. On the Internet, it will be soon full of Infrakit
    Hello Worlds, and the Infrakit team itself released a step-by-step tutorial to
    use it with the file or Terraform plugins. We can just depict it as the architectural
    layer in the Docker ecosystem and expect it to be able to deploy even Swarms,
    provisioning the hosts and interconnecting them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Infrakit 在撰写时还处于早期和年轻阶段，我们无法展示任何不是 Hello World 的示例。在互联网上，很快就会充满 Infrakit Hello
    World，Infrakit 团队本身发布了一份逐步教程，以便使用文件或 Terraform 插件。我们可以将其描述为 Docker 生态系统中的架构层，并期望它能够部署甚至是
    Swarms，为主机提供服务并相互连接。
- en: Infrakit is expected to be included into the Engine, maybe as experimental in
    version 1.14.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 预计 Infrakit 将被包含在 Engine 中，可能作为版本1.14中的实验性功能。
- en: TUF - The Update Framework
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TUF - 更新框架
- en: At Docker Summit 16 in Berlin, another topic was discussed, TUF ([https://theupdateframework.github.io/](https://theupdateframework.github.io/)),
    a toolkit which has the goal to provide a secure way to roll updates.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在柏林的 Docker Summit 16 上，还讨论了另一个话题，TUF ([https://theupdateframework.github.io/](https://theupdateframework.github.io/))，这是一个旨在提供安全的更新方式的工具包。
- en: 'There are many update tools available, which do the update in practice, but
    TUF is much more. From the project''s home page:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用的更新工具，可以在实践中进行更新，但 TUF 更多。从项目主页：
- en: '*"TUF helps developers to secure new or existing software update systems, which
    are often found to be vulnerable to many known attacks. TUF addresses this widespread
    problem by providing a comprehensive, flexible security framework that developers
    can integrate with any software update system."*'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “TUF 帮助开发人员保护新的或现有的软件更新系统，这些系统经常容易受到许多已知攻击的影响。TUF 通过提供一个全面、灵活的安全框架来解决这个普遍问题，开发人员可以将其与任何软件更新系统集成。”
- en: TUF is already integrated into Docker, and the tool is called Notary, as we
    saw in [Chapter 9](ch09.html "Chapter 9. Securing a Swarm Cluster and the Docker
    Software Supply Chain"), *Securing a Swarm Cluster and the Docker Software Supply
    Chain*, Notary can be used. Notary can be used to verify content and make the
    keys management easy. With Notary, developers can sign their content offline using
    keys and later make the content available, by pushing their signed trusted collection
    to a Notary Server.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TUF 已经集成到 Docker 中，该工具称为 Notary，正如我们在[第9章](ch09.html "第9章。保护Swarm集群和Docker软件供应链")中看到的，*保护Swarm集群和Docker软件供应链*，可以使用
    Notary。Notary 可用于验证内容并简化密钥管理。使用 Notary，开发人员可以使用密钥离线签署其内容，然后通过将其签名的可信集合推送到 Notary
    服务器来使内容可用。
- en: Will TUF be merged into Docker Infrakit as the rolling update mechanism? That
    would be another amazing step ahead.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: TUF 是否会作为滚动更新机制合并到 Docker Infrakit 中？那将是另一个惊人的进步。
- en: Docker stacks and Compose
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker stacks 和 Compose
- en: Another Docker feature available to developers but still in experimental phase
    is Stacks. We introduced Stacks in [Chapter 6](ch06.html "Chapter 6. Deploy Real
    Applications on Swarm"), *Deploy Real Applications on Swarm*. They will become
    the default method of deploying applications on swarms. Instead of putting in
    motion containers, the idea is that groups of containers, packed into bundles,
    will be rather launched.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可供开发人员使用但仍处于实验阶段的 Docker 功能是 Stacks。我们在[第6章](ch06.html "第6章。在Swarm上部署真实应用")中介绍了
    Stacks，*在Swarm上部署真实应用*。它们将成为在 Swarms 上部署应用程序的默认方法。与启动容器不同，想法是将容器组打包成捆绑包，而不是单独启动。
- en: Also, a new integration between Compose and the new Swarm may be expected.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以预期 Compose 与新的 Swarm 之间的新集成。
- en: CaaS - Containers as a Service
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CaaS - 容器即服务
- en: 'In the XaaS arena, where everything is treated as a software, not only are
    containers first class citizens, but orchestration systems and infrastructures
    will also be. All these abstractions will lead to a cloud-defined way of running
    this ecosystem of tools: Containers as a Service.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在XaaS领域，一切都被视为软件，不仅容器是一流公民，编排系统和基础设施也是如此。所有这些抽象将导致以云定义的方式运行这些工具生态系统：容器即服务。
- en: An example of CaaS is the Docker Datacenter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: CaaS的一个例子是Docker Datacenter。
- en: Unikernels
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unikernels
- en: SwarmKit, as a kit, will run clusters not only of containers, but also unikernels,
    we said.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SwarmKit作为一个工具包，不仅可以运行容器集群，还可以运行unikernels。
- en: What are unikernels and why are they so fantastic?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: unikernels是什么，为什么它们如此奇妙？
- en: If you use Docker For Mac, you're already using unikernels. They are the core
    of these systems. On Mac, **xhyve,** a port of the FreeBSD virtualization system
    **(bhyve),** runs a Docker host in unikernel mode.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Docker For Mac，你已经在使用unikernels。它们是这些系统的核心。在Mac上，**xhyve**，一个FreeBSD虚拟化系统**（bhyve）**的端口，在unikernel模式下运行Docker主机。
- en: We all love containers, because they are small and fast, but the security implications
    of having a mechanism abstracting the kernel and make its components (containers)
    to share system resources, libraries, binaries, are really a concern. Just look
    for CVEs bulletins regarding containers security on any search engine. That's
    a serious issue.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都喜欢容器，因为它们小巧快速，但是有一个机制来抽象内核并使其组件（容器）共享系统资源、库、二进制文件的安全隐患确实令人担忧。只需在任何搜索引擎上查找有关容器安全性的CVE公告。这是一个严重的问题。
- en: Unikernels promise a reassessment of software architecture at the highest level.
    This is quickly explained here. There is an efficient way to guarantee maximum
    security and because of their nature they run at a very very tiny size. In a world
    where we speak of Terabytes, Petabytes, and beyond, it will surprise you to know
    that a unikernel implementation of KVM like ukvm can fit in 67Kb (Kilobytes),
    web server binaries in 300Kb, or operating system images in order of some Megabytes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: unikernels承诺对软件架构进行最高级别的重新评估。这里很快解释了这一点。有一种有效的方法来保证最大的安全性，由于它们的性质，它们以非常非常小的尺寸运行。在我们谈论Terabytes、Petabytes甚至更大的世界中，你会惊讶地知道，类似ukvm的KVM的unikernel实现可以适应67Kb（千字节），Web服务器二进制文件可以达到300Kb，或者操作系统镜像可以达到几兆字节的数量级。
- en: This is possible because unikernels basically don't expose all the system calls
    to the stack, but those calls are included into the binary itself. A **ping**
    binary does not require any system call to access the disk, use cryptographic
    functions or manage system processes. So just why not cut off these calls to ping,
    and provide it with the minimal it requires? That's the main idea behind unikernels.
    A ping command will be compiled with *inside* some network I/O, raw sockets, and
    that's all.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的，因为unikernels基本上不会将所有系统调用暴露给堆栈，而是将这些调用包含在二进制文件中。一个**ping**二进制文件不需要任何系统调用来访问磁盘，使用加密函数或管理系统进程。那么为什么不切断ping的这些调用，并为其提供它所需的最小功能呢？这就是unikernels背后的主要思想。ping命令将与一些网络I/O、原始套接字一起编译在*内部*，仅此而已。
- en: With unikernels, there is no distinction between kernel and user space, as the
    address table is unified. This means that the address table is *continuous*. As
    explained earlier, this is possible because unikernel binaries are compiled embedding
    the system functions they need, such as I/O operations, memory management or shared
    libraries, *inside* the binary. In the traditional operating systems model, applications
    look and use the system calls at *runtime*, while with unikernels, these system
    calls are statically linked at *compile time*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用unikernels时，内核和用户空间之间没有区别，因为地址表是统一的。这意味着地址表是*连续的*。正如前面解释的那样，这是可能的，因为unikernel二进制文件是通过嵌入它们需要的系统功能（如I/O操作、内存管理或共享库）在*二进制*内部编译的。在传统的操作系统模型中，应用程序在*运行时*查看和使用系统调用，而使用unikernels时，这些系统调用在*编译时*静态链接。
- en: '![Unikernels](images/image_11_002.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Unikernels](images/image_11_002.jpg)'
- en: This can look strange at first sight but it's a tremendous advance in terms
    of process isolation and security. Even if someone is able to fraudulently introduce
    into some system running unikernel stuff, it's almost impossible for her to find
    any security breach. The attack surface is so minimal that it's highly improbable
    that there will be any exploitable unused system call or features, apart from
    the ones in use, possibly already hardened. There is no shell to invoke, there
    are no external utility libraries or scripts, there are no configuration or password
    files, there are no extra ports bind.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看这可能看起来很奇怪，但这在进程隔离和安全性方面是一项巨大的进步。即使有人能够欺诈性地介入运行unikernel内容的某个系统中，她几乎不可能找到任何安全漏洞。攻击面是如此之小，以至于几乎不可能存在任何可利用的未使用的系统调用或功能，除了已经加固的可能正在使用的功能。没有shell可调用，没有外部实用程序库或脚本，没有配置或密码文件，没有额外的端口绑定。
- en: So what about unikernels and Docker?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么unikernels和Docker呢？
- en: At the DockerConEU 15 in Barcelona, some folks jump to the stage to show how
    to integrate Docker with unikernels, and later eventually Docker Inc. acquired
    the company, signing between the other things the birth of Docker For Mac.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在巴塞罗那的DockerConEU 15上，一些人跳上舞台展示如何将Docker与unikernels集成，最终Docker Inc.收购了该公司，签署了Docker
    For Mac的诞生等其他事项。
- en: At the Docker Summit 16 in Berlin, someone mentioned about unikernels running
    alongside with containers in SwarmKit. A future of integration is coming.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在柏林的Docker Summit 16上，有人提到unikernels可以与SwarmKit中的容器一起运行。集成的未来即将到来。
- en: Contribute to Docker
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Docker做贡献
- en: 'All this innovation in Docker is possible because the projects rely on a very
    broad community. Docker is a very intense and active project, split into several
    Github repositories, the most notable of which are:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Docker中的所有这些创新都是可能的，因为这些项目依赖于一个非常广泛的社区。Docker是一个非常密集和活跃的项目，分成几个Github存储库，其中最值得注意的是：
- en: 'Docker itself, the engine: [www.github.com/docker/docker](https://github.com/docker/docker)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker引擎本身：[www.github.com/docker/docker](https://github.com/docker/docker)
- en: 'Machine, the Docker hosts instantiator: [www.github.com/docker/machine](https://github.com/docker/machine)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker主机实例化工具Machine：[www.github.com/docker/machine](https://github.com/docker/machine)
- en: Swarm, the orchestration service: [www.github.com/docker/swarmkit](https://github.com/docker/swarmkit)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编排服务Swarm：[www.github.com/docker/swarmkit](https://github.com/docker/swarmkit)
- en: 'Compose, the tool to model micro services: [www.github.com/docker/compose](https://github.com/docker/compose)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Compose，用于建模微服务的工具：[www.github.com/docker/compose](https://github.com/docker/compose)
- en: 'Infrakit, the infrastructure manager: [www.github.com/docker/infrakit](https://github.com/docker/infrakit)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施管理器Infrakit：[www.github.com/docker/infrakit](https://github.com/docker/infrakit)
- en: But also, these projects would not run without their libraries, such as Libcontainer,
    Libnetwork, Libcompose (waiting to be merged with Compose), and many many others.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这些项目也无法在没有它们的库的情况下运行，比如Libcontainer、Libnetwork、Libcompose（等待与Compose合并）等等。
- en: All this code would not exist without the commitment of the Docker team and
    the Docker community.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些代码都不会存在，没有Docker团队和Docker社区的承诺。
- en: Github
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Github
- en: Any company or individual is encouraged to contribute to the projects. There
    are some guidelines at [https://github.com/docker/docker/blob/master/CONTRIBUTING.md](https://github.com/docker/docker/blob/master/CONTRIBUTING.md).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励任何公司或个人为项目做出贡献。在[https://github.com/docker/docker/blob/master/CONTRIBUTING.md](https://github.com/docker/docker/blob/master/CONTRIBUTING.md)上有一些指南。
- en: File issues
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件问题
- en: One great way to start is to report anomalies, bugs, or submit ideas, by opening
    issues on the GitHub space of the related project.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的开始是通过在相关项目的GitHub空间上开放问题来报告异常、错误或提交想法。
- en: Code
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码
- en: Another well-appreciated way to help is to submit pull requests to either fix
    things or propose new features. These PRs should follow and reference to some
    issue recorded into the Issues page, accordingly to the guidelines.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个受到赞赏的帮助方式是提交拉取请求，修复问题或提出新功能。这些PR应遵循并参考记录在Issues页面上的一些问题，符合指南。
- en: Belt and other projects
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Belt和其他项目
- en: 'Also, along with this books many mini side projects started:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了这本书，还有许多小的并行项目开始了：
- en: Swarm2k and Swarm3k, as community-oriented experiments to create Swarms at a
    scale. Some code, instructions, and results are available in the [www.github.com/swarmzilla](https://github.com/swarmzilla)
    respective repositories.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swarm2k和Swarm3k，作为社区导向的实验，旨在创建规模化的Swarm。一些代码、说明和结果可在[www.github.com/swarmzilla](https://github.com/swarmzilla)的相应存储库中找到。
- en: Belt as a Docker host provisioner. At the moment, it includes only the DigitalOcean
    driver, but it can be further extended.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Belt作为Docker主机供应商。目前，它只包括DigitalOcean驱动程序，但可以进一步扩展。
- en: Ansible modules for Swarm, Machine, and Docker certificates, to be used in Ansible
    play books.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Swarm、Machine和Docker证书的Ansible模块，可用于Ansible play books。
- en: Containers pushed to the Docker Hub to illustrate specific components (such
    as `fsoppelsa/etcd`) or introduce new features (such as `fsoppelsa/swarmkit`).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器推送到Docker Hub以说明特定组件（如`fsoppelsa/etcd`）或引入新功能（如`fsoppelsa/swarmkit`）。
- en: Other minor pull requests, hacks and code portions..
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他次要的拉取请求、黑客和代码部分。
- en: In the spirit of open source, all of the above are free software and any contribution,
    improvement, or critic is very well appreciated.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 秉承开源精神，上述所有内容都是免费软件，非常感谢任何贡献、改进或批评。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Finally, a couple of words on the history of this book and a note on how astonishingly
    fast is the development of Docker.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，简要介绍一下这本书的历史，以及关于Docker开发速度的惊人之处。
- en: When the project of writing a book on Docker Swarm was just drafted, at the
    day there was only the old Docker Swarm standalone mode, where a Swarm container
    was responsible for orchestrating infrastructures of containers, having to rely
    on external discovery systems, such as Etcd, Consul, or Zookeeper.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写有关Docker Swarm的书籍项目刚起草时，当天只有旧的Docker Swarm独立模式，其中Swarm容器负责编排容器基础设施，必须依赖外部发现系统，如Etcd、Consul或Zookeeper。
- en: Looking back at these times, just some months ago, is like thinking to prehistory.
    Just later in June, when SwarmKit was open sourced as an orchestration kit and
    it was included into the Engine as Swarm Mode, a major step ahead was made by
    the Docker in terms of orchestration. A full, scalable and secure by default,
    and easy way to orchestrate Docker natively was released. Then, it turned out
    that the best way of orchestrating Docker was just Docker itself.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾这些时期，就在几个月前，就像在思考史前时期。就在6月，当SwarmKit作为编排工具开源并被包含到引擎中作为Swarm Mode时，Docker在编排方面迈出了重要的一步。一个完整的、可扩展的、默认安全的、以及本地编排Docker的简单方式被发布。然后，结果证明最好的Docker编排方式就是Docker本身。
- en: 'But when Infrakit was open sourced in October 2016, a new big step ahead was
    done in terms of infrastructure: now not only orchestrations and group of containers
    are primitives, but also groups of other objects, even mixed in the original Infrakit
    intent, are: Containers, VMs, unikernels, and possibly bare metal.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当Infrakit在2016年10月开源时，基础设施方面迈出了一大步：现在不仅编排和容器组是基本元素，而且其他对象的组，甚至混合在原始Infrakit意图中：容器、虚拟机、unikernels，甚至裸金属。
- en: In the (near) future, we can expect all of these projects to be glued, having
    Infrakit as the infrastructure manager, capable of provisioning Swarms (of anything),
    where containers or other objects are orchestrated, interconnected, stored (state
    fully), roll updated, interconnected by overlay networks, and secured.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在（不久的）未来，我们可以期待所有这些项目被粘合在一起，Infrakit作为基础设施管理器，能够提供Swarm（任何东西），在其中容器或其他对象被编排、互联、存储（完全状态）、滚动更新、通过覆盖网络互联，并得到保护。
- en: Swarm is just the beginning of this big-picture ecosystem.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm只是这个大局生态系统的开始。
