- en: Chapter 5. Fork/Join Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。Fork/Join框架
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating a Fork/Join pool
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Fork/Join池
- en: Joining the results of the tasks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并任务的结果
- en: Running tasks asynchronously
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步运行任务
- en: Throwing exceptions in the tasks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务中抛出异常
- en: Canceling a task
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消任务
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Normally, when you implement a simple, concurrent Java application, you implement
    some `Runnable` objects and then the corresponding `Thread` objects. You control
    the creation, execution, and status of those threads in your program. Java 5 introduced
    an improvement with the `Executor` and `ExecutorService` interfaces and the classes
    that implement them (for example, the `ThreadPoolExecutor` class).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您实现一个简单的并发Java应用程序时，您实现一些`Runnable`对象，然后相应的`Thread`对象。您在程序中控制这些线程的创建、执行和状态。Java
    5通过`Executor`和`ExecutorService`接口以及实现它们的类（例如`ThreadPoolExecutor`类）引入了改进。
- en: The Executor framework separates the task creation and its execution. With it,
    you only have to implement the `Runnable` objects and use an `Executor` object.
    You send the `Runnable` tasks to the executor and it creates, manages, and finalizes
    the necessary threads to execute those tasks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Executor框架将任务的创建和执行分开。您只需实现`Runnable`对象并使用`Executor`对象。您将`Runnable`任务发送到执行程序，它将创建、管理和完成执行这些任务所需的线程。
- en: Java 7 goes a step further and includes an additional implementation of the
    `ExecutorService` interface oriented to a specific kind of problem. It's the **Fork/Join
    framework** .
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Java 7更进一步，并包括了`ExecutorService`接口的另一个针对特定问题的实现。这就是**Fork/Join框架**。
- en: 'This framework is designed to solve problems that can be broken into smaller
    tasks using the divide and conquer technique. Inside a task, you check the size
    of the problem you want to resolve and, if it''s bigger than an established size,
    you divide it in smaller tasks that are executed using the framework. If the size
    of the problem is smaller than the established size, you solve the problem directly
    in the task and then, optionally, it returns a result. The following diagram summarizes
    this concept:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架旨在使用分而治之的技术解决可以分解为较小任务的问题。在任务内部，您检查要解决的问题的大小，如果大于已确定的大小，则将其分解为较小的任务，使用框架执行。如果问题的大小小于已确定的大小，则直接在任务中解决问题，然后可选择地返回结果。以下图表总结了这个概念：
- en: '![Introduction](img/7881_05_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![介绍](img/7881_05_01.jpg)'
- en: There is no formula to determine the reference size of a problem that determines
    if a task is subdivided or not, depending on its characteristics. You can use
    the number of elements to process in the task and an estimation of the execution
    time to determine the reference size. Test different reference sizes to choose
    the best one to your problem. You can consider `ForkJoinPool` as a special kind
    of `Executor`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 没有公式可以确定问题的参考大小，以确定是否对任务进行细分，这取决于其特性。您可以使用任务中要处理的元素数量和执行时间的估计来确定参考大小。测试不同的参考大小以选择最适合您问题的大小。您可以将`ForkJoinPool`视为一种特殊的`Executor`。
- en: 'The framework is based on the following two operations:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架基于以下两个操作：
- en: 'The **fork** operation: When you divide a task into smaller tasks and execute
    them using the framework'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fork**操作：当您将任务分解为较小的任务并使用框架执行它们时'
- en: 'The **join** operation: When a task waits for the finalization of the tasks
    it has created'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**join**操作：当一个任务等待它创建的任务的完成时'
- en: The main difference between the Fork/Join and the Executor frameworks is the
    **work-stealing** algorithm. Unlike the Executor framework, when a task is waiting
    for the finalization of the subtasks it has created using the join operation,
    the thread that is executing that task (called **worker thread** ) looks for other
    tasks that have not been executed yet and begins its execution. By this way, the
    threads take full advantage of their running time, thereby improving the performance
    of the application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Fork/Join和Executor框架之间的主要区别是**工作窃取**算法。与Executor框架不同，当任务等待使用join操作创建的子任务的完成时，执行该任务的线程（称为**工作线程**）会寻找尚未执行的其他任务并开始执行。通过这种方式，线程充分利用其运行时间，从而提高应用程序的性能。
- en: 'To achieve this goal, the tasks executed by the Fork/Join framework have the
    following limitations:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个目标，Fork/Join框架执行的任务有以下限制：
- en: Tasks can only use the `fork()` and `join()` operations as synchronization mechanisms.
    If they use other synchronization mechanisms, the worker threads can't execute
    other tasks when they are in the synchronization operation. For example, if you
    put a task to sleep in the Fork/Join framework, the worker thread that is executing
    that task won't execute another one during the sleeping time.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务只能使用`fork()`和`join()`操作作为同步机制。如果它们使用其他同步机制，当它们处于同步操作时，工作线程无法执行其他任务。例如，如果您在Fork/Join框架中将任务休眠，执行该任务的工作线程在休眠时间内将不会执行另一个任务。
- en: Tasks should not perform I/O operations, such as read or write data in a file.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务不应执行I/O操作，例如在文件中读取或写入数据。
- en: Tasks can't throw checked exceptions. It has to include the code necessary to
    process them.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务不能抛出已检查异常。它必须包含处理它们所需的代码。
- en: 'The core of the Fork/Join framework is formed by the following two classes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Fork/Join框架的核心由以下两个类组成：
- en: '`ForkJoinPool`: It implements the `ExecutorService` interface and the work-stealing
    algorithm. It manages the worker threads and offers information about the status
    of the tasks and their execution.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForkJoinPool`：它实现了`ExecutorService`接口和工作窃取算法。它管理工作线程并提供有关任务状态和执行的信息。'
- en: '`ForkJoinTask`: It''s the base class of the tasks that will execute in `ForkJoinPool`.
    It provides the mechanisms to execute the `fork()` and `join()` operations inside
    a task and the methods to control the status of the tasks. Usually, to implement
    your Fork/Join tasks, you will implement a subclass of two subclasses of this
    class: `RecursiveAction` for tasks with no return result and `RecursiveTask` for
    tasks that return one.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForkJoinTask`：这是在`ForkJoinPool`中执行的任务的基类。它提供了在任务内执行`fork()`和`join()`操作的机制，以及控制任务状态的方法。通常，为了实现你的Fork/Join任务，你将实现这个类的两个子类的子类：`RecursiveAction`用于没有返回结果的任务，`RecursiveTask`用于返回一个结果的任务。'
- en: This chapter presents five recipes that show you how to work efficiently with
    the Fork/Join framework.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了五个示例，向你展示如何有效地使用Fork/Join框架。
- en: Creating a Fork/Join pool
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Fork/Join池
- en: 'In this recipe, you will learn how to use the basic elements of the Fork/Join
    framework. This includes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将学习如何使用Fork/Join框架的基本元素。这包括：
- en: Creating a `ForkJoinPool` object to execute the tasks
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`ForkJoinPool`对象来执行任务
- en: Creating a subclass of `ForkJoinTask` to be executed in the pool
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`ForkJoinTask`的子类在池中执行
- en: 'The main characteristics of the Fork/Join framework you''re going to use in
    this example are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在这个示例中使用Fork/Join框架的主要特性如下：
- en: You will create `ForkJoinPool` using the default constructor.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将使用默认构造函数创建`ForkJoinPool`。
- en: 'Inside the task, you will use the structure recommended by the Java API documentation:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务内部，你将使用Java API文档推荐的结构：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will execute the tasks in a synchronized way. When a task executes two or
    more subtasks, it waits for their finalizations. By this way, the thread that
    was executing that task (called worker-thread) will look for other tasks to execute,
    taking full advantage of their execution time.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将以同步的方式执行任务。当一个任务执行两个或更多子任务时，它会等待它们的完成。这样，执行该任务的线程（称为工作线程）将寻找其他任务来执行，充分利用它们的执行时间。
- en: The tasks you're going to implement won't return any result, so you'll take
    the `RecursiveAction` class as the base class for their implementation.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你要实现的任务不会返回任何结果，所以你将以`RecursiveAction`类作为它们实现的基类。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The example of this recipe has been implemented using the Eclipse IDE. If you
    use Eclipse or other IDE such as NetBeans, open it and create a new Java project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例已经使用Eclipse IDE实现。如果你使用Eclipse或其他IDE，比如NetBeans，打开它并创建一个新的Java项目。
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '如何做... '
- en: In this recipe, you are going to implement a task to update the price of a list
    of products. The initial task will be responsible for updating all the elements
    in a list. You will use a size 10 as the reference size so, if a task has to update
    more than 10 elements, it divides the part of the list assigned to it in two parts
    and creates two tasks to update the prices of the products in respective parts.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将实现一个任务来更新产品列表的价格。最初的任务将负责更新列表中的所有元素。你将使用大小为10作为参考大小，所以如果一个任务需要更新超过10个元素，它会将分配给它的列表部分分成两部分，并创建两个任务来更新各自部分的产品价格。
- en: 'Follow these steps to implement the example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现示例：
- en: Create a class named `Product` that will store the name and price of a product.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Product`的类，它将存储产品的名称和价格。
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Declare a private `String` attribute named `name` and a private `double` attribute
    named `price`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`name`的私有`String`属性和一个名为`price`的私有`double`属性。
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Implement both the methods and establish the values of both attributes.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现两个方法并确定两个属性的值。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create a class named `ProductListGenerator` to generate a list of random products.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ProductListGenerator`的类来生成一个随机产品列表。
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Implement the`generate()` method. It receives an `int` parameter with the size
    of the list and returns a `List<Product>` object with the list of generated products.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`generate()`方法。它接收一个`int`参数作为列表的大小，并返回一个带有生成产品列表的`List<Product>`对象。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create the object to return the list of products.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建返回产品列表的对象。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Generate the list of products. Assign the same price to all of the products,
    for example, 10 to check that the program works well.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成产品列表。为所有产品分配相同的价格，例如10，以检查程序是否正常工作。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a class named `Task`. Specify that it extends the `RecursiveAction` class.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Task`的类。指定它扩展`RecursiveAction`类。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Declare the serial version UID of the class. This element is necessary, because
    the parent class of the `RecursiveAction` class, the `ForkJoinTask` class, implements
    the `Serializable` interface.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明类的序列版本UID。这个元素是必要的，因为`RecursiveAction`类的父类`ForkJoinTask`类实现了`Serializable`接口。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Declare a private `List<Product>` attribute named `products`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`products`的私有`List<Product>`属性。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Declare two private `int` attributes, named `first` and `last`. These attributes
    will determine the block of products this task has to process.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明两个私有的`int`属性，名为`first`和`last`。这些属性将确定该任务需要处理的产品块。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Declare a private `double` attribute named `increment` to store the increment
    of the price of the products.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`increment`的私有`double`属性来存储产品价格的增量。
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Implement the constructor of the class that will initialize all the attributes
    of the class.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类的构造函数，初始化类的所有属性。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Implement the `compute()` method that will implement the logic of the task.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`compute()`方法来实现任务的逻辑。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the difference of the `last` and `first` attributes is smaller than 10 (the
    task has to update the price of less than 10 products), increment the price of
    that set or products using the `updatePrices()` method.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`last`和`first`属性的差小于10（任务必须更新少于10个产品的价格），使用`updatePrices()`方法增加该产品集的价格。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If the difference between the `last` and `first` attributes is greater than
    or equal to 10, create two new `Task` objects, one to process the first half of
    products and the other to process the second half and execute them in `ForkJoinPool`
    using the `invokeAll()` method.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`last`和`first`属性之间的差大于或等于10，创建两个新的`Task`对象，一个用于处理产品的前一半，另一个用于处理产品的后一半，并使用`invokeAll()`方法在`ForkJoinPool`中执行它们。
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Implement the `updatePrices()` method. This method updates the products that
    occupy the positions between the values of `first` and `last` attributes in the
    list of products.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`updatePrices()`方法。该方法更新产品列表中`first`和`last`属性值之间的位置上的产品。
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Implement the main class of the example by creating a class named `Main` and
    add the `main()` method to it.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为`Main`的类并在其中添加`main()`方法来实现示例的主类。
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Create a list of 10,000 products using the `ProductListGenerator` class.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ProductListGenerator`类创建一个包含10,000个产品的列表。
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create a new `Task` object to update the products of all the products of the
    list. The parameter `first` takes the value `0` and the `last` parameter takes
    the value `10,000` (the size of the products list).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`Task`对象来更新产品列表中所有产品的价格。参数`first`取值为`0`，`last`参数取值为`10,000`（产品列表的大小）。
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Create a `ForkJoinPool` object using the constructor without parameters.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用无参数的构造函数创建一个`ForkJoinPool`对象。
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Execute the task in the pool using the `execute()` method.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`execute()`方法在池中执行任务。
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Implement a block of code that shows information about the evolution of the
    pool every five milliseconds writing to the console the value of some parameters
    of the pool until the task finishes its execution.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个代码块，每隔五毫秒显示池的演变信息，将池的一些参数值写入控制台，直到任务完成执行。
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Shut down the pool using the `shutdown()` method.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`shutdown()`方法关闭池。
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Check if the task has finished without errors with the `isCompletedNormally()`
    method and, in that case, write a message to the console.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`isCompletedNormally()`方法检查任务是否已经正常完成，如果是，则向控制台写入一条消息。
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The expected price of all products, after the increment, is 12\. Write the name
    and the price of all the products that have a price difference of 12 to check
    that all of them have increased their price correctly.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加后所有产品的预期价格为12美元。写出所有价格差为12的产品的名称和价格，以检查它们是否都正确地增加了价格。
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Write a message to indicate the finalization of the program.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一条消息指示程序的完成。
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this example, you have created a `ForkJoinPool` object and a subclass of
    the `ForkJoinTask` class that you execute in the pool. To create the `ForkJoinPool`
    object, you have used the constructor without arguments, so it will be executed
    with its default configuration. It creates a pool with a number of threads equal
    to the number of processors of the computer. When the `ForkJoinPool` object is
    created, those threads are created and they wait in the pool until some tasks
    arrive for their execution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您创建了一个`ForkJoinPool`对象和`ForkJoinTask`类的一个子类，然后在池中执行它。创建`ForkJoinPool`对象时，您使用了无参数的构造函数，因此它将以默认配置执行。它创建了一个线程数等于计算机处理器数量的池。当`ForkJoinPool`对象创建时，这些线程被创建，并且它们在池中等待直到一些任务到达执行。
- en: Since the `Task` class doesn't return a result, it extends the `RecursiveAction`
    class. In the recipe, you have used the recommended structure for the implementation
    of the task. If the task has to update more than 10 products, it divides those
    set of elements into two blocks, creates two tasks, and assigns a block to each
    task. You have used the `first` and `last` attributes in the `Task` class to know
    the range of positions that this task has to update in the list of products. You
    have used the `first` and `last` attributes to use only one copy of the products
    list and not create different lists for each task.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Task`类不返回结果，它继承了`RecursiveAction`类。在这个示例中，您已经使用了推荐的结构来实现任务。如果任务需要更新超过10个产品，它会将这些元素分成两个块，创建两个任务，并将一个块分配给每个任务。您已经在`Task`类中使用了`first`和`last`属性来知道该任务在产品列表中需要更新的位置范围。您已经使用了`first`和`last`属性，以便只使用产品列表的一个副本，而不是为每个任务创建不同的列表。
- en: To execute the subtasks that a task creates, it calls the `invokeAll()` method.
    This is a synchronous call, and the task waits for the finalization of the subtasks
    before continuing (potentially finishing) its execution. While the task is waiting
    for its subtasks, the worker thread that was executing it takes another task that
    was waiting for execution and executes it. With this behavior, the Fork/Join framework
    offers a more efficient task management than the `Runnable` and `Callable` objects
    themselves.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行任务创建的子任务，调用`invokeAll()`方法。这是一个同步调用，任务在继续（可能完成）执行之前等待子任务的完成。当任务等待其子任务时，执行它的工作线程会取出另一个等待执行的任务并执行它。通过这种行为，Fork/Join框架比`Runnable`和`Callable`对象本身提供了更有效的任务管理。
- en: The `invokeAll()` method of the `ForkJoinTask` class is one of the main differences
    between the Executor and the Fork/Join framework. In the Executor framework, all
    the tasks have to be sent to the executor, while in this case, the tasks include
    methods to execute and control the tasks inside the pool. You have used the `invokeAll()`
    method in the `Task` class, that extends the `RecursiveAction` class that extends
    the `ForkJoinTask` class.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForkJoinTask`类的`invokeAll()`方法是Executor和Fork/Join框架之间的主要区别之一。在Executor框架中，所有任务都必须发送到执行器，而在这种情况下，任务包括在池内执行和控制任务的方法。您已经在`Task`类中使用了`invokeAll()`方法，该类扩展了`RecursiveAction`类，后者又扩展了`ForkJoinTask`类。'
- en: You have sent a unique task to the pool to update all the list of products using
    the `execute()` method. In this case, it's an asynchronous call, and the main
    thread continues its execution.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经向池中发送了一个唯一的任务来更新所有产品列表，使用`execute()`方法。在这种情况下，这是一个异步调用，主线程继续执行。
- en: You have used some methods of the `ForkJoinPool` class to check the status and
    the evolution of the tasks that are running. The class includes more methods that
    can be useful for this purpose. See the *Monitoring a Fork/Join pool* recipe for
    a complete list of those methods.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用了`ForkJoinPool`类的一些方法来检查正在运行的任务的状态和进展。该类包括更多的方法，可以用于此目的。请参阅*监视Fork/Join池*中的完整方法列表。
- en: Finally, like with the Executor framework, you should finish `ForkJoinPool`
    using the `shutdown()` method.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，就像使用Executor框架一样，你应该使用`shutdown()`方法来结束`ForkJoinPool`。
- en: 'The following screenshot shows part of an execution of this example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此示例的部分执行：
- en: '![How it works...](img/7881_05_02.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7881_05_02.jpg)'
- en: You can see the tasks finishing their work and the price of the products updates.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到任务完成它们的工作，产品价格更新。
- en: There's more...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `ForkJoinPool` class provides other methods to execute a task in. These
    methods are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForkJoinPool`类提供了其他方法来执行任务。这些方法如下：'
- en: '`execute (Runnable task)`: This is another version of the `execute()` method
    used in the example. In this case, you send a `Runnable` task to the `ForkJoinPool`
    class. Note that the `ForkJoinPool` class doesn''t use the work-stealing algorithm
    with `Runnable` objects. It''s only used with `ForkJoinTask` objects.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute (Runnable task)`: 这是在示例中使用的`execute()`方法的另一个版本。在这种情况下，你将一个`Runnable`任务发送给`ForkJoinPool`类。请注意，`ForkJoinPool`类不会使用工作窃取算法处理`Runnable`对象。它只用于`ForkJoinTask`对象。'
- en: '`invoke(ForkJoinTask<T> task)`: While the `execute()` method makes an asynchronous
    call to the `ForkJoinPool` class, as you learned in the example, the `invoke()`
    method makes a synchronous call to the `ForkJoinPool` class. This call doesn''t
    return until the task passed as a parameter finishes its execution.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`invoke(ForkJoinTask<T> task)`: 虽然`execute()`方法在示例中对`ForkJoinPool`类进行了异步调用，但`invoke()`方法对`ForkJoinPool`类进行了同步调用。这个调用直到作为参数传递的任务完成执行才返回。'
- en: You also can use the `invokeAll()`and `invokeAny()` methods declared in the
    `ExecutorService` interface. These methods receive `Callable` objects as parameters.
    The `ForkJoinPool` class doesn't use the work-stealing algorithm with the `Callable`
    objects, so you'd be better off executing them using an executor.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以使用`ExecutorService`接口中声明的`invokeAll()`和`invokeAny()`方法。这些方法接收`Callable`对象作为参数。`ForkJoinPool`类不会使用工作窃取算法处理`Callable`对象，因此最好使用执行器来执行它们。
- en: 'The `ForkJoinTask` class also includes other versions of the `invokeAll()`
    method used in the example. These versions are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForkJoinTask`类还包括在示例中使用的`invokeAll()`方法的其他版本。这些版本如下：'
- en: '`invokeAll(ForkJoinTask<?>... tasks)`: This version of the method uses a variable
    list of arguments. You can pass to it as parameters as many `ForkJoinTask` objects
    as you want.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`invokeAll(ForkJoinTask<?>... tasks)`: 这个方法的版本使用可变参数列表。你可以传递任意数量的`ForkJoinTask`对象作为参数。'
- en: '`invokeAll(Collection<T> tasks)`: This version of the method accepts a collection
    (for example, an `ArrayList` object, a `LinkedList` object, or a `TreeSet` object)
    of objects of a generic type `T`. This generic type `T` must be the `ForkJoinTask`
    class or a subclass of it.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`invokeAll(Collection<T> tasks)`: 这个方法的版本接受一个泛型类型`T`的对象集合（例如`ArrayList`对象、`LinkedList`对象或`TreeSet`对象）。这个泛型类型`T`必须是`ForkJoinTask`类或它的子类。'
- en: Although the `ForkJoinPool` class is designed to execute an object of `ForkJoinTask`,
    you can also execute `Runnable` and `Callable` objects directly. You may also
    use the `adapt()` method of the `ForkJoinTask` class that accepts a `Callable`
    object or a `Runnable` object and returns a `ForkJoinTask` object to execute that
    task.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`ForkJoinPool`类设计用于执行`ForkJoinTask`对象，但你也可以直接执行`Runnable`和`Callable`对象。你还可以使用`ForkJoinTask`类的`adapt()`方法，该方法接受一个`Callable`对象或`Runnable`对象，并返回一个`ForkJoinTask`对象来执行该任务。
- en: See also
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Monitoring a Fork/Join pool* recipe in [Chapter 8](ch08.html "Chapter 8. Testing
    Concurrent Applications"), *Testing concurrent applications*
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.html "第8章 测试并发应用")的*监视Fork/Join池*中
- en: Joining the results of the tasks
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并任务的结果
- en: The Fork/Join framework provides the ability of executing tasks that return
    a result. These kinds of tasks are implemented by the `RecursiveTask` class. This
    class extends the `ForkJoinTask` class and implements the `Future` interface provided
    by the Executor framework.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Fork/Join框架提供了执行返回结果的任务的能力。这些任务由`RecursiveTask`类实现。这个类扩展了`ForkJoinTask`类，并实现了Executor框架提供的`Future`接口。
- en: 'Inside the task, you have to use the structure recommended by the Java API
    documentation:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务内部，你必须使用Java API文档推荐的结构：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If the task has to resolve a problem bigger than a predefined size, you divide
    the problem in more subtasks and execute those subtasks using the Fork/Join framework.
    When they finish their execution, the initiating task obtains the results generated
    by all the subtasks, groups them, and returns the final result. Ultimately, when
    the initiating task executed in the pool finishes its execution, you obtain its
    result that is effectively the final result of the entire problem.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任务需要解决的问题比预定义的大小更大，你可以将问题分解为更多的子任务，并使用Fork/Join框架执行这些子任务。当它们完成执行时，发起任务获取所有子任务生成的结果，对它们进行分组，并返回最终结果。最终，当池中执行的发起任务完成执行时，你获得它的结果，这实际上是整个问题的最终结果。
- en: 'In this recipe, you will learn how to use this kind of problem solving with
    Fork/Join framework developing an application that looks for a word in a document.
    You will implement the following two kinds of tasks:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将学习如何使用Fork/Join框架解决问题，开发一个在文档中查找单词的应用程序。你将实现以下两种任务：
- en: A document task, which is going to search a word in a set of lines of a document
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文档任务，用于在文档的一组行中搜索单词
- en: A line task, which is going to search a word in a part of the document
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一行任务，用于在文档的一部分中搜索单词
- en: All the tasks are going to return the number of appearances of the word in the
    part of the document or line they process.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 所有任务将返回它们处理的文档或行中单词出现的次数。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to implement the example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现示例：
- en: Create a class named `Document`. It will generate a string matrix that will
    simulate a document.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Document`的类。它将生成一个模拟文档的字符串矩阵。
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Create an array of strings with some words. This array will be used in the generation
    of the strings matrix.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含一些单词的字符串数组。这个数组将在生成字符串矩阵时使用。
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Implement the `generateDocument()` method. It receives as parameters the number
    of lines, the number of words per line, and the word the example is going to look
    for. It returns a matrix of strings.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`generateDocument()`方法。它接收行数、每行单词数和示例将要查找的单词作为参数。它返回一个字符串矩阵。
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'First, create the necessary objects to generate the document: the `String`
    matrix and a `Random` object to generate random numbers.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建必要的对象来生成文档：`String`矩阵和一个`Random`对象来生成随机数。
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Fill the array with strings. Store in each position the string which is at a
    random position in the array of words and count the number of appearances of the
    word the program will look for in the generated array. You can use this value
    to check whether the program does its job properly.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用字符串填充数组。在每个位置存储数组中随机位置的字符串，并计算程序将在生成的数组中查找的单词出现的次数。您可以使用这个值来检查程序是否正确执行其任务。
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Write a message with the number of appearances of the word and return the matrix
    generated.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一条消息，其中包含单词出现的次数，并返回生成的矩阵。
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create a class named `DocumentTask` and specify that it extends the `RecursiveTask`
    class parameterized with the `Integer` class. This class will implement the task
    that will calculate the number of appearances of the word in a set of lines.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`DocumentTask`的类，并指定它扩展了参数为`Integer`类的`RecursiveTask`类。这个类将实现计算一组行中单词出现次数的任务。
- en: '[PRE35]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Declare a private `String` matrix named `document` and two private `int` attributes
    named `start` and `end`. Declare also a private `String` attribute named `word`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个私有的`String`矩阵，名为`document`，和两个私有的`int`属性，名为`start`和`end`。还声明一个私有的`String`属性，名为`word`。
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Implement the constructor of the class to initialize all its attributes.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类的构造函数以初始化所有属性。
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Implement the `compute()` method. If the difference between the `end` and `start`
    attributes is smaller than 10, the task calculates the number of appearances of
    a word in the lines between those positions calling the `processLines()` method.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`compute()`方法。如果`end`和`start`属性之间的差小于10，任务将调用`processLines()`方法计算这些位置之间行中单词出现的次数。
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Otherwise, divide the group of lines in two objects, create two new `DocumentTask`
    objects to process those two groups, and execute them in the pool using the `invokeAll()`
    method.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，将行组分成两个对象，创建两个新的`DocumentTask`对象来处理这两组，并使用`invokeAll()`方法在池中执行它们。
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Then, add the values returned by both tasks using the `groupResults()` method.
    Finally, return the result calculated by the task.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用`groupResults()`方法添加两个任务返回的值。最后，返回任务计算的结果。
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Implement the `processLines()` method. It receives the string matrix, the `start`
    attribute, the `end` attribute, and the `word` attribute the task is searching
    for as parameters.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`processLines()`方法。它接收字符串矩阵、`start`属性、`end`属性和`word`属性作为参数，任务是搜索的单词。
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: For each line the task has to process, create a `LineTask` object to process
    the complete line, and store them in a list of tasks.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于任务需要处理的每一行，创建一个`LineTask`对象来处理整行，并将它们存储在任务列表中。
- en: '[PRE42]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Execute all the tasks in that list using the `invokeAll()` method.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`invokeAll()`方法执行列表中的所有任务。
- en: '[PRE43]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Sum the value returned by all these tasks and return the result.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些任务返回的值相加，并返回结果。
- en: '[PRE44]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Implement the `groupResults()` method. It adds two numbers and returns the result.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`groupResults()`方法。它将两个数字相加并返回结果。
- en: '[PRE45]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Create a class named `LineTask` and specify that it extends the `RecursiveTask`
    class parameterized with the `Integer` class. This class will implement the task
    that will calculate the number of appearances of the word in a line.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`LineTask`的类，并指定它扩展了参数为`Integer`类的`RecursiveTask`类。这个类将实现计算一行中单词出现次数的任务。
- en: '[PRE46]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Declare the serial version UID of the class. This element is necessary because
    the parent class of the `RecursiveTask` class, the `ForkJoinTask` class, implements
    the `Serializable` interface. Declare a private `String` array attribute named
    `line` and two private `int` attributes named `start` and `end`. Finally, declare
    a private `String` attribute named `word`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明类的序列化版本UID。这个元素是必要的，因为`RecursiveTask`类的父类`ForkJoinTask`类实现了`Serializable`接口。声明一个私有的`String`数组属性，名为`line`，和两个私有的`int`属性，名为`start`和`end`。最后，声明一个私有的`String`属性，名为`word`。
- en: '[PRE47]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Implement the constructor of the class to initialize all its attributes.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类的构造函数以初始化所有属性。
- en: '[PRE48]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Implement the `compute()` method of the class. If the difference between the
    `end` and`start` attributes is smaller than 100, the task searches for the word
    in the fragment of the line determined by the `start` and `end` attributes using
    the `count()` method.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类的`compute()`方法。如果`end`和`start`属性之间的差小于100，任务将使用`count()`方法在由`start`和`end`属性确定的行片段中搜索单词。
- en: '[PRE49]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Otherwise, divide the group of words in the line in two, create two new `LineTask`
    objects to process those two groups, and execute them in the pool using the `invokeAll()`
    method.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，将行中的单词组分成两部分，创建两个新的`LineTask`对象来处理这两组，并使用`invokeAll()`方法在池中执行它们。
- en: '[PRE50]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Then, add the values returned by both tasks using the `groupResults()` method.
    Finally, return the result calculated by the task.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用`groupResults()`方法添加两个任务返回的值。最后，返回任务计算的结果。
- en: '[PRE51]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Implement the `count()` method. It receives the string array with the complete
    line, the `star` attribute, the `end` attribute, and the `word` attribute the
    task is searching for as parameters.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`count()`方法。它接收完整行的字符串数组，`star`属性，`end`属性和作为参数搜索任务的`word`属性。
- en: '[PRE52]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Compare the words stored in the positions between the `start` and `end` attributes
    with the `word` attribute the task is searching for and if they are equal, increment
    a `counter` variable.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将存储在`start`和`end`属性之间位置的单词与任务正在搜索的`word`属性进行比较，如果它们相等，则增加一个`counter`变量。
- en: '[PRE53]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: To slow the execution of the example, put the task to sleep for 10 milliseconds.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了减慢示例的执行，让任务休眠10毫秒。
- en: '[PRE54]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Return the value of the `counter` variable.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`counter`变量的值。
- en: '[PRE55]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Implement the `groupResults()` method. It sums two numbers and returns the result.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`groupResults()`方法。它将两个数字相加并返回结果。
- en: '[PRE56]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Implement the main class of the example by creating a class named `Main` with
    a `main()` method.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为`Main`的类并实现一个`main()`方法来实现示例的主类。
- en: '[PRE57]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Create `Document` with 100 lines and 1,000 words per line using the `DocumentMock`
    class.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DocumentMock`类创建一个包含100行和每行1,000个单词的`Document`。
- en: '[PRE58]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Create a new `DocumentTask` object to update the products of the entire document.
    The parameter `start` takes the value `0` and the `end` parameter takes the value
    `100`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`DocumentTask`对象来更新整个文档的产品。参数`start`取值`0`，`end`参数取值`100`。
- en: '[PRE59]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Create a `ForkJoinPool` object using the constructor without parameters and
    execute the task in the pool using the `execute()` method.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带参数的构造函数创建一个`ForkJoinPool`对象，并使用`execute()`方法在池中执行任务。
- en: '[PRE60]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Implement a block of code that shows information about the progress of the pool
    writing every second to the console the value of some parameters of the pool until
    the task finishes its execution.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一段代码块，每秒向控制台写入池的一些参数值，直到任务完成执行为止，显示有关池进度的信息。
- en: '[PRE61]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Shut down the pool using the `shutdown()` method.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`shutdown()`方法关闭池。
- en: '[PRE62]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Wait for the finalization of the tasks using the `awaitTermination()` method.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`awaitTermination()`方法等待任务的完成。
- en: '[PRE63]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Write the number of the appearances of the word in the document. Check that
    this number is the same as the number written by the `DocumentMock` class.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下单词在文档中出现的次数。检查这个数字是否与`DocumentMock`类写的数字相同。
- en: '[PRE64]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example, you have implemented two different tasks:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您实现了两个不同的任务：
- en: 'The `DocumentTask` class: A task of this class has to process a set of lines
    of the document determined by the `start` and `end` attributes. If this set of
    lines has a size smaller that 10, it creates `LineTask` per line, and when they
    finish their execution, it sums the results of those tasks and returns the result
    of the sum. If the set of lines the task has to process has a size of 10 or bigger,
    it divides the set in two and creates two `DocumentTask` objects to process those
    new sets. When those tasks finish their execution, the tasks sum their results
    and return that sum as a result.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DocumentTask`类：这个类的任务是处理由`start`和`end`属性确定的文档行集合。如果这组行的大小小于10，它为每行创建一个`LineTask`，当它们完成执行时，它将这些任务的结果相加并返回总和的结果。如果任务必须处理的行集合大小为10或更大，它将这个集合分成两部分，并创建两个`DocumentTask`对象来处理这些新集合。当这些任务完成执行时，任务将它们的结果相加并返回该总和作为结果。'
- en: 'The `LineTask` class: A task of this class has to process a set of words of
    a line of the document. If this set of words is smaller than 100, the task searches
    the word directly in that set of words and returns the number of appearances of
    the word. Otherwise, it divides the set of words in two and creates two `LineTask`
    objects to process those sets. When those tasks finish their execution, the task
    sums the results of both tasks and returns that sum as a result.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LineTask`类：这个类的任务是处理文档行的一组单词。如果这组单词小于100，任务直接在这组单词中搜索单词并返回单词出现的次数。否则，它将这组单词分成两部分，并创建两个`LineTask`对象来处理这些集合。当这些任务完成执行时，任务将两个任务的结果相加，并将该总和作为结果返回。'
- en: In the `Main` class, you have created a `ForkJoinPool` object using the default
    constructor and you have executed in it a `DocumentTask` class that has to process
    a document of 100 lines and 1,000 words per line. This task is going to divide
    the problem using other `DocumentTask` objects and `LineTask` objects, and when
    all the tasks finish their execution, you can use the original task to get the
    total number of appearances of the word in the whole document. Since the tasks
    return a result, they extend the `RecursiveTask` class.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Main`类中，您使用默认构造函数创建了一个`ForkJoinPool`对象，并在其中执行了一个`DocumentTask`类，该类必须处理100行文档，每行1,000个单词。这个任务将使用其他`DocumentTask`对象和`LineTask`对象来分解问题，当所有任务完成执行时，您可以使用原始任务来获取整个文档中单词出现的总次数。由于任务返回一个结果，它们扩展了`RecursiveTask`类。
- en: To obtain the result returned by `Task`, you have used the `get()` method. This
    method is declared in the `Future` interface implemented by the `RecursiveTask`
    class.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得`Task`返回的结果，您使用了`get()`方法。这个方法在`RecursiveTask`类中声明。
- en: When you execute the program, you can compare the first and the last lines written
    in the console. The first line is the number of appearances of the word calculated
    when the document is generated and the last is the same number calculated by the
    Fork/Join tasks.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行程序时，您可以比较控制台中写的第一行和最后一行。第一行是在生成文档时计算单词出现次数，最后一行是由Fork/Join任务计算的相同数字。
- en: There's more...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `ForkJoinTask` class provides another method to finish execution of a task
    and returns a result, that is, the `complete()` method. This method accepts an
    object of the type used in the parameterization of the `RecursiveTask` class and
    returns that object as a result of the task when the `join()` method is called.
    It's use is recommended to provide results for asynchronous tasks.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForkJoinTask`类提供了另一个方法来完成任务的执行并返回结果，即`complete()`方法。此方法接受`RecursiveTask`类参数化中使用的类型的对象，并在调用`join()`方法时将该对象作为任务的结果返回。建议使用它来为异步任务提供结果。'
- en: 'Since the `RecursiveTask` class implements the `Future` interface, there''s
    another version of the `get()` method:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`RecursiveTask`类实现了`Future`接口，因此`get()`方法还有另一个版本：
- en: '`get(long timeout, TimeUnit unit)`: This version of the `get()` method, if
    the result of the task isn''t available, waits the specified time for it. If the
    specified period of time passes and the result isn''t yet available, the method
    returns a `null` value. The `TimeUnit` class is an enumeration with the following
    constants: `DAYS`, `HOURS`, `MICROSECONDS`, `MILLISECONDS`, `MINUTES`, `NANOSECONDS`,
    and `SECONDS`.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get(long timeout, TimeUnit unit)`: 此版本的`get()`方法，如果任务的结果不可用，将等待指定的时间。如果指定的时间段过去，结果尚不可用，则该方法返回`null`值。`TimeUnit`类是一个枚举，具有以下常量：`DAYS`，`HOURS`，`MICROSECONDS`，`MILLISECONDS`，`MINUTES`，`NANOSECONDS`和`SECONDS`。'
- en: See also
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a Fork/Join pool* recipe in [Chapter 5](ch05.html "Chapter 5. Fork/Join
    Framework"), *Fork/Join Framework*
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。Fork/Join Framework")的*创建Fork/Join池*配方中，*Fork/Join Framework*
- en: The *Monitoring a Fork/Join Pool* recipe in [Chapter 8](ch08.html "Chapter 8. Testing
    Concurrent Applications"), *Testing concurrent applications*
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.html "第8章。测试并发应用程序")的*监视Fork/Join池*配方中，*测试并发应用程序*
- en: Running tasks asynchronously
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步运行任务
- en: When you execute `ForkJoinTask` in `ForkJoinPool`, you can do it in a synchronous
    or asynchronous way. When you do it in a synchronous way, the method that sends
    the task to the pool doesn't return until the task sent finishes its execution.
    When you do it in an asynchronous way, the method that sends the task to the executor
    returns immediately, so the task can continue with its execution.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在`ForkJoinPool`中执行`ForkJoinTask`时，可以以同步或异步方式执行。当以同步方式执行时，将任务发送到池的方法直到任务完成执行才返回。当以异步方式执行时，将任务发送到执行程序的方法立即返回，因此任务可以继续执行。
- en: You should be aware of a big difference between the two methods. When you use
    the synchronized methods, the task that calls one of these methods (for example,
    the `invokeAll()` method) is suspended until the tasks it sent to the pool finish
    their execution. This allows the `ForkJoinPool` class to use the work-stealing
    algorithm to assign a new task to the worker thread that executed the sleeping
    task. On the contrary, when you use the asynchronous methods (for example, the
    `fork()` method), the task continues with its execution, so the `ForkJoinPool`
    class can't use the work-stealing algorithm to increase the performance of the
    application. In this case, only when you call the `join()` or `get()` methods
    to wait for the finalization of a task, the `ForkJoinPool` class can use that
    algorithm.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意两种方法之间的重大区别。当您使用同步方法时，调用其中一个方法的任务（例如`invokeAll()`方法）将被挂起，直到它发送到池的任务完成执行。这允许`ForkJoinPool`类使用工作窃取算法将新任务分配给执行休眠任务的工作线程。相反，当您使用异步方法（例如`fork()`方法）时，任务将继续执行，因此`ForkJoinPool`类无法使用工作窃取算法来提高应用程序的性能。在这种情况下，只有当您调用`join()`或`get()`方法等待任务的完成时，`ForkJoinPool`类才能使用该算法。
- en: In this recipe, you will learn how to use the asynchronous methods provided
    by the `ForkJoinPool` and `ForkJoinTask` classes for the management of tasks.
    You are going to implement a program that will search for files with a determined
    extension inside a folder and its subfolders. The `ForkJoinTask` class you're
    going to implement will process the content of a folder. For each subfolder inside
    that folder, it will send a new task to the `ForkJoinPool` class in an asynchronous
    way. For each file inside that folder, the task will check the extension of the
    file and add it to the result list if it proceeds.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，您将学习如何使用`ForkJoinPool`和`ForkJoinTask`类提供的异步方法来管理任务。您将实现一个程序，该程序将在文件夹及其子文件夹中搜索具有确定扩展名的文件。您要实现的`ForkJoinTask`类将处理文件夹的内容。对于该文件夹中的每个子文件夹，它将以异步方式向`ForkJoinPool`类发送一个新任务。对于该文件夹中的每个文件，任务将检查文件的扩展名，并将其添加到结果列表中（如果适用）。
- en: How to do it...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to implement the example:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现示例：
- en: Create a class named `FolderProcessor` and specify that it extends the `RecursiveTask`
    class parameterized with the `List<String>` type.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`FolderProcessor`的类，并指定它扩展了使用`List<String>`类型参数化的`RecursiveTask`类。
- en: '[PRE65]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Declare the serial version UID of the class. This element is necessary because
    the parent class of the `RecursiveTask` class, the `ForkJoinTask` class, implements
    the `Serializable` interface.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明类的序列版本UID。这个元素是必需的，因为`RecursiveTask`类的父类`ForkJoinTask`类实现了`Serializable`接口。
- en: '[PRE66]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Declare a private `String` attribute named `path`. This attribute will store
    the full path of the folder this task is going to process.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`path`的私有`String`属性。此属性将存储此任务要处理的文件夹的完整路径。
- en: '[PRE67]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Declare a private `String` attribute named `extension`. This attribute will
    store the name of the extension of the files this task is going to look for.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`extension`的私有`String`属性。此属性将存储此任务要查找的文件的扩展名。
- en: '[PRE68]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Implement the constructor of the class to initialize its attributes.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类的构造函数以初始化其属性。
- en: '[PRE69]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Implement the `compute()` method. As you parameterized the `RecursiveTask` class
    with the `List<String>` type, this method has to return an object of that type.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`compute()`方法。由于您使用`List<String>`类型参数化了`RecursiveTask`类，因此此方法必须返回该类型的对象。
- en: '[PRE70]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Declare a list of `String` objects to store the names of the files stored in
    the folder.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`String`对象列表，用于存储存储在文件夹中的文件的名称。
- en: '[PRE71]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Declare a list of `FolderProcessor` tasks to store the subtasks that are going
    to process the subfolders stored in the folder.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`FolderProcessor`任务列表，用于存储将处理存储在文件夹中的子文件夹的子任务。
- en: '[PRE72]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Get the content of the folder.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取文件夹的内容。
- en: '[PRE73]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: For each element in the folder, if there is a subfolder, create a new `FolderProcessor`
    object and execute it asynchronously using the `fork()` method.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于文件夹中的每个元素，如果有子文件夹，则创建一个新的`FolderProcessor`对象，并使用`fork()`方法异步执行它。
- en: '[PRE74]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Otherwise, compare the extension of the file with the extension you are looking
    for using the `checkFile()` method and, if they are equal, store the full path
    of the file in the list of strings declared earlier.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，使用`checkFile()`方法比较文件的扩展名与您要查找的扩展名，如果它们相等，则将文件的完整路径存储在先前声明的字符串列表中。
- en: '[PRE75]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: If the list of the `FolderProcessor` subtasks has more than 50 elements, write
    a message to the console to indicate this circumstance.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`FolderProcessor`子任务列表的元素超过50个，向控制台写入消息以指示此情况。
- en: '[PRE76]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Call the auxiliary method`addResultsFromTask()` that will add to the list of
    files the results returned by the subtasks launched by this task. Pass to it as
    parameters the list of strings and the list of the `FolderProcessor` subtasks.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用辅助方法`addResultsFromTask()`，该方法将由此任务启动的子任务返回的结果添加到文件列表中。将字符串列表和`FolderProcessor`子任务列表作为参数传递给它。
- en: '[PRE77]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Return the list of strings.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回字符串列表。
- en: '[PRE78]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Implement the `addResultsFromTasks()` method. For each task stored in the list
    of tasks, call the `join()` method that will wait for its finalization and then
    will return the result of the task. Add that result to the list of strings using
    the `addAll()` method.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`addResultsFromTasks()`方法。对于存储在任务列表中的每个任务，调用`join()`方法等待其完成，然后将任务的结果使用`addAll()`方法添加到字符串列表中。
- en: '[PRE79]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Implement the `checkFile()` method. This method compares if the name of a file
    passed as a parameter ends with the extension you are looking for. If so, the
    method returns the `true` value, otherwise it returns the `false` value.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`checkFile()`方法。该方法比较传递的文件名是否以你要查找的扩展名结尾。如果是，则该方法返回`true`值，否则返回`false`值。
- en: '[PRE80]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Implement the main class of the example by creating a class named `Main` with
    a `main()` method.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为`Main`的类并实现一个`main()`方法来实现示例的主类。
- en: '[PRE81]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Create `ForkJoinPool` using the default constructor.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认构造函数创建`ForkJoinPool`。
- en: '[PRE82]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Create three `FolderProcessor` tasks. Initialize each one with a different folder
    path.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个`FolderProcessor`任务。使用不同的文件夹路径初始化每个任务。
- en: '[PRE83]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Execute the three tasks in the pool using the `execute()` method.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`execute()`方法在池中执行三个任务。
- en: '[PRE84]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Write to the console information about the status of the pool every second until
    the three tasks have finished their execution.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每秒向控制台写入有关池状态的信息，直到三个任务完成执行。
- en: '[PRE85]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Shut down `ForkJoinPool` using the `shutdown()` method.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`shutdown()`方法关闭`ForkJoinPool`。
- en: '[PRE86]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Write the number of results generated by each task to the console.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个任务生成的结果数量写入控制台。
- en: '[PRE87]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The following screenshot shows part of an execution of this example:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了此示例的部分执行：
- en: '![How it works...](img/7881_05_03.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/7881_05_03.jpg)'
- en: 'The key of this example is in the `FolderProcessor` class. Each task processes
    the content of a folder. As you know, this content has the following two kinds
    of elements:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的关键在于`FolderProcessor`类。每个任务处理文件夹的内容。正如您所知，此内容具有以下两种元素：
- en: Files
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件
- en: Other folders
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他文件夹
- en: If the task finds a folder, it creates another `Task` object to process that
    folder and sends it to the pool using the `fork()` method. This method sends the
    task to the pool that will execute it if it has a free worker-thread or it can
    create a new one. The method returns immediately, so the task can continue processing
    the content of the folder. For every file, a task compares its extension with
    the one it's looking for and, if they are equal, adds the name of the file to
    the list of results.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任务找到一个文件夹，它会创建另一个`Task`对象来处理该文件夹，并使用`fork()`方法将其发送到池中。该方法将任务发送到池中，如果有空闲的工作线程，它将执行该任务，或者它可以创建一个新的工作线程。该方法立即返回，因此任务可以继续处理文件夹的内容。对于每个文件，任务将其扩展名与要查找的扩展名进行比较，如果它们相等，则将文件名添加到结果列表中。
- en: Once the task has processed all the content of the assigned folder, it waits
    for the finalization of all the tasks it sent to the pool using the `join()` method.
    This method called in a task waits for the finalization of its execution and returns
    the value returned by the `compute()` method. The task groups the results of all
    the tasks it sent with its own results and returns that list as a return value
    of the `compute()` method.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦任务处理了分配的文件夹的所有内容，它将等待通过`join()`方法发送到池中的所有任务的完成。在任务中调用的此方法等待其执行的完成，并返回`compute()`方法返回的值。任务将其自己的结果与其发送的所有任务的结果分组，并将该列表作为`compute()`方法的返回值返回。
- en: The `ForkJoinPool` class also allows the execution of tasks in an asynchronous
    way. You have used the `execute()` method to send the three initial tasks to the
    pool. In the `Main` class, you also finished the pool using the `shutdown()` method
    and wrote information about the status and the evolution of the tasks that are
    running in it. The `ForkJoinPool` class includes more methods that can be useful
    for this purpose. See the *Monitoring a Fork/Join pool* recipe to see a complete
    list of those methods.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForkJoinPool`类还允许以异步方式执行任务。您已经使用`execute()`方法将三个初始任务发送到池中。在`Main`类中，您还使用`shutdown()`方法完成了池，并编写了有关正在其中运行的任务的状态和进展的信息。`ForkJoinPool`类包括更多对此有用的方法。请参阅*监视Fork/Join池*配方，以查看这些方法的完整列表。'
- en: There's more...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this example, you have used the `join()` method to wait for the finalization
    of tasks and get their results. You can also use one of the two versions of the
    `get()` method with this purpose:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您已经使用`join()`方法等待任务的完成并获取它们的结果。您还可以使用`get()`方法的两个版本之一来实现这个目的：
- en: '`get()`: This version of the `get()` method returns the value returned by the
    `compute()` method if `ForkJoinTask` has finished its execution, or waits until
    its finalization.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()`：如果`ForkJoinTask`已经完成执行，此版本的`get()`方法将返回`compute()`方法返回的值，或者等待直到其完成。'
- en: '`get(long timeout, TimeUnit unit)`: This version of the `get()` method, if
    the result of the task isn''t available, waits the specified time for it. If the
    specified period of time passes and the result isn''t yet available, the method
    returns a `null` value. The `TimeUnit` class is an enumeration with the following
    constants: `DAYS`, `HOURS`, `MICROSECONDS`, `MILLISECONDS`, `MINUTES`, `NANOSECONDS`,
    and `SECONDS`.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get(long timeout, TimeUnit unit)`：如果任务的结果不可用，此版本的`get()`方法将等待指定的时间。如果经过指定的时间段，结果仍然不可用，该方法将返回一个`null`值。`TimeUnit`类是一个枚举，具有以下常量：`DAYS`、`HOURS`、`MICROSECONDS`、`MILLISECONDS`、`MINUTES`、`NANOSECONDS`和`SECONDS`。'
- en: 'There are two main differences between the `get()` and the `join()` methods:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`和`join()`方法之间有两个主要区别：'
- en: The `join()` method can't be interrupted. If you interrupt the thread that called
    the `join()` method, the method throws an `InterruptedException` exception.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join()`方法无法被中断。如果中断调用`join()`方法的线程，该方法将抛出`InterruptedException`异常。'
- en: While the `get()` method will return an `ExecutionException` exception if the
    tasks throw any unchecked exception, the `join()` method will return a `RuntimeException`
    exception.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()`方法将在任务抛出任何未检查的异常时返回`ExecutionException`异常，而`join()`方法将返回`RuntimeException`异常。'
- en: See also
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a Fork/Join pool* recipe in [Chapter 5](ch05.html "Chapter 5. Fork/Join
    Framework"), *Fork/Join Framework*
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。Fork/Join Framework")的*创建Fork/Join池*配方中，*Fork/Join Framework*
- en: The *Monitoring a Fork/Join pool* recipe in [Chapter 8](ch08.html "Chapter 8. Testing
    Concurrent Applications"), *Testing concurrent applications*
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.html "第8章。测试并发应用")的*监视Fork/Join池*配方中，*测试并发应用*
- en: Throwing exceptions in the tasks
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在任务中抛出异常
- en: 'There are two kinds of exceptions in Java:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Java中有两种异常：
- en: '**Checked exceptions**: These exceptions must be specified in the `throws`
    clause of a method or caught inside them. For example, `IOException` or `ClassNotFoundException`.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已检查的异常**：这些异常必须在方法的`throws`子句中指定，或者在其中捕获。例如，`IOException`或`ClassNotFoundException`。'
- en: '**Unchecked exceptions**: These exceptions don''t have to be specified or caught.
    For example, `NumberFormatException`.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未检查的异常**：这些异常不需要被指定或捕获。例如，`NumberFormatException`。'
- en: You can't throw any checked exception in the `compute()` method of the `ForkJoinTask`
    class, because this method doesn't include any throws declaration in its implementation.
    You have to include the necessary code to handle exceptions. On the other hand,
    you can throw (or it can be thrown by any method or object used inside the method)
    an unchecked exception. The behavior of the `ForkJoinTask` and `ForkJoinPool`
    classes is different from what you may expect. The program doesn't finish execution
    and you won't see any information about the exception in the console. It's simply
    swallowed as if it weren't thrown. You can, however, use some methods of the `ForkJoinTask`
    class to know if a task threw an exception and what kind of exception it was.
    In this recipe, you will learn how to get that information.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能在`ForkJoinTask`类的`compute()`方法中抛出任何已检查的异常，因为该方法在其实现中不包括任何throws声明。您必须包含必要的代码来处理异常。另一方面，您可以抛出（或者可以由方法或方法内部使用的对象抛出）未检查的异常。`ForkJoinTask`和`ForkJoinPool`类的行为与您可能期望的不同。程序不会完成执行，您也不会在控制台上看到有关异常的任何信息。它会被简单地吞没，就好像它没有被抛出一样。但是，您可以使用`ForkJoinTask`类的一些方法来了解任务是否抛出了异常以及异常的类型。在本配方中，您将学习如何获取这些信息。
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The example of this recipe has been implemented using the Eclipse IDE. If you
    use Eclipse or other IDE such as NetBeans, open it and create a new Java project.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例是使用Eclipse IDE实现的。如果您使用Eclipse或其他IDE，如NetBeans，请打开它并创建一个新的Java项目。
- en: How to do it...
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to implement the example:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现示例：
- en: Create a class named `Task`. Specify that it implements the `RecursiveTask`
    class parameterized with the `Integer` class.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Task`的类。指定它实现了使用`Integer`类参数化的`RecursiveTask`类。
- en: '[PRE88]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Declare a private `int` array named `array`. It will simulate the array of data
    you are going to process in this example.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`array`的私有`int`数组。它将模拟您将在本示例中处理的数据数组。
- en: '[PRE89]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Declare two private `int` attributes named `start` and `end`. These attributes
    will determine the elements of the array this task has to process.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明两个私有`int`属性，名为`start`和`end`。这些属性将确定该任务必须处理的数组元素。
- en: '[PRE90]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Implement the constructor of the class that initializes its attributes.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现初始化其属性的类的构造函数。
- en: '[PRE91]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Implement the `compute()` method of the task. As you parameterized the `RecursiveTask`
    class with the `Integer` class, this method has to return an `Integer` object.
    First, write a message to the console with the value of the `start` and `end`
    attributes.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现任务的`compute()`方法。由于您使用`Integer`类对`RecursiveTask`类进行了参数化，因此该方法必须返回一个`Integer`对象。首先，在控制台上写入`start`和`end`属性的值。
- en: '[PRE92]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: If the block of elements that this task has to process, determined by the `start`
    and `end` attributes, has a size smaller than 10, check if the element in the
    fourth position in the array (index number three) is in that block. If that is
    the case, throw a `RuntimeException` exception. Then, put the task to sleep for
    a second.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果该任务必须处理的元素块（由`start`和`end`属性确定）的大小小于10，请检查数组中第四个位置（索引号为3）的元素是否在该块中。如果是这样，抛出`RuntimeException`异常。然后，让任务休眠一秒钟。
- en: '[PRE93]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Otherwise (the block of elements that this task has to process has a size of
    10 or bigger), divide the block of elements in two, create two `Task` objects
    to process those blocks, and execute them in the pool using the `invokeAll()`
    method.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则（此任务需要处理的元素块的大小为10或更大），将元素块分成两部分，创建两个`Task`对象来处理这些块，并使用`invokeAll()`方法在池中执行它们。
- en: '[PRE94]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Write a message to the console indicating the end of the task writing the value
    of the `start` and `end` attributes.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向控制台写入一条消息，指示任务结束，并写入`start`和`end`属性的值。
- en: '[PRE95]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Return the number `0` as result of the task.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数字`0`作为任务的结果返回。
- en: '[PRE96]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Implement the main class of the example by creating a class named `Main` with
    a `main()` method.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为`Main`的类并创建一个`main()`方法来实现示例的主类。
- en: '[PRE97]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Create an array of 100 integer numbers.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含100个整数的数组。
- en: '[PRE98]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Create a `Task` object to process that array.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Task`对象来处理该数组。
- en: '[PRE99]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Create a `ForkJoinPool` object using the default constructor.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认构造函数创建一个`ForkJoinPool`对象。
- en: '[PRE100]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Execute the task in the pool using the `execute()` method.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`execute()`方法在池中执行任务。
- en: '[PRE101]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Shut down the `ForkJoinPool` class using the `shutdown()` method.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`shutdown()`方法关闭`ForkJoinPool`类。
- en: '[PRE102]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Wait for the finalization of the task using the `awaitTermination()` method.
    As you want to wait for the finalization of the task however long it takes to
    complete, pass the values `1` and `TimeUnit.DAYS` as parameters to this method.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`awaitTermination()`方法等待任务的完成。由于您希望等待任务的完成时间长达多久，因此将值`1`和`TimeUnit.DAYS`作为参数传递给此方法。
- en: '[PRE103]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Check if the task, or one of its subtasks, has thrown an exception using the
    `isCompletedAbnormally()` method. In that case, write a message to the console
    with the exception that was thrown. Get that exception with the `getException()`
    method of the `ForkJoinTask` class.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`isCompletedAbnormally()`方法检查任务或其子任务是否抛出异常。在这种情况下，使用`ForkJoinTask`类的`getException()`方法向控制台写入带有抛出的异常的消息。获取该异常。
- en: '[PRE104]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: How it works...
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Task` class you have implemented in this recipe processes an array of numbers.
    It checks if the block of numbers it has to process has 10 or more elements. In
    that case, it splits the block in two and creates two new `Task` objects to process
    those blocks. Otherwise, it looks for the element in the fourth position of the
    array (index number three). If that element is in the block the task has to process,
    it throws a `RuntimeException` exception.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您实现的`Task`类处理一个数字数组。它检查它需要处理的数字块是否有10个或更多元素。在这种情况下，它将块分成两部分，并创建两个新的`Task`对象来处理这些块。否则，它会查找数组的第四个位置（索引号为3）的元素。如果该元素在任务需要处理的块中，则会抛出`RuntimeException`异常。
- en: When you execute the program, the exception is thrown, but the program doesn't
    stop. In the `Main` class you have included a call to the `isCompletedAbnormally()`
    method of the `ForkJoinTask` class using the original task. This method returns
    `true` if that task, or one of its subtasks, has thrown an exception. You also
    used the `getException()` method of the same object to get the `Exception` object
    that it has thrown.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行程序时，会抛出异常，但程序不会停止。在`Main`类中，您已经包含了对`ForkJoinTask`类的`isCompletedAbnormally()`方法的调用，使用原始任务。如果该任务或其子任务中的一个抛出异常，则此方法返回`true`。您还使用了相同对象的`getException()`方法来获取它抛出的`Exception`对象。
- en: 'When you throw an unchecked exception in a task, it also affects its parent
    task (the task that sent it to the `ForkJoinPool` class) and the parent task of
    its parent task, and so on. If you revise all the output of the program, you''ll
    see that there aren''t output messages for the finalization of some tasks. The
    stating messages of those tasks are as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在任务中抛出一个未经检查的异常时，它也会影响其父任务（将其发送到`ForkJoinPool`类的任务）以及其父任务的父任务，依此类推。如果您审查程序的所有输出，您会发现某些任务的完成没有输出消息。这些任务的开始消息如下：
- en: '[PRE105]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: These tasks are the ones that threw the exception and its parent tasks. All
    of them have finished abnormally. Take this into account, when you develop a program
    with the `ForkJoinPool` and `ForkJoinTask` objects that can throw exceptions if
    you don't want this behavior.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务是抛出异常的任务及其父任务。它们全部都以异常方式完成。在开发使用`ForkJoinPool`和`ForkJoinTask`对象的程序时，如果不希望出现这种行为，应考虑这一点。
- en: 'The following screenshot shows part of an execution of this example:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了此示例的部分执行：
- en: '![How it works...](img/7881_05_04.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7881_05_04.jpg)'
- en: There's more...
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can obtain the same result obtained in the example, if instead of throwing
    an exception, you use the `completeExceptionally()` method of the `ForkJoinTask`
    class. The code would be like the following:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`ForkJoinTask`类的`completeExceptionally()`方法而不是抛出异常，则可以获得与示例中相同的结果。代码将如下所示：
- en: '[PRE106]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: See also
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a Fork/Join pool* recipe in [Chapter 5](ch05.html "Chapter 5. Fork/Join
    Framework"), *Fork/Join Framework*
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。Fork/Join Framework")的*创建Fork/Join池*示例中，*Fork/Join Framework*
- en: Canceling a task
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消任务
- en: 'When you execute the `ForkJoinTask` objects in a `ForkJoinPool` class, you
    can cancel them before they start their execution. The `ForkJoinTask` class provides
    the `cancel()` method for this purpose. There are some points you have to take
    into account when you want to cancel a task, which are as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在`ForkJoinPool`类中执行`ForkJoinTask`对象时，可以在它们开始执行之前取消它们。`ForkJoinTask`类提供了`cancel()`方法来实现此目的。当您想要取消一个任务时，有一些要考虑的要点，如下所示：
- en: The `ForkJoinPool` class doesn't provide any method to cancel all the tasks
    it has running or waiting in the pool
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForkJoinPool`类没有提供任何方法来取消它正在运行或等待在池中的所有任务'
- en: When you cancel a task, you don't cancel the tasks this task has executed
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您取消一个任务时，不会取消该任务执行的任务
- en: In this recipe, you will implement an example of cancelation of `ForkJoinTask`
    objects. You will look for the position of a number in an array. The first task
    that finds the number will cancel the remaining tasks. As that functionality is
    not provided by the Fork/Join framework, you will implement an auxiliary class
    to do this cancelation.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将实现取消`ForkJoinTask`对象的示例。您将在数组中查找一个数字的位置。找到数字的第一个任务将取消其余任务。由于Fork/Join框架没有提供此功能，您将实现一个辅助类来执行此取消操作。
- en: Getting ready...
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪...
- en: The example of this recipe has been implemented using the Eclipse IDE. If you
    use Eclipse or other IDE NetBeans, open it and create a new Java project
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例已使用Eclipse IDE实现。如果您使用Eclipse或其他IDE NetBeans，请打开它并创建一个新的Java项目
- en: How to do it...
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to implement the example:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现示例：
- en: Create a class named `ArrayGenerator`. This class will generate an array of
    random integer numbers with the specified size. Implement a method named `generateArray()`.
    It will generate the array of numbers. It receives the size of the array as a
    parameter.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ArrayGenerator`的类。该类将生成指定大小的随机整数数组。实现一个名为`generateArray()`的方法。它将生成数字数组。它接收数组的大小作为参数。
- en: '[PRE107]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Create a class named `TaskManager`. We will use this class to store all the
    tasks executed in `ForkJoinPool` used in the example. Due to the limitations of
    the `ForkJoinPool` and `ForkJoinTask` classes, you will use this class to cancel
    all the tasks of the `ForkJoinPool` class.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`TaskManager`的类。我们将使用这个类来存储在示例中使用的`ForkJoinPool`中执行的所有任务。由于`ForkJoinPool`和`ForkJoinTask`类的限制，您将使用此类来取消`ForkJoinPool`类的所有任务。
- en: '[PRE108]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Declare a list of objects parameterized with the `ForkJoinTask` class parameterized
    with the `Integer` class named `List`.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个参数化为`ForkJoinTask`类参数化为`Integer`类的对象列表，命名为`List`。
- en: '[PRE109]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Implement the constructor of the class. It initializes the list of tasks.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类的构造函数。它初始化任务列表。
- en: '[PRE110]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Implement the `addTask()` method. It adds a `ForkJoinTask` object to the lists
    of tasks.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`addTask()`方法。它将一个`ForkJoinTask`对象添加到任务列表中。
- en: '[PRE111]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Implement the `cancelTasks()` method. It will cancel all the `ForkJoinTask`
    objects stored in the list using the `cancel()` method. It receives as a parameter
    the `ForkJoinTask` object that wants to cancel the rest of the tasks. The method
    cancels all the tasks.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`cancelTasks()`方法。它将使用`cancel()`方法取消列表中存储的所有`ForkJoinTask`对象。它接收一个要取消其余任务的`ForkJoinTask`对象作为参数。该方法取消所有任务。
- en: '[PRE112]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Implement the `SearchNumberTask` class. Specify that it extends the `RecursiveTask`
    class parameterized with the `Integer` class. This class will look for a number
    in a block of elements of an integer array.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`SearchNumberTask`类。指定它扩展了参数化为`Integer`类的`RecursiveTask`类。该类将在整数数组的元素块中查找一个数字。
- en: '[PRE113]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Declare a private array of `int` numbers named `array`.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`array`的私有`int`数字数组。
- en: '[PRE114]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Declare two private `int` attributes named `start` and `end`. These attributes
    will determine the elements of the array this task has to process.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明两个私有的`int`属性，命名为`start`和`end`。这些属性将确定该任务需要处理的数组元素。
- en: '[PRE115]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Declare a private `int` attribute named `number` to store the number you are
    going to look for.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`number`的私有`int`属性，用于存储要查找的数字。
- en: '[PRE116]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Declare a private `TaskManager` attribute named `manager`. You will use this
    object to cancel all the tasks.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为`manager`的私有`TaskManager`属性。您将使用此对象来取消所有任务。
- en: '[PRE117]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Declare a private `int` constant and initialize it to the `-1` value. It will
    be the returned value by the task when it doesn't find the number.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个私有的`int`常量，并将其初始化为`-1`值。当任务找不到数字时，它将是任务的返回值。
- en: '[PRE118]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Implement the constructor of the class to initialize its attributes.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类的构造函数以初始化其属性。
- en: '[PRE119]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Implement the `compute()` method. Start the method by writing a message to the
    console indicating the values of the `start` and `end` attributes.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`compute()`方法。开始方法时，向控制台写入一条消息，指示`start`和`end`属性的值。
- en: '[PRE120]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: If the difference between the `start` and `end` attributes are bigger than 10
    (the task has to process more than 10 elements of the array), call the `launchTasks()`
    method to divide the work of this task in two subtasks.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`start`和`end`属性之间的差异大于10（任务需要处理数组的元素超过10个），则调用`launchTasks()`方法将该任务的工作分成两个子任务。
- en: '[PRE121]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Otherwise, look for the number in the block of the array this task that is calling
    the `lookForNumber()` method has to process.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，在调用`lookForNumber()`方法的任务所处理的数组块中查找数字。
- en: '[PRE122]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Return the result of the task.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回任务的结果。
- en: '[PRE123]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Implement the `lookForNumber()` method.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`lookForNumber()`方法。
- en: '[PRE124]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: For all the elements in the block of elements this task has to process, compare
    the value stored in that element with the number you are looking for. If they
    are equal, write a message to the console indicating that in such a circumstance
    use the `cancelTasks()` method of the `TaskManager` object to cancel all the tasks,
    and return the position of the element, where you found the number.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于该任务需要处理的元素块中的所有元素，将存储在该元素中的值与要查找的数字进行比较。如果它们相等，向控制台写入一条消息，指示在这种情况下使用`TaskManager`对象的`cancelTasks()`方法来取消所有任务，并返回找到数字的元素位置。
- en: '[PRE125]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Inside the loop, put the task to sleep for one second.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环内，使任务休眠一秒钟。
- en: '[PRE126]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Finally, return the `-1` value.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，返回`-1`值。
- en: '[PRE127]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Implement the `launchTasks()` method. First, divide the block of numbers this
    tasks has to process in two and then, create two `Task` objects to process them.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`launchTasks()`方法。首先，将这些任务需要处理的数字块分成两部分，然后创建两个`Task`对象来处理它们。
- en: '[PRE128]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Add the tasks to the `TaskManager` object.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任务添加到`TaskManager`对象。
- en: '[PRE129]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Execute the two tasks asynchronously using the `fork()` method.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`fork()`方法异步执行这两个任务。
- en: '[PRE130]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Wait for the finalization of the tasks and return the result of the first task
    if it is different, to `-1,` or the result of the second task.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待任务完成并返回第一个任务的结果（如果不同，则返回`-1`），或第二个任务的结果。
- en: '[PRE131]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Implement the `writeCancelMessage()` method to write a message when the task
    is canceled.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`writeCancelMessage()`方法，在任务被取消时写一条消息。
- en: '[PRE132]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Implement the main class of the example by creating a class named `Main` with
    a `main()` method.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为`Main`的类和一个`main()`方法来实现示例的主类。
- en: '[PRE133]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Create an array of 1,000 numbers using the `ArrayGenerator` class.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ArrayGenerator`类创建一个包含1,000个数字的数组。
- en: '[PRE134]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Create a `TaskManager` object.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`TaskManager`对象。
- en: '[PRE135]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Create a `ForkJoinPool` object using the default constructor.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认构造函数创建一个`ForkJoinPool`对象。
- en: '[PRE136]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Create a `Task` object to process the array generated before.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Task`对象来处理之前生成的数组。
- en: '[PRE137]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Execute the task in the pool asynchronously using the `execute()` method.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`execute()`方法在池中异步执行任务。
- en: '[PRE138]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Shut down the pool using the `shutdown()` method.
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`shutdown()`方法关闭池。
- en: '[PRE139]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Wait for the finalization of the tasks using the `awaitTermination()` method
    of the `ForkJoinPool` class.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ForkJoinPool`类的`awaitTermination()`方法等待任务的完成。
- en: '[PRE140]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Write a message to the console indicating the end of the program.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台上写一条消息，指示程序的结束。
- en: '[PRE141]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: How it works...
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ForkJoinTask` class provides the `cancel()` method that allows you to cancel
    a task if it hasn't been executed yet. This is a very important point. If the
    task has begun its execution, a call to the `cancel()` method has no effect. The
    method receives a parameter as a `Boolean` value called `mayInterruptIfRunning`.
    This name may make you think that, if you pass the `true` value to the method,
    the task will be canceled even if it is running. The Java API documentation specifies
    that, in the default implementation of the `ForkJoinTask` class, this attribute
    has no effect. The tasks are only canceled if they haven't started their execution.
    The cancelation of a task has no effect over the tasks that this task sent to
    the pool. They continue with their execution.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForkJoinTask`类提供了`cancel()`方法，允许您在任务尚未执行时取消任务。这是一个非常重要的点。如果任务已经开始执行，调用`cancel()`方法将没有效果。该方法接收一个名为`mayInterruptIfRunning`的`Boolean`值作为参数。这个名字可能会让你觉得，如果你向方法传递`true`值，即使任务正在运行，任务也会被取消。Java
    API文档指定，在`ForkJoinTask`类的默认实现中，这个属性没有效果。任务只有在尚未开始执行时才会被取消。取消任务对该任务发送到池中的任务没有影响。它们会继续执行。'
- en: A limitation of the Fork/Join framework is that it doesn't allow the cancelation
    of all the tasks that are in `ForkJoinPool`. To overcome that limitation, you
    have implemented the `TaskManager` class. It stores all the tasks that have been
    sent to the pool. It has a method that cancels all the tasks it has stored. If
    a task can't be canceled because it's running or it has finished, the `cancel()`
    method returns the `false` value, so you can try to cancel all the tasks without
    being afraid of possible collateral effects.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: Fork/Join框架的一个限制是它不允许取消`ForkJoinPool`中的所有任务。为了克服这个限制，您已经实现了`TaskManager`类。它存储了所有发送到池中的任务。它有一个方法可以取消它存储的所有任务。如果一个任务无法取消，因为它正在运行或已经完成，`cancel()`方法会返回`false`值，因此您可以尝试取消所有任务而不必担心可能的副作用。
- en: In the example, you have implemented a task that looks for a number in an array
    of numbers. You divide the problem into smaller sub-problems as the Fork/Join
    framework recommends. You are only interested in one occurrence of the number
    so, when you find it, you cancel the other tasks.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，您已经实现了一个任务，该任务在数字数组中查找一个数字。您按照Fork/Join框架的建议将问题分解为更小的子问题。您只对数字的一个出现感兴趣，所以当您找到它时，取消其他任务。
- en: 'The following screenshot shows part of an execution of this example:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此示例的部分执行：
- en: '![How it works...](img/7881_05_05.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7881_05_05.jpg)'
- en: See also
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a Fork/Join pool* recipe in [Chapter 5](ch05.html "Chapter 5. Fork/Join
    Framework"), *Fork/Join Framework*
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。Fork/Join Framework")的*创建Fork/Join池*配方中，*Fork/Join Framework*
