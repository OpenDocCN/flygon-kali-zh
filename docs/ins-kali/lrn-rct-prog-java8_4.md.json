["```java\nObservable<String> mapped = Observable\n  .just(2, 3, 5, 8)\n  .map(v -> v * 3)\n  .map(v -> (v % 2 == 0) ? \"even\" : \"odd\");\nsubscribePrint(mapped, \"map\");\n```", "```java\nObservable<Path> listFolder(Path dir, String glob) { // (1)\n  return Observable.<Path>create(subscriber -> {\n    try {\n      DirectoryStream<Path> stream = Files.newDirectoryStream(dir, glob);\n      subscriber.add(Subscriptions.create(() -> {\n        try {\n          stream.close();\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n      }));\n      Observable.<Path>from(stream).subscribe(subscriber);\n    }\n    catch (DirectoryIteratorException ex) {\n      subscriber.onError(ex);\n    }\n    catch (IOException ioe) {\n      subscriber.onError(ioe);\n    }\n  });\n}\nObservable<String> from(final Path path) { // (2)\n  return Observable.<String>create(subscriber -> {\n    try {\n      BufferedReader reader = Files.newBufferedReader(path);\n      subscriber.add(Subscriptions.create(() -> {\n        try {\n          reader.close();\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n        }\n      }));\n      String line = null;\n      while ((line = reader.readLine()) != null && !subscriber.isUnsubscribed()) {\n        subscriber.onNext(line);\n      }\n      if (!subscriber.isUnsubscribed()) {\n        subscriber.onCompleted();\n      }\n    }\n    catch (IOException ioe) {\n      if (!subscriber.isUnsubscribed()) {\n        subscriber.onError(ioe);\n      }\n    }\n  });\n}\nObservable<String> fsObs = listFolder(\n  Paths.get(\"src\", \"main\", \"resources\"), \"{lorem.txt,letters.txt}\"\n).flatMap(path -> from(path)); // (3)\nsubscribePrint(fsObs, \"FS\"); // (4)\n```", "```java\nObservable<Integer> flatMapped = Observable\n  .just(-1, 0, 1)\n  .map(v -> 2 / v)\n  .flatMap(\n v -> Observable.just(v),\n e -> Observable.just(0),\n () -> Observable.just(42)\n );\nsubscribePrint(flatMapped, \"flatMap\");\n```", "```java\nObservable<Integer> flatMapped = Observable\n.just(5, 432)\n.flatMap(\n v -> Observable.range(v, 2),\n (x, y) -> x + y);\nsubscribePrint(flatMapped, \"flatMap\");\n```", "```java\nflatMap : 10\nflatMap : 11\nflatMap : 864\nflatMap : 865\nflatMap ended!\n\n```", "```java\nCreateObservable.listFolder(\n  Paths.get(\"src\", \"main\", \"resources\"),\n  \"{lorem.txt,letters.txt}\"\n).flatMap(\n path -> CreateObservable.from(path),\n (path, line) -> path.getFileName() + \" : \" + line\n);\n```", "```java\nObservable<?> fIterableMapped = Observable\n.just(\n  Arrays.asList(2, 4),\n  Arrays.asList(\"two\", \"four\"),\n)\n.flatMapIterable(l -> l);\n```", "```java\nObservable<Object> obs = Observable\n.interval(40L, TimeUnit.MILLISECONDS)\n.switchMap(v ->\n Observable\n .timer(0L, 10L, TimeUnit.MILLISECONDS)\n .map(u -> \"Observable <\" + (v + 1) + \"> : \" + (v + u)))\n);\nsubscribePrint(obs, \"switchMap\");\n```", "```java\nswitchMap : Observable <1> : 0\nswitchMap : Observable <1> : 1\nswitchMap : Observable <1> : 2\nswitchMap : Observable <1> : 3\nswitchMap : Observable <2> : 1\nswitchMap : Observable <2> : 2\nswitchMap : Observable <2> : 3\nswitchMap : Observable <2> : 4\nswitchMap : Observable <3> : 2\nswitchMap : Observable <3> : 3\nswitchMap : Observable <3> : 4\nswitchMap : Observable <3> : 5\nswitchMap : Observable <3> : 6\nswitchMap : Observable <4> : 3\n.................\n\n```", "```java\nList<String> albums = Arrays.asList(\n  \"The Piper at the Gates of Dawn\",\n  \"A Saucerful of Secrets\",\n  \"More\", \"Ummagumma\",\t\"Atom Heart Mother\",\n  \"Meddle\", \"Obscured by Clouds\",\n  \"The Dark Side of the Moon\",\n  \"Wish You Were Here\", \"Animals\", \"The Wall\"\n);\nObservable\n  .from(albums)\n  .groupBy(album -> album.split(\" \").length)\n  .subscribe(obs ->\n    subscribePrint(obs, obs.getKey() + \" word(s)\")\n  );\n```", "```java\n7 word(s) : The Piper at the Gates of Dawn\n4 word(s) : A Saucerful of Secrets\n1 word(s) : More\n1 word(s) : Ummagumma\n3 word(s) : Atom Heart Mother\n1 word(s) : Meddle\n3 word(s) : Obscured by Clouds\n6 word(s) : The Dark Side of the Moon\n4 word(s) : Wish You Were Here\n1 word(s) : Animals\n2 word(s) : The Wall\n\n```", "```java\nObservable\n.from(albums)\n.groupBy(\n album -> album.replaceAll(\"[^mM]\", \"\").length(),\n album -> album.replaceAll(\"[mM]\", \"*\")\n)\n.subscribe(\n  obs -> subscribePrint(obs, obs.getKey()+\" occurences of 'm'\")\n);\n```", "```java\n0 occurences of 'm' : The Piper at the Gates of Dawn\n0 occurences of 'm' : A Saucerful of Secrets\n1 occurences of 'm' : *ore\n4 occurences of 'm' : U**agu**a\n2 occurences of 'm' : Ato* Heart *other\n1 occurences of 'm' : *eddle\n0 occurences of 'm' : Obscured by Clouds\n1 occurences of 'm' : The Dark Side of the *oon\n0 occurences of 'm' : Wish You Were Here\n1 occurences of 'm' : Ani*als\n0 occurences of 'm' : The Wall\n\n```", "```java\nList<Number> list = Arrays.asList(1, 2, 3);\nObservable<Integer> iObs = Observable\n  .from(list)\n  .cast(Integer.class);\n```", "```java\nList<Number> list = Arrays.asList(3, 2);\nObservable<Timestamped<Number>> timestamp = Observable\n  .from(list)\n  .timestamp();\nsubscribePrint(timestamp, \"Timestamps\");\n```", "```java\nTimestamps : Timestamped(timestampMillis = 1431184924388, value = 1)\nTimestamps : Timestamped(timestampMillis = 1431184924394, value = 2)\nTimestamps : Timestamped(timestampMillis = 1431184924394, value = 3)\n\n```", "```java\nObservable<TimeInterval<Long>> timeInterval = Observable\n  .timer(0L, 150L, TimeUnit.MILLISECONDS)\n  .timeInterval();\nsubscribePrint(timeInterval, \"Time intervals\");\n```", "```java\nTime intervals : TimeInterval [intervalInMilliseconds=13, value=0]\nTime intervals : TimeInterval [intervalInMilliseconds=142, value=1]\nTime intervals : TimeInterval [intervalInMilliseconds=149, value=2]\n...................................................................\n\n```", "```java\nObservable<Integer> numbers = Observable\n  .just(1, 13, 32, 45, 21, 8, 98, 103, 55);\nObservable<Integer> filter = numbers\n  .filter(n -> n % 2 == 0);\nsubscribePrint(filter, \"Filter\");\n```", "```java\nObservable<Integer> numbers = Observable\n  .just(1, 13, 32, 45, 21, 8, 98, 103, 55);\nObservable<String> words = Observable\n  .just(\n    \"One\", \"of\", \"the\", \"few\", \"of\",\n    \"the\", \"crew\", \"crew\"\n  );\nObservable<?> various = Observable\n  .from(Arrays.asList(\"1\", 2, 3.0, 4, 5L));\n```", "```java\nsubscribePrint(numbers.takeLast(4), \"Last 4\");\n```", "```java\nLast 4 : 8\nLast 4 : 98\nLast 4 : 103\nLast 4 : 55\nLast 4 ended!\n\n```", "```java\nsubscribePrint(numbers.last(), \"Last\");\n```", "```java\nLast : 55\nLast ended!\n\n```", "```java\nsubscribePrint(\n  numbers.takeLastBuffer(4), \"Last buffer\"\n);\n```", "```java\nLast buffer : [8, 98, 103, 55]\nLast buffer ended!\n\n```", "```java\nsubscribePrint(\n  numbers.lastOrDefault(200), \"Last or default\"\n);\nsubscribePrint(\n  Observable.empty().lastOrDefault(200), \"Last or default\"\n);\n```", "```java\nLast or default : 55\nLast or default ended!\nLast or default : 200\nLast or default ended!\n\n```", "```java\nsubscribePrint(numbers.skipLast(4), \"Skip last 4\");\n```", "```java\nSkip last 4 : 1\nSkip last 4 : 13\n\n```", "```java\nsubscribePrint(numbers.skip(4), \"Skip 4\");\n```", "```java\nSkip 4 : 21\nSkip 4 : 8\nSkip 4 : 98\nSkip 4 : 103\nSkip 4 : 55\nSkip 4 ended!\n\n```", "```java\nsubscribePrint(numbers.take(4), \"First 4\");\n```", "```java\nFirst 4 : 1\nFirst 4 : 13\nFirst 4 : 32\nFirst 4 : 45\nFirst 4 ended!\n\n```", "```java\nsubscribePrint(numbers.first(), \"First\");\n```", "```java\nFirst : 1\nFirst ended!\n\n```", "```java\nsubscribePrint(numbers.elementAt(5), \"At 5\");\n```", "```java\nAt 5 : 8\nAt 5 ended!\n\n```", "```java\nsubscribePrint(words.distinct(), \"Distinct\");\n```", "```java\nDistinct : One\nDistinct : of\nDistinct : the\nDistinct : few\nDistinct : crew\nDistinct ended!\n\n```", "```java\nsubscribePrint(\n  words.distinctUntilChanged(), \"Distinct until changed\"\n);\n```", "```java\nsubscribePrint( // (13)\n  various.ofType(Integer.class), \"Only integers\"\n);\n```", "```java\nOnly integers : 2\nOnly integers : 4\nOnly integers ended!\n\n```", "```java\nObservable<Integer> scan = Observable\n  .range(1, 10)\n  .scan((p, v) -> p + v);\nsubscribePrint(scan, \"Sum\");\nsubscribePrint(scan.last(), \"Final sum\");\n```", "```java\nObservable<String> file = CreateObservable.from(\n  Paths.get(\"src\", \"main\", \"resources\", \"letters.txt\")\n);\nscan = file.scan(0, (p, v) -> p + 1);\nsubscribePrint(scan.last(), \"wc -l\");\n```", "```java\nObservable<String> file = CreateObservable.from(\n  Paths.get(\"src\", \"main\", \"resources\", \"operators.txt\")\n);\nObservable<String> multy = file\n  .flatMap(line -> Observable.from(line.split(\"\\\\.\"))) // (1)\n  .map(String::trim) // (2)\n  .map(sentence -> sentence.split(\" \")) // (3)\n  .filter(array -> array.length > 0) // (4)\n  .map(array -> array[0]) // (5)\n  .distinct() // (6)\n  .groupBy(word -> word.contains(\"'\")) //(7)\n  .flatMap(observable -> observable.getKey() ? observable : // (8)\n    observable.map(Introspector::decapitalize))\n  .map(String::trim) // (9)\n  .filter(word -> !word.isEmpty()) // (10)\n  .scan((current, word) -> current + \" \" + word) // (11)\n  .last() // (12)\n  .map(sentence -> sentence + \".\"); // (13)\nsubscribePrint(multy, \"Multiple operators\"); // (14)\n```", "```java\nMultiple operators : I'm the one who will become RX.\nMultiple operators ended!\n\n```"]