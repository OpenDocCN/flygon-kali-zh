["```java\nStream.empty().forEach(System.out::println);    //prints nothing\nStream.of(1).forEach(System.out::println);      //prints: 1\n\nList<String> list = List.of(\"1 \", \"2\");\n//printList1(null);                             //NullPointerException\nprintList1(list);                               //prints: 1 2\n\nvoid printList1(List<String> list){\n    list.stream().forEach(System.out::print);;\n}\n```", "```java\nvoid printList1(List<String> list){\n     (list == null ? Stream.empty() : list.stream())\n                                         .forEach(System.out::print);\n}\n```", "```java\nprintList2(null);                                //prints nothing\nprintList2(list);                                //prints: [1 , 2]\n\nvoid printList2(List<String> list){\n      Stream.ofNullable(list).forEach(System.out::print);\n}\n```", "```java\nStream.ofNullable(list).flatMap(e -> e.stream())\n                       .forEach(System.out::print);      //prints: 1 2\n\n```", "```java\nStream.ofNullable(list).flatMap(Collection::stream)\n                       .forEach(System.out::print);      //prints: 1 2\n```", "```java\nStream.iterate(1, i -> ++i).limit(9)\n        .forEach(System.out::print);        //prints: 123456789\n\nStream.iterate(1, i -> i < 10, i -> ++i)\n        .forEach(System.out::print);        //prints: 123456789\n\n```", "```java\nStream<Integer> stream1 = List.of(1, 2).stream();\nStream<Integer> stream2 = List.of(2, 3).stream();\n\nStream.concat(stream1, stream2)\n        .forEach(System.out::print);        //prints: 1223\n```", "```java\nStream.generate(() -> 1).limit(5)\n        .forEach(System.out::print);       //prints: 11111\n\nStream.generate(() -> new Random().nextDouble()).limit(5)\n        .forEach(System.out::println);     //prints: 0.38575117472619247\n                                           //        0.5055765386778835\n                                           //        0.6528038976983277\n                                           //        0.4422354489467244\n                                           //        0.06770955839148762\n```", "```java\n    Stream.of(\"1 \", 2).forEach(System.out::print);      //prints: 1 2\n    //Stream<String> stringStream = Stream.of(\"1 \", 2); //compile error\n\n    String[] strings = {\"1 \", \"2\"};\n    Stream.of(strings).forEach(System.out::print);      //prints: 1 2\n\n```", "```java\nStream<Integer> stream1 = Stream.of(1, 2);\nStream<Integer> stream2 = Stream.of(2, 3);\nStream<Integer> stream3 = Stream.of(3, 4);\nStream<Integer> stream4 = Stream.of(4, 5);\n\n```", "```java\nStream.of(stream1, stream2, stream3, stream4)\n     .forEach(System.out::print); \n           //prints: java.util.stream.ReferencePipeline$Head@58ceff1j\n```", "```java\nStream.of(stream1, stream2, stream3, stream4)\n     .flatMap(e -> e).forEach(System.out::print);   //prints: 12233445\n```", "```java\nStream.<String>builder().add(\"cat\").add(\" dog\").add(\" bear\")\n        .build().forEach(System.out::print);  //prints: cat dog bear\n```", "```java\nStream.Builder<String> builder = Stream.builder();\nList.of(\"1\", \"2\", \"3\").stream().forEach(builder);\nbuilder.build().forEach(System.out::print);        //prints: 123\n\n```", "```java\nStream<String> buildStream(List<String> values){\n    Stream.Builder<String> builder = Stream.builder();\n    for(String s: values){\n        if(s.contains(\"a\")){\n            builder.accept(s);\n        }\n    }\n    return builder.build();\n}\n```", "```java\nList<String> list = List.of(\"cat\", \" dog\", \" bear\");\nbuildStream(list).forEach(System.out::print);        //prints: cat bear\n```", "```java\nList<Integer> list = List.of(1, 2, 3, 4, 5);\nlist.stream().forEach(System.out::print);    //prints: 12345\n\n```", "```java\nint[] arr = {1, 2, 3, 4, 5};\nArrays.stream(arr, 2, 4).forEach(System.out::print);    //prints: 34\n\n```", "```java\nnew Random().ints(5, 8)\n            .limit(5)\n            .forEach(System.out::print);    //prints: 56757\n```", "```java\nStream.of(\"3\", \"2\", \"3\", \"4\", \"2\").distinct()\n                            .forEach(System.out::print);  //prints: 324\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\nlist.stream().skip(3).forEach(System.out::print);         //prints: 45\nlist.stream().limit(3).forEach(System.out::print);        //prints: 123\nlist.stream().filter(s -> Objects.equals(s, \"2\"))\n                            .forEach(System.out::print);  //prints: 2\nlist.stream().dropWhile(s -> Integer.valueOf(s) < 3)\n                            .forEach(System.out::print);  //prints: 345\nlist.stream().takeWhile(s -> Integer.valueOf(s) < 3)\n                            .forEach(System.out::print);  //prints: 12\n\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\nlist.stream().map(s -> s + s)\n             .forEach(System.out::print);        //prints: 1122334455\nlist.stream().mapToInt(Integer::valueOf)\n             .forEach(System.out::print);             //prints: 12345\nlist.stream().mapToLong(Long::valueOf)\n             .forEach(System.out::print);             //prints: 12345\nlist.stream().mapToDouble(Double::valueOf)\n             .mapToObj(Double::toString)\n             .map(s -> s + \" \")\n             .forEach(System.out::print);//prints: 1.0 2.0 3.0 4.0 5.0 \nlist.stream().mapToInt(Integer::valueOf)\n             .flatMap(n -> IntStream.iterate(1, i -> i < n, i -> ++i))\n             .forEach(System.out::print);        //prints: 1121231234\nlist.stream().map(Integer::valueOf)\n             .flatMapToInt(n -> \n                           IntStream.iterate(1, i -> i < n, i -> ++i))\n             .forEach(System.out::print);        //prints: 1121231234\nlist.stream().map(Integer::valueOf)\n             .flatMapToLong(n ->  \n                          LongStream.iterate(1, i -> i < n, i -> ++i))\n             .forEach(System.out::print);        //prints: 1121231234;\nlist.stream().map(Integer::valueOf)\n             .flatMapToDouble(n -> \n                        DoubleStream.iterate(1, i -> i < n, i -> ++i))\n             .mapToObj(Double::toString)\n             .map(s -> s + \" \")\n             .forEach(System.out::print);  \n                    //prints: 1.0 1.0 2.0 1.0 2.0 3.0 1.0 2.0 3.0 4.0 \n\n```", "```java\nList<String> list = List.of(\"2\", \"1\", \"5\", \"4\", \"3\");\nlist.stream().sorted().forEach(System.out::print);  //prints: 12345\nlist.stream().sorted(Comparator.reverseOrder())\n             .forEach(System.out::print);           //prints: 54321\n\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\nlist.stream().peek(s-> {\n    if(\"3\".equals(s)){\n        System.out.print(3);\n    }\n}).forEach(System.out::print);  //prints: 123345\n```", "```java\nList<String> asList = stringStream.collect(ArrayList::new, \n                                           ArrayList::add, \n                                           ArrayList::addAll);\n```", "```java\nclass Person {\n    private int age;\n    private String name;\n    public Person(int age, String name) {\n        this.name = name;\n        this.age = age;\n    }\n    public String getName() { return this.name; }\n    public int getAge() {return this.age; }\n    @Override\n    public String toString() {\n        return \"Person{\" + \"name='\" + this.name + \"'\" +\n                         \", age=\" + age + \"}\";\n    }\n}\n```", "```java\n 23 , Ji m\n 2 5 , Bob\n15 , Jill\n 17 , Bi ll\n```", "```java\nList<Person> persons = new ArrayList<>();\nPath path = Paths.get(\"src/main/resources/persons.csv\");\ntry (Stream<String> lines = Files.newBufferedReader(path).lines()) {\n    lines.forEach(s -> {\n        String[] arr = s.split(\",\");\n        int age = Integer.valueOf(StringUtils.remove(arr[0], ' '));\n        persons.add(new Person(age, StringUtils.remove(arr[1], ' ')));\n    });\n} catch (IOException ex) {\n    ex.printStackTrace();\n}\npersons.stream().forEach(System.out::println);  \n                                 //prints: Person{name='Jim', age=23}\n                                 //        Person{name='Bob', age=25}\n                                 //        Person{name='Jill', age=15}\n                                 //        Person{name='Bill', age=17}\n\n```", "```java\nList<Person> persons = new ArrayList<>();\nPath path = Paths.get(\"src/main/resources/persons.csv\");\ntry (Stream<String> lines = Files.newBufferedReader(path).lines()) {\n    persons = lines.map(s -> s.split(\",\"))\n       .map(arr -> {\n          int age = Integer.valueOf(StringUtils.remove(arr[0], ' '));\n          return new Person(age, StringUtils.remove(arr[1], ' '));\n       }).collect(Collectors.toList());\n} catch (IOException ex) {\n    ex.printStackTrace();\n}\npersons.stream().forEach(System.out::println);\n\n```", "```java\npublic List<Person> createPersons() {\n   List<Person> persons = new ArrayList<>();\n   Path path = Paths.get(\"src/main/resources/persons.csv\");\n   try (Stream<String> lines = Files.newBufferedReader(path).lines()) {\n        persons = lines.map(s -> s.split(\",\"))\n                .map(this::createPerson)\n                .collect(Collectors.toList());\n   } catch (IOException ex) {\n        ex.printStackTrace();\n   }\n   return persons;\n}\nprivate Person createPerson(String[] arr){\n    int age = Integer.valueOf(StringUtils.remove(arr[0], ' '));\n    return new Person(age, StringUtils.remove(arr[1], ' '));\n}\n```", "```java\nlong count = Stream.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n        .peek(System.out::print)\n        .count();\nSystem.out.print(count);                 //prints: 5\n\n```", "```java\nint count = Stream.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n        .peek(System.out::print)         //prints: 12345\n        .collect(Collectors.counting());\nSystem.out.println(count);                //prints: 5\n\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\nboolean found = list.stream()\n        .peek(System.out::print)          //prints: 123\n        .anyMatch(e -> \"3\".equals(e));\nSystem.out.print(found);                  //prints: true   <= line 5\nfound = list.stream()\n        .peek(System.out::print)          //prints: 12345\n        .anyMatch(e -> \"0\".equals(e));\nSystem.out.print(found);                  //prints: false  \nboolean noneMatches = list.stream()       \n        .peek(System.out::print)          //prints: 123\n        .noneMatch(e -> \"3\".equals(e));\nSystem.out.print(noneMatches);            //prints: false\nnoneMatches = list.stream()\n        .peek(System.out::print)          //prints: 12345\n        .noneMatch(e -> \"0\".equals(e));\nSystem.out.print(noneMatches);            //prints: true  <= line 17\nboolean allMatch = list.stream()          \n        .peek(System.out::print)          //prints: 1\n        .allMatch(e -> \"3\".equals(e));\nSystem.out.print(allMatch);               //prints: false\n\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n\nOptional<String> result = list.stream().findAny();\nSystem.out.println(result.isPresent());    //prints: true\nSystem.out.println(result.get());          //prints: 1\n\nresult = list.stream().filter(e -> \"42\".equals(e)).findAny();\nSystem.out.println(result.isPresent());    //prints: true\n//System.out.println(result.get());        //NoSuchElementException\n\nresult = list.stream().findFirst();\nSystem.out.println(result.isPresent());    //prints: true\nSystem.out.println(result.get());          //prints: 1\n```", "```java\nList<String> list = List.of(\"1\", \"2\", \"3\", \"4\", \"5\");\n\nString result = list.stream().filter(e -> \"42\".equals(e))\n       .findAny().or(() -> Optional.of(\"Not found\")).get();\nSystem.out.println(result);                       //prints: Not found\n\nresult = list.stream().filter(e -> \"42\".equals(e))\n                            .findAny().orElse(\"Not found\");\nSystem.out.println(result);                        //prints: Not found\n\nSupplier<String> trySomethingElse = () -> {\n    //Code that tries something else\n    return \"43\";\n};\nresult = list.stream().filter(e -> \"42\".equals(e))\n                   .findAny().orElseGet(trySomethingElse);\nSystem.out.println(result);                          //prints: 43\n\nlist.stream().filter(e -> \"42\".equals(e))\n    .findAny().ifPresentOrElse(System.out::println, \n            () -> System.out.println(\"Not found\"));  //prints: Not found\n```", "```java\nList<String> list = List.of(\"a\", \"b\", \"c\", \"c\", \"a\");\nString min = list.stream().min(Comparator.naturalOrder()).orElse(\"0\");\nSystem.out.println(min);     //prints: a\n\nString max = list.stream().max(Comparator.naturalOrder()).orElse(\"0\");\nSystem.out.println(max);     //prints: c\n\n```", "```java\nint mn = Stream.of(42, 33, 77).min(Comparator.naturalOrder()).orElse(0);\nSystem.out.println(mn);    //prints: 33\nint mx = Stream.of(42, 33, 77).max(Comparator.naturalOrder()).orElse(0);\nSystem.out.println(mx);    //prints: 77\n\n```", "```java\nclass Person {\n    private int age;\n    private String name;\n    public Person(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n    public int getAge() { return this.age; }\n    public String getName() { return this.name; }\n    @Override\n    public String toString() {\n        return \"Person{name:\" + this.name + \",age:\" + this.age + \"}\";\n    }\n}\n```", "```java\nList<Person> persons = List.of(new Person(23, \"Bob\"),\n                               new Person(33, \"Jim\"),\n                               new Person(28, \"Jill\"),\n                               new Person(27, \"Bill\"));\n```", "```java\nComparator<Person> perComp = (p1, p2) -> p1.getAge() - p2.getAge();\n```", "```java\nPerson theOldest = persons.stream().max(perComp).orElse(null);\nSystem.out.println(theOldest);  //prints: Person{name:Jim,age:33}\n```", "```java\nList<String> list = List.of(\"a\", \"b\", \"c\");\nObject[] obj = list.stream().toArray();\nArrays.stream(obj).forEach(System.out::print);    //prints: abc\n\nString[] str = list.stream().toArray(String[]::new);\nArrays.stream(str).forEach(System.out::print);    //prints: abc\n\n```", "```java\nString[] str = list.stream().toArray(i -> new String[i]);\nArrays.stream(str).forEach(System.out::print);    //prints: abc\n\n```", "```java\nIntFunction<String[]> intFunction = new IntFunction<String[]>() {\n    @Override\n    public String[] apply(int i) {\n        return new String[i];\n    }\n};\n\n```", "```java\nstr = list.toArray(new String[list.size()]);\nArrays.stream(str).forEach(System.out::print);    //prints: abc\n\n```", "```java\nclass Person {\n    private int age;\n    private String name;\n    public Person(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n    public int getAge() { return this.age; }\n    public String getName() { return this.name; }\n    @Override\n    public String toString() {\n        return \"Person{name:\" + this.name + \",age:\" + this.age + \"}\";\n    }\n}\n```", "```java\nList<Person> list = List.of(new Person(23, \"Bob\"),\n                            new Person(33, \"Jim\"),\n                            new Person(28, \"Jill\"),\n                            new Person(27, \"Bill\"));\n\n```", "```java\nPerson theOldest = list.stream()\n  .reduce((p1, p2) -> p1.getAge() > p2.getAge() ? p1 : p2).orElse(null);\nSystem.out.println(theOldest);         //prints: Person{name:Jim,age:33}\n\n```", "```java\nString allNames = list.stream().map(p->p.getName())\n                      .reduce((n1, n2) -> n1 + \", \" + n2).orElse(null);\nSystem.out.println(allNames);            //prints: Bob, Jim, Jill, Bill\n\n```", "```java\nString allNames = list.stream().map(p->p.getName())\n                    .reduce(\"All names: \", (n1, n2) -> n1 + \", \" + n2);\nSystem.out.println(allNames);       //All names: , Bob, Jim, Jill, Bill\n\n```", "```java\nString allNames = \"All names: \" + list.stream().map(p->p.getName())\n                      .reduce((n1, n2) -> n1 + \", \" + n2).orElse(null);\nSystem.out.println(allNames);         //All names: Bob, Jim, Jill, Bill\n\n```", "```java\nString allNames = list.stream().map(p->p.getName())\n                     .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2);\nSystem.out.println(allNames);        //All names: Bob, Jim, Jill, Bill\n\n```", "```java\nString allNames = list.stream().map(p->p.getName())\n                      .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2, \n                                            (n1, n2) -> n1 + \" \" + n2 );\nSystem.out.println(allNames);          //All names: Bob, Jim, Jill, Bill\n\n```", "```java\nString allNames = list.parallelStream().map(p->p.getName())\n                      .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2, \n                                            (n1, n2) -> n1 + \" \" + n2 );\nSystem.out.println(allNames);   \n         //All names: Bob All names: Jim All names: Jill All names: Bill\n\n```", "```java\nString allNames = list.parallelStream().map(p->p.getName())\n                      .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2);\nSystem.out.println(allNames);   \n        //All names: Bob All names: Jim All names: Jill All names: Bill\n\n```", "```java\nallNames = list.parallelStream().map(p->p.getName())\n    .reduce(\"All names:\", (n1, n2) -> n1 + \" \" + n2,\n        (n1, n2) -> n1 + \" \" + StringUtils.remove(n2, \"All names:\"));\nSystem.out.println(allNames);       //All names: Bob, Jim, Jill, Bill\n\n```", "```java\nList<Integer> ints = List.of(1, 2, 3);\nint sum = ints.stream().reduce((i1, i2) -> i1 + i2).orElse(0);\nSystem.out.println(sum);                          //prints: 6\n\nsum = ints.stream().reduce(Integer::sum).orElse(0);\nSystem.out.println(sum);                          //prints: 6\n\nsum = ints.stream().reduce(10, Integer::sum);\nSystem.out.println(sum);                         //prints: 16\n\nsum = ints.stream().reduce(10, Integer::sum, Integer::sum);\nSystem.out.println(sum);                         //prints: 16\n```", "```java\nList<Integer> ints = List.of(1, 2, 3);\nint sum = ints.parallelStream().reduce(10, Integer::sum, Integer::sum);\nSystem.out.println(sum);                                   //prints: 36\n\n```", "```java\nList<Integer> ints = List.of(1, 2, 3);\n\nint sum = ints.parallelStream().reduce(0, Integer::sum, Integer::sum);\nSystem.out.println(sum);                                   //prints: 6\n\nsum = 10 + ints.parallelStream().reduce(0, Integer::sum, Integer::sum);\nSystem.out.println(sum);                                   //prints: 16\n```", "```java\nclass Person1 {\n    private String name;\n    private int age;\n    public Person1(){}\n    public String getName() { return this.name; }\n    public void setName(String name) { this.name = name; }\n    public int getAge() {return this.age; }\n    public void setAge(int age) { this.age = age;}\n    @Override\n    public String toString() {\n        return \"Person{name:\" + this.name + \",age:\" + age + \"}\";\n    }\n}\n```", "```java\nList<Person> list = List.of(new Person(23, \"Bob\"),\n                            new Person(33, \"Jim\"),\n                            new Person(28, \"Jill\"),\n                            new Person(27, \"Bill\"));\n\n```", "```java\nPerson1 theOldest = list.stream().collect(Person1::new,\n    (p1, p2) -> {\n        if(p1.getAge() < p2.getAge()){\n            p1.setAge(p2.getAge());\n            p1.setName(p2.getName());\n        }\n    },\n    (p1, p2) -> { System.out.println(\"Combiner is called!\"); });\n\n```", "```java\nBiConsumer<Person1, Person> accumulator = (p1, p2) -> {\n    if(p1.getAge() < p2.getAge()){\n        p1.setAge(p2.getAge());\n        p1.setName(p2.getName());\n    }\n};\nBiConsumer<Person1, Person1> combiner = (p1, p2) -> {\n    System.out.println(\"Combiner is called!\");        //prints nothing\n};\ntheOldest = list.stream().collect(Person1::new, accumulator, combiner);\nSystem.out.println(theOldest);        //prints: Person{name:Jim,age:33}\n\n```", "```java\nBiConsumer<Person1, Person1> combiner = (p1, p2) -> {\n    System.out.println(\"Combiner is called!\");   //prints 3 times\n    if(p1.getAge() < p2.getAge()){\n        p1.setAge(p2.getAge());\n        p1.setName(p2.getName());\n    }\n};\ntheOldest = list.parallelStream()\n                .collect(Person1::new, accumulator, combiner);\nSystem.out.println(theOldest);  //prints: Person{name:Jim,age:33}\n```", "```java\nList<String> ls = Stream.of(\"a\", \"b\", \"c\").collect(Collectors.toList());\nSystem.out.println(ls);                //prints: [a, b, c]\n\nSet<String> set = Stream.of(\"a\", \"a\", \"c\").collect(Collectors.toSet());\nSystem.out.println(set);                //prints: [a, c]\n\nList<Person> persons = List.of(new Person(23, \"Bob\"),\n                               new Person(33, \"Jim\"),\n                               new Person(28, \"Jill\"),\n                               new Person(27, \"Bill\"));\nMap<String, Person> map = persons.stream()\n    .collect(Collectors.toMap(p->p.getName() + \"-\" + p.getAge(), p->p));\nSystem.out.println(map); //prints: {Bob-23=Person{name:Bob,age:23}, \n                                    Bill-27=Person{name:Bill,age:27}, \n                                    Jill-28=Person{name:Jill,age:28}, \n                                    Jim-33=Person{name:Jim,age:33}}\nSet<Person> personSet = persons.stream()\n                        .collect(Collectors.toCollection(HashSet::new));\nSystem.out.println(personSet);  //prints: [Person{name:Bill,age:27}, \n                                           Person{name:Jim,age:33}, \n                                           Person{name:Bob,age:23}, \n                                           Person{name:Jill,age:28}]\n\n```", "```java\nList<String> list = List.of(\"a\", \"b\", \"c\", \"d\");\nString result = list.stream().collect(Collectors.joining());\nSystem.out.println(result);           //abcd\n\nresult = list.stream().collect(Collectors.joining(\", \"));\nSystem.out.println(result);           //a, b, c, d\n\nresult = list.stream()\n             .collect(Collectors.joining(\", \", \"The result: \", \"\"));\nSystem.out.println(result);          //The result: a, b, c, d\n\nresult = list.stream()\n      .collect(Collectors.joining(\", \", \"The result: \", \". The End.\"));\nSystem.out.println(result);          //The result: a, b, c, d. The End.\n\n```", "```java\nList<Person> list = List.of(new Person(23, \"Bob\"),\n                            new Person(33, \"Jim\"),\n                            new Person(28, \"Jill\"),\n                            new Person(27, \"Bill\"));\nint sum = list.stream().collect(Collectors.summingInt(Person::getAge));\nSystem.out.println(sum);  //prints: 111\n\nIntSummaryStatistics stats = \n      list.stream().collect(Collectors.summarizingInt(Person::getAge));\nSystem.out.println(stats);     //IntSummaryStatistics{count=4, sum=111, \n                               //    min=23, average=27.750000, max=33}\nSystem.out.println(stats.getCount());    //4\nSystem.out.println(stats.getSum());      //111\nSystem.out.println(stats.getMin());      //23\nSystem.out.println(stats.getAverage());  //27.750000\nSystem.out.println(stats.getMax());      //33\n\n```", "```java\nList<Person> list = List.of(new Person(23, \"Bob\"),\n                            new Person(33, \"Jim\"),\n                            new Person(28, \"Jill\"),\n                            new Person(27, \"Bill\"));\nMap<Boolean, List<Person>> map = \n   list.stream().collect(Collectors.partitioningBy(p->p.getAge() > 27));\nSystem.out.println(map);  \n              //{false=[Person{name:Bob,age:23}, Person{name:Bill,age:27}], \n              //  true=[Person{name:Jim,age:33}, Person{name:Jill,age:28}]}\n```", "```java\nList<Person> list = List.of(new Person(23, \"Bob\"),\n                            new Person(33, \"Jim\"),\n                            new Person(23, \"Jill\"),\n                            new Person(33, \"Bill\"));\nMap<Integer, List<Person>> map = \n           list.stream().collect(Collectors.groupingBy(Person::getAge));\nSystem.out.println(map);  \n              //{33=[Person{name:Jim,age:33}, Person{name:Bill,age:33}], \n              // 23=[Person{name:Bob,age:23}, Person{name:Jill,age:23}]}\n\n```", "```java\nIntStream.range(1, 3).forEach(System.out::print);  //prints: 12\nLongStream.range(1, 3).forEach(System.out::print);  //prints: 12\n\n```", "```java\nIntStream.rangeClosed(1, 3).forEach(System.out::print);  //prints: 123\nLongStream.rangeClosed(1, 3).forEach(System.out::print);  //prints: 123\n\n```", "```java\n//IntStream.range(1, 3).map(Integer::shortValue)        //compile error\n//                     .forEach(System.out::print);  \nIntStream.range(1, 3).boxed().map(Integer::shortValue)\n                             .forEach(System.out::print);  //prints: 12\n//LongStream.range(1, 3).map(Long::shortValue)          //compile error\n//                      .forEach(System.out::print);  \nLongStream.range(1, 3).boxed().map(Long::shortValue)\n                              .forEach(System.out::print);  //prints: 12\n//DoubleStream.of(1).map(Double::shortValue)            //compile error\n//                  .forEach(System.out::print);  \nDoubleStream.of(1).boxed().map(Double::shortValue)\n                          .forEach(System.out::print);      //prints: 1\n\n```", "```java\nIntStream.range(1, 3).mapToObj(Integer::valueOf)\n                     .map(Integer::shortValue)\n                     .forEach(System.out::print);       //prints: 12\nIntStream.range(42, 43).mapToObj(i -> new Person(i, \"John\"))\n                       .forEach(System.out::print);  \n                                   //prints: Person{name:John,age:42}\nLongStream.range(1, 3).mapToObj(Long::valueOf)\n                      .map(Long::shortValue)\n                      .forEach(System.out::print);      //prints: 12\nDoubleStream.of(1).mapToObj(Double::valueOf)\n                  .map(Double::shortValue)\n                  .forEach(System.out::print);          //prints: 1\n\n```", "```java\nlist.stream().mapToInt(String::length)\n                   .forEach(System.out::print); //prints: 335\nlist.stream().mapToLong(String::length)\n                   .forEach(System.out::print); //prints: 335\nlist.stream().mapToDouble(String::length)\n    .forEach(d -> System.out.print(d + \" \"));   //prints: 3.0 3.0 5.0\n\n```", "```java\n//list.stream().mapToInt(String::length)\n//             .map(Integer::shortValue)   //compile error\n//             .forEach(System.out::print); \n\n```", "```java\nlist.stream().map(String::length)\n             .map(Integer::shortValue)\n             .forEach(System.out::print);  //prints: 335\n\n```", "```java\nList<Integer> list = List.of(1, 2, 3);\n\nlist.stream().flatMapToInt(i -> IntStream.rangeClosed(1, i))\n                        .forEach(System.out::print);    //prints: 112123\nlist.stream().flatMapToLong(i -> LongStream.rangeClosed(1, i))\n                        .forEach(System.out::print);    //prints: 112123\nlist.stream().flatMapToDouble(DoubleStream::of)\n        .forEach(d -> System.out.print(d + \" \"));  //prints: 1.0 2.0 3.0\n\n```", "```java\nList<String> str = List.of(\"one\", \"two\", \"three\");\nstr.stream().flatMapToInt(s -> IntStream.rangeClosed(1, s.length()))\n                      .forEach(System.out::print);  //prints: 12312312345\n\n```", "```java\nint sum = IntStream.empty().sum();\nSystem.out.println(sum);          //prints: 0\n\nsum = IntStream.range(1, 3).sum();\nSystem.out.println(sum);          //prints: 3\n\ndouble av = IntStream.empty().average().orElse(0);\nSystem.out.println(av);           //prints: 0.0\n\nav = IntStream.range(1, 3).average().orElse(0);\nSystem.out.println(av);           //prints: 1.5\n\nlong suml = LongStream.range(1, 3).sum();\nSystem.out.println(suml);         //prints: 3\n\ndouble avl = LongStream.range(1, 3).average().orElse(0);\nSystem.out.println(avl);          //prints: 1.5\n\ndouble sumd = DoubleStream.of(1, 2).sum();\nSystem.out.println(sumd);         //prints: 3.0\n\ndouble avd = DoubleStream.of(1, 2).average().orElse(0);\nSystem.out.println(avd);          //prints: 1.5\n\n```", "```java\nList<Integer> list = List.of(2, 3, 4);\n```", "```java\nint r = list.stream().reduce(1, (x, y) -> x * y);\nSystem.out.println(r);     //prints: 24\n```"]