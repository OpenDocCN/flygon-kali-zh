["```js\n\"the\"\n```", "```js\n\"the fox jumped over the lazy brown dog\"\n```", "```js\nfunction countNeedlesInHaystack(needle, haystack) { }\n```", "```js\ncountNeedlesInHaystack('abc', 'abc abc abc'); // => 3\n```", "```js\nneedleCounter('app')('apple apple'); // => 2\n```", "```js\nnew Haystack('apple apple'),count('app'); // => 2\n```", "```js\ncountOccurancesOfNeedleInHaystack({\n  haystack: 'abc abc abc',\n  needle: 'abc'\n}); // => 3\n```", "```js\nstr('omg omg omg').count('omg'); // => 3\n```", "```js\n'omg omg omg'.count('omg'); // => 3\n```", "```js\nclass MutableNumberModel {\n  constructor(value) {\n    this.value = value;\n  }\n  increment() {\n    this.value++;\n    this.onChangeCallback();\n  }\n  decrement() {\n    this.value--;\n    this.onChangeCallback();\n  }\n  registerChangeCallback(onChangeCallback) {\n    this.onChangeCallback = onChangeCallback;\n  }\n}\n```", "```js\nclass MutableNumberController {\n\n  constructor(model, view) {\n\n    this.model = model;\n    this.view = view;\n\n    this.model.registerChangeCallback(\n      () => this.view.renderUpdate()\n    );\n    this.view.registerIncrementCallback(\n      () => this.model.increment()\n    );\n    this.view.registerDecrementCallback(\n      () => this.model.decrement()\n    );\n  }\n\n}\n```", "```js\nclass MutableNumberView {\n\n  constructor(model, controller) {\n    this.model = model;\n    this.controller = controller;\n  }\n\n  registerIncrementCallback(onIncrementCallback) {\n    this.onIncrementCallback = onIncrementCallback;\n  }\n\n  registerDecrementCallback(onDecrementCallback) {\n    this.onDecrementCallback = onDecrementCallback;\n  }\n\n  renderUpdate() {\n    this.numberSpan.textContent = this.model.value;\n  }\n\n  renderInitial() {\n\n    this.container = document.createElement('div');\n    this.numberSpan = document.createElement('span');\n    this.incrementButton = document.createElement('button');\n    this.decrementButton = document.createElement('button');\n\n    this.incrementButton.textContent = '+';\n    this.decrementButton.textContent = '-';\n\n    this.incrementButton.onclick =\n      () => this.onIncrementCallback();\n    this.decrementButton.onclick =\n      () => this.onDecrementCallback();\n\n    this.container.appendChild(this.numberSpan);\n    this.container.appendChild(this.incrementButton);\n    this.container.appendChild(this.decrementButton);\n\n    this.renderUpdate();\n\n    return this.container;\n\n  }\n\n}\n```", "```js\nconst model = new MutableNumberModel(5);\nconst view = new MutableNumberView(model);\nconst controller = new MutableNumberController(model, view);\n\ndocument.body.appendChild(view.renderInitial());\n```", "```js\n// main.js\n\n// The Dropdown Module\nvar dropdown = /* ... definition ... */;\n\n// The Data Fetcher Module\nvar dataFetcher = /* ... definition ...*/;\n```", "```js\n// DropdownComponent.js\nclass DropdownComponent {}\nexport default DropdownComponent;\n```", "```js\n// app.js\nimport DropdownComponent from './DropdownComponent.js'; \n```", "```js\nimport MyLocallyDifferentNameForDropdown from './DropdownComponent.js';\n```", "```js\nexport { DropdownComponent as TheDropdown };\n```", "```js\nimport { TheDropdown } from './DropdownComponent.js'; \n```", "```js\n// things.js\nexport let x = 1;\nexport const y = 2;\nexport var z = 3;\nexport function myFunction() {}\nexport class MyClass {}\n```", "```js\nimport { x, y, z, myFunction, MyClass } from './things.js'; \n```", "```js\nimport { MyClass as TheClass } from './things.js';\nTheClass; // => The class\nMyClass; // ! ReferenceError\n```", "```js\n// components/index.js\nexport {default as DropdownComponent} from './DropdownComponent.js';\nexport {default as AccordianComponent} from './AccordianComponent.js';\nexport {default as NavigationComponent} from './NavigationComponent.js';\n```", "```js\n// app.js\nimport * from 'components/index.js';\n\n// Make use of the imported components:\nnew DropdownComponent();\nnew AccordianComponent();\nnew NavigationComponent();\n```", "```js\nfunction Book(title) {\n  // Initialization Logic\n  this.title = title;\n}\n```", "```js\nBook.prototype.getNumberOfPages = function() { /* ... */ };\nBook.prototype.renderFrontCover: function() { /* ... */ };\nBook.prototype.renderBackCover: function () { /* ... */ };\n```", "```js\nBook.prototype = {\n  getNumberOfPages: function() { /* ... */ },\n  renderFrontCover: function() { /* ... */ },\n  renderBackCover: function () { /* ... */ }\n};\n```", "```js\nBook.prototype = {\n  getNumberOfPages() { /* ... */ },\n  renderFrontCover() { /* ... */ },\n  renderBackCover () { /* ... */ }\n};\n```", "```js\nconst myBook = new Book();\n```", "```js\nfunction Animal() {}\nAnimal.prototype = {\n  isAnimal: true,\n  grow() {}\n};\n```", "```js\nObject.prototype\n \u2514\u2500\u2500 Animal.prototype\n      \u2514\u2500\u2500 Monkey.prototype\n```", "```js\nfunction Monkey() {}\nMonkey.prototype = Object.create(Animal.prototype);\n```", "```js\nMonkey.prototype.isMonkey = true;\nMonkey.prototype.screech = function() {};\n```", "```js\nnew Monkey().isAnimal; // => true\nnew Monkey().isMonkey; // => true\ntypeof new Monkey().grow; // => \"function\"\ntypeof new Monkey().screech; // => \"function\"\n```", "```js\nMonkey.prototype.method1 = ...;\nMonkey.prototype.method2 = ...;\nMonkey.prototype.method3 = ...;\nMonkey.prototype.method4 = ...;\n```", "```js\nfunction Monkey() {}\nMonkey.prototype = Object.assign(Object.create(Animal.prototype), {\n  isMonkey: true, \n  screech() {},\n  groom() {}\n});\n```", "```js\nclass Name {\n  constructor(forename, surname) {\n    this.forename = forename;\n    this.surname = surname;\n  }\n  sayHello() {\n   return `My name is ${this.forename} ${this.surname}`;\n  }\n}\n```", "```js\nfunction Name(forename, surname) {\n  this.forename = forename;\n  this.surname = surname;\n}\n\nName.prototype.sayHello = function() {\n  return `My name is ${this.forename} ${this.surname}`;\n};\n```", "```js\nclass Accounts {\n  static allAccounts = [];\n  static tallyAllAccounts() {\n    // ...\n  }\n}\n\nAccounts.tallyAllAccounts();\nAccounts.allAccounts; // => []\n```", "```js\nAccounts.countAccounts = () => {\n  return Accounts.allAccounts.length;\n};\n```", "```js\nclass Rectangle {\n  width = 100;\n  height = 100;\n}\n```", "```js\nclass Rectangle {\n  width = 100;\n  height = 100;\n\n  constructor(width, height) {\n    if (width && !isNaN(width)) {\n      this.width = width;\n    }\n    if (height && !isNaN(height)) {\n      this.height = height;\n    }\n  }\n}\n```", "```js\nclass Rectangle {\n  #width = 100;\n  #height = 100;\n\n  constructor(width, height) {\n    if (width && !isNaN(width)) {\n      this.#width = width;\n    }\n    if (height && !isNaN(height)) {\n      this.#height = height;\n    }\n  }\n}\n```", "```js\nclass Super { #private = 123; }\nclass Sub { getPrivate() { return this.#private; } }\n\n// !SyntaxError: Undefined private field #private:\n// must be declared in an enclosing class\n```", "```js\nclass Animal {}\nclass Tiger extends Animal {}\n```", "```js\nObject.getPrototypeOf(new Tiger()) === Tiger.prototype;\nObject.getPrototypeOf(Tiger.prototype) === Animal.prototype;\n```", "```js\nconst fooMixin = { foo() {} };\nconst bazMixin = { baz() {} };\n\nclass MyClass {}\nObject.assign(MyClass.prototype, fooMixin, bazMixin);\n```", "```js\n// Specify MyClass with its own foo() method:\nclass MyClass { foo() {} }\n\n// Apply Mixins:\nObject.assign(MyClass.prototype, fooMixin, bazMixin);\n\n// Observe that the mixins have overwritten MyClass's foo():\nnew MyClass().foo === fooMixin.foo; // true (not ideal)\n```", "```js\nconst fooSubclassFactory = SuperClass => {\n return class extends SuperClass {\n   fooMethod1() {}\n   fooMethod2() {}\n };\n};\n```", "```js\nconst greetingsMixin = Super => class extends Super {\n  hello() { return 'hello'; }\n  hi() { return 'hi'; }\n  heya() { return 'heya'; }\n};\n\nclass Human {}\nclass Programmer extends greetingsMixin(Human) {}\n\nnew Programmer().hi(); // => \"hi\"\n```", "```js\nfunction mixin(...mixins) {\n  return mixins.reduce((base, mixin) => {\n    return mixin(base);\n  }, Object);\n}\n```", "```js\nconst alpha = Super => class extends Super { alphaMethod() {} };\nconst bravo = Super => class extends Super { braveMethod() {} };\n```", "```js\nclass MyClass extends mixin(alpha, bravo) {\n  myMethod() {}\n};\n```", "```js\ntypeof new MyClass().myMethod;    // => \"function\"\ntypeof new MyClass().alphaMethod; // => \"function\"\ntypeof new MyClass().braveMethod; // => \"function\"\n```", "```js\nclass Tiger extends Animal {\n  constructor() {\n    super(); // I.e. Call Animal's constructor\n  }\n}\n```", "```js\nclass Tiger extends Animal {\n  constructor() {\n    this.someProperty = 123;\n    super(); \n  }\n}\n\nnew Tiger();\n// ! ReferenceError: You must call the super constructor in a derived class\n// before accessing 'this' or returning from the derived constructor\n```", "```js\nconst inputComponent = {\n  name: 'Input Component',\n  render() {\n    return document.createElement('input');\n  }\n};\n```", "```js\nconst inputA = Object.create(inputComponent);\nconst inputB = Object.create(inputComponent);\n```", "```js\ninputA.render();\n```", "```js\ninputComponent.extend = function() {\n  return Object.create(this);\n};\n```", "```js\nconst inputA = inputComponent.extend();\nconst inputB = inputComponent.extend();\n```", "```js\nconst numericalInputComponent = Object.assign(inputComponent.extend(), {\n  render() {\n    const input = InputComponent.render.call(this);\n    input.type = 'number';\n    return input;\n  }\n});\n```", "```js\nconst theBLT = {\n  name: 'The BLT',\n  breadType: 'Granary',\n  slotA: 'Bacon',\n  slotB: 'Lettuce',\n  slotC: 'Tomato'\n};\n```", "```js\nconst theBLA = Object.assign({}, theBLT, {\n  slotC: 'Avocado'\n});\n```", "```js\ntheBLT.breadType = 'Sourdough';\ntheBLA.breadType; // => 'Granary'\n```", "```js\nconst theBLA = Object.assign(Object.create(theBLT), {\n  slotC: 'Avocado'\n});\n```", "```js\ntheBLT.breadType = 'Sourdough';\ntheBLA.breadType; // => 'Sourdough'\n```", "```js\nconst myModule = (() => {\n  const privateFoo = 1;\n  const privateBaz = 2;\n\n  // (Private Initialization Logic goes here)\n\n  return {\n    publicFoo() {},\n    publicBaz() {}\n  };\n})();\n```", "```js\nconst notification = (() => {\n\n  const d = document;\n  const container = d.body.appendChild(d.createElement('div'));\n  const message = container.appendChild(d.createElement('p'));\n  const dismissBtn = container.appendChild(d.createElement('button'));\n\n  container.className = 'notification';\n\n  dismissBtn.textContent = 'Dismiss!';\n  dismissBtn.onclick = () => {\n    container.style.display = 'none';\n  };\n\n  return {\n    display(msg) {\n      message.textContent = msg;\n      container.style.display = 'block';\n    }\n  };\n})();\n```", "```js\nnotification.display('Hello user! Something happened!');\n```", "```js\nconst timeDiffUtility = {\n  minutesBetween(dateA, dateB) {},\n  hoursBetween(dateA, dataB) {},\n  daysBetween(dateA, dateB) {}\n};\n```", "```js\nconst timeDiffUtility = {\n  setConfig(config) {\n    this.config = config;\n  },\n  minutesBetween(dateA, dateB) {},\n  hoursBetween(dateA, dataB) {},\n  daysBetween(dateA, dateB) {}\n};\n```", "```js\nconst log = () => console.log(this);\n\nconst library = {\n  books: [],\n  addBook() {},\n  log // add log method\n};\n```", "```js\nconst logger = {\n  log(message) { /* ... */ },\n  warn(message) { /* ... */ },\n  error(message) { /* ... */ }\n};\n```", "```js\nconst utils = new class {\n  constructor() {\n    this.#privateThing = 123;\n    // Other initialization logic here...\n  }\n  utilityA() {}\n  utilityB() {}\n  utilityC() {}\n};\n\nutils.utilityA(); \n```"]