["```java\ninterface MeasuringSystem {\n    double get(String id);\n}\n```", "```java\nvoid pauseMs(int ms) {\n    try{\n        TimeUnit.MILLISECONDS.sleep(ms);\n    } catch(InterruptedException ex){\n        ex.printStackTrace();\n    }\n}\n```", "```java\nclass MeasuringSystemImpl implements MeasuringSystem {\n    public double get(String id){\n         demo.pauseMs(100);\n         return 10\\. * Math.random();\n    }\n}\n```", "```java\nFunction<String, Double> mSys = id -> {\n    demo.pauseMs(100);\n    return 10\\. + Math.random();\n};\n\n```", "```java\nList<String> ids = IntStream.range(1, 11)\n        .mapToObj(i -> \"id\" + i).collect(Collectors.toList());\n```", "```java\nStream<Double> collectData(Stream<String> stream, \n                         Function<String, Double> mSys){\n    return  stream.map(id -> mSys.apply(id));\n}\n```", "```java\nvoid averageDemo() {\n    Function<String, Double> mSys = id -> {\n         pauseMs(100);\n         return 10\\. + Math.random();\n    };\n    getAverage(() -> collectData(ids.stream(), mSys)); \n}\n\nvoid getAverage(Supplier<Stream<Double>> collectData) {\n    LocalTime start = LocalTime.now();\n    double a = collectData.get()\n                    .mapToDouble(Double::valueOf).average().orElse(0);\n    System.out.println((Math.round(a * 100.) / 100.) + \" in \" + \n         Duration.between(start, LocalTime.now()).toMillis() + \" ms\");\n}   \n\n```", "```java\nList<String> ids = IntStream.range(1, 11)\n              .mapToObj(i -> \"id\" + i).collect(Collectors.toList());\nFunction<String, Double> mSys = id -> {\n        pauseMs(100);\n        return 10\\. + Math.random();\n};\ngetAverage(() -> collectData(ids.stream(), mSys));    \n                                             //prints: 10.46 in 1031 ms\ngetAverage(() -> collectData(ids.parallelStream(), mSys));  \n                                             //prints: 10.49 in 212 ms\n\n```", "```java\nList<CompletableFuture<Double>> list = ids.stream()\n        .map(id -> CompletableFuture.supplyAsync(() -> mSys.apply(id)))\n        .collect(Collectors.toList());\n\n```", "```java\nMap<Integer, List<CompletableFuture<Double>>> \n                  sendRequests(List<List<String>> idLists, \n                               List<Function<String, Double>> mSystems){\n   LocalTime start = LocalTime.now();\n   Map<Integer, List<CompletableFuture<Double>>> requests \n                                                       = new HashMap<>();\n   for(int i = 0; i < idLists.size(); i++){\n      for(Function<String, Double> mSys: mSystems){\n         List<String> ids = idLists.get(i);\n         List<CompletableFuture<Double>> list = ids.stream()\n          .map(id -> CompletableFuture.supplyAsync(() -> mSys.apply(id)))\n          .collect(Collectors.toList());\n         requests.put(i, list);\n      }\n   }\n   long dur = Duration.between(start, LocalTime.now()).toMillis();\n   System.out.println(\"Submitted in \" + dur + \" ms\");\n   return requests;\n}\n```", "```java\nvoid getAverage(Map<Integer, List<CompletableFuture<Double>>> requests){\n    for(List<CompletableFuture<Double>> list: requests.values()){\n        getAverage(() -> list.stream().map(CompletableFuture::join));\n    }\n}\n```", "```java\nvoid getAverage(Supplier<Stream<Double>> collectData) {\n    LocalTime start = LocalTime.now();\n    double a = collectData.get()\n                    .mapToDouble(Double::valueOf).average().orElse(0);\n    System.out.println((Math.round(a * 100.) / 100.) + \" in \" + \n         Duration.between(start, LocalTime.now()).toMillis() + \" ms\");\n}\n```", "```java\nFunction<String, Double> mSys = id -> {\n     pauseMs(100);\n     return 10\\. + Math.random();\n };\n List<Function<String, Double>> mSystems = List.of(mSys, mSys, mSys);\n List<List<String>> idLists = List.of(ids, ids, ids);\n\n Map<Integer, List<CompletableFuture<Double>>> requestLists = \n        sendRequests(idLists, mSystems);  //prints: Submitted in 13 ms\n\n pauseMs(2000);  //The main thread can continue doing something else\n                 //for any period of time\n getAverage(requestLists);               //prints: 10.49 in 5 ms\n                                         //        10.61 in 0 ms\n                                         //        10.51 in 0 ms\n\n```", "```java\nMap<Integer, List<CompletableFuture<Double>>> \n                  sendRequests(List<List<String>> idLists, \n                               List<Function<String, Double>> mSystems){\n   ExecutorService pool = Executors.newCachedThreadPool();\n   LocalTime start = LocalTime.now();\n   Map<Integer, List<CompletableFuture<Double>>> requests \n                                                       = new HashMap<>();\n   for(int i = 0; i < idLists.size(); i++){\n      for(Function<String, Double> mSys: mSystems){\n         List<String> ids = idLists.get(i);\n         List<CompletableFuture<Double>> list = ids.stream()\n          .map(id -> CompletableFuture.supplyAsync(() -> mSys.apply(id), \n pool))\n          .collect(Collectors.toList());\n         requests.put(i, list);\n      }\n   }\n   pool.shutdown();\n   long dur = Duration.between(start, LocalTime.now()).toMillis();\n   System.out.println(\"Submitted in \" + dur + \" ms\");\n   return requests;\n}\n```", "```java\n<dependency>\n    <groupId>io.reactivex.rxjava2</groupId>\n    <artifactId>rxjava</artifactId>\n    <version>2.1.13</version>\n</dependency> \n```", "```java\ndouble a = IntStream.rangeClosed(1, 5)\n        .filter(i -> i % 2 == 0)\n        .mapToDouble(Double::valueOf)\n        .map(Math::sqrt)\n        .sum();\nSystem.out.println(a); //prints: 3.414213562373095\n\n```", "```java\nObservable.range(1, 5)\n        .filter(i -> i % 2 == 0)\n        .map(Math::sqrt)\n        .reduce((r, d) -> r + d)\n        .subscribe(System.out::println); //prints: 3.414213562373095\nRxJava is based on the Observable object (which plays the role of Publisher) and Observer that subscribes to the Observable and waits for data to be emitted. \n```", "```java\nObservable<Double> observable = Observable.range(1, 5)\n        .filter(i -> i % 2 == 0)\n        .doOnNext(System.out::println)    //prints 2 and 4 twice\n        .map(Math::sqrt);\nobservable\n        .reduce((r, d) -> r + d)\n        .subscribe(System.out::println);  //prints: 3.414213562373095\nobservable\n        .reduce((r, d) -> r + d)a\n        .map(r -> r / 2)\n        .subscribe(System.out::println);  //prints: 1.7071067811865475\n```", "```java\nObservable<Double> observable = Observable.range(1,5)\n        .filter(i -> i % 2 == 0)\n        .doOnNext(System.out::println)  //prints 2 and 4 only once\n        .map(Math::sqrt)\n        .cache();\nobservable\n        .reduce((r, d) -> r + d)\n        .subscribe(System.out::println); //prints: 3.414213562373095\nobservable\n        .reduce((r, d) -> r + d)\n        .map(r -> r / 2)\n        .subscribe(System.out::println);  //prints: 1.7071067811865475\n\n```", "```java\npackage io.vertx.core;\npublic interface Verticle {\n  Vertx getVertx();\n  void init(Vertx vertx, Context context);\n  void start(Future<Void> future) throws Exception;\n  void stop(Future<Void> future) throws Exception;\n}\n```", "```java\npackage io.vertx.rxjava.core;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.Context;\nimport io.vertx.core.AbstractVerticle\npublic class AbstractVerticle extends AbstractVerticle {\n   protected io.vertx.rxjava.core.Vertx vertx;\n   public void init(Vertx vertx, Context context) {\n      super.init(vertx, context);\n      this.vertx = new io.vertx.rxjava.core.Vertx(vertx);\n   } \n}\n```", "```java\npackage io.vertx.core;\nimport java.util.List;\nimport io.vertx.core.Verticle;\nimport io.vertx.core.json.JsonObject;\npublic abstract class AbstractVerticle implements Verticle {\n   protected Vertx vertx;\n   protected Context context;\n   public void init(Vertx vertx, Context context) {\n      this.vertx = vertx;\n      this.context = context;\n   }\n   public Vertx getVertx() { return vertx; }\n   public JsonObject config() { return context.config(); }\n   public String deploymentID() { return context.deploymentID(); }\n   public List<String> processArgs() { return context.processArgs(); }\n   public void start(Future<Void> startFuture) throws Exception {\n      start();\n      startFuture.complete();\n   }\n   public void stop(Future<Void> stopFuture) throws Exception {\n      stop();\n      stopFuture.complete();\n   }\n   public void start() throws Exception {}\n   public void stop() throws Exception {}\n}\n```", "```java\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web</artifactId>\n    <version>${vertx.version}</version>\n</dependency>\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-rx-java</artifactId>\n    <version>${vertx.version}</version>\n</dependency>\n\n```", "```java\n<properties>\n    <vertx.version>3.5.1</vertx.version>\n</properties>\n\n```", "```java\npackage com.packt.javapath.ch18demo.microservices;\nimport io.vertx.rxjava.core.AbstractVerticle;\nimport io.vertx.rxjava.core.http.HttpServer;\npublic class HttpServer1 extends AbstractVerticle{\n   private int port;\n   public HttpServer1(int port) {\n       this.port = port;\n   }\n   public void start() throws Exception {\n      HttpServer server = vertx.createHttpServer();\n      server.requestStream().toObservable()\n         .subscribe(request -> request.response()\n             .end(\"Hello from \" + Thread.currentThread().getName() + \n                                         \" on port \" + port + \"!\\n\\n\"));\n      server.rxListen(port).subscribe();\n      System.out.println(Thread.currentThread().getName() + \n                                 \" is waiting on port \" + port + \"...\");\n   }\n}\n```", "```java\nvertx().getDelegate().deployVerticle(new HttpServer1(8082));\nvertx().getDelegate().deployVerticle(new HttpServer1(8083));\n```", "```java\nRxHelper.deployVerticle(vertx(), new HttpServer1(8082));\nRxHelper.deployVerticle(vertx(), new HttpServer1(8083));\n\n```", "```java\nvert.x-eventloop-thread-0 is waiting on port 8082...\nvert.x-eventloop-thread-0 is waiting on port 8083...\n```", "```java\ncurl localhost:8082\n```", "```java\nHello from vert.x-eventloop-thread-0 on port 8082!\n```", "```java\npackage com.packt.javapath.ch18demo.microservices;\nimport io.vertx.rxjava.core.AbstractVerticle;\nimport java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\npublic class PeriodicService1 extends AbstractVerticle {\n  public void start() throws Exception {\n     LocalTime start = LocalTime.now();\n     vertx.setPeriodic(1000, v-> {\n         System.out.println(\"Beep!\");\n         if(ChronoUnit.SECONDS.between(start, LocalTime.now()) > 3 ){\n             vertx.undeploy(deploymentID());\n         }\n     });\n     System.out.println(\"Vertical PeriodicService1 is deployed\");\n  }\n  public void stop() throws Exception {\n     System.out.println(\"Vertical PeriodicService1 is un-deployed\");\n  }\n}\n```", "```java\nVertical PeriodicService1 is deployed\nBeep!\nBeep!\nBeep!\nBeep!\nVertical PeriodicService1 is un-deployed\n```", "```java\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web-client</artifactId>\n    <version>${vertx.version}</version>\n</dependency>\n\n```", "```java\npackage com.packt.javapath.ch18demo.microservices;\nimport io.vertx.rxjava.core.AbstractVerticle;\nimport io.vertx.rxjava.core.buffer.Buffer;\nimport io.vertx.rxjava.ext.web.client.HttpResponse;\nimport io.vertx.rxjava.ext.web.client.WebClient;\nimport rx.Single;\nimport java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\npublic class PeriodicService2 extends AbstractVerticle {\n    private int port;\n    public PeriodicService2(int port) {\n        this.port = port;\n    }\n    public void start() throws Exception {\n        WebClient client = WebClient.create(vertx);\n        Single<HttpResponse<Buffer>> single = client\n                .get(port, \"localhost\", \"?name=Nick\")\n                .rxSend();\n        LocalTime start = LocalTime.now();\n        vertx.setPeriodic(1000, v-> {\n           single.subscribe(r-> System.out.println(r.bodyAsString()),\n                             Throwable::printStackTrace);\n           if(ChronoUnit.SECONDS.between(start, LocalTime.now()) >= 3 ){\n              client.close(); \n              vertx.undeploy(deploymentID());\n              System.out.println(\"Vertical PeriodicService2 undeployed\");\n           }\n        });\n        System.out.println(\"Vertical PeriodicService2 deployed\");\n    }\n}\n```", "```java\npublic void start() throws Exception {\n    HttpServer server = vertx.createHttpServer();\n    server.requestStream().toObservable()\n          .subscribe(request -> request.response()\n             .end(\"Hi, \" + request.getParam(\"name\") + \"! Hello from \" + \n          Thread.currentThread().getName() + \" on port \" + port + \"!\"));\n    server.rxListen(port).subscribe();\n    System.out.println(Thread.currentThread().getName()\n                               + \" is waiting on port \" + port + \"...\");\n}\n```", "```java\nRxHelper.deployVerticle(vertx(), new HttpServer2(8082));\nRxHelper.deployVerticle(vertx(), new PeriodicService2(8082));\n\n```", "```java\nVertical PeriodicService2 deployed\nvert.x-eventloop-thread-0 is waiting on port 8082...\nHi, Nick! Hello from vert.x-eventloop-thread-0 on port 8082!\nHi, Nick! Hello from vert.x-eventloop-thread-0 on port 8082!\nVertical PeriodicService2 undeployed\nHi, Nick! Hello from vert.x-eventloop-thread-0 on port 8082!\n```", "```java\nvertx.eventBus().rxSend(address, msg).subscribe(reply -> \n    System.out.println(\"Got reply: \" + reply.body()), \n    Throwable::printStackTrace );\n\n```", "```java\nreply -> System.out.println(\"Got reply: \" + reply.body())\n```", "```java\nThrowable::printStackTrace\n```", "```java\ne -> e.printStackTrace()\n```", "```java\nvertx.eventBus().publish(address, msg)\n```", "```java\npackage com.packt.javapath.ch18demo.reactivesystem;\nimport io.vertx.rxjava.core.AbstractVerticle;\npublic class MsgConsumer extends AbstractVerticle {\n    private String address, name;\n    public MsgConsumer(String id, String address) {\n        this.address = address;\n        this.name = this.getClass().getSimpleName() + \n                                    \"(\" + id + \",\" + address + \")\";\n    }\n    public void start() throws Exception {\n        System.out.println(name + \" starts...\");\n        vertx.eventBus().consumer(address).toObservable()\n         .subscribe(msg -> {\n            String reply = name + \" got message: \" + msg.body();\n            System.out.println(reply);\n            if (\"undeploy\".equals(msg.body())) {\n                vertx.undeploy(deploymentID());\n                reply = name + \" undeployed.\";\n                System.out.println(reply);\n            }\n            msg.reply(reply);\n        }, Throwable::printStackTrace );\n        System.out.println(Thread.currentThread().getName()\n                + \" is waiting on address \" + address + \"...\");\n    }\n}\n```", "```java\npackage com.packt.javapath.ch18demo.reactivesystem;\nimport io.vertx.rxjava.core.AbstractVerticle;\nimport io.vertx.rxjava.core.http.HttpServer;\npublic class EventBusSend extends AbstractVerticle {\n    private int port;\n    private String address, name;\n    public EventBusSend(int port, String address) {\n       this.port = port;\n       this.address = address;\n       this.name = this.getClass().getSimpleName() + \n                      \"(port \" + port + \", send to \" + address + \")\";\n    }\n    public void start() throws Exception {\n       System.out.println(name + \" starts...\");\n       HttpServer server = vertx.createHttpServer();\n       server.requestStream().toObservable().subscribe(request -> {\n         String msg = request.getParam(\"msg\");\n         request.response().setStatusCode(200).end();\n vertx.eventBus().rxSend(address, msg).subscribe(reply -> {\n            System.out.println(name + \" got reply:\\n  \" + reply.body());\n         },\n         e -> {\n            if(StringUtils.contains(e.toString(), \"NO_HANDLERS\")){\n                vertx.undeploy(deploymentID());\n                System.out.println(name + \" undeployed.\");\n            } else {\n                e.printStackTrace();\n            }\n         }); });\n       server.rxListen(port).subscribe();\n       System.out.println(Thread.currentThread().getName()\n                               + \" is waiting on port \" + port + \"...\");\n    }\n}\n```", "```java\n        vertx.eventBus().rxSend(address, msg).subscribe(reply -> {\n            System.out.println(name + \" got reply:\\n  \" + reply.body());\n        }, e -> {\n            if(StringUtils.contains(e.toString(), \"NO_HANDLERS\")){\n                vertx.undeploy(deploymentID());\n                System.out.println(name + \" undeployed.\");\n            } else {\n                e.printStackTrace();\n            }\n        });\n\n```", "```java\nString address = \"One\";\nVertx vertx = vertx();\nRxHelper.deployVerticle(vertx, new MsgConsumer(\"1\",address));\nRxHelper.deployVerticle(vertx, new MsgConsumer(\"2\",address));\nRxHelper.deployVerticle(vertx, new EventBusSend(8082, address));\n\n```", "```java\nMsgConsumer(1,One) starts...\nMsgConsumer(2,One) starts...\nEventBusSend(port 8082, send to One) starts...\nvert.x-eventloop-thread-1 is waiting on address One...\nvert.x-eventloop-thread-0 is waiting on address One...\nvert.x-eventloop-thread-2 is waiting on port 8082...\n```", "```java\ncurl localhost:8082?msg=Hello!\ncurl localhost:8082?msg=Hi!\ncurl localhost:8082?msg=How+are+you?\ncurl localhost:8082?msg=Just+saying...\n```", "```java\nMsgConsumer(2,One) got message: Hello!\nEventBusSend(port 8082, send to One) got reply:\n MsgConsumer(2,One) got message: Hello!\nMsgConsumer(1,One) got message: Hi!\nEventBusSend(port 8082, send to One) got reply:\n MsgConsumer(1,One) got message: Hi!\nMsgConsumer(2,One) got message: How are you?\nEventBusSend(port 8082, send to One) got reply:\n MsgConsumer(2,One) got message: How are you?\nMsgConsumer(1,One) got message: Just saying...\nEventBusSend(port 8082, send to One) got reply:\n MsgConsumer(1,One) got message: Just saying...\n```", "```java\ncurl localhost:8082?msg=undeploy\ncurl localhost:8082?msg=undeploy\ncurl localhost:8082?msg=undeploy\n```", "```java\nMsgConsumer(1,One) got message: undeploy\nMsgConsumer(1,One) undeployed.\nEventBusSend(port 8082, send to One) got reply:\n MsgConsumer(1,One) undeployed.\nMsgConsumer(2,One) got message: undeploy\nMsgConsumer(2,One) undeployed.\nEventBusSend(port 8082, send to One) got reply:\n MsgConsumer(2,One) undeployed.\nEventBusSend(port 8082, send to One) undeployed.\n```", "```java\ncurl localhost:8082?msg=undeploy\ncurl: (7) Failed to connect to localhost port 8082: Connection refused\n```", "```java\npackage com.packt.javapath.ch18demo.reactivesystem;\n\nimport io.vertx.rxjava.core.AbstractVerticle;\nimport io.vertx.rxjava.core.http.HttpServer;\n\npublic class EventBusPublish extends AbstractVerticle {\n    private int port;\n    private String address, name;\n    public EventBusPublish(int port, String address) {\n        this.port = port;\n        this.address = address;\n        this.name = this.getClass().getSimpleName() + \n                    \"(port \" + port + \", publish to \" + address + \")\";\n    }\n    public void start() throws Exception {\n        System.out.println(name + \" starts...\");\n        HttpServer server = vertx.createHttpServer();\n        server.requestStream().toObservable()\n                .subscribe(request -> {\n                    String msg = request.getParam(\"msg\");\n                    request.response().setStatusCode(200).end();\n vertx.eventBus().publish(address, msg);\n                    if (\"undeploy\".equals(msg)) {\n vertx.undeploy(deploymentID());\n                        System.out.println(name + \" undeployed.\");\n                    }\n                });\n        server.rxListen(port).subscribe();\n        System.out.println(Thread.currentThread().getName()\n                + \" is waiting on port \" + port + \"...\");\n    }\n}\n```", "```java\n            vertx.eventBus().publish(address, msg);\n            if (\"undeploy\".equals(msg)) {\n                vertx.undeploy(deploymentID());\n                System.out.println(name + \" undeployed.\");\n            }\n```", "```java\nString address = \"One\";\nVertx vertx = vertx();\nRxHelper.deployVerticle(vertx, new MsgConsumer(\"1\",address));\nRxHelper.deployVerticle(vertx, new MsgConsumer(\"2\",address));\nRxHelper.deployVerticle(vertx, new EventBusPublish(8082, address));\n\n```", "```java\nMsgConsumer(1,One) starts...\nMsgConsumer(2,One) starts...\nEventBusPublish(port 8082, publish to One) starts...\nvert.x-eventloop-thread-2 is waiting on port 8082...\n```", "```java\ncurl localhost:8082?msg=Hello!\n```", "```java\nMsgConsumer(1,One) got message: Hello!\nMsgConsumer(2,One) got message: Hello!\n```", "```java\ncurl localhost:8082?msg=undeploy\n```", "```java\nMsgConsumer(1,One) got message: undeploy\nMsgConsumer(2,One) got message: undeploy\nEventBusPublish(port 8082, publish to One) undeployed.\nMsgConsumer(1,One) undeployed.\nMsgConsumer(2,One) undeployed.\n```", "```java\ncurl localhost:8082?msg=undeploy\ncurl: (7) Failed to connect to localhost port 8082: Connection refused\n```", "```java\n//1\nObservable.just(\"Hi!\").subscribe(System.out::println); //prints: Hi!\n//2\nObservable.fromIterable(List.of(\"1\",\"2\",\"3\"))\n          .subscribe(System.out::print); //prints: 123\nSystem.out.println();\n//3\nString[] arr = {\"1\",\"2\",\"3\"};\nObservable.fromArray(arr).subscribe(System.out::print); //prints: 123\nSystem.out.println();\n//4\nObservable.fromCallable(()->123)\n          .subscribe(System.out::println); //prints: 123\n//5\nExecutorService pool = Executors.newSingleThreadExecutor();\nFuture<String> future = pool\n        .submit(() -> {\n            Thread.sleep(100);\n            return \"Hi!\";\n        });\nObservable.fromFuture(future)\n          .subscribe(System.out::println); //prints: Hi!\npool.shutdown();\n//6\nObservable.interval(100, TimeUnit.MILLISECONDS)\n          .subscribe(v->System.out.println(\"100 ms is over\")); \n                                     //prints twice \"100 ms is over\"\ntry { //this pause gives the above method a chance to print the message\n    TimeUnit.MILLISECONDS.sleep(200);\n} catch (InterruptedException e) {\n    e.printStackTrace();\n}\n```"]