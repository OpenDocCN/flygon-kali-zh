- en: The Entrance of JavaScript into Mainstream Programming
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript进入主流编程
- en: JavaScript can run both client- and server-side, which inherently means that
    the use cases for using JavaScript versus Python will vary. From humble beginnings,
    JavaScript, with its quirks, strengths, and limitations, is now one of the main
    pillars of the interactive web as we know it, from powering rich frontend interactions,
    to web servers. How did it become one of the most important ubiquitous technologies
    of the web? In order to grasp JavaScript's powerful ability to add functionality
    to both the front- and backends, we first need an understanding of what the frontend
    is—and what it isn't. Having an understanding of JavaScript's origins helps to
    clarify the "why" of JavaScript, so let's take a look.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript可以在客户端和服务器端运行，这意味着使用JavaScript与Python的用例会有所不同。从不起眼的开始，JavaScript以其怪癖、优势和局限性，现在成为我们所知的交互式网络的主要支柱之一，从丰富的前端交互到Web服务器。它是如何成为Web上最重要的普遍技术之一的？为了理解JavaScript在前端和后端都能添加功能的强大能力，我们首先需要了解前端是什么，以及它不是什么。了解JavaScript的起源有助于澄清JavaScript的“为什么”，所以让我们来看一下。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The **National Center for Supercomputing Applications** (**NCSA**) and the need
    for interactivity
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家超级计算应用中心（NCSA）和互动的需求
- en: Early web browsers and a 10-day prototype
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 早期网络浏览器和10天的原型
- en: Enter Ecma International
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入Ecma国际
- en: HTML, CSS, and JavaScript—the best friends of the frontend
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML、CSS和JavaScript——前端的最好伙伴
- en: How JavaScript fits into the frontend ecosystem
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript如何适应前端生态系统
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中的代码文件[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers)。
- en: NCSA and the need for interactivity
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NCSA和互动的需求
- en: The early internet was a fairly boring place compared with the rich medium we
    now have in the 21st century. Without graphical browsers and only fairly rudimentary
    (and esoteric) commands, early adopters were able to do only certain academic
    tasks for a period of time. Starting from **ARPANET** (the **Advanced Research
    Projects Agency Network**), it was designed to facilitate basic communication
    and file transfers by being one of the first packet-switching networks. Additionally,
    it was the first network to implement the **Transmission Control Protocol/Internet
    Protocol** (**TCP/IP**) suite, which we now take for granted as it runs behind
    the scenes of all modern web applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与21世纪现在拥有的丰富媒介相比，早期互联网是一个相当无聊的地方。没有图形浏览器，只有相当基本的（和神秘的）命令，早期采用者只能在一段时间内完成某些学术任务。从ARPANET（高级研究计划局网络）开始，它旨在通过成为第一个分组交换网络之一来促进基本通信和文件传输。此外，它是第一个实现传输控制协议/互联网协议（TCP/IP）套件的网络，我们现在认为它是理所当然的，因为它在所有现代网络应用程序的幕后运行。
- en: Why is this significant? The early internet was designed for fundamental and
    simple purposes, but it has grown since then. As a Python developer, you already
    understand the power of the modern web, so a full history of the web isn't needed.
    Let's skip to the origins of what we now know as the frontend.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很重要？早期互联网是为基本和简单的目的而设计的，但自那时以来它已经发展壮大。作为Python开发人员，您已经了解现代网络的强大之处，因此不需要对网络的完整历史有所了解。让我们跳到我们现在所知的前端的起源。
- en: 'Enter Tim Berners-Lee in 1990: the invention of the World Wide Web. By building
    the first web browser himself and with the **European Organization for Nuclear
    Research** (known as **CERN**) creating the first website, the floodgates opened
    and the world was never the same. What started as academic tinkering has now become
    a global necessity, with millions of people around the globe relying on the web.
    It goes without saying that today, in the 21st century, we use the web and multiple
    forms of digital communication to go about our everyday lives.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 1990年，蒂姆·伯纳斯-李（Tim Berners-Lee）进入：发明了万维网。通过自己构建第一个网络浏览器，并与欧洲核子研究组织（CERN）创建第一个网站，闸门打开了，世界从此改变。从学术上的摆弄开始，现在已经成为全球必需品，全球数百万人依赖于互联网。不用说，在21世纪的今天，我们使用网络和多种形式的数字通信来进行日常生活。
- en: One of the projects that Berners-Lee created was **HTML**—**Hypertext Markup
    Language**. As the backbone of a website, this basic markup language spawned significant
    growth and development in the computing community. It only took a few years (the
    year was 1993, to be precise) for Mosaic, the first iteration of what we now call
    a browser, to be released. It was developed by the NCSA at the University of Illinois
    at Urbana-Champaign and was a vital part of the web's development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 伯纳斯-李创建的项目之一是HTML——超文本标记语言。作为网站的支柱，这种基本标记语言在计算机社区中引发了重大的增长和发展。只用了几年的时间（确切地说是1993年），第一个我们现在称之为浏览器的迭代版本Mosaic发布了。它是由伊利诺伊大学厄巴纳-香槟分校的NCSA开发的，并且是网络发展的重要组成部分。
- en: Early web browsers and a 10-day prototype
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 早期网络浏览器和10天的原型
- en: So, why JavaScript? Obviously, the web needed more than just static data to
    be useful, so, in 1995, Brendan Eich at Netscape Communications came along. Originally,
    the idea wasn't to create a whole new language but rather to incorporate Scheme
    into Netscape. That idea was superseded by the work Sun Microsystems did with
    Java. It was decided that this language that Eich was creating would be somewhat
    Java-like, and not Scheme at all. The genesis of the idea came from Marc Andreessen,
    the founder of Netscape Communications. He felt there needed to be a language
    to combine HTML with a "glue language" that helped with images, plugins, and—yes—interactivity.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么是JavaScript？显然，网络需要的不仅仅是静态数据，所以在1995年，Netscape Communications的Brendan
    Eich出现了。最初的想法并不是创建一个全新的语言，而是将Scheme整合到Netscape中。这个想法被Sun Microsystems与Java的合作所取代。决定了Eich正在创建的这种语言会有些类似于Java，而不是Scheme。这个想法的起源来自Netscape
    Communications的创始人Marc Andreessen。他觉得需要一种语言来将HTML与“粘合语言”结合起来，帮助处理图像、插件和——是的——交互性。
- en: Eich created a prototype of JavaScript (originally called Mocha, and then LiveScript)
    in 10 days. It's hard to believe that a 10-day prototype has become such a crucial
    part of the web, but those are the facts as history records them. Once Netscape
    developed a production-ready version, JavaScript shipped with Netscape Navigator
    in 1995\. Shortly after JavaScript was released, Microsoft created its own version
    of JavaScript, called (unceremoniously) JScript. JScript shipped with Microsoft's
    Internet Explorer 3.0 in 1996.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Eich在10天内创建了JavaScript的原型（最初称为Mocha，然后是LiveScript）。很难相信一个10天的原型已经成为网络的如此重要的一部分，但这就是历史记录的事实。一旦Netscape开发出了一个可供生产使用的版本，JavaScript就在1995年与Netscape
    Navigator一起发布了。JavaScript发布后不久，微软创建了自己的JavaScript版本，称为（毫不起眼地）JScript。JScript于1996年与微软的Internet
    Explorer 3.0一起发布。
- en: Now, there were two technologies competing for the same space. JScript was reverse-engineered
    from Netscape's JavaScript, but since the two flavors of the language had their
    own quirks, the browser wars began, leading sites to often have a label "Best
    viewed in Netscape Navigator" or "Best viewed in Internet Explorer", due to the
    technological complexities involved in supporting both technologies on one site.
    A portent of things to come, the differences in the early versions only increased.
    Some websites would work flawlessly in one browser and break horrifically in the
    other—not to mention the complications caused by other competitors to both Netscape's
    and Microsoft's browsers! Early developers also found the differences between
    the two technologies only fueled the arms race. If you experienced such degradation
    of performance (or, even worse, you were working with JavaScript in the early
    days, like me), you definitely felt the pain of the competing versions. Each company,
    as well as other third parties, raced to create the next best JavaScript release.
    At its core, JavaScript has to be interpreted client-side, and the differences
    between the browsers led to bedlam. Something had to be done, and Netscape had
    a solution, though it wouldn't be perfect.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有两种技术在同一个领域竞争。JScript是从Netscape的JavaScript中进行了逆向工程，但由于这两种语言的特点，浏览器之间的战争开始了，导致网站经常出现“最佳在Netscape
    Navigator中查看”或“最佳在Internet Explorer中查看”的标签，这是由于在一个网站上支持这两种技术涉及的技术复杂性。早期版本之间的差异只增加了。一些网站在一个浏览器中可以完美运行，在另一个浏览器中却会出现严重故障，更不用说其他竞争对手对Netscape和微软浏览器造成的复杂性了！早期开发人员还发现这两种技术之间的差异只加剧了武器竞赛。如果你经历过性能下降（或者更糟糕的是，你在早期像我一样使用JavaScript），你肯定感受到了竞争版本的痛苦。每家公司以及其他第三方都在竞相创建下一个最好的JavaScript版本。JavaScript的核心必须在客户端进行解释，而浏览器之间的差异导致了混乱。必须采取一些措施，而Netscape有一个解决方案，尽管它并不完美。
- en: We'll learn about this solution in the next section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中了解这个解决方案。
- en: Enter Ecma International
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入Ecma International
- en: The **European Computer Manufacturers Association** (**ECMA**) changed its name
    in 1994, becoming Ecma International, to reflect its refined purpose. As a standards
    organization, its purpose is to facilitate modernization and consistency for various
    technologies. Partly in response to Microsoft's work, Netscape approached Ecma
    International in 1996 to standardize the language.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**欧洲计算机制造商协会**（**ECMA**）在1994年更名为Ecma International，以反映其精炼的目的。作为一个标准组织，它的目的是促进各种技术的现代化和一致性。部分是为了应对微软的工作，Netscape在1996年与Ecma
    International接触，以标准化这种语言。'
- en: 'JavaScript became documented in the ECMA-262 specification. You may have seen
    the term **ECMAScript** or "ECMAScript-based languages". There are more ECMAScript
    languages than just JavaScript! ActionScript is another ECMAScript-based language
    that follows similar conventions to JavaScript. With the downfall of Flash as
    a web technology, we don''t see ActionScript much in practice anymore save for
    a few discrete uses, but the fact remains: Ecma International created standards
    and they have been used to create different technologies, which helped ease the
    browser wars—for a time.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript在ECMA-262规范中有文档记录。你可能已经看到过**ECMAScript**或“基于ECMAScript的语言”这个术语。除了JavaScript之外，还有更多的ECMAScript语言！ActionScript是另一种基于ECMAScript的语言，遵循与JavaScript类似的约定。随着Flash作为一种网络技术的衰落，我们不再在实践中看到ActionScript，除了一些离散的用途，但事实仍然存在：Ecma
    International创建了标准，并用于创建不同的技术，这有助于缓解浏览器之战——至少是一段时间。
- en: Perhaps the most interesting part of Ecma International with regard to JavaScript
    is the various versions that have been codified. To date, there are nine versions,
    all with varying differences. We will be using ECMAScript 2015 (also known as
    ES6) throughout this book, as it is the most stable baseline for web development
    work today. Features of the 2016-2018 versions can be used by some browsers and
    will be introduced.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JavaScript，Ecma International最有趣的部分也许是已经编码的各种版本。迄今为止，已经有九个版本，都有不同的差异。我们将在本书中使用ECMAScript
    2015（也称为ES6），因为它是今天网页开发工作最稳定的基线。2016-2018版本的功能可以被一些浏览器使用，并将被介绍。
- en: HTML, CSS, and JavaScript – the best friends of the frontend
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML、CSS和JavaScript——前端的最好伙伴
- en: 'Powering every modern website or web application are, at a minimum, three technologies:
    HTML, **Cascading Style Sheets** (**CSS**), and JavaScript. They are the "best
    friends" of the frontend, and are illustrated in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个现代网站或Web应用程序的核心至少包括三种技术：HTML、**层叠样式表**（**CSS**）和JavaScript。它们是前端的“最好的朋友”，并在以下截图中进行了说明：
- en: '![](assets/9a5e3a54-0f0e-42a2-ab09-3ab748173cfe.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a5e3a54-0f0e-42a2-ab09-3ab748173cfe.png)'
- en: 'Figure 1.1 - The best friends: HTML, CSS, and JavaScript'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 - 最好的朋友：HTML、CSS和JavaScript
- en: At the intersection of the three technologies is where our modern website lives.
    Let's take a look at these in the following sections.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种技术的交汇处就是我们现代网站的所在。让我们在接下来的章节中来看看这些。
- en: HTML, the overlooked hero
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML，被忽视的英雄
- en: 'When we think about the web, the basic structure of a site—the skeleton, if
    you will—is HTML. However, with its (purposeful) simplicity, it''s often ignored
    as being a simple technology. One way to think about a website is thinking about
    a body: HTML is the skeleton; CSS is the skin; our friend JavaScript is the muscle.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们思考网络时，网站的基本结构——骨架，可以说是HTML。然而，由于其（有意的）简单性，它经常被忽视为一种简单的技术。想象一下网站就像是一个身体：HTML是骨架；CSS是皮肤；我们的朋友JavaScript是肌肉。
- en: 'HTML''s history is inextricably tied to that of the web itself, as it continues
    to evolve with advancing specifications, features, and syntax as the web itself
    grows. But what is HTML? It''s not a full-fledged programming language: it can''t
    do logic or manipulate data. However, as a markup language, it''s incredibly important
    to our use of the web. We won''t spend too much time talking about HTML, but some
    basics will get us on the right track.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: HTML的历史与网络本身的历史密不可分，因为它随着网络本身的发展不断演进，具有先进的规范、特性和语法。但HTML是什么？它不是一个完整的编程语言：它不能进行逻辑操作或数据操作。然而，作为一种标记语言，它对我们使用网络非常重要。我们不会花太多时间讨论HTML，但一些基础知识会让我们走上正确的轨道。
- en: The HTML specification is controlled by the **World Wide Web Consortium** (**W3C**),
    and its current version is HTML5\. HTML's grammar consists of elements, called
    tags, that have specific definitions and are surrounded by angle brackets. When
    used in JavaScript, these tags describe nodes of data that JavaScript can read
    and manipulate.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: HTML规范由**万维网联盟**（**W3C**）控制，其当前版本是HTML5。HTML的语法由称为标签的元素组成，这些标签具有特定的定义，并用尖括号括起来。在JavaScript中使用时，这些标签描述了JavaScript可以读取和操作的数据节点。
- en: Why is HTML important to us in JavaScript? JavaScript can touch HTML using the
    browser's internal **Application Programming Interface** (**API**) called the
    **Document Object Model** (**DOM**). The DOM is the programmatic representation
    of all the HTML on the page, and it dictates how JavaScript can manipulate elements
    on a rendered page. Unlike Python, JavaScript can react to user inputs without
    communicating back to the server; its execution logic can happen on the frontend.
    Think about when you enter information in a form on a website. Sometimes, there
    are required fields, and if you attempt to submit the form, JavaScript can halt
    the submission to the server and give visual cues—such as red outlines on required
    boxes and a warning message—and convey to the user that information is missing.
    This is an example of JavaScript using the DOM for interactivity. We'll dive further
    into this later on, in [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml),
    *Events, Event-Driven Design, and APIs*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: HTML对我们在JavaScript中的重要性是什么？JavaScript可以使用浏览器内部的**应用程序编程接口**（**API**）即**文档对象模型**（**DOM**）来操作HTML。DOM是页面上所有HTML的程序表示，并且它规定了JavaScript如何操作呈现页面上的元素。与Python不同，JavaScript可以在前端对用户输入做出反应，而无需与服务器进行通信；它的执行逻辑可以在前端进行。想象一下当您在网站上的表单中输入信息时。有时，有必填字段，如果您尝试提交表单，JavaScript可以阻止向服务器提交，并给出视觉提示——例如必填框上的红色轮廓和警告消息——并告知用户信息缺失。这是JavaScript使用DOM进行交互的一个例子。我们将在后面更深入地探讨这一点，在[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)中，*事件、事件驱动设计和API*。
- en: 'Here''s an example of a simple HTML5 boilerplate:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的HTML5样板的例子：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s pretty legible in and of itself: contained within tags titled `title`
    is a string containing a simple title for this page. In the `meta` tag, we have
    one more element besides the name of the tag: the `charset` *attribute*. HTML5
    also introduced *semantic* tags, which not only provide a visual structure to
    the page but also describe the purpose of the tag. For example, `nav` and `footer`
    are used to denote navigation and footer sections on a page. If you''d like to
    experiment with HTML, CSS, and JavaScript as we progress, you can use a tool such
    as Codepen.io or JSFiddle.net. Since we''re so far only working with client-side
    work, you don''t need a compiler or any other software on your computer. You can
    also work locally with your favorite text editor and then load your HTML in a
    browser.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它本身相当易读：在标题为`title`的标签中包含了一个包含页面简单标题的字符串。在`meta`标签中，除了标签的名称外，我们还有一个元素：`charset`
    *属性*。HTML5还引入了*语义*标签，它们不仅为页面提供了视觉结构，还描述了标签的目的。例如，`nav`和`footer`用于表示页面上的导航和页脚部分。如果您想在我们进行的过程中尝试HTML、CSS和JavaScript，您可以使用诸如Codepen.io或JSFiddle.net之类的工具。由于我们目前只使用客户端工作，您不需要在计算机上安装编译器或其他软件。您也可以使用您喜欢的文本编辑器在本地工作，然后在浏览器中加载您的HTML。
- en: 'One more set of attributes that are important to our needs with JavaScript
    are `class` and `id`. These attributes provide an efficient conduit by which JavaScript
    can access HTML. Let''s take a look in the following code block at a more fleshed-out
    example of HTML:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们在JavaScript中的需求来说，还有一组重要的属性是`class`和`id`。这些属性为JavaScript访问HTML提供了一个高效的通道。让我们在下面的代码块中看一个更加详细的HTML示例：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of this will give us a very simple page, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个非常简单的页面输出，如下所示：
- en: '![](assets/c97ed1d0-da66-4260-a57a-6e4beeef7fb3.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c97ed1d0-da66-4260-a57a-6e4beeef7fb3.png)'
- en: Figure 1.2 - A simple HTML page
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 - 一个简单的HTML页面
- en: Very basic, right? Why is Please enter your name repeated? If you notice the
    second `p` tag on the page, one of its classes is `hidden`. However, we can still
    see it. We'll need CSS to help us out here.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 非常基础，对吧？为什么“请输入您的姓名”会重复显示？如果你注意到页面上的第二个“p”标签，它的一个类是“hidden”。然而，我们仍然可以看到它。我们需要CSS来帮助我们。
- en: CSS
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS
- en: 'If HTML is the bone structure of our page, then CSS is the *skin* of it, giving
    it a look and feel. Working with JavaScript on the frontend inherently takes into
    consideration CSS as well. In the example of our website form, the red outlines
    and warning messages are often triggered by toggling CSS classes. Here''s a short
    example of CSS:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果HTML是我们页面的骨架，那么CSS就是它的“皮肤”，赋予它外观和感觉。在前端使用JavaScript时，必然会考虑到CSS。在我们网站表单的示例中，红色轮廓和警告消息通常是通过切换CSS类触发的。以下是CSS的简短示例：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, we have one CSS declaration (the `error` class, denoted as
    a class by the period preceding its name), and two CSS rules inside the curly
    braces for font color and font weight. It won't be important for now to be fully
    versed in CSS structure and rules, but as a JavaScript developer for the frontend,
    you will likely interact with CSS. For example, toggling our `error` class to
    make the text in our form red and bold is one way that JavaScript can trigger
    a message to the user, informing them that there's a problem with the form submission.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有一个CSS声明（“error”类，由其名称前面的句号表示为类），以及花括号内的两个CSS规则，用于字体颜色和字体粗细。现在完全掌握CSS结构和规则并不重要，但作为前端的JavaScript开发人员，你可能会与CSS互动。例如，切换我们的“error”类以使表单中的文本变红并加粗是JavaScript触发向用户发送消息的一种方式，告诉他们表单提交存在问题。
- en: 'Let''s add the preceding CSS into our previous HTML work. We can see this results
    in the following change:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前面的CSS添加到我们之前的HTML工作中。我们可以看到这导致了以下变化：
- en: '![](assets/c0f69e97-3388-4d9e-9eda-cf0b0e5049ef.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c0f69e97-3388-4d9e-9eda-cf0b0e5049ef.png)'
- en: Figure 1.3 - Adding a bit of CSS
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 - 添加一些CSS
- en: 'Now, we can see that the rules of red and bold are being reflected, but we
    can still see the paragraph. Our next two CSS rules are the following ones:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到红色和粗体的规则已经反映出来，但我们仍然可以看到段落。我们接下来的两个CSS规则是以下的：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is a little closer to what we expect to see. But why make a paragraph just
    to hide it with CSS?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这更接近我们期望看到的内容。但为什么要创建一个段落然后用CSS隐藏它呢？
- en: JavaScript
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: Enter our friend, JavaScript. If JavaScript is going to be the muscles of the
    body, it's then responsible for manipulating the bones (HTML) and the skin (CSS).
    Our human muscles can't do all that much to change our physical appearance, but
    they can certainly put us in different positions, expanding and contracting our
    elastic skin and manipulating the positions of our bones. With JavaScript, it's
    possible to rearrange content on a page, change colors, create animations, and
    much more. We'll be diving deeply into how JavaScript interacts with HTML and
    CSS because, after all, JavaScript is why we're here now, reading this book!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来介绍JavaScript。如果JavaScript是身体的肌肉，那么它就负责操纵骨骼（HTML）和皮肤（CSS）。我们的肌肉不能太多地改变我们的外貌，但它们肯定可以让我们处于不同的位置，扩展和收缩我们的弹性皮肤，并操纵我们的骨骼位置。通过JavaScript，可以重新排列页面上的内容，更改颜色，创建动画等等。我们将深入探讨JavaScript如何与HTML和CSS交互，因为毕竟，JavaScript就是我们现在阅读这本书的原因！
- en: One of the most notable points to make about JavaScript versus Python is that,
    in order to make changes to a page, a Pythonic program would have to respond to
    input from the client side from the server, and then the browser would re-render
    the HTML. JavaScript avoids this by executing in the browser.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript与Python相比最显著的一点是，为了对页面进行更改，Python程序必须响应来自客户端的输入，然后浏览器会重新呈现HTML。JavaScript通过在浏览器中执行来避免这一点。
- en: For example, in our page shown previously, if the user tries to submit the form
    without entering a name, JavaScript can remove the `hidden` class and add the
    `show` class, at which point the error message shows. This is a very simple example,
    but it underscores the idea that JavaScript can execute changes in the browser
    *without* calling back to the server. Let's put the pieces together.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们之前显示的页面中，如果用户尝试在不输入名称的情况下提交表单，JavaScript可以移除“hidden”类并添加“show”类，此时错误消息就会显示。这是一个非常简单的例子，但它强调了JavaScript可以在浏览器中执行更改而无需回调服务器的想法。让我们把这些组合起来。
- en: 'The HTML is shown in the following example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML的示例：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The CSS is shown in the following example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS的示例：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s write some JavaScript. This likely won''t make sense yet, but if
    you''re working along in an editor such as JSFiddle, try to place the following
    JavaScript in the JS pane and hit Run:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们写一些JavaScript。目前可能还不太明白，但如果你在JSFiddle等编辑器中跟着做，尝试将以下JavaScript放入JS窗格中并点击运行：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, if you run this and click Submit without entering any data into the box,
    our error message will display. Very simple so far, but congratulations! You just
    wrote some JavaScript! Now, how would we do this with Python? We'd have to submit
    the form to our backend, evaluate the inputs provided, and re-render the page
    with our error message.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你运行这个并在不输入任何数据的情况下点击提交，我们的错误消息将显示。到目前为止非常简单，但恭喜你！你刚刚写了一些JavaScript！那么，我们如何用Python来做到这一点呢？我们需要将表单提交到后端，评估提供的输入，并重新呈现带有错误消息的页面。
- en: Instead, welcome to working with the *frontend*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，欢迎来到与前端一起工作。
- en: How JavaScript fits into the frontend ecosystem
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript如何适应前端生态系统
- en: As you can imagine, there's more to JavaScript than simply hiding and showing
    elements. A powerful application is more than just a collection of script tags—JavaScript
    fits into an overall lifecycle and ecosystem, creating rich user experiences.
    We'll be diving into **single-page applications** (**SPAs**) using React in a
    [Chapter 8](277a102d-e770-4152-a56d-40f35e2858e2.xhtml), *Working with Frameworks
    and Libraries*, so, for now, let's set the stage.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所想象的那样，JavaScript不仅仅是隐藏和显示元素。一个强大的应用程序不仅仅是一堆脚本标签——JavaScript适应整个生命周期和生态系统，创造丰富的用户体验。我们将在[第8章](277a102d-e770-4152-a56d-40f35e2858e2.xhtml)中使用React来深入探讨**单页应用程序**（**SPAs**），所以现在，让我们先打下基础。
- en: If you're not familiar with the term SPA don't worry—you've already used at
    least a few without realizing that that's what they were. Perhaps you use Google's
    Gmail service. If you do, poke around at it a little bit and notice that the page
    doesn't appear to do hard refreshes to get information from the server. Instead,
    it communicates asynchronously with the server and dynamically renders content.
    There may be periods of waiting for content to load from the server that is often
    filled with a little spinning icon. The name for this underlying paradigm of loading
    content asynchronously from a server and sending data back is called **Ajax**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对SPA这个术语不熟悉，不用担心——您可能已经使用了至少几个，而没有意识到它们是什么。也许您使用谷歌的Gmail服务。如果是这样，稍微浏览一下，注意到页面似乎并没有进行硬刷新来从服务器获取信息。相反，它与服务器异步通信，并动态呈现内容。在等待从服务器加载内容的过程中，通常会出现一个小的旋转图标。从服务器异步加载内容并发送数据的基本范式称为**Ajax**。
- en: Ajax, short for **Asynchronous JavaScript and XML**, is simply a collection
    of technologies and techniques used on the client side to streamline the user
    experience by allowing data to be fetched and sent in the background. We'll be
    discussing calling APIs from the frontend with Ajax a bit later, but for now,
    let's try a small example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax，即**异步JavaScript和XML**，只是一组用于客户端的技术和技巧，通过允许在后台获取和发送数据来简化用户体验。我们稍后将讨论使用Ajax从前端调用API，但现在，让我们尝试一个小例子。
- en: Our first Ajax application
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的第一个Ajax应用程序
- en: First, we'll create a very simple Python script, using Flask. If you're not
    familiar with Flask yet, don't worry—we won't get into it in detail here.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用Flask创建一个非常简单的Python脚本。如果您对Flask还不熟悉，不用担心——我们不会在这里详细介绍它。
- en: 'Here''s an example of an `app.py` script:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`app.py`脚本的例子：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s our HTML with JavaScript (`index.html`):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的HTML和JavaScript（`index.html`）：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before we break this down, let''s try to run it, by executing the following
    code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们分解这个之前，让我们尝试运行它，通过执行以下代码：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We should see the following screen:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下屏幕：
- en: '![](assets/54a5cfd5-4bbd-43ed-87e8-c1c722705bc1.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/54a5cfd5-4bbd-43ed-87e8-c1c722705bc1.png)'
- en: Figure 1.4 - A basic Flask page
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 - 一个基本的Flask页面
- en: 'Let''s click Submit, and the following screen should appear:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击提交，然后应该出现以下屏幕：
- en: '![](assets/1c78b4ca-5adb-4d5a-9662-a22897b1b457.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1c78b4ca-5adb-4d5a-9662-a22897b1b457.png)'
- en: Figure 1.5 - Wiring Python to JavaScript!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 - 将Python连接到JavaScript！
- en: We successfully displayed the text Todo… from Python in JavaScript! Let's take
    a quick look at how we did that.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地在JavaScript中显示了来自Python的文本Todo…！让我们快速看一下我们是如何做到的。
- en: Our base route (the `/` route) will serve our static `index.html` file. Great—now,
    we can see our HTML. But what about the second route, `/data`? It's simply going
    to return text. So far, it's not very different from any bare-bones Flask application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本路由（`/`路由）将提供我们的静态`index.html`文件。太好了，现在我们可以看到我们的HTML。但是第二个路由`/data`呢？它只是返回文本。到目前为止，它与任何基本的Flask应用程序并没有太大的不同。
- en: 'Now, let''s take a look at our JavaScript. There''s one thing to note first
    and foremost: in our HTML file, we can wrap our JavaScript with `<script>` tags.
    While storing JavaScript in a separate file brought in with its own script tag
    (we''ll get to that), it''s convenient to include code directly in your HTML for
    small, quick, and non-production debugging purposes. There are times when you
    will insert code directly in your HTML file, but this does not happen often. For
    now, we''ll break our best practices and play with the following snippet:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们的JavaScript。首先要注意的一件事是：在我们的HTML文件中，我们可以用`<script>`标签包裹我们的JavaScript。虽然将JavaScript存储在一个带有自己的脚本标签的单独文件中（我们会讨论到这一点），但在HTML中直接包含代码对于小型、快速和非生产调试目的非常方便。有时您会直接在HTML文件中插入代码，但这并不经常发生。现在，我们将打破最佳实践，玩一下以下片段：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Hm. What is this cryptic line? It''s the beginning of an ES6 arrow function.
    We''ll dive into functions in more depth later, but for now, let''s see what we
    can glean from this line, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。这是什么神秘的一行？这是一个ES6箭头函数的开头。我们稍后会更深入地讨论函数，但现在，让我们看看我们可以从这行中得到什么，如下所示：
- en: '`document.getElementById(''submit'')`: By looking at our HTML, we can see there
    is an element with the ID attribute of `''submit''`: the button. So, first, we''re
    looking for our button.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document.getElementById(''submit'')`：通过查看我们的HTML，我们可以看到有一个带有ID属性`''submit''`的元素：按钮。所以，首先，我们要找到我们的按钮。'
- en: '`.onclick`: Here''s an action verb for us. If you guessed that this function
    is designed to take action when a user clicks the button, you''re correct.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.onclick`：这是一个动作动词。如果您猜到这个函数是设计为在用户点击按钮时执行操作，那么您是正确的。'
- en: As for the rest of the contents of the function, we can guess that we're doing
    something with an event—something regarding fetching data and then doing something
    with it. So, what's that something?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 至于函数的其余内容，我们可以猜到我们正在处理一个事件——涉及获取数据然后对其进行某些操作。那么，这个操作是什么？
- en: '`alert(response)` is what we’re doing with it! An `alert` is just one of those
    annoying little pop-up messages you see in your browser, and, with the data from
    Flask, we displayed it in one of those! Again, not quite *practical*, but hopefully
    you can see where we''re going: the frontend doesn''t exist in a vacuum—we can
    communicate back and forth between the client-side and the server-side with just
    a few lines of code on either side.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert(response)`就是我们对它的处理！`alert`只是你在浏览器中看到的那些烦人的弹出消息之一，而且，我们用来显示Flask的数据！虽然不太*实用*，但希望你能看到我们的方向：前端并不是独立存在的——我们可以在客户端和服务器端之间来回通信，只需在任一端写几行代码。'
- en: 'We''ll take a look at the `fetch` function in closer detail when discussing
    APIs, but for now, let''s take a minute to look at what we''ve done so far with
    this exercise, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论API时，我们将更详细地查看`fetch`函数，但现在，让我们花一分钟来看看我们到目前为止所做的练习，如下所示：
- en: We created a small web application using Python and Flask to serve a simple
    HTML page.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Python和Flask创建了一个小型的Web应用程序来提供一个简单的HTML页面。
- en: 'This application also had an endpoint to serve a very simple message as its
    output: Todo….'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个应用程序还有一个端点，用来提供一个非常简单的消息作为输出：待办事项……。
- en: Using JavaScript, we took action when the user clicked the Submit button.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript，当用户点击提交按钮时我们采取了行动。
- en: Upon clicking the Submit button, JavaScript communicated with the Python application
    to request data.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击提交按钮后，JavaScript与Python应用程序通信以请求数据。
- en: The returned data was displayed to the user in an alert window.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回的数据显示在警报窗口中向用户展示。
- en: And that's it! We made our first successful Ajax call.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们成功发出了第一个Ajax调用。
- en: JavaScript in practice
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际中的JavaScript
- en: 'Now that we''ve seen a hands-on example of how JavaScript can be used with
    Python, let''s discuss its uses across the frontend spectrum. Spoiler alert: we''ll
    be using JavaScript on the server side, starting in the next chapter. We encountered
    some cryptic commands in our Ajax example, so while it may be easy to overlook
    the use of and need for JavaScript, we see it''s a real language with real applications.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了JavaScript如何与Python一起使用的实际例子，让我们讨论一下它在前端领域的用途。剧透警告：我们将在下一章开始在服务器端使用JavaScript。在我们的Ajax示例中遇到了一些神秘的命令，因此可能很容易忽视对JavaScript的使用和需求，但我们看到它是一种真正具有实际应用的语言。
- en: 'Part of the beauty of JavaScript is its nearly universal adoption in browsers.
    Over time, JavaScript syntax and features have slowly evolved, but support for
    the different features, which were at one time wildly different between browsers,
    is now standardizing. Some differences still remain, however, but there are useful
    tools on the web that are kept up to date on the various features that browsers
    may or may not support. One of these sites is [caniuse.com](https://caniuse.com),
    and this is illustrated in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript之美的一部分在于它几乎被所有浏览器普遍采用。随着时间的推移，JavaScript的语法和功能已经慢慢发展，但对于不同功能的支持，曾经在各个浏览器之间差异巨大，现在正在标准化。然而，仍然存在一些差异，但网上有一些有用的工具，可以及时更新浏览器可能支持或不支持的各种功能。其中一个网站是[caniuse.com](https://caniuse.com)，如下截图所示：
- en: '![](assets/b85d0547-d160-41ad-9ce7-d9faeb1f7fb5.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b85d0547-d160-41ad-9ce7-d9faeb1f7fb5.png)'
- en: 'Figure 1.6: Screenshot of caniuse.com showing the selection for scroll methods
    on elements'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：caniuse.com的屏幕截图，显示了元素滚动方法的选择。
- en: The various methods and properties of JavaScript are broken out in this site
    by various popular browsers in a matrix to show which are (and which are not)
    supported by each browser. In general, however, you won't need to worry too much
    about whether or not your code will run on a given browser unless you're using
    cutting-edge features.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站将JavaScript的各种方法和属性按照各种流行的浏览器分解成矩阵，以显示每个浏览器支持（或不支持）的情况。然而，总的来说，除非你使用的是尖端功能，否则你不需要太担心你的代码是否能在特定的浏览器上运行。
- en: Now, we've shown an example of JavaScript interacting with Python as our backend
    using Flask, but we can use practically any backend system, as long as it's prepared
    to accept inbound HTTP traffic. Python, PHP, Ruby, Java—the possibilities are
    all there, as long as the backend expects to be working with a frontend.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经展示了JavaScript与Python交互的示例，作为我们的后端使用Flask，但我们可以使用几乎任何后端系统，只要它准备好接受入站的HTTP流量。Python、PHP、Ruby、Java——所有的可能性都在那里，只要后端期望与前端一起工作。
- en: 'A note about libraries such as jQuery: we won''t be using jQuery in this book.
    While useful for shortcuts and simplification of some methods, one of its major
    draws (at least for many developers such as myself) was its under-the-hood standardization
    of JavaScript between browsers. Remember that Ajax `fetch` call we made? It used
    to be the case that an Ajax call had to be written in two different ways, one
    for each main type of JavaScript interpreter. However, browser standardization
    has eased most of the cross-browser nightmares. jQuery still provides many tools
    that are useful, especially for the **user interface** (**UI**), such as plugins
    that make it unnecessary to write components from scratch. Whether or not you
    use jQuery or similar libraries is up to you or will be dictated by the project''s
    needs. Libraries such as React, which we *will* be discussing, are designed to
    fill a very different need than libraries such as jQuery.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 关于jQuery等库的一点说明：我们在本书中不会使用jQuery。虽然它对于某些方法的快捷方式和简化很有用，但它的一个主要吸引点（至少对于像我这样的许多开发人员来说）是它在浏览器之间的底层标准化。还记得我们发出的Ajax
    `fetch`调用吗？过去，Ajax调用必须以两种不同的方式编写，每种方式对应一个主要类型的JavaScript解释器。然而，浏览器的标准化已经缓解了大部分跨浏览器的噩梦。jQuery仍然提供许多有用的工具，特别是对于**用户界面**（**UI**）来说，比如可以使我们无需从头开始编写组件的插件。是否使用jQuery或类似的库取决于你或将由项目的需求决定。像React这样的库，我们将会讨论，旨在满足与jQuery等库非常不同的需求。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: JavaScript has a large, respected place in the modern web. From simple beginnings
    at NCSA, it's now an integral part of modern web applications, whether for UI,
    Ajax, or other needs. It has official specifications and is constantly evolving,
    making working with JavaScript ever more exciting. Working in concert with HTML
    and CSS, it can do much more than simple interactivity, and it can easily communicate
    with (almost) any backend system. Its purpose is to give us more than static pages—we
    want pages that do work. If you coded along, we made a simple Ajax application,
    and while right now the commands are probably nonsensical to you, you can hopefully
    see that JavaScript is fairly legible. We'll be taking a deep dive into JavaScript's
    grammar and construction later on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript在现代网络中占据着重要的地位。从NCSA的简单起步，它现在已经成为现代网络应用的一个组成部分，无论是用于UI、Ajax还是其他需求。它有官方规范，并不断发展，使得与JavaScript一起工作变得更加令人兴奋。与HTML和CSS协同工作，它可以做的远不止简单的交互，而且可以轻松地与（几乎）任何后端系统通信。它的目的是给我们带来不仅仅是静态页面，我们希望页面能够工作。如果你跟着编码，我们做了一个简单的Ajax应用，虽然现在这些命令对你来说可能毫无意义，但希望你能看到JavaScript是相当易读的。我们将在以后深入研究JavaScript的语法和结构。
- en: We haven't spent time discussing the backend use of JavaScript yet, but don't
    worry—that's next.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有讨论过JavaScript后端的用途，但不用担心，下面就会讨论。
- en: Questions
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Try your hand at answering the following questions to test your knowledge:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 试着回答以下问题来测试你的知识：
- en: Which international group maintains the official specification for JavaScript?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个国际组织维护JavaScript的官方规范？
- en: W3C
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: W3C
- en: Ecma International
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ecma国际
- en: Netscape
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网景
- en: Sun
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sun
- en: Which backends can communicate with JavaScript?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些后端可以与JavaScript通信？
- en: PHP
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PHP
- en: Python
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python
- en: Java
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java
- en: All of the above
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: Who was the original author of JavaScript?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁是JavaScript的原始作者？
- en: Tim Berners-Lee
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tim Berners-Lee
- en: Brendan Eich
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Brendan Eich
- en: Linus Torvalds
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linus Torvalds
- en: Bill Gates
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比尔·盖茨
- en: What is the DOM?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DOM是什么？
- en: JavaScript's representation of HTML in memory
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript在内存中对HTML的表示
- en: An API to allow JavaScript to modify the page
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个允许JavaScript修改页面的API
- en: Both of the above
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上两者
- en: None of the above
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: What is the primary use of Ajax?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ajax的主要用途是什么？
- en: Communicating with the DOM
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与DOM通信
- en: Manipulating the DOM
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作DOM
- en: Listening for user input
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听用户输入
- en: Communicating with a backend
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与后端通信
- en: Further reading
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are a few resources for you to peruse:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些资源供您参考：
- en: 'Thoriq Firdaus, Ben Frain, and Benjamin LaGrone. *HTML5 and CSS3: Building
    Responsive Websites. *Birmingham: Packt Publishing, 2016.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Thoriq Firdaus，Ben Frain和Benjamin LaGrone。*HTML5和CSS3：构建响应式网站。*伯明翰：Packt Publishing，2016年。
- en: Browser wars: [https://en.wikipedia.org/wiki/Browser_wars](https://en.wikipedia.org/wiki/Browser_wars)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器战争：[https://en.wikipedia.org/wiki/Browser_wars](https://en.wikipedia.org/wiki/Browser_wars)
- en: W3C: [https://www.w3.org/](https://www.w3.org/)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: W3C：[https://www.w3.org/](https://www.w3.org/)
